{
    "3ae45bd14e7f417c9f717caaa1c8e5f6": [
        "def solution():\n    total_bones = 206\n    hand_bones_fraction = 27 / 103\n    finger_bones_fraction_of_hand = 14 / 27\n    \n    hand_bones = total_bones * hand_bones_fraction\n    finger_bones = hand_bones * finger_bones_fraction_of_hand\n    \n    return int(finger_bones)\n\nans = solution()"
    ],
    "b59c5c8afae1475392bc408efcd4db9b": [
        "def solution():\n    ans = (24 / 100) * 25\n    return ans\n\nans = solution()"
    ],
    "5c4e76cbed394941b52264c055387694": [
        "def solution():\n    remaining_after_bag = 90 / (1 - 0.4)\n    initial_amount = remaining_after_bag / (1 - 0.2)\n    return initial_amount\n\nans = solution()"
    ],
    "559135fce0cc43d09bcdb784b6b68b16": [
        "def solution():\n    n = 15  # Upper limit of the range\n    m = 4   # Lower limit of the range subtracted by 1 because the formula is inclusive\n\n    # Applying the formula to calculate the sum of squares from 1 to n\n    total_n = (n * (n + 1) * (2 * n + 1)) // 6\n    \n    # Applying the formula to calculate the sum of squares from 1 to m\n    total_m = (m * (m + 1) * (2 * m + 1)) // 6\n    \n    # Subtracting the sum of squares up to m to get the sum from (m+1) to n\n    ans = total_n - total_m\n    \n    return ans\n\nans = solution()"
    ],
    "04ba6a8bbd934c9fb2c34951b1c5e1b9": [
        "def solution():\n    for n in range(1, 100):  # Assuming a reasonable upper limit for number of students\n        if (n*n + 5) + 26 == (n + 1)*(n + 1):\n            return n*n + 5\n\nans = solution()"
    ],
    "7598dc1e2b3942f987670ac551b91e44": [
        "from fractions import Fraction\n\ndef solution():\n    product = 1\n    for i in range(2, 10):\n        product *= Fraction(1 + 1/i)\n    return product\n\nans = solution()"
    ],
    "55d37813feb54cc0939c8d521cc804ed": [
        "def solution():\n    # Let's denote the number of apples Amy gives to John as x.\n    # After giving x apples to John, Amy will have 37 - x apples and John will have 15 + x apples.\n    # We need to find x such that Amy has 4 more apples than John.\n    # Therefore, the equation to solve is: (37 - x) = (15 + x) + 4\n\n    # Solving for x gives us:\n    x = (37 - 15 - 4) // 2\n\n    return x\n\nans = solution()"
    ],
    "f0976cf87d42410886ef671aee576759": [
        "def solution():\n    # Pip was 6th from the front.\n    pip_position_from_front = 6\n    \n    # Bud was 6th from the end.\n    bud_position_from_end = 6\n\n    # There were 5 children between Pip and Bud, plus Pip himself.\n    children_between_pip_and_bud = 5 + 1\n\n    # Total children = children in front of Pip + children between Pip and Bud + children behind Bud (including Bud).\n    total_children = (pip_position_from_front - 1) + children_between_pip_and_bud + (bud_position_from_end - 1)\n\n    return total_children\n\nans = solution()"
    ],
    "e17f0eb85a0a4e86a5fdc51debd2ae80": [
        "def solution():\n    sale_price = 99000\n    # Let x1 and x2 be the original prices of the houses\n    # x1 * 1.10 = 99000 (sale price including 10% profit)\n    # x2 * 0.90 = 99000 (sale price after 10% loss)\n\n    x1 = sale_price / 1.10\n    x2 = sale_price / 0.90\n\n    # The total cost is the sum of original prices\n    total_cost = x1 + x2\n    # The total sale price is twice the sale price of one house\n    total_sale = 2 * sale_price\n\n    # The overall profit or loss is the total sale price minus the total cost\n    profit_loss = total_sale - total_cost\n\n    return profit_loss\n\nans = solution()"
    ],
    "b741d2a40c624148991fcce3147038d7": [
        "def solution():\n    jane_saved = 13\n    ali_saved = 5 + 3 * jane_saved\n    return ali_saved\n\nans = solution()"
    ],
    "743c478b487e4e84b54812fd75dcf6e2": [
        "def solution():\n    first_row = 10\n    fourth_row = 25\n    total_rows = 25\n    \n    # Calculate common difference\n    common_difference = (fourth_row - first_row) / (4 - 1)\n    \n    # Calculate last term using arithmetic progression formula: a_n = a_1 + (n-1)*d\n    last_row = first_row + (total_rows - 1) * common_difference\n    \n    # Sum of an arithmetic sequence: S_n = n/2 * (a_1 + a_n)\n    total_athletes = total_rows / 2 * (first_row + last_row)\n    \n    return int(total_athletes)\n\nans = solution()"
    ],
    "7c040f8b099e47f7b0e8c01b1cc4ecfb": [
        "def solution():\n    shirts = 3\n    pants = 2\n    dresses = 3\n    shoes = 4\n    heels = 2\n    \n    # Combinations wearing blouse and pants\n    blouse_pants_combinations = shirts * pants * shoes\n    \n    # Combinations wearing a dress with shoes\n    dress_shoes_combinations = dresses * shoes\n    \n    # Combinations wearing a dress with heels\n    dress_heels_combinations = dresses * heels\n    \n    # Total combinations\n    total_combinations = blouse_pants_combinations + dress_shoes_combinations + dress_heels_combinations\n    \n    return total_combinations\n\nans = solution()"
    ],
    "50918482ad34489a9d43a8fee8182902": [
        "def solution():\n    common_factor = 17\n    return (2 + 3 + 5) * common_factor\n\nans = solution()"
    ],
    "6145df4ce0824a5cb58e397de57d33fd": [
        "def solution():\n    # There is a winning strategy for games like this known as the \"modulo 4\" strategy.\n    # A player can always win if they can keep the number of oranges remaining after their turn as a multiple of 4.\n    # Hence, Fred will try to leave 12 oranges on the table if possible.\n    \n    # Fred can ensure he will win if he follows this strategy:\n    # After Fred's turn, the number of oranges left should be 12, 8, 4, or 0 to win.\n    # Since the game starts with 15 oranges, Fred should remove 3 oranges.\n    \n    # The strategy is: \n    # 1. If there is a multiple of 4 number of oranges, remove oranges to leave a multiple of 4 count for George.\n    # 2. If there is not a multiple of 4, take off enough oranges to leave a multiple of 4.\n    # So for the first move, to reduce 15 to 12 (which is a multiple of 4), Fred needs to take 3 oranges.\n    \n    return 3\n\nans = solution()"
    ],
    "865d61c08ae7439db106bc956f814d22": [
        "def solution():\n    # Given values\n    term_5 = 8\n    term_12 = 50\n\n    # Calculate the common difference using the formula for the nth term of an arithmetic sequence:\n    # a_n = a_1 + (n - 1)d\n    # term_12 - term_5 = (12 - 5) * d\n    # Solving the equation for d\n    \n    common_difference = (term_12 - term_5) / (12 - 5)\n    \n    return common_difference\n\nans = solution()"
    ],
    "a6f2ff602bea44d790a48701447b7788": [
        "def solution():\n    return 816 // 17\n\nans = solution()"
    ],
    "d8b69834edec4cabaf8b61b1c0041fa7": [
        "def solution():\n    fraction = 3 / 20\n    decimal = 0.16\n    \n    ans = '3/20' if fraction > decimal else '0.16'\n    return ans\n\nans = solution()"
    ],
    "f61b518525e8497db5343129a17e8632": [
        "def solution():\n    # let's denote the two original numbers as x and y\n    # we have x + y = 11.63\n\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    \n    # Oliver shifted the decimal point in one of the numbers one position to the left, \n    # so we have x + 0.1*y or 0.1*x + y\n    \n    # Oliver got an answer of 5.87, so we have either of the following two equations\n    equation1 = Eq(x + 0.1*y, 5.87)\n    equation2 = Eq(0.1*x + y, 5.87)\n    \n    # we also know that the sum of the original numbers is 11.63\n    sum_equation = Eq(x + y, 11.63)\n    \n    # let's solve the equations\n    solutions1 = solve((equation1, sum_equation), (x, y))\n    solutions2 = solve((equation2, sum_equation), (x, y))\n    \n    # we get two solutions, but since the numbers are different, we ignore the solution where x = y\n    if solutions1[x] != solutions1[y]:\n        difference = abs(solutions1[x] - solutions1[y])\n    else:\n        difference = abs(solutions2[x] - solutions2[y])\n    \n    # The question asks for one hundred times the difference\n    result = 100 * difference\n    \n    return result\n\nans = solution()"
    ],
    "538a2dfa1040448b8789e3db2bc69bf4": [
        "def solution():\n    cupcakes = 90\n    eggs_per_cupcakes = 3 / 15\n    total_eggs = cupcakes * eggs_per_cupcakes\n    return int(total_eggs)\n\nans = solution()"
    ],
    "087f11a4dea84aec80d825a39e619ea1": [
        "def solution():\n    skipping_rope = 40\n    long_jump = 31\n    both_events = 21\n\n    only_one_event = (skipping_rope - both_events) + (long_jump - both_events)\n\n    return only_one_event\n\nans = solution()"
    ],
    "05b887b14c214e5085156b2107ca9318": [
        "def solution():\n    ans = 74 * 15 * 8 * 250\n    return ans\n\nans = solution()"
    ],
    "f945574dc9954c9b93f6e0ecf99884de": [
        "def solution():\n    for num_notes in range(1, 280):\n        if 5 * num_notes + 10 * num_notes + 20 * num_notes == 280:\n            return 3 * num_notes  # Since we have equal number of each note.\n\nans = solution()"
    ],
    "39130411ca2f46d8be16d6a43fbef29b": [
        "def solution():\n    # Calculate the distance Sara jogs from 6.30 AM to 8.30 AM\n    jogging_time_hours = 2  # from 6:30 AM to 8:30 AM\n    jogging_speed_km_per_hour = 8  # Sara's jogging speed\n    jogging_distance = jogging_time_hours * jogging_speed_km_per_hour\n\n    # Calculate the distance Sara walks from 8.30 AM to 9.30 AM\n    walking_time_hours = 1  # from 8:30 AM to 9:30 AM\n    walking_speed_km_per_hour = jogging_speed_km_per_hour / 2  # Half of her jogging speed\n    walking_distance = walking_time_hours * walking_speed_km_per_hour\n\n    # Total distance traveled\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "68e2259a732c46c8abe672bceb53dfa2": [
        "def solution():\n    count = 0\n    for A_position in range(3):  # A_position can be index 1, 2, or 3 as A is in the middle of B and C\n        for B_position in range(4):  # B_position can be 0, 1, 2, or 3 but not A_position or A_position + 1\n            if B_position == A_position or B_position == A_position + 1:\n                continue\n            for C_position in range(4):  # Same as B, C can't be in A_position or A_position + 1\n                if C_position == B_position or C_position == A_position or C_position == A_position + 1:\n                    continue\n                for D_position in range(4):  # Same logic applies to D\n                    if D_position in [A_position, A_position + 1, B_position, C_position]:\n                        continue\n                    for E_position in range(4):  # And E\n                        if E_position in [A_position, A_position + 1, B_position, C_position, D_position]:\n                            continue\n                        count += 1  # Every unique set of positions leads to a valid arrangement\n    return count\n\nans = solution()"
    ],
    "fba5e5ffd4b2401fb75dcd70694a4470": [
        "def solution():\n    # Palindromic numbers have the form \"ABA\", where A can be 1-9 and B can be 0-9.\n    # There are 9 possibilities for A (since the first digit cannot be zero)\n    # and 10 possibilities for B.\n    ans = 9 * 10\n    return ans\n\nans = solution()"
    ],
    "f5367d282a3a43acbe086861a0f6d129": [
        "def solution():\n    def custom_op1(M, N):\n        return M * N + N + 1\n\n    def custom_op2(M, N):\n        return 8 * M - N * N\n\n    ans = custom_op2(custom_op1(7, 6), 9)\n    return ans\n\nans = solution()"
    ],
    "14305f680d27486a905dd8dc12e89924": [
        "def solution():\n    from sympy import isprime\n\n    p = 2\n    while True:\n        if isprime(p) and isprime(p + 107):\n            break\n        p += 1\n\n    return p\n\nans = solution()"
    ],
    "49c26db5eaf641e1a5d1fedde5e7be96": [
        "def solution():\n    # The last digit of a number only depends on the last digit of its factors\n    # Calculate the last digit of power of 2\n    last_digit_2 = (2 ** (100 % 4)) % 10  # The pattern of last digits in powers of 2 repeats every 4 times\n\n    # Calculate the last digit of power of 7\n    last_digit_7 = (7 ** (100 % 4)) % 10  # The pattern of last digits in powers of 7 repeats every 4 times\n\n    # Calculate the last digit of power of 9\n    last_digit_9 = (9 ** (100 % 2)) % 10  # The pattern of last digits in powers of 9 repeats every 2 times\n\n    # Multiply the last digits of each series and find the last digit of the result\n    product_last_digit = (last_digit_2 * last_digit_7 * last_digit_9) % 10\n\n    return product_last_digit\n\nans = solution()"
    ],
    "16569fabb3364f8488579e555b7c2701": [
        "def solution():\n    # Calculate the sum of the fractions by converting each to a common denominator (60)\n    A = 60 + 30 + 20 + 15 + 12\n    return A\n\nans = solution()"
    ],
    "6136c35f10c146b6933727bbeae9cc0f": [
        "def solution():\n    # 16 marbles total\n    total_marbles = 16\n    # Initialize the count for the smallest number of marbles in the largest pile\n    smallest_number_in_largest_pile = total_marbles\n    # Loop through possible counts of marbles in each pile\n    for a in range(1, total_marbles - 3):\n        for b in range(a + 1, total_marbles - 2):\n            for c in range(b + 1, total_marbles - 1):\n                d = total_marbles - (a + b + c)\n                # Ensure each pile has a different number of marbles\n                if d > c and d < smallest_number_in_largest_pile:\n                    smallest_number_in_largest_pile = d\n    return smallest_number_in_largest_pile\n\nans = solution()"
    ],
    "9e090b3df83a42eebe23be5e23c2fa04": [
        "def solution():\n    n = 19 // 2  # Since we only want the odd squares, there will be (19//2)+1 terms\n    ans = (n * (n + 1) * (2*n + 1)) // 3\n    return ans\n\nans = solution()"
    ],
    "1efe483e70024fb2ab2678147636e373": [
        "def solution():\n    students = 92\n    capacity = 6\n    minibusses = (students + capacity - 1) // capacity\n    return minibusses\n\nans = solution()"
    ],
    "9cf8631bfbee42e5855a61e09bcd4e80": [
        "def solution():\n    total_time = 12  # From first to fourth floor\n    # Assuming each floor interval takes the same amount of time\n    # There are 3 intervals between 1st and 4th floor (1st-2nd, 2nd-3rd, 3rd-4th)\n    time_per_interval = total_time / 3\n    # The time from the first floor to the second floor is one interval\n    ans = time_per_interval\n    return ans\n\nans = solution()"
    ],
    "ddc124ebdf394e27ba7e0a2f7f5a5377": [
        "def solution():\n    return 8\n\nans = solution()"
    ],
    "d10979d095f949d99d2f66996f58a6b3": [
        "def solution():\n    return (24 / 100) * 25\n\nans = solution()"
    ],
    "ea6e646ea13c4df596eb009a1fcb24c6": [
        "def solution():\n    ans = 123456789 * 987654321\n    return ans\n\nans = solution()"
    ],
    "473c8349035b4eefb0b4f9931022b96c": [
        "def solution():\n    n = (13 + 1) // 2  # Since it's odd numbers, calculate number of terms\n    sum_of_n = (n * (n + 1)) // 2  # Sum of first n natural numbers\n    ans = sum_of_n ** 2  # Square of the sum\n    return ans\n\nans = solution()"
    ],
    "28743e9e9f164cf594fa43bdd40cccc5": [
        "def solution():\n    incorrect_avg_height = 159  \n    correct_avg_height = 163  \n    incorrect_height = 126  \n    correct_height = 162  \n    \n    # The difference made by the incorrect recording\n    height_diff = correct_height - incorrect_height\n    \n    # The difference in the average caused by the incorrect recording\n    avg_diff = correct_avg_height - incorrect_avg_height\n    \n    # The number of girls is the difference in height divided by the difference in average\n    num_girls = height_diff // avg_diff\n    \n    return num_girls\n\nans = solution()"
    ],
    "9787f436650643b8bcdc8f3423f5efd0": [
        "def solution():\n    def hash_op(a, b):\n        return a * b - 2 * a + 4\n\n    ans = 200\n    for i in range(199, 0, -1):\n        ans = hash_op(ans, i)\n    return ans\n\nans = solution()"
    ],
    "24dce9b709594b28a5a36bcec14da54f": [
        "def solution():\n    product = 1\n    for i in range(2, 10):\n        product *= (i + 1) / i\n    return product\n\nans = solution()"
    ],
    "262f4235c15a48d8867e110f1ec25448": [
        "def solution():\n    total_apples = 37\n    per_container = 4\n    \n    num_containers = (total_apples + per_container - 1) // per_container\n    \n    return num_containers\n\nans = solution()"
    ],
    "a1026833d23d4e0d9b3d3b7fc72eed9b": [
        "def solution():\n    import math\n    length1 = 56\n    length2 = 42\n    length3 = 84\n\n    # Find the Greatest Common Divisor (GCD) of the lengths\n    gcd_12 = math.gcd(length1, length2)\n    greatest_length = math.gcd(gcd_12, length3)\n\n    return greatest_length\n\nans = solution()"
    ],
    "15dbd49938d249928c98f4f1fcb84fee": [
        "def solution():\n    number = 9876543\n    ans = number + 10000\n    return ans\n\nans = solution()"
    ],
    "8ffc9bb3b9b14815bbbef4f710602d07": [
        "def solution():\n    for cube_root in range(1, 50):\n        cube = cube_root ** 3\n        square_root = int((cube - 2) ** 0.5)\n        square = square_root ** 2\n        if square == cube - 2:\n            return square\n\nans = solution()"
    ],
    "83bd57b5f2044e249a35cf1dc299b27f": [
        "def solution():\n    mark_money = 26\n    sue_money = mark_money / 2\n    total_money = mark_money + sue_money\n    return total_money\n\nans = solution()"
    ],
    "c464a13a5fa84a98b5f96b4da026c8ac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for Ken and Beth's seashells\n    ken, beth = symbols('ken beth')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(ken, beth + 75)  # Ken had $75 more seashells than Beth\n    equation2 = Eq((4/5)*beth, (2/5)*ken)  # 4/5 of Beth's seashells equal to 2/5 of Ken's seashells\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (ken, beth))\n\n    # Calculate the total number of seashells\n    total_seashells = solutions[ken] + solutions[beth]\n\n    return total_seashells\n\nans = solution()"
    ],
    "24e6a79cbcf3471baf6993ecdd2917eb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the unknowns\n    twos, tens = symbols('twos tens')\n\n    # Equations based on the problem\n    total_notes = Eq(twos + tens, 40) # total number of notes\n    spent_tens = Eq(tens - 0.4 * tens, (4/5) * (twos - 0.25 * twos)) # 40% of $10 notes spent\n    # The second equation simplifies to: 0.6 * tens = (4/5) * 0.75 * twos\n\n    # Solve the system of equations\n    solutions = solve((total_notes, spent_tens), (twos, tens))\n\n    # Calculate the cost of the gift\n    cost_of_gift = 0.4 * solutions[tens] * 10 + 0.25 * solutions[twos] * 2\n\n    return cost_of_gift\n\nans = solution()"
    ],
    "e889a2076f404fb8b48259549449cd54": [
        "def solution():\n    numbers = [1, 2, 3, 4, 5, 6, 7, 7, 8, 9]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "249ff97ab0a04659a46ad1e415926b19": [
        "def solution():\n    ans = (7/8) * 32\n    return ans\n\nans = solution()"
    ],
    "9fad48b32dd54f7d8f6c57a2e1c1c739": [
        "from math import comb\n\ndef solution():\n    # Given 13 oranges, each child should get at least 2.\n    # This means we distribute 2 oranges to each child first.\n    # So, a total of 2*3=6 oranges are distributed initially.\n    # Now we are left with 13 - 6 = 7 oranges to distribute freely among 3 kids.\n    \n    # Any of the 3 children can get the 7 oranges.\n    # We use stars and bars method here where:\n    # - stars (oranges to distribute) = 7 (the remaining oranges)\n    # - bars (dividers for the sections for each child) = 3 - 1 = 2 (3 kids minus 1)\n    \n    # The number of ways to divide the stars using the bars will give us the combinations.\n    \n    # The formula for stars and bars is: (stars + bars) choose bars , which is the same as\n    # (stars + bars) choose stars \n    # So, we have (7 + 2) choose 2 ways to divide the oranges.\n    \n    ways = comb(7 + 2, 2)\n    return ways\n\nans = solution()"
    ],
    "97c6599317ae40c0a130a7c36adb4b0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bill, son, father = symbols('bill son father')\n\n    equation1 = Eq(bill, 2 * son)\n    equation2 = Eq(son, father - 50)\n    equation3 = Eq(bill + son + father, 142)\n\n    solutions = solve((equation1, equation2, equation3), (bill, son, father))\n\n    return solutions[bill]\n\nans = solution()"
    ],
    "48f99615d7554b569d6065aa09ad29fe": [
        "def solution():\n    # Let the two original numbers be x and y\n    # We have two equations now:\n    # x + y = 11.63\n    # x + 0.1y = 5.87\n\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n\n    # Equation 1: x + y = 11.63\n    equation1 = Eq(x + y, 11.63)\n\n    # Equation 2: x + 0.1y = 5.87\n    equation2 = Eq(x + 0.1 * y, 5.87)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Find the difference between the two original numbers\n    difference = abs(solutions[x] - solutions[y])\n\n    # Return one hundred times the difference\n    return 100 * difference\n\nans = solution()"
    ],
    "6c29f3b41d5a4f7889347840102cd90e": [
        "def solution():\n    mean_of_five = 87\n    total_students = 6\n    new_mean = 88\n\n    # Total score of 5 students\n    total_score_five = mean_of_five * (total_students - 1)\n\n    # Total score of all students to achieve the new mean\n    total_score_all = new_mean * total_students\n\n    # Jim's score is the difference\n    jim_score = total_score_all - total_score_five\n\n    return jim_score\n\nans = solution()"
    ],
    "fc2dc1ff01c442ee8bac9a42520f29e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sally, john = symbols('sally john')\n    equation1 = Eq(sally + 3, 6 * (john + 3))\n    equation2 = Eq(sally + john, 50)\n\n    solutions = solve((equation1, equation2), (sally, john))\n\n    return solutions[sally]\n\nans = solution()"
    ],
    "c1ee40d11fbd48de808886c4e3c9346a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2*x + 3*x + 2, 30 + 6*x - 8*x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7902f1d486d74393bc7de12711dcb3ff": [
        "def solution():\n    # Since each factor (1 + 1/2^k) can be rearranged as (2^k + 1)/2^k, the product of several such factors\n    # will produce a fraction where the numerator is the sum of all possible selections of 1 or 2^k elements\n    # from the factors (sum of 2^k for k from 0 to a certain power) and the denominator will be the product of\n    # the 2^k terms (2^ sum of k from 0 to the same power).\n    \n    # The resulting numerator for n factors is 2^(2^n) - 1 (the sum of geometric progression with the first\n    # term being 1, the ratio being 2 and the number of terms being 2^n).\n    \n    # The resulting denominator is 2^(0+1+2+...+2^n-1) = 2^(2^n - 1) (also a geometric progression with a sum\n    # given by 2^n - 1).\n    \n    # Making the equation equal to 2(1 - 1/(2^(2^n))), we find that the numerator on the left side is equal\n    # to 2^(2^n) - 1, and the numerator on the right side (after combining the terms under a common\n    # denominator) is 2^(2^n + 1) - 2.\n\n    # Therefore, 2^(2^n) - 1 = 2^(2^n + 1) - 2 after multiplying by 2^(2^n) to get rid of the denominator.\n    # Simplifying, we get 2^(2^n) = 2^(2^n) * 2 - 1.\n    # We conclude the terms 2^(2^n) cancel out and we are left with 1 = 2 - 1, a true statement.\n    # This works for the exponent of the power of 2 in the denominator being one less than the exponent of\n    # the power of 2 in the first term (2^(2^n)) due to it being 2^n - 1. For the equality to be true, we\n    # conclude that the last exponent that contributes to the sum should be the one that, when added 1 to it,\n    # equals the exponent of the term in the numerator, that is, 2^n - 1 + 1 = 2^n.\n    \n    # That means that the last term used in the product on the left side was 1/(2^(2^(n-1))),\n    # which matches the structure of the given left side product, and n from the right side should be 2009.\n\n    # The last factor from the left side is 1 + 1/(2^(2^2009)) thus the last exponent contributing to the sum\n    # is 2^2009. So we solve the equation 2^n = 2^2009 to find the value of n.\n\n    # The value of n that satisfies this equation is n = 2009.\n\n    return 2009\n\nans = solution()"
    ],
    "06973ad362db4d66ba9d6b002e663ba0": [
        "from itertools import permutations\n\ndef solution():\n    for p, a, s, o in permutations(range(10), 4):\n        if p != 0:\n            paso = int(f\"{p}{a}{s}{o}\")\n            soap = int(f\"{s}{o}{a}{p}\")\n            if paso - soap == 2916:\n                return paso\n\nans = solution()"
    ],
    "80475a976f7b497ab82f076e94c1eb50": [
        "def solution():\n    for n in range(100, 1000):\n        if n % 7 == 1 and n % 9 == 5:\n            return n\n\nans = solution()"
    ],
    "eaa3bd18a64e40968b71f7429893a5f4": [
        "def solution():\n    initial_questions = 3  # Number of questions solved on the first day\n    arithmetic_difference = 3  # Increment in the number of questions each day\n    num_days = 7  # Total days from Monday to Sunday\n\n    # Using the formula for the sum of an arithmetic sequence:\n    # S_n = n/2 * (a_1 + a_n), where S_n = sum of first n terms,\n    # n = number of terms, a_1 = first term, a_n = nth term\n    last_day_questions = initial_questions + (num_days - 1) * arithmetic_difference\n    total_questions = (num_days / 2) * (initial_questions + last_day_questions)\n\n    return int(total_questions)\n\nans = solution()"
    ],
    "37ff6eaa86e84fce88804835c34d1857": [
        "def solution():\n    # Man's rate of drinking the orange juice per day\n    man_rate = 1 / 15\n    # Combined rate of drinking the orange juice per day when he shares with his wife\n    combined_rate = 1 / 12\n    # Wife's rate of drinking the orange juice per day\n    wife_rate = combined_rate - man_rate\n    # Wife's time to finish drinking the barrel of orange juice on her own\n    wife_time = 1 / wife_rate\n    \n    return wife_time\n\nans = solution()"
    ],
    "a509801c05d046ddbb0f80cbc8f2de96": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the water Harry and Liam originally had as 'h' and 'l', respectively.\n    h, l = symbols('h l')\n\n    # According to the problem, we have two equations:\n    # 1) The total amount of water they had originally was 640 ml: h + l = 640\n    # 2) If 90 ml of water was transferred from Liam to Harry,\n    #    Harry would have thrice the amount of water as Liam: h + 90 = 3 * (l - 90)\n    equation1 = Eq(h + l, 640)\n    equation2 = Eq(h + 90, 3 * (l - 90))\n\n    # Use sympy's solve function to solve the system of equations.\n    solutions = solve((equation1, equation2), (h, l))\n\n    return solutions[h]\n\nans = solution()"
    ],
    "9402dca5a2494aaa90174d3dcc2b38f6": [
        "def solution():\n    ans = 7.55 + 6.32 + 6.45 - 5.32\n    return ans\n\nans = solution()"
    ],
    "2168499404134fc2adf349c4200b2d1b": [
        "def solution():\n    initial_price = 1000 \n    depreciation_rate = 0.07\n    years = 5\n    depreciated_value = initial_price * ((1 - depreciation_rate) ** years)\n    return depreciated_value\n\nans = solution()"
    ],
    "de889839b5114b1296f34ad36b21626e": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 6:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6cb9a183b95a46fb81d725bba4fbd059": [
        "def solution():\n    remainder = (2 ** 10) % 3\n    return remainder\n\nans = solution()"
    ],
    "b9d47fcf7dbb40338318bab5201d44a1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pearls = symbols('pearls')\n    equation = Eq(1/2 * pearls + 1/4 * pearls + 1/6 * pearls + 3, pearls)\n\n    solution_pearls = solve(equation, pearls)\n\n    return solution_pearls[0]\n\nans = solution()"
    ],
    "ef3f3f94225949a58df726e58eb69b6c": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "5538dcae57d5405daf57ad4e6cbaefbe": [
        "def solution():\n    # Given arithmetic sequence details for 9 to 12 o'clock\n    beans_at_9_to_10 = 20\n    beans_at_10_to_11 = 28\n    beans_at_11_to_12 = 36\n    \n    # Calculate common difference in the arithmetic sequence\n    common_diff = beans_at_10_to_11 - beans_at_9_to_10\n    \n    # Calculate beans peeled in the first hour (7 to 8 o'clock)\n    beans_at_8_to_9 = beans_at_9_to_10 - common_diff\n    beans_at_7_to_8 = beans_at_8_to_9 - common_diff\n    \n    return beans_at_7_to_8\n\nans = solution()"
    ],
    "bf0d9139a15044e2ba9ab0bab0208c0f": [
        "def solution():\n    insect_length_cm = 5\n    snake_length_cm = 100  # 1 meter is 100 centimeters\n\n    times_smaller = snake_length_cm / insect_length_cm\n\n    return times_smaller\n\nans = solution()"
    ],
    "89ff81f6b03f4a6eb38de4755a3e7b7a": [
        "def solution():\n    n = 1\n    term = 1\n    while term < 100:\n        term = n * (n + 1) // 2\n        if term >= 100:\n            break\n        largest_two_digit = term\n        n += 1\n\n    return largest_two_digit\n\nans = solution()"
    ],
    "395df03e3da54196a51c7ff3b7a39d90": [
        "def solution():\n    initial_mean = 120\n    final_mean = 150\n    num_numbers_initial = 3\n\n    total_initial = initial_mean * num_numbers_initial\n    total_final = final_mean * (num_numbers_initial + 1)\n\n    fourth_number = total_final - total_initial\n\n    return fourth_number\n\nans = solution()"
    ],
    "33e3182a110545e4aac441cab30efd1b": [
        "def solution():\n    initial_mass = 2.3\n    mass_given_away = 0.76\n    remaining_mass = initial_mass - mass_given_away\n    return round(remaining_mass, 1)\n\nans = solution()"
    ],
    "53089c6bd249446b8b0196fbb0b9703a": [
        "def solution():\n    return 372 * 6\n\nans = solution()"
    ],
    "3fa1ccdaf7494491b72d7cb7bb7823d5": [
        "def solution():\n    full_weight = 80\n    half_full_weight = 60\n\n    half_basket_weight = half_full_weight - (full_weight - half_full_weight)\n    empty_basket_weight = half_basket_weight - (full_weight - half_full_weight)\n\n    return empty_basket_weight\n\nans = solution()"
    ],
    "cd7290c100ba4294b7ef33d6d31bec83": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 5), (4, 6), (1, 7)]\n    ans = solve_congruence(*congruences)[0]\n    return ans\n\nans = solution()"
    ],
    "cc6e6ddc9099471392da17b986cd942e": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Since we are dealing with consecutive even numbers and their multiples,\n    # we can model the problem using congruences.\n    # Let's call the first number x.\n    # The first number x is a multiple of 7: x ≡ 0 (mod 7)\n    # The second number x+2 is a multiple of 8: (x + 2) ≡ 0 (mod 8)\n    # The third number x+4 is a multiple of 9: (x + 4) ≡ 0 (mod 9)\n    \n    # We transform the second and third congruences to be in terms of x:\n    # x ≡ -2 (mod 8)\n    # x ≡ -4 (mod 9)\n    \n    # Now we use the Chinese Remainder Theorem to find such an x.\n    cong = solve_congruence((0, 7), (-2, 8), (-4, 9))\n\n    # The smallest solution x and the sum of the three numbers x, x+2, x+4.\n    x = cong[0]\n    total_sum = x + (x + 2) + (x + 4)\n\n    return total_sum\n\nans = solution()"
    ],
    "4d3f432b490949d3925832026d9e4a66": [
        "def solution():\n    # Pip is 6th from the front\n    # Bud is 6th from the back\n    # There are 5 children between Pip and Bud, including Pip but not Bud\n    \n    # Form the equation:\n    # Total in queue = (Pip's position from the front) + (Number of children between Pip and Bud) + (Bud's position from the back) - 1\n    # The subtraction of 1 is needed because we count Pip's position twice in the sum.\n    total_children = 6 + 5 + 6 - 1\n    return total_children\n\nans = solution()"
    ],
    "d398f7f40bb64d5fb8ef87ec0477dcf5": [
        "def solution():\n    total_age_now = 29 * 6\n    total_age_children = 64\n    total_age_parents_now = total_age_now - total_age_children\n    average_age_parents_3_years_ago = (total_age_parents_now - 3 * 2) / 2\n    return average_age_parents_3_years_ago\n\nans = solution()"
    ],
    "257342f894034d4f8d8102d254731724": [
        "def solution():\n    paintings_done = 35\n    days_taken = 5\n    total_paintings = 56\n\n    paintings_per_day = paintings_done / days_taken\n    remaining_paintings = total_paintings - paintings_done\n    more_days_needed = remaining_paintings / paintings_per_day\n\n    return more_days_needed\n\nans = solution()"
    ],
    "14ae67b1d73847249fcea1dbc5eda7df": [
        "def solution():\n    first_term = 10\n    fourth_term = 25\n    total_rows = 25\n\n    # Calculate common difference\n    difference = (fourth_term - first_term) // (4 - 1)\n    \n    # Calculate last term using arithmetic sequence formula: a_n = a_1 + (n - 1) * d\n    last_term = first_term + (total_rows - 1) * difference\n    \n    # Calculate sum using arithmetic series formula: S_n = n/2 * (a_1 + a_n)\n    total_athletes = total_rows * (first_term + last_term) // 2\n\n    return total_athletes\n\nans = solution()"
    ],
    "524b8c04c5894f029a0397c7af386fd8": [
        "def solution():\n    left_side = 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3\n    right_side = left_side // 3\n    return right_side\n\nans = solution()"
    ],
    "63e2e26e1682446aac1d93fad30b5007": [
        "def solution():\n    total_papers = 18\n    interval = 3\n\n    # Every interval of 3, one leaf is inserted. \n    # So, we divide the total number of papers by the interval and that's the number of leaves.\n    num_leaves = total_papers // interval\n\n    return num_leaves\n\nans = solution()"
    ],
    "dc8c93a375a54464922a54b1b49ff957": [
        "def solution():\n    term_5 = 8\n    term_12 = 50\n    common_difference = (term_12 - term_5) / (12 - 5)\n    return common_difference\n\nans = solution()"
    ],
    "155a2124ddcf40f9b74dff87ab3c4f69": [
        "def solution():\n    # A and B can each only be in position 1 or 4, \n    # which gives us 2 options for A and 2 options for B\n    # once A and B are placed, C and D can only be arranged in \n    # one particular way because their order doesn't matter for this problem\n    # we treat C and D as one unit\n    # But since C and D can switch places between each other, \n    # we must consider these 2 permutations as well.\n    ways_for_A_and_B = 2 * 2  # A and B can be at either end\n    ways_for_C_and_D = 2  # C and D can switch places with each other\n\n    total_ways = ways_for_A_and_B * ways_for_C_and_D\n    return total_ways\n\nans = solution()"
    ],
    "e4deea45600b48659f31a194ff56e172": [
        "def solution():\n    ans = 35 * 24\n    return ans\n\nans = solution()"
    ],
    "54fd381d66a4495b81ec629060372915": [
        "from itertools import permutations\n\ndef solution():\n    times = [7, 9, 4, 10]\n    min_time = float('inf')\n\n    # Create all permutations of who could cross together first\n    for perm in permutations(times, 2):\n        first_cross = max(perm)  # The slower person's time is taken for the round trip\n\n        # Remaining people after the first two cross\n        remaining = times.copy()\n        remaining.remove(perm[0])\n        remaining.remove(perm[1])\n        \n        # The fastest person (previously crossed) goes back\n        back_time = min(perm)\n        remaining_time = max(remaining)  # The slower of the two remaining people\n        remaining.remove(min(remaining))  # Remove the faster of the two remaining\n\n        # The fastest person on the other side comes back\n        remaining_time += min(times)\n\n        # Finally, the last two cross together\n        remaining_time += max(back_time, remaining[0])\n        \n        total_time = first_cross + remaining_time\n        min_time = min(min_time, total_time)\n\n    return min_time\n\nans = solution()"
    ],
    "e9e6206bf20f4a548fb5ea4a8b0d40b5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud, bob = symbols('pip bud bob')\n\n    equation1 = Eq((pip + bud) / 2, 30)\n    equation2 = Eq((pip + bob) / 2, 33)\n    equation3 = Eq((bud + bob) / 2, 36)\n\n    solutions = solve((equation1, equation2, equation3), (pip, bud, bob))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "b2a960366a1e4206865a6d0760704900": [
        "def solution():\n    numbers = [0.01, 0.08, 0.13, 0.2, 0.9]\n    target = 0.1\n    closest = min(numbers, key=lambda num: abs(num - target))\n    return closest\n\nans = solution()"
    ],
    "21925b1973084732a0bda763e78de8cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2*x + 3*x + 2, 30 + 6*x - 8*x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7a9b9029d5734b7c90666cccb4699070": [
        "def solution():\n    numbers = [29, 37, 76, 63, 24, 45, 61, 55]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "f3c93367205a456ea52d0000fc85cdec": [
        "def solution():\n    boys = 47\n    minibus_capacity = 6\n    number_of_minibusses = (boys + minibus_capacity - 1) // minibus_capacity\n    return number_of_minibusses\n\nans = solution()"
    ],
    "f16ba08240ad425e89f61fc8df41e78f": [
        "def solution():\n    initial_sequence = [2, 5, 8]  # The initial three terms of the arithmetic sequence\n    common_difference = 3\n\n    # Find the last term as well as the total number of terms in the sequence\n    last_term = 242\n    total_terms = ((last_term - initial_sequence[0]) // common_difference) + 1\n\n    # Calculate the number of iterations needed by dividing the total terms by 3\n    # Because in each iteration, we remove 3 terms\n    iterations = (total_terms - 3) // 3\n\n    # The sum of three numbers in arithmetic sequence: a, a+d, a+2d is 3a + 3d\n    # In our case, a is the first term and d is the common difference\n    sum_of_three_numbers = (sum(initial_sequence) + iterations * sum([0, common_difference, 2 * common_difference]))\n\n    # The second number will be the initial second number plus iterations times the common difference\n    second_number = initial_sequence[1] + iterations * common_difference\n\n    return second_number\n\nans = solution()"
    ],
    "7e73704f04d44c6bb2d64ca0206cc145": [
        "def solution():\n    # Distance covered at reduced speed (2400 metres)\n    reduced_distance = 2400\n    \n    # Maria is 5 minutes late due to reduced speed\n    late_time = 5  # in minutes\n    \n    # Reduced speed is 80% (100% - 20%) of the original speed\n    # Time taken to cover the reduced distance at reduced speed is \n    # the usual time for the same distance plus the 5 minutes late.\n    # Let the usual time to cover 2400 meters be t minutes.\n    # So, 0.8t = t + 5 => t = 5 / 0.2 = 25 minutes\n    \n    # Find original speed (distance per minute)\n    # At original speed, Maria would cover 2400 meters in 25 minutes\n    original_speed = reduced_distance / 25  # in meters per minute\n    \n    # Total time Maria would take at her usual speed without rain is 30 minutes\n    # Therefore, the length of the journey at the usual speed is\n    journey_length = original_speed * 30\n    \n    return journey_length\n\nans = solution()"
    ],
    "4df4bcfe8431481b82ea6620cf995bdb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chair, table = symbols('chair table')\n\n    equation1 = Eq(table, chair + 160)\n    equation2 = Eq(table + 5 * chair, 328)\n\n    solutions = solve((equation1, equation2), (chair, table))\n\n    return solutions[chair]\n\nans = solution()"
    ],
    "23b6320496c74802b1ab8fa3492896ab": [
        "def solution():\n    return 1.25 * 88\n\nans = solution()"
    ],
    "80ae2580a9e14b43aeb41aca80397bf8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    delta, square, circle, diamond = symbols('delta square circle diamond')\n\n    # Given Equations\n    eq1 = Eq(delta + delta, square)\n    eq2 = Eq(square + delta, circle)\n    eq3 = Eq(diamond, circle + square + delta)\n\n    # Solve the Equations\n    solutions = solve((eq1, eq2, eq3), (delta, square, circle, diamond))\n\n    # How many deltas are equal to a diamond?\n    ans = solutions[diamond] / solutions[delta]\n\n    return ans\n\nans = solution()"
    ],
    "0447196e6c6246baa9661487a6cbd4c6": [
        "def solution():\n    ans = 672 // 8\n    return ans\n\nans = solution()"
    ],
    "8ddb5880b1e64f2d96621c773f4f7ace": [
        "def solution():\n    initial_temperature = -3\n    increase_per_hour = 2\n    hours_passed = 5.5\n    \n    final_temperature = initial_temperature + (increase_per_hour * hours_passed)\n    \n    return final_temperature\n\nans = solution()"
    ],
    "caaa1eddd8e44bef93f25acbc57b8371": [
        "def solution():\n    return 12321 // 37\n\nans = solution()"
    ],
    "1cfc58120fbc40b6bf8247588930f7c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the total amount of money Mrs. Chan had initially\n    initial_money = symbols('initial_money')\n\n    # Define the equations based on the problem statement\n    # After spending in shop A: (1/2) * initial_money - 1\n    # After spending in shop B: (1/2) * ((1/2) * initial_money - 1) - 2\n    # After spending in shop C: (1/3) * (((1/2) * ((1/2) * initial_money - 1)) - 2) - 3\n    \n    # Final amount after all spendings is $49\n    final_amount = Eq((1/3) * (((1/2) * ((1/2) * initial_money - 1)) - 2) - 3, 49)\n\n    # Solve for the symbol\n    solution = solve(final_amount, initial_money)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "ea291fdb39c04d6bb392ebad4dae8604": [
        "def solution():\n    # Let A be the number of students in school A originally\n    # Let B be the number of students in school B originally\n    # According to the problem, we have:\n    # A + B = 1050 (Total number of students)\n    # A - 20 (20 students transfer out) = B + 10 (A has 10 more students than B after transfer)\n    # Which gives us two equations:\n    # A + B = 1050\n    # A - B = 30 (after considering the transfer and difference)\n    # Solve the two equations for A\n\n    # Total students\n    total_students = 1050\n    # Difference between the number of students after transfer\n    difference = 30\n\n    # A (original number of students in school A) = (Total students + Difference) / 2\n    A = (total_students + difference) / 2\n\n    # Return the number of students originally in school A\n    return int(A)\n\nans = solution()"
    ],
    "bb1f1a78e8b14c55b2e4ca48c347db8c": [
        "def solution():\n    total_students = 32\n    fraction_of_boys = 3/4\n    number_of_boys = total_students * fraction_of_boys\n    number_of_girls = total_students - number_of_boys\n    \n    return int(number_of_girls)\n\nans = solution()"
    ],
    "6650434a14d84648b471103d681433eb": [
        "def solution():\n    from sympy import divisors\n\n    # Find all divisors of 2240\n    divs = divisors(2240)\n    \n    # Check which divisors are such that 2240 / divisor is a perfect square\n    for d in divs:\n        if (2240//d)**0.5 == int((2240//d)**0.5):\n            n = d\n            break\n\n    return n\n\nans = solution()"
    ],
    "38bf844b32b44c12972bb035ec388106": [
        "def solution():\n    # Darrell could draw all the blue and white pencils before getting a green one.\n    # Since there are 3 blue and 3 white pencils, the worst case is drawing all of them.\n    blue_pencils = 3\n    white_pencils = 3\n    \n    # After drawing all blue and white pencils, the next pencil must be green.\n    # Hence we add 1 to the total count to ensure getting at least one green pencil.\n    total_draws = blue_pencils + white_pencils + 1\n    \n    return total_draws\n\nans = solution()"
    ],
    "28774179acd44fbdaf5d40e780523af5": [
        "def solution():\n    # Let the number of books on the top shelf be x.\n    # Then, the number of books on each subsequent shelf forms a sequence: x, x+3, x+6, ..., x+18.\n    # The sum of an arithmetic sequence is given by (first_term + last_term) * number_of_terms / 2.\n    # Since the number of shelves is 7, we can set up the equation for the sum of the sequence:\n    \n    # (x + (x + 18)) * 7 / 2 = 280 (total number of books)\n    \n    # Simplifying this equation we get:\n    # (2x + 18) * 7 / 2 = 280\n    # (2x + 18) * 7 = 560\n    # 14x + 126 = 560\n    # 14x = 560 - 126\n    # x = (560 - 126) / 14\n\n    x = (560 - 126) / 14\n    return int(x)\n\nans = solution()"
    ],
    "02bc5b84f38e437d928aa61c776bd24c": [
        "from math import lcm\n\ndef solution():\n    return lcm(3, 5, 9, 3*7)\n\nans = solution()"
    ],
    "8b07fa55294340ce938279e09cfc9c8c": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n    \n    # Using the Inclusion-Exclusion Principle\n    both_competitions = math_students + art_students - total_students\n    \n    return both_competitions\n\nans = solution()"
    ],
    "0e28012c7afd408599dee757d5a607e6": [
        "def solution():\n    def digits_sum(n):\n        return sum(int(digit) for digit in str(n))\n    \n    total_sum = sum(digits_sum(page) for page in range(1, 311))\n    \n    return total_sum\n\nans = solution()"
    ],
    "a3f51789234d477fb06391f3a221a5f8": [
        "def solution():\n    result = 22 * 125 * 8\n    return result\n\nans = solution()"
    ],
    "e351511a62494ba0991dc2cdd9255710": [
        "def solution():\n    avril_age_now = 8\n    dad_age_now = 5 * avril_age_now\n\n    avril_age_2_years_ago = avril_age_now - 2\n    dad_age_2_years_ago = dad_age_now - 2\n\n    age_difference_2_years_ago = dad_age_2_years_ago - avril_age_2_years_ago\n\n    return age_difference_2_years_ago\n\nans = solution()"
    ],
    "3610afbddbce47998aebfb515c853f57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    candies, kids = symbols('candies kids')\n    \n    equation1 = Eq(candies - kids * 18, -12)\n    equation2 = Eq(candies - (kids + 2) * 15, 0)\n    \n    solutions = solve((equation1, equation2), (candies, kids))\n    \n    return solutions[candies]\n\nans = solution()"
    ],
    "2a7407914fcd4db5b094cbb7fb4b2b91": [
        "def solution():\n    cost_per_item = 6.30 / 9\n    cost_for_11_items = cost_per_item * 11\n    return cost_for_11_items\n\nans = solution()"
    ],
    "12630e7ba91647e9a662b2150bd08918": [
        "def solution():\n    from sympy import Rational, root, sqrt\n\n    expression = 16.7 - root(((-4.56) ** 2 - (8.1) ** 3) / (7.2 ** 3) / (-sqrt(Rational(27, 4)) - (-30.15)), 3)\n    ans = round(expression.evalf(), 3)\n\n    return ans\n\nans = solution()"
    ],
    "dea0d88a56c14c18bf792f9e1d676070": [
        "def solution():\n    oliver_age_now = 20\n    lin_age_now = 26\n    target_sum_age = 48\n\n    years_later = (target_sum_age - (oliver_age_now + lin_age_now)) / 2\n\n    return int(years_later)\n\nans = solution()"
    ],
    "2ef9562fe8a044c3af3451bfe10a4c3b": [
        "def solution():\n    mean_of_five = 87\n    total_students = 6\n    new_mean = 88\n\n    total_score_of_five = mean_of_five * (total_students - 1)\n    total_score_of_six = new_mean * total_students\n    jim_score = total_score_of_six - total_score_of_five\n\n    return jim_score\n\nans = solution()"
    ],
    "e61ecccd8d4e46a5bae3436df379fd8e": [
        "def solution():\n    # The ratio of speeds of Jayden to Carter is 7:4, which means:\n    # If Jayden covers 7 units of distance, Carter covers 4 units in the same time.\n    # When they meet for the first time, the combined distance they cover is the total distance (440m).\n    # Their speeds ratio will also apply to the distance covered.\n\n    jayden_speed_ratio = 7\n    carter_speed_ratio = 4\n    total_ratio = jayden_speed_ratio + carter_speed_ratio\n    total_distance = 440\n\n    # Calculate distance covered by Jayden and Carter the first time they meet.\n    distance_covered_by_jayden = (jayden_speed_ratio / total_ratio) * total_distance\n\n    # When Jayden turns around and meets Carter again, the situation is symmetric.\n    # Jayden will again cover the same distance as before from A to the meeting point.\n    distance_from_place_a = distance_covered_by_jayden\n\n    return distance_from_place_a\n\nans = solution()"
    ],
    "7f06cc0235094faaa81a0a2fb9cab606": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for Pip and Bud's candies\n    pip, bud = symbols('pip bud')\n\n    # Create two equations based on the problem statement\n    # Pip has 2 more candies than Bud -> pip = bud + 2\n    # They have 10 candies in total -> pip + bud = 10\n    equation1 = Eq(pip, bud + 2)\n    equation2 = Eq(pip + bud, 10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (pip, bud))\n\n    # Return the number of candies Pip has\n    return solutions[pip]\n\nans = solution()"
    ],
    "914f071ea10440cebf9dbe8becbdbc9d": [
        "def solution():\n    numbers = [58, 63, 59, 62, 63, 56, 61]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "4a241f99a7b844b08c465d23e0993893": [
        "def solution():\n    one_fifth_length = 6  # one-fifth of the wood length in cm\n    total_length = one_fifth_length * 5  # total length of the wood\n    one_third_length = total_length / 3  # one-third of the wood length\n\n    return one_third_length\n\nans = solution()"
    ],
    "f3a192a1a028460aa34b249e7e3af6b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for their ages 7 years ago\n    mr_lim_age_7_years_ago, mrs_lim_age_7_years_ago = symbols('mr_lim_age_7_years_ago mrs_lim_age_7_years_ago')\n\n    # Create equation for the ratio 7 years ago\n    equation1 = Eq(mr_lim_age_7_years_ago / mrs_lim_age_7_years_ago, 6/5)\n\n    # Their current ages are their ages 7 years ago + 7\n    mr_lim_current_age = mr_lim_age_7_years_ago + 7\n    mrs_lim_current_age = mrs_lim_age_7_years_ago + 7\n\n    # Create equation for the sum of their current ages\n    equation2 = Eq(mr_lim_current_age + mrs_lim_current_age, 69)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (mr_lim_age_7_years_ago, mrs_lim_age_7_years_ago))\n\n    # Get Mr. Lim's current age\n    mr_lim_current_age_value = solutions[mr_lim_age_7_years_ago] + 7\n\n    return mr_lim_current_age_value\n\nans = solution()"
    ],
    "b4b4e5c5437f4235a2a175fc8db815dd": [
        "def solution():\n    original_price = 4200\n    discount1 = 0.10\n    discount2 = 0.20\n\n    price_after_first_discount = original_price * (1 - discount1)\n    final_price = price_after_first_discount * (1 - discount2)\n\n    return final_price\n\nans = solution()"
    ],
    "457a726196e141089b3e12d90241956e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the amount of money initially had by Raja and Kumar be 'm'\n    m = symbols('m')\n\n    # Raja's remaining money after spending $286\n    raja_remain = m - 286\n\n    # Kumar's remaining money after spending $109\n    kumar_remain = m - 109\n\n    # Setting up the equation according to the problem: Kumar had 4 times as much money as Raja\n    equation = Eq(kumar_remain, 4 * raja_remain)\n\n    # Solving for 'm'\n    solution = solve(equation, m)\n\n    # Returning the money initially had by each of them\n    return solution[0]\n\nans = solution()"
    ],
    "34ba1fe6c4914c9988860c36d1caf4a3": [
        "def solution():\n    boys = 47\n    per_minibus = 6\n    minibusses_needed = (boys + per_minibus - 1) // per_minibus\n    return minibusses_needed\n\nans = solution()"
    ],
    "5b0b415f20824bf48a8768e9f5d5ec26": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for each shape\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n\n    # Given equations\n    eq1 = Eq(triangle + triangle, square)\n    eq2 = Eq(square + triangle, circle)\n    eq3 = Eq(diamond, circle + square + triangle)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (triangle, square, circle, diamond))\n\n    # Calculate how many triangles are equal to a diamond\n    return solutions[diamond] / solutions[triangle]\n\nans = solution()"
    ],
    "f42746b63c97449b9bd8019271c9ec21": [
        "def solution():\n    purchase_price = 135\n    selling_price = 185\n    remaining_bats = 3\n    total_profit = 2945\n    \n    bats_sold = symbols('bats_sold')\n    \n    # total cost for bats\n    total_cost = purchase_price * (bats_sold + remaining_bats)\n    # total revenue\n    total_revenue = selling_price * bats_sold\n    \n    # Setting up the equation:\n    # total_revenue = total_cost + total_profit\n    equation = Eq(total_revenue, total_cost + total_profit)\n    \n    # Solve for the number of bats sold\n    bats_sold_solution = solve(equation, bats_sold)\n    \n    # The total number of bats originally purchased is bats sold + 3\n    total_bats_purchased = bats_sold_solution[0] + remaining_bats\n    \n    return total_bats_purchased\n\nans = solution()"
    ],
    "9da061efc392431dbe6794c1c302e8e3": [
        "def solution():\n    return 879 + 268\n\nans = solution()"
    ],
    "b36b7952db0b4b93a6507a61d91c0d4d": [
        "def solution():\n    total_passengers = 863\n    men = 354\n    children = 165\n    women = total_passengers - men - children\n    return women\n\nans = solution()"
    ],
    "3518cc99e1f044c886a532f40ac85ca4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chair = symbols('chair')\n    table = symbols('table')\n\n    # table cost $160 more than a chair\n    eq1 = Eq(table, chair + 160)\n    # Mrs Lim bought a table and 5 chairs for $328\n    eq2 = Eq(table + 5 * chair, 328)\n\n    # Solve the system of equations\n    solved_values = solve((eq1, eq2), (table, chair))\n\n    return solved_values[chair]\n\nans = solution()"
    ],
    "0851ade8e456416a88c4d9132c4034de": [
        "def solution():\n    pip_money_p = 60\n    bud_money_p = 110  # Convert £1.10 to pence for easy addition\n\n    total_money_p = pip_money_p + bud_money_p\n\n    return total_money_p\n\nans = solution()"
    ],
    "6cd294ca2ca74856bd3764d49417e29b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Rachel and Alice's candy\n    rachel, alice = symbols('rachel alice')\n\n    # Create equation based on the problem statement\n    # Rachel gives Alice 10 candies\n    equation1 = Eq(rachel - 10, alice + 10)\n\n    # Alice gives Rachel 10 candies and then Rachel has 4 more than 3 times Alice's candies\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    # Calculate the total number of candies originally\n    total_candies = solutions[rachel] + solutions[alice]\n\n    return total_candies\n\nans = solution()"
    ],
    "779ed1e319ae4389b632ed4de525a437": [
        "def solution():\n    for I in range(1, 10):\n        for S in range(10):\n            if I != S:\n                PI = I * 1111 + S * 111\n                if PI // 100 == I and PI % 10 == S:\n                    return PI\n\nans = solution()"
    ],
    "1f8c8ba64a594dd29927d99fdf51836d": [
        "def solution():\n    first_distance = 280\n    second_distance = 400\n    third_distance = 800 - first_distance - second_distance\n\n    first_speed = 7\n    second_speed = 5\n    third_speed = 8\n\n    first_time = first_distance / first_speed\n    second_time = second_distance / second_speed\n    third_time = third_distance / third_speed\n\n    total_time = first_time + second_time + third_time\n\n    return total_time\n\nans = solution()"
    ],
    "bc4b9a02e5f940dead7da75f6c772177": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the time it takes for the cold tap to fill the bath alone\n    t = symbols('t')\n    \n    # The hot tap fills the bath in 1/t while the cold tap fills it at 2/t\n    # When both are used together, they fill 1 bath in 10 minutes, or 1/10 of a bath per minute\n    equation = Eq(1/t + 2/t, 1/10)\n    \n    # Solve the equation for t\n    t_value = solve(equation, t)\n\n    # Since there are two solutions (one positive and one negative), we take the positive one\n    t_cold_tap_alone = [i for i in t_value if i > 0]\n    \n    # We need to convert the time to minutes since the symbolic solution will be in terms of fractions of an hour\n    minutes_to_fill_with_cold_tap = t_cold_tap_alone[0] * 60\n    \n    # Return the time in minutes\n    return minutes_to_fill_with_cold_tap\n\nans = solution()"
    ],
    "de8e499d6ea74617b2a986394b5a5443": [
        "def solution():\n    lori_speed = 2\n    ratio_jocye_to_lori = 3 / 2\n    jocye_speed = lori_speed * ratio_jocye_to_lori\n    \n    time = 10\n    distance_jocye_runs = jocye_speed * time\n    \n    return distance_jocye_runs\n\nans = solution()"
    ],
    "0f0e737c506a401d8cff81ef9c2365a6": [
        "def solution():\n    original_price = 1000\n    depreciation_rate = 0.12\n    years = 8\n\n    final_value = original_price * ((1 - depreciation_rate) ** years)\n    return round(final_value, 1)\n\nans = solution()"
    ],
    "e7ebfcda9f0740958ddcaf89fb51bd23": [
        "def solution():\n    return 727 + 482\n\nans = solution()"
    ],
    "399c54f13ae4483e856b4165e9f0062f": [
        "def solution():\n    probability_over_20 = 0.6\n    probability_over_25_given_over_20 = 0.3\n    \n    probability_over_25 = (probability_over_25_given_over_20 / probability_over_20)\n\n    return probability_over_25\n\nans = solution()"
    ],
    "c2a559c3b6124e8a9ad447bce30b9d43": [
        "def solution():\n    from math import comb\n    num_teams = 5\n    ans = comb(num_teams, 2)\n    return ans\n\nans = solution()"
    ],
    "2266bba4c5654df6ac5b7df6d9d4e424": [
        "def solution():\n    rope_skipping = 40\n    long_jump = 31\n    both_events = 21\n    \n    only_one_event = (rope_skipping - both_events) + (long_jump - both_events)\n    \n    return only_one_event\n\nans = solution()"
    ],
    "270f382989f44eca81a1f3f8761a46cb": [
        "def solution():\n    # Distance Don walks is 360 metres\n    don_distance = 360\n    # Total distance to the library is 780 metres\n    total_distance = 780\n    # Distance Danny walks is total distance minus the distance Don walked\n    danny_distance = total_distance - don_distance\n    # Don's speed is 60 metres per minute\n    don_speed = 60\n    # Time taken for Don to meet Danny is therefore\n    time = don_distance / don_speed\n    # Danny's speed is therefore the distance Danny walked divided by the time\n    danny_speed = danny_distance / time\n    return danny_speed\n\nans = solution()"
    ],
    "1ea732c5a49c4c82bed4097a4a8a3cc3": [
        "def solution():\n    total_weight_grams = (1 * 1000 + 500) + (1 * 1000 + 200) + 900\n    weight_per_tin = total_weight_grams / 8\n    return weight_per_tin\n\nans = solution()"
    ],
    "1302114e84374d8f8d8fde77c6f270af": [
        "def solution():\n    # Digits used by 1-digit page numbers: 1-9 (9 pages): 9 * 1 = 9 digits\n    # Digits used by 2-digit page numbers: 10-99 (90 pages): 90 * 2 = 180 digits\n    # Digits used by 3-digit page numbers: 100-999 (900 pages)\n    # Total digits for 1 and 2 digit page numbers\n    digits_used = 9 + (90 * 2)\n    remaining_digits = 792 - digits_used\n    \n    # Find how many 3-digit numbers can we have with the remaining number of digits\n    pages_with_3_digits = remaining_digits // 3\n\n    # Total number of pages is the sum of pages with 1, 2 and computed 3 digits\n    total_pages = 9 + 90 + pages_with_3_digits\n\n    return total_pages\n\nans = solution()"
    ],
    "9af3526725c54d168b001b25839f37fd": [
        "def solution():\n    ans = sum(sum(j/i for i in range(j, 11)) for j in range(1, 11))\n    return ans\n\nans = solution()"
    ],
    "bed68fc453f94368b47e0f9de6b2c0bd": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq(51 - (15 - 2*x), 11*x)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "e7c5db2d941e4d1f9962ca19c545eb0e": [
        "def solution():\n    # The value of the blank can be calculated by cross multiplication.\n    blank = (20 * 27) / 30\n    return blank\n\nans = solution()"
    ],
    "cb99f14cb28547ce8a12013d9b435b2b": [
        "def solution():\n    number_to_round = 278\n    rounded_number = round(number_to_round / 10) * 10\n    return rounded_number\n\nans = solution()"
    ],
    "42bf42bdc05245e899b8ef7be48f6759": [
        "def solution():\n    # We consider two cases: A or B standing on the far right, and A or B standing on the far left.\n\n    # Case 1: A or B on the far right. There are 2 options for who stands on the far right (A or B).\n    # After choosing the far right, the next to the right can be C or D (2 options).\n    # The remaining two positions (far left and the one next to it) can be filled in 2! ways (since A and B are interchangeable).\n    # Therefore, in this case, there are 2 * 2 * 2 = 8 ways to line up.\n\n    # Case 2: A or B on the far left. This is symmetrical to Case 1, so it also allows for 8 ways to line up.\n\n    # As Cases 1 and 2 are mutually exclusive and cover all possibilities, we sum their counts to obtain the total.\n    # Hence, the total number of ways they can line up is 8 + 8 = 16.\n\n    return 16\n\nans = solution()"
    ],
    "57bb5b4044d043d7ab2ed365ec7917fa": [
        "def solution():\n    digits = [1, 2, 3]\n    two_digit_numbers = set()\n\n    for d1 in digits:\n        for d2 in digits:\n            if d1 != d2:\n                two_digit_number = int(f\"{d1}{d2}\")\n                two_digit_numbers.add(two_digit_number)\n\n    ans = len(two_digit_numbers)\n    return ans\n\nans = solution()"
    ],
    "c781c988a20442c8b61fad38f74231ea": [
        "def solution():\n    digits = [4, 5, 7, 9]\n    even_digits = [digit for digit in digits if digit % 2 == 0]\n    smallest_even_digit = min(even_digits)\n    remaining_digits = [digit for digit in digits if digit != smallest_even_digit]\n    remaining_digits.sort()\n    return int(str(smallest_even_digit) + ''.join(map(str, remaining_digits)))\n\nans = solution()"
    ],
    "1a41fe933c714f5dbf0d2b6b1a44c69f": [
        "def solution():\n    for num in range(99, 9, -1):  # Start from 99 down to 10 since we want the largest two-digit number\n        if num % 7 == 5 and num % 13 == 11:\n            return num\n\nans = solution()"
    ],
    "514cdf8bac23435c8c06bbdf81e64567": [
        "def solution():\n    workers = 3\n    days_for_3_workers = 3\n    total_work = workers * days_for_3_workers\n    days_for_1_worker = total_work / 1  # now we have 1 worker\n    \n    return days_for_1_worker\n\nans = solution()"
    ],
    "c98d52b67705466d8ba4e69027df1a56": [
        "def solution():\n    expressions = [\n        \"(285+15)/5-2\",\n        \"285+(15/5)-2\",\n        \"(285+15)/(5-2)\",\n        \"285/15+5-2\",\n        \"(285/15+5)-2\",\n        \"285/(15+5)-2\",\n        \"285+(15/(5-2))\",\n        \"(285+15/5)-2\",\n        \"285+(15/5-2)\",\n        \"(285+15)/5-2\"\n    ]\n\n    # Using eval to calculate the value of expressions\n    results = set()\n    for expr in expressions:\n        results.add(eval(expr))\n\n    return len(results)\n\nans = solution()"
    ],
    "bc2eaa05c2644d01acc25bd3b154dd7d": [
        "def solution():\n    total_pupils = 39\n    rows = 3\n    pupils_per_row = total_pupils // rows\n    return pupils_per_row\n\nans = solution()"
    ],
    "f3cda231135d443db7dbdf86f98d01dd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    a, b = symbols('a b')\n    equation1 = Eq(a + 12, 16)\n    equation2 = Eq(2 * a + b, 18)\n    \n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "307ab345fabd4b8aaff4b7d5917794fd": [
        "def solution():\n    # John's statement is: B = 6 * A + 25\n    # According to John's linear equation: 60x + 6y + 25 = 200 + 10x + y\n    # We rearrange this equation to make x the subject\n    # Solve for x: 50x + 5y = 175\n    # Simplify the equation: 10x + y = 35\n    # If we compare it with John's result, which is 10x + y = 45,\n    # we see that John made a mistake.\n    # Now we solve the correct linear equation 10x + y = 35\n    for x in range(1, 10):  # x cannot be 0 because it's the tens digit\n        for y in range(0, 10):  # y can be 0\n            A = 10 * x + y\n            B = 20 * x + 2 * y\n            if B == 6 * A + 25:\n                return A\n    return None\n\nans = solution()"
    ],
    "41c7afc767ed40daaa39d2def9f0bda4": [
        "def solution():\n    unlock_count = 0\n    for i in range(1, 101):\n        if i % 3 == 0:\n            if i % 5 == 0:\n                continue\n            else:\n                unlock_count += 1\n        elif i % 5 == 0:\n            unlock_count += 1\n    return unlock_count\n\nans = solution()"
    ],
    "b6d01c501c18487f9e4f3f79d7526cce": [
        "def solution():\n    nicolas_current = 4\n    yiding_current = 3\n    nicolas_target = 16\n\n    # Find the ratio of the speeds\n    speed_ratio = yiding_current / nicolas_current\n\n    # Use the speed ratio to find where Yiding will be when Nicolas is at level 16\n    yiding_target = nicolas_target * speed_ratio\n\n    return int(yiding_target)\n\nans = solution()"
    ],
    "4a96b08695f1451ab05c1c722f12a959": [
        "def solution():\n    ans = (1000 + 2000 + 2100) / 17\n    return ans\n\nans = solution()"
    ],
    "c9848b7f2bdb4b02b6a8315b987132c2": [
        "def solution():\n    boys_sum = 4 * 50\n    girls_sum = 6 * 40\n    total_sum = boys_sum + girls_sum\n    total_children = 4 + 6\n    average_mass = total_sum / total_children\n    return average_mass\n\nans = solution()"
    ],
    "cc9a4ae09bbb496aaa4271ae07c4779f": [
        "def solution():\n    divisor = 12\n    quotient = 11\n    remainder = 5\n\n    number = divisor * quotient + remainder\n\n    return number\n\nans = solution()"
    ],
    "418d9f95c94b4bab93c8e3700c845d5e": [
        "def solution():\n    ans = (1 / (2 - 3)) - (4 / (5 - 6)) - (7 / (8 - 9))\n    return ans\n\nans = solution()"
    ],
    "abaab11ba949453489f49e64542f6792": [
        "def solution():\n    num1 = 4.6\n    num2 = 13.8\n    \n    middle_value = (num1 + num2) / 2\n    \n    return middle_value\n\nans = solution()"
    ],
    "c27708a444de416daece772484d27182": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    \n    # All permutations of students, F and G must be together so we treat them as a single entity FG\n    students = ['A', 'B', 'C', 'D', 'E', 'FG']\n    \n    # Generate all permutations\n    for perm in permutations(students):\n        # Convert the permutation to a string representation\n        perm_str = ''.join(perm)\n\n        # Check for condition where A is in the middle of B and C\n        if perm_str.index('A') > perm_str.index('B') and perm_str.index('A') < perm_str.index('C') or \\\n           perm_str.index('A') > perm_str.index('C') and perm_str.index('A') < perm_str.index('B'):\n            \n            # Check condition where D and E are not next to each other\n            if 'DE' not in perm_str and 'ED' not in perm_str:\n                # Each valid permutation for FG represents 2 actual permutations (FG and GF)\n                count += 2\n    \n    return count\n\nans = solution()"
    ],
    "f1c6632cac7d493a881d8e10eab95ae1": [
        "def solution():\n    scores = [37, 53, 29, 41]\n    total_matches = 5\n    mean_score = 40\n\n    total_score = mean_score * total_matches\n    x = total_score - sum(scores)\n    \n    return x\n\nans = solution()"
    ],
    "52dedf9ce05e4ea3a7d65ae01e1338d3": [
        "def solution():\n    count = 0\n    for i in range(1, 10):\n        for j in range(10):\n            palindrome = int(f\"{i}{j}{j}{i}\")\n            if 1000 <= palindrome <= 9999:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "938ae204da174d739962f4162d4b20e8": [
        "def solution():\n    return 4336 // 8\n\nans = solution()"
    ],
    "e00d2baa889045a6810756a5f6ded27b": [
        "from math import factorial\n\ndef solution():\n    total_letters = len(\"CHEESE\")\n    letter_counts = {\"C\": 1, \"H\": 1, \"E\": 3, \"S\": 1}\n  \n    # Calculate the denominator part for the repetitions: factorial for each letter count\n    denominator = 1\n    for count in letter_counts.values():\n        denominator *= factorial(count)\n\n    # Use the formula for arrangements with repeated items: total_factorial / repeated_item_factorial\n    arrangements = factorial(total_letters) // denominator\n\n    return arrangements\n\nans = solution()"
    ],
    "06ccb550f9c94b6e88edf78ee248277b": [
        "def solution():\n    for adults in range(20):  # 20 is the maximum number of adult tickets given 19 tickets in total were sold\n        children = 19 - adults\n        if (5 * adults) + (3 * children) == 75:\n            return adults\n\nans = solution()"
    ],
    "7c5a2dda1a89437a812dee6e6d3c8006": [
        "def solution():\n    for i in range(10000, 100000):\n        original_number = i * 10 + 9\n        new_number = int('9' + str(i))\n        if new_number == 4 * original_number:\n            return original_number\n\nans = solution()"
    ],
    "8f0a469087a3468e9dd6d097faa4382a": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    min_divisor = 1\n    min_dividend = (quotient * min_divisor) + remainder\n    return min_dividend\n\nans = solution()"
    ],
    "9e16012db73740a0b2623e56b90ddb02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    abigail_age, jonathan_age = symbols('abigail_age jonathan_age')\n\n    # Abigail is 6 years older than Jonathan\n    equation1 = Eq(abigail_age, jonathan_age + 6)\n\n    # Six years ago, she was twice as old as he was\n    equation2 = Eq(abigail_age - 6, 2 * (jonathan_age - 6))\n\n    # Solve both equations\n    solutions = solve((equation1, equation2), (abigail_age, jonathan_age))\n\n    return solutions[jonathan_age]\n\nans = solution()"
    ],
    "85287eb8abe94dc69ff3f32348aa3828": [
        "def solution():\n    work_per_day_alice = 1 / 40\n    work_per_day_bob = 1 / 60\n    total_days = 27\n\n    # Assuming Alice takes 'x' days off\n    # Thus, Alice works for (total_days - x) days\n    # Both Alice and Bob work together for (total_days - x) days\n\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n\n    # Equation represents the total work done\n    # (total_days - x) * work_per_day_alice: work done by Alice\n    # total_days * work_per_day_bob: work done by Bob\n    equation = Eq((total_days - x) * work_per_day_alice + total_days * work_per_day_bob, 1)\n\n    days_off_alice = solve(equation, x)\n\n    return days_off_alice[0]\n\nans = solution()"
    ],
    "1079de7a7656466a8e5c71823b1f57b3": [
        "def solution():\n    a, b, c, d = 4, 3, 3, 4\n    return (a * b + a - b) - (c * d + c - d)\n\nans = solution()"
    ],
    "f67eff9f23014ecb8eded92248463a7b": [
        "def solution():\n    total_questions = 10\n    points_correct = 6\n    points_incorrect = -2\n    total_points = 44\n\n    for correct in range(total_questions + 1):\n        incorrect = total_questions - correct\n        if (correct * points_correct + incorrect * points_incorrect) == total_points:\n            return correct\n\nans = solution()"
    ],
    "707f06cacc044e1d85aef697dea2c32f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    total_animals, cows, goats = symbols('total_animals cows goats')\n\n    # Create equations based on the problem statement\n    # 65% of the animals in the farm were cows\n    equation1 = Eq(cows, 0.65 * total_animals)\n\n    # The rest were goats\n    equation2 = Eq(goats, total_animals - cows)\n\n    # 240 more cows and goats were added, cows percentage increased by 20%\n    equation3 = Eq(cows + 240, 0.85 * (total_animals + 240))\n\n    # Number of goats doubled\n    equation4 = Eq(goats * 2, total_animals + 240 - (cows + 240))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (total_animals, cows, goats))\n\n    return int(solutions[goats])\n\nans = solution()"
    ],
    "219697dc832b445ca3d9d8288e536ba3": [
        "def solution():\n    total_candies = 10\n    pip_extra = 2\n    bud_candies = (total_candies - pip_extra) // 2\n    pip_candies = bud_candies + pip_extra\n    return pip_candies\n\nans = solution()"
    ],
    "11e8ba58465f4c138c8725a020c95ec7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    cost_of_5_bananas = 5 * solutions[banana]\n\n    return cost_of_5_bananas\n\nans = solution()"
    ],
    "66dcd5cada06407ba1e9153afc26043f": [
        "def solution():\n    initial_amount = 200\n    final_amount = 250\n    increase = final_amount - initial_amount\n    percentage_increase = (increase / initial_amount) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "1848190c71c645c0997874fe8ca76815": [
        "def solution():\n    return 52 / (2/3)\n\nans = solution()"
    ],
    "5262af77457a47089064b6dc77839b82": [
        "def solution():\n    sequence = \"20200202202002\"\n    seq_length = len(sequence)\n    digit_count = 535\n\n    full_repetitions = digit_count // seq_length\n    remainder = digit_count % seq_length\n\n    count_2_full = sequence.count('2') * full_repetitions\n    count_2_remainder = sequence[:remainder].count('2')\n\n    return count_2_full + count_2_remainder\n\nans = solution()"
    ],
    "a4663920546242aeb50c5eaeaf379262": [
        "def solution():\n    product_mod = (36 * 37 * 38 * 39 * 40 * 41) % 7\n    return product_mod\n\nans = solution()"
    ],
    "b9373bcf833d4821b3f8fcb64de110d4": [
        "def solution():\n    side_length = 12  # length of the side of the square lawn\n    distance_from_edge = 1.5  # distance of each bush from the edge of the garden\n    distance_between_bushes = 3  # distance between neighbouring rosebushes\n\n    # Calculate effective length that can be used to plant bushes on each side\n    # Subtract the distance from edges on both sides\n    effective_length_per_side = side_length - 2 * distance_from_edge\n\n    # Calculate how many bushes can be planted on each side of the square lawn\n    # We start with one bush, then add as many bushes as can fit at 3 meter intervals\n    bushes_per_side = 1 + int((effective_length_per_side - distance_between_bushes) / distance_between_bushes)\n\n    # There are 4 sides in total, but each corner bush is shared between two sides,\n    # so we need to subtract the 4 corner bushes to avoid double counting\n    total_bushes = 4 * bushes_per_side - 4\n\n    return total_bushes\n\nans = solution()"
    ],
    "caad5339582b4857888fcff1cca8c78e": [
        "def solution():\n    return 126 / 2\n\nans = solution()"
    ],
    "ccbbcf445df24e4ba0699d6f1e37b90a": [
        "def solution():\n    ans = (1000 + 2000 + 2100) / 17\n    return ans\n\nans = solution()"
    ],
    "070c04e9775b4292869eedb678f57b8f": [
        "def solution():\n    apples_per_box = 5\n    number_of_boxes = 6\n    total_apples = apples_per_box * number_of_boxes\n    return total_apples\n\nans = solution()"
    ],
    "ff8eaf85f9494a4bb58b4c2de7f7a467": [
        "def solution():\n    cookies_baked_morning = 85\n    cookies_baked_afternoon = 135\n    cookies_given_away = 55\n    \n    cookies_left = (cookies_baked_morning + cookies_baked_afternoon) - cookies_given_away\n    \n    return cookies_left\n\nans = solution()"
    ],
    "bf206205208a4e6aaa3f21b6175f11a0": [
        "def solution():\n    ans = 3102 // 6\n    return ans\n\nans = solution()"
    ],
    "539ace63a9a84f38adf540a759c0f768": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let f be the number of fifty-cent coins and d be the number of one-dollar coins initially.\n    f, d = symbols('f d')\n\n    # Given that 2/7 of his coins were fifty-cent coins, so the remaining (5/7) were one-dollar coins.\n    equation1 = Eq(f, 2/7 * (f + d))\n\n    # His mother gave him 10 one-dollar coins and 5-dollars worth of fifty-cent coins (i.e., 10 fifty-cent coins).\n    # After receiving the coins from his mother, he had twice as many one-dollar coins as fifty-cent coins.\n    equation2 = Eq(d + 10, 2 * (f + 10))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (f, d))\n\n    # The total number of coins Owen had at first is the sum of fifty-cent and one-dollar coins initially.\n    total_coins_at_first = solutions[f] + solutions[d]\n\n    return total_coins_at_first\n\nans = solution()"
    ],
    "b152c6eb52ea4a47bee276fd7fdc5526": [
        "def solution():\n    # Analyzing the given pattern:\n    # Let's denote the Delta operation as D(a, b)\n    # We notice that 4 D 1 = 17 can be written as 4 * b + a = 17 and solve for b we get b = 4\n    # Similarly, 5 D 4 = 29 can be written as 5 * b + a = 29 and solve for b we get b = 5\n    # And, 8 D 16 = 80 can be written as 8 * b + a = 80 and solve for b we get b = 10\n    # We notice that b is the square of the second argument\n    # Thus, the operation seems to be a * b^2, where b is the second argument\n\n    # Applying the same pattern to 10 D 9:\n    a = 10\n    b = 9\n    result = a * b**2  # 10 * 9^2\n\n    return result\n\nans = solution()"
    ],
    "11fb94abf2634f198729473920061c7d": [
        "def solution():\n    total_passengers = 863\n    men = 354\n    children = 165\n    women = total_passengers - (men + children)\n    return women\n\nans = solution()"
    ],
    "c3879ebf82934b73a62fb270f35eee17": [
        "def solution():\n    first_term = 30\n    last_term = 30 + 4 * (10 - 1)\n    num_terms = 10\n    total_seats = (first_term + last_term) * num_terms / 2\n    return int(total_seats)\n\nans = solution()"
    ],
    "56a6e5f6729f412081b2719e7253346e": [
        "def solution():\n    andy_daily_saving = 7\n    brenda_daily_saving = 6\n    andy_total_saving = 378\n\n    brenda_total_saving = (andy_total_saving / andy_daily_saving) * brenda_daily_saving\n\n    return brenda_total_saving\n\nans = solution()"
    ],
    "d4ec077973ca41e3a9584a6faecfcac3": [
        "def solution():\n    total_questions = 10\n    correct_points = 6\n    incorrect_penalty = 2\n    total_points = 44\n    \n    # Assume x is the number of correct answers, so (total_questions - x) is the number of wrong answers.\n    # We set up the equation: correct_points * x - incorrect_penalty * (total_questions - x) = total_points\n    # Simplify the equation: (correct_points + incorrect_penalty) * x = total_points + incorrect_penalty * total_questions\n\n    x = (total_points + incorrect_penalty * total_questions) / (correct_points + incorrect_penalty)\n    \n    return int(x)\n\nans = solution()"
    ],
    "277ff5ac1d264964a4d29eb33ba74058": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    belt, dress, shirt = symbols('belt dress shirt')\n    equation1 = Eq(dress, 3 * belt)\n    equation2 = Eq(shirt, 2 * dress)\n    equation3 = Eq(shirt - belt, 155)\n\n    solutions = solve((equation1, equation2, equation3), (belt, dress, shirt))\n\n    return solutions[dress] - solutions[shirt]\n\nans = solution()"
    ],
    "d9a025512c6941b6b97c54521e40115c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of marbles each person has after the transactions\n    anna, betsy, charlene = symbols('anna betsy charlene')\n\n    # Equations based on the problem description\n    # After transactions: Charlene gave 15 marbles to Betsy.\n    charlene_gives_betsy = charlene - 15\n    # After transactions: Betsy gave 8 marbles to Anna.\n    betsy_gives_anna = betsy + 8\n    # Total marbles after transactions\n    total_marbles = anna + betsy_gives_anna + charlene_gives_betsy\n\n    # Final ratios of marbles: 2:5:7\n    ratio_equation = Eq(anna / betsy_gives_anna, 2/5) & Eq(betsy_gives_anna / charlene_gives_betsy, 5/7)\n\n    # The total number of marbles is 168\n    total_equation = Eq(total_marbles, 168)\n    \n    # Solve the system of equations\n    solutions = solve((ratio_equation, total_equation), (anna, betsy, charlene))\n\n    # Calculate the original number of marbles Betsy had\n    betsy_initial = solutions[betsy] - 8\n\n    return betsy_initial\n\nans = solution()"
    ],
    "4bdb0a33fd034a4a9f038d5763df3bfc": [
        "def solution():\n    return 52 / (2/3)\n\nans = solution()"
    ],
    "db664e372bde470cad3851d48f1d711a": [
        "def solution():\n    return 52836 // 7\n\nans = solution()"
    ],
    "218af0df4ee747b79d4247767d1fee5a": [
        "def solution():\n    from math import factorial\n\n    ways = factorial(8) // factorial(8 - 3)\n\n    return ways\n\nans = solution()"
    ],
    "9060af40a1724e5887ca3ecd529e790f": [
        "def solution():\n    # Original dimensions: length = l, breadth = b, height = h\n    # New dimensions: new_length = l * 1.10, new_breadth = b * (4/5), new_height = h * (11/10)\n    original_volume = 1  # Let's consider the original volume as 1 for simplicity (l * b * h)\n    new_volume = 1.10 * (4/5) * (11/10)  # New volume\n\n    percentage_new_volume = (new_volume / original_volume) * 100\n\n    return percentage_new_volume\n\nans = solution()"
    ],
    "0fc0dda3957d4f01b0dccedf0adc5e89": [
        "from math import comb\n\ndef solution():\n    points = 10\n    triangles = comb(points, 3)\n    return triangles\n\nans = solution()"
    ],
    "c58c5d01acfc430494432756a46333bc": [
        "def solution():\n    return (30 + 40 + 50) * 3\n\nans = solution()"
    ],
    "74c9ac42df4148feacf2613537771942": [
        "def solution():\n    remaining_work_percentage = 100 - 60\n    total_masks = 360 * 100 / remaining_work_percentage\n    return int(total_masks)\n\nans = solution()"
    ],
    "975e68a88e6347caa844fbf5ca68107e": [
        "def solution():\n    # If everyone must solve at least one question and no two students can solve the same number of questions\n    # we can start by giving 1 question to the first student, 2 to the second, and so on.\n    # This way, we can determine the minimum number of questions the remaining students must solve,\n    # which leaves the maximum possible for Noa.\n\n    # Assign the minimum to the first four students: 1, 2, 3, 4\n    min_assigned = sum(range(1, 5))\n    \n    # Then Noa can solve the rest.\n    max_for_noa = 40 - min_assigned\n    \n    return max_for_noa\n\nans = solution()"
    ],
    "c1041fa9a5bf437993ae13aa3e37085f": [
        "def solution():\n    total_children = 38\n    total_balloons = 126\n\n    for boys in range(total_children+1):\n        girls = total_children - boys\n        if 2 * boys + 4 * girls == total_balloons:\n            return boys\n\nans = solution()"
    ],
    "411faed309f74656b50d4010f9f71511": [
        "def solution():\n    number_to_round = 278\n    rounded_number = round(number_to_round / 10) * 10\n    return rounded_number\n\nans = solution()"
    ],
    "cf37fa4d8197426aa1fcab8a861e06d2": [
        "def solution():\n    # Let x be the number of mushrooms gathered in the first hour\n    # Let y be the number of mushrooms gathered in the second hour\n    # According to the problem, we have:\n    # x + y = 40 (the total number of mushrooms gathered in two hours)\n    # x + 26 = y (if 26 more mushrooms were gathered in the first hour, it would equal the second hour)\n\n    # Now we can express y in terms of x from the second equation\n    # y = x + 26\n    # Substitute y from the second equation into the first equation\n    # x + (x + 26) = 40\n\n    # Solve for x\n    x = (40 - 26) / 2\n\n    # Now calculate y using the value of x\n    y = x + 26\n\n    return y\n\nans = solution()"
    ],
    "6adbd55fec9e4553850968c3abf80ddd": [
        "def solution():\n    return 52.8 * 7\n\nans = solution()"
    ],
    "a20ccf64b8a1484aa5b1280c574930fa": [
        "def solution():\n    coldest = -89\n    hottest = 58\n    difference = hottest - coldest\n    return difference\n\nans = solution()"
    ],
    "16943328c1ba4a80883339e370325f73": [
        "def solution():\n    number = 4321\n    nearest_thousand = round(number / 1000) * 1000\n    return nearest_thousand\n\nans = solution()"
    ],
    "2f6aeacb6c0049d8990d1ffd7bffdc5d": [
        "def solution():\n    metres = 9\n    centimetres_per_metre = 100\n    ans = metres * centimetres_per_metre\n    return ans\n\nans = solution()"
    ],
    "ec690aff1f1e4750a9a76a1e9427e744": [
        "def solution():\n    ans = 200 * 30 * 60\n    return ans\n\nans = solution()"
    ],
    "4fc438b08e484934a9e0729ceb008c74": [
        "def solution():\n    # Jogging time from 6:30 am to 7:30 am is 1 hour\n    jogging_time = 1\n    jogging_speed = 6.5  # in miles per hour\n\n    # Walking time from 7:30 am to 9:30 am is 2 hours\n    walking_time = 2\n    walking_speed = 4.5  # in miles per hour\n\n    # Total distance traveled\n    jogging_distance = jogging_time * jogging_speed\n    walking_distance = walking_time * walking_speed\n\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "f4da090f08704285bf99c48d28b8f30e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the number of foldable and non-foldable bicycles\n    foldable, non_foldable = symbols('foldable non_foldable')\n    \n    # Equation 1: Total number of bicycles\n    equation1 = Eq(foldable + non_foldable, 476)\n    \n    # Equation 2: Bicycles left after the sale\n    equation2 = Eq(non_foldable - (208 * 5 / 9), non_foldable * 4 / 9)\n    equation3 = Eq(foldable - (208 * 4 / 7), foldable * 3 / 7)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (foldable, non_foldable))\n    \n    # Calculate the number of foldable bicycles sold\n    foldable_sold = solutions[foldable] - (solutions[foldable] * 3 / 7)\n    \n    return foldable_sold\n\nans = solution()"
    ],
    "ca0885fd429b47b29cbca128a13934e5": [
        "def solution():\n    height_climbed = 0\n    day = 0\n    while height_climbed < 45:\n        day += 1\n        height_climbed += 10\n        if height_climbed >= 45:\n            break\n        height_climbed -= day\n    return day\n\nans = solution()"
    ],
    "ef539f6c79ef45e6a787351ed4759e6b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for Mike's salary\n    salary = symbols('salary')\n\n    # Define the equations based on the problem statement\n    # He donates 1/4 of his salary to charity\n    donation = salary / 4\n    # He spends 5/6 of the remainder on food\n    spent_on_food = (salary - donation) * 5 / 6\n    # He spends 78 more on food than on donation to charity\n    equation = Eq(spent_on_food, donation + 78)\n\n    # Solve the equation for the salary\n    solution = solve(equation, salary)\n\n    return solution[0]\n\nans = solution()"
    ],
    "1e39295f7be440f19c866b2c67eb6233": [
        "def solution():\n    scale_cm_per_m = 2/3\n    real_tree_height_m = 12\n    \n    model_tree_height_cm = scale_cm_per_m * real_tree_height_m\n    \n    return model_tree_height_cm\n\nans = solution()"
    ],
    "db83e40568bc4ed1abb293d337e3b898": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((2/3)*(x-1) - (1/4)*(3*x+1), 1/6)\n\n    solution_to_eq = solve(equation, x)\n\n    return solution_to_eq[0]\n\nans = solution()"
    ],
    "0f326466fded430f8bb9c80424cf6fb4": [
        "def solution():\n    remaining = 360\n    completed_percentage = 60\n\n    total = remaining / (1 - (completed_percentage / 100))\n\n    return int(total)\n\nans = solution()"
    ],
    "0b6455df8e764e0297e3e34a90919102": [
        "def solution():\n    ans = (2 - 1.8) / (1/2) * (5/2)\n    return ans\n\nans = solution()"
    ],
    "98bea305d2724084a1300cba10c4995b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    score = symbols('score')\n\n    # Construct the equation based on the problem statement\n    equation = Eq(score - 30, (score/2) + 10)\n\n    # Solve the equation\n    original_score = solve(equation, score)[0]\n\n    return original_score\n\nans = solution()"
    ],
    "dfd006a02012410fbbb4bcbd7a08eeda": [
        "def solution():\n    remaining_fraction = 1 - 5/8\n    remaining_flour = 6000\n\n    original_flour = remaining_flour / remaining_fraction\n    return original_flour\n\nans = solution()"
    ],
    "b7f55925dab84b38804fc61f246c5093": [
        "def solution():\n    # Given:\n    # 9 rabbits = 3 goats\n    # 2 goats = 4 cows\n    # We want to find the equation: ? rabbits = 2 cows\n    \n    # From the first equation, we find the ratio of rabbits to goats.\n    rabbits_per_goat = 9 / 3\n    \n    # From the second equation, we find the ratio of goats to cows.\n    goats_per_cow = 2 / 4\n    \n    # To find rabbits per cow, we just multiply the two ratios.\n    rabbits_per_cow = rabbits_per_goat * goats_per_cow\n    \n    # Now, we can find how many rabbits are equal to 2 cows.\n    rabbits_for_2_cows = rabbits_per_cow * 2\n    \n    return int(rabbits_for_2_cows)\n\nans = solution()"
    ],
    "0f98369691cc4fa8828f869e61430e64": [
        "def solution():\n    percentage = 60 / 100\n    total_amount = 765\n    result = percentage * total_amount\n    return result\n\nans = solution()"
    ],
    "a1e43bc939ea4c6fb34a34753a72751b": [
        "def solution():\n    ans = sum(range(1, 20, 2))\n    return ans\n\nans = solution()"
    ],
    "318cb203ec2b4e69af03513f0f5f7db2": [
        "def solution():\n    return 1741 - 968\n\nans = solution()"
    ],
    "4341f23ecb084909afaca690c7016fd3": [
        "def solution():\n    return 3 * 126\n\nans = solution()"
    ],
    "61b231b8c15b475c917f5d10487169ba": [
        "def solution():\n    total_flowers = 30\n    flowers_between_posts = 3\n    \n    # Since 3 flowers are planted between every 2 posts, the number of intervals between posts\n    # can be found by dividing the total number of flowers by the number of flowers per interval.\n    # Adding 1 to the number of intervals gives us the number of lamp posts.\n    intervals = total_flowers // flowers_between_posts + 1\n    \n    # The distance between each lamp post is the total length of the road divided by\n    # the number of intervals between lamp posts.\n    distance_between_posts = 50 / (intervals - 1)\n    \n    return distance_between_posts\n\nans = solution()"
    ],
    "54d9517c5a7c4afaa953d1464774e445": [
        "def solution():\n    # Total number of books from the left side including the favorite book\n    left_side = 6 + 1\n    \n    # Total number of books from the right side including the favorite book\n    right_side = 14\n    \n    # Since the favorite book is counted twice, subtract 1\n    total_books = left_side + right_side - 1\n    \n    return total_books\n\nans = solution()"
    ],
    "13404c9d8a0144d0a8d6ce4d8a80834c": [
        "def solution():\n    initial_temp = 8\n    decrease_temp = 17\n    final_temp = initial_temp - decrease_temp\n    return final_temp\n\nans = solution()"
    ],
    "de8f312c348043bca42e8c7aa90f7a69": [
        "def solution():\n    road_length = 150\n    distance_between_trees = 10\n    \n    number_of_trees = (road_length // distance_between_trees) + 1\n    \n    return number_of_trees\n\nans = solution()"
    ],
    "a4bab2ddc00f4d6db863991f6cc9b894": [
        "def solution():\n    # Given that 4/5 of the unknown number is equal to 48\n    # We want to find the unknown number which we'll call 'x'.\n    # The equation to represent this problem is: (4/5) * x = 48\n    # We want to solve for 'x' which requires dividing 48 by (4/5)\n\n    # Multiplying 48 by the reciprocal of (4/5) which is (5/4)\n    x = 48 * (5/4)\n\n    return x\n\nans = solution()"
    ],
    "1f2fa42e73c245739af9883dfb728d2f": [
        "def solution():\n    first_number = 160000\n    ratio = 1 / 4\n    nth_term = first_number * (ratio ** (5 - 1))  \n\n    return nth_term\n\nans = solution()"
    ],
    "f712d845b49943c78aeaa70968af1f15": [
        "def solution():\n    ans = 8**2 + 27\n    return ans\n\nans = solution()"
    ],
    "7c68f55d51744cc39eaac03dbd0615e5": [
        "def solution():\n    total_sweets = 30\n    for_sister = 6\n    friends = 6\n\n    sweets_for_friends = (total_sweets - for_sister) // friends\n    return sweets_for_friends\n\nans = solution()"
    ],
    "7cd63e4421874b14aac53b57251e8230": [
        "def solution():\n    apples = 19\n    children = 5\n    \n    # The minimum number of apples each child can get is 1,2,3,...,children-1 respectively.\n    # We subtract the minimum apples that other children can get from the total to find the maximum for the last child.\n    min_apples_to_others = sum(range(1, children))\n    max_apples_to_last = apples - min_apples_to_others\n    \n    return max_apples_to_last\n\nans = solution()"
    ],
    "1fd121a0e4224cf5a769dd8b70d3cb9b": [
        "def solution():\n    digits = [0, 1, 2, 3, 6, 8]\n    count = 0\n    for d1 in digits:\n        for d2 in digits:\n            if d1 != d2 and (d1 * 10 + d2) % 2 != 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "19d110feae03410cb8fbd2510aacfe2a": [
        "def solution():\n    # P's work rate per hour\n    P_rate = 1 / (12 * 8)\n    \n    # Q's work rate per hour\n    Q_rate = 1 / (8 * 10)\n\n    # Combined work rate when working 8 hours a day\n    combined_rate_per_day = 8 * (P_rate + Q_rate)\n\n    # Total number of days required to complete the job together\n    days_together = 1 / combined_rate_per_day\n\n    return days_together\n\nans = solution()"
    ],
    "f1f0d797b7874b22a4002f5247bb2471": [
        "def solution():\n    speed_van_1 = 132\n    speed_van_2 = 78\n    time_hours = 8\n\n    distance_apart = (speed_van_1 + speed_van_2) * time_hours\n\n    return distance_apart\n\nans = solution()"
    ],
    "537950035403436781a4ec53ef771d8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq((2/3) * (x - 1) - (1/4) * (3*x + 1), 1/6)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "696c23fc06e14b05a2c046255119fd33": [
        "def solution():\n    donuts_per_box = 6\n    boxes_purchased = 6\n    donuts_eaten = 3\n\n    total_donuts = donuts_per_box * boxes_purchased\n    donuts_left = total_donuts - donuts_eaten\n\n    return donuts_left\n\nans = solution()"
    ],
    "75b8e7d0476046b699f4dc0ad1ac6abd": [
        "def solution():\n    ans = (2 - 1.8) / (1/2) * (5/2)\n    return ans\n\nans = solution()"
    ],
    "aa00ee47d18541ea8553ef86e27f0748": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's use x to represent Pinkie's original score\n    x = symbols('x')\n    equation = Eq(x - 30, (x / 2) + 10)\n\n    # Solve the equation for x to find Pinkie's original score\n    original_score = solve(equation, x)\n\n    return original_score[0]\n\nans = solution()"
    ],
    "a6f93d90cbad41798ee50c1162ac774e": [
        "def solution():\n    n = 78\n    count = 0\n    for i in range(2, n+1, 2):\n        if n % i == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "68df60021a694c14829fcbe8cf5ae9a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    racket, shuttlecock = symbols('racket shuttlecock')\n\n    # equation based on the total mass of 1 racket and 5 shuttlecocks\n    equation1 = Eq(racket + 5 * shuttlecock, 205)\n\n    # equation based on the total mass of 2 rackets and 15 shuttlecocks\n    equation2 = Eq(2 * racket + 15 * shuttlecock, 515)\n\n    # solving the equations\n    solutions = solve((equation1, equation2), (racket, shuttlecock))\n\n    return solutions[racket]\n\nans = solution()"
    ],
    "a17df35105e1488fb14099c56b437550": [
        "def solution():\n    numbers = [12, 16, 20, 24, 28]\n    average = sum(numbers) / len(numbers)\n    return average\n\nans = solution()"
    ],
    "c49938cd48584dd7af3a734aee5be731": [
        "def solution():\n    total_questions = 50\n    unattempted_questions = 3\n    attempted_questions = total_questions - unattempted_questions\n    score = 168\n\n    # If all answered questions were correct, the score would be:\n    max_score = attempted_questions * 4\n\n    # The difference between the actual score and the maximum possible score\n    # gives the total number of negative points due to wrong answers,\n    # which is twice the number of incorrect answers (since 1 mark is taken off,\n    # and 4 marks are given for each correct answer, wrong answers result in a\n    # net change of -2 marks compared to scoring them correctly).\n    score_difference = max_score - score\n\n    # The number of incorrect answers\n    wrong_answers = score_difference // 2\n\n    # Therefore, the number of correct answers is:\n    correct_answers = attempted_questions - wrong_answers\n\n    return correct_answers\n\nans = solution()"
    ],
    "a3c6321b718247e1a8c87ed13d6bfa40": [
        "def solution():\n    # let the number of pencils originally be 4x and pens be 5x\n    # after taking out a pen and adding a pencil, pencils become 4x+1 and pens become 5x-1\n    # the new ratio is 7:8\n    # (4x+1)/(5x-1) = 7/8\n    # solving for x will give us the original number of pencils and pens\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((4*x + 1)/(5*x - 1), 7/8)\n    solution = solve(equation, x)\n\n    # Since x should be a positive integer, we discard any non-integer solutions\n    x_value = [sol.evalf() for sol in solution if sol.is_real and sol > 0 and sol == int(sol)][0]\n\n    # Calculate the original total number of pencils and pens\n    total = 4*x_value + 5*x_value\n\n    return int(total)\n\nans = solution()"
    ],
    "e07c7a8fcd134268ba390e93dbde6058": [
        "def solution():\n    first_term = 30\n    common_difference = 4\n    number_of_terms = 10\n    \n    last_term = first_term + (number_of_terms - 1) * common_difference\n    total_seats = number_of_terms * (first_term + last_term) // 2\n\n    return total_seats\n\nans = solution()"
    ],
    "4657d3f1b0d749a7899c0ce49a8d740d": [
        "def solution():\n    def hash_op(a, b):\n        return a * b - 5 * a + 8\n\n    ans = hash_op(10, 9)\n    ans = hash_op(ans, 8)\n    ans = hash_op(ans, 7)\n    ans = hash_op(ans, 6)\n    ans = hash_op(ans, 5)\n    ans = hash_op(ans, 4)\n    \n    return ans\n\nans = solution()"
    ],
    "6f9eda7abbf146b88413ef8871a3770e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the total cost of the books be represented by 'c'.\n    c = symbols('c')\n    \n    # Let the discount rate on the second day be 'd'.\n    d = symbols('d')\n    \n    # Calculate the profit from the first day,\n    # which is 70% of the books sold at 60% profit.\n    profit_first_day = 0.7 * c * 0.6\n    \n    # Calculate the expected total profit,\n    # which is 60% of the total cost 'c'.\n    expected_total_profit = c * 0.6\n    \n    # Calculate the actual total profit,\n    # which is 80% of the expected total profit.\n    actual_total_profit = expected_total_profit * 0.8\n    \n    # Calculate the profit from the second day,\n    # which is the remaining actual total profit after the first day's profit.\n    profit_second_day = actual_total_profit - profit_first_day\n    \n    # On the second day, all remaining books (30% of total) are sold.\n    # The cost for the remaining books is 30% of the total cost 'c'.\n    cost_remaining_books = c * 0.3\n    \n    # The selling price on the second day is the cost minus the profit from that day.\n    selling_price_second_day = cost_remaining_books - profit_second_day\n    \n    # The discount rate 'd' is calculated based on the reduced selling price from the original price.\n    # The original price should be the same as the cost, so we can find 'd' by comparing both.\n    equation = Eq(selling_price_second_day, cost_remaining_books * (1 - d))\n\n    # Solving the equation to find the discount rate 'd'.\n    discount_rate_solution = solve(equation, d)\n\n    return discount_rate_solution[d]\n\nans = solution()"
    ],
    "36b7c8ca803942679b913576ffc1164b": [
        "def solution():\n    boys_percentage = 40\n    girls_count = 72\n    girls_percentage = 100 - boys_percentage\n    total_children = (girls_count * 100) / girls_percentage\n    return int(total_children)\n\nans = solution()"
    ],
    "06be771ddff04930b7a9da426c7d1667": [
        "def solution():\n    initial_strawberries = 96\n    strawberries_eaten = 73\n    strawberries_bought = 52\n\n    final_strawberries = initial_strawberries - strawberries_eaten + strawberries_bought\n\n    return final_strawberries\n\nans = solution()"
    ],
    "c51419313ddf46ada3ba30f9e095d92c": [
        "def solution():\n    ans = 8**2 + 27\n    return ans\n\nans = solution()"
    ],
    "8b11a69372f04c60a5ae352fe25c67d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the cost of each tuna puff and curry puff\n    tuna_puff, curry_puff = symbols('tuna_puff curry_puff')\n    \n    # Create the equations based on the problem statement\n    equation1 = Eq(curry_puff, tuna_puff - 0.20)\n    equation2 = Eq(12 * tuna_puff + 19 * curry_puff, 39.60)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (tuna_puff, curry_puff))\n    \n    return solutions[tuna_puff]\n\nans = solution()"
    ],
    "1501e7c8fa1943abaaf5e0674516ab89": [
        "def solution():\n    digits = [0, 1, 2, 3, 6, 8]\n    count = 0\n\n    # Loop over each possible position for the first (tens) digit\n    for tens in digits:\n        # Loop over each possible position for the second (ones) digit\n        for ones in digits:\n            # Form the number and check if it is a two-digit odd number\n            if tens != 0 and ones % 2 != 0:\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "cc24fe62d17a41c2b8ef24f004c5e021": [
        "def solution():\n    # The last page number before the missing pages is 14, which means it is either a front page or a back page.\n    # Similarly, the first page number after the missing pages is 35, which also can be a front page or a back page.\n    # Since pages are printed on both sides, we can have two cases:\n    # Case 1: If 14 is a front page, then 15 is on the back of it, missing pages start from 16.\n    # Case 2: If 14 is a back page, then it is paired with 13 as its front page, missing pages start from 14.\n    # Similarly, for the last missing page:\n    # Case 1: If 35 is a front page, missing ends at 34.\n    # Case 2: If 35 is a back page, then 36 is on the front of it, missing ends at 36.\n\n    # We expect newspapers to always start with a front page, that is, page 1. So if page 1 is a front page, page 14 must be a back page because it's an even number.\n    # Therefore, we can conclude that 14 is a back page paired with 13 on the front, and 35 is a front page.\n    # Hence, missing pages are from 14 to 35.\n\n    start_missing = 14\n    end_missing = 35\n    total_missing_pages = end_missing - start_missing + 1  # Plus 1 because the range is inclusive.\n\n    # Since every sheet of newspaper contains two pages, we divide by two to get the number of missing sheets.\n    total_missing_sheets = total_missing_pages / 2\n\n    return int(total_missing_sheets)\n\nans = solution()"
    ],
    "fdfe690a562d4d6bbf61eceb229efec5": [
        "def solution():\n    for num in range(1, 500):\n        if num % 5 == 1 and num % 8 == 4 and num % 9 == 5:\n            return num\n\nans = solution()"
    ],
    "3a37961dddb1493592a78ae3db74b6e6": [
        "def solution():\n    ans = 4 * 8 + 4 * 17\n    return ans\n\nans = solution()"
    ],
    "bc66529b008c4e1590163de5bfb2e7d7": [
        "def solution():\n    total_children = 38\n    total_balloons = 126\n    # Let's assume all children are boys, hence they would receive 2 balloons each.\n    all_boys_balloons = total_children * 2\n    # The extra balloons each girl would get compared to a boy.\n    extra_balloons = 4 - 2\n\n    # Calculate the number of extra balloons given out.\n    extra_balloons_given = total_balloons - all_boys_balloons\n    # The number of girls is equal to the extra balloons given divided by the extra balloons per girl.\n    number_of_girls = extra_balloons_given / extra_balloons\n    # The number of boys is total children minus number of girls.\n    number_of_boys = total_children - number_of_girls\n\n    return int(number_of_boys)\n\nans = solution()"
    ],
    "d1dd44a77a9344ba8d2e79cc83171fae": [
        "def solution():\n    start = 10\n    end = 25\n    ans = end - start + 1\n    return ans\n\nans = solution()"
    ],
    "143d2e71979c46a0a813017c419c172c": [
        "def solution():\n    speed_m_per_min = 36\n    time_seconds = 200\n    time_minutes = time_seconds / 60\n    distance = speed_m_per_min * time_minutes\n    return distance\n\nans = solution()"
    ],
    "250641e98bbf4da6a3ad1c67bad85305": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let c be the initial number of cows and g be the initial number of goats\n    c, g = symbols('c g')\n\n    # 65% of the animals were cows at first\n    equation1 = Eq(c, 0.65 * (c + g))\n\n    # After adding 240 animals, number of goats doubled and cows increased by 20%\n    equation2 = Eq(1.2 * c, 0.65 * (c + g + 240))\n    equation3 = Eq(2 * g, g + 240)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (c, g))\n\n    return solutions[g]\n\nans = solution()"
    ],
    "1d23a4cf5cd24aa78d4522ee259f6ea9": [
        "def solution():\n    result = 1\n    for i in range(3, 20, 2):\n        result *= (1 + 2/i)\n    return result\n\nans = solution()"
    ],
    "d4b69388447b40c1b49c9da3070b537d": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "ae1399c1d3834a26a096bf6302870872": [
        "def solution():\n    string_needed_in_cm = 400 * 85\n    roll_length_in_cm = 20 * 100\n\n    rolls_needed = string_needed_in_cm / roll_length_in_cm\n    if rolls_needed > int(rolls_needed):\n        rolls_needed = int(rolls_needed) + 1\n    else:\n        rolls_needed = int(rolls_needed)\n    \n    return rolls_needed\n\nans = solution()"
    ],
    "53bc7d0205304d2f983aa90502860e23": [
        "def solution():\n    return 863 * 37\n\nans = solution()"
    ],
    "e850469f35b74929a1cad1745166a939": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let e represent Emma's current age\n    # Let j represent John's current age\n\n    e, j = symbols('e j')\n\n    # In 3 years, John's age will be j + 3 and Emma's age will be e + 3\n    # The sum of their ages in 3 years will be 27\n    equation1 = Eq(j + 3 + e + 3, 27)\n    \n    # John is 7 years older than Emma\n    equation2 = Eq(j, e + 7)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (e, j))\n\n    # Emma's current age\n    return solutions[e]\n\nans = solution()"
    ],
    "af4a495ebf5c4ddcacec30bac10e45e8": [
        "def solution():\n    for cookies in range(1, 40):\n        if cookies % 6 == 5 and (-cookies) % 5 == 3:\n            return cookies\n\nans = solution()"
    ],
    "22889dd8c0654312a1905b6415cc2e99": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    salary = symbols('salary')\n    charity = salary / 4\n    remainder = salary - charity\n    food = (5/6) * remainder\n    savings = remainder - food\n    \n    equation = Eq(food - charity, 78)\n    solutions = solve((equation,), (salary,))\n    \n    return solutions[salary]\n\nans = solution()"
    ],
    "de288ae7d0a442c4a9c046e0eed208ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the time David walks at the initial speed be t minutes.\n    t = symbols('t')\n\n    # Distance walked at initial speed: 150m/min * t min\n    distance_initial_speed = 150 * t\n\n    # Distance walked at increased speed: (150+50)m/min * (t+10) min\n    distance_increased_speed = 200 * (t + 10)\n\n    # Total distance equation\n    equation = Eq(distance_initial_speed + distance_increased_speed, 3700)\n\n    # Solve for t\n    time_initial_speed = solve(equation, t)[0]\n\n    # Total time spent walking includes time at initial speed and the extra 10 min at increased speed.\n    total_time = time_initial_speed + 10\n\n    return total_time\n\nans = solution()"
    ],
    "cc03092bb36e4ec3a7e2bb8f320c115b": [
        "def solution():\n    term_7 = 57\n    term_15 = 89\n    n_7 = 7\n    n_15 = 15\n\n    common_difference = (term_15 - term_7) / (n_15 - n_7)\n    \n    return common_difference\n\nans = solution()"
    ],
    "1ecdd14157fe4525aa6c08b14b9eb1dc": [
        "def solution():\n    # The last digit of a number after multiplication depends on the last digit\n    # of the numbers being multiplied. For any base number, the last digit of \n    # its powers repeats in a cycle. \n    # For 2: 2, 4, 8, 6 repeats (4 steps cycle: 2^1, 2^2, 2^3, 2^4, then repeats)\n    # For 3: 3, 9, 7, 1 repeats (4 steps cycle: 3^1, 3^2, 3^3, 3^4, then repeats)\n\n    # Here we just need to find the last digit of 2^2017 times 3^2017.\n    # Since 2017 % 4 == 1, we will be at the first number in both cycles:\n    last_digit_2 = 2\n    last_digit_3 = 3\n\n    # Now multiply the last digits of each and find the last digit of the result\n    last_digit = (last_digit_2 * last_digit_3) % 10\n\n    return last_digit\n\nans = solution()"
    ],
    "0806f05076574fdcaf845a2224dc162a": [
        "def solution():\n    for A in range(10):\n        for B in range(10):\n            for C in range(10):\n                if len({A, B, C, 4, 7, 1, 9}) == 7: # Ensuring all digits are different\n                    number = 4700000 + A * 1000 + B * 10 + 190 + C\n                    if number % 9 == 0: # Check divisibility by 9\n                        return A + B + C, number\n\nans, number = solution()"
    ],
    "05796f765d214621bf4c7e2a5b70ed1e": [
        "def solution():\n    initial_sweets = 240\n    sweets_eaten_per_week = 60\n    sweets_bought_per_week = 45\n\n    sweets_change_per_week = sweets_bought_per_week - sweets_eaten_per_week\n    sweets_desired = 150\n    weeks = (initial_sweets - sweets_desired) / -sweets_change_per_week\n\n    return weeks\n\nans = solution()"
    ],
    "41c46720b9f14be894784705391637b0": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (4, 5), (6, 7)]\n    ans_congruence = solve_congruence(*congruences)\n    \n    ans = next(filter(lambda x: x < 400, range(ans_congruence[0], 400, ans_congruence[1])))\n    \n    return ans\n\nans = solution()"
    ],
    "e4f1396967f949e8aac075d260a9e904": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the price of an apple and the price of an orange\n    apple, orange = symbols('apple orange')\n\n    # Jessie's purchase equation: 2*apple + 1*orange = 40\n    eq1 = Eq(2*apple + orange, 40)\n\n    # Bella's purchase equation: 1*apple + 2*orange = 35\n    eq2 = Eq(apple + 2*orange, 35)\n\n    # Solve the system of equations to find the price of apple and orange\n    solution = solve((eq1, eq2), (apple, orange))\n\n    # Calculate how much Carrie pays for 1 apple and 1 orange\n    carrie_cost = solution[apple] + solution[orange]\n\n    return carrie_cost\n\nans = solution()"
    ],
    "252e549ce3e84c9fa92978ffc5919293": [
        "def solution():\n    # Each of the three places can be filled in 3 ways since repetition is allowed\n    possible_numbers = 3 * 3 * 3\n    return possible_numbers\n\nans = solution()"
    ],
    "84f7de20cdd542549b782f41e1b21e72": [
        "def solution():\n    sweets = 2\n    while True:\n        if (sweets % 3 == 2) and (sweets % 4 == 2) and (sweets % 5 == 2) and (sweets % 6 == 2):\n            return sweets\n        sweets += 1\n\nans = solution()"
    ],
    "833677d869d1418d96be1acc39cb4ff5": [
        "def solution():\n    total_students = 37\n    sport_class = 18\n    reading_class = 22\n\n    # Inclusion-Exclusion Principle: |A ∪ B| = |A| + |B| - |A ∩ B|\n    both_classes = sport_class + reading_class - total_students\n\n    return both_classes\n\nans = solution()"
    ],
    "4d679466d49c48a5ba8bd1230747a070": [
        "def solution():\n    racket_price = 49\n    ball_price = 1.5\n    total_money = 140\n    cost_of_two_rackets = 2 * racket_price\n    remaining_money = total_money - cost_of_two_rackets\n    number_of_balls = remaining_money // ball_price\n    return int(number_of_balls)\n\nans = solution()"
    ],
    "adce279592f04e808385106fbc96b9c7": [
        "def solution():\n    # Since there are three colors and you want to ensure you get 3 different colored balls\n    # You have to consider the worst-case scenario using the pigeonhole principle\n    # which would be drawing all of one color, then all of another color.\n    # After that, the next ball you draw must be of the third color.\n\n    # There are 4 balls of each color, so in the worst case you draw all 4 of one color,\n    # then all 4 of a second color. So after drawing 8 balls, you could still have only 2 colors.\n\n    # Thus, you need to draw 1 more ball to ensure you get a ball of the third color.\n    return 4 + 4 + 1  # 8 balls of the same or just two different colors + 1 ball to ensure the third color\n\nans = solution()"
    ],
    "6b3303365ecc41dab11b7954d4116eb6": [
        "def solution():\n    return 581 - 229\n\nans = solution()"
    ],
    "8e151c79d73b44098fb3999b3b61196d": [
        "def solution():\n    # Starting chocolates\n    heinz_chocolates = 87\n    jed_chocolates = 137\n\n    # Chocolate gain/loss per week\n    heinz_gain_per_week = 4\n    jed_loss_per_week = 6\n\n    # Number of weeks\n    weeks = 0\n\n    # Loop until they have the same number of chocolates\n    while heinz_chocolates != jed_chocolates:\n        weeks += 1\n        heinz_chocolates += heinz_gain_per_week\n        jed_chocolates -= jed_loss_per_week\n\n    return weeks\n\nans = solution()"
    ],
    "70f1a5fb307c4820a64c6b9c7a3e8ba6": [
        "def solution():\n    total_donuts = 6 * 6\n    donuts_eaten = 3\n    donuts_left = total_donuts - donuts_eaten\n    return donuts_left\n\nans = solution()"
    ],
    "3d4453f48b85485db44a73fe0e83a81c": [
        "def solution():\n    total_durians = 90\n    sold_fraction = 4/6\n    sold_durians = total_durians * sold_fraction\n    remaining_durians = total_durians - sold_durians\n    return remaining_durians\n\nans = solution()"
    ],
    "ca43287494e7451e9a31849cb5bdfb51": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables\n    box_of_apples, box_of_oranges = symbols('box_of_apples box_of_oranges')\n    \n    # Set up the equations based on the problem statement\n    equation1 = Eq(3 * box_of_apples + 5 * box_of_oranges, 270)\n    equation2 = Eq(3 * box_of_apples + 7 * box_of_oranges, 342)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (box_of_apples, box_of_oranges))\n    \n    return solutions\n\nans = solution()"
    ],
    "57221fd378d74100a636076027c2568d": [
        "def solution():\n    # There are 12 points on a circle and the distances between adjacent pairs of points are all equal.\n\n    # To form a right angled triangle with vertices on these points,\n    # one of the sides of the triangle needs to be a diameter of the circle.\n    # This is because of the Thales' theorem which states that if A, B, and C are points on a circle\n    # where the line AC is a diameter, then the angle ABC is a right angle.\n\n    # The number of diameters in a circle with 12 equidistant points is simply the number of points divided by 2.\n    # This is because there is a diameter for every pair of opposite points.\n    num_diameters = 12 // 2\n\n    # For each diameter, there are 12 - 2 = 10 other points that can be chosen to form a right angled triangle\n    # with the given diameter as the hypotenuse (we exclude the 2 points that form the diameter itself).\n    points_for_each_diameter = 12 - 2\n\n    # Since there are that many points for each diameter, we can form that many right angled triangles for each diameter.\n    # Therefore, the total number of right angled triangles is the number of diameters times the number of points\n    # that can be chosen for each diameter.\n    num_right_angled_triangles = num_diameters * points_for_each_diameter\n\n    return num_right_angled_triangles\n\nans = solution()"
    ],
    "deeb116148504ace9de18dfb01c2ab56": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    racket, shuttlecock = symbols('racket shuttlecock')\n    \n    # equation 1: one racket and 5 shuttlecocks weigh 205 grams\n    equation1 = Eq(racket + 5 * shuttlecock, 205)\n    # equation 2: two rackets and 15 shuttlecocks weigh 515 grams\n    equation2 = Eq(2 * racket + 15 * shuttlecock, 515)\n\n    # solving the system of equations\n    solutions = solve((equation1, equation2), (racket, shuttlecock))\n\n    return solutions[racket]\n\nans = solution()"
    ],
    "ee76cce07a1c443dab8df84aab143d24": [
        "def solution():\n    c = symbols('c')\n    equation = Eq(5 * (6 * c - 1), -35)\n    solution = solve(equation, c)\n    return solution[0]\n\nans = solution()"
    ],
    "aedfdb2e53834d18b4dd9b71091562bf": [
        "def solution():\n    # The tiger says it's in the exact middle of the line and is the 11th\n    # Therefore, there are 10 animals before and 10 animals after the tiger\n    number_of_animals = (11 - 1) * 2 + 1\n    return number_of_animals\n\nans = solution()"
    ],
    "de0a19ac15d54fe88a6e870b218a8ac6": [
        "def solution():\n    monthly_salary = 1.2\n    debt = 2.6\n    months_needed = debt / monthly_salary\n    return months_needed\n\nans = solution()"
    ],
    "a6b4f6eda2dd4c1086279d0e363ac3fb": [
        "def solution():\n    ans = (1/3) * 24 + (2/5) * 30 + (1/3) * 15\n    return ans\n\nans = solution()"
    ],
    "f232bcc26c5b4a5f9cf2fd8102e72acd": [
        "def solution():\n    count = 0\n    for i in range(1, 10):  # Hundreds place: from 1 to 9 for three-digit numbers\n        for j in range(10):  # Tens place: from 0 to 9\n            for k in range(10):  # Ones place: from 0 to 9\n                if i + j + k == 4:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "3590a4b33e5c474cba9961cce5263a4b": [
        "def solution():\n    roses_first = 24\n    vases_first = 3\n    roses_per_vase_first = roses_first // vases_first\n    \n    vases_second = 4\n    roses_per_vase_second = roses_per_vase_first\n    \n    total_roses = roses_first + (roses_per_vase_second * vases_second)\n    \n    return total_roses\n\nans = solution()"
    ],
    "b2590928a5354962820ebf5c75fbea46": [
        "def solution():\n    ans = 100 - (33 + 34)\n    return ans\n\nans = solution()"
    ],
    "4ebbc0a9bb1e42cd8e77949e6447a0d2": [
        "def solution():\n    ans = 36.42 * 1000\n    return ans\n\nans = solution()"
    ],
    "5843cc2900624024adfb41c64f5bdf23": [
        "def solution():\n    haribo_cost = 0.50  # $0.50\n    mamee_cost = haribo_cost - 0.30  # $0.30 less than Haribo\n    jelly_cost = 6 * mamee_cost  # 6 times the cost of Mamee\n\n    return jelly_cost\n\nans = solution()"
    ],
    "aa8b7ff7b5d044b3b3060a29be5c6a9b": [
        "def solution():\n    num = 2405 + 1827\n    return num2words(num)\n\nfrom num2words import num2words\nans = solution()"
    ],
    "a0808fb3383548829621ede423be79eb": [
        "def solution():\n    for num in range(1, 100):\n        if num % 3 == 2 and num % 4 == 3 and num % 5 == 4:\n            return num\n\nans = solution()"
    ],
    "ffcd2dd5014240228dc1917324db1930": [
        "def solution():\n    lemon_candies = 2\n    cherry_candies = 7\n    mint_candies = 1\n\n    if mint_candies > 0:\n        max_candies_will_can_eat = lemon_candies + cherry_candies\n    else:\n        max_candies_will_can_eat = lemon_candies + cherry_candies + mint_candies\n        \n    return max_candies_will_can_eat\n\nans = solution()"
    ],
    "0760b73c607e495a97b0a547a70d5af8": [
        "def solution():\n    halfway = (-18 + (-2)) / 2\n    return halfway\n\nans = solution()"
    ],
    "76c82b772019406399e1152b52afe3a5": [
        "def solution():\n    for A in range(1, 10):\n        for B in range(10):\n            if (10*A + B) % 2 != 0: continue  # AB should be divisible by 2\n            for C in range(10):\n                if (10*B + C) % 3 != 0: continue  # BC should be divisible by 3\n                if (100*A + 10*B + C) % 9 != 0: continue  # ABC should be divisible by 9\n                for D in range(10):\n                    if D % 5 != 0: continue  # CD should be divisible by 5, hence D should be 0 or 5\n                    if (10*C + D) % 5 != 0: continue  # CD should be divisible by 5\n                    if (100*B + 10*C + D) % 11 != 0: continue  # BCD should be divisible by 11\n                    return 1000*A + 100*B + 10*C + D\n                    \nans = solution()"
    ],
    "f253907f9bdf4de3a6151819ae43b291": [
        "def solution():\n    strawberry_cake_price = 3\n    marble_cake_price = strawberry_cake_price + 2\n    cheese_cake_price = 3 * marble_cake_price\n    price_of_two_cheese_cakes = 2 * cheese_cake_price\n\n    return price_of_two_cheese_cakes\n\nans = solution()"
    ],
    "a3e35c4319ef4a119310524b050ec78f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "5c92d8264b89439e9a8efcb1cde156d8": [
        "def solution():\n    return 10.256 + 9.2 - 7.51\n\nans = solution()"
    ],
    "0b1fff26446748ceb6d70df2d4c59f1f": [
        "def solution():\n    num_teachers = 16\n    games = num_teachers - 1  # In a single elimination tournament, the number of games is always one less than the number of players.\n    return games\n\nans = solution()"
    ],
    "031f3635142c4421b05d4b2b576e071a": [
        "def solution():\n    trains = 4\n    buses = 3\n    flights = 2\n\n    ans = trains + buses + flights\n\n    return ans\n\nans = solution()"
    ],
    "776031bcc4e54790a7e85880c7273093": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for the original number\n    x = symbols('x')\n\n    # Construct the equation based on the problem statement\n    equation = Eq(3*x + 6, x + 16)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    # Return the solution which is the original number\n    return solution[0]\n\nans = solution()"
    ],
    "c7821793dd724577866140431e80753a": [
        "def solution():\n    height = 21\n    ratio_height = 3\n    ratio_width = 4\n\n    width = (height / ratio_height) * ratio_width\n    perimeter = 2 * (height + width)\n\n    return perimeter\n\nans = solution()"
    ],
    "07cca6d9086647059f61d49c4cc9e778": [
        "def solution():\n    # Initial average number of books for Alice, Becky, and Crystal\n    initial_average = 60\n    # Number of people initially\n    initial_people = 3\n    # Total number of books initially\n    initial_total_books = initial_average * initial_people\n\n    # New average when Dennis is included\n    new_average = initial_average + 10\n    # New number of people when Dennis is included\n    new_people = initial_people + 1\n    # Total number of books with Dennis included\n    new_total_books = new_average * new_people\n\n    # Books that Dennis has\n    dennis_books = new_total_books - initial_total_books\n\n    return dennis_books\n\nans = solution()"
    ],
    "e3e500d971604e29aa0a14edf78c74f7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wallet, watch = symbols('wallet watch')\n\n    equation1 = Eq(2 * wallet + 3 * watch, 433)\n    equation2 = Eq(5 * wallet + 4 * watch, 701)\n\n    solutions = solve((equation1, equation2), (wallet, watch))\n\n    return solutions[wallet]\n\nans = solution()"
    ],
    "3dff81f53f23452495bb29a705bf520f": [
        "def solution():\n    # The distance between the 1st and 4th flag is 9 meters\n    # This means there are 4 - 1 = 3 intervals between these flags\n    # Each interval is therefore 9 / 3 = 3 meters\n    interval_distance = 9 / 3\n\n    # To find the distance between the 1st and 9th flag,\n    # we need to calculate the number of intervals between them, which is 9 - 1 = 8\n    # Then we multiply the number of intervals by the interval distance\n    total_distance = interval_distance * (9 - 1)\n\n    return total_distance\n\nans = solution()"
    ],
    "a2c8013f67c740bb813e2cff828c7cc3": [
        "def solution():\n    eddie = 15\n    jenny = 10\n    jason = 8\n\n    total_distance = eddie + jenny + jason\n    num_people = 3\n\n    average_distance = total_distance / num_people\n\n    return average_distance\n\nans = solution()"
    ],
    "b6a2b577b4e5470188401b67b822af20": [
        "from math import factorial\n\ndef solution():\n    total_books = 3 + 4 + 2 + 2  # sum of all the books\n    same_biographies = 3\n    same_science_fictions = 4\n    same_magazines = 2\n    same_practice_books = 2\n\n    # Calculate the factorial of total books\n    total_permutations = factorial(total_books)\n    \n    # Divide by the factorial of the count of identical items to correct for overcounting\n    ans = total_permutations // (factorial(same_biographies) * factorial(same_science_fictions) * factorial(same_magazines) * factorial(same_practice_books))\n    return ans\n\nans = solution()"
    ],
    "1a4d0a08fad44f9ebb6ae96dbaae9f12": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "7b9c62b20e00466b99795e4987d051bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of solution to exchange\n    x = symbols('x')\n    \n    # Equation for bottle A after exchanging x grams of solution\n    equation1 = Eq((50 * 0.11 + x * 0.47 - x * 0.11) / 50, (50 * 0.47 - x * 0.47 + x * 0.11) / 50)\n\n    # Solve the equation\n    sol = solve(equation1, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "e81380a3834146729a81c2bca69516e4": [
        "def solution():\n    toms_length = 13\n    nicks_extra_length = 25\n    nicks_length = toms_length + nicks_extra_length\n    difference = nicks_length - toms_length\n    \n    return difference\n\nans = solution()"
    ],
    "ee22231baefc4e1bace6954a18c6dfd1": [
        "def solution():\n    students_choosing_chicken_tenders = 18\n    total_students = 50\n\n    percentage = (students_choosing_chicken_tenders / total_students) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "8a1f5a78534245b78c14a7d808df202e": [
        "def solution():\n    plot_length_cm = 20 * 100  # converting meters to centimeters\n    distance_apart_cm = 40     # distance between each cauliflower in centimeters\n    offset_cm = 20             # distance from the end to the first cauliflower in centimeters\n\n    # cauliflowers can be planted in the remaining length after the first is planted 20cm away from the end\n    planting_length_cm = plot_length_cm - offset_cm\n\n    # number of cauliflowers is the number of times 40 cm fits into the planting length\n    num_cauliflowers = planting_length_cm // distance_apart_cm\n\n    return num_cauliflowers\n\nans = solution()"
    ],
    "8589e072708949c4a1c18f959b68d739": [
        "def solution():\n    return 0.2 * 0.3\n\nans = solution()"
    ],
    "8d16df72513e48ce9cf5c5768ac94b3b": [
        "def solution():\n    digits = ['1', '3', '6']\n    numbers = set()\n\n    for x in digits:\n        for y in digits:\n            for z in digits:\n                num = int(x + y + z)\n                numbers.add(num)\n\n    return len(numbers)\n\nans = solution()"
    ],
    "b00dd9facbe04160a2ed274649dd7571": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    box = symbols('box')\n    equation = Eq(8 * box + 3, 75)\n    \n    solution = solve(equation, box)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "003a17cf90624266bdfa006deb29cd68": [
        "from sympy import isprime\n\ndef solution():\n    primes = []\n    for num in range(2, 51):\n        if isprime(num) and isprime(num + 6) and isprime(num - 6):\n            primes.append(num)\n    return len(primes), primes\n\nans = solution()"
    ],
    "c87b5329b55a4badb42841d47bba1a1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lucy, peter, edmund, susan = symbols('lucy peter edmund susan')\n\n    equation1 = Eq(edmund, 2 * susan)\n    equation2 = Eq(peter, 3 * edmund)\n    equation3 = Eq(lucy, peter / 2)\n    equation4 = Eq(lucy + peter + edmund + susan, 120)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (lucy, peter, edmund, susan))\n\n    return solutions[lucy]\n\nans = solution()"
    ],
    "d45dd29337134aa9b9314275c5f2b31a": [
        "def solution():\n    return 30 / 100 * 250\n\nans = solution()"
    ],
    "dd2b5176641b47188cb8bc10cc18c3dc": [
        "from itertools import permutations\n\ndef solution():\n    candies = 15\n\n    # We generate all possible combinations of 4 piles which sum up to 15\n    # We use a set to avoid duplicates, since set({1,2}) is the same as set({2,1})\n    unique_combinations = set()\n    for x1 in range(1, candies - 3):\n        for x2 in range(1, candies - x1 - 2):\n            for x3 in range(1, candies - x1 - x2 - 1):\n                x4 = candies - x1 - x2 - x3\n                if x4 > 0 and x4 != x3 and x2 != x4 and x1 != x4:  # Check if piles have different numbers\n                    piles = tuple(sorted((x1, x2, x3, x4)))  # Sorting to avoid different orders of same combination\n                    unique_combinations.add(piles)\n\n    # Get the count of unique combinations\n    count = len(unique_combinations)\n    \n    return count\n\nans = solution()"
    ],
    "8ae8aebcd931414896cbbb9d92a27fa1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, pear = symbols('banana pear')\n\n    equation1 = Eq(banana + 2 * pear, 94)\n    equation2 = Eq(banana + pear, 62)\n\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "45d85cbefb344a0a875c5e59df47d4f3": [
        "def solution():\n    a, b = 1, 2\n    while b < 21:  # 21 is the last known term in the given sequence\n        a, b = b, a + b\n    ans = b\n    return ans\n\nans = solution()"
    ],
    "0b1752605b164c48b0814af3beffe291": [
        "def solution():\n    ans = 19 + 23 + 19 + 22 + 20\n    return ans\n\nans = solution()"
    ],
    "148b423200fd4f4f9cc3cfed406293e0": [
        "def solution():\n    # Calculate the worst case scenario where Jane picks the maximum number\n    # of marbles of one color before moving on to the next color to ensure\n    # she has 4 different colored marbles\n\n    # Adding the most numerous marbles of each color except the last one\n    # This will give us the worst case before getting the fourth color\n    red = 4  # Maximum red marbles before getting a different color\n    green = 7  # Maximum green marbles before getting a different color\n    blue = 6  # Maximum blue marbles before getting a different color\n\n    # One orange marble must be drawn to ensure the fourth color is present\n    orange = 1  # We don't have to draw all orange marbles, just one\n\n    # Summing up all to find the minimum marbles that must be drawn\n    total_marbles = red + green + blue + orange\n    return total_marbles\n\nans = solution()"
    ],
    "0807a5b8035f428595efa3d05b37f60b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    black, white, grey = symbols('black white grey')\n\n    equation1 = Eq(black + white + grey, 59)\n    equation2 = Eq(black + white, grey + 11)\n    equation3 = Eq(black, white - 9)\n\n    solutions = solve((equation1, equation2, equation3), (black, white, grey))\n\n    return solutions[white]\n\nans = solution()"
    ],
    "560f55b2062d4bb393b7c4c68779398a": [
        "def solution():\n    total_fruit = 48\n    apple_fraction = 5 / 8\n    apples = total_fruit * apple_fraction\n    pears = total_fruit - apples\n    return int(pears)\n\nans = solution()"
    ],
    "ce41ebada23a4f4d8a127ded83c184fd": [
        "def solution():\n    # This is a geometric sequence, where each term is 2 times the previous term.\n    # The first term (a) is 1, and the common ratio (r) is 2.\n    # The nth term of a geometric sequence is given by a * r^(n-1).\n    # So the 20th term is 1 * 2^(20-1) and the 17th term is 1 * 2^(17-1).\n    \n    # Calculate the 20th term\n    a20 = 1 * 2**(20 - 1)\n    # Calculate the 17th term\n    a17 = 1 * 2**(17 - 1)\n    \n    # Divide the 20th term by the 17th term\n    ans = a20 / a17\n    \n    return ans\n\nans = solution()"
    ],
    "4de7bc9127b844c8845810ad2db2dd1b": [
        "def solution():\n    # The largest product of two numbers with a fixed sum is achieved\n    # when the two numbers are as close as possible to each other.\n    # Since the sum is 35, the two numbers should be close to 35 / 2.\n    \n    # The two closest integers to 17.5 are 17 and 18\n    num1 = 17\n    num2 = 18\n    \n    # Their product is the largest possible product.\n    ans = num1 * num2\n    \n    return ans\n\nans = solution()"
    ],
    "bdfb73d963c14ec7bac25b679d5d5735": [
        "def solution():\n    average_daily_earnings = 70\n    number_of_working_days = 6  # Monday to Saturday\n\n    total_earnings = average_daily_earnings * number_of_working_days\n\n    return total_earnings\n\nans = solution()"
    ],
    "dc79304d4b074af798fdc304b00f1fe2": [
        "def solution():\n    minutes = 4.6\n    seconds_per_minute = 60\n    ans = minutes * seconds_per_minute\n    return ans\n\nans = solution()"
    ],
    "32f413ff728d481fb33f3ff50b93c6ce": [
        "def solution():\n    # Calculate the total number of books Alice, Becky, and Crystal have together\n    total_books_ABC = 3 * 60\n    # If count Dennis in, the average number increases by 10, to 70 books per person\n    new_average_with_D = 70\n    # Calculate the new total number of books with Dennis' books included for 4 people\n    total_books_ABCD = 4 * new_average_with_D\n    # Dennis' number of books is the difference between the new total and the old total\n    dennis_books = total_books_ABCD - total_books_ABC\n    return dennis_books\n\nans = solution()"
    ],
    "873caeb39b18425fa3cf21cb40505ac6": [
        "def solution():\n    day_distance = 5\n    night_distance = 3\n    net_distance = day_distance - night_distance\n    burrow_depth = 16\n    day = 0\n    total_climbed = 0\n\n    while total_climbed < burrow_depth:\n        day += 1\n        total_climbed += day_distance\n        if total_climbed >= burrow_depth:\n            break\n        total_climbed -= night_distance\n\n    return day\n\nans = solution()"
    ],
    "9eefa1dbad6349a090e42d50a09d87fd": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    T, income = symbols('T income')\n    tax_part1 = T/100 * 30000\n    tax_part2 = (T+3)/100 * (income - 30000)\n    total_tax = tax_part1 + tax_part2\n\n    # total_tax = (T+1)% of his annual income\n    tax_condition = Eq(total_tax, (T+1)/100 * income)\n\n    # Income tax of any amount above 30000 is taxed at a rate of (T+3)%\n    # It means Ryan earns more than 30000, so we'll consider income > 30000\n    income_condition = income > 30000\n\n    # Solve the system\n    solutions = solve((tax_condition, income_condition), (T, income))\n\n    # We only need the solution for income\n    return solutions[income]\n\nans = solution()"
    ],
    "515f9b66abd142d0bd65c4a91de0a79a": [
        "def solution():\n    numbers = [0.993, 1.006, 1.1, 0.94, 0.99]\n    closest_num = min(numbers, key=lambda x: abs(x - 1))\n\n    return closest_num\n\nans = solution()"
    ],
    "c852142aceb043f5b55cd004438cf7a6": [
        "def solution():\n    total_beads = 700\n    beads_per_necklace = 27\n    full_necklaces = total_beads // beads_per_necklace\n    return full_necklaces\n\nans = solution()"
    ],
    "53411c78458748e1ab1aa5ff7a2ef692": [
        "def solution():\n    johns_model_height = 19.6\n    ratio_john = 2\n    ratio_mike = 3\n\n    mikes_model_height = (johns_model_height / ratio_john) * ratio_mike\n\n    return mikes_model_height\n\nans = solution()"
    ],
    "00d0ef22036440bfba46cf90f1e51a5a": [
        "def solution():\n    # Let x be the number of 50-cent coins and y be the number of 20-cent coins\n    # We have two equations based on the problem statement:\n    # x + y = 21\n    # 0.50x + 0.20y = 6.30\n    # We can solve this system of linear equations to find the value of x and y\n\n    # Using sympy to solve the equations\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    eq1 = Eq(x + y, 21)\n    eq2 = Eq(0.50*x + 0.20*y, 6.30)\n\n    solutions = solve((eq1, eq2), (x, y))\n\n    # The solution is the value of x, which is the number of 50-cent coins\n    return solutions[x]\n\nans = solution()"
    ],
    "6927ac3bb6f64f89b5830b5fccd79ae6": [
        "def solution():\n    # Hundredths place has digit 7, which contributes to the value 0.07\n    hundredths_place = 7 * 0.01\n    \n    # Tenths place has digit 6, which contributes to the value 0.6\n    tenths_place = 6 * 0.1\n    \n    # Ones place has a value of 4, which contributes to the value 4.00\n    ones_place = 4\n    \n    return ones_place + tenths_place + hundredths_place\n\nans = solution()"
    ],
    "cf4d33bf77d24115a787173fb7fe030e": [
        "def solution():\n    numbers = [0.993, 1.006, 1.1, 0.94, 0.99]\n    closest = min(numbers, key=lambda x: abs(x - 1))\n    return closest\n\nans = solution()"
    ],
    "56d8daf28c984740b59bdb2fd77882d7": [
        "def solution():\n    numbers = [19, 6, 12, 13, 21, 4, 8, 17]\n    return sum(numbers)\n\nans = solution()"
    ],
    "6a0c0299b8e74741b435eee435724ca3": [
        "def solution():\n    # The cost of a pencil and the cost of a pen\n    pencil_cost = 2\n    pen_cost = 4\n    \n    # Since Owen wants to trade for one pen, we need to find out how many\n    # pencils that pen is worth. We do this by dividing the cost of a pen\n    # by the cost of a pencil.\n    pencils_per_pen = pen_cost / pencil_cost\n    \n    return int(pencils_per_pen)\n\nans = solution()"
    ],
    "63233813070f46b2ac40a6c1b5bc9b6c": [
        "def solution():\n    tom_money = 68.10\n    alice_money_left = tom_money - 25.40\n    alice_money_initial = alice_money_left + 36\n    \n    return alice_money_initial\n\nans = solution()"
    ],
    "c824a5b0a4384dcc938f65073d4a8794": [
        "def solution():\n    trains = 4\n    buses = 3\n    flights = 2\n\n    total_ways = trains + buses + flights\n\n    return total_ways\n\nans = solution()"
    ],
    "6801a3acc18c476f8557f9869fe2dd0a": [
        "def solution():\n    # Let's assume that the number of students in Class B is x.\n    # Then, the number of students in Class A is x + 3.\n    # If all peaches are given to Class A, each student in Class A can get 5 peaches\n    # and there will be 10 peaches left. That gives us the equation:\n    # 5 * (x + 3) + 10 = total number of peaches.\n    # If all peaches are given to Class B, each student can get 8 peaches,\n    # and there will be a shortage of 2 peaches. That gives us the equation:\n    # 8 * x = total number of peaches - 2.\n    # These two equations should be equal to the total number of peaches.\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    peaches_for_A = 5 * (x + 3) + 10\n    peaches_for_B = 8 * x + 2\n\n    # Setting up the equation and solving for x\n    equation = Eq(peaches_for_A, peaches_for_B)\n    number_of_students_B = solve(equation, x)[0]\n\n    # Now we calculate the total number of peaches\n    total_peaches = peaches_for_A.subs(x, number_of_students_B)\n\n    return total_peaches\n\nans = solution()"
    ],
    "3e88caa587c24fdea4f8a57b8dbd78f8": [
        "def solution():\n    ans = 9.95 - 2.6 - 3.412\n    return ans\n\nans = solution()"
    ],
    "30ec79644d524ec291def656fb45df08": [
        "def solution():\n    product = 888 * 999\n    last_two_digits = product % 100\n    return last_two_digits\n\nans = solution()"
    ],
    "d3732a99f6ef4521b3a6328c710459fd": [
        "def solution():\n    ans = 78.2 - 31.45 + 5.245 - 2.3\n    return ans\n\nans = solution()"
    ],
    "1fd49a79b84a47ae801b6ede661a42f2": [
        "from math import factorial\n\ndef solution():\n    # Total number of dancing performances\n    d = 7\n    # Total number of playing a sketch performances with one dancing performance between every two playing a sketch\n    # The effective number of such \"units\" is p-1, because we are looking at the spaces between playing a sketch performances\n    p = 3 - 1 \n    \n    # Calculate the factorial of d and p for permutations within the group\n    fact_d = factorial(d)\n    fact_p = factorial(p)\n\n    # Calculate combinations for placing p \"units\" within d+1 possible positions (slots between d performances plus two ends)\n    slots = d + 1\n    comb = factorial(slots) // (factorial(p) * factorial(slots - p))\n\n    # Multiply combinations by permutations within each group\n    ans = comb * fact_d * fact_p\n\n    # The last playing a sketch can be added in any of the slots between the units or at the ends without constraints\n    ans *= slots - p\n    \n    return ans\n\nans = solution()"
    ],
    "20389c4707d0488a9cd27afb2d7c45ed": [
        "def solution():\n    import sympy as sp\n\n    h = sp.symbols('h', integer=True)\n    cube_root_h = sp.root(28512/h, 3)\n\n    # Since 28512/h must be a perfect cube, h must be the product of the cube\n    # of its prime factors that do not already contribute to a cube in 28512.\n  \n    # Factorize 28512 to get its prime factors and their powers\n    prime_factors = sp.factorint(28512)\n\n    # Calculate h by multiplying the factors that are not already a cube\n    h_value = 1\n    for base, power in prime_factors.items():\n        if power % 3 != 0:  # If power is not a multiple of 3\n            h_value *= base ** (3 - (power % 3))\n\n    return h_value\n\nans = solution()"
    ],
    "d8669bc3a70344f58225403abd0196e9": [
        "def solution():\n    # Bart needs to take at least one color until he gets two of different colors.\n    # If he takes all of one color he is still not guaranteed to have two different colors,\n    # so he must take at least one more.\n\n    # Taking all reds, then one yellow guarantees a different color\n    take_reds = 3\n    \n    # He must take one more (yellow) to guarantee a different color\n    take_one_yellow = 1\n\n    # Number of M&M's chips he needs to take\n    ans = take_reds + take_one_yellow\n\n    return ans\n\nans = solution()"
    ],
    "a5e7e019fb4d4c0080d3bb8fee16309b": [
        "def solution():\n    from math import factorial\n    # Define a function to calculate subfactorials, also called derangements\n    def subfactorial(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (subfactorial(n - 1) + subfactorial(n - 2))\n\n    # Number of friends\n    n = 7\n    # Calculate the number of ways the friends can sit not in their own chairs\n    ans = subfactorial(n)\n    \n    return ans\n\nans = solution()"
    ],
    "688bd3546a274323aedfd728fc91d0e1": [
        "def solution():\n    families = 10\n    # Each father shakes hands with fathers, mothers, and children from other families: (9 families * 3 people each)\n    handshakes_fathers = families * (families - 1) * 3\n    # Each mother shakes hands with fathers and children from other families: (9 families * 2 people each)\n    handshakes_mothers = families * (families - 1) * 2\n    # Each child shakes hands with fathers and mothers from other families: (9 families * 2 people each)\n    handshakes_children = families * (families - 1) * 2\n    # Sum of all handshakes\n    total_handshakes = handshakes_fathers + handshakes_mothers + handshakes_children\n    return total_handshakes\n\nans = solution()"
    ],
    "980c93de91ea458b9c9e8248ad74e8b5": [
        "def solution():\n    a = 31415926\n    b = 31415927\n    c = 31415925\n    ans = (a ** 2) - (b * c)\n    return ans\n\nans = solution()"
    ],
    "e7684856f58240ceb07efec4b2d70e70": [
        "def solution():\n    mark_position_from_front = 8\n    helen_position_from_end = 9\n    children_between = 6\n\n    total_children = mark_position_from_front + children_between + helen_position_from_end\n\n    return total_children\n\nans = solution()"
    ],
    "b4bdf164e10c4b1b9d4e3c8fbc8fb268": [
        "def solution():\n    # There are five odd digits: 1, 3, 5, 7, 9\n    # Each digit in the 3 digit number must be one of these five odd digits\n    # The hundreds place can be filled by any of the 5 odd digits\n    # The tens place can be filled by any of the 5 odd digits\n    # The units place can be filled by any of the 5 odd digits\n    \n    # Using the multiplication principle, multiply the number of choices for each place\n    ans = 5 * 5 * 5\n    return ans\n\nans = solution()"
    ],
    "6601fcfffa994bc9b56b9f035024b14a": [
        "def solution():\n    # The repeating pattern is \"85274\"\n    repeating_pattern = \"85274\"\n    # The 79th digit in the sequence, 0-indexed, will be at index 78\n    index = 78\n    # Finding the corresponding digit in the repeating pattern\n    corresponding_index = index % len(repeating_pattern)\n    # Getting the digit\n    digit = repeating_pattern[corresponding_index]\n    # Convert the digit to integer\n    ans = int(digit)\n    return ans\n\nans = solution()"
    ],
    "af4a763c71d14bfc86469b27fffda5d7": [
        "def solution():\n    max_number = 0\n    for number in range(999, 99, -1):\n        if (number + 2009) % 17 == 0 and (number + 2009) % 19 == 0:\n            max_number = number\n            break\n    return max_number\n\nans = solution()"
    ],
    "700ddae7c261440e8dfef14d11e42592": [
        "def solution():\n    total_sum = sum(range(1, 63))\n    missing_number = total_sum - 1939\n    return missing_number\n\nans = solution()"
    ],
    "87f7b53af1c7449bb3a1c8c021923671": [
        "def solution():\n    # Total of each color marbles except one fewer for each\n    # since at least one of each color is needed to ensure 4 different colours\n    red = 4 - 1\n    green = 7 - 1\n    blue = 6 - 1\n    orange = 2\n    \n    # At least one marble from each color is needed, except for the last\n    # color where we need all. So we add up everything but the largest group\n    # (since we're assuming the worst case scenario in which all previously\n    # drawn marbles are from the maximum number group) plus one from the largest group.\n    marbles_needed = red + green + blue + orange\n    \n    # We add one because if we have all except one color, we need at least \n    # one more draw to ensure it is of the missing color\n    return marbles_needed + 1 \n\nans = solution()"
    ],
    "18a332d1534047ebbe0fc807217bdfa9": [
        "def solution():\n    for i in range(999):\n        if i + (i + 1) == 777:\n            return i + 2\n\nans = solution()"
    ],
    "a082a5ee490e4087b147b853ed2e0705": [
        "def solution():\n    # Initial free hours and given bill amount\n    free_hours = 40\n    bill_amount = 82\n    total_hours = free_hours\n\n    # Calculate hours parked within the $5 per hour range\n    if bill_amount > 0:\n        price_per_hour = 5\n        hours_at_5 = min((bill_amount // price_per_hour), 10)\n        total_hours += hours_at_5\n        bill_amount -= hours_at_5 * price_per_hour\n\n    # Calculate hours parked within the $8 per hour range\n    if bill_amount > 0:\n        price_per_hour = 8\n        hours_at_8 = min((bill_amount // price_per_hour), 10)\n        total_hours += hours_at_8\n        bill_amount -= hours_at_8 * price_per_hour\n\n    # Calculate hours parked within the $15 per hour range\n    if bill_amount > 0:\n        price_per_hour = 15\n        hours_at_15 = bill_amount // price_per_hour\n        total_hours += hours_at_15\n        bill_amount -= hours_at_15 * price_per_hour\n\n    return total_hours\n\nans = solution()"
    ],
    "c73a9fe2a1a84b32b28f07fc9fc2e630": [
        "def solution():\n    # Define a function to calculate the number of ways to climb to a given step\n    def climb(steps):\n        # Base cases\n        if steps <= 0: return 0\n        if steps == 1: return 1  # Only 1 step, 1 way to climb\n        if steps == 2: return 2  # 2 steps, (1, 1) or (2)\n        if steps == 3: return 4  # 3 steps, (1, 1, 1), (1, 2), (2, 1), (3)\n    \n        # Recursive case: The number of ways to reach a step is the sum of the\n        # ways to reach the previous three steps (since Jimmy can climb 1, 2 or 3 steps)\n        return climb(steps - 1) + climb(steps - 2) + climb(steps - 3)\n    \n    # Calculate the number of ways to reach step 4\n    ways_to_step_4 = climb(4)\n    # Calculate the number of ways to reach from step 6 to step 10 (avoiding step 5), by\n    # starting from step 5 or 6 (since step 5 is muddy, he can only step there, but not 'use' it.)\n    ways_from_step_6_to_10 = climb(5)\n    # Multiply the number of ways to get to step 4 by the number of ways to reach\n    # from step 6 to step 10 to get the total number of ways\n    total_ways = ways_to_step_4 * ways_from_step_6_to_10\n    \n    return total_ways\n\nans = solution()"
    ],
    "1b42b4b26b2a4a84918723d849472aa1": [
        "def solution():\n    numerator = 2998 + 2999 + 3000\n    denominator = 2997 + 2998 + 2999 + 3000 + 3001\n    ans = 10 * (numerator / denominator)\n    return ans\n\nans = solution()"
    ],
    "8b84d4c8e6d6433bb169eac92ff0c74c": [
        "def solution():\n    from itertools import permutations\n    digits = [3, 6, 9]\n    perm = permutations(digits, 3)\n    return len(list(perm))\n\nans = solution()"
    ],
    "031cd0de1ee64e169848ce69d7f5b3ca": [
        "def solution():\n    length = 5\n    width = 3\n    perimeter = 2 * (length + width)\n    return perimeter\n\nans = solution()"
    ],
    "71b17521447249e196a0f8b18fb89aa3": [
        "def solution():\n    average_daily_earnings = 60\n    number_of_days = 7  # Monday to Sunday is 7 days\n    total_earnings = average_daily_earnings * number_of_days\n    return total_earnings\n\nans = solution()"
    ],
    "5fdb62b3b2ec43a38c6fad9527ab2e7c": [
        "def solution():\n    # Coefficients for the variable x on left side (5x - 2x) and right side (6x + 4x)\n    coefficients_left = 5 - 2\n    coefficients_right = 6 + 4\n    # Constants on the left side (+7) and right side (-14)\n    constants_left = 7\n    constants_right = -14\n    \n    # Equivalent substitution to isolate x\n    x = (constants_right - constants_left) / (coefficients_left - coefficients_right)\n    \n    return x\n\nans = solution()"
    ],
    "d756434ccb6b454cbe50d5d2de90751a": [
        "def solution():\n    number = 3016 - 100\n    return number\n\nans = solution()"
    ],
    "fcad283a7a1f427793d6d2d9b3d1a441": [
        "def solution():\n    # Since we want the largest number to be maximum, we start with the smallest odd numbers\n    # There are four smallest positive odd numbers: 1, 3, 5, 7\n    sum_of_four_smallest = 1 + 3 + 5 + 7\n\n    # Subtract the sum of the four smallest from the total to get the largest\n    largest_number = 85 - sum_of_four_smallest\n\n    return largest_number\n\nans = solution()"
    ],
    "d767cbc2899b42849970436783d686bb": [
        "def solution():\n    ans = 23.2 - 14.7\n    return ans\n\nans = solution()"
    ],
    "2d070af2dcd74f2ca39de8161148fb7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T, income = symbols('T income')\n    \n    # Calculating the tax paid\n    tax_paid = Eq(income * (T + 1) / 100, 30000 * T / 100 + (income - 30000) * (T + 3) / 100)\n\n    # We solve for the income\n    solutions = solve(tax_paid, income)\n\n    # Since the income cannot be negative, we pick the positive solution\n    annual_income = next(val for val in solutions if val > 0)\n    \n    return annual_income\n\nans = solution()"
    ],
    "fec0efe56cd043f2ae93914883589ff6": [
        "def solution():\n    numbers = [0.993, 1.006, 1.1, 0.94, 0.99]\n    closest_to_one = min(numbers, key=lambda x: abs(x - 1))\n\n    return closest_to_one\n\nans = solution()"
    ],
    "e8e9b50054f946dcb1b7e07440b9d29f": [
        "def solution():\n    speed_still_water = 88\n    speed_current = 12\n    total_distance = 500\n\n    speed_downstream = speed_still_water + speed_current\n\n    time_taken = total_distance / speed_downstream\n\n    return time_taken\n\nans = solution()"
    ],
    "40d0f97fc5af4ba79f1e1007a926a66b": [
        "def solution():\n    minutes_to_seconds = 2.5 * 60\n    return int(minutes_to_seconds)\n\nans = solution()"
    ],
    "e23c6ff29b964509baa268af08cccfb5": [
        "def solution():\n    # Let's assume x is the number of 20 cent coins and y is the number of 50 cent coins\n    for x in range(22):  # Since there are 21 coins, x can range from 0 to 21\n        y = 21 - x\n        if 0.20 * x + 0.50 * y == 6.30:  # The total value of coins must be equal to 6.30\n            return y\n\nans = solution()"
    ],
    "16aa6cb964434e138d37f5f5467ea1c6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the distance from A to B as 'd'\n    # Alan's speed is 's' and Phillip's speed is 's + 15'\n    d, s = symbols('d s')\n\n    # Phillip's time to travel is 12 minutes\n    phillip_time = 12\n\n    # Alan's time to travel is 12 + 3 minutes\n    alan_time = phillip_time + 3\n\n    # Setting up equations based on the information given\n    # Phillip's distance equation\n    equation1 = Eq((s + 15) * phillip_time, d)\n    # Alan's distance equation\n    equation2 = Eq(s * alan_time, d)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (d, s))\n\n    return solutions[d]\n\nans = solution()"
    ],
    "a04912e5c32e426a9c96bc96e65c469c": [
        "def solution():\n    total_coins = 213\n    children = 5\n    remainder = total_coins % children\n    return remainder\n\nans = solution()"
    ],
    "a7ab5e95b20b449aae26b7bc5ce0f53b": [
        "from math import comb\n\ndef solution():\n    girls_ways = comb(8, 4)\n    boys_ways = comb(12, 3)\n\n    total_ways = girls_ways * boys_ways\n\n    return total_ways\n\nans = solution()"
    ],
    "f3b90fc112134c11bf16c053ec5b9bb5": [
        "def solution():\n    import math\n    \n    count = 0\n    num = 2\n    \n    for _ in range(5):\n        if math.isqrt(num)**2 == num:\n            count += 1\n        num = num * 10 + 5\n    \n    return count\n\nans = solution()"
    ],
    "0dcc886d48d14da3a0ba1c786f23c05c": [
        "def solution():\n    tom_money_after_36 = 68.10\n    alice_money_after_36_less_than_tom = 25.40\n    alice_money_after_36 = tom_money_after_36 - alice_money_after_36_less_than_tom\n    alice_initial_money = alice_money_after_36 + 36\n    return alice_initial_money\n\nans = solution()"
    ],
    "e4cf51421424479896c2cc37d2e05235": [
        "def solution():\n    total_sum_five_numbers = 5 * 28\n    total_sum_twelve_numbers = 12 * 11\n    combined_sum = total_sum_five_numbers + total_sum_twelve_numbers\n    combined_count = 5 + 12\n    combined_mean = combined_sum / combined_count\n    return combined_mean\n\nans = solution()"
    ],
    "1dc393d01ecf4792b3b72098c4cdff99": [
        "def solution():\n    original_price = 15.40\n    discount_percentage = 20\n    discount_amount = original_price * (discount_percentage / 100)\n    new_price = original_price - discount_amount\n    return new_price\n\nans = solution()"
    ],
    "d3a5ba15a4034a49afce92beb5409bf9": [
        "def solution():\n    smallest_number = None\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for ones in range(0, 10, 2):  # increment by 2 for even numbers\n                if hundreds + tens + ones == 21:\n                    current_number = hundreds * 100 + tens * 10 + ones\n                    if smallest_number is None or current_number < smallest_number:\n                        smallest_number = current_number\n    return smallest_number\n\nans = solution()"
    ],
    "a16e80d24e034bddb8280d950f5a08b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candies, students_B = symbols('candies students_B')\n    students_A = 2 * students_B\n\n    equation1 = Eq(4 * students_A - candies, 20)\n    equation2 = Eq(candies - 6 * students_B, 16)\n\n    solutions = solve((equation1.subs(students_A, 2 * students_B), equation2), (candies, students_B))\n\n    return solutions[candies]\n\nans = solution()"
    ],
    "9bb5ada2b3c4496bbf433bd138e2e0ae": [
        "def solution():\n    # Let's denote the original number of arms as x.\n    # Each time Peter cuts off 5 arms, 1 new arm grows back.\n    # So after cutting off 5 arms, the total decrease is 4 arms.\n    # Peter cuts arms 21 times, so the total decrease is 21 * 4 arms.\n    # The original number of arms minus the total decrease should be zero, as the octopus is left with no arms.\n    \n    total_cut = 21\n    arms_regrown_each_time = 1\n    net_decrease_per_cut = 5 - arms_regrown_each_time\n    \n    total_decrease = total_cut * net_decrease_per_cut\n    original_arms = total_decrease\n    \n    return original_arms\n\nans = solution()"
    ],
    "0f7063d1e1484313ab5cf6b5f0420c06": [
        "def solution():\n    # We know the sum of the 10 numbers should be 2021.\n    # The 3rd greatest number is 246, meaning there are 2 greater numbers.\n    # To find the minimum value for the 4th greatest number,\n    # we should allocate as much as possible to the two greater numbers and the numbers below.\n    # Assign the least possible value, which is 1, to the numbers from the 5th to 10th.\n    # min_sum = 1 + 2 + 3 + 4 + 5 + 6 = 21 for the 6 smallest numbers.\n \n    min_sum = sum(range(1, 7))  # . The sum of the smallest six numbers (minimum values)\n    remaining_sum = 2021 - (246 + min_sum)  # Remaining sum after assigning 246 and the smallest six numbers\n    # Since we know the next 2 greatest numbers must be larger than 246,\n    # we can allocate one more than 246 to the 2nd greatest and the rest to the greatest.\n    fourth_greatest = remaining_sum - (246 + 1) - (246 + 2)\n    return fourth_greatest\n\nans = solution()"
    ],
    "c8155e9c63f74065a3befe7a41ec8e68": [
        "def solution():\n    # Assume all coins taken out are of the same color.\n    # To guarantee 2 different colors, take all coins of one color plus one more.\n    max_same_color = 6\n    return max_same_color + 1  # Taking out one more will ensure the other color.\n\nans = solution()"
    ],
    "4b28c12170034843abf93f81771140af": [
        "def solution():\n    total_spent = 156\n    price_cactus = 2\n    price_sunflower = 7\n    # Let the number of sunflowers be x\n    # Then the number of cacti will be x + 6 (as Lavi bought 6 more cacti than sunflowers)\n    # We can set up the following equation based on the total amount spent:\n    # 2*(x+6) + 7*x = 156\n    # 2*x + 12 + 7*x = 156\n    # 9*x + 12 = 156\n    # 9*x = 156 - 12\n    # 9*x = 144\n    # x = 144 / 9\n    x = (total_spent - 6 * price_cactus) // (price_cactus + price_sunflower)\n    # Number of cacti\n    cacti = x + 6\n    return cacti\n\nans = solution()"
    ],
    "ea360eacf521407f98ff8b5280ab0671": [
        "def solution():\n    count = 0\n    for i in range(1, 511):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "ceb847740b284e4291e28c8612c7623e": [
        "def solution():\n    speed_m_per_min = 60\n    time_seconds = 150\n    time_minutes = time_seconds / 60\n\n    distance = speed_m_per_min * time_minutes\n\n    return distance\n\nans = solution()"
    ],
    "c4a0044218d4459486aeded38095d16e": [
        "def solution():\n    count = 0\n    for i in range(1, 25):\n        for j in range(i+1, 25):\n            if (i % j != 0) and (j % i != 0):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "b2c8b37b16bc4b09830fda1738de61da": [
        "def solution():\n    ans = 38 * 32 + 37 * 33 + 36 * 34\n    return ans\n\nans = solution()"
    ],
    "a7d31aaf346e44cc80aea145f699fb6c": [
        "def solution():\n    pip_sweets = 7\n    kevin_sweets = 3 * pip_sweets\n    qingqing_sweets = kevin_sweets + 6\n    total_sweets = pip_sweets + kevin_sweets + qingqing_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "81817e35e8504d14a4853709b3f0f4bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    devi, jerry = symbols('devi jerry')\n    \n    equation1 = Eq(devi, jerry + 8)\n    equation2 = Eq((devi + 4)/(jerry + 4), 5/7)\n    \n    solutions = solve((equation1, equation2), (devi, jerry))\n    \n    return solutions[jerry]\n\nans = solution()"
    ],
    "e147bf0d408e4c8a9fccf6228377aabc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    grey, father = symbols('grey father')\n    # When Grey was born, his father was 30 years old\n    equation1 = Eq(father - grey, 30)\n    # This year, the age of Grey's father is three times that of Grey's\n    equation2 = Eq(father, 3 * grey)\n\n    solutions = solve((equation1, equation2), (grey, father))\n\n    return solutions[father]\n\nans = solution()"
    ],
    "2ee25cfde76549e8a74f4b49a19e6576": [
        "def solution():\n    numerator = 2998 + 2999 + 3000\n    denominator = 2997 + 2998 + 2999 + 3000 + 3001\n    ans = 10 * (numerator / denominator)\n    return ans\n\nans = solution()"
    ],
    "5e6155d2b3e346cbbc38976ee85ef798": [
        "def solution():\n    total_books = 35\n    layers = 4\n    max_books_least = -(-total_books // layers)\n    return max_books_least\n\nans = solution()"
    ],
    "0875b88ce12741689decc2618d2990ae": [
        "def solution():\n    first_term = 48\n    last_term = 80\n    difference = 4\n\n    num_rows = ((last_term - first_term) // difference) + 1\n    total_seats = (num_rows * (first_term + last_term)) // 2\n\n    return total_seats\n\nans = solution()"
    ],
    "31840b7e162d44dcaffb4626ba30ea1a": [
        "def solution():\n    import matplotlib.pyplot as plt\n\n    # Define the ratios of apples between Pip and Bud\n    pip_ratio = 5\n    bud_ratio = 1\n\n    # Calculate total parts\n    total_parts = pip_ratio + bud_ratio\n\n    # Create a list of parts\n    parts = [bud_ratio, pip_ratio]\n\n    # Create a bar graph\n    plt.figure(figsize=(6, 4))\n    plt.bar(['Bud', 'Pip'], parts, color=['blue', 'red'])\n    \n    # Set the title and labels\n    plt.title('Parts Graph of Apples between Pip and Bud')\n    plt.xlabel('Persons')\n    plt.ylabel('Number of Parts')\n    \n    # Save the graph as an image file\n    plt.savefig('parts_graph.png')\n\n    # We assume 'ans' is the confirmation that the operation was completed successfully\n    ans = 'Graph has been drawn and saved as parts_graph.png'\n    return ans\n\nans = solution()"
    ],
    "a9ce794d4d724087ae8161cbe09c09a1": [
        "def solution():\n    digits = [3, 6, 9] \n    count = 0\n\n    for i in digits:\n        for j in digits:\n            for k in digits:\n                if i != j and j != k and i != k:\n                    count += 1\n    \n    return count\n\nans = solution()"
    ],
    "2dd0df0b47f04bfb8660c7f9d1f7eab6": [
        "def solution():\n    return 0.12 + 0.345 + 0.6789\n\nans = solution()"
    ],
    "3a9016a2cfba4bf48567281430e8ea9b": [
        "def solution():\n    return 3 * 37 * 9\n\nans = solution()"
    ],
    "bd2b901e7ebe48c895db12c5cefe8864": [
        "def solution():\n    cows = 523\n    pigs = 172\n    ans = cows - pigs\n    return ans\n\nans = solution()"
    ],
    "2f7c543f936b44159eb43f58e41436ea": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    divisor = remainder + 1  # The minimum possible divisor is always one more than the remainder \n    dividend = (quotient * divisor) + remainder  # formula: Dividend = (Quotient * Divisor) + Remainder\n    return dividend\n\nans = solution()"
    ],
    "ed453aff15e04b3fbad1957ab9fac783": [
        "def solution():\n    count = 0\n    # First digit can be 1 or 2 (2 options, can't be 0 for a three-digit number)\n    for first_digit in [1, 2]:\n        # Second digit can be 0, 1, 2 (3 options, can be the same as first digit)\n        for second_digit in [0, 1, 2]:\n            # Third digit can be 0, 1, 2 but not the same as the second digit (2 options)\n            for third_digit in [0, 1, 2]:\n                if second_digit != third_digit:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "473f107b34bc4eb98a8c18b2d5a71597": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    betty, veron, eliza = symbols('betty veron eliza')\n\n    equation1 = Eq(eliza, 2 * veron)\n    equation2 = Eq(betty, eliza - 185)\n    equation3 = Eq(betty + veron + eliza, 855)\n\n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n\n    return solutions[betty]\n\nans = solution()"
    ],
    "32f99dc7770c48f891cc519a0e993603": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The congruences can be written as:\n    # n ≡ 1 (mod 3), n ≡ 3 (mod 5), n ≡ 5 (mod 7).\n    congruences = [(1, 3), (3, 5), (5, 7)]\n    \n    n, _ = solve_congruence(*congruences)\n\n    # Since we want the number between 100 and 200, we add multiples of lcm(3,5,7)\n    # until the number is within the desired range.\n    lcm_value = 3*5*7 # Least Common Multiple of 3, 5, and 7\n    \n    while n <= 100:\n        n += lcm_value\n\n    # Ensure that the number does not surpass 200\n    if n > 200:\n        return None\n\n    return n\n\nans = solution()"
    ],
    "d3a62f3a2a154a3d9ba934079c4f679d": [
        "def solution():\n    # Convert all measurements to centimeters\n    section1 = 30  # already in cm\n    section2 = 1.5 * 100  # convert meters to cm\n    section3 = 150 / 10  # convert mm to cm\n\n    # Sum the widths of all sections\n    total_width_cm = section1 + section2 + section3\n\n    return total_width_cm\n\nans = solution()"
    ],
    "58b2b0f298394a909fc6d284a735e599": [
        "def solution():\n    melanie_age = 8\n    uncle_future_age = 38\n    age_difference = uncle_future_age - melanie_age\n    uncle_current_age = melanie_age + age_difference\n    return uncle_current_age\n\nans = solution()"
    ],
    "72bf22ed00544452be7c9b7e3e3c9ea5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let y be Hazel's age three years from now\n    # Let j be Jessica's current age\n    y, j = symbols('y j')\n\n    # Jessica is 3 years younger than Hazel\n    equation1 = Eq(j, y - 3)\n\n    # Their total age next year will be (Hazel's age next year) + (Jessica's age next year)\n    # Hazel's age next year = (y - 3) + 1 (since it's 3 years from now and we're interested in next year)\n    # Jessica's age next year = (j + 1)\n    total_age_next_year = (y - 3 + 1) + (j + 1)\n\n    # Solve for Jessica's current age\n    j_age = solve(equation1, j)[0]\n\n    # Substitute Jessica's current age back into the total age equation\n    total_age_next_year = total_age_next_year.subs(j, j_age)\n\n    return total_age_next_year\n\nans = solution()"
    ],
    "2927ab094a1741819a4e2a25ebabc6e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    total_animals, goats = symbols('total_animals goats')\n\n    # Express the initial number of cows in terms of total animals\n    initial_cows = 0.65 * total_animals\n\n    # Equation 1: Initial number of goats\n    equation1 = Eq(total_animals - initial_cows, goats)\n\n    # Equation 2: After 240 animals are added, cows increased by 20%, goats doubled\n    cows_new_percentage = 0.65 + 0.20\n    equation2 = Eq(cows_new_percentage * (total_animals + 240), initial_cows + 240)\n\n    # Solve the equations to get the number of goats and total animals\n    solutions = solve((equation1, equation2), (total_animals, goats))\n\n    return solutions[goats]\n\nans = solution()"
    ],
    "93d27a37cf174f6c9e8a2ff60b9bbf22": [
        "def solution():\n    pence = 15\n    pounds_to_pence = 3.00 * 100\n    percentage = (pence / pounds_to_pence) * 100\n    return percentage\n\nans = solution()"
    ],
    "4e0dc5edbf7d4e40b8ac2e3de13c21a2": [
        "def solution():\n    students_facing_teacher = 50\n    for n in range(1, 51):\n        # A student will turn backwards if the number is a multiple of 4 or 6.\n        # If a student has already turned on multiples of 4, then turned again on multiples of 6,\n        # they will be facing the teacher again. So we need to account for the LCM of 4 and 6 (which is 12),\n        # to not double-count the students who will ultimately be facing backwards.\n        if n % 4 == 0 or n % 6 == 0:\n            students_facing_teacher -= 1\n        if n % 12 == 0:\n            students_facing_teacher += 1\n    \n    return students_facing_teacher\n\nans = solution()"
    ],
    "baeaa1b74d3542bbabb148cbdd2cc14c": [
        "def solution():\n    degree = 5\n    x_degree = 3\n    n = (degree - x_degree) / 2\n    return n\n\nans = solution()"
    ],
    "8aad4836c0734930b7d215cbb6b09d6c": [
        "def solution():\n    ans = 18 + 3 - 8 + 17\n    return ans\n\nans = solution()"
    ],
    "2f1be30621994420880174e39997c979": [
        "from fractions import Fraction\n\ndef solution():\n    result = Fraction(19, 8) + Fraction(81, 12) + Fraction(30, 16)\n    return result\n\nans = solution()"
    ],
    "1b593b3bdeb34c18b0cff4c24a506258": [
        "def solution():\n    amy_age_now = 15\n    sister_age_future = amy_age_now - 5\n    sister_age_now = sister_age_future - 3\n    return sister_age_now\n\nans = solution()"
    ],
    "9c12fef929b2434bab748c05a0ff93fd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let c be the initial number of cows and g be the initial number of goats\n    c, g = symbols('c g')\n    \n    # 65% of the animals were cows, so the total number of animals is c + g\n    # This gives us the equation: 0.65 * (c + g) = c\n    \n    # After 240 more animals are added, the percentages change\n    # Now 85% (65% + 20%) of the new total (c + g + 240) are cows and the number of goats has doubled (2*g)\n    # This gives us the equation: 0.85 * (c + g + 240) = c + 240, and the new goat count = 2*g\n\n    # We now have two equations:\n    equation1 = Eq(0.65 * (c + g), c)\n    equation2 = Eq(c + 240, 0.85 * (c + g + 240))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (c, g))\n\n    return solutions[g]\n\nans = solution()"
    ],
    "d853853301cf40d6a725ec4ab3774957": [
        "def solution():\n    ans = 0\n    for i in range(1, 20):\n        for j in range(i+1, 21):\n            ans += i/j\n    return ans\n\nans = solution()"
    ],
    "eef4ade5677a43a4ae0df6aeeb38fe6e": [
        "def solution():\n    # Since there are 13 different ranks (number or letter) and 4 suits, \n    # drawing one card from each rank will result in 13 cards of different ranks.\n    # To ensure that we have at least one pair of the same rank, we need to add one more card.\n    cards_needed = 13 + 1\n    return cards_needed\n\nans = solution()"
    ],
    "01b407a825884d83acf6b91beaf5d407": [
        "def solution():\n    # We will start by finding the smallest possible number using some constraints.\n    # Since we want the smallest number, we will start by setting the hundreds\n    # digit as small as possible, which is 1 (since it's a 3-digit number).\n    for hundreds_digit in range(1, 10):\n        for tens_digit in range(0, 10):\n            for ones_digit in range(0, 10, 2): # It must be even, so the last digit steps by 2.\n                if hundreds_digit + tens_digit + ones_digit == 21:\n                    return hundreds_digit * 100 + tens_digit * 10 + ones_digit\n\nans = solution()"
    ],
    "25040bd355be4585bf5a273889285a78": [
        "def solution():\n    fraction_of_sum = 3/5\n    part_of_sum = 18\n\n    whole_sum = part_of_sum / fraction_of_sum\n\n    return whole_sum\n\nans = solution()"
    ],
    "f58db1d3f54446688138665d57db026d": [
        "def solution():\n    return 423 * 72\n\nans = solution()"
    ],
    "52a86fa066cb48858c6bc524eece5782": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * x + 5, 20)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "44f2ee1889614bbfb19535bdd92da120": [
        "def solution():\n    for number in range(10, 100):\n        if number % 3 == 0 and number % 7 == 0:\n            return number\n    \nans = solution()"
    ],
    "017473f68ce348d49eb42bb8dbb458a6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the quantity of cacti and sunflowers\n    cacti, sunflowers = symbols('cacti sunflowers')\n    \n    # Equation for the total cost spent on cacti and sunflowers\n    total_cost_eq = Eq(cacti * 2 + sunflowers * 7, 156)\n    # Equation for the relationship between the number of cacti and sunflowers\n    difference_eq = Eq(cacti, sunflowers + 6)\n    \n    # Solving the system of equations\n    solutions = solve((total_cost_eq, difference_eq), (cacti, sunflowers))\n    \n    # Return the number of cacti\n    return solutions[cacti]\n\nans = solution()"
    ],
    "3502c215c1be4b7fb69703f1b13e625d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book_price = symbols('book_price')  # Price of one book\n\n    # Sarah's total cost\n    sarah_total = 8 * book_price + 3 * 0.4\n    # Rebecca's total cost\n    rebecca_total = 3 * book_price + 8 * 0.4\n\n    # Sarah paid 1.00 more than Rebecca\n    equation = Eq(sarah_total, rebecca_total + 1)\n\n    # Solving for the price of a book\n    book_price_solution = solve(equation, book_price)\n\n    return book_price_solution[0]\n\nans = solution()"
    ],
    "5fa3410a0ede4f5c874b9848f3d5326f": [
        "def solution():\n    even_squares_sum = sum(x**2 for x in range(2, 21, 2))\n    odd_squares_sum = sum(x**2 for x in range(1, 20, 2))\n    ans = even_squares_sum - odd_squares_sum\n    return ans\n\nans = solution()"
    ],
    "d7bced643fdd4eb6bdc74acb29830ef9": [
        "def solution():\n    total_water = 17\n    poured_water = 2 * 6\n    remaining_water = total_water - poured_water\n    return remaining_water\n\nans = solution()"
    ],
    "4fed3bbe2a4c479fb032cdfa43d46b2d": [
        "def solution():\n    return 12.5 * 32\n\nans = solution()"
    ],
    "72bb560fb6bc4884bb7499eb0d199c5c": [
        "def solution():\n    andrew_points = 20\n    jack_extra_points = 18\n\n    jack_points = andrew_points + jack_extra_points\n\n    return jack_points\n\nans = solution()"
    ],
    "0be151f2fbc745f7a608fa9e0444c3fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    L_initial, M_initial = symbols('L_initial M_initial')\n\n    # Equations based on the problem statement\n    equation1 = Eq(L_initial - M_initial, 1000)  # L_initial is 1000 more than M_initial\n    equation2 = Eq(M_initial + 4836, 3 * (L_initial + 472))  # After adding, M_initial is 3 times L_initial\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (L_initial, M_initial))\n\n    return solutions[L_initial]\n\nans = solution()"
    ],
    "da5a959c72974b06be19c4288fbc217c": [
        "from math import comb\n\ndef solution():\n    return comb(12, 6)\n\nans = solution()"
    ],
    "c5410d85775f48bd93e84ab31405739b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the cost of one book in pence\n    x = symbols('x')\n\n    # Sarah's total cost in pence: 8 books * x + 3 pencils * 40p\n    sarah_cost = 8 * x + 3 * 40\n    # Rebecca's total cost in pence: 3 books * x + 8 pencils * 40p\n    rebecca_cost = 3 * x + 8 * 40\n\n    # Equation stating that Sarah paid £1.00 more than Rebecca\n    # Convert £1.00 to pence, hence 100p\n    equation = Eq(sarah_cost, rebecca_cost + 100)\n\n    # Solve for x, the cost of one book in pence\n    solution = solve(equation, x)\n\n    # Convert the cost of one book to pounds by dividing by 100\n    book_cost = solution[x] / 100\n\n    return book_cost\n\nans = solution()"
    ],
    "859405caaa7e4a0b9fa498591ea6d75b": [
        "def solution():\n    return 4867 + 285\n\nans = solution()"
    ],
    "15cab5ac2a464bd49b38abf530497521": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(7*x + 3*(x+5), 45)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "c23d5f0deb8a4bc7a5a92b52a64b5653": [
        "def solution():\n    remaining_after_mike = 3 + 2\n    remaining_after_nini = remaining_after_mike * 2\n    remaining_after_bob = remaining_after_nini * 2\n    original_amount = remaining_after_bob * 2\n    return original_amount\n\nans = solution()"
    ],
    "8cecf1b760794f42ac5164ddf2ddd1b9": [
        "def solution():\n    number = \"\"\n    i = 1\n    while len(number) < 2023:\n        number += str(i)\n        i += 1\n    return int(number[2022])\n\nans = solution()"
    ],
    "d564d279579b4412beee324ea716c5ac": [
        "def solution():\n    first_number = 178\n    second_number = first_number - 69\n    total_sum = 450\n\n    third_number = total_sum - (first_number + second_number)\n    \n    return third_number\n\nans = solution()"
    ],
    "6e612604c8ff4d42b99013c98deabfdd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of students in Class A and Class B\n    students_A, students_B, peaches = symbols('students_A students_B peaches')\n\n    # Given equations based on the problem\n    equation1 = Eq(peaches, 5 * students_A + 10) # All peaches to Class A with 10 left\n    equation2 = Eq(peaches, 8 * students_B - 2)  # All peaches to Class B with 2 needed\n    equation3 = Eq(students_A, students_B + 3)   # Class A has 3 more students than Class B\n\n    # Solve the system of equations to find the number of peaches\n    solutions = solve((equation1, equation2, equation3), (students_A, students_B, peaches))\n\n    return solutions[peaches]\n\nans = solution()"
    ],
    "68189bcaa99d4e9f9c3e3ce95e7937fd": [
        "from itertools import permutations\n\ndef solution():\n    digits = '4625'\n    all_permutations = [''.join(p) for p in permutations(digits)]\n    odd_numbers = [int(p) for p in all_permutations if int(p) % 2 != 0]\n    return min(odd_numbers)\n\nans = solution()"
    ],
    "76be802a2529408ebd6445587693be90": [
        "def solution():\n    ans = 9.95 - 2.6 - 3.42\n    return ans\n\nans = solution()"
    ],
    "1d72b15c9167478a811748cdd734865e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the initial number of Liverpool fans as L and Manchester United fans as M.\n    L, M = symbols('L M')\n\n    # Initial condition given in the problem.\n    initial_condition = Eq(L, M + 1000)\n\n    # After 30 minutes, the number of fans changed.\n    after_condition = Eq(M + 4836, 3 * (L + 472))\n\n    # Solve the equations.\n    solutions = solve((initial_condition, after_condition), (L, M))\n\n    return solutions[L]\n\nans = solution()"
    ],
    "50cd7efd01b841d298218aea08ed2f91": [
        "def solution():\n    birth_year = 98\n    current_year = 01\n    age_at_31_12_98 = 11 - 1  # Subtract 1 because turning 11 on the next day\n    age_difference = current_year - birth_year\n    \n    ans = age_at_31_12_98 + age_difference\n    return ans\n\nans = solution()"
    ],
    "81a3546d49f540918fa6687b12bf0b34": [
        "def solution():\n    students = 40\n    boat_capacity = 6\n    trips = students // boat_capacity\n    if students % boat_capacity != 0:\n        trips += 1\n    return trips\n\nans = solution()"
    ],
    "c1de6601e4b04d30ad771a324ae51e3c": [
        "def solution():\n    first_term = 2\n    difference = 2\n    nth_term = 36\n\n    # Using the arithmetic sequence nth term formula\n    n = (nth_term - first_term) / difference + 1\n\n    return int(n)\n\nans = solution()"
    ],
    "085c8151173f4b7d90be8a69b00d7f5d": [
        "def solution():\n    from sympy import isprime\n\n    count = 0\n    for tens_digit in [2, 3, 5, 7]:\n        for ones_digit in [2, 3, 5, 7]:\n            N = tens_digit * 10 + ones_digit\n            if isprime(N):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e2695aa79cb340d99906881fc1d6a0c6": [
        "def solution():\n    initial_catch = 8\n    run_away = 5\n    library_catch = 9\n\n    final_catch = initial_catch - run_away + library_catch\n\n    return final_catch\n\nans = solution()"
    ],
    "0cddcd3bc30743f58a6fa95ed48ba314": [
        "def solution():\n    # Let x be the number of game cards Eric has\n    # Joe has 7x game cards\n    # When Joe gives some cards to Eric, he gives away y cards\n    # Then Joe has 7x - y cards and Eric has x + y cards\n    # Both should have 168 cards after the exchange\n    # So we get the system of equations:\n    # 7x - y = 168\n    # x + y = 168\n    # Adding the two equations, we get:\n    # 8x = 336\n    # Thus, x = 336 / 8\n    x = 336 / 8\n    # Now we need to find y\n    # y = 168 - x (since Eric will have 168 cards after getting y cards)\n    y = 168 - x\n    return y\n\nans = solution()"
    ],
    "b2064a45faa94ab689a5ee8b42de5b1c": [
        "def solution():\n    for n in range(1, 50):  # Reasonable upper bound for number of people\n        if (19 - 6) % n == n / 2:  # If the difference when wrapped around the circle is half the number of people\n            return n\n\nans = solution()"
    ],
    "f0328bec52924f7ea69d1ae80d116453": [
        "def solution():\n    time_per_picture = 10  # it takes 10 minutes to paint one picture\n    total_time = 80  # one hour and twenty minutes is 80 minutes\n\n    num_pictures = total_time / time_per_picture\n\n    return num_pictures\n\nans = solution()"
    ],
    "6520b25ec5ca47c28184d097d5c1d50f": [
        "def solution():\n    from math import factorial\n    num_students = 5\n    num_ways = factorial(num_students)\n    return num_ways\n\nans = solution()"
    ],
    "7b92cabf616c4f65bb3f245acc3311d5": [
        "def solution():\n    count = 0\n    # Since the groups must have a different number of apples and the total is 10,\n    # we only need to consider giving 1 to 9 apples to the first group,\n    # and the second group will get the remaining apples.\n    for apples_in_first_group in range(1, 10):\n        apples_in_second_group = 10 - apples_in_first_group\n        if apples_in_first_group != apples_in_second_group:\n            count += 1\n    # We divide the count by 2 because splitting into (A,B) and (B,A) is considered the same split.\n    return count // 2\n\nans = solution()"
    ],
    "6a68efce3a3843c488c04405fe0ad806": [
        "def solution():\n    return 14 - 5\n\nans = solution()"
    ],
    "4464e412391748539179d461f02021f4": [
        "def solution():\n    total_pears = 38\n    \n    # Let's denote the number of pears Anne has as 'a' and Charlie as 'c'.\n    # According to the problem, a - 6 = c + 6 (after Anne gives Charlie 6 pears)\n    # Also, a + c = 38 (total number of pears they have)\n    # So, we can solve these equations to find the value of 'a' and 'c'.\n    \n    # a - c = 12 (from the first equation after simplifying)\n    # Adding both equations we get 2a = 38 + 12\n    a = (total_pears + 12) // 2\n\n    return a\n\nans = solution()"
    ],
    "899b1a4b796c49099d270e74392468e4": [
        "def solution():\n    from math import factorial\n    \n    number = factorial(29)\n    \n    count_zeroes = 0\n    while number % 10 == 0:\n        count_zeroes += 1\n        number //= 10\n        \n    return count_zeroes\n\nans = solution()"
    ],
    "5f4b4e56afb34cf5a1144d2bc36161da": [
        "def solution():\n    sachin_rate = 1 / 3  # Sachin's rate of work (flat/hour)\n    peter_rate = 1 / 6   # Peter's rate of work (flat/hour)\n    combined_rate = sachin_rate + peter_rate  # Combined rate of work (flat/hour)\n\n    time_to_clean_together = 1 / combined_rate  # Time it takes to clean together (hours)\n\n    return time_to_clean_together\n\nans = solution()"
    ],
    "cc9705da6c674505ab7de37d248f4508": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    isaac, joseph = symbols('isaac joseph')\n    \n    # Initial condition: Isaac had 5 times as many stamps as Joseph\n    initial_condition = Eq(isaac, 5 * joseph)\n    # After receiving stamps, Joseph has 9/10 as many stamps as Isaac\n    after_condition = Eq(joseph + 154, (9/10) * isaac)\n    \n    # Solve the equations\n    solutions = solve((initial_condition, after_condition), (isaac, joseph))\n    \n    return solutions[isaac]\n\nans = solution()"
    ],
    "292666d407aa47a1b8822e94b934f869": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbolic variables for each digit\n    a, b, c, d = symbols('a b c d')\n\n    # Create the equation based on the problem statement\n    equation = Eq(a*1000 + b*100 + c*10 + d + a*100 + b*10 + c + a*10 + b + a, 1370)\n\n    # Solve the equation for the variables\n    solutions = solve(equation, (a, b, c, d))\n\n    # Extract the value of a, b, c, and d\n    a_value = solutions[a]\n    b_value = solutions[b]\n    c_value = solutions[c]\n    d_value = solutions[d]\n\n    # Calculate the value of abcd\n    abcd = a_value * 1000 + b_value * 100 + c_value * 10 + d_value\n\n    return abcd\n\nans = solution()"
    ],
    "d98f7fbf1401483cbb8a9febb9b267a5": [
        "def solution():\n    # Convert the base 8 number to base 10\n    N = int('12345654321', 8)\n\n    # Calculate the remainders for division by 7 and by 9\n    remainder_7 = N % 7\n    remainder_9 = N % 9\n\n    # Sum of the remainders\n    sum_remainders = remainder_7 + remainder_9\n\n    return sum_remainders\n\nans = solution()"
    ],
    "1bb4ac60011c4f049e418cf89d7b6aca": [
        "def solution():\n    # Speed ratio of Linda to Ted is 3:4.\n    # When Linda has jogged 1200m, Ted has jogged at a distance relative to Linda's speed.\n    # Let's say the total distance of the path is d.\n    # Distance covered by Linda when they meet is 1200m.\n    # Since their speed ratio is 3:4, Ted covers 4/3 of the distance Linda covers.\n    # So, distance covered by Ted is (4/3) * 1200.\n    # The sum of distances covered by Linda and Ted when they meet is equal to total distance d.\n    \n    linda_distance = 1200\n    ted_distance = (4/3) * linda_distance\n    total_distance = linda_distance + ted_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "13bdfa0cc0bf4ec8b5035a9b4a3cba96": [
        "def solution():\n    count = 0\n    for year in range(2018, 2109):\n        if sum(map(int, str(year))) == 18:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "f4d8b1a7fd8f46d0a9ef67f2bee482c1": [
        "def solution():\n    for A in range(10):\n        num = int(f\"2018{A}\")\n        if num % 9 == 0:\n            return num % 8\n\nans = solution()"
    ],
    "7634476c9aa54ec59121ed35be37a90a": [
        "def solution():\n    ryan_front = 5\n    elvis_behind = 7\n    # Plus 1 squirrel between Ryan and Elvis, plus Ryan and Elvis themselves\n    total_squirrels = ryan_front + elvis_behind + 1 + 2 \n\n    return total_squirrels\n\nans = solution()"
    ],
    "3372b3b3a25d471db3a7b9b84e20d407": [
        "def solution():\n    numerator = 2019 + 2018 * 2020\n    denominator = 2019 * 2020 - 1\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "de7d03220ef44866b5c5a28b228aa86c": [
        "def solution():\n    workers = 3\n    days = 3\n    # Assuming work done is directly proportional to number of workers times the number of days\n    work_done = workers * days\n    required_days = work_done // 1  # Since we now have 1 worker\n\n    return required_days\n\nans = solution()"
    ],
    "be80ef03c92f4f92945f77d21a554dbf": [
        "def solution():\n    from math import factorial\n    \n    def D(n):\n        \"\"\"\n        Calculates the number of derangements (permutations where no element\n        appears in its original position) for n items using the formula:\n        D(n) = (n - 1) * (D(n - 1) + D(n - 2))\n        With base cases D(0) = 1 and D(1) = 0.\n        \"\"\"\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (D(n - 1) + D(n - 2))\n    \n    # Number of derangements for 6 students\n    ans = D(6)\n    \n    return ans\n\nans = solution()"
    ],
    "ccda4529057344dfb3239b232b55def3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x + 3*x + 2, 38 + 5*x - 8*x)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "260e6647f054406db07646bdfcd45cc2": [
        "def solution():\n    principal = 3600\n    interest_rate = 0.02\n    \n    interest = principal * interest_rate\n    \n    return interest\n\nans = solution()"
    ],
    "c76e6054330d410d8964478169646a8e": [
        "def solution():\n    return 64 * 25 / 100\n\nans = solution()"
    ],
    "f5dda3a779a843e88e20668719067b5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((3 * x + 3) / 6, (5 * x - 2) / 8)\n    solution = solve(equation, x)\n\n    return solution[x]\n\nans = solution()"
    ],
    "c41136a149b7455588eedcd3638a6d6e": [
        "def solution():\n    sum_odds = sum(number for number in range(1, 20, 2))\n    return sum_odds\n\nans = solution()"
    ],
    "4127bb2d659e42e7b67a826610a830ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x and y be the number of pupils in School P and Q respectively at first.\n    x, y = symbols('x y')\n\n    # According to the question, we have two equations based on the ratios given.\n    # Equation 1: The ratio of the pupils in School P and the pupils in School Q is 2:3.\n    equation1 = Eq(x / y, 2 / 3)\n\n    # Equation 2: After admitting 240 pupils each, the ratio of the pupils in School P to School Q is 3:4.\n    equation2 = Eq((x + 240) / (y + 240), 3 / 4)\n\n    # Solving the system of equations to find the values of x and y.\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "15a6e721c67f4f68bcb7869cb424dc30": [
        "def solution():\n    # Let x be the number of game cards Eric has.\n    # Joe has 7 times as many game cards as Eric, so Joe has 7 * x game cards.\n    # After giving away some cards, Joe must have 168 cards and so must Eric.\n    # So, 7 * x - (7 * x - 168) = 168\n    # Solve this equation for x.\n    eric_cards = 168\n    joe_cards = 168 * 7\n    cards_to_give = joe_cards - 168\n    \n    return cards_to_give\n\nans = solution()"
    ],
    "ba12d160c6704062bce29f06d2df0413": [
        "from sympy import isprime\n\ndef solution():\n    count = 0\n    for tens in [2, 3, 5, 7]:\n        for ones in [2, 3, 5, 7]:\n            N = tens * 10 + ones\n            if isprime(N):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "ad7c476fa787456a984de908cbf3274a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kenny, timmy, ron = symbols('kenny timmy ron')\n\n    equation1 = Eq(timmy, kenny - 12)\n    equation2 = Eq(ron, kenny + 20)\n    equation3 = Eq(kenny + timmy + ron, 284)\n\n    solutions = solve((equation1, equation2, equation3), (kenny, timmy, ron))\n\n    return solutions[ron]\n\nans = solution()"
    ],
    "d1ef65d2af0d48fca0d26f7460c255c2": [
        "def solution():\n    initial_money = 100  # Assume she starts with 100% of her money\n    money_spent_on_bag = 70  # She spends 70% on a bag\n    remaining_money = initial_money - money_spent_on_bag  # Calculate the remaining money percentage\n    money_spent_on_purse = (3/8) * remaining_money  # Spend 3/8 of the remainder on a purse\n    percentage_spent_on_purse = (money_spent_on_purse / initial_money) * 100  # Convert to percentage of her total money\n    \n    return percentage_spent_on_purse\n\nans = solution()"
    ],
    "f045ccc90cd4400c86e6a51f2a370f28": [
        "def solution():\n    ans = 86.3 + 7\n    return ans\n\nans = solution()"
    ],
    "cda98aa296634bf2a385a6527a02e9c2": [
        "def solution():\n    initial_students = 5\n    candies_each = 12\n    new_students = initial_students + 1\n    total_candies = initial_students * candies_each\n\n    new_candies_each = total_candies // new_students\n\n    return new_candies_each\n\nans = solution()"
    ],
    "e6126aee30d340e584a91ebb8121b3b4": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    word = 'EDUCATION'\n    vowels = 'AEIOU'\n    num_vowels = len([letter for letter in word if letter in vowels])\n    num_consonants = len(word) - num_vowels\n\n    # Total permutations of the word\n    total_permutations = factorial(len(word))\n\n    # Permutations of the vowels\n    vowel_permutations = factorial(num_vowels)\n\n    # Permutations of the vowels being together (as a single block)\n    permutations_with_vowels_together = vowel_permutations * factorial(num_consonants + 1)  # +1 for the block of vowels\n\n    # Subtracting the number of permutations where vowels are together from the total permutations\n    ans = total_permutations - permutations_with_vowels_together\n\n    return ans\n\nans = solution()"
    ],
    "d68ae3a33d98427494ecd3ac34702711": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(0.30 * x + 0.70 * (20 - x), 20 * 0.54)\n    ans = solve(equation, x)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "a5723a387628481d828499d1c34bdcfc": [
        "def solution():\n    # Number of sweets Sharon can initially buy\n    sweets = 11\n    # Number of wrappers currently available\n    wrappers = 11\n    \n    while wrappers >= 3:\n        # Exchange wrappers for sweets\n        additional_sweets = wrappers // 3\n        sweets += additional_sweets\n        # Updated number of wrappers: wrappers left after exchange + new wrappers from additional sweets\n        wrappers = wrappers % 3 + additional_sweets\n    \n    return sweets\n\nans = solution()"
    ],
    "60143fac73a641d4afc2cffe6b15a9e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    two_tailed, three_tailed, six_tailed, eight_tailed = symbols('two_tailed three_tailed six_tailed eight_tailed')\n    \n    # setting up equations based on the given question\n    eq1 = Eq(two_tailed, 5 + 2 * eight_tailed)\n    eq2 = Eq(three_tailed, 2 + 1/2 * six_tailed)\n    \n    # total heads and tails\n    heads = two_tailed + three_tailed + six_tailed + 2 * eight_tailed\n    tails = 2 * two_tailed + 3 * three_tailed + 6 * six_tailed + 8 * eight_tailed\n    \n    # total number of tails is 2 less than four times as many as the total number of their heads\n    eq3 = Eq(tails, 4 * heads - 2)\n    \n    # the difference between the total number of their heads and their tails is 241\n    eq4 = Eq(tails - heads, 241)\n    \n    # solve the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4), (two_tailed, three_tailed, six_tailed, eight_tailed))\n    \n    # return the number of three-tailed birds\n    return solutions[three_tailed]\n\nans = solution()"
    ],
    "cf273ad7cc974df890c0f43328a5de3e": [
        "def solution():\n    # Start checking from the smallest two-digit number, i.e., 10\n    num = 10\n    \n    # Loop through numbers to find the smallest number satisfying the condition\n    while True:\n        if num % 5 == 4 and num % 7 == 4:\n            return num\n        # Check the next number\n        num += 1\n\nans = solution()"
    ],
    "34e244879a6646619b79a8414c6a5f70": [
        "def solution():\n    total_weight_kg = 5\n    weight_per_bag_kg = 250 / 1000  # Convert grams to kilograms\n    cost_price_pounds = 10\n    selling_price_per_bag_pounds = 0.65  # Convert pence to pounds\n\n    total_bags = total_weight_kg / weight_per_bag_kg\n    total_revenue_pounds = total_bags * selling_price_per_bag_pounds\n    profit = total_revenue_pounds - cost_price_pounds\n    percentage_profit = (profit / cost_price_pounds) * 100\n    \n    return percentage_profit\n\nans = solution()"
    ],
    "1d9d7ae4443a4d1a8f150b0ff35e0812": [
        "def solution():\n    # Given that triangle ABC has angle BAC of 50 degrees\n    angle_BAC = 50\n    \n    # The sum of angles in any triangle is 180 degrees\n    sum_triangle_angles = 180\n    \n    # Using the fact that BP bisects angle ABC and CP bisects angle ACB,\n    # let's denote half the angles at B and C as x and y respectively.\n    # Hence, angle ABC = 2x and angle ACB = 2y.\n    # The sum of the angles in the triangle ABC is:\n    # 50 + 2x + 2y = 180\n    # Simplify the equation: 2x + 2y = 130\n    \n    # The angle BPC is the exterior angle for triangle PBC, which is equal to the sum\n    # of the opposite interior angles (which are half of angle ABC and half of angle ACB),\n    # hence angle BPC = x + y\n    \n    # Now we know that the sum of angles in a triangle is 180 degrees, and angle BPC\n    # is an exterior angle to triangle PBC. The exterior angle is equal to the sum of the\n    # two opposite interior angles. Therefore:\n    angle_BPC = 0.5 * (sum_triangle_angles - angle_BAC)\n    \n    return angle_BPC\n\nans = solution()"
    ],
    "44bd36d5b38b44949074bb84feb11ca3": [
        "def solution():\n    arrival_hour = 11\n    arrival_minutes = 40\n    stay_hours = 4\n    stay_minutes = 50\n\n    # Calculate total minutes after stay\n    total_minutes_after_stay = (arrival_hour * 60 + arrival_minutes) + (stay_hours * 60 + stay_minutes)\n\n    # Convert total minutes back to hours and minutes\n    leave_hour = total_minutes_after_stay // 60\n    leave_minutes = total_minutes_after_stay % 60\n\n    # Adjust for 24-hour format if needed\n    if leave_hour >= 24:\n        leave_hour -= 24\n\n    # Adjust for next day if needed\n    if leave_hour < arrival_hour:\n        leave_hour += 12\n\n    return f\"{leave_hour}:{str(leave_minutes).zfill(2)}\"\n\nans = solution()"
    ],
    "c8bc4498b3bb47adb5838b21d3e0bd8b": [
        "def solution():\n    return sum(range(1, 11))\n\nans = solution()"
    ],
    "c756926469794615a094702ab4e29ea3": [
        "def solution():\n    return 421 * 11\n\nans = solution()"
    ],
    "4683962764924f4684ed92eb7591a368": [
        "def solution():\n    # Number of ways linking Ayton to Beeton to Ceeton to Deeton\n    way1 = 4 * 5 * 6\n    # Number of ways linking Ayton directly to Deeton\n    way2 = 3\n    \n    # Applying the Law of Addition for independent events\n    num_ways = way1 + way2\n    \n    return num_ways\n\nans = solution()"
    ],
    "1eb4f3669f2a43a5ba508ec8beae550e": [
        "def solution():\n    ans = (20 * 3) / 15\n    return ans\n\nans = solution()"
    ],
    "37136a98a87e4ccc8a809b51309fdb50": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n    common_difference = (fifteenth_term - tenth_term) // (15 - 10)\n    twelfth_term = tenth_term + (12 - 10) * common_difference\n\n    return twelfth_term\n\nans = solution()"
    ],
    "29a1fb0ba439450d99b96fff93b44d3a": [
        "def solution():\n    numbers = [1003.67, 108.98, 9.08, 102.33, 32.02, -3.08]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "4241ca142c384e5db8c27de3f5d5df25": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the amount of money Joe had originally\n    joe_initial = symbols('joe_initial')\n\n    # Equation based on the problem statement\n    equation = Eq(joe_initial - 2.50 + (3.75 - 2.50), 5)\n\n    # Solving the equation\n    solutions = solve(equation, joe_initial)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "0a0f38ce5c7546d5abe2f8fcc81598f0": [
        "def solution():\n    # Calculate total number of trees planted in the first 3 days\n    first_part = 135 * 3\n    # Calculate total number of trees planted in the last 5 days\n    second_part = 151 * 5\n    # Calculate the total trees planted over the 8 days\n    total_trees = first_part + second_part\n    # Calculate the average number of trees planted per day\n    average_trees = total_trees / 8\n    \n    return average_trees\n\nans = solution()"
    ],
    "72e107fe7fc142fd8ecabcbd205ebd7a": [
        "def solution():\n    return 876 * 3\n\nans = solution()"
    ],
    "5faf0bb3bd074227a53f6f2ca2666324": [
        "def solution():\n    # Count multiples of (2*3), (2*4) and (3*4)\n    # Exclude multiples of (2*3*4) because they will be underlined thrice\n    count_2_and_3 = 2016 // (2 * 3)\n    count_2_and_4 = 2016 // (2 * 4)\n    count_3_and_4 = 2016 // (3 * 4)\n    count_2_and_3_and_4 = 2016 // (2 * 3 * 4)\n\n    # The final count will be the sum of the counts for each pair minus the count of numbers underlined thrice\n    count = (count_2_and_3 + count_2_and_4 + count_3_and_4 - (2 * count_2_and_3_and_4))\n\n    return count\n\nans = solution()"
    ],
    "bb982f52c6d041079ae774e83f7e8a99": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n    first_number = 149 + magic_number\n    second_number = 21 + magic_number\n\n    equation = Eq(first_number, 5 * second_number)\n\n    solved_magic_number = solve(equation, magic_number)\n\n    return solved_magic_number[0]\n\nans = solution()"
    ],
    "66db5c6e664741e08931a2b39f1d7db8": [
        "def solution():\n    count = 0\n    for hundred in range(1, 10):  # 3-digit number's hundred's place goes from 1 to 9\n        for ten in range(0, 10):  # 3-digit number's ten's place goes from 0 to 9\n            for one in range(0, 10, 2):  # 3-digit number's one's place must be even, so it goes from 0 to 8 stepping by 2\n                if hundred + ten + one == 7:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "06968ea362d247569a9767c8f284e0e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n    equation = Eq(202 + magic_number, 6 * (22 + magic_number))\n\n    magic_number_solution = solve(equation, magic_number)\n\n    return magic_number_solution[0]\n\nans = solution()"
    ],
    "fcc29a22bd5b45e4abf794b10c54e303": [
        "def solution():\n    return 6.2 - 3.7\n\nans = solution()"
    ],
    "064b4c0781ad453690eeb8941886a949": [
        "from math import comb\n\ndef solution():\n    salads = 15\n    soups = 20\n    vegetables = 12\n    sandwiches = 6\n\n    # Calculating the number of ways to choose 2 options out of the 4 available\n    option_pairs = comb(4, 2)\n\n    # Now for each pair, we multiply the possible choices\n    salad_soup = salads * soups\n    salad_vegetables = salads * vegetables\n    salad_sandwiches = salads * sandwiches\n    soup_vegetables = soups * vegetables\n    soup_sandwiches = soups * sandwiches\n    vegetables_sandwiches = vegetables * sandwiches\n\n    # Summing up all the possible combinations for each pair of options\n    total_combinations = (salad_soup + salad_vegetables + salad_sandwiches +\n                          soup_vegetables + soup_sandwiches + vegetables_sandwiches)\n\n    return total_combinations\n\nans = solution()"
    ],
    "bb7fbef0b6c04ccc86f554baf2f4420e": [
        "def solution():\n    from sympy import isprime\n\n    n = 1\n    while True:\n        # Check if all numbers in the sequence are prime\n        if all(isprime(n + i) for i in [0, 2, 4, 106, 308]):\n            return n\n        n += 1\n\nans = solution()"
    ],
    "6fc14f87857d4b2ab8bc4618b7d72da4": [
        "def solution():\n    total_plasters = 12 * 30\n    plasters_per_day = 20\n    days_last = total_plasters // plasters_per_day\n    return days_last\n\nans = solution()"
    ],
    "caaf98f1ce924c36986670403ceffbf8": [
        "def solution():\n    # Initialize the total number of students as the sum of boys and girls.\n    total_students = 0\n    # Define the difference between the number of boys and girls.\n    difference = 32\n\n    # Start by finding the number of boys and girls assuming\n    # the difference and that the boys make up the outer layer.\n    # Use the pattern that boys and girls form alternative layers and the\n    # size difference between consecutive squares is the perimeter of the inner square.\n    boys = 0\n    girls = 0\n\n    # Boys are outside, and the difference in layers is 32,\n    # so the side of the square should be an odd number.\n    # Start checking from a minimal square size and increase by 2 (to maintain odd side length)\n    # to find a configuration that results in a difference of 32 between boys and girls.\n\n    side_length = 1  # Minimal starting square (1x1) has one boy\n    while True:\n        # Boys occupy the perimeter of the current layer.\n        boys += side_length * 4 - 4 if side_length > 1 else 1\n        side_length += 2\n        # Girls occupy the perimeter of the next inner layer.\n        girls += side_length * 4 - 4\n        # Check if the current configuration satisfies the difference condition.\n        if boys - girls == difference:\n            break\n\n    # The total number of students is the sum of boys and girls.\n    total_students = boys + girls\n\n    return total_students\n\nans = solution()"
    ],
    "4d30cc9b8bd246a78b9505752672ee09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let 's' be the mass of strawberries\n    s = symbols('s')\n    \n    # Set up the equation based on the problem statement\n    equation = Eq(s + 448 - 900, 2 * s)\n    \n    # Solve for 's'\n    mass_of_strawberries = solve(equation, s)[0]\n    \n    return mass_of_strawberries\n\nans = solution()"
    ],
    "5bb673202e8c4412b7bf28637be9a334": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_items = symbols('total_items')\n    # create equations based on the problem statement\n    apples = 2/3 * total_items\n    bananas = 1/9 * total_items\n    lemons = total_items - apples - bananas\n    equation = Eq(apples - lemons, 12)\n\n    # solve the equation\n    solutions = solve(equation, total_items)\n\n    # since the number of items must be an integer, we find the integer solution\n    total_items_solution = next(s for s in solutions if s.is_integer)\n    # calculate the number of lemons using the total number of items\n    num_lemons = total_items_solution - 2/3 * total_items_solution - 1/9 * total_items_solution\n\n    return int(num_lemons)\n\nans = solution()"
    ],
    "598caa8f690845ce82ae845429eed710": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    max_money, anthony_money = symbols('max_money anthony_money')\n\n    # If Max bought the chocolates, the remaining money is max_money - 12,\n    # and the ratio of remaining money is 2:5.\n    equation1 = Eq((max_money - 12) / anthony_money, 2 / 5)\n\n    # If Anthony bought the chocolates, his remaining money is anthony_money - 12,\n    # and the ratio of remaining money is 8:13.\n    equation2 = Eq(max_money / (anthony_money - 12), 8 / 13)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (max_money, anthony_money))\n\n    return solutions[max_money]\n\nans = solution()"
    ],
    "2df9daedfb014f1a9790c3fcebc2c6cc": [
        "from math import factorial\n\ndef solution():\n    # Total pens to distribute\n    total_pens = 20\n    # Total kids\n    total_kids = 6\n    \n    # Since we want each kid to have at least one pen, we distribute one pen to each kid\n    pens_left = total_pens - total_kids\n    \n    # Now the problem becomes equivalent to finding the number of ways to distribute \n    # pens_left pens into total_kids bins which is a problem of combinations with repetitions.\n    \n    # The formula for combinations with repetitions is C(n+r-1, r), where n is the number of items to choose from,\n    # and r is the number to be chosen (the number of bins).\n    # Therefore, we calculate C(pens_left+total_kids-1, pens_left).\n    \n    num_ways = factorial(pens_left + total_kids - 1) // (factorial(pens_left) * factorial(total_kids - 1))\n    \n    return num_ways\n\nans = solution()"
    ],
    "774b551f44f642d4ad38d30236c3d19d": [
        "def solution():\n    cycle = [4, 6, 4, 6] # The last digits of 4^1, 4^2, 4^3, 4^4 repeat in a cycle\n    index = 2022 % 4  # 2022 modulo 4 to find the position in the cycle\n    if index == 0: # If the remainder is 0, we take the last element of the cycle\n        index = -1\n    ans = cycle[index]  # Get the unit digit from the cycle\n    return ans\n\nans = solution()"
    ],
    "5b2783f2b2b94d62984318ff167ab65d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r represent the original number of red stickers and b the original number of blue stickers.\n    # Liz had an equal number of red and blue stickers -> r = b\n    # She gave away 2/3 of her red stickers -> remaining red stickers = r - 2r/3 = r/3\n    # Left with 1/4 of her stickers -> remaining stickers = (r + b)/4\n    # Hence, (r/3 + remaining blue stickers) = (r + b)/4\n\n    # Let x represent the fraction of blue stickers that Liz gave away. Then (1-x)*b represents the remaining blue stickers.\n    r, x = symbols('r x')\n\n    # Create the equation based on the given relations\n    equation = Eq(r / 3 + (1 - x) * r, (2 * r) / 4)\n\n    # Solve for x, which represents the fraction of blue stickers Liz gave away\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3c6d061b54774cefa8ae106251ed9e95": [
        "def solution():\n    first_term = 30\n    last_term = 70\n    difference = 4\n\n    num_days = ((last_term - first_term) / difference) + 1\n\n    total_pages = num_days * (first_term + last_term) / 2\n\n    return int(total_pages)\n\nans = solution()"
    ],
    "934a4d14b18e49949c6ef24167ffb74e": [
        "def solution():\n    # Assuming the piles are named a, b, c, d and a < b < c < d\n    # To minimize the largest pile, we try to distribute the marbles as evenly as possible\n    # Since each pile must be distinct, we start with the smallest possible piles\n    for d in range(16, 0, -1):  # Biggest pile from the full count down to 0\n        remaining_marbles = 16 - d\n        for c in range(1, d):  # Next biggest pile, smaller than the biggest pile\n            remaining_marbles_c = remaining_marbles - c\n            for b in range(1, c):  # Smaller than the next biggest pile, and greater than 0\n                remaining_marbles_b = remaining_marbles_c - b\n                for a in range(1, b):  # Smallest pile, smaller than b and greater than 0\n                    if a + b + c + d == 16:  # All piles added up must be the total number of marbles\n                        return d  # Smallest possible number of marbles in the biggest pile that fits the conditions\n\nans = solution()"
    ],
    "189eefe9efb74acf9b1ba115d8e2b1cc": [
        "def solution():\n    largest_5_digit_number = 99999\n    smallest_6_digit_number = 100000\n    difference = smallest_6_digit_number - largest_5_digit_number\n    return difference\n\nans = solution()"
    ],
    "efedc63bacb049028c7f9d9de27653a3": [
        "def solution():\n    # Define the conversion factors\n    mm_to_m = 1e-3\n    cm_to_m = 1e-2\n    km_to_m = 1e3\n\n    # Convert all lengths to metres\n    lengths_in_metres = [\n        10 * mm_to_m,      # 10 mm to m\n        100 * cm_to_m,     # 100 cm to m\n        10,                # 10 m (already in metres)\n        2 * km_to_m,       # 2 km to m\n        2800 * cm_to_m,    # 2800 cm to m\n        2500,              # 2500 m (already in metres)\n        100 * mm_to_m,     # 100 mm to m\n        100                # 100 m (already in metres)\n    ]\n\n    # Find the smallest length in metres\n    min_length = min(lengths_in_metres)\n\n    return min_length\n\nans = solution()"
    ],
    "875c9cac1ffb4452aabd90fa4729b651": [
        "def solution():\n    swim_only = 20 - 10\n    basketball_only = 25 - 10\n    both = 10\n    neither = 9\n\n    total_students = swim_only + basketball_only + both + neither\n\n    return total_students\n\nans = solution()"
    ],
    "61cfc0ac0f1449fa967d6076176b1137": [
        "def solution():\n    return 324 * 24\n\nans = solution()"
    ],
    "22169485afe346008751bdb1b79de0ac": [
        "def solution():\n    ans = 0\n    for hundreds in [1, 2, 3, 4, 5, 6]:\n        for tens in [1, 2, 3, 4, 5, 6]:\n            if tens != hundreds:\n                for ones in [1, 3, 5]:  # Only odd numbers\n                    if ones != tens and ones != hundreds:\n                        ans += 1\n    return ans\n\nans = solution()"
    ],
    "2a20ffa4a69c4484999bb958ab96dc80": [
        "def solution():\n    steps = 1991\n    while True:\n        steps += 1\n        if str(steps) == str(steps)[::-1]:\n            return steps - 1991\n\nans = solution()"
    ],
    "e8d4c70e0af44824834deba59032af0c": [
        "def solution():\n    # This is an arithmetic sequence with\n    # common difference (d) of 4\n    # Let's calculate the sum of the given terms directly\n    \n    # sequence terms: a1 = 3, a2 = 7, a3 = 11, a4 = 15, a5 = 19\n    \n    # Sum of the arithmetic sequence is given by: S = (n/2)(first term + last term)\n    # where n is the number of terms\n    \n    first_term = 3\n    last_term = 19\n    number_of_terms = 5\n    \n    ans = (number_of_terms / 2) * (first_term + last_term)\n    \n    return ans\n\nans = solution()"
    ],
    "18b56edf99804cd18f944ac9024bf259": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    equation1 = Eq(A, 2/3 * B)\n    equation2 = Eq(B, 4/5 * C)\n    equation3 = Eq(C - A, 21)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "e2f136c1d0e3438fb5a5222737d65150": [
        "def solution():\n    ans = 34.2 + 2.96 + 0.0364\n    return ans\n\nans = solution()"
    ],
    "a51a939a7af045ed9ba206d87ac10cdc": [
        "def solution():\n    count = 0\n    for year in range(2018, 2109):\n        if sum(map(int, str(year))) == 18:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "afe76018408f45b5a643b041061c21be": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "c9fc66837ed74b1eb8a4707c4398b6d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    bookmarks, pupils = symbols('bookmarks pupils')\n    \n    equation1 = Eq(4 * pupils + 8, bookmarks)\n    equation2 = Eq(6 * pupils - 10, bookmarks)\n    \n    solutions = solve((equation1, equation2), (bookmarks, pupils))\n    \n    return solutions[bookmarks]\n\nans = solution()"
    ],
    "b36c82106098479eb7454b8150d50947": [
        "def solution():\n    ans = 608 * 56\n    return ans\n\nans = solution()"
    ],
    "bf559d9d7adc46e5928853ca81300c0d": [
        "def solution():\n    total_animals = 25\n    total_legs = 68\n    for cows in range(total_animals + 1):\n        ducks = total_animals - cows\n        if (cows * 4 + ducks * 2) == total_legs:\n            return ducks\n\nans = solution()"
    ],
    "fe1dad1b4cf74ae287ebf8d0b28bb3b4": [
        "def solution():\n    triangles = 5\n    ans = 1  # starts with the whole plane as one part\n    for i in range(1, triangles + 1):\n        ans += i\n    return ans\n\nans = solution()"
    ],
    "28e62637c4fc4eadb594a6d0da417836": [
        "def solution():\n    ans = 602 // 7\n    return ans\n\nans = solution()"
    ],
    "fc746990a19a47ab9601f133eccf8da2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_children = 11 + 5\n    total_avg_height = 122.5\n    total_height = total_avg_height * total_children\n\n    girls_avg_height = symbols('girls_avg_height')\n    boys_avg_height = girls_avg_height - 3.2\n\n    girls_height = girls_avg_height * 11\n    boys_height = boys_avg_height * 5\n\n    equation = Eq(girls_height + boys_height, total_height)\n\n    solution = solve(equation, girls_avg_height)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ed7781ecfa264cb686cd6671df26577b": [
        "def solution():\n    term_32 = 157\n    term_108 = 537\n    position_32 = 32\n    position_108 = 108\n\n    difference = (term_108 - term_32) / (position_108 - position_32)\n    first_term = term_32 - difference * (position_32 - 1)\n\n    return first_term\n\nans = solution()"
    ],
    "ea4169e9382046cda7491251be10687b": [
        "def solution():\n    total_students = 70\n    average_score = 66\n    girls_average = 70\n    boys_average = 63\n\n    # Let 'g' be the number of girls\n    from sympy import symbols, Eq, solve\n    g = symbols('g')\n\n    # The total number of boys will be 'total_students - g'\n    # Define the equation based on the total score\n    equation = Eq(g * girls_average + (total_students - g) * boys_average, total_students * average_score)\n\n    # Solve the equation for 'g'\n    num_girls = solve(equation, g)\n\n    return num_girls[0]\n\nans = solution()"
    ],
    "1e6694bd51114d55895dbe80e548b123": [
        "def solution():\n    # There are 4 individuals, so after A passes the ball, there are 3 choices\n    # for the next person. Since no person holds the ball for more than one pass,\n    # the second pass also has 3 choices (not returning to A and not the person\n    # who made the previous pass). Finally, the last pass must go to A.\n    # Therefore, we have 3 choices for the first pass and 3 choices for the second pass.\n    # Total number of different methods is 3 * 3 = 9\n    \n    ans = 3 * 3\n    return ans\n\nans = solution()"
    ],
    "c6c7e58ef9c24768a4622a112505b93d": [
        "def solution():\n    cost_per_day = 5\n    days = 5\n    total_cost = cost_per_day * days\n    return total_cost\n\nans = solution()"
    ],
    "398f40d1810d4daf96c3048cfc41ed7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of candies Donna had at first\n    all_candies = symbols('all_candies')\n    \n    # Working backwards from Kate to Donna\n    # Kate had (3/4 * remaining_after_jane) + 42 = remaining_after_jane\n    remaining_after_jane = 42 * 4 / 3\n    \n    # Jane ate (remaining_after_jane / 3) + 4 and gave the rest to Kate\n    # So, remaining_after_jane = (2/3 * remaining_after_donna) - 4\n    remaining_after_donna = (remaining_after_jane + 4) * 3 / 2\n    \n    # Donna kept half of the number of candies plus 3 candies\n    total_candies = (remaining_after_donna - 3) * 2\n    \n    return total_candies\n\nans = solution()"
    ],
    "cafcc058aa184b18aab818d577427a22": [
        "def solution():\n    # The sum of an arithmetic series is given by the formula:\n    # sum = n/2 * (first_term + last_term)\n    # where n is the number of terms\n    # For consecutive odd numbers, the common difference (d) is 2.\n    # Given n = 9 (consecutive odd numbers) and sum = 1503, we need to find the first term.\n    \n    n = 9\n    total_sum = 1503\n    # Using the sum formula: sum = n/2 * (first_term + last_term)\n    # And since they are consecutive odd numbers: (first_term + last_term) = (first_term + (first_term + 2*(n-1)))\n    # Simplify to get the first_term in terms of n and the sum\n    # 2 * sum / n = 2 * first_term + 2*(n-1)\n    # first_term = (2 * sum / n - 2*(n-1)) / 2\n    \n    first_term = (2 * total_sum / n - 2*(n-1)) / 2\n\n    return int(first_term)\n\nans = solution()"
    ],
    "046de3a2a2bc40f1bb251c3bf9fae045": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "cc823defea034e0fbb575cefdc9584df": [
        "def solution():\n    return 342 + 469\n\nans = solution()"
    ],
    "61be272e45f5417780499f0cb4d747d2": [
        "def solution():\n    return (36 * 21) // (6 * 7)\n\nans = solution()"
    ],
    "d0be78861f1d41c8bd8c7de01241ca3a": [
        "def solution():\n    from itertools import permutations\n\n    for perm in permutations(range(10), 2):\n        Q, P = perm\n        # all letters stand for different digits, and Q cannot be 0 as it's a 2-digit number\n        if Q != 0:\n            # As QP is the only 2-digit number and no operation is given, we just return its value\n            return Q * 10 + P\n\nans = solution()"
    ],
    "88aebab1fdb9459da60e672b70e23921": [
        "def solution():\n    # Let x be the number of storybooks Anthea originally has.\n    # According to the problem, after Jason gives 4 books to Anthea, they have the same number.\n    # So we have: (30 - 4) = x + 4\n    # Simplifying: 26 = x + 4\n    # x = 26 - 4\n    x = 26 - 4\n    \n    # The difference between Jason and Anthea's original number of storybooks\n    # is the books Jason gave to Anthea, which is 4\n    # So the number of books Jason had more than Anthea initially: x + 4 - x\n    difference = (x + 4) - x\n    \n    return difference\n\nans = solution()"
    ],
    "8c7bad2823b64ce9bd000eca653f9f98": [
        "def solution():\n    lcm = 4 * 10\n    return lcm\n\nans = solution()"
    ],
    "7e40ac2cb8734521aa2bcc3baf6d6cd1": [
        "def solution():\n    return sum(range(27, 34))\n\nans = solution()"
    ],
    "42175aff49384f8fb2e1b8e87cd5d6dc": [
        "def solution():\n    ans = 0.98 + 1.98 + 2.98 + 3.98\n    return ans\n\nans = solution()"
    ],
    "dfc638bbb6ae4aabb28cb4b9417fc631": [
        "def solution():\n    speed = 2  # meters per second\n    time_in_minutes = 12\n    time_in_seconds = time_in_minutes * 60  # convert minutes to seconds\n\n    distance = speed * time_in_seconds\n    return distance\n\nans = solution()"
    ],
    "090de4dbbc22403c821128cff3d594be": [
        "def solution():\n    common_factor_1 = 4\n    common_factor_2 = 1\n\n    term_1 = (2020 // common_factor_1) * (68 * common_factor_1)\n    term_2 = 505 * (128 // common_factor_2) * common_factor_2\n\n    ans = term_1 + term_2\n    return ans\n\nans = solution()"
    ],
    "abbaed0cf4b24b7a96c8d6bc432d9ddb": [
        "def solution():\n    total_weight = 100 + 500 + 400\n    total_sugar = 100 * 0.25 + 500 * 0.55 + 400 * 0.35\n    concentration = (total_sugar / total_weight) * 100\n    return concentration\n\nans = solution()"
    ],
    "aef98a3088f64f3c987d8e8cad49eb89": [
        "def solution():\n    total_paid = 10\n    newspaper_cost = 2.20\n    change_received = 4.83\n    \n    tissues_cost = total_paid - (newspaper_cost + change_received)\n    \n    return tissues_cost\n\nans = solution()"
    ],
    "c44b7e0f636c4a559b50166c1518c540": [
        "def solution():\n    return 602 // 7\n\nans = solution()"
    ],
    "e6223ed171b341058c807c2c490548d2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    days_a = symbols('days_a')  # The time it takes for A to do the job alone\n    days_b = 2 * days_a  # B's efficiency is half of A's, meaning B takes twice as long\n    \n    # A finishes the job in 12 days less than B\n    equation = Eq(days_a, days_b - 12)\n    \n    # Solve for the number of days it takes A to do the job alone\n    days_a = solve(equation, days_a)[0]\n    days_b = 2 * days_a\n    \n    # The rate at which A works (job/day)\n    rate_a = 1 / days_a\n    \n    # The rate at which B works (job/day)\n    rate_b = 1 / days_b\n    \n    # The combined rate of A and B working together (job/day)\n    rate_together = rate_a + rate_b\n    \n    # The number of days to complete the job\n    days_together = 1 / rate_together\n    \n    return days_together\n\nans = solution()"
    ],
    "c7ddd97daf6145ed96ee9ebd4abbe31a": [
        "from itertools import permutations\n\ndef solution():\n    digits = '123'\n    all_combinations = [''.join(p) for i in range(1, len(digits)+1) for p in permutations(digits, i)]\n    return len(all_combinations)\n\nans = solution()"
    ],
    "9a23b61c00aa4f4f9ce7d319f75b093d": [
        "def solution():\n    tomatoes = 27\n    cucumbers = 3 + 3 * tomatoes\n    return cucumbers\n\nans = solution()"
    ],
    "c34811dd64254c04b657b905af68cf0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g be the number of girls, and b be the number of boys.\n    g, b = symbols('g b')\n\n    # Total students is the sum of boys and girls.\n    total_students_eq = Eq(g + b, 70)\n\n    # Total score is the average score times the number of students.\n    total_score = 66 * 70\n\n    # Total score for girls and boys separately.\n    girls_score_eq = Eq(g * 70, total_score - b * 63)\n\n    # Use solve to find the number of girls.\n    solutions = solve((total_students_eq, girls_score_eq), (g, b))\n\n    return solutions[g]\n\nans = solution()"
    ],
    "ab364c81a2864910ac73de45139fb81c": [
        "def solution():\n    # Based on the formula of maximum number of regions R in a plane with n lines:\n    # R(n) = (n^2 + n + 2) / 2 where n = number of lines\n    # For each triangle, considering non-intersecting triangles as the worst case, we have 3 lines.\n    # However triangles will intersect, creating additional regions. But we don't need to count the lines again.\n    # We just apply the recursive formula and add 1 additional region for each new triangle. So:\n    # 1 triangle - 2 regions.\n    # 2 triangles - 2 + 1 new region by adding the second triangle. (the line is already counted) = 3 regions.\n    # 3 triangles - 3 + 1 = 4 regions.\n    # This is true till 5 triangles, then:\n    # 4 triangles - 4 + 1 = 5 regions.\n    # 5 triangles - 5 + 1 = 6 regions.\n    \n    # Initialize the number of regions for 0 triangles\n    regions = 1\n    \n    # Add regions created by each new triangle\n    for i in range(1, 6):\n        regions += 1\n    \n    return regions\n\nans = solution()"
    ],
    "a914eab1c1f143d09f08b68c60165f8a": [
        "def solution():\n    cost_per_case = 6.25\n    total_cost = cost_per_case * 12\n    return total_cost\n\nans = solution()"
    ],
    "de26875a56ac47ad9dcf5dcc75dde7cf": [
        "def solution():\n    initial_temperature = -8\n    final_temperature = 13\n    temperature_increase = final_temperature - initial_temperature\n    return temperature_increase\n\nans = solution()"
    ],
    "5f9a3caf3a844c859338c8ee6c84403c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    # If Rachel gives Alice 10 pieces, they will have the same amount\n    equation1 = Eq(rachel - 10, alice + 10)\n\n    # If Alice gives Rachel 10 pieces, Rachel will have 4 more than 3 times Alice's pieces\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    total_candy = solutions[rachel] + solutions[alice]\n\n    return total_candy\n\nans = solution()"
    ],
    "c60c26e3a9984f1fb74edb0acff647db": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Represent the initial number of boys and girls as 3x and 2x\n    x = symbols('x')\n\n    # Initial number of boys and girls\n    boys_initial = 3 * x\n    girls_initial = 2 * x\n\n    # Number of boys and girls after more joined\n    boys_after = boys_initial + 12\n    girls_after = girls_initial + 12\n\n    # New ratio equation\n    ratio_eq = Eq(boys_after / girls_after, 19/14)\n\n    # Solve for x\n    x_value = solve(ratio_eq, x)[0]\n\n    # Calculate the total number\n    total_children_after = boys_after.subs(x, x_value) + girls_after.subs(x, x_value)\n\n    return total_children_after\n\nans = solution()"
    ],
    "b3d11c4825554079b29f7c4d34b2ed81": [
        "def solution():\n    value_of_A = 40\n    value_of_B = value_of_A / 2\n    value_of_C = value_of_B / 2\n    total_value = value_of_A + value_of_B + value_of_C\n    return total_value\n\nans = solution()"
    ],
    "5baea30fbec6495a8b6283b09656e48a": [
        "def solution():\n    total_pupils = 112 + 1098\n    pupils_each_room = total_pupils // 2\n    return pupils_each_room\n\nans = solution()"
    ],
    "5bd1eec767354db6b84f9b6d57d59263": [
        "def solution():\n    from math import factorial as fact\n    \n    # Four different colored socks in a row\n    # This is simply the number of permutations of 4 different objects\n    ways_diff_colored_socks = fact(4)\n    \n    # Two different colored pairs of socks in a row\n    # Two colors with two socks each -> permutations with repeats\n    ways_same_colored_pairs = fact(4) // (fact(2) * fact(2))\n    \n    return ways_diff_colored_socks, ways_same_colored_pairs\n\nans = solution()"
    ],
    "b13f6c28aaeb458aaa713c2e08380709": [
        "def solution():\n    length_iron_bar1 = 23\n    length_iron_bar2 = 37\n    length_welded_part = 3\n\n    full_length = length_iron_bar1 + length_iron_bar2 - length_welded_part\n    return full_length\n\nans = solution()"
    ],
    "504138d5ab434544b07d09526512e8d0": [
        "import math\n\ndef solution():\n    period_earth = 1  # T_earth = 1 s\n    g_earth = 9.81  # g on Earth\n    g_moon = g_earth / 6  # g on Moon\n\n    # Formula for the period of a pendulum: T = 2*pi*sqrt(L/g)\n    # Since T_earth = 1, we can find the length (L) of the pendulum\n    L = (period_earth / (2 * math.pi))**2 * g_earth\n\n    # Now calculate the period on the Moon using the same length L\n    period_moon = 2 * math.pi * math.sqrt(L / g_moon)\n\n    return period_moon\n\nans = solution()"
    ],
    "b24c8d3c218c4aacac0618f7c854fd25": [
        "def solution():\n    total_tiles = 400\n    side_length = int(total_tiles ** 0.5)\n    \n    red_tiles = 0\n    green_tiles = 0\n    \n    for layer in range(side_length // 2):\n        if layer % 2 == 0:\n            red_tiles += (side_length - layer * 2) ** 2 - (side_length - (layer * 2 + 2)) ** 2\n        else:\n            green_tiles += (side_length - layer * 2) ** 2 - (side_length - (layer * 2 + 2)) ** 2\n            \n    if side_length % 2 == 1: # If there are odd number of layers, the innermost layer will be red\n        red_tiles += 1\n    \n    if red_tiles > green_tiles:\n        dominant_color_tiles = red_tiles - green_tiles\n        dominant_color = 'red'\n    else:\n        dominant_color_tiles = green_tiles - red_tiles\n        dominant_color = 'green'\n    \n    return dominant_color_tiles\n\nans = solution()"
    ],
    "10f23d6da9944476ae1f44b6fd44944d": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime(2023, 3, 1)\n    end_date = datetime(2023, 4, 15)\n\n    delta = end_date - start_date\n\n    return delta.days + 1\n\nans = solution()"
    ],
    "c3766f132f16414bb326ea29c9942ad7": [
        "def solution():\n    x_squared = 7\n    x_fourth = x_squared ** 2\n    return x_fourth\n\nans = solution()"
    ],
    "8fbd1f3154514d90b348d98dc9937be2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let j be the number of correct answers by Justin\n    # Let w be the number of correct answers by William\n    j, w = symbols('j w')\n\n    # Each question answered correctly gives 6 points and each incorrectly gives -2 points\n    # Total points by Justin is 6j - 2(10 - j) and by William is 6w - 2(10 - w)\n    # Justin scores 24 more points than William, and together they score 96 points\n    # Therefore we have two equations:\n    # 6j - 2(10 - j) = 6w - 2(10 - w) + 24\n    # 6j - 2(10 - j) + 6w - 2(10 - w) = 96\n    \n    equation1 = Eq(6*j - 2*(10 - j), 6*w - 2*(10 - w) + 24)\n    equation2 = Eq(6*j - 2*(10 - j) + 6*w - 2*(10 - w), 96)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (j, w))\n\n    # We need the number of correct answers by William\n    return solutions[w]\n\nans = solution()"
    ],
    "0f1117672a63416cbd3434112e8ffbdd": [
        "def solution():\n    for A in range(10):\n        if 10 * A + A == 11 * A:\n            return A\n\nans = solution()"
    ],
    "1d5693592dcd4d74af7216902ea3469a": [
        "def solution():\n    work_done_by_A_per_day = 1 / 15\n    work_done_by_B_per_day = 1 / 10\n    work_done_in_3_days = 3 * (work_done_by_A_per_day + work_done_by_B_per_day)\n    remaining_work = 1 - work_done_in_3_days\n    days_for_B_to_finish = remaining_work / work_done_by_B_per_day\n    return days_for_B_to_finish\n\nans = solution()"
    ],
    "fe9c604c26c54da584f4631fb51fabca": [
        "def solution():\n    ans = 265 * 30\n    return ans\n\nans = solution()"
    ],
    "8d3535d489694c9ab72858ec3e09c1ee": [
        "def solution():\n    import math\n\n    # We assume the array is a perfect square, as people are in a square array.\n    side_length = int(math.sqrt(100))\n\n    # People in the outermost layer will be the people on the four sides \n    # minus the four corner people (as they are counted twice).\n    people_outer_layer = 4 * side_length - 4\n\n    return people_outer_layer\n\nans = solution()"
    ],
    "6aff689afc7c437db64fc2e27c02833a": [
        "def solution():\n    first_term = 50\n    difference = -4\n    n = 1  # Term count starts at 1 since the first term is 50\n\n    while first_term > 0:\n        first_term += difference\n        n += 1\n\n    return n - 1  # subtract 1 because we will overcount by one as the last term calculated will be negative\n\nans = solution()"
    ],
    "e77e2351b78345d6962d155aaf8c5efa": [
        "def solution():\n    loafs_per_cup = 6 / 5\n    total_loafs_needed = 24\n    cups_needed = total_loafs_needed / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "ad2a343c34cb44ac88504dd245fdcc8b": [
        "def solution():\n    return 11111111 * 99999999\n\nans = solution()"
    ],
    "10195dd0d1d04543a0ade2917338e294": [
        "def solution():\n    # Tom should aim to keep the XOR of the pile sizes equal to 0 after his move.\n    # We perform an XOR operation on the sizes of the two piles.\n    xor_value = 88 ^ 52\n\n    # If the xor_value is zero, Tom has no winning strategy as the game is in a 'N-position'.\n    # But since xor_value is not zero, Tom has a winning strategy and the game is in a 'P-position'.\n    # Tom should make a move that makes the xor_value zero after his move.\n\n    # To find the winning move, Tom should find an amount to remove from one of the piles\n    # so that the xor of the new sizes of the piles is zero.\n    # Tom takes from pile A if it's bigger once reduced by the xor_value or from pile B otherwise.\n    move_from_pile_A = (88 - xor_value) ^ 52 == 0\n    if move_from_pile_A:\n        cards_to_take = 88 - (52 ^ 88)\n        pile = 'A'\n    else:\n        cards_to_take = 52 - (88 ^ 52)\n        pile = 'B'\n\n    return (pile, cards_to_take)\n\nans = solution()"
    ],
    "6564fd0ca13b4e9b8f99f3ea28add3e9": [
        "def solution():\n    # Let's denote the initial amount of cash as x.\n    # After giving 3/7 of his cash to his sister, Hugo is left with 4/7 of his cash.\n    # Then, he gives 1/8 of his remaining cash to his mum, leaving him with 7/8 of the (4/7)x cash.\n    # Finally, he has $280 left.\n    # So, (7/8) * (4/7) * x = 280\n    # We solve for x.\n\n    x = 280 / (7/8) / (4/7)\n\n    return x\n\nans = solution()"
    ],
    "5dbed78cb0054ac8b310230d17f9c26e": [
        "def solution():\n    temperatures = [-10, 16, 9, 2]\n    difference = max(temperatures) - min(temperatures)\n    return difference\n\nans = solution()"
    ],
    "9563da65f57444518660d7e7ae11fc79": [
        "def solution():\n    total_amount = 51.20\n    people = 8\n\n    amount_per_person = total_amount / people\n\n    return amount_per_person\n\nans = solution()"
    ],
    "c913d4e63fce41d2aaca6a3e2a3cf6f4": [
        "def solution():\n    temperature_yesterday = -8\n    temperature_today = 13\n    temperature_increase = temperature_today - temperature_yesterday\n    return temperature_increase\n\nans = solution()"
    ],
    "1848fbe1d98944c9b1f806488a4b51a7": [
        "def solution():\n    first_term = 50\n    common_difference = 46 - 50  # negative since the sequence is decreasing\n\n    # In an arithmetic sequence, the nth term is given by: a_n = a_1 + (n - 1)d\n    # For the first negative term, a_n < 0\n    # 50 + (n - 1)(-4) < 0\n    # n - 1 > 50 / 4\n    # n > 12.5\n    # Since n must be an integer, n must be at least 13 to obtain a negative term\n\n    num_terms = 13  # the first 12 terms are non-negative, the 13th term is the first negative term\n    return num_terms\n\nans = solution()"
    ],
    "7b4cba3fe33741189ed2ca4a5ed157f2": [
        "def solution():\n    fraction = 4 / 50\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "82fc1a902d704c95a9aa6a164228805e": [
        "def solution():\n    base_area = 5 * 5  # area of the square base in cm^2\n    hole_area = 1 * 1  # area of the square hole in cm^2\n    prism_area = base_area - hole_area  # subtract the area of the hole from the base area to get the remaining area\n\n    height = 480 / prism_area  # volume of the prism divided by the remaining base area gives the height\n\n    return height\n\nans = solution()"
    ],
    "80d14d6dace648ab9a745e93b255b8c9": [
        "def solution():\n    result = sum(i * (2 * i - 1) for i in range(1, 11))\n    return result\n\nans = solution()"
    ],
    "a54b55467ea147c6b9f5372a54243a74": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the cost of cheesecakes and logcakes\n    cost_cheesecake, cost_logcake = symbols('cost_cheesecake cost_logcake')\n\n    # Equation1: 6 cheesecakes and 7 logcakes cost $1426\n    equation1 = Eq(6*cost_cheesecake + 7*cost_logcake, 1426)\n\n    # Equation2: 4 cheesecakes cost thrice as much as a logcake\n    equation2 = Eq(4*cost_cheesecake, 3*cost_logcake)\n\n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (cost_cheesecake, cost_logcake))\n\n    # Get the individual costs for cheesecakes and logcakes\n    cost_cheesecake_val = solutions[cost_cheesecake]\n    cost_logcake_val = solutions[cost_logcake]\n\n    # Cost of 10 cheesecakes and 10 logcakes = 10*(cost of 1 cheesecake) + 10*(cost of 1 logcake)\n    total_cost = 10 * cost_cheesecake_val + 10 * cost_logcake_val\n\n    return total_cost\n\nans = solution()"
    ],
    "4d8068dd3c0d45ac9d058b56e9ab8e71": [
        "def solution():\n    cost_pencil = 5\n    cost_pen = 15\n    pencils_for_pen = cost_pen / cost_pencil\n    return pencils_for_pen\n\nans = solution()"
    ],
    "d3e59c50fe3a4e3c8c9fc840de30fe66": [
        "def solution():\n    ans = sum([i if i % 2 != 0 else -i for i in range(1, 1002)])\n    return ans\n\nans = solution()"
    ],
    "f9c8b3de0b744d5bb1ceeff64db1f6f8": [
        "def solution():\n    ans = 12 + 102 + 1002 + 10002\n    return ans\n\nans = solution()"
    ],
    "d66ce8f472054e71aa236e8e613a5157": [
        "def solution():\n    count = 0\n    for i in range(10, 1000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "d4f12453aa6f49b4880fbca48045adeb": [
        "def solution():\n    count = 0\n    for x in range(1, 14):\n        for y in range(1, 14):\n            z = 13 - x - y\n            if z > 0 and x != y and y != z and x != z:\n                count += 1\n    return count // 6  # Dividing by 6 to account for permutations of the same combination\n\nans = solution()"
    ],
    "b4cb09af0f6e4f17bdbc0e57212c2ab5": [
        "def solution():\n    marbles_given_to_brother = 26\n    marbles_given_to_each_sister = 13\n    marbles_left_with_henry = 16\n    total_marbles_to_sisters = marbles_given_to_each_sister * 2\n\n    initial_marbles = marbles_given_to_brother + total_marbles_to_sisters + marbles_left_with_henry\n\n    return initial_marbles\n\nans = solution()"
    ],
    "9572661330c44c6fa75e2c4321ce76ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    yellow, green = symbols('yellow green')\n\n    # Initial ratio of yellow and green beads\n    equation1 = Eq(green, 2 * yellow / 3)\n    \n    # Ratio after buying more beads\n    equation2 = Eq((green + 20)/(yellow + 5), 3/2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (yellow, green))\n    \n    # Calculate the initial total number of beads\n    initial_total_beads = solutions[yellow] + solutions[green]\n\n    return initial_total_beads\n\nans = solution()"
    ],
    "84fb655f45e54baa81690c12194c4cfb": [
        "def solution():\n    ans = 0\n    for a in range(20, 1, -2):\n        b = a - 1\n        ans += a*a - b*b\n    return ans\n\nans = solution()"
    ],
    "a2686828e0aa405aab8754b3f12eaf64": [
        "def solution():\n    amy_speed = 60\n    christen_speed = 40\n    meet_time = 4\n    \n    total_distance = (amy_speed + christen_speed) * meet_time\n    time_for_christen_to_reach_amy = total_distance / christen_speed\n    \n    return time_for_christen_to_reach_amy\n\nans = solution()"
    ],
    "71c8465f7f6740fb84c60f24c0fa5b05": [
        "def solution():\n    return 617 + 385\n\nans = solution()"
    ],
    "8ac3b604d92f4e359866a78b06048dfd": [
        "def solution():\n    ans = 2570 / 10000\n    return ans\n\nans = solution()"
    ],
    "cecaf4be2c7445afbef79df483f09fe6": [
        "def solution():\n    for correct in range(51):\n        wrong = 50 - correct\n        score = correct * 4 - wrong * 1\n        if score == 110:\n            return correct\n            \nans = solution()"
    ],
    "b8eda4ea253243a6bc4591a500731f57": [
        "def solution():\n    total_cakes = 420\n    vanilla_cakes = (2 / 7) * total_cakes\n    banana_cakes = 0.35 * total_cakes\n    remaining_cakes = total_cakes - vanilla_cakes - banana_cakes\n\n    # Since the ratio of lemon to chocolate cakes is 4:5, the total parts are 4 + 5 = 9\n    # Let one part be x, then 4x is the number of lemon cakes and 5x is the number of chocolate cakes.\n    # According to the ratio, 4x + 5x = 9x should be the remaining cakes.\n    x = remaining_cakes / 9\n\n    lemon_cakes = 4 * x\n    return int(lemon_cakes)\n\nans = solution()"
    ],
    "a5cd848f2ed5457aa4de5ac1376a568b": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['0', '1', '3', '6', '8', '9']\n    even_digits = ['0', '6', '8']\n    count = 0\n    \n    for perm in permutations(digits, 4):\n        if perm[-1] in even_digits and perm[0] != '0':\n            count += 1\n    \n    return count\n\nans = solution()"
    ],
    "ae83fe9ef869429482fffd4b5f259176": [
        "def solution():\n    from math import lcm\n    return lcm(2, 3, 4, 5, 6)\n\nans = solution()"
    ],
    "8a1fa4f39e19492fb5019958052fc68b": [
        "def solution():\n    # Initialize the count of numbers\n    count = 0\n    \n    # The hundreds place can be 1-9 (9 choices)\n    # The tens and ones places can have 0-9 excluding the hundreds digit (9 choices)\n    # There are two choices for where to put the duplicate digit -- tens or ones\n    # It gives us 9(hundreds) * 9(other digit) * 2(possible places for the duplicate)\n    \n    count += 9 * 9 * 2\n    \n    # Now, we need to subtract the case where the tens and ones place are the same,\n    # because we need exactly two different digits.\n    # This can happen 9 times (once for each non-zero digit).\n    count -= 9\n    \n    return count\n\nans = solution()"
    ],
    "37eda3d2a7f44391ba89ab6bf862df70": [
        "def solution():\n    # Given that one student gets at least 3 apples, we can subtract these 3 apples from the total.\n    total_apples = 80 - 3\n    \n    # Using the Pigeonhole Principle, we distribute the remaining apples to the students,\n    # giving 1 apple to each student. Since at least one student gets 1 apple,\n    # the class size is total_apples + 1\n    class_size = total_apples + 1\n    \n    return class_size\n\nans = solution()"
    ],
    "0e57c290f8c748f5a8c86e2a3bf96219": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of books Lily sends to Judy\n    # Let L be the number of books Lily has initially\n    # Let J be the number of books Judy has initially\n\n    x, L, J = symbols('x L J')\n    \n    # Setup the equation: after sending x books, both have the same amount\n    eq1 = Eq(L - x, J + x)\n\n    # We also know that initially Lily has more books than Judy\n    # This translates to: L = J + 2x\n    eq2 = Eq(L, J + 2*x)\n\n    # Now we can solve the system of equations for L and J\n    solutions = solve((eq1, eq2), (L, J, x))\n\n    # The number of more books Lily had initially is 2x\n    return solutions[x]*2\n\nans = solution()"
    ],
    "a8d1ad2b149e49638120daa2fb4f7e50": [
        "def solution():\n    # Possible scenarios for two passes starting with Lily:\n    # Lily -> Cici -> April\n    # Lily -> Cici -> Lily\n    # Lily -> April -> Cici\n    # Lily -> April -> Lily\n\n    # There are two choices for the first pass (Cici or April)\n    first_pass_options = 2\n    \n    # For each choice of the first pass, there are again two choices (the two\n    # people who did not receive the first pass)\n    second_pass_options = 2\n    \n    # Total passing ways is the product of the options for the first and second pass\n    total_pass_ways = first_pass_options * second_pass_options\n\n    return total_pass_ways\n\nans = solution()"
    ],
    "1f9f29d4bf5649379a9cfd3c9d5fcb04": [
        "def solution():\n    wibble_arms = 6\n    wobble_arms = 5\n    num_wibbles = 11\n    total_arms = 81\n\n    total_wibble_arms = num_wibbles * wibble_arms\n    total_wobble_arms = total_arms - total_wibble_arms\n    num_wobbles = total_wobble_arms // wobble_arms\n\n    return num_wobbles\n\nans = solution()"
    ],
    "59de4a78f41748248348566692dedf92": [
        "def solution():\n    from sympy import primerange\n\n    primes = list(primerange(1, 180))  # All prime numbers less than 179\n    for a in primes:\n        for b in primes:\n            if 7*a + 9*b == 179:\n                return a + b\n\nans = solution()"
    ],
    "0cc3cd452b624c9498a48d64322243b8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Declare symbols for the amounts collected by each friend\n    alan, bilal, chloe, david, emily = symbols('alan bilal chloe david emily')\n\n    # Equations based on the problem statement\n    equation1 = Eq(alan, 74)\n    equation2 = Eq(bilal, 86)\n    equation3 = Eq(chloe, 2 * david)\n    equation4 = Eq(david, 3 * emily)\n    equation5 = Eq(alan + bilal + chloe + david + emily, 400)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (chloe, david, emily))\n\n    # Return the amount collected by Chloe\n    return solutions[chloe]\n\nans = solution()"
    ],
    "c214cce759fc4604b8bd4aac04f2f467": [
        "def solution():\n    boys = 18\n    girls = boys * 2\n    return girls\n\nans = solution()"
    ],
    "1933faa02cf240199d07d7e6c69c3b86": [
        "def solution():\n    ans = 0.15 * 420\n    return ans\n\nans = solution()"
    ],
    "84bcfd2527634a87ba73c95b75479cb4": [
        "def solution():\n    total_minutes = 32 * (1/8) * (1/6) * (1/4)\n    total_seconds = total_minutes * 60\n    return total_seconds\n\nans = solution()"
    ],
    "0833ee006bff4737af597938f80a6679": [
        "def solution():\n    for hundreds in range(1, 10):\n        for ones in range(0, 10):\n            if hundreds == ones + 1:\n                tens = 2 * hundreds\n                if tens < 10:  # making sure its a digit\n                    if hundreds + tens + ones == 15:\n                        return hundreds * 100 + tens * 10 + ones\n    return None\n\nans = solution()"
    ],
    "939569b8df414ce2859c11258d03bfc9": [
        "def solution():\n    # Define the equation: 9x + 5 = 113\n    # Rearrange the equation to find x: x = (113 - 5) / 9\n    x = (113 - 5) / 9\n\n    # Return the result\n    return x\n\nans = solution()"
    ],
    "cc2d217fd9294779a151ac26e6edcda8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 80)\n    equation2 = Eq(x - y, 40)\n\n    solutions = solve((equation1, equation2), (x, y))\n    smaller_number = min(solutions[x], solutions[y])\n\n    return smaller_number\n\nans = solution()"
    ],
    "ef69916912d64c749a2c5414ca933b35": [
        "def solution():\n    maverick_speed = 15  # km/h\n    kelvin_speed = 10  # km/h\n    maverick_time = 24 / 60  # hours (converted from minutes)\n    kelvin_lead = 10  # km\n\n    maverick_distance = maverick_speed * maverick_time\n    kelvin_distance = kelvin_speed * maverick_time\n\n    distance_difference = maverick_distance - kelvin_distance\n\n    if distance_difference >= kelvin_lead:\n        return f\"Maverick was correct. He took {maverick_time * 60} minutes to catch up.\"\n    else:\n        extra_distance_needed = kelvin_lead - distance_difference\n        extra_time_needed = extra_distance_needed / (maverick_speed - kelvin_speed)\n        total_time = maverick_time + extra_time_needed\n        return f\"Kelvin was correct. Maverick took {total_time * 60} minutes to catch up.\"\n\nans = solution()"
    ],
    "4b1aed0b9dfb4774968b86622359a2d5": [
        "def solution():\n    total_questions = 6\n    correct_score = 5\n    wrong_score = -2\n    total_score = 23\n\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        if correct_answers * correct_score + wrong_answers * wrong_score == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "7d33980148da4ca2a7359bd7f16eac27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    y, g = symbols('y g')  # y is the number of yellow beads, g is the number of green beads\n    \n    # Original ratio\n    equation1 = Eq(y/g, 3/2)\n    \n    # New ratio after purchasing more beads\n    equation2 = Eq((g + 20)/(y + 5), 3/2)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (y, g))\n    \n    # Total number of beads at first\n    total_beads_initial = solutions[y] + solutions[g]\n    \n    return total_beads_initial\n\nans = solution()"
    ],
    "51add92ad60b41bd8d0e28c5401b2bae": [
        "def solution():\n    # Since there are 3 kids and each must get at least one eraser, we can start by\n    # giving 1 eraser to each kid. This will leave us with 6 - 3 = 3 erasers to distribute.\n    \n    # We then need to find the number of solutions to the equation:\n    # x1 + x2 + x3 = 3 where x1, x2, x3 >= 0 which is a problem of distributing \n    # indistinguishable items into distinguishable boxes.\n    \n    # This is equivalent to finding the combinations of placing two 'dividers' in\n    # among the three remaining items, which can be calculated using the formula for \n    # combinations with repetitions: C(n+k-1, k).\n    # In this case n = 3 (items) and k = 2 (dividers).\n    \n    from math import comb\n    \n    n = 3  # remaining items\n    k = 2  # dividers\n    \n    ways = comb(n + k - 1, k)\n    return ways\n\nans = solution()"
    ],
    "35a2e016d6e741289d85bfd98cae8549": [
        "def solution():\n    # Total distance between the plum trees\n    total_distance = (41 - 1) * 4  # Subtract 1 because the first tree doesn't create distance\n\n    # The number of pine trees is total distance divided by the interval plus 1 for the first tree\n    num_pine_trees = (total_distance // 5) + 1\n\n    return num_pine_trees\n\nans = solution()"
    ],
    "e7d9f592443542ef9f580c770df2ce1a": [
        "def solution():\n    # Your custom operation is actually a shorthand for a repetitive operation\n    # that simplifies to: a - a*(b/910) when applying a # b\n    \n    # If we apply this operation repeatedly, we can see a pattern:\n    # a # b = a + b - ab/910\n    #       = a(1 - b/910) + b\n    # Similarly:\n    # a # b # c = (a + b - ab/910) # c\n    #           = (a + b - ab/910) + c - (a + b - ab/910)c/910\n    #           = a(1 - b/910)(1 - c/910) + b(1 - c/910) + c\n    #           = a(1 - b/910)(1 - c/910) + b - bc/910 + c\n    #           = a(1 - b/910)(1 - c/910) + b(1 - c/910) + c\n    # Continuing this pattern, we arrive at:\n    # a # b # ... # 2 # 1 = a(1 - b/910)(1 - c/910)...(1 - 2/910)(1 - 1/910) + ...\n    #                     + 2(1 - 1/910) + 1\n    # Recognizing that the 1/910 factors cancel almost everything, we get:\n    # = a * (1/910) + 2 * (1 - 1/910) + 1\n    # = a/910 + 2 - 2/910 + 1\n    # = 3 + a/910 - 2/910\n    # = 3 + 1/910 * (a - 2)\n    # Now we just need to apply the right values for \"a\" which is sequential\n\n    a = 2016\n    ans = 3 + 1/910 * (a - 2)\n    return ans\n\nans = solution()"
    ],
    "19e648dd36f74957bbf3ab2e377bf993": [
        "def solution():\n    # Let x be the current age of the younger man and y be the current age of the older man\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    \n    # \"When I was your age, you were only 4 years old\" translates to y - (x - 4) = x\n    equation1 = Eq(y - x, 4)\n    \n    # \"When I am your age, you will be 61\" translates to (x + (y - x)) - y = 61\n    equation2 = Eq(x + (y - x) - y, 61)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Return the age of the younger man\n    return solutions[x]\n\nans = solution()"
    ],
    "cd978bde655c4eeab7c4cd5b3e79f234": [
        "def solution():\n    return sum(range(1, 7))\n\nans = solution()"
    ],
    "960af76a998542a6bf58bd1a0539e775": [
        "def solution():\n    initial_people = 10\n    initial_hours = 9\n    target_hours = 3\n\n    work_rate_per_person = 1 / (initial_people * initial_hours)\n    total_work = work_rate_per_person * initial_hours\n\n    people_needed = total_work / (work_rate_per_person * target_hours)\n\n    return int(people_needed)\n\nans = solution()"
    ],
    "c7ea8a8261394a278c052e1d963f6832": [
        "def solution():\n    # The pattern can be noticed, if you start evaluating from the right side step by step\n    # Using the definition a#b = a + b - (a*b)/910, you can eventually figure out\n    # that applying the operation with 1 will lead us to getting 910th part less than the sum of both numbers\n    # Except that fact, that 910 is also divisible by 1 leaving us back with the first number (not decreased)\n    # Thus, when apply operation \"#\" with \"1\", we just get back the first number\n    # Meaning that operation \"#\" with \"1\" does not change the first number\n    # That leads us to 2016 # 1 = 2016 and then the rest follows, so we are left with the evaluation of 2016\n    return 2016\n\nans = solution()"
    ],
    "9ccb508c829548d7abb565af2518a286": [
        "def solution():\n    week1 = 27\n    week2 = 25\n    week3 = 30\n    \n    total_litres = week1 + week2 + week3\n    \n    return total_litres\n\nans = solution()"
    ],
    "e9c6ea8b3c7942a7b584df1117ea9972": [
        "def solution():\n    candy_weight = 30\n    weight_difference = 4\n\n    nancy_weight = candy_weight - weight_difference\n\n    return nancy_weight\n\nans = solution()"
    ],
    "28e8d3b2c27742f3ace084be157d24aa": [
        "def solution():\n    n = 15\n    first_term = 5\n    sum_squares = (n * (n + 1) * (2 * n + 1) / 6) - ((first_term - 1) * first_term * (2 * (first_term - 1) + 1) / 6)\n    return int(sum_squares)\n\nans = solution()"
    ],
    "b95ce34c4904482cb93b8929a241db81": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_watermelons = symbols('total_watermelons')\n\n    # Helen sold 1/3 of total on the first day\n    remaining_after_first_day = total_watermelons * (2/3)\n    # Helen sold 60% of the remaining on the second day\n    remaining_after_second_day = remaining_after_first_day * (1 - 0.60)\n    # After both days, she had 48 watermelons left\n    equation = Eq(remaining_after_second_day, 48)\n\n    initial_total = solve(equation, total_watermelons)\n\n    return initial_total[0]\n\nans = solution()"
    ],
    "d0d1460243fb491a970711148da8bdbd": [
        "def solution():\n    ans = 125 * 8 * 49\n    return ans\n\nans = solution()"
    ],
    "ecab41bccb924851abd1f915401a0eda": [
        "def solution():\n    # Jessica has 5 desks in front of her, and Judy has 7 desks behind her.\n    # Since Jessica sits in front of Judy, there is one desk (Jessica's desk)\n    # that is not counted in the 7 desks behind Judy.\n    # So we add 1 to the 7 to include Jessica's desk.\n    # The total number of desks is the desks in front of Jessica,\n    # plus the desk where Jessica is sitting, plus Judy's desk,\n    # plus the desks behind Judy.\n\n    # Calculation:\n    # Total desks = Desks in front of Jessica + Jessica's desk + Judy's desk\n    #               + Desks behind Judy\n    total_desks = 5 + 1 + 1 + 7\n    \n    return total_desks\n\nans = solution()"
    ],
    "afeb51e7b2d34fa88856173d28928c5d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    total_students = 152\n\n    # After removing 1/11 of the boys and 5 girls, boys and girls become equal\n    equation = Eq((boys - boys / 11), (girls - 5))\n\n    # Total number of students is the sum of boys and girls\n    total_equation = Eq(boys + girls, total_students)\n\n    # Solve the system of equations\n    solutions = solve((equation, total_equation), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "19b4042ba2f8433493147e1a596bf779": [
        "def solution():\n    ans = 9 - 8 + 7 - 6 + 5 - 4 + 3 - 2 + 1\n    return ans\n\nans = solution()"
    ],
    "6d4657e0a9824b57b531a1b2c5afa9eb": [
        "def solution():\n    count = 0\n    for x1 in range(1, 9):\n        for x2 in range(1, 9):\n            for x3 in range(1, 9):\n                if x1 + x2 + x3 == 13 and len(set([x1, x2, x3])) == 3:\n                    count += 1\n    # Each combination is counted 3! times because we iterate over all permutations.\n    # To get the number of combinations, we divide by 3! (which is 6).\n    return count // 6\n\nans = solution()"
    ],
    "2b2fae5ea687426e9dedde667bf69e55": [
        "def solution():\n    people_for_9hours = 10\n    target_hours = 3\n\n    people_needed = (people_for_9hours * 9) / target_hours\n\n    return people_needed\n\nans = solution()"
    ],
    "3f2537244e194218846046e4e72a93db": [
        "def solution():\n    initial_amount = 1000\n    subtraction_amount = 11\n    term = initial_amount\n    while term >= 0:\n        term -= subtraction_amount\n    return term + subtraction_amount  # The term became negative after the last subtraction\n\nans = solution()"
    ],
    "b4ef0f615e074408b4de5de14d0436b3": [
        "def solution():\n    result = 888 * 999\n    last_two_digits = result % 100\n    return last_two_digits\n\nans = solution()"
    ],
    "5a7e2d52cd5643888c27fcb6f06badc1": [
        "def solution():\n    midpoint = 0.126\n    known_number = 0.11\n    \n    other_number = (midpoint * 2) - known_number\n    \n    return other_number\n\nans = solution()"
    ],
    "1e5a18b4b8724826840fb986aacf25d5": [
        "def solution():\n    total_sweets = 486\n    classmates = 17\n\n    sweets_per_classmate = total_sweets // classmates\n\n    return sweets_per_classmate\n\nans = solution()"
    ],
    "b09251df1d4e43b491aaaabfee97a699": [
        "def solution():\n    chocolates = 72\n    toffees_per_choc = 7 / 12\n    toffees = chocolates * toffees_per_choc\n    return int(toffees)\n\nans = solution()"
    ],
    "d6aec573cb244941b3aefa06caa06e7a": [
        "def solution():\n    for num in range(28, 41):\n        if num % 4 == 0 and 9 in set(i for i in range(1, num + 1) if num % i == 0):\n            return num\n\nans = solution()"
    ],
    "7a3a4893dd26417fb58c5b88ebbabd36": [
        "def solution():\n    ans = 21 + 27 + 19 - 17 + 22 + 18\n    return ans\n\nans = solution()"
    ],
    "e486c9dd773145848b5f37d0c04bbf06": [
        "def solution():\n    total_cost = 2826\n    cost_mangoes = 56\n    num_mangoes = 24\n    num_lychees = 19\n\n    cost_lychees_per_box = (total_cost - (cost_mangoes * num_mangoes)) / num_lychees\n\n    return cost_lychees_per_box\n\nans = solution()"
    ],
    "1d935725dd9f4e3fa1aed495190dc424": [
        "def solution():\n    # The possible coin types\n    coin_types = [1, 2, 5]\n    # The set to keep track of different totals\n    totals = set()\n    # Calculate the totals for all combinations of 3 coins\n    for coin1 in coin_types:\n        for coin2 in coin_types:\n            for coin3 in coin_types:\n                totals.add(coin1 + coin2 + coin3)\n    # Return the count of different totals\n    return len(totals)\n\nans = solution()"
    ],
    "0195214807ca4ebb8735a37f3bd0f396": [
        "def solution():\n    for A in range(10):\n        for B in range(10):\n            for C in range(10):\n                if int(f\"{A}2{B}5\") * 4 == int(f\"{C}300\"):\n                    return A + B + C\n\nans = solution()"
    ],
    "c42ce6475895428ab114a1af2385cd70": [
        "def solution():\n    from math import comb\n    return comb(6, 2)\n\nans = solution()"
    ],
    "66c85837504345c58750cdb4cd50976c": [
        "def solution():\n    principal = 10000\n    rate = 0.05\n    time = 3\n\n    amount = principal * ((1 + rate) ** time)\n\n    return amount\n\nans = solution()"
    ],
    "d3475d6b771245278e01398bd5f12797": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(24*x - 5*(3 + x), 4)\n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "f8128d9e28164d24aec427b96c538dec": [
        "def solution():\n    percent_value = 65 / 100\n    decimal_value = 0.507\n    fraction_value = 1 / 4\n    \n    ans = percent_value + decimal_value + fraction_value\n    return ans\n\nans = solution()"
    ],
    "7e4fe708d5fe47a8b3e7945e164570cb": [
        "from itertools import permutations\n\ndef solution():\n    unique_numbers = set()\n    cards = '1122'\n    for perm in permutations(cards, 3):\n        number = ''.join(perm)\n        if number[0] != '0':  # exclude numbers that start with 0\n            unique_numbers.add(number)\n    return len(unique_numbers)\n\nans = solution()"
    ],
    "6db54abfbef4439db3f32fb63eccef7f": [
        "def solution():\n    for P in range(10):\n        for Q in range(10):\n            for R in range(10):\n                if (P*100 + Q*10 + R) * 4 == (R*1000 + R*100 + Q*10 + P):\n                    return P + Q + R\n\nans = solution()"
    ],
    "32cdb025d7b6487e8f23c740bc73c7a7": [
        "def solution():\n    # Susan jogs for 1 hour from 7:30 am to 8:30 am\n    jog_time = 1\n    jog_speed = 5  # miles per hour\n    jog_distance = jog_time * jog_speed\n    \n    # Susan walks from 8:30 am to 10:30 am, which is 2 hours\n    walk_time = 2\n    walk_speed = 3  # miles per hour\n    walk_distance = walk_time * walk_speed\n\n    # Total distance traveled is the sum of jogging and walking distances\n    total_distance = jog_distance + walk_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "5e7920b1469e44e9b17a7f258f840f18": [
        "def solution():\n    # Let the first term of the arithmetic sequence be 'a'\n    # The next four terms would be 'a+1', 'a+2', 'a+3', and 'a+4'\n    # The sum of five consecutive whole numbers is 100, so\n    # a + (a+1) + (a+2) + (a+3) + (a+4) = 100\n    # Simplifying, we get 5a + 10 = 100\n    # Solving for 'a' we get\n    a = (100 - 10) // 5\n    return a\n\nans = solution()"
    ],
    "aaa5c754fa8b4afba08b7370dcadfd5c": [
        "def solution():\n    # Let x be the number of children who paid £10, and y be the number who paid £15.\n    # We have two equations:\n    # 1) x + y = 50 (total number of children)\n    # 2) 10x + 15y = 555 (total amount paid)\n    \n    # From equation 1, we can express y in terms of x: y = 50 - x.\n    # Substitute y in equation 2:\n    # 10x + 15(50 - x) = 555\n    # Simplify and solve for x:\n    # 10x + 750 - 15x = 555\n    # -5x = 555 - 750\n    # -5x = -195\n    # x = -195 / -5\n    x = 39\n    \n    # Now, we find y using the value of x (y = 50 - x):\n    y = 50 - x\n    \n    return y\n\nans = solution()"
    ],
    "29d7bb7ee42147cb9da0d2f87542dc6c": [
        "def solution():\n    initial_oranges = 75\n    oranges_in_large_boxes = 3 * 10\n    oranges_in_small_boxes = 7 * 5\n    oranges_left = initial_oranges - (oranges_in_large_boxes + oranges_in_small_boxes)\n    return oranges_left\n\nans = solution()"
    ],
    "6e0d33aabe9c4bcab5d514bcef0a008a": [
        "def solution():\n    total_balls = 27\n    balls_per_bag = 5\n    remaining_balls = 2\n    number_of_bags = (total_balls - remaining_balls) // balls_per_bag\n    return number_of_bags\n\nans = solution()"
    ],
    "181bc921ffe648fdb943b55640a83626": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 44000 to get its prime factors along with their exponents\n    factors = factorint(44000)\n\n    # Since 44000/q must be a cube, each prime factor's exponent in 44000/q must be divisible by 3\n    # We initialize q to 1 as the multiplicative identity\n    q = 1\n\n    # Check each prime factor and its exponent\n    for prime, exponent in factors.items():\n        # If the exponent is not divisible by 3, then it must be fully contributed to q\n        # Otherwise, multiply q by the prime raised to the remaining power after divisibility by 3\n        if exponent % 3 != 0:\n            q *= prime ** exponent\n\n    return q\n\nans = solution()"
    ],
    "4884fdf18c7a4806a27e23695f55df93": [
        "def solution():\n    # You must have at least 3 of the same number, so in the worst case, \n    # you draw 2 cards of each number before getting a third of any number.\n    # There are 13 numbers, so after drawing 2 cards of each number (2 * 13 = 26 cards),\n    # the next card you draw (the 27th) must be the third card of at least one of those numbers.\n    return 26 + 1\n\nans = solution()"
    ],
    "68ce89970a8a42d0af6104403b9d3ddf": [
        "def solution():\n    total_length = 800  # in meters\n    # If both ends are planted, there are 21 - 1 intervals between 21 trees\n    intervals = 21 - 1\n\n    distance_between_trees = total_length / intervals\n\n    return distance_between_trees\n\nans = solution()"
    ],
    "23f3e87699854b52b46eb378c40700f3": [
        "def solution():\n    result = 32 * 125 * 49\n    return result\n\nans = solution()"
    ],
    "febedf25f5b741c99cfb8b948352ac30": [
        "def solution():\n    andy_notebooks = 149\n    andy_gives = 38\n\n    # The correct operation is to divide the 38 notebooks he gives over 2 (the difference\n    # in the number to make them equal) and subtract that from Andy's total notebooks.\n    half_difference = andy_gives // 2\n    sister_notebooks_original = andy_notebooks - andy_gives + half_difference\n\n    return sister_notebooks_original\n\nans = solution()"
    ],
    "de1a1dea86fa48258e157a13cfd72cc0": [
        "def solution():\n    return (3/4) * 28\n\nans = solution()"
    ],
    "0aeb025cc8c240e8b251019f1650c9d2": [
        "def solution():\n    distance = 90\n    number_of_gaps = 9 + 1  # there is one more gap than the number of trees\n\n    distance_between_each_tree = distance / number_of_gaps\n\n    return distance_between_each_tree\n\nans = solution()"
    ],
    "f6face9fc7c7465783d957d20e60eabe": [
        "from sympy import isprime\n\ndef solution():\n    primes_count = 0\n    original_number = 200\n    original_digits = [int(d) for d in str(original_number)]\n    \n    for i in range(3):  # Three digits to change in the number 200\n        for digit in range(10):  # Potential digits to replace with\n            if digit != original_digits[i]:\n                new_digits = original_digits.copy()\n                new_digits[i] = digit\n                new_number = int(''.join(map(str, new_digits)))\n                \n                # Check if the new number is prime\n                if new_number >= 2 and isprime(new_number):\n                    primes_count += 1\n                    \n    return primes_count\n\nans = solution()"
    ],
    "64a0b45c920043ea9de7368f87d76a34": [
        "def solution():\n    # Define the two numbers using a single variable since one number is twice the other\n    smaller_number = symbols('smaller_number')\n\n    # Create the equations based on the given information\n    larger_number = 2 * smaller_number\n    equation = Eq(smaller_number + larger_number, 72)\n\n    # Solve the equation for the smaller number\n    smaller_number_solution = solve(equation, smaller_number)\n\n    return smaller_number_solution[0]\n\nans = solution()"
    ],
    "eaee4c5f914f464893c6c617cd8da980": [
        "def solution():\n    mean_value = 5\n    total_sum = mean_value * 5\n    known_sum = sum([3, 4, 6, 10])\n    fifth_number = total_sum - known_sum\n\n    return fifth_number\n\nans = solution()"
    ],
    "8b959182183d418eb25cefb9bf8dc219": [
        "def solution():\n    first_number = 0.11\n    mid_number = 0.126\n    # Since mid_number is halfway, we can calculate the difference and add it to mid_number\n    difference = mid_number - first_number\n    second_number = mid_number + difference\n    \n    return second_number\n\nans = solution()"
    ],
    "4d7449c37dc04e2caef48c2973cae23f": [
        "def solution():\n    # Possible cards by their suits and ranks\n    cards = {\n        'Spades': ['A', 'J', 'K'],\n        'Hearts': ['3', '5', 'K'],\n        'Diamonds': ['2', '7', 'J'],\n        'Clubs': ['A', '7']\n    }\n\n    # Function to flatten the dictionary into a list of tuples\n    def flatten_cards(d):\n        return [(suit, rank) for suit, ranks in d.items() for rank in ranks]\n\n    # Function to filter cards by the knowledge of Eddie and Avril\n    def filter_cards(possible_cards):\n        # After Eddie says neither knows, remove all unique ranks (since if Avril had heard a unique rank, she would know)\n        # Also remove all suits with unique ranks\n        unique_ranks = {rank for rank in ranks_count if ranks_count[rank] == 1}\n        possible_cards = [card for card in possible_cards if card[1] not in unique_ranks]\n        possible_suits = {card[0] for card in possible_cards}\n        possible_cards = [card for card in possible_cards if card[0] in possible_suits]\n\n        # After Avril says now she knows, remove cards from suits with more than one possible card\n        suit_count = {suit: 0 for suit in possible_suits}\n        for card in possible_cards:\n            suit_count[card[0]] += 1\n        possible_cards = [card for card in possible_cards if suit_count[card[0]] == 1]\n\n        return possible_cards\n    \n    # Get a list of all possible cards\n    all_possible_cards = flatten_cards(cards)\n\n    # Count the ranks in all possible cards\n    ranks_count = {}\n    for _, rank in all_possible_cards:\n        if rank not in ranks_count:\n            ranks_count[rank] = 1\n        else:\n            ranks_count[rank] += 1\n\n    # Eddie knows the suit, Avril knows the rank\n    # After the initial statement, filter out cards based on their logic\n    remaining_cards = filter_cards(all_possible_cards)\n\n    # There should be only one card remaining\n    if len(remaining_cards) == 1:\n        return remaining_cards[0]\n    else:\n        return \"There was an error finding the card.\"\n\nans = solution()"
    ],
    "d71cc09281d5402dbf1e61d96fc56855": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    days, total_pages = symbols('days total_pages')\n\n    equation1 = Eq(30 * (days + 2), total_pages)\n    equation2 = Eq(39 * (days - 4), total_pages)\n\n    solutions = solve((equation1, equation2), (days, total_pages))\n\n    return solutions[days], solutions[total_pages]\n\nans = solution()"
    ],
    "98e96ab2a5464c2f8b55cc5355c56197": [
        "def solution():\n    count = 0\n    page = 0\n    while count < 30:\n        page += 1\n        count += str(page).count('5')\n    return page\n\nans = solution()"
    ],
    "967f79ab6d244b729f644537a06bdcc3": [
        "def solution():\n    total_cost = 13.23\n    number_of_cups = 9\n    cost_per_cup = total_cost / number_of_cups\n    return cost_per_cup\n\nans = solution()"
    ],
    "bb066669a1d043539b0f78f992d232f1": [
        "def solution():\n    sum_1 = sum(range(6, 11))  # Adding numbers 10, 9, 8, 7, 6\n    sum_2 = sum(range(1, 6))   # Adding numbers 5, 4, 3, 2, 1\n    result = sum_1 - sum_2     # Subtracting the second sum from the first sum\n    return result\n\nans = solution()"
    ],
    "b603c5461f8548a3b4cec3a87b533133": [
        "def solution():\n    ans = 7.298 / 0.2\n    return ans\n\nans = solution()"
    ],
    "19c7948c5c3b458f98616eed8bb06cfc": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Define the variable\n    x = symbols('x')\n    \n    # Set up the equation based on the given problem\n    equation = 13 - 2 * (2 * x - 3) - (5 - (x - 2))\n    \n    # Solve the equation\n    solution = solve(equation, x)\n    \n    # Get the correct age in years when the teacher entered kindergarten\n    correct_age = solution[0]\n\n    return correct_age\n\nans = solution()"
    ],
    "0a9790cb77334c198e6f33340f5f941c": [
        "def solution():\n    rooms_per_day_per_worker = 2\n    workers = 2\n    total_rooms = 4\n\n    days = total_rooms / (rooms_per_day_per_worker * workers)\n    return days\n\nans = solution()"
    ],
    "8ddc7b2bdd5b4d1a82dc0c65276359f0": [
        "def solution():\n    # It takes Emma 12 minutes to make 3 cuts to divide the wood into 4 sections\n    # Therefore, each cut takes 12 / 3 = 4 minutes\n    time_per_cut = 12 / 3\n\n    # To cut the same piece of wood 5 times, she needs 5 cuts\n    # Total time needed = 5 cuts * 4 minutes per cut\n    total_time = 5 * time_per_cut\n\n    return total_time\n\nans = solution()"
    ],
    "7ab2e2f436264488b6a85e26de20ed20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for pocket money and the price of one tennis ball\n    pocket_money, ball_price = symbols('pocket_money ball_price')\n\n    # Equation for the first week\n    equation1 = Eq(4 * ball_price + 27, pocket_money)\n    # Equation for the second week, converting £1.51 to pence (151p)\n    equation2 = Eq(2 * ball_price + 151, pocket_money)\n\n    # Solve the system of equations for pocket_money\n    solutions = solve((equation1, equation2), (pocket_money, ball_price))\n\n    return solutions[pocket_money]\n\nans = solution()"
    ],
    "ef8fc9f97c334d85b494fffa1bd0577b": [
        "def solution():\n    pages_per_hour = 30 / (3/4)\n    seconds_per_hour = 3600\n    seconds_per_page = seconds_per_hour / pages_per_hour\n    return seconds_per_page\n\nans = solution()"
    ],
    "317ce9d0b92e4e9b82f5bce5d48051a3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of one apple and one orange\n    apple, orange = symbols('apple orange')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(1 * apple + 2 * orange, 48)\n    equation2 = Eq(1 * apple + 1 * orange, 31)\n\n    # Solve the system of equations for apple and orange\n    solutions = solve((equation1, equation2), (apple, orange))\n\n    return solutions[orange]\n\nans = solution()"
    ],
    "a68fba20646a499593183aa13dfc3f51": [
        "def solution():\n    total_badges = 24\n    given_badges = total_badges * (3/8)\n    remaining_badges = total_badges - given_badges\n    return remaining_badges\n\nans = solution()"
    ],
    "a1b6d3dc280e4ab498a45c02841bbb75": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        # Convert number to string to check for '0'\n        num_str = str(i)\n        if num_str.count('0') == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "29b13d5b92d24153bb5eab0c0a6b79b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jason, will, tom = symbols('jason will tom')\n\n    equation1 = Eq(jason, 3 * will)\n    equation2 = Eq(tom, will - 15)\n    equation3 = Eq(jason + will + tom, 225)\n\n    solutions = solve((equation1, equation2, equation3), (jason, will, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "b2e74fd3787345abaed2bffc05eda905": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    elias, aileen = symbols('elias aileen')\n\n    # Initial condition: Elias had 5 times as many stickers as Aileen\n    equation1 = Eq(elias, 5 * aileen)\n\n    # After giving away and losing stickers, they have the same number\n    equation2 = Eq(elias - 88, aileen - 8)\n\n    solutions = solve((equation1, equation2), (elias, aileen))\n\n    # Number of stickers each had in the end\n    elias_end = solutions[elias] - 88\n    aileen_end = solutions[aileen] - 8\n\n    return elias_end, aileen_end\n\nans = solution()"
    ],
    "5ed3ede08de4405abf392b2e764a8a3a": [
        "def solution():\n    steps_per_staircase = 12\n    total_staircases = 3\n\n    total_steps = steps_per_staircase * total_staircases\n\n    return total_steps\n\nans = solution()"
    ],
    "163d5569c8794822827aa5f3fb2a9e54": [
        "def solution():\n    total_people = 23\n    people_behind = 14\n    people_in_front = total_people - people_behind - 1  # Subtracting Louis himself\n    return people_in_front\n\nans = solution()"
    ],
    "cb7de8383bda423f846c2a0d41099259": [
        "def solution():\n    total_balls = 27\n    balls_per_bag = 5\n    remaining_balls = 2\n\n    bags_used = (total_balls - remaining_balls) // balls_per_bag\n\n    return bags_used\n\nans = solution()"
    ],
    "192ed864378f46f0992b02857290262e": [
        "def solution():\n    return sum(range(2, 9))\n\nans = solution()"
    ],
    "99153d571f7b47888d63eeb16f4101aa": [
        "def solution():\n    return 730 / 1000\n\nans = solution()"
    ],
    "d70de15ac2b64e119755895c7c1775b0": [
        "def solution():\n    cookies_per_gram = 25 / 20\n    cookies_with_48_grams = cookies_per_gram * 48\n    return int(cookies_with_48_grams)\n\nans = solution()"
    ],
    "350b297b009e49fa80ba80c3b2e816be": [
        "def solution():\n    # In the worst case scenario, we draw 2 cards of each number without getting 3 of a kind.\n    # Since there are 13 different numbers, we can draw 2 of each number without getting 3 of the same.\n    worst_case_draws = 2 * 13\n\n    # Since we want to guarantee 3 cards with the same number,\n    # we need to draw one more card after the worst case scenario.\n    return worst_case_draws + 1\n\nans = solution()"
    ],
    "0c86c445fc0a4c6da74c3a666872027f": [
        "def solution():\n    n = 5 * (4 ** 2)\n    return n\n\nans = solution()"
    ],
    "ab65eb6366424791bc96225b7748674a": [
        "def solution():\n    result = (8/11) * 1.54\n    return result\n\nans = solution()"
    ],
    "7580babfb6664341b878371c05f2522f": [
        "def solution():\n    return 3597 // 11\n\nans = solution()"
    ],
    "91e8c0f537a24098854e3e9ad367ef40": [
        "def solution():\n    # Convert base 8 numbers to base 10, add them and convert back to base 8\n    num1_base10 = int('25', 8)\n    num2_base10 = int('37', 8)\n    \n    sum_base10 = num1_base10 + num2_base10\n    \n    ans = oct(sum_base10)[2:]  # Convert to base 8 and remove the '0o' prefix\n    return ans\n\nans = solution()"
    ],
    "15cc7b6d484d4ffcad21a4bb4923bca1": [
        "def solution():\n    ans = 5987 + 67 + 983\n    return ans\n\nans = solution()"
    ],
    "7bf99922eaaf4266b6882b0fd9059ea0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    boys, girls, adults = symbols('boys girls adults')\n    \n    # Set up the equations based on the problem statement\n    equation1 = Eq(boys, (2/7) * girls)    # There were 2/7 as many boys as girls\n    equation2 = Eq(adults, (2/3) * (boys + girls))    # There were 2/3 as many adults as children (boys + girls)\n    equation3 = Eq(adults - boys, 1228)    # There were 1228 more adults than boys at the park\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (boys, girls, adults))\n    \n    # Calculate the total number of people at the park\n    total_people = solutions[boys] + solutions[girls] + solutions[adults]\n    \n    # Return the total number of people at the park\n    return total_people\n\nans = solution()"
    ],
    "eb3a8e66576f4d9f9023ccfe7b7b53c5": [
        "def solution():\n    # Let the number of tennis rackets originally purchased be x\n    cost_per_racket = 150\n    selling_price_per_racket = 175\n    remaining_rackets = 8\n    profit = 525\n\n    # Total cost price for x rackets\n    total_cost = cost_per_racket * x\n\n    # Total selling price for (x - 8) rackets to make the initial total cost + $525 profit\n    total_selling_price = total_cost + profit\n\n    # The shop sold (x - 8) rackets at $175 each to cover the cost and profit\n    equation = (x - 8) * selling_price_per_racket - total_cost - profit\n\n    # Now we solve for x\n    x = (total_selling_price + (8 * selling_price_per_racket)) // selling_price_per_racket\n\n    return x\n\nans = solution()"
    ],
    "5a8b109d6748455c802ec8c38135b025": [
        "def solution():\n    ans = 12.4 / 40\n    return ans\n\nans = solution()"
    ],
    "888e7a05c66a49078a06713b83ca6ce1": [
        "def solution():\n    # Let x be the amount of money Gordon had at first\n    # Since they spend money daily, the number of days passed is equal to\n    # the difference divided by the difference in spending rates.\n    days_passed = (157 - 82) / (25 - 20)\n    \n    # The initial amount of money Gordon had, which is also the amount Chloe had,\n    # is equal to what Gordon has left plus what he spent.\n    initial_amount = 82 + days_passed * 25\n    \n    return initial_amount\n\nans = solution()"
    ],
    "3900795ab2d94196ad395c7483e5c648": [
        "def solution():\n    ans = 813 * 72\n    return ans\n\nans = solution()"
    ],
    "33e79ce7d01446d9a282b54a045a5e8e": [
        "def solution():\n    n = 10\n    ans = 1 + n * (n + 1) // 2 + (n * (n - 1) * (n - 2)) // 6\n    return ans\n\nans = solution()"
    ],
    "c96b47bede684b9f8ba38d50dd4e1086": [
        "def solution():\n    bags = 8\n    pens_per_bag = 4\n    total_pens = bags * pens_per_bag\n    return total_pens\n\nans = solution()"
    ],
    "ed32aedbb2a34499a71cf190747aeb19": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for student A's and B's scores\n    A, B = symbols('A B')\n\n    # Equation based on Student B's statement\n    equation1 = Eq(B + 24, A - 2)\n    # Equation based on Student A's statement\n    equation2 = Eq(A - 25, 5 * (B - 25))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (A, B))\n\n    # Return the score of student A\n    return solutions[A]\n\nans = solution()"
    ],
    "678881c9e47f44f59d88da4a1055e2af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(10 - 2 * (x - 9), 2 * x - 4 * (5 - x))\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "0b8067aa5d3f4321a2018a93d46b6c9e": [
        "def solution():\n    count = 0\n    for x1 in range(1, 14):\n        for x2 in range(x1+1, 14):  # Ensure x2 is greater than x1\n            for x3 in range(x2+1, 14):  # Ensure x3 is greater than x2\n                if x1 + x2 + x3 == 14:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "27c967821aaa4f3f9ac178e7c395b919": [
        "def solution():\n    factorial = 1\n    for i in range(1, 11):\n        factorial *= i\n\n    count = 0\n    while factorial % 10 == 0:\n        factorial //= 10\n        count += 1\n\n    return count\n\nans = solution()"
    ],
    "a5905a83aea54ed7b0165353ec295c7e": [
        "def solution():\n    total_melons = 20\n    cost = 15\n    bad_melons_fraction = 1/5\n    selling_price_per_melon = 1.50\n\n    good_melons = total_melons * (1 - bad_melons_fraction)\n    revenue = good_melons * selling_price_per_melon\n    profit = revenue - cost\n\n    return profit\n\nans = solution()"
    ],
    "7ce4a67e0ab846d8bd1eb78dffb57e9e": [
        "def solution():\n    oranges_divided = 150 - 17  # Number of oranges that were divided\n    apples_divided = 100 - 5    # Number of apples that were divided\n\n    # Find the greatest common divisor of the two numbers\n    from math import gcd\n    neighbours = gcd(oranges_divided, apples_divided)\n\n    return neighbours\n\nans = solution()"
    ],
    "a2a533fc1c424f969f5fae611daad3e8": [
        "def solution():\n    line_length = 10  # Line length in cm\n    cross_interval = 1  # Crosses are drawn every 1 cm\n\n    # The total number of crosses is one more than the line length due to the cross at the beginning \n    num_crosses = line_length // cross_interval + 1\n\n    return num_crosses\n\nans = solution()"
    ],
    "52bacc6ef48b44b8bc4d02992a7b6173": [
        "def solution():\n    return 8.7 * 3.4\n\nans = solution()"
    ],
    "9ed7da1b104344da81a0dc411168159e": [
        "def solution():\n    return 6.23 - 5.72\n\nans = solution()"
    ],
    "57ff93a0b8da463fa5f80c4c21a775ee": [
        "def solution():\n    # Let's denote the total initial value of jewels in P as P_total, \n    # and the total initial value of jewels in Q as Q_total.\n    # Each box originally has 3 jewels.\n    # After the transfer, P has 2 jewels and Q has 4 jewels.\n\n    # The average value of the jewels in each box increases by £1000 after the transfer.\n    # Therefore, the new average in P is (P_total - 5000) / 2 + 1000,\n    # and the new average in Q is (Q_total + 5000) / 4 + 1000.\n\n    # We can set up the equations as:\n    # (P_total - 5000) / 2 + 1000 = P_total / 3\n    # (Q_total + 5000) / 4 + 1000 = Q_total / 3\n\n    # Now, we simplify these equations to find P_total and Q_total:\n    # 3 * ((P_total - 5000) / 2 + 1000) = P_total => \n    # 3 * (P_total - 5000 + 2000) = 2 * P_total => \n    # P_total + 10000 - 15000 = 2 * P_total => \n    # P_total = 5000\n\n    # 3 * ((Q_total + 5000) / 4 + 1000) = Q_total => \n    # 3 * (Q_total + 5000 + 4000) = 4 * Q_total  => \n    # Q_total + 15000 + 12000 = 4 * Q_total => \n    # Q_total = 27000 / 3 => \n    # Q_total = 9000\n\n    # The total value of all 6 jewels is P_total + Q_total.\n    P_total = 5000\n    Q_total = 9000\n    total_value_all_jewels = P_total + Q_total\n\n    return total_value_all_jewels\n\nans = solution()"
    ],
    "684f885693764340afae67d6e64e96ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of marbles Sandra had more than Jessica initially\n    x = symbols('x')\n    \n    # After giving 13 marbles to Jessica, Sandra has x - 13 more marbles\n    # However, at this point Sandra has 6 fewer marbles than Jessica\n    # So, we equate x - 13 to -6\n    equation = Eq(x - 13, -6)\n\n    # Solve for x\n    ans = solve(equation, x)[0]\n\n    return ans\n\nans = solution()"
    ],
    "07c7c85bda4847ceafa321fc737bd219": [
        "def solution():\n    distance_between_first_sixth = 60 \n    number_of_intervals_first_sixth = 6 - 1  # because distance is between posts\n\n    distance_between_posts = distance_between_first_sixth / number_of_intervals_first_sixth\n\n    number_of_intervals_first_ninth = 9 - 1\n\n    distance_between_first_ninth = distance_between_posts * number_of_intervals_first_ninth\n\n    return distance_between_first_ninth\n\nans = solution()"
    ],
    "ce622d4ae66d44e1bcc0df82fbe961fc": [
        "def solution():\n    from math import comb\n\n    num_teams = 3\n    matches = comb(num_teams, 2)  # Choose 2 teams to play a match, without repetition\n\n    return matches\n\nans = solution()"
    ],
    "ee0568f16c2b4ce48ef303d392601ff8": [
        "def solution():\n    pattern_length = 6\n    green_in_pattern = 2\n    total_balloons = 75\n\n    full_patterns = total_balloons // pattern_length\n    remaining_balloons = total_balloons % pattern_length\n\n    green_balloons = full_patterns * green_in_pattern\n    if remaining_balloons > 2:\n        green_balloons += 1\n    if remaining_balloons > 5:\n        green_balloons += 1\n\n    return green_balloons\n\nans = solution()"
    ],
    "e29e4f297900441f9110516bd6b642d0": [
        "def solution():\n    total_strawberries = 15 + 27 + 19\n    strawberries_left = total_strawberries % 8\n\n    return strawberries_left\n\nans = solution()"
    ],
    "0edc4483e1764691b7f15e9bedcc4156": [
        "def solution():\n    count_1 = 0\n    count_2 = 0\n    N = 1\n    while True:\n        count_1 += str(N).count('1')\n        count_2 += str(N).count('2')\n        if count_1 == 15 and count_2 == 14:\n            break\n        N += 1\n    return N\n\nans = solution()"
    ],
    "33e6fe50af554266b27e4c2074a6a3f9": [
        "def solution():\n    friends = 7\n    friend_candy = 26\n    kate_candy = 22\n    \n    # Total candy shared at school\n    school_candy = friends * friend_candy + kate_candy\n    \n    # Total initial candy (inverse of 2/3)\n    initial_candy = school_candy * 3 // 2\n\n    return initial_candy\n\nans = solution()"
    ],
    "14e3978e40d049dbad0dcf4a4cf738df": [
        "def solution():\n    # Speed ratio between Andy and Bob\n    speed_ratio = 9 / 5\n    \n    # Floor Bob will reach when Andy is at the top floor (25th)\n    bob_final_floor = 25 / speed_ratio\n    \n    return int(bob_final_floor)\n\nans = solution()"
    ],
    "66aa3aec53fa48d1aa6897cfab540921": [
        "def solution():\n    ans = 8 / (2/3)\n    return ans\n\nans = solution()"
    ],
    "0f48eb78665e4e5ba3b372be6f2eab93": [
        "def solution():\n    for m in range(10):\n        if int(f\"12{m}\") == 9 * int(f\"1{m}\") - 2:\n            return m\n\nans = solution()"
    ],
    "eefc87844ecc4f2285ce5feedafa6913": [
        "def solution():\n    depth = 8\n    climb_up = 3\n    slip_down = 2\n    total_climbed = 0\n    day = 0\n\n    while total_climbed < depth:\n        day += 1\n        total_climbed += climb_up\n        if total_climbed >= depth:\n            break\n        total_climbed -= slip_down\n\n    return day\n\nans = solution()"
    ],
    "593a8f96d20c408d86fda58e89c71746": [
        "def solution():\n    lights = [False] * 10  # Initialize all lights to be off (False)\n\n    # Ms. Lily presses every other light switch, starting from 1\n    lights = [not lights[i] if i % 2 == 0 else lights[i] for i in range(len(lights))]\n\n    # Sam presses each even numbered switch 7 times\n    lights = [not lights[i] if (i+1) % 2 == 0 and 7 % 2 != 0 else lights[i] for i in range(len(lights))]\n\n    # Count the number of lights that are on\n    return lights.count(True)\n\nans = solution()"
    ],
    "fc7f764e9d664c45bf77553a3e6315b8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the amount of water in Pail A be A liters, and in Pail B be B liters\n    A, B = symbols('A B')\n\n    # Initial condition: A has 2/3 as much water as B\n    equation1 = Eq(A, 2/3 * B)\n\n    # After pouring:\n    # A will have A + 4 liters and B will have B - 4 liters\n    # A will contain 7/8 as much water as B\n    equation2 = Eq(A + 4, 7/8 * (B - 4))\n\n    # Solve the two simultaneous equations\n    solutions = solve((equation1, equation2), (A, B))\n\n    A_liters = solutions[A]\n    B_liters = solutions[B]\n\n    # The total amount of water is the sum of A and B\n    total_water = A_liters + B_liters\n\n    return total_water\n\nans = solution()"
    ],
    "25e5a7db39a14e5080bf1594f85931a6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    words, speed = symbols('words speed')\n    time_original = 3  # original time in minutes\n    time_faster = time_original - 1  # time when typing faster in minutes\n\n    # Equation for original speed: words = speed * time_original\n    equation1 = Eq(words, speed * time_original)\n\n    # Equation for faster speed: words = (speed + 30) * time_faster\n    equation2 = Eq(words, (speed + 30) * time_faster)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (words, speed))\n\n    return solutions[words]\n\nans = solution()"
    ],
    "0442d07405364ff5bc82f86bcabbc881": [
        "def solution():\n    initial_volume = 900  # ml\n    initial_sugar_percentage = 0.06\n    final_sugar_percentage = 0.10\n    \n    initial_sugar = initial_volume * initial_sugar_percentage\n    final_sugar = initial_volume * final_sugar_percentage\n    \n    sugar_to_add = final_sugar - initial_sugar\n    \n    return sugar_to_add\n\nans = solution()"
    ],
    "841da503f5384dbabdbc92f2a781fe22": [
        "def solution():\n    dresses_per_day_per_seamstress = 2\n    number_of_seamstresses = 2\n    number_of_days = 9\n\n    total_dresses = dresses_per_day_per_seamstress * number_of_seamstresses * number_of_days\n\n    return total_dresses\n\nans = solution()"
    ],
    "2891d5c6bf714aaaaf484ccacdcf4660": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n\n    equation1 = Eq(table, 2 * chair)\n    equation2 = Eq(2 * table + 3 * chair, 280)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "957e833104764c96b1f4eea0f026e06f": [
        "def solution():\n    parts_made = 20\n    hours_spent = 2\n    total_parts_needed = 100\n\n    rate_per_hour = parts_made / hours_spent\n    remaining_parts_needed = total_parts_needed - parts_made\n    time_needed = remaining_parts_needed / rate_per_hour\n\n    return time_needed\n\nans = solution()"
    ],
    "b18d474df71d462c9b1d16e929a17ca3": [
        "def solution():\n    cost_per_bar = 50  # cost in pence for one chocolate bar\n    number_of_bars = 4  # number of chocolate bars\n\n    total_cost = cost_per_bar * number_of_bars  # total cost for 4 bars\n\n    return total_cost\n\nans = solution()"
    ],
    "a9df9fef73994fa0adfd6c7233026811": [
        "def solution():\n    # We need at least one ball of each color.\n    # In the worst case, we could draw all of one color first, and then all of another color.\n    # So, we draw 5 balls of the first color, then 5 of the second color. \n    # The next ball we draw must be of the third color.\n    # Therefore, it would take 5 (first color) + 5 (second color) + 1 (guaranteed third color) balls.\n    return 5 + 5 + 1\n\nans = solution()"
    ],
    "53629bc84abc46a99608abaf3f651c5c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    grade4, grade5, grade6 = symbols('grade4 grade5 grade6')\n\n    equation1 = Eq(grade5, 2 * grade4 + 4)\n    equation2 = Eq(grade6, 3 * grade4 + 8)\n    equation3 = Eq(grade4 + grade5 + grade6, 720)\n\n    solutions = solve((equation1, equation2, equation3), (grade4, grade5, grade6))\n\n    return solutions[grade6]\n\nans = solution()"
    ],
    "94b2228e40b74d7c81c5e89a014088b7": [
        "from math import comb\n\ndef solution():\n    # Total number of ways to pick 2 balls out of 5 colors\n    total_ways = comb(5, 2)\n    # Since each person can take the same combination in two different orders, we multiply by 2\n    total_ways *= 2\n    # One extra person is needed to ensure that at least two people have the same kind of balls\n    people_needed = total_ways + 1\n    \n    return people_needed\n\nans = solution()"
    ],
    "d432ce5fae8d408da28df3d9a18e9baf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hisham, melissa = symbols('hisham melissa')\n    \n    # Melissa had twice as many cards as Hisham\n    equation1 = Eq(melissa, 2 * hisham)\n    # Together, Hisham and Melissa had 876 cards\n    equation2 = Eq(hisham + melissa, 876)\n    \n    # Solve the equations to find the number of cards each person originally had\n    solutions = solve((equation1, equation2), (hisham, melissa))\n    \n    # Calculate the number of cards Melissa should give Hisham to have the same number\n    cards_to_give = (solutions[melissa] - solutions[hisham]) / 2\n    \n    return cards_to_give\n\nans = solution()"
    ],
    "cfb59b638eb341b18ad204a7ce303359": [
        "def solution():\n    ans = 20504 // 8\n    return ans\n\nans = solution()"
    ],
    "6a23c9856a834221b62e63996c06f972": [
        "def solution():\n    first_term = 5\n    third_term = 19\n    common_difference = (third_term - first_term) / (3 - 1)\n    return common_difference\n\nans = solution()"
    ],
    "028b46b0fbd045fa90a02a752e75494c": [
        "def solution():\n    # To ensure two numbers have a product divisible by 4, at least one of them\n    # must be even. Since the worst-case scenario would be picking all odd numbers\n    # first (of which there are half of the total), we pick all odd ones plus one more number\n    # to ensure getting an even number.\n\n    # Count of all integers from 10 to 41 inclusive\n    total_count = 41 - 10 + 1\n\n    # Count of odd integers from 10 to 41\n    odd_count = total_count // 2\n\n    # At least one more number must be drawn to ensure it's even\n    # This will be our answer\n    ans = odd_count + 1\n\n    return ans\n\nans = solution()"
    ],
    "0370e917ba5444c99e91df970a15bb74": [
        "def solution():\n    total_length_cm = 2 * 100 + 20  # Convert meters to centimeters\n    each_piece_length = total_length_cm / 2\n    return each_piece_length\n\nans = solution()"
    ],
    "555f0cafaf514767b0fe800156cb0727": [
        "def solution():\n    number_of_cakes = 195\n    cost_per_cake = 46\n\n    total_cost = number_of_cakes * cost_per_cake\n\n    return total_cost\n\nans = solution()"
    ],
    "4a1f680de9ae4c519ea93c401f8702e6": [
        "def solution():\n    part1 = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.45)\n    part2 = (1 + 0.23 + 0.34 + 0.45) * (0.23 + 0.34)\n    ans = part1 - part2\n    return ans\n\nans = solution()"
    ],
    "284c25d3574441a78eaf010240003c8c": [
        "def solution():\n    ans = sum([(50 - i) * (50 + i) for i in range(5)])\n    return ans\n\nans = solution()"
    ],
    "6196c646546f4ef5bf8c9473472fe841": [
        "def solution():\n    total_strawberries = 15 + 27 + 19\n    strawberries_left = total_strawberries % 8\n    return strawberries_left\n\nans = solution()"
    ],
    "aa9463208898426a81ae9e66616bff47": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variable for the missing number in the denominator\n    x = symbols('x')\n    \n    # Construct the equation\n    equation = Eq((40 / (x + 5)), 5)\n    \n    # Solve the equation for x\n    solution = solve(equation, x)\n    \n    # There may be multiple solutions, return the first one\n    return solution[0]\n\nans = solution()"
    ],
    "7a03810f71064f1b8a00a0c741b7d68e": [
        "def solution():\n    # Each friend received 26 pieces of candy\n    candy_per_friend = 26\n\n    # Kate has 7 friends, so total candy shared at school\n    candy_shared = candy_per_friend * 7\n\n    # Kate left with 22 pieces of candy\n    candy_left = 22\n\n    # Total candy she brought to school\n    candy_brought_to_school = candy_shared + candy_left \n\n    # She ate 1/3 at home, so she brought 2/3 to school\n    # candy_brought_to_school = 2/3 of total candy\n    total_candy = candy_brought_to_school * 3 / 2\n\n    return int(total_candy)\n\nans = solution()"
    ],
    "6c18ef58e8b240a0b1d815b125d4e754": [
        "def solution():\n    ans = 9 / 0.2\n    return ans\n\nans = solution()"
    ],
    "0249d770955143e49182729ffbddfa3d": [
        "def solution():\n    euro_to_dollar_rate = 0.96\n    coffee_cost_euros = 4.8\n\n    coffee_cost_dollars = coffee_cost_euros / euro_to_dollar_rate\n\n    return coffee_cost_dollars\n\nans = solution()"
    ],
    "7f0edbf8e5cb484f87961218f9db99d0": [
        "from itertools import permutations\n\ndef solution():\n    max_N = float('-inf')\n    \n    for p in permutations(range(1, 10)):\n        a, b, c, d, e, f, g, h, j = p\n        N = a + b / c + (d / e) * f - (g + h / j)\n        \n        if N.is_integer() and N > max_N:\n            max_N = N\n            \n    return int(max_N)\n\nans = solution()"
    ],
    "105d3ea760424235a98e71c0d8ca6303": [
        "def solution():\n    max_product = 0\n    for A in range(1, 20):\n        for B in range(1, 20 - A):\n            C = 19 - A - B\n            max_product = max(max_product, A * B * C)\n    return max_product\n\nans = solution()"
    ],
    "6a75c42493d548a6833f83188863c29b": [
        "def solution():\n    from math import lcm\n    ans = lcm(12, 56)\n    return ans\n\nans = solution()"
    ],
    "062deceefd35411f997b29c901129f1c": [
        "def solution():\n    return 9650\n\nans = solution()"
    ],
    "020a47d927424600b54866be0f9e7377": [
        "def solution():\n    total_books_initial = 3900\n    ratio_chinese = 4\n    ratio_malay = 3\n    ratio_english = 6\n    total_ratio = ratio_chinese + ratio_malay + ratio_english\n\n    chinese_initial = (ratio_chinese / total_ratio) * total_books_initial\n    malay_initial = (ratio_malay / total_ratio) * total_books_initial\n    english_initial = (ratio_english / total_ratio) * total_books_initial\n\n    total_books_final = total_books_initial + 510\n    chinese_final = chinese_initial * 1.20\n    malay_final = malay_initial * 1.10\n\n    books_distributed_to_chinese_and_malay = chinese_final + malay_final - (chinese_initial + malay_initial)\n    english_final = total_books_final - books_distributed_to_chinese_and_malay - english_initial\n\n    increase_in_english = english_final - english_initial\n    percentage_increase_english = (increase_in_english / english_initial) * 100\n\n    return percentage_increase_english\n\nans = solution()"
    ],
    "0c10d6b8653d43ff821582cda7ac2c32": [
        "def solution():\n    # Four years ago, let's the current combined age of the 2 dogs be x years\n    # Therefore, x - 4 = 10 (four years ago, the combined ages)\n\n    current_combined_age = 10 + 4  # Bringing the equation to the current time\n\n    # What will their combined age be in 2 years?\n    combined_age_in_2_years = current_combined_age + (2 * 2)  # Adding 2 years for each dog\n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "51c43a6b56234d0e83f79c035496cdfc": [
        "def solution():\n    # Number of juniors and seniors\n    juniors = 12\n    seniors = 8\n    \n    # Average score of juniors and the whole\n    avg_juniors = 10\n    avg_all = 14\n    \n    # Total score of juniors and the whole\n    total_juniors = avg_juniors * juniors\n    total_all = avg_all * (juniors + seniors)\n    \n    # Total score of seniors\n    total_seniors = total_all - total_juniors\n    \n    # Average score of seniors\n    avg_seniors = total_seniors / seniors\n    \n    return avg_seniors\n\nans = solution()"
    ],
    "38dff589122e45f682f4fbac9629ef22": [
        "def solution():\n    total_questions = 90\n    percent_correct = 60\n    correct_marks = 5\n    wrong_marks = -2\n    unanswered_marks = 1\n\n    total_correct = total_questions * (percent_correct / 100)\n    total_wrong = total_questions - total_correct\n    total_unanswered = total_questions - total_correct\n\n    # Let x be the number of questions answered correctly\n    # then (total_correct - x) is the number of questions answered incorrectly\n    x = symbols('x')\n    equation = Eq(correct_marks * x + wrong_marks * (total_correct - x) + unanswered_marks * total_unanswered, 264)\n\n    ans = solve(equation, x)[0]\n\n    return ans\n\nans = solution()"
    ],
    "61ca6c49f97240f88a3d539f152d6ee5": [
        "def solution():\n    # According to the Pigeonhole Principle, if n pigeons are put into m pigeonholes,\n    # and if n > m, then at least one pigeonhole must contain more than one pigeon.\n\n    # In this case, we're looking for the minimum number of apples (pigeons) such that\n    # no matter how they are distributed in the containers (pigeonholes), one container\n    # (pigeonhole) will have at least 2 apples (pigeons).\n\n    # Number of containers is 10, so if we had 10 apples, we could put one in each container,\n    # following the Pigeonhole Principle, we need at least one more apple to ensure that\n    # one container has at least 2 apples.\n\n    containers = 10\n    apples = containers + 1  # One more apple than the number of containers\n\n    return apples\n\nans = solution()"
    ],
    "ad17dd64f37241d8a7ec221ca69a178b": [
        "def solution():\n    numerator = 1058\n    denominator = 92\n    factor = 10 ** (2019 - 2018)\n    \n    ans = (numerator / denominator) * factor\n    return ans\n\nans = solution()"
    ],
    "7e469a60ae594c1eb1c906000dd9e1b3": [
        "def solution():\n    total_questions = 25\n    points_correct = 4\n    points_incorrect = -2\n    points_unattempted = 0\n    rex_score = 66\n    rex_unattempted = 1\n\n    # Let's denote the number of correct answers as 'c'.\n    # The number of incorrect answers would then be '24 - c' \n    # (since Rex answered all but one question and there's only one unattempted question).\n    # Setting up the equation based on the given problem.\n    # The total score is equal to the score from correct answers\n    # plus the score from incorrect answers.\n\n    # Score from correct answers  -> c * points_correct\n    # Score from incorrect answers -> (24-c) * points_incorrect\n    # Total score -> rex_score (66)\n    # So the equation will be:\n    # c * points_correct + (24-c) * points_incorrect = rex_score\n\n    # Now we can simply solve for 'c'.\n    c = (rex_score - (24 * points_incorrect)) / (points_correct - points_incorrect)\n    \n    return c\n\nans = solution()"
    ],
    "158af0779d9e4980a24fe0fec884683c": [
        "def solution():\n    cookies_per_gram_of_butter = 160 / 50\n    grams_needed_for_300_cookies = 300 / cookies_per_gram_of_butter\n    return grams_needed_for_300_cookies\n\nans = solution()"
    ],
    "85cb1cd4dcbe4dca96112c2906555a7c": [
        "def solution():\n    return 15.9 * 2\n\nans = solution()"
    ],
    "eb93ba1f7aac42b6a7670ab7c76772c4": [
        "def solution():\n    # Initialize counter for the number of digits and the current number\n    digits_count = 0\n    current_number = 1\n    \n    # Loop until the digits_count reaches 1000\n    while True:\n        # Convert current number to string and get the length (number of digits)\n        str_num = str(current_number)\n        num_digits = len(str_num)\n        \n        # If adding this number will exceed 1000 digits, break the loop\n        if digits_count + num_digits >= 1000:\n            break\n        \n        # Otherwise, add the number of digits to the counter and increment the current number\n        digits_count += num_digits\n        current_number += 1\n    \n    # Find the remaining number of digits needed to reach 1000\n    remaining_digits = 1000 - digits_count\n    \n    # Get the specific digit at the remaining_digits index from the last current_number used\n    unit_digit = int(str(current_number)[remaining_digits - 1])\n    \n    return unit_digit\n\nans = solution()"
    ],
    "33c000792028428a9334d9f3595c547f": [
        "def solution():\n    return (19 + 2) / 3\n\nans = solution()"
    ],
    "748996495b98460c9ede4e3d079565a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jane, jack = symbols('jane jack')\n    \n    equation1 = Eq(jane - jack, 5)\n    equation2 = Eq(jane + jack, 33)\n    \n    solutions = solve((equation1, equation2), (jane, jack))\n\n    return solutions[jane]\n\nans = solution()"
    ],
    "f4f1fe067a974d22bfe3b0f49a7ee798": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    dedra, timm = symbols('dedra timm')\n    \n    # Dedra had 4 times as much money as Timm at first.\n    initial_condition = Eq(dedra, 4 * timm)\n    \n    # Both received $72 each.\n    dedra_received = dedra + 72\n    timm_received = timm + 72\n    \n    # Now, Dedra has twice as much money as Timm.\n    final_condition = Eq(dedra_received, 2 * timm_received)\n    \n    # Solve the system of equations\n    solutions = solve((initial_condition, final_condition), (dedra, timm))\n\n    return solutions[dedra]  # Initial amount Dedra had\n\nans = solution()"
    ],
    "6c63bbe1764848a7a7edbe24ddc026e9": [
        "def solution():\n    # Count of fruits containing individual vitamins\n    A = 62\n    C = 90\n    E = 68\n    \n    # Count of fruits containing vitamins together\n    AC = 48\n    AE = 36\n    CE = 50\n    \n    # Count of fruits containing all three vitamins\n    ACE = 25\n    \n    # Using the Inclusion-Exclusion Principle for three sets\n    total = A + C + E - AC - AE - CE + ACE\n    \n    return total\n\nans = solution()"
    ],
    "390c6b384a7c47feba87ecb9961bf4c4": [
        "def solution():\n    ans = 6.91 - 0.13\n    return ans\n\nans = solution()"
    ],
    "26973dde1699489cb5a3ca2bb878350e": [
        "def solution():\n    cost_per_bar = 50\n    num_bars = 4\n    total_cost = cost_per_bar * num_bars\n    return total_cost\n\nans = solution()"
    ],
    "6a9590e4dc124affafcabb1bb2c4dbf3": [
        "def solution():\n    ans = 257.36 / 0.4\n    return ans\n\nans = solution()"
    ],
    "bfaf5aa76fe74c98aade35dd2f53d568": [
        "from math import factorial\n\ndef solution():\n    total_pupils = 18\n    pupils_to_seat = 3\n    \n    ways = factorial(total_pupils) // factorial(total_pupils - pupils_to_seat)\n    \n    return ways\n\nans = solution()"
    ],
    "9561236e6a034115a599777cf75dad5c": [
        "def solution():\n    ans = 6.31 - 3.2\n    return ans\n\nans = solution()"
    ],
    "9874ade3ca974e3a9cbed1309bdbedc8": [
        "def solution():\n    monthly_salary = 1.4\n    debt = 5.04\n    \n    months_needed = debt / monthly_salary\n    \n    return months_needed\n\nans = solution()"
    ],
    "6a64f533a5b44e0a81122bb8514d9b21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jake, john = symbols('jake john')\n    equation1 = Eq(jake + john, 44)  # Sum of their current ages\n    equation2 = Eq(jake + 14, 2 * (john + 14))  # Jake will be twice as old as John in 14 years\n\n    solutions = solve((equation1, equation2), (jake, john))\n\n    john_age_in_14_years = solutions[john] + 14  # John's age in 14 years\n\n    return john_age_in_14_years\n\nans = solution()"
    ],
    "b999190a8cc2489a92311c186296685f": [
        "def solution():\n    veronica_money = 9\n    jonathan_money = 3 * veronica_money\n    rachel_money = jonathan_money + 48\n    return rachel_money\n\nans = solution()"
    ],
    "d60abe09efb64d48bd30a37956fbb0c9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack, jason, bruce, willie = symbols('jack jason bruce willie')\n    jack_age = 4\n\n    # Since Bruce and Willie are the same age as Jason, we can use one variable for all\n    # Equation: jack + jason + bruce + willie = 19\n    # Substituting the ages: 4 + jason + jason + jason = 19\n    equation = Eq(jack_age + 3*jason, 19)\n\n    solutions = solve(equation, jason)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "1cf4ab67a6aa43e2b4e76978de4840ad": [
        "def solution():\n    # Let the number of friends be f, and the number of erasers be e.\n    # According to the first scenario, each friend received 5 erasers and 3 were left,\n    # so the total number of erasers is e = 5f + 3.\n    # According to the second scenario, if each friend received 6 erasers,\n    # Andy would be short of 2 erasers, so the total number of erasers is e = 6f - 2.\n    # These two equations can be equated to find the number of friends and number of erasers.\n\n    # e = 5f + 3\n    # e = 6f - 2\n    # Thus, 5f + 3 = 6f - 2\n    # Solving for f gives f = 5.\n\n    # Substitute the number of friends back into the first equation to find the number of erasers:\n    # e = 5f + 3\n    # e = 5 * 5 + 3\n    # e = 25 + 3\n    # e = 28\n    # Andy had 28 erasers.\n\n    return 28\n\nans = solution()"
    ],
    "4d93eb426c534eb2b0fcd1e85de53d1d": [
        "def solution():\n    future_value = 2360\n    annual_interest_rate = 0.06\n    years = 3\n\n    present_value = future_value / ((1 + annual_interest_rate) ** years)\n\n    return present_value\n\nans = solution()"
    ],
    "57e7b37a36d64b3ea1c8eaf24798521c": [
        "def solution():\n    total_length_cm = 220  # Convert 2 m 20 cm to cm\n    piece_length = total_length_cm / 2\n    return piece_length\n\nans = solution()"
    ],
    "db674de270ac4711b415cc34c37f9aff": [
        "def solution():\n    part1 = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.45)\n    part2 = (1 + 0.23 + 0.34 + 0.45) * (0.23 + 0.34)\n    ans = part1 - part2\n    return ans\n\nans = solution()"
    ],
    "d1a297dde50e43a99002f159a8a8b64a": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 2008):\n        total_sum += (i**2 + (i+1)**2) / (i * (i+1))\n    ans = round(total_sum)\n    return ans\n\nans = solution()"
    ],
    "c65b1dcd5d9542dc8301c97e47a9f794": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create a symbol for the age of the youngest child\n    youngest = symbols('youngest')\n\n    # Calculate the age of the oldest child which is six times the youngest\n    oldest = 6 * youngest\n\n    # Given that there are 9 children at regular intervals of 15 months,\n    # we can write an equation for the sum of their ages by using the formula\n    # for the sum of an arithmetic sequence: sum = n/2 * (first_term + last_term)\n    # We have 9 terms, and the common difference is 15 months.\n    # The first term is the age of the youngest child, and the last term is the age of the oldest.\n    n = 9\n    common_difference = 15 / 12  # converting months to years\n    sum_of_ages = n/2 * (youngest + oldest)\n\n    # We also know that the difference in age between consecutive children is 15 months,\n    # So the age of the second child is youngest + 1*common_difference,\n    # the third child is youngest + 2*common_difference, and so on.\n    # We sum all these up to get the equation for the sum of ages.\n    total_sum_of_ages = sum(youngest + i * common_difference for i in range(n))\n\n    # Since the sum_of_ages is equal to the total_sum_of_ages, we can equate them\n    # and solve for the value of the youngest child's age.\n    equation = Eq(sum_of_ages, total_sum_of_ages)\n\n    # Solving the equation for the age of the youngest child.\n    solution = solve(equation, youngest)\n\n    # We return the first (and only) solution.\n    return solution[0]\n\nans = solution()"
    ],
    "2763d0dc70154f8c927352d51849cbe4": [
        "def solution():\n    for thousands in range(1, 10):\n        for hundreds in range(0, 10):\n            for tens in range(0, 10):\n                for ones in range(0, 10):\n                    original_number = thousands * 1000 + hundreds * 100 + tens * 10 + ones\n                    new_number = ones * 1000 + thousands * 100 + hundreds * 10 + tens\n                    if new_number - original_number == 5877:\n                        return original_number\n\nans = solution()"
    ],
    "fd0626678d7e40de84c59fc2f0b662e1": [
        "def solution():\n    ans = 2.5 * 7.7 + 0.25 * 23\n    return ans\n\nans = solution()"
    ],
    "28b3d4a0798e4f5d952dbe5322188194": [
        "def solution():\n    from math import lcm\n    return lcm(12, 56)\n\nans = solution()"
    ],
    "1ebf8cccb54b4188b3cdecb0ff9b3e1b": [
        "def solution():\n    ans = 75 * 0.29 + (75/100) * 74 - 0.3 / (2/15)\n    return ans\n\nans = solution()"
    ],
    "3a0b88faf37e4067b5a697aa6c171c8d": [
        "def solution():\n    average_without_mary = 72\n    average_with_mary = 75\n    number_of_students = 6\n\n    total_without_mary = average_without_mary * (number_of_students - 1)\n    total_with_mary = average_with_mary * number_of_students\n\n    mary_score = total_with_mary - total_without_mary\n\n    return mary_score\n\nans = solution()"
    ],
    "e1cf756e61684775af46c3970f3ab17f": [
        "def solution():\n    train_length = 200\n    bridge_length = 220\n    speed = 60\n\n    total_distance = train_length + bridge_length\n\n    time = total_distance / speed\n\n    return time\n\nans = solution()"
    ],
    "176806bd2d38491fb95d4bb561a6bcc2": [
        "def solution():\n    total_cookies = 200\n    morning_cookies = total_cookies * (1/5)\n    remainder_cookies = total_cookies - morning_cookies\n    afternoon_cookies = remainder_cookies * (3/4)\n    \n    return afternoon_cookies\n\nans = solution()"
    ],
    "342cd5472a69472ab392495beba4ee8b": [
        "def solution():\n    # Let's use algebra to set up the problem.\n    # Let x be the number of sweets Jiaxiang has.\n    # Cayden has 5 more sweets than Jiaxiang, so Cayden has x + 5 sweets.\n    # If Cayden gives Jiaxiang 10 sweets, Cayden will have (x + 5) - 10 sweets left.\n    # After giving away the sweets, Jiaxiang will have x + 10 sweets.\n    # The difference in number of sweets they have now is |(x + 10) - ((x + 5) - 10)|.\n\n    # Simplifying the expression for the difference:\n    difference = abs((x + 10) - (x - 5))\n\n    # Since we haven't been given specific numbers for x, we can assume any value for x.\n    # The difference after the exchange of sweets will always be 15,\n    # because it is independent of the original number of sweets that Jiaxiang had.\n    # This is because the +x in Jiaxiang's final amount and -x in Cayden's final amount cancel each other out.\n    # Hence, we have |(x + 10) - (x - 5)| = |10 - (-5)| = |15| = 15\n    difference = 15\n\n    return difference\n\nans = solution()"
    ],
    "439376d5d90d4b149b7e06233ef1f948": [
        "def solution():\n    for num in range(999, 99, -2):  # Start from the greatest 3-digit odd number and decrement by 2.\n        if num % 9 == 0 and (num // 10) % 10 % 4 == 0:\n            return num\n\nans = solution()"
    ],
    "2610ab8c39aa47039e5d5e3e44e751e3": [
        "def solution():\n    distance = 48\n    speed = 8\n    correct_time = distance / speed\n    return correct_time\n\nans = solution()"
    ],
    "850576e4f94e42508fc4e975ba331970": [
        "def solution():\n    # to guarantee 4 different coloured marbles, Jane must draw all of one colour and all but one of a second colour:\n    # This is the worst case scenario under the pigeonhole principle\n    total_draws = 4 + 7 + 6 - 1  # All reds, greens and 5 blues to ensure getting 4 different colours\n  \n    return total_draws\n\nans = solution()"
    ],
    "a9f9d09538154b1e94723a8e9651f18f": [
        "from math import comb\n\ndef solution():\n    # Since each student must get at least one doughnut, we give 1 to each first.\n    remaining_doughnuts = 11 - 4\n    \n    # The number of ways to distribute the remaining doughnuts is a problem of \n    # partitions with indistinguishable items into distinguishable boxes. This can \n    # be thought of as distributing the remaining doughnuts among 4 students, which is \n    # equivalent to finding combinations with repetitions.\n    ans = comb(remaining_doughnuts + 4 - 1, remaining_doughnuts)\n    \n    return ans\n\nans = solution()"
    ],
    "16953792ef8c48809eac37a4caf5d3f5": [
        "def solution():\n    ans = 0.2 * 7\n    return ans\n\nans = solution()"
    ],
    "e81257a894bf49f182de3109989a386e": [
        "def solution():\n    midday_temp = 4\n    drop_temp = 11\n    midnight_temp = midday_temp - drop_temp\n\n    return midnight_temp\n\nans = solution()"
    ],
    "e3d851587fc14bcdbe8c7bfda9cd6200": [
        "def solution():\n    # Define the values of the coins in pence (5p, 10p, 20p, 50p, and 100p(£1))\n    coins = [5, 10, 20, 50, 100] # 100p is equivalent to £1\n\n    # Total amount in pence Angela could have paid (500p is equivalent to £5)\n    total_amount = 500\n\n    # Check each possible combination of 5 coins (must be different)\n    for c1 in coins:\n        for c2 in [c for c in coins if c != c1]:\n            for c3 in [c for c in coins if c not in (c1, c2)]:\n                for c4 in [c for c in coins if c not in (c1, c2, c3)]:\n                    for c5 in [c for c in coins if c not in (c1, c2, c3, c4)]:\n                        # If Angela received these coins as change, she spent the following amount:\n                        spent = total_amount - (c1 + c2 + c3 + c4 + c5)\n                        # If the spent amount is a multiple of 5, that's a valid amount she could have spent\n                        if spent % 5 == 0:\n                            return spent\n\nans = solution()"
    ],
    "04e3e33129dc4f65bfae11d6c879f614": [
        "def solution():\n    current_honey = 50\n    desired_honey = 90\n    current_hives = 5\n    \n    hives_needed = (desired_honey * current_hives) // current_honey\n    \n    additional_hives = hives_needed - current_hives\n    \n    return additional_hives\n\nans = solution()"
    ],
    "c5a32fbb6fcb46b48f3e67ce27fcc7b2": [
        "def solution():\n    first_term = 4\n    difference = 3\n    nth_term = 23\n\n    nth_term_value = first_term + (nth_term - 1) * difference\n\n    return nth_term_value\n\nans = solution()"
    ],
    "f015194282af429a8af72aaa964f578e": [
        "def solution():\n    from math import sqrt\n\n    # Movement to the east and west will cancel out partially, and we take the absolute value\n    horizontal_distance = abs(15 - 9)  # Remaining eastward displacement\n\n    # The total vertical northward distance is just the sum of the two northward movements\n    vertical_distance = 3 + 5  # Total northward displacement\n\n    # Compute the straight-line distance using Pythagorean theorem\n    shortest_distance = sqrt(horizontal_distance**2 + vertical_distance**2)\n\n    return shortest_distance\n\nans = solution()"
    ],
    "b7e31907e86c496e848fa4239fbfcc8e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define variables for Ali and Kumar's original number of erasers\n    ali, kumar = symbols('ali kumar')\n\n    # Create equations based on the problem's statement\n    # Original ratio\n    equation1 = Eq(ali / kumar, 7/5)\n    # After Ali gives Kumar 10 erasers\n    equation2 = Eq((ali - 10) / (kumar + 10), 1/5)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (ali, kumar))\n\n    # Sum of Ali's and Kumar's erasers to get the total amount before Ali gave Kumar 10 erasers.\n    total_erasers = solutions[ali] + solutions[kumar]\n\n    return total_erasers.evalf()\n\nans = solution()"
    ],
    "3d7b8c3bc3f54a2dbce551c74529dd16": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of $10 and $2 notes\n    notes_10, notes_2 = symbols('notes_10 notes_2')\n\n    # Create equations based on the problem statement\n    # Equation 1: Total number of notes\n    equation1 = Eq(notes_10 + notes_2, 38)\n    \n    # Equation 2: Remaining $10 notes is thrice the remaining $2 notes\n    # After spending 80% of $10 notes, there's 20% left\n    # After spending 75% of $2 notes, there's 25% left\n    equation2 = Eq(notes_10 * 0.20, 3 * (notes_2 * 0.25))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (notes_10, notes_2))\n\n    # Calculate the amount spent based on the solutions\n    spent_10_notes = solutions[notes_10] * 0.80 * 10\n    spent_2_notes = solutions[notes_2] * 0.75 * 2\n\n    # Total cost of the fan is the sum of money spent from both types of notes\n    cost_of_fan = spent_10_notes + spent_2_notes\n\n    return cost_of_fan\n\nans = solution()"
    ],
    "b5e98b7ca17e48e9aceb47ddcd12fb5e": [
        "import itertools\n\ndef solution():\n    cards = ['0', '3', '5', '8']\n    count = 0\n    \n    for number in itertools.permutations(cards, 4):\n        if number[0] != '0' and int(''.join(number)) > 5000:\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "999d1345ce434bc0b7648892d297c82e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2 + 3 * (x - 26), 52 - (x - 40))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "46cd8c8fc22a4192a04253ceaca842cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    a, b = symbols('a b')\n    \n    # Efficiency relation: a's efficiency is twice b's\n    eq1 = Eq(a, 2 * b)\n\n    # Time relation: a finishes in 5 days less than b\n    eq2 = Eq(1/a, 1/b - 5)\n\n    # Solve the equations\n    solutions = solve((eq1, eq2), (a, b))\n\n    # Return the time for B to finish the work\n    return solutions[b]\n\nans = solution()"
    ],
    "7866c751419b4d9097fee74972b01d9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, pear = symbols('banana pear')\n\n    equation1 = Eq(banana + 3 * pear, 84)\n    equation2 = Eq(banana + pear, 48)\n\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "5993b277c13b4ff38cb800c6c4a33a65": [
        "def solution():\n    scores = [16, 15, 16, 10]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "30f09344ca4a4013b33fc28adc31ff05": [
        "def solution():\n    total_time_minutes = (8 * 60) + 20  # Convert total hours to minutes\n    activity_and_break = 45 + 20        # Sum of one activity time and one break time\n\n    # Calculate the number of activities by dividing total time by the sum of activity time and break time\n    # We subtract the last break since there's no break after the last activity\n    num_activities = (total_time_minutes + 20) // activity_and_break\n    \n    return num_activities\n\nans = solution()"
    ],
    "ec93c9b0e33b4132b916d18ebb789c94": [
        "def solution():\n    result = (3/5) * 35\n    return result\n\nans = solution()"
    ],
    "899bd98193b34e558ea4353df664f200": [
        "def solution():\n    number = 123456\n    # Using the divisibility rule for 11: subtract and add the digits in alternate positions.\n    # If the result is a multiple of 11 (including 0), then the original number is divisible by 11.\n    digits = [int(d) for d in str(number)]\n    alternate_sum = sum(digits[::2]) - sum(digits[1::2])\n\n    if alternate_sum % 11 == 0:\n        is_divisible = True\n        remainder = 0\n    else:\n        is_divisible = False\n        remainder = alternate_sum % 11  # This gives the actual remainder\n\n    # Since George concluded without calculations, let's also give a way to check his conclusion without calculations.\n    george_correct = (alternate_sum == 1)\n\n    return is_divisible, remainder, george_correct\n\nans = solution()"
    ],
    "2fe30b6237e0498f8b46e088fbbc4301": [
        "def solution():\n    total_bulbs = 40\n    crocus_bulbs = 0.25 * total_bulbs\n    tulip_bulbs = (1/5) * total_bulbs\n    daffodil_bulbs = total_bulbs - (crocus_bulbs + tulip_bulbs)\n    return daffodil_bulbs\n\nans = solution()"
    ],
    "69bc4bec9bee483683d61a26cbefa4ac": [
        "def solution():\n    # Let a, b, c represent the weight of Adam, Ben, and Carl respectively.\n    # Given:\n    # a + b = 102\n    # b + c = 97\n    # a + c = 92\n    # The sum of all three equations gives us:\n    # 2(a + b + c) = 102 + 97 + 92\n    # Therefore:\n    total_weight_twice = 102 + 97 + 92\n    # Now we divide by 2 to get the total weight of Adam, Ben, and Carl.\n    total_weight = total_weight_twice / 2\n\n    return int(total_weight)\n\nans = solution()"
    ],
    "9f293803776049bca507bf11f748846b": [
        "def solution():\n    initial_length_m = 2.06  # initial length in meters\n    remaining_length_cm = 78  # remaining length in centimeters\n\n    # convert remaining length from cm to m\n    remaining_length_m = remaining_length_cm / 100\n\n    # calculate the length of icicle that had melted\n    melted_length_m = initial_length_m - remaining_length_m\n\n    return melted_length_m\n\nans = solution()"
    ],
    "66c27502b84244db8f72fb311fd7f115": [
        "def solution():\n    percentage = 40\n    total_grams = 650\n\n    ans = (percentage / 100) * total_grams\n    return ans\n\nans = solution()"
    ],
    "ee942986e3444be99926258561b6aba7": [
        "def solution():\n    result = 3549 // 7\n    return result\n\nans = solution()"
    ],
    "b417154f43274315bf9c280cf406e937": [
        "def solution():\n    planes_per_minute = 17 / 12\n    planes_in_36_minutes = planes_per_minute * 36\n    return int(planes_in_36_minutes)\n\nans = solution()"
    ],
    "f50bfa91cfc94371b13058e0e79935a3": [
        "def solution():\n    initial_passengers = 35\n    # First stop: two-fifths get off and then 7 people get on.\n    passengers_after_first_stop = initial_passengers - (2 * initial_passengers // 5) + 7\n    # Second stop: a quarter of the remaining passengers get off and then 13 get on.\n    passengers_after_second_stop = passengers_after_first_stop - (passengers_after_first_stop // 4) + 13\n    \n    return passengers_after_second_stop\n\nans = solution()"
    ],
    "96f6824d7c5c43528d8840695801e0fa": [
        "def solution():\n    n = int(10 / 0.5)\n    sum_n = n * (n + 1) * 0.5 / 2  # Using 0.5 as the step, we adjust the formula n(n+1)/2\n    ans = sum_n**2\n    return ans\n\nans = solution()"
    ],
    "2d139d10c0eb4247b231356fa4fdf082": [
        "def solution():\n    estimated_price = 35\n    error_margin = 5\n    least_amount = estimated_price - (error_margin / 2)\n    return least_amount\n\nans = solution()"
    ],
    "aa84ae289f2b4586bef8164084d18865": [
        "def solution():\n    # Let dp[i] be the number of ways to reach step i.\n    # Initialize dp with zeros for each step including 0 (starting point)\n    dp = [0] * (9 + 1)\n    \n    # There is 1 way to stay on the ground (doing nothing)\n    dp[0] = 1\n    \n    # Calculate the number of ways for each step\n    for i in range(1, 10):\n        # Pip can get to step i either from step i-1 (taking 1 step)\n        # or from step i-4 (taking 4 steps), if possible.\n        if i - 1 >= 0:\n            dp[i] += dp[i - 1]\n        if i - 4 >= 0:\n            dp[i] += dp[i - 4]\n    \n    # The number of ways to reach the 9th step is the answer\n    ans = dp[9]\n    return ans\n\nans = solution()"
    ],
    "7f37d7d7b9fc4673a77900f514ce7751": [
        "def solution():\n    count = 0\n    # The smallest possible sum is when every school orders 98 magazines: 98 * 3 = 294.\n    # So we can only distribute the remaining 6 magazines among the three schools.\n    for x1 in range(98, 103):  # School 1\n        for x2 in range(98, 103):  # School 2\n            x3 = 300 - x1 - x2  # School 3\n            if 98 <= x3 <= 102:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "985600d1f0d24b41a9d3607140bd9878": [
        "def solution():\n    total_toys = 40\n    elephant_position = 10\n    toys_between = 5\n\n    rabbit_position_left_to_right = elephant_position - toys_between - 1\n    rabbit_position_right_to_left = total_toys - rabbit_position_left_to_right\n\n    return rabbit_position_right_to_left\n\nans = solution()"
    ],
    "40a2c5266dff4ef9b884738049f2b326": [
        "def solution():\n    # Let x be the number of years needed for the sum of their ages to be 40.\n    # Currently, the sum of their ages is 22, so in x years, they each age x more years:\n    # (Geoff's current age + x) + (Sister's current age + x) = 40\n    # Simplifying, we get:\n    # Geoff's current age + Sister's current age + 2x = 40\n    # We know that Geoff's current age + Sister's current age = 22, so:\n    # 22 + 2x = 40\n    # 2x = 40 - 22\n    # 2x = 18\n    # x = 18 / 2\n    # x = 9\n    # Thus, in 9 years the sum of their ages will be 40.\n\n    x = (40 - 22) // 2\n    return x\n\nans = solution()"
    ],
    "7a500b5489884af9ad95dc1143f1643a": [
        "def solution():\n    pencils = 1  # we start with one because that's the smallest remainder we can have\n    while True:\n        if all(pencils % n == n - 1 for n in range(2, 6)):  # check the remainders for divisors 2, 3, 4, 5\n            return pencils\n        pencils += 1\n\nans = solution()"
    ],
    "bb41ee852bed4cf5adccccc9b1c77534": [
        "def solution():\n    total_biscuits = 12\n    num_people = 1 + 3  # Ewan plus his 3 sisters\n    biscuits_each = total_biscuits / num_people\n    return biscuits_each\n\nans = solution()"
    ],
    "111b0f86493b40b19e61144527ced67f": [
        "def solution():\n    return (3/7) * 385\n\nans = solution()"
    ],
    "ff86d855c39d4764a5ffb262848abdd0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 't' be the time it takes for Tim to write the book by himself\n    t = symbols('t')\n\n    # Nancy's rate of writing is 1 book per 6 days, so in one day she writes 1/6 of the book\n    # Tim's rate of writing is unknown, so in one day he writes 1/t of the book\n    # Together, in one day they write 1/4 of the book\n    # The equation representing their combined work rate is 1/6 + 1/t = 1/4\n    \n    # Create the equation based on the work rates\n    equation = Eq(1/6 + 1/t, 1/4)\n\n    # Solve the equation to find the time it would take for Tim\n    solution = solve(equation, t)\n\n    # Return the result, which will be Tim's time to complete the book by himself\n    return solution[0]\n\nans = solution()"
    ],
    "c694691621a9431ea4bca6bc4ce553d4": [
        "def solution():\n    # convert total mass from kg to g\n    total_mass = 172000  # g\n    \n    # ratio of the number of packets for P, Q, and R\n    ratio_P = 7\n    ratio_Q = 3\n    ratio_R = 2\n    \n    # packet mass for P, Q, and R in grams\n    mass_P = 300  # g\n    mass_Q = 400  # g\n    mass_R = 500  # g\n    \n    # calculate the total ratio\n    total_ratio = ratio_P + ratio_Q + ratio_R\n    \n    # calculate weight per ratio unit\n    weight_per_ratio_unit = total_mass / total_ratio\n    \n    # calculate the number of packets for each ingredient\n    num_packets_P = weight_per_ratio_unit / mass_P * ratio_P\n    num_packets_Q = weight_per_ratio_unit / mass_Q * ratio_Q\n    num_packets_R = weight_per_ratio_unit / mass_R * ratio_R\n    \n    # calculate total number of packets used\n    total_packets = num_packets_P + num_packets_Q + num_packets_R\n    \n    return int(total_packets)\n\nans = solution()"
    ],
    "f3c6461dee114615a71a938306942695": [
        "def solution():\n    numbers = [8, 14, 6, 9, 13, 12]\n    mean_value = 12\n    total_sum = mean_value * (len(numbers) + 1)\n    sum_of_known = sum(numbers)\n    a = total_sum - sum_of_known\n    return a\n\nans = solution()"
    ],
    "e78f15baf14349d3a74406de623335fc": [
        "def solution():\n    from math import lcm\n\n    # Convert the time for green lights to seconds\n    time_for_green = 9 * 60\n    # Light 1 changes every minute (60 seconds)\n    light1_cycle = 60\n    # Light 2 changes every 1.5 minutes (90 seconds)\n    light2_cycle = 90\n\n    # Find the least common multiple for the first two lights\n    lcm_first_two_lights = lcm(light1_cycle, light2_cycle)\n\n    # Determine the shortest possible time for the third light\n    # It must be a factor of `time_for_green` and should be at least 30 seconds long\n    third_light_cycle = time_for_green\n    for i in range(30, time_for_green + 1):\n        if time_for_green % i == 0 and lcm(lcm_first_two_lights, i) == time_for_green:\n            third_light_cycle = i\n            break\n\n    return third_light_cycle\n\nans = solution()"
    ],
    "c9a78261a27b44b1bdd0c3d2ee5a8794": [
        "def solution():\n    # Convert all lengths to centimeters for comparison\n    pink_ribbon_cm = 2.5 * 100  # 1 meter = 100 centimeters\n    blue_ribbon_cm = 220\n    orange_ribbon_cm = 30.5\n\n    # Compare lengths\n    longest_length = max(pink_ribbon_cm, blue_ribbon_cm, orange_ribbon_cm)\n\n    # Determine which ribbon is the longest\n    if longest_length == pink_ribbon_cm:\n        return \"pink\"\n    elif longest_length == blue_ribbon_cm:\n        return \"blue\"\n    else:\n        return \"orange\"\n\nans = solution()"
    ],
    "dab2cf7eb1d44c0eba4e7832b4ff92e8": [
        "def solution():\n    initial_hives = 5\n    initial_honey = 50\n    target_honey = 90\n\n    hives_needed = (target_honey * initial_hives) / initial_honey\n\n    additional_hives = hives_needed - initial_hives\n\n    return int(additional_hives)\n\nans = solution()"
    ],
    "4c802ea687a8492b9acb91c335e6d58b": [
        "def solution():\n    paid_price = 75\n    discount_rate = 0.5 # 50% off\n    original_price = paid_price / (1 - discount_rate)\n    return original_price\n\nans = solution()"
    ],
    "758c762d7161444799a78a19de32398f": [
        "def solution():\n    total_people = (3 * 10) + (12 * 15) + (15 * 20)\n    total_cars = 3 + 12 + 15\n    average_people_per_car = total_people / total_cars\n    return average_people_per_car\n\nans = solution()"
    ],
    "c4b23a034eb54649b787eefdf2846d0a": [
        "def solution():\n    def odot(a, b):\n        return sum(int(str(a) * i) for i in range(1, b + 1))\n\n    ans = odot(4, 3)\n    return ans\n\nans = solution()"
    ],
    "75592f9b267643f6ad1600fe6fa8b090": [
        "def solution():\n    total_students = 25\n    boys = 5\n    \n    percent_boys = (boys / total_students) * 100\n    \n    return percent_boys\n\nans = solution()"
    ],
    "c6530b57d5304a398df4e406019afc9f": [
        "from itertools import permutations\n\ndef solution():\n    cards = ['0', '3', '5', '8']\n    count = 0\n    for perm in permutations(cards, 4):\n        if perm[0] != '0' and int(''.join(perm)) > 5000:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "3ac7118d01c14ab5a18f0c5846d9e605": [
        "def solution():\n    # Given data:\n    rachel_speed = 84  # in km/h\n    rachel_additional_time = 1.5  # in hours\n    eleanor_total_time = 4  # in hours\n    rachel_remaining_distance = 39  # in km\n\n    # Rachel covers the remaining distance during the 1.5 additional hours\n    rachel_distance_covered = rachel_speed * rachel_additional_time\n\n    # Total distance Rachel would cover if she travelled for 4 hours (same as Eleanor)\n    rachel_total_distance = rachel_distance_covered + rachel_remaining_distance\n\n    # Since they are traveling towards each other and meet after Eleanor travels for 2.5 hours,\n    # Rachel also travels for 2.5 hours. So we calculate the distance Rachel travels in 2.5 hours.\n    rachel_meeting_distance = rachel_speed * (eleanor_total_time - rachel_additional_time)\n\n    # The total distance between the two cities is what Rachel covered in 2.5 hours \n    # plus what she would cover in the remaining 1.5 hours.\n    total_distance = rachel_meeting_distance + rachel_distance_covered\n\n    return total_distance\n\nans = solution()"
    ],
    "1f5b327371834bc891e8992a355a3c02": [
        "def solution():\n    # If the bookshelf is the 8th from the front and the 10th from the back,\n    # then there must be 7 shelves before it and 9 shelves after it.\n    # Hence, we add these shelves plus the one shelf where the book is.\n    total_shelves = 7 + 1 + 9\n    return total_shelves\n\nans = solution()"
    ],
    "eb710dc184384ed3b2e9731301601159": [
        "def solution():\n    marks = [16, 15, 16, 10]\n    mean_score = sum(marks) / len(marks)\n    return mean_score\n\nans = solution()"
    ],
    "4b26a9102a274ba0b8e309640745063b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols A (Ribbon A), B (Rope B), and C (Rope C)\n    A, B, C = symbols('A B C')\n\n    # Equations based on the problem statement\n    equation1 = Eq(A, 3 * B)\n    equation2 = Eq(C, B + 56)\n    equation3 = Eq(A, C + 130)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    # Calculate the total length in centimeters\n    total_length_cm = solutions[A] + solutions[B] + solutions[C]\n\n    return total_length_cm\n\nans = solution()"
    ],
    "8af91674f16f411fb99260d559566771": [
        "def solution():\n    numbers = [4, 11, 8, 2, 7, 13]\n    smallest = min(numbers)\n    largest = max(numbers)\n    \n    ans = (2 * largest) - (3 * smallest)\n    return ans\n\nans = solution()"
    ],
    "ce900c6f009e458cad1bdac095599872": [
        "def solution():\n    ans = 4.6 - 3.55\n    return ans\n\nans = solution()"
    ],
    "07ed7dd4a7c04b8aaf4b1c03f590920c": [
        "from itertools import combinations\n\ndef solution():\n    letters = 'ABCDE'\n    total_combinations = list(combinations(letters, 3))\n    count_AB = 0\n\n    # Count combinations with A and B\n    for comb in total_combinations:\n        if 'A' in comb and 'B' in comb:\n            count_AB += 1\n\n    # Calculate total possibilities and probability\n    total_possibilities = len(total_combinations)\n    probability = count_AB / total_possibilities\n\n    return probability\n\nans = solution()"
    ],
    "4287149f96d446cfa12f1fd21889e61b": [
        "def solution():\n    total_members = 50 + 70\n    male_students = 0.16 * 50\n    female_students = 0.10 * 70\n    total_students = male_students + female_students\n    percentage_students = (total_students / total_members) * 100\n    return percentage_students\n\nans = solution()"
    ],
    "b2b5b4f81d8448afaba3be6d10769542": [
        "def solution():\n    volume1 = 200\n    concentration1 = 35\n\n    volume2 = 300\n    concentration2 = 50\n\n    total_volume = volume1 + volume2\n    total_concentration = (volume1 * concentration1 + volume2 * concentration2) / total_volume\n\n    return total_concentration\n\nans = solution()"
    ],
    "3c6c375d11374de1b3101dfbfc2c9524": [
        "def solution():\n    x = 3 * 48 / 4\n    return x\n\nans = solution()"
    ],
    "5c67d22d929c48579cb3027189617400": [
        "def solution():\n    ans = 1212 // 6\n    return ans\n\nans = solution()"
    ],
    "c18565e80cc44b0cb72b59076a383b6d": [
        "def solution():\n    amy = 37\n    john = 15\n\n    # Let x be the number of apples Amy gives to John\n    # After giving x apples, Amy will have amy - x apples\n    # John will have john + x apples\n    # We want amy - x to be exactly 4 more than john + x\n    # This gives us the equation amy - x = 4 + (john + x)\n\n    # We can solve for x as follows:\n    x = (amy - john - 4) // 2\n\n    return x\n\nans = solution()"
    ],
    "ae4e6b1dfa8a49a5b3241156334f3bed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    betty, veron, eliza = symbols('betty veron eliza')\n\n    equation1 = Eq(eliza, 2 * veron)\n    equation2 = Eq(betty, eliza - 185)\n    equation3 = Eq(betty + veron + eliza, 855)\n\n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n\n    return solutions[betty]\n\nans = solution()"
    ],
    "bc597e322c194058a175f92bfbfd92e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    papers = symbols('papers')\n\n    # Equations representation\n    # Initial speed = papers / 5\n    # New speed after 1 hour = (papers - initial_speed) / 4\n    # Speed if finishing 1 hour earlier = papers / 4\n\n    # Since the new speed is 6 more papers per hour than the initial speed, we have\n    equation1 = Eq((papers / 5) + 6, (papers - (papers / 5)) / 4)\n\n    # If she marks 10 more papers per hour, she would finish in 4 hours, meaning\n    equation2 = Eq((papers / 5) + 10, papers / 4)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (papers))\n\n    return int(solutions[papers])\n\nans = solution()"
    ],
    "ff63e777962f41f4899b17ad9e14deeb": [
        "def solution():\n    first_term = 1\n    last_term = 159\n    common_difference = 2\n\n    num_of_terms = (last_term - first_term) // common_difference + 1\n    sum_of_series = num_of_terms * (first_term + last_term) // 2\n\n    return sum_of_series\n\nans = solution()"
    ],
    "622956fd3ac44f62a123456124a4a8b9": [
        "def solution():\n    markers_left = 32 - 7\n    number_of_bags = markers_left // 5\n    return number_of_bags\n\nans = solution()"
    ],
    "dd320540af104d229ba61a14357af45a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    j, c = symbols('j c')  # j for jugs, c for cups\n\n    # Equations based on the given conditions\n    equation1 = Eq(4*j + 5*c, 85)\n    equation2 = Eq(2*j + 2*c, 40)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (j, c))\n\n    return solutions[c]\n\nans = solution()"
    ],
    "939e258bc3ae4686add9892e1a88d211": [
        "def solution():\n    for a in range(1, 10):  # since ab is a 2-digit number, a cannot be 0\n        for b in range(10):  # b can be 0-9\n            ab = a * 10 + b\n            ba = b * 10 + a\n            if 8 * ab == 3 * ba:\n                return ab  # Once we find the correct number, no need to check further\n\nans = solution()"
    ],
    "70deaa04761b4956a63e868e9ffc6d99": [
        "from fractions import Fraction\n\ndef solution():\n    # Total number of pies\n    total_pies = 90  # Given, 40 chicken pies + 20 vegetable pies + 30 fruit pies\n\n    # Chicken pies more than vegetable pies\n    chicken_more_than_vegetable = 40 - 20\n    fraction_chicken_more_than_vegetable = Fraction(chicken_more_than_vegetable, 40)\n\n    # Vegetable pies less than fruit pies\n    vegetable_less_than_fruit = 30 - 20\n    fraction_vegetable_less_than_fruit = Fraction(vegetable_less_than_fruit, 30)\n\n    return (fraction_chicken_more_than_vegetable, fraction_vegetable_less_than_fruit)\n\n# Get the answer\nans = solution()"
    ],
    "b75379f387c44ded9da89ecef088d85d": [
        "def solution():\n    bill = 55\n    tip_rate = 0.20\n    tax_rate = 0.10\n\n    tip = bill * tip_rate\n    tax = bill * tax_rate\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "52eea861c20540a8873541169102d6b1": [
        "def solution():\n    greatest_1_digit_even = 8\n    smallest_2_digit_odd = 11\n    \n    sum_of_numbers = greatest_1_digit_even + smallest_2_digit_odd\n    return sum_of_numbers\n\nans = solution()"
    ],
    "85d27affc1b445c88f9b4a5e100c1bd9": [
        "def solution():\n    total_biscuits = 12\n    people = 1 + 3  # Ewan plus his 3 sisters\n    biscuits_each = total_biscuits // people\n    return biscuits_each\n\nans = solution()"
    ],
    "433eb146729b4478bbfd89939dc13d1d": [
        "def solution():\n    made_designs = 24\n    fraction_completed = 3 / 4\n   \n    total_designs = made_designs / fraction_completed\n\n    return int(total_designs)\n\nans = solution()"
    ],
    "9d40cceb3a7043b58f824a777d1db3e8": [
        "def solution():\n    count = 0\n    # Loop through all three-digit numbers from 100 to 999\n    for i in range(100, 1000):\n        # Calculate the sum of the digits of number i\n        s = sum(map(int, str(i)))\n        # If the sum of the digits is equal to 4, increment the count\n        if s == 4:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "9b15cde54f244f2688f75ecf97188c89": [
        "from itertools import combinations_with_replacement\n\ndef solution():\n    digit_sum_target = 7\n    count = 0\n    # Generate all combinations with replacement of 3 digits that can sum up to 7\n    for combination in combinations_with_replacement(range(10), 3):\n        if sum(combination) == digit_sum_target:\n            # Ensure the first digit is not zero to make it a valid three-digit number\n            if combination[0] != 0:\n                # Count permutations considering duplicate elements\n                count += len(set(permutations(combination)))\n\n    return count\n\nans = solution()"
    ],
    "0e7224d495f743d994a3285524f8f2a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    total_money = symbols('total_money') # total amount of money Caleb had initially\n    cost_per_cap = symbols('cost_per_cap') # cost of one cap\n    cost_per_wristband = symbols('cost_per_wristband') # cost of one wristband\n    num_caps_initial = 4 # number of caps bought initially\n    num_wristband = 6 # number of wristbands bought\n\n    # Equations based on the problem statement\n    # Equation 1: Cost of caps and wristbands is 2/5 of total money\n    equation1 = Eq((num_caps_initial * cost_per_cap + num_wristband * cost_per_wristband), 2 / 5 * total_money)\n    # Equation 2: Cost of each cap is 3 times cost of wristband\n    equation2 = Eq(cost_per_cap, 3 * cost_per_wristband)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (cost_per_cap, cost_per_wristband, total_money))\n\n    # Calculate amount of money remaining after initial purchase\n    remaining_money = solutions[total_money] - (2 / 5 * solutions[total_money])\n\n    # Caleb buys more caps with 1/3 of his remaining_money\n    money_for_more_caps = 1 / 3 * remaining_money\n    # Calculate how many more caps Caleb can buy\n    num_caps_additional = money_for_more_caps / solutions[cost_per_cap]\n\n    # Calculate total number of caps Caleb bought altogether\n    total_caps = num_caps_initial + num_caps_additional\n\n    return int(total_caps)\n\nans = solution()"
    ],
    "b9a7c7092370400a8a6b8c58ae2510c9": [
        "def solution():\n    return 5.4 + 3.7\n\nans = solution()"
    ],
    "8a063eb7bf3f4613bbd55a6c63048295": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the two velocities at different altitudes\n    v1, v2 = symbols('v1 v2')\n    g = 9.81  # acceleration due to gravity in m/s^2\n    h1 = 3000  # initial altitude in meters\n    h2 = 2000  # final altitude in meters\n\n    # Using conservation of energy (ignoring air resistance)\n    # Potential energy at h1 + Kinetic energy at h1 = Potential energy at h2 + Kinetic energy at h2\n    # m * g * h1 + 0.5 * m * v1**2 = m * g * h2 + 0.5 * m * v2**2\n    # We are assuming that the skydiver starts from rest, hence v1 = 0\n    # m (mass) and 0.5 (constant for kinetic energy) are the same on both sides of the equation and can be canceled:\n    # g * h1 = g * h2 + v2**2 / 2\n\n    # Solve for v2\n    equation = Eq(g * h1, g * h2 + v2**2 / 2)\n    solutions = solve(equation, v2)\n    \n    # Since velocity can't be negative when falling down, we pick the positive solution\n    v2_solution = max(solutions)\n\n    return float(v2_solution)\n\nans = solution()"
    ],
    "bacdd0107009480e90e10957f1ab6f1c": [
        "def solution():\n    # There are 13 different numbers and we want 4 consecutive numbers.\n    # To ensure there are NO 4 consecutive cards, we can take a maximum of 3 cards from each of the 10 different \"windows\" of \n    # consecutive cards (i.e., 1-2-3, 2-3-4, ..., 10-11-12-13) since we have 4 suits. This gives us 3 * 10 * 4 = 120 cards.\n    # Drawing one more card would ensure we have 4 consecutive numbers because we would then have to draw from a window\n    # we've previously drawn from, thus giving us a sequence of 4 consecutive numbers.\n    # Therefore, we need to draw 120 + 1 cards to guarantee 4 consecutive cards.\n    return 120 + 1\n\nans = solution()"
    ],
    "a43767a35548410b91388a97d31bf269": [
        "from itertools import permutations\n\ndef solution():\n    # We already know A, C, and G\n    A, C, G = 3, 1, 7\n    # Find the remaining digits that we have to permute\n    remaining_digits = [d for d in range(10) if d not in {A, C, G}]\n    \n    # Loop through all permutations of the remaining 7 digits\n    for perm in permutations(remaining_digits):\n        # Place A, C, G into the permutation\n        _, B, _, D, E, F, _, H, I, J = perm[:2] + (C,) + perm[2:5] + (G,) + perm[5:]\n        \n        # Construct the number with the known digits and permuted digits\n        number = int(f\"{A}{B}{C}{D}{E}{F}{G}{H}{I}{J}\")\n        \n        # Check for divisibility rules\n        # Since the number ends in 0, it is automatically divisible by 10.\n        # We don't need to check for divisibility by 1 as it is trivial.\n        # Thus, we start checking from divisibility by 2.\n        if all(\n            int(str(number)[:i]) % i == 0\n            for i in range(2, 11)\n        ):\n            return (B, D, E, F, H, I, J)\n\nans = solution()"
    ],
    "aa716df8b445405ab6cdebdb3ae4adf9": [
        "def solution():\n    ashley_age = 10\n    brother_age_3_years_ago = ashley_age - 3 - 2\n    brother_current_age = brother_age_3_years_ago + 3\n    return brother_current_age\n\nans = solution()"
    ],
    "9c2c49e5d3134ddeb8fb6b3c0c42f5cd": [
        "def solution():\n    # Define the time taken for each activity\n    preparing_ingredients = 10\n    baking_dish = 15\n    washing_plate = 5\n    eating = 15\n\n    # Sum the time for all activities to find the total time\n    total_time = preparing_ingredients + baking_dish + washing_plate + eating\n\n    return total_time\n\nans = solution()"
    ],
    "6e9234dea3b64376a232e45d14effce4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    adults, children = symbols('adults children')\n    equation1 = Eq(5 * adults + 3 * children, 75)\n    equation2 = Eq(adults + children, 19)\n\n    solutions = solve((equation1, equation2), (adults, children))\n\n    return solutions[adults]\n\nans = solution()"
    ],
    "5cb5ef0814c74ded81cb8b6ce6f1bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3*x - (2*x + 3), 5)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "8a66caf6aaba494f95bca104943cb7c4": [
        "def solution():\n    ans = 459 + 3762\n    return ans\n\nans = solution()"
    ],
    "0bced7bb4af84506acecdc385274abfd": [
        "def solution():\n    count_3 = 600 // 3\n    count_5 = 600 // 5\n    count_15 = 600 // 15 # multiples of both 3 and 5 are multiples of 15\n    \n    ans = count_3 + count_5 - count_15\n    return ans\n\nans = solution()"
    ],
    "f8495fe245f34edeb912b66b7ea8ce5c": [
        "def solution():\n    ans = 123 + 468\n    return ans\n\nans = solution()"
    ],
    "66edf568e9a74a2aa97d9e92b05d94e2": [
        "def solution():\n    tom_current_age = 10\n    tom_future_age = 20\n    grandma_future_age = 60\n\n    age_difference = grandma_future_age - tom_future_age\n    grandma_current_age = tom_current_age + age_difference\n\n    return grandma_current_age\n\nans = solution()"
    ],
    "9bfff3c25a624f939fbe758d02cada7b": [
        "def solution():\n    ways = 0\n    for ten_pences in range(6):\n        for twenty_pences in range(4):\n            for fifty_pences in range(2):\n                total = ten_pences * 10 + twenty_pences * 20 + fifty_pences * 50\n                if total == 70:\n                    ways += 1\n    return ways\n\nans = solution()"
    ],
    "ecaddfdc1ad84d24a6e9ae0e8904ebc2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables (ropes lengths in cm)\n    A, B, C = symbols('A B C')\n\n    # Equations based on the problem statement\n    equation1 = Eq(A, 3 * B)\n    equation2 = Eq(C, B + 56)\n    equation3 = Eq(A, C + 130)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    # Compute the total length of three ropes\n    total_length = solutions[A] + solutions[B] + solutions[C]\n    \n    return total_length\n\nans = solution()"
    ],
    "24f3b610c11745edb5ef8e3bb5e6b77b": [
        "def solution():\n    # Using worst case scenario based on Pigeonhole Principle\n    \n    # Worst case: she takes out all balls of two colours but not enough to have 4 of the same colour\n    # She could take all 5 blue, all 4 orange, and then proceed with yellow\n    # Since we're looking for 4 balls of the same color\n    # After 5 blue + 4 orange = 9, the next is surely the 4th ball of at least one colour\n    ans = 5 + 4 + 1\n    return ans\n\nans = solution()"
    ],
    "94bb6ae56dbd4a98a0fbeaa59c7d8691": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of candies as c, number of students in class B as b, and number of students in class A as 2b (since it's twice the number of class B)\n    candies, b = symbols('candies b')\n\n    # If each student in class A gets 4 candies, 20 more candies are needed\n    # which means the total number of candies needed for class A is 4 * 2b + 20\n    equation1 = Eq(4 * 2 * b + 20, candies)\n\n    # If each student in class B can get 6 candies, there will be 16 candies left\n    # which means the total number of candies Miss Jenny has is 6 * b + 16\n    equation2 = Eq(6 * b + 16, candies)\n\n    # Now we solve the system of equations\n    solutions = solve((equation1, equation2), (candies, b))\n\n    # We just need the number of candies\n    return solutions[candies]\n\nans = solution()"
    ],
    "9435fd70b9e341539b05792950bee0ca": [
        "def solution():\n    # Ducks have 2 legs\n    duck_legs = 4 * 2\n    # Geese have 2 legs\n    geese_legs = 2 * 2\n    # Lambs have 4 legs\n    lamb_legs = 4\n\n    # Total legs\n    total_legs = 36\n\n    # Legs accounted for by the ducks and geese\n    accounted_legs = duck_legs + geese_legs\n\n    # Legs to be accounted for by lambs\n    remaining_legs = total_legs - accounted_legs\n\n    # Number of lambs\n    num_lambs = remaining_legs // lamb_legs\n\n    return num_lambs\n\nans = solution()"
    ],
    "dd8d8a23d4864feb861a8645d06813fa": [
        "def solution():\n    n_teams = 5\n    n_matches = (n_teams * (n_teams - 1)) // 2\n    return n_matches\n\nans = solution()"
    ],
    "0dbb0cc68b7945019907f84cebf4487e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(boys, 3 * girls)            # boys are three times the girls\n    equation2 = Eq(2 * boys + 4 * girls, 570)  # total sweets equation\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "7f4c057f9edc486381868b2cb62f8eb3": [
        "def solution():\n    digits = [3, 1, 9, 2]\n    min_num = int(''.join(map(str, sorted(digits))))\n    max_num = int(''.join(map(str, sorted(digits, reverse=True))))\n    return max_num - min_num\n\nans = solution()"
    ],
    "5395374ab911412c892a95bcb1538a6c": [
        "def solution():\n    # Define the number of boxes per layer\n    top_layer = 1**2\n    second_layer = 2**2\n    third_layer = 3**2\n\n    # Calculate the total number of boxes in the top three layers\n    total_boxes = top_layer + second_layer + third_layer\n\n    return total_boxes\n\nans = solution()"
    ],
    "9882354a7f8745e7818f5641ce7c7354": [
        "def solution():\n    return 8.7 * 3.4\n\nans = solution()"
    ],
    "6c31ab9c5c724ce1b5dd8e18d56c817d": [
        "def solution():\n    sandwich_price = 2.35\n    drink_price = 0.78\n    crisps_price = 0.65\n    note_value = 5.00\n\n    total_cost = sandwich_price + drink_price + crisps_price\n    change = note_value - total_cost\n\n    return round(change, 2)  # rounding to two decimal places to represent money accurately\n\nans = solution()"
    ],
    "dfc1f111c9384999a8ce3a20bc2cffc5": [
        "def solution():\n    total_good_copies = 600\n    good_copies_A = (3 / 5) * total_good_copies\n    good_copies_B = (2 / 5) * total_good_copies\n\n    total_copies_A = good_copies_A * (5 / 4)\n    total_copies_B = good_copies_B * (6 / 5)\n\n    total_copies = total_copies_A + total_copies_B\n    \n    return int(total_copies)\n\nans = solution()"
    ],
    "a53c706f0348463594c82aefd860177b": [
        "def solution():\n    first_sum = 1.2 + 1.23 + 1\n    second_sum = 1.2 + 1.23\n\n    ans = (first_sum) * (first_sum) - (first_sum) * (second_sum)\n    \n    return ans\n\nans = solution()"
    ],
    "ffae2b155c6e4e12a0dd3224c209353d": [
        "def solution():\n    count = 0\n    for num in range(100, 201):\n        if str(num) == str(num)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b7345c517ee645059ca6864ac5589ef4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    betty, veron, eliza = symbols('betty veron eliza')\n\n    equation1 = Eq(eliza, 2 * veron)\n    equation2 = Eq(betty, eliza - 185)\n    equation3 = Eq(betty + veron + eliza, 855)\n\n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n\n    return solutions[betty]\n\nans = solution()"
    ],
    "53c10c1a3da34ac99c165981e9123c15": [
        "def solution():\n    smiles_per_day = 47\n    days_in_january = 31\n    total_smiles = smiles_per_day * days_in_january\n    return total_smiles\n\nans = solution()"
    ],
    "765a3cf2104c412c90dfa3e660a67e11": [
        "def solution():\n    import math\n    num_students = 40\n    side_length = math.sqrt(num_students)\n    return int(side_length)\n\nans = solution()"
    ],
    "0fca214bb995431dbbfd8125bbcbb3a8": [
        "def solution():\n    total_solution = 300 + 400 + 300\n    total_sugar = 300 * 0.15 + 400 * 0.25 + 300 * 0.35\n    concentration = (total_sugar / total_solution) * 100\n    \n    return concentration\n\nans = solution()"
    ],
    "8ce469dd3f78455bbe361dfbac65ec35": [
        "def solution():\n    initial_height = 10  # Original drop height\n    bounce_height = initial_height / 2  # Height after first bounce\n    \n    # Total distance = initial drop + ascent after bounce + second drop\n    total_distance = initial_height + bounce_height + bounce_height\n    \n    return total_distance\n\nans = solution()"
    ],
    "61c631f4351c4f37b2e5a67ac813bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dorothy, timmy, kevin = symbols('dorothy timmy kevin')\n    equation1 = Eq(dorothy, 9 * timmy - 3)\n    equation2 = Eq(kevin, timmy + 45)\n    equation3 = Eq(dorothy, 96)\n\n    solutions = solve((equation1, equation2, equation3), (dorothy, timmy, kevin))\n    \n    return solutions[kevin]\n\nans = solution()"
    ],
    "5d35989e2b284f488fb943b1ec405028": [
        "def solution():\n    total_rolls = 30\n    probability_of_five = 1/6\n    \n    expected_times = total_rolls * probability_of_five\n\n    return expected_times\n\nans = solution()"
    ],
    "2b60051b00824874b4fa3beaf2110c81": [
        "def solution():\n    for num in range(999, 99, -1):\n        if num % 36 == 0:\n            return num\n\nans = solution()"
    ],
    "3a2ed089aaaf41639e7c8cf3a2c8a734": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    children = ['Hugh', 'Louise', 'Richard', 'Child1', 'Child2']\n    for perm in permutations(children):\n        if perm.index('Hugh') < perm.index('Louise') or perm.index('Hugh') > perm.index('Richard'):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "98777c411fcc4cb6af9079ff424408ba": [
        "def solution():\n    return 10\n\nans = solution()"
    ],
    "ce53d4f8e44943daa525defbe2c3fe07": [
        "def solution():\n    total_matches = 10 / (1 - (2/5) - (7/20))\n    wins = (2/5) * total_matches\n    draws = (7/20) * total_matches\n    points = (3 * wins) + (1 * draws)\n    return int(points)\n\nans = solution()"
    ],
    "5cbbe117fdc24fd7b9a7955d77adea5e": [
        "def solution():\n    dividend_placeholder = symbols('x') # create a symbol for the unknown dividend\n    divisor = 4\n    quotient = 9\n    remainder = 2\n\n    # Eq(dividend_placeholder / divisor, quotient) with remainder\n    equation = Eq(divisor * quotient + remainder, dividend_placeholder)\n    \n    # Solve for the unknown dividend\n    dividend = solve(equation, dividend_placeholder)\n    correct_dividend = dividend[0]\n    \n    # Check Johnny's incorrect working\n    incorrect_dividend = quotient * remainder + divisor\n    \n    if incorrect_dividend == correct_dividend:\n        return True  # His answer is correct. This is for double-checking purposes.\n    else:\n        return correct_dividend  # His answer is incorrect, return the correct dividend\n\nans = solution()"
    ],
    "87ae32b6102741f1b5918d4117319755": [
        "def solution():\n    greatest_1_digit_even = 8  # The greatest 1-digit even number is 8\n    smallest_2_digit_odd = 11  # The smallest 2-digit odd number is 11\n    return greatest_1_digit_even + smallest_2_digit_odd\n\nans = solution()"
    ],
    "b7a661c038da48b0a38328c3af3f8724": [
        "def solution():\n    sophie_tshirts = 13\n    sister_tshirts = sophie_tshirts - 5\n    return sister_tshirts\n\nans = solution()"
    ],
    "c76c8db1463743adbd53ed8b96efcbd5": [
        "def solution():\n    # Total cost of chocolate bars: 4 bars * 75p each\n    total_chocolates_cost = 4 * 75\n    # Total cost of pens: 3 pens * 95p each\n    total_pens_cost = 3 * 95\n    # Total cost in pence\n    total_cost_pence = total_chocolates_cost + total_pens_cost\n    # Convert total cost to pounds (100 pence = £1)\n    total_cost_pounds = total_cost_pence / 100\n    # Total available pounds\n    total_pounds = 10\n    # Change received = Total pounds - Total cost in pounds\n    change_received = total_pounds - total_cost_pounds\n\n    return round(change_received, 2)\n\nans = solution()"
    ],
    "162b4dfb6c85480ab3fa57a6c7291de2": [
        "def solution():\n    original_price = 4200\n    first_discount = 0.10\n    second_discount = 0.20\n    \n    price_after_first_discount = original_price * (1 - first_discount)\n    final_price = price_after_first_discount * (1 - second_discount)\n    \n    return final_price\n\nans = solution()"
    ],
    "cf531f6537954b0c9eb9ebd7c0cea500": [
        "def solution():\n    start = 2\n    end = 100\n    step = 2\n\n    multiples = list(range(start, end + 1, step))\n    num_multiples = len(multiples)\n\n    return num_multiples\n\nans = solution()"
    ],
    "fbdb47198fdf4306a9847b12bf333226": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    vicky, timmy, kevin = symbols('vicky timmy kevin')\n\n    equation1 = Eq(vicky, 6 * timmy - 3)\n    equation2 = Eq(kevin, timmy + 32)\n    equation3 = Eq(vicky, 99)\n\n    solutions = solve((equation1, equation2, equation3), (vicky, timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "7f70404ac5f74504a1cfebab700ec8a5": [
        "def solution():\n    initial_people = 5\n    initial_days = 15\n    target_days = 5\n\n    # work_rate is the amount of work a person does per day\n    work_rate = 1 / (initial_people * initial_days)\n\n    # total_work is the total amount of work to build the bridge\n    total_work = 1\n\n    # people_needed for target_days is the number of people needed to finish the total_work in target_days\n    people_needed = total_work / (work_rate * target_days)\n\n    # additional_people is the number of additional people needed apart from the initial people\n    additional_people = people_needed - initial_people\n\n    return int(additional_people)\n\nans = solution()"
    ],
    "0eb584e3f8a14f75a374964af3070d71": [
        "def solution():\n    # total sum of 8 numbers\n    total_sum = 8 * 555\n    \n    # let's denote the mean of the last 5 numbers as m\n    # mean of the first 3 numbers is m - 296\n    # sum of the first 3 numbers is 3 * (m - 296)\n    # sum of the last 5 numbers is 5 * m\n    # total sum = sum of the first 3 numbers + sum of the last 5 numbers\n    # total_sum = 3 * (m - 296) + 5 * m\n    # Now we solve for m:\n    m = (total_sum + (3 * 296)) / 8\n    \n    return m\n\nans = solution()"
    ],
    "70f5ff9ddd8c4370b2cfb94de5a970ab": [
        "def solution():\n    footballs_per_basket = 5\n    number_of_baskets = 7\n    total_footballs = footballs_per_basket * number_of_baskets\n    return total_footballs\n\nans = solution()"
    ],
    "b88c740d29b747828949ce062283a33f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n\n    # Rasidah had $48 less than Chai Seng\n    equation1 = Eq(rasidah, chai_seng - 48)\n    # Rasidah spent 3/5 of her money\n    rasidah_left = rasidah - 3 / 5 * rasidah\n    # Chai Seng spent 6/7 of his money\n    chai_seng_left = chai_seng - 6 / 7 * chai_seng\n    # In the end, Chai Seng had 1/2 as much money left as Rasidah\n    equation2 = Eq(chai_seng_left, 1 / 2 * rasidah_left)\n\n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "cd9d85bed1d74e6cb214e001f0a094e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n\n    # Rasidah had $48 less than Chai Seng\n    equation1 = Eq(rasidah, chai_seng - 48)\n\n    # Rasidah spent 3/5 of her money\n    rasidah_spent = 3/5 * rasidah\n    rasidah_left = rasidah - rasidah_spent\n\n    # Chai Seng spent 6/7 of his money\n    chai_seng_spent = 6/7 * chai_seng\n    chai_seng_left = chai_seng - chai_seng_spent\n\n    # Chai Seng had 1/2 as much money left as Rasidah\n    equation2 = Eq(chai_seng_left, 1/2 * rasidah_left)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "312d3c547d294d18b1e263e554e02de1": [
        "def solution():\n    def oplus(a, b):\n        # Compute sum from a to (b - 1)\n        sum_ab = sum(range(a, b))\n        # Subtract b from the sum\n        result = sum_ab - b\n        return result\n    \n    # Compute (5 oplus 10)\n    first_part = oplus(5, 10)\n    # Compute (4 oplus 9)\n    second_part = oplus(4, 9)\n    # Subtract second part from first part and return result\n    ans = first_part - second_part\n    return ans\n\nans = solution()"
    ],
    "21b6e23a4408430bbf4acc393c601243": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The congruences are:\n    # grandma_age ≡ 2 (mod 4)\n    # grandma_age ≡ 3 (mod 5)\n    # grandma_age ≡ 6 (mod 9)\n    congruences = [(2, 4), (3, 5), (6, 9)]\n\n    # Using the Chinese Remainder Theorem to find the lowest such integer\n    grandma_age = solve_congruence(*congruences)\n\n    return grandma_age[0]\n\nans = solution()"
    ],
    "df16de37f8d64768a0f4c9b79d33d31e": [
        "def solution():\n    from math import factorial\n\n    # Choose a digit for the units place (has to be even)\n    # There are 2 even digits in our set (2, 4)\n    units_choices = 2\n\n    # The remaining four places can be filled with the remaining four digits\n    # The number of ways to arrange 4 digits is 4!\n    remaining_places_arrangement = factorial(4)\n\n    # Total ways is the product of choices for units place and arrangements of remaining digits\n    total_ways = units_choices * remaining_places_arrangement\n\n    return total_ways\n\nans = solution()"
    ],
    "ecbf3f006c6147d3aaf09f392d5a387e": [
        "def solution():\n    # Define the new operation\n    def new_op(a, b):\n        return sum(range(a, b)) - b\n    \n    # Calculate (5⊕10)\n    result1 = new_op(5, 10)\n    \n    # Calculate (4⊕9)\n    result2 = new_op(4, 9)\n    \n    # Find the difference\n    ans = result1 - result2\n    \n    return ans\n\nans = solution()"
    ],
    "35167ef06b9844828843e2c87be8c949": [
        "def solution():\n    ans = 35 + 18 + 26 + 22 - 16 + 25\n    return ans\n\nans = solution()"
    ],
    "791c504e967a47a3a7621807a53b47c8": [
        "def solution():\n    distance_behind = 500\n    elena_speed = 8\n    cat_speed = 3\n    relative_speed = elena_speed - cat_speed\n\n    time_to_catch_up = distance_behind / relative_speed\n\n    return time_to_catch_up\n\nans = solution()"
    ],
    "1754095281684c188e6216f11d4caff3": [
        "def solution():\n    from itertools import permutations\n\n    digits = [1, 2, 3]\n    all_possible_combinations = list(permutations(digits, 3))\n    return len(all_possible_combinations)\n\nans = solution()"
    ],
    "83dbbf7b91904b22b7e2f875718cafe1": [
        "def solution():\n    first_term = 6\n    common_difference = 4\n    n = 30\n\n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "6a3017d012a04a6c9f0ed680b9bf9a09": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    current_date = datetime(2013, 1, 28)\n    one_day = timedelta(days=1)\n    one_year = timedelta(days=365)\n\n    while True:\n        current_date += one_year\n        if current_date.weekday() == 0:  # Monday is 0\n            if current_date.year % 4 == 0 and (current_date.year % 100 != 0 or current_date.year % 400 == 0):\n                # Leap year condition\n                current_date += one_day\n            if current_date.weekday() == 0:\n                return current_date.year\n\nans = solution()"
    ],
    "3c78e8e403284c9486c1fe552fdb5004": [
        "def solution():\n    # Since there are only two colors, to guarantee getting 2 stickers of the same color,\n    # we need to consider the worst case scenario using the pigeonhole principle.\n    # Taking 1 red, 1 green and then the next sticker must be either red or green,\n    # thus matching one of the previously drawn stickers.\n    return 4\n\nans = solution()"
    ],
    "9f5fc79092f442618d0ed912989d3195": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    equation1 = Eq(oranges, apples + 194)\n    equation2 = Eq(oranges, 6 * apples + 4)\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "b3a3839d65e84a9eb609756270102de4": [
        "def solution():\n    # The worst case scenario is taking out all balls of two colors without getting 4 of the same color.\n    # Since there are 5 blue, 4 orange, and 2 yellow, the worst case is taking 3 blue, 3 orange, and 2 yellow\n    # However, the next ball Sheila takes must be the 4th of one of the colors\n    blue_balls = 5\n    orange_balls = 4\n    yellow_balls = 2\n    \n    # Worst case: taking the maximum number of balls from all colors without having four of the same color\n    # We can take up to 3 blue, 3 orange, and all 2 yellow\n    # The next ball will guarantee the 4th ball of either blue or orange\n    balls_needed = (3 + 3 + yellow_balls) + 1\n    \n    return balls_needed\n\nans = solution()"
    ],
    "71a76491c3df48ae9b18543d4e5cc354": [
        "def solution():\n    initial_total_weight = 8 * 50\n    final_total_weight = 9 * 52\n    extra_apple_weight = final_total_weight - initial_total_weight\n    return extra_apple_weight\n\nans = solution()"
    ],
    "dd2fcc192d2f4c3dbf232e72bcb19fa6": [
        "def solution():\n    x = - (4 ** 2)\n    return x\n\nans = solution()"
    ],
    "287a2d46ffa247fc9ad946e5c0911c54": [
        "def solution():\n    return sum(range(96, 100))\n\nans = solution()"
    ],
    "966d6206a5444394a2096b3a802b79a5": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    pages = symbols('pages')\n    original_time = pages / 50\n    new_time = pages / 70  # speed increased by 20 pages per minute\n    time_difference = original_time - new_time\n    \n    equation = Eq(time_difference, 2)  # 2 minutes faster\n    sol = solve(equation, pages)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "0ba3b59c0bfb4c87ae2d34a874d2d690": [
        "def solution():\n    # Initialize count of lights on to 0\n    count = 0\n    \n    # Iterate over each light\n    for i in range(1, 251):\n        # If the number of divisors is odd, the light will be on\n        if int(i**0.5) == i**0.5:\n            count += 1\n    \n    return count\n\nans = solution()"
    ],
    "f4b2a4d95a2f4145b73f56fb9ae21969": [
        "def solution():\n    first_term = 1\n    last_term = 199\n    difference = 2\n    \n    # Calculate number of terms in the sequence\n    num_terms = ((last_term - first_term) // difference) + 1\n    \n    # Calculate sum of arithmetic sequence\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n    \n    # Calculate average of the sequence\n    average = sum_of_sequence // num_terms\n    \n    return average\n\nans = solution()"
    ],
    "2bb2908692c1496e83c9da8633b98269": [
        "def solution():\n    first_term = 6\n    difference = 4\n    nth_term = 30\n\n    term_30th = first_term + (nth_term - 1) * difference\n\n    return term_30th\n\nans = solution()"
    ],
    "939f1ef2920640e18e6791035bfe7f8a": [
        "def solution():\n    ans = 5842 + 351\n    return ans\n\nans = solution()"
    ],
    "84e25013e5fb4deda35beda9f5782685": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    equation1 = Eq(oranges, apples + 194)\n    equation2 = Eq(oranges, 6 * apples + 4)\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "446707881fde4e908bf63228a9dc7ee5": [
        "def solution():\n    for divisor in range(1, 1000):  # Limit the search to a reasonable divisor range\n        # Calculate dividend using the relation between divisor, quotient, and remainder\n        dividend = divisor * 8 + 7\n        if dividend % divisor == 7:  # Check if the remainder is 7\n            return dividend, divisor\n\nans = solution()"
    ],
    "9adda98665dc499994e24f43869d3eea": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    initial_date = datetime(2013, 1, 28)\n    one_day = timedelta(days=1)\n    leap_year_days = 366\n    common_year_days = 365\n\n    # Loop over years starting from 2014\n    year = 2014\n    while True:\n        # Check if the current year is a leap year\n        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n            days_in_year = leap_year_days\n        else:\n            days_in_year = common_year_days\n        \n        # Calculate the date of January 28th of the current year\n        jan_28_current_year = initial_date + timedelta(days=days_in_year * (year - 2013))\n\n        # Check if January 28th is a Monday\n        if jan_28_current_year.weekday() == 0:  # 0 is Monday\n            return year\n        year += 1\n\nans = solution()"
    ],
    "c2cbf1f7958e4d09ae575ec083bddec8": [
        "def solution():\n    for age in range(20, 36):\n        if age % 3 == 0 and (age + 1) % 5 == 0:\n            return age\n\nans = solution()"
    ],
    "f94d81e4add44bbdb22df230a08a082f": [
        "def solution():\n    original_amount = 20\n    daily_savings = 1\n    days_saved = 7\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    ans = original_amount + (daily_savings * days_saved) - lent_to_brother - spent_on_snacks\n    return ans\n\nans = solution()"
    ],
    "c6742159f800490eb0db04916361e0a1": [
        "def solution():\n    total_companies = 4\n    total_days = 5\n    total_length = 900\n\n    length_per_company_per_day = total_length / (total_companies * total_days)\n\n    return length_per_company_per_day\n\nans = solution()"
    ],
    "196a119f90d9439aaddd24ed22d849f3": [
        "def solution():\n    normal_cost = 400\n    discount = 0.10\n    members = 30\n\n    discounted_cost = normal_cost * (1 - discount)\n    cost_per_member = discounted_cost / members\n\n    return cost_per_member\n\nans = solution()"
    ],
    "8488dbe7c4e548e79cc11b66f832cb46": [
        "def solution():\n    # Jogging time from 6:30 to 7:30 is 1 hour, walking time from 7:30 to 9:30 is 2 hours\n    jogging_time = 1     # Jogging time in hours\n    walking_time = 2     # Walking time in hours\n\n    jogging_speed = 6    # Jogging speed in miles per hour\n    walking_speed = 5    # Walking speed in miles per hour\n\n    # Total distance travelled is the sum of jogging distance and walking distance\n    total_distance = (jogging_speed * jogging_time) + (walking_speed * walking_time)\n    \n    return total_distance\n\nans = solution()"
    ],
    "b2659c11d02e40ed86b49d179fd937b1": [
        "def solution():\n    # Define a function for the custom operation based on the given examples\n    def custom_operation(a, b):\n        return a + b - (a % 10) - (b % 10)\n    \n    # Apply the custom operation to 9 ◈ 20\n    ans = custom_operation(9, 20)\n    return ans\n\nans = solution()"
    ],
    "4e262975314040ab820a9ec130db1cb3": [
        "def solution():\n    initial_charge = 80  # charge in cents for up to 15 minutes\n    additional_charge_per_minute = 5  # charge in cents for each additional minute\n    total_charge = 140  # total charge for Ryan's call in cents\n\n    if total_charge > initial_charge:\n        # If the total charge is more than the initial charge, there are additional minutes\n        additional_minutes = (total_charge - initial_charge) / additional_charge_per_minute\n        # Total minutes is the sum of the first 15 minutes plus any additional minutes\n        total_minutes = 15 + additional_minutes\n    else:\n        # If total charge is not more than the initial charge, the call lasted for 15 minutes or less\n        total_minutes = 15 \n\n    return total_minutes\n\nans = solution()"
    ],
    "f53f2f8694b148fdbea2cbce2274ad5e": [
        "def solution():\n    # Define the variable for the unknown part of the equation\n    x = symbols('x')\n    # Define the equation 4*x - 13 = 55 and solve for x\n    equation = Eq(4*x - 13, 55)\n    # Solve the equation and return the solution for x\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "e50577a37b7c4a59a13a3b048ce98118": [
        "def solution():\n    boys = 255\n    girls = 234\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "ffcf1702672046df8e86e7270234c92d": [
        "def solution():\n    # Let's denote the number Sara thinks about as x\n\n    # According to the problem description we have the following equation:\n    # ((x - 4) / 2) + 11 = 37\n\n    # Solving for x:\n    x = (37 - 11) * 2 + 4\n\n    # Returning the original number Sara thought of\n    return x\n\nans = solution()"
    ],
    "9cbab768b996487fafdce66ceab5b47e": [
        "def solution():\n    # Since we are only interested in the last digit of the expression\n    # We can just find the last digit of 2^2017 and 3^2017 and multiply them\n    # The last digit of a power of 2 follows the pattern 2, 4, 8, 6 and repeats every 4 powers\n    # The last digit of a power of 3 follows the pattern 3, 9, 7, 1 and repeats every 4 powers\n\n    # Calculate last digit of 2^2017\n    # 2017 % 4 = 1, so the last digit of 2^2017 is the same as the last digit of 2^1\n    last_digit_2 = 2\n\n    # Calculate last digit of 3^2017\n    # 2017 % 4 = 1, so the last digit of 3^2017 is the same as the last digit of 3^1\n    last_digit_3 = 3\n\n    # Multiply the two last digits\n    last_digit = (last_digit_2 * last_digit_3) % 10  # Get only the last digit of the result\n\n    return last_digit\n\nans = solution()"
    ],
    "03cf341346924ba7a563f01f54c2a13f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(35, 10 - 2 * x + 7 * x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "77ab09536f3247d9bbce6ad4688ccf88": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of one necklace and one earring\n    necklace, earring = symbols('necklace earring')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(9 * necklace + 5 * earring, 1440)\n    equation2 = Eq(2 * necklace + 3 * earring, 439)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (necklace, earring))\n\n    # Sum the cost of one necklace and one earring\n    total_cost = solutions[necklace] + solutions[earring]\n\n    return total_cost\n\nans = solution()"
    ],
    "701a44d04fe2471b8b3b4a02034c3aed": [
        "def solution():\n    ans = 10034\n    return ans\n\nans = solution()"
    ],
    "2c68e4214ff54f85956ee7cc54457f0e": [
        "def solution():\n    total_questions = 50\n    unattempted_questions = 3\n    correct_mark = 4\n    wrong_mark = -1\n    total_score = 168\n\n    # Let x be the number of correctly answered questions\n    # The number of wrongly answered questions will then be (total_questions - unattempted_questions - x)\n\n    for x in range(total_questions - unattempted_questions + 1):\n        wrong_answers = (total_questions - unattempted_questions - x)\n        score = x * correct_mark + wrong_answers * wrong_mark\n        \n        if score == total_score:\n            return x\n\nans = solution()"
    ],
    "ae56d2e7b43c4bd68b65a028a92a6651": [
        "def solution():\n    total_halves = 2 * 2 + 1  # Convert 2 and 1/2 into halves to get 5 halves\n    quarters_in_half = 0.5     # There is half of a quarter in a half\n    num_quarters = total_halves / quarters_in_half\n\n    return int(num_quarters)\n\nans = solution()"
    ],
    "8aad358e912f47108a9715343902ea04": [
        "def solution():\n    lucy_position = 5\n    eddie_position = 9\n    people_between = 2\n\n    # Total people is the sum of Lucy's position, Eddie's position,\n    # and the people between, subtracting the overlap (Lucy's position minus 1).\n    total_people = lucy_position + eddie_position + people_between - (lucy_position - 1)\n\n    return total_people\n\nans = solution()"
    ],
    "59d86540e8a94f73833a04f93b4465f1": [
        "def solution():\n    for B in range(10):\n        if int(f'26{B}789') % 13 == 0:\n            return B\n\nans = solution()"
    ],
    "47825c0910a244f4bdcd974186bcaefe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 4) * 7 - 21, 35)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f0cc63d487f641d6828e61eaf1fc53c8": [
        "def solution():\n    primes = [2, 3, 5, 7]  # All prime numbers less than 8\n    for i in range(min(primes), 3*5*7*8):  # Smallest common multiple + max possible remainder\n        remainders = [i % 3, i % 5, i % 7, i % 8]\n        \n        # Check if the remainders match the prime numbers (in any order)\n        if sorted(remainders) == sorted(primes):\n            return i\n\nans = solution()"
    ],
    "fe803c1367d64b149801be4344758226": [
        "def solution():\n    total_length_cm = 11 * 100 + 74  # converting total length to cm\n    dress_length_cm = 5 * 100 + 8  # converting dress length to cm\n    remaining_length_cm = total_length_cm - dress_length_cm\n    stripe_length_cm = remaining_length_cm / 9\n\n    # Converting stripe length back to meters and centimeters\n    stripe_length_m = stripe_length_cm // 100\n    stripe_length_cm_remainder = stripe_length_cm - (stripe_length_m * 100)\n\n    return (stripe_length_m, stripe_length_cm_remainder)\n\nans = solution()"
    ],
    "58e3a2db56754c6f9d5e40fe1b58ffe7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    orchids, tulips, roses = symbols('orchids tulips roses')\n    \n    # Given ratios and total number of flowers\n    equation1 = Eq(3 * tulips, 5 * orchids)\n    equation2 = Eq(orchids + tulips + roses, 3616)\n    \n    # After selling the flowers\n    flowers_left = 2644\n    sold_orchids = 0.4 * orchids\n    sold_tulips = tulips / 5\n    sold_roses = 0.25 * roses\n    equation3 = Eq(orchids - sold_orchids + tulips - sold_tulips + roses - sold_roses, flowers_left)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (orchids, tulips, roses))\n\n    return solutions[orchids]\n\nans = solution()"
    ],
    "2a6b8ddd03b04d6ca675e0515ac48c3f": [
        "def solution():\n    ans = 20.23 * 39 + 202.3 * 4.1 + 4 * 101.15\n    return ans\n\nans = solution()"
    ],
    "a56cc128d0da4c10987a8d45533419d8": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n    \n    # Maximum number of left-handed pupils (total - right-handed).\n    max_left_handed = total_pupils - right_handed\n    \n    # Minimum number of right-handed girls (total girls - maximum left-handed pupils).\n    min_right_handed_girls = girls - max_left_handed\n    \n    # If this number is negative, it means that there cannot be more left-handed people than girls, \n    # thus all left-handed people are girls and the rest of the girls are right-handed. \n    # Otherwise, it is simply the minimum right-handed girls.\n    min_right_handed_girls = max(min_right_handed_girls, 0)\n    \n    return min_right_handed_girls\n\nans = solution()"
    ],
    "4fbf262896eb43f0886f401236b6a692": [
        "def solution():\n    # For the original piece to be cut into 5 sections, Katie needs to make 4 cuts.\n    # So it takes 8 minutes to make 4 cuts.\n    # If her cutting speed remains constant, then each cut takes 2 minutes (8 minutes / 4 cuts).\n    \n    # Now, to cut the wood 6 times, she will make 6 cuts.\n    # So, it will take her 6 cuts * 2 minutes per cut.\n    \n    minutes_per_cut = 8 / 4\n    total_minutes = 6 * minutes_per_cut\n    \n    return total_minutes\n\nans = solution()"
    ],
    "488360b26f1144849d4bb784a270ca57": [
        "def solution():\n    for chickens in range(11):  # There cannot be more than 10 chickens\n        rabbits = 10 - chickens\n        if chickens * 2 + rabbits * 4 == 34:  # Number of legs must match\n            return chickens\n\nans = solution()"
    ],
    "bdc6e2ddbb4c4c19b2b90c3c89e0ae05": [
        "def solution():\n    ans = 0.012 + 2.03 + 0.1456\n    return ans\n\nans = solution()"
    ],
    "8a42b93556ef4bcebb38b2ba338a9e1d": [
        "def solution():\n    ans = 60.2 / 7\n    return ans\n\nans = solution()"
    ],
    "a7d1fbe2679e40b58d6660db0ed3287b": [
        "def solution():\n    for age in range(30, 121):\n        if age % 6 == 2 and age % 7 == 5:\n            return age\n\nans = solution()"
    ],
    "76f0b59b2fe34356a29cea5b4f171d3b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    books, files = symbols('books files')\n    \n    # Equation representing the total cost\n    equation1 = Eq(12 * books + 9 * files, 336)\n    \n    # Equation representing the difference in quantity\n    equation2 = Eq(books, files + 14)\n    \n    # Solve the system of equations for the number of books and files\n    solutions = solve((equation1, equation2), (books, files))\n    \n    return solutions[books]\n\nans = solution()"
    ],
    "4073b71163494881a2c9c5629d8b16a5": [
        "def solution():\n    # Worst case scenario, Peter picks a sock of each color first.\n    worst_case_pick = 3\n    # To ensure that he gets two socks of the same colour, he needs one more pick.\n    next_pick = 1\n\n    return worst_case_pick + next_pick\n\nans = solution()"
    ],
    "49714794b0f94aada1cf3dfbf03a6990": [
        "def solution():\n    total_amount = 490  # Convert pounds to pence\n    for num_each_coin in range(1, total_amount):\n        if (5 + 10 + 20) * num_each_coin == total_amount:\n            return num_each_coin * 3  # Total number of coins (3 types each)\n\nans = solution()"
    ],
    "c2819474faa94700a66e972f6de65651": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    square, triangle, diamond = symbols('square triangle diamond')\n\n    equation1 = Eq(square + triangle, 10)\n    equation2 = Eq(triangle + diamond, 16)\n    equation3 = Eq(square + triangle + diamond, 22)\n\n    solutions = solve((equation1, equation2, equation3), (square, triangle, diamond))\n\n    return solutions[square] + solutions[diamond]\n\nans = solution()"
    ],
    "29659ea8c8ba40fcbfd094b963998970": [
        "def solution():\n    # Calculate the number of digits for each section of page numbers\n    # 1-9, 10-99, 100-131\n    one_digit_pages = 9\n    two_digit_pages = 99 - 9\n    three_digit_pages = 131 - 99\n    \n    # Calculate total number of digits\n    total_digits = (one_digit_pages * 1) + (two_digit_pages * 2) + (three_digit_pages * 3)\n    \n    return total_digits\n\nans = solution()"
    ],
    "6a58abe1371844c497a2ad82064a0ebd": [
        "def solution():\n    # Convert Japan departure time to France time\n    # 8 pm in Japan is 1 pm in France on the same day (since France is 7 hours behind Japan)\n    france_departure_hour = 20 - 7  # 20 is 8pm in 24-hour format\n   \n    # Calculate the time difference in hours from the departure in France local time to the arrival time \n    # Since Amy arrives at 1am on the next day, we have to consider the time from the departure till midnight,\n    # and then add the hour of arrival after midnight.\n\n    # Time from France's departure time to midnight\n    hours_until_midnight = 24 - france_departure_hour\n    \n    # Time from midnight to arrival time in France\n    hours_after_midnight = 1\n    \n    # Total flight hours is the sum of hours until midnight and hours after midnight\n    total_flight_hours = hours_until_midnight + hours_after_midnight\n    \n    return total_flight_hours\n\nans = solution()"
    ],
    "6fc358af07bb4fb290d8b7b95d0d4815": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    necklace, earring = symbols('necklace earring')\n\n    equation1 = Eq(9 * necklace + 5 * earring, 1440)\n    equation2 = Eq(2 * necklace + 3 * earring, 439)\n\n    solutions = solve((equation1, equation2), (necklace, earring))\n\n    total_cost = solutions[necklace] + solutions[earring]\n\n    return total_cost\n\nans = solution()"
    ],
    "b89eb8f48467425ca5d1e6474cae3be8": [
        "def solution():\n    result = 60.2 / 7\n    return result\n\nans = solution()"
    ],
    "adae7d5f0cb94d7e81c361caadeeff21": [
        "def solution():\n    total_questions = 50\n    unanswered = 3\n    total_score = 168\n    correct_marks = 4\n    incorrect_marks = -1\n\n    # Let's consider x as the number of correct answers\n    # Total questions - unanswered questions - correct answers gives us the number of incorrect answers\n    # Score = (correct answers * correct_marks) + (incorrect answers * incorrect_marks)\n    # 168 = (x * 4) + ((47 - x) * -1)\n    # Now let's solve for x\n\n    # Rearranging the equation: 4x - (47 - x) = 168 => 4x + x - 47 = 168 => 5x = 168 + 47 => 5x = 215\n    correct_answers = (total_score + total_questions - unanswered) / (correct_marks - incorrect_marks)\n\n    return int(correct_answers)\n\nans = solution()"
    ],
    "b658611043604a84904809a513eca7b0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 71)\n    equation2 = Eq(x - y, 9)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "9638aa4f9615400687f09c8801020eb6": [
        "def solution():\n    return 391 * 7\n\nans = solution()"
    ],
    "d8d8fba2232a4e928731d18f9af5290b": [
        "def solution():\n    # For the first digit (the tens place), we can have only two options: 1 or 2, because we can't have 0.\n    options_for_first_digit = 2\n    \n    # For the second digit (the ones place), we can use 0, 1, or 2. So, we have three options.\n    options_for_second_digit = 3\n    \n    # According to the multiplication rule, we multiply the options for each place to get overall options.\n    total_numbers = options_for_first_digit * options_for_second_digit\n    \n    return total_numbers\n\nans = solution()"
    ],
    "a137655c79064ec7a5bd8abbf2cc059d": [
        "from math import factorial\n\ndef solution():\n    numerator = 100\n    den_start = 97\n    result = 0\n    \n    for end in range(0, 98):\n        result += numerator / factorial(den_start + end)\n        numerator *= (100 - end - 1)\n        \n    return result\n\nans = solution()"
    ],
    "b99e232169f64053801fd886d5ce3984": [
        "def solution():\n    # Given: The arithmetic sequence sums to 200, and the common difference is 2\n    sum_required = 200\n    common_difference = 2\n\n    # Let's denote the smallest of the five consecutive even numbers as n.\n    # Then the other four numbers are n+2, n+4, n+6, n+8.\n    # So, we have: n + (n + 2) + (n + 4) + (n + 6) + (n + 8) = 200\n\n    # We can simplify the sum to 5n + 20 and solve it for n:\n    n = (sum_required - 20) / 5\n\n    return int(n)\n\nans = solution()"
    ],
    "8dea568bfc0f47a88a18a150964ebdd8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the volume of sugar solution transferred in grams.\n    x = symbols('x')\n\n    # In container A:\n    # Initial amount of sugar is 50 * 10% = 5g\n    # After transfer: (5 - 0.10x) / (50 - x) = final concentration\n\n    # In container B:\n    # Initial amount of sugar is 30 * 20% = 6g\n    # After transfer: (6 + 0.20x) / (30 + x) = final concentration\n\n    # Since final concentrations are equal:\n    equation = Eq((5 - 0.10 * x) / (50 - x), (6 + 0.20 * x) / (30 + x))\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    # Only consider the positive solution since negative volume doesn't make sense\n    ans = [sol.evalf() for sol in solution if sol > 0]\n\n    return ans[0]\n\nans = solution()"
    ],
    "5e71c6a0c7254d3ab8b549338d61acff": [
        "def solution():\n    price_per_cooker = 350\n    number_of_cookers = 16\n    total_cost = price_per_cooker * number_of_cookers\n    return total_cost\n\nans = solution()"
    ],
    "f22bedb58be24a40a4d182dd0dbc7ffc": [
        "def solution():\n    total_votes = 120\n    mark_votes = 22\n    nicole_votes = 27\n    peter_votes = 35\n    remaining_votes = total_votes - (mark_votes + nicole_votes + peter_votes)\n    votes_needed = max(mark_votes, nicole_votes) - peter_votes + 1\n    votes_to_win = max(remaining_votes, votes_needed)\n    return votes_to_win\n\nans = solution()"
    ],
    "3aa75c8b30a54c67a6563a2056fe6973": [
        "def solution():\n    flour_ratio = 25 / 40\n    milk_amount = 80 * flour_ratio\n    return milk_amount\n\nans = solution()"
    ],
    "92a0e5f9500b4853819d540562be1a80": [
        "def solution():\n    ans = 87 * 23\n    return ans\n\nans = solution()"
    ],
    "2084c341f98040dbb7686adc74b457f7": [
        "def solution():\n    number1 = 31\n    number2 = 32\n    units1 = number1 % 10\n    units2 = number2 % 10\n    if units1 > units2:\n        ans = number1\n    else:\n        ans = number2\n    return ans\n\nans = solution()"
    ],
    "590bcb8900904fe88f3fadadb68feb11": [
        "def solution():\n    original_price = 540\n    discount = 189\n    percentage_reduction = (discount / original_price) * 100\n    return percentage_reduction\n\nans = solution()"
    ],
    "27fec67c0edf42efbd46038d592d002b": [
        "def solution():\n    original_amount = 100\n    spent_on_book = original_amount * 0.10\n    remaining_after_book = original_amount - spent_on_book\n    spent_on_dvd = remaining_after_book * 0.20\n    remaining_after_dvd = remaining_after_book - spent_on_dvd\n    return remaining_after_dvd\n\nans = solution()"
    ],
    "4517703a55ee4695b02b8505817748b1": [
        "def solution():\n    # We assume the number of coins for each type is n\n    # We know that each coin type will add up to a certain amount\n    # So we can set up the following equation where the total amount is £4.90, or 490 pence:\n    # 5n + 10n + 20n = 490\n    # We can simplify this equation to:\n    # 35n = 490\n    # n = 490 / 35\n    n = 490 // 35  # Using integer division since we can't have partial coins\n\n    # Since we have an equal number of 5p, 10p, and 20p coins,\n    # the total number of coins will be 3 times n\n    total_coins = 3 * n\n\n    return total_coins\n\nans = solution()"
    ],
    "892ff0f234ae4e3cb7a7bf750eb3a01d": [
        "def solution():\n    total_money_cents = 28 * 100  # Convert dollars to cents\n    gift_cost_cents = 20 * 100  # Convert dollars to cents\n    remaining_money = total_money_cents - gift_cost_cents  # Calculate the remaining money in cents\n\n    return remaining_money\n\nans = solution()"
    ],
    "038a870a64fa4b908242c675e09c8860": [
        "def solution():\n    total_days = 9\n    total_sweets = 135\n    daily_increase = 3\n    \n    # Let the number of sweets eaten on the first day be x.\n    # Then the sequence of sweets eaten over the 9 days forms an arithmetic sequence:\n    # x, x+3, x+6, ..., x+3*(total_days-1)\n    # The sum of this sequence is 135.\n    # Using the sum formula for an arithmetic sequence: S_n = n/2 * (a_1 + a_n)\n    # 135 = total_days/2 * (2*x + (total_days - 1) * 3)\n    \n    # Solving for x:\n    x = (total_sweets * 2 - daily_increase * (total_days - 1) * total_days) / (2 * total_days)\n    \n    # The last day's sweets are:\n    last_day_sweets = x + daily_increase * (total_days - 1)\n    \n    return last_day_sweets\n\nans = solution()"
    ],
    "8f16804135244d3d952f4f7aa96aea99": [
        "def solution():\n    principal = 1000\n    rate = 0.06\n    time = 5\n\n    balance = principal * (1 + rate) ** time\n\n    return balance\n\nans = solution()"
    ],
    "749213142ff9426e8ef90f3f3aa7daa5": [
        "def solution():\n    annual_salary = 24000\n    pay_rise_percent = 10\n    monthly_salary = annual_salary / 12\n    \n    pay_rise_amount = annual_salary * (pay_rise_percent / 100)\n    new_annual_salary = annual_salary + pay_rise_amount\n    new_monthly_salary = new_annual_salary / 12\n    \n    return new_monthly_salary\n\nans = solution()"
    ],
    "27c26de10eb14930ae9cdf02279d1e58": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10 - 3 * (x - 2), 4 * x - 5 * (4 - x))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3da2630a7c3042408936061a5d0172c6": [
        "def solution():\n    return 7842 - 998\n\nans = solution()"
    ],
    "fa6e880afc1b420b858420333e657e2c": [
        "def solution():\n    pages = 185\n    digits = 0\n    \n    if pages > 9:\n        digits += 9\n    if pages > 99:\n        digits += 2 * (pages - 99)\n    else:\n        digits += len(str(pages)) * (pages - 9)\n        \n    return digits\n\nans = solution()"
    ],
    "a8fa71f1af7245808f0ae42a4ff273b0": [
        "def solution():\n    ans = 704 - 457\n    return ans\n\nans = solution()"
    ],
    "a12c2b2900394c9999c189d1a33af5a3": [
        "def solution():\n    ans = 123 - (23 + 56)\n    return ans\n\nans = solution()"
    ],
    "e6f07695c3c44ceda16250795d0df505": [
        "def solution():\n    # We will iterate over all possible days and months to find the solution\n    for month in range(1, 13):     # Month ranges from 1 to 12\n        for day in range(1, 32):   # Day ranges from 1 to 31, though some months do not have 31 days, it's a maximum cap in this brute force method\n            if month * 31 + day * 12 == 376: # Given equation from the problem\n                return f\"{day:02d}{month:02d}\" # Format it as \"ddmm\"\n\nans = solution()"
    ],
    "0581d122126f4a8aa0564b99c14fdde4": [
        "def solution():\n    # 4.08 * 20 = 1.08 * 20 + box * 20\n    # Dividing both sides by 20 to isolate the box variable\n    box = (4.08 - 1.08)\n    return box\n\nans = solution()"
    ],
    "50997193003b42a5b1b612a65004742c": [
        "def solution():\n    sequence = [119, -117, 115, -113, 111, -109, 107, -105, 103, -101, 99]\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "7501b55360b14603a4f3cd0fec5e5c2e": [
        "def solution():\n    ans = 158 * 23\n    return ans\n\nans = solution()"
    ],
    "2596b3b0a45a4d33bab961b1ab804010": [
        "def solution():\n    max_number = 2023\n    count = 0\n    for i in range(1, max_number):\n        if i % 7 != 0 and i % 17 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "39fc04a75d5b4b149928dc45f62d257c": [
        "def solution():\n    cost_per_cooker = 350\n    number_of_cookers = 16\n    total_cost = cost_per_cooker * number_of_cookers\n    return total_cost\n\nans = solution()"
    ],
    "18b18182a46e40b88627f1ccea5b3d8e": [
        "def solution():\n    calculator_original_price = 6  # in pounds\n    protractor_original_price = 0.30  # in pounds, 30p converted to pounds\n    \n    calculator_sale_price = calculator_original_price - (calculator_original_price * 0.25)\n    protractor_sale_price = protractor_original_price * 0.5\n    \n    total_cost = (8 * calculator_sale_price) + (20 * protractor_sale_price)\n    \n    return total_cost\n\nans = solution()"
    ],
    "6aa8b0892ddb472f98ad315fc9309ec6": [
        "def solution():\n    flour_needed = 40\n    milk_needed = 80\n    tom_flour = 25\n\n    milk_to_use = (milk_needed * tom_flour) / flour_needed\n\n    return milk_to_use\n\nans = solution()"
    ],
    "b0936b75d5ce4b94ae9381888ed227ad": [
        "def solution():\n    sweets_left = 38\n    sweets_taken = 5\n    total_sweets = sweets_left + sweets_taken\n    return total_sweets\n\nans = solution()"
    ],
    "3912f4432e58498cbda173e79f990a37": [
        "def solution():\n    numerator = 1\n    denominator = 2015**3 - 2014 * (2015**2 + 2016)\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "d32e56919f284c4db3acbe24232d6fd9": [
        "def solution():\n    ans = 5 / (1/4)\n    return ans\n\nans = solution()"
    ],
    "060047cfbee741bb986e84b4387b64bc": [
        "def solution():\n    # Ellen's bike ride to the train station\n    bike_time_hours = 1  # since it's from 7:30 am to 8:30 am\n    bike_speed_mph = 10\n    bike_distance = bike_time_hours * bike_speed_mph\n    \n    # Ellen's train ride to the town\n    train_time_hours = 2  # since it's from 8:30 am to 10:30 am\n    train_speed_mph = 50\n    train_distance = train_time_hours * train_speed_mph\n    \n    # Total distance traveled\n    total_distance = bike_distance + train_distance\n    return total_distance\n\nans = solution()"
    ],
    "356c71d6a146447aa7e01a575a71da98": [
        "def solution():\n    ans = 77.5 * 52 / 100 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "cbb06928b2ac4d109928a77853509743": [
        "def solution():\n    # Total amount of work can be considered as W\n    # Assuming rate of work done by one ox in one week is R\n    # 27 oxen * 6 weeks * R = W (equation 1)\n    # 23 oxen * 9 weeks * R = W (equation 2)\n    # From equation 1 and 2, we can say that 27 * 6 = 23 * 9,\n    # so we can find R (the rate of one ox eating grass for one week)\n    \n    # We are asked to find the number of weeks (X) it will take for 21 oxen to finish eating,\n    # so the equation would be:\n    # 21 oxen * X weeks * R = W\n    # We can solve for X knowing that 27 * 6 = 23 * 9\n    \n    oxen_1 = 27\n    weeks_1 = 6\n    oxen_2 = 23\n    weeks_2 = 9\n    oxen_3 = 21\n    \n    # Since work is same, we can equate the two equations (27*6*R = 23*9*R)\n    # and solve for R dividng both sides by the number of oxen and weeks\n    # R = W / (27 * 6) = W / (23 * 9)\n    \n    # Now, W = oxen_3 * X * R, substituting the value of R from above\n    # oxen_3 * X = W / R = (27 * 6) = (23 * 9)\n    # X = (27 * 6) / oxen_3 = (23 * 9) / oxen_3\n    \n    weeks_3 = (weeks_1 * oxen_1) / oxen_3\n    return weeks_3\n\nans = solution()"
    ],
    "3747f6795b484a8d933bdeff1799037e": [
        "def solution():\n    ans = (0.02) ** 2\n    return ans\n\nans = solution()"
    ],
    "de37bee61aca42a6b5dabc0d16ba4df1": [
        "def solution():\n    return 1440 // 24\n\nans = solution()"
    ],
    "a1e7310c3dd84d7a9231e38d0f9f7452": [
        "def solution():\n    # Let's denote the younger elephant's age as y and the older one's age as o.\n    # Given:\n    # Age of younger elephant this year (y) = 18\n    # The older elephant says \"when you grow up to my current age, I will be 62 years old\"\n    # This means when the younger elephant is o years old, the older elephant will be:\n    # o + (o - y) = 62 (since the number of years it takes the younger elephant to reach the age o is the same number\n    # of years the older elephant will age from now until then)\n    # We need to solve for o (age of older elephant)\n\n    y = 18  # Age of younger elephant\n    o = symbols('o')  # symbol for older elephant's age\n\n    # o + (o - y) = 62, rearrange to find o\n    equation = Eq(o + (o - y), 62)\n    solution = solve(equation, o)\n\n    # Return the age of the older elephant this year\n    return solution[0]\n\nans = solution()"
    ],
    "51579396b1d94a949192647f00104857": [
        "from math import factorial\n\ndef solution():\n    word = \"TEENAGE\"\n    letter_counts = {char: word.count(char) for char in set(word)}\n\n    total_permutations = factorial(len(word))\n\n    for count in letter_counts.values():\n        total_permutations //= factorial(count)\n    \n    return total_permutations\n\nans = solution()"
    ],
    "be8ef166256a4fb4a86c6d0fcd933a8b": [
        "def solution():\n    # Since Lucas is 3rd counting from front to back and 2nd counting from back to front,\n    # there are 3 + 2 - 1 rows. We subtract 1 because Lucas is counted in both directions.\n    rows = 3 + 2 - 1\n    \n    # Since Lucas is 4th counting from left to right and 3rd counting from right to left,\n    # there are 4 + 3 - 1 columns. We subtract 1 for the same reason as above.\n    columns = 4 + 3 - 1\n    \n    # The total number of students is the number of rows multiplied by the number of columns.\n    return rows * columns\n\nans = solution()"
    ],
    "ff9e28ea21aa4addbaf6b47561b79b63": [
        "def solution():\n    total_marbles = 112\n\n    # Let's denote blue marbles as x\n    # Then red marbles will be x + 25\n    # Green marbles will be x + 25 + 32\n    # We can then form the following equation:\n    # x + (x + 25) + (x + 25 + 32) = 112\n\n    # Simplifying the equation:\n    # 3x + 25 + 25 + 32 = 112\n    # 3x + 82 = 112\n    # 3x = 112 - 82\n    # 3x = 30\n    # x = 10\n\n    blue_marbles = (total_marbles - 82) // 3\n    return blue_marbles\n\nans = solution()"
    ],
    "216fe3f443544e68a0aed48da56449e1": [
        "def solution():\n    sale_price = 60\n    discount = 0.25\n    original_price = sale_price / (1 - discount)\n    return original_price\n\nans = solution()"
    ],
    "2d46f0af47944add838f9674e67c820b": [
        "def solution():\n    for num in range(217, 1000):\n        if sum(map(int, str(num))) == 9:\n            return num\n\nans = solution()"
    ],
    "b02ecddb14a14da0b461c2caa96532c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ema, keng_wee = symbols('ema keng_wee')\n    \n    equation1 = Eq(keng_wee - ema, 360)\n    equation2 = Eq(ema - ema / 4, keng_wee - (4/7) * keng_wee)\n    \n    solutions = solve((equation1, equation2), (ema, keng_wee))\n    \n    return solutions[keng_wee]\n\nans = solution()"
    ],
    "d361ce8aec3d498eba6093a4def8859a": [
        "def solution():\n    return 284 + 69 - 271\n\nans = solution()"
    ],
    "4527a361966a43bfb89e355298a7a037": [
        "def solution():\n    one_fourth_of_36 = 1/4 * 36\n    ans = one_fourth_of_36 * 10\n    return ans\n\nans = solution()"
    ],
    "d92a77c7952a48ab83c4fa481451ad5c": [
        "def solution():\n    return 6.4 * 2.7\n\nans = solution()"
    ],
    "a1693ad113aa4c239ad89d235418724c": [
        "def solution():\n    total_teachers = 100\n    french_teachers = 75\n    japanese_teachers = 45\n    \n    # By Inclusion-Exclusion Principle\n    both_languages = french_teachers + japanese_teachers - total_teachers\n    only_french = french_teachers - both_languages\n    \n    return only_french\n\nans = solution()"
    ],
    "ef243e4e071b44f7aa95098500cc59c4": [
        "def solution():\n    numbers = [37, 38, 40, 43, 42, 41]\n    result = sum(numbers)\n    return result\n\nans = solution()"
    ],
    "cefb89968d41422986f6e937e4276320": [
        "def solution():\n    # Lucas's position in the array can help us determine the dimensions of the rectangle.\n    # Since he is 3rd from the front and 2nd from the back, there are 3 + 2 - 1 rows.\n    # (The -1 is because we are counting Lucas in both the 3rd from the front and the 2nd from the back).\n    rows = 3 + 2 - 1\n\n    # Similarly, since he is 4th from the left and 3rd from the right, there are 4 + 3 - 1 columns.\n    columns = 4 + 3 - 1\n\n    # The total number of students will be the product of the number of rows and columns.\n    total_students = rows * columns\n\n    return total_students\n\nans = solution()"
    ],
    "584f43df1fd1456fb6a9ff29d820ce08": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of girls (g) and boys (b)\n    g, b = symbols('g b')\n\n    # Equation 1: The initial number of girls is 9/11 of the number of boys\n    equation1 = Eq(g, 9/11 * b)\n\n    # Equation 2: After adding 2 girls, the number of girls is 10/11 of the number of boys\n    equation2 = Eq(g + 2, 10/11 * b)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (g, b))\n\n    # Calculate the total number of students after the 2 girls are transferred in\n    total_students = solutions[g] + 2 + solutions[b]\n\n    return total_students\n\nans = solution()"
    ],
    "a98a706222f448d38a755e2d7c5165fc": [
        "def solution():\n    return 418 * 7\n\nans = solution()"
    ],
    "67b7658f12214846a53f685f44cedc06": [
        "def solution():\n    result = 77.5 * (52 / 100) + 5.2 * 2.25\n    return result\n\nans = solution()"
    ],
    "439b192b6f9344e0b4321e87c7abf0c6": [
        "def solution():\n    ans = 1 # Starting with the first term \"1\"\n    for i in range(2, 11):\n        ans += sum(1/n for n in range(1, i+1))  # Adding the increasing sequence for each denominator\n        ans += sum(1/n for n in range(i-1, 0, -1))  # Adding the decreasing sequence for each denominator\n    return ans\n\nans = solution()"
    ],
    "302d0208f5dc4303b27c7d3b793b9b4a": [
        "from sympy import symbols, solve\n\ndef solution():\n    x, y = symbols('x y')\n    expr1 = 2 * (3 * x - y)\n    expr2 = 2 * x + 4\n\n    equation = expr1 - expr2\n    result = solve(equation, (x, y))\n\n    value = 2 * x - y\n    calculated_value = value.subs(result)\n\n    return calculated_value\n\nans = solution()"
    ],
    "a33234abdd534b3cb07a4fa3e75ec899": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lim, tan = symbols('lim tan')\n    equation1 = Eq(lim + tan, 390)\n    equation2 = Eq(lim, 5 * tan)\n\n    solutions = solve((equation1, equation2), (lim, tan))\n    \n    lim_tiles = solutions[lim]\n    tan_tiles = solutions[tan]\n    \n    return lim_tiles - tan_tiles\n\nans = solution()"
    ],
    "a4fcfa11aee9487fa89fc3ae9b909d04": [
        "def solution():\n    total_money = 500  # £5 in pence\n    milk_cost = 3 * 31  # cost of 3 litres of milk\n    crisps_cost = 2 * 17  # cost of 2 packets of crisps\n    bread_cost = 78  # cost of 1 large loaf of bread\n    magazine_cost = 105  # cost of 1 magazine in pence\n\n    total_cost = milk_cost + crisps_cost + bread_cost + magazine_cost\n    change = total_money - total_cost\n\n    return change\n\nans = solution()"
    ],
    "dc5e7ba6ef7e4f3aa7342a10e0e8ce72": [
        "def solution():\n    # Let t be the number of sweets Trevor has and s be the number Siobhan has.\n    # According to the problem, we have the following equations:\n    # t = 5 * s (Trevor has five times as many sweets as Siobhan)\n    # t = s + 24 (Siobhan has 24 sweets fewer than Trevor)\n\n    # We only need a single equation to find the solution since the\n    # two equations essentially express the same relationship.\n    # Let's substitute t with 5 * s in the second equation:\n    # 5 * s = s + 24\n    # Now we solve for s:\n    # 4 * s = 24\n    s = 24 / 4\n    \n    # Once we have s, we can find t:\n    t = 5 * s\n    \n    return int(t)\n\nans = solution()"
    ],
    "67e8fb8a09154285b3afecd086511f32": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    zehan_current = symbols('zehan_current')\n    zehan_future = zehan_current + 12\n    equation = Eq(zehan_future, 3 * zehan_current)\n    zehan_age_now = solve(equation, zehan_current)\n    return zehan_age_now[0]\n\nans = solution()"
    ],
    "281573f15ba24a4186a9388a1bf098cb": [
        "def solution():\n    total_cost = 58.10\n    num_tickets = 7\n    cost_per_ticket = total_cost / num_tickets\n    return round(cost_per_ticket, 2)\n\nans = solution()"
    ],
    "6001dc976c8f4e57b213b0ec00f81c8d": [
        "def solution():\n    return 0.36 * 100\n\nans = solution()"
    ],
    "a19e02dd5cf546089c95a5d1d0b6a300": [
        "from math import comb\n\ndef solution():\n    # Calculate the number of ways to choose 4 students from 12 (excluding A, B, and C)\n    ways_to_choose_4 = comb(12, 4)\n\n    # Multiply by 3 for the three ways to include exactly one of A, B, or C\n    total_ways = ways_to_choose_4 * 3\n\n    return total_ways\n\nans = solution()"
    ],
    "f316dc29ab1c42f6856c88cdf434b9d6": [
        "def solution():\n    ans = 536 - 11\n    return ans\n\nans = solution()"
    ],
    "30a3509e42044edda1c9958aff442893": [
        "def solution():\n    v = 3 * 6\n    return v\n\nans = solution()"
    ],
    "f8d4c7f0881341e782609d8014e213f2": [
        "def solution():\n    # let's denote the original amount of lemon juice as x (in ml)\n    # since the ratio is 2 parts lemon juice to 3 parts water originally,\n    # the corresponding amount of water will be (3/2) * x\n\n    # after adding 80ml of lemon juice,\n    # the new amount of lemon juice becomes x + 80ml\n    # and the ratio becomes 6 parts lemon juice to 5 parts water\n\n    # using the unitary method, we can set up an equation as follows\n    # (x + 80) / ((3/2) * x) = 6 / 5\n\n    # solving for x:\n    x = symbols('x')\n    equation = Eq((x + 80) / ((3/2) * x), 6/5)\n\n    # solve the equation\n    solution = solve(equation, x)\n\n    # we want the positive solution\n    answer = [s.evalf() for s in solution if s > 0]\n\n    return answer[0]  # since we need only one value\n\nans = solution()"
    ],
    "23588cfeb453402e8f12679dd2cc4b4d": [
        "def solution():\n    # Shaila's share is 6 parts\n    shaila_parts = 6\n    shaila_sweets = 36\n\n    # Total parts are therefore 5 (Savannah's) + 6 (Shaila's) = 11\n    total_parts = 5 + shaila_parts\n\n    # Calculate one part\n    one_part = shaila_sweets / shaila_parts\n\n    # Total sweets altogether for both\n    total_sweets = one_part * total_parts\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "0cbee9a5a4dd4fbe91884d23889738ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    savings = symbols('savings')\n\n    # Kim gave 1/3 of her savings to her mother\n    mom = savings / 3\n\n    # Kim bought dresses for 177 and earrings for 129\n    spent_dresses = 177\n    spent_earrings = 129\n\n    # The amount of money left is 50% of what she gave her mother\n    # savings - mom - spent_dresses - spent_earrings = 50% of mom\n    equation = Eq(savings - mom - spent_dresses - spent_earrings, mom / 2)\n\n    # Solve the equation\n    solution = solve(equation, savings)\n\n    return solution[0]\n\nans = solution()"
    ],
    "2f04dfbbee9d429aa18f6c6b7716eaad": [
        "def solution():\n    total_teachers = 100\n    french_teachers = 75\n    japanese_teachers = 45\n\n    # Using Inclusion-Exclusion Principle to find how many know both languages\n    both_languages = (french_teachers + japanese_teachers) - total_teachers  \n    \n    # Only French teachers are total French teachers minus the ones that know both languages\n    only_french = french_teachers - both_languages\n    \n    return only_french\n\nans = solution()"
    ],
    "93c95414fb804348a0d0b204e11a3791": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let z be the current age of Zehan\n    z = symbols('z')\n\n    # Equation representing the given relationship\n    equation = Eq(z + 12, 3 * z)\n\n    # Solving for z\n    current_age = solve(equation, z)[0]\n\n    return current_age\n\nans = solution()"
    ],
    "183382b70cca478d82e7b2a617f4c3a7": [
        "def solution():\n    usual_speed = 60  # mph\n    increased_speed = usual_speed * (1 + 30 / 100)  # 30% increased speed\n    time_loss = 9 / 60  # 9 minutes in hours\n\n    # Since time = distance/speed, if the car travels for the same distance d at two different speeds,\n    # the time taken at the increased speed will be less by the time the car departed late.\n\n    # Let d be the distance it needs to travel, we have\n    # d / usual_speed - d / increased_speed = time_loss\n    # Solving for d gives us the distance\n\n    d = (usual_speed * increased_speed * time_loss) / (increased_speed - usual_speed)\n\n    return d\n\nans = solution()"
    ],
    "1f23a8cd28504dc283d3311874eb1b31": [
        "def solution():\n    for red_ropes in range(11):\n        blue_ropes = 10 - red_ropes\n        total_length = red_ropes * 2 + blue_ropes * 3\n        if total_length == 26:\n            return red_ropes\n\nans = solution()"
    ],
    "271cac95894d444cb0e4c7e109f430e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(37 - 3 * (x + 7), 5 * x)\n    \n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "8539d96612824e36b81b50c2b2658def": [
        "def solution():\n    skipping_rope = 40\n    long_jump = 31\n    both = 21\n\n    only_one_event = (skipping_rope - both) + (long_jump - both)\n\n    return only_one_event\n\nans = solution()"
    ],
    "f4c49e9a21c542c0922cf3476b6075cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Declare variables\n    original_speed = symbols('original_speed')\n    original_time = symbols('original_time')\n    distance = symbols('distance')\n\n    # First situation: Increased speed by 25%\n    increased_speed = original_speed * 1.25\n    decreased_time = original_time - 20 / 60  # converting 20 minutes to hours\n\n    # Equation for the first situation, distance is the same\n    equation1 = Eq(distance, increased_speed * decreased_time)\n\n    # Second situation: Decreased speed by 45 meters per minute\n    decreased_speed = original_speed - 45\n    increased_time = original_time * 1.75  # time increased by 75%\n\n    # Equation for the second situation, distance is the same\n    equation2 = Eq(distance, decreased_speed * increased_time)\n\n    # Equation for the definition of speed\n    equation3 = Eq(distance, original_speed * original_time)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (original_speed, original_time, distance))\n\n    return solutions[distance]*1000\n\nans = solution()"
    ],
    "c51f49dc3f6c442eb3ffb2f4d9696fa4": [
        "def solution():\n    P = (21 * 100) / 30\n    return P\n\nans = solution()"
    ],
    "dfd8ad42f8c24fbab602cc7800828a8d": [
        "def solution():\n    first_half_total = 366\n    second_half_average = 65\n    second_half_months = 6\n    second_half_total = second_half_average * second_half_months\n    total_months = 12\n    yearly_total = first_half_total + second_half_total\n    monthly_average = yearly_total / total_months\n    return monthly_average\n\nans = solution()"
    ],
    "4189a90109e9484e9780addd6b35f9fb": [
        "def solution():\n    children = 0\n    while True:\n        children += 7\n        if children % 9 == 2:\n            break\n    return children\n\nans = solution()"
    ],
    "c5cf05af833245899166a02b3570e548": [
        "def solution():\n    count = 0\n    for x in range(1, 22 // 2 + 1):\n        y = 22 - x\n        if x != y:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6f8781d116474d85b94e06547f7d5416": [
        "from fractions import Fraction\n\ndef solution():\n    used_brownies = Fraction(1, 7)\n    used_cookies = Fraction(1, 14)\n    used_muffins = Fraction(1, 2)\n\n    total_used = used_brownies + used_cookies + used_muffins\n    return total_used\n\nans = solution()"
    ],
    "21c19bf30c9e484da5b4f34fb1840b5e": [
        "def solution():\n    factors = [i for i in range(1, 42) if 42 % i == 0]\n    A = factors[-1] - factors[0]\n    seventh_multiple = A * 7\n    return seventh_multiple\n\nans = solution()"
    ],
    "def5b3612da3468e9d98c7cc1995d2cd": [
        "def solution():\n    # Given ratio and height\n    ratio_height = 3\n    ratio_width = 4\n    height = 21\n    \n    # Calculate width based on the given ratio\n    width = (ratio_width * height) / ratio_height\n    \n    # Calculate perimeter of the screen\n    perimeter = 2 * (height + width)\n    \n    return perimeter\n\nans = solution()"
    ],
    "d8025a94b93345f1902df99a144007ac": [
        "def solution():\n    from fractions import Fraction\n\n    result = Fraction(1, 1)\n    for i in range(2, 12):\n        result *= Fraction(i + 1, i)\n\n    return float(result)\n\nans = solution()"
    ],
    "04961b35b9584c548a6854262aa9304c": [
        "def solution():\n    ans = 98 // 7\n    return ans\n\nans = solution()"
    ],
    "b648815bab0d43cd9b3f91f1c29fe90c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "a6427ff471f34eac98798cb1ab5da071": [
        "def solution():\n    number = int(\"3\" * 12)  # Create the number with 12-digit 3's\n    remainder = number % 7  # Find the remainder when dividing by 7\n    return remainder\n\nans = solution()"
    ],
    "e7414af263794113add74774679c9252": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nathan, rosephine, sheena = symbols('nathan rosephine sheena')\n\n    equation1 = Eq(1/2 * nathan, 1/5 * rosephine)\n    equation2 = Eq(1/5 * rosephine, 3/5 * sheena)\n    equation3 = Eq(nathan + rosephine + sheena, 780)\n\n    solutions = solve((equation1, equation2, equation3), (nathan, rosephine, sheena))\n\n    return solutions[sheena]\n\nans = solution()"
    ],
    "7f1e36d85a1d4a2f9ceb00407fbaa1e4": [
        "def solution():\n    # Let's assume the smaller number is x\n    # Then the larger number would be x + 36, as the difference is 36\n    # According to the question, the sum of the two numbers is 98:\n    # x + (x + 36) = 98\n    # 2x + 36 = 98\n    # 2x = 98 - 36\n    # 2x = 62\n    # x = 62 / 2\n    # x = 31\n    x = (98 - 36) / 2\n    return x\n\nans = solution()"
    ],
    "6e24543c83134c5590295ad8804d20c1": [
        "def solution():\n    bags = 8\n    pens_per_bag = 4\n    total_pens = bags * pens_per_bag\n    return total_pens\n\nans = solution()"
    ],
    "562c0f78f4174d73bb44a0cce09887c7": [
        "def solution():\n    total_ropes = 10\n    total_length = 26\n\n    for red_ropes in range(total_ropes + 1):\n        blue_ropes = total_ropes - red_ropes\n        if 2 * red_ropes + 3 * blue_ropes == total_length:\n            return red_ropes\n\nans = solution()"
    ],
    "4e8cab6040bd40b7893c300856c19b6b": [
        "def solution():\n    usual_speed = 60  # mph\n    increased_speed = usual_speed * 1.3  # 30% increase\n\n    # time saved due to increased speed is the time it departed late\n    time_saved = 9 / 60  # in hours\n\n    # distance = increased_speed * time_saved\n    distance = increased_speed * time_saved\n\n    # Because the car travels the same distance at the usual speed\n    # time spent at usual speed = distance / usual_speed\n    # and time spent at increased speed = distance / increased_speed\n    # and we know that the car departs 9 minutes later\n    # so: time at usual speed - time at increased speed = time_saved\n    # rearrange to find distance\n    distance = usual_speed * increased_speed * time_saved / (increased_speed - usual_speed)\n\n    return distance\n\nans = solution()"
    ],
    "f0b605621a9e488c833ca38ce574f364": [
        "def solution():\n    return 18 + 17 - 16 - 15 + 14 + 13 - 12 - 11\n\nans = solution()"
    ],
    "399a22bd96244c04ab9eff62cbee5b68": [
        "def solution():\n    p = 21 / 0.30\n    return p\n\nans = solution()"
    ],
    "348877530d8f4f2dbe709fa72001f569": [
        "def solution():\n    # Given cost of 6 files and 10 rulers is $40\n    # Let's denote cost of one file as f and one ruler as r.\n    # Then we have the equation for the given condition:\n    # 6f + 10r = 40\n\n    # Let's denote the required cost of 9 files and 15 rulers as ans.\n    # We want to find the equation:\n    # 9f + 15r = ans\n    \n    # We can observe that 9 files is 1.5 times the number of files in the given cost (6 files)\n    # and 15 rulers is also 1.5 times the number of rulers in the given cost (10 rulers).\n    # Therefore, the total cost of 9 files and 15 rulers will be 1.5 times the total cost of 6 files and 10 rulers.\n    \n    ans = 1.5 * 40  # Multiply the given total cost by 1.5 to find the required total cost\n    \n    return ans\n\nans = solution()"
    ],
    "c94ef69eb1ea40b382fada9c92ec874e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, jessie = symbols('john jessie')\n    \n    # John had 5/13 of Jessie's money\n    equation1 = Eq(john, (5/13) * jessie)\n    \n    # Jessie transferred $600 to John\n    john_after = john + 600\n    jessie_after = jessie - 600\n    \n    # John's money became 50% of Jessie's money\n    equation2 = Eq(john_after, 0.5 * jessie_after)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (john, jessie))\n    \n    # Calculate the total amount\n    total = solutions[john] + solutions[jessie]\n\n    return total\n\nans = solution()"
    ],
    "a848bdfd5ea34a9ebb4eb13e5c8f9d6f": [
        "from datetime import datetime\n\ndef solution():\n    time_format = \"%H:%M\"\n    time1 = datetime.strptime(\"10:30\", time_format)\n    time2 = datetime.strptime(\"11:00\", time_format)\n    duration = time2 - time1\n    return duration.seconds // 60  # converting seconds to minutes\n\nans = solution()"
    ],
    "a6ce7d2ec26147f4873239aa9574bc39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let t be number of T-shirts and c be number of caps\n    t, c = symbols('t c')\n\n    # Equation for the ratio of T-shirts to caps\n    ratio_eq = Eq(t / c, 8 / 5)\n\n    # Equation for the money collected from selling 1/4 T-shirts and 1/5 caps\n    money_eq = Eq((t * (1/4) * 3) + (c * (1/5) * 5), 132)\n\n    # Solve the system of equations\n    solutions = solve((ratio_eq, money_eq), (t, c))\n\n    return solutions[t]\n\nans = solution()"
    ],
    "a31cae71b18e4581ac44ea1064373892": [
        "def solution():\n    cost_of_bananas = 3 * 12   # 3 bananas at 12p each\n    cost_of_apples = 5 * 11    # 5 apples at 11p each\n    total_cost = cost_of_bananas + cost_of_apples  # total cost in pence\n\n    payment_in_pence = 200 * 100  # £2 in pence\n\n    change_in_pence = payment_in_pence - total_cost\n    change_in_pounds = change_in_pence / 100  # convert pence to pounds\n\n    return round(change_in_pounds, 2)\n\nans = solution()"
    ],
    "6c88703393b945c0b0bfae7254353841": [
        "def solution():\n    youngest_age = 7\n    oldest_child_position = 7\n    age_difference = 2\n    \n    harvir_age = youngest_age + (oldest_child_position - 1) * age_difference\n    \n    return harvir_age\n\nans = solution()"
    ],
    "a4d1fe51e51644a68d34267f1c2f5275": [
        "def solution():\n    calendar_cost = 6.97\n    ball_cost = 2.99\n\n    total_spent = calendar_cost + ball_cost\n    \n    return total_spent\n\nans = solution()"
    ],
    "e44878f3a4c142f6a0f13947c2b24159": [
        "def solution():\n    total_cost = 3e6\n    number_of_friends = 5\n\n    cost_per_friend = total_cost / number_of_friends\n\n    return cost_per_friend\n\nans = solution()"
    ],
    "cd2ade63fdb943c2be635c4890f7b39f": [
        "from math import factorial\n\ndef solution():\n    # The number of people is one less than the actual number, because when they sit in a circle, the position of the first person is fixed.\n    num_people = 4 - 1\n\n    # The number of different orders is just the number of permutations of the remaining people.\n    num_orders = factorial(num_people)\n\n    return num_orders\n\nans = solution()"
    ],
    "0bc58aa125af4c5da502baffb301c81e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_eggs = symbols('original_eggs')\n\n    equation = Eq(original_eggs + 24, 3 * original_eggs)\n\n    solution = solve(equation, original_eggs)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c578c0aa1c3c4f668b3e35402f2a9536": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the number of oranges and lemons\n    oranges, lemons = symbols('oranges lemons', integer=True)\n\n    # Create the equation based on the information given\n    equation = Eq(26 * oranges + 30 * lemons, 500)  # 500p = £5\n\n    # Solve for the pairs of (oranges, lemons) that satisfy the equation\n    solutions = [(s[oranges], s[lemons]) for s in solve(equation, (oranges, lemons), dict=True) \n                 if s[oranges] >= 0 and s[lemons] >= 0]\n\n    # Calculate the total number of oranges and lemons for each solution\n    totals = [sum(pair) for pair in solutions]\n\n    # Return the total number of oranges and lemons based on the solutions\n    return max(totals)  # Assuming we want the maximum number possible\n\nans = solution()"
    ],
    "e63df9e57c014a358e54d2a32b1e30ef": [
        "def solution():\n    def new_operation_star(a, b):\n        return 3 * a - 2 * b\n\n    def new_operation_triangle(a, b):\n        return 3 * a + 2 * b\n\n    result = new_operation_triangle(new_operation_star(new_operation_triangle(3, 4), 5), 6)\n    return result\n\nans = solution()"
    ],
    "297ef73642eb4bb7bc9c876f32b727e7": [
        "def solution():\n    count = 0\n    for i in range(1, 441):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "f96223372da84682a7c29924dbb659bb": [
        "def solution():\n    cookies = 298\n    box_capacity = 8\n    boxes_needed = -(-cookies // box_capacity)  # Ceiling division\n\n    return boxes_needed\n\nans = solution()"
    ],
    "1abc42cdc116468cb9f0339bff2e3acc": [
        "def solution():\n    total_questions = 60\n    correct_percentage = 70\n    correct_marks = 3\n    wrong_deduction = -1\n    total_score = 78\n\n    correct_answers = (correct_percentage * total_questions) // 100\n    wrong_answers = total_questions - correct_answers\n    # Equation: correct_marks * correct_answers + wrong_deduction * (answered - correct_answers) = total_score\n    # Simplified Equation: (correct_marks + wrong_deduction) * correct_answers - wrong_deduction * answered = total_score\n    # Since we know the number of correct answers and total questions answered, we can find the value of answered.\n\n    for answered in range(total_questions + 1):\n        if (correct_marks + wrong_deduction) * correct_answers - wrong_deduction * answered == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "5ee47aa9d6ab43b487b000bf91697924": [
        "def solution():\n    n = (10 - 5) / 2\n    return n\n\nans = solution()"
    ],
    "21668aad8ae540c3af86ad2cada5fa45": [
        "def solution():\n    from math import factorial as fact\n\n    total_books = 3 + 4 + 2 + 2\n\n    ways = fact(total_books) // (fact(3) * fact(4) * fact(2) * fact(2))\n\n    return ways\n\nans = solution()"
    ],
    "36563a3f9be64d47a2d4bd411b572cae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote female visitors on the first day as f and male as m.\n    f, m = symbols('f m')\n\n    # According to the first condition: m = f + 450\n    equation1 = Eq(m, f + 450)\n\n    # On the second day, female visitors increased by 15%.\n    # So, female visitors on second day is f + (15/100)*f = 1.15f\n    # Male visitors decreased by 18%.\n    # So, male visitors on second day is m - (18/100)*m = 0.82m\n\n    # The total number of visitors for the second day is 1354.\n    # 1.15f + 0.82m = 1354\n    equation2 = Eq(1.15 * f + 0.82 * m, 1354)\n\n    # Now we solve the equations for f and m.\n    solutions = solve((equation1, equation2), (f, m))\n\n    # Total visitors on the first day would be the sum of male and female visitors.\n    total_visitors_first_day = solutions[f] + solutions[m]\n\n    return total_visitors_first_day\n\nans = solution()"
    ],
    "302fe51df29b42d5b5c26676941903eb": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations('1234567890', 5):\n        if int(p[0]) < int(p[1]) < int(p[2]) and int(p[2]) > int(p[3]) and int(p[3]) > int(p[4]):\n            return int(\"\".join(p))\n    return None\n\nans = solution()"
    ],
    "74eeba4eef5b4ec989b3c5c3a572e887": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let L be the amount Leo initially had and J be the amount Jason initially had\n    L, J = symbols('L J')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(L, J + 220)  # Leo had $220 more than Jason initially\n    equation2 = Eq(J + 1100, 2 * (L + 180))  # Now Jason has 2 times as much money as Leo\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (L, J))\n\n    # Calculate the amount Jason has now, which is the initial amount plus $1100\n    J_now = solutions[J] + 1100\n\n    return J_now\n\nans = solution()"
    ],
    "6c0f20194f4d43c694fdc3e29818292c": [
        "def solution():\n    ways = 0\n    for x in range(8):\n        for y in range(8):\n            z = 7 - x - y\n            if z >= 0:\n                ways += 1\n    return ways // 6 # Divide by 6 because the pencil cases are identical\n\nans = solution()"
    ],
    "2cbac0435d3842e0a32ebcb7823538b7": [
        "def solution():\n    robots_per_day = 347\n    days_in_week = 7\n    robots_per_week = robots_per_day * days_in_week\n    return robots_per_week\n\nans = solution()"
    ],
    "f005eeb563694763b1cfdaeee89b1c28": [
        "def solution():\n    start_number = 345\n    step = 9\n    last_positive_number = start_number % step\n    return last_positive_number\n\nans = solution()"
    ],
    "0dba6392fb4849a0b274002c4f736054": [
        "def solution():\n    total_cost = 3 * 10**6  # 3 million pounds\n    num_friends = 5\n\n    cost_per_friend = total_cost / num_friends\n\n    return cost_per_friend\n\nans = solution()"
    ],
    "9322b5fd8c0f4ef49dbb6806c5d58465": [
        "def solution():\n    # Let x be the number of children who paid £10\n    # Let y be the number of children who paid £15 to have their name put on the shirt\n    # Since there are 50 children in total, we have the equation x + y = 50\n    # The total amount of money paid is £555, so we have 10x + 15y = 555\n    # We can solve this system of equations to find the value of y\n\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    \n    equation1 = Eq(x + y, 50)\n    equation2 = Eq(10*x + 15*y, 555)\n\n    solution = solve((equation1, equation2), (x, y))\n\n    return solution[y]\n\nans = solution()"
    ],
    "4b392afd5d974f1c924defced1ff9b83": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 't' be the time (in minutes) he walks at the increased speed\n    t = symbols('t')\n\n    # Distance covered in the first 10 minutes at original speed\n    distance_first_part = 150 * 10\n\n    # Distance covered in the remaining time 't' at increased speed\n    distance_second_part = (150 + 50) * t\n\n    # The total distance covered is the sum of both parts\n    equation = Eq(distance_first_part + distance_second_part, 3700)\n\n    # Solve for time 't'\n    time_at_increased_speed = solve(equation, t)[0]\n\n    # Total time spent walking is the sum of the initial 10 minutes plus time 't'\n    total_time = 10 + time_at_increased_speed\n\n    return total_time\n\nans = solution()"
    ],
    "fa72055fad084ab58ad10b1fda0c68de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # make visitors on the first day\n    male_1st = symbols('male_1st')\n\n    # female visitors on the first day\n    female_1st = male_1st - 450\n\n    # female visitors on the second day increased by 15%\n    female_2nd = female_1st * 1.15\n\n    # male visitors on the second day decreased by 18%\n    male_2nd = male_1st * 0.82\n\n    # total visitors on the second day\n    total_2nd = 1354\n\n    # equation representing total visitors on the second day\n    equation = Eq(male_2nd + female_2nd, total_2nd)\n\n    # solve for male visitors on the first day\n    sol = solve(equation, male_1st)\n    return sol[0]\n\nans = solution()"
    ],
    "a20cb097c8264920ad40461d2d3be9bd": [
        "def solution():\n    ans = 345 * 4\n    return ans\n\nans = solution()"
    ],
    "2cf10171726c4ba39f1ef12370d42497": [
        "def solution():\n    # Given that Singapore is 7 hours ahead of London,\n    # when it's 05:00 in Singapore, it's 22:00 of the previous day in London (05:00 - 7 hours).\n    departure_time_singapore_hours = 5\n\n    # The plane landed in London at 11:00 (London time).\n    arrival_time_london_hours = 11\n\n    # Compute the time difference assuming both times are on the same day,\n    # then add 24 hours because the flight started on the previous day.\n    flight_duration_hours = (arrival_time_london_hours - departure_time_singapore_hours) + 24\n\n    return flight_duration_hours\n\nans = solution()"
    ],
    "47a4f2843f6546ecafe1fb93a795ff45": [
        "def solution():\n    from math import factorial\n\n    def num_ways(cards):\n        return factorial(sum(cards)) // (factorial(cards[0]) * factorial(cards[1]) * factorial(cards[2]))\n    \n    return num_ways([4, 3, 7])\n\nans = solution()"
    ],
    "b2512ca447d44ce79e7439b887e4b561": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jon, miguel = symbols('jon miguel')\n    equation1 = Eq(jon, miguel + 0.3 * miguel)\n    equation2 = Eq(jon + miguel, 46)\n\n    solutions = solve((equation1, equation2), (jon, miguel))\n\n    return solutions[jon]\n\nans = solution()"
    ],
    "2089b724a45c4ed988606f4860fbeb30": [
        "def solution():\n    # The general term of the pattern is (1/n) - (1/(n+1)), which telescopes\n    # First and last terms of the series after telescoping\n    first_term = 1\n    last_term = 1 / 2012\n    # The sum is first_term - last_term, which gives k/(k+1) in the pattern\n    k = (first_term - last_term) * 2012\n    # Return the value of k\n    return int(k)\n\nans = solution()"
    ],
    "2cf16071a494408aa27882168fe6226a": [
        "def solution():\n    # First digit: the smallest multiple of 5 that is greater than 0 (since we cannot use 0 as the first digit in the phone number)\n    first_digit = 5\n    # Second digit: the smallest odd number among the natural numbers (1)\n    second_digit = 1\n    # Third digit: the largest odd number in a single digit (9)\n    third_digit = 9\n    # Fourth place: the smallest even number in nature (2)\n    fourth_digit = 2\n    # Fifth digit: the largest single digit that is a multiple of 2 (8)\n    fifth_digit = 8\n    # Sixth digit: the smallest odd number greater than 1 in nature (3)\n    sixth_digit = 3\n    # Seventh digit: It's unknown yet, but her home phone number is both a multiple of 2 and 5\n    # Since it's a multiple of 2 and 5, it must be a multiple of 10, so it ends in 0\n    seventh_digit = 0\n\n    phone_number = f\"{first_digit}{second_digit}{third_digit}{fourth_digit}{fifth_digit}{sixth_digit}{seventh_digit}\"\n\n    return phone_number\n\nans = solution()"
    ],
    "0dc187974a4f4bdc885566505c9ca033": [
        "def solution():\n    divisor = 4\n    quotient = 9\n    remainder = 2\n\n    correct_product = quotient * divisor\n    correct_answer = correct_product + remainder\n\n    # According to the provided solution:\n    johnny_product = quotient * remainder\n    johnny_sum = johnny_product + divisor\n\n    # Check if Johnny's answer is correct\n    is_correct = (johnny_sum == correct_answer)\n    ans = correct_answer if not is_correct else johnny_sum  # If incorrect, provide the correct answer\n\n    return ans\n\nans = solution()"
    ],
    "bb60d9d026a3416baa2d8cced7ed7efa": [
        "def solution():\n    # The sequence represents an arithmetic progression with a common difference of 5\n    # Let's denote with n the number of days Danny read the book\n\n    # Initializations\n    first_day_pages = 20\n    common_diff = 5\n    last_day_pages = 80\n\n    # The n-th term of the sequence can be found by the formula: a_n = a_1 + (n - 1) * d\n    # where a_n is the pages read on the last day, a_1 is pages read on the first day, and d is the common difference\n    # Since we know a_n (80 pages on the last day), a_1 (20 pages on the first day), and d (5 pages), we can solve for n\n\n    # The equation for the n-th term a_n = a_1 + (n - 1) * d is rearranged to solve for n\n    # 80 = 20 + (n - 1) * 5\n    # 60 = (n - 1) * 5\n    # 12 = n - 1\n    # n = 13\n    \n    n = (last_day_pages - first_day_pages) / common_diff + 1\n\n    # Now, we use the sum formula for an arithmetic series to find the total number of pages.\n    # The sum of n terms in an arithmetic sequence is given by: S_n = n/2 * (a_1 + a_n)\n    # S_n = 13/2 * (20 + 80)\n\n    total_pages = n/2 * (first_day_pages + last_day_pages)\n\n    return int(total_pages)\n\nans = solution()"
    ],
    "33806102632247718f0ca6cc3c4ae3cd": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n    \n    congruences = [(3, 6), (4, 7), (1, 8)]\n    ans = solve_congruence(*congruences)[0]\n    \n    return ans\n\nans = solution()"
    ],
    "97ff1c826b9449ebba306715644e00d7": [
        "def solution():\n    from itertools import permutations\n\n    for p in permutations(range(10), 5):\n        s, a, m, o, g = p\n        if s == 0 or g == 0:\n            continue\n        sasmo = s*10000 + a*1000 + s*100 + m*10 + o\n        ogams = o*10000 + g*1000 + a*100 + m*10 + s\n        if sasmo * 4 == ogams:\n            return sasmo\n\nans = solution()"
    ],
    "05e8386eec1a4686bcceefeeec0da532": [
        "def solution():\n    # Grouping positives and negatives\n    # Positives: 54 + 52 + ... + 4\n    # Negatives: -50 - 46 - ... - 2\n    # The sequence of positives is an arithmetic sequence starting from 54 to 4 with a common difference of -2\n    # The sequence of negatives is an arithmetic sequence starting from -50 to -2 with the same common difference -2\n    \n    # The number of terms in each sequence is the same and can be calculated by\n    # the formula for the number of terms in an arithmetic sequence: n = (last_term - first_term)/difference + 1\n    \n    positive_first_term = 54\n    negative_first_term = -50\n    last_term = 4\n    difference = -2\n    \n    num_terms = int((last_term - positive_first_term)/difference + 1)\n    \n    # Calculate the sum of the positive terms and sum of negative terms using arithmetic sequence sum formula:\n    # sum = n/2 * (first_term + last_term)\n    \n    sum_positives = num_terms/2 * (positive_first_term + last_term)\n    sum_negatives = num_terms/2 * (negative_first_term + -2)\n    \n    # Calculate the final result by adding the sum of positives with the sum of negatives\n    ans = sum_positives + sum_negatives\n    \n    return ans\n\nans = solution()"
    ],
    "9764b7f8732540ffab94bb9e73235bfc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cut_length = symbols('cut_length')\n\n    # After cutting, rope A will be 65 - cut_length, and rope B will be 29 - cut_length\n    # We know that the new length of rope A is 3 times the new length of rope B\n    equation = Eq(3 * (29 - cut_length), 65 - cut_length)\n\n    # Solve the equation to find the length cut from each rope\n    cut_length_solved = solve(equation, cut_length)\n    \n    return cut_length_solved[0]\n\nans = solution()"
    ],
    "5f83a7f525c2424e93dbfaca3c6f9265": [
        "def solution():\n    total_paid = 555\n    price_with_name = 15\n    price_without_name = 10\n    total_children = 50\n    \n    # Let's denote the children that paid to have their name put onto the shirts as 'x'.\n    # Then, the children that didn't want their name on the shirts would be 'total_children - x'.\n    \n    for x in range(total_children + 1):\n        # x children with their name on the shirt and (total_children - x) without.\n        if (x * price_with_name) + ((total_children - x) * price_without_name) == total_paid:\n            return x\n\nans = solution()"
    ],
    "58b52e2f938546e89e5a64e5f2bf4334": [
        "def solution():\n    total_rolls = 30\n    probability_of_5 = 1/6\n\n    expected_times = total_rolls * probability_of_5\n\n    return expected_times\n\nans = solution()"
    ],
    "d8f72795c5214d67bdae537f6f2294cc": [
        "def solution():\n    # The sequence is generated by repeating each integer 'i' for 'i' times.\n    # We need to find when the first '11' appears to understand the sequence length.\n    # The total length of the sequence would be 1 + 2 + 3 + ... + 10.\n    # This is the sum of the first 10 natural numbers, which is a known formula: n(n+1)/2.\n    n = 10\n    sequence_length = n * (n + 1) // 2  # This is where the first 11 would appear in the sequence.\n\n    # Now to find the median, for n even we have two middle terms at n/2 and n/2+1, for n odd the middle term is at (n+1)/2.\n    # When n is squared it is always odd (sum of first n natural numbers where n is an even number).\n    # Thus the median would be at:\n    median_position = (sequence_length + 1) // 2\n\n    # Now we need to find the value at median_position.\n    # We increment a counter and subtract i each time until we reach median_position.\n    count, i = 0, 1\n    while count < median_position:\n        count += i\n        i += 1\n        \n    median_value = i - 1  # i is incremented one too many times in the loop, so subtract 1 to get the correct median_value.\n\n    return median_value\n\nans = solution()"
    ],
    "645b71623d4d4b11a64007d32b21db61": [
        "def solution():\n    ans = 345 * 4\n    return ans\n\nans = solution()"
    ],
    "627fc9344fb748cca98e15cf87d2083a": [
        "def solution():\n    ans = 15 / 0.05\n    return ans\n\nans = solution()"
    ],
    "4f46c32b143a401aafbf4d6ead565a65": [
        "def solution():\n    return (12 / 18) * 6\n\nans = solution()"
    ],
    "8cc478711c8f4086b30df7455059147a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(A/B, 2/3)\n    equation2 = Eq(B/C, 6/5)\n    equation3 = Eq((A + B + C)/3, 45)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "8cf1dcd99c234fe3bed14598d82e6dbf": [
        "def solution():\n    # Number of dresses bought by Minnie\n    num_dresses = 6\n    # Cost of each dress\n    cost_dress = 7  # we'll multiply this by x later\n    \n    # Number of skirts bought by Minnie\n    num_skirts = 3\n    # Cost of each skirt\n    cost_skirt = 35\n    \n    # Total amount spent by Minnie\n    total_spent = 441\n    \n    # Total cost for dresses is 6 * 7x, for skirts is 3 * 35\n    # Setting up the equation: 6*7x + 3*35 = 441\n    # Solving for x (the cost of each dress)\n    x = (total_spent - (num_skirts * cost_skirt)) / (num_dresses * cost_dress)\n    \n    return x\n\nans = solution()"
    ],
    "60f6f205ec4c40bb89204475765d9532": [
        "def solution():\n    return 5 * 7 * 8\n\nans = solution()"
    ],
    "aa5f85b2df7440f382a1edca655a0195": [
        "def solution():\n    k = 2011\n    return k\n\nans = solution()"
    ],
    "a9763e974eea446e92026fb8477bfbd4": [
        "def solution():\n    # There are 5 odd digits: 1, 3, 5, 7, 9\n    odd_digits = 5\n    \n    # The first digit can't be 0 and has to be odd, so 5 options\n    first_digit_options = odd_digits\n    \n    # The second digit can be any odd digit, so 5 options\n    second_digit_options = odd_digits\n    \n    # The third digit can be any odd digit, so 5 options\n    third_digit_options = odd_digits\n    \n    # Use the multiplication principle, since each digit is independent\n    total_numbers = first_digit_options * second_digit_options * third_digit_options\n    \n    return total_numbers\n\nans = solution()"
    ],
    "bc1425cad1954c489bb66ff166a40ad5": [
        "def solution():\n    remainder_sum = 0\n    for i in range(1, 1000, 2):\n        remainder_sum += (i ** 2) % 3\n    ans = remainder_sum % 3\n    return ans\n\nans = solution()"
    ],
    "d1aea7f5923c41419c0a7f013a821868": [
        "def solution():\n    increased_length = 12\n    final_perimeter = 38\n\n    original_perimeter = final_perimeter - 2 * increased_length\n    return original_perimeter\n\nans = solution()"
    ],
    "7d339ab0e49d487d82f990bb57b18e62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let l represent the number of days it takes the lazy decorator to paint the house on his own\n    l = symbols('l')\n    \n    # The energetic decorator can paint the house in 12 days\n    energetic_rate = 1/12\n    \n    # The rate of work done together by the two decorators in 8 days\n    together_rate = 1/8\n    \n    # Equation based on the work done by the lazy decorator (work = rate * time)\n    # 1/l represents the rate of the lazy decorator\n    # Sum of individual rates equals the rate they work together\n    equation = Eq(energetic_rate + 1/l, together_rate)\n\n    # Solve for l\n    solution = solve(equation, l)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b3933f96a6f64df2937f9504f73d4f93": [
        "def solution():\n    nell_part = 4\n    joe_part = 5\n    total_parts = nell_part + joe_part\n    nell_sweets = 24\n    total_sweets = (nell_sweets / nell_part) * total_parts\n    return total_sweets\n\nans = solution()"
    ],
    "46886e982cd848a7abf837e5973c5ae7": [
        "def solution():\n    basketball_court_length = 25\n    football_field_additional_length = 56\n    football_field_length = basketball_court_length + football_field_additional_length\n    return football_field_length\n\nans = solution()"
    ],
    "5c4786655fca473fb242916467fa9779": [
        "def solution():\n    first_term = 2\n    common_difference = 4\n    n = 11  # the position of the student\n    \n    # Formula to find the nth term of an arithmetic sequence\n    # nth_term = first_term + (n - 1) * common_difference\n    nth_term = first_term + (n - 1) * common_difference\n    \n    return nth_term\n\nans = solution()"
    ],
    "1af1519ce39648a5a5a614d850ea16ee": [
        "def solution():\n    return 345 * 4\n\nans = solution()"
    ],
    "7fafcabd4a364cf7a536efe02bf4be6e": [
        "def solution():\n    for a in range(1, 10):  # a cannot be 0 since it's the leftmost digit\n        for b in range(0, 10):\n            if 11 * (10 * a + b) + b == 1000 * a + 100 * a + b:\n                return a + b\n\nans = solution()"
    ],
    "563e040a6b604c99be6f021744a72867": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sana, mina = symbols('sana mina')\n    equation1 = Eq(sana, 8 * mina)\n    equation2 = Eq(sana + mina, 234)\n\n    solutions = solve((equation1, equation2), (sana, mina))\n    mina_left = solutions[mina] - 12\n\n    return mina_left\n\nans = solution()"
    ],
    "61a8f774aec24308b2fbbb6d4c4052db": [
        "def solution():\n    total_grapes = 210\n    sold_monday = total_grapes * (3/7)\n    remaining_after_monday = total_grapes - sold_monday\n    sold_tuesday = remaining_after_monday * (3/8)\n    remaining_after_tuesday = remaining_after_monday - sold_tuesday\n    small_bag_weight = 3/4\n\n    num_small_bags = remaining_after_tuesday / small_bag_weight\n\n    return int(num_small_bags)\n\nans = solution()"
    ],
    "2f8eea7d70d643d9a9a6d7959dcc5596": [
        "def solution():\n    first_term = 81\n    common_difference = 75 - 81\n    n = 11\n\n    nth_term = first_term + (n - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "e01a60afedfc47728af6bf6cd42afab2": [
        "def solution():\n    pence = 15\n    pounds_to_pence = 3.00 * 100\n\n    percentage = (pence / pounds_to_pence) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "a2b6115aec834dc68138160027844aaa": [
        "def solution():\n    from sympy import factorint\n\n    factors = factorint(28)\n\n    # To make a perfect square, each prime factor's power has to be even.\n    # Multiply the number by those primes which don't have even powers to make them even.\n    mult = 1\n    for prime, power in factors.items():\n        if power % 2 != 0:\n            mult *= prime\n\n    return mult\n\nans = solution()"
    ],
    "6c63ea0de1a8415980442a6c8569fc9d": [
        "def solution():\n    # Let the cost of each dress be 7x\n    # Total cost of dresses = 6 * 7x\n    # Total cost of skirts = 3 * 35\n    # Total expense = cost of dresses + cost of skirts = 441\n    # Equation: 6*7x + 3*35 = 441\n    \n    # Import sympy to solve the algebraic equation\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol x\n    x = symbols('x')\n\n    # Create the equation\n    equation = Eq(6 * 7 * x + 3 * 35, 441)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # Since x is the cost of each dress divided by 7, we return 7*x\n    return 7 * solution[0]\n\nans = solution()"
    ],
    "53cbd8fd0f77499fb24e88ab3dcaacba": [
        "def solution():\n    # Number of lamp posts Uncle Sam cycles past from the first to the eleventh\n    lamp_posts_passed = 11 - 1  # because we don't count the first lamp post he starts from\n\n    # Time it takes to cycle from the first to the eleventh lamp post\n    time_taken = 50\n\n    # Calculate the time taken to pass one lamp post\n    time_per_lamp_post = time_taken / lamp_posts_passed\n\n    # Calculate the number of lamp posts he can cycle past in 80 seconds\n    lamp_posts_in_80_seconds = 80 / time_per_lamp_post\n\n    # Add the first lamp post to the number cycled past\n    total_lamp_posts = 1 + int(lamp_posts_in_80_seconds)\n\n    return total_lamp_posts\n\nans = solution()"
    ],
    "8626a5ac5cd849a99b266ae11eb763c0": [
        "def solution():\n    # Calculate the number of flowers on each side excluding the corners\n    flowers_on_each_side_excluding_corners = 6 - 2  # because corner flowers are counted twice (once for each side they touch)\n    \n    # Calculate the total number of flowers for all sides excluding corners\n    flowers_excluding_corners = flowers_on_each_side_excluding_corners * 4\n    \n    # Add the corner flowers\n    total_flowers = flowers_excluding_corners + 4  # There are 4 corners\n    \n    return total_flowers\n\nans = solution()"
    ],
    "7cec8a1b08d943669b99d263f87e4fa6": [
        "def solution():\n    original_price = 80 + 20\n    discount = 20\n    discount_percent = (discount / original_price) * 100\n    return discount_percent\n\nans = solution()"
    ],
    "2b8a88ca5fe7429ea82c73c3b8990e1b": [
        "def solution():\n    # Calculate the ones place digit as the sum of all factors of 4\n    factors_of_4 = [1, 2, 4]\n    ones_place = sum(factors_of_4)\n\n    # Given: the digit in the hundreds place has a value of 800\n    # so the digit is 8 (as we are interested in the digit, not the value)\n    hundreds_place = 8\n\n    # The digit in the thousands place is 1 more than the digit in the hundreds place\n    thousands_place = hundreds_place + 1\n\n    # The digit in the tens place is the difference between the digit in the hundreds and ones places\n    tens_place = hundreds_place - ones_place\n\n    # The first digit is already specified to be between 4 and 5\n    first_digit = 4\n\n    # Combine the digits to form the 5-digit number\n    final_number = int(f\"{first_digit}{thousands_place}{hundreds_place}{tens_place}{ones_place}\")\n\n    return final_number\n\nans = solution()"
    ],
    "44e8dcc102494f3192e7ebf223ca7d90": [
        "def solution():\n    return 6 - 18\n\nans = solution()"
    ],
    "89b9c39288374835a4dd1f8d8af530fd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the total number of items\n    total_items = symbols('total_items')\n    \n    # Equation representing the relationship between apples, lemons, and total items\n    equation = Eq((2/3 - 1/9) * total_items - 12, (1 - 2/3 - 1/9) * total_items)\n\n    # Solve the equation\n    total_items_solution = solve(equation, total_items)[0]\n\n    # Calculate the number of lemons\n    lemons = (1 - 2/3 - 1/9) * total_items_solution\n\n    return int(lemons)\n\nans = solution()"
    ],
    "9eb437e49efd42d88c006e74f9099f07": [
        "def solution():\n    basketball_court_length = 25\n    extra_length = 56\n    football_field_length = basketball_court_length + extra_length\n    return football_field_length\n\nans = solution()"
    ],
    "3fe7176a573649c389081f702880fe81": [
        "def solution():\n    # Initialize the smallest value of s to None\n    smallest_s = None\n    \n    # Start with a practical range for s based on fractions comparison\n    for s in range(1, 1000):  \n        for r in range(1, s):\n            if 3/10 < r/s < 5/16:\n                smallest_s = s\n                break  # Stop if the condition is met\n        if smallest_s is not None:\n            break  # Stop the outer loop once smallest_s is found\n\n    return smallest_s\n\nans = solution()"
    ],
    "f21830983a5f48e28095fe2ece3c5a85": [
        "def solution():\n    first_day = 300\n    second_day = 250\n    total_two_days = first_day + second_day\n    total_steering_wheels = total_two_days / (5/6)\n    \n    return int(total_steering_wheels)\n\nans = solution()"
    ],
    "aa03a281d4d94018a0064e56c41ee496": [
        "def solution():\n    first_term = 81\n    common_difference = 75 - 81\n    n = 11\n\n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "7c04260dcb0743288f345e79968829c7": [
        "def solution():\n    # Rina's purchase with discount\n    rina_purchase = 60\n    rina_discount_percent = 20\n    \n    # Original price before Rina's discount (the base price)\n    original_price = rina_purchase / (1 - rina_discount_percent / 100)\n    \n    # Ana's purchase with discount\n    ana_purchase = 67.50\n    \n    # Discount given to Ana in dollars\n    ana_discount = original_price - ana_purchase\n    \n    # Discount given to Ana in percent\n    ana_discount_percent = (ana_discount / original_price) * 100\n    \n    return ana_discount_percent\n\nans = solution()"
    ],
    "278081b797fb4ba488225b7671c17347": [
        "def solution():\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = 12*x - (7*x + 9) - 1\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "439fae9a23bb4288adfdb67093fcdb41": [
        "def solution():\n    # Calculate the remaining capacity for children when there are already 15 children on the bus.\n    remaining_capacity_for_children = 40 - 15\n    \n    # Calculate the equivalent remaining capacity for adults by using equivalent substitution.\n    remaining_capacity_for_adults = remaining_capacity_for_children * (24 / 40)\n    \n    # The greatest number of adults that can be on the bus is the floor of the remaining capacity for adults.\n    greatest_number_of_adults = int(remaining_capacity_for_adults)\n    \n    return greatest_number_of_adults\n\nans = solution()"
    ],
    "485363fa5d114e10aa5193dda256cebb": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 28 to get its prime factors\n    prime_factors = factorint(28)\n\n    # For a number to be a perfect square, all prime factors must be to an even power\n    # Therefore, we need to make the power of each prime factor of 28 even to get a perfect square\n    # We do this by adding the necessary prime factors\n\n    # Initialize the number to be multiplied by 28\n    multiplier = 1\n    for prime, exponent in prime_factors.items():\n        if exponent % 2 == 1:  # if the exponent is odd, we multiply by the prime itself\n            multiplier *= prime\n\n    return multiplier\n\nans = solution()"
    ],
    "15ed9cc3ded941faafa1ff286a405f77": [
        "def solution():\n    time_for_2_pancakes = 3\n    total_time = 12\n    number_of_pancakes = (total_time / time_for_2_pancakes) * 2\n    return int(number_of_pancakes)\n\nans = solution()"
    ],
    "9b046c316f30464f8998d4a3f5a6db6b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 - x, 5*x - 8)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "64da3536e459433ea4a1e1ffe0974428": [
        "def solution():\n    total_students = 35\n    total_sizes = 3 # L, M, S\n\n    min_students_same_size = (total_students // total_sizes) + 1\n    \n    return min_students_same_size\n\nans = solution()"
    ],
    "f7fa4272e23e482598b3fd2264f07a29": [
        "def solution():\n    types_of_pasta = 2\n    types_of_sauces = 3\n    types_of_toppings = 2\n    \n    combinations = types_of_pasta * types_of_sauces * types_of_toppings\n    \n    return combinations\n\nans = solution()"
    ],
    "d0e55b24b2d94a99a067394ed0971714": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for the monthly salary\n    salary = symbols('salary')\n    \n    # The amount spent on DVD player is known\n    spent_dvd = 740\n    \n    # Define the equations based on the problem statement\n    remaining_after_dvd = salary - spent_dvd\n    spent_tv = 3/4 * remaining_after_dvd\n    remaining_salary = 1/5 * salary\n    \n    # Total remaining after both purchases\n    remaining_total = remaining_after_dvd - spent_tv\n    \n    # Set up the equation for the amount left being 1/5 of the salary\n    equation = Eq(remaining_total, remaining_salary)\n    \n    # Solve the equation\n    solutions = solve(equation, salary)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "78cc1f0029db4e2baf026af900879af7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the symbol for Russell's current age\n    russell_current_age = symbols('russell_current_age')\n\n    # In 32 years, Russell will be 4 times as old as 16 years ago\n    equation = Eq(russell_current_age + 32, 4 * (russell_current_age - 16))\n    \n    # Solving the equation to find Russell's current age\n    solution = solve(equation, russell_current_age)\n\n    return solution[0]\n\nans = solution()"
    ],
    "bdd4de642a694795bd55c992b23b3398": [
        "def solution():\n    percentage = 40\n    total_amount = 120\n\n    ans = (percentage / 100) * total_amount\n\n    return ans\n\nans = solution()"
    ],
    "18b8daa61603447d8022fd9b8bc02b69": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Declare symbols for the number of marbles each person originally had\n    A, B, C = symbols('A B C')\n\n    # Create the equations based on the given information\n    total_marbles = Eq(A + B + C, 168)            # Total number of marbles\n    after_charlene_gives = Eq(C - 15, B + 15)     # Charlene gave 15 marbles to Betsy\n    after_betsy_gives = Eq(B + 15 - 8, A + 8)     # Betsy gave 8 marbles to Anna\n    final_ratio = Eq(A + 8, (2/14) * (168))       # The final ratio of A:B:C is 2:5:7\n\n    # Solve the system of equations\n    solutions = solve((total_marbles, after_charlene_gives, after_betsy_gives, final_ratio), (A, B, C))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "f7751c2233f24b7d9dbfbe6d168ddef9": [
        "def solution():\n    # Iterate over possible values for A and B (0-9)\n    for A in range(10):\n        for B in range(10):\n            # Construct Pip's number using A and B\n            Pips_number = 1000 * A + 100 * B + 10 * B + A\n            # Construct Bud's number by reversing the tens and units digits of Pip's number\n            Buds_number = 1000 * A + 100 * B + 10 * A + B\n            # Check if the sum of Pip's and Bud's numbers equal 5510\n            if Pips_number + Buds_number == 5510:\n                return Pips_number\n\nans = solution()"
    ],
    "fd624218613f48f49c62fe0c615eab9a": [
        "def solution():\n    from sympy import Eq, symbols, solve\n\n    a, b = symbols('a b')  # a is the original number of students in class 6A, b is in class 6B\n\n    # Initial condition: a = 4/9 * b\n    equation1 = Eq(a, 4/9 * b)\n\n    # After reshuffling:\n    # Class 6A gains 18 students from Class 6B and loses 3 - net gain = 15 students.\n    # Class 6B gains 3 students from Class 6A and loses 18 - net loss = 15 students.\n    # a + 15 = b - 15\n    equation2 = Eq(a + 15, b - 15)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[a]\n\nans = solution()"
    ],
    "311137556c874d4bb13b99f9b5117222": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12*x - (7*x + 9), 1)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "295414faedcc466dba1a6853455af3c4": [
        "def solution():\n    num_floors_initial = 4 - 1  # from 1st to 4th floor\n    time_initial = 6  # in minutes\n\n    num_floors_final = 10 - 1  # from 1st to 10th floor\n    time_per_floor = time_initial / num_floors_initial\n    total_time_final = time_per_floor * num_floors_final\n\n    return total_time_final\n\nans = solution()"
    ],
    "ec4f8ef8e4e24394bc6bbee281e961db": [
        "def solution():\n    original_biscuits_g = 100.0\n    original_chocolate_g = 40.0\n    available_biscuits_g = 75.0\n    \n    chocolate_needed_g = (available_biscuits_g * original_chocolate_g) / original_biscuits_g\n    \n    return chocolate_needed_g\n\nans = solution()"
    ],
    "965c2ac5dad34d4fa1d38ad774207e9a": [
        "def solution():\n    return 854 * 100\n\nans = solution()"
    ],
    "0574b4ea3bce459692a79ced3c88cee6": [
        "def solution():\n    total_shelves = 15\n    total_spelling_books = 72\n    spelling_books_per_shelf = 9\n\n    # Since all 15 shelves are full, the remaining number of shelves must contain math books.\n    # Let m be the total number of math books.\n    # s be the number of shelves with spelling books.\n\n    # Each shelf with spelling books contains 9 spelling books.\n    # So, s shelves contain s * 9 spelling books.\n    # We know there are 72 spelling books in total, so s * 9 = 72.\n    # We can solve for s: s = 72 / 9\n\n    shelves_with_spelling_books = total_spelling_books / spelling_books_per_shelf\n    shelves_with_math_books = total_shelves - shelves_with_spelling_books\n    \n    # Each of the remaining shelves contains 4 math books.\n    # So, the total number of math books is shelves_with_math_books * 4.\n    math_books_per_shelf = 4\n    total_math_books = shelves_with_math_books * math_books_per_shelf\n\n    return int(total_math_books)\n\nans = solution()"
    ],
    "ca4820ab45754f35b7d59a04967d1276": [
        "def solution():\n    average_daily_earnings = 90\n    number_of_days = 7  # Monday to Sunday\n\n    total_weekly_earnings = average_daily_earnings * number_of_days\n\n    return total_weekly_earnings\n\nans = solution()"
    ],
    "f5f0fa861ee84ff5baf0932a2cdd79df": [
        "def solution():\n    luna_flowers = 15\n    difference = 3\n\n    harry_flowers = luna_flowers - difference\n    \n    return harry_flowers\n\nans = solution()"
    ],
    "065ea362f1f84acd909b64af10328dd1": [
        "def solution():\n    pasta_choices = 2\n    sauce_choices = 3\n    topping_choices = 2\n    \n    total_combinations = pasta_choices * sauce_choices * topping_choices\n    \n    return total_combinations\n\nans = solution()"
    ],
    "1bee8ef3713140f195baa78f51579340": [
        "def solution():\n    for n in range(1, 33):\n        if 32 // n == n // 2:\n            return n\n\nans = solution()"
    ],
    "ed4d903eb27d49279a669eb29f697081": [
        "def solution():\n    # In the first game, the 16th student is directly opposite the 8th student,\n    # This implies there must be a total of 16 * 2 students in the circle.\n    initial_students = 16 * 2\n\n    # In the second game, the 22nd student is directly opposite the 8th student,\n    # This implies there must be a total of 22 * 2 students in the circle.\n    new_total_students = 22 * 2\n\n    # The new students are the difference between the new total and the initial number of students.\n    new_students = new_total_students - initial_students\n\n    return new_students\n\nans = solution()"
    ],
    "b096b994b81c439089e43a5964dae9ae": [
        "def solution():\n    # Given speeds in meters per second\n    speed1 = 7\n    speed2 = 5\n    speed3 = 8\n\n    # Given distances in meters\n    distance1 = 280\n    distance2 = 400\n    # The total distance is 800, so the distance for the sprint stage is:\n    distance3 = 800 - (distance1 + distance2)\n\n    # Time is distance divided by speed\n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    time3 = distance3 / speed3\n\n    # The total time is the sum of times\n    total_time = time1 + time2 + time3\n\n    return total_time\n\nans = solution()"
    ],
    "1ec6272d9b5f4fb681677cca4ba5a3ef": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of marbles each person initially had\n    anna_init, betsy_init, charlene_init = symbols('anna_init betsy_init charlene_init')\n    \n    # After transactions, let's define the final amounts of marbles for Anna, Betsy, and Charlene\n    anna_final = anna_init + 8\n    betsy_final = betsy_init + 15 - 8\n    charlene_final = charlene_init - 15\n\n    # Three equations based on the given information\n    equation1 = Eq(anna_init + betsy_init + charlene_init, 168) # Total marbles\n    equation2 = Eq(anna_final / betsy_final, 2 / 5)            # Ratio of Anna's to Betsy's marbles\n    equation3 = Eq(betsy_final / charlene_final, 5 / 7)       # Ratio of Betsy's to Charlene's marbles\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (anna_init, betsy_init, charlene_init))\n\n    # Return the initial amount of marbles Betsy had\n    return solutions[betsy_init]\n\nans = solution()"
    ],
    "ea4fdc5ca1cf4568b300810db0eaa9e2": [
        "def solution():\n    result = 180 - (9*6) - (7*6)\n    return result\n\nans = solution()"
    ],
    "4ceaa57063624f489d2a91560349d225": [
        "from math import factorial\n\ndef solution():\n    total_cards = 4 + 3 + 7\n    yellow_cards = 4\n    red_cards = 3\n    green_cards = 7\n    # Calculate different ways using permutations with repetitions\n    ways = factorial(total_cards) // (factorial(yellow_cards) * factorial(red_cards) * factorial(green_cards))\n    return ways\n\nans = solution()"
    ],
    "a49805b294c44372af6c664415044e6a": [
        "def solution():\n    result = (49 * 57) + 7\n    return result\n\nans = solution()"
    ],
    "111ec186a6084484b7572731bc3bcb77": [
        "def solution():\n    luna_flowers = 15\n    harry_flowers = luna_flowers - 3\n    return harry_flowers\n\nans = solution()"
    ],
    "6dff7252335c45c0a2fdec728a95565a": [
        "def solution():\n    from math import gcd\n\n    # Dimensions of the white paper in centimeters, since gcd works on integers\n    length_cm = 136\n    width_cm = 80\n\n    # Calculating the greatest common divisor (GCD) of the two dimensions\n    square_side = gcd(length_cm, width_cm)\n\n    # Calculating the number of squares by dividing the area of the rectangle by\n    # the area of the square obtained using GCD\n    num_squares = (length_cm // square_side) * (width_cm // square_side)\n\n    return num_squares\n\nans = solution()"
    ],
    "006665a313c24b1a92752af5e31bc16a": [
        "def solution():\n    count = 0\n    for hundreds in [4, 5, 7]:\n        for tens in [4, 5, 7]:\n            for ones in [4, 5, 7]:\n                if (hundreds * 100 + tens * 10 + ones) % 2 != 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "b8665b34ac3a4d59aa8061f1eb6eec07": [
        "def solution():\n    ans = 854 * 100\n    return ans\n\nans = solution()"
    ],
    "22718af89a8243c19613574db590d256": [
        "def solution():\n    total_numbers = 200\n    divisible_by_5 = total_numbers // 5\n    divisible_by_7 = total_numbers // 7\n    divisible_by_5_and_7 = total_numbers // (5 * 7)\n    \n    ans = divisible_by_5 + divisible_by_7 - divisible_by_5_and_7\n    return ans\n\nans = solution()"
    ],
    "88c5dedae77f46f589b56a149633c09c": [
        "def solution():\n    speed1 = 7\n    speed2 = 5\n    speed3 = 8\n    \n    distance1 = 280\n    distance2 = 400\n    distance3 = 800 - (distance1 + distance2)\n    \n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    time3 = distance3 / speed3\n    \n    total_time = time1 + time2 + time3\n    \n    return total_time\n\nans = solution()"
    ],
    "4ea645a34f3a435db4d0fc57a7f2a099": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 101))\n    return ans\n\nans = solution()"
    ],
    "092c73eab03d47ef9afdbfaf1c46b4ee": [
        "def solution():\n    for i in range(1, 10000):\n        if (i - 135) % 10 == 0 and int((i - 135) / 10) == i - 135:\n            return i\n\nans = solution()"
    ],
    "f5082b520e464b9a9b6f7696942bc7de": [
        "def solution():\n    result = (10 + 1/20 + (3 - 0.85) / (5/6)) / 505.2\n    return result\n\nans = solution()"
    ],
    "5cd17b7047fd44e184eb28205a77c263": [
        "def solution():\n    # Let n be the number of teams\n    # The total number of matches that can be played in the league is given by the formula:\n    # Total matches = n(n - 1) / 2 (since each team plays every other team once)\n    # But each match is played twice (home and away), so we multiply the total by 2\n    # 2 * total matches = n(n - 1)\n    # We know that 2 * total matches = 60 (since there are 30 matches in total)\n    from sympy import symbols, Eq, solve\n    n = symbols('n', integer=True)\n\n    # Equation representing the total number of matches played\n    match_equation = Eq(n * (n - 1), 60)\n\n    # Solve the equation for the number of teams\n    possible_solutions = solve(match_equation, n)\n\n    # Filter out the negative solution as the number of teams cannot be negative\n    num_teams = [sol for sol in possible_solutions if sol > 0]\n\n    return num_teams[0]\n\nans = solution()"
    ],
    "859adbbe512546a0b75ae0bf0e8f181d": [
        "def solution():\n    students = 37\n    capacity = 5\n    # One trip can carry 5 students to the other side, but we need to send the boat back.\n    # So, every round trip except the last one effectively transports 4 students.\n    round_trip_transport = capacity - 1\n\n    # Calculate the full round trips needed\n    full_round_trips = (students - capacity) // round_trip_transport\n\n    # Calculate remaining students that need to be transported after full round trips\n    remaining_students = (students - capacity) % round_trip_transport\n\n    # The least number of trips: full round trips back and forth, plus one trip for the remaining students,\n    # plus one more to send the boat back in the last trip, if needed (if remaining_students > 0).\n    # Since each round trip counts as two trips (there and back), we multiply full_round_trips by 2\n    trips = full_round_trips * 2 + 1  # The last trip to carry the last students\n    if remaining_students > 0:\n        # Need to add one more trip to carry the remaining students,\n        # plus another trip to send the boat back (unless it's the final trip)\n        trips += 2 if full_round_trips > 0 else 1\n\n    return trips\n\nans = solution()"
    ],
    "77ba726662b34445bc8b3b0c966cb3ac": [
        "def solution():\n    return (49 * 57) + 7\n\nans = solution()"
    ],
    "5b9cd44e2a8d46b2b9f5c8533ec96089": [
        "def solution():\n    # Percentage of students who chose both Grade A and B Math\n    both_percentage = 80 + 35 - 90  # Percentage choosing A + percentage choosing B - percentage choosing neither\n    \n    # Convert percentage to a decimal for calculations\n    both_decimal = both_percentage / 100\n    \n    # Total number of students, where 75 equals the both_decimal (0.25) of total students\n    total_students = 75 / both_decimal\n    \n    return int(total_students)\n\nans = solution()"
    ],
    "77c2ba769a7047048ada0b99188fd52a": [
        "def solution():\n    ones = 7\n    tens = 2\n    hundreds = 3\n    number = hundreds * 100 + tens * 10 + ones\n    return number\n\nans = solution()"
    ],
    "3afaef15c6e14038b0ae9b8cc73f4661": [
        "def solution():\n    ans = -7 + -3\n    return ans\n\nans = solution()"
    ],
    "5a33774640ef42fbb9d5c0f6fadf05ae": [
        "def solution():\n    students = 37\n    boat_capacity = 5\n    # One trip to cross the river and one trip to return, \n    # except the last trip which doesn't require a return.\n    # We need to subtract one person for handling the boat except for the last trip.\n    trips = (students // (boat_capacity - 1)) * 2 - 1\n    # Check if there are any students left for the last trip without a return\n    if students % (boat_capacity - 1) > 0:\n        trips += 1\n    return trips\n\nans = solution()"
    ],
    "b17c4c6265e04390be67da9c493fc323": [
        "def solution():\n    bowls_per_jug = 3\n    jugs_per_pail = 2\n    bowls_per_pail = bowls_per_jug * jugs_per_pail\n    return bowls_per_pail\n\nans = solution()"
    ],
    "8a24c57fe2014f94b5b8a95629a79a2d": [
        "from itertools import permutations\n\ndef solution():\n    all_numbers = [''.join(p) for p in permutations('1469', 4)]\n    sum_of_numbers = sum(int(num) for num in all_numbers)\n    average = sum_of_numbers / len(all_numbers)\n    return average\n\nans = solution()"
    ],
    "1820577397204c509b1907b2ea4c2a5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Initially, the number of boys and girls is the same.\n    equation1 = Eq(boys, girls)\n\n    # After 60 boys and 12 girls left, twice as many girls as boys remained.\n    equation2 = Eq(girls - 12, 2 * (boys - 60))\n\n    # Solving the two equations to find the original number of boys (and girls).\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "4a286a0dcf7a4ca5a4d61c7e63b2cb90": [
        "def solution():\n    for digit_tens in range(0, 10):\n        digit_ones = 15 - digit_tens\n        if digit_ones != digit_tens and digit_ones < 10 and digit_tens < 10:\n            if digit_ones % 2 == 0:\n                return 900 + digit_tens * 10 + digit_ones\n\nans = solution()"
    ],
    "998af0079c4247a1989e0807c81a7b0b": [
        "from itertools import combinations\nfrom sympy import divisors\n\ndef solution():\n    # Find all combinations of 9 numbers from 1 to 13\n    all_combinations = list(combinations(range(1, 14), 9))\n\n    # Go through each combination\n    for combo in all_combinations:\n        # Find all numbers that have a unique number of divisors in the combination\n        unique_divisors = {}\n        for number in combo:\n            num_divisors = len(divisors(number))\n            if num_divisors not in unique_divisors:\n                unique_divisors[num_divisors] = [number]\n            else:\n                unique_divisors[num_divisors].append(number)\n        unique_numbers = [v[0] for k, v in unique_divisors.items() if len(v) == 1]\n\n        # Condition: Two students put up their hands, so we need exactly two numbers\n        # with a unique factor count, and none of the numbers should be 1 (1 has a unique number of divisors)\n        if len(unique_numbers) == 2 and 1 not in unique_numbers:\n            # Alice has an odd number; May has a number smaller than Alice's by 2\n            # and bigger than Mark's by 1 -> May's number + 1 is less than Alice's odd number\n            # and May's number - 1 and May's number + 2 is in the combination\n            for may_number in range(2, 13):  # May's number cannot be 1 or 13\n                if (may_number - 1 in combo or may_number - 1 == 1) and may_number + 1 in combo:\n                    alice_number = may_number + 2\n                    mark_number = may_number - 1\n                    if alice_number in combo and alice_number % 2 != 0:\n                        # Calculate the product of the four numbers not picked\n                        not_picked = set(range(1, 14)) - set(combo)\n                        product = 1\n                        for num in not_picked:\n                            product *= num\n                        return product\n\nans = solution()"
    ],
    "6a4c9fce03a84201b80dea6e9a6cd7cf": [
        "def solution():\n    total_minutes = 30  # half an hour equals 30 minutes\n    rate_a = 300 / 12   # pages per minute for printer A\n    rate_b = 300 / 10   # pages per minute for printer B\n\n    # Total pages printed is the sum of pages printed by each printer in 30 minutes\n    total_pages = (rate_a + rate_b) * total_minutes\n\n    return total_pages\n\nans = solution()"
    ],
    "39bfd666abde40ed9ef0dbeb23faa055": [
        "def solution():\n    short_rope = 20\n    long_rope = 5 * short_rope\n    total_length = short_rope + long_rope\n    return total_length\n\nans = solution()"
    ],
    "959efbb55d9940c8a07132d59f0420ff": [
        "def solution():\n    return 72 * 43\n\nans = solution()"
    ],
    "eba97ef5f84146c19418485d0ecbe151": [
        "from itertools import combinations\n\ndef solution():\n    hats_options = sum([len(list(combinations(range(4), i))) for i in range(5)])  # 0 to 4 hats\n    shirts_options = sum([len(list(combinations(range(3), i))) for i in range(1, 4)])  # 1 to 3 shirts\n    pants_options = sum([len(list(combinations(range(2), i))) for i in range(1, 3)])  # 1 to 2 pants\n    skirt_options = 1  # 1 skirt is mandatory\n\n    # By the multiplication principle:\n    ans = hats_options * shirts_options * pants_options * skirt_options\n    return ans\n\nans = solution()"
    ],
    "93563e24dcde4ff39e2fadedcde819a3": [
        "def solution():\n    # First, let's convert the recurring decimals to fractions.\n    # n = 0.0101010101... can be expressed as n = 1/99\n    repetend = 1/99\n    \n    # The product of the two repetends (which are the same)\n    product = repetend * repetend  # This will be (1/99)^2\n    \n    # The length of the repetend of the product can be calculated\n    # by realizing that it must be a multiple of the lengths\n    # of the individual repetends.\n    # Length of the repetend is the smallest number \"k\" such that 10^k*n is an integer\n    # For 1/99, k=2 because (10^2)*1/99 = 1 is an integer \n    # For (1/99)^2, k=2*2=4 because the lowest common multiple of 2 and 2 is 4\n    \n    # Therefore, the number of digits in one repetend of the product is 4\n    digits_in_repetend = 4\n    \n    return digits_in_repetend\n\nans = solution()"
    ],
    "689ae8da46554adf826beb1a55700c76": [
        "def solution():\n    A = 0.80  # Percentage of students who chose Grade A Math\n    B = 0.35  # Percentage of students who chose Grade B Math\n    neither = 0.10  # Percentage of students who chose neither\n    both = 75  # Number of students who chose both subjects\n\n    total_percentage = 1 - neither  # Percentage of students who chose at least one subject\n    total_AB = A + B  # Combined percentage who chose A or B or both\n\n    single_AB = total_AB - total_percentage  # Percentage of students who chose either A or B, but not both\n\n    # both / single_AB represents the total number of students\n    total_students = both / single_AB\n\n    return int(total_students)\n\nans = solution()"
    ],
    "d559f399083a49ba9b8396e4af839356": [
        "def solution():\n    return 72 * 43\n\nans = solution()"
    ],
    "2a4b4cb16018411e860c36a08fa77b24": [
        "def solution():\n    count = 0\n    for month in range(1, 13):\n        if month < 10:\n            month_str = '0' + str(month)\n        else:\n            month_str = str(month)\n        for day in range(1, 32):\n            if day < 10:\n                day_str = '0' + str(day)\n            else:\n                day_str = str(day)\n            date_str = day_str + '/' + month_str + '/2019'\n            count += date_str.count('3')\n    return count\n\nans = solution()"
    ],
    "adc0111f2b2c4d378ae08bcd6ee30b74": [
        "def solution():\n    return 33033\n\nans = solution()"
    ],
    "993780e2460e4c75a69e44c4d42adb9d": [
        "def solution():\n    from fractions import Fraction\n    from sympy import symbols, Eq, solve\n\n    # Define variable for number of lemons\n    lemons = symbols('lemons')\n\n    # Total items is the sum of apples, bananas, and lemons\n    total_items = Fraction(2, 3) * (lemons + 12) + Fraction(1, 9) * (lemons + 12) + lemons\n\n    # Create an equation where the sum of fractions of items equal to total items\n    equation = Eq(Fraction(2, 3) + Fraction(1, 9), total_items / (lemons + 12))\n\n    # Solve the equation\n    num_lemons = solve(equation, lemons)[0]\n\n    return num_lemons\n\nans = solution()"
    ],
    "bbf5395114fa4ebba02cabdc25eef45a": [
        "def solution():\n    # Cuboid dimensions\n    length = 7\n    width = 5\n    height = 14\n    \n    # Since all cubes are the same size, and the cuboid is split into 490 small cubes,\n    # each dimension is split into 7 parts (since 7*5*14 = 490, so size of small cube is 1x1x1)\n\n    # Only the cubes in the corners will have exactly three faces painted.\n    # There are 8 corners on a cuboid.\n    num_corners = 8\n\n    return num_corners\n\nans = solution()"
    ],
    "de32aa63739340c1b48d956920574cde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of durian, chocolate and strawberry puffs be d, c, and s respectively\n    d, c, s = symbols('d c s')\n\n    # Given the ratios and prices for each type of puff\n    ratio_durian_chocolate = Eq(d, 3/4 * c)\n    ratio_durian_strawberry = Eq(d, 3/2 * s)\n    total_sales = Eq(5*d + 3*c + 4*s, 560)\n\n    # Solve the system of equations\n    solutions = solve((ratio_durian_chocolate, ratio_durian_strawberry, total_sales), (d, c, s))\n\n    # Calculate the amount collected from durian puffs\n    durian_puffs_sales = 5 * solutions[d]\n\n    return durian_puffs_sales\n\nans = solution()"
    ],
    "92b5600f34c745cc9d5dd15bf5842acc": [
        "def solution():\n    for tens in range(1, 10):  # First digit must be from 1 to 9\n        for units in range(10):  # Second digit must be from 0 to 9\n            original_number = tens * 10 + units\n            new_number = units * 10 + tens\n            if new_number == (original_number // 3) + 3:\n                return original_number\n\nans = solution()"
    ],
    "9ec93e5371534d979ad30c4708659ad9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C, D, Zachary, Yvonne, Xavier, Waylon = symbols('A B C D Zachary Yvonne Xavier Waylon', integer=True)\n    constraints = [\n        A > C, A < D,            # A is between C and D\n        B < Xavier,              # B is below Xavier\n        D == 5 * Yvonne,         # D is 5 times Yvonne\n        Zachary + 2 == Xavier + Waylon - Zachary,      # Zachary's relation to Xavier and Waylon\n        Zachary == Yvonne + Xavier,   # Zachary is the sum of Yvonne and Xavier\n        A >= 1, B >= 1, C >= 1, D >= 1, Zachary >= 1, Yvonne >= 1, Xavier >= 1, Waylon >= 1,  # Minimum level\n        A <= 18, B <= 18, C <= 18, D <= 18, Zachary <= 18, Yvonne <= 18, Xavier <= 18, Waylon <= 18  # Maximum level\n    ]\n    \n    # Since names and apartments are independent, we can solve personalities and apartments separately and then combine results based on conditions\n    personalities = solve(constraints, (Zachary, Yvonne, Xavier, Waylon))\n    apartments = solve(constraints, (A, B, C, D))\n    \n    # Using the first (and presumably only) solution\n    Zachary_level = personalities[Zachary]\n    Xavier_level = personalities[Xavier]\n    Yvonne_level = personalities[Yvonne]\n    Waylon_level = personalities[Waylon]\n\n    # Mapping name to level\n    name_to_level = {\n        'Zachary': Zachary_level,\n        'Xavier': Xavier_level,\n        'Yvonne': Yvonne_level,\n        'Waylon': Waylon_level\n    }\n    \n    A_level = None\n    for p in apartments:\n        if name_to_level['Zachary'] > name_to_level['Xavier']:\n            if p[A] > name_to_level['Xavier'] and p[A] < name_to_level['Zachary']:\n                A_level = p[A]\n        else:\n            if name_to_level['Xavier'] in p.values() and p[B] < name_to_level['Xavier']:\n                A_level = p[A]\n\n    return A_level\n\nans = solution()"
    ],
    "64b747db943b470e8d5bcc4cd037f8bc": [
        "def solution():\n    principal = 10000\n    rate_first_period = 1.191\n    rate_second_period = 1.166\n\n    amount_after_first_period = principal * rate_first_period\n    total_amount = amount_after_first_period * rate_second_period\n\n    return round(total_amount, 2)\n  \nans = solution()"
    ],
    "a72c43c3bde841a3810fb516a1d277f4": [
        "def solution():\n    from math import gcd\n\n    # Number of students from each school\n    school_A = 24\n    school_B = 36\n    school_C = 42\n\n    # Find the greatest common divisor (GCD) of the three numbers\n    gcd_ab = gcd(school_A, school_B)\n    gcd_abc = gcd(gcd_ab, school_C)\n\n    return gcd_abc\n\nans = solution()"
    ],
    "beed278a1bed4c50a92eafa931245d88": [
        "from itertools import permutations\n\ndef solution():\n    digits = '458'\n    all_permutations = list(permutations(digits))\n    return len(all_permutations)\n\nans = solution()"
    ],
    "c0de10f834e9467fb65b332409f0b795": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n\n    equation1 = Eq(3 * notebook + 4 * pencil_case + 5 * eraser, 50)\n    equation2 = Eq(notebook + pencil_case, 6)\n    equation3 = Eq(pencil_case + eraser, 9)\n\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n\n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "97e7c5c45535473c925714e02efb350b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    roll, donut = symbols('roll donut')\n    \n    equation1 = Eq(5 * roll + 6 * donut, 14.70)\n    equation2 = Eq(roll, 3 * donut)\n\n    solutions = solve((equation1, equation2), (roll, donut))\n\n    return solutions[roll]\n\nans = solution()"
    ],
    "907abf99743b45bcb21f5e10053628da": [
        "def solution():\n    count = 0\n    for h in range(1, 10):  # hundreds digit cannot be 0, hence starting from 1\n        for t in range(1, 10):  # tens digit cannot be 0 either, hence starting from 1\n            for u in range(1, 10):  # units digit also cannot be 0, starting from 1\n                if h % t == 0 and h % u == 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "e70904d7218642df8d9ac82e9cbb1818": [
        "def solution():\n    sequence = []\n    for i in range(1, 13):\n        sequence.extend([i] * i)\n    sorted_sequence = sorted(sequence)\n    mid = len(sorted_sequence) // 2\n    # Since the total number of elements is even, the median is the average of the two middle values\n    if len(sorted_sequence) % 2 == 0:\n        median = (sorted_sequence[mid - 1] + sorted_sequence[mid]) / 2\n    else:\n        median = sorted_sequence[mid]\n    return median\n\nans = solution()"
    ],
    "f026bb192f0f4088a86ad13d7cc26d86": [
        "def solution():\n    from itertools import permutations\n\n    digits = [4, 5, 8]\n    permuts = list(permutations(digits, len(digits)))\n    ans = len(permuts)\n    \n    return ans\n\nans = solution()"
    ],
    "d16475774e2d40e298ca4d00de004671": [
        "def solution():\n    # A_9 = sum of first 9 terms = 99\n    # A_27 = sum of first 27 terms = 540\n    \n    # The sum of an arithmetic sequence A_n can be calculated by the formula:\n    # A_n = n/2 * (2a + (n-1)d) where a is the first term and d is the common difference.\n    \n    # From the information given, we have two equations:\n    # (1) 9/2 * (2a + (9-1)d) = 99    => 9 * (a + 4d) = 99\n    # (2) 27/2 * (2a + (27-1)d) = 540 => 27 * (a + 13d) = 540\n    \n    # Simplify the equations to find a and d\n    # Equation (1) becomes: a + 4d = 11\n    # Equation (2) becomes: a + 13d = 20\n\n    # We solve these two linear equations to find a and d\n    from sympy import symbols, Eq, solve\n\n    a, d = symbols('a d')\n    eq1 = Eq(a + 4 * d, 11)\n    eq2 = Eq(a + 13 * d, 20)\n\n    solutions = solve((eq1, eq2), (a, d))\n\n    # Get the values of a and d\n    a_val = solutions[a]\n    d_val = solutions[d]\n\n    # Now we calculate A_16 with the values of a and d\n    A_16 = 16/2 * (2*a_val + (16-1)*d_val)\n    \n    return A_16\n\nans = solution()"
    ],
    "2989d3782ec842dcb36b4a949d8588db": [
        "def solution():\n    total_people = 216\n    teachers = 139\n    children = total_people - teachers\n    return children\n\nans = solution()"
    ],
    "d26a5497d6514135ba9d0ea0f54b8bb4": [
        "def solution():\n    count = 0\n    for i in range(7, 41):\n        count += len(str(i))\n    return count\n\nans = solution()"
    ],
    "9626ae3648b54685b675bed33b248975": [
        "def solution():\n    loafs_per_cup = 6 / 5\n    needed_loafs = 24\n    cups_needed = needed_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "26c05d1067be4f228420a8d03d60d1f1": [
        "def solution():\n    from math import lcm\n    flashes_per_hour_red = 4 * 60\n    flashes_per_hour_green = 6 * 60\n    lcm_flashes = lcm(flashes_per_hour_red, flashes_per_hour_green)\n\n    num_flashes_same_instance = 60 * 60 // lcm_flashes\n\n    return num_flashes_same_instance + 1  # +1 to include both the first and the last\n\nans = solution()"
    ],
    "bd83c15a08c149f196a2f6caf1bec626": [
        "def solution():\n    total_volume = 60 + 780  # Total volume of rose drink in ml\n    max_volume_per_glass = total_volume // 9  # Maximum volume of drink in each glass\n    return max_volume_per_glass\n\nans = solution()"
    ],
    "d495a6229050459d9704caa6c86a306f": [
        "def solution():\n    # Calculate the number of games in the group stage\n    # Each group has 4 teams, and each team plays with the other 3 teams one time\n    group_games_per_group = 3 * 4 / 2  # (n(n-1))/2 formula for round robin\n    total_group_games = group_games_per_group * 8  # there are 8 groups\n\n    # Calculate the number of games in the knockout round\n    # There are rounds of 16, quarterfinals, semifinals, third-place playoff, and final\n    round_of_16_games = 8  # 16 teams means 8 matches\n    quarterfinals_games = 4  # 8 teams means 4 matches\n    semifinals_games = 2  # 4 teams means 2 matches\n    third_place_game = 1  # A single match for third place\n    final_game = 1  # A single match for the final\n\n    # Total knockout games is the sum of all the knockout rounds\n    total_knockout_games = (round_of_16_games + quarterfinals_games +\n                            semifinals_games + third_place_game + final_game)\n    \n    # Total games played in the World Cup is the sum of group stage games and knockout games\n    total_games = total_group_games + total_knockout_games\n\n    return int(total_games)\n\nans = solution()"
    ],
    "b89d2244ef89497f80cc165487752747": [
        "def solution():\n    total_paintings = 120\n    french_artists = 40\n    landscapes_by_french = 25\n    landscapes = int(0.40 * total_paintings)\n    still_lifes = total_paintings - landscapes\n    french_not_landscapes = french_artists - landscapes_by_french\n    still_lifes_not_french = still_lifes - french_not_landscapes\n    \n    return still_lifes_not_french\n\nans = solution()"
    ],
    "8a316589158f4d3da421f3970c3ae486": [
        "def solution():\n    speed_meters_per_minute = 24\n    time_minutes = 300 / 60\n    distance = speed_meters_per_minute * time_minutes\n    return distance\n\nans = solution()"
    ],
    "dc48d7be2274447aa61b412cef4e1d7b": [
        "def solution():\n    weight1 = 100\n    weight2 = 400\n    concentration1 = 0.5  # 50% in decimal\n    concentration2 = 0.8  # 80% in decimal\n\n    total_weight = weight1 + weight2\n    total_rice = (concentration1 * weight1) + (concentration2 * weight2)\n    \n    concentration_of_new_mix = total_rice / total_weight\n\n    return concentration_of_new_mix\n\nans = solution()"
    ],
    "c347b5871cff46138c8d8bcabd9edb4d": [
        "def solution():\n    speed_per_minute = 24  # meters per minute\n    time_seconds = 300\n    time_minutes = time_seconds / 60  # convert seconds to minutes\n\n    distance = speed_per_minute * time_minutes\n    return distance\n\nans = solution()"
    ],
    "93719c34b1574999936ad00f94cad2e8": [
        "def solution():\n    return 30.03 - 3.3\n\nans = solution()"
    ],
    "e847f4218f9d4d7db291515e8c3a7f1e": [
        "def solution():\n    horses_initial = 12\n    days_initial = 15\n    horses_final = 20\n\n    # Calculation using the unitary method:\n    # Total units of hay = horses_initial * days_initial\n    # days_final = Total units of hay / horses_final\n\n    total_units_of_hay = horses_initial * days_initial\n    days_final = total_units_of_hay / horses_final\n    \n    return days_final\n\nans = solution()"
    ],
    "8f71ad4877d946aca5623bd2c5a1ffd9": [
        "def solution():\n    for i in range(1000, 10000):\n        house_number = str(i)\n        moved_number = int(house_number[1:] + house_number[0])\n        if moved_number - i == 4707:\n            return i\n\nans = solution()"
    ],
    "7181abe12a9441efa29c9b6450170e13": [
        "def solution():\n    years = 0\n    oliver_age = 20\n    lin_age = 26\n    while (oliver_age + lin_age) != 48:\n        years += 1\n        oliver_age += 1\n        lin_age += 1\n    return years\n\nans = solution()"
    ],
    "4c625760244c484b9b010ff513d7aacb": [
        "def solution():\n    ans = 6.67 + 5.93\n    return ans\n\nans = solution()"
    ],
    "e8ea378d2e224df88c51e8df519dd96a": [
        "def solution():\n    numbers = [0.0099, 0.81, 1.2, 0.087, 1.21]\n    closest_number = min(numbers, key=lambda x: abs(x - 1))\n    return closest_number\n\nans = solution()"
    ],
    "41c299f84c8e465ab37555ce3abe8dbd": [
        "def solution():\n    sandra_age_now = 8\n    mother_age_now = 4 * sandra_age_now\n\n    sandra_age_2_years_ago = sandra_age_now - 2\n    mother_age_2_years_ago = mother_age_now - 2\n\n    age_difference = mother_age_2_years_ago - sandra_age_2_years_ago\n\n    return age_difference\n\nans = solution()"
    ],
    "44be0754c9694d719af9a93c29de6a7f": [
        "def solution():\n    for i in range(1, 1000):\n        multiple = 35 * i\n        if str(multiple).endswith('35') and sum(int(digit) for digit in str(multiple)) == 35:\n            return multiple\n\nans = solution()"
    ],
    "af1991b7f84d4f62aaf6b6878cddfe02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    y = symbols('y')\n    total_money = 8 * y\n    spent_on_watch = 4 * y\n    spent_on_handbag = 20\n    each_child = y - 5\n\n    # Money given to children\n    money_to_children = 2 * each_child\n\n    # Equation based on the description\n    equation = Eq(total_money, spent_on_watch + spent_on_handbag + money_to_children)\n\n    # Solving for y\n    y_value = solve(equation, y)\n\n    return y_value[0]\n\nans = solution()"
    ],
    "42c5c84cc6f5475fbadec4fb054ea542": [
        "def solution():\n    return 5.6 * 2.4\n\nans = solution()"
    ],
    "25e1b3f1ea544f5fb040500722f553f5": [
        "def solution():\n    # The sum of the first n terms of an arithmetic sequence is given by:\n    # S_n = n/2 * (a1 + an), where a1 is the first term and an is the nth term.\n    # We have two equations:\n    # S_9 = 99  => 9/2 * (a1 + a9) = 99\n    # S_27 = 540 => 27/2 * (a1 + a27) = 540\n\n    # From S_9, we can express a1 + a9:\n    # a1 + a9 = 2 * S_9 / 9\n    a1_a9 = 2 * 99 / 9\n\n    # From S_27, we can express a1 + a27:\n    # a1 + a27 = 2 * S_27 / 27\n    a1_a27 = 2 * 540 / 27\n\n    # Knowing that a9 = a1 + 8d and a27 = a1 + 26d (where d is the common difference),\n    # we can calculate d as follows:\n    # a1 + a1 + 8d = a1_a9\n    # a1 + a1 + 26d = a1_a27\n    # Then we have 18d = a1_a27 - a1_a9\n    d = (a1_a27 - a1_a9) / 18\n\n    # Now we can find a16, since a16 = a1 + 15d\n    a16 = a1_a9 / 2 + 15 * d\n\n    # Finally, we calculate the sum of first 16 terms S_16 using the formula again:\n    # S_16 = 16/2 * (a1 + a16)\n    S_16 = 8 * (a1_a9 / 2 + a16)\n    \n    return S_16\n\nans = solution()"
    ],
    "99f53a3e706d464e97e730165f364f49": [
        "def solution():\n    days = 15\n    initial_amount = 100\n    deposit = 10\n    spend = 8\n\n    deposit_days = days // 2\n    spend_days = days // 2\n\n    # If the total days are odd, add one more deposit day\n    if days % 2 == 1:\n        deposit_days += 1\n\n    amount_after_days = initial_amount + (deposit - spend) * spend_days + deposit * (deposit_days - spend_days)\n\n    return amount_after_days\n\nans = solution()"
    ],
    "d079d30d875545e8b201477ce3c16428": [
        "def solution():\n    count = 0\n    for i in range(1, 100):\n        if i % 3 != 0 and i % 7 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "f0ef1fefe9e4405cb773c5fc47ab6e50": [
        "def solution():\n    return 5.6 * 2.4\n\nans = solution()"
    ],
    "c4423db7405342c1aecbf4c4b4097957": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 28)\n\nans = solution()"
    ],
    "0ddcfdef95d9497987f43afbe170f9f1": [
        "def solution():\n    # The sequence of strikes for each hour is an arithmetic sequence: 1, 2, 3, ..., 12.\n    first_term = 1\n    last_term = 12\n    num_terms = 12\n    \n    # The sum 'S' of an arithmetic sequence is given by: S = n/2 * (first_term + last_term)\n    total_strikes = num_terms / 2 * (first_term + last_term)\n    \n    return int(total_strikes)\n\nans = solution()"
    ],
    "b92d0cd587064c7195d1d5818981c69c": [
        "def solution():\n    weight_per_coin = 2.5  # weight of one ten-pence coin in grams\n    total_value = 40       # total value in pence\n    coin_value = 10        # value of one ten-pence coin in pence\n\n    number_of_coins = total_value / coin_value\n    total_weight = number_of_coins * weight_per_coin\n\n    return total_weight\n\nans = solution()"
    ],
    "0e1b4fc3bb9a4b798f86eca17838ecba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    nina, james = symbols('nina james')\n    \n    # Total number of buttons\n    equation1 = Eq(nina + james, 22)\n    \n    # After giving 4 buttons away, Nina and James have the same number\n    equation2 = Eq(nina - 4, james + 4)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (nina, james))\n    \n    return solutions[nina]\n\nans = solution()"
    ],
    "83396f638262415bb8e62a96478ffa20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    mango, pear, apple = symbols('mango pear apple')\n    \n    equation1 = Eq(mango + pear, 3.40)\n    equation2 = Eq(mango + apple, 3.80)\n    equation3 = Eq(4*mango + 2*pear + apple, 13.20)\n    \n    solutions = solve((equation1, equation2, equation3), (mango, pear, apple))\n\n    return solutions[mango]\n\nans = solution()"
    ],
    "fc18df7e18e04a7ba182dc1493c19ef1": [
        "def solution():\n    for correct in range(7):\n        wrong = 6 - correct\n        score = correct * 5 - wrong * 2\n        if score == 23:\n            return correct\n\nans = solution()"
    ],
    "2035192c81ab4e4ca4f6708f47f4638d": [
        "def solution():\n    sandra_age_now = 8\n    mother_age_now = 4 * sandra_age_now\n    sandra_age_2_years_ago = sandra_age_now - 2\n    mother_age_2_years_ago = mother_age_now - 2\n    \n    age_difference_2_years_ago = mother_age_2_years_ago - sandra_age_2_years_ago\n    \n    return age_difference_2_years_ago\n\nans = solution()"
    ],
    "2628cccb1cfe4903b268f7641a4ef75c": [
        "def solution():\n    total_candies = 35\n    total_children = 9\n    starting_seat = 3\n\n    # As seat numbers start from 1, we need to offset the starting seat by 1\n    last_seat = (starting_seat - 1 + total_candies - 1) % total_children + 1\n\n    return last_seat\n\nans = solution()"
    ],
    "21305df1a3f34c78b15a5895829b6b0e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    racket, ball = symbols('racket ball')\n    \n    equation1 = Eq(racket + 3*ball, 536)\n    equation2 = Eq(2*racket + 3*ball, 904)\n    \n    solutions = solve((equation1, equation2), (racket, ball))\n    \n    return solutions[racket]\n\nans = solution()"
    ],
    "13b8f82b60e940e09ee1f5cec6149d01": [
        "def solution():\n    numbers = [9, 12, 17, 18, 21, 23]\n    return sum(numbers)\n\nans = solution()"
    ],
    "f83ac99f77f44f1eb0edef1268dfc574": [
        "import math\n\ndef solution():\n    # Given data\n    initial_speed = 10  # m/s\n    angle = 37  # degrees\n    g = 9.81  # m/s^2, acceleration due to gravity\n\n    # Converting angle to radians for use in math functions\n    angle_radians = math.radians(angle)\n\n    # Considering the conservation of energy\n    # The initial kinetic energy will be converted into potential energy at the maximum height\n    # Hence, m * g * height = (1/2) * m * initial_speed^2\n    # where m is the mass of the box which gets cancelled out on both sides\n    # Therefore, we can find the height as follows:\n    height = (initial_speed ** 2) / (2 * g * math.sin(angle_radians))  # sin(angle) due to the incline\n\n    # Distance along the ramp is found using trigonometry: distance = height / sin(angle)\n    distance = height / math.sin(angle_radians)\n\n    return height, distance\n\nans = solution()"
    ],
    "e884adb0e6b040cdb2a34a42819fab4c": [
        "def solution():\n    ans = 30 + 30 * 30 + 30 * 30 * 30\n    return ans\n\nans = solution()"
    ],
    "0dbf1ccfd2fc4007a533a919605fe57f": [
        "def solution():\n    players = 64\n    players_per_match = 4\n\n    matches = 0\n    while players > 1:\n        matches += players // players_per_match\n        players = players // players_per_match\n\n    return matches\n\nans = solution()"
    ],
    "2473e761fb61498e9259082d612f70e0": [
        "def solution():\n    ans = 2.5 * 24\n    return ans\n\nans = solution()"
    ],
    "8570bae0d8974f76bc97044f422b89b5": [
        "def solution():\n    # Maximum balls Sheila can take out without completing 2 groups of 4 same colour balls:\n    # - take all 5 blue balls (not enough for 2 groups of 4)\n    # - take all 4 orange balls (not enough for 2 groups of 4)\n    # - take 3 yellow balls (although there are only 2, this is to ensure she doesn't make a group of 4)\n    # After this, the next ball she takes out must complete one of the groups of 4.\n    max_balls_without_2_groups_of_4 = 5 + 4 + 3\n    \n    # The next ball she takes will surely complete one group of blue or orange balls.\n    # After the first group of 4 is completed:\n    # - if it's blue, she could take the remaining 3 orange, and will need to take one more to complete second group.\n    # - if it's orange, she could take all remaining 5 blue, which means 2 groups have already been completed.\n    # Therefore, the worst case is if she completes the orange group first, needing 1 extra ball after that.\n    min_balls_to_complete_second_group = 4\n    \n    # Now sum up the maximum balls she can take without completing 2 groups and the minimum to complete second group.\n    return max_balls_without_2_groups_of_4 + min_balls_to_complete_second_group\n\nans = solution()"
    ],
    "17e5719cf1f44333aa04f4722862715a": [
        "def solution():\n    ans = 782 - 9 * 24 // 2\n    return ans\n\nans = solution()"
    ],
    "ae73ec11506148a9bdc9da9a59f4f805": [
        "def solution():\n    total_questions = 6\n    correct_score = 5\n    wrong_score = -2\n\n    # Hypothesis: Let's assume all answers were correct initially and calculate the score\n    max_score = total_questions * correct_score\n    \n    # Now let's find the number of questions that were actually wrong\n    for wrong_answers in range(total_questions + 1):\n        correct_answers = total_questions - wrong_answers\n        score = correct_answers * correct_score + wrong_answers * wrong_score\n        if score == 23:\n            return correct_answers\n\nans = solution()"
    ],
    "328cb846f149403d8585071dd7244539": [
        "def solution():\n    total_weight = 22\n    cheese_weight = 6\n    number_of_flour_bags = 4\n\n    flour_bag_weight = (total_weight - cheese_weight) / number_of_flour_bags\n\n    return flour_bag_weight\n\nans = solution()"
    ],
    "3ae9a5c1a17b4f1095105ce89b2df771": [
        "def solution():\n    # Assume that 1 British pound equals 1.2 USD and 1 USD equals 60 Russian Ruble\n    # These conversion rates are assumed and may not reflect current actual rates\n    pound_to_usd = 1.2\n    usd_to_ruble = 60\n    \n    # Cost of one CD in England in pounds\n    cost_cd_pounds = 14\n    \n    # Convert the cost from pounds to rubles\n    cost_cd_rubles = cost_cd_pounds * pound_to_usd * usd_to_ruble\n    \n    # Assume Richard spent 1000 rubles\n    richard_money_rubles = 1000\n    \n    # Calculate the number of CDs he could buy in St Petersburg\n    num_cds = richard_money_rubles // cost_cd_rubles\n    \n    return int(num_cds)\n\nans = solution()"
    ],
    "4109885176844bd28d5df4cb978b2199": [
        "def solution():\n    # Let the original 4-digit number be ABCD (in terms of digits)\n    # Moving the first digit to the ones place gives us: BCD + 1000A\n    # According to the problem, BCD + 1000A = ABCD + 4707\n    # Therefore, 1000A - 1000D = 4707 and A - D = 4707 / 1000\n    # Rewriting the number to keep it as a 4-digit number, we know that A should be greater than or equal to 5, since A - D = 4.707\n    # We can start by finding the value of D and then A\n    # then reconstruct the house number as 1000A + 100B + 10C + D\n\n    for D in range(0, 10):\n        A = D + 4.707  # Since A - D should be close to 4.707, but we need an integer\n        if A.is_integer() and A >= 1 and A <= 9:\n            A = int(A)\n            # ABCD = BCD + 4707 = 1000A + BCD - 1000D + 4707\n            # So BCD = ABCD - 1000A + 1000D - 4707 can be any three-digit number\n            # We will try to find a valid BCD which makes ABCD a 4-digit number\n            for BCD in range(100, 1000):\n                ABCD = 1000 * A + BCD\n                if ABCD - 1000 * A + 1000 * D == BCD + 4707:\n                    return ABCD  # Found the valid house number\n    return None\n\nans = solution()"
    ],
    "50bc0ad9cea747f5b927172f53d8747a": [
        "def solution():\n    from sympy import isprime, nextprime\n\n    # check each option\n    for age in [28, 39, 52, 84]:\n        age_3_years_ago = age - 3\n        age_next_year = age + 1\n        age_in_12_years = age + 12\n\n        # check if the age 3 years ago is a perfect square\n        if int(age_3_years_ago**0.5)**2 == age_3_years_ago:\n            # check if the age next year is a prime number\n            if isprime(age_next_year):\n                # check if the age in 12 years is a perfect cube\n                if int(age_in_12_years**(1/3))**3 == age_in_12_years:\n                    return age\n\nans = solution()"
    ],
    "a3f26b4b45934be08cf8676828e7ba57": [
        "def solution():\n    n1 = 9\n    sum_n1 = 72\n    n2 = 23\n    sum_n2 = 736\n    n3 = 16\n\n    # sum_n = n/2 * (2a + (n-1)d)\n    # sum_n1/n1 = sum_n2/n2 => n1/2 * (2a + (n1-1)d) = n2/2 * (2a + (n2-1)d)\n    # Solve for the common difference d and the first term a\n\n    # Consider the equal ratios: (sum_n2 - sum_n1)/(n2 - n1) = (2 * sum_n1)/n1 => (2a + (n2+n1-1)d)\n    d = (sum_n2 - sum_n1) / (n2 - n1)\n    a = (sum_n1 / n1) - ((n1 - 1) / 2) * d\n\n    # Calculate sum of first n3 terms using the formula derived from n1\n    sum_n3 = n3 * (2 * a + (n3 - 1) * d) / 2\n\n    return int(sum_n3)\n\nans = solution()"
    ],
    "e8608d6fe45347b7a5f73ee97e718fe9": [
        "def solution():\n    return 168 * 91\n\nans = solution()"
    ],
    "34b8599fcad846d6b22ce1cb7e0d67e3": [
        "def solution():\n    # To guarantee 2 M&M's chips of different colors, we need to consider the worst-case scenario.\n    # You need to pick at most 3 M&M's chips of the most frequent color to guarantee the next one is different.\n    # In this scenario, 5 brown, and then we'll need to pick 1 more to ensure it's not brown, which could be red or yellow.\n    # Thus, we've picked 6 in the worst case to guarantee at least one non-brown chip.\n    \n    # However, since we want TWO chips of different color and we already have 1 non-brown, we pick one more.\n    # This ensures that we have two chips of different colors.\n    # Worst-case: 5 (brown) + 1 (possibly red/yellow but not brown) + 1 (which is guaranteed to be different from the previous 6)\n    num_chips = 5 + 1 + 1\n    return num_chips\n\nans = solution()"
    ],
    "bc530cd877f2428bb79ffc956252f9b3": [
        "def solution():\n    # Andrew and Bernice's rates (A:B) can be defined by the levels when Andrew is at level 5\n    # We assume their speeds are constant, thus the ratio of their speeds is the same as the ratio of levels covered.\n    andrew_bernice_rate = 5 / 3\n\n    # When Bernice was at level 6, Cassandra was at level 10, so their rates (B:C) is\n    # Similarly, the ratio of their speeds is the same as the ratio of levels covered.\n    bernice_cassandra_rate = 6 / 10\n\n    # Find the combined rate from Andrew to Cassandra (A:C) which is A:B multiplied by B:C\n    andrew_cassandra_rate = andrew_bernice_rate * bernice_cassandra_rate\n\n    # Now we find where Andrew will be when Cassandra is at level 19 using the A:C rate.\n    andrew_level_when_cassandra_19 = andrew_cassandra_rate * 19\n\n    return andrew_level_when_cassandra_19\n\nans = solution()"
    ],
    "751fb35fe9d44a4db9f500a8a4b466c9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    table_cost, chair_cost = symbols('table_cost chair_cost')\n\n    # Create equations based on the information given\n    # Equation 1: 4 tables + 9 chairs = 504\n    equation1 = Eq(4 * table_cost + 9 * chair_cost, 504)\n    # Equation 2: 1 table = 3 chairs\n    equation2 = Eq(table_cost, 3 * chair_cost)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (table_cost, chair_cost))\n\n    return solutions[chair_cost]\n\nans = solution()"
    ],
    "a7221d21ffb140cf886d39364cd7c81f": [
        "def solution():\n    return 43242 / 100\n\nans = solution()"
    ],
    "43310de103274061a3f319f61ec706e8": [
        "def solution():\n    time_for_one_quiz = 30  # minutes\n    num_quizzes = 4\n    total_time_minutes = time_for_one_quiz * num_quizzes\n    total_time_hours = total_time_minutes / 60\n    \n    return total_time_hours\n\nans = solution()"
    ],
    "ee25df77dbc84b5194bfbcc0c0bd215c": [
        "def solution():\n    def new_operation(a, b):\n        return a * b + a + b\n    \n    # Now we have the operation defined, we will define the equation based on the given condition\n    # 2 ∨ (x ∨ 4) = 59\n    # We will find x by using inverse operations step by step.\n    \n    # First, expand the inner operation x ∨ 4\n    # 2 ∨ (x*4 + x + 4) = 59\n    \n    # Next, expand the whole operation\n    # 2 * (x*4 + x + 4) + 2 + (x*4 + x + 4) = 59\n    # Simplify it\n    # 2x*4 + 2x + 2*4 + 2 + x*4 + x + 4 = 59\n    # 8x + 2x + 8 + 2 + 4x + x + 4 = 59\n    # 15x + 14 = 59\n    \n    # Now solve for x\n    # 15x = 59 - 14\n    # 15x = 45\n    x = (59 - 14) / 15\n    \n    # Return the final answer\n    return x\n\nans = solution()"
    ],
    "0ace0cd817cf47d78db91f0ee0283a12": [
        "def solution():\n    kilometres = 4.7\n    centimetres_per_kilometre = 100000\n    centimetres = kilometres * centimetres_per_kilometre\n    return centimetres\n\nans = solution()"
    ],
    "8e72117b5da04fdfb91ab3f9a9aab2cd": [
        "def solution():\n    t = 40 / 60  # 40 minutes in hours\n    v1 = 54  # Shafur's speed in km/h\n    v2 = 66  # Samuel's speed in km/h\n\n    d1 = v1 * t  # distance Shafur drove before Samuel turned back\n    d2 = v2 * t  # distance Samuel drove before turning back\n\n    # Let the remaining distance to Town Y be d. Time taken for Shafur is (d / v1).\n    # Samuel also covers distance d to Town Y, plus distance d2 back to Town X,\n    # and again d2 from Town X to where Shafur is, so Samuel's time is ((3*d2 + d) / v2).\n    # They reached Town Y at the same time, so (d / v1) = ((3*d2 + d) / v2).\n\n    d = (3 * d2 * v1) / (v2 - v1)\n\n    # Total distance between Town X and Town Y is d1 + d.\n    distance = d1 + d\n\n    return distance\n\nans = solution()"
    ],
    "a44dbd04ca324e2dade754b21d81088b": [
        "def solution():\n    grandpa_age = 61\n    grandsons_ages = [4, 7, 12]\n    sum_grandsons_ages = sum(grandsons_ages)\n    \n    years = 0\n    while sum_grandsons_ages < grandpa_age:\n        years += 1\n        sum_grandsons_ages += 3\n        grandpa_age += 1\n        \n    return years\n\nans = solution()"
    ],
    "84c4b5d7849c464193a6bad9277ea2b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n\n    equation1 = Eq(table, 3 * chair)\n    equation2 = Eq(4 * table + 9 * chair, 504)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[chair]\n\nans = solution()"
    ],
    "b30c16550e45492986ba4327f062d606": [
        "def solution():\n    first_term = 50\n    difference = -(50 - 46)  # Since the sequence is decreasing\n\n    # The first negative term is when the Nth term is less than 0\n    # a + (n - 1)d < 0 -> 50 + (n - 1)(-4) < 0 -> -4n + 54 < 0\n    # Solve for n\n    n = (first_term - difference) / (-difference)\n\n    return int(n)\n\nans = solution()"
    ],
    "95bcebc21d174c318350f0c2fd3955a3": [
        "def solution():\n    ans = 100 / 40\n    return ans\n\nans = solution()"
    ],
    "212dddf2d58c488f92051cac02b24a4d": [
        "def solution():\n    for i in range(100, 1000):\n        product_of_digits = 1\n        for digit in str(i):\n            product_of_digits *= int(digit)\n        if 100 <= product_of_digits <= 999:\n            return i\n\nans = solution()"
    ],
    "6a83a12baea34666bb5d5db02ee98315": [
        "def solution():\n    morning_fruit = 416\n    afternoon_fruit = 248\n    difference = morning_fruit - afternoon_fruit\n    return difference\n\nans = solution()"
    ],
    "b216c4dcef5246b1a1032e1ce7b59830": [
        "def solution():\n    # Calculate each part of the expression individually for clarity\n    part1 = (7 / -3.3333333333333333) / (-0.027 ** (1/3))\n    part2 = (2**3 / 4**2) / (0.125 * (1.8 - (0.2 * 7)))\n    part3 = 0.1 / 0.142857 + (2 * 0.3)\n\n    # Subtract part3 from the sum of part1 and part2 to get the final result\n    ans = part1 + part2 - part3\n\n    return ans\n\nans = solution()"
    ],
    "260fe91f8f7f438498be6c9fceaafc9b": [
        "def solution():\n    from fractions import Fraction\n    import math\n    \n    # Calculating each part of the equation step by step\n    \n    # Part 1: 7 divided by -3.33...(repeating)\n    part1_numerator = 7\n    part1_denominator = Fraction(-10, 3)\n    part1 = part1_numerator / part1_denominator\n    \n    # Part 1 denominator: cubic root of -0.027\n    part1_denom_cubic_root = -0.027 ** (1/3)\n    part1_total = part1 / part1_denom_cubic_root\n    \n    # Part 2: 2^3 divided by 4^2\n    part2 = (2 ** 3) / (4 ** 2)\n    \n    # Part 2 denominator: 0.125 * (1.8 - (0.2 * 7))\n    part2_denom_factor = 0.125 * (1.8 - (0.2 * 7))\n    part2_total = part2 / part2_denom_factor\n    \n    # Part 3: 0.1 divided by 0.142857... (repeating)\n    part3 = 0.1 / Fraction(1, 7)\n    \n    # Part 4: (2 * 0.3)\n    part4 = 2 * 0.3\n    \n    # Combine all parts\n    ans = part1_total + part2_total - (part3 + part4)\n    \n    return ans\n\nans = solution()"
    ],
    "740a0eb88157475a86714273b6c58967": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n    \n    # Pip has 50 more than Bud\n    equation1 = Eq(pip, bud + 50)\n    # Pip spent 80% of his money, so he has 20% left. Bud spent 3/4, so she has 1/4 left.\n    # The ratio of what's left is 6:5\n    equation2 = Eq(6*(pip - 0.8*pip), 5*(bud - (3/4)*bud))\n\n    solution = solve((equation1, equation2), (pip, bud))\n\n    return solution[pip]\n\nans = solution()"
    ],
    "ef74f31cad3e47e99a0e8f28fe1357b7": [
        "def solution():\n    first_multiple = (38 + 2) // 3 * 3  # to find the first multiple of 3 after 38\n    last_multiple = 81 // 3 * 3  # the largest multiple of 3 within the range\n\n    num_multiples = (last_multiple - first_multiple) // 3 + 1  # count of multiples\n\n    return num_multiples\n\nans = solution()"
    ],
    "dda1e4bf25b443da8efc70aaf2624bc4": [
        "def solution():\n    from math import lcm\n    return lcm(12, 15)\n\nans = solution()"
    ],
    "8eceffc0fa6b407998bd0ae271a1ef01": [
        "def solution():\n    morning_fruit = 416\n    afternoon_fruit = 248\n    difference = morning_fruit - afternoon_fruit\n    return difference\n\nans = solution()"
    ],
    "0f28dcf2c6ad4abeb816c16558e621eb": [
        "def solution():\n    first_multiple = (38 + 2) // 3 * 3  # find the first multiple of 3 greater than or equal to 38\n    last_multiple = 81 // 3 * 3  # find the last multiple of 3 less than or equal to 81\n\n    num_multiples = (last_multiple - first_multiple) // 3 + 1  # calculate number of multiples\n\n    return num_multiples\n\nans = solution()"
    ],
    "8601fccdea1547d8bdbea5b58f76c291": [
        "def solution():\n    three_sevenths_of_number = 18\n    whole_number = (three_sevenths_of_number * 7) / 3\n    five_sixths_of_number = (whole_number * 5) / 6\n    return five_sixths_of_number\n\nans = solution()"
    ],
    "3a1798bad2d541fcb5c6a144f4ce03cd": [
        "def solution():\n    # In a knockout tournament, each game eliminates one player. \n    # Hence, the number of games is one less than the number of players.\n    num_players = 5\n    num_games = num_players - 1\n    return num_games\n\nans = solution()"
    ],
    "7b05e8856130431fa24c3121679e2bb7": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    pip, bud = symbols('pip bud')\n    \n    # Pip has £50 more than Bud\n    equation1 = Eq(pip, bud + 50)\n    \n    # After spending, Pip has 20% left, Bud has 1/4 left\n    # Ratio of their leftover money is 6:5\n    equation2 = Eq((pip * 0.20) / (bud * 0.25), 6/5)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (pip, bud))\n    \n    # Pip's initial amount of pocket money\n    return solutions[pip]\n\nans = solution()"
    ],
    "297e8fe4a3fd48839219bc3a9649f928": [
        "def solution():\n    remaining_after_feb = 78\n    sold_in_feb = 13 + remaining_after_feb // 2\n    remaining_after_jan = remaining_after_feb * 2\n    carried_at_first = (remaining_after_jan + 22) * 2 - 22\n    \n    return carried_at_first\n\nans = solution()"
    ],
    "9d2c6f4e1357450eaed4a31c6237f2d2": [
        "def solution():\n    from sympy import factorint\n\n    # Prime factorization of 2016\n    factors = factorint(2016)\n    \n    # Finding multiplicities of the prime factors\n    ages = []\n    for base, exponent in factors.items():\n        ages.extend([base] * exponent)\n\n    # Sort the ages to start combining the smallest factors\n    ages.sort()\n\n    # Combine factors to ensure all ages are under 10, and there are only four children\n    while len(ages) > 4:\n        # Combine the two smallest factors\n        min1 = ages.pop(0)\n        min2 = ages.pop(0)\n        combined = min1 * min2\n        \n        # Find the right position to insert the combined factor to keep the list sorted\n        index = 0\n        while index < len(ages) and ages[index] < combined:\n            index += 1\n        ages.insert(index, combined)\n\n    # The sum of their ages\n    return sum(ages)\n\nans = solution()"
    ],
    "eeedd7f61d3f499e91214241749f7193": [
        "def solution():\n    boxes = 5\n    apples_per_box = 9\n    apples_from_bud = 16\n\n    total_apples = (boxes * apples_per_box) + apples_from_bud\n\n    return total_apples\n\nans = solution()"
    ],
    "4d8c3d77b070434f8e98c669130876ad": [
        "def solution():\n    # Let x be the amount of money Mrs Koh has.\n    # She wanted to put $70 into each of the four red packets.\n    # Total money required for 4 red packets: 4 * 70\n    # But, she is short of $15, which means:\n    # x + 15 = 4 * 70\n    x = (4 * 70) - 15\n    return x\n\nans = solution()"
    ],
    "24ae47ec3af142b6a27136a41410c388": [
        "def solution():\n    count = 0\n    for i in range(4, 52):\n        count += str(i).count('3')\n        if '3' in str(i):\n            if i == 23:\n                return count\n\nans = solution()"
    ],
    "252c59d9b9aa4aa9b64d371d39a82574": [
        "def solution():\n    num_people = 5\n    num_games = num_people - 1  # In a knockout tournament, each game eliminates one person.\n\n    return num_games\n\nans = solution()"
    ],
    "51a7705457af49c88147499591a76612": [
        "def solution():\n    numbers = [19, 6, 12, 13, 21, 4, 8, 17]\n    return sum(numbers)\n\nans = solution()"
    ],
    "1383ca4e525041c99d8fa68660917e37": [
        "def solution():\n    ans = 8 + 10 - 1\n    return ans\n\nans = solution()"
    ],
    "399908c2f1ad4ee9a7c420afd356fe12": [
        "from sympy import factorint\n\ndef solution():\n    factors = factorint(2016)\n    ages = [2]*factors[2] + [3]*factors[3] + [7]*factors[7]\n    \n    # Since all children must have different ages and be under 10\n    # We need to combine factors to form ages\n    # The only way is to have ages of 8, 3, 7, and 1,\n    # since 2 * 2 * 2 = 8 and we already have 3 and 7 as prime factors\n    ages = [8] + ages[3:]\n    \n    sum_of_ages = sum(ages)\n    \n    return sum_of_ages\n\nans = solution()"
    ],
    "33067bcb25344c1d903a52e71d15db47": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables for the number of marbles each person has after the exchanges\n    anna, betsy, charlene = symbols('anna betsy charlene')\n\n    # Equation 1: Total number of marbles after the exchanges\n    equation1 = Eq(anna + betsy + charlene, 168)\n\n    # Equation 2: The ratio after exchanges\n    equation2 = Eq(anna/betsy, 2/5)\n    equation3 = Eq(betsy/charlene, 5/7)\n    \n    # Equation 4: Charlano gave 15 marbles to Betsy\n    equation4 = Eq(charlene - 15, 7/14 * (anna + betsy + charlene - 15 - 8))\n\n    # Equation 5: Betsy gave 8 marbles to Anna\n    equation5 = Eq(betsy - 15 + 8, 5/14 * (anna + betsy + charlene - 15 - 8))\n\n    # Solve the equations to find the initial number of marbles Betsy had (before giving 8 to Anna and receiving 15 from Charlene)\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (anna, betsy, charlene))\n\n    # Betsy initial = betsy after exchanges + 8 - 15\n    initial_betsy = solutions[betsy] + 8 - 15\n\n    return initial_betsy\n\nans = solution()"
    ],
    "1576b6692de34a408952ede9da9ad5ba": [
        "def solution():\n    front = 7\n    back = 4\n    left = 3\n    right = 7\n\n    total_rows = front + back - 1\n    total_columns = left + right - 1\n\n    total_students = total_rows * total_columns\n\n    return total_students\n\nans = solution()"
    ],
    "22303a6e166b42b9a7f52651f42185f7": [
        "def solution():\n    past_combined_age = 10  # combined age four years ago\n    past_years = 4\n    future_years = 2\n\n    # As each year passes, each dog ages a year, so the combined age increases by 2 each year\n    current_combined_age = past_combined_age + (past_years * 2)\n    future_combined_age = current_combined_age + (future_years * 2)\n\n    return future_combined_age\n\nans = solution()"
    ],
    "06699a3607d9471db8f9ba87968896ad": [
        "def solution():\n    ans = 3.5 * (4/5) + 5.5 * (80/100) + 0.8\n    return ans\n\nans = solution()"
    ],
    "f58334bfc17f4a5ba758430811171cb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ten_p = symbols('ten_p')\n\n    twenty_p = 2 * ten_p\n    five_p = ten_p / 2\n\n    total_value = Eq(5 * five_p + 10 * ten_p + 20 * twenty_p, 1575)\n\n    solutions = solve(total_value, ten_p)\n\n    num_twenty_p = int(solutions[0] * 2)\n\n    return num_twenty_p\n\nans = solution()"
    ],
    "9ee836eb0a204a248346cf0a5a814237": [
        "def solution():\n    # Four years ago, the combined age was 10 years.\n    combined_age_4_years_ago = 10\n    \n    # Each year, each dog gets a year older, so for 2 dogs together, their combined age increases by 2 each year.\n    # Four years have passed and 2 more years will pass, for a total of 4 + 2 = 6 years.\n    years_passed = 6\n\n    # Now we calculate the combined age in two years time, by adding the years passed to their age four years ago.\n    combined_age_in_2_years = combined_age_4_years_ago + (2 * years_passed)\n\n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "3c267ac100df422598b3c04374b84cda": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Each boy has as many sisters as brothers, which means:\n    # boys - 1 = girls\n    equation1 = Eq(boys - 1, girls)\n\n    # Each girl has only half as many sisters as brothers, which means\n    # girls -1 = 1/2 * (boys)\n    equation2 = Eq(girls - 1, 1/2 * boys)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    ans = solutions[boys] + solutions[girls]  # Total number of children is boys + girls\n    return ans\n\nans = solution()"
    ],
    "fffededa84664c688f626145cc4d0859": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    \n    # First 30 minutes distance\n    distance_first_30 = (x / 2) * (30 / 60)\n    # Second 30 minutes distance\n    distance_second_30 = ((x - 20) / 2) * (30 / 60)\n    # Last 30 minutes distance\n    distance_last_30 = ((x + 10) / 2) * (30 / 60)\n    \n    # Total distance\n    total_distance = distance_first_30 + distance_second_30 + distance_last_30\n    \n    # Equation for total distance\n    equation = Eq(total_distance, 70)\n    \n    # Solve for x\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "98507f7a1ab04ff5987283dcfdf7b586": [
        "def solution():\n    remaining_fraction = 1 - (3 / 5)\n    remaining_grams = 60\n    original_mass = remaining_grams / remaining_fraction\n    return original_mass\n\nans = solution()"
    ],
    "645e2eb6b0834d9c99a6e7716f19be7a": [
        "def solution():\n    ans = 29 + 6 * (40 - 28) / (34 - 22)\n    return ans\n\nans = solution()"
    ],
    "c7ffcb7a1eca4535a488e6da6a9364f7": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime.strptime(\"15/5/2023\", \"%d/%m/%Y\")\n    duration = timedelta(weeks=3)\n    end_date = start_date + duration\n\n    return end_date.strftime(\"%d/%m/%Y\")\n\nans = solution()"
    ],
    "2c96bab18bda4f58822aca3d954a2306": [
        "def solution():\n    first_term = 5\n    last_term = 131\n    difference = 6\n\n    total_students = ((last_term - first_term) // difference) + 1\n\n    return total_students\n\nans = solution()"
    ],
    "db4d028578d9467fa3efdfc0289ceb82": [
        "def solution():\n    sally = 8\n    kelvin = sally + 12\n    ivan = 2 * kelvin\n    return ivan\n\nans = solution()"
    ],
    "c92aa76e3e324a49ad94e03580521716": [
        "def solution():\n    decimal_number = 96\n    base = 6\n    if decimal_number == 0:\n        return '0'\n    base_six_number = ''\n    while decimal_number > 0:\n        remainder = decimal_number % base\n        base_six_number = str(remainder) + base_six_number\n        decimal_number //= base\n    return base_six_number\n\nans = solution()"
    ],
    "ae40978145f94c6f9996c9e966b8c97d": [
        "def solution():\n    total_cost_without_tip = 6 * 5.50\n    tip = total_cost_without_tip * 0.10\n    total_cost_with_tip = total_cost_without_tip + tip\n    change = 50 - total_cost_with_tip\n    return round(change, 2)  # round the result to 2 decimal places\n\nans = solution()"
    ],
    "f8ccc3d1db7a464b831820a4451322ff": [
        "def solution():\n    ans = 60  # There are 60 seconds in a minute\n    return ans\n\nans = solution()"
    ],
    "a64f47165f93431bb686e430ed75deeb": [
        "def solution():\n    total_distance = 10\n    day_distance = 4\n    night_distance = 2\n    distance_per_day = day_distance - night_distance\n    full_days = (total_distance - day_distance) // distance_per_day\n    \n    if (total_distance - day_distance) % distance_per_day != 0:\n        full_days += 1\n    \n    ans = full_days + 1\n    return ans\n\nans = solution()"
    ],
    "93da49e2550546f48b47327ef5577cd1": [
        "def solution():\n    # instill the condition that each child must get at least one apple\n    remaining_apples = 27 - 5\n    # since each child gets a different number of apples\n    # we can start by giving the first child one more apple than the minimum, \n    # the second child two more than the minimum, until we reach the child with the most apples\n    # If the child with the most apples gets 'x' apples, we can say:\n    # x + (x-1) + (x-2) + (x-3) + (x-4) <= remaining_apples\n    # 5x - (1+2+3+4) <= remaining_apples\n    # 5x - 10 <= remaining_apples\n    # x <= (remaining_apples + 10)/5 \n\n    max_apples_for_the_greedy_child = (remaining_apples + 10) // 5 \n    # integer division is used since we are dealing with a discrete number of apples\n\n    return max_apples_for_the_greedy_child\n\nans = solution()"
    ],
    "0588ff4a3789420685f1bed8b5f2e9be": [
        "def solution():\n    # Jason must leave Belinda in a situation where Jason can win no matter what Belinda does.\n    # To do this, Jason wants to get to a situation where 25 marbles are left after his turn.\n    # Then, no matter what Belinda does (taking 1, 2, or 3 marbles),\n    # Jason can take 4 minus the amount Belinda took, leaving again a multiple of 4 for her.\n    # The loop of 4 marbles can continue until Belinda is forced to take the last marble.\n    # Therefore, Jason must take one marble out on his first turn to leave 25 marbles.\n\n    marbles_to_take = 26 % (3 + 1)  # Using 3+1 because there can be 1-3 marbles taken out each turn\n    if marbles_to_take == 0:\n        marbles_to_take = 1  # To ensure winning, Jason takes 1 marble if the remainder is 0\n    return marbles_to_take\n\nans = solution()"
    ],
    "29a8a89ddd5447e8affdeb65b7d6869b": [
        "def solution():\n    total = 0\n    n = 1\n    while True:\n        total += 5 * n\n        if total % 2013 == 0:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "54efb1f9d0924e1d8fa4596005959b2a": [
        "def solution():\n    ans = (6 / 7) * 42\n    return ans\n\nans = solution()"
    ],
    "caf23672c0554b8295549b932bf0889a": [
        "def solution():\n    return 953 + 1065\n\nans = solution()"
    ],
    "cd9ad5be90634b298514a198bfb61625": [
        "def solution():\n    solutions = []\n    for x1 in range(1, 25 - 6):\n        for x2 in range(x1 + 1, 25 - 5):\n            for x3 in range(x2 + 1, 25 - 4):\n                for x4 in range(x3 + 1, 25 - 3):\n                    for x5 in range(x4 + 1, 25 - 2):\n                        for x6 in range(x5 + 1, 25 - 1):\n                            for x7 in range(x6 + 1, 25):\n                                if x1 + x2 + x3 + x4 + x5 + x6 + x7 == 25:\n                                    solutions.append((x1, x2, x3, x4, x5, x6, x7))\n    return solutions\n\nans = solution()"
    ],
    "633dae2f3a3e45cb9daaa00438a515d7": [
        "def solution():\n    # Since the alcoholic goes to three fixed bars at random,\n    # the probability of being at any one of the bars is 1/3.\n    \n    # If the alcoholic is not at two of the bars, \n    # the probability of being at the third bar is 1 - P(not at first bar) * P(not at second bar | not at first bar)\n    \n    # Probability not at the first bar is 2/3\n    # Given the alcoholic is not at the first bar, \n    # the probability of not being at the second bar is 1/2\n    # Thus, the probability of being at the third bar is 1 - (2/3 * 1/2)\n    \n    return 1 - (2/3 * 1/2)\n\n\nans = solution()"
    ],
    "8e243ca0416749c4ab65f908ade8388d": [
        "def solution():\n    # From the given problem, we know that 3/7 of the number is 18.\n    # We find the whole number first.\n    base_number = (18 * 7) / 3\n\n    # Now, we find 5/6 of the base number.\n    result = (5 / 6) * base_number\n\n    return result\n\nans = solution()"
    ],
    "efa05afe196f4afa960648690f074c1f": [
        "def solution():\n    # Let's assume the amount of grass grown each week is G and \n    # the amount of grass eaten by one cow in a week is E.\n    # The total grass grown in 12 weeks is 12G.\n    # The total amount eaten by 120 cows in 12 weeks is 120 * 12 * E = 1440E.\n    # So, we can say that 12G = 1440E or G = 120E.\n    \n    # Similarly, for 150 cows in 8 weeks:\n    # The total grass grown in 8 weeks is 8G.\n    # The total amount eaten by 150 cows in 8 weeks is 150 * 8 * E = 1200E.\n    # So, we have 8G = 1200E or G = 150E.\n    \n    # By the equations G = 120E and G = 150E, we can conclude that E must be zero for this to be true, \n    # which indicates a mistake in the understanding of the problem or the problem statement itself.\n    # However, considering these are the conditions provided, if E is indeed zero, any number of cows \n    # could be sustained for any number of weeks, because they would not be consuming any grass.\n    \n    # Since we are asked to provide a solution, let's assume the intended problem states that \n    # the pasture grows at a certain rate that allows it to sustain a specific number of cows for 6 weeks.\n    # Under this assumption, G can be any positive value, and E would also have to be any value that \n    # satisfies the equation, leading to the conclusion that an infinite number of cows could be sustained \n    # if they do not consume any grass, which is not a practically meaningful situation.\n    \n    # To provide a meaningful answer, let's reframe the problem to determine the growth rate of the grass\n    # and the consumption rate of the cows, and find out how many cows can be sustained for 6 weeks.\n    # For this corrected problem, we can equate the total grass grown to the total grass consumed:\n    # 12G = 120 * 12 * E (1)\n    # 8G = 150 * 8 * E (2)\n    # Since G = 120E from (1), we can substitute this into (2):\n    # 8 * 120E = 150 * 8 * E\n    # Simplify to find G in terms of E, then solve for the number of cows (C) that can be sustained for 6 weeks:\n    # 6G = C * 6 * E --> C = G / E\n    # G / E = 120 from (1), so C = 120.\n    # This means that the pasture can sustain 120 cows for 6 weeks.\n\n    return 120\n\nans = solution()"
    ],
    "32f18491c74041d8817a310362816c55": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime(2023, 5, 15)\n    duration = timedelta(weeks=3)\n    end_date = start_date + duration\n    return end_date.strftime('%d %b %Y')\n\nans = solution()"
    ],
    "e86fd8332fe14c18baddfef75e03ff27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencil, marker = symbols('pencil marker')\n\n    equation1 = Eq(3 * pencil + 2 * marker, 13)\n    equation2 = Eq(2 * pencil + 3 * marker, 12)\n\n    solutions = solve((equation1, equation2), (pencil, marker))\n\n    total_cost = solutions[pencil] * 7 + solutions[marker] * 7\n\n    return total_cost\n\nans = solution()"
    ],
    "b3dcd19bf9ef49f6abe5c02758449b1a": [
        "def solution():\n    return 98 + 6\n\nans = solution()"
    ],
    "662004bd60264ac5b02db70eebf6c2af": [
        "def solution():\n    return 3200 - 1476\n\nans = solution()"
    ],
    "09a3a1d022104884aa725a719c560f60": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let v be the number of volunteers and t be the total number of trees.\n    v, t = symbols('v t')\n\n    # From the problem we have the following two equations:\n    equation1 = Eq(v * 4 + 5, t)  # Each volunteer plants 4 trees and 5 are left.\n    equation2 = Eq(v * 7, t + 7)  # If each would plant 7 trees one would have none, so total trees are 7 more.\n\n    # Solve the system of equations for v and t\n    solutions = solve((equation1, equation2), (v, t))\n\n    return solutions[v], solutions[t]\n\nans = solution()"
    ],
    "aecd8ddb67d4485295695f4d5b6f8788": [
        "def solution():\n    # Let the initial number of stickers in Bag A be x\n    # Then the initial number of stickers in Bag B would be 270 - x\n    # After moving 56 stickers, Bag A has x - 56 stickers and Bag B has (270 - x) + 56\n    # The ratio of the number of stickers in Bag B to Bag A is 3:2 after moving the stickers\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(((270 - x) + 56) / (x - 56), 3/2)\n\n    # We solve for x\n    solution_x = solve(equation, x)\n    \n    return solution_x[0]\n\nans = solution()"
    ],
    "aa2c433bd04243828094f4f0da449459": [
        "def solution():\n    # Initialize `total_students` to track the total number of students.\n    total_students = 0\n    \n    # The difference in the number of boys and girls.\n    extra_boys = 55\n    \n    # Iterate over possible square array sizes, considering the relation between boys and girls.\n    # Since the number of boys and girls differ by 55, we start from `layer = 2`, as layer=1 would be all boys.\n    for layer in range(2, 100): # Assuming a practical upper limit for the school array size.\n        # Calculate total students if arranged in current square layer arrangement.\n        # Boys are on the first and last row and column, girls in between.\n        # Total boys in the outermost layer is 4*(layer-1); we subtract 4 for overlap at corners.\n        boys = 4 * (layer - 1)\n        # The inner square has (layer-2) rows & columns, and boys are placed alternatively.\n        girls = ((layer - 2) ** 2 - boys) if layer > 2 else 0\n        \n        # Calculate the difference between boys and girls for the current layer configuration.\n        diff = boys - girls\n        \n        # If the difference matches `extra_boys`, then we have a valid configuration.\n        if diff == extra_boys:\n            # Calculate total number of students (both boys and girls).\n            total_students = boys + girls\n            break\n    \n    return total_students\n\nans = solution()"
    ],
    "6681c9a39b3645079a46a6daf29a4854": [
        "def solution():\n    # Given proportion: 10/x = 14/21\n    # To solve for x, we can cross multiply and divide\n    # 10 * 21 = 14 * x\n    # x = (10 * 21) / 14\n\n    x = (10 * 21) / 14\n    return x\n\nans = solution()"
    ],
    "5b97b704f01a431fbcd061cfe8853201": [
        "def solution():\n    difference = 6\n    last_term = 41\n    next_term = last_term + difference\n    return next_term\n\nans = solution()"
    ],
    "54e546b3285e46baa909a946531986b5": [
        "def solution():\n    children = 74\n    bars_per_packet = 8\n\n    packets_needed = -(-children // bars_per_packet)\n\n    return packets_needed\n\nans = solution()"
    ],
    "7d4469e90d7e44938c44082c04573041": [
        "def solution():\n    return 5 / 100 * 180\n\nans = solution()"
    ],
    "517f83e2071941a890e20a4e3126cc19": [
        "def solution():\n    n = 2\n    while True:\n        sum_of_factors = sum(i for i in range(1, n) if n % i == 0)\n        if sum_of_factors == n:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "2d6942e7e2a049b0875a5daaa2d8662f": [
        "def solution():\n    s = 0\n    for i in range(15, 7, -1):\n        if i % 2 == 0:\n            s -= i\n        else:\n            s += i\n    return s\n\nans = solution()"
    ],
    "31d560632aeb4f189ed15394a994b8ea": [
        "def solution():\n    term_10th = 31\n    difference = 3\n    num_terms = 10\n\n    first_term = term_10th - difference * (num_terms - 1)\n\n    return first_term\n\nans = solution()"
    ],
    "6fa5dd836ec04fd1867acfcafb149b3b": [
        "def solution():\n    total_cakes = 80\n    cakes_per_box = 5\n    \n    boxes_needed = -(-total_cakes // cakes_per_box)\n    \n    return boxes_needed\n\nans = solution()"
    ],
    "09f6f0f9df4e4407bb6d0d93d12f86f3": [
        "def solution():\n    total_sweets = 30\n    sweets_for_sister = 6\n    num_friends = 6\n\n    sweets_left = total_sweets - sweets_for_sister\n    sweets_per_friend = sweets_left // num_friends\n\n    return sweets_per_friend\n\nans = solution()"
    ],
    "61cacff2e135446188147ef9331416bf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_money = symbols('total_money')\n\n    # Irene spent 1/4 of her money on a book\n    book_cost = (1/4) * total_money\n\n    # And 2/7 of her money on a bag\n    bag_cost = (2/7) * total_money\n\n    # Equation representing that both cost $225\n    equation = Eq(book_cost + bag_cost, 225)\n\n    # Solving the equation for the total money\n    solution = solve(equation, total_money)\n\n    return solution[0]\n\nans = solution()"
    ],
    "199f98404707430a8c113444383853f4": [
        "def solution():\n    sum_n = 30\n    max_terms = 0\n    while sum_n > 0:\n        max_terms += 1\n        sum_n -= max_terms\n    return max_terms\n\nans = solution()"
    ],
    "48c4af399af1492c8496fdcbe4b79ce4": [
        "def solution():\n    # If the dealer picks up 9 cards from each of the three colours with the least number of cards\n    # (4, 8, and 12), he could still end up without 10 cards of the same colour.\n    # 4 colours * 9 cards per colour + 1 card = 37 cards picked without guarantee.\n    # After picking one more card, he will definitely have at least 10 cards of one colour.\n    \n    min_cards_without_guarantee = 9 * 3 + 8\n    ans = min_cards_without_guarantee + 1\n    \n    return ans\n\nans = solution()"
    ],
    "d0aafdcf41bd41af9f7703e35d618f89": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lovelle, makayla = symbols('lovelle makayla')\n\n    # Lovelle and Makayla had $3998 muffins altogether.\n    equation1 = Eq(lovelle + makayla, 3998)\n    # After Lovelle sold $462 muffins, she had lovelle - 462 left.\n    # After Makayla sold 2/5 of her muffins, she had 3/5 * makayla left.\n    # They both have the same number of muffins left.\n    equation2 = Eq(lovelle - 462, 3/5 * makayla)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (lovelle, makayla))\n\n    return solutions[lovelle]\n\nans = solution()"
    ],
    "7334697b756d4565a7eb61beac61cfb8": [
        "def solution():\n    num_daffodils = 8\n    gap = 1.1\n    length = (num_daffodils - 1) * gap\n    return length\n\nans = solution()"
    ],
    "e2768d76048543a996b33863b0237436": [
        "def solution():\n    return 15 * 5 / 3\n\nans = solution()"
    ],
    "e139050ca60c4fb8ae683ddbe39fd88c": [
        "def solution():\n    boxes = 1450\n    books_per_box = 258\n    total_books = boxes * books_per_box\n    return total_books\n\nans = solution()"
    ],
    "e79fe3bad58843cb9ba29a747eecfe37": [
        "def solution():\n    count = 0\n    for x1 in range(1, 9):\n        for x2 in range(x1+1, 9):  # x2 must be greater than x1 to avoid identical counts\n            x3 = 9 - x1 - x2       # x3 is determined by x1 and x2\n            if x3 > x2:            # x3 must be greater than x2, and they must all add up to 9\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e9d1fadd4f7340399f406e12d58bc690": [
        "def solution():\n    total_juice = 150\n    # Let's assume Jane drinks x ml of juice, then Alex drinks 1.5x ml of juice.\n    # Together they drink all the juice: x + 1.5x = total_juice\n    # This simplifies to 2.5x = total_juice\n    # So, x = total_juice / 2.5 and Alex drinks 1.5 * x\n    x = total_juice / 2.5\n    alex_drinks = 1.5 * x\n    return alex_drinks\n\nans = solution()"
    ],
    "f3c45f5f9fe141138b4274ad08514257": [
        "def solution():\n    distance = 48\n    speed = 8\n\n    minutes_taken = distance / speed\n    \n    return int(minutes_taken)\n\nans = solution()"
    ],
    "5d2b6883175743eda687b1bb058d4c89": [
        "from math import comb\n\ndef solution():\n    total_girls = 5\n    total_boys = 7\n    group_size = 4\n\n    # Total ways to choose groups of 4 from 12 students\n    total_ways = comb(total_girls + total_boys, group_size)\n\n    # Ways to choose groups of 4 with only girls\n    only_girls_ways = comb(total_girls, group_size)\n\n    # Ways to form a group with at least one boy\n    at_least_one_boy_ways = total_ways - only_girls_ways\n\n    return at_least_one_boy_ways\n\nans = solution()"
    ],
    "81ab24eed7cd4f2296d627d76b1e2ec2": [
        "def solution():\n    return (1/2) * (16 / (1/4))\n\nans = solution()"
    ],
    "d349a45227c5469c8d98a746d07c5555": [
        "def solution():\n    pears = 18\n    strawberries = 30\n    chocolates = 18\n    friends = 6\n\n    total_fruits = pears + strawberries\n    fruits_per_friend = total_fruits // friends\n\n    return fruits_per_friend\n\nans = solution()"
    ],
    "0116cb5ffe3f43828ce4925528badb2e": [
        "def solution():\n    # 2/5 of the remaining money was spent on a bag, which cost 60\n    remaining_money_after_book = 60 / (2/5)\n    \n    # Remaining money after book is 3/4 of the original money since 1/4 was spent on a book\n    original_money = remaining_money_after_book / (3/4)\n    \n    # Return the original amount of money\n    return original_money\n\nans = solution()"
    ],
    "b50f8ca3f787492f9f27c716da3258de": [
        "def solution():\n    x = (15 * 5) / 3\n    return x\n\nans = solution()"
    ],
    "30aa83b2ee3f4ead83de91a226189785": [
        "def solution():\n    x = 5**2\n    y = 6\n    return x * y\n\nans = solution()"
    ],
    "3ef9ddcfb78d4c79b8835fcd29559ed7": [
        "def solution():\n    pages = 0\n    digits_used = 0\n    \n    while digits_used < 157:\n        pages += 1\n        digits_used += len(str(pages))\n        \n    return pages - 1 if digits_used > 157 else pages\n\nans = solution()"
    ],
    "ef48001475784ca48f23a6a14697b062": [
        "def solution():\n    ans = (70 / 7 - 7) * 13\n    return ans\n\nans = solution()"
    ],
    "6cc6f9f62af04d3f8eb7d700d44ac715": [
        "def solution():\n    return (70 / 7 - 7) * 13\n\nans = solution()"
    ],
    "41e25daefa484ddabc8596daad89dee5": [
        "def solution():\n    # Number of intervals between peach trees is the number of trees minus 1\n    intervals_between_peach_trees = 41 - 1\n    # Calculate the total length of the road using the distance between trees\n    total_length_of_road = intervals_between_peach_trees * 3\n    # Calculate number of intervals between lamp posts by dividing the total length by distance between lamp posts\n    intervals_between_lamp_posts = total_length_of_road // 8\n    # Calculate the number of lamp posts by adding 1 to the number of intervals\n    number_of_lamp_posts = intervals_between_lamp_posts + 1 \n\n    return number_of_lamp_posts\n\nans = solution()"
    ],
    "b1362edc59474e289cdb2ea885cdd477": [
        "def solution():\n    for digit1 in range(10):\n        for digit2 in range(10):\n            price = int(f\"{digit1}679{digit2}\")\n            if price % 72 == 0:\n                ans = price // 72\n                return ans\n\nans = solution()"
    ],
    "501bce5f0d5c41eb96c1a803d85678b4": [
        "def solution():\n    train_length = 360  # length of the train in meters\n    speed = 40  # speed in meters per second\n\n    # Time taken to pass the pole can be calculated using the formula time = distance / speed\n    time_to_pass = train_length / speed\n\n    return time_to_pass\n\nans = solution()"
    ],
    "65c1681a1cc943ca8fed37eafd2809bd": [
        "def solution():\n    count = 0\n    for i in range(10, 100):\n        if (i // 10 + i % 10) % 5 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "79002f093bcc4697a0f9a3929ef1d7a5": [
        "def solution():\n    return 208 // 8\n\nans = solution()"
    ],
    "1ddfd41822fc4ff5909fb0c086a9e1cc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of students in class B\n    x = symbols('x')\n    \n    # Define the equations based on the problem statement\n    # Equation for class A: 4 * (2x) + 20 (since class A has twice the number of students)\n    # Equation for class B: 6 * x - 16\n    # Equate both expressions to the total number of candies\n    eq = Eq(4 * (2 * x) + 20, 6 * x - 16)\n\n    # Solve the equation to find the number of students in class B\n    students_class_B = solve(eq, x)[0]\n\n    # Calculate the total number of candies using the number of students in class B\n    total_candies = 6 * students_class_B - 16\n\n    return total_candies\n\nans = solution()"
    ],
    "44295cc103b24b67af16130f5db0f090": [
        "def solution():\n    initial_savings = 24\n    spent_on_dvd = initial_savings / 3\n    remaining_after_dvd = initial_savings - spent_on_dvd\n    spent_on_book = remaining_after_dvd * 0.25\n    remaining_after_book = remaining_after_dvd - spent_on_book\n\n    return remaining_after_book\n\nans = solution()"
    ],
    "a22a990372e6459ab93701b27bbe1333": [
        "def solution():\n    initial_rabbits = 32\n    years = 3\n    for year in range(years):\n        initial_rabbits = 3 * initial_rabbits - (initial_rabbits // 2)\n    return initial_rabbits\n\nans = solution()"
    ],
    "eb83c6f6832f41feaed4f34edd98a1ca": [
        "def solution():\n    total_distance = 1 + 1\n    time_60mph = 1 / 60\n    time_30mph = 1 / 30\n\n    total_time = time_60mph + time_30mph\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "600b0d1413ee4c7f9c8323852cd824de": [
        "def solution():\n    time_for_first_mile = 1 / 60 # time to travel 1 mile at 60 mph (in hours)\n    time_for_second_mile = 1 / 30 # time to travel 1 mile at 30 mph (in hours)\n    total_time = time_for_first_mile + time_for_second_mile\n    total_distance = 2 # total distance traveled in miles\n\n    # Average speed is total distance divided by total time\n    average_speed = total_distance / total_time\n    \n    return average_speed\n\nans = solution()"
    ],
    "a3995edc2a1a43daa636491bd11f901f": [
        "def solution():\n    amount_per_wash = 1.40\n    goal_amount = 12\n    \n    num_washes = goal_amount // amount_per_wash\n    if goal_amount % amount_per_wash == 0:\n        num_washes += 1\n    \n    return int(num_washes)\n\nans = solution()"
    ],
    "2450c7184dc1494db29badfda3df6350": [
        "def solution():\n    count = 0\n    for number in range(41):\n        if '2' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "64dfb01da35643c0b9de911c9ea05789": [
        "def solution():\n    first_day = 2\n    day = 4\n    candies_eaten = first_day * (2 ** (day - 1))\n    return candies_eaten\n\nans = solution()"
    ],
    "34416f7c5b99456f877168a0fd62da99": [
        "def solution():\n    for num in range(121, 136):\n        if num % 4 == 0 and num % 6 == 0:\n            return num\n\nans = solution()"
    ],
    "01a700f22d8440ff98528ae95438b080": [
        "def solution():\n    ans = 901 - 582\n    return ans\n\nans = solution()"
    ],
    "7a629088064049ac9991a8c0a6a39bc2": [
        "def solution():\n    average_daily_earnings = 70\n    num_work_days = 6  # From Monday to Saturday\n    total_earnings = average_daily_earnings * num_work_days\n    return total_earnings\n\nans = solution()"
    ],
    "2a9c4ac0af274c21b3b543fdc562d57c": [
        "from itertools import permutations\n\ndef solution():\n    for p, i, s in permutations(range(10), 3):\n        if p == 0:  # P cannot be 0 as it is the most significant digit in PI\n            continue\n        is_val = int(f'{i}{s}')\n        pi_val = int(f'{p}{i}')\n        if 4 * is_val == pi_val:\n            return pi_val\n\nans = solution()"
    ],
    "d93d643e886d4754abfa2f90328da9f1": [
        "def solution():\n    num_elders = 9\n    total_age = 765\n    average_age = total_age // num_elders\n    middle_age = average_age + (num_elders // 2)\n    \n    return middle_age\n\nans = solution()"
    ],
    "05067bad937e48738bea7614f9cc4676": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angle_x, angle_2x = symbols('angle_x angle_2x')\n    right_angle = 90\n\n    # Equation representing the sum of angles in a triangle\n    equation = Eq(angle_x + angle_2x + right_angle, 180)\n\n    # The relationship between the two unknown angles\n    relationship = Eq(angle_2x, 2 * angle_x)\n\n    # Solving the equations to find the value of angle_x and angle_2x\n    solutions = solve((equation, relationship), (angle_x, angle_2x))\n\n    # Return the value of the largest angle\n    return solutions[angle_2x]\n\nans = solution()"
    ],
    "875569394f454c87ba59b92ec3568007": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'n' be the natural number we want to find, and 'a' the remainder when dividing 290.\n    n, a = symbols('n a', integer=True)\n\n    # The three equations according to the problem statement are as follows:\n    # 290 = n * k + a for some integer k\n    # 235 = n * m + (a + 2) for some integer m\n    # 200 = n * j + (a + 5) for some integer j\n    # This translates to the equations:\n    # 290 - a = 0 (mod n)\n    # 233 - a = 0 (mod n)\n    # 195 - a = 0 (mod n)\n\n    # Set up the equation system\n    equations = [\n        Eq(290 - a, n * (290 // n)),\n        Eq(233 - a, n * (233 // n)),\n        Eq(195 - a, n * (195 // n))\n    ]\n\n    # Solve the system of equations\n    solutions = solve(equations, (n, a))\n\n    # Filter the solutions for natural numbers greater than 1\n    natural_number = [sol[n] for sol in solutions if sol[n] > 1]\n    \n    # Since we expect a single solution\n    return natural_number[0]\n\nans = solution()"
    ],
    "5e8d313c1541406a95c53bcb9f149496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the necklace and earring costs\n    necklace, earring = symbols('necklace earring')\n\n    # Set up the equations based on the given information\n    equation1 = Eq(9 * necklace + 5 * earring, 1440)\n    equation2 = Eq(3 * necklace + 1 * earring, 438)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (necklace, earring))\n\n    # Calculate the total cost of 1 necklace and 1 earring\n    total_cost = solutions[necklace] + solutions[earring]\n\n    return total_cost\n\nans = solution()"
    ],
    "91a598b887f6483a86d977ea27f5c731": [
        "def solution():\n    total_sunshine_mon_to_sat = 3 * 6\n    sunshine_on_sunday = 10\n    total_sunshine_for_week = total_sunshine_mon_to_sat + sunshine_on_sunday\n    average_sunshine_per_day = total_sunshine_for_week / 7\n    return average_sunshine_per_day\n\nans = solution()"
    ],
    "d02e694f3a564aafaf5019cd2b7a9a4d": [
        "def solution():\n    boys = 120\n    girls = 80\n\n    boys_saw_movie = boys * 50 / 100\n    girls_saw_movie = girls * 60 / 100\n\n    total_saw_movie = boys_saw_movie + girls_saw_movie\n\n    return total_saw_movie\n\nans = solution()"
    ],
    "f1b82ff9340a4655b4cf7000c847b825": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    savings = symbols('savings')\n    \n    # Given that Kim gave 1/3 of her savings to her mother\n    given_to_mother = (1/3) * savings\n    \n    # The remaining after buying dresses and earrings\n    remaining = savings - 177 - 129\n    \n    # The remaining is 1/2 of what she gave her mother\n    equation = Eq(remaining, (1/2) * given_to_mother)\n    \n    # Solving the equation to find the savings\n    solutions = solve(equation, savings)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "1edc3edaab9048beaf044a5eee61b184": [
        "def solution():\n    walking_speed = 75 # m/min\n    running_speed = 2 * walking_speed # m/min\n\n    # Time taken to walk to school\n    time_walk_to_school = 24 # min\n    # Total distance to school\n    distance_to_school = walking_speed * time_walk_to_school\n\n    # Time taken to cover half the journey by walking\n    time_half_walk = (distance_to_school / 2) / walking_speed\n    # Time taken to cover the other half of the journey by running\n    time_half_run = (distance_to_school / 2) / running_speed\n\n    # Total time taken to cover half the journey by walking and the other half by running\n    total_time = time_half_walk + time_half_run\n\n    return total_time\n\nans = solution()"
    ],
    "13d1dc22063b44a6bfd3c253184381b8": [
        "def solution():\n    boys = 120\n    girls = 80\n    boys_who_saw_movie = boys * 0.50\n    girls_who_saw_movie = girls * 0.60\n    total_students_who_saw_movie = boys_who_saw_movie + girls_who_saw_movie\n    return total_students_who_saw_movie\n\nans = solution()"
    ],
    "909e9ffd178a4a82a7e2ba972d438c99": [
        "def solution():\n    total_length = 385\n    cut_length = 15\n\n    # Using divmod to get the quotient and remainder at once\n    full_lengths, leftover = divmod(total_length, cut_length)\n\n    return leftover\n\nans = solution()"
    ],
    "4af0a33072c147caa27c6f6519d84e3f": [
        "def solution():\n    decimal = 1 + 3/100\n    return decimal\n\nans = solution()"
    ],
    "3676c87ead1a489f9e921d0d75aa36ef": [
        "def solution():\n    teams = 8\n    matches = teams * (teams - 1) // 2\n    return matches\n\nans = solution()"
    ],
    "3f5d80aa10384e98a458b98fad0305a2": [
        "def solution():\n    # The problem is equivalent to finding the number of partitions of 6\n    # into at most 3 parts. This is a classic partition problem which\n    # can be solved using the stars and bars theorem. In this case, we have\n    # 6 apples (stars) and we need 2 bars to create 3 identical sections. \n    # The formula for this is (n + k - 1) choose (k - 1), where\n    # n is the number of items to put into bins, and k is the number of bins.\n    # However, since the bins are identical, we have to subtract the cases\n    # where all items are in one bin which is just 1 way for each bin.\n    # Therefore, total ways = (6+3-1)C(3-1) - 3\n    # Here n = 6, k = 3 and 3 is subtracted for the cases where all apples go into 1 basket.\n    from math import comb\n    n, k = 6, 3\n    total_ways = comb(n + k - 1, k - 1) - k\n    return total_ways\n\nans = solution()"
    ],
    "fcb6d1b5111d48d9a3ae25817b7ba302": [
        "def solution():\n    possible_values = []\n    for N in range(1, 2018):\n        if 2018 % N == 11:\n            possible_values.append(N)\n    return sum(possible_values)\n\nans = solution()"
    ],
    "1a428efca7154d45b9f95d2f7093cbe7": [
        "def solution():\n    skirts_per_worker = 6\n    total_skirts = sum([(skirts_per_worker * (1 + day)) for day in range(9)])\n    return total_skirts\n\nans = solution()"
    ],
    "494681f041b745a591be1d725abc3a02": [
        "def solution():\n    for chickens in range(9):\n        cows = 8 - chickens\n        if (chickens * 2 + cows * 4) == 26:\n            return chickens\n\nans = solution()"
    ],
    "715019fd42ea4f559b0924cbe53893bc": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "0a9deb608fe24aa6b6430859835ac8d7": [
        "def solution():\n    sequence = range(11, 61, 3)  # range(start, stop, step)\n    within_range = [num for num in sequence if 30 <= num <= 60]\n    return within_range\n\nans = solution()"
    ],
    "9e5271cce46840fc8756f7236f3fd9b2": [
        "def solution():\n    cost_per_person = 253 / 11\n    total_cost_for_12_people = cost_per_person * 12\n    return total_cost_for_12_people\n\nans = solution()"
    ],
    "f1c6e0272fae419183c3fb080070f9ad": [
        "def solution():\n    sequence = ''  # Store the concatenated numbers as a string\n    num = 1\n\n    while len(sequence) < 2023:\n        sequence += str(num)\n        num += 1\n\n    # Find the 2023rd digit in the sequence\n    ans = int(sequence[2022])\n\n    return ans\n\nans = solution()"
    ],
    "6885b2a6b6b54f2d8315a175fa94e91a": [
        "def solution():\n    total_sweets = 138\n    min_sweets_per_student = 5\n\n    # Since at least one student must get 5 sweets, \n    # we check the highest number which is a divisor of 138 \n    # starting from 5 sweets per student and going up.\n    for class_size in range(total_sweets // min_sweets_per_student, 0, -1):\n        if total_sweets % class_size == 0:\n            return class_size  # Found the class size\n    return None  # No solution found\n\nans = solution()"
    ],
    "13dd71975a16405c87357c875ed6c03c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(1 * apple + 1 * banana, 0.48)\n\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    cost_of_5_bananas = 5 * solutions[banana]\n\n    return cost_of_5_bananas\n\nans = solution()"
    ],
    "c098a360c7f6486099fd66b709ca7e5a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    # Calculate the tax for the first $50,000\n    first_50k_tax = 0.08 * 50000\n\n    # Total income tax paid\n    total_tax_paid = 15000\n\n    # Tax for the amount above $50,000\n    remaining_income = 150000 - 50000\n    remaining_tax = (0.08 + T) * remaining_income\n\n    # Equation for the total tax paid\n    tax_equation = Eq(first_50k_tax + remaining_tax, total_tax_paid)\n\n    # Solve for T\n    solution_T = solve(tax_equation, T)\n\n    return float(solution_T[0])\n\nans = solution()"
    ],
    "ae271ee454574a6f9c07ffcb062507f5": [
        "def solution():\n    n = 66 / (3 * 11)\n    return n\n\nans = solution()"
    ],
    "a024f762eee54f819b5a5c703275d15c": [
        "def solution():\n    total_boys = 432\n    days_in_january = 31\n    \n    ans = (total_boys // days_in_january) + (total_boys % days_in_january > 0)\n    \n    return ans\n\nans = solution()"
    ],
    "6d1e50acecb5443699ff1409bbab9ab1": [
        "def solution():\n    total_questions = 25\n    unanswered = 1\n    total_score = 66\n    correct_score = 4\n    incorrect_score = -2\n    answered_questions = total_questions - unanswered\n\n    # Let x be the number of correct answers\n    # Then answered_questions - x will be the number of incorrect answers\n    # Hence the equation is: correct_score * x + incorrect_score * (answered_questions - x) = total_score\n    # Simplifying,\n    # 4x - 2(answered_questions - x) = 66\n    # 4x - 2answered_questions + 2x = 66\n    # 6x = 66 + 2answered_questions\n\n    # Solve for x:\n    x = (total_score + incorrect_score * answered_questions) / (correct_score + abs(incorrect_score))\n    return x\n\nans = solution()"
    ],
    "5810f2c593d14c5d83787fff4babe6f3": [
        "def solution():\n    # First digit can be either 2 or 3 (0 cannot be the first digit), 2 options\n    # Second digit can be any of the three numbers, 3 options\n    # Third digit can be any remaining two numbers, 2 options\n    ans = 2 * 3 * 2\n    return ans\n\nans = solution()"
    ],
    "eaa36f2338ce478c9ef3805f3e5db384": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of candies Rachel and Alice have\n    rachel, alice = symbols('rachel alice')\n\n    # Set up the equations based on the problem description\n    # If Rachel gives Alice 10 pieces of candy, then they would have the same number\n    equation1 = Eq(rachel - 10, alice + 10)\n\n    # If they both eat 8 pieces of candy, then Rachel has 3 times as many as Alice\n    equation2 = Eq(rachel - 8, 3 * (alice - 8))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    # Calculate the total number of candies they originally had\n    total_candies = solutions[rachel] + solutions[alice]\n\n    return total_candies\n\nans = solution()"
    ],
    "8bebcb024a134af6bd81b9505fe32657": [
        "def solution():\n    first_car_length = 6\n    other_cars_length = 4 * (31 - 1)\n    total_space_between_cars = 5 * (31 - 1) * 2\n    total_length = first_car_length + other_cars_length + total_space_between_cars\n    \n    return total_length\n\nans = solution()"
    ],
    "e1990839b31d461db3729e71325eabbd": [
        "def solution():\n    total_chocolates = 5 * 10\n    chocolates_given_away = 23\n    chocolates_left = total_chocolates - chocolates_given_away\n    return chocolates_left\n\nans = solution()"
    ],
    "d1a178f9942d41d9a82ed3706f2e8f56": [
        "from itertools import permutations\n\ndef solution():\n    cards = ['0', '3', '5', '8']\n    count = 0\n    for perm in permutations(cards):\n        if perm[0] != '0' and int(''.join(perm)) > 5000:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "5635691adc5141a8867ba1ea8124d38e": [
        "def solution():\n    # Given values of the 7th, 8th, and 9th terms in the sequence\n    seventh_term = 105\n    eighth_term = 120\n    ninth_term = 135\n\n    # Calculate the common difference of the arithmetic sequence\n    common_difference = eighth_term - seventh_term\n\n    # Calculate the 100th term using the formula: An = A1 + (n - 1) * d\n    # where An is the nth term, A1 is the first term, d is the common difference,\n    # and n is the term number.\n    # Since we know the 7th term value and the common difference, we can find the first term (A1)\n    first_term = seventh_term - (7 - 1) * common_difference\n\n    # Now, calculate the 100th term\n    hundredth_term = first_term + (100 - 1) * common_difference\n\n    return hundredth_term\n\nans = solution()"
    ],
    "eb2770c6e3204216b75646ea3e20a071": [
        "def solution():\n    return 5272 // 4\n\nans = solution()"
    ],
    "5526c23ffd024f3697e30d23a595af55": [
        "def solution():\n    current_length = 30\n    growth_rate = 1/5\n    original_length = current_length / (1 + growth_rate)\n    return original_length\n\nans = solution()"
    ],
    "6e587e1396e4469da9fb76d1a63500a8": [
        "def solution():\n    # Ratio of Sue:Sarah:Ian is 2:3:5\n    # If Sarah received 12 sweets, her ratio is 3\n    # Total ratio is 2+3+5 = 10\n    # Sarah's share corresponds to 3 parts out of the total 10 parts\n    # Calculate total sweets by multiplying the number of sweets Sarah received by the total ratio, then divide by Sarah's ratio\n\n    sarahs_share = 12\n    total_ratio = 2 + 3 + 5\n    sarahs_ratio = 3\n\n    total_sweets = (sarahs_share * total_ratio) // sarahs_ratio\n\n    return total_sweets\n\nans = solution()"
    ],
    "0ff88920dd05452c8edcdf168d81d61a": [
        "def solution():\n    total_biscuits_cost = 7 * 73  # in pence\n    total_cakes_cost = 9 * 113    # in pence (1£ = 100p, so 1.13£ = 113p)\n    \n    total_cost_in_pence = total_biscuits_cost + total_cakes_cost\n    \n    total_cost_in_pounds = total_cost_in_pence / 100  # converting pence to pounds\n    \n    change = 20 - total_cost_in_pounds  # calculating the change from a £20 note\n    \n    return round(change, 2)  # rounding to 2 decimal places to represent pounds and pence\n\nans = solution()"
    ],
    "66db04ea675e442a808a4648e3bb0e13": [
        "def solution():\n    week1 = 27\n    week2 = 25\n    week3 = 30\n    total_litres = week1 + week2 + week3\n    return total_litres\n\nans = solution()"
    ],
    "4ff16f5b62234dcaa6dfb47ec0b97611": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for perm in permutations('BCDEFG'):\n        for i in range(len(perm)):\n            if perm[i] == 'B':\n                left_BC = perm[:i] + ('A',) + perm[i:]\n                for j in range(i + 2, len(left_BC)):\n                    if left_BC[j] == 'C':\n                        DE_combinations = [(x, y) for x, y in permutations('DE', 2)]\n                        for de in DE_combinations:\n                            for k in range(0, len(left_BC)):\n                                if k < len(left_BC) - 1 and left_BC[k] == de[0] and left_BC[k + 1] == de[1]:\n                                    count += 1\n                                elif k > 0 and left_BC[k] == de[1] and left_BC[k - 1] == de[0]:\n                                    count += 1\n            elif perm[i] == 'C':\n                right_BC = perm[:i] + ('A',) + perm[i:]\n                for j in range(0, i):\n                    if right_BC[j] == 'B':\n                        DE_combinations = [(x, y) for x, y in permutations('DE', 2)]\n                        for de in DE_combinations:\n                            for k in range(0, len(right_BC)):\n                                if k < len(right_BC) - 1 and right_BC[k] == de[0] and right_BC[k + 1] == de[1]:\n                                    count += 1\n                                elif k > 0 and right_BC[k] == de[1] and right_BC[k - 1] == de[0]:\n                                    count += 1\n    return count\n\nans = solution()"
    ],
    "64578896b85247a5bc8033060abe3385": [
        "def solution():\n    ans = 734 * 58\n    return ans\n\nans = solution()"
    ],
    "8b535506c66e4092b2c7ac1a8fd5a43f": [
        "def solution():\n    piles = 6\n    apples_per_pile = 8\n    total_apples = piles * apples_per_pile\n    return total_apples\n\nans = solution()"
    ],
    "0e99723387294b9f9f858dfe311b994f": [
        "def solution():\n    ans = 1.8 - 0.57\n    return ans\n\nans = solution()"
    ],
    "a520cd6b98004192bc4c2d780f54359e": [
        "def solution():\n    tops = 4\n    bottoms = 5\n    combinations = tops * bottoms\n    return combinations\n\nans = solution()"
    ],
    "f6c67f2f93b44bc79f64e534dcd8fb1b": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 4), (3, 5), (3, 6), (3, 9)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "d995898eb3f8495b80d5b29890be42a1": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    lunch_end_time = datetime.strptime(\"2:50 PM\", \"%I:%M %p\")\n    lunch_duration = timedelta(minutes=20)\n    tv_duration = timedelta(minutes=20)\n    play_duration = timedelta(minutes=10)\n\n    home_arrival_time = lunch_end_time - lunch_duration - tv_duration - play_duration\n    return home_arrival_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "e4365323b3f24240b896655358cb30ad": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"12:40\", \"%H:%M\")\n    duration = timedelta(hours=2, minutes=40)\n    departure_time = arrival_time + duration\n    return departure_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "973a7aa6ad0b475ca38055bf318f176b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the initial number of stickers Peter has as p.\n    # Then, the initial number of stickers Sam has will be p + 40.\n    peter, sam = symbols('peter sam')\n    \n    # After Sam gives 20% of his stickers to Peter: \n    # Sam has (p + 40) - 0.2 * (p + 40) left, and Peter has p + 0.2 * (p + 40).\n    \n    # After Peter gives 25% of his stickers to Sam: \n    # Peter has p + 0.2 * (p + 40) - 0.25 * (p + 0.2 * (p + 40))\n    # Sam has (p + 40) - 0.2 * (p + 40) + 0.25 * (p + 0.2 * (p + 40))\n    \n    # We know that in the end, Sam had 96 stickers more than Peter:\n    # ((p + 40) - 0.2 * (p + 40) + 0.25 * (p + 0.2 * (p + 40))) - \n    # (p + 0.2 * (p + 40) - 0.25 * (p + 0.2 * (p + 40))) = 96\n    \n    equation = Eq(((peter + 40) - 0.2 * (peter + 40) + 0.25 * (peter + 0.2 * (peter + 40))) - \n                  (peter + 0.2 * (peter + 40) - 0.25 * (peter + 0.2 * (peter + 40))), 96)\n    \n    # Now we solve the equation for peter to find the initial number of stickers that Peter had\n    solution = solve(equation, peter)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "d47ef27ff4d24d97b0950971a5d0ebae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 * (x - 5) - 3, 6)\n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "9008be14593f40169be1110ccfe7e329": [
        "def solution():\n    number = 1\n    while True:\n        if number % 3 == 2 and number % 4 == 2 and number % 5 == 2 and number % 7 == 1:\n            return number\n        number += 1\n\nans = solution()"
    ],
    "b7b9b80dff99475f987ad65337577b2b": [
        "from math import factorial\n\ndef solution():\n    # There are 4 choices for the first digit of the 3-digit number (excluding 0)\n    # For the second digit, there are 3 remaining choices\n    # For the third digit, there are 2 remaining choices\n    # Thus, the total number of 3-digit numbers is 4 * 3 * 2\n    three_digit_numbers = 4 * 3 * 2\n    \n    # For the 4-digit numbers, the first digit can't be 0, so there are 3 choices\n    # For the second digit, there are 3 remaining choices (since we can choose 0 now)\n    # For the third digit, there are 2 remaining choices\n    # For the fourth digit, there is 1 remaining choice\n    # Thus, the total number of 4-digit numbers is 3 * 3 * 2 * 1\n    four_digit_numbers = 3 * 3 * 2 * 1\n    \n    # The total number of numbers is the sum of the 3-digit and 4-digit numbers\n    total_numbers = three_digit_numbers + four_digit_numbers\n    return total_numbers\n\nans = solution()"
    ],
    "9fcfa23fda9646908ef7e4baafdfbb8e": [
        "def solution():\n    result = (6 + 1/2) / (1/2)\n    return result\n\nans = solution()"
    ],
    "9fc589a666df49d2893ceb77b7ad8793": [
        "def solution():\n    ans = 887 + 96\n    return ans\n\nans = solution()"
    ],
    "238dd80b8a46477eaafb237f243e1492": [
        "def solution():\n    first_term = 5\n    common_difference = 3\n    n_terms = 14\n\n    last_term = first_term + (n_terms - 1) * common_difference\n    sum_of_terms = n_terms * (first_term + last_term) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "b89dd263e0b74d39b39fc4d3fdbfb49e": [
        "def solution():\n    count, pages, nines_per_page = 0, 0, 0\n    \n    while count < 181:\n        pages += 1\n        str_pages = str(pages)\n        nines_per_page = str_pages.count('9')\n        count += nines_per_page\n    \n    return pages - (count - 181) // nines_per_page\n\nans = solution()"
    ],
    "bc434e7f2cc44029adcb3a3799e67e66": [
        "def solution():\n    grey_rabbits = 14\n    pattern_grey = 2\n    total_pattern_rabbits = (grey_rabbits // pattern_grey) * 5\n    remainder_grey = grey_rabbits % pattern_grey\n\n    if remainder_grey > 0:\n        total_pattern_rabbits += 5\n        \n    return total_pattern_rabbits\n\nans = solution()"
    ],
    "74259b5e9ab14d9f87fc462cc2c9c9c4": [
        "def solution():\n    from itertools import permutations\n\n    digits = [0, 1, 5, 8]\n    all_possible_numbers = set()\n\n    for perm in permutations(digits, 3):\n        if perm[0] != 0:  # Exclude numbers that start with 0\n            num = int(''.join(map(str, perm)))\n            all_possible_numbers.add(num)\n\n    max_num = max(all_possible_numbers)\n    min_num = min(all_possible_numbers)\n\n    difference = max_num - min_num\n\n    return difference\n\nans = solution()"
    ],
    "249b1679bd9a4e0cab73014b4563c817": [
        "def solution():\n    from math import gcd\n    class_A = 12\n    class_B = 15\n    class_C = 18\n\n    # Find the GCD of the three class sizes\n    gcd_AB = gcd(class_A, class_B)\n    gcd_ABC = gcd(gcd_AB, class_C)\n\n    return gcd_ABC\n\nans = solution()"
    ],
    "de62c39c82f94cadada80699ccead608": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    initial_crystals = symbols('initial_crystals')\n    \n    equation = Eq((initial_crystals / 2) + 10 + 20 - 14, initial_crystals - 35)\n    \n    solutions = solve(equation, initial_crystals)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "a2724e23a1a2486ba4b16942479338fe": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['1', '2', '3', '4']\n    even_digits = ['2', '4']\n    count = 0\n\n    for perm in permutations(digits, 4):\n        if perm[-1] in even_digits:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "b00aab6ff6404d4c8fdb343288b6e0d9": [
        "def solution():\n    ans = 37 * 27\n    return ans\n\nans = solution()"
    ],
    "19787e6cd66e47d59c4f1aa7b622367f": [
        "def solution():\n    from sympy import divisors\n    count = 0\n    for d in divisors(180):\n        if d % 9 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "780536f26cf94aaead22cb26adb13a45": [
        "def solution():\n    sarah_age = 24\n    peter_age = sarah_age / 2\n    mike_age = (2/3) * peter_age\n    total_age = sarah_age + peter_age + mike_age\n    return total_age\n\nans = solution()"
    ],
    "ac06ad0afb9a4d7289d8a8d0c7948dbb": [
        "def solution():\n    return 25 * 6\n\nans = solution()"
    ],
    "2fca64d5949f47de80b3591fd9ab16fc": [
        "def solution():\n    return (340 + 220) / 7\n\nans = solution()"
    ],
    "45c4e765f9d9484cb09882339459ff20": [
        "def solution():\n    for a in range(10):\n        if (2 + 6 + a + 5 + 3 + 9) % 9 == 0:\n            return a\n\nans = solution()"
    ],
    "cb7a55fac46240dfb8afe8d50e4bb828": [
        "def solution():\n    principal_amount = 10000\n    interest_rate = 0.05\n    years = 3\n\n    final_amount = principal_amount * ((1 + interest_rate) ** years)\n\n    return final_amount\n\nans = solution()"
    ],
    "eff977d9b7e24c4898ee8a2de20024aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    yi_yen, kyra = symbols('yi_yen kyra')\n    \n    equation1 = Eq(yi_yen + kyra, 100)\n    equation2 = Eq(yi_yen, 4 * kyra)\n\n    solutions = solve((equation1, equation2), (yi_yen, kyra))\n\n    return solutions[yi_yen]\n\nans = solution()"
    ],
    "48194ec32ba347e09ddad0af6959c376": [
        "def solution():\n    price_per_box = 2.89\n    number_of_boxes = 12\n    total_cost = price_per_box * number_of_boxes\n    return total_cost\n\nans = solution()"
    ],
    "45a248898f1c4807b784e259bea7cd69": [
        "from math import comb\n\ndef solution():\n    # Placing at least 1 ball in each of the 7 boxes is equivalent to distributing\n    # the remaining 3 balls (10 total - 7 boxes) into the 7 boxes with no restrictions.\n    num_ways = comb(3 + 7 - 1, 3)\n    return num_ways\n\nans = solution()"
    ],
    "5dfa1ffa102441ac98eb20610ee9be00": [
        "def solution():\n    pounds_to_pence = 200  # convert £2 to pence\n    single_price = 12  # cost of one sweet in pence\n    special_offer_price = 30  # cost of three sweets in pence in the special offer\n\n    # Calculate the number of sweets that can be bought in the special offer\n    sweets_in_offer = (pounds_to_pence // special_offer_price) * 3\n\n    # Calculate the remaining money after buying sweets in the special offer\n    remaining_pence = pounds_to_pence % special_offer_price\n\n    # Calculate the number of additional sweets that can be bought with the remaining money\n    additional_sweets = remaining_pence // single_price\n\n    # Add up the number of sweets bought in the special offer with the additional sweets\n    total_sweets = sweets_in_offer + additional_sweets\n\n    return total_sweets\n\nans = solution()"
    ],
    "49251eb5b4424b0f98bd1041d8e0da15": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (x + 3), 50 - x + 3)\n    x_value = solve(equation, x)\n\n    return x_value[0]\n\nans = solution()"
    ],
    "f9e42807c5be4058858957db5e1c9c1f": [
        "def solution():\n    may_age = 7\n    years_until_may_is_10 = 10 - may_age\n    may_age_when_10 = 10\n    \n    # Create an equation based on the information given\n    # Let k represent Kenny's younger brother's age now\n    # Then the age of Kenny now will be k + 2\n    # After a certain number of years (years_until_may_is_10), Kenny and his brother's age sum will be 3 times May's age when she will be 10\n    # (kenny_age_when_may_is_10) + (brother_age_when_may_is_10) = 3 * may_age_when_10\n    # (k + 2 + years_until_may_is_10) + (k + years_until_may_is_10) = 3 * may_age_when_10\n    # Simplify the equation: \n    # 2k + 2 * years_until_may_is_10 + 2 = 3 * may_age_when_10\n    # 2k + 2 * 3 + 2 = 3 * 10\n    # 2k + 6 + 2 = 30\n    # 2k + 8 = 30\n    # 2k = 30 - 8\n    # 2k = 22\n    # k = 11\n    # So Kenny's younger brother is 11 years old now\n    # And Kenny is 11 + 2 = 13 years old now\n    \n    kenny_age_now = 11 + 2\n    may_age_now = may_age\n    \n    # Calculate how much older Kenny is than May now\n    difference_in_age = kenny_age_now - may_age_now\n\n    return difference_in_age\n\nans = solution()"
    ],
    "31e292cd70e349bb90992c388528e37a": [
        "def solution():\n    # Let x be the exact capacity of the fish tank in litres.\n    # According to the problem:\n    # If he uses a 5-litre pail, 4 litres will overflow, which means x + 4 = 5 * pails\n    # If he uses a 3-litre pail, he will need 4 more pails to fill the tank, which means x = 3 * (pails + 4)\n    \n    for pails in range(1, 1000):  # It's safe to assume the number of pails won't be outrageously large\n        if (5 * pails) == (3 * (pails + 4) + 4):\n            return 5 * pails - 4  # We subtract 4 because the 5-litre pail overflows by 4 litres\n\n    return None  # If no solution is found within a reasonable range\n\nans = solution()"
    ],
    "bc11b31a4a6140a59472be824b99ccf9": [
        "def solution():\n    # To solve this problem, we can analyze the possible outcomes strategically:\n    # If Felix goes first, he should aim to leave John with a number of candies that is\n    # a multiple of 3 on John's turn because whatever John eats (1 or 2 candies), Felix can\n    # then eat 2 or 1 candy respectively to continue leaving a multiple of 3.\n    # If there are 3 candies left, and it is John's turn, no matter what John does, Felix will eat\n    # the remaining candies on his next turn and win.\n    \n    # The strategy is to always reduce the pile to the nearest multiple of 3 on Felix's turn.\n    # If the starting number of candies (10) is already 1 more than a multiple of 3, Felix can \n    # start by eating 1 candy. This will leave John with 9 candies - a multiple of 3.\n    \n    # Given the rules of the game, if Felix goes first and eats 1 candy, he can follow this strategy\n    # to win, since John will always face a multiple of 3 candies no matter how many he eats on his turn.\n    \n    # Take the first move by eating 1 candy.\n    first_move = 1\n    # The winning strategy is to leave a multiple of 3 candies to John every turn.\n    return (\"First\", first_move)\n\nans = solution()"
    ],
    "00ac4d063d6648e78bb7009c03d426bf": [
        "def solution():\n    total_length = 305\n    pipe_length = 5\n\n    num_pipes = total_length // pipe_length\n\n    if total_length % pipe_length != 0:\n        num_pipes += 1\n\n    return num_pipes\n\nans = solution()"
    ],
    "850134f061fd402ea63d73775d0910fc": [
        "def solution():\n    ans = (38 + 8 * 9 - 15) / 5\n    return ans\n\nans = solution()"
    ],
    "b4734a26463d4091ba7a023c1ba461ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    u = symbols('u')\n    equation = Eq(340 - 2*u, 5*u - 220)\n    solution = solve(equation, u)\n    \n    return solution[u]\n\nans = solution()"
    ],
    "89fd0157409641fc9cb98637c2461cfa": [
        "def solution():\n    pages_with_3 = 28\n    count = 0\n    page_number = 1\n    \n    while count < pages_with_3:\n        if '3' in str(page_number):\n            count += str(page_number).count('3')\n        page_number += 1\n    \n    return page_number - 1\n\nans = solution()"
    ],
    "4e3792c14b8148b28eb1c6fbd6164292": [
        "def solution():\n    coins = [50, 20, 10, 5]\n    total_amount = sum(coins)\n    \n    for coin in coins:\n        if (total_amount - coin) == 2 * (total_amount // 2 - coin):\n            lost_coin = coin\n    \n    return lost_coin\n\nans = solution()"
    ],
    "697ff89b7a8e49d59bb66c994a87d7b9": [
        "from math import comb\n\ndef solution():\n    ways_to_pick_girls = comb(8, 4)\n    ways_to_pick_boys = comb(12, 3)\n\n    total_ways = ways_to_pick_girls * ways_to_pick_boys\n\n    return total_ways\n\nans = solution()"
    ],
    "0f831cd802e74004acc53b99817c46c5": [
        "def solution():\n    first_bus_time = (15 * 60) + 55  # in minutes\n    second_bus_time = (16 * 60) + 35  # in minutes\n    time_when_arrived = first_bus_time + 4  # 4 minutes late\n\n    wait_time = second_bus_time - time_when_arrived\n    \n    return wait_time\n\nans = solution()"
    ],
    "de21fb1f2c5c4002bd75f2837252b916": [
        "def solution():\n    ans = 456 - (170 - 144)\n    return ans\n\nans = solution()"
    ],
    "804f12c690c0453fbb8f0a21ecaea5b2": [
        "def solution():\n    total_students = 152\n    for boys in range(total_students):\n        girls = total_students - boys\n        if boys - boys / 11 == girls - 5:\n            return boys\n\nans = solution()"
    ],
    "6161662a5ed44368b8a03f001cc375ea": [
        "def solution():\n    road_length = 40\n    distance_between_trees = 5\n\n    ans = (road_length // distance_between_trees) + 1\n    return ans\n\nans = solution()"
    ],
    "aba1fa935b644d9ab044d095de69983d": [
        "def solution():\n    workers = 70\n    lorry_capacity = 8\n    num_lorries = (workers + lorry_capacity - 1) // lorry_capacity\n    return num_lorries\n\nans = solution()"
    ],
    "02d7ef47aaab4c4bbec478d089387344": [
        "def solution():\n    sugar_weight_kg = 1\n    pasta_weight_g = 50\n    spaghetti_handful_g = 15\n    \n    total_weight_g = (sugar_weight_kg * 1000) + pasta_weight_g + spaghetti_handful_g\n    \n    return total_weight_g\n\nans = solution()"
    ],
    "09a97d605e2e4cabb643032c99b282ed": [
        "def solution():\n    # The sum of the 4 numbers that have the average of 36\n    sum_36 = 36 * 4  \n    # The sum of the 4 numbers that have the average of 38\n    sum_38 = 38 * 4  \n    # The sum of the 4 numbers that have the average of 39\n    sum_39 = 39 * 4  \n    # The sum of the 4 numbers that have the average of 45\n    sum_45 = 45 * 4  \n    # The sum of the 4 numbers that have the average of 49\n    sum_49 = 49 * 4  \n\n    # Since we know the sum of 4 out of 5 numbers,\n    # the sum of all 5 numbers can be determined by adding all sums and subtracting 4 times the sum of 4 common numbers.\n    total_sum = sum_36 + sum_38 + sum_39 + sum_45 + sum_49 - 4 * (36 + 38 + 39 + 45)\n\n    # The largest number will be the total sum minus the smallest sum of 4 numbers,\n    # since it is not included in the smallest sum (the average was 36).\n    largest_number = total_sum - sum_36  \n\n    return largest_number\n\nans = solution()"
    ],
    "c78925a177374d8b82f3a67f599df2e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    louise, andrew = symbols('louise andrew')\n\n    equation1 = Eq(andrew, 3 * louise)\n    equation2 = Eq(louise + andrew, 84)\n\n    solutions = solve((equation1, equation2), (louise, andrew))\n\n    return solutions[louise]\n\nans = solution()"
    ],
    "43b3978e200e47a993909c47ecd3ded2": [
        "def solution():\n    pages_first_three_days = 40\n    average_next_four_days = 20\n    pages_last_two_days = 60\n    \n    total_pages = pages_first_three_days + (average_next_four_days * 4) + pages_last_two_days\n    \n    return total_pages\n\nans = solution()"
    ],
    "324ea1c40561423abe7bda23ae7ac925": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Using the Chinese Remainder Theorem with a constant difference (remainder is 3 for all)\n    congruences = [(3, 4), (3, 5), (3, 9)]\n    number = solve_congruence(*congruences)\n\n    # Answer must be a three-digit number less than 200\n    ans = [num for num in number if 99 < num < 200][0]\n\n    return ans\n\nans = solution()"
    ],
    "a1289345588b4eea9e075413d1d189c7": [
        "def solution():\n    count = 0\n    for die1 in range(1, 7):        # Iterate through all possible rolls of the first die\n        for die2 in range(1, 7):    # Iterate through all possible rolls of the second die\n            for die3 in range(1, 7): # Iterate through all possible rolls of the third die\n                # Check if the dice have different numbers and the sum equals 12\n                if die1 != die2 and die2 != die3 and die1 != die3 and die1 + die2 + die3 == 12:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "06964238b9a24ef7b303a09d9b1c85c7": [
        "def solution():\n    bill_age = 70\n    grandsons_ages = [6, 12, 18]\n    while True:\n        bill_age += 1\n        grandsons_ages = [age + 1 for age in grandsons_ages]\n        if bill_age == sum(grandsons_ages):\n            break\n    return bill_age\n\nans = solution()"
    ],
    "28537d9f7465445e968eb0b26a4a451c": [
        "def solution():\n    weight_sugar_grams = 1 * 1000  # Convert 1kg to grams\n    weight_pasta_grams = 50\n    weight_spaghetti_grams = 15\n\n    total_weight = weight_sugar_grams + weight_pasta_grams + weight_spaghetti_grams\n    \n    return total_weight\n\nans = solution()"
    ],
    "8389523689d7482abe8ecaa9a5b6b9ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let s be the total number of students and r be the number of rooms\n    s, r = symbols('s r')\n\n    # If 4 students live in one room, there will be 6 students with no room\n    equation1 = Eq(4*r + 6, s)\n    \n    # If 5 students live in one room, there will be 1 room empty\n    equation2 = Eq(5*(r - 1), s)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (s, r))\n\n    return solutions[s]\n\nans = solution()"
    ],
    "fd395dd46af44c2fba9a202703ad88e8": [
        "def solution():\n    return (16 - 1) / 5\n\nans = solution()"
    ],
    "9562aafe97384f7ea95275fcb79e1da2": [
        "def solution():\n    from math import lcm\n\n    interval_aytown = 15\n    interval_beeville = 12\n    interval_ceeford = 8\n\n    # find the least common multiple\n    interval_lcm = lcm(interval_aytown, interval_beeville, interval_ceeford)\n\n    # convert lcm to hours and minutes\n    hours = interval_lcm // 60\n    minutes = interval_lcm % 60\n\n    # next time trains arrive together\n    next_arrival_hour = 10 + hours\n    next_arrival_minute = 0 + minutes\n\n    # handle cases if minutes exceed 60\n    if next_arrival_minute >= 60:\n        additional_hour = next_arrival_minute // 60\n        next_arrival_minute %= 60\n        next_arrival_hour += additional_hour\n\n    ans = (next_arrival_hour, next_arrival_minute)\n    return ans\n\nans = solution()"
    ],
    "314a52b81cf948798c3eb0b23a09fb4e": [
        "def solution():\n    chinese_restaurants = 8\n    mexican_restaurants = 6\n    fast_food_restaurants = 4\n\n    total_choices = chinese_restaurants + mexican_restaurants + fast_food_restaurants\n\n    return total_choices\n\nans = solution()"
    ],
    "770aa7f2ec2448dfb419dc832282a417": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(56 - 4 * (20 - 6*x), 48)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "60370cf36b164039b0b08b75d45daf26": [
        "def solution():\n    total_students = 52\n    swimmers = 30\n    cyclists = 35\n    table_tennis_players = 42\n    \n    max_two_sports = total_students - (swimmers + cyclists + table_tennis_players - total_students)\n    \n    # Now we subtract those who play exactly two sports from the total to get the minimum playing all three\n    min_all_three = swimmers + cyclists + table_tennis_players - total_students - 2 * max_two_sports\n    \n    return min_all_three\n\nans = solution()"
    ],
    "98f594e37f074962982921040758a2f4": [
        "def solution():\n    count = 0\n    for page in range(1, 106):\n        count += str(page).count('0')\n    return count\n\nans = solution()"
    ],
    "7a6352d69d43478d857666ac24c5efac": [
        "def solution():\n    factor = 3999 * 2014\n    \n    ans = (factor * 2014.2014 + factor * 3999.3999) / 12.0012\n    \n    return ans\n\nans = solution()"
    ],
    "12599cd086b74a6dbee49affc2b9da94": [
        "def solution():\n    time_s = 30  # The time taken by train to pass a tree in seconds\n    train_length_m = 360  # The length of the train in meters\n    \n    # Speed = Distance / Time\n    speed_m_per_s = train_length_m / time_s  # Speed of the train in meters per second\n    \n    # Convert meters per second to kilometers per hour (1 m/s = 3.6 km/h)\n    speed_km_per_h = speed_m_per_s * 3.6\n    \n    return speed_km_per_h\n\nans = solution()"
    ],
    "8d509648485641b48c77ecbbb044bdcf": [
        "def solution():\n    piles = 6\n    apples_per_pile = 8\n    total_apples = piles * apples_per_pile\n    return total_apples\n\nans = solution()"
    ],
    "499aa61be1124476bb26bc1e720b0c26": [
        "def solution():\n    total_distance = 11\n    distance_per_day = 3\n    slide_per_night = 1\n    net_distance_per_day = distance_per_day - slide_per_night\n    \n    # Calculate days for the snail to reach or surpass the total distance before the final climb\n    days = (total_distance - distance_per_day) // net_distance_per_day\n    \n    # The final climb is done on the next day\n    final_day = days + 1\n    \n    return final_day\n\nans = solution()"
    ],
    "a8c99058f45b4a2a8e447d1b68ae74bc": [
        "def solution():\n    # Total number of restaurants\n    total_choices = 8 + 6 + 4\n    return total_choices\n\nans = solution()"
    ],
    "1774a1190e9c46c2aacaa2e8fc28e2da": [
        "def solution():\n    total_initial = 7 * 9\n    total_final = 6 * 10\n    number_removed = total_initial - total_final\n    return number_removed\n\nans = solution()"
    ],
    "2758e86259aa42e29a0318d2bdb3a711": [
        "def solution():\n    total_people = 120\n    people_left = total_people * (1/3)\n    people_still_at_party = total_people - people_left\n    return int(people_still_at_party)\n\nans = solution()"
    ],
    "06b1e5f9947e4439b6bdd18c70668419": [
        "def solution():\n    # To ensure 4 marbles of different colours, we need to consider the worst-case scenario.\n    # Draw all marbles of one colour, then all of another, and finally one of each of the remaining two colours.\n    \n    # Take all marbles of the most abundant colour (red, 12 pieces), the second most abundant (blue, 9 pieces),\n    # and 1 from each of the other two colours (yellow and green).\n    marbles_needed = 12 + 9 + 1 + 1\n    \n    return marbles_needed\n\nans = solution()"
    ],
    "a033d32f04c4454c8b6d34df01854889": [
        "def solution():\n    ans = 7.72 - 7.54\n    return ans\n\nans = solution()"
    ],
    "d9ed06f56ae74dfcb2fd97b178c32dea": [
        "def solution():\n    factors_of_66 = [i for i in range(1, 67) if 66 % i == 0]\n    possible_ages = [age for age in factors_of_66 if (age - 4) % 6 == 0]\n\n    return possible_ages[-1]  # Assuming you want the current age\n\nans = solution()"
    ],
    "6c11b151fed94fb483ea9f5b76290855": [
        "def solution():\n    # Let n be the number of people in the game.\n    # The numbers increase by 2, so the difference between 10 and 24 is 14.\n    # Half the circle would then be 14 / 2, as 10 is directly opposite to 24.\n    half_circle = 14 // 2\n    \n    # Person number 10 is the fifth person (first is number 2).\n    # Count from 2 in increments of 2 to reach 10.\n    person_number_10 = (10 - 2) // 2 + 1\n    \n    # The number of people in half the circle is equal to the person's number 10.\n    n = 2 * person_number_10\n\n    return n\n\nans = solution()"
    ],
    "1a58479ac34b4689bdb3e7c074f88212": [
        "def solution():\n    total_money = 80\n    book_stationery = 0.20 * total_money\n    # Let the money spent on transport be x\n    # Then, the money spent on food is 3x\n    # And, the savings is 3x - 6\n    # book_stationery + x + 3x + (3x - 6) = total_money\n    # 7x - 6 = total_money - book_stationery\n    # 7x = total_money - book_stationery + 6\n    # x = (total_money - book_stationery + 6) / 7\n    transport = (total_money - book_stationery + 6) / 7\n    \n    food = 3 * transport\n    savings = food - 6\n    \n    # Percentage of savings from total money\n    savings_percent = (savings / total_money) * 100\n\n    return savings_percent\n\nans = solution()"
    ],
    "541674da97474788b63ff77b2d0287bb": [
        "def solution():\n    from math import lcm\n\n    move_time_A = 24\n    move_time_B = 64\n\n    return lcm(move_time_A, move_time_B)\n\nans = solution()"
    ],
    "3daa406fe23b4025ab00fffd6760fde8": [
        "def solution():\n    seconds_per_minute = 60\n    minutes = 8\n    return seconds_per_minute * minutes\n\nans = solution()"
    ],
    "6829f51b13a0426fb1a619b064401568": [
        "def solution():\n    factors_of_75 = [i for i in range(10, 100) if 75 % i == 0]\n    for num in factors_of_75:\n        if num % 6 == 3:\n            ans = num\n            break\n    return ans\n\nans = solution()"
    ],
    "93403cabcded4b63968e13348f241754": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(34 - 3 * (2*x - 2), 16)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a778b5cfeeed482b83f37aa61c3b6eb5": [
        "def solution():\n    ans = sum((-1)**(i % 2) * (40 - 2 * i) for i in range(0, 10))\n    return ans\n\nans = solution()"
    ],
    "5384b43a54f049ec9c65ebb35ee718c1": [
        "def solution():\n    justin_ate = 4\n    sisters_ate = 5 * 4\n    apples_left = 20\n    \n    initial_apples = justin_ate + sisters_ate + apples_left\n    \n    return initial_apples\n\nans = solution()"
    ],
    "bf31842e59b84f869bdd3a0411e455df": [
        "def solution():\n    incorrect_subtrahend = 41\n    incorrect_difference = 50\n\n    # Little Miss Careless saw the subtrahend wrongly. She made mistake in tens and ones places.\n    # correct_subtrahend = 14\n\n    # Let's find the minuend by adding the incorrect subtrahend to the incorrect difference\n    minuend = incorrect_difference + incorrect_subtrahend\n\n    # Let's calculate the correct difference by subtracting the correct subtrahend\n    correct_subtrahend = 14\n    correct_difference = minuend - correct_subtrahend\n\n    return correct_difference\n\nans = solution()"
    ],
    "86d0f1125cdd46ac9604c4d192220e10": [
        "def solution():\n    ans = 45.36 + 1.25 + 2.75 + 4.64\n    return ans\n\nans = solution()"
    ],
    "ae3921e4e39849ffbe3f0c238b81b81b": [
        "def solution():\n    principal = 5000\n    amount = 7320.5\n    time = 4\n    # Using the formula for compound interest: A = P * (1 + r)^t, where\n    # A is the amount, P is the principal, r is the rate, and t is the time.\n    # We can rearrange the formula to solve for r:\n    # r = ((A / P) ** (1 / t)) - 1\n\n    rate = ((amount / principal) ** (1 / time)) - 1\n    return rate\n\nans = solution()"
    ],
    "3b5e11ff28904b30b8919884597986b5": [
        "def solution():\n    return 888 // 24\n\nans = solution()"
    ],
    "c3b93f4ccd0047d9b0123beb59667db6": [
        "def solution():\n    result = 56 / 21\n    return result\n\nans = solution()"
    ],
    "3009ddde568d44929af80990edfca6a6": [
        "def solution():\n    a, b, c, d = 3.2, 6.77, 8.88, 6.3\n    ans = (a + b + c) * (b + c + d) - (a + b + c + d) * (b + c)\n    return ans\n\nans = solution()"
    ],
    "f43eb58f48b14c988c4e389d78a71faa": [
        "def solution():\n    total_saved = 4410\n    january_saved = 2450\n    march_saved = 855\n    \n    february_saved = total_saved - january_saved - march_saved\n\n    return february_saved\n\nans = solution()"
    ],
    "a7e6156c711b427a80b6ffdd8bebbce8": [
        "def solution():\n    original_value = 176\n    new_value = 88\n    change = new_value - original_value\n    percent_change = (change / original_value) * 100\n\n    return percent_change\n\nans = solution()"
    ],
    "644892f23d5d42ca9787cd008215de03": [
        "def solution():\n    time_for_one_picture = 10  # minutes\n    total_time_available = 1 * 60 + 20  # 1 hour and 20 minutes\n\n    num_pictures = total_time_available // time_for_one_picture\n\n    return num_pictures\n\nans = solution()"
    ],
    "df97cfc5a9874cc7aac262f019e950a2": [
        "def solution():\n    # Since the square array was increased by one row and one column,\n    # the initial side length of the square array can be represented as 'n'.\n    # After adding 31 soldiers, the new side length becomes 'n+1'.\n    # This results in a total of 'n^2 + n + n + 1' soldiers in the new array.\n    # The number of newly added soldiers, excluding the one at the intersection of the new row and column, is '31'.\n    # So, 'n^2 + n + n' must equal '31', meaning 'n^2 + 2n' is '31'.\n    # We need to find 'n' such that 'n^2 + 2n - 31 = 0'.\n    # Use the quadratic formula to find n.\n    \n    from math import sqrt\n    \n    a = 1\n    b = 2\n    c = -31\n    \n    # Calculate discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Since n must be positive, we take the positive square root\n    n = (-b + sqrt(discriminant)) / (2*a)\n    \n    # Since n has to be an integer (because you can't have a fraction of a soldier), round it to the nearest whole number\n    n = int(n)\n    \n    total_soldiers = (n+1)**2\n    return total_soldiers\n\nans = solution()"
    ],
    "5f662e9aa4db4fbfbf1a266b8558e2a8": [
        "def solution():\n    seconds_per_minute = 60\n    minutes = 8\n    total_seconds = seconds_per_minute * minutes\n    return total_seconds\n\nans = solution()"
    ],
    "e199247a5e3f4630aa1a02b225d3db54": [
        "def solution():\n    result = 7.3 - 2.64\n    return result\n\nans = solution()"
    ],
    "26b43a4d19504cc39391c90f265a8e59": [
        "def solution():\n    ans = sum(1/i for i in range(1, 101) for j in range(1, i))\n    return ans\n\nans = solution()"
    ],
    "bf846dec93ce477ab47a02ca859245e6": [
        "def solution():\n    # The final amount after 4 years is given to be $924\n    final_amount = 924\n    # the interest rate is 8 percent per annum\n    interest_rate = 0.08\n    # the time is 4 years\n    time = 4\n\n    # Using the compound interest formula A = P(1 + r/n)^(nt)\n    # Since it is an annual interest, n = 1 and the formula simplifies to A = P(1 + r)^t\n    # We want to find out P, so we rearrange the formula to P = A / (1 + r)^t\n\n    principal = final_amount / ((1 + interest_rate) ** time)\n\n    return principal\n\nans = solution()"
    ],
    "36a3b0319aa94ac78912a13a30272f8d": [
        "from itertools import permutations\n\ndef solution():\n    # Permute all the digits to get possible combinations for the first number\n    digits = ('1', '3', '5', '6', '7', '8', '9')\n    for perm in permutations(digits):\n        first_number = int(''.join(perm))\n        second_number = 2 * first_number\n        third_number = 4 * first_number\n        all_numbers = str(first_number) + str(second_number) + str(third_number)\n        # Check if all original digits were used exactly once\n        if all(all_numbers.count(digit) == 1 for digit in digits):\n            ans = third_number\n            return ans\n\nans = solution()"
    ],
    "182737e9117d46c389cc27f2a8aad6c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b, c = symbols('a b c')\n    equation1 = Eq(a + b, 13)\n    equation2 = Eq(a + c, 25)\n    equation3 = Eq(c, 3 * b)\n\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n\n    return solutions[a]\n\nans = solution()"
    ],
    "e8548c7b8d69402e81f35205050bd98d": [
        "def solution():\n    shirts = 3\n    pants = 2\n    dresses = 3\n    shoes = 4\n    heels = 2\n\n    # Outfits with pants and shirts\n    pants_shirts_combinations = shirts * pants * shoes\n    \n    # Outfits with dresses\n    dresses_combinations = dresses * (shoes + heels)\n    \n    total_combinations = pants_shirts_combinations + dresses_combinations\n\n    return total_combinations\n\nans = solution()"
    ],
    "a38308f19b794b3b96e4cb5fede094c4": [
        "def solution():\n    total_mass_kg = 9\n    total_mass_g = 5\n    soil_mass_kg = 4\n    soil_mass_g = 50\n    \n    total_mass_g += total_mass_kg * 1000\n    soil_mass_g += soil_mass_kg * 1000\n    \n    sand_mass_g = total_mass_g - soil_mass_g\n    \n    difference_kg = abs(soil_mass_g - sand_mass_g) // 1000\n    difference_g = abs(soil_mass_g - sand_mass_g) % 1000\n    \n    return (difference_kg, difference_g)\n\nans = solution()"
    ],
    "cf31bb404b754d18bd83978a61ac8d0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, teddy_bear = symbols('book teddy_bear')\n\n    equation1 = Eq(4 * book + 8 * teddy_bear, 164)\n    equation2 = Eq(2 * book + 3 * teddy_bear, 67)\n\n    solutions = solve((equation1, equation2), (book, teddy_bear))\n\n    return solutions[book]\n\nans = solution()"
    ],
    "1530f45644534ab9a97cbe5b7104abc7": [
        "def solution():\n    ans = sum(1 / i for i in range(1, 101) for j in range(1, i))\n    return ans\n\nans = solution()"
    ],
    "1bf59a6dc1ea4ff38f6849f658bfb007": [
        "def solution():\n    # Let's use x to represent the number of buttons James originally has\n    # Then Nina has 22 - x buttons originally\n    # When Nina gives 4 buttons to James, they have the same number, which means:\n    # James has x + 4 buttons, and Nina has (22 - x) - 4 buttons\n    # Setting these two equal to each other gives us the equation:\n    # x + 4 = (22 - x) - 4\n\n    # Solving this equation for x gives us:\n    x = (22 - 8) // 2  # since 2x = 22 - 8\n\n    # Now we can find out how many buttons Nina originally has:\n    nina_original = 22 - x\n    \n    return nina_original\n\nans = solution()"
    ],
    "6c6e0d85d93f4c04993e70d48958151d": [
        "def solution():\n    total_questions = 10\n    points_correct_answer = 4\n    points_incorrect_answer = -2\n    total_points = 29\n\n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        if correct_answers * points_correct_answer + incorrect_answers * points_incorrect_answer == total_points:\n            return correct_answers\n\nans = solution()"
    ],
    "6d8bf3a7fce3414a9c67c4a3fa1f7c48": [
        "def solution():\n    paper_per_kite = 0.36\n    total_paper = 4.8\n\n    num_kites = total_paper // paper_per_kite\n\n    return int(num_kites)\n\nans = solution()"
    ],
    "217f4abc2ab44264affad60373305d47": [
        "def solution():\n    total_distance = 320\n    number_of_intervals = 79\n    distance_between_trees = total_distance / (number_of_intervals + 1)\n\n    return distance_between_trees\n\nans = solution()"
    ],
    "0072c8403a1845a5b093725c5bb5aeaf": [
        "def solution():\n    sequence = '12345'\n    seq_length = len(sequence)\n\n    # Total complete sequences within 52 digits\n    full_sequences = 52 // seq_length\n\n    # Remaining digits after the complete sequences\n    remaining_digits = 52 % seq_length\n\n    # Sum of integers in one full sequence\n    sum_of_full_sequence = sum(int(digit) for digit in sequence)\n\n    # Sum of the integers in the remaining part of the sequence\n    sum_of_remaining_sequence = sum(int(sequence[i]) for i in range(remaining_digits))\n\n    # Total sum is full sequences times sum of one sequence plus sum of remaining sequence\n    total_sum = full_sequences * sum_of_full_sequence + sum_of_remaining_sequence\n\n    return total_sum\n\nans = solution()"
    ],
    "8813aaf9e8434f92984ad99a90e18eb9": [
        "def solution():\n    # Since M and N only have prime factors 3 and 5 and their HCF is 75,\n    # We can deduce that 75 = 3^x * 5^y where x + y = sum of powers of 3 and 5 in the HCF\n    # For 75, the prime factors are 3^1 * 5^2\n    # Therefore, M and N are divisible by 75, so we can represent them as:\n    # M = 75 * 3^a * 5^b and N = 75 * 3^c * 5^d where a, b, c, d >= 0\n    \n    # The number of factors of a number is (a+1)(b+1)(c+1)... for its prime factorization 2^a * 3^b * 5^c...\n    # So the number of factors of M can be written as (a+1)(b+3) since 75 adds two 5's and one 3.\n    # And similarly the number of factors of N can be written as (c+1)(d+3).\n    \n    # We are also given that M has 12 factors and N has 10 factors. \n    # Let's find the possible values of a and b for M such that (a+1)(b+3) = 12\n    # And the possible values of c and d for N such that (c+1)(d+3) = 10\n    \n    # For M with 12 factors\n    possible_ab = [(a, b) for a in range(12) for b in range(12) if (a+1)*(b+3) == 12]\n    \n    # And for N with 10 factors\n    possible_cd = [(c, d) for c in range(10) for d in range(10) if (c+1)*(d+3) == 10]\n    \n    # Now we find the numbers M and N based on these factors, respecting the fact that they must only have 3 and 5 as prime factors\n    possible_ms = [75 * (3**a * 5**b) for a, b in possible_ab if a == 0 or b == 0]\n    possible_ns = [75 * (3**c * 5**d) for c, d in possible_cd if c == 0 or d == 0]\n\n    # Since we're looking for the sum of M and N, and each only has one valid representation\n    # because there's only one pair of a,b or c,d that satisfies the constraints without adding extra prime factors.\n    M = possible_ms[0]\n    N = possible_ns[0]\n\n    # The sum of M and N is what we want\n    return M + N\n\nans = solution()"
    ],
    "b65a5554264043bb99d0c4476d46daa7": [
        "def solution():\n    full_length = 10 + 4 / 5\n    short_rod_length = 3 / 10\n    \n    num_short_rods = full_length / short_rod_length\n    \n    return int(num_short_rods)\n\nans = solution()"
    ],
    "604b32ec4594413a9da6ea7f419a86e6": [
        "def solution():\n    single_laptop_cost = 149.99\n    deal_cost = 2800\n    num_laptops_wanted = 20\n    num_laptops_deal = 30\n\n    cost_without_deal = single_laptop_cost * num_laptops_wanted\n    cost_per_laptop_deal = deal_cost / num_laptops_deal\n    saving_per_laptop = single_laptop_cost - cost_per_laptop_deal\n    total_saving = saving_per_laptop * num_laptops_wanted\n\n    return round(total_saving, 2)\n\nans = solution()"
    ],
    "2d9fc3817dca46ac92eaa73adac8ada7": [
        "def solution():\n    # Owen trades 10 fish for 4 rabbits: 10 fish / 4 rabbits\n    fish_per_rabbit = 10 / 4\n    \n    # Oscar trades 5 rabbits for 6 packs of wheat: 5 rabbits / 6 packs\n    rabbits_per_pack = 5 / 6\n    \n    # Find the number of fish per pack of wheat by multiplying the ratios\n    fish_per_pack = fish_per_rabbit / rabbits_per_pack\n    \n    # Owen needs to give for 12 packs of wheat\n    fish_for_12_packs = fish_per_pack * 12\n    \n    return int(fish_for_12_packs)\n\nans = solution()"
    ],
    "6422450ba3314b00956e086caa019113": [
        "def solution():\n    original_price = 125\n    discount_percentage = 35\n    discount_amount = (discount_percentage / 100) * original_price\n    sale_price = original_price - discount_amount\n    return sale_price\n\nans = solution()"
    ],
    "558a4fe5c5fe460f838fa7deae63c54b": [
        "def solution():\n    hourly_wage = 5.12\n    hours_worked = 8\n\n    total_earnings = hourly_wage * hours_worked\n\n    return total_earnings\n\nans = solution()"
    ],
    "6d6721335237466b8bf898c20f70285f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let `p` be the number of penguins\n    p = symbols('p', integer=True)\n    # Let `f` be the total number of fish\n    f = symbols('f', integer=True)\n\n    # If the staff gives 3 fish to each of the penguin, there will be 5 fish left.\n    equation1 = Eq(3 * p + 5, f)\n\n    # If the staff gives 4 fish to each of the penguin, 15 more fish are still needed.\n    # This means that the total number of fish is 15 less than 4 times the number of penguins.\n    equation2 = Eq(4 * p - 15, f)\n\n    # Solving the system of equations for p (number of penguins)\n    solutions = solve((equation1, equation2), (p, f))\n\n    return solutions[p]\n\nans = solution()"
    ],
    "6d6c627dff57484693f832331a8fed28": [
        "from math import factorial as fact\n\ndef solution():\n    # Since there must be at least 1 singing performance between every 2 dancing performances,\n    # consider all the dancing performances (D) first: D_D_D_D\n    # There are 5 positions (denoted by 'p') where singing performances (S) can be placed: Dp_Dp_Dp_Dp_D\n    # Since we have 6 singing performances, and we need at least one in each of the 4 positions,\n    # we have 6 - 4 = 2 singing performances left to distribute among the 5 positions.\n    # This is equivalent to placing 2 indistinguishable items into 5 distinguishable boxes,\n    # which is a stars and bars problem, also known as a combination with repetition.\n\n    # Calculate combinations with repetitions for 2 indistinguishable items (singing performances)\n    # into 5 distinguishable boxes (positions): C(n + k - 1, k)\n    # where n = 5 (boxes/positions), k = 2 (items/singing performances)\n    n_boxes = 5\n    k_items = 2\n    combinations = fact(n_boxes + k_items - 1) // (fact(k_items) * fact(n_boxes - 1))\n\n    # Calculate the permutations of all 6 singing performances within themselves.\n    # Since all singing performances are distinct, this is simply 6!\n    singing_permutations = fact(6)\n\n    # Since the dancing performances are fixed in terms of occurence between singing performances,\n    # no further permutations are needed for dancing performances.\n\n    # The total number of combinations is the number of ways to distribute the singing performances\n    # between dance performance multiplied by the permutations of singing performances.\n    return combinations * singing_permutations\n\nans = solution()"
    ],
    "c408c811fcb041b3aa27099ad68703f4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(28 - 3 * (24 - 5 * x), 1)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "01b4b64e032345db96ca5a028d2343db": [
        "def solution():\n    result_after_subtracting = -14\n    subtracted_instead_of_adding = 26\n    actual_subtraction = -(subtracted_instead_of_adding)  # reversing the subtraction\n\n    correct_result = result_after_subtracting - actual_subtraction + (subtracted_instead_of_adding * 2)\n    return correct_result\n\nans = solution()"
    ],
    "0dd1e1e4796044aeb251dbf0652d6b52": [
        "def solution():\n    ans = 322 - ((95 - 87) * 16)\n    return ans\n\nans = solution()"
    ],
    "25b73873a475424bb2c3460ea7370ffc": [
        "def solution():\n    matthew_height = 120\n    ratio_matthew = 4\n    ratio_kelly = 5\n\n    kelly_height = (matthew_height / ratio_matthew) * ratio_kelly\n\n    return kelly_height\n\nans = solution()"
    ],
    "6dead3e618154fcda9ed1a944c4d862e": [
        "def solution():\n    return 35 / 100 * 80\n\nans = solution()"
    ],
    "056eb54e02ef4e86834ab49cf3cc01b4": [
        "def solution():\n    ans = 689 // 13\n    return ans\n\nans = solution()"
    ],
    "61bb0063c0734b36a1996af254e6fb90": [
        "def solution():\n    total_cards = 56\n    fraction_lost = 3 / 8\n\n    cards_lost = total_cards * fraction_lost\n\n    return int(cards_lost)\n\nans = solution()"
    ],
    "02bd6a91ac214217ad925716b17c6508": [
        "def solution():\n    for a in range(1, 10):  # 'a' cannot be 0 because it's a digit in the hundreds place of 'aab'\n        for b in range(10):  # 'b' can be from 0 to 9 because it's a digit in the tens or ones place\n            if 10*a + b + 10*b + a + b == 100*a + 10*a + b:\n                return a + b\n\nans = solution()"
    ],
    "ada569f0735e44a5b658b942af33e959": [
        "def solution():\n    count = 0\n    # The possible scores at half time can range from 0 to the final score for each team\n    for team1_ht in range(4):  # Since team1 scored 3 in total, half-time score can be 0 to 3\n        for team2_ht in range(3):  # Since team2 scored 2 in total, half-time score can be 0 to 2\n            # The score at half time cannot be greater than the final score\n            if team1_ht <= 3 and team2_ht <= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "2789484c36cf4e54b28be43d05009e13": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    emma = symbols('emma')\n    clara = 5 * emma\n    equation = Eq(clara + emma, 1002)\n\n    solution = solve(equation, emma)\n\n    return solution[emma]\n\nans = solution()"
    ],
    "d3a2000bbe0d4458a84669bc22de18a2": [
        "from math import comb\n\ndef solution():\n    number_of_students = 6\n    number_of_monitors = 2\n    \n    ways = comb(number_of_students, number_of_monitors)\n\n    return ways\n\nans = solution()"
    ],
    "879e5feaeecc4a8ea542b447bc7e8fce": [
        "def solution():\n    full_weight = 80\n    half_full_weight = 60\n    \n    weight_of_half_mangoes = full_weight - half_full_weight\n    empty_basket_weight = half_full_weight - weight_of_half_mangoes\n\n    return empty_basket_weight\n\nans = solution()"
    ],
    "b6d07c1739e540859bca83cddbe021fd": [
        "def solution():\n    percentage = 85 / 100\n    amount = 400\n    result = percentage * amount\n    return result\n\nans = solution()"
    ],
    "31f14949d8114ab8a17cdccc2df7d350": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let g represent the total number of girls and b represent the total number of boys\n    g, b = symbols('g b')\n\n    # 3/8 of the girls can swim, therefore 5/8 cannot\n    # 3/5 of the boys can swim, therefore 2/5 cannot\n    # 20 pupils in total cannot swim and there is an equal number of boys and girls who cannot swim\n    eq1 = Eq((5/8)*g + (2/5)*b, 20)\n    # The problem states that there is an equal number of boys and girls who cannot swim (5/8)*g == (2/5)*b\n    eq2 = Eq((5/8)*g, (2/5)*b)\n\n    # Solve the system of equations for g and b\n    solutions = solve((eq1, eq2), (g, b))\n\n    # Total number of pupils in the class is the sum of boys and girls\n    total_pupils = solutions[g] + solutions[b]\n\n    return total_pupils\n\nans = solution()"
    ],
    "cd20ea5fd0f64dad8fea2ee8adb41891": [
        "def solution():\n    # Since the position is always 2nd, this means the number of rows and columns\n    # must be more than 1 and his position should not be on the border.\n\n    # Start with two loops to iterate over potential dimensions of the rectangle\n    count = 0\n    for rows in range(2, 100): # Reasonable upper limit assuming a normal class size\n        for cols in range(2, 100):\n            # The total number of students is rows * cols\n            total_students = rows * cols\n            # Mike's position from front to back and left to right is always 2nd\n            # Which means Mike can't be in the first or last row or column\n            # Therefore, check all positions except for the border positions\n            for row in range(1, rows - 1):\n                for col in range(1, cols - 1):\n                    # Check Mike's position. It will be 2nd when he has exactly\n                    # one student ahead of him in rows as well as columns.\n                    if (row * cols + col + 1) == 2 and ((rows - row - 1) * cols + (cols - col) + 1) == 2:\n                        count = total_students\n                        # We found the class size, no need to continue searching\n                        return count\n    return count\n\nans = solution()"
    ],
    "c322675f6c904cb28fcb4d8fcdeea6df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(8.5 - 4*(x-1.5) + 3.2*(x-2), 2.5*x + 3*(2.5 - x))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e59a69364151431da70cfdb7b285eac6": [
        "def solution():\n    return 32 * 125 * 23\n\nans = solution()"
    ],
    "42e36157dca7436e992427566b464adc": [
        "def solution():\n    speed_still_water = 33\n    speed_current = 3\n    distance = 150\n\n    speed_upstream = speed_still_water - speed_current\n    time_upstream = distance / speed_upstream\n\n    return time_upstream\n\nans = solution()"
    ],
    "d40f5cb1f6a24d038e89fe06cd993eb4": [
        "def solution():\n    number = 6 * 5\n    percentage_of_40 = (number * 100) / 40\n    return percentage_of_40\n\nans = solution()"
    ],
    "813f3075f35d4821a1a7fc16e2f6d52b": [
        "def solution():\n    ans = 5 * 57 * 4\n    return ans\n\nans = solution()"
    ],
    "103d552fb6da4c0783be7a342f20b8bc": [
        "def solution():\n    cost_per_cup = 30 / 3\n    total_cost_for_5_cups = cost_per_cup * 5\n    return total_cost_for_5_cups\n\nans = solution()"
    ],
    "43a325f2110643bc915bdc94e8f7b758": [
        "def solution():\n    total_rabbits = 38\n    big_houses = 5\n    small_houses = 9\n    \n    rabbits_in_big_houses = big_houses * 4\n    remaining_rabbits = total_rabbits - rabbits_in_big_houses\n    \n    rabbits_per_small_house = remaining_rabbits / small_houses\n    \n    return rabbits_per_small_house\n\nans = solution()"
    ],
    "308e0096e80b4f19bf3d9b5c553a195d": [
        "def solution():\n    average_daily_earnings = 60\n    number_of_days = 7  # Monday to Sunday, inclusive\n    total_earnings = average_daily_earnings * number_of_days\n    return total_earnings\n\nans = solution()"
    ],
    "65f6b4e0577647579449a1aa4cc3fa40": [
        "def solution():\n    ans = 0\n    for i in range(1, 9):\n        if i % 2 == 0:\n            ans += (i**2 - (i - 1)**2)\n        else:\n            ans -= (i**2 - (i - 1)**2)\n    return ans\n\nans = solution()"
    ],
    "b1efeaefd31345e39a5a87a2bb5673a9": [
        "def solution():\n    total_children = 234\n    absent_children = 75\n    present_children = total_children - absent_children\n    return present_children\n\nans = solution()"
    ],
    "9d723089837f477db7a98fc0d0033d94": [
        "def solution():\n    result = 526 * 4\n    return result\n\nans = solution()"
    ],
    "4b507d02ac2f4e03895bd099fa8097c8": [
        "def solution():\n    average_per_month = 15\n    total_months = 5  # From March to July is 5 months\n    total_pizzas = average_per_month * total_months\n    return total_pizzas\n\nans = solution()"
    ],
    "8aa18ff22f444b93b44cb12fdcc6688e": [
        "def solution():\n    # lets denote the number of ways to reach step n as ways(n)\n    # Base cases:\n    # ways(0) just one way, to stand on the ground\n    # ways(1) only one way, to take one step\n    # ways(2) two ways: (1, 1) or (2)\n    # ways(3) four ways: (1, 1, 1), (1, 2), (2, 1), (3)\n    ways = [1, 1, 2, 4]\n    \n    # Now we do the inductive step, using the fact that\n    # ways(n) = ways(n-1) + ways(n-2) + ways(n-3)\n    for n in range(4, 7):\n        ways.append(ways[n-1] + ways[n-2] + ways[n-3])\n    \n    return ways[6]\n\nans = solution()"
    ],
    "340fa54260fb43788db3cac05726737c": [
        "def solution():\n    total_sum = 21 + 22 + 23\n    factors = [i for i in range(1, total_sum+1) if total_sum % i == 0]\n    for f in factors:\n        if f != 1 and f != total_sum and total_sum == 2*3*f:\n            ans = f\n            break\n    return ans\n\nans = solution()"
    ],
    "5206643ac0d74672bd7f51f36c05b327": [
        "def solution():\n    return 21 + 27 + 19 - 17\n\nans = solution()"
    ],
    "6a0715adbecf4e6d977379c6d8e8b693": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    abigail, ryan = symbols('abigail ryan')\n\n    equation1 = Eq(abigail, 3 * ryan)\n    equation2 = Eq(abigail + 6, 42)\n\n    solutions = solve((equation1, equation2), (abigail, ryan))\n\n    ryan_age_in_2_years = solutions[ryan] + 2\n    \n    return ryan_age_in_2_years\n\nans = solution()"
    ],
    "a63c3f97f6f747fb8f6167272df4d9e0": [
        "def solution():\n    answer = 20.2 * 3.83 + 2.02 * 143.7 + 18.2 * 79.8\n    return answer\n\nans = solution()"
    ],
    "db1980b14fff4be98f10937c9ad2d0bb": [
        "def solution():\n    speed_ship = 33  # speed of the ship in still water in km/h\n    speed_current = 3  # speed of the current in km/h\n\n    # speed of the ship upstream is the speed in still water minus the speed of the current\n    speed_upstream = speed_ship - speed_current\n\n    distance = 150  # distance to travel upstream in km\n\n    # time = distance / speed\n    time = distance / speed_upstream\n\n    return time  # time in hours\n\nans = solution()"
    ],
    "7b0029bc1a5e4ae98eb2f317f91d9e07": [
        "def solution():\n    return (3.5 + 6.9) / 2\n\nans = solution()"
    ],
    "61e1de37a14f48a6991bab9a2d3a4694": [
        "def solution():\n    # We want to find the smallest number that satisfies the following conditions:\n    # The number has a remainder of 2 when divided by 3\n    # The number has a remainder of 3 when divided by 4\n    # The number has a remainder of 4 when divided by 5\n    \n    # We can use the Chinese Remainder Theorem for this, but because the search space is small\n    # (positive whole numbers less than 100), we can simply iterate through the numbers and check the conditions.\n    \n    for x in range(1, 100):\n        if x % 3 == 2 and x % 4 == 3 and x % 5 == 4:\n            return x\n\nans = solution()"
    ],
    "6e6e70f8c762461081d8768c9cd5d599": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    drink, popcorn = symbols('drink popcorn')\n    \n    # Each equation represents the total cost of the items\n    equation1 = Eq(drink + popcorn, 90)    # The cost of one drink and one box of popcorn is 90p\n    equation2 = Eq(2 * drink + popcorn, 145)  # The cost of two drinks and one box of popcorn is 145p\n    \n    # Solve the system of equations for the cost of a drink and a box of popcorn\n    solution = solve((equation1, equation2), (drink, popcorn))\n    \n    return solution[popcorn]    # Return the cost of the box of popcorn\n\nans = solution()"
    ],
    "2ef08403147440cebc886fef6d923504": [
        "def solution():\n    first_multiple = (56 // 4) * 4\n    if first_multiple < 56:\n        first_multiple += 4\n    last_multiple = (92 // 4) * 4\n\n    num_multiples = (last_multiple - first_multiple) // 4 + 1\n\n    return num_multiples\n\nans = solution()"
    ],
    "938865d708b54013bdffe7745f3c071e": [
        "def solution():\n    first_term = 2\n    last_term = 50\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_series\n\nans = solution()"
    ],
    "ff21b342853b4526901990586afdd9a1": [
        "def solution():\n    ans = 0\n    sign = 1\n    for i in range(60, 0, -1):\n        ans += i * sign\n        if i % 4 == 0:\n            sign *= -1\n    return ans\n\nans = solution()"
    ],
    "9566235419c644bda8f4a29fbdf4e32d": [
        "def solution():\n    return 80 * 125 * 63\n\nans = solution()"
    ],
    "2dc1cabb496241cf9e53891c8379b8e2": [
        "def solution():\n    return 526 * 4\n\nans = solution()"
    ],
    "243b6cce4d9f45acafd03f1040ae77c4": [
        "def solution():\n    # Base digit for ones calculation\n    base = 9\n    \n    # Exponent\n    exponent = 99\n    \n    # Since we only care about the ones digit, we can simplify the problem\n    # by observing the pattern of ones digits in powers of 9\n    # For example, 9^1 = 9 (ones digit is 9), 9^2 = 81 (ones digit is 1),\n    # 9^3 = 729 (ones digit is 9), 9^4 = 6561 (ones digit is 1), and so on.\n    # we can observe that any power of 9 if even will give a one digit, if odd it gives 9.\n    \n    # The ones digit for any power of 9 alternates between 9 and 1.\n    # Since 99 is odd, the ones digit of 9^99 will be the same as that of 9^1, which is 9.\n    \n    # Therefore, the ones digit of 999^99 will be 9\n    ones_digit = 9\n    \n    return ones_digit\n\nans = solution()"
    ],
    "d40d9028269a40b1a074fb83c6e6f359": [
        "def solution():\n    # Let's denote Claire's current age as \"age_now\".\n\n    # According to the problem:\n    # Claire's age in 6 years = 3 * Claire's current age\n    # This can be written as: age_now + 6 = 3 * age_now\n\n    # Solving this equation, we get:\n    age_now = (age_now + 6) // 3\n\n    # We want to find Claire's age 2 years from now, which will be:\n    age_in_2_years = age_now + 2\n\n    return age_in_2_years\n\n# We can solve the algebraic equation directly here,\n# as the equation is simple enough to not require an algebra solver.\n# We know that age_now + 6 = 3 * age_now,\n# so 6 = 2 * age_now,\n# so age_now = 6 // 2 = 3.\n# Therefore, age_in_2_years = age_now + 2 = 3 + 2 = 5.\n\nage_now = 3\nans = solution()"
    ],
    "e488c808a03c473b9671ebeb77e0b942": [
        "def solution():\n    # Perform the calculation\n    ans = (4/15) - (7/10) + (11/15) - (3/10)\n    return ans\n\nans = solution()"
    ],
    "4674fd3d4c514026b6edb3199c9264fa": [
        "def solution():\n    year = 2022\n    while True:\n        year += 1\n        if set(str(year)) <= {'0', '2'}:\n            return year - 2022\n\nans = solution()"
    ],
    "51057b69aa2149679627b1da24beca2b": [
        "def solution():\n    total = 5.42 * 25\n    part = 5.42 * 5\n    missing_number = (total - part) / 5.42\n    return missing_number\n\nans = solution()"
    ],
    "b2d9b3a92e1e4767a2f8078a10ceb071": [
        "def solution():\n    coin_values = [200, 100, 50, 20, 10, 5, 2, 1]  # pence\n    amount_to_change = 200 - 44  # The smallest note is £2 which is 200p\n    num_coins = 0\n    for coin in coin_values:\n        while amount_to_change >= coin:\n            amount_to_change -= coin\n            num_coins += 1\n        if amount_to_change == 0:\n            break\n    return num_coins + 1  # Adding one for the £2 coin Susan gives to the driver\n\nans = solution()"
    ],
    "494ec1b29a6b4fa3a72a5c3c403e4f01": [
        "def solution():\n    # Let t be the actual journey time in minutes\n    # The train journey took 11/12 of the intended time\n    # The train also arrived 5 minutes late\n    # On top of that, the train left 15 minutes late, so in total it made up 10 minutes\n    # Therefore, we have the equation: actual_time = (11/12) * intended_time - 10\n\n    # Let x be the intended time\n    # Writing down the equation: t = (11/12) * x - 10\n    # But we know that t = x + 5 because the train was late by 5 minutes\n    # Substituting into the equation: x + 5 = (11/12) * x - 10\n    # Simplifying: x - (11/12) * x = -10 - 5\n    # x * (1 - (11/12)) = -15\n    # x * (1/12) = -15\n    # x = -15 * 12\n\n    intended_time = -15 * 12\n    # The negative sign doesn't make sense in this context, so we take the absolute value\n    intended_time = abs(intended_time)\n\n    return intended_time\n\nans = solution()"
    ],
    "977dd4a7f9a847319b7cce1778764124": [
        "def solution():\n    total_sweets = 420\n    people = 17\n\n    sweets_per_person = total_sweets // people\n    \n    return sweets_per_person\n\nans = solution()"
    ],
    "e77d21bed25146b6a602d491b8b1dd35": [
        "def solution():\n    # One chicken has 2 legs\n    legs_per_chicken = 2\n    \n    # Total number of chickens on Tom's farm\n    total_chickens = 9\n    \n    # Total number of legs\n    total_legs = legs_per_chicken * total_chickens\n    \n    return total_legs\n\nans = solution()"
    ],
    "fa054be2367d41a5a66f84ddf604783c": [
        "def solution():\n    return 18 - 12\n\nans = solution()"
    ],
    "fcc1c6b6be6b4c52b0c513c00e208621": [
        "def solution():\n    total_distance = 9\n    day_distance = 3\n    night_distance = -1\n    days = 0\n    current_distance = 0\n    \n    while current_distance < total_distance:\n        days += 1\n        current_distance += day_distance\n        if current_distance >= total_distance:\n            break\n        current_distance += night_distance\n    \n    return days\n\nans = solution()"
    ],
    "b5d10eac540a45de8714ae1313e250a8": [
        "def solution():\n    # To ensure 4 marbles of different colors, Jane must draw at least:\n    # - 1 red marble (worst case she picks all red marbles first)\n    # - 1 green marble (worst case she then picks all green marbles)\n    # - 1 blue marble (worst case she then picks all blue marbles)\n    # - 1 orange marble (since she can only pick at most 1 before getting a different color)\n    # However, to ensure that she has one of each, we have to account for the worst-case scenario.\n    # This means that she could pick the max amount of each of the other colors before the last one.\n    \n    # First pick the maximum of the first three colors (since they have more than 1 marble)\n    max_three_colors = max(4, 7, 6)\n    \n    # Then add 1 for the orange marble which only has 2, ensuring the 4th color\n    # But because she could get an orange marble earlier, we need to subtract one from our max count\n    # since we don't have to account for the scenario of pulling all of one color if we already got orange\n    marbles_to_draw = (max_three_colors - 1) * 3 + 1\n    \n    return marbles_to_draw\n\nans = solution()"
    ],
    "2718b4f1a9754ccaa68760b5effe4800": [
        "def solution():\n    result = 7052 + 832 - 523\n    return result\n\nans = solution()"
    ],
    "930f7e9ace4f4e9abfa6c69bf0acf8ba": [
        "def solution():\n    # Initialize the first two terms of the sequence based on the given pattern\n    a, b = 2, 3\n\n    # Continuously calculate the next term in the sequence\n    # by adding the current term to the previous term\n    while b < 100:  # Loop until we find the first three-digit number\n        a, b = b, a + b\n    \n    return b\n\nans = solution()"
    ],
    "4dbef50f0cc443289ac166137fd5b410": [
        "from math import factorial as f\n\ndef nCr(n, r):\n    return f(n) // (f(r) * f(n - r))\n\ndef solution():\n    # Since each child must get at least one book, we give one book to each child first.\n    remaining_books = 19 - 4\n\n    # Now we have to distribute the remaining 15 books to 4 children. This is equivalent to\n    # placing 3 dividers among the 15 books, which represents distributing the books to the 4 children.\n    # This is a problem of combinations with repetitions also known as stars and bars problem.\n\n    # The number of ways to distribute remaining_books among 4 children is same as the number of ways\n    # to insert 3 dividers in the sequence of remaining_books.\n    # That is choosing 3 positions from remaining_books + 3 dividers\n\n    ans = nCr(remaining_books + 3, 3)\n    return ans\n\nans = solution()"
    ],
    "32f6acf1aa344c2bbe62ce981053863f": [
        "def solution():\n    # Let x be the number of students who like both sports.\n    # Total number of students who like football is 3x.\n    # Total number of students who like basketball is 4x.\n    # Total number of students in the class is 36.\n    # Using the Inclusion-Exclusion Principle: Total = Football + Basketball - Both\n    \n    # Hence the equation is: 36 = 3x + 4x - x\n    x = symbols('x')\n    equation = Eq(3*x + 4*x - x, 36)\n    number_both_sports = solve(equation, x)\n    \n    return number_both_sports[0]\n\nans = solution()"
    ],
    "71cf4cae85d941ca996a445c85a2b4af": [
        "def solution():\n    ans = (72 - 4) * 6 // 3\n    return ans\n\nans = solution()"
    ],
    "48433bd7096b4db2b8a0bc0666b48b61": [
        "def solution():\n    # Number of ways to distribute n identical items into r distinct groups\n    # such that no group is empty is given by the formula: C(n-1, r-1)\n    from math import comb\n\n    n = 6  # identical pens\n    r = 3  # different colour pencil cases\n\n    # Since no pencil case can be empty, we are looking for combinations of\n    # splitting n identical items into r groups, which is equivalent to\n    # placing r-1 dividers among n-1 spaces.\n    ans = comb(n-1, r-1)\n\n    return ans\n\nans = solution()"
    ],
    "d23bc459c7eb40fca3869160d4d63e83": [
        "def solution():\n    sum_diff = 0\n    for i in range(2, 41, 4):\n        sum_diff += (i + 2)**2 - i**2\n    return sum_diff\n\nans = solution()"
    ],
    "0e7fb5a8438d409db8fc8721b6c9b013": [
        "def solution():\n    milk_per_cup = 1 / 6\n    cups_needed = 30\n    gallons_needed = milk_per_cup * cups_needed\n\n    return gallons_needed\n\nans = solution()"
    ],
    "0ad7378f865243469246236c3c58c016": [
        "def solution():\n    people_in_front_of_pip = 9\n    people_behind_bud = 10\n    pip_and_bud = 2\n\n    total_people = people_in_front_of_pip + people_behind_bud + pip_and_bud\n\n    return total_people\n\nans = solution()"
    ],
    "104d6bb537274c5aad38cc4c6f3475dc": [
        "def solution():\n    return 68 + 75\n\nans = solution()"
    ],
    "27cc7102419c4252a0693643e0aafd5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C, D = symbols('A B C D')\n    equation1 = Eq(A, 5 * B)\n    equation2 = Eq(B, C + 5)\n    equation3 = Eq(C + D, A)\n    equation4 = Eq(D, 41)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (A, B, C, D))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "d57aa24f90f445c5abf13b469d1984b6": [
        "def solution():\n    kg_to_g = 1000\n    total_g = (2.49 * kg_to_g) + 670 + (3 * kg_to_g) + 80\n    return total_g\n\nans = solution()"
    ],
    "d558457c695c422cb8038f4d788d1b1d": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    # Generate all combinations of yyyymmdd where yyyy = 2014 and mmdd are variable\n    for mmdd in permutations('0123456789', 4):\n        if mmdd[0] == '0': # Skip if month starts with 0\n            continue\n        mm = int(mmdd[0] + mmdd[1])\n        dd = int(mmdd[2] + mmdd[3])\n        if 1 <= mm <= 12 and 1 <= dd <= 31:\n            if mm in [4, 6, 9, 11] and dd > 30: # For months with 30 days\n                continue\n            if mm == 2 and (dd > 28 or (dd == 29 and not is_leap_year(2014))): # February check\n                continue\n            # Count equal occurrences of 0, 1, 2 (excluding the fixed 2014)\n            if ('2014' + ''.join(mmdd)).count('0') == ('2014' + ''.join(mmdd)).count('1') == ('2014' + ''.join(mmdd)).count('2'):\n                count += 1\n    return count\n\n# Leap year checker function:\ndef is_leap_year(year):\n    if year % 4 != 0:\n        return False\n    elif year % 100 != 0:\n        return True\n    elif year % 400 != 0:\n        return False\n    else:\n        return True\n\nans = solution()"
    ],
    "b36c4f44ee6d4d5f8f83c706b3da11e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    both_sports = symbols('both_sports')\n    football_only = 3 * both_sports\n    basketball_only = 4 * both_sports\n\n    equation = Eq(football_only + basketball_only - both_sports, 36)\n\n    solution = solve(equation, both_sports)\n\n    return int(solution[0])\n\nans = solution()"
    ],
    "96ce69b25ffc4f6ba38c21545d6733a1": [
        "def solution():\n    known_numbers = [4, 5, 6, 9, 3, 9]\n    average = 6\n    known_sum = sum(known_numbers)\n    total_numbers = 8\n    total_sum = average * total_numbers\n\n    p_and_q_sum = total_sum - known_sum\n    # Since q is the highest, to minimize q, we maximize p\n    # The highest value - lowest value = 6, and 3 is the lowest in the known numbers\n    p_max = 3 + 6\n    \n    # To maximize p, we take the highest value it could possibly be, which is equal to q - 1\n    # p < q implies the lowest possible q is when p is maximized and equal to p_max - 1\n    q_min = p_and_q_sum - p_max\n    return q_min\n\nans = solution()"
    ],
    "df09ff6de9a24b87ad2cf9a7a605db3d": [
        "def solution():\n    total_exercise_time = 60  # total time Peter exercises in minutes\n    cycling_time_fraction = 1 / 3\n    jogging_time = total_exercise_time * (1 - cycling_time_fraction)\n\n    return int(jogging_time)\n\nans = solution()"
    ],
    "750fd66718534733b8ee051343e835e2": [
        "def solution():\n    first_term = 2\n    difference = 5\n    n = 21\n\n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "eabcf3964b4a496a8ef64c1ebb4291fb": [
        "def custom_operation(a, b):\n    return ((a * b + 16) / (a + b)) ** 2\n\ndef solution():\n    result = custom_operation(custom_operation(custom_operation(1, 2), 3), 4)\n    final_result = custom_operation(result, 5)\n    ans = int(final_result)\n    return ans\n\nans = solution()"
    ],
    "36c0726e53b4423887ba038a9a8b7de4": [
        "def solution():\n    # speed of Adam\n    adam_speed = 60  # km/h\n    # speed of Jacob\n    jacob_speed = 80  # km/h\n    \n    # Jacob reached home after 3 hours\n    # distance covered by Jacob\n    jacob_distance = jacob_speed * 3  # km\n    \n    # Adam still had another 30 minutes (0.5 hours) before reaching home\n    # total time taken by Adam to reach home is 3 hours + 30 minutes = 3.5 hours\n    # distance covered by Adam\n    adam_distance = adam_speed * 3.5  # km\n    \n    # Since they are moving in opposite directions, their homes are apart by sum of distances\n    distance_apart = jacob_distance + adam_distance  # km\n    \n    return distance_apart\n\nans = solution()"
    ],
    "779097010de347adac3173e788b818b1": [
        "def solution():\n    total_cakes = 50\n    total_layers = 9\n\n    # Using the Pigeonhole Principle, we divide the cakes among the layers\n    cakes_in_most_populated_layer = (total_cakes + total_layers - 1) // total_layers\n\n    return cakes_in_most_populated_layer\n\nans = solution()"
    ],
    "cf8db366b2f64605b21b99daa35db369": [
        "def solution():\n    gst_percent = 7\n    total_paid = 0.91\n    cost_before_gst = total_paid / (1 + gst_percent / 100)\n    return round(cost_before_gst, 2)\n\nans = solution()"
    ],
    "2b16d73352954ba2b572f2ae9c2c1fd1": [
        "def solution():\n    # Prime factorization of 252 is 2^2 * 3^2 * 7^1\n    # The formula to find the number of factors is to add 1 to each of the exponents of the prime factors and multiply them together.\n    factors_count = (2 + 1) * (2 + 1) * (1 + 1)\n    return factors_count\n\nans = solution()"
    ],
    "f2cc6bf5eb964e03b4744beef89de39f": [
        "def solution():\n    # According to the pigeonhole principle, in the worst case scenario,\n    # Lucy needs to take out 3 marbles to guarantee 2 of the same color.\n    # This is because if she takes out one blue and one yellow initially,\n    # the third marble taken out must match one of the already taken marbles.\n\n    return 3\n\nans = solution()"
    ],
    "c587b2c5f5344744bff9a00aad6cea06": [
        "def solution():\n    kg_to_g = 1000\n    total_weight = (2.49 * kg_to_g) + 670 + (3 * kg_to_g) + 80\n    return int(total_weight)\n\nans = solution()"
    ],
    "ec2f787ddc4f496c8e1670044fcde021": [
        "def solution():\n    total_exercise_time = 60  # 1 hour converted into minutes\n    cycling_fraction = 1 / 3\n    cycling_time = cycling_fraction * total_exercise_time\n    jogging_time = total_exercise_time - cycling_time\n\n    return jogging_time\n\nans = solution()"
    ],
    "67374cb1f2b44b8594ce58b7c2757c30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin = symbols('justin')\n    equation = Eq(justin + 18, 4 * (justin - 6))\n\n    solution_age = solve(equation, justin)\n\n    return solution_age[0]\n\nans = solution()"
    ],
    "af56a6fc059e429192ef55675e57c67c": [
        "def solution():\n    num_shirts = 2\n    num_skirts = 2\n    \n    # Multiply the possibilities of choosing shirts and skirts\n    num_outfits = num_shirts * num_skirts\n    \n    return num_outfits\n\nans = solution()"
    ],
    "0d3f4384ce58444a89f0b0451c47a86a": [
        "from math import lcm\n\ndef solution():\n    # Find the least common multiple of the times it takes for each to complete a lap\n    meet_time_seconds = lcm(56, 80, 105)\n    \n    # Convert the meet_time_seconds to hours, minutes and seconds\n    hours = meet_time_seconds // 3600\n    minutes = (meet_time_seconds % 3600) // 60\n    seconds = meet_time_seconds % 60\n    \n    # Calculate the next meeting time starting from 10:00 a.m.\n    next_meet_hour = 10 + hours\n    next_meet_minute = minutes\n    next_meet_second = seconds\n\n    return f\"{next_meet_hour:02d}:{next_meet_minute:02d}:{next_meet_second:02d}\"\n\nans = solution()"
    ],
    "f2faa17dbd4546fe9f05e0ca1b14be52": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12 - (3*x - 4), x)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e24a897f0dea4a47950e3faa1cdaf6d1": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "340b86ff5e0b464289776aeb6627ceff": [
        "def solution():\n    total_apples = 30\n    children = 6\n    # As we want the one who gets the most to have as many as possible,\n    # we distribute apples starting from 1 to other children first.\n    # We will have 1+2+3+4+5 apples distributed to the first five children,\n    # and the rest will go to the last child.\n    apples_distributed_to_others = sum(range(1, children))\n    max_apples_for_last_child = total_apples - apples_distributed_to_others\n\n    return max_apples_for_last_child\n\nans = solution()"
    ],
    "f475cb94110941b287259508a63a9ff8": [
        "def solution():\n    return 3017 + 4962\n\nans = solution()"
    ],
    "a4af03b27daa4f28856b42ba428afc2d": [
        "def solution():\n    # To ensure getting 2 M&M's chips of different colors, Bart has to take out at least\n    # one chip of each color. Since there are more brown chips than the other two colors,\n    # the worst case would be if he takes out all yellow and red chips first.\n    red_chips = 3\n    yellow_chips = 4\n    # Since he wants two of different colors, he has to take all of one color and at least one of another.\n    # This guarantees two different colors, because if we exceed the number of any two colors, we will\n    # definitely have at least one chip of the third color.\n    min_chips = red_chips + 1\n\n    return min_chips\n\nans = solution()"
    ],
    "333aed92d083437e97962341c0e3e05c": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"24572{digit}\")\n        if number % 7 == 0:\n            return number\n\nans = solution()"
    ],
    "a11a7f4df40f40c8820fc6e6e0c78560": [
        "def solution():\n    return 9039 + 93\n\nans = solution()"
    ],
    "9ed706ba39e2411fba6e6de96d5ecfd7": [
        "def solution():\n    ans = sum([i**2 for i in range(1, 20, 2)])\n    return ans\n\nans = solution()"
    ],
    "41fb6eaf263648dd86dc9ac6a43a72f3": [
        "def solution():\n    carrots_per_day_per_rabbit = 4\n    rabbits = 8\n    days = 5\n    total_carrots = carrots_per_day_per_rabbit * rabbits * days\n    return total_carrots\n\nans = solution()"
    ],
    "b4ccb4b4d7b14da0aad36bfe517a8484": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "5b6e52b88b774ca78d70e6c94d7bdc3f": [
        "def solution():\n    # Converting numbers from base 10 to base 7 and adding them\n    base7_num1 = int(str(45), 7)\n    base7_num2 = int(str(66), 7)\n\n    # Adding the numbers in base 10\n    sum_base10 = base7_num1 + base7_num2\n\n    # Converting the sum back to base 7\n    if sum_base10 == 0:\n        return \"0\"\n\n    ans = ''\n    while sum_base10 > 0:\n        ans = str(sum_base10 % 7) + ans\n        sum_base10 //= 7\n\n    return ans\n\nans = solution()"
    ],
    "dd9b6244a4c4445bb632f0876b616353": [
        "def solution():\n    chinese_restaurants = 9\n    mexican_restaurants = 3\n    fast_food_restaurants = 2\n\n    total_choices = chinese_restaurants + mexican_restaurants + fast_food_restaurants\n    \n    return total_choices\n\nans = solution()"
    ],
    "f297a90915044281a14d6377f0457a4f": [
        "def solution():\n    # The sequence seems to be a geometric sequence where each term\n    # is 3 times the previous term. \n    # 1 x 3 = 3\n    # 3 x 3 = 9 (this should be the missing number)\n    # 9 x 3 = 27\n    # 27 x 3 = 81\n    \n    # Therefore, the missing term in the sequence is 9\n    missing_term = 3 * 3\n    return missing_term\n\nans = solution()"
    ],
    "b768e69a54ce422c9bdc0bc62ce7f112": [
        "def solution():\n    # The given sequence is arithmetic, with the common difference found by subtracting consecutive terms\n    common_difference = 120 - 105  # This evaluates to 15\n\n    # Now find the first term using the 7th term and the common difference. \n    # a_n = a_1 + (n - 1) * d\n    # 105 = a_1 + (7 - 1) * 15\n    # a_1 = 105 - 6 * 15\n    first_term = 105 - (7 - 1) * common_difference\n\n    # Since we now have the first term and the common difference,\n    # we can find the 100th term using the same formula as above for arithmetic sequences\n    # a_100 = a_1 + (100 - 1) * d\n    hundredth_term = first_term + (100 - 1) * common_difference\n\n    return hundredth_term\n\nans = solution()"
    ],
    "e94db5c96fbd44048da7eae72591635d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12 - (3*x - 4), x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "940e042aba2b4f56a60da84000fece0e": [
        "def solution():\n    rabbits = 8\n    days = 5\n    carrots_per_rabbit_per_day = 4\n\n    total_carrots = rabbits * days * carrots_per_rabbit_per_day\n\n    return total_carrots\n\nans = solution()"
    ],
    "c41373fcf732485caf9d92171e911149": [
        "def solution():\n    ans = (5 / 8) * 160\n    return ans\n\nans = solution()"
    ],
    "601ad6e41047493c8d8f3dea2a05469a": [
        "def solution():\n    # Let x be the number of oranges originally\n    # Let y be the number of lemons originally\n    # According to the first ratio 3:5, we can write the equation as:\n    # x/y = 3/5\n    # After selling 48 oranges, the ratio become 1:2, then we can write as:\n    # (x-48)/y = 1/2\n    # Now we have two equations, we can solve for x and y.\n\n    # Equation 1: 5x = 3y\n    # Equation 2: 2x - 96 = y\n\n    # Substituting Equation 2 into Equation 1: 5x = 3(2x - 96)\n    # 5x = 6x - 288\n    # x = 288\n\n    # Now find y using Equation 2: y = 2x - 96 = 2*288 - 96\n    y = 2*288 - 96\n    # Therefore, the number of lemons, y, was originally:\n    return y\n\nans = solution()"
    ],
    "a50a55a4409a4341b2950b27e6d39826": [
        "def solution():\n    # One horse eats 1 bale of hay in 2 days, so in 1 day it eats 1/2 bale\n    horse_consumption_per_day = 1 / 2\n    # One cow eats 1 bale of hay in 3 days, so in 1 day it eats 1/3 bale\n    cow_consumption_per_day = 1 / 3\n    # One sheep eats 1 bale of hay in 12 days, so in 1 day it eats 1/12 bale\n    sheep_consumption_per_day = 1 / 12\n    \n    # Total daily consumption of one horse, one cow and one sheep\n    total_daily_consumption = horse_consumption_per_day + cow_consumption_per_day + sheep_consumption_per_day\n    \n    # Calculate the number of days the 22 bales will last\n    days_to_last = 22 / total_daily_consumption\n    \n    return days_to_last\n\nans = solution()"
    ],
    "996413eb0e084c8fad4262d2e563cbe1": [
        "def solution():\n    return 146 * 37\n\nans = solution()"
    ],
    "025a48e3ac854ca98f6c3b39cdf5562f": [
        "def solution():\n    n = 72 // (3 * 6)\n    return n\n\nans = solution()"
    ],
    "7ed96bead1224f409f2317f83bd45b09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the mother's and daughter's current ages\n    mother, daughter = symbols('mother daughter')\n\n    # Define the equations based on the problem statements\n    equation1 = Eq(mother + (mother - daughter), 75)\n    equation2 = Eq(daughter - (mother - daughter), 3)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (mother, daughter))\n\n    # Return the mother's current age\n    return solutions[mother]\n\nans = solution()"
    ],
    "a62c00fc50db459e9f0fdc6cdac1102e": [
        "def solution():\n    for num in range(1, 101):\n        if (num % 2 == 0) and (num % 3 == 0) and (num % 5 == 0) and (num % 7 == 6):\n            return num\n\nans = solution()"
    ],
    "c5d002031015489ba21101105aaa559a": [
        "def solution():\n    # The worst case scenario is when she takes out all non-red apples first.\n    non_red_apples = 11 + 7  # green and yellow apples\n    \n    # To ensure 3 red apples, she has to take all non-red ones plus 3 red ones.\n    total_apples_needed = non_red_apples + 3  \n    \n    return total_apples_needed\n    \nans = solution()"
    ],
    "c350a05252414b3db3a1131ee3b9e465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(7 * (x + 2), 51 + 2 * (x - 1))\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "27762b79cb644368b2a5457a17f92ee7": [
        "def solution():\n    initial_value = 200\n    final_value = 204\n    percentage_change = ((final_value - initial_value) / initial_value) * 100\n    return percentage_change\n\nans = solution()"
    ],
    "597ad4cf18ea4c63bf6c95cd675bf196": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n\n    # The smallest number of right-handed girls will occur if all non-right-handed pupils are girls\n    non_right_handed = total_pupils - right_handed\n\n    # Since the number of girls is fixed, the smallest number of right-handed girls occurs\n    # when all non-right-handed pupils (if possible) are girls\n    min_right_handed_girls = max(0, girls - non_right_handed)\n\n    return min_right_handed_girls\n\nans = solution()"
    ],
    "3509ed6613a44f60bb123d2ebb9a5094": [
        "def solution():\n    ans = 20 - 19 + 18 - 17 + 16 - 15 + 14 - 13\n    return ans\n\nans = solution()"
    ],
    "7a09b099857143ed8e06a64d34c8813c": [
        "def solution():\n    total_spent = 6400\n    discount_rate = 0.80\n    saved = total_spent / (1 - discount_rate)\n    return saved - total_spent\n\nans = solution()"
    ],
    "2f9ea1c8c72f424db4c1a4c24536bbb0": [
        "def solution():\n    # Total number of games in a single round-robin tournament with n teams:\n    # C(n, 2) = n * (n-1) / 2\n    # In each game, there are 2 points to be awarded in total (either 2 + 0 or 1 + 1).\n    # Thus, the total points awarded in the tournament = total number of games * 2\n    n = 6  # Number of teams\n    total_games = n * (n - 1) // 2\n    total_points = total_games * 2\n\n    return total_points\n\nans = solution()"
    ],
    "892a76fc652846adbcd762365971437f": [
        "def solution():\n    children = 45\n    capacity = 8\n\n    minibuses_needed = (children + capacity - 1) // capacity\n\n    return minibuses_needed\n\nans = solution()"
    ],
    "3393c5c42ebe4894a4440ce64fee1a72": [
        "def solution():\n    nums = [101, 97, 102, 99, 98, 103, -100]\n    ans = sum(nums)\n    return ans\n\nans = solution()"
    ],
    "c616f997861742469b08bfc319528f5b": [
        "def solution():\n    # We need to consider the worst case scenario to guarantee 4 different colored marbles.\n    # This means Jane could draw all marbles of one color first, then all of another, and so on.\n\n    # In the worst case, Jane draws all red, all green, and all blue marbles first. \n    # This means 4 (max red) + 7 (max green) + 6 (max blue) marbles.\n    # After this, she needs to draw just one more to guarantee an orange one.\n    # So the answer is the sum of all these marbles + 1.\n\n    num_marbles = 4 + 7 + 6 + 1  # Sum of max red, green, blue + 1 for orange\n\n    return num_marbles\n\nans = solution()"
    ],
    "8b599766a2704c0eb0e8c0f696e62f06": [
        "def solution():\n    for num in range(1, 101):\n        if num % 2 == 0 and num % 3 == 0 and num % 5 == 0 and num % 7 == 6:\n            return num\n\nans = solution()"
    ],
    "9f8109ce906145b3a3bb3b7938082e99": [
        "def solution():\n    n = 1\n    zeros = 0\n    twos = 0\n    fives = 0\n    \n    while zeros < 28:\n        n += 1\n        current = n\n        while current % 2 == 0:\n            twos += 1\n            current //= 2\n        while current % 5 == 0:\n            fives += 1\n            current //= 5\n        zeros = min(twos, fives)\n        \n    return n\n\nans = solution()"
    ],
    "7af09b472cda4e49ba756b79f79625b3": [
        "def solution():\n    ans = 789 * 6\n    return ans\n\nans = solution()"
    ],
    "e594932553e149d89309f852797d5586": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    girls_swim, girls_not_swim = symbols('girls_swim girls_not_swim')\n    boys_swim, boys_not_swim = symbols('boys_swim boys_not_swim')\n    \n    # Total number of pupils\n    total_pupils = 1690\n    \n    # Equations following the problem statement\n    equation1 = Eq(boys, girls + 90)\n    equation2 = Eq(girls_swim/girls_not_swim, 31/49)\n    equation3 = Eq(boys_swim, boys_not_swim - 120)\n    equation4 = Eq(girls_swim + girls_not_swim, girls)\n    equation5 = Eq(boys_swim + boys_not_swim, boys)\n    equation6 = Eq(boys + girls, total_pupils)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6), \n                      (boys, girls, girls_swim, girls_not_swim, boys_swim, boys_not_swim))\n    \n    # Calculate the number of pupils that cannot swim\n    non_swimmers = solutions[girls_not_swim] + solutions[boys_not_swim]\n    \n    return non_swimmers\n\nans = solution()"
    ],
    "ee58fa876fa247d58050d060bebe1078": [
        "from sympy import isprime\n\ndef solution():\n    for a in range(2, 14):  # 3a should be less than 41, and a is prime, so it starts from 2\n        if isprime(a):\n            for b in range(2, 14):  # 7b should be less than 41, and b is prime\n                if isprime(b) and 3 * a + 7 * b == 41:\n                    return a + b\n\nans = solution()"
    ],
    "fd889752fd27457fbe03dc85570eec17": [
        "def solution():\n    # cost per chicken tender for 4pc\n    cost_per_tender_4pc = 7 / 4\n    # cost per chicken tender for 6pc\n    cost_per_tender_6pc = 8.5 / 6\n    \n    # compare the cost per chicken tender\n    if cost_per_tender_4pc < cost_per_tender_6pc:\n        ans = \"4pc is a better buy\"\n    elif cost_per_tender_4pc > cost_per_tender_6pc:\n        ans = \"6pc is a better buy\"\n    else:\n        ans = \"Both are equally good\"\n\n    return ans\n\nans = solution()"
    ],
    "ac6b5f6822aa44afb8423aeef1df7f92": [
        "def solution():\n    # number of outcomes where the sum of two dice is greater than 10 (i.e., 11 or 12)\n    winning_outcomes = 3  # (5,6), (6,5), (6,6)\n    total_outcomes = 6*6  # because each die has 6 faces\n\n    # Probability of winning\n    probability_win = winning_outcomes / total_outcomes\n\n    # Expected gain per game (10 pounds win - 1 pound bet)\n    expected_gain_per_game = probability_win * (10 - 1)\n\n    # Expected loss per game (1 pound loss if not win)\n    expected_loss_per_game = (1 - probability_win) * 1\n\n    # Expected net loss per game\n    expected_net_loss_per_game = expected_loss_per_game - expected_gain_per_game\n\n    # Expected loss after 60 games\n    expected_total_loss = 60 * expected_net_loss_per_game\n\n    return -expected_total_loss\n\nans = solution()"
    ],
    "e49cf16bbb284f1fbfb9c440134d58be": [
        "def solution():\n    # Let's denote the original amount of water in the bottle as x.\n    # According to the problem, after drinking half before class, Pip has x/2 left.\n    # Then, after drinking another 100ml, he has x/2 - 100 ml left.\n    # We're also told that at this point, there is 150ml left in the bottle.\n    # Therefore, we can form the equation: x/2 - 100 = 150\n    \n    # Rearrange the above equation to solve for x:\n    x = (150 + 100) * 2\n    \n    return x\n\nans = solution()"
    ],
    "d13312f8d069494cab8f69737daed0b0": [
        "def solution():\n    total_weight_with_apples = 580\n    weight_with_2_apples = 280\n    weight_of_3_apples = total_weight_with_apples - weight_with_2_apples\n    weight_of_5_apples = weight_of_3_apples * (5/3)\n    weight_of_basket = total_weight_with_apples - weight_of_5_apples\n    \n    return int(weight_of_basket)\n\nans = solution()"
    ],
    "02a402ada62746cca4a7c0600dfc8a9b": [
        "from itertools import permutations\n\ndef solution():\n    digits = [2, 3, 4]\n    unique_numbers = set()\n\n    for i in range(1, len(digits) + 1):\n        for combo in permutations(digits, i):\n            number = int(''.join(map(str, combo)))\n            unique_numbers.add(number)\n\n    return len(unique_numbers)\n\nans = solution()"
    ],
    "bdfc511086b14c2a828a8ce71b43f330": [
        "def solution():\n    minutes = 0\n    while True:\n        minutes += 1\n        # Compute the next time\n        next_time_hour = (2 * 60 + 31 + minutes) // 60\n        next_time_minute = (2 * 60 + 31 + minutes) % 60\n        # Format the next time like a digital clock (24-hour format)\n        next_time = \"{:02d}:{:02d}\".format(next_time_hour, next_time_minute)\n        # Check if all the digits 0, 1, 2, 3 appear together\n        if all(digit in next_time for digit in \"0123\"):\n            break\n\n    return minutes\n\nans = solution()"
    ],
    "e3aa5800105743d5b2435db12b158401": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    salary = symbols('salary')\n    \n    equation = Eq(salary - 740 - 0.75 * (salary - 740), salary / 5)\n    result = solve(equation, salary)\n    \n    return result[0]\n\nans = solution()"
    ],
    "19fa00d48659426b9b8f9c7cc44133aa": [
        "def solution():\n    remaining_after_class = 150 + 100  # since he drank 100ml, we add this back to find the amount before class\n    original_amount = remaining_after_class * 2  # we double the amount before class to find the original amount\n    return original_amount\n\nans = solution()"
    ],
    "6008ef744a284692b526a28fd0e8a695": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    first_hour, second_hour = symbols('first_hour second_hour')\n\n    equation1 = Eq(first_hour, second_hour - 26)\n    equation2 = Eq(first_hour + second_hour, 40)\n\n    solutions = solve((equation1, equation2), (first_hour, second_hour))\n\n    return solutions[second_hour]\n\nans = solution()"
    ],
    "fa119130b0764e8fa4d0f0a2fa2f19fd": [
        "def solution():\n    def diamond(A, B):\n        return A * A - 3 * B\n\n    def triangle(A, B):\n        return 5 * A - B * B\n\n    ans = triangle(diamond(4, 2), 6)\n    return ans\n\nans = solution()"
    ],
    "e4bab25ee48f4b6185a11c389207eebf": [
        "def solution():\n    total_weight = 210\n    sold_monday = total_weight * (3/7)\n    remainder_after_monday = total_weight - sold_monday\n    sold_tuesday = remainder_after_monday * (3/8)\n    remaining_weight = remainder_after_monday - sold_tuesday\n    weight_per_bag = 3/4\n    num_bags = remaining_weight / weight_per_bag\n\n    return int(num_bags)\n\nans = solution()"
    ],
    "5a50e00932e34a2eae95e3e9228b6993": [
        "def solution():\n    def diamond(A, B):\n        return A * A - 3 * B\n\n    def triangle(A, B):\n        return 5 * A - B * B\n\n    # Calculate (4 ◆ 2) which is 4*4 - 3*2\n    result_diamond = diamond(4, 2)\n    \n    # Now, calculate (result of (4 ◆ 2)) △ 6\n    ans = triangle(result_diamond, 6)\n    \n    return ans\n\nans = solution()"
    ],
    "66c31d7e12eb4ffb8ad1f1e8bb55f199": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lynn, mary = symbols('lynn mary')\n    equation1 = Eq(mary - 58, 3 * (lynn - 160))\n    equation2 = Eq(lynn, mary)\n\n    solutions = solve((equation1, equation2), (lynn, mary))\n\n    return solutions[lynn] - 160\n\nans = solution()"
    ],
    "1e1a13a0a844402da455fc7eb9d39755": [
        "def solution():\n    fifth_grade_students = 6 * 36\n    sixth_grade_students = 3 * 38\n\n    total_students = fifth_grade_students + sixth_grade_students\n\n    return total_students\n\nans = solution()"
    ],
    "a098761e7204471dbfd3c5f04017e952": [
        "def solution():\n    sold_percentage = 0.60\n    unsold_tickets = 28\n    total_tickets = unsold_tickets / (1 - sold_percentage)\n    return int(total_tickets)\n\nans = solution()"
    ],
    "36398085891449859c0c35083ebfdaad": [
        "def solution():\n    ans = sum([64-62, 60-58, 56-54, 52-50, 48-46, 44])\n    return ans\n\nans = solution()"
    ],
    "41284b5312574903a6aad669cbd6ab65": [
        "def solution():\n    for tens_subtrahend in range(1, 10):\n        for ones_subtrahend in range(10):\n            for minuend in range(10, 100):\n                subtrahend_mistaken = (tens_subtrahend * 10 + 3) * 10 + 3\n                subtrahend_correct = (tens_subtrahend * 10 + 3) * 10 + 2\n                if minuend - subtrahend_mistaken == 36:\n                    correct_difference = minuend - subtrahend_correct\n                    return correct_difference\n\nans = solution()"
    ],
    "56303c0854a843e68eb523ba25963b8f": [
        "def solution():\n    total_weight = 45\n    empty_box_weight = 12\n    number_of_matches = 220\n\n    matches_weight = total_weight - empty_box_weight\n    weight_per_match = matches_weight / number_of_matches\n\n    return weight_per_match\n\nans = solution()"
    ],
    "9e459979ca2e4f8e84e5da348f9dba5d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let j represent Jerry's current age\n    j = symbols('j')\n    \n    # Devi is 8 years older than Jerry\n    d = j + 8\n    \n    # In 4 years, Jerry's age will be j+4 and Devi's age will be d+4\n    # The ratio of their ages in 4 years will be 5:7\n    equation = Eq((j + 4) / (d + 4), 5/7)\n    \n    # Solve the equation to find Jerry's age\n    solution = solve(equation, j)\n    \n    # solution is a list, we take the first (and only) solution since it's a linear equation.\n    return solution[0]\n\nans = solution()"
    ],
    "a9b59929e341406986d4962db964c9ec": [
        "def solution():\n    total_ml = 7 * 195\n    jug_capacity = 250\n    num_jugs = -(-total_ml // jug_capacity)  # Ceiling division to get the least number of full jugs\n\n    return num_jugs\n\nans = solution()"
    ],
    "3444a75f07964bfca7021f8d0f95217f": [
        "def solution():\n    total_balls = 50  # Initial total of red and blue balls\n    blue_balls = 1  # Number of blue balls\n    target_percentage = 0.90  # Target percentage of red balls\n\n    # Calculate the number of red balls to remove for the bag to contain 90% red balls\n    # Let x be the number of red balls to remove\n    # Equation: (49 - x) / (total_balls - x) = target_percentage\n    # Solve for x\n    x = (49 - target_percentage * total_balls) / (1 - target_percentage)\n\n    return int(x)\n\nans = solution()"
    ],
    "757e6ca91df84091a26bd18fc1b7fa2a": [
        "def solution():\n    result = 0\n    numerator = 100\n    denom_product = 1\n    \n    for i in range(97, 0, -1):\n        denom_product *= i\n        result += numerator / denom_product\n        numerator *= (i - 3)\n    \n    return result\n\nans = solution()"
    ],
    "e9f7473a32874d5c820cadf0a1870a0b": [
        "def solution():\n    total_weight_with_matches = 45\n    empty_box_weight = 12\n    number_of_matches = 220\n\n    weight_of_matches = total_weight_with_matches - empty_box_weight\n    weight_of_one_match = weight_of_matches / number_of_matches\n\n    return weight_of_one_match\n\nans = solution()"
    ],
    "d6c3aebbe67749778e84875f4bfe6ebf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cows, birds = symbols('cows birds')\n    \n    # Cows have 4 legs and birds have 2 legs\n    equation1 = Eq(4 * cows + 2 * birds, 3440)\n    # Total number of cows and birds is 1300\n    equation2 = Eq(cows + birds, 1300)\n    \n    solutions = solve((equation1, equation2), (cows, birds))\n    \n    return solutions[cows]\n\nans = solution()"
    ],
    "8a9992f6a3c04fea9afe2ab07209e489": [
        "def solution():\n    n = 96\n    factors = set()\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    return len(factors)\n\nans = solution()"
    ],
    "20346fdc304242a383a7ac635afbb0e0": [
        "def solution():\n    for num in range(999, 100, -1):\n        if num % 9 == 0 and num % 2 != 0:\n            tens_digit = (num // 10) % 10\n            if tens_digit % 4 == 0:\n                return num\n\nans = solution()"
    ],
    "0f159b78762443838fac481eb0a7bed3": [
        "def solution():\n    ans = (18 - 17) + (16 - 15) + (14 - 13)\n    return ans\n\nans = solution()"
    ],
    "00e7cd11eefb4db19a4650a5e8cf1454": [
        "def solution():\n    total_weight_with_matches = 45\n    empty_box_weight = 12\n    total_matches = 220\n    \n    weight_of_matches = total_weight_with_matches - empty_box_weight\n    weight_per_match = weight_of_matches / total_matches\n    \n    return weight_per_match\n\nans = solution()"
    ],
    "f58f700fac024611a683956a1768c0ec": [
        "from sympy import symbols, solve\nfrom sympy.vector import CoordSys3D\n\ndef solution():\n    N = CoordSys3D('N')\n    mass1, mass2 = 500, 500\n    velocity_car1 = 20 * N.i  # Due north\n    velocity_car2 = -30 * N.j  # Due west\n\n    momentum_car1 = mass1 * velocity_car1\n    momentum_car2 = mass2 * velocity_car2\n\n    # The total momentum just before the impact\n    total_momentum_before = momentum_car1 + momentum_car2\n\n    v, = symbols('v')\n    velocity_after = v * (N.i + N.j)\n\n    # Assuming the total mass after impact is the sum of the two cars' masses\n    total_mass_after = mass1 + mass2\n\n    # The total momentum after the impact\n    total_momentum_after = total_mass_after * velocity_after\n\n    # Conservation of momentum: total_momentum_before == total_momentum_after\n    equations = [total_momentum_before.dot(N.i) - total_momentum_after.dot(N.i),\n                 total_momentum_before.dot(N.j) - total_momentum_after.dot(N.j)]\n\n    # Use symbols and conservation of momentum to find the velocity v\n    solution = solve(equations, v)\n\n    # Now since the velocity vector points equally in the N.i and N.j direction\n    # and considering the Pythagorean theorem, we find the magnitude\n    velocity_magnitude = (solution[v]**2 + solution[v]**2)**0.5\n\n    # Velocity vector\n    velocity_vector = solution[v] * (N.i + N.j)\n    \n    return {'magnitude': velocity_magnitude, 'vector': velocity_vector}\n\nans = solution()"
    ],
    "4f45df48b0844cadb68195e413cce783": [
        "def solution():\n    books_per_week = 6 / 3\n    total_books = books_per_week * 8\n    return total_books\n\nans = solution()"
    ],
    "237e4009b4c54725a1fe587507e1513b": [
        "def solution():\n    trees_count = 21\n    tree_interval = 2\n    lamp_post_interval = 10\n\n    # Calculate the total length covered by trees\n    total_length = (trees_count - 1) * tree_interval\n\n    # Calculate the number of lamp posts\n    lamp_posts_count = (total_length // lamp_post_interval) + 1\n\n    return lamp_posts_count\n\nans = solution()"
    ],
    "32f4232fd0304fc781fcf26ecbab7e3e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    laptop, dvd_player = symbols('laptop dvd_player')\n\n    total_cost = 14438\n    combined_cost = 2960\n\n    equation1 = Eq(5 * laptop + 4 * dvd_player, total_cost)\n    equation2 = Eq(laptop + dvd_player, combined_cost)\n\n    solutions = solve((equation1, equation2), (laptop, dvd_player))\n\n    return solutions[dvd_player]\n\nans = solution()"
    ],
    "cb9e84648a164fd796bda214bd912eed": [
        "def solution():\n    sizes = 3 # S, M, L\n    colors = 5 # black, white, red, yellow, purple\n    \n    ans = sizes * colors\n    \n    return ans\n\nans = solution()"
    ],
    "e6aad1cc98b64cac96958775db869e00": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original average weight of the group before Aaron joined\n    # Let n be the original number of people in the group before Aaron joined\n    x, n = symbols('x n')\n\n    # Equation 1: After Aaron joined, the average became 61 kg\n    equation1 = Eq(((n * x) + 45) / (n + 1), 61)\n\n    # Equation 2: After Ben joined, the average became 62 kg\n    equation2 = Eq(((n * x) + 45 + 71) / (n + 2), 62)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (x, n))\n    \n    # Original average weight is x\n    return solutions[x]\n\nans = solution()"
    ],
    "4585a53e3fbb44e9b8554c9841fc9066": [
        "def solution():\n    from sympy import symbols, Eq, solve, Rational\n    \n    # Define symbols for the velocities\n    vx, vy = symbols('vx vy')\n    \n    # Masses of the cars (identical)\n    m1 = m2 = 500  # kg\n\n    # Initial velocities of the cars before the collision\n    v1_north = 20  # m/s (car going north)\n    v2_west = -30  # m/s (car going west, negative because it's in the opposite direction of vx)\n\n    # Use conservation of momentum for the northward (y) direction:\n    # m1 * v1_north + m2 * 0 = (m1 + m2) * vy\n    equation1 = Eq(m1 * v1_north, (m1 + m2) * vy)\n\n    # Use conservation of momentum for the westward (x) direction:\n    # m1 * 0 + m2 * v2_west = (m1 + m2) * vx\n    equation2 = Eq(m2 * v2_west, (m1 + m2) * vx)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (vx, vy))\n\n    # Calculate the magnitude of the resulting velocity vector\n    velocity_magnitude = (solutions[vx]**2 + solutions[vy]**2)**0.5\n\n    return velocity_magnitude\n\nans = solution()"
    ],
    "0bd951281c1c44b48652968acdb95351": [
        "from sympy import symbols, solve, Eq\n\ndef solution():\n    # Defining one symbol per shape\n    triangle = symbols('triangle')\n\n    # Setting up the equation\n    equation = Eq(triangle * (triangle + triangle), 10 * triangle + triangle)\n    \n    # Solving the equation\n    solutions = solve(equation, triangle)\n    \n    # Returning the first (and only) solution since we only need \n    # one triangle. We also filter out non-positive solutions as \n    # digits can't be negative or zero.\n    for sol in solutions:\n        if sol.is_real and sol > 0:\n            return sol\n\nans = solution()"
    ],
    "f743e1d8460a4eb08dd3685920fb9466": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        for j in range(i+1, 101):  # Ensure j > i to get distinct numbers and avoid double counting\n            if (i + j) % 5 == 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "473e918a9fd74e4aaf831efa01b71026": [
        "def solution():\n    total_paid = 5.15\n    coffee_cost = 3.69\n    milk_cost = 0.89\n    sugar_cost = total_paid - (coffee_cost + milk_cost)\n\n    return sugar_cost\n\nans = solution()"
    ],
    "702bd47461974ab69465dea85d588eab": [
        "def solution():\n    for hour in range(1, 12):\n        if hour == 2 * (12 - hour):\n            return hour\n\nans = solution()"
    ],
    "74f45194f12f4ae7be245fca2332fd63": [
        "def solution():\n    pattern_length = 5\n    full_patterns = 2000 // pattern_length\n    remaining_digits = 2000 % pattern_length\n\n    # Sum of digits in one full pattern [1+2+3+4+5]\n    sum_of_one_pattern = sum(range(1, pattern_length + 1))\n\n    # Total sum from full patterns\n    total_full_pattern_sum = sum_of_one_pattern * full_patterns\n\n    # Sum of remaining digits\n    sum_of_remaining_digits = sum(range(1, remaining_digits + 1))\n\n    # Total sum\n    total_sum = total_full_pattern_sum + sum_of_remaining_digits\n\n    return total_sum\n\nans = solution()"
    ],
    "639b8a35b20848139819ed0f716ed926": [
        "def solution():\n    ans = 2.3 + 9.7 + 5.2 - 2.2\n    return ans\n\nans = solution()"
    ],
    "b591b0d58af5497096019cf0b220ebb3": [
        "def solution():\n    ans = 2 + 12 * (8 - 3) // 4\n    return ans\n\nans = solution()"
    ],
    "a98ea86c6ab94572a37ea72e70fc26dd": [
        "def solution():\n    # Worst case scenario for NOT getting 4 balls of the same color is:\n    # 3 blue, 3 orange, and 2 yellow balls are taken out (total of 8 balls)\n    # After that, the next ball taken will guarantee 4 of the same color\n\n    # To find this number programmatically, we could also use the pigeonhole principle\n    blue = 5\n    orange = 4\n    yellow = 2\n    # She needs to get 4 balls of the same colour. Let's compute the worst case scenario\n    max_others = (orange if orange > yellow else yellow) - 1\n    # The worst case: 3 balls from each of the largest two groups, and all from the smallest group\n    balls_taken = (blue - 1) + max_others + yellow\n    \n    # The next ball taken after the worst case scenario must give 4 of a color\n    balls_taken += 1  # Add one for the next ball that guarantees 4 of a color\n\n    return balls_taken\n\nans = solution()"
    ],
    "5eab24fc6ea24611818fe89f4277708d": [
        "def solution():\n    cost_oranges = 1.5 * 4.1\n    cost_mangoes = 2.3 * 2\n    total_cost = cost_oranges + cost_mangoes\n\n    return total_cost\n\nans = solution()"
    ],
    "bfd53c31223f4d469ed9eef0d582baeb": [
        "def solution():\n    ans = (45 / 9) * (100 / 10) + (23 - 19)\n    return ans\n\nans = solution()"
    ],
    "1e698072c71546a1a63ac8be1c0891fe": [
        "def solution():\n    numbers = [2, 3, 8, 4, 7, 6]\n    mean_value = 5\n\n    total_numbers = len(numbers) + 1  # Including the unknown number 'a'\n    total_sum = mean_value * total_numbers\n    sum_known_numbers = sum(numbers)\n    a_value = total_sum - sum_known_numbers\n\n    return a_value\n\nans = solution()"
    ],
    "230b8cfda67a440eb974960188adca8c": [
        "def solution():\n    return 4825 + 1754\n\nans = solution()"
    ],
    "6ac549d7fd244d5c97410534859cd40b": [
        "def solution():\n    # A's work rate per day\n    work_rate_a = 1 / 15\n    # B's work rate per day\n    work_rate_b = 1 / 10\n    \n    # Total work done by A and B together in 4 days\n    total_work_done = 4 * (work_rate_a + work_rate_b)\n    \n    # Remaining work to be done\n    remaining_work = 1 - total_work_done\n    \n    # Days for B to finish the remaining work\n    days_for_b = remaining_work / work_rate_b\n    \n    return days_for_b\n\nans = solution()"
    ],
    "292095048e3e4e1983e4b66c7cd45d35": [
        "def solution():\n    base_length = 13\n    # The sum of numbers 1 to 13\n    sum_ascending = (1 + base_length) * base_length // 2\n    # The sum of numbers 1 to 12 (excluding the peak of the pyramid, which is 13)\n    sum_descending = (1 + (base_length - 1)) * (base_length - 1) // 2\n    # Adding the ascending and descending sums\n    total_sum = sum_ascending + sum_descending\n    return total_sum\n\nans = solution()"
    ],
    "45ba73cc1b1e4ca6b099a7a996e9c3b4": [
        "def solution():\n    original_price = 650\n    reduced_price = 455\n    reduction_amount = original_price - reduced_price\n    percentage_reduction = (reduction_amount / original_price) * 100\n    return percentage_reduction\n\nans = solution()"
    ],
    "f380084cf36b45bbbda0a1c8d0634812": [
        "def solution():\n    # We need to determine the least number of test tubes required to test 1000 bottles.\n    # This can be represented as a binary problem where each test tube represents a bit ('0' or '1').\n    # We need to find the smallest number of bits required to uniquely identify each bottle.\n    \n    # We use logarithm base 2 to calculate the number of bits needed\n    # Since we need a whole number of test tubes, we round up the result.\n    import math\n    num_test_tubes = math.ceil(math.log(1000, 2))\n\n    return num_test_tubes\n\nans = solution()"
    ],
    "28c2da8de504408d83cd9b973e4a5df2": [
        "def solution():\n    number = 100\n    while not (number % 5 == 1 and number % 6 == 1 and number % 7 == 1):\n        number += 1\n    return number\n\nans = solution()"
    ],
    "3c35813541b2403abf942fa5547821b4": [
        "def solution():\n    duckling_legs = 4 * 2  # 4 ducklings with 2 legs each\n    baby_geese_legs = 2 * 2  # 2 baby geese with 2 legs each\n    total_legs = 36\n    remaining_legs = total_legs - (duckling_legs + baby_geese_legs)  # Legs that should belong to lambs\n    lamb_legs = 4  # Each lamb has 4 legs\n    number_of_lambs = remaining_legs / lamb_legs\n    return number_of_lambs\n\nans = solution()"
    ],
    "2e1b20f5fdfd4bc595117f252b7bcea6": [
        "def solution():\n    diff_boys_girls = 52\n    total_students = None\n\n    for total_layers in range(1, 100):\n        if total_layers % 2 == 0:\n            boys_layers, girls_layers = total_layers // 2, total_layers // 2\n        else:\n            boys_layers, girls_layers = total_layers // 2 + 1, total_layers // 2\n\n        boys = boys_layers ** 2\n        girls = girls_layers ** 2\n\n        if boys - girls == diff_boys_girls:\n            total_students = boys + girls\n            break\n\n    return total_students\n\nans = solution()"
    ],
    "d5bc2d04c57440d0a114ebf980abe4d0": [
        "def solution():\n    n = 2.5 * 1000  # Converting litres to millilitres (1 litre = 1000 millilitres)\n    return n\n\nans = solution()"
    ],
    "754c4e4720274d728d76669caba145eb": [
        "def solution():\n    remaining_sweets = 6\n    remaining_after_third_day = remaining_sweets / (1 - 1/4)\n    remaining_after_second_day = remaining_after_third_day / (1 - 1/5)\n    remaining_after_first_day = remaining_after_second_day / (1 - 1/6)\n    initial_sweets = remaining_after_first_day / (1 - 1/7)\n    return int(initial_sweets)\n\nans = solution()"
    ],
    "3aad0d27a09d4acabf6d7f99f57fe23b": [
        "def solution():\n    first_term = 17\n    last_term = 150\n    common_difference = 7\n\n    num_kids = ((last_term - first_term) // common_difference) + 1\n    \n    return num_kids\n\nans = solution()"
    ],
    "dfa6543288d54c429575cda96cbfdc86": [
        "def solution():\n    # Let's denote the number of teams as n\n    # Each team plays each of the other teams twice, home and away\n    # So, there will be n*(n-1) matches, since each team plays n-1 others\n    # and there are n teams in total. However, since each match is counted twice\n    # (once for each team), we need to divide the total by 2 to avoid double counting.\n    \n    # Thus we have the equation:\n    # n * (n - 1) / 2 = 30\n    # Simplifying gives us a quadratic equation in terms of n:\n    # n^2 - n - 60 = 0\n    \n    # Solving the quadratic equation for n\n    n = 1\n    while (n * (n - 1) / 2) != 30:\n        n += 1\n    \n    return n\n\nans = solution()"
    ],
    "03409dc9701540c6a419d3a46178c3c1": [
        "def solution():\n    ans = 528 + 30\n    return ans\n\nans = solution()"
    ],
    "40435e2c684944fdbc3ffece625e8a3a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Charlene's cookies be x\n    x = symbols('x')\n\n    # Charlene keeps half plus 8\n    charlene_keeps = (1/2) * x + 8\n    # Emerald gets the remaining\n    emerald_gets = x - charlene_keeps\n\n    # Emerald eats a third of what she got plus 4\n    emerald_eats = (1/3) * emerald_gets + 4\n    # Hebe gets the remaining\n    hebe_gets = emerald_gets - emerald_eats\n\n    # Hebe eats a quarter of what she got\n    hebe_eats = (1/4) * hebe_gets\n    # Hebe has 42 left\n    hebe_has_left = hebe_gets - hebe_eats\n\n    # According to the problem, Hebe has 42 cookies left\n    equation = Eq(hebe_has_left, 42)\n\n    # Solve the equation to find the number of cookies Charlene had at first\n    num_cookies = solve(equation, x)\n\n    return num_cookies[0]  # return the solution\n\nans = solution()"
    ],
    "adf81947d41b4b1e99112db71d0a03fa": [
        "def solution():\n    ans = 528 + 30\n    return ans\n\nans = solution()"
    ],
    "1f6bb23ddb7b4674a491542df7d83ca5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the three numbers\n    first, second, third = symbols('first second third')\n\n    # Create equations based on the problem\n    equation1 = Eq(first, second + 1099)\n    equation2 = Eq(third, second - 877)\n    equation3 = Eq(first + second + third, 7656)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (first, second, third))\n\n    return solutions[second]\n\nans = solution()"
    ],
    "6b0695abb6df4ba593213d47fe31343a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    girls = 45\n    boys = symbols('boys')\n    \n    equation = Eq(girls, 3 * boys - 21)\n    solutions = solve(equation, boys)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "e72460d64b534a3298ee1f886015ab98": [
        "def solution():\n    factors = [2, 2, 2, 3, 8, 5, 5, 25]\n    two_count = 0\n    five_count = 0\n    \n    for factor in factors:\n        while factor % 2 == 0:\n            factor //= 2\n            two_count += 1\n        while factor % 5 == 0:\n            factor //= 5\n            five_count += 1\n    \n    ans = min(two_count, five_count)\n    return ans\n\nans = solution()"
    ],
    "8211d1479b8042baafb1f9c517bfcb00": [
        "def solution():\n    sets_made_first_5_days = 720\n    total_sets_needed = 3600\n    days_already_worked = 5\n    \n    sets_per_day = sets_made_first_5_days / days_already_worked\n    remaining_sets = total_sets_needed - sets_made_first_5_days\n    remaining_days = remaining_sets / sets_per_day\n    \n    total_days = days_already_worked + remaining_days\n    \n    return int(total_days)\n\nans = solution()"
    ],
    "928e94ae89fa44c5874fa56b5f7f9faa": [
        "import math\n\ndef solution():\n    for i in range(int(math.ceil(math.sqrt(40))), int(math.floor(math.sqrt(50)))+1):\n        if i**2 > 40 and i**2 < 50:\n            return i**2\n    return None\n\nans = solution()"
    ],
    "4d1826d9ba0f4ebbb85234e705eb930d": [
        "def solution():\n    return 5.824 / 0.4\n\nans = solution()"
    ],
    "b791f9f3418348b2b25b747708582ba4": [
        "def solution():\n    initial_volume = 150\n    cup_volume = 40\n    cups_poured = 3\n\n    water_left = initial_volume - (cup_volume * cups_poured)\n    \n    return water_left\n\nans = solution()"
    ],
    "70fdf0a16e48489da5ef6d613c075f2a": [
        "def solution():\n    return (0.7 + 5.1) / 2\n\nans = solution()"
    ],
    "dcd09d0a6e93478eb3e9e8bd7ce45d74": [
        "def solution():\n    ans = 936 // 54\n    return ans\n\nans = solution()"
    ],
    "2cbe94dcc30b432db9e9911ee6b53171": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    alice, sister = symbols('alice sister')\n    equation1 = Eq(alice, 2 * sister)\n    equation2 = Eq(alice + sister + 10 + 10, 53)\n    \n    solutions = solve((equation1, equation2), (alice, sister))\n    \n    return solutions[alice]\n\nans = solution()"
    ],
    "46c81f732f2f457ea8198cbda5de4904": [
        "def solution():\n    i = 1\n    while True:\n        product = i * (i + 1) * (i + 2) * (i + 3)\n        if product == 3024:\n            return (i + 3)\n        i += 1\n\nans = solution()"
    ],
    "f347b0c1866d4183abf11ae869f9ba55": [
        "def solution():\n    return 527 - 9\n\nans = solution()"
    ],
    "01024c395010440bb3461f6a74c2772d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n\n    equation1 = Eq(3*notebook + 4*pencil_case + 5*eraser, 50)\n    equation2 = Eq(notebook + pencil_case, 6)\n    equation3 = Eq(pencil_case + eraser, 8)\n\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n\n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "3efa9649b4a9475fad4ee03677e8ceed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bob, alan = symbols('bob alan')\n\n    equation1 = Eq(bob, alan + 15)\n    equation2 = Eq(bob + 25, 3 * alan)\n\n    solutions = solve((equation1, equation2), (bob, alan))\n\n    return solutions[alan]\n\nans = solution()"
    ],
    "648fd5bbe5184a74a37d66b24481008b": [
        "def solution():\n    initial_volume = 150\n    cup_volume = 40\n    cups_poured = 3\n\n    water_left = initial_volume - (cup_volume * cups_poured)\n\n    return water_left\n\nans = solution()"
    ],
    "5563bcc54cdc46f8b6be436624c0097b": [
        "def solution():\n    num_students = 10\n    num_handshakes = (num_students * (num_students - 1)) // 2\n    return num_handshakes\n\nans = solution()"
    ],
    "2efad079da624ca689f0016c3dcf7602": [
        "def solution():\n    return 34 * 19\n\nans = solution()"
    ],
    "4e17d0e9e030497eb049f15de9682760": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anne, maria = symbols('anne maria')\n\n    equation1 = Eq(maria, anne + 20)\n    equation2 = Eq(anne + maria, 44)\n\n    solutions = solve((equation1, equation2), (anne, maria))\n\n    return solutions[anne]\n\nans = solution()"
    ],
    "f66a33367339488285ad5b4dd84375df": [
        "def solution():\n    target_number = 6789\n    options = [678, 6798, 6879, 9876, 6987]\n    differences = {option: abs(target_number - option) for option in options}\n    closest_number = min(differences, key=differences.get)\n\n    return closest_number\n\nans = solution()"
    ],
    "74956c812140447db809a56e7b348996": [
        "def solution():\n    difference = (20 / 100) * 90 - (90 / 100) * 20\n    return difference\n\nans = solution()"
    ],
    "a8b915f14aa548d4a3dd9ab3e68ccce6": [
        "def solution():\n    def to_fraction(recurring_decimal):\n        # Split the decimal into parts\n        integer_part, decimal_part = recurring_decimal.split('.')\n        non_repeating, repeating = decimal_part.split('dot')\n        \n        # Convert to fraction\n        numerator = int(non_repeating + repeating) - int(non_repeating)\n        denominator = (10 ** len(non_repeating)) * ((10 ** len(repeating)) - 1)\n        \n        return numerator, denominator\n    \n    # Convert recurring decimals to fractions\n    num1, den1 = to_fraction('0.1dot199251dot7')\n    num2, den2 = to_fraction('0.2dot34567dot7')\n    \n    # Since we want to find the nth digit where they are the same, we need the LCM of denominators\n    from math import gcd\n    lcm_den = den1 * den2 // gcd(den1, den2)\n    \n    # Scale numerators to have the same denominator\n    num1 *= (lcm_den // den1)\n    num2 *= (lcm_den // den2)\n    \n    # Now find the first place where the two numerators share the same digit\n    n = 0\n    while num1 % 10 != 7 or num2 % 10 != 7:\n        # Divide by 10 to keep moving to the next digit\n        n += 1\n        num1 //= 10\n        num2 //= 10\n    \n    # Add the length of the decimal parts not involved in repetition\n    non_repeating_length = max(len('199251'), len('34567'))\n    n += non_repeating_length\n\n    return n + 1  # Since we want the nth place, not the index\n\nans = solution()"
    ],
    "8863cd48f2b44608bc940bde6c45c8fd": [
        "def solution():\n    morning_fruit = 416\n    afternoon_fruit = 248\n    more_fruit_in_morning = morning_fruit - afternoon_fruit\n    return more_fruit_in_morning\n\nans = solution()"
    ],
    "efe5d1d421074320ad4c3900d67cbf17": [
        "def solution():\n    orange_ratio = 2\n    water_ratio = 25\n    orange_amount = 10  # in grams\n\n    water_amount = (orange_amount / orange_ratio) * water_ratio\n\n    return water_amount\n\nans = solution()"
    ],
    "5750692f9864439ba5afe8796b229fda": [
        "def solution():\n    scores = [7.9, 8.3, 8.8, 8.6]\n    total_scores_needed = 8.5 * 5\n    current_total = sum(scores)\n    min_score_needed = total_scores_needed - current_total\n    return min_score_needed\n\nans = solution()"
    ],
    "0e1fad8ec8d14086ac428eca327ba26b": [
        "def solution():\n    total_pages = 550\n    first_day_pages = 30\n    last_day_pages = 70\n\n    # Because the amount of pages read increases by the same amount each day,\n    # we treat the pages read each day as an arithmetic sequence.\n    # We have the first term (a1), the last term (an) and the sum (S).\n\n    # We can calculate the number of terms (n) using the sum formula for arithmetic sequence:\n    # S = n/2 * (a1 + an)\n    # 550 = n/2 * (30 + 70)\n    # 550 = n * 50\n    n = total_pages / 50\n\n    # The nth term of an arithmetic sequence can be calculated using:\n    # an = a1 + (n - 1) * d\n    # d is the common difference\n    # Now, we rearrange terms to calculate d:\n    # d = (an - a1) / (n - 1)\n    d = (last_day_pages - first_day_pages) / (n - 1)\n    return int(d)\n\nans = solution()"
    ],
    "3cb49c7c36f6450c8a64796070308cdc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(60 - 8 * (2 * x - 5), 4)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "7fa90f34a95a47b59d3a3839cc104395": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    principal = 10000\n    total_interest = 816\n    rate = symbols('rate')\n\n    equation = Eq(principal * (1 + rate) ** 2 - principal, total_interest)\n\n    interest_rate = solve(equation, rate)\n\n    return float(interest_rate[0])\n\nans = solution()"
    ],
    "dede4ea0d33d4f38a225a8f17f3bc881": [
        "def solution():\n    # Let x be the original number\n    # According to the problem statement, we have the equation:\n    # 2*x + 7 = 43\n\n    # We need to perform inverse operations to find x\n    ans = (43 - 7) // 2\n\n    return ans\n\nans = solution()"
    ],
    "1098f69ccd5544cc85bda00f27b8a033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mango, pear, apple = symbols('mango pear apple')\n    equation1 = Eq(mango + pear, 3.40)\n    equation2 = Eq(mango + apple, 3.80)\n    equation3 = Eq(4 * mango + 2 * pear + apple, 13.20)\n\n    solutions = solve((equation1, equation2, equation3), (mango, pear, apple))\n\n    return solutions[mango]\n\nans = solution()"
    ],
    "e2aa604a164645d08fcb78a7d4b2edac": [
        "def solution():\n    quotient = 9\n    remainder = 2\n    divisor = 4\n\n    # Johnny's calculation:\n    johnnys_multiplication = quotient * remainder\n    johnnys_addition = johnnys_multiplication + divisor\n\n    # Correct calculation:\n    correct_multiplication = quotient * divisor\n    correct_answer = correct_multiplication + remainder\n\n    # Check if Johnny's answer is correct:\n    is_correct = johnnys_addition == correct_answer\n\n    return correct_answer if not is_correct else johnnys_addition\n\nans = solution()"
    ],
    "27bc5028c63b41e1a9f9d0def88902ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the speed of Hannah in cm/s\n    x = symbols('x')\n\n    # Peter's speed is 15 cm/s faster than Hannah's\n    peter_speed = x + 15\n\n    # Ratio of time taken by Peter to time taken by Hannah is 3:4    \n    # Given that distance is constant for both Peter and Hannah, \n    # we can write the ratio of time taken as the inverse ratio of their speeds:\n    # time ratio = speed of Hannah / speed of Peter\n    equation = Eq(x / peter_speed, 3/4)\n\n    # Solve the equation for x (Hannah's speed)\n    hannah_speed = solve(equation, x)[0]\n\n    return hannah_speed\n\nans = solution()"
    ],
    "b9075265d1ee4df3938f4e17c31577cb": [
        "def solution():\n    ans = 3.7 + 5.7\n    return ans\n\nans = solution()"
    ],
    "6422fe3aeecf483ba766cbd4e64ac26a": [
        "def solution():\n    total_time = 90\n    time_spent_choices = 23\n    time_spent_blank = 35\n    time_left = total_time - (time_spent_choices + time_spent_blank)\n    \n    return time_left\n\nans = solution()"
    ],
    "dd7483c3437a49a9a145debe3fa29718": [
        "def solution():\n    return abs((20 / 100) * 90 - (90 / 100) * 20)\n\nans = solution()"
    ],
    "dd3e36501a5c492dab63fa293539b326": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original number of fifty-cent coins and y be the original number of one-dollar coins\n    x, y = symbols('x y')\n\n    # Original condition: 2/7 of the coins are fifty-cent coins\n    original_condition = Eq(x/(x+y), 2/7)\n\n    # After receiving additional coins\n    received_fifty_cent_coins = 5 * 2 # because 5 dollars worth of fifty-cent coins is 10 fifty-cent coins\n    received_one_dollar_coins = 10\n\n    # Final condition: twice as many one-dollar coins as fifty-cent coins\n    final_condition = Eq(y + received_one_dollar_coins, 2 * (x + received_fifty_cent_coins))\n\n    # Solve the system of equations\n    solutions = solve((original_condition, final_condition), (x, y))\n\n    # The initial number of coins is the sum of the initial fifty-cent coins and one-dollar coins\n    original_coins = solutions[x] + solutions[y]\n\n    return original_coins\n\nans = solution()"
    ],
    "3082b2d8519e44a1ad584e668793812a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # define the variables\n    emily, victor, victoria = symbols('emily victor victoria')\n\n    # equation represent that total tickets sold are 320\n    total_tickets_eq = Eq(emily + victor + victoria, 320)\n\n    # equation represent that Emily sold thrice as many tickets as Victor\n    emily_victor_eq = Eq(emily, 3 * victor)\n\n    # equation represent that Victoria sold 68 more tickets than Emily.\n    victoria_emily_eq = Eq(victoria, emily + 68)\n\n    # solve the system of equations\n    solutions = solve((total_tickets_eq, emily_victor_eq, victoria_emily_eq), (emily, victor, victoria))\n\n    return solutions[victoria]\n\nans = solution()"
    ],
    "3b1b4add028148159a147e645f93b19a": [
        "def solution():\n    circles = 5\n    line = 1\n    max_parts = 1 + circles * (circles + 1) // 2 + line * (circles + 1)\n\n    return max_parts\n\nans = solution()"
    ],
    "88a249b7e2d34dfe98ded5f27cc37e47": [
        "def solution():\n    total_money = 55\n    saved_money = 32.5\n    spent_money = total_money - saved_money\n    # Let x be the money spent on transportation, then 2x is spent on food.\n    # x + 2x = spent_money\n    # 3x = spent_money\n    transportation_money = spent_money / 3\n    food_money = 2 * transportation_money\n\n    return food_money\n\nans = solution()"
    ],
    "424ae64f8f474576a4106f853829077b": [
        "def solution():\n    # Calculate the cost for the first 3 tons with the fixed service fee\n    initial_cost = 4 * 3 + 4\n    \n    # Subtract the initial cost from the total amount\n    remaining_amount = 109 - initial_cost\n    \n    # Calculate how many additional tons can be afforded with the remaining amount\n    additional_tons = remaining_amount // 3\n\n    # The total tons of water she can use is the sum of the first 3 tons and the additional tons\n    total_tons = 3 + additional_tons\n\n    return total_tons\n\nans = solution()"
    ],
    "582a93bd201d467584951df06919257a": [
        "def solution():\n    H = (45 * 7 + 13 * 7) / 7\n    return H\n\nans = solution()"
    ],
    "e80abf22da4c4703bbd3c8b8cb247517": [
        "def solution():\n    ans = 3258 // 9\n    return ans\n\nans = solution()"
    ],
    "19e51d8fef124cbcb849c81b5dde55d3": [
        "def solution():\n    quotient = 15\n    remainder = 6\n\n    smallest_divisor = remainder + 1\n    smallest_dividend = quotient * smallest_divisor + remainder\n\n    return smallest_dividend\n\nans = solution()"
    ],
    "adde032b1234481e91098235d742001a": [
        "from itertools import permutations\n\ndef solution():\n    # Total entrances\n    entrances = 4\n    # Total people\n    people = 3\n\n    # All possible permutations of people\n    all_people_permutations = list(permutations(range(people)))\n\n    # Count different ways for them to enter the station\n    count = 0\n    for perm in all_people_permutations:\n        # Joe is perm[0], Mike is perm[1], Tina is perm[2]\n        # since Joe and Mike can't enter from the same entrance,\n        # there are (entrances - 1) options for Mike if Joe picks first,\n        # and similarly for Joe if Mike picks first.\n        for first_entrance in range(entrances):\n            if perm[0] == 0: # If Joe picks first\n                count += (entrances - 1) * (entrances - 2)\n            else: # If Mike picks first or Tina picks and Joe/Mike has to pick different\n                count += (entrances - 1) * (entrances - 2)\n\n    return count\n\nans = solution()"
    ],
    "ba3935cd34094e49a8cea4e788c25c2f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the time it takes for the lazy gardener to mow the lawn on his own\n    x = symbols('x')\n\n    # Quick gardener's work rate is 1/12 lawn per hour\n    # Lazy gardener's work rate is 1/x lawn per hour\n    # Combined work rate is 1/8 lawn per hour\n    equation = Eq(1/12 + 1/x, 1/8)\n    \n    # Solve for x\n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "5d63dffe5e5b4c6195a4e20ccdebb0f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amelia = 160\n    carl, daniel = symbols('carl daniel')\n\n    bala = amelia / 2 + carl + daniel\n    carl = (3/4) * (amelia + bala + daniel)\n    total_cookies = amelia + bala + carl + daniel\n\n    equation1 = Eq(bala, daniel + 320)\n    equation2 = Eq(bala, amelia / 2 + carl + daniel)\n    equation3 = Eq(carl, (3/4) * (amelia + bala + daniel))\n    equation4 = Eq(total_cookies, 6230)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (carl, daniel))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "5d728c04569e4acda389027dab33f9d6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n    # number of oranges was 32 more than the number of apples\n    equation1 = Eq(oranges, apples + 32)\n    # After giving away 1/3 of his apples and 1/2 of his oranges, he had 100 fruits left\n    equation2 = Eq((apples - apples / 3) + (oranges - oranges / 2), 100)\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    # Calculate the total number of fruits he had at first\n    total_fruits = solutions[apples] + solutions[oranges]\n\n    return total_fruits\n\nans = solution()"
    ],
    "e94e14d7daec44d3928cf6249572099e": [
        "def solution():\n    total_candy = 12 + 9\n    number_of_girls = 3\n    candy_per_girl = total_candy / number_of_girls\n    return candy_per_girl\n\nans = solution()"
    ],
    "d21ed197c3554a4494dc5ae572154e6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    noah, pete, howard = symbols('noah pete howard')\n\n    equation1 = Eq(noah + pete, 75)\n    equation2 = Eq(noah + howard, 145)\n    equation3 = Eq(howard, 3 * pete)\n\n    solutions = solve((equation1, equation2, equation3), (noah, pete, howard))\n\n    return solutions[noah]\n\nans = solution()"
    ],
    "ab8b76c78fba49bba15b8e9295c78803": [
        "def solution():\n    train_length = 850  # Length of the train in meters\n    train_speed = 30  # Train speed in meters per second\n    crossing_time = 45  # Time it takes to cross the tunnel in seconds\n\n    # The total distance covered by the train while crossing the tunnel is equal to\n    # the length of the train plus the length of the tunnel.\n    total_distance = train_speed * crossing_time\n\n    # The length of the tunnel is the total distance covered minus the length of the train.\n    tunnel_length = total_distance - train_length\n\n    return tunnel_length\n\nans = solution()"
    ],
    "ef768e372ece4b9c863d8281a92c382f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(182 - 5*x - 3*x, 5*x)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "b4d71da68bcc434e8354987810259e88": [
        "def solution():\n    from math import floor, ceil\n\n    result = floor(2017) - ceil(201.7) + floor(20.17) - ceil(2.017)\n    return result\n\nans = solution()"
    ],
    "d1701c8b237c4c5181c58dcde299fe9b": [
        "def solution():\n    ans = 0\n    for i in range(1, 8):\n        product = 1\n        for j in range(0, i):\n            if j == 0:\n                product *= 2 if i == 1 else 14\n            else:\n                product *= (2 * j + 1)\n        ans += product\n    return ans\n\nans = solution()"
    ],
    "a5d947afabb14059a86977035b7e71e6": [
        "def solution():\n    jug_capacity = 990  # in milliliters\n    half_jug = jug_capacity / 2\n    cup_capacity = half_jug / 3\n\n    return cup_capacity\n\nans = solution()"
    ],
    "aec33ac892404f198dfd2e4806f460f4": [
        "def solution():\n    total_money = 55\n    saved_money = 32.50\n    spent_money = total_money - saved_money\n\n    # Let the amount spent on transportation be x\n    # Then the amount spent on food is 2 * x\n    # And the total spent money is x + 2 * x = 3 * x\n\n    transportation_cost = spent_money / 3\n    food_cost = 2 * transportation_cost\n\n    return food_cost\n\nans = solution()"
    ],
    "b2aea1c47ffd41fb983fc289346c687f": [
        "def solution():\n    from math import lcm  # lcm is the least common multiple\n\n    green_line_interval = 5  # Green line trains set out every 5 minutes\n    red_line_interval = 6    # Red line trains set out every 6 minutes\n\n    # Find the least common multiple of the two intervals\n    interval_lcm = lcm(green_line_interval, red_line_interval)\n\n    # Calculate the hour and minutes when the event happens next\n    hours, minutes = divmod(interval_lcm, 60)\n\n    # Trains start at 5:00 am, so add the interval hours to the start time\n    next_train_hour = 5 + hours\n    next_train_time = \"{:02d}:{:02d} am\".format(next_train_hour, minutes)\n\n    return next_train_time\n\nans = solution()"
    ],
    "cd28c0514392451480947377c812fcb5": [
        "def solution():\n    return (77.5 * 52 / 100) + (5.2 * 2.25)\n\nans = solution()"
    ],
    "65e148bb5a774c4b8538009506ae4475": [
        "def solution():\n    total_cars = 15\n    blue_car_position_from_front = 8\n\n    blue_car_position_from_back = total_cars - blue_car_position_from_front + 1\n\n    return blue_car_position_from_back\n\nans = solution()"
    ],
    "258f6418c7a44634b786fa4d69d806ec": [
        "def solution():\n    number = 29381\n    ans = round(number, -3) # Rounds to the nearest 1000\n    return ans\n\nans = solution()"
    ],
    "7d415985d40749aeae60fb6233cfafce": [
        "def solution():\n    price_per_gram = 80 / 100\n    cost_for_250_grams = price_per_gram * 250\n    return cost_for_250_grams\n\nans = solution()"
    ],
    "e9f47ee528114383ba4f6be4529ce4b8": [
        "def solution():\n    # First, we find the number of terms in the series\n    first_term = 4\n    difference = 4\n    last_term = 124\n    n = ((last_term - first_term) / difference) + 1\n\n    # Now we calculate the sum of the series of squares\n    sum_of_squares = sum((i * difference) ** 2 for i in range(1, int(n) + 1))\n\n    return sum_of_squares\n\nans = solution()"
    ],
    "4274973e4812443fb90e78a925599481": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the price of apples and bananas\n    price_apple, price_banana = symbols('price_apple price_banana')\n    \n    # Set up the equations based on the problem statement\n    equation1 = Eq(3 * price_apple + 2 * price_banana, 1.25)\n    equation2 = Eq(price_apple + price_banana, 0.48)\n\n    # Solve the equations for the prices of apples and bananas\n    solutions = solve((equation1, equation2), (price_apple, price_banana))\n\n    # Calculate the cost of 5 bananas using the price of banana found\n    cost_5_bananas = 5 * solutions[price_banana]\n\n    return cost_5_bananas\n\nans = solution()"
    ],
    "f24d6740b95540bf84759a2c0479e327": [
        "def solution():\n    sum_of_squares = sum(i**2 for i in range(6, 52, 5))\n    return sum_of_squares\n\nans = solution()"
    ],
    "5fcdd3004ac646839223368cdc7d8517": [
        "def solution():\n    return 2017 + 597\n\nans = solution()"
    ],
    "80479df10d714924af0698610d81b4e7": [
        "def solution():\n    # Owen gives 5 fish for 2 rabbits\n    owen_to_oscar_ratio = 5 / 2\n    # Oscar gives 4 rabbits for 7 packs of wheat\n    oscar_to_dennis_ratio = 4 / 7\n\n    # Finding the ratio of fish to packs of wheat by multiplying the above ratios\n    owen_to_dennis_ratio = owen_to_oscar_ratio * oscar_to_dennis_ratio  # (fish/rabbits) * (rabbits/wheat) = fish/wheat\n\n    # Simplifying the ratio to determine how many fish needed for 14 packs of wheat\n    fish_for_one_pack_of_wheat = owen_to_dennis_ratio\n    fish_for_fourteen_packs_of_wheat = fish_for_one_pack_of_wheat * 14\n\n    return int(fish_for_fourteen_packs_of_wheat)\n\nans = solution()"
    ],
    "9a284d31007d42739f51042d9bcfbb75": [
        "def solution():\n    from itertools import permutations\n\n    people = ['Len', 'Joe', 'Angle', 'Jack']\n    entrances = [1, 2, 3]\n    count = 0\n\n    # Create all permutations of people and entrances\n    all_permutations = permutations(people, len(entrances))\n\n    # Count the number of valid permutations where each entrance is used at least once\n    for perm in all_permutations:\n        if len(set(perm)) == len(entrances):\n            count += 1\n\n    # Since the order of people entering does not matter, divide by the number of people to remove duplicates\n    count //= len(people)\n\n    return count\n\nans = solution()"
    ],
    "739abceeaa8940b49a1de4e16f2e066f": [
        "def solution():\n    total_marks = 23\n    correct_mark = 5\n    wrong_mark = -2\n    num_questions = 6\n    \n    for correct_answers in range(num_questions + 1):\n        wrong_answers = num_questions - correct_answers\n        if correct_answers * correct_mark + wrong_answers * wrong_mark == total_marks:\n            return correct_answers\n\nans = solution()"
    ],
    "854b6e25b0df409b8d09ffcf3c018a12": [
        "def solution():\n    numbers = [4, 6, 12, 18]\n    mean_value = sum(numbers) / len(numbers)\n    return mean_value\n\nans = solution()"
    ],
    "1f3d2852ba334ae381d67ba4685feefc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin = symbols('justin')\n    equation = Eq(justin + 18, 4 * (justin - 6))\n    solution = solve(equation, justin)\n    return solution[0]\n\nans = solution()"
    ],
    "d1030adb2d044db580ef9ccb90cd0ce2": [
        "def solution():\n    time_per_drawing = 124\n    number_of_drawings = 111\n    total_time = time_per_drawing * number_of_drawings\n    return total_time\n\nans = solution()"
    ],
    "210032ce53ff4939827463e6a45cdfea": [
        "def solution():\n    from sympy import Eq, symbols, solve\n\n    # let x be the total number of animals initially\n    x = symbols('x')\n    # 65% were cows initially\n    cows = 0.65 * x  \n    # 35% were goats initially\n    goats = 0.35 * x  \n    # After adding 240 animals, cows become 65% + 20% = 85% of all animals\n    new_cows = 0.85 * (x + 240)  \n    # Number of goats doubled after adding 240 animals\n    new_goats = 2 * goats  \n    # The number of new cows is equal to initial number of cows plus 240\n    equation = Eq(new_cows, cows + 240)  \n    # solve the equation for x\n    total_animals = solve(equation, x)[0]  \n    # find the number of goats initially using the value of x\n    initial_goats = 0.35 * total_animals\n\n    return int(initial_goats)\n\nans = solution()"
    ],
    "e705de293fcb400b9a1dfb656dfa1166": [
        "def solution():\n    cookies = 0\n    while True:\n        cookies += 1\n        if cookies % 8 == 0 and cookies % 9 == 1:\n            return cookies\n\nans = solution()"
    ],
    "fd98368e011c40af9c0a16f0fe8c92a9": [
        "def solution():\n    ans = 378 - 196\n    return ans\n\nans = solution()"
    ],
    "ceadf2b1ae6f4d6885ecfbb1cd6a855f": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 4), (2, 5), (3, 6)]\n    ans, _ = solve_congruence(*congruences)\n    while ans < 100:\n        return ans\n        ans += 4 * 5 * 6  # or can use ans += lcm(4, 5, 6), but for simplicity and since all are primes or semi-prime, product works\n\nans = solution()"
    ],
    "cb887c2f2c5545b7a05451b8ef325c36": [
        "def solution():\n    return (2.6 + 4.8) / 2\n\nans = solution()"
    ],
    "99f042a00a454b7493149ecaa15aeaae": [
        "def solution():\n    total_cost = 62\n    discount_threshold1 = 20\n    discount_threshold2 = 50\n    discount1 = 4\n    discount2 = 15\n\n    # Apply the second discount as the amount is greater than $50\n    final_cost = total_cost - discount2\n\n    return final_cost\n\nans = solution()"
    ],
    "fb6bdead23d74b31a9f612a923a7e6d0": [
        "def solution():\n    ans = 828 + 191\n    return ans\n\nans = solution()"
    ],
    "6689bf51afe64009a81b09cd69008faf": [
        "def solution():\n    books_per_case = 10 // 2\n    total_books_in_six_cases = books_per_case * 6\n    return total_books_in_six_cases\n\nans = solution()"
    ],
    "86e9c26ad82341cfa9a20b2d32bf56b0": [
        "def solution():\n    ages = [6, 9, 10]\n    ages.sort()\n    # According to the information:\n    # 1. Tom's age is a multiple of 3.\n    # 2. Jason is younger than Tom.\n    # Tom can't be the youngest because his age is a multiple of 3 and both 6 and 9 are multiples of 3, meaning Tom must be the oldest (10).\n    # Jason therefore must be 6.\n    # So, Adam is the one left and he must be 9.\n    # Since the ages are sorted, Adam is in the middle.\n    adam_age = ages[1]\n    return adam_age\n\nans = solution()"
    ],
    "07a423a429ad445dae3180bf686780f7": [
        "def solution():\n    # Considering the worst case scenario using the Pigeonhole Principle:\n    # Drawing all 5 balls of one color (red) = 5 balls\n    # Drawing all 5 balls of another color (white) = 5 balls\n    # To ensure we have all 3 different colors, draw one more ball (yellow) = 1 ball\n    # Total balls drawn to get at least 3 different colors = 5(red) + 5(white) + 1(yellow)\n    return 5 + 5 + 1\n\nans = solution()"
    ],
    "ccebb61c3253490ca4582aebc55574a0": [
        "def solution():\n    product = 1\n    sum_prod = 0\n    for i in range(2, 15, 2):\n        product *= i*(i+1)\n        sum_prod += product\n    return sum_prod\n\nans = solution()"
    ],
    "60b666d3655c439dae65e37097947530": [
        "def solution():\n    ans = 224 - 75\n    return ans\n\nans = solution()"
    ],
    "84dcdcd96c1048d69413739dad19be6d": [
        "def solution():\n    b = (7 + 9) / 4\n    return b\n\nans = solution()"
    ],
    "07da074b86d84faabb12f53c21c42e0c": [
        "def solution():\n    ans = 80040\n    return ans\n\nans = solution()"
    ],
    "72e7f1101ae74488b35a8eb2c990d03b": [
        "def solution():\n    ans = 483 // 21\n    return ans\n\nans = solution()"
    ],
    "218136d2d92e439d904e0302f6af8a72": [
        "def solution():\n    # Start distributing apples to the children with the minimum possible (1 apple each).\n    # This is the smallest sequence of distinct positive integers.\n    apples_to_children = 1 + 2 + 3 + 4 + 5\n    # Subtract the amount given to the other children to find the maximum for Avril.\n    max_for_avril = 28 - apples_to_children\n    return max_for_avril\n\nans = solution()"
    ],
    "50398a9afcad4e3e91e6a646e9abe499": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n\n    equation1 = Eq(triangle + triangle, square)\n    equation2 = Eq(square + triangle, circle)\n    equation3 = Eq(diamond, circle + square + triangle)\n\n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n\n    return solutions[diamond] / solutions[triangle]\n\nans = solution()"
    ],
    "7c9de8ac84804f9ba2fe6b73d259b89d": [
        "def solution():\n    count = 0\n    for i in range(1, 401):\n        count += str(i).count('3')\n    return count\n\nans = solution()"
    ],
    "21a782c4b45c43f9b4ecbc9c1de7c46b": [
        "def solution():\n    total_money = 984\n    fraction_used = 5 / 8\n    cost_of_laptop = total_money * fraction_used\n    return cost_of_laptop\n\nans = solution()"
    ],
    "e9497c826db341cda1c37f184c32773e": [
        "def solution():\n    lori_speed = 2\n    jocye_speed_ratio = 3\n    lori_speed_ratio = 2\n    time = 10\n\n    jocye_speed = (jocye_speed_ratio / lori_speed_ratio) * lori_speed\n    distance_travelled_by_jocye = jocye_speed * time\n\n    return distance_travelled_by_jocye\n\nans = solution()"
    ],
    "e1599fd308ba411f82f7fa4febd782fe": [
        "def solution():\n    old_average = 60\n    new_average = 70\n    total_numbers = 3\n\n    total_before_adding = old_average * (total_numbers - 1)\n    total_after_adding = new_average * total_numbers\n\n    added_number = total_after_adding - total_before_adding\n\n    return added_number\n\nans = solution()"
    ],
    "b93faf4325af43f9b9ddf824cb85bb6d": [
        "def solution():\n    first_term = 16\n    second_term = 23\n    difference = second_term - first_term\n    last_term = 79\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "2a34cf02f3524187ba971bb585f0ff12": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ken, lisa, amount = symbols('ken lisa amount')\n    \n    initial_condition = Eq(ken, lisa + 15)\n    final_condition = Eq(ken - amount, lisa + amount - 21)\n\n    solutions = solve((initial_condition, final_condition), (ken, lisa, amount))\n\n    return solutions[amount]\n\nans = solution()"
    ],
    "ea15746d343648b5b1905e6b6b3058e1": [
        "def solution():\n    # Trophies from questions 1 to 5\n    trophies_1_to_5 = sum(range(1, 6))\n\n    # Trophies from questions 6 to 9, which form a decreasing sequence\n    trophies_6_to_9 = sum(range(5, 1, -1))\n    \n    # Total trophies\n    total_trophies = trophies_1_to_5 + trophies_6_to_9\n\n    return total_trophies\n\nans = solution()"
    ],
    "4bc1254a6fe041a991a7100f650c67ac": [
        "def solution():\n    from math import factorial\n\n    # For the boys, there are 2! ways they can sit at the ends (one on each end)\n    boys_permutations = factorial(2)\n    \n    # For the girls, there are 3! ways they can be arranged between the boys\n    girls_permutations = factorial(3)\n    \n    # Total arrangements = permutations of boys * permutations of girls\n    total_arrangements = boys_permutations * girls_permutations\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "46c88bd515d4485ea196f2cb3df07861": [
        "def solution():\n    boys = 290\n    girls = boys - 80\n    total_children = boys + girls\n    percentage_boys = (boys / total_children) * 100\n    return percentage_boys\n\nans = solution()"
    ],
    "9f8ac2e29e8241a1b702cf02e3cc8591": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    a = symbols('a')\n\n    # Since it's an arithmetic progression where each day he eats 6 more cookies than the day before,\n    # we can use the formula for the sum of an arithmetic sequence: n/2 * (2a + (n - 1)d)\n    # where `n` is the number of terms, `a` is the first term, and `d` is the common difference.\n    # In this case, n = 5, d = 6, and sum is 100.\n    n = 5\n    d = 6\n    sum_of_cookies = 100\n\n    # Eq represents the equation for the sum of the arithmetic sequence.\n    equation = Eq(n/2 * (2*a + (n - 1)*d), sum_of_cookies)\n\n    # Solve the equation\n    solution_dict = solve(equation, a)\n\n    return solution_dict[0]\n\nans = solution()"
    ],
    "3836f8199279464492fa9ffeb517630a": [
        "def solution():\n    counts = {i: i+1 for i in range(1, 9)}  # Create a dictionary with number as key and count as value\n\n    total_numbers = sum(counts.values())  # Total numbers in the sequence\n    half_count = total_numbers / 2  # Position of the median\n\n    running_total = 0\n    for number, count in counts.items():\n        running_total += count\n        if running_total >= half_count:\n            return number  # Median found when running total equals or exceeds half total numbers\n\nans = solution()"
    ],
    "e91231eaf4d8439faaede60ec5091276": [
        "def solution():\n    time_per_drawing = 124\n    total_drawings = 111\n    total_time = time_per_drawing * total_drawings\n    return total_time\n\nans = solution()"
    ],
    "34f44583a8cd45e19c113454790dece8": [
        "def solution():\n    digits = [3, 1, 9, 2]\n    largest_number = int(''.join(sorted(map(str, digits), reverse=True)))\n    smallest_number = int(''.join(sorted(map(str, digits))))\n    return largest_number - smallest_number\n\nans = solution()"
    ],
    "bf2cd12d57fa4f7bb8bebd58e44e01a3": [
        "def solution():\n    ans = 3267 - 745\n    return ans\n\nans = solution()"
    ],
    "89e2769fb2db4433a5c129d85a787ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x**0.5 + 36**0.5, 81**0.5)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "372d3979dd3241aa8a0f262aeedf3e12": [
        "def solution():\n    facing_teacher = 0\n    for i in range(1, 31):\n        # A student turns around for the i-th number if it is multiple of 2 or 3,\n        # and after two turns they will face the teacher again.\n        turns = 0\n        if i % 2 == 0:\n            turns += 1\n        if i % 3 == 0:\n            turns += 1\n        # If number of turns is odd, the student ends up not facing the teacher\n        if turns % 2 == 0:\n            facing_teacher += 1\n    return facing_teacher\n\nans = solution()"
    ],
    "7670470dcd1f4c8c96ea9a2887dfc3bc": [
        "def solution():\n    first_term = 10\n    fourth_term = 25\n    num_rows = 25\n    \n    # Calculate common difference\n    common_difference = (fourth_term - first_term) // 3\n    \n    # Calculate last term using the arithmetic sequence formula: a_n = a_1 + (n-1)*d\n    last_term = first_term + (num_rows - 1) * common_difference\n    \n    # Calculate sum of the arithmetic sequence: sum = n/2 * (a_1 + a_n)\n    total_athletes = num_rows * (first_term + last_term) // 2\n    \n    return total_athletes\n\nans = solution()"
    ],
    "40c1e8a02c9845be9b54d604dedcbd90": [
        "def solution():\n    from datetime import datetime\n\n    # Hannah's school leaving time\n    leave_school_time = datetime.strptime(\"15:22\", \"%H:%M\")\n    \n    # Hannah catches the bus time\n    catch_bus_time = datetime.strptime(\"16:01\", \"%H:%M\")\n    \n    # Bus trip duration\n    bus_trip_duration = timedelta(minutes=18)\n    \n    # Hannah gets home time\n    get_home_time = datetime.strptime(\"16:35\", \"%H:%M\")\n    \n    # Calculate the walking time to bus stop\n    walking_to_bus_stop = catch_bus_time - leave_school_time\n    \n    # Calculate the walking time from bus drop off point to home\n    walking_from_bus_to_home = get_home_time - (catch_bus_time + bus_trip_duration)\n    \n    # Total walking time in minutes\n    total_walking_time = walking_to_bus_stop + walking_from_bus_to_home\n    \n    # Convert total walking time to minutes\n    total_walking_minutes = total_walking_time.seconds // 60\n\n    return total_walking_minutes\n\nans = solution()"
    ],
    "3814e1d67d1e4e95aa0ff2ddfffc3251": [
        "def solution():\n    ans = 2184 // 7\n    return ans\n\nans = solution()"
    ],
    "6f725efbd53047b3a646809b5162d3a0": [
        "def solution():\n    ans = 221 * 4\n    return ans\n\nans = solution()"
    ],
    "29fb2769be344578a23b172da388fb1e": [
        "def solution():\n    first_term = 1\n    last_term = 49\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "8dc109b953614926bb4b8a13ca7104a0": [
        "def solution():\n    # Initially, the probability of the car being behind each gate is 1/3.\n    # When you pick gate 1, the probability of the car being behind gate 1 is still 1/3.\n    # However, when the host opens gate 3 showing a goat, there are two possibilities:\n    # 1. You initially chose the car (1/3 chance), so the other unchosen gate (gate 2) has a goat.\n    # 2. You initially chose a goat (2/3 chance), so the other unchosen gate (gate 2) has a car.\n    # Since the host will always open a gate with a goat, the probability of the car being behind \n    # the remaining gate (gate 2) is now 2/3 if you chose a goat initially, which is more likely.\n\n    # Therefore, you should switch to gate 2.\n    return 'gate 2'\n\nans = solution()"
    ],
    "708c9e7ed608441c98ea48c7bbc04858": [
        "def solution():\n    return 468 // 9\n\nans = solution()"
    ],
    "dfba4fdc8eb54b0c962f907a4edf3d42": [
        "def solution():\n    trophies_for_first_five = sum(range(1, 6))  # Sum of trophies from Q1 to Q5\n    trophies_for_last_four = sum(range(5, 1, -1))  # Sum of trophies from Q6 to Q9 decreasing by 1 trophy each question\n    total_trophies = trophies_for_first_five + trophies_for_last_four\n    \n    return total_trophies\n\nans = solution()"
    ],
    "33f5c3de051f4cdebf9fe82fa4041ef2": [
        "def solution():\n    x = symbols('x')  # Create an algebraic symbol for x\n    total_spent = 6 * x  # Total amount Sean spent\n    return total_spent\n\nans = solution()"
    ],
    "c34160a26e5c402eae8db3c3bc42f9b9": [
        "def solution():\n    ans = sum(i * (i + 1) for i in range(1, 32))\n    return ans\n\nans = solution()"
    ],
    "60431e14fe314b0dbc9334280d889c13": [
        "def solution():\n    rate_per_trainer = 1 / 7  # each trainer catches 1 pokemon in 7 minutes\n    trainers_needed = 49 * rate_per_trainer  # to catch 49 pokemon in 49 minutes\n\n    return int(trainers_needed)\n\nans = solution()"
    ],
    "6e103a2ef68043989f0694b5cb663d85": [
        "from math import factorial\n\ndef solution():\n    # Total number of books\n    total_books = 7\n    # Number of students\n    students = 3\n\n    # Calculate the number of ways to choose 1 book for each student\n    # We use combinations here because the order in which books are given to students does not matter\n    ways_for_each_student = factorial(total_books) // (factorial(students) * factorial(total_books - students))\n\n    # Since each student is distinct, we need to account for permutations of these books among the students\n    # The number of permutations for three students is factorial(3)\n    total_ways = ways_for_each_student * factorial(students)\n    \n    return total_ways\n\nans = solution()"
    ],
    "9193db4182e34c75be3ffc7a426aad35": [
        "def solution():\n    students = 1 + 12  # including Tommy\n    time_per_student = 142  # in minutes\n    total_time = students * time_per_student\n    return total_time\n\nans = solution()"
    ],
    "0c251d28e5f34b3790b5b39adc9a140b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let initial_money be the amount of money David had at first\n    initial_money = symbols('initial_money')\n\n    # David spent $75 on CDs\n    money_after_cds = initial_money - 75\n\n    # Then he spent 1/4 of the remaining money on batteries\n    money_after_batteries = money_after_cds - (1/4) * money_after_cds\n\n    # He was left with 1/3 of the original sum of money\n    equation = Eq(money_after_batteries, initial_money / 3)\n\n    # Solve for initial_money\n    initial_money_solution = solve(equation, initial_money)\n\n    return initial_money_solution[0]\n\nans = solution()"
    ],
    "a6a193e0597a44869d654226d5c6024e": [
        "def solution():\n    # Each 3-digit set in the number is 928, which sums up to 19.\n    digit_set_sum = 9 + 2 + 8\n    \n    # The number has 99 digits, so there are 33 sets of '928'.\n    num_sets = 99 // 3\n    \n    # Compute the total sum of all digits.\n    total_sum = digit_set_sum * num_sets\n    \n    # Find the remainder when the total sum is divided by 9\n    remainder = total_sum % 9\n    \n    return remainder\n\nans = solution()"
    ],
    "aad63064de384c75967ad2fe1ab5fc65": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for our unknown\n    op = symbols('oplus')\n\n    # Set up the equation based on the problem statement\n    equation = Eq(op * 9 + 47 - op, 84 + 27)\n    \n    # Solve the equation\n    solutions = solve(equation, op)\n\n    # Return the solution\n    return solutions[0]\n\nans = solution()"
    ],
    "d8e38e05e8d54b2da8f23e0d88ae7907": [
        "def solution():\n    total_people = 5000\n    incorrect_identifications = 1500\n\n    percentage_incorrect = (incorrect_identifications / total_people) * 100\n\n    return percentage_incorrect\n\nans = solution()"
    ],
    "077a03a4ff1146cf942d5c075e60786b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables for three numbers and assign symbols\n    a, b, c = symbols('a b c')\n    \n    # Since we know the sum of the numbers\n    equation1 = Eq(a + b + c, 56)\n    \n    # The average of the smallest two numbers is 14\n    equation2 = Eq((a + b) / 2, 14)\n    \n    # The average of the largest two numbers is 22\n    equation3 = Eq((b + c) / 2, 22)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n    \n    # The median is the second value 'b' from the tuple of solutions (sorted)\n    return solutions[b]\n\nans = solution()"
    ],
    "2a141bb7917247d0940bb1bec7dc53e1": [
        "def solution():\n    target = 2.5\n    numbers = [3, 2.1, 2.494, 2.449, 2.51]\n    \n    closest_num = min(numbers, key=lambda x: abs(x - target))\n    \n    return closest_num\n\nans = solution()"
    ],
    "0fbd2843bdcc4f0a895c0a1773ac180c": [
        "def solution():\n    # Let's denote the number of bars bought by Eliot and Maya as 'n'.\n    # The cost per 'Sour Sweets' bar is 12p. Since Eliot pays with three £1 coins, he spends 300p.\n    # The cost per 'Chocolate Drops' bar is 17p. Since Maya pays with four £1 coins, she spends 400p.\n    # They both receive the same amount of change, so the equations describing this are:\n    # 300 - 12n = 400 - 17n (the amount of change they receive is equal)\n    # Rearrange the equation to find the value of 'n':\n    # 12n - 17n = 400 - 300\n    # -5n = 100\n    # n = -100 / -5\n    # n = 20\n    \n    n = -100 // -5  # Use integer division\n\n    return n\n\nans = solution()"
    ],
    "e771bc7cbc15407692c34b8827ae5c9c": [
        "def solution():\n    digits = [9, 7, 5, 2]\n    digits.sort()\n    \n    # Start with the smallest even digit\n    for i in range(len(digits)):\n        if digits[i] % 2 == 0:\n            even_digit = digits.pop(i)\n            break\n            \n    # Smallest 4-digit even number\n    smallest_number = digits[0] * 1000 + digits[1] * 100 + digits[2] * 10 + even_digit\n    \n    return smallest_number\n\nans = solution()"
    ],
    "2a41554ff61e4bf3b29916349e9d7f23": [
        "def solution():\n    total_litre = 10\n    per_container = 2\n    containers_needed = total_litre / per_container\n    return int(containers_needed)\n\nans = solution()"
    ],
    "c42ce86645884bed8f12c68ae8245158": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Jackson's current age and Chloe's current age\n    jackson, chloe = symbols('jackson chloe')\n\n    # Equation 1: The sum of Jackson and Chloe's ages is 54\n    equation1 = Eq(jackson + chloe, 54)\n\n    # Equation 2: In 3 years, Jackson will be 5 times as old as Chloe\n    equation2 = Eq(jackson + 3, 5 * (chloe + 3))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jackson, chloe))\n\n    # Jackson's age 3 years later\n    jackson_age_later = solutions[jackson] + 3\n\n    return jackson_age_later\n\nans = solution()"
    ],
    "308dc425a3d44c09abe3d9fd91e8ec30": [
        "def solution():\n    count = 0\n    for number in range(1, 41):\n        if '2' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "026a3697b867401aa50c1eed67be23fe": [
        "def solution():\n    equation1 = 66 * 2 + 66 * 3\n    equation2 = 66 * 5\n\n    return equation1 == equation2\n\nans = solution()"
    ],
    "1feb10160f034a898eb973a9aac889c3": [
        "def solution():\n    ans = 468 // 9\n    return ans\n\nans = solution()"
    ],
    "b7fea9e98bef46af9acd40209ffe5387": [
        "def solution():\n    ans = 297 + 198 + 204 + 99\n    return ans\n\nans = solution()"
    ],
    "ada253044cf143859091a35ddb998f0b": [
        "def solution():\n    base_charge = 2.5\n    additional_rate = 1.2\n    total_cost = 8.5\n    base_distance = 1.8\n\n    # Calculate the cost of the additional distance\n    additional_cost = total_cost - base_charge\n    \n    # Calculate the additional distance\n    additional_distance = additional_cost / additional_rate\n    \n    # Calculate the total distance\n    total_distance = base_distance + additional_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "c25c01f5db07454fba0a46c84f70815c": [
        "def solution():\n    # Since at least one student gets at least 3 apples, we will distribute these 3 apples first\n    remaining_apples = 80 - 3\n    \n    # Now we have to distribute the remaining apples to the students\n    # If every student got at least 1 apple, the class size would be equal to the remaining apples\n    # However, because one student already has 3 apples, they may not receive more in this context\n    class_size_without_extra = remaining_apples\n    \n    # The class size has at least this many students (every other student gets at least 1 apple)\n    class_size = class_size_without_extra + 1\n    return class_size\n\nans = solution()"
    ],
    "f7e855eea0fd468da4854a78b1524831": [
        "def solution():\n    for apples in range(1, 50):\n        if apples % 5 == 0 and apples % 6 == 3 and apples % 8 == 5:\n            return apples\n\nans = solution()"
    ],
    "186bc13df3b24db5a2d94b621966fdd7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    yellow, red, blue = symbols('yellow red blue')\n\n    equation1 = Eq(red, 2 * yellow)\n    equation2 = Eq(blue, 3 * yellow)\n    equation3 = Eq(red + yellow + blue, 150)\n\n    solutions = solve((equation1, equation2, equation3), (yellow, red, blue))\n\n    return solutions[red]\n\nans = solution()"
    ],
    "dfa5352c28124e0ebb6a359a752ef95f": [
        "def solution():\n    return 648 * 5\n\nans = solution()"
    ],
    "7a0515a38a4e44bc9248081a392748cd": [
        "def solution():\n    received_bars = 8\n    original_bars = received_bars * 2\n    return original_bars\n\nans = solution()"
    ],
    "36675ac7266944a1a8727f6fe3dbe742": [
        "def solution():\n    boys_in_big_cars = 36\n    girls_in_small_cars = 12\n    capacity_big_cars = 4\n    capacity_small_cars = 2\n\n    num_big_cars_needed = boys_in_big_cars // capacity_big_cars\n    num_small_cars_needed = girls_in_small_cars // capacity_small_cars\n\n    total_cars_needed = num_big_cars_needed + num_small_cars_needed\n\n    return total_cars_needed\n\nans = solution()"
    ],
    "8f2c8b866334452790965d39bbf73bfd": [
        "def solution():\n    # Current sum of their ages\n    current_sum = 36 + 42 + 7 # Mother's age + Father's age + Julia's age\n\n    # The desired sum of their ages in the future\n    desired_sum = 100\n\n    # Calculating the difference required to reach the desired sum\n    difference = desired_sum - current_sum\n\n    # Since all of them get older by one year each year, the number of years required\n    # is equal to the difference in the sum of their current ages and the desired sum.\n    # This is because every year, the sum of their ages increases by 3 (each person gets 1 year older).\n    years = difference // 3\n\n    return years\n\nans = solution()"
    ],
    "900f814eac484c948ddfe9ef92667f08": [
        "def solution():\n    ounces_per_pound = 16\n    pounds_per_kg = 2.2\n    weight_in_ounces = 56\n    \n    weight_in_pounds = weight_in_ounces / ounces_per_pound\n    weight_in_kg = weight_in_pounds / pounds_per_kg\n    \n    return round(weight_in_kg, 1)\n\nans = solution()"
    ],
    "a1c19e0170ab4067a75561de9f31246c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variable\n    x = symbols('x')\n    \n    # Set up the equation x + 25% of x = 200\n    equation = Eq(x + 0.25 * x, 200)\n    \n    # Solve the equation\n    solution = solve(equation, x)\n    \n    # Since we expect only one solution for this linear equation\n    return solution[0]\n\nans = solution()"
    ],
    "d4f51ce9d1594b9dae05c831a2fa12b0": [
        "def solution():\n    # The sequence is created by first adding from 5 to 80 and then adding from 79 back down to 5.\n    # We can find the sum of the first part and double it, then subtract the value 80 since it's not doubled.\n    \n    # Sum of the first sequence from 5 to 80\n    sum_to_80 = sum(range(5, 81))\n    \n    # Double the sum and subtract 80 (since 80 is not repeated)\n    total_sum = sum_to_80 * 2 - 80\n    \n    return total_sum\n\nans = solution()"
    ],
    "5eb0c6d54ccd4e5192f0639fa9e61712": [
        "def solution():\n    return 342 * 24\n\nans = solution()"
    ],
    "3cfe944baa5b44af9f73a9a9804766df": [
        "from itertools import permutations\n\ndef solution():\n    max_sum = 0\n    for perm in permutations(range(1, 10)):\n        number = \"\".join(map(str, perm))\n        subtotal = sum(int(number[i:i+3]) for i in range(0, 7))\n        max_sum = max(max_sum, subtotal)\n    return max_sum\n\nans = solution()"
    ],
    "f2784483b59048f78ecec37c0cf104ea": [
        "def solution():\n    total_spent = 6 * 'x'  # Here 'x' is a placeholder for the algebraic expression.\n    return total_spent\n\nans = solution()"
    ],
    "79716db040e342488b8e0ca3c513ff69": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for p in permutations('ABCDE'):\n        if p.index('A') < p.index('B') < p.index('C'):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "639d9d79e69d4eb784e27de0551d879d": [
        "def solution():\n    ans = sum(2019 / (i * (i + 7)) for i in range(3, 2013, 7))\n    return ans\n\nans = solution()"
    ],
    "fdf926a10e994a328cedd41a2dba9645": [
        "def solution():\n    first_term = 21\n    last_term = 159\n    difference = 2\n    \n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_terms = (num_terms * (first_term + last_term)) // 2\n    \n    return sum_terms\n\nans = solution()"
    ],
    "4336ad7957714455a5e676bfde71730b": [
        "def solution():\n    def pattern(x):\n        return (int(str(x)[0]) - int(str(x)[1]))**2\n    \n    ans = pattern(55)\n    return ans\n\nans = solution()"
    ],
    "59c88edfb7be49da8035991eac68ecce": [
        "from itertools import permutations\n\ndef solution():\n    chars = ['0', '1', '2', '3', '4', '5']\n    all_permutations = sorted(set(''.join(p) for p in permutations(chars, 6) if p[0] != '0'))\n    ans = all_permutations[504]  # List index starts from 0, so 505th number has index 504\n    return int(ans)\n\nans = solution()"
    ],
    "8fa1eaa5b7fa4b98874b9e1f39b2e808": [
        "def solution():\n    digits = ['0', '2', '3']\n    count = 0\n    \n    for i in digits:\n        for j in digits:\n            for k in digits:\n                if i != j and i != k and j != k and i != '0':\n                    count += 1\n                    \n    return count\n\nans = solution()"
    ],
    "6bef5aece1a847a6937f986da3d23922": [
        "def solution():\n    alice_work_rate = 1 / 40\n    bob_work_rate = 1 / 60\n\n    for alice_days_off in range(28):\n        total_work_done = (27 - alice_days_off) * alice_work_rate + 27 * bob_work_rate\n        if total_work_done >= 1:\n            return alice_days_off\n\nans = solution()"
    ],
    "eea0bc5267ed47068ae3e77ef2b698e5": [
        "def solution():\n    ans = 546 * 4\n    return ans\n\nans = solution()"
    ],
    "7ee4e5c971f5489dada98a446c456e7d": [
        "def solution():\n    ans = []\n    for i in range(21, 50):\n        if i % 6 == 0 and i % 9 == 0:\n            ans.append(i)\n    return ans\n\nans = solution()"
    ],
    "b8879dc8433645f393f3d14ce8b21788": [
        "def solution():\n    from fractions import Fraction\n\n    # Ratios given in the problem\n    red_to_white = Fraction(1, 2)\n    white_to_black = Fraction(3, 4)\n\n    # Calculate the common ratio for all balls\n    red_to_black = red_to_white * white_to_black\n\n    # We use the ratios to define the quantities in terms of a common variable\n    red_balls = 1\n    white_balls = red_balls / red_to_white\n    black_balls = white_balls / white_to_black\n\n    # Calculate the total number of balls\n    total_balls = red_balls + white_balls + black_balls\n\n    # Calculate the scaling factor\n    factor = 136 / total_balls\n\n    # Calculate the actual number of red balls\n    num_red_balls = red_balls * factor\n\n    return int(num_red_balls)\n\nans = solution()"
    ],
    "730403a00f674fff868250a995376cb4": [
        "def solution():\n    # Calculate the common difference of the arithmetic sequence\n    common_difference = 120 - 105  # 8th term - 7th term\n\n    # Calculate the first term using the 7th term (given by problem)\n    first_term = 105 - (7 - 1) * common_difference\n\n    # Calculate the 100th term using the formula for the nth term of an arithmetic sequence\n    nth_term = first_term + (100 - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "606a8457449743e08d9df3044b63e356": [
        "def solution():\n    # Since we want at least one matching pair,\n    # we consider the worst-case scenario using the pigeonhole principle.\n    # We take out 5 socks, because even if we have the worst luck,\n    # and we take out 4 different colored socks (alternating colors),\n    # the 5th sock will definitely create a matching pair.\n    num_socks = 5\n    return num_socks\n\nans = solution()"
    ],
    "703de86e768447d88b6ebb7aeb638e8e": [
        "def solution():\n    combined_age_past = 24\n    years_past = 4\n    years_future = 2\n    \n    current_combined_age = combined_age_past + (3 * years_past)\n    future_combined_age = current_combined_age + (3 * years_future)\n    \n    return future_combined_age\n\nans = solution()"
    ],
    "640eb5c54e4c4b87a5a40a1c3e55b996": [
        "def solution():\n    received_chocolate = 8\n    original_chocolates = received_chocolate * 2\n    return original_chocolates\n\nans = solution()"
    ],
    "371b5fe21e2e4a93b42f86daca04f7cf": [
        "def solution():\n    total_volume = 10  # Total litres of orange juice\n    per_container_volume = 2  # Litres per container\n\n    num_containers = total_volume // per_container_volume  # Number of containers needed\n\n    return num_containers\n\nans = solution()"
    ],
    "c7d0858edd084447b5408a6df5a80275": [
        "def solution():\n    n = 4**2 // 2\n    return n\n\nans = solution()"
    ],
    "cff9675f0a924539ac2ac9ce83a0a08d": [
        "def solution():\n    # Calculate the sum from 5 to 80\n    first_part_sum = sum(range(5, 81))\n    # Calculate the sum from 5 to 79\n    second_part_sum = sum(range(5, 80))\n    # The total sum is the sum of both parts\n    total_sum = first_part_sum + second_part_sum\n    return total_sum\n\nans = solution()"
    ],
    "f81850060b9546ac8c3d3601b6fcbdba": [
        "def solution():\n    # let g be the number of girls\n    # let b be the number of boys\n    # g + b = 36 (total number of students)\n    # average score for girls is 88, so g * 88 is the total score of girls\n    # average score for boys is 91, so b * 91 is the total score of boys\n    # average score of the class is 89, so 36 * 89 is the total score of the class\n\n    # Let's set up the equation g * 88 + b * 91 = 36 * 89\n    # And we know that g + b = 36\n    # We can express b as b = 36 - g and substitute in the first equation\n\n    total_students = 36\n    total_avg_score = 89\n    girls_avg_score = 88\n    boys_avg_score = 91\n\n    # Total score of the class\n    total_class_score = total_students * total_avg_score\n\n    # Using substitution to express total score in terms of girls only\n    # g * girls_avg_score + (total_students - g) * boys_avg_score = total_class_score\n    # Now we can solve for g\n    g = symbols('g')\n    equation = Eq(g * girls_avg_score + (total_students - g) * boys_avg_score, total_class_score)\n\n    # Solve for g\n    num_girls = solve(equation, g)[0]\n\n    return num_girls\n\nans = solution()"
    ],
    "c530af2f48304f898bbec512de1ee00a": [
        "def solution():\n    justin_apples = 4\n    sisters_apples = 5 * 4\n    apples_left = 20\n\n    total_apples = justin_apples + sisters_apples + apples_left\n\n    return total_apples\n\nans = solution()"
    ],
    "7db195e18e37456ca8f6e7f6ef27321c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the original number of marbles Ryan had.\n    # Let y be the original number of marbles Audrey had.\n    x, y = symbols('x y')\n    \n    # The original ratio of Ryan's marbles to Audrey's marbles is 2:7\n    equation1 = Eq(x / y, 2 / 7)\n    \n    # After the changes, the ratio of Ryan's marbles to Audrey's marbles becomes 1:3\n    equation2 = Eq((x + 20) / (y - 80), 1 / 3)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[y]\n\nans = solution()"
    ],
    "fe37a41678a645a88ee9bdcc3da1b86a": [
        "def solution():\n    piano_only = 30 - 15\n    violin_only = 41 - 15\n    both = 15\n    total_students = piano_only + violin_only + both\n    return total_students\n\nans = solution()"
    ],
    "a97028adbf254284ad53a804e526f05e": [
        "def solution():\n    # If at least one student should get at least 3 apples,\n    # the maximum number of students that can be in the class\n    # is when all but one student get 1 apple,\n    # and the remaining one gets the rest.\n    # Since we have 80 apples, if one student takes 3 apples,\n    # we have 77 apples left to give out.\n    # Each of the remaining students can get only 1 apple.\n    num_apples_left = 80 - 3\n    # Count the student who got 3 apples.\n    class_size = num_apples_left + 1\n    \n    return class_size\n    \nans = solution()"
    ],
    "f4489da9f1884801a10bcedceb12a47f": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    total_minutes = 13 + 23 + 8 + 27\n    arrival_time = datetime.strptime('7:45 AM', '%I:%M %p')\n    wake_up_time = arrival_time - timedelta(minutes=total_minutes)\n\n    return wake_up_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "efb92f40c4c44473bfcc2623df15f364": [
        "def solution():\n    ans = sum([i if i % 4 in [0, 1] else -i for i in range(1, 61)])\n    return ans\n\nans = solution()"
    ],
    "153332ac79b349408ebeb32bb8a75f24": [
        "def solution():\n    return 489 + 375 + 92\n\nans = solution()"
    ],
    "8d5b99e07c77482abfe53cb919364656": [
        "def solution():\n    ans = 4.2 + 7.8 + 7.5 - 2.5\n    return ans\n\nans = solution()"
    ],
    "11f6f29725ad4c4dacb24f94de454b8a": [
        "def solution():\n    coins = [1, 2, 5]\n    totals = set()\n\n    for c1 in coins:\n        for c2 in coins:\n            for c3 in coins:\n                totals.add(c1 + c2 + c3)\n\n    return len(totals)\n\nans = solution()"
    ],
    "b440fab9ebc4484292e18843c0eaa0f9": [
        "from itertools import permutations\n\ndef solution():\n    entrances = [1, 2, 3, 4]\n    ways = 0\n    for perm in permutations(entrances, 3):\n        # Check if Joe (perm[0]) and Mike (perm[1]) are at the same entrance\n        if perm[0] != perm[1]:\n            ways += 1\n    return ways\n\nans = solution()"
    ],
    "7730e0dc2bae4994a062e0e494e4b937": [
        "def solution():\n    total_heads = 51\n    total_legs = 160\n\n    # Since the number of chickens and ducks is equal, we will assume that there are x chickens and x ducks.\n    # Therefore, there will be total_heads - 2x cows (since each cow has 1 head).\n    # Each chicken and each duck has 2 legs, and each cow has 4 legs. \n    # So, the total number of legs will be: 2*x (from chickens) + 2*x (from ducks) + 4*(total_heads - 2x) (from cows).\n    # We can create an equation: 2x + 2x + 4(total_heads - 2x) = total_legs\n\n    # Simplify the equation: 4x + 4*total_heads - 8x = total_legs\n    # -4x + 4*total_heads = total_legs\n    # 4x = 4*total_heads - total_legs\n    # x = (4*total_heads - total_legs) / 4\n\n    x = (4 * total_heads - total_legs) // 4\n\n    return x\n\nans = solution()"
    ],
    "43077c3455b94d59a72275e377e21a52": [
        "def solution():\n    total_juice = 750\n    rebekah_drank = total_juice / 5\n    abigail_drank = 200\n    anna_drank = 120\n\n    juice_left = total_juice - (rebekah_drank + abigail_drank + anna_drank)\n    return juice_left\n\nans = solution()"
    ],
    "ef5c87ebb60d47efb47ffb24ab3fdaa4": [
        "def solution():\n    percentage = 75\n    quantity = 90\n    ans = (percentage / 100) * quantity\n    return ans\n\nans = solution()"
    ],
    "71354999b1864945830241cc90cefcff": [
        "def solution():\n    total_distance = 3000  # nautical miles\n    total_hours = 13 * 24 + 22  # converting days and hours to hours\n\n    average_speed = total_distance / total_hours  # calculating average speed\n\n    return round(average_speed)  # rounding to nearest integer\n\nans = solution()"
    ],
    "1d807b2a160d43e5ab284c4f23b30f90": [
        "def solution():\n    total_volume = 2 + 3\n    total_juice = 2 * 0.40 + 3 * 0.70\n    concentration = total_juice / total_volume\n\n    return concentration\n\nans = solution()"
    ],
    "0046d00874954b5eb9373fa247e7d3bb": [
        "def solution():\n    ans = 8.4 - 4.7 + 2.6 - 3.3\n    return ans\n\nans = solution()"
    ],
    "acfd2df07c9d4b9e8c8d0fd768515606": [
        "def solution():\n    return 2136 // 8\n\nans = solution()"
    ],
    "0153bfa01ade41859016fa9a0b48eb8d": [
        "def solution():\n    first_multiple = (50 // 11) + 1 if 50 % 11 != 0 else 50 // 11\n    last_multiple = 150 // 11\n    number_of_multiples = last_multiple - first_multiple + 1\n    return number_of_multiples\n\nans = solution()"
    ],
    "600418fdb9fd41ac90e4ae2ed38c4317": [
        "def solution():\n    initial_stamps = 1347\n    gave_to_sister = 339\n    bought_stamps = 455\n    gave_away_again = 777\n\n    final_stamps = initial_stamps - gave_to_sister + bought_stamps - gave_away_again\n\n    return final_stamps\n\nans = solution()"
    ],
    "e8307197fd5741a1bab5b7ce9faff12e": [
        "def solution():\n    people_in_front_of_Bella = 15\n    people_behind_Albert = 12\n    Albert_and_Bella = 2\n\n    total_people = people_in_front_of_Bella + people_behind_Albert + Albert_and_Bella\n\n    return total_people\n\nans = solution()"
    ],
    "a5a5bc9b5a914f54b5a59cc324c4e470": [
        "def solution():\n    numbers = [17, 21, 36, 23, 4, 49, 10]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "4d4ad28089e14625a3c978c761454507": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    m, w = symbols('m w')  # m for men, w for women\n\n    # After 36 women left, there were 3/5 as many women as men.\n    equation1 = Eq(w - 36, 3/5 * m)\n\n    # After 48 men left, the number of men became equal to the number of women.\n    equation2 = Eq(m - 48, w - 36)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (m, w))\n\n    # Number of men and women originally at the bus stop.\n    original_men = solutions[m]\n    original_women = solutions[w] + 36  # Adding back the 36 women who left on the first bus.\n\n    # Total number of people originally at the bus stop.\n    total_people = original_men + original_women\n\n    return total_people\n\nans = solution()"
    ],
    "ca6721b4076a459bbe0a58a7d219708a": [
        "def solution():\n    primes = [23, 29]\n    return primes[0]  # 23 is a prime number between 20 and 30\n\nans = solution()"
    ],
    "4828afb807854856954b4952a48e470e": [
        "def solution():\n    return 36 * 24\n\nans = solution()"
    ],
    "f826de035ab748bbbf391b6f382601be": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'f' be the current age of Fatouma\n    f = symbols('f')\n\n    # Create the equation based on the problem\n    equation = Eq(f + 2, 2 * (f - 5))\n\n    # Solve the equation\n    age = solve(equation, f)\n\n    return age[0]\n\nans = solution()"
    ],
    "5d81fd5bcb6d489fbca8914a372910a6": [
        "def solution():\n    ways = []\n    count = 0\n    for x1 in range(1, 14):\n        for x2 in range(x1+1, 14):\n            x3 = 14 - x1 - x2\n            if x3 > x2:\n                count += 1\n                ways.append((x1, x2, x3))\n    return count, ways\n\nans = solution()"
    ],
    "5990abeaf2ef44129f8a7714654dd1c8": [
        "def solution():\n    numerator = 1*3*8 + 2*6*16 + 3*9*24\n    denominator = 1*2*4 + 2*4*8 + 3*6*12\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "646fcc0d8aca45c2b2efbaed5048a912": [
        "def solution():\n    total_heights = 132 - 124 + 1  # Total possible distinct heights\n    minimum_same_height = 4  # Minimum number of students with the same height\n    # According to the Pigeonhole Principle, we divide the minimum number of students\n    # with the same height to get at least one height with at least this number of students.\n    # We add one more to ensure that the condition is satisfied.\n    class_size = (total_heights - 1) * minimum_same_height + 1\n    return class_size\n\nans = solution()"
    ],
    "f84e58b96fc548a9b8a2cc0247ee0d82": [
        "def solution():\n    total_cost = 3 * 0.50  # cost of three pens\n    money_given = 5  # £5\n    change = money_given - total_cost\n    \n    return change\n\nans = solution()"
    ],
    "e9d3605185b84231858a4ef516053885": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(8.5 - 4 * (x - 1.5), 2.5 * x + 3 * (2.5 - x))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "15264635822b439b919be7d215630609": [
        "def solution():\n    total_books = 3154\n    english_books = 1849\n    chinese_books = total_books - english_books\n    difference = english_books - chinese_books\n    return difference\n\nans = solution()"
    ],
    "db91ac44fa344822983552e996da323b": [
        "def solution():\n    # To ensure Fred wins, he must leave George with 4 oranges on his last turn,\n    # because no matter how many George takes (1, 2, or 3), Fred will then be\n    # able to take the remaining and win.\n\n    # Based on the above logic, we can backtrack from the winning position.\n    # Every time it's Fred's turn, the number of oranges must be 1 more than a\n    # multiple of 4 to ensure that Fred can leave a multiple of 4 for George.\n\n    # Starting with 15 oranges, Fred needs to reach a situation where the number of\n    # oranges left is 12 after his first move (a multiple of 4 for George to deal with).\n    # To reach there, Fred must take 3 oranges.\n    \n    # Fred takes 3 oranges on his first turn, leaving 12. Then no matter what George does,\n    # Fred can always return to a multiple of 4 after his turn, ensuring victory.\n\n    fred_first_move = 3  # Fred should take 3 oranges on his first turn\n    return fred_first_move\n\nans = solution()"
    ],
    "0760ea6011714945925169546bfe0c97": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    end_time = datetime.strptime(\"7:15 PM\", \"%I:%M %p\")\n    cooking_duration = timedelta(hours=1, minutes=25)\n    start_time = end_time - cooking_duration\n    return start_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "d87d77e43dab4026a154e8ec2beda138": [
        "def solution():\n    coins = [1, 2, 5]\n    totals = set()\n\n    for i in coins:\n        for j in coins:\n            for k in coins:\n                total = i + j + k\n                totals.add(total)\n                \n    return len(totals)\n\nans = solution()"
    ],
    "8a63aa9572bb4412ae53e5439a7865ac": [
        "def solution():\n    # Let x be the number of years later for their ages to add up to 48\n    oliver_current_age = 20\n    lin_current_age = 26\n\n    # In x years, Oliver will be 20 + x and Lin will be 26 + x\n    # Their combined age will be (20 + x) + (26 + x) = 46 + 2x\n    # We want to know when 46 + 2x will be equal to 48\n\n    x = (48 - 46) / 2\n\n    return int(x)\n\nans = solution()"
    ],
    "c09507e96cc44da8898b1879faefbf61": [
        "def solution():\n    # We need to find a value of p such that 245p is a perfect cube.\n    # The prime factorization of 245 is 5 * 7 * 7.\n    # To make 245p a perfect cube, the prime factors of p must complete the cube.\n    # Since 5 is missing two multiples to complete the cube (5^3), and 7 is missing one (7^3), p must be 5^2 * 7.\n\n    p = 5**2 * 7\n    return p\n\nans = solution()"
    ],
    "a2090f2b75c044cb932b529d4f6c76ed": [
        "def solution():\n    num_poles = 40\n    distance_between_poles = 3\n\n    total_distance = (num_poles - 1) * distance_between_poles\n\n    return total_distance\n\nans = solution()"
    ],
    "61c8e4b651014f6abc20d2bf4138cdcb": [
        "def solution():\n    # We start by factorizing 245 to find its prime factors\n    prime_factors = [5, 7, 7] # 245 = 5 * 7 * 7\n\n    # To make 245p a perfect cube, p must contain prime factors\n    # that make the total exponent of each prime factor a multiple of 3\n    # Currently, the exponents are: 5^1, 7^2\n\n    # For 5, we need two more 5's to make it a cube (5^3)\n    p_5 = 5 ** 2\n\n    # For 7, we need one more 7 to make it a cube (7^3)\n    p_7 = 7 ** 1\n\n    # So the value of p that will make 245p a perfect cube is the product\n    # of the additional prime factors needed\n    p = p_5 * p_7\n\n    return p\n\nans = solution()"
    ],
    "25a47ea57b4647599987b84251fd1281": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations('1234567890', 5):\n        e, s, a, m, o = p\n        if e == '0' or s == '0' or a == '0' or m == '0' or o == '0':  # leading zeros are not allowed\n            continue\n        \n        esse = int(e + s + s + e)\n        sasmo = int(s + a + s + m + o)\n        \n        if esse + 2018 == sasmo:\n            return int(s) + int(a) + int(s) + int(m) + int(o)\n\nans = solution()"
    ],
    "77fd9afe874840219f53431a52a3a55f": [
        "def solution():\n    ans = sum(64 - i*2*(-1)**i for i in range(10))\n    return ans\n\nans = solution()"
    ],
    "22c136c471c246b1b3392b99cb5d2dfb": [
        "def solution():\n    last_year_min = 36000 * (1/4)\n    return last_year_min + 1\n\nans = solution()"
    ],
    "47dff524f26242ad9fa5ff839557debe": [
        "def solution():\n    total_students = 48\n    absent_students = 1 + 1  # one on sick leave and one on personal leave\n    present_students = total_students - absent_students\n    attendance_rate = (present_students / total_students) * 100\n    return round(attendance_rate, 2)\n\nans = solution()"
    ],
    "9be9f04df4aa4fad90e2c592b50495cd": [
        "def solution():\n    cm_in_m = 100\n    cm_value = 736\n\n    m_value = cm_value / cm_in_m\n    return m_value\n\nans = solution()"
    ],
    "c49f4ad1d6e74285a471cae0a0494b8c": [
        "def solution():\n    numerator = 5\n    denominator = 15\n    target_numerator = 8\n    target_denominator = target_numerator * denominator / numerator\n    return target_denominator\n\nans = solution()"
    ],
    "4e4e510238974caa86256923e2e038c2": [
        "def solution():\n    first_term = 22\n    last_term = 98\n    difference = 26 - 22\n\n    num_terms = ((last_term - first_term) / difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "08f15646d5be4ac6a59a45c45853c225": [
        "def solution():\n    sum_series = 0\n    for i in range(2, 2018):\n        sum_series += sum(j/i for j in range(1, i))\n    return sum_series\n\nans = solution()"
    ],
    "8a10d5adbcea4531970b60dfa42fd819": [
        "def solution():\n    return 0.30 * 270\n\nans = solution()"
    ],
    "b4e4441c3f0440be8e09da643628b41d": [
        "def solution():\n    # Tim's position from the front\n    front_to_back = 4\n    # Tim's position from the back\n    back_to_front = 3\n    # Tim's position from the left\n    left_to_right = 1\n    # Tim's position from the right\n    right_to_left = 4\n\n    # Tim stands the 4th in line from the front, then there are 3 people in front of him\n    rows = front_to_back + back_to_front - 1\n    \n    # Tim stands the 4th in line from the right, there are 3 people to his right\n    cols = left_to_right + right_to_left - 1\n\n    # Total number of band members is rows times columns\n    total_members = rows * cols\n\n    return total_members\n\nans = solution()"
    ],
    "f784396939674fa89af27d5359f38965": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apples, oranges = symbols('apples oranges')\n    \n    original_ratio = Eq(apples/oranges, 3/8)\n    new_ratio = Eq((apples - 1)/oranges, 1/3)\n    \n    solutions = solve((original_ratio, new_ratio), (apples, oranges))\n    \n    return solutions[oranges]\n\nans = solution()"
    ],
    "43672fb4dbf24b02bb90359769d8f568": [
        "def solution():\n    numbers = [199, 99.9, 100.2, 100.029, 98.999]\n    closest = min(numbers, key=lambda x: abs(100 - x))\n    return closest\n\nans = solution()"
    ],
    "488c8f884bea4ca59a65a31e0e04aa9d": [
        "def solution():\n    total_savings = 150\n    savings_per_day = 2.4\n    savings_per_week = savings_per_day * 7\n\n    number_of_weeks = total_savings / savings_per_week\n\n    return int(number_of_weeks) if number_of_weeks == int(number_of_weeks) else int(number_of_weeks) + 1\n\nans = solution()"
    ],
    "1f546f2cbdd947219d887b2aa75e71f6": [
        "def solution():\n    ans = 25 * 4 * 27\n    return ans\n\nans = solution()"
    ],
    "410cabc838ed44f48fb660b0a2c3782d": [
        "def solution():\n    return 9 + 88\n\nans = solution()"
    ],
    "a9ec2d33adf8474197070ba71da55c04": [
        "def solution():\n    return 342 + 576\n\nans = solution()"
    ],
    "bb3a1671c17647d78e01b43d8630223f": [
        "def solution():\n    # Sum of the first 14 consecutive natural numbers starting with 1\n    sum_first_14 = sum(range(1, 15))\n\n    # Adding 2019 to the sum of the first 14 natural numbers\n    new_sum = sum_first_14 + 2019\n\n    # Find eight consecutive natural numbers that add up to the new sum\n    for i in range(1, new_sum):\n        eight_sum = sum(range(i, i+8))\n        if eight_sum == new_sum:\n            return i\n\nans = solution()"
    ],
    "12396eda43e54937ba9c6bd015a43e54": [
        "def solution():\n    first_term = 2\n    last_term = 100\n    difference = 2\n    \n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_sequence = (num_terms * (first_term + last_term)) // 2\n    \n    return sum_sequence\n\nans = solution()"
    ],
    "a666c2ea1fef4b64a986908460e91640": [
        "from math import factorial\n\ndef solution():\n    letters = \"STATISTICS\"\n    letter_count = {letter: letters.count(letter) for letter in set(letters)}\n\n    numerator = factorial(len(letters))\n    denominator = 1\n    for count in letter_count.values():\n        denominator *= factorial(count)\n\n    ans = numerator // denominator\n    return ans\n\nans = solution()"
    ],
    "6fda0ead943b49128df85bf6b5849e36": [
        "def solution():\n    tasks = [3, 1, 5, 1, 1, 1, 1]  # The days it takes for each separate task\n    return max(tasks) + sum(tasks) - max(tasks)  # The longest task will overlap with others\n\nans = solution()"
    ],
    "15b65d4a82f249f0b83939ac418a1d25": [
        "def solution():\n    common_factor = 3428\n    sum_of_other_factors = 836 + 162 + 2\n    ans = common_factor * sum_of_other_factors\n    return ans\n\nans = solution()"
    ],
    "28bfcc3c31154a39a652d06135594627": [
        "def solution():\n    total_amount = 1000\n    note_value = 5\n\n    num_notes = total_amount / note_value\n\n    return int(num_notes)\n\nans = solution()"
    ],
    "02a4bfa1cce24886a09dd6a0ebf0cfc6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let r represent the weight of one rabbit, c represent the weight of one chicken, and k represent the weight of one kangaroo\n    r, c, k = symbols('r c k')\n    \n    # 2 rabbits is equal to 6 chickens\n    equation1 = Eq(2 * r, 6 * c)\n    \n    # 3 kangaroos is equal to 4 rabbits\n    equation2 = Eq(3 * k, 4 * r)\n    \n    # We will extract an expression for how many chickens weigh the same as one kangaroo by solving the equations simultaneously\n    solutions = solve((equation1, equation2), (r, c, k))\n    \n    # Find how many chickens weigh the same as one kangaroo using one of the solved equations\n    # Since k = (4/3) * r and r = (6/2) * c, it implies that k = 2 * (6/2) * c\n    kangaroo_weight_in_chickens = solutions[k] / solutions[c]\n    \n    return kangaroo_weight_in_chickens\n\nans = solution()"
    ],
    "a1ec4f1847ce4822947204953d74de5b": [
        "def solution():\n    return 342 + 576\n\nans = solution()"
    ],
    "7d88ede971b64fd9827de58a37434916": [
        "def solution():\n    Y = (9 * 5 + 15 * 5) // 5\n    return Y\n\nans = solution()"
    ],
    "b2264aba67854c45bb17ca0a45c40d21": [
        "def solution():\n    snow_white_position = 7\n    total_people_in_line = (snow_white_position - 1) * 2\n\n    return total_people_in_line\n\nans = solution()"
    ],
    "03c5885919f34314bb4b44bfe248420c": [
        "def solution():\n    participants = 100\n    # If every school except one has 3 participants, the last school must have at least 4.\n    # So we aim to find the maximum number of schools possible under this condition.\n    max_schools = (participants - 4) // 3 + 1\n    return max_schools\n\nans = solution()"
    ],
    "48ff1e7865214bdc975558caeae2d50b": [
        "def solution():\n    ashley_age = 10\n    ashley_age_three_years_ago = ashley_age - 3\n    brother_age_three_years_ago = ashley_age_three_years_ago - 2\n    brothers_current_age = brother_age_three_years_ago + 3\n    return brothers_current_age\n\nans = solution()"
    ],
    "06dde9f26aa64d8c91f787c1c4d71389": [
        "def solution():\n    first_term = 7\n    last_term = 52\n    difference = 3\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "65a3698a450943d3ab1dbc4023a956a8": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 2019):\n        fractional_part = (2018 + i) / 5 - ((2018 + i) // 5)\n        total_sum += fractional_part\n    return total_sum\n\nans = solution()"
    ],
    "33956c5d5c43463196c5619abf1d36ca": [
        "def solution():\n    for num in range(1000, 10000):\n        if (num * 6) ** (1/3) % 1 == 0 and (num // 6) ** 0.5 % 1 == 0:\n            return num\n\nans = solution()"
    ],
    "ace1245119464470b5cdb95b2c3595e4": [
        "from fractions import Fraction\n\ndef solution():\n    # Convert mixed numbers to improper fractions\n    mixed_number1 = 3 + Fraction(5, 9)\n    mixed_number2 = 6 + Fraction(4, 9)\n\n    # Add the two improper fractions\n    result = mixed_number1 + mixed_number2\n\n    # Simplify the result if possible\n    result_simplified = result.limit_denominator()\n\n    return result_simplified\n\nans = solution()"
    ],
    "125fbe1405c64507b8d833c4d1798f63": [
        "def solution():\n    # Speed of the faster train\n    speed_fast = 48  # km/h\n    # Speed of the slower train\n    speed_slow = 36  # km/h\n\n    # Let the time taken by the trains to meet be t hours\n    # Distance covered by the faster train = speed_fast * t\n    # Distance covered by the slower train = speed_slow * t\n    \n    # According to the problem, the distance covered by the faster train\n    # is 70 km more than that covered by the slower train.\n    # Therefore, speed_fast * t = speed_slow * t + 70\n\n    # We can now solve for t\n    t = 70 / (speed_fast - speed_slow)\n\n    # The total distance between the two stations is the sum of the distances\n    # travelled by the two trains when they meet\n    distance = (speed_fast * t) + (speed_slow * t)\n\n    return distance\n\nans = solution()"
    ],
    "e56936fac25c4b8e9ff669e07797ab6c": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 4), (1, 7), (5, 9)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "8587852257524191ae8a0cf973cb3197": [
        "def solution():\n    # Tim is 4th from the front and 3rd from the back,\n    # so there are 3 people in front of him, and 2 people behind him\n    total_in_line = 3 + 1 + 2  # Tim is also counted\n\n    # Tim is 4th from the left and 7th from the right,\n    # so there are 3 people to his left, and 6 people to his right\n    total_in_row = 3 + 1 + 6  # Tim is also counted\n\n    # To find the total number of members, multiply the number of rows and the number of columns\n    total_members = total_in_line * total_in_row\n\n    return total_members\n\nans = solution()"
    ],
    "528f30d146454d9fbd940a06520bb850": [
        "from math import lcm\n\ndef solution():\n    return lcm(2, 3, 8)\n\nans = solution()"
    ],
    "64d0d52e2bf64e88b638cf7cc846261f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lily, gigi = symbols('lily gigi')\n\n    equation1 = Eq(lily - 36, gigi + 36 + 26)\n    equation2 = Eq(lily, 8 * gigi)\n\n    solutions = solve((equation1, equation2), (lily, gigi))\n\n    return solutions[lily]\n\nans = solution()"
    ],
    "3a5a01fd9a9844408f2c7062b63270b0": [
        "def solution():\n    result = 48 / (4/3) / (6/7)\n    return result\n\nans = solution()"
    ],
    "e45decf2b87f4c4ba7f9717cc4a6fb05": [
        "def solution():\n    for boats in range(1, 100):  # Reasonable range to search for number of boats\n        if (boats + 1) * 6 == (boats - 1) * 9:\n            students = (boats + 1) * 6\n            return students\n\nans = solution()"
    ],
    "39977f0e34da4e1489169692316de3da": [
        "def solution():\n    # Initialize counter for pairs\n    pairs_count = 0\n    \n    # Loop over all possible pairs of distinct numbers from 1 to 100\n    for i in range(1, 101):\n        for j in range(i+1, 101):  # Start from i+1 to ensure distinct numbers and to not repeat the same pair\n            if (i + j) % 5 == 0:  # Check if the sum is a multiple of 5\n                pairs_count += 1  # If so, increment the counter\n    \n    return pairs_count\n\nans = solution()"
    ],
    "9d7ec4d7b1464bba9277da3aadbff391": [
        "def solution():\n    # Define the value of coins in cents\n    coins = [50, 20, 10, 5]\n\n    # Total value before losing a coin\n    total_before_loss = sum(coins)\n\n    # Check each coin to determine which was lost\n    for coin in coins:\n        remaining_value = total_before_loss - coin\n        # Since remaining value is twice as much as her brother's value\n        # Her brother's value is half of the remaining value\n        brothers_value = remaining_value / 2\n\n        # Check if brother's value is an integer and not in Zoey's remaining coins\n        if brothers_value.is_integer() and brothers_value not in coins:\n            lost_coin = coin\n            break\n\n    return lost_coin\n\nans = solution()"
    ],
    "e5c1b794ac8648ec850e93b55dab48de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rasidah, chaiseng = symbols('rasidah chaiseng')\n\n    equation1 = Eq(rasidah, chaiseng - 48)\n    equation2 = Eq(chaiseng * (1 - 6/7), (rasidah * (1 - 3/5)) / 2)\n\n    solutions = solve((equation1, equation2), (rasidah, chaiseng))\n\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "718f81285ce94030bea31c3cbb679ab7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for Lily's and Gigi's wheat\n    lily, gigi = symbols('lily gigi')\n    \n    # Equation 1: After giving 36 tonnes, Lily has 26 more than Gigi\n    equation1 = Eq(lily - 36, gigi + 36 + 26)\n    \n    # Equation 2: Lily's wheat is 8 times Gigi's wheat\n    equation2 = Eq(lily, 8 * gigi)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (lily, gigi))\n    \n    return solutions[lily]\n\nans = solution()"
    ],
    "0aa90dabe6d64f0285ceda7e7598b164": [
        "def solution():\n    return 599999 + 59999 + 5999 + 599 + 59 + 5\n\nans = solution()"
    ],
    "d09cf908f3aa4485b244c8b396d7753b": [
        "def solution():\n    # The ones digit is the sum of the other three digits, and the sum of all digits is 16.\n    # Let the digits be a (thousands), b (hundreds), c (tens), and d (ones).\n    # We set up the equations based on the problem description:\n    # a < b < c < d\n    # c = a + b\n    # d = a + b + c\n    # a + b + c + d = 16\n    # We will search for all possible combinations of (a, b, c, d) satisfying these conditions.\n    for a in range(1, 10):\n        for b in range(a + 1, 10):\n            c = a + b\n            d = a + b + c\n            if c < d and d < 10 and a + b + c + d == 16:\n                return d\n\nans = solution()"
    ],
    "2fc75a01535c4ae98dffb54b5bcd459f": [
        "def solution():\n    digits = ['0', '2', '4']\n    count = 0\n    for i in digits:\n        for j in digits:\n            if i != j and i != '0':   # Ensure unique digits and the first digit is not 0\n                count += 1\n    return count\n\nans = solution()"
    ],
    "5d4699cf5231465b949cc5c32e601170": [
        "from itertools import permutations\n\ndef solution():\n    max_number = 0\n    digits = [2, 4, 6, 8]\n    for perm in permutations(digits):\n        number = int(''.join(map(str, perm)))\n        if number > max_number and number % 4 == 0:\n            max_number = number\n    return max_number\n\nans = solution()"
    ],
    "3dd0e028b2e0476fb27782b124909bdf": [
        "def solution():\n    # Distance is the same both uphill and downhill\n    # Amy's speed uphill: 5 mph, time uphill: 3 hours\n    distance_uphill = 5 * 3\n    \n    # Amy's speed downhill: 10 mph, time downhill: 2 hours\n    distance_downhill = 10 * 2\n    \n    # Total distance covered is sum of uphill and downhill distances\n    total_distance = distance_uphill + distance_downhill\n    \n    # Total time is sum of uphill and downhill times\n    total_time = 3 + 2\n    \n    # Average speed is total distance divided by total time\n    average_speed = total_distance / total_time\n    \n    return average_speed\n\nans = solution()"
    ],
    "01a32f2cf14e462c9b61d1fcd77574f4": [
        "def solution():\n    # Calculate the distance for each part of the trip\n    uphill_distance = 3 * 5\n    downhill_distance = 2 * 10\n\n    # Calculate the total distance and the total time\n    total_distance = uphill_distance + downhill_distance\n    total_time = 3 + 2\n\n    # Calculate the average speed\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "58650bb89c1441479147f7d4f580c378": [
        "def solution():\n    # Let x be the number that goes in the box\n    # According to the problem: (x/7) * 63 = 54\n    # We solve for x: x = (54 * 7) / 63\n    x = (54 * 7) / 63\n    return x\n\nans = solution()"
    ],
    "4d8046b8a53d442a9ac1c228e0ce0ab7": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['2', '4', '6', '8']\n    max_number = 0\n\n    for perm in permutations(digits):\n        number = int(''.join(perm))\n        if number % 4 == 0 and number > max_number:\n            max_number = number\n\n    return max_number\n\nans = solution()"
    ],
    "11e0382a85804608b378e0d0257999a1": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.9\n    years = 5\n\n    final_value = initial_value * (depreciation_rate ** years)\n    ans = round(final_value, 1)\n\n    return ans\n\nans = solution()"
    ],
    "f0bee63f873d497b96407169a7e2db47": [
        "def solution():\n    # Fixed rates and charges\n    base_rate = 2  # dollars per kilowatt-hour for the first 5 kilowatt-hours\n    extra_rate = 1  # dollars for each additional kilowatt-hour\n    service_fee = 3  # dollars fixed service fee\n    total_money = 63  # total dollars available\n    \n    # First calculate the cost for the first 5 kilowatt-hours\n    base_cost = base_rate * 5\n    \n    # Subtract the fixed service fee and base cost from total money to calculate the remaining money\n    remaining_money = total_money - service_fee - base_cost\n    \n    # Calculate the number of additional kilowatt-hours she can use\n    additional_kWh = remaining_money / extra_rate\n    \n    # Total kilowatt-hours Susan can use is the sum of the first 5 and additional\n    total_kWh = 5 + additional_kWh\n\n    return total_kWh\n\nans = solution()"
    ],
    "cc135b9291974bc8a3f809cc912e685e": [
        "def solution():\n    n = 1\n    while True:\n        if n % 3 == 2 and n % 7 == 6 and n % 11 == 10:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "7134e7994980408d978447b2fb2d3866": [
        "def solution():\n    for x in range(1, 10):\n        for y in range(10):\n            A = int(f\"{x}{y}\")\n            B = int(f\"4{x}{y}\")\n            if B == 10 + 7 * A:\n                return A\n\nans = solution()"
    ],
    "de23539233a540d8a78444b87207ab4f": [
        "def solution():\n    total_cookies = 9 * 660\n    small_box_capacity = 600\n    small_boxes_needed = (total_cookies + small_box_capacity - 1) // small_box_capacity\n    return small_boxes_needed\n\nans = solution()"
    ],
    "a6fe92eccb9540d7bace6c4b67cdf3d2": [
        "def solution():\n    return abs(-19 - (-8))\n\nans = solution()"
    ],
    "18183ed9b54a424c9c391e8cb804cfc6": [
        "def solution():\n    total_weight = 20 + 30\n    juice_in_first_punch = 20 * 0.35\n    juice_in_second_punch = 30 * 0.60\n    total_juice = juice_in_first_punch + juice_in_second_punch\n    concentration = (total_juice / total_weight) * 100\n    return concentration\n\nans = solution()"
    ],
    "048da12bce8148d3a40134a2b3b09a86": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let's denote x as the original amount of grain in warehouse B\n    x = symbols('x')\n    \n    # create the equation based on the problem statement\n    equation = Eq((50 + 12), 2 * (x - 16))\n    \n    # solve the equation\n    original_grain_b = solve(equation, x)\n\n    return original_grain_b[0]\n\nans = solution()"
    ],
    "0a85a3267e0d4f238d507e043b936277": [
        "def solution():\n    # Total passed in at least one test\n    total_passed_at_least_one = 43\n    \n    # Total passed each test\n    passed_math = 30\n    passed_science = 28\n    passed_english = 25\n    \n    # Maximum that can pass all three tests is limited by the number of students \n    # that passed at least one test minus those that passed exactly one or two tests\n    # Using inclusion-exclusion principle, we get that at most all students could have \n    # passed all tests, until adjusted by the number of students that passed only one or two tests\n    \n    # Since we want to maximize the number that passed all three, let's start with the\n    # assumption that all 43 students passed all three tests, and reduce this number\n    # by the excess count - those that are over the total count if they were unique passers\n    # of each test\n    max_passed_all_three = total_passed_at_least_one - ((passed_math + passed_science + passed_english) - total_passed_at_least_one)\n    \n    # In case our calculation goes negative, it means there is no overlap and zero students \n    # passed all three tests, hence we take the maximum with 0\n    max_passed_all_three = max(0, max_passed_all_three)\n    \n    return max_passed_all_three\n\nans = solution()"
    ],
    "f17963c6412147f8a3c618b9ffa4db12": [
        "def solution():\n    result = 0.50 * 0.20 * 6000\n    return result\n\nans = solution()"
    ],
    "f0b18311921842e38deebe821472b76e": [
        "def solution():\n    total_cookies = 76\n    cookies_per_box = 6\n\n    boxes_needed = (total_cookies + cookies_per_box - 1) // cookies_per_box\n\n    return boxes_needed\n\nans = solution()"
    ],
    "719dc7a052524541afb0f37592e3b324": [
        "from math import factorial\n\ndef solution():\n    word = 'COLLEGE'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    \n    ans = factorial(len(word))\n    for count in letter_counts.values():\n        ans //= factorial(count)\n    \n    return ans\n\nans = solution()"
    ],
    "b59168ae6b464ccaa42cf8065c6eb4ae": [
        "def solution():\n    from sympy import primerange\n\n    # Prime factorize 4320\n    num = 4320\n    prime_factors = {factor: 0 for factor in primerange(1, num + 1)}\n\n    for factor in prime_factors:\n        while num % factor == 0:\n            prime_factors[factor] += 1\n            num //= factor\n\n    # Prime factorize (3/2)^n\n    # Since (3/2)^n can only produce 3 and 2 as prime factors, we concentrate on these\n    two_power = prime_factors[2]\n    three_power = prime_factors[3]\n\n    # For (3/2)^n to be an integer, we need the power of 3 in 4320 to be >= n\n    # and the power of 2 to have a surplus of >= n to counteract the division.\n    # Minimum power of 2 that remains after dividing by (3/2)^n should be 0.\n    # Since each (3/2) contributes -1 to the power of 2, we have the inequality:\n    # two_power - n >= 0  => n <= two_power\n\n    # Thus, the number of integer values for n is the smallest power of prime factors (2 or 3)\n    ans = min(two_power, three_power)\n\n    return ans\n\nans = solution()"
    ],
    "4dbb6a3e89004483bd9aad06124dacee": [
        "def solution():\n    return 6000 * (20 / 100) * (50 / 100)\n\nans = solution()"
    ],
    "2f137b3f948e48c59657d647ceea7f64": [
        "def solution():\n    # Let x be the total number of people and y be the total number of benches.\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    equation1 = Eq(x - 3*y, 7)  # 3 people per bench with 7 people standing\n    equation2 = Eq(7*(y - 3), x)  # 7 people per bench with 3 extra benches\n\n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "5b64a9ba57014e80a0eadd05b75a22b7": [
        "def solution():\n    total_paid = 120\n    booking_fee = 30\n    cost_per_hour = 10\n\n    hours = (total_paid - booking_fee) / cost_per_hour\n    return int(hours)\n\nans = solution()"
    ],
    "97138569fa3945528991305d98ea59a6": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 4), (2, 5), (4, 7)]\n    pencils, _ = solve_congruence(*congruences)\n\n    while pencils < 400:\n        pencils += 4 * 5 * 7\n\n    return pencils\n\nans = solution()"
    ],
    "21a6577206bb4af599c66a03599918a9": [
        "def solution():\n    # Owen to Oscar: 3 fishes -> 1 rabbit\n    fishes_per_rabbit = 3\n\n    # Oscar to Dennis: 2 rabbits -> 3 packs of wheat\n    rabbits_per_pack_wheat = 2 / 3\n\n    # Find out how many fishes Owen needs to give Dennis for a pack of wheat\n    fishes_per_pack_wheat = fishes_per_rabbit * rabbits_per_pack_wheat\n\n    return fishes_per_pack_wheat\n\nans = solution()"
    ],
    "0b6a5290a25f41a7a77aba2e0b7f5322": [
        "def solution():\n    dell_stickers = 32\n    ginnie_stickers = dell_stickers // 2\n    lyn_stickers = ginnie_stickers // 4\n\n    total_stickers = ginnie_stickers + lyn_stickers\n    return total_stickers\n\nans = solution()"
    ],
    "283f1a2c7c5141a6b01dc50aa7df541c": [
        "def solution():\n    difference = 21 - 11\n    return difference\n\nans = solution()"
    ],
    "2d05e2c2cd5947adb306583d6211d765": [
        "def solution():\n    total_amount = 21.50\n    ratio_sum = 2 + 3\n    bigger_share = (total_amount / ratio_sum) * 3\n    return bigger_share\n\nans = solution()"
    ],
    "89ba0ac50c0947d59e7ffc2bb24819cb": [
        "def solution():\n    # Since we're splitting 9 into 3 numbers and 0 is allowed, we treat this as a stars and bars problem\n    # where we have 9 stars and 2 bars (to create 3 sections).\n    \n    # The formula for stars and bars is (n + k - 1)! / (k! * (n - 1)!) \n    # where n is the number of stars and k is the number of bars\n    from math import factorial\n\n    n = 9  # stars\n    k = 2  # bars\n    \n    ways = factorial(n + k) // (factorial(k) * factorial(n))\n    return ways\n\nans = solution()"
    ],
    "731fa504bf944a3997349eeb999781ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    number = symbols('number')\n    equation = Eq(number * 2 - 3, 19)\n\n    fav_number = solve(equation, number)\n\n    return fav_number[0]\n\nans = solution()"
    ],
    "3243a4ef0c884def972ed158010ea3b4": [
        "def solution():\n    digits_sum = 0\n    pages = 0\n    page_digits = 1\n\n    while digits_sum + page_digits * 9 * (10 ** (page_digits - 1)) < 1101:\n        digits_sum += page_digits * 9 * (10 ** (page_digits - 1))\n        pages += 9 * (10 ** (page_digits - 1))\n        page_digits += 1\n\n    remaining_digits = 1101 - digits_sum\n    pages += remaining_digits // page_digits\n\n    return pages\n\nans = solution()"
    ],
    "f5c4e560546f4d75baff7ccc4901ab4f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables\n    mass_empty_bottle, mass_full_juice = symbols('mass_empty_bottle mass_full_juice')\n\n    # Create equations based on the given information\n    equation1 = Eq(mass_empty_bottle + (5/6) * mass_full_juice, 4.6)\n    equation2 = Eq(mass_empty_bottle + (2/3) * mass_full_juice, 4.45)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (mass_empty_bottle, mass_full_juice))\n\n    # The mass of the empty bottle has to be converted from kilograms to grams\n    mass_empty_bottle_grams = solutions[mass_empty_bottle] * 1000\n\n    return mass_empty_bottle_grams\n\nans = solution()"
    ],
    "209f59bf096047a6b42adec3650f0b2f": [
        "def solution():\n    count = 0\n    for i in range(1, 10, 2):        # First digit must be odd and non-zero\n        for j in range(10):          # Second digit can be from 0 to 9\n            for k in range(10):      # Third digit can be from 0 to 9\n                if i + j + k == 5:   # The sum of the digits should be 5\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "6cf21aa3ccf54551ba52bdfff6859b56": [
        "def solution():\n    total_pupils = 235 + 567\n    # After transfer, both rooms will have the same number of pupils, which is half of the total\n    pupils_each_room = total_pupils // 2  # Using integer division for exact number of pupils\n    return pupils_each_room\n\nans = solution()"
    ],
    "e2b7c0b669b44057aa36a3500e3c6605": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 21))\n    return ans\n\nans = solution()"
    ],
    "c0f11f95efb245dcb3a0840d374c7f26": [
        "def solution():\n    # Assume you want to multiply the numbers 12345 and 6789 based on the route provided.\n    # As per the route \"Multiplication out of the Multiplication Table\", it means we need to multiply numbers that are not single digits.\n    ans = 12345 * 6789\n    return ans\n\nans = solution()"
    ],
    "a97a50db173b4947a7cbbd35408c0568": [
        "def solution():\n    current_term = 1\n    difference = 2\n    while True:\n        next_term = current_term + difference\n        if next_term >= 100:\n            break\n        current_term = next_term\n        difference += 2\n    return current_term\n\nans = solution()"
    ],
    "e9095a6ced1247bda89ad65c13639eb7": [
        "def solution():\n    result = 77.5 * 0.52 + 5.2 * 2.25\n    return result\n\nans = solution()"
    ],
    "3b935033a325415c8ec95174a48b4a4e": [
        "def solution():\n    andy_notebooks = 149\n    sister_notebooks = andy_notebooks - 38 - (andy_notebooks - 38)\n    return sister_notebooks\n\nans = solution()"
    ],
    "ae03ca6fe3fa45aebbb01c97d1cb54b7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    adam, ben, carl = symbols('adam ben carl')\n\n    equation1 = Eq(adam + ben, 102)\n    equation2 = Eq(ben + carl, 97)\n    equation3 = Eq(adam + carl, 93)\n\n    solutions = solve((equation1, equation2, equation3), (adam, ben, carl))\n    \n    total_weight = solutions[adam] + solutions[ben] + solutions[carl]\n\n    return total_weight\n\nans = solution()"
    ],
    "403660592ec0470dbd38b7b878ae0a19": [
        "def solution():\n    # Since the pins are identical, this is a partition problem of the number 10 into 3 parts.\n    # We can represent 10 as an ordered triplet (a, b, c) such that a <= b <= c and a + b + c = 10.\n    # We just need to find all such triplets.\n    \n    count = 0\n    for a in range(1, 10):\n        for b in range(a, 10):\n            c = 10 - a - b\n            if b <= c:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "ce60eab1409d4f9baf6240c550f9de18": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ashley, crystal, justin = symbols('ashley crystal justin')\n\n    equation1 = Eq(crystal, 2 * ashley)\n    equation2 = Eq(justin, 10 * ashley)\n    equation3 = Eq(justin, crystal + 64)\n\n    solutions = solve((equation1, equation2, equation3), (ashley, crystal, justin))\n\n    total_pages = solutions[ashley] + solutions[crystal] + solutions[justin]\n\n    return total_pages\n\nans = solution()"
    ],
    "0fbbc6b96cb740ebbd61af7fbae24d80": [
        "def solution():\n    n = 50\n    sum_sequence = (n * (n + 1)) // 2\n    return sum_sequence\n\nans = solution()"
    ],
    "9b62350128b847c5b5201460ac1d06f0": [
        "def solution():\n    ans = (5/8 + 1/17) * 8 + 9/17\n    return ans\n\nans = solution()"
    ],
    "1b7cc025e9e347ce80741fb93834ea0c": [
        "def solution():\n    for age in range(1, 100):  # Assuming Mr. Lv's age is under 100\n        base_10_age = age\n        base_3_age_with_0 = str(age) + \"0\"\n        \n        # Convert base 3 to base 10 to check\n        base_10_converted = int(base_3_age_with_0, 3)\n        \n        if base_10_converted == base_10_age:\n            return base_10_age\n\nans = solution()"
    ],
    "250872667abf4b0b871368e870726b7f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of orchids (o), tulips (t), and roses (r)\n    o, t, r = symbols('o t r')\n    \n    # Create equations based on the problem description\n    equation1 = Eq(o + t + r, 3616)               # The total number of flowers\n    equation2 = Eq(o / t, 3/5)                    # The ratio of orchids to tulips\n    \n    # After 40% of the orchids, 20% of the tulips, and 25% of the roses were sold\n    equation3 = Eq(o * (1 - 0.40) + t * (1 - 0.20) + r * (1 - 0.25), 2644)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (o, t, r))\n    \n    return solutions[o]\n\nans = solution()"
    ],
    "0cc063c19a444034a295d8438baf0c4b": [
        "def solution():\n    from math import factorial\n    ans = factorial(7)\n    return ans\n\nans = solution()"
    ],
    "507deaa25b1c45fcad9434c45d9ba929": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10):\n        for x2 in range(1, 10-x1):\n            x3 = 10 - x1 - x2\n            if x1 <= x2 <= x3:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "d156836fbd9444f5a5ba15bda04a829e": [
        "def solution():\n    from sympy import primerange\n    \n    primes = list(primerange(1, 56))\n    for i in primes:\n        if 55 - i in primes:\n            return i * (55 - i)\n    \nans = solution()"
    ],
    "6d336ec6da534a848cc3b89b64fee021": [
        "def solution():\n    ans = 379 * 0.00038 + 159 * 0.00621 + 3.79 * 0.121\n    return ans\n\nans = solution()"
    ],
    "6e8c76be7aa54ee7b128dba952c8fee0": [
        "def solution():\n    # Prime factorization of the product 7007\n    prime_factors = []\n    n = 7007\n    for i in range(2, n + 1):\n        while n % i == 0:\n            prime_factors.append(i)\n            n //= i\n        if n == 1:\n            break\n\n    # Since the problem specifies two 2-digit multiples of 7, and 7007 is a product of them,\n    # we know they must each have 7 as a factor. Let's organize the prime factors to find the two numbers.\n    # The prime factorization of 7007 is 7 * 7 * 11 * 13\n\n    # We proceed by trying combinations of the prime factors to find the 2-digit numbers\n    two_digit_multiples_of_7 = []\n    for factor1 in prime_factors:\n        for factor2 in prime_factors:\n            if factor1 != factor2:\n                num = factor1 * factor2\n                if 10 <= num <= 99:  # Check if the number is a 2-digit number\n                    two_digit_multiples_of_7.append(num)\n\n    # Remove duplicates and sort the list\n    two_digit_multiples_of_7 = sorted(list(set(two_digit_multiples_of_7)))\n\n    # Since the product is 7007 and must consist of the only 2 two-digit factors, the two numbers we are looking for\n    # must be in our list two_digit_multiples_of_7. Their product should give 7007.\n    for i in range(len(two_digit_multiples_of_7)):\n        for j in range(i + 1, len(two_digit_multiples_of_7)):\n            if two_digit_multiples_of_7[i] * two_digit_multiples_of_7[j] == 7007:\n                return two_digit_multiples_of_7[i] + two_digit_multiples_of_7[j]\n\nans = solution()"
    ],
    "1a9174d419fc4350b792c473f6c385d3": [
        "def solution():\n    # Let the cost of 1 piece of chocolate cake be c\n    # Let the cost of 1 piece of cheesecake be k\n    # Let the cost of 1 cookie be h = 9\n\n    h = 9  # given cost of 1 cookie\n\n    # From the problem statement, we have 2 equations:\n    # 3*c = 2*k (1)\n    # 3*k = 5*h (2)\n\n    # Substituting the value of h in equation (2)\n    # 3*k = 5*9\n    k = 5 * 9 / 3\n\n    # Substituting the value of k in equation (1)\n    # 3*c = 2*(5*9/3)\n    c = 2 * (5 * 9 / 3) / 3\n\n    return c\n\nans = solution()"
    ],
    "9b198ae160ae44c2a23ed12656fc56ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    basketball, volleyball = symbols('basketball volleyball')\n\n    equation1 = Eq(2 * basketball + 3 * volleyball, 195)\n    equation2 = Eq(4 * basketball + 5 * volleyball, 355)\n\n    solutions = solve((equation1, equation2), (basketball, volleyball))\n\n    return solutions[volleyball]\n\nans = solution()"
    ],
    "0ee15c78437e4441b6fab59b505f4f07": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(C + B, 18)\n    equation2 = Eq(B, A + A + A)\n    equation3 = Eq(C + A, 10)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "3a0c96637f8f4963be5154dec26041d4": [
        "def solution():\n    portion_per_day = 1/4 / 3\n    total_days = 1 / portion_per_day\n    return total_days\n\nans = solution()"
    ],
    "ab73159fcaf54202a082d7e06f5b5b05": [
        "def solution():\n    # Since the number is divisible by 9, the sum of its digits must be a multiple of 9.\n    fixed_digits_sum = 2 + 0 + 1 + 9  # Sum of the fixed digits in the number 20AMC19\n    possible_digits = set(range(10)) - {2, 0, 1, 9}  # Possible digits for A, M, and C\n\n    for A in possible_digits:\n        for M in possible_digits - {A}:\n            for C in possible_digits - {A, M}:\n                total_sum = fixed_digits_sum + A + M + C\n                if total_sum % 9 == 0:\n                    ans = A + M + C\n                    return ans  # Return the result as soon as a valid combination is found\n\nans = solution()"
    ],
    "16a3dc8e16654eba8f42e5628ae6b0d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mike_candy, valeria_candy = symbols('mike_candy valeria_candy')\n\n    # Total candy\n    equation1 = Eq(mike_candy + valeria_candy, 36)\n\n    # Eating the same amount of candy\n    equation2 = Eq(mike_candy - (valeria_candy - 22), 6)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (mike_candy, valeria_candy))\n\n    return solutions[valeria_candy]\n\nans = solution()"
    ],
    "813e51f849b44a6fa9381c1e0c4e0ab4": [
        "def solution():\n    return 237 * 3\n\nans = solution()"
    ],
    "69441d55da344f318ced84a6b17a5d9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for Melissa's current age (m) and her mother's current age (mm)\n    m, mm = symbols('m mm')\n    \n    # We have two equations based on the problem description:\n    # 1. When Melissa was 8, her mother was 32: mm - m = 32 - 8\n    # 2. Melissa's mother is now three times as old as Melissa: mm = 3 * m\n    \n    # Translate the equations into sympy equations\n    equation1 = Eq(mm - m, 24)\n    equation2 = Eq(mm, 3 * m)\n    \n    # Solve the simultaneous equations for m and mm\n    solutions = solve((equation1, equation2), (m, mm))\n    \n    # Melissa's current age is the solution to 'm'\n    return solutions[m]\n\nans = solution()"
    ],
    "0451666ed3a54fca8dd2a6d9767c0524": [
        "def solution():\n    repeating_digits = [8, 5, 7, 1, 4, 2]\n    sum_of_digits = sum(repeating_digits)\n\n    full_repeats = 58 // len(repeating_digits)\n    remaining_digits = 58 % len(repeating_digits)\n\n    total_sum = full_repeats * sum_of_digits + sum(repeating_digits[:remaining_digits])\n    return total_sum\n\nans = solution()"
    ],
    "475ca97d0299476480ca43202424b241": [
        "def solution():\n    from decimal import Decimal\n\n    # Define decimals\n    first = Decimal('4.73') / (1 - Decimal('0.01'))\n    second = Decimal('4.73')\n    third = Decimal('4.77')\n    fourth = Decimal('4.737')\n\n    # Find the smallest one\n    smallest = min(first, second, third, fourth)\n\n    return smallest\n\nans = solution()"
    ],
    "21362a16887e4938b66f90a3b86538ec": [
        "def solution():\n    # A's work rate per day\n    A_rate = 1 / 15\n    # B's work rate per day\n    B_rate = 1 / 10\n    # Work done by A and B together in 4 days\n    work_done = 4 * (A_rate + B_rate)\n    # Remaining work to be done\n    remaining_work = 1 - work_done\n    # Days B will take to finish the remaining job alone\n    days_B = remaining_work / B_rate\n    return days_B\n\nans = solution()"
    ],
    "d60380a226c84add9f82f10ca29d840d": [
        "def solution():\n    remaining_plants_after_joel = 4\n    remaining_plants_before_joel = (remaining_plants_after_joel + 2) * 2\n    remaining_plants_after_valerie = remaining_plants_before_joel\n    remaining_plants_before_valerie = (remaining_plants_after_valerie + 3) * 2\n    remaining_plants_after_ethan = remaining_plants_before_valerie\n    initial_plants = (remaining_plants_after_ethan + 1) * 2\n    return initial_plants\n\nans = solution()"
    ],
    "9cf67e307d96451eae198324e79cdb76": [
        "def solution():\n    train_length = 128  # the length of the train in meters\n    tunnel_length = 544  # the length of the tunnel in meters\n    train_speed = 52  # the speed of the train in meters per second\n\n    # Calculate the total distance the train needs to travel to completely clear the tunnel\n    total_distance = train_length + tunnel_length\n\n    # Calculate the time it takes for the train to pass completely through the tunnel\n    time = total_distance / train_speed\n\n    return time\n\nans = solution()"
    ],
    "4043641cbe8e48579335b4edc83806ab": [
        "def solution():\n    ans = 33 + 29 + 34 + 28 + 27 + 30\n    return ans\n\nans = solution()"
    ],
    "8d86bdb1a0a24c279d87fda22507fcf9": [
        "def solution():\n    final_price = 21\n    increase_percentage = 0.40\n    original_price = final_price / (1 + increase_percentage)\n    return original_price\n\nans = solution()"
    ],
    "67336d9158cc4e12887f9dc78bf7e50d": [
        "def solution():\n    # Let the original number of eggs in the basket be x\n    # After the first sale, the number of eggs left is x - (x/2 + 16)\n    # After the second sale, the number of eggs left is (x/2 + 16)/2 - 7\n    # We are given that after the two sales, there are 18 eggs left\n    # Setting up the equation:\n    # (x/2 + 16)/2 - 7 = 18\n    # Solving for x:\n\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq((x/2 + 16)/2 - 7, 18)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "634f64a64d30499f9f880472d43a7055": [
        "def solution():\n    # Let x be the number of P1 students and y be the number of P6 students.\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    \n    equation1 = Eq(x + y, 120) # The total number of students is 120\n    equation2 = Eq(2*y + 1/2*x, 180) # The total number of buckets is 180, P6 carries 2 each, 2 P1 carry 1 together\n    \n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "cb8c28b4153d467c8903c0e71a0a22d4": [
        "def solution():\n    outcomes_per_coin = 2  # Head or Tail\n    total_tosses = 2       # total number of coin tosses\n    total_outcomes = outcomes_per_coin ** total_tosses\n    return total_outcomes\n\nans = solution()"
    ],
    "1234c16c22404bc6a76790494da1a78e": [
        "def solution():\n    num_teams = 5\n    num_matches = num_teams * (num_teams - 1) // 2\n    return num_matches\n\nans = solution()"
    ],
    "53f82e136dfc4d0697c253feec246f5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    basketball, volleyball = symbols('basketball volleyball')\n\n    equation1 = Eq(2 * basketball + 3 * volleyball, 195)\n    equation2 = Eq(4 * basketball + 5 * volleyball, 355)\n\n    solutions = solve((equation1, equation2), (basketball, volleyball))\n\n    return solutions[volleyball]\n\nans = solution()"
    ],
    "692b53f35cbd484ba885d86fdf51f30f": [
        "def solution():\n    ans = 273 // 7\n    return ans\n\nans = solution()"
    ],
    "726917a5243142e79bae60dd034dcbc5": [
        "from math import gcd\n\ndef solution():\n    pencils = 55\n    pens = 143\n    ans = gcd(pencils, pens)\n    return ans\n\nans = solution()"
    ],
    "4ba6c7d9ff624ec59381cbce9385be36": [
        "def solution():\n    # Owen trades 3 fish for 1 rabbit: ratio is 3 fish : 1 rabbit\n    fish_to_rabbit_ratio = 3 / 1\n    \n    # Oscar trades 2 rabbits for 3 packs of wheat: ratio is 2 rabbits : 3 packs of wheat\n    rabbits_to_wheat_ratio = 2 / 3\n    \n    # To find the ratio of fish to wheat, multiply the two ratios\n    fish_to_wheat_ratio = fish_to_rabbit_ratio / rabbits_to_wheat_ratio\n    \n    # Calculate how many fish Owen should give Dennis for one pack of wheat\n    fish_per_pack_wheat = fish_to_wheat_ratio * 3\n    \n    return fish_per_pack_wheat\n\nans = solution()"
    ],
    "363d10eef0ea4189a47ee75921956b9a": [
        "def solution():\n    # Johnny's method seems to mistake the multiplication with the divisor instead of the quotient\n    # let's calculate the correct result\n    quotient = 9\n    remainder = 2\n    divisor = 4\n    \n    # The correct method to find the dividend: dividend = quotient * divisor + remainder\n    dividend = quotient * divisor + remainder\n    \n    # Check Johnny's method\n    johnny_dividend = (quotient * remainder) + divisor\n    \n    # If correct return dividend else return the corrected dividend\n    return dividend if johnny_dividend == dividend else dividend\n\nans = solution()"
    ],
    "5da1575e00d448078124140f108f6b1b": [
        "def solution():\n    from sympy import Symbol, Eq, solve, sqrt\n\n    # PA is what we want to find\n    PA = Symbol('PA', real=True, positive=True)\n    \n    # Since P lies within or on the cube, the distances PB, PC, and PD are diagonals of the faces of the cube.\n    # If 'a' is the side of the cube, PB², PC², and PD² are all equal to 2a².\n    # We set up equations:\n    # PB: PA² + a² = (60 * sqrt(10))²\n    # PC: PA² + a² = (60 * sqrt(5))²\n    # PD: PA² + a² = (120 * sqrt(2))²\n    # PG: PA² + 3a² = (36 * sqrt(7))²\n\n    # Now we use the fact that PB, PC PD are face diagonals and PG is the space diagonal.\n    # We can set up equations for each:\n\n    equation_PB = Eq(PA**2 + a**2, (60 * sqrt(10))**2)\n    equation_PC = Eq(PA**2 + a**2, (60 * sqrt(5))**2)\n    equation_PD = Eq(PA**2 + a**2, (120 * sqrt(2))**2)\n    equation_PG = Eq(PA**2 + 3*a**2, (36 * sqrt(7))**2)\n    \n    # We'll solve these equations to find 'a' and then use 'a' to find PA\n\n    # Subtract equation_PC from equation_PB and equation_PC from equation_PD\n    equation_PB_PC = Eq((60 * sqrt(10))**2 - (60 * sqrt(5))**2, a**2)\n    equation_PD_PC = Eq((120 * sqrt(2))**2 - (60 * sqrt(5))**2, a**2)\n    \n    # We solve these equations to find a²\n    a_squared_PB_PC = solve(equation_PB_PC, a**2)[0]\n    a_squared_PD_PC = solve(equation_PD_PC, a**2)[0]\n    \n    # Since they both represent a², we can set them equal to find 'a'\n    a = sqrt(solve(Eq(a_squared_PB_PC, a_squared_PD_PC))[0])\n    \n    # Plug in the value of 'a' to find PA using equation_PB or equation_PC or equation_PD\n    PA_value = solve(equation_PB.subs(a**2, a_squared_PB_PC), PA)[0]\n    \n    return PA_value\n\nans = solution()"
    ],
    "55734b338e6d4ee0aa4775fc46af08dd": [
        "def solution():\n    apples_per_box = 14 / 4\n    boxes_needed = 66.5 / apples_per_box\n    return round(boxes_needed)\n\nans = solution()"
    ],
    "e6f7522a2ae041debd897088b6275751": [
        "def solution():\n    # Calculate the difference in age between Eddie and Mike\n    age_difference = 48 - 8\n    \n    # When Eddie is 18, add the age difference to his age to get Mike's age\n    mike_age_when_eddie_18 = 18 + age_difference\n    \n    return mike_age_when_eddie_18\n\nans = solution()"
    ],
    "95169f59fb1e45c8aaf5a970e8290d37": [
        "def solution():\n    ways = []\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            if die1 + die2 == 8:\n                ways.append((die1, die2))\n    ans = len(ways)\n    return ans\n\nans = solution()"
    ],
    "67e5f1006ba14b7ba20f1a63cf93e70c": [
        "def solution():\n    from sympy import isprime\n\n    digits = ['2', '7', '9']\n    primes = set()\n\n    # Create numbers by selecting three digits (with replacement)\n    for d1 in digits:\n        for d2 in digits:\n            for d3 in digits:\n                num_str = d1 + d2 + d3  # Combine digits to create number string\n                num = int(num_str)  # Convert to integer\n\n                # Check if the number is prime and less than 100\n                if isprime(num) and num < 100:\n                    primes.add(num)  # Add the prime number to the set to avoid duplicates\n\n    return len(primes)\n\nans = solution()"
    ],
    "83d292a05ff04677a8c5ed5ab8c0c835": [
        "def solution():\n    numerator = (3 + 1/3) * 1.9 + 19.5 / (4 + 1/2)\n    denominator = (62/75) - 0.16\n    division_numerator = 3.5 + (4 + 2/3) + (2 + 2/15)\n    division_denominator = 0.5 * (1 + 1/20 + 4.1)\n    \n    ans = (numerator / denominator) / (division_numerator / division_denominator)\n\n    return ans\n\nans = solution()"
    ],
    "c24f600dece04c93bb09e2b54f50d1af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    necklace, bracelet, ring = symbols('necklace bracelet ring')\n\n    equation1 = Eq(necklace, 2 * bracelet)\n    equation2 = Eq(ring, bracelet - 10)\n    equation3 = Eq(necklace + bracelet + ring, 350)\n\n    solutions = solve((equation1, equation2, equation3), (necklace, bracelet, ring))\n\n    return solutions[bracelet]\n\nans = solution()"
    ],
    "2770667d43574021b710d6ea74fb5929": [
        "def solution():\n    # Iterate over all possible four-digit numbers\n    for N in range(1000, 10000):\n        str_N = str(N)\n        # 2021 is not divisible by 9 but differences in numbers\n        # made by removing one digit must be divisible by 9\n        if N % 9 != 0:\n            continue\n        # Check the difference for each possible M created by removing one digit\n        for i in range(4):\n            M = int(str_N[:i] + str_N[i+1:])\n            if N - M == 2021:\n                return N\n\nans = solution()"
    ],
    "e6b0f44cc53249e1aaf86a515c4628c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, pear = symbols('banana pear')\n\n    equation1 = Eq(1 * banana + 2 * pear, 94)\n    equation2 = Eq(1 * banana + 1 * pear, 62)\n\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "7cef41fa4f8244ccbd2620d682e9d2d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the total number of students initially in the canteen as \"total_students\"\n    # We know 40% of the total_students are boys initially.\n    # Let \"boys_initial\" be the initial number of boys\n    # Let \"girls_initial\" be the initial number of girls\n\n    # boys_initial = 0.4 * total_students\n    # After 16 boys leave, the number of boys becomes (boys_initial - 16)\n    # After 16 girls enter, the number of girls becomes (girls_initial + 16)\n    # According to the second condition, the ratio becomes then 2/15:\n    # (boys_initial - 16) / (total_students) = 2/15\n    \n    # Additionally, the total number of students after the exchange is still total_students:\n    # (boys_initial - 16) + (girls_initial + 16) = total_students\n    \n    # Let's set up the symbols\n    boys_initial, girls_initial, total_students = symbols('boys_initial girls_initial total_students')\n    \n    # Initial condition equations\n    equation1 = Eq(boys_initial, 0.4 * total_students)\n    # Number of boys after 16 leave\n    equation2 = Eq((boys_initial - 16) / total_students, 2/15)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys_initial, total_students))\n    \n    # From solutions, calculate initial number of girls and the girls after 16 entered\n    girls_now = solutions[girls_initial] + 16\n    \n    return girls_now\n\nans = solution()"
    ],
    "df34fda134ee46a8ac94860f5ae12f9f": [
        "def solution():\n    # A's work rate in jobs per day\n    a_rate = 1 / 15\n    # B's work rate in jobs per day\n    b_rate = 1 / 10\n    # Combined work rate of A and B in jobs per day\n    combined_rate = a_rate + b_rate\n    \n    # Work done by A and B together in 4 days\n    work_done_4_days = combined_rate * 4\n    # Remaining work after 4 days\n    remaining_work = 1 - work_done_4_days\n    \n    # Days B needs to finish the remaining work alone\n    days_b = remaining_work / b_rate\n    \n    return days_b\n\nans = solution()"
    ],
    "2fdb4d6852a34749900c0604b0418b95": [
        "def solution():\n    ans = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.65) - (1 + 0.23 + 0.34 + 0.65) * (0.23 + 0.34)\n    return ans\n\nans = solution()"
    ],
    "4265848eb5144e06beaccae813bc11b5": [
        "def solution():\n    number_of_tickets = 16\n    cost_per_ticket = 112\n    total_cost = number_of_tickets * cost_per_ticket\n    return total_cost\n\nans = solution()"
    ],
    "1b84c5b40beb49b39b7f4106f6ee146a": [
        "def solution():\n    road_length = 150\n    tree_distance = 10\n\n    num_trees = (road_length // tree_distance) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "a36a520966aa451d95a300b07e198fe4": [
        "def solution():\n    linda_rate = 1 / 5  # Linda can do 1 math problem every 5 minutes\n    cici_rate = 1 / 6   # Cici can do 1 math problem every 6 minutes\n    combined_rate = linda_rate + cici_rate  # The rate at which they can do math problems together\n\n    total_time = 2 * 60  # Total time in minutes (2 hours)\n\n    total_problems = combined_rate * total_time\n    return int(total_problems)\n\nans = solution()"
    ],
    "073d74f386764ceba3da553d97018f98": [
        "def solution():\n    amy_apples = 37\n    john_apples = 15\n    target_difference = 4\n\n    # Let x be the number of apples Amy gives to John\n    # After giving x apples, Amy would have 37 - x apples\n    # John would have 15 + x apples\n    # We want to find x such that (37 - x) - (15 + x) == 4\n\n    x = (amy_apples - john_apples - target_difference) // 2\n\n    return x\n\nans = solution()"
    ],
    "e55659b67fec48ffadc5d661886b3f84": [
        "def solution():\n    from sympy import symbols, sqrt, solve\n\n    a = symbols('a', real=True, positive=True)\n    x = symbols('x')\n\n    # Equation given in the problem statement\n    equation = sqrt(x) - (sqrt(a) - 2/sqrt(a))\n\n    # Solve the equation for x\n    x_value = solve(equation, x)[0]\n\n    # Find the expression for sqrt(x^2 + 8x) using the solved value of x\n    expression = sqrt(x_value**2 + 8 * x_value)\n\n    # Simplify the expression and get it in terms of 'a'\n    simplified_expression = expression.simplify()\n\n    return simplified_expression\n\nans = solution()"
    ],
    "3997afa5717b4b90979f5a94f367106a": [
        "def solution():\n    from math import gcd\n    return gcd(16, 28)\n\nans = solution()"
    ],
    "c1d55208f4314facb8dcb7a0c1f51107": [
        "def solution():\n    alice_stickers = 245\n    janet_stickers = alice_stickers + 125\n    total_stickers = alice_stickers + janet_stickers\n\n    return total_stickers\n\nans = solution()"
    ],
    "a17b0ae95a20483eb0160f780a8e055e": [
        "def solution():\n    odd_number = 0\n    for num in range(14, 17):\n        if num % 2 != 0:\n            odd_number = num\n    return odd_number\n\nans = solution()"
    ],
    "6325f3cd4acc410e9a72d43acf9b5e4a": [
        "def solution():\n    for number in range(300, 401):\n        if all([\n                number % 3 == 2, \n                number % 4 == 2,\n                number % 5 == 2,\n                number % 7 == 5\n            ]):\n            return number\n\nans = solution()"
    ],
    "4de96797dadc44f48c4b27b71845270c": [
        "def solution():\n    ans = 273 // 7\n    return ans\n\nans = solution()"
    ],
    "75af17ec850b4308b6ad72a935dd048e": [
        "def solution():\n    numbers = [12, 25, 27, 6, 16, 14, 13, 7, 21]\n    total_sum = 37 * 10\n    missing_number = total_sum - sum(numbers)\n    \n    return missing_number\n\nans = solution()"
    ],
    "8a7b6a6417544e3db14b40a2435e0338": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y, z = symbols('x y z')\n    \n    equation1 = Eq(x, y + 83)\n    equation2 = Eq(z, x + 24)\n    equation3 = Eq(x + y + z, 283)\n\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "3c6d41e0ffa34ee694abb711aabe5956": [
        "def solution():\n    cost_per_person = 216\n    number_of_people = 67\n    total_cost = cost_per_person * number_of_people\n    return total_cost\n\nans = solution()"
    ],
    "d7b4feae676a418c84a780e950e5d4ea": [
        "def solution():\n    total_cost_for_nine_books = 38.79\n    cost_per_book = total_cost_for_nine_books / 9\n    total_cost_for_seven_books = cost_per_book * 7\n    return total_cost_for_seven_books\n\nans = solution()"
    ],
    "24686bdbc8614ff88d9dba695c5c1775": [
        "def solution():\n    tens = 10\n    tenths = 35 / 10\n    hundredths = 8 / 100\n\n    total = tens + tenths + hundredths\n    return total\n\nans = solution()"
    ],
    "5b5d9ce674b5461e84d5e7eef6e47575": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chan, toh = symbols('chan toh')\n    \n    equation1 = Eq((1/4) * chan, (1/3) * toh + 33)\n    equation2 = Eq(chan + toh, 1000)\n\n    solutions = solve((equation1, equation2), (chan, toh))\n\n    return solutions[toh]\n\nans = solution()"
    ],
    "d36c559112ec475d90ba54b5fb925432": [
        "def solution():\n    height_climbed = 0\n    day = 0\n\n    while height_climbed < 45:\n        day += 1\n        height_climbed += 10  # Climb during the day\n        if height_climbed >= 45:\n            break  # The snail has reached the top\n        height_climbed -= day  # Slide down at night\n\n    return day\n\nans = solution()"
    ],
    "0961229b4dfe45bdaf586d80da5a6a93": [
        "def solution():\n    # Assuming x be the total amount of grass in the pasture\n    # x / (14 * 15) = grass consumed by 1 goat per day\n    # x / (70 * 8) = grass consumed by 1 rabbit per day\n\n    # According to the problem, 1 goat eats as much as 4 rabbits\n    # therefore, grass consumed by 1 goat per day = grass consumed by 4 rabbits per day\n    # So, we can equate the two expressions:\n    # x / (14 * 15) = 4 * (x / (70 * 8))\n\n    # Grass consumed by 17 goats and 20 rabbits per day:\n    # (17 * x) / (14 * 15) + (20 * x) / (70 * 8)\n\n    # Total days (d) the pasture can feed 17 goats and 20 rabbits:\n    # x / ((17 * x) / (14 * 15) + (20 * x) / (70 * 8)) = d\n\n    # Simplify the expression, x gets canceled out:\n    # 1 / (17 / (14 * 15) + 20 / (70 * 8)) = d\n    # We calculate d which is the number of days\n\n    d = 1 / (17 / (14 * 15) + 20 / (70 * 8))\n    return d\n\nans = solution()"
    ],
    "605b7166959c4309ba377c841f125c8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(5*x + 3*(19 - x), 65)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "274626bb25f24193b540a837c430a2c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of erasers each person has\n    tasha, sandra, riley = symbols('tasha sandra riley')\n    \n    # Create equations based on the problem statement\n    equation1 = Eq(sandra, tasha / 3)\n    equation2 = Eq(riley, 3 * sandra / 5)\n    equation3 = Eq(tasha - riley, 60)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (tasha, sandra, riley))\n    \n    # Return the value for Riley's erasers\n    return solutions[riley]\n\nans = solution()"
    ],
    "0bed7f7889ec46ae8c8a1d9b3ffad093": [
        "def solution():\n    base = 4\n    repeats = 3\n    ans = sum(int(str(base) * i) for i in range(1, repeats + 1))\n    return ans\n\nans = solution()"
    ],
    "6e66da49abf64b81a126cd036c206db2": [
        "def solution():\n    jan_savings = 13\n    feb_savings = 18\n    mar_savings = 5\n    \n    mean_savings = (jan_savings + feb_savings + mar_savings) / 3\n    \n    return mean_savings\n\nans = solution()"
    ],
    "af0e6eebf4764c91a8984e3324ae0c84": [
        "def solution():\n    return (9**2) - 7\n\nans = solution()"
    ],
    "857ab67cbb1247aea950633a74d6701b": [
        "def solution():\n    count = 0\n    for x in range(1, 6):  # Since we need at least two numbers, we start from 1 to 5\n        count += (6 - x) - 1  # Subtract 1 to ensure that we aren't repeating the same number\n    return count\n\nans = solution()"
    ],
    "3df1ffb0a3aa4d07b3bd3acc1b128b78": [
        "def solution():\n    # 0.0̅1 is equal to 1/99\n    # 0.1̅2 is equal to 12/99\n    # 0.2̅3 is 23/99, and so on...\n    # We calculate each term as n(n+1)/99 for n = 0 to 5, and a special case for 0.7̅8 which is 78/99\n    terms = [n * (n + 1) / 99 for n in range(6)]\n    terms.append(78 / 99)  # Special case for the last term\n    \n    # Sum all terms\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "708686c18792498ca280531b38305bd6": [
        "def solution():\n    from sympy import symbols, sqrt, simplify\n\n    # Define the symbol\n    a = symbols('a', real=True, positive=True)\n\n    # Given equation\n    x = sqrt(a) - 2/sqrt(a)\n\n    # Simplify the expression for x^2\n    x_squared = simplify(x**2)\n\n    # Calculate the expression under the square root x^2 + 8x\n    expression = x_squared + 8 * x\n\n    # Simplify the expression to get it in terms of 'a'\n    simplified_expression = simplify(expression)\n    \n    # Calculate the square root of the simplified expression\n    final_answer = sqrt(simplified_expression)\n\n    return final_answer\n\nans = solution()"
    ],
    "aa65bb86d41443cba1628a0551144ba9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables for the number of pies Mrs Tan and Mrs Lim originally had\n    tan_pies, lim_pies = symbols('tan_pies lim_pies')\n    \n    # Create an equation based on the given information\n    # After transactions: Tan has tan_pies + 12, Lim has lim_pies - 4\n    # Tan has twice as many pies as Lim after transactions\n    equation1 = Eq(tan_pies + 12, 2 * (lim_pies - 4))\n    \n    # Mrs Tan and Mrs Lim had an equal number of pies at first\n    equation2 = Eq(tan_pies, lim_pies)\n    \n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (tan_pies, lim_pies))\n    \n    return solutions[tan_pies]\n\nans = solution()"
    ],
    "40eb290a88af4052901031e1476213be": [
        "def solution():\n    count = 0\n    \n    # Loop through all unique combinations of 3 years\n    for i in range(2017, 2036):\n        for j in range(i+1, 2036):\n            for k in range(j+1, 2036):\n                if (i + j + k) % 4 == 0:\n                    count += 1\n    \n    return count\n\nans = solution()"
    ],
    "0f13e96f9aaa4d28997b667b9c11593b": [
        "def solution():\n    total_sheep = 23\n    total_pens = 11\n    min_sheep_most_pen = (total_sheep + total_pens - 1) // total_pens\n\n    return min_sheep_most_pen\n\nans = solution()"
    ],
    "a30b46882b6149eb828e015d814c6a7b": [
        "def solution():\n    for num in range(300, 401):\n        if num % 3 == 2 and num % 4 == 2 and num % 5 == 2 and num % 7 == 5:\n            return num\n\nans = solution()"
    ],
    "b1ec96325b0e48bbb89d9c37f1f20bfa": [
        "from datetime import datetime\n\ndef solution():\n    # Parsing the start and end times\n    start_time = datetime.strptime('6:35 AM', '%I:%M %p')\n    end_time = datetime.strptime('10:22 AM', '%I:%M %p')\n\n    # Calculating the duration\n    duration = end_time - start_time\n    \n    # Converting duration to minutes\n    duration_in_minutes = duration.seconds // 60\n\n    return duration_in_minutes\n\nans = solution()"
    ],
    "a8a21f84ab5f44019c3f7690709b84e5": [
        "def solution():\n    for num in range(200, 301):\n        if num % 6 == 1 and num % 13 == 8:\n            return num\n            \nans = solution()"
    ],
    "ca038012d8394203b0afe2e0b7b9c6ab": [
        "def solution():\n    from math import lcm\n    days_raye = 6\n    days_simon = 12\n    days_taylor = 16\n    \n    least_days = lcm(days_raye, days_simon, days_taylor)\n    \n    return least_days\n\nans = solution()"
    ],
    "e4135525c98945d49a3e9731dcae7f35": [
        "def solution():\n    # To be sure that Sara gets 5 balls of the same colour,\n    # she must take out balls in the worst-case scenario.\n    # Worst-case scenario: she takes out all balls of the other two colours.\n    # After that, any ball she takes out will be the 5th ball of the same colour.\n    \n    # Number of green, yellow, and red balls\n    green = 7\n    yellow = 5\n    red = 2\n    \n    # Balls to take out: all yellow and all red + 1 more ball to be the 5th ball of the same colour (green in this case)\n    balls_to_take = yellow + red + 1\n    \n    return balls_to_take\n\nans = solution()"
    ],
    "1158d90d7f994c008185739c0f7b4c3e": [
        "def solution():\n    angel = '0141705021'\n    devil = '4005220912'\n    \n    sorted_angel = ''.join(sorted(angel))\n    sorted_devil = ''.join(sorted(devil))\n    \n    if sorted_angel == sorted_devil:\n        return True  # Andy can unlock the chest because the passwords contain the same characters.\n    else:\n        return False, sorted_devil  # Provide the correct sorted \"Devil\" password if they don't match.\n\nans, correct_password = solution()"
    ],
    "727dbcf473414fbc9939bfee97cb4aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the mass of a chair and y be the mass of a table\n    x, y = symbols('x y')\n    # The total mass of 3 tables is equal to the total mass of 4 chairs\n    equation1 = Eq(3 * y, 4 * x)\n    # A table is 2kg heavier than a chair\n    equation2 = Eq(y, x + 2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Return the mass of a table\n    return solutions[y]\n\nans = solution()"
    ],
    "9da771602ee246a181dd1962904ef124": [
        "def solution():\n    common_difference = 28 - 25  # The difference between consecutive terms\n    nth_term = 10  # The term number of the last number shown\n    last_number = 31  # The last number shown (10th term)\n\n    # Using the formula for the nth term of an arithmetic sequence:\n    # nth_term = first_term + (n - 1) * common_difference\n    # first_term = nth_term - (n - 1) * common_difference\n    first_term = last_number - (nth_term - 1) * common_difference\n    \n    return first_term\n\nans = solution()"
    ],
    "31eaf65804d54a3b8c6e51af4e58623c": [
        "def solution():\n    # Define the new operation sign *\n    def new_operation(a, b):\n        # Taking the tens digit of a and b and multiplying them\n        tens_a = a // 10\n        tens_b = b // 10\n        # Taking the ones digit of a and b and multiplying them\n        ones_a = a % 10\n        ones_b = b % 10\n        # Performing the operation as per the new rule\n        return (tens_a * ones_a) + (tens_b * ones_b)\n    \n    # Calculate the result of 89*75 using the new operation sign *\n    result = new_operation(89, 75)\n    return result\n\nans = solution()"
    ],
    "3f49f548bea24803a2293b65735a1967": [
        "def solution():\n    return 5928 * 13\n\nans = solution()"
    ],
    "94e0c1d7e2e64c55bf498ab0da425bf2": [
        "def solution():\n    temperatures = [-11, 17, 8, -3, -6]\n    hottest = max(temperatures)\n    coldest = min(temperatures)\n    difference = hottest - coldest\n    return difference\n\nans = solution()"
    ],
    "b70b59bf48324644a782454f2b7ea13d": [
        "def solution():\n    pool_length = 30\n    sam_speed = 1  # m/s\n    ben_speed = 0.6  # m/s\n    total_time = 10 * 60  # 10 minutes into seconds\n    \n    combined_speed = sam_speed + ben_speed  # m/s (since they swim towards each other)\n    distance_covered_in_one_meeting = pool_length  # they meet every time they cover the length of the pool together\n    \n    number_of_meetings = total_time / (distance_covered_in_one_meeting / combined_speed)\n    \n    return int(number_of_meetings)\n\nans = solution()"
    ],
    "4296e2f3a8b241e3a8477feb371d9f40": [
        "def solution():\n    bob_cindy_avg = 120\n    doris_height = 126\n    total_height = bob_cindy_avg * 2 + doris_height\n    avg_height = total_height / 3\n    return avg_height\n\nans = solution()"
    ],
    "b789c34055e44469a46db4918988572a": [
        "def solution():\n    katherine = 24\n    tom = 2 * katherine\n    gareth = 4 * tom\n    return gareth\n\nans = solution()"
    ],
    "e86bfb04d39a44d2a53da86f38d8841d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the number of pies each of them had at first\n    x = symbols('x')\n\n    # Create equations based on the problem statement\n    equation = Eq(x + 12, 2 * (x - 4))\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "24bf5eb8b2e54ae8a85ca04786fa6736": [
        "def solution():\n    return 9.97 + 9.98 + 9.99\n\nans = solution()"
    ],
    "0d85bf8110034401aca552b3cdbd023f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be Destin's current age and n be the nephew's current age\n    d, n = symbols('d n')\n\n    # Destin will be twice his nephew's age in 6 years\n    equation1 = Eq(d + 6, 2 * (n + 6))\n\n    # 6 years ago, the ratio of Destin's age to his nephew's age was 5:1\n    equation2 = Eq((d - 6) / (n - 6), 5)\n\n    # Solving the simultaneous equations\n    solutions = solve((equation1, equation2), (d, n))\n\n    # Calculating the sum of their ages in 10 years' time\n    destin_age_in_10_years = solutions[d] + 10\n    nephew_age_in_10_years = solutions[n] + 10\n    sum_of_ages_in_10_years = destin_age_in_10_years + nephew_age_in_10_years\n\n    return sum_of_ages_in_10_years\n\nans = solution()"
    ],
    "4052d15f214249809613fa6de2242cc9": [
        "def solution():\n    total_pupils = 40\n    total_avg = 35\n    boys_avg = 20\n    girls_avg = 60\n    \n    # Let x be the number of boys\n    # total_avg = (boys_avg * x + girls_avg * (total_pupils - x)) / total_pupils\n    # Simplifying the equation to find x\n    # total_avg * total_pupils = boys_avg * x + girls_avg * (total_pupils - x)\n    # 35 * 40 = 20 * x + 60 * (40 - x)\n    # 1400 = 20x + 2400 - 60x\n    # 40x = 2400 - 1400\n    # x = (2400 - 1400) / 40\n    x = (girls_avg * total_pupils - total_avg * total_pupils) / (girls_avg - boys_avg)\n\n    return int(x)\n\nans = solution()"
    ],
    "3a046196146143df8c11a228fe1ea8e9": [
        "from itertools import permutations\n\ndef solution():\n    digits = '135'\n    all_permutations = list(permutations(digits))\n    \n    return len(all_permutations)\n\nans = solution()"
    ],
    "aa5a70d5b23d4d83a688ce6c80ff9fbb": [
        "def solution():\n    from datetime import datetime\n\n    departure_time = datetime.strptime('6:35am', '%I:%M%p')\n    arrival_time = datetime.strptime('10:22am', '%I:%M%p')\n\n    time_diff = arrival_time - departure_time\n    total_minutes = time_diff.total_seconds() / 60\n\n    return int(total_minutes)\n\nans = solution()"
    ],
    "c8c3777bba9244539cc9e012e79c700e": [
        "def solution():\n    pattern = '3456'\n    num_repetitions = 50 // len(pattern)  # complete pattern repetitions within 50 digits\n    remainder = 50 % len(pattern)  # remaining digits after the last complete pattern\n\n    # Sum of digits of the pattern\n    sum_of_pattern = sum(int(digit) for digit in pattern)\n    # Sum of digits in the incomplete pattern at the end\n    sum_of_remainder = sum(int(pattern[i]) for i in range(remainder))\n\n    # Total sum is the sum of complete patterns plus the sum of the remainder\n    total_sum = sum_of_pattern * num_repetitions + sum_of_remainder\n    \n    return total_sum\n\nans = solution()"
    ],
    "46a38674ac06447aab8309abe41f63ee": [
        "def solution():\n    ans = 3 / (3 / 5) / (5 / 7) / (7 / 9) / (9 / 13) / (13 / 15)\n    return ans\n\nans = solution()"
    ],
    "531ec5e5d7a54e7eb5aad13441f2d557": [
        "def solution():\n    ans = 3.88 - 1.111\n    return ans\n\nans = solution()"
    ],
    "02013d24983948fe8e37ccb917ba805e": [
        "def solution():\n    count = 0\n    # Since the perimeter is 12, we iterate over possible integer lengths\n    # for two equal sides (isosceles triangle)\n    for equal_side in range(1, 12//2):  # The range is until half of the perimeter\n        base = 12 - 2 * equal_side  # Calculate the base of the triangle\n        if base < equal_side:  # The base has to be less than the equal side\n            # to satisfy the triangle inequality theorem\n            count += 1  # If valid, increment the count\n    return count\n\nans = solution()"
    ],
    "66bbfb9d35fd4c258976e0e26f366bba": [
        "def solution():\n    total_sweets = 220\n    fraction_first_group = 3 / 5\n    sweets_first_group = 6\n\n    students_first_group = (fraction_first_group * total_sweets) / sweets_first_group\n    remaining_sweets = total_sweets - (students_first_group * sweets_first_group)\n\n    fraction_second_group = 1 / 4\n    sweets_second_group = 4\n\n    students_second_group = (fraction_second_group * remaining_sweets) / sweets_second_group\n    remaining_sweets = remaining_sweets - (students_second_group * sweets_second_group)\n\n    sweets_third_group = 5\n    students_third_group = remaining_sweets / sweets_third_group\n\n    total_students = students_first_group + students_second_group + students_third_group\n\n    return int(total_students)\n\nans = solution()"
    ],
    "2d58f4f006e243febdaf5acbd7d6781f": [
        "def solution():\n    from sympy import factorint\n\n    cards = [6, 12, 35, 175, 245, 300]\n    products = []\n\n    # Calculate products of every combination of 2 cards for Candy.\n    for i in range(len(cards)):\n        for j in range(i + 1, len(cards)):\n            products.append(cards[i] * cards[j])\n\n    # Calculate products of every combination of 3 cards for Candice.\n    for i in range(len(cards)):\n        for j in range(i + 1, len(cards)):\n            for k in range(j + 1, len(cards)):\n                product = cards[i] * cards[j] * cards[k]\n                if product in products:\n                    # Find which card is not in the current combination\n                    remaining = [x for x in cards if x not in (cards[i], cards[j], cards[k])]\n                    return remaining[0]\n\nans = solution()"
    ],
    "7a453395152a41388d5f4386067df058": [
        "def solution():\n    ans = (3/10) * 54 + 0.3 * 45 + (30 / 100)\n    return ans\n\nans = solution()"
    ],
    "b3fa535df8954c9aac674b856db4f258": [
        "def solution():\n    halfway_number = (17 + 35) / 2\n    return halfway_number\n\nans = solution()"
    ],
    "6349c95e066c4ac9a6e978154b7e5cc5": [
        "def solution():\n    # Convert mixed numbers into improper fractions\n    first_number = 3 + 1/4\n    second_number = 1 + 3/4\n\n    # Calculate the difference\n    difference = first_number - second_number\n\n    return difference\n\nans = solution()"
    ],
    "b7d81cc61e59452e8e10e55be3614c12": [
        "def solution():\n    from math import lcm\n\n    # LCM of the packet sizes will give us the days it will take to start a new packet for both\n    days = lcm(25, 20)\n    \n    # Starting from 1st March, we need to find the next date to start both packets\n    # Since February is the only unusual month having 28 or 29 days, we can state that:\n    # - March has 31 days\n    # - April has 30 days\n    # - May has 31 days (past this is not required as 25 * 20 lcm is less than 93 days)\n    \n    days_in_march = 31\n    days_in_april = 30\n    # days_in_may = 31 (not required)\n\n    total_days_until_end_of_april = days_in_march + days_in_april  # 31 + 30\n\n    if days <= days_in_march:  # If the next starting day is in March\n        month = \"March\"\n        date = days\n    elif days <= total_days_until_end_of_april:  # If the next starting day is in April\n        month = \"April\"\n        date = days - days_in_march\n    else:  # If the next starting day is in May\n        month = \"May\"\n        date = days - total_days_until_end_of_april\n    \n    return f\"{date} {month}\"\n\nans = solution()"
    ],
    "6f2e36dcb2704f26b44a0dbfa435da24": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    \n    # Each boy received $8, each girl received $5\n    # There are thrice as many boys as girls\n    equation1 = Eq(8 * boys + 5 * girls, 580)\n    equation2 = Eq(boys, 3 * girls)\n    \n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    return solutions[boys]\n\nans = solution()"
    ],
    "0d471b7547134c0f9e37864e9573cf56": [
        "def solution():\n    # Starting from the largest odd number, and going down to find the odd number\n    # that can't be expressed as a sum of three different composite numbers\n    for n in range(999, 0, -2): # Assuming 999 is the upper bound since it's unspecified.\n        found = False\n        for a in range(n-2, 3, -2): # Composite numbers are even except for 2, and we exclude 2 because it's prime\n            if not all(a % i for i in range(2, int(a**0.5) + 1)):  # Check if 'a' is composite\n                for b in range(a-2, 3, -2): # Start from next even (composite) number\n                    if not all(b % i for i in range(2, int(b**0.5) + 1)):  # Check if 'b' is composite\n                        c = n - a - b # The third number\n                        if c > 0 and c != a and c != b and not all(c % i for i in range(2, int(c**0.5) + 1)): # Check if 'c' is composite and different\n                            found = True\n                            break\n            if found:\n                break\n        if not found:\n            return n\n\nans = solution()"
    ],
    "8345ff1d37344640b2384652635b2dd7": [
        "def solution():\n    bill = 45\n    tip_percentage = 0.15\n    tax_percentage = 0.08\n\n    tip_amount = bill * tip_percentage\n    tax_amount = bill * tax_percentage\n    total_cost = bill + tip_amount + tax_amount\n\n    return total_cost\n\nans = solution()"
    ],
    "3d8d87b5a55b42d89c08579dd89354fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    t, f = symbols('t f')\n    total_notes = Eq(t + f, 116)\n    spent_t = 0.60 * t\n    spent_f = 0.25 * f\n    remaining_t = t - spent_t\n    remaining_f = f - spent_f\n    \n    remaining_ratio = Eq(remaining_t, (4/7) * remaining_f)\n\n    solutions = solve((total_notes, remaining_ratio), (t, f))\n\n    t_notes = solutions[t]\n    f_notes = solutions[f]\n\n    cost_of_bag = spent_t.subs(t, t_notes) * 10 + spent_f.subs(f, f_notes) * 5\n\n    return cost_of_bag\n\nans = solution()"
    ],
    "13f3cf43be684a8c8f1075a13f8131ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    elder, younger = symbols('elder younger')\n\n    # Current age equations\n    age_sum = Eq(elder + younger, 42)\n\n    # A few years ago equations\n    years_ago = elder - younger\n    half_age = Eq(younger, elder / 2 - years_ago)\n\n    # Solving the system of equations\n    solutions = solve((age_sum, half_age), (elder, younger))\n\n    return solutions[elder]\n\nans = solution()"
    ],
    "f3c61e8fd40d43f0a6b6887470b4299d": [
        "def solution():\n    count = 0\n    for side in range(1, 6):  # The largest side cannot exceed half the perimeter\n        for base in range(1, 12 - 2 * side):  # base + 2*side should be equal to 12\n            if side + side + base == 12:  # Check if it sums up to the perimeter\n                count += 1\n    return count\n\nans = solution()"
    ],
    "79ebfd585db2407482e7cf14b77e035d": [
        "def solution():\n    ans = 104 // 4\n    return ans\n\nans = solution()"
    ],
    "014509f53414409198e8302211988bc5": [
        "def solution():\n    strawberries_initial = 86\n    strawberries_given_away = 29\n    strawberries_final = 100\n\n    strawberries_received = strawberries_final - (strawberries_initial - strawberries_given_away)\n\n    return strawberries_received\n\nans = solution()"
    ],
    "63f544191af94265b786a75669858d3b": [
        "def solution():\n    from math import gcd\n\n    students_A = 8\n    students_B = 12\n    students_C = 20\n    \n    gcd_AB = gcd(students_A, students_B)\n    gcd_ABC = gcd(gcd_AB, students_C)\n    \n    return gcd_ABC\n\nans = solution()"
    ],
    "566472f9b1624140a8d419487a79d50c": [
        "def solution():\n    total_students = 42\n    sports_team = 30\n    art_team = 25\n    \n    # Using Inclusion-Exclusion Principle\n    both_teams = sports_team + art_team - total_students\n\n    return both_teams\n\nans = solution()"
    ],
    "71d8dd44935a4d74ab3f2f038bd63e9b": [
        "def solution():\n    total_weight = 960\n    weight_per_box = 8\n    num_boxes = total_weight // weight_per_box\n    return num_boxes\n\nans = solution()"
    ],
    "1972b3d726cb4c91b08b5636358089e8": [
        "def solution():\n    total_cost = 20\n    pencil_cost = 2\n    pencils_cost = 3 * pencil_cost\n    pens_cost = total_cost - pencils_cost\n    cost_per_pen = pens_cost / 2\n    return cost_per_pen\n\nans = solution()"
    ],
    "ac54c8b609c94030b92316d569da1836": [
        "def solution():\n    total_hay = 300\n    cattle = 5\n    days = 10\n\n    daily_hay_per_cattle = total_hay / (cattle * days)\n\n    return daily_hay_per_cattle\n\nans = solution()"
    ],
    "f7dc723fc9c0444bb72711cfa044db6f": [
        "def solution():\n    # Routes directly from A to D\n    direct_AD = 6\n    \n    # Routes from A to B to C to D\n    A_to_B_to_C_to_D = 7 * 5 * 2\n    \n    # Routes from A to B to D\n    A_to_B_to_D = 7 * 2\n    \n    # Routes from A to C to D\n    A_to_C_to_D = 4 * 2\n    \n    # Total number of ways from A to D\n    ans = direct_AD + A_to_B_to_C_to_D + A_to_B_to_D + A_to_C_to_D\n    \n    return ans\n\nans = solution()"
    ],
    "934c22a63d3149ffb43b1d24593d0c01": [
        "def solution():\n    # Let's assume the number of chocolate cupcakes is c and the number of cheese cupcakes is (255 - c)\n    # According to the problem, 60% of c is equal to 25% of (255 - c)\n    # 0.6 * c = 0.25 * (255 - c)\n    # Now we can solve for c to find the number of chocolate cupcakes\n    c = (0.25 * 255) / (0.6 + 0.25)\n\n    # The number of chocolate cupcakes left after selling is 60% of c\n    chocolate_left = 0.6 * c\n    return int(chocolate_left)\n\nans = solution()"
    ],
    "60783bc25b9749de9150f2006634255c": [
        "from sympy import divisors\n\ndef solution():\n    possible_ages = divisors(210)\n    for age1 in possible_ages:\n        for age2 in possible_ages:\n            for age3 in possible_ages:\n                if age1 < age2 < age3 and age1 * age2 * age3 == 210 and age1 < 10:\n                    return age1\nans = solution()"
    ],
    "9d5fcd691dcd4877acf240f16e7063cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(boys + girls, 39)\n    equation2 = Eq(1/4 * boys, 2/5 * girls)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys] - solutions[girls]\n\nans = solution()"
    ],
    "ef208d09ffee4f59ad9b66d3ea949934": [
        "def solution():\n    total_avocados = 960\n    per_box = 8\n\n    num_boxes = total_avocados // per_box\n\n    return num_boxes\n\nans = solution()"
    ],
    "3ac0f16eac8647b8b591701993aa5623": [
        "def solution():\n    total_seedlings = 296\n    frost_killed_fraction = 3 / 8\n    frost_killed_seedlings = total_seedlings * frost_killed_fraction\n    surviving_seedlings = total_seedlings - frost_killed_seedlings\n    \n    return int(surviving_seedlings)\n\nans = solution()"
    ],
    "fb1f2e79dcf341bf81ac3f2db4f131ec": [
        "def solution():\n    total_locusts = 100\n    daily_consumption = 12\n    full_days = total_locusts // daily_consumption\n    remaining_locusts = total_locusts - (full_days * daily_consumption)\n    \n    return remaining_locusts\n\nans = solution()"
    ],
    "34b006c5adeb493dbdbe598de9425edd": [
        "def solution():\n    # Calculate first part of the expression\n    first_part = 77.5 * (52 / 100)\n    # Calculate second part of the expression\n    second_part = 5.2 * 2.25\n    \n    # Add both parts\n    ans = first_part + second_part\n    return ans\n\nans = solution()"
    ],
    "70c9f09a81b741faab4149e0ce3c2e08": [
        "def solution():\n    first_term = 2\n    last_term = 240\n    difference = 2\n\n    num_terms = ((last_term - first_term) / difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "79b3d22b017c4dc5bc3455a8f8bca3ed": [
        "def solution():\n    ans = 12 * 92 + 22 * 82 + 32 * 72\n    return ans\n\nans = solution()"
    ],
    "f11cc314015c4356be0ae68d5c3ced7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    don, ben = symbols('don ben')\n    \n    # Initial ratio equation\n    eq1 = Eq(don / ben, 2 / 3)\n    \n    # Ratio after buying/losing stickers\n    eq2 = Eq((don + 10) / (ben - 5), 6 / 7)\n    \n    # Solve the system of equations\n    solution = solve((eq1, eq2), (don, ben))\n    \n    return solution[don]\n\nans = solution()"
    ],
    "e750a026daa342fc915455072a011aba": [
        "def solution():\n    total_girls = 25\n    percentage_wearing_glasses = 20\n    \n    num_girls_wearing_glasses = (percentage_wearing_glasses / 100) * total_girls\n    \n    return int(num_girls_wearing_glasses)\n\nans = solution()"
    ],
    "f8f2a1e9445b4dcda537fd994f74f84b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of $5 notes and $10 notes\n    notes_5, notes_10 = symbols('notes_5 notes_10')\n\n    # Define the equations based on the problem statement\n    equation1 = Eq(notes_5 + notes_10, 116)\n    # After spending, Jeremy has 60% of $10 notes and 25% of $5 notes left.\n    # Therefore, he spent 40% of $10 and 75% of $5 notes.\n    equation2 = Eq((notes_10 - 0.6 * notes_10) * 4/7, notes_5 - 0.25 * notes_5)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (notes_5, notes_10))\n\n    # Find the amounts spent based on the solutions\n    spent_5 = solutions[notes_5] * 0.25 * 5\n    spent_10 = solutions[notes_10] * 0.4 * 10\n\n    # The cost of the bag is the total money spent\n    cost = spent_5 + spent_10\n\n    return cost\n\nans = solution()"
    ],
    "8f82a9fa21664af9b7af5284e8c4493f": [
        "def solution():\n    ans = round(726 * 8, 1)\n    return ans\n\nans = solution()"
    ],
    "cb610f1994f441c5aa75e99c47dc7c49": [
        "def solution():\n    remainder = 4293 % 25\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = remainder\n\n    return ans\n\nans = solution()"
    ],
    "aca847f6240f4ca38811b767301a74f8": [
        "def solution():\n    amy_toys = 50\n    sally_toys = 26\n    \n    amy_give = (amy_toys - sally_toys) // 2\n    \n    return amy_give\n\nans = solution()"
    ],
    "4240bfa02e564792b745d971a51cf6aa": [
        "def solution():\n    baby_chickens = 3600\n    hens = (8/9) * baby_chickens\n    roosters = (1/16) * hens\n    return int(roosters)\n\nans = solution()"
    ],
    "f4a02eb509224062b7d4a7b00e982d44": [
        "def solution():\n    # Calculate the sum of the positive terms: 2 + 4 + 6 + ... + 2016\n    # This is an arithmetic sequence with a common difference of 2\n    first_positive = 2\n    last_positive = 2016\n    common_difference = 2\n\n    # Calculate the number of terms in positive sequence\n    num_positive_terms = ((last_positive - first_positive) // common_difference) + 1\n    # Calculate the sum of the positive terms using arithmetic series formula\n    sum_positive_terms = (num_positive_terms * (first_positive + last_positive)) // 2\n\n    # Calculate the sum of the negative terms: -3 - 5 - 7 - ... - 2015\n    # This is also an arithmetic sequence with a common difference of 2\n    first_negative = 3\n    last_negative = 2015\n\n    # Calculate the number of terms in negative sequence\n    num_negative_terms = ((last_negative - first_negative) // common_difference) + 1\n    # Calculate the sum of the negative terms using arithmetic series formula\n    sum_negative_terms = (num_negative_terms * (first_negative + last_negative)) // 2\n    \n    # Calculate the final result by subtracting the sum of the negative terms from the sum of the positive terms\n    ans = sum_positive_terms - sum_negative_terms\n\n    return ans\n\nans = solution()"
    ],
    "7716f1cb1ca14992ae86bd9c52735efd": [
        "def solution():\n    max_product = 0\n    for a in range(1, 29):\n        for b in range(1, 30-a):\n            c = 31 - a - b\n            max_product = max(max_product, a*b*c)\n    return max_product\n\nans = solution()"
    ],
    "45c579ce75cb41d3bab3bcda32699a25": [
        "def solution():\n    cecilia_money = 80\n    kenny_money = cecilia_money / 4\n    total_money = cecilia_money + kenny_money\n    return total_money\n\nans = solution()"
    ],
    "de5bc649b5e64036b73efabb4e608b1b": [
        "def solution():\n    heather = 12.15\n    zach = 3 * heather\n    serena = zach + 24.50\n    jason = serena / 5\n    william = jason - 1.54\n    \n    return william\n\nans = solution()"
    ],
    "c49e92d63d14477a969fe081cfe53304": [
        "from math import factorial\n\ndef solution():\n    # Total students excluding the triplets and twins (considering them as a single entity each)\n    total_students = 7 - 2 - 3 + 2  # 2 entities for the triplets and twins\n    \n    # Total arrangements for students without restriction\n    total_arrangements = factorial(total_students)\n    \n    # Arrangements for the triplet sisters among themselves, as they want to stay together\n    triplet_arrangements = factorial(3)\n    \n    # Arrangements for the twin brothers not taking permutations among themselves into account for now\n    twin_arrangements = total_arrangements * (total_students - 1)  # They cannot stand next to each other\n\n    # Calculate the twin brothers' permutations\n    twin_permutations = 2  # Since the twin brothers can swap their order\n    \n    # Total possible arrangements\n    ans = twin_arrangements * triplet_arrangements * twin_permutations\n    \n    return ans\n\nans = solution()"
    ],
    "e6664d91f4d5422a9967575f83a6dcba": [
        "def solution():\n    principal = 35000\n    final_amount = 37100\n    interest_rate = 1.5 / 100\n    time_claimed = 5\n\n    amount_after_claimed_time = principal * ((1 + interest_rate) ** time_claimed)\n\n    if amount_after_claimed_time == final_amount:\n        return True  # She is right\n    else:\n        # She is wrong, we need to find the actual number of years\n        from sympy import symbols, Eq, solve\n        t = symbols('t')\n        equation = Eq(principal * ((1 + interest_rate) ** t), final_amount)\n        actual_years = solve(equation, t)\n        return False, actual_years[0]  # She is wrong, return actual years\n\nans = solution()"
    ],
    "90f3a7cdbae348efb794b15c5519e1e1": [
        "def solution():\n    loafs_per_cups = 7 / 4\n    desired_loafs = 35\n    cups_needed = desired_loafs / loafs_per_cups\n    return cups_needed\n\nans = solution()"
    ],
    "305f09b3cd4e439eb8bd23de400c08f3": [
        "def solution():\n    # For an arithmetic series, the sum of the squares of the first n natural numbers is given by:\n    # S_n = n(n + 1)(2n + 1) / 6\n    # Given the sum of squares up to 20 is 2870, we can calculate the sum of products for the sequence of odd numbers.\n\n    # The given odd products can be generated by the formula (2n - 1)(2n + 1) = 4n^2 - 1\n    total_sum = 0\n    for n in range(1, 21):\n        total_sum += (2 * n - 1) * (2 * n + 1)  # which simplifies to 4n^2 - 1\n\n    # However, we want to subtract the sum of the squares we initially have to get just the -1 parts.\n    # Since we know the sum of the first 20 squares, we can simply subtract it from the total sum.\n    total_sum -= 2870  # Subtract sum of squares\n\n    ans = total_sum // 4  # Divide by 4 because (4n²-1) was multiplied by 4\n\n    return ans\n\nans = solution()"
    ],
    "7d02cb0ab8354e44968e796de4cb54d3": [
        "def solution():\n    for i in range(0, 100):\n        num_str = \"21\" + f\"{i:02d}\" + \"35\"  # Create the 6-digit number with the blanks filled by i\n        num = int(num_str)\n\n        # Check if the number is divisible by 99\n        if num % 99 == 0:\n            return num_str\n\nans = solution()"
    ],
    "7c8f1a20bc9749f7b59b0f1ad124a82f": [
        "def solution():\n    total_students = 320\n    days_in_week = 7\n\n    # Using the Pigeonhole Principle\n    min_students_in_most_populated_week = (total_students // days_in_week) + 1\n\n    return min_students_in_most_populated_week\n\nans = solution()"
    ],
    "b781fc8f3a7c4ac5b3c263cd0ed580ef": [
        "def solution():\n    ans = 3 / (1 - 1/2)\n    return ans\n\nans = solution()"
    ],
    "5d1664b6531d452198dbf2ebb51359c0": [
        "def solution():\n    total_girls = 25\n    percentage_wearing_glasses = 20 / 100\n    girls_wearing_glasses = total_girls * percentage_wearing_glasses\n    return int(girls_wearing_glasses)\n\nans = solution()"
    ],
    "955c179e463143d28ade540096508f5f": [
        "def solution():\n    lcm = 2 * 3 * 4 * 5 * 6 * 8 * 9  # computing the lcm directly will be slow/error-prone\n    i = 1\n    while True:\n        N = lcm * i + 5  # Find N that leaves a remainder of 5 when divided by 7\n        if N % 7 == 5:\n            return N\n        i += 1\n\nans = solution()"
    ],
    "f2b7d72bc0e0413388bba2a9429b9e63": [
        "def solution():\n    # Since 7 days make a week, a maximum of 55 // 7 = 7 full weeks can fit within the 55 days.\n    full_weeks = 55 // 7\n\n    # Each week has exactly one Friday\n    fridays_in_full_weeks = full_weeks\n\n    # After 7 full weeks, there are 55 - 7 * full_weeks days remaining\n    remaining_days = 55 - (7 * full_weeks)\n\n    # If the 55-day period starts on a Friday, then we can have an additional Friday\n    # in the remaining_days. Therefore, the greatest number of Fridays is one more than\n    # the number of Fridays in the full weeks.\n    additional_friday = 1 if remaining_days >= 1 else 0\n\n    # The total number of Fridays\n    total_fridays = fridays_in_full_weeks + additional_friday\n\n    return total_fridays\n\nans = solution()"
    ],
    "20a734ca64ba4070bb73709f8775c1bb": [
        "def solution():\n    pencil_cost = 2\n    pen_cost = 4\n    \n    pencils_for_pen = pen_cost / pencil_cost\n\n    return pencils_for_pen\n\nans = solution()"
    ],
    "89c07102e40b408485bed168ad9751a2": [
        "def solution():\n    return 53 * 47\n\nans = solution()"
    ],
    "92911ac8b9144f938149832f7b7402c6": [
        "def solution():\n    return 8386 // 14\n\nans = solution()"
    ],
    "08ead4044f5c4e0cb7f564479dcbb641": [
        "def solution():\n    price_per_mug = 3.50 / 5\n    price_per_pen = 6.80 / 8\n    \n    total_cost = (7 * price_per_mug) + (5 * price_per_pen)\n    \n    change = 10 - total_cost\n    \n    return round(change, 2)\n\nans = solution()"
    ],
    "9b6fc41b0a9a49fea3924bc898749d7d": [
        "def solution():\n    total_pupils = 560\n    fraction_away = 1 / 5\n\n    pupils_away = total_pupils * fraction_away\n    pupils_going_to_cathedral = total_pupils - pupils_away\n\n    return int(pupils_going_to_cathedral)\n\nans = solution()"
    ],
    "6b4e0702e3de4173981781093a35339e": [
        "def solution():\n    num_children = 50\n    time_per_song = 3\n    num_songs = 2\n\n    total_time = time_per_song * num_songs * num_children\n\n    return total_time\n\nans = solution()"
    ],
    "ac385e53c24d4641950c3bc12d00cf65": [
        "def solution():\n    total_weight_with_apples = 580\n    weight_with_two_apples = 280\n    weight_of_three_apples = total_weight_with_apples - weight_with_two_apples\n    weight_of_five_apples = (weight_of_three_apples / 3) * 5\n    weight_of_basket = total_weight_with_apples - weight_of_five_apples\n    return weight_of_basket\n\nans = solution()"
    ],
    "33059b4275c842cfbe5060e8e558c094": [
        "def solution():\n    return \"0.3\" if 0.3 > 0.25 else \"25%\"\n\nans = solution()"
    ],
    "9d2dc78991904963a971fcd7d4ca960c": [
        "def solution():\n    ans = 1  # The question is asking for the value of the number 1.\n    return ans\n\nans = solution()"
    ],
    "4b619e6f83fb4fcb8bd134e22add52a2": [
        "def solution():\n    principal = 35000\n    rate = 1.5 / 100\n    final_amount = 37100\n\n    years = 0\n    current_amount = principal\n    while current_amount < final_amount:\n        current_amount = current_amount * (1 + rate)\n        years += 1\n\n    return years\n\nans = solution()"
    ],
    "824b5f4234db4e34ba3320198b6e527a": [
        "def solution():\n    donuts_per_box = 6\n    boxes_bought = 6\n    donuts_eaten = 3\n\n    total_donuts = donuts_per_box * boxes_bought\n    donuts_left = total_donuts - donuts_eaten\n\n    return donuts_left\n\nans = solution()"
    ],
    "2b391dae225f4f358dfa8a02cfaea5f6": [
        "def solution():\n    loafs_per_cup = 7 / 4\n    loafs_needed = 35\n    cups_needed = loafs_needed / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "e80e460c0afe49d7918f9c4c9e99d36a": [
        "def solution():\n    lcm = 3 * 7  # Least Common Multiple of 3 and 7\n\n    # Find the smallest multiple of the lcm that ends with a 2\n    ans = None\n    for multiple in range(lcm, lcm * 10, lcm):\n        if str(multiple).endswith('2'):\n            ans = multiple\n            break\n            \n    return ans\n\nans = solution()"
    ],
    "c847b39a398345608e4e416f46045845": [
        "def solution():\n    cookies_before, cakes_before = symbols('cookies_before cakes_before')\n    cookies_left = cookies_before - 39\n    cakes_left = cakes_before - 17\n    total_left = cookies_left + cakes_left\n\n    equation1 = Eq(cookies_before, 3 * cakes_before)\n    equation2 = Eq(total_left, 48)\n    \n    solutions = solve((equation1, equation2), (cookies_before, cakes_before))\n\n    return solutions[cookies_left]\n\nans = solution()"
    ],
    "e33f554d8b1644c19022b4fa4594db6b": [
        "def solution():\n    days_in_a_week = 7\n    num_weeks = 2\n    total_days = days_in_a_week * num_weeks\n    return total_days\n\nans = solution()"
    ],
    "926c0d38b66140b8900e8ac92ba84f48": [
        "def solution():\n    # The value of the first 3 (3 in the hundred thousands place)\n    value_first_3 = 3 * 10**5\n    \n    # The value of the second 3 (3 in the tens place)\n    value_second_3 = 3 * 10**1\n    \n    # The difference between the values of two 3s\n    difference = value_first_3 - value_second_3\n    \n    return difference\n\nans = solution()"
    ],
    "13ecc517842a4e27b0943158564ba2f9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's assume john's rate is j, jonah's rate is o, angus's rate is a.\n    # The wall built is 1 unit of work. So in terms of work done:\n    # j + o + a = 1/27 (because together they build the wall in 27 hours)\n    # o + a = 1/36 (because Jonah and Angus together build the wall in 36 hours)\n\n    j, o, a = symbols('j o a')\n\n    equation1 = Eq(j + o + a, 1/27)\n    equation2 = Eq(o + a, 1/36)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (j, o, a))\n\n    # The time taken by John alone will be 1/j\n    john_time = 1 / solutions[j]\n\n    return john_time\n\nans = solution()"
    ],
    "246eea2b254546f6a06a17c8c5da0778": [
        "def solution():\n    base = 2\n    exponent = 17\n    ones_digit = (base ** exponent) % 10\n\n    return ones_digit\n\nans = solution()"
    ],
    "15d29f8eed604f4faf1e5161667d0a8e": [
        "def solution():\n    total_pages = sum(range(1, 21))\n    return total_pages\n\nans = solution()"
    ],
    "0521571bcf6e46beb68e012434205a1a": [
        "def solution():\n    max_4z_coins = 4\n    found = False\n    largest_non_payable_amount = 0\n\n    while not found:\n        largest_non_payable_amount += 1\n        found = True\n        for num_4z in range(0, max_4z_coins + 1):\n            if (largest_non_payable_amount - (num_4z * 4)) % 5 == 0:\n                found = False\n                break\n\n    return largest_non_payable_amount - 1\n\nans = solution()"
    ],
    "576faec091114697b4cc7ea7ab748d0c": [
        "def solution():\n    # Number of people who can speak each language\n    french = 15\n    japanese = 12\n    italian = 13\n    \n    # Number of people who can speak two languages\n    french_japanese = 5\n    french_italian = 3\n    japanese_italian = 2\n    \n    # Number of people who can speak all three languages\n    all_three = 1\n    \n    # Calculate the number of people in the group using the inclusion-exclusion principle\n    total_people = (french + japanese + italian) - (french_japanese + french_italian + japanese_italian) + all_three\n    \n    return total_people\n\nans = solution()"
    ],
    "1eee00688a104ff986a31b1fee446322": [
        "def solution():\n    first_term = 3\n    difference = 3\n    num_rows = 22\n\n    total_students = num_rows / 2 * (2 * first_term + (num_rows - 1) * difference)\n\n    return int(total_students)\n\nans = solution()"
    ],
    "099cc2e5ff734ad197d27fee09bc11fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apple, pear = symbols('apple pear')\n    \n    equation1 = Eq(3 * apple + 4 * pear, 1.81)\n    equation2 = Eq(5 * apple + 2 * pear, 1.71)\n    \n    solutions = solve((equation1, equation2), (apple, pear))\n    \n    weight = 4 * solutions[apple] + 4 * solutions[pear]\n    \n    return weight\n\nans = solution()"
    ],
    "be94a430bb8b4fcaa11c93b71957d202": [
        "def solution():\n    # Since the sum 1001 must be divisible by the greatest common divisor d,\n    # and we are interested in the maximum possible value of d,\n    # the maximum d will be 1001 itself provided that\n    # it is possible to find 10 positive integers which sum up to 1001\n    # and are multiples of 1001.\n    # Since 1001 is not divisible by 10, we look for the highest divisor of 1001\n    # that allows the formation of 10 such numbers.\n    # We start testing from 1001 and go down to find the maximum d\n    \n    # The factors of 1001 (7 * 11 * 13) are: 1, 7, 11, 13, 77, 91, 143, 1001\n    # We need to check which of these can be used to divide the ten numbers\n    # such that their sum is still 1001.\n    # Since 1001 is an odd number, which of the factors when multiplied by 10\n    # still results in an odd number, only 1 and the factor itself (1001).\n    # Since the problem requires 10 positive integers, and all must be divisible by d,\n    # d cannot be 1001 because that would require adding the number 1001 ten times,\n    # which would sum to more than 1001.\n    # We will take the next best possibility, which is the largest factor of 1001 that is less than 1001,\n    # ensuring that all ten numbers are distinct multiples of d.\n    \n    # Checking each divisor of 1001 starting from the largest, we find that 143 is the largest\n    # factor of 1001 that still allows us to have 10 numbers whose sum is 1001.\n   \n    # Find the greatest common divisor as the maximum divisor of 1001\n    # that can be used to express 1001 as a sum of ten positive integers\n   \n    divisors = [143, 91, 77, 13, 11, 7, 1]\n    \n    # Iterate through the list of divisors to find the maximum possible d\n    for d in divisors:\n        if (1001 // d) * d == 1001 and 1001 % d == 0:\n            return d\n            \n    return 1  # this line should never be reached due to the nature of the problem\n\nans = solution()"
    ],
    "043842622d23468b98edf5cef7ed85bf": [
        "def solution():\n    from math import gcd\n\n    ribbon1 = 45\n    ribbon2 = 30\n\n    longest_piece_length = gcd(ribbon1, ribbon2)\n\n    return longest_piece_length\n\nans = solution()"
    ],
    "a33b75b9ed48463ca3eeddc40ed2b3d3": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Define the symbols for the number of boys (b) and girls (g)\n    b, g = symbols('b g')\n\n    # Create the equations based on the problem statement\n    equation1 = (b - b/11) - 5 == g\n\n    # There are 152 students in total\n    equation2 = b + g == 152\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (b, g))\n\n    # Return the original number of boys\n    return solutions[b]\n\nans = solution()"
    ],
    "93147f6eb5f740a294872bacc776ddb6": [
        "def solution():\n    ans = 475 + 138\n    return ans\n\nans = solution()"
    ],
    "7f1aa4e059a14f339db6b2ca01c5fcab": [
        "def solution():\n    num = 1\n    while True:\n        if num % 5 == 1 and num % 12 == 3:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "be1d59d57baf4467ac4f9b6959b15354": [
        "def solution():\n    return 42 + 21 + 16 + 44 + 37\n\nans = solution()"
    ],
    "5703bb8ce16a4381b41f8d825e3b1d53": [
        "def solution():\n    total_students = 152\n    for boys in range(1, total_students):\n        girls = total_students - boys\n        if (boys - boys / 11) == (girls - 5):\n            return boys\n\nans = solution()"
    ],
    "675d0644ed364630886e6ad4d9107e49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    amanda, bernie, cathy = symbols('amanda bernie cathy')\n    \n    equation1 = Eq(cathy, 3 * amanda)\n    equation2 = Eq(amanda, 2 * bernie)\n    equation3 = Eq(amanda + bernie + cathy, 378)\n    \n    solutions = solve((equation1, equation2, equation3), (amanda, bernie, cathy))\n    \n    return solutions[amanda] + solutions[cathy]\n\nans = solution()"
    ],
    "2775c0cd96fc41549c1710e81e205e35": [
        "def solution():\n    return 386 + 99\n\nans = solution()"
    ],
    "1661939d67544a83807ef71d048c5ebf": [
        "def solution():\n    return (7 * 3) + ~~~\n\nans = solution()"
    ],
    "f9fc8eb9b14d4cc9a262fcb37c90fda7": [
        "def solution():\n    orange_drink_volume = 12\n    fraction_water = 3 / 4\n    volume_water = orange_drink_volume * fraction_water\n    return volume_water\n\nans = solution()"
    ],
    "ab9fcefd7c4e479ea261d1c0846c27b6": [
        "def solution():\n    eggs_per_day = 50\n    maturation_period = 30\n    total_days = 40\n    \n    if total_days < maturation_period:\n        # No new adults in less than maturation period\n        return 0\n    \n    # Only the eggs laid in the first 10 days will become adults by day 40\n    days_with_eggs_becoming_adults = total_days - maturation_period\n    \n    # Total new adult fleas is the number of days where eggs are laid\n    # that can become adults multiplied by the eggs laid each day\n    total_new_adult_fleas = days_with_eggs_becoming_adults * eggs_per_day\n    \n    return total_new_adult_fleas\n\nans = solution()"
    ],
    "2055cce1efcf44bea37be19436b9bcf2": [
        "def solution():\n    first_term = 3\n    common_difference = 3\n    num_terms = 22\n\n    # sum of arithmetic series formula: n/2 * (2a + (n-1)d)\n    total_students = (num_terms / 2) * (2 * first_term + (num_terms - 1) * common_difference)\n\n    return int(total_students)\n\nans = solution()"
    ],
    "0842c79b27de450fa5cfe122f9bcadc6": [
        "def solution():\n    french = 15\n    japanese = 12\n    italian = 13\n    french_japanese = 5\n    french_italian = 3\n    japanese_italian = 2\n    all_three = 1\n\n    # Using the Inclusion-Exclusion Principle\n    total_people = french + japanese + italian - french_japanese - french_italian - japanese_italian + all_three\n\n    return total_people\n\nans = solution()"
    ],
    "4e21bd2101d34265aef926bc9e12fa2a": [
        "def solution():\n    story_books = 75\n    magazines = 12 + 3 * story_books\n    total_amount = story_books + magazines\n    return total_amount\n\nans = solution()"
    ],
    "487795a712ca4df799ee2cbe1e449bfa": [
        "def solution():\n    for abcd in range(1000, 10000):\n        M = int(\"5\" + str(abcd))\n        N = int(str(abcd) + \"5\")\n        if M - N == 22122:\n            return abcd\n\nans = solution()"
    ],
    "c095aeb90ada41a7b2026c6d00a0a9a5": [
        "from fractions import Fraction\n\ndef solution():\n    a = 21 + Fraction(21, 286)\n    b = 6 + Fraction(647, 2530)\n    c = 1 + Fraction(1370, 2829)\n\n    ans = a / b * c\n    return ans\n\nans = solution()"
    ],
    "a8ad8c1da3f64db3b4d3e1134a3879a8": [
        "def solution():\n    return 1600 * 0.30\n\nans = solution()"
    ],
    "1080dc888bc1462c875ce93fbe5290ad": [
        "def solution():\n    total_money = 3.85  # in pounds\n    pencil_cost = 0.38  # in pounds\n    ruler_cost = 0.59   # in pounds\n\n    money_left = total_money - (pencil_cost + ruler_cost)\n    \n    return money_left\n\nans = solution()"
    ],
    "ee5f7e8a908d460b8adcc1ad027e999e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anne = symbols('anne')\n    maria = anne + 20\n    total_apples = Eq(anne + maria, 44)\n\n    anne_apples = solve(total_apples, anne)[0]\n\n    return anne_apples\n\nans = solution()"
    ],
    "b941a481a3ec4834ae3b5b86f5aec29d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let s be the work Star does in one hour and n be what Nini does in one hour.\n    s, n = symbols('s n')\n\n    # The two equations represent the total work done in each case.\n    # Each worker's work is the product of their work rate and the time they spent working.\n    equation1 = Eq(5*s + 20*n, 1)  # First case: they finish the job together\n    equation2 = Eq(20*s + 8*n, 1)  # Second case: they also finish the job together\n\n    # Now we will solve the equations to find s and n.\n    solutions = solve((equation1, equation2), (s, n))\n\n    # Once we have Nini's rate, we can find out how long it will take her to finish the job by herself.\n    # Since the job is a whole work (1), we divide 1 by Nini's rate.\n    time_for_nini = 1 / solutions[n]\n\n    return time_for_nini\n\nans = solution()"
    ],
    "e02f12831853474bb8ee7052e880632b": [
        "def solution():\n    # Dimensions of the cuboid\n    length = 6\n    width = 10\n    height = 12\n    \n    # The number of small cubes along each dimension\n    cubes_along_length = length\n    cubes_along_width = width\n    cubes_along_height = height\n    \n    # Because the cuboid is cut into 720 equal pieces,\n    # and we have the volume of the cuboid to be 6*10*12,\n    # each small cube is a 1x1x1 cube.\n    \n    # The top and bottom face each share (cubes_along_length - 2) * (cubes_along_width - 2) unpainted small cubes\n    # So we subtract this from the total small cubes on the top and bottom face to get the painted ones\n    top_and_bottom_painted = 2 * (cubes_along_length * cubes_along_width - (cubes_along_length - 2) * (cubes_along_width - 2))\n    \n    # The left and right face each share (cubes_along_length - 2) * (cubes_along_height - 2) unpainted small cubes\n    # So we subtract this from the total small cubes on the left and right face to get the painted ones\n    left_and_right_painted = 2 * (cubes_along_length * cubes_along_height - (cubes_along_length - 2) * (cubes_along_height - 2))\n    \n    # The front and back face each share (cubes_along_width - 2) * (cubes_along_height - 2) unpainted small cubes\n    # So we subtract this from the total small cubes on the front and back face to get the painted ones\n    front_and_back_painted = 2 * (cubes_along_width * cubes_along_height - (cubes_along_width - 2) * (cubes_along_height - 2))\n\n    # Sum up the painted small cubes from each group of faces\n    total_painted_cubes = top_and_bottom_painted + left_and_right_painted + front_and_back_painted\n    \n    return total_painted_cubes\n\nans = solution()"
    ],
    "6b16fdd0be384cf5a083adb6b7ddc329": [
        "def solution():\n    for num in range(10, 100):\n        if num % 9 == 5 and num % 11 == 2:\n            return num\n\nans = solution()"
    ],
    "3199cfbf2dfe4ff5b0205bf52aec9191": [
        "def solution():\n    # For each key, the warden may have to try all classrooms until finding the right one.\n    # However, for the last key, he won't have to try it because it will be the only one remaining.\n    # Thus, for the first key, he may have to try 20 times, for the second key 19 times and so on.\n    # The total number of tries will be the sum of numbers from 1 to 20 (inclusive),\n    # minus 1 because the last key won't require any tries.\n    total_tries = sum(range(1, 21)) - 1\n    return total_tries\n\nans = solution()"
    ],
    "7580acd98a0c4ef6bda0a71edd51c899": [
        "def solution():\n    # Assuming the pages are numbered in a standard way:\n    # The first sheet would have pages: 1, 2 (front, back)\n    # The second sheet would have pages: 3, 4 (front, back)\n    # Therefore, the third sheet would have pages: 5, 6 (front, back)\n    # The sum of the page numbers on the third sheet:\n    \n    sum_of_pages = 5 + 6\n    return sum_of_pages\n\nans = solution()"
    ],
    "c918b81873d64b8aa1c102ce71280309": [
        "def solution():\n    from sympy import divisors\n\n    # Since the candy must be divided into equally distributed odd number piles,\n    # we need to find the odd divisors of 140, excluding 1 because Valerie will\n    # distribute candies to more than one pile.\n    # 140 = 2^2 * 5 * 7, we exclude 2^2 since we are looking for odd divisors only.\n    # Thus, we only consider the divisors of 5 * 7 = 35.\n    \n    number_of_ways = len([d for d in divisors(35) if d != 1])\n\n    return number_of_ways\n\nans = solution()"
    ],
    "7a962b40b4df4e7da95c3f2d31a2f3ce": [
        "def solution():\n    total_students = 98\n    fraction_of_girls = 3 / 7\n    number_of_girls = total_students * fraction_of_girls\n    return int(number_of_girls)\n\nans = solution()"
    ],
    "9399d8d9f49e46a198d04e3865b85816": [
        "def solution():\n    # After Tom takes 4 stones from stack B, the situation is as follows:\n    # Stack A: 20 stones, Stack B: 16 stones\n    \n    # For Jerry to win, he must ensure that after his moves, the\n    # number of stones left in stack A and stack B should be equal.\n    # This is because, moving forward, whatever Tom does, Jerry can\n    # mimic that move but on the other stack, leading to Jerry winning.\n    \n    # Since Jerry can only take stones from one stack to make them equal,\n    # he must take from stack A, because stack B has less.\n    stones_to_take = 20 - 16\n    \n    # Jerry takes 4 stones from stack A, balancing both stacks at 16.\n    # Stack after Jerry's move:\n    # Stack A: 16 stones, Stack B: 16 stones\n    return f\"Jerry must take {stones_to_take} stone(s) from Stack A.\"\n\nans = solution()"
    ],
    "2bf32838f785445980cc390cb6320d3d": [
        "def solution():\n    num = (2017 / 2018) + (20172017 / 20182018)\n    denom = 201720172017 / 201820182018\n\n    ans = num / denom\n    return ans\n\nans = solution()"
    ],
    "23f8aa9db7e147b3b3742048c1d3174a": [
        "def solution():\n    result = 861 // 7\n    return result\n\nans = solution()"
    ],
    "04b825cc67fe4b4f8a1f4497100aeb7c": [
        "def solution():\n    watermelon_to_peach = 6\n    peach_to_apple = 3 / 2\n    watermelon_to_apple = watermelon_to_peach * peach_to_apple\n    return watermelon_to_apple\n\nans = solution()"
    ],
    "69821dbcaf204ec39ed74a835223a3ce": [
        "def solution():\n    return (120 + 300) / 2\n\nans = solution()"
    ],
    "b79ceb9a914f43578cdb34802a537cfe": [
        "def solution():\n    return 100\n\nans = solution()"
    ],
    "fa6c8419cbc948ed949fceaaf819f554": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "894a1b1acc3e45f59d4643eed64472b1": [
        "def solution():\n    total_cups = 30 + 50 + 20\n    total_cost = (30 * 5) + (50 * 3) + (20 * 10)\n    average_cost = total_cost / total_cups\n    return average_cost\n\nans = solution()"
    ],
    "796675bc6c294ff3bcb032a3c401a43e": [
        "def solution():\n    count = 0\n    for i in range(1, 301):\n        if '3' in str(i):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "7ed76480d276434fbfc1ef6cec1b7bdd": [
        "def solution():\n    total_digits = 933\n    pages = 0\n    digits_used = 0\n\n    # Calculate the total pages that have 1-digit page numbers (1-9)\n    digits_in_1_digit_pages = 9 * 1\n    if total_digits > digits_in_1_digit_pages:\n        total_digits -= digits_in_1_digit_pages\n        pages = 9\n    else:\n        return total_digits\n\n    # Calculate the total pages that have 2-digit page numbers (10-99)\n    digits_in_2_digit_pages = 90 * 2\n    if total_digits > digits_in_2_digit_pages:\n        total_digits -= digits_in_2_digit_pages\n        pages += 90\n    else:\n        return pages + total_digits // 2\n\n    # Calculate the total pages that have 3-digit page numbers (100-999)\n    pages += total_digits // 3\n    return pages\n\nans = solution()"
    ],
    "88e4456f85e441199253d72e1f99a80c": [
        "def solution():\n    total_digits = 0\n    for number in range(1, 92):\n        total_digits += len(str(number))\n    return total_digits\n\nans = solution()"
    ],
    "c9603f52f68b48fb9942c64a01b72b5b": [
        "def solution():\n    digits_per_page = 1\n    pages = 0\n    total_digits_used = 0\n\n    while total_digits_used < 933:\n        pages += 1\n        total_digits_used += digits_per_page\n        if pages >= 10 ** digits_per_page:\n            digits_per_page += 1\n\n    return pages\n\nans = solution()"
    ],
    "2256985532604103b84c8d43d526ad28": [
        "def solution():\n    # Initially, Jane has equal number of each color pens in both boxes.\n    # Therefore, each box has 10 blue, 15 red, 20 black and 25 green pens.\n\n    # After transferring 20 pens from Box A to Box B, Box A may have less than 15 pens of at least one color.\n    # We need to find out the minimum number of pens that must be returned to ensure at least 15 pens of each color in Box A.\n\n    # Let's consider the worst-case scenario for Box A.\n    # The worst-case scenario is that the 20 pens taken from Box A are all from the colors with the highest quantity.\n    # Let's assume all 20 black pens are moved from Box A to Box B, leaving Box A with 0 black pens.\n\n    # We need to return enough black pens to Box A to have at least 15 black pens.\n    # Since Box A has 0 black pens now, we must return 15 black pens.\n\n    # Therefore, the answer is 15 pens must be returned.\n    return 15\n\nans = solution()"
    ],
    "7e7c1a59a5694db697ef232a76a2ffdf": [
        "def solution():\n    return 1/8\n\nans = solution()"
    ],
    "81eb5a575fa2413fb713f5e997cd9be1": [
        "def solution():\n    total_chocolates = 20\n    plain_chocolates = 8\n    soft_centre_chocolates = 16\n\n    # Let the number of plain chocolates with soft-centres be x.\n    # Since there are 12 milk chocolates and 16 chocolates have soft-centres,\n    # at least 16 - 12 = 4 of the plain chocolates must have soft-centres.\n    min_plain_soft_centre = soft_centre_chocolates - (total_chocolates - plain_chocolates)\n\n    # Since plain chocolates cannot have more than their total number, the maximum number of\n    # plain chocolates with soft-centres is 8.\n    max_plain_soft_centre = plain_chocolates\n\n    # There are between 4 to 8 plain chocolates with soft-centres.\n    return (min_plain_soft_centre, max_plain_soft_centre)\n\nans = solution()"
    ],
    "3e0ec8edcb27464fae3044b467f54920": [
        "def solution():\n    # Let 'd' be the divisor, and 'q' the quotient, which is given as 29. Remainder 'r' is 11.\n    # The equation for the dividend is:\n    # dividend = divisor * quotient + remainder\n    # d * q + r\n\n    # It's also given that the sum of the dividend and divisor is 431.\n    # Therefore, we have the following equation system:\n    # d + (d * 29 + 11) = 431\n    # Solving for d:\n    \n    from sympy import symbols, Eq, solve\n\n    d = symbols('d')\n    q = 29\n    r = 11\n    equation = Eq(d + (d * q + r), 431)\n    divisor = solve(equation, d)[0]\n\n    # Now we can calculate the dividend using the divisor found.\n    dividend = divisor * q + r\n\n    # The question asks for the difference between the dividend and divisor.\n    difference = dividend - divisor\n\n    return difference\n\nans = solution()"
    ],
    "f93fc07de4544d5f963823aa20a6df3c": [
        "def solution():\n    total_diff = 32\n    for total_students in range(1, 1000):  # Assume a reasonable upper bound for total students\n        side_length = int(total_students**0.5)\n        if side_length**2 != total_students:  # Skip if not a perfect square\n            continue\n        \n        boy_layers = (side_length + 1) // 2\n        girl_layers = side_length // 2\n\n        boys = boy_layers * (2 * side_length - 1)  # Each boy layer has 2 * side_length - 1 boys except the first outermost\n        girls = total_students - boys  # Total girls\n        \n        if boys - girls == total_diff:\n            return total_students\n\nans = solution()"
    ],
    "b2d3da9e064d4575a7d21857a9386c15": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of stickers and y be the number of pupils\n    x, y = symbols('x y')\n\n    # Set up equations based on the problem statement\n    equation1 = Eq(x - 13*y, 190)\n    equation2 = Eq(x - 17*y, 50)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "766f7130bda14f6780c8a29b28b45542": [
        "def solution(n):\n    C = 50 * n\n    return C\n\nans = solution # Assigning the function to 'ans' for callability"
    ],
    "bd8976f4ffcd4d51b276b2ccda2e228d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of each type of coin\n    x = symbols('x')\n\n    # Since we have the same number x of each type of coin, the total value is:\n    # 1*x + 2*x + 5*x + 10*x = 90\n    \n    equation = Eq(1*x + 2*x + 5*x + 10*x, 90)\n\n    # Solve for x\n    num_coins_per_type = solve(equation, x)\n\n    # The total number of coins is x of each type times 4 (the type of coins)\n    total_coins = num_coins_per_type[0] * 4\n\n    return total_coins\n\nans = solution()"
    ],
    "55d9d0163f3a466c8356b0f2120c7887": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let a represent the number of apples and p represent the number of pears\n    a, p = symbols('a p')\n\n    # The equations based on the problem statement\n    equation1 = Eq(a + p, 105)  # total count of apples and pears\n    equation2 = Eq(a - a/3, p - 2*p/5)  # after selling the fruits, 5/6 as many apples as pears left\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, p))\n    \n    # Calculate the total number of apples and pears sold\n    apples_sold = solutions[a] / 3\n    pears_sold = 2 * solutions[p] / 5\n    \n    # Return the total number of fruits sold\n    return int(apples_sold + pears_sold)\n\nans = solution()"
    ],
    "418f309d7a1845b1a05816bed5dfb673": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    A, B, C = symbols('A B C')\n\n    # Define the equation system based on the problem\n    equation1 = Eq(A / B, 4 / 5)\n    equation2 = Eq(B / C, 5 / 6)\n    equation3 = Eq(C - A, 10)\n\n    # Solve the equation system\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    # Sum A, B, and C\n    total_sum = sum(solutions.values())\n\n    return total_sum\n\nans = solution()"
    ],
    "6eeec66a73a24afc801c791a461a7aa6": [
        "def solution():\n    total_cars = 60\n    red_cars_fraction = 5 / 12\n    blue_cars_percentage = 20 / 100\n\n    red_cars = total_cars * red_cars_fraction\n    blue_cars = total_cars * blue_cars_percentage\n\n    other_cars = total_cars - (red_cars + blue_cars)\n\n    return int(other_cars)\n\nans = solution()"
    ],
    "bb42c63fe2114d219cb0459ccb14f1a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B, C = symbols('A B C')\n    \n    ratio_equation = Eq(4 * B, 5 * A) & Eq(5 * C, 6 * B)\n    difference_equation = Eq(C - A, 10)\n    \n    solutions = solve((ratio_equation, difference_equation), (A, B, C))\n    \n    return solutions[A] + solutions[B] + solutions[C]\n\nans = solution()"
    ],
    "3c78fac74fe445cdaba8f451af901d4f": [
        "def solution():\n    from math import factorial\n\n    # First, consider ABCD as one unit + 8 other students = 9 units\n    # These 9 units can be arranged in 9! ways\n    units_permutation = factorial(9)\n\n    # Next, within the ABCD unit, the 4 students can be arranged in 4! ways\n    abc_permutation = factorial(4)\n\n    # Total arrangements is the product of both calculations\n    total = units_permutation * abc_permutation\n\n    return total\n\nans = solution()"
    ],
    "9da90a336543472fb221543495f75212": [
        "def solution():\n    # Total number of games played\n    total_games = sum(range(6))\n    # Total points distributed\n    total_points = total_games * 2\n    # Points for five students\n    given_points = sum([7, 6, 5, 4, 3])\n    # Remaining points for the last student\n    remaining_points = total_points - given_points\n    \n    return remaining_points\n\nans = solution()"
    ],
    "2fbf56cda6294a4ba514fb0676d5a24c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the weights of bags A and B\n    A, B = symbols('A B')\n    \n    # Original ratio equation: A / B = 5 / 3\n    equation1 = Eq(A / B, 5 / 3)\n    \n    # New ratio equation after transferring 10 grams from A to B: (A - 10) / (B + 10) = 7 / 5\n    equation2 = Eq((A - 10) / (B + 10), 7 / 5)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (A, B))\n    \n    # The total weight is the sum of A and B\n    total_weight = solutions[A] + solutions[B]\n    \n    return total_weight\n\nans = solution()"
    ],
    "f90f17b98c3244ee80cbcf47c9a22ca7": [
        "def solution():\n    boys_to_girls_ratio = 3 / 5\n    total_boys = 9\n    total_girls = (total_boys / boys_to_girls_ratio) * 5\n    return int(total_girls)\n\nans = solution()"
    ],
    "0c806097cde44e2b993a1db7282d9731": [
        "def solution():\n    players_total = 378\n    first_line = 22\n    last_line = 62\n\n    # Number of terms n can be found by (n/2)*(first_line + last_line) = players_total\n    # Simplify to n*(first_line + last_line) = 2*players_total\n    n = 2 * players_total // (first_line + last_line)\n\n    # The difference between each term in an arithmetic sequence is (last_term - first_term) / (n - 1)\n    difference = (last_line - first_line) / (n - 1)\n\n    return int(difference)\n\nans = solution()"
    ],
    "d6a1e647460246479951e8955d7126b0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, pears = symbols('apples pears')\n\n    # Initial condition\n    initial_condition = Eq(apples + pears, 105)\n\n    # Apples and pears sold\n    apples_sold = apples * (1/3)\n    pears_sold = pears * (2/5)\n\n    # Apples and pears left\n    apples_left = apples - apples_sold\n    pears_left = pears - pears_sold\n\n    # Relationship between the apples and pears left\n    relationship = Eq(apples_left, (5/6) * pears_left)\n\n    # Solve the system of equations\n    solutions = solve((initial_condition, relationship), (apples, pears))\n\n    # Find total number of apples and pears sold\n    total_sold = solutions[apples] * (1/3) + solutions[pears] * (2/5)\n\n    return int(total_sold)\n\nans = solution()"
    ],
    "1c808145d3a040e4899219721beca8a3": [
        "def solution():\n    result = 48 * 925 * 38 * 435\n    count_zeros = 0\n\n    while result % 10 == 0:\n        count_zeros += 1\n        result //= 10\n    \n    return count_zeros\n\nans = solution()"
    ],
    "65b97cc4685a4c2285fda77b5e2dd58d": [
        "def solution():\n    masses = {\n        '30g': 30,\n        '1kg': 1000,\n        '300g': 300,\n        '2.5kg': 2500,\n        '3000g': 3000,\n        '150g': 150,\n        '3g': 3\n    }\n\n    largest_mass = max(masses, key=masses.get)\n\n    return largest_mass\n\nans = solution()"
    ],
    "859d0b8b48294702afaa6ae358e1b4b8": [
        "def solution():\n    # Total number of days when the dog barks\n    total_barks_per_week = 3\n    days_in_week = 7\n    total_weeks = 1000 / days_in_week\n    total_barking_days = total_barks_per_week * total_weeks\n\n    # Probability of the dog barking when a thief is around\n    prob_bark_given_theft = 0.9\n\n    # Probability of a theft occurring\n    total_thefts = 2\n    days = 1000\n    prob_theft = total_thefts / days\n\n    # Probability of the dog barking on any given day\n    prob_bark = total_barking_days / days\n\n    # Using Bayes' theorem:\n    # P(Theft | Bark) = P(Bark | Theft) * P(Theft) / P(Bark)\n    prob_theft_given_bark = (prob_bark_given_theft * prob_theft) / prob_bark\n\n    return prob_theft_given_bark\n\nans = solution()"
    ],
    "7522b62306804ad5ac94948668c3a1b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, orange, grape, pineapple = symbols('apple orange grape pineapple')\n\n    equation1 = Eq(apple, orange + 7)\n    equation2 = Eq(apple, grape + 3)\n    equation3 = Eq(pineapple, orange + 2)\n    equation4 = Eq(apple + orange + grape + pineapple, 25)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (apple, orange, grape, pineapple))\n\n    return solutions[apple]\n\nans = solution()"
    ],
    "cbc5f810ee4d4266ac73f789efc26675": [
        "def solution():\n    total_children = 407\n    fraction_girls = 6 / 11\n\n    # Calculate the number of girls\n    num_girls = total_children * fraction_girls\n\n    # Subtract the number of girls from the total to find the number of boys\n    num_boys = total_children - num_girls\n\n    return int(num_boys)\n\nans = solution()"
    ],
    "cb24212b24014d99811733199a00d63c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n    \n    equation1 = Eq(stickers, 13 * pupils + 190)\n    equation2 = Eq(stickers, 17 * pupils + 50)\n    \n    solutions = solve((equation1, equation2), (stickers, pupils))\n    \n    return solutions[stickers]\n\nans = solution()"
    ],
    "a8823bcc458c444d8e7a13e610f7cd2a": [
        "def solution():\n    ans = (70 * 4) - (80 * 3) + (60 * 5)\n    return ans\n\nans = solution()"
    ],
    "514c9d0ed96a47ed9c826d6081877afc": [
        "def solution():\n    # Since we want the smallest difference, we will arrange the numbers\n    # such that the first number is the smallest 9-digit number using 1-9\n    # and the second number is the next smallest 9-digit number using 1-9.\n    \n    # The smallest 9-digit number using 1-9 is simply 123456789.\n    smallest = int(\"\".join(map(str, range(1, 10))))\n\n    # The next smallest is obtained by swapping the last two digits of the smallest.\n    # That would be 123456798.\n    next_smallest = int(\"\".join(map(str, range(1, 9))) + '9' + '8')\n\n    # The difference is the second number minus the first number.\n    difference = next_smallest - smallest\n\n    return difference\n\nans = solution()"
    ],
    "525efcf75fb844b7b5bfc88c0478887d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # initial difference between boys and girls\n    eq1 = Eq(girls, boys + 65)\n\n    # after some boys and girls left, the number is equal\n    eq2 = Eq(boys - 2 / 5 * boys, girls - 3 / 7 * girls)\n\n    # solve the system of equations\n    solved_values = solve((eq1, eq2), (boys, girls))\n\n    # calculate the total number of students left in the hall\n    total_left = (solved_values[boys] - 2 / 5 * solved_values[boys]) + (solved_values[girls] - 3 / 7 * solved_values[girls])\n\n    return int(total_left)\n\nans = solution()"
    ],
    "c5424cddd42c402499631a2dc29f9de6": [
        "def solution():\n    remaining_after_third = 25\n    moved_third_trip = 68\n\n    remaining_after_second = remaining_after_third + moved_third_trip\n    half_remaining_after_first = remaining_after_second - 11\n\n    remaining_after_first = 2 * half_remaining_after_first\n    half_initial_bricks = remaining_after_first + 26\n\n    initial_bricks = 2 * half_initial_bricks\n\n    return initial_bricks\n\nans = solution()"
    ],
    "0d96f11c50ce4d189e891f9019eef601": [
        "def solution():\n    return 2412 // 9, 2412 % 9\n\nans = solution()"
    ],
    "d95d576c1e1d4865bb3b4aa77767da99": [
        "def solution():\n    count = 0\n    for i in range(1, 131):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "fa96d25c74d0403cb10a17ab2f107e56": [
        "def solution():\n    total_students = 1690\n    girls_swim_ratio = 31\n    girls_not_swim_ratio = 49\n    boys_more = 90\n    boys_swim_less = 120\n\n    # Total ratio values for girls\n    total_girls_ratio = girls_swim_ratio + girls_not_swim_ratio\n\n    # Since there are 90 more boys than girls\n    # Let girls = x, then boys = x + 90\n    # x + (x + 90) = total students\n    # 2x + 90 = 1690\n    # 2x = 1690 - 90\n    # x = (1690 - 90) / 2\n    girls = (total_students - boys_more) // 2\n    boys = girls + boys_more\n\n    # Number of girls that can swim and cannot swim\n    # total_girls_ratio parts = girls\n    # one part = girls / total_girls_ratio\n    girls_swim = (girls * girls_swim_ratio) // total_girls_ratio\n    girls_not_swim = (girls * girls_not_swim_ratio) // total_girls_ratio\n\n    # Number of boys that can swim and cannot swim\n    # boys_swim + 120 = boys_not_swim\n    # boys_swim + boys_swim + 120 = boys\n    # 2 * boys_swim = boys - 120\n    # boys_swim = (boys - 120) / 2\n    boys_swim = (boys - boys_swim_less) // 2\n    boys_not_swim = boys - boys_swim\n\n    # Total number of students who cannot swim\n    total_not_swim = girls_not_swim + boys_not_swim\n    \n    return total_not_swim\n\nans = solution()"
    ],
    "9238796298a4443b8f23e7932b9616d6": [
        "def solution():\n    import math\n    return math.factorial(3)\n\nans = solution()"
    ],
    "e1834f400a7b4dd1aceed1e5f730d59b": [
        "def solution():\n    # The total number of students must form a perfect square\n    # because the desks and chairs can line up in a square array.\n    # Since Mike is always the 2nd in line, there must be a square array of n*n\n    # where n-1 is the row and column position of Mike when counting from any direction.\n\n    # To find the number of students, we need to find the perfect square\n    # for which n-1 is Mike's position in the array.\n    students = 0\n    n = 2  # Starting from the smallest square array where Mike could be 2nd in line\n    while True:\n        students = n * n\n        if (n - 1) * (n - 1) == students - 4:  # (n-1) squared should give us a square number with Mike as the second\n            break\n        n += 1\n    \n    return students\n\nans = solution()"
    ],
    "e001594de0464ba1b21b4efea0bd0572": [
        "def solution():\n    current_sum = 22\n    target_sum = 40\n    years_to_target_sum = target_sum - current_sum\n    return years_to_target_sum\n\nans = solution()"
    ],
    "957c6e2479f14a37aca09d1bc7ff195f": [
        "def solution():\n    total_digits = 0\n    for page in range(1, 21):\n        total_digits += len(str(page))\n    return total_digits\n\nans = solution()"
    ],
    "97bb7d23bdbf4724b5bab9effbd3ac6e": [
        "def solution():\n    ans = 125 * 34 * 25 * 4 * 8\n    return ans\n\nans = solution()"
    ],
    "157222dd22d34a94998e5528efa14ab0": [
        "def solution():\n    # Let total_passengers be the number of passengers on the bus at the start.\n    # After the first stop, 2/5 of the passengers got off, so 3/5 remained.\n    # At the second stop, 1/3 of the remaining passengers got off, leaving 2/3 on the bus.\n    # Finally, there are 22 passengers left.\n\n    final_passengers = 22\n    # Calculate the number of passengers after the first stop\n    passengers_after_first_stop = final_passengers / (2/3)\n    # Calculate the original number of passengers before any stops\n    total_passengers = passengers_after_first_stop / (3/5)\n\n    return int(total_passengers)\n\nans = solution()"
    ],
    "a447314d1b7e47d595af58ce12a8673e": [
        "def solution():\n    # Loop over all the possible 4-digit numbers\n    for number in range(1000, 10000):\n        # Convert number to a string to work with individual digits\n        num_str = str(number)\n\n        # Form a new number by shifting the digits\n        new_number_str = num_str[-1] + num_str[:-1]\n        new_number = int(new_number_str)\n\n        # Check if the new number is greater than the original by 5877\n        if new_number - number == 5877:\n            # If the condition is met, return the original number\n            return number\n\n# Call the function and store the answer in 'ans'\nans = solution()"
    ],
    "ef6efdf0f99e45afbcac63320b9c084a": [
        "def solution():\n    num_students = 0\n    for i in range(2, 1000):  # Upper limit, assuming a reasonable number of students in a class\n        if (i - 1) * (i + 1) == i ** 2 - 1:  # (i-1) and (i+1) are the dimensions of the squares\n            num_students = i ** 2\n            break\n    return num_students\n\nans = solution()"
    ],
    "105a05ed86254429b49e9aa1e948fc3f": [
        "def solution():\n    # Create a dictionary to store the number of ways to get to each step\n    num_ways = {0: 1}  # Base case: 1 way to stand at the bottom (step 0)\n    \n    # Calculate the number of ways to reach each step, 1 through 10\n    for step in range(1, 11):\n        # The number of ways to reach this step is the sum of the ways\n        # to reach two steps below and three steps below.\n        num_ways[step] = num_ways.get(step - 2, 0) + num_ways.get(step - 3, 0)\n    \n    # The answer is the number of ways to reach the 10th step\n    return num_ways[10]\n\nans = solution()"
    ],
    "1d179bb769e243588baf620c0eddb4c3": [
        "def solution():\n    num = '1998'\n    n = len(num)\n    while True:\n        if int(num) % 33 == 0:\n            return n\n        num += '1998'\n        n += 4\n\nans = solution()"
    ],
    "8b5b1973788f4120b9eaa557471090b6": [
        "def solution():\n    group_number = 5\n    a = group_number\n    b = group_number**2\n    c = group_number**3\n    \n    return a + b + c\n\nans = solution()"
    ],
    "37df628db6754f34a0428e73a9610822": [
        "def solution():\n    ans = 882 // 14\n    return ans\n\nans = solution()"
    ],
    "b576b58e760e4608bde960e52d27390f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    david, bentley, triston = symbols('david bentley triston')\n    \n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(bentley, david - 25)\n    equation3 = Eq(david + bentley + triston, 410)\n    \n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n    \n    return solutions[bentley]\n\nans = solution()"
    ],
    "b9ea86dfaf4448428f87deacbb7a0f5a": [
        "def solution():\n    distance_per_round = 1/4\n    total_distance = 3.75\n    num_rounds = total_distance / distance_per_round\n    return int(num_rounds)\n\nans = solution()"
    ],
    "d888f754042d47c097e6350ffd0bf91f": [
        "def solution():\n    ans = 3000000 + 30000 + 30\n    return ans\n\nans = solution()"
    ],
    "9a6a60ff879c4c6bbc80d88a7bee3dd1": [
        "def solution():\n    boys_to_girls_ratio = 3 / 2\n    total_boys = 42\n    total_girls = (total_boys / boys_to_girls_ratio)\n\n    return int(total_girls)\n\nans = solution()"
    ],
    "3a67a40b66334eb68ffe9d005d60fa1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of stamps each person has\n    andrew, kim, shaun = symbols('andrew kim shaun')\n    \n    # Set up the equations based on the problem statement\n    equation1 = Eq(shaun, 2 * kim)\n    equation2 = Eq(andrew, shaun - 24)\n    equation3 = Eq(andrew + kim + shaun, 256)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (andrew, kim, shaun))\n\n    return solutions[andrew]\n\nans = solution()"
    ],
    "da2e2930096a4f6e840662dbf18b6d76": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candice, doris, elly = symbols('candice doris elly')\n    \n    equation1 = Eq(elly, doris + 6)\n    equation2 = Eq(candice, 5 * elly)\n    equation3 = Eq(candice + doris + elly, 50)\n    \n    solutions = solve((equation1, equation2, equation3), (candice, doris, elly))\n    \n    return solutions[candice]\n\nans = solution()"
    ],
    "523cf0df494b4333b5fe0276768d0d6f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining symbols for variables\n    boys, girls = symbols('boys girls', integer=True)\n    girls_swim, girls_not_swim, boys_swim, boys_not_swim = symbols('girls_swim girls_not_swim boys_swim boys_not_swim', integer=True)\n    \n    # Setting up the equations based on the problem statement\n    total_students_eq = Eq(boys + girls, 1690)\n    more_boys_eq = Eq(boys, girls + 90)\n    girls_ratio_eq = Eq(girls_swim / girls_not_swim, 31 / 49)\n    boys_swim_diff_eq = Eq(boys_swim, boys_not_swim - 120)\n    \n    # Defining total girls as the sum of girls who can swim and those who cannot\n    total_girls_eq = Eq(girls, girls_swim + girls_not_swim)\n    # Defining total boys as the sum of boys who can swim and those who cannot\n    total_boys_eq = Eq(boys, boys_swim + boys_not_swim)\n    \n    # Solving the system of equations for the total number of girls and boys\n    solutions = solve((total_students_eq, more_boys_eq, total_girls_eq, total_boys_eq, girls_ratio_eq, boys_swim_diff_eq),\n                      (boys, girls, girls_swim, girls_not_swim, boys_swim, boys_not_swim))\n\n    # Calculating the total number of pupils who cannot swim\n    pupils_not_swim = solutions[girls_not_swim] + solutions[boys_not_swim]\n    \n    return pupils_not_swim\n\nans = solution()"
    ],
    "a4ee7f4c3e13434da3c2253ab814136c": [
        "def solution():\n    for num in range(10, 100):\n        if num % 6 == 0 and num % 9 == 0 and str(num).endswith('0'):\n            return num\n\nans = solution()"
    ],
    "33ccad8b36de4799bc2bc55439667b1d": [
        "def solution():\n    # Let x be the number of years until the sum of their ages is 40\n    # Let g be the current age of Geoff and s be the current age of his sister\n    # We know that g + s = 22\n    # We are looking for x such that (g + x) + (s + x) = 40\n    # Simplifying the equation we get: 2x + g + s = 40\n    \n    g_plus_s = 22\n    target_sum_age = 40\n    x = (target_sum_age - g_plus_s) / 2\n    return x\n\nans = solution()"
    ],
    "5adbbaf57fc64b529ecdb661df6d9c9e": [
        "def solution():\n    original_number = 5832\n    tens_more = 7 * 10\n    correct_answer = original_number + tens_more\n    johnny_answer = 5839\n\n    return correct_answer\n\nans = solution()"
    ],
    "900857df81614ea5855ed60ccd1e3252": [
        "def solution():\n    books_about_fish = 78\n    books_about_birds = books_about_fish - 12\n    total_books = books_about_fish + books_about_birds\n    return total_books\n\nans = solution()"
    ],
    "17091d7aa5fd4380bc6e97f0a25be60b": [
        "def solution():\n    # To find out the maximum number of different positive integers that\n    # sum up to 27, we should try to create a list of integers where the \n    # difference between each two consecutive numbers is minimized -- they\n    # should be consecutive starting from 1\n    # This way, we ensure we have the largest number of different positive integers\n\n    s = 0\n    count = 0\n    while s + (count + 1) <= 27:\n        count += 1\n        s += count\n\n    return count\n\nans = solution()"
    ],
    "08031ac64ba7489a8cb62dc6a25d5652": [
        "def solution():\n    total_length_cm = 300  # Convert 3m to cm\n    piece1 = 147\n    piece2 = 32.5\n    piece3 = 67\n\n    piece4 = total_length_cm - (piece1 + piece2 + piece3)\n\n    return piece4\n\nans = solution()"
    ],
    "e2d31838755547eba6842f1253e3ffd1": [
        "def solution():\n    return 308 - 197\n\nans = solution()"
    ],
    "741594190e264f008d30c48a942dc6ee": [
        "def solution():\n    pieces_of_paper = 18\n    interval = 3\n\n    # We add a leaf after every 3 pieces of paper, so we divide the number of papers by the interval\n    leaves_needed = pieces_of_paper // interval\n\n    return leaves_needed\n\nans = solution()"
    ],
    "b4e006ff98474bd0850725353e1e101a": [
        "def solution():\n    ans = (101 + 234 + 567) * (234 + 567 + 89) - (101 + 234 + 567 + 89) * (234 + 567)\n    return ans\n\nans = solution()"
    ],
    "3cf63d0be0824f3c84d43730e223636f": [
        "def solution():\n    from itertools import product\n    \n    # Probability for A, B, and C passing the test\n    prob_A = 0.5\n    prob_B = 0.4\n    prob_C = 0.2\n    \n    # Probability for A, B, and C failing the test\n    prob_not_A = 1 - prob_A\n    prob_not_B = 1 - prob_B\n    prob_not_C = 1 - prob_C\n    \n    # Scenarios for each person (pass or fail)\n    scenarios = {\n        'A': [prob_A, prob_not_A],\n        'B': [prob_B, prob_not_B],\n        'C': [prob_C, prob_not_C]\n    }\n    \n    # Create all possible outcomes and calculate their probabilities\n    outcomes = list(product(scenarios['A'], scenarios['B'], scenarios['C']))\n    outcome_probs = [a * b * c for a, b, c in outcomes]\n    \n    # Count how many people passed in each scenario\n    pass_counts = [sum([a == prob_A, b == prob_B, c == prob_C]) for a, b, c in outcomes]\n    \n    # Count probabilities for 0, 1, 2, and 3 people passing\n    pass_prob_count = [0]*4\n    for i, count in enumerate(pass_counts):\n        pass_prob_count[count] += outcome_probs[i]\n    \n    # Find the number of people with the highest probability of passing\n    most_likely_pass_count = pass_prob_count.index(max(pass_prob_count))\n    \n    return most_likely_pass_count\n\nans = solution()"
    ],
    "b422fcfa507f4716856239caa8b70d72": [
        "def solution():\n    ans = 1 # the first term is 1\n    for i in range(2, 11):\n        ans += (i - 1) * 2 / i\n    return ans\n\nans = solution()"
    ],
    "0049786ba1f8489782eb5b1cdec203a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of watches be 8x and the number of caps be 11x (where x is a common multiplier)\n    watches, caps = symbols('watches caps')\n    \n    # Initial ratio of watches to caps is 8:11\n    # After selling 88 caps, the new ratio becomes 12:11\n    \n    # We set up our equations based on the information given\n    initial_ratio = Eq(watches / caps, 8/11)\n    new_ratio = Eq(watches / (caps - 88), 12/11)\n    \n    # Solve the system of equations for watches and caps\n    solutions = solve((initial_ratio, new_ratio), (watches, caps))\n    \n    return solutions[watches]\n\nans = solution()"
    ],
    "b404e6302dad4073a624607030879a2e": [
        "def solution():\n    # Time taken to travel between 5 intervals is 30 minutes.\n    time_for_5_intervals = 30\n    \n    # Since the distance between each house is equal, there are 9 intervals between 10 houses.\n    total_intervals = 9\n    \n    # The time taken is directly proportional to the number of intervals.\n    # If 30 minutes is for 5 intervals, then for 9 intervals it would be:\n    time_for_9_intervals = (time_for_5_intervals * total_intervals) / 5\n\n    return time_for_9_intervals\n\nans = solution()"
    ],
    "13a6697cd8dc4ffab7300721bb11888a": [
        "def solution():\n    ans = 31 * 56\n    return ans\n\nans = solution()"
    ],
    "7ebc9c1439ea4a04bb6f8b9daa36c101": [
        "def solution():\n    for A in range(1, 10):  # since A is the first digit, it can't be 0\n        for D in range(1, 10):  # D also can't be 0 as it's the last digit\n            if A == D / 4:\n                B = A - 1\n                C = D - 1\n                if len(set([A, B, C, D])) == 4:  # make sure all digits are different\n                    number = A * 1000 + B * 100 + C * 10 + D\n                    reverse_number = D * 1000 + C * 100 + B * 10 + A\n                    if number * 4 == reverse_number:\n                        return number\n\nans = solution()"
    ],
    "26535c3c7cf044319e17743d60510a51": [
        "def solution():\n    total_length_cm = 1.05 * 100  # Convert meters to centimeters\n    # Let the length of the shorter piece be x, then the longer piece is 2x\n    # x + 2x = total_length_cm\n    shorter_piece_length = total_length_cm / 3\n    longer_piece_length = 2 * shorter_piece_length  # The longer piece is twice as long as the shorter piece\n\n    return longer_piece_length\n\nans = solution()"
    ],
    "0643ad338aa0456895d017aec0d4285d": [
        "def solution():\n    miles_driven = 560\n    miles_per_gallon = 34.5\n    cost_per_litre = 1.08\n    litres_per_gallon = 4.55\n\n    gallons_used = miles_driven / miles_per_gallon\n    litres_used = gallons_used * litres_per_gallon\n    total_cost = litres_used * cost_per_litre\n\n    return total_cost\n\nans = solution()"
    ],
    "69e6ce5788b847b9b25303af2fe5a1fb": [
        "def solution():\n    # We need to ensure that after Jack's turn, the number of coins left\n    # is a multiple of 12 (1+11) because whatever Ken picks, Jack can always\n    # pick a number to make the total picked 12.\n    # This way Jack can always leave a multiple of 12 for Ken to pick from, \n    # until Ken is forced to pick the last coin.\n\n    for jack_first_turn in range(1, 12):\n        if (2015 - jack_first_turn) % 12 == 0:\n            return jack_first_turn\n\n# Call the function to find the result\nans = solution()"
    ],
    "c59f693d386d4a73a2d62b1ebcb6185c": [
        "def solution():\n    ans = 1200031093\n    return ans\n\nans = solution()"
    ],
    "ad17dc3f8a494864b760b100079443f6": [
        "def solution():\n    count = 0\n    for hour in range(24):  # loop through every hour in a day\n        for minute in range(60):  # loop through every minute in an hour\n            # convert hour and minute to strings to count the occurrences of '4'\n            if str(hour).count('4') + str(minute).count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "be2bd70c882644a99d167bdd71a65b7e": [
        "def solution():\n    # Since the graph passes through the origin (0,0), we know b = 0\n    b = 0\n    # It also passes through the point (4,8), which means 8 = m * 4\n    m = 8 / 4\n    \n    # Return the linear equation in the form of y = mx + b\n    return f\"y = {m}x + {b}\"\n\nans = solution()"
    ],
    "90111a213be04afd824d36b70a321040": [
        "def solution():\n    # The pattern is 2 white balls followed by 1 black ball: ○○●,\n    # which makes up a cycle of 3 balls (2 white + 1 black).\n    \n    # Since there are 92 white balls, we can find out how many full cycles there are:\n    full_cycles = 92 // 2\n    \n    # Each full cycle contains 1 black ball, so:\n    black_balls = full_cycles\n    \n    # Now let’s check if there is an incomplete cycle:\n    remaining_white_balls = 92 % 2\n    \n    # In an incomplete cycle, if there is 1 remaining white ball, it doesn't complete the cycle,\n    # so no additional black balls are needed; hence, we just add the remaining white ball(s).\n    total_balls = (full_cycles * 3) + remaining_white_balls\n    \n    return total_balls\n\nans = solution()"
    ],
    "cb33eae512244d56b52f675bb43136e8": [
        "def solution():\n    # Let the age of the youngest dwarf be x.\n    # The ages of the dwarfs would form an arithmetic sequence as they were born in consecutive years:\n    # x, x+1, x+2, ..., x+6\n    # According to the question, the sum of the ages of the youngest three dwarfs is 42:\n    # x + (x+1) + (x+2) = 42\n    # 3x + 3 = 42\n    # 3x = 39\n    # x = 13 (This is the age of the youngest dwarf)\n    \n    # Since the dwarfs were born in consecutive years, the oldest one would be:\n    # x + 6\n    # Age of the oldest = 13 + 6 = 19\n    age_of_oldest = 13 + 6\n    \n    return age_of_oldest\n\nans = solution()"
    ],
    "0894ed5b3d6f4b4fb5f060190e4e433a": [
        "def solution():\n    ans = 78 + 263 - 174\n    return ans\n\nans = solution()"
    ],
    "91e7591f3e904be694c0587963279359": [
        "def solution():\n    def count_holes(num):\n        # Number of holes in each digit: 0, 4, 6, 8, 9 have holes; 1, 2, 3, 5, 7 have not\n        holes_dict = {'0': 1, '1': 0, '2': 0, '3': 0, '4': 1, '5': 0, '6': 1, '7': 0, '8': 2, '9': 1}\n        return sum(holes_dict[digit] for digit in str(num))\n    \n    ans = count_holes(2015)\n    return ans\n\nans = solution()"
    ],
    "0e998f78d8e24e0db196fc058218632c": [
        "def solution():\n    from math import gcd\n    return gcd(16, 28)\n\nans = solution()"
    ],
    "1d5d5c2cc7ed4484b0ee32dc49820fea": [
        "def solution():\n    pears = 0\n    while True:\n        pears += 1\n        if pears % 6 == 2 and (pears + 3) % 7 == 0:\n            return pears\n\nans = solution()"
    ],
    "ab6dabced7d2420b96da9161a985e3da": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)\n    initial_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "6fbfa557708a48f88080cdee949845ca": [
        "def solution():\n    original_length_cm = 10  # original length in cm\n    shortened_length_mm = 4  # shortened length in mm\n\n    # Since 1 cm = 10 mm, convert the shortened length to cm\n    shortened_length_cm = shortened_length_mm / 10\n\n    # Calculate the new length in cm\n    new_length_cm = original_length_cm - shortened_length_cm\n\n    return new_length_cm\n\nans = solution()"
    ],
    "1a6a4bcf3e384d149434758e9e9ee954": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbols for the number of stickers each person has\n    sam, peter, john = symbols('sam peter john')\n\n    # Equations based on the problem statement\n    equation1 = Eq(sam, 7/5 * peter)                        # Sam and Peter's initial ratio\n    equation2 = Eq(sam - 0.2*sam, john + 0.2*peter + 20)   # Sam gives 20% to John, and John's stickers increased by 80%\n    equation3 = Eq(john + 0.8*john, 0.2*sam + 0.2*peter)    # John's stickers increased by 80%\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (sam, peter, john))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "e8a7cdbe9f064caa8845fdc48753ccf2": [
        "def solution():\n    # Speeds given in the problem\n    speed1 = 7  # Speed for the first 420 meters\n    speed2 = 5  # Speed for the middle 620 meters\n    speed3 = 8  # Speed for the remaining distance\n\n    # Distances given in the problem\n    distance1 = 420\n    distance2 = 620\n    distance_total = 1200\n    distance3 = distance_total - (distance1 + distance2)  # Remaining distance\n\n    # Calculate the time for each part of the race\n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    time3 = distance3 / speed3\n\n    # Sum up the times to find the total time for the race\n    total_time = time1 + time2 + time3\n\n    return total_time\n\nans = solution()"
    ],
    "60f2bc1eec7c407c8a6d23e10fdfedbd": [
        "def solution():\n    current_total_score = 4 * 89\n    desired_average = 95\n    test_score_full = 100\n\n    tests_taken = 4\n    while True:\n        tests_taken += 1\n        required_score = tests_taken * desired_average - current_total_score\n        if required_score / (tests_taken - 4) <= test_score_full:\n            break\n\n    return tests_taken - 4\n\nans = solution()"
    ],
    "7463bf137d564fbabe4d8eb8c8c7ee34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the number of $10 notes and f be the number of $2 notes\n    # David has a total of 72 notes\n    t, f = symbols('t f')\n\n    # Equation representing the total number of notes\n    equation1 = Eq(t + f, 72)\n\n    # After spending 90% of the $10 notes, David is left with 10% of t\n    # After spending 75% of the $2 notes, David is left with 25% of f\n    # He is left with twice as many $10 notes as $2 notes\n    equation2 = Eq((10 * t) / 100, 2 * (25 * f) / 100)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (t, f))\n\n    # Money spent\n    spent_notes = 0.90 * 10 * solutions[t] + 0.75 * 2 * solutions[f]\n    \n    return spent_notes\n\nans = solution()"
    ],
    "8c1bb4f017184cbfae594c5cfaf4d059": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # r_a, r_b, and r_c are the rates at which hoses A, B and C fill the pool respectively.\n    r_a, r_b, r_c = symbols('r_a r_b r_c')\n\n    # We set the equations based on the given information\n    # Hose A and B together fill the pool in 9 hours\n    equation1 = Eq(9 * (r_a + r_b), 1)\n    # Hose A and C together fill the pool in 12 hours\n    equation2 = Eq(12 * (r_a + r_c), 1)\n    # Hose B and C together fill the pool in 18 hours\n    equation3 = Eq(18 * (r_b + r_c), 1)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (r_a, r_b, r_c))\n\n    # The rate when all three hoses are turned on\n    total_rate = solutions[r_a] + solutions[r_b] + solutions[r_c]\n\n    # The time it takes for all three hoses to fill the pool is the inverse of their combined rate\n    time_to_fill_pool = 1 / total_rate\n\n    return time_to_fill_pool.evalf()\n\nans = solution()"
    ],
    "53f089451f8842afb473055ab5d608e1": [
        "def solution():\n    total_length_m = 1.05  # The total length of the ribbon in meters\n    total_length_cm = total_length_m * 100  # Convert the total length to centimeters\n    \n    # Let the length of the shorter piece be x cm.\n    # Therefore, the length of the longer piece is 2x cm.\n    # The sum of the lengths of both pieces is the total length of the ribbon.\n    # x + 2x = total_length_cm\n    # 3x = total_length_cm\n    # x = total_length_cm / 3\n    \n    shorter_piece_length_cm = total_length_cm / 3\n    longer_piece_length_cm = 2 * shorter_piece_length_cm  # Twice the shorter piece length\n    \n    return longer_piece_length_cm\n\nans = solution()"
    ],
    "b6319f96909f43389019a555f34399dc": [
        "def solution():\n    total_notes = 58\n    total_value = 164\n    for num_five_dollar_notes in range(total_notes + 1):\n        num_two_dollar_notes = total_notes - num_five_dollar_notes\n        if (num_two_dollar_notes * 2 + num_five_dollar_notes * 5) == total_value:\n            return num_five_dollar_notes\n\nans = solution()"
    ],
    "d1e1ebce0b4843ca9292e8dbdda01d4d": [
        "def solution():\n    # Calculate the common difference of the arithmetic sequence\n    common_difference = 120 - 105  # The difference between consecutive terms\n\n    # Since 105 is the 7th term (t7), we use the formula t_n = t1 + (n-1)*d\n    # where t_n is the nth term, t1 is the first term, d is the common difference, and n is the term number.\n    # We know that t_100 is the 100th term which we are looking for.\n    # Therefore, we rearrange the formula to find t1: t1 = t7 - (7-1)*d\n    first_term = 105 - (7 - 1) * common_difference\n\n    # Now we find t_100 using the formula above: t_100 = t1 + (100-1)*d\n    nth_term = first_term + (100 - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "3ec3a596e66c4dfcb4ea91b63a5bf969": [
        "def solution():\n    # Let's denote the cost of one muffin as x.\n    # Then the cost of one cupcake is 3x.\n    # Cellina spends (5/9) of her money on 36 cupcakes and 32 muffins.\n    # So, 36 cupcakes cost 36 * 3x = 108x and 32 muffins cost 32 * x = 32x.\n    # The total amount spent on cupcakes and muffins is 108x + 32x = 140x.\n    \n    # She then spends (1/6) of her money to buy more cupcakes.\n    # We know that the total amount spent on all the cupcakes is $187.50\n    # So, 108x + (1/6) * total_money = 187.5\n    \n    # Now let's find the total amount of money Cellina had initially.\n    # (5/9) * total_money = 140x\n    # Combining the equations, we have:\n    # (5/9) * total_money + (1/6) * total_money = 187.50\n    # Solving this we get the value of x, and subsequently we can find how much Cellina spent on muffins.\n\n    total_money = 187.50 / (5/9 + 1/6)\n    x = (5/9 * total_money) / 140\n\n    money_spent_on_muffins = 32 * x\n\n    return round(money_spent_on_muffins, 2)\n\nans = solution()"
    ],
    "289652248f414fe9bbafc2f88b401174": [
        "def solution():\n    # Since there are 3 different colors, we can pick at most one from each color\n    # without being sure that we have 2 of the same color.\n    # Therefore, by taking one more, we are sure to have at least 2 of the same color.\n    # This gives us 1 (red) + 1 (yellow) + 1 (blue) + 1 (to be sure of a pair) = 4.\n    \n    fewest_markers = 3 + 1\n    return fewest_markers\n\nans = solution()"
    ],
    "cc22edf7a7fd4aa79216b432dcbeac61": [
        "def solution():\n    a = (14 - 8) / 3\n    return a\n\nans = solution()"
    ],
    "e2673569a0b943b292503bf53ce7b3a2": [
        "def solution():\n    return 894 // 3\n\nans = solution()"
    ],
    "a7840b9a2b4b4d80bcfb1955e50dedb1": [
        "def solution():\n    return sum(range(1, 10)) + sum(range(4, 9))\n\nans = solution()"
    ],
    "fc35d0defe2942ffad92505706ccc8ee": [
        "def solution():\n    # Since each box contains a multiple of 2 marbles and at least 2 marbles,\n    # we will consider the least even numbers. Also, two boxes can contain the same number of marbles.\n    # We'll start counting from 2 as the smallest multiple of 2 and add unique even numbers for each box,\n    # repeating one of them once, to get the smallest sum.\n\n    marbles = [2 * i for i in range(1, 10)]  # Smallest even multiples for 9 boxes\n    marbles.append(marbles[-1])  # Repeat the last number for the 10th box, as two boxes are the same.\n    return sum(marbles)\n\nans = solution()"
    ],
    "eab847de393a4cc89be122fdacf06c1b": [
        "def solution():\n    total_pigeons = 75\n    total_cages = 20\n    \n    pigeons_in_largest_cage = (total_pigeons + total_cages - 1) // total_cages\n\n    return pigeons_in_largest_cage\n\nans = solution()"
    ],
    "4f9c4a2d52664632815cca87ff3639cd": [
        "def solution():\n    parterres = 1007\n    sprinklers = parterres - 1  # One less sprinkler than the number of parterres, since it's between each pair\n    return sprinklers\n\nans = solution()"
    ],
    "13b735246ec440b287eb3433e89d8de3": [
        "def solution():\n    # Convert mixed fraction of papaya mass to improper fraction\n    papaya_mass = 2 + 1/4\n    # Calculate mass of jackfruit\n    jackfruit_mass = 3 * papaya_mass\n    # Calculate total mass\n    total_mass = papaya_mass + jackfruit_mass\n    # James's error is in the multiplication and conversion to whole number\n    error = \"Multiplication and conversion to whole number\"\n    return {\"error\": error, \"correct_total_mass\": total_mass}\n\nans = solution()"
    ],
    "df5ddf6fab1640afbbe79fdc2c9c6b0d": [
        "def solution():\n    steps = 1991\n    while True:\n        steps += 1\n        if str(steps) == str(steps)[::-1]:\n            return steps - 1991\n\nans = solution()"
    ],
    "f621eb20ae1b443e9decb28c81cacff9": [
        "def solution():\n    half_way = (387 + 729) / 2\n    return half_way\n\nans = solution()"
    ],
    "8f05ca5aac6947c0a578b4f78816fdeb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_length = symbols('total_length')\n\n    first_day = 8\n    second_day = (1/6) * total_length + 4\n    total_paved = (5/12) * total_length\n\n    equation = Eq(first_day + second_day, total_paved)\n\n    solution = solve(equation, total_length)\n\n    return solution[0]\n\nans = solution()"
    ],
    "411dbd979ec64b9198f41e36f93de415": [
        "from itertools import permutations\n\ndef solution():\n    digits = [3, 4, 5]\n    perms = permutations(digits, 3)  # Get all permutations of length 3\n    return len(list(perms))\n\nans = solution()"
    ],
    "dbcf24f4b4254940a364df67ea2a66dd": [
        "def solution():\n    # Justin had 5/9 of his collection left after giving away 440 bottle caps\n    # Let x be the total number of bottle caps he had initially\n    # Then the number of bottle caps he had left is (5/9)x\n    # The number of bottle caps he gave away is x - (5/9)x = (4/9)x\n    # According to the problem, (4/9)x = 440\n    \n    # Now calculate the initial number of bottle caps\n    x = 440 * (9/4)  # Divide 440 by 4/9 to get the initial amount\n    \n    return int(x)  # Convert the result to an integer, if necessary\n\nans = solution()"
    ],
    "a6f199354188491987e033f7760fc3d5": [
        "def solution():\n    perimeter = (144 + 204) * 2\n    distance_between_wheat = perimeter / (116 - 1)\n    return distance_between_wheat\n\nans = solution()"
    ],
    "3722f385e5304408b4bd51d4538ed104": [
        "def solution():\n    num = 35\n    while True:\n        str_num = str(num)\n        digits_sum = sum(int(digit) for digit in str_num)\n        if str_num[-2:] == '35' and digits_sum == 35:\n            return num\n        num += 35\n\nans = solution()"
    ],
    "ee9f3d0764634811a0757f003abad19d": [
        "def solution():\n    heights = [102, 98, 120, 80]\n    average_height = sum(heights) / len(heights)\n    return average_height\n\nans = solution()"
    ],
    "7b38d775bba24657ba681d25822af411": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Variables to represent the number of stickers each person initially has\n    alexis, mary, charlotte = symbols('alexis mary charlotte')\n\n    # Mary has 7/5 as many stickers as Alexis\n    equation1 = Eq(mary, (7/5) * alexis)\n\n    # Marry and Alexis each gave 20% of their stickers to Charlotte, which is 0.2 times their number of stickers\n    equation2 = Eq(mary - 0.2 * mary, mary - 0.2 * alexis - 20)  # Mary had 20 more stickers than Charlotte in the end\n    equation3 = Eq(charlotte + 0.2 * (alexis + mary), 1.8 * charlotte)  # Charlotte's stickers increased by 80%\n\n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3), (alexis, mary, charlotte))\n\n    return solutions[alexis]\n\nans = solution()"
    ],
    "2c1659a425074c80b8d88dda965c59d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sunny_days, rainy_days = symbols('sunny_days rainy_days')\n    equation1 = Eq(sunny_days + rainy_days, 8)  # total number of days\n    equation2 = Eq(20 * sunny_days + 12 * rainy_days, 112)  # total number of pine nuts\n\n    solutions = solve((equation1, equation2), (sunny_days, rainy_days))\n    return solutions[rainy_days]\n\nans = solution()"
    ],
    "a0d71a6e29644023a0cc17a608bc01dc": [
        "def solution():\n    # In a knockout tournament, each round eliminates half of the players.\n    # With four players, we need two rounds to go from four to two players,\n    # and one more round to determine the winner from the last two players.\n    # Hence, at least 3 rounds must be played to determine a winner.\n    num_rounds = 3\n    return num_rounds\n\nans = solution()"
    ],
    "f994d8dfd7f44217b9637c5e8ba447d8": [
        "def solution():\n    first_question_correct = 10\n    second_question_correct = 15\n    both_questions_correct = 7\n\n    one_question_correct = first_question_correct + second_question_correct - both_questions_correct\n\n    return one_question_correct\n\nans = solution()"
    ],
    "daccc8a42fc0479db52cec10235601e6": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime('4/4/2023', '%d/%m/%Y')\n    end_date = datetime.strptime('18/5/2023', '%d/%m/%Y')\n\n    return (end_date - start_date).days\n\nans = solution()"
    ],
    "c53620b9ca634a889e36b3bf16163ca2": [
        "def solution():\n    # Initialize minimum cost to a large number\n    min_cost = float('inf')\n    \n    # Prices in pence for clarity and to work with integers\n    price_single = 15\n    price_pair = 28\n    price_pack = 60\n    \n    # Iterate through the possible combinations of single, pair, and pack purchases\n    for singles in range(18):\n        for pairs in range(9):\n            for packs in range(4):\n                total_bottles = singles + (pairs * 2) + (packs * 5)\n                \n                # Check if the current combination buys exactly 17 bottles\n                if total_bottles == 17:\n                    # Calculate the cost for the current combination\n                    cost = (singles * price_single) + (pairs * price_pair) + (packs * price_pack)\n                    \n                    # Update the minimum cost if the current cost is lower\n                    if cost < min_cost:\n                        min_cost = cost\n    \n    # Convert pence to pounds for the final answer\n    min_cost_in_pounds = min_cost / 100\n    \n    return min_cost_in_pounds\n\nans = solution()"
    ],
    "3059ea77d08247578ee3a70a3f475405": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rachel, alice = symbols('rachel alice')\n    \n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq((rachel - 8) / 3, alice - 8)\n    \n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    return solutions[rachel] + solutions[alice]\n\nans = solution()"
    ],
    "4f3b48792a094028b1bc267e22a30835": [
        "def solution():\n    speed = 42  # Speed of the train in meters per second\n    time = 5    # Time to pass the tree in seconds\n\n    # The length of the train is equal to the distance covered while passing the tree\n    length = speed * time\n\n    return length\n\nans = solution()"
    ],
    "47562186606a4d038d9527452b08ffc2": [
        "def solution():\n    a, b = 1, 1\n    while True:\n        a, b = b, a + b\n        if a == 21:  # Stop when the penultimate number is reached\n            break\n    return b\n\nans = solution()"
    ],
    "bfacb76c25624bfc8d5d2c06215023ad": [
        "def solution():\n    expr = \"285+15/5-2\"\n    ops = ['+', '-', '/', '*']\n    results = set()\n\n    for i in range(len(expr)):\n        for j in range(i+2, len(expr)):\n            if expr[i] in ops or expr[j-1] in ops:\n                continue\n            expr_with_bracket = expr[:i] + '(' + expr[i:j] + ')' + expr[j:]\n            results.add(eval(expr_with_bracket))\n            \n            for m in range(j+2, len(expr)):\n                for n in range(m+2, len(expr)):\n                    if expr[m] in ops or expr[n-1] in ops:\n                        continue\n                    expr_double_bracket = expr_with_bracket[:m] + '(' + expr_with_bracket[m:n] + ')' + expr_with_bracket[n:]\n                    results.add(eval(expr_double_bracket))\n\n    return len(results)\n\nans = solution()"
    ],
    "5907fd55c3fc43edb065e669513c11e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of mushrooms gathered in the second hour.\n    x = symbols('x')\n    \n    # Setup the equation based on the problem statement\n    equation = Eq(x + (x + 26), 40)\n\n    # Solve the equation\n    mushrooms_in_second_hour = solve(equation, x)\n\n    return mushrooms_in_second_hour[0]\n\nans = solution()"
    ],
    "5e3f58e8aa7b463281a06313c58c9dfc": [
        "def solution():\n    # Given values\n    cost_towel = 10\n    cost_brush = 3\n    total_spent = 59\n    max_spent_on_brushes = 10\n    \n    # Since Bud spends less than £10 on brushes, we need to find the number of brushes\n    # that can be bought with less than £10 and also satisfy the equation:\n    # cost_towel*towels + cost_brush*brushes = total_spent\n    for brushes in range(max_spent_on_brushes // cost_brush):\n        towels = (total_spent - (cost_brush * brushes)) / cost_towel\n        if towels.is_integer():\n            return brushes\n\nans = solution()"
    ],
    "1f65bc2d548c462284458547726c98be": [
        "def solution():\n    final_number = 71\n    initial_number = (final_number - 8) / 7\n    return initial_number\n\nans = solution()"
    ],
    "2a082a4e041f4b3e973245a4c33b3b27": [
        "def solution():\n    from fractions import Fraction\n\n    return Fraction('0.49').limit_denominator()\n\nans = solution()"
    ],
    "2032d412937a4167a615ecb8aa60b3ea": [
        "def solution():\n    seventh_term = 105\n    common_difference = 120 - seventh_term\n\n    nth_term = seventh_term + (100 - 7) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "f60e137f7250477d8b286d3f212c854b": [
        "def solution():\n    total_days = 5\n    total_bears = 35\n    daily_increase = 2\n    \n    # Let the number of bears made on the first day be x.\n    # Then the total number of bears after 5 days can be described by the arithmetic series:\n    # x + (x + 2) + (x + 4) + (x + 6) + (x + 8) = 35\n    # The sum of an arithmetic series with n terms is given by: n/2 * (first_term + last_term)\n    # So we can write:\n    # 5/2 * (2*x + 8) = 35\n    # Solving for x gives us the number of bears made on the first day\n    first_term = (total_bears * 2 / total_days - 8) / 2\n    \n    # Now we can find the number of bears made on the fifth day by adding 4 days worth of increases:\n    fifth_day_bears = first_term + 4 * daily_increase\n    \n    return int(fifth_day_bears)\n\nans = solution()"
    ],
    "c762956fba3241bd967d57b33577e2de": [
        "def solution():\n    count = 0\n    for i in range(1, 10):  # First digit cannot be 0, so start from 1 \n        for j in range(10):  # Second digit can be any digit, including 0\n            for k in range(10):  # Third digit can be any digit, including 0\n                if i != j and i != k and j != k and i in [0, 1, 8] and j in [0, 1, 8] and k in [0, 1, 8]:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "a329051d839b463a826c9d78e15a0b08": [
        "def solution():\n    remaining_fraction = 5 / 9\n    given_away = 440\n    original_amount = given_away / (1 - remaining_fraction)\n\n    return int(original_amount)\n\nans = solution()"
    ],
    "66a11fd054514f65b3baf9ede59874a5": [
        "def solution():\n    ans = 262 + 8\n    return ans\n\nans = solution()"
    ],
    "49922fe7ff9a40c38d907ed0e51522ca": [
        "def solution():\n    miles_per_day = 23\n    days_in_two_weeks = 14\n    total_miles = miles_per_day * days_in_two_weeks\n    return total_miles\n\nans = solution()"
    ],
    "f9992ec9b0a34d969a70763f33c68a29": [
        "def solution():\n    sales_tax_rate = 7.5 / 100\n    sales_tax_paid = 30\n\n    computer_price = sales_tax_paid / sales_tax_rate\n\n    return computer_price\n\nans = solution()"
    ],
    "39ac38c32dc74df58ea6b0d18c06ad13": [
        "def solution():\n    total_days = 8\n    total_nuts = 112\n    sunny_nuts = 20\n    rainy_nuts = 12\n\n    # Let the number of rainy days be r. Then, the number of sunny days is total_days - r.\n    # We setup the equation: sunny_nuts * (total_days - r) + rainy_nuts * r = total_nuts\n    # We solve the equation for r:\n\n    r = (total_nuts - sunny_nuts * total_days) / (rainy_nuts - sunny_nuts)\n\n    return r\n\nans = solution()"
    ],
    "aa18065f01ed471dbddb2b83716b2ed7": [
        "def solution():\n    percentage = (3/10) / (6/7) * 100\n    return percentage\n\nans = solution()"
    ],
    "1db0cce1e16144579673d8e8a9fc0654": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    \n    # Initial condition: boys = girls - 30\n    initial_condition = Eq(boys, girls - 30)\n    \n    # After some boys and girls leave, the remaining amounts are equal\n    # Remaining boys: boys - (3/5)*boys\n    # Remaining girls: girls - (5/8)*girls\n    # The equation is (boys - (3/5)*boys) = (girls - (5/8)*girls)\n    remaining_condition = Eq(boys - (3/5)*boys, girls - (5/8)*girls)\n    \n    # Solve the system of equations to find the number of boys\n    solutions = solve((initial_condition, remaining_condition), (boys, girls))\n    \n    return solutions[boys]\n\nans = solution()"
    ],
    "304401f32f204704929d05f5f2f6f8b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    frogs_initial, dragonflies_initial = symbols('frogs_initial dragonflies_initial')\n\n    equation1 = Eq(frogs_initial - dragonflies_initial, 9)\n    equation2 = Eq(frogs_initial - 11, dragonflies_initial - 10)\n\n    solutions = solve((equation1, equation2), (frogs_initial, dragonflies_initial))\n\n    return solutions[frogs_initial]\n\nans = solution()"
    ],
    "7c10a4083da5483c963882fa31bda8ad": [
        "def solution():\n    ans = 300 - 9 - 19 - 29 - 39 - 49 - 59\n    return ans\n\nans = solution()"
    ],
    "3e007fd230a249ff8d05a19fcfe583ba": [
        "def solution():\n    expressions = [\n        # one pair of brackets\n        \"(285+15)/5-2\",\n        \"(285+15)/(5-2)\",\n        \"285+(15/5)-2\",\n        \"285+(15/(5-2))\",\n        \"285+((15/5)-2)\",\n        \"285+(15/(5-2))\",\n        # two pairs of brackets\n        \"(285+(15/5))-2\",\n        \"(285+15)/(5-2)\"\n    ]\n    \n    results = set()\n    for expr in expressions:\n        results.add(eval(expr))\n    \n    ans = len(results)\n    return ans\n\nans = solution()"
    ],
    "d17c4969cf134fab95adbf60e4d9650c": [
        "def solution():\n    amy = 26\n    john = 8\n    s = (amy - john) // 2\n    return s\n\nans = solution()"
    ],
    "e7ddf473a2ae4816b3668ad9956ebcfa": [
        "def solution():\n    # Equation to solve: (24 - x) / 4 = 4\n    # To find x, we can rearrange the equation as follows:\n    # 4 * 4 = 24 - x\n    # 16 = 24 - x\n    # x = 24 - 16\n    x = 24 - 16\n    \n    # Resulting value of the blank space\n    ans = x\n    return ans\n\nans = solution()"
    ],
    "c475b1643de744428b44276a9212a842": [
        "def solution():\n    # Work rates for each pair working together\n    rate_AB = 1 / 3\n    rate_BC = 1 / 4\n    rate_AC = 1 / 8\n\n    # Sum of the individual rates of A, B, and C\n    rate_total = rate_AB + rate_BC + rate_AC\n\n    # The rate total is twice the sum of individual rates, we divide it by 2 to find the sum\n    # of the individual rates since the pairs are counted twice in rate_total\n    individual_rate_sum = rate_total / 2\n\n    # Time taken by A, B, and C working together\n    time_ABC = 1 / individual_rate_sum\n\n    return time_ABC\n\nans = solution()"
    ],
    "d188d39b891542928d1912e7274a2caa": [
        "def solution():\n    # Let x be the number of stickers Alexis had originally\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    # Using the given information\n    # Marry had 7/5 times the stickers Alexis had\n    marry_stickers = (7/5) * x\n\n    # Both gave 20% of their stickers to Charlotte\n    marry_gave = 0.20 * marry_stickers\n    alexis_gave = 0.20 * x\n\n    # Charlotte’s stickers increased by 80%\n    # This 80% increase is the result of the sum of stickers given to her\n    charlotte_stickers = (marry_gave + alexis_gave) / 0.80\n\n    # Marry had 20 more stickers than Charlotte at the end\n    eq = Eq(marry_stickers - marry_gave - (charlotte_stickers + charlotte_stickers * 0.20), 20)\n\n    # Solve for x, the original number of stickers Alexis had\n    alexis_original = solve(eq, x)[0]\n\n    return alexis_original\n\nans = solution()"
    ],
    "eb34430f7cb249a8a572783eee511d5a": [
        "def solution():\n    jack_cards = 42\n    tom_cards = 38\n    james_cards = 3 * (jack_cards + tom_cards)\n    return james_cards\n\nans = solution()"
    ],
    "d7ded10e6b6742babab86ac9a55feb15": [
        "def solution():\n    return 11.38 / 100\n\nans = solution()"
    ],
    "142a0e7cf7264398809cd19740d822d4": [
        "def solution():\n    return 9678 * 8\n\nans = solution()"
    ],
    "5474f73e5ab6431890df2e54e821b742": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the unknown amount of 15% sugar water\n    x = symbols('x')\n\n    # Equation representing the sugar concentration in the final mixture\n    # (Amount of sugar in 45% solution + Amount of sugar in 15% solution) /\n    # (Total volume of the mixture) = 25% concentration\n    equation = Eq((2 * 0.45 + x * 0.15) / (2 + x), 0.25)\n\n    # Solve for x\n    result = solve(equation, x)\n\n    return result[0]\n\nans = solution()"
    ],
    "063df5600f0440a196ad7fccf9a7bf8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define two symbols for the number of coins each person has\n    johnson, vicky = symbols('johnson vicky')\n\n    # Now we create two equations based on the problem statement\n    total_coins_eq = Eq(johnson + vicky, 48)  # They have 48 coins in total\n    vicky_after_eq = Eq(vicky + 8, johnson - 2)  # If Johnson gives Vicky 8 coins\n\n    # We solve the equations for the number of coins each person has\n    solutions = solve((total_coins_eq, vicky_after_eq), (johnson, vicky))\n\n    # We return the number of coins Johnson has\n    return solutions[johnson]\n\nans = solution()"
    ],
    "300d9dec8c7842cfa4010c28ded862c2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'c' be the number of candies and 'k' be the number of kids\n    c, k = symbols('c k')\n\n    # First scenario: k kids eat 18 candies each -> k * 18 candies. We need 12 more candies -> k * 18 + 12 = c\n    equation1 = Eq(k * 18 + 12, c)\n\n    # Second scenario: (k + 2) kids eat 15 candies each -> (k + 2) * 15 candies. It's just enough -> (k + 2) * 15 = c\n    equation2 = Eq((k + 2) * 15, c)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (c, k))\n\n    return solutions[c]\n\nans = solution()"
    ],
    "7b23b760c2484da8af4bc6eead1035fc": [
        "def solution():\n    boys = 42\n    boys_to_girls_ratio = 3 / 2\n    girls = (boys / 3) * 2  # Using the inverse of the boy-to-girl ratio to find number of girls\n\n    return int(girls)\n\nans = solution()"
    ],
    "0774e88f23d347fc960a7df67aa5cea5": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 2018):\n        total_sum += int('2' * i)\n\n    last_five_digits = str(total_sum)[-5:]\n    sum_of_last_five = sum([int(digit) for digit in last_five_digits])\n\n    return sum_of_last_five\n\nans = solution()"
    ],
    "0cfb180ff80343978b552cedc1149839": [
        "def solution():\n    result = (77 // 7) - 6\n    return result\n\nans = solution()"
    ],
    "7e9903ea9c5d4ad4b4d9e47668802818": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    david, eugene = symbols('david eugene')\n    \n    equation1 = Eq(david, 3 * eugene)\n    equation2 = Eq(david - eugene, 14)\n    \n    solutions = solve((equation1, equation2), (david, eugene))\n    \n    total_cupcakes = solutions[david] + solutions[eugene]\n    \n    return total_cupcakes\n\nans = solution()"
    ],
    "f1a2fc61d2954912aabcdce67bec8fd1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Represent Sam's cookies as 's' and Tim's cookies as 't'\n    s, t = symbols('s t')\n\n    # Create the equations based on the problem\n    equation1 = Eq(s + t, 1170)  # Total cookies together\n    equation2 = Eq(s - s/4 + 663, t + t/5)  # After eating and buying cookies\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (s, t))\n\n    # Calculate the number of cookies Sam ate\n    cookies_eaten = solutions[s] / 4\n\n    return cookies_eaten\n\nans = solution()"
    ],
    "699981dcd6d84d42b6e018723ba6a619": [
        "def solution():\n    num_players = 4\n    # In each round, half of the players are knocked out\n    # Since we need one winner, we can use logarithm with base 2 to find out how many times we need to reduce the players by half\n    rounds_needed = math.ceil(math.log2(num_players))\n    return rounds_needed\n\nans = solution()"
    ],
    "3d69ea36244c47f49f012029d94f587c": [
        "def solution():\n    total_cost = 11.4\n    beef_weight = 0.6\n    cost_per_kilogram = total_cost / beef_weight\n    return cost_per_kilogram\n\nans = solution()"
    ],
    "b4f91c464064460aa19ddf1c6a62ab91": [
        "def solution():\n    daily_pick = 24 / 6\n    total_pick = daily_pick * 8\n    return total_pick\n\nans = solution()"
    ],
    "a02bf655141845c2bd2c46d349316684": [
        "def solution():\n    first_question_correct = 10\n    second_question_correct = 15\n    both_correct = 7\n\n    only_one_correct = (first_question_correct - both_correct) + (second_question_correct - both_correct)\n\n    return only_one_correct\n\nans = solution()"
    ],
    "c9845a2160b54fd095573f962d57e562": [
        "def solution():\n    jerry_rate = 1 / 18\n    combined_rate = 1 / 6\n    tom_rate = combined_rate - jerry_rate\n    tom_time = 1 / tom_rate\n    return tom_time\n\nans = solution()"
    ],
    "7082213a798d483d975ec38c9264a87a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Defining the symbols for Rachel's and Alice's candies\n    r, a = symbols('r a')\n    \n    # Creating symbolic equations based on the problem statement\n    # Equation for when Rachel gives Alice 10 pieces of candy\n    equation1 = Eq(r - 10, a + 10)\n    \n    # Equation for when they both eat 8 pieces of candy and Rachel has 3 times as many as Alice\n    equation2 = Eq((r - 8) / 3, a - 8)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (r, a))\n    \n    # Summing up Rachel's and Alice's candies to give the total initially\n    total_candies = solutions[r] + solutions[a]\n    return total_candies\n\nans = solution()"
    ],
    "e308e1fd22e34cdb9709c55c86942efe": [
        "def solution():\n    sissy_candy = 9\n    lily_candy = 7\n    total_candy = sissy_candy + lily_candy\n    return total_candy\n\nans = solution()"
    ],
    "5bd506abd39a478abeb0aa9d9fdb559b": [
        "def solution():\n    # Let x be the number of stamps Sally gave to Ting.\n    # Then, Sally has (40 - x) stamps left and Ting has (32 + x) stamps.\n\n    # The final ratio is 1:2, so we have the equation:\n    # (40 - x) / (32 + x) = 1/2\n\n    # Solve for x:\n    # 2 * (40 - x) = (32 + x)\n    # 80 - 2x = 32 + x\n    # 80 - 32 = 3x\n    # 48 = 3x\n    # x = 48 / 3\n    x = 48 / 3\n\n    # Thus, the number of stamps Ting has in the end is:\n    ting_stamps_end = 32 + x\n    \n    return ting_stamps_end\n\nans = solution()"
    ],
    "3626f191924141a1b2eafb54a9e067f3": [
        "def solution():\n    packet_price = 4\n    budget = 20\n    sweets_per_packet = 8\n\n    # Calculate number of packets that can be bought with the budget\n    num_packets_bought = budget // packet_price\n\n    # Calculate the total number of sweets from the packets\n    total_sweets_from_packets = num_packets_bought * sweets_per_packet\n\n    # Calculate the free sweets earned\n    free_sweets = (num_packets_bought // 2) * 1  # one sweet free for every 2 packets\n\n    # Combining sweets from packets and free sweets\n    total_sweets = total_sweets_from_packets + free_sweets\n\n    return total_sweets\n\nans = solution()"
    ],
    "24fc3628e5b54a6b862cebd30089e10d": [
        "def solution():\n    # Sort the candy distribution in ascending order; at least one piece per child\n    # Remaining candies after giving each child one candy\n    remaining_candies = 88 - 8  \n    # Number of children\n    children = 8  \n    # Distribute the remaining candies, incrementally (1,2,3,...), to find the least\n    # number for the child with the most candies\n    for i in range(children):\n        # Distribute candies one by one until run out\n        least_candies = i + 1\n        remaining_candies -= least_candies\n        \n        # If remaining candies less than or equal to zero, break the loop\n        if remaining_candies <= 0:\n            break\n\n    # The least number of candies that the child with the most can get is the number\n    # of children (since each gets at least one) plus the sum of an arithmetic sequence\n    # from 1 to the number of children minus the absolute value of the remaining candies,\n    # because it represents the last value distributed\n    least_most_candies = children + i * (i + 1) // 2 + abs(remaining_candies)\n\n    return least_most_candies\n\nans = solution()"
    ],
    "02ae9d804ee04428807ccf0347735e1f": [
        "def solution():\n    original_pink = 5\n    total_counters = 5 + 7 + 8\n    desired_probability = (original_pink / total_counters) * 2\n\n    extra_counters = 0\n    while True:\n        new_probability = original_pink / (total_counters + extra_counters)\n        if new_probability >= desired_probability:\n            break\n        extra_counters += 1\n\n    return extra_counters\n\nans = solution()"
    ],
    "6ff1aeeafc744e33a64e02e90286d5c2": [
        "def solution():\n    decimal_number = 0.4 - (1 / 4)\n    return decimal_number\n\nans = solution()"
    ],
    "3afd6466bf0841adb2f6d6bd84bf3bad": [
        "def solution():\n    from math import factorial\n\n    fact_16 = factorial(16)\n    zero_count = 0\n\n    while fact_16 % 10 == 0:\n        zero_count += 1\n        fact_16 //= 10\n\n    return zero_count\n\nans = solution()"
    ],
    "e7f93b20fa1949a5b96d163190fe511f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Initial condition: boys = girls + 40% of girls\n    initial_condition = Eq(boys, girls + 0.40 * girls)\n\n    # After leaving: boys - 24 = (girls - 24) + 50% of (girls - 24)\n    after_leaving_condition = Eq(boys - 24, (girls - 24) + 0.50 * (girls - 24))\n\n    solutions = solve((initial_condition, after_leaving_condition), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "424f5f08f14e449d86908c4063ea4d54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(5 * x + 7, 47)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "09a7409bcc7b41bab933d472b6cf9c72": [
        "def solution():\n    # Cindy has to make sure to get at least 2 pairs in the same color.\n    # In the worst-case scenario using the pigeonhole principle, she might take:\n    # 3 different colors first (one of each), then\n    # She has to take 3 more socks which might still be all of different colors (one pair of each color).\n    # At this point, there is still no guarantee to have 2 pairs of the same color.\n    # So finally, for the 7th sock she picks, it must ensure a pair since it's impossible\n    # to have a 7th unique sock without creating a pair.\n    # Therefore, with the 7th sock, she is guaranteed to have at least 2 pairs of the same color.\n    \n    # Cindy must take out at least 7 socks to ensure 2 pairs of the same color.\n    return 7\n\nans = solution()"
    ],
    "ec10bd49f8c6457cb449008b7df6d3b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let's assume x is the original number of cupcakes and muffins Demi had\n    x = symbols('x')\n\n    # Equation representing the situation after selling the cupcakes and muffins\n    # We know that muffins left (x - 12) is twice the number of cupcakes left (x - 60)\n    # x - 12 = 2 * (x - 60)\n    equation = Eq(x - 12, 2 * (x - 60))\n\n    # Solve the equation for x\n    original_number = solve(equation, x)\n\n    # Since the number of cupcakes and muffins are the same initially, we multiply by 2 to get the total\n    return original_number[0] * 2\n\nans = solution()"
    ],
    "d27388e49bb147658b5c5f6726146dbd": [
        "def solution():\n    shanghai_to_la = 12.25\n    la_to_shanghai = 12.25 + 1.5\n\n    round_trip_time = shanghai_to_la + la_to_shanghai\n\n    return round_trip_time\n\nans = solution()"
    ],
    "460949f85e3c4effbfebde69b6a70325": [
        "def solution():\n    # Distance covered in the first 2 hours at 40 km/h\n    distance_first_part = 2 * 40\n    \n    # Remaining distance covered at 70 km/h\n    distance_second_part = 280\n    \n    # Total distance covered\n    total_distance = distance_first_part + distance_second_part\n    \n    # Time taken to cover the remaining distance at 70 km/h\n    time_second_part = distance_second_part / 70\n    \n    # Total time taken for the trip\n    total_time = 2 + time_second_part\n    \n    # Average speed for the whole trip (total distance/total time)\n    average_speed = total_distance / total_time\n    \n    return average_speed\n\nans = solution()"
    ],
    "4432e80fba244f3683780a9b58ec36db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, d = symbols('a d')\n\n    eq1 = Eq(a + 8*d, a + 14*d + 18)\n    eq2 = Eq(a + 19*d + a + 11*d, 88)\n\n    sol = solve((eq1, eq2), (a, d))\n\n    a_val = sol[a]\n    d_val = sol[d]\n\n    nth_term = a_val + 31*d_val\n\n    return nth_term\n\nans = solution()"
    ],
    "68de1a3c2c7a42e5878f6678167e988b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eddi, wiya = symbols('eddi wiya')\n    original_ratio = Eq(eddi / wiya, 3/2)\n    new_ratio = Eq((eddi + 4) / wiya, 8/5)\n\n    solutions = solve((original_ratio, new_ratio), (eddi, wiya))\n    \n    return solutions[wiya]\n\nans = solution()"
    ],
    "28ed05faea8a41e59403eb56b72c9a55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the pocket money Helen receives each day\n    x = symbols('x')\n    \n    # George receives x + 3 each day\n    # Both spend 5 a day, so Helen saves x - 5 and George saves (x + 3) - 5 = x - 2\n    # When Helen saves 60, George saves 60 + 90\n    # We can create an equation based on these relationships\n\n    equation = Eq((x - 5) * (60 / (x - 5)), (x - 2) * ((60 + 90) / (x - 2)))\n    \n    # Solve the equation\n    solution = solve(equation, x)\n\n    # Helen receives the smaller amount of pocket money\n    helen_pocket_money = min(solution)\n\n    return helen_pocket_money\n\nans = solution()"
    ],
    "47b5be5fc2a54717be3e247384b899b4": [
        "def solution():\n    total_students = 37\n    sport_class_students = 18\n    reading_class_students = 22\n\n    # Using the Inclusion-Exclusion principle\n    both_classes_students = sport_class_students + reading_class_students - total_students\n\n    return both_classes_students\n\nans = solution()"
    ],
    "76b97ba68b034e2aabd4b14679196416": [
        "def solution():\n    # Calculate the sum of the first part of the series from 1 to 30.\n    sum_first_part = sum(range(1, 31))\n    # Calculate the sum of the second part of the series from 29 down to 1.\n    # Since the series 29 to 1 is just the reverse of 1 to 29, it can be calculated in the same way.\n    sum_second_part = sum(range(1, 30))\n    # The total sum is the sum of both parts.\n    total_sum = sum_first_part + sum_second_part    \n    return total_sum\n\nans = solution()"
    ],
    "f765b179fd664d7283eb3748010a8192": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10\n    no_sevens = 8 * 9 * 9\n    \n    at_least_two_sevens = total_three_digit_numbers - no_sevens\n    \n    return at_least_two_sevens\n\nans = solution()"
    ],
    "f1b52139fff84b708e70c8798718411d": [
        "def solution():\n    # Number of penpals\n    total_penpals = 11\n    # Total pages written\n    total_pages = 38\n    \n    # Let's hypothesize she wrote 4-page letters to all her penpals\n    # Then calculate the difference with the actual total_pages\n    difference = (4 * total_penpals) - total_pages\n    \n    # Since each switch from a 4-page letter to a 3-page letter reduces the total page count by 1,\n    # the difference is equal to the number of 3-page letters she wrote\n    num_3_page_letters = difference\n    \n    return num_3_page_letters\n\nans = solution()"
    ],
    "3934fba87a6f49588fd973f95f1b42fa": [
        "def solution():\n    minutes = 180\n    hours = minutes / 60\n    return hours\n\nans = solution()"
    ],
    "51d10a94ff2b458f8e10c3ad1c546dd9": [
        "def solution():\n    # Calculate the distance for the first 2 hours\n    distance_first_2_hours = 2 * 40  # speed * time\n\n    # Given remaining distance\n    remaining_distance = 280\n\n    # Total distance driven by Linda\n    total_distance = distance_first_2_hours + remaining_distance\n\n    # Time taken to cover the remaining distance at 70 km/h\n    time_remaining_distance = remaining_distance / 70  # distance / speed\n\n    # Total time taken for the whole trip\n    total_time = 2 + time_remaining_distance  # first 2 hours + remaining time\n\n    # Calculate average speed for the whole trip\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "8270a7ab11474b5c9b8d4b50e94ccec5": [
        "def solution():\n    number = 768354\n    digit_str = str(number)\n    position_from_right = len(digit_str) - digit_str.index('8') - 1\n    value_of_8 = 8 * (10 ** position_from_right)\n    return value_of_8\n\nans = solution()"
    ],
    "7ed12a6fbb2b477488bf0f46e7aa015e": [
        "from math import factorial\n\ndef solution():\n    # Calculate the number of ways to arrange 6 singing performances, which is 6!\n    sing_perm = factorial(6)\n\n    # The 4 dancing performances must be inserted into 7 potential slots which are\n    # between the singing performances (6 - 1 = 5 slots between singers plus 2 ends)\n    # This can be considered as 7 choose 4\n    dance_slots = factorial(7) // (factorial(4) * factorial(7 - 4))\n\n    # The total number of ways to arrange the performances is the product of\n    # the arrangements of singing and the selection of slots for dancing\n    total_ways = sing_perm * dance_slots\n\n    return total_ways\n\nans = solution()"
    ],
    "18d62414fcc14256a14001acd25ead4d": [
        "def solution():\n    from math import lcm\n\n    new_packets_day = lcm(25, 20)\n\n    # The first day she starts is March 1st, which is the day number 1.\n    # The next day she starts both will be after the LCM number of days.\n    # Since she starts on day 1, we consider LCM - 1 days after the first of March.\n    next_start_day = new_packets_day - 1\n\n    # Days in March\n    days_in_march = 31\n    \n    # If next_start_day exceeds days in March,\n    # it will continue to the next month (April)\n    if next_start_day > days_in_march:\n        next_start_month = \"April\"\n        next_start_day -= days_in_march\n    else:\n        next_start_month = \"March\"\n\n    return f\"{next_start_day}{next_start_month}\"\n\nans = solution()"
    ],
    "467efc939dfd4170ba4658e1f6f2cb7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    mistaken_operation = Eq((x / 4) - 25, 2021)\n    skewed_number = solve(mistaken_operation, x)\n\n    correct_answer = 4 * skewed_number[0] + 25\n\n    return correct_answer\n\nans = solution()"
    ],
    "205d168df66c45e39d3bf4f711e8f6fc": [
        "def solution():\n    # A = 1 according to the problem statement\n    A = 1\n    \n    # Calculate a1, a2, a3, a4, a5, a6 using the defined operation Δ.\n    a1 = A - (1/2)\n    a2 = A - (2/3)\n    a3 = A - (7/8)\n    a4 = A - (29/30)\n    a5 = A - (139/144)\n    a6 = A - (839/840)\n    \n    # Since A is the sum of ai, we can calculate a0 as A minus the sum of a1 to a6\n    a0 = A - (a1 + a2 + a3 + a4 + a5 + a6)\n    \n    # Simplify a0 to its simplest form and calculate m + n\n    from fractions import Fraction\n    a0_fraction = Fraction(a0).limit_denominator()\n    m = a0_fraction.numerator\n    n = a0_fraction.denominator\n    \n    return m + n\n\nans = solution()"
    ],
    "91a7b96128014a318c03b1434e2ae770": [
        "def solution():\n    donna_books = symbols('donna_books')\n    chloe_books = 4 * donna_books\n    equation = Eq(chloe_books - donna_books, 816)\n    books = solve(equation, donna_books)\n\n    return books[0]\n\nans = solution()"
    ],
    "8e0b24a6852b4ad99f69ab3e1d9f46fa": [
        "def solution():\n    # Denote the tilde symbol as a variable x\n    x = symbols('x')\n    \n    # Define the equation based on the given mathematical expression\n    equation = Eq((x + 4) / 8, 3)\n    \n    # Solve the equation for x\n    solution = solve(equation, x)\n    \n    # Assuming that x corresponds to the number of tilde symbols and it must be a whole number\n    return solution[0]\n\nans = solution()"
    ],
    "aeba54327d714c2483bb9b0bcf5e84a1": [
        "def solution():\n    prime_factors_75 = 75 // 5**2\n    prime_factors_56 = 56 // (2**3 * 7)\n    prime_factors_12 = 12 // (2**2 * 3)\n    prime_factors_105 = 105 // (5 * 3 * 7)\n\n    # The number of 0s at the end of a product depends on the number of 2-5 pairs in its factorization\n    num_fives = 2  # from 75\n    num_fives += 1 # from 105\n\n    num_twos = 3   # from 56\n    num_twos += 2  # from 12\n\n    # The number of zeros is the minimum of the count of twos and fives\n    num_zeros = min(num_fives, num_twos)\n\n    return num_zeros\n\nans = solution()"
    ],
    "a7a7be210f714db38b6463860e92ad08": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    adults, children, boys, girls = symbols('adults children boys girls')\n\n    equation1 = Eq(adults, 3 * children)\n    equation2 = Eq(boys, 2 * girls)\n    equation3 = Eq(adults, girls + 176)\n\n    solutions = solve((equation1, equation2, equation3), (adults, children, boys, girls))\n\n    total_people = solutions[adults] + solutions[children] + solutions[boys] + solutions[girls]\n\n    return total_people\n\nans = solution()"
    ],
    "cbe6883d9f0a4c368c4018abfcc1fd6b": [
        "def solution():\n    base = 999 % 10  # The last digit of 999\n    power = 99\n    ones_digit = pow(base, power, 10)  # Compute the last digit\n    return ones_digit\n\nans = solution()"
    ],
    "88e7bc9feb964b91bb3e5ab4e020c19d": [
        "def solution():\n    possible_numbers = set(range(10))\n    incorrect_positions = [{8, 7, 6, 5}, {1, 0, 2, 3}, {8, 6, 4, 2}, {5, 4, 3, 0}]\n    correct_positions = [set(), set(), set(), set()]\n    \n    # Eliminate digits from 5430\n    possible_numbers -= incorrect_positions[3]\n    \n    # Identify correct positions from 8642\n    for index, digit in enumerate('8642'):\n        if int(digit) in possible_numbers:\n            correct_positions[index].add(int(digit))\n    \n    # Check other guesses for correct digits but incorrect positions\n    for i, guess in enumerate(['8765', '1023']):\n        guess_set = set(map(int, guess))\n        # Intersect with possible numbers to ensure we only consider numbers that haven't been eliminated.\n        valid_guess_set = guess_set & possible_numbers\n        # Remove any digits that are now confirmed in the correct position.\n        for pos, correct_digits in enumerate(correct_positions):\n            valid_guess_set -= correct_digits\n        if len(valid_guess_set) == 2:\n            # Each of the two remaining digits must be in one of the incorrect positions.\n            for digit in valid_guess_set:\n                for pos, incorrect_pos_set in enumerate(incorrect_positions[i]):\n                    if digit in incorrect_pos_set:\n                        correct_positions[pos].add(digit)\n    \n    # Construct the answer from the sets of possible correct digits\n    answer = ''\n    for pos in correct_positions:\n        if len(pos) == 1:\n            answer += str(pos.pop())\n        else:\n            # If more than one possibility, choose the one that's in the possible numbers.\n            answer += str((pos & possible_numbers).pop())\n\n    return int(answer)\n\nans = solution()"
    ],
    "b5c92f2132ac4326b5a389ac237c0de3": [
        "def solution():\n    from sympy import isprime\n\n    for a in range(2, 193 // 3 + 1): # a must be less than or equal to 193 // 3, as 3a is part of the sum giving 193\n        if isprime(a):\n            for b in range(2, 193 // 11 + 1): # b must be less than or equal to 193 // 11 for similar reasons\n                if isprime(b) and 3*a + 11*b == 193:\n                    return a + b\n\nans = solution()"
    ],
    "8b43d11a50194a5c8d37dc13e3e6af0d": [
        "def solution():\n    for a in range(1, 10):  # 'a' must be a non-zero digit\n        for b in range(10):  # 'b' can be any digit including zero\n            if (10 * a + b) * 7 == 100 * a + b:\n                return 10 * a + b\n\nans = solution()"
    ],
    "e9e75300f0b1494ead9f2af2a39646a1": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 4), (2, 5), (4, 7)]\n    ans = solve_congruence(*congruences)[0]\n    return ans\n\nans = solution()"
    ],
    "c4e92a647c2e4f7cafbf405c8fd96b68": [
        "def solution():\n    # Number of houses built per construction worker per day\n    houses_per_worker_per_day = (14 / 3) / 4\n    \n    # Calculating the number of houses 9 workers can build in 2 days\n    total_houses = houses_per_worker_per_day * 9 * 2\n    \n    return int(total_houses)\n\nans = solution()"
    ],
    "bafdbe5ffa744970a2060ec88389886a": [
        "from math import gcd\n\ndef solution():\n    num1 = 12\n    num2 = 15\n    num3 = 60\n\n    gcf = gcd(gcd(num1, num2), num3)\n\n    return gcf\n\nans = solution()"
    ],
    "f1a22796821b429bbf0ea5a8dc834049": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b represent the cost of a banana and a represent the cost of an apple.\n    b, a = symbols('b a')\n    \n    # Ellie's transaction: 2 bananas and 3 apples for £1.50\n    equation1 = Eq(2*b + 3*a, 1.50)\n    # Beth's transaction: 3 bananas and 2 apples for £1.45\n    equation2 = Eq(3*b + 2*a, 1.45)\n    \n    # Solve the system of equations to find the cost of a banana and an apple.\n    solution = solve((equation1, equation2), (b, a))\n    \n    # Annabella's purchase: 1 banana and 1 apple.\n    annabella_cost = solution[b] + solution[a]\n    \n    return float(annabella_cost)\n\nans = solution()"
    ],
    "205b5f4fe40f4dc39f4c13a431c6c24e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_people = symbols('total_people')\n\n    children = (2/5) * total_people\n    women = (1/4) * total_people\n    men = total_people - children - women\n\n    equation = Eq(children, men + 20)\n\n    total_people_value = solve(equation, total_people)\n\n    return total_people_value[0]\n\nans = solution()"
    ],
    "7920f0e04e1c4bb58bdd059b9a8054a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Price per ball as a symbol\n    price = symbols('price')\n\n    # Equations based on the problem statement\n    equation1 = Eq(5 * price + 15, 8 * price - 12)\n\n    # Solving for the price\n    solved_price = solve(equation1, (price))\n\n    return solved_price[0]\n\nans = solution()"
    ],
    "bb6949f9da5a4b318164ce5a0275f45c": [
        "def solution():\n    height_after_second_bounce = 9\n    height_after_first_bounce = height_after_second_bounce * 3\n    initial_height = height_after_first_bounce * 3\n    return initial_height\n\nans = solution()"
    ],
    "f8d4595ae1c84386a2cdab88d9bf6c10": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 3), (4, 7), (7, 8)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "955addf2cd5343a2baa0cdc99bc64d70": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bob, rex, fido = symbols('bob rex fido')\n\n    equation1 = Eq(fido, bob - 10)\n    equation2 = Eq(bob + rex + fido, 28)\n    \n    # To ensure bob is the oldest and Fido the youngest, bob's age must be greater than rex's age which must be greater than fido's age\n    possible_solutions = solve((equation1, equation2),\n                               (bob, rex, fido),\n                               dict=True)\n\n    # Filter out non-integer and non-positive solutions\n    integer_solutions = [s for s in possible_solutions if all(age.is_integer and age > 0 for age in s.values())]\n\n    # Filter out solutions where any two dogs have the same age\n    unique_age_solutions = [s for s in integer_solutions if len(set(s.values())) == 3]\n\n    # Calculate the product of ages for each solution and find the smallest product\n    min_product = min(bob*rex*fido for s in unique_age_solutions for bob, rex, fido in [s.values()])\n\n    return min_product\n\nans = solution()"
    ],
    "e572f57537f244f3960d8f1978f65baa": [
        "def solution():\n    def is_valid(num):\n        # Convert to string to check the digits easily\n        num_str = str(num)\n        return len(set(num_str)) < 3\n\n    # Start from 999, the highest 3-digit number and move downwards\n    for A in range(999, 100, -1):\n        if not is_valid(A):\n            continue\n        for B in range(A - 1, 100, -1):  # B must be distinct and smaller than A\n            if not is_valid(B):\n                continue\n            if A % 75 == 0 and B % 75 == 0:\n                return A + B\n\nans = solution()"
    ],
    "dd4d3217f6ad466eb4b512fa290b4fab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    xuanxuan, lingling, jay = symbols('xuanxuan lingling jay')\n    \n    equation1 = Eq(xuanxuan + lingling, 120.5)\n    equation2 = Eq(xuanxuan + jay, 105.25)\n    equation3 = Eq(lingling, 2 * jay)\n    \n    solutions = solve((equation1, equation2, equation3), (xuanxuan, lingling, jay))\n\n    return solutions[xuanxuan]\n\nans = solution()"
    ],
    "84471787dba0421d8ae2f1995580d453": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let L be the work done by Lee in 1 hour\n    # Let N be the work done by Nancy in 1 hour\n    L, N = symbols('L N')\n\n    # Lee and Nancy working together finish in 10 hours\n    eq1 = Eq(L + N, 1/10)\n\n    # Lee works for 6 hours and Nancy for 20 hours to finish the job\n    eq2 = Eq(6 * L + 20 * N, 1)\n\n    # Solving the equations to find the work done by Nancy in 1 hour\n    solutions = solve((eq1, eq2), (L, N))\n\n    # Time taken by Nancy to finish the job\n    time_taken_by_nancy = 1 / solutions[N]\n\n    return time_taken_by_nancy\n\nans = solution()"
    ],
    "9caf24529ff449c5bd52234a7d53d0f4": [
        "def solution():\n    # Calculating the numerator of the first complex fraction\n    numerator1 = (1/30) + (1/6)\n    \n    # Calculating the denominator of the first complex fraction\n    denominator1 = 2/25\n    \n    # Calculating the first complex fraction\n    fraction1 = numerator1 / denominator1\n    \n    # Calculating the numerator of the second complex fraction\n    numerator2 = 2 - (2/3)\n    \n    # Calculating the denominator of the second complex fraction\n    denominator2 = 8/3\n    \n    # Calculating the second complex fraction\n    fraction2 = numerator2 / denominator2\n    \n    # Adding the two complex fractions to get the final answer\n    ans = fraction1 + fraction2\n    \n    return ans\n\nans = solution()"
    ],
    "d268cf0ab65245d3958844e7297250a7": [
        "def solution():\n    total_students = 40 + 30\n    total_average = 90\n\n    total_marks = total_students * total_average\n    class_b_students = 30\n\n    # Let the average of class A be x, hence average of class B will be x + 7\n    # total_marks = (average of A * number of A students) + (average of B * number of B students)\n    # total_marks = (x * 40) + ((x + 7) * 30)\n\n    # Solve for x\n    x = symbols('x')\n    equation1 = Eq((x * 40) + ((x + 7) * 30), total_marks)\n    average_a = solve(equation1, x)[0]\n    average_b = average_a + 7\n\n    return average_b\n\nans = solution()"
    ],
    "73e16b4d6b4148cd8d14bdc6e7150eb3": [
        "def solution():\n    donna_books = symbols('donna_books')\n    equation = Eq(4 * donna_books, donna_books + 816)\n    solutions = solve(equation, donna_books)\n    return solutions[0]\n\nans = solution()"
    ],
    "c69301f007a447459a2f26b32add259c": [
        "def solution():\n    # we can simplify the complex fraction by combining the three fractions in the denominator\n\n    # using the common denominator 2007 * 2008 * 2009\n    common_denominator = 2007 * 2008 * 2009\n\n    # now we express each of the denominator fraction with the common denominator\n    # and combine them\n    combined_numerator = common_denominator * (\n        (1 / (2007 * 2008)) + (1 / (2008 * 2009)) + (1 / 2009)\n    )\n\n    # simplify the combined numerator expression\n    # by canceling out common factors in each fraction term\n    simplified_numerator = (2009) + (2007) + (2007 * 2008)\n\n    # now the overall fraction is 1 / (simplified_numerator / common_denominator)\n    # we can simply invert the simplified_numerator and common_denominator to get the answer\n    ans = common_denominator / simplified_numerator\n\n    return ans\n\nans = solution()"
    ],
    "736d1bb4aa004960971db73d59909663": [
        "def solution():\n    ways = 0\n    for ten_pence in range(6):  # Jeremy can use from 0 to 5 ten-pence coins\n        for twenty_pence in range(4):  # Jeremy can use from 0 to 3 twenty-pence coins\n            for fifty_pence in range(2):  # Jeremy can either use or not use the fifty-pence coin\n                if ten_pence * 10 + twenty_pence * 20 + fifty_pence * 50 == 70:\n                    ways += 1\n    return ways\n\nans = solution()"
    ],
    "5a540f16cc654e8dadce8dec2e692dc0": [
        "def solution():\n    # Perform addition and subtraction sequentially according to the expression given\n    ans = 11 - 2 + 7 - 4 + 2\n    return ans\n\nans = solution()"
    ],
    "994aeb7c561a42fe8347e558ec900f32": [
        "def solution():\n    a = 250250\n    ans = (a**2) - (a - 1)*(a + 1)\n    return ans\n\nans = solution()"
    ],
    "bf82b1b89b484ee5960960a7d950ca09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    Aaron, Becky, Chris = symbols('Aaron Becky Chris')\n\n    # Define the equations based on the problem statement\n    equation1 = Eq(Aaron - Becky, Becky - Chris)\n    equation2 = Eq(Aaron + Becky + Chris, 60)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (Aaron, Becky, Chris))\n\n    return solutions[Becky]\n\nans = solution()"
    ],
    "d446c52e4dbb4e51aceaff4c60dc5ab8": [
        "def solution():\n    people_behind_mark = 16\n    total_people = 30\n\n    people_in_front_of_mark = total_people - people_behind_mark - 1\n\n    return people_in_front_of_mark\n\nans = solution()"
    ],
    "ac1c2a9c6937485ea8ffba2f93c05b4f": [
        "def solution():\n    digits = 0\n    for i in range(1, 201):\n        digits += len(str(i))\n    return digits\n\nans = solution()"
    ],
    "a5706681d10c49489b9cbe928880bbdb": [
        "def solution():\n    for a in range(10):\n        num = int(f\"9{a}8{a}\")\n        if num % 15 == 0:\n            return a\n\nans = solution()"
    ],
    "9852339c36f84963a115452803677de2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 2) / 3, 1 + (x - 1) / 4)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "7194d8ece9df4cd49ccf1b51dff55042": [
        "def solution():\n    # For a number to be divisible by 4, the last two digits must form a number that is divisible by 4.\n    # We need to check the values for J that make the last two digits (5J6) divisible by 4.\n    for J in range(10):\n        if (56 + 10 * J) % 4 == 0:\n            return J\n\nans = solution()"
    ],
    "252455d7397e4190b4b727c54849c01e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    equation1 = Eq(5 * table + 12 * chair, 720)\n    equation2 = Eq(table, chair + 25)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "9ad04db2b944413e9b7b20c98134596f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the cost of an apple and a peach\n    apple, peach = symbols('apple peach')\n\n    # Set up the equations based on the given information\n    equation1 = Eq(4 * apple + 3 * peach, 10)\n    equation2 = Eq(4 * apple + 6 * peach, 16)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (apple, peach))\n\n    return solutions[peach]\n\nans = solution()"
    ],
    "a38e52eeb9e34e54a87285df19594d9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define a symbol for the unknown number\n    x = symbols('x')\n    \n    # Define the equation based on the given problem\n    equation = Eq((x + 7) * 6, 66)\n    \n    # Solve the equation for x\n    solved_x = solve(equation, x)\n    \n    # Return the original number thought of, which is the solution to the equation\n    return solved_x[0]\n\nans = solution()"
    ],
    "d8016a78f9724496a543874862c8f889": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "ba1cf976efc14128bab1463d61d8172d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    operation = Eq(5 * 9 - 2 * x, 33)\n    solutions = solve(operation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "28dce32aa4a84544ae4a2373b615edc0": [
        "def solution():\n    ans = 36 + 17 + 18 + 24 + 33\n    return ans\n\nans = solution()"
    ],
    "6414fa3c36c949d8bc8d4375490aad90": [
        "def solution():\n    return 476 // 17\n\nans = solution()"
    ],
    "b06bcf32c5ce4534aa9ae601dd737c7a": [
        "def solution():\n    # Use the formula for the sum of squares: 1² + 2² + 3² + ... + n² = (1/6)n(n+1)(n+2)\n    n = 24\n    sum_of_squares = (n * (n + 1) * (n + 2)) // 6\n    \n    # Calculate the sum using the given series formula: 0*1² + 1*2² + 2*3² + ... + 23*24²\n    # We factor out the squares i.e., (i+1)² and distribute i*(i+1)² as i*i*(i+1) (sum of cubes) + i*(i+1) (sum of squares)\n    # The sum of squares is already calculated above. Now calculating the sum of cubes: 1³ + 2³ + ... + n³\n    # The sum of cubes is the square of the sum of numbers: (1 + 2 + 3 + ... + n)² = ((n*(n+1))/2)²\n    sum_of_numbers = n * (n + 1) // 2\n    sum_of_cubes = sum_of_numbers ** 2\n    \n    # Now distributing the original sum into the sum of cubes and sum of squares parts:\n    ans = sum_of_cubes - sum_of_squares\n    \n    return ans\n\nans = solution()"
    ],
    "05109018bc434fdfa8dff3bea6fe10cd": [
        "def solution():\n    num1 = (1/30) + (1/6)\n    den1 = (2/25)\n    part1 = num1 / den1\n\n    num2 = 2 - (2/3)\n    den2 = (8/3)\n    part2 = num2 / den2\n\n    ans = part1 + part2\n\n    return ans\n\nans = solution()"
    ],
    "3c4b0bb759df46ac8dc162978d7d83b6": [
        "def solution():\n    age_in_6_years = 24\n    current_age = age_in_6_years - 6\n    age_9_years_ago = current_age - 9\n    return age_9_years_ago\n\nans = solution()"
    ],
    "644a44bb704f4384a83cf940f7f6970c": [
        "def solution():\n    total_time = 360  # total time in minutes\n    ratio_up_to_down = 5 / 4\n\n    # Let the time going down be t minutes. Then the time going up will be 5t/4.\n    # 5t/4 + t = 360 -> t = (360 * 4) / 9\n    time_down = (total_time * 4) / (5 + 4)\n    time_up = (5 * time_down) / 4\n\n    # Let the speed going down be s m/min. Then the speed going up will be (s - 10) m/min.\n    # Total distance = distance up + distance down = time_up * (s - 10) + time_down * s\n    # We only need to find s such that the terms with s cancel out, as we are not given absolute speeds.\n    # Here we can just choose s = 1 as a relative speed since the s terms will cancel anyway.\n\n    speed_down = 1  # relative speed, any positive value would work\n    speed_up = speed_down - 10  # 10 m/min slower going up\n\n    # Calculate the total distance\n    total_distance = (time_up * speed_up) + (time_down * speed_down)\n\n    return total_distance\n\nans = solution()"
    ],
    "04443e386f27447897840ea2ceacf48e": [
        "def solution():\n    watermelons = 94\n    pineapples = 138\n\n    for days in range(1, watermelons // 9 + 1):  # since she uses 9 everyday, we only consider days until watermelons are less than 9\n        watermelons_left = watermelons - 9 * days\n        pineapples_left = pineapples - 9 * days\n        if pineapples_left == 3 * watermelons_left:\n            return days\n\nans = solution()"
    ],
    "f2a79e337470459580999ca824060e81": [
        "def solution():\n    friends = 6\n    # Each of the 6 friends sends a card to each of the other 5 friends\n    cards_sent = friends * (friends - 1)\n\n    return cards_sent\n\nans = solution()"
    ],
    "863f091493be404bbbf1a3b6b11108a9": [
        "def solution():\n    return 3.6 * 100\n\nans = solution()"
    ],
    "8421a5213cd640929f9873c905812c37": [
        "def solution():\n    from math import lcm\n    days = lcm(25, 20)\n    start_date = 1  # Represents the 1st of March\n    end_date = start_date + days - 1  # Subtracting 1 because we count the start day as day 1\n\n    # Assuming it's not a leap year, March has 31 days\n    remaining_days = end_date % 31  # Get the remaining days after the whole months\n    full_months = end_date // 31  # Get the number of full months\n    \n    # Calculate the month and day, assuming the months of March, April, etc. have 31, 30, 31, 30,... days respectively\n    # Start month is March, which is the third month\n    start_month = 3\n    months_lengths = [31, 30, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    current_month_length = months_lengths[0]\n    current_month = start_month\n\n    # Subtract the days of each month until we run out of days to subtract\n    while remaining_days > current_month_length:\n        remaining_days -= current_month_length\n        current_month += 1\n        current_month_length = months_lengths[(current_month - 3) % 12]  # Adjust for the month index\n\n    # Now we have the month and day\n    next_start_month = current_month\n    next_start_day = remaining_days\n\n    return (next_start_day, next_start_month)\n\nans = solution()"
    ],
    "c7d09eee09884180b22647b680abde83": [
        "def solution():\n    # Calculate the amount of fruits each car carries\n    car_fruits = 24.2 / 4\n    # Calculate the amount of fruits each truck carries\n    truck_fruits = 410 / 50\n    \n    # Calculate the difference in the mass of the fruits\n    difference = truck_fruits - car_fruits\n    \n    return difference\n\nans = solution()"
    ],
    "594446f092204f07a8f1c0cebe891b21": [
        "def solution():\n    days = 329\n    weeks = days // 7  # Using floor division to get the number of full weeks\n    return weeks\n\nans = solution()"
    ],
    "7ecb434f5d8b4685a1bf09ae7bb7ba8e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote tom's current age as tom and jerry's current age as jerry\n    tom, jerry = symbols('tom jerry')\n\n    # According to the first sentence:\n    # tom will be twice his age in 4 years from now\n    equation1 = Eq(tom + 4, 2 * tom)\n\n    # According to the second sentence:\n    # Three years ago, the sum of Tom's and Jerry's ages was 10\n    equation2 = Eq((tom - 3) + (jerry - 3), 10)\n\n    # Solve the equations to find tom and jerry's current ages\n    ages = solve((equation1, equation2), (tom, jerry))\n\n    # Jerry's age will be doubled at (2 * jerry - jerry) years from now, which is simply jerry\n    return ages[jerry]\n\nans = solution()"
    ],
    "53ec9e4b9d804cd3a26e23b2cb281a3a": [
        "def solution():\n    # Aiden wants to take the bus at 9:15 but arrives at 9:22\n    arrived_time_minutes = (9 * 60) + 22  # convert 9:22 to total minutes (9 hours * 60 + 22 minutes)\n    last_bus_time_minutes = (9 * 60) + 15  # convert 9:15 to total minutes\n\n    # check if Aiden has missed the bus he wants to take\n    if arrived_time_minutes > last_bus_time_minutes:\n        # calculate the time difference since the last bus left\n        time_since_last_bus = arrived_time_minutes - last_bus_time_minutes\n        # buses leave every 35 minutes, so calculate the wait time for the next bus\n        wait_time = 35 - (time_since_last_bus % 35)\n    else:\n        # Aiden hasn't missed the bus\n        wait_time = 0\n\n    return wait_time\n\nans = solution()"
    ],
    "7b68f177602a4cc584823135bed89664": [
        "def solution():\n    ans = 252 - (62 - 58) * 13\n    return ans\n\nans = solution()"
    ],
    "d05b2b87366644bea5ba5fa990a4796c": [
        "def solution():\n    result = (5/9) * 243\n    return result\n\nans = solution()"
    ],
    "d6baa433c44047ebbc0a9cea630f8afa": [
        "def solution():\n    ans = 161 / 46\n    return ans\n\nans = solution()"
    ],
    "c72580c4f08e4db9b41e5dae34b5ba80": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq(39 - (3 * x - 4), 34)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "41a3c03d8eb44fc899606653983540eb": [
        "def solution():\n    ans = sum((i**2 if i % 2 != 0 else -i**2) for i in range(3, 52))\n    return ans\n\nans = solution()"
    ],
    "98919fdedf144aaf9b373ecd9d790e80": [
        "from sympy import primerange\n\ndef solution():\n    # Initial ages of the family members\n    ages = [7, 5, 29, 31]\n    # Maximum possible age for father to consider (reasonable assumption)\n    max_age = 100\n\n    # Generate all primes up to maximum possible age\n    all_primes = set(primerange(2, max_age))\n\n    # Find the next year when all ages are prime\n    while True:\n        # Increment each family member's age by 1\n        ages = [age + 1 for age in ages]\n        # Check if all incremented ages are prime\n        if all(age in all_primes for age in ages):\n            # Return father's age when the condition is met\n            return ages[3]\n\nans = solution()"
    ],
    "0284805b100e4942a4c70e5c0bda46ec": [
        "def solution():\n    # Let's denote the original number as x.\n    # According to the problem, if we add 7 to x, and then multiply by 6, we get 66.\n    # Formally: 6 * (x + 7) = 66\n    # We can then reverse the operations to find x.\n\n    # First step: divide 66 by 6\n    result_after_multiplication = 66 / 6\n\n    # Second step: subtract 7 from the result above\n    original_number = result_after_multiplication - 7\n\n    # Return the original number\n    return original_number\n\nans = solution()"
    ],
    "706569a3dca842c19c29d93aa3f7c891": [
        "def solution():\n    ans = 0.2 * 4 + 1.4 + 0.3\n    return ans\n\nans = solution()"
    ],
    "330ae3eaf06f40fc836f52dc7ad73cd3": [
        "def solution():\n    return 9321 - 899\n\nans = solution()"
    ],
    "4ba068e7720f40409cd5ae73716e4408": [
        "def solution():\n    total_flowers = 30\n    flowers_between_posts = 3\n    \n    # Calculate the number of gaps between lamp posts by dividing the total flowers\n    # by the number of flowers between each two posts\n    num_gaps = total_flowers // flowers_between_posts\n    \n    # The total distance is 50m, divide this by the number of gaps to find the distance between two posts\n    distance_between_posts = 50 / (num_gaps + 1)\n    \n    return distance_between_posts\n\nans = solution()"
    ],
    "8206be1ec41b408abd4e771355c66b57": [
        "def solution():\n    n_circles = 7\n    ans = 1 + n_circles * (n_circles + 1) // 2\n    return ans\n\nans = solution()"
    ],
    "fb9f310cf3714558a4a5507c2790883c": [
        "def solution():\n    total_books = 279\n    books_given_away = 15 * 8\n    books_packed = total_books - books_given_away\n\n    return books_packed\n\nans = solution()"
    ],
    "2a5bc09f9e2444d0ad16b16b429e0669": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lora, mother = symbols('lora mother')\n    \n    equation1 = Eq(lora + mother, 44)\n    equation2 = Eq(mother, 3 * lora)\n    \n    solutions = solve((equation1, equation2), (lora, mother))\n\n    return solutions[lora]\n\nans = solution()"
    ],
    "e4a263cc4f734491a94e2dda982f4f21": [
        "def solution():\n    return 90009\n\nans = solution()"
    ],
    "b157ac35c09c46d1a0f9228b2a98a0c9": [
        "def solution():\n    total_adults = 40\n    fraction_male = 3/5\n\n    num_male_adults = total_adults * fraction_male\n\n    return int(num_male_adults)\n\nans = solution()"
    ],
    "8b707c3e74aa4ca6aa566cfafbe81d3f": [
        "def solution():\n    base_unit_digit = 4\n    cycle = [base_unit_digit]\n    \n    for _ in range(3):\n        next_digit = (base_unit_digit * cycle[-1]) % 10\n        if next_digit == cycle[0]:\n            break\n        cycle.append(next_digit)\n    \n    cycle_length = len(cycle)\n    power_mod_cycle_length = 2008 % cycle_length\n    \n    unit_digit = cycle[power_mod_cycle_length - 1]\n    \n    return unit_digit\n\nans = solution()"
    ],
    "25c64c726c244d3aaeaa551352e609a3": [
        "def solution():\n    sweets_ben = 17\n    sweets_bob = 10\n    total_sweets = sweets_ben + sweets_bob\n    return total_sweets\n\nans = solution()"
    ],
    "2fcfa373d34340dda08f178934a5be32": [
        "def solution():\n    eddie_speed = 62   # Eddie's speed in metres per minute\n    brother_speed = 70 # Brother's speed in metres per minute\n    time_to_meet = 5   # Time until they meet in minutes\n    \n    distance_meet = (eddie_speed + brother_speed) * time_to_meet\n    \n    return distance_meet\n\nans = solution()"
    ],
    "5c9b212318c240b4a74ad8f4e844ef5b": [
        "def solution():\n    days_until_birthday = 329\n    days_in_week = 7\n    weeks_until_birthday = days_until_birthday // days_in_week\n    return weeks_until_birthday\n\nans = solution()"
    ],
    "2c92522309c445228b27f336d60a049f": [
        "def solution():\n    total_coins = 495\n    one_pound_coins = total_coins // 3  # 1/3 are £1 coins\n    fifty_pence_coins = 124\n    twenty_pence_coins = total_coins - one_pound_coins - fifty_pence_coins\n\n    total_value = one_pound_coins * 1 + fifty_pence_coins * 0.50 + twenty_pence_coins * 0.20\n\n    return total_value\n\nans = solution()"
    ],
    "26e8404f1e6e4ecdb0c65de9d6a345a6": [
        "def solution():\n    # Number of paths from home to the audio shop, book shop, and chapel\n    paths_to_audio = 6\n    paths_to_book = 4\n    paths_to_chapel = 5\n\n    # Number of paths from the audio shop, book shop, and chapel to school\n    paths_audio_to_school = 2\n    paths_book_to_school = 2\n    paths_chapel_to_school = 3\n\n    # Calculate the total number of paths from home to school\n    total_paths = (paths_to_audio * paths_audio_to_school +\n                   paths_to_book * paths_book_to_school +\n                   paths_to_chapel * paths_chapel_to_school)\n\n    return total_paths\n\nans = solution()"
    ],
    "c15d8300682f4868979f9fe7293cdddd": [
        "def solution():\n    return 76 * 9\n\nans = solution()"
    ],
    "42059b08dbed41ce877ac6d4245af7e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    benson, clive = symbols('benson clive')\n    \n    original_sum = Eq(benson + clive, 705)\n    equal_after_spending = Eq(benson - 34, clive - 63)\n    \n    solutions = solve((original_sum, equal_after_spending), (benson, clive))\n    \n    return solutions[clive]\n\nans = solution()"
    ],
    "517bec3444474e42bb9cb8c495766694": [
        "def solution():\n    ans = 14.8 - 5.67\n    return ans\n\nans = solution()"
    ],
    "acf3c89a437f4533b94fbc004a77b124": [
        "def solution():\n    # Let weight of Adam, Ben, and Carl be A, B, and C respectively.\n    # According to the problem statement, we have:\n    # A + B = 102\n    # B + C = 97\n    # A + C = 93\n\n    # Summing all equations gives us 2 * (A + B + C),\n    # Then divide it by 2 to get the total weight of Adam, Ben, and Carl.\n    total_weight = (102 + 97 + 93) // 2\n    \n    return total_weight\n\nans = solution()"
    ],
    "556f6176dffb4d75900eef7a7bd1baa6": [
        "def solution():\n    belle = 49\n    received = 11\n    eddie_initial = (belle + received) * 2 - received\n    return eddie_initial\n\nans = solution()"
    ],
    "a2fe9cf5c86e468186050a214e5271c5": [
        "def solution():\n    return (50 - 1) * 2\n\nans = solution()"
    ],
    "007cfb31882a43b8a576d0a1be81a6b1": [
        "def solution():\n    ans = 198 + 298 + 398 + 498\n    return ans\n\nans = solution()"
    ],
    "cc59b7c9a7804769b430b15dea0b2243": [
        "def solution():\n    glasgow_temp = -7\n    difference = 12\n    exeter_temp = glasgow_temp + difference\n    return exeter_temp\n\nans = solution()"
    ],
    "29173022662a4326b363f95bb7111d39": [
        "def solution():\n    # Calculate the expression\n    result = ((5 / 11) + (2 / 27)) * 11 + (5 / 27)\n    # Return the answer\n    return result\n\nans = solution()"
    ],
    "f2d1624bd6914f419871977e97929aae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, brian = symbols('chelsia brian')\n\n    equation1 = Eq(3/4 * chelsia, 5/6 * brian)\n    equation2 = Eq(chelsia - brian, 24)\n\n    solutions = solve((equation1, equation2), (chelsia, brian))\n\n    return solutions[chelsia] + solutions[brian]\n\nans = solution()"
    ],
    "f3a732dd8b134a0d8668f613c0e04366": [
        "def solution():\n    weight_per_box = 1.3\n    number_of_boxes = 6\n\n    total_weight = weight_per_box * number_of_boxes\n\n    return total_weight\n\nans = solution()"
    ],
    "d10e094ae6b64c01873f9605961d4568": [
        "def solution():\n    return 11 + 8 - 4 + 2\n\nans = solution()"
    ],
    "76eab0f31f2c401ea284400880158c26": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, kofi = symbols('john kofi')\n\n    equation1 = Eq(john + kofi, 25)\n    equation2 = Eq(kofi + 4, john - 4 - 3)\n\n    solutions = solve((equation1, equation2), (john, kofi))\n\n    return solutions[john]\n\nans = solution()"
    ],
    "2de358aca892457597c6b256327bbab7": [
        "def solution():\n    total_coins = 495\n    one_pound_coins = (1/3) * total_coins\n    fifty_p_coins = 124\n    twenty_p_coins = total_coins - one_pound_coins - fifty_p_coins\n\n    total_value = (one_pound_coins * 1) + (fifty_p_coins * 0.5) + (twenty_p_coins * 0.2)\n\n    return total_value\n\nans = solution()"
    ],
    "c47a6f5f7feb44a1a708cd7ee24c6d4f": [
        "def solution():\n    from itertools import permutations\n\n    digits = '246'\n    perm = permutations(digits)\n    count = sum(1 for _ in perm)\n\n    return count\n\nans = solution()"
    ],
    "c2d38aa135914d7cbc85eacbe4abc34c": [
        "def solution():\n    cost_per_banana = 98 / 7\n    total_cost = cost_per_banana * 13\n    change = 1000 - total_cost  # Convert £10 to pence\n    return change\n\nans = solution()"
    ],
    "b9dc1e7c14884af2affa4cacaa7fb5a9": [
        "def solution():\n    return 18 + 2 + 16\n\nans = solution()"
    ],
    "1e359fb023094a249a7e06543302f43c": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 101):\n        if i % 2 == 0:\n            total_sum += i\n        else:\n            total_sum -= i\n    return total_sum\n\nans = solution()"
    ],
    "94caf5aef0e34fb6850eae1e6f450368": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    normal_rabbits, special_rabbits = symbols('normal_rabbits special_rabbits')\n\n    heads_equation = Eq(normal_rabbits + 3*special_rabbits, 53)\n    feet_equation = Eq(4*normal_rabbits + 2*special_rabbits, 102)\n\n    solutions = solve((heads_equation, feet_equation), (normal_rabbits, special_rabbits))\n\n    return solutions[normal_rabbits], solutions[special_rabbits]\n\nans = solution()"
    ],
    "635bb79136ff42d8a188a0bd46337917": [
        "def solution():\n    sweets_neelesh_left = 4\n    sweets_neelesh_before_eating = sweets_neelesh_left + 1\n    total_sweets = sweets_neelesh_before_eating * 6  # Since Neelesh got 1/6\n    sweets_ayesha_left = total_sweets - sweets_neelesh_before_eating\n    return sweets_ayesha_left\n\nans = solution()"
    ],
    "b49aa6ce18de4e7e95ea0c909ef9340d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    copper, iron = symbols('copper iron')\n    \n    equation1 = Eq(8 * copper + 9 * iron, 135)\n    equation2 = Eq(6 * copper + 3 * iron, 75)\n    \n    solutions = solve((equation1, equation2), (copper, iron))\n    \n    return solutions[copper]\n\nans = solution()"
    ],
    "c0d39545ea18469395ac00e338169f45": [
        "from fractions import Fraction\n\ndef solution():\n    return Fraction(3) / Fraction(1, 3)\n\nans = solution()"
    ],
    "82376facf64846dea0f32cd7690fcb86": [
        "def solution():\n    from decimal import Decimal, getcontext\n    # Set the precision to 500 decimal places plus some buffer for the recurring part\n    getcontext().prec = 600\n    # Calculate the decimal part of 1/70\n    decimal_part = str(Decimal(1) / Decimal(70))\n    # Find the 500th digit after the decimal point\n    # The decimal_part string includes \"0.\" at the start, so we need to offset by 2\n    ans = int(decimal_part[500 + 2])\n    return ans\n\nans = solution()"
    ],
    "6f08803f689f4c72bcdea50d636ea987": [
        "def solution():\n    david_weight_stone = 15\n    andrew_weight_pounds = 275\n    stone_to_pounds = 14\n    \n    david_weight_pounds = david_weight_stone * stone_to_pounds\n    weight_difference = abs(david_weight_pounds - andrew_weight_pounds)\n    \n    return weight_difference\n\nans = solution()"
    ],
    "fb81c39a4a004c44a04415b1127e4172": [
        "def solution():\n    return 5 * 8 * 37 * 2 * 3\n\nans = solution()"
    ],
    "ff3ca477695c441ca3e802ed3aff2147": [
        "def solution():\n    from math import gcd\n\n    count = 0\n    for a in range(1, 212):  # since a has to be less than b for a/b < 1\n        b = 425 - a\n        if gcd(a, b) == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "3879585254c84c84980eeddc57632689": [
        "def solution():\n    n = 4.5 / 5\n    return n\n\nans = solution()"
    ],
    "4b71e5c9920b435b9041ce4896dba538": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Let g be the number of gummy bears and l be the number of lollipops\n    g, l = symbols('g l')\n\n    # Set up the equations based on the given ratios and additional candies\n    eq1 = Eq(g / l, 5/7)\n    eq2 = Eq((g + 120) / (l + 120), 4/5)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (g, l))\n    \n    # Calculate the total number of pieces now\n    total_pieces_now = solutions[g] + 120 + solutions[l] + 120\n\n    return total_pieces_now\n\nans = solution()"
    ],
    "1d7ff38273c84d93a9260643964e7030": [
        "def solution():\n    david_weight_stone = 15\n    andrew_weight_pounds = 275\n    pounds_per_stone = 14\n    \n    david_weight_pounds = david_weight_stone * pounds_per_stone\n    weight_difference = abs(andrew_weight_pounds - david_weight_pounds)\n    \n    return weight_difference\n\nans = solution()"
    ],
    "f7687594899c4a84936c2dc5acc1a17b": [
        "def solution():\n    nth_term = 25 + (10 - 1) * 3\n    first_term = nth_term - (10 - 1) * 3\n    return first_term\n\nans = solution()"
    ],
    "582d4b5a26c541bc8d1fb60d2121ed94": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(24*x - 5*(3 + x), 4)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "ab2b45088a334801819c6e6a9d94fab4": [
        "def solution():\n    sum_of_numbers = 5 + 15 + 17 + 23\n    total_sum = sum_of_numbers * 3\n    return total_sum\n\nans = solution()"
    ],
    "fc1e6d4f69b04d27a7517c0eb6c4e22f": [
        "def solution():\n    numbers = [31, 42, 53, 64, 75, 86, 97]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "8cf4df806e1a4f38b2163bf0c0f80fb2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of marbles in box B and C\n    box_b, box_c = symbols('box_b box_c')\n\n    # We know that there are 560 marbles in total and 80 in box A\n    total_marbles = 560\n    marbles_in_a = 80\n    marbles_in_b_and_c = total_marbles - marbles_in_a\n\n    # Create the equations based on the problem statement\n    # Equation 1: The number of marbles in box B is twice the number in box C\n    equation1 = Eq(box_b, 2 * box_c)\n    # Equation 2: The total number of marbles in boxes B and C is equal to marbles_in_b_and_c\n    equation2 = Eq(box_b + box_c, marbles_in_b_and_c)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (box_b, box_c))\n\n    # The number of marbles in box C is what we want to find out\n    return solutions[box_c]\n\nans = solution()"
    ],
    "a7abc8be2a334d6eaec3ea33bebffa38": [
        "def solution():\n    return 0.50 * 0.50 * 3.20\n\nans = solution()"
    ],
    "b9e41291c02c4031a7bcdcb38cb3cafe": [
        "def solution():\n    return 58 * 60\n\nans = solution()"
    ],
    "9dbeb15b0ccc44199b320299a1531c7e": [
        "def solution():\n    # Convert the base 3 numbers to base 10, perform the subtraction, and convert back to base 3\n    num1_base10 = int(str(12101), 3)\n    num2_base10 = int(str(2210), 3)\n\n    result_base10 = num1_base10 - num2_base10\n    ans = ''\n    \n    # Convert the result from base 10 back to base 3\n    while result_base10 > 0:\n        ans = str(result_base10 % 3) + ans\n        result_base10 //= 3\n\n    return ans\n\nans = solution()"
    ],
    "e83aa38155204c758ec3f3c943621ee1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andy, bella, carl = symbols('andy bella carl')\n\n    equation1 = Eq(andy, 3 * carl - 5)\n    equation2 = Eq(bella, 5 * carl + 6)\n    equation3 = Eq(andy + bella + carl, 82)\n\n    solutions = solve((equation1, equation2, equation3), (andy, bella, carl))\n\n    return solutions[bella]\n\nans = solution()"
    ],
    "3d7dd83d87f844e58d9e560870e4d190": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cake, biscuit = symbols('cake biscuit')\n    \n    equation1 = Eq(cake + 2*biscuit, 450)\n    equation2 = Eq(2*cake + 3*biscuit, 800)\n    \n    solutions = solve((equation1, equation2), (cake, biscuit))\n    \n    return solutions[biscuit]\n\nans = solution()"
    ],
    "40f23dfb4c6944d6827e112692a2f4af": [
        "def solution():\n    correct_answers = 6\n    wrong_answers = 2\n    marks_per_correct = 12\n    total_marks = (correct_answers * marks_per_correct) + (wrong_answers * 0)\n    average_mark = total_marks / (correct_answers + wrong_answers)\n    return average_mark\n\nans = solution()"
    ],
    "457ec627f0894b55bd6bbb19ec3216ed": [
        "def solution():\n    from fractions import Fraction\n    \n    numerator_part1 = Fraction(2017, 1) + Fraction(7, 8)\n    numerator_part2 = Fraction(3, 1) + Fraction(2, 3)\n    \n    denominator_part1 = Fraction(2017, 1) + Fraction(1, 3)\n    \n    numerator = numerator_part1 * numerator_part2 - Fraction(2016.875 * 11, 3)\n    denominator = (denominator_part1 - Fraction(2016.875)) * 17\n    \n    final_fraction_part = Fraction(3, 1) + Fraction(23, 32)\n    \n    ans = (numerator / denominator) * final_fraction_part\n    \n    return float(ans)\n\nans = solution()"
    ],
    "87af33f1b5884c4ea69e49e33d0a8d54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    john, mother = symbols('john mother')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(john + 8, mother - 20)  # John's future age is equal to his mother's past age\n\n    # Solve the equation for the difference in age\n    age_diff_solution = solve(equation1, mother - john)[0]\n\n    # Now we create an equation where John's mother is 5 times his age\n    equation2 = Eq(mother, 5 * john)\n\n    # We now know that the difference in age is a constant and doesn't change with time\n    equation3 = Eq(mother - john, age_diff_solution)\n\n    # Solve the equations to find John's age when his mother was 5 times older\n    age_solution = solve((equation2, equation3), (john, mother))\n\n    return age_solution[john]\n\nans = solution()"
    ],
    "cf212f0a8ebe4fcbb9183e471f844eb7": [
        "def solution():\n    for pencils_per_pupil in range(1, 100):  # Assuming a pupil can't have more than 99 pencils\n        total_pencils = 44 * pencils_per_pupil\n        if total_pencils >= 110 and total_pencils <= 199:\n            B1 = total_pencils // 10\n            B = total_pencils % 10\n            if B1 == B:\n                return pencils_per_pupil\n\nans = solution()"
    ],
    "12eba26cbba04c40831d8de0d613bdcb": [
        "def solution():\n    # We will use a greedy approach to choose the largest possible n different numbers\n    # from the first 20 positive integers so that no two of my numbers differ by 5.\n\n    # Starting from 1, we can pick every 5th number to avoid a difference of 5:\n    # We pick 1, then skip 5 numbers to 6, skip another 5 to 11, and finally skip 5 to 16.\n    # This set avoids having two numbers with a difference of 5.\n    # The set is {1, 6, 11, 16}. However, this is not the largest set possible.\n\n    # Alternatively, we can start with 4. Now our chosen numbers are 4, 9, 14, 19.\n    # This is also not the largest we can build.\n\n    # If we start at 2, we can choose 2, 7, 12, 17.\n    # Starting from 3, we can choose 3, 8, 13, 18.\n    # Finally, starting from 5, we can choose 5, 10, 15, 20.\n\n    # The largest n we can achieve is the size of the largest such set without differences of 5.\n    # From the observed pattern, we see that we can choose a maximum of 4 numbers from the sequence,\n    # if we are to satisfy the given condition.\n\n    n = 4  # Since we can't choose more than 4 without violating the condition\n    return n\n\nans = solution()"
    ],
    "c21adc6d12784b558ba6313332b0f960": [
        "from math import lcm\n\ndef solution():\n    return lcm(4, 6, 7)\n\nans = solution()"
    ],
    "40292969e8e14e9cbeb87311d97671dc": [
        "def solution():\n    M = 1\n    while True:\n        remainders = set((M % 2, M % 3, M % 4, M % 5, M % 6, M % 7, M % 8, M % 9, M % 10))\n        if len(remainders) == 9 and 0 not in remainders:\n            break\n        M += 1\n    return M\n\nans = solution()"
    ],
    "8e019855e907491ab5c9eee5d32827fc": [
        "def solution():\n    # Calculating the Least Common Multiple (LCM) of Tom and William's lap times\n    from math import lcm\n    tom_time = 24\n    william_time = 8\n    \n    # Time taken for both to meet for the first time is their LCM\n    first_meeting_time = lcm(tom_time, william_time)\n    \n    return first_meeting_time\n\nans = solution()"
    ],
    "5290a7a4297b46f79f02b35ba7b86bba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kevin, sara, james = symbols('kevin sara james')\n\n    equation1 = Eq(kevin, sara + 30)\n    equation2 = Eq(james, sara + 40)\n    equation3 = Eq(kevin + sara + james, 160)\n\n    solutions = solve((equation1, equation2, equation3), (kevin, sara, james))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "9eed42cf78144b53839062fc748a2a6b": [
        "def solution():\n    total_apples = 37\n    apples_per_container = 4\n    \n    num_containers = (total_apples + apples_per_container - 1) // apples_per_container\n    \n    return num_containers\n\nans = solution()"
    ],
    "976d0ed32bf84f5083e1272cd57f3a72": [
        "def solution():\n    books_about_fish = 78\n    books_about_birds = books_about_fish - 12\n    total_books = books_about_fish + books_about_birds\n    return total_books\n\nans = solution()"
    ],
    "4bc3c98e818346f4be4d3e3f73cdd332": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n\n    both_competitions = math_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "ac392742b1ee4f6d953d5d00c6d023b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    allison, ben, eunice = symbols('allison ben eunice')\n\n    equation1 = Eq(allison, ben - 6)\n    equation2 = Eq(eunice, 3 * ben)\n    equation3 = Eq(allison + ben + eunice, 74)\n\n    solutions = solve((equation1, equation2, equation3), (allison, ben, eunice))\n\n    return solutions[eunice]\n\nans = solution()"
    ],
    "fe1ec268421740a592e27756f3a3f6ed": [
        "from math import gcd\n\ndef solution():\n    num = 28\n    for i in range(1, num+1):\n        if (num * i) ** 0.5 == int((num * i) ** 0.5):\n            return i\n\nans = solution()"
    ],
    "762ea7c4f43b426abdae8d0c00523b6d": [
        "def solution():\n    # Length of the field in meters\n    field_length = 480\n    # Distance between posts in meters\n    post_interval = 4\n    # Number of posts includes both the starting and end posts\n    num_posts = (field_length // post_interval) + 1\n    \n    return num_posts\n\nans = solution()"
    ],
    "071a1796963f4c3b964229a2d8a43b31": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    romily, reema = symbols('romily reema')\n\n    # romily collects £10 more than reema\n    equation = Eq(romily, reema + 10)\n\n    # Since there isn't enough information to find out the exact amount collected,\n    # the result is the expression defining reema in terms of romily\n    solution_dict = solve(equation, (romily, reema))\n\n    return solution_dict[reema]\n\nans = solution()"
    ],
    "1daaad84df24455faa123c07aa34efd8": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(10):\n            if 8 * (10 * a + b) == 3 * (10 * b + a):\n                return 10 * a + b\n\nans = solution()"
    ],
    "d9d2b528c7a443f89a86e5b624e1ee62": [
        "def solution():\n    ans = (612 // 34) * 25\n    return ans\n\nans = solution()"
    ],
    "9cd4bf4428bf41138128774d0ccd221a": [
        "def solution():\n    positive_numbers = [10, 20, 30, 50, 60, 70]\n    negative_numbers = [6, 16, 26, 46, 56, 66]\n    total_sum = sum(positive_numbers) - sum(negative_numbers)\n    return total_sum\n\nans = solution()"
    ],
    "5e82be0f6fa64850ad780e72281f7277": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Benson finished lunch at 2.50 pm, which lasted for 20 minutes\n    lunch_end_time = datetime.strptime(\"14:50\", \"%H:%M\")\n    lunch_duration = timedelta(minutes=20)\n\n    # Benson had watched television for another 20 minutes before lunch\n    tv_duration = timedelta(minutes=20)\n\n    # Benson played for 10 minutes after reaching home\n    play_duration = timedelta(minutes=10)\n\n    # Calculate the time Benson reached home\n    home_arrival_time = lunch_end_time - (lunch_duration + tv_duration + play_duration)\n\n    # Convert to formatted string to extract only the time\n    return home_arrival_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "c49dc118c0ec4d2aa50863db0c43cc31": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Andrew and Louise\n    andrew, louise = symbols('andrew louise')\n\n    # Equations based on the problem statement\n    equation1 = Eq(andrew, 3 * louise)  # Andrew is three times as old as Louise\n    equation2 = Eq(andrew + louise, 84)  # Sum of their ages is 84\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (andrew, louise))\n\n    # Get the age of Louise\n    return solutions[louise]\n\nans = solution()"
    ],
    "7ada23a33bc94088ae1ae8186b32007c": [
        "def solution():\n    from math import factorial\n\n    # Since A and B are always together, treat them as a single unit.\n    # Number of permutations for the this unit with the other 4 students.\n    permutations_with_unit = factorial(5)\n\n    # Additionally, within this unit, A and B can switch places. So, we need to multiply by 2.\n    permutations_for_A_and_B = 2\n\n    # Total number of permutations is the product of both.\n    total_permutations = permutations_with_unit * permutations_for_A_and_B\n\n    return total_permutations\n\nans = solution()"
    ],
    "d6fa863308bf4180b14d7c87b45ff7fe": [
        "def solution():\n    # Find the least common multiple (LCM) of Tom's and William's lap times\n    from math import lcm\n    tom_lap_time = 24\n    william_lap_time = 8\n    \n    # Time for them to meet for the first time\n    first_meeting_time = lcm(tom_lap_time, william_lap_time)\n    \n    return first_meeting_time\n\nans = solution()"
    ],
    "1463a32cbb5c44b19f250a84a1236899": [
        "def solution(y, x):\n    # Fare cost per mile\n    cost_per_mile = 6\n    # Relationship equation: total fare (y) = cost per mile * distance traveled (x)\n    return y == cost_per_mile * x\n\nans = solution(y, x)"
    ],
    "dcab993860a143ab9ab270b31a317e8a": [
        "def solution():\n    largest_num = 0\n    for num in range(10, 100):  # Two-digit numbers range from 10 to 99\n        if (num - 3) % 4 == 0 and (num - 3) % 5 == 0:\n            largest_num = num\n    return largest_num\n\nans = solution()"
    ],
    "6d5c4a1d978545239a3df4d8d35da342": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "c632ecf0b70c4dc68f095f11d53a2c48": [
        "def solution():\n    # Let x be the number of steps the escalator has.\n\n    # When Peter climbs at 1 step per second, he climbs 10 steps.\n    # Let the escalator be running for t seconds in this case.\n    # Then the escalator itself would cover x - 10 steps in t seconds.\n    # Therefore, t = x - 10 (1)\n\n    # When Peter climbs at 2 steps per second, he climbs 16 steps.\n    # Let the escalator be running for t/2 seconds in this case (since he takes half the time if he doubles his speed)\n    # Then the escalator itself would cover x - 16 steps in t/2 seconds.\n    # Therefore 2*(x - 16) = x - 10, rearranging gives x = 42 (2)\n\n    return 42\n\nans = solution()"
    ],
    "dabcd77349ae4d299a61e7caf4c19962": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, green, purple = symbols('red green purple')\n\n    # Equations based on the problem statement\n    equation1 = Eq(red, green / 4)\n    equation2 = Eq(red, 3/5 * purple)\n    equation3 = Eq(4 * red + 5 * green + 7 * purple, 642)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (red, green, purple))\n\n    return solutions[purple]\n\nans = solution()"
    ],
    "c530bf9072b44544be96e328b31dddec": [
        "def solution():\n    total_sweets = 138\n    min_sweets_per_student = 5\n\n    # Calculate the maximum possible class size by dividing the total sweets by the minimum sweets per student\n    max_class_size = total_sweets // min_sweets_per_student\n    \n    # Since sweets are distributed as evenly as possible, the actual class size could be smaller \n    # Check which size makes the distribution as even as possible\n    while total_sweets % max_class_size != 0:\n        max_class_size -= 1\n\n    return max_class_size\n\nans = solution()"
    ],
    "5dd30416f315499b8a0dbde91c6c41cf": [
        "def solution():\n    # previous product\n    previous_product = 246 * 135\n    \n    # adding difference for two extra 135s\n    ans = previous_product + 2 * 135\n    \n    return ans\n\nans = solution()"
    ],
    "63b0962a80a14f52b0f59716321e5cc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    \n    equation = Eq(34 - 3 * (2 * x - 2), 16)\n    \n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "dd6f7bdd1929429eadda217510a131e9": [
        "def solution():\n    road_length = 500\n    tree_interval = 5\n    \n    num_trees = (road_length // tree_interval) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "8bb5257fccb34dadb3f706c8afa40ab1": [
        "def solution():\n    sum = 3 * 10 + 33 * 0.01 + 300 * 0.001\n    return sum\n\nans = solution()"
    ],
    "728ef59836434ae1bf3a1b1506cf0b69": [
        "def solution():\n    result = 0.25 * 1200\n    return result\n\nans = solution()"
    ],
    "a270f073fd714e96b31da30d7e7b2333": [
        "def solution():\n    james_height = 120  # cm\n    height_difference = 30  # James is 30cm shorter than Mark\n    mark_height = james_height + height_difference\n    return mark_height\n\nans = solution()"
    ],
    "fc6ca0edb0d64b2c9a19de7afec2cf87": [
        "def solution():\n    total_stickers = 243\n    stickers_per_child = 6\n    remaining_stickers = 3\n\n    children_count = (total_stickers - remaining_stickers) // stickers_per_child\n\n    return children_count\n\nans = solution()"
    ],
    "296f5e0875b34350bfa03c591217b39e": [
        "def solution():\n    total_blocks = 20\n    given_blocks = total_blocks / 4\n    remaining_blocks = total_blocks - given_blocks\n    return remaining_blocks\n\nans = solution()"
    ],
    "52c6df5f73ca41218bfc3137351d2ab7": [
        "def solution():\n    for hundreds in range(1, 5):\n        for tens in range(hundreds + 1, 10, 2):  # Ensure tens digit is greater and even\n            for ones in range(0, 10, 2):  # Ensure ones digit is even\n                if ones == 2 * hundreds:  # Check if ones is twice hundreds\n                    number = hundreds * 100 + tens * 10 + ones\n                    if number % 2 == 0 and number % 9 == 0:  # Check divisibility by 2 and 9\n                        return number\n\nans = solution()"
    ],
    "f24a947247034c0d9d80524cd5787f66": [
        "def solution():\n    ans = 7268 + 94 + 567\n    return ans\n\nans = solution()"
    ],
    "0f2e5c37cda24be7a26aca5a0cef0e9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jon, miguel = symbols('jon miguel')\n\n    equation1 = Eq(jon, miguel + 0.3 * miguel)\n    equation2 = Eq(jon + miguel, 46)\n\n    solutions = solve((equation1, equation2), (jon, miguel))\n\n    return solutions[jon]\n\nans = solution()"
    ],
    "a3a5c767bd45427d82afb83f82fc1001": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sally, ken = symbols('sally ken')\n\n    # Initial ratio condition: Sally has chocolates in the ratio 5:7 compared to Ken\n    equation1 = Eq(sally/ken, 5/7)\n\n    # After Ken gives Sally 24 chocolates\n    equation2 = Eq(sally + 24, 2 * (ken - 24))\n\n    # Solve for Sally and Ken\n    solutions = solve((equation1, equation2), (sally, ken))\n\n    # Return the number of chocolates Ken has in the end\n    return solutions[ken]\n\nans = solution()"
    ],
    "5efa232175da4ea8aef5abb6b0a6ab63": [
        "def solution():\n    bill = 82\n    free_hours = 40\n    max_hours = 168\n\n    # bill breakdown\n    bill -= 5 * 10  # 10 hours at $5 per hour\n    if bill <= 0:\n        return free_hours + (82 // 5)\n\n    bill -= 8 * 10  # next 10 hours at $8 per hour\n    if bill <= 0:\n        return free_hours + 10 + (bill + 80) // 8\n\n    # remaining hours at $15 per hour\n    additional_hours = bill // 15\n\n    total_hours = free_hours + 20 + additional_hours\n    return total_hours\n\nans = solution()"
    ],
    "51079614a5ec47b0b15c1b5488ae900f": [
        "def solution():\n    ans = 478 - 189\n    return ans\n\nans = solution()"
    ],
    "89a89120ab754c9caf6049809ce30d70": [
        "def solution():\n    bill = 55\n    tip_percentage = 20\n    tax_percentage = 10\n\n    tip_amount = (bill * tip_percentage) / 100\n    tax_amount = (bill * tax_percentage) / 100\n    total_cost = bill + tip_amount + tax_amount\n\n    return total_cost\n\nans = solution()"
    ],
    "1e972793be384a17b12b0af5d4176a57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the price of one color pencil and one notebook\n    pencil, notebook = symbols('pencil notebook')\n    \n    # Create two equations based on the given problem\n    equation1 = Eq(5 * pencil + 6 * notebook, 17)\n    equation2 = Eq(8 * pencil + 6 * notebook, 20)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (pencil, notebook))\n    \n    # Find the total cost for 1 color pencil and 1 notebook\n    total_cost = solutions[pencil] + solutions[notebook]\n    \n    return total_cost\n\nans = solution()"
    ],
    "c57f27a1e67c4f79802030c3561c11d4": [
        "def solution():\n    sides_of_triangle = 3\n    sides_of_square = 4\n    number_thought = (2 * sides_of_square) - sides_of_triangle\n    return number_thought\n\nans = solution()"
    ],
    "c38be742ce424260a3f93e4e8335becf": [
        "def solution():\n    original_pay_per_hour = 7.50\n    pay_increase_percentage = 12 / 100\n\n    new_pay_per_hour = original_pay_per_hour * (1 + pay_increase_percentage)\n    \n    return new_pay_per_hour\n\nans = solution()"
    ],
    "02949cc66116485ca8bed41784c54430": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "8696d8e4602b473aa501ef6f73193bfa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    raju, vijay, patrick = symbols('raju vijay patrick')\n    \n    equation1 = Eq(raju, 3 * vijay)\n    equation2 = Eq(raju, patrick + 152)\n    equation3 = Eq((raju + vijay + patrick) / 3, 507)\n    \n    solutions = solve((equation1, equation2, equation3), (raju, vijay, patrick))\n    \n    return solutions[vijay]\n\nans = solution()"
    ],
    "8fddb6866a0c42b6905b4afb3024b9c9": [
        "def solution():\n    return 89 * 19\n\nans = solution()"
    ],
    "60f1559c0b6c431ebd109f40541ca33e": [
        "def solution():\n    return 96 * 8\n\nans = solution()"
    ],
    "27fb27320fd24c98af0e5d6caa596fae": [
        "def solution():\n    joanna_pocket_money_per_week = 5.00\n    amy_pocket_money_per_week = 3.50\n    amy_spent_per_week = 0.75\n    weeks = 5\n\n    joanna_total_savings = joanna_pocket_money_per_week * weeks\n    amy_total_savings = (amy_pocket_money_per_week - amy_spent_per_week) * weeks\n\n    difference = joanna_total_savings - amy_total_savings\n\n    return difference\n\nans = solution()"
    ],
    "6b90c037d1be47a69b827f642dbed228": [
        "def solution():\n    total_digits = 1014\n    current_sum = 0\n    pages = 0\n    \n    for digits_per_page in range(1, 5):  # Page numbers will have at most 4 digits.\n        start_page = 10**(digits_per_page - 1)\n        end_page = 10**digits_per_page - 1\n        pages_in_this_range = end_page - start_page + 1\n\n        if current_sum + pages_in_this_range * digits_per_page >= total_digits:\n            remaining_digits = total_digits - current_sum\n            pages += remaining_digits // digits_per_page\n            break\n        else:\n            current_sum += pages_in_this_range * digits_per_page\n            pages += pages_in_this_range\n\n    return pages\n\nans = solution()"
    ],
    "fc089fb6a2704dc6baf4797d3c3c45b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    magic_number = symbols('magic_number')\n    first_number = 57 + magic_number\n    second_number = 9 + magic_number\n    equation = Eq(first_number, 4 * second_number)\n    \n    solution = solve(equation, magic_number)\n    \n    return solution[magic_number]\n\nans = solution()"
    ],
    "0f2da0528c2f48f5870753bbc07cdc39": [
        "from math import comb\n\ndef solution():\n    total_students = 7 + 6\n    total_teachers = 2\n\n    committee_with_no_female = comb(total_teachers, 1) * comb(7, 4)\n    all_possible_committees = comb(total_teachers, 1) * comb(total_students, 4)\n\n    committees_with_at_least_one_female = all_possible_committees - committee_with_no_female\n\n    return committees_with_at_least_one_female\n\nans = solution()"
    ],
    "b4eefed42dc74e7e8e95f0ff3ff68f36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    \n    equation = Eq(3 * x + 6, x + 16)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "151555f881df4432befb850114db3fff": [
        "def solution():\n    monthly_salary = 3.248\n    debt = 1.6\n    months_needed = debt / monthly_salary\n    return months_needed\n\nans = solution()"
    ],
    "874bf5bc08b84870965ca710d514ca6c": [
        "def solution():\n    ans = sum(10 * i - (6 + 10 * (i - 1)) for i in range(1, 8)) + 2021\n    return ans\n\nans = solution()"
    ],
    "7cd83847e1cb45e8af9499a2ccb9d6d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Alice and her sister's current ages\n    alice, sister = symbols('alice sister')\n\n    # Equation representing that Alice is twice as old as her sister\n    equation1 = Eq(alice, 2 * sister)\n    # Equation representing the total age in 10 years\n    equation2 = Eq(alice + sister + 20, 53)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (alice, sister))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "96fe43257ccf486992d5d460d0a71d9a": [
        "def solution():\n    total_blocks = 20\n    blocks_given = total_blocks / 4\n    blocks_left = total_blocks - blocks_given\n\n    return blocks_left\n\nans = solution()"
    ],
    "1c0ea42cfd6a4ccbbe8d53d2ca3efe95": [
        "def solution():\n    # You are given that the degree of the monomial (-x^3 * y^(2n)) is 5.\n    # Degree of a monomial is the sum of the exponents of all its variables.\n    # So, we need to find `n` such that the sum of the exponents 3 + 2n = 5.\n\n    # Degree of monomial (-x^3 * y^(2n)) = 3 + 2n\n    # Set the degree equal to 5 and solve for n:\n    n = (5 - 3) // 2\n    \n    return n\n\nans = solution()"
    ],
    "6a672f1831e34d92bcdd43e39b7f6729": [
        "def solution():\n    return 7268 + 94 + 567\n\nans = solution()"
    ],
    "a0351e748b1c43eea23b3f8711946c24": [
        "def solution():\n    n = 10\n    nth_term = 5 * n\n    return nth_term\n\nans = solution()"
    ],
    "bce90c0bc27243dbbf3b460013299a73": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let s be the number of chocolates Sally has initially\n    # Let k be the number of chocolates Ken has initially\n    s, k = symbols('s k')\n\n    # According to the ratio given\n    equation1 = Eq(s / k, 5 / 7)\n\n    # Ken gives 24 chocolates to Sally, so now Sally has s + 24 and Ken has k - 24\n    # It's given that after this, Sally has twice as many chocolates as Ken\n    equation2 = Eq(s + 24, 2 * (k - 24))\n\n    # Solve the two equations\n    solutions = solve((equation1, equation2), (s, k))\n\n    # Ken's chocolates in the end (after giving 24 to Sally)\n    ken_final = solutions[k] - 24\n\n    return ken_final\n\nans = solution()"
    ],
    "4971d043e24c45eea658bd168d78c5f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book_price = symbols('book_price')\n\n    # Sarah's purchase: 8 books + 3 pencils = Rebecca's purchase + 1.00\n    # Rebecca's purchase: 3 books + 8 pencils\n    # pencil price = 0.40\n    # Equation: 8*book_price + 3*0.40 = 3*book_price + 8*0.40 + 1.00\n    equation = Eq(8 * book_price + 3 * 0.40, 3 * book_price + 8 * 0.40 + 1.00)\n\n    book_price_value = solve(equation, book_price)\n\n    return book_price_value[0]\n\nans = solution()"
    ],
    "f51ebd85ffb142399f8aa45e108f8c7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    angela, bernice, candice = symbols('angela bernice candice')\n    \n    cost_per_gummy = 6 / 100  # pence to pounds\n    total_spent = 3.42  # in pounds\n    \n    # Equations based on the problem statement\n    equation1 = Eq(angela, bernice + 2)\n    equation2 = Eq(bernice, candice + 8)\n    equation3 = Eq((angela + bernice + candice) * cost_per_gummy, total_spent)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (angela, bernice, candice))\n    \n    return solutions[angela]\n\nans = solution()"
    ],
    "c73139012b3a4617bcdf34be499ab519": [
        "def solution():\n    n = 100\n    # formula for the sum of the first n natural numbers: S_n = n(n+1)/2\n    return n * (n + 1) // 2\n\nans = solution()"
    ],
    "175f3134588c438fbd11afdc6d088ab3": [
        "def solution():\n    # Given the median of the list is 20, and there are 10 numbers in the list,\n    # the median is the average of the 5th and 6th terms since the list is ordered in increasing order.\n    # Since n+7 and n+8 are the 5th and 6th terms, their average is the median.\n    # (n+7 + n+8) / 2 = 20\n    # 2n + 15 = 40\n    # 2n = 25\n    # n = 12.5\n    n = 12.5\n\n    # Calculate the mean as the sum of all terms divided by the number of terms.\n    mean = (n + (n + 2) + (n + 3) + (n + 5) + (n + 7) + (n + 8) + (n + 11) + (n + 14) + (n + 16) + (n + 19)) / 10\n\n    return mean\n\nans = solution()"
    ],
    "f63a917efc384a819f65597f5c2cdf8e": [
        "def solution():\n    total_volume = 10\n    container_volume = 2\n    num_containers = total_volume / container_volume\n    return int(num_containers)\n\nans = solution()"
    ],
    "384f0b70b2a44ba7beb5d3d58e5f61b3": [
        "def solution():\n    total_members = 17\n    handshakes_skipped = 4\n    \n    # Calculate total possible handshakes\n    total_handshakes = total_members * (total_members - 1) // 2\n    \n    # Calculate handshakes that didn't happen (4 members did not shake hands with 3 others each)\n    handshakes_not_happened = handshakes_skipped * (handshakes_skipped - 1) // 2\n    \n    # Calculate the number of handshakes that did happen\n    handshakes_happened = total_handshakes - handshakes_not_happened\n    \n    return handshakes_happened\n\nans = solution()"
    ],
    "f64bb6d575274f2eb7aed9c54b618daf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the three apples weights be a, b, and c with a < b < c.\n    a, b, c = symbols('a b c')\n\n    # If Tim eats the largest apple, the average weight of the remaining two is 70g\n    equation1 = Eq((a + b)/2, 70)\n\n    # If Tim eats the lightest apple, the average weight of the remaining two is 105g\n    equation2 = Eq((b + c)/2, 105)\n\n    # Now solve the two equations to find the values for a, b, and c\n    solutions = solve((equation1, equation2), (a, b, c))\n\n    # The weight difference between the heaviest and lightest apple\n    weight_difference = solutions[c] - solutions[a]\n\n    return weight_difference\n\nans = solution()"
    ],
    "93002079121d48f6aea4f803b68b139d": [
        "def solution():\n    # If x is the smallest number, then (x+1) is the middle number and (x+2) is the largest.\n    # Hence the sum of the three consecutive numbers is x + (x+1) + (x+2).\n    # This simplifies to 3x + 3 = 60.\n    # Solving for x we get x = (60 - 3) / 3\n\n    x = (60 - 3) / 3\n    # The largest number is then (x+2)\n    largest_number = x + 2\n    \n    return int(largest_number)\n\nans = solution()"
    ],
    "0d1b0c5f7803452da1653f98e4626d11": [
        "def solution():\n    return 427 // 7\n\nans = solution()"
    ],
    "8aa228a35f9341e2ba3ad7168a64568b": [
        "def solution():\n    for num in range(1, 10):\n        if int(str(num) + '0') - num == 27:\n            return num\n\nans = solution()"
    ],
    "7be31461e97f4911bea77bc2fc190e08": [
        "def solution():\n    first_term = 2\n    difference = 4\n    n = 11\n\n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "ae79c827ac84468cbfe680efa5f4322f": [
        "def solution():\n    # Given the fox is always the 3rd in line\n    # Thus if the shape of the array is m x n,\n    # Bob must be (2,2) in the array from every direction\n    # Therefore the array must be of shape 3 x 3\n    # So we can calculate total number of animals as follow\n    total_animals = 3 * 3\n    return total_animals\n\nans = solution()"
    ],
    "888de29c136b4d85b33e27c600d1d94a": [
        "def solution():\n    nate_age = 11\n    sister_age = nate_age + 2\n    return sister_age\n\nans = solution()"
    ],
    "a45e4fa740df4a7baa653312b07f2227": [
        "def solution():\n    # Number of intervals between plum trees is one less than the number of plum trees\n    plum_intervals = 41 - 1\n    # Distance between the first and last plum tree\n    plum_road_length = plum_intervals * 4\n\n    # Since pine trees are also planted at both ends of the road, we add another interval\n    pine_intervals = plum_road_length // 5\n    # Number of pine trees is one more than the number of intervals\n    num_pine_trees = pine_intervals + 1\n\n    return num_pine_trees\n\nans = solution()"
    ],
    "b502e3de36614cb6b890c32cf02729c5": [
        "def solution():\n    # Given the puzzle where each letter corresponds to a unique digit:\n    #   U G G\n    # + H A H\n    # -------\n    #   A B B A\n    # The puzzle implies that A can be from [0, 9] but since the bottom number ABBA has A in the thousands place, A cannot be 0\n    # U and H must add up to produce a carry since ABBA is a four digit number and UGG + HAH is only three digits.\n    # It means A cannot be 1 either, otherwise, no carry would be produced.\n    # The maximum value for U and H is 9, and adding two max digits gives us 18, which means A can also not be 9,\n    # So we can deduce A is from [2, 8]\n    \n    for A in range(2, 9):\n        for U in range(0, 10):\n            for G in range(0, 10):\n                for H in range(1, 10):  # H cannot be 0 as it must provide a carry.\n                    for B in range(0, 10):\n                        # Ensure all digits are unique.\n                        if len({A, U, G, H, B}) == 5:\n                            UGG = U * 100 + G * 10 + G\n                            HAH = H * 100 + A * 10 + H\n                            ABBA = A * 1000 + B * 100 + B * 10 + A\n                            # Check if the sum matches the desired pattern.\n                            if UGG + HAH == ABBA:\n                                return A\n\nans = solution()"
    ],
    "6fd47ac3b3fb42dca4192701b2a036bb": [
        "def solution():\n    return 245 // 5\n\nans = solution()"
    ],
    "4f74241972d3482ca774dea7319f446e": [
        "def solution():\n    smallest_multiple = (100 // 11 + 1) * 11\n    largest_multiple = (300 // 11) * 11\n\n    ans = smallest_multiple + largest_multiple\n    return ans\n\nans = solution()"
    ],
    "a5d9770a94fa4709a356e767867213ac": [
        "def solution():\n    incorrect_total = 4000 * 12\n    correct_total = incorrect_total - 2800 + 3040\n    correct_average = correct_total / 12\n    return correct_average\n\nans = solution()"
    ],
    "dae17711b2cd4d8882ad91e169803384": [
        "def solution():\n    marks_scored = 17\n    total_marks = 20\n    \n    percentage = (marks_scored / total_marks) * 100\n    \n    return percentage\n\nans = solution()"
    ],
    "004ab338da1a4dada61e061cc3b9f844": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of one-cent, two-cent, and five-cent coins as o, t, and f respectively.\n    o, t, f = symbols('o t f')\n\n    # Setting up the equations based on the given problem statement\n    # Stacking 6 one-cent coins is the same height as 5 two-cent coins\n    equation1 = Eq(6 * o, 5 * t)\n    # Stacking 4 one-cent coins is the same height as 3 five-cent coins\n    equation2 = Eq(4 * o, 3 * f)\n    # Sam used a total of 124 coins\n    equation3 = Eq(o + t + f, 124)\n    # The three stacks of coins are of equal height\n    equation4 = Eq(6 * o, 4 * o + 2 * t)  # Since the height of 6 one-cent coins is the same as a stack of fives and twos\n\n    solutions = solve((equation1, equation2, equation3, equation4), (o, t, f))\n\n    # Calculate the total value\n    total_value = solutions[o] + 2 * solutions[t] + 5 * solutions[f]\n\n    return total_value\n\nans = solution()"
    ],
    "9bdf1b39c69d40c192cf8573177c7066": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(17*x - 3*(6 + x), 9*x + 32)\n    ans = solve(equation, x)\n\n    return ans[0]\n\nans = solution()"
    ],
    "25c62dcd851e4ad1b5f7189dcfb4ed2b": [
        "def solution():\n    initial_money = 200\n    spent_on_books = 0.25 * initial_money\n    remaining_after_books = initial_money - spent_on_books\n    spent_on_dvd = 0.20 * remaining_after_books\n    remaining_money = remaining_after_books - spent_on_dvd\n    return remaining_money\n\nans = solution()"
    ],
    "0eb5531c437b4567aef0bba6c28958a4": [
        "def solution(m):\n    return m / 12\n\nans = solution(10)  # Replace 10 with the actual number of components produced last year"
    ],
    "ed97e5e57d5b40ec8113dcb104438e54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the initial amount of water in Container A as 'a' mL.\n    a = symbols('a')\n\n    # According to the problem, Container A has 350 mL more water than Container B.\n    # So, Container B has (a - 350) mL at first.\n\n    # After spilling 500 mL out of Container A, it has (a - 500) mL left.\n    # Now, Container B has twice as much water as Container A.\n    # Therefore, Container B has 2 * (a - 500) mL.\n\n    # Container B initially had (a - 350) mL, and it still has the same amount because it's not affected by the spill from Container A.\n    # We can setup an equation as follows: 2 * (a - 500) = a - 350\n\n    equation = Eq(2 * (a - 500), a - 350)\n\n    # Solve the equation for 'a'\n    solution = solve(equation, a)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a3c32223f3b045ae854ecf8d286778e6": [
        "def solution():\n    # The greatest number of red pens will be when the total pens in the box are maximum under 100.\n    # Let's find the common ratio that will give us the total less than 100 pens.\n    \n    # Assume the number of green pens is 4k, then blue pens will be 2/5 * 4k = 8/5k and red pens will be k\n    # Total pens T = (8/5k) + 4k + k\n    # T = (8/5)k + 5k\n    # T = (33/5)k\n    # We want to maximize k such that T < 100\n\n    max_k = 0\n    for k in range(1, 100):\n        total_pens = (33/5) * k\n        if total_pens < 100:\n            max_k = k\n        else:\n            break\n\n    # Now we calculate the maximum possible red pens with the maximum k\n    max_red_pens = 1 * max_k  # Since the ratio of green pens to red pens is 4:1\n\n    return max_red_pens\n\nans = solution()"
    ],
    "e8a29ad030a44c90b8487dcc6ab6265a": [
        "def solution():\n    for num in range(998001, 100000, -1):\n        if str(num) == str(num)[::-1] and num % 6 == 0:\n            return num\n\nans = solution()"
    ],
    "3f99ba9a016d4255a61b7cc828b2284d": [
        "def solution():\n    boys_initial = 216\n    girls_initial = 153\n    children_joined = 37\n\n    total_children_after_an_hour = boys_initial + girls_initial + children_joined\n\n    return total_children_after_an_hour\n\nans = solution()"
    ],
    "e990e7f85afe4ec8b4a88f34ca128f91": [
        "def solution():\n    cans_per_day = 42 / 6\n    cans_in_9_days = cans_per_day * 9\n    return cans_in_9_days\n\nans = solution()"
    ],
    "3d026487768a4329970e9623128a6980": [
        "def solution():\n    ans = 56 + 78 + 44 + 22\n    return ans\n\nans = solution()"
    ],
    "b0e8486e84644676b58c927c2f5c98ee": [
        "def solution():\n    desired_length = 1.83  # meters\n    shortfall = 0.10       # meters (10 cm)\n\n    length_in_garage = desired_length - shortfall\n\n    return length_in_garage\n\nans = solution()"
    ],
    "3bd10f66a047470cb619292f83def4bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # define symbols for total pins, needles, and amount sold\n    pins, needles = symbols('pins needles')\n\n    # total pins and needles\n    total = 2540\n\n    # pins sold\n    pins_sold = 1820\n\n    # needles sold, which is 4/5 of the needles\n    needles_sold = (4/5) * needles\n\n    # creating two equations based on the given information\n    # equation 1: total pins and needles before sale\n    eq1 = Eq(pins + needles, total)\n\n    # equation 2: pins and needles are the same after sale\n    eq2 = Eq(pins - pins_sold, needles - needles_sold)\n\n    # solving the system of equations\n    solutions = solve((eq1, eq2), (pins, needles))\n\n    # needles left after selling 4/5 of them\n    needles_left = solutions[needles] - needles_sold\n\n    return needles_left\n\nans = solution()"
    ],
    "4e932e68be27467ea297053d9901fc5e": [
        "def solution():\n    pattern = [8, 8, 3, 3, 2, 5]\n    pattern_sum = sum(pattern)\n    pattern_length = len(pattern)\n    \n    full_patterns = 41 // pattern_length\n    remaining_numbers = 41 % pattern_length\n    \n    sum_of_full_patterns = full_patterns * pattern_sum\n    sum_of_remaining_numbers = sum(pattern[:remaining_numbers])\n    \n    total_sum = sum_of_full_patterns + sum_of_remaining_numbers\n    \n    return total_sum\n\nans = solution()"
    ],
    "5a0d6b60b12e4a5fa3381f303b4ec98e": [
        "def solution():\n    result = (2 / 7) * 315\n    return result\n\nans = solution()"
    ],
    "5ed239080ded493396d3231a4454902f": [
        "def solution():\n    # Let x be the total number of marbles Wei Yan had initially.\n    x = symbols('x')\n\n    # After giving away 3/8 of his marbles, he would have left 5/8 of x.\n    # After giving 5/7 of the remaining to his brother, he would have 2/7 of what is left from 5/8 of x.\n    # His cousin then gave him 408 marbles. In the end, he had twice as many marbles as he started with, which is 2x.\n    # Equation: (5/8 * x) * (2/7) + 408 = 2x\n\n    equation = Eq((5/8 * x) * (2/7) + 408, 2 * x)\n\n    # Solve the equation for x.\n    solution = solve(equation, x)\n\n    # Return the initial number of marbles (as an integer if the solution is a number)\n    return int(solution[0])\n\nans = solution()"
    ],
    "c7a29e2ef9654a2a957ff7a2cb12c3aa": [
        "def solution():\n    ways = 0\n    for two_p in range(0, 24):\n        for five_p in range(0, 10):\n            if 2 * two_p + 5 * five_p == 47:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "ce5f19623c5a44689e7c49754192cf5a": [
        "def solution():\n    numerators = [(9+10+11), (10+11+12), (11+12+13), (12+13+14)]\n    denominators = [8, 9, 10, 11]\n    \n    divisors = [(numerators[i] / denominators[i]) * (-1) ** i for i in range(4)]\n    numerator = sum(divisors)\n    \n    differences = [1/denominators[i] * (-1) ** i for i in range(4)]\n    denominator = sum(differences)\n    \n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "98c9966f7fd249d7beb63974bfe3742c": [
        "def solution():\n    brian_age = 14\n    father_age = 41\n    \n    while True:\n        brian_age += 1\n        father_age += 1\n\n        if str(brian_age) == str(father_age)[::-1]:\n            return brian_age\n\nans = solution()"
    ],
    "591840ca7c7b45a5bd7b76b65a763eeb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(52 - (4*x - 3), 47)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "ef45cb41c0684c548c0b00944deb7b6e": [
        "def solution():\n    count = 0\n    for x1 in range(1, 11):\n        for x2 in range(1, 11 - x1):\n            x3 = 11 - x1 - x2\n            if x3 > 0 and x3 != x1 and x3 != x2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "7a275792c5364908a3e7b3c7c4d8f6af": [
        "def solution():\n    number1 = 654876\n    number2 = 279745\n\n    rounded_number1 = round(number1, -2)\n    rounded_number2 = round(number2, -2)\n\n    estimated_difference = rounded_number1 - rounded_number2\n\n    return estimated_difference\n\nans = solution()"
    ],
    "4b78873d37fb432ca3d3cbcd97a41dd1": [
        "def solution():\n    # 8 as sum of two or more non-zero natural numbers can be visualized with stars and bars method\n    # We will place 7 bars among the 8 stars and count the number of ways to do so\n    # But since we need at least two numbers in the sum, we will consider one less bar\n    # So we place 6 bars to split 7 potential parts (considering 8 stars), which leads to 7 partitions\n    # Hence it's equivalent to calculate the number of combinations of placing 6 bars in 7 positions\n\n    from math import comb\n\n    # Calculate the combinations, C(n, k) = n! / [(n-k)!k!]\n    number_of_ways = comb(7, 6)\n\n    return number_of_ways\n\nans = solution()"
    ],
    "9aae6b402ba548c6930873d942339f30": [
        "def solution():\n    time_seconds = 16\n    length_meters = 480\n\n    speed_meters_per_second = length_meters / time_seconds\n\n    return speed_meters_per_second\n\nans = solution()"
    ],
    "58b3af9d6c964137b1edfb53c29428ea": [
        "def solution():\n    ans = sum(range(1, 6)) + sum(range(1, 5))\n    return ans\n\nans = solution()"
    ],
    "80a6303359124d99934818dd22810e2e": [
        "def solution():\n    ans = 49 + 83\n    return ans\n\nans = solution()"
    ],
    "fbf2d88569644819af3dd38084210d8b": [
        "def solution():\n    cost_per_kg = 3.60 / 2.5\n    cost_for_3_point_5_kg = cost_per_kg * 3.5\n    return cost_for_3_point_5_kg\n\nans = solution()"
    ],
    "20e6b2c641d34326ba0e011da65e2397": [
        "def solution():\n    ans = 20.6 + 5.2 + 1.4 + 4.8\n    return ans\n\nans = solution()"
    ],
    "2fb1bc8c622247da958854a407c487b9": [
        "def solution():\n    return (2/5) * 30\n\nans = solution()"
    ],
    "6b573c8aa446405c9ce58ca024a8db57": [
        "def solution():\n    return (5 / 8) * 4000\n\nans = solution()"
    ],
    "3b599d1537964d4d8232681ee0808bca": [
        "def solution():\n    num_lampposts = 113\n    distance_between_lampposts = 8\n    # Subtract 1 since lampposts are on both ends\n    road_length = (num_lampposts - 1) * distance_between_lampposts\n    return road_length\n\nans = solution()"
    ],
    "67f220877e984c29ad61b7f41c214535": [
        "def solution():\n    return (10 ** 5) / (5 ** 5)\n\nans = solution()"
    ],
    "48554051f2e24553a7af8d7920ec5816": [
        "def solution():\n    total_pupils = 40\n    failed_pupils = 14\n    failed_percentage = (failed_pupils / total_pupils) * 100\n    return failed_percentage\n\nans = solution()"
    ],
    "5f04cbde7c154926a18bd9d4d73e17bf": [
        "def solution():\n    erased_sum = 0\n    for i in range(1, 51):\n        if '3' in str(i):\n            erased_sum += i\n    return erased_sum\n\nans = solution()"
    ],
    "66221e9a8b3746c485f75a9f4a5d0ddb": [
        "def solution():\n    types_of_pasta = 4\n    types_of_sauces = 3\n    types_of_toppings = 3\n    \n    ans = types_of_pasta * types_of_sauces * types_of_toppings\n    \n    return ans\n\nans = solution()"
    ],
    "a54ae46dec7f42e29795d23b9ef90715": [
        "def solution():\n    numbers = [0.89, 0.9, 0.17, 0.72, 0.73]\n    max_num = max(numbers)\n    min_num = min(numbers)\n    difference = max_num - min_num\n    return difference\n\nans = solution()"
    ],
    "5ffbee4470f04187ad886c281d595cc1": [
        "def solution():\n    total_guests = 153\n    poppers_per_bag = 12\n\n    poppers_left = total_guests % poppers_per_bag\n    return poppers_left\n\nans = solution()"
    ],
    "8523b28be59d40be8d747baa32fe31b2": [
        "def solution():\n    base = 7\n    exponent = 2023\n    ones_digit = (base ** exponent) % 10\n    return ones_digit\n\nans = solution()"
    ],
    "7ef36b5f0f06421e85d5adcf3d61a56c": [
        "def solution():\n    # In the worst case scenario, the warden will find the correct key for the first room on the first attempt,\n    # the correct key for the second room on the second attempt (since the first key is already used for the first room),\n    # and so on, until the last room, where the warden will have no choice but to use the last remaining key.\n    # This makes the problem a sum of an arithmetic progression 1 + 2 + 3 + ... + n for n rooms/keys.\n    n = 10\n    num_tries = n * (n + 1) // 2  # formula for the sum of the first n natural numbers\n    \n    return num_tries\n\nans = solution()"
    ],
    "66eeed32cf3f4adc8bdbd45de1710156": [
        "def solution():\n    import math\n\n    numerator = math.pow(-13.333333333333334, 1/3) * math.pow(4.090909090909091, 2)\n    denominator = 59.24 - math.sqrt(11.11111111111111)\n\n    ans = round(numerator / denominator, 3)\n\n    return ans\n\nans = solution()"
    ],
    "d6c0469e3c2e4cf7ada3a095234ebb1c": [
        "def solution():\n    original_number = ''.join(str(i) for i in range(1, 31))\n    # Since we want the smallest number we remove the last 46 digits\n    smallest_number = original_number[:-46]\n    return int(smallest_number)\n\nans = solution()"
    ],
    "5e5e594f0cb646f382c3348317a05dec": [
        "def solution():\n    for num in range(999, 99, -1):\n        if num % 5 == 3 and num % 6 == 2 and num % 7 == 1:\n            return num\n\nans = solution()"
    ],
    "e47aa6dbf96a4f8f919752049304b476": [
        "def solution():\n    # The least 5-digit palindrome is \"10001\" (Remember, palindromes cannot start with 0)\n    least_5_digit_palindrome = int(\"10001\")\n    # The greatest 6-digit palindrome is \"999999\"\n    greatest_6_digit_palindrome = int(\"999999\")\n\n    # Compute the difference between the two palindromes\n    difference = greatest_6_digit_palindrome - least_5_digit_palindrome\n\n    return difference\n\nans = solution()"
    ],
    "dd388341dc404def898b956143854ae5": [
        "from math import comb\n\ndef solution():\n    total_children = 10\n    children_picked = 2\n    return comb(total_children, children_picked)\n\nans = solution()"
    ],
    "f189c3cfa2ce4635aec8a32b63b8d264": [
        "def solution():\n    boys = 20\n    # Total members are four parts where 1 part is boys and 3 parts are girls\n    total_parts = 4\n    girls_parts = total_parts - 1  # Since boys have 1 part out of 4\n\n    # To find the number of girls we calculate the number of girls per part and multiply by 3\n    girls_per_part = boys\n    total_girls = girls_per_part * girls_parts\n\n    return total_girls\n\nans = solution()"
    ],
    "4f5cb4eaf89140bd9217b1719727dd6c": [
        "def solution():\n    ans = (32 - 15) - 12\n    return ans\n\nans = solution()"
    ],
    "889138baccd24c1b9eb080bdb667f596": [
        "def solution():\n    ways = 0\n    for two_p in range(0, 24):  # 47 // 2 + 1\n        for five_p in range(0, 10):  # 47 // 5 + 1\n            if (2 * two_p + 5 * five_p) == 47:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "e097362981d0409885ba18d30b163d07": [
        "def solution():\n    ans = 11 + 17 + 9 - 7 + 12 + 8\n    return ans\n\nans = solution()"
    ],
    "540be23e94244c70aad6ecd37c304418": [
        "def solution():\n    two_seater_benches = 6\n    three_seater_benches = 9\n    \n    total_seats = (two_seater_benches * 2) + (three_seater_benches * 3)\n    \n    return total_seats\n\nans = solution()"
    ],
    "adb16ed119df40bda080aaed7ef8ac1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the prices of one banana and one apple as symbolic variables\n    banana, apple = symbols('banana apple')\n\n    # Two equations representing the costs Ellie and Beth paid\n    equation1 = Eq(2 * banana + 3 * apple, 1.50)\n    equation2 = Eq(3 * banana + 2 * apple, 1.45)\n\n    # Solve the system of equations for the price of one banana and one apple\n    solutions = solve((equation1, equation2), (banana, apple))\n\n    # Calculate the total cost for one banana and one apple\n    total_cost = solutions[banana] + solutions[apple]\n\n    return total_cost\n\nans = solution()"
    ],
    "468559e91e614d4bae2de59111f672af": [
        "def solution():\n    book_cost = 15.49\n    payment = 16  # 16 pounds in 1 pound coins\n\n    change = payment - book_cost\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "ac29be7b853c4812bccecb19739c2026": [
        "def solution():\n    sum = 0\n    for i in range(99, 120, 4):\n        sum += i\n        sum -= i + 2\n        \n    return sum\n\nans = solution()"
    ],
    "216cb1366d314b5dbd12758607304eb7": [
        "def solution():\n    A = (201 + 1/7) / 8 - 1/7\n    return A\n\nans = solution()"
    ],
    "04c5b12aa7f042fabd03ff53cb7e08e1": [
        "def solution():\n    marshmallows_per_minute = 5\n    minutes = 5\n\n    total_marshmallows = marshmallows_per_minute * minutes\n\n    return total_marshmallows\n\nans = solution()"
    ],
    "7e57b2275ee24957a6f27d1a194a17fe": [
        "def solution():\n    # Since Rona needs a pair of gloves of the same color,\n    # in the worst case, she will take out gloves of all different colors first.\n    # For 5 colors, she can take one of each, which would be 5 gloves.\n    # To ensure she has a pair, she needs to take one more glove,\n    # which will definitely be of the same color as one she already took out.\n    \n    gloves_needed = 5 + 1\n    \n    return gloves_needed\n\nans = solution()"
    ],
    "680ddbe0ce3c49ce854bcd2f1ea66237": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    footballs, basketballs = symbols('footballs basketballs')\n    \n    # Initial condition equation\n    initial_condition = Eq(footballs, (2/5) * basketballs)\n    \n    # After selling 16 basketballs\n    after_selling_condition = Eq(footballs, (2/3) * (basketballs - 16))\n    \n    # Solve the system of equations\n    solutions = solve((initial_condition, after_selling_condition), (footballs, basketballs))\n    \n    total_initial = solutions[footballs] + solutions[basketballs]\n\n    return total_initial\n\nans = solution()"
    ],
    "01951c851f4d440aa5d5a49d736fb69d": [
        "def solution():\n    start = 30\n    end = 82\n    multiple_of = 8\n    \n    first_multiple = -(-start // multiple_of) * multiple_of\n    last_multiple = (end // multiple_of) * multiple_of\n\n    ans = (last_multiple - first_multiple) // multiple_of + 1\n    \n    return ans\n\nans = solution()"
    ],
    "ce3e27f032134ea699180a318687918c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the current age of the younger brother and y be the current age of the older brother.\n    x, y = symbols('x y')\n\n    # When the older brother was the same age as the younger brother's current age (x), the younger brother was 12.\n    equation1 = Eq(y - x, 12)\n\n    # When the younger brother becomes the same age as the older brother's current age (y), the older brother will be 27.\n    equation2 = Eq(x + (y - x), 27)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "c6d0a3426bdd48c09f8e5ed6be864293": [
        "def solution():\n    return (2/5) * 30\n\nans = solution()"
    ],
    "32eb233b7b8648fc98ae6c8e1000cce8": [
        "def solution():\n    ans = 13 * (13 - 1) // 2\n    return ans\n\nans = solution()"
    ],
    "3127ad21500549f99d1530b6020f645c": [
        "def solution():\n    original_price = 120\n    increased_price = original_price * (1 + 10 / 100)\n    final_price = increased_price * (1 - 10 / 100)\n    return final_price\n\nans = solution()"
    ],
    "3117c2400ae549259f555f986ce29058": [
        "def solution():\n    total_pupils = 40\n    failed_pupils = 14\n    \n    failed_percentage = (failed_pupils / total_pupils) * 100\n\n    return failed_percentage\n\nans = solution()"
    ],
    "83eeb3967efd4f44ae944aeda3665452": [
        "def solution():\n    erased_sum = sum(number for number in range(1, 51) if '3' in str(number))\n    return erased_sum\n\nans = solution()"
    ],
    "e72ae7b5041949c2b5780adfc4f7a4d6": [
        "def solution():\n    # Flora's current age\n    flora_age = 5\n    \n    # Flora's age two years ago\n    flora_age_2_years_ago = flora_age - 2\n    \n    # Father's age two years ago (which is 9 times Flora's age at that time)\n    father_age_2_years_ago = 9 * flora_age_2_years_ago\n    \n    # Father's current age\n    father_age = father_age_2_years_ago + 2\n    \n    return father_age\n\nans = solution()"
    ],
    "a10dc724d9ee4196877466390813cdbe": [
        "def solution():\n    sweets = 0\n    for i in range(31, 40):\n        if i % 4 == 0 and i % 6 == 0:\n            sweets = i\n            break\n    return sweets\n\nans = solution()"
    ],
    "f324ee4f900c4965905630c53b282ca4": [
        "def solution():\n    ans = 122.55 + 9.45 + 13.21 - 3.21\n    return ans\n\nans = solution()"
    ],
    "3e2cfeed3b034453a6cd4c890991cff6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    bugcat, pusheen, doggo = symbols('bugcat pusheen doggo')\n    \n    equation1 = Eq(bugcat, 5 * pusheen)\n    equation2 = Eq(bugcat, doggo + 53)\n    equation3 = Eq(bugcat + pusheen + doggo, 189)\n    \n    solutions = solve((equation1, equation2, equation3), (bugcat, pusheen, doggo))\n    \n    return solutions[doggo]\n\nans = solution()"
    ],
    "1191b2497aca4e478f89acd3913baa4b": [
        "def solution():\n    ans = 1.1 * (1.2 + 1.3) * 2\n    return ans\n\nans = solution()"
    ],
    "5a2adc2e38cb4df2b6461fbcb699d0a0": [
        "def solution():\n    # speed of students in km/min\n    student_speed = 8 / 60\n    # speed of teacher in km/min\n    teacher_speed = 12 / 60\n    # total time spent by teacher in hours\n    total_time = 7.2 / 60\n\n    # Relative speed of teacher when going towards head of the line (in km/min)\n    speed_towards = teacher_speed + student_speed\n    # Relative speed of teacher when going back to the end of the line (in km/min)\n    speed_back = teacher_speed - student_speed\n\n    # Let 'd' be the distance from the end to the head of the line in km\n    # Total distance covered by teacher going towards and back from the head of the line: d / speed_towards + d / speed_back\n    # This total distance covered in time should equal to the total time spent (7.2 minutes)\n    # Setting up the equation: d / speed_towards + d / speed_back = total_time\n    # Solving for 'd' gives us the length of the line\n\n    # Rearrange to calculate 'd'\n    d = total_time / (1 / speed_towards + 1 / speed_back)\n\n    return d\n\nans = solution()"
    ],
    "ccee253cade74bf4b980a1d6da9300b1": [
        "def solution():\n    return 902 - 387\n\nans = solution()"
    ],
    "8adc9a67754d493090774f606c1387c2": [
        "def solution():\n    count = 0\n    for i in range(8, 86):\n        count += str(i).count('3')\n        if i == 83:\n            break\n    return count\n\nans = solution()"
    ],
    "7c0a8adbe97047ac8c3d2545bed65331": [
        "def solution():\n    count = 0\n    for i in range(1, 26):\n        number = str(i * 2)\n        count += number.count('3')\n    return count\n\nans = solution()"
    ],
    "92b6d681156647e98a2b8f515678090b": [
        "def solution():\n    # Convert minutes to hours (1 minute = 1/60 hours)\n    late_time = 20 / 60\n    early_time = 10 / 60\n    \n    # Let d be the distance from home to office\n    # Let t be the actual time to travel at 4 km/h without being late\n    # 4(d/4) is the time taken at the speed of 4 km/h\n    # 6(d/6) is the time taken at the speed of 6 km/h\n    # The time difference between being 20 minutes late and 10 minutes early is 30 minutes (20 + 10)\n    # We can therefore set up the equation: (d/4 + 1/3) - (d/6 - 1/6) = 1/2\n    # Solving this equation will give us d, the distance from home to office in km\n    # Multiply all terms by 12 to clear fractions:\n    # 3d + 4 - 2d + 2 = 6\n    # Combine like terms:\n    # d + 6 = 6\n    # d = 6 - 6\n    # Since the left side of the equation must be equal to the right side, and we have a discrepancy of 6, \n    # there must be an issue with the initial setup. The correct setup should be:\n    # (d/4 - t) = late_time\n    # (d/6 - t) = -early_time\n    # Thus we find the system of equations as below:\n    # d/4 - d/6 = late_time + early_time\n    # Solve for d:\n    # Multiply all terms by 12 (the least common multiple of 4 and 6) to clear fractions:\n    # 3d - 2d = 12 * (late_time + early_time)\n    # Combine like terms:\n    d = 12 * (late_time + early_time)\n\n    return d\n\nans = solution()"
    ],
    "fd011cee8c7149b08bd7a235ce74b4b0": [
        "def solution():\n    exchange_rate = 1.25  # 1 pound in euros\n    value_in_pence = exchange_rate * 100  # converting pounds to pence\n    return value_in_pence\n\nans = solution()"
    ],
    "7f5de3640130476b8479c8c57c6cceab": [
        "def solution():\n    ans = (32 - 15) - 12\n    return ans\n\nans = solution()"
    ],
    "5f10a8b2ef2a4f548faa94902d80cc0f": [
        "def solution():\n    remaining = 3\n    ken_took = (remaining + 1) * 2\n    remaining += ken_took\n    nini_took = (remaining - 3) * 2\n    remaining += nini_took\n    ivy_took = (remaining + 2) * 2\n    remaining += ivy_took\n    eddie_took = (remaining - 1) * 2\n    original_candies = remaining + eddie_took\n    return original_candies\n\nans = solution()"
    ],
    "d2ad7065c3964fdb85960dd64b7389fe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    roses, tulips, sunflowers = symbols('roses tulips sunflowers')\n\n    equation1 = Eq(tulips, 3 * roses)\n    equation2 = Eq(sunflowers, roses + 40)\n    equation3 = Eq(roses + tulips + sunflowers, 590)\n\n    solutions = solve((equation1, equation2, equation3), (roses, tulips, sunflowers))\n\n    return solutions[roses]\n\nans = solution()"
    ],
    "aea05f0dcdd04e4c903d863ad3465317": [
        "def solution():\n    from itertools import permutations\n    \n    # Generate all unique permutations of 'CYZZ'\n    unique_permutations = set(permutations('CYZZ'))\n    # Count the number of unique permutations\n    count = len(unique_permutations)\n    \n    return count\n\nans = solution()"
    ],
    "c03d7d32adb849f8813c089f2f3caaaa": [
        "def solution():\n    return 24 * 25 * 31\n\nans = solution()"
    ],
    "e4bf62e1d6374c7db8fdd451a0891d39": [
        "def solution():\n    # The snail climbs 7 metres during the day and 3 metres out on the 6th day.\n    # Total climb by the end of the 5th day\n    total_climb_5_days = 5 * 7\n    # Since on the 6th day, it climbs out, it must be within 7 metres reach.\n    # Distance left to climb on the 6th day is therefore the gap between total_climb_5_days and 18 metres.\n    distance_left_6th_day = 18 - total_climb_5_days\n    # The snail climbs out on the 6th day, so it climbs 3 metres more than the distance left\n    climb_6th_day = distance_left_6th_day + 3\n    # The snail slides down a certain amount every night, which we'll call 'slide'.\n    # On the 5th night, the snail must be at the position where after sliding, it is within 3 metres of the top.\n    # Hence, we can calculate slide as the difference between what it climbs on the 6th day and what it normally climbs.\n    slide = 7 - climb_6th_day\n    return slide\n\nans = solution()"
    ],
    "26234260bf8544e8be9832159593b76c": [
        "def solution():\n    for boys in range(1, 99):\n        girls = 3 * boys\n        total_paintbrushes = 2 * girls + 3 * boys\n        if total_paintbrushes == 99:\n            return girls\n\nans = solution()"
    ],
    "f5e0a986e3934f67ba17ff2b35ad8068": [
        "def solution():\n    marshmallows_per_minute = 5\n    total_minutes = 5\n    total_marshmallows = marshmallows_per_minute * total_minutes\n    return total_marshmallows\n\nans = solution()"
    ],
    "c49b5ae0746f481e9831c9c0d1d6f386": [
        "def solution():\n    # Conversion factors\n    meter_to_cm = 100\n    foot_to_cm = 30.48\n    mm_to_cm = 0.1\n\n    # Convert all heights to cm\n    height_in_cm_5m = 5 * meter_to_cm\n    height_in_cm_120cm = 120\n    height_in_cm_50mm = 50 * mm_to_cm\n    height_in_cm_8ft = 8 * foot_to_cm\n\n    # Set the typical range of human height in cm (roughly from 100cm to 250cm)\n    min_height = 100\n    max_height = 250\n\n    # Determine which heights are plausible for pupils\n    plausible_heights = []\n    for height in [height_in_cm_5m, height_in_cm_120cm, height_in_cm_50mm, height_in_cm_8ft]:\n        if min_height <= height <= max_height:\n            plausible_heights.append(height)\n\n    # Return the correct answer, note that we are not returning the plausible heights but rather the identifiers (5m, 120cm, etc.)\n    if height_in_cm_5m in plausible_heights:\n        ans = '5m'\n    elif height_in_cm_120cm in plausible_heights:\n        ans = '120cm'\n    elif height_in_cm_50mm in plausible_heights:\n        ans = '50mm'\n    elif height_in_cm_8ft in plausible_heights:\n        ans = '8 feet'\n    \n    return ans\n\nans = solution()"
    ],
    "2c231e6d73964ddb90cae67a6e2c06ca": [
        "def solution():\n    total_students = 18 + 12\n    total_average_score = 82\n    total_score = total_students * total_average_score\n    boys_average_score = 74\n    boys_total_score = 18 * boys_average_score\n    girls_total_score = total_score - boys_total_score\n    girls_average_score = girls_total_score / 12\n    \n    return girls_average_score\n\nans = solution()"
    ],
    "f4a5d0f84ea8406fbac7ecee01ee432d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables for the number of footballs and basketballs\n    footballs, basketballs = symbols('footballs basketballs')\n    \n    # Equations based on the given information\n    equation1 = Eq(footballs, 2/5 * basketballs)  # initially footballs were 2/5 of basketballs\n    equation2 = Eq(footballs, 2/3 * (basketballs - 16))  # after selling 16 basketballs, footballs were 2/3 of remainder\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (footballs, basketballs))\n    \n    # The total number of footballs and basketballs initially\n    total = solutions[footballs] + solutions[basketballs]\n    \n    return total\n\nans = solution()"
    ],
    "1f89b3dca16b41f3af194d672af50912": [
        "def solution():\n    from math import lcm\n    # Calculate the least common multiple of the lengths\n    # into which the string is cut to find the shortest length of string with no remainder\n    return lcm(2, 3, 5)\n\nans = solution()"
    ],
    "a6e45aae06f442f6a7eb0e90e00a24ed": [
        "def solution():\n    first_term = 124\n    n = 15\n    difference = -3  # The common difference in the sequence\n    nth_term = first_term + (n - 1) * difference\n    return nth_term\n\nans = solution()"
    ],
    "9cd0dd31a2934eacb9090d85b490b36e": [
        "def solution():\n    total_food_units = 12 * 15\n    days_for_20_rabbits = total_food_units / 20\n    return days_for_20_rabbits\n\nans = solution()"
    ],
    "40402588d4b04fcc949d1665e6d2b545": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    boys, girls = symbols('boys girls')\n\n    # Equation 1: Total trees planted\n    equation1 = Eq(boys + girls, 100)\n    \n    # Equation 2: Girls planted 12 more trees than boys\n    equation2 = Eq(girls, boys + 12)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "6c12066021f245adb5fffd4e97a9c889": [
        "def solution():\n    # Use the capture-recapture method to estimate the population\n    marked_first_catch = 100     # Number of fish marked in the first catch\n    total_second_catch = 200     # Total number of fish caught in the second catch\n    marked_second_catch = 25     # Number of marked fish caught in the second catch\n\n    # Applying the capture-recapture formula\n    # (Total fish population / marked_first_catch) = (total_second_catch / marked_second_catch)\n\n    estimated_total_fish = (marked_first_catch * total_second_catch) // marked_second_catch\n\n    return estimated_total_fish\n\nans = solution()"
    ],
    "a31cc8dad19349aebe0414ae78e4bc33": [
        "def solution():\n    current_money = 10 + 22\n    dress_cost = 56\n    money_needed = dress_cost - current_money\n    return money_needed\n\nans = solution()"
    ],
    "1e148bc64be04bd6b16fe0c8028ec408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Defining the symbols for each person\n    chloe, maggie, lily, george = symbols('chloe maggie lily george')\n    \n    # Creating the equations based on the problem statement\n    equation1 = Eq(chloe + maggie + lily, 187)\n    equation2 = Eq(maggie + lily + george, 327)\n    equation3 = Eq(george, 5 * chloe)\n    \n    # Solving the system of equations to get the number of sweets each person has\n    solutions = solve((equation1, equation2, equation3), (chloe, maggie, lily, george))\n    \n    # Calculating the total number of sweets\n    total_sweets = sum(solutions.values())\n    \n    return total_sweets\n\nans = solution()"
    ],
    "71033e51e28146eea6ced67678e21748": [
        "def solution():\n    from datetime import timedelta, datetime\n\n    wakeup_time = datetime.strptime(\"07:40\", \"%H:%M\")\n    breakfast_start_time = wakeup_time + timedelta(minutes=25)\n    breakfast_end_time = breakfast_start_time + timedelta(minutes=10)\n    arrival_time = breakfast_end_time + timedelta(minutes=35)\n    registration_time = arrival_time - timedelta(minutes=5)\n\n    return registration_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "bedd8521f63647f2a0a12a31cd344069": [
        "def solution():\n    salt_per_packet = 0.23\n    packets = 6\n    total_salt = salt_per_packet * packets\n    return total_salt\n\nans = solution()"
    ],
    "932b8a20d21b4686a582828ee98ca875": [
        "def solution():\n    return 952 + 139\n\nans = solution()"
    ],
    "9ff9e65c65be4e54bb20e233432fc9bb": [
        "def solution():\n    ways = 0\n    for two_gram_count in range(39):  # Max possible 2-gram weights is 77 // 2\n        for three_gram_count in range(26):  # Max possible 3-gram weights is 77 // 3\n            if 2 * two_gram_count + 3 * three_gram_count == 77:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "3133bc72d66445bb9b6aa55994df350f": [
        "def solution():\n    total_dollars = 2 + 1 / 2\n    quarters_per_dollar = 4\n    ans = total_dollars * quarters_per_dollar\n    return ans\n\nans = solution()"
    ],
    "5caaa9b1c72e4cf7b0f5d589bbf27d1a": [
        "def solution():\n    cards = 0\n    while True:\n        cards += 1\n        if cards % 4 == 3 and cards % 5 == 4 and cards % 7 == 6:\n            return cards\n\nans = solution()"
    ],
    "fc9b83fecfb44012b1232f0149dad1f8": [
        "def solution():\n    # Calculate the square of the sum of numbers from 1 to 20\n    sum_1_to_20 = sum(range(1, 21))\n    square_sum_1_to_20 = sum_1_to_20 ** 2\n\n    # Calculate the square of the sum of numbers from 1 to 9\n    sum_1_to_9 = sum(range(1, 10))\n    square_sum_1_to_9 = sum_1_to_9 ** 2\n\n    # Compute the difference to get the result for 10^3 + 11^3 + ... + 20^3\n    ans = square_sum_1_to_20 - square_sum_1_to_9\n\n    return ans\n\nans = solution()"
    ],
    "ebd7e33ee05545079118ad813f66ccf7": [
        "def solution():\n    total_scores_for_five_assignments = 90 * 5\n    scores_of_first_four_assignments = 96 + 85 + 89 + 92\n    score_of_fifth_assignment = total_scores_for_five_assignments - scores_of_first_four_assignments\n    return score_of_fifth_assignment\n\nans = solution()"
    ],
    "95d8e98043834da0a4c0071a63f5ea23": [
        "def solution():\n    # To ensure 5 different colors, we can draw all pencils from 4 colors and 9 from the fifth.\n    # This would give us 4 full colors drawn (4 * 75) and 9 from the fifth color,\n    # but this doesn't guarantee 10 pencils of the fifth color yet.\n    # So we draw one more to get at least 10 of the fifth color.\n    \n    min_pencils = (4 * 75) + 9 + 1\n    return min_pencils\n\nans = solution()"
    ],
    "09d73c26d27144a79753ab402d8e3506": [
        "def solution():\n    # Convert minutes to hours for ease of calculation\n    late_time = 20 / 60  # time late at 4 km/h in hours\n    early_time = -10 / 60  # time early at 6 km/h in hours\n    \n    # Let the actual time taken to reach office on time be t hours\n    # At 4 km/h, he takes t + late_time hours\n    # At 6 km/h, he takes t + early_time hours\n    # Since distance is the same, we can use the following proportion:\n    # speed1 / speed2 = time2 / time1 (inverse propertion since speed*time = constant)\n    # 4 / 6 = (t + early_time) / (t + late_time)\n    \n    # Solving for t gives us the actual time taken to reach on time\n    t = (4 * late_time - 6 * early_time) / (6 - 4)\n\n    # Now use the speed at 4 km/h to find distance\n    distance = 4 * (t + late_time)\n    return distance\n\nans = solution()"
    ],
    "dfae10a6a701443a9ac7f6922b150321": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    boys, girls, g_swim, g_not_swim, b_swim, b_not_swim = symbols('boys girls g_swim g_not_swim b_swim b_not_swim')\n    \n    # boys is 90 more than girls\n    eq1 = Eq(boys, girls + 90)\n    \n    # The ratio of the number of girls who can swim to the number of girls who cannot swim is 31:49\n    eq2 = Eq(g_swim / g_not_swim, 31 / 49)\n    \n    # The number of boys who can swim is 120 less than the number of boys who cannot swim\n    eq3 = Eq(b_swim, b_not_swim - 120)\n    \n    # Total number of students\n    eq4 = Eq(boys + girls, 1690)\n    \n    # Total swimmers and non-swimmers\n    eq5 = Eq(g_swim + g_not_swim, girls)\n    eq6 = Eq(b_swim + b_not_swim, boys)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4, eq5, eq6), (boys, girls, g_swim, g_not_swim, b_swim, b_not_swim))\n\n    # Calculate the number of pupils who can not swim\n    pupils_cannot_swim = solutions[g_not_swim] + solutions[b_not_swim]\n    \n    return pupils_cannot_swim\n\nans = solution()"
    ],
    "3477e87e292f48ec8ee3fc913b1a71ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n    equation1 = Eq(pip / bud, 4/7)\n    equation2 = Eq((pip) / (bud + 5), 8/15)\n\n    solutions = solve((equation1, equation2), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "19a6283fdef941a5aa103bd8c0a0d755": [
        "def solution():\n    last_digit_5 = 5 ** 20 % 10\n    last_digit_7 = 7 ** 30 % 10\n\n    ans = (last_digit_5 * last_digit_7) % 10\n    return ans\n\nans = solution()"
    ],
    "4be8de9c0cc14f33b367a9c501a90089": [
        "from math import gcd\n\ndef solution():\n    length_1 = 39\n    length_2 = 52\n\n    ans = gcd(length_1, length_2)\n\n    return ans\n\nans = solution()"
    ],
    "c7e71280a8ab4500a65a6e96a34fd78a": [
        "def solution():\n    perimeter = 2 * (144 + 204)  # Calculate the perimeter of the field\n    wheat_count_with_corners = 116 - 4  # Subtract the 4 corner wheat\n    distance_between_wheat = perimeter / wheat_count_with_corners  # Calculate the distance\n    \n    return distance_between_wheat\n\nans = solution()"
    ],
    "cda998982a894cdb8077bdfb4a0b2764": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the points of A and B\n    A, B = symbols('A B')\n    \n    # Simon's scores: 4A + 4B = 36\n    equation1 = Eq(4 * A + 4 * B, 36)\n    \n    # Peter's scores: 2A + 3B = 22\n    equation2 = Eq(2 * A + 3 * B, 22)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (A, B))\n    \n    # Calculate the score for 3A and 5B\n    score = 3 * solutions[A] + 5 * solutions[B]\n    \n    return score\n\nans = solution()"
    ],
    "fc68f114d75f4d00a000bd9a959d7bb8": [
        "def solution():\n    # List out all possible primes within the range given (1, 45)\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n\n    # Since we're not trying to find a specific order and there can't be duplicates, we need to check each triplet combination\n    from itertools import combinations\n    for combo in combinations(primes, 3):\n        A, B, C = combo\n\n        # \"A: Our 3 numbers cannot form a correct addition equation of ■ + ■ = ■.\"\n        # This means no combination of A, B, C can have A+B=C, B+C=A or A+C=B\n        if A+B == C or B+C == A or A+C == B:\n            continue\n\n        # \"B: I don't know how many you are, but I know that if I subtract 1 from my number, our difference is 7.\"\n        # This means (B-1) - A = 7 or (B-1) - C = 7. Also, since B doesn't know A or C, B can't be the smallest or the largest prime.\n        if B == min(combo) or B == max(combo) or ((B - 1) - A != 7 and (B - 1) - C != 7):\n            continue\n\n        # \"C: If you multiply me by 2, can we form a correct addition equation?\"\n        # \"Teacher: Yes, if you multiply C's number by 2, your three numbers will be able to form an addition equation.\"\n        # This means 2*C = A+B, 2*C = A+B or A+B+C = 2*C\n        if 2 * C != A + B:\n            continue\n        \n        # If all conditions are met, return the sum of A, B, and C\n        return A + B + C\n\nans = solution()"
    ],
    "99d7b27d46844be596baf37965890e96": [
        "def solution():\n    total_squares = 16\n    joe_share = total_squares // 2\n    return joe_share\n\nans = solution()"
    ],
    "73b357f92b7e40399f2271567c50156d": [
        "def solution():\n    ans = 999 / 2\n    return ans\n\nans = solution()"
    ],
    "536fb0bff4d04a49a0e59a954dc6348a": [
        "def solution():\n    laura_position = 4\n    amanda_position_from_end = 7\n    children_between = 2\n\n    total_children = laura_position + children_between + amanda_position_from_end\n\n    return total_children\n\nans = solution()"
    ],
    "4741132a2a6e4fd9b62cc955675da60c": [
        "def solution():\n    count = 0\n    for i in range(1, 121):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "7217243413c449e2bad76755d71dd583": [
        "def solution():\n    people_got_off = 42\n    people_got_on = 60\n    people_after = 322\n\n    people_before = people_after - people_got_on + people_got_off\n    return people_before\n\nans = solution()"
    ],
    "8d2b72129fea4fe2bed54b1710b74200": [
        "def solution():\n    # Assigning each letter according to the question criteria\n    A = 2  # A is the smallest prime number\n    B = 4  # B is the smallest composite number\n    C = 1  # C is neither prime number nor composite number nor zero (1 is neither prime nor composite)\n    D = A - 2  # D is 2 less than the smallest prime number\n    E = 9  # E is the largest composite number up to 10\n    F = 5  # F only has factors 1 and 5\n    G = 8  # G is the greatest factor of 8 (itself)\n    H = 6  # H is the lowest multiple of 6\n\n    # Concatenating the digits to form the phone number\n    phone_number = f\"{A}{B}{C}{D}{E}{F}{G}{H}\"\n\n    return int(phone_number)\n\nans = solution()"
    ],
    "104714b036e84a2696f951000c89ff03": [
        "def solution():\n    seconds_in_a_day = 24 * 60 * 60\n    fraction_of_day = 1/4 * 1/6 * 1/8\n    seconds = seconds_in_a_day * fraction_of_day\n    return int(seconds)\n\nans = solution()"
    ],
    "2583cc3e3e5749a5bdc1a87f0ef8ed05": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 + 8 * (50 - 3 * x), 92)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c08789bee10c46c2902b114a45c0d0a6": [
        "def solution():\n    return 34 * 100\n\nans = solution()"
    ],
    "0756d6f5711a4c54986ef915e57a0ccd": [
        "from math import factorial\n\ndef count_permutations(n, counts):\n    perm = factorial(n)\n    for count in counts:\n        perm //= factorial(count)\n    return perm\n\ndef solution():\n    total_digits = 5  # Total digits (3 twos and 2 threes)\n    count_twos = 3  # Total count of number '2'\n    count_threes = 2  # Total count of number '3'\n    ans = 0\n\n    # Since we're making a four-digit number, we have two cases: 2 twos & 2 threes or 3 twos & 1 three\n\n    # Case 1: 2 twos and 2 threes\n    ans += count_permutations(4, [2, 2])\n\n    # Case 2: 3 twos and 1 three\n    ans += count_permutations(4, [3, 1])\n\n    return ans\n\nans = solution()"
    ],
    "78b02b5b75964068adef771a062c712c": [
        "def solution():\n    # There are 3 family members: Eddie, mom and dad.\n    # There are 3! ways to arrange these 3 family members in order.\n    family_permutations = 3 * 2 * 1\n    \n    # Since Eddie and his mom and dad want to stand together, we can consider them as one unit.\n    # Now, let's assume we have that one unit, along with the remaining (n-3) people/units.\n    # We need to calculate the total permutations for these (n-3+1) = (n-2) units.\n    \n    # Let's say n is the total number of people including Eddie, mom and dad.\n    # For the sake of providing a complete formula, we would consider n-2 units in total.\n    # The permutations of these (n-2) units is (n-2)!.\n    # But since we don't have the exact number n in this question, we skip this part.\n    \n    # Now, we need to multiply the permutations of the family unit (3!)\n    # by the permutations of the other units ((n-2)!), but as n is unspecified, we assume (n-2)! = 1.\n    \n    # Total number of ways for the family to line up:\n    ans = family_permutations # As we are assuming (n-2)! = 1 for the other units/people.\n    \n    return ans\n\nans = solution()"
    ],
    "d4071be0f0c7425fb8d8e725d1b67417": [
        "def solution():\n    for i in range(10):\n        for j in range(10):\n            for k in range(10):\n                pip_number = 1000 * i + 100 * j + 10 * k + i\n                bud_number = 1000 * k + 100 * j + 10 * i + k\n                if pip_number + bud_number == 5510:\n                    return pip_number\n\nans = solution()"
    ],
    "39ff6ce753bc44909a9a09937c88d468": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    marry, alexis, charlotte = symbols('marry alexis charlotte')\n\n    # Marry and Alexis had stickers in the ratio 7:5\n    ratio_marry_alexis = Eq(marry / alexis, 7 / 5)\n\n    # Marry and Alexis each gave 20% of their stickers to Charlotte\n    marry_gave = 0.2 * marry\n    alexis_gave = 0.2 * alexis\n\n    # Charlotte's stickers increased by 80%\n    charlotte_final = charlotte * 1.8\n\n    # Marry had 20 stickers more than Charlotte in the end\n    marry_final = marry - marry_gave\n    charlotte_marry_difference = Eq(marry_final - charlotte_final, 20)\n\n    # The stickers given to Charlotte should equal the increase in Charlotte's stickers\n    charlotte_increase = Eq(marry_gave + alexis_gave, charlotte * 0.8)\n\n    # Solve the system of equations\n    solutions = solve((ratio_marry_alexis, charlotte_marry_difference, charlotte_increase),\n                      (marry, alexis, charlotte))\n\n    return solutions[alexis]\n\nans = solution()"
    ],
    "a8439e99e6a1477cac347feb553247d6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges, lemons = symbols('oranges lemons')\n    # Initial ratio condition\n    equation1 = Eq(oranges / lemons, 3 / 5)\n    # After selling 48 oranges\n    equation2 = Eq((oranges - 48) / lemons, 1 / 2)\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (oranges, lemons))\n\n    return solutions[lemons]\n\nans = solution()"
    ],
    "2ab0503d127a4c73a785328ae9680841": [
        "def solution():\n    incorrect_minuend = 116\n    incorrect_difference = 81\n    correct_minuend = 166\n    correct_difference = correct_minuend - (incorrect_minuend - incorrect_difference)\n    return correct_difference\n\nans = solution()"
    ],
    "c1c6e64207724fd1a56270ce126df35a": [
        "def solution():\n    # grass_per_cow_per_day is constant\n    # 25 cows * 10 days = 15 cows * 20 days\n    grass_per_cow_per_day = 25 * 10\n    # total_grass_available = grass_per_cow_per_day * number_of_days_to_feed\n    total_grass_available = grass_per_cow_per_day * 50\n    # cows_that_can_be_fed = total_grass_available / number_of_days_to_feed\n    cows_that_can_be_fed = total_grass_available / 50\n\n    return cows_that_can_be_fed\n\nans = solution()"
    ],
    "007602e598e6490ea3de0467b56b3e6a": [
        "def solution():\n    # Pages = n/2 * (2*a + (n - 1)*d)\n    # where n = number of days, a = pages read on first day, d = common difference\n    # Since the number of pages he reads every day is different and he should finish the book,\n    # it means he reads 1 page on the first day, 2 pages on the second day, and so on.\n    # This is an arithmetic progression with a = 1, d = 1.\n    # We need to find the maximum n (number of days) such that the sum is <= 95\n    # 1 + 2 + 3 + ... + n <= 95\n    # n(n + 1) / 2 <= 95\n    # n^2 + n - 190 <= 0\n    \n    # We use the quadratic formula to find the positive root\n    # (-b + sqrt(b^2 - 4ac)) / 2a, here a = 1, b = 1, c = -190\n    \n    from math import sqrt\n    \n    a, b, c = 1, 1, -190\n    discriminant = sqrt(b**2 - 4*a*c)\n    positive_root = (-b + discriminant) / (2*a)\n    \n    # Since n must be an integer, we take the floor of the positive root\n    return int(positive_root)\n\nans = solution()"
    ],
    "fee3950a7d754643a6574d07b8b3cb97": [
        "def solution():\n    # Let the number of watermelons sold on the second day be x\n    second_day = 3 * 20  # Since the first day is 1/3 of the second day\n    first_day = 20\n    third_day = (5 / 3) * second_day  # Since the third day is 5/3 of the second day\n\n    total_watermelons = first_day + second_day + third_day\n\n    return total_watermelons\n\nans = solution()"
    ],
    "c4ecbada09354d1ab1f0f9e6e7430943": [
        "def solution():\n    original_price = 2000\n    discount = 0.30\n    member_discount = 100\n    sales_tax = 0.10\n\n    discounted_price = original_price * (1 - discount) - member_discount\n    final_price_with_tax = discounted_price * (1 + sales_tax)\n\n    return final_price_with_tax\n\nans = solution()"
    ],
    "319659d1f9494d8da86df50b138ccfd5": [
        "def solution():\n    people_in_front = 7\n    people_behind = 3\n    judy = 1\n\n    total_people = people_in_front + judy + people_behind\n    \n    return total_people\n\nans = solution()"
    ],
    "f733db5ae9be4fc19b2772e1336899bf": [
        "def solution():\n    flour_per_cake = 200 / 12\n    num_cakes = 250 / flour_per_cake\n    return int(num_cakes)\n\nans = solution()"
    ],
    "835aacd2f1bc42c084af969d3791ac9a": [
        "from math import factorial\n\ndef solution():\n    # Number of ways to arrange 3 math books together as a single unit\n    math_books = factorial(3)\n    # Number of ways to arrange 2 English books together as a single unit\n    english_books = factorial(2)\n    # Now we have 3 units: Math books, English books, and 3 other books (total 5 units)\n    # Number of ways to arrange these 5 units\n    units_arrangement = factorial(5)\n    # Total permutations is the product of individual permutations\n    total_permutations = math_books * english_books * units_arrangement\n    \n    return total_permutations\n\nans = solution()"
    ],
    "52f7ec2008844b4b96f3e14ec5bc08c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of diamonds Ophelia and Penelope have\n    ophelia, penelope = symbols('ophelia penelope')\n\n    # Initial condition: Ophelia has 4 times as many diamonds as Penelope\n    initial_condition = Eq(ophelia, 4 * penelope)\n\n    # Penelope buys 21 more diamonds, Penelope has 5/8 as many as Ophelia\n    after_buying_condition = Eq(penelope + 21, 5/8 * ophelia)\n\n    # Solve the system of equations\n    solutions = solve((initial_condition, after_buying_condition), (ophelia, penelope))\n\n    return solutions[ophelia]\n\nans = solution()"
    ],
    "91b1fa437ec640b6a726e2f243fbcdc6": [
        "def solution():\n    return (32 * 8) // 20\n\nans = solution()"
    ],
    "a6d2722285fe41fc82cfbf38df970e88": [
        "def solution():\n    kilograms = 0.0025\n    grams = kilograms * 1000\n    return grams\n\nans = solution()"
    ],
    "69a10a7a8381484b8df4c3813750ce0c": [
        "def solution():\n    # Define the rate of work for Ivy and Kevin\n    ivy_rate = 1/24\n    kevin_rate = 1/20\n\n    # Set the total work to be 1 job\n    total_work = 1\n    \n    # Days Kevin worked before taking days off\n    days_kevin_worked = 0\n    # Accumulated work done by Ivy and Kevin\n    work_done = 0\n\n    # Day by day simulation until half the job is done\n    while work_done < 0.5:\n        work_done += ivy_rate + kevin_rate\n        days_kevin_worked += 1\n\n    # After that, only Ivy works until the end of the 12th day\n    days_ivy_works_alone = 12 - days_kevin_worked\n    work_done += days_ivy_works_alone * ivy_rate\n\n    # Return the number of days Kevin was off the job\n    return 12 - days_kevin_worked\n\nans = solution()"
    ],
    "62e6f0c8e4844cf5913cc68756ec307e": [
        "def solution():\n    total_students = 44\n    math_competition = 30\n    art_competition = 26\n    \n    # Using the inclusion-exclusion principle\n    both_competitions = math_competition + art_competition - total_students\n    \n    return both_competitions\n\nans = solution()"
    ],
    "0fe10f3434414681820fd105b8e64e1a": [
        "def solution():\n    return 379 % 6\n\nans = solution()"
    ],
    "1951c1ebe48e4ad0a4cd072379459f1d": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "3be019225e774908af2f46af704db571": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    simon_eq = Eq(4 * A + 4 * B, 36)\n    peter_eq = Eq(2 * A + 3 * B, 22)\n\n    solutions = solve((simon_eq, peter_eq), (A, B))\n\n    score = 3 * solutions[A] + 5 * solutions[B]\n\n    return score\n\nans = solution()"
    ],
    "59f40a74a46b4f6a92446fb1fe6d3f5b": [
        "from math import factorial\n\ndef solution():\n    total_statues = 9\n    statues_to_arrange = 4\n    arrangements = factorial(total_statues) // factorial(total_statues - statues_to_arrange)\n    return arrangements\n\nans = solution()"
    ],
    "2809b71b8eb74287a05d0ce2c1647a67": [
        "def solution():\n    original_price = 10  # in pence\n    increased_price = 100*100  # converting £1.00 to pence\n\n    percentage_increase = ((increased_price - original_price) / original_price) * 100\n\n    return percentage_increase\n\nans = solution()"
    ],
    "0faafc65dcc940c68dac95ff81fd8bbe": [
        "def solution():\n    original_price = 80\n    gst_rate = 0.08\n\n    final_price = original_price * (1 + gst_rate)\n    \n    return final_price\n\nans = solution()"
    ],
    "ceb94cece3814f3ba7dbce87461af7eb": [
        "def solution():\n    # Define the number of tricycles (t) and bicycles (b)\n    t, b = symbols('t b')\n    \n    # The total number of tricycles and bicycles is 300\n    equation1 = Eq(t + b, 300)\n    \n    # The total number of tricycle wheels is 180 more than the total number of bicycle wheels\n    equation2 = Eq(3*t, 2*b + 180)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (t, b))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "0fa7fc81f75c4a438c7e27101422e437": [
        "def solution():\n    final_amount = 2360  # The amount after 3 years\n    interest_rate = 0.06  # Annual interest rate\n    years = 3  # Number of years the money is deposited\n\n    # Using the formula for compound interest to calculate the initial deposit:\n    # final_amount = initial_deposit * (1 + interest_rate) ** years\n    # Rearrange the formula to solve for initial_deposit:\n    initial_deposit = final_amount / ((1 + interest_rate) ** years)\n\n    return initial_deposit\n\nans = solution()"
    ],
    "19695e62163a49de8f347a78fa0034ec": [
        "def solution():\n    grey_per_pattern = 2\n    total_grey = 14\n    \n    # Knowing that 2 grey rabbits make a complete pattern,\n    # we can find how many full patterns there are based on the grey rabbits.\n    patterns = total_grey / grey_per_pattern\n    \n    # A full pattern has 1 black, 2 white, and 2 grey rabbits.\n    rabbits_per_pattern = 1 + 2 + 2\n    \n    # The total number of rabbits is the number of full patterns\n    # times the number of rabbits per pattern.\n    total_rabbits = patterns * rabbits_per_pattern\n    \n    return int(total_rabbits)\n\nans = solution()"
    ],
    "02085f3402f64823bda6f851884cad43": [
        "def solution():\n    initial_value = 120\n    depreciation_rate = 0.04\n    years = 5\n\n    final_value = initial_value * (1 - depreciation_rate) ** years\n    return final_value\n\nans = solution()"
    ],
    "e234c915fb16462f9526941f4556b996": [
        "def solution():\n    quotient = 27\n    remainder = 9\n    divisor = remainder + 1\n\n    dividend = quotient * divisor + remainder\n\n    return dividend\n\nans = solution()"
    ],
    "912427a474264adaaabc2ae198e4adde": [
        "def solution():\n    return 9 + 6\n\nans = solution()"
    ],
    "0d77e82eea214976a5d8bf3ab4e08b0b": [
        "def solution():\n    return 2015 * 2015 - 2016 * 2014\n\nans = solution()"
    ],
    "aba2e0d130f344469e4cfa2b6010392a": [
        "def solution():\n    ans = 3.5 * 0.8 + 5.5 * (80 / 100) + (4 / 5) * (100 / 100)\n    return ans\n\nans = solution()"
    ],
    "aa34af4f0c0d4f1193c0c13f4ef71431": [
        "def solution():\n    number = 4 + 0.6 + 0.07 + 0.009\n    rounded_number = round(number, 1)\n    return rounded_number if rounded_number != 9764.0 else \"Tongtong is correct\"\n\nans = solution()"
    ],
    "d6f47c7d14794cf0882cbdded57195ef": [
        "def solution():\n    total_biscuits = 36\n    foil_wrappers = 20\n    chocolate_with_foil = 15\n    not_chocolate_not_foil = 9\n\n    # Chocolate biscuits can be with foil or without foil.\n    # To find the total chocolate biscuits, we use the Inclusion-Exclusion Principle:\n    # Total chocolate biscuits = Chocolate with foil + Total biscuits - Not chocolate and not foil - Foil wrappers\n    \n    total_chocolate = chocolate_with_foil + total_biscuits - not_chocolate_not_foil - foil_wrappers\n\n    return total_chocolate\n\nans = solution()"
    ],
    "061ad10a381246f0b22fbd4f813aa403": [
        "def solution():\n    total_amount = 398\n    quarter = total_amount / 4\n    return quarter\n\nans = solution()"
    ],
    "81fcb6311cba411b82d413bf90689157": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the original speed be 's' and the original time be 't'.\n    # Let 'd' represent the distance.\n    s, t, d = symbols('s t d')\n\n    # If the speed increases by 25%, the new speed is 1.25s.\n    # The new time is t - 20 minutes (since it decreases by 20 minutes).\n    new_time1 = t - 20\n    \n    # If the speed decreases by 45 meters/minute, the new speed is s - 45.\n    # The time increases by 75%, the new time is 1.75t.\n    new_time2 = 1.75 * t\n\n    # Equation 1: The distance is the same for both cases, so original speed * original time\n    # is equal to the distance d.\n    equation1 = Eq(s * t, d)\n    \n    # Equation 2: The new time with increased speed * new speed (1.25s) is also equal to\n    # the distance d.\n    equation2 = Eq((t - 20) * 1.25 * s, d)\n\n    # Equation 3: The new time with decreased speed * new speed (s - 45) is also equal to\n    # the distance d.\n    equation3 = Eq(1.75 * t * (s - 45), d)\n\n    # Solve the system of equations for d.\n    solutions = solve((equation1, equation2, equation3), (s, t, d))\n\n    # As there might be more than one solution, we filter out the one where all variables\n    # are positive since speed and time can't be negative.\n    for sol in solutions:\n        if all(val > 0 for val in sol):\n            return sol[d]\n\nans = solution()"
    ],
    "8ee5b1b4a0b744aea869489b01233c34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's define a symbol for the number of crystals Jason had originally\n    initial_crystals = symbols('initial_crystals')\n    \n    # Equation representing the transactions\n    # He sold 10 more than half of his initial crystals to Yvonne\n    # and then mined 20 more, and finally sold 14 crystals to Cherlyn.\n    final_equation = Eq((initial_crystals / 2) + 10 + 20 - 14, initial_crystals - 35)\n\n    # Solve the equation\n    solutions = solve(final_equation, initial_crystals)\n\n    # Return the solution\n    return solutions[0]\n\nans = solution()"
    ],
    "bddd9a07ce1b4cd89fa99ccb14a387de": [
        "def solution():\n    # Count of five for prime factorization\n    count_five = 15\n    # Count of two for prime factorization\n    count_two = 10\n    \n    # The number of zeros at the end of a product is determined \n    # by the number of pairs of (2,5) in the factorization\n    # Here, since the count of twos is less, we can use that directly\n    \n    return min(count_five, count_two)\n\nans = solution()"
    ],
    "f780445f7b1e4a9083acc80c65867dd2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    olaf, anna = symbols('olaf anna')\n    equation1 = Eq(olaf, 3 * anna)\n    equation2 = Eq(anna, 2 * (olaf - 335))\n    \n    solutions = solve((equation1, equation2), (olaf, anna))\n    \n    return solutions[anna]\n\nans = solution()"
    ],
    "c735dd28ea2240689abbbd4d577fd596": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1568'\n    all_perms = permutations(digits)\n    count = 0\n    \n    for perm in all_perms:\n        # Since we can insert decimal point between any two digits, there are 3 places to insert it\n        # for a given permutation (after first, second, or third digit).\n        count += 3\n\n    return count\n\nans = solution()"
    ],
    "017ca40d1bbb43fa95bea8515f5a0087": [
        "def solution():\n    people_in_front_of_ali = 14\n    people_behind_bala = 10\n    ali_and_bala = 2  # Since Bala is directly behind Ali, we count them as two people\n\n    total_people = people_in_front_of_ali + ali_and_bala + people_behind_bala\n    return total_people\n\nans = solution()"
    ],
    "46dbc4d8085d4f6983e54168bf69207b": [
        "def solution():\n    ans = 397 + 784 + 86\n    return ans\n\nans = solution()"
    ],
    "d3694a86bdbf4f47b69dd4f491c85b50": [
        "def solution():\n    richard_age = 18\n    adam_age = richard_age / 2\n    will_age = (2 / 3) * adam_age\n    total_age = richard_age + adam_age + will_age\n    return total_age\n\nans = solution()"
    ],
    "b411b6a9f50c4eeb9ad77ea2bf97d4c4": [
        "def solution():\n    # Iterate over all possible four-digit numbers where the thousands and units digits are the same\n    for i in range(1, 10):  # Thousands and units digit cannot be 0 in a four-digit number\n        for j in range(0, 10):  # Tens digit\n            for k in range(0, 10):  # Hundreds digit\n                pips_number = int(f'{i}{k}{j}{i}')  # Pip's number\n                buds_number = int(f'{i}{j}{k}{i}')  # Bud's reversed number, reversed tens and units\n                if pips_number + buds_number == 5510:\n                    return pips_number\n\nans = solution()"
    ],
    "522f9a97b72e4157b05087fe25269f68": [
        "def solution():\n    plant_price_p = 85\n    budget_pounds = 30\n    budget_p = budget_pounds * 100  # Convert pounds to pence\n\n    max_plants = budget_p // plant_price_p  # Use floor division to get the maximum whole number of plants\n\n    return max_plants\n\nans = solution()"
    ],
    "0ed2fd09143045b3bdb6bd4e5af3258f": [
        "def solution():\n    total_cars = 60\n    black_dodges = 25\n    blue_cars = 18\n    fords = 25\n    \n    # First, find the total number of Dodges (since we know black Dodges)\n    dodges = total_cars - fords\n    \n    # Then, find out the number of black cars (since we know total cars and blue cars)\n    black_cars = total_cars - blue_cars\n    \n    # Number of blue Dodges = Blue Cars - Blue Fords\n    # Since Blue Fords + Black Fords = Total Fords\n    # We can calculate Blue Fords as follows:\n    \n    blue_fords = fords - (black_cars - black_dodges)\n    \n    return blue_fords\n\nans = solution()"
    ],
    "7bb6052160e54c4c996c2b4554bc7d90": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 * (x - 3) + 6 * x, 28)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "55d8d326e1d84f5591afabea1baed475": [
        "def solution():\n    # Since A, B, C, D are 4 consecutive composite numbers, we start checking from the first \n    # composite number after 1, which is 4.\n    A = 4\n    while True:\n        B = A + 1\n        C = A + 2\n        D = A + 3\n        \n        # We need to check if A, B, C, and D are all composite.\n        if (any(A % i == 0 for i in range(2, A)) and\n                any(B % j == 0 for j in range(2, B)) and\n                any(C % k == 0 for k in range(2, C)) and\n                any(D % l == 0 for l in range(2, D))):\n            # Since they are consecutive, we can return their sum directly.\n            return A + B + C + D\n        else:\n            # Move to the next set of consecutive numbers.\n            A += 1\n\nans = solution()"
    ],
    "408a76137cb74fe6b5a4628ffe8dd9fc": [
        "def solution():\n    # Using the Pigeonhole Principle, we take one less from each color to ensure that we are not picking all of one color.\n    # So we have 8 - 1 for blue, 10 - 1 for red and 13 - 1 for green.\n    # Then we add 1 to represent the next pick, which must be of a different colour (since we have picked everything but one from each colour).\n    blue_balls = 8 - 1\n    red_balls = 10 - 1\n    green_balls = 13 - 1\n\n    minimum_picks = blue_balls + red_balls + green_balls + 1\n\n    return minimum_picks\n\nans = solution()"
    ],
    "f521fd6cd0bd42ab975826d346f3d148": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of oranges originally be 3x and lemons be 5x.\n    x = symbols('x')\n    \n    # Before selling 48 oranges, the ratio was 3:5.\n    # After selling 48 oranges, the ratio is 1:2.\n    # So, (3x - 48) / 5x = 1 / 2\n    equation = Eq((3*x - 48)/(5*x), 1/2)\n    \n    # Solving for x gives us the multiplier for the original number of fruits.\n    solution_x = solve(equation, x)\n\n    # The number of lemons originally is 5 times the value of x.\n    lemons_original = 5 * solution_x[0]\n\n    return lemons_original\n\nans = solution()"
    ],
    "0e0d80b219274c0faaf2195165716eec": [
        "def solution():\n    return 7.73 - 7.53\n\nans = solution()"
    ],
    "4d85f6fe7d5845cfa81cf1f042e09c59": [
        "def solution():\n    num = 0\n    while True:\n        if num % 11 == 5 and num % 7 == 1:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "5cfc215c78a9472a8a18a9ba927900bd": [
        "def solution():\n    daily_earnings = 120\n    days_worked = 5\n\n    total_earnings = daily_earnings * days_worked\n\n    return total_earnings\n\nans = solution()"
    ],
    "4405728c929e4c69acaa6a473aab8e49": [
        "def solution():\n    total_apples = 50\n    children = 8\n    \n    # Since each child has to get at least one apple, we distribute one apple to each child first.\n    total_apples -= children  # apples left after giving each child one apple\n\n    # By the Pigeonhole Principle, dividing the remaining apples among the children, \n    # the most apples a child can get is the total number of apples remaining divided by the number of children\n    # Since we're looking for the least possible number of apples for the kid who gets the most,\n    # we need to give out as many apples as we can to others so that the child with the most \n    # gets the least amount possible.\n    max_apples = (total_apples // (children - 1)) + 1 # adding one for the initial apple every children got\n\n    # One child gets the max_apples, and the rest shares the remaining apples.\n    # If the division is unequal, the child with the max_apples will get one less.\n    if total_apples % (children - 1) == 0:\n        max_apples -= 1\n        \n    return max_apples\n\nans = solution()"
    ],
    "b8255d96c133471bb6e3c22310b41adf": [
        "def solution():\n    total_questions = 50\n    correct_marks = 3\n    wrong_marks = -2\n    total_score = 125\n\n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        score = correct * correct_marks + wrong * wrong_marks\n        if score == total_score:\n            return correct\n\nans = solution()"
    ],
    "bb4e43f4f3bd41c086968d751b91561e": [
        "from math import comb\n\ndef solution():\n    num_teams = 6\n    # In a single round-robin tournament, each team plays every other team once.\n    # The number of games is therefore the number of combinations of 2 teams from the total.\n    num_games = comb(num_teams, 2)\n    return num_games\n\nans = solution()"
    ],
    "f2e8931a123545f7956d58a111edc936": [
        "def solution():\n    a = 31\n    b = 29\n    ans = (a + b) * (a - b)\n    return ans\n\nans = solution()"
    ],
    "9a69c834b77544398d9efb56ebcabb0a": [
        "def solution():\n    total_students = 44\n    math_competition = 30\n    art_competition = 26\n\n    both_competitions = math_competition + art_competition - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "199c56ed665e423c91ceb0507bd0ab53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of diamonds\n    ophelia, penelope = symbols('ophelia penelope')\n\n    # Initial condition: Ophelia has 4 times as many diamonds as Penelope\n    equation1 = Eq(ophelia, 4 * penelope)\n\n    # After Penelope buys 21 more diamonds, she has 5/8 as many diamonds as Ophelia\n    equation2 = Eq(penelope + 21, (5 / 8) * ophelia)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (ophelia, penelope))\n\n    return solutions[ophelia]\n\nans = solution()"
    ],
    "202cfc0fd1a34d84987c51e10238c07e": [
        "def solution():\n    ans = 7001 - 360\n    return ans\n\nans = solution()"
    ],
    "a48ac2327a494c02bf02f51c7a25087f": [
        "def solution():\n    # As Eddie counts to 30 and stops at 10, we can find the offset by\n    # taking the counted number modulo 12 (the number of hours on the clock)\n    offset = 30 % 12\n    \n    # Since he stops at 10 o'clock, we can find the starting point by \n    # subtracting the offset from the stopping point\n    start_hour = (10 - offset) % 12 # use modulo 12 to ensure it wraps around the clock\n\n    # If the result is 0, it means he started at 12 o'clock\n    start_hour = 12 if start_hour == 0 else start_hour\n\n    return start_hour\n\nans = solution()"
    ],
    "e9da788ec1b54b65a18fecebd1daa615": [
        "from math import factorial\n\ndef solution():\n    n = 9  # total number of statues\n    r = 4  # number of statues to arrange\n\n    # Calculate the number of permutations of n items taken r at a time\n    permutations = factorial(n) // factorial(n-r)\n\n    return permutations\n\nans = solution()"
    ],
    "a4fa99021c374f29b4110f2783cfd291": [
        "def solution():\n    sequence = [2, 2]\n    for _ in range(2, 2011):\n        next_number = (sequence[-1] + sequence[-2]) % 10\n        sequence.append(next_number)\n    return sequence[-1]\n\nans = solution()"
    ],
    "46421c119de14d79b2cc3d333a42ca8c": [
        "def solution():\n    two_thirds = 24\n    number = (24 * 3) / 2\n    three_quarters = (number * 3) / 4\n    return three_quarters\n\nans = solution()"
    ],
    "14656e3844dc4d66b7a39d88a9afb8f9": [
        "def solution():\n    k = 31  # Starting from 31 because k > 30\n    while True:\n        m_squared = sum([2*i + 1 for i in range(12, k)])  # 23 is the 12th odd number\n        m = int(m_squared**0.5)\n        if m_squared == m**2:  # Check if m_squared is a perfect square\n            return m\n        k += 1\n\nans = solution()"
    ],
    "b2a8300be95d4862a99c0a044007743d": [
        "def solution():\n    # Linda's speed for the first part of the trip\n    speed_first_part = 40  # km/h\n\n    # Time spent for the first part of the trip\n    time_first_part = 2  # hours\n\n    # Distance covered in the first part\n    distance_first_part = speed_first_part * time_first_part  # km\n\n    # Linda's speed for the second part of the trip\n    speed_second_part = 70  # km/h\n\n    # Distance for the second part of the trip is already given\n    distance_second_part = 280  # km\n\n    # Time spent for the second part\n    time_second_part = distance_second_part / speed_second_part  # hours\n\n    # Total distance covered\n    total_distance = distance_first_part + distance_second_part\n\n    # Total time spent\n    total_time = time_first_part + time_second_part\n\n    # Calculation of the average speed\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "bb2d33406c1e486b9da0c4789678c8e3": [
        "def solution():\n    final_amount = 2360\n    interest_rate = 0.06\n    years = 3\n\n    initial_deposit = final_amount / ((1 + interest_rate) ** years)\n    return initial_deposit\n\nans = solution()"
    ],
    "2832c695b129428eb3f7330133ef2d33": [
        "def solution():\n    return (423 * 326) % 4\n\nans = solution()"
    ],
    "5513ff312a12411eae4858bfd699527a": [
        "def solution():\n    initial_amount = 20\n    daily_saving = 1\n    days_saved = 7\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    total_saved = initial_amount + (daily_saving * days_saved) - lent_to_brother - spent_on_snacks\n\n    return total_saved\n\nans = solution()"
    ],
    "146248a0d3d64afe8918234f3da5b527": [
        "def solution():\n    cows = 5\n    days = 3\n    grass_per_cow_per_day = 1\n\n    total_grass = cows * days * grass_per_cow_per_day\n\n    return total_grass\n\nans = solution()"
    ],
    "824799b919f548949a8702760dbeaab5": [
        "def solution():\n    return 9 + 6\n\nans = solution()"
    ],
    "54048b9f40ed41f0805db2d51102d2f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the amounts of oil taken from both buckets\n    oil_big, oil_small = symbols('oil_big oil_small')\n    \n    # Create equations based on the problem statement\n    equation1 = Eq(oil_big, 89 - oil_small)\n    equation2 = Eq(12 * (oil_small), equation1.rhs)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (oil_big, oil_small))\n    \n    # Since we're looking for the amount of oil sold, we're interested in oil_small variable\n    return solutions[oil_small]\n\nans = solution()"
    ],
    "a543d8cd5bcf46c784fc4a1226cbbd55": [
        "def solution():\n    # Let's assume total number of visitors is 100x\n    # Then the number of men is 37x, and the number of women and children is 63x\n    # The number of women and children is in the ratio 4:5\n    # So there are 4y women and 5y children, where 4y + 5y = 63x\n    \n    # From the above equation, we can say y = 63x / 9\n    y = 63 / 9\n    \n    # Number of children is 5y\n    children = 5 * y\n    \n    # Number of men is 37x, and it is given that there are 12 more men than children\n    # So, men = children + 12\n    # We can write the equation as 37x = 5y + 12\n    \n    # Now, let's substitute y in terms of x and solve for x\n    men = children + 12\n    x = men / 37\n    \n    # Substitute x into y to find the number of children\n    y = 63 * x / 9\n    children = 5 * y\n    \n    # Now that we have the number of children, let's find the number of women\n    # Since the ratio is 4:5, for every 5 children there are 4 women\n    # Thus, the number of women is 4/5 of the number of children\n    women = (4 / 5) * children\n    \n    return int(women)\n\nans = solution()"
    ],
    "a69f37c117db4732b832f08fb22c082e": [
        "def solution():\n    prob_to_work_late = 0.7\n    prob_home_late = 0.4\n    \n    prob_neither_late = (1 - prob_to_work_late) * (1 - prob_home_late)\n    prob_at_least_one_late = 1 - prob_neither_late\n    \n    return prob_at_least_one_late\n\nans = solution()"
    ],
    "f8b86822291f4eeb9da03b7a91347c42": [
        "def solution():\n    ans = 6.6 + 13.5\n    return ans\n\nans = solution()"
    ],
    "729c668804d14fd39ae12b3b213c23b9": [
        "def solution():\n    strawberries_initial = 86\n    strawberries_given_away = 29\n    strawberries_final = 100\n\n    strawberries_received = strawberries_final - (strawberries_initial - strawberries_given_away)\n\n    return strawberries_received\n\nans = solution()"
    ],
    "9413da5a29d94f68bda0bca4fa184194": [
        "def solution():\n    total_2_digit_numbers = 90  # 10 to 99 inclusive\n    without_six = 81  # Exclude 60 to 69 and numbers ending with 6 (excluding 66)\n    \n    # At least one 6 means all 2-digit numbers minus those with no 6 at all\n    count_with_six = total_2_digit_numbers - without_six\n    \n    return count_with_six\n\nans = solution()"
    ],
    "102f809f85cc4c64bd406383329e958e": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime(\"1/04/2023\", \"%d/%m/%Y\")\n    end_date = datetime.strptime(\"18/05/2023\", \"%d/%m/%Y\")\n\n    day_off = (end_date - start_date).days + 1\n\n    return day_off\n\nans = solution()"
    ],
    "f54684d1af9a4195b08d5e9f85769b4d": [
        "def solution():\n    from math import floor, ceil\n\n    ans = floor(2017) - ceil(201.7) + floor(20.17) - ceil(2.017)\n    return ans\n\nans = solution()"
    ],
    "0224d77dd22a452996b6417887c3bc74": [
        "def solution():\n    return 398 / 4\n\nans = solution()"
    ],
    "6d1da4e249844060b1007899c512c4fc": [
        "def solution():\n    last_digit_2023_squared = (2023 ** 2) % 10\n    last_digit_2_power_2023 = (2 ** 2023) % 10\n    sum_last_digit = (last_digit_2023_squared + last_digit_2_power_2023) % 10\n    ans = (sum_last_digit ** 3) % 10\n    return ans\n\nans = solution()"
    ],
    "9b4e50b2cce74bd080a154bda1547248": [
        "def solution():\n    # Prime factorization of 10 is 2 * 5\n    # The number of zeros at the end of a product is equal to the number of pairs of 2 and 5\n    # Since we know we have fewer 2s (10) than 5s (15), the number of zeros will be limited by the number of 2s\n    num_twos = 10\n    num_fives = 15\n\n    # The number of zeros at the end of the product is the minimum of the counts of 2s and 5s\n    num_zeros = min(num_twos, num_fives)\n\n    return num_zeros\n\nans = solution()"
    ],
    "ea0d74bbb60148689b29e204ee0a434f": [
        "def solution():\n    # Number of 5s in the prime factorization of A\n    num_fives = 15\n    # Number of 2s in the prime factorization of A\n    num_twos = 10\n\n    # The number of trailing zeros is equal to the number of pairs of (2,5)\n    # in the prime factorization because 10 = 2 * 5\n    num_zeros = min(num_fives, num_twos)\n\n    return num_zeros\n\nans = solution()"
    ],
    "87405c2a8850443ebcf2f68413e180c6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mango, orange, pear = symbols('mango orange pear')\n\n    equation1 = Eq(mango + orange, 3.80)\n    equation2 = Eq(mango + pear, 3.40)\n    equation3 = Eq(4 * mango + 2 * pear + orange, 13.20)\n\n    solutions = solve((equation1, equation2, equation3), (mango, orange, pear))\n\n    return solutions[mango]\n\nans = solution()"
    ],
    "164afcec5f87405ab3a28c1284c5b89b": [
        "from math import comb\n\ndef solution():\n    # The maximum number of intersection points of n lines occurs when no two lines are parallel\n    # and no three lines pass through the same point.\n    n = 13\n    # Any two distinct lines intersect at one point, hence we choose any 2 lines from n to find the\n    # total number of intersection points \n    max_intersections = comb(n, 2)  \n    return max_intersections\n\nans = solution()"
    ],
    "2ff1001e219d4b0ebd3a3f0f80ec684b": [
        "def solution():\n    return 9744 // 7\n\nans = solution()"
    ],
    "8da214e5bceb4927bd7edbb025a80cf8": [
        "def solution():\n    # The last digit of a number after multiplication only depends on the last digits of the factors.\n    # When multiplying numbers ending in 5, the product always ends in 5.\n    last_digit_5s = 5\n    # For 7 raised to some positive integer power, the cycle of the last digit repeats every 4: 7, 9, 3, 1\n    cycle_7s = [7, 9, 3, 1]\n    # As we have 20 sevens, we need the last digit of the 20th power of 7,\n    # which is the same as the last digit of the 0th power (since 20%4 = 0)\n    last_digit_7s = cycle_7s[20 % 4 - 1]\n    \n    # Multiply the last digits of the 20 fives and 20 sevens.\n    last_digit_product = (last_digit_5s * last_digit_7s) % 10\n\n    return last_digit_product\n\nans = solution()"
    ],
    "fc18d60c6efd483aba5f6e0938c4d924": [
        "def solution():\n    # Given values\n    AB = 14  # cm, length of the rectangle\n    CD = 14  # cm, length of the rectangle\n    pi = 22 / 7  # value of pi\n\n    # The perimeter consists of edges AB and CD, and the perimeters of the 2 semicircles\n    # and 2 quadrants, which together make up the perimeter of 2 full circles with radius AB/2.\n    # Hence, the perimeter of the combined 2 full circles is 2 * pi * r where r = AB/2.\n\n    radius = AB / 2\n    full_circles_perimeter = 2 * pi * radius\n\n    # The overall perimeter also includes the two sides AB and CD.\n    total_perimeter = full_circles_perimeter + AB + CD\n\n    return total_perimeter\n\nans = solution()"
    ],
    "c369770b6e0847c7b9bea03be1874741": [
        "def solution():\n    richard_age = 18\n    adam_age = richard_age / 2\n    will_age = (2/3) * adam_age\n    total_age = richard_age + adam_age + will_age\n\n    return total_age\n\nans = solution()"
    ],
    "936bbd100b83467b8e8f7ca63b277148": [
        "def solution():\n    remaining_after_first_day = 48 / (1 - (3/5))\n    total_watermelons = remaining_after_first_day / (2/3)\n    return int(total_watermelons)\n\nans = solution()"
    ],
    "23d9ec7fa57f4172838349ff3d74acd6": [
        "def solution():\n    ans = 2.99 + 12.99 + 22.99\n    return ans\n\nans = solution()"
    ],
    "93cf1ceee35c46ea82413427f66b961c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ahmad, sam, jim = symbols('ahmad sam jim')\n\n    equation1 = Eq(sam, ahmad + 6)\n    equation2 = Eq(jim, 2 * ahmad)\n    equation3 = Eq(ahmad + sam + jim, 334)\n\n    solutions = solve((equation1, equation2, equation3), (ahmad, sam, jim))\n\n    return solutions[jim]\n\nans = solution()"
    ],
    "48e659b717794dd1b47e78672c0d2e01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pasta_packets = 6\n    rice_packets = 5\n    total_spent = 1170  # Convert £11.70 to pence\n    pasta_price_per_packet = 95\n    \n    # calculating total cost of pasta\n    total_pasta_cost = pasta_price_per_packet * pasta_packets\n\n    # Let's denote the cost of one packet of rice as 'rice_price'\n    rice_price = symbols('rice_price')\n\n    # Equation for total cost of rice\n    equation = Eq(rice_packets * rice_price, total_spent - total_pasta_cost)\n\n    # Solving the equation for rice_price\n    solution = solve(equation, rice_price)\n    \n    # Return the price in pence, convert to 'int' because 'solve' may return a list of solutions\n    return int(solution[0])\n\nans = solution()"
    ],
    "18f570e74c21419eb70c8ce179cc02dc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(4*(x-3) + 6*x, 28)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "1169fdf1689a45368fbfa500b29b4d4a": [
        "from math import comb\n\ndef solution():\n    total_cup_noodles = 10\n    chosen_cup_noodles = 6\n    ans = comb(total_cup_noodles, chosen_cup_noodles)\n    return ans\n\nans = solution()"
    ],
    "64e22caf8eac4296b018f35f51dcffe6": [
        "def solution():\n    ans = (3/4) * (2/5) * 1\n    return ans\n\nans = solution()"
    ],
    "9e39cc7574e64c79abd7435129d58354": [
        "def solution():\n    ans = 336 // 6\n    return ans\n\nans = solution()"
    ],
    "8cbab745f9da4de496aff3862df03057": [
        "def solution():\n    num_cakes = 195\n    cost_per_cake = 46\n    total_cost = num_cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "ea69a9598ef948f590dc1d10f048d2a0": [
        "def solution():\n    total_time_combined = 12  # days it takes for both decorators to paint a house together\n    time_energetic = 20      # days it takes for the energetic one to paint the house alone\n\n    # Calculate the work done by one decorator in one day\n    work_per_day_combined = 1 / total_time_combined\n    work_per_day_energetic = 1 / time_energetic\n\n    # Since the combined work per day is the sum of the work done by each decorator,\n    # we can find the work done by the lazy decorator by subtracting\n    work_per_day_lazy = work_per_day_combined - work_per_day_energetic\n\n    # Calculate the time it would take for the lazy one to paint the house on his own\n    time_lazy = 1 / work_per_day_lazy\n\n    return int(time_lazy)\n\nans = solution()"
    ],
    "64339b5e0ff14488a7a7915e85f7baad": [
        "def solution():\n    start_fraction = 13 / 10\n\n    # Reciprocal to get the inside of the parenthesis\n    c_frac = start_fraction - 1\n    c = 1 / c_frac\n\n    # Get the whole number part of c\n    b_frac = c - int(c)\n    b = 1 / b_frac if b_frac != 0 else 0\n\n    # Get the whole number part of b\n    a_frac = b - int(b)\n    a = 1 / a_frac if a_frac != 0 else 0\n\n    # We need integers for a, b, and c, so we take the integer part to be left with fractions\n    a = int(a)\n    b = int(b)\n    if isinstance(c, float):  # Check if c is float to avoid a ValueError\n        c = int(c)\n\n    # Calculate result\n    return a + 2 * b + 3 * c\n\nans = solution()"
    ],
    "a59f135bac214a5da575b9ce4f066823": [
        "def solution():\n    result = (30 / 100) * (2 / 3) * 45\n    return result\n\nans = solution()"
    ],
    "b6b08041a7514720a1278986419ff0cb": [
        "def solution():\n    B = (3 * 9 + 5 * 9) / 8\n    return B\n\nans = solution()"
    ],
    "da6271db0c0242c5935ddca8b62ae82b": [
        "def solution():\n    num_pies = 1\n    while True:\n        if num_pies % 4 == 0 and num_pies % 6 == 0:\n            return num_pies\n        num_pies += 1\n\nans = solution()"
    ],
    "c11a8651ce514fa998ed30b3b9b53658": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "e5c0ab18d1ae4d8d82cff69be28b3579": [
        "def solution():\n    # Number of boys to girls in every line is 3:2\n    # Total number of boys participating is 42\n    # We need to find the total number of girls participating\n    \n    boys_per_line = 3\n    girls_per_line = 2\n    total_boys = 42\n    \n    # Calculate the number of lines by dividing total boys by the number of boys per line\n    num_lines = total_boys / boys_per_line\n    \n    # Calculate the total number of girls by multiplying the number of lines with the number of girls per line\n    total_girls = num_lines * girls_per_line\n    \n    return int(total_girls)\n\nans = solution()"
    ],
    "bbda3a80787243eab22a64bb52857096": [
        "def solution():\n    total_apples = 50\n    children = 8\n    \n    # The least number of apples the kid with the most can get (x), is calculated by:\n    # Distributing one apple to each of the 7 other children, which leaves us with:\n    remaining_apples = total_apples - (children - 1)\n    \n    # We then distribute the remaining apples across the 8 children equally and add the remainder\n    # to the max apple kid's share to minimize his/her count.\n    apples_per_child = remaining_apples // children\n    extra_apples = remaining_apples % children\n    \n    # The least amount that the child with the most can get is the base amount (apples_per_child)\n    # given to each child plus the extra apples if any. But since this child also got one apple already\n    # in the initial distribution, we need to subtract that one.\n    least_apples_most_kid = apples_per_child + extra_apples - 1\n\n    return least_apples_most_kid\n\nans = solution()"
    ],
    "c465c0e7f9a94f92b6df9d60a786dffa": [
        "def solution():\n    odd_digits = ['1', '3', '5', '7', '9']\n    count = 0\n    \n    for num in range(1, 1000):\n        if all(digit in odd_digits for digit in str(num)):\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "b678890a19374c38ad59d1486f4db916": [
        "def solution():\n    # Since a div 8 gives a remainder of 6, a can be represented as 8k + 6\n    # Similarly, since b div 8 gives a remainder of 7, b can be represented as 8m + 7\n    # Adding both we get (a + b) = (8k + 6) + (8m + 7)\n    # which simplifies to 8(k + m) + 13\n    # Dividing this by 8 gives a quotient of (k + m) and a remainder of 5\n    # The 13 can be broken down into 8 + 5, where 8 contributes to the quotient and 5 is the remainder\n    remainder = 5\n    return remainder\n\nans = solution()"
    ],
    "439bd1eb78b4450ebb4e7f6c4c72416e": [
        "def solution():\n    total_cloth = 45\n    cloth_per_skirt = 2.83\n    num_skirts = 8\n\n    cloth_used_for_skirts = cloth_per_skirt * num_skirts\n    remaining_cloth = total_cloth - cloth_used_for_skirts\n    cloth_per_blouse = remaining_cloth / 2\n\n    return round(cloth_per_blouse, 1)\n\nans = solution()"
    ],
    "14a5a44068684024a8f1f67d00758fe4": [
        "def solution():\n    return 2189 - 1056\n\nans = solution()"
    ],
    "d54fa4b78c5640dab674ce3faf979b3b": [
        "def solution():\n    digit_count = 0\n    current_number = 1\n    \n    while True:\n        number_length = len(str(current_number))\n        if digit_count + number_length >= 2019:\n            break\n        digit_count += number_length\n        current_number += 1\n    \n    index_in_number = 2019 - digit_count - 1\n    ans = int(str(current_number)[index_in_number])\n    \n    return ans\n\nans = solution()"
    ],
    "2d35f2e1d3d34ffbb28a8cebae92c23e": [
        "def solution():\n    # In the worst case scenario, the security guard tries each key for each room until the last key,\n    # which would then automatically be the correct key for the last room.\n    # So for the first room, he could try up to all 11 keys,\n    # for the second room, up to 10 keys remaining, and so on,\n    # until the last room where he doesn't need to try (automatically correct).\n\n    total_attempts = 0\n    for i in range(11, 0, -1):\n        total_attempts += i\n\n    return total_attempts - 1 # Subtract 1 because the last key doesn't require a try.\n\nans = solution()"
    ],
    "b764a882e0bc414689dc39fd81aaa3f1": [
        "def solution():\n    seq = [2, 2]  # Start with the given first two numbers\n\n    # We know that the sequence will eventually repeat because there are only 10 possible last digits from 0 to 9.\n    # So, we start constructing the sequence until we find the repeating pattern.\n    while True:\n        next_num = (seq[-1] + seq[-2]) % 10  # Take the last digit of the sum of the last two numbers\n        if next_num == seq[1] and (seq[-1] + seq[-2]) % 10 == seq[0]:  # Check if the current and previous number matches the first two numbers\n            # If they match, the sequence will start repeating, no need to calculate further\n            break\n        seq.append(next_num)\n\n    # Remove the last two elements that started the repetition\n    seq.pop()\n    seq.pop()\n\n    # Since we know the sequence repeats, find the position of the 2011th number within the repeating section\n    repeat_length = len(seq)\n    position_in_repeat = (2011 - 1) % repeat_length  # Use 2011-1 because the sequence is 0-indexed\n\n    # Return the number in the sequqnce that corresponds to the position in the repeat\n    ans = seq[position_in_repeat]\n    return ans\n\nans = solution()"
    ],
    "0de428143ddc41079e76fd4ffbe23365": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    n, _ = solve_congruence(*congruences)\n\n    return n\n\nans = solution()"
    ],
    "d4e1d8676a734ecc80b7b6a843595692": [
        "def solution():\n    score = 84\n    total = 120\n    percentage = (score / total) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "70c25992de344a84b58dad3b24775a9b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bob = symbols('alan bob')\n\n    # Bob has $15 more Match Dfex cards than Alan.\n    equation1 = Eq(bob, alan + 15)\n\n    # Colin gives Bob $25 cards. Bob now has 3 times as many as Alan.\n    equation2 = Eq(bob + 25, 3 * alan)\n\n    # Solving the system of equations.\n    solutions = solve((equation1, equation2), (alan, bob))\n\n    return solutions[alan]\n\nans = solution()"
    ],
    "752e5759eb7140ecb85296bce9368f6d": [
        "def solution():\n    sum_of_numbers = 3009\n    greater_number = 1722\n    smaller_number = sum_of_numbers - greater_number\n    difference = greater_number - smaller_number\n\n    return difference\n\nans = solution()"
    ],
    "9b1cb8dd1d064db29dc7e2d464d99ce8": [
        "def solution():\n    total_mass_kg = 6.5  # total mass in kilograms\n    basket_mass_kg = 500 / 1000  # convert basket mass from grams to kilograms\n    kitten_mass_kg = 0.6  # mass of each kitten in kilograms\n    number_of_kittens = 4  # number of kittens\n    \n    # calculate mass of all kittens\n    total_kittens_mass_kg = number_of_kittens * kitten_mass_kg\n    \n    # calculate mass of the cat\n    cat_mass_kg = total_mass_kg - basket_mass_kg - total_kittens_mass_kg\n\n    return cat_mass_kg\n\nans = solution()"
    ],
    "c3e11e75704c400fa620bd26e3fb5ccc": [
        "def solution():\n    fraction = 412 / 1000\n    return fraction\n\nans = solution()"
    ],
    "8b508f3a63af42fc89337bb741587d2a": [
        "def solution():\n    total_cost = 33 + 20.40\n    number_of_friends = 6\n    cost_per_person = total_cost / number_of_friends\n    return cost_per_person\n\nans = solution()"
    ],
    "4787ee3647b6493ebaa57cbbe430a914": [
        "def solution():\n    original_price = 4\n    increase_percentage = 20\n\n    new_price = original_price * (1 + increase_percentage / 100)\n\n    return new_price\n\nans = solution()"
    ],
    "01fcd86ba34343e3abb3f7ccb88315bf": [
        "def solution():\n    family_members = 1 + 3 + 4  # Mary + three brothers + four sisters\n    # Each family member buys an egg for every other family member\n    eggs_bought = family_members * (family_members - 1)\n    return eggs_bought\n\nans = solution()"
    ],
    "ff9990049fcc49a0a8417652c96375b8": [
        "def solution():\n    from datetime import datetime\n\n    departure = datetime.strptime(\"7:50\", \"%H:%M\")\n    arrival = datetime.strptime(\"8:40\", \"%H:%M\")\n    \n    journey_duration = arrival - departure\n    minutes_taken = int(journey_duration.total_seconds() / 60)\n    \n    return minutes_taken\n\nans = solution()"
    ],
    "59b6fc93c0364f6fab328fca8f96a25e": [
        "def solution():\n    return 72 // (3 * 6)\n\nans = solution()"
    ],
    "e56f53a819d843a4ac3977912faff7e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Defining symbols for the cost of an apple and a banana\n    apple, banana = symbols('apple banana')\n    \n    # Defining the equations based on the given problem\n    equation1 = Eq(3 * apple + banana, 32)\n    equation2 = Eq(6 * apple + banana, 53)\n    \n    # Solving the system of equations for both variables\n    solution = solve((equation1, equation2), (apple, banana))\n\n    # Extracting the cost of one banana\n    cost_banana = solution[banana]\n\n    return cost_banana\n\nans = solution()"
    ],
    "cc4d6508bfc94140bc674ed22aab0fb3": [
        "def solution():\n    sequence = [3, 6, 10, 15]\n    \n    # Calculate the difference between each pair of terms\n    differences = [sequence[i+1] - sequence[i] for i in range(len(sequence)-1)]\n    \n    # Second difference is constant in quadratic sequences\n    second_difference = differences[1] - differences[0]\n    \n    # Calculate next difference and thus next term\n    next_difference = differences[-1] + second_difference\n    next_term = sequence[-1] + next_difference\n    \n    return next_term\n\nans = solution()"
    ],
    "ffe4e2fccc06432695daf3045845a872": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_amount = symbols('original_amount')\n\n    # After spending 1/6 of original_amount and additional $5\n    remaining_after_dvd = original_amount - (original_amount / 6) - 5\n\n    # Then he spends 2/5 of the remaining amount and additional $12 on magazines\n    remaining_after_magazines = remaining_after_dvd - (2/5) * remaining_after_dvd - 12\n\n    # He finally has $24 left\n    equation = Eq(remaining_after_magazines, 24)\n\n    # Solving for the original amount\n    solution = solve(equation, original_amount)\n\n    return solution[0]\n\nans = solution()"
    ],
    "4c14bb3f346248288c5863e88eba5a22": [
        "def solution():\n    remaining_after_handbag = 1 - 1/5  # 4/5 remains after buying handbag\n    remaining_after_dress = 1 - 3/5  # 2/5 of the remaining money is left after buying dress\n    joanne_remaining_money = 80\n\n    initial_money = joanne_remaining_money / (remaining_after_handbag * remaining_after_dress)\n\n    return initial_money\n\nans = solution()"
    ],
    "374ef3bc7e0a42419bf59b665a1e8df4": [
        "def solution():\n    total_oil = 47\n    oil_poured_out = 5\n    num_tanks = 6\n    \n    remaining_oil = total_oil - oil_poured_out\n    oil_per_tank = remaining_oil / num_tanks\n    \n    return oil_per_tank\n\nans = solution()"
    ],
    "293a4c45646547c38aa5f707c907ac82": [
        "def solution():\n    grandpa_current_age = 72\n    johnny_current_age = 8\n    years = 0\n    \n    while True:\n        years += 1\n        grandpa_future_age = grandpa_current_age + years\n        johnny_future_age = johnny_current_age + years\n        if grandpa_future_age == 5 * johnny_future_age:\n            break\n    \n    return years\n\nans = solution()"
    ],
    "9fec34e2fa3e48e3b534a4a88195f5ba": [
        "def solution():\n    # Pip's position from front = 8th\n    # Bud's position from end = 10th\n    # Number of children in between Pip and Bud = 4\n\n    # To find the total number of children in the queue\n    # Add Pip's position (from front) with Bud's position (from the back)\n    # Subtract 1 (because Pip and Bud are counted twice), and then add the children in between\n    total_children = (8 + 10 - 1) + 4\n    return total_children\n\nans = solution()"
    ],
    "e757d8a583d44579823d7d3329dd4962": [
        "def solution():\n    return sum(range(1, 31))\n\nans = solution()"
    ],
    "2557fa802eef44bc834d1a8106a622e5": [
        "def solution():\n    principal = 2000\n    final_amount = 2519.42\n    years = 3\n    \n    interest_rate = (final_amount / principal) ** (1 / years) - 1\n    interest_rate_percent = round(interest_rate * 100, 1)\n    \n    return interest_rate_percent\n\nans = solution()"
    ],
    "b70ebf97614545e8a65cd9169021bb74": [
        "def solution():\n    return 9744 // 7\n\nans = solution()"
    ],
    "8c7b9411bbb04086ab07eacadf5afd5e": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "215e1d378ffe437ba1c9ccb1e8aee393": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of oranges Janice has\n    # Let y be the number of elderly\n    x, y = symbols('x y')\n\n    # If she gave 20 oranges to each elderly, 10 elderly will not receive any oranges\n    equation1 = Eq(y * 20 + 10 * 20, x)\n\n    # If she gave 16 oranges to each, she'd have enough for 25 boxes of 2 dozen each\n    # A dozen is 12, therefore 2 dozen is 24, and 25 boxes is 25 * 24 oranges\n    equation2 = Eq(y * 16, x - (25 * 24))\n\n    # Solve for x and y\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Now that we have x and y, we need to find out how many oranges should be given\n    # to each elderly so that she gives out all her oranges with no remainder.\n    # The number of oranges each elderly will receive will be the total number of oranges\n    # divided by the number of elderly.\n    oranges_per_elderly = solutions[x] / solutions[y]\n    \n    # Return the number of oranges each elderly should receive\n    return oranges_per_elderly\n\nans = solution()"
    ],
    "bc4291892b8945d4b66ab1f2b66dcee3": [
        "def solution():\n    # Given the operator definition, m ~ Δ ~ n = 5m + 3n\n    # We need to find the value of x such that x ~ Δ ~ 9 = 37\n    \n    # The equation becomes 5x + 3*9 = 37\n    # Simplify it to find x\n    x = (37 - 3 * 9) / 5\n\n    return x\n\nans = solution()"
    ],
    "ad306d1a04ac4d08a086e821e61e24be": [
        "def solution():\n    # Worst case scenario is taking out all balls of the two smallest amounts (orange and yellow)\n    # then the next ball must be of the same color as the remaining majority (blue).\n    max_orange_yellow = 4 + 2\n\n    # To ensure getting 4 balls of the same colour, add one more ball to the count.\n    # This will be a blue ball in the worst case, making sure there are at least 4 blue balls.\n    balls_needed = max_orange_yellow + 1\n\n    return balls_needed\n\nans = solution()"
    ],
    "1dc5079dba0a4447af8a598e73c3cbd8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime('11:15', '%H:%M')\n    travel_time = timedelta(hours=3, minutes=50)\n    departure_time = arrival_time - travel_time\n    return departure_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "7a7da228cc224c7b93f5a155d88b34d8": [
        "def solution():\n    # Because we are interested in the last digit of the product, we can reduce\n    # each of the numbers to their last digit first, as multiplying two numbers\n    # and then taking the last digit is the same as taking the last digits and \n    # then multiplying them.\n    last_digit_5s = 5 ** 20  # This will end with a last digit of 5\n    last_digit_7s = 7 ** 20  # This requires more consideration due to the pattern of last digits in powers of 7\n    \n    # Identify the pattern of last digits for powers of 7: 7, 9, 3, 1, and it repeats every 4 powers.\n    # 7^1 -> last digit is 7, 7^2 -> last digit is 9, 7^3 -> last digit is 3, 7^4 -> last digit is 1 and repeats.\n    # Since 20 is a multiple of 4, the last digit of 7^20 will be the same as the last digit of 7^4, which is 1.\n    \n    last_digit = (last_digit_5s * last_digit_7s) % 10  # Only need the last digit, so modulo 10\n    \n    return last_digit\n\nans = solution()"
    ],
    "2f184eae91df42e18de5b645882a1cc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be Tim's cookies and y be Tyler's cookies\n    t, y = symbols('t y')\n\n    # Equation based on the given condition 1/6 of Tim's cookies = 3/8 of Tyler's cookies\n    equation1 = Eq(t / 6, (3 * y) / 8)\n\n    # After selling 96 cookies, Tim had 9 times as many cookies as Tyler\n    equation2 = Eq(t, 9 * (y - 96))\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (t, y))\n\n    # Calculate total cookies before selling\n    total_cookies = solutions[t] + solutions[y]\n\n    return total_cookies\n\nans = solution()"
    ],
    "f4a9a527d7144792b53639888c6da554": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n\n    # Equations based on the given conditions\n    equation1 = Eq(chocolate, vanilla + 72)\n    equation2 = Eq(blueberry, vanilla - 36)\n    equation3 = Eq((chocolate - chocolate / 6) + (vanilla - 2 * vanilla / 3) + (blueberry - 7 * blueberry / 9), 427)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (chocolate, vanilla, blueberry))\n\n    # Calculate how many chocolate cupcakes did Sally sell\n    chocolate_sold = solutions[chocolate] / 6\n\n    return chocolate_sold\n\nans = solution()"
    ],
    "b32f8f344d984bb382e4fb73887230ab": [
        "def solution():\n    from math import lcm\n    \n    # Trains leave every 24 minutes and every 30 minutes\n    minutes_24 = 24\n    minutes_30 = 30\n\n    # Find least common multiple to see when they leave at the same time\n    next_departure = lcm(minutes_24, minutes_30)\n\n    # Calculate the hour and minute of next joint departure\n    hours, minutes = divmod(next_departure, 60)\n    next_hour = 9 + hours\n    next_minute = minutes\n\n    return (next_hour % 24, next_minute)  # Taking into account 24-hour clock format\n\nans = solution()"
    ],
    "f1389cbcaf72480d9657232ad57f5bec": [
        "def solution():\n    total_marks = 214\n    jenny_score = 136\n    missed_marks = total_marks - jenny_score\n    return missed_marks\n\nans = solution()"
    ],
    "4c5e47c0c616449c92a2b06408c58928": [
        "def solution():\n    part_filled = 24\n    fraction_filled = 3/4\n    full_tank = part_filled / fraction_filled\n    return full_tank\n\nans = solution()"
    ],
    "a558f6a1623e42cca6fbc286a7fa522e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the ages of the children\n    Anu, Benu, Chris, Dave = symbols('Anu Benu Chris Dave')\n\n    # Define equations based on the problem statement\n    equation1 = Eq(Anu + Benu + Chris + Dave, 20)\n    equation2 = Eq(Dave, Chris + 5)\n    equation3 = Eq(Dave, Benu + 3)\n    equation4 = Eq(Anu, Chris - 3)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (Anu, Benu, Chris, Dave))\n\n    # Return the age of Anu\n    return solutions[Anu]\n\nans = solution()"
    ],
    "620fcfd4b5dc4851a21f52802f067616": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the original number of red and white balls\n    r, w = symbols('r w', integer=True)\n    \n    # Define symbols for the number of balls added by Pip and Bud\n    p, b = symbols('p b', integer=True)\n    \n    # Given ratios before any balls are added\n    eq1 = Eq(r/w, 3/2)\n    \n    # After Pip adds red balls\n    eq2 = Eq((r+p)/w, 5/3)\n    \n    # After Bud adds white balls (100 more than Pip)\n    eq3 = Eq((r+p)/(w+b), 5/4)\n    \n    # Bud adds 100 more balls than Pip\n    eq4 = Eq(b, p + 100)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4), (r, w, p, b))\n    \n    return solutions[w]\n\nans = solution()"
    ],
    "87c44b7f86fe43459f5e47d26f57a64a": [
        "def solution():\n    # Remainders when a and b are divided by 8\n    remainder_a = 6\n    remainder_b = 7\n\n    # Sum of the remainders\n    sum_remainders = remainder_a + remainder_b\n\n    # Remainder of the sum when divided by 8\n    remainder_sum = sum_remainders % 8\n\n    return remainder_sum\n\nans = solution()"
    ],
    "6d2040f88fa04f798b4a1705445cb70b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mark, david = symbols('mark david')\n\n    equation1 = Eq(mark, david + 3)\n    equation2 = Eq(mark + david, 89)\n\n    solutions = solve((equation1, equation2), (mark, david))\n\n    return solutions[mark]\n\nans = solution()"
    ],
    "7a743410e3e345b999a0951be98a6199": [
        "def solution():\n    # Let x be the number of desks between Jessica and Judy\n    # Jessica sits in front of Judy, so there are 5 desks in front of Jessica,\n    # and 7 desks behind Judy, along with Jessica's and Judy's own desks.\n    # The total number of desks in the column is 5 (in front of Jessica)\n    # + x (between Jessica and Judy) + 1 (Jessica's desk) + 1 (Judy's desk)\n    # + 7 (behind Judy).\n    \n    # As Jessica sits right in front of Judy, there are no desks between them (x = 0)\n    x = 0\n    \n    # Calculate the total number of desks\n    total_desks = 5 + x + 1 + 1 + 7\n    return total_desks\n\nans = solution()"
    ],
    "85bee46ebede4627b0afc4c7e6181e1d": [
        "def solution():\n    count = 0\n    for i in range(2, 57):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "4afd36119b724be1826c3ac3454d6dba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the average weight before Aaron joined, and n be the number of people in the group before Aaron joined\n    x, n = symbols('x n')\n    \n    # Equation 1: Sum of weights before Aaron is n * x\n    # Equation 2: After Aaron joined, the sum is n * x + 45 and average changes to 61\n    equation1 = Eq(n * x + 45, (n + 1) * 61)\n    \n    # Equation 3: After Ben joined, the sum is n * x + 45 + 71 and average changes to 62\n    equation3 = Eq(n * x + 45 + 71, (n + 2) * 62)\n    \n    # Solve the system of equations for n and x\n    solutions = solve((equation1, equation3), (n, x))\n    return solutions[x]\n\nans = solution()"
    ],
    "92dd78baf86e411d93098d70392d8777": [
        "def solution():\n    return 2.507 + 13.49\n\nans = solution()"
    ],
    "8f0cf923121b43fb96d737a8fba5bd2f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    agnes, george, jack = symbols('agnes george jack')\n\n    equation1 = Eq(agnes, george - 5)\n    equation2 = Eq(jack, 3 * george)\n    equation3 = Eq(agnes + george + jack, 55)\n\n    solutions = solve((equation1, equation2, equation3), (agnes, george, jack))\n\n    return solutions[jack]\n\nans = solution()"
    ],
    "22842fb942f54d6e8ba1e02bb2901a77": [
        "def solution():\n    # Let's denote the smallest number as n\n    # Then the largest number will be n + 14 (since there are 15 consecutive numbers)\n    # The average of 15 consecutive numbers is the sum divided by the amount of numbers: 1650 / 15\n    average = 1650 / 15\n    \n    # Since the numbers are consecutive, the average will also be the middle number\n    # So, the smallest number will be the average - 7 and the largest will be the average + 7\n    smallest = average - 7\n    largest = average + 7\n    \n    # We need to find the sum of the largest and smallest numbers\n    sum_largest_smallest = smallest + largest\n    \n    return sum_largest_smallest\n\nans = solution()"
    ],
    "fcd9ab9940e142e0b0a968d0d5e14a94": [
        "def solution():\n    total_white_balls = 1991\n    total_black_balls = 1000\n    total_balls_removed = 2989\n    balls_left = total_white_balls + total_black_balls - total_balls_removed\n\n    # Ming removes balls 2 at a time.\n    # If the balls are of same color, one black ball is added from Bag B to Bag A.\n    # The number of white balls will remain unchanged in this case.\n    # If the balls are of different colors, one black ball is removed and no white ball is removed or added.\n    # The number of white balls will then be even after all the operations as every operation\n    # either keeps the number of white balls the same or decreases it by two.\n    # Hence, the remaining balls in Bag A will all be white.\n\n    # We know initial number of white balls is odd (1991),\n    # So after an odd number of operations involving the removal of two different colored balls,\n    # the number of white balls will become even.\n\n    return balls_left, 'White'\n\nans = solution()"
    ],
    "3ae41e17112a464fa38fa87aa1753aeb": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('1234567890', 5):\n        a, b, c, d, e = perm\n        first_number = int(f\"{a}{b}{1}\")\n        second_number = int(f\"{c}{0}{d}\")\n        product = first_number * second_number\n        product_str = str(product)\n        if len(product_str) == 5 and product_str[2] == e:\n            ans = product\n            break\n    return ans\n\nans = solution()"
    ],
    "1cae0bc768934c11a33a33e0df128753": [
        "def solution():\n    return 428 - 244\n\nans = solution()"
    ],
    "c2f74cd9163744c0b6071601b66266d4": [
        "def solution():\n    initial_people = 6\n    initial_hours = 15\n    target_hours = 2\n\n    work_rate = initial_people / initial_hours\n    target_people = work_rate * target_hours\n\n    return int(target_people)\n\nans = solution()"
    ],
    "79e15e6ed353495ba1c745aa3360ff9c": [
        "def solution():\n    n = 40\n    sum_of_numbers = n * (n + 1) // 2\n    return sum_of_numbers\n\nans = solution()"
    ],
    "46bcd0c64033467eaa6a8102289e0a41": [
        "def solution():\n    num_cakes = 195\n    cost_per_cake = 46\n    total_cost = num_cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "08705e45e80047af971fb071b94f2dd8": [
        "def solution():\n    n = 2.1 * 100\n    return n\n\nans = solution()"
    ],
    "ce902dc0e38d427eb9cd68b799e3bcaf": [
        "def solution():\n    current_number = 1\n    current_digit_count = 0\n    \n    while True:\n        current_number_digit_count = len(str(current_number))\n        \n        if current_digit_count + current_number_digit_count >= 2019:\n            break\n        \n        current_digit_count += current_number_digit_count\n        current_number += 1\n    \n    position_in_current_number = 2019 - current_digit_count - 1\n    ans = int(str(current_number)[position_in_current_number])\n    \n    return ans\n\nans = solution()"
    ],
    "dd3337cf8b074877bdba86538785b68b": [
        "def solution():\n    count = 0\n    # Split into two non-zero natural numbers\n    for i in range(1, 5):\n        count += 1   # There's always only one way to split (i, 5-i)\n        \n    # Split into three non-zero natural numbers where all are unique\n    count += 1   # (1, 1, 3) is one way, permutations of this don't count as different\n    \n    # Split into four non-zero natural numbers\n    # No way to split 5 into four unique non-zero numbers\n    \n    # There are no splits into more than four non-zero numbers as 5 is too small.\n    \n    return count\n\nans = solution()"
    ],
    "d7edf824287e4a788997a750d1c998c7": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for units in range(1, 10):\n            if units - hundreds == 2:\n                # For each valid (hundreds, units) pair,\n                # there are 10 possible choices for the tens digit (0 to 9)\n                count += 10\n    return count\n\nans = solution()"
    ],
    "044e10e45e8f4f60ae3f9ce39d3f3cf8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, bernice, cindy = symbols('alice bernice cindy')\n\n    equation1 = Eq(bernice - 240, alice)\n    equation2 = Eq(cindy, bernice + 100)\n    equation3 = Eq(alice + bernice + cindy, 1792)\n\n    solutions = solve((equation1, equation2, equation3), (alice, bernice, cindy))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "cc66cd3f11294d1984b5cf049794398d": [
        "def solution():\n    remaining_after_students = 108 / (2 / 5)\n    original_chocolates = remaining_after_students / (1 - 0.8)\n    return int(original_chocolates)\n\nans = solution()"
    ],
    "f74c213339b0455a9cf262e2e789bcee": [
        "def solution():\n    score = 84\n    total = 120\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "4a61def62aa04793872f134a2ee581fc": [
        "def solution():\n    # Given that Samantha has more votes than anyone else,\n    # in the least case scenario, the other two candidates would have the same number of votes,\n    # and this number should be less than Samantha's votes.\n\n    # If Samantha has the least number of votes while still having more than the others,\n    # the remaining votes must be split between the two other candidates as equally as possible.\n    # Therefore, we can use the Pigeonhole Principle to determine that with 25 votes, divided by three candidates,\n    # two will have at least 8 votes each, leaving Samantha with the remaining.\n\n    # Total votes\n    total_votes = 25\n    # Other two candidates' votes in the least case (8 each)\n    other_votes = 8\n\n    # Since there are 3 candidates and one must have more votes,\n    # We divide the total votes by 3 and round up for the minimum.\n    # Then we can subtract 1 since we round up to ensure that Samantha has more votes.\n    samantha_votes = (total_votes // 3) + 1\n\n    # If rounding up still causes Samantha to have the same as others,\n    # giving Samantha one more vote will ensure she has the most.\n    if samantha_votes <= other_votes:\n        samantha_votes += 1\n\n    return samantha_votes\n\nans = solution()"
    ],
    "3973a8cd4ae64cb8a964980f72c023df": [
        "def solution():\n    sum_of_numbers = 3009\n    greater_number = 1722\n    smaller_number = sum_of_numbers - greater_number\n\n    difference = greater_number - smaller_number\n    return difference\n\nans = solution()"
    ],
    "7dfb05a6c32a4880b5ff66c479e32727": [
        "def solution():\n    total_mass_kg = 6.5\n    basket_mass_kg = 0.5\n    kitten_mass_kg = 0.6\n    number_of_kittens = 4\n\n    kittens_total_mass_kg = kitten_mass_kg * number_of_kittens\n    cat_mass_kg = total_mass_kg - basket_mass_kg - kittens_total_mass_kg\n\n    return cat_mass_kg\n\nans = solution()"
    ],
    "2aa1e0027a284c64a861b8e60942d889": [
        "def solution():\n    count = sum(str(i).count('1') for i in range(1, 131))\n    return count\n\nans = solution()"
    ],
    "250e63b1521b424d9f6cf44f8f79623b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4*x + 7, 5*(x + 1))\n\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "c7536ec02a28451588a7654fe8fdcb94": [
        "def solution():\n    pages = 0\n    digits = 0\n    while digits < 291:\n        pages += 1\n        digits += len(str(pages))\n    return pages - 1  # Subtract 1 because the loop adds an extra page\n\nans = solution()"
    ],
    "71a5e420be854536b851bfc6431ef442": [
        "def solution():\n    fraction = 13 / 25\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "1e18650a928a4a8aaa9433e3d4f8bdbf": [
        "def solution():\n    kg_to_g = 2.4 * 1000  # 1 kg = 1000 g\n    return kg_to_g\n\nans = solution()"
    ],
    "2c1618650feb43ee829f8c60f37d6d85": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    # Assign a symbol for x, the annual interest rate as a percentage\n    x = symbols('x')\n\n    # Calculate the value of the investment after 5 years\n    # using the formula for compound interest A = P(1 + r/n)^(nt),\n    # where P = principal, r = annual interest rate (as a decimal),\n    # n = number of times the interest is compounded per year (assumed to be compounded annually, hence n=1),\n    # t = time in years, and A = amount of money after t years.\n    # Since x is the annual interest rate as a percentage, we convert it to a decimal by dividing by 100\n    # Here, we will assume the interest is compounded once per year\n\n    P = 6000\n    A = 8029.35\n    t = 5\n\n    # The equation for A using the provided values and assuming annual compounding\n    equation = Eq(P*(1 + x / 100)**t, A)\n\n    # Solve the equation for the interest rate x\n    solved_value = solve(equation, x)\n\n    return float(solved_value[0])\n\nans = solution()"
    ],
    "54ed486695084b83bc52e1acf3621c39": [
        "def solution():\n    total_spent = 1500\n    chairs_spent = 360\n    \n    percent_spent_on_chairs = (chairs_spent / total_spent) * 100\n    \n    return percent_spent_on_chairs\n\nans = solution()"
    ],
    "58827db30bfe41e3aa8887dbbf840403": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of pages Clarice has already read and y be the total number of pages in the magazine.\n    x, y = symbols('x y')\n\n    # According to the problem, the ratio of read to unread is 1:5\n    # So, unread pages will be 5x and total pages will be x + 5x = 6x\n    # The first equation can be written as y = 6x\n\n    # After reading another 80 pages, she will have read x + 80 pages\n    # The problem then states that (x + 80) will be 70% of total pages y\n    # The second equation can be written as (x + 80) = 0.7 * y\n\n    # Now we have a system of two equations:\n    equation1 = Eq(y, 6 * x)\n    equation2 = Eq(x + 80, 0.7 * y)\n\n    # Solving the system of equations for x and y\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "c113a7ebab824fa5aff9432d5ba4e66a": [
        "def solution():\n    # Let x be the number of correct answers CC had\n    # Then Vivi had x correct answers + 15/10 (since each correct answer is 10 points)\n    # Together, they answered 10 + 10 = 20 questions\n    # Both got 95 points together\n\n    # For each correct answer, one earns 10 points, and for each incorrect answer, one loses 5 points\n    # Thus, total points = 10*(number of correct answers) - 5*(number of incorrect answers)\n    \n    # For CC: 10x - 5*(10-x) = CC's points\n    # For Vivi: 10(x + 15/10) - 5*(10 - (x + 15/10)) = x*10 + 15 - 5*(10 - x - 1.5)\n    # Their total points are 95.\n\n    for x in range(11):  # CC can only answer between 0 and 10 questions correctly\n        cc_points = 10*x - 5*(10-x)\n        vivi_points = cc_points + 15\n        if cc_points + vivi_points == 95:\n            return x\n\nans = solution()"
    ],
    "d6a8e2b1fe0b4d46b18689b12ef527f6": [
        "def solution():\n    total_volume = 47  # Total volume of oil\n    poured_out_volume = 5  # Volume of oil poured into a bottle\n    num_tanks = 6  # Number of tanks\n\n    # Volume poured into each tank\n    volume_per_tank = (total_volume - poured_out_volume) / num_tanks\n\n    return volume_per_tank\n\nans = solution()"
    ],
    "86483a83b8a641b3802d1bcfe3db3b99": [
        "def solution():\n    # Number of girls divided by the number of girls per room gives the number of rooms for girls\n    girls_rooms = 45 // 5\n    \n    # Number of teachers divided by the number of teachers per room gives the number of rooms for teachers\n    teachers_rooms = 6 // 3\n    \n    # The total number of rooms is the sum of the rooms for girls and the rooms for teachers\n    total_rooms = girls_rooms + teachers_rooms\n    \n    return total_rooms\n\nans = solution()"
    ],
    "96bead80155a4a23ba5e189d220a2750": [
        "def solution():\n    flour_for_15_people = 650\n    people_increase = 18\n    \n    flour_for_1_person = flour_for_15_people / 15\n    flour_for_18_people = flour_for_1_person * people_increase\n    \n    return flour_for_18_people\n\nans = solution()"
    ],
    "71c301ca64c3481fa3c4d9fbd27b071f": [
        "def solution():\n    adult_price = 6.34\n    child_price = 4.75\n    total_cost = (2 * adult_price) + (3 * child_price)\n    return total_cost\n\nans = solution()"
    ],
    "8d63b90682ef4e86a52c8d41e221e99e": [
        "def solution():\n    num_str = \"2581953752\"\n    min_sum = float('inf')\n    \n    for first_cut in range(1, len(num_str) - 1):\n        for second_cut in range(first_cut + 1, len(num_str)):\n            part1 = int(num_str[:first_cut])\n            part2 = int(num_str[first_cut:second_cut])\n            part3 = int(num_str[second_cut:])\n            \n            current_sum = part1 + part2 + part3\n            min_sum = min(min_sum, current_sum)\n    \n    return min_sum\n\nans = solution()"
    ],
    "5286b8a162984ebd83b4dc18a0895e9d": [
        "def solution():\n    mm_in_m = 1000\n    ans = 7000000 / mm_in_m\n    return ans\n\nans = solution()"
    ],
    "982b7c2099ae4cbbbf15acf185975676": [
        "def solution():\n    # Ratios\n    ratio_science_literature = 9 / 10\n    ratio_literature_math = 5 / 7\n\n    # Equations based on the total members\n    # science + literature + math = 99\n    # science = 9/10 * literature\n    # math = 7/5 * literature\n\n    # Derive equations\n    # literature * (1 + 9/10 + 7/5) = 99\n    # literature * (20/10 + 18/10 + 14/10) = 99\n    # literature * (52/10) = 99\n    # literature = 99 / (52/10)\n    \n    literature = 99 / (52 / 10)\n    math = (7 / 5) * literature\n    \n    # More members in math club than literature club\n    more_members = math - literature\n\n    return int(more_members)\n\nans = solution()"
    ],
    "2428c63651de4a9cb4a9fd440dd72a13": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    divisor = 1  # smallest possible non-zero divisor in integer division\n    \n    dividend = divisor * quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "e429d1f710e0443ca3e34ebd54ce1999": [
        "def solution():\n    # Worst case scenario for two marbles of each color: 2 blue + 2 yellow + 2 red\n    # After this, next marble must guarantee the third marble of the same color\n    marbles_needed = (2 + 2 + 2) + 1\n    return marbles_needed\n\nans = solution()"
    ],
    "a01e320335ab4dd5a4d3902f2010b2ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for current ages of Melissa and her mother\n    melissa, mother = symbols('melissa mother')\n\n    # At some point in time, Melissa was 8 and her mother was 32\n    past_age_difference = mother - melissa - (32 - 8)\n\n    # Now, the mother is three times as old as Melissa\n    current_age_relation = Eq(mother, 3 * melissa)\n\n    # Solve the system of equations\n    solutions = solve((current_age_relation, past_age_difference), (melissa, mother))\n\n    return solutions[melissa]\n\nans = solution()"
    ],
    "60cc013cce3f4dc3889d6f7f58af72a5": [
        "def solution():\n    # Each side has 6 flowers including the flowers at the corners.\n    # There are 4 sides, but remember that the corner flowers are counted for two sides.\n    # So we have to subtract the 4 corner flowers at the end to avoid double counting them.\n    \n    flowers_per_side = 6\n    total_sides = 4\n    corner_flowers = 4\n\n    total_flowers = (flowers_per_side * total_sides) - corner_flowers\n\n    return total_flowers\n\nans = solution()"
    ],
    "d67e4c58bf394611abfd4c9f92360478": [
        "def solution():\n    n = 48\n    factors = [i for i in range(1, n + 1) if n % i == 0]\n    even_factors_count = sum(1 for factor in factors if factor % 2 == 0)\n    return even_factors_count\n\nans = solution()"
    ],
    "27557b6401534a719cdf0923343a5978": [
        "def solution():\n    original_length = 10\n    piece1 = 4.8\n    piece2 = 2.73\n    piece3 = original_length - (piece1 + piece2)\n\n    lengths = sorted([piece1, piece2, piece3])\n    difference = lengths[-1] - lengths[0]\n\n    return difference\n\nans = solution()"
    ],
    "41e9b6cd168c41fd92de334d68528b9e": [
        "def solution():\n    # Let the two original numbers be x and y\n    # According to the question, the sum of two numbers is 11.63\n    # Equation 1: x + y = 11.63\n    \n    # When Oliver accidentally shifted the decimal point in one of the numbers one position to the left,\n    # he got an answer of 5.87 instead.\n    # Therefore, one number could be x / 10, and the sum of the numbers would be x / 10 + y = 5.87\n    \n    # We have two equations now:\n    # x + y = 11.63 (Equation 1)\n    # x / 10 + y = 5.87 (Equation 2)\n    \n    # Solve the system of equations to find x and y\n    # From Equation 2, we get x = (5.87 - y) * 10\n    \n    # Substitute this value in Equation 1\n    # (5.87 - y) * 10 + y = 11.63\n    # 58.7 - 10y + y = 11.63\n    # -9y = 11.63 - 58.7\n    # -9y = -47.07\n    # y = -47.07 / -9\n    y = 47.07 / 9\n    \n    # Now find x using Equation 1\n    # x = 11.63 - y\n    x = 11.63 - y\n    \n    # The difference between the two original numbers is |x - y|\n    difference = abs(x - y)\n    \n    # The question asks for one hundred times the difference between the two original numbers\n    return int(difference * 100)\n\nans = solution()"
    ],
    "0ee683d386944878b9a97b21d30b9512": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    basketball, volleyball = symbols('basketball volleyball')\n\n    equation1 = Eq(5 * basketball + 6 * volleyball, 325)\n    equation2 = Eq(basketball, volleyball + 10)\n\n    solutions = solve((equation1, equation2), (basketball, volleyball))\n\n    return solutions[basketball]\n\nans = solution()"
    ],
    "0d0aa1e9d4534f37bbbcb05df00921eb": [
        "def solution():\n    pattern = '1234'\n    times = 47 // len(pattern)\n    partial_pattern = 47 % len(pattern)\n\n    total = sum(int(digit) for digit in pattern) * times\n    total += sum(int(pattern[i]) for i in range(partial_pattern))\n\n    return total\n\nans = solution()"
    ],
    "f1695ae843b54e2e815cd446c64a29f4": [
        "def solution():\n    cost_for_6 = 2.52\n    cost_for_1 = cost_for_6 / 6\n    cost_for_9 = cost_for_1 * 9\n    return cost_for_9\n\nans = solution()"
    ],
    "d042bcbac05b43a89ee5aae713200f24": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys = symbols('boys')\n\n    girls = 40 - boys\n\n    equation = Eq((boys * 20 + girls * 60) / 40, 35)\n\n    boys_count = solve(equation, boys)\n\n    return boys_count[0]\n\nans = solution()"
    ],
    "e886e230e9a14129ab9efc5f51fc6eeb": [
        "def solution():\n    for correct in range(1, 26):\n        incorrect = 25 - correct\n        if 4*correct - incorrect == 61:\n            for j_correct in range(1, correct):\n                j_incorrect = 25 - j_correct\n                if 4*j_correct - j_incorrect == 61:\n                    return correct - j_correct\n    return None\n\nans = solution()"
    ],
    "fa6f1ecf65574a4f92806a9db2ff7aa4": [
        "def solution():\n    # Thomas's Calculation (incorrect)\n    # 5 units = $132\n    # 1 unit = $132 ÷ 5 = $26.4\n    # Therefore, Thomas's calculation of 1 unit is incorrect.\n    \n    # Cost of the book and bag together is $132\n    combined_cost = 132\n\n    # Let the total amount of money Li Yan had be x.\n    # She spent 1/3 of it on a book: 1/3 * x\n    # She then spent 1/2 of the remainder (2/3 * x) on a bag: 1/2 * (2/3 * x) = 1/3 * x\n    # So, 1/3 * x (book) + 1/3 * x (bag) = 132\n\n    # Combine the fractions: (1/3 * x) + (1/3 * x) = (2/3 * x)\n    # So, we have 2/3 * x = 132\n\n    # To find the total amount x, we solve for x: \n    # x = 132 / (2/3) = 132 * (3/2) = 198\n\n    total_amount = combined_cost * (3/2)\n\n    return total_amount\n\nans = solution()"
    ],
    "cb28d5923791411abd5c48b4c2e56055": [
        "def solution():\n    for a in range(1, 10):  # 'a' cannot be 0 as it's the first digit of the 2-digit number\n        for b in range(10):\n            ab = 10 * a + b\n            ba = 10 * b + a\n            if 8 * ab == 3 * ba:\n                return ab\n\nans = solution()"
    ],
    "8d9f841035384ec78cd71c7adbc51cf2": [
        "def solution():\n    total_pounds = 1.28  # in pounds\n    additional_pence = 57  # in pence\n\n    pence_in_one_pound = 100  \n    total = total_pounds + (additional_pence / pence_in_one_pound)  # convert pence to pounds and add\n\n    return total\n\nans = solution()"
    ],
    "2760fd70b00d4bc1bbb33c4a1176ce49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for pigs and goats\n    pigs, goats = symbols('pigs goats')\n    \n    # Create equations based on the problem statement\n    equation1 = Eq(3*pigs + goats, 440)\n    equation2 = Eq(pigs + 2*goats, 280)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (pigs, goats))\n\n    # Calculate the cost for 5 pigs and 5 goats\n    cost = 5 * solutions[pigs] + 5 * solutions[goats]\n    \n    return cost\n\nans = solution()"
    ],
    "e42cc648c3f649cf90ee902c4be9e740": [
        "def solution():\n    ans = 15 / (1/3)\n    return ans\n\nans = solution()"
    ],
    "1f17462588b24d4d87e7ac26ce8e297e": [
        "def solution():\n    for i in range(10000, 100000):\n        if int(str(i) + '1') ==  3 * int('1' + str(i)):\n            return i\n\nans = solution()"
    ],
    "70a735430d5b4777a79bbddaf2823ef0": [
        "def solution():\n    # price per cupcake for the first 20 cupcakes\n    price_first_20 = 4.50\n    # shipping and handling cost\n    shipping_handling = 12.00\n    # price per cupcake after 20 with the discount\n    price_after_20 = 4.50 * 0.80\n\n    # Calculate the number of cupcakes if only ordering 20 or fewer\n    if (120 - shipping_handling) / price_first_20 <= 20:\n        return (120 - shipping_handling) / price_first_20\n\n    # Calculate the number of cupcakes if ordering more than 20\n    # First calculate the price for the first 20\n    price_for_first_20 = 20 * price_first_20\n    # Then subtract that price and the shipping and handling from the bill\n    additional_cupcakes_price = 120 - price_for_first_20 - shipping_handling\n    # Then calculate the number of additional cupcakes\n    additional_cupcakes = additional_cupcakes_price / price_after_20\n    # The total number of cupcakes is the sum of the first 20 plus the additional\n    total_cupcakes = 20 + additional_cupcakes\n\n    return int(total_cupcakes)\n\nans = solution()"
    ],
    "5b2be8c5931d445e95f69e4a169b6320": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    A = symbols('A')\n    equation = Eq(2 + 1 / (2 + 1 / (1 + 1 / (2 + 1 / A))), 64/27)\n    \n    solution = solve(equation, A)\n    return solution[0]\n\nans = solution()"
    ],
    "f29bca0ca85649a0aa278151d40c1060": [
        "def solution():\n    people_in_front = 9\n    place_from_back = 12\n    \n    total_people = people_in_front + place_from_back - 1  # Subtract 1 because Rose is counted twice\n\n    return total_people\n\nans = solution()"
    ],
    "c2a4472f1dcc4adaa002fb9b0cdbc480": [
        "def solution():\n    john_current_age = 8\n    grandmother_current_age = john_current_age + 42\n    total_age_in_2_years = (john_current_age + 2) + (grandmother_current_age + 2)\n    return total_age_in_2_years\n\nans = solution()"
    ],
    "164b7924a0ed4adebd005bf7b479d61e": [
        "def solution():\n    n = 50\n    ans = n * (n + 1) // 2\n    return ans\n\nans = solution()"
    ],
    "ad987dbb1afa406d877032905dfd4b9e": [
        "def solution():\n    # Let 'e' be the amount of work the energetic decorator does in one day\n    # and 'l' be the amount of work the lazy decorator does in one day.\n    # If the energetic one can finish the job in 10 days, his work rate is:\n    e = 1 / 10\n\n    # Together, they take 6 days to paint the house, so their combined work rate is:\n    combined_rate = 1 / 6\n\n    # The work done by the lazy one in one day will be the combined rate minus the energetic one's rate:\n    l = combined_rate - e\n\n    # To find out how many days the lazy one would take, we take the reciprocal of 'l':\n    days_lazy_one = 1 / l\n\n    return days_lazy_one\n\nans = solution()"
    ],
    "c873b5b5ac9541dcb53c627cbe9f99fb": [
        "def solution():\n    result = 52\n    original_number = (result - 10) / 2\n    return original_number\n\nans = solution()"
    ],
    "af15f396b0a9452e90cd92024ee3655d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for John's number\n    john_number = symbols('john_number')\n\n    # Create the equation describing the problem\n    equation = Eq((john_number + 45) / 3, 2 * john_number)\n\n    # Solve the equation\n    solution = solve(equation, john_number)\n\n    # Return the solution\n    return solution[john_number]\n\nans = solution()"
    ],
    "48f2b82e698b40afaaebc96c59f848cf": [
        "def solution():\n    count = 0\n    # Since each brother has to have at least two books, we start counting from 2\n    for brother1 in range(2, 11):\n        for brother2 in range(2, 11):\n            brother3 = 10 - brother1 - brother2\n            if brother3 >= 2:\n                count += 1\n    # Each distribution is counted three times because of permutation, so we divide the result by 3\n    return count // 3\n\nans = solution()"
    ],
    "d2baf801099b456eb142be13a3d0ee04": [
        "def solution():\n    return -2 + 9\n\nans = solution()"
    ],
    "902e4b7c9173456ebdf391276d04a873": [
        "def solution():\n    ans = 2.507 + 13.49\n    return ans\n\nans = solution()"
    ],
    "6563b1695a224e99b4db826a159ebb3f": [
        "def solution():\n    pages_read_first_day = 40\n    fraction_of_book = 1 / 5\n\n    total_pages = pages_read_first_day / fraction_of_book\n\n    return int(total_pages)\n\nans = solution()"
    ],
    "1b6c26ceb8bb4bedb8eb52f798a8d704": [
        "def solution():\n    # Assuming the worst case scenario:\n    # Draw all marbles of the most abundant color first, which is red (12 marbles).\n    # Then draw all marbles of the second most abundant color, which is blue (9 marbles).\n    # Up to this point, all marbles drawn are either red or blue.\n    # Then draw all marbles of the third most abundant color, which is yellow (8 marbles).\n    # Now we have red, blue, and yellow marbles.\n    # To ensure we have 4 marbles of different colors, draw one more marble, which will be green.\n    \n    # So the total marbles drawn to ensure 4 different colors is:\n    total_drawn = 12 + 9 + 8 + 1  # red + blue + yellow + 1 more for green\n    return total_drawn\n\nans = solution()"
    ],
    "5c64c7efc74e45c9b22395c64f0188f1": [
        "def solution():\n    for hundreds in range(1, 10):\n        for tens in range(1, 10):\n            for ones in range(1, 10):\n                if (hundreds + tens + ones == 15) and (tens == 2 * hundreds) and (hundreds == 1 + ones):\n                    return 100 * hundreds + 10 * tens + ones\n\nans = solution()"
    ],
    "7607c9c8b07e482d9e79d3a708db918f": [
        "def solution():\n    # Counting two-digit numbers with the unit digit as 6\n    # These would be: 16, 26, 36, ..., 96\n    first_two_digit_with_6 = 16\n    last_two_digit_with_6 = 96\n    ans = (last_two_digit_with_6 - first_two_digit_with_6) // 10 + 1\n    return ans\n\nans = solution()"
    ],
    "c07d7632fe45424588ee9b8ac2d2fccf": [
        "def solution():\n    # The last child is the tallest with a height of 131 cm.\n    # Since all children have unique heights and they are whole numbers,\n    # we can assign the maximum height for each child starting from the tallest.\n    # This means the child before the last is at most 130 cm, and so on.\n    \n    # Calculating the maximum height for Tom, who is at the 10th position.\n    # We subtract 9 from the total number of children to account for those taller than Tom.\n    # Tom's maximum height is the height of the child in the 21st position (if counting from tallest to shortest).\n    max_height_tom = 131 - (31 - 10)\n    \n    return max_height_tom\n\nans = solution()"
    ],
    "2dfebe97055d446791ecaff5fcc836bf": [
        "def solution():\n    last_purchase = 105.6 - 14.4\n    total_spent = last_purchase + 105.6\n    return total_spent\n\nans = solution()"
    ],
    "fcb8fb796c2e414aa7381ebb608de85a": [
        "def solution():\n    red_balloons = 57\n    yellow_balloons = red_balloons // 3\n    return yellow_balloons\n\nans = solution()"
    ],
    "39dc0e644ff04e4b8de2705b050243b2": [
        "def solution():\n    jason_books = 30\n    books_given = 4\n\n    anthea_books_after = jason_books - books_given\n    jason_books_after = anthea_books_after\n\n    anthea_books_before = anthea_books_after - books_given\n\n    difference = jason_books - anthea_books_before\n\n    return difference\n\nans = solution()"
    ],
    "f7ea1bce2ab643be811669ebb19981e8": [
        "def solution():\n    first = 3 % 3\n    second = 10 % 3\n    for _ in range(3, 2024):\n        next_number = (first + second) % 3\n        first, second = second, next_number\n    return second\n\nans = solution()"
    ],
    "3d72ae69fbf944028dbf7faeb677cf3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n    first_number = 208 - magic_number\n    second_number = 136 - magic_number\n    equation = Eq(first_number, 9 * second_number)\n\n    magic_number_value = solve(equation, magic_number)\n\n    return magic_number_value[0]\n\nans = solution()"
    ],
    "0d39e6b35f684ae79df0144ef9a461d4": [
        "def solution():\n    ans = 0.7 / 100\n    return ans\n\nans = solution()"
    ],
    "4abc9fccc13742938eb625a6b470a258": [
        "def solution():\n    for hundreds in range(1, 10):\n        for tens in range(1, 10):\n            for ones in range(1, 10):\n                if (hundreds + tens + ones == 15 and \n                    tens == 2 * hundreds and \n                    hundreds == ones + 1):\n                    return hundreds * 100 + tens * 10 + ones\n\nans = solution()"
    ],
    "b0b3f16fb74d472d8584aeb80b4a4f84": [
        "def solution():\n    gift_for_5 = 5\n    remainder_for_5 = 3\n    gift_for_4 = 4\n    remainder_for_4 = 9\n\n    # Calculate gifts by reducing remainders to get a multiple of students\n    gifts_when_5 = remainder_for_5 + gift_for_5\n    gifts_when_4 = remainder_for_4 + gift_for_4\n\n    # Find LCM of gifts_for_5 and gifts_for_4\n    # Since we need to find a number that gives a remainder when divided by both gift_for_5 and gift_for_4\n    # We increment by multiples of the larger gift package until the number satisfies both conditions\n    max_gift = max(gift_for_5, gift_for_4)\n    while True:\n        if gifts_when_5 % gift_for_4 == remainder_for_4 and gifts_when_5 % gift_for_5 == remainder_for_5:\n            # We found the total number of gifts that fulfills the conditions\n            break\n        gifts_when_5 += max_gift\n\n    # Number of students is the total gifts divided by the amount given to each student\n    num_students = (gifts_when_5 - remainder_for_5) // gift_for_5\n\n    return num_students\n\nans = solution()"
    ],
    "b6d78733f8874f2bbfe35bd591c415ac": [
        "def solution():\n    # The shortest child's height is minimum of 1 cm (assuming children can't have 0 cm height)\n    # The last (31st) child's height is known to be 131 cm\n    # Tom is standing at the 10th place, so there are 9 children shorter than him\n    # To maximize Tom's height, we give the minimum height to the other 9 children\n    # Let's assume a minimum height difference of 1 cm between children\n    \n    # Assign the minimum height to the first 9 children\n    min_heights_for_first_9 = list(range(1, 10))  # This gives the heights 1, 2, ..., 9 for the first 9 children\n\n    # Tom's maximum height will be one more than the 9th child's height\n    tom_max_height = min_heights_for_first_9[-1] + 1\n    \n    return tom_max_height\n\nans = solution()"
    ],
    "d920f123f70448728a0dafe2a25fdf8d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bella, chloe = symbols('alan bella chloe')\n    \n    # Alan's money to Bella's is 4:3\n    equation1 = Eq(alan, (4/7) * (alan + bella))\n    \n    # Alan has £20 more than Chloe\n    equation2 = Eq(alan, chloe + 20)\n\n    # Total money equation\n    equation3 = Eq(alan + bella + chloe, 200)\n\n    solutions = solve((equation1, equation2, equation3), (alan, bella, chloe))\n    \n    return solutions[chloe]\n\nans = solution()"
    ],
    "e681c565553246ed822a81c5b707ec85": [
        "from itertools import permutations\n\ndef solution():\n    nums = list(permutations(range(1, 9), 2))\n    valid_nums = [10*a + b for a, b in nums if a != b]\n\n    # Filter according to hints\n    # In the smallest number, the ones digit is twice the tens digit.\n    valid_nums = [n for n in valid_nums if (n % 10) == 2 * (n // 10)]\n\n    # In the largest number, the sum of ones and tens digits is 9.\n    valid_nums = [n for n in valid_nums if (n // 10) + (n % 10) != 9]\n\n    # In the second largest number, the tens digit is 5 more than the ones digit.\n    valid_nums = [n for n in valid_nums if (n // 10) != (n % 10) + 5]\n\n    # There is only 1 odd number among these 4 numbers.\n    valid_nums = [n for n in valid_nums if sum([num % 2 != 0 for num in valid_nums]) == 1]\n\n    # Now find the second smallest number\n    valid_nums.sort()\n    ans = valid_nums[1]\n\n    return ans\n\nans = solution()"
    ],
    "9778a46322434ec1b4d042645d3fe72c": [
        "def solution():\n    box_of_chocolates = 7.85\n    chocolate_bar_each = 1.83\n    total_cost = box_of_chocolates + 2 * chocolate_bar_each\n    payment = 20\n    \n    change = payment - total_cost\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "008ec416ca584514bc4c64610a10f70c": [
        "def solution():\n    from math import factorial\n\n    # Lily and her mother's positions are fixed, so we have to arrange the remaining 3 people.\n    # The number of ways to arrange n distinct objects is n! (n factorial).\n\n    num_ways = factorial(3)  # Arranging the 3 family members in between Lily and her mother.\n\n    return num_ways\n\nans = solution()"
    ],
    "56e3afa3b21b4b4d94f49f7e28b2d801": [
        "def solution():\n    first_term = 7\n    last_term = 99\n    difference = 4\n\n    # Calculate the number of terms in the sequence\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    # Calculate the sum of the arithmetic sequence\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "d648707a7707454fba27679a28405452": [
        "def solution():\n    smallest_two_digit = 10\n    while True:\n        if smallest_two_digit % 5 == 4 and smallest_two_digit % 7 == 4:\n            return smallest_two_digit\n        smallest_two_digit += 1\n\nans = solution()"
    ],
    "d56f06764b62432b87f7f6c8d24937fd": [
        "def solution():\n    ans = 1.28 - 0.57\n    return ans\n\nans = solution()"
    ],
    "9c5b7505e33a431cbdc19a2c3eb56463": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variable for total visitors\n    total_visitors = symbols('total_visitors')\n\n    # Fraction of children and men\n    children_fraction = 3 / 5\n    men_fraction = 1 / 2\n\n    # Equations based on the problem\n    children = children_fraction * total_visitors\n    remaining_visitors = total_visitors - children\n    men = men_fraction * remaining_visitors\n    equation = Eq(children - men, 140)\n\n    # Solve for the total number of visitors\n    solutions = solve((equation), (total_visitors))\n\n    return solutions[0]\n\nans = solution()"
    ],
    "bab761c62984431592b8726b89f2c00c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, peter = symbols('sam peter')\n\n    initial_condition = Eq(sam, peter + 40)\n    after_sam_gives = sam - 0.20 * sam\n    after_peter_gives = peter + 0.20 * sam - (peter + 0.20 * sam) * 0.25\n\n    final_condition = Eq(after_sam_gives + (peter + 0.20 * sam) * 0.25, after_peter_gives + 96)\n\n    solutions = solve((initial_condition, final_condition), (sam, peter))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "c49ccde6fc4248779aaf8093faa8ad18": [
        "def solution():\n    hook_walk_time = 20\n    difference = 5\n    lily_walk_time = hook_walk_time - difference\n    return lily_walk_time\n\nans = solution()"
    ],
    "355c1761cec84abd8c37e4d0cef83961": [
        "def solution():\n    # Given average of three numbers is 120\n    average_three_numbers = 120\n    sum_three_numbers = 3 * average_three_numbers  # Total sum of the three numbers\n\n    # Given average of four numbers including the new number is 150\n    average_four_numbers = 150\n    sum_four_numbers = 4 * average_four_numbers  # Total sum of the four numbers\n\n    # The fourth number is the difference between the sum of four and sum of three numbers\n    fourth_number = sum_four_numbers - sum_three_numbers\n\n    return fourth_number\n\nans = solution()"
    ],
    "e03fffbc9560433d92099ac8fe50d88b": [
        "def solution():\n    return 543 * 6\n\nans = solution()"
    ],
    "a377ef0412d7428190675053dcb17b39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for the initial amount of money Amy had\n    initial_money = symbols('initial_money')\n    \n    # Set up the equation based on the problem's description\n    equation = Eq((initial_money * (6/11) + 5) + (initial_money - (initial_money * (6/11) + 5)) * (3/10) + 12, initial_money - 30)\n\n    # Solve the equation\n    solution = solve(equation, initial_money)\n\n    # Get the solution\n    return solution[0]\n\nans = solution()"
    ],
    "98eef6de38874e70b51aaed908dca418": [
        "def solution():\n    ans = (26 + (12 + 6) * 3) / 4\n    return ans\n\nans = solution()"
    ],
    "e2a5a025a0174c48a9cbcfecee7eec99": [
        "def solution():\n    # Using the formula for the sum of squares from 1 to n: 1² + 2² + 3² + ... + n² = 1/6n(n+1)(n+2)\n    # We have to subtract the sum of squares from 1 to 4 from the sum of squares from 1 to 15.\n    \n    def sum_of_squares(n):\n        return (n * (n + 1) * (2 * n + 1)) // 6\n    \n    sum_1_to_15 = sum_of_squares(15)\n    sum_1_to_4 = sum_of_squares(4)\n    \n    correct_answer = sum_1_to_15 - sum_1_to_4\n    \n    # Check if Kimmy's answer is correct\n    kimmy_answer = 1240\n    is_kimmy_correct = (correct_answer == kimmy_answer)\n    \n    return correct_answer if not is_kimmy_correct else \"Kimmy is correct\"\n\nans = solution()"
    ],
    "7b32265def7a4762b0e99a9bf7936e79": [
        "def solution():\n    lcm = 12  # Least common multiple of 3 and 4\n    count = 40 // lcm  # Count how many customers receive both within the range of 40\n    return count\n\nans = solution()"
    ],
    "a1d04f9a8f8d4d059eb87e3597859b60": [
        "def solution():\n    hook_time = 20\n    lily_time = hook_time - 5\n    return lily_time\n\nans = solution()"
    ],
    "f15fa89c42d94b389e9ef9de02718b7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sally, gillian = symbols('sally gillian')\n    \n    # Ratio of current ages\n    equation1 = Eq(sally / gillian, 2 / 7)\n    \n    # Ratio of ages in 15 years\n    equation2 = Eq((sally + 15) / (gillian + 15), 1 / 2)\n    \n    # Solve the system of equations for sally and gillian\n    solutions = solve((equation1, equation2), (sally, gillian))\n    \n    return solutions[sally]\n\nans = solution()"
    ],
    "2c7e97e51b1c44f49d2f4e7c79fde704": [
        "def solution():\n    mistaken_difference = 30\n    mistaken_subtrahend = 70\n    actual_subtrahend = 75\n    # The minuend remains the same for both the correct and the mistaken problems\n    minuend = mistaken_difference + mistaken_subtrahend\n    # Correct result is found by subtracting the actual subtrahend from the minuend\n    correct_result = minuend - actual_subtrahend\n    return correct_result\n\nans = solution()"
    ],
    "3061e5b8281f449bae77026f2740418a": [
        "def solution():\n    weight_per_apple = 1 / 9  # Weight of one apple in kg\n    apples_per_kg = 1 / weight_per_apple  # Number of apples in 1 kg\n    total_apples = 8 * apples_per_kg  # Total number of apples used for 8 kg\n    cakes_baked = total_apples // 4  # Number of cakes that can be baked\n\n    return int(cakes_baked)\n\nans = solution()"
    ],
    "d7682b78c94a49209da98614f89b4b03": [
        "def solution():\n    ans = 35 * 9 / 45\n    return ans\n\nans = solution()"
    ],
    "681b53f5f3ca46d192bdc4d5538dc3f9": [
        "def solution():\n    distance_between_seeds = 1.5\n    total_seeds = 12\n\n    # The total distance between seeds around the circle will be equal to the circumference\n    circumference = distance_between_seeds * total_seeds\n\n    return circumference\n\nans = solution()"
    ],
    "a91b6b3ee1ba49258ef75384834b6006": [
        "def solution():\n    ans = (3 / 8) * 32\n    return ans\n\nans = solution()"
    ],
    "e3c684818e824d38b568f73a39a2e8a3": [
        "def solution():\n    for pieces_cut in range(10):\n        if (10 - pieces_cut) + (pieces_cut * 3) == 16:\n            return pieces_cut\n\nans = solution()"
    ],
    "48863edbbbd648d296639b0ac7b6a0a5": [
        "def solution():\n    ans = 198 + 67 - 25\n    return ans\n\nans = solution()"
    ],
    "51f55ad6ea4b438da0c7c862bf88d5ca": [
        "def solution():\n    total_boys = 12\n    total_girls = 8\n    average_boys = 10\n    average_all = 14\n    \n    # Calculate the total score of all participants\n    total_score_all = (total_boys + total_girls) * average_all\n    \n    # Calculate the total score of the boys\n    total_score_boys = total_boys * average_boys\n    \n    # Calculate the total score of the girls\n    total_score_girls = total_score_all - total_score_boys\n    \n    # Calculate the average score of the girls\n    average_girls = total_score_girls / total_girls\n    \n    return average_girls\n\nans = solution()"
    ],
    "13a8b45061f4450e89e1c253f4020c18": [
        "def solution():\n    # Let's assume the side of the smaller square array is n\n    # Thus, the number of students in the smaller square array is n^2\n    # With the surplus, the total number of students is n^2 + 9\n    \n    # When we add one row and one column, the new square array has a side of n + 1\n    # The number of students in the larger square array is (n + 1)^2\n    # To form the larger square array, 16 more students are needed, so we have (n + 1)^2 = n^2 + 9 + 16\n    \n    # Now let's solve the equation to find n\n    # (n + 1)^2 = n^2 + 25\n    # n^2 + 2n + 1 = n^2 + 25\n    # 2n + 1 = 25\n    # 2n = 24\n    # n = 12, which is the side of the smaller square array\n    \n    # The number of students is n^2 + 9\n    n = 12\n    number_of_students = n**2 + 9\n\n    return number_of_students\n\nans = solution()"
    ],
    "18a91f2a3e4b4cc6a04adbcfd3069472": [
        "def solution():\n    # After the first division, each of the 5 envelopes would have the same number of postcards.\n    # Let's call the number of postcards in each envelope after the first division x.\n    # So, after the first division there are 5*x postcards in total.\n    # Lily received a certain number of postcards and divided them into another 2 envelopes.\n    # Since each envelope has the same number of postcards,\n    # and we know that there were already 5 envelopes with x postcards each,\n    # the number of additional postcards should be a multiple of 5+2=7 envelopes.\n    \n    # The total number of envelopes after receiving additional postcards is 5 (initial) + 2 (additional) = 7\n    total_envelopes_after_addition = 7\n    \n    # Initially, Lily divides 50 postcards into 5 envelopes,\n    # so each envelope has 50 / 5 = 10 postcards.\n    postcards_per_envelope_initially = 50 // 5\n    \n    # Let y be the additional number of postcards Lily received.\n    # Since each envelope has the same number of postcards,\n    # y must be divisible by the total number of envelopes after the addition.\n    # We can set up a multiple of the total number of envelopes (7) that is close to but not less than 10\n    # which is the number of postcards per envelope initially.\n    additional_postcards = total_envelopes_after_addition * postcards_per_envelope_initially\n    \n    # The total number of postcards is the initial 50 plus the additional postcards.\n    total_postcards = 50 + additional_postcards\n    \n    return total_postcards\n\nans = solution()"
    ],
    "c0dd58bb208c4720a65f8a3da63ebc53": [
        "def solution():\n    # Initialize variables for holding coin values in pence\n    coins = [200, 100, 50, 20, 10, 5, 2, 1]  # Coin values in descending order\n    total_change = 250  # Total change in pence\n\n    # Check combinations of coins, starting with the largest coin\n    for i, coin in enumerate(coins):\n        # If the coin is more than half of the total, it can't be used in pairs\n        if coin > total_change // 2:\n            continue\n        \n        # If exactly half the change remains and the current coin is half the remaining change,\n        # then we can return this as it would be in pairs with another coin of the same value.\n        if total_change % coin == 0 and total_change // coin == 2:\n            return coin // 100  # Converting pence to pounds for the answer\n    \n    # If no coin combination is found that matches the criteria, return None\n    return None\n\nans = solution()"
    ],
    "3443aaa6a82a4aa1acae9f85d2a28ffe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x represent the total number of cookies Jolie baked\n    x = symbols('x')\n    # Number of cookies thrown away\n    thrown_away = (3/5) * x\n    # Number of cookies remaining\n    remaining = x - thrown_away\n    # Number of cookies sold\n    sold = (3/4) * remaining\n    # Equation based on the condition given\n    equation = Eq(thrown_away, sold + 42)\n    \n    # Solve the equation for x\n    num_cookies = solve(equation, x)\n    \n    return num_cookies[0]\n\nans = solution()"
    ],
    "d7759b0612fe43e8a7e3a06d59283855": [
        "def solution():\n    cost_per_100g = 0.80\n    weight_needed = 250\n    cost_per_gram = cost_per_100g / 100\n    total_cost = cost_per_gram * weight_needed\n    return total_cost\n\nans = solution()"
    ],
    "8cf2ad99816645c8ba0e8566d2059b61": [
        "def solution():\n    otimes = lambda a, b: (a + b) * a\n    ans = otimes(4, 7)\n    return ans\n\nans = solution()"
    ],
    "03ff37f2d8384e4285c23e9e15eec692": [
        "def solution():\n    total_apples = 27\n    apples_per_container = 4\n    \n    containers_needed = (total_apples + apples_per_container - 1) // apples_per_container\n\n    return containers_needed\n\nans = solution()"
    ],
    "a5661c18fea04c948a12554694325f0d": [
        "def solution():\n    for i in range(1, 10):\n        for n in range(1, 10000):\n            original_number = n * 10 + 9\n            new_number = int(str(9) + str(n))\n            if new_number == 4 * original_number:\n                return original_number\n\nans = solution()"
    ],
    "d6d6b3b23b51458482c4922539d3c5df": [
        "def solution():\n    ans = 50 - 21 - 19\n    return ans\n\nans = solution()"
    ],
    "5477bd06248540239e46216795757a4a": [
        "def solution():\n    score = 14\n    total = 20\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "2324e551139441b59d8da8e39e7bf259": [
        "def solution():\n    for y in range(10):\n        if int(f\"107{y}\") % 6 == 0:\n            return y\n\nans = solution()"
    ],
    "7b61fa01ec374c2b83c5f8a39d04e91c": [
        "def solution():\n    for i in range(10, 100):\n        if i % 4 == 1 and i % 7 == 1:\n            return i\n\nans = solution()"
    ],
    "93e28acfc00d445394efdabe5a2da3c8": [
        "def solution():\n    from math import factorial\n\n    # Laura must stand in the front, so there's only 1 way for her position.\n    # Rita cannot stand at the end, which means she has 5 positions (2nd to 6th).\n    # The remaining 4 students can be arranged in any order for the remaining 5 positions.\n    \n    ways_for_rita = 5\n    ways_for_others = factorial(4)\n    \n    total_ways = ways_for_rita * ways_for_others\n    \n    return total_ways\n\nans = solution()"
    ],
    "90c447fcc0de4e5a9b771920095757aa": [
        "def solution():\n    sugar_weight = 70\n    water_weight = 490\n    total_weight = sugar_weight + water_weight\n    concentration = (sugar_weight / total_weight) * 100\n    \n    return concentration\n\nans = solution()"
    ],
    "b5485eaf0ddf46c89dd4082df078ffbf": [
        "def solution():\n    n = (36 / 3) / 4\n    return n\n\nans = solution()"
    ],
    "2bf4015e0be3437da65611461a6f01c5": [
        "def solution():\n    a = 4\n    b = 7\n    return (a + b) * a\n\nans = solution()"
    ],
    "c8ffb29e933649f1a14001292da6814e": [
        "def solution():\n    return 53 * 9\n\nans = solution()"
    ],
    "90d9980aee5c463cad10072163e15658": [
        "def solution():\n    # Let d be the distance between towns A and B\n    # Jerry travels three-sevenths of the distance d when they meet\n    # Kevin travels four-sevenths of the distance d when they meet\n    # The ratio of their speeds is the inverse of the ratio of their travelled distances\n    # So, Kevin's speed : Jerry's speed = 3 : 4\n    \n    # Kevin's speed is given as 80 mph.\n    kevin_speed = 80\n    # Let's find Jerry's speed using the ratio\n    # jerry_speed / kevin_speed = 3 / 4\n    jerry_speed = 3 / 4 * kevin_speed\n    \n    # Jerry travels 2/5 of the length of the road in each hour.\n    # So we can equate this to Jerry's speed to find the length of the road.\n    # road_length = jerry_speed / (2/5)\n    road_length = jerry_speed / (2/5)\n    \n    return road_length\n\nans = solution()"
    ],
    "0f16879a0bec4f9fb882203fb6a75cef": [
        "def solution():\n    regular_total_price = 120\n    discount_50 = regular_total_price * 0.50\n    price_after_50_discount = regular_total_price - discount_50\n    additional_20_discount = price_after_50_discount * 0.20\n    final_price = price_after_50_discount - additional_20_discount\n    return final_price\n\nans = solution()"
    ],
    "799dbcfeda0a40a3a052a9aed029df33": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "3d94d3aa90b542049e493d4ab7538dea": [
        "def solution():\n    sold_apples = 88\n    fraction_sold = 4 / 7\n\n    total_apples = sold_apples / fraction_sold\n\n    return int(total_apples)\n\nans = solution()"
    ],
    "bac4be7824ee43909d38294e95af5558": [
        "def solution():\n    ans = 42 / 10\n    return ans\n\nans = solution()"
    ],
    "e15d4768dc4c4072857f5a57de71a7fd": [
        "def solution():\n    probability_win = 0.3\n    probability_draw = 0.1\n    probability_lose = 1 - (probability_win + probability_draw)\n\n    # Probability of winning the first game and not the second\n    probability_win_first = probability_win * (probability_lose + probability_draw)\n\n    # Probability of not winning the first game and winning the second\n    probability_win_second = (probability_lose + probability_draw) * probability_win\n\n    # Exact one win = win first and not second OR not win first and win second\n    ans = probability_win_first + probability_win_second\n\n    return ans\n\nans = solution()"
    ],
    "695197b7d2474faba84b6999f62c3332": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Define the departure and arrival times as datetime objects\n    departure_time_singapore = datetime.strptime('24/08 05:00', '%d/%m %H:%M')\n    arrival_time_london = datetime.strptime('24/08 11:00', '%d/%m %H:%M')\n\n    # Convert arrival_time_london to Singapore time by adding the time difference\n    arrival_time_singapore = arrival_time_london + timedelta(hours=7)\n\n    # Calculate the flight duration by subtracting the departure time from the arrival time\n    flight_duration = arrival_time_singapore - departure_time_singapore\n\n    return flight_duration.total_seconds() // 3600 # Return flight duration in hours\n\nans = solution()"
    ],
    "6a26a1f4961b42cda05e71749b6db36e": [
        "def solution():\n    distance_apart = 1.5\n    total_seeds = 12\n\n    circumference = distance_apart * total_seeds\n\n    return circumference\n\nans = solution()"
    ],
    "1704b8a5c6f542c3a689bc27fdeec9dd": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "ca71d8deb6874a48b997dfa4946cf66c": [
        "def solution():\n    total_pupils = 40\n    average_pencils = 35\n\n    # Let x be the number of boys\n    x = symbols('x')\n\n    # Total pencils owned by boys is 20 times number of boys\n    total_boys_pencils = 20 * x\n\n    # Total pencils owned by girls is 60 times number of girls\n    total_girls_pencils = 60 * (total_pupils - x)\n\n    # Total pencils is the average number of pencils times number of pupils\n    total_pencils = average_pencils * total_pupils\n\n    # Setting the equation based on total pencils\n    equation = Eq(total_boys_pencils + total_girls_pencils, total_pencils)\n\n    # Solving the equation to find the number of boys\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "23f30d5016a749f989d2709b4e2a66a8": [
        "def solution():\n    count = 0\n    for i in range(10, 100):  # 2-digit numbers start from 10\n        if (i // 10 + i % 10) % 5 == 0:  # Sum of digits divisible by 5\n            count += 1\n    return count\n\nans = solution()"
    ],
    "86efdba907a74bacbc9b69da4825ce61": [
        "def solution():\n    a = 4\n    b = 7\n    return a * 3 + b * 4\n\nans = solution()"
    ],
    "a6f1656bdca94cb5bb2e8feecf11199a": [
        "def solution():\n    # To find the largest value of D + R, where the remainders are the same when each of the numbers is divided by D,\n    # we need to find the greatest common divisor (GCD) of the differences of the pairs of numbers,\n    # since the differences will be multiples of D.\n\n    from math import gcd\n\n    # Calculate the differences between the pairs of numbers\n    diff1 = 2377 - 2010\n    diff2 = 3111 - 2377\n    diff3 = 3111 - 2010\n\n    # Find the GCD of the differences\n    gcd_diff = gcd(gcd(diff1, diff2), diff3)\n\n    # The value of D is the GCD of the differences\n    D = gcd_diff\n    \n    # To find R, we can simply take the remainder of one division since they share the same remainder\n    R = 2010 % D\n    \n    # The largest possible value of D + R\n    return D + R\n\nans = solution()"
    ],
    "f23477aaae354680a318e24f3cc005a7": [
        "def solution():\n    # Find the recurring cycle of 1/13\n    decimal_fraction = ''\n    remainder = 1\n    remainders = {}\n    position = 0\n    while remainder:\n        remainder *= 10\n        digit, remainder = divmod(remainder, 13)\n        if remainder in remainders:\n            break\n        remainders[remainder] = position\n        decimal_fraction += str(digit)\n        position += 1\n    \n    # Find the length of the recurring cycle\n    cycle_length = position - remainders[remainder]\n\n    # Calculate which digit in the cycle is the 2012th decimal\n    cycle_position = (2012 - 1) % cycle_length\n\n    ans = int(decimal_fraction[cycle_position])\n\n    return ans\n\nans = solution()"
    ],
    "770c05d97a024fdbaf944f8e7f240d9f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 * (2 * x - 2), 30 - 3 * x)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "5500f21bc74e4e09974c72edd6ba504d": [
        "def solution():\n    blue = 72\n    # Ratio of red to blue is 5:6\n    red = (5 / 6) * blue\n    # Red marbles is twice the number of green marbles\n    green = red / 2\n    # Total marbles altogether\n    total_marbles = blue + red + green\n    \n    return total_marbles\n\nans = solution()"
    ],
    "8a86b5d67c0c44e89925084668201394": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls, adults = symbols('boys girls adults')\n\n    equation1 = Eq(adults, 2 * boys)\n    equation2 = Eq(girls, 3 * boys)\n    equation3 = Eq(boys + girls + adults, 480)\n\n    solutions = solve((equation1, equation2, equation3), (boys, girls, adults))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "2ad497194d6f450abccaef3b55d6f58f": [
        "def solution():\n    # Let x be the number of cards Eddi has originally and y be the number Wiya has originally.\n    # According to the problem:\n    # Eddi's cards : Wiya's cards = 8 : 7 -> (1)  \n    # After Eddi gives Wiya 4 cards:\n    # (Eddi's cards - 4) : (Wiya's cards + 4) = 18 : 17 -> (2)\n    \n    # From (1) we can write the number of cards as:  x = 8k and y = 7k where k is a common multiplier\n    \n    # Now we will use (2) to write the equation:\n    # (8k - 4) / (7k + 4) = 18 / 17\n    \n    # Solving for k by cross multiplication\n    # (17 * (8k - 4)) = (18 * (7k + 4))\n    # 136k - 68 = 126k + 72\n    # 136k - 126k = 72 + 68\n    # 10k = 140\n    # k = 14\n    \n    # Now we find x using k\n    # x = 8k\n    k = 14\n    x = 8 * k\n    \n    return x\n\nans = solution()"
    ],
    "79d7374a63ab4894b0eb632021d19346": [
        "def solution():\n    # Let the number of students originally in Class B be x\n    # Then, the number of students originally in Class A is x + 47\n    # After moving y students, Class A will have (x + 47 - y) students\n    # and Class B will have (x + y) students\n    # According to the problem, Class A should have 9 more students than Class B\n    # So the equation is (x + 47 - y) = (x + y) + 9\n    # Simplifying the equation, we get 47 - 9 = 2y\n    # Solving for y, we find the number of students to move from Class A to Class B\n    y = (47 - 9) // 2\n\n    return y\n\nans = solution()"
    ],
    "2c92243cffd64756b422d36fd5a66424": [
        "def solution():\n    total_length = 13.2\n    piece1 = 5.3\n    piece2 = 3.8\n\n    piece3 = total_length - piece1 - piece2\n\n    return piece3\n\nans = solution()"
    ],
    "61eccb915ca741c7b21a213b89915b76": [
        "def solution():\n    max_product = 0\n    for A in range(1, 32):\n        for B in range(1, 32 - A):\n            C = 31 - A - B\n            product = A * B * C\n            if product > max_product:\n                max_product = product\n    return max_product\n\nans = solution()"
    ],
    "cf1c9e5f45354fe48f3b0685d1e60dbe": [
        "def solution():\n    return 5.221 + 5.8\n\nans = solution()"
    ],
    "c4e305df8e864689a3ba869bd34de689": [
        "def solution():\n    footballs_per_basket = 5\n    total_baskets = 7\n\n    total_footballs = footballs_per_basket * total_baskets\n\n    return total_footballs\n\nans = solution()"
    ],
    "ab941a0743bd48f0a1e26a2e34ebdae5": [
        "def solution():\n    cost = 25000\n    selling_price = cost * 120 / 100\n    return selling_price\n\nans = solution()"
    ],
    "1bf11d4ba9fe405c8767bb70997fd945": [
        "def solution():\n    rabbit_speed = 330  # m/min\n    turtle_speed = 30   # m/min\n    total_distance = 6990  # m\n    sleep_time = 215  # min\n    lead_time = 10  # min (time before rabbit sleeps)\n\n    # Distance covered by the rabbit before sleeping\n    rabbit_distance_before_sleep = rabbit_speed * lead_time\n\n    # Time at which rabbit starts to sleep (10 min after start)\n    rabbit_sleep_start_time = lead_time\n    \n    # Total time turtle takes to finish the race\n    turtle_total_time = total_distance / turtle_speed\n\n    # Check if the turtle finishes the race before rabbit wakes up\n    rabbit_wake_time = rabbit_sleep_start_time + sleep_time\n    if turtle_total_time <= rabbit_wake_time:\n        # Turtle finishes first, calculate distance between them\n        rabbit_distance_at_turtle_finish = rabbit_distance_before_sleep\n        distance_between = total_distance - rabbit_distance_at_turtle_finish\n        winner = \"turtle\"\n    else:\n        # Rabbit finishes the race, calculate time and distance\n        # remaining time after rabbit wakes up\n        rabbit_remaining_time = (total_distance - rabbit_distance_before_sleep) / rabbit_speed\n        # calculate total time rabbit ran\n        rabbit_total_time = rabbit_sleep_start_time + sleep_time + rabbit_remaining_time\n\n        if rabbit_total_time < turtle_total_time:\n            # Rabbit finishes first\n            winner = \"rabbit\"\n            # Calculate the distance turtle covered when rabbit finishes\n            turtle_distance_at_rabbit_finish = turtle_speed * rabbit_total_time\n            distance_between = total_distance - turtle_distance_at_rabbit_finish\n        else:\n            # Turtle finishes first\n            winner = \"turtle\"\n            # Calculate the distance rabbit covered when turtle finishes\n            rabbit_distance_at_turtle_finish = rabbit_distance_before_sleep + rabbit_speed * (turtle_total_time - rabbit_wake_time)\n            distance_between = total_distance - rabbit_distance_at_turtle_finish\n\n    return winner, round(distance_between)\n\nans = solution()"
    ],
    "93fe50f0358b4d2ea6a521e9ea3ed0a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n\n    equation1 = Eq(x - y, 57)\n    equation2 = Eq(x + y, 77)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return min(solutions[x], solutions[y])\n\nans = solution()"
    ],
    "f50c5960070d4a3fb0b23a7198ed14e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls, adults = symbols('boys girls adults')\n\n    equation1 = Eq(adults, 2 * boys)\n    equation2 = Eq(girls, 3 * boys)\n    equation3 = Eq(boys + girls + adults, 480)\n\n    solutions = solve((equation1, equation2, equation3), (boys, girls, adults))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "bfa83b401aa849afa830d6bedd007504": [
        "def solution():\n    oddtastic_count = 0\n    for i in range(1, 1000):\n        if all(int(digit) % 2 != 0 for digit in str(i)):\n            oddtastic_count += 1\n    return oddtastic_count\n\nans = solution()"
    ],
    "3e8c59f7bce94540b723e7c4f74ae108": [
        "def solution():\n    count = 0\n    for i in range(1, 10, 2):  # Hundreds digit must be odd and non-zero\n        for j in range(10):    # Tens digit can be any digit from 0 to 9\n            for k in range(10):  # Units digit can be any digit from 0 to 9\n                if i + j + k == 5:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "e06dbcf7684f4efe9b8aa8167604d9eb": [
        "def solution():\n    # Initialize a dictionary to store the frequency of each possible total score\n    score_frequencies = {score: 0 for score in range(2, 13)}\n\n    # Calculate the frequency of each score by rolling two dice\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            score_frequencies[die1 + die2] += 1\n\n    # Find the score with the highest frequency\n    most_likely_score = max(score_frequencies, key=score_frequencies.get)\n\n    return most_likely_score\n\nans = solution()"
    ],
    "a750e73a350c42c59e6e88752789f517": [
        "def solution():\n    total_pairs = 16\n    total_cost_pounds = 24\n    total_cost_pence = total_cost_pounds * 100  # Convert pounds to pence\n    total_avocados = total_pairs * 2  # Each pair contains 2 avocados\n    \n    cost_per_avocado = total_cost_pence / total_avocados\n    return cost_per_avocado\n\nans = solution()"
    ],
    "bb069229eb994a6685105c9e4771780d": [
        "def solution():\n    people_per_square_table = 12\n    tables = 8\n    # Each square table has 4 sides and each side has 3 people\n    people_per_side = people_per_square_table // 4\n    # When tables are put together in a row, two sides will be on the inside\n    # and won't have seats. So we subtract 2 sides' worth of seats.\n    inner_sides = 2 * (tables - 1)\n    max_people = people_per_square_table * tables - people_per_side * inner_sides\n    return max_people\n\nans = solution()"
    ],
    "3489712bf419469fb79ab41aed184413": [
        "def solution():\n    total_students = 36\n    total_average = 89\n    girls_average = 88\n    boys_average = 91\n\n    # Let the number of girls be x; hence the number of boys will be 36 - x.\n    # We can set up the equation for the total score: \n    # girls_average * x + boys_average * (total_students - x) = total_average * total_students\n    # 88 * x + 91 * (36 - x) = 89 * 36\n    \n    # Solving the linear equation for x\n    x = (boys_average * total_students - total_average * total_students) / (boys_average - girls_average)\n\n    return int(x)\n\nans = solution()"
    ],
    "393a5918d6354e808621ec682f62ddae": [
        "def solution():\n    # Assume the number of rhinos is x, and the number of deer is also x\n    # Assume the number of ostriches is y\n    # Each rhino and each deer have 4 legs, each ostrich has 2 legs\n    \n    # x + x + y = 28 (number of heads)\n    # 4x + 4x + 2y = 88 (number of legs)\n    \n    # Simplify the equations:\n    # 2x + y = 28\n    # 8x + 2y = 88, divide by 2 -> 4x + y = 44\n    \n    # Now, we solve the system of linear equations:\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    equation1 = Eq(2*x + y, 28)\n    equation2 = Eq(4*x + y, 44)\n    \n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "938d7287364b480e824843004f4aebab": [
        "def solution():\n    return 9786 // 7, 9786 % 7\n\nans = solution()"
    ],
    "40b2f9c840514df0bcbdb734e998e84c": [
        "def solution():\n    digits = 339\n    pages = 0\n    current_digit_count = 0\n\n    while current_digit_count < digits:\n        pages += 1\n        current_digit_count += len(str(pages))\n    \n    return pages\n\nans = solution()"
    ],
    "b6cf5eeb7a434c4697c9588add4acbec": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let a = Andrew's marbles, b = Boris's marbles, j = Jeffery's marbles, x = Xavier's marbles\n    a, b, j, x = symbols('a b j x')\n\n    # Andrew has 30 marbles less than the average of Boris, Jeffery and Xavier\n    equation1 = Eq(a, (b + j + x)/3 - 30)\n    # Xavier has thrice as many marbles as Andrew\n    equation2 = Eq(x, 3 * a)\n\n    # Substitute equation2 into equation1\n    substitute = equation1.subs(x, 3*a)\n    # Solve the substitute equation for a\n    solve_for_a = solve(substitute, a)[0]\n\n    # Knowing a, we use equation2 to find x\n    x_marbles = solve(equation2.subs(a, solve_for_a), x)[0]\n    # Using known x value, we can use equation1 to get the combined marbles for b and j\n    b_plus_j = solve(equation1.subs({a: solve_for_a, x: x_marbles}), b + j)[0]\n\n    return b_plus_j\n\nans = solution()"
    ],
    "590b2a37fdc343dfa343951f96523662": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"11:15\", \"%H:%M\")\n    travel_duration = timedelta(hours=3, minutes=50)\n    departure_time = arrival_time - travel_duration\n    return departure_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "f98fcfbad2e34f8b8786c6f68bb63d64": [
        "def solution():\n    from sympy import divisors, primerange\n\n    def get_number_of_divisors(n):\n        divisors_count = 1\n        for prime in primerange(1, n + 1):\n            count = 0\n            while n % prime == 0:\n                count += 1\n                n //= prime\n            divisors_count *= (count + 1)\n        return divisors_count\n\n    count_numbers = 0\n    for i in range(15, 100000):  # upper bound to break an infinite loop\n        if i % 15 == 0 and get_number_of_divisors(i) == 15:\n            count_numbers += 1\n\n    return count_numbers\n\nans = solution()"
    ],
    "31ea77f39d7d403bbbe15a0f51d288e2": [
        "def solution():\n    # Initialize the person count difference and the size of the square\n    diff = 52\n    size = 1  # Starting with the smallest possible square size\n    \n    while True:\n        # Calculate the number of students and teachers based on the size\n        # The area of the two squares are (size)^2 for students and (size-2)^2 for teachers\n        students = size * size\n        teachers = (size - 2) * (size - 2) if size > 1 else 0\n        current_diff = students - teachers\n        \n        # Check if the current difference matches the required difference\n        if current_diff == diff:\n            return students + teachers  # Total number of people\n        size += 1  # Increase the square size to check the next possibility\n\nans = solution()"
    ],
    "def24a48cf8144e2845215066bcd4239": [
        "def solution():\n    max_difference = 0\n    for A in range(10, 100):\n        for B in range(1000, 10000):\n            if (A + B) % 7 == 0 and (A**2 + B**2) % 7 == 0:\n                difference = B - A\n                if difference > max_difference:\n                    max_difference = difference\n    return max_difference\n\nans = solution()"
    ],
    "b9cafccb9f7942af839da92a0784cef0": [
        "def solution():\n    # The ones digit of a number raised to an exponent is cyclical\n    # Understanding the cycle of ones digits for powers of 32 and 22 is the key here\n\n    # For base 32, the cycle is [32, 24, 28, 16, 12, 4, 8, 6], which has a length of 8\n    # Since 33 % 8 = 1, the ones digit of 32^33 is the first element in the cycle, which is 2\n\n    # For base 22, the cycle is [22, 4, 8, 16], which has a length of 4\n    # Since 29 % 4 = 1, the ones digit of 22^29 is the first element in the cycle, which is 2\n\n    # Now subtract the ones digits to find the ones digit of the entire expression\n    ones_digit = (2 - 2) % 10\n\n    return ones_digit\n\nans = solution()"
    ],
    "ce29edf6f9f549f8b1c3ce33cbd9bf94": [
        "from math import comb\n\ndef solution():\n    total_players = 12\n    players_needed = 6\n    return comb(total_players, players_needed)\n\nans = solution()"
    ],
    "45a3a595ab6f4318985335abde87fad4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sold = symbols('sold')  # amount of oil sold from each bucket\n    \n    big_bucket_initial = 89\n    small_bucket_initial = 45\n    big_bucket_final = big_bucket_initial - sold\n    small_bucket_final = small_bucket_initial - sold\n    \n    # After selling, the big one is left with 12 times as much as the small one\n    equation = Eq(big_bucket_final, 12 * small_bucket_final)\n    \n    # Solve the equation for the amount sold\n    sold_amount = solve(equation, sold)\n    \n    return sold_amount[0]\n\nans = solution()"
    ],
    "4c1d54551ef14b4a8f6fff1699ee1017": [
        "def solution():\n    return 10 ** 2\n\nans = solution()"
    ],
    "3c819166640d4aecbdf6943fefaf19ae": [
        "def solution():\n    numbers = [200, 198, 196, 194, 24]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "20b44a4c32af41ef9142b775909cfdb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sold = symbols('sold')\n    big_bucket_initial = 89\n    small_bucket_initial = 45\n    big_bucket_final = big_bucket_initial - sold\n    small_bucket_final = small_bucket_initial - sold\n\n    equation = Eq(big_bucket_final, 12 * small_bucket_final)\n\n    sold_amount = solve(equation, sold)\n\n    return sold_amount[0]\n\nans = solution()"
    ],
    "303eb712b613463aa24269578fcdc93c": [
        "def solution():\n    # There are 12 numbers on the clock\n    total_numbers = 12\n    # Eddie stops counting at number 10 after counting to 30\n    end_number = 10\n    count_to = 30\n    \n    # Rather than looping through every start position, we can use the mod operator.\n    # Since the clock is periodic with 12 numbers, counting to 30 is equivalent to counting\n    # to 30 mod 12, which is 6. So we subtract 6 from the end position and wrap around the clock\n    # if necessary to find the start position\n\n    start_position = (end_number - count_to % total_numbers) % total_numbers\n    \n    # If the start position is 0, this corresponds to the 12 o'clock position\n    if start_position == 0:\n        start_position = total_numbers\n    \n    return start_position\n\nans = solution()"
    ],
    "98d19dcddff5420181c5cbae730d43e1": [
        "def solution():\n    avril_apples = 15\n    eddie_apples = avril_apples - 3\n    return eddie_apples\n\nans = solution()"
    ],
    "e0433d6820a94cd280f26a0265506784": [
        "def solution():\n    jackpot = 131112\n    people = 9\n    share_per_person = jackpot // people\n    return share_per_person\n\nans = solution()"
    ],
    "629056fd8d3d4d1ea0babc83d1b81d2e": [
        "def solution():\n    # We start with the target fraction\n    target = 2014/37\n    \n    # We know the mixed number is 54 plus some fraction\n    int_part = int(target)\n    \n    # We subtract the integer part from the target to get the fractional part\n    fractional_part = target - int_part\n    \n    # Now we take the reciprocal of the fractional part to find 'x'\n    x = 1 / fractional_part\n    \n    # We take the integer part of 'x'\n    x_int = int(x)\n    \n    # We find the remaining fractional part for 'x'\n    frac_part_x = x - x_int\n    \n    # Now we take the reciprocal of the fractional part of 'x' to find 'y'\n    y = 1 / frac_part_x\n    \n    # We take the integer part of 'y'\n    y_int = int(y)\n    \n    # We find the remaining fractional part for 'y'\n    frac_part_y = y - y_int\n    \n    # Finally, we take the reciprocal of the fractional part of 'y' to find 'z'\n    z = 1 / frac_part_y\n    \n    # We take the integer part of 'z' as the value of z\n    z_int = int(z)\n    \n    # We return the sum of x_int, y_int, and z_int\n    return x_int + y_int + z_int\n\nans = solution()"
    ],
    "82d6cd07eb9b4742a9b4276838f20555": [
        "def solution():\n    snake_hibernation = 180\n    bear_hibernation = (2 / 3) * snake_hibernation\n    frog_hibernation = (5 / 4) * bear_hibernation\n    return frog_hibernation\n\nans = solution()"
    ],
    "7b8f27df031046e09fbf9d6b69396f37": [
        "def solution():\n    # Aliens have five legs, so each needs 5 shoes and 5 socks\n    # Since shoes are sold in 5s and socks in pairs (2), \n    # there's no need to buy extra shoes or socks for each alien.\n\n    # Calculate cost of shoes for one alien\n    shoe_price_for_one = 78  # price for 5 shoes\n\n    # Calculate cost of socks for one alien\n    # One pair of socks is for two legs, so we need 5/2 pairs per alien.\n    # Since we can't buy half a pair, we need to buy 3 pairs for 5 legs.\n    socks_price_for_one = (12 * 3)\n\n    # Now, combine the costs for the 6 aliens (himself and 5 brothers)\n    total_shoes_price = shoe_price_for_one * 6\n    total_socks_price = socks_price_for_one * 6\n\n    # Add both total costs to get the final amount\n    total_cost = total_shoes_price + total_socks_price\n\n    return total_cost\n\nans = solution()"
    ],
    "23acb98496a1431485725ca44356cb95": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    smallest_num, _ = solve_congruence(*congruences)\n\n    if smallest_num < 100:  # Check if it's a three-digit number\n        smallest_num += 5 * 6 * 7  # Increment by the product of moduli to find the next valid solution\n\n    return smallest_num\n\nans = solution()"
    ],
    "6aabcae871ce46f8ad05bfca32697274": [
        "def solution():\n    from sympy import primerange\n\n    # Using the provided equations to express a, b, and c\n    # 31 + a = 26 + b = 20 + c\n    # a = -5 + b = -11 + c\n    \n    # Since a, b, and c are prime, we need to find three prime numbers\n    # such that b = a+5 and c = a+11\n    \n    # Starting search for primes at 2 since 1 is not considered a prime number\n    primes = list(primerange(2, 100))  # List primes up to 100 for demonstration\n\n    a, b, c = 0, 0, 0\n\n    # Find a suitable prime for 'a' such that 'b' and 'c' are also prime\n    for prime in primes:\n        if (prime + 5) in primes and (prime + 11) in primes:\n            a, b, c = prime, prime + 5, prime + 11\n            break\n\n    return a * b * c\n\nans = solution()"
    ],
    "21ec0c0ec1814ca58f0852a04fb021ce": [
        "def solution():\n    total_time_hours = 54 / 60  # Convert 54 minutes to hours\n\n    # Let x be the distance between her home and the park in km.\n    # Time = Distance/Speed\n    # Total time spent jogging to the park and back is the sum of both times:\n    # x/5 (time to the park) + x/4 (time back home) = total_time_hours\n    \n    # Solving the equation for x:\n    x = (total_time_hours) / (1/5 + 1/4)\n\n    return x\n\nans = solution()"
    ],
    "992b03b260e0423f8ae1b4a971e95d16": [
        "def solution():\n    return sum(range(1, 31))\n\nans = solution()"
    ],
    "d43c72e5a6ae4f8db05bca5a0b40f880": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rennie_pies = symbols('rennie_pies')\n    joleen_pies = rennie_pies + 5\n\n    equation = Eq((3/4) * rennie_pies, (2/3) * joleen_pies)\n    solved_pies = solve(equation, rennie_pies)\n\n    total_pies = solved_pies[0] + joleen_pies.subs(rennie_pies, solved_pies[0])\n\n    return total_pies\n\nans = solution()"
    ],
    "04f441aa03884165973a65e941e979f6": [
        "def solution():\n    total_pupils = 26\n    difference_in_number = 8\n\n    # Assume the number of boys is x. Then the number of girls is x + 8.\n    # The total number of pupils is the sum of girls and boys: x + (x + 8) = 26\n    # Solving for x: 2x + 8 = 26 => 2x = 18 => x = 9 (number of boys)\n    # Hence, the number of girls is x + 8 = 9 + 8 = 17\n    num_boys = (total_pupils - difference_in_number) // 2\n    num_girls = num_boys + difference_in_number\n\n    return num_girls\n\nans = solution()"
    ],
    "7bb16c6234cc4815b0e5460af5d3bcde": [
        "def solution():\n    total_oranges_kg = 3.5\n    used_oranges_pie_kg = 550 / 1000\n    used_oranges_juice_kg = 1050 / 1000\n    remaining_oranges_kg = total_oranges_kg - (used_oranges_pie_kg + used_oranges_juice_kg)\n    return remaining_oranges_kg\n\nans = solution()"
    ],
    "cfc90e2bd8784f839af8df92030da2cc": [
        "def solution():\n    price_per_computer = 380\n    number_of_students = 600\n\n    total_cost = price_per_computer * number_of_students\n    return total_cost\n\nans = solution()"
    ],
    "5fdb9bf232c24130acb67d6989c9f36f": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n\n    x = Symbol('x')  # x represents the number of students who like both apples and bananas\n    # Based on the given info, we have the following equations:\n    both = x\n    apples = 3 * x\n    bananas = 5 * x\n    total_students = 35\n\n    # Inclusion-exclusion principle gives the total as:\n    # Total = N(A) + N(B) - N(A ∩ B)\n    # where N(A) is number of students who like apples,\n    # N(B) is number who like bananas,\n    # and N(A ∩ B) is number who like both.\n\n    equation = apples + bananas - both - total_students\n\n    # Solve for x\n    solution = solve(equation)\n\n    return solution[0]\n\nans = solution()"
    ],
    "45df453d65d8460098e8bd6f64aa6e8d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y', integer=True)\n    A = 10 * x + y\n    B = 20 * x + 2 * y\n    equation = Eq(6 * A + 25, B)\n\n    solutions = solve(equation, (x, y))\n\n    for solution in solutions:\n        if 0 < solution[x] <= 9 and 0 <= solution[y] <= 9:  # since x and y are digits\n            A_value = 10 * solution[x] + solution[y]\n            return A_value\n\n    return None  # in case there is no solution\n\nans = solution()"
    ],
    "6c0af911bf3441ceb0aa84e3591c07ce": [
        "def solution():\n    first_day_chairs = 15\n    common_difference = 3\n    total_days = 5\n\n    total_chairs = (total_days / 2) * (2 * first_day_chairs + (total_days - 1) * common_difference)\n\n    return int(total_chairs)\n\nans = solution()"
    ],
    "5279176e8bb34e36a3a0b92d193ca529": [
        "def solution():\n    count = 0\n    for i in range(1, 416):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "5836c32ab92349858d64ea01519ff950": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the time Nancy takes to finish the job by herself\n    x = symbols('x')\n\n    # Lee's rate\n    lee_rate = 1 / (x - 4)\n    # Nancy's rate\n    nancy_rate = 1 / x\n\n    # Working together for 10 hours\n    together_rate = lee_rate + nancy_rate\n    equation1 = Eq(together_rate * 10, 1)\n\n    # Nancy working for 20 hours and Lee for 6 hours\n    equation2 = Eq(nancy_rate * 20 + lee_rate * 6, 1)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x))\n\n    # Return the time it takes for Nancy to finish the job by herself\n    return solutions[x]\n\nans = solution()"
    ],
    "82fb8614fc1f452fa0c62237c0880ab5": [
        "def solution():\n    pence = 15\n    pounds_to_pence = 3.00 * 100  # Convert pounds to pence\n\n    percentage = (pence / pounds_to_pence) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "c6a998a4a44742708de70bf568712c7e": [
        "def solution():\n    num1 = 11111111\n    num2 = 99999999\n    ans = num1 * num2\n    return ans\n\nans = solution()"
    ],
    "72920f692e1f4bc5a9ad132468b2ba55": [
        "from math import comb\n\ndef solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n\n    # Choose one pencil and one ruler\n    pencil_ruler_ways = pencils * rulers\n\n    # Choose one pencil and one pen\n    pencil_pen_ways = pencils * pens\n\n    # Choose one ruler and one pen\n    ruler_pen_ways = rulers * pens\n\n    # Sum all the possible combinations\n    total_ways = pencil_ruler_ways + pencil_pen_ways + ruler_pen_ways\n\n    return total_ways\n\nans = solution()"
    ],
    "967ece94a30248298d61d641cb4adf93": [
        "def solution():\n    return 12 / 25 * 100\n\nans = solution()"
    ],
    "3794af6cfad9436889422b80da641626": [
        "def solution():\n    # He can take out 2 blue, 2 yellow, and 1 red before being certain to have 3 of the same color.\n    # This is due to the Pigeonhole Principle; after taking out 2 of each of the most plentiful colors,\n    # the next marble must give 3 of a kind.\n    ans = 2 + 2 + 1 + 1  # +1 is the next marble that will definitely make 3 of a kind.\n    return ans\n\nans = solution()"
    ],
    "c24b40236ebf4569ab4996b428c1ea27": [
        "def solution():\n    book_price = 8.15\n    tshirt_price = 24.55\n    pen_price = 0.85\n\n    total_spent = book_price + tshirt_price + pen_price\n\n    return total_spent\n\nans = solution()"
    ],
    "88717234762b4482bb4b328d802d0085": [
        "def solution():\n    numbers = [98, -87, 76, -65, 54, -43, 32, -21, 10]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "b712f3023cd74d2a97af516420fec795": [
        "def solution():\n    ans = 312 // 6\n    return ans\n\nans = solution()"
    ],
    "626a9662882f4dc4a1ba95cb02ab64da": [
        "def solution():\n    first_term = 2\n    common_difference = 3\n    n = 20  # the term number we want to find\n\n    # Using the formula for the nth term of an arithmetic sequence:\n    # nth_term = first_term + (n - 1) * common_difference\n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "67ecb5e143af40a489aca335acd8434a": [
        "def solution():\n    total_cost = 7 * 14  # Cost in pence\n    amount_paid = 100  # Amount in pence (100p in £1)\n    change = amount_paid - total_cost  # Change in pence\n\n    return change\n\nans = solution()"
    ],
    "5c2114692687459380bfd372aebfde19": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # We are looking for a number 'n' such that:\n    # n % 4 = 3 (since 3 children had to sit out when divided into groups of 4)\n    # n % 13 = 12 (since 1 child had to sit out when divided into groups of 13)\n    # And we are given that 100 <= n <= 190\n    congruences = [(3, 4), (12, 13)]\n    n = solve_congruence(*congruences)\n\n    # n is a tuple where the first element is the solution and the second is the modulus\n    # Check if the value is within the given range\n    if 100 <= n[0] <= 190:\n        return n[0]\n    else:\n        return None\n\nans = solution()"
    ],
    "8033f9bd063140b6985e12301e7828e5": [
        "def solution():\n    # Let's represent Mary's current age as m and her son's current age as s.\n    m, s = symbols('m s')\n\n    # Equation representing the sum of their current ages\n    equation = Eq(m + s, 45)\n\n    # Solving the system to get Mary's and her son's ages\n    solutions = solve((equation))\n\n    # However, we do not need the individual ages but the sum in 5 years. \n    # The sum in 5 years will be the current sum plus 5 years for each.\n    sum_in_5_years = 45 + 5 + 5  # Adding 5 for Mary and 5 for her son\n\n    return sum_in_5_years\n\nans = solution()"
    ],
    "34bf57dff6004159b9678570286b3a45": [
        "def solution():\n    tax_rate = 0.06  # 6%\n    tax_paid = 90\n\n    price_of_sofa = tax_paid / tax_rate\n\n    return price_of_sofa\n\nans = solution()"
    ],
    "2f2d4651795c439599a60c5b9bd40011": [
        "def solution():\n    height_in_metres = 8850\n    metres_to_kilometres = 1000\n\n    height_in_kilometres = height_in_metres / metres_to_kilometres\n\n    return height_in_kilometres\n\nans = solution()"
    ],
    "2d4bb268d17840b4a2af67c13b75b9e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Sebastian and Garrett's current ages\n    sebastian, garrett = symbols('sebastian garrett')\n\n    # Equation representing the age difference\n    equation1 = Eq(sebastian, garrett - 24)\n\n    # Equation representing the situation in 10 years\n    equation2 = Eq(garrett + 10, 3 * (sebastian + 10))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sebastian, garrett))\n\n    return solutions[garrett]\n\nans = solution()"
    ],
    "21c0c469254846459707b10aa5368b1e": [
        "def solution():\n    march_earnings = 1354\n    april_earnings = 1672\n\n    total_earnings = march_earnings + april_earnings\n\n    return total_earnings\n\nans = solution()"
    ],
    "d103fb7881a84891a1e2f0db57a5cdff": [
        "from math import factorial\n\ndef solution():\n    # Treat each group of books as a single unit first and then find the permutations \n    # for these units together with the biology book.\n    units = 4  # (M, C, P, B)\n    permutations_of_units = factorial(units)\n\n    # Find permutations within each subject's books.\n    permutations_of_math = factorial(4)\n    permutations_of_chemistry = factorial(3)\n    permutations_of_physics = factorial(2)\n    # Biology book has only one permutation.\n\n    # The final answer is the product of the permutations of the units and the permutations within each unit.\n    ans = permutations_of_units * permutations_of_math * permutations_of_chemistry * permutations_of_physics\n    return ans\n\nans = solution()"
    ],
    "28b3283e4adb46b1981d2f77bbce5dc3": [
        "def solution():\n    # Let the number of girls be g and the number of boys be b.\n    # From the problem we have: b = g - 65\n    # After 2/5 of the boys and 3/7 of the girls left, the remaining are:\n    # Boys: b - (2/5)*b = (3/5)*b\n    # Girls: g - (3/7)*g = (4/7)*g\n    # And we know that the remaining number of boys and girls are equal:\n    # (3/5)*b = (4/7)*g\n    \n    # Now we solve the system:\n    # b = g - 65\n    # (3/5)*b = (4/7)*g\n    \n    # Let's substitute b in the second equation:\n    # (3/5)*(g - 65) = (4/7)*g\n    \n    # Now, to find g:\n    # (3/5)g - (3/5)*65 = (4/7)*g\n    # Multiplying both sides by 35 (LCD of 5 and 7) to get rid of fractions:\n    # 21g - 21*65 = 20g\n    # Now we isolate g:\n    # 21g - 20g = 21*65\n    # g = 21*65\n    # Calculate g\n    g = 21 * 65\n\n    # Now calculate b using the first equation:\n    b = g - 65\n\n    # Calculate the total number of students that remained in the hall:\n    # Boys: (3/5)*b\n    # Girls: (4/7)*g\n    remaining_boys = (3/5)*b\n    remaining_girls = (4/7)*g\n\n    # Total remaining students is the sum of the remaining boys and girls:\n    total_remaining = int(remaining_boys + remaining_girls)\n\n    return total_remaining\n\nans = solution()"
    ],
    "2d130e3c0e3945b685446c7cfb272294": [
        "from math import factorial\n\ndef solution():\n    total_permutations = factorial(7)\n    vowels_permutations = factorial(3)\n    consonants_permutations = factorial(4)\n    all_vowels_together_permutations = vowels_permutations * factorial(5)\n    \n    ans = total_permutations - all_vowels_together_permutations\n    return ans\n\nans = solution()"
    ],
    "9ad4425b3ae341e383eaf5a81b5fea27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of each fruit\n    apples, oranges, bananas = symbols('apples oranges bananas')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(apples, oranges + 150)\n    equation2 = Eq(bananas, oranges + 50)\n    equation3 = Eq(apples + oranges + bananas, 1400)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (apples, oranges, bananas))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "00cb26f4bf1b4dea92d43d8871529e21": [
        "def solution():\n    number = \"seventy million seventeen thousand and seven\"\n    num_dict = {\n        'seventy million': 70000000,\n        'seventeen thousand': 17000,\n        'seven': 7\n    }\n\n    num_parts = number.split(' and ')\n    total = sum(num_dict[part] for part in num_parts)\n\n    return total\n\nans = solution()"
    ],
    "c28d501a4f3c490c9058face33142635": [
        "def solution():\n    first_term = 2\n    common_difference = 3\n    term_number = 20\n    \n    # Formula for nth term of an arithmetic sequence: a_n = a_1 + (n-1) * d\n    nth_term = first_term + (term_number - 1) * common_difference\n    \n    return nth_term\n\nans = solution()"
    ],
    "ef906b4f53fd45d79377d690c9653778": [
        "def solution():\n    category1 = 30\n    category2 = 40\n    category3 = 45\n\n    total_ways = category1 * category2 * category3\n\n    return total_ways\n\nans = solution()"
    ],
    "a2e75549c690497cad6e854a67bb9ca0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eugene, melvin, david = symbols('eugene melvin david')\n    total_stickers = 260\n\n    # Equations based on the problem description\n    equation1 = Eq((eugene - 2 * melvin) + melvin + (david + 2 * melvin), total_stickers)\n    equation2 = Eq((eugene - 2 * melvin) + (melvin - david) + (2 * david), total_stickers)\n    equation3 = Eq((eugene - 2 * melvin + david) + (melvin - david) + david, total_stickers)\n    equation4 = Eq((eugene - 2 * melvin + david) / (melvin - david), 46 / 12)\n    equation5 = Eq((melvin - david) / david, 12 / 7)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (eugene, melvin, david))\n\n    # As per question, the answer should be the initial amount of stickers Eugene had\n    return solutions[eugene]\n\nans = solution()"
    ],
    "89c2e46a330f4c809acc4ee66605274d": [
        "def solution():\n    count = 0\n    for a in range(1, 12 // 2 + 1): # One of the equal sides\n        for b in range(1, 12 // 3 + 1): # The base\n            if 2 * a + b == 12 and a >= b: # Check if perimeter is 12 and it's possible to form a triangle\n                count += 1\n    return count\n\nans = solution()"
    ],
    "4e7d8e9e8c70434db387985ffc3ced9d": [
        "def solution():\n    height_m = 8850\n    height_km = height_m / 1000\n    return height_km\n\nans = solution()"
    ],
    "b00136397bfb4af8943135704801f794": [
        "def solution():\n    from sympy import isprime\n\n    # Create a list to store the values of a, b, c\n    primes = []\n\n    # Loop to find the prime values for a, b, and c\n    # Based on the equations given, we can deduce that:\n    # a = b - 5 = c - 11\n    for a in range(2, 100):  # 100 is an arbitrary upper limit for the search\n        b = a + 5\n        c = a + 11\n        if isprime(a) and isprime(b) and isprime(c):\n            if 31 + a == 26 + b and 31 + a == 20 + c:\n                primes.extend([a, b, c])\n                break\n\n    # Calculate the product of the found prime numbers\n    ans = 1\n    for prime in primes:\n        ans *= prime\n    \n    return ans\n\nans = solution()"
    ],
    "7ba8140ad05947758fcf5701002a8435": [
        "def solution():\n    ans = 525 + 75\n    return ans\n\nans = solution()"
    ],
    "0c03095444bb44a4b57d684dd17a77c7": [
        "def solution():\n    from math import factorial\n\n    # There are 8 seats, but the table is circular, so we fix one person and arrange the others.\n    # This avoids rotationally equivalent duplications.\n    total_seats = 8\n    people = 6\n    \n    # We are arranging 6 people in 7 seats (since one is fixed), which is a permutation\n    different_orders = factorial(total_seats - 1) // factorial(total_seats - people - 1)\n\n    return different_orders\n\nans = solution()"
    ],
    "9613eedf0f0948dcb5413f496404e450": [
        "def solution():\n    # Let boys (B) and girls (G) be the number of students at first where B = G\n    # After 12 boys came in and 8 girls left, we have B + 12 boys and G - 8 girls\n    # The end result is twice as many boys as girls: B + 12 = 2 * (G - 8)\n    # Because B = G at the start, we replace G with B in the equation: B + 12 = 2 * (B - 8)\n    # Now we solve for B\n\n    from sympy import symbols, Eq, solve\n\n    B = symbols('B')\n    equation = Eq(B + 12, 2 * (B - 8))\n    num_boys_initially = solve(equation, B)[0]\n    num_girls_initially = num_boys_initially  # Because initially the numbers were equal\n    total_students_initially = num_boys_initially + num_girls_initially\n\n    return total_students_initially\n\nans = solution()"
    ],
    "7904921931804014a07b69845bab7b59": [
        "def solution():\n    # If we look at the two piles, we can see that there's no immediate winning strategy based\n    # on the initial quantities of matches in each pile since they are both non-zero.\n\n    # However, we can analyze the game using the theory of Nim:\n    # In the game of Nim, the winning strategy is to always end your turn with the piles\n    # in a state where the 'nim-sum' (binary XOR of the number of matches left in each pile)\n    # is zero. If the nim-sum is not zero at the start of your turn, then there exists some\n    # move that will make the nim-sum equal to zero.\n\n    # Compute the nim-sum of pile A and pile B:\n    nim_sum = 35 ^ 24 # XOR operation\n\n    # If the nim-sum of the initial configuration is non-zero,\n    # the first player has a winning strategy, otherwise the second player would win.\n    if nim_sum != 0:\n        strategy = \"Eddie has a winning strategy.\"\n    else:\n        # This case will not happen with the starting piles given, so Eddie always has a winning strategy.\n        strategy = \"Wei'er has a winning strategy.\"\n\n    return strategy\n\nans = solution()"
    ],
    "bff8b9eeb1c245eb8fd44124619a0ff8": [
        "def solution():\n    return 168 * 91\n\nans = solution()"
    ],
    "912de4f90ddb4216bf505fc2ea36050f": [
        "def solution():\n    ans = sum([i if i % 4 == 0 else -i for i in range(56, 81, 2)])\n    return ans\n\nans = solution()"
    ],
    "acbee96ed2cb4a61be352fee44d29870": [
        "def solution():\n    result = 21 * (2/7)\n    return result\n\nans = solution()"
    ],
    "fb64702818de4244b242b01464507459": [
        "def solution():\n    from itertools import permutations\n\n    digits = [3, 5, 7]\n    three_digit_numbers = set(permutations(digits, 3))\n    count = len(three_digit_numbers)\n    \n    return count\n\nans = solution()"
    ],
    "931f7e125e804e0bbab5078c31bf920e": [
        "from sympy import primerange, isprime\n\ndef solution():\n    for prime in primerange(2, 25):\n        complement = 25 - prime\n        if isprime(complement):\n            return prime * complement\n\nans = solution()"
    ],
    "df1629274fe246d5b09f00b408d237a3": [
        "def solution():\n    speed1 = 7  # speed in m/s for the first 280m\n    speed2 = 5  # speed in m/s for the middle 400m\n    speed3 = 8  # speed in m/s for the remaining distance\n\n    distance1 = 280  # distance in m for the first part of the race\n    distance2 = 400  # distance in m for the middle part of the race\n    distance3 = 800 - (distance1 + distance2)  # remaining distance in m\n\n    time1 = distance1 / speed1 # time in seconds for the first part\n    time2 = distance2 / speed2 # time in seconds for the middle part\n    time3 = distance3 / speed3 # time in seconds for the last part\n\n    total_time = time1 + time2 + time3  # total time in seconds\n\n    return total_time\n\nans = solution()"
    ],
    "097a0efcc6c64ff08677a4704bcd76bb": [
        "from math import gcd\n\ndef solution():\n    length1 = 15\n    length2 = 45\n    ans = gcd(length1, length2)\n    return ans\n\nans = solution()"
    ],
    "a223ddccd2724fcfad6b70a5cedd679d": [
        "def solution():\n    ans = 150 - (12 * 12)\n    return ans\n\nans = solution()"
    ],
    "dcda2529e50e438892b5fe26db544d87": [
        "def solution():\n    return 168 * 91\n\nans = solution()"
    ],
    "71633ecd388b4b3fb18cf8470f3168fa": [
        "def solution():\n    start_hour = 18  # 6pm in 24-hour format\n    start_minute = 52\n\n    end_hour = 20  # 8pm in 24-hour format\n    end_minute = 24\n\n    # calculate the time spent in minutes\n    time_spent = (end_hour * 60 + end_minute) - (start_hour * 60 + start_minute)\n\n    return time_spent\n\nans = solution()"
    ],
    "c6c18c591cee4de090f23b01cc195845": [
        "def solution():\n    num_lamps = 50\n    distance_between_lamps = 2\n    \n    road_length = (num_lamps - 1) * distance_between_lamps\n    return road_length\n\nans = solution()"
    ],
    "587b3b02dde341268ada10eb1e31a729": [
        "def solution():\n    total_peaches = 47\n    total_students = 6\n    min_peaches_for_max_student = (total_peaches // total_students) + 1\n\n    return min_peaches_for_max_student\n\nans = solution()"
    ],
    "74c598a697fa4036ba52acb5c3dae9a8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n\n    # chocolate cupcakes are 72 more than vanilla\n    eq1 = Eq(chocolate, vanilla + 72)\n    # blueberry cupcakes are 36 less than vanilla\n    eq2 = Eq(blueberry, vanilla - 36)\n    # after selling cupcakes, Sally has 427 left\n    eq3 = Eq(chocolate * (5/6) + vanilla * (1/3) + blueberry * (2/9), 427)\n\n    # solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (chocolate, vanilla, blueberry))\n    chocolate_cupcakes = solutions[chocolate]\n\n    # calculate how many chocolate cupcakes Sally sold\n    chocolate_sold = chocolate_cupcakes * (1/6)\n\n    return chocolate_sold\n\nans = solution()"
    ],
    "54d68cc151df4bfb9d1b20b9d2fb2aa3": [
        "def solution():\n    ans = 48 + 84\n    return ans\n\nans = solution()"
    ],
    "bd901fb2c6284efb98073eaa14689640": [
        "def solution():\n    num1 = 18\n    num2 = 52\n    halfway_number = (num1 + num2) / 2\n    return halfway_number\n\nans = solution()"
    ],
    "d459013620f445ba980f5db75d210d9b": [
        "def solution():\n    return 40 - 15 + 1\n\nans = solution()"
    ],
    "5620dc4830cf4177b81a1d252a13bdf6": [
        "def solution():\n    result = (2/9) * 36\n    return result\n\nans = solution()"
    ],
    "47de481b43de4ea9bc2a81e973f8542c": [
        "def solution():\n    total_sum = 140\n    n = 7\n    # If the numbers are consecutive, their average is the sum divided by the quantity of numbers\n    average = total_sum / n\n    # The smallest number is 3 less than the average (since they are 7 consecutive numbers)\n    smallest_number = average - (n // 2)\n    \n    return int(smallest_number)\n\nans = solution()"
    ],
    "270c294ed2df4203a13160fdf772f5be": [
        "def solution():\n    total_ways = 3 * 2 * 1  # The total number of ways without restrictions\n    opposite_ways = 2       # The number of ways Tony can sit opposite to Claire\n    return total_ways - opposite_ways\n\nans = solution()"
    ],
    "03abc0f287024f5d96ba76d95640a07b": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (6, 7), (3, 9)]\n    _, least_number_of_children = solve_congruence(*congruences)\n\n    return least_number_of_children\n\nans = solution()"
    ],
    "9a9953295d5740bc87f3c1edd90b8b54": [
        "def solution():\n    total_cost_postcards = 10 * 45  # cost in pence\n    total_cost_stamps = 10 * 27  # cost in pence\n    total_cost = total_cost_postcards + total_cost_stamps  # total cost in pence\n\n    note_value = 10 * 100  # converting £10 to pence\n\n    change = note_value - total_cost  # change in pence\n    change_in_pounds = change / 100  # converting change to pounds\n\n    return change_in_pounds\n\nans = solution()"
    ],
    "e22e61e5355d4cf286d0a863eac51562": [
        "def solution():\n    frank_daily_rate = 180 / 10\n    ryan_daily_rate = 180 / 15\n\n    more_tables = frank_daily_rate - ryan_daily_rate\n\n    return more_tables\n\nans = solution()"
    ],
    "68c228ef01e64096ae6ea0c0c72ce5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of minutes she has for marking,\n    # and y be the total number of questions.\n    \n    x, y = symbols('x y')\n\n    # she marks 4 questions per minute and takes 5 minutes more\n    equation1 = Eq(4 * (x + 5), y) \n    \n    # she marks 6 questions per minute and takes 5 minutes less\n    equation2 = Eq(6 * (x - 5), y) \n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "77c1430ed23f41599ca28024f5d0c1b6": [
        "def solution():\n    smallest_mass = 7.35\n    return smallest_mass\n\nans = solution()"
    ],
    "6d33b364eee54bfcb1f7cf59f055a829": [
        "def solution():\n    n = 10\n    square_sum_formula = n * (n + 1) * (2 * n + 1) // 6\n    answer = 3 * square_sum_formula\n    return answer\n\nans = solution()"
    ],
    "d3c48a9697fa4a4eb28b56062dbe1df1": [
        "def solution():\n    total_questions = 20\n    marks_correct = 5\n    marks_wrong = -2\n    total_marks = 79\n\n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        if (marks_correct * correct + marks_wrong * wrong) == total_marks:\n            return correct\n    \nans = solution()"
    ],
    "3393096c6a844b2dadae6b5e08940ba8": [
        "def solution():\n    total_money_raised = 165  # in pounds\n    price_per_cake = 0.75  # in pounds\n\n    number_of_cakes_sold = total_money_raised / price_per_cake\n\n    return int(number_of_cakes_sold)\n\nans = solution()"
    ],
    "30f8a7925ff34166983d3831a3dd1927": [
        "def solution():\n    amy_candies = 24\n    emma_candies = 10\n    total_candies = amy_candies + emma_candies\n    candies_each_should_have = total_candies // 2\n    candies_amy_should_give = amy_candies - candies_each_should_have\n    return candies_amy_should_give\n\nans = solution()"
    ],
    "b85b80d96c214b3f9767320633e9d1e4": [
        "def solution():\n    x, y = symbols('x y')\n    cost = 5 * x + 1 * y\n    return cost\n\nans = solution()"
    ],
    "25ecfb7fac334e73b6113226048393ed": [
        "def solution():\n    # It takes 6 seconds to chime 3 times, hence the interval between chimes is 6 / 2 = 3seconds\n    # because there are 2 intervals between the 3 chimes\n    interval = 6 / 2 \n    \n    # To chime 6 times, there will be 5 intervals since 6 - 1 = 5\n    total_intervals = 6 - 1\n    \n    # Total time taken to chime 6 times is the number of intervals multiplied by the interval duration\n    total_time = total_intervals * interval\n    \n    return total_time\n\nans = solution()"
    ],
    "18cee48b4d67429daae6f6a7b4da9f6c": [
        "def solution():\n    total_money = 1440\n    spent_in_restaurant = (3/7) * total_money\n    remaining_after_restaurant = total_money - spent_in_restaurant\n    spent_on_enrichment = (2/9) * remaining_after_restaurant\n    remaining_after_enrichment = remaining_after_restaurant - spent_on_enrichment\n\n    return remaining_after_enrichment\n\nans = solution()"
    ],
    "08a35d75e3c6466b94f233066ea49537": [
        "def solution():\n    # Convert everything to centimetres\n    meters_to_centimeters = 3.2 * 100\n    difference = meters_to_centimeters - 30\n    return difference\n\nans = solution()"
    ],
    "38f0f6e2b17a49f9901e5abd3924ce28": [
        "def solution():\n    n = 10  # since we're considering squares from 1^2 to 10^2\n    square_sum = 3 * (n * (n + 1) * (2 * n + 1)) // 6\n    return square_sum\n\nans = solution()"
    ],
    "fd9804acb7e544a69a055503fd3def6a": [
        "def solution():\n    return 15 * 1.98\n\nans = solution()"
    ],
    "6d6b64c92ea64a01b75ed338a1814766": [
        "def solution():\n    p_days = 12\n    p_hours_per_day = 8\n\n    q_days = 8\n    q_hours_per_day = 10\n\n    # Calculate the work done by P and Q in one day\n    p_work_per_day = 1 / (p_days * p_hours_per_day)\n    q_work_per_day = 1 / (q_days * q_hours_per_day)\n\n    # Calculate the combined work per day when P and Q work together 8 hours a day\n    combined_work_per_day = (p_work_per_day * p_hours_per_day) + (q_work_per_day * 8)\n\n    # Calculate the minimum whole days to complete the job\n    total_days_to_complete = 1 / combined_work_per_day\n\n    # Since we want the whole days, we take the ceiling of the calculated days\n    from math import ceil\n    min_whole_days = ceil(total_days_to_complete)\n\n    return min_whole_days\n\nans = solution()"
    ],
    "73d546a2c1f0431cbfd7415491f84730": [
        "def solution():\n    total_digits = 0\n    for page in range(1, 41):\n        total_digits += len(str(page))\n    return total_digits\n\nans = solution()"
    ],
    "9527ef42da6941e7be57a1270b76ceb3": [
        "def solution():\n    cost_per_kg = 56 / 100  # Convert pence to pounds\n    total_cost = 5 * cost_per_kg\n    total_money = 10  # Pounds\n    change = total_money - total_cost\n    return change\n\nans = solution()"
    ],
    "787da3f18e5e412287bbd42e447a76ef": [
        "def solution():\n    from sympy import factorint\n\n    prime_factors = factorint(120)\n    total_factors = 1\n\n    for prime, exponent in prime_factors.items():\n        total_factors *= (exponent + 1)\n\n    return total_factors\n\nans = solution()"
    ],
    "106593b9b5bb443c9285898752bf5849": [
        "def solution():\n    import math\n    \n    product = 180\n    min_diff = product  # Initialize to a large value\n    sqrt_product = int(math.sqrt(product))\n    \n    for factor in range(1, sqrt_product + 1):\n        if product % factor == 0:\n            other_factor = product // factor\n            diff = abs(factor - other_factor)\n            min_diff = min(min_diff, diff)\n    \n    return min_diff\n\nans = solution()"
    ],
    "b3c63472965f4875854399b30b013a75": [
        "def solution():\n    rounded_mass = 7.4\n    smallest_possible_mass = rounded_mass - 0.05\n    return smallest_possible_mass\n\nans = solution()"
    ],
    "bbfed58ca2f642f482fdc598bc7882b5": [
        "def solution():\n    midnight_temp = -8\n    midday_temp = 13\n\n    overall_change = midday_temp - midnight_temp\n\n    return overall_change\n\nans = solution()"
    ],
    "cc27afdc4fa642d99b8a96c299e48d50": [
        "def solution():\n    for num in range(6, 15):\n        if num % 3 == 0 and 27 % num == 0:\n            return num\n\nans = solution()"
    ],
    "2112c6328fbd45fe9356d8c4b6c92b4e": [
        "def solution():\n    num_people = 85\n    price_per_person = 1.30\n\n    total_money_collected = num_people * price_per_person\n\n    return total_money_collected\n\nans = solution()"
    ],
    "ebe796d82e734546a5d8d043ba66fb08": [
        "def solution():\n    from math import gcd\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "9a83c293667c44a394743b502e08ad48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12*x - 2*(5 + x), 20)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "31b84522628b463e9e35f8337da9486d": [
        "def solution():\n    total_weight_durian = 3 * 2.6\n    total_weight_watermelon = 5 * 9.24\n    total_weight = total_weight_durian + total_weight_watermelon\n    total_fruits = 3 + 5\n    average_weight = total_weight / total_fruits\n    return average_weight\n\nans = solution()"
    ],
    "fb0704ef09444ba29e79685e326dd2b9": [
        "def solution():\n    number = 42008\n    one_million = 1000000\n    difference = one_million - number\n    return difference\n\nans = solution()"
    ],
    "5ff26caf1d8641c3b74748b9efd22500": [
        "def solution():\n    # Let the number of pens and pencils originally bought be x.\n    # After giving away 5 pencils, she has x - 5 pencils left.\n    # Thus, the number of pens she has is twice the number of pencils: 2 * (x - 5).\n    # The equation is therefore: x = 2 * (x - 5).\n    # Solve for x\n    x = symbols('x')\n    equation = Eq(x, 2 * (x - 5))\n    number_of_pens_pencils = solve(equation, x)[0]\n\n    # In the end, she buys another 18 pens, so we add 18 to the original amount she had.\n    total_pens = number_of_pens_pencils + 18\n\n    return total_pens\n\nans = solution()"
    ],
    "c29aa8875cbd4e7d9da3314c1b9a63d0": [
        "def solution():\n    # Star jogs for 1 hour from 6:30 AM to 7:30 AM\n    jogging_time_hours = 1\n    jogging_speed_mph = 6.5\n\n    # Star walks for 2 hours from 7:30 AM to 9:30 AM\n    walking_time_hours = 2\n    walking_speed_mph = 4.5\n\n    # Distance traveled while jogging\n    jogging_distance = jogging_time_hours * jogging_speed_mph\n\n    # Distance traveled while walking\n    walking_distance = walking_time_hours * walking_speed_mph\n\n    # Total distance traveled\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "d9b578012565439f986a633f66f05484": [
        "def solution():\n    total_questions = 40\n    # Given that Tom received a score of 71.\n    # Let x be the correct answers and y be the wrong answers\n    # Based on Tom's calculation method, the marks deducted for wrong answers should be subtracted once instead of twice\n    # Therefore, the real score is calculated by giving 2 points for every right answer and deducting 1 point for every wrong answer as below:\n    # Real Score = 2*x - y\n    # Given Real Score is 71, and that there are 40 questions in total, we have the equations:\n    # x + y = total_questions\n    # 2*x - y = 71\n    # Solving these equations:\n    x = (71 + total_questions) // 3\n    y = total_questions - x\n    return y\n\nans = solution()"
    ],
    "eca10a43dea24e5b8f40734daf3f5e9e": [
        "def solution():\n    # There are 52 cards in total and 4 patterns (each consisting of 13 cards)\n    # Each pattern includes an 'A'\n    # To ensure that we draw at least one 'A', assume the worst-case scenario\n    # where we draw every card except an 'A' from each pattern.\n    # That would be 3 patterns * 12 non-'A' cards = 36 cards.\n    \n    # Therefore, to ensure we get an 'A', we must draw one more card\n    # So, we must draw 36 + 1 cards in total\n    cards_to_draw = 36 + 1\n    \n    return cards_to_draw\n\nans = solution()"
    ],
    "5a05da475bdf4d4f9c26b86b5ca7c335": [
        "def solution():\n    count = 0\n    for i in range(1, 319):\n        count += str(i).count('3')\n    return count\n\nans = solution()"
    ],
    "7a2fec9d9f2a4cacbf558f6ae3813319": [
        "def solution():\n    speed_ship = 33\n    speed_current = 7\n    distance = 320\n\n    speed_downstream = speed_ship + speed_current\n    time = distance / speed_downstream\n\n    return time\n\nans = solution()"
    ],
    "dc98d04066844b33b74e3117952005e5": [
        "def solution():\n    count = 0\n    for i in range(1, 100):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "e7da9c665b464c9ca102d23b33677067": [
        "def solution():\n    count = 0\n    for number in range(1, 226):\n        count += str(number).count('2')\n    return count\n\nans = solution()"
    ],
    "f6df262ec3d8481f8a51b4a2492214da": [
        "def solution():\n    total_books = 70\n    piles = 10\n    books_per_pile = total_books // piles\n    return books_per_pile\n\nans = solution()"
    ],
    "ec60860f433c4d77837f8b9b847882cc": [
        "def solution():\n    ben_sweets = 17\n    bob_sweets = 14\n    total_sweets = ben_sweets + bob_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "14254cf94d7540a7a332d80102aa8f38": [
        "def solution():\n    return 6081 - 5076\n\nans = solution()"
    ],
    "67cd26c1867b4d648638a34d32fad1b9": [
        "def solution():\n    total_length = 240\n    cut_length = 45 * 2\n    remaining_length = total_length - cut_length\n    wire_40cm_pieces = remaining_length // 40\n\n    return wire_40cm_pieces\n\nans = solution()"
    ],
    "1b632632619c4c03a2a49fc43f39ccb8": [
        "def solution():\n    # Based on the formula for the sum of an arithmetic sequence: sum = n/2 * (first_term + last_term)\n    # where n is the number of terms. Here n = 8 and sum = 2012\n    # We can let the first term be x, thus the last term will be x + 7 (since there are 8 consecutive numbers)\n    # sum = n/2 * (2x + 7)\n    # 2012 = 8/2 * (2x + 7)\n    # 2012 = 4 * (2x + 7)\n    # 2012 / 4 = 2x + 7\n    # 503 = 2x + 7\n    # 2x = 503 - 7\n    # 2x = 496\n    # x = 496 / 2\n    # x = 248\n    # The largest number is x + 7\n    largest_number = 248 + 7\n    return largest_number\n\nans = solution()"
    ],
    "3badf3ad5d7e4d65997e7dba4984ed0d": [
        "def solution():\n    total_cars = 60\n    red_cars = (5 / 12) * total_cars\n    blue_cars = (20 / 100) * total_cars\n    neither_red_nor_blue = total_cars - (red_cars + blue_cars)\n\n    return int(neither_red_nor_blue)\n\nans = solution()"
    ],
    "6e3e5239895349b08896dfe4a2f9817a": [
        "def solution():\n    digits = 3 # number of digits in the three-digit number\n    choices = 3 # number of choices for each digit (6, 7, or 8)\n\n    ans = choices ** digits\n\n    return ans\n\nans = solution()"
    ],
    "c95c7f2647524a1b84a553fdaf384550": [
        "def solution():\n    count_zeros = 0  # Counter for the number of zeros\n    number = 1  # The current number being written\n    while True:\n        number_str = str(number)  # Convert the current number to a string\n        count_zeros += number_str.count('0')  # Increment count for each '0' found\n        if count_zeros >= 100:  # If 100 or more zeros have been written, break the loop\n            break\n        number += 1  # Increment to the next number\n        \n    return number\n\nans = solution()"
    ],
    "361af5c7444d4a77a809bd5fb28f128e": [
        "def solution():\n    total_juice = 8 * 3\n    juice_drank = 9\n    juice_left = total_juice - juice_drank\n\n    return juice_left\n\nans = solution()"
    ],
    "d524ba10be4e42d287da738c4dd0f9f7": [
        "def solution():\n    start_time = 10 * 60 + 35  # Convert 10:35 AM to minutes past midnight\n    travel_time = 3 * 60 + 35  # Convert 3 hours and 35 minutes to minutes\n\n    arrival_time_total_minutes = start_time + travel_time\n    arrival_hour = arrival_time_total_minutes // 60\n    arrival_minute = arrival_time_total_minutes % 60\n\n    # Since we want the time in AM/PM format, check if it's PM and adjust\n    if arrival_hour >= 12:\n        arrival_hour -= 12\n        am_pm = 'p.m.' if arrival_hour > 0 or (arrival_hour == 0 and arrival_minute > 0) else 'a.m.'\n    else:\n        am_pm = 'a.m.'\n\n    # The format needs to be zero-padded for the minutes\n    arrival_time = f\"{arrival_hour}:{str(arrival_minute).zfill(2)} {am_pm}\"\n\n    return arrival_time\n\nans = solution()"
    ],
    "57c249281b304080a78e5214cc07daa6": [
        "def solution():\n    principal = 3600\n    interest_rate = 0.02\n    time = 10\n\n    interest = principal * interest_rate * time\n\n    return interest\n\nans = solution()"
    ],
    "eda84d19ef334353a874d1471a677058": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2 * x - 2), 30 - 3 * x)\n    x_value = solve(equation, x)\n\n    return x_value[0]\n\nans = solution()"
    ],
    "56c90f1a30374a13b09ffe20646206b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bud, pip, tom = symbols('bud pip tom')\n\n    equation1 = Eq(bud, 3 * pip)\n    equation2 = Eq(tom, 2 * bud)\n    equation3 = Eq(bud + pip + tom, 50)\n\n    solutions = solve((equation1, equation2, equation3), (bud, pip, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "b7fd46892ef74e929cb5d1f4d54a7f75": [
        "def solution():\n    speed1 = 180  # Meters per minute at first speed\n    time1 = 6     # Time in minutes at first speed\n    \n    speed2 = 120  # Meters per minute at second speed\n    time2 = 8     # Time in minutes at second speed\n    \n    # Calculate distance covered at each speed\n    distance1 = speed1 * time1\n    distance2 = speed2 * time2\n    \n    # Total distance is the sum of both distances\n    total_distance = distance1 + distance2\n    \n    return total_distance\n\nans = solution()"
    ],
    "8e1c584bb43949dc93fc621494c3073f": [
        "def solution():\n    # Total sum of eight consecutive numbers is 2012\n    total_sum = 2012\n    \n    # The sum of an arithmetic sequence is the average of the first and last terms\n    # times the number of terms. In this case, we have eight terms. Let the first\n    # term be a, then the last term is a + 7 (since they are consecutive).\n    # The average of the first and last term is (a + (a + 7)) / 2 = a + 3.5\n    # Hence the formula for the sum is (a + 3.5) * 8 = 2012\n\n    # Calculate the first term of the sequence\n    first_term = (total_sum / 8) - 3.5\n\n    # The largest number in the sequence is the last term, which is seven more\n    # than the first term\n    largest_number = first_term + 7\n\n    return int(largest_number)\n\nans = solution()"
    ],
    "b592cb34a1374b25a352ce50080da48d": [
        "def solution():\n    total_cars = 60\n    red_cars = (5/12) * total_cars\n    blue_cars = (20/100) * total_cars\n    neither_red_nor_blue = total_cars - (red_cars + blue_cars)\n    return int(neither_red_nor_blue)\n\nans = solution()"
    ],
    "e084829c18924d79acacaf75a980d4f9": [
        "def solution():\n    people_in_front_of_elias = 25\n    danya_position_from_back = 14\n    total_people = people_in_front_of_elias + danya_position_from_back + 1  # +1 for Elias himself\n\n    return total_people\n\nans = solution()"
    ],
    "90a6c5c7e28a4bc489bb3ef6acd51b15": [
        "def solution():\n    sachin_rate = 1 / 3\n    peter_rate = 1 / 6\n\n    combined_rate = sachin_rate + peter_rate\n\n    time_together = 1 / combined_rate\n\n    return time_together\n\nans = solution()"
    ],
    "d15e0e53fbde4c1aa79efca6f630157d": [
        "def solution():\n    return (42 / 35) * 100\n\nans = solution()"
    ],
    "015418b57d46449a8b2161571801303b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let a denote the number of students in class A and b denote the number of students in class B.\n    a, b = symbols('a b')\n\n    # Initial condition: a is 5/7 of b\n    equation1 = Eq(a, 5/7 * b)\n\n    # After 3 students are transferred from B to A, a + 3 is 4/5 of b - 3\n    equation2 = Eq(a + 3, 4/5 * (b - 3))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[a]\n\nans = solution()"
    ],
    "65df19ad9a52462f88ad9585d2e88ca8": [
        "def solution():\n    return (14 - 8) / 3\n\nans = solution()"
    ],
    "1f3250a1ab714b5a93c359bb33407829": [
        "def solution():\n    return 24.4 * 1000\n\nans = solution()"
    ],
    "7991c8c9adaf4cbb9a682e09102844fc": [
        "def solution():\n    return 52248 // 12\n\nans = solution()"
    ],
    "76ba583e46624ad6ad49e0fa892660ad": [
        "def solution():\n    total_litres = 40\n    flow_rate = 125  # in millilitres per second\n    litre_to_millilitres = 1000\n\n    total_millilitres = total_litres * litre_to_millilitres\n    time_in_seconds = total_millilitres / flow_rate\n\n    return time_in_seconds\n\nans = solution()"
    ],
    "6fd5f6f4f4764d0a976b09a87613282b": [
        "def solution():\n    # Let the side of the initial square array be n, then the number of boys is n^2\n    # When 17 girls are added in a row and a column, the new square array has a side of n+1\n    # So the total number of students is (n+1)^2\n    # The difference of girls to boys therefore is (n+1)^2 - n^2 = 17\n    # Expanding this expression gives us: n^2 + 2n + 1 - n^2 = 17\n    # Simplifying, we get: 2n + 1 = 17\n    # More simplification: 2n = 16\n    # Therefore: n = 8\n    # The number of boys before the girls lined up is n^2 which is 8^2\n    boys = 8**2\n    return boys\n\nans = solution()"
    ],
    "6424a92c08be44a48125b4a91cdf0541": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be the distance, and v be the original speed\n    d, v = symbols('d v')\n\n    # If Ivy leaves at 1 p.m. and arrives at 7 p.m., she travels for 6 hours\n    # Distance = Speed * Time\n    original_time = 6\n    equation1 = Eq(d, v * original_time)\n\n    # To arrive one hour earlier (at 6 p.m.), she travels for 5 hours at a speed of (v + 2)\n    new_time = 5\n    equation2 = Eq(d, (v + 2) * new_time)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (d, v))\n\n    return solutions[d]\n\nans = solution()"
    ],
    "12524a06278546ab8e9e8b16a0f5e800": [
        "def solution():\n    # Let x be the number of bottles Faye has at first.\n    # According to the problem, every time Faye swaps 3 bottles, she gets 1 new bottle.\n    # She swapped 5 times and got 1 extra bottle than expected.\n    # If she had exchanged exactly according to the rule, she would have 4 - 1 = 3 bottles after 5 exchanges.\n    # So, she exchanged 3 * 5 = 15 bottles to get these 3 bottles.\n\n    # Now, we know that she actually got 4 bottles.\n    # This means she must have exchanged 15 + 3 = 18 bottles.\n    # In other words, 18 + x (bottles she started with) = total bottles she exchanged for 5 swaps.\n    # Since she did 5 swaps, each swap uses 3 bottles, so:\n    # 5 swaps * 3 bottles per swap = 15 bottles.\n    # Thus, 18 + x = 15 + x (initial bottles) + 5 (bottles received from exchanging).\n    # Simplifying it gives x = 18 - 15 = 3.\n\n    # Faye has 3 bottles at first.\n    return 3\n\nans = solution()"
    ],
    "355ee489190e440a97b10b0e4a181b2c": [
        "def solution():\n    total_digits = 237\n    digits_per_page = 1\n    pages_counted = 0\n    digits_counted = 0\n    \n    while digits_counted < total_digits:\n        pages_in_this_digit_group = 9 * (10 ** (digits_per_page - 1))\n        if (digits_counted + pages_in_this_digit_group * digits_per_page) > total_digits:\n            break\n        else:\n            digits_counted += pages_in_this_digit_group * digits_per_page\n            pages_counted += pages_in_this_digit_group\n            digits_per_page += 1\n            \n    remaining_digits = total_digits - digits_counted\n    pages_from_remaining = remaining_digits // digits_per_page\n    \n    return pages_counted + pages_from_remaining\n\nans = solution()"
    ],
    "75742fbf8de24d479bd0cd4b5397eb2d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables\n    a, d = symbols('a d')  # a: first term, d: common difference\n    \n    # Equations based on the given information\n    equation1 = Eq(a + 8*d, a + 14*d + 18)  # 9th term = 15th term + 18\n    equation2 = Eq(a + 19*d + a + 11*d, 88)  # 20th term + 12th term = 88\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, d))\n    \n    # Find the 32nd term\n    a32 = solutions[a] + 31*solutions[d]\n\n    return a32\n\nans = solution()"
    ],
    "4cc013248faa4925b3066d0d0269c175": [
        "def solution():\n    # We know that the error introduced an additional (1268 - 1082) to the total sum\n    error = 1268 - 1082\n\n    # And this error caused the average to be (1468 - 1462) higher than it should have been\n    average_error = 1468 - 1462\n    \n    # The number of days is the error divided by the difference in average\n    days = error / average_error\n\n    return int(days)\n    \nans = solution()"
    ],
    "3f0badddf0e84f4285bbd3a1d9b4b2e7": [
        "def solution():\n    # Mr Tung can cut the rope into 4 pieces in 12 minutes.\n    # This means he makes 3 cuts (since 4 pieces require 3 cuts).\n    # If each cut takes the same amount of time, then:\n    time_per_cut = 12 / 3  # time for one cut\n\n    # Now, to cut a rope into 12 pieces, he needs 11 cuts.\n    total_time_for_12_pieces = 11 * time_per_cut\n\n    return total_time_for_12_pieces\n\nans = solution()"
    ],
    "c5b38e5e2199435c95eb989e88e91cc9": [
        "def solution():\n    birth_year = 1940 - 80\n    oak_tree_age_in_2011 = 2011 - birth_year\n    return oak_tree_age_in_2011\n\nans = solution()"
    ],
    "7215e81d77604964bf294178622f8fee": [
        "def solution():\n    nth_term = 31\n    nth_position = 10\n    common_difference = 3\n    \n    # Equation: nth_term = first_term + (nth_position - 1) * common_difference\n    first_term = nth_term - (nth_position - 1) * common_difference\n    \n    return first_term\n\nans = solution()"
    ],
    "baabee468b9f46dd9d3a226e53fabfd7": [
        "def solution():\n    from sympy import symbols, simplify\n\n    # Define the variable\n    x = symbols('x')\n\n    # Chewy's initial equation\n    chewy_eq = (8*x + 8)/2 - 3*(x + 6)\n\n    # Simplify Chewy's equation to find the mistake\n    simplified_chewy_eq = simplify(chewy_eq)\n\n    # Correct solution\n    correct_solution = simplified_chewy_eq\n\n    return correct_solution\n\nans = solution()"
    ],
    "0dd2e9d562984533a486b18296484a81": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(22 + 3 * (6 - 2 * x), 8 + 10 * x)\n    \n    solution_x = solve(equation, x)\n    \n    return solution_x[0]\n\nans = solution()"
    ],
    "ca0a4ee804934a22b8a061da9f276028": [
        "def solution():\n    total_flowers = 200\n    red_flowers = (2/5) * total_flowers\n    purple_flowers = (1/8) * total_flowers\n    return int(red_flowers + purple_flowers)\n\nans = solution()"
    ],
    "a7861f09bf0047a1abbdf01cf43d20db": [
        "def solution():\n    # In an arithmetic sequence, the sum of n terms is given by:\n    # S_n = n/2 * (a_1 + a_n)\n    # where S_n is the sum of the arithmetic sequence,\n    # n is the number of terms,\n    # a_1 is the first term, and\n    # a_n is the nth term (which we are looking for).\n    \n    # For 8 consecutive whole numbers, their sum S_8 is given and we know n = 8.\n    # S_8 = 2012 = 8/2 * (a_1 + a_8)\n    # Note that a_1 and a_8 are the first and the eighth terms of the sequence respectively,\n    # and since they are consecutive, a_8 = a_1 + 7.\n    \n    # We can now set up the equation:\n    # 2012 = 4 * (a_1 + a_1 + 7)\n    # Simplifying this, we get:\n    # 2012 = 4 * (2 * a_1 + 7)\n    # 2012 = 8 * a_1 + 28\n    # 2012 - 28 = 8 * a_1\n    # 1984 = 8 * a_1\n    # a_1 = 1984 / 8\n    # a_1 = 248\n    \n    # Now we find the eighth term (the largest number):\n    # a_8 = a_1 + 7\n    a_1 = 2012 // 8 - 7 // 2\n    a_8 = a_1 + 7\n    \n    return a_8\n\nans = solution()"
    ],
    "539f23e975a649d497568948c5e3f459": [
        "def solution():\n    number = 38942\n    remainder = number % 9\n    smallest_number = remainder if remainder != 0 else 9\n    return smallest_number\n\nans = solution()"
    ],
    "a7676438a1a847d8ab70d7998ed51f7a": [
        "def solution():\n    # There must be at least one marble in each pile,\n    # so we have 10 - 2 = 8 marbles left to distribute.\n    # For 2 piles, there is only 1 way to split the remaining marbles,\n    # as they are identical, and it doesn't matter which pile gets them.\n    # So we have 8 + 1 = 9 possible distributions.\n\n    num_ways = 8 + 1\n    return num_ways\n\nans = solution()"
    ],
    "f0ea959eec6b41118011cbb0ba3f17c6": [
        "def solution():\n    return 6444 // 18\n\nans = solution()"
    ],
    "503dcced126a4cae9f67e60f2048cded": [
        "def solution():\n    liters_to_quarts = 2.5 * 1.056688\n    cups_per_quart = 2\n    total_cups = liters_to_quarts * cups_per_quart\n\n    return round(total_cups)\n\nans = solution()"
    ],
    "a4c428257cff4445a4d9df7423135eaf": [
        "def solution():\n    # If Jeremy picks at most 2 cars from each color, he still isn't guaranteed to have 3 of the same color\n    # So, Jeremy has to pick at least 3 from a color to ensure he has 3 of the same color\n    # Therefore, he could pick 2 red, 2 blue and 2 white and still not have 3 of the same color (worst case scenario)\n    # The next pick will guarantee 3 cars of the same color, regardless of the color he picks\n    max_picks_without_3_same = (2 * 3)\n    # The next pick will ensure he has 3 of the same color\n    next_pick_to_ensure_3_same = 1\n\n    total_picks_to_ensure_3_same = max_picks_without_3_same + next_pick_to_ensure_3_same\n    return total_picks_to_ensure_3_same\n\nans = solution()"
    ],
    "31cea5404a28497fa58c3d4ac14250bf": [
        "def solution():\n    length1 = 85 / 100  # converting from cm to m\n    length2 = 2         # already in meters\n    length3 = 147 / 100 # converting from cm to m\n\n    total_length = length1 + length2 + length3\n\n    return total_length\n\nans = solution()"
    ],
    "02cec2fdec424ee0a518fe03ccd11faa": [
        "def solution():\n    ans = 2 + 34/100\n    return ans\n\nans = solution()"
    ],
    "89245e2c38cd4e249921977cacaefb32": [
        "def solution():\n    total_legs = 64\n    ant_legs = 6\n    spider_legs = 8\n    \n    max_ants = total_legs // ant_legs\n    while (total_legs - max_ants * ant_legs) % spider_legs != 0:\n        max_ants -= 1\n\n    return max_ants\n\nans = solution()"
    ],
    "521225eba88d499087ca7a728e7babaa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin_coins = symbols('justin_coins')\n    vivian_coins = 5 * justin_coins + 8\n    equation = Eq(vivian_coins, justin_coins + 48)\n    \n    justin_amount = solve(equation, justin_coins)\n    vivian_amount = 5 * justin_amount[0] + 8\n\n    return vivian_amount\n\nans = solution()"
    ],
    "e4b841a897a04191927b64bfe38ff722": [
        "def solution():\n    remaining_stamps = 34\n    stamps_used = 2\n    stamps_bought = 11\n    stamps_given = 14\n\n    original_stamps = remaining_stamps + stamps_used - stamps_bought + stamps_given\n    \n    return original_stamps\n\nans = solution()"
    ],
    "c7d9e6a152bf4aac8eb62a0c004333d5": [
        "def solution():\n    return 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1\n\nans = solution()"
    ],
    "730d6fe3d6a34ed4b170b749c262e84f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    \n    # Define the transformation based on the problem description\n    transformation = (x - 6) * 6 + 6\n    final_result = transformation / 6\n    \n    # Set up the equation based on the final result\n    equation = Eq(final_result, 6)\n    \n    # Solve the equation for x\n    solution = solve(equation, x)\n    \n    # Return the solution (the value of the number)\n    return solution[0]\n\nans = solution()"
    ],
    "6e99e1ccf3764b41b183ed57f3093159": [
        "def solution():\n    # Bounce 4: height = 36 (given)\n    # Bounce 3: height = 2 * 36 = 72 (before bounce 4, it bounced half the height it fell from)\n    # Bounce 2: height = 72 / 3 = 24 (before bounce 3, it bounced 3 times the height it fell from)\n    # Bounce 1: height = 24 / 3 = 8 (before bounce 2, it also bounced 3 times the height it fell from)\n    # Initial drop height: = 8 (the ball was dropped from this height)\n\n    initial_height = 36 * 2 / 3 / 3\n    return initial_height\n\nans = solution()"
    ],
    "71c5dafbfe4e49e48f3ff2ba324fa816": [
        "def solution():\n    pencil_cost = 2\n    pen_cost = 4\n\n    pencils_for_a_pen = pen_cost // pencil_cost\n\n    return pencils_for_a_pen\n\nans = solution()"
    ],
    "c847b4e44f3b41f4925f34fe099d474a": [
        "def solution():\n    ans = 2 * 9 + 200 + 9\n    return ans\n\nans = solution()"
    ],
    "c0478d9244ba49339b683a82526b16a9": [
        "def solution():\n    initial_amount = 32\n    amount_left = initial_amount / 2\n    return amount_left\n\nans = solution()"
    ],
    "945736381b124f10ad0d4586420a9666": [
        "def solution():\n    for num in range(30, 41):\n        if num % 3 == 0 and num % 4 == 0:\n            return num\n\nans = solution()"
    ],
    "9074f61b08b34feb83fb6026f085b5f2": [
        "def solution():\n    song_cost = 99  # cost per song in pence\n    album_cost = 899  # cost of whole album in pence\n    total_songs = 12  # total number of songs\n\n    total_individual_cost = song_cost * total_songs\n    savings = total_individual_cost - album_cost\n\n    return savings / 100  # converting pence to pounds\n\nans = solution()"
    ],
    "2826012497a04a32b3544b4cbd378949": [
        "def solution():\n    eggs_per_tray = 16\n    number_of_trays = 40\n    total_eggs = eggs_per_tray * number_of_trays\n    return total_eggs\n\nans = solution()"
    ],
    "f20519cbe24047f480f153f89d45c8f9": [
        "def solution():\n    results = set()\n    for i in range(10, 100):\n        original = str(i)\n        reversed_num = int(original[::-1])\n        diff = abs(i - reversed_num)\n        results.add(diff)\n    ans = results\n    return ans\n\nans = solution()"
    ],
    "e6b3da9856474849a7c73d75f573f103": [
        "def solution():\n    min_value = float('inf')  # Initialize to a very large value\n\n    for a in range(10):\n        for b in range(10):\n            for c in range(10):\n                for d in range(10):\n                    for e in range(10):\n                        num = 800000 + 10000 * a + 1000 * b + 100 * c + 10 * d + e\n                        \n                        # Check divisibility by 3, 4, and 5 and uniqueness of digits\n                        if num % 3 == 0 and num % 4 == 0 and num % 5 == 0:\n                            if len(set(str(num))) == 6:  # Digits are unique\n                                min_value = min(min_value, num)\n\n    return min_value\n\nans = solution()"
    ],
    "e1c6641aa30549ec93c747f03b8fde94": [
        "def solution():\n    total_cost = 1.69 + 0.82 + 2.99\n    change = 20 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "022ef21b0ed847d68df150adecb637ea": [
        "def solution():\n    digits = [1, 2, 3]\n    count = 0\n    for i in digits:\n        for j in digits:\n            if i != j:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "4b2c1678e7f14496a3b8d08653cd8693": [
        "def solution():\n    # To minimize the difference, order digits for the first number from smallest to largest\n    # and for the second, from largest to smallest, and pair them such that higher digits\n    # are in the more significant positions of the smaller number.\n    smaller_number = int(''.join(map(str, sorted(range(5)))))\n    larger_number = int(''.join(map(str, sorted(range(5, 10), reverse=True))))\n    \n    difference = larger_number - smaller_number\n    \n    return difference\n\nans = solution()"
    ],
    "cc3b876c55ae46299e40246b9eafb3d1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Sam's and Peter's initial number of stickers\n    s, p = symbols('s p')\n\n    # Sam has 40 stickers more than Peter\n    eq1 = Eq(s, p + 40)\n\n    # Sam gave 20% of his stickers to Peter\n    # Peter's stickers after the exchange\n    p_after_sam_gives = p + 0.20 * s\n\n    # Peter gave 25% of his stickers to Sam\n    # Sam's stickers after the exchange\n    s_after_peter_gives = (s - 0.20 * s) + 0.25 * p_after_sam_gives\n\n    # In the end, Sam had 96 stickers more than Peter\n    eq2 = Eq(s_after_peter_gives - p_after_sam_gives, 96)\n\n    # Solve the equations\n    solutions = solve((eq1, eq2), (s, p))\n\n    return solutions[p]\n\nans = solution()"
    ],
    "7123aa7bbad1493684f0f3f2ffa7852a": [
        "def solution():\n    for N in range(10):\n        if (300 + 10 * N + 3) % 9 == 1:\n            return N\n\nans = solution()"
    ],
    "40503ef3b45647cda8ec8ab5a12a3568": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    income = 140000\n    tax_1 = 0.05 * 50000\n    tax_2 = (0.08 + T) * (income - 50000)\n    tax_total = tax_1 + tax_2\n\n    equation = Eq(tax_total, 15100)\n\n    solution_T = solve(equation, T)\n\n    return solution_T[0].evalf()\n\nans = solution()"
    ],
    "bff9eb9a097b4c9fbe698fb9361765b1": [
        "def solution():\n    return 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1\n\nans = solution()"
    ],
    "73d622eab89d4aeab04694fa52f525db": [
        "def solution():\n    A = (3 * 13 + 5 * 13) / 8\n    return A\n\nans = solution()"
    ],
    "64d9c0d96e8b4b6a9b2af8e53a386877": [
        "def solution():\n    salt = 8\n    water = 32\n    total_solution = salt + water\n    concentration = (salt / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "9dd11761e2f946e1aaa0f232e5513538": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_fruit = symbols('total_fruit')\n\n    # Percentage of apples in the original box\n    initial_apples = 4/5 * total_fruit\n    initial_pears = total_fruit - initial_apples\n    \n    # After removing 3/4 of the fruits\n    remaining_fruit = 1/4 * total_fruit\n\n    # There are 1/8 of the apples and 30 pears left\n    remaining_apples = 1/8 * initial_apples\n    remaining_pears = 30\n\n    # Equating the remaining amount of fruit to the sum of remaining apples and pears\n    equation = Eq(remaining_fruit, remaining_apples + remaining_pears)\n\n    # Solve the equation for the total number of fruits initially in the box\n    total_fruit_solution = solve(equation, total_fruit)[0]\n\n    return total_fruit_solution\n\nans = solution()"
    ],
    "8fdba5860ae8459494f40b54d38548a9": [
        "def solution():\n    return 70 / 100 * 40\n\nans = solution()"
    ],
    "3fc4b3f3cb89424db751f420508a1d40": [
        "def solution():\n    cost_pencil = 2\n    cost_pen = 4\n    pencils_for_one_pen = cost_pen / cost_pencil\n    return int(pencils_for_one_pen)\n\nans = solution()"
    ],
    "a1f84fb286e24074ba7396201d611eff": [
        "def solution():\n    litres_to_millilitres = 7.5 * 1000\n    return litres_to_millilitres\n\nans = solution()"
    ],
    "30fd86b9d9a641a881e71dc018c583f4": [
        "def solution():\n    # There are 4 friends, each one sending a card to the rest (3 others).\n    # As each of the 4 friends sends 3 cards, we use multiplication.\n    cards_sent_by_each = 3\n    number_of_friends = 4\n\n    # Total cards sent is simply the number of friends times the number of cards each friend sends.\n    total_cards_sent = number_of_friends * cards_sent_by_each\n\n    return total_cards_sent\n\nans = solution()"
    ],
    "d47c10d6ed9c4e61976326927d0db6ac": [
        "def solution():\n    ans = 18 - 17 + 16 - 15 + 14 - 13\n    return ans\n\nans = solution()"
    ],
    "7fb2dd15b44a432ebf16f80ff0ac18d8": [
        "def solution():\n    count = 0\n    for i in range(1, 829):\n        count += str(i).count('9')\n    return count\n\nans = solution()"
    ],
    "06005d7a51944fbcab3a4f5650bb5d66": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n\n    original_sum = Eq(x + y, 11.63)\n    wrong_sum = Eq(x + (y / 10), 5.87)\n\n    solutions = solve((original_sum, wrong_sum), (x, y))\n\n    difference = abs(solutions[x] - solutions[y])\n\n    return int(100 * difference)\n\nans = solution()"
    ],
    "29f757912336498e89b265d7c3dc2c68": [
        "def solution():\n    ans = sum(i * (i + 1) for i in range(1, 102))\n    return ans\n\nans = solution()"
    ],
    "9a0b6021c3bf41b6bfe3ce63e893970b": [
        "def solution():\n    initial_water = 2\n    jug_capacity = 7\n    jugs_added = 4\n    \n    total_water = initial_water + jug_capacity * jugs_added\n    \n    return total_water\n\nans = solution()"
    ],
    "4d874eded9f6441287acd8ba0029f6bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the amount collected by each friend\n    alan, bilal, chloe, david, emily = symbols('alan bilal chloe david emily')\n\n    # Given conditions\n    equation1 = Eq(alan, 74)\n    equation2 = Eq(bilal, 86)\n    equation3 = Eq(chloe, 2 * david)\n    equation4 = Eq(david, 3 * emily)\n    equation5 = Eq(alan + bilal + chloe + david + emily, 400)\n\n    # Use sympy's solve function to find the values\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "4916026562cd47e283b98f0d0cd4bf19": [
        "def solution():\n    first_period_cookies = 9 * 3\n    second_period_cookies = 15 * 2\n    third_period_cookies = 10 * 2\n    total_days = 3 + 2 + 2\n    total_cookies = first_period_cookies + second_period_cookies + third_period_cookies\n\n    average_cookies_per_day = total_cookies / total_days\n\n    return average_cookies_per_day\n\nans = solution()"
    ],
    "51560f6fe7b14fcdb4bd060c96dbc1a9": [
        "def solution():\n    # Work rate of Candy\n    candy_work_rate = 1 / 20\n    # Work rate of David\n    david_work_rate = 1 / 25\n\n    # Total work done by Candy in 12 days\n    work_done_by_candy = candy_work_rate * 12\n    # Remaining work to be done by David\n    remaining_work = 1 - work_done_by_candy\n\n    # Total days David would take to complete the remaining work alone\n    days_taken_by_david = remaining_work / david_work_rate\n\n    # David's days off = Total days - Actual working days of David\n    days_off = 12 - days_taken_by_david\n\n    return days_off\n\nans = solution()"
    ],
    "7a2a20573729484498268bb992ca72c1": [
        "def solution():\n    # According to Newton's Third Law, the force exerted by the table on the book \n    # will be equal in magnitude and opposite in direction to the force exerted by the book on the table.\n    # Since the book rests on the table, the force exerted by the book is equal to its weight.\n    # Therefore, the force exerted by the table on the book is also 20N, but acting upwards.\n    force_by_table = 20  # in Newtons\n    return force_by_table\n\nans = solution()"
    ],
    "8ef2118cd0cb45d3a3940b6138d4e8da": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    T = symbols('T')  # Representing the unknown additional tax rate\n    \n    # Tax = Tax on first $50,000 + Tax on the remaining $90,000\n    tax_equation = Eq((5 / 100) * 50000 + (8 + T) / 100 * (140000 - 50000), 15100)\n    \n    # Solving for T\n    T_value = solve(tax_equation, T)\n    \n    return T_value[0]\n\nans = solution()"
    ],
    "aa1ba812762546cd8c78bc85ae3a25cc": [
        "def solution(y):\n    return y - 3\n\nans = solution(10)  # Example usage with Lemar being 10 years old"
    ],
    "4a6392aa73ad47e08098f73769dc697c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the total number of fruits be 'x'.\n    x = symbols('x')\n    \n    # Number of apples.\n    apples = (4/5) * x\n    \n    # Number of pears originally.\n    pears = x - apples\n    \n    # Number of fruits removed.\n    fruits_removed = (3/4) * x\n    \n    # Number of fruits left.\n    fruits_left = x - fruits_removed\n    \n    # Number of apples left.\n    apples_left = (1/8) * apples\n    \n    # Equation based on the number of pears left.\n    equation = Eq(pears - (fruits_removed - apples_left), 30)\n    \n    # Solve the equation.\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0f96314625f240a7a0bac5d0d7506fa0": [
        "def solution():\n    # The worst case for Lily to get 6 balls of the same type,\n    # she could take out all basketballs and volleyballs first.\n    # Therefore, we use the Pigeonhole Principle to calculate this.\n    max_basketballs = 9  # Maximum possible number of basketballs\n    max_volleyballs = 3  # Maximum possible number of volleyballs\n\n    # Since she needs to get 6 balls of the same type and there are not enough volleyballs,\n    # we don't have to consider them for the calculation of the worst case scenario.\n    # We just calculate the balls she might take considering the footballs and basketballs.\n    # She needs to take all basketballs and 1 less than the number of footballs she wants.\n    balls_needed = max_basketballs + (6 - 1)\n\n    # Adding the number of volleyballs since she could take all of them without getting 6 of the same type\n    balls_needed += max_volleyballs\n\n    return balls_needed\n\nans = solution()"
    ],
    "936e8db367764ee7ad52e4eed4333f1b": [
        "def solution():\n    time_for_6_cakes = 36\n    number_of_cakes_she_wants_to_make = 10\n    time_per_cake = time_for_6_cakes / 6\n    total_time_for_10_cakes = time_per_cake * number_of_cakes_she_wants_to_make\n    return total_time_for_10_cakes\n\nans = solution()"
    ],
    "a4968c4a62914361ad7a1d205bb1e5b4": [
        "def solution():\n    bill = 40\n    tip_percent = 0.15\n    tax_percent = 0.08\n\n    tip = bill * tip_percent\n    tax = bill * tax_percent\n\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "58ee44d10dd9468d827490e2aa404506": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of pupils and y be the total number of stickers\n    x, y = symbols('x y')\n\n    # If he gives 13 stickers to each pupil, he will have an excess of 190 stickers\n    equation1 = Eq(13 * x + 190, y)\n    # If he gives 17 stickers to each pupil, he will have an excess of 50 stickers\n    equation2 = Eq(17 * x + 50, y)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # The solution for y is the total number of stickers\n    return solutions[y]\n\nans = solution()"
    ],
    "0abf82b202384e50a18c63eb91160283": [
        "def solution():\n    from sympy import symbols, Eq, solve, sqrt\n\n    # Let v be the final velocity of the ball when it strikes the floor.\n    # Use the conservation of energy principle, where initial potential energy equals the final kinetic energy.\n    # Potential Energy (PE) = mass * gravity * height\n    # Kinetic Energy (KE) = 0.5 * mass * velocity^2\n    # Since the ball is gently pushed, initial kinetic energy is 0 and final potential energy is 0\n    # PE_initial + KE_initial = PE_final + KE_final\n    # m * g * h + 0 = 0 + 0.5 * m * v^2\n    # Solve for v.\n\n    g = 9.81  # acceleration due to gravity in m/s^2\n    h = 5.0   # height in meters\n    m = 2     # mass in kg\n\n    # We are not solving a Chicken-Rabbit problem here, but rather using physics to solve for the velocity.\n    # The knowledge point route seems to be misleading in this context.\n    \n    # Initialize symbols\n    v = symbols('v')\n\n    # Create the equation where initial potential energy equals final kinetic energy\n    equation = Eq(m * g * h, 0.5 * m * v**2)\n    \n    # Solve for v\n    solutions = solve(equation, v)\n\n    # As we are interested in the positive root since velocity cannot be negative.\n    v_final = max(solutions)\n\n    return v_final.evalf()\n\nans = solution()"
    ],
    "aaaca6fa5ad944f5b9d50ad2726de809": [
        "import math\n\ndef solution():\n    g = 9.81  # Acceleration due to gravity in m/s^2\n\n    # Initial velocity components\n    v0 = 5  # Initial speed in m/s\n    angle = 45  # Angle in degrees\n    v0x = v0 * math.cos(math.radians(angle))  # Initial horizontal velocity\n    v0y = v0 * math.sin(math.radians(angle))  # Initial vertical velocity\n\n    # Final vertical velocity when the arrow hits the ground\n    # Using the equation vf^2 = v0^2 + 2*a*s, where vf is final velocity, v0 is initial velocity,\n    # a is acceleration and s is displacement.\n    # vf^2 = v0y^2 + 2*g*h, hence vf = sqrt(v0y^2 + 2*g*h)\n    vf_y = math.sqrt(v0y**2 + 2 * g * 30)\n\n    # The horizontal velocity remains constant as there is no horizontal acceleration\n    vf_x = v0x\n\n    # The final speed is the magnitude of the final velocity vector\n    vf = math.sqrt(vf_x**2 + vf_y**2)\n\n    return vf\n\nans = solution()"
    ],
    "f4b67240ff2e4eea856a54877b0f510d": [
        "from math import comb\n\ndef solution():\n    # When each child gets at least one orange, we are effectively dividing\n    # 13 - 3 = 10 oranges into any number of piles (since we can have 0 here).\n    # This is equivalent to finding the number of combinations of placing 2 dividers\n    # in 10 places (since 2 dividers create 3 segments, which represent the 3 kids).\n    # This is the combinations of 12 things taken 2 at a time.\n    \n    num_ways = comb(10 + 3 - 1, 3 - 1)\n    return num_ways\n\nans = solution()"
    ],
    "47ab709ca45c4de2874c7ae5d6b26888": [
        "def solution():\n    for number in range(11, float('inf'), 11):  # start from the smallest number divisible by 11\n        if sum(map(int, str(number))) == 20:    # check if the digit sum equals 20\n            return number\n\nans = solution()"
    ],
    "a36914e472964629805f90180ee32817": [
        "def solution():\n    from itertools import permutations\n\n    # Generate all the possible permutations for the digits 0-9\n    for perm in permutations(range(10), 5):\n        s, a, m, o, g = perm\n        # Make sure S and O are not 0 as they are the first digits of our numbers\n        if s == 0 or o == 0:\n            continue\n        # Form the numbers from the digits\n        sasmo = 10000*s + 1000*a + 100*s + 10*m + o\n        ogams = 10000*o + 1000*g + 100*a + 10*m + s\n        # Check if the condition is satisfied\n        if 4 * sasmo == ogams:\n            return sasmo\n\nans = solution()"
    ],
    "93268f61447f4bc89f03ed35d94d32d2": [
        "def solution():\n    food_options = 2      # sandwiches, burgers\n    drink_options = 3     # coffee, milk, tea\n    dessert_options = 4   # cake, pudding, ice-cream, pie\n\n    total_combinations = food_options * drink_options * dessert_options\n\n    return total_combinations\n\nans = solution()"
    ],
    "7d5b9285020f4096b89f646f6ac6914e": [
        "def solution():\n    ans = 78.16 * 1.45 + 3.14 * 21.84 + 169 * 0.7816\n    return ans\n\nans = solution()"
    ],
    "18e751b89c0f4f688755003c0becbb1a": [
        "def solution():\n    i = 1\n    while True:\n        if (i % 1 == 0) and (i % 2 == 0) and (i % 3 == 0) and (i % 4 == 0) and (i % 5 == 0) and (i % 6 == 0):\n            return i\n        i += 1\n\nans = solution()"
    ],
    "616e7eb6274e4b9f80158e3a237118cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the weight of one elephant, one cow, one horse, and one pig as symbolic variables\n    elephant, cow, horse, pig = symbols('elephant cow horse pig')\n\n    # Given equations:\n    equation1 = Eq(2*elephant, 5*cow)\n    equation2 = Eq(4*cow, 3*horse)\n    equation3 = Eq(3*horse, 5*pig)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (elephant, cow, horse, pig))\n\n    # Calculate the weight of 8 elephants in terms of pigs\n    weight_of_8_elephants = 8 * solutions[elephant]\n    weight_of_pigs = weight_of_8_elephants / solutions[pig]\n\n    return weight_of_pigs\n\nans = solution()"
    ],
    "6f7fe67009984428871104da0134627c": [
        "def solution():\n    initial_water = 2\n    jug_capacity = 7\n    number_of_jugs_added = 4\n\n    total_water_after_adding = initial_water + (jug_capacity * number_of_jugs_added)\n    return total_water_after_adding\n\nans = solution()"
    ],
    "43ef6239d7c44a0183051685a5117a3a": [
        "def solution():\n    total_paid = 2 * 10 + 4 * 2 + 8 * 0.5\n    total_change = 0.40\n    total_spent = total_paid - total_change\n    cost_per_cup = total_spent / 4\n    return cost_per_cup\n\nans = solution()"
    ],
    "a7860a3460d6490f888b36cb3f9823b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables for price per box of mangoes and lychees\n    mangoes_price, lychees_price = symbols('mangoes_price lychees_price')\n    \n    # Create equations based on the problem statement\n    # Equation 1: Price relation between mangoes and lychees boxes\n    eq1 = Eq(lychees_price, 2 * mangoes_price - 6)\n    \n    # Equation 2: The total cost of mangoes and lychees is $1160\n    eq2 = Eq(24 * mangoes_price + 20 * lychees_price, 1160)\n    \n    # Solve the equations\n    solution = solve((eq1, eq2), (mangoes_price, lychees_price))\n    \n    # Get the price per box of lychees\n    lychees_price_per_box = solution[lychees_price]\n    \n    return lychees_price_per_box\n\nans = solution()"
    ],
    "e47957966fd14e6a9af6de7b6554166e": [
        "def solution():\n    result = 0.60 * (2/5) * 75\n    return result\n\nans = solution()"
    ],
    "802ac638436e4b4fa6a0b74f166a9968": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for the days David took off\n    david_off = symbols('david_off')\n\n    # Candy's work rate is 1/20 per day\n    # David's work rate is 1/25 per day\n\n    # Total work done by Candy is 12/20 (since she works for 12 days)\n    # Total work done by David is (12 - david_off)/25 (since he takes some days off)\n    \n    # The equation represents the total work done by Candy and David together\n    equation = Eq(12/20 + (12 - david_off)/25, 1)\n\n    # Solve the equation for the days David took off\n    solutions = solve(equation, david_off)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "7ead04e31502472f99c0ca926b39ba6f": [
        "from math import factorial\n\ndef solution():\n    # We have 6 singing (S) and 4 dancing (D) performances.\n    # Let's first place the 4 D's: D _ D _ D _ D, where _ represents potential positions for S.\n    # We have 5 positions to place 6 S's, but since we need at least 1 S between D's, \n    # we will first place 1 S in each of the 3 gaps between D's: D S D S D S D\n    # Now we have 3 S's left to distribute among 5 positions (including ends).\n    \n    # Calculate the number of ways to distribute 3 indistinguishable S's into 5 distinguishable positions:\n    # This is a problem of combinations with repetitions, calculated using stars and bars method: \n    # C(n + k - 1, k), where n is the number of positions (5) and k is the number of S's (3).\n    # C(n + k - 1, k) = (n + k - 1)! / (k! * (n - 1)!)\n    \n    n = 5  # positions\n    k = 3  # performances left\n    combination_ways = factorial(n + k - 1) // (factorial(k) * factorial(n - 1))\n\n    # Now, we need to arrange these 10 performances (6 S and 4 D as single units),\n    # which is a simple permutation of 10 items: P(10, 10) = 10!\n    # However, as we have multiple identical items (6 S's and 4 D's), we divide by the permutations of these identical items.\n    \n    total_ways = factorial(10) // (factorial(6) * factorial(4))\n    \n    # Finally, the total number of different ways to arrange these performances,\n    # with at least 1 S between every 2 D's, is the product of the two calculations.\n    ans = combination_ways * total_ways\n\n    return ans\n\nans = solution()"
    ],
    "995ae0debbe74e3ca36d61e2bc8db3d4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    T = symbols('T')\n    income = 140000\n    first_tax_bracket = 50000\n    tax_paid = 15100\n    \n    # Tax for the first $50,000\n    first_tax = 0.05 * first_tax_bracket\n    \n    # Remaining income to be taxed at the higher rate\n    remaining_income = income - first_tax_bracket\n    \n    # Total tax equation with T\n    total_tax = Eq(first_tax + remaining_income * (0.08 + T / 100), tax_paid)\n    \n    # Solve for T\n    T_value = solve(total_tax, T)\n    \n    return T_value[0]\n\nans = solution()"
    ],
    "f73e444fccf74dffa657783361eaec4a": [
        "from math import factorial\n\ndef solution():\n    # There are 4 comics and 6 fictions, and they must be kept together.\n    # First, we treat the group of comics as one book and the group of fictions as one book.\n    # So there are 2! ways to arrange the two groups on the shelf.\n\n    groups_arrangement = factorial(2)\n\n    # Then, within each group, we can arrange the comics in 4! ways and the fictions in 6! ways.\n    comics_arrangement = factorial(4)\n    fictions_arrangement = factorial(6)\n\n    # The total number of arrangements is the product of the arrangements of the groups and\n    # the arrangements within each group.\n    total_arrangements = groups_arrangement * comics_arrangement * fictions_arrangement\n\n    return total_arrangements\n\nans = solution()"
    ],
    "58a07f22b6ae4e54bc49c3b1f8bc18b8": [
        "def count_sixes(n):\n    count = 0\n    for i in range(1, n + 1):\n        count += str(i).count('6')\n    return count\n\ndef solution():\n    pages = 1\n    while True:\n        if count_sixes(pages) == 18:\n            break\n        pages += 1\n    return pages\n\nans = solution()"
    ],
    "325dbb02dff7405f9292450c4e4cc0df": [
        "def solution():\n    for dora_correct in range(11):\n        justin_correct = dora_correct + 15/10  # Justin got 15 more points, equivalent to 3 more correct answers\n        dora_points = 10 * dora_correct - 5 * (10 - dora_correct)\n        justin_points = 10 * justin_correct - 5 * (10 - justin_correct)\n        if dora_points + justin_points == 155:\n            return dora_correct\n\nans = solution()"
    ],
    "e09e01d9f1ee46fd9759c4157d7cb3cd": [
        "def solution():\n    # Let x be the average number of candies sold by each group in Class B\n    \n    # Since there are 3 groups in Class A selling 12 candies each on average\n    total_candies_A = 3 * 12\n    \n    # Let the total number of groups for both Class A and Class B be G\n    G = 3 + 4  # 3 groups in Class A and 4 groups in Class B\n    \n    # The average for both classes is 8 candies per group\n    # Therefore, the total candies sold by both classes is G times the average\n    total_candies_AB = G * 8\n    \n    # The total candies sold by Class B will be the total candies of both A and B minus the total candies of A\n    total_candies_B = total_candies_AB - total_candies_A\n    \n    # Since there are 4 groups in Class B, we divide the total candies of B by the number of groups to find the average\n    x = total_candies_B / 4\n    \n    return x\n\nans = solution()"
    ],
    "b46ebbe765bd4ec282a9d4cddc1aaae1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let Lee's work rate be l and Nancy's work rate be n (jobs per hour).\n    l, n = symbols('l n')\n    \n    # Both working together finish in 10 hours.\n    equation1 = Eq(l + n, 1/10)\n    \n    # Lee works for 6 hours, and then Nancy works for 20 hours completes the job.\n    equation2 = Eq(6*l + 20*n, 1)\n    \n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (l, n))\n    \n    # Nancy's time to finish the job is the reciprocal of her work rate.\n    nancy_time = 1 / solutions[n]\n    \n    return nancy_time\n\nans = solution()"
    ],
    "03472dc686454fea90ff512c5ee5c03f": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    coffee_litres = 6\n\n    total_ratio = coffee_ratio + milk_ratio\n    total_liters = (coffee_litres / coffee_ratio) * total_ratio\n\n    return total_liters\n\nans = solution()"
    ],
    "2636ac2e0f8a4fe4b34c78f1070efed0": [
        "def solution():\n    total_string_length = 250\n    used_string_length = 180\n    number_of_shorter_pieces = 10\n    \n    remaining_string_length = total_string_length - used_string_length\n    length_of_each_shorter_piece = remaining_string_length / number_of_shorter_pieces\n\n    return length_of_each_shorter_piece\n\nans = solution()"
    ],
    "edcff11e678a491588a876c850626fd8": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)  # Since 1/3 of the remaining got off, 2/3 are left\n    initial_passengers = remaining_after_first_stop / (1 - 2/5)  # Since 2/5 got off, 3/5 are left at first stop\n\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "558947a4413a469d810b676273f6d771": [
        "def solution():\n    for num in range(1, 20):\n        if num % 4 == 3 and num % 5 == 4:\n            return num\n\nans = solution()"
    ],
    "3eb0547b332f4b4cbda72d04972e652b": [
        "def solution():\n    ans = 45 * 80 / 100\n    return ans\n\nans = solution()"
    ],
    "73eb429b39444b6784a10591bacf3800": [
        "from math import comb\n\ndef solution():\n    flavours = 7\n    doughnuts = 2\n\n    ans = comb(flavours, doughnuts)\n\n    return ans\n\nans = solution()"
    ],
    "bb50e26a7c3b4ac39e82395f0fbd0d95": [
        "from math import gcd\n\ndef solution():\n    return gcd(gcd(6, 9), 18)\n\nans = solution()"
    ],
    "6bf07e1e42d0448f94f431aced05a8af": [
        "from math import comb\n\ndef solution():\n    people = 10\n    handshakes = comb(people, 2)\n    return handshakes\n\nans = solution()"
    ],
    "c6adf9f4ee8d4ab6b37166fa2ee565c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    white, milk, dark = symbols('white milk dark')\n    ratio_white_to_milk_to_dark = Eq(white / milk, 3 / 7)\n    ratio_milk_to_dark = Eq(milk / dark, 7 / 5)\n    dark_white_difference = Eq(dark - white, 8)\n\n    solutions = solve((ratio_white_to_milk_to_dark, ratio_milk_to_dark, dark_white_difference), (white, milk, dark))\n    return solutions[milk]\n\nans = solution()"
    ],
    "938d2bcb3f644872a707547c2058d4a7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_students = symbols('total_students')\n    \n    badminton_boys = 3\n    badminton_fraction = 1/4\n    table_tennis_fraction = 1/3\n    football_students = 25\n    \n    # Equation for badminton students\n    eq1 = Eq(badminton_fraction*total_students + badminton_boys, total_students - (table_tennis_fraction*(total_students - badminton_boys) + 3))\n    \n    # Equation for football students\n    eq2 = Eq(total_students - (badminton_fraction*total_students + badminton_boys) - (table_tennis_fraction*(total_students - (badminton_boys + badminton_fraction*total_students)) - 3), football_students)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (total_students))\n    \n    return solutions[total_students]\n\nans = solution()"
    ],
    "2c9bb3658d544a4ab8fdb08d93091cca": [
        "def solution():\n    # Let x be the number of red balls to add\n    # Total balls will be 5+x (red) + 10 (green) = 15+x (total)\n    # Probability of getting a green ball = 10 / (15+x)\n    # We want the probability to be 1/3, so we set the equation:\n    # 10 / (15+x) = 1/3\n    # Solving for x, we get:\n    # 30 = 15 + x\n    x = 30 - 15\n\n    return x\n\nans = solution()"
    ],
    "fd6b3a86acd14b529b51cdd518e9a4a8": [
        "def solution():\n    # The larger square has a side length of 6 cm\n    side_large_square = 6\n    \n    # The smaller squares have a side length of 3 cm\n    side_small_square = 3\n    \n    # Calculate the number of smaller squares that fit into the larger one\n    # by dividing the area of the large square by the area of a small square\n    num_small_squares = (side_large_square ** 2) // (side_small_square ** 2)\n    \n    return num_small_squares\n\nans = solution()"
    ],
    "e8b01adb4f7d4d8cbff0e3c9d3bc098f": [
        "def solution():\n    meters = 70.24\n    centimeters_per_meter = 100\n    centimeters = meters * centimeters_per_meter\n    return centimeters\n\nans = solution()"
    ],
    "271b87d6fd084f7eaa3b6cae9b7ba2b5": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "44b8a79ef3104647b9810c583a5a4c21": [
        "def solution():\n    spent = 5\n    fraction = 1/4\n    start_money = spent / fraction\n    \n    return start_money\n\nans = solution()"
    ],
    "5371e511c53e4a5f8747fe8e3a5e87ad": [
        "def solution():\n    return 12 * 3 * 50\n\nans = solution()"
    ],
    "6657a223a619480aabc4ab2e4d50e627": [
        "def solution():\n    ans = 81 + 81 / 9 + 110\n    return ans\n\nans = solution()"
    ],
    "a9ff37e5065046b585071011b2edb0c3": [
        "def solution():\n    total_cost = 25 + 10\n    change = 50 - total_cost\n    return change\n\nans = solution()"
    ],
    "c969df7dcbf546bcbc2a769e7568a5df": [
        "def solution():\n    # Calculate the ones digit of each term separately and then subtract\n    ones_digit_32_pow_33 = (32 ** 33) % 10\n    ones_digit_22_pow_29 = (22 ** 29) % 10\n\n    # Find the ones digit of the final result\n    ans = (ones_digit_32_pow_33 - ones_digit_22_pow_29) % 10\n    return ans\n\nans = solution()"
    ],
    "3020fb600b944914a5d9fcd520cae6fd": [
        "def count_sixes(n):\n    count = 0\n    for i in range(1, n + 1):\n        count += str(i).count('6')\n    return count\n\ndef solution():\n    page = 1\n    while True:\n        if count_sixes(page) >= 18:\n            break\n        page += 1\n    return page - 1\n\nans = solution()"
    ],
    "b24dd75457e8421e98afe8366bd50107": [
        "def solution():\n    count = 0\n    # Since every dice has a number from 1 to 6 and all numbers should be different\n    # to get a sum of 12 we need to make sure no number repeats\n    for dice1 in range(1, 7):\n        for dice2 in range(1, 7):\n            for dice3 in range(1, 7):\n                if dice1 != dice2 and dice1 != dice3 and dice2 != dice3:\n                    if dice1 + dice2 + dice3 == 12:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "5fe02e26ce5e42fc93b9699b286adec3": [
        "def solution():\n    fruits = 2\n    vegetables = 3\n    combinations = fruits * vegetables\n    return combinations\n\nans = solution()"
    ],
    "524308c13c044993b5bf5bba992cdbb7": [
        "def solution():\n    ans = 4619 + 457 + 88\n    return ans\n\nans = solution()"
    ],
    "b5f0243f080b48f7ba4d7a62e9120e41": [
        "def solution():\n    # Given Proportion: ? : 81 = 4 : 9\n    # This can be written as: ? / 81 = 4 / 9\n    # Cross-multiplying gives: ? = (81 * 4) / 9\n    \n    missing_number = (81 * 4) / 9\n    return missing_number\n\nans = solution()"
    ],
    "3d6760aa4d044cbc825d82a834e51780": [
        "def solution():\n    total_distance = 40\n    jump_up = 5\n    fall_down = 3\n    jumps_per_cycle = 2\n    net_gain_per_cycle = (jump_up * jumps_per_cycle) - fall_down\n    distance_after_full_cycles = net_gain_per_cycle\n    \n    # Find the number of complete cycles to get close to the top.\n    full_cycles = 0\n    while distance_after_full_cycles < total_distance - jump_up:  # subtract jump_up to account for the final jump\n        full_cycles += 1\n        distance_after_full_cycles += net_gain_per_cycle\n    \n    # Jumps in the complete cycles\n    jumps = full_cycles * jumps_per_cycle\n    \n    # Final jump to reach or exceed the top of the tree\n    remaining_distance = total_distance - distance_after_full_cycles\n    if remaining_distance > 0:\n        jumps += 1\n    \n    return jumps\n\nans = solution()"
    ],
    "7492b9e26fc448699eab170daa00a7e4": [
        "def solution():\n    for i in range(1, 100):\n        if i % 16 == 0 and (i + 1) % 5 == 0 and (i ** 0.5).is_integer():\n            return i\n\nans = solution()"
    ],
    "f68d71c9bc684cafa24d741e381775bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    h = symbols('h')\n    equation = Eq(2 * h, 25 + h)\n    solutions = solve(equation, h)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "3fe260109d4545118d6fa5fb6542ba93": [
        "def solution():\n    total_questions = 80\n    correct_mark = 4\n    incorrect_deduction = -2\n\n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        score = correct_answers * correct_mark + incorrect_answers * incorrect_deduction\n        if score == 152:\n            return correct_answers\n\nans = solution()"
    ],
    "22e56c50744347a3be314d81fcaa4a39": [
        "def solution():\n    ans = sum((n**3) / (n * (n + 1) * (n + 2)) for n in range(1, 2013)) + 1 / 4026\n    return ans\n\nans = solution()"
    ],
    "79173ac47d4446a7a4b25de9f562a87c": [
        "def solution():\n    cans_in_6_days = 42\n    days = 9\n    cans_in_9_days = (cans_in_6_days / 6) * days\n    return cans_in_9_days\n\nans = solution()"
    ],
    "c58f946556534129afb051e96256c03c": [
        "def solution():\n    sausages = 16\n    people = 24\n    # Each person should get 16/24 of a sausage.\n    # In best case scenario, when we cut a sausage, it can be shared among 24 people,\n    # meaning we get 24 pieces from one cut if we line them up all together.\n    # We need to calculate how many times we can do this to cover all 16 sausages.\n\n    # Since 16 is not divisible by 24, we can't get an integer number of pieces from one sausage,\n    # but we can think of it in terms of cutting all 16 sausages at once - in such case each cut\n    # will produce 16 pieces, so we need to make as many cuts as it takes to have a multiple of 24 pieces.\n\n    # In other words, we are looking for the least common multiple (LCM) of 16 and 24,\n    # then divide it by the number of sausages to find out how many cuts we need.\n\n    from math import gcd\n\n    # Least common multiple (LCM) of sausages and people\n    lcm = (sausages * people) // gcd(sausages, people)\n\n    # Since each cut produces 16 pieces (one per sausage), divide the lcm by 16 to get the number of cuts\n    cuts_needed = lcm // sausages\n\n    return cuts_needed\n\nans = solution()"
    ],
    "7b4fffccc9d443f6bae39d698e210c9a": [
        "def solution():\n    possible_numbers = [i for i in range(20) if i % 4 == 3 and i % 5 == 4]\n    return possible_numbers[0]\n\nans = solution()"
    ],
    "b399219fb06d458cbe46dd2b1df7cb15": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the amount of water in Container B\n    x = symbols('x')\n    \n    # Container A has 350 mL more water than Container B\n    A = x + 350\n    \n    # After spilling 500 mL, Container A has A - 500\n    # Container B has twice as much water as Container A after the spill\n    equation = Eq(x, 2 * (A - 500))\n    \n    # Solve for x\n    amount_B = solve(equation, x)\n    \n    # Calculate amount of Container A initially\n    amount_A_at_first = amount_B[0] + 350\n    \n    return amount_A_at_first\n\nans = solution()"
    ],
    "26af7f86bc8d46ac94cf787333d3fd91": [
        "def solution():\n    from math import gcd\n\n    a = 39\n    b = 51\n    c = 147\n    diff_ab = abs(a - b)\n    diff_ac = abs(a - c)\n    diff_bc = abs(b - c)\n\n    # calculating gcd for the differences\n    gcd_ab_ac = gcd(diff_ab, diff_ac)\n    common_divisor = gcd(gcd_ab_ac, diff_bc)\n\n    return common_divisor\n\nans = solution()"
    ],
    "6ba4e21d59274d4aab0481cae22611d3": [
        "from math import factorial\ndef solution():\n    total_letters = len(\"RAINBOW\")\n    total_vowels = len(\"AI\")\n    total_consonants = total_letters - total_vowels\n\n    # Number of ways to arrange all letters\n    total_arrangements = factorial(total_letters)\n\n    # Number of ways to arrange just the vowels\n    vowel_arrangements = factorial(total_vowels)\n\n    # Number of ways to arrange just the consonants\n    consonant_arrangements = factorial(total_consonants)\n\n    # Since there are n+1 possible positions for the vowels around n consonants\n    vowel_positions = total_consonants + 1\n\n    # But vowels can't be together, so subtract cases where vowels are treated as one unit\n    # Total ways where vowels are together: vowel_positions * vowel_arrangements\n    together_arrangements = vowel_positions * vowel_arrangements\n\n    # Subtract the number of invalid combinations where vowels are together from total arrangements\n    ans = total_arrangements - together_arrangements * consonant_arrangements\n\n    return ans\n\nans = solution()"
    ],
    "13c1aaafec5c4eb2a546b2823b7c9da0": [
        "def solution():\n    morning_temp = -5\n    night_temp = 10\n    difference = night_temp - morning_temp\n    return difference\n\nans = solution()"
    ],
    "fa07d0a580554d999b6611baedc3f30f": [
        "def solution():\n    # Assuming the pages start from 1\n    total_digits = 0\n    \n    # Pages 1-9 use 1 digit each: 9 pages\n    total_digits += 1 * 9\n    \n    # Pages 10-99 use 2 digits each: 90 pages\n    total_digits += 2 * (99 - 10 + 1)\n    \n    # Pages 100-325 use 3 digits each: 325 - 100 + 1 pages\n    total_digits += 3 * (325 - 100 + 1)\n    \n    return total_digits\n\nans = solution()"
    ],
    "cf5ba5b483a144138738a1737ed5a419": [
        "def solution():\n    ans = 25 * 123 * 0.4\n    return ans\n\nans = solution()"
    ],
    "fc84e91f2444473ea06eee0510e38067": [
        "def solution():\n    levolle_team_mates = 5\n    sentences_each = 3\n    members_not_spoken_to_levolle = 12\n    \n    # Calculate total sentences spoken by Levolle\n    total_sentences_levolle = levolle_team_mates * sentences_each\n    \n    # Calculate the total sentences spoken inside the team\n    total_sentences_team = total_sentences_levolle + members_not_spoken_to_levolle * sentences_each\n    \n    # Each team member speaks 3 sentences to each other member\n    # The total number of sentences spoken will be 3 times the number of ways to choose 2 people out of the total team size\n    # which is 3 * (team_size choose 2)\n\n    # Let x be the total number of team members\n    # We can set up the equation: 3 * (x choose 2) = total_sentences_team\n    from sympy import symbols, Eq, solve, binomial\n\n    x = symbols('x')\n    eq = Eq(binomial(x, 2) * 3, total_sentences_team)\n    team_size = solve(eq, x)\n\n    # Since we want the number of members it has to be an integer value we take the positive value as number of team members cannot be negative\n    team_size = [s for s in team_size if s.is_integer and s > 0]\n\n    return team_size[0]\n\nans = solution()"
    ],
    "46cef24404be44039ae2dc1b54fadeb2": [
        "def solution():\n    first_week_tickets = 2140\n    second_week_tickets = first_week_tickets - 320\n    third_week_tickets = second_week_tickets - 210\n    \n    total_tickets = first_week_tickets + second_week_tickets + third_week_tickets\n    \n    return total_tickets\n\nans = solution()"
    ],
    "0d3504aeda6446b2821326f127f1ec2d": [
        "def solution():\n    ans = 81 + 81 / 9 + 110\n    return ans\n\nans = solution()"
    ],
    "fdb8c2ece83d4d068bfb7949b80be75f": [
        "def solution():\n    return 58 + 127\n\nans = solution()"
    ],
    "ab88cfc915d14fbb80689295c573dfcb": [
        "def solution():\n    for gums in range(1, 100):  # We can start from 1 and go up to a reasonable number\n        remaining_after_music = gums - 2  # Ate 2 in music lesson\n        shared_at_break = remaining_after_music // 3  # Shared one third\n        if shared_at_break * 3 != remaining_after_music:  # Check if sharing is possible\n            continue\n        remaining_after_break = remaining_after_music - shared_at_break\n        if remaining_after_break % 4 != 0:  # Check if the remaining can be equally divided\n            continue\n        eaten_each_lesson = remaining_after_break // 4\n        if eaten_each_lesson > 0:  # Check that at least one gum is eaten in each lesson\n            return gums\n\nans = solution()"
    ],
    "3330453138ae4958abd914a2a7448912": [
        "def solution():\n    total_pieces = 450\n    average_rate = 50  # pieces per hour\n\n    time_required = total_pieces / average_rate  # hours\n\n    return time_required\n\nans = solution()"
    ],
    "7aa2c65cbce244dcaa12d38ff857c220": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sarah, mark = symbols('sarah mark')\n    \n    equation1 = Eq(sarah, mark + 20)\n    equation2 = Eq(sarah + 16, 3 * mark)\n\n    solutions = solve((equation1, equation2), (sarah, mark))\n\n    return solutions[sarah]\n\nans = solution()"
    ],
    "81087fa894824da4b6c11846677ddcec": [
        "def solution():\n    from math import lcm\n\n    red_flash_rate = 4\n    green_flash_rate = 6\n\n    # Calculate least common multiple of the flash rates\n    flashes_per_minute = lcm(red_flash_rate, green_flash_rate)\n\n    # One hour is 60 minutes, flashes at the same instant = (total time / lcm) + 1 (for the first time)\n    flashes_in_hour = (60 // flashes_per_minute) + 1\n\n    return flashes_in_hour\n\nans = solution()"
    ],
    "36b223a5a83d47b19a34d4a0c5a1649d": [
        "def solution():\n    ans = 17 + 18 + 29 + 6\n    return ans\n\nans = solution()"
    ],
    "308a277543c04ae090ebdf3f5bdc0324": [
        "def solution():\n    ans = (2018 - 20 + 18) / 8\n    return ans\n\nans = solution()"
    ],
    "8f01d238435847a7a31b2925c68c14ab": [
        "def solution():\n    # First chest can be opened in 9 tries at most\n    attempts_for_first_chest = 9\n\n    # Once one key fits the first chest, it's out of the mix\n    # Second chest can be opened in 8 tries at most\n    attempts_for_second_chest = 8\n\n    # Apply similar logic for the third and fourth chests\n    attempts_for_third_chest = 7\n    attempts_for_fourth_chest = 6\n\n    # Sum the maximum attempts for each chest\n    total_attempts = (attempts_for_first_chest +\n                      attempts_for_second_chest +\n                      attempts_for_third_chest +\n                      attempts_for_fourth_chest)\n\n    return total_attempts\n\nans = solution()"
    ],
    "6f69d6a468eb423cb027c930d2635209": [
        "def solution():\n    return 527 * 8\n\nans = solution()"
    ],
    "6e38f6f4ee8843d096766411ae11499d": [
        "def solution():\n    return 2.98 * 23\n\nans = solution()"
    ],
    "ab508b1e2f9a4215994ac2d9ef293ffd": [
        "def solution():\n    # Establish the pattern observed in the given sequence\n    # The sequence increases and decreases by 500 and 200 alternately\n    # Starting from the second term, the sequence decreased by 200 to get the third term\n    # Then increased by 500 to get the fourth term, this suggests a repetitive pattern\n    \n    # The difference between consecutive numbers\n    differences = [500, -200, 500, -200, 500, -200]\n    \n    # Starting number\n    starting_number = 2945\n    \n    # Create the sequence using the established pattern\n    sequence = [starting_number]\n    for diff in differences:\n        next_number = sequence[-1] + diff\n        sequence.append(next_number)\n    \n    # Identify the missing number which is at 5th position (0-indexed 4)\n    missing_number = sequence[4]\n\n    return missing_number\n\nans = solution()"
    ],
    "51e3e0dca7794d3eaec40de5cb8e99fa": [
        "def solution():\n    ans = sum(i**2 for i in range(1, 26, 2))\n    return ans\n\nans = solution()"
    ],
    "c96e5aeffc5c4914b430832baafb7a02": [
        "from math import factorial\n\ndef solution():\n    word = \"EARTH\"\n    unique_letters = len(set(word))\n    \n    if unique_letters == len(word):  # All letters are unique\n        return factorial(len(word))\n    else:\n        counts = {letter: word.count(letter) for letter in set(word)}\n        ans = factorial(len(word))\n        for count in counts.values():\n            ans //= factorial(count)\n        return ans\n\nans = solution()"
    ],
    "17b66351b21c4cb391ca2267e3a54abf": [
        "def solution():\n    for num in range(99, 9, -1):\n        if num % 3 == 0 and num % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "9691b4fae60c4d1e9e827ad0a388037a": [
        "def solution():\n    dividend = 15\n    divisor = 1/7\n    \n    # Division of fractions is equivalent to multiplying the dividend by the reciprocal of the divisor\n    ans = dividend * (7/1)\n    return ans\n\nans = solution()"
    ],
    "8abec5f9b93a4a2eb3f0ab042e5a2ec4": [
        "def solution():\n    x, y = symbols('x y')  # x represents the mushrooms in the first hour, y represents the second hour\n    equation1 = Eq(x + y, 40)  # Total mushrooms gathered in two hours\n    equation2 = Eq(x + 26, y)  # If 26 more mushrooms were gathered in the first hour, they would be equal\n\n    solutions = solve((equation1, equation2), (x, y))\n    return solutions[y]\n\nans = solution()"
    ],
    "36eb6fb5682347a586edc281a6c0df91": [
        "def solution():\n    initial_value = 20000\n    depreciation_rate = 0.1\n    years = 6\n\n    final_value = initial_value * (1 - depreciation_rate) ** years\n\n    return final_value\n\nans = solution()"
    ],
    "fb6a59597d654291bed01b4df12ecc2a": [
        "def solution():\n    coin_diameter = 1.85\n    number_of_coins = 11\n\n    total_length = coin_diameter * (number_of_coins - 1) + coin_diameter\n\n    return total_length\n\nans = solution()"
    ],
    "870378fe08e54c25879633bc63dcfb58": [
        "def solution():\n    first_term = 5\n    second_term = 8\n    num_terms = 14\n    common_difference = second_term - first_term\n\n    last_term = first_term + (num_terms - 1) * common_difference\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "a98be4f6b8d9491eb39649d9e6370466": [
        "def solution():\n    number = 5345\n    round_to_nearest = 100\n\n    ans = round(number / round_to_nearest) * round_to_nearest\n    return ans\n\nans = solution()"
    ],
    "28ab82b7bb864d0cae94f2ab3cd7c918": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    women, men = symbols('women men')\n\n    # equation representing 4 times as many women as men\n    equation1 = Eq(women, 4 * men)\n\n    # equation representing total cupcakes eaten\n    equation2 = Eq(2 * women + 5 * men, 182)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (women, men))\n\n    return solutions[women]\n\nans = solution()"
    ],
    "935623bcdc6a4872838561b5773ef917": [
        "def solution():\n    numerator = 3 * 20 / 12\n    return int(numerator)\n\nans = solution()"
    ],
    "888087113ad04b5893f98edb9c00188d": [
        "def solution():\n    ans = 12 * (15 - 9) + 24 // (10 - 6)\n    return ans\n\nans = solution()"
    ],
    "0e58b9cb1b3b4b438f3c51f0ee11f3f3": [
        "def solution():\n    participants = 10\n    handshakes = participants * (participants - 1) // 2\n\n    return handshakes\n\nans = solution()"
    ],
    "46fe46fdf5be405f973b8d4e6c7447ae": [
        "from math import factorial\n\ndef solution():\n    people = 8\n    # Subtract 1 because in circular permutations, (n-1)! is used\n    arrangements = factorial(people - 1)\n    return arrangements\n\nans = solution()"
    ],
    "ccf6b106f5b54dbc953e3d9d6e9d4019": [
        "def solution():\n    morning_temp = -5\n    night_temp = 10\n\n    temp_difference = night_temp - morning_temp\n\n    return temp_difference\n\nans = solution()"
    ],
    "9223b2da325349b8b26286bfe0d69c61": [
        "def solution():\n    last_digit_of_2_power = pow(2, 2017, 10)  # Last digit of 2^2017\n    last_digit_of_3_power = pow(3, 2017, 10)  # Last digit of 3^2017\n\n    # Last digit of the product\n    last_digit_of_product = (last_digit_of_2_power * last_digit_of_3_power) % 10\n\n    return last_digit_of_product\n\nans = solution()"
    ],
    "3ff6ebc4090643778a1addb47fc34433": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of ants initially in the kitchen\n    x = symbols('x')\n\n    # Jerome sweeps 3/4 of the ants\n    swept_ants = 3/4 * x\n\n    # The remaining ants after sweeping\n    remaining_ants = x - swept_ants\n\n    # 2/5 of the remaining ants ran out\n    ran_ants = 2/5 * remaining_ants\n\n    # The number of ants after some ran away\n    ants_after_ran = remaining_ants - ran_ants\n\n    # 185 hungry ants crawl into the kitchen\n    ants_after_hungry = ants_after_ran + 185\n\n    # The final number of ants is twice the initial\n    equation = Eq(ants_after_hungry, 2 * x)\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "15bb7f3dbdea4fa191d64a8c757e2591": [
        "def solution():\n    sandra_age = 8\n    mother_age = sandra_age + 33\n    difference_2_years_ago = (mother_age - 2) - (sandra_age - 2)\n    return difference_2_years_ago\n\nans = solution()"
    ],
    "c3ccc050c32c44daa5991bb6f2a6ba89": [
        "def solution():\n    return 25 * 123 * 0.4\n\nans = solution()"
    ],
    "218eba99b87c41d18d1865559215bc59": [
        "def solution():\n    book_price = 13\n    books_day1 = 89\n    books_day2 = 11\n\n    total_cost = book_price * (books_day1 + books_day2)\n\n    return total_cost\n\nans = solution()"
    ],
    "adf1208d41db4a14bf12a4808bccc462": [
        "def solution():\n    return 6342 // 7\n\nans = solution()"
    ],
    "1307cafce9d24303b397ab789e178e8a": [
        "def solution():\n    # Let's denote:\n    # a = the first term of the arithmetic progression\n    # d = the common difference of the arithmetic progression\n    \n    # The first four terms of the arithmetic progression are: a, a+d, a+2d, a+3d\n    # The sum of the first four terms is: S_first_four = a + (a+d) + (a+2d) + (a+3d)\n    \n    # The last four terms of the arithmetic progression are: a+4d, a+5d, a+6d, a+7d\n    # The sum of the last four terms is: S_last_four = (a+4d) + (a+5d) + (a+6d) + (a+7d)\n    \n    # According to the condition: S_last_four = S_first_four + 32\n    # Therefore, (a+4d) + (a+5d) + (a+6d) + (a+7d) = a + (a+d) + (a+2d) + (a+3d) + 32\n    # Simplifying the equation we get: 4a + 22d = 4a + 6d + 32\n    # Then, 22d - 6d = 32\n    # Finally, the common difference d is: d = 32 / (22 - 6)\n    \n    d = 32 / (22 - 6)\n    return d\n\nans = solution()"
    ],
    "4ad9c8bc9fdb42738d2d58bfbd0f8c29": [
        "def solution():\n    for gums_initial in range(1, 1000):  # Assuming a realistic number of gums\n        after_music = gums_initial - 2\n        shared_gums = after_music // 3\n        after_break = after_music - shared_gums\n        if after_break % 4 == 0:  # Check if can be equally divided in next 4 lessons\n            return gums_initial\n\nans = solution()"
    ],
    "ec254d781c2b43cfab681f9a4da37327": [
        "def solution():\n    pens_per_friend = 23\n    number_of_friends = 42\n    total_pens = pens_per_friend * number_of_friends\n    return total_pens\n\nans = solution()"
    ],
    "a59e62d9c9954410934bd68af788363b": [
        "def solution():\n    def next_number(number):\n        doubled = number * 2\n        added = doubled + 4\n        if added >= 100:\n            added %= 100  # Remove the hundreds digit if number is 100 or larger\n        return added\n\n    current_number = 1\n    for _ in range(2021):  # We already have the first number, so iterate 2021 more times to reach 2022nd number\n        current_number = next_number(current_number)\n\n    return current_number\n\nans = solution()"
    ],
    "cf24e8570c5f445681de61cc8e392341": [
        "def solution():\n    result = (2018 - 20 + 18) // 8\n    return result\n\nans = solution()"
    ],
    "7dd4045d492549698d37a5863045d780": [
        "def solution():\n    ans = 312 + 9\n    return ans\n\nans = solution()"
    ],
    "a2b3614814354adfabe59be257d8e75b": [
        "def solution():\n    from sympy import isprime\n\n    for a in range(2, 42):\n        if isprime(a):\n            b = (41 - 3 * a) / 7\n            if b.is_integer() and isprime(b):\n                return int(a + b)\n\nans = solution()"
    ],
    "4e46f2beb27349e6aa3f6d1b29e68cab": [
        "def solution():\n    return (4.5 + 10.3) / 2\n\nans = solution()"
    ],
    "0ddb927d100f4ec0b3038de3ef7a76be": [
        "def solution():\n    selling_price = 6500\n    profit_percent = 30\n\n    cost_price = selling_price / (1 + profit_percent / 100)\n\n    desired_profit = 5000\n    new_selling_price = cost_price + desired_profit\n\n    new_profit_percent = (desired_profit / cost_price) * 100\n\n    return new_profit_percent\n\nans = solution()"
    ],
    "2dca95dfad284b9387bbcee7d41b7a7d": [
        "def solution():\n    total_pupils = 20\n    left_handed_pupils = total_pupils / 4\n    not_left_handed_pupils = total_pupils - left_handed_pupils\n    return int(not_left_handed_pupils)\n\nans = solution()"
    ],
    "1e29620d8c1546499923e5051d3708fa": [
        "def solution():\n    total_drink_fraction = 5/5\n    juice_fraction = 2/5  # Because water is 3/5, and total is 1 (juice + water)\n    single_bottle_volume_ml = (120 / juice_fraction)\n    water_per_bottle_ml = single_bottle_volume_ml * (3/5)\n    water_needed_for_6_bottles_ml = water_per_bottle_ml * 6\n\n    return water_needed_for_6_bottles_ml\n\nans = solution()"
    ],
    "ea94212bd8754f72b8001d195d361ee0": [
        "def solution():\n    kg_to_g = 1000\n    n = 8.2 * kg_to_g\n    return n\n\nans = solution()"
    ],
    "51adf37d19ad431c8fff66b81f840b33": [
        "def solution():\n    # A number is divisible by 3 if the sum of its digits is divisible by 3.\n    # A number is divisible by 4 if the number formed by the last two digits is divisible by 4.\n\n    for K in range(10):\n        number = int(f\"5{K}27{K}\")\n        if (5 + K + 2 + 7 + K) % 3 == 0 and int(str(number)[-2:]) % 4 == 0:\n            return K\n\nans = solution()"
    ],
    "fc9c893a6de2407d928994eaaedf78a9": [
        "def solution():\n    ans = 4 * 18 * 25\n    return ans\n\nans = solution()"
    ],
    "f0f847c95e5f466d90b8e462be6ed071": [
        "def solution():\n    simon_speed = 150\n    friend_speed = 200\n    simon_return_speed = simon_speed * 2\n    time_walked = 10\n\n    # Simon's total distance before he turns back\n    simon_distance_before_turn = simon_speed * time_walked\n    # Friend's distance when Simon turns back\n    friend_distance_at_turn = friend_speed * time_walked\n\n    # Time taken for Simon to return to school\n    time_to_return = simon_distance_before_turn / simon_return_speed\n\n    # Friend's additional distance while Simon returns\n    friend_additional_distance = friend_speed * time_to_return\n\n    # Total distance friend is from school\n    total_friend_distance = friend_distance_at_turn + friend_additional_distance\n\n    ans = total_friend_distance\n    return ans\n\nans = solution()"
    ],
    "3bd51f5982c940ddbbde362e9af86b8e": [
        "def solution():\n    profit_first_sale = 20 - 10\n    profit_second_sale = 40 - 30\n    total_profit = profit_first_sale + profit_second_sale\n    return total_profit\n\nans = solution()"
    ],
    "32cddd410fc54087979e0acde6f71066": [
        "def solution():\n    from math import factorial\n\n    # There are 7 decorations in total\n    total_decorations = 7\n    \n    # There are two identical bells, two identical stars, two identical red balls\n    # So we divide the total permutations by the permutations of these identical items\n    identical_bells = 2\n    identical_stars = 2\n    identical_red_balls = 2\n\n    ways = factorial(total_decorations) // (factorial(identical_bells) * factorial(identical_stars) * factorial(identical_red_balls))\n    return ways\n\nans = solution()"
    ],
    "1664d9ce104d45fd8be662f12fc279a0": [
        "def solution():\n    # Fastest two go first (Eddie and Jack), Eddie returns: 2 + 1 = 3\n    # Slowest two go (Rose and Mary), Jack returns: 10 + 2 = 12\n    # Fastest two go again (Eddie and Jack): 2\n    # Total time = 3 + 12 + 2 = 17 minutes\n    return 17\n\nans = solution()"
    ],
    "2a228cd17f4e409e9bc77a0ccc4c9809": [
        "def solution():\n    water_dispenser_capacity = 5  # in litres\n    container_size_ratio = 0.25\n    cup_volume_ml = 150  # in milliliters\n    cups = 14\n\n    # Convert cups volume to litres (1 litre = 1000 milliliters)\n    cups_volume_litres = (cup_volume_ml * cups) / 1000\n\n    # Calculate the volume of the other container\n    container_volume_litres = water_dispenser_capacity * container_size_ratio\n\n    # Calculate the remaining water in the water dispenser\n    remaining_water = water_dispenser_capacity - (container_volume_litres + cups_volume_litres)\n\n    return remaining_water\n\nans = solution()"
    ],
    "fa00622124e242f3b8c0fe92c2d39c73": [
        "def solution():\n    def factorial(n):\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n * factorial(n - 1)\n\n    def derangement(n):\n        # Base cases\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            # Recursive formula: !n = (n-1)(!(n-1) + !(n-2))\n            return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n\n    total_ways = derangement(7)  # Calculate the derangement of 7\n    return total_ways\n\n\nans = solution()"
    ],
    "6433bb0ce3b84294a9f9739ddd7a9ca5": [
        "def solution():\n    for x in range(10):\n        for y in range(10):\n            candidate = int(f\"2{x}{y}335\")\n            if candidate % 99 == 0:\n                return candidate\n\nans = solution()"
    ],
    "02456ecae03a47dab61beed2cc4c0b15": [
        "def solution():\n    n = max([i for i in range(1, 100) if i % 7 == 0])\n    return n\n\nans = solution()"
    ],
    "3adf2f6e8afc4a6ca82c84688afc78b5": [
        "def solution():\n    harry_time = 24\n    harry_speed_ratio = 3\n    ginny_speed_ratio = 4\n\n    ginny_time = (harry_time / harry_speed_ratio) * ginny_speed_ratio\n\n    return int(ginny_time)\n\nans = solution()"
    ],
    "bd690baeb49d4336869943efade96813": [
        "def solution():\n    ans = 5 / (1/4)\n    return ans\n\nans = solution()"
    ],
    "5fa23afcf49349ac9cd5d88b0ce77585": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of pages Anny writes per day in the original rate as 'x'.\n    x = symbols('x')\n    # In original rate she finishes her homework in 8 days.\n    orig_time = 8\n    # If she writes 2 more pages per day, she finishes 2 days earlier.\n    new_time = orig_time - 2\n\n    # Equation based on original rate: x * 8 days\n    # Equation based on new rate: (x + 2) * 6 days\n    # Both should be equal as they represent the total number of pages in her homework.\n    equation = Eq(x * orig_time, (x + 2) * new_time)\n\n    # We solve for x to find the number of pages she writes per day in the original rate\n    x_solution = solve(equation, x)[0]\n\n    # Therefore, the total number of pages of homework is:\n    total_pages = x_solution * orig_time\n\n    return total_pages\n\nans = solution()"
    ],
    "244f808ad1cc4d13a675289a3ecd9a1a": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "c6905843d5c84d1896ee600c07cec573": [
        "def solution():\n    # Pip's rate in loaves per minute\n    pip_rate = 5 / 20\n    \n    # Bud's rate in loaves per minute\n    bud_rate = 3 / 15\n    \n    # Total time in minutes\n    total_time = 40\n    \n    # Total loaves baked by Pip in 40 minutes\n    pip_loaves = pip_rate * total_time\n    \n    # Total loaves baked by Bud in 40 minutes\n    bud_loaves = bud_rate * total_time\n    \n    # The total number of loaves baked in 40 minutes\n    total_loaves = pip_loaves + bud_loaves\n    \n    return int(total_loaves)\n\nans = solution()"
    ],
    "0555563c570c465e86a95b3ddf408f78": [
        "def solution():\n    ans = 828 // 9\n    return ans\n\nans = solution()"
    ],
    "09b093e35e3d45d0b688e30cc6a0ba76": [
        "def solution():\n    # Let's denote the original price of the house as 'x'.\n    # After a 10% increase in the first year, the value is x + x * 0.10 = x * 1.10\n    # x * 1.10 = 11000 pounds (as given in the question)\n    # Let's solve for x, the original value of the house.\n    original_value_first_year = 11000\n    increase_percentage_first_year = 1.10\n    original_value = original_value_first_year / increase_percentage_first_year\n\n    # In the second year, the house loses 10% of its value.\n    decrease_percentage_second_year = 0.90\n    value_after_second_year = original_value * decrease_percentage_second_year\n\n    # The loss after the second year compared with the original price is\n    # the original price minus the value after the second year.\n    loss = original_value - value_after_second_year\n\n    return loss\n\nans = solution()"
    ],
    "bf44fa7967fe492d97b8a311fafdfaee": [
        "def solution():\n    # Yohan must pick 21 socks to guarantee a pair of white socks.\n    # Because in the worst case, he picks 10 red and 10 black socks first.\n    # On the 21st pick, he must pick a white sock, which will form a pair with at least one white sock already picked.\n    return 21\n\nans = solution()"
    ],
    "b5a825d4f853436bb277e7f3866639d2": [
        "def solution():\n    pens_per_friend = 23\n    number_of_friends = 42\n\n    total_pens = pens_per_friend * number_of_friends\n\n    return total_pens\n\nans = solution()"
    ],
    "fc738668235447c79203dcca2ce2a678": [
        "def solution():\n    d = 1  # Represent the algebraic variable d with an arbitrary value.\n    ans = (6 * d) + (5 * d) - d\n    return ans\n\nans = solution()"
    ],
    "084167b934b34115b89c8d9ae9a3b4a2": [
        "def solution():\n    ans = 193 * 72\n    return ans\n\nans = solution()"
    ],
    "ceff5d5955364eabbd46a62f98797a05": [
        "def solution():\n    # accumulate the counts of the numbers to determine the middle position\n    counts = [(i-1)+3 for i in range(1, 10)]\n    total_numbers = sum(counts)\n    \n    # the position of the median depends on if the total numbers are odd or even\n    if total_numbers % 2 == 0:\n        median_pos = total_numbers // 2\n        median_pos_next = median_pos + 1\n    else:\n        median_pos = median_pos_next = (total_numbers + 1) // 2\n\n    # find the number at the median position\n    counter = 0\n    for i, count in enumerate(counts, start=1):\n        counter += count\n        if median_pos <= counter:\n            median = i\n            break\n\n    return median\n\nans = solution()"
    ],
    "b90de1565c844c2d97a4ccdcf12c2aac": [
        "def solution():\n    return 312 + 9\n\nans = solution()"
    ],
    "12bef96eae3c41e78b2c7c959b7cb247": [
        "def solution():\n    n = 13\n    while n <= 50:\n        n += 13\n    return n\n\nans = solution()"
    ],
    "06cae666e4524e0780eed7ff941bb6a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r = initial red marbles, w = initial white marbles\n    # p = marbles added by Pip, b = marbles added by Bud\n    r, w, p, b = symbols('r w p b', integer=True)\n\n    # Initial ratio of red to white marbles\n    equation1 = Eq(r/w, 3/2)\n\n    # After Pip added p red marbles\n    equation2 = Eq((r+p)/w, 5/3)\n\n    # After Bud added b white marbles\n    equation3 = Eq((r+p)/(w+b), 5/4)\n\n    # Bud adds 100 more marbles than Pip\n    equation4 = Eq(b, p + 100)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (r, w, p, b))\n\n    return solutions[w]\n\nans = solution()"
    ],
    "d6e7284ab38c41e8ade59a5718682ded": [
        "def solution():\n    profit_percentage_initial = 30  # Given profit percentage\n    sale_price = 6500  # Given sale price\n    cost_price = sale_price / ((100 + profit_percentage_initial) / 100)  # Calculate cost price from the profit percentage and sale price\n    desired_profit = 5000  # Given desired profit\n\n    # Calculate desired sale price from cost price and desired profit\n    desired_sale_price = cost_price + desired_profit\n\n    # Calculate desired profit percentage from cost price and desired sale price\n    desired_profit_percentage = ((desired_sale_price - cost_price) / cost_price) * 100\n    \n    return desired_profit_percentage\n\nans = solution()"
    ],
    "d782b43878bb4cf1bafe5b83f82438e2": [
        "def solution():\n    total_pupils = 20\n    left_handed = total_pupils / 4\n    not_left_handed = total_pupils - left_handed\n    return int(not_left_handed)\n\nans = solution()"
    ],
    "9034744a6a62443fa56a651ca2584ee4": [
        "def solution():\n    total_flour = 40\n    packets = 25\n    flour_per_packet = total_flour / packets\n    return flour_per_packet\n\nans = solution()"
    ],
    "1a3522fba8a14fd7bb05a7ed2ce9622e": [
        "def solution():\n    for K in range(10):\n        number = int(f'5{K}27{K}')\n        if number % 3 == 0 and number % 4 == 0:\n            return K\n\nans = solution()"
    ],
    "a63989af68494194bfb53a854e3665ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let c represent the number of cookies and b represent the number of brownies.\n    c, b = symbols('c b')\n\n    # The given ratio for cookies to brownies before giving away brownies is 4:3.\n    eq1 = Eq(c / b, 4 / 3)\n\n    # After giving away 6 brownies, the ratio of cookies to remaining brownies is 12:7.\n    eq2 = Eq(c / (b - 6), 12 / 7)\n\n    # Solve the system of equations.\n    solutions = solve((eq1, eq2), (c, b))\n\n    # Calculate the total number of cookies and brownies baked altogether.\n    return solutions[c] + solutions[b]\n\nans = solution()"
    ],
    "f4fc1897652e40b78918728180071644": [
        "def solution():\n    # Number of construction companies in the original scenario\n    original_companies = 4\n    # Length of expressway in the original scenario in meters\n    original_length = 900\n    # Days taken by original number of companies to build the original length expressway\n    original_days = 5\n\n    # Number of construction companies in the new scenario\n    new_companies = 6\n    # Length of expressway in the new scenario in meters\n    new_length = 5400\n    \n    # Calculate work rate for original scenario: work done per company per day\n    original_work_rate = original_length / (original_companies * original_days)\n    \n    # Assuming work rate of companies remains constant, calculate days needed for the new scenario\n    new_days = new_length / (new_companies * original_work_rate)\n\n    return new_days\n\nans = solution()"
    ],
    "02ba9287f10746898f97cec009cbf38a": [
        "def solution():\n    buy1 = 10\n    sell1 = 20\n    buy2 = 30\n    sell2 = 40\n\n    profit1 = sell1 - buy1\n    profit2 = sell2 - buy2\n\n    total_profit = profit1 + profit2\n\n    return total_profit\n\nans = solution()"
    ],
    "ac5436a25e0442f2a16bce013c5fb452": [
        "def solution():\n    adam_spent = 93\n    adam_tickets = 6\n    claire_spent = 124\n\n    price_per_ticket = adam_spent / adam_tickets\n    claire_tickets = claire_spent / price_per_ticket\n\n    return int(claire_tickets)\n\nans = solution()"
    ],
    "3ed7b46e44cc4f75b5c4f2b2c79caf4e": [
        "def solution():\n    tenth_term = 31\n    common_difference = 28 - 25\n    n = 10\n\n    first_term = tenth_term - common_difference * (n - 1)\n\n    return first_term\n\nans = solution()"
    ],
    "f3712fb16f9f469bab602738d8fc9cc5": [
        "def solution():\n    max_sum_player_one = 23\n    total_sum = sum(range(1, 9))  # Total sum of all cards from 1 to 8\n    max_sum_player_two = total_sum - max_sum_player_one\n\n    cards = list(range(1, 9))\n    possible_highest_cards = []\n    for card in cards:\n        if card <= max_sum_player_two:\n            possible_highest_cards.append(card)\n\n    return max(possible_highest_cards)\n\nans = solution()"
    ],
    "49021dd3aa7f4c03a9353bfc19e4a911": [
        "def solution():\n    total_shoes = 9 * 2  # Total number of shoes, 9 pairs multiplied by 2 sides\n    time_per_shoe = 2    # Time taken by one cobbler to clean one shoe\n    cobblers = 2         # Number of cobblers\n    # Total time taken is the time to clean all shoes divided by the number of cobblers\n    total_time = (total_shoes * time_per_shoe) / cobblers\n    return total_time\n\nans = solution()"
    ],
    "a978c7f92cdf44f1942f967781ad3207": [
        "def solution():\n    ans = sum(i**2 * (21 - i) for i in range(1, 21))\n    return ans\n\nans = solution()"
    ],
    "a77bd217c8b244528cdb996bbf73a46b": [
        "def solution():\n    total_cookies = 118\n    cookies_per_packet = 7\n\n    packets_needed = (total_cookies + cookies_per_packet - 1) // cookies_per_packet\n\n    return packets_needed\n\nans = solution()"
    ],
    "7039740729c84c8b8342e7002a2ca25f": [
        "def solution():\n    numerator = 2019 + 2018 * 2020\n    denominator = 2019 * 2020 - 1\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "54675caae3be46bdbb99950ef3e25cf4": [
        "def solution():\n    total_questions = 50\n    not_attempted = 3\n    total_score = 168\n\n    # Each correct answer gives 4 marks, each wrong answer subtracts 1 mark\n    # Let x be the number of correct answers\n    # Total answered questions = total_questions - not_attempted\n    # Total score from correct answers: x * 4\n    # Total score from wrong answers: (total_questions - not_attempted - x) * (-1)\n    # The equation is: 4*x - (total_questions - not_attempted - x) = total_score\n\n    # Solving for x\n    x = (total_score + total_questions - not_attempted) / 5\n\n    return int(x)\n\nans = solution()"
    ],
    "83a40f2b75d945d99e8db96a35ed071c": [
        "from math import comb\n\ndef solution():\n    num_players = 6\n    handshakes = comb(num_players, 2)\n    return handshakes\n\nans = solution()"
    ],
    "77bd08c2a453492a87c56b21199104f7": [
        "def solution():\n    total_dumplings = 17 + 11\n    each_should_have = total_dumplings // 2\n    luna_gives = 17 - each_should_have\n    return luna_gives\n\nans = solution()"
    ],
    "2b1da842ccca44b1832de397d53e2758": [
        "def solution():\n    return 8102 - 2018\n\nans = solution()"
    ],
    "e99a2fad50b8447bb1d94893b6d71077": [
        "def solution():\n    sum_odd = sum(range(1, 20, 2))\n    return sum_odd\n\nans = solution()"
    ],
    "2963cf233b46447fb5c825b6196c2767": [
        "def solution():\n    return 14 * 7 * 2\n\nans = solution()"
    ],
    "79ee6ea187d04728affd0de95d4a7018": [
        "def solution():\n    from itertools import permutations\n\n    for perm in permutations(range(10), 5):\n        B, D, E, C = perm[0], perm[1], perm[2], perm[3]\n        if B == 0:  # Skip if the number starts with zero\n            continue\n        CBCD = C * 1001 + B * 100 + D * 10\n        CDBC = C * 1000 + D * 100 + B * 10 + C\n        BDEC = B * 1000 + D * 100 + E * 10 + C\n        \n        if CBCD + CDBC == BDEC:\n            return BDEC\n\nans = solution()"
    ],
    "fa8616efa25d4f8299991f1f8407ebf5": [
        "def solution():\n    # The increment in value after the first year is 10%, making the value 110% of the original.\n    # We know that this value was 11,000, which is 10% more than the original. Therefore, 10% is 11,000.\n    ten_percent_value = 11000\n    \n    # Calculating the original price: 100% value.\n    original_price = ten_percent_value / 0.10\n\n    # After one year, the value is 110% of the original price.\n    value_after_one_year = original_price * 1.10\n\n    # The house loses 10% of its value again in the second year, i.e., it becomes 90% of the value after one year.\n    value_after_two_years = value_after_one_year * 0.90\n\n    # Finally, the profit or loss is given by the final value minus the original price.\n    profit_or_loss = value_after_two_years - original_price\n\n    return profit_or_loss\n\nans = solution()"
    ],
    "b8daef005cc44c47badd2aa9cc85b532": [
        "def solution():\n    spent = 10  # 10p that Avril spent\n    fraction_spent = 1 / 4  # one-quarter\n    initial_amount = spent / fraction_spent  # calculate initial amount\n\n    return initial_amount\n\nans = solution()"
    ],
    "eeede3cca47a4853803fb6e1834b3f28": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "69645c35c8a9498f96d6bd29db22e3cd": [
        "def solution():\n    dresses_per_day_per_seamstress = 2\n    seamstresses = 2\n    days = 9\n\n    total_dresses = dresses_per_day_per_seamstress * seamstresses * days\n\n    return total_dresses\n\nans = solution()"
    ],
    "ddadda8c0ee24b048475b1ed01e97866": [
        "def solution():\n    ans = 77.5 * (52 / 100) + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "0f973003177e403a90be16bda5983322": [
        "from math import factorial\n\ndef solution():\n    # The word 'CHALLENGE' without vowels 'AE'\n    consonants = 'CHLLNG'\n    \n    # Number of ways to arrange consonants 'CHLLNG'\n    consonants_arrangements = factorial(len(consonants)) // (factorial(2))  # 'L' is repeated twice\n\n    # Treat the vowels 'AE' as a single entity since they must be together, adding 'V' to represent vowels.\n    all_characters = consonants + 'V'\n\n    # Number of ways to arrange all characters including the single entity 'V'\n    characters_arrangements = factorial(len(all_characters))\n    \n    # Number of ways to arrange the vowels 'AE' within the single entity 'V'\n    vowels_arrangements = factorial(3) // (factorial(2))  # 'E' is repeated twice\n\n    # Total arrangements is the product of arrangements of all characters and internal arrangements of entity 'V'\n    total_arrangements = characters_arrangements * vowels_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "ab2b472b178c42e1be0cb06a1e3c1731": [
        "def solution():\n    n = 52  # Start with the smallest number greater than 50\n    while True:\n        if n % 13 == 0:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "5382dfa2d3874f6fb2d80352fe7491cf": [
        "def solution():\n    carrot_cake_total = 4 * 5\n    cheesecake_total = 1 * 10\n    chocolate_cake_total = 5 * 12\n\n    total_cake_count = 4 + 1 + 5\n    total_revenue = carrot_cake_total + cheesecake_total + chocolate_cake_total\n\n    average_selling_price = total_revenue / total_cake_count\n\n    return average_selling_price\n\nans = solution()"
    ],
    "7d6b5eb612604e62842cf23e7effa510": [
        "def solution():\n    total_cost = 104.10\n    number_of_people = 6\n\n    cost_per_person = total_cost / number_of_people\n\n    return cost_per_person\n\nans = solution()"
    ],
    "f87d0f3c9c544ecc84257dfd2c08ff82": [
        "def solution():\n    # Calculate total spending in each period\n    jan_to_mar = 3 * 450\n    apr_to_jul = 4 * 350\n    aug_to_oct = 1250\n    nov_to_dec = 2 * 400\n    \n    # Calculate total spending for the year\n    total_spending = jan_to_mar + apr_to_jul + aug_to_oct + nov_to_dec\n    \n    # Calculate average per month from January to December\n    average_per_month = total_spending / 12\n    \n    return average_per_month\n\nans = solution()"
    ],
    "08152a7dda6848a09cff15a407c5e8c7": [
        "def solution():\n    remainder = 7\n    # Start with the smallest possible divisor which is equal to the quotient (which is 1)\n    # Increment divisor and quotient by 1 since they are equal and loop to find the smallest dividend that meets the condition\n    divisor = 1\n    while True:\n        quotient = divisor\n        dividend = divisor * quotient + remainder  # based on the division formula: Dividend = Divisor * Quotient + Remainder\n        if dividend % divisor == remainder:\n            return dividend\n        divisor += 1\n\nans = solution()"
    ],
    "cd83fc2a714c467082ec8c0821d5ca86": [
        "def solution():\n    return 2 * 25 * 123\n\nans = solution()"
    ],
    "172e8369614e4791ae4f2791ae3d9b80": [
        "def solution():\n    ans = 143 + 22 + 157\n    return ans\n\nans = solution()"
    ],
    "45d5eb20e04045f59025c5f269819d6d": [
        "def solution():\n    initial_value = 50000\n    depreciation_rate = 0.15\n    years = 2\n\n    value_after_years = initial_value * ((1 - depreciation_rate) ** years)\n\n    return value_after_years\n\nans = solution()"
    ],
    "b2352f675fd94fd2aa06d2b9fd4f2ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cars, bikes, lorries = symbols('cars bikes lorries', integer=True)\n\n    equation1 = Eq(cars, 4/3 * bikes)\n    equation2 = Eq(bikes, lorries + lorries/4)\n    equation3 = Eq(cars + bikes + lorries % 2, 0)\n\n    # Since we know the total is an even number and less than 100,\n    # Iterate over possible even total numbers and solve the system\n    for total in range(2, 100, 2):\n        equation4 = Eq(cars + bikes + lorries, total)\n        solutions = solve((equation1, equation2, equation3, equation4), (cars, bikes, lorries))\n        if solutions and all(val.is_positive for val in solutions.values()):\n            return solutions\n\nans = solution()"
    ],
    "9addac3e46e44e54a72dccaf472b32a3": [
        "def solution():\n    ans = 2014 + 998\n    return ans\n\nans = solution()"
    ],
    "bd1ac5cdb71d4b9895407f5f400fb9e6": [
        "def solution():\n    p = 1\n    cube_root = int(245 ** (1/3))\n    \n    while (245 * p) % (cube_root ** 3) != 0:\n        p += 1\n    \n    return p\n\nans = solution()"
    ],
    "74584a19c48347f89526c8b68de4bad8": [
        "def solution():\n    total_pages = 600\n    pages_per_day = 20\n    \n    days_needed = total_pages / pages_per_day\n    \n    return int(days_needed) if days_needed.is_integer() else int(days_needed) + 1\n\nans = solution()"
    ],
    "6e011ddf528c41a2841e18229bc4ef7a": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "64fc79ccfc074918a3acf3065f946315": [
        "def solution():\n    visitors_per_minute = 10\n    check_in_per_entrance_per_minute = 25\n    \n    # Single entrance scenario\n    single_entrance = 1\n    single_entrance_no_line_time = 16\n    \n    # Calculate how many visitors were in line after 16 min without entrances\n    visitors_in_line = visitors_per_minute * single_entrance_no_line_time\n    \n    # Calculate how many visitors can be checked in by a single entrance in 16 min\n    visitors_checked_in_by_one_entrance = check_in_per_entrance_per_minute * single_entrance_no_line_time * single_entrance\n    \n    # Calculate how many visitors would be checked in by two entrances in the same time\n    visitors_checked_in_by_two_entrances = check_in_per_entrance_per_minute * single_entrance_no_line_time * 2\n\n    # If there are two entrances, they can check in more visitors than there are in line in 16 min\n    # Find the time when the number of visitors checked in equals the number of visitors in line\n    two_entrances_no_line_time = visitors_in_line / (check_in_per_entrance_per_minute * 2)\n    \n    return two_entrances_no_line_time\n\nans = solution()"
    ],
    "825ebd9e4b2e4171951ba63f6748b0ed": [
        "def solution():\n    ans = 6**2 - 4**2\n    return ans\n\nans = solution()"
    ],
    "d6ee9c6fc34d4dcc804163dd5f791636": [
        "def solution():\n    ans = 2014 + 998\n    return ans\n\nans = solution()"
    ],
    "9b8fa831793640388f99903b6da9cfa0": [
        "def solution():\n    shermaine_rulers = 142\n    elvis_rulers = shermaine_rulers + 157\n    claudia_rulers = elvis_rulers + 202\n    total_rulers = shermaine_rulers + elvis_rulers + claudia_rulers\n\n    return total_rulers\n\nans = solution()"
    ],
    "73720d8a53844a81a014f335f06e561a": [
        "def solution():\n    initial_money = 100\n    spent_on_book = 0.1 * initial_money\n    money_left_after_book = initial_money - spent_on_book\n    spent_on_dvd = 0.2 * money_left_after_book\n    final_money_left = money_left_after_book - spent_on_dvd\n    return final_money_left\n\nans = solution()"
    ],
    "e76a8423b47d4b808a5aeadbbdc02127": [
        "def solution():\n    decimal_part = '3' * 1000  # '3' repeating for the first 1000 digits\n    sum_of_digits = sum(int(digit) for digit in decimal_part)\n    return sum_of_digits\n\nans = solution()"
    ],
    "babb3e967e7b4903b754afff7e3ac9af": [
        "def solution():\n    final_number = 34\n    added_number = 12\n\n    original_number = (final_number - added_number) / 2\n\n    return original_number\n\nans = solution()"
    ],
    "9223e7ed5d434394b8c1269d1e768459": [
        "def solution():\n    final_number = 34\n    added_number = 12\n    original_number = (final_number - added_number) / 2\n    return original_number\n\nans = solution()"
    ],
    "1488e869ebdf483eb9bb096cb73b1708": [
        "def solution():\n    scores = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "fd64eed080d74099adc2ffa22714239d": [
        "def solution():\n    result = 8102 - 2018\n    return result\n\nans = solution()"
    ],
    "5731ad5e696643829195d329db479a6b": [
        "def solution():\n    original_price = 80\n    discount_percentage = 10 / 100\n    discount_amount = original_price * discount_percentage\n    final_price = original_price - discount_amount\n    return final_price\n\nans = solution()"
    ],
    "2d4a6c8599b4492b9b95d9d9b87446d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges, lemons = symbols('oranges lemons')\n    \n    # Original ratio equation\n    original_ratio = Eq(oranges / lemons, 3/5)\n    \n    # After selling oranges, new ratio equation\n    new_ratio = Eq((oranges - 48) / lemons, 1/2)\n    \n    # Solve the system of equations\n    solutions = solve((original_ratio, new_ratio), (oranges, lemons))\n\n    return solutions[lemons]\n\nans = solution()"
    ],
    "dcae38ac969c4a158f8f8806395f093f": [
        "def solution():\n    burgers = 2\n    sides = 3\n    drinks = 5\n    \n    combos = burgers * sides * drinks\n    \n    return combos\n\nans = solution()"
    ],
    "4e9945e556e74ffe91cb3030ad37baae": [
        "def solution():\n    choices = 3  # each student chooses 1 type, 2 types, or all 3 types\n    # We consider the combinations: A, B, C, AB, AC, BC, ABC\n    # There are 7 combinations, so we need 8 students to ensure the pigeonhole principle applies\n    students_needed = 7 + 1  # 7 choices plus 1 to ensure a match\n\n    return students_needed\n\nans = solution()"
    ],
    "d6816432b29549ef83897c88e2df4bca": [
        "def solution():\n    spent_amount = 10\n    fraction_spent = 1 / 4\n    initial_amount = spent_amount / fraction_spent\n    return initial_amount\n\nans = solution()"
    ],
    "6af40f0ef07e4f66810e88983de37cf0": [
        "def solution():\n    # Total number of legs for the ducks, parrots, and rabbit\n    legs_from_known_animals = 3 * 2 + 2 * 2 + 1 * 4\n    \n    # Remaining number of legs, which belong to the cats\n    remaining_legs = 32 - legs_from_known_animals\n    \n    # Since cats have 4 legs, divide the remaining legs by 4 to find the number of cats\n    num_cats = remaining_legs // 4\n    \n    return num_cats\n\nans = solution()"
    ],
    "74abfc1f309c4e35ab04f1a1d6695900": [
        "def solution():\n    ans = 818 - 271 - 18 + 64 - 29 + 36\n    return ans\n\nans = solution()"
    ],
    "5512327e08b64371a00550b6d22306bd": [
        "def solution():\n    from math import gcd\n\n    num_students_A = 45\n    num_students_B = 75\n    num_students_C = 210\n\n    gcd_AB = gcd(num_students_A, num_students_B)\n    gcd_ABC = gcd(gcd_AB, num_students_C)\n\n    return gcd_ABC\n\nans = solution()"
    ],
    "d6c279a7a7694686a1864a5bf68f39e6": [
        "def solution():\n    from math import comb\n    num_teams = 11\n    num_matches = comb(num_teams, 2)\n    return num_matches\n\nans = solution()"
    ],
    "30a048071a8e4db6b6628b18c39b3e8f": [
        "def solution():\n    ans = 818 - 271 - 18 + 64 - 29 + 36\n    return ans\n\nans = solution()"
    ],
    "ca8974b0e2b446cfbbdf59c9fa10f48f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables\n    judy, father = symbols('judy father')\n    years_ago = symbols('years_ago')\n\n    # Judy's father is 33 years older than her\n    equation1 = Eq(father, judy + 33)\n    # This year, the sum of their ages is 63 years old\n    equation2 = Eq(judy + father, 63)\n    # Years ago, father's age was four times Judy's age\n    equation3 = Eq(father - years_ago, 4 * (judy - years_ago))\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (judy, father, years_ago))\n\n    return solutions[years_ago]\n\nans = solution()"
    ],
    "10e0e482b8824984872affe8ce1e0490": [
        "def solution():\n    # define the least common multiple function\n    def lcm(x, y):\n        from math import gcd\n        return x * y // gcd(x, y)\n    \n    # find the least common multiple of 6, 8, 9, and 15\n    lcm_val = lcm(lcm(6, 8), lcm(9, 15))\n    \n    # find the smallest multiple of lcm_val that is greater than or equal to 1000\n    multiple = lcm_val\n    while multiple < 1000:\n        multiple += lcm_val\n    \n    return multiple\n\nans = solution()"
    ],
    "7ae0fef8de6c493cb2eee6482338c688": [
        "def solution():\n    # Total number of notes is 95.\n    total_notes = 95\n    # After exchanging, she has 175 $2 notes.\n    total_2_notes_after = 175\n\n    # Let the number of $2 notes be x and $10 notes be y.\n    # We have two equations:\n    # x + y = total_notes (1)\n    # (total_notes - y)*5 + y = total_2_notes_after (2)\n    # From equation (2):\n    # 5*total_notes - 5y + y = total_2_notes_after\n    # 5*total_notes - 4y = total_2_notes_after (3)\n    \n    # Solving equations (1) and (3) for y:\n    y = (5 * total_notes - total_2_notes_after) / 4\n    \n    # Now solve for x using equation (1):\n    x = total_notes - y\n    \n    return int(x)\n\nans = solution()"
    ],
    "16b3c8aa2d704da6a537f88f6fec0816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rooms, students = symbols('rooms students')  # Define variables for the number of rooms and total students\n    \n    equation1 = Eq(4 * rooms - students, 40)  # When 4 students per room, 40 remain without dormitories\n    equation2 = Eq(6 * rooms - students, -24)  # When 6 students per room, 24 beds are vacated\n    \n    solutions = solve((equation1, equation2), (rooms, students))  # Find the number of rooms and students\n    \n    ans = solutions[rooms]  # We are interested in the number of rooms.\n    return ans\n\nans = solution()"
    ],
    "dad5d4611c204567a94ca9e6e9e3d5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    equation1 = Eq(A, B + 25)\n    equation2 = Eq(A + 35, 6 * B)\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "f7bdbfc9be95446a8cb7289c066d92b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the symbols for older brother's current age (older_current),\n    # younger brother's current age (younger_current), the difference in age (age_diff)\n    # and the time passed (time_passed) since the older brother was the younger_current's age.\n    older_current, younger_current, age_diff, time_passed = symbols('older_current younger_current age_diff time_passed')\n\n    # We know that when the older brother was the younger brother's current age,\n    # the younger brother was 12 years old.\n    equation1 = Eq(younger_current, 12 + time_passed)\n\n    # Also, we know that when the younger brother becomes the older brother's current age,\n    # the older brother will be 27 years old.\n    equation2 = Eq(older_current, 27 - time_passed)\n\n    # The difference between their current ages has always been the same.\n    equation3 = Eq(older_current - younger_current, age_diff)\n\n    # But we can see that the age difference is equal to the time_passed\n    equation4 = Eq(age_diff, time_passed)\n\n    # Now we solve for older and younger current ages and time_passed.\n    solutions = solve((equation1, equation2, equation3, equation4), (older_current, younger_current, age_diff, time_passed))\n\n    return solutions[older_current]\n\nans = solution()"
    ],
    "8822cb428e1f404e8f4004bb9e245353": [
        "def solution():\n    fraction_eaten = 3/5\n    sweets_eaten = 18\n    total_sweets = sweets_eaten / fraction_eaten\n    sweets_left = total_sweets * (1 - fraction_eaten)\n    return int(sweets_left)\n\nans = solution()"
    ],
    "d21328403ccc4ef1888fbbd2ff71269e": [
        "def solution():\n    jane_age_now = 9\n    john_age_now = 5\n    jane_future_age = 15\n\n    # Find the difference in age between Jane now and when she will be 15\n    age_difference = jane_future_age - jane_age_now\n\n    # John will age the same amount of years as the difference\n    john_future_age = john_age_now + age_difference\n\n    return john_future_age\n\nans = solution()"
    ],
    "3f4b5d68e6a34a558a6a5627f763bf86": [
        "def solution():\n    # Given values\n    a_10 = 23\n    a_15 = 38\n    n = 102\n\n    # Calculate common difference (step)\n    common_difference = (a_15 - a_10) // (15 - 10)\n\n    # Calculate first term a_1\n    # a_n = a_1 + (n - 1) * d\n    a_1 = a_10 - (10 - 1) * common_difference\n\n    # Calculate the 102nd term of the sequence\n    a_102 = a_1 + (n - 1) * common_difference\n\n    return a_102\n\nans = solution()"
    ],
    "bcd8fb20c8b744e99ffa82607c24bb9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((13 - x)**2, 25)\n    solutions = solve(equation, x)\n    \n    return [int(sol) for sol in solutions]\n\nans = solution()"
    ],
    "21b6aec5564b47a2b3f38fad58c06438": [
        "def solution():\n    return 9678 * 8\n\nans = solution()"
    ],
    "70e335db4e004110b36ede05612ac93b": [
        "def solution():\n    # List of multiples of 4 between 10 and 20\n    multiples_of_4 = [x for x in range(10, 21) if x % 4 == 0]\n    # Factor of 36\n    factors_of_36 = [x for x in range(1, 37) if 36 % x == 0]\n    # Find the common element in both lists\n    ans = next(x for x in multiples_of_4 if x in factors_of_36)\n    return ans\n\nans = solution()"
    ],
    "c4f58a5f4ee74d11a1ceefa03d4b0989": [
        "def solution():\n    ans = (7 + 3) * 11 - (7 + (3 * 11))\n    return ans\n\nans = solution()"
    ],
    "f9501133c3614a48a8b6a1577fb1a1db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols\n    cost_price = symbols('cost_price')\n\n    # The product was marked at 20% above the cost price.\n    marked_price = cost_price * 1.20\n    \n    # It was eventually sold at 80% of the marked price.\n    selling_price = marked_price * 0.80\n    \n    # The loss was $40, which means selling price is $40 less than cost price.\n    loss = cost_price - selling_price\n    \n    # Create an equation representing the loss of $40.\n    equation = Eq(loss, 40)\n    \n    # Solve the equation to find the cost price.\n    solved_cost = solve(equation, cost_price)\n    \n    return solved_cost[0]\n\nans = solution()"
    ],
    "e6fb8dbc811842a5bd4fa6371e5e2187": [
        "def solution():\n    pupils_apples = 20\n    pupils_strawberries = 30\n    pupils_both = 10\n    pupils_neither = 5\n\n    total_pupils = (pupils_apples + pupils_strawberries - pupils_both) + pupils_neither\n\n    return total_pupils\n\nans = solution()"
    ],
    "9c5276fb1c214521afb9cff714698795": [
        "def solution():\n    # Time taken by both taps to fill the tank\n    both_taps_time = 6\n\n    # Time taken by tap X to fill the tank\n    tap_x_time = 10\n\n    # Rate of flow for tap X (portion of tank filled per minute)\n    rate_x = 1 / tap_x_time\n\n    # Rate of flow for both taps\n    rate_both = 1 / both_taps_time\n\n    # Rate of flow for tap Y\n    rate_y = rate_both - rate_x\n\n    # Time taken by tap Y to fill the tank (portion of tank filled per minute)\n    tap_y_time = 1 / rate_y\n\n    return tap_y_time\n\nans = solution()"
    ],
    "19f6f50448bf4f7a813675df0afe5ff5": [
        "def solution():\n    usual_price = 1050\n    discount_rate = 0.12\n    discount_amount = usual_price * discount_rate\n    final_price = usual_price - discount_amount\n\n    return final_price\n\nans = solution()"
    ],
    "7617a8045f5b4ff5b5324982a66889ea": [
        "def solution():\n    ans = 62 + 48 + 18 + 32\n    return ans\n\nans = solution()"
    ],
    "e34d46213408429baafffc5193541fcb": [
        "def solution():\n    total_questions = 10\n    points_for_correct = 6\n    points_for_wrong = -2\n    total_points = 44\n    \n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        if (correct_answers * points_for_correct) + (wrong_answers * points_for_wrong) == total_points:\n            return correct_answers\n\nans = solution()"
    ],
    "bf4013af9d5b45968ef5e11b2c7e33c2": [
        "def solution():\n    factorial_sum = sum(factorial(i) for i in range(1, 9))\n    ans = factorial_sum % 100\n    return ans\n\nfrom math import factorial\n\nans = solution()"
    ],
    "22d57fd8aceb477a89a51700a52e11c5": [
        "def solution():\n    # Calculate the amount of sugar in each cup\n    sugar_in_cup_A = 300 * 0.20\n    sugar_in_cup_B = 300 * 0.30\n    \n    # Calculate the total volume of the mixture\n    total_volume = 300 + 300\n    \n    # Calculate the total amount of sugar\n    total_sugar = sugar_in_cup_A + sugar_in_cup_B\n    \n    # Calculate the concentration of sugar in the mixture\n    sugar_concentration = total_sugar / total_volume\n    \n    return sugar_concentration\n\nans = solution()"
    ],
    "4052fcf1d3c045db91150181ba09abd4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of markers each person originally had\n    xuanrui, yaokuan = symbols('xuanrui yaokuan')\n\n    # Given, Xuanrui and Yaokuan had 708 markers altogether\n    eq1 = Eq(xuanrui + yaokuan, 708)\n\n    # After Xuanrui gave away 532 markers\n    xuanrui_left = xuanrui - 532\n\n    # After Yaokuan sold 3/7 of his markers (means he is left with 4/7 of his markers)\n    yaokuan_left = yaokuan * (4/7)\n\n    # They had an equal number of markers left\n    eq2 = Eq(xuanrui_left, yaokuan_left)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (xuanrui, yaokuan))\n\n    # We are interested in how many markers Xuanrui had at first\n    return solutions[xuanrui]\n\nans = solution()"
    ],
    "f97121683f7348f08e4de57f11abcaed": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "44a59b6d17564f77996536b4fa6617a7": [
        "def solution():\n    ans = 3/10 + 1/100 + 7/1000\n    return ans\n\nans = solution()"
    ],
    "11ea9bd45a5646b0b52b444e218c2de9": [
        "def solution():\n    dollars = 1000\n    exchange_rate = 2.50  # £1 = $2.50\n\n    pounds = dollars / exchange_rate\n    return pounds\n\nans = solution()"
    ],
    "9e6ca5b654384e328bb7c1dbb3561114": [
        "def solution():\n    total_length = 540\n    head_length = 10\n    carriage_length = 27\n    space_between = 1\n    \n    remaining_length = total_length - head_length\n    carriage_total_length = carriage_length + space_between\n    num_carriages = remaining_length // carriage_total_length\n\n    return num_carriages + 1  # Including the head of the train\n\nans = solution()"
    ],
    "1e1427d5ceba4320aee5afcaccc52125": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ahmad, ryan = symbols('ahmad ryan')\n    total_marbles = 1442\n\n    # Ahmand has 6 times as many marbles as Ryan\n    equation1 = Eq(ahmad, 6 * ryan)\n    # The total number of marbles Ahmand and Ryan have\n    equation2 = Eq(ahmad + ryan, total_marbles)\n\n    # Solve the system of equations for the number of marbles Ahmand and Ryan have\n    solution_marbles = solve((equation1, equation2), (ahmad, ryan))\n\n    # Calculate how many marbles Ahmand must give to Ryan for an equal amount\n    ahmad_marbles = solution_marbles[ahmad]\n    ryan_marbles = solution_marbles[ryan]\n\n    marbles_to_give = (ahmad_marbles - ryan_marbles) / 2\n\n    return marbles_to_give\n\nans = solution()"
    ],
    "cfb3940b70b44b77b4051f6425ca4116": [
        "def solution():\n    # Let x be the number of $2 notes and y be the number of $10 notes at first.\n    # We have two equations based on the information provided:\n    # 1. x + y = 95 (total number of notes)\n    # 2. x + 5y = 175 (total number of $2 notes after exchanging each $10 note for five $2 notes)\n    \n    # Solve the two equations:\n    # Subtracting the first equation from the second gives: 5y - y = 175 - 95\n    # Which simplifies to: 4y = 80\n    # Solving for y gives: y = 80 / 4 = 20\n    # So, there were 20 $10 notes at first.\n    \n    # Using y to find x from the first equation: x = 95 - y\n    # Which simplifies to: x = 95 - 20 = 75\n    # So, there were 75 $2 notes at first.\n    \n    num_two_notes_at_first = 95 - 20\n    return num_two_notes_at_first\n\nans = solution()"
    ],
    "bd978d750b6e4729980ff669042abeea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pen, pencil = symbols('pen pencil')\n    equation1 = Eq(pen + pencil, 2.90)\n    equation2 = Eq(pen, pencil + 0.60)\n    \n    solutions = solve((equation1, equation2), (pen, pencil))\n    \n    return solutions[pen]\n\nans = solution()"
    ],
    "90718dbaf0fd4ed89a5a4d96ad666df5": [
        "def solution():\n    # Counting appearances of '8' in the ones place\n    ones_count = 0\n    for i in range(1, 289):\n        if '8' in str(i % 10):\n            ones_count += 1\n\n    # Counting appearances of '8' in the tens place\n    tens_count = 0\n    for i in range(1, 289):\n        if '8' in str((i // 10) % 10):\n            tens_count += 1\n\n    # Counting appearances of '8' in the hundreds place\n    hundreds_count = 0\n    for i in range(1, 289):\n        if '8' in str(i // 100):\n            hundreds_count += 1\n\n    # Summing all the counts for the final answer\n    total_count = ones_count + tens_count + hundreds_count\n\n    return total_count\n\nans = solution()"
    ],
    "866545814d6e4615b2af1cbb207b8c44": [
        "def solution():\n    total_questions = 50\n    correct_points = 2\n    wrong_points = -1\n    total_score = 82\n    correct_claimed = 32\n\n    # Let the number of questions answered correctly be x\n    # Thus, the number of questions answered wrongly would be total_questions - x\n    # The total score is therefore x * correct_points + (total_questions - x) * wrong_points\n\n    for x in range(total_questions + 1):\n        if x * correct_points + (total_questions - x) * wrong_points == total_score:\n            if x == correct_claimed:\n                return True  # Her statement is correct\n            else:\n                return x  # Her statement is incorrect and this is the correct number\n\nans = solution()"
    ],
    "a9f0d9027e26479ba10780496a0c4d24": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x, y = symbols('x y', integer=True)\n    equation = Eq(24*x - 25*y, 8)\n    solutions = solve((equation), (x, y))\n    \n    # Identify the smallest x value from the solutions\n    smallest_x = min(solutions, key=lambda item: item[x])[x]\n    \n    return smallest_x\n\nans = solution()"
    ],
    "35d6ac2bebfe44ffa37211e279b87749": [
        "def solution():\n    for x in range(1, 10):\n        for y in range(10):\n            A = x * 10 + y\n            B = 2 * A\n            if B == 25 + 6 * A:\n                return A\n\nans = solution()"
    ],
    "278b3ce4e6b040338ce029d381e86ebf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for each shape\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n\n    # Given equations\n    equation1 = Eq(triangle + triangle, square)\n    equation2 = Eq(square + triangle, circle)\n    equation3 = Eq(diamond, circle + square + triangle)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n\n    # Return the number of triangles that make a diamond\n    return solutions[triangle]\n\nans = solution()"
    ],
    "01dd3259609c4a6da4fd5831e9936f4d": [
        "def solution():\n    original_price = 800\n    discount = 0.15 * original_price\n    discounted_price = original_price - discount\n    increase = 0.15 * discounted_price\n    final_price = discounted_price + increase\n\n    return final_price\n\nans = solution()"
    ],
    "a59668f1e93b4825ba207bf6e1c4f492": [
        "def solution():\n    price_per_kg_bag1 = 5 / 2.5\n    price_per_kg_bag2 = 7.70 / 4\n\n    if price_per_kg_bag1 < price_per_kg_bag2:\n        ans = \"2.5kg bag of carrots\"\n    else:\n        ans = \"4kg bag of carrots\"\n    return ans\n\nans = solution()"
    ],
    "8fb6994898db4fa78cffadd0bf6a1ec7": [
        "def solution():\n    S_inv = sum([1/i for i in range(2001, 2011)])\n    S = 1 / S_inv\n    ans = int(S)\n    return ans\n\nans = solution()"
    ],
    "e7527c6eca0e41f7b5a274121821fab1": [
        "def solution():\n    ans = 521 - 173 - 127\n    return ans\n\nans = solution()"
    ],
    "d39880770cf44cc1b8953e1fa9f1233b": [
        "def solution():\n    price_per_book = 4.50\n    number_of_books = 5\n\n    total_cost = price_per_book * number_of_books\n\n    return total_cost\n\nans = solution()"
    ],
    "dac6db12c85f45c99ab167826c4098d6": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 4), (2, 5), (8, 9)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "ddf47a1b5bb549f3a5068ab88ce95d61": [
        "def solution():\n    # calculate 3/4 of 2/5 of 1\n    ans = (3/4) * (2/5) * 1\n    return ans\n\nans = solution()"
    ],
    "547dd66262ab4fd8b89a202921fdd75e": [
        "def solution():\n    pages_monday = 280\n    pages_tuesday = pages_monday - 28\n    total_pages_read = pages_monday + pages_tuesday\n    return total_pages_read\n\nans = solution()"
    ],
    "a2e32a8bfee74449ac3c05a82c14f783": [
        "def solution():\n    return 365 - (19 + 65)\n\nans = solution()"
    ],
    "94bd0c0ea38e484483c3d392ca25d206": [
        "def solution():\n    road_length = 60\n    interval = 10\n    \n    # Number of intervals is one less than the number of trees since there's a tree at each end\n    trees_per_side = (road_length // interval) + 1 \n    \n    # Calculate the total number of trees for both sides\n    total_trees = trees_per_side * 2 \n\n    return total_trees\n\nans = solution()"
    ],
    "6ba06bbd86ed47918a1f1d77269cfed8": [
        "def solution():\n    from math import lcm\n    distance = lcm(5, 10, 12)\n    return distance\n\nans = solution()"
    ],
    "4bb30a08bef844b295fc45cdd2506df9": [
        "def solution():\n    bus_length = 5\n    distance_between_buses = 2\n    number_of_buses = 7\n\n    total_length = bus_length * number_of_buses + distance_between_buses * (number_of_buses - 1)\n\n    return total_length\n\nans = solution()"
    ],
    "166102618f9a4ea0b545a8ba6b224baa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x / 4 - 25, 2021)\n    original_number = solve(equation, x)[0]\n    correct_answer = 4 * original_number + 25\n\n    return correct_answer\n\nans = solution()"
    ],
    "f321e52bafc84cfeaf82fee608fc2c47": [
        "def solution():\n    weight_quarter_full = 250\n    weight_three_quarter_full = 350\n\n    # Let's call the mass of the empty jar E and the mass of the full amount of Marmite M.\n    # Then we have:\n    # E + 1/4*M = 250\n    # E + 3/4*M = 350\n    # Subtracting the first equation from the second gives us 1/2*M = 100\n    # Therefore, M = 200g\n    # Substituting the value of M back into the first equation gives us E + 50 = 250\n    # So, E = 200g\n    \n    marmite_mass_full = (weight_three_quarter_full - weight_quarter_full) * 2\n    empty_jar_mass = weight_quarter_full - (marmite_mass_full / 4)\n    \n    return empty_jar_mass\n\nans = solution()"
    ],
    "3b8e61c8ea8e4ba78d0aca808cf223c9": [
        "def solution():\n    height_of_28_blocks = 182\n    height_per_block = height_of_28_blocks / 28\n    height_of_42_blocks = height_per_block * 42\n    return height_of_42_blocks\n\nans = solution()"
    ],
    "78a5cb5509884246bd419bba61d02340": [
        "def solution():\n    return 45 * 7\n\nans = solution()"
    ],
    "a92d9eb66c3b4acd8f2839b36fdd0e14": [
        "def solution():\n    ans = 4.8 * 5\n    return ans\n\nans = solution()"
    ],
    "5979a7958e5a49019259104db32617ae": [
        "def solution():\n    first_term = 106\n    last_term = 2019\n    num_terms = (last_term - first_term) // 1 + 1\n    sum_seq = (num_terms * (first_term + last_term)) // 2\n    return sum_seq\n\nans = solution()"
    ],
    "fe3ec539b5a04bb7a24f12c0750720eb": [
        "def solution():\n    # Since the number is divisible by 9, the sum of its digits must be divisible by 9\n    for E in range(10):\n        if (2 + E + 3 + E + 2) % 9 == 0:\n            return E\n\nans = solution()"
    ],
    "1046c694c10a415381a568db27604763": [
        "def solution():\n    cost_price = 200\n    selling_price_before_discount = cost_price * 1.50  # 50% above cost\n    discount = selling_price_before_discount * 0.10  # 10% Christmas discount\n    selling_price_after_discount = selling_price_before_discount - discount\n\n    profit = selling_price_after_discount - cost_price\n    return profit\n\nans = solution()"
    ],
    "5a88150fabe34769918ee4dd88293fca": [
        "def solution():\n    # We know that m^2 + 5 students were there originally\n    # and when 18 students join, it becomes a perfect square, n^2\n    # Therefore, n^2 = m^2 + 5 + 18 -> n^2 = m^2 + 23\n    # We have to find such m and n where both of these conditions hold\n    # Since both m and n are positive integers, we just need to check each possible square\n\n    m = 1\n    while True:\n        original_count = m**2 + 5\n        new_count = original_count + 18\n        n = int(new_count**0.5)  # Taking the square root of new_count\n        if n**2 == new_count:  # Checking if n is a perfect square\n            # Return the original number of students\n            return original_count\n        m += 1\n\nans = solution()"
    ],
    "1be249dc19cb422a809047b2d7a80f6a": [
        "def solution():\n    # Relationship between x and y is directly proportional\n    proportionality = 'directly'\n\n    # Calculate the value of y when x is 5\n    # Given that x:5 = y:3\n    # By cross-multiplication,\n    # x * 3 = y * 5\n    # When x = 5,\n    y = (5 * 3) / 5\n\n    return proportionality, y\n\nans = solution()"
    ],
    "d54cf1582b9840d2832c444ed488a72a": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "6ddf66ac448548e690721ecb2b5f565e": [
        "def solution():\n    for num in range(99, 9, -1):  # Start from 99 down to 10 which are the 2-digit numbers\n        if num % 3 == 0 and num % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "d346e6a28b64479882e6e011bb7a6f19": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((2*x + 3)/4 + (6 + 4*x)/3, (7*x + 22)/8)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "0ff7cfe71371476695329b23de3069ac": [
        "def solution():\n    # Let's denote the sequence as a, b, a+b, a+2b, 2a+3b, 3a+5b, ...\n    # We are given that the fourth number is 6 and the sixth number is 15\n    \n    # This gives us two equations:\n    # a + 2b = 6       (1)\n    # 3a + 5b = 15      (2)\n    \n    # We can solve for a and b using these equations\n    # Multiplying (1) by 3, we get 3a + 6b = 18\n    # Now subtracting (2) from this, we get b = 3\n    # Using b = 3 in (1), we get a = 0\n    \n    # Now knowing a and b, we can find the seventh number in the sequence as:\n    # 5a + 8b = 5(0) + 8(3) = 24\n    \n    return 24\n\nans = solution()"
    ],
    "dd6d097a63594cca959d1e71d2d3ebea": [
        "def solution():\n    sum_of_numbers = 9 + 11 + 8 + 12 + 7 + 13 + 6 + 14 + 5 + 14\n    return sum_of_numbers\n\nans = solution()"
    ],
    "9e9d512190c84daf805cb3e49be050a6": [
        "def solution():\n    from math import gcd\n    A = 12\n    B = 15\n    C = 18\n\n    greatest_common_factor = gcd(gcd(A, B), C)\n\n    return greatest_common_factor\n\nans = solution()"
    ],
    "03105f423b1347369d8ed85d1f00d475": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_time = datetime.strptime(\"17:00\", \"%H:%M\")\n    badminton_duration = timedelta(minutes=45)\n    jogging_duration = timedelta(minutes=30)\n    \n    end_time = start_time + badminton_duration + jogging_duration\n    return end_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "ecd9405da0514df5b2a0f1179131079e": [
        "def solution():\n    original_average = 25\n    new_average = 22\n    total_numbers = 3\n\n    original_sum = original_average * total_numbers\n    new_sum = new_average * total_numbers\n\n    changed_number = 16\n\n    difference_in_sum = original_sum - new_sum\n    original_number = changed_number + difference_in_sum\n\n    return original_number\n\nans = solution()"
    ],
    "f4a44d5718564604b3aba4fefda53416": [
        "def solution():\n    number = 1\n    while True:\n        if (number % 5 == 3) and (number % 6 == 5):\n            return number\n        number += 1\n\nans = solution()"
    ],
    "34d25cf24d7949d780640e0194156dfe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')\n\n    boys = 36 - girls\n\n    equation = Eq((girls * 88 + boys * 91) / 36, 89)\n\n    num_girls = solve(equation, girls)\n\n    return num_girls[0]\n\nans = solution()"
    ],
    "57f1a73a3e564db985c24fecdf759cd6": [
        "def solution():\n    ans = (2 + 3)**2 + 4 * 5\n    return ans\n\nans = solution()"
    ],
    "32cc18556b6c45a9b298776fc2cefc3a": [
        "def solution():\n    total_questions = 25\n    points_correct = 4\n    points_incorrect = -2\n    rex_score = 66\n    questions_attempted = total_questions - 1\n\n    for correct in range(questions_attempted + 1):\n        incorrect = questions_attempted - correct\n        score = (correct * points_correct) + (incorrect * points_incorrect)\n        if score == rex_score:\n            return correct\n\nans = solution()"
    ],
    "17d3038b31954df3beaf2a17eef6f2f2": [
        "def solution():\n    total_exhibits = 498\n    not_produced_by_A = 266\n    not_produced_by_B = 178\n\n    produced_by_A = total_exhibits - not_produced_by_A\n    produced_by_B = total_exhibits - not_produced_by_B\n\n    both_A_and_B = produced_by_A + produced_by_B - total_exhibits\n\n    return both_A_and_B\n\nans = solution()"
    ],
    "b4c07ba5dcbe471282f64123c9e4bd81": [
        "def solution():\n    black_pens = 9\n    blue_pens = 4 * black_pens\n    green_pens = 2 * black_pens\n    total_pens = black_pens + blue_pens + green_pens\n\n    return total_pens\n\nans = solution()"
    ],
    "4a3bcfd145bb4a24aefa5c3766f7cbaa": [
        "def solution():\n    # Number of vertices for a cube\n    vertices_cube = 8\n    \n    # Number of vertices for a regular tetrahedron\n    vertices_tetrahedron = 4\n    \n    # Number of vertices for an octahedron\n    vertices_octahedron = 6\n    \n    # Number of vertices for a dodecahedron\n    vertices_dodecahedron = 20\n    \n    # Number of vertices for an icosahedron\n    vertices_icosahedron = 12\n    \n    # Total number of vertices\n    total_vertices = (vertices_cube + vertices_tetrahedron + \n                      vertices_octahedron + vertices_dodecahedron + \n                      vertices_icosahedron)\n    \n    return total_vertices\n\nans = solution()"
    ],
    "8dd4cfbce09b4b4ebc7f9f1a6f86de7d": [
        "def solution():\n    # Total sugar in each solution\n    sugar_david = 800 * 0.05\n    sugar_eugene = 200 * 0.30\n    sugar_felix = 300 * 0.10\n\n    # Total sugar of the mixed solution\n    total_sugar = sugar_david + sugar_eugene + sugar_felix\n\n    # Total weight of the mixed solution\n    total_weight = 800 + 200 + 300\n\n    # Concentration of the sugar in the mixed solution\n    concentration = total_sugar / total_weight\n\n    return concentration * 100  # Convert to percentage\n\nans = solution()"
    ],
    "f6df3f11753e4cdc80268ae5f06e3ade": [
        "def solution():\n    volume1 = 20  # litres\n    concentration1 = 35 / 100  # converting percentage to a decimal\n\n    volume2 = 30  # litres\n    concentration2 = 60 / 100  # converting percentage to a decimal\n\n    total_volume = volume1 + volume2\n    total_fruit_juice = (volume1 * concentration1) + (volume2 * concentration2)\n\n    new_concentration = (total_fruit_juice / total_volume) * 100  # converting decimal back to percentage\n\n    return new_concentration\n\nans = solution()"
    ],
    "9e3c2c6854d3426e92fab24e9a0b03a3": [
        "from math import comb\n\ndef solution():\n    num_people = 4\n    num_handshakes = comb(num_people, 2)\n    return num_handshakes\n\nans = solution()"
    ],
    "718e8dda7ebd4d5fb3b2c9ce80ba10e6": [
        "def solution():\n    ans = 58 + 74\n    return ans\n\nans = solution()"
    ],
    "f5a6c0d6715945a695ecf6dfbb64f92e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    andrew, gill = symbols('andrew gill')\n    equation1 = Eq(andrew + gill, 62)\n    equation2 = Eq(gill - andrew, 18)\n    \n    solutions = solve((equation1, equation2), (andrew, gill))\n    \n    return solutions[gill]\n\nans = solution()"
    ],
    "d01d33f6697441ebb3567f6b25f6068c": [
        "def solution():\n    ans = 3.8 + 59.6 - 12\n    return ans\n\nans = solution()"
    ],
    "cecb4b4d838e4a73937b529a2db06ceb": [
        "def solution():\n    total_cookies = 148\n    cookies_per_box = 9\n    boxes_needed = (total_cookies + cookies_per_box - 1) // cookies_per_box  # Ceiling division\n    return boxes_needed\n\nans = solution()"
    ],
    "82bde9d1e9404bf391015eb87b176f5d": [
        "def solution():\n    for i in range(100, 1000):\n        digits = [int(x) for x in str(i)]\n        if 7 in digits and all(abs(d - 7) <= 4 for d in digits):\n            return i\n\nans = solution()"
    ],
    "bae752593a0041d5ad09bba75d528d91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original number of badges made\n    x = symbols('x') \n\n    # After selling 5/7 on the first day, she has 2/7 left\n    first_day_left = (2/7) * x \n\n    # After selling 1/3 of the remainder, she has 2/3 of (2/7) left\n    second_day_left = (2/3) * first_day_left\n\n    # She then made an additional 354 badges\n    total_badges_after_additional = second_day_left + 354 \n\n    # In the end, she had 3 times the number of badges she made at first\n    equation = Eq(total_badges_after_additional, 3 * x)\n\n    # Solve the equation for x\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "423cce1700d94adeb333d25876d65a23": [
        "def solution():\n    # In a knockout tournament, each match eliminates one player.\n    # With four people, the number of games required will be:\n    # One game to reduce 4 players to 3\n    # One game to reduce 3 players to 2\n    # One game to find the winner among the 2 remaining players\n    needed_games = 4 - 1  # Because every game except the final eliminates one player\n    return needed_games\n\nans = solution()"
    ],
    "107b6a756a8e456194025d4361f2a118": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "d6ed026fb584429b8dc2a4b41d3885fe": [
        "def solution():\n    total_exhibits = 498\n    not_by_A = 266\n    not_by_B = 178\n\n    both_A_and_B = total_exhibits - not_by_A - not_by_B\n\n    return both_A_and_B\n\nans = solution()"
    ],
    "3a8d9debec2f4fc3a575d0ea16005083": [
        "def solution():\n    angel_str = '0141705021'\n    angel_dict = {}\n    \n    # Count the occurrences of each digit in \"Angel\"\n    for digit in angel_str:\n        if digit in angel_dict:\n            angel_dict[digit] += 1\n        else:\n            angel_dict[digit] = 1\n    \n    devil_str = '4005220912'\n    devil_dict = {}\n    \n    # Count the occurrences of each digit in \"Devil\"\n    for digit in devil_str:\n        if digit in devil_dict:\n            devil_dict[digit] += 1\n        else:\n            devil_dict[digit] = 1\n    \n    # Check if the counts of each digit match\n    if devil_dict == angel_dict:\n        ans = True  # Andy can unlock the chest\n    else:\n        ans = False  # Andy cannot unlock the chest\n    \n    # If Andy cannot unlock the chest, find the correct password\n    if not ans:\n        angel_sorted = sorted(angel_str)\n        correct_password = ''.join(angel_sorted)\n        return correct_password\n    else:\n        # If passwords match, return reason\n        return \"The digit counts match: Andy can unlock the treasure chest.\"\n    \nans = solution()"
    ],
    "10a4f68009184b2f9611a45a014abd56": [
        "def solution():\n    noon_temp = 4  # Temperature at noon in degree Celsius\n    temp_drop = 10  # Temperature drop by midnight in degree Celsius\n\n    midnight_temp = noon_temp - temp_drop\n\n    return midnight_temp\n\nans = solution()"
    ],
    "868f76b6c8934a7885d5e14c1c5de743": [
        "def solution():\n    # To guarantee one ball of each color, we use the Pigeonhole Principle. \n    # He could pick all 10 red balls first and then all 13 green balls without getting a blue one. \n    # So he needs to pick at least one more after that to guarantee a blue one.\n    # That's 10 (red) + 13 (green) + 1 (for at least one blue) = 24.\n    ans = 10 + 13 + 1\n    return ans\n\nans = solution()"
    ],
    "1ebfe4d3586444b28bbdf27520a1abab": [
        "def solution():\n    for i in range(200, 300):\n        if i % 6 == 3 and i % 7 == 3 and i % 11 == 5:\n            return i\n\nans = solution()"
    ],
    "27181cdb9b38443f964d9820ad8f0b75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    blouse_cost, skirt_cost = symbols('blouse_cost skirt_cost')\n    \n    equation1 = Eq(3 * skirt_cost + 2 * blouse_cost, 317)\n    equation2 = Eq(skirt_cost, blouse_cost + 14)\n    \n    solutions = solve((equation1, equation2), (blouse_cost, skirt_cost))\n    \n    return solutions[blouse_cost]\n\nans = solution()"
    ],
    "6ca3b864aba0479d81b5e2d80e516196": [
        "def solution():\n    last_year_value = 110000\n    original_value = last_year_value / 1.1\n    this_year_value = last_year_value * 0.9\n    profit_loss = this_year_value - original_value\n    return profit_loss\n\nans = solution()"
    ],
    "e9e57ebfab514d86a5ed141c3c353815": [
        "from math import factorial\n\ndef solution():\n    fact = factorial\n    total_colors = 3 + 4 + 1  # Total different kinds of flowers\n    arrangements = fact(total_colors) // (fact(3) * fact(4) * fact(1))  # Divide by the factorial of the number of each kind of flower\n\n    return arrangements\n\nans = solution()"
    ],
    "d7e151832f704caeb06c6674341c5d53": [
        "def solution():\n    total_pupils = 235 + 567\n    pupils_per_room = total_pupils // 2\n    return pupils_per_room\n\nans = solution()"
    ],
    "ea25f69560044c42a5dc8b686d83b90f": [
        "def solution():\n    from math import factorial\n\n    low = factorial(6)    # 1 * 2 * 3 * 4 * 5 * 6\n    high = factorial(8)   # 1 * 2 * 3 * 4 * 5 * 6 * 7 * 8\n    \n    ans = 0\n    for i in range(low, high+1, low):\n        if high % i == 0:\n            ans += 1\n    return ans\n\nans = solution()"
    ],
    "3ad5f155b2244cbcb39a2d0959b08316": [
        "def solution():\n    # Since we're allowed to use different positive integers, to maximize the number of terms,\n    # we would begin with 1, 2, 3,... etc. until the sums exceed or equal to 60.\n    # Starting from 1, this forms a sequence where each term is 1 unit greater than the previous one.\n    \n    sum = 0\n    n = 1\n    \n    # Loop until the sum reaches or exceeds 60\n    while sum + n <= 60:\n        sum += n\n        n += 1\n    \n    # n - 1 because n itself is not included (the sum exceeded 60 after the last addition)\n    return n - 1\n\nans = solution()"
    ],
    "a37a54e4fb8445b4bc0772fa3a12e2ff": [
        "def solution():\n    original_price = 125\n    discount = 20 / 100\n    discounted_amount = original_price * discount\n    new_price = original_price - discounted_amount\n    return new_price\n\nans = solution()"
    ],
    "8b18733b1be0419dba54b2eb00a90c19": [
        "def solution():\n    return 12321 // 9\n\nans = solution()"
    ],
    "46df85e92a924b12ac1d505c93cd885c": [
        "def solution():\n    # Iterate through possible numbers of custard pies, starting from the minimum\n    # possible amount (5 * 1 + 3) until a number that fits both conditions is found.\n    pies = 0\n    while True:\n        pies += 1\n        if (pies - 3) % 5 == 0 and (pies + 2) % 6 == 0:\n            break\n    return pies\n\nans = solution()"
    ],
    "2b8380c480924871bff4133ed7e6b4db": [
        "def solution():\n    leak_rate_per_minute = 20  # in ml\n    minutes_per_hour = 60  # 1 hour = 60 minutes\n    ml_to_litres_conversion = 1000  # 1 liter = 1000 ml\n\n    amount_leaked_per_hour_ml = leak_rate_per_minute * minutes_per_hour\n    amount_leaked_per_hour_litres = amount_leaked_per_hour_ml / ml_to_litres_conversion\n\n    return amount_leaked_per_hour_litres\n\nans = solution()"
    ],
    "07de75394b5841918be5feca68429eb9": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('0123456789', 3):\n        s, e, _ = perm\n        see = int(s + e + e)\n        es = int(e + s)\n        if s != '0' and ((see + es) == 2 * see):\n            return see\n\nans = solution()"
    ],
    "82a919f9eba447aab7c5e2b20dd75061": [
        "def solution():\n    # We know that all prime numbers greater than 3 are of the form 6k +/- 1\n    # Let's check what happens with (8A - 3B) when A and B are primes of that form\n\n    # If A = 6k + 1 and B = 6m + 1, then (8A - 3B) = 8(6k+1) - 3(6m+1) = 48k + 8 - 18m - 3\n    # which can be written as 3(16k - 6m + 1) + 5. This is clearly not divisible by 3 because of the +5.\n    # Therefore, A and B cannot both be of the form 6k + 1.\n\n    # If A = 6k - 1 and B = 6m - 1, then (8A - 3B) = 8(6k-1) - 3(6m-1) = 48k - 8 - 18m + 3\n    # which can be written as 3(16k - 6m) - 5. This is also clearly not divisible by 3 because of the -5.\n    # Therefore, A and B cannot both be of the form 6k - 1.\n\n    # Since A and B are different primes and one of them can be 3 (which is a special prime that doesn't follow the 6k +/- 1 rule),\n    # let's check the cases where either A or B is 3.\n\n    # If A = 3, (8A - 3B) = 24 - 3B = 3(8 - B), for this to be a multiple of 3, (8 - B) should be an integer\n    # Since B is prime, B cannot be 8. So A cannot be 3.\n\n    # If B = 3, (8A - 3B) = 8A - 9 = 8A - 3*3, which is obviously a multiple of 3,\n    # Therefore, B must be 3, and A can be any prime number of the form 6k +/- 1.\n    \n    # However, since we want the specific value of A, and we have already determined B = 3, we need to realize that\n    # since B is 3 (which is the smallest prime) then A must be the next smallest prime number for 8A - 3B to be a multiple of 3\n    # The next smallest prime number after 3 is 5.\n\n    # Checking for A = 5\n    A = 5\n    B = 3\n    if (8 * A - 3 * B) % 3 == 0:\n        return A\n    else:\n        # This means that our assumption is incorrect and we should look for the next possible solution,\n        # but given our logic, A=5 is the only solution that fits the problem's constraints.\n        pass\n\nans = solution()"
    ],
    "7c7eeadfbdca4d60ababafecea8a2a6a": [
        "def solution():\n    james_height = 120  # in cm\n    height_difference = 30  # in cm\n\n    mark_height = james_height + height_difference\n\n    return mark_height\n\nans = solution()"
    ],
    "9161eca90a924c55a4b89f523ab076ad": [
        "def solution():\n    # The age should satisfy the conditions:\n    # age % 2 == 1\n    # age % 3 == 1\n    # age % 4 == 1\n    # age % 6 == 1\n    # age % 7 == 0\n\n    age = 0\n    while True:\n        age += 1\n        if all(age % i == 1 for i in [2, 3, 4, 6]) and age % 7 == 0:\n            return age\n\nans = solution()"
    ],
    "681ad7cd00094b8b958f2990dc828dc1": [
        "def solution():\n    # Initialize the sequence as an empty list\n    sequence = []\n\n    # Append the numbers to the sequence according to the pattern\n    for i in range(1, 9):\n        sequence.extend([i] * (i + 1))\n\n    # Sort the sequence to find the median\n    sequence.sort()\n\n    # Calculate the index of the median\n    half_length = len(sequence) // 2\n    if len(sequence) % 2 == 0:\n        # If the sequence length is even, average the two middle numbers\n        median = (sequence[half_length - 1] + sequence[half_length]) / 2\n    else:\n        # If the sequence length is odd, take the middle number\n        median = sequence[half_length]\n\n    return median\n\nans = solution()"
    ],
    "5a18e751149d448d874661947903bc87": [
        "def solution():\n    # Total height of six players\n    total_height_six_players = 6 * 150  # since the average height is 150 cm\n\n    # Average height of four of them is 2 cm lower than the average of the team\n    avg_height_four_players = 150 - 2\n\n    # Total height of four players\n    total_height_four_players = 4 * avg_height_four_players\n\n    # Total height of the other two players\n    total_height_two_players = total_height_six_players - total_height_four_players\n\n    # Average height of the other two players\n    avg_height_two_players = total_height_two_players / 2\n\n    return avg_height_two_players\n\nans = solution()"
    ],
    "0b55e6a4e6c14d308cec4f22d3a63d1a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dominic, hannah, abdul = symbols('dominic hannah abdul')\n\n    equation1 = Eq(dominic, 2 * hannah)\n    equation2 = Eq(abdul, 3 * dominic)\n    equation3 = Eq(dominic + hannah + abdul, 63)\n\n    solutions = solve((equation1, equation2, equation3), (dominic, hannah, abdul))\n\n    return solutions[abdul]\n\nans = solution()"
    ],
    "fb238c080afd420c908c028ca9054101": [
        "def solution():\n    # Worst case scenario: We pick apples alternately, one red, one green\n    # This happens until we pick two of the same color\n    # Therefore, we pick 1 red, 1 green, and then one more of any color\n    # That makes it 3 apples to guarantee two of the same color\n\n    return 3\n\nans = solution()"
    ],
    "08b4fb633ec84894aa5ff3a4608e3b6b": [
        "def solution():\n    original_pieces = 10\n    total_pieces_now = 16\n    # Let x be the number of pieces cut into three parts.\n    # Each piece cut into three parts results in 2 additional pieces.\n    # So, 10 - x is the number of pieces not cut, and 2x is the number of additional pieces created.\n    # The total pieces now is the original pieces not cut plus the additional pieces created.\n    # Therefore, (10 - x) + 2x = 16\n    \n    # We solve for x: x = (16 - original_pieces) / (3 - 1)\n    x = (total_pieces_now - original_pieces) // 2\n    return x\n\nans = solution()"
    ],
    "d5f9287c340749138bbce5897de4eb98": [
        "def solution():\n    number = 20000 - 20\n    return number\n\nans = solution()"
    ],
    "4bcc90775cce4036a6d6e2de902d15a1": [
        "def solution():\n    marks = [7, 8, 10, 9, 8, 8, 10, 7, 8, 9]\n    mean_score = sum(marks) / len(marks)\n    return mean_score\n\nans = solution()"
    ],
    "ff03e3e004084b4592ed56380ac4b86f": [
        "def solution():\n    result = 6.3 + 8.7 + 9.6 - 2.6\n    return result\n\nans = solution()"
    ],
    "4cd5315568c9436fb37d857619aade0b": [
        "def solution():\n    pails_filled = 4\n    water_per_pail = 4  # liters\n    water_left = 7  # liters\n\n    original_volume = (pails_filled * water_per_pail) + water_left\n\n    return original_volume\n\nans = solution()"
    ],
    "e712313031b94278a2ec2b83580cf2ff": [
        "def solution():\n    richard_age = 12\n    adam_age = 2 * richard_age\n    will_age = (2 / 3) * adam_age\n    total_age = richard_age + adam_age + will_age\n\n    return total_age\n\nans = solution()"
    ],
    "3eea1e7f99c34f13ba952490fd0e0223": [
        "def solution():\n    ans = sum((-1)**(i + 1) * i for i in range(1, 47))\n    return ans\n\nans = solution()"
    ],
    "21dff506ecab4714a6d9d8ea21b7f020": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    c = symbols('c')\n    equation = Eq(5 * (6 * c - 1), -35)\n    solution = solve(equation, c)\n\n    return solution[0]\n\nans = solution()"
    ],
    "eda44d14e12244e89aedc633ee8617cf": [
        "def solution():\n    from sympy import symbols, solve\n    \n    # Define the variables x, y, z\n    x, y, z = symbols('x y z')\n    \n    # Create the equation based on the given condition\n    equation = x**20 * y**15 * z**5 - 243\n    \n    # Solve the equation to find the values for x, y, z\n    solutions = solve(equation)\n    \n    # Extract the valid solution (positive real numbers)\n    for sol in solutions:\n        if all(val.is_real and val > 0 for val in sol):\n            x_val, y_val, z_val = sol\n    \n    # Calculate the value of x^8 * y^6 * z^2\n    ans = x_val**8 * y_val**6 * z_val**2\n    \n    return ans\n\nans = solution()"
    ],
    "6db678cd280949ad907c4ce941d65604": [
        "def solution():\n    product = 1\n    for i in range(1, 2011):\n        product *= i\n        while product % 10 == 0:\n            product //= 10\n    return product % 10\n\nans = solution()"
    ],
    "b2e6579890a9418cb8be3cdb1db7fdab": [
        "def solution():\n    total_height_for_six = 6 * 150\n    average_height_of_four = 150 - 2\n    total_height_for_four = 4 * average_height_of_four\n    total_height_for_other_two = total_height_for_six - total_height_for_four\n    average_height_of_other_two = total_height_for_other_two / 2\n\n    return average_height_of_other_two\n\nans = solution()"
    ],
    "899f31b2d9c747e09ae28a17d893d246": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b represent the cost of one book and p represent the cost of one pencil box.\n    b, p = symbols('b p')\n    \n    # First scenario: 2 books + 3 pencil boxes = $42\n    equation1 = Eq(2 * b + 3 * p, 42)\n    \n    # Second scenario: 2 books + 6 pencil boxes = $60\n    equation2 = Eq(2 * b + 6 * p, 60)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (b, p))\n    \n    # Since we only need the cost of each pencil box, return the value of p\n    return solutions[p]\n\nans = solution()"
    ],
    "f38a4b59c2e540cf9e41096b829c82b2": [
        "def solution():\n    from math import comb\n    num_participants = 10\n    num_handshakes = comb(num_participants, 2)\n    return num_handshakes\n\nans = solution()"
    ],
    "0496270f31e94bba8f1297dbcc51925c": [
        "def solution():\n    # Current number being written\n    current_number = 1\n    # The sequence of numbers\n    sequence = []\n    while current_number <= 8:\n        sequence.extend([current_number] * (current_number + 1))\n        current_number += 1\n\n    # Calculate the median\n    num_elements = len(sequence)\n    sequence.sort()\n    \n    if num_elements % 2 == 0:\n        # Even number of elements, average the two middles\n        median = (sequence[num_elements // 2 - 1] + sequence[num_elements // 2]) / 2\n    else:\n        # Odd number of elements, take the middle\n        median = sequence[num_elements // 2]\n\n    return median\n\nans = solution()"
    ],
    "6c0112d5b52d43b7b55287abd3ead152": [
        "def solution():\n    total_length = 500\n    length_per_day = 50\n    days_required = total_length / length_per_day\n    return int(days_required)\n\nans = solution()"
    ],
    "69408e55202e417bbe0a5c4b1edfebd4": [
        "def solution():\n    cattle = 8\n    daily_fodder_per_cattle = 10  # kilograms\n    days = 4\n\n    total_fodder = cattle * daily_fodder_per_cattle * days\n    \n    return total_fodder\n\nans = solution()"
    ],
    "a8613b9533934b1dade8db288f570450": [
        "def solution():\n    # Define the weights ratio\n    dog_to_rabbit = 8\n    rabbit_to_chicken = 2\n    \n    # Calculate the equivalent weight of one dog in chickens\n    dog_to_chicken = dog_to_rabbit * rabbit_to_chicken\n    \n    return dog_to_chicken\n\nans = solution()"
    ],
    "367be73f540346348ec1e229247db265": [
        "from sympy import factorint\n\ndef solution():\n    x = (42**2) // 42  # Since 42 * x = 42^2, simply divide by 42\n    y = 1  # Since all factors' exponents must be 1, y must be such that 42*y is a product of unique prime factors\n\n    # Keep incrementing y and factorizing the product until all exponents are 1\n    while any(val > 1 for val in factorint(42 * y).values()):\n        y += 1\n\n    return x + y\n\nans = solution()"
    ],
    "9a8296da36564b8aa1d283b8fa70dd00": [
        "def solution():\n    total_weight = 600  # total weight of the solution in grams\n    concentration = 0.22  # concentration of sugar in the solution\n\n    sugar_weight = total_weight * concentration\n\n    return sugar_weight\n\nans = solution()"
    ],
    "d893d7be89fe4ab18afad5ace001607b": [
        "def solution():\n    # Let x be the number of marbles Larry had at first\n    # After giving 5/12 of his marbles to Mark, he had 7/12 left.\n    # Then he gave 30 marbles to Nate and 26 marbles to Ollie,\n    # and had 35 marbles left. We can set up the equation as:\n    # (7/12 * x) - 30 - 26 = 35\n    # Solving for x gives us the initial number of marbles.\n    \n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    \n    equation = Eq((7/12)*x - 30 - 26, 35)\n    initial_marbles = solve(equation, x)\n    \n    return initial_marbles[0]\n\nans = solution()"
    ],
    "62ddaa1b93c44e7f85b309208c5f28e6": [
        "def solution():\n    total_sum = 0\n    for number in range(1, 100):\n        digits = [int(digit) for digit in str(number)]\n        total_sum += sum(digits)\n    return total_sum\n\nans = solution()"
    ],
    "8fa4370c176d41b39b6866f139a48dde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Jess's and Jill's sweets\n    jess, jill = symbols('jess jill')\n\n    # First, set up the equations according to the problem\n    equation1 = Eq(jill, 6/5 * jess)                # Jill has six sweets for every five Jess has.\n    equation2 = Eq((jill - 8), 4/7 * (jess + 8))    # After the exchange, the ratio of Jill's to Jess's sweets.\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jess, jill))\n\n    # Calculate the total number of sweets\n    total_sweets = solutions[jess] + solutions[jill]\n\n    return total_sweets\n\nans = solution()"
    ],
    "dbf1101a135f495c9943bc0f68400a5b": [
        "def solution():\n    total_money = 4.44\n    portion_given = total_money / 4\n    return portion_given\n\nans = solution()"
    ],
    "4779c64adc47418a896e55784a17e2cb": [
        "def solution():\n    for num in range(10000, 100000):\n        if int('1' + str(num)) == int(str(num) + '1') / 3:\n            return num\n\nans = solution()"
    ],
    "ee0aa5d3849d485c9f2f52e25183c07d": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    current_date = datetime.now()\n    fred_age_years = 38\n    fred_age_months = 6\n\n    birth_year = (current_date.year - fred_age_years) - (1 if current_date.month <= fred_age_months else 0)\n\n    return birth_year\n\nans = solution()"
    ],
    "547a49466468412f8777a85ec725c904": [
        "def solution():\n    original_length = 12.6\n    piece_cut = 3.75\n    remaining_length = original_length - piece_cut\n    return remaining_length\n\nans = solution()"
    ],
    "532079a764c14bf09bd373b4c7fc5f7c": [
        "def solution():\n    ans = sum(i**4 for i in range(1, 20))\n    return ans\n\nans = solution()"
    ],
    "448302e8cd5b46e0b31999de01e48592": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the cost of one pie be 'p'\n    p = symbols('p')\n\n    # The cost of one cake will be 'p + 13' according to the problem\n    # p * number_of_pies = 15/22 * total_money\n    # (p + 13) * number_of_cakes = 7/22 * total_money\n    # number_of_pies = 4 * number_of_cakes\n    # We then translate these relationships into equations:\n    number_of_pies = 4 * symbols('number_of_cakes')  # introduce 'number_of_cakes' symbol\n    money_from_pies = 15/22 * 1848\n    money_from_cakes = 7/22 * 1848\n    equation1 = Eq(p * number_of_pies, money_from_pies)\n    equation2 = Eq((p + 13) * symbols('number_of_cakes'), money_from_cakes)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (p, symbols('number_of_cakes')))\n\n    # Return the number of cakes sold\n    return solutions[symbols('number_of_cakes')]\n\nans = solution()"
    ],
    "750dbb830f534f51927d1d1d3c9f04f8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    initial_money = symbols('initial_money')\n\n    # Money spent on CDs\n    cds_cost = initial_money / 4 + 3\n\n    # Money left after buying CDs\n    money_after_cds = initial_money - cds_cost\n\n    # Money spent on batteries\n    batteries_cost = 3 / 5 * money_after_cds + 6\n\n    # Money left after buying batteries\n    final_money_left = initial_money - cds_cost - batteries_cost\n\n    # Solve for initial money\n    equation = Eq(final_money_left, 24)\n    ans = solve(equation, initial_money)\n\n    return ans[0]\n\nans = solution()"
    ],
    "6e73517ab45147c1aa9d1e79e8150821": [
        "def solution():\n    return 345 * 76\n\nans = solution()"
    ],
    "7862ebf4ebee413a94b72306448a771f": [
        "def solution():\n    # Digits provided\n    digits = [0, 1, 3, 6, 8, 9]\n\n    # Count the total number of 4-digit even numbers\n    count = 0\n\n    # Loop through all possible positions for the units digit (which dictates that the number is even)\n    for units in [0, 6, 8]:\n        if units == 0:\n            # If the unit digit is '0', we have 4 options for the thousands place (can't be '0'),\n            # and then 4 options for the hundreds place and 3 for the tens place\n            count += 4 * 4 * 3\n        else:\n            # If the unit digit is not '0', we have 5 options for the thousands place,\n            # 4 for the hundreds place and 3 for the tens place\n            count += 5 * 4 * 3\n    \n    return count\n\nans = solution()"
    ],
    "20b70bb054c14b73a8185f937a535c5e": [
        "def solution():\n    # The units digit of 9 raised to any power cycles through a pattern: 1, 9, 1, 9...\n    # This is because 9^1 = 9 (units digit 9), then 9^2 = 81 (units digit 1), and then\n    # it starts repeating, with the units digit for every even power being 1, and \n    # for every odd power being 9.\n    # Thus, 9^2015 (odd power) has a units digit of 9, and 9^2016 (even power) has \n    # a units digit of 1. Adding these up, the units digit is 0.\n    \n    return 0\n\nans = solution()"
    ],
    "16b50c758e404b52b2f26d63ad9b63f4": [
        "from math import factorial\n\ndef solution():\n    # Calculate permutations for 5 men\n    men_permutations = factorial(5)\n    \n    # There are now 6 possible positions for women between and at the ends of the men\n    # Calculate permutations for 3 women in 6 positions\n    women_permutations = factorial(6) // factorial(6 - 3)\n\n    # Total arrangements are the product of men and women permutations\n    total_arrangements = men_permutations * women_permutations\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "07ad8fe80a0748e18cb311667f70b91b": [
        "def solution():\n    # Qiqi's speed (m/min)\n    qiqi_speed = 60\n    # Weiling's speed (m/min)\n    weiling_speed = 72\n    # Time difference at the start (minutes)\n    time_difference = 2\n    # Weiling arrives earlier than Qiqi (minutes)\n    weiling_earlier = 4\n\n    # Weiling's travel time is 4 minutes shorter than Qiqi's, \n    # and Weiling starts 2 minutes after Qiqi,\n    # so Weiling travels a total of 6 minutes less than Qiqi.\n    weiling_travel_time = qiqi_travel_time - time_difference - weiling_earlier\n    \n    # Distance is the same for both Qiqi and Weiling\n    # Qiqi's distance = Qiqi's speed * Qiqi's travel time\n    # Weiling's distance = Weiling's speed * Weiling's travel time\n    # Qiqi's distance = Weiling's distance\n    # Qiqi's speed * Qiqi's travel time = Weiling's speed * Weiling's travel time\n    # From the equation above, solve for one of the travel times\n    qiqi_travel_time = (weiling_speed * weiling_travel_time) / qiqi_speed\n\n    # Now, calculate the distance using Qiqi's speed and travel time\n    distance = qiqi_speed * qiqi_travel_time\n\n    return distance\n\nans = solution()"
    ],
    "546dbea8b6cf4aeb804964a448179516": [
        "from math import gcd\n\ndef solution():\n    length1 = 45\n    length2 = 30\n    longest_piece_length = gcd(length1, length2)\n    return longest_piece_length\n\nans = solution()"
    ],
    "9498ad8ff09a450b88310639f2e5e3b4": [
        "def solution():\n    beads = []\n    for i in range(40, 81):\n        if i % 4 == 0 and i % 7 == 0:\n            beads.append(i)\n    ans = beads[0] # since the range is limited, we only expect a single solution\n    return ans\n\nans = solution()"
    ],
    "e33cf79397014b3fbccf3f13532fa8db": [
        "def solution():\n    n = 525 // 25\n    return n\n\nans = solution()"
    ],
    "c69955d7ca0b48e1af24e735819ad11b": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    marcs_time = datetime.strptime(\"11:50 AM\", \"%I:%M %p\")\n    georges_watch_offset = timedelta(minutes=7)\n    marcs_watch_offset = timedelta(minutes=-15)\n    half_an_hour = timedelta(minutes=30)\n\n    # Adjust both watches to actual time\n    actual_time = marcs_time - marcs_watch_offset\n\n    # Calculate what time it will be on George's watch in 30 minutes\n    future_georges_time = actual_time + georges_watch_offset + half_an_hour\n\n    # Format the time to only show hours and minutes\n    ans = future_georges_time.strftime(\"%I:%M %p\")\n\n    return ans\n\nans = solution()"
    ],
    "6fe28da5b56043b6b8b677c81b5c9f70": [
        "def solution():\n    percentage = 45 / 100\n    total_amount = 540\n    amount = percentage * total_amount\n\n    return amount\n\nans = solution()"
    ],
    "da2ec31a074d412a8b7a5644870d32d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    h = symbols('h')\n    equation = Eq(2 * h, 25 + h)\n    solution = solve(equation, h)\n\n    return solution[0]\n\nans = solution()"
    ],
    "1c1ae09ff91145d8a4f35ba808809f50": [
        "def solution():\n    # rates of A and B independently\n    rate_A = 1 / 10\n    rate_B = 1 / 15\n    \n    # work done by A and B together per hour is the sum of individual rates\n    combined_rate = rate_A + rate_B\n    \n    # time required to complete the work together is the reciprocal of the combined rate\n    time_together = 1 / combined_rate\n    \n    return time_together\n\nans = solution()"
    ],
    "76e017050d7b464cbea52dfef7557a80": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for annual income and tax rate\n    income = symbols('income')\n    T = symbols('T')\n\n    # Define equations based on the problem description\n    # Equation for tax on the first $30000\n    tax_on_first_30000 = T * 30000 / 100\n\n    # Equation for tax on amount above $30000\n    tax_on_additional_income = (T + 3) * (income - 30000) / 100\n\n    # Total tax paid\n    total_tax_paid = tax_on_first_30000 + tax_on_additional_income\n\n    # Equation for the total tax being (T + 1) % of annual income\n    tax_percentage_of_income = Eq(total_tax_paid, (T + 1) * income / 100)\n\n    # Solve the equation for income\n    solutions = solve((tax_percentage_of_income,), (income,))\n\n    return solutions[income]\n\nans = solution()"
    ],
    "1c892f5e4d484f6c8248b19f022e669c": [
        "def solution():\n    jump_up = 3\n    fall_down = 2\n    jumps_per_cycle = 3\n    cycle_distance = (jump_up * jumps_per_cycle) - fall_down\n    tree_height = 31\n    remaining_height_after_cycles = tree_height % cycle_distance\n    cycles_to_reach_near_top = tree_height // cycle_distance\n    \n    if remaining_height_after_cycles == 0:\n        total_jumps = cycles_to_reach_near_top * jumps_per_cycle\n    elif remaining_height_after_cycles <= jump_up:\n        total_jumps = (cycles_to_reach_near_top * jumps_per_cycle) + 1\n    else:\n        total_jumps = ((cycles_to_reach_near_top + 1) * jumps_per_cycle)\n    \n    return total_jumps\n\nans = solution()"
    ],
    "9ac39bfb7cbf4ddfb0db66bd11dcd812": [
        "def solution():\n    # Let's denote x as the number of correct answers and y as the number of wrong answers.\n    # According to the problem description, we have two equations:\n    # x + y = 30 (total questions)\n    # 5x - y = 90 (total score if 5 marks are awarded for each correct answer and 1 mark is deducted for each wrong answer)\n    \n    for x in range(31):\n        y = 30 - x\n        if 5 * x - y == 90:\n            return x\n\nans = solution()"
    ],
    "ac8d3bc867394370882a34f8da7d69b5": [
        "def solution():\n    result = 20.14 * 4.4\n    return result\n\nans = solution()"
    ],
    "353773f473b443be8571fddf31056166": [
        "def solution():\n    for num in range(1, 101):\n        if num % 3 == 0 and num % 7 == 0:\n            if (num - 2) % 8 == 0:\n                return num\n\nans = solution()"
    ],
    "ae8336c2fd0e4359a933990f040a86cb": [
        "def solution():\n    # We need to consider the worst case scenario using the pigeonhole principle.\n    # If we want four marbles of different colours, we need to consider the situation where\n    # we pick as many marbles as possible without getting four different colors.\n\n    # If we pick all 3 red marbles, we still don't have four different colors.\n    # Next, we pick another color, let's say blue. We can pick up to 3 blue marbles,\n    # and we still don't have four different colors.\n    # Next, we pick yellow marbles. Again, we can pick 3 yellow marbles.\n    # At this point, we have 3 red, 3 blue, and 3 yellow marbles.\n\n    # We are guaranteed to get the fourth color on the next draw, regardless of the color.\n    # So to ensure 4 different colors, we need to draw at least 1 more marble.\n    \n    ans = 3 + 3 + 3 + 1  # Red + Blue + Yellow + 1 more for the fourth color\n    return ans\n\nans = solution()"
    ],
    "a42c9894b8224a81a0f9cfb0f1077f4c": [
        "def solution():\n    ans = 1.29 * 1000\n    return ans\n\nans = solution()"
    ],
    "d1d60aa85e194b498d447ca654276627": [
        "def solution():\n    # Calculate the year when Gigi was 45 years old\n    gigi_45_year = 2002\n\n    # Calculate Gigi's birth year\n    gigi_birth_year = gigi_45_year - 45\n\n    # Calculate the year when Jenny was 22 years old\n    # First find Jenny's age on 15th May 1995\n    jenny_1995_age = 22\n    jenny_1995_year = 1995\n\n    # Then calculate Jenny's birth year\n    jenny_birth_year = jenny_1995_year - jenny_1995_age\n\n    # Now, calculate the year when Gigi was 22\n    gigi_22_year = gigi_birth_year + 22\n\n    # Finally, calculate how old Jenny was when Gigi was 22\n    jenny_age_when_gigi_22 = gigi_22_year - jenny_birth_year\n\n    return jenny_age_when_gigi_22\n\nans = solution()"
    ],
    "de02c9bb61484cb9a5967b90fb5f9477": [
        "def solution():\n    first_term = 50\n    difference = 46 - 50\n    \n    # the smallest positive term is 2 because it's the first positive even number that can be reached by the sequence\n    last_term = 2 \n    \n    num_terms = ((last_term - first_term) / difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "9be7c60631db43ffa0e913650c7d7c6b": [
        "def solution():\n    number = 0\n    for i in range(1, 1000):  # Check within a reasonable range\n        if i % 3 == 0 and i % 8 == 0 and str(i)[-1] == '2':\n            number = i\n            break\n    return number\n\nans = solution()"
    ],
    "c8cbb563970b472ca93e23b6fef1e7dc": [
        "def solution():\n    total_cost = (5 * 0.99) + (2 * 1.98)\n    return total_cost\n\nans = solution()"
    ],
    "853aa802a45a48ae9162dda36b40c38c": [
        "def solution():\n    for last_digit in range(10):\n        number = int(f\"451{last_digit}\")\n        if number % 3 == 0 and number % 5 != 0 and number % 9 != 0:\n            return last_digit\n\nans = solution()"
    ],
    "e8dbdad37fe840819b36a79b108b7bcc": [
        "def solution():\n    # The sum of the digits must be divisible by 9 for the whole number to be divisible by 9.\n    digits_sum = 2 + 0 + 1 + 9 + 0 + 4 + 0 + 6\n    # Find the smallest number that, when added to digits_sum, makes the total divisible by 9.\n    for A in range(10):\n        if (digits_sum + A) % 9 == 0:\n            return A\n\nans = solution()"
    ],
    "35ecce2854094a7ab058c59fade67c60": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime(2023, 5, 15)  # Assuming the current year is 2023\n    duration = timedelta(weeks=3)\n\n    end_date = start_date + duration\n\n    return end_date.strftime('%Y-%m-%d')\n\nans = solution()"
    ],
    "5caa8c8d8485429793ce2c81b896b975": [
        "def solution():\n    total_apples = 12\n    count = 0\n    for group1 in range(1, total_apples):\n        group2 = total_apples - group1\n        if group1 < group2:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b9f0a0188fd34cb597620588c14138ba": [
        "def solution():\n    speed_water = 25\n    speed_current = 3\n    distance = 140\n\n    speed_downstream = speed_water + speed_current\n\n    time = distance / speed_downstream\n\n    return time\n\nans = solution()"
    ],
    "7c20e08dc4ee4e90b36a5ebc67c30bf0": [
        "def solution():\n    original_price = 30\n    discount_percentage = 15\n    sale_price = original_price * (1 - (discount_percentage / 100))\n    \n    return sale_price\n\nans = solution()"
    ],
    "78ede9ed721a48f2b277058be8293b71": [
        "def solution():\n    from math import pow, sqrt\n\n    numerator = -6.94 - pow(9.604, 1/3)\n    denominator = sqrt(44.541 / 67) - (-377 / 6 * 5 / 3)\n\n    ans = numerator / denominator\n\n    return round(ans, 3)\n\nans = solution()"
    ],
    "742450894fd54f4eb51a1b84280864eb": [
        "def solution():\n    bracelets_cost = 5 * 0.99\n    cards_cost = 2 * 1.98\n    total_cost = bracelets_cost + cards_cost\n    return total_cost\n\nans = solution()"
    ],
    "2a035f2d1ebc482193f41e5de7e3022d": [
        "def solution():\n    for correct in range(21):\n        wrong = 20 - correct\n        if correct * 5 - wrong * 2 == 51:\n            return correct\n\nans = solution()"
    ],
    "66967fd57a7c491592192fe52883de6a": [
        "def solution():\n    total_cost = 12.15\n    cost_per_cupcake = 3.25\n    total_cupcakes_cost = 3 * cost_per_cupcake\n    cost_for_drinks = total_cost - total_cupcakes_cost\n    cost_per_drink = cost_for_drinks / 2\n    return cost_per_drink\n\nans = solution()"
    ],
    "c48000b870b0411c9680bd0939cc2c12": [
        "def solution():\n    differences = [20 - 8, 31 - 20, 41 - 31, 50 - 41]\n    second_differences = [differences[i+1] - differences[i] for i in range(len(differences)-1)]\n    \n    next_second_difference = second_differences[-1]  # In a double arithmetic sequence, the second differences are constant\n    next_difference = differences[-1] + next_second_difference\n    next_number = 50 + next_difference  # The last number in the provided sequence is 50\n\n    return next_number\n\nans = solution()"
    ],
    "b811cf9ea3a34145953b30f3ef9f811c": [
        "def solution():\n    from math import lcm\n\n    # Convert minutes to seconds\n    half_minute_to_seconds = 30\n    three_quarters_minute_to_seconds = 0.75 * 60\n    \n    # LCM of first two traffic lights in seconds\n    lcm_first_two = lcm(half_minute_to_seconds, three_quarters_minute_to_seconds)\n    \n    # Every 9 minutes in seconds\n    nine_minutes_to_seconds = 9 * 60\n    \n    # LCM of all three traffic lights should be 9 minutes (540 seconds)\n    # Hence, we find the factor of 540 that is the third light's cycle time\n    # That must be at least 30 seconds and a factor of 540\n    for i in range(30, nine_minutes_to_seconds + 1):\n        if nine_minutes_to_seconds % i == 0 and lcm(lcm_first_two, i) == nine_minutes_to_seconds:\n            return i\n\nans = solution()"
    ],
    "933caaafe98a48ce8e5379db15d6d8f0": [
        "def solution():\n    numbers = [9, 1, 7, 4, 3, 6, 8]\n    mean_value = 5\n    number_of_values = 8\n    total_sum = mean_value * number_of_values\n    sum_of_known_numbers = sum(numbers)\n    missing_number = total_sum - sum_of_known_numbers\n    return missing_number\n\nans = solution()"
    ],
    "d8bd98baadc745c5867262a1f291c0c0": [
        "from sympy import symbols, solve\n\ndef solution():\n    # Symbolic variables\n    a, b, rolls = symbols('a b rolls')\n    \n    # Equations corresponding to the problem statement\n    # a + b + 11 equals a multiple of 36 (full bus)\n    equation1 = (a + b + 11) % 36\n    \n    # Total photographs taken by A group with B group\n    total_pictures = a * b\n    \n    # Each roll of film takes 36 pictures, so count the number of full rolls and the leftover\n    equation2 = (total_pictures - rolls * 36)\n    \n    # Since we want to find the additional pictures that the last roll takes, it should be less than 36\n    equation3 = rolls * 36 - total_pictures\n    \n    # Solve equations in terms of rolls, because that's the number in the last roll of film\n    solutions = solve((equation1, equation2, equation3), (a, b, rolls))\n    \n    # We are interested in the number of additional pictures that last roll of film takes, which is rolls\n    # And we're looking for the non-negative solution\n    final_solution = [s[rolls] for s in solutions if s[rolls] >= 0 and s[rolls] < 36]\n\n    # Solution should be a single value\n    ans = final_solution[0] if final_solution else None\n    return ans\n\nans = solution()"
    ],
    "734f5828407148b5a9e8d2668afc7458": [
        "def solution():\n    number = 0\n    for n in range(60, 71):\n        if n % 7 == 0 and n % 9 == 0:\n            number = n\n            break\n    return number\n\nans = solution()"
    ],
    "30b87370b94246ef86d748c09d9b63b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    daniel, ming = symbols('daniel ming')\n    \n    # Daniel is four times as old as Ming\n    equation1 = Eq(daniel, 4 * ming)\n    \n    # Six years later, the sum of their ages will be 62\n    equation2 = Eq(daniel + 6 + ming + 6, 62)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (daniel, ming))\n    \n    return solutions[daniel]\n\nans = solution()"
    ],
    "26bb5c0bcd0e4e05994c3b21387ff92f": [
        "def solution():\n    weight_per_paper = 25\n    number_of_girls = 250\n    total_weight_grams = weight_per_paper * number_of_girls\n    grams_in_kilogram = 1000\n    \n    total_weight_kilograms = total_weight_grams / grams_in_kilogram\n    \n    return total_weight_kilograms\n\nans = solution()"
    ],
    "21e75f5992e7425ab944a24b2a56d916": [
        "from itertools import permutations\n\ndef solution():\n    cards = [1, 2, 8, 9]\n    max_product = 0\n    for perm in permutations(cards):\n        num1 = perm[0] * 10 + perm[1]\n        num2 = perm[2] * 10 + perm[3]\n        max_product = max(max_product, num1 * num2)\n    return max_product\n\nans = solution()"
    ],
    "976b95e20676470a955c0924996ff02d": [
        "def solution():\n    # Since A cannot pass the ball to themselves, they have 3 options for the first pass.\n    first_pass_options = 3\n    \n    # The second pass also cannot be to A, and cannot be to the person who just passed the ball. So, 2 options remain.\n    second_pass_options = 2\n    \n    # The third pass must be to A, but A was not the one who passed the ball in the second pass.\n    # The last player has only A to pass the ball to, since they received from another.\n    third_pass_options = 1\n    \n    # The total is the product of the options for each pass.\n    total_methods = first_pass_options * second_pass_options * third_pass_options\n    \n    return total_methods\n\nans = solution()"
    ],
    "5127cf4b12c348eeaec2b82e72f95ae5": [
        "def solution():\n    ans = sum((1000 - 2 * i) ** 2 - (998 - 2 * i) ** 2 for i in range(500))\n    return ans\n\nans = solution()"
    ],
    "ac7f27e33493434bb1574b2c4a2d01c2": [
        "def solution():\n    n = 1\n    while True:\n        if (n * (n + 2) * (n + 4)) == 2688:\n            return n + 4\n        n += 2\n\nans = solution()"
    ],
    "8ac10a7ccfe44215b75cf06a67533c06": [
        "def solution():\n    from math import gcd\n\n    # Calculate the greatest common divisor (GCD) of all three numbers\n    ans = gcd(gcd(28, 84), 126)\n\n    return ans\n\nans = solution()"
    ],
    "699943037ddb46d287bd76abad9b6da4": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 3 == 0 and num % 11 == 0:\n            if (num - 1) % 2 == 0 and (num - 1) % 7 == 0:\n                return num\n\nans = solution()"
    ],
    "fc44184a4b6a4decbe05a477d57fc9ed": [
        "def solution():\n    total_cupcakes = 10\n    ways = 0\n\n    for i in range(1, total_cupcakes):\n        for j in range(1, total_cupcakes):\n            if i != j and i + j == total_cupcakes:\n                ways += 1\n\n    # Each combination is counted twice (e.g., (1,9) and (9,1)), so we halve the number of ways\n    ways //= 2\n    return ways\n\nans = solution()"
    ],
    "75d9330dae2941ad9484a74e2379bd60": [
        "def solution():\n    # Let x be the length of the second bridge in meters\n    # The entire length of the line (3 meters) takes 8 seconds to cross the first bridge,\n    # so the time taken to cross just the bridge (without considering the extra 3 meters) is 8 - (3/9)*8 = 8 - (8/3) seconds\n    # This is because the line is moving at a speed where 9 meters is crossed in 8 seconds,\n    # so for a 3 meter-line to completely get on the bridge, it would take (3/9) of the full time\n    time_to_cross_first_bridge = 8 - (8/3)\n\n    # Similarly, the time taken to cross just the second bridge\n    # without considering the extra 3 meters is 10 - (3/x)*10 seconds\n    # Here we have an equation: (9 / (8 - 8/3)) = (x / (10 - 30/x)) which simplifies to:\n    # (9 / (16/3)) = (x / (10 - 30/x))\n    # Solving for x gives us the length of the second bridge\n    # Cross-multiply and simplify    \n    x = 9 * (10 - 30/x) / (16/3)\n    # Multiply both sides by x to get rid of the fraction\n    x_squared = 9 * (10*x - 30) / (16/3)\n    # Now we have 16/3 * x_squared = 9 * (10*x - 30)\n    # which simplifies to 16x^2 = 270x - 810\n    # Rearrange the equation\n    x_squared = (270*x - 810) * (3/16)\n    # Solve the quadratic equation for x\n    # x = 270/16 which simplifies\n    x = 270/16\n\n    return x\n\nans = solution()"
    ],
    "d33e99d3f1614fde81acb0bcf2ddf29a": [
        "def solution():\n    # Number of people on Crystal's left and right\n    left_side = 11\n    right_side = 7\n    \n    # Counting Crystal herself\n    crystal = 1\n    \n    # Total people in one row\n    one_row = left_side + right_side + crystal\n    \n    # Total number of rows\n    rows = 2\n    \n    # Total people in P1 class\n    total_people = one_row * rows\n    \n    return total_people\n\nans = solution()"
    ],
    "35cc2d1e692e433a9edb2ca57099c016": [
        "def solution():\n    from sympy import factorint\n\n    factorization = factorint(224)\n    factors_count = 1\n    for exponent in factorization.values():\n        factors_count *= (exponent + 1)\n    \n    return factors_count\n\nans = solution()"
    ],
    "e6b14f6552294cf9bfe42605e064c5f3": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_time = datetime.strptime('8:30 AM', '%I:%M %p')\n    total_minutes = (3 * 45) + (2 * 5)  # 3 lessons plus 2 moving periods\n    break_time = start_time + timedelta(minutes=total_minutes)\n    ans = break_time.strftime('%I:%M %p')\n    return ans.strip('0')\n\nans = solution()"
    ],
    "889a39026ec84d3e84f3871155b05e7a": [
        "def solution():\n    # Iterate through possible values for the tens digit\n    for b in range(1, 10):\n        a = b - 5  # hundreds digit is 5 less than the tens digit\n        c = b - 2  # ones digit is 2 less than the tens digit\n\n        # Half the sum of the 3 digits is the same as the tens digit\n        if (a + b + c) / 2 == b and a > 0:\n            return a * 100 + b * 10 + c\n\nans = solution()"
    ],
    "566f34b38ba04e8f88aa14c24a1773e4": [
        "def solution():\n    from math import gcd\n\n    # Compute the greatest common divisor of 28, 84, and 126\n    ans = gcd(gcd(28, 84), 126)\n    \n    return ans\n\nans = solution()"
    ],
    "c81f5752a9034395af391ec11de7b293": [
        "def solution():\n    total_eggs = 65\n    eggs_per_box = 6\n\n    full_boxes = total_eggs // eggs_per_box\n    \n    return full_boxes\n\nans = solution()"
    ],
    "dc51c8ed80f14b4fb5ff275cbe1ab05c": [
        "def solution():\n    neha_won = 12018\n    jasmine_won = 309\n    total_won = neha_won + jasmine_won\n    return total_won\n\nans = solution()"
    ],
    "d44b505766094322ba1d157aa0c69927": [
        "def solution():\n    one_fourth_of_16 = 16 * 1/4\n    one_half_of_x = one_fourth_of_16\n    x = one_half_of_x * 2\n    return x\n\nans = solution()"
    ],
    "ea7852a3c82f44b998bc40a543ec62cd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let f be the number of $5 notes and t be the number of $10 notes.\n    f, t = symbols('f t')\n\n    # Two equations based on the given information\n    # Total number of notes is f + t = 57.\n    total_notes = Eq(f + t, 57)\n\n    # Spent 60% of $10 notes and 25% of $5 notes on a bag\n    # Remaining notes: 0.4 * t $10 notes, 0.75 * f $5 notes\n    # After spending he was left with twice as many $10 notes as $5 notes: 0.4 * t = 2 * 0.75 * f\n    remaining_notes = Eq(0.4 * t, 2 * 0.75 * f)\n\n    # Solve the system of equations\n    solutions = solve((total_notes, remaining_notes), (f, t))\n\n    # Amount spent on the bag is the sum of 60% of the $10 notes and 25% of the $5 notes\n    cost_bag = 0.60 * solutions[t] * 10 + 0.25 * solutions[f] * 5\n\n    return cost_bag\n\nans = solution()"
    ],
    "84ff7543ed7e4cf78a5bf1c71f95827d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    troy, adam = symbols('troy adam')\n\n    # Troy had 5 times as many coins as Adam\n    equation1 = Eq(troy, 5 * adam)\n\n    # After Adam took 24 more coins, he had 1/3 as many as Troy\n    equation2 = Eq(adam + 24, troy / 3)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (troy, adam))\n\n    total_coins_initially = solutions[troy] + solutions[adam]\n\n    return total_coins_initially\n\nans = solution()"
    ],
    "8fc6e7b3c33b401c8a75af3f7886a7a5": [
        "def solution():\n    count = 0\n    for i in range(1000, 10000):\n        product = 1\n        for digit in str(i):\n            product *= int(digit)\n        if product == 8:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a7318cfeb5c6465bbe4c97e1828d60ef": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_amount = symbols('initial_amount')\n\n    after_cds = initial_amount / 4 + 3\n    remaining_after_cds = initial_amount - after_cds\n    after_batteries = 3/5 * remaining_after_cds + 6\n    remaining_after_batteries = remaining_after_cds - after_batteries\n\n    equation = Eq(remaining_after_batteries, 24)\n    solution = solve(equation, initial_amount)\n\n    return solution[0]\n\nans = solution()"
    ],
    "4f279967112d4e8291b26b30696f3212": [
        "def solution():\n    ans = (18 / 16) * (16 * 15) / (5 * 3)\n    return ans\n\nans = solution()"
    ],
    "a3b714dd4cfa4127838d98a3fa713af3": [
        "def solution():\n    count = 0\n    # Since the number is even, the last digit can only be 0, 2, 4, 6, or 8.\n    for last_digit in [0, 2, 4, 6, 8]:\n        for first_digit in range(1, 10):  # The first digit cannot be 0.\n            for second_digit in range(10):  # The second digit can be 0-9.\n                # The sum of the digits must be 8, and all digits must be different.\n                if first_digit + second_digit + last_digit == 8 and len({first_digit, second_digit, last_digit}) == 3:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "486b933d7136464ebf2a797cb5af1ae2": [
        "def solution():\n    # In the worst case, Darrell could draw all the blue and white beads before getting the 5 green beads.\n    # The total number of blue and white beads is 5 + 6\n    blue_and_white = 5 + 6\n\n    # Darrell then needs to draw 5 green beads for sure, so the total is\n    total = blue_and_white + 5\n\n    return total\n\nans = solution()"
    ],
    "2ccb49f86adf445b9ee2629356df536a": [
        "def solution():\n    for i in range(6, 55):\n        if i % 5 == 0 and (i + 1) % 7 == 0:\n            return i\n\nans = solution()"
    ],
    "57bbf7c2710645ddb501b125a1011400": [
        "def solution():\n    return 8\n\nans = solution()"
    ],
    "84324bf350214be1afe8ddd33f8aafd5": [
        "def solution():\n    number = 0\n    while True:\n        number += 1\n        if (number % 3 == 2) and (number % 4 == 2) and (number % 5 == 2) and (number % 7 == 0):\n            return number\n\nans = solution()"
    ],
    "81791dec21a04fdeb351302cab2f3155": [
        "def solution():\n    first_term = 2\n    last_term = 58\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "a671b7c0ccab40f5bd855f933009765d": [
        "def solution():\n    # Calculate the number of games in the group stage using round-robin formula \n    # Formula for round-robin: n(n-1)/2 games where n is the number of participants in a group\n    people_per_group = 16 // 4  # 4 groups\n    games_group_stage = 4 * (people_per_group * (people_per_group - 1) // 2)\n\n    # Calculate the number of games in the knockout rounds\n    # 8 participants in the first knockout round -> 4 games\n    # 4 participants in the second knockout round -> 2 games\n    # 2 participants in the third knockout round -> 1 game\n    # No game for determining the fourth place, so we don't count any game there.\n    games_knockout_rounds = 8 // 2 + 4 // 2 + 2 // 2\n\n    # The total number of games is the sum of the group stage games and knockout games\n    total_games = games_group_stage + games_knockout_rounds\n\n    return total_games\n\nans = solution()"
    ],
    "88fc6c95b74d4d2fac199a6028657150": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    \n    # A is twice as good as B. This means that the ratio of work done by A to B is 2:1.\n    # If B takes B days to finish the work, A will take B/2 days.\n    # We know A takes 12 days less than B, so we set up the equation B/2 = B - 12.\n    equation1 = Eq(B/2, B - 12)\n\n    # Solve for B\n    B_days = solve(equation1, B)[0]\n\n    # Now, we find the rate of work for A and B.\n    # Work is considered as 1 unit, since they are finishing a job.\n    A_rate = 1 / (B_days / 2)\n    B_rate = 1 / B_days\n    \n    # The combined rate of work for A and B when they work together.\n    combined_rate = A_rate + B_rate\n    \n    # The time it takes for A and B to complete the job together is 1 unit of work divided by their combined rate.\n    time_together = 1 / combined_rate\n\n    return time_together\n\nans = solution()"
    ],
    "7196414549e64d5ca1eabc28ed2a8caa": [
        "from math import factorial\n\ndef solution():\n    n = 9  # total number of potted plants\n    k = 4  # number of potted plants to arrange in a row\n\n    # Calculate the number of permutations: P(n, k) = n! / (n - k)!\n    permutations = factorial(n) // factorial(n - k)\n\n    return permutations\n\nans = solution()"
    ],
    "e103c3656a5446f89488050c094e88fb": [
        "def solution():\n    total_people = 25\n    like_bananas = 18\n    like_apples = 12\n\n    # Using the Inclusion-Exclusion Principle\n    like_both = like_bananas + like_apples - total_people\n\n    return like_both\n\nans = solution()"
    ],
    "bf578d94e713400d83f878025fcbf395": [
        "def solution():\n    final_stickers = 489\n    given_away = 76\n    bought = 65\n\n    initial_stickers = final_stickers - bought + given_away\n\n    return initial_stickers\n\nans = solution()"
    ],
    "b69502e313be4bbcab0a850bb20d73b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    # If Rachel gives Alice 10 pieces, they have the same number\n    equation1 = Eq(rachel - 10, alice + 10)\n\n    # If Alice gives Rachel 10 pieces, Rachel has 4 more than 3 times Alice's candies\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    total_candies = solutions[rachel] + solutions[alice]\n\n    return total_candies\n\nans = solution()"
    ],
    "ba7ace62e80a46f8982696e6de196708": [
        "def solution():\n    return 158 * 23\n\nans = solution()"
    ],
    "5e0d1fe1598b4b41acce8ca7d7a1255b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pineapple, apple = symbols('pineapple apple')\n    \n    equation1 = Eq(pineapple - apple, 650)\n    equation2 = Eq(3 * pineapple + 4 * apple, 5450)\n    \n    solutions = solve((equation1, equation2), (pineapple, apple))\n\n    return solutions[pineapple]\n\nans = solution()"
    ],
    "2174c9eb7abb4f71acfc17373e2a150d": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 3), (2, 4), (2, 5), (0, 7)]\n    ans = solve_congruence(*congruences)[0]\n    \n    return ans\n\nans = solution()"
    ],
    "33fa644455fd44ab8c76126614f2a54f": [
        "def solution():\n    ans = 520 + (180 - 320)\n    return ans\n\nans = solution()"
    ],
    "68623df2f94648e0b20904cbcc43ed94": [
        "def solution():\n    belinda_tomatoes = 36\n    given_tomatoes = 7\n\n    matthew_tomatoes = belinda_tomatoes - given_tomatoes\n\n    return matthew_tomatoes\n\nans = solution()"
    ],
    "f0fc9e28a3cd44f985074b04f9b45f45": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 10):\n        if perm[0] != 8:  # Given the leftmost digit must be 8\n            continue\n        if perm[-1] % 2 != 0:  # Last digit must be even for divisibility by 10\n            continue\n\n        num_str = ''.join(map(str, perm))\n        all_divisible = True\n\n        for i in range(1, 10):\n            if int(num_str[:i]) % (i + 1) != 0:\n                all_divisible = False\n                break\n        \n        if all_divisible:\n            return int(num_str)\n\nans = solution()"
    ],
    "cd2c86b449f14cc58b97e4c02a818e7c": [
        "def solution():\n    from math import gcd\n\n    # Given numbers\n    a = 2012\n    b = 1274\n    \n    # The possible value of D is the gcd of the differences of the numbers\n    D = gcd(a, b)\n    \n    # Get the remainder when both numbers are divided by D\n    R = a % D\n    \n    # Calculate D - R\n    ans = D - R\n    \n    return ans\n\nans = solution()"
    ],
    "ac5194c88a70467cad49c435e839d329": [
        "def solution():\n    total_height_of_six = 6 * 150\n    average_height_of_four = 150 - 2\n    total_height_of_four = 4 * average_height_of_four\n    total_height_of_other_two = total_height_of_six - total_height_of_four\n    average_height_of_other_two = total_height_of_other_two / 2\n    \n    return average_height_of_other_two\n\nans = solution()"
    ],
    "d912f4012f844228bafad624ceda9c23": [
        "def solution():\n    for rabbits in range(8):  # There cannot be more than 7 rabbits\n        ducks = 7 - rabbits\n        if 4 * rabbits + 2 * ducks == 20:  # Rabbits have 4 legs, ducks have 2 legs\n            return rabbits\n\nans = solution()"
    ],
    "91805eebef62437a8beff8b33e922e50": [
        "def solution():\n    # We know that 15 and 21 are factors of the number, so their product must be a multiple of the number.\n    # Least common multiple (LCM) of 15 and 21 gives us a multiple that contains both factors.\n    from math import gcd\n    lcm_15_21 = (15 * 21) // gcd(15, 21)  # LCM is equivalent to a*b/gcd(a,b)\n\n    # Since the number has exactly eight factors, and we know two distinct ones,\n    # it means that the number itself must be a perfect square (because a*b = N, a and b being factors,\n    # will yield a pair of factors; for there to be an odd number of unique factors, N must be a square).\n    # Thus, we need to find the square root of lcm_15_21 to find the number.\n    root = lcm_15_21 ** 0.5\n    \n    # We only consider integer square roots (since the number is a positive integer).\n    if root.is_integer():\n        number = int(root) ** 2\n    else:\n        # If the square root is not integer, we need to adjust the factors until we find a square number with 8 factors.\n        # The factors of a square number n^2 are 1, n, and the pairs of factors of n (excluding n itself).\n        # Therefore, for n^2 to have 8 factors, n must have 3 factors (1, p, q, n).\n        # To have three factors, n must be the square of a prime (since its factors are 1, prime, and prime^2).\n        # We find this by trying primes from the primes that are factors of lcm.\n        from sympy import isprime, primefactors\n        factors = primefactors(lcm_15_21)\n        for prime in factors:\n            if isprime(prime):\n                trial_number = prime ** 4\n                if len(set(trial_number // f for f in [1, 15, 21, prime, prime*15, prime*21])) == 8:\n                    number = trial_number\n                    break\n    \n    # Once we have the number, sum its factors.\n    ans = sum(set(number // i for i in range(1, int(number**0.5)+1) if number % i == 0))\n    return ans\n\nans = solution()"
    ],
    "9005f1b685f54bf5852f34fd3b024fd5": [
        "def solution():\n    total_juice = 630\n    grace_juice = (5/7) * total_juice\n    remaining_after_grace = total_juice - grace_juice\n    evelyn_juice = (1/9) * remaining_after_grace\n    remaining_after_evelyn = remaining_after_grace - evelyn_juice\n\n    return remaining_after_evelyn\n\nans = solution()"
    ],
    "836113e2b5c3443e9bf7aa438b3388f2": [
        "def solution():\n    # Define a function to determine if a position is winning or losing\n    def is_winning(n):\n        if n <= 0:  # Base cases\n            return False\n        if n in [1, 3, 4, 6]:  # Immediate winning moves\n            return True\n        # If there is any move that leads to a losing position,\n        # then it is a winning position.\n        if not is_winning(n - 1) or not is_winning(n - 3) \\\n                or not is_winning(n - 4) or not is_winning(n - 6):\n            return True\n        return False\n\n    # Winning strategy: always leave a losing position for your opponent.\n    # To find the losing positions, assume the simplest losing position is 2 (as 1 is winning).\n    # By taking 1, 3, 4, 6 from the next number, if any results in a losing position,\n    # then the current one is winning.\n    losing_positions = []\n    for n in range(1, 53):\n        if not (is_winning(n - 1) or is_winning(n - 3) or\n                is_winning(n - 4) or is_winning(n - 6)):\n            losing_positions.append(n)\n\n    # Check if the first move (number 52) is in a losing position\n    if 52 in losing_positions:\n        # Betty should go second and always leave a losing number for Abby.\n        return \"Second\", losing_positions\n    else:\n        # Betty should go first and follow the strategy to leave a losing number for Abby.\n        return \"First\", losing_positions\n\nans = solution()"
    ],
    "c199e1915ab2422a868443394b9ff1a6": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n    \n    # Congruences based on the problem statement\n    # x = 1 (mod 5)\n    # x = 1 (mod 6)\n    # x = 1 (mod 7)\n    congruences = [(1, 5), (1, 6), (1, 7)]\n\n    # Solve the system of congruences using the Chinese Remainder Theorem\n    ans = solve_congruence(*congruences)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "85f18b88abb847d2ac8ed05a32300b15": [
        "def solution():\n    ways = 0\n    # x represents the number of 2-gram weights, y represents the number of 5-gram weights\n    # 2x + 5y = 63\n    for x in range(0, int(63 / 2) + 1):\n        if (63 - 2 * x) % 5 == 0:\n            ways += 1\n    return ways\n\nans = solution()"
    ],
    "62087bcec6884796a1c5b9acd6d5f3a0": [
        "def solution():\n    jug_litres = 1  # 1 litre = 1000 ml\n    cup_ml = 200  # 200 ml for each cup\n    cups = 3  # number of cups\n\n    water_left = jug_litres*1000 - cup_ml*cups  # convert litres to ml and subtract the total ml used\n\n    return water_left\n\nans = solution()"
    ],
    "64fc86fe03b44fa5a15210295474c594": [
        "def solution():\n    # Calculate the last digit of 4^2009\n    last_digit_4_2009 = (4 ** 2009) % 10\n    \n    # Calculate the last digit of 6^2010\n    last_digit_6_2010 = (6 ** 2010) % 10\n    \n    # Sum the last digits and find the last digit of the sum\n    sum_last_digit = (last_digit_4_2009 + last_digit_6_2010) % 10\n    \n    return sum_last_digit\n\nans = solution()"
    ],
    "bf508186ac3b4867b029488d3fe8ef88": [
        "def solution():\n    # Let the first term of the sequence be 'a' and the common difference be 'd'\n    # The sum of the first n terms of an arithmetic sequence is given by:\n    # S_n = n/2 * (2a + (n - 1)d)\n    # Given S_8 = 32 and S_22 = 44, we can set up two equations\n\n    from sympy import symbols, Eq, solve\n    \n    a, d = symbols('a d')\n    S_8 = Eq(8/2 * (2*a + (8 - 1)*d), 32)\n    S_22 = Eq(22/2 * (2*a + (22 - 1)*d), 44)\n    \n    # Solving the system to find 'a' and 'd'\n    solutions = solve((S_8, S_22), (a, d))\n    a_val = solutions[a]\n    d_val = solutions[d]\n    \n    # Now find the sum of the first 15 terms using the values of 'a' and 'd'\n    S_15 = 15/2 * (2*a_val + (15 - 1)*d_val)\n    return S_15\n\nans = solution()"
    ],
    "ace93f555d35415e8fd4bad294887d9e": [
        "def solution():\n    total_problems = 10 + 20 + 30\n    total_correct = (10 * 0.20) + (20 * 0.80) + (30 * 0.90)\n    \n    overall_percentage = (total_correct / total_problems) * 100\n    \n    return overall_percentage\n\nans = solution()"
    ],
    "5be13676699942f49a395268e1f5d8e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of water A can fill, y be the amount that B can fill, and z be the amount C can fill\n    x, z = symbols('x z')\n\n    # A + C = A's part + pool capacity\n    # B + C = B's part + pool capacity\n    # B's flow rate is 2x A's flow rate, hence y = 2x\n    equation1 = Eq(x + z, 18 + z)\n    equation2 = Eq(2*x + z, 27 + z)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, z))\n\n    # Pool capacity is A's part + A's flow rate\n    pool_capacity = solutions[x] + 18\n\n    return pool_capacity\n\nans = solution()"
    ],
    "3ad80911c83e482091540057163573aa": [
        "def solution():\n    # There are 5 choices for the first letter,\n    # 4 choices left for the second letter,\n    # 3 choices left for the third letter,\n    # and 2 choices left for the last letter.\n    ans = 5 * 4 * 3 * 2\n    return ans\n\nans = solution()"
    ],
    "4fbbbe33f9d643a79e9eec4d1694212f": [
        "def solution():\n    total_questions = 25\n    points_correct = 4\n    points_incorrect = -2\n    no_attempt = 0\n    rex_score = 66\n    answered_questions = total_questions - 1\n    \n    # Let x be the number of correct answers, and y be the number of incorrect answers\n    # x + y = 24 (because Rex answered all but one question)\n    # 4x - 2y = 66 (because each correct answer gives 4 points and each incorrect answer subtracts 2 points)\n\n    for x in range(answered_questions + 1):\n        y = answered_questions - x\n        if points_correct * x + points_incorrect * y == rex_score:\n            return x\n\nans = solution()"
    ],
    "08e324d694994846a1553d5b65da495f": [
        "def solution():\n    from itertools import permutations\n\n    digits = [1, 3, 4, 5, 7, 8]\n    greatest_number = 0\n\n    for perm in permutations(digits):\n        number = int(\"\".join(map(str, perm)))\n        if number % 11 == 0 and number > greatest_number:\n            greatest_number = number\n            \n    return greatest_number\n\nans = solution()"
    ],
    "4ee96f3c14a241f197933544bbe8db53": [
        "def solution():\n    original_amount = 9.32\n    increase_fraction = 1 / 10\n    increase_amount = original_amount * increase_fraction\n    final_amount = original_amount + increase_amount\n\n    return final_amount\n\nans = solution()"
    ],
    "a8688d554c69475692b7b0ed84cdf3c9": [
        "def solution():\n    for i in range(2, 91):\n        if 91 % i == 0:\n            return (i, 91 // i)\n    return None\n\nans = solution()"
    ],
    "42372c8fe434451ba8bf5bb0da429399": [
        "def solution():\n    # Let x be the number of meatballs each student gets initially.\n    # Let y be the total number of students before the last student arrives.\n    # Initially, there are x*y + 20 meatballs.\n    # After the last student arrives, there are x*(y+1) + 10 meatballs.\n    # This must be the same amount of meatballs, so we can set up an equation:\n    # x*y + 20 = x*(y+1) + 10\n    # Solving the equation:\n    # x*y + 20 = x*y + x + 10\n    # Subtract x*y from both sides:\n    # 20 = x + 10\n    # Subtract 10 from both sides:\n    # x = 10\n    # So each student initially gets 10 meatballs.\n    return 10\n\nans = solution()"
    ],
    "9eca731a85d34c5c84ce4315a5438484": [
        "def solution():\n    initial_volume = 1000 # in ml\n    pouring_volume = 200 # in ml\n    cups = 3\n\n    remaining_volume = initial_volume - (pouring_volume * cups)\n    \n    return remaining_volume\n\nans = solution()"
    ],
    "c52c9bc9f59d4cbf824806accfda1f41": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Use sympy to define the variable for the total number of questions\n    total_questions = symbols('total_questions')\n\n    # First day, completed 7 + 1/2 * total_questions\n    first_day_completed = 7 + 1/2 * total_questions\n\n    # Remaining after first day\n    remaining_after_first_day = total_questions - first_day_completed\n\n    # Second day, completed 1/2 * remaining - 5\n    second_day_completed = 1/2 * remaining_after_first_day - 5\n\n    # Remaining after second day\n    remaining_after_second_day = remaining_after_first_day - second_day_completed\n\n    # Third day, completed the remaining 23 questions\n    # Creating the equation based on the given information\n    equation = Eq(remaining_after_second_day, 23)\n\n    # Solving the equation\n    solved = solve(equation, total_questions)\n    \n    return solved[0]\n\nans = solution()"
    ],
    "3e243b1122134f85813f8fa4e13d7976": [
        "def solution():\n    tenth_number = 23\n    fifteenth_number = 38\n\n    common_difference = (fifteenth_number - tenth_number) / (15 - 10)\n    twelfth_number = tenth_number + (2 * common_difference)\n\n    return twelfth_number\n\nans = solution()"
    ],
    "680347d9be334298803934506acbea08": [
        "def solution():\n    return 221 * 8\n\nans = solution()"
    ],
    "8a82b904fe8845d7ace8f6031f51ff8b": [
        "def solution():\n    selling_price = 6500\n    profit_percentage = 30\n    \n    # Calculate the cost price based on the given profit percentage\n    cost_price = selling_price / (1 + (profit_percentage / 100))\n    \n    # New profit in another scenario\n    new_profit = 5000\n    \n    # Calculate the new selling price\n    new_selling_price = cost_price + new_profit\n    \n    # Calculate the percentage profit in the new scenario\n    new_profit_percentage = (new_profit / cost_price) * 100\n    \n    return new_profit_percentage\n\nans = solution()"
    ],
    "c419ce5358864ba09eea0ae91783b76f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # define the symbols\n    original_roses, original_daisies, months, planted_each_month = symbols('original_roses original_daisies months planted_each_month')\n    \n    # equations according to the problem\n    total_flowers = Eq(original_roses + original_daisies, 300)\n    future_roses = Eq(original_roses + months * planted_each_month, 280)\n    future_daisies = Eq(original_daisies + months * planted_each_month, 180)\n    \n    # solve the system of equations\n    solutions = solve((total_flowers, future_roses, future_daisies), (original_roses, original_daisies, months, planted_each_month))\n    \n    return solutions[original_roses]\n\nans = solution()"
    ],
    "2556a70133494b14a2fdfa3f1d8a534d": [
        "def solution():\n    total_problems = 10 + 20 + 30\n    total_correct = (10 * 20/100) + (20 * 80/100) + (30 * 90/100)\n    \n    overall_score_percentage = (total_correct / total_problems) * 100\n    \n    return overall_score_percentage\n\nans = solution()"
    ],
    "9f7d5af3fb5845e58bbb24c28e44207b": [
        "def solution():\n    # Side length of the larger square brick in centimeters (6 decimeters -> 60 centimeters)\n    large_brick_side_cm = 60\n\n    # Area of the larger square brick in square centimeters\n    large_brick_area_cm2 = large_brick_side_cm ** 2\n\n    # Total area to be covered, calculated from the area of one large brick multiplied by the number of large bricks\n    total_area_cm2 = large_brick_area_cm2 * 80\n\n    # Side length of the smaller square brick in centimeters (given as area, so we take the square root)\n    small_brick_side_cm = 64 ** 0.5\n\n    # Area of the smaller square brick in square centimeters\n    small_brick_area_cm2 = small_brick_side_cm ** 2  # which is 64\n\n    # Number of smaller bricks needed, total area divided by the area of one small brick\n    num_small_bricks = total_area_cm2 / small_brick_area_cm2\n\n    return int(num_small_bricks)\n\nans = solution()"
    ],
    "937225b6b7ac470ab01b68f8a4389aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbol for cost of one bag of fruit\n    fruit = symbols('fruit')\n\n    # Equation: 2 * (fruit + 15p) + 3 * fruit = 255p\n    total_cost_eq = Eq(2 * (fruit + 15) + 3 * fruit, 255)\n\n    # Solve for the cost of a bag of fruit\n    fruit_cost = solve(total_cost_eq, fruit)\n\n    return fruit_cost[0]\n\nans = solution()"
    ],
    "9c96976b9a0644528200db1a240ce22f": [
        "def solution():\n    people_in_front_of_emily = 25\n    people_behind_danny = 16\n    # Emily and Danny are two people\n    emily_and_danny = 2\n\n    total_people = people_in_front_of_emily + emily_and_danny + people_behind_danny\n    return total_people\n\nans = solution()"
    ],
    "77bc73140f934ab28b377454635f30a4": [
        "def solution():\n    ans = 7 + 8 * 3\n    return ans\n\nans = solution()"
    ],
    "8ee614cba3ae409b923c2260cf36ff3e": [
        "def solution():\n    total_pupils = 500\n    difference = 30\n    \n    # Let the number of boys be x\n    # Then, number of girls will be x + difference\n    # The sum of boys and girls will be total_pupils\n    # x + (x + difference) = total_pupils\n    # 2x + difference = total_pupils\n    # 2x = total_pupils - difference\n    # x = (total_pupils - difference) / 2\n    boys = (total_pupils - difference) / 2\n    girls = boys + difference\n    \n    return int(girls)\n\nans = solution()"
    ],
    "8da16cb231e141899db831c841592f4e": [
        "def solution():\n    number = 91\n    for i in range(2, int(number ** 0.5) + 1):\n        if number % i == 0:\n            return (i, number // i)  # returns a pair of divisors\n    return None  # if no divisors are found, though we know 91 is not a prime\n\nans = solution()"
    ],
    "bf9c9c142f014e25baff17cc266a571a": [
        "def solution():\n    # Let the side length of the square of boys be b (b is odd).\n    # And the side length of the square including boys and girls be g (g is even and g = b + 1).\n    # The total number of boys is then b^2.\n    # The total number of students (boys + girls) is g^2.\n\n    diff = 31  # There are 31 more boys than girls\n    b = 1  # initial value for the side of the square with all boys\n\n    # Loop to try different values of b until the correct difference is achieved\n    while True:\n        g = b + 1\n        boys = b * b\n        total_students = g * g\n        girls = total_students - boys\n        if boys - girls == diff:\n            break\n        else:\n            b += 2  # Increment b by 2 to keep it odd (and g even)\n\n    return total_students  # Return the total number of students\n\nans = solution()"
    ],
    "00bedbbff96a4c41a6d2dc74e09c2bbc": [
        "from math import log10\n\ndef solution():\n    exponent_4 = 2018\n    exponent_25 = 2018\n\n    # Calculate the result of 4 to the power of 2018\n    # Logarithm of A = exponent_4 * log10(4) + exponent_25 * log10(25)\n    logarithm_of_A = exponent_4 * log10(4) + exponent_25 * log10(25)\n\n    # The number of digits of A is the integer part of the Logarithm of A, plus 1\n    number_of_digits = int(logarithm_of_A) + 1\n\n    return number_of_digits\n\nans = solution()"
    ],
    "5b4ba0d6146248b28e891e03399c5b95": [
        "def solution():\n    length_ribbon_A = 10\n    length_ribbon_B = 5 * length_ribbon_A\n    total_length = length_ribbon_A + length_ribbon_B\n    return total_length\n\nans = solution()"
    ],
    "209362616733426d8b75bc739a42bd1c": [
        "from math import comb\n\ndef solution():\n    total_players = 5\n    team_size = 3\n    number_of_teams = comb(total_players, team_size)\n    return number_of_teams\n\nans = solution()"
    ],
    "e66987ea1869420495aacf4803e1a0e6": [
        "def solution():\n    selling_price = 6500\n    profit_percent = 30\n    cost_price = selling_price / (1 + (profit_percent / 100))\n\n    new_profit = 5000\n    new_selling_price = cost_price + new_profit\n    new_profit_percent = (new_profit / cost_price) * 100\n    \n    return new_profit_percent\n\nans = solution()"
    ],
    "928d90a169904ea2a45144f88db5fc41": [
        "def solution():\n    count = 0\n    # We start with 1 ball in each pile to fulfill the condition that each pile has at least 1 ball\n    for x1 in range(1, 10 - 2):  # we subtract 2 because we need to leave at least 1 ball for each of the other two piles\n        for x2 in range(1, 10 - x1 - 1):  # we subtract x1 and 1 to leave at least 1 ball for the last pile\n            x3 = 10 - x1 - x2\n            if x1 != x2 and x2 != x3 and x1 != x3:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "1b6cda7ee5184882bed20314b0c55e5b": [
        "def solution():\n    count = 0\n    for x1 in range(1, 14):\n        for x2 in range(x1 + 1, 14): # ensure x2 > x1 and is different\n            x3 = 14 - x1 - x2\n            if x3 > x2: # ensure x3 > x2 and is different\n                count += 1\n    return count\n\nans = solution()"
    ],
    "4ae3195333ce44baae2440d899e42e7b": [
        "def solution():\n    emily_position = 25\n    danny_position = 16\n    \n    total_people = emily_position + danny_position + 2\n    \n    return total_people\n\nans = solution()"
    ],
    "2046f9901ec645f3b15da0905103e4b3": [
        "def solution():\n    # Let the initial number of apples be x\n    # After selling 1/5 of the apples on Monday, Mr. Aziz is left with 4/5x apples\n    # After selling another 80 apples on Tuesday, he is left with 4/5x - 80 apples\n    # In the end, he is left with 30% (0.3) of the original number of apples, which is 0.3x\n    # Thus, we have the equation: 4/5x - 80 = 0.3x\n    # Solving for x:\n    x = symbols('x')\n    equation = Eq(4/5*x - 80, 0.3*x)\n    initial_apples = solve(equation, x)\n\n    # The number of apples he had in the end is 30% of the initial number\n    apples_in_the_end = 0.3 * initial_apples[0]\n    return int(apples_in_the_end)\n\nans = solution()"
    ],
    "cab8adbf9a644688a8392376fee0a725": [
        "def solution():\n    total_cookies = 200\n    morning_cookies = total_cookies * (1/5)\n    remainder = total_cookies - morning_cookies\n    afternoon_cookies = remainder * (3/4)\n\n    return int(afternoon_cookies)\n\nans = solution()"
    ],
    "ea3cc6d4b3a84e5bafa81bda550dd59c": [
        "def solution():\n    km_to_m = 1.5 * 1000  # 1 km is equal to 1000 meters\n    return km_to_m\n\nans = solution()"
    ],
    "fd400a9b34ea45bab56f191197ce87a7": [
        "def solution():\n    # The wood is cut into two equal pieces\n    total_length = 52  # The total length of the wood in cm\n    # Dividing the total length by 2 to find the length of each piece\n    length_of_each_piece = total_length / 2\n    return length_of_each_piece\n\nans = solution()"
    ],
    "95cc2a35844f4793bec67feb3c34b55a": [
        "def solution():\n    total_sum = 9 * 140\n    remaining_sum = total_sum - 180\n    average_of_others = remaining_sum / 8\n    return average_of_others\n\nans = solution()"
    ],
    "d4cf12e04703450586eb3ad6f4fbf86b": [
        "def solution():\n    # Let the first number be x\n    # Then the consecutive even numbers are x, x+2, x+4, x+6, x+8, x+10, x+12\n    # According to the problem, the fourth number (x+6) is greater than one-third of the sum of the first and seventh numbers by 6\n    # (x+6) = (1/3)*(x + (x+12)) + 6\n    # Multiplying both sides by 3 to get rid of the fraction\n    # 3*(x+6) = x + (x+12) + 18\n    # 3x + 18 = 2x + 12 + 18\n    # From the above equation, we solve for x\n    x = 12\n    \n    # Now, calculate the sum of the seven numbers\n    # sum = x + (x+2) + (x+4) + (x+6) + (x+8) + (x+10) + (x+12)\n    sum_of_numbers = x + (x + 2) + (x + 4) + (x + 6) + (x + 8) + (x + 10) + (x + 12)\n    return sum_of_numbers\n\nans = solution()"
    ],
    "a69442f9714442b29511db3b6b5cef94": [
        "def solution():\n    blue = 80\n    red = 2 * blue\n    green = blue + 45\n    total_markers = red + blue + green\n    return total_markers\n\nans = solution()"
    ],
    "40e27d47a03d4eed83ff6c5ccbbd0c12": [
        "def solution():\n    highway_length = 45\n    distance_between_trees = 9\n\n    # Since trees are planted at both ends, we subtract that distance first\n    # then divide by the distance between trees and add 1 for the tree at the starting point.\n    # We multiply by 2 because trees are planted on both sides of the highway.\n    num_trees_per_side = (highway_length // distance_between_trees) + 1\n    total_trees = num_trees_per_side * 2\n\n    return total_trees\n\nans = solution()"
    ],
    "1fc13706bdfd4125b1f46f271923f69c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    purple, yellow, white, red = symbols('purple yellow white red')\n    equation1 = Eq(purple, 2 * yellow)\n    equation2 = Eq(yellow, 3 * white)\n    equation3 = Eq(red, 28)\n    equation4 = Eq(red + white, 38)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (purple, yellow, white, red))\n\n    total_orchids = solutions[purple] + solutions[yellow] + solutions[white] + solutions[red]\n    return total_orchids\n\nans = solution()"
    ],
    "c95e959b4299436693470a7a54149f3c": [
        "def solution():\n    nth_odd_number = 20\n    ans = 2 * nth_odd_number - 1\n    return ans\n\nans = solution()"
    ],
    "6a792aa33daf4ec4a06273453da47af8": [
        "def solution():\n    # Since the Ferrari driver finished in second place\n    # and overtook 5 other cars, there must have been\n    # at least 5 cars that the driver passed, plus\n    # the Ferrari itself and the one car that finished first.\n    ans = 5 + 1 + 1  # cars overtaken + Ferrari itself + first place car\n    return ans\n\nans = solution()"
    ],
    "6ddb6579408f43569d88970148692882": [
        "def solution():\n    johnny_rings = 194\n    amber_rings = 5 * johnny_rings\n    remaining_rings = 65\n\n    initial_rings = johnny_rings + amber_rings + remaining_rings\n\n    return initial_rings\n\nans = solution()"
    ],
    "ad1785cf47534eb79f57a2988c26b792": [
        "def solution():\n    age_difference = 48 - 8\n    mike_age_when_eddie_18 = 18 + age_difference\n    return mike_age_when_eddie_18\n\nans = solution()"
    ],
    "fe2f6c6e96c74d368dbe56b437d7dbc0": [
        "def solution():\n    lily_book_price = 15.99\n    amy_book_price = lily_book_price + 8.01\n    total_price = lily_book_price + amy_book_price\n    return total_price\n\nans = solution()"
    ],
    "8773123676b246e1b04d41c383be9480": [
        "def solution():\n    sides = 9\n    total_internal_angle = (sides - 2) * 180\n    internal_angle = total_internal_angle / sides\n    return internal_angle\n\nans = solution()"
    ],
    "8e8f9986b2ec4a658422dc4b646e598a": [
        "def solution():\n    sum_of_series = 0\n    for i in range(1, 21):\n        sum_of_series += int('5' * i)\n    \n    ans = sum_of_series % 10000  # Getting the last 4 digits\n    return ans\n\nans = solution()"
    ],
    "b985fa2059844dd9846e790e911a7a78": [
        "def solution(x, y):\n    men_days_per_wall = 2 * 3\n    total_men_days = men_days_per_wall * x\n    days_per_man = total_men_days / y\n    return days_per_man\n\nans = solution(x, y)  # You need to replace x and y with actual numbers to call the function"
    ],
    "bacacf9e4d6344c08c919cdfcd0dd171": [
        "def solution():\n    total_people = 200\n    men_percentage = 0.25\n    women_fraction = 1/5\n\n    men = total_people * men_percentage\n    women = total_people * women_fraction\n    children = total_people - men - women\n\n    return children\n\nans = solution()"
    ],
    "2aa5fb221cec4c6f9ef10acc189afca8": [
        "def solution():\n    # Let the number of checked shirts be x.\n    # Then, the number of white shirts is 7x.\n    # We know that the total number of shirts sold is 72.\n    \n    # The equation representing the given scenario is:\n    # x + 7x = 72\n    \n    # Solving for x:\n    x = 72 // 8  # integer division to get the number of checked shirts\n    \n    # The number of white shirts is 7 times the number of checked shirts:\n    white_shirts = 7 * x\n    \n    return white_shirts\n\nans = solution()"
    ],
    "3df0c3dde5e243a9ab9d9c0623518d14": [
        "def solution():\n    for num in range(1, 100):\n        if num % 3 == 2 and num % 4 == 3 and num % 5 == 4:\n            return num\n\nans = solution()"
    ],
    "0b0e2b60afe9443a983a2f0c179e8cb6": [
        "def solution():\n    greatest_number = 0\n    for i in range(100, 1000, 2):  # Iterate over 3-digit odd numbers\n        if i % 9 == 0:  # Check if divisible by 9\n            tens_digit = (i // 10) % 10  # Extract the tens digit\n            if tens_digit % 4 == 0:  # Check if tens digit is divisible by 4\n                greatest_number = i\n    return greatest_number\n\nans = solution()"
    ],
    "60493d0a930546ecbdb78a1d7c6e8fc5": [
        "def solution():\n    pages_per_day = 16 / 2\n    total_pages = pages_per_day * 9\n    return total_pages\n\nans = solution()"
    ],
    "d95ed3ffcb4c4e158e87923bbb18dbc2": [
        "def solution():\n    ans = 72 + 60 + 48 + 36 + 24 + 12\n    return ans\n\nans = solution()"
    ],
    "124505e7801f407bbb2c337fd03e40c0": [
        "def solution():\n    # Given the nature of this question, without a specific pattern to analyze, the function is intentionally left blank.\n    # Normally, one would analyze a sequence, formula, or a geometric pattern provided in the question to find the answer.\n    # Without a concrete example or description of the pattern, no meaningful Python code can be written.\n    return\n\nans = solution()"
    ],
    "a768a55edb6b4c729273848fbd84119b": [
        "def solution():\n    # There are 3 colors, so we use the Pigeonhole Principle by drawing one more than 3 times the number of colors minus 2.\n    colors = 3\n    draws = colors * (2 - 1) + 1\n    return draws\n\nans = solution()"
    ],
    "36b9783bc7c540cd8a6f80ea8164926c": [
        "def solution():\n    result = 42 // 6\n    return result\n\nans = solution()"
    ],
    "f18dbb07c7d948eb81cecdc6adc6657e": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.12\n    years = 8\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n\n    return round(final_value, 2)\n\nans = solution()"
    ],
    "3bf359500b04447eb133eb82ac3cdcd6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n    equation1 = Eq(girls / 3, boys / 2)\n    equation2 = Eq(girls + boys, 390)\n\n    solutions = solve((equation1, equation2), (girls, boys))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "ae2892dc2b454550bff74338556e93c8": [
        "def solution():\n    for n in range(6, 55):\n        if n % 5 == 0 and (n + 1) % 7 == 0:\n            return n\n\nans = solution()"
    ],
    "39baf06fc25b46b29d10b9191c1761d0": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 4), (4, 5), (5, 6)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "99d84eff6ac64f09ab3bcfb4983bcdfc": [
        "def solution():\n    m = 1\n    while True:\n        if sum(map(int, str(m))) == 5 * sum(map(int, str(m+1))):\n            return m\n        m += 1\n\nans = solution()"
    ],
    "c53e746b357140a38e789d2b4661f42f": [
        "def solution():\n    # Spending from January to April: 4 months * $300/month\n    jan_to_apr = 4 * 300\n    # Spending from May to July: 3 months * $250/month\n    may_to_jul = 3 * 250\n    # Spending from August to September: $750 in total\n    aug_to_sep = 750\n    # Spending from October to December: 3 months * $300/month\n    oct_to_dec = 3 * 300\n\n    # Total spending for the year\n    total_spending = jan_to_apr + may_to_jul + aug_to_sep + oct_to_dec\n    # Number of months from January to December\n    total_months = 12\n\n    # Average spending per month\n    average_spending = total_spending / total_months\n\n    return average_spending\n\nans = solution()"
    ],
    "1f292e7a93ed4fffaa057286ebde0e3e": [
        "def solution():\n    three_quarters_of_number = 24\n    number = (three_quarters_of_number * 4) / 3\n    return number\n\nans = solution()"
    ],
    "0ac355b21f2a426fa5a12babd8ae8f58": [
        "def solution():\n    amount_picked_in_5_days = 24\n    days = 8.5\n    unit_rate = amount_picked_in_5_days / 5\n    total_amount = unit_rate * days\n    return total_amount\n\nans = solution()"
    ],
    "13972553585945499780bd1f9de3edbb": [
        "def solution():\n    k = 1 - 0.02  # 2% less water means the remaining is 100% - 2% = 98% = 0.98\n    return k\n\nans = solution()"
    ],
    "e6c4ff2e43db4f879b08144db3336f68": [
        "def solution():\n    temp_bottom = 17\n    temp_top = -2\n    temp_drop = temp_bottom - temp_top\n    return temp_drop\n\nans = solution()"
    ],
    "978a2a1cb0b648789d46ea37337fec80": [
        "def solution():\n    tom_age = 10\n    father_future_age = 70\n    age_difference = father_future_age - tom_age\n    father_current_age = tom_age + age_difference\n    return father_current_age\n\nans = solution()"
    ],
    "67e73a7f1c6c4c4e9ba62435f2be80d4": [
        "def solution():\n    total_passengers = 400\n    men_passengers = (9 / 20) * total_passengers\n    women_passengers = (30 / 100) * total_passengers\n    children_passengers = total_passengers - men_passengers - women_passengers\n    return int(children_passengers)\n\nans = solution()"
    ],
    "f0a5dbe6de374eba85a44510eb9aa5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the symbols for the votes of Jordan, Evie, and Emily\n    jordan, evie, emily = symbols('jordan evie emily')\n\n    # Write the equations based on the given information\n    equation1 = Eq(jordan, 3 * emily)  # Jordan got 3 times as many votes as Emily\n    equation2 = Eq(evie, jordan - 20)  # Evie got 20 fewer votes than Jordan\n    equation3 = Eq(jordan + evie + emily, 400)  # The total number of votes is 400\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (jordan, evie, emily))\n\n    # Return the number of votes Evie got\n    return solutions[evie]\n\nans = solution()"
    ],
    "895c80e1252f488aa0bcc6bfe68a22ba": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    departure_time = datetime.strptime(\"07:35\", \"%H:%M\")\n    journey_duration = timedelta(hours=1, minutes=35)\n    walk_duration = timedelta(minutes=40)\n\n    arrival_time = departure_time + journey_duration + walk_duration\n    return arrival_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "5b740c87653c43258c0586d8f12663d4": [
        "def solution():\n    dividend = 85\n    divisor = 5\n    ans = dividend // divisor\n    return ans\n\nans = solution()"
    ],
    "f5736677dc6940b8a6a9e5d768b339cf": [
        "def solution():\n    cost_for_six = 1.10\n    cost_for_twelve = cost_for_six * 2\n    return cost_for_twelve\n\nans = solution()"
    ],
    "b85bc56d0f9b4a388b112f1d1c98b5ac": [
        "def solution():\n    cost_per_bag = 16  # in pence\n    total_amount = 200  # £2 converted to pence\n\n    number_of_bags = total_amount // cost_per_bag\n\n    return number_of_bags\n\nans = solution()"
    ],
    "2ff378394a154043a3ef7f34cd20ed7b": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"63{digit}25\")\n        if number % 45 == 0:\n            return digit\n\nans = solution()"
    ],
    "afcd43f8aadd48d3b3b70d1cd4402d8c": [
        "def solution():\n    choices_for_first_digit = 2  # Can be either 2 or 3, not 0\n    choices_for_second_digit = 3  # Can be 0, 2, or 3\n    choices_for_third_digit = 3  # Can be 0, 2, or 3\n\n    total_combinations = choices_for_first_digit * choices_for_second_digit * choices_for_third_digit\n    \n    return total_combinations\n\nans = solution()"
    ],
    "c3b73f89dc164b2c8290804ecfee10f2": [
        "def solution():\n    return 8.3 * 40\n\nans = solution()"
    ],
    "98497b9ada5a4cf096e251a78f90e4f5": [
        "def solution():\n    red_eggs = 8\n    yellow_eggs = red_eggs + 7\n    total_eggs = red_eggs + yellow_eggs\n    return total_eggs\n\nans = solution()"
    ],
    "fd972a8b8be9487fa73a04079ced2d12": [
        "from math import factorial\n\ndef solution():\n    total_books = 6 + 2\n    fiction_books = 6\n    comic_books = 2\n    \n    # Calculate arrangements using permutations with identical items\n    ways = factorial(total_books) // (factorial(fiction_books) * factorial(comic_books))\n    \n    return ways\n\nans = solution()"
    ],
    "64f1d8eb28744f888d7b31370fa44497": [
        "def solution():\n    for i in range(1, 100):\n        if i % 2 == 0 and i % 4 == 0 and i % 3 == 0:\n            if (i**0.5) % 1 == 0:\n                return i\n\nans = solution()"
    ],
    "3a737e87377f45d6b533c3df64a44d83": [
        "def solution():\n    total_acorns = 124\n    # Let x be the number of acorns Chip had\n    # Then Dale had (124 - x) acorns\n    # After giving 14 acorns, Chip has (x - 14) acorns\n    # Both Chip and Dale have the same number of acorns after the exchange,\n    # which means x - 14 = 124 - x - 14\n    # Simplify to find x\n    x = (total_acorns + 14) / 2\n    return int(x)\n\nans = solution()"
    ],
    "005dea19a47e4533b68eed3a0f0b497c": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 52))\n    prime_count = 51 // min(primes)\n    return prime_count\n\nans = solution()"
    ],
    "ff3f13e0f5834b50bd1c146b2310996b": [
        "def solution():\n    for num in range(10, 100):\n        if num % 4 == 2 and num % 5 == 2:\n            return num\n\nans = solution()"
    ],
    "e8a6833cb7f04cedbeaf3a2156064cdf": [
        "def solution():\n    ans = 85 // 5\n    return ans\n\nans = solution()"
    ],
    "40c82361e0c74a8ea2b45cd4b91a81ca": [
        "def solution():\n    x = symbols('x')  # Represent the cost of one CD with a symbol x\n    total_cost = 8 * x  # The expression for the total cost of 8 CDs\n    return total_cost\n\nans = solution()"
    ],
    "18e2a859640043989d18f5185f01a455": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variable\n    x = symbols('x')\n    \n    # Set up the equation\n    equation = Eq((2/3) * (x - 1) - (1/4) * (3*x + 1), 1/6)\n    \n    # Solve the equation\n    sol = solve(equation, x)\n    \n    # Return the solution\n    return sol[0]\n\nans = solution()"
    ],
    "18ba329683b9437a99bb36874be11b6d": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            if '5' in str(hour) or '5' in str(minute):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "528a56a810f04995a3393b4a5b5c2aff": [
        "def solution():\n    eggs_per_tray = 26\n    number_of_trays = 4\n    total_eggs = eggs_per_tray * number_of_trays\n    return total_eggs\n\nans = solution()"
    ],
    "9b180ed71aad4dea867c316124171dcc": [
        "def solution():\n    ans = sum([i if i % 2 == 0 else -i for i in range(1, 41)])\n    return ans\n\nans = solution()"
    ],
    "8b7e921fc69e446a84cae8a24f0dd127": [
        "def solution():\n    initial_amount = 3600\n    interest_rate = 0.02\n\n    interest = initial_amount * interest_rate\n\n    return interest\n\nans = solution()"
    ],
    "6108bfa174894485b78d31f295206c3f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of novels as \"n\" and the number of science books as \"s\".\n    n, s = symbols('n s')\n\n    # According to the problem, we have two equations:\n    # 1. The number of science books is 14 less than 6 times that of novels: s = 6*n - 14\n    # 2. There are 106 less novels than science books: n = s - 106\n\n    # We can set up the equations using sympy\n    equation1 = Eq(s, 6*n - 14)\n    equation2 = Eq(n, s - 106)\n\n    # Now we solve the system of equations\n    solutions = solve((equation1, equation2), (n, s))\n\n    # The solution will give us the number of science books\n    return solutions[s]\n\nans = solution()"
    ],
    "2a58888942e444b482b08c681e223aac": [
        "def solution():\n    total_penpals = 11\n    total_pages = 38\n    \n    # Assume 4-page letters are written to 'x' penpals and 3-page letters to 'y' penpals\n    # Hence, we have two equations:\n    # x + y = 11 (equation for total penpals)\n    # 4x + 3y = 38 (equation for total pages)\n    \n    # Iterate over possible number of 4-page letters to find the solution\n    for x in range(total_penpals + 1):\n        y = total_penpals - x\n        if 4*x + 3*y == total_pages:\n            return y\n\nans = solution()"
    ],
    "8890e33ef31b4ccc99ae9b0385739828": [
        "def solution():\n    for i in range(100, 1000):\n        if i % 24 == 0 and i // 24 == 36:\n            return i\n\nans = solution()"
    ],
    "508d839986774182b702b7f8bea45c05": [
        "def solution():\n    return 8386 // 14\n\nans = solution()"
    ],
    "65be0a62238c44a1a81f3a149de3c3e7": [
        "def solution():\n    people_in_front = 9\n    position_from_back = 15\n\n    total_people = people_in_front + position_from_back - 1 # subtract 1 because Amy is counted twice\n\n    return total_people\n\nans = solution()"
    ],
    "f7301d7cd70d47c88eb5997a858caf0c": [
        "def solution():\n    return 7 - (-4)\n\nans = solution()"
    ],
    "d9b549ad5efb489b9e021f1fff6fe259": [
        "def solution():\n    initial_height = 17\n    final_height = 65\n    duration_weeks = 4\n\n    growth_per_week = (final_height - initial_height) / duration_weeks\n\n    return growth_per_week\n\nans = solution()"
    ],
    "cff268a0ab3d4d4689a53ee2d5eab94a": [
        "def solution():\n    # If you pick 3 balls of the same color at the start, \n    # you are sure that the 4th ball picked must be of a different color.\n    # So after picking 3 balls of the same color, with just one more pick,\n    # you can be sure to have at least 2 different colors.\n    # But to ensure that you pick 3 different colors, the worst case scenario\n    # would be picking 5 balls of the first color, and then 5 of another color.\n    # The next ball you pick (the 11th ball) must then be of the third color,\n    # because there would be no more balls of the first two colors left.\n    return 5 + 5 + 1  # The +1 is for ensuring the third color.\n\nans = solution()"
    ],
    "5f2651543daf486c9b5689378dd5d200": [
        "def solution():\n    # Let the length of the shorter piece be x.\n    # Therefore, the longer piece is 2x.\n    # The sum of both pieces is the total length, which is 12.75m.\n    # x + 2x = 12.75\n    # 3x = 12.75\n    # x = 12.75 / 3\n    # x = 4.25 (length of the shorter piece)\n    # The longer piece is 2x, so it would be 2 * 4.25.\n    shorter_piece = 12.75 / 3\n    longer_piece = 2 * shorter_piece\n    return longer_piece\n\nans = solution()"
    ],
    "626a60e2bb934c6c9efb5ecfc8cc7b07": [
        "def solution():\n    # x represents the calories Dan can take in today\n    # Dan wants to take in less than 1000 calories\n    x = symbols('x')\n    inequality = x < 1000  # x should be less than 1000\n    \n    return inequality\n\nans = solution()"
    ],
    "432a2792a8fd48ab90470670028065e3": [
        "def solution():\n    original_volume = 1200\n    # When dimensions are halved, volume becomes 1/2 * 1/2 * 1/2 = 1/8 of the original\n    new_volume = original_volume * (1/2) * (1/2) * (1/2)\n    return int(new_volume)\n\nans = solution()"
    ],
    "763158cf5ddc46bda0149e66cd6e5891": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the amount of coins they each get in the class\n    x = symbols('x')\n    \n    # Equation representing Gigi's coins after the class\n    gigi_coins = Eq(120 + x, 3 * (24 + x))\n    \n    # Solve the equation\n    solution = solve(gigi_coins, x)\n    \n    return solution[x]\n\nans = solution()"
    ],
    "34aba952c92541a880a60157ce1f2a2a": [
        "def solution():\n    from sympy import isprime\n\n    count = 0\n\n    for num in range(1, 21):\n        if not isprime(num):\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "db88854e5b9e4689aa2540cd3230716e": [
        "def solution():\n    return 694 * 27\n\nans = solution()"
    ],
    "03ff8fd61a1e4e12875cd66e409c1908": [
        "def solution():\n    age_difference = 41 - 14\n    # From the given information, we know the age difference remains constant.\n    # Since their ages were the reverse of each other when Brian was 14, the father's age was 41.\n    # We look for the next ages where the digits of Brian's age reverse to become his father's age.\n\n    for i in range(1, age_difference):\n        brian_age = 14 + i\n        father_age = 41 + i\n        if str(brian_age).zfill(2) == str(father_age)[::-1].zfill(2):\n            return brian_age\n\n    return None\n\nans = solution()"
    ],
    "4a59132b51dd42b3907574fc7508b606": [
        "def solution():\n    return 8386 // 14\n\nans = solution()"
    ],
    "8246bb5345f84017abee88e67f605f55": [
        "def solution():\n    count = 0\n    # Iterate over all possible 3-digit numbers\n    for i in range(100, 1000):\n        # Check if the number is odd\n        if i % 2 == 1:\n            # Check if the sum of digits is 11\n            if sum(map(int, str(i))) == 11:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "ac3db56fed3b4b9dadaddbafb7210b8d": [
        "def solution():\n    # Since we are looking for the least amount of time to boil 3 eggs,\n    # we can assume that we have at least one pot that can boil all 3 \n    # eggs at the same time.\n    boiling_time_per_egg = 5\n    # The time it takes to boil all 3 eggs is the same as boiling one egg\n    # because they can be boiled simultaneously.\n    total_time = boiling_time_per_egg\n    return total_time\n\nans = solution()"
    ],
    "f52723613c644fc7a8654b9875518c28": [
        "import math\n\ndef solution():\n    students = 35\n    cabin_capacity = 6\n    cabins_needed = math.ceil(students / cabin_capacity)\n    return cabins_needed\n\nans = solution()"
    ],
    "6ae16204dd0c432f9b2b3b1d7e3657bc": [
        "def solution():\n    dough_initial = 11.16  # kg\n    cookie_dough = 45 / 1000  # converting grams to kg\n    brownie_dough = 150 / 1000  # converting grams to kg\n    total_cookie_dough = 240 * cookie_dough\n    total_brownie_dough = 2 * brownie_dough\n    dough_used = total_cookie_dough + total_brownie_dough\n    dough_left = dough_initial - dough_used\n    return dough_left\n\nans = solution()"
    ],
    "b2ce68cf7f1747dfb2b3a9656328089f": [
        "def solution():\n    calories_yesterday = 1000\n    x = symbols('x')\n    inequality = x < calories_yesterday\n\n    return inequality\n\nans = solution()"
    ],
    "612ec442ad6443f4a359e99c3e7de273": [
        "def solution():\n    return 5992 // 7\n\nans = solution()"
    ],
    "e350ae84124b4fc6989aada9939cc84a": [
        "def solution():\n    # Let the first term be 'a' and the common difference be 'd'\n    # The sum of the first 4 terms = 4/2 * (2a + (4-1)d) = 124\n    # The sum of the last 4 terms = 4/2 * (2(l-3d) + (4-1)d) = 156, where 'l' is the last term\n    # The sum of all terms = n/2 * (a + l) = 210\n    # We need to find 'n'\n    \n    from sympy import symbols, Eq, solve\n\n    a, d, n, l = symbols('a d n l')\n\n    # Sum of the first 4 terms\n    equation1 = Eq(2 * a + 3 * d, 124)\n\n    # Sum of the last 4 terms which is also 2l (since l = a + (n-1)d) - 3d = 156\n    equation2 = Eq(2 * (a + (n - 1) * d) - 3 * d, 156)\n\n    # Sum of all terms\n    equation3 = Eq(n/2 * (2*a + (n - 1)*d), 210)\n    \n    solutions = solve((equation1, equation2, equation3), (a, d, n, l))\n    \n    # Since 'n' can be multiple solutions, we need to take only the positive integer value.\n    n_solution = [sol[n] for sol in solutions if sol[n] > 0 and sol[n].is_integer]\n    \n    # Assuming the sequence has a valid number of terms, there will be only one such positive integer solution for 'n'\n    return n_solution[0]\n\nans = solution()"
    ],
    "93c3881ba71b4288b0c393273f475ffb": [
        "def solution():\n    pattern = [70, 71, 72, 71, 70]\n    return pattern[(1004 - 1) % len(pattern)]\n\nans = solution()"
    ],
    "eee379a91f664722bc128506d5cbe9a3": [
        "def solution():\n    total_wine_gums = 20\n    number_of_children = 5\n    wine_gums_per_child = total_wine_gums // number_of_children\n\n    return wine_gums_per_child\n\nans = solution()"
    ],
    "eb7626e5b04249ad8fe88c3ada4dac42": [
        "def solution():\n    first_term = 10\n    last_term = 298\n    difference = 3\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    sum_seq = num_terms * (first_term + last_term) // 2\n    \n    return sum_seq\n\nans = solution()"
    ],
    "a0a094786a444fc89f05eba94b8e1741": [
        "def solution():\n    ans = 123 + 876 - 654\n    return ans\n\nans = solution()"
    ],
    "01b66abf11cc46dbbbfb8fc1cacabe78": [
        "def solution():\n    return 25 * 24\n\nans = solution()"
    ],
    "0a3f07dfc88447c4904fa68658a039cc": [
        "def solution():\n    return 84.8 / 400\n\nans = solution()"
    ],
    "242aa8419d55484d8e58d0da5659df75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # let x be the total number of chocolates and y be the number of friends\n    x, y = symbols('x y')\n\n    # if she gave 18 pieces each, there will be 41 extra\n    eq1 = Eq(x - 18*y, 41)\n    \n    # if she gave 23 pieces each, she would be short of 34\n    eq2 = Eq(x - 23*y, -34)\n\n    # solving the equations to find x and y\n    solutions = solve((eq1, eq2), (x, y))\n\n    # calculate the number of chocolates left after giving 20 pieces to each friend\n    chocolates_left = solutions[x] - 20*solutions[y]\n\n    return chocolates_left\n\nans = solution()"
    ],
    "c9055cb54a8e4238a45292b86630682e": [
        "def multiple_of_27(block_number):\n    return block_number % 27 == 0\n\ndef multiple_of_7(block_number):\n    return block_number % 7 == 0\n\ndef sum_of_digits_is_17(block_number):\n    return sum(int(digit) for digit in str(block_number)) == 17\n\ndef is_perfect_square(block_number):\n    square_root = int(block_number**0.5)\n    return square_root * square_root == block_number\n\ndef factor_of_89100(block_number):\n    return 89100 % block_number == 0\n\ndef solution():\n    for block_number in range(100, 1000):\n        conditions = [\n            multiple_of_27(block_number),\n            multiple_of_7(block_number),\n            sum_of_digits_is_17(block_number),\n            is_perfect_square(block_number),\n            factor_of_89100(block_number)\n        ]\n        if conditions.count(True) == 3:\n            return block_number\n\nans = solution()"
    ],
    "b2b289d532544e649564ecfd97481da8": [
        "def solution():\n    initial_amount = 200\n    spent_on_book = initial_amount * 0.15\n    left_after_book = initial_amount - spent_on_book\n    spent_on_dvd = left_after_book * 0.30\n    left_after_dvd = left_after_book - spent_on_dvd\n\n    return left_after_dvd\n\nans = solution()"
    ],
    "00797547355649a7aeaa0ba63a6da114": [
        "def solution():\n    ans = 5992 // 7\n    return ans\n\nans = solution()"
    ],
    "7863fd485a6b400695c4ed78bf2cec89": [
        "def solution():\n    initial_amount = 100\n    cycle_length = 2  # days for deposit and spend cycle\n    days_passed = 15\n    net_amount_per_cycle = 5 - 8  # deposit 5, spend 8\n\n    full_cycles = days_passed // cycle_length  # complete cycles in 15 days\n    remaining_days = days_passed % cycle_length  # days after the last full cycle\n\n    # money after full cycles\n    money_after_full_cycles = initial_amount + (full_cycles * net_amount_per_cycle)\n\n    # money for the remaining days\n    if remaining_days > 0:\n        money_after_remaining_days = money_after_full_cycles + 5  # deposits on the first day of the cycle\n    else:\n        money_after_remaining_days = money_after_full_cycles\n\n    return money_after_remaining_days\n\nans = solution()"
    ],
    "ba5d90894baa46bfb336f5a957cccabb": [
        "def solution():\n    mulan_pushups = symbols('mulan_pushups')\n    inequality = mulan_pushups > 50\n    return inequality\n\nans = solution()"
    ],
    "f2ee218e18d746598a977b19436df816": [
        "def solution():\n    total_balloons_needed = 40\n    balloons_blown_up = 22\n    balloons_burst = 3\n\n    balloons_still_needed = total_balloons_needed - (balloons_blown_up - balloons_burst)\n\n    return balloons_still_needed\n\nans = solution()"
    ],
    "a3164e1c9a684eb6985ada44124f8660": [
        "def solution():\n    return 3 * 27.6\n\nans = solution()"
    ],
    "8379e6cdd21b409f88bd041595e96f86": [
        "def solution():\n    teams = 32\n    games_per_team = teams - 1 # Each team plays every other team once\n    total_games = games_per_team * teams / 2 # Total games is number of games per team times number of teams divided by 2 since each game involves two teams\n\n    games_played = 24\n    remaining_games = total_games - games_played\n\n    return int(remaining_games)\n\nans = solution()"
    ],
    "297630efead3458f83114baea5177aa8": [
        "def solution():\n    candies = 88\n    # To find the least number of pieces the child with the most can get,\n    # we allocate candies such that the other children get 1, 2, 3, ... etc. pieces\n    # until there are only two children left to split the remaining candies.\n    # This ensures the least amount for the child with the most under the given conditions.\n    \n    # Allocate 1, 2, ..., 6 to the first 6 children, which is sum of first 6 natural numbers\n    allocated_candies = sum(range(1, 7))  # Sum of 1+2+3+4+5+6\n    remaining_candies = candies - allocated_candies  # Remaining candies\n    \n    # For the second last child, give the minimum of 1 more candy than the last allocated,\n    # which is 7 in this case\n    second_last_child = 7\n    \n    # The last child gets the rest\n    last_child = remaining_candies - second_last_child\n    \n    return last_child\n\nans = solution()"
    ],
    "4d68899272944beeb370dd566bd82e48": [
        "def solution():\n    return (15 + 37) / 2\n\nans = solution()"
    ],
    "4883a159ef4841db869cc5b99c3cb8e9": [
        "def solution():\n    pails_filled = 4\n    liters_per_pail = 4\n    water_left = 7\n    original_volume = (pails_filled * liters_per_pail) + water_left\n    return original_volume\n\nans = solution()"
    ],
    "70882e282f9e400e9ee36f2422f02038": [
        "def solution():\n    ones_digit = pow(8, 30, 10)  # We use modulo 10 to find the last digit\n    return ones_digit\n\nans = solution()"
    ],
    "4d1afc03690e4059a20150252e9aa14a": [
        "def solution():\n    # Since Tom takes 4 stones from Stack B, there will be 20 stones in Stack A and 16 stones in Stack B left.\n    # To win the game, Jerry must leave Tom in a position where no matter how many stones Tom takes,\n    # Jerry can take the remaining stones in the next turn.\n\n    # The winning strategy for Jerry is to always equalize the number of stones in both stacks after his turn.\n    # So, Jerry should take stones from Stack A to make both stacks have equal number of stones.\n\n    stones_taken_by_jerry = 20 - 16\n    stack_jerry_takes_from = \"A\"\n\n    # Jerry's move will leave both stacks with 16 stones. On each subsequent turn, he can mirror Tom's moves\n    # to maintain equal amounts until he can take the last stone.\n\n    return f\"Jerry must take {stones_taken_by_jerry} stone(s) from Stack {stack_jerry_takes_from}.\"\n\nans = solution()"
    ],
    "61ae1572690948d28178f82d9d76d770": [
        "def solution():\n    circumference = 840\n    interval = 14\n    ans = circumference // interval\n    return ans\n\nans = solution()"
    ],
    "c5d3aa356bb54af391702fd40639b5a9": [
        "def solution():\n    milk_per_shortcake = 10 / 12\n    shortcakes_made = 25 / milk_per_shortcake\n    return int(shortcakes_made)\n\nans = solution()"
    ],
    "9f102133c2f64e46b998d847ff6646d4": [
        "def solution():\n    # Let the middle number be x, then the consecutive numbers are x-2, x-1, x, x+1, x+2\n    # Sum of these five numbers is 5x, which is 160\n    x = 160 // 5\n    \n    # The student with the most balls has x + 2\n    most_balls = x + 2\n    return most_balls\n\nans = solution()"
    ],
    "1f11408ee01e48db98990edeed513497": [
        "def solution():\n    correct_sum = sum(1 + 3 * i for i in range(37))\n    actual_sum = 2011\n    difference = correct_sum - actual_sum\n\n    # Since the mistake was to subtract instead of add, the difference will be double the mistaken number.\n    mistaken_number = difference // 2\n\n    # To find out who made the mistake we find the person's position by dividing the mistaken number by 3,\n    # since each correct number is increased by 3 from the previous one, starting at 1.\n    person_mistake = (mistaken_number - 1) // 3 + 1\n\n    return person_mistake\n\nans = solution()"
    ],
    "2cd006f14c7e4d62957c102b37ad3764": [
        "def solution():\n    for hundreds in range(1, 10):\n        for ones in range(10):\n            M = 100 * hundreds + ones\n            S = hundreds + ones\n            if M == 67 * S:\n                reversed_M = 10 * hundreds + ones * 100\n                ans = reversed_M // S\n                return ans\n\nans = solution()"
    ],
    "c616e250bb3a4ea28dc67bcaf6e13e3c": [
        "def solution():\n    first_term = 10\n    last_term = 155\n    difference = 5\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_seq = (num_terms * (first_term + last_term)) // 2\n    return sum_seq\n\nans = solution()"
    ],
    "ddd57f21e2e3415fb85f06496019817a": [
        "def solution():\n    left_side = 0.3 * 100\n    right_side = 150\n    ans = right_side / left_side\n    return ans\n\nans = solution()"
    ],
    "ba849ade4b5b4888ba3f01dfb7156e06": [
        "from math import comb\n\ndef solution():\n    total_balls = 10\n    balls_to_select = 7\n\n    ans = comb(total_balls, balls_to_select)\n    return ans\n\nans = solution()"
    ],
    "67e5ac39390942c8a80324b810ad995a": [
        "def solution():\n    # The initial fraction we want to match\n    target = 13/10\n\n    # Initial guesses for a, b, and c\n    for a in range(1, 100):\n        for b in range(1, 100):\n            for c in range(1, 100):\n                # Constructing the fraction using a, b, c\n                fraction = 1 + (1 / (a + (1 / (b + (1 / c)))))\n\n                # Compare generated fraction to target fraction\n                if fraction == target:\n                    # Return the weighted sum of a, b, and c\n                    return a + 2 * b + 3 * c\n    \n    # If no solution found, return None\n    return None\n\n# Run the function and store the result in ans\nans = solution()"
    ],
    "13881a97e1fa4780b71be7965da96d93": [
        "def solution():\n    # 8's powers cycle every 4 in their units digit: 8, 4, 2, 6\n    powers = [8, 4, 2, 6]\n    # 30 modulo 4 gives the index in the cycle (8^1 = 8, 8^2 = 4, 8^3 = 2, 8^4 = 6)\n    index = (30 % 4) - 1  # -1 because list indices start at 0\n    # Return the element at the position in the cycle\n    return powers[index]\n\nans = solution()"
    ],
    "1f7ecb3b2fa446d9a36c3db0462423d0": [
        "def solution():\n    return 53.4 - 2.5\n\nans = solution()"
    ],
    "3e2e9cfc559f4b45bfa32bae4770f18e": [
        "def solution():\n    total_questions = 20\n    correct_points = 5\n    incorrect_points = -3\n    total_points = 52\n\n    for correct in range(total_questions + 1):\n        incorrect = total_questions - correct\n        if correct * correct_points + incorrect * incorrect_points == total_points:\n            return correct\n\nans = solution()"
    ],
    "dfcd76d3d08844e4b30d258dfaddff6c": [
        "def solution():\n    first_term = 10\n    last_term = 155\n    difference = 5\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_seq = (num_terms * (first_term + last_term)) // 2\n\n    return sum_seq\n\nans = solution()"
    ],
    "9ea706f25a51493ca9cf1548e9f7723b": [
        "def solution():\n    ans = (150 / (0.3 * 100))\n    return ans\n\nans = solution()"
    ],
    "8d827b1dc9424f36a3d0f0d1b0364775": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    equation1 = Eq(girls, boys + 12)\n    equation2 = Eq(boys + girls, 100)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "739a7e30c1464e608503a893832d84ca": [
        "def solution():\n    # Start with the day when the monkey eats the most peaches\n    # If the monkey eats 'n' peaches on the last day, on previous days, it must eat a total of 100 - n peaches\n    # We find the maximum 'n' such that 1+2+3+...+(n-1) <= 100 - n\n    # This translates to n*(n-1)/2 <= 100 - n\n    # Solving for n gives us the maximum number of days\n    total_peaches = 100\n    n = 1\n    \n    while n * (n - 1) / 2 <= total_peaches - n:\n        n += 1\n\n    # We subtract one because we added an extra day in the loop where the condition is no longer true\n    return n - 1\n\nans = solution()"
    ],
    "22edd0e9c1bc4f6b9f43fac11a14a0ea": [
        "def solution():\n    # Initialize the sum to 0\n    total_sum = 0\n    # Loop through the numbers from 1 to 20\n    for num in range(1, 21):\n        # Check if the remainder when divided by 6 is 1\n        if num % 6 == 1:\n            # Add the number to the sum\n            total_sum += num\n    # Return the total sum\n    return total_sum\n\nans = solution()"
    ],
    "1e7aa3e2ce774fb09345a5574b3c93ae": [
        "def solution():\n    # Amount of sugar in the solution\n    total_sugar = 600 * 0.48\n\n    # Since the sugar doesn't change, the amount of water added\n    # is the total weight minus the amount of sugar\n    water_weight = 600 - total_sugar\n\n    return water_weight\n\nans = solution()"
    ],
    "77e366a8747b42c7b9ef3a9f1734ce77": [
        "def solution():\n    ans = 53.4 - 2.5\n    return ans\n\nans = solution()"
    ],
    "01afed4a053f422f832876b1f67b28f4": [
        "def solution():\n    result = 0\n    for i in range(9):\n        result += 5\n    return result\n\nans = solution()"
    ],
    "8ece565c32b34b0a85e297903d183180": [
        "def solution():\n    for N in range(5):\n        if (1 + 2 + N + 4) % 3 == 0:\n            return N\n\nans = solution()"
    ],
    "2cfc7d4447c340039a6f001c399114d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    a, b, c, d = symbols('a b c d', integer=True)\n    \n    equation = Eq(1000*a + 100*b + 10*c + d + 100*a + 10*b + c + 10*a + b + a, 1370)\n    \n    solutions = solve(equation, (a, b, c, d))\n    \n    for sol in solutions:\n        if all(x >= 0 and x <= 9 for x in sol):  # Ensure each digit is between 0 and 9\n            return 1000 * sol[0] + 100 * sol[1] + 10 * sol[2] + sol[3]\n\nans = solution()"
    ],
    "fbfcdbbeb2dd460580732e2456668e09": [
        "def solution():\n    goals = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    mean_goals = sum(goals) / len(goals)\n    return mean_goals\n\nans = solution()"
    ],
    "ee3ee1e00e154afca5040ce397cbbfac": [
        "def solution():\n    # Since the dwarfs are born in consecutive years,\n    # their ages form an arithmetic sequence.\n    # Let n be the age of the youngest dwarf.\n    # Then the ages of the youngest three dwarfs are n, n+1, and n+2.\n    \n    # Sum of the ages of the youngest three dwarfs is 42:\n    # n + (n+1) + (n+2) = 42\n    # 3n + 3 = 42 => 3n = 39 => n = 13\n\n    # The age of the youngest dwarf is 13,\n    # The age of the second youngest is 14,\n    # The age of the third youngest is 15.\n    \n    # Since the ages are consecutive, the ages of the oldest three dwarfs are:\n    # n+4, n+5, and n+6.\n    # Now we should calculate their sum.\n    n = 13\n    oldest_three_sum = (n+4) + (n+5) + (n+6)\n\n    return oldest_three_sum\n\nans = solution()"
    ],
    "bc4d4257932a4e18a0a6054b2ad402a3": [
        "def solution():\n    fractional_part_sum = 4/5 * 5\n    whole_number_sum = 19 + 199 + 1999 + 19999 + 199999\n    \n    return whole_number_sum + fractional_part_sum\n\nans = solution()"
    ],
    "06a5dba2a3c2483782a5e76f0725f304": [
        "def solution():\n    # Let x be the price of one football and y be the price of one volleyball.\n    # According to the given conditions we have two equations:\n    # x + 2y = 60 and 2x = 60 + 16 (since she gets 16 dollars back when she buys 2 footballs)\n    # Solving these equations will give us the price of one volleyball (y).\n\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    eq1 = Eq(x + 2*y, 60)\n    eq2 = Eq(2*x, 60 + 16)\n\n    solution_eq = solve((eq1, eq2), (x, y))\n    return solution_eq[y]\n\nans = solution()"
    ],
    "75889ef5d68c4e27a3f50900db827671": [
        "def solution():\n    janice_age = 11\n    sister_age = janice_age + 5\n    current_total_age = janice_age + sister_age\n\n    # Equation: current_total_age + 2 * years_in_future = 35\n    years_in_future = (35 - current_total_age) / 2\n\n    return int(years_in_future)\n\nans = solution()"
    ],
    "0be90630e25149ab81224adc5eed02eb": [
        "def solution():\n    total_marks_for_3_tests = 75 * 3\n    marks_scored_in_2_tests = 172\n    marks_in_remaining_test = total_marks_for_3_tests - marks_scored_in_2_tests\n    return marks_in_remaining_test\n\nans = solution()"
    ],
    "374399623a6247989f8e869566efbabe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dad, son = symbols('dad son')\n\n    equation1 = Eq(dad - 6, 5 * (son - 6))\n    equation2 = Eq(dad + son, 78)\n\n    solutions = solve((equation1, equation2), (dad, son))\n\n    return solutions[dad]\n\nans = solution()"
    ],
    "009d4994f44241d6adfaf6cd25586a33": [
        "def solution():\n    ans = 0\n    for i in range(1, 9):  # The fractions are running from 1/1 to 8/8 and back down to 1/8\n        for j in range(1, i+1):\n            ans += j / i  # Adding fractions in ascending order\n        for j in range(i-1, 0, -1):\n            ans += j / i  # Adding fractions in descending order, excluding the last element as it will be first in the next step\n    return ans\n\nans = solution()"
    ],
    "6e7c5cd2038a4a78b493c785f03022af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    terry, gerald = symbols('terry gerald')\n\n    equation1 = Eq(gerald, terry + 57)\n    equation2 = Eq(terry + gerald, 777)\n\n    solutions = solve((equation1, equation2), (terry, gerald))\n\n    return solutions[gerald]\n\nans = solution()"
    ],
    "97a3f06ac00743faa22d113268079816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_sweets, milk_chocolates, fruit_drops = symbols('total_sweets milk_chocolates fruit_drops')\n\n    # Given that 6 fruit drops was 2/7 of the number of milk chocolates\n    equation1 = Eq(fruit_drops, 6)\n    equation2 = Eq(fruit_drops, 2/7 * milk_chocolates)\n\n    # The number of milk chocolates was 3/4 of the total number of sweets\n    equation3 = Eq(milk_chocolates, 3/4 * total_sweets)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (total_sweets, milk_chocolates, fruit_drops))\n\n    return solutions[total_sweets]\n\nans = solution()"
    ],
    "96a62c49fc964fc58960e404634765ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    football, volleyball = symbols('football volleyball')\n\n    equation1 = Eq(1 * football + 2 * volleyball, 60)\n    equation2 = Eq(2 * football, 60 - 16)\n\n    solutions = solve((equation1, equation2), (football, volleyball))\n\n    return solutions[volleyball]\n\nans = solution()"
    ],
    "aa07dd133e5a418397ba560c1b9b4019": [
        "def solution():\n    from statistics import mean, median, mode\n\n    # Given values\n    mode_age = 7\n    mean_age = 9\n    median_age = 8\n    age_range = 6\n\n    # We know that the youngest age + range = oldest age, hence\n    # oldest_age = youngest_age + 6\n    # Since the mode is 7, we will have at least two team members of age 7.\n    # We also know that the median (the middle value in an ordered list) is 8,\n    # so the third value in the ordered list of ages is 8.\n    # So far we have two 7s and one 8.\n    # This means that the remaining two ages must average to (9*5 - 7*2 - 8) / 2\n    # = (45 - 14 - 8) / 2 = 23 / 2 = 11.5\n    # This is impossible as the ages are integers, so the last two ages are 11 and 12.\n    # Our ordered list of ages is now [7, 7, 8, 11, 12]\n    # The youngest could potentially be one if the average allows.\n    # We keep 7, 8, 11, 12 fixed and decrease the first 7 to see if we can get the correct mean.\n    \n    for youngest in range(1, 7):\n        ages = sorted([youngest, 7, 8, 11, 12])\n        if mean(ages) == mean_age and median(ages) == median_age and mode(ages) == mode_age:\n            return ages[-2]  # This will be the age of the second oldest member.\n\nans = solution()"
    ],
    "c5979856964d41d596b0d0d097b051db": [
        "def solution():\n    from math import factorial\n    \n    # There are three books to arrange and we can arrange n items in n! ways.\n    num_books = 3\n    num_arrangements = factorial(num_books)\n\n    return num_arrangements\n\nans = solution()"
    ],
    "925f4e025c564ed28a953715c34c7dc2": [
        "def solution():\n    return 57 + 8\n\nans = solution()"
    ],
    "0f51237988594921863438cf9edfab1c": [
        "def solution():\n    n = 20\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    return sum_of_cubes\n\nans = solution()"
    ],
    "3158da53b8bf4a7584a950b66fcdd9c7": [
        "def solution():\n    # From the first guess, we know that two digits are correct and in the correct positions.\n    # From the second guess, we know that two digits are correct but in the wrong positions.\n    # From the third guess, we know that all digits are correct but all in the wrong positions.\n\n    # Possible digits for each position based on the guesses\n    possible_digits = [[], [], [], []]\n    \n    # Since the third guess has all correct digits in the wrong positions,\n    # we use this information to determine possible positions for each digit.\n    # The digit 3 from the third guess can't be in the third position, but it can be in positions 1, 2, 4 based on the second guess.\n    possible_digits[0].append(\"3\")\n    # The digit 5 from the third guess can't be in the second position, but it can be in positions 1, 3, 4 based on the second guess.\n    possible_digits[1].append(\"5\")\n    # The digit 4 from the third guess can't be in the fourth position, but it can be in positions 1, 2, 3 based on the second and first guess.\n    possible_digits[2].append(\"4\")\n    # The digit 1 from the third guess can't be in the first position, but it can be in positions 2, 3, 4 based on the second guess.\n    possible_digits[3].append(\"1\")\n    \n    # Checking each guess against the possible positions\n    # For the first guess (1703), 1 and 7 are correct and in the correct positions\n    # So for the first position, we keep only 1 and remove any other possibilities\n    possible_digits[0] = [\"1\"]\n    # And for the third position, we keep only 0 and remove any other possibilities\n    possible_digits[2] = [\"0\"]\n    \n    # Now, we adjust the possibilities after the second guess since 2 and 4 are in incorrect positions\n    # '2' can't be in position 1 or 2, but can be in position 3 where '4' is not \n    # (since '4' was said to be in an incorrect position, and it's not in position 4 either)\n    possible_digits[2].append(\"2\")\n    # '7' can only be in position 2 since it's not possible in position 4 (because '1' cannot be in position 4)\n    possible_digits[1] = [\"7\"]\n\n    # Reconstruct the number from the derived digits\n    ans = int(''.join([possible_digits[i][0] for i in range(4)]))\n    return ans\n\nans = solution()"
    ],
    "047b5f556fb5469db5a0dd878deb688b": [
        "def solution():\n    first_term = 1\n    last_term = 49\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "ae6e80cdd9bc412b91d8c35ca30a7537": [
        "def solution():\n    from math import factorial\n\n    num_books = 3\n    arrangements = factorial(num_books)\n\n    return arrangements\n\nans = solution()"
    ],
    "ca3f6a5eb48f4f8e8b5fa5ab8277b925": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for p in permutations('ABCDE'):\n        if p[0] != 'A' and p[-1] != 'A':\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ecec780bcb244e6abbe08afdb7f88ba2": [
        "def solution():\n    import math\n    num_people = 16\n    ans = math.ceil(math.log(num_people, 2))\n    return ans\n\nans = solution()"
    ],
    "df15059d1f2245d7a0ebad02edda73c2": [
        "def solution():\n    pink = 3\n    yellow = pink + 7\n    red = 3 * yellow\n\n    total_red_and_yellow = red + yellow\n\n    return total_red_and_yellow\n\nans = solution()"
    ],
    "f74936f4fb2743fa9280b53676ad92ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x + 3*x + 2, 38 + 5*x - 8*x)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8485b1846a4246249bff0e15b2a80830": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    # A table costs two times as much as a chair\n    equation1 = Eq(table, 2 * chair)\n    # Two tables and three chairs cost $280\n    equation2 = Eq(2 * table + 3 * chair, 280)\n\n    solutions = solve((equation1, equation2), (table, chair))\n    return solutions[table]\n\nans = solution()"
    ],
    "18ce5581f91b49fc8dc1bb6048706547": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    scheduled_time = datetime.strptime('17:30', '%H:%M')\n    delay = timedelta(minutes=30)\n    actual_arrival_time = scheduled_time + delay\n    return actual_arrival_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "257cbb8e43a84bf4bc33363d090d12f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    original_ratio = Eq(apples / oranges, 3/8)\n    new_ratio = Eq((apples - 1) / oranges, 1/3)\n\n    solutions = solve((original_ratio, new_ratio), (apples, oranges))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "3f961fb2104d4e9e893a8f97f5406880": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for ones in range(0, 10):\n                if hundreds > tens < ones and hundreds != ones:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "c66ee3588fd642e996d89671f5c4c45a": [
        "def solution():\n    from math import factorial\n    def derangement(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n\n    ans = derangement(6)\n    return ans\n\nans = solution()"
    ],
    "30b9c89f50a64d548b5206fecab5e49e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n\n    equation1 = Eq(table, 2 * chair)\n    equation2 = Eq(2 * table + 3 * chair, 280)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "53091b38428546359c01b3a68ba14617": [
        "def solution():\n    colour_pencils = 0\n    while True:\n        notebooks_cost = (10 - colour_pencils) * 3\n        colour_pencils_cost = colour_pencils * 9\n        if notebooks_cost + colour_pencils_cost == 48:\n            break\n        colour_pencils += 1\n    return colour_pencils\n\nans = solution()"
    ],
    "f2f7e251a30f4cec8d22cfa15118db43": [
        "def solution():\n    total_students = 500\n    first_floor_rows = 9\n    first_floor_seats_per_row = 36\n\n    first_floor_capacity = first_floor_rows * first_floor_seats_per_row\n    second_floor_students = total_students - first_floor_capacity\n\n    return second_floor_students\n\nans = solution()"
    ],
    "fad26d9436534871b7a08dd833fbbf68": [
        "def solution():\n    current_term = 56\n    ratio = current_term // 28\n    next_term = current_term * ratio\n    return next_term\n\nans = solution()"
    ],
    "ed79c0ee5e45459ca9d0eef32c921bcc": [
        "def solution():\n    ans = sum((-1)**(i + 1) * i for i in range(1, 32))\n    return ans\n\nans = solution()"
    ],
    "952275a830de41e986a33a873accdb47": [
        "def solution():\n    ans = 385 // 7\n    return ans\n\nans = solution()"
    ],
    "814dfc7a21bc47f6afecf3149a685506": [
        "def solution():\n    # Let the first even number be x. Then the six consecutive even numbers are x, x+2, x+4, x+6, x+8, x+10\n    # The sum of these even numbers is 6x + 30 = 510\n    # Solve for x\n    x = (510 - 30) // 6\n\n    # Define all six consecutive even numbers based on x\n    numbers = [x + 2 * i for i in range(6)]\n\n    # Mean is the sum divided by the number of terms\n    mean = sum(numbers) / len(numbers)\n\n    # Median is the average of the two middle numbers for an even number of terms\n    median = (numbers[2] + numbers[3]) / 2\n\n    # The difference between the mean and the median\n    difference = mean - median\n\n    return difference\n\nans = solution()"
    ],
    "01993ccb07d9483683f5755975ca0a3a": [
        "def solution():\n    total_sevens = 0\n    for i in range(3, 48):\n        total_sevens += str(i).count('7')\n    return total_sevens\n\nans = solution()"
    ],
    "28db2d3d5a60452a9e31b2965f649f7d": [
        "def solution():\n    factor_2 = 0\n    factor_5 = 0\n    for i in range(1, 51):\n        while i % 2 == 0:\n            factor_2 += 1\n            i /= 2\n        while i % 5 == 0:\n            factor_5 += 1\n            i /= 5\n    ans = min(factor_2, factor_5)\n    return ans\n\nans = solution()"
    ],
    "78dd9ae80fbc4599b9a1de7b271c3242": [
        "def solution():\n    card_A = 40\n    card_B = card_A / 2\n    card_C = card_B / 2\n    total_value = card_A + card_B + card_C\n    return total_value\n\nans = solution()"
    ],
    "2a2937f5b7644f15afc477aa03c1c930": [
        "def solution():\n    total_weight = 250\n    concentration = 0.65\n    sugar_weight = total_weight * concentration\n\n    return sugar_weight\n\nans = solution()"
    ],
    "c71ea8f69b6c45d38f496733e04f53c0": [
        "def solution():\n    # Let x be the number of cards Helen wins\n    # Initially, Helen has 18 cards and Oliver has 22 cards\n    # After x rounds, Helen will have (18 + x) cards and Oliver will have (22 - x) cards\n    \n    # According to the problem, after several rounds, Helen has 10 more cards than Oliver\n    # So we set up the equation (18 + x) = (22 - x) + 10 and solve for x\n    \n    # Solving the equation\n    x = (10 + 22 - 18) // 2\n    \n    # Now, we calculate the number of cards Helen has after winning x rounds\n    helen_cards = 18 + x\n    return helen_cards\n\nans = solution()"
    ],
    "f18ab428f55e4e0181b741b70951b391": [
        "def solution():\n    starting_height = 12\n    climb_up = 23\n    climb_down = 31\n    climb_up_again = 17\n\n    current_height = starting_height + climb_up - climb_down + climb_up_again\n\n    return current_height\n\nans = solution()"
    ],
    "e686a0dd4b2744f6bfffc71fb37c57ec": [
        "def solution():\n    ans = 94 * 38\n    return ans\n\nans = solution()"
    ],
    "09b505251b1a41e4bcb506573632dfd0": [
        "def solution():\n    import math\n    N = 5 ** 100\n    num_digits = int(math.log10(N)) + 1\n    return num_digits\n\nans = solution()"
    ],
    "25b3374bcbaf4146b57baab9709569a8": [
        "def solution():\n    return 25 * 71\n\nans = solution()"
    ],
    "cd13264eaaab461380200e36148f3029": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for mangoes and strawberries\n    m, s = symbols('m s')\n    \n    # Set up the equations based on the problem\n    equation1 = Eq(m, s + 448)           # m is 448g more than s\n    equation2 = Eq(s, 2 * (m - 900))     # s is twice as much as m after giving away 900g of mangoes\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (m, s))\n    \n    # Get the mass of strawberries\n    return solutions[s]\n\nans = solution()"
    ],
    "59db59b0e0a842ca9b1e81136fe98f84": [
        "def solution():\n    # Since the numbers are consecutive, we can represent them as:\n    # x, x+1, x+2, x+3, x+4 where x is the smallest number.\n    # The sum of these numbers is 5x + 10 (because 1+2+3+4 = 10).\n    # According to the problem, the sum is 40:\n    # 5x + 10 = 40\n    # We solve for x:\n    x = (40 - 10) / 5\n    return int(x)\n\nans = solution()"
    ],
    "057fbde681f548c7a8497fef0220ea57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    number = symbols('number')\n\n    equation = Eq(3 * number - 8, 4)\n\n    solution = solve(equation, number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "6345c9979983478692f42a218f423f1a": [
        "def solution():\n    total_numbers = 99\n    total_prime_numbers = 25\n    \n    # Since the range is from 1 to 99, we subtract 1 because '1' is neither prime nor composite\n    total_composite_numbers = total_numbers - total_prime_numbers - 1\n    \n    return total_composite_numbers\n\nans = solution()"
    ],
    "a295b79b82d040ba90888d02ac50c7b7": [
        "def solution():\n    ans = 2 * 13 * 3.5\n    return ans\n\nans = solution()"
    ],
    "96b01291e9d14c7c96848c68852976a8": [
        "def solution():\n    return 2 * 13 * 3.5\n\nans = solution()"
    ],
    "2069f2cb20514f5e86df254f2165bc03": [
        "def solution():\n    from itertools import permutations\n\n    # Create a list of all possible 5-digit numbers using the given digits\n    digits = ['1', '0', '3', '4', '6', '8', '9']\n    all_numbers = [''.join(p) for p in permutations(digits, 5) if p[0] != '0']\n\n    # Filter the list to include only multiples of 9\n    multiples_of_9 = [int(num) for num in all_numbers if int(num) % 9 == 0]\n\n    # Find the largest and smallest multiples of 9\n    M = max(multiples_of_9)\n    N = min(multiples_of_9)\n\n    # Calculate the largest possible value of (M - N) / 9\n    return (M - N) // 9\n\nans = solution()"
    ],
    "6b83b3fc0cf6400a82301aaa18e28565": [
        "def solution():\n    initial_sweets = 33\n    sweets_given_away = 8\n    sweets_left = initial_sweets - sweets_given_away\n    return sweets_left\n\nans = solution()"
    ],
    "3814b49678af4c93bb25cc8fb167d647": [
        "def solution():\n    # Known terms in the sequence\n    fourth_term = 39\n    twelfth_term = 57\n\n    # Calculate the common difference using the formula: an = a1 + (n - 1) * d\n    difference = (twelfth_term - fourth_term) / (12 - 4)  # Difference between terms\n\n    # Calculate the first term: a1 = an - (n - 1) * d\n    first_term = fourth_term - (4 - 1) * difference\n\n    return first_term\n\nans = solution()"
    ],
    "0cdc1772d765463a83d6d817314f35cb": [
        "def solution():\n    digits = [1, 3, 5, 2]\n    max_number = int(''.join(map(str, sorted(digits, reverse=True))))\n    return max_number\n\nans = solution()"
    ],
    "e5d4d19b2a0b404d86003d303b4bd386": [
        "def solution():\n    return 4400004\n\nans = solution()"
    ],
    "2f4cada72bf546d2845330b0771d17c9": [
        "def solution():\n    # Calculate the total mass of the salt in the first solution\n    mass_salt_solution_1 = 30 * 0.30\n    \n    # Calculate the total mass of the salt in the second solution\n    mass_salt_solution_2 = 20 * 0.20\n    \n    # Sum of the salt in both solutions\n    total_mass_salt = mass_salt_solution_1 + mass_salt_solution_2\n    \n    # Calculate the total mass of the initial mixture\n    initial_mixture_mass = 30 + 20\n    \n    # Desired concentration is 10%, so the final mixture's salt should be 10% of its total mass\n    # Let the mass of water to be added be x\n    # The equation for the desired concentration: (total_mass_salt) / (initial_mixture_mass + x) = 10%\n    \n    # Calculate the total mass of mixture for a 10% solution\n    final_mixture_mass = total_mass_salt / 0.10\n    \n    # Calculate how much water needs to be added to reach that total mass for a 10% solution\n    water_to_add = final_mixture_mass - initial_mixture_mass\n    \n    return water_to_add\n\nans = solution()"
    ],
    "58710cbbe23c42eca9ad3e2a797617c4": [
        "def solution():\n    wrong_addend = 540\n    correct_addend = 450\n    wrong_sum = 987\n    difference_in_addend = wrong_addend - correct_addend\n    correct_sum = wrong_sum - difference_in_addend\n    return correct_sum\n\nans = solution()"
    ],
    "a72010a49704494c91001e683893ccc5": [
        "def solution():\n    total_salt = 30 * 0.30 + 20 * 0.20  # Total grams of salt in both solutions\n    final_concentration = 0.10  # Desired final concentration\n\n    # Let x be the grams of water that Amy should add\n    # Then the total weight of the new solution is 30 + 20 + x\n    # The equation for the concentration is: total_salt / (30 + 20 + x) = final_concentration\n\n    # We solve for x:\n    x = total_salt / final_concentration - (30 + 20)\n\n    return x\n\nans = solution()"
    ],
    "ed6d6de30c0a478ab65c8423f336ce88": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for the unknown integer in the boxes\n    x = symbols('x')\n    \n    # Set up the equation according to the puzzle x*x + x = 380\n    equation = Eq(x**2 + x, 380)\n    \n    # Solve the equation\n    solutions = solve(equation, x)\n    \n    # Select the positive integer solution\n    ans = [s for s in solutions if s.is_integer and s > 0][0]\n    \n    return ans\n\nans = solution()"
    ],
    "5a5711bd536c40dd88759a0c885cbbdf": [
        "def solution():\n    # Scenario 1: Attempting to ensure 29 blue balls\n    # Worst case: pick all red and white balls first\n    # 40 red balls + 30 white balls = 70 balls, plus 29 blue\n    scenario1 = 40 + 30 + 29\n\n    # Scenario 2: Attempting to ensure 29 red balls\n    # Worst case: pick all blue and white balls first\n    # 80 blue balls + 30 white balls = 110 balls, plus 29 red\n    scenario2 = 80 + 30 + 29\n\n    # Scenario 3: Attempting to ensure 29 white balls\n    # Worst case: pick all blue and red balls first\n    # 80 blue balls + 40 red balls = 120 balls, plus 29 white\n    scenario3 = 80 + 40 + 29\n\n    # The minimum number of balls needed is the smallest number from the scenarios\n    return min(scenario1, scenario2, scenario3)\n\nans = solution()"
    ],
    "0533c1ce2f634bc79e510f81aa3623bc": [
        "def solution():\n    # Draw one card from each pattern for each number, assume the worst case scenario\n    max_unique_cards = 4 * 2  # We can have 2 of each pattern before we get a third of any number\n\n    # To guarantee that the third card of the same number appears, draw one more card\n    cards_to_draw = max_unique_cards + 1\n\n    return cards_to_draw\n\nans = solution()"
    ],
    "f13a082b45f944e2a679050f7cab968c": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 21))\n    num_primes = len(primes)\n    total_cards = 20\n    proportion = num_primes / total_cards\n    return proportion\n\nans = solution()"
    ],
    "1e7ec51916d44aea846598bf1fabbce4": [
        "def solution():\n    return (3.2 + 5.6) / 2\n\nans = solution()"
    ],
    "cd7eb0808ff5495d92aa81f731c5f0a9": [
        "def solution():\n    n = 7 - 12\n    return n\n\nans = solution()"
    ],
    "216ce3bfa9344644a2c44241a09784d3": [
        "def solution():\n    numbers = [12, 4, 6, 4, 2, 9, 7]\n    mean_value = 8\n    total_numbers = 8\n    total_sum = mean_value * total_numbers\n    missing_number = total_sum - sum(numbers)\n    return missing_number\n\nans = solution()"
    ],
    "3a777a84d1174b55af384cb43e211812": [
        "def solution():\n    return 1275 - 1 + 51\n\nans = solution()"
    ],
    "4de8d3bd10bb44b382de57b1cba1fb5f": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for perm in permutations(\"ABCDEFGH\"):\n        if perm.index(\"C\") > perm.index(\"A\") and perm.index(\"C\") < perm.index(\"B\") or perm.index(\"C\") > perm.index(\"B\") and perm.index(\"C\") < perm.index(\"A\"):\n            if abs(perm.index(\"D\") - perm.index(\"E\")) == 1:\n                if abs(perm.index(\"F\") - perm.index(\"G\")) == 1:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "31df8f23c61440d0a0f22ef9a6d1d9f1": [
        "def solution():\n    notebooks = [5, 6, 8]\n    calendars = [7, 9]\n    \n    total_combinations = len(notebooks) * len(calendars)\n    return total_combinations\n\nans = solution()"
    ],
    "b0463272ddb246178e49ce0075bfc9a7": [
        "def solution():\n    return 546 - 287\n\nans = solution()"
    ],
    "661ce7b23d5040428b44b729610f90df": [
        "def solution():\n    students = 31\n    per_row = 5\n\n    rows = (students + per_row - 1) // per_row\n\n    return rows\n\nans = solution()"
    ],
    "0031ea04d15446af809c52112342ff37": [
        "def solution():\n    total_sum = 0\n    number = '123'\n    for i in range(1, 124):\n        total_sum += int(number * i)\n    \n    str_sum = str(total_sum)\n    hundreds_digit = int(str_sum[-3])\n    \n    return hundreds_digit\n\nans = solution()"
    ],
    "050789f6f9e949ee9482ca9c43230bc9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'v' be the volume of the lime solution transferred from each bottle\n    v = symbols('v')\n\n    # For Bottle A, 5 liters total - v transferred + v received from B\n    # New lime amount in A = lime in A originally - lime transferred + lime received from B\n    lime_A = 5 * 0.10 - v * 0.10 + v * 0.20\n\n    # For Bottle B, 3 liters total - v transferred + v received from A\n    # New lime amount in B = lime in B originally - lime transferred + lime received from A\n    lime_B = 3 * 0.20 - v * 0.20 + v * 0.10\n\n    # Both bottles have same concentration after the transfer\n    eq = Eq(lime_A / (5 - v + v), lime_B / (3 + v - v))\n\n    # Solve the equation\n    solution = solve(eq, v)\n    \n    # Extract the solution which makes sense (i.e., less than initial volume)\n    volum_to_transfer = [sol.evalf() for sol in solution if sol > 0 and sol <= 3]\n\n    # Return the volume if only one valid solution is present\n    if len(volum_to_transfer) == 1:\n        return volum_to_transfer[0]\n    else:\n        return None\n\nans = solution()"
    ],
    "f39a2ffc63b2451faaf10086c439a64c": [
        "def solution():\n    # Given ratio of the painting\n    ratio_length_to_breadth = 5 / 2\n    # Given length of the painting\n    painting_length = 90\n    # Given decreased length of the lego\n    lego_length_decrease = 70.5\n    # Length of the lego\n    lego_length = painting_length - lego_length_decrease\n    \n    # Breadth of the painting, calculated using the ratio and length of the painting\n    painting_breadth = painting_length / ratio_length_to_breadth\n\n    # Since the lego has the same proportion as the painting, their lengths and breadths should be in the same ratio\n    # Therefore, the breadth of the lego should be decreased by the same factor as the length. So:\n    lego_breadth = painting_breadth * (lego_length / painting_length)\n\n    return int(lego_breadth)\n\nans = solution()"
    ],
    "c85383c567de4d2c87d36c00bdee31a8": [
        "def solution():\n    total_amount = 50 + 20 + 10 + 5\n    coins = [50, 20, 10, 5]\n\n    for coin in coins:\n        if (total_amount - coin) == 2 * (total_amount - (total_amount - coin)):\n            lost_coin = coin\n            break\n            \n    return lost_coin\n\nans = solution()"
    ],
    "e1f6ce757e814cc98dd8bb318f3ce87e": [
        "def solution():\n    total_people = 25\n    likes_bananas = 18\n    likes_apples = 12\n\n    likes_both = likes_bananas + likes_apples - total_people\n\n    return likes_both\n\nans = solution()"
    ],
    "6ffd313df5c84cbea917dab85c602eb9": [
        "def solution():\n    jaan_speed = 8  # m/s\n    jaan_time = 200 / jaan_speed  # time Jaan took to finish the race\n    kane_distance = 200 - 12.5  # distance Kane covered when Jaan finished\n\n    kane_speed = kane_distance / jaan_time  # Kane's speed\n\n    return kane_speed\n\nans = solution()"
    ],
    "b2195314d6904c97819e32043f734644": [
        "def solution():\n    cake_price = 5.50\n    milk_price = 3.75\n    voucher = 110 / 100  # Convert pence to pounds\n\n    total_payment = cake_price + milk_price - voucher\n\n    return total_payment\n\nans = solution()"
    ],
    "20914560eb4c46a087218709875442de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the rate at which John, Raj, and Pete work by j, r, and p respectively. \n    # All rates are in 'jobs per minute'.\n    \n    j, r, p = symbols('j r p')\n\n    # If they work together they complete 1 job in 60 minutes.\n    eq1 = Eq(j + r + p, 1/60)\n\n    # John and Raj together complete 1 job in 72 minutes.\n    eq2 = Eq(j + r, 1/72)\n\n    # Raj and Pete together complete 1 job in 90 minutes.\n    eq3 = Eq(r + p, 1/90)\n\n    # We can solve the system of equations to find the individual rates.\n    solutions = solve((eq1, eq2, eq3), (j, r, p))\n\n    # Raj's rate is 'r' jobs per minute, so he takes 1/r minutes to complete the job alone.\n    # We'll multiply by 60 to convert to hours.\n    raj_time_in_minutes = 1/solutions[r] * 60\n\n    return raj_time_in_minutes\n\nans = solution()"
    ],
    "7516bd8e3a554c9e8a9888a667a1aa56": [
        "def solution():\n    normal_pay_per_hour = 12\n    overtime_multiplier = 1 + 1/4\n    normal_hours = 8\n    overtime_hours = 10 - normal_hours\n\n    total_pay = (normal_hours * normal_pay_per_hour) + (overtime_hours * normal_pay_per_hour * overtime_multiplier)\n    \n    return total_pay\n\nans = solution()"
    ],
    "d4d4df7fd96047a69ce80699a26c4864": [
        "def solution():\n    ans = 111 - 87\n    return ans\n\nans = solution()"
    ],
    "2c4866d958f643a58cb054fe6c157f1e": [
        "def solution():\n    return 35 / 100 * 60\n\nans = solution()"
    ],
    "1cb912909e124af1a7949a343cef8e13": [
        "def solution():\n    num = 10  # Smallest two-digit number\n    while not (num % 5 == 3 and num % 7 == 3):\n        num += 1\n    return num\n\nans = solution()"
    ],
    "dc92fc8ba3454847b1dd2c2308d30548": [
        "def solution():\n    digit_sum = 9 * (92 + 89 + 28)  # Sum of the three-digit sequence repeated\n    remainder = digit_sum % 9       # Remainder when the sum of these digits is divided by 9\n    return remainder\n\nans = solution()"
    ],
    "d896015adbd04599a2cc26daea95baf7": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq(1 / (1 + 1 / (2 + 1 / (3 + 1 / x))), 30 / 43)\n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "aa03416c5455441d81c098442d3c2d35": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n\n    # Let x be the current age of the younger brother\n    # Let y be the current age of the elder brother\n    x = Symbol('x')\n    y = Symbol('y')\n\n    # First equation: sum of their current ages is 42\n    eq1 = x + y - 42\n\n    # Second equation: a few years ago, when the elder brother\n    # was the age of the younger brother\n    # Let 'n' be the number of years ago when the situation happened\n    n = y - x\n    # At that time, the younger brother was 'x - n' years old\n    # The younger brother's age was half of the elder brother's current age\n    eq2 = x - n - 0.5*y\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (x, y))\n\n    # Return the age of the elder brother\n    return solutions[y]\n\nans = solution()"
    ],
    "9416b780ce1141bb848907b83016fcce": [
        "def solution():\n    # To ensure getting at least three of the same color,\n    # we take the worst-case scenario where we pick balls such that we don't\n    # get three of the same color until the very end.\n\n    # Worst-case scenario:\n    # Pick 2 white, 2 blue, 2 green, 2 orange (2 of each color).\n    # Next ball picked guarantees that we have three of the same color.\n    # So we add 1 to the total we picked so far.\n    min_balls = (2 * 4) + 1  # 2 of each of the 4 colors, +1 to get a third of one color.\n\n    return min_balls\n\nans = solution()"
    ],
    "c9d8078e6b1f44b7ae76553201933a68": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    lcm, remainder = solve_congruence(*congruences)\n    return remainder\n\nans = solution()"
    ],
    "4f4fb0feeaea4c15b84a9162a5ffbd55": [
        "def solution():\n    for tens_digit in range(1, 10):\n        for ones_digit in range(0, 10):\n            original_number = tens_digit * 10 + ones_digit\n            swapped_number = ones_digit * 10 + tens_digit\n            if swapped_number == (original_number // 3) + 3:\n                return original_number\n\nans = solution()"
    ],
    "57e9c2f24664499ba1b930195f008ac3": [
        "def solution():\n    # Let n be the number of teams. Each team plays n-1 other teams twice,\n    # thus the total number of matches is n*(n-1). Since each match involves two teams, we divide by 2.\n    # We set this equal to 30, the total number of matches, and solve for n.\n    \n    # n*(n-1)/2 = 30\n    # n^2 - n - 60 = 0, solving this quadratic equation for n.\n    # (n - 10)(n + 6) = 0\n    # n can't be negative for this context, so we discard n + 6 = 0.\n    # n = 10 is the solution for the number of teams.\n\n    return 10\n\nans = solution()"
    ],
    "440aa36a121f47c7b484c8c1f4367f6f": [
        "def solution():\n    boxes_per_kg = 4 / 14\n    total_boxes = boxes_per_kg * 66.5\n    return int(total_boxes)\n\nans = solution()"
    ],
    "3419bae73fb749eeb7ef999b0bb66f8f": [
        "def solution():\n    boxes_for_14kg = 4\n    apples_in_kg = 66.5\n\n    boxes_needed = (apples_in_kg * boxes_for_14kg) / 14\n\n    return boxes_needed\n\nans = solution()"
    ],
    "56dd9ea0cff247b9b36fe15ff5d91c1b": [
        "def solution():\n    # Let the length of rope be x meters and the circumference of the tree be y meters.\n    # According to the problem, we have two equations:\n    # 10y - x = 3 (1)\n    # 12y - x = -3 (2)\n    # We need to find the value for 8y - x.\n    \n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(10 * y - x, 3)\n    equation2 = Eq(12 * y - x, -3)\n\n    # Solve the system of equations for x and y\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Calculate what is left after 8 turns\n    left_after_8_turns = 8 * solutions[y] - solutions[x]\n\n    return left_after_8_turns\n\nans = solution()"
    ],
    "b79a007b43284d9e9fd0dbf5e85e2911": [
        "def solution():\n    countries = 11\n    min_same_country = 5\n    max_participants_without_guarantee = (countries - 1) * min_same_country\n    ans = max_participants_without_guarantee + 1\n    return ans\n\nans = solution()"
    ],
    "5bf4daf22b5a40a9887f31566b2d48fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y, z = symbols('x y z')\n\n    equation1 = Eq(x + y, 9)\n    equation2 = Eq(y + z, 15)\n    equation3 = Eq(z + x, 12)\n\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    return solutions[x] + solutions[y] + solutions[z]\n\nans = solution()"
    ],
    "eb26143450c84a16921ed5a98f9de962": [
        "def solution():\n    students = 31\n    tables_per_row = 5\n\n    rows_needed = (students + tables_per_row - 1) // tables_per_row\n\n    return rows_needed\n\nans = solution()"
    ],
    "0a280d66b3c54260bc3e5e5b92675682": [
        "def solution():\n    return 73 + 28 + 37 + 82\n\nans = solution()"
    ],
    "c155a8080b684c068448baa4beb540fd": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 4):\n        A, B, C, D = perm\n        if A != 0 and B != 0 and (A * 1000 + B * 100 + C * 10 + D + B * 1000 + C * 100 + D * 10 + A) == (C * 1000 + D * 100 + A * 10 + B + D * 1000 + A * 100 + B * 10 + C):\n            return A + B + C + D\n\nans = solution()"
    ],
    "93017999421c4dfb8d3245edf5e78291": [
        "def solution():\n    total_numbers = 1000\n    numbers_greater_than_1499 = 1999 - 1499\n\n    probability = numbers_greater_than_1499 / total_numbers\n\n    return probability\n\nans = solution()"
    ],
    "c35ec43fb3f648c2add882035b734b41": [
        "def solution():\n    # Catherine has 54 cards which is 5 more than Ben\n    ben_cards = 54 - 5\n    # Ash has three times as many cards as Ben\n    ash_cards = ben_cards * 3\n    return ash_cards\n\nans = solution()"
    ],
    "48e3194ccba043bc8a5dc6cec126652f": [
        "def solution():\n    return 92 * 503\n\nans = solution()"
    ],
    "467bd772358e49a68cedca5e2cd63eb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the total amount of money Mary had as 'm'.\n    m = symbols('m')\n\n    # If Mary spent 3/7th of her money on a bag, then she spent 3m/7.\n    spent = 3 * m / 7\n\n    # The amount not used is the remainder of her money: 4m/7.\n    not_used = 4 * m / 7\n\n    # According to the question, the difference between the amount spent and not used is £12.\n    equation = Eq(spent - not_used, -12)\n\n    # To find out how much she spent on the bag, we solve the equation for m.\n    solution = solve(equation, m)\n\n    # The amount spent on the bag is 3/7 of the total money.\n    amount_spent_on_bag = 3 * solution[0] / 7\n\n    return amount_spent_on_bag\n\nans = solution()"
    ],
    "a239a2f7efec479d8b6dec2e19b56410": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kitty, nora = symbols('kitty nora')\n\n    equation1 = Eq(kitty + nora, 11)\n    equation2 = Eq(kitty, nora + 3)\n\n    solutions = solve((equation1, equation2), (kitty, nora))\n\n    return solutions[kitty]\n\nans = solution()"
    ],
    "61c1df4ae6dc4b04b1f7294d3a316b5c": [
        "def solution():\n    # Applying inverse operations to solve for the original number\n    # The sequence of inverse operations: subtract 6 then divide by 2\n    result_after_addition = 28\n    original_number = (result_after_addition - 6) / 2\n    return original_number\n\nans = solution()"
    ],
    "a12f50c13e3547a0ae15f90b1739b8cc": [
        "def solution():\n    # According to the problem, the ages of the youngest three dwarfs are consecutive and add up to 42.\n    # Let's denote the age of the middle dwarf of the youngest three as 'm'. \n    # Then, the three ages are (m-1), m, and (m+1).\n    # The sum of their ages is (m-1) + m + (m+1) which simplifies to 3m.\n    # Hence, 3m = 42 and m = 14. This is the age of the middle dwarf among the youngest three.\n    \n    # Now, we calculate the total for the oldest three. Their ages would be...\n    # (m+1) + (m+2) + (m+3) = 3m + 6, where m was found to be 14.\n    # Thus, the sum of the oldest three dwarfs' ages is 3*14 + 6 = 42 + 6 = 48\n    \n    return 48\n\nans = solution()"
    ],
    "d85b8dc81daa4cff9e229ed18013f421": [
        "def solution():\n    n = 111\n    k = 7\n    ans = n - sum(range(1, k))\n    return ans\n\nans = solution()"
    ],
    "740c2ea1db4846958c463409a773c7f3": [
        "def solution():\n    return 2018 * 17\n\nans = solution()"
    ],
    "d111890eecfe4763af42bdbdd75ef647": [
        "def solution():\n    def sum_of_squares(n):\n        return (n * (n + 1) * (2 * n + 1)) // 6\n\n    n = 100 // 5\n    ans = sum_of_squares(n) * (5 ** 2)\n    return ans\n\nans = solution()"
    ],
    "6f0e1348bfdc4d1ea3352d71e2692834": [
        "def solution():\n    total_toys = 659\n    a_b_toys = 447\n    b_c_toys = 335\n\n    a_toys = a_b_toys + b_c_toys - total_toys\n    b_toys = a_b_toys - a_toys\n\n    return b_toys\n\nans = solution()"
    ],
    "bb1ead10049c43daa3e195435cc53a8d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    stickers_total, pupils = symbols('stickers_total pupils')\n\n    equation1 = Eq(stickers_total - 13 * pupils, 190)\n    equation2 = Eq(stickers_total - 17 * pupils, 50)\n\n    solutions = solve((equation1, equation2), (stickers_total, pupils))\n\n    return solutions[stickers_total]\n\nans = solution()"
    ],
    "c5c71659203f4ee49a62c35017eeabf9": [
        "def solution():\n    monthly_salary = 1.4\n    debt = 5.04\n    months_needed = debt / monthly_salary\n    return months_needed\n\nans = solution()"
    ],
    "308d0a3f39044f29afa6faf36c5ef1d5": [
        "def solution():\n    n = 72\n    factors = set()\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    ans = sum(factors)\n    return ans\n\nans = solution()"
    ],
    "676023bee5544241be8dd837eee97422": [
        "def solution():\n    numbers = [11, 13, 15, 17]\n    avg = sum(numbers) / len(numbers)\n    return avg\n\nans = solution()"
    ],
    "f5b829df546b43c1a2a3f325813d409e": [
        "def solution():\n    total_pupils = 500\n    difference = 30\n\n    # Let the number of boys be x\n    # Then the number of girls will be x + difference\n    # According to the problem statement:\n    # x + (x + difference) = total_pupils\n    # Simplifying, we get:\n    # 2x + difference = total_pupils\n    # Solving for x gives us the number of boys:\n    x = (total_pupils - difference) / 2\n\n    # The number of girls will be x + difference\n    num_girls = x + difference\n\n    return int(num_girls)\n\nans = solution()"
    ],
    "02b793a0cdc04afdb8f93895a893bda8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    file_cost, storybook_cost = symbols('file_cost storybook_cost')\n\n    # Equations based on the given information\n    equation1 = Eq(7 * file_cost + 4 * storybook_cost, 108)\n    equation2 = Eq(5 * file_cost + 3 * storybook_cost, 80)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (file_cost, storybook_cost))\n\n    # The total cost of 1 file and 1 storybook\n    total_cost = solutions[file_cost] + solutions[storybook_cost]\n\n    return total_cost\n\nans = solution()"
    ],
    "a4e98db3396e4882871511a7668317b7": [
        "def solution():\n    initial_trays = 7\n    initial_mean = 13\n    extra_sausages = 21\n    total_sausages = (initial_trays * initial_mean) + extra_sausages\n    total_trays = initial_trays + 1\n    new_mean = total_sausages / total_trays\n    return new_mean\n\nans = solution()"
    ],
    "a65f0fe64967475ba4b828d09b4f6362": [
        "def solution():\n    ans = 1.99 + 2.99 + 3.99 + 4.99\n    return ans\n\nans = solution()"
    ],
    "c01ed3d066de41f4b0dc3b432983e51a": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(0, hundreds):\n            for ones in range(hundreds, 10):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "c7c1666cff0e4299806585caa2a77a6d": [
        "def solution():\n    rani = 456\n    brenda = 528\n    total = rani + brenda\n    half = total // 2\n    amount_to_give = brenda - half\n    return amount_to_give\n\nans = solution()"
    ],
    "a5ba7c5275b6482395f95a17e5b4bb62": [
        "def solution():\n    return 8.8 + 5.6\n\nans = solution()"
    ],
    "3c947304032d4050bb2c1007cb1ba227": [
        "def solution():\n    # Time taken to cross the first bridge\n    time_first_bridge = 20  # seconds\n    # Time taken to cross the second bridge\n    time_second_bridge = 27  # seconds\n\n    # Length of the train\n    train_length = 137  # meters\n    # Length of the first bridge\n    first_bridge_length = 263  # meters\n\n    # Speed of the train is the same in both cases\n    # Speed = Distance / Time\n    # Distance when crossing the bridge is the length of the train + the length of the bridge\n    # For the first bridge, we have the distance and time, so we calculate the speed\n    speed_train = (first_bridge_length + train_length) / time_first_bridge\n\n    # For the second bridge, we have the speed and time, so we calculate the distance\n    # Which is the length of the train + the length of the second bridge\n    # Then we subtract the length of the train to get the length of the second bridge\n    second_bridge_length = (speed_train * time_second_bridge) - train_length\n\n    return second_bridge_length\n\nans = solution()"
    ],
    "cd598ad9ace144b2bfb79abe93cbc606": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red = symbols('blue red')\n\n    equation1 = Eq(blue + red, 125)\n    equation2 = Eq(2/5 * blue, 3/5 * red)\n\n    solutions = solve((equation1, equation2), (blue, red))\n\n    return solutions[blue] - solutions[red]\n\nans = solution()"
    ],
    "b0700754dfa7464eb071ad2a5f2c576a": [
        "def solution():\n    ans = 2014 * 40\n    return ans\n\nans = solution()"
    ],
    "2acae01fc5ad425b87d9eeb0cca3489d": [
        "def solution():\n    result = (3 + 1/2) / (1/4)\n    return result\n\nans = solution()"
    ],
    "879a251dabb24df9ab8ee19fc30fa517": [
        "def solution():\n    numerator = 2022 + 4567 * 7890\n    denominator = 4568 * 7890 - 5778\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "894f8948c65e423aafef61f63e598f12": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watch, handbag = symbols('watch handbag')\n    eq1 = Eq(3 * watch + 5 * handbag, 915)\n    eq2 = Eq(4 * watch + 2 * handbag, 632)\n\n    solutions = solve((eq1, eq2), (watch, handbag))\n\n    total_cost = 2 * solutions[watch] + 2 * solutions[handbag]\n\n    return total_cost\n\nans = solution()"
    ],
    "ab227cc9f73a4cb5a765a8c55e9d31b4": [
        "def solution():\n    original_price = 100\n    discount = 20\n    discount_percent = (discount / original_price) * 100\n    return discount_percent\n\nans = solution()"
    ],
    "33f0af890b564ab1aa7a516852f730ee": [
        "def solution():\n    ans = 56 - 7 * 4 / (5 - 3)\n    return ans\n\nans = solution()"
    ],
    "b12b9f5178d140e682c64da6f1cf80e5": [
        "def solution():\n    # since every child gets a different number of pieces and at least one piece,\n    # let's start by giving each child one piece\n    pieces = 88 - 8 \n    # we have subtracted 8 pieces, assuming each child gets at least 1\n    # now we share the remaining pieces starting from the child who gets the least\n\n    # we know the sequence of natural numbers that has unique values is 1,2,3...\n    # we want to minimize the pieces the last child gets, so we give the \n    # smallest numbers first to the children in increasing order\n    # therefore, first child gets 1, second gets 2, until the 7th child\n\n    for i in range(7):\n        pieces -= (i + 1)  # subtract each smallest amount from the pile to give to the next child\n\n    # now all the remaining pieces will go to the last (8th) child\n    pieces = pieces + 1  # we add the one piece the last child should already have\n\n    return pieces\n\nans = solution()"
    ],
    "9d9d88531760402f8ece6a4b9d1e5fd4": [
        "def solution():\n    grandmother_age_in_2008 = 80\n    mother_age_in_1996 = 40\n    mother_birth_year = 1996 - mother_age_in_1996\n    grandmother_birth_year = 2008 - grandmother_age_in_2008\n    grandmother_age_when_mother_born = mother_birth_year - grandmother_birth_year\n\n    return grandmother_age_when_mother_born\n\nans = solution()"
    ],
    "904f0cdae54f4d4a9375c041f3a5ebf8": [
        "def solution():\n    # Since A cannot be the receiver for the first two passes, \n    # there are 3 choices for the first pass and 2 choices for the second pass.\n    # The third pass must go back to A, so there is only 1 choice.\n    num_methods = 3 * 2 * 1\n    \n    return num_methods\n\nans = solution()"
    ],
    "53e2a3f3ec9744be90c9f22a4ed5982f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nicole, eddy = symbols('nicole eddy')\n\n    equation1 = Eq(nicole, 3 * eddy)\n    equation2 = Eq(nicole - 130 + eddy - 38, 24)\n\n    solutions = solve((equation1, equation2), (nicole, eddy))\n\n    return solutions[nicole]\n\nans = solution()"
    ],
    "870e50a685df4a29a8af253e6fc7e1bc": [
        "def solution():\n    return 3.5 * 0.8 + 5.5 * 0.8 + 4/5 * 1\n\nans = solution()"
    ],
    "9b9cfe3c11e145838950ed7277589f2e": [
        "def solution():\n    leroy_salt = 200 * 0.35\n    lenny_salt = 300 * 0.50\n    total_salt = leroy_salt + lenny_salt\n    total_solution = 200 + 300\n    concentration = (total_salt / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "ecc3b3f2bec24a058e7c38b24394b25f": [
        "def solution():\n    total_candy = 36\n    mike_eat = (total_candy - 6) // 2\n    valeria_eat = (total_candy - 22) // 2\n    valeria_candy = total_candy - mike_eat\n\n    return valeria_candy\n\nans = solution()"
    ],
    "363fad5f614943dfb0cf3e05c47b60d2": [
        "def solution():\n    total_weight = 300\n    concentration = 0.35\n    sugar_weight = total_weight * concentration\n    water_weight = total_weight - sugar_weight\n    return water_weight\n\nans = solution()"
    ],
    "e191879db45c48ff90d30488b861c796": [
        "def solution():\n    import math\n\n    # Calculate total permutations without any restrictions\n    total_permutations = math.factorial(8)\n\n    # Calculate permutations where A and B are together by treating them as one unit\n    ab_together = math.factorial(7) * 2  # 7 units (AB as one) and AB can be in 2 ways (A-B or B-A)\n\n    # Calculate permutations where C and D are together\n    cd_together = math.factorial(7) * 2  # 7 units (CD as one) and CD can be in 2 ways (C-D or D-C)\n\n    # Calculate permutations where A and B are together and C and D are together\n    ab_and_cd_together = math.factorial(6) * 2 * 2  # 6 units (AB and CD as ones), each can be in 2 ways\n\n    # Answer is permutations where AB are together minus the permutations where CD are together,\n    # plus the permutations where both AB and CD are together (since they were subtracted twice)\n    ans = ab_together - (cd_together - ab_and_cd_together)\n    return ans\n\nans = solution()"
    ],
    "9a2001545cec4ccaa9dd40221c502641": [
        "def solution():\n    return int((12**50)**(1/75))\n\nans = solution()"
    ],
    "86d05dc47dc744c0ac39d1fd344f31fb": [
        "def solution():\n    rotten_oranges = 34\n    bought_oranges = 25\n    final_count = 133\n\n    initial_count = (final_count + rotten_oranges) - bought_oranges\n\n    return initial_count\n\nans = solution()"
    ],
    "c67845741aaf419ca66672bdfdbdb918": [
        "def solution():\n    def psi_operation(a, b):\n        return a * b + 2 if a < b else a - b + 2\n\n    # Calculate (14 Psi 13)\n    first_operation = psi_operation(14, 13)\n\n    # Calculate (Result of (14 Psi 13) Psi 12)\n    ans = psi_operation(first_operation, 12)\n\n    return ans\n\nans = solution()"
    ],
    "525762f2f6e042f985a9eb27b6ebb6fd": [
        "def solution():\n    ans = sum([len(str(i)) for i in range(1, 20)])\n    return ans\n\nans = solution()"
    ],
    "3718c228fa6540b487cde297c66ba680": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    girls = symbols('girls')\n    \n    # Total number of students\n    total_students = 36\n    \n    # Total score for the class\n    total_score = total_students * 89\n    \n    # Let the number of girls be 'girls' and boys will be 'total_students - girls'\n    boys = total_students - girls\n    \n    # Girls' total score\n    girls_total_score = girls * 88\n    \n    # Boys' total score\n    boys_total_score = boys * 91\n    \n    # Equation based on total score\n    equation = Eq(girls_total_score + boys_total_score, total_score)\n    \n    # Solve the equation\n    solution = solve(equation, girls)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "ad5c7faae0734a86b7fadb1303a9f16e": [
        "def solution():\n    # Number of legs for each kind of pet\n    cat_legs = 4\n    dog_legs = 4\n    rabbit_legs = 4\n    bird_legs = 2\n\n    # Calculate the total legs for cats, dogs and rabbit\n    total_legs_for_cats_dogs_rabbit = 2 * cat_legs + 2 * dog_legs + 1 * rabbit_legs\n\n    # Subtract legs of cats, dogs and rabbit from total legs to find the legs for birds\n    legs_for_birds = 28 - total_legs_for_cats_dogs_rabbit\n    \n    # Calculate the number of birds by dividing the remaining legs by the number of legs a bird has\n    num_birds = legs_for_birds // bird_legs\n\n    return num_birds\n\nans = solution()"
    ],
    "26344c38e9c448e8b356d146763a48a2": [
        "def solution():\n    original_team_size = 5\n    original_time = 6\n    original_work = original_team_size * original_time\n\n    neighbor_fence_length_multiplier = 2\n    target_time_less_than = 5\n\n    # Finding work rate for the new fence which is twice as long\n    new_work = original_work * neighbor_fence_length_multiplier\n\n    # Find the minimum number of people required to do the new work in under target_time_less_than hours\n    # Since she wants it completed in less than 5 hours, we start our guess at 5 hours.\n    # If the work done by this number of people in 5 hours is more than or equal to new_work, we found our answer\n\n    for people in range(1, 1000):  # We use a reasonable upper limit for our search\n        if (people * target_time_less_than) >= new_work:\n            return people\n\nans = solution()"
    ],
    "88d1b67e1ad54227ad1e912db7853b6a": [
        "def solution():\n    ans = 694 + 888\n    return ans\n\nans = solution()"
    ],
    "c3d38fc4ca7d4aab8188ce6862d374c4": [
        ""
    ],
    "ca443bd6f6ae418ea84d9a56e57912a5": [
        "import math\n\ndef solution():\n    # Calculate the number of ways to give at least one book to each student.\n    # First, choose 3 books out of 7 to give one to each student.\n    three_books = math.comb(7, 3)\n    \n    # The remaining 4 books can be given to any of the three students.\n    # Each of the remaining books has three choices (3 students to give to), so 3^4 ways.\n    remaining_books = 3**4\n    \n    # Multiply the two results to get the total number of ways.\n    total_ways = three_books * remaining_books\n    \n    return total_ways\n\nans = solution()"
    ],
    "a36703deada040f4bfd94e22b7d1fa9b": [
        "def solution():\n    ans = 80 * 30\n    return ans\n\nans = solution()"
    ],
    "cbdb7ff490c04e3a92b3782d84c28e6a": [
        "def solution():\n    cookies_per_gram = 50 / 8\n    cookies_with_new_amount = cookies_per_gram * 21.6\n    return cookies_with_new_amount\n\nans = solution()"
    ],
    "0416bb6956e54f29ba4f1c69d845e321": [
        "def solution():\n    N = int(\"12345654321\", 8)\n    remainder_sum = N % 7 + N % 9\n    return remainder_sum\n\nans = solution()"
    ],
    "e377472a9c68458e9891ee67442a2346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    handbag, wallet, belt = symbols('handbag wallet belt')\n    \n    equation1 = Eq(handbag, wallet + 300)\n    equation2 = Eq(wallet, belt + 54)\n    equation3 = Eq(handbag + wallet + belt, 840)\n    \n    solutions = solve((equation1, equation2, equation3), (handbag, wallet, belt))\n\n    return solutions[belt]\n    \nans = solution()"
    ],
    "4aedbf6d92b44b4dad2e2eed5fdfabf3": [
        "def solution():\n    combined_age_three_years_ago = 7\n    elapsed_years_since_then = 3 + 4  # from 3 years ago until 4 years in the future\n    combined_future_age = combined_age_three_years_ago + 2 * elapsed_years_since_then\n    return combined_future_age\n\nans = solution()"
    ],
    "2d92ec4620534efbbcc9c406a5deeb1f": [
        "def solution():\n    ans = 513 - 236\n    return ans\n\nans = solution()"
    ],
    "38aa9d3b89004c14ad2ed83c80367f5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, magazine = symbols('book magazine')\n\n    equation1 = Eq(2 * book + 3 * magazine, 24.90)\n    equation2 = Eq(book + magazine, 10)\n\n    solutions = solve((equation1, equation2), (book, magazine))\n\n    return solutions[magazine]\n\nans = solution()"
    ],
    "d620d54398de4f13a1c45f2bf4327f65": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, magazine = symbols('book magazine')\n\n    equation1 = Eq(2 * book + 3 * magazine, 24.90)\n    equation2 = Eq(book + magazine, 10)\n\n    solutions = solve((equation1, equation2), (book, magazine))\n\n    return float(solutions[magazine])\n\nans = solution()"
    ],
    "284741c33dc2463f995c4965d27e5abb": [
        "def solution():\n    n = 99\n    ans = (n * (n + 1) * (2 * n + 1)) // 6 + (n * (n + 1)) // 2\n    return ans\n\nans = solution()"
    ],
    "bc7bc5a7f5724db3ab52e783cbad387f": [
        "def solution():\n    ans = 637 - 473\n    return ans\n\nans = solution()"
    ],
    "006b556a40774bb786928b5e8628397b": [
        "def solution():\n    # Let the smallest number be x\n    # So the three consecutive numbers are x, (x+1), (x+2)\n    # Their sum is given by x + (x+1) + (x+2) = 60\n    # 3x + 3 = 60\n    # 3x = 60 - 3\n    # x = (60 - 3) / 3\n    x = (60 - 3) // 3\n    # The largest number will be (x+2)\n    largest_number = x + 2\n    return largest_number\n\nans = solution()"
    ],
    "6bb84ead0f0149a69267c203c7dcf79f": [
        "def solution():\n    return 249 * 31\n\nans = solution()"
    ],
    "3e20cfd987aa4c41955c78eb36cd75ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7 * x - 3 * x + 2, 22)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f5bcf94ffda8467a907da5740aab11b5": [
        "def solution():\n    # Worst case: Annabella takes out all shirts that are not yellow first.\n    not_yellow_shirts = 6 + 4 + 12  # total number of orange, pink, and brown shirts\n    \n    # To get 1 yellow shirt for sure, she must take one more shirt after the non-yellow ones.\n    return not_yellow_shirts + 1\n\nans = solution()"
    ],
    "ebd40fb218054510aeb86c96dfced3fc": [
        "def solution():\n    total_needed_pens = 70 * 3\n    packs_needed = -(-total_needed_pens // 8) # Ceiling division to ensure enough packs\n    return packs_needed\n\nans = solution()"
    ],
    "33aab4041f0f402a8174696b588641a1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    big_pail, small_pail = symbols('big_pail small_pail')\n\n    equation1 = Eq(3 * big_pail + 4 * small_pail, 68)\n    equation2 = Eq(4 * big_pail + 2 * small_pail, 64)\n\n    solutions = solve((equation1, equation2), (big_pail, small_pail))\n\n    return solutions[big_pail]\n\nans = solution()"
    ],
    "7fadce2ae96f472cb7d9703a5f808b47": [
        "from sympy import symbols, solve, Eq\n\ndef solution():\n    A, B, C, D = symbols('A B C D', integer=True)\n    equation = Eq(101*A + 10*B + 101*C + 10*D, 726)\n    # Setting constraints for the digits A, B, C, D\n    constraints = (A > 0, A < 10, B > 0, B < 10, C > 0, C < 10, D > 0, D < 10,\n                   A != B, A != C, A != D, B != C, B != D, C != D)\n    solutions = solve((equation,) + constraints)\n    # Assuming we are looking for a single unique solution\n    answer = solutions[0][A] + solutions[0][B] + solutions[0][C] + solutions[0][D]\n    return answer\n\nans = solution()"
    ],
    "96a1c9809ffd4f579596d44d35b5896c": [
        "def solution():\n    return 249 * 31\n\nans = solution()"
    ],
    "dd56e7a3afe744abb3a668a3d42ef994": [
        "def solution():\n    return 3.2 + 6.41 + 0.207\n\nans = solution()"
    ],
    "bfc090949ff6429496bb1b10076bb3dd": [
        "def solution():\n    ans = 9 + 4/5 + 99 + 4/5 + 199 + 4/5 + 2999 + 4/5 + 39999 + 4/5 + 1\n    return ans\n\nans = solution()"
    ],
    "d24262d1d37a487682fd61310661cfd5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x, 2 - (3*x - 16))\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "2908d71fd0ef401ab05cc4649db1ec58": [
        "def solution():\n    sequence = [94, 80, 73, 66]\n    differences = [sequence[i] - sequence[i - 1] for i in range(1, len(sequence))]\n    next_difference = differences[-1] - (differences[-1] - differences[-2])\n    next_number = sequence[0] - next_difference\n\n    return next_number\n\nans = solution()"
    ],
    "7e6235a5f2e34ffeb942f81fedd76b05": [
        "def solution():\n    sugar_weight = 30\n    water_weight = 170\n    total_weight = sugar_weight + water_weight\n\n    concentration = (sugar_weight / total_weight) * 100\n    return concentration\n\nans = solution()"
    ],
    "f569465348234fb386433e1f3c49b08a": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Congruences based on the problem statement\n    congruences = [(1, 2), (1, 3), (1, 4), (1, 6), (0, 7)]\n\n    # Using the Chinese Remainder Theorem to find the solution\n    age, _ = solve_congruence(*congruences)\n\n    return age\n\nans = solution()"
    ],
    "d1da302670c445868750665ea9e1e53d": [
        "def solution():\n    for age in range(1, 58):\n        if age % 7 == 0 and (age + 1) % 9 == 0:\n            return age\n\nans = solution()"
    ],
    "b496ffab1ef6486791ac9a2562ae6998": [
        "def solution():\n    wine_glass_ml = 100\n    tumbler_ml = 200\n\n    wine_glass_sales = 25\n    tumbler_sales = 12\n\n    total_ml_sold = (wine_glass_sales * wine_glass_ml) + (tumbler_sales * tumbler_ml)\n\n    cartons_needed = total_ml_sold / 1000\n\n    return cartons_needed\n\nans = solution()"
    ],
    "7b9872c76da143f7914b38327c9d1581": [
        "def solution():\n    total_people = 15\n    position_from_front = 9\n    \n    position_from_end = total_people - position_from_front + 1\n\n    return position_from_end\n\nans = solution()"
    ],
    "f17a871c84cc4e1fb96fb91b864f0695": [
        "def solution():\n    n = 620 / 20\n    return n\n\nans = solution()"
    ],
    "68464cb7965d42e2974a5374db0adaf7": [
        "def solution():\n    return 125 * 32 * 25 * 7\n\nans = solution()"
    ],
    "a04cac85a9884a9187a1ad6d908f193b": [
        "def solution():\n    # Since we only need the last digit of the number, we take advantage of the fact that\n    # the last digit of powers of 2 cycles every 4: 2 -> 4 -> 8 -> 6 -> 2 ...\n    # Therefore, we can use modulus to find the position in the cycle\n\n    cycle_length = 4\n    exponent = 859433\n\n    # Find the position in the cycle\n    position_in_cycle = exponent % cycle_length\n\n    # Last digits cycle for powers of 2: 2, 4, 8, 6\n    last_digits_cycle = [2, 4, 8, 6]\n\n    # Get the last digit from the cycle\n    # We subtract 1 because list positions start from 0\n    last_digit = last_digits_cycle[position_in_cycle - 1]\n\n    return last_digit\n\nans = solution()"
    ],
    "ac493b6b7d0a401888bc24c649523bc1": [
        "def solution():\n    n = (36 / 3) / 4\n    return n\n\nans = solution()"
    ],
    "c7265fcca4564dfbbed3794cc4c26974": [
        "def solution():\n    from itertools import permutations\n    \n    digits = ['7', '6', '5', '4', '3', '2', '1']\n    for i in range(len(digits), 0, -1):\n        for perm in permutations(digits, i):\n            num = int(''.join(perm))\n            divisible = True\n            for digit in perm:\n                if num % int(digit) != 0:\n                    divisible = False\n                    break\n            if divisible:\n                return num\n\nans = solution()"
    ],
    "43dfa2d812fc44359cbc9ed198dfed87": [
        "def solution():\n    # divisor 53, remainder 2\n    divisor = 53\n    remainder = 2\n    \n    # initial number to check from\n    number = 120 + 1\n\n    while True:\n        if number % divisor == remainder:\n            return number\n        number += 1\n\nans = solution()"
    ],
    "368db30ced514aa0a4c14fd84ae26f51": [
        "def solution():\n    from math import lcm\n\n    # Calculate the least common multiple of 2, 4, and 6\n    lcm_2_4_6 = lcm(2, 4, 6)\n\n    # Start with the lcm of 2, 4, and 6, which is the first number that leaves a remainder of 1\n    # when divided by any of these numbers, then keep adding the lcm until the condition for division by 7 is also satisfied\n    age = lcm_2_4_6 + 1\n    while age % 7 != 5:\n        # add the lcm to check the next possible number\n        age += lcm_2_4_6\n\n    return age\n\nans = solution()"
    ],
    "9aee79585275499c8017c3e2e4499346": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let 'a' be the multiplier for avocados, 'p' for peaches, and 'l' for lemons.\n    a, p, l = symbols('a p l')\n    \n    # Original ratios given as the number of fruits.\n    original_avocados = 2 * a\n    original_peaches = 9 * a\n    original_lemons = 8 * a\n    \n    # After selling the fruits, the new quantities become:\n    avocados_after_selling = original_avocados - 52\n    peaches_after_selling = original_peaches - 12\n    lemons_after_selling = original_lemons - 60\n    \n    # The new ratio between peaches and lemons given as 6:5.\n    ratio_peaches_to_lemons = Eq(peaches_after_selling / lemons_after_selling, 6 / 5)\n    \n    # The solution of the ratio_peaches_to_lemons will give the value of 'a' (multiplier).\n    solution_1 = solve(ratio_peaches_to_lemons, a)\n    \n    # It might return multiple solutions, but we want the positive integer solution.\n    actual_multiplier = [sol for sol in solution_1 if sol > 0 and sol.is_integer][0]\n    \n    # Now we calculate the total fruits after selling.\n    total_avocados_left = 2 * actual_multiplier - 52\n    total_peaches_left = 9 * actual_multiplier - 12\n    total_lemons_left = 8 * actual_multiplier - 60\n    \n    # Total number of avocados, peaches and lemons left in the stall at the end.\n    total_fruits_left = total_avocados_left + total_peaches_left + total_lemons_left\n    return total_fruits_left\n\nans = solution()"
    ],
    "76aa21da5d384dccb38483d763fd552d": [
        "def solution():\n    from itertools import permutations\n\n    def is_divisible_by_digits(number):\n        for digit in str(number):\n            if int(digit) == 0 or number % int(digit) != 0:\n                return False\n        return True\n\n    max_possible_number = 0\n    for r in range(7, 0, -1):\n        for perm in permutations(range(1, 8), r):\n            number = int(''.join(map(str, perm)))\n            if is_divisible_by_digits(number) and number > max_possible_number:\n                max_possible_number = number\n                break  # Breaks since we are already on the largest possible number\n        if max_possible_number:\n            break\n\n    return max_possible_number\n\nans = solution()"
    ],
    "8d91d54e4c4b4bc6b73c53b8dd7ea30a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(52 - (4*x - 3), 47)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7c0b46427c0c48029b6941ed62bf32c8": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 2 and num % 11 == 2:\n            return num\n\nans = solution()"
    ],
    "531f65fc27864e3a881f25dddace2c6a": [
        "def solution():\n    divisor = 53\n    remainder = 2\n    quotient = 120 // divisor + 1\n    smallest_number = divisor * quotient + remainder\n    return smallest_number\n\nans = solution()"
    ],
    "e3b5e72653f44428b98d1a54dd056bca": [
        "def solution():\n    # Let a, b, and c represent the weights of Adam, Ben, and Carl respectively\n    # According to the question we have the following equations:\n    # a + b = 102\n    # b + c = 97\n    # a + c = 93\n\n    # Adding all three equations we get:\n    # 2a + 2b + 2c = 102 + 97 + 93\n    # a + b + c = (102 + 97 + 93) / 2\n    # Total weight of Adam, Ben, and Carl\n    total_weight = (102 + 97 + 93) / 2\n\n    return total_weight\n\nans = solution()"
    ],
    "9bbae54e3737448abd3501177769689d": [
        "def solution():\n    # Since the sum of an arithmetic sequence can be expressed as n/2 * (a_1 + a_n)\n    # and we know that the common difference d=2 in case of consecutive odd numbers, \n    # we can search for n (number of terms) and a_1 (first term) such that the sum is 900\n    # Also, n*(n-1) < 3600 is used because the sum of first n odd numbers is n^2, \n    # and we have a modified arithmetic sequence starting not necessarily from 1\n\n    n = 1  # Number of consecutive odd numbers\n    while n*(n-1) < 3600:\n        # Check if we can express 900 as a sum of 'n' consecutive odd numbers\n        # sum = n/2 * (first_term + last_term) = n * first_term + n*(n-1)\n        # The last_term = first_term + (n-1)*2, replace last_term in the equation to\n        # get: 900 = n/2 * (2*first_term + (n-1)*2) => 900 = n * first_term + n*(n-1)\n        # Therefore: first_term = (1800 - n*n) / n\n\n        if (1800 - n*n) % n == 0:\n            first_term = (1800 - n*n) // n\n            if first_term > 0 and first_term % 2 == 1:  # Check if first_term is positive and odd\n                max_n = n  \n        n += 1\n    return max_n\n\nans = solution()"
    ],
    "0de8f8f3eac5485fa0fae9f57ecc6d21": [
        "def solution():\n    return 46 * 37\n\nans = solution()"
    ],
    "c5cba4277873402db4efd1be60e4e847": [
        "def solution():\n    length = 4.5\n    width = 6.2\n    perimeter = 2 * (length + width)\n    return perimeter\n\nans = solution()"
    ],
    "6ffedd49a405465ab88697b2f7d7ae79": [
        "def solution():\n    numbers = [8.05, 8.50, 8.505, 8.055]\n    smallest_value = min(numbers)\n    return smallest_value\n\nans = solution()"
    ],
    "1743bb23aed04ec2b7a7f8fec1d14118": [
        "def solution():\n    height_cm = 2 * 100 + 2  # Convert metres to centimetres and add the extra centimetres\n    height_m = height_cm / 100  # Convert centimetres to metres\n    return height_m\n\nans = solution()"
    ],
    "481bd4bd37034fc8a43530a5477069e1": [
        "def solution():\n    principal = 5000\n    rate = 0.03\n    time = 2\n\n    amount = principal * ((1 + rate) ** time)\n\n    return amount\n\nans = solution()"
    ],
    "b8670c2b439149d7a72fcf4fe146bf96": [
        "def solution():\n    january_savings = 13\n    february_savings = 18\n    march_savings = 5\n    total_months = 3\n    \n    total_savings = january_savings + february_savings + march_savings\n    average_savings = total_savings / total_months\n    \n    return average_savings\n\nans = solution()"
    ],
    "26527b2a0a2c4e4d877500b4ff8a3656": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            time_string = f\"{hour:02d}{minute:02d}\"\n            if time_string.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "1634653b15164af9958af85781121677": [
        "def solution():\n    # Let x be the number of pupils\n    # Let b be the number of bookmarks Mr. Ng has\n    \n    # From the problem:\n    # b = 4x + 8 (If he gives each of his pupils 4 bookmarks, he will have 8 bookmarks left)\n    # b = 6x - 10 (If he gives each of his pupils 6 bookmarks, he will be short of 10 bookmarks)\n\n    # Solving the two equations: 4x + 8 = 6x - 10\n    # Simplify the equation: 2x = 18\n    # Solve for x\n    x = 18 // 2\n    \n    # Now using the value of x to find the number of bookmarks (b)\n    # Using either equation, let's use the first one: b = 4x + 8\n    b = 4 * x + 8\n    \n    return b\n\nans = solution()"
    ],
    "ffc16ac75f7f47fcb1d3eb07fae6db1e": [
        "def solution():\n    from sympy import isprime\n\n    # If 233 is a prime number, then it cannot be divided evenly among her students\n    # since we are told there are fewer than 233 students and more than 1 student.\n    return isprime(233)\n\nans = solution()"
    ],
    "4348474e45be4c4784a60dab18304844": [
        "def solution():\n    first_test_score = 60\n    second_test_score = first_test_score * 1.25\n    third_test_score = second_test_score * 0.8\n\n    total_score = first_test_score + second_test_score + third_test_score\n\n    return total_score\n\nans = solution()"
    ],
    "f4f08eaaa1b64a658de25585dad20e40": [
        "def solution():\n    ans = sum(i**2 for i in range(7, 106, 7))\n    return ans\n\nans = solution()"
    ],
    "ba6364de23e74495bec276c83b164e14": [
        "def solution():\n    sum_of_money = 4.22 + 31.49 + 0.76\n    return sum_of_money\n\nans = solution()"
    ],
    "6c7e9b74e26440e9abed54180422f05b": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(130, 151))\n    return len(primes)\n\nans = solution()"
    ],
    "bfadf094fc4b4d4f952061bbaeb8b5d0": [
        "def solution():\n    start = 56\n    end = 92\n    multiple = 4\n\n    start_multiple = (start - 1) // multiple + 1 \n    end_multiple = end // multiple\n\n    ans = end_multiple - start_multiple + 1\n\n    return ans\n\nans = solution()"
    ],
    "7e8a739ac409498b80dc7f1731900ebb": [
        "def solution():\n    for number in range(1, 100):\n        if number % 3 == 2 and number % 4 == 3 and number % 5 == 4:\n            return number\n\nans = solution()"
    ],
    "c4f94facc9b340b4a2a6145ef66bc8af": [
        "def solution():\n    jenny_pizza = 6\n    qiqi_pizza = jenny_pizza + 5\n    return qiqi_pizza\n\nans = solution()"
    ],
    "d8643be2681f41c897691ad4ae4d10ab": [
        "from math import comb\n\ndef solution():\n    # There are 15 students, and we need to choose 2 for a duet\n    total_ways = comb(15, 2)\n    return total_ways\n\nans = solution()"
    ],
    "f29917f11bd644f2a9c8e57a6f612d23": [
        "def solution():\n    distance = 144\n    time_downstream = 8\n    speed_ship = 15\n\n    # Calculate the speed of the stream\n    speed_stream = (distance / time_downstream) - speed_ship\n\n    # Calculate the speed of the ship upstream\n    speed_upstream = speed_ship - speed_stream\n\n    # Calculate the time to come back upstream\n    time_upstream = distance / speed_upstream\n\n    return time_upstream\n\nans = solution()"
    ],
    "c2b06e8dbe5c4834b11b9e8c5471c680": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of food the kangaroo eats each day.\n    x = symbols('x')\n    \n    # The hippo eats 45 kg more food than the kangaroo each day.\n    hippo_daily = x + 45\n    \n    # Over 20 days, the hippo has consumed 10 times as much food as the kangaroo.\n    equation = Eq(20 * hippo_daily, 10 * 20 * x)\n    \n    # Solve for x.\n    solution = solve(equation, x)\n    \n    # Calculate the total amount of food the hippo has consumed over 20 days.\n    total_hippo_food = 20 * (solution[x] + 45)\n\n    return total_hippo_food\n\nans = solution()"
    ],
    "94c97ffe57a2432ba8c0eeaa3ce36a92": [
        "def solution():\n    initial_time = (3 * 60) + 15  # Convert 3:15 PM to minutes\n    wait_time = 1 * 60 + 25  # Convert 1h 25min to minutes\n\n    meet_time = initial_time + wait_time  # Calculate the time they meet in minutes\n\n    # Convert the meet time back to hours and minutes\n    hours = meet_time // 60\n    minutes = meet_time % 60\n    \n    # Formatting for PM times if necessary\n    if hours >= 12:\n        hours -= 12  # Convert to 12-hour format if necessary (assuming the meet time is under 24 hours)\n\n    return f\"{hours}:{str(minutes).zfill(2)} PM\"\n\nans = solution()"
    ],
    "23289d4f9e054a8bb7c18484e70642db": [
        "def solution():\n    ans = sum(1/i for i in range(2, 21)) + \\\n          sum(2/i for i in range(3, 21)) + \\\n          sum(3/i for i in range(4, 21)) + \\\n          sum(4/i for i in range(5, 21)) + \\\n          sum(5/i for i in range(6, 21)) + \\\n          sum(6/i for i in range(7, 21)) + \\\n          sum(7/i for i in range(8, 21)) + \\\n          sum(8/i for i in range(9, 21)) + \\\n          sum(9/i for i in range(10, 21)) + \\\n          sum(10/i for i in range(11, 21)) + \\\n          sum(11/i for i in range(12, 21)) + \\\n          sum(12/i for i in range(13, 21)) + \\\n          sum(13/i for i in range(14, 21)) + \\\n          sum(14/i for i in range(15, 21)) + \\\n          sum(15/i for i in range(16, 21)) + \\\n          sum(16/i for i in range(17, 21)) + \\\n          sum(17/i for i in range(18, 21)) + \\\n          sum(18/i for i in range(19, 21)) + \\\n          19/20\n    return ans\n\nans = solution()"
    ],
    "a9ada9a471c14c9089a859c1a81f4727": [
        "def solution():\n    # We take out one green ball, and one blue ball.\n    # No matter what, the next ball we take out must match one of the colors already taken out.\n    # So we need to take out a total of 3 balls to ensure we have at least two of the same color.\n    return 3\n\nans = solution()"
    ],
    "fc103906e8e44feea1ebe0162fb169f5": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Alison's pencils leave a remainder of one fewer than the number of friends.\n    # This means we can represent each condition as a congruence where the pencil count\n    # is one less than the modulus, i.e., x ≡ -1 (mod m) where m is the number of friends.\n    # Solve for the smallest positive integer solution x.\n    congruences = [\n        (1, 2),  # x ≡ 1 (mod 2)\n        (2, 3),  # x ≡ 2 (mod 3)\n        (3, 4),  # x ≡ 3 (mod 4)\n        (4, 5),  # x ≡ 4 (mod 5)\n        (5, 6)   # x ≡ 5 (mod 6)\n    ]\n\n    # Use the Chinese Remainder Theorem to find the minimum number of pencils.\n    lcm_solution = solve_congruence(*congruences)\n\n    return lcm_solution[0]\n\nans = solution()"
    ],
    "5c85b6e4f6b74768adaad620ef94842e": [
        "def solution():\n    # Total work is the LCM of days they can independently finish the work\n    # In this case, assume 1 complete work is laying the railway tracks\n    # Worker A can do 1/15 of the work per day, B can do 1/20 of the work per day\n\n    # Combined work A and B can do per day\n    combined_rate = (1/15) + (1/20)\n    \n    # Total work done by A and B together in 2 days\n    work_done_in_two_days = 2 * combined_rate\n    \n    # Remaining work after 2 days\n    remaining_work = 1 - work_done_in_two_days\n    \n    # Number of days worker A will take to finish the remaining work alone\n    days_for_worker_A = remaining_work / (1/15)\n    \n    return days_for_worker_A\n\nans = solution()"
    ],
    "ffeb5f99fef6492788aecdd5191a6fbc": [
        "def solution():\n    x = (20 - 5) / 3\n    return x\n\nans = solution()"
    ],
    "699c77bb441b4ebda83105b6f2f13d9b": [
        "def solution():\n    yellow = 5\n    white = 15\n    black = 20\n\n    # In the worst case, she takes out all the yellow balls and still doesn't have 10 balls of the same color.\n    # Then she takes out 9 white balls, and she still doesn't have 10 balls of the same color.\n    # With the next ball she takes out, she must have either 10 white balls or 10 black balls.\n    least_number = yellow + (10 - 1) + 1\n\n    return least_number\n\nans = solution()"
    ],
    "25336ea78ab34494bb296b208a1d61f0": [
        "def solution():\n    # According to the Pigeonhole Principle, if n items are put into m containers,\n    # with n > m, then at least one container must contain more than one item.\n\n    # In this case, we want at least 11 students with the same zodiac sign.\n    # We have 12 zodiac signs, so we have 12 containers (zodiac signs).\n    # If we have 10 students for each of the first 11 zodiac signs,\n    # we would have 11 * 10 students, which is 110 students.\n    # To guarantee that the next student has the same zodiac sign as 11 others,\n    # we need one more student. Thus we need 110 + 1 students.\n\n    # Therefore, the minimum number of students needed to ensure that at least\n    # 11 students share the same zodiac sign is 111.\n\n    ans = 10 * (12 - 1) + 1\n    return ans\n\nans = solution()"
    ],
    "bf15675f14f14212bf6c9e9d10c58225": [
        "from itertools import permutations\n\ndef count_valid_permutations(p):\n    count = 0\n    for perm in permutations(p):\n        if (perm.index('D') == perm.index('E') - 1 or perm.index('D') == perm.index('E') + 1) and \\\n           abs(perm.index('F') - perm.index('G')) != 1 and \\\n           perm.index('C') > perm.index('A') > perm.index('B'):\n            count += 1\n    return count\n\ndef solution():\n    students = ['A', 'B', 'C', 'D', 'E', 'F', 'G']\n    ans = count_valid_permutations(students)\n    return ans\n\nans = solution()"
    ],
    "934f5ca54cb7439aa6d799d5d2c44dcb": [
        "def solution():\n    total_candies = 35\n    number_of_children = 9\n    starting_seat = 3\n\n    final_seat = (starting_seat + total_candies - 1) % number_of_children\n    final_seat = final_seat if final_seat != 0 else number_of_children\n\n    return final_seat\n\nans = solution()"
    ],
    "f24bfda99f1c4bb2bd7903af23a66829": [
        "def solution():\n    first_term = 4\n    common_difference = 3\n    num_terms = 60\n\n    # Sum of an arithmetic sequence formula: n/2 * (2a + (n - 1) * d)\n    ans = num_terms / 2 * (2 * first_term + (num_terms - 1) * common_difference)\n    return ans\n\nans = solution()"
    ],
    "9b63ec4f71094b1d885ce1afa323969f": [
        "def solution():\n    from math import lcm\n    interval = lcm(7, 3)\n    next_day = 2 + interval\n    return next_day\n\nans = solution()"
    ],
    "e576332748d74067a92a264b25cf6bf6": [
        "def solution():\n    total_children = 30\n    children_with_dogs = 19\n    children_with_cats = 18\n\n    # According to the inclusion-exclusion principle,\n    # we subtract the total number of children from the sum of children with dogs and cats\n    # to get the minimum number of children who like both.\n    \n    min_both = children_with_dogs + children_with_cats - total_children\n    \n    return min_both\n\nans = solution()"
    ],
    "e23be947b2694a46ae2d582a9c3ce1d5": [
        "def solution():\n    ans = -12 - 5\n    return ans\n\nans = solution()"
    ],
    "30dedaf91b7c41adbc5ee0f51c1d61cc": [
        "def solution():\n    data = [12, 145, 32, 77, 62]\n    data_range = max(data) - min(data)\n    return data_range\n\nans = solution()"
    ],
    "fea775d35ddc44779758a9feca2b1e44": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    shirts, skirts = symbols('shirts skirts')\n\n    equation1 = Eq(shirts, skirts - 36)\n    equation2 = Eq((2/3) * shirts + (5/6) * skirts, 72)\n\n    solutions = solve((equation1, equation2), (shirts, skirts))\n\n    return solutions[skirts]\n\nans = solution()"
    ],
    "dc7690a8acef47d2b8179414454362dd": [
        "def solution():\n    savings_per_month = 12\n    months = 3\n    total_savings = savings_per_month * months\n    return total_savings\n\nans = solution()"
    ],
    "332cdb55e65a4055a7b3f28234f15541": [
        "def solution():\n    # Assuming the table represents an arithmetic sequence.\n    # To find the sum of an arithmetic sequence, we can use the formula:\n    # S = n/2 * (a_1 + a_n) where:\n    # S is the sum of the sequence,\n    # n is the number of terms,\n    # a_1 is the first term, and\n    # a_n is the last term.\n    \n    # Since the table or sequence is not given, I will assume we have an arithmetic\n    # sequence beginning with an arbitrary first term \"a\" and with a common difference \"d\",\n    # having \"n\" terms in total. We can represent the last term as \"a + (n-1)*d\".\n    # Therefore, for n terms in the sequence, the sum will be:\n    \n    # S = n/2 * (2a + (n-1)d)\n\n    # The problem is to calculate the sum, however, we need the sequence details to proceed.\n    # Since the question doesn't specify what the numbers are, I can't produce an answer.\n    # I'll create placeholders for 'a', 'n', and 'd' that can be replaced with actual values.\n\n    a = 1  # Replace with the actual first term of the sequence\n    n = 1  # Replace with the actual number of terms in the sequence\n    d = 1  # Replace with the actual common difference of the sequence\n\n    # Calculating the sum\n    S = n / 2 * (2 * a + (n-1) * d)\n    return S\n\n# Placeholder value for 'ans' since we can't calculate without the actual sequence details\nans = solution()"
    ],
    "c0fbd9fc6c0349318ed02805c0f14bb0": [
        "def solution():\n    length_of_material = 100\n    width_of_material = 80\n    length_of_cloak = 5\n    width_of_cloak = 4\n\n    num_cloaks_lengthwise = length_of_material // length_of_cloak\n    num_cloaks_widthwise = width_of_material // width_of_cloak\n\n    ans = num_cloaks_lengthwise * num_cloaks_widthwise\n\n    return ans\n\nans = solution()"
    ],
    "4d94cc32d7e645e3ae2c634cbeddd095": [
        "def solution():\n    nell_ratio = 4\n    joe_ratio = 5\n    nell_sweets = 24\n    \n    total_ratio = nell_ratio + joe_ratio\n    total_sweets = (nell_sweets * total_ratio) / nell_ratio\n    \n    return total_sweets\n\nans = solution()"
    ],
    "b6548625db5443beaaee6fa94d6e0200": [
        "def solution():\n    count = 0\n    for i in range(1, 35):\n        count += len(str(i))\n    return count\n\nans = solution()"
    ],
    "4fd1c9c268424dcd9c1930cdbe826408": [
        "def solution():\n    # Speed going to the place\n    speed_to = 20  # miles per hour\n\n    # Distance of the place\n    distance = 120  # miles\n\n    # Time it takes to reach the place\n    time_to = distance / speed_to  # hours\n\n    # Total time for the round trip at an average speed of 30 miles per hour\n    avg_speed = 30  # miles per hour\n    total_time = (2 * distance) / avg_speed  # hours\n\n    # Time allowed for the return trip\n    time_back = total_time - time_to  # hours\n\n    # Calculate the speed needed for the return trip\n    speed_back = distance / time_back  # miles per hour\n\n    return speed_back\n\nans = solution()"
    ],
    "5ee23347e0d74d3baa1160988c797db8": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Create the congruences based on the problem statements\n    congruences = [(1, 5), (2, 6), (7, 11)]\n\n    # Use Chinese Remainder Theorem to solve the congruences\n    biscuit_count = solve_congruence(*congruences)\n\n    # The smallest positive solution is the number of biscuits\n    # Check for additional solutions within the given range (400 to 800)\n    biscuits = biscuit_count[0]\n    lcm = biscuit_count[1]\n    while biscuits < 400:\n        biscuits += lcm\n\n    return biscuits\n\nans = solution()"
    ],
    "7f69be54279d4eb282c98cde135e73cd": [
        "def solution():\n    # It takes 2 minutes to make 1 cut, dividing the rod into 2 pieces.\n    # To get 5 pieces, we need 4 cuts.\n    number_of_cuts_needed = 5 - 1\n    time_per_cut = 2\n\n    total_time = number_of_cuts_needed * time_per_cut\n\n    return total_time\n\nans = solution()"
    ],
    "501ad0e046c84d61b8cd854a0e3231d0": [
        "def solution():\n    numbers = [55, 62, 80, 36, 18, 29, 76, 92]\n    average = sum(numbers) / len(numbers)\n    return average\n\nans = solution()"
    ],
    "0a765ef7e14c440981d6c2d7b04dabd7": [
        "def solution():\n    x = -11\n    T = 7 + 7 * x\n    return T\n\nans = solution()"
    ],
    "a796ea09fb744741a25cd47d0f76b732": [
        "def solution():\n    return 31.6 * 7\n\nans = solution()"
    ],
    "1cb1f7199ce14218a8ee265ccbe06c7e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sean, jovan, herman = symbols('sean jovan herman')\n\n    equation1 = Eq(jovan, 2 * sean)\n    equation2 = Eq(herman, 3 * jovan)\n    equation3 = Eq(jovan, herman - 240)\n\n    solutions = solve((equation1, equation2, equation3), (sean, jovan, herman))\n    total_marbles = solutions[sean] + solutions[jovan] + solutions[herman]\n\n    return total_marbles\n\nans = solution()"
    ],
    "c16f42441097422a80a4fc1b82640502": [
        "def solution():\n    horses_initial = 12\n    days_initial = 15\n    horses_final = 20\n\n    # Using the unitary method to find the number of days the same pile of hay can feed 1 horse\n    days_per_horse = horses_initial * days_initial\n\n    # Finding the number of days the same pile can feed 20 horses\n    days_final = days_per_horse / horses_final\n    \n    return days_final\n\nans = solution()"
    ],
    "6fc0618e43e242b49bfdaeb256945ca5": [
        "def solution():\n    # Average of three numbers is 120\n    average_initial = 120\n    total_initial = average_initial * 3  # Total of the three numbers\n\n    # New average to be achieved is 110 with an additional number\n    new_average = 110\n    # For the new average to be 110 after adding a number, the new total\n    # must be the new average times 4 (since now there are 4 numbers)\n    total_new = new_average * 4\n\n    # The number to be added is the difference between the new total and the initial total\n    number_to_add = total_new - total_initial\n\n    return number_to_add\n\nans = solution()"
    ],
    "34140a9862a3448881425579d24734b9": [
        "def solution():\n    first_term = 5\n    common_difference = 4\n    last_term = 65\n\n    num_terms = ((last_term - first_term) // common_difference) + 1\n    sum_of_series = (num_terms / 2) * (first_term + last_term)\n    \n    return int(sum_of_series)\n\nans = solution()"
    ],
    "e68039658fe340f98db91346e8adc898": [
        "def solution():\n    x = -11\n    T = 7 + 7 * x\n    return T\n\nans = solution()"
    ],
    "ad7cb903a931476bafc590cff0bdcd26": [
        "def solution():\n    ans = 10.25 + 9.2 - 7\n    return ans\n\nans = solution()"
    ],
    "f01af5cab78a49d192ad10c608f1a18a": [
        "def solution():\n    ans = 301 + 303 + 305 - 9\n    return ans\n\nans = solution()"
    ],
    "90966aea3ce94728843a0f98acc20314": [
        "def solution():\n    # Considering the equation \\overline{14m} = 8 * \\overline{1m} - 3\n    # The left part \\overline{14m} can be expressed as 140 + m\n    # The right part 8 * \\overline{1m} - 3 can be expressed as 8 * (10 + m) - 3\n    # Now we set them equal to find the value of m\n    \n    # left part of the equation\n    left_part = 140 + m\n    \n    # right part of the equation\n    right_part = 8 * (10 + m) - 3\n\n    # Equating both parts to find the value of m\n    equation = left_part - right_part\n    \n    # solve the equation for m\n    from sympy import symbols, Eq, solve\n    \n    m = symbols('m')\n    equation = Eq(140 + m, 8 * (10 + m) - 3)\n    solution = solve(equation, m)\n    \n    # returning the value of m\n    return solution[0]\n\nans = solution()"
    ],
    "b7218901ffc24d00b3c7f10efa784bfe": [
        "from math import gcd\n\ndef solution():\n    return gcd(gcd(6, 9), 12)\n\nans = solution()"
    ],
    "51f1eccaaa5844a897f213dcf2f3e11a": [
        "def solution():\n    total_length = 900\n    total_companies = 4\n    total_days = 5\n\n    length_per_company_per_day = total_length / (total_companies * total_days)\n    return length_per_company_per_day\n\nans = solution()"
    ],
    "2c3ac058e2204cb087e20661a4ad713a": [
        "def solution():\n    data = [3, 2, 3, 5, 2, 4, 4, 1]\n    mean_value = sum(data) / len(data)\n    deviations = [abs(x - mean_value) for x in data]\n    mad = sum(deviations) / len(data)\n    return mad\n\nans = solution()"
    ],
    "99005a2c071040f195c27f37d05344df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, andy, charles = symbols('john andy charles')\n    equation1 = Eq(john + andy, 105)      # John + Andy = 105 kg\n    equation2 = Eq(john + charles, 67)    # John + Charles = 67 kg\n    equation3 = Eq(andy, 3 * charles)     # Andy = 3 * Charles\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (john, andy, charles))\n\n    # Calculating the total mass of the three boys\n    total_mass = solutions[john] + solutions[andy] + solutions[charles]\n\n    return total_mass\n\nans = solution()"
    ],
    "2dafccaefb9c4371a9aa0d6a0927b08b": [
        "def solution():\n    n = 13  # total number of oranges\n    k = 3   # total number of kids\n\n    # Since someone might not get any orange, we apply stars and bars theorem\n    # Number of ways = Combination(n + k - 1, k - 1)\n    from math import comb\n    ans = comb(n + k - 1, k - 1)\n    return ans\n\nans = solution()"
    ],
    "da5873ba4dcd43299bae1be0e6fd21e6": [
        "def solution():\n    shoe_price_per_set = 78\n    sock_price_per_pair = 12\n    legs_per_alien = 5\n    aliens = 6\n    total_legs = legs_per_alien * aliens\n\n    # Each set contains shoes for 5 legs, so we divide total legs by 5\n    total_shoe_sets_needed = total_legs // legs_per_alien\n\n    # Total cost for shoes\n    total_shoe_cost = total_shoe_sets_needed * shoe_price_per_set\n\n    # Each pair of socks contains socks for 2 legs, so we divide total legs by 2\n    # We also round up since half pairs are not sold\n    from math import ceil\n    total_sock_pairs_needed = ceil(total_legs / 2)\n\n    # Total cost for socks\n    total_sock_cost = total_sock_pairs_needed * sock_price_per_pair\n\n    # Total cost for both shoes and socks\n    total_cost = total_shoe_cost + total_sock_cost\n\n    return total_cost\n\nans = solution()"
    ],
    "5f22389e9a6a48338414d0443e5b1107": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bud, pip, tom = symbols('bud pip tom')\n\n    equation1 = Eq(bud, 3 * pip)\n    equation2 = Eq(tom, 2 * bud)\n    equation3 = Eq(bud + pip + tom, 50)\n\n    solutions = solve((equation1, equation2, equation3), (bud, pip, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "7e7e0d58634e4a7b912975d7485e5197": [
        "def solution():\n    possible_totals = [49, 80, 32, 66, 8, 58]\n    ans = [x for x in possible_totals if (x - 4) % 7 == 0]\n    return ans[0]\n\nans = solution()"
    ],
    "43c595f7d6ef46c0be98290684686cf6": [
        "def solution():\n    # Loop through all 4-digit numbers\n    for original in range(1000, 10000):\n        # Convert the original number to a list of its digits\n        original_digits = [int(d) for d in str(original)]\n        \n        # This moved digit is the 'ones' digit of the original number\n        moved_digit = original_digits[-1]\n        \n        # Change the first digit to the 'ones' digit of the original, creates a new number\n        new_number = moved_digit * 1000 + original_digits[1] * 100 + original_digits[2] * 10 + original_digits[0]\n        \n        # Check if the new number is greater than the original by 5877\n        if new_number - original == 5877:\n            ans = original\n            return ans\n\nans = solution()"
    ],
    "b791fcccc3654f3db33c3a0ec7363553": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Assuming x is the number of $0.50 cookies and y is the number of $0.10 cookies\n    x, y = symbols('x y')\n\n    # Equation 1: David's cookies cost thrice as much as Jeremy's cookies\n    equation1 = Eq(0.50 * 3, x * 0.50)\n\n    # Equation 2: Jeremy had 3/5 as many $0.50 cookies as $0.10 cookies\n    equation2 = Eq(x, 3/5 * y)\n\n    # Equation 3: There were 60 fewer $0.10 cookies than $0.50 cookies\n    equation3 = Eq(x, y - 60)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (x, y))\n\n    # Calculate how much Jeremy's cookies worth, which is the number of $0.10 cookies times $0.10\n    jeremy_cookies_worth = solutions[y] * 0.10\n\n    return jeremy_cookies_worth\n\nans = solution()"
    ],
    "360ae3551215452fb3d04ffde3f78d2c": [
        "def solution():\n    from itertools import combinations\n\n    numbers = [6, 12, 35, 175, 245, 300]\n    not_picked = None\n\n    # Get all possible combinations of 2 cards for Candy and 3 cards for Candice\n    candy_combinations = list(combinations(numbers, 2))\n    candice_combinations = list(combinations(numbers, 3))\n\n    # Create a product function\n    def prod(tup):\n        result = 1\n        for x in tup:\n            result *= x\n        return result\n\n    # Compare products and find the number not picked\n    for candy_choice in candy_combinations:\n        candy_product = prod(candy_choice)\n        for candice_choice in candice_combinations:\n            candice_product = prod(candice_choice)\n            if candy_product == candice_product:\n                combined_choices = set(candy_choice + candice_choice)\n                not_picked = next(iter(set(numbers) - combined_choices))\n                break\n        if not_picked is not None:\n            break\n\n    return not_picked\n\nans = solution()"
    ],
    "f5d42ab6bc434fe48dcbb4d9b9e637ea": [
        "def solution():\n    distance_first_fifth = 20\n    total_distance = 200\n\n    # Since the distance between the first and fifth tree is for four intervals\n    interval_distance = distance_first_fifth / 4\n\n    # The total number of intervals is the total distance divided by the interval distance\n    total_intervals = total_distance / interval_distance\n\n    # The number of trees is one more than the total number of intervals\n    num_trees = total_intervals + 1\n\n    return int(num_trees)\n\nans = solution()"
    ],
    "d8ec2b2972f74f84955c8f0a68f3ad73": [
        "def solution():\n    rate_a = 1 / 12  # Tap A fills in 12 minutes, so rate is 1/12 of tank per minute\n    rate_b = 1 / 8   # Tap B fills in 8 minutes, so rate is 1/8 of tank per minute\n    combined_rate = rate_a + rate_b  # combined rate of both taps\n\n    time_to_fill_half = (1 / 2) / combined_rate  # time to fill half the tank with both taps\n\n    return time_to_fill_half\n\nans = solution()"
    ],
    "6cab8d77da3e4447922fdcd2d2b21d24": [
        "def solution():\n    return 4392 // 6\n\nans = solution()"
    ],
    "e40ae4418f8f44cebd8f9882aa3ca6b1": [
        "def solution():\n    total_fruit = 48\n    fraction_apples = 5 / 8\n    apples = total_fruit * fraction_apples\n    pears = total_fruit - apples\n    return int(pears)\n\nans = solution()"
    ],
    "57725168bfb44ed79b6561aad62288cd": [
        "def solution():\n    jane_age = 12\n    cousin_age = jane_age * 2\n    cousin_future_age = cousin_age + 8\n    return cousin_future_age\n\nans = solution()"
    ],
    "35c4e495a24542e1b20ed3ff479cced6": [
        "def solution():\n    ans = 148 + 73\n    return ans\n\nans = solution()"
    ],
    "cf2c548f0cae420c9a89c81143562fc1": [
        "def solution():\n    # Let n be the side length of the original square array of boys.\n    # The total number of boys will be n^2.\n    # When the girls are added, the side length of the square array becomes n + 1.\n    # The total number of students after adding the girls will be (n + 1)^2.\n    \n    # Since 17 girls are added to the sides, we know that one row and one column is added outside.\n    # The difference between the larger square and the original square should be 17.\n    \n    # Therefore, the equation to solve is:\n    # (n + 1)^2 - n^2 = 17\n    # Simplifying, we get:\n    # n^2 + 2n + 1 - n^2 = 17\n    # Therefore:\n    # 2n + 1 = 17\n    # Solving for n:\n    n = (17 - 1) // 2\n    \n    # Now, using the value of n to find the total number of boys:\n    total_boys = n ** 2\n    \n    return total_boys\n\nans = solution()"
    ],
    "4a6ce2ef677140aebc108d44cab3b1ca": [
        "def solution():\n    # Jason's first step is correct: (36 * 21) / (6 * 7)\n    first_step = (36 * 21) / (6 * 7)\n    \n    # Jason's second step is correct: 36 * 21 / 6 * 7\n    second_step = 36 * 21 / 6 * 7\n    \n    # Jason's third step is incorrect: He should have divided 36 by 6 before multiplying\n    # The correct third_step should be: (36 / 6) * 21 * 7\n    third_step = (36 / 6) * 21 * 7\n    \n    # Jason's final step should yield the same result as the correct third step\n    final_step = third_step\n\n    # Jason's answer is correct if his final step is equal to 882\n    is_answer_correct = final_step == 882\n\n    # CIRCLE out his mistake (if any) and write out the correct workings\n    # In this case, Jason's mistake is in the third step where he incorrectly rearranges the operations.\n    if is_answer_correct:\n        mistake = \"\"\n        correct_workings = final_step\n    else:\n        mistake = \"36 / 6 * 21 * 7\"\n        correct_workings = third_step\n    \n    return mistake, correct_workings\n\nans = solution()"
    ],
    "c4a1d3b65f70441c8f162b68482444ed": [
        "def solution():\n    ann_position = 8\n    people_between = 3\n    david_position_from_end = 2\n\n    total_people = ann_position + people_between + david_position_from_end\n    return total_people\n\nans = solution()"
    ],
    "d744cc75e3ab4185ad0c2604e81b69c3": [
        "def solution():\n    total_students = 44\n    maths_students = 30\n    art_students = 26\n\n    # Using the inclusion-exclusion principle\n    both_competitions = maths_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "c6bfa3d0de504912b6200f3d457f6a73": [
        "def solution():\n    first_number = 157\n    second_number = first_number - 98\n    total_sum = 555\n\n    third_number = total_sum - (first_number + second_number)\n\n    return third_number\n\nans = solution()"
    ],
    "35f3ac45fb9a416cab9f6a6f3d80fc88": [
        "def solution():\n    ans = -7 + -3\n    return ans\n\nans = solution()"
    ],
    "9138c2779a554688a69ae241821b9044": [
        "def solution():\n    ans = 3280 / 1000\n    return ans\n\nans = solution()"
    ],
    "995d99072a7246aa89a178ecfa7b3be9": [
        "def solution():\n    # Given proportion n:8 = 9:12\n    # Cross-multiply to find n\n    n = (9 * 8) / 12\n    return n\n\nans = solution()"
    ],
    "c1a30ce92e014b75b30b4b0d41e23b10": [
        "def solution():\n    total_distance = 9\n    distance_per_day = 3\n    slide_per_night = 1\n    day_counter = 0\n    climbed_distance = 0\n\n    while climbed_distance < total_distance:\n        day_counter += 1\n        climbed_distance += distance_per_day\n        if climbed_distance >= total_distance:\n            break\n        climbed_distance -= slide_per_night\n\n    return day_counter\n\nans = solution()"
    ],
    "91aac3f6cd314824a5ff7ae8d57ba16f": [
        "def solution():\n    total_students = 44\n    maths_students = 30\n    art_students = 26\n\n    both_competitions = maths_students + art_students - total_students\n    \n    return both_competitions\n\nans = solution()"
    ],
    "6ba693d3debc40ffbe091f4a2e915e1a": [
        "def solution():\n    # To make sure we get 29 balls of one color, 28 balls of another color, and 10 balls of the last color,\n    # in the worst-case scenario, we should consider the opposite situation where we try to pick as many balls \n    # as possible without fulfilling the requirement.\n    \n    # First, we pick 28 balls of each color to avoid getting 29 balls of any color,\n    # which adds up to 28 * 3 = 84.\n    pick_without_29_of_any = 28 * 3\n\n    # Then, to avoid getting 28 balls of the third color, we only pick 27 more of the two colors\n    # (since we already have 10 balls of the last color).\n    # So we pick 27 * 2 = 54 more balls.\n    pick_without_28_of_last = 27 * 2\n\n    # At this point, we have 84 + 54 = 138 balls and we have not yet fulfilled the requirement.\n    # Finally, picking one more ball would force us to have at least 29, 28, and 10 balls of the three colors.\n    # Therefore, we need to pick at least 138 + 1 = 139 balls.\n    min_balls_to_pick = pick_without_29_of_any + pick_without_28_of_last + 1\n\n    return min_balls_to_pick\n\nans = solution()"
    ],
    "64953fb1208e4686b70662072858e299": [
        "def solution():\n    principal = 800\n    rate = 8 / 100\n    time = 3\n\n    simple_interest = principal * rate * time\n\n    return simple_interest\n\nans = solution()"
    ],
    "0222cefe72d14af08beade5cd8d39234": [
        "def solution():\n    lucy_sleeps = 8\n    mary_sleeps = lucy_sleeps + 2\n    return mary_sleeps\n\nans = solution()"
    ],
    "7fccc27dfac64e26ac8313027c062718": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6 * 1.5 + 4*x, 19)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d4270b64c9444e9bae6186f03a8dd3cf": [
        "def solution():\n    england_mountain_height = 978\n    world_highest_mountain_height = 8848\n\n    difference = world_highest_mountain_height - england_mountain_height\n\n    return difference\n\nans = solution()"
    ],
    "c159c9b51b5641cb9fe4bd410317a6b6": [
        "def solution():\n    primes = [\n        2, 3, 5, 7, 11, 13, 17, 19,\n        23, 29, 31, 37, 41, 43, 47\n    ]\n\n    for prime in primes:\n        if prime < 50 and prime % 3 == 2 and prime % 5 == 2:\n            return prime\n\nans = solution()"
    ],
    "1fef03e615784d6ab50b1a8664c3bed8": [
        "def solution():\n    # Since the factorial of any number greater than or equal to 10\n    # will have 0 as the last digit due to the presence of the factors\n    # 10 = 2 * 5, any factorial of a number greater than 9 will end with 0.\n    # Therefore, the last digit of 2014! is 0.\n    return 0\n\nans = solution()"
    ],
    "2234f3644e4744e1abe7c224874b8458": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2*(x+3), 30)\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "ba39e5d277a84ab58e881af5d3bc8aa5": [
        "def solution():\n    product = 2*2*3*8*5*5*5\n    count = 0\n    while product % 10 == 0:\n        count += 1\n        product //= 10\n    return count\n\nans = solution()"
    ],
    "20985347da3c477badaed88276511692": [
        "def solution():\n    return 0.64 * 10\n\nans = solution()"
    ],
    "06b709845181421a902cea1ac8c94213": [
        "def solution():\n    return 6 / (6 / 20 * 30)\n\nans = solution()"
    ],
    "873d86ac5c8b42ebb89adf32077600aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the starting amounts\n    alicia, beth, casey = symbols('alicia beth casey')\n\n    # Equation for the total amount they had initially\n    total_eq = Eq(alicia + beth + casey, 900)\n\n    # Equations for the amount each spent\n    alicia_spent = alicia / 2\n    beth_spent = 60\n    casey_spent = 3 * alicia_spent\n\n    # Equations for the amount each had left\n    alicia_left = alicia - alicia_spent\n    beth_left = beth - beth_spent\n    casey_left = casey - casey_spent\n\n    # Since they all had the same amount left\n    same_left_eq1 = Eq(alicia_left, beth_left)\n    same_left_eq2 = Eq(beth_left, casey_left)\n\n    # Solve the system of equations\n    solutions = solve((total_eq, same_left_eq1, same_left_eq2), (alicia, beth, casey))\n\n    return solutions[alicia]\n\nans = solution()"
    ],
    "1406508f604a4d8b99426de2592c46fd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_number = symbols('original_number')\n    new_number = 10 * original_number\n    equation = Eq(original_number + new_number, 253)\n\n    solution = solve(equation, original_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "788387594b6e4c5eba7e277ec7c07b6e": [
        "def solution():\n    # Let x be the number we are looking for\n    # According to the problem, we have the following equation:\n    # (((x + 6) * 3) / 8) - 8 = 1\n    # Now we have to work backwards to find the number x\n    # Add 8 to both sides of the equation\n    # (((x + 6) * 3) / 8) = 9\n    # Multiply both sides by 8\n    # ((x + 6) * 3) = 72\n    # Divide both sides by 3\n    # (x + 6) = 24\n    # Subtract 6 from both sides\n    # x = 18\n    # So the number we are looking for is 18\n    return 18\n\nans = solution()"
    ],
    "c8ac5b12c5ef4250bf78a994cef11a8c": [
        "def solution():\n    initial_seashells = 380\n    given_to_sister = 35\n    given_to_friend = 23\n    picked_up = 70\n    number_of_boxes = 8\n\n    remaining_seashells = initial_seashells - given_to_sister - given_to_friend + picked_up\n    seashells_per_box = remaining_seashells // number_of_boxes\n\n    return seashells_per_box\n\nans = solution()"
    ],
    "ef204ac96744497b958e9e43d91d62c7": [
        "def solution():\n    for num in range(1, 90):\n        if num % 9 == 0 and (num + 1) % 5 == 0:\n            is_prime = True\n            for i in range(2, int((num-1) ** 0.5) + 1):\n                if (num-1) % i == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                return num\n\nans = solution()"
    ],
    "ac96959c816f40b994c3095a95678430": [
        "def solution():\n    # The number of cookies eaten follows an arithmetic sequence\n    # Let x be the number of cookies eaten on the first day\n    # The sequence would then be: x, x+6, x+12, x+18, x+24\n    # The sum of this sequence over 5 days equals 100\n    # Therefore, we can use the sum formula for an arithmetic sequence:\n    # Sum = n/2 * (2a + (n-1)d)\n    # Here, n = 5 (number of days), a = x (first day cookies), d = 6\n    # We want to find x, so we setup the equation and solve for x:\n    # 100 = 5/2 * (2x + (5-1)*6)\n    \n    # Solving the equation:\n    # 100 = 5/2 * (2x + 24)\n    # 100 = 5/2 * (2x + 24)\n    # 100 = 5x + 60\n    # 40 = 5x\n    x = 40 / 5\n    \n    return x\n\nans = solution()"
    ],
    "1f1415e1ba0e473686320bc1228072ad": [
        "def solution():\n    amount = 250\n    percentage = 18\n    ans = (percentage / 100) * amount\n    return ans\n\nans = solution()"
    ],
    "fbb644a513c74c369072437e70b25c4b": [
        "def solution():\n    count = 0\n    for i in range(1, 481):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "1cc6abdd4aa14ca3ba0c0f221bc83033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cayden, sicheng, yixuan = symbols('cayden sicheng yixuan')\n    equation1 = Eq(cayden, sicheng + 6)\n    equation2 = Eq(yixuan, cayden * 2)\n    equation3 = Eq(yixuan, sicheng + 22)\n\n    solutions = solve((equation1, equation2, equation3), (cayden, sicheng, yixuan))\n\n    total_questions = solutions[cayden] + solutions[sicheng] + solutions[yixuan]\n\n    return total_questions\n\nans = solution()"
    ],
    "e93a2e8d34fe4c5d88042e9cb1dc1359": [
        "from math import factorial\n\ndef solution():\n    total_letters = factorial(5)\n    p_count = factorial(2)\n    ans = total_letters // p_count\n    return ans\n\nans = solution()"
    ],
    "84593b3ba13b4e8a80ff8451f501055f": [
        "def solution():\n    count = 0\n    for i in range(1, 481):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "5d03707100c24bec944429cac593007c": [
        "def solution():\n    # calculate the cost per roll at Ali's shop\n    cost_per_roll_ali = 2.40 / 8\n\n    # cost per roll at Mya's shop is twice that of Ali's shop\n    cost_per_roll_mya = cost_per_roll_ali * 2\n\n    # calculate the cost for 3 rolls at Mya's shop\n    cost_for_3_rolls_mya = cost_per_roll_mya * 3\n\n    return cost_for_3_rolls_mya\n\nans = solution()"
    ],
    "6a2c78cfdb9a4d7fb383272b52cd59ee": [
        "def solution():\n    girls = 12\n    boys_fraction = 2/5\n    total_fraction = 1\n    girls_fraction = total_fraction - boys_fraction\n    \n    total_children = girls / girls_fraction\n    boys = total_children * boys_fraction\n    \n    return int(boys)\n\nans = solution()"
    ],
    "c872f5bf2c784f41bccb9e92a97425cc": [
        "def solution():\n    from sympy import primefactors, divisor_count\n\n    # Prime factors of 96\n    factors = primefactors(96)\n    ans = divisor_count(96)\n\n    return ans\n\nans = solution()"
    ],
    "e041fe632ffb4b6c9323daa6940df30a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ashley = symbols('ashley')\n    crystal = Eq(2 * ashley)\n    justin = Eq(10 * ashley)\n\n    # Crystal's pages = Ashley's pages * 2\n    crystal_pages = 2 * ashley\n\n    # Justin's pages = Crystal's pages + 72\n    # also Justin's pages = Ashley's pages * 10\n    justin_pages = (crystal.lhs + 72).subs(crystal.lhs, ashley*2)\n\n    # Total pages read by all three\n    total_pages = ashley + crystal_pages + justin_pages\n\n    # Solve the equation for Ashley's pages\n    ashley_pages = solve(justin_pages - 72 - 10 * ashley, ashley)\n\n    # Calculate total\n    total = total_pages.subs(ashley, ashley_pages[0])\n\n    return int(total)\n\nans = solution()"
    ],
    "64993852492147cc8482c078cd34b38e": [
        "def solution():\n    first_percentage = 0.60\n    second_percentage = 0.10\n    amount = 900\n\n    ans = first_percentage * second_percentage * amount\n\n    return ans\n\nans = solution()"
    ],
    "f447d86af6a24aefb4ec7afe8f748ab6": [
        "def solution():\n    cost_per_roll_at_ali = 2.40 / 8\n    cost_per_roll_at_mya = cost_per_roll_at_ali * 2\n    cost_for_three_rolls_at_mya = cost_per_roll_at_mya * 3\n    return cost_for_three_rolls_at_mya\n\nans = solution()"
    ],
    "89b6ad1ba96b49799186cb97be8ced41": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    departure_time = datetime.strptime('12:00', '%H:%M')\n    flight_duration = timedelta(hours=4)\n    # Assuming St Petersburg is in the Moscow timezone which is GMT+3\n    time_difference = timedelta(hours=3)\n    \n    arrival_time = departure_time + flight_duration + time_difference\n    return arrival_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "c8a3ce14a35a4261ab029e2433bd676a": [
        "def solution():\n    people_in_front_of_peter = 9\n    people_behind_john = 10\n\n    # Since Peter is directly in front of John, there are no people between them.\n    # So, the total number of people is:\n    # people in front of Peter + Peter + John + people behind John\n    total_people = people_in_front_of_peter + 1 + 1 + people_behind_john\n\n    return total_people\n\nans = solution()"
    ],
    "1beeabbc07d5419182360e392e6e8167": [
        "def solution():\n    final_amount = 870\n    annual_interest_rate = 0.09\n    years = 5\n    \n    initial_deposit = final_amount / ((1 + annual_interest_rate) ** years)\n    \n    return initial_deposit\n\nans = solution()"
    ],
    "f53340cd1b0242cc909e54dbf5f9c740": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 3):\n        if p[1] * 10 + p[2] - 2 * (p[0] * 10 + p[1]) == 1:\n            return p[1] * 10 + p[2]\n\nans = solution()"
    ],
    "d83742ad1ef8454dbe6712dd724e0f28": [
        "def solution():\n    ans = sum(50 - i if i % 4 == 0 else i for i in range(48, 31, -2))\n    return ans\n\nans = solution()"
    ],
    "d03ade3a4dd74e8080364bf4014a629f": [
        "def solution():\n    # There are 3 different colors, so to guarantee a pair of the same color,\n    # Cindy must take out 3 socks (one of each color) + 1 to ensure she has a pair.\n    number_of_colors = 3\n    socks_needed = number_of_colors + 1\n    \n    return socks_needed\n\nans = solution()"
    ],
    "fddfd48467ab4e0fb6a8660a9290dacd": [
        "def solution():\n    kg_to_grams = 1000\n    kg = 2.5\n    grams = kg * kg_to_grams\n    return grams\n\nans = solution()"
    ],
    "9080a0bc912a4dbd8b2d995a6f90476f": [
        "def solution():\n    speed_kmh = 7.2\n    time_seconds = 24\n    speed_m_per_s = (speed_kmh * 1000) / (60 * 60)\n    distance_meters = speed_m_per_s * time_seconds\n    return distance_meters\n\nans = solution()"
    ],
    "662c78fcaea44e82bcb9bf7c3df9c9b4": [
        "def solution():\n    total_sweets = 360\n    fraction_boys = 3/8\n    sweets_per_boy = 4\n    sweets_per_girl = 12\n    \n    boys = (total_sweets * fraction_boys) / sweets_per_boy\n    girls = (total_sweets * (1 - fraction_boys)) / sweets_per_girl\n    return int(girls)\n\nans = solution()"
    ],
    "a5de38fa67a44419bc522d068fd7f25f": [
        "def solution():\n    scale_ratio = 1 / 5  # 1 km / 5 cm\n    distance_on_map_cm = 12\n    distance_on_ground_km = distance_on_map_cm * scale_ratio\n\n    return distance_on_ground_km\n\nans = solution()"
    ],
    "819144d05ae94a409b2ad0fa501b330e": [
        "def solution():\n    return 2 / 0.1\n\nans = solution()"
    ],
    "19e25948a6f64404bdc6be96b3c341cf": [
        "def solution():\n    ans = 1\n    for n in range(2, 51):\n        ans *= (1/n - 1/(100-n))\n    return ans\n\nans = solution()"
    ],
    "8162588281f2442aaf05ae898f61facb": [
        "def solution():\n    speed_kph = 7.2\n    time_seconds = 24\n    \n    # Convert speed to meters per second\n    speed_mps = (speed_kph * 1000) / (60 * 60)\n    \n    # Calculate distance in meters\n    distance = speed_mps * time_seconds\n    \n    return distance\n\nans = solution()"
    ],
    "69e401d76eff4dc0a2cbc3608563a312": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack, jimmy, tommy = symbols('jack jimmy tommy')\n\n    equation1 = Eq(jimmy, jack + 7)\n    equation2 = Eq(tommy, 3 * jimmy)\n    equation3 = Eq(jack + jimmy + tommy, 43)\n\n    solutions = solve((equation1, equation2, equation3), (jack, jimmy, tommy))\n\n    return solutions[tommy]\n\nans = solution()"
    ],
    "0ecf6bcd64b5409797eb1c22fd967682": [
        "def solution():\n    total_students = 93\n    math_students = 70\n    language_students = 54\n\n    both_classes = math_students + language_students - total_students\n    only_math = math_students - both_classes\n\n    return only_math\n\nans = solution()"
    ],
    "fcaab3458b0540ffaf17a8b8e46d47e3": [
        "from fractions import Fraction\n\ndef solution():\n    product = Fraction(1)  # Start with fraction 1/1\n    for i in range(2, 10):  # Start from 2 to 9\n        product *= Fraction(1 + Fraction(1, i))\n    return product\n\nans = solution()"
    ],
    "3d8744d18dd54cbea1b1412a084ed5ef": [
        "def solution():\n    # In number theory, a positive integer greater than 1 that is not prime is indeed called a composite number.\n    # However, the integer 1 is neither prime nor composite. Therefore, Pip's statement is not entirely correct.\n    \n    # Below is Python code to test Pip's statement:\n    from sympy import isprime\n    \n    # Testing with a range of numbers to see if Pip's statement holds\n    for i in range(2, 101):  # Let's test for the first 100 positive integers\n        if not isprime(i):  # If not a prime\n            if i == 1:  # If the number is 1, then Pip's statement is not correct\n                return \"Pip is incorrect. 1 is not a prime, but also not a composite.\"\n    \n    # If we get to this point without returning, it means all non-prime numbers > 1 are indeed composite.\n    return \"Pip is correct but incomplete. He forgot to exclude 1, which is neither prime nor composite.\"\n\nans = solution()"
    ],
    "c0b29d7381404f04ba70d03ba52e2056": [
        "def solution():\n    # 25% is the same as 0.25\n    x = 36 / (1/3 - 0.25)\n\n    return x\n\nans = solution()"
    ],
    "fc12020bb86948df82cb6bfbc58da724": [
        "def solution():\n    i = 0\n    while True:\n        if str(40309 + i) == str(40309 + i)[::-1]:\n            return i\n        i += 1\n\nans = solution()"
    ],
    "0e5f8af3ee36434c8fc6f0d54e0b0332": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number we are looking for as 'n'\n    n = symbols('n')\n    \n    # n gives a remainder of 5 when divided by 7, which means n = 7k + 5\n    # n gives a remainder of 6 when divided by 8, which means n = 8m + 6\n    # n gives a remainder of 6 when divided by 10, which means n = 10p + 6\n\n    # The sum of the quotients when dividing by 6, 7, and 8 is 265\n    # Therefore, (n/6) + (n/7) + (n/8) = 265, where n/6, n/7, n/8 are each an integer quotient\n\n    # Set up the equations based on the above information\n    eq1 = Eq(n % 7, 5)\n    eq2 = Eq(n % 8, 6)\n    eq3 = Eq(n % 10, 6)\n    eq4 = Eq(n/7 + n/8 + n/6, 265)\n\n    # Since we know the quotients must be integers, n must be a multiple of the LCM(6, 7, 8)\n    # Simplify the fourth equation by multiplying both sides by the LCM to remove the fractions\n    lcm = 2 * 3 * 7 # 8 is already a multiple of 2, and LCM of 6,7,8 is the same as LCM of 2*3,7,2*4\n    eq4 = Eq(lcm / 7 * n/7 + lcm / 8 * n/8 + lcm / 6 * n/6, 265*lcm)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4), (n))\n\n    # We expect a single solution which will be our number\n    return solutions[n]\n\nans = solution()"
    ],
    "5acf29084a144a8c9e6e54ea27130ca2": [
        "def solution():\n    count = 0\n    for x1 in range(1, 12): # The first group can have from 1 to 11 balloons\n        for x2 in range(1, 12): # The second group also, but we will check if it's different from x1\n            for x3 in range(1, 12): # Similarly for the third group\n                for x4 in range(1, 12): # And for the fourth group\n                    if x1 + x2 + x3 + x4 == 12 and len({x1, x2, x3, x4}) == 4:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "36cde50d7411407280da3e197b3728f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 + 2 * (9 - x), 4 * (x - 5) + 5)\n\n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "97f9b3cd0d1f4ef49d372ccb5e9623ef": [
        "def solution():\n    total_sweets = 42\n    kasia_keeps = 13\n    sweets_to_share = total_sweets - kasia_keeps\n    sweets_each_friend_gets = sweets_to_share // 2\n    lucie_gives_to_joan = sweets_each_friend_gets * (2/7)\n    lucie_keeps = sweets_each_friend_gets - lucie_gives_to_joan\n    \n    return int(lucie_keeps)\n\nans = solution()"
    ],
    "8f11aa1d0d264d7fbdcc09d8264a8c74": [
        "def solution():\n    diff = 52\n    total_students = 0\n    side_length = 1  # start with the smallest possible square\n\n    while True:\n        # Boys are at the outermost and every other layer, girls are in between\n        num_boys = side_length**2 - (side_length - 2)**2 if side_length > 1 else 1\n        num_girls = (side_length - 2)**2 - (side_length - 4)**2 if side_length > 3 else 0\n        \n        if num_boys - num_girls == diff:\n            # Total students are the area of the square formed by the side_length\n            total_students = side_length**2\n            break\n        \n        side_length += 2  # increase by 2 to maintain alternating boy-girl pattern\n\n    return total_students\n\nans = solution()"
    ],
    "0c7a535a8f1e4491b32b1e1b1639b03a": [
        "def solution():\n    tank_capacity = 5 + 4\n    extra_needed_with_3_litre = 4 * 3\n    return tank_capacity + extra_needed_with_3_litre\n\nans = solution()"
    ],
    "0239fb4bde9f47c69180ca8669502d62": [
        "def solution():\n    ans = 42768 / 120\n    return ans\n\nans = solution()"
    ],
    "ff1dd3113eea4badb05fc22604f4f410": [
        "def solution():\n    # Let the total pension be represented by 1 (as a whole, 100% or the complete fraction of pension)\n    friday_expense = 1 / 4  # on Friday he spends a quarter\n\n    # Calculate the remainder after spending on Friday\n    remaining_after_friday = 1 - friday_expense\n\n    # on Saturday he spends a third of what remains after Friday\n    saturday_expense = remaining_after_friday / 3\n\n    # Calculate what is left after his expenses on Saturday\n    remaining_after_saturday = remaining_after_friday - saturday_expense\n\n    # The remaining fraction of his pension after spending on Friday and Saturday\n    return remaining_after_saturday\n\nans = solution()"
    ],
    "6326923a95f047bdabd68344659c4d65": [
        "def solution():\n    total_people = 20\n    ratio_adults = 1\n    ratio_children = 4\n    ratio_sum = ratio_adults + ratio_children\n\n    adults = (total_people * ratio_adults) // ratio_sum\n\n    return adults\n\nans = solution()"
    ],
    "e7cedcf4f50346fda3609ffc82271bcb": [
        "def solution():\n    num_school_bags = 3\n    num_pencil_boxes = 4\n    combinations = num_school_bags * num_pencil_boxes\n    return combinations\n\nans = solution()"
    ],
    "8e60fa08b0204229a54c896f7f2968fa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apples, pears = symbols('apples pears')\n    equation1 = Eq(apples / pears, 3/4)\n    equation2 = Eq((apples + 36) / (pears - 36), 3/2)\n\n    solutions = solve((equation1, equation2), (apples, pears))\n\n    return solutions[apples]\n\nans = solution()"
    ],
    "b7159096815a4a038b3ffdc419ce649d": [
        "def solution():\n    decimal_part = \"6129043\"\n    length_of_recurring_sequence = len(decimal_part)\n    repetitions, remainder = divmod(212, length_of_recurring_sequence)\n    recurring_sum = sum(int(digit) for digit in decimal_part)\n    partial_sum = sum(int(decimal_part[i]) for i in range(remainder))\n    total_sum = repetitions * recurring_sum + partial_sum\n    return total_sum\n\nans = solution()"
    ],
    "00fd88a6512946ba898e3274c1c81239": [
        "def solution():\n    # using a while loop to find the square number that fits the conditions\n    soldiers = 0\n    side = 1\n    while True:\n        # The total number of soldiers before new ones joined is side^2\n        original_total = side * side\n        # The total number after new ones joined is (side+1)^2\n        new_total = (side + 1) * (side + 1)\n        # The condition that 31 soldiers joined and added exactly one row and column\n        if new_total - original_total == 31:\n            soldiers = new_total\n            break\n        side += 1\n    return soldiers\n\nans = solution()"
    ],
    "ca97262fc9e040ea9a7f04b576f910a7": [
        "def solution():\n    ginkgo_trees = 30\n    willow_trees = ginkgo_trees - 1\n\n    return willow_trees\n\nans = solution()"
    ],
    "1aa4173baac54897a1633d0cb7b950ea": [
        "def solution():\n    return 36 / 100 * 50\n\nans = solution()"
    ],
    "c54762ddbeef45b193a20da66e6829f5": [
        "def solution():\n    n = 1\n    factorial_zeros = 0\n    while factorial_zeros < 28:\n        n += 1\n        # calculate the number of consecutive zeros that n factorial would have\n        temp_n = n\n        count_fives = 0\n        while temp_n > 0:\n            temp_n //= 5\n            count_fives += temp_n\n        factorial_zeros = count_fives\n    return n - 1  # Adjust because last increment doesn't satisfy condition\n\nans = solution()"
    ],
    "fbf9b992307b444eb938a67abf0f79d0": [
        "def solution():\n    result = (2/3) * 729\n    return result\n\nans = solution()"
    ],
    "8f5505c28f074abd9d90140697874060": [
        "def solution():\n    num_people = 12\n    num_handshakes = num_people * (num_people - 1) // 2\n\n    return num_handshakes\n\nans = solution()"
    ],
    "e45422d20b09414ca93da798ae6e4103": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    age_now = symbols('age_now')\n\n    equation = Eq(age_now + 4, 2 * (age_now - 4))\n\n    sam_age = solve(equation, age_now)\n\n    return sam_age[0]\n\nans = solution()"
    ],
    "3b9a5ab85be34057a1a3e3b571572c35": [
        "def solution():\n    # Since we want to guarantee two pairs of the same color,\n    # we should consider the worst-case scenario.\n    # We pick all single socks and one of each pair (this ensures we don't have a pair yet).\n    picks_without_a_pair = 1 + 7 + 4 + 2\n    \n    # Next, we pick one more sock.\n    # In the worst case, this sock will form a pair with one of the previously picked single socks.\n    # Now we have one pair, and we proceed to pick more to ensure a second pair of the same color.\n    \n    # If we pick one more sock of each pair (one yellow, one green, one white, one red),\n    # we will have guaranteed one pair of each but still only one pair of the same color.\n    # Here, we reach the worst scenario where we have guaranteed one pair of four different colors: \n    # (Y, G, W, R).\n    # But we need two pairs of the SAME color, so now any next sock we pick will do the job.\n    \n    # Add the one sock that guarantees the second pair.\n    picks_for_second_pair = 4 + 1\n    \n    # Add both results to get the total number of picks in the worst case.\n    total_picks = picks_without_a_pair + picks_for_second_pair\n    \n    return total_picks\n\nans = solution()"
    ],
    "43bd21f970c34177be1554432de294ca": [
        "def solution():\n    lemonade_price = 1.09\n    chocolate_bar_price = 0.55\n    number_of_lemonades = 5\n    number_of_chocolate_bars = 6\n    ten_pound_note = 10\n\n    total_cost = (lemonade_price * number_of_lemonades) + (chocolate_bar_price * number_of_chocolate_bars)\n    change = ten_pound_note - total_cost\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "1b74b0ce31ca43179e9aa5db9f92ec32": [
        "from math import factorial\n\ndef solution():\n    total_letters = 7        # Total letters in \"RAINBOW\"\n    vowel_count = 3          # Vowels in \"RAINBOW\" are A, I, O\n    consonant_count = 4      # Consonants in \"RAINBOW\" are R, N, B, W\n\n    # Total permutations of the word \"RAINBOW\"\n    total_permutations = factorial(total_letters)\n\n    # Permutations of vowels (A, I, O)\n    vowel_permutations = factorial(vowel_count)\n\n    # Since vowels cannot be together, consider them as a single entity\n    # Hence, the total entities are now consonants + 1 (vowels as one entity)\n    entities_together = consonant_count + 1\n\n    # Permutations of all entities when vowels are together\n    permutations_together = factorial(entities_together) * vowel_permutations\n\n    # Subtracting permutations where vowels are together\n    # from total permutations will yield permutations where vowels are never together\n    ans = total_permutations - permutations_together\n\n    return ans\n\nans = solution()"
    ],
    "de33ae344c7942fbb4e480c5ae79a90e": [
        "def solution():\n    ans = 492.9 + 73.521 + 32.12\n    return ans\n\nans = solution()"
    ],
    "11a8c054bda64d72bdfd6571d70646f1": [
        "from itertools import permutations\n\ndef solution():\n    # Create all possible permutations using the digits 3, 7, 2, 8\n    permutations_list = [''.join(p) for p in permutations('3728')]\n    # Convert all permutations to integers\n    numbers = list(map(int, permutations_list))\n    # Filter out the even numbers and sort the remaining odd numbers\n    odd_numbers = sorted(filter(lambda x: x % 2 != 0, numbers))\n    # The smallest odd number will be the first in the sorted list\n    n = odd_numbers[0]\n    return n\n\nans = solution()"
    ],
    "0143483f1edf4af3a803bb1221bcb8e1": [
        "def solution():\n    for num in range(10, 21):\n        if num % 4 == 0 and 36 % num == 0:\n            return num\n\nans = solution()"
    ],
    "43d937a1a1ef47ef8b56b4494d1b2a22": [
        "def solution():\n    return 3.462 / 0.3\n\nans = solution()"
    ],
    "3fb10b4abb524d58afc63043c1689553": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(0.15 * x - 0.25 * (1000 - x), -50)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "dab22ef1b9474ab2b0ebf64fe8f912d5": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Create the congruences based on the problem statement\n    congruences = [\n        (2, 3),\n        (3, 5),\n        (4, 7)\n    ]\n\n    # Use the Chinese Remainder Theorem to find the smallest possible value\n    ans, _ = solve_congruence(*congruences)\n\n    return ans\n\nans = solution()"
    ],
    "ed6e120cf0bc499d8e4a9bf4a9c4fd73": [
        "def solution():\n    # Let the first term of the arithmetic progression be a and the common difference be d.\n    # The sum of the first n terms of an arithmetic progression can be found by the formula: S_n = n/2 * (2a + (n - 1)d)\n    \n    # Sum of the first 10 terms is 20:\n    # S_10 = 10/2 * (2a + (10 - 1)d) = 20\n    # 5 * (2a + 9d) = 20\n    # 2a + 9d = 4 -----> Equation 1\n    \n    # Sum of the first 30 terms is 90:\n    # S_30 = 30/2 * (2a + (30 - 1)d) = 90\n    # 15 * (2a + 29d) = 90\n    # 2a + 29d = 6 -----> Equation 2\n    \n    # Subtracting Equation 1 from Equation 2 gives us the common difference d:\n    # (2a + 29d) - (2a + 9d) = 6 - 4\n    # 20d = 2\n    # d = 2 / 20\n    d = 2 / 20  # common difference\n\n    return d\n\nans = solution()"
    ],
    "c0f56c7d52444d1a9b65ef7a1513a044": [
        "def solution():\n    ans = 128 - 54\n    return ans\n\nans = solution()"
    ],
    "1b32f8e585fc46068085a2478636e072": [
        "def solution():\n    jess_time = 18\n    jo_time = jess_time - 6\n    mary_time = jo_time + 4\n    return mary_time\n\nans = solution()"
    ],
    "d900be8e099f4d49838cded0aec8d0e8": [
        "def solution():\n    total_stickers = 117\n    ratio_sum = 5 + 4  # Sum of the ratio parts 5:4\n\n    penny_part = 4  # Penny's part of the ratio\n\n    penny_stickers = (total_stickers * penny_part) / ratio_sum\n\n    return penny_stickers\n\nans = solution()"
    ],
    "35c1ed41867c49dfb5f6c880fb136ac2": [
        "def solution():\n    count = 0\n    for i in range(1, 151):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "36e844fd0400420f989f1166d3df56c7": [
        "def solution():\n    words_per_minute = 125\n    minutes_per_day = 9\n    days = 6\n\n    words_per_day = words_per_minute * minutes_per_day\n    total_words = words_per_day * days\n\n    return total_words\n\nans = solution()"
    ],
    "921b2f01420749da85075867e970dacb": [
        "def solution():\n    speed_kph = 3.6  # speed in kilometers per hour\n    time_seconds = 300  # time in seconds\n\n    # Convert speed to meters per second (1 kilometer = 1000 meters, 1 hour = 3600 seconds)\n    speed_mps = (speed_kph * 1000) / 3600\n    \n    # Calculate the distance walked in meters\n    distance_meters = speed_mps * time_seconds\n\n    return distance_meters\n\nans = solution()"
    ],
    "44d68779a7c0423eb6e762338b582fca": [
        "def solution():\n    count = 0\n    for page in range(1, 151):\n        count += str(page).count('2')\n    return count\n\nans = solution()"
    ],
    "6028933632e54b1a828b0f6d3598c001": [
        "def solution():\n    return sum(range(200, 209, 2))\n\nans = solution()"
    ],
    "104a46795ca64208939686b66fb9a82e": [
        "def solution():\n    # Let c represent the number of cows, g represent the number of goats, and h represent the number of chickens.\n    from sympy import symbols, Eq, solve\n\n    c, g, h = symbols('c g h')\n    # 3 times the number of chickens is equal to 5 times the number of cows\n    equation1 = Eq(3 * h, 5 * c)\n    # 2 times the number of goats is equal to 10 times the number of cows\n    equation2 = Eq(2 * g, 10 * c)\n    # The number of chickens and goats combined is 40\n    equation3 = Eq(h + g, 40)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (c, g, h))\n\n    chickens = solutions[h]\n    goats = solutions[g]\n    cows = solutions[c]\n\n    # Calculate the total number of feet: chickens have 2 feet, goats have 4 feet and cows have 4 feet\n    total_feet = 2 * chickens + 4 * goats + 4 * cows\n\n    return total_feet\n\nans = solution()"
    ],
    "b370814add5e431bb51f7d7dac8d3ba5": [
        "def solution():\n    # Let x be the number of stickers that Penny has.\n    # Since the ratio of Amy's stickers to Penny's stickers is 5:4, Amy has 5/4 * x stickers.\n    # Together, they have 117 stickers, so we can set up the following equation:\n    # Amy's stickers + Penny's stickers = 117\n    # (5/4 * x) + x = 117\n    \n    # To find the value of x, we solve for x:\n    # (5x + 4x) / 4 = 117\n    # 9x = 117 * 4\n    # x = (117 * 4) / 9\n    \n    x = (117 * 4) // 9\n    \n    return x\n\nans = solution()"
    ],
    "a754f6b5ebcb4917afb374104733b09e": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['9', '0', '2', '3']\n    all_numbers = [int(''.join(number)) for number in permutations(digits)]\n    closest_number = min(all_numbers, key=lambda x: abs(x - 2978))\n    return closest_number\n\nans = solution()"
    ],
    "653842c3dbaa4a70846409866d45815a": [
        "def solution():\n    # The formula to find the maximum number of different parts that n lines can divide the plane into is\n    # parts = (n*(n + 1))//2 + 1\n    n = 10\n    parts = (n * (n + 1)) // 2 + 1\n    return parts\n\nans = solution()"
    ],
    "5ecddfaa220c43cf8e47b0f83763a84d": [
        "def solution():\n    first_term = 48\n    last_term = 80\n    difference = 4\n    num_rows = ((last_term - first_term) // difference) + 1\n    total_seats = num_rows * (first_term + last_term) // 2\n    return total_seats\n\nans = solution()"
    ],
    "8da4fb1e422544f0a8b82f886050843b": [
        "def solution():\n    count = 0\n    for i in range(200, 501):\n        if '3' in str(i):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "40a9e9bead5546a4a0e08b6e1af8f008": [
        "def solution():\n    result = 50\n    original_number = (result + 10) / 2\n    return original_number\n\nans = solution()"
    ],
    "fbd5c2b741d540409dda4ac6ae1eefe3": [
        "def solution():\n    A_plus_B_average = 22\n    C = 19\n    A_plus_B_sum = A_plus_B_average * 2\n    sum_of_ABC = A_plus_B_sum + C\n    average_of_ABC = sum_of_ABC / 3\n    return average_of_ABC\n\nans = solution()"
    ],
    "28594ee0096c4c27b6982e846d9415e3": [
        "def solution():\n    from datetime import datetime\n\n    birth_date = datetime(1533, 9, 7)\n    death_date = datetime(1603, 3, 24)\n\n    age = death_date.year - birth_date.year - ((death_date.month, death_date.day) < (birth_date.month, birth_date.day))\n\n    return age\n\nans = solution()"
    ],
    "6b5f28a0da7644bf91c51262467f22af": [
        "def solution():\n    total_coins = 37\n    children = 5\n    remainder = total_coins % children\n    return remainder\n\nans = solution()"
    ],
    "668003c3b4ee4430939bf7445ffe574b": [
        "def solution():\n    from sympy import factorint\n    # Factorize the number 7007\n    factors = factorint(7007)\n    # Since we need two 2-digit numbers their product is 7007,\n    # and we know that product of two numbers is the product of their prime factors.\n    # We also know that both numbers are multiples of 7 so each number should contain 7 as a factor.\n    # Let's check combinations of prime factors that give us two 2-digit numbers.\n    prime_factors = list(factors.keys())\n\n    # Initialize list to collect valid 2-digit multiples of 7\n    valid_numbers = []\n\n    # Iterate through combinations of dividing the prime factors between two numbers.\n    for i in range(1, (prime_factors[0]**factors[prime_factors[0]])//7 + 1):\n        num1 = 7 * i\n        num2 = 7007 // num1\n        if num1 != num2 and 10 <= num1 < 100 and 10 <= num2 < 100:\n            valid_numbers.append((num1, num2))\n\n    # Assuming that the problem has a unique solution, we can return the sum of the first valid pair.\n    sum_of_numbers = sum(valid_numbers[0])\n    return sum_of_numbers\n\nans = solution()"
    ],
    "5532a59da23d4cbea467c1a0cabeb494": [
        "def solution():\n    total_cakes = 50\n    layers = 9\n    max_cakes_in_layer = (total_cakes - 1) // layers + 1\n\n    return max_cakes_in_layer\n\nans = solution()"
    ],
    "f83aeb54a6454c92abe4a6bb1cd131df": [
        "def solution():\n    count = 0\n    for number in range(200, 501):\n        if '3' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6d5b83fe42184fb9bc959fdc4861c9b3": [
        "def solution():\n    # Let's denote the average age of Chinese, English, and Mathematics teachers as C, E, M, respectively.\n    # Based on the provided information we have following equations:\n    # (C + E) / 2 = 34 - (1)\n    # (E + M) / 2 = 36 - (2)\n    # (C + M) / 2 = 44 - (3)\n    \n    # Multiplying both sides by 2 to eliminate the denominator in all equations:\n    # C + E = 68 - (1*)\n    # E + M = 72 - (2*)\n    # C + M = 88 - (3*)\n    \n    # Summing up all three adjusted equations we get:\n    # (C + E) + (E + M) + (C + M) = 68 + 72 + 88\n    # 2C + 2E + 2M = 228\n    # Dividing both sides by 2 we get total sum of the ages:\n    # C + E + M = 114\n    \n    # Average age of the 3 subject teachers would then be:\n    # (C + E + M) / 3 = 114 / 3\n    avg_age = 114 / 3\n    return avg_age\n\nans = solution()"
    ],
    "830b4822d207437b89a3a6ce5de16c84": [
        "def solution():\n    ans = ((21 + 1) * 7) - (20 + (1 * 7))\n    return ans\n\nans = solution()"
    ],
    "3fa5ea265a5d4c0297ecf03b1cb17e9d": [
        "def solution():\n    fraction_sum = 0\n    for i in range(1, 2019):\n        x = (2018 + i) / 5\n        fraction_sum += x - int(x)\n    return fraction_sum\n\nans = solution()"
    ],
    "f2e7d75d544640ef95f39ae11d58e429": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, benson = symbols('chelsia benson')\n\n    equation1 = Eq(3/4 * chelsia, 2/3 * benson)\n    equation2 = Eq(chelsia + 18, benson)\n\n    solutions = solve((equation1, equation2), (chelsia, benson))\n\n    total_sum = solutions[chelsia] + solutions[benson]\n\n    return total_sum\n\nans = solution()"
    ],
    "7de9bf80e9294c29a99d27418f478a8e": [
        "from math import factorial\n\ndef solution():\n    total = factorial(5)\n    repeat_1 = factorial(2)\n    ans = total // repeat_1\n    return ans\n\nans = solution()"
    ],
    "01afb46f9dd94497ab3c9968556ca7a1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let d be the difference between the number of cookies in two adjacent boxes.\n    d = symbols('d')\n    \n    # The number of cookies in the last box (10th box) would be 11 + 9 * d.\n    # The sum of an arithmetic sequence can be found using the formula: sum = n/2 * (first_term + last_term)\n    # n = number of terms in the sequence, which is 10 in this case.\n    # We use the sum of the sequence to set up the equation.\n    equation = Eq(10/2 * (11 + (11 + 9 * d)), 425)\n    \n    # Solve for d\n    solution = solve(equation, d)\n\n    return solution[0]\n\nans = solution()"
    ],
    "53f7ab0a979c47e9875a6745078c1158": [
        "def solution():\n    total_students = 300\n    year_5_fraction = 3 / 10\n    girls_fraction = 3 / 5\n\n    year_5_students = total_students * year_5_fraction\n    year_5_girls = year_5_students * girls_fraction\n\n    return int(year_5_girls)\n\nans = solution()"
    ],
    "a38e073e5c4f4c3f94fc8c0ac26838a1": [
        "def solution():\n    # let the first term of the sequence be x\n    # then the terms are x, x+2, x+4, x+6, x+8, x+10, x+12\n    # thus, their sum is 7x + (2+4+6+8+10+12)\n    total_sum = 357\n    sum_of_diffs = 2 + 4 + 6 + 8 + 10 + 12  # sum of the differences between consecutive numbers\n    # now we solve for x: 7x + sum_of_diffs = total_sum\n    x = (total_sum - sum_of_diffs) // 7\n    return x\n\nans = solution()"
    ],
    "65457d2cc6de489f9eda50d81a2a99cd": [
        "def solution():\n    return 12 * 1.99\n\nans = solution()"
    ],
    "854a818f3b564ec2936328e1204553fa": [
        "def solution():\n    A_inverse = sum(1 / i for i in range(1995, 2009))\n    A = 1 / A_inverse\n    return int(A)\n\nans = solution()"
    ],
    "3c4de249075d4f07b0fc0c817ff3c58b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the cost of a chair and a table\n    c, t = symbols('c t')\n    \n    # Equation 1: The cost of 5 tables and 12 chairs = $720\n    eq1 = Eq(5*t + 12*c, 720)\n    \n    # Equation 2: Each table costs $25 more than each chair\n    eq2 = Eq(t, c + 25)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (c, t))\n    \n    # Return the cost of a table\n    return solutions[t]\n\nans = solution()"
    ],
    "d5fb71d8282e4dad9d6f8b784f5145e7": [
        "def solution():\n    for num in range(200, 401):\n        if (num % 3 == 2) and (num % 4 == 2) and (num % 5 == 2) and (num % 7 == 5):\n            return num\n\nans = solution()"
    ],
    "a6f219bbae8a4dde8e0a10e161120049": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    martins_speed, carters_speed = symbols('martins_speed carters_speed')\n    ratio_martin = 9\n    ratio_carter = 13\n\n    equation = Eq(martins_speed / carters_speed, ratio_martin / ratio_carter)\n    equation_speed = Eq(martins_speed, carters_speed + 20)\n\n    # solve the system of equations\n    speeds = solve((equation, equation_speed), (martins_speed, carters_speed))\n\n    return speeds[carters_speed]\n\nans = solution()"
    ],
    "eb64f29a539744afa20fabe47cf4247f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The remainders are all 1, so we subtract 1 from the desired number and look for a number\n    # that is divisible by 5, 6, and 7. We then add 1 back to the result.\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    smallest_number, _ = solve_congruence(*congruences)\n\n    return smallest_number\n\nans = solution()"
    ],
    "985a10206885415abe07e67ad7c806da": [
        "def solution():\n    # Since 2 is the only even prime number (all others are divisible by 2 and hence not prime)\n    return 2\n\nans = solution()"
    ],
    "033e1d824bce41289651265703300be3": [
        "def solution():\n    return 12636 // 54\n\nans = solution()"
    ],
    "4b3d2f8a295c449eb0b933dd026b4cf9": [
        "def solution():\n    count = 0\n    for x1 in range(1, 13):\n        for x2 in range(1, 13):\n            x3 = 13 - (x1 + x2)\n            if x3 > 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "39314ee04d5249c699fbe6a90a08ea57": [
        "def solution(x):\n    total_cloth = 18\n    remaining_cloth = total_cloth - x\n    return remaining_cloth\n\nans = solution(x)"
    ],
    "5b0fce7f22474da9ace32b857c116492": [
        "from fractions import Fraction\n\ndef solution():\n    result = Fraction(3) / Fraction(1, 3)\n    return result\n\nans = solution()"
    ],
    "281326e2a0e3497ca68a17bd591efba8": [
        "def solution():\n    return 543 + 284\n\nans = solution()"
    ],
    "e7dc5d1f98e34b2b9e1ae130e2a988c0": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    f, g = symbols('f g')  # f for Fred, g for George\n\n    # 1/f + 1/g = 1/6 hours (combined rate of Fred and George)\n    # Fred on his own takes 9 hours, so his rate is 1/9\n    equation = Eq(1/f + 1/g, 1/6)\n    f_rate = 9  # Fred's time to paint on his own\n\n    # We solve for George's rate\n    george_time = solve((equation.subs(f, f_rate)), g)\n\n    return george_time[g]\n\nans = solution()"
    ],
    "0c22c9cf700b49a797234271b1f29ce6": [
        "def solution():\n    ans = (132 + 68) * (520 - 506)\n    return ans\n\nans = solution()"
    ],
    "c0b11362a9114743b4f269d706e86245": [
        "def solution():\n    # According to the Pigeonhole Principle, if n items are put into m containers, with n > m,\n    # then at least one container must contain more than one item. The worst-case scenario\n    # for ensuring at least two apples of the same color is to pick one of each color first.\n    \n    # We pick 1 red apple and 1 yellow apple, to ensure the next one we pick must be the same\n    # color as one we have already picked.\n    \n    red_apples = 14\n    yellow_apples = 20\n    \n    # Picking one of each color\n    apples_picked = 1 + 1\n    \n    # The next apple we pick must give us two of the same color\n    apples_picked += 1\n    \n    return apples_picked\n\nans = solution()"
    ],
    "90366a7b3e114b0782979eb7a1e2fcf7": [
        "from math import factorial\n\ndef solution():\n    # The number of ways 4 people can enter through 5 entrances\n    # is the same as the number of permutations of 5 elements take 4 at a time\n    # with repetitions allowed (since they can choose the same entrance).\n    ways_for_each_person = 5  # each person has 5 options\n    total_ways = ways_for_each_person ** 4  # each of the 4 people has 5 options independently\n    return total_ways\n\nans = solution()"
    ],
    "8af761818c504f10a3169d69baf02a4b": [
        "def solution():\n    # Number of legs for cats, dogs, and rabbit respectively\n    legs_cats = 2 * 4\n    legs_dogs = 2 * 4\n    legs_rabbit = 1 * 4\n    \n    # Total legs for cats, dogs, and rabbit\n    total_legs_other = legs_cats + legs_dogs + legs_rabbit\n    \n    # Since birds have 2 legs, calculate the number of birds by subtracting the total legs of other animals from 28\n    # then divide by 2 (because each bird has 2 legs)\n    birds = (28 - total_legs_other) // 2\n\n    return birds\n\nans = solution()"
    ],
    "75543c0d8a344cd8a2e2dae02cbf92b8": [
        "def solution():\n    product = 2.42 * 1.6\n    return product\n\nans = solution()"
    ],
    "2bbb1e71338f41f6b5859b75e2be3aa2": [
        "def solution():\n    count_div_5 = 200 // 5\n    count_div_7 = 200 // 7\n    count_div_5_and_7 = 200 // (5 * 7)\n\n    ans = count_div_5 + count_div_7 - count_div_5_and_7\n    return ans\n\nans = solution()"
    ],
    "b3c36c7c2db9474583eeb898917fa090": [
        "def solution():\n    return 27 * 3\n\nans = solution()"
    ],
    "30f6b3c01a03478b9d6e70cbb8b7a3d4": [
        "def solution():\n    # Initial value after 5% increase in the first year\n    increased_value = 10500\n    \n    # Calculate the original value before the 5% increase\n    original_value = increased_value / 1.05\n    \n    # Now calculate the value after losing 5% in the second year\n    decreased_value = original_value * 0.95\n    \n    # Calculate the profit or loss by subtracting the decreased value from the original value\n    profit_or_loss = decreased_value - original_value\n    \n    return profit_or_loss\n\nans = solution()"
    ],
    "3eeca15404314eae896ffb6e5ded37b1": [
        "def solution():\n    factors_of_42 = [i for i in range(1, 43) if 42 % i == 0]\n    number = [x for x in factors_of_42 if x > 10 and x < 20][0]\n    return number\n\nans = solution()"
    ],
    "8abbe2b1899a4c2e80f9586a6a4dca94": [
        "def solution():\n    numbers = [8, 3, 9]\n    average = 6\n    total_for_average = average * 4\n    num_in_box = total_for_average - sum(numbers)\n    return num_in_box\n\nans = solution()"
    ],
    "465d94564aeb464d90ec7faaf9940c3d": [
        "def solution():\n    # There are 5 choices of entrance for each person and 4 people in total\n    num_entrances = 5\n    people = 4\n    \n    # The number of ways is the number of entrances raised to the power of people\n    ways = num_entrances ** people\n    \n    return ways\n\nans = solution()"
    ],
    "3e5011dfff4a4b9b81f4caef853a49dc": [
        "def solution():\n    total_gravel_needed = 300\n    bag_weight = 12\n\n    num_bags = -(-total_gravel_needed // bag_weight)  # Ceiling division\n\n    return num_bags\n\nans = solution()"
    ],
    "e85ba3fcd99f4dd3a67b9b4bdac33f3c": [
        "def solution():\n    from sympy import isprime\n\n    # Search through all two-digit numbers\n    for num in range(10, 50):\n        if num % 3 == 2 and isprime(num) and num % 5 == 2:\n            return num\n\nans = solution()"
    ],
    "f5b4975343a544e0a0162174eaf7d4af": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1356789'\n    for perm in permutations(digits):\n        first_num = int(''.join(perm[:2]))\n        second_num = int(''.join(perm[2:4]))\n        third_num = int(''.join(perm[4:]))\n        if second_num == 2 * first_num and third_num == 4 * first_num:\n            return third_num\n\nans = solution()"
    ],
    "f9135cf12fe94650a246bc80d424cf81": [
        "def solution():\n    return 24 * 7\n\nans = solution()"
    ],
    "cab2106c28234f39ae49d4baa681fd8d": [
        "def solution():\n    # The equation represents the sum of an arithmetic sequence from 4 to 400 and back to 4\n    # We can think of it as twice the sum from 4 to 400, minus the first term (since 4 is not doubled)\n    first_term = 4\n    last_term = 400\n    difference = 4\n    \n    # Calculate the number of terms from 4 to 400\n    num_terms = ((last_term - first_term) // difference) + 1\n    # Sum of the arithmetic sequence from 4 to 400 (single direction)\n    sum_one_way = (num_terms/2) * (first_term + last_term)\n    # Double the sum to account for the reverse direction and subtract the first term\n    total_sum = 2 * sum_one_way - first_term\n    return int(total_sum)\n\nans = solution()"
    ],
    "8c8c3f8464b24d8c81c07c35b9ea6792": [
        "def solution():\n    initial_cup_price = 5\n    refill_price = 1\n    total_money = 10\n\n    # Buy the first cup\n    cups = 1\n    total_money -= initial_cup_price\n\n    # Buy as many refills as possible\n    refills = total_money // refill_price\n\n    # Total cups equals first cup plus refills\n    cups += refills\n\n    return cups\n\nans = solution()"
    ],
    "d7922e5e4a59420081b76bfba68dfc63": [
        "def solution():\n    # Define the final number of red pens\n    final_red = 20 \n    \n    # According to the final ratio 5:13, calculate the final number of black pens\n    final_black = (13 * final_red) // 5\n    \n    # Calculate the initial number of red pens based on the initial ratio 3:7\n    # Since the number of pens sold was the same, the difference\n    # in the initial number and the final number will be the same for red and black pens.\n    initial_red = final_red + (final_black - final_red) * (7 // 3)\n    \n    # The number of red pens sold is the initial number minus the final number\n    red_pens_sold = initial_red - final_red\n\n    return red_pens_sold\n\nans = solution()"
    ],
    "3f1a8e5b057c47568af8eaa8c8a7ce10": [
        "def solution():\n    ans = 729 // 9\n    return ans\n\nans = solution()"
    ],
    "52bf46560c164e7bb42b6bd92f0f48a8": [
        "def solution():\n    final_result = 1126\n    final_result += 50  # Step 8: Reversing (Reverse subtract 50)\n\n    # Step 7: Reverse adding the day of birth by subtracting it from final_result\n    # Since we do not know the day yet, we will represent it with 'D' and reverse the operations keeping 'D'\n    D = symbols('D')\n    final_result -= D\n\n    final_result /= 5  # Step 6: Reverse (Reverse multiply by 5)\n    final_result += 20  # Step 5: Reverse (Reverse subtract 20)\n    final_result /= 5  # Step 4: Reverse (Reverse multiply by 5)\n    final_result -= 6   # Step 3: Reverse (Reverse add 6)\n    final_result /= 4   # Step 2: Reverse (Reverse multiply by 4)\n\n    # Now, final_result should be the month of birth 'M' (since we started with multiplying the month by 4)\n    M = final_result  # Assign the value to 'M'\n\n    # At this point, we have M + (D/4) = month + (day/4) and both are whole numbers\n    # As 'M' is the birth month, it must be a whole number between 1 and 12\n    # We loop through all possible birth months and check which gives us a whole number 'D' (birth day) when we rearrange the equation\n    for month in range(1, 13):\n        possible_day = 1126 - 50 + (50 - (month * 4 * 5 + 6) * 5)\n        day = possible_day // 5\n        if 1 <= day <= 31 and possible_day % 5 == 0:  # Day must be a whole number within the range of valid days in a month\n            birthday_month = month\n            birthday_day = day\n            break\n\n    # We now have the birth month 'birthday_month' and birth day 'birthday_day'\n    ans = (birthday_month, birthday_day)\n    return ans\n\nans = solution()"
    ],
    "9e46398b6b5e425abaa591db8be0c422": [
        "from math import factorial\n\ndef solution():\n    # Calculating the arrangement within each category\n    story_books_ways = factorial(2)\n    comic_books_ways = factorial(3)\n    science_books_ways = factorial(4)\n    \n    # The number of ways to arrange the categories themselves\n    categories_arrangement = factorial(3)\n    \n    # Total arrangements is the product of the arrangement within categories\n    # and the arrangement of the categories\n    total_ways = story_books_ways * comic_books_ways * science_books_ways * categories_arrangement\n    \n    return total_ways\n\nans = solution()"
    ],
    "ee339de70e1e49448ce55adaeae5eaa7": [
        "def solution():\n    total_peaches_for_3_monkeys = 96\n    days_for_3_monkeys = 2\n    \n    # Find out how many peaches one monkey eats in one day\n    peaches_per_monkey_per_day = total_peaches_for_3_monkeys / (3 * days_for_3_monkeys)\n    \n    # Calculate the total peaches for 5 monkeys over 4 days\n    total_peaches_for_5_monkeys = peaches_per_monkey_per_day * 5 * 4\n    \n    return total_peaches_for_5_monkeys\n\nans = solution()"
    ],
    "14c24a868f9148719c30a1b91c427e21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    income = 120000\n    tax_paid = 10000\n    \n    tax_base = 0.06 * 50000\n    additional_income = income - 50000\n    additional_tax_rate = 0.06 + T / 100\n    tax_from_additional_income = additional_tax_rate * additional_income\n    \n    total_tax = tax_base + tax_from_additional_income\n    equation = Eq(total_tax, tax_paid)\n    \n    T_value = solve(equation, T)\n    return T_value[0]\n\nans = solution()"
    ],
    "3681f2592b314f8ab3a72fc47b8f90bb": [
        "from math import comb\n\ndef solution():\n    # Since each of the three friends must receive at least one ice-cream, we will give one to each first.\n    # This leaves us with 5 - 3 = 2 ice-creams to distribute freely among the three friends.\n    \n    # Now, the problem becomes a \"stars and bars\" problem (also known as \"balls into bins\" with indistinguishable balls).\n    # There are 2 ice-creams to distribute and 2 dividers (because we have 3 friends, which means 2 partitions).\n    \n    # Therefore, the number of ways we can distribute the ice-creams is the combination of 4 objects taken 2 at a time.\n    ans = comb(2 + 3 - 1, 3 - 1)\n\n    return ans\n\nans = solution()"
    ],
    "8b8ec14b7a8644c29978ed2f26e00750": [
        "def solution():\n    ans = 345 * 5\n    return ans\n\nans = solution()"
    ],
    "e01c74553e6347a3b1a064b18bd7140d": [
        "def solution():\n    # January to March (3 months)\n    jan_to_mar = 450 * 3\n\n    # April to July (4 months)\n    apr_to_jul = 350 * 4\n\n    # August to October (3 months)\n    aug_to_oct = 1250\n\n    # November to December (2 months)\n    nov_to_dec = 400 * 2\n\n    # Total spent in the year\n    total_spent = jan_to_mar + apr_to_jul + aug_to_oct + nov_to_dec\n\n    # Average per month (12 months)\n    average_per_month = total_spent / 12\n\n    return average_per_month\n\nans = solution()"
    ],
    "27b3555bfced4c3fa57ebd84801ad9e9": [
        "def solution():\n    walking_speed = 40\n    cycling_speed = 60\n\n    # Assume a distance to the library which is a multiple of the speeds to avoid fractions\n    distance = walking_speed * cycling_speed\n\n    time_to_library = distance / walking_speed\n    time_from_library = distance / cycling_speed\n\n    total_time = time_to_library + time_from_library\n    total_distance = 2 * distance\n\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "8b91281c082e4e1e8991287413079e54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((3.5 / (3*x + 2)) + (2 / (1.5*x + 1)), (4.5 / (5 - 6*x)) - (3 / (2.5 - 3*x)))\n\n    solutions = solve(equation, x)\n\n    return solutions\n\nans = solution()"
    ],
    "bcade51c8974433b902c06454320d2d6": [
        "def solution():\n    for M in range(10):\n        total_sweets = int('127' + str(M))\n        if total_sweets % 25 == 0:\n            return total_sweets // 25\n\nans = solution()"
    ],
    "e9b595c255074a5b964141db77e7289a": [
        "def solution():\n    from sympy import symbols, solve\n\n    x, y = symbols('x y')\n    # Given proportion equation\n    equation = (9 / x) - (y / 2)\n    \n    # Solve for y when x equals 3\n    y_value_when_x_3 = solve(equation.subs(x, 3), y)\n\n    proportional_relationship = \"inversely\"\n    y_at_x_3 = y_value_when_x_3[0]\n\n    return proportional_relationship, y_at_x_3\n\nans = solution()"
    ],
    "462088e1598d4df6ad551447b191e0c2": [
        "def solution():\n    # Let's denote the cost per serving of ice cream as x.\n    # Sophie wanted to buy 5 servings, but was short of $2.30. So the money she had was enough for (5-1) servings.\n    # Money Sophie had = cost of 4 servings of ice cream\n    \n    # Sophie bought 3 servings and had $0.30 left.\n    # Money Sophie had = cost of 3 servings + $0.30\n    \n    # Equating the two equations above,\n    # cost of 4 servings = cost of 3 servings + $0.30 \n    # Subtracting cost of 3 servings from both sides gives us\n    # cost of 1 serving (x) = $0.30\n    \n    # The total amount of money Sophie's mother gave her can now be calculated.\n    # Money given = cost of 3 servings + $0.30 (the change left after buying 3 servings)\n    cost_per_serving = 0.30\n    money_given = (3 * cost_per_serving) + 0.30\n    \n    return money_given\n\nans = solution()"
    ],
    "51ad76377c2d44b9bc497caa5e86cd99": [
        "def solution():\n    from itertools import permutations\n\n    digits = ['2', '3', '5', '6']\n    odd_numbers = []\n    \n    for perm in permutations(digits):\n        num = int(''.join(perm))\n        if num % 2 != 0:\n            odd_numbers.append(num)\n    \n    ans = min(odd_numbers)\n    return ans\n\nans = solution()"
    ],
    "1d0c88113962459d9a867535f00b7776": [
        "def solution():\n    ans = 391 // 17\n    return ans\n\nans = solution()"
    ],
    "931e1d2a335c4a7daca31b92b6d6c0ee": [
        "def solution():\n    from math import pow, sqrt\n\n    numerator = -6.94 - pow(9.604, 1/3)\n    denominator = sqrt(44.541/67) - (-377/6 * 1 + 2/3)\n    \n    result = numerator / denominator\n    ans = round(result, 3)\n    \n    return ans\n\nans = solution()"
    ],
    "54499dc98e4442c5aaa04120c1769fbe": [
        "def solution():\n    # To ensure getting at least 2 of the same color, you need to consider the worst-case scenario.\n    # That is, you take out one ball of each color until you're forced to take another of the same color.\n    \n    # Initially, take one of each color:\n    # 1 green and 1 blue, total = 2 balls taken\n    \n    # The next ball you take must be of the same color as one you already took,\n    # guaranteeing that you have at least 2 balls of the same color.\n    \n    # So you just need to add one more ball to the 2 you already took.\n    \n    total_balls_taken = 2 + 1  # 2 for one of each color, and 1 for the guaranteed same color\n\n    return total_balls_taken\n\nans = solution()"
    ],
    "09b871767fd046788bf00397a1526767": [
        "def solution():\n    # Let x be the number we start with.\n    number = symbols('number')\n    \n    # Add 3 to x.\n    step1 = number + 3\n    \n    # Multiply by 2.\n    step2 = step1 * 2\n    \n    # Take away 2.\n    step3 = step2 - 2\n    \n    # Add 10.\n    step4 = step3 + 10\n    \n    # Divide by 2.\n    step5 = step4 / 2\n    \n    # Take away the number you started with (x).\n    result = step5 - number\n\n    # Simplify the expression to find the answer.\n    ans = result.simplify()\n\n    return ans\n\nans = solution()"
    ],
    "a9e6ee1f892d4e91b4af844be4862a94": [
        "def solution():\n    # Let x be the initial number of bracelets Felicia had\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    # Felicia sold 3/5 of her bracelets\n    felicia_sold = 3/5 * x\n\n    # Janice bought 2/5 of the bracelets Felicia sold\n    janice_bought = 2/5 * felicia_sold\n   \n    # After selling and buying, Felicia has 2/5 of her initial bracelets\n    felicia_left = 2/5 * x\n    \n    # After buying, Janice has her initial bracelets plus what she bought from Felicia\n    janice_left = 96 + janice_bought\n    \n    # The ratio of the bracelets that Felicia has left to those Janice has becomes 5:7\n    ratio_equation = Eq(felicia_left / janice_left, 5/7)\n\n    # Solve for x\n    sold_bracelets_solution = solve((ratio_equation), (x))\n\n    # Janice bought this number of bracelets from Felicia\n    janice_bought_bracelets = janice_bought.subs(x, sold_bracelets_solution[0])\n\n    return janice_bought_bracelets\n\nans = solution()"
    ],
    "a58850681f6c454b93664a02ebcf4745": [
        "def solution():\n    ans = 299 + 199 + 99 + 5\n    return ans\n\nans = solution()"
    ],
    "618cd3abae4a408c89cdfe804dd7861f": [
        "def solution():\n    total_books = 50\n    total_cost = 20 * 4 + 10 * 5 + 20 * 6  # Cost of science fictions, comics, and novels.\n    average_cost = total_cost / total_books\n    return average_cost\n\nans = solution()"
    ],
    "7025bfa134974b12917661070ac0ccfc": [
        "def solution():\n    from sympy import primerange\n\n    primes = list(primerange(50, 100))\n    return len(primes)\n\nans = solution()"
    ],
    "0015db147ca4414ca1e9736f722c0a81": [
        "def solution():\n    count = 0\n    for i in range(100,1000):\n        if str(i).count('7') >= 2:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "21b53a84fa7744b799aa83b063cea3d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack, kyle = symbols('jack kyle')\n\n    # Jack had 5 times as much money as Kyle\n    equation1 = Eq(jack, 5 * kyle)\n    \n    # After Jack lost $72, Kyle had 2/7 as much money as Jack\n    equation2 = Eq(kyle, (2/7) * (jack - 72))\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (jack, kyle))\n\n    return solutions[kyle]\n\nans = solution()"
    ],
    "81c24559e88e4ed8bcd27664fdc09676": [
        "from math import lcm\n\ndef solution():\n    return lcm(9, 10, 15)\n\nans = solution()"
    ],
    "839a183a0d534ab08d061613682d208e": [
        "def solution():\n    multipack_cost = 3.90\n    individual_cost = 0.35 * 15\n    savings = individual_cost - multipack_cost\n    return savings\n\nans = solution()"
    ],
    "7e911c176e49479e9ed116f42644288d": [
        "def solution():\n    principal = 20000\n    rate_of_interest = 0.05\n    time_period = 11\n\n    final_amount = principal * (1 + rate_of_interest * time_period)\n\n    return final_amount\n\nans = solution()"
    ],
    "f0b55e6d454f4ee0b6b7bab29ab5fcde": [
        "def solution():\n    # numbers of different colors of shirts\n    num_orange = 6\n    num_yellow = 10\n    num_pink = 4\n    num_brown = 12\n\n    # If Annabella wants to make sure to get 1 yellow shirt,\n    # she has to consider the worst-case scenario,\n    # which is taking out all shirts of other colors first.\n    num_other_shirts = num_orange + num_pink + num_brown\n\n    # Therefore, she needs to take one more shirt after that to be sure it's yellow.\n    ans = num_other_shirts + 1\n\n    return ans\n\nans = solution()"
    ],
    "f12b69acb17a43e28c14160e54423ddd": [
        "def solution():\n    total = (3/4) + (3/4) + (3/4)\n    missing_number = (total - 1) * 4\n    return missing_number\n\nans = solution()"
    ],
    "fe146e5b026340f9924ffd3736d5162b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    n = 20  # number of terms\n    sum_of_terms = 560\n    d = 2  # common difference\n\n    # Let the first term be a\n    a = symbols('a')\n\n    # Formula for the sum of an arithmetic progression: n/2 * (2a + (n - 1) * d) = sum_of_terms\n    equation = Eq(n / 2 * (2 * a + (n - 1) * d), sum_of_terms)\n\n    # Solving for a\n    smallest_term = solve(equation, a)[0]\n\n    return smallest_term\n\nans = solution()"
    ],
    "4b5a108e7b29463283a0121b8eff4ee7": [
        "def solution():\n    total_distance = 8\n    climb_up = 3\n    slide_down = 2\n    progress_per_day = climb_up - slide_down\n    distance_before_final_climb = total_distance - climb_up\n    \n    days_taken = distance_before_final_climb // progress_per_day\n    if distance_before_final_climb % progress_per_day != 0:\n        days_taken += 1\n\n    # Add the final day when it climbs out\n    days_taken += 1\n \n    return days_taken\n\nans = solution()"
    ],
    "24494b59b3a84f199458f505e96beab3": [
        "def solution():\n    # Compute the total number of pages read\n    total_pages = (25 * 4) + (40 * 6) + 80\n    # Compute the total number of days\n    total_days = 4 + 6 + 5\n    # Compute the average number of pages per day\n    average_pages_per_day = total_pages / total_days\n\n    return average_pages_per_day\n\nans = solution()"
    ],
    "ecd90328d44a498ab3c19fbbded322fc": [
        "def solution():\n    chocolate_cookies = 54\n    strawberry_cookies = chocolate_cookies + 12\n    vanilla_cookies = 3 * chocolate_cookies\n    total_cookies = chocolate_cookies + strawberry_cookies + vanilla_cookies\n    return total_cookies\n\nans = solution()"
    ],
    "50bfc99c8d774fb4a0ecaeddfbae7daf": [
        "def solution():\n    birds_on_tree_A = 14\n    birds_on_tree_B = birds_on_tree_A + 7\n    total_birds = birds_on_tree_A + birds_on_tree_B\n    return total_birds\n\nans = solution()"
    ],
    "590987a303104728994dd0da7fd3edb0": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (3, 5), (5, 7), (9, 11)]\n    ans = solve_congruence(*congruences)[0]\n\n    return ans\n\nans = solution()"
    ],
    "3dcbd6c48bb44952b98d8cdbb7804567": [
        "def solution():\n    # Let's denote the number of toys her brother had originally as x\n    # According to the problem, Penny has x + 10 toys originally\n    # Since after giving away the toys Penny has 14 toys, she must have given x + 10 - 14 toys to her brother\n    # So her brother now has x + (x + 10 - 14) toys, which should be equal to 12 toys, according to the problem.\n\n    # Setting up the equation: x + (x + 10 - 14) = 12\n    # Simplifying the equation: 2*x - 4 = 12\n    # Solving the equation: 2*x = 12 + 4\n    x = (12 + 4) // 2\n\n    # The original number of toys her brother had is x\n    return x\n\nans = solution()"
    ],
    "18e49347b54c42d49dfd7851649db755": [
        "def solution():\n    result = 123 * 321\n    return result\n\nans = solution()"
    ],
    "b61f2c67d5474cefa523298e7944c309": [
        "def solution():\n    # Alberta's age can be represented as 10a + b, where a and b are digits.\n    # After swapping and adding 1, the age is 10b + a + 1.\n    # We are told that 10b + a + 1 = (10a + b) / 2.\n    # We solve for a and b within the range 0-9 considering Alberta must have a non-zero tens digit.\n  \n    for a in range(1, 10):\n        for b in range(0, 10):\n            if 2 * (10 * b + a + 1) == (10 * a + b):\n                return 10 * a + b\n\nans = solution()"
    ],
    "3b73a77f7c8e486d98024f7782b84098": [
        "def solution():\n    n = 50\n    sum_series = n * (n + 1) // 2\n    return sum_series\n\nans = solution()"
    ],
    "6c8cdbe801664deaa9cc1f055549ee16": [
        "def solution():\n    ans = 3588 // 13\n    return ans\n\nans = solution()"
    ],
    "a4df0cfdb4324df6bf44b5accd085d76": [
        "def solution():\n    # Number of cards needed to be sure to have 4 of the same suit\n    # With 4 suits, drawing 4 cards might end up with 3 of one suit and 1 of another, all different. \n    # But with 1 more draw (for each suit), we are sure to have at least 4 of the same suit.\n    cards_needed = (4 - 1) * 4 + 1\n\n    return cards_needed\n\nans = solution()"
    ],
    "4a2049898e2f4dcb959012b7515613ac": [
        "def solution():\n    return 26 + 9 + 14 + 21\n\nans = solution()"
    ],
    "4ada2fc5ea7044e8883b8b41373103ba": [
        "def solution():\n    percent_sold = 0.60\n    tickets_left = 28\n    total_tickets = tickets_left / (1 - percent_sold)\n    return int(total_tickets)\n\nans = solution()"
    ],
    "2eb3b3989afb45418447f85937aa1224": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    spent = symbols('spent')\n    hayden_start = 1420\n    mitchell_start = 505\n    hayden_end = hayden_start - spent\n    mitchell_end = mitchell_start - spent\n\n    equation = Eq(hayden_end, 4 * mitchell_end)\n\n    solution = solve(equation, spent)\n\n    return solution[0]\n\nans = solution()"
    ],
    "1404b37a858c4a309f7a557d011e187e": [
        "def solution():\n    number = 15 * 4\n    two_thirds_of_number = (2/3) * number\n    return two_thirds_of_number\n\nans = solution()"
    ],
    "a4dc96d97cbd45ada42d2e9d64c14fe0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the total number of people be 'p'\n    p = symbols('p')\n    \n    # total number of children = total people - adults\n    # children = p - (3/7)p\n    # children = (4/7)p\n    # number of girls = total children - boys\n    # number of girls = (4/7)p - (3/8)(4/7)p\n    # number of girls = (4/7)p * (1 - 3/8)\n    # but number of girls is given as 45\n    # so, (4/7)p * (5/8) = 45\n    equation = Eq((4/7) * p * (5/8), 45)\n\n    # Solve the equation for 'p'\n    solutions = solve(equation, p)\n\n    # since the number of people can only be an integer, we select the integer solution\n    return solutions[0]\n\nans = solution()"
    ],
    "22ad17f448d649e0b1fe57f02fb19f28": [
        "def solution():\n    two_dollar_notes = 5\n    fifty_cent_coins = 7\n    file_cost = 11.95\n\n    total_two_dollar_notes_value = two_dollar_notes * 2\n    total_fifty_cent_coins_value = fifty_cent_coins * 0.50\n    total_money = total_two_dollar_notes_value + total_fifty_cent_coins_value\n    money_left = total_money - file_cost\n\n    return money_left\n\nans = solution()"
    ],
    "f2d20571c7e14687b51b0f2273c1a1e6": [
        "def solution():\n    n = 100\n    return (n * (n + 1)) // 2\n\nans = solution()"
    ],
    "f8a9831c64444874a7a022c43dcf9b19": [
        "def solution():\n    # Tom must draw 4 cards from a single suit to guarantee 4 cards of the same suit.\n    # There are 4 suits, and after drawing 3 cards from each suit (3 cards * 4 suits),\n    # he could have 3 cards of every suit without having 4 of the same.\n    # So, Tom needs to draw one more card to be sure that he has 4 of the same suit.\n    \n    cards_drawn = 3 * 4 + 1\n\n    return cards_drawn\n\nans = solution()"
    ],
    "7d59e89e4b054b118a94d4c74670905c": [
        "def solution():\n    percentage_sold = 0.6\n    tickets_unsold = 28\n    percentage_unsold = 1 - percentage_sold\n\n    total_capacity = tickets_unsold / percentage_unsold\n\n    return int(total_capacity)\n\nans = solution()"
    ],
    "01cf6f9c69e4458a8b94a0b745d2cc7d": [
        "def solution():\n    ginkgo_trees = 30\n    # Minus one as there is no need for willow trees after the last ginkgo tree\n    spaces_between_ginkgo = ginkgo_trees - 1\n    willow_trees = spaces_between_ginkgo * 2  # Two willow trees for each space\n    return willow_trees\n\nans = solution()"
    ],
    "186459d1a5bc465cae1639d4f60e5ff7": [
        "def solution():\n    return 10 - 2\n\nans = solution()"
    ],
    "305c7d5b598d4dd28cdaf101e7ead5d7": [
        "def solution():\n    total_distance = 11\n    day_distance = 3\n    night_distance = -1\n    net_distance = day_distance + night_distance\n    day = 0\n    current_distance = 0\n    \n    while current_distance < total_distance:\n        day += 1\n        current_distance += day_distance\n        if current_distance >= total_distance:\n            break\n        current_distance += night_distance\n        \n    return day\n\nans = solution()"
    ],
    "eec2a2b1d8c14700926c3b02af68e739": [
        "def solution():\n    # Correct calculations for the amount Jim had initially\n    two_dollar_notes = 5 * 2   # 5 two-dollar notes\n    fifty_cent_coins = 7 * 0.5  # 7 fifty-cent coins\n\n    # Total amount before buying\n    total_before = two_dollar_notes + fifty_cent_coins\n\n    # Correct calculations for the amount Jim spent\n    file_cost = 11.95\n\n    # Total amount after buying\n    total_after = total_before - file_cost\n\n    return round(total_after, 2)\n\nans = solution()"
    ],
    "3bb33463238344c0b0c5e15f79be1c35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for each person's holiday money\n    andrew, brian, christopher = symbols('andrew brian christopher')\n\n    # Equation: Andrew plus Brian's money equals 40\n    equation1 = Eq(andrew + brian, 40)\n    # Equation: Andrew plus Christopher's money equals 37\n    equation2 = Eq(andrew + christopher, 37)\n    # Equation: Brian plus Christopher's money equals 25\n    equation3 = Eq(brian + christopher, 25)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (andrew, brian, christopher))\n\n    # Sum all values to get the total amount of money they have together\n    total_money = sum(solutions.values())\n\n    return total_money\n\nans = solution()"
    ],
    "b25a759f5a124329b59f7caa09995681": [
        "def solution():\n    # Let's denote the weight of Adam, Ben, and Carl as A, B, and C respectively.\n    # Based on the given information:\n    # Adam + Ben = 102kg (Equation 1)\n    # Ben + Carl = 97kg (Equation 2)\n    # Adam + Carl = 93kg (Equation 3)\n    \n    # Let's add Equation 1, Equation 2, and Equation 3:\n    # (Adam + Ben) + (Ben + Carl) + (Adam + Carl) = 102kg + 97kg + 93kg\n    # 2*(Adam + Ben + Carl) = 292kg\n    \n    # Therefore, the total weight of Adam, Ben and Carl is 292kg / 2.\n    total_weight = 292 / 2\n    \n    return int(total_weight)\n\nans = solution()"
    ],
    "cb41cb4b2a104da19631ca6cf97368fb": [
        "def solution():\n    x = (26 + 4) / 5\n    return x\n\nans = solution()"
    ],
    "d26417287aa54f1a81818d3f38ddf3b7": [
        "def solution():\n    ramen_cost = 8\n    pineapple_juice_cost = ramen_cost - 5\n    roasted_duck_cost = 6 * ramen_cost\n\n    total_cost = ramen_cost + pineapple_juice_cost + roasted_duck_cost\n    return total_cost\n\nans = solution()"
    ],
    "c21db49e2ec24c00ad1e61412de8a8da": [
        "def solution():\n    total_aircrafts = 1200\n    zack_rate = 150\n    total_time = 6\n\n    combined_rate = total_aircrafts / total_time\n    andy_rate = combined_rate - zack_rate\n\n    andy_time = total_aircrafts / andy_rate\n\n    return andy_time\n\nans = solution()"
    ],
    "1a2675c93fa74d79bf17aa463233e418": [
        "def solution():\n    total_people = 0\n    difference = 80\n    # Start with an initial guess for the size of the array\n    for n in range(1, 500):\n        # In a square array with n layers, there are (2n-1)^2 people\n        students = 4 * sum([2 * i for i in range(n)])\n        teachers = 4 * sum([2 * i - 1 for i in range(1, n)])\n        if students - teachers == difference:\n            # Add the one teacher in the center if the number of layers is odd, else add the student\n            total_people = students + teachers + (1 if n % 2 != 0 else 0)\n            break\n    return total_people\n\nans = solution()"
    ],
    "a85551b5ada240de8c9dda1f7da71caa": [
        "def solution():\n    # Let's denote:\n    # A = Andrew's money\n    # B = Brian's money\n    # C = Christopher's money\n    from sympy import symbols, Eq, solve\n    \n    A, B, C = symbols('A B C')\n    \n    # Andrew and Brian have £40 between them\n    equation1 = Eq(A + B, 40)\n    # Andrew and Christopher have £37 between them\n    equation2 = Eq(A + C, 37)\n    # Christopher and Brian have £25 between them\n    equation3 = Eq(C + B, 25)\n    \n    # Solve the three equations for A, B, and C\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    # The total amount the boys have altogether\n    total_money = solutions[A] + solutions[B] + solutions[C]\n\n    return total_money\n\nans = solution()"
    ],
    "c41f84fd63394a0391698bc5498037eb": [
        "def solution():\n    cheese_weight_kg = 500 / 1000  # convert grams to kilograms\n    cheese_cost = 7.48 * cheese_weight_kg\n    apple_cost = 8 * 12 / 100  # convert pence to pounds\n    yoghurt_cost = 2 * 46 / 100  # convert pence to pounds\n    total_cost = cheese_cost + apple_cost + yoghurt_cost\n    change = 10 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "97d454b709c64e6daff1a08bdaaa2036": [
        "def solution():\n    total_volume = 300\n    ratio_sum = 2 + 7 + 6\n    orange_ratio = 7\n\n    orange_volume = (orange_ratio / ratio_sum) * total_volume\n\n    return orange_volume\n\nans = solution()"
    ],
    "e9ac6545c3a143c28291a6d293def281": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    smaller, bigger = symbols('smaller bigger')\n\n    equation1 = Eq(bigger, 3 * smaller)\n    equation2 = Eq(smaller + bigger, 528)\n\n    solutions = solve((equation1, equation2), (smaller, bigger))\n\n    return solutions[bigger]\n\nans = solution()"
    ],
    "ea932493a6be4bd8a55c3012ca3eed55": [
        "def solution():\n    original_amount = 20\n    savings = 1 * 7  # $1 everyday for one week\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    total_money_left = original_amount + savings - lent_to_brother - spent_on_snacks\n\n    return total_money_left\n\nans = solution()"
    ],
    "adba7c277cb842899408b324ea11a443": [
        "def solution():\n    initial_amount = 28.74\n    owed_to_mum = 10.50\n    remaining_after_repayment = initial_amount - owed_to_mum\n    spent_on_magazines = remaining_after_repayment / 2\n    amount_left = remaining_after_repayment - spent_on_magazines\n    return amount_left\n\nans = solution()"
    ],
    "b3ed35bbe5ce4935bcc062b5653f1a11": [
        "def solution():\n    q = 1\n    for i in range(1, 44001):\n        if 44000 % i == 0:\n            cube_root = round((44000 // i) ** (1/3))\n            if cube_root ** 3 == 44000 // i:\n                q = i\n                break\n    return q\n\nans = solution()"
    ],
    "be66bf7835674a479413fc1019bf6408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for width and length\n    width, length = symbols('width length')\n    \n    # Equation representing that the length is twice the width\n    equation1 = Eq(length, 2 * width)\n    \n    # Equation representing the perimeter\n    equation2 = Eq(2 * length + 2 * width, 72)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (width, length))\n\n    return solutions[length]\n\nans = solution()"
    ],
    "e000ebdd6454463d874a0f9f4b5453da": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    steve, mark, ryan, meal_cost = symbols('steve mark ryan meal_cost')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(steve, mark + 40)\n    equation2 = Eq((steve - meal_cost) / (mark - meal_cost), 3/8)\n    equation3 = Eq((ryan - meal_cost) / (steve - meal_cost), 1/5)\n    equation4 = Eq((steve - meal_cost) / (ryan - meal_cost), 10/9)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (steve, mark, ryan, meal_cost))\n    \n    # There might be more than one solution, but we need the one with positive meal_cost\n    for sol in solutions:\n        if sol[meal_cost] > 0:\n            return sol[meal_cost]\n\nans = solution()"
    ],
    "dfcfac4be0e0482cbfbe73e3f8f36b37": [
        "def solution():\n    n = 81\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "de537ba1fad747e38db67229241b78f3": [
        "def solution():\n    mass = 100  # kg\n    coefficient_of_friction = 0.4\n    force_applied = 250  # N\n\n    # The force of static friction is given by f_s = μ * N\n    # where μ is the coefficient of static friction, and N is the normal force.\n    # Since the crate is on the floor and there are no other vertical forces, the normal force N equals the weight of the crate, which is mass * g (where g is the acceleration due to gravity 9.8 m/s^2)\n\n    gravity = 9.8  # m/s^2\n    normal_force = mass * gravity\n\n    # Calculate the maximum force of static friction\n    force_of_static_friction_max = coefficient_of_friction * normal_force\n\n    # If the applied force is less than the maximum static friction force, then the friction force equals the applied force\n    # Since 250 N is less than the maximum possible static friction force here, the force of static friction on the crate is equal to the applied force.\n    if force_applied < force_of_static_friction_max:\n        force_of_static_friction = force_applied\n    else:\n        force_of_static_friction = force_of_static_friction_max\n\n    return force_of_static_friction\n\nans = solution()"
    ],
    "cc1ad36629654bae97b8c5a7fac65f55": [
        "def solution():\n    nick_salt = 300 * 0.12\n    nicole_salt = 500 * 0.28\n    total_salt = nick_salt + nicole_salt\n    total_solution = 300 + 500\n    concentration = total_salt / total_solution\n    return concentration * 100  # Convert to percentage\n\nans = solution()"
    ],
    "be0c4394f54542bfb8c9b196143e27a7": [
        "def solution():\n    third_term = 23\n    fifteenth_term = 155\n    n = 15 - 3\n\n    common_difference = (fifteenth_term - third_term) / n\n\n    return common_difference\n\nans = solution()"
    ],
    "d9b27069b97d43039159301e52324136": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B = symbols('A B')\n    \n    # B scored 50 points less than A\n    equation1 = Eq(B, A - 50)\n    \n    # If B gave A 25 points, A's score would be 5 times B's score\n    equation2 = Eq(A + 25, 5 * (B - 25))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (A, B))\n    \n    return solutions[A]\n\nans = solution()"
    ],
    "05b3b86ca32248e090e1eb71f8a1857e": [
        "def solution():\n    # Start with the first cube (1^3) and check if one more than this number is a perfect square\n    n = 1\n    while True:\n        cube = n**3\n        square_candidate = cube + 1\n        # Check if square_candidate is a perfect square\n        if (int(square_candidate**0.5))**2 == square_candidate:\n            return square_candidate\n        n += 1\n\nans = solution()"
    ],
    "63961e2f7dee44ca9a4d89a4d4de6c02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    james, nina = symbols('james nina')\n\n    # Total number of buttons\n    equation1 = Eq(james + nina, 24)\n\n    # After Nina gives 6 buttons to James, they have the same number\n    equation2 = Eq(james + 6, nina - 6)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (james, nina))\n\n    # Return the number of buttons Nina has originally\n    return solutions[nina]\n\nans = solution()"
    ],
    "100c6fbfe37a4df59970ef7b87bb2fb2": [
        "def solution():\n    result = ((11/30) - (9/20) + (7/12) - (1/3)) * 6 * (7/13) * 9.1\n    return result\n\nans = solution()"
    ],
    "154e009409a0475f899012d13bba6fbe": [
        "def solution():\n    total_workers = 3\n    total_parts = 90\n    total_hours = 5\n\n    parts_per_hour_per_worker = total_parts / (total_workers * total_hours)\n\n    return parts_per_hour_per_worker\n\nans = solution()"
    ],
    "9b06a89d59134d6786d0f3304363e49b": [
        "def solution():\n    day_distance = 5\n    night_distance = 3\n    total_distance = 16\n    days_passed = 0\n    current_distance = 0\n\n    while True:\n        days_passed += 1\n        current_distance += day_distance\n\n        if current_distance >= total_distance:\n            break\n        current_distance -= night_distance\n\n    return days_passed\n\nans = solution()"
    ],
    "bee004ffbd0d4ae48f167a59c6b0eba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(bentley, david - 25)\n    equation3 = Eq(david + bentley + triston, 410)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[bentley]\n\nans = solution()"
    ],
    "e382d288fd514311b12b870b6e188cb0": [
        "def solution():\n    # Based on the provided information, we need to determine the relationship\n    # between the number of bags used (x) and the tax charged (y).\n    # This relation is typically linear in such context, expressed as y = mx + b\n    # where m is the slope (change in y for each unit change in x)\n    # and b is the y-intercept (the value of y when x is 0).\n    # Given the context does not provide specific values for the slope and intercept,\n    # we will represent them with generic symbols 'm' for slope and 'b' for intercept.\n    \n    from sympy import symbols, Eq\n    \n    x, y, m, b = symbols('x y m b')\n    equation = Eq(y, m * x + b)\n    \n    return equation\n\nans = solution()"
    ],
    "3f7c7e2ec1a24832be797aa888a40a2e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (3, 5), (3, 7), (0, 9)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "cf5c903f7a704e0e9edc0dcebf1c25a4": [
        "def solution():\n    fraction_value = 8 / 100\n    decimal_value = 0.7\n    ans = max(fraction_value, decimal_value)\n    return ans\n\nans = solution()"
    ],
    "9518ce77f5dc46ba89558b1a438ed818": [
        "from fractions import Fraction\n\ndef solution():\n    result = 3 * Fraction(4, 5) * Fraction(10, 9) * Fraction(11, 2) * Fraction(3, 11)\n    return result\n\nans = solution()"
    ],
    "d023e16d6b0442258dbdd634f6f230cd": [
        "def solution():\n    total_payment = 275\n    flat_fee = 30\n    daily_fee_short = 25\n    daily_fee_long = 20\n    \n    max_short_term_days = 5\n    cost_for_5_days = flat_fee + (daily_fee_short * max_short_term_days)\n    \n    # Calculate days if rented for 5 days or less\n    if total_payment <= cost_for_5_days:\n        days = (total_payment - flat_fee) / daily_fee_short\n    # Calculate days if rented for more than 5 days\n    else:\n        additional_days = (total_payment - cost_for_5_days) / daily_fee_long\n        days = max_short_term_days + additional_days\n    \n    return int(days)\n\nans = solution()"
    ],
    "5b1c49d670024781873d3ae0efb0c655": [
        "def solution():\n    dog_to_rabbit = 8\n    rabbit_to_chicken = 2\n    dog_to_chicken = dog_to_rabbit * rabbit_to_chicken\n    return dog_to_chicken\n\nans = solution()"
    ],
    "16022d017d8d4b2a93df59ec9de8de8d": [
        "def solution():\n    product = 1\n    for i in range(2, 51):\n        product *= (1/i - 1/(52-i))\n    return product\n\nans = solution()"
    ],
    "eae7f41ff90f44e7a99eb2dc09729a1c": [
        "def solution():\n    initial_height = 270\n    rebound_ratio = 0.10\n    total_distance = initial_height\n\n    while initial_height > 0:\n        initial_height *= rebound_ratio\n        total_distance += 2 * initial_height\n\n    return total_distance\n\nans = solution()"
    ],
    "fbc9c3861d2d486da8e9c21841d42bfa": [
        "def solution():\n    for sheets in range(1, 58):\n        # if the booklet is folded in half, it forms two pages per sheet\n        pages = sheets * 2\n        # page numbers start at 1 and go up by 1 each page \n        # for any sheet, we have pages n, n+1, n+2, and n+3\n        # n is the first page of the sheet when folded\n        # for sheet number i, the first page of that sheet is 2i - 1\n        # so, n = 2i - 1\n        # sum of four pages is 4n + 6 = 58\n        # solve for n\n        for i in range(1, sheets + 1):\n            n = 2 * i - 1\n            if 4 * n + 6 == 58:\n                return sheets\n\nans = solution()"
    ],
    "42cc9c30d7da46e1b85c814f51f4cb50": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    green_cars, yellow_cars = symbols('green_cars yellow_cars')\n\n    # Initial condition: green_cars = yellow_cars\n    equation1 = Eq(green_cars, yellow_cars)\n    # After giving away cars: yellow_cars - 14 = 3 * (green_cars - 60)\n    equation2 = Eq(yellow_cars - 14, 3 * (green_cars - 60))\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (green_cars, yellow_cars))\n\n    # Number of green toy cars Sam had in the end\n    final_green_cars = solutions[green_cars] - 60\n    return final_green_cars\n\nans = solution()"
    ],
    "a6d0ec4cdc6d41c1bee18c4428510978": [
        "def solution():\n    buck_speed = 600  # metres per minute\n    elephant_speed = 250  # metres per minute\n    total_distance = 3000  # metres\n\n    buck_time = total_distance / buck_speed\n    elephant_time = total_distance / elephant_speed\n\n    time_difference = elephant_time - buck_time\n\n    return time_difference\n\nans = solution()"
    ],
    "f5f9f6e369044a1b83219aa9a9159ae4": [
        "def solution():\n    # Calculate number of terms in one half of the sequence (4 to 400)\n    first_term = 4\n    difference = 4\n    last_term = 400\n    num_terms = ((last_term - first_term) // difference) + 1\n    \n    # Sum of above terms (using formula for sum of arithmetic sequence: n/2 * (first_term + last_term))\n    sum_one_half = num_terms / 2 * (first_term + last_term)\n    \n    # Since the sequence is symmetric, the total sum is twice the sum of one half\n    total_sum = 2 * sum_one_half\n    \n    return int(total_sum)\n\nans = solution()"
    ],
    "821bbb7b160a4641959ffcfcc87a1881": [
        "def solution():\n    total_apples = 200\n    bad_apples_percentage = 15\n    bad_apples = (bad_apples_percentage / 100) * total_apples\n    return bad_apples\n\nans = solution()"
    ],
    "6f13e1fc1b49403ea8b1930c4936f41a": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Simon's speed (km/h)\n    simon_speed = 80\n    # Wife's speed (km/h)\n    wife_speed = 60\n\n    # Relative speed at which Simon catches up (km/h)\n    relative_speed = simon_speed - wife_speed\n\n    # Distance to catch up (km)\n    catch_up_distance = 15\n\n    # Time needed to catch up (hours)\n    catch_up_time = catch_up_distance / relative_speed\n\n    # Convert this time to minutes\n    catch_up_time_minutes = catch_up_time * 60\n\n    # Starting time: 6:10 pm\n    start_time = datetime.strptime('18:10', '%H:%M')\n\n    # Calculate the time at which Simon overtakes his wife\n    overtaking_time = start_time + timedelta(minutes=catch_up_time_minutes)\n\n    # Format the result as HH:MM (24-hour format)\n    return overtaking_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "901ccb4591ae4fc0b5dc46e406c89367": [
        "def solution():\n    return 123 - 67\n\nans = solution()"
    ],
    "da055c1b89524c48bc32bc19a92de881": [
        "def solution():\n    pencil_cost_single = 1.80 / 12\n    pen_to_pencil_ratio = 7 / 3\n    pen_cost_single = pencil_cost_single * pen_to_pencil_ratio\n    cost_of_5_pens = 5 * pen_cost_single\n    return cost_of_5_pens\n\nans = solution()"
    ],
    "3aaf82004b014041bf215ad6f6fcea70": [
        "def solution():\n    first_term = 2\n    last_term = 80\n    difference = 2\n    \n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_series = num_terms * (first_term + last_term) // 2\n    \n    return sum_of_series\n\nans = solution()"
    ],
    "3e45de8cb94745a28ca3cae049c63279": [
        "def solution():\n    num_drinks = 2  # coffee, milk\n    num_food_items = 3  # hamburger, burrito, bagel\n\n    num_combinations = num_drinks * num_food_items\n\n    return num_combinations\n\nans = solution()"
    ],
    "fbd1909b07244f4b8fef27cb83be59f2": [
        "def solution():\n    lockers = [False] * 101  # Initialize the lockers, False means unlocked, start index at 1\n\n    # Step 1: Lock the lockers divisible by 3\n    for i in range(3, 101, 3):\n        lockers[i] = True\n\n    # Step 2: Toggle the lockers divisible by 5\n    for i in range(5, 101, 5):\n        lockers[i] = not lockers[i]\n\n    # Unlocked lockers are the ones that are toggled an odd number of times.\n    # Since only squares have an odd number of divisors,\n    # only perfect squares will be toggled an odd number of times.\n    count_unlocked = sum(1 for i in range(1, 11) if not lockers[i * i])\n\n    return count_unlocked\n\nans = solution()"
    ],
    "6ed4b3f4d3984ba0b27b5278f3c00efa": [
        "def solution():\n    # Climbing to the 5th step, Nelson has two choices on each of the previous steps (1 or 2 steps at a time)\n    # except for the 4th step (he must step on the 5th), which means there are 2^(5-1) ways to reach the 5th step.\n    ways_to_5 = 2 ** (5 - 1)\n\n    # After the 5th step, Nelson needs to climb 5 more steps.\n    # Cache for number of ways to climb to each step with the constraint of stepping on step 5\n    ways_cache = {5: ways_to_5}\n\n    def count_ways_to_climb(remaining_steps):\n        if remaining_steps in ways_cache:\n            return ways_cache[remaining_steps]\n\n        # If Nelson is on the last or the second-to-last step, there is only one way to climb up\n        if remaining_steps == 0 or remaining_steps == 1:\n            ways_cache[remaining_steps] = 1\n            return 1\n        else:\n            # Nelson can reach the current step either from the previous step or from the one before last\n            ways_cache[remaining_steps] = count_ways_to_climb(remaining_steps - 1) + count_ways_to_climb(remaining_steps - 2)\n            return ways_cache[remaining_steps]\n\n    # Calculate the number of different ways Nelson can climb the remaining steps.\n    ans = count_ways_to_climb(10)\n    \n    return ans\n\nans = solution()"
    ],
    "40bc621de9c14774a192faa5c08aa4c1": [
        "def solution():\n    time_for_2_pancakes = 3  # time to cook 2 pancakes in minutes\n    total_time = 12  # total time in minutes\n\n    pancakes_per_minute = 2 / time_for_2_pancakes\n\n    total_pancakes = pancakes_per_minute * total_time\n\n    return int(total_pancakes)\n\nans = solution()"
    ],
    "e861bb32b7d547039e6ce80de36833a5": [
        "def solution():\n    sale_price = 48\n    reduction_fraction = 1/5\n    original_price = sale_price / (1 - reduction_fraction)\n    return original_price\n\nans = solution()"
    ],
    "42d848249dd041fd9a59aba42cf09b4e": [
        "def solution():\n    total_road = 500\n    total_days = 5\n\n    meters_per_day = total_road / total_days\n\n    return meters_per_day\n\nans = solution()"
    ],
    "04f3463bdfd44e64844f13c3d9c4e55e": [
        "def solution():\n    countries = 18\n    people_same_country = 9\n\n    # To ensure 9 people come from the same country, we need 1 more than\n    # 8 people from each of the 18 countries (worst case scenario before someone breaks the 9 people threshold).\n    total_participants = (people_same_country - 1) * countries + 1\n\n    return total_participants\n\nans = solution()"
    ],
    "14775f177c0c4183a67b4ef46483248b": [
        "def solution():\n    # Time taken individually by each person\n    jason = chi_yew = 5  # Jason and Chi Yew have the same time\n    wei_jie = 9\n    michael = 7\n\n    # Strategy:\n    # 1. Jason and Chi Yew are the fastest, so they should be the ones to row back the boat\n    # 2. Send the two slowest first, as their max time will overlap\n    # 3. The fastest comes back\n    # 4. The two fastest go together\n    # 5. The fastest comes back again\n    # 6. The fastest go with the second slowest\n    # Calculate the time according to this strategy\n\n    # Step 2\n    time = wei_jie\n    # Step 3\n    time += jason\n    # Step 4\n    time += jason\n    # Step 5\n    time += jason\n    # Step 6\n    time += michael\n    \n    return time\n\nans = solution()"
    ],
    "374b823fc9994ac6839b73f73220b2fc": [
        "def solution():\n    # The sum of an arithmetic sequence is given by the formula:\n    # sum = n/2 * (first_term + last_term)\n    # We know n = 53 (number of terms)\n    # We know sum = 2014\n    # We need to find the last term, let's denote it as 'last'\n    \n    # From the formula we can express the first term in terms of the last term:\n    # 2014 = 53/2 * (first + last)\n    # first = (2 * 2014 / 53) - last\n    # But we know that the terms are consecutive integers, so the difference between first and last is (n-1)\n    # Hence, last - first = 53 - 1 = 52\n    \n    # Substituting 'first' from the above expression, we get:\n    # last - [(2 * 2014 / 53) - last] = 52\n    # 2 * last = 52 + (2 * 2014 / 53)\n    # last = (52 + (2 * 2014 / 53)) / 2\n    # last = 26 + (2014 / 53)\n    # last = 26 + 38 (since 2014 divided by 53 is 38)\n    last = 26 + 38\n    \n    return last\n\nans = solution()"
    ],
    "d4be2c4b031f4b75b58c52a082b67c92": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A = symbols('A')\n    incorrect_calculation = Eq(88 / A, 22)\n    A_value = solve(incorrect_calculation, A)[0]\n    \n    correct_answer = 98 / A_value\n    \n    return A_value, correct_answer\n\nans = solution()"
    ],
    "17c7cc140d594f18884947838501f76d": [
        "def solution():\n    cost_of_four = 32\n    cost_of_one = cost_of_four / 4\n    cost_of_twelve = cost_of_one * 12\n    \n    return cost_of_twelve\n\nans = solution()"
    ],
    "a50d4aad678545d8ad403f9ee6aef9cb": [
        "def solution():\n    lucas_time_per_lap = 6 / 5  # Lucas's time to complete one lap\n    miller_time_per_lap = 10 / 5  # Miller's time to complete one lap\n\n    # find the time for Lucas to complete one more lap than Miller\n    # This will be the time difference between Lucas's and Miller's lap completion rates\n    time_until_lucas_overtakes_once = (lucas_time_per_lap * miller_time_per_lap) / (miller_time_per_lap - lucas_time_per_lap)\n\n    # Lucas will overtake Miller the second time after he overtakes for the first time by the same time period\n    return time_until_lucas_overtakes_once\n\nans = solution()"
    ],
    "6e28fbe858694127965a423b5827545f": [
        "def solution():\n    # When rounded to the nearest $10, if the original amount is $X,\n    # and the rounded amount is $1670, then 1665 <= X < 1675.\n    # The greatest amount she could have saved is one cent less than 1675.\n    greatest_amount = 1675 - 0.01\n    return greatest_amount\n\nans = solution()"
    ],
    "08f295cae61b452781fe8880031bedb9": [
        "def solution():\n    return 956 * 78\n\nans = solution()"
    ],
    "42304a89be8248ce998d0790579451c5": [
        "def solution():\n    return 345 * 6\n\nans = solution()"
    ],
    "97e34217530f47f198915d7380bfbd2d": [
        "def solution():\n    dividend = 5217\n    divisor = 13\n    remainder = dividend % divisor\n    return remainder\n\nans = solution()"
    ],
    "62bcd683923a4c13a327d9e35f3b2302": [
        "def solution():\n    hours = 2 + 1/2\n    minutes_per_hour = 60\n    total_minutes = hours * minutes_per_hour\n    return int(total_minutes)\n\nans = solution()"
    ],
    "87766ec0f15a4f82a63df69a587cfef4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_visitors = symbols('total_visitors')\n\n    children = (3/5) * total_visitors\n    remaining = total_visitors - children\n    men = (1/4) * remaining\n    equation = Eq(children, men + 120)\n\n    visitors_at_fair = solve(equation, total_visitors)\n\n    return visitors_at_fair[0]\n\nans = solution()"
    ],
    "b8e19c913d8d4ff69e6cd9698f1eb368": [
        "def solution():\n    base_rate = 80  # cents\n    additional_rate = 5  # cents\n    total_cost = 140 # cents\n    base_minutes = 15\n    additional_minutes = (total_cost - base_rate) / additional_rate\n    total_minutes = base_minutes + additional_minutes\n    return total_minutes\n\nans = solution()"
    ],
    "cd9aa54c79074ee2aa4aad035a1be624": [
        "def solution():\n    tim_age_now = 8\n    years_until_tim_is_mother_age = 54 - tim_age_now\n    mother_age_now = tim_age_now + years_until_tim_is_mother_age\n    return mother_age_now\n\nans = solution()"
    ],
    "41b46512b7bf48eebc8468c2eb001314": [
        "def solution():\n    orange_length_m = 5.52  # in meters\n    orange_purple_ratio = 9.2\n    green_purple_difference_cm = 24.9  # in centimeters\n\n    # First, find purple string length in meters\n    purple_length_m = orange_length_m / orange_purple_ratio\n\n    # Convert the difference from cm to m\n    green_purple_difference_m = green_purple_difference_cm / 100\n\n    # Now, calculate green string length (also in meters)\n    green_length_m = purple_length_m + green_purple_difference_m\n\n    return green_length_m\n\nans = solution()"
    ],
    "c513a3033f3749eebdae943a22fb537a": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define symbols\n    A = symbols('A')\n\n    # The statement of the puzzle implies the following equations (for example if A = 1):\n    # 1 + AA (+ A above) = 1AA\n    # AA + A (+ A above) = 1AA\n    # These simplify to the equation:\n    # 11A + A + A = 110 + A or 11A + 2A = 110 + A\n    equation = Eq(11 * A + 2 * A, 110 + A)\n    \n    # Solving the equation\n    solution = solve(equation, A)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c1962524dabf4b3da31b4f37827a030a": [
        "def solution():\n    count = 0\n    for number in range(1, 100):\n        if number % 2 == 0 and number % 5 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "4b76c5a5fefd4d379198d89518cf1797": [
        "def solution():\n    # Ivy's work rate per day\n    ivy_rate = 1 / 24\n    # Kevin's work rate per day\n    kevin_rate = 1 / 20\n\n    # Total work done by Ivy in 18 days\n    ivy_work = ivy_rate * 18\n\n    # Let x be the number of days Kevin takes off\n    # Total work done by Kevin\n    kevin_work = kevin_rate * (18 - x)\n\n    # The equation representing the total work done when the job is finished\n    # Ivy's work + Kevin's work = 1 job\n    # We solve for x which is the number of days Kevin takes off\n    x = (1 - ivy_work) / kevin_rate\n\n    return x\n\nans = solution()"
    ],
    "f88e8811450e4f85937e81e850e2d300": [
        "def solution():\n    # Rounded to the nearest $10 means the actual amount could be $5 less or $4 more than the rounded amount\n    rounded_amount = 1670\n    # The greatest amount of money she could have saved is $4 more than the rounded amount\n    greatest_amount = rounded_amount + 4\n    \n    return greatest_amount\n\nans = solution()"
    ],
    "aefe4b1d258c455f852061413286ec4b": [
        "def solution():\n    total_ratio = 4 + 5\n    total_litres = 36\n    apple_juice_ratio = 4\n\n    apple_juice_litres = (apple_juice_ratio / total_ratio) * total_litres\n\n    return apple_juice_litres\n\nans = solution()"
    ],
    "4dedeb8bed9343319dda8177873725fd": [
        "def solution():\n    # Let x be the total number of pupils normally at school\n    # Normally, 20% are in Year 7, so there are 0.20 * x Year 7 pupils\n    # One day, the number of pupils left at school is 400, and 10% are in Year 7\n    # Therefore, 0.20 * x - (0.20 * x - 0.10 * 400) pupils are missing for the sports match\n    # This is also equal to the difference between 20% of x and 10% of 400 (40), i.e., the number of Year 7 pupils missing\n\n    # We set up the equation:\n    # 400 = x - (0.20 * x - 40)\n    # 400 = x - 0.20x + 40\n    x = Symbol('x')\n    eq = Eq(400, x - 0.20 * x + 40)\n\n    # Solve for x to find the total number of pupils normally at school\n    total_pupils = solve(eq, x)\n\n    return total_pupils[0]\n\nans = solution()"
    ],
    "184683893a1a450fb55ccb18cf570233": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    length1, length2 = symbols('length1 length2')\n    \n    equation1 = Eq(length1 + length2, 49.5)\n    equation2 = Eq(length1, 5 * length2)\n\n    solutions = solve((equation1, equation2), (length1, length2))\n\n    longer_length = round(solutions[length1], 1)\n\n    return longer_length\n\nans = solution()"
    ],
    "e4d3c043d1fb45078d416e3b70973037": [
        "def solution():\n    total_distance = 25\n    distance_per_day = 4\n    slide_per_night = 1\n    distance_climbed = 0\n    day = 0\n\n    while distance_climbed < total_distance:\n        day += 1\n        distance_climbed += distance_per_day\n        if distance_climbed >= total_distance:\n            break\n        distance_climbed -= slide_per_night\n    \n    return day\n\nans = solution()"
    ],
    "4a9d0a7ecc6a4d7b8a4bf5f49ac3f034": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 't' be the time it takes for Tim to complete the book by himself\n    t = symbols('t')\n\n    # Nancy's rate of working is 1/6 book per day\n    nancy_rate = 1 / 6\n\n    # Tim's rate of working is 1/t book per day\n    tim_rate = 1 / t\n\n    # Together their combined rate is 1/4 book per day since they can complete it in 4 days\n    combined_rate = 1 / 4\n\n    # The equation that represents the situation is: Nancy's rate + Tim's rate = Combined rate\n    equation = Eq(nancy_rate + tim_rate, combined_rate)\n\n    # Solve for 't'\n    solutions = solve(equation, t)\n    return solutions[0]\n\nans = solution()"
    ],
    "04cf5bf4ba704663af7e01b1fc0bebfa": [
        "def solution():\n    initial_money = 100\n    days = 15\n    deposit_amount = 5\n    spend_amount = 8\n\n    cycle_days = 2  # Deposit and spend happen in a 2-day cycle\n    full_cycles = days // cycle_days\n    remaining_days = days % cycle_days\n\n    # Complete cycle calculations\n    balance_after_full_cycles = initial_money + (deposit_amount - spend_amount) * full_cycles\n\n    # Remaining day calculations\n    if remaining_days:\n        balance_after_full_cycles += deposit_amount  # Only deposit happens on the 15th day\n\n    return balance_after_full_cycles\n\nans = solution()"
    ],
    "0a38ebf245ee4048babeb982de7ed428": [
        "def solution():\n    number = int(\"3\" * 12)\n    remainder = number % 7\n    return remainder\n\nans = solution()"
    ],
    "a9c71626af834229920858670d8deb58": [
        "def solution():\n    ans = 32.4 * 20\n    return ans\n\nans = solution()"
    ],
    "c4e5b60db727448e994c386475bbe6ac": [
        "def solution():\n    num = 1\n    sum_fraction = 0\n    prev_denom = 1\n    while True:     \n        current = num * (num + 1)\n        sum_fraction += num / (prev_denom * current)\n        prev_denom = num + prev_denom\n        if num == 6:\n            break            \n        num += 1\n\n    # Add the last term of the sequence separately   \n    sum_fraction += 1 / prev_denom\n\n    return sum_fraction\n\nans = solution()"
    ],
    "8b3d2426e47742fb80de5edfc5c95b39": [
        "def solution():\n    remaining_after_dress = 40 / (2/5)\n    initial_amount = remaining_after_dress / (2/3)\n    return initial_amount\n\nans = solution()"
    ],
    "c837716e3d8d4f158df0c801a3ba58fc": [
        "from math import factorial\n\ndef solution():\n    def count_trailing_zeros(n):\n        count = 0\n        i = 5\n        while n // i >= 1:\n            count += n // i\n            i *= 5\n        return count\n    \n    zeros_in_999 = count_trailing_zeros(999)\n    zeros_in_300 = count_trailing_zeros(300)\n    \n    ans = zeros_in_999 - zeros_in_300\n    return ans\n\nans = solution()"
    ],
    "bb8f428d14394c4988e5515d435ac635": [
        "def solution():\n    ans = 198 + 298 + 398 + 498\n    return ans\n\nans = solution()"
    ],
    "608b695eba534dd0b83d2b27d7e435ab": [
        "def solution():\n    a, b = 10, 9\n    result = 4 * a + 0.6 * b\n    return result\n\nans = solution()"
    ],
    "6ea9279809514a5d9fa706e9c64edc86": [
        "def solution():\n    height = 31\n    jump_up = 3\n    fall_down = 2\n    effective_jump = jump_up - fall_down\n\n    # Since the squirrel falls down after every 3 jumps, we have to consider this.\n    # The squirrel reaches 3*(jump_up) - 2*(fall_down) height after each cycle of 3 jumps.\n\n    # Calculate the number of full cycles (of 3 jumps) needed to reach close to the top, discounting the final jump.\n    cycles = (height - jump_up) // effective_jump\n\n    # Calculate the total height achieved after those cycles.\n    height_after_cycles = cycles * effective_jump\n\n    # Calculate the remaining height the squirrel needs to jump after the cycles.\n    remaining_height = height - height_after_cycles\n\n    # The number of jumps needed.\n    jumps = cycles * 3  # Three jumps per cycle\n\n    # If there's any remaining height that needs less than 3 jumps, we add that to the total number of jumps.\n    if remaining_height > 0:\n        jumps += (remaining_height + (jump_up - 1)) // jump_up\n\n    return jumps\n\nans = solution()"
    ],
    "05662ab12b7a42d08cb4ed68f2868599": [
        "def solution():\n    # The outermost layer of the square has 60 students.\n    # Since a square has four sides, and the corners are counted on two sides,\n    # we subtract the 4 corner students to avoid counting them twice.\n    outer_students = 60 - 4  # Students on the outer layer, not counting corners\n    \n    # Each side of the square has (outer_students / 4) + 1 students (including corners).\n    side_length = (outer_students // 4) + 1\n    \n    # Total number of students is the square of the side length.\n    total_students = side_length ** 2\n\n    return total_students\n\nans = solution()"
    ],
    "b3775d03019b4cdcb4930d45861d8841": [
        "def solution():\n    total_quantity = 36\n    ratio_apple = 4\n    ratio_orange = 5\n    total_ratio = ratio_apple + ratio_orange\n\n    apple_juice = (total_quantity * ratio_apple) / total_ratio\n\n    return apple_juice\n\nans = solution()"
    ],
    "564dba708ca745b9b0b4d8a734001762": [
        "def solution():\n    first_term = 2\n    last_term = 42\n    difference = 4\n\n    num_terms = ((last_term - first_term) / difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "b7dd6767772245f2a0cb23c299ebb8cc": [
        "def solution():\n    ans = 18 * 20132013 - 2013 * 180018\n    return ans\n\nans = solution()"
    ],
    "5a93f9e1eb9e4c528f6c8a07e299ea6a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of buttons in box B at first be b\n    b = symbols('b')\n\n    # There were 64 more buttons in box A than box B at first\n    a = b + 64\n\n    # Ken removed 2 buttons from box B for every 1 button he added to box A\n    # The number of buttons in box B became 28 fewer than before\n    # Therefore, the decrease in box B's buttons is 28, and the added amount to A is this decrease divided by 2\n    removed_b = 28\n    added_a = removed_b / 2\n\n    # New amount of buttons in box A and box B after the operation\n    new_a = a + added_a\n    new_b = b - removed_b\n\n    # Ratio of the total number of buttons to the number of buttons left in box B is 4:1\n    ratio_eq = Eq((new_a + new_b) / new_b, 4)\n\n    # Solve the system of equations\n    solution_dict = solve((ratio_eq,), (b,))\n\n    # Calculate initial number of buttons in box A using the value of b obtained\n    initial_a = solution_dict[b] + 64\n\n    return initial_a\n\nans = solution()"
    ],
    "f5cbd8c2b99c4ff8b9a9ff2d867ac03e": [
        "def solution():\n    result = 764 * 7\n    return result\n\nans = solution()"
    ],
    "5d7205c22e4740dd84e7bc08f1cd9a65": [
        "def solution():\n    total_won_cards = 24\n    total_rounds = 12\n    win_card_gain = 4\n    lose_card_loss = 2\n\n    # Let the number of losses be x\n    # Then the number of wins is total_rounds - x\n    # We know that (total_rounds - x) * win_card_gain - x * lose_card_loss = total_won_cards\n    # Solving for x we get:\n    x = symbols('x')\n    equation = Eq((total_rounds - x) * win_card_gain - x * lose_card_loss, total_won_cards)\n    answer = solve(equation, x)\n    \n    return answer[0]\n\nans = solution()"
    ],
    "4cf1f3c8353c42d48e99e5d8f388a57b": [
        "def solution():\n    boulevard_length = 300\n    interval = 10\n\n    # Number of intervals is one less than the number of bins since bins are also on both ends\n    num_intervals = boulevard_length // interval\n\n    # The number of bins is one more than the number of intervals\n    num_bins = num_intervals + 1\n\n    return num_bins\n\nans = solution()"
    ],
    "9f759ca5b84e4722b43ef86e4d6a402e": [
        "def solution():\n    flour_per_cake = 326\n    num_cakes = 112\n\n    total_flour = flour_per_cake * num_cakes\n\n    return total_flour\n\nans = solution()"
    ],
    "292d7aaf42294c3a913c5cd11bf66c14": [
        "def solution():\n    coins = [20, 19, 18]\n    rounds = 0\n    while all(c > 0 for c in coins):\n        coins.sort()\n        coins[2] -= 2\n        coins[1] += 1\n        coins[0] += 1\n        rounds += 1\n    \n    return rounds\n\nans = solution()"
    ],
    "9dfbbfcf5edf458aa1a6122065492810": [
        "def solution():\n    # The number can be represented as 26*(10**(4n+1)) + (2011*(10**4 - 1)/999)*(10**1) + 7\n    # where n is the number of times 2011 is repeated\n    # Since we want the number to be divisible by 33, both parts must be divisible by 3 and 11\n\n    # A number is divisible by 3 if the sum of its digits is divisible by 3\n    # A number is divisible by 11 if the difference between the sum of the digits in the odd positions and the sum of the digits in the even positions is divisible by 11\n    \n    # Starting value for n\n    n = 0\n    while True:\n        # Form the number as a string\n        number_str = '26' + '2011' * n + '7'\n        # Check divisibility by 3\n        if sum(int(digit) for digit in number_str) % 3 != 0:\n            n += 1\n            continue\n        \n        # Check divisibility by 11\n        odd_sum = sum(int(number_str[i]) for i in range(0, len(number_str), 2))\n        even_sum = sum(int(number_str[i]) for i in range(1, len(number_str), 2))\n\n        if (odd_sum - even_sum) % 11 == 0:\n            break\n        n += 1\n        \n    return n\n\nans = solution()"
    ],
    "3795aecee78f4af494bcf5420bcf0bb2": [
        "def solution():\n    time_per_cut = 3 / (4 - 1)\n    number_of_cuts_needed = 8 - 1\n    total_time = time_per_cut * number_of_cuts_needed\n    return total_time\n\nans = solution()"
    ],
    "f22dbe753e484186ac547d34fa2ff25b": [
        "def solution():\n    ans = 2.7 * 3.9\n    return ans\n\nans = solution()"
    ],
    "241c2dd43db940409e5ad15ed39d57aa": [
        "def solution():\n    count = 0\n    # Iterate over the number of lollipops in the first and second plate\n    # The third plate's count will be determined automatically\n    for x1 in range(8):  # x1 can be from 0 to 7\n        for x2 in range(8):  # x2 can be from 0 to 7\n            x3 = 7 - x1 - x2 \n            # Ensure non-negative lollipops for the third plate\n            if x3 >= 0:\n                count += 1\n    # As plates are identical, we divide the count by the factorial of the number of plates\n    # to account for permutations of the plates with the same lollipop distribution.\n    ans = count // 6  # because 3! (factorial of 3) is equal to 6\n    return ans\n\nans = solution()"
    ],
    "b13b087d91c3418cab75e734f729a72f": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n\n    # Rasidah had $48 less than Chai Seng.\n    equation1 = Eq(rasidah, chai_seng - 48)\n\n    # Rasidah spent 3/5 of her money. (2/5 left)\n    equation2 = Eq(rasidah * 2/5, chai_seng * 1/2)\n\n    # Chai Seng spent 6/7 of his money. (1/7 left)\n    equation3 = Eq(chai_seng * 1/7, rasidah * 2/5)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (rasidah, chai_seng))\n\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "94aea93a419044dfa74eed60bd70bafa": [
        "def solution():\n    initial_cards = 236\n    duplicates = 57\n    new_cards = 34\n\n    final_count = (initial_cards - duplicates) + new_cards\n    return final_count\n\nans = solution()"
    ],
    "2c22df9d95b44b4db50520cf03c17839": [
        "def solution():\n    # Initialize number of tiles and layer\n    total_tiles = 400\n    layer = 1\n    red_tiles = 0\n    green_tiles = 0\n    \n    while total_tiles > 0:\n        # Calculate the number of tiles in the current layer (4 sides times current layer minus 4 corners already counted)\n        tiles_in_layer = 4 * layer - 4\n        # If the tiles in the layer exceed remaining tiles, adjust to use only the remaining tiles\n        if tiles_in_layer > total_tiles:\n            tiles_in_layer = total_tiles\n        \n        # Check if the layer is odd (red) or even (green)\n        if layer % 2 == 1:\n            red_tiles += tiles_in_layer\n        else:\n            green_tiles += tiles_in_layer\n        \n        # Subtract the number of tiles used in this layer from the total and increment the layer\n        total_tiles -= tiles_in_layer\n        layer += 1\n    \n    if red_tiles > green_tiles:\n        color = 'Red'\n        difference = red_tiles - green_tiles\n    else:\n        color = 'Green'\n        difference = green_tiles - red_tiles\n    \n    return (color, difference)\n\nans = solution()"
    ],
    "9151e126e4304a27988564dbee6d682a": [
        "from math import factorial\n\ndef solution():\n    total_people = 8\n    people_together = 2\n\n    # Treat Amy and Judy as one person, so we have 7 \"people\" to arrange\n    arrangements_for_7 = factorial(total_people - people_together)\n\n    # Amy and Judy can switch places, so multiply by 2\n    arrangements_for_amy_judy = factorial(people_together)\n\n    # Since the table is circular, we divide by the number of seats to account for rotations\n    ans = (arrangements_for_7 * arrangements_for_amy_judy) // total_people\n    \n    return ans\n\nans = solution()"
    ],
    "2a6e8406868b4590b821325ac25f87f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Andy's and Ben's initial number of cookies\n    andy_initial, ben_initial = symbols('andy_initial ben_initial')\n\n    # Create the equation based on the problem statement\n    # Andy had 84 fewer cookies than Ben\n    equation1 = Eq(andy_initial, ben_initial - 84)\n\n    # Andy bought 1/3 more cookies, Ben bought 1/5 more cookies\n    andy_final = andy_initial + andy_initial / 3\n    ben_final = ben_initial + ben_initial / 5\n\n    # Andy had 1/3 as many cookies as Ben in the end\n    equation2 = Eq(andy_final, ben_final / 3)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (andy_initial, ben_initial))\n\n    # Calculate the final number of cookies Andy had\n    andy_end = solutions[andy_initial] + solutions[andy_initial] / 3\n\n    return andy_end\n\nans = solution()"
    ],
    "4f4e10b41d3540d6a2739c9860f76327": [
        "def solution():\n    total_rounds = 12\n    total_won_cards = 24\n    cards_per_win = 4\n    cards_per_loss = -2\n\n    for wins in range(total_rounds + 1):\n        losses = total_rounds - wins\n        if wins * cards_per_win + losses * cards_per_loss == total_won_cards:\n            return losses\n\nans = solution()"
    ],
    "c59949dfd8964b7c95155bd81b7b9c07": [
        "def solution():\n    principal = 35000\n    final_amount = 37100\n    interest_rate = 0.015\n    years_claimed = 5\n\n    # Calculate the amount using compound interest formula for each year until it reaches or exceeds the final amount\n    years_actual = 0\n    current_amount = principal\n    \n    while current_amount < final_amount:\n        current_amount += current_amount * interest_rate\n        years_actual += 1\n\n    return years_claimed == years_actual, years_actual\n\nans = solution()"
    ],
    "237973530d60417cbab4c373e76cf50a": [
        "from math import gcd\n\ndef solution():\n    pencils = 56\n    pens = 60\n    max_students = gcd(pencils, pens)\n    return max_students\n\nans = solution()"
    ],
    "057332102b164fd582fffc07825bb51c": [
        "def solution():\n    ways = 0\n    # Iterate through possible numbers of lollipops on the first plate\n    for first_plate in range(0, 8):\n        # Since the plates are identical, we start the second plate with\n        # the same number of lollipops as on the first to avoid repeats\n        for second_plate in range(first_plate, 8):\n            # Calculate lollipops on the third plate\n            third_plate = 7 - first_plate - second_plate\n            # Since the third plate can have lollipops equal or more than\n            # second plate (to avoid repeats due to identical plates),\n            # we only count ways where third_plate >= second_plate\n            if third_plate >= second_plate:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "73d5e9762ad24f7fa6f2d7569f186b42": [
        "def solution():\n    # Since Tom raised his hand both times, his number must be divisible by 24.\n    # That also means the number Mr. Tan wrote must be a factor of 24,\n    # otherwise Tom couldn't have been sure both times.\n  \n    # Possible factors of 24 are: 1, 2, 3, 4, 6, 8, 12, 24. The factor can't be 1.\n    # If the factor were 2 or 3, all students with even numbers or divisible by 3\n    # would have raised their hands the first time, which is unlikely to be exactly 4 students.\n    # The largest possible two-digit number divisible by 24 is 96 (24*4), so it cannot be 24.\n    # If the factor were 24, Tom could not be certain his number was divisible\n    # by it upon the first question, because he wouldn't know if his own number was a two-digit multiple of 24 (24, 48, 72, 96).\n    # The same logic applies for 12 - more students would have raised their hands the first time.\n    # Hence, the factor is likely 4, 6, or 8. Let's take the smallest prime, 4.\n\n    # Possible two-digit multiples of 24 (the possible numbers Tom could have)\n    # are 24, 48, 72, 96. As 24 is not a two-digit number, the possible numbers\n    # are 48, 72, 96. Since Tom's friends have different numbers and all can see Tom's hat,\n    # none of Tom's friends could have a number that is multiple of 24; otherwise,\n    # they wouldn't be able to determine their divisibility status by 24 just by seeing Tom's number.\n\n    # Let's consider all two-digit numbers that are not divisible by 24\n    # These will be the numbers on the hats of Tom's friends\n    friends_numbers = [i for i in range(10, 100) if i % 24 != 0]\n\n    # Now let's sum up these numbers\n    sum_friends_numbers = sum(friends_numbers)\n    # But we must subtract Tom's number, which we assumed to be divisible by 24 (48, 72, or 96)\n    # We choose the smallest possible to maximize the sum of the friends' numbers.\n    tom_number = 48\n\n    return sum_friends_numbers - tom_number\n\nans = solution()"
    ],
    "f4a501507e754c76bc20c97fd6f8faa9": [
        "def solution():\n    sign = 1  # Start with positive sign\n    current = 18  # First number in the sequence\n    while True:\n        current += sign  # Add the sign to the current number\n        sign *= -1  # Flip the sign for the next number\n        if current == 20:  # Check if the current number is the last known in the sequence\n            break\n    # Once we have reached the last known number, calculate the next number\n    n = current + sign\n    return n\n\nans = solution()"
    ],
    "e3bab1d410dc404dbc75f29bc60577f7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Andy's initial cookies and Ben's initial cookies.\n    andy_initial, ben_initial = symbols('andy_initial ben_initial')\n\n    # Set up the equations based on the problem statement.\n    # Andy had 84 fewer cookies than Ben at first.\n    equation1 = Eq(andy_initial, ben_initial - 84)\n    # After buying more cookies\n    # Andy had 1/3 more, which is andy_initial + andy_initial/3\n    # Ben had 1/5 more, which is ben_initial + ben_initial/5\n    # Andy had 1/3 as many cookies as Ben in the end.\n    equation2 = Eq(andy_initial + andy_initial/3, (ben_initial + ben_initial/5) / 3)\n\n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (andy_initial, ben_initial))\n\n    # Calculate the end amount of cookies for Andy\n    andy_end = solutions[andy_initial] + solutions[andy_initial]/3\n\n    return andy_end\n\nans = solution()"
    ],
    "2c1f33a3652843e18c61ed4042aa9d84": [
        "def solution():\n    total_students = 43\n    passed_math = 30\n    passed_science = 28\n    passed_english = 25\n    total_passed_one = passed_math + passed_science + passed_english\n\n    if total_passed_one - total_students <= 0:\n        return 0\n    \n    max_passed_all_three = total_passed_one - total_students\n    return max_passed_all_three\n\nans = solution()"
    ],
    "d19c1cad2e934abcb96adf33ea0fad9b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    distance = symbols('distance')\n    \n    # Ahmad's speed is 80 meters per minute\n    ahmad_speed = 80\n    # Younger brother's speed is 50 meters per minute\n    brother_speed = 50\n    \n    # Equation: Ahmad's travel time to school and back to meeting point equals\n    # Brother's travel time to the meeting point\n    # Ahmad's time is distance/ahmad_speed + (distance-210)/ahmad_speed\n    # Brother's time is (distance-210)/brother_speed\n    time_eq = Eq(distance/ahmad_speed + (distance-210)/ahmad_speed, (distance-210)/brother_speed)\n    \n    solution = solve(time_eq, distance)\n    \n    # We assume the distance to be positive\n    return max(solution)\n\nans = solution()"
    ],
    "f037a02a789f4f3a9d9393741e8484d5": [
        "def solution():\n    # If four numbers are a < b < c < d\n    # According to the first condition, we have: a + (b + c + d) / 3 = 39\n    # Which can be simplified to: a + b + c + d = 39 * 3\n    sum_all = 39 * 3\n\n    # According to the second condition, we have: d + (a + b + c) / 3 = 51\n    # Which can be simplified to: a + b + c + d = 51 * 3\n    # So, we have sum_all equals to both 39 * 3 and 51 * 3, which leads to: \n    # 39 * 3 = 51 * 3\n    # This is impossible and suggests we missed the condition that the numbers are distinct\n    # So we adjust our equation with the distinct condition\n\n    # From the above equations, we also establish that the sum of the other three numbers would be the same in both cases, since:\n    # (a + b + c + d) - a = (a + b + c + d) - d\n    # So (b + c + d) must equal (a + b + c), and thus a = d\n\n    # However, since the numbers are distinct, we come to a contradiction in terms of what the problem describes.\n    # Therefore, we must consider that previously we divided the sum of three numbers by three to get the average, which was incorrect\n    # The correct approach is that each statement gives us the sum of all four numbers with one of them multiplied by 2 \n    # (since we count it one time as part of the sum of all four and one more time when we take an average of three)\n    # So we have two equations:\n    # a + b + c + 2d = 51 * 4\n    # 2a + b + c + d = 39 * 4\n\n    # Let's solve these equations:\n    sum_with_largest = 51 * 4\n    sum_with_smallest = 39 * 4\n    \n    # Let's express 'd' and 'a' in terms of 'sum_all':\n    d = (sum_with_largest - sum_all) / 2\n    a = (sum_with_smallest - sum_all) / 2\n    \n    # The largest possible value of the largest number would maximize 'd', which happens when 'a' is as small as possible\n    # Since 'a' is a positive whole number, the smallest it can be is 1\n    # Plugging this smallest 'a' value into the equation to find the largest 'd':\n    a = 1\n    d = (sum_with_largest - sum_all) / 2 - a\n    \n    return int(d)\n\nans = solution()"
    ],
    "303367dad74a4dfb9a731577b950143b": [
        "def solution():\n    # Since the pencil cases cannot be empty, we start by placing one pen in each case.\n    # We're then left with 3 pens to distribute.\n    pens_left = 6 - 3\n\n    # We have 3 pencil cases, which means there are 2 partitions that separate them.\n    partitions = 2\n\n    # Now the problem reduces to finding the number of ways to distribute 3 indistinguishable items\n    # into 3 distinguishable boxes, which is like finding the number of solutions to the equation\n    # x1 + x2 + x3 = 3, where x1, x2, x3 >= 0.\n    # This is equivalent to the problem of finding the number of ways to arrange 3 pens and 2 partitions,\n    # which is given by the formula for combinations with repetition:\n    # (pens_left + partitions) choose (pens_left)\n    # which is C(3+2,3).\n    \n    from math import comb\n    ways = comb(pens_left + partitions, pens_left)\n\n    return ways\n\nans = solution()"
    ],
    "70234dd3b3ad4df4976b94f3fc2b43b6": [
        "def solution():\n    num1 = (1/30) + (1/6)\n    den1 = 2/25\n    num2 = 2 - (2/3)\n    den2 = 8/3\n\n    ans = (num1 / den1) + (num2 / den2)\n\n    return ans\n\nans = solution()"
    ],
    "f5859830704a437f8da45cb32fad686c": [
        "def solution():\n    number = 8844\n    first_eight = 8 * 1000\n    second_eight = 8 * 10\n    difference = first_eight - second_eight\n    return difference\n\nans = solution()"
    ],
    "a1813c83d15f4f918bb921475c77ae6b": [
        "def solution():\n    max_palindrome = 0\n    min_palindrome = 99999\n    \n    for i in range(999, 99, -1):\n        palindrome = int(str(i) + str(i)[-2::-1])  # Constructing the palindrome\n        if palindrome % 45 == 0:\n            if palindrome > max_palindrome:\n                max_palindrome = palindrome\n            if palindrome < min_palindrome:\n                min_palindrome = palindrome\n                \n    return max_palindrome - min_palindrome\n\nans = solution()"
    ],
    "a8da05a870cb4d889d878067168a25f3": [
        "def solution():\n    for A in range(10):\n        if (int(f\"572{A}\") % 4 == 0) and (int(f\"572{A}\") % 5 == 0):\n            return A\n\nans = solution()"
    ],
    "8730c5dc402e4057a7e7d6856f461142": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Step 1: Find the common supplement (the remainders are used directly here)\n    remainders = (1, 2, 7)\n    \n    # Step 2: Find the LCM of all the divisors\n    divisors = (5, 6, 11)\n    common_multiple = 5 * 6 * 11  # LCM since 5, 6, 11 are pairwise coprime\n    \n    # Step 3: The unknown = the common multiple of all the divisors - the common remainder\n    congruences = [(1, 5), (2, 6), (7, 11)]\n    _, common_remainder = solve_congruence(*congruences)\n    unknown = common_multiple - common_remainder\n    \n    # Ensure the biscuit count is less than 500\n    while unknown < 500:\n        biscuits = unknown\n        unknown += common_multiple\n    \n    return biscuits\n\nans = solution()"
    ],
    "5f74a8aa962b42f9a008f301d384a07d": [
        "def solution():\n    number = 40309\n    while True:\n        number += 1\n        if str(number) == str(number)[::-1]:\n            break\n    return number - 40309\n\nans = solution()"
    ],
    "00ada5e7f99244a19a9c65f66bf12fe4": [
        "def solution():\n    from math import gcd\n\n    length_a = 16\n    length_b = 24\n    longest_piece_length = gcd(length_a, length_b)\n\n    return longest_piece_length\n\nans = solution()"
    ],
    "27f205a241de4c258f0bfe079d7d85e0": [
        "def solution():\n    luna_position = 7\n    sheep_behind_luna = 4\n    \n    total_sheep = luna_position + sheep_behind_luna\n    return total_sheep\n\nans = solution()"
    ],
    "c5f435f6f01d47f984563502e879e7c1": [
        "def solution():\n    hourly_rate = 18\n    desired_earnings = 270\n    hours_needed = desired_earnings / hourly_rate\n    return hours_needed\n\nans = solution()"
    ],
    "306362839da448f6af25c3777e0f4fb8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_students = 10\n    top_students = 3\n    last_students = total_students - top_students\n    mean_top_students = 92\n    mean_all_students = symbols('mean_all_students')\n    \n    equation = Eq(mean_all_students * total_students, \n                  mean_top_students * top_students + (mean_all_students - 6) * last_students)\n    \n    mean_all_students_score = solve(equation, mean_all_students)[0]\n    return mean_all_students_score\n\nans = solution()"
    ],
    "6fd3dee61dd1454aba4ca3fdcb068b42": [
        "def solution():\n    ans = (36 + 8 * 4 - 8) / 10\n    return ans\n\nans = solution()"
    ],
    "15a26c7f348e44f0984ed5433abaeb4a": [
        "def solution():\n    for A in range(10):\n        number = int(f\"572{A}\")\n        if number % 4 == 0 and number % 5 == 0:\n            return A\n\nans = solution()"
    ],
    "692dd4bd8aad469b93929bfd3c53cde1": [
        "from itertools import combinations\n\ndef solution():\n    # The count of marbles in each bag\n    bags = [19, 21, 27, 32, 37, 40]\n    # Initialize the variable to count the number of red marbles\n    red_marbles = 0\n    \n    # Check all possible combinations of 3 bags that Jaslin could take\n    for combo in combinations(bags, 3):\n        # Sum the marbles in the three bags Jaslin takes\n        jaslin_count = sum(combo)\n        # The remaining bags after Jaslin has taken three\n        remaining_bags = [x for x in bags if x not in combo]\n        # Sum the marbles in the remaining bags for George\n        george_count = sum(remaining_bags)\n        # Check if Jaslin has twice as many marbles as George\n        if jaslin_count == 2 * george_count:\n            # The red marbles bag is the bag not taken by either Jaslin or George\n            total_marbles = sum(bags)\n            red_marbles = total_marbles - jaslin_count - george_count\n            break\n    \n    return red_marbles\n\nans = solution()"
    ],
    "102565a663954649adc3478cad3c899d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andre, beth = symbols('andre beth')\n\n    # Initially, Andre and Beth have a total of 24 sweets\n    equation1 = Eq(andre + beth, 24)\n\n    # After their teacher gave them 4 sweets each, \n    # Andre now has 6 sweets more than Beth\n    equation2 = Eq(andre + 4 - (beth + 4), 6)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (andre, beth))\n\n    # Beth's sweets after receiving 4 more\n    beth_sweets_now = solutions[beth] + 4\n\n    return beth_sweets_now\n\nans = solution()"
    ],
    "31ae45e446194415af930b6a32732592": [
        "def solution():\n    # Let the first term be x, then the consecutive even numbers are x, x+2, x+4, x+6, x+8\n    # The sum of five consecutive even numbers is 100\n    # x + (x+2) + (x+4) + (x+6) + (x+8) = 100\n    # 5x + 20 = 100\n    # 5x = 80\n    # x = 16\n    # The smallest number is 16\n    return 16\n\nans = solution()"
    ],
    "96bf00410c5d499991e067f6eac1c2fb": [
        "def solution():\n    distance = 550\n    time_taken = 5\n    speed = distance / time_taken\n    travel_time = 3\n    distance_travelled = speed * travel_time\n    return distance_travelled\n\nans = solution()"
    ],
    "932e3588f77946a58e948ab41abb1c9f": [
        "def solution():\n    remaining_apples = 150\n    fraction_sold = 2/5\n    fraction_remaining = 1 - fraction_sold\n\n    total_apples = remaining_apples / fraction_remaining\n    return int(total_apples)\n\nans = solution()"
    ],
    "dd7ef81126644ff58215f822282cae06": [
        "from math import lcm\n\ndef solution():\n    ans = lcm(1, 2, 3, 4, 5)\n    return ans\n\nans = solution()"
    ],
    "123966a82052442699a9217c1798213b": [
        "def solution():\n    # Number of gaps between posts is one less than the number of posts\n    num_gaps = 15 - 1\n    \n    # Each gap is 3 inches long\n    jump_length = 3\n    \n    # The total distance is the number of gaps times the jump length\n    total_distance = num_gaps * jump_length\n    \n    return total_distance\n\nans = solution()"
    ],
    "7c976da5c8314e559893fed4d2545dcc": [
        "def solution():\n    ans = 342 - (85 - 78) * 15\n    return ans\n\nans = solution()"
    ],
    "30fcda504e8d40b4aeaac401d2df58e4": [
        "def solution():\n    total_fruits = 18 + 30 + 36  # Total number of pears, strawberries and apples\n    friends = 6\n\n    fruits_per_friend = total_fruits / friends\n\n    return int(fruits_per_friend)\n\nans = solution()"
    ],
    "4e5a3868c9c2434595c65034ace0b292": [
        "from sympy import factorial\n\ndef count_even_permutations(num_blocks):\n    \"\"\"\n    Given a number of blocks of the same color, computes the number of even permutations for a pair of colors.\n    \"\"\"\n    total_permutations = factorial(2 * num_blocks) // (factorial(num_blocks) * 2**num_blocks)\n    # It's a catalan number (number of correctly matched parentheses for n pairs): C_n = (2n)! / ((n+1)!n!)\n    catalan_number = factorial(2 * (num_blocks - 1)) // (factorial(num_blocks) * factorial(num_blocks - 1))\n    return total_permutations - catalan_number\n\ndef gcd(a, b):\n    \"\"\"Compute the greatest common divisor of a and b.\"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\ndef solution():\n    num_colors = 6  # we have 6 colors (12/2)\n    total_even_permutations = count_even_permutations(num_colors)\n    \n    # Since we're dealing with all pairs between the same colors, we need to multiply by the\n    # factorial of the number of colors, which represents the permutations between different colors\n    total_even_permutations *= factorial(num_colors)\n    \n    # Total permutations of all blocks without restriction:\n    total_permutations = factorial(2 * num_colors)\n    \n    # The probability is the total even permutations divided by total permutations\n    prob = total_even_permutations / total_permutations\n    \n    # Simplify the fraction by finding the gcd\n    common_divisor = gcd(total_even_permutations, total_permutations)\n    m = total_even_permutations // common_divisor\n    n = total_permutations // common_divisor\n\n    # Return the sum of m and n\n    return m + n\n\nans = solution()"
    ],
    "2876f7ddaab14397976d9a29249f7fe2": [
        "def solution():\n    # Rates of inlets A and B\n    rate_a = 1 / 36\n    rate_b = 1 / 48\n\n    # Pattern sequence (A for 1 min, B for 2 min, A for 2 min, B for 1 min, ..., repeat)\n    pattern = [(1, rate_a), (2, rate_b), (2, rate_a), (1, rate_b)]\n    pattern_duration = sum(time for time, rate in pattern)\n    pattern_fill = sum(time * rate for time, rate in pattern)\n    \n    # Calculate full cycles needed to nearly complete the pool\n    cycles = (1 // pattern_fill)\n    total_time = cycles * pattern_duration\n    total_fill = cycles * pattern_fill\n    \n    # Remaining fill required\n    remaining_fill = 1 - total_fill\n\n    # Last partial cycle to complete the pool\n    for time, rate in pattern:\n        time_fill = time * rate\n        if time_fill >= remaining_fill:\n            total_time += remaining_fill / rate\n            break\n        total_time += time\n        remaining_fill -= time_fill\n\n    return round(total_time)\n\nans = solution()"
    ],
    "cd38959f92fb4e319b79a21e7b76d58f": [
        "def solution():\n    prob_rain_saturday = 0.7\n    prob_rain_sunday = 0.5\n    prob_no_rain_saturday = 1 - prob_rain_saturday\n    prob_no_rain_sunday = 1 - prob_rain_sunday\n\n    prob_rain_neither_day = prob_no_rain_saturday * prob_no_rain_sunday\n    prob_rain_at_least_one_day = 1 - prob_rain_neither_day\n\n    return prob_rain_at_least_one_day\n\nans = solution()"
    ],
    "58c65fe8c729419faa7ab40e34ec522c": [
        "def solution():\n    matthew_pencils = 31\n    samantha_pencils = matthew_pencils - 6\n    return samantha_pencils\n\nans = solution()"
    ],
    "79f67407094f46b5b519e683dcaa47b1": [
        "def solution():\n    ans = (46 + 7 * 3 - 7) / 20\n    return ans\n\nans = solution()"
    ],
    "e71f218803924703bffc15e15224ba0b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let a be the number of hours Alan would take on his own to paint the room\n    a = symbols('a')\n\n    # If Alan can paint the room in a hours, his painting rate is 1/a room per hour\n    # Similarly, Bob's painting rate is 1/6 room per hour\n    # Together, their combined painting rate is 1/4 room per hour\n    equation = Eq(1/a + 1/6, 1/4)\n\n    # Solving for a will give us the number of hours Alan would take on his own\n    solution = solve(equation, a)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a95c5e315cdc4b218288615a503b9e17": [
        "def solution():\n    total_score = 48\n    correct_score = 10\n    incorrect_score = -3\n    total_questions = 10\n\n    for incorrect in range(total_questions + 1):\n        correct = total_questions - incorrect\n        if correct * correct_score + incorrect * incorrect_score == total_score:\n            return incorrect\n\nans = solution()"
    ],
    "8a6cf5778ac04779aa35bd346944e9ea": [
        "def solution():\n    zeros_required = 28\n    factor_5 = 0\n    n = 0\n\n    while factor_5 < zeros_required:\n        n += 1\n        temp_n = n\n        while temp_n % 5 == 0:\n            factor_5 += 1\n            temp_n /= 5\n\n    return n\n\nans = solution()"
    ],
    "0d15eca36ec748eeb767eb2dd214bad3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    henry, fred, richard = symbols('henry fred richard')\n\n    equation1 = Eq(richard, henry - 3.24)\n    equation2 = Eq(fred, richard + 5.6)\n    equation3 = Eq(henry + richard + fred, 204.56)\n\n    solutions = solve((equation1, equation2, equation3), (henry, fred, richard))\n\n    return solutions[fred]\n\nans = solution()"
    ],
    "a3fdcafb566f460b979225e8d39c3503": [
        "def solution():\n    bought_bottles = 10\n    borrowed_bottles = 1\n    total_bottles = bought_bottles + borrowed_bottles\n    drunk_bottles = 0\n    \n    while total_bottles >= 2:\n        # Exchange empty bottles for new bottles\n        new_bottles = total_bottles // 2\n        drunk_bottles += new_bottles\n        \n        # Update total bottles: new bottles + remaining not exchanged ones\n        total_bottles = new_bottles + (total_bottles % 2)\n        \n        # If we borrowed a bottle, we have to return it, reducing the count by 1\n        if borrowed_bottles:\n            total_bottles -= 1\n            borrowed_bottles = 0\n            \n    # Do not forget the bottles bought originally\n    return drunk_bottles + bought_bottles\n\nans = solution()"
    ],
    "b69896aa9f7e46fe9132abed6a7e3e0e": [
        "def solution():\n    # Let x be the time it takes for height of A's waterline to be 3 times that of B\n    # In x minutes, if A can be drained in 10min, A would have drained x/10 of its total height\n    # In x minutes, if B can be drained in 6min, B would have drained x/6 of its total height\n\n    # We're looking for a time x such that the height of A's waterline is 3 times that of B's\n    # A's remaining height = 1 - (x/10)\n    # B's remaining height = 1 - (x/6)\n    # 1 - (x/10) = 3 * (1 - (x/6))\n    \n    # Solve for x\n    x = symbols('x')\n    equation = Eq(1 - (x/10), 3 * (1 - (x/6)))\n    solution = solve(equation, x)\n    \n    # Return the solution which is a time in minutes\n    return solution[0]\n\nans = solution()"
    ],
    "e5f11fb592e84030a40404b984c70a41": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(51 - 3 * (2 * x - 2), 21)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "5f4e105849d24adda1343493fbfdba1e": [
        "def solution():\n    total_children = 18\n    vanessa_position_from_front = 10\n    andrea_position_from_end = 12\n\n    andrea_position_from_front = total_children - andrea_position_from_end + 1\n\n    children_between = abs(andrea_position_from_front - vanessa_position_from_front) - 1\n\n    return children_between\n\nans = solution()"
    ],
    "8447879252624d80abee2367655025a7": [
        "def solution():\n    total_weeks = 7\n    total_sweets = 348\n    initial_sweets = 320\n    weekly_bought = total_weeks * 30\n\n    total_sweets_end = initial_sweets + weekly_bought\n    sweets_eaten_per_week = (total_sweets_end - total_sweets) / total_weeks\n\n    return sweets_eaten_per_week\n\nans = solution()"
    ],
    "aef19b3423ea4e4db4e653899791075e": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"281{digit}\")\n        if number % 6 == 0:\n            return digit\n\nans = solution()"
    ],
    "7c9f36ec8f484e11986b79be63c2965e": [
        "def solution():\n    total_path_length = 5/6\n    fenced_length = 2/3\n    unfenced_length = total_path_length - fenced_length\n    return unfenced_length\n\nans = solution()"
    ],
    "33b87e7146da47bfaf494ee09b2a87fc": [
        "def solution():\n    louise_time = 4\n    max_time = louise_time - 1\n    sally_time = 3 * louise_time\n\n    return sally_time\n\nans = solution()"
    ],
    "eac1ed2db4cd4aeba3d60c1847748394": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((10 * x - 8) - (12 - 10 * x), 2)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "7e5f8417567e4906a4369f99123b1772": [
        "def solution():\n    # Let x be the number of sweets Yue Ying has.\n    # Chenxi has x + 5 sweets.\n    # After giving Yue Ying 10 sweets, Chenxi has (x + 5 - 10) sweets.\n    # After receiving 10 sweets, Yue Ying has (x + 10) sweets.\n    # The difference is: (x + 10) - (x - 5 + 10) = x + 10 - x + 5 - 10\n    difference = 5\n    return difference\n\nans = solution()"
    ],
    "a9cffd9f20194c40af59a76b9109b46e": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "298e42b0f337482ab1dc2d26faaf6521": [
        "def solution():\n    # 1 corresponds to the hour number on a clock\n    ans = 1\n    return ans\n\nans = solution()"
    ],
    "b97c96624e2c48adabfda458ee48cae5": [
        "def solution():\n    ans = 0.35 * 200\n    return ans\n\nans = solution()"
    ],
    "192fafc0d2ce44eb94ff567dea0bb271": [
        "from sympy import primerange, isprime\n\ndef solution():\n    primes = list(primerange(1, 69))\n    for prime in primes:\n        if isprime(69 - prime):\n            return abs(69 - 2*prime)\n\nans = solution()"
    ],
    "cc0957dc16a0487dbd25e08d32dfd716": [
        "def solution():\n    goats = 6\n    lambs = 4 * goats - 4\n    return lambs\n\nans = solution()"
    ],
    "101213693c2745c385e01db607de76dc": [
        "def solution():\n    # Convert minutes to hours for uniformity\n    late_time = 12 / 60  # 12 minutes late\n    early_time = -8 / 60  # 8 minutes early\n\n    # Let distance be 'd' and actual time be 't'\n\n    # At 3 km/h Wilson is late by 'late_time' hours, so the equation is:\n    # d / 3 = t + late_time\n\n    # At 7 km/h Wilson is early by 'early_time' hours, so the equation is:\n    # d / 7 = t - early_time\n\n    # Eliminate t by equating the two:\n    # d / 3 - late_time = d / 7 + early_time\n    # d / 3 - d / 7 = late_time - early_time\n    # (7d - 3d) / (3 * 7) = late_time - early_time\n    # 4d / 21 = late_time - early_time\n    # d = (21 / 4) * (late_time - early_time)\n\n    # Calculate d using the time difference\n    d = (21 / 4) * (late_time - early_time)\n\n    return d\n\nans = solution()"
    ],
    "90d3eecee3cc4363a4700ae0f6ac9f45": [
        "def solution():\n    total_children = 18\n    vanessa_position_from_front = 10\n    andrea_position_from_end = 12\n\n    andrea_position_from_front = total_children - andrea_position_from_end + 1\n\n    children_between = abs(vanessa_position_from_front - andrea_position_from_front) - 1\n\n    return children_between\n\nans = solution()"
    ],
    "94a7862baa614940812b4e4e2f3f9368": [
        "def solution():\n    return 254 * 6\n\nans = solution()"
    ],
    "a0395fcbfd2d439aa13dcc4f5226aeb1": [
        "def solution():\n    total_score = 70\n    correct_score = 10\n    incorrect_score = -5\n    total_questions = 10\n\n    # Let the number of correct answers be x, then the number of incorrect answers is (total_questions - x).\n    # The total score is the sum of the scores for correct and incorrect answers:\n    # total_score = correct_score * x + incorrect_score * (total_questions - x)\n    # Solving for x gives us the number of correct answers.\n    for x in range(total_questions + 1):\n        if correct_score * x + incorrect_score * (total_questions - x) == total_score:\n            return x\n\nans = solution()"
    ],
    "369c0cce832f4bee85b43ed04d21f9c1": [
        "def solution():\n    total_students = 35\n    math_students = 20\n    both_classes_students = 11\n    neither_class_students = 10\n\n    # Calculate number of students taking only one class using Inclusion-Exclusion Principle\n    # Total = Only Math + Only Writing + Both - Neither\n    only_writing_students = total_students - math_students - neither_class_students + both_classes_students\n\n    return only_writing_students\n\nans = solution()"
    ],
    "8b5d0f2f1fc844cfbe9a313fbf4b0b31": [
        "def solution():\n    # Sophie's initial number of sweets\n    initial_sweets = 320\n    # Total sweets accumulated from buying every week for 7 weeks\n    bought_sweets = 30 * 7\n    # Total sweets after 7 weeks\n    total_sweets_after_7_weeks = 348\n    # Total sweets she should have after 7 weeks without eating\n    total_sweets_without_eating = initial_sweets + bought_sweets\n    \n    # The sweets eaten is the difference between what she should have \n    # and what she actually has after 7 weeks.\n    sweets_eaten_over_7_weeks = total_sweets_without_eating - total_sweets_after_7_weeks\n    # Average sweets eaten per week\n    sweets_eaten_per_week = sweets_eaten_over_7_weeks // 7\n    \n    return sweets_eaten_per_week\n\nans = solution()"
    ],
    "067c82adbd46460b82300b0fbc1bcc13": [
        "from sympy import isprime\n\ndef solution():\n    digits = [0, 8, 7, 2, 0, 0, 3]\n    max_prime = 0\n\n    for number in range(2, 50):\n        if isprime(number):\n            if all(str(digit) in str(number) for digit in str(number)):\n                max_prime = number\n\n    ans = max_prime\n    return ans\n\nans = solution()"
    ],
    "f90a5e4a189b415caad9310b12a991d9": [
        "def solution():\n    total_of_five_numbers = 54 * 5\n    total_of_first_two_numbers = 48 * 2\n    total_of_last_three_numbers = total_of_five_numbers - total_of_first_two_numbers\n    average_of_last_three_numbers = total_of_last_three_numbers / 3\n    return average_of_last_three_numbers\n\nans = solution()"
    ],
    "86c522861eca4579aee63cfe6a2ed4f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    teddy_age, father_age, teddy_future_age, father_future_age = symbols('teddy_age father_age teddy_future_age father_future_age')\n    equation1 = Eq(father_age, 7 * teddy_age)\n    equation2 = Eq(teddy_age - 5, 0)\n    equation3 = Eq(father_future_age, 40)\n    equation4 = Eq(father_future_age - father_age, teddy_future_age - teddy_age)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (teddy_age, father_age, teddy_future_age, father_future_age))\n\n    return solutions[teddy_future_age]\n\nans = solution()"
    ],
    "4822c5372e3f4b81b32d47e02e9fb76a": [
        "def solution():\n    ans = sum(range(1, 18, 2))\n    return ans\n\nans = solution()"
    ],
    "218aeeff17964c29855e70445931229c": [
        "def solution():\n    from fractions import Fraction\n\n    # According to the problem:\n    # Let the total people at the play be x.\n    # Then adults = 2/7 * x\n    # Remaining audience = x - 2/7 * x = 5/7 * x\n    # Boys = 4/5 * (5/7 * x) = 4/7 * x\n    # Girls = (5/7 * x) - (4/7 * x) = 1/7 * x\n    \n    # Given that there were 80 more adults than girls:\n    # adults - girls = 80\n    # (2/7 * x) - (1/7 * x) = 80\n    # (1/7 * x) = 80\n    # x = 80 * 7\n    \n    total_people = 80 * 7\n    \n    # Adriana made a mistake in calculating the fraction of girls.\n    # Correct fraction for girls is 1/7 of the total people, not 2/35.\n    # Therefore, the correct total number of people is calculated above.\n\n    return total_people\n\nans = solution()"
    ],
    "ff96cbe022d54ccd8c38734e0820996b": [
        "def solution():\n    # Each cut can intersect with all previous cuts to create new slices.\n    # The maximum number of pieces can be obtained if each new cut crosses all previous cuts.\n    # The formula for the maximum number of slices after n cuts is given by (n^2 + n + 2) / 2,\n    # which can be derived from considering the pattern of the number of new slices each cut generates.\n\n    cuts = 4\n    max_slices = (cuts**2 + cuts + 2) // 2\n\n    return max_slices\n\nans = solution()"
    ],
    "de1d2a07c3e741a88e3e8a8c740433f4": [
        "def solution():\n    total_toys = 40\n    elephant_position_from_left = 10\n    toys_between_rabbit_and_elephant = 5\n\n    rabbit_position_from_left = elephant_position_from_left + toys_between_rabbit_and_elephant\n    rabbit_position_from_right = total_toys - rabbit_position_from_left + 1\n\n    return rabbit_position_from_right\n\nans = solution()"
    ],
    "6d776ddacbf9461eb585ab73856e3bc6": [
        "def solution():\n    total_sum = 0\n    for page in range(1, 110):\n        total_sum += sum([int(digit) for digit in str(page)])\n    return total_sum\n\nans = solution()"
    ],
    "0625264c9a9d4b1e9c10ef4590d1be1c": [
        "def solution():\n    pink = symbols('pink')\n    equation = Eq(11 * pink + pink, 48)\n    solution = solve(equation, pink)\n    return solution[0]\n\nans = solution()"
    ],
    "fc10a17cccd04e8a8b4ba3e7393837eb": [
        "def solution():\n    # Area of a triangle formula is (base * height) / 2\n    base = 9\n    area = 54\n    # Rearrange the formula to solve for the height: height = (2 * area) / base\n    height = (2 * area) / base\n    return height\n\nans = solution()"
    ],
    "a0a9b4817586473ab82958503266de20": [
        "def solution():\n    return 82 + 5135 + 109\n\nans = solution()"
    ],
    "7e59f3d16bb944d0af7260fa7a6a1a05": [
        "def solution():\n    sum_squares = sum(i**2 for i in range(2, 33, 3))\n    return sum_squares\n\nans = solution()"
    ],
    "501f99ad661542b685b7602cc769d419": [
        "def solution():\n    return 0.35 * 700\n\nans = solution()"
    ],
    "1f92ac5fcbf346a58c902a4e56d63b9f": [
        "def solution():\n    cabinets_left_of_Candy = 4\n    cabinets_right_of_Candy = 7\n\n    # Plus 1 for Candy's own cabinet\n    total_cabinets = cabinets_left_of_Candy + cabinets_right_of_Candy + 1\n\n    return total_cabinets\n\nans = solution()"
    ],
    "0d83a44b34bd44cba27a54d4aa0c0f8b": [
        "def solution():\n    # Simplify the denominator.\n    # Use the fact that 4^982 = (2^2)^982 = 2^(2*982) = 2^1964\n    denominator = (2 ** 1964) - (2 ** 1963)\n    # Express denominator as 2^1963(2-1) = 2^1963\n    denominator_simplified = 2 ** 1963\n    \n    # The numerator is 2^2019\n    numerator = 2 ** 2019\n    \n    # Now we need to calculate the remainder of numerator / denominator_simplified, modulo 5.\n    # As 2^1963 effectively cancels out, this is equivalent to finding the remainder of 2^(2019-1963) modulo 5.\n    remainder = (2 ** (2019 - 1963)) % 5\n    \n    return remainder\n\nans = solution()"
    ],
    "62900d76501a411095425c90066b6baa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tables_original, chairs_original = symbols('tables_original chairs_original')\n\n    # After selling 42 tables\n    tables_after = tables_original - 42\n    # After bringing in 24 chairs\n    chairs_after = chairs_original + 24\n\n    # Chairs are four times the number of tables after the changes\n    equation = Eq(chairs_after, 4 * tables_after)\n\n    # Originally, there were equal number of tables and chairs\n    original_condition = Eq(tables_original, chairs_original)\n\n    # Solve the system of equations\n    solutions = solve((equation, original_condition), (tables_original, chairs_original))\n\n    return solutions[chairs_original]\n\nans = solution()"
    ],
    "d0df4689449e49dbaa0b915c5b1e0d16": [
        "def solution():\n    return 1914 // 6, 1914 % 6\n\nans = solution()"
    ],
    "72e9171f682743098c4b8fec888c8a50": [
        "def solution():\n    books_first_day = 455\n    books_second_day = 198\n    total_books = books_first_day + books_second_day\n    return total_books\n\nans = solution()"
    ],
    "71839d8b337447be8093660f325bbed7": [
        "def solution():\n    for Y in range(10):\n        if (1060 + Y) % 18 == 0:\n            return Y\n\nans = solution()"
    ],
    "b5bf6927be4b4a3087a39281607f3658": [
        "def solution():\n    initial_cookies = 15\n    eaten_cookies = 6\n    remaining_cookies = initial_cookies - eaten_cookies\n    return remaining_cookies\n\nans = solution()"
    ],
    "d75c9444af574fdf91925c609d2dc5d8": [
        "def solution():\n    boxes_per_class = 8\n    num_classes = 5\n    total_boxes = boxes_per_class * num_classes\n    return total_boxes\n\nans = solution()"
    ],
    "1a265e25f6874c5db75962c369ac17bc": [
        "def solution():\n    count = 0\n    for first_digit in range(1, 10):  # The first digit cannot be 0\n        for second_digit in range(0, 10):\n            for third_digit in range(0, 10, 2):  # The last digit must be even\n                if first_digit + second_digit + third_digit == 7:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "b61bf81e98dd4cc3b300767de6effa6e": [
        "def solution():\n    max_value = 0\n    for i in range(10):\n        for j in range(10):\n            number = 4900 + i * 10 + j\n            if number % 2 == 0 and number % 3 == 0 and number % 5 == 0:\n                max_value = max(max_value, number)\n    return max_value\n\nans = solution()"
    ],
    "4950b20e3ff347308b65c01922e1ecd1": [
        "def solution():\n    # The formula for the sum of the first n cubes is (n(n + 1) / 2) ** 2\n    n = 100\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    \n    # The formula for the sum of the first n natural numbers is n(n + 1) / 2\n    sum_of_natural_numbers = n * (n + 1) // 2\n    \n    # Divide the sum of cubes by the sum of natural numbers\n    ans = sum_of_cubes / sum_of_natural_numbers\n    return ans\n\nans = solution()"
    ],
    "64edc5874141435dbc97c986f5c8c721": [
        "def solution():\n    # Let's call the mass of the jar j, \n    # and the mass of one chocolate c.\n    \n    # From the first information: j + 5c = 185\n    # From the second information: j + 17c = 317\n    \n    # We can form two equations from the provided information\n    # and solve for j and c.\n\n    # Let's set up the equations\n    chocolates_5_mass = 185\n    chocolates_17_mass = 317\n    chocolates_10_difference = 10\n    \n    # subtract equations to find the mass of one chocolate\n    one_chocolate = (chocolates_17_mass - chocolates_5_mass) / (17 - 5)\n    \n    # Now we can calculate the mass of the jar:\n    jar_mass = chocolates_5_mass - (5 * one_chocolate)\n    \n    # Finally, calculate the mass of the jar with 10 chocolates\n    jar_with_10_chocolates_mass = jar_mass + (chocolates_10_difference * one_chocolate)\n    \n    return jar_with_10_chocolates_mass\n\nans = solution()"
    ],
    "7c6943752cfb4c10ba5d271cbd98b7f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ana, olaf, kristoff = symbols('ana olaf kristoff')\n\n    equation1 = Eq(ana, olaf + 116)\n    equation2 = Eq(kristoff, 5.5 * olaf)\n    equation3 = Eq(ana, 150)\n\n    solutions = solve((equation1, equation2, equation3), (ana, olaf, kristoff))\n    height_difference = solutions[kristoff] - solutions[ana]\n\n    return height_difference\n\nans = solution()"
    ],
    "0c07d3cceff140638bcc02cfd4b815c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of motorcycles, cars, and lorries\n    motorcycles, cars, lorries = symbols('motorcycles cars lorries')\n\n    # Equation 1: The total number of vehicles is 27\n    equation1 = Eq(motorcycles + cars + lorries, 27)\n\n    # Equation 2: The total number of wheels is 96\n    equation2 = Eq(2*motorcycles + 4*cars + 6*lorries, 96)\n\n    # Equation 3: The number of cars is equal to the number of lorries\n    equation3 = Eq(cars, lorries)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (motorcycles, cars, lorries))\n\n    return solutions[cars]\n\nans = solution()"
    ],
    "825b09d6a8a7435181cbe8f03a8719e8": [
        "def solution():\n    ans = 113 - 29\n    return ans\n\nans = solution()"
    ],
    "67726d4c5f1c43f99ab8c34d4c1d1255": [
        "def solution():\n    total_weight = 700\n    sugar_concentration = 0.32\n    sugar_weight = total_weight * sugar_concentration\n    water_weight = total_weight - sugar_weight\n    return water_weight\n\nans = solution()"
    ],
    "ccf4b3c1375049a0a9b0d364cd87dedb": [
        "def solution():\n    result = 3.05 - (1/10)\n    return result\n\nans = solution()"
    ],
    "ca40261e554e488db8f2110589404752": [
        "def solution():\n    total_length = 800\n    total_trees = 21\n    intervals = total_trees - 1\n\n    distance_between_trees = total_length / intervals\n\n    return distance_between_trees\n\nans = solution()"
    ],
    "5f82ecd1f2614283b498976475a87d7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of apples be 'a'\n    # Price of each apple is $0.60, so cost for apples is 0.60 * a\n    # 4/5 as many pears as apples, so number of pears is (4/5) * a\n    # 2/5 as many mangoes as apples, so number of mangoes is (2/5) * a\n    # Ratio of money spent on apples to pears 3:2 => cost of pears is (2/3) * cost of apples\n    # Ratio of money spent on pears to mangoes 1:5 => cost of mangoes is 5 * cost of pears\n    # Total cost is $150\n\n    a = symbols('a')\n    apples_cost = 0.60 * a\n    pears_cost = (2/3) * apples_cost\n    mangoes_cost = 5 * pears_cost\n    total_cost = Eq(apples_cost + pears_cost + mangoes_cost, 150)\n\n    # Solve the equation\n    solution_a = solve((total_cost), (a))\n\n    # Number of apples\n    num_apples = solution_a[a]\n\n    # Number of pears\n    num_pears = (4/5) * num_apples\n    \n    # Number of mangoes\n    num_mangoes = (2/5) * num_apples\n\n    # Total number of fruits\n    total_fruits = num_apples + num_pears + num_mangoes\n\n    return int(total_fruits)\n\nans = solution()"
    ],
    "41cb580f803a4484aa9de2340f620cd5": [
        "def solution():\n    ans = 132 // 11\n    return ans\n\nans = solution()"
    ],
    "9e5d33c0a5ac43408701c0c051cab6e9": [
        "def solution():\n    # Divisibility rule for 2: The last digit of the number must be an even number (0, 2, 4, 6, 8).\n    # Since the number must be divisible by 5 as well, the last digit must be 0 or 5.\n    # A number ending with 0 is always even, but with 5 is always odd.\n    # Therefore, the last digit is 0.\n    \n    # Divisibility rule for 3: The sum of all digits must be divisible by 3.\n    # Current sum of the digits: 1+9+9+2 = 21\n    \n    # As the number also needs to be divisible by 11, we apply the divisibility rule for 11:\n    # The difference between the sum of the digits at odd positions and the sum at even positions must be divisible by 11.\n    # For the number 1992ABC0 (let A, B, C be the missing digits), we have:\n    # (1 + 9 + A + 0) - (9 + 2 + B + C) must be divisible by 11\n    # 10 + A - (11 + B + C) must be divisible by 11\n    # A - (B + C + 1) must be divisible by 11\n    \n    # Since we are looking for the smallest possible number, we start checking from the smallest possible value for A, B, C.\n    for A in range(10):\n        for B in range(10):\n            for C in range(10):\n                if (A + B + C + 21) % 3 == 0:  # Check divisibility by 3\n                    if (A - (B + C + 1)) % 11 == 0:  # Check divisibility by 11\n                        ans = int(\"1992\" + str(A) + str(B) + str(C) + \"0\")\n                        return ans\n\nans = solution()"
    ],
    "b5e2b7a8198347d0b928d1181cc5ab24": [
        "def solution():\n    total_first_half = 366\n    avg_second_half = 65\n    months_second_half = 6\n    total_second_half = avg_second_half * months_second_half\n    total_year = total_first_half + total_second_half\n    avg_per_month = total_year / 12\n\n    return avg_per_month\n\nans = solution()"
    ],
    "e20396c1126c4c378303deff5dbb8965": [
        "from math import factorial\n\ndef solution():\n    # Count the frequency of each letter in 'ELEMENT'\n    freq = {'E': 3, 'L': 1, 'M': 1, 'N': 1, 'T': 1}\n    total_letters = sum(freq.values())\n    \n    # Calculate the number of arrangements (permutations) of the word\n    num_perms = factorial(total_letters)\n    for letter, count in freq.items():\n        num_perms //= factorial(count)\n    \n    return num_perms\n\nans = solution()"
    ],
    "bee2bb31e9cc4bfd97c140eb2cd7ca84": [
        "def solution():\n    hazel_age_in_3_years = 9\n    hazel_current_age = hazel_age_in_3_years - 3\n    jessica_current_age = hazel_current_age - 3\n    \n    hazel_age_next_year = hazel_current_age + 1\n    jessica_age_next_year = jessica_current_age + 1\n    \n    total_age_next_year = hazel_age_next_year + jessica_age_next_year\n    \n    return total_age_next_year\n\nans = solution()"
    ],
    "d09c9b0c4c064e1d91b4be6e28603df8": [
        "def solution():\n    first_term = 4\n    last_term = 11\n    num_terms = last_term - first_term + 1\n\n    # Sum of arithmetic series formula: (n/2) * (first_term + last_term)\n    sum_of_series = (num_terms / 2) * (first_term + last_term)\n    \n    return int(sum_of_series)\n\nans = solution()"
    ],
    "2f7331548e4c4ead9882750734e9dcb3": [
        "def solution():\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    return gcd(4811, 1981)\n\nans = solution()"
    ],
    "56e4e8204ffd46788f19f0fb559476b9": [
        "def solution():\n    # Average of 6 assignments\n    avg_6_assignments = 92\n    \n    # Average of first 5 assignments\n    avg_5_assignments = 94\n    \n    # Total score for first 5 assignments using the average\n    total_5_assignments = avg_5_assignments * 5\n    \n    # Total score for 6 assignments using the average\n    total_6_assignments = avg_6_assignments * 6\n    \n    # Score of the sixth assignment\n    score_6th_assignment = total_6_assignments - total_5_assignments\n\n    return score_6th_assignment\n\nans = solution()"
    ],
    "60a921961e274ba6b7944a53c0a16d35": [
        "def solution():\n    cost_price = 65\n    selling_price = 74\n    remaining_pairs = 5\n    profit = 440\n\n    profit_per_pair = selling_price - cost_price\n    sold_pairs = profit // profit_per_pair\n\n    initial_pairs = sold_pairs + remaining_pairs\n\n    return initial_pairs\n\nans = solution()"
    ],
    "bf8d648694e046798009b3bcb8b11a51": [
        "def solution():\n    cars_end = 30\n    cars_exit = 10\n    cars_enter = 8\n    cars_begin = cars_end - cars_enter + cars_exit\n    return cars_begin\n\nans = solution()"
    ],
    "f0661ff980b543b2890c0b2cd9ed594d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number we are looking for as 'x'.\n    x = symbols('x')\n\n    # According to the problem statement, we have the following equation:\n    # (((x * 2) / 4) ** 2 - 4) / 10 = 6\n\n    # Let's define the equation using sympy\n    equation = Eq((((x * 2) / 4) ** 2 - 4) / 10, 6)\n\n    # Now, we can use the sympy.solve() function to solve the equation for 'x'.\n    solutions = solve(equation, x)\n\n    # Return the original number that was thought of.\n    return solutions[0]\n\nans = solution()"
    ],
    "91f1dc30074b4cc5ba3de816f8ebe024": [
        "def solution():\n    total_liters_needed = 59\n    liters_per_day = 10\n    liters_per_night = -3\n    liters_first_day = 3\n    total_liters = liters_first_day\n    days = 1\n\n    while total_liters < total_liters_needed:\n        total_liters += (liters_per_day + liters_per_night)\n        days += 1\n\n    return days\n\nans = solution()"
    ],
    "c3537d94f9474c1681dd753250a4e937": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # The musical ended at 7:15 PM\n    end_time = datetime.strptime(\"7:15 PM\", \"%I:%M %p\")\n\n    # Calculate the duration of the second half (5:30 PM to 7:15 PM)\n    second_half_duration = end_time - datetime.strptime(\"5:30 PM\", \"%I:%M %p\")\n\n    # Since Peter was halfway through, the first half is the same duration\n    start_time = end_time - second_half_duration * 2\n\n    # Return the start time formatted as \"%I:%M %p\"\n    return start_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "ea2b0754dbd44371b1caf18c22c52d19": [
        "def solution():\n    return 1234 - 566\n\nans = solution()"
    ],
    "33baf7cac5884fbc952fe20bd5c8b056": [
        "def solution():\n    toys_per_minute = 27 / 5\n    toys_in_20_minutes = toys_per_minute * 20\n    return toys_in_20_minutes\n\nans = solution()"
    ],
    "9921f066d3b9491bb6209aef0e315efb": [
        "def solution():\n    from math import gcd\n\n    # Calculate the Least Common Multiple (LCM) using gcd\n    amy_interval = 24\n    ginny_interval = 36\n\n    lcm = (amy_interval * ginny_interval) // gcd(amy_interval, ginny_interval)\n    \n    return lcm\n\nans = solution()"
    ],
    "2d3e8ce232944b0da4446730b18adc15": [
        "def solution():\n    seconds_in_half_hour = 30 * 60\n    total_digits_written = 0\n    current_number = 1\n    \n    while total_digits_written + len(str(current_number)) <= seconds_in_half_hour:\n        total_digits_written += len(str(current_number))\n        current_number += 1\n    return current_number - 1\n\nans = solution()"
    ],
    "c71b3187758541f2a9be1885e9788daf": [
        "def solution():\n    amounts = [\n        (1/2) * 30,\n        (1/3) * 36,\n        (1/4) * 40,\n        (1/5) * 60,\n        (1/6) * 96\n    ]\n    \n    min_amount = min(amounts)\n    max_amount = max(amounts)\n    \n    ans = max_amount - min_amount\n    \n    return ans\n\nans = solution()"
    ],
    "2526a9251202448c82ca74dc1af18fd8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    end_time = datetime.strptime('11:20 PM', '%I:%20 %p')\n    game_duration = timedelta(minutes=225)\n    start_time = end_time - game_duration\n    return start_time.strftime('%I:%M %p').lstrip('0')\n\nans = solution()"
    ],
    "4b4550a7fb5a4da1879ab82345527afa": [
        "def solution():\n    # Worst case scenario to get the first green marble is to pick all non-green marbles first\n    marbles_to_draw = 5 + 9 + 2  # all blue, white, and black marbles\n    marbles_to_draw += 1  # plus one to ensure getting a green marble\n\n    return marbles_to_draw\n\nans = solution()"
    ],
    "63ccfd7c8f7948138140e37b2a8721c9": [
        "from math import comb\n\ndef solution():\n    num_teams = 20\n    matches_played = comb(num_teams, 2)\n    return matches_played\n\nans = solution()"
    ],
    "d325179a1a7c406b95abe95c9433bf65": [
        "def solution():\n    toys_per_3_minutes = 27\n    toys_per_minute = toys_per_3_minutes / 3\n    return toys_per_minute\n\nans = solution()"
    ],
    "32e0c31f837f484dbc8307ce7ebbf9f6": [
        "def solution():\n    initial_rabbits = 32\n    years = 3\n    for _ in range(years):\n        initial_rabbits = 3 * initial_rabbits // 2  # Triple then halve the population each year\n    return initial_rabbits\n\nans = solution()"
    ],
    "7a85e45de1cf4eefac785ffc876e2419": [
        "def solution():\n    puffs_per_hour = 24 / 2  # Number of puffs Minah makes per hour\n    hours_for_120_puffs = 120 / puffs_per_hour  # Number of hours needed for 120 puffs\n    return hours_for_120_puffs\n\nans = solution()"
    ],
    "00b3826fde0d4426bbae01c933f41959": [
        "def solution():\n    # In a round-robin tournament, each player plays every other player exactly once.\n    # With 8 players, each player will play 7 games (against all other 7 players).\n    \n    # As each of the players records a different number of wins,\n    # we can think of assigning wins from 0 to 7 (inclusive) to each player.\n    # Assume players are ordered by the number of wins they have in non-decreasing order.\n    # The player with the most wins (the champion) would then necessarily have 7 wins,\n    # the next one would have 6 wins and so on down to the player with no wins.\n    \n    # The champion wins all their matches.\n    return 7\n\nans = solution()"
    ],
    "1a9163a8cb424cb9a9accd781412b79a": [
        "def solution():\n    total_distance = 20\n    daily_climb = 6\n    special_day_climb = 2\n    special_day = 7\n    \n    # Calculate the total climb except for the last day\n    total_climb_except_last_day = daily_climb * (special_day - 1)\n    \n    # Subtract the special day climb to get the climb using normal daily climb\n    normal_climb_until_special_day = total_climb_except_last_day - special_day_climb\n\n    # The height reached before the special day's climb\n    height_before_special_day = total_distance - special_day_climb\n\n    # How high the snail must have climbed to reach that height\n    days_needed = (height_before_special_day - normal_climb_until_special_day) // (daily_climb - 1)\n\n    # Days spent climbing using the normal rate\n    actual_days_spent_climbing = days_needed + special_day - 1\n\n    # The snail's height after the last climb\n    final_height_after_climb = actual_days_spent_climbing * daily_climb\n    \n    # Since the snail doesn't slip back on the last day, the slide down distance can be calculated\n    slide_down_distance = (final_height_after_climb + daily_climb) - total_distance\n\n    return slide_down_distance\n\nans = solution()"
    ],
    "e45c3400530944688f0b7c15612c3f65": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables\n    candy_speed = symbols('candy_speed')  # Candy's speed in meters per minute\n    \n    # Create equations based on the problem statement\n    # 6 minutes after Ivy, Candy starts and they meet 12 minutes later\n    # Ivy's speed = candy_speed + 20\n    # Ivy's time = 6 (start delay) + 12 (time to meet after Candy starts)\n    # Candy's time = 12 (time to meet after Candy starts)\n    # Total distance = 1200 meters\n    # Ivy's distance + Candy's distance = 1200\n    equation = Eq((candy_speed + 20) * (6 + 12) + candy_speed * 12, 1200)\n    \n    # Solve the equation for Candy's speed\n    solution = solve(equation, candy_speed)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "17b260645d6a414ab42dd5105d17a7a0": [
        "from itertools import combinations_with_replacement\n\ndef solution():\n    target_sum = 13\n    max_product = 0\n    for combination in combinations_with_replacement(range(1, target_sum), 4):\n        if sum(combination) == target_sum:\n            max_product = max(max_product, combination[0] * combination[1] * combination[2] * combination[3])\n    return max_product\n\nans = solution()"
    ],
    "0b323f74ff2440bd99945e7df07c7d9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    years = symbols('years')\n    edward_age = 8 + years\n    mother_age = 32 + years\n    equation = Eq(mother_age, 3 * edward_age)\n    \n    ans = solve(equation, years)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "407e3d4abdd84948b11417cc857b3a6f": [
        "def solution():\n    # Quantity of nickel in first metal\n    nickel_first = 6 * 0.45\n    # Quantity of nickel in second metal\n    nickel_second = 14 * 0.60\n    # Total quantity of nickel\n    total_nickel = nickel_first + nickel_second\n    # Total weight of new metal\n    total_weight = 6 + 14\n    # Percent concentration of nickel in the new metal\n    percent_concentration = (total_nickel / total_weight) * 100\n\n    return percent_concentration\n\nans = solution()"
    ],
    "9931681699674c94a55cbd91e9fef93d": [
        "def solution():\n    scale_ratio = 6  # 1 cm to 6 m\n    plan_length_cm = 5  # Playground length on the plan in cm\n    real_length_m = plan_length_cm * scale_ratio  # Real length in meters\n    return real_length_m\n\nans = solution()"
    ],
    "a3f71bfa7bda47abb06c88dc5fe9c667": [
        "def solution():\n    for number in range(10, 100):  # 2-digit numbers start at 10\n        if number % 3 == 1 and number % 5 == 1:\n            return number\n\nans = solution()"
    ],
    "844dc49550ce457b94476fbbf9b26070": [
        "def solution():\n    result = (3/5) * 35\n    return result\n\nans = solution()"
    ],
    "7fc9064a1aa5469aa93c3e1bbde4bbee": [
        "def solution():\n    cost_per_box = 6\n    total_money = 250\n\n    num_boxes = total_money // cost_per_box\n\n    return num_boxes\n\nans = solution()"
    ],
    "dc7f0a68b9f24779bc4219332172235f": [
        "def solution():\n    missing_number = 4060800 - 4000000 - 800\n    return missing_number\n\nans = solution()"
    ],
    "f824d5ccf33349d2ab0f1608091dea39": [
        "def solution():\n    # Let the original number of students in each row/column of the square be x\n    # Then the total number of students before adding is x^2 + 11\n    # After adding a row and a column, the new square has (x+1)^2 students\n    # Therefore, we require x^2 + 11 + 12 = (x+1)^2\n    # Which simplifies to x^2 + 23 = x^2 + 2x + 1\n    # So 2x = 22 and therefore x = 11\n    # The total number of students is x^2 + 11, which gives us 11^2 + 11\n    x = 11\n    total_students = x**2 + 11\n    return total_students\n\nans = solution()"
    ],
    "ba3fa896136240449736cb46b7e3fc42": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pen, pencil = symbols('pen pencil')\n\n    equation1 = Eq(pencil, pen - 0.5)\n    equation2 = Eq(pen + pencil, 4.5)\n\n    solutions = solve((equation1, equation2), (pen, pencil))\n\n    return solutions[pen]\n\nans = solution()"
    ],
    "75141a0eda0b4ee188fda622dacab4d8": [
        "def solution():\n    tank_a = 673\n    tank_b = tank_a + 56\n    return tank_b\n\nans = solution()"
    ],
    "82a289b59d824994b394d0497a34059a": [
        "def solution():\n    boys = 15\n    boys_apples = boys * 30\n    avg_apples = 26\n    \n    # Let g be the number of girls\n    girls = symbols('girls')\n    \n    # Total number of people is boys + girls\n    total_people = boys + girls\n    \n    # Total apples picked is the sum of apples picked by boys and girls\n    total_apples = boys_apples + 20 * girls\n    \n    # The average number of apples picked by everyone is the total apples divided by the total number of people\n    equation = Eq(total_apples / total_people, avg_apples)\n\n    # Solve for the number of girls\n    solutions = solve(equation, girls)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "78ccf674710b4fe69a75eac5a5e851fe": [
        "def solution():\n    cost_of_8_books = 32\n    cost_per_book = cost_of_8_books / 8\n    cost_of_12_books = cost_per_book * 12\n    return cost_of_12_books\n\nans = solution()"
    ],
    "e5322713de5247778392f797381187c3": [
        "def solution():\n    total_items = 12\n    total_cost = 340\n\n    # cost of each basketball and volleyball\n    basketball_cost = 30\n    volleyball_cost = 25\n\n    # Hypothesis: Let's assume all items were basketballs\n    all_basketballs_cost = total_items * basketball_cost\n\n    # Difference in cost per item (basketball - volleyball)\n    cost_difference = basketball_cost - volleyball_cost\n\n    # Difference between all basketballs cost and actual cost\n    cost_diff_actual = all_basketballs_cost - total_cost\n\n    # Number of volleyballs, since for each substitution of a basketball with a volleyball we decrease the total cost by cost_difference\n    num_volleyballs = cost_diff_actual // cost_difference\n\n    # Number of basketballs\n    num_basketballs = total_items - num_volleyballs\n    \n    return num_basketballs\n\nans = solution()"
    ],
    "12650053179d4354abc37f8acdc2f5cc": [
        "def solution():\n    total_wealth = 15000000\n    richie_share = total_wealth * (1/3)\n    remaining_after_richie = total_wealth - richie_share\n    thrifty_share = remaining_after_richie * (1/2)\n    remaining_after_thrifty = remaining_after_richie - thrifty_share\n    bounty_share = remaining_after_thrifty * (2/5)\n    archie_share = remaining_after_thrifty - bounty_share\n    return archie_share\n\nans = solution()"
    ],
    "548479b1b79a4bb28ce823621c5abeeb": [
        "def solution():\n    total_candy = 36\n    given_to_lily = total_candy * 3/4\n    remaining_after_lily = total_candy - given_to_lily\n    given_to_brother = remaining_after_lily * 1/3\n    final_remaining = remaining_after_lily - given_to_brother\n    return final_remaining\n\nans = solution()"
    ],
    "033994c93a6b45b089e9faa4e06774ed": [
        "def solution():\n    ans = sum(sum(1 / k for k in range(1, i + 1)) for i in range(2, 61))\n    return ans\n\nans = solution()"
    ],
    "ba33391702c54eddadac0a6dea3e8f20": [
        "def solution():\n    return (16 - 1) / 5\n\nans = solution()"
    ],
    "e41fa665820a4926b055fb0c8e503a19": [
        "def solution():\n    return 427 // 7\n\nans = solution()"
    ],
    "fdb38dfc8f624402a53c64aee38c936c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    roy, dennis = symbols('roy dennis')\n    \n    total_money = 340\n    roy_spent = 2/3 * roy\n    dennis_spent = 1/4 * dennis\n    roy_left = roy - roy_spent\n    dennis_left = dennis - dennis_spent\n    \n    equation1 = Eq(roy + dennis, total_money)\n    equation2 = Eq(dennis_left, 2 * roy_left)\n\n    solutions = solve((equation1, equation2), (roy, dennis))\n\n    return solutions[dennis] - dennis_spent\n\nans = solution()"
    ],
    "5084bbc7b89c41b5bf2edb1303aac223": [
        "def solution():\n    # Let x be the number of curry puffs sold on Friday\n    # Saturday: x + 27\n    # Sunday: x - 14\n    # Total: 475\n    \n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(x + (x + 27) + (x - 14), 475)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "49f01b25ab6d4b69801d88a94adc488b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let m be the mass of mint candies, which is constant across all containers.\n    m = symbols('m')\n\n    # Let x, y, z be the total mass of the three different sized containers.\n    x, y, z = symbols('x y z')\n\n    # Since the fraction for strawberry is known and mint is constant, the rest is chocolate.\n    # Container 1 (strawberry is 2/5 of the container, so chocolate is 3/5 minus constant mint):\n    equation1 = Eq((2/5)*x + (3/5)*x - m, x)\n\n    # Container 2 (strawberry is 2/7 of the container, so chocolate is 5/7 minus constant mint):\n    equation2 = Eq((2/7)*y + (5/7)*y - m, y)\n\n    # Container 3 (strawberry is 2/9 of the container, so chocolate is 7/9 minus constant mint):\n    equation3 = Eq((2/9)*z + (7/9)*z - m, z)\n\n    # The total mass of all 3 containers\n    equation4 = Eq(x + y + z, 1371)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2, equation3, equation4), (m, x, y, z))\n\n    # Extract the solutions for the total mass of each container.\n    x_mass, y_mass, z_mass = solutions[x], solutions[y], solutions[z]\n\n    # Calculate the mass of strawberry candies for each container.\n    mass_strawberry = (2/5)*x_mass + (2/7)*y_mass + (2/9)*z_mass\n\n    return mass_strawberry\n\nans = solution()"
    ],
    "6a7f195d4df34990a4361a1279619703": [
        "def solution():\n    digits = 300\n    page, total_digits = 0, 0\n    \n    while total_digits < digits:\n        page += 1\n        total_digits += len(str(page))\n        \n    return page - 1\n\nans = solution()"
    ],
    "5c220b4fa8654c3a8555329850f8525d": [
        "def solution():\n    return 675 // 25\n\nans = solution()"
    ],
    "29250105e9c04c48bd1439676ca2782d": [
        "def solution():\n    total_cost = 235.60\n    balls_cost = 20.45\n    num_balls = 8\n    num_hoops = 6\n    \n    total_balls_cost = num_balls * balls_cost\n    total_hoops_cost = total_cost - total_balls_cost\n    cost_per_hoop = total_hoops_cost / num_hoops\n    \n    return cost_per_hoop\n\nans = solution()"
    ],
    "52d042e76d354b68ac3284571d64fe18": [
        "def solution():\n    ans = -12 - 5\n    return ans\n\nans = solution()"
    ],
    "f92015fcf25b4f6b8a4c6c33740e86b0": [
        "def solution():\n    total_cartons = 8\n    volume_per_carton = 3\n    volume_drank = 9\n    container_volume = 5\n\n    total_volume = total_cartons * volume_per_carton\n    remaining_volume = total_volume - volume_drank\n\n    containers_needed = -(-remaining_volume // container_volume)  # ceiling division\n\n    return containers_needed\n\nans = solution()"
    ],
    "93cbd8cff1724a0288df495bf1bf1129": [
        "def solution():\n    import math\n    from sympy import factorint\n    \n    # Factor 693 into its prime factors\n    factors = factorint(693)\n    \n    # In order for the product to be a perfect square, each prime factor's power needs to be even\n    # Initialize the smallest number as 1\n    smallest_number = 1\n    \n    for prime, power in factors.items():\n        # If the power is odd, multiply the smallest number by the prime to make it even\n        if power % 2 == 1:\n            smallest_number *= prime\n            \n    return smallest_number\n\nans = solution()"
    ],
    "2294a90b377245e5a243e024c10b9e33": [
        "def solution():\n    # Unit digit of 13^242\n    unit_digit_13_power = pow(13, 242, 10)\n    \n    # Unit digit of 17^379\n    unit_digit_17_power = pow(17, 379, 10)\n    \n    # Unit digit of 4^2012\n    unit_digit_4_power = pow(4, 2012, 10)\n    \n    # Calculating the final unit digit\n    unit_digit = (unit_digit_13_power + (unit_digit_17_power * unit_digit_4_power)) % 10\n    \n    return unit_digit\n\nans = solution()"
    ],
    "efc1886d8b6e41288f275b25df4f1970": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A = symbols('A')\n    equation = Eq(2 + 1/(2 + 1/(1 + 1/(2 + 1/A))), 64/27)\n\n    solution = solve(equation, A)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d56e2d0f4d3c49c09a9d9d2fae148065": [
        "def solution():\n    steak_weight = 3 + 1/2  # 3 1/2 kg of steak\n    steak_cost_per_kg = 7.5  # £7.50 per kilogram\n    total_cost = steak_weight * steak_cost_per_kg  # total cost of steak\n    money_have = 20  # £20 note\n    money_needed = total_cost - money_have  # additional money needed\n\n    return max(money_needed, 0)  # if money_needed is negative, return 0\n\nans = solution()"
    ],
    "298f22aae19b448d8ed281fe1ffd1c6a": [
        "def solution():\n    total_people = 22\n    eddies_position = 12\n    \n    position_from_end = total_people - eddies_position + 1\n    \n    return position_from_end\n\nans = solution()"
    ],
    "73173ea4753941c1aebae06530689d79": [
        "def solution():\n    return 498 + 349\n\nans = solution()"
    ],
    "615a06562ee54cbf883a97926cfa289a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    marry, alexis, charlotte = symbols('marry alexis charlotte')\n    charlotte_initial = charlotte / (1 + 0.8)  # Charlotte's stickers before getting more\n\n    eq1 = Eq(marry, (7/5) * alexis)\n    eq2 = Eq(marry - 0.2 * marry, charlotte_initial + 20)\n    eq3 = Eq(alexis - 0.2 * alexis, charlotte_initial)\n    eq4 = Eq(charlotte_initial + 0.2 * marry + 0.2 * alexis, charlotte)\n\n    solutions = solve((eq1, eq2, eq3, eq4), (marry, alexis, charlotte, charlotte_initial))\n\n    return solutions[alexis]\n\nans = solution()"
    ],
    "f1a8a109f87844d5bb0f0d3f4dd4d789": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # l for light bowling ball, h for heavy bowling ball\n    l, h = symbols('l h')\n\n    # We have 6 light balls and 6 heavy balls, and the mass of a heavy ball is twice that of a light ball\n    equation1 = Eq(h, 2 * l)\n    # The total mass of the 12 bowling balls is 65.7 kg\n    equation2 = Eq(6 * l + 6 * h, 65.7)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (l, h))\n\n    # Returning the mass of a light bowling ball to the nearest kg\n    return round(solutions[l])\n\nans = solution()"
    ],
    "866c8e678e0948b59e1d7291359716df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    benson, clive = symbols('benson clive')\n\n    equation1 = Eq(benson + clive, 705)\n    equation2 = Eq(benson - 34, clive - 63)\n\n    solutions = solve((equation1, equation2), (benson, clive))\n\n    return solutions[clive]\n\nans = solution()"
    ],
    "099b78e49bc4404ba303b17fc521c8a1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    total_children = 650\n    total_balls = 250\n\n    # Every 3 boys share 1 ball\n    balls_for_boys = boys / 3\n\n    # Every 2 girls share 1 ball\n    balls_for_girls = girls / 2\n\n    # Equations based on problem statement\n    equation1 = Eq(boys + girls, total_children)\n    equation2 = Eq(balls_for_boys + balls_for_girls, total_balls)\n\n    # Solving the equations for boys and girls\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "a3b2b317382c413b950d13170728af7c": [
        "def solution():\n    count = 0\n    # The first digit can be any from 1 to 9 (can't be 0 as it's a four-digit number)\n    # The second digit can be anything from 0 to 9\n    # The third and fourth digits will be same as second and first respectively to make it a palindrome\n    for first_digit in range(1, 10):\n        for second_digit in range(0, 10):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "07cef45a5cd34546b160beb5d63ff929": [
        "def solution():\n    scores = [8, 14, 11, 9, 12, 9]\n    average_score = sum(scores) / len(scores)\n    return average_score\n\nans = solution()"
    ],
    "1c2eb2be878c46f9abd8fe0eebfe90e0": [
        "def solution():\n    container_a = 42\n    container_b = 4 * container_a\n    container_c = 2 * container_b\n    return container_c\n\nans = solution()"
    ],
    "0463082fb7794b94ba6e248f5672f584": [
        "def solution():\n    # Let the number of pens Denise has be x\n    # Then Jay has 6 times as many pens as Denise, which is 6x\n    # According to the problem, together they have 126 pens, so the equation is:\n    # x + 6x = 126\n    # Solving for x, we get 7x = 126\n    x = 126 // 7\n    return x\n\nans = solution()"
    ],
    "a81399939c8c430caa4f5477791e6872": [
        "def solution():\n    midday_temp = 8\n    drop_in_temp = 12\n    midnight_temp = midday_temp - drop_in_temp\n    return midnight_temp\n\nans = solution()"
    ],
    "d9fe69458a16475bb892b329f85a2176": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B, C = symbols('A B C')\n    \n    equation1 = Eq((A + B) / 2, 50)\n    equation2 = Eq((B + C) / 2, 43)\n    equation3 = Eq((A + C) / 2, 45)\n    \n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    avg_ABC = (solutions[A] + solutions[B] + solutions[C]) / 3\n    \n    return avg_ABC\n\nans = solution()"
    ],
    "1f147f03ccef4ae3a50a01ccda70772f": [
        "def solution():\n    ans = 18 - 4 * 2 + 3\n    return ans\n\nans = solution()"
    ],
    "0e1222f712bc4ffca972c05b2effd15b": [
        "def solution():\n    chocolate_price = 1.26\n    total_chocolate_cost = 5 * chocolate_price\n    cookie_price = total_chocolate_cost / 6\n    money_initially = 9.05\n    money_spent = 4 * cookie_price\n    money_left = money_initially - money_spent\n    \n    return round(money_left, 2)\n\nans = solution()"
    ],
    "040686faef95411e8585542ead1f8966": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    total_children = 650\n    total_balls = 250\n\n    # Equation based on children count\n    equation1 = Eq(boys + girls, total_children)\n    # Equation based on ball distribution\n    equation2 = Eq(boys/3 + girls/2, total_balls)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "a36e566f98e442f5842ab9407dee385e": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if i % 2 == 0 and sum(map(int, str(i))) == 8:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "d9c3ed810a164a26992ebd764b6a4339": [
        "def solution():\n    for i in range(1, 100):  # Assume the number goes up to 100 for practical purposes\n        if 8 * 11 == i * 9 + 34:\n            return i\n\nans = solution()"
    ],
    "d48e695fe4c940b2acce011d716fb7cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g represent the original number of girls\n    # Let b represent the original number of boys\n    g, b = symbols('g b')\n\n    # After 25 girls went outside to play, the number of girls left is g - 25\n    # This number is 2/3 of the boys: g - 25 = 2/3 * b\n\n    # After 15 boys went to play soccer, the number of boys left is b - 15\n    # The problem states there's an equal number of boys and girls afterwards: g - 25 = b - 15\n\n    # Two equations based on the problem statement\n    equation1 = Eq(g - 25, 2/3 * b)\n    equation2 = Eq(g - 25, b - 15)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (g, b))\n\n    # Calculate the total number of students originally in the classroom\n    total_students = solutions[g] + solutions[b]\n\n    return total_students\n\nans = solution()"
    ],
    "b623a87ccea1499fb63634242cab4656": [
        "def solution():\n    midday_temp = 8\n    temp_drop = 12\n    midnight_temp = midday_temp - temp_drop\n    return midnight_temp\n\nans = solution()"
    ],
    "adcc0ea38c5c483abfaedf299c74cb3f": [
        "def solution():\n    # Let the number of 10-cent coins be 8x and the number of 50-cent coins be 3x\n    # Total value in dollars of 10-cent coins is 0.10 * 8x\n    # Total value in dollars of 50-cent coins is 0.50 * 3x\n    # Total value of all coins is 75.90\n    \n    # We can set up the equation: 0.10 * 8x + 0.50 * 3x = 75.90\n\n    # Solving for x\n    x = (75.90) / (0.10 * 8 + 0.50 * 3)\n\n    # Now find the total value of the 50-cent coins\n    total_value_50_cent_coins = 0.50 * 3 * x\n\n    return total_value_50_cent_coins\n\nans = solution()"
    ],
    "b488441291104e42b32567c3545040a8": [
        "def solution():\n    total_spent = 6400\n    discount_percentage = 80\n    savings = total_spent / (1 - (discount_percentage / 100))\n    amount_saved = savings - total_spent\n    return amount_saved\n\nans = solution()"
    ],
    "05b194fb5bbb4281aed3fa88a9af81f6": [
        "def solution():\n    base_area = 7 * 7\n    hole_area = 3 * 3\n    filled_area = base_area - hole_area\n    height = 320 / filled_area\n\n    return height\n\nans = solution()"
    ],
    "e31b6f292ecc4753a2d83469dc4590f1": [
        "from math import factorial\n\ndef solution():\n    # Treat Amy and Judy as one person, so we have 7 \"people\" to arrange\n    num_people = 7\n    \n    # Total arrangements for 7 \"people\" around a circular table\n    arrangements = factorial(num_people - 1)\n    \n    # Amy and Judy can switch places, so multiply by 2 for their possible arrangements\n    arrangements *= 2\n    \n    return arrangements\n\nans = solution()"
    ],
    "f21d41597e6646d3be1d07eaad6c595f": [
        "def solution():\n    # Initialize the number of cuts and pieces\n    cuts = 0\n    pieces = 1\n    # Increase the number of cuts until the number of pieces is equal or greater than the target\n    while pieces < 46:\n        cuts += 1\n        pieces += cuts\n    return cuts\n\nans = solution()"
    ],
    "449ef10f90444f13893b5ba270bc69ce": [
        "def solution():\n    x_weight = 1.5\n    # 3x = 10y\n    # 1x = 10/3 y\n    # y = (1x * 3) / 10\n    y_weight = (x_weight * 3) / 10\n    return y_weight\n\nans = solution()"
    ],
    "3893320e66ba431cbd94be3d97bd7bad": [
        "def solution():\n    ans = 35 * 24\n    return ans\n\nans = solution()"
    ],
    "871597fa52dc4a36a7d42eaa6aca7343": [
        "def solution():\n    # Initialize the current number in the pattern and the index counter\n    current_number = 1\n    index_counter = 0\n\n    # Loop while the index counter is less than 2008\n    while index_counter < 2008:\n        # Iterate through the numbers in the current pattern from 1 to current number\n        for i in range(1, current_number + 1):\n            # Update the index counter each time a number is accounted for\n            index_counter += 1\n            # If the index counter is equal to 2008, return the current number in the sequence\n            if index_counter == 2008:\n                return i\n        # Increment the current_number to move to the next pattern in the sequence\n        current_number += 1\n\nans = solution()"
    ],
    "102d1f62f1754310866b41a5ade5f3d8": [
        "def solution():\n    tomatoes_sold = 27\n    cucumbers_sold = (tomatoes_sold - 3) // 3\n    return cucumbers_sold\n\nans = solution()"
    ],
    "1772deb848c44e73a5983aef50ac6df7": [
        "def solution():\n    from itertools import permutations\n    \n    digits = [3, 5, 9]\n    perm = permutations(digits)\n    count = 0\n    \n    for _ in perm:\n        count += 1\n\n    return count\n\nans = solution()"
    ],
    "c3a6b54c36ae43b689f9746376889267": [
        "def solution():\n    # This is an arithmetic sequence where:\n    # a1 = 6 (first term)\n    # d = 4 (common difference)\n    # To find the sum, we first need to find the number of terms (n).\n\n    # We can see that the sequence increments by 4 each time.\n    # So the pattern is 6, (6+4), (6+4+4), (6+4+4+4), ...\n    # The last term (an) is 26.\n\n    # We know that the nth term of an arithmetic sequence is given by:\n    # an = a1 + (n-1) * d\n    # 26 = 6 + (n-1) * 4\n\n    # Solving for n:\n    n = (26 - 6) / 4 + 1\n\n    # Now, the sum of the first n terms of an arithmetic sequence is given by:\n    # Sn = n/2 * (a1 + an)\n    \n    ans = int(n/2 * (6 + 26))\n    return ans\n\nans = solution()"
    ],
    "2f72bb76e3534c5eb2dc23ed6c53c0ad": [
        "def solution():\n    sum_of_numbers = 0\n    for i in range(1, 101):\n        if i % 5 == 2:\n            sum_of_numbers += i\n    return sum_of_numbers\n\nans = solution()"
    ],
    "a669b2ca57f844deb0cba08516ef70d7": [
        "def solution():\n    total_bags = 15\n    given_away = total_bags // 3\n    remaining_bags = total_bags - given_away\n    return remaining_bags\n\nans = solution()"
    ],
    "d18ff02cbbaf44fa82bc520bd52cd64e": [
        "def solution():\n    count = 0\n    for i in range(1, 4):  # Hundreds place can be any of 1, 2, 3 since the sum is only 5\n        for j in range(0, 10):\n            for k in range(0, 10):\n                if i + j + k == 5:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "e9072c6898d44fc28e315a6cd5657cfa": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 3):\n        A, B, C = perm\n        if A != 0:\n            ABC = A * 100 + B * 10 + C\n            return ABC\n\nans = solution()"
    ],
    "fb0a5cc20da34586a21b00309dee0247": [
        "def solution():\n    from itertools import permutations\n\n    for perm in permutations(range(10), 5):\n        A, B, C, D, E = perm\n        if A == 0 or D == 0:  # 'A' and 'D' cannot be 0 as they are the first digit of a 4-digit number\n            continue\n        ABAC = A*1001 + B*10 + C\n        DBEC = D*1000 + B*100 + E*10 + C\n        ACEDC = A*10000 + C*1000 + E*100 + D*10 + C\n        if ABAC + DBEC == ACEDC:\n            return DBEC\n\nans = solution()"
    ],
    "8fc9c10f7d7b46d7b2146cde6378f1ae": [
        "def solution():\n    # In order to win, the starting player (Chris in this case) must always leave Dylan with a position\n    # from which he can't win. The \"safe\" numbers of matches for Chris to leave after his turn are those\n    # that are multiples of 3 (since Dylan can only pick 1 or 2 matches, he can't leave Chris with another\n    # multiple of 3).\n    # Since there are 7 matches to start with, Chris needs to leave a multiple of 3 for Dylan after his turn.\n    # Therefore, Chris can take away either 1 or 2 matches to ensure this condition.\n    #\n    # A quick analysis will show that taking one match will leave 6 (a multiple of 3) matches for Dylan,\n    # which is a safe number for Chris. On the other hand, taking two matches would leave Dylan with 5\n    # matches, which is not a multiple of 3 and allows Dylan to leave Chris with a multiple of 3 on his\n    # following turn (by taking two matches, leaving Chris with 3).\n    #\n    # Thus, Chris must take away 1 match to ensure his victory.\n\n    return 1\n\nans = solution()"
    ],
    "36f6ee82d6634a45b07c1a4564134d1c": [
        "def solution():\n    n = 31  # Total number of nights\n    a_16 = 100  # Number of mosquitoes eaten on the 16th night\n    d = 6  # Common difference, 6 more mosquitoes each night\n\n    # Since we know the 16th term (a_16), we can find the first term (a_1)\n    # a_n = a_1 + (n-1)*d => a_16 = a_1 + (16-1)*d => a_1 = a_16 - (16-1)*d\n    a_1 = a_16 - (16-1)*d\n\n    # Sum of an arithmetic series S_n = n/2 * (2a_1 + (n-1)*d)\n    S_n = n/2 * (2*a_1 + (n-1)*d)\n\n    return int(S_n)\n\nans = solution()"
    ],
    "d32e98ac3f874eebacbd202b7baa856f": [
        "def solution():\n    morning_time = (9 * 60) + 23  # Convert 9.23am to minutes\n    afternoon_time = (13 * 60) + 6  # Convert 1.06pm to minutes (13:06 in 24-hour format)\n\n    diff_minutes = afternoon_time - morning_time  # Calculate the difference in minutes\n\n    return diff_minutes\n\nans = solution()"
    ],
    "c2a0bced20654e69a37a8243f7a0a817": [
        "def solution():\n    ans = 1.6 + 2.3 + 3.4 + 12.2 + 5.7 - 2.2\n    return ans\n\nans = solution()"
    ],
    "9391ddf6c35a4fde8892b40958afa033": [
        "def solution():\n    ans = (64 + 36) * (64 - 36)\n    return ans\n\nans = solution()"
    ],
    "14fb2dfc36d7462d9626934b2a9875a3": [
        "def solution():\n    # Sum of the first sequence: 1 to 9\n    sum1_to_9 = sum(range(1, 10))\n\n    # Sum of the second sequence: 8 to 1\n    sum8_to_1 = sum(range(1, 9))\n\n    # Total sum\n    total_sum = sum1_to_9 + sum8_to_1\n\n    return total_sum\n\nans = solution()"
    ],
    "3947062555df4a428b3e6b98a885d729": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n    \n    equation1 = Eq(3 * notebook + 4 * pencil_case + 5 * eraser, 50)\n    equation2 = Eq(notebook + pencil_case, 6)\n    equation3 = Eq(pencil_case + eraser, 8)\n\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n\n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "8321d60a92fb4651bd00bbee4c13a137": [
        "def solution():\n    # Assuming there is no specific information about the number of restaurants available\n    # for him to choose from, let's consider 'n' as the number of possible restaurants.\n    # The number of choices would be just 'n', as he can choose any one of the 'n' restaurants.\n    # Since the number of restaurants 'n' isn't provided, we assume that 'n' is the variable\n    # for the number of restaurants.\n\n    n = symbols('n')  # n is a variable representing the number of restaurants\n    ans = n  # The number of choices is equal to the number of restaurants\n\n    # Since this question doesn't provide a numerical value for 'n', we cannot compute\n    # a numerical answer. Hence, returning the symbolic expression for number of choices.\n    return ans\n\nans = solution()"
    ],
    "067406b4f4a04fa6a7916a17ca92b1ad": [
        "def solution():\n    ans = 6.6 * 30\n    return ans\n\nans = solution()"
    ],
    "7da62cc10f93447ebd5250a89d0612a9": [
        "def solution():\n    distance_to_market = 48  # meters\n    walking_speed = 8  # meters per minute\n    time_taken = distance_to_market / walking_speed  # minutes\n    return int(time_taken)\n\nans = solution()"
    ],
    "d4673ee1fc2f411f9eea5d8fc0e540a6": [
        "def solution():\n    # Initialize the total sum\n    total_sum = 0\n    # Starting value for the minuend (first number in each pair)\n    minuend = 53\n    # Starting value for the subtrahend (second number in each pair)\n    subtrahend = 50\n\n    # Loop to calculate sum of each pair\n    while minuend >= 23:\n        total_sum += minuend - subtrahend\n        # Decrease minuend and subtrahend by 6 for the next pair\n        minuend -= 6\n        subtrahend -= 6\n\n    return total_sum\n\nans = solution()"
    ],
    "85353e1815e64de9b01672fd4faa3880": [
        "def solution():\n    total_people = 4\n    average_age = 25\n    total_age = total_people * average_age\n    harry_age = 14\n    mom_age = 36\n    sister_age = 10\n    dad_age = total_age - (harry_age + mom_age + sister_age)\n    return dad_age\n\nans = solution()"
    ],
    "006b398886584c478594347960619995": [
        "def solution():\n    options = [8300, 200, 8, 0.5 * 100]  # Convert all options to cm\n    door_height_cm = 200  # Standard classroom door height is approximately 200 cm\n    closest = min(options, key=lambda x: abs(x - door_height_cm))\n\n    return closest\n\nans = solution()"
    ],
    "467fa0f0921245c98f8470b073242438": [
        "def solution():\n    return 16.4 / 20\n\nans = solution()"
    ],
    "c17044f418d74fb09f393b68cc8342fd": [
        "from itertools import permutations\n\ndef solution():\n    # Loop through all permutations of the digits 0-9\n    for p in permutations(range(10), 4):\n        A, E, _, _ = p\n        if A == 0:  # A cannot be 0 because it's the first digit of a four-digit number\n            continue\n        num = A*1000 + E*100 + E*10 + A\n        # Check divisibility by 9 using the digit sum method\n        if (A + E + E + A) % 9 == 0:\n            return num\n\nans = solution()"
    ],
    "d795930cfe064a999cc8e819cdf13cda": [
        "def solution():\n    total_digits = 450\n    pages = 0\n    digits = 0\n    \n    while digits < total_digits:\n        pages += 1\n        digits += len(str(pages))\n\n    return pages - 1\n\nans = solution()"
    ],
    "30df93da324249439f56623ab48606d3": [
        "def solution():\n    return 6.48 / 6\n\nans = solution()"
    ],
    "2132f99db9344be4a83936b1da90a005": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    initial_money = symbols('initial_money')\n    money_after_lunch = initial_money - 5/12 * initial_money\n    money_after_dinner = money_after_lunch - 2/7 * money_after_lunch\n    equation = Eq(money_after_dinner, 45)\n    result = solve(equation, initial_money)\n    return result[0]\n\nans = solution()"
    ],
    "d94b3c942f214ed29b7cb5c2b4f59231": [
        "def solution():\n    numbers = [12, 6, 9, 21, 7, 23]\n    largest = max(numbers)\n    smallest = min(numbers)\n    difference = largest - smallest\n    ans = 2 * difference\n    return ans\n\nans = solution()"
    ],
    "c0bcad55039843688a280266a75e3093": [
        "def solution():\n    count, pages, digits = 0, 0, 9\n\n    while count < 1524:\n        pages += 1\n        if pages < 10:\n            count += 1\n        elif pages < 100:\n            count += 2\n        elif pages < 1000:\n            count += 3\n        else:\n            count += 4\n\n    return pages\n\nans = solution()"
    ],
    "9df2844209ab4b48bb9e7656aff7a72a": [
        "def solution():\n    total_games = (5*4)/2  # Total games played in a round-robin tournament.\n    games_won_by_others = 2 + 1 + 4 + 3  # Sum of games won by Lily, Eva, Tina, and Emma.\n    games_won_by_gina = total_games - games_won_by_others  # Games won by Gina.\n\n    return int(games_won_by_gina)\n\nans = solution()"
    ],
    "18b4e19a2a474b58a2286cdb4391548c": [
        "def solution():\n    for avril_correct in range(11):\n        eddie_correct = avril_correct + 15//10\n        avril_points = avril_correct * 10 - (10 - avril_correct) * 5\n        eddie_points = eddie_correct * 10 - (10 - eddie_correct) * 5\n        if (avril_points + eddie_points) == 155:\n            return avril_correct\n\nans = solution()"
    ],
    "104e0f1c1be44d5eb09a1de0f61c9249": [
        "def solution():\n    import math\n\n    g = 9.81  # acceleration due to gravity (m/s^2)\n    d = 400  # distance along the slope (m)\n    theta = 20  # angle of incline (degrees)\n    mu_k = 0.2  # coefficient of kinetic friction\n\n    # convert angle to radians for math functions\n    theta_radians = math.radians(theta)\n\n    # the acceleration of the skier (net force divided by mass, mass cancels out)\n    a = g * (math.sin(theta_radians) - mu_k * math.cos(theta_radians))\n\n    # using kinematic equation v^2 = u^2 + 2as where u = initial velocity (0 m/s)\n    final_speed = math.sqrt(2 * a * d)\n\n    return final_speed\n\nans = solution()"
    ],
    "9a8905e262ef43708efc95e6c13e0dd2": [
        "def solution():\n    from math import gcd\n\n    # Weights of type A, B, and C coffee beans\n    a_weight = 56\n    b_weight = 96\n    c_weight = 120\n\n    # Compute the greatest common divisor (GCD) of the three weights\n    greatest_common_divisor = gcd(gcd(a_weight, b_weight), c_weight)\n\n    return greatest_common_divisor\n\nans = solution()"
    ],
    "39ac13b16ca64d7da0d126da55ae389f": [
        "def solution():\n    shirt_price = 5\n    bag_price = 10\n    total_spent = 300\n\n    # Marcus' calculation\n    marcus_group_price = shirt_price + bag_price\n    marcus_num_groups = total_spent / marcus_group_price\n    marcus_shirts_bought = marcus_num_groups * 1 # Here is the mistake\n\n    if marcus_shirts_bought == marcus_num_groups * 4:\n        # Marcus' solution is correct\n        return int(marcus_shirts_bought)\n    else:\n        # Correct calculation\n        num_groups = total_spent // (shirt_price * 4 + bag_price)\n        shirts_bought = num_groups * 4\n        return int(shirts_bought)\n\nans = solution()"
    ],
    "6045ecc17a8240cf847e28c4ca7327a7": [
        "def solution():\n    # 1 man's work per day\n    man_work_per_day = 1 / (6 * 5)\n    # 1 woman's work per day\n    woman_work_per_day = 1 / (5 * 6)\n    \n    # 10 men and 5 women's work per day\n    total_work_per_day = 10 * man_work_per_day + 5 * woman_work_per_day\n    \n    # Total days to complete the job\n    days_to_complete = 1 / total_work_per_day\n    \n    return days_to_complete\n\nans = solution()"
    ],
    "3028ecd60fde4f939707e80ce57d6888": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # At first, there were thrice as many boys as girls\n    initial_condition = Eq(boys, 3 * girls)\n\n    # After 12 boys left and 20 girls joined, there was an equal number of boys and girls\n    final_condition = Eq(boys - 12, girls + 20)\n\n    # Solve the system of equations\n    solutions = solve((initial_condition, final_condition), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "3e2ad7353ee34db7941ef7f4ec470ad8": [
        "def solution():\n    n = 35\n    factors = [i for i in range(1, n + 1) if n % i == 0]\n    ans = sum(factors)\n    return ans\n\nans = solution()"
    ],
    "12f08cb98de1436099e711b0564dfc03": [
        "def solution():\n    # Let the number of apples be x\n    # Then the number of bananas is 2x and the number of oranges is 3x\n    # Total fruits = 24\n    # Therefore, x + 2x + 3x = 24\n    \n    # Solving for x:\n    x = 24 / (1 + 2 + 3)\n    \n    # Number of bananas:\n    bananas = 2 * x\n    return int(bananas)\n\nans = solution()"
    ],
    "eeb7e226b5c04108bc05a1e3a95a4b52": [
        "def solution():\n    anna_age = 8\n    mother_age = 44\n    years = 0\n    while True:\n        years += 1\n        if (mother_age + years) == 3 * (anna_age + years):\n            break\n    return years\n\nans = solution()"
    ],
    "16622798daa848ff8e9a99b6b623c518": [
        "def solution():\n    # If every child gets at least one apple, we distribute 6 apples first,\n    # one to each child. This leaves us with 30 - 6 = 24 apples to distribute.\n    remaining_apples = 30 - 6\n\n    # The question asks for the minimum number of apples for the child who gets the most.\n    # To minimize this, we need to distribute apples as evenly as possible to the other five children,\n    # and then the remaining apples go to the sixth child, which will be the most.\n    # We start by assuming five children get an equal number of apples.\n    \n    # Distribute remaining apples to five children as evenly as possible\n    apples_per_child = remaining_apples // 5\n\n    # The remaining apples go to the sixth child\n    most_apples = apples_per_child + remaining_apples % 5\n\n    # Return the smallest possible number of apples the sixth child can get,\n    # which includes the initial apple given to each child\n    return most_apples + 1  # Adding the initial apple\n\nans = solution()"
    ],
    "f8678d8e2b9d4dccb1911a70b2606122": [
        "def solution():\n    total_animals = 12\n    total_legs = 34\n\n    for chickens in range(total_animals + 1):\n        rabbits = total_animals - chickens\n        if 2 * chickens + 4 * rabbits == total_legs:\n            return rabbits\n\nans = solution()"
    ],
    "70660cca1f444b77bd1bdaba3f54255b": [
        "def solution():\n    sugar = 55\n    water = 220\n    total_solution = sugar + water\n    concentration = (sugar / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "0c6f163b77d54e46bc6a8eadb82bfd9d": [
        "def solution():\n    for num in range(99, 9, -1):\n        if (num - 3) % 4 == 0 and (num - 3) % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "c2b040f49df54d38991df78d71cf954e": [
        "def solution():\n    total_ratio = 3 + 1\n    red_ratio = 3\n    total_paint = 1  # 1 liter\n\n    red_paint = (red_ratio / total_ratio) * total_paint\n\n    return red_paint\n\nans = solution()"
    ],
    "12caf8fca32e42febe42dd8469b710c0": [
        "def solution():\n    ans = 345 * 67\n    return ans\n\nans = solution()"
    ],
    "b86990b313b04b95b9eb607238d03c25": [
        "def solution():\n    numbers = [9, 7, 5, 8, 4, 1, 8]\n    mean_of_numbers = 6\n    total_numbers = len(numbers) + 1  # Total numbers including the missing one.\n    total_sum = mean_of_numbers * total_numbers\n    sum_of_known_numbers = sum(numbers)\n    missing_number = total_sum - sum_of_known_numbers\n    return missing_number\n\nans = solution()"
    ],
    "a73aefc56ebe4450b1c222659aca3dbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B = symbols('A B')  # Define symbols for the number of books in A and B\n    \n    # If A gives B 40 books, they have the same number\n    equation1 = Eq(A - 40, B + 40)\n    \n    # If B gives A 40 books, A has three times the books of B\n    equation2 = Eq(A + 40, 3 * (B - 40))\n    \n    # Solve the system of equations\n    result = solve((equation1, equation2), (A, B))\n    \n    return result[A]\n\nans = solution()"
    ],
    "48066947c0b143dfbd61973b59fefc94": [
        "def solution():\n    total_money = 68\n    money_given_to_sister = total_money / 4\n    money_left = total_money - money_given_to_sister\n    return money_left\n\nans = solution()"
    ],
    "e3a1d4b27da044ddad1173a844dfb144": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red = symbols('blue red')\n\n    equation1 = Eq(blue, 2 * red)\n    equation2 = Eq(blue + red, 18)\n\n    solutions = solve((equation1, equation2), (blue, red))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "db9996863bc84afb88970ac5c70f87dc": [
        "def solution():\n    total_grass = 8 * 10  # This can feed 8 cows for 10 days\n    days_to_feed = 5\n\n    # Calculate the amount of grass one cow consume in one day\n    cow_grass_per_day = total_grass / (4 * 15)\n\n    # Calculate how many cows can be fed for 5 days\n    cows_for_5_days = total_grass / (cow_grass_per_day * days_to_feed)\n\n    return int(cows_for_5_days)\n\nans = solution()"
    ],
    "a6e717d16ac04cf9b2916acf56c1b7e0": [
        "def solution():\n    # Start with allocating 1 apple to each child\n    # Since each child gets at least 1 apple and the numbers of apples each child gets are different,\n    # Allocate them as a sequence: 1, 2, 3, ..., 8 which is the minimum distribution to each child\n    # Sum up the minimal allocation\n    minimal_allocation_sum = sum(range(1, 9))  # this is 1+2+3+...+8\n\n    # The number of apples left after this minimal allocation\n    apples_left = 50 - minimal_allocation_sum\n\n    # Now the child with the most apples will be given the remaining apples on top of their current amount (8)\n    most_apples = 8 + apples_left\n\n    return most_apples\n\nans = solution()"
    ],
    "cacebdbc3369444fbebd09e2767b8146": [
        "def solution():\n    ans = 53 * 84\n    return ans\n\nans = solution()"
    ],
    "9f599323c52a4223810c1c60a307e07c": [
        "def solution():\n    total_mass_for_12_packets = 1.02  # Mass for 12 packets in kg\n    mass_per_packet = total_mass_for_12_packets / 12  # Mass for 1 packet\n    total_mass_for_4_packets = mass_per_packet * 4  # Total mass for 4 packets\n    return total_mass_for_4_packets\n\nans = solution()"
    ],
    "7886d22ab5aa4161949641294c6c9ba5": [
        "def solution():\n    tapes_cost = 3 * 9  # Cost of 3 tapes\n    cds_cost = 83 - tapes_cost  # Remaining money is the cost of 4 CDs\n    cost_per_cd = cds_cost / 4  # Cost of each CD, since they are identical\n    \n    return cost_per_cd\n\nans = solution()"
    ],
    "673c1a85dd1346948a16344e5724859d": [
        "def solution():\n    result = (2.4 * 52 / 100) + (7.6 * 52 / 100)\n    return result\n\nans = solution()"
    ],
    "ff48944eb4344d26a3b5d1bf2e5d6209": [
        "def solution():\n    total_cards = 876\n    # Let x be the number of cards Hisham has, then Melissa has 2x cards.\n    # Together they have x + 2x = 876 cards\n    x = total_cards // 3  # Hisham's cards\n    melissa_cards = 2 * x  # Melissa's cards\n\n    # After giving y cards to Hisham, both will have the same number of cards.\n    # Melissa will have 2x - y cards and Hisham will have x + y cards.\n    # This means 2x - y = x + y --> y = x\n\n    y = x  # Number of cards Melissa should give to Hisham\n\n    return y\n\nans = solution()"
    ],
    "5a83ea2badba4c79826ff79d1735c1b3": [
        "def solution():\n    may_short = 7\n    nancy_long = 18\n    may_total_length = may_short * 40 + 2.4 * 100  # Convert to cm\n    nancy_total_length = nancy_long * 70\n    may_long = (may_total_length - nancy_total_length) / 70\n    may_total_pieces = may_short + may_long\n    return may_total_pieces\n\nans = solution()"
    ],
    "040b8caf172f41a7bcb2b377bf7ecd95": [
        "def solution():\n    a, b = symbols('a b')\n    equations = (Eq(a + b, 6), Eq(a + 2*b, 15))\n    solutions = solve(equations, (a, b))\n    a_sol, b_sol = solutions[a], solutions[b]\n    \n    # Now we have first (a_sol) and second (b_sol) terms, compute up to seventh\n    seq = [a_sol, b_sol]\n    for _ in range(5):\n        seq.append(seq[-1] + seq[-2])\n    \n    return seq[6]\n\nans = solution()"
    ],
    "857fbe5325ea47fa86a2d4c017f4e01b": [
        "def solution():\n    true_result_diff = 99.396\n    divisor_with_decimal = 1.22\n\n    # Without the decimal point is simply multiplying by 100\n    divisor_without_decimal = divisor_with_decimal * 100\n\n    # Difference in divisors\n    divisor_difference = divisor_without_decimal - divisor_with_decimal\n\n    # Correction factor from the error introduced by not using the decimal point\n    correction_factor = true_result_diff * divisor_difference\n\n    # Add the correction factor to the wrong result to get the true result\n    true_result = correction_factor + true_result_diff\n\n    return true_result\n\nans = solution()"
    ],
    "dc7c1534320d4d5cbcc1d4abeb592b2c": [
        "def solution():\n    # Let x be the number Tasha first thought of\n    # According to the problem, we can set up the following equation\n    # 3 * x + 8 = 35\n    # Now we have to solve for x using inverse operations\n\n    # Subtract 8 from both sides of the equation\n    result_after_subtraction = 35 - 8\n    # Divide the result by 3 to find the original number\n    original_number = result_after_subtraction / 3\n\n    return original_number\n\nans = solution()"
    ],
    "8c47f81c09cb40598f99de91467025a0": [
        "def solution():\n    from math import gcd\n\n    boys = 28\n    girls = 32\n\n    max_groups = gcd(boys, girls)\n\n    return max_groups\n\nans = solution()"
    ],
    "83961d28b4bb455eb81f2d3b79db70dc": [
        "def solution():\n    liters = 1.7\n    millilitres_per_litre = 1000\n    \n    n = liters * millilitres_per_litre\n\n    return n\n\nans = solution()"
    ],
    "0b7e4617d9c047468385d1998eb2f78f": [
        "def solution():\n    ans = sum(36 * (1 / ((5 * i + 1) * (5 * i + 6))) for i in range(7))\n    return ans\n\nans = solution()"
    ],
    "57c4f3985bb74c62b7740a2f0c3435eb": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['4', '7', '5', '8', '3']\n    all_possible_numbers = [''.join(p) for p in permutations(digits)]\n    odd_numbers = filter(lambda x: int(x[-1]) % 2 != 0, all_possible_numbers)\n    smallest_odd_number = min(map(int, odd_numbers))\n    return smallest_odd_number\n\nans = solution()"
    ],
    "b4d1c1eb568e4c288faeed345d1531ee": [
        "def solution():\n    count = 0\n    for number in range(41):\n        if '2' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "bfde09b81d63442bb7d2bdc77be0b501": [
        "def solution():\n    # Number of rectangles\n    n = 4\n\n    # Number of regions created by the rectangles can be given by the formula\n    # regions = n^2 + n + 1 where n is the number of rectangles\n    regions = n**2 + n + 1\n\n    return regions\n\nans = solution()"
    ],
    "5da353b85f0d48589f3c7704501b8d05": [
        "def solution():\n    bill_coins = 20\n    jim_coins = 4 * bill_coins\n    return jim_coins\n\nans = solution()"
    ],
    "17f689a51b1e456cbd853cbb42f52f25": [
        "def solution():\n    from math import factorial\n\n    # Total family members\n    total_members = 5\n\n    # Total permutations without any restrictions\n    total_permutations = factorial(total_members)\n\n    # Permutations with Eddie in the middle\n    eddie_in_middle_permutations = factorial(total_members - 1)\n\n    # Possible ways Eddie and his family can line up\n    possible_ways = total_permutations - eddie_in_middle_permutations\n\n    return possible_ways\n\nans = solution()"
    ],
    "4c3f6d76550f4f3089cbf74b0f3d3fa9": [
        "def solution():\n    # Let's assume the total work is a multiple of men and women's daily work\n    # 24 men can complete the job in 16 days, so 1 man's 1 day work is (1 job / 24 men) / 16 days\n    man_work_per_day = 1 / (24 * 16)\n    \n    # Similarly, for women\n    # 16 women can complete the job in 24 days, so 1 woman's 1 day work is (1 job / 16 women) / 24 days\n    woman_work_per_day = 1 / (16 * 24)\n    \n    # Now, let's find out 10 men and 6 women's 1 day work\n    ten_men_one_day_work = 10 * man_work_per_day\n    six_women_one_day_work = 6 * woman_work_per_day\n    \n    # Total work done by 10 men and 6 women in 1 day\n    total_work_one_day = ten_men_one_day_work + six_women_one_day_work\n    \n    # Therefore, the total number of days needed to complete the work is 1 job divided by the work done in 1 day\n    days_needed = 1 / total_work_one_day\n    \n    return days_needed\n\nans = solution()"
    ],
    "5c7b9ce1905d45469426790e5ddb9e0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    julie = symbols('julie')\n    marion = 2 * julie\n    ethan = 5 * julie\n    equation = Eq(marion - ethan, -168)\n\n    julie_pay = solve(equation, julie)[0]\n    marion_pay = 2 * julie_pay\n    ethan_pay = 5 * julie_pay\n\n    total_pay = julie_pay + marion_pay + ethan_pay\n    return total_pay\n\nans = solution()"
    ],
    "6567f6570a0b4d6caced46d83395da96": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_money = symbols('initial_money')\n\n    money_after_watch = initial_money - (1/3)*initial_money\n    money_after_tie = money_after_watch - 56\n    money_left = (3/8)*initial_money\n\n    equation = Eq(money_after_tie, money_left)\n    solved_money = solve(equation, initial_money)\n\n    total_spent = initial_money - money_left\n    total_spent_value = total_spent.subs(initial_money, solved_money[0])\n\n    return total_spent_value\n\nans = solution()"
    ],
    "3581c52ad5c34fea8de834f138a507fc": [
        "def solution():\n    # Using the sequence to determine the common ratio\n    r = (24 / 96) ** (1/2)  # two steps between 96 and 24, so we take square root\n\n    # Calculate the missing term n\n    n = 96 * r\n\n    return n\n\nans = solution()"
    ],
    "9ea5b71855a94cfe9466fe43ab256389": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(\"123456789\"):\n        number = int(''.join(p))\n        if number % 11 == 0:\n            return number\n\nans = solution()"
    ],
    "934469ea45974c6ba8322d85bcd538d4": [
        "def solution():\n    eddie_speed = 3  # m/s\n    train_speed = 57  # m/s\n    time_to_pass = 10  # seconds\n\n    # Relative speed between Eddie and the train\n    relative_speed = train_speed + eddie_speed  # m/s\n\n    # Distance covered by the length of the train during the passage time\n    train_length = relative_speed * time_to_pass\n\n    return train_length\n\nans = solution()"
    ],
    "805758debabb4563927203c5d2eba2d2": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 5), (2, 7), (3, 9)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "7d867d91c93842129d709466df2f1adc": [
        "from itertools import product\n\ndef solution():\n    max_value = 0\n    operations = ['+', '*']\n    # Generate all possible combinations of '+' and '*' in the squares\n    for ops in product(operations, repeat=3):\n        expression = f\"1{ops[0]}2{ops[1]}3{ops[2]}4\"\n        # Evaluate the expression and update max_value if necessary\n        current_value = eval(expression)\n        if current_value > max_value:\n            max_value = current_value\n    return max_value\n    \nans = solution()"
    ],
    "e97cf0638a05496c87c776dfee4ba7b6": [
        "def solution():\n    total_marks = 63\n    correct_marks = 8\n    penalty_marks = -3\n    total_questions = 12\n\n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        if correct_answers * correct_marks + incorrect_answers * penalty_marks == total_marks:\n            return correct_answers\n\nans = solution()"
    ],
    "4543b18126fb4fdb9c0d73c1c80f65f8": [
        "def solution():\n    train_length = 700  # in meters\n    bridge_length = 900  # in meters\n    speed = 400  # in meters per minute\n\n    total_distance = train_length + bridge_length\n    time_to_cross = total_distance / speed\n\n    return time_to_cross\n\nans = solution()"
    ],
    "d57fcf981d694db99854d4d2d0775618": [
        "def solution():\n    # Initial two numbers of the sequence\n    a, b = 3, 10\n    for _ in range(1997 - 2):\n        # Calculate the next number in sequence as the sum of the last two\n        a, b = b, a + b\n        # Since we're interested in the remainder when divided by 3,\n        # compute the remainder at each step to prevent large numbers\n        a %= 3\n        b %= 3\n    return b  # The 1997th number's remainder when divided by 3\n\nans = solution()"
    ],
    "3147e744aa374d87a759f9e0a3b9f01c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Peter's and Sam's original amount of stickers\n    peter, sam = symbols('peter sam')\n\n    # Sam had 40 stickers more than Peter originally\n    equation1 = Eq(sam, peter + 40)\n\n    # After transactions, Sam had 96 stickers more than Peter\n    equation2 = Eq(sam - 0.20 * sam + 0.25 * peter, peter - 0.25 * peter + 0.20 * sam + 96)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (peter, sam))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "e6c04a41ffe547dfa735b74e506279e7": [
        "def solution():\n    peter_age = 45\n    pip_age = 7\n    pit_age = 14\n    years = 0\n    \n    while True:\n        years += 1\n        if peter_age + years == (pip_age + years) + (pit_age + years):\n            return peter_age + years\n\nans = solution()"
    ],
    "2379196da153459db255aa3aea3155e9": [
        "def solution():\n    return 1.25 * 47 * 8\n\nans = solution()"
    ],
    "14a74e5e758a457ebd877eab88a12538": [
        "def solution():\n    n = 10\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    return sum_of_cubes\n\nans = solution()"
    ],
    "ffa814576b094530af15324d4a55a06c": [
        "def solution():\n    ans = 2616 // 6\n    return ans\n\nans = solution()"
    ],
    "001ad7f411fa4eb8b4910ab06fd33b1c": [
        "def solution():\n    # Since the sum of the first 5 terms is 10, the average of the first 5 terms is 10 / 5 = 2.\n    # The first term (a1) and the 5th term (a5) have a difference of 4 * common difference (d).\n    # Thus, (a1 + a5) / 2 = 2\n    # => a1 + a1 + 4d = 4\n    # => 2a1 + 4d = 4\n    # Similarly, for the last 5 terms, summing to 120, the average of these 5 terms is 120 / 5 = 24\n    # The 56th term (a56) and the 60th term (a60) also have a difference of 4d\n    # => (a56 + a60) / 2 = 24\n    # => a56 + a60 = 48\n    # But a56 can be expressed in terms of a1 by adding 55d (since it's the 56th term)\n    # a56 = a1 + 55d\n    # So we substitute a56 in the above expression\n    # => a1 + 55d + a1 + 59d = 48\n    # => 2a1 + 114d = 48\n    # Now we have two equations:\n    # 1) 2a1 + 4d = 4 (from the sum of first 5 terms)\n    # 2) 2a1 + 114d = 48 (from the sum of last 5 terms)\n    # Subtract equation 1 from equation 2:\n    # (2a1 + 114d) - (2a1 + 4d) = 48 - 4\n    # => 2a1 + 114d - 2a1 - 4d = 44\n    # => 110d = 44\n    # => d = 44 / 110\n    # => d = 2 / 5\n    # Now we insert d back into the first equation to find a1:\n    # 2a1 + 4 * (2 / 5) = 4\n    # => 2a1 + 8 / 5 = 4\n    # => 2a1 = 4 - 8 / 5\n    # => 2a1 = 20 / 5 - 8 / 5\n    # => 2a1 = 12 / 5\n    # => a1 = (12 / 5) / 2\n    # => a1 = 6 / 5\n    # Now we have the first term (a1) and the common difference (d), we can find the sum of all 60 terms.\n    # The sum of an arithmetic sequence is given by n/2 * (first term + last term)\n    # The last term (a60) is a1 + 59d = 6/5 + 59 * 2/5\n    a60 = 6 / 5 + 59 * (2 / 5)\n    sum_all_terms = 60 / 2 * (6 / 5 + a60)\n\n    return sum_all_terms\n\nans = solution()"
    ],
    "31bc6cd2e2a24459b4a65c724b877090": [
        "def solution():\n    # There are 13 different numbers from 1 to 13\n    # If we draw one card of each number, we will have 13 cards\n    # To ensure consecutive numbers, we need to draw one more card\n    # This is because of the pigeonhole principle\n    # If we draw one card of each number, any additional card must be consecutive with one we already have \n    return 13 + 1\n\nans = solution()"
    ],
    "a85b2a0fbaee403bbf3d553375241db9": [
        "def solution():\n    ans = 296 // 8\n    return ans\n\nans = solution()"
    ],
    "fac549e40da243d680e79d593cff89f9": [
        "def solution():\n    answer = 10 * 2\n    return answer\n\nans = solution()"
    ],
    "9a89f94e62844db2ae26ce1b67de616f": [
        "def solution():\n    # Since the newspaper is folded, pages will be ordered such that the back page (36)\n    # and the front page (1) are on the same sheet. For every sheet, the sum of the page\n    # numbers will always be the sum of the first and last page numbers (36 + 1).\n    # Each sheet consists of 4 pages (2 on each side).\n    # Therefore, the fifth sheet will consist of pages 5*4-3, 5*4-2, 5*4-1, and 5*4,\n    # since pages are counted from both sides when folded.\n    # The sum of the fifth sheet's page numbers will be:\n    \n    sum_of_pages = (5*4-3) + (5*4-2) + (5*4-1) + (5*4)\n    return sum_of_pages\n\nans = solution()"
    ],
    "b6f89cabc4bd43e4a1af6187963a0b9f": [
        "def solution():\n    ans = (124 + 231) / 5\n    return ans\n\nans = solution()"
    ],
    "d1f0df83d1604882a3431fe789a7a764": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbols representing the number of laptops and the original cost per laptop\n    laptops, original_cost = symbols('laptops original_cost')\n\n    # Selling price of each laptop\n    selling_price = 2000\n    # Total profit in the first scenario\n    total_profit_first_scenario = 60000\n    # Total profit in the second scenario (increased by 30%)\n    total_profit_second_scenario = total_profit_first_scenario * 1.3\n    # Cost decrease factor (1/5 of the cost)\n    cost_decrease = 1/5\n\n    # Equation for the first scenario profit: \n    # Profit = (Selling price - Original cost) * Number of laptops\n    equation1 = Eq((selling_price - original_cost) * laptops, total_profit_first_scenario)\n\n    # Equation for the second scenario profit with decreased cost:\n    # New Profit = (Selling price - (Original cost - Cost decrease * Original cost)) * Number of laptops\n    equation2 = Eq((selling_price - (original_cost - cost_decrease * original_cost)) * laptops, total_profit_second_scenario)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (laptops, original_cost))\n\n    return solutions[laptops]\n\nans = solution()"
    ],
    "9af4e0d14e574f1690bfcf5bfb24c584": [
        "def solution():\n    first_term = 48\n    difference = 4\n    last_term = 80\n    # Calculate the number of rows (terms in the sequence)\n    num_rows = ((last_term - first_term) // difference) + 1\n    # Calculate the sum of the arithmetic sequence\n    total_seats = num_rows * (first_term + last_term) // 2\n    return total_seats\n\nans = solution()"
    ],
    "d4152b88afa849ccbb7f225bbecbf032": [
        "def solution():\n    from sympy import lcm\n    \n    # The LCM of the divisors will be a multiple of the smallest possible number M\n    multiple_of_M = lcm(7, 9, 28)  # lcm(7, 9, 28) is the same as lcm(lcm(7, 28), 9)\n\n    # As the remainders form an increasing arithmetic sequence and one of the divisors is 28\n    # which is a multiple of 7, the common difference of the arithmetic sequence has to be a multiple of 7\n    # We start with the smallest possible common difference which is 7 and\n    # iterate to find the smallest M that satisfies the condition for a\n\n    min_M = float('inf')  # initialize to infinity\n    for common_diff in range(7, multiple_of_M, 7):\n        for start_value in range(1, 7):  # As the remainder when M is divided by 7 must be less than 7\n            remainders = [start_value + i * common_diff for i in range(4)]\n            # Check if the sequence is valid by dividing the corresponding M by 9 and checking the remainder\n            # And also checking if the third term is an integer (since it's the remainder when\n            # divided by 'a' and must be a whole number less than 'a')\n\n            if remainders[1] % 9 == remainders[1] and remainders[2] < remainders[3] and type(remainders[2]) == int:\n                # Remainders[2] being less than remainders[3] is checked to assure the dividers\n                # are unique integers and satisfy the arithmetic progression condition\n\n                # Calculate M\n                M = remainders[0] + multiple_of_M\n                if M < min_M:\n                    min_M = M\n                    a_value = remainders[2]  # get the 'a' value which is the third remainder\n\n    return min_M\n\nans = solution()"
    ],
    "a547b3e6bb76410c9882a46dc1128679": [
        "def solution():\n    # Initialize the count of digits\n    count = 0\n    \n    # Count digits of the single-digit numbers (1-9)\n    count += 9\n    \n    # Count digits of the two-digit numbers (10-99)\n    count += 2 * (99 - 10 + 1)\n    \n    # Count digits of the three-digit numbers (100-129)\n    count += 3 * (129 - 100 + 1)\n    \n    return count\n\nans = solution()"
    ],
    "dafcea06104b4591957d341d8390c6b3": [
        "def solution():\n    sugar = 80\n    water = 420\n    total_solution = sugar + water\n    concentration_sugar = (sugar / total_solution) * 100  # percentage\n    return concentration_sugar\n\nans = solution()"
    ],
    "8b46eeb4c87f4598815e931b7d5d7fb1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hazel, mom = symbols('hazel mom')\n    # Hazel will be three times her current age in 12 years\n    equation1 = Eq(hazel + 12, 3 * hazel)\n    # On Hazel's 18th birthday, her mom will be three times her age then\n    equation2 = Eq(mom + (18 - hazel), 3 * 18)\n    \n    # Solve the system of equations for hazel and mom\n    solutions = solve((equation1, equation2), (hazel, mom))\n\n    # Hazel's mom's current age\n    return solutions[mom]\n\nans = solution()"
    ],
    "14976163f7ed48a59ba08230a3a9fbbe": [
        "def solution():\n    total_people = 400\n    ellie_rate = 60\n    combined_time = 4\n\n    combined_rate = total_people / combined_time\n    gloria_rate = combined_rate - ellie_rate\n    gloria_time = total_people / gloria_rate\n\n    return gloria_time\n\nans = solution()"
    ],
    "4fe05ec372ae4fd388877825449c2f71": [
        "def solution():\n    grams = 1756\n    kilograms = grams / 1000\n    return kilograms\n\nans = solution()"
    ],
    "5065cc90f1ca4fd59386ac472c8bfc71": [
        "def solution():\n    numerator = 2 * 15\n    denominator = 5\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "de19699381254d53a19e09b250810369": [
        "def solution():\n    # Initialize the total number of students and the difference in boys and girls\n    total_students = 0\n    difference = 36\n\n    # Assume the side of the square that the boys are occupying is b\n    # and the side of the square that the girls are occupying is g\n    # Then the total boys can be expressed as b^2 and the girls as g^2\n    # And the difference between boys and girls is b^2 - g^2 = difference\n    # Also, since boys and girls form concentric squares, b = g + 2\n    # Hence, (g + 2)^2 - g^2 = difference\n    # Expanding the equation, we get 4g + 4 = difference\n    # Now, solving for g\n    g = (difference - 4) // 4\n\n    # Using the value of g, calculate b\n    b = g + 2\n\n    # Now, calculate the total students which is b^2 + g^2\n    total_students = b**2 + g**2\n\n    return total_students\n\nans = solution()"
    ],
    "e0d4db42f51a486ebc92cb7153896228": [
        "def solution():\n    # Given: 3 men take 2 days to dig 120 metres\n    # Find: how many days for 4 men to dig 880 metres\n\n    # Using unitary method\n    # First, find the work done by one man in one day = (total work) / (number of men * number of days)\n    work_one_man_one_day = 120 / (3 * 2)\n\n    # Now, find the total work needed for the new trench = 880 metres\n    total_work_for_new_trench = 880\n\n    # Then, find the daily work done by 4 men = work done by one man in one day * number of men\n    daily_work_by_four_men = work_one_man_one_day * 4\n\n    # Finally, calculate the number of days required for 4 men to complete the new trench\n    # number of days = total work for new trench / daily work by 4 men\n    number_of_days = total_work_for_new_trench / daily_work_by_four_men\n\n    return number_of_days\n\nans = solution()"
    ],
    "ee3f24407cd74ec0b0589c27b4bb2f13": [
        "def solution():\n    numerator = 285 + 6/7 + 181 + 10/11 + 153 + 12/13\n    denominator = 1/7 + 1/11 + 1/13\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "aee6713edde34c8cb3f3aae969752a2a": [
        "def solution():\n    # Let the number of books moved from the first shelf to the second be x\n    # After moving x books, the first shelf will have (18 - x) books\n    # And the second shelf will have (24 + x) books\n    # We want the second shelf to have twice as many books as the first shelf\n    # So, we set up the equation 2 * (18 - x) = 24 + x\n    # Solving for x will give us the answer\n    \n    x = symbols('x')\n    equation = Eq(2 * (18 - x), 24 + x)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "7896d35343b54b5c86ea275d9e4da9f6": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let 'x' be the total number of pupils in the class\n    x = symbols('x')\n\n    # 5 pupils are in the band, so the remaining pupils are x - 5\n    # 3/4th of the remaining pupils are in the choir, so (3/4) * (x - 5) are in the choir\n    choir = (3/4) * (x - 5)\n\n    # 2/9th of the class are neither in the band nor the choir\n    neither = (2/9) * x\n\n    # equation: band (5) + choir + neither = total number of pupils (x)\n    equation = Eq(5 + choir + neither, x)\n\n    # solve the equation for x\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "9b43946bb50b4a52b1278ce86046276a": [
        "def solution():\n    time_seconds = 20  # Car takes 20 seconds to cross\n    distance_meters = 300  # The length of the bridge is 300 meters\n\n    # Speed is distance divided by time\n    speed_meters_per_second = distance_meters / time_seconds\n\n    # Convert speed from meters/second to kilometers/hour\n    speed_kilometers_per_hour = speed_meters_per_second * 3.6\n\n    return speed_kilometers_per_hour\n\nans = solution()"
    ],
    "817e9b740c9f4606b0221520b9045134": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(28 - 3 * (24 - 5*x), 1)\n    \n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f407d2ea5de540a9874f5a1d203b573e": [
        "def solution():\n    # Assuming we need x long tubes and y short tubes to hold 47 tennis balls\n    # x * 8 (balls per long tube) + y * 5 (balls per short tube) = 47\n    \n    # We will loop through the possible numbers of long tubes\n    # since we are looking for the number of long tubes\n    for x in range(47 // 8 + 1):  # Dividing 47 by 8 and adding 1 to include the boundary condition\n        y = (47 - 8 * x) / 5      # Calculate how many short tubes needed for the remaining balls\n        if y.is_integer():        # Check if the number of short tubes is a whole number\n            return x              # Return the number of long tubes if the condition is met\n\nans = solution()"
    ],
    "d51becf0516a4eeaa5484909769ed784": [
        "def solution():\n    third_term = 8\n    ninth_term = 26\n    term_difference = ninth_term - third_term\n    common_difference = term_difference // (9 - 3)\n\n    eleventh_term = ninth_term + 2 * common_difference\n    \n    return eleventh_term\n\nans = solution()"
    ],
    "d7a25a03a50d4d6f870a401ce650e9a1": [
        "def solution():\n    lollipops_left = 32\n    last_box_lollipops = 3\n\n    # Since both conditions must be met, the number of lollipops must be in both sequences\n    # Sequence when 4 lollipops per box: 32, 36, 40, ...\n    # Sequence when 7 lollipops per box and last box has 3 lollipops: 3 (mod 7)\n    # We're looking for the number that fits both patterns\n\n    # Starting with 32 lollipops left over condition\n    possible_lollipops = lollipops_left\n    while True:\n        # Check if it matches the second condition\n        if (possible_lollipops - last_box_lollipops) % 7 == 0:\n            # If it matches both conditions, we've found the answer\n            break\n        # Otherwise, move on to the next number in the sequence\n        possible_lollipops += 4\n\n    return possible_lollipops\n\nans = solution()"
    ],
    "acf798e814284f3da1ec80f45daf1b22": [
        "def solution():\n    numbers = [1, 2, 4, 5, 7, 8, 10, 11, 13, 14]\n    sum_cubes = sum([i**3 for i in numbers])\n    return sum_cubes\n\nans = solution()"
    ],
    "71858362e80c462a97a1d69a789cf304": [
        "def solution():\n    original_price = 18.60\n    discount = 15 / 100\n    discounted_price = original_price * (1 - discount)\n    \n    return discounted_price\n\nans = solution()"
    ],
    "31d498c8de6444af9466c0b067804d9a": [
        "def solution():\n    incorrect_result = 2138.4\n    true_result = incorrect_result / (432 - 4.32)\n    return true_result\n\nans = solution()"
    ],
    "cb369155904d41d3bbbbf4c1966b3f44": [
        "def solution():\n    sum_of_numbers = 9 + 99 + 999 + 9999\n    return sum_of_numbers\n\nans = solution()"
    ],
    "bbbdd4f32eff450382ddff68d9210fd4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    F_before, J_before, F_sold, J_bought, F_after, J_after = symbols('F_before J_before F_sold J_bought F_after J_after')\n\n    # Janice had 96 bracelets at first\n    J_before = 96\n\n    # Felicia sold 3/5 of her bracelets, Janice bought 2/5 of the bracelets that Felicia sold\n    F_sold = 3 / 5 * F_before\n    J_bought = 2 / 5 * F_sold\n\n    # After selling and buying, new conditions are set up\n    F_after = F_before - F_sold\n    J_after = J_before + J_bought\n    \n    # Ratio of the number of Felicia's bracelets to the number of Janice's bracelets became 5:7\n    ratio_eq = Eq(F_after / J_after, 5 / 7)\n    \n    # Also, F_after is 2/5 of F_before\n    F_after_eq = Eq(F_after, 2 / 5 * F_before)\n\n    # Solving the system of equations\n    solutions = solve((ratio_eq, F_after_eq), (F_before, J_bought))\n\n    # Returning the number of bracelets Janice bought from Felicia\n    return solutions[J_bought]\n\nans = solution()"
    ],
    "87557efca8df42a1b34010678b9a23bf": [
        "def solution():\n    # Calculating the difference in years between 2008 and 1996\n    year_difference = 2008 - 1996\n\n    # Age of grandmother in 1996\n    grandmother_age_in_1996 = 80 - year_difference\n\n    # Age of grandmother when mum was born (assuming mum was born when grandmother was 40 years old)\n    grandmother_age_when_mum_born = grandmother_age_in_1996 - 40\n\n    return grandmother_age_when_mum_born\n\nans = solution()"
    ],
    "bd44c92e7ad64e179de147924944ccae": [
        "def solution():\n    # The difference between the numbers\n    diff1 = 2758 - 2017\n    diff2 = 3670 - 2758\n    \n    # Find the GCD of the differences\n    from math import gcd\n    A_gcd = gcd(diff1, diff2)\n    \n    # To find all the factors of A_gcd\n    factors = set()\n    for i in range(1, int(A_gcd**0.5) + 1):\n        if A_gcd % i == 0:\n            factors.add(i)\n            factors.add(A_gcd // i)\n    \n    # Sum up the factors as the result\n    ans = sum(factors) - 1  # Excluding 1, as it's not a valid divisor providing a remainder\n\n    return ans\n\nans = solution()"
    ],
    "5a55a211033946a2b4c35af17fa8dfc6": [
        "def solution():\n    ans = 5 + 4 * 2\n    return ans\n\nans = solution()"
    ],
    "119dc81932594423a821eb0e3835d800": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    milk, fruit = symbols('milk fruit')\n    equation1 = Eq(milk / fruit, 7/9)\n    equation2 = Eq((milk - 8) / fruit, 2/3)\n\n    solutions = solve((equation1, equation2), (milk, fruit))\n\n    return solutions[milk]\n\nans = solution()"
    ],
    "708d8a95115e435f83a7c21859083e21": [
        "def solution():\n    return 15 - 8.36\n\nans = solution()"
    ],
    "40f1f703a3914f699ce57ea08f21df7e": [
        "def solution():\n    B = 1\n    while True:\n        if B % 3 == 1 and B % 5 == 2:\n            return B\n        B += 1\n\nans = solution()"
    ],
    "8370d497cc534bd1b69b748b4f2e7acf": [
        "def solution():\n    # Grandmother's age on 1st December 2008\n    granny_age_2008 = 80\n    \n    # Mum's age on 1st December 1996\n    mum_age_1996 = 40\n    \n    # Calculate the difference in years between 1996 and 2008\n    year_difference = 2008 - 1996\n    \n    # Calculate mum's birth year\n    mum_birth_year = 1996 - mum_age_1996\n    \n    # Calculate grandmother's age when mum was born\n    granny_age_when_mum_born = granny_age_2008 - year_difference - mum_age_1996\n    \n    return granny_age_when_mum_born\n\nans = solution()"
    ],
    "dcce40d2c5394a368e9835c3bd85ebaf": [
        "def solution():\n    count = 0\n    for number in range(4, 52):\n        count += str(number).count('3')\n        if number == 23:\n            return count\n\nans = solution()"
    ],
    "eedf0a2b13c7480981b6f0ae90e36208": [
        "def solution():\n    # Initialize the total income and total bottles\n    total_income = 2012\n    total_bottles = 350\n    price_lemonade = 4\n    price_plus = 7\n\n    # Initialize the minimum bottles of \"1000 Plus\" to be sold\n    min_plus_bottles = 0\n    \n    # Calculate the maximum bottles of \"1000 Plus\" that could be sold\n    max_plus_bottles = total_income // price_plus\n    \n    for plus_bottles in range(max_plus_bottles, -1, -1):\n        # Calculate the remaining income after selling \"1000 Plus\" bottles\n        remaining_income = total_income - (plus_bottles * price_plus)\n        # Calculate the number of lemonade bottles sold to make up the remaining income\n        lemonade_bottles = remaining_income // price_lemonade\n        \n        # Check if the numbers of bottles sold are within the total available\n        if lemonade_bottles + plus_bottles <= total_bottles:\n            min_plus_bottles = plus_bottles\n            break\n\n    return min_plus_bottles\n\nans = solution()"
    ],
    "513eb21b2999465f94c54ad7c1660b36": [
        "def solution():\n    # Number of friends\n    total_apples = 60\n    apples_per_friend = 4\n    friends_count = total_apples // apples_per_friend\n\n    # If each friend asks for one more apple\n    apples_needed = (apples_per_friend + 1) * friends_count\n\n    return apples_needed\n\nans = solution()"
    ],
    "3bce0db903cb4b46828346019eae5cb1": [
        "def solution():\n    return 546 + 287\n\nans = solution()"
    ],
    "7c8ab5ff603c4374855b52023ed9bc79": [
        "def solution():\n    marks = [15, 19, 13, 18, 20]\n    total_marks = sum(marks)\n    total_tests = len(marks)\n\n    mean_mark = total_marks / total_tests\n\n    return mean_mark\n\nans = solution()"
    ],
    "a04e2fb1ed1c471b8449b601924beb05": [
        "def solution():\n    average_initial = 60\n    average_final = 90\n        \n    # Total sum of initial three numbers\n    sum_initial = average_initial * 3\n    \n    # Total sum of final four numbers\n    sum_final = average_final * 4\n    \n    # The fourth number is the difference\n    fourth_number = sum_final - sum_initial\n    \n    return fourth_number\n\nans = solution()"
    ],
    "2766d440a8354c518fb5b8de557b59a9": [
        "def solution():\n    meters_to_centimeters = 0.52 * 100\n    return meters_to_centimeters\n\nans = solution()"
    ],
    "6d772586b0a84788980ab24fb3d29532": [
        "def solution():\n    # Let x be the number of groups with 4 pupils and y be the number of groups with 6 pupils\n    # We have two equations based on the problem:\n    # 4x + 6y = 112 (total number of students)\n    # x + y = 24 (total number of groups)\n    \n    # Rearrange the second equation to get a value for x: x = 24 - y\n    # Then substitute this value for x into the first equation\n    # 4(24 - y) + 6y = 112\n    # 96 - 4y + 6y = 112\n    # 2y = 112 - 96\n    # 2y = 16\n    # y = 16 / 2\n    # y = 8\n    \n    y = (112 - 4 * 24) // 2\n    return y\n\nans = solution()"
    ],
    "f7fe37c32c4d45b2971f9a684a87178f": [
        "def solution():\n    # To guarantee a pair of white socks, Yohan could pick all the red and black socks first.\n    # Since each color must have one less than the number needed to form a pair, he must take\n    # at most (number_of_red_socks + number_of_black_socks - 1) socks before he is guaranteed\n    # to pick a pair of white socks.\n    \n    red_socks = 10\n    black_socks = 10\n    \n    # Picking all red and black socks, one less than needed for a pair of white socks.\n    max_picks_without_white_pair = red_socks + black_socks\n    \n    # The next two picks could be white, giving us the first pair of white socks.\n    picks_to_get_white_pair = max_picks_without_white_pair + 2\n    \n    return picks_to_get_white_pair\n\nans = solution()"
    ],
    "0395b9449a6542edbdcf5b5c06f47904": [
        "def solution():\n    for A in range(1, 10):\n        for B in range(0, 10):\n            for C in range(0, 10):\n                if (100 * A + 10 * B + C) == ((A + B + C) ** 2) and A != B and B != C and A != C:\n                    return 100 * A + 10 * B + C\n\nans = solution()"
    ],
    "e63cc75a785d4d938794d1691bdf1f91": [
        "def solution():\n    # Define initial ratios\n    fish_to_rabbit_ratio = 3 / 2\n    rabbit_to_wheat_ratio = 4 / 3\n    \n    # Simplify the continued ratio to find fish to wheat ratio\n    fish_to_wheat_ratio = fish_to_rabbit_ratio * rabbit_to_wheat_ratio\n    \n    # Calculate how many fish are needed for 1 pack of wheat\n    fish_per_pack_wheat = 1 / fish_to_wheat_ratio\n    \n    # Calculate how many fish are needed for 8 packs of wheat\n    fish_for_eight_packs_wheat = fish_per_pack_wheat * 8\n    \n    # Return the number of fish needed\n    return fish_for_eight_packs_wheat\n\nans = solution()"
    ],
    "f16f67a593394039a3ef72a2e5b5e457": [
        "def solution():\n    total_money = 20\n    cost_pens = 3 * 1.60\n    cost_pencils = 2 * 0.62\n    cost_magazine = 4.50\n\n    total_cost = cost_pens + cost_pencils + cost_magazine\n    change = total_money - total_cost\n\n    return change\n\nans = solution()"
    ],
    "fdf018bb61cc4677813a36cc14cfe619": [
        "def solution():\n    return 65 + 88\n\nans = solution()"
    ],
    "833b1df560b94f9e8b69c9356f27b429": [
        "def solution():\n    n = 25\n    count = 0\n    \n    while n >= 5:\n        n //= 5\n        count += n\n    \n    return count\n\nans = solution()"
    ],
    "5b21a1a7d2744fbfa57fbc46e69a365c": [
        "def solution():\n    # Calculate the price before discount for the handbag\n    handbag_after_discount = 428\n    discount_handbag = 0.20  # 20%\n    handbag_before_discount = handbag_after_discount / (1 - discount_handbag)\n\n    # Total discount for handbag and purse\n    total_discount = 121\n    discount_purse = total_discount - (handbag_before_discount - handbag_after_discount)\n\n    # Calculate the price before discount for the purse\n    discount_rate_purse = 0.28  # 28%\n    purse_before_discount = discount_purse / discount_rate_purse\n\n    return purse_before_discount\n\nans = solution()"
    ],
    "59cc2f9a46c248fd832ddb6e4cb5db84": [
        "def solution():\n    total_height = 25\n    day_climb = 4\n    night_slide = 1\n    net_climb = day_climb - night_slide\n    current_height = 0\n    day_count = 0\n\n    while current_height < total_height:\n        day_count += 1\n        current_height += day_climb\n        if current_height >= total_height:\n            break\n        current_height -= night_slide\n    \n    return day_count\n\nans = solution()"
    ],
    "67da5f022f834e8d9713e38fb01fce1b": [
        "def solution():\n    times_per_week = 2\n    weeks = 2\n    total_times = times_per_week * weeks\n    return total_times\n\nans = solution()"
    ],
    "732cda7ed4134de8b845829f981525ea": [
        "def solution():\n    sum_of_recurring_digits = A + 2\n    total_sum_first_20_digits = 80  # Given in the problem statement\n    \n    # The recurring digits repeat every two digits. Therefore, for the first 20 digits,\n    # we will have 10 repetitions of the pattern A2\n    repetitions = 20 // 2\n\n    # Multiply the sum of the recurring digits by the number of repetitions\n    # to find the total sum and solve for A\n    A = (total_sum_first_20_digits - 2 * repetitions) / repetitions\n    \n    return int(A)\n\nans = solution()"
    ],
    "e2f0ace2f5554ef4a4b96194cf69005f": [
        "def solution():\n    quarter_of_398 = 398 / 4\n    return quarter_of_398\n\nans = solution()"
    ],
    "8dfe115ec4fe4aa881b30f336c891785": [
        "from math import gcd\n\ndef solution():\n    count = 0\n    for numerator in range(1, 2012):\n        denominator = numerator + 5\n        if gcd(numerator, denominator) == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "104457856ee04bf79d6b2d936f9025bb": [
        "def solution():\n    # Time spent jogging: from 6:30 AM to 7:00 AM = 30 minutes = 0.5 hours\n    jogging_speed = 6  # miles per hour\n    jogging_time = 0.5  # hours\n    jogging_distance = jogging_speed * jogging_time\n    \n    # Time spent walking: from 7:00 AM to 8:00 AM = 1 hour\n    walking_speed = 5  # miles per hour\n    walking_time = 1.0  # hours\n    walking_distance = walking_speed * walking_time\n    \n    # Total distance travelled\n    total_distance = jogging_distance + walking_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "d54e6eab7a2b49a8afcd367d2c88a350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    original_amount = symbols('original_amount')\n    spent_chair = 120\n    spent_jacket_fraction = 0.40\n    remaining_fraction = 0.30\n    \n    # Equation representing the remaining money after buying the chair\n    remaining_after_chair = original_amount - spent_chair\n    \n    # Equation for spending on the jacket\n    spent_on_jacket = spent_jacket_fraction * remaining_after_chair\n    \n    # Equation for the remaining money which is 30% of the original amount\n    equation = Eq(remaining_after_chair - spent_on_jacket, remaining_fraction * original_amount)\n    \n    # Solving for the original amount\n    solution = solve(equation, original_amount)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "a900a568f02d4a159d7b0f8c62c4e745": [
        "from math import gcd\n\ndef solution():\n    a = 6\n    b = 10\n    lcm = (a * b) // gcd(a, b)\n    return lcm\n\nans = solution()"
    ],
    "1aaf2aac3d134b9e8804dd390e239bda": [
        "def solution():\n    total_books = 35\n    layers = 4\n\n    # Apply Pigeonhole Principle to determine the minimum number of books\n    # in the layer with the most books\n    # By dividing the total number of books by the number of layers,\n    # and then rounding up to the next whole number\n    books_in_most_filled_layer = (total_books + layers - 1) // layers\n\n    return books_in_most_filled_layer\n\nans = solution()"
    ],
    "4f73e090c9d24ebf8913ba71fddf7af3": [
        "def solution():\n    count = 0\n    for hundred in range(1, 4):  # Given the choice of 1, 2, 3 for the hundred's place\n        for ten in range(0, 4):  # Given the choice of 0, 1, 2, 3 for the ten's place\n            for one in range(0, 4):  # Given the choice of 0, 1, 2, 3 for the one's place\n                if len(set([hundred, ten, one])) == 3:  # Ensure all digits are unique\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "483d2059d96645c8a1cd0eaef152a05a": [
        "def solution():\n    max_product = 0\n    for a in range(1, 31):\n        for b in range(1, 31 - a):\n            c = 31 - a - b\n            max_product = max(max_product, a * b * c)\n    return max_product\n\nans = solution()"
    ],
    "f1d3495298e84267bc30b1547d7319b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of books Ahmad originally bought.\n    x = symbols('x')\n\n    # Equation for the total cost of the original books.\n    original_cost = 3.5 * x\n\n    # Ahmad bought 2 more books at $6 each, so the total cost of additional books is 2 * 6.\n    additional_cost = 2 * 6\n\n    # New average cost is $4 after buying 2 more books.\n    new_average = 4\n\n    # New total number of books is x + 2.\n    new_total_books = x + 2\n\n    # Equation for the average price after buying 2 additional books.\n    equation = Eq((original_cost + additional_cost) / new_total_books, new_average)\n\n    # Solve the equation for x.\n    solutions = solve(equation, x)\n\n    # Number of books he bought originally plus 2 more books.\n    total_books = solutions[0] + 2\n\n    return total_books\n\nans = solution()"
    ],
    "79aaa41810464d378e8d61b04cee59b9": [
        "def solution():\n    return 129.35 - 0.47\n\nans = solution()"
    ],
    "844bb71707b14ba9b438958cdcf143a8": [
        "def solution():\n    for A in range(10):\n        for B in [2]:  # B is already given as 2\n            for C in range(10):\n                for D in [0]:  # D is already given as 0\n                    for E in range(10):\n                        for F in range(10):\n                            # Construct the two numbers based on the positions of the letters\n                            ABCDEF = int(f'{A}{B}{C}{D}{E}{F}')\n                            EFABCD = int(f'{E}{F}{A}{B}{C}{D}')\n                            \n                            # Check if the condition of the problem is satisfied\n                            if 5 * ABCDEF == 6 * EFABCD:\n                                # Ensure all digits are different\n                                if len(set([A, B, C, D, E, F])) == 6:\n                                    return int(f'{F}{A}{C}{E}')  # Return the four-digit number represented by \"FACE\"\n\nans = solution()"
    ],
    "7673b69c12a4478ba10dd72c7cba39cc": [
        "def solution():\n    weight_kg = 1.2\n    piece_weight_g = 30\n    total_pieces = (weight_kg * 1000) / piece_weight_g\n    return int(total_pieces)\n\nans = solution()"
    ],
    "6d6e8256edb347ee9e3d4d5dfa3a712c": [
        "def solution():\n    ans = 748 - 189\n    return ans\n\nans = solution()"
    ],
    "cd0cb1ffbdd74527b73e0b27a88458ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rachel, alice = symbols('rachel alice')\n\n    # If Rachel gives Alice 10 candies, they will have the same amount\n    equation1 = Eq(rachel - 10, alice + 10)\n\n    # If they both eat 8 candies, Rachel has 3 times as much as Alice\n    equation2 = Eq((rachel - 8)*3, alice - 8)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n    \n    rachel_candies = solutions[rachel]\n    alice_candies = solutions[alice]\n    \n    # Sum of candies they originally had\n    total_candies = rachel_candies + alice_candies\n    \n    return total_candies\n\nans = solution()"
    ],
    "4ecf79f778ae40b686861b81b759f60e": [
        "def solution():\n    # 1 liter is equal to 1.05668821 quarts\n    liters_to_quarts = 2.5 * 1.05668821\n    # Capacity of her cup in quarts\n    cup_capacity = 0.5\n    # Calculate the number of cups she can drink\n    cups = liters_to_quarts / cup_capacity\n    # Round to the nearest integer\n    return round(cups)\n\nans = solution()"
    ],
    "4845459ce472463eab28814467f9c4ae": [
        "def solution():\n    return 12.3 + 4.9\n\nans = solution()"
    ],
    "3a7e7f1ca5674fc894e02d029b5853cd": [
        "def solution():\n    return 18 // 3\n\nans = solution()"
    ],
    "a3975ec5c3e042a19cc5b99120625ee9": [
        "def solution():\n    for A in range(10):\n        for C in range(10):\n            for E in range(10):\n                for F in range(1, 10):  # F can't be 0 as it's the leading digit in EFABCD\n                    ABCDEF = A * 100000 + 2 * 10000 + 0 * 1000 + C * 100 + E * 10 + F\n                    EFABCD = E * 100000 + F * 10000 + A * 1000 + 2 * 100 + 0 * 10 + C\n                    if 5 * ABCDEF == 6 * EFABCD:\n                        return F * 1000 + A * 100 + C * 10 + E  # Return the number FACE\n                        \nans = solution()"
    ],
    "f9418bd52e404cb0ba8323619f7e16d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of sweet wrappers\n    angel, belle = symbols('angel belle')\n\n    # Create two equations based on the problem description\n    equation1 = Eq(angel, (5/6) * belle)\n    equation2 = Eq(angel - 58, 0.75 * belle)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (angel, belle))\n\n    return solutions[belle]\n\nans = solution()"
    ],
    "c6c173915a8044e697dc662694645197": [
        "def solution():\n    squares = 45\n    circles = squares // 3\n    triangles = squares * 2\n    total_shapes = squares + circles + triangles\n    return total_shapes\n\nans = solution()"
    ],
    "1806328c303e465aae52d08571416744": [
        "def solution():\n    for i in range(1, 10**5):\n        original_num = i\n        if str(original_num)[-1] == '9':\n            new_num = int('9' + str(original_num)[:-1])\n            if new_num == 4 * original_num:\n                return original_num\n\nans = solution()"
    ],
    "bd4a58a9e1f346c2a02141211d17aad3": [
        "def solution():\n    # System of equations to calculate the distance\n    # Star jogs from 6:30 am to 7:30 am for 1 hour at 6 miles/hour\n    jogging_time = 1  # Time in hours\n    jogging_speed = 6  # Speed in miles/hour\n    jogging_distance = jogging_speed * jogging_time\n\n    # Star walks from 7:30 am to 9:30 am for 2 hours at 5 miles/hour\n    walking_time = 2  # Time in hours\n    walking_speed = 5  # Speed in miles/hour\n    walking_distance = walking_speed * walking_time\n\n    # Total distance traveled by Star in the morning\n    total_distance = jogging_distance + walking_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "37a3bced5a4e423d82496aac9bccd711": [
        "def solution():\n    result = (4/9) * 36\n    return result\n\nans = solution()"
    ],
    "b83cbcd4901c48eabd1bebc1c3bd0eab": [
        "def solution():\n    salary = 3500\n    remit_percentage = 20 / 100\n    bank_charge_percentage = 0.5 / 100\n\n    remit_amount = salary * remit_percentage\n    bank_charge = remit_amount * bank_charge_percentage\n\n    return bank_charge\n\nans = solution()"
    ],
    "eeacd0848f0c4bb8b1df25d1292193a6": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10):  # We start from 1 since each vase should have at least 1 carnation\n        for x2 in range(1, 10):\n            for x3 in range(1, 10):\n                if x1 + x2 + x3 == 10 and len(set([x1, x2, x3])) == 3:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "0208115272b747ed9f455438107597e9": [
        "def solution():\n    account_balance = -76.20\n    payment_received = 120.75\n\n    ans = account_balance + payment_received\n\n    return ans\n\nans = solution()"
    ],
    "f6c1628be8644402bd9f85c22ea356d8": [
        "from datetime import datetime\n\ndef solution():\n    start_date = datetime(2023, 3, 2)\n    end_date = datetime(2023, 4, 15)\n    \n    diff = end_date - start_date\n    \n    return diff.days + 1  # Including the start date\n\nans = solution()"
    ],
    "29b56d3088d1435786656e1ffbb6008d": [
        "def solution():\n    # iterating through the possible numbers with 9 in the units column\n    for i in range(10, 10000):  # assuming special number has less than 5 digits\n        if int(str(9) + str(i)[:-1]) == 4 * i:\n            return i\n\nans = solution()"
    ],
    "eb53e414158c466caeef1968156633e7": [
        "def solution():\n    # Adding one glove from each of the 4 categories, we get 4 gloves with no guarantee of a matching pair\n    gloves = 1 + 2 + 3 + 4\n\n    # We need to add only one more glove to guarantee a matching pair, because there are only two colors\n    gloves += 1\n\n    return gloves\n\nans = solution()"
    ],
    "3693bdc4f96c495abe74ef6590148d91": [
        "def solution():\n    original_price = 200\n    increase_percentage = 45\n    new_price = original_price * (1 + increase_percentage / 100)\n    return new_price\n\nans = solution()"
    ],
    "ec35840ccd1248e5a6d29e1104245ccc": [
        "def solution():\n    from math import factorial\n\n    # Eddie is fixed on the left end, and Avril is next to Eddie, so we treat them as one entity.\n    # There are 5 remaining students to arrange, plus the one entity (Eddie and Avril).\n    total_students = 5 + 1  # 5 remaining students plus the Eddie-Avril pair.\n\n    # Calculate the permutations for these 6 entities.\n    permutations_entities = factorial(total_students)\n\n    # Avril can be either on Eddie's left or right.\n    avril_positions = 2\n\n    # The total number of ways is the product of the permutations of the entities\n    # and the positions Avril can take next to Eddie.\n    total_ways = permutations_entities * avril_positions\n\n    return total_ways\n\nans = solution()"
    ],
    "a9881864fa194fbdb56c0ce044f7e9a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of money each child gets and y be the number of children\n    x, y = symbols('x y')\n\n    # If each child was to receive 70 p, the total would be y * 70\n    # If each child got 60 p, 2.10 would be left, so the total is x*y + 2.10\n    # We can set up two equations based on these conditions:\n    equation1 = Eq(y * 70, x * y + 20)\n    equation2 = Eq(y * 60 + 2.10, x * y)\n\n    # Now we can solve the system of equations for y\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "a7dc9f6214394b39a9a7494116ffb8e3": [
        "def solution():\n    mean_value = 6\n    known_numbers = [9, 7, 5, 4, 1, 8, 8]\n    total_numbers = 8\n\n    total_sum = mean_value * total_numbers\n    missing_number = total_sum - sum(known_numbers)\n\n    return missing_number\n\nans = solution()"
    ],
    "969bbc016ec64147ba5857f77302bf8c": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    rachel, alice = symbols('rachel alice')\n\n    # Rachel gives Alice 10 pieces, they have the same number of sweets\n    equation1 = Eq(rachel - 10, alice + 10)\n    \n    # After eating 8 pieces each, Rachel has 3 times as many sweets as Alice\n    equation2 = Eq((rachel - 8) * 3, alice - 8)\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    total_sweets = solutions[rachel] + solutions[alice]\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "752173f5003b4bd6abe560d6fd64f3ea": [
        "def solution():\n    pasta_types = 2\n    sauce_types = 3\n    topping_types = 2\n    \n    combinations = pasta_types * sauce_types * topping_types\n    \n    return combinations\n\nans = solution()"
    ],
    "dac30729f20b435e955d54823c225c8a": [
        "def solution():\n    # Compute number of holes initially (every 3m)\n    initial_interval = 3\n    number_of_holes_initially = 300 // initial_interval\n\n    # Compute number of holes already dug (30 holes)\n    holes_dug = 30\n\n    # Compute number of holes to dig with new interval (every 5m)\n    new_interval = 5\n    number_of_holes_new = 300 // new_interval\n\n    # Calculate the additional holes needed\n    additional_holes = number_of_holes_new - holes_dug\n\n    return additional_holes\n\nans = solution()"
    ],
    "a9d1e1b3a6ff495da1992840b560d4ec": [
        "def solution():\n    def fib(n):\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n    \n    # Ways to reach the 5th step\n    ways_to_5th = fib(5)\n    \n    # Ways to reach the top from the 5th step (10 - 5 = 5 steps remaining)\n    ways_from_5th_to_top = fib(6) # include stepping from 5th to 6th\n    \n    # Total ways is the product of the two scenarios\n    total_ways = ways_to_5th * ways_from_5th_to_top\n    \n    return total_ways\n\nans = solution()"
    ],
    "55e306d2ed6b464bba4d3a62d5c153a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    number = symbols('number')\n    \n    equation = Eq((number + 3) / 4, 12)\n    \n    solution = solve(equation, number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "25a9b81e1f254a22ba8254c18f4094b6": [
        "def solution():\n    ans = sum(i * (16 - i) for i in range(1, 16))\n    return ans\n\nans = solution()"
    ],
    "d53e348d27d24f5f894e4c70ba210f90": [
        "def solution():\n    cookies = 1\n    while not (cookies % 3 == 1 and cookies % 4 == 3 and cookies % 5 == 4):\n        cookies += 1\n    return cookies\n\nans = solution()"
    ],
    "2553265bfbbf4a7aaae766e5e726bdde": [
        "def solution():\n    ans = 38 + (56 / 7) * 4\n    return ans\n\nans = solution()"
    ],
    "5fe9f334c8c54820a5b563a6ccd139b0": [
        "def solution():\n    erased_sum = 0\n    for i in range(1, 51):\n        if '3' in str(i):\n            erased_sum += i\n    return erased_sum\n\nans = solution()"
    ],
    "9ec6921203444761a39b2c67e85f0e88": [
        "def solution():\n    digits = 792\n    total_pages = 0\n    for i in range(1, digits + 1):\n        if i < 10:\n            total_pages += 1\n        elif i < 190:  # 10 - 99: 90 numbers, 2 digits each, 90*2=180 digits, total = 9 + 180 = 189\n            total_pages += 1 / 2\n        elif i < 2890:  # 100 - 999: 900 numbers, 3 digits each, 900*3=2700 digits, total = 189 + 2700 = 2889\n            total_pages += 1 / 3\n        else:\n            break\n    return int(total_pages)\n\nans = solution()"
    ],
    "a8c6a94a28e9428ab4b13cce74354488": [
        "def solution():\n    ivan_total = 80 * 5\n    billy_total = 89 * 4\n    billy_goal_average = 80 + 10\n    billy_goal_total = billy_goal_average * 5\n    \n    billy_5th_score = billy_goal_total - billy_total\n\n    return billy_5th_score\n\nans = solution()"
    ],
    "7a4bff3e5801439598b5006a37f9e671": [
        "from sympy import *\n\ndef solution():\n    x = symbols('x')\n    expression = '15+5*x*5+15-6+7' # replace the plus sign with x for multiplication\n    # assuming we can insert one pair of brackets around a single number or an operation involving two numbers\n    # let's search for the max result by inserting brackets in possible positions\n    possibilities = [\n        '(15+5)*(x*5+15)-(6+7)',\n        '((15+5)*x*5)+(15-6+7)',\n        '(15+5)*(x*(5+15))-6+7',\n        '15+(5*x)*(5+15)-(6+7)',\n        '15+(5*x*5)+(15-(6+7))',\n        '15+((5*x*5)+15)-6+7',\n        '15+(5*(x*(5+15))-6)+7',\n        '(15+5)*x*(5+15-6)+7',\n        '(15+5)*x*(5+(15-6)+7)',\n        '15+(5*x*5+15-6)+7'\n    ]\n\n    max_val = -float('inf') # initialize with negative infinity\n    max_expr = ''\n    for poss in possibilities:\n        current = eval(poss.replace('x', '*')) # replace x with multiplication sign and eval\n        if current > max_val:\n            max_val = current\n            max_expr = poss\n            \n    # Convert max_expr back to the original form with plus and times\n    max_expr_original = max_expr.replace('x', '*')\n    return max_val, max_expr_original\n\nans, _ = solution()"
    ],
    "6580c0b5f26f44f8b40aa50046f59348": [
        "def solution():\n    ways = 0\n    for x1 in range(1, 1001):\n        x2 = 1000 - x1\n        if x1 >= x2:\n            ways += 1\n    return ways\n\nans = solution()"
    ],
    "50d48bd4a4534e6794fdff42085da5c9": [
        "def solution():\n    lcm = 8 * 11  # Calculate the least common multiple of 8 and 11\n    for i in range(lcm, 100, lcm):  # Iterate through multiples of the LCM less than 100\n        if i % 8 == 6 and i % 11 == 6:  # Check if remainder is 6 for both divisions\n            return i - lcm + 6  # Adjust to find the first occurrence in two-digit numbers\n\nans = solution()"
    ],
    "a1e89dc194cd4d63832576ee3cf6e989": [
        "def solution():\n    from sympy import factorint\n    \n    factors = factorint(1260)\n    m = 1\n    for prime, power in factors.items():\n        if power % 2 != 0:\n            m *= prime\n    return m\n\nans = solution()"
    ],
    "689c63a78be543f190535ba4297790fc": [
        "def solution():\n    peaches = 45\n    apples = 5 + 2 * peaches\n    return apples\n\nans = solution()"
    ],
    "649064d7c05f4454a41370190bf8d34e": [
        "def solution():\n    n_th = 100  # the term we want to find\n    first_diff = 44 - 39  # the difference between the consecutive terms\n    # since 39 is the 7th term, we calculate the first term in the sequence\n    first_term = 39 - (7 - 1) * first_diff\n    \n    # then we find the 100th term using the first term and common difference\n    nth_term = first_term + (n_th - 1) * first_diff\n    \n    return nth_term\n\nans = solution()"
    ],
    "c736e99075ea4aa78054fd8167197424": [
        "def solution():\n    lcm_of_8_and_11 = 8 * 11  # Since 8 and 11 are coprime, their LCM is their product\n    # A number that leaves a remainder of 6 when divided by both 8 and 11 can be expressed as:\n    # number = k * lcm_of_8_and_11 + 6, where k is an integer\n    # Since the number is two-digit, we need to find the right k\n    for k in range(1, 10):\n        number = k * lcm_of_8_and_11 + 6\n        if 10 <= number <= 99:\n            return number\n    return None\n\nans = solution()"
    ],
    "ada1b1b89cec47f8849cd2d017a8b183": [
        "def solution():\n    students = 40\n    boat_capacity = 7\n    boats_needed = (students + boat_capacity - 1) // boat_capacity\n    return boats_needed\n\nans = solution()"
    ],
    "8690a8a142c04f6691c64b0d4fb396ae": [
        "def solution():\n    # Let the number of cards be x\n    # From the problem statement, we have two congruences:\n    # x ≡ 3 (mod 4)\n    # x ≡ 3 (mod 7)\n\n    # We are looking for a number x that leaves a remainder of 3 when divided by both 4 and 7.\n    # We can use the Chinese Remainder Theorem to find x, but since the problem\n    # asks for the remainder when x is divided by 28, we can simply find\n    # the least common multiple (LCM) of 4 and 7, which is 28, and add the remainder 3.\n    \n    # Since the LCM of 4 and 7 is 28, we can add the common remainder 3 to find\n    # the smallest number of cards that satisfies both conditions:\n    x = 28 + 3\n\n    # When arranged in piles of 28, the number of cards left over will be\n    # the remainder of x divided by 28, which will be 3 since x is 28 + 3.\n    ans = x % 28\n\n    return ans\n\nans = solution()"
    ],
    "3accd80c3de74ff4b09605882d0d3036": [
        "def solution():\n    table_price = 151.25\n    chair_price = 24.15\n    total_spent = table_price + chair_price\n    return total_spent\n\nans = solution()"
    ],
    "b61ef7925dd94c3fb08a4830a036e4a4": [
        "def solution():\n    # Finding the ones digit of 9 raised to any power can be done by looking at the pattern of ones digits for the powers of 9.\n    # 9^1 = 9 -> ones digit is 9\n    # 9^2 = 81 -> ones digit is 1\n    # 9^3 = 729 -> ones digit is 9\n    # 9^4 = 6561 -> ones digit is 1\n    # The pattern repeats every 2 powers: 9, 1, 9, 1, ...\n\n    # To find the ones digit of 999^99, we only need to consider the ones digit of 9^99.\n    # The exponent 99 modulo the pattern length (2) gives us the position in the pattern.\n    position_in_pattern = 99 % 2\n    \n    # If the position is 0, the ones digit is 1 (since it repeats every 2, and 1 is at position 2 second in the pattern)\n    # If the position is 1, the ones digit is 9 (since it's the first digit in the pattern)\n    if position_in_pattern == 0:\n        ones_digit = 1\n    else:\n        ones_digit = 9\n    \n    return ones_digit\n\nans = solution()"
    ],
    "dff026a0fb2549369d7be7c6aa7adf6b": [
        "def solution():\n    result = 1234\n    # We reverse the steps to deduce the birthday\n    result += 50                                 # Reverse of step (5)\n    # The day is added twice, so we need to find its contribution\n    # Since every step after the addition of the day (step 4) is just multiplication, \n    # the contribution of the day can be isolated by modulo 100 (because 50 * 2 = 100)\n    day = result % 100                           # Isolate the day contribution\n    result //= 100                               # Reverse the effect of multiplication by 50 (step 3) after extracting the day\n    result -= 1                                  # Reverse of step (2)\n    month = result // 4                          # Reverse of step (1)\n    return (month, day)\n\nans = solution()"
    ],
    "20db318a830540dea5738356c974b264": [
        "def solution():\n    animal_stickers = 38\n    fruit_stickers = 14\n    given_stickers = 9\n\n    remaining_stickers = (animal_stickers + fruit_stickers) - given_stickers\n\n    return remaining_stickers\n\nans = solution()"
    ],
    "5c4cd1d2ec4b44978363bea24ebfa91c": [
        ""
    ],
    "9521e8915fce4c6990100988ef474bdb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total value of the five ponies except Rein Beau.\n    x = symbols('x')\n\n    # When Rein Beau is in the small stable, the average value of the ponies there is (x + 250000) / 4\n    # When Rein Beau is in the large stable, the average value of the ponies there is (x + 250000) / 4\n    \n    # Before Rein Beau moves, the average value of the ponies in the small stable is x / 3\n    # and the average value of the ponies in the large stable is x / 3\n\n    # When Rein Beau moves, the average value of each stable increases by £10,000\n    equation = Eq((x + 250000) / 4, (x / 3) + 10000)\n\n    # Solve the equation for x\n    total_value_excluding_reinbeau = solve(equation, x)[0]\n\n    # Total value of all six ponies is the value of five ponies plus Rein Beau's value\n    total_value = total_value_excluding_reinbeau + 250000\n\n    return total_value\n\nans = solution()"
    ],
    "3baa88503f344e83b1afe7aee1dc88ea": [
        "def solution():\n    ans = 176 / 8\n    return ans\n\nans = solution()"
    ],
    "789c72c81c1f4343a6331f9136346c34": [
        "def solution():\n    ans = 64 * 42\n    return ans\n\nans = solution()"
    ],
    "3a2cd4abff9642379247f914750ea56d": [
        "def solution():\n    sugar = 7\n    water = 21\n    total_mixture = sugar + water\n    concentration = (sugar / total_mixture) * 100\n    return concentration\n\nans = solution()"
    ],
    "a78fc203de2e495b9c3e288ffa2f20f2": [
        "def solution():\n    # Set up the system of linear equations\n    # Let g represent the number of gold medals and s represent the number of silver medals.\n    # Then the system of equations is:\n    # 5g + 4s = 331 (points)\n    # g + s = 80 (medals)\n\n    # We solve this system of equations to find the values of g and s.\n    # From the second equation, we get s = 80 - g.\n    # Substitute s into the first equation and solve for g:\n    # 5g + 4(80 - g) = 331\n    # 5g + 320 - 4g = 331\n    # g = 331 - 320\n    # g = 11\n\n    # We find that g, the number of gold medals, is 11.\n    return 331 - 320\n\nans = solution()"
    ],
    "ffc0cb9420c84ae1a80072d5874cfa79": [
        "def solution():\n    cost_of_lamb = 8.70\n    cost_of_beef = 9.40\n    weight_of_lamb = 7\n    weight_of_beef = 30\n\n    total_cost = (cost_of_lamb * weight_of_lamb) + (cost_of_beef * weight_of_beef)\n    return total_cost\n\nans = solution()"
    ],
    "8161131c45e24fd3b0153fe5037c7c3d": [
        "def solution():\n    # Let's denote the three consecutive numbers as n, n+1, and n+2\n    # Their sum should be n + (n+1) + (n+2) = 60\n    # Simplifying it we get 3n + 3 = 60\n    # Now we solve for n\n    n = (60 - 3) // 3\n\n    # The largest number will be n+2\n    return n + 2\n\nans = solution()"
    ],
    "5bd73885b66a40709b62ae02cee893ef": [
        "def solution():\n    ans = 176 / 8\n    return ans\n\nans = solution()"
    ],
    "a37239e1c2af4896b905775df4d04faf": [
        "def solution():\n    ans = 234 + 578\n    return ans\n\nans = solution()"
    ],
    "f51701360c30428284abf7311cea43d8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let m be the work rate of one master per day\n    # Let a be the work rate of one apprentice per day\n    m, a = symbols('m a')\n\n    # Eq1: 1 master and 3 apprentices take 4 days to complete the task, so they complete 1/4 of the work in a day\n    eq1 = Eq(1 * m + 3 * a, 1 / 4)\n    # Eq2: 2 masters and 1 apprentice take 3 days to complete the task, so they complete 1/3 of the work in a day\n    eq2 = Eq(2 * m + 1 * a, 1 / 3)\n\n    # Solve the equations for m and a\n    solutions = solve((eq1, eq2), (m, a))\n    \n    # Calculate how long it would take 1 apprentice to complete the task alone\n    time_apprentice_alone = 1 / solutions[a]\n\n    return time_apprentice_alone\n\nans = solution()"
    ],
    "d02d6991f9044e2cac9926170d76efbe": [
        "def solution():\n    # Let the total number of spectators be x\n    # Equation for the number of women based on the given fractions\n    women = (1 - 1/3) * (1 - 5/8) * x\n\n    # Given that the number of women is 80, we can equate and solve for x\n    x = 80 / ((1 - 1/3) * (1 - 5/8))\n    \n    # Return the total number of spectators as an integer\n    return int(x)\n\nans = solution()"
    ],
    "01d43a1f75294754a6d7791646d4bb6e": [
        "def solution():\n    def new_operation(a, b):\n        return a + a * (b - 1)\n    \n    ans = new_operation(11, 10)\n    return ans\n\nans = solution()"
    ],
    "05e806ec585f447fac70a1de0f7fafd7": [
        "def solution():\n    position_elephant_left = 10\n    position_rabbit_right = 9\n    dolls_between = 5\n\n    total_dolls = position_elephant_left + position_rabbit_right + dolls_between - 1\n    return total_dolls\n\nans = solution()"
    ],
    "533391b7910c4d72b88782719e955c60": [
        "def solution():\n    part_inside_brackets = 11 / 52 / (2 + 3 / 4) * (4.3 - 1.8)\n    ans = 0.4 * part_inside_brackets * 26\n    return ans\n\nans = solution()"
    ],
    "8c65dcb55d104655a4964ef2003670c8": [
        "def solution():\n    # Starting with the smallest possible square of 3x3 (1 boy in the middle)\n    size = 3\n    while True:\n        # Number of boys is equal to the perimeter of the outer square\n        boys = size * 4 - 4\n        # Number of girls is equal to the total of the (size-2)x(size-2) inner square\n        girls = (size - 2)**2\n        if boys - girls == 32:\n            # Total number of students is the area of the square\n            total_students = size**2\n            return total_students\n        size += 2  # Increase the square size for boys and girls alternatingly\n\nans = solution()"
    ],
    "e35edf1fb63a4e5880945617f5b1aa9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_roses, original_daisies, planted_each_month = symbols('original_roses original_daisies planted_each_month')\n\n    total_flowers_now = Eq(original_roses + original_daisies, 300)\n    future_roses = Eq(original_roses + planted_each_month, 280)\n    future_daisies = Eq(original_daisies + planted_each_month, 180)\n\n    solutions = solve((total_flowers_now, future_roses, future_daisies), (original_roses, original_daisies, planted_each_month))\n\n    return solutions[original_roses]\n\nans = solution()"
    ],
    "4e8d72ffdc694d47a6676b0e8d8108c7": [
        "def solution():\n    from sympy import primerange\n\n    primes = list(primerange(50, 61))  # 61 is exclusive\n    return sum(primes)\n\nans = solution()"
    ],
    "be6d4037b22d46cb906e9ec47cc6b7e7": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n    position_difference = 15 - 10\n\n    common_difference = (fifteenth_term - tenth_term) / position_difference\n    term_difference = 102 - 10\n    \n    nd_term = tenth_term + (term_difference * common_difference)\n    \n    return nd_term\n\nans = solution()"
    ],
    "16e66be3bead4705bfdef4b05bca2651": [
        "def solution():\n    total_books = 3358\n    english_books = 2047\n    \n    remaining_books = total_books - english_books\n    comics = remaining_books // 3\n    \n    return comics\n\nans = solution()"
    ],
    "a01cc16fe4b240daacb5d33d3e822ab6": [
        "def solution():\n    return 8.002 + 10.421\n\nans = solution()"
    ],
    "ba03d5e5fb8f453c9e98a6881e4d689b": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    coffee_liters = 6\n\n    total_ratio = coffee_ratio + milk_ratio\n    latte_liters = (coffee_liters / coffee_ratio) * total_ratio\n\n    return latte_liters\n\nans = solution()"
    ],
    "8945cbc7b9b04405ae4a89f7f6240bbe": [
        "def solution():\n    accurate_shots = 6\n    lost_shots = 4\n    score_per_accurate_shot = 5\n\n    total_score = accurate_shots * score_per_accurate_shot\n    total_shots = accurate_shots + lost_shots\n\n    average_score = total_score / total_shots\n\n    return average_score\n\nans = solution()"
    ],
    "70d30636843c42d0a9438f05f8dc9d7c": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('0')\n    return count\n\nans = solution()"
    ],
    "d3338ec2774341618a2a54e2dd8271c5": [
        "def solution():\n    # To minimize the maximum number, we try to distribute the apples as evenly as possible.\n    # Start by giving each child one apple. We now have 50 - 8 = 42 apples left to distribute.\n    # Because the number of apples each child gets must be different, we give them to the children in increasing order.\n    # After the initial distribution, the sequence will start at 1 and increase by 1 for each additional apple. \n    # E.g., 1, 2, 3, 4, ..., to maximize the number of children before reaching the maximum.\n    \n    # We use the formula for the sum of an arithmetic sequence: sum = n/2 * (first_term + last_term)\n    # to find out the least number of apples the kid who gets the most can get.\n    # We continue increasing the sequence until the sum is greater than 42.\n    sum_of_apples = 0\n    i = 0\n    while sum_of_apples <= 42:\n        i += 1\n        sum_of_apples = i * (i + 1) // 2  # sum of first i natural numbers\n\n    # The sum has now exceeded 42 with the smallest i, we need to step back by one to get the max possible value of i\n    max_child_apples = i + 1  # +1 because we started from distributing 1 apple to each child initially\n\n    return max_child_apples\n\nans = solution()"
    ],
    "9bb2eab82c5d477485d34c73db23335d": [
        "def solution():\n    from fractions import Fraction\n    \n    # Calculating the fractions in the numerator and the denominator of the first complex fraction\n    numerator_1 = Fraction(1, 30) + Fraction(1, 6)\n    denominator_1 = Fraction(2, 25)\n    \n    # Calculating the first complex fraction\n    complex_fraction_1 = numerator_1 / denominator_1\n    \n    # Calculating the numerator and the denominator of the second complex fraction\n    numerator_2 = 2 - Fraction(2, 3)\n    denominator_2 = Fraction(8, 3)\n    \n    # Calculating the second complex fraction\n    complex_fraction_2 = numerator_2 / denominator_2\n    \n    # Adding the two complex fractions\n    ans = complex_fraction_1 + complex_fraction_2\n    \n    # Returning the answer as a float since the question doesn't specify the form of the answer\n    return float(ans)\n\nans = solution()"
    ],
    "12c9cf652a084a0780859470b77f7abb": [
        "def solution():\n    count = 0\n    for num_parts in range(2, 9):  # Consider dividing into two or more parts, up to 8 (all 1's).\n        # Calculate combinations for partitioning 8 into num_parts parts.\n        # Start with 8 ones. For every partition, we essentially choose num_parts-1 positions\n        # to place a 'plus' between the ones, which combines the adjacent ones.\n        # This is combinatorics problem of placing num_parts-1 indistinguishable\n        # items (pluses) into 7 distinguishable slots (between ones).\n        # The formula for this is C(n+k-1, k), which gives us C(8-1, num_parts-1).\n        count += math.comb(7, num_parts - 1)\n    return count\n\nimport math\nans = solution()"
    ],
    "25875cdc332046b7b367fa4d85e5897d": [
        "def solution():\n    total_cost = 11.4\n    weight_kg = 0.6\n    cost_per_kg = total_cost / weight_kg\n    return cost_per_kg\n\nans = solution()"
    ],
    "8e22c76c78f342539459fe92d4c4cf17": [
        "def solution():\n    total_eggs = 158\n    per_box = 12\n\n    num_boxes = (total_eggs + per_box - 1) // per_box\n\n    return num_boxes\n\nans = solution()"
    ],
    "25880b2e8da54b31803560072e23ded7": [
        "def solution():\n    ans = -7 - 4\n    return ans\n\nans = solution()"
    ],
    "f1b1106045274f7da63ef3c891f87c34": [
        "def solution():\n    train_length = 253\n    tunnel_length = 669\n    speed = 104\n\n    # The entire train passes through a tunnel when the front of the train\n    # exits the tunnel. This is the sum of the lengths of the train and the tunnel.\n    total_distance = train_length + tunnel_length\n\n    # Time taken to pass through the tunnel is total distance divided by speed.\n    time = total_distance / speed\n\n    return time\n\nans = solution()"
    ],
    "adb62673a17442e2b006b7f5afbcd666": [
        "def solution():\n    return -7 - 4\n\nans = solution()"
    ],
    "457957b559d5468b8aeb74e2ef585f75": [
        "def solution():\n    return 0.5 * 0.2 * 350\n\nans = solution()"
    ],
    "96b12e33af8a4a438cc3968e7b3f70d7": [
        "def solution():\n    from math import factorial\n\n    # Ali and Bala are considered as a single unit, as they must stand together.\n    # Together with Dan, Charles, and Ella, this effectively makes 4 units to arrange.\n    num_units = 4\n\n    # Arrange the 4 units, where Dan is already at furthest left.\n    arrangements_units = factorial(num_units - 1)\n\n    # Ali and Bala can switch places within their unit.\n    arrangements_ali_bala = 2\n\n    # The total arrangements will be the product of both possibilities.\n    total_arrangements = arrangements_units * arrangements_ali_bala\n\n    return total_arrangements\n\nans = solution()"
    ],
    "397ebb0d5b224df59aad1f5b774838fd": [
        "def solution():\n    total_men = 40\n    bow_ties = 18\n    spectacles = 23\n\n    # To find the greatest number of men not wearing bow ties and not wearing spectacles,\n    # we minimize the overlap between bow ties and spectacles.\n    # Since everyone at least wears something, the maximum overlap is the minimum of the two.\n    # Hence, the number of people who wear both is at least bow_ties + spectacles - total_men.\n    both = bow_ties + spectacles - total_men\n\n    # Subtract the number of men who wear both bow ties and spectacles from the total number of men\n    # wearing either bow ties or spectacles.\n    neither = total_men - (bow_ties + spectacles - both)\n\n    return neither\n\nans = solution()"
    ],
    "d23d120cfeb64135ab69663205810fbe": [
        "def solution():\n    return (1 / 3) * 414\n\nans = solution()"
    ],
    "7604f69468c6421ebdd1ba850cd8b42d": [
        "def solution():\n    # First find the exchange rate between fish and rabbits: 3 fish for 2 rabbits\n    # which is 3/2 fish per rabbit\n    fish_per_rabbit = 3 / 2\n    \n    # Then find the exchange rate between rabbits and packs of wheat: 3 rabbits for 4 packs of wheat\n    # which is 3/4 rabbits per pack of wheat\n    rabbits_per_pack_of_wheat = 3 / 4\n    \n    # To find the exchange rate between fish and packs of wheat, multiply the two rates\n    fish_per_pack_of_wheat = fish_per_rabbit * (1 / rabbits_per_pack_of_wheat)\n    \n    # Now calculate how many fishes are needed for 8 packs of wheat\n    fishes_for_eight_packs_of_wheat = fish_per_pack_of_wheat * 8\n    \n    return fishes_for_eight_packs_of_wheat\n\nans = solution()"
    ],
    "13ec2dec449b48e5b1f5949021f5319a": [
        "def solution():\n    # First exchange ratio: 3 fishes for 2 rabbits, 1 fish for 2/3 rabbits\n    fishes_to_rabbits = 2 / 3\n\n    # Second exchange ratio: 3 rabbits for 4 packs of wheat, 1 rabbit for 4/3 packs of wheat\n    rabbits_to_wheat = 4 / 3\n\n    # Now find out how many fishes are needed for 1 pack of wheat\n    fishes_to_wheat = fishes_to_rabbits * rabbits_to_wheat\n\n    # Calculate how many fishes are needed for 8 packs of wheat\n    fishes_for_8_wheat = fishes_to_wheat * 8\n\n    return fishes_for_8_wheat\n\nans = solution()"
    ],
    "bac3e6b470ff4843842320df6d600e95": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "fb1c97df146541bebe3162f2e72c1cc0": [
        "def solution():\n    digits = 0\n    for i in range(1, 140 + 1):  # Iterate through 1 to 140 inclusive\n        digits += len(str(i))  # Count the number of digits in each page number\n    return digits\n\nans = solution()"
    ],
    "6bd2a5cd9d044be0ba73d47aa5238bbd": [
        "from math import factorial\n\ndef solution():\n    # Dan must stand at the furthest left which fixes his position.\n    # Ali and Bala must stand together, so we treat them as a single unit.\n    # There will now be 3 \"units\" to arrange: (Ali + Bala), Charles, and Ella.\n    # We can first arrange these 3 \"units\" and then Ali and Bala within their \"unit\".\n    \n    # Number of ways to arrange the 3 \"units\": 3!\n    unit_arrangement = factorial(3)\n    \n    # Number of ways to arrange Ali and Bala within their \"unit\": 2!\n    ali_bala_arrangement = factorial(2)\n    \n    # Total arrangements is the product of unit arrangements and Ali-Bala arrangements.\n    total_arrangements = unit_arrangement * ali_bala_arrangement\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "b3e5cbab90804708bce6148613126f16": [
        "def solution():\n    # We need at least one red, white and yellow to have 3 different colored balls\n    # In the worst case, we could draw all balls of one color before getting a single ball of another color\n    # To guarantee at least one red ball, we might draw all white and yellow balls first\n    \n    # Total white and yellow balls\n    white_yellow_balls = 9 + 6\n    \n    # Now we draw one more ball which guarantees at least one red\n    at_least_one_red = white_yellow_balls + 1\n    \n    return at_least_one_red\n\nans = solution()"
    ],
    "4f366210af224a9f9f43bbc93ae4f875": [
        "def solution():\n    terms = [2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35]\n    \n    return sum(terms)\n\nans = solution()"
    ],
    "9b13d74bafa4466eb645ffa554df735b": [
        "def solution():\n    from itertools import permutations\n\n    digits = [2, 7, 8]\n    perm = permutations(digits, 3)\n    count = len(list(perm))\n\n    return count\n\nans = solution()"
    ],
    "6b79f6ee87a44493b182c62048b92e66": [
        "def solution():\n    # Correct the mistake to find difference\n    # From the description, the correct subtrahend should have a 3 in the tens place and a 2 in the ones place\n\n    for i in range(10, 100):  # Loop through all possible 2-digit minuends\n        wrong_subtrahend = 53  # Mistaken subtrahend\n        correct_subtrahend = 32  # Correct subtrahend\n\n        # Verify if the difference with mistaken subtrahend is 36\n        if i - wrong_subtrahend == 36:\n            # Calculate correct difference with correct subtrahend\n            correct_difference = i - correct_subtrahend\n\n            # Return the correct difference\n            return correct_difference\n\nans = solution()"
    ],
    "9939fb896f824a2881087102f27ab8c3": [
        "def solution():\n    total_length = 11.7\n    used_fence = 3.2\n    used_woods = 6.5\n\n    remaining_length = total_length - used_fence - used_woods\n\n    return remaining_length\n\nans = solution()"
    ],
    "bb27ebca96a14753b3a39b73a2462099": [
        "def solution():\n    from itertools import permutations\n\n    digits = [2, 7, 8]\n    three_digit_numbers = set(permutations(digits, 3))\n\n    return len(three_digit_numbers)\n\nans = solution()"
    ],
    "ee5084c8c8d24c4bbeb5d061801cc169": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ellen, lenny = symbols('ellen lenny')\n    \n    # Ellen gives away 12 sweets: ellen - 12 = (13/24) * (ellen + lenny)\n    equation1 = Eq(ellen - 12, (13/24) * (ellen + lenny))\n    \n    # Lenny gives away 12 sweets: lenny - 12 = (3/8) * (ellen + lenny)\n    equation2 = Eq(lenny - 12, (3/8) * (ellen + lenny))\n    \n    solutions = solve((equation1, equation2), (ellen, lenny))\n\n    ellen_sweets = solutions[ellen]\n    lenny_sweets = solutions[lenny]\n\n    return ellen_sweets + lenny_sweets\n\nans = solution()"
    ],
    "eadf933fa489425a8e7934fbc30dfdf8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    T = symbols('T')\n    tax_for_first_50k = 0.06 * 50000\n    tax_for_rest = (0.06 + T) * (120000 - 50000)\n    total_tax = tax_for_first_50k + tax_for_rest\n\n    equation = Eq(total_tax, 10000)\n\n    T_value = solve(equation, T)\n\n    return T_value[0]\n\nans = solution()"
    ],
    "1482dca47e9c40c88fa457ae47419d81": [
        "def solution():\n    smallest = 12345\n    largest = 98760\n    return largest - smallest\n\nans = solution()"
    ],
    "60b84c6fa7f240ffafb43217e82d66db": [
        "from math import factorial\n\ndef solution():\n    total_gifts = 7\n    total_children = 5\n    ways_without_restrictions = factorial(total_gifts) // factorial(total_gifts - total_children)\n\n    # Case 1: Neither Richard nor Kevin gets either the car or the puzzle/calculator\n    case_1 = factorial(5) // factorial(5 - total_children)\n\n    # Case 2: Richard gets a car or puzzle, Kevin doesn't get the other one\n    case_2 = 2 * (factorial(5) // factorial(5 - total_children))\n\n    # Case 3: Kevin gets a car or calculator, Richard doesn't get the other one\n    case_3 = 2 * (factorial(5) // factorial(5 - total_children))\n\n    # Subtract cases where restrictions are violated\n    total_ways = ways_without_restrictions - case_1 - case_2 - case_3\n\n    return total_ways\n\nans = solution()"
    ],
    "05e460cdfe874f2fbb3c0d1f81ffbec5": [
        "def solution():\n    train_length = 200  # in meters\n    tunnel_length = 500  # in meters\n    speed = 10  # in meters per second\n\n    # Duration for the train to completely enter the tunnel is the time it takes for the\n    # entire train to pass a point, which is its own length at the given speed.\n    enter_duration = train_length / speed\n    \n    # Duration to pass through the tunnel, not including the length of the train,\n    # is the tunnel length at the given speed.\n    tunnel_duration = tunnel_length / speed\n    \n    # The total duration is the sum of the time it takes to entirely enter the tunnel\n    # and the time to pass through the tunnel length.\n    total_duration = enter_duration + tunnel_duration\n\n    return total_duration\n\nans = solution()"
    ],
    "97138baaf4754087a327cc1e83d8fd4f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "764c50d4619f44199a22a6b9f383ed24": [
        "def solution():\n    price_per_pound = 49  # in pence\n    pounds_bought = 2\n    total_cost = price_per_pound * pounds_bought\n    money_given = 100  # £1 = 100 pence\n    change = money_given - total_cost\n    return change\n\nans = solution()"
    ],
    "14c07a0f9d734b5088fba3845ed8db4d": [
        "def solution():\n    from sympy import isprime\n\n    n = 1\n    while True:\n        # Test the primality of n and n's subsequent expressions\n        if all(isprime(n + i) for i in (0, 4, 6, 132, 250)):\n            return n\n        n += 1\n\nans = solution()"
    ],
    "f018488d15f94b99915f6422728512b7": [
        "def solution():\n    return 374 * 36\n\nans = solution()"
    ],
    "c9a79ce675034b2489e740af3c031037": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the price of each rabbit\n    rabbit1, rabbit2, rabbit3 = symbols('rabbit1 rabbit2 rabbit3')\n\n    # Equations based on the problem statement\n    equation1 = Eq(rabbit2, rabbit1 + 2)\n    equation2 = Eq(rabbit3, rabbit2 - 0.8)\n    equation3 = Eq(rabbit1 + rabbit2 + rabbit3, 19.70)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (rabbit1, rabbit2, rabbit3))\n\n    # Extract the cost of the first rabbit\n    return solutions[rabbit1]\n\nans = solution()"
    ],
    "1695f1a256a845c4b26912c5783eb123": [
        "def solution():\n    total_weight = 200  # total weight of the sugar solution in grams\n    concentration_percent = 15  # concentration of sugar in the solution\n    sugar_weight = (concentration_percent / 100) * total_weight  # weight of the sugar in grams\n    \n    return sugar_weight\n\nans = solution()"
    ],
    "23a1e04ca6614f4d99436ccdd578cd9c": [
        "def solution():\n    # Using the identity a^2 - b^2 = (a + b)(a - b)\n    ans = sum((2 * i + 2) * 2 for i in range(1, 2021, 2))\n    return ans\n\nans = solution()"
    ],
    "2e878688541b46f5b7d0726609b2d7ef": [
        "def solution():\n    ans = 42.3 + 10.5 + 2.7 - 4.5\n    return ans\n\nans = solution()"
    ],
    "44ecc4dcdaa54831860666d510b464ce": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(4.6 * x - 0.35, 0.57)\n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "56bd9145d93e48f49139ec624dac2068": [
        "def solution():\n    jack_speed = 15  # km per hour\n    rose_speed = 10  # km per hour\n    meeting_time = 10  # hours\n\n    jack_distance = jack_speed * meeting_time\n    rose_distance = rose_speed * meeting_time\n\n    distance_between_A_and_B = jack_distance - rose_distance\n\n    return distance_between_A_and_B\n\nans = solution()"
    ],
    "6bf760b6b8a740cda324d6bb831f42b3": [
        "def solution():\n    multiples_of_7 = 5000 // 7\n    multiples_of_13 = 5000 // 13\n    multiples_of_both = 5000 // (7 * 13)\n\n    return multiples_of_7 + multiples_of_13 - multiples_of_both\n\nans = solution()"
    ],
    "b4fbda1fc3454970a479018d78ecff7c": [
        "def solution():\n    number = 48739\n    remainder = number % 3\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = 3 - remainder\n    return ans\n\nans = solution()"
    ],
    "a65121c2cf9a4a3f88d13765512d893a": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    total_ways = factorial(7) // (factorial(3) * factorial(2))  # Total possible permutations without restriction\n    s_together = factorial(5) // factorial(2)  # Treat 'SS' as one unit, so we have 5 units including 2 C's\n    \n    # Since 'SS' can be in 6 different positions, we multiply s_together by 6 to count all permutations with any two S together\n    s_together *= 6  \n    return total_ways - s_together  # Subtract permutations where any two S's are together from total permutations\n\nans = solution()"
    ],
    "54c307c65d4942e3a14a0c97e9c6453b": [
        "def solution():\n    total_pupils = 467\n    girls = 333\n    teachers = 36\n\n    boys = total_pupils - girls\n    more_boys_than_teachers = boys - teachers\n\n    return more_boys_than_teachers\n\nans = solution()"
    ],
    "70c643f015a64e749fe17245d8f47ced": [
        "def solution():\n    # Let x be the number of days David worked on the journal\n    # David's work rate is 1/10 of the journal per day\n    # Emma's work rate is 1/18 of the journal per day\n\n    # Total work done by David and Emma is 1 journal\n    # David worked for x days, so he did x/10 of the journal\n    # Emma worked for (14 - x) days, so she did (14 - x)/18 of the journal\n    \n    # The equation representing their combined work is:\n    # x/10 + (14 - x)/18 = 1 (journal)\n    # We solve for x to find out how many days David worked\n    \n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(x/10 + (14 - x)/18, 1)\n    \n    days_david_worked = solve(equation, x)[0]\n    # Days Emma worked on the journal is the total days minus the days David worked\n    days_emma_worked = 14 - days_david_worked\n    \n    return days_emma_worked\n\nans = solution()"
    ],
    "c40a0a6c89c3412b86d23bb5ec098bae": [
        "def solution():\n    tshirts_bought = 138\n    remaining_money = 56\n    total_tshirts = 145\n    \n    # Price per T-shirt\n    price_per_tshirt = remaining_money / (total_tshirts - tshirts_bought)\n    \n    # Total money Josephine had\n    total_money = tshirts_bought * price_per_tshirt + remaining_money\n\n    return total_money\n\nans = solution()"
    ],
    "7a791003812544b6bac377d65f16cb90": [
        "def solution():\n    # total sum of numbers = average * number of terms\n    total_sum = 119 * 14\n    # The sum of an even number arithmetic series is n/2 * (first_term + last_term)\n    # But we also know that the total number of terms (n) is 14\n    # so we can represent last_term as (first_term + 13 * 2), because the difference between consecutive even numbers is 2\n\n    # Let's now form the equation for the sum: n/2 * (first_term + (first_term + 13 * 2))\n    # Simplifying the above gives: 7 * (2 * first_term + 26) = total_sum\n    # Further simplification and solving for the first_term gives us:\n    # first_term = (total_sum / 7 - 26) / 2\n  \n    first_term = (total_sum / 14 - 26) // 2\n    return int(first_term)\n\nans = solution()"
    ],
    "d2e88cea338f4ce69692532138d94fcb": [
        "def solution():\n    # The sum of the 14 consecutive even numbers is average * number of terms\n    total_sum = 119 * 14\n\n    # If x is the first even number, x + 2 is the second, and so on.\n    # The sum of the first and last term of an arithmetic sequence is:\n    # 2x + 26 = total_sum / 14  (since there are 14 terms and we multiply the first term, x, by 2 to include the last term)\n    # So we solve for x:\n    x = (total_sum / 14 - 26) / 2\n\n    return int(x)\n\nans = solution()"
    ],
    "75a7726543e04bea836b118cb451097f": [
        "def solution():\n    # The number of different heights possible is the difference plus 1 (inclusive)\n    num_heights = 132 - 124 + 1\n    \n    # Pigeonhole principle: to ensure at least 4 students have the same height\n    # we need one more than 3 times the number of different heights\n    # (since in the worst case, the first 3 * num_heights students could all have unique heights)\n    class_size = 3 * num_heights + 1\n    \n    return class_size\n\nans = solution()"
    ],
    "51ad861e00ec431192e04a5eb59b3380": [
        "def solution():\n    original_pay_per_hour = 6.50\n    percentage_increase = 12 / 100\n    new_pay_per_hour = original_pay_per_hour * (1 + percentage_increase)\n    return new_pay_per_hour\n\nans = solution()"
    ],
    "f1d598e9e6754a5fb544e02dd210fd8f": [
        "def solution():\n    # Since Rachel needs 12 minutes to cut a piece of wood into 5 sections,\n    # the wood is being cut into 4 pieces because the first cut gives you two sections already.\n    # So, it takes 12 minutes for 4 cuts.\n    cuts_for_one_wood = 4\n    time_for_one_wood = 12\n    \n    # If she needs to cut the same piece of wood 5 more times, she needs to make 5 cuts.\n    additional_cuts_needed = 5\n    \n    # The time required for one cut can be calculated by dividing the total time by the number of cuts.\n    time_per_cut = time_for_one_wood / cuts_for_one_wood\n    \n    # Now calculate the time needed for 5 additional cuts.\n    time_for_five_cuts = time_per_cut * additional_cuts_needed\n    \n    return time_for_five_cuts\n\nans = solution()"
    ],
    "d5259f3a5c6e4402838e70389234367f": [
        "def solution():\n    # Since the number is divisible by 11, check for divisibility rule for 11\n    # The rule for divisibility by 11 is that the difference between the sum of\n    # the digits in the odd places and the sum of the digits in the even places should be 0 or a multiple of 11\n    \n    # The number format is 1a2a3a4a5a, which gives us two sums:\n    # Sum of digits at odd places: 1 + 2 + 3 + 4 + 5 = 15\n    # Sum of digits at even places: a + a + a + a = 4a\n\n    # Applying the divisibility rule, their difference should be a multiple of 11\n    # 15 - 4a = 0 (mod 11)\n    # -4a = -15 (mod 11)\n    # To find the value of a, we simplify the equation modulo 11\n\n    for a in range(10):  # since 'a' is a single digit, it ranges from 0 to 9\n        if (15 - 4 * a) % 11 == 0:\n            return a\n\nans = solution()"
    ],
    "cba5a4b77fcc4b47a485159e97c6c596": [
        "def solution():\n    total_pounds = 126  # Total pounds in pence\n    # Let x be the number of each coin\n    # 2p + 5p = 7p for each set of one 2p coin and one 5p coin\n    # Total number of coins is 3x, and the total value is 7x pence\n\n    # To find x, divide the total amount by 7\n    x = total_pounds // 7\n\n    # The total number of coins is 3 times x\n    total_coins = 3 * x\n\n    return total_coins\n\nans = solution()"
    ],
    "473dae367faa457db6245d50b030a2d2": [
        "def solution():\n    # The pattern of the last digit of powers of 3 repeats every 4 steps: 3, 9, 7, 1\n    pattern = [3, 9, 7, 1]\n    \n    # Since the pattern repeats every 4 numbers, find the remainder of the exponent divided by 4\n    remainder = 2009 % 4\n    \n    # Use the remainder to find the corresponding last digit from the pattern (subtract 1 because list indices start at 0)\n    last_digit = pattern[remainder - 1]\n    \n    return last_digit\n\nans = solution()"
    ],
    "074c52d7c8884541a53bd81c8516e4ae": [
        "def solution():\n    number = 2 * 5  # smallest even number that is a multiple of 5\n    while True:\n        # Check if the number is a square by taking the square root and checking if it's an integer\n        if (number**0.5).is_integer():\n            return number\n        number += 10  # increment by 10 to ensure the number remains even and a multiple of 5\n\nans = solution()"
    ],
    "76292cab066c4804960c0eb334442333": [
        "def solution():\n    child_discount = 0.25\n    senior_discount = 0.20\n    child_ticket_cost = 30\n\n    adult_ticket_cost = child_ticket_cost / (1 - child_discount)\n    senior_ticket_cost = adult_ticket_cost * (1 - senior_discount)\n\n    return senior_ticket_cost\n\nans = solution()"
    ],
    "f3b9f2f5f0a543b39b7bca6031d203f9": [
        "def solution():\n    from math import factorial as fact\n\n    # We are using the formula for distributing 'n' identical items into 'r' distinct groups\n    # which includes the possibility of some groups being empty, which is given by the formula\n    # (n+r-1)! / [(r-1)! * n!]\n    n = 20  # number of books\n    r = 4   # number of kids\n\n    # applying the formula to calculate the number of ways to distribute books\n    ways = fact(n + r - 1) // (fact(r - 1) * fact(n))\n\n    return ways\n\nans = solution()"
    ],
    "acc5ff5f2838429d9de00e4ee08fb1fa": [
        "def solution():\n    # Let's assume there are x people at the party\n    # Then, x * 2/5 are adults\n    # This leaves x - (x * 2/5) = x * 3/5 people who are children\n    # Among the children, 5/9 are boys, so girls are x * 3/5 * 4/9\n    # It is given that there are 36 girls at the party\n    # Therefore, x * 3/5 * 4/9 = 36\n    # Solve for x\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x * 3/5 * 4/9, 36)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "35fcb930a0bc41a894f13b4d2d264e48": [
        "def solution():\n    men = 3\n    days_for_men = 30\n    people = 2\n\n    work_done = men * days_for_men\n    days_for_people = work_done / people\n    return days_for_people\n\nans = solution()"
    ],
    "ceda71c2bab34d10981c8cc631f857e6": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "b7384c3ef6ce4e10accddb590b454709": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    will_now = symbols('will_now')  # Will's current age\n    # Equation: Will's age in 8 years (will_now + 8) is 4 times his age 4 years ago (will_now - 4)\n    equation = Eq(will_now + 8, 4 * (will_now - 4))\n\n    # Solve the equation to find Will's current age\n    will_current_age = solve(equation, will_now)[0]\n\n    return will_current_age\n\nans = solution()"
    ],
    "203d878b270d4d88a12ed23389c40a46": [
        "def solution():\n    first_term = 1\n    last_term = 97\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_series\n\nans = solution()"
    ],
    "ac50d3117292453c911bc6e43ec859a8": [
        "def solution():\n    # There are 3 trains, 4 cars, and 2 boats. You can choose 1 mode of transport\n    # among each category for a single trip.\n    # The total different ways you can go from A to B is the product of the\n    # number of options for each mode of transportation.\n    \n    trains = 3\n    cars = 4\n    boats = 2\n    \n    # Using the law of multiplication for independent events\n    total_ways = trains * cars * boats\n    \n    return total_ways\n\nans = solution()"
    ],
    "f15729b8c3bf42758bf674b97e695b4a": [
        "def solution():\n    total_pages = 981\n    pages_per_day = 25\n\n    days_to_finish = total_pages / pages_per_day\n\n    return int(days_to_finish)\n\nans = solution()"
    ],
    "e8ac97a4703d48e3a8d90b8986df72d1": [
        "from math import comb\n\ndef solution():\n    # Each child gets at least two books, so we distribute 2 books to each first,\n    # which means we're left with 30 - (2*5) = 20 books to distribute.\n    remaining_books = 30 - 5 * 2\n\n    # Now, we have to distribute these 20 books among 5 kids, where order does not matter\n    # and repetitions are allowed. This is a problem of distributing identical objects\n    # into distinct boxes, which is equivalent to the problem of combinations with repetition.\n    \n    # The formula for combinations with repetition is C(n+k-1, k),\n    # where n is the number of types of objects (books in this case) and k is the number of kids.\n\n    # In this case, n = 20 (remaining books) and k = 5 (kids),\n    # so we have C(20+5-1, 5) = C(24, 5).\n    \n    ways = comb(24, 5)\n    \n    return ways\n\nans = solution()"
    ],
    "a6292732361347fa8c864895f6e10ae3": [
        "def solution():\n    return 6846 * 8\n\nans = solution()"
    ],
    "7988af13cd9a4c19b46db9fc0c0bb229": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mike, mason, chewy = symbols('mike mason chewy')\n    equation1 = Eq(mason, 2/3 * chewy)\n    equation2 = Eq(chewy, 40/100 * mike)\n    equation3 = Eq(mike - mason, 550)\n\n    solutions = solve((equation1, equation2, equation3), (mike, mason, chewy))\n\n    total_soup_ml = sum(solutions.values())\n    total_soup_litres = total_soup_ml / 1000  # Convert ml to litres\n\n    return total_soup_litres\n\nans = solution()"
    ],
    "06e06b65731b4ae182bc34f8bdf78ad2": [
        "def solution():\n    principal = 1000\n    rate = 0.06\n    time = 2\n\n    balance = principal * ((1 + rate) ** time)\n    \n    return balance\n\nans = solution()"
    ],
    "65c188bedd614322a61cdc7a8fd0c01b": [
        "def solution():\n    total_girls = 28\n    likes_one_direction = 20\n    likes_the_vamps = 17\n    likes_both = 15\n\n    likes_neither = total_girls - (likes_one_direction + likes_the_vamps - likes_both)\n\n    return likes_neither\n\nans = solution()"
    ],
    "d634317608b54dbcb954484f4a8c548c": [
        "def solution():\n    road_length = 500\n    tree_interval = 5\n    num_trees = (road_length / tree_interval) + 1\n\n    return int(num_trees)\n\nans = solution()"
    ],
    "2b895d9f585d4c72b559deecf56f1079": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jug, cup = symbols('jug cup')\n\n    equation1 = Eq(4 * jug + 5 * cup, 85)\n    equation2 = Eq(2 * jug + 2 * cup, 40)\n\n    solutions = solve((equation1, equation2), (jug, cup))\n\n    return solutions[cup]\n\nans = solution()"
    ],
    "1bee107571854f2d87bb88f1fc9b38c1": [
        "from itertools import permutations\nfrom fractions import Fraction\n\ndef solution():\n    operations = ['+', '-', '*', '/']\n    max_sum = 0\n    second_largest_term = None\n\n    for perm in permutations(operations):\n        term1 = eval(f\"Fraction(1, 2) {perm[0]} Fraction(1, 9)\")\n        term2 = eval(f\"Fraction(1, 3) {perm[1]} Fraction(1, 8)\")\n        term3 = eval(f\"Fraction(1, 4) {perm[2]} Fraction(1, 7)\")\n        term4 = eval(f\"Fraction(1, 5) {perm[3]} Fraction(1, 6)\")\n\n        c_sum = term1 + term2 + term3 + term4\n        c_terms = sorted([term1, term2, term3, term4])\n        \n        if c_sum > max_sum:\n            max_sum = c_sum\n            second_largest_term = c_terms[-2]\n\n    A, B = second_largest_term.numerator, second_largest_term.denominator\n    return A + B\n\nans = solution()"
    ],
    "7c988a58a14c48c19fd7ebda71673015": [
        "def solution():\n    classrooms = 27\n    chairs_each = 28\n    total_chairs = classrooms * chairs_each\n    return total_chairs\n\nans = solution()"
    ],
    "ce2a11f3530044e69f0f940d2177c842": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    x = symbols('x')\n    inequality = Eq((x + 3) / (2 * x + 5), 0.505)\n    \n    # Solve the inequality and find x\n    # The solve function provides the solution in the form of a list with a tuple\n    solutions = solve(inequality, x)\n    # Since we want the largest integer value of x that is less than the solution, we use floor\n    ans = int(solutions[0]) - 1\n\n    return ans\n\nans = solution()"
    ],
    "f3ea48411a6c498184b21b3604aa2db8": [
        ""
    ],
    "240bc3106e614b409ed75b112d8a5572": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 89))\n    return ans\n\nans = solution()"
    ],
    "982d68ff78fb4d07914cf20c9a917bb2": [
        "def solution():\n    total_pupils = 235 + 567\n    pupils_each_room = total_pupils // 2\n    return pupils_each_room\n\nans = solution()"
    ],
    "faaa8deed0db48a0b6707146113de1c2": [
        "def solution():\n    ans = 818 - 271 - 18 + 64 - 29 + 36\n    return ans\n\nans = solution()"
    ],
    "27bdd20547f24d8985bedec355b3bcb2": [
        "def solution():\n    ans = 193 * 72\n    return ans\n\nans = solution()"
    ],
    "b0db81c8fe684031982ca97bbbbe4f6c": [
        "def solution():\n    spent_money = 89.65\n    remaining_money = 20.35\n\n    initial_money = spent_money + remaining_money\n\n    return initial_money\n\nans = solution()"
    ],
    "bfc856ed693948c5bc8692af12953e1d": [
        "def solution():\n    # A right angle triangle inscribed in a circle can only occur when the hypotenuse is the diameter of the circle.\n    # Since diameter passes through the center of the circle, there can only be a single fixed diameter for a given set of points.  \n    # In this case, the 12 points on the circle define 6 diameters. \n    # For each diameter, we can select the third point (which forms the right angle) in 10 ways (12 points in total minus the 2 defining the diameter).\n    # The number of right angled triangles for each diameter is thus 10.\n    # Since there are 6 diameters, we have a total of 6 * 10 right angled triangles.\n\n    num_diameters = 12 // 2\n    num_right_angle_points = 12 - 2\n\n    count = num_diameters * num_right_angle_points\n\n    return count\n\nans = solution()"
    ],
    "fe9555e52b6940b58bc0240731da3d6c": [
        "def solution():\n    nth_term_10 = 23\n    nth_term_15 = 38\n    common_difference = (nth_term_15 - nth_term_10) / (15 - 10)\n\n    nth_term_12 = nth_term_10 + common_difference * (12 - 10)\n\n    return nth_term_12\n\nans = solution()"
    ],
    "e25bc60d63ca444999ac89d8eb2ef5f4": [
        "def solution():\n    sum_value = 0\n    numerator = 1\n    denominator = 1\n    for i in range(1, 8):\n        denominator += i\n        next_denominator = denominator + (i + 1)\n        sum_value += (numerator / (denominator * next_denominator))\n        numerator += 1\n        denominator = next_denominator\n    sum_value += 1 / denominator\n    return sum_value\n\nans = solution()"
    ],
    "1b578ba89dc64a0497a494ff8c376cf1": [
        "def solution():\n    from math import gcd\n\n    A = 24\n    B = 36\n    C = 42\n\n    def lcm(x, y):\n        return x * y // gcd(x, y)\n\n    ans = gcd(gcd(A, B), C)\n\n    return ans\n\nans = solution()"
    ],
    "caef56015c2546c787649e8de4983b71": [
        "def solution():\n    ans = sum(4 * i for i in range(1, 101))\n    return ans\n\nans = solution()"
    ],
    "f920596541b54c59bae5257c1fa6effd": [
        "def solution():\n    children = 200\n    daily_cost = 4.36\n    days = 5\n\n    total_cost = children * daily_cost * days\n\n    return total_cost\n\nans = solution()"
    ],
    "513db53d54374f00afb65d6d0f973de3": [
        "def solution():\n    total_questions = 20\n    correct_points = 5\n    incorrect_points = -3\n    total_points = 76\n    \n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        if correct_answers * correct_points + incorrect_answers * incorrect_points == total_points:\n            return correct_answers\n\nans = solution()"
    ],
    "c502fd8bef51420684df77fd33225144": [
        "def solution():\n    return (3/8) * 16\n\nans = solution()"
    ],
    "e45242e744df43f9909a012add8cd759": [
        "def solution():\n    total_sheep = 128\n    black_sheep = (5/8) * total_sheep\n    white_sheep = (1/4) * total_sheep\n    brown_sheep = total_sheep - black_sheep - white_sheep\n    return int(brown_sheep)\n\nans = solution()"
    ],
    "8e0574e136cb4a76abf5378d8154a43a": [
        "def solution():\n    cost_per_person = 27.60\n    group_size = 38\n    total_cost = cost_per_person * group_size\n    return total_cost\n\nans = solution()"
    ],
    "e9e3eafe8b3e48d3b2a71156f1fe9aae": [
        "def solution():\n    balls_per_box = 25 // 5\n    total_balls_in_six_boxes = balls_per_box * 6\n    return total_balls_in_six_boxes\n\nans = solution()"
    ],
    "fc6d0ef4b64c44a4900d03d68cbc4621": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variable for cost price\n    cost_price = symbols('cost_price')\n\n    # Eq1: selling price = cost price + 20% of cost price\n    selling_price = cost_price + (20/100) * cost_price\n    \n    # Eq2: final selling price = 90% of selling price\n    final_selling_price = (90/100) * selling_price\n    \n    # Eq3: profit = final selling price - cost price\n    profit = final_selling_price - cost_price\n    \n    # Setup the equation profit = $120\n    equation = Eq(profit, 120)\n\n    # Solve for cost price\n    cost_price_solution = solve(equation, cost_price)\n\n    # Return the solution for cost price\n    return cost_price_solution[0]\n\nans = solution()"
    ],
    "b84b9d049f3944a6a3fec6f34b08dcdd": [
        "def solution():\n    from sympy import symbols, Abs, solve\n\n    x = symbols('x')\n    equation = Abs(x + 1) - (2 * x + 5)\n\n    solutions = solve(equation, x)\n    \n    return [s.evalf() for s in solutions]\n\nans = solution()"
    ],
    "1f71711a37ba41f19b391be626ee7d84": [
        "from math import factorial\n\ndef solution():\n    # For four different colored socks\n    ways_four_different_socks = factorial(4)\n    \n    # For two different colored pairs of socks\n    ways_two_pairs = factorial(4) // (factorial(2) ** 2)\n    \n    return ways_four_different_socks, ways_two_pairs\n\nans = solution()"
    ],
    "63250d13de624f798109236462057294": [
        "def solution():\n    num1 = 13.8\n    num2 = 18.6\n    ans = (num1 + num2) / 2\n    return ans\n\nans = solution()"
    ],
    "3d56a142b7734cae80fcd6db270a1a50": [
        "def solution():\n    for a in range(1, 10):  # 'a' cannot be 0 since \\overline{aab} won't be a three digit number\n        for b in range(10):  # 'b' can be 0-9\n            if (10*a + b) + (10*b + a) + b == 100*a + 10*a + b:\n                return a + b\n\nans = solution()"
    ],
    "cc66abc29793482fb9eb2797063a599e": [
        "def solution():\n    ans = 7 * 4 * 37\n    return ans\n\nans = solution()"
    ],
    "2a26499da5b34ec8944d958d53314106": [
        "def solution():\n    ans = 9 * 59\n    return ans\n\nans = solution()"
    ],
    "273702e9fdfb4478a973714e3892e8a8": [
        "def solution():\n    num_people = 4\n    num_handshakes = (num_people * (num_people - 1)) // 2\n    return num_handshakes\n\nans = solution()"
    ],
    "336b55c1b98a494a8fcdec5a76129b58": [
        "from math import comb\n\ndef solution():\n    num_points = 10\n    num_vertices = 3\n    num_triangles = comb(num_points, num_vertices)\n    return num_triangles\n\nans = solution()"
    ],
    "a3e7cbd795a9409dbf490a20013698fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    andre, beth = symbols('andre beth')\n    \n    equation1 = Eq(andre + beth, 24)\n    equation2 = Eq(andre + 4 - (beth + 4), 6)\n    \n    solutions = solve((equation1, equation2), (andre, beth))\n    \n    return solutions[beth] + 4\n\nans = solution()"
    ],
    "b6b88edeb93e4d9cb9b8b1211d07bf53": [
        "def solution():\n    return 246 * 507\n\nans = solution()"
    ],
    "ebaac819520a41bea5853ed02b80e219": [
        "def solution():\n    first_term = 4\n    last_term = 121\n    difference = 3\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "b9605682663c4e549e208dbbe926ff31": [
        "def solution():\n    # To guarantee a win, Anthea should aim to leave a multiple of 4 apples for Ben.\n    # This will ensure she can always take a number of apples to bring the count\n    # back down to a multiple of 4 after Ben's turn.\n\n    # Total apples at the start\n    total_apples = 18\n\n    # She can take 1, 2 or 3 apples.\n    # She should take enough apples to leave 16 (which is 4 * 4) apples to Ben.\n    # So she should take 18 - 16 = 2 apples.\n    apples_to_take = total_apples - (4 * (total_apples // 4 + 1) - 4)\n\n    return apples_to_take\n\nans = solution()"
    ],
    "de94f3e9046049bda163af8199fad009": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    table, chair = symbols('table chair')\n    \n    equation1 = Eq(3 * table, 4 * chair)\n    equation2 = Eq(table, chair + 2)\n    \n    solutions = solve((equation1, equation2), (table, chair))\n    \n    return solutions[table]\n\nans = solution()"
    ],
    "fa9cbee13c99485d8303b1f5e6225e5c": [
        "def solution():\n    total_men = 4500\n    taller_than_190 = 750\n    between_180_and_190 = total_men - taller_than_190\n    \n    return between_180_and_190\n\nans = solution()"
    ],
    "27eb9e5bd22f43eba7fb2e1a0973e1ba": [
        "from math import factorial\n\ndef solution():\n    # Judy has 2 choices for standing on either end of the line\n    judy_options = 2\n    \n    # The remaining 5 friends can be arranged in any order\n    friends_options = factorial(5)\n    \n    # The total number of ways they can perform is the product of Judy's options and her friends' options\n    total_ways = judy_options * friends_options\n    \n    return total_ways\n\nans = solution()"
    ],
    "015af54f56854424960c5b919f820761": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # symbolically define the variables\n    andre, beth = symbols('andre beth')\n    \n    # create the equations based on the problem description\n    equation1 = Eq(andre + beth, 24)  # Total sweets before the teacher gave more\n    equation2 = Eq(andre + 4, beth + 4 + 6)  # Andre now has 6 sweets more than Beth after each receiving 4 more sweets\n    \n    # solve the simultaneous equations\n    solutions = solve((equation1, equation2), (andre, beth))\n    \n    return solutions[beth] + 4  # return Beth's current amount of sweets after receiving 4 more\n\nans = solution()"
    ],
    "af2115488bfc4cbfbf5f5ebb0bff2bef": [
        "def solution():\n    # If Anthea wants to win, she needs to leave 4 apples after Ben's last turn.\n    # Because no matter whether Ben takes 1, 2, or 3 apples in his turn, Anthea can take the rest and win.\n    # Hence, Anthea must be in a position where the number of apples is 5, 9, 13, or 17 after her turn;\n    # this guarantees a win because it always allows her to return to 4n + 1 apples after Ben's turn.\n    # Starting with 18 apples, Anthea should aim to leave Ben with a multiple of 4.\n\n    apples_after_anthea_turn = (18 - 1) % 4\n    initial_take_for_anthea = 18 - (apples_after_anthea_turn + 4)\n    return initial_take_for_anthea\n\nans = solution()"
    ],
    "e4f74093db054f9a9afeb2f53b05b7d1": [
        "def solution():\n    numbers = [9, 12, 17, 18, 21, 23]\n    return sum(numbers)\n\nans = solution()"
    ],
    "6e7fd510bdaa4c41b99c4531bc548e9a": [
        "def solution():\n    return 5 + 2\n\nans = solution()"
    ],
    "c1faa5b5faaf44929efa78451a63ff75": [
        "def solution():\n    x = (2 * 12) + 6\n    return x\n\nans = solution()"
    ],
    "ab627271938f40748d9acac110c92172": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    elder_maths, elder_english, younger_maths, younger_english = symbols('elder_maths elder_english younger_maths younger_english')\n\n    # elder sister spent 10 minutes more on maths than the younger sister\n    equation1 = Eq(elder_maths, younger_maths + 10)\n\n    # younger sister spent 4 minutes more on English than the elder sister\n    equation2 = Eq(younger_english, elder_english + 4)\n\n    # elder sister spent a total of 88 minutes\n    equation3 = Eq(elder_maths + elder_english, 88)\n\n    # younger sister spent 12 minutes less on her maths homework than on her English homework\n    equation4 = Eq(younger_maths, younger_english - 12)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (elder_maths, elder_english, younger_maths, younger_english))\n\n    return solutions[younger_english]\n\nans = solution()"
    ],
    "539a3a5cc52d4011bfeede240f8dd840": [
        "def solution():\n    count = 0\n    for i in range(1000, 10000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6dc506c916024720a5dab28d29fdcb33": [
        "def solution():\n    total_sum = 4 * 130\n    new_sum = 3 * 110\n    removed_number = total_sum - new_sum\n    return removed_number\n\nans = solution()"
    ],
    "f8f8aec9479848be90565270cd0b38f4": [
        "from math import lcm\n\ndef solution():\n    # Convert minutes to seconds to have a common unit for all traffic lights\n    first_light_period = 1 * 60  # 1 minute in seconds\n    second_light_period = 1.5 * 60  # 1.5 minutes in seconds\n    all_green_interval = 9 * 60  # 9 minutes in seconds\n    \n    # Find the Least Common Multiple (LCM) for the first two traffic lights\n    first_two_lcm = lcm(first_light_period, second_light_period)\n    \n    # The third light has to be a divisor of the LCM that is greater than 30 seconds\n    # Start from the smallest period (30 sec) and increment to find the shortest time\n    third_light_period = 30  # Start from 30 seconds\n    while third_light_period <= first_two_lcm:\n        if all_green_interval % third_light_period == 0:\n            return third_light_period\n        third_light_period += 30  # Increment by 30 seconds to check each possibility\n        \n    # If no period was found (which should not happen in this case), return None\n    return None\n\nans = solution()"
    ],
    "43c61058429c4fe489d7c947a01763c2": [
        "def solution():\n    # If Leo wants to ensure victory, he needs to ensure that after his first move,\n    # the number of apples will be a multiple of 3. This is because whatever Mia takes (1 or 2 apples),\n    # Leo can always take 2 or 1 (respectively), keeping the number of apples as a multiple of 3.\n    # To ensure this, Leo must ensure that there are 12 apples left after his first turn,\n    # which is the largest multiple of 3 before 14.\n\n    # Number of apples at the start\n    initial_apples = 14\n\n    # Leo's move is to reduce the number of apples to 12, a multiple of 3.\n    leo_first_move = initial_apples % 3\n\n    return leo_first_move\n\nans = solution()"
    ],
    "bbd5dd551d4b4d7abc9f239251339ad1": [
        "def solution():\n    nick_spoons = 12\n    pilpha_rings = 6\n    three_gold_rings = 3\n\n    # Let the value of one gold ring be x\n    # Then the value of 6 gold rings is 6x\n    # The value of 12 silver spoons is 3/4 the value of 6 gold rings\n    # So the value of 12 silver spoons is (3/4) * 6x = 9x/2\n    # We want to find the number of silver spoons that have the same value as 3 gold rings\n    # Setting the values equal: silver_spoons * (9x/2) / 12 = 3x\n    # To find the silver_spoons we solve for silver_spoons\n    silver_spoons = (3 * 3 * 12) / (9/2)\n\n    return int(silver_spoons)\n\nans = solution()"
    ],
    "9c9e21c3a7444569afbadf1e30e09b81": [
        "def solution():\n    # total sum of the four numbers\n    total_sum = 130 * 4\n    # sum of the remaining three numbers\n    remaining_sum = 110 * 3\n    # number removed is the difference\n    number_removed = total_sum - remaining_sum\n    return number_removed\n\nans = solution()"
    ],
    "a7eb63b14ee740bca350f5e3f57ea487": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencils, markers = symbols('pencils markers')\n    equation1 = Eq(3 * pencils + 2 * markers, 13)\n    equation2 = Eq(2 * pencils + 3 * markers, 12)\n    \n    solutions = solve((equation1, equation2), (pencils, markers))\n    \n    total_cost = 7 * solutions[pencils] + 7 * solutions[markers]\n    return total_cost\n\nans = solution()"
    ],
    "dca6b59a57004164891b83c2be747227": [
        "from math import lcm\n\ndef solution():\n    # Convert times to seconds for lcm calculation\n    # First traffic light changes every 60 seconds (1 minute)\n    first_tl = 60 \n    # Second traffic light changes every 90 seconds (1.5 minutes)\n    second_tl = 90 \n    # The traffic lights need to turn green at the same time every 540 seconds (9 minutes)\n    required_lcm = 540 \n\n    # Starting from 30 seconds (minimum time for the third traffic light)\n    # We increase the time by 30 each iteration to check the LCM\n    for third_tl in range(30, required_lcm + 1, 30): \n        if lcm(first_tl, second_tl, third_tl) == required_lcm:\n            return third_tl\n\nans = solution()"
    ],
    "a29766e9a35b4cf986fe192653492fb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let f be the number of female teachers\n    f = symbols('f')\n    \n    # Total weight of male teachers\n    total_male_weight = 3 * 75\n    \n    # Total weight of all teachers (assuming there are f female teachers)\n    total_weight = 65 * (3 + f)\n    \n    # Total weight of female teachers\n    total_female_weight = 60 * f\n    \n    # Equation for the total weight of all teachers\n    equation = Eq(total_male_weight + total_female_weight, total_weight)\n    \n    # Solve for the number of female teachers\n    solutions = solve(equation, f)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "0a147c77462a47acad9d599e3c92987b": [
        "def solution():\n    return 527 - 382\n\nans = solution()"
    ],
    "cf55459e46844705ab8a79455735ac26": [
        "def solution():\n    front_to_back = 5 + 7 - 1 # Cora's position from both ends\n    left_to_right = 2 + 4 - 1 # Cora's position from both sides\n\n    total_students = front_to_back * left_to_right\n    return total_students\n\nans = solution()"
    ],
    "58c3353b6ce0476d96bec02a41fe9aa6": [
        "def solution():\n    return 40 * 700\n\nans = solution()"
    ],
    "f6a6b8973f3d4d1ca73c2a8e344b2022": [
        "def solution():\n    import math\n    # Since Star must be the first runner, we only need to arrange the remaining 4 teammates.\n    # The number of ways to arrange 4 people is 4 factorial.\n    ans = math.factorial(4)\n    return ans\n\nans = solution()"
    ],
    "e357740e701e49a8ac92bfcd275f4557": [
        "def solution():\n    from sympy import factorint\n    \n    # Factorize 33 and 55\n    factors_33 = factorint(33)\n    factors_55 = factorint(55)\n    \n    # Combine the factors\n    all_factors = factors_33.copy()\n    for factor, power in factors_55.items():\n        if factor in all_factors:\n            all_factors[factor] += power\n        else:\n            all_factors[factor] = power\n    \n    # Find the smallest possible m by ensuring all factors have even powers\n    m = 1\n    for factor, power in all_factors.items():\n        if power % 2 != 0:\n            m *= factor\n    \n    return m\n\nans = solution()"
    ],
    "a40fe8c3642a46819ca618c1a9afcf63": [
        "def solution():\n    # Since each plate has at least two pieces of candy,\n    # start by placing two pieces on each plate. That's a total\n    # of 6 pieces already placed, leaving 2 more to distribute.\n    \n    # We are now effectively distributing 2 identical pieces\n    # to 3 distinct plates with no restrictions.\n    # This is equivalent to the problem of finding the number\n    # of non-negative integer solutions to the equation:\n    # x1 + x2 + x3 = 2, which is a problem of combinations\n    # with repetition (also known as stars and bars problem).\n    \n    # The formula for combinations with repetition is:\n    # (n + r - 1)! / (r! * (n - 1)!)\n    # Where n is the number of items to distribute (in this case 2)\n    # and r is the number of containers (in this case 3).\n    \n    # We calculate the factorial of a number using the math library.\n    from math import factorial\n\n    n = 2  # items to distribute\n    r = 3  # containers\n\n    # Apply the formula for combinations with repetition.\n    num_ways = factorial(n + r - 1) / (factorial(r) * factorial(n - 1))\n    \n    return int(num_ways)\n\nans = solution()"
    ],
    "384faa4ecc0e47d79e49dfce00412c19": [
        "def solution():\n    # Define a helper function for the custom operation\n    def custom_operation(x, y):\n        return (x * y) + (x + y) * 2\n    \n    # Use the custom operation on 6 and 12\n    ans = custom_operation(6, 12)\n    return ans\n\nans = solution()"
    ],
    "9e57bb3e87064594be7261beeaf4f749": [
        "def solution():\n    initial_segments = 31\n    initial_time = 60 # minutes\n    \n    final_segments = 50\n    cutting_time_per_segment = initial_time / (initial_segments - 1)\n    final_time = cutting_time_per_segment * (final_segments - 1)\n\n    return final_time\n\nans = solution()"
    ],
    "8fc55209039645f08e1579f51727eae8": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Congruences based on the problem statement\n    congruences = [(1, 3), (3, 5), (5, 7)]\n    # Solve the system of congruences using Chinese Remainder Theorem\n    num, _ = solve_congruence(*congruences)\n    # Find the number that lies between 100 and 200\n    while num <= 200:\n        if 100 <= num <= 200:\n            break\n        num += 3*5*7\n\n    return num\n\nans = solution()"
    ],
    "307081f49a1647b9bb92dfaffe694842": [
        "def solution():\n    for d1 in range(1, 10):       # thousands digit, 1-9 since it's a four-digit number\n        for d2 in range(d1+1):    # hundreds digit, 0-9 but must be less than thousands digit\n            for d3 in range(d2+1): # tens digit, 0-9 but must be less than hundreds digit\n                for d4 in range(d3+1): # ones digit, 0-9 but must be less than tens digit\n                    orig = int(f\"{d1}{d2}{d3}{d4}\")     # increasing order\n                    rev = int(f\"{d4}{d3}{d2}{d1}\")       # decreasing order\n                    for i in range(1, 4): \n                        for j in range(i+1, 4):\n                            for k in range(j+1, 4):\n                                for l in range(k+1, 4):\n                                    # Generate all combinations for the third number\n                                    third = int(f\"{[d1,d2,d3,d4][i-1]}{[d1,d2,d3,d4][j-1]}{[d1,d2,d3,d4][k-1]}{[d1,d2,d3,d4][l-1]}\")\n                                    if orig + rev + third == 26352: # Sum of three numbers\n                                        return min(orig, rev, third) # Smallest of the three numbers\n\nans = solution()"
    ],
    "dba8f63335da404e874ce5fc77d842f3": [
        "def solution():\n    return 123 - 41\n\nans = solution()"
    ],
    "cbeeb3a46e374ddca0fda082575458fb": [
        "def solution():\n    # Let x be the original number\n    # According to the problem statement, x - (30/100) * x = 210\n    # Simplify the equation: x - 0.3x = 210\n    # This simplifies to: 0.7x = 210\n    # Solve for x: x = 210 / 0.7\n    x = 210 / 0.7\n    return x\n\nans = solution()"
    ],
    "55fb13e55caf41cc8779e7ea0146667d": [
        "def solution():\n    year = 2002\n    while True:\n        year += 1\n        if str(year) == str(year)[::-1]:\n            return year - 2002\n\nans = solution()"
    ],
    "ac8cb9cc0d5443de91ca6e628f69e729": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candy, nancy, flowers_given = symbols('candy nancy flowers_given')\n\n    # Initial state equations\n    eq1 = Eq(candy, 11)\n    eq2 = Eq(nancy, 9)\n\n    # After giving the flowers\n    eq3 = Eq(candy - flowers_given, nancy + flowers_given - 8)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (candy, nancy, flowers_given))\n\n    return solutions[candy]\n\nans = solution()"
    ],
    "a2bde406a8da4970a219afa0022bd89d": [
        "from math import factorial\n\ndef solution():\n    word = 'ARRANGE'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n\n    numerator = factorial(len(word))\n    denominator = 1\n\n    for count in letter_counts.values():\n        denominator *= factorial(count)\n\n    return numerator // denominator\n\nans = solution()"
    ],
    "b686e2f0e98042d783104bb0e8f6ac9a": [
        "def solution():\n    initial_price = 200\n    percentage_increase = 45 / 100\n\n    price_2011 = initial_price * (1 + percentage_increase)\n    \n    return price_2011\n\nans = solution()"
    ],
    "98be2cb5dcce45168975297b4f076410": [
        "def solution():\n    money_monday = 60 + 40\n    days = 3  # Monday, Tuesday, and Wednesday\n    total_money = money_monday * days\n    return total_money\n\nans = solution()"
    ],
    "3737e4a9ac8f48808137f02833fa17bc": [
        "def solution():\n    dividend = 24 * 36\n    return dividend\n\nans = solution()"
    ],
    "4d111600431f40ce98fbddc8a64d1e36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(60 - 8 * (2 * x - 5), 4)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3dcee099b86f42178f5a693ab97c5bce": [
        "def solution():\n    midnight_temperature = -5\n    midday_temperature = 17\n\n    overall_change = midday_temperature - midnight_temperature\n\n    return overall_change\n\nans = solution()"
    ],
    "1b443edab3c147249e25ac875c4f6ab7": [
        "def solution():\n    num = 1\n    increment = 1\n    while num <= 50:\n        increment += 1\n        num += increment\n    return num\n\nans = solution()"
    ],
    "5c90212721354a48a4e81ec2a43c81bc": [
        "def solution():\n    pen_cost_p = 43\n    booklet_cost_p = 185  # convert to pence\n    total_cost_p = (3 * pen_cost_p) + (4 * booklet_cost_p)\n    total_cost_pounds = total_cost_p / 100  # convert back to pounds\n\n    money_given = 10\n    change = money_given - total_cost_pounds\n\n    return change\n\nans = solution()"
    ],
    "87e1f465cdbb4df7b961ae79f361a0c3": [
        "def solution():\n    people_in_front = 10\n    position_from_back = 14\n\n    total_people = people_in_front + position_from_back - 1\n\n    return total_people\n\nans = solution()"
    ],
    "55a229942e9e41f3a62e0880d02b5241": [
        "def solution():\n    ans = 10 + (10 * 10) - (10 / 10)\n    return ans\n\nans = solution()"
    ],
    "f8c6ec11093d496198cb0de06c6908ee": [
        "def solution():\n    population = 5383000  # As of my knowledge cutoff in 2023, St. Petersburg's population is approximately 5.383 million\n    return population\n\nans = solution()"
    ],
    "a24bbb90466f45bb817f8a9fa98063a4": [
        "def solution():\n    count = 0\n    for i in range(100, 1000): # Loop through all 3-digit numbers\n        str_num = str(i)\n        # Check the condition for X-number\n        if abs(int(str_num[0]) - int(str_num[1])) >= 7 and abs(int(str_num[1]) - int(str_num[2])) >= 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "054c2ee09a60448ebda4bd6602806b2b": [
        "def solution():\n    count = 0\n    for thousand in range(5, 10):  # since we want 4-digit numbers larger than 5000\n        for hundred in range(0, 10):\n            for ten in range(0, 10):\n                for one in range(1, 10):  # one cannot be zero to avoid division by zero\n                    if (thousand % hundred == 0 or hundred == 0) and \\\n                       (thousand % ten == 0 or ten == 0) and \\\n                       (thousand % one == 0):\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "16105156e2914d5a8990c9b24f0b9981": [
        "def solution():\n    from sympy import primerange\n\n    primes = list(primerange(1, 10))  # 10 is a reasonable upper bound to find the third prime\n    third_prime = primes[2]  # Indexing starts at 0, so we need index 2 for the third prime\n\n    return third_prime\n\nans = solution()"
    ],
    "a736c91b54064c40a00c4a922d2dc285": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tilde = symbols('~')\n    equation = Eq((tilde + 7) / 9, 9)\n    solutions = solve(equation, tilde)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "392cb5c0bb804c05baec15996d6881df": [
        "def solution():\n    # The child opposite the 4th child is half way around the circle\n    # Therefore, the distance from the 4th to the 22nd child is half the total number of children\n    # We can calculate this as follows:\n\n    distance = 22 - 4\n    total_children = distance * 2\n\n    return total_children\n\nans = solution()"
    ],
    "27de9be9ab0d46f5a9881ef33bd601fa": [
        "def solution():\n    first_week_coins = 10\n    common_difference = 4\n    num_weeks = 10\n    total_coins = 0\n\n    for week in range(num_weeks):\n        total_coins += first_week_coins + week * common_difference\n    \n    return total_coins\n\nans = solution()"
    ],
    "f3b1467c46654ba18779b73ec862809e": [
        "def solution():\n    lily_dresses = 24\n    gina_dresses = lily_dresses / 2\n    fiona_dresses = gina_dresses / 4\n    total_dresses = gina_dresses + fiona_dresses\n    return int(total_dresses)\n\nans = solution()"
    ],
    "c8f6e26082ce4b84bed3069a498d5034": [
        "def solution():\n    ans = 0.8 * 3 * 10\n    return ans\n\nans = solution()"
    ],
    "e3c3e3c1805842db862f14a943f7260b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C, D, E = symbols('A B C D E')\n    \n    # Average mark of A, B, C is 95\n    equation1 = Eq((A + B + C) / 3, 95)\n    # Average mark of B, C, D is 94\n    equation2 = Eq((B + C + D) / 3, 94)\n    # E's mark of 96 is the second highest\n    E = 96\n    # A has the highest mark, so it should be greater than E's mark\n    # B and D have the same score\n    B = D\n    # Marks are greater than 91\n    constraints = (A > 91, B > 91, C > 91, D > 91, E > 91)\n    \n    # Since we have two equations and A > E, we can just solve for B, C\n    solutions = solve((equation1, equation2), (A, B, C, D), dict=True)\n    \n    # We need to filter the solutions to satisfy the constraints and the condition that A must be higher than E\n    valid_solutions = [s for s in solutions if all(constraint.subs(s) for constraint in constraints) and s[A] > E]\n\n    # Since there are multiple solutions, we ensure A is the highest score before returning D's score\n    for sol in valid_solutions:\n        if sol[A] > E and sol[B] == sol[D] < sol[A] and sol[B] < sol[C]:\n            return sol[D]\n\nans = solution()"
    ],
    "4d1598c9ff7f4502a10cb35d69667abd": [
        "def solution():\n    # since from 1258 all digits are wrong, it means that none of these digits are in the correct combination\n    impossible_digits = {'1', '2', '5', '8'}\n\n    # going through each attempt and eliminating impossible digits\n    attempts = ['5648', '3628', '3147', '5629']\n    possible_digits = [{digit for digit in attempt if digit not in impossible_digits} for attempt in attempts]\n    \n    # intersect all sets to find the common possible digits in all attempts\n    common_digits = set.intersection(*possible_digits)\n    \n    # from the common digits, construct the correct combination\n    # we'll use the attempts to place the common digits in the right positions\n    correct_combination = ['0'] * 4\n    for attempt in attempts:\n        for i, digit in enumerate(attempt):\n            # skip this digit if not in the common digits\n            if digit not in common_digits:\n                continue\n            # if the digit is already in the correct combination but in the wrong position,\n            # then this is not its correct position\n            if correct_combination[i] == digit:\n                continue\n            # if the digit is not in the correct combination yet, add it\n            if correct_combination[i] == '0':\n                correct_combination[i] = digit\n            # if the digit is in the combination but in a different position,\n            # then this must be the wrong position; hence, mark it as wrong\n            else:\n                correct_combination[correct_combination.index(digit)] = '0'\n\n    # once we have the potential correct digits, we check for the correct positions\n    for attempt in attempts:\n        correct_count = 0\n        for i, digit in enumerate(attempt):\n            if digit == correct_combination[i]:\n                correct_count += 1\n        # since there are two correct digits for each attempt, if there are more correct_count,\n        # then we have a digit at the wrong position, and we need to correct it\n        if correct_count != 2:\n            for i, digit in enumerate(attempt):\n                if correct_combination[i] == digit and correct_count > 2:\n                    correct_combination[i] = '0'\n                    correct_count -= 1\n                    \n    # The remaining 0's need to be replaced with the correct digits that aren't yet placed.\n    for digit in common_digits:\n        if digit not in correct_combination:\n            correct_combination[correct_combination.index('0')] = digit\n    \n    return ''.join(correct_combination)\n\nans = solution()"
    ],
    "ad676d9c940642cbac148da8b2a9a501": [
        "def solution():\n    principal = 35000\n    final_amount = 37100\n    interest_rate = 1.5 / 100\n\n    # A = P * (1 + rt)\n    # t = (A/P - 1) / r\n    years = (final_amount / principal - 1) / interest_rate\n\n    if years == 5:\n        return \"right\"\n    else:\n        return round(years, 2)\n\nans = solution()"
    ],
    "52696ab5f8494de9be7eed46df374cc7": [
        "def solution():\n    total_avg_weight = 65\n    male_teachers = 3\n    male_avg_weight = 75\n    female_avg_weight = 60\n\n    # Total weight of male teachers\n    total_male_weight = male_teachers * male_avg_weight\n\n    # Let x be the number of female teachers\n    # 65(x + 3) = 75 * 3 + 60x\n    x = symbols('x')\n    equation = Eq(total_avg_weight * (x + male_teachers), total_male_weight + female_avg_weight * x)\n\n    # Solve for x\n    num_female_teachers = solve(equation, x)[0]\n\n    return num_female_teachers\n\nans = solution()"
    ],
    "bcb4d3a73bdd461db258bc9c024573c1": [
        "def solution():\n    digits = \"0123456789\"\n    possible_combinations = []\n    \n    # Based on the last clue, we know that 1, 2, 5, and 8 are not in the combination.\n    # Create a list of possible digits by removing the digits we know are incorrect.\n    for digit in \"1258\":\n        digits = digits.replace(digit, \"\")\n    \n    # Now iterate over all four-digit combinations from the remaining digits\n    for d1 in digits:\n        for d2 in digits:\n            for d3 in digits:\n                for d4 in digits:\n                    # Skip combinations with repeated digits\n                    if len({d1, d2, d3, d4}) < 4:\n                        continue\n                    \n                    combination = d1 + d2 + d3 + d4\n                    errors_5648 = sum([d != c for d, c in zip(\"5648\", combination)])\n                    errors_3628 = sum([d != c for d, c in zip(\"3628\", combination)])\n                    errors_3147 = sum([d != c for d, c in zip(\"3147\", combination)])\n                    errors_5629 = sum([d != c for d, c in zip(\"5629\", combination)])\n                    \n                    # Each incorrect attempt should have exactly two wrong digits\n                    if errors_5648 == errors_3628 == errors_3147 == errors_5629 == 2:\n                        possible_combinations.append(combination)\n    \n    # According to the given conditions there should be only one correct combination\n    return possible_combinations[0] if len(possible_combinations) == 1 else None\n\nans = solution()"
    ],
    "f95f09c885d34503865d05cffe9b4ae0": [
        "def solution():\n    distance = 22 - 4\n    total_children = distance * 2\n    return total_children\n\nans = solution()"
    ],
    "5072d7c5f2434099ac2734046be03e0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    father_current, son_current = symbols('father_current son_current')\n    equation1 = Eq(father_current - 6, 5 * (son_current - 6))\n    equation2 = Eq(father_current + son_current, 78)\n\n    solutions = solve((equation1, equation2), (father_current, son_current))\n\n    return solutions[father_current]\n\nans = solution()"
    ],
    "3be5a913fea7494c80e0bfe6a08910b7": [
        "def solution():\n    from math import sqrt\n\n    m = 2.0  # Mass in kg\n    k = 500  # Force constant in N/m\n    A = 0.08  # Amplitude in meters\n    x = 0.04  # Displacement from equilibrium in meters\n    \n    # Total energy of the oscillator (E) is given by E = (1/2) * k * A^2\n    total_energy = 0.5 * k * A**2\n    \n    # Maximum speed (v_max) is given by v_max = sqrt(k/m) * A\n    # Speed of the block at x from equilibrium (v) is given by the conservation of energy:\n    # Total energy = Kinetic energy + Potential energy\n    # (1/2) * k * A^2 = (1/2) * m * v^2 + (1/2) * k * x^2\n    # v = sqrt((k/m) * (A^2 - x^2))\n    speed = sqrt((k/m) * (A**2 - x**2))\n    \n    return (total_energy, speed)\n\nans = solution()"
    ],
    "375112c34e0a4163ad8adac5448587c5": [
        "def solution():\n    a = 2023**(1/2)\n    b = -2023**(1/2)\n    ans = a + b - a * b\n    return ans\n\nans = solution()"
    ],
    "a4e26b2a8caa4a18ae49cec55472c63f": [
        "def solution():\n    ans = 245 - 182\n    return ans\n\nans = solution()"
    ],
    "c4ccfd8cb6b248a38a4fda147bef55ce": [
        "def solution():\n    total_amount_pence = 45 * 100  # Convert £45 to pence\n    coin_value_pence = 5  # Value of one 5p coin in pence\n    num_coins = total_amount_pence / coin_value_pence\n    return int(num_coins)\n\nans = solution()"
    ],
    "32ad0f6a736244e3a4c5dda6e2a4ca47": [
        "def solution():\n    ans = -7 + -3\n    return ans\n\nans = solution()"
    ],
    "7d2942aa92ed44e29a1be000b1aaf0c2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for Pip and Bud's distance in a minute\n    pip_per_min, bud_per_min = symbols('pip_per_min bud_per_min')\n    \n    # Pip runs 20 metres more than Bud each minute\n    equation1 = Eq(pip_per_min, bud_per_min + 20)\n    \n    # Total distance run by Pip and Bud in 3 minutes is 540 metres\n    equation2 = Eq(3 * pip_per_min + 3 * bud_per_min, 540)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (pip_per_min, bud_per_min))\n    \n    # Calculate the total distance run by Pip in 3 minutes\n    pip_distance = 3 * solutions[pip_per_min]\n    \n    return pip_distance\n\nans = solution()"
    ],
    "2ec86cfd46db49fb8f7a59bc5ac2195f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of coins in Box B at the beginning\n    x = symbols('x')\n\n    # Box A contains 4 times as many coins as Box B\n    # Coins in Box A at the beginning: 4*x\n\n    # 6% of the coins in Box A are removed and transferred to Box C\n    # Coins transferred from Box A to C: 0.06 * 4 * x\n\n    # 20% of the coins in Box B are removed and tranferred to Box C\n    # Coins transferred from Box B to C: 0.20 * x\n\n    # Coins in Box C are now 1220, which is 22% more than the original number of coins in Box C\n    # Let the original number of coins in Box C be y\n    # So, y + 0.22*y = 1220\n    # Therefore, y = 1220 / 1.22\n\n    y = 1220 / 1.22\n\n    # Now we can set up the equation for the coins transferred to C in terms of x\n    equation = Eq(0.06 * 4 * x + 0.20 * x, y)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    # Number of coins in Box A at the beginning is 4 times the value of x\n    return 4 * solution[0]\n\nans = solution()"
    ],
    "8d4919986f144ffeae4055000acfbb47": [
        "def solution():\n    # Let x be the original number of tea bottles (100% - 60% = 40% were tea).\n    # Let y be the number of tea bottles added.\n    # After adding y tea bottles, 40% of the total are coffee.\n    # This means that 60% of the total are tea.\n    # Therefore, the new total number of bottles is x + y.\n\n    # Before adding tea bottles:\n    # Tea is 40% of the drinks, so coffee is 60% of the drinks.\n    # Let's assume the original total number of bottles is 100 for simplicity.\n    # This means we have 40 tea bottles initially (x = 40).\n\n    # The total number of bottles after adding y tea bottles is 100 + y.\n    # We know that coffee then makes up 40% of this new total.\n    # So, the original 60 coffee bottles is equal to 40% of the new total.\n\n    # We can set up an equation: 0.4 * (100 + y) = 60\n    # Solving the equation for y, we get:\n    y = (60 / 0.4) - 100\n\n    # Percentage increase in the number of tea bottles:\n    # Original number of tea bottles x = 40 (from the 40% original distribution)\n    # y is the number of additional tea bottles\n    # The percentage increase is then (y / x) * 100.\n    percentage_increase = (y / 40) * 100\n\n    return percentage_increase\n\nans = solution()"
    ],
    "bcb80e6312784336a54c7308af6263cb": [
        "def solution():\n    hex_sum = hex(int('2A3', 16) + int('17B', 16))\n    return hex_sum[2:].upper()\n\nans = solution()"
    ],
    "d1ec5589c16045a8a24ef55131c530f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2 * x + 1), 75)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "94913f61e8cf4fe8822180b9025e8717": [
        "def solution():\n    count = 0\n    for i in range(1, 501):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "f17c963ecb1a4e4ea278edc6215a3efb": [
        "def solution():\n    return 152 + 45 - 52 + 16\n\nans = solution()"
    ],
    "79ed6bec48e84620b031b1f6fe00dc58": [
        "def solution():\n    # If Rose takes 1 marble, 13 are left, which is a multiple of 3 (3 * 4 + 1)\n    # To make sure Rose wins, she has to leave a multiple of 3 marbles after her turn\n    # Since 14 is not a multiple of 3, she should remove 2 marbles\n    # Now the remaining number of marbles is 12, which is a multiple of 3 (3 * 4)\n    # This means no matter how Kylie plays by removing 1 or 2 marbles,\n    # Rose can always adjust her next move to leave a multiple of 3 marbles after her turn\n    # Ultimately ensuring she takes the last marble\n\n    rose_first_draw = 14 % 3\n    return rose_first_draw if rose_first_draw != 0 else 2\n\nans = solution()"
    ],
    "1b3d94be63ab433dbec37b999532440f": [
        "def solution():\n    total_revenue = (5 * 2) + (2 * 5) + (3 * 10)\n    total_flowers = 5 + 2 + 3\n    average_price = total_revenue / total_flowers\n    return average_price\n\nans = solution()"
    ],
    "5260e448b7bd48408f279f75b3bc994b": [
        "def solution():\n    total_vehicles = 24\n    total_wheels = 86\n\n    # Assume all vehicles are tricycles, with 3 wheels\n    tricycles = total_vehicles\n    wheels_if_all_tricycles = tricycles * 3\n\n    # Calculate the excess wheels when assuming all are tricycles\n    excess_wheels = total_wheels - wheels_if_all_tricycles\n\n    # Each car has 1 more wheel than a tricycle,\n    # so the number of excess wheels tells us the number of cars\n    cars = excess_wheels\n\n    # Subtract the number of cars from total vehicles to get the number of tricycles\n    tricycles = total_vehicles - cars\n\n    return tricycles\n\nans = solution()"
    ],
    "2eb9b96314cb4e659c476a8f2b9a7a6e": [
        "def solution():\n    washing_watermelons = 1\n    washing_glasses = 3\n    juicer_working = 4\n    pouring_juice = 1\n\n    total_time = washing_watermelons + washing_glasses + juicer_working + pouring_juice\n\n    return total_time\n\nans = solution()"
    ],
    "7811a75321754070a2499adf8af1bec1": [
        "def solution():\n    # Convert the amount James has to pence\n    james_money_pence = 110  # £1.10 is equivalent to 110 pence\n    \n    # Lewis already has the money in pence\n    lewis_money_pence = 60\n    \n    # Calculate the total money they have in pence\n    total_money_pence = lewis_money_pence + james_money_pence\n    \n    # Convert the total money back to pounds and pence\n    total_money_pounds = total_money_pence / 100  # Convert pence to pounds\n\n    return total_money_pounds\n\nans = solution()"
    ],
    "5ef1c9a0438447ba9288b3fd84a1e5ea": [
        "from math import factorial\n\ndef solution():\n    word = 'WINNING'\n    num_occurrences = {char: word.count(char) for char in set(word)}\n    \n    total_factorial = factorial(len(word))\n    dup_factorials = [factorial(value) for value in num_occurrences.values()]\n\n    ways = total_factorial // (dup_factorials[0] * dup_factorials[1])\n\n    return ways\n\nans = solution()"
    ],
    "d500548212784181ae868f27144944a3": [
        "def solution():\n    count = 0\n    for x1 in range(3, 13):\n        for x2 in range(3, 13):\n            x3 = 13 - x1 - x2\n            if x3 >= 3 and x1 + x2 + x3 == 13:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "484ad20b23084a80a71997e86aafbbee": [
        "def solution():\n    ans = 7 * 0.4\n    return ans\n\nans = solution()"
    ],
    "afedf1aa53604878984ef0e2e15b9e62": [
        "def solution():\n    ans = 0.25 * 0.30 * 0.40 * 300\n    return ans\n\nans = solution()"
    ],
    "cc8c61240c93470c82d6885fe1441a98": [
        "def solution():\n    from math import factorial\n\n    def derangement(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n\n    ans = derangement(6)\n    return ans\n\nans = solution()"
    ],
    "35f28b203ccb40b1b46923de84a56ccb": [
        "def solution():\n    mass = 2  # kg\n    final_velocity = 8  # m/s\n    time = 4  # s\n\n    acceleration = final_velocity / time  # m/s^2\n    force = mass * acceleration  # Newton's Second Law: F = m * a\n\n    return force\n\nans = solution()"
    ],
    "e4dd70bfb9454c2286a8726ee86d101c": [
        "def solution():\n    from itertools import combinations\n    from sympy import divisor_count\n    from math import prod\n\n    # Determine the number of factors for each number 1 to 13\n    factors = {num: divisor_count(num) for num in range(1, 14)}\n\n    # Find all possible 9-number combinations from 1 to 13\n    possibilities = list(combinations(range(1, 14), 9))\n\n    # Filter combinations where exactly two numbers have a unique factor count\n    valid_combinations = []\n    for combo in possibilities:\n        unique_factor_counts = sum(1 for num in combo if list(factors.values()).count(factors[num]) == 1)\n        if unique_factor_counts == 2:\n            valid_combinations.append(combo)\n\n    # Find a combination where May's number has an immediate successor and predecessor in the combination,\n    # and Alice's number is 2 more than May's, and Alice's number is odd\n    for combo in valid_combinations:\n        for may in combo:\n            alice = may + 2\n            mark = may - 1\n            if alice in combo and mark in combo and alice % 2 != 0:\n                # Calculate the product of the four numbers that were not picked\n                not_picked = set(range(1, 14)).difference(set(combo))\n                ans = prod(not_picked)\n                return ans\n\nans = solution()"
    ],
    "4fdb62c377d747f98107b2670277dd88": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Define the variables\n    lemonade, plus1000 = symbols('lemonade plus1000', integer=True)\n\n    # Equations based on the problem statement\n    equation1 = 4 * lemonade + 7 * plus1000 - 2012\n    equation2 = lemonade + plus1000 - 350\n\n    # Find the minimum positive solution for bottles of \"1000 Plus\"\n    solutions = solve((equation1, equation2), (lemonade, plus1000))\n    \n    # Parsing the solution to find the minimum number of \"1000 Plus\" bottles\n    min_plus1000_bottles = min(solutions, key=lambda x: x[1])[1]\n    \n    return min_plus1000_bottles\n\nans = solution()"
    ],
    "f0db0aaf0c984695962fd98c327d2267": [
        "def solution():\n    for num in range(101):\n        if num % 4 == 0 and num % 7 == 6 and num % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "4f1a75cb742a439caf72488bf6da4ab6": [
        "def solution():\n    a, b = 3, 7\n    # According to the Frobenius coin problem,\n    # the largest number that cannot be made using combinations\n    # of a and b is a * b - a - b.\n    ans = a * b - a - b\n    return ans\n\nans = solution()"
    ],
    "94f9a30088f14e23ad5d292b0a21a0e4": [
        "def solution():\n    ans = 20172017 // 2017\n    return ans\n\nans = solution()"
    ],
    "f881913e5ff54d8ea9433a89abb125b9": [
        "def solution():\n    # Initially, we have a total of 96 pens.\n    total_initial_pens = 96\n    \n    # The ratio of blue pens to red pens is 3:5.\n    ratio_blue = 3\n    ratio_red = 5\n    total_ratio = ratio_blue + ratio_red\n    \n    # Find the initial number of blue pens and red pens based on the ratio.\n    initial_blue_pens = (ratio_blue / total_ratio) * total_initial_pens\n    initial_red_pens = (ratio_red / total_ratio) * total_initial_pens\n    \n    # After adding 60 red pens and some unknown number of blue pens x, 40% are blue.\n    added_red_pens = 60\n    new_total_pens = total_initial_pens + added_red_pens  # x has not been added yet.\n    \n    # Let x be the number of blue pens added.\n    # The new total number of pens will be the initial number plus the added ones.\n    # According to the condition, 40% of the total pencils are blue now.\n    # Therefore, the equation will be: 0.4 * (new total pens + x) = initial blue pens + x\n    \n    # Solve for x:\n    x = symbols('x')\n    equation = Eq(0.4 * (new_total_pens + x), initial_blue_pens + x)\n    blue_pens_added = solve(equation, x)[0]\n    \n    return blue_pens_added\n\nans = solution()"
    ],
    "eb8fb6f94cc1474ca839b50b4b0ce425": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    correct, incorrect = symbols('correct incorrect')\n    \n    equation1 = Eq(correct, 3 * incorrect + 12)\n    equation2 = Eq(5 * correct - 2 * incorrect, 151)\n\n    ans = solve((equation1, equation2), (correct, incorrect))\n\n    return ans[correct]\n\nans = solution()"
    ],
    "31547fbcddfa44d195f62ee2a144d7f9": [
        "def solution():\n    total_cost = 2.42 * 32\n    cost_per_person = total_cost / 11\n    return round(cost_per_person, 2)\n\nans = solution()"
    ],
    "392b16f9a6ac48cca42c471b49e63670": [
        "def solution():\n    # Convert the numbers from base 10 to base 7 and then add them\n    base_7_sum = int(str(45), 7) + int(str(66), 7)\n    # Convert the sum back to a base 7 string representation\n    ans = ''\n    while base_7_sum > 0:\n        ans = str(base_7_sum % 7) + ans\n        base_7_sum //= 7\n    return ans\n\nans = solution()"
    ],
    "cbc6325d9c534f4b9977c61b302c8d0c": [
        "def solution():\n    total_children = 30\n    wearing_glasses = 8\n    wearing_watch = 12\n    wearing_both = 7\n\n    wearing_neither = total_children - (wearing_glasses + wearing_watch - wearing_both)\n\n    return wearing_neither\n\nans = solution()"
    ],
    "a4b725f5709b47a982b182d038fac1ef": [
        "def solution():\n    return 628 * 5\n\nans = solution()"
    ],
    "066d9987dbaf460b8056b1fcc71dd3f4": [
        "def solution():\n    ans = 67 * 23\n    return ans\n\nans = solution()"
    ],
    "11d22bb6c3c14854bb9338e27e427226": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    linda, cici = symbols('linda cici')\n\n    # When Cici was born, Linda was 11 years old.\n    equation1 = Eq(cici, linda - 11)\n    # The sum of their ages 4 years later will be 37.\n    equation2 = Eq((linda + 4) + (cici + 4), 37)\n\n    solutions = solve((equation1, equation2), (linda, cici))\n\n    # How old will Linda be 3 years later?\n    linda_future_age = solutions[linda] + 3\n    \n    return linda_future_age\n\nans = solution()"
    ],
    "15d3db4f4eda491babda7b41a87df4bd": [
        "def solution():\n    # Since N can be divided by 18 out of the first 20 natural numbers,\n    # the two numbers that cannot divide N must be consecutive.\n\n    # The least common multiple (LCM) of the first 20 natural numbers\n    # will give us a number that is divisible by all of them.\n    # We need to find a number less than this LCM that is not divisible by\n    # one pair of consecutive numbers and divisible by the remaining numbers.\n\n    from math import gcd\n\n    # A function to calculate LCM of two numbers.\n    def lcm(x, y):\n        return x * y // gcd(x, y)\n\n    # Calculate the LCM of the first 20 natural numbers\n    lcm_of_20 = 1\n    for i in range(1, 21):\n        lcm_of_20 = lcm(lcm_of_20, i)\n\n    answer_pair = None\n\n    # We need to find out which are the two consecutive natural numbers\n    # that do not divide into the LCM.\n    # Since there are only 19 pairs of consecutive numbers from 1 to 20,\n    # we can check each pair.\n    for i in range(1, 20):\n        if lcm_of_20 % i != 0 or lcm_of_20 % (i + 1) != 0:\n            # Once we found the pair that does not divide the LCM, \n            # we check if the LCM divided by the product of this pair \n            # gives a number that satisfy the divisibility by the rest.\n            if all(lcm_of_20 // (i * (i + 1)) % j == 0 for j in range(1, 21) if j != i and j != (i + 1)):\n                answer_pair = (i, i + 1)\n                break\n\n    # Return the sum of the two consecutive numbers\n    return sum(answer_pair)\n\nans = solution()"
    ],
    "ba994c84bc354e9ebb8e56f799001f32": [
        "def solution():\n    ans = sum(n for n in range(161, 15*15) if n % 15 == n // 15)\n    return ans\n\nans = solution()"
    ],
    "8b67176726654523a82d12a0a53e5a72": [
        "def solution():\n    # Each match is played between two players\n    # If we add all the matches played by each player we get twice the number of actual matches played, because each match is counted twice \n    # (once for each player). Thus, we should sum the number played by each and divide by 2 to get the actual number of matches.\n    # As F's matches are not given, we denote them as F and add them to other players matches and then apply the above logic.\n\n    # Given number of matches for A, B, C, D, E, and G\n    matches_of_others = 4 + 6 + 2 + 1 + 3 + 5\n    # Let F be the number of matches played by F\n    F = symbols('F')\n    # Total matches played is the sum of the matches for all players (each match counted twice) equals to twice the actual matches played\n    total_matches_twice = matches_of_others + F\n    \n    # Since it's a chess tournament, everyone has to play with each other, which will be C(7, 2) matches in total\n    # Where C(n, k) is the combination of n things taken k at a time\n    # Calculate the total actual matches using combinations\n    from math import comb\n    actual_matches = comb(7, 2)\n    \n    # Setting up the equation to solve for F\n    equation = Eq(total_matches_twice, 2 * actual_matches)\n    \n    # Using sympy.solve to find the value of F\n    matches_played_by_F = solve(equation, F)[0]\n    \n    return matches_played_by_F\n\nans = solution()"
    ],
    "8e079aa33fac45e2933fe8f9f57347fe": [
        "def solution():\n    first_term = 5\n    last_term = 85\n    difference = 4\n    num_terms = ((last_term - first_term) // difference) + 1\n    \n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n    \n    return sum_of_series\n\nans = solution()"
    ],
    "f19f57dc40604eba86f9d7b2bb0b2c70": [
        "def solution():\n    # Let's denote the number of Natasha's stamps as x.\n    # Then the number of Jamie-Anne's stamps will be x + 18.\n    # According to the ratio Jamie-Anne's stamps to Natasha's stamps is 5:3,\n    # we can set up the following equation: (x + 18) / x = 5 / 3.\n\n    # Solve for x, the number of Natasha's stamps\n    natasha_stamps = 18 * 3 / (5 - 3)  # This simplifies to x = 18 * 3 / 2\n\n    # Calculate Jamie-Anne's stamps based on Natasha's stamps\n    jamie_anne_stamps = natasha_stamps + 18\n\n    # Calculate the total number of stamps\n    total_stamps = natasha_stamps + jamie_anne_stamps\n\n    return int(total_stamps)\n\nans = solution()"
    ],
    "95171e30845347a5a0bcbd146bae2a00": [
        "def solution():\n    # Since we want the least possible sum of two numbers with given conditions\n    # The first number should be equal to its minimum value, which is 5\n    # The second number should be equal to its minimum value, which is 2\n    first_number_min = 5\n    second_number_min = 2\n    \n    # The least possible value of the sum is the sum of the minimum values\n    least_possible_sum = first_number_min + second_number_min\n    \n    return least_possible_sum\n\nans = solution()"
    ],
    "bc39719692424efd97a67922f5478c31": [
        "def solution():\n    distance_uphill = 300  # in meters\n    distance_downhill = 300  # in meters\n    speed_uphill = 10  # in m/min\n    speed_downhill = 30  # in m/min\n\n    time_uphill = distance_uphill / speed_uphill  # time = distance/speed\n    time_downhill = distance_downhill / speed_downhill\n\n    total_distance = distance_uphill + distance_downhill  # total distance for round trip\n    total_time = time_uphill + time_downhill  # total time for round trip\n\n    average_speed = total_distance / total_time  # average speed = total distance / total time\n\n    return average_speed\n\nans = solution()"
    ],
    "bdd45d02da3a4de3baed4b719bcf043f": [
        "def solution():\n    return 15.2 - 5.7\n\nans = solution()"
    ],
    "e3abc3aab67f4f7b981e00c65dd7ce44": [
        "def solution():\n    num_entrances = 5\n    num_people = 4\n    \n    # Since each person can choose from any of the 5 entrances regardless of the others,\n    # and the order in which they enter matters, we use permutations.\n    \n    ans = num_entrances ** num_people\n    return ans\n\nans = solution()"
    ],
    "adb3d1fd535a48be8776775afaca3c49": [
        "def solution():\n    total_peaches = 18\n    peaches_per_bag = 2\n\n    num_bags = total_peaches // peaches_per_bag\n\n    return num_bags\n\nans = solution()"
    ],
    "8f4e94438ebd4f19ae675530ee3c1dd8": [
        "def solution():\n    from math import gcd\n\n    # Calculate the number of apples, pears, and oranges that can be distributed\n    distributable_apples = 226 - 10\n    distributable_pears = 352 - 28\n    distributable_oranges = 157 - 13\n\n    # Calculate the GCD of the distributable amounts\n    g = gcd(distributable_apples, gcd(distributable_pears, distributable_oranges))\n\n    # Return the biggest possible number of students\n    return g\n\nans = solution()"
    ],
    "f03076a28d8c4de9b99cc80f1669e699": [
        "def solution():\n    import math\n    # Judy has 2 choices: first or last place\n    judy_options = 2 \n    # The remaining 5 friends can be arranged in 5! ways\n    friends_permutations = math.factorial(5) \n    # Total number of ways\n    total_ways = judy_options * friends_permutations\n    return total_ways\n\nans = solution()"
    ],
    "2f084b925d5c4e3c8e7edcf07200e325": [
        "def solution():\n    digits = ''\n    number = 1\n    while len(digits) < 200:\n        digits += str(number)\n        number += 1\n    return int(digits[199])\n\nans = solution()"
    ],
    "b0092c2c2ecd4457baa2ed73067b8fd5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cost = symbols('cost')\n    price = cost + 40\n    selling_price = price * 0.8\n    profit = selling_price - cost\n\n    equation = Eq(profit, 12)\n    cost_value = solve(equation, cost)\n\n    return cost_value[0]\n\nans = solution()"
    ],
    "9f777ba0c7da4ecd859df39dac23c0ff": [
        "def solution():\n    # Given that the first number is 6\n    number1 = 6\n\n    # The first common multiple of the two numbers is 12\n    lcm = 12\n\n    # Since the common factors are only 1 and 2, and 6 is divisible by 2,\n    # The second number must be divisible by 2 and not by 6.\n    # Since 12 is the LCM, the second number must divide 12.\n    # Possible candidates are 2, 4 and 12.\n    # It cannot be 2 or 12 because they share more factors with 6 (other than 1 and 2).\n    # Therefore, the number we're looking for is 4.\n\n    number2 = lcm // number1\n\n    # Return the other number\n    return number2\n\nans = solution()"
    ],
    "452e139840314890bf5003e2f7071e6c": [
        "def solution():\n    ans = 6.25 * 8.27 * 16 + 1.25 * 0.827 * 8\n    return ans\n\nans = solution()"
    ],
    "20029a5838a5496b81ff40af3d12651e": [
        "def solution():\n    total_days = 4\n    total_tv_per_day = 500\n\n    # Total TVs for four days\n    total_tv = total_tv_per_day * total_days\n\n    # Point system\n    points_for_qualified = 5\n    points_lost_unqualified = 18\n\n    # Total points received\n    total_points = 9931\n\n    # Let's assume all products were qualified initially and calculate the initial points\n    initial_points = total_tv * points_for_qualified\n\n    # The difference between the initial and actual points is due to unqualified products\n    points_difference = initial_points - total_points\n\n    # Each unqualified product contributes to a loss of (5 + 18) = 23 points\n    total_points_lost_per_unqualified = points_for_qualified + points_lost_unqualified\n\n    # Number of unqualified products\n    num_unqualified = points_difference // total_points_lost_per_unqualified\n\n    # Number of qualified products\n    num_qualified = total_tv - num_unqualified\n    \n    return num_qualified\n\nans = solution()"
    ],
    "b7b52b9389844c4ca62d9f3110155373": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    daniel, daughter = symbols('daniel daughter')\n\n    # Daniel's age two years ago was 6 times his daughter's age at that time\n    equation1 = Eq(daniel - 2, 6 * (daughter - 2))\n    \n    # Two years from now, Daniel's age will be 4 times his daughter's age\n    equation2 = Eq(daniel + 2, 4 * (daughter + 2))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (daniel, daughter))\n\n    # Return Daniel's age this year\n    return solutions[daniel]\n\nans = solution()"
    ],
    "8646401fa22043b3be02e989c5192b0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hens, roosters = symbols('hens roosters')\n\n    equation1 = Eq(hens, 6 * roosters)\n    equation2 = Eq(hens + 60, 4 * (roosters + 60))\n\n    solutions = solve((equation1, equation2), (hens, roosters))\n\n    total_chickens_before = solutions[hens] + solutions[roosters]\n\n    return total_chickens_before\n\nans = solution()"
    ],
    "5018d5ab300649cebcf5c45010bddd83": [
        "def solution():\n    mean_initial = 12\n    mean_final = 11\n    num_numbers_initial = 7\n\n    total_initial = mean_initial * num_numbers_initial\n    num_numbers_final = num_numbers_initial + 1\n    total_final = mean_final * num_numbers_final\n\n    eighth_number = total_final - total_initial\n\n    return eighth_number\n\nans = solution()"
    ],
    "d9216e847ffd4805a2ca577a27228cc1": [
        "def solution():\n    recurring_decimal = '538462'\n    length_of_cycle = len(recurring_decimal)\n    position = 2021\n    index_of_digit = (position - 1) % length_of_cycle\n\n    ans = int(recurring_decimal[index_of_digit])\n\n    return ans\n\nans = solution()"
    ],
    "216f3c5f6bd1448286cfaa40eb464d6f": [
        "def solution():\n    count = 0\n    for number in range(1, 101):\n        count += str(number).count('9')\n    return count\n\nans = solution()"
    ],
    "8f3600a93e7c46e28e43d9b4b9104ddc": [
        "def solution():\n    return 8000 * 0.7\n\nans = solution()"
    ],
    "69c45c2ab19846ef90c4ca25ad543301": [
        "def solution():\n    # Adding all the numbers given\n    ans = 375 + 753 + 537 + 357 + 573 + 735\n    return ans\n\nans = solution()"
    ],
    "a4a8d66b728347868536b3995b8fc695": [
        "def solution():\n    # The sequence is a combination of an increasing arithmetic series 1 to 8, \n    # then a decreasing arithmetic series 7 to 1, and finally an increasing \n    # arithmetic series from 1 to 2.\n    \n    # Using the formula for the sum of the first n natural numbers, which is n*(n+1)/2,\n    # we calculate the sum of the increasing part from 1 to 8.\n    increasing_sum_first_part = 8*(8+1)//2\n    \n    # For the decreasing part from 7 to 1, we can treat it as the sum of the first\n    # 7 natural numbers and subtract it from the whole sum up to 8, since the whole sum\n    # up to 8 would include the number 8 which is not part of this sequence.\n    decreasing_sum = increasing_sum_first_part - 8\n    \n    # For the last part of the sequence, 1 and 2 are simply added.\n    last_part_sum = 1 + 2\n    \n    # The total sum is the sum of the increasing sequence, decreasing sequence, and the last part.\n    total_sum = increasing_sum_first_part + decreasing_sum + last_part_sum\n    \n    return total_sum\n\nans = solution()"
    ],
    "9ed2edaef1a74aa7ab2da7a4c1e1e5ba": [
        "def solution():\n    # When April and Baye meet, April has traveled P -> Q -> (Q - 800m)\n    # Baye has traveled (Q - 800m - distance from P)\n    # Let x be the distance Baye has traveled when they meet\n    # April travels 1800 + (1800 - x) meters, and Baye travels x meters\n    # Let s be Baye's speed, April speed will then be 4s when she turns back\n    # The time they meet is the same, so the distance they both travel should satisfy the ratio of their speeds\n    # Distance traveled by April until they meet is 2 * 1800 - 800 = 2800 meters\n    # We have the equation: distance_april / speed_april = distance_baye / speed_baye\n    # (2800) / (4s) = x / s\n    # Solve for x: x = 2800 / 4 = 700 meters\n    # Baye is 700 meters away from P when they meet\n    # The total distance between P and Q is 1800 meters\n    # The distance Baye is away from Q when April is back at P is 1800 - 700 = 1100 meters\n    \n    return 1100\n\nans = solution()"
    ],
    "dfbce185a0d1406bb45782f37f1adb2b": [
        "def solution():\n    count = 0\n    for i in range(10, 1000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "47d4d71ebd964d418d18b5348710fb9b": [
        "def solution():\n    sequence = [2, 3, 1, 4]\n    index = (100 - 1) % len(sequence)\n    return sequence[index]\n\nans = solution()"
    ],
    "e2ea592e99324a6b86bbb07ba971a430": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n\n    money = Symbol('money')\n    # Bud spent 1/3 of the money on a book\n    book = (1/3) * money\n    # Bud spent 2/5 of the money on a bag\n    bag = (2/5) * money\n    # Equation for the sum of the cost of the book and the bag\n    equation = book + bag - 132\n\n    # Solve the equation to find the original amount of money Bud had\n    original_money = solve(equation, money)\n\n    return original_money[0]\n\nans = solution()"
    ],
    "dbc4269e2e99475794fddbd7d1e826c6": [
        "def solution():\n    first_part = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.45)\n    second_part = (1 + 0.23 + 0.34 + 0.45) * (0.23 + 0.34)\n    ans = first_part - second_part\n    return ans\n\nans = solution()"
    ],
    "1ccbabdc7f034326be8b94b02ccbf7ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b, c = symbols('a b c')\n\n    equation1 = Eq(a, 5 * b)\n    equation2 = Eq(c, b - 75)\n    equation3 = Eq(a + b + c, 835)\n\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n\n    return solutions[a]\n\nans = solution()"
    ],
    "c249f8e6939148b99f296ae70f7cf7e8": [
        "def solution():\n    ans = 4125 - 837\n    return ans\n\nans = solution()"
    ],
    "2b1f58b0e57c45099538b16cb3f3c104": [
        "def solution():\n    digits = 0\n    for i in range(1, 216):  # 215 pages are numbered, so range goes up to 216\n        digits += len(str(i))  # Count the number of digits in each page number\n    return digits\n\nans = solution()"
    ],
    "eca2b23e39bc4c299b30d3fbc9b3d73d": [
        "def solution():\n    for number in range(10000, 100000):\n        if int('1' + str(number)) * 3 == int(str(number) + '1'):\n            return number\n\nans = solution()"
    ],
    "a93778b948054d42ad167593922df9c6": [
        "def solution():\n    # Worst case scenario to not get 5 green beads:\n    # Darrell takes all blue beads and all white beads first.\n    blue_beads = 5\n    white_beads = 6\n\n    # Darrell takes 4 green beads next (one less than what we need).\n    green_beads_to_take = 5\n    green_beads_required = green_beads_to_take - 1\n\n    # The next bead Darrell takes must be green.\n    # So the minimum number of beads Darrell must take is the sum of the beads taken in the worst case\n    # plus one more bead to ensure he gets the fifth green bead.\n    beads_to_draw = blue_beads + white_beads + green_beads_required + 1\n\n    return beads_to_draw\n\nans = solution()"
    ],
    "b45003629b394ccebb1e2b405d724add": [
        "def solution():\n    total_digits = 0\n    for i in range(1, 82):\n        total_digits += len(str(i))\n    return total_digits\n\nans = solution()"
    ],
    "1222cdddea1c4817bb25740ae257c8cd": [
        "def solution():\n    time_first_to_fourth = 12\n    floors_first_to_fourth = 4 - 1  # Subtract 1 because we start from the first floor\n    floors_first_to_eighth = 8 - 1  # Subtract 1 for the same reason\n\n    time_per_floor = time_first_to_fourth / floors_first_to_fourth\n    time_first_to_eighth = time_per_floor * floors_first_to_eighth\n\n    return time_first_to_eighth\n\nans = solution()"
    ],
    "101e7c9b793b4e26ac47357202b6291d": [
        "def solution():\n    # Let's say the speed of April is a and speed of Baye is b.\n    # The distance April had to travel to reach Q is equal to the distance Baye had to travel to meet April, which is 1800m - 800m = 1000m.\n    # Let t be the time that they initially walked until April met Baye.\n    # We have: a * t = 1000 and b * t = 1800 - a * t - 800.\n    # When April returns to point P, let's say Baye needs t' time to reach Q.\n    # The distance April runs back is also 1800m, but at 4 times the original speed, so it takes her t'/4 time.\n    # At the meeting point, the distance Baye has walked is (b * t') = 1800 - 800 = 1000m.\n    # Hence, the distances Baye has walked during time t and t' should be equal, so b * t = b * t'.\n    \n    # Since the times to cover the distance back and the distance to meet are equal, we get: t = t'/4.\n    # Now we use the relation of distances: a * t = 4 * a * t', then t' = t / 4.\n    # From a * t = 1000, we obtain t = 1000 / a.\n    # And from b * t = 1800 - 1000 - 800, we obtain b * t = 0, hence b = 0 / t, which doesn't make sense, as b cannot be 0.\n    # Correcting this, Baye would have walked b * t meters in time t, and the total distance would be b * t + 800.\n\n    # distance between P and Q is 1800m\n    # they meet when April is 800m away from Q, which means Baye has walked 1000m\n    # Let x be the distance Baye has walked when April meets her after returning from Q.\n    # April's speed is 4 times while returning.\n    # Baye walks (1800 - x) when April meets her initially\n    # April walks (1800 + 1800 - x) in the same time which is 5 times the distance Baye walks because 4 times speed while returning.\n   \n    # Hence, 5*(1800 - x) = 1800 + 1800 - x, solving for x:\n    # 5*1800 - 5*x = 3600 - x\n    # 9000 - 5*x = 3600 - x\n    # 9000 - 3600 = 5*x - x\n    # 5400 = 4*x\n    # x = 5400 / 4\n    # x = 1350\n    # Therefore, when April returns to P, Baye is 1350m away from P or 1800 - 1350 = 450m away from Q.\n\n    return 450\n\nans = solution()"
    ],
    "0591335fbeb544698580a0e98be03d2a": [
        "def solution():\n    a = 6\n    b = 2\n    ans = 5*a - 2*b\n    return ans\n\nans = solution()"
    ],
    "40d0f5e5a3d04db08f0040c8220611b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the masses of Parcel A, B, and C\n    A, B, C = symbols('A B C')\n\n    # Given equations\n    equation1 = Eq(A, 5 * B)  # Parcel A is 5 times the mass of Parcel B\n    equation2 = Eq(C, B - 75)  # Parcel C is 75g less than Parcel B\n    equation3 = Eq(A + B + C, 835)  # Total mass of the three parcels\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    # Return the mass of Parcel A\n    return solutions[A]\n\nans = solution()"
    ],
    "1b2e33b69c4341748d743ea3c35f44bd": [
        "def solution():\n    remainder = 3\n    possible_values = set()\n\n    for divisor in range(1, 40 - remainder):\n        for quotient in range(1, (40 - remainder) // divisor + 1):\n            dividend = divisor * quotient + remainder\n            if divisor + dividend + quotient + remainder == 40:\n                possible_values.add(dividend / quotient)\n\n    return len(possible_values)\n\nans = solution()"
    ],
    "9c0a5f1ed9254394ae35f6dd067361f9": [
        "def solution():\n    average_pizzas_per_month = 15\n    number_of_months = 5  # March to July inclusive\n\n    total_pizzas = average_pizzas_per_month * number_of_months\n    \n    return total_pizzas\n\nans = solution()"
    ],
    "6fec75e44860480685b5445a5272826d": [
        "def solution():\n    first_term = 30\n    last_term = 70\n    difference = 4\n\n    num_days = ((last_term - first_term) / difference) + 1\n\n    return int(num_days)\n\nans = solution()"
    ],
    "979c9332296e4b05927d9ad6ccb64f02": [
        "def solution():\n    # Initial ratio of birds to squirrels is 8:5\n    # Let's assume the initial number of birds is 8x and squirrels is 5x\n    \n    # Squirrels increased by 20%\n    # New number of squirrels is 5x * 1.20\n    # Total number of birds and squirrels remains the same, so 8x + 5x = 8x (new birds) + 5x * 1.20 (new squirrels)\n    \n    # Solving 8x + 5x = 8x + 6x\n    # 13x = 14x - 8x\n    # x = 8x (new birds)\n    \n    # The number of birds that flew away is 8x - 8x (new birds)\n    # Percentage of birds that flew away = ((8x - 8x (new birds)) / 8x) * 100\n\n    initial_birds = 8\n    initial_squirrels = 5\n    increase_squirrels = 20 / 100\n\n    new_squirrels = initial_squirrels * (1 + increase_squirrels)\n    new_birds = initial_birds + initial_squirrels - new_squirrels\n\n    birds_flew_away_percentage = ((initial_birds - new_birds) / initial_birds) * 100\n    \n    return birds_flew_away_percentage\n\nans = solution()"
    ],
    "1804adbd1c694fbf927bc62b4de481a7": [
        "def solution():\n    return 32 * 2.99\n\nans = solution()"
    ],
    "14d6fb53ee054b819a454314775c99b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    fiona, gary, harold = symbols('fiona gary harold')\n\n    equation1 = Eq(fiona + gary, 973)\n    equation2 = Eq(fiona + harold, 1823)\n    equation3 = Eq(harold, 6 * gary)\n\n    solutions = solve((equation1, equation2, equation3), (fiona, gary, harold))\n\n    return solutions[fiona]\n\nans = solution()"
    ],
    "5b2b9a10bf9b44c1988bdcc8f01d4a18": [
        "def solution():\n    # Pattern understanding from the given examples:\n    # (FirstNumber ◈ SecondNumber) seems to be defined as\n    # (FirstNumber * SecondNumber) / (FirstNumber + SecondNumber)\n    # Applying the same pattern to find 9 ◈ 20\n\n    first_number = 9\n    second_number = 20\n\n    ans = (first_number * second_number) // (first_number + second_number)  # using integer division for whole number\n\n    return ans\n\nans = solution()"
    ],
    "21f2e786c44e43fd8fbda4a44480bfbf": [
        "def solution():\n    total_cartons = 8\n    juice_per_carton = 3  # liters\n    juice_drank = 9  # liters\n    container_volume = 5  # liters\n\n    total_juice = total_cartons * juice_per_carton\n    remaining_juice = total_juice - juice_drank\n    containers_needed = -(-remaining_juice // container_volume)  # Ceiling division\n\n    return containers_needed\n\nans = solution()"
    ],
    "edb6ff670e7a48e9aef3d4e832e24086": [
        "def solution():\n    common_difference = 15 - 7\n    last_term = 31\n    next_term = last_term + common_difference\n    return next_term\n\nans = solution()"
    ],
    "1abbedb2f71c4dbab5df55bde5e26a5d": [
        "def solution():\n    n = 50\n    ans = (n * (n + 1)) // 2\n    return ans\n\nans = solution()"
    ],
    "7bb759a90ae748649b4ddfa82640d631": [
        "def solution():\n    ans = 782 - 9 * 52 // 2\n    return ans\n\nans = solution()"
    ],
    "9cd1a6eac3734a348b37444a5f4ed5e0": [
        "def solution():\n    return 7 * 8\n\nans = solution()"
    ],
    "1b458ff9afcc4e6694b4762bc4c0b43d": [
        "def solution():\n    count = 0\n    for A in range(1, 10):  # Since 9/A < 1, A must be between 1 and 9\n        if 5/9 < 9/A:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "83fd4800ad634c9cb2b8e8bbefea460b": [
        "def solution():\n    loafs_per_cups = 7 / 4\n    desired_loafs = 35\n    cups_needed = desired_loafs / loafs_per_cups\n    return cups_needed\n\nans = solution()"
    ],
    "71733d004c514cf2bf9b3a3ddaab0766": [
        "def solution():\n    # There are 4 friends and they send cards to each other.\n    # Each friend sends cards to the other 3 friends.\n    # Therefore, each of the 4 friends will send out 3 cards.\n    \n    num_friends = 4\n    cards_per_friend = 3 # Each friend sends a card to each of the other 3 friends.\n    \n    # Since each friend sends cards to the other 3, we can just multiply.\n    total_cards_sent = num_friends * cards_per_friend\n    \n    return total_cards_sent\n\nans = solution()"
    ],
    "de32a278ca184c9c9f171ce6754bd1c9": [
        "def solution():\n    from itertools import permutations\n\n    all_digits = range(1, 10)  # integers from 1 to 9, since no letter can take the value 0\n\n    for p in permutations(all_digits, 4):  # Check all permutations of size 4\n        D, A, R, T = p\n        if D + A + R + T == 11 and T + A + R + T == 12 and C + A + R + T == 13:\n            ART = A + R + T\n            return ART\n\n# Missing variable 'C', so calculate it separately before equations\nmax_ART = 0\nfor C in range(1, 10):\n    ans = solution()\n    if ans is not None:\n        max_ART = max(max_ART, ans)\n\nans = max_ART"
    ],
    "1af542041fcd45c9a176b5924756243f": [
        "def solution():\n    members_left_of_Tanya = 3\n    members_right_of_Tanya = 5\n    Tanya = 1\n\n    total_members = members_left_of_Tanya + Tanya + members_right_of_Tanya\n\n    return total_members\n\nans = solution()"
    ],
    "42831d4ef6484891b15f159d0746344e": [
        "def solution():\n    result = 52 / (2/3)\n    return result\n\nans = solution()"
    ],
    "33a1b183569242aa916ecbe40586c0c7": [
        "def solution():\n    from sympy import factorint\n\n    # Start from the largest four-digit number and go down\n    for i in range(9999, 1000, -1):\n        if 87878 % i == 0 and len(factorint(i)) == 1:\n            # If i is a factor and prime, return it as the answer\n            return i\n\nans = solution()"
    ],
    "630d3f51949a4ab29f59d2121794d3d7": [
        "def solution():\n    total_students = 39\n    # Let b represent the number of boys and g represent the number of girls\n    # Therefore, b + g = total_students\n\n    # Let's write the given ratio condition\n    # 1/4 of boys = 2/5 of girls\n    # (1/4)b = (2/5)g\n    # The next step is to solve the system of equations for b and g\n\n    for g in range(total_students):\n        b = total_students - g\n        if (1/4) * b == (2/5) * g:\n            return b - g\n\nans = solution()"
    ],
    "c8f89b66009449e3865d5474344519ce": [
        "def solution():\n    time_for_first_part = 280 / 7\n    time_for_middle_part = 400 / 5\n    time_for_final_part = (800 - 280 - 400) / 8\n    \n    total_time = time_for_first_part + time_for_middle_part + time_for_final_part\n    \n    return total_time\n\nans = solution()"
    ],
    "8d22899bdd964169a2e962c83bfbcbd5": [
        "def solution():\n    number_of_friends = 4\n    cards_sent_by_each = number_of_friends - 1\n    total_cards = number_of_friends * cards_sent_by_each\n\n    return total_cards\n\nans = solution()"
    ],
    "3cac306af46048b1913124fd77518e07": [
        "def solution():\n    ans = (128 - ((24 + 16) / 5)) * 2\n    return ans\n\nans = solution()"
    ],
    "82b6a8beca7d4600a963dd45eccccf7d": [
        "def solution():\n    def split_number(n, max_part):\n        if n == 0:\n            return 1\n        elif max_part == 0 or n < 0:\n            return 0\n        else:\n            return split_number(n, max_part - 1) + split_number(n - max_part, max_part)\n    return split_number(5, 5)\n\nans = solution()"
    ],
    "f701b731918b424b845fa7f5be85cca5": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "d0dd7735401a440189d8289ae8ab1028": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    daniel, patrick = symbols('daniel patrick')\n\n    # Daniel gave away 24 stickers\n    equation1 = Eq(daniel - 24, patrick + 10)\n    # Patrick had twice as many stickers as Daniel after the exchange\n    equation2 = Eq(patrick + 10, 2 * (daniel - 24))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (daniel, patrick))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "b9cbfde4746d478da4ea66e77bc853b0": [
        "def solution():\n    henry_situps = 17\n    jack_situps = 10 + (3 * henry_situps)\n    return jack_situps\n\nans = solution()"
    ],
    "069dc14c48254481a3bc04db18550ed3": [
        "def solution():\n    whale_depth = -82  # Whale is 82 metres below sea level\n    plane_height = 569  # Plane is 569 metres above sea level\n\n    # The vertical distance is the absolute difference between the whale's depth and the plane's height\n    vertical_distance = abs(whale_depth) + plane_height\n\n    return vertical_distance\n\nans = solution()"
    ],
    "ce865959d3344e57a3aaf073ee2bb3fb": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n\n    # Maximum number of left-handed girls (all boys are assumed to be right-handed)\n    left_handed_girls = girls - (total_pupils - right_handed)\n    \n    # Minimum number of right-handed girls\n    if left_handed_girls < 0:\n        right_handed_girls = girls\n    else:\n        right_handed_girls = girls - left_handed_girls\n\n    return right_handed_girls\n\nans = solution()"
    ],
    "466b36af3a8446caafde7a548b3f78e0": [
        "def solution():\n    # The smallest difference would occur when the numbers are as close as possible to each other\n    # So we arrange the digits for the first number in increasing order and\n    # the second number in decreasing order but with the smallest digit at the front\n    # For example: 123456789 and 912345678\n    \n    # To minimize the difference, we want to minimize the digits on the left, because they contribute\n    # to the larger place values in the number\n    # The first number will just be the digits in ascending order\n    smallest = int(''.join(map(str, range(1, 10))))\n    \n    # For the second number, we put the smallest digit (1) in front,\n    # and then have the rest of the digits in descending order to get the number as close as possible\n    # to the smallest number\n    largest = int('1' + ''.join(map(str, range(9, 1, -1))))\n    \n    # The difference between the two numbers\n    difference = largest - smallest\n    \n    return difference\n\nans = solution()"
    ],
    "d7f813e5b15745bbaf0c9127836fa459": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    fruits = symbols('fruits')\n\n    apples = 2 / 3 * fruits\n    bananas = 1 / 9 * fruits\n    lemons = fruits - apples - bananas\n\n    equation = Eq(apples, lemons + 12)\n    \n    solution = solve(equation, fruits)\n\n    lemons_bought = solution[0] - apples.subs(fruits, solution[0]) - bananas.subs(fruits, solution[0])\n    \n    return lemons_bought\n\nans = solution()"
    ],
    "ec878d4f92a64aa1ab12f86c3fa8a94b": [
        "def solution():\n    skirts_per_worker = 6\n    days = 9\n\n    # Calculate the total skirts made each day in an arithmetic sequence\n    # Day 1: 1 worker, Day 2: 2 workers, ..., Day 9: 9 workers\n    total_skirts = sum(skirts_per_worker * day for day in range(1, days + 1))\n\n    return total_skirts\n\nans = solution()"
    ],
    "fffb4e32f90b489bbe7949d334d8186e": [
        "def solution():\n    ans = 234000 // 520\n    return ans\n\nans = solution()"
    ],
    "2d6aea4ba7814aac9c2750870ec89264": [
        "def solution():\n    jenny_pizza = 6\n    qiqi_pizza = jenny_pizza + 5\n    return qiqi_pizza\n\nans = solution()"
    ],
    "87b40651078348b78ccc888ac86bf65e": [
        "def solution():\n    probability_over_20 = 0.6\n    probability_over_25_given_over_20 = 0.3\n\n    # P(A|B) = P(A and B)/P(B)\n    # In this case, P(A|B) = P(>25|>20), P(A and B) = P(>25), P(B) = P(>20)\n    # We know that P(>25|>20) = P(>25)/P(>20)\n    # So we can calculate P(>25) as P(>25|>20) * P(>20)\n\n    probability_over_25 = probability_over_25_given_over_20 * probability_over_20\n\n    return probability_over_25\n\nans = solution()"
    ],
    "35851918f9924fceb5a562dd5d192675": [
        "def solution():\n    # Amount of water each tap fills in one minute\n    one_tap_per_minute = 1 / (5 * 2)\n    \n    # Time for one tap to fill 500ml\n    time_for_500ml = 0.5 / one_tap_per_minute\n\n    return time_for_500ml\n\nans = solution()"
    ],
    "de4ad58a954b4989ae634d7131538ded": [
        "def solution():\n    total_erasers = 246\n    more_erasers = 32\n\n    brother_erasers = (total_erasers - more_erasers) // 2\n    return brother_erasers\n\nans = solution()"
    ],
    "4c87648eb039475abd9708a1ed7cecfa": [
        "def solution():\n    numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 29]\n    return sum(numbers)\n\nans = solution()"
    ],
    "e099576e4e594256ae673a9a633c5f85": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a = symbols('a')\n    equation = Eq(a * a + a + a, 399)\n    solution = solve(equation, a)\n\n    # filter for whole numbers\n    ans = [sol.evalf() for sol in solution if sol.is_integer]\n    return ans[0] if ans else None\n\nans = solution()"
    ],
    "f5c4e7bc746541e9b6316434d0ceb4b9": [
        "def solution():\n    ben_height = 110\n    sally_height = ben_height + 20\n\n    return sally_height\n\nans = solution()"
    ],
    "7a70eb04e5694b2f959619353709df11": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_visitors = symbols('total_visitors')\n\n    children = (3/5) * total_visitors\n    remaining = total_visitors - children\n    men = (1/2) * remaining\n\n    equation = Eq(children, men + 140)\n\n    visitors_solution = solve(equation, total_visitors)\n\n    return visitors_solution[0]\n\nans = solution()"
    ],
    "4ca9bdd241ae40399356da6f218dbb41": [
        "def solution():\n    ans = 360 / (70 - 4 * 16)\n    return ans\n\nans = solution()"
    ],
    "1b35f91f96ce4f3c9d7ed9202f8cdf3f": [
        "def solution():\n    total_cola = 2000  # In millilitres\n    drank_cola = 350   # In millilitres\n\n    remaining_cola = total_cola - drank_cola\n\n    return remaining_cola\n\nans = solution()"
    ],
    "6f30ded079154369a2666ef1c735c804": [
        "def solution():\n    return 3280 * 0.40\n\nans = solution()"
    ],
    "a59a1a5e7bb041eeba8b3ee3076a0168": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 3, 4, 6, 7, 8]\n    perms = permutations(digits, 3)\n    max_sum = 0\n    for perm in perms:\n        number1 = perm[0]*100 + perm[1]*10 + perm[2]\n        for perm2 in permutations([d for d in digits if d not in perm], 3):\n            number2 = perm2[0]*100 + perm2[1]*10 + perm2[2]\n            max_sum = max(max_sum, number1 + number2)\n    return max_sum\n\nans = solution()"
    ],
    "faea17ac401e48f69feca7264a676aa1": [
        "def solution():\n    # Analyze the pattern:\n    # 1 (Start)\n    # +7 -> 8\n    # +8 -> 16\n    # +7 -> 23\n    # +23 -> 46 (notice that 23 is just double the previous step +7)\n    # +7 -> 53\n    # Next is double the previous +7 step\n\n    # Find the next number\n    # Previous +7 step was to reach 53 from 46\n    # Next one would be double that change (7 * 2)\n\n    next_change = 7 * 2\n    next_number = 53 + next_change\n    \n    return next_number\n\nans = solution()"
    ],
    "77d56c10f2874a70a787b5301834ff74": [
        "def solution():\n    matches_played = 20\n    payment_per_match = 500\n    goals_per_game = 2\n    payment_per_goal = 100\n\n    total_payment_for_matches = matches_played * payment_per_match\n    total_payment_for_goals = matches_played * goals_per_game * payment_per_goal\n\n    total_earnings = total_payment_for_matches + total_payment_for_goals\n\n    return total_earnings\n\nans = solution()"
    ],
    "2baa1f80095e4ef99463beca11920717": [
        "def solution():\n    # Let's denote the daily amount of grass eaten by one horse as h and by one sheep as s.\n    # According to the given information:\n    # If 20 horses eat all the grass in 12 days, the amount of grass G is: G = 20 * h * 12\n    # If 60 sheep eat all the grass in 24 days, the amount of grass G is: G = 60 * s * 24\n    # And since the amount of grass a horse eats per day is equal to that of 4 sheep, we have: h = 4 * s\n    \n    # From the above, we can make two equations:\n    # 20 * h * 12 = 60 * s * 24 and h = 4 * s\n    # Therefore, 20 * 4 * s * 12 = 60 * s * 24\n    # Simplifying, we find that s = (20 * 4 * 12) / (60 * 24)\n    \n    # Now we find the daily amount consumed by one sheep\n    s = (20 * 4 * 12) / (60 * 24)\n    \n    # Since h = 4 * s, we find the amount consumed by one horse\n    h = 4 * s\n    \n    # Amount of grass G can be calculated using the amount consumed by horses or sheep, for example:\n    G = 20 * h * 12\n    \n    # Now, we want to find the days D it takes for 12 horses and 88 sheep to eat all the grass:\n    # G = (12 * h + 88 * s) * D\n    # Replacing the values we have:\n    # G = (12 * 4 * s + 88 * s) * D\n    # Now we solve for D:\n    D = G / (12 * 4 * s + 88 * s)\n    \n    return D\n\nans = solution()"
    ],
    "15d47923017f46819afb2823ad09cc4f": [
        "def solution():\n    return 125 * 33 * 8\n\nans = solution()"
    ],
    "e069b4976d444e998bace1344680903f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the tons of water A can fill, y for B, and z for C.\n    A, B, C = symbols('A B C')\n    \n    # If A and C are used, A provides 18 tons, so we get A + C = 18 + C\n    # If B and C are used, B provides 27 tons, so we get B + C = 27 + C\n    # Given B's flow rate is twice that of A: A = 1/2 * B\n    \n    equation1 = Eq(18 + C, A + C)\n    equation2 = Eq(27 + C, B + C)\n    equation3 = Eq(A, B / 2)\n    \n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    # Since A, B and C can fill the pool completely, the pool capacity\n    # is (A+B+C) = 18+A for the first case or 27+B for the second case.\n    # We can use any of those expressions to get the capacity.\n\n    A_tons = solutions[A]\n    B_tons = solutions[B]\n    C_tons = 18  # From equation1, we can derive this directly \n\n    pool_capacity = A_tons + B_tons + C_tons\n\n    return pool_capacity\n\nans = solution()"
    ],
    "8521e58090644e50b36a4c1538e31de9": [
        "def solution():\n    total_cost = 26.8\n    total_kilograms = 8\n    cost_per_kilogram = total_cost / total_kilograms\n    return cost_per_kilogram\n\nans = solution()"
    ],
    "92c3ddc959274727b4fd914c29d362cb": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 4):\n        M, A, T, H = p\n        if M == 0 or H == 0:  # M and H can't be zero as they are the first digit\n            continue\n        math = 1000 * M + 100 * A + 10 * T + H\n        htam = 1000 * H + 100 * T + 10 * A + M\n        if math + htam == 12221:\n            return A + M + T + H\n\nans = solution()"
    ],
    "8ede2732f5484360930b19455debcec8": [
        "def solution():\n    start_val = 1\n    end_val = 10\n    sum_val = sum(range(start_val, start_val + end_val * 2, 2))\n    return sum_val\n\nans = solution()"
    ],
    "519388df35614f98adbf4fccf30c1f5e": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10  # Excluding numbers starting with 0\n    no_sevens = 8 * 9 * 9  # Numbers with no sevens which have 8 possibilities for the first digit, 9 for the second and third\n    one_seven = (3 * (1 * 8 * 8)) - no_sevens  # Subtracting cases with no sevens\n    at_least_two_sevens = total_three_digit_numbers - no_sevens - one_seven\n\n    return at_least_two_sevens\n\nans = solution()"
    ],
    "45f8a5a1f53f4bff9dace272c0ede1d7": [
        "def solution():\n    ans = 10 - 5 + 1\n    return ans\n\nans = solution()"
    ],
    "ec0dc6144d204d6c943bc67a1de14ef9": [
        "def solution():\n    cost_per_box = 19.20\n    balls_in_box = 16\n    cost_per_ball = cost_per_box / balls_in_box\n    return cost_per_ball\n\nans = solution()"
    ],
    "db79add64b5e4e55bd1c4d7204bfe7d4": [
        "def solution():\n    total_sweets = 60\n    sweets_eaten = total_sweets / 2\n    sweets_left = total_sweets - sweets_eaten\n    sweets_given_away = sweets_left / 3\n    sweets_remaining = sweets_left - sweets_given_away\n\n    return int(sweets_remaining)\n\nans = solution()"
    ],
    "efd4072c0059428488794f72455b87a4": [
        "def solution():\n    number1 = 1.9\n    number2 = 1.99\n    halfway = (number1 + number2) / 2\n    return halfway\n\nans = solution()"
    ],
    "ba1ea0471abe4147b19a80a73dee7d82": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial number of $2 notes, y be the initial number of $5 notes\n    x, y = symbols('x y')\n    \n    # Cindy had a total of 55 notes at first\n    total_notes_initial = Eq(x + y, 55)\n    \n    # She spent 1/3 of the $2 notes\n    spent_two_notes = x / 3\n    \n    # She received another 8 pieces of $5 notes from her father\n    received_five_notes = 8\n    \n    # After that, the number of $5 notes she had was 3/7 of the remaining number of notes\n    five_notes_after = y + received_five_notes\n    remaining_notes_after = x - spent_two_notes + five_notes_after\n    ratio_condition = Eq(five_notes_after, 3/7 * remaining_notes_after)\n\n    # Use sympy to solve the system of equations\n    solutions = solve((total_notes_initial, ratio_condition), (x, y))\n\n    # Calculate the total amount of money Cindy had initially\n    total_money_initial = solutions[x] * 2 + solutions[y] * 5\n\n    return total_money_initial\n\nans = solution()"
    ],
    "56ce2f46479443bfaa5b050d2e0cbbe4": [
        "def solution():\n    from math import factorial\n    \n    # Mr. Spencer and his 2 children can be arranged in 2! ways, because Mr. Spencer must sit between the two children.\n    spencer_family_arrangements = factorial(2)\n    \n    # Treating Mr. Spencer and his children as one unit, we now have to arrange 4 units (the family unit plus the 3 other people)\n    # in the 4 remaining seats, which can be done in 4! ways.\n    other_people_arrangement = factorial(4)\n    \n    # The total number of arrangements is the product of these two.\n    total_arrangements = spencer_family_arrangements * other_people_arrangement\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "120862b4815543c8aca7421dc70a00e8": [
        "def solution():\n    total_questions = 6\n    correct_mark = 5\n    wrong_mark = -2\n    total_score = 23\n    \n    # assume all answers are correct, subtract wrong answers and check if it matches the total score\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        score = correct_answers * correct_mark + wrong_answers * wrong_mark\n        if score == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "1d9a3128b1db4b549effea458b3678b2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4*(x-3) + 6*x, 28)\n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "c58c161a2a7e4104a3d8b34ae6e39802": [
        "def solution():\n    distance = 56  # in meters\n    speed = 7      # in meters per minute\n    time_taken = distance / speed  # time = distance / speed\n    return time_taken\n\nans = solution()"
    ],
    "1713227e7a80417398659b991525285c": [
        "def solution():\n    from math import factorial\n\n    # Treat ABC as a single unit and same for EF, then we have 8-3+1=6 units\n    units = factorial(6)\n\n    # Now, within the ABC group, we can arrange them in 3! ways\n    ABC_perms = factorial(3)\n\n    # For the EF group, there are 2! ways to arrange E and F\n    EF_perms = factorial(2)\n\n    # Combine the permutations\n    total_ways = units * ABC_perms * EF_perms\n    \n    return total_ways\n\nans = solution()"
    ],
    "87f2dc4599dd46e7b4da2d0d59bb29b2": [
        "from math import gcd\n\ndef solution():\n    # Find the possible values for B that divide both 24 and 52\n    possible_B_values = [i for i in range(1, 53) if 24 % i == 0 and 52 % i == 0]\n\n    # Find the corresponding A and C values for each possible B\n    # Calculate the sum A + C and store in a list\n    sums = []\n    for B in possible_B_values:\n        A = 24 // B\n        C = 52 // B\n        sums.append(A + C)\n\n    # The smallest possible value of A + C will be the minimum of the list\n    ans = min(sums)\n    return ans\n\nans = solution()"
    ],
    "f5c39fd451224811bc9f3fa976367ff8": [
        "def solution():\n    result = 18\n    initial_number = (result - 7) * 3\n    return initial_number\n\nans = solution()"
    ],
    "7b25a6fdbf764009abb3fe46b1451b1f": [
        "def solution():\n    return 2 * 20 - 1\n\nans = solution()"
    ],
    "c6731b7250a84dddb40920297aeac159": [
        "def solution():\n    # Define the variables\n    normal_days = 6\n    increased_production_days = normal_days - 2\n    additional_scarfs_per_day = 24\n\n    # Calculate the total scarfs produced\n    # Let x be the number of scarfs produced per day normally\n    # normal_days * x = increased_production_days * (x + additional_scarfs_per_day)\n    # We solve for x\n    x = additional_scarfs_per_day * increased_production_days / (normal_days - increased_production_days)\n\n    # Calculate the total number of scarfs\n    total_scarfs = normal_days * x\n    \n    return int(total_scarfs)\n\nans = solution()"
    ],
    "454de52781254b73adf45135eef41054": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys_initial, girls_initial = symbols('boys_initial girls_initial')\n\n    # Initial ratio condition\n    equation1 = Eq(boys_initial / girls_initial, 5 / 3)\n\n    # Ratio after 15 boys left\n    equation2 = Eq((boys_initial - 15) / girls_initial, 5 / 6)\n\n    # Solve for initial values of boys and girls\n    solutions = solve((equation1, equation2), (boys_initial, girls_initial))\n\n    total_initial_pupils = solutions[boys_initial] + solutions[girls_initial]\n\n    return total_initial_pupils\n\nans = solution()"
    ],
    "3c337534e32542a2a1408abf3137fc73": [
        "def solution():\n    count = 0\n    for x1 in range(1, 15):\n        for x2 in range(x1 + 1, 15):\n            x3 = 15 - x1 - x2\n            if x3 > x2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "53a8834a683e42428e72d56e59ccf186": [
        "def solution():\n    return sum(range(2, 16, 2))\n\nans = solution()"
    ],
    "d709aa3b4d544c198afcabe95e0a6f53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_sweets, students = symbols('total_sweets students')\n    \n    equation1 = Eq(6*students - total_sweets, 26) # If each gets 6 sweets, short of 26 sweets\n    equation2 = Eq(5*students - total_sweets, 5)  # If each gets 5 sweets, short of 5 sweets\n    \n    solutions = solve((equation1, equation2), (total_sweets, students))\n    \n    return solutions[total_sweets]\n\nans = solution()"
    ],
    "2bf9d0f65e0c410a9060c2958cf95896": [
        "from sympy import factorint\n\ndef solution():\n    factors = factorint(675)\n    # To make the product a square, every prime factor's exponent should be even\n    for prime in factors:\n        if factors[prime] % 2 != 0:\n            factors[prime] += 1\n    \n    b = 1\n    for prime, exponent in factors.items():\n        b *= prime ** (exponent // 2)\n    return b // 675\n\nans = solution()"
    ],
    "08d6f2da7cab499fa7f725364cce9c85": [
        "def solution():\n    sale_price = 114\n    discount_rate = 1/3\n    original_price = sale_price / (1 - discount_rate)\n    return original_price\n\nans = solution()"
    ],
    "39d04fb6c8704dc88d3f67c6f0d16d16": [
        "def solution():\n    shelby_age_now = 65\n    josh_age_5_years_ago = (3/5) * (shelby_age_now - 5)\n    josh_age_now = josh_age_5_years_ago + 5\n    \n    return josh_age_now\n\nans = solution()"
    ],
    "1ed9cf1688a143ad9c551e4a3800d10f": [
        "def solution():\n    ans = 10 * 20 * 30 * 40\n    return ans\n\nans = solution()"
    ],
    "33ef6b53bcae4073868c3823af12b33b": [
        "def solution():\n    multipack_cost = 6.95  # in pounds\n    single_can_cost = 65  # in pence\n    total_individual_cost = 12 * single_can_cost  # cost of 12 individual cans in pence\n    multipack_cost_pence = multipack_cost * 100  # convert pounds to pence\n\n    savings = total_individual_cost - multipack_cost_pence\n    return savings\n\nans = solution()"
    ],
    "b50cc1f20ca94e10b645d2097f488894": [
        "def solution():\n    sale_price = 114\n    discount_rate = 1/3\n    original_price = sale_price / (1 - discount_rate)\n    return original_price\n\nans = solution()"
    ],
    "087f0c0cb6054a9ba715f2fad278b021": [
        "def solution():\n    # Assume the weights of Adam, Ben, and Carl are A, B, and C respectively.\n    # Then, A + B = 102, B + C = 97, A + C = 93.\n\n    # Add all three equations together:\n    # 2A + 2B + 2C = 102 + 97 + 93\n    # A + B + C = (102 + 97 + 93) / 2\n    total_weight = (102 + 97 + 93) / 2\n\n    return total_weight\n\nans = solution()"
    ],
    "f51139da1a3a4082be80548a0b4d3748": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b = symbols('a b')  # a for apple, b for banana\n\n    equation1 = Eq(3 * a + b, 32)\n    equation2 = Eq(6 * a + b, 53)\n\n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "47f9d71bbd1347aea812d6674ed1a0d8": [
        "def solution():\n    # Let a represent the time Alan takes to paint the room on his own\n    # (1/a) is the work Alan can do in 1 hour, similarly (1/6) is the work Bob can do in 1 hour\n    # Together they can do (1/a) + (1/6) work in 1 hour, which is equal to 1/4 since they finish in 4 hours together\n\n    from sympy import symbols, Eq, solve\n\n    a = symbols('a')\n    equation = Eq((1/a) + (1/6), 1/4)\n\n    alan_time = solve(equation, a)\n\n    return alan_time[0]\n\nans = solution()"
    ],
    "19fe1b137a4c47e4a70b3c03766f0a82": [
        "def solution():\n    percentage = 55\n    total = 80\n\n    ans = (percentage / 100) * total\n\n    return ans\n\nans = solution()"
    ],
    "2f235f0788fb43ae81e1809f99c806ca": [
        "def solution():\n    total_stamps = 310\n    singapore_stamps = 172\n    malaysia_stamps = total_stamps - singapore_stamps\n    difference = singapore_stamps - malaysia_stamps\n    return difference\n\nans = solution()"
    ],
    "536f036013ab4469bca6f5ad12ae6efc": [
        "def solution():\n    count = 0\n    \n    # Numbers with 4 digits\n    for i in range(3, 6): # First digit can only be 3, 4, or 5\n        for j in range(1, 7):\n            for k in range(1, 7):\n                for l in range(1, 7):\n                    if len({i, j, k, l}) == 4: # Ensure no digit is repeated\n                        number = i * 1000 + j * 100 + k * 10 + l\n                        if number >= 3267 and number <= 5120:\n                            count += 1\n    \n    # Numbers with 3 digits, all numbers between 1000 and 3267 are invalid\n    # Only numbers starting with 1, 2 will be valid as they are automatically less than 3267\n    for i in range(1, 3): # First digit can only be 1 or 2\n        for j in range(1, 7):\n            for k in range(1, 7):\n                if len({i, j, k}) == 3: # Ensure no digit is repeated\n                    count += 1\n\n    return count\n\nans = solution()"
    ],
    "db4169b4944e4cbfbcf68f063aba4c5f": [
        "def solution():\n    principal = 500\n    rate = 0.08\n    time = 10\n    \n    # Using the formula for compound interest: A = P(1 + r/n)^(nt)\n    # Here, n=1 as the interest is compounded yearly\n    amount = principal * (1 + rate)**time\n    \n    return amount\n\nans = solution()"
    ],
    "6bc35ca24e8a477a8721a3ee646bc624": [
        "def solution():\n    num1 = 10024\n    num2 = 3968\n    ans = num1 + num2\n    return ans\n\nans = solution()"
    ],
    "098dd57d750645208b9a88bebb06ae3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for each person's number of stamps\n    andrew, kim, shaun = symbols('andrew kim shaun')\n\n    # Create equations based on the information given\n    equation1 = Eq(shaun, 2 * kim)\n    equation2 = Eq(andrew, shaun - 24)\n    equation3 = Eq(andrew + kim + shaun, 256)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (andrew, kim, shaun))\n\n    # Answer is how many stamps Andrew has\n    return solutions[andrew]\n\nans = solution()"
    ],
    "8ae98f07396b40058f13ac11affb9784": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_score = symbols('original_score')\n\n    equation = Eq(original_score - 30, (original_score / 2) + 10)\n    solution = solve(equation, original_score)\n\n    return solution[0]\n\nans = solution()"
    ],
    "533857ee1add4235b4509835e79455c4": [
        "def solution():\n    # Let a be the time in hours Alan takes to paint the room alone\n    # Let b be the time in hours Bob takes to paint the room alone\n    # Let W be the total work done (for simplicity, we assume it as 1, representing the whole room)\n    # The rate of work A and B do together is W/4 per hour\n    # The rate of work B does alone is W/6 per hour\n\n    # Alan's rate plus Bob's rate should equal the rate they work together\n    # (W/a) + (W/6) = W/4\n    # To find Alan's rate, we need to solve for a:\n    # (1/a) + (1/6) = 1/4\n    # 1/a = 1/4 - 1/6\n    # 1/a = (6 - 4) / 24\n    # 1/a = 2/24\n    # a = 24/2\n    # a = 12\n\n    a = 12\n    return a\n\nans = solution()"
    ],
    "119cdd759a7d4ca9845f3cc8718b8443": [
        "def solution():\n    return 55 / 100 * 80\n\nans = solution()"
    ],
    "eea021c591d7400d80e856a767d07752": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the initial amount of money for each be 'x'\n    x = symbols('x')\n\n    # Equation based on the problem statement\n    equation = Eq(6 * (x - 58), (x - 13))\n\n    # Solving the equation\n    initial_amount_each = solve(equation, x)[0]\n\n    # Total initial amount for both\n    total_initial_amount = 2 * initial_amount_each\n\n    return total_initial_amount\n\nans = solution()"
    ],
    "d5155e4d5ad84669b50a6dc5c2a99d1c": [
        "def solution():\n    for sweets in range(1, 30):\n        if sweets % 3 == 0 and sweets % 2 == 1 and sweets % 4 == 1 and sweets % 5 == 1:\n            return sweets\n\nans = solution()"
    ],
    "d1b3edb622a94a938bdd4deb2c79349e": [
        "def solution():\n    ans = 250 - (6*6) - (8*6)\n    return ans\n\nans = solution()"
    ],
    "508b9d97347440a0b80cafeabef4a947": [
        "def solution():\n    total_votes = 120\n    mark_votes = 22\n    nicole_votes = 27\n    peter_votes = 35\n\n    # Maximum votes one can get is when all remaining students vote for the same person\n    remaining_votes = total_votes - (mark_votes + nicole_votes + peter_votes)\n\n    # For Peter to win without fail, he needs one more vote than the sum of the other two candidates' votes\n    votes_needed_for_majority = (mark_votes + nicole_votes) + 1\n    peter_additional_votes = votes_needed_for_majority - peter_votes\n\n    # In case Peter already has the majority, no more votes are needed\n    if peter_additional_votes <= 0:\n        return 0\n\n    # However, if the remaining votes plus Peter's votes are still less than needed for majority, he cannot win without fail\n    if (remaining_votes + peter_votes) < votes_needed_for_majority:\n        return -1\n\n    return peter_additional_votes\n\nans = solution()"
    ],
    "b57cda394d944362b1e48088868e9f0c": [
        "def solution():\n    days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\n    start_day_index = days.index(\"Monday\")  # today is Monday\n    end_day_index = (start_day_index + 28) % 7\n    \n    return f\"000{end_day_index + 1}\"  # since days of the week are 1-indexed in the format provided\n\nans = solution()"
    ],
    "6195126bb5a54128ab0d4b1902877f4f": [
        "def solution():\n    result = 12.35 + 8.65 + 9.8 - 2.8\n    return result\n\nans = solution()"
    ],
    "a6b80ec179af453daf8021b9dc7907b9": [
        "def solution():\n    a_value = 9 ** (3 / 2)\n    return a_value\n\nans = solution()"
    ],
    "0297a10276ed45e1aa82953f7cfb5934": [
        "def solution():\n    return 6 * 0.001\n\nans = solution()"
    ],
    "f475d2f1e6f34559b3da9ca1ce9d31ff": [
        "def solution():\n    ans = 52 / (2/3)\n    return ans\n\nans = solution()"
    ],
    "507ce61646b54d9d972812acdf557e23": [
        "def solution():\n    road_length = 240\n    interval = 12\n    # Since no poles are at either end, we subtract one interval from each end\n    effective_road_length = road_length - 2 * interval\n    # Divide the effective road length by the interval to find the number of poles\n    num_poles = effective_road_length // interval\n    \n    return num_poles\n\nans = solution()"
    ],
    "3c1879332bf54abaa9acb25e23c4e762": [
        "def solution():\n    total_items = 52\n    more_pencils = 10\n\n    # Let the number of rulers be r\n    # Then, the number of pencils will be r + more_pencils\n    # According to the problem, r + (r + more_pencils) = total_items\n    # Solving for r gives us:\n\n    r = (total_items - more_pencils) / 2\n\n    return int(r)\n\nans = solution()"
    ],
    "9d83d1281e9a4e2db5186517aa7ae8eb": [
        "def solution():\n    numbers = [11, 13, 17, 12]\n    mean_value = 11\n\n    sum_of_numbers = mean_value * (len(numbers) + 1)\n    x = sum_of_numbers - sum(numbers)\n\n    return x\n\nans = solution()"
    ],
    "cc51dc96be8d4cb99c8479ff14df80ea": [
        "def solution():\n    value_diff = 7 * (10**3) - 7 * (10**1)  # The difference between the thousands place and the tens place\n    return value_diff\n\nans = solution()"
    ],
    "8f9071448b334615b680eae78ad6d93f": [
        "def solution():\n    cost_per_person = 253 / 11\n    total_cost_for_12_people = cost_per_person * 12\n    return total_cost_for_12_people\n\nans = solution()"
    ],
    "a97ee845f64d4f25b71479ba9826754d": [
        "def solution():\n    # If we take 3 marbles of each color, we may not have 4 of the same color\n    marbles_taken = 3 * 3  # 3 red, 3 yellow, 3 blue\n\n    # Now we need to take one more marble to ensure 4 of the same color\n    marbles_taken += 1  # This will guarantee the fourth marble of the same color\n\n    return marbles_taken\n\nans = solution()"
    ],
    "11e835ed8a2649f0b446fa81c9cd3d23": [
        "def solution():\n    boys = 200\n    boys_to_girls_ratio = 5 / 6\n    girls = boys / boys_to_girls_ratio\n    return int(girls)\n\nans = solution()"
    ],
    "eb0f5add450e4a9ab6a265d98bae439c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red, yellow = symbols('blue red yellow')\n\n    equation1 = Eq(blue, 2 * red)\n    equation2 = Eq(yellow, blue + 2.40)\n    equation3 = Eq(blue + red + yellow, 65.40)\n\n    solutions = solve((equation1, equation2, equation3), (blue, red, yellow))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "0aa9f0da78114b919761155b61de3f58": [
        "def solution():\n    third_sequence = '3' * 1000\n    ans = sum(int(digit) for digit in third_sequence)\n    return ans\n\nans = solution()"
    ],
    "1f3fc787b72e4079adc614b98529d7df": [
        "def solution():\n    percentage = 15 / 100\n    total_amount = 29\n\n    result = percentage * total_amount\n    \n    return result\n\nans = solution()"
    ],
    "06a3c4c2e5804a44ace159113da6ba05": [
        "def solution():\n    max_number = 100\n    step = 2\n    multiples_of_two = max_number // step\n    return multiples_of_two\n\nans = solution()"
    ],
    "ab6dca5c40ee402e956dc70279823b4c": [
        "def solution():\n    cost_of_8_books = 32\n    cost_of_1_book = cost_of_8_books / 8\n    cost_of_12_books = cost_of_1_book * 12\n    return cost_of_12_books\n\nans = solution()"
    ],
    "027e7a3d49eb4325a8b4a3460e1cc172": [
        "def solution():\n    final_volume_C = 50 + 10  # Volume of container C after addition\n    mass_solute_C = final_volume_C * 0.005  # Mass of solute in container C (0.5% concentration)\n\n    # Since 10 grams transferred from B to C carries over solute from A,\n    # it is equal to the mass of solute C.\n    concentration_B_to_C = mass_solute_C / 10\n\n    final_volume_B = 40 + 10\n    mass_solute_B = concentration_B_to_C * final_volume_B\n\n    # Accounting for the dilution that happened when transferring from A to B\n    concentration_A_to_B = mass_solute_B / 10\n\n    original_concentration_A = (concentration_A_to_B * (30 + 10)) / 10\n\n    return original_concentration_A\n\nans = solution()"
    ],
    "0b6bdeab9546405d978d1812c7201565": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 * x - 13, 55)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ec87e304fc2740f28c9d1e303434b7bd": [
        "def solution():\n    fraction = 2 / 5\n    percentage = 35 / 100\n    decimal = 0.604\n    ans = fraction + percentage + decimal\n    return ans\n\nans = solution()"
    ],
    "144a37458618498d8c19e53cf5ec0049": [
        "from sympy import divisors, gcd\n\ndef solution():\n    # Find prime factors of 2016 and 1377\n    divisors_2016 = divisors(2016)\n    divisors_1377 = divisors(1377)\n\n    # Find common divisors (possible ages from last year)\n    common_divisors = set(divisors_1377).intersection(divisors_2016)\n\n    # Iterate through combinations to find the ages that multiplied to 1377 last year and that, when increased by 1, multiply to 2016\n    for age1 in common_divisors:\n        for age2 in common_divisors:\n            for age3 in common_divisors:\n                if age1 * age2 * age3 == 1377:\n                    if (age1 + 1) * (age2 + 1) * (age3 + 1) == 2016:\n                        # Calculate result for two years ago\n                        ans = (age1 - 1) * (age2 - 1) * (age3 - 1)\n                        return ans\n\nans = solution()"
    ],
    "3af1e296b55d48b081f32a1a006667ef": [
        "def solution():\n    from math import factorial\n\n    # Consider the pair as a single entity, so we have 4 entities to arrange.\n    arrangements_for_4 = factorial(4)\n    \n    # The pair can stand in 2 different orders.\n    arrangements_for_pair = factorial(2)\n\n    # Total arrangements is the product of both.\n    total_arrangements = arrangements_for_4 * arrangements_for_pair\n\n    return total_arrangements\n\nans = solution()"
    ],
    "e514e8bc1f604e7584c55c9dca3b2fed": [
        "def solution():\n    first_three_days_total = 33\n    last_four_days_average = 18\n    last_four_days_total = last_four_days_average * 4\n    week_total = first_three_days_total + last_four_days_total\n   \n    days_in_week = 7\n    average_per_day = week_total / days_in_week\n    \n    return average_per_day\n\nans = solution()"
    ],
    "0c1b04af51f742999f2ca9765aedb50d": [
        "def solution():\n    total_flour = 600\n    flour_left = 21\n    flour_used = total_flour - flour_left\n    \n    return flour_used\n\nans = solution()"
    ],
    "4ecf6dfe09074d81b2c8e57fe42c031f": [
        "def solution():\n    weight_metal1 = 12  # mg\n    nickel_percent1 = 40  # %\n\n    weight_metal2 = 13  # mg\n    nickel_percent2 = 60  # %\n\n    # Calculate the weight of nickel in each metal\n    weight_nickel1 = weight_metal1 * (nickel_percent1 / 100)\n    weight_nickel2 = weight_metal2 * (nickel_percent2 / 100)\n\n    # Calculate the total weight of nickel and the new metal\n    total_nickel = weight_nickel1 + weight_nickel2\n    total_metal = weight_metal1 + weight_metal2\n\n    # Find the percent concentration of nickel in the new metal\n    nickel_concentration_percent = (total_nickel / total_metal) * 100\n\n    return nickel_concentration_percent\n\nans = solution()"
    ],
    "31aa53351e2b49aab72bde2d7ea3c1a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(9 - (x + 3), 1)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "de0d981643f2427f8f190ba70891f0a6": [
        "def solution():\n    number1 = -3\n    number2 = 8\n    halfway = (number1 + number2) / 2\n    return halfway\n\nans = solution()"
    ],
    "c17e0a2b113d46b781b7f26e782fd14f": [
        "def solution():\n    # In a single round-robin tournament with 8 players, each player plays against every other player once.\n    # Since there are no ties, there are a total of 7 matches for each player.\n    # Since everyone scores a different number of wins, the possible number of wins are from 0 to 7.\n    # The champion must win all his/her matches to ensure a unique number of wins for every player.\n    # Therefore the champion records 7 wins in the tournament.\n\n    ans = 7\n    return ans\n\nans = solution()"
    ],
    "f8b94a6a82c7406a83b47ec788b92ca2": [
        "def solution():\n    # Let x be the initial number of chickens per pen\n    # Let y be the total number of chickens\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    \n    # Initial setup\n    equation1 = Eq(24 * x, y)\n    \n    # After building 6 more pens and reducing 6 chickens per pen\n    equation2 = Eq((24 + 6) * (x - 6), y)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[y]\n\nans = solution()"
    ],
    "ffb4fa57b0eb47ffb07fa2c7f49ef9f4": [
        "def solution():\n    from sympy import divisors\n\n    # Get divisors of both products\n    divisors_2016 = divisors(2016)\n    divisors_1377 = divisors(1377)\n\n    # Find a set of factors of 2016 which has a corresponding\n    # set of factors for 1377 when each is decreased by 1\n    for a in divisors_2016:\n        for b in divisors_2016:\n            for c in divisors_2016:\n                # Ensure a, b and c are unique ages and their product is 2016\n                if a * b * c == 2016 and len(set([a, b, c])) == 3:\n                    # Each age a year ago\n                    a1 = a - 1\n                    b1 = b - 1\n                    c1 = c - 1\n                    # Check if the product of a, b and c from a year ago is 1377\n                    if a1 * b1 * c1 == 1377:\n                        # Calculate their ages two years ago\n                        return (a - 2) * (b - 2) * (c - 2)\n                    \nans = solution()"
    ],
    "be0945399c6b4d0dba2ad2baaabb31ad": [
        "def solution():\n    total_sum = 0\n    n = 1\n    while total_sum <= 3405:\n        total_sum += n\n        n += 1\n    n -= 1\n    correct_sum = n * (n + 1) // 2\n    duplicate_number = 3405 - correct_sum\n    return duplicate_number\n\nans = solution()"
    ],
    "5fd6b39e9b3a49549d8336ce20856f59": [
        "def solution():\n    # The sum of the first n terms in an arithmetic sequence is given by:\n    # S_n = n/2 * (2a + (n - 1)d)\n    # where S_n is the sum of the first n terms, n is the number of terms, a is the first term, and d is the common difference.\n    \n    # Let S_6 be the sum of the first 6 terms, and S_12 be the sum of the first 12 terms.\n    # We have two equations:\n    # S_6 = 6/2 * (2a + (6-1)d) = 64\n    # S_12 = 12/2 * (2a + (12-1)d) = 156\n    \n    # Simplifying the equations gives us:\n    # 3 * (2a + 5d) = 64  -->  6a + 15d = 64        ... (1)\n    # 6 * (2a + 11d) = 156 --> 12a + 66d = 156      ... (2)\n    \n    # By subtracting equation (1) from equation (2), we can find the value of 'd'.\n    d = (156 - 64) / (12 + 15)\n    \n    # Now we can solve for 'a' using equation (1).\n    a = (64 - 15 * d) / 6\n    \n    # Now we have 'a' and 'd', we can find the sum of the first 18 terms.\n    S_18 = (18/2) * (2 * a + (18 - 1) * d)\n    \n    return S_18\n\nans = solution()"
    ],
    "221781af3d4444f881f99b112ffa3aa3": [
        "def solution():\n    remainder = 3\n    possible_values = set()\n\n    for divisor in range(1, 40 - remainder):\n        for quotient in range(1, (40 - remainder - divisor)):\n            dividend = divisor * quotient + remainder\n            if dividend + divisor + quotient + remainder == 40:\n                possible_values.add(dividend / quotient)\n\n    ans = len(possible_values)\n    return ans\n\nans = solution()"
    ],
    "13aecb4038e84ceeb7586defdcee7f3d": [
        "def solution():\n    ans = 15 / (1/7)\n    return ans\n\nans = solution()"
    ],
    "758d557365b6402ba3525678e7c085b7": [
        "def solution():\n    reversed_subtrahend = int(str(26)[::-1])\n    reversed_minuend = int(str(729)[::-1])\n    reversed_result = reversed_minuend - reversed_subtrahend\n    result = int(str(reversed_result)[::-1])\n    return result\n\nans = solution()"
    ],
    "cbad92babc7144ffa95f44fbcc74faa1": [
        "from math import gcd\n\ndef solution():\n    largest_factor = gcd(45, 60)\n    return largest_factor\n\nans = solution()"
    ],
    "0f19ecaf9e6a4a268a28394ccf10d38e": [
        "def solution():\n    return 312 + 9\n\nans = solution()"
    ],
    "4c066587422f44769fef6ac62ea2a629": [
        "def solution():\n    ashley_age_now = 10\n    ashley_age_3_years_ago = ashley_age_now - 3\n    brother_age_3_years_ago = ashley_age_3_years_ago - 2\n    brother_age_now = brother_age_3_years_ago + 3\n    return brother_age_now\n\nans = solution()"
    ],
    "ddbda2b526d94447986b592f33c0b725": [
        "def solution():\n    train_speed = 20  # meters per second\n    train_length = 160  # meters\n    time_to_pass = 30  # seconds\n    \n    bridge_length = (train_speed * time_to_pass) - train_length\n    \n    return bridge_length\n\nans = solution()"
    ],
    "4f44a87fc2ed45138614656e0d4cdc2e": [
        "def solution():\n    emily_score = 30\n    hebe_percentage = 60\n    total_marks = 60\n    hebe_score = (hebe_percentage / 100) * total_marks\n    more_marks = hebe_score - emily_score\n    return int(more_marks)\n\nans = solution()"
    ],
    "92633a5c2d4045258377b67eb7914f16": [
        "def solution():\n    # Jogging time (from 6:30am to 7:00am)\n    jogging_time_hours = (7 - 6) - (30 / 60)  # 0.5 hours\n    jogging_speed_kmph = 9  # km per hour\n    \n    # Walking time (from 7:00am to 8:00am)\n    walking_time_hours = 1  # 1 hour\n    walking_speed_kmph = 7.5  # km per hour\n    \n    # Distance covered during jogging\n    jogging_distance_km = jogging_speed_kmph * jogging_time_hours\n    \n    # Distance covered during walking\n    walking_distance_km = walking_speed_kmph * walking_time_hours\n    \n    # Total distance covered\n    total_distance_km = jogging_distance_km + walking_distance_km\n\n    return total_distance_km\n\nans = solution()"
    ],
    "e7b83b9b5e1e45ebbe58b8753935aa52": [
        "def solution():\n    ans = 0.23 + 1.9 + 0.083\n    return ans\n\nans = solution()"
    ],
    "9bba3d6fb8a24e63b64427cf2f150104": [
        "def solution():\n    # There are 2 choices for the 1st digit (it cannot be 0), and 3 choices for both the 2nd and the 3rd digit\n    # (as they can be 0, or 3, or 4)\n    count = 2 * 3 * 3\n    return count\n\nans = solution()"
    ],
    "c3bbf6f074774feb9ff7aa22e47b31ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wins, losses = symbols('wins losses')\n    total_games = 63\n\n    # Equation: wins = 2 * losses\n    equation = Eq(wins, 2 * losses)\n\n    # The total number of games is the sum of wins and losses\n    total_equation = Eq(wins + losses, total_games)\n\n    # Solve the system of equations\n    solutions = solve((equation, total_equation), (wins, losses))\n\n    return solutions[losses]\n\nans = solution()"
    ],
    "54dfc5bdf157460ba47b99d87cd73558": [
        "def solution():\n    common_factor = 13\n    result_1 = 55 * common_factor\n    result_2 = 44 * common_factor\n    ans = result_1 - result_2\n    return ans\n\nans = solution()"
    ],
    "0877713fe19e4645ba3e7db233f47117": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cows, goats = symbols('cows goats', integer=True)\n\n    # Original proportions\n    equation1 = Eq(cows, 0.65 * (cows + goats))\n\n    # After adding 240 more animals, the percentage of cows increased to 85%\n    equation2 = Eq(cows + 240, 0.85 * (cows + goats + 240))\n\n    # Number of goats doubled\n    equation3 = Eq(2 * goats, (cows + goats + 240) - (cows + 240))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (cows, goats))\n\n    return solutions[goats]\n\nans = solution()"
    ],
    "bdce3fe10c474df4a19293921b1f972c": [
        "def solution():\n    ans = 3647 // 7\n    return ans\n\nans = solution()"
    ],
    "56e620f09fd54f8c8dc2fe4e97e4c388": [
        "def solution():\n    ans = 9 - (-8) + 7 - (-6) + 5 - (-4) + 3 - (-2) + 1\n    return ans\n\nans = solution()"
    ],
    "3a1e525fd69d41e8bdcd18e39e142f01": [
        "from math import factorial as f\n\ndef solution():\n    # Calculate permutations for 3 girls as a single unit with 3 teachers: (3 + 1) objects\n    girls_teachers_perm = f(4)\n\n    # Permutations of 3 girls among themselves\n    girls_perm = f(3)\n\n    # Now, we place the boys in the spaces between girls+teachers group\n    # Since no two boys can stand adjacent to each other, we have 5 slots (_G_T_G_T_G_)\n    boys_slots = 5\n    boys_perm = f(boys_slots) // (f(boys_slots - 3))\n\n    # Multiply all permutations together to get the total arrangements\n    total_arrangements = girls_teachers_perm * girls_perm * boys_perm\n\n    return total_arrangements\n\nans = solution()"
    ],
    "a9d8b165410c4c1bb74c1c179cf2b128": [
        "def solution():\n    # Area of Triangle X with side length 3 cm\n    # Using the formula for the area of an equilateral triangle: A = (sqrt(3)/4) * a^2\n    area_x = (3**2) * (3**(1/2)) / 4\n\n    # Area of Triangle Y with side length 9 cm\n    # Using the formula for the area of an equilateral triangle: A = (sqrt(3)/4) * a^2\n    area_y = (9**2) * (3**(1/2)) / 4\n\n    # The number of times Triangle X fits into Triangle Y is the ratio of their areas\n    ans = area_y / area_x\n    return int(ans)\n\nans = solution()"
    ],
    "6791440725654626ab51c36b9e94af1d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    games_played = 63\n    wins, losses = symbols('wins losses')\n    \n    equation = Eq(wins, 2 * losses)\n    total_games = Eq(wins + losses, games_played)\n\n    solutions = solve((equation, total_games), (wins, losses))\n    \n    return solutions[losses]\n\nans = solution()"
    ],
    "d32cc1f9d4b249a0a64ad0610aee08f4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    total_cost = Eq(5*x*12 + 3*x*5, 120)\n    \n    sol = solve(total_cost, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "78fdc8747f5a4d3aabce52d5e041f78f": [
        "from math import comb\n\ndef solution():\n    total_students = 5\n    students_to_select = 2\n    \n    ways = comb(total_students, students_to_select)\n    \n    return ways\n\nans = solution()"
    ],
    "1e0501ed2b454e8abdc227085d3243e5": [
        "def solution():\n    larger_value = 8 * 9 * 10\n    smaller_value = 1 * 2 * 3\n    difference = larger_value - smaller_value\n\n    return difference\n\nans = solution()"
    ],
    "22bdbf51eef54f7ab3652064b38ab235": [
        "def solution():\n    bouquets = 30\n    roses_per_bouquet = 9\n    total_roses = bouquets * roses_per_bouquet\n    return total_roses\n\nans = solution()"
    ],
    "960bdf3b8c724781b3eb3607d3f03609": [
        "def solution():\n    appetisers = 2\n    main_courses = 3\n    soups = 2  # 1 soup of the day + choosing not to have soup\n    desserts = 3  # 2 desserts + choosing not to have dessert\n\n    # Must pick 1 appetiser and 1 main course, but soup and dessert are optional\n    combinations = appetisers * main_courses * soups * desserts\n\n    return combinations\n\nans = solution()"
    ],
    "65fe506e0c914a8c89a3851368d52567": [
        "def solution():\n    for n in range(100, 201):\n        if n % 8 == 3 and n % 9 == 1:\n            return n\n\nans = solution()"
    ],
    "9bb456e92cbe4dd58a5b0ef6f7f77fc4": [
        "def solution():\n    from sympy import Symbol, Eq, solve\n\n    blue_balls = Symbol('blue_balls')\n    \n    # Total number of ways to choose 2 balls from all balls in the bag\n    total_ways = (4 + blue_balls) * (3 + blue_balls) / 2\n\n    # Number of ways to choose 2 red balls from the 4 red balls\n    red_ways = 4 * 3 / 2\n\n    # The probability is given as 2/7\n    probability_eq = Eq(red_ways / total_ways, 2 / 7)\n    \n    # Solve the equation for the number of blue balls\n    solution = solve(probability_eq, blue_balls)\n    \n    # We want the solution that is a positive integer because we cannot have negative balls\n    num_blue_balls = [sol for sol in solution if sol.is_integer and sol > 0]\n    \n    return num_blue_balls[0]\n\nans = solution()"
    ],
    "cfe05c3227c9427eadd085e9de47f044": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5 * x * 12 + 3 * x * 5, 120)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "2c300804986d4690a8ea13da0f77fd40": [
        "def solution():\n    # Let's denote the weight of 1 dog as D, 1 rabbit as R and 1 chicken as C.\n    # According to the problem, we have the following equations:\n    # D = 8 * R (1 dog weigh as much as 8 rabbits)\n    # R = 2 * C (1 rabbit weigh as much as 2 chickens)\n    \n    # We find the chicken equivalent weight of one rabbit by substituting R value into the second equation.\n    # R = 2 * C => C = R / 2\n    \n    # Now, we substitute the R value in terms of C into the first equation.\n    # D = 8 * R => D = 8 * (2 * C) => D = 16 * C\n    \n    # Thus, 1 dog weighs as much as 16 chickens.\n    return 16\n\nans = solution()"
    ],
    "3aa12de14bc74a3ba901fd2b6e1a45e0": [
        "from sympy import factorial\n\ndef solution():\n    # The product 2^27 can be obtained by the digits: 2, 4, 8.\n    # Since 2 = 2^1, 4 = 2^2, and 8 = 2^3, we can break 2^27 down into these digits.\n    # Let's find out how many times each digit can appear.\n    # We must have a combination of these digits such that the sum of their exponents is 27,\n    # i.e., a*1 + b*2 + c*3 = 27 where a, b, and c are the number of times 2, 4, and 8 appear, respectively.\n    \n    # Initialize the count to 0\n    count = 0\n    \n    # We iterate over possible combinations of a, b, c such that a + 2b + 3c = 27\n    for a in range(28):\n        for b in range(14):\n            for c in range(10):\n                if a + 2*b + 3*c == 27:\n                    # The number of ways to arrange these digits is the multinomial coefficient,\n                    # which is the factorial of the total number of digits divided by the product of factorials of the counts of each digit:\n                    # factorial(a+b+c) / (factorial(a) * factorial(b) * factorial(c))\n                    count += factorial(a+b+c) // (factorial(a) * factorial(b) * factorial(c))\n    \n    # Return the final count\n    return count\n\nans = solution()"
    ],
    "08a17429c2dc42c9b5df787d8fb4954e": [
        "def solution():\n    # Let x be the total number of slices\n    # 3/5 of the cake was eaten, 2 slices were given to friends, and 4 slices were left.\n    # So, (3/5)x + 2 + 4 = x\n    # Solving for x, we have:\n    # (3/5)x + 6 = x\n    # (3/5)x - x = -6\n    # (-2/5)x = -6\n    # x = -6 / (-2/5)\n    # x = -6 * (-5/2)\n    # x = 15\n    # There were 15 slices of cake at first\n    \n    total_slices = 15\n    return total_slices\n\nans = solution()"
    ],
    "6a7086b44acb47afbeb35af00a141b68": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let m be the rate at which Mike types and d be the rate at which Danny types\n    m, d = symbols('m d')\n    \n    # If they work together, they finish the job in 10 hours\n    equation1 = Eq(m + d, 1/10)\n    \n    # Mike types for 8 hours and Danny types for 13 hours to finish the job\n    equation2 = Eq(8 * m + 13 * d, 1)\n    \n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (m, d))\n\n    # Calculate the time it takes Danny to finish the job by himself (1/d)\n    time_danny = 1 / solutions[d]\n    \n    return time_danny\n\nans = solution()"
    ],
    "7e303a81959f4dd3a8821c03daae5549": [
        "def solution():\n    ans = 51 + 50 - 45 + 40 - 35 + 30 - 25 + 20 - 15\n    return ans\n\nans = solution()"
    ],
    "346ccc5e74434ee687f8c2396be87095": [
        "def solution():\n    place_value_1 = 3 * 10**2  # The place value of the 3 in the hundreds place\n    place_value_2 = 3 * 10**5  # The place value of the 3 in the hundred thousands place\n    difference = place_value_2 - place_value_1\n    return difference\n\nans = solution()"
    ],
    "807f47199e524c889e2cda11d4b6aedd": [
        "def solution():\n    total_pencils = 7\n    total_cases = 2\n\n    min_pencils = (total_pencils + total_cases - 1) // total_cases\n\n    return min_pencils\n\nans = solution()"
    ],
    "5a9cac73f017480d9c49cfcbd2b7a15a": [
        "def solution():\n    def custom_oplus(a, b):\n        return sum([a + i for i in range(b + 1)])\n\n    m = 1\n    while True:\n        if custom_oplus(m, 10) == 66:\n            return m\n        m += 1\n\nans = solution()"
    ],
    "5f8547cf000a40589c011a253c103568": [
        "def solution():\n    side_length = 54\n    distance_apart = 3\n\n    # Since the chess is also put in corners, we calculate the chess per side as follows:\n    # Instead of dividing the whole side length by the distance (which would count the corner piece twice for two sides),\n    # we subtract the distance once before dividing to only count the corner piece once.\n\n    # Calculate number of chess per side (the '-1' is to not count the corner twice)\n    chess_per_side = (side_length // distance_apart) - 1\n\n    # Total chess is 4 sides times chess per side, plus 4 for the corners\n    total_chess = (chess_per_side * 4) + 4\n\n    return total_chess\n\nans = solution()"
    ],
    "a6143a5df73447d390e4a2025ba6b232": [
        "from sympy import binomial, Integer\n\ndef solution():\n    # 10 digits, each appearing at most 4 times to avoid painting\n    max_without_red = 4 * 10\n\n    # If there are 100 squares, the remaining will have at least one digit 5 times or more\n    red_squares = 100 - max_without_red\n\n    return Integer(red_squares)\n\nans = solution()"
    ],
    "507fbe69eeb341c4a1e466db8bc07b00": [
        "def solution():\n    first_term = 50\n    common_difference = 46 - 50  # The sequence is decreasing\n    n = 1  # Start with the first term\n\n    # Calculate terms until we get a negative term\n    while first_term + (n - 1) * common_difference > 0:\n        n += 1\n    \n    # Subtract one because we want the term before it becomes negative\n    return n - 1\n\nans = solution()"
    ],
    "84c34602d0aa4900966c5a8ceeee71d3": [
        "def solution():\n    initial_amount = 10\n    spent_amount = 2.89\n    received_amount = 4/5\n    \n    final_amount = initial_amount - spent_amount + received_amount\n    \n    return final_amount\n\nans = solution()"
    ],
    "a19b145685704a7fb1edf952d6f61f0d": [
        "def solution():\n    for i in range(32, 100):  # since the square root of the smallest 4-digit number (1000) is 31.62 and of the largest (9999) is 99.99\n        square = i * i\n        str_square = str(square)\n        if len(str_square) == 4 and str_square[0] == str_square[1] and str_square[2] == str_square[3]:\n            return square\n\nans = solution()"
    ],
    "03819e32406b409c97adc853ab0849b7": [
        "def solution():\n    m = 7\n    ans = 3*m - 1 + m\n    return ans\n\nans = solution()"
    ],
    "622d8f504b0b4e3c833da2860ca06ea3": [
        "def solution():\n    initial_distance = 780\n    closing_speed = 56 + 74  # Combined speed at which they are approaching each other\n    remaining_distance = 130\n\n    # Distance covered together when they are 130 km apart\n    distance_covered = initial_distance - remaining_distance\n\n    # Time taken to cover that distance\n    time_taken = distance_covered / closing_speed\n\n    return time_taken\n\nans = solution()"
    ],
    "97280eb5e85b48fa922958bc7829aeeb": [
        "def solution():\n    total_distance = 11\n    day_distance = 3\n    night_distance = 1\n    days_passed = 0\n    current_distance = 0\n\n    while current_distance < total_distance:\n        days_passed += 1\n        current_distance += day_distance\n        if current_distance >= total_distance:\n            break\n        current_distance -= night_distance\n\n    return days_passed\n\nans = solution()"
    ],
    "b00453f28a704896a9c2914acfc85c84": [
        "def solution():\n    count_of_twos = 0\n    count_of_fives = 0\n    n = 1\n\n    while True:\n        current = n\n        # Count number of 5s in prime factorization of the current number\n        while current % 5 == 0:\n            count_of_fives += 1\n            current //= 5\n\n        # Count number of 2s in prime factorization of the current number\n        while current % 2 == 0:\n            count_of_twos += 1\n            current //= 2\n\n        # Since zeros are made by pairs of 2 and 5, and 2s are more frequent, we check the number of 5s\n        if count_of_fives >= 28:\n            break\n\n        n += 1\n\n    return n\n\nans = solution()"
    ],
    "87f0754be1e1426ea4912fd9aa134e2f": [
        "def solution():\n    ans = 6 - 4.226\n    return ans\n\nans = solution()"
    ],
    "2c9ba88b14dd492eae6b7ec023369d1e": [
        "def solution():\n    # Calculate sum of the known four numbers\n    sum_of_known_numbers = 3 + 4 + 6 + 10\n\n    # Since mean of all five numbers is 5, the sum of all five numbers is 5 * 5\n    total_sum = 5 * 5\n\n    # The fifth number is the difference between total sum and sum of known four numbers\n    fifth_number = total_sum - sum_of_known_numbers\n\n    return fifth_number\n\nans = solution()"
    ],
    "42a62ad1ebd04b199cb34ac6b189a7bb": [
        "from math import lcm\n\ndef solution():\n    return lcm(4, 7, 8)\n\nans = solution()"
    ],
    "3602d25562874d41ab24c4341b12f630": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n    ans = tens + tenths + hundredths\n    return ans\n\nans = solution()"
    ],
    "9aaa074a8d0943d59386b629100a1142": [
        "def solution():\n    total_distance = 15 + 10 + 8\n    num_people = 3\n\n    average_distance = total_distance / num_people\n\n    return average_distance\n\nans = solution()"
    ],
    "cf4b67b2b09544679e877f2476cc1898": [
        "def solution():\n    from itertools import permutations\n\n    count = 0\n    for year in range(1000, 2023):\n        digits = set(str(year))\n        if len(digits) == 4:\n            sequence = sorted(list(map(int, digits)))\n            if sequence == list(range(min(sequence), max(sequence) + 1)):\n                all_perms = set(permutations(digits))\n                for perm in all_perms:\n                    if perm[0] != '0':\n                        count += 1\n                break  # the sequence of years is continuous and increase by 1\n\n    return count\n\nans = solution()"
    ],
    "5c06e51a661b48fe8fa86f66e6eee9fa": [
        "def solution():\n    return 56 * 23\n\nans = solution()"
    ],
    "711c6d212b6b410f988c3dbe25973b9f": [
        "def solution():\n    # The recurring decimal 0.8354 has a sequence of digits that repeats every 4 positions.\n    recurring_sequence = [8, 3, 5, 4]\n    \n    # Calculate the sum of the first 84 digits of the sequence\n    sum_of_digits = sum(recurring_sequence * (84 // len(recurring_sequence))) + sum(recurring_sequence[:84 % len(recurring_sequence)])\n    \n    return sum_of_digits\n\nans = solution()"
    ],
    "e3e88b3c7611487d98b4ad69c6e41428": [
        "def solution():\n    total_cost = 104.10\n    num_people = 6\n    cost_per_person = total_cost / num_people\n    return cost_per_person\n\nans = solution()"
    ],
    "3ba3be708b874b10bc32437342966dfb": [
        "from math import factorial\n\ndef solution():\n    # To ensure each kid gets at least one pen, we give one pen to each kid first.\n    # Now we need to distribute the remaining pens (20 - 6 = 14) to the 6 kids.\n    remaining_pens = 20 - 6\n    kids = 6\n    \n    # This is a stars and bars problem, and can be calculated by the formula:\n    # (n + k - 1) choose (k - 1), where n is the remaining objects to distribute\n    # and k is the number of divisions (or kids in this case).\n    \n    # Calculating (remaining_pens + kids - 1) choose (kids - 1)\n    ans = factorial(remaining_pens + kids - 1) // (factorial(remaining_pens) * factorial(kids - 1))\n    return ans\n\nans = solution()"
    ],
    "a6ad322655a94a94b6a34e6b8951731a": [
        "def solution():\n    return 53 * 58\n\nans = solution()"
    ],
    "b7bc6562b2cd42848b4c261eea8d443b": [
        "def solution():\n    # Time between each chime is total time minus the time of each strike\n    time_between_chimes = (43 - 6 * 3) / (6 - 1)\n\n    # Time for 12 times strike is the time of 12 strikes plus the time between each chime times 11 intervals\n    total_time_for_12 = 12 * 3 + time_between_chimes * (12 - 1)\n\n    return int(total_time_for_12)\n\nans = solution()"
    ],
    "91978558dacc4505ac4e35d145f8108b": [
        "def solution():\n    students_left_initially = 5\n    students_joined = 18\n\n    students_initially = 0\n\n    while True:\n        total_students = students_initially + students_left_initially\n        if (int(total_students ** 0.5) + 1) ** 2 == total_students + students_left_initially + students_joined:\n            break\n        students_initially += 1\n\n    return total_students\n\nans = solution()"
    ],
    "0786a0cfe2bd43a9ac1c176d78e73a19": [
        "def solution():\n    initial_people = 6\n    initial_hours = 15\n    target_hours = 2\n\n    # Number of people-hours required to build the bridge\n    people_hours = initial_people * initial_hours\n\n    # Number of people needed to build the bridge in target_hours\n    required_people = people_hours // target_hours\n\n    return required_people\n\nans = solution()"
    ],
    "02858fb0c1d7495998f805b27ff5ac13": [
        "def solution():\n    time_per_quiz = 30  # time in minutes\n    quizzes_total = 4   # total quizzes\n    minutes_in_hour = 60  # conversion factor\n\n    total_time_minutes = time_per_quiz * quizzes_total\n    total_time_hours = total_time_minutes / minutes_in_hour\n\n    return total_time_hours\n\nans = solution()"
    ],
    "ec04407fbdb64de19ace6733c3919a43": [
        "def solution():\n    total_three_digit = 9 * 10 * 10  # The number of all three-digit numbers\n    no_zero = 9 * 9 * 8               # The number of three-digit numbers with no zero\n    at_least_one_zero = total_three_digit - no_zero\n    return at_least_one_zero\n\nans = solution()"
    ],
    "86f2b7935f1d47b099995c9ad98cd1d0": [
        "def solution():\n    mass = 0.10  # Mass in kilograms\n    speed = 30   # Speed in meters per second\n    kinetic_energy = 0.5 * mass * speed**2\n    return kinetic_energy\n\nans = solution()"
    ],
    "bb26e8a364284f6d9f8d709ca1f345a8": [
        "def solution():\n    for number in range(100, 201):\n        if (number % 3 == 1) and (number % 4 == 1) and (number % 5 == 1) and (number % 7 == 2):\n            return number\n\nans = solution()"
    ],
    "612916c7c6464d37b5bdb4a7f7365e62": [
        "def solution():\n    red_marbles = 45\n    blue_marbles = 4 * red_marbles\n    total_marbles = red_marbles + blue_marbles\n    return total_marbles\n\nans = solution()"
    ],
    "4398b5072c214118a4d7e606b9c7f7dd": [
        "def solution():\n    first_term = 58\n    common_difference = 51 - 58\n    n = 7\n\n    nth_term = first_term + (n - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "1efc8331490f402c8a2dc98af0eb69e8": [
        "def solution():\n    for num in range(100, 300):\n        if num % 5 == 2 and num % 6 == 2 and num % 7 == 2:\n            return num\n\nans = solution()"
    ],
    "163aa773f4d845c8a2f2ed208a8950fb": [
        "def solution():\n    # Let x be the distance driven by Jerry when they meet\n    # Let 1.5x be the distance driven by Kevin when they meet\n    # Since the total distance is 225 miles, the sum of the distances traveled by both is 225 miles\n    # Therefore, we have the equation: x + 1.5x = 225\n    # Solving for x gives us the distance Jerry has driven when they meet\n    x = 225 / (1 + 1.5)\n    return x\n\nans = solution()"
    ],
    "57bf99419fd84ddf891e49e75324f73f": [
        "def solution():\n    initial_length = 99\n    cuts = 8\n    pieces = cuts + 1  # The number of pieces is always one more than the number of cuts\n    length_per_piece = initial_length / pieces\n    return length_per_piece\n\nans = solution()"
    ],
    "2b3f02a0fa7248d58cf401ab102a597d": [
        "def solution():\n    mass = 0.10  # in kilograms\n    velocity = 30  # in meters/second\n\n    kinetic_energy = 0.5 * mass * velocity**2\n\n    return kinetic_energy\n\nans = solution()"
    ],
    "46cd8353df274c078e2fd68b250e0da1": [
        "def solution():\n    terms = [5, 8, 11, 14, 17, 20]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "00f1d5cbd249489fa41dae6e52599fbe": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n\n    x = Symbol('x')\n    equation = 2*x + 3*x + 2 - (30 + 6*x - 8*x)\n    \n    ans = solve(equation, x)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "8164105a2885459cbe6f0149d5f46883": [
        "def solution():\n    initial_height = 100  # consider 100% as initial height for simplicity\n    current_height = initial_height\n    bounce_count = 0\n    target_height = initial_height * 0.25\n    \n    while current_height >= target_height:\n        current_height *= 0.75\n        bounce_count += 1\n        \n    return bounce_count\n\nans = solution()"
    ],
    "b909d93696cf47d0b8ed0c83e74aa63a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    doris_age = 10\n    uncle_age = symbols('uncle_age')\n\n    # when Doris reaches her uncle's age, her uncle will be 40\n    equation = Eq(doris_age + (uncle_age - doris_age), 40)\n    uncle_current_age = solve(equation, uncle_age)\n\n    return uncle_current_age[0]\n\nans = solution()"
    ],
    "ca1376e41d4341c39abc294ee9b4d9bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the price of a banana and an apple\n    banana, apple = symbols('banana apple')\n\n    # Set up the system of equations\n    equation1 = Eq(2*banana + 3*apple, 1.50)\n    equation2 = Eq(3*banana + 2*apple, 1.45)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (banana, apple))\n\n    # Calculate the cost of 1 banana and 1 apple\n    cost = solutions[banana] + solutions[apple]\n\n    return float(cost)\n\nans = solution()"
    ],
    "e8ce7a71a9c94b3d8ba599db217353fb": [
        "def solution():\n    # The largest odd number for the ones place is 9 since it's the greatest single digit odd number.\n    ones = 9\n    \n    # The number is a 4-digit number, so the smallest possible digit for the thousand place is 1.\n    thousands = 1\n    \n    # For the hundreds and tens place, they need to add up to 13.\n    # Since we want the smallest number and thousands place is already 1,\n    # we attempt to minimize the hundreds place, starting with 0, then 1,\n    # but since the thousands place is already 1, we start with 2.\n    hundreds = 2\n    \n    # Since the hundreds place is 2, the smallest number that we can add to it to get 13 is 11,\n    # but that's not a single digit. The next minimum viable digit is 3,\n    # as 2 (hundreds) + 3 (tens) = 5 which is not enough. The next is 4,\n    # as 2 (hundreds) + 4 (tens) = 6, which is still not enough.\n    # Finally, with 5, as 2 (hundreds) + 5 (tens) = 7, is still not enough.\n    # Moving to 6, we get 2 (hundreds) + 6 (tens) = 8, which is not enough.\n    # With 7, we get 2 (hundreds) + 7 (tens) = 9.\n    # Finally, with 8, we get 2 (hundreds) + 8 (tens) = 10 which is not sufficient.\n    # Therefore, the tens place should be 7 to get a sum of 2 + 7 = 9 which is close but not 13.\n    # The next number is 8, and 2 (hundred) + 8 (tens) = 10, still not enough.\n    # So we use 6 as the tens place to make the hundreds and tens place add up to 13.\n    \n    # But to ensure the digits are all different, we cannot use 3 or 6, because 3+6 = 9, not 13.\n    # So we use 4 in the hundreds place and 9 in the tens place to make the sum of 13.\n    \n    # Correct hundreds and tens place digits for the smallest number.\n    hundreds = 4\n    tens = 9\n    \n    # Concatenating all digits to form the smallest 4 digit number.\n    smallest_number = int(f\"{thousands}{hundreds}{tens}{ones}\")\n    \n    return smallest_number\n\nans = solution()"
    ],
    "14006e4edc6c498b925dff66addea986": [
        "def solution():\n    return 597 * 63\n\nans = solution()"
    ],
    "0483752c6a204f15aacda3ff94327d0f": [
        "def solution():\n    interest = 225\n    rate = 2.25 / 100\n    principal = interest / rate\n    return principal\n\nans = solution()"
    ],
    "622e2b8da7ee4f1fb4f317c991b75767": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amanda, belinda, lisa = symbols('amanda belinda lisa')\n    \n    equation1 = Eq(amanda, 4 * belinda)\n    equation2 = Eq(lisa, amanda - 11)\n    equation3 = Eq(amanda + belinda + lisa, 43)\n\n    solutions = solve((equation1, equation2, equation3), (amanda, belinda, lisa))\n\n    return solutions[lisa]\n\nans = solution()"
    ],
    "501cf0e0bdee491db50baa99ff69b1b7": [
        "def solution():\n    # If regrouping has taken place from the tens place to the ones place,\n    # it implies 8 + something resulted in a number with a 5 in the ones place.\n    # The only number that can be added to 8 to result in a number with 5 in\n    # the ones place is 7 (since 8 + 7 = 15).\n    # Therefore, Timothy's reasoning is correct.\n    \n    # Since the question is a true/false type and requires a check,\n    # we return True if Timothy's answer is correct, and False otherwise.\n    return 8 + 7 == 15\n\nans = solution()"
    ],
    "798223ee8f80484e91a8451484c51727": [
        "def solution():\n    ans = 20 - 5 - 1\n    return ans\n\nans = solution()"
    ],
    "88e0c7d77835428bbe187450a89fd57e": [
        "def solution():\n    ans = 1348 - 234 - 76 + 2234 - 48 - 24\n    return ans\n\nans = solution()"
    ],
    "ce620993d78944209d67e832a4f6c350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    original_money = symbols('original_money')\n    spent_on_watch = 200\n    spent_on_shirt_fraction = 2/7\n    remaining_fraction = 1/3\n    \n    # Calculate the money spent on the shirt and the remaining money\n    remaining_after_watch = original_money - spent_on_watch\n    spent_on_shirt = spent_on_shirt_fraction * remaining_after_watch\n    remaining_money = original_money * remaining_fraction\n\n    # Define the equation based on the remaining money\n    equation = Eq(remaining_after_watch - spent_on_shirt, remaining_money)\n\n    # Solve the equation for the original amount of money\n    solved = solve(equation, original_money)\n    return solved[0]\n\nans = solution()"
    ],
    "cac726123b6048d88b1d9136486d8aec": [
        "def solution():\n    # Timothy's reasoning is that 8 + something = 15,\n    # it's straightforward subtraction to find the answer.\n    answer = 15 - 8\n    # If Timothy's answer is correct, then the result should be 7.\n    is_correct = (answer == 7)\n    # Return both whether Timothy's answer is correct and the correct answer.\n    return (is_correct, answer)\n\nans = solution()"
    ],
    "2d575e9d3dcb4bb3a35bda8638540b40": [
        "def solution():\n    round_off_target = 125000\n    actual_price = round_off_target - 50  # Subtract half of 100, which is the rounding off base\n\n    return actual_price\n\nans = solution()"
    ],
    "ccc1e15016544ef18eb8d6fbfa342f6b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    d, v = symbols('d v', real=True, positive=True)\n\n    # Equation 1: Original time - time when speed increased by 20%\n    eq1 = Eq(d/v - d/(v * 1.2), 1)  # Reach destination 1 hour earlier\n\n    # Increase the speed by 25% after the first 200km\n    t1 = 200 / v  # Time taken to travel the first 200 km at usual speed\n    t2 = (d - 200) / (v * 1.25)  # Time taken to travel the rest at increased speed\n\n    # Equation 2: Original time - time with speed increase after 200 km\n    eq2 = Eq(d/v - (t1 + t2), 12/60)  # Reach destination 12 minutes earlier\n\n    # Solve the equations for d and v\n    solution = solve((eq1, eq2), (d, v))\n\n    # Return the distance between city P and Q\n    return solution[d]\n\nans = solution()"
    ],
    "91c7b4be08964d77b4b67e46cd1f734b": [
        "def solution():\n    from math import factorial\n\n    # If Tom and Harry stand together, we can treat them as a single entity, T-H.\n    # Now we need to arrange 5 entities and 1 entity as R on the furthest right\n    # The 5 entities (T-H and 4 other students) can be arranged in 5! ways.\n    # Additionally, Tom and Harry can arrange themselves in 2! ways.\n    # Ronda must stand at the furthest right, so no arrangements needed for Ronda.\n    \n    # Total arrangements = arrangements of entities * arrangements of Tom and Harry\n    total_arrangements = factorial(5) * factorial(2)\n\n    return total_arrangements\n\nans = solution()"
    ],
    "cc5debb2fb484837bd9e20117b66253d": [
        "def solution():\n    current_average = 89\n    desired_average = 95\n    current_total = current_average * 4\n    additional_tests = 0\n    \n    while True:\n        additional_tests += 1\n        new_average = (current_total + 100 * additional_tests) / (4 + additional_tests)\n        if new_average >= desired_average:\n            break\n    \n    return additional_tests\n\nans = solution()"
    ],
    "01ebc2d721814d4db11a4f6271fd146a": [
        "def solution():\n    distance_first = 540\n    distance_middle = 300\n    distance_last = 1000 - distance_first - distance_middle\n\n    speed_first = 9\n    speed_middle = 6\n    speed_last = 10\n\n    time_first = distance_first / speed_first\n    time_middle = distance_middle / speed_middle\n    time_last = distance_last / speed_last\n\n    total_time = time_first + time_middle + time_last\n\n    return total_time\n\nans = solution()"
    ],
    "b33352ddaff94fdf9bca43b11dd51548": [
        "def solution():\n    # Let \"uncle\" denote the age of Doris's uncle\n    # Let \"doris_future\" denote the age of Doris when she reaches her uncle's current age\n    doris_current = 10\n    uncle_future = 40\n\n    # The difference in age between Doris and her uncle will always be the same\n    age_difference = uncle_future - doris_current\n\n    # Uncles current age will be his future age minus the difference\n    uncle_current = uncle_future - age_difference\n\n    return uncle_current\n\nans = solution()"
    ],
    "46688ef5acdc4df49717f3ab80f36c17": [
        "def solution():\n    class_performances = 18\n    extra_performances = 2  # Lia and Liz each prepare an extra performance\n    \n    total_performances = class_performances + extra_performances\n    return total_performances\n\nans = solution()"
    ],
    "1f3d5b49f91c4771addbb17609528cde": [
        "def solution():\n    distance1 = 540\n    distance2 = 300\n    distance3 = 1000 - distance1 - distance2\n\n    speed1 = 9\n    speed2 = 6\n    speed3 = 10\n\n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    time3 = distance3 / speed3\n\n    total_time = time1 + time2 + time3\n\n    return total_time\n\nans = solution()"
    ],
    "56b1265849bc4172b9283606e061da30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sheep, cows = symbols('sheep cows')\n\n    before_sheep_to_cows_ratio = Eq(sheep, 5/7 * cows)\n    after_sheep_to_cows_ratio = Eq((cows - 7)*4, 3*(sheep + 21))\n\n    solutions = solve((before_sheep_to_cows_ratio, after_sheep_to_cows_ratio), (sheep, cows))\n\n    return solutions[sheep]\n\nans = solution()"
    ],
    "c476669828e74aee81ba796c38aab4b8": [
        "def solution():\n    chloe_stamps = 176\n    polly_stamps = 4 * chloe_stamps\n    more_stamps = polly_stamps - chloe_stamps\n    return more_stamps\n\nans = solution()"
    ],
    "a549cf3800294c169634bf21d56759b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the unknowns\n    book_price, pencil_box_price = symbols('book_price pencil_box_price')\n\n    # Equation 1: Two books and three pencil boxes cost $42\n    equation1 = Eq(2 * book_price + 3 * pencil_box_price, 42)\n\n    # Equation 2: Two books and six pencil boxes cost $60\n    equation2 = Eq(2 * book_price + 6 * pencil_box_price, 60)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (book_price, pencil_box_price))\n\n    return solutions[pencil_box_price]\n\nans = solution()"
    ],
    "42047954e98a4b1098845e2ff791180b": [
        "def solution():\n    from datetime import datetime\n\n    time_format = \"%H:%M\"\n    start_time = datetime.strptime(\"08:30\", time_format)\n    end_time = datetime.strptime(\"09:25\", time_format)\n\n    delta = end_time - start_time\n    ans = delta.seconds // 60\n    return ans\n\nans = solution()"
    ],
    "dc7dede26ff941569676a4c0dc370ff2": [
        "def solution():\n    # Let gs_age be Geoff's current age and ss_age be his sister's current age.\n    # sum_now represents the sum of their ages right now, which is equal to 22.\n    sum_now = 22\n\n    # sum_future represents the sum of their ages in the future, which we want to find out when it will be equal to 30.\n    sum_future = 30\n\n    # The number of years it will take for the sum of their ages to be 30 can be calculated\n    # by subtracting the current sum from the future sum because they both grow older by one year each year.\n    years_until_sum_future = sum_future - sum_now\n\n    return years_until_sum_future\n\nans = solution()"
    ],
    "4f9fc9c45bc74b13945e3b6e4a79c3ef": [
        "def solution():\n    monthly_salary = 7.65\n    debt = 2.5\n    months_to_pay_debt = debt / monthly_salary\n    return months_to_pay_debt\n\nans = solution()"
    ],
    "672eac0e95a14d3f9ead29a67b3f22d2": [
        "def solution():\n    haribo_cost = 50  # in cents\n    mamee_cost = haribo_cost - 30\n    big_jelly_cost = 6 * mamee_cost\n    return big_jelly_cost / 100  # converting cents to dollars\n\nans = solution()"
    ],
    "98fa02662c3f496dbfbd82e145244c2d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the original number of sheep and cows\n    sheep, cows = symbols('sheep cows')\n\n    # From the given information, create two equations\n    # Original ratio of sheep to cows: sheep = (5/7) * cows\n    equation1 = Eq(sheep, (5/7) * cows)\n    # After changes, the ratio of cows to sheep: cows - 7 = (3/4) * (sheep + 21)\n    equation2 = Eq(cows - 7, (3/4) * (sheep + 21))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sheep, cows))\n\n    # Return the original number of sheep\n    return solutions[sheep]\n\nans = solution()"
    ],
    "e804f82f48cb432f87a500257865625a": [
        "def solution():\n    return 15.41 + 0.023\n\nans = solution()"
    ],
    "a69ea7bbe98046abb05ec657125e9e2a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_candies = symbols('total_candies')\n    anna = 3/8 * total_candies\n    belle = 1/4 * total_candies\n    cathy_and_dawn = total_candies - anna - belle\n\n    equation = Eq(anna + belle, cathy_and_dawn + 90)\n\n    solutions = solve(equation, total_candies)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "dc703045b2df402dbdfe5981fc60d341": [
        "def solution():\n    numerator = 18\n    denominator_1 = 36\n    denominator_2 = 32\n\n    ans = (numerator / denominator_1) * denominator_2\n\n    return ans\n\nans = solution()"
    ],
    "365d1f5c27234c98810406b6e4bcded0": [
        "def solution():\n    remaining_bricks = 4\n    \n    # Joel removes 2 less than half\n    remaining_bricks_before_joel = remaining_bricks * 2 + 2\n    \n    # Valerie removes 3 less than half\n    remaining_bricks_before_valerie = remaining_bricks_before_joel * 2 + 3\n    \n    # Ethan removes 1 less than half\n    initial_bricks = (remaining_bricks_before_valerie * 2) + 1\n    \n    return initial_bricks\n\nans = solution()"
    ],
    "b43e05329caa4f1a984bd70f841acdce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(37 - 3 * (x + 7), 5 * x)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "9d5c3d4446b7434aaaa6846a334f2ea1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_fishballs = symbols('initial_fishballs')\n\n    # Define the equation based on the problem statement\n    equation = Eq(initial_fishballs / 4 + (initial_fishballs / 4) / 3 + 506, 2 * initial_fishballs)\n\n    # Solve the equation\n    solutions = solve(equation, initial_fishballs)\n\n    # Find the positive solution since the number of fish balls can't be negative\n    ans = [sol.evalf() for sol in solutions if sol > 0][0]\n\n    return ans\n\nans = solution()"
    ],
    "37ba30f7b64a46d380cae5ff5558dd59": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n\n    # Establish equations based on the problem statement\n    equation1 = Eq(chocolate, vanilla + 72)\n    equation2 = Eq(blueberry, vanilla - 36)\n\n    # Since we have the total number after selling cupcakes\n    equation3 = Eq(\n        (chocolate - chocolate / 6) \n        + (vanilla - 2 * vanilla / 3)\n        + (blueberry - 7 * blueberry / 9), \n        427\n    )\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (chocolate, vanilla, blueberry))\n\n    # Calculate the number of chocolate cupcakes sold\n    chocolate_sold = solutions[chocolate] / 6\n    \n    return int(chocolate_sold)\n\nans = solution()"
    ],
    "810b29e808374893b25143dad8014c66": [
        "def solution():\n    return 0.23 * 200\n\nans = solution()"
    ],
    "11ce6a9abf8e477b9581c4ee7316be07": [
        "def solution():\n    chris_books = 12\n    beck_books = chris_books + 8\n    books_to_give = (beck_books - chris_books) / 2\n    return books_to_give\n\nans = solution()"
    ],
    "2214d6869bd045e2afc03dba93bcda5e": [
        "def solution():\n    result = (5/8)*92 + 7*0.625 + 62.5/100\n    return result\n\nans = solution()"
    ],
    "1e328cd92fa04425b72e9c28f440ba39": [
        "def solution():\n    boys = 14\n    boys_to_girls_ratio = 2 / 7\n    girls = boys / boys_to_girls_ratio\n    total_students = boys + girls\n\n    return int(total_students)\n\nans = solution()"
    ],
    "a0d429ec9b9241fbafa343fefd207ff9": [
        "def solution():\n    strawberry_cake_price = 3\n    marble_cake_price = strawberry_cake_price + 2\n    cheese_cake_price = 3 * marble_cake_price\n    price_of_2_cheese_cakes = 2 * cheese_cake_price\n    return price_of_2_cheese_cakes\n\nans = solution()"
    ],
    "1c415c8f98ba481e86c80c0113bb20a1": [
        "def solution():\n    circle = (6*6 + 2 - 17) / 3\n    return circle\n\nans = solution()"
    ],
    "70ed86d3effe4cc5bd724d34f5219fb8": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Congruences based on the given conditions\n    congruences = [(1, 3), (3, 5), (5, 7)]\n\n    # Find the solution using the Chinese Remainder Theorem\n    lcm_solution = solve_congruence(*congruences)\n\n    # The number is between 400 and 500, so we find the correct multiple\n    n = lcm_solution[0]\n    while n < 400:\n        n += lcm_solution[1]  # Increase by the LCM until we reach the desired interval\n    \n    # Ensure that the possible value is within the range [400, 500]\n    ans = n if n <= 500 else None\n    \n    return ans\n\nans = solution()"
    ],
    "5d87e59fcef54f0d8cbf90a06ad4361a": [
        "def solution():\n    from sympy import divisors\n\n    num_factors = len(divisors(36))\n    \n    return num_factors\n\nans = solution()"
    ],
    "cba96ea4079d4147a8e7a1bba76598b4": [
        "def solution():\n    total_pigs = 8\n    \n    green_apples = 1 * total_pigs # Each pig gets one green apple\n    red_apples = total_pigs / 2   # One red apple for every two pigs\n    \n    total_apples = green_apples + red_apples\n    \n    return int(total_apples)\n\nans = solution()"
    ],
    "e495bb663c3f4e3fb7b4594b7b6e3ce0": [
        "def solution():\n    total_seeds = 20\n    died_seeds = total_seeds / 4\n    grown_sunflowers = total_seeds - died_seeds\n\n    return int(grown_sunflowers)\n\nans = solution()"
    ],
    "0a6b3f52433742509667f3e14550f591": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 5), (4, 7), (5, 9)]\n    ans = solve_congruence(*congruences)[0]\n\n    return ans\n\nans = solution()"
    ],
    "892e6ad962394876990f5b04addfae37": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Declaring the symbols for price of one shirt and one pair of pants\n    price_shirt, price_pants = symbols('price_shirt price_pants')\n    \n    # Given equations based on the problem statement\n    equation1 = Eq(3 * price_shirt + 2 * price_pants, 81)\n    equation2 = Eq(5 * price_shirt + 4 * price_pants, 147)\n    \n    # Solving the equations to find price of one shirt and one pair of pants\n    solutions = solve((equation1, equation2), (price_shirt, price_pants))\n\n    # Calculating the total price for one shirt and one pair of pants\n    total_price = solutions[price_shirt] + solutions[price_pants]\n\n    return total_price\n\nans = solution()"
    ],
    "99ec89df21bc47e580283576006ce753": [
        "def solution():\n    initial_amount = 100\n    days = 15\n    deposit = 10\n    spend = 8\n    cycle_days = 2\n    \n    # Calculate complete cycles\n    complete_cycles = days // cycle_days\n    remaining_days = days % cycle_days\n    \n    # Total amount after complete cycles\n    total_after_cycles = initial_amount + (complete_cycles * (deposit - spend))\n    \n    # Add remaining days\n    for day in range(1, remaining_days + 1):\n        if day % cycle_days == 1:\n            total_after_cycles += deposit\n        else:\n            total_after_cycles -= spend\n    \n    return total_after_cycles\n\nans = solution()"
    ],
    "0cdfa66a263441afa78bab0d33bc8b54": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 5), (4, 7), (5, 9)]\n    ans = solve_congruence(*congruences)[0]\n    return ans\n\nans = solution()"
    ],
    "0e91657d43d34effa4d1a8ca9067f554": [
        "def solution():\n    total_durians = 90\n    sold_fraction = 4/6\n    sold_durians = total_durians * sold_fraction\n    remaining_durians = total_durians - sold_durians\n    return remaining_durians\n\nans = solution()"
    ],
    "5a342d4cec7f4c4886694b8cade4fa53": [
        "def solution():\n    final_result = 54\n    number_after_addition = final_result * 4\n    original_number_times_two = number_after_addition - 178\n    original_number = original_number_times_two / 2\n    return original_number\n\nans = solution()"
    ],
    "e1e9d7528bbf401cbf3607c4c9d25245": [
        "def solution():\n    total_apples = 42 + 41 + 30 + 29 + 38\n    num_students = 5\n    average_apples = total_apples / num_students\n    return average_apples\n\nans = solution()"
    ],
    "4bbb81d1111b4e3cbec6b7862f30f6d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    marry, alexis, charlotte = symbols('marry alexis charlotte')\n\n    equation1 = Eq(marry, 7/12 * (marry + alexis))        # Marry has 7 parts out of 12\n    equation2 = Eq(alexis, 5/12 * (marry + alexis))       # Alexis has 5 parts out of 12\n    equation3 = Eq(0.8 * charlotte, 0.2 * (marry + alexis)) # Charlotte gains 80% of her stickers\n    equation4 = Eq(marry - 0.2*marry, charlotte + 20)    # Marry has 20 more stickers than Charlotte after giving 20%\n\n    solutions = solve((equation1, equation2, equation3, equation4), (marry, alexis, charlotte))\n\n    return solutions[alexis]\n\nans = solution()"
    ],
    "1d5142c64ec641dc8bbd86895e5a3579": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the variables:\n    # d - the distance from Nini's home to the countryside\n    # v - Nini's original speed\n    d, v = symbols('d v')\n\n    # The original time taken is 8 hours, so the original distance d equals the speed v times 8 hours\n    equation1 = Eq(d, 8 * v)\n\n    # If Nini increases her speed by 5 km/hr, the time taken will be 7 hours, so the distance d also equals (v + 5) times 7 hours\n    equation2 = Eq(d, 7 * (v + 5))\n\n    # Now we can solve the two equations to get the value of d (the distance)\n    solution = solve((equation1, equation2), (d, v))\n    \n    return solution[d]\n\nans = solution()"
    ],
    "adce1fe036694ef68f2fd4cdac3f0be4": [
        "def solution():\n    total_ways = 4 * 3 * 2 * 1  # Total ways without restriction (4!)\n    restricted_ways = 2 * 2 * 1  # Claire and Tony sitting across each other (2 places for Claire, then Tony is fixed)\n    return total_ways - restricted_ways * 2  # Multiply by 2 for Chantel and Cale's two possible positions\n\nans = solution()"
    ],
    "599d7ab82508440d8bc57c2a45cc2bb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, pear = symbols('banana pear')\n\n    equation1 = Eq(banana + 2 * pear, 94)\n    equation2 = Eq(banana + pear, 62)\n\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "1cfd9ab02afc40268d415154a39502bb": [
        "def solution():\n    return 32 * 47\n\nans = solution()"
    ],
    "7455d596a9584c91a9f5f01d9ac7dda1": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['3', '5', '9']\n    permutations_list = sorted([''.join(p) for p in permutations(digits)])\n    fifth_number = permutations_list[4]\n    return int(fifth_number)\n\nans = solution()"
    ],
    "f238021737bb4ddf866f1e344662e725": [
        "def solution():\n    test_tubes = 1\n    while (2 ** test_tubes) < 1000:\n        test_tubes += 1\n    return test_tubes\n\nans = solution()"
    ],
    "19d73820d6d94870a69075b50604e9ea": [
        "def solution():\n    total_chairs = 10\n    removed_chairs = 3\n    remaining_chairs = total_chairs - removed_chairs\n    total_distance = 36\n    # Since the chairs are evenly spaced, the number of intervals is always one less than the number of chairs\n    original_intervals = total_chairs - 1\n    new_intervals = remaining_chairs - 1\n    # Find the original distance between each chair\n    original_distance_between_chairs = total_distance / original_intervals\n    # The new distance will be the same as the original since total distance doesn't change when chairs are removed\n    new_distance_between_chairs = original_distance_between_chairs\n    return new_distance_between_chairs\n\nans = solution()"
    ],
    "6070f6baef3345f49dc764aaf67f2145": [
        "def solution():\n    return 32 * 47\n\nans = solution()"
    ],
    "ec5a902e3059436a93f54bdff89b1b64": [
        "from itertools import permutations\n\ndef solution():\n    digits = '359'\n    permutations_list = sorted([''.join(p) for p in permutations(digits)])\n    fifth_number = permutations_list[4]\n    return int(fifth_number)\n\nans = solution()"
    ],
    "a7c840e7a73042529289e2f30f4cce0a": [
        "def solution():\n    ans = 46 / (3 * 4) * (7 / 8) / (2 / 3) * (4 * 8) / (9 - 2)\n    return ans\n\nans = solution()"
    ],
    "18e7c7d882fd4965a7d2ddada6edb9ba": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "002d73bb7e164b1cbeeebeeb6b1b8c36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angle1 = 90  # Right angle\n    angle2 = 90  # Right angle\n    angle3, angle4 = symbols('angle3 angle4')\n\n    equation1 = Eq(angle3, 5 * angle4)\n    equation2 = Eq(angle1 + angle2 + angle3 + angle4, 360)\n\n    solutions = solve((equation1, equation2), (angle3, angle4))\n\n    largest_angle = max(solutions[angle3], solutions[angle4], angle1, angle2)\n\n    return largest_angle\n\nans = solution()"
    ],
    "87be82c9d7de44ca9010e74b7b93822e": [
        "def solution():\n    return 768 // 3\n\nans = solution()"
    ],
    "d552a67eab8b49baa8a9ba818269f589": [
        "def solution():\n    min_boxes = float('inf')\n    for small in range(54 // 5 + 1):\n        for medium in range(54 // 7 + 1):\n            for large in range(54 // 10 + 1):\n                if 5 * small + 7 * medium + 10 * large == 54:\n                    min_boxes = min(min_boxes, small + medium + large)\n    return min_boxes\n\nans = solution()"
    ],
    "08b558c3faa347dab4cf75659be5e9ba": [
        "def solution():\n    # The number of ways to reach the nth step is the sum of ways to get \n    # to the (n-1)th, (n-2)th, and (n-3)th steps, except for when we get to step 5.\n    \n    # However, we need to avoid the fifth step. We can pre-calculate ways to get to \n    # steps 1, 2, 3 and 4 (which are 1, 2, 4, and 7 respectively). For the fourth step,\n    # we have to subtract the ways that involve stepping on the fifth step.\n    \n    # ways to reach step 1, 2, 3, 4 (step 4 avoids step 5)\n    paths = [1, 2, 4, 7]\n    \n    # We start from step 4 because we've precalculated till step 4\n    # Calculate paths to step 6, 7, ..., 10 with dynamic programming\n    for i in range(4, 10):\n        # To avoid muddy step 5, we check if we're currently calculating ways for step 6.\n        # If yes, we only have 1 valid previous step (since going from 5->6 is not allowed),\n        # which is from step 4->6.\n        if i == 5:\n            paths.append(paths[i - 2] + paths[i - 4])\n        else:\n            paths.append(paths[i - 1] + paths[i - 2] + paths[i - 3])\n    \n    return paths[9]  # The index is 9 because we started from 0\n\nans = solution()"
    ],
    "a0bb16508a094a2b923d767cc547f24e": [
        "def solution():\n    factors = []\n    for i in range(10, 100): # Loop through 2-digit numbers\n        if 7007 % i == 0: # Check if it's a factor of 7007\n            pair = 7007 // i\n            if 10 <= pair < 100 and i % 7 == 0 and pair % 7 == 0: # Check if both are 2-digit and multiples of 7\n                factors.append((i, pair))\n                \n    # Assuming there is only one pair that meets the conditions\n    sum_factors = sum(factors[0])\n    return sum_factors\n\nans = solution()"
    ],
    "adee1a24c7024765a006ff883559d59a": [
        "def solution():\n    sequence = [i for i in range(1, 10) for _ in range(i)]\n    median_index = len(sequence) // 2\n    if len(sequence) % 2 == 0:\n        median = (sequence[median_index - 1] + sequence[median_index]) / 2\n    else:\n        median = sequence[median_index]\n    return median\n\nans = solution()"
    ],
    "7f2800865ae74b51aea6bb7d879f748d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 6)/3, 5)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "65d0a4bf0dd4421d8f7a7ae61320a871": [
        "def solution():\n    cans_in_6_days = 42\n    days_needed = 9\n\n    cans_per_day = cans_in_6_days / 6\n    cans_in_9_days = cans_per_day * days_needed\n\n    return cans_in_9_days\n\nans = solution()"
    ],
    "8c9a2bd605ed4c729cd446a9f7aa73b2": [
        "def solution():\n    ans = (6/7) * 42\n    return ans\n\nans = solution()"
    ],
    "026d98e841e64cdd89aad40de45ad4b6": [
        "def solution():\n    visitors_per_minute = 10\n    visitors_per_entrance = 25\n    total_time_single_entrance = 16\n\n    total_visitors = visitors_per_minute * total_time_single_entrance\n    total_entrances = 2\n    time_with_two_entrances = total_visitors / (visitors_per_entrance * total_entrances)\n\n    return time_with_two_entrances\n\nans = solution()"
    ],
    "43e9733a82014d8eabf755557196a178": [
        "def solution():\n    carrots_per_week = 14\n    weeks = 30\n    total_carrots = carrots_per_week * weeks\n    return total_carrots\n\nans = solution()"
    ],
    "5dd5b133aea24401a5002b33b8907b40": [
        "def solution():\n    miles_per_hour = 65\n    minutes = 15\n    hours = minutes / 60.0\n\n    miles_traveled = miles_per_hour * hours\n    kilometers_per_mile = 1.60934\n    kilometers_traveled = miles_traveled * kilometers_per_mile\n    \n    return kilometers_traveled\n\nans = solution()"
    ],
    "81d722c81c1f48a79aedfcad65400bc2": [
        "def solution():\n    daily_progress = 5\n    nightly_slip = 3\n    net_progress = daily_progress - nightly_slip\n    total_distance = 16\n    days = 0\n    \n    while total_distance > 0:\n        days += 1\n        total_distance -= daily_progress\n        if total_distance > 0:\n            total_distance += nightly_slip\n        \n    return days\n\nans = solution()"
    ],
    "da128269ec8a4b78bcc13ee12e8d271e": [
        "def solution():\n    total_cookies = 40\n    given_away = 8\n    cookies_per_bottle = 4\n\n    cookies_left = total_cookies - given_away\n    num_bottles = cookies_left // cookies_per_bottle\n\n    return num_bottles\n\nans = solution()"
    ],
    "f330e5185f564b4f8439985f154a4ab2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cookies, muffins = symbols('cookies muffins')\n    \n    equation1 = Eq(cookies, muffins + 24)\n    equation2 = Eq((3/4) * muffins + (5/8) * cookies, 74)\n    \n    solutions = solve((equation1, equation2), (cookies, muffins))\n    \n    return solutions[cookies]\n\nans = solution()"
    ],
    "6bf09e258c0344d980831d0a2582021b": [
        "def solution():\n    for number in range(999, 99, -1):\n        if number % 25 == 0:\n            return number\n\nans = solution()"
    ],
    "15e2a7686f9044aeaf931e87b0693cae": [
        "def solution():\n    metro_ticket = 2      # Assuming the cost of one-way metro ticket\n    coffee_price = 3      # Assuming the price of a cup of coffee\n    entry_fee = 7         # Assuming the entry fee for the game\n\n    richard_expenses = metro_ticket * 2 + coffee_price + entry_fee\n\n    remaining_money = 40 - richard_expenses\n\n    friend_expenses = metro_ticket * 2 + coffee_price + entry_fee\n\n    number_of_friends = remaining_money // friend_expenses\n\n    return number_of_friends\n\nans = solution()"
    ],
    "0d784e5849d84e58ad27c2767fae5a52": [
        "def solution():\n    for A in range(10):\n        number = int(f\"123{A}456{A}789{A}0\")\n        if number % 9 == 0 and number % 10 == 0 and number % 5 != 0:\n            ans = A\n            break\n    return ans\n\nans = solution()"
    ],
    "16f45879a4ca4545b12ade2f472ea304": [
        "def solution():\n    # Calculate the sum of integers from 2 to 12\n    n = 12\n    sum_of_integers = sum(range(2, n + 1))\n    # Square the sum to find the result\n    ans = sum_of_integers ** 2\n    return ans\n\nans = solution()"
    ],
    "f0b47802cada49d286687ff9e3a7086d": [
        "def solution():\n    ans = (48 - 47) + (46 - 45) + (44 - 43) + (42 - 41) + 40\n    return ans\n\nans = solution()"
    ],
    "e1f9970642f64e64b790ec29f85e494f": [
        "def solution():\n    # Speed ratio of driver to cyclist\n    speed_ratio_driver_to_cyclist = 13 / 2\n    \n    # Cyclist takes 143 minutes more than the driver\n    extra_time_cyclist = 143\n    \n    # Let the time taken by the driver be t minutes\n    # Then, the time taken by the cyclist will be t + 143 minutes\n    \n    # Distance covered by both is the same, so the ratio of their times will be\n    # the inverse of the ratio of their speeds\n    # time_driver / time_cyclist = speed_cyclist / speed_driver\n    # t / (t + 143) = (1 / speed_ratio_driver_to_cyclist)\n    \n    # Simplifying the above equation\n    # t = (t + 143) / speed_ratio_driver_to_cyclist\n    # t = (t + 143) * (2 / 13)\n    \n    # Solving for t\n    t = (extra_time_cyclist * (2 / 13)) / (1 - (2 / 13))\n    \n    return t\n\nans = solution()"
    ],
    "82befdbc19124ec4a29b8a7200da5f5f": [
        "def solution():\n    cost_sausage_rolls = 4 * 24\n    cost_hotdogs = 5 * 81\n    cost_drinks = 7 * 20\n\n    total_cost = cost_sausage_rolls + cost_hotdogs + cost_drinks\n\n    return total_cost\n\nans = solution()"
    ],
    "0ae254e064134f188c9be40779165325": [
        "def solution():\n    # If statement 1 is correct then all statements should be correct, \n    # which means that statement 1 contradicts itself. Statement 1 is incorrect.\n    # If statement 2 is correct then statement 1 is also correct which is a contradiction,\n    # because it's given that only one statement is correct. Statement 2 is incorrect.\n    # If statement 3 is correct, it implies that one of statements 1 or 2 is correct.\n    # But we've already established that they can't be correct. \n    # Hence, statement 3 is incorrect.\n    # If statement 4 is correct, then all the statements above are correct, \n    # including statements 1, 2, and 3 which we've shown cannot be correct. \n    # Hence, statement 4 is incorrect.\n    # That leaves us with statement 5. If statement 5 is correct, \n    # it means all of the above statements are incorrect, which agrees with our analysis.\n    # Hence, statement 5 is correct.\n    \n    ans = 5\n    return ans\n\nans = solution()"
    ],
    "2fd2c2cf5b0e4e77ade10ea6e459326d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of coins on the table\n    x = symbols('x')\n\n    # Original number of coins showing heads\n    heads_before = x / 4\n    # After flipping two coins\n    heads_after = heads_before + 2\n\n    # Equation that represents that a third of the coins show heads after flipping two\n    equation = Eq(heads_after, x / 3)\n\n    # Solve the equation for x\n    ans = solve(equation, x)[0]\n\n    return ans\n\nans = solution()"
    ],
    "b92bb1c34016428e8b1539c16095a291": [
        "def solution():\n    sausage_rolls_cost = 4 * 24\n    hotdogs_cost = 5 * 81\n    drinks_cost = 7 * 20\n\n    total_cost = sausage_rolls_cost + hotdogs_cost + drinks_cost\n\n    return total_cost\n\nans = solution()"
    ],
    "509e74e27ec949a4bd04c96689bc27b8": [
        "def solution():\n    trains = 4\n    cars = 3\n    flights = 2\n\n    total_ways = trains + cars + flights\n\n    return total_ways\n\nans = solution()"
    ],
    "ab295a6189f54b16ad73515c7acb0dc0": [
        "def solution():\n    from math import gcd\n    ans = gcd(16, 36)\n    return ans\n\nans = solution()"
    ],
    "85093fa878264795a7751d28ce2631a2": [
        "def solution():\n    total_road_length = 500  # meters the road in total\n    total_time = 5  # days to pave the entire road\n    meters_per_day = total_road_length / total_time  # meters paved in one day\n    return meters_per_day\n\nans = solution()"
    ],
    "a93e649ea04246e29d39e3abf1c9cbf4": [
        "def solution():\n    # Each term in S is a repeating decimal, where the repeating digits form a sequence:\n    # 0.2222..., 0.030303..., 0.004444..., 0.0005555..., etc.\n    # This means that after the decimal point, the digits will repeat in a pattern: 2, 3, 4, 5, 6, .., 9, 0, 1,\n    # where each digit from 2 to 9 is repeated one more time than the previous digit, and 0 and 1 are present \n    # once before the pattern repeats.\n    \n    # As we are interested in the first 2100 digits, we notice that the period of the sequence of digits \n    # increases by 1 each time. The sum of the first few periods will give an idea about the number of \n    # complete periods in those 2100 digits.\n    \n    # The sum of the first 9 periods is sum of 1 to 9 (inclusive), which is 45.\n    # The sum of the first 9+8 periods is sum of 1 to 9+8 (inclusive), which is (9+8+1)*(9+8)/2 = 153.\n    # We continue this process to see how many complete periods fit into 2100.\n\n    digits_sum = 0\n    period_length = 1\n    remaining_digits = 2100\n    \n    while remaining_digits > 0:\n        if remaining_digits >= period_length:\n            # The complete period can be added.\n            digits_sum += 1*period_length + 0  # add the digit itself multiplied by its length in the sequence\n            remaining_digits -= period_length  # decrease the remaining digits by the length of this period\n            period_length += 1  # increase the length of the next period to be added\n        else:\n            # Partial period needs to be added.\n            digit = period_length  # As each period increases by 1 the digit value for this partial period\n                                   # is the same as the length\n            if digit > 9:\n                digit %= 9\n            digits_sum += digit * remaining_digits\n            remaining_digits = 0\n\n    return digits_sum\n\nans = solution()"
    ],
    "b295ec92694641e88fe8ece9db989418": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    frogs_beginning, dragonflies_beginning = symbols('frogs_beginning dragonflies_beginning')\n\n    # Original count of frogs is 9 more than dragonflies\n    equation1 = Eq(frogs_beginning, dragonflies_beginning + 9)\n\n    # After the magic show, there are 11 frogs and 10 dragonflies in total\n    # Since the total number of animals is conserved, their sum before and after the show must be the same\n    equation2 = Eq(frogs_beginning + dragonflies_beginning, 11 + 10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (frogs_beginning, dragonflies_beginning))\n\n    return solutions[frogs_beginning]\n\nans = solution()"
    ],
    "ad97ccd1f3f147778a05bec0c8d4686c": [
        "def solution():\n    # The cycle of digits in the sum S before they start repeating\n    cycle = '23456789012345678902'\n    cycle_sum = sum(int(digit) for digit in cycle)\n    \n    # How many complete cycles of 20 digits there are in the first 2100 digits\n    complete_cycles = 2100 // len(cycle)\n    \n    # Calculate the sum of the digits for the complete cycles\n    sum_complete_cycles = complete_cycles * cycle_sum\n    \n    # Calculate the remaining number of digits after the full cycles\n    remaining_digits = 2100 % len(cycle)\n    \n    # Calculate the sum of the remaining digits\n    sum_remaining_digits = sum(int(digit) for digit in cycle[:remaining_digits])\n    \n    # The total sum is the sum of complete cycles and the sum of remaining digits\n    total_sum = sum_complete_cycles + sum_remaining_digits\n    \n    return total_sum\n\nans = solution()"
    ],
    "ad40132c81d646cca930b7085fe9b999": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((5 * x + 7) / 4, 8)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "805c2d490543494daae962252fa53bed": [
        "def solution():\n    result_after_operations = 12\n    original_number = (result_after_operations + 9) * 2\n\n    return original_number\n\nans = solution()"
    ],
    "03a77a22a7ee441d83180f51247c76d2": [
        "def solution():\n    return 2018 - 314\n\nans = solution()"
    ],
    "d6f4e33c53824be9b1e66bbf1d27bf6a": [
        "def solution():\n    for chocolates in range(41, 60):\n        if chocolates % 4 == 2 and chocolates % 6 == 2:\n            ans = chocolates\n            break\n    return ans\n\nans = solution()"
    ],
    "f93efda9bc144ea8ad3f28fa5d961c5e": [
        "def solution():\n    from math import factorial\n    # There are 6 people and 8 seats, so there are C(8, 6) ways to choose the seats\n    # for the 6 people. After choosing the seats, there are 5! ways to arrange the \n    # 6 people around the table. (The first person's position is fixed to avoid considering\n    # rotations as distinct arrangements.)\n    ans = factorial(8) // (factorial(2) * factorial(6)) * factorial(5)\n    return ans\n\nans = solution()"
    ],
    "4a1f30f8a5d9460a9ca929a63a2af4ef": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['4', '5', '7', '9']\n    even_numbers = []\n    \n    # Generate permutations of the four digits\n    for perm in permutations(digits):\n        num = int(''.join(perm))\n        # Check if the number is even and a four-digit number\n        if num % 2 == 0 and 1000 <= num <= 9999:\n            even_numbers.append(num)\n    \n    # Get the smallest even number from the list\n    ans = min(even_numbers)\n    return ans\n\nans = solution()"
    ],
    "ac69d28e01274b9cb6dba2d848512b1e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(55 - 6 * (7 - x), 37)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8356de756f6c4a9296f2986d44679ee5": [
        "def solution():\n    # Let the number of steps of the escalator be x.\n    # When Peter walks at 1 step per second, he takes 10 seconds.\n    # In 10 seconds, the escalator takes him an additional 10 steps, so we have:\n    # x = Peter's steps + Escalator's contribution\n    # x = 10 + 10 * escalator_speed\n    \n    # When Peter walks at 2 steps per second, he reaches in 8 seconds.\n    # Hence, the escalator would take him an additional 8 * escalator_speed steps.\n    # x = 16 + 8 * escalator_speed\n    \n    # Setting the first and second equation equal gives us:\n    # 10 + 10 * escalator_speed = 16 + 8 * escalator_speed\n    # Solving for escalator_speed gives us:\n    # 2 * escalator_speed = 6\n    escalator_speed = 6 / 2\n    # Now we use the first equation to solve for x.\n    # x = 10 + 10 * escalator_speed\n    x = 10 + 10 * escalator_speed\n    \n    return int(x)\n\nans = solution()"
    ],
    "41faa1f0b1cc4a408ca39ea9588f7c41": [
        "def solution():\n    total_dollars = 3.5\n    quarters_in_one_dollar = 4\n    ans = total_dollars * quarters_in_one_dollar\n    return ans\n\nans = solution()"
    ],
    "ef3c1e2ecc29478cae0e4c67e21cfd31": [
        "def solution():\n    total_spent = 10 * 100 - 3.88 * 100  # Convert £ to pence\n    spent_on_chocolate = 72  # cost of chocolate bar in pence\n    balloon_cost = 20  # cost of each balloon in pence\n    remaining_after_chocolate = total_spent - spent_on_chocolate\n    num_balloons = remaining_after_chocolate // balloon_cost\n    \n    return int(num_balloons)\n\nans = solution()"
    ],
    "0372e783670b4989a40bb288d0a50b49": [
        "def solution():\n    from math import lcm\n    ans = lcm(3, 4, 10)\n    return ans\n\nans = solution()"
    ],
    "c3bed35ee49449b1b1c173972bfbdc16": [
        "def solution():\n    total_money = 243\n    spent_fraction = 2 / 9\n    spent_money = total_money * spent_fraction\n    remaining_money = total_money - spent_money\n    \n    # Ratio of pizza to cupcake costs\n    pizza_cost = 2\n    cupcake_cost = 3\n\n    # The total cost for the given number of cupcakes and slices of pizza.\n    total_spent_for_given_items = 5 * cupcake_cost + 6 * pizza_cost\n\n    # Since the cost of 3 slices of pizza is equal to the cost of 2 cupcakes,\n    # the cost for a single cupcake.\n    single_cupcake_cost = total_spent_for_given_items / (5 * pizza_cost + 6 * cupcake_cost) * pizza_cost\n    \n    # Now, calculate the greatest number of cupcakes he could buy with the remaining money.\n    max_cupcakes = remaining_money // single_cupcake_cost\n    \n    return int(max_cupcakes)\n\nans = solution()"
    ],
    "1fb58eeac24a49a9a387cd050b737f10": [
        "def solution():\n    from math import ceil\n\n    students = 17\n    capacity = 4\n\n    kayaks_needed = ceil(students / capacity)\n\n    return kayaks_needed\n\nans = solution()"
    ],
    "efa72e12128b4d01a799c7adc89fd0e4": [
        "def solution():\n    # Total money Mark had\n    total_money = 243\n    \n    # Money spent on 5 cupcakes and 6 slices of pizza\n    money_spent = total_money * (2/9)\n    \n    # Since 3 slices of pizza cost as much as 2 cupcakes,\n    # We can say 1.5 slices of pizza cost the same as 1 cupcake.\n    # Hence, 5 cupcakes + 6 slices of pizza is the same as 5 cupcakes + 4 cupcakes = 9 cupcakes.\n    # So, costs of 9 cupcakes are equal to 2/9 of total money.\n\n    # Cost of 1 cupcake\n    cost_cupcake = money_spent / 9\n    \n    # Remaining money\n    remaining_money = total_money - money_spent\n    \n    # Maximum number of cupcakes Mark can buy with the remaining money\n    max_cupcakes = remaining_money // cost_cupcake\n    \n    return int(max_cupcakes)\n\nans = solution()"
    ],
    "47daaf2e351c41baa45e0b8bebe5a912": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a = 4 * (3**0.5)\n    x = symbols('x')\n    equation = Eq(3 * a, (3 * x)**0.5)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9836746f750849eab60f6f4814df73ae": [
        "def solution():\n    part1 = 4 + (2 * 13)\n    part2 = (4 + 2) * 13\n    ans = part2 - part1\n    return ans\n\nans = solution()"
    ],
    "83872d0eef7a43dfb1188835aa5cf9cf": [
        "def solution():\n    # Since the youngest three dwarfs' ages add up to 42, it means the average age of the youngest three is 42 / 3.\n    # This average age is also the age of the middle dwarf because they were born in consecutive years.\n    middle_dwarf_age = 42 // 3 \n\n    # The middle dwarf's age is the fourth one in the sequence of seven dwarfs.\n    # The oldest three dwarfs will be one year older, two years older, and three years older than the middle dwarf.\n    oldest_three_sum = middle_dwarf_age + (middle_dwarf_age + 1) + (middle_dwarf_age + 2)\n\n    return oldest_three_sum\n\nans = solution()"
    ],
    "95c22bdbc98241c5a13eb5bfac9fdeef": [
        "def solution():\n    count = 0\n    for num in range(74, 200):\n        if len(set(str(num))) == len(str(num)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ed3efc4e403348c68b8110b921b8dbda": [
        "def solution():\n    from itertools import permutations\n\n    digits = [2, 3, 5]\n    perm = list(permutations(digits, 3))\n    \n    return len(perm)\n\nans = solution()"
    ],
    "ea690ce1e8584d07923ee3bc953befdb": [
        "def solution():\n    first_term = 15\n    last_term = 213\n    difference = 24 - 15\n\n    num_months = ((last_term - first_term) / difference) + 1\n\n    return int(num_months)\n\nans = solution()"
    ],
    "206f12ce0af144238e17dafffb955002": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "997a64284e3544e7a7e0c6fe94460913": [
        "def solution():\n    from itertools import permutations\n\n    digits = [2, 3, 5]\n    perm = permutations(digits, 3)\n    return len(list(perm))\n\nans = solution()"
    ],
    "2e6b4015f6284de4a0c0669daaa24807": [
        "def solution():\n    import math\n    \n    count = 0\n    base_number = \"2\"\n    while len(base_number) <= 5:\n        if math.sqrt(int(base_number)).is_integer():\n            count += 1\n        base_number += \"5\"\n    \n    return count\n\nans = solution()"
    ],
    "af0382a8cc5e48a18bb7e42fd763f480": [
        "def solution():\n    initial_pieces = 10\n    final_pieces = 16\n    cuts_needed = final_pieces - initial_pieces  # Each cut increases the total number of pieces by 1\n    \n    # When we cut one piece into three parts, we make 2 cuts.\n    # Therefore, the number of pieces cut into three parts is the number of cuts needed divided by 2.\n    pieces_cut = cuts_needed // 2\n\n    return pieces_cut\n\nans = solution()"
    ],
    "d9b42c64ab424ba98dbea5766a9ecc3c": [
        "def solution():\n    n = 2240\n    factors = []\n    \n    # Find factors of 2240\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    \n    # Check which factors yield a square when n is divided by them\n    for factor in factors:\n        if (n // factor)**0.5 % 1 == 0:\n            return factor\n\nans = solution()"
    ],
    "e495cca42c1345a4b15b14b27a2a00c5": [
        "def solution():\n    original_value = 98\n    new_value = 44.1\n    change = new_value - original_value\n    percent_change = (change / original_value) * 100\n    \n    return percent_change\n\nans = solution()"
    ],
    "fa375130b4804eb2ac24de6cdb33ba36": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 2240 to get its prime factors and their powers\n    factors = factorint(2240)\n    \n    # To be a square number after division, the powers of all prime factors\n    # of (2240/n) must be even. So we must remove the odd powers from 2240.\n\n    # Initialize n to 1 since we will multiply the factors with odd powers\n    n = 1\n    for prime, power in factors.items():\n        if power % 2 != 0:\n            # If the power is odd, multiply n by the prime factor\n            n *= prime\n\n    return n\n\nans = solution()"
    ],
    "0b88d57e68004f1f83f1f05147aba9ae": [
        "def solution():\n    total_pupils = 380\n    swimming_pupils = total_pupils * 0.7\n    non_swimming_boys_pct = 0.4\n    swimming_girls = 200\n    \n    # If 40% of boys cannot swim, then the remaining 60% can swim, and all the swimming pupils minus girls gives the number of boys\n    boys_swim = swimming_pupils - swimming_girls\n    # Then we divide by 0.6 to find the total number of boys\n    boys_total = boys_swim / 0.6\n    # The rest of the total pupils are girls\n    girls_total = total_pupils - boys_total\n    \n    return int(girls_total)\n\nans = solution()"
    ],
    "9b500db0f33f4fa7a395fa0b079d3de4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rice, oatmeal = symbols('rice oatmeal')\n    \n    equation1 = Eq(3 * rice + 3 * oatmeal, 36)\n    equation2 = Eq(rice, 2 * oatmeal)\n    \n    solutions = solve((equation1, equation2), (rice, oatmeal))\n    \n    return solutions[rice]\n\nans = solution()"
    ],
    "8df7c69637724afeb40a650136d884cc": [
        "def solution():\n    original_value = 160\n    new_value = 168\n    increase = new_value - original_value\n    percentage_increase = (increase / original_value) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "ed6460b42a0146b59f0890c10edd817c": [
        "def solution():\n    ans = 14 * 7 * 2\n    return ans\n\nans = solution()"
    ],
    "e27aaf5d541a4c6dac0a50ca457f87ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rice, oatmeal = symbols('rice oatmeal')\n    \n    # Total mass equation\n    eq1 = Eq(3 * rice + 3 * oatmeal, 36)\n    # Relation between mass of rice and oatmeal\n    eq2 = Eq(rice, 2 * oatmeal)\n    \n    solutions = solve((eq1, eq2), (rice, oatmeal))\n    return solutions[rice]\n\nans = solution()"
    ],
    "b746b9baab8c4a33bd87af0d6945be01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*(6*x + 1) - 2*x, 89)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b423b47f8b544d03af8cc3a8a122e9ab": [
        "def solution():\n    count = 0\n    n = 200\n    for i in range(1, n + 1):\n        if n % i == 0 and i != n:\n            count += 1\n    return count // 2\n\nans = solution()"
    ],
    "b9c7443e6d2446d1880d97e9932a5033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables\n    x = symbols('x')\n    \n    # Equation based on the mass of sugar from each solution\n    # 4 kg of 30% sugar water contains 1.2 kg of sugar (4 * 0.30)\n    # x kg of 10% sugar water contains 0.1 * x kg of sugar (x * 0.10)\n    # The final mixture has a mass of (4 + x) kg and contains 26% sugar, which is (4 + x) * 0.26 kg of sugar\n    equation = Eq(4 * 0.30 + x * 0.10, (4 + x) * 0.26)\n    \n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5bb77e251c3740d5aab8750dc2aef4ff": [
        "def solution():\n    # Calculate the original price before the first discount\n    price_after_first_discount = 32\n    first_discount_rate = 0.20  # 20%\n    original_price = price_after_first_discount / (1 - first_discount_rate)\n    \n    # Calculate the price after the second discount given to Henry\n    second_discount = 4\n    price_after_second_discount = price_after_first_discount - second_discount\n\n    # Calculate the total discount\n    total_discount = original_price - price_after_second_discount\n    \n    # Calculate the total percentage discount\n    total_discount_rate = (total_discount / original_price) * 100\n    \n    return total_discount_rate\n\nans = solution()"
    ],
    "94f427d14d9b4d18afe48096055372d1": [
        "def solution():\n    def custom_op(a, b):\n        return a * b - a - b + 1\n\n    ans = custom_op(custom_op(2, 3), 4)\n    return ans\n\nans = solution()"
    ],
    "a8239f9e0ecd49818a91f1dd8da80bf9": [
        "def solution():\n    n = 200\n    count = 0\n    # Get a list of divisors of n except for 1 and the number itself\n    for i in range(2, n // 2 + 1):\n        if n % i == 0:\n            # If n is divisible by i, then (n/i) parts of size i is a sum of equal parts\n            count += 1\n    # Adding 1 to count to include the number itself (n = n + 0 + ... + 0)\n    return count + 1\n\nans = solution()"
    ],
    "bbe36118c29249729aad8891551bb3d7": [
        "def solution():\n    def custom_operation(a, b):\n        return a * b - a - b + 1\n\n    ans = custom_operation(custom_operation(2, 3), 4)\n    return ans\n\nans = solution()"
    ],
    "2d23c45ab97549b4b8ab41ad32224d76": [
        "def solution():\n    # Total perimeter of the field\n    perimeter = 2 * (144 + 204)\n    \n    # Wheat planted on the corners are not counted in the distances\n    # Total wheat to divide the perimeter into segments is the total wheat minus the 4 corners\n    wheat_segments = 116 - 4\n    \n    # The distance between every 2 wheat is the perimeter divided by the number of segments\n    distance = perimeter / wheat_segments\n    \n    return distance\n\nans = solution()"
    ],
    "f88ff061bff143cb95b6f618e6e1efd8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for Lana's and Mark's initial amount of sweets\n    lana, mark = symbols('lana mark')\n\n    # Create the equations based on the problem statement\n    # lana - (1/3)*lana = mark - 34\n    # lana + mark = 674\n    equation1 = Eq(lana - (1/3)*lana, mark - 34)\n    equation2 = Eq(lana + mark, 674)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (lana, mark))\n\n    # Calculate the difference in the initial amount of sweets between Lana and Mark\n    difference = solutions[lana] - solutions[mark]\n\n    return difference\n\nans = solution()"
    ],
    "c316b949005a4f70998bf21b2636f3e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dorothy, timmy, kevin = symbols('dorothy timmy kevin')\n\n    equation1 = Eq(dorothy, 8 * timmy)\n    equation2 = Eq(dorothy, 96)\n    equation3 = Eq(kevin, timmy + 45)\n\n    solutions = solve((equation1, equation2, equation3), (dorothy, timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "00bac1b894d8400c927244d5ab291236": [
        "def solution():\n    # Let's denote the total number of days in Robert's summer holiday as x.\n    # According to the problem:\n    # Half of the holiday spent working: x/2\n    # Half of the remaining time reading and relaxing: (x/2) / 2 = x/4\n    # Time spent at a friend's house: 4 days\n    # Time left for summer camp: 2 weeks = 14 days\n    # The equation will be: (x/2) + (x/4) + 4 + 14 = x\n    # Simplifying the equation we get: 3x/4 + 18 = x\n    # Solving for x we get: x - 3x/4 = 18\n    # x/4 = 18\n    # x = 18 * 4\n\n    total_days = 18 * 4\n    return total_days\n\nans = solution()"
    ],
    "3110b53620c0471aa2cb667c3ce65e77": [
        "def solution():\n    # Since one cat catches a fish in 10 minutes, the rate of catching is independent of the number of cats\n    # as each cat catches fish individually. Therefore, 5 cats also take 10 minutes to catch a single fish each.\n    time_to_catch_one_fish_per_cat = 10\n    return time_to_catch_one_fish_per_cat\n\nans = solution()"
    ],
    "b9c45a7f41d84579a8250cc2efdbeda0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, pineapple = symbols('watermelon pineapple')\n\n    equation1 = Eq(watermelon, 5 * pineapple)\n    equation2 = Eq(watermelon, pineapple + 5.6)\n\n    solutions = solve((equation1, equation2), (watermelon, pineapple))\n\n    return solutions[watermelon]\n\nans = solution()"
    ],
    "b3542d3cc8af443f8b242a3a4d02cd92": [
        "def solution():\n    perimeter = (144 + 204) * 2 # Calculate the perimeter of the field\n    wheat_count_on_sides = 116 - 4 # Subtract the 4 corner wheat plants\n    spacing = perimeter / wheat_count_on_sides # Calculate the space between the wheat\n    return spacing\n\nans = solution()"
    ],
    "f2e2f998455a41098dae005947481855": [
        "def solution():\n    total_rice_A = 15 * 0.40\n    total_rice_mixture = (15 + 60) * 0.28\n    total_rice_B = total_rice_mixture - total_rice_A\n    percent_rice_B = (total_rice_B / 60) * 100\n    \n    return percent_rice_B\n\nans = solution()"
    ],
    "468e5ab1d23843a688c0d986c25ee3de": [
        "def solution():\n    total_bracelets = 84\n    morning_bracelets = total_bracelets * 2 / 7\n    remaining_bracelets = total_bracelets - morning_bracelets\n    afternoon_bracelets = remaining_bracelets * 3 / 5\n    made_bracelets = morning_bracelets + afternoon_bracelets\n    more_bracelets_needed = total_bracelets - made_bracelets\n    return more_bracelets_needed\n\nans = solution()"
    ],
    "82e49ff36eba45e5b80fed7508aed40a": [
        "def solution():\n    total_people = 200\n    ellie_rate = 40\n    combined_time = 4\n    \n    # Since Ellie and Gloria together can finish in 4 weeks,\n    # we find the total number of people interviewed in 4 weeks by Ellie\n    ellie_people = ellie_rate * combined_time\n    \n    # Subtract the amount Ellie can do from the total to find Gloria's share\n    gloria_people = total_people - ellie_people\n    \n    # The rate at which Gloria works is her share divided by the time taken.\n    # We can then find the total time it would take Gloria to do the entire work herself.\n    gloria_time = total_people / (gloria_people / combined_time)\n\n    return int(gloria_time)\n\nans = solution()"
    ],
    "5756e8ef018e4deca17abc1cfcc3c79a": [
        "from itertools import permutations\n\ndef solution():\n    # Since B and D are known, we look for A, C, E, and F values\n    # that satisfy the given constraints.\n    for A, C, E, F in permutations(range(10), 4):\n        if A == 0 or E == 0 or F == 0:\n            continue  # Skip since ABCDEF can't start with 0, the same for EFABCD\n\n        # Construct the numbers ABCDEF and EFABCD using the known B=2 and D=0\n        ABCDEF = A * 100000 + 2 * 10000 + C * 1000 + 0 * 100 + E * 10 + F\n        EFABCD = E * 100000 + F * 10000 + A * 1000 + 2 * 100 + 0 * 10 + C\n\n        # Check if the equation holds\n        if 5 * ABCDEF == 6 * EFABCD:\n            # Return the 4-digit number FACE\n            return A * 1000 + C * 100 + E * 10 + F\n\nans = solution()"
    ],
    "134e520a63fc4cd4b9d24373d85afc3a": [
        "def solution():\n    result = (3/8) * 48\n    return result\n\nans = solution()"
    ],
    "89088a26e0bf4129b3d5aac6042e949e": [
        "def solution():\n    # Let the numbers be a > b > c > d\n    # sum(d + (a + b + c) / 3) = 39 => a + b + c + d = 117\n    # sum(a + (b + c + d) / 3) = 51 => a + b + c + d = 153\n    # Solving these two equations we get: a = 153 - 117 = 36\n    # To maximize the largest number, we minimize the other numbers,\n    # so we set b=c=d=1, which yields a = 114 - (1+1+1) = 111\n    return 111\n\nans = solution()"
    ],
    "9fbe57cb0ac6418ab2240792282591b7": [
        "def solution():\n    leak_rate_per_minute = 15  # in milliliters\n    minutes_in_2_hours = 2 * 60\n    total_leakage = leak_rate_per_minute * minutes_in_2_hours  # in milliliters\n    total_leakage_in_litres = total_leakage / 1000  # converting milliliters to liters\n    return total_leakage_in_litres\n\nans = solution()"
    ],
    "f2e50e32110b4bbdac14c61d13824286": [
        "def solution():\n    road_length = 150\n    tree_spacing = 10\n\n    # Number of trees is calculated by dividing the road length by the tree spacing \n    # We add 1 because there's a tree at the beginning and at the end of the road.\n    num_trees = (road_length // tree_spacing) + 1\n    \n    return num_trees\n\nans = solution()"
    ],
    "05453f6e54854903b245e1b9f7315d91": [
        "def solution():\n    # x is the percent of rice in dogfood B\n    # Equation: (15 pounds * 40% rice) + (60 pounds * x rice) = (75 pounds * 28% rice)\n    \n    # Calculate total rice in the mixture.\n    # 40% of 15 pounds from dogfood A, and 28% of total 75 pounds from the mixture\n    total_rice_mixture = 0.28 * 75\n    rice_from_dogfood_A = 0.40 * 15\n    \n    # Find total rice needed from dogfood B to make up the mixture to 28%\n    rice_needed_from_dogfood_B = total_rice_mixture - rice_from_dogfood_A\n    \n    # Calculate the percentage of rice in dogfood B\n    percent_rice_dogfood_B = (rice_needed_from_dogfood_B / 60) * 100\n    \n    return percent_rice_dogfood_B\n\nans = solution()"
    ],
    "e7bd4bc8283741eb831b62ff36519ac8": [
        "def solution():\n    # Barbara's speed (m per minute)\n    speed_barbara = 60\n    # Catherine's speed (m per minute)\n    speed_catherine = 45\n    \n    # When Barbara reaches the shopping mall, Catherine has 60 meters to go\n    # Let d be the distance to the shopping mall from the starting point\n    # Barbara traveled the entire distance d\n    # Catherine traveled (d - 60) meters\n    \n    # They started at the same time so their travel times are the same\n    # Barbara's time = Catherine's time\n    # d / speed_barbara = (d - 60) / speed_catherine\n    \n    # Solve for d\n    d = (speed_barbara * 60) / (speed_barbara - speed_catherine)\n    \n    return d\n\nans = solution()"
    ],
    "794649fd064842be800fcd3dd6a2517e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, pen = symbols('book pen')\n\n    equation1 = Eq(2 * book + 1 * pen, 12)\n    equation2 = Eq(1 * book + 2 * pen, 9)\n\n    solutions = solve((equation1, equation2), (book, pen))\n\n    return solutions[pen]\n\nans = solution()"
    ],
    "e082319eb56d42f888747eb43934b281": [
        "def solution():\n    ten_dollar_notes = 2\n    five_dollar_notes = 5\n    twenty_cent_coins = 4\n\n    total_change = (ten_dollar_notes * 10) + (five_dollar_notes * 5) + (twenty_cent_coins * 0.20)\n    money_given = 100\n    money_spent = money_given - total_change\n\n    return money_spent\n\nans = solution()"
    ],
    "410b895710664b55b1f42904c7fe0a39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    A, B, C = symbols('A B C')\n\n    # Given two ratios and total money\n    equation1 = Eq(A, 4/7 * (A + B))\n    equation2 = Eq(C, A - 20)\n    equation3 = Eq(A + B + C, 200)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[C]\n\nans = solution()"
    ],
    "17d03f9197534de4bc9abd09472af81f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')  # Define the symbols\n    equation = Eq(3*x + y + 21, 2 * (0.5*y + x))  # Create the equation\n    \n    solutions = solve(equation, x)  # Solve for x\n    \n    return solutions[0]  # Return the solution for x\n\nans = solution()"
    ],
    "3ba5f4eac4774daf9c2b513499cd343e": [
        "def solution():\n    time_per_plate = 3  # minutes to fry a plate of fried rice\n    total_time = 18  # total available minutes\n\n    num_plates = total_time // time_per_plate\n\n    return num_plates\n\nans = solution()"
    ],
    "59eb954ff993443c9285d88a012ec8bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nini, dad = symbols('nini dad')\n\n    equation1 = Eq(dad, nini + 25)\n    equation2 = Eq(dad + 5, 2 * (nini + 5) - 8)\n\n    solutions = solve((equation1, equation2), (nini, dad))\n\n    return solutions[nini]\n\nans = solution()"
    ],
    "e3bed45262264696ba3ef5c430fcbf22": [
        "def solution():\n    total_students = 50\n    \n    # Initialize a list to keep track of student orientations (True for facing the teacher)\n    facing_teacher = [True] * (total_students + 1)  # +1 for 1-based indexing\n    \n    # Turn the students reporting multiples of 4\n    for i in range(4, total_students + 1, 4):\n        facing_teacher[i] = not facing_teacher[i]  # Reverse the orientation\n\n    # Turn the students reporting multiples of 6\n    for i in range(6, total_students + 1, 6):\n        facing_teacher[i] = not facing_teacher[i]  # Reverse the orientation\n\n    # Count how many students are still facing the teacher\n    students_facing_teacher = sum(facing_teacher[1:])  # Ignore index 0 as it's not used\n\n    return students_facing_teacher\n\nans = solution()"
    ],
    "58dc414946bf46c0ba652c5866ea789b": [
        "def solution():\n    return 471471471471 // 157157157157\n\nans = solution()"
    ],
    "ab914c10068e40aabb127e29805bd56b": [
        "def solution():\n    total_pears = 300\n    first_day_sold = total_pears * 2 / 5\n    remaining_pears = total_pears - first_day_sold\n    second_day_sold = remaining_pears * 7 / 9\n\n    return int(second_day_sold)\n\nans = solution()"
    ],
    "6951136ac6a143cc8a66d6e046b9c312": [
        "def solution():\n    return 2536 // 4  # Integer division\n\nans = solution()"
    ],
    "f266887d9734495ab9b3e624af600dc7": [
        "def solution():\n    fraction = 3/4\n    percentage = 30 / 100\n    total_value = 120\n\n    ans = fraction * percentage * total_value\n    return ans\n\nans = solution()"
    ],
    "a3540f1e7dc5422e96cb21be5f76dd9b": [
        "def solution():\n    apples = 29\n    min_apples_per_student = 3\n    # Using the pigeonhole principle, we start by giving 3 apples to a student\n    # and calculate how many students can we have with the remaining apples being distributed.\n    remaining_apples = apples - min_apples_per_student\n    # Each student can get at least 1 apple, hence we add back the 1 student who got 3 apples\n    class_size = (remaining_apples // 1) + 1\n    return class_size\n\nans = solution()"
    ],
    "7dac345168e24b7f9f57312741709d28": [
        "def solution():\n    num_boys = 3\n    num_girls = 4\n\n    # One boy can be chosen out of 3 in 3 ways.\n    # One girl can be chosen out of 4 in 4 ways.\n\n    # By the principle of multiplication, the total\n    # number of ways to choose one boy and one girl is:\n    ways_to_choose = num_boys * num_girls\n\n    return ways_to_choose\n\nans = solution()"
    ],
    "c49b566d28914d98a6c34de5890ff196": [
        "def solution():\n    original_value = 140\n    new_value = 87.5\n    percent_change = ((new_value - original_value) / original_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "1f597349b6ec4f37bf0ad940a0226974": [
        "def solution():\n    ans = 462 + 268\n    return ans\n\nans = solution()"
    ],
    "f3ad4296cd634e83b25be5b77004a4b0": [
        "def solution():\n    ans = 36 - 18 / 2 + 4 * 6 / 3\n    return ans\n\nans = solution()"
    ],
    "8acc0b244fed4d689a5ee6fdff28233e": [
        "def solution():\n    initial_value = 140\n    final_value = 87.5\n    percent_change = ((final_value - initial_value) / initial_value) * 100\n\n    return percent_change\n\nans = solution()"
    ],
    "efb9468b904144138bdc171c8b89d9b7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    g, b = symbols('g b')\n    equation1 = Eq(g + b, 140)  # Total number of green and blue balls is 140\n    equation2 = Eq(g - 28, b - (2 / 5) * b)  # After removal, the remaining green and blue balls are equal\n\n    solutions = solve((equation1, equation2), (g, b))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "603221d8eb7e48509c5ac61d65305758": [
        "def solution():\n    # If the alcoholic is not at two of the bars, he must be at the third bar.\n    # Therefore, the probability is 100% or 1.\n    return 1\n\nans = solution()"
    ],
    "2afab9fc169e49b190d537d496fbae66": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    eliot, cousin = symbols('eliot cousin')\n    \n    # Eliot is now twice his cousin's age\n    equation1 = Eq(eliot, 2 * cousin)\n    # In 4 years' time Eliot will be 16\n    equation2 = Eq(eliot + 4, 16)\n    \n    solutions = solve((equation1, equation2), (eliot, cousin))\n    \n    # Cousin's age in 4 years' time\n    cousin_future_age = solutions[cousin] + 4\n    \n    return cousin_future_age\n\nans = solution()"
    ],
    "6d6b160ceaa74bed9f0745675ca7130e": [
        "def solution():\n    ans = 5183 - 594\n    return ans\n\nans = solution()"
    ],
    "9125492975b445d4b6f48807e27c1382": [
        "def solution():\n    first_number = 387\n    second_number = 729\n    \n    average = (first_number + second_number) / 2\n\n    return average\n\nans = solution()"
    ],
    "61e7999f8b924716a703e69dcd306ee4": [
        "def solution():\n    # The proportion of marked fish in the second catch should be approximately\n    # equal to the proportion of the total number of marked fish to the total\n    # number of fish in the pond.\n\n    marked_in_second_catch = 16\n    total_marked = 100\n    total_second_catch = 100\n\n    # Using proportions to estimate the total number of fish in the pond.\n    # marked_in_second_catch / total_second_catch = total_marked / total_fish_in_pond\n\n    total_fish_in_pond = (total_marked * total_second_catch) / marked_in_second_catch \n\n    return int(total_fish_in_pond)\n\nans = solution()"
    ],
    "7ed04e8e16744d3b811bde9f5ab21683": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the variable n be the distance Nancy walks\n    # and r be the distance Randy walks\n    n, r = symbols('n r')\n    \n    # Relation between distances walked by Nancy and Randy before meeting\n    equation1 = Eq(r, n + 10)\n    # Relation between their walking rates\n    equation2 = Eq(3 * n, 2 * r)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (n, r))\n    \n    # Distance between them when they set off is the sum of the distance each walked\n    ans = solutions[n] + solutions[r]\n    \n    return ans\n\nans = solution()"
    ],
    "26d6e3f96e9245abb8672de6d4d25383": [
        "def solution():\n    elaine_current_age = 6\n    mandy_current_age = 35\n    age_difference = mandy_current_age - elaine_current_age\n    elaine_future_age = 12\n    mandy_future_age = elaine_future_age + age_difference\n    return mandy_future_age\n\nans = solution()"
    ],
    "07e354462e5749c7b35205d8675ad8be": [
        "def solution():\n    return 324 + 132\n\nans = solution()"
    ],
    "549c6955bced409fbe3608247d39f37d": [
        "def solution():\n    numerator = (1 + 3/99) + (3 + 3/33) + (9 + 3/11)\n    denominator = (1 + 1/99) + (3 + 1/33) + (9 + 1/11)\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "94fa427c30bc41b0bc1c23c2e238e7a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    x = symbols('x')\n    \n    # Given repeating decimal\n    repeating_decimal = 0.2014 + 0.00001414 / (1 - 0.01)\n\n    # equation based on the problem statement\n    equation = Eq(x / 9900, repeating_decimal)\n\n    # solve for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "fa1aabed26fd4a0f8865c23013775faa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ali, bronson, charlie = symbols('ali bronson charlie')\n    average_bc = (bronson + charlie) / 2\n\n    equation1 = Eq(ali, average_bc - 5)\n    equation2 = Eq(bronson, 2 * ali)\n\n    solutions = solve((equation1, equation2), (ali, bronson, charlie))\n\n    return solutions[charlie]\n\nans = solution()"
    ],
    "8b3e2473ae0743c19785cba9cb052741": [
        "def solution():\n    sum1 = sum(range(10, 21, 2))\n    sum2 = sum(range(9, 20, 2))\n    ans = sum1 - sum2\n    return ans\n\nans = solution()"
    ],
    "77cc490d98fc4ff0b16ec404452ab1f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let a be the age of Alice and s be the age of her sister\n    a, s = symbols('a s')\n\n    # Alice is twice as old as her sister now: a = 2s\n    equation1 = Eq(a, 2 * s)\n    \n    # In 10 years time, their total age is 53 years old: (a + 10) + (s + 10) = 53\n    equation2 = Eq((a + 10) + (s + 10), 53)\n\n    # Solving the system of equations for a and s\n    solutions = solve((equation1, equation2), (a, s))\n\n    return solutions[a]\n\nans = solution()"
    ],
    "5eb6f108f7f945d3b8e14b92f427c6c4": [
        "def solution():\n    count = 0\n    for i in range(1, 10):\n        for j in range(0, 10):\n            for k in range(0, 10, 2):  # The last digit must be even, hence the step is 2\n                if i != j and i != k and j != k and i + j + k == 8:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "9a8ebe1067614f2ba696f9ca243810e9": [
        "def solution():\n    for i in range(100000, 1000000):\n        if str(i)[-1] == '2' and int('2' + str(i)[:-1]) == i // 3:\n            return i\n\nans = solution()"
    ],
    "0e0926913a4c49b6b42a2bff3086a037": [
        "def solution():\n    total_students = 30\n    first_exam_passed = 25\n    second_exam_failed = 12\n    second_passed_first_failed = 3\n    \n    # Using the Inclusion-Exclusion Principle\n    first_passed_only = first_exam_passed - (total_students - second_exam_failed - second_passed_first_failed)\n\n    return first_passed_only\n\nans = solution()"
    ],
    "807a797d374546a7ad31ed32cc60158c": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 5), (6, 8), (7, 9)]\n    number, _ = solve_congruence(*congruences)\n\n    while number < 500:\n        number += 5 * 8 * 9  # Product of mods since they are coprime\n\n    return number\n\nans = solution()"
    ],
    "5fdcb9eaeeda4228836991b47e7cf8da": [
        "def solution():\n    total_bars = 43\n    people = 4\n\n    bars_left = total_bars % people\n\n    return bars_left\n\nans = solution()"
    ],
    "09cfeee5f94b44469b0645a7a6453ce2": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(10):\n            ab = a * 10 + b\n            ba = b * 10 + a\n            if ab * ba % 100 == 0:\n                return ab\n\nans = solution()"
    ],
    "93167d80f006455787219151d56379f4": [
        "def solution():\n    pay_per_hour = 78 / 6.5\n    hours_needed = 300 / pay_per_hour\n    return hours_needed\n\nans = solution()"
    ],
    "3ef3e16ae5454ad18e360ceeb9eeef62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of potatoes in the small sack\n    x = symbols('x')\n\n    # Equation for the large sack based on the number of potatoes in the small sack\n    # large sack has 20% more potatoes than the small sack\n    equation1 = Eq(x * 1.2, x + (20/100) * x)\n\n    # Equation for the total number of potatoes\n    equation2 = Eq(x + x * 1.2, 77)\n\n    # Solve for x\n    solution = solve((equation1, equation2), x)\n\n    # Calculate the number of potatoes in the large sack\n    large_sack = solution[x] * 1.2\n\n    return large_sack\n\nans = solution()"
    ],
    "c1b3143db8aa464aab4fa542021b858a": [
        "def solution():\n    # There are 6 permutations of a, b, c for a three-digit number.\n    # Each digit will appear in the hundreds, tens, and ones place exactly two times.\n    # Thus, the sum of all the three-digit numbers is:\n    # 2*(100a + 10b + c) + 2*(100b + 10c + a) + 2*(100c + 10a + b).\n\n    sum_numbers = 2 * (100 * a + 10 * b + c) + 2 * (100 * b + 10 * c + a) \\\n                + 2 * (100 * c + 10 * a + b)\n    \n    return sum_numbers\n\n# Define the variables a, b, c\na, b, c = symbols('a b c')\n\n# Call the solution function with the defined variables\nans = solution()\n\nans"
    ],
    "19d5b1dcfa2c4b1bb5d7e097116869d5": [
        "def solution():\n    matthew_pencils = 31\n    samantha_pencils = matthew_pencils - 6\n    return samantha_pencils\n\nans = solution()"
    ],
    "f165d10b0a934af9ba1ae1c8293984e6": [
        "def solution():\n    ans = round(5/9, 2)\n    return ans\n\nans = solution()"
    ],
    "3569ba2a31094a19827f25ea3598dbd8": [
        "def solution():\n    least_5_digit_palindrome = 10001\n    greatest_6_digit_palindrome = 999999\n\n    ans = greatest_6_digit_palindrome - least_5_digit_palindrome\n\n    return ans\n\nans = solution()"
    ],
    "80120be608194dd2b89d6d3c9721eb31": [
        "def solution():\n    students = 35\n    cabin_capacity = 6\n    num_cabins = -(-students // cabin_capacity)  # ceiling division\n    return num_cabins\n\nans = solution()"
    ],
    "d77af89b3f1c41dd8496bce0d6d3ec08": [
        "def solution():\n    count = 0\n    for number in range(1, 59):\n        count += len(str(number))\n    return count\n\nans = solution()"
    ],
    "019e5a54ec7f459790a6d32439e83dfb": [
        "def solution():\n    current_digit_count = 0\n    digit_target = 2011\n    \n    # Count the digits starting from 1200 backwards\n    for n in range(1200, 0, -1):\n        digit_count = len(str(n))\n        current_digit_count += digit_count\n        \n        # Check if the cumulative digit count has reached or passed the target\n        if current_digit_count >= digit_target:\n            # Calculate the position of the target digit within the number n\n            index_from_right = current_digit_count - digit_target\n            \n            # Find the specific digit by indexing the number string\n            return int(str(n)[digit_count - index_from_right - 1])\n\nans = solution()"
    ],
    "e0b9281bf0a54571a6295132e8b1f3b8": [
        "def solution():\n    matthew_pencils = 31\n    samantha_pencils = matthew_pencils - 6\n    return samantha_pencils\n\nans = solution()"
    ],
    "742b4a19edd64989a9bc0c3e3a6c14e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    coins = symbols('coins')\n    \n    equation = Eq(coins / 4 + 2, coins / 3)\n    \n    num_coins = solve(equation, coins)\n    \n    return num_coins[0]\n\nans = solution()"
    ],
    "36e64178982945cca898597516b4d750": [
        "def solution():\n    # The number of books to the right of the picture book\n    right_of_picture_book = 6\n\n    # Position of the picture book from the left\n    position_from_left = 14\n\n    # Total number of books is the sum of the position from the left and the number\n    # of books to the right minus 1, because we've included the picture book in the\n    # position_from_left count\n    total_books = position_from_left + right_of_picture_book\n\n    return total_books\n\nans = solution()"
    ],
    "697722b344fb494fa3ef4ecb759d5167": [
        "def solution():\n    # Finding the last multiple of 5 smaller than or equal to 50\n    last_multiple = (50 // 5) * 5\n    # Calculating the number of multiples of 5 up to last_multiple\n    num_multiples = last_multiple // 5\n    # Sum of an arithmetic series: n/2 * (first_term + last_term)\n    sum_multiples = num_multiples / 2 * (5 + last_multiple)\n    \n    return int(sum_multiples)\n\nans = solution()"
    ],
    "bc3d8ec301fc410598e59a2ceb2b13e3": [
        "def solution():\n    paid_price = 64\n    discount_percent = 20\n    original_price = paid_price / (1 - discount_percent / 100)\n    return original_price\n\nans = solution()"
    ],
    "d4c00e90a8ef4ae0981bbeedc1858cd9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of cars, y be the number of motorbikes\n    x, y = symbols('x y')\n    \n    # Each car has 4 tires, each motorbike has 2 tires\n    equation1 = Eq(4*x + 2*y, 490)\n    \n    # The total number of cars and motorbikes is 140\n    equation2 = Eq(x + y, 140)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "913c9cae5532421db2aefcd71661c685": [
        "def solution():\n    # We can't use 0 as the first digit, so we have 5 choices for the first digit (1-5)\n    first_digit_options = 5\n    # We can use 0 as the second digit, so we have 6 choices for the second digit (0-5)\n    second_digit_options = 6 \n    \n    # The total combinations is the product of the choices\n    total_combinations = first_digit_options * second_digit_options\n    \n    return total_combinations\n\nans = solution()"
    ],
    "5c51cffb043942adb46a09a26bc746ab": [
        "def solution():\n    first_term = 26\n    last_term = 626\n    difference = 34 - 26\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "27cc97e40ad844c982dd1a9f1e766432": [
        "def solution():\n    paid_price = 64\n    discount_rate = 0.2\n    original_price = paid_price / (1 - discount_rate)\n    return original_price\n\nans = solution()"
    ],
    "031e28e1f3ad4f9f868951764773e37c": [
        "def solution():\n    total_litres = 36\n    ratio_apple = 4\n    ratio_orange = 5\n    ratio_total = ratio_apple + ratio_orange\n    \n    apple_juice_litres = (ratio_apple / ratio_total) * total_litres\n    \n    return apple_juice_litres\n\nans = solution()"
    ],
    "5e3921774a0148c58a168a7d4d6a9158": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    a, n = symbols('a n', integer=True)\n    \n    # The equations based on the problem statement\n    equation1 = Eq(190 % n, a)\n    equation2 = Eq(137 % n, a + 4)\n    equation3 = Eq(101 % n, a + 6)\n    \n    # Solve the system of equations to get n\n    solutions = solve((equation1, equation2, equation3), (a, n))\n    \n    # Get the first valid solution for n, which is the number we are dividing by\n    valid_solution = [sol for sol in solutions if sol[n] > 0][0]\n    the_number = valid_solution[n]\n    \n    # Compute remainder when 299 is divided by the found number\n    remainder = 299 % the_number\n\n    return remainder\n\nans = solution()"
    ],
    "fa4eb19fd6df49bdb4533fec025fa83a": [
        "def solution():\n    return 125 * (76 + 12)\n\nans = solution()"
    ],
    "730105f481354ec491084be98c91d6f1": [
        "def solution():\n    return 0.2 * 5.39\n\nans = solution()"
    ],
    "4958c2ee692b42cdaaf22c2892011be2": [
        "def solution():\n    number = 8.765\n    ans = round(number, 1)\n    return ans\n\nans = solution()"
    ],
    "aa07d321ec634d83a0c7f8d255553cff": [
        "def solution():\n    total_avocados = 960\n    per_box = 8\n    num_boxes = total_avocados // per_box\n\n    return num_boxes\n\nans = solution()"
    ],
    "b81938b8cf7a46a4b628bfa5a8634ad1": [
        "def solution():\n    # Let x be the number thought of\n    # According to the problem, we have: 2*x + 12 = 26\n    # To find x, we can perform the inverse operations on 26:\n    # Subtract 12, then divide by 2\n\n    result = (26 - 12) / 2\n    return result\n\nans = solution()"
    ],
    "de030313f1e64b389d5594c99dd4dafe": [
        "def solution():\n    return 0.2 * 5.39\n\nans = solution()"
    ],
    "abaa56505ee547838c84f84921be0ebb": [
        "def solution():\n    number = 1\n    while True:\n        if number % 2 == 1 and number % 13 == 1:\n            return number\n        number += 1\n\nans = solution()"
    ],
    "1cecf15afbce45239bf7e71e6a2da145": [
        "def solution():\n    ans = (9/5) * (25/100) + (1/4) * 2.2 - 0.25\n    return ans\n\nans = solution()"
    ],
    "c5ef0c07edfc4211afdaa999ad856197": [
        "def solution():\n    classes = 5\n    students_per_class = 100\n    donation_per_student = 5.78\n    \n    total_donation = classes * students_per_class * donation_per_student\n    \n    return total_donation\n\nans = solution()"
    ],
    "9371af16b67240519deb5e635949e1a7": [
        "from sympy import isprime\n\ndef solution():\n    max_sum = 0\n    for y in range(2, 200):\n        if isprime(y):\n            x = (200 + y) // (y + 2)\n            if isprime(x) and x != y and (x * (2 + y)) == (200 + y):\n                max_sum = max(max_sum, x + y)\n    return max_sum\n\nans = solution()"
    ],
    "86cd9b725006412db04f636eca50d89b": [
        "from math import factorial\n\ndef solution():\n    # The digits are 2, 2, 3, 3, 4, 5\n    total_digits = 6\n    repetitions_of_2 = 2\n    repetitions_of_3 = 2\n\n    # Calculate the total permutations considering the repetitions\n    total_permutations = factorial(total_digits) // (factorial(repetitions_of_2) * factorial(repetitions_of_3))\n\n    return total_permutations\n\nans = solution()"
    ],
    "33d52a12c5824537a7ab10162e240c2c": [
        "def solution():\n    spent = 2\n    fraction_spent = 1/4\n    initial_money = spent / fraction_spent\n    return initial_money\n\nans = solution()"
    ],
    "6ed2905a0c1c4583b578668431fbae3f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    doc, happy, dopey, sneezy, bashful, grumpy, sleepy = symbols('doc happy dopey sneezy bashful grumpy sleepy')\n\n    equation1 = Eq(doc, happy + 10)\n    equation2 = Eq(happy, dopey + 10)\n    equation3 = Eq(dopey, sneezy)\n    equation4 = Eq(dopey, bashful)\n    equation5 = Eq(dopey, grumpy)\n    equation6 = Eq(sleepy, 80)\n    equation7 = Eq(doc + sleepy, dopey + sneezy)\n\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6, equation7),\n                      (doc, happy, dopey, sneezy, bashful, grumpy, sleepy))\n\n    total_height = sum(solutions.values())\n\n    return total_height\n\nans = solution()"
    ],
    "80c9bf8ad95b4909a6d7ee77ac0d7e51": [
        "def solution():\n    team_count = 8\n    rounds = (team_count * (team_count - 1)) // 2  # Each team plays with each other once\n    return rounds\n\nans = solution()"
    ],
    "590a4f620ce648a89e73074cf3c6acf5": [
        "def solution():\n    a = 6\n    b = 7\n    return a * 3 + b - 4\n\nans = solution()"
    ],
    "3d554443b1224a4da2b07f8233870170": [
        "def solution():\n    from fractions import Fraction\n\n    # Calculate the expression in the numerator (5 + 1/6) + (6 + 1/5)\n    numerator = Fraction(5) + Fraction(1, 6) + Fraction(6) + Fraction(1, 5)\n\n    # Calculate the expression in the denominator 1/6 + 1/5\n    denominator = Fraction(1, 6) + Fraction(1, 5)\n\n    # Divide the numerator by the denominator\n    ans = numerator / denominator\n    \n    return ans\n\nans = solution()"
    ],
    "f39a0d61562749f19a4d1e5e510dac81": [
        "def solution():\n    return (7/9) * 27\n\nans = solution()"
    ],
    "c4bf31a44d8d46c9b19634c1115ae2a2": [
        "def solution():\n    from itertools import permutations\n\n    digits = '359'\n    all_numbers = sorted([''.join(p) for p in permutations(digits)])\n    \n    return int(all_numbers[4])\n\nans = solution()"
    ],
    "17bc582ed1bf4564b574312e59268176": [
        "def solution():\n    # Unit rate of construction\n    meters_per_day = 1000 / 5\n    # Total days required for 2600-meter construction\n    days_for_2600_meters = 2600 / meters_per_day\n    return days_for_2600_meters\n\nans = solution()"
    ],
    "d07b83cca75e406b9cac57296901269a": [
        "def solution():\n    distance_traveled_in_5_hours = 250  # miles\n    time_taken = 5  # hours\n\n    speed = distance_traveled_in_5_hours / time_taken  # speed in miles per hour\n\n    time_for_3_hours = 3\n    distance_traveled_in_3_hours = speed * time_for_3_hours\n\n    return distance_traveled_in_3_hours\n\nans = solution()"
    ],
    "d1cf2646f95e48aaab2267eb79ed0eb3": [
        "def solution():\n    total_trees = 60\n    trees_per_side = total_trees // 4  # Since it's a square garden, divide by 4\n    return trees_per_side\n\nans = solution()"
    ],
    "f7ab8cb826c649ec85b7b2cea10e2333": [
        "def solution():\n    for i in range(10, 60):\n        if i % 8 == 3 and i % 7 == 6:\n            return i\n\nans = solution()"
    ],
    "b5428109db6f4a889887b92377a44169": [
        "def solution():\n    # Determine the count of numbers in the sum\n    num_count = 90 - 12 + 1\n    # Check if the count is odd or even\n    if num_count % 2 == 0:\n        # An even count of consecutive numbers will have an even sum\n        ans = 'even'\n    else:\n        # An odd count of consecutive numbers starting with an even number will result in an odd sum\n        first_number = 12\n        if first_number % 2 == 0:\n            ans = 'odd'\n        else:\n            ans = 'even'\n    return ans\n\nans = solution()"
    ],
    "5b18261bd85f4736bb866cd18fa2f7c7": [
        "def solution():\n    # Let the numbers on the hats be x, y, and z.\n    # Then we have the following system of equations:\n    # x + y = 22\n    # y + z = 11\n    # x + z = 17\n    # We can solve this by adding all three equations and dividing by 2 to find the sum of all numbers\n    # (x + y + z) / 2 = (22 + 11 + 17) / 2\n\n    total_sum = (22 + 11 + 17) // 2\n    # Now we can find the largest number by subtracting the smallest sum from the total sum\n    largest_number = total_sum - 11\n\n    return largest_number\n\nans = solution()"
    ],
    "0d15dac81380463388b2f48a1e5a4ac4": [
        "def solution():\n    distance_between_trees = 5\n    number_of_trees = 30\n    length_of_road = (number_of_trees - 1) * distance_between_trees\n    return length_of_road\n\nans = solution()"
    ],
    "29f0c1773b854d5b946e865190eba514": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    triangle = symbols('triangle')\n\n    equation = Eq(triangle * 6 + 12, 3 * 6 + 36)\n\n    solution = solve(equation, triangle)\n\n    return solution[0]\n\nans = solution()"
    ],
    "645960391d9a40f287074aea24d065e6": [
        "def solution():\n    result = 1.5\n    for i in range(3, 10):\n        result *= (1 + 1/i)\n    return result\n\nans = solution()"
    ],
    "5ba5f881a3d44e1588df5aa8c2d9b7be": [
        "def solution():\n    from sympy import isprime\n\n    count = 0\n    for prime in range(2, 20):\n        if isprime(prime) and isprime(prime + 6) and isprime(prime - 6):\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "e7597a502cf74421b35bb550a54a362d": [
        "def solution():\n    return 54 * 7\n\nans = solution()"
    ],
    "ec3693af136e4822b07b647b190d64ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    # Distance covered in first 30 minutes: 0.5*x miles\n    # Distance covered in second 30 minutes: 0.5*(x-20) miles\n    # Distance covered in last 30 minutes: 0.5*(x+10) miles\n    # Total distance: 0.5*x + 0.5*(x-20) + 0.5*(x+10) = 70 miles\n\n    equation = Eq(0.5*x + 0.5*(x-20) + 0.5*(x+10), 70)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3bd18c4e21064eeda7d67edd78bf418c": [
        "def solution():\n    # Assuming that page numbers are consecutively numbered starting from 1\n    total_digits = 0\n    \n    # Pages from 1 to 9: 9 pages with 1 digit each\n    total_digits += 9 * 1\n    \n    # Pages from 10 to 99: 90 pages with 2 digits each\n    total_digits += 90 * 2\n    \n    # Pages from 100 to 345: 246 pages with 3 digits each\n    total_digits += (345 - 99) * 3\n    \n    return total_digits\n\nans = solution()"
    ],
    "76403d5e9dca4ff6b2fc3602bef45a7e": [
        "def solution():\n    total_people = 340 + 20\n    max_people_per_bus = 25\n    number_of_buses = -(-total_people // max_people_per_bus)  # Ceiling division\n    return number_of_buses\n\nans = solution()"
    ],
    "7992bad8c26d42e1b736d8fab12944f1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_prize = symbols('total_prize')\n    \n    equation = Eq((1/5 + 1/15) * total_prize, 360)\n    solved = solve(equation, total_prize)\n    \n    return solved[0]\n\nans = solution()"
    ],
    "46bce6274909462595b7cd5d528fd678": [
        "def solution():\n    from math import factorial\n\n    # There are 5 players left to arrange on either side of the coach\n    ways_to_arrange_players = factorial(5)\n    \n    # The captain can stand on either the left or right side of the coach\n    ways_to_place_captain = 2\n    \n    # Using the multiplication principle\n    total_ways = ways_to_arrange_players * ways_to_place_captain\n    \n    return total_ways\n\nans = solution()"
    ],
    "89aaad0e5929492ebd91a881ccbdcd20": [
        "def solution():\n    # Let the side length of the square formed by boys be 2n (a even number ensures the center is a girl),\n    # then the number of boys is (2n)^2, and the number of girls is (2n-1)^2 (making a smaller square).\n    # According to the question, there are 20 more boys than girls, so the equation is (2n)^2 - (2n-1)^2 = 20.\n    n = 1\n    while True:\n        boys = (2 * n) ** 2\n        girls = (2 * n - 1) ** 2\n        if boys - girls == 20:\n            break\n        n += 1\n\n    # The total number of students is the boys plus the girls.\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "45bfd7efccc8407995a20fc0424601ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    penguins, fish = symbols('penguins fish')\n\n    # Equations based on the problem statement\n    equation1 = Eq(fish - (3 * penguins), 25)\n    equation2 = Eq(fish, (6 * (penguins - 1)) + 1)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (penguins, fish))\n\n    # Return the total number of penguins\n    return solutions[penguins]\n\nans = solution()"
    ],
    "21ac3377e3e04f7095b5e98b24de2cf5": [
        "def solution():\n    cube_root = (-0.512) ** (1/3)\n    square = (-1.2) ** 2\n    ans = cube_root + square\n    return ans\n\nans = solution()"
    ],
    "185585248b784d759d3d8f88fb2bb399": [
        "def solution():\n    sum_terms = 0\n    current_number = 1\n    count = 0\n    for i in range(1, 31):\n        sum_terms += current_number\n        count += 1\n        if count == current_number:\n            current_number += 1\n            count = 0\n    return sum_terms\n\nans = solution()"
    ],
    "963c4317b46e4ab89cf2305881120383": [
        "def solution():\n    ans = (25/100) * 20 + (1/5) * 30 + (2/3) * 18\n    return ans\n\nans = solution()"
    ],
    "c7fe09cca9884a74bd0f46ebfe209d6e": [
        "def solution():\n    for a in range(10):\n        number = int(f\"1{a}7731\")\n        if number % 11 == 0:\n            return a\n\nans = solution()"
    ],
    "1cdbbd42038c4d25a4e3858e94b44f02": [
        "def solution():\n    votes_needed = max(31, 41) + 1 - 47\n    return votes_needed\n\nans = solution()"
    ],
    "14374f60574642deb9cb3cb4947ba4d5": [
        "def solution():\n    # Calculating the first fraction\n    numerator1 = 7 / -3.333333333333  # since -3.33... is -10/3\n    denominator1 = (-0.027)**(1/3)  # cube root of -0.027 is -0.3\n    fraction1 = numerator1 / denominator1\n\n    # Calculating the second fraction\n    numerator2 = 2**3 / 4**2  # 8 / 16\n    denominator2 = 0.125 * (1.8 - (0.2 * 7))  # 0.125 * (1.8 - 1.4)\n    fraction2 = numerator2 / denominator2\n\n    # Calculating the third part within brackets\n    numerator3 = 0.1\n    denominator3 = 1/7  # 0.142857 is the decimal representation of 1/7\n    fraction3 = numerator3 / denominator3\n\n    # Final expression\n    ans = fraction1 + fraction2 - (fraction3 + (2 * 0.3))\n    \n    return ans\n\nans = solution()"
    ],
    "0f27bf9162ed4fbba2f119e08ed1cf48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, brian = symbols('chelsia brian')\n\n    equation1 = Eq(3/4 * chelsia, 5/6 * brian)\n    equation2 = Eq(chelsia - brian, 24)\n\n    solutions = solve((equation1, equation2), (chelsia, brian))\n\n    ans = solutions[chelsia] + solutions[brian]\n\n    return ans\n\nans = solution()"
    ],
    "477f4016e7a14d6cb1f6561d4b2f7cbc": [
        "def solution():\n    # Gina's age on 10th May 2005\n    gina_age_2005 = 50\n    # Year when Gina was 50\n    gina_year_2005 = 2005\n    \n    # James's age on 10th May 1997\n    james_age_1997 = 20\n    # Year when James was 20\n    james_year_1997 = 1997\n    \n    # Calculate James's birth year\n    james_birth_year = james_year_1997 - james_age_1997\n    \n    # Calculate how old Gina was when James was born\n    gina_age_when_james_born = gina_year_2005 - gina_age_2005 - (james_year_1997 - james_age_1997)\n    \n    return gina_age_when_james_born\n\nans = solution()"
    ],
    "9e011e38eb9e41da9b82d8e1b79479a9": [
        "def solution():\n    from sympy import symbols, solve\n\n    # commission for the first $25000\n    commission_rate_1 = 0.02\n    # commission for the sales above $25000\n    commission_rate_2 = 0.05\n    # base salary\n    base_salary = 2500\n    # total salary for July\n    total_salary = 3300\n\n    # sales variable to solve for\n    sales = symbols('sales')\n\n    # If sales are $25000 or less\n    total_salary_eq_1 = base_salary + commission_rate_1 * sales\n\n    # If sales are more than $25000\n    sales_over_25000 = sales - 25000\n    total_salary_eq_2 = base_salary + commission_rate_1 * 25000 + commission_rate_2 * sales_over_25000\n\n    # Solve for sales\n    sales_eq_1_solution = solve(total_salary_eq_1 - total_salary, sales)\n    sales_eq_2_solution = solve(total_salary_eq_2 - total_salary, sales)\n\n    # Check for the valid solution\n    if sales_eq_1_solution[0] > 0 and sales_eq_1_solution[0] <= 25000:\n        return sales_eq_1_solution[0]\n    else:\n        return sales_eq_2_solution[0]\n\nans = solution()"
    ],
    "02c0f5596e944b52b450f57444a52432": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r be the number of marbles Ryan had at first\n    # Let a be the number of marbles Audrey had at first\n    r, a = symbols('r a')\n\n    # Create two equations based on the information given\n    initial_ratio = Eq(r/a, 2/7)\n    new_ratio = Eq((r + 20)/(a - 80), 1/3)\n\n    # Solve the system of equations\n    solutions = solve((initial_ratio, new_ratio), (r, a))\n\n    return solutions[a]\n\nans = solution()"
    ],
    "e491c5ac6e9343c7ba3274532283f9c9": [
        "def solution():\n    total_height_of_six = 6 * 150  # The total height of the six players\n    average_height_of_four = 150 - 2  # The average height of four of them\n    total_height_of_four = 4 * average_height_of_four  # The total height of the four players\n    \n    total_height_of_other_two = total_height_of_six - total_height_of_four  # The total height of the other two players\n    average_height_of_other_two = total_height_of_other_two / 2  # The average height of the other two players\n    \n    return average_height_of_other_two\n\nans = solution()"
    ],
    "bfde156ecaa4455aabd96e9c177c7723": [
        "def solution():\n    ways_A_to_B = 2\n    ways_B_to_C = 3\n    total_ways = ways_A_to_B * ways_B_to_C\n    return total_ways\n\nans = solution()"
    ],
    "e928057276ba4f80816203d0efad0161": [
        "def solution():\n    digits = 1014\n    total_pages = 0\n    page = 1\n    while digits > 0:\n        if page < 10:                         # 1-9 need 1 digit each\n            digits -= 1\n        elif page < 100:                      # 10-99 need 2 digits each\n            digits -= 2\n        elif page < 1000:                     # 100-999 need 3 digits each\n            digits -= 3\n        else:                                 # 1000+ need 4 digits each\n            digits -= 4\n        if digits >= 0:\n            total_pages += 1\n        page += 1\n    return total_pages\n\nans = solution()"
    ],
    "4e41a656965248ecb27c18b15b949af4": [
        "def solution():\n    from math import factorial\n\n    n = factorial(15)\n    ans = 0\n    \n    while n % 10 == 0:\n        ans += 1\n        n //= 10\n    \n    return ans\n\nans = solution()"
    ],
    "601f7cda15454bc985fa1ee54ba442cd": [
        "def solution():\n    ways_A_to_B = 2\n    ways_B_to_C = 3\n    total_ways = ways_A_to_B * ways_B_to_C\n    return total_ways\n\nans = solution()"
    ],
    "25f54cb721264bd5a88945dcae9a35da": [
        "def solution():\n    first_term = 50\n    common_difference = -1\n    number_of_terms = 30\n\n    last_term = first_term + (number_of_terms - 1) * common_difference\n    sum_of_series = (number_of_terms / 2) * (first_term + last_term)\n\n    return int(sum_of_series)\n\nans = solution()"
    ],
    "9dd71278e1224d6aae7ee3729d3d4491": [
        "def solution():\n    total_pieces = 450\n    pieces_per_hour = 50\n\n    hours_needed = total_pieces / pieces_per_hour\n\n    return hours_needed\n\nans = solution()"
    ],
    "9f1e95f7b0c743fc8509bf8504dcf8e6": [
        "def solution():\n    factorial = 1\n    for i in range(1, 16):\n        factorial *= i\n        \n    count_zeros = 0\n    while factorial % 10 == 0:\n        count_zeros += 1\n        factorial //= 10\n    \n    return count_zeros\n\nans = solution()"
    ],
    "7dfcb604b94540d68268987c685cf44e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    age = symbols('age')\n    equation = Eq((age / 4) + 32, age - 22)\n    solution = solve(equation, age)\n\n    return solution[0]\n\nans = solution()"
    ],
    "1c335261c4c74c9da70e62d9e80c84f7": [
        "def solution():\n    boys_more_than_girls = 44\n    total_students = 0\n    side_length = 1  # Start with the smallest square size possible\n\n    while True:\n        boys = side_length**2 - (side_length - 2)**2 if side_length > 1 else 1\n        girls = (side_length - 2)**2 - (side_length - 4)**2 if side_length > 3 else 0\n        if boys - girls == boys_more_than_girls:\n            total_students = side_length**2\n            break\n        side_length += 2  # Increase the side length, always odd for the next square with boys on the outside\n\n    return total_students\n\nans = solution()"
    ],
    "949b4d4e3965458786c3c12e4175a6f5": [
        "def solution():\n    total_height = 18\n    climb_up = 7\n    climb_up_on_sixth_day = 3\n    total_day_climb = (5 * climb_up) + climb_up_on_sixth_day  # Total climbed in 6 days\n    remaining_height = total_height - total_day_climb\n    slide_down = climb_up - remaining_height  # How much it slides down in night after the 6th day\n\n    return slide_down\n\nans = solution()"
    ],
    "170205b36dfc4146a66fb3af25081782": [
        "def solution():\n    # The second student can't get more apples than half of the total,\n    # because there are two students who get less than the second student\n    # and at least 1 apple each. So the max he can get is 48 // 2 - 2.\n    max_apples_for_second_student = 48 // 2 - 2\n    return max_apples_for_second_student\n\nans = solution()"
    ],
    "0d196763e09c414685c93b6925e1fabd": [
        "def solution():\n    # Time taken by each person to cross the river\n    min_time = {\n        'Eddie': 1,\n        'Jack': 2,\n        'Rose': 5,\n        'Mary': 10\n    }\n    \n    # Shortest strategy to cross the river:\n    # Step 1: Eddie and Jack cross -> 2 minutes\n    # Step 2: Eddie goes back -> 1 minute\n    # Step 3: Rose and Mary cross -> 10 minutes\n    # Step 4: Jack goes back -> 2 minutes\n    # Step 5: Eddie and Jack cross again -> 2 minutes\n    # Total time = 2 + 1 + 10 + 2 + 2 = 17 minutes\n    total_time = min_time['Jack'] + min_time['Eddie'] + min_time['Mary'] + min_time['Jack'] + min_time['Jack']\n    \n    return total_time\n\nans = solution()"
    ],
    "e0acffb17f4e422ab27995621048da00": [
        "def solution():\n    ans = 641 + 283\n    return ans\n\nans = solution()"
    ],
    "a395940e0e844a3e82a13464bbacb552": [
        "def solution():\n    ans = 0\n    for i in range(1, 90, 2):\n        ans += i**2 - (i+1)**2\n    return ans\n\nans = solution()"
    ],
    "f059162501fb4a40bea57cfdd90f953a": [
        "def solution():\n    number = 2**19 - 1\n    remainder = number % 5\n    return remainder\n\nans = solution()"
    ],
    "70a8c903a8c54590bc01cc6b20324389": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the original length and width of the rectangle as l and w\n    l, w = symbols('l w')\n    \n    # If you increase the length of a rectangle (l) by 12 cm, you get a rectangle\n    # with a perimeter (2l + 2w) of 38 cm. Therefore, the equation is:\n    # 2(l + 12) + 2w = 38\n    equation1 = Eq(2 * (l + 12) + 2 * w, 38)\n    \n    # However, we have one equation and two unknowns. Since only the length was increased\n    # and we need to find the original perimeter, we can denote the original perimeter as P:\n    # P = 2l + 2w\n    # We can substitute the expression for w from P to the increased length perimeter equation.\n    # Let P be the original perimeter, which we are trying to calculate.\n    \n    # Solving for w from equation P\n    w_from_P = (symbols('P') - 2 * l) / 2\n    \n    # Now substitute w in equation1\n    equation1_sub = equation1.subs(w, w_from_P)\n    \n    # Solving for l\n    l_value = solve(equation1_sub, l)\n    \n    # There could be two solutions for l (positive and negative), we'll consider the positive one\n    l_value = [val for val in l_value if val > 0][0]\n    \n    # Now we find the width w using the found length value\n    w_value = w_from_P.subs(l, l_value)\n    \n    # Finally, we calculate the original perimeter with the found l_value and w_value\n    P = 2 * l_value + 2 * w_value\n    \n    return int(P)\n\nans = solution()"
    ],
    "0a442caa186a4d35a9cda613970fe659": [
        "def solution():\n    for num in range(30, 41):\n        if num % 3 == 1 and num % 4 == 1:\n            return num\n\nans = solution()"
    ],
    "cc80ec556420466ca6feeb07d774bc7f": [
        "def solution():\n    import math\n    num_students = 4\n    ways_to_line_up = math.factorial(num_students)\n    return ways_to_line_up\n\nans = solution()"
    ],
    "20d9cd46576c4f6b873a928db5bdaa21": [
        "def solution():\n    # Jenny has three choices of food: chocolate (C), peaches (P), and strawberries (S)\n    # For Day 1, she eats chocolate, so there are no other options for this day\n    \n\n    # Calculate the permutations for Day 2 and Day 3 based on Day 1's choice\n    # For Day 2, Jenny can either eat peaches or strawberries (2 options)\n    # For Day 3, Jenny cannot eat what she had on Day 2, so she only has 1 option left\n    ways_for_three_days = 2 * 1  # Two options for Day 2 and one option for Day 3\n\n    return ways_for_three_days\n\nans = solution()"
    ],
    "91f9ed36f52f4c4d90e9a09c340e6eda": [
        "def solution():\n    return (8 - 1) // 2\n\nans = solution()"
    ],
    "e247134ebc8e4290ab2c3cd47fbdb2bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    salary = symbols('salary')\n    money_spent_on_television = 5/9 * salary\n    remainder = salary - money_spent_on_television\n    money_spent_on_table = 3/4 * remainder\n    money_left = salary - money_spent_on_television - money_spent_on_table\n\n    equation = Eq(money_left, 160)\n    salary_solution = solve(equation, salary)\n    \n    television_cost = 5/9 * salary_solution[0]\n    \n    return float(television_cost)\n\nans = solution()"
    ],
    "31bc73a765324ee2aad5b0ab3902429e": [
        "def solution():\n    from math import factorial\n\n    # Number of ways to arrange 7 people around a table\n    # disregarding rotations is (n-1)! for n people.\n    ans = factorial(6)\n\n    return ans\n\nans = solution()"
    ],
    "9aeb348fb18f40a0a779246f193ec03e": [
        "def solution():\n    numerator = 50\n    denominator = 5/3\n    \n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "d7af08f16a30475cbed750f87127cc91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, emma = symbols('john emma')\n\n    future_sum = Eq(john + emma + 3*2, 27)  # both age by 3 years, so we add 3 to both John and Emma's current age\n    emma_age_diff = Eq(emma, john - emma)\n\n    solution = solve((future_sum, emma_age_diff), (john, emma))\n\n    return solution[emma]\n\nans = solution()"
    ],
    "870fd125d6e84d51833e19966e6235aa": [
        "def solution():\n    average_earning_per_day = 70\n    number_of_working_days = 6\n\n    total_earnings = average_earning_per_day * number_of_working_days\n\n    return total_earnings\n\nans = solution()"
    ],
    "cdebf51b4d2f4676b84de41b5f4dfe1d": [
        "from math import comb\n\ndef solution():\n    return comb(15, 3)\n\nans = solution()"
    ],
    "ce3ae2eb22604f669d81413a11524dfe": [
        "def solution():\n    sheets_per_quire = 24\n    quires_per_ream = 20\n    reams = 2\n\n    sheets_per_ream = sheets_per_quire * quires_per_ream\n    total_sheets = sheets_per_ream * reams\n\n    return total_sheets\n\nans = solution()"
    ],
    "7df5d75f0cda456abe35ca8b128ad0bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(5*x - 4, 26)\n    \n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "adc18060457c42cd841d26c05a300d86": [
        "def solution():\n    # 36 degrees correspond to the 'Water' section on the pie chart.\n    water_degrees = 36\n    # Total degrees in a pie chart is 360.\n    total_degrees = 360\n    # Calculate the fraction of the pie chart that 'Water' represents.\n    water_fraction = water_degrees / total_degrees\n    # 'Water' is not tea (1/4), not coffee (7 people), and not cola (30%).\n    # Thus, it represents the remaining fraction of the survey.\n    remaining_fraction = 1 - 0.25 - 0.30\n    # The people who chose 'Water' make up the same fraction of the survey as the 'Water' section does of the pie.\n    # This means that the fraction of the survey that chose 'Water' is equal to the 'Water' fraction of the pie chart.\n    # So we can build the equation: water_fraction = remaining_fraction / total_people\n    \n    # total_people = remaining_fraction / water_fraction\n    total_people = remaining_fraction / water_fraction\n    # Since the number of people must be an integer, and we know there are 7 people who chose coffee,\n    # we round to the nearest whole number that makes sense in context (total people must be greater than 7).\n    total_people = round(total_people)\n\n    return total_people\n\nans = solution()"
    ],
    "209df8fae20d4538a1d8ebbf630188c1": [
        "def solution():\n    # Let x be the number of Jones children\n    # Since there are 3 times as many dogs as children, there are 3x dogs\n    # Each child has 2 legs and each dog has 4 legs\n    # The total number of legs is 56, so we have the equation:\n    # 2 * x (number of legs of children) + 4 * 3x (number of legs of dogs) = 56\n    # Simplify the equation to find x\n    # 2x + 12x = 56\n    # 14x = 56\n    # x = 56 / 14\n    x = 56 // 14  # Using integer division because the number of children must be an integer\n    \n    return x\n\nans = solution()"
    ],
    "85433448087948ff8792d3be336da4ba": [
        "def solution():\n    present_fraction = 3 / 5\n    present_pupils = 18\n    total_pupils = present_pupils / present_fraction\n\n    return int(total_pupils)\n\nans = solution()"
    ],
    "d052b96519684cd689b26d905e6932f3": [
        "def solution():\n    # Tom's speed in km/h\n    tom_speed = 48\n    # Jack's speed in km/h\n    jack_speed = 50\n    # Jack leaves 3 hours later than Tom\n    start_difference = 3\n    # The two cars are 15 km away from each other after 5 more hours\n    time_until_15_km_apart = 5\n\n    # Calculate the distance Tom has traveled after 3 hours\n    tom_distance_start = tom_speed * start_difference\n    # Calculate the total time they have both been traveling until they are 15 km apart\n    total_travel_time = start_difference + time_until_15_km_apart\n    # Now, calculate the distance Tom has traveled in the total travel time\n    tom_total_distance = tom_speed * total_travel_time\n\n    # Since they are 15 km apart after the total travel time, we calculate the distance Jack has traveled\n    jack_distance = tom_total_distance - 15  # because they are moving towards each other\n\n    # The time Jack has been traveling is equal to the time_until_15_km_apart\n    jack_travel_time = time_until_15_km_apart\n    # Verify if Jack's travel time and distance match with his speed\n    # If it doesn't, we need to account for the mismatch by figuring out the excess distance Tom has covered in the time Jack hasn't been traveling\n    if jack_speed * jack_travel_time != jack_distance:\n        # The difference in distance covered by Tom while Jack isn't traveling\n        excess_tom = tom_distance_start - jack_distance\n        # Adjust Jack's distance by adding the excess distance Tom has traveled\n        jack_distance += excess_tom\n\n    # Now, calculate the full distance between A and B\n    # It's the sum of distances traveled by Tom and Jack, plus the 15 km apart they are at that time\n    full_distance = tom_total_distance + jack_distance + 15\n    \n    return full_distance\n\nans = solution()"
    ],
    "48f752c3fb124d0eaef83bcc708662cc": [
        "def solution():\n    ans = (10 ** 5) / (5 ** 5)\n    return ans\n\nans = solution()"
    ],
    "11d9dfcd97f84a2b98dac9636f2ac079": [
        "def solution():\n    Z = 4 + 5\n    return Z\n\nans = solution()"
    ],
    "6bfc77576d4c4d8e990e203ed5df4a98": [
        "def solution():\n    return 5.2 + 6.7 + 4.8\n\nans = solution()"
    ],
    "1e0626005a234d7b9e16d436c68f0a46": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    saturday, sunday = symbols('saturday sunday')\n\n    equation1 = Eq(saturday, 4 * sunday - 5)\n    equation2 = Eq(saturday, sunday + 43)\n\n    solutions = solve((equation1, equation2), (saturday, sunday))\n\n    return solutions[saturday]\n\nans = solution()"
    ],
    "9838ab9595bb4b7698360b2187706163": [
        "def solution():\n    length = 50\n    width = 30\n    distance = 2\n\n    # Count trees on the longer sides (length), -1 because the corner will be counted in width\n    trees_on_length = (length // distance) * 2 - 2\n\n    # Count trees on the shorter sides (width), -1 because the corner will be counted in length\n    trees_on_width = (width // distance) * 2 - 2\n\n    # Total trees needed\n    total_trees = trees_on_length + trees_on_width\n\n    return total_trees\n\nans = solution()"
    ],
    "71a881110b784d499125ce0c2aeceff4": [
        "def solution():\n    height_in_meters = 1.36\n    height_in_cm = height_in_meters * 100\n    return height_in_cm\n\nans = solution()"
    ],
    "f22a2d40173242e9be3791a584a6bb8a": [
        "def solution():\n    income = 500\n    tax_rate = 0.03\n    tax = income * tax_rate\n    final_amount = income - tax\n    return final_amount\n\nans = solution()"
    ],
    "dc011b9713364f7faace482d69733c6e": [
        "def solution():\n    total_charge = 110\n    price_adult = 20\n    price_child = 15\n    count_children = 0\n    \n    # Since there are at least two adults, we start the count from two.\n    for adults in range(2, total_charge // price_adult + 1):\n        children = (total_charge - (price_adult * adults)) / price_child\n        if children.is_integer():\n            count_children = int(children)\n            break\n\n    return count_children\n\nans = solution()"
    ],
    "0dd96e7150034b49b6e5114888b623ed": [
        "def solution():\n    total_sweets = 15\n    people = 3\n\n    sweets_each = total_sweets // people\n\n    return sweets_each\n\nans = solution()"
    ],
    "7a18842efc724f239e5f1cad37485c40": [
        "def solution():\n    orange_squash = 750\n    total_ratio = 1 + 9\n    total_mixture = (orange_squash / 1) * total_ratio\n    bottle_capacity = 1000\n\n    full_bottles = total_mixture // bottle_capacity\n\n    return int(full_bottles)\n\nans = solution()"
    ],
    "79f81b8195b2409d9329430d172825a5": [
        "def solution():\n    result = (180 / (0.6 * 100))\n    return result\n\nans = solution()"
    ],
    "70e0934ac8904f528788ed9903ea3d65": [
        "def solution():\n    total_cost = 132\n    # Thomas' calculation assumes the wrong addition of fractions\n    # Correct calculation:\n    # She spent 1/3, hence 2/3 remains\n    # She then spends 1/2 of the remainder, hence 1/2 * 2/3 = 1/3 is the cost of the bag\n    # Therefore, 1/3 (book) + 1/3 (bag) equals 2/3 of her money is $132\n\n    # Calculate the value of 1 unit (1/3 of her money)\n    one_third = total_cost / 2  # Since 2/3 = $132, 1/3 = $132 / 2\n\n    # Total money Li Yan had initially (3 units)\n    initial_money = one_third * 3\n\n    return initial_money\n\nans = solution()"
    ],
    "285cd6c94bbe4f0097e4b2365352fffc": [
        "def solution():\n    for i in range(1, 10000): # Limit search to 4 digits as per the problem's context\n        original_number = i\n        number_with_9_at_end = original_number * 10 + 9\n        new_number_with_9_at_start = int('9' + str(original_number))\n        if new_number_with_9_at_start == 4 * number_with_9_at_end:\n            return original_number\n\nans = solution()"
    ],
    "5387ecceeb914413b67de510e2841de5": [
        "def solution():\n    base = 221\n    exponent = 2020\n    divisor = 7\n    \n    remainder = pow(base, exponent, divisor)\n\n    return remainder\n\nans = solution()"
    ],
    "526ef305508f433093616886e3aa2760": [
        "def solution():\n    # Calculate last two digits of 6^2015\n    last_two_digits_6_power = pow(6, 2015, 100)\n    \n    # Calculate last two digits of 2015 * 6\n    last_two_digits_product = (2015 * 6) % 100\n    \n    # Calculate last two digits of 2015^6\n    last_two_digits_2015_power = pow(2015, 6, 100)\n    \n    # Add all the last two digits and find the last two digits of the sum\n    ans = (last_two_digits_6_power + last_two_digits_product + last_two_digits_2015_power) % 100\n    return ans\n\nans = solution()"
    ],
    "dfcff5e4c31f43209c5c33c350232425": [
        "def solution():\n    return 736 + 4588\n\nans = solution()"
    ],
    "6e22fcfa859a4c8fbb3d505818fcf090": [
        "def solution():\n    for cookies in range(1, 90):\n        if cookies % 6 == 4 and (cookies + 5) % 7 == 0:\n            return cookies\n\nans = solution()"
    ],
    "629aa303c06d45f7aa5cf8fa6f9fed98": [
        "def solution():\n    # Given values of B and D\n    B = 2\n    D = 0\n\n    # Iterate over possible values of A, C, E and F, considering B = 2, D = 0\n    for A in range(10):\n        for C in range(10):\n            for E in range(1, 10):  # E cannot be 0 as it is the first digit of EFABCD\n                for F in range(10):\n                    if len(set([A, B, C, D, E, F])) == 6:  # Check if all digits are distinct\n                        ABCDEF = int(f\"{A}{B}{C}{D}{E}{F}\")\n                        EFABCD = int(f\"{E}{F}{A}{B}{C}{D}\")\n \n                        # Check the given condition\n                        if 5 * ABCDEF == 6 * EFABCD:\n                            # Return the value of \"FACE\"\n                            FACE = int(f\"{F}{A}{C}{E}\")\n                            return FACE\n    \n    return None  # If no solution is found\n\nans = solution()"
    ],
    "997806d0555f4e0b9f0c37e93f8a847d": [
        "def solution():\n    ans = 8234 - 909\n    return ans\n\nans = solution()"
    ],
    "cdd44981698d4cf1892f1b87d1ff7e7e": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n\n    ans = tens + tenths + hundredths\n\n    return ans\n\nans = solution()"
    ],
    "a977a5a877be459285ad29a00ee13491": [
        "def solution():\n    import math\n\n    # We know that the fifth factor is 8, so the number has to be at least 8 * 2 = 16.\n    # Loop through possible numbers starting from 16 and check how many factors they have.\n    number = 16\n    while True:\n        factors = set()\n        for i in range(1, int(math.sqrt(number)) + 1):\n            if number % i == 0:\n                factors.add(i)\n                factors.add(number // i)\n        if len(factors) == 8:\n            break\n        number += 1\n\n    return number\n\nans = solution()"
    ],
    "06a399e8df5e48ef97ce40b3d0ef5589": [
        "def solution():\n    original_price = 10\n    discount = 10 / 100\n    discount_amount = original_price * discount\n    final_price = original_price - discount_amount\n\n    return final_price\n\nans = solution()"
    ],
    "b76888b795364a3a97fa604d5a2de050": [
        "def solution():\n    jolene_position_from_front = 6\n    amy_position_from_back = 8\n\n    total_children = jolene_position_from_front + amy_position_from_back - 1\n    \n    return total_children\n\nans = solution()"
    ],
    "0b49d7a40bee40d08e1b699772470e6f": [
        "def solution():\n    total_distance = 40\n    jump_up = 5\n    slide_down = 3\n    effective_jump = (2 * jump_up) - slide_down\n    jumps = 0\n    current_distance = 0\n\n    while current_distance < total_distance:\n        jumps += 1\n        current_distance += jump_up\n        \n        # After every 2 jumps, it slides down\n        if jumps % 2 == 0:\n            current_distance -= slide_down\n\n        # Check if it reached the top\n        if current_distance >= total_distance:\n            break\n\n    return jumps\n\nans = solution()"
    ],
    "48809ae2c3da43959ae3c238acb60f7f": [
        "def solution():\n    ans = 78.2 - 31.45 + 5.24 - 2.3\n    return ans\n\nans = solution()"
    ],
    "d8a87667da5c4baebedd2e3f7026d5e2": [
        "def solution():\n    for num in range(1, 5*6*11):\n        if num % 5 == 1 and num % 6 == 2 and num % 11 == 9:\n            return num\n\nans = solution()"
    ],
    "f7fe017b34bc4119bfc266aeef3024e6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_cows, initial_goats, final_cows, final_goats = symbols('initial_cows initial_goats final_cows final_goats')\n\n    # Equations based on the problem description\n    equation1 = Eq(initial_cows / (initial_cows + initial_goats), 0.65)  # Initial percentage of cows\n    equation2 = Eq(final_cows, initial_cows + 240 * 0.65)  # The number of cows after adding 240 animals\n    equation3 = Eq(final_goats, 2 * initial_goats)  # The number of goats doubled\n    equation4 = Eq(final_cows + final_goats, initial_cows + initial_goats + 240)  # The total number after adding 240 animals\n    equation5 = Eq(final_cows / (final_cows + final_goats), 0.85)  # Final percentage of cows\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5),\n                      (initial_cows, initial_goats, final_cows, final_goats))\n\n    # Since we only need the number of goats\n    initial_goats_ans = solutions[initial_goats]\n\n    return initial_goats_ans\n\nans = solution()"
    ],
    "2b33ed6a37234a7f8cfa9077a2c039ba": [
        "def solution():\n    # Let x be the original number of cookies in the box.\n    # In the first month, James sold 1680 cookies and kept (x - 1680).\n\n    # In the second month, James sold 7/20 more than the first month.\n    # So the second month, James sold 1680 + 1680 * (7/20).\n    second_month_sold = 1680 + 1680 * (7/20)\n\n    # The number of cookies James kept decreased by 3/20 from the first month:\n    # So the second month, James kept (x - 1680) - (x - 1680) * (3/20).\n    second_month_kept = (x - 1680) - (x - 1680) * (3/20)\n\n    # The number of cookies James kept in the second month is the total number\n    # of cookies minus what he sold in the second month: x - second_month_sold.\n    # This should equal the cookies he kept in the first month minus the decrease,\n    # which is second_month_kept.\n\n    # Therefore, we can set up the equation:\n    # x - second_month_sold = second_month_kept\n\n    # And solve for x.\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x - second_month_sold, second_month_kept)\n\n    # Solving for x\n    solution = solve(equation, x)\n\n    # The solution is the number of cookies in the box initially\n    return solution[0]\n\nans = solution()"
    ],
    "5a602b75179642109bb3448633b148be": [
        "def solution():\n    side_length = 432\n    distance_apart = 4\n\n    # The total perimeter of the regular pentagon\n    perimeter = 5 * side_length\n\n    # Number of sunflowers that can be planted along the sides, excluding the corners\n    sunflowers_on_sides = (perimeter // distance_apart) - 5\n\n    # Adding the corner sunflowers back\n    total_sunflowers = sunflowers_on_sides + 5\n\n    return int(total_sunflowers)\n\nans = solution()"
    ],
    "d9935bb2a60f4b2a850a8a82e921285b": [
        "def solution():\n    ans = 253 * 160\n    return ans\n\nans = solution()"
    ],
    "22fbfe3347ba45c18a5ef712714e7ba8": [
        "def solution():\n    stamp_cost_pence = 46\n    pounds_to_pence = 300  # £3 = 300p\n    num_stamps = pounds_to_pence // stamp_cost_pence\n\n    return num_stamps\n\nans = solution()"
    ],
    "225309bd862241c69715705eee0b6ecb": [
        "def solution():\n    speed_usual = 45\n    speed_traffic = 30\n    delay_hours = 2\n    \n    distance = speed_traffic * (delay_hours + speed_usual / speed_traffic)\n    driving_hours_usual_speed = distance / speed_usual\n    \n    return driving_hours_usual_speed\n\nans = solution()"
    ],
    "0c9feee3629744129e6cf814a2834df3": [
        "def solution():\n    return 58 * 36\n\nans = solution()"
    ],
    "68fd1201ef784aef8db355b79934af59": [
        "def solution():\n    from math import factorial\n    \n    ans = factorial(100) // factorial(98)\n    return ans\n\nans = solution()"
    ],
    "c710249ff4704f1da8138f0e161fa751": [
        "def solution():\n    adventurers = 39\n    boat_capacity = 7\n    trip_time = 2 # one-way trip time\n    \n    # Total number of trips needed, accounting for the return of the boat, \n    # except the last trip where the boat does not need to return\n    trips = (adventurers // boat_capacity) * 2 - 1\n    \n    # If there are some adventurers left, we need one more trip for them\n    if adventurers % boat_capacity > 0:\n        trips += 1\n    \n    # Total time for all trips\n    total_time = trips * trip_time\n    \n    return total_time\n\nans = solution()"
    ],
    "abaffb07b2a34ab0ae3decd35f783b15": [
        "def solution():\n    for i in range(10):\n        number = int(f\"976{i}3\")\n        if number % 3 == 0:\n            return i\n\nans = solution()"
    ],
    "8080bf206efd47819bdd2a2adb6b5fd5": [
        "def solution():\n    from sympy import partitions\n\n    # subtract 1 to avoid counting the number itself as its own partition\n    return partitions(5) - 1\n\nans = solution()"
    ],
    "17a4a261e09e46b188ed0705441570df": [
        "def solution():\n    first = 3 % 3\n    second = 10 % 3\n    for _ in range(2, 1997):\n        next_int = (first + second) % 3\n        first = second\n        second = next_int\n    return second\n\nans = solution()"
    ],
    "ae54342caaed4120ac02a509fa3bcd4b": [
        "def solution():\n    numerator = (4.219**2) / (4 + 2/3 + 38/59)\n    denominator = 2.501**3\n    ans = round(numerator / denominator, 3)\n    return ans\n\nans = solution()"
    ],
    "d5ed58dcfd4f432cbd326fe91855c743": [
        "def solution():\n    sum_to_10 = sum(range(3, 11))    # Sum from 3 to 10\n    sum_to_3 = sum(range(3, 7))      # Sum from 6 down to 3\n    total_sum = sum_to_10 + sum_to_3 # Sum them both up for the final answer\n    return total_sum\n\nans = solution()"
    ],
    "e69cb84fa1d949ac908e9ed3436bc342": [
        "def solution():\n    # Amin's cookies are represented as 329.\n    # Amin baked 97 cookies less than Jessica, which means Jessica baked 329 + 97 cookies.\n    jessica_cookies = 329 + 97\n    # Jessica baked 58 more cookies than Mary, which means Mary baked jessica_cookies - 58 cookies.\n    mary_cookies = jessica_cookies - 58\n    return mary_cookies\n\nans = solution()"
    ],
    "22e39fcf09374deb821fcf3cbc39e4ff": [
        "def solution():\n    # Let blue shirts be x.\n    # Therefore, white shirts will be 6x.\n    # Total shirts sold = x (blue shirts) + 6x (white shirts) = 63\n    # Thus, 7x = 63\n    # Hence, x = 63/7 -> the number of blue shirts.\n    # The number of white shirts will be 6x.\n\n    blue_shirts = 63 / 7\n    white_shirts = 6 * blue_shirts\n\n    return int(white_shirts)\n\nans = solution()"
    ],
    "f96fd22abee24d948addde2c9760bc8c": [
        "def solution():\n    # Let x be the number of sweets Mr. Lim has\n    # Let y be the number of students\n    # We have two equations based on the problem statement:\n    # x + 26 = 6y (1) (6 sweets per student and short of 26 sweets)\n    # x + 5 = 5y  (2) (5 sweets per student and short of 5 sweets)\n\n    # Let's solve the two equations for x and y\n    from sympy import symbols, Eq, solve\n    x, y = symbols('x y')\n    equation1 = Eq(x + 26, 6*y)\n    equation2 = Eq(x + 5, 5*y)\n    solutions = solve((equation1, equation2), (x, y))\n\n    # We're looking for the number of sweets (x), not the number of students (y)\n    return solutions[x]\n\nans = solution()"
    ],
    "9676e5c5b2c94dcb884bf421cb85baac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blouse, dress = symbols('blouse dress')\n    \n    equation1 = Eq(blouse + dress, 41)\n    equation2 = Eq(4*blouse + 3*dress, 140)\n\n    solutions = solve((equation1, equation2), (blouse, dress))\n\n    return solutions[blouse]\n\nans = solution()"
    ],
    "f9cc7112db0e48c1af2b41cc821ce516": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let Leo's current age be L and his son's current age be S\n    L, S = symbols('L S')\n    \n    # From Leo's statement, when Leo was age S, his son was 4 years old.\n    # So the difference in their ages is S - 4\n    age_difference = S - 4\n    \n    # From his son's statement, when his son reaches age L, Leo will be 70 years old.\n    # At that point in time, the difference in their ages will still be the same.\n    # So when Leo is 70, his son will be 70 - age_difference.\n    # But at that time, his son's age will be L, so L = 70 - age_difference.\n    \n    equation = Eq(L, 70 - age_difference)\n    \n    # We can solve this system of equations to find the values of L and S\n    solutions = solve((equation), (L, S))\n    \n    return solutions[L]\n\nans = solution()"
    ],
    "c89438cf2e854b8b8d9e6b61f27fb988": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    years_later = symbols('years_later')\n    heidi_age = 8 + years_later\n    dad_age = 50 + years_later\n\n    equation = Eq(dad_age, 4 * heidi_age)\n\n    solutions = solve(equation, years_later)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "3334f8ae569c45baaf836319780cb315": [
        "def solution():\n    # Suppose the number of fruits on the middle two trees are x and x+1\n    # Then the sequence of the number of fruits on the 8 trees would be:\n    # x-3, x-2, x-1, x, x+1, x+2, x+3, x+4\n    \n    # Total fruits = sum of this sequence\n    total_fruits = (x - 3) + (x - 2) + (x - 1) + x + (x + 1) + (x + 2) + (x + 3) + (x + 4)\n    \n    # Simplify the expression, we have 8*x + 4 (since the constants -3-2-1+1+2+3+4 add up to 4)\n    # set that equal to 225\n    total_fruits = 8*x + 4\n    \n    # Thus, we need to solve 8*x + 4 = 225. Subtract 4 from both sides to get 8*x = 221\n    # Since 221 is not divisible by 8, x would not be an integer. Therefore, it's impossible to reach exactly 225 fruits\n    # with the given constraints as the sum of fruits must be a multiple of 8 plus 4 \n    # (since the total must divide evenly by 8 and have a remainder of 4).\n    return \"It's not possible because 225 is not a multiple of 8 plus 4.\"\n\nans = solution()"
    ],
    "e1a30b1c30584a4ea62ce04ddf2a119b": [
        "def solution():\n    words_per_minute = 48 / 6\n    words_in_9_minutes = words_per_minute * 9\n    return words_in_9_minutes\n\nans = solution()"
    ],
    "2ec36757265f4822937a114644d2af76": [
        "def solution():\n    ans = 554 + 479\n    return ans\n\nans = solution()"
    ],
    "3d6aad1e230e440c976aa9835888e9af": [
        "from math import factorial\n\ndef solution():\n    # We initially place the 3 dancing performances with 2 gaps in between them: D _ D _ D\n    # We need to place 4 singing performances in the 4 slots marked by X: X D X D X D X\n    # Essentially, there are 4 imaginable slots where the singing performances can take place.\n\n    # Calculate the number of ways we can arrange 4 singing performances in 4 slots\n    # It is equivalent to choosing 4 positions from 4 available ones, which is always 1 way since we have the exact amount of performances to fill the slots.\n    \n    singing_ways = factorial(4)\n\n    # Now, since we have 4 distinguishable slots for the singing, we merge them as single entities.\n    # The effective sequence we have to arrange is now 4 entities (merged singing slots and performances) and 3 dancing performances.\n    # Number of ways to arrange these entities is the factorial of the total number of entities (7 in this case).\n    total_performance_ways = factorial(7)\n\n    # Finally, we divide the total arrangements by the arrangements of the merged singing performances, to normalize the count (avoid overcount).\n    ways_to_arrange = total_performance_ways // singing_ways\n\n    return ways_to_arrange\n\nans = solution()"
    ],
    "85f65609913d484fa252445d1bb3a6eb": [
        "def solution():\n    # Count the number of factors of 5 in the product,\n    # since each zero at the end of the number is a result of 2 * 5, and\n    # there are more factors of 2 than 5.\n    count_fives = 0\n    for i in range(1, 61):\n        while i % 5 == 0:\n            count_fives += 1\n            i /= 5\n    return count_fives\n\nans = solution()"
    ],
    "ae68a40584044249b59fcd754b0a9ab9": [
        "def solution():\n    # Calculate the sum of the initial three numbers using the first average\n    sum_of_three = 3 * 120\n    \n    # Calculate the sum of all four numbers using the second average\n    sum_of_four = 4 * 150\n    \n    # Find the fourth number by subtracting the sum of the first three from the sum of all four\n    fourth_number = sum_of_four - sum_of_three\n    \n    return fourth_number\n\nans = solution()"
    ],
    "062ee4a4b00f4be6ab03b9ae62d86a14": [
        "def solution():\n    ans = (11 * 14 + 26) / 15\n    return ans\n\nans = solution()"
    ],
    "250bdd97084e4457a18b42026735d9a3": [
        "def solution():\n    r = 1  # Start with the smallest positive integer\n    while True:\n        if (216 * r) ** 0.5 == int((216 * r) ** 0.5):\n            return r\n        else:\n            r += 1\n\nans = solution()"
    ],
    "d8532843d2c7486ea637674a0198cac2": [
        "def solution():\n    y = 4 * 10.5\n    return y\n\nans = solution()"
    ],
    "27766b651a1f4d2aae49cf67f35c42d8": [
        "def solution():\n    result = (3/13) * 52\n    return result\n\nans = solution()"
    ],
    "971a39bdec6540cb9d485a6ec1047a5a": [
        "def solution():\n    original_price = 18.60\n    discount = 0.15\n    discounted_price = original_price * (1 - discount)\n\n    return discounted_price\n\nans = solution()"
    ],
    "f44b5a2d15354af582ad35749d438ad3": [
        "def solution():\n    return 20 + 519\n\nans = solution()"
    ],
    "3f9379f05667462b83ddc4ad0c015e2a": [
        "def solution():\n    quotient = 15\n    remainder = 6\n    # Dividend = Divisor * Quotient + Remainder\n    # To find the smallest possible dividend, we find the smallest divisor\n    # that is greater than the remainder since the remainder must be smaller\n    # than the divisor in a proper division.\n    smallest_divisor = remainder + 1\n    dividend = smallest_divisor * quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "f4c9a4282e1345c9bbca6c475b472737": [
        "def solution():\n    # The snail climbs a net distance of 5 meters each day except for the last day.\n    net_distance_per_day = 8 - 3\n    \n    # On the 9th day, the snail climbs out of the well without sliding back, so we\n    # should not subtract the 3 meters on the 9th day.\n    # Thus, we calculate the total distance climbed in the first 8 days.\n    total_distance_8_days = net_distance_per_day * (9 - 1)\n    \n    # After 8 days, the snail has climbed 40m (since 5m * 8 days = 40m).\n    # On the 9th day, it climbs the remaining distance, which is 8m.\n    last_day_climb = 8\n    \n    # Depth of the well is the distance climbed in 8 days plus the climb on the 9th day\n    well_depth = total_distance_8_days + last_day_climb\n    \n    # Check if Zach's answer (45m) matches the calculated well depth\n    zach_correct = well_depth == 45\n    \n    return (zach_correct, well_depth)\n\nans = solution()"
    ],
    "75754b6444eb4ac999eea02d4c15c1ae": [
        "def solution():\n    return 285 // 3\n\nans = solution()"
    ],
    "cb198c5105554691b5c2769bc9702902": [
        "def solution():\n    total_teachers = 100\n    french_teachers = 75\n    japanese_teachers = 45\n\n    both_languages = french_teachers + japanese_teachers - total_teachers\n    only_french = french_teachers - both_languages\n\n    return only_french\n\nans = solution()"
    ],
    "3299707a36e74108be6c90e585878b40": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sweets, drinks = symbols('sweets drinks')\n\n    equation1 = Eq(3 * sweets + 5 * drinks, 490)\n    equation2 = Eq(sweets + 3 * drinks, 270)\n\n    solutions = solve((equation1, equation2), (sweets, drinks))\n\n    return solutions[sweets]\n\nans = solution()"
    ],
    "09e133cd62e94b3a83040c4a18ba31d0": [
        "def solution():\n    from math import factorial\n    total_ways = factorial(6)          # Total ways to arrange 6 people\n    teddy_first_ways = factorial(5)    # Ways to arrange the other 5 if Teddy is first\n    return total_ways - teddy_first_ways\n\nans = solution()"
    ],
    "a408d24a473b41c1b69fdd5572d7b292": [
        "def solution():\n    ans = 16.4 / 20\n    return ans\n\nans = solution()"
    ],
    "3121bf5cbc854fd786bb1b4d2885b8ee": [
        "def solution():\n    first_term = 50\n    difference = -4\n    num_terms = 0\n\n    while first_term > 0:\n        first_term += difference\n        num_terms += 1\n\n    return num_terms\n\nans = solution()"
    ],
    "86c640d251b04743a791ed72e6ef1406": [
        "def solution():\n    total_pence = 963\n    fraction = 4 / 9\n\n    result = total_pence * fraction\n\n    return int(result)\n\nans = solution()"
    ],
    "12bb2874238a47da87ffaed7ea879f56": [
        "def solution():\n    count = 0\n    for i in range(10, 100):  # 2-digit numbers start at 10 and end at 99\n        if (i // 10 + i % 10) % 7 == 0:  # Check if the sum of digits is a multiple of 7\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0e485f9ad3f7447285e70845caf1d116": [
        "def solution():\n    # Let the first number of the sequence be x\n    # Then, the seven consecutive numbers can be represented as:\n    # x, x+1, x+2, x+3, x+4, x+5, x+6\n    # The sum of these seven numbers is:\n    # 7x + 21 = 280\n    # Solving for x we get:\n    x = (280 - 21) // 7\n    # The largest of the seven numbers is x+6\n    largest_number = x + 6\n    return largest_number\n\nans = solution()"
    ],
    "0b8f50cdd3c44951b15c9241a332716f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(david, 2 * bentley)\n    equation3 = Eq(david + bentley + triston, 408)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[triston]\n\nans = solution()"
    ],
    "4ebd96f87e564c70a9f67b3e4a10d85d": [
        "def solution():\n    ans = (1000**2 - 990**2) + (980**2 - 970**2) + (20**2 - 10**2)\n    return ans\n\nans = solution()"
    ],
    "e288e678bbb249bcaab6d53963001d88": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')  # Let x be the bigger number and y be the smaller number\n    equation1 = Eq(x + y, 49)\n    equation2 = Eq(x - y, 9)\n    \n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "b654f11047ce401a8e2731b60cbe351b": [
        "def solution():\n    return sum(range(1, 10))\n\nans = solution()"
    ],
    "ae782a917c0e49dd8aa4c9143b7f6498": [
        "def solution():\n    ans = sum((-1)**(i+1) * (22 - 2*i) for i in range(1, 11))\n    return ans\n\nans = solution()"
    ],
    "d2cd4a56ec964afaadc7c52c40a6299e": [
        "def solution():\n    max_sum = 0\n    for num1 in range(100, 1000):\n        if num1 % 75 == 0:\n            for num2 in range(num1+1, 1000):\n                if num2 % 75 == 0:\n                    if len(set(str(num1))) < 3 and len(set(str(num2))) < 3:\n                        a_digits = set(str(num1))\n                        b_digits = set(str(num2))\n                        intersect = a_digits & b_digits\n                        if intersect and len(intersect) == 1 and len(a_digits) < 3 and len(b_digits) < 3:\n                            pair_sum = num1 + num2\n                            if pair_sum > max_sum:\n                                max_sum = pair_sum\n\n    return max_sum\n\nans = solution()"
    ],
    "48223bc38999457a8ca5cb8944280073": [
        "def solution():\n    # The provided formula is 1²+2²+3²+......+n²=1/6n(n+1)(n+2) but it is not directly applicable here\n    # We need to analyze the series to find the underlying pattern\n    # Pattern analysis shows that each term is of the form n^3 + n^2 where n starts at 2\n    # 8 = 2^3 + 2^2, 32 = 3^3 + 3^2, 72 = 4^3 + 4^2 and so on.\n\n    # Initialize sum\n    total_sum = 0\n\n    # Loop through the terms of the series with the observed pattern\n    for n in range(2, 10): # n from 2 to 9 because the last number in the sequence is 648 which is 9^3 + 9^2\n        term = n**3 + n**2\n        total_sum += term\n\n    return total_sum\n\nans = solution()"
    ],
    "e7473cbabe36456fb728cd45b22d0cc7": [
        "def solution():\n    moves = [5, 5, 3, 6, 2, 6, 1, 4]\n    position = 0\n    skip = False\n\n    for move in moves:\n        if skip:\n            position -= move\n            skip = False\n        elif move == 6:\n            skip = True\n        else:\n            position += move\n\n    ans = position\n    return ans\n\nans = solution()"
    ],
    "5bad72a578f940cf8c6627f29fcbdfde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    angel, yiyang, kayla = symbols('angel yiyang kayla')\n    \n    equation1 = Eq(angel + yiyang, 92.20)\n    equation2 = Eq(angel + kayla, 28.20)\n    equation3 = Eq(yiyang, 5 * kayla)\n\n    solutions = solve((equation1, equation2, equation3), (angel, yiyang, kayla))\n\n    return solutions[angel]\n\nans = solution()"
    ],
    "73662c89c90340368f0f31dbbb793bcb": [
        "def solution():\n    from math import factorial\n\n    # We have 5 magazines (M) and 5 storybooks (S).\n    # To ensure at least 1 magazine between storybooks, place the magazines first\n    # resulting in 6 slots (_ M _ M _ M _ M _ M _) where storybooks can be placed.\n    # We need to place 5 storybooks in these 6 slots.\n\n    # Number of ways to choose 5 slots from 6 for the storybooks\n    storybook_slots = factorial(6) // (factorial(5) * factorial(6 - 5))\n    \n    # Once the slots for storybooks are chosen,\n    # there are 5! ways to arrange the storybooks in those slots.\n    storybook_arrangements = factorial(5)\n    \n    # Also, there are 5! ways to arrange the magazines.\n    magazine_arrangements = factorial(5)\n    \n    # Total different ways\n    total_ways = storybook_slots * storybook_arrangements * magazine_arrangements\n    return total_ways\n\nans = solution()"
    ],
    "dc0379c31de248fd8d41c231a4b7bbe8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alex, brayden = symbols('alex brayden')\n\n    equation1 = Eq(alex + brayden, 756)\n    equation2 = Eq(alex - 65, 3 * (brayden + 65))\n\n    solutions = solve((equation1, equation2), (alex, brayden))\n\n    return solutions[brayden]\n\nans = solution()"
    ],
    "26fc18a2aa384355aa0db444268680d3": [
        "def solution():\n    for gums in range(1, 1000):  # assuming the number of fruit gums can't be too large\n        after_music = gums - 2\n        after_break = after_music - after_music/3\n        if after_break % 4 == 0:  # has to be divisible by 4 to eat an equal amount in 4 lessons\n            return gums\n\nans = solution()"
    ],
    "e5cbd5d784b64b1e90f8c8affb745d94": [
        "def solution():\n    kate = 13\n    james = 28\n    transfer = (james - kate) / 2\n    return transfer\n\nans = solution()"
    ],
    "d67cc9413a3540dda3185a84e88494ff": [
        "def solution():\n    result = 17.1 * 0.1\n    \n    return result\n\nans = solution()"
    ],
    "d2d70b19b95d4c2980b65eaa5b33a64f": [
        "def solution():\n    total_sum = 10 * 10\n    remaining_sum = 9 * 9\n    removed_number = total_sum - remaining_sum\n    return removed_number\n\nans = solution()"
    ],
    "c4239409e9834407bcd7d853669b16fc": [
        "def solution():\n    return 25 * 4 * 13\n\nans = solution()"
    ],
    "0910afd7c9174c95a8df8508d6e7179e": [
        "def solution():\n    speed_kmh = 3.6  # speed in kilometers per hour\n    speed_mps = speed_kmh * (1000 / 3600)  # convert speed to meters per second\n    time_seconds = 300  # time in seconds\n    distance_meters = speed_mps * time_seconds  # distance in meters\n    return distance_meters\n\nans = solution()"
    ],
    "7ed06d70e33c42a59176b296814f9641": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of money each sibling receives when shared equally\n    # y is the original sum of money\n    x, y = symbols('x y')\n    \n    # Equation when shared equally among all four siblings\n    equation1 = Eq(4 * x, y)\n    \n    # Equation when shared only among three brothers, each getting £20 more\n    equation2 = Eq(3 * (x + 20), y)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "54a4368e09b64fa4ae17d9fafb1cc1f0": [
        "def solution():\n    # The divisibility rule for 99 is that the number must be divisible by both 9 and 11.\n    # For divisibility by 9, the sum of the digits must be divisible by 9.\n    # For divisibility by 11, the difference between the sum of the digits at odd positions and \n    # the sum of the digits at even positions must be divisible by 11 or equal to 0.\n    \n    # For the number 42A28B, let's check the conditions step by step.\n    # The sum of the digits for divisibility by 9: 4 + 2 + A + 2 + 8 + B\n    \n    # The difference between the sum of odd position digits and even position digits for divisibility by 11:\n    # (4 + A + 8) - (2 + 2 + B) = (A + 12) - (B + 4) = A - B + 8\n    \n    # Now, we need to find A and B such that both conditions are satisfied.\n    for A in range(10):\n        for B in range(10):\n            if (4 + 2 + A + 2 + 8 + B) % 9 == 0 and (A - B + 8) % 11 == 0:\n                return A * 10 + B\n\nans = solution()"
    ],
    "fd1df5442cc54af194c050069058433f": [
        "def solution():\n    sum_of_series = sum([i for i in range(1, 22, 2)])**2\n    return sum_of_series\n\nans = solution()"
    ],
    "f396c06eee044d4c857925759f17b15d": [
        "def solution():\n    art_books = 360\n    science_books_fraction = 4/5\n    art_books_fraction = 1/3\n\n    science_books = (art_books / art_books_fraction) * science_books_fraction\n\n    return int(science_books)\n\nans = solution()"
    ],
    "41f505bb491242358551d509d2bc0f53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let k be the number of stickers Katelyn has and j be the number of stickers Jared has\n    k, j = symbols('k j')\n\n    # Set up the equations according to the given information\n    equation1 = Eq(j, k + 60)          # Jared has 60 more stickers than Katelyn\n    equation2 = Eq(k/j, 2/5)           # The ratio of Katelyn's stickers to Jared's stickers is 2:5\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (k, j))\n\n    # Calculate the total number of stickers\n    total_stickers = solutions[k] + solutions[j]\n\n    return total_stickers\n\nans = solution()"
    ],
    "63fc0ee320d54f81933be0988ed9fb3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let r be the number of red beads left, g be the number of green beads left,\n    # and b be the number of blue beads left.\n    r, g, b = symbols('r g b')\n    \n    # Set up the equations based on the problem statement\n    equation1 = Eq(r + g + b, 350)  # sum of remaining beads\n    equation2 = Eq(r, 2 * g)        # 2 times as many red beads as green beads\n    equation3 = Eq(b + 112, r + 50) # blue beads left were 50 fewer than the red beads left\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (r, g, b))\n    \n    # Calculate the initial number of blue beads\n    initial_blue_beads = solutions[b] + 112\n    \n    return initial_blue_beads\n\nans = solution()"
    ],
    "5fa816e5b446405587309db43ab19e8d": [
        "def solution():\n    # Since the average of some 4 of the 5 numbers is given, we can find the sum of those 4 numbers.\n    sums_of_four = [36 * 4, 38 * 4, 39 * 4, 45 * 4, 49 * 4]  # List of sums of four numbers based on the given averages.\n    total_sum_all_five = sum(sums_of_four)  # The sum of all four-lists-of-four-numbers, includes the largest number 5 times.\n    sum_of_four_smallest = total_sum_all_five - max(sums_of_four)  # Subtracting the max sum to get the sum of the four smallest numbers.\n    \n    # Now find the sum of the four largest numbers to find the total sum of the five distinct numbers.\n    sum_of_four_largest = total_sum_all_five - min(sums_of_four)  # Subtracting the min sum to get the sum of the four largest numbers.\n    \n    # The largest number can be find by subtracting the four smallest numbers from the sum of the five numbers\n    largest_number = sum_of_four_largest - sum_of_four_smallest\n\n    return largest_number\n\n\nans = solution()"
    ],
    "7b33b3e40e114514bc857beeadd0ef2e": [
        "def solution():\n    ans = 32 * 20 * 300\n    return ans\n\nans = solution()"
    ],
    "8e13d12e420d4c5ebcc4af6c803994d9": [
        "def solution():\n    initial_investment = 10000\n    rate_first_three_years = 1.05\n    rate_last_two_years = 1.10\n\n    # Calculate compound interest for the first three years\n    value_after_first_three_years = initial_investment * (rate_first_three_years ** 3)\n\n    # Calculate compound interest for the last two years\n    final_value = value_after_first_three_years * (rate_last_two_years ** 2)\n\n    # Round to the nearest tenth\n    return round(final_value, 1)\n\nans = solution()"
    ],
    "1aa1093f65fa4076aac242c4103891b2": [
        "def solution():\n    numbers = [870, 165, 448, 425, 3562]\n    rounded_numbers = [round(num, -2) for num in numbers]\n    total = sum(rounded_numbers)\n    return total\n\nans = solution()"
    ],
    "0589562cb3d8409e9ec3a0bb065f706f": [
        "def solution():\n    sausages = 16\n    people = 24\n    cuts = 0\n\n    while sausages < people:\n        sausages *= 2\n        cuts += 1\n\n    ans = cuts\n    return ans\n\nans = solution()"
    ],
    "7f47c8080f134d369478c048481bf15f": [
        "def solution():\n    from math import gcd\n    \n    textbooks_chinese = 42\n    textbooks_math = 63\n    textbooks_nature = 28\n\n    # Calculate the greatest common divisor (GCD) among the three numbers\n    gcd_two = gcd(textbooks_chinese, textbooks_math)\n    greatest_common_divisor = gcd(gcd_two, textbooks_nature)\n    \n    return greatest_common_divisor\n\nans = solution()"
    ],
    "3cb997a578814bb191020afbf8ceb5f8": [
        "def solution():\n    # Number of construction companies for the initial scenario\n    companies_initial = 4\n\n    # Length of expressway for the initial scenario in meters\n    length_initial = 900\n\n    # Days taken by initial number of companies to build the initial length of expressway\n    days_initial = 5\n\n    # Number of construction companies for the new scenario\n    companies_new = 1\n\n    # Length of expressway for the new scenario in meters\n    length_new = 2700\n\n    # Calculate the work done by one company in one day in the initial scenario\n    work_one_company_one_day = length_initial / (companies_initial * days_initial)\n\n    # Calculate the total work for the new scenario\n    total_work_new = length_new\n\n    # Calculate the days taken by one company to do the total work in the new scenario\n    days_new = total_work_new / (work_one_company_one_day * companies_new)\n\n    return days_new\n\nans = solution()"
    ],
    "d2ea6172a82640c28eb896db6bd6ed62": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    st_petersburg_time = datetime.strptime('12:00', '%H:%M')\n    flight_duration = timedelta(hours=3, minutes=25)  # typical duration of flight from Manchester to St. Petersburg\n    time_difference = timedelta(hours=3)  # St. Petersburg is 3 hours ahead of Manchester\n    departure_time = st_petersburg_time - flight_duration - time_difference\n    return departure_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "cf6a17fe82d4429d901a3cb109ff35af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for distance from the library to the school\n    distance = symbols('distance')\n\n    # Qiqi walks at 60 m/min, so her time spent walking is distance/60\n    # Weiling starts 2 minutes later and walks at 72 m/min\n    # Weiling arrives 4 minutes before Qiqi, so her time spent walking is distance/72 + 2 (for the delayed start) - 4 (as she arrives earlier)\n\n    # Since they both walked the same distance, set up the equation based on their times and solve for distance\n    equation = Eq(distance/60, distance/72 + 2 - 4)\n    solution = solve(equation, distance)\n\n    # Return the distance which is the solution of the equation\n    return solution[0]\n\nans = solution()"
    ],
    "68813ca3c24c42149ea862902169e0c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the work rates of Star and Nini as S and N respectively\n    star, nini = symbols('star nini')\n\n    # If Star works for 5 hours and Nini for 20 hours, they finish 1 job\n    eq1 = Eq(5*star + 20*nini, 1)\n    \n    # If Star works for 20 hours and Nini works for 8 hours, they finish 1 job\n    eq2 = Eq(20*star + 8*nini, 1)\n    \n    # Solve the system of equations to find the work rates of Star and Nini\n    rates = solve((eq1, eq2), (star, nini))\n    \n    # Work rate of Nini is the portion of the job she completes in 1 hour\n    nini_rate = rates[nini]\n\n    # Time taken for Nini to complete the job by herself is the reciprocal of her work rate\n    time_nini = 1 / nini_rate\n\n    return time_nini\n\nans = solution()"
    ],
    "81af17d8de7a46a788695ca8365b15ae": [
        "def solution():\n    kg_to_lbs = 2.2\n    kg = 5\n    lbs = kg * kg_to_lbs\n    return lbs\n\nans = solution()"
    ],
    "b7ec49fc670841a1b3ed283d59481312": [
        "def solution():\n    jane_height = 130  # Jane is 130 cm tall\n    difference = 45    # Jane is 45 cm taller than Ben\n\n    ben_height = jane_height - difference  # Calculate Ben's height\n\n    return ben_height\n\nans = solution()"
    ],
    "d252da6964f34cafb15841fcb98f9545": [
        "def solution():\n    ben_position_from_front = 6\n    frank_position_from_back = 9\n    people_between = 10\n\n    total_people = (ben_position_from_front - 1) + people_between + (frank_position_from_back - 1) + 1\n\n    return total_people\n\nans = solution()"
    ],
    "31bceb787e4e47be97073d7d8a8b3778": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    coffee_amount = 6  # liters\n\n    total_ratio = coffee_ratio + milk_ratio\n    latte_amount = (coffee_amount / coffee_ratio) * total_ratio\n\n    return latte_amount\n\nans = solution()"
    ],
    "486b088e81d74803b137ad63cc4007e3": [
        "def solution():\n    # Start searching for the smallest three-digit number\n    # satisfying both conditions: remainder 2 when divided by 8 and by 11\n    for num in range(100, 1000):\n        if num % 8 == 2 and num % 11 == 2:\n            return num\n\nans = solution()"
    ],
    "6f0ec90fdeac4893aaf890122d46e374": [
        "def solution():\n    sum = 0\n    for i in range(2, 33, 2):\n        sum += i * (-1) ** (i // 2)\n    return sum\n\nans = solution()"
    ],
    "717137e7208846a585af9fb90e9f65a3": [
        "def solution():\n    result = 72 / 100 * 140\n    return result\n\nans = solution()"
    ],
    "52ca3ae0b2e14097bf693e3c00c7fd95": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # x represents the total number of marbles in the jar\n    x = symbols('x')\n    \n    # Create the equation based on the problem statement\n    equation = Eq((2/5)*x + (1/3)*x + 96, x)\n    \n    # Solve for x\n    num_marbles = solve(equation, x)[0]\n    \n    return num_marbles\n\nans = solution()"
    ],
    "f4ac3e3adf8e48cd9836ded820e5f0cf": [
        "def solution():\n    final_amount = 870\n    interest_rate = 0.09\n    years = 5\n    \n    initial_deposit = final_amount / ((1 + interest_rate) ** years)\n    \n    return initial_deposit\n\nans = solution()"
    ],
    "456be3e7a4b1442f849f8976ad331a08": [
        "def solution():\n    # Number of companies originally\n    original_companies = 4\n    # Time taken by original number of companies to build the original length expressway\n    original_time = 5\n    # Length of the expressway originally planned to be built\n    original_length = 900\n    \n    # Length of the expressway now being planned to be built\n    new_length = 2700\n    # Number of companies now available\n    new_companies = 1\n    \n    # Work done is directly proportional to the number of companies and inversely proportional to the number of days\n    # (companies * days) / length = constant work rate\n    # We can use the work rates to find out the new time taken as follows:\n    # original_companies * original_time / original_length = new_companies * new_time / new_length\n    # Solving for new_time gives us the following:\n    new_time = (new_companies * original_time * original_length) / (original_companies * new_length)\n\n    return new_time\n\nans = solution()"
    ],
    "9418da19a88b4ab6ad37f24482a17de8": [
        "def solution():\n    sum = 0\n    for i in range(2015):\n        sum += int('1' * (i + 1))\n        sum %= 10000  # Keeping only last 4 digits\n    return sum\n\nans = solution()"
    ],
    "49451447b0b84c1aa576ca9cf57eb570": [
        "def solution():\n    count = 0\n    # Loop through all even three-digit numbers\n    for i in range(100, 1000, 2):\n        # Convert the number to a list of its digits\n        digits = list(map(int, str(i)))\n        # If the sum of the digits is 8, increase the count\n        if sum(digits) == 8:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "16bb2f8b73aa4a2f87ca69fbf8cc577c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    star_rate, nini_rate = symbols('star_rate nini_rate')\n    equation1 = Eq(5 * star_rate + 20 * nini_rate, 1)\n    equation2 = Eq(20 * star_rate + 8 * nini_rate, 1)\n\n    solutions = solve((equation1, equation2), (star_rate, nini_rate))\n\n    nini_time_to_finish = 1 / solutions[nini_rate]\n\n    return nini_time_to_finish\n\nans = solution()"
    ],
    "9b2f93ae65ff4b8cb762302908c1e9e9": [
        "def solution():\n    return 1/20\n\nans = solution()"
    ],
    "0b6fb29ca6e9447ca855d69db2282654": [
        "def solution():\n    # According to the pigeonhole principle, to ensure 2 marbles of the same color,\n    # we must consider the worst-case scenario.\n    # If we pick 1 blue and 1 yellow, we are not yet sure to have 2 of the same color.\n    # Therefore, we must pick at least one more marble.\n    # In the worst case, this third marble will be of the other color which doesn't match the previous two.\n    # To be certain, we must pick one more marble (the fourth one),\n    # which will then guarantee two marbles of the same color.\n    # That's because in the worst case, we will have 2 blue and 2 yellow marbles at the fourth draw.\n    return 4\n\nans = solution()"
    ],
    "23708dd0135542c9a0397bac3cf7df9e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 4), (3, 5), (3, 11)]\n    num, _ = solve_congruence(*congruences)\n\n    return num\n\nans = solution()"
    ],
    "d605a3d05bcc43148562bbdb79db1c71": [
        "def solution():\n    # Calculate the unit digit of each part separately\n    # Unit digit of powers of 13 cycle every 4: 3, 9, 7, 1\n    unit_digit_13 = pow(13, 242, 10)\n    \n    # Unit digit of powers of 17 cycle every 4: 7, 9, 3, 1\n    unit_digit_17 = pow(17, 379, 10)\n    \n    # Unit digit of powers of 4 cycle every 2: 4, 6\n    # Since 2012 is even, unit digit of 4^2012 is 6\n    unit_digit_4_power = pow(4, 2012, 10)\n    \n    # Multiply unit digits of 17^379 and 4^2012\n    multiplicative_unit_digit = (unit_digit_17 * unit_digit_4_power) % 10\n    \n    # Add unit digits to find the final unit digit\n    unit_digit_result = (unit_digit_13 + multiplicative_unit_digit) % 10\n    \n    return unit_digit_result\n\nans = solution()"
    ],
    "2f5f5ef83c574d589866d40947993237": [
        "def solution():\n    ans = sum((-1)**(i % 2) * (34 - i * 2) for i in range(16))\n    return ans\n\nans = solution()"
    ],
    "d378edcf9ef64254a7f97387b00ae18b": [
        "def solution():\n    for mary_age in range(1, 44):  # Reduced upper bound knowing that 44*45 > 2019\n        john_age = mary_age + 1\n        if john_age * mary_age >= 2019:\n            break\n        for child1_age in range(1, 20):  # Reduced upper bound considering age differences and product < 2019\n            for diff in range(1, 20):  # Age difference between children\n                child2_age = child1_age + diff\n                child3_age = child2_age + diff\n                # This year's products\n                parents_product_current = john_age * mary_age\n                children_product_current = child1_age * child2_age * child3_age\n                # Next year's products\n                parents_product_next = (john_age + 1) * (mary_age + 1)\n                children_product_next = (child1_age + 1) * (child2_age + 1) * (child3_age + 1)\n                \n                # Check all conditions\n                if (parents_product_current < 2019 and children_product_current < 2019 and\n                        parents_product_next > 2020 and children_product_next > 2020):\n                    return sum([john_age, mary_age, child1_age, child2_age, child3_age])\n    \n    return None\n\nans = solution()"
    ],
    "51b8bb60af70468585594276c4549d5f": [
        "def solution():\n    # Total seconds taken by bicyclist to travel 1 mile\n    seconds_per_mile = 2 * 60 + 30\n\n    # Total seconds in 1 hour\n    seconds_per_hour = 60 * 60\n\n    # Calculating the number of miles in 1 hour\n    miles_per_hour = seconds_per_hour / seconds_per_mile\n\n    return miles_per_hour\n\nans = solution()"
    ],
    "5919c5ed904d4b1eb75ba4e56ab0daba": [
        "def solution():\n    count = 1       # The first number in the list is 8.\n    current = 10    # Starts after '8' - considering 80, 81, ...\n\n    while count < 2012:\n        if str(current).startswith('8'):  # Check if number starts with '8'\n            count += 1\n        current += 1\n\n    return current - 1  # We have to subtract 1 because we already added it in the last iteration\n\nans = solution()"
    ],
    "f1ec42c9727d45019312260e63e8481e": [
        "from itertools import permutations\n\ndef solution():\n    max_A = 0\n    for perm in permutations(range(1, 10)):\n        abc = perm[0] * 100 + perm[1] * 10 + perm[2]\n        bcd = perm[1] * 100 + perm[2] * 10 + perm[3]\n        cde = perm[2] * 100 + perm[3] * 10 + perm[4]\n        def_ = perm[3] * 100 + perm[4] * 10 + perm[5]\n        efg = perm[4] * 100 + perm[5] * 10 + perm[6]\n        fgh = perm[5] * 100 + perm[6] * 10 + perm[7]\n        ghi = perm[6] * 100 + perm[7] * 10 + perm[8]\n        A = abc + bcd + cde + def_ + efg + fgh + ghi\n        max_A = max(max_A, A)\n    \n    return max_A\n\nans = solution()"
    ],
    "14e76068ade649c18d46e10500185a77": [
        "def solution():\n    total_balls = 160\n    # Since they're five consecutive numbers, we can express them as:\n    # x-2, x-1, x, x+1, x+2\n    # The sum of these numbers is 5x, and we know the sum is 160.\n    # So we can solve for x.\n    x = total_balls // 5\n    \n    # The student with the most balls will have x+2 balls.\n    most_balls = x + 2\n    \n    return most_balls\n\nans = solution()"
    ],
    "104db66ae297441bbca8c76f5ce475ec": [
        "def solution():\n    # Let's denote the original sum of money that Mrs. Chen had as `o`.\n    # According to the problem, Mrs. Chen has 1/6 of the original sum left\n    # after spending on plates and 3/4 of the remaining on cups.\n    # This means 5/6 of the original sum was spent on plates and cups.\n    \n    # If `p` is the money spent on plates, then 3/4 of (o - p) was spent on cups.\n    # We are given that `p` is $36.\n    # We can thus express the money spent on cups as 3/4 * (o - 36).\n    # The total money spent which is p + 3/4 * (o - p) should then equal 5/6 of the original sum `o`.\n    \n    # p + 3/4 * (o - p) = 5/6 * o\n    # 36 + 3/4 * (o - 36) = 5/6 * o\n    # To find `o`, we will isolate `o` in the equation and solve for it.\n\n    # 36 + (3/4) * o - (3/4) * 36 = (5/6) * o\n    # (3/4) * o - (5/6) * o = 36 - (3/4) * 36\n    # (3/4 - 5/6) * o = 36 - (3/4) * 36\n\n    # Find the common denominator and express the fractions with it.\n    # (9/12 - 10/12) * o = 36 - (9/12) * 36\n    # (-1/12) * o = 36 - (9/12) * 36\n    # (-1/12) * o = 36 - 27\n    # (-1/12) * o = 9\n\n    # Multiply both sides by -12 to solve for `o`.\n    # o = 9 * -12\n    # o = -108\n    \n    # However, o cannot be negative. So there must be a mistake in the calculation.\n    # We should not multiply by -12, but by 12.\n    # o = 9 * 12\n    # o = 108\n\n    original_sum = 9 * 12\n    return original_sum\n\nans = solution()"
    ],
    "fb2929103b234c36a83b16152d639699": [
        "def solution():\n    from sympy import binomial as C\n\n    total_envelopes = 15\n    ways = 0\n\n    for a in range(2, total_envelopes - 3 - 2 + 1):\n        for b in range(4, total_envelopes - a - 2 + 1):\n            for c in range(3, total_envelopes - a - b + 1):\n                d = total_envelopes - a - b - c\n                if d >= 0:\n                    ways += C(a+b+c+d, a+b+c) * C(a+b, a) * C(b+c, c)\n\n    return ways\n\nans = solution()"
    ],
    "5112b404eb824dc0b71fd51b06757616": [
        "def solution():\n    percentage = 25 / 100\n    number = 80\n    ans = percentage * number\n    return ans\n\nans = solution()"
    ],
    "5c608f9e5216463fa42df2bcdf873d46": [
        "def solution():\n    ans = sum(i**2 for i in range(2, 21, 2))\n    return ans\n\nans = solution()"
    ],
    "2f102fdf5c8944f590e2fe08c5776b62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, honeydew = symbols('watermelon honeydew')\n\n    equation1 = Eq(2 * watermelon + 3 * honeydew, 48)\n    equation2 = Eq(honeydew, 2 * watermelon)\n\n    solutions = solve((equation1, equation2), (watermelon, honeydew))\n\n    return solutions[honeydew]\n\nans = solution()"
    ],
    "d304c371fad640039cf2aef0608bc6cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(47 - 2 * (x + 3), 1)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "16719701a44b4e74b780b8ee086863a6": [
        "def solution():\n    ans = 1.4 * (1/10)\n    return ans\n\nans = solution()"
    ],
    "d5d6a40303714f8a8ac28fac5100d265": [
        "def solution():\n    from math import gcd\n\n    rope_lengths = [28, 14, 56]\n    longest_piece_length = gcd(gcd(rope_lengths[0], rope_lengths[1]), rope_lengths[2])\n    \n    return longest_piece_length\n\nans = solution()"
    ],
    "8b62ceaf1c8a475fb638fefb9ee9fe23": [
        "def solution():\n    # Calculate the decimal expansion of 1/13.\n    # The decimal expansion of 1/13 repeats every 6 digits:\n    # 1/13 = 0.076923076923...\n    repeating_sequence = \"076923\"\n    # Since the sequence repeats every 6 digits, the 2022th digit is the same as the 2022 % 6 = 4th digit of the sequence\n    index = (2022 % 6) - 1  # subtract 1 because string indices are 0-based\n    # Get the corresponding digit in the repeating sequence\n    ans = int(repeating_sequence[index])\n    return ans\n\nans = solution()"
    ],
    "e6d3e99bc50e4197ba980e76f8a3861f": [
        "def solution():\n    # Let x be the number of packs in each store at first\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    \n    # After store A sold 290 packs, store B has 3 times as many as store A\n    # So, A has x - 290 and B has 3 * (x - 290)\n    # Since initially they had the same number of packs, we have x + x = (x - 290) + 3 * (x - 290)\n    \n    equation = Eq(2 * x, (x - 290) + 3 * (x - 290))\n    \n    # Solve the equation for x\n    solution = solve(equation, x)\n    total_packs = solution[0] * 2\n    \n    return total_packs\n\nans = solution()"
    ],
    "a0ed7f5e8007463db822ca4a6d5c38ad": [
        "def solution():\n    # Let x be the number of chickens\n    # Let y be the number of rabbits\n    # We have two equations:\n    # 1. x + y = 40 (Total animals)\n    # 2. 2x + 4y = 100 (Total legs)\n  \n    # From equations:\n    # x = 40 - y\n    # Replacing x in the second equation, we get:\n    # 2(40 - y) + 4y = 100\n    # 80 - 2y + 4y = 100\n    # 2y = 20\n    # y = 10 (number of rabbits)\n    # Thus:\n    # x = 40 - y\n    # x = 40 - 10\n    x = 40 - 10\n  \n    return x\n\nans = solution()"
    ],
    "469c613e4b42431083b62ce75d2ba64f": [
        "def solution():\n    total_students = 30\n    boys = 17\n    boys_packed = 4\n    girls_school = 7\n    students_home = 5\n    boys_home = 3\n    \n    girls = total_students - boys\n    girls_packed = girls - girls_school\n\n    students_school_or_packed = total_students - students_home\n    boys_school_or_packed = boys - boys_home\n    packed_lunches = students_school_or_packed - (boys_school_or_packed + girls_school)\n    packed_lunches += boys_packed  # Adding the known boys with packed lunch\n\n    return packed_lunches\n\nans = solution()"
    ],
    "21d247063caa480aa4fd164855aaf8d6": [
        "def solution():\n    return 1.4 * (1/10)\n\nans = solution()"
    ],
    "a805e5e4aa104df697703c2b687e1b6d": [
        "def solution():\n    number = 36\n    factors = set()\n    for i in range(1, int(number**0.5) + 1):\n        if number % i == 0:\n            factors.add(i)\n            factors.add(number//i)\n    return len(factors)\n\nans = solution()"
    ],
    "2def08a06682438abd603dfb441bdcac": [
        "def solution():\n    # Setting up the constants:\n    tax_rate_1 = 0.15  # Tax rate for the first $20000\n    tax_rate_2 = 0.20  # Tax rate for the income over $20000\n    income_limit = 20000  # The limit for the first tax rate\n    total_tax = 7000  # The total tax paid\n\n    # Calculating the maximum tax for the first segment:\n    tax_for_first_segment = income_limit * tax_rate_1\n\n    # If the total tax is less than or equal to the tax for the first segment,\n    # this means all income is taxed at the first rate.\n    if total_tax <= tax_for_first_segment:\n        income = total_tax / tax_rate_1\n    else:\n        # Tax for the second segment (income over $20000):\n        tax_for_second_segment = total_tax - tax_for_first_segment\n        # Income corresponding to the second tax:\n        additional_income = tax_for_second_segment / tax_rate_2\n        # Total income is the sum of the first segment and additional income.\n        income = income_limit + additional_income\n\n    return income\n\nans = solution()"
    ],
    "842182ab896748b7a10d330f85ae87d8": [
        "def solution():\n    last_number = 96  # The largest multiple of 12 less than 100\n    first_number = 12  # The smallest non-zero multiple of 12\n    difference = 12\n\n    # Use the formula for the number of terms in an arithmetic sequence: n = ((last - first) / difference) + 1\n    num_terms = ((last_number - first_number) // difference) + 1  # We use floor division to get an integer result\n    \n    return num_terms\n\nans = solution()"
    ],
    "e88ad0d7f3f54f3cad6c71dd96553567": [
        "def solution():\n    sets_made_in_5_days = 720\n    total_sets_needed = 3600\n    days_for_first_sets = 5\n\n    rate_per_day = sets_made_in_5_days / days_for_first_sets\n    total_days_needed = total_sets_needed / rate_per_day\n\n    return total_days_needed\n\nans = solution()"
    ],
    "9781a5cc0b814b1bb88b4c3ef4a62e10": [
        "def solution():\n    speed = 53  # speed of the train in m/s\n    time = 19   # time in seconds taken to pass a tree\n\n    length_of_train = speed * time  # distance formula: distance = speed * time\n\n    return length_of_train\n\nans = solution()"
    ],
    "8e3dbd5080e34453a64a1a23ca30111e": [
        "def solution():\n    result = 2017\n    for i in range(2, 2018):\n        result *= (1 - 1/i)\n    return int(result)\n\nans = solution()"
    ],
    "5dc3d08683054ae99151ce2641524c51": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial number of packs in each store\n    x = symbols('x')\n    \n    # After selling 290 packs, Store A has x - 290 chips\n    # Store B still has x chips, which is now 3 times the amount in Store A\n    equation = Eq(x, 3 * (x - 290))\n\n    # Solve the equation\n    packs_each = solve(equation, x)[0]\n\n    # Total packs at first is the sum from both stores\n    total_packs = packs_each * 2 \n    \n    return total_packs\n\nans = solution()"
    ],
    "005fc5ec14e04dcba10b71edf3c8e322": [
        "def solution():\n    pears = 18\n    strawberries = 30\n    chocolates = 18\n    friends = 6\n    \n    total_fruits = pears + strawberries + chocolates\n    fruits_per_friend = total_fruits // friends\n\n    return fruits_per_friend\n\nans = solution()"
    ],
    "2697c4034ea94601bb0fe5639660557d": [
        "def solution():\n    # Let the rate of drinking for the man be m barrels per day\n    # Let the rate of drinking for his wife be w barrels per day\n\n    # The man can finish a barrel in 15 days, so his rate is 1/15 barrels per day\n    m = 1 / 15\n\n    # Together, they can finish a barrel in 12 days, so their combined rate is 1/12 barrels per day\n    # m + w = 1/12\n    # Substituting the value of m, we get:\n    # 1/15 + w = 1/12\n\n    # Solve for w, the wife's rate\n    w = 1 / 12 - 1 / 15\n\n    # To find the number of days the wife would take to finish the barrel on her own,\n    # we take the reciprocal of her rate:\n    # days = 1 / w\n\n    days = 1 / w\n\n    return int(days)\n\nans = solution()"
    ],
    "c15b927172434ffa9a24c1dbeb5e27c2": [
        "def solution():\n    wheels_per_tricycle = 3\n    number_of_tricycles = 6\n    total_wheels = wheels_per_tricycle * number_of_tricycles\n    return total_wheels\n\nans = solution()"
    ],
    "aa0bf7ef0d1143f9b795235a58ca1591": [
        "def solution():\n    price_per_book = 16\n    number_of_books_subhan_wants = 5\n    offer_books = 3\n\n    # Calculate free books Subhan gets with offer\n    free_books = number_of_books_subhan_wants // offer_books\n\n    # Total books including free books\n    total_books = number_of_books_subhan_wants + free_books\n\n    # Calculate total price paid for books that are not free\n    total_price_paid = price_per_book * (total_books - free_books)\n\n    return total_price_paid\n\nans = solution()"
    ],
    "3731755de37e48238b28194f092ad465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    children, women, men, total = symbols('children women men total')\n    equation1 = Eq(women, 2/5 * total)\n    equation2 = Eq(men, 3 * children)\n    equation3 = Eq(women, children + 190)\n    equation4 = Eq(children + women + men, total)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (children, women, men, total))\n\n    return solutions[total]\n\nans = solution()"
    ],
    "6067f08c4e394300937f039a6579403e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2 * x + 6, 3 * x - 3)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f2cae285f0b84b47ade17c9a18ab319b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    b = symbols('b')  # Let b be the number of boys\n\n    # Total number of pencils in the class using average\n    total_pencils = 35 * 40\n\n    # Equations based on the problem statement\n    equation = Eq(20 * b + 60 * (40 - b), total_pencils)\n\n    # Solve the equation\n    solution = solve(equation, b)\n\n    return solution[b]\n\nans = solution()"
    ],
    "3ba68d061ee44b82b9ca4db170f3bec5": [
        "def solution():\n    turpan_depression_base = -154  # Below sea level, represented as a negative number\n    mount_fuji_tip = 3776  # Above sea level\n    \n    # The distance between the two points is the absolute difference\n    ans = abs(turpan_depression_base - mount_fuji_tip)\n    \n    return ans\n\nans = solution()"
    ],
    "9a74773c879b4522a6185e9816be51da": [
        "def solution():\n    remainder = 7059 % 4\n    ans = (4 - remainder) if remainder != 0 else 0\n    return ans\n\nans = solution()"
    ],
    "0f8960c766754ad7976ce474a09accd8": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "34a8b75acf004a629ab022c2cfb11cd3": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 51):\n        total_sum += int('1' * i)\n    return total_sum % 100\n\nans = solution()"
    ],
    "03505bb4be72488c85f4a43b911b69fb": [
        "def solution():\n    coding_only = 36 - 20\n    math_only = 21 - 20\n    both = 20\n    total_students = coding_only + math_only + both\n    return total_students\n\nans = solution()"
    ],
    "ffec8472e27a457186b91c2a9b4876f7": [
        "def solution():\n    wrong_result = 98.01\n    divisor_without_decimal = 211\n    true_result = wrong_result / (1 - 1/divisor_without_decimal)\n    return true_result\n\nans = solution()"
    ],
    "2addb83d9ec14899ae26c229580cd24c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b = symbols('a b')  # a for the cost of one apple, b for the cost of one banana\n\n    # 6a + 7b = 8a + 4b is the equation according to the given conditions\n    eq1 = Eq(6 * a + 7 * b, 8 * a + 4 * b)\n\n    # to solve the equation, we rearrange it to find an expression for one variable in terms of another\n    solution_ab = solve(eq1, (a, b))\n\n    # Now let's assume Einstein has 'm' amount of money\n    m = symbols('m')\n\n    # According to the first buying option, we can create the following equation:\n    eq2 = Eq(6 * solution_ab[a] + 7 * solution_ab[b], m)\n\n    # Solving for 'm' gives us the amount of money Einstein has\n    solution_m = solve(eq2, m)\n\n    # Now if Einstein spent all his money on bananas:\n    max_bananas = solution_m[0] / solution_ab[b]\n\n    return max_bananas\n\nans = solution()"
    ],
    "3be71ea95b604423b0c4053a0bdc5fc8": [
        "def solution():\n    total_students = 44\n    math_competitors = 30\n    art_competitors = 26\n\n    both_competitors = (math_competitors + art_competitors) - total_students\n\n    return both_competitors\n\nans = solution()"
    ],
    "8897310e705d4b0996136ec5d1345eb8": [
        "from itertools import product\n\ndef solution():\n    count = 0\n    # since we have minimum constraints, let's consider them\n    min_A = 2\n    min_B = 4\n    min_C = 3\n    \n    # to divide envelopes taking into account minimum constraints\n    remaining_envelopes = 15 - (min_A + min_B + min_C)\n    \n    # now let's distribute the remaining envelopes in box A, B, C, and D\n    for distribution in product(range(remaining_envelopes + 1), repeat=4):\n        if sum(distribution) == remaining_envelopes:\n            if distribution[0] + min_A >= 2 and distribution[1] + min_B >= 4 and distribution[2] + min_C >= 3:\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "da34c13acd4f4312a4166e9435990496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, choon_mui = symbols('john choon_mui')\n\n    equation1 = Eq(john, choon_mui)\n    equation2 = Eq(john - 30, 4 * (choon_mui - 150))\n\n    solutions = solve((equation1, equation2), (john, choon_mui))\n\n    john_left = solutions[john] - 30\n    \n    return john_left\n\nans = solution()"
    ],
    "3a6ea0bb1dac4585a29c21ba5dadca5d": [
        "def solution():\n    seconds_per_minute = 60\n    minutes_per_hour = 60\n    hours_per_day = 24\n    days_per_week = 7\n\n    seconds_per_week = seconds_per_minute * minutes_per_hour * hours_per_day * days_per_week\n    return seconds_per_week\n\nans = solution()"
    ],
    "8d5bc66e7f26483e93a8178a57870366": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbols for unknowns\n    male_first_day, female_first_day = symbols('male_first_day female_first_day')\n\n    # Equations based on the problem statement\n    equation1 = Eq(male_first_day, female_first_day + 450)  # first day males are 450 more than females\n    equation2 = Eq(female_first_day * 1.15 + male_first_day * 0.82, 1354)  # second day visitor counts\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (male_first_day, female_first_day))\n\n    # Get the number of male visitors on the first day\n    return solutions[male_first_day]\n\nans = solution()"
    ],
    "db8434167bdb42b494e99767df043336": [
        "def solution():\n    # Let's call the total initial eggs 'x'\n    # According to the problem:\n    # x - (5 + (x/2) + ((x - (5 + x/2))/2 - 4)) = 15\n    # Solve for x\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = x - (5 + (x/2) + ((x - (5 + x/2))/2 - 4)) - 15\n    \n    initial_eggs = solve(equation, x)\n\n    return initial_eggs[0]\n\nans = solution()"
    ],
    "88e8074a774845edbbc61fbfd06e2d2f": [
        "def solution():\n    miles_per_hour = 65\n    minutes = 15\n    hours = minutes / 60\n    miles = miles_per_hour * hours\n    kilometers = miles * 1.60934\n    return kilometers\n\nans = solution()"
    ],
    "b5f4586abff348538a08b5773026326b": [
        "def solution():\n    initial_amount = 200\n    percentage_increase = 10  # 10%\n\n    increased_amount = initial_amount * (1 + percentage_increase / 100)\n\n    return increased_amount\n\nans = solution()"
    ],
    "953c0cd469784f418a1e4b46c24aa581": [
        "def solution():\n    actual_length_m = 8  # in meters\n    scale_ratio = 1 / 20\n    model_length_m = actual_length_m * scale_ratio\n    model_length_cm = model_length_m * 100  # convert meters to centimeters\n    return model_length_cm\n\nans = solution()"
    ],
    "026cc253a39b4f7a8ff32127b4f5f99c": [
        "def solution():\n    total_girls = 28\n    like_one_direction = 20\n    like_the_vamps = 17\n    like_both = 15\n\n    like_neither = total_girls - (like_one_direction + like_the_vamps - like_both)\n\n    return like_neither\n\nans = solution()"
    ],
    "61fc4738f46a4c1da0407128ad60defd": [
        "def solution():\n    ans = 617 * 6\n    return ans\n\nans = solution()"
    ],
    "5bf8127164644eda8c073097bd158315": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "7d6f9d84e0f64b73964b90b16040c92d": [
        "def solution():\n    total_balloons = 175\n    pupils = 7\n    balloons_per_pupil = total_balloons // pupils\n    return balloons_per_pupil\n\nans = solution()"
    ],
    "4af723c7f6a341b197db0f858a97435c": [
        "def solution():\n    count = 0\n    ways = []\n\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            if die1 + die2 == 8:\n                ways.append((die1, die2))\n                count += 1\n\n    ans = (count, ways)\n    return ans\n\nans = solution()"
    ],
    "362010cacc1c428e87e8f76968f8b0d1": [
        "def solution():\n    total_distance = 11\n    distance_per_day = 3\n    slide_back = 1\n    day_distance = 0\n    day_count = 0\n    \n    while day_distance < total_distance:\n        day_count += 1\n        day_distance += distance_per_day\n        if day_distance >= total_distance:\n            break\n        day_distance -= slide_back\n\n    return day_count\n\nans = solution()"
    ],
    "af71ae92175c47c2bbfef7d6d4226104": [
        "def solution():\n    principal = 12000\n    interest_rate = 0.10\n    time = 2\n\n    # Compound interest formula: A = P(1 + r/n)^(nt)\n    # For yearly calculation, n (number of times interest is compounded per year) is 1\n    n = 1\n    amount = principal * ((1 + interest_rate/n)**(n*time))\n\n    return amount\n\nans = solution()"
    ],
    "372a0dd4bdd148518598bd5418fd17af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(0.95 * x - (2/5) * x, 55)\n    \n    ans = solve(equation, x)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "d4d78225836642e3a6857447ae177c76": [
        "def solution():\n    ans = 2.4 * (3.7 + 1.3) / 2\n    return ans\n\nans = solution()"
    ],
    "ff891cbe817f4502a65021a59cdc3af5": [
        "import math\n\ndef solution():\n    factorial_4 = math.factorial(4)\n  \n    # Number of permutations for n=4 (4 people) where no element\n    # remains in its original position is given by the Derangement\n    # or subfactorial (!n) of 4, also known as the number of derangements,\n    # which can be calculated using !n = n! * (1 - 1/1! + 1/2! - 1/3! + ... + (-1)^n/n!)\n    derangement_4 = factorial_4 * (1 - 1/math.factorial(1) + 1/math.factorial(2) - 1/math.factorial(3) + 1/math.factorial(4))\n    \n    return int(derangement_4)\n\nans = solution()"
    ],
    "bb7980b8187641c693b65724c3bf2545": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = ((2, 7), (2, 13))\n    num, modulo = solve_congruence(*congruences)\n    ans = [n for n in range(num, 100, modulo) if n < 100]\n    return ans[0]\n\nans = solution()"
    ],
    "1a52a8a55f6a4622afbe5b311556da89": [
        "def solution():\n    return 53 * 627\n\nans = solution()"
    ],
    "546aa08753494a909833d0621b194317": [
        "def solution():\n    count = 0\n    combinations = []\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            if die1 + die2 == 8:\n                combinations.append((die1, die2))\n                count += 1\n    return count\n\nans = solution()"
    ],
    "fea0f54b7aae43d2aa3a63d63126d66b": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    end_time = datetime.strptime('20:30', '%H:%M')\n    work_duration = timedelta(hours=8, minutes=45)\n    \n    start_time = end_time - work_duration\n    start_time_formatted = start_time.strftime('%I:%M %p')\n    \n    return start_time_formatted.strip(\"0\")\n\nans = solution()"
    ],
    "932cd151b950413daad721128c59b65f": [
        "def solution():\n    hourly_rate = 78 / 6.5\n    total_earnings = hourly_rate * 8 * 5\n    amount_short = 700 - total_earnings\n    return amount_short\n\nans = solution()"
    ],
    "40fa5f91d7774c719164c67d4befac6e": [
        "def solution():\n    # The value of A should satisfy  A + A + A = A * 3\n    # Using basic arithmetics, we can directly infer that A must be 111 for the sum to be 333 and the middle digit 1 to be consistent across the calculation.\n    return 111\n\nans = solution()"
    ],
    "18d69d8447c241eba858de2a934b9dd6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(0.95 * x - (2/5) * x, 55)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f0fbdd43508d4b8bac3f15715fcfe710": [
        "def solution():\n    # Calculate the time spent on each section of the race\n    time_first_section = 280 / 7  # time = distance / speed\n    time_middle_section = 400 / 5\n    time_last_section = (800 - 280 - 400) / 8  # total distance - the first and middle distances\n\n    # Total time spent on the race is the sum of time spent on each section\n    total_time = time_first_section + time_middle_section + time_last_section\n\n    return total_time\n\nans = solution()"
    ],
    "c569206e3d8e45da9a5fd08bd75dd481": [
        "def solution():\n    number = 14575\n    rounding_base = 100\n    ans = round(number / rounding_base) * rounding_base\n    return ans\n\nans = solution()"
    ],
    "0420376192d448b6b35d8dbb1e3ba394": [
        "from math import lcm\n\ndef solution():\n    # Arjun's haircut schedule in days\n    arjun_schedule = 2 * 7\n\n    # Yahya's haircut schedule in days\n    yahya_schedule = 10\n\n    # Find the least common multiple of both schedules\n    days_until_next_haircut = lcm(arjun_schedule, yahya_schedule)\n\n    return days_until_next_haircut\n\nans = solution()"
    ],
    "3a8af64305054e408ce6703563a42e67": [
        "def solution():\n    highway_length = 42  # in meters\n    distance_apart = 7  # in meters\n\n    # Since no trees are planted at both ends, we reduce the effective length by the distance apart from both ends\n    effective_length = highway_length - (2 * distance_apart)\n    \n    # Number of spaces between trees is one less than the number of trees\n    num_trees = (effective_length // distance_apart) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "a50c5ac06f154c1ab40822b47b13e86a": [
        "def solution():\n    stamps_after = 34\n    stamps_used = 2\n    stamps_bought = 11\n    stamps_given = 14\n    \n    stamps_initial = stamps_after + stamps_used - stamps_bought + stamps_given\n    return stamps_initial\n\nans = solution()"
    ],
    "0ea8d4a5251c4d73939b3f7e26abc354": [
        "def solution():\n    total_sum = 0\n    for digit1 in range(10):\n        for digit2 in range(10):\n            number = int(f\"2{digit1}9{digit2}\")\n            if number % 3 == 0 and number % 5 == 0:\n                total_sum += number\n    return total_sum\n\nans = solution()"
    ],
    "063e43565ec941b8b309de1ea64f2a4d": [
        "def solution():\n    cost_of_shoes = 30\n    fake_note_value = 50\n\n    # Lucas loses the shoes which cost him £30, and he pays back £50 for the fake note.\n    total_loss = cost_of_shoes + fake_note_value\n\n    return total_loss\n\nans = solution()"
    ],
    "51012ecffd1f47a19d29d548fccb4460": [
        "def solution():\n    first_term = 21\n    last_term = 99\n    num_terms = (last_term - first_term) // 1 + 1  # Calculate the number of terms\n    sum_sequence = (num_terms * (first_term + last_term)) // 2  # Sum of arithmetic sequence formula\n\n    return sum_sequence\n\nans = solution()"
    ],
    "9929cc1f915941dd90453af8a8ff6e9d": [
        "def solution():\n    return (5/7) * 112\n\nans = solution()"
    ],
    "8a5fc0b3c5f6473db327f5603655842e": [
        "from math import factorial\n\ndef solution():\n    # Since A, B, and C are always together, consider them as one unit.\n    # The number of ways to arrange the unit and the remaining 7 students is 8!.\n    arrangements_of_8 = factorial(8)\n    \n    # Within that unit, A, B, and C can be arranged in 3! ways.\n    arrangements_within_unit = factorial(3)\n    \n    # The total number of ways is the product of the two.\n    total_arrangements = arrangements_of_8 * arrangements_within_unit\n\n    return total_arrangements\n\nans = solution()"
    ],
    "5af9d49786184344b4cc613f0a935eb9": [
        "def solution():\n    original_number = ''.join(str(i) for i in range(1, 31))\n    smallest_number = ''.join(sorted(original_number)[:len(original_number) - 46])\n    ans = int(smallest_number.lstrip('0'))\n    return ans\n\nans = solution()"
    ],
    "cb7070ea663b4e43bd0e3c4a4ae168ef": [
        "def solution():\n    return 6 * 9 * 12\n\nans = solution()"
    ],
    "b94280bff5ab40d6a0f1f51b73c6b796": [
        "def solution():\n    stamps_left = 34\n    stamps_used = 2\n    stamps_bought = 11\n    stamps_given = 14\n\n    initial_stamps = stamps_left + stamps_used - stamps_bought + stamps_given\n\n    return initial_stamps\n\nans = solution()"
    ],
    "79102f1901d94f8aaf6295c7c0b16f08": [
        "from math import comb\n\ndef solution():\n    return comb(15, 4)\n\nans = solution()"
    ],
    "b96c9f2ccbdd4053bb3e1c306d2c7cbe": [
        "def solution():\n    james = 24\n    linda = james / 2\n    ben = linda / 4\n    total_marbles = james + linda + ben\n    return total_marbles\n\nans = solution()"
    ],
    "b50b389683c44f05a3574ad0a3a8b04f": [
        "def solution():\n    expression_value = (1 + 2 + 3 + 4) * 1 - (2020 + 2019 + 2018) * 0\n    return expression_value\n\nans = solution()"
    ],
    "c5940c9b3ba945a795c1c8d4bf2dc024": [
        "def solution():\n    short_ruler_length = 20  # length of each short ruler\n    overlapping_length = 3   # length of overlapping part between two rulers\n\n    # Total length of the bundle = Sum of lengths of all short rulers - Total overlapping length\n    # Since there are two overlaps when three rulers are tied together, we subtract twice the overlapping length\n    total_length = (3 * short_ruler_length) - (2 * overlapping_length)\n    \n    return total_length\n\nans = solution()"
    ],
    "38bb0a271e854cfb911c418384137f41": [
        "def solution():\n    # Calculate distance covered while jogging from 6:30 am to 7:30 am\n    jog_duration = 1  # in hours, from 6:30 am to 7:30 am\n    jog_speed = 6  # in miles per hour\n    jog_distance = jog_speed * jog_duration\n\n    # Calculate distance covered while walking from 7:30 am to 9:30 am\n    walk_duration = 2  # in hours, from 7:30 am to 9:30 am\n    walk_speed = 5  # in miles per hour\n    walk_distance = walk_speed * walk_duration\n\n    # Calculate total distance traveled\n    total_distance = jog_distance + walk_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "d3fe3513b7b8439ca80784b696227f81": [
        "def solution():\n    ans = 6 * 9 * 12\n    return ans\n\nans = solution()"
    ],
    "1dc8d2d4657c44f2aa1053854785aaa4": [
        "def solution():\n    # Worst case is taking out all blue balls before getting a white ball\n    num_blue = 6\n    # To ensure we get a white ball, we take out all blue balls plus one more ball\n    ans = num_blue + 1\n    return ans\n\nans = solution()"
    ],
    "c12d1d0039a7413aa3e069eb8b681b38": [
        "def solution():\n    first_days = 14 * 3\n    following_days = 9 * 2\n    last_day = 12\n\n    total_pages = first_days + following_days + last_day\n    total_days = 6\n\n    average_pages = total_pages / total_days\n    return average_pages\n\nans = solution()"
    ],
    "140462dc7e4c435c900bfaf90640d4f4": [
        "def solution():\n    from math import gcd\n\n    num_students_A = 8\n    num_students_B = 12\n    num_students_C = 20\n\n    gcd_AB = gcd(num_students_A, num_students_B)\n    gcd_ABC = gcd(gcd_AB, num_students_C)\n    \n    return gcd_ABC\n\nans = solution()"
    ],
    "19ee53ef309b4ac1b03a0754f950fa53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b represent the number of members in the Bowling Club\n    # Let d represent the number of members in the Badminton Club\n    b, d = symbols('b d')\n\n    # Creating equations based on the information provided\n    # Originally, Badminton Club had thrice as many members as the Bowling Club\n    equation1 = Eq(d, 3 * b)\n\n    # After 36 members left the Badminton Club and 4 members left the Bowling Club, they had the same number of members\n    equation2 = Eq(d - 36, b - 4)\n\n    # Solving the equations to find the number of members in each club after the members left\n    solutions = solve((equation1, equation2), (b, d))\n\n    # Number of members each club had in the end\n    members_end = solutions[b] - 4\n\n    return members_end\n\nans = solution()"
    ],
    "de53e5290acf446d8f9e2d2cf711b150": [
        "def solution():\n    length_of_plot_cm = 23 * 100  # converting metres to centimetres\n    distance_between_cauliflowers_cm = 15\n    first_cauliflower_distance_cm = 20\n    width_of_cauliflower_cm = 45\n\n    effective_length_cm = length_of_plot_cm - first_cauliflower_distance_cm - width_of_cauliflower_cm\n    number_of_cauliflowers = effective_length_cm // (distance_between_cauliflowers_cm + width_of_cauliflower_cm)\n\n    return number_of_cauliflowers\n\nans = solution()"
    ],
    "d433f6c9238447089a529b20f6d55cfc": [
        "def solution():\n    ans = (20**2 - 18**2) + (19**2 - 17**2)\n    return ans\n\nans = solution()"
    ],
    "2f9549d4e4cd4be0a3da0b27a9aeb039": [
        "def solution():\n    used_cups = 721\n    total_new_cups = 0\n    \n    while used_cups >= 7:\n        new_cups = used_cups // 7\n        used_cups = used_cups % 7 + new_cups\n        total_new_cups += new_cups\n        \n    return total_new_cups\n\nans = solution()"
    ],
    "f136e2a0e618480e99a0044f35156610": [
        "def solution():\n    number = 72\n    factors = set()\n    for i in range(1, int(number ** 0.5) + 1):\n        if number % i == 0:\n            factors.add(i)\n            factors.add(number // i)\n    ans = len(factors)\n    return ans\n\nans = solution()"
    ],
    "59dd5e71c11a413fac9da29a37a1201b": [
        "def solution():\n    return 100\n\nans = solution()"
    ],
    "89588201f7f94ac8a1d4119cac4fc1e5": [
        "def solution():\n    # Given that n * 5 = 4.5, solve for n\n    n = 4.5 / 5\n\n    return n\n\nans = solution()"
    ],
    "abce3e56fd794c2e9db7fff1d57bab61": [
        "def solution():\n    number1 = 1234\n    number2 = 678\n    difference = number1 - number2\n\n    return difference\n\nans = solution()"
    ],
    "dc773bc479574ee4a35fac2c1bab3b74": [
        "def solution():\n    # Given total sum of cards\n    total_sum = 504\n    # Given average value of cards\n    average_value = 126\n    # Given difference between greatest and smallest number\n    difference = 6\n    # The number of cards can be calculated by the total_sum divided by the average_value\n    number_of_cards = total_sum // average_value\n    # The greatest number (since we have an AP with common difference 2, as they are odd)\n    greatest_number = average_value + (number_of_cards - 1) * (difference / (number_of_cards - 1))\n    # The smallest number is the greatest number minus the total difference\n    smallest_number = greatest_number - difference\n    # Return the smallest number as an integer\n    return int(smallest_number)\n\nans = solution()"
    ],
    "cc28359065b040f0baac3572436155d0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wendy, vivien = symbols('wendy vivien')\n\n    equation1 = Eq(wendy, 2 * vivien)\n    equation2 = Eq(vivien - 10, (wendy - 10) / 4)\n\n    solutions = solve((equation1, equation2), (wendy, vivien))\n\n    wendy_age_in_5_years = solutions[wendy] + 5\n\n    return wendy_age_in_5_years\n\nans = solution()"
    ],
    "6d85c136dca14c8fb76cfaff88586b4f": [
        "def solution():\n    return 5.2 / 10\n\nans = solution()"
    ],
    "90378da3a7ee431ca10e34550d2fde15": [
        "def solution():\n    sum_of_fractions = sum(1/i for i in range(10, 20))\n    integer_part = int(sum_of_fractions)\n\n    return integer_part\n\nans = solution()"
    ],
    "bc0c739adc5f403fb13b64dab9bc2e64": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(3*x - (2*x + 3), 5)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "caa371df0a494602a41234dce6604f84": [
        "def solution():\n    # We need to prime-factorize each number and count the factors of 2 and 5\n    # Since a zero at the end of a number is created by its prime factors of 2 and 5\n    # (i.e., 10^n where n is the number of zeros)\n    # And since there are always more 2's than 5's, we just need to count the number of 5's\n    \n    def count_factor_5(n):\n        count = 0\n        while n % 5 == 0:\n            count += 1\n            n //= 5\n        return count\n\n    # Count the number of factor 5's in the product of numbers from 301 to 999\n    num_of_zeros = 0\n    for i in range(301, 1000):\n        num_of_zeros += count_factor_5(i)\n\n    return num_of_zeros\n\nans = solution()"
    ],
    "5e7272ec96dc4c028e0cf9d07c5a405f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let g be the number of girls, hence g + 90 is the number of boys\n    g = symbols('g')\n    \n    # Total number of pupils\n    total_pupils_eq = Eq(g + (g + 90), 1690)\n    \n    # Solve for the number of girls\n    num_girls = solve(total_pupils_eq, g)[0]\n    \n    # Number of boys\n    num_boys = num_girls + 90\n    \n    # Ratio of girls who can swim to those who can't\n    girls_swim = 31 / (31 + 49) * num_girls\n    girls_cannot_swim = 49 / (31 + 49) * num_girls\n    \n    # Boys who can swim is 120 less than those who cannot\n    boys_cannot_swim = (num_boys + 120) / 2\n    boys_swim = boys_cannot_swim - 120\n    \n    # Total number of pupils who cannot swim\n    cannot_swim_total = girls_cannot_swim + boys_cannot_swim\n    \n    return cannot_swim_total\n\nans = solution()"
    ],
    "23fdb74183d9468b86a9a1e7485a3ab9": [
        "def solution():\n    # Given values\n    total_value = 504\n    average_value = 126\n    difference = 6\n\n    # Calculate the number of cards\n    num_cards = total_value // average_value\n\n    # Since the difference between greatest and smallest is 6\n    # and the numbers are consecutive odd numbers, we can find the smallest number\n    # by taking the average and subtracting (num_cards - 1) since they are equidistant.\n    smallest_number = average_value - (num_cards - 1) * (difference // 2)\n\n    return smallest_number\n\nans = solution()"
    ],
    "e37f0736fbf94dbbadaa812272966e1b": [
        "def solution():\n    ans = 617 - 385\n    return ans\n\nans = solution()"
    ],
    "f04bf8b6007544d3b9bb2fd42578dd8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    bolt, boris = symbols('bolt boris')\n    \n    equation1 = Eq(bolt, boris + 1656)\n    equation2 = Eq(bolt, 5 * boris + 280)\n    \n    solutions = solve((equation1, equation2), (bolt, boris))\n    \n    total_distance = solutions[bolt] + solutions[boris]\n    \n    return total_distance\n\nans = solution()"
    ],
    "57b28975ea284c60b94b10c37a4a685a": [
        "def solution():\n    english_classes = 20\n    math_classes = 35\n    both_classes = 15\n\n    total_students = english_classes + math_classes - both_classes\n\n    return total_students\n\nans = solution()"
    ],
    "25a45bd50b6544e0923661f3f0222503": [
        "def solution():\n    rabbit_speed = 330  # m/min\n    turtle_speed = 30   # m/min\n    race_distance = 6990  # m\n    rabbit_sleep_time = 215  # min\n    lead_time = 10  # min\n\n    # Calculate the distances each travelled until rabbit sleeps\n    rabbit_distance_before_sleep = rabbit_speed * lead_time\n    turtle_distance_before_sleep = turtle_speed * lead_time\n    \n    # Calculate the turtle distance after rabbit sleeps for 215 minutes\n    turtle_distance_after_rabbit_sleeps = turtle_distance_before_sleep + turtle_speed * rabbit_sleep_time\n    \n    # Check if turtle finishes the race during rabbit's sleep\n    if turtle_distance_after_rabbit_sleeps >= race_distance:\n        winner = \"turtle\"\n        distance_difference = turtle_distance_after_rabbit_sleeps - race_distance\n    else:\n        # Calculate the time the rabbit needs to finish the race after it wakes up\n        rabbit_distance_after_sleep = rabbit_distance_before_sleep + rabbit_speed * rabbit_sleep_time\n        remaining_distance_for_rabbit = race_distance - rabbit_distance_after_sleep\n        time_rabbit_needs = remaining_distance_for_rabbit / rabbit_speed\n        \n        # Calculate how far the turtle will get in that same amount of time\n        turtle_distance_while_rabbit_finishes = turtle_distance_after_rabbit_sleeps + turtle_speed * time_rabbit_needs\n        \n        # Determine the winner and the distance difference\n        if turtle_distance_while_rabbit_finishes >= race_distance:\n            winner = \"turtle\"\n            distance_difference = turtle_distance_while_rabbit_finishes - race_distance\n        else:\n            winner = \"rabbit\"\n            distance_difference = race_distance - turtle_distance_while_rabbit_finishes\n        \n    return winner, distance_difference\n\nans = solution()"
    ],
    "a989d97e5a634181a65ac6343582a44d": [
        "def solution():\n    final_amount = 484\n    rate = 1 + 0.10\n    # Since the increase is for 2 years from 2018 to 2020\n    initial_amount = final_amount / (rate**2)\n    return initial_amount\n\nans = solution()"
    ],
    "d40336763f3641a1be634dae96636feb": [
        "def solution():\n    ans = 4 * (2 + 7) - 2 * (5 + 3)\n    return ans\n\nans = solution()"
    ],
    "20418f7933e340978dd3bd82bcc92a3e": [
        "def solution():\n    from math import factorial\n    total_ways = factorial(7)  # All possible arrangements without restrictions\n    # Calculate arrangements where the 3 specific people do stand together\n    together_ways = factorial(3) * factorial(5)  # Treat the 3 people as one unit, plus the other 4 individual\n    # Subtract the unwanted arrangements from the total possible arrangements\n    ans = total_ways - together_ways\n    return ans\n\nans = solution()"
    ],
    "12e5a736389f435683bb5c8e50d61e2b": [
        "def solution():\n    first_term = 10  # First row has 10 athletes\n    num_rows = 25  # There are 25 rows\n\n    # Calculate the common difference in the arithmetic sequence\n    nth_term = first_term + (4 - 1) * (25 - 10) / (4 - 1)\n    common_difference = (nth_term - first_term) / (4 - 1)\n\n    # Calculate the last term of the arithmetic progressions\n    last_term = first_term + (num_rows - 1) * common_difference\n\n    # Calculate the sum of the arithmetic sequence\n    total_athletes = (num_rows * (first_term + last_term)) // 2\n\n    return total_athletes\n\nans = solution()"
    ],
    "0e3fbb38811f4247902fb227b710e62e": [
        "def solution():\n    boys = 12\n    ratio_boys_to_girls = 1 / 2\n    girls = boys / ratio_boys_to_girls\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "4d62c7befaad4eceb13cc1cd164eebe3": [
        "def solution():\n    def count_factors(n, factor):\n        count = 0\n        while n % factor == 0:\n            n //= factor\n            count += 1\n        return count\n\n    def count_zeroes(factorial, base=10):\n        count_two = 0\n        count_five = 0\n        for i in range(2, factorial + 1):\n            count_two += count_factors(i, 2)\n            count_five += count_factors(i, 5)\n        return min(count_two, count_five)\n\n    ans = count_zeroes(789)\n    return ans\n\nans = solution()"
    ],
    "d1bd5b0281c14603821cd856c0814f93": [
        "def solution():\n    first_term = 10\n    last_term = 20\n    num_terms = (last_term - first_term) + 1\n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n    return sum_of_series\n\nans = solution()"
    ],
    "bef9ea98d3814300913ad8631dcc87c7": [
        "def solution():\n    participants = 100\n    min_participants_in_largest_group = 4\n    \n    # Using the Pigeonhole Principle, to guarantee at least 4 participants from\n    # the most represented school, we divide the total participants by 3 and round up.\n    max_schools = (participants + (min_participants_in_largest_group - 1)) // min_participants_in_largest_group\n    \n    return max_schools\n\nans = solution()"
    ],
    "bddc0899c1ca45f1a66f449e0e844404": [
        "def solution():\n    return 23 * 76\n\nans = solution()"
    ],
    "cde4477099f04ff785b49a2072d18f0b": [
        "def solution():\n    cakes = 195\n    cost_per_cake = 46\n    total_cost = cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "49744fee4f6447fcb89a783113d3f0c0": [
        "def solution():\n    # Let x be the number of students in Team B.\n    # The total score for Team A is 20 * 76.\n    # The total score for Team B is 67 * x.\n    # The combined average score for both teams is 70.\n    # Hence, the combined total score is (20 + x) * 70.\n\n    # We can set up the equation:\n    # (20 * 76) + (67 * x) = (20 + x) * 70\n    # Solve for x.\n\n    # total score of team A\n    total_score_a = 20 * 76\n    # combined average score times the combined number of students\n    combined_total_score = 70 * (20 + x) \n    \n    # Solve the linear equation to find x.\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(total_score_a + (67 * x), combined_total_score)\n\n    number_students_b = solve(equation, x)[0]\n    return number_students_b\n\nans = solution()"
    ],
    "6f4e289e9e9942129769e8733efea31f": [
        "def solution():\n    count = 0\n    \n    # Loop through all the hours of the day\n    for hour in range(24):\n        for minute in range(60):\n            # Convert hour and minute to strings\n            time = f\"{hour:02d}{minute:02d}\"\n            # Count how many times '4' appears in the time\n            if time.count('4') >= 2:\n                count += 1\n                \n    return count\n\nans = solution()"
    ],
    "3bda0dbde94744968aa0181ba1cc0bac": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 2, 3, 7, 8, 9]\n    perm = permutations(digits, 6)\n    min_product = float(\"inf\")\n\n    for p in perm:\n        num1 = p[0] * 100 + p[1] * 10 + p[2]\n        num2 = p[3] * 100 + p[4] * 10 + p[5]\n        product = num1 * num2\n        if num1 > 99 and num2 > 99:\n            min_product = min(min_product, product)\n    \n    return min_product\n\nans = solution()"
    ],
    "cd817843175e41e8b65030d600357b18": [
        "def solution():\n    participants = 100\n    # Every school must have at least 4 participants to ensure the school with the most has at least 4\n    min_participants_per_school = 4\n    # Using the Pigeonhole Principle, divide the total participants by min_participants_per_school\n    # and round up to find the maximum number of schools.\n    max_schools = -(-participants // min_participants_per_school)\n    return max_schools\n\nans = solution()"
    ],
    "e9c5342a82354465b6f16c78f081eeab": [
        "def solution():\n    max_steps_per_throw = 6\n    target_position = 25\n    min_throws = (target_position - 1) // max_steps_per_throw + 1\n\n    return min_throws\n\nans = solution()"
    ],
    "a51bd65e7b8041c29809ddac356ad0cd": [
        "def solution():\n    first_term = 19\n    last_term = 2019\n    difference = 50\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    sum_seq = num_terms * (first_term + last_term) // 2\n\n    return sum_seq\n\nans = solution()"
    ],
    "018443a51fa1436b9ab0ca6c0c37b98f": [
        "def solution():\n    for ten_digit in range(1, 10):\n        unit_digit = 15 - ten_digit\n        if 0 <= unit_digit <= 9:\n            return ten_digit * 10 + unit_digit\n\nans = solution()"
    ],
    "e17d88a82a53495296ec5959ab199254": [
        "def solution():\n    ans = 4.5 * 14\n    return ans\n\nans = solution()"
    ],
    "2edcaf59ada74114ad5ad084b9daa534": [
        "def solution():\n    ans = 2 - (-2 - 2) - (-2 - (-2 - 2))\n    return ans\n\nans = solution()"
    ],
    "c46f174aa4ca4269bd208d1d522bca03": [
        "def solution():\n    return 43 - 5.2 + 1.03\n\nans = solution()"
    ],
    "d77bee6b305846ecbd5dff987f4e42d6": [
        "def solution():\n    ans = 0.45 + 1.02 + 3.003\n    return ans\n\nans = solution()"
    ],
    "ccee4c3a5a784522aa2ab0b3f57c382d": [
        "def solution():\n    ans = 20.23*321 + 202.3*45.6 + 2.023*2230\n    return ans\n\nans = solution()"
    ],
    "a05a23198be14a49b4fffef79e084b27": [
        "def solution():\n    depth = 220\n    climb_rate = 40\n    slip_back = 10\n    effective_climb = climb_rate - slip_back\n    \n    # Calculate hours to climb just before reaching the top\n    hours = (depth - climb_rate) // effective_climb \n    \n    # The last climb to get out of the hole won't include a slip back\n    hours += 1\n    \n    return hours\n\nans = solution()"
    ],
    "6cdbe58e9a9f4186995fe83503eec2d2": [
        "from sympy import isprime\n\ndef solution():\n    max_prime = 0\n    for num in range(29, 0, -1):\n        if isprime(num):\n            max_prime = num\n            break\n    return max_prime\n\nans = solution()"
    ],
    "6114bae2343b4198a428d3afa112c960": [
        "def solution():\n    return 3989 - (3000 + 80 + 9)\n\nans = solution()"
    ],
    "aacb3756717d41cc8276dc87aede4f8c": [
        "def solution():\n    ans = 0.45 + 1.02 + 3.003\n    return ans\n\nans = solution()"
    ],
    "019ec282bc4a45b8a08add1000a1c483": [
        "def solution():\n    total_money = 388\n    spent_money = 97\n    saved_money = total_money - spent_money\n    return saved_money\n\nans = solution()"
    ],
    "5111af6f7b234a2a86f4a95d7fe4e3aa": [
        "def solution():\n    total_distance = 30\n    original_number_of_plants = 11\n    remaining_plants = 11 - 8\n    \n    original_intervals = original_number_of_plants - 1\n    new_intervals = remaining_plants - 1\n    \n    new_distance = total_distance / new_intervals\n\n    return new_distance\n\nans = solution()"
    ],
    "90f6519f131740598ed9fbc1b29e3f94": [
        "def solution():\n    original_typists = 5\n    sick_typists = 2\n    working_typists = original_typists - sick_typists\n\n    words_original = 6000\n    time_original_minutes = 20\n    words_needed = 9000\n\n    rate_per_typist_per_minute = words_original / (original_typists * time_original_minutes)\n\n    total_time_needed = words_needed / (working_typists * rate_per_typist_per_minute)\n\n    return total_time_needed\n\nans = solution()"
    ],
    "8cf914f63b224541b0dbbd628dc0d76f": [
        "def solution():\n    from sympy import divisors\n    \n    return sum(divisors(20))\n\nans = solution()"
    ],
    "df2923c88c0f4ff3b1ecc189c2f6e24f": [
        "def solution():\n    return 0.4 * 320\n\nans = solution()"
    ],
    "e3710402e52e4b1a92a506cba8e00a66": [
        "def solution():\n    total_count = 0\n    \n    for i in range(100, 1000):\n        number = str(i)\n        if '2' in number and '3' in number:\n            total_count += 1\n            \n    return total_count\n\nans = solution()"
    ],
    "c10ff9a910b5472fa4b29fef9b93fe4f": [
        "def solution():\n    start_time = 13 * 60 + 52  # Convert start time to total minutes past midnight\n    end_time = 14 * 60 + 5     # Convert end time to total minutes past midnight\n    duration_minutes = end_time - start_time  # Calculate call duration in minutes\n    cost_per_minute = 14  # Cost per minute in pence\n\n    total_cost = duration_minutes * cost_per_minute  # Calculate total cost\n    return total_cost\n\nans = solution()"
    ],
    "1969baf23afa40a7baf0654943977371": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime(2023, 10, 17)  # Assuming the year is 2023\n    end_date = datetime(2023, 12, 20)\n    one_day = timedelta(days=1)\n    \n    sundays_count = 0\n    \n    current_date = start_date\n    while current_date <= end_date:\n        if current_date.weekday() == 6:  # Sunday\n            sundays_count += 1\n        current_date += one_day\n\n    return sundays_count\n\nans = solution()"
    ],
    "7b410b23a38b498c940b646f7eb41bbc": [
        "def solution():\n    pen_price = 5.50\n    ruler_price = 7.60\n    total_price = pen_price + ruler_price\n    return total_price\n\nans = solution()"
    ],
    "3d380dd79fda442a8c27fd6f0f572e5b": [
        "def solution():\n    from sympy import divisors\n\n    sum_of_factors = sum(divisors(20))\n    \n    return sum_of_factors\n\nans = solution()"
    ],
    "5d4cb1405ca241f99a0798ad88be93f8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, peach = symbols('apple peach')\n\n    equation1 = Eq(4 * apple + 3 * peach, 10)\n    equation2 = Eq(2 * apple + 2 * peach, 6)\n\n    solutions = solve((equation1, equation2), (apple, peach))\n\n    return solutions[apple]\n\nans = solution()"
    ],
    "d5a7ecbc1d6a47828162d5c281243895": [
        "def solution():\n    total_money = 40\n    cost_diff_per_tart = 0.40\n    # Let the cost of one apple tart be x dollars\n    # Then the cost of one strawberry tart will be x + 0.40 dollars\n    # If she bought y strawberry tarts, she must have bought 2y apple tarts\n    # According to the given condition:\n    # (Cost of apple tart * Number of apple tarts) + (Cost of strawberry tart * Number of strawberry tarts) = Total money spent\n    # (x * 2y) + (x + 0.40) * y = 40\n    # 2xy + xy + 0.40y = 40\n    # 3xy + 0.40y = 40\n    # y(3x + 0.40) = 40\n    # Since we know that she spent equal money on each item:\n    # 2xy = y(x + 0.40)\n    # 2x = x + 0.40\n    # x = 0.40\n    # Now we can find y:\n    # y(3 * 0.40 + 0.40) = 40\n    # y = 40 / (1.20 + 0.40)\n    # y = 40 / 1.60\n    # y = 25 (strawberry tarts)\n    # Apple tarts = 2 * strawberry tarts\n    # Apple tarts = 2 * 25\n    apple_tarts = 2 * 25\n    # Total tarts = strawberry tarts + apple tarts\n    total_tarts = 25 + apple_tarts  # where 25 is the number of strawberry tarts\n\n    return total_tarts\n\nans = solution()"
    ],
    "89f3344c7d3f4ec385941566d34f211b": [
        "def solution():\n    from math import lcm\n\n    first_light_cycle = 0.5  # in minutes\n    second_light_cycle = 0.75  # in minutes\n    combined_cycle = 9  # in minutes\n\n    # Find the least common multiple of the first two lights\n    lcm_first_second = lcm(int(first_light_cycle * 60), int(second_light_cycle * 60))\n\n    # Find the light cycle for the third light so that all three have 9 minutes combined cycle\n    third_light_cycle = (combined_cycle * 60) / lcm_first_second\n\n    if third_light_cycle < 30:\n        # If it's less than 30 seconds, it cannot be a possible cycle for the third light\n        # Hence, we look for the next multiple that gives us a cycle longer than 30 seconds.\n        third_light_cycle = (lcm_first_second * 2) / 60  # Since lcm is in seconds, convert it back to minutes.\n\n    return third_light_cycle\n\nans = solution()"
    ],
    "293fd7b7273c4a2985a35719002a4df3": [
        "def solution():\n    return 43 * 16\n\nans = solution()"
    ],
    "bb8774542eff44078c1080ee1b832fa5": [
        "def solution():\n    from math import factorial\n\n    # With 5 skiboards and 5 people, each person can choose a different skiboard.\n    # This is a permutation of 5 items taken 5 at a time.\n    ans = factorial(5)\n\n    return ans\n\nans = solution()"
    ],
    "faa1d07aa4874b9ba6f33ab3636209e1": [
        "def solution():\n    original_price = 7.20\n    new_price = 8.10\n    price_increase = new_price - original_price\n    percentage_increase = (price_increase / original_price) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "35f8d27cbb554601999e2b7fe17736e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of pieces in the puzzle.\n    x = symbols('x')\n\n    # On the first day, Tim fits 20% of the pieces.\n    first_day_pieces = 0.20 * x\n\n    # On the second day, he fits another 60 pieces.\n    second_day_pieces = 60\n\n    # Now, the ratio of the number of fitted pieces to the number of unfitted pieces is 2:5,\n    # which can be represented as: (first_day_pieces + second_day_pieces) : (x - (first_day_pieces + second_day_pieces)) = 2 : 5\n    # Representing this as an equation:\n    equation = Eq((first_day_pieces + second_day_pieces) / (x - (first_day_pieces + second_day_pieces)), 2/5)\n\n    # Solve for x.\n    solved = solve(equation, x)\n\n    # There's only one solution for the total number of pieces.\n    return solved[0]\n\nans = solution()"
    ],
    "88eda4595d1348ee82e97a6c5620dcdc": [
        "def solution():\n    mm_per_meter = 1000\n    meters = 2\n    mm = meters * mm_per_meter\n    return mm\n\nans = solution()"
    ],
    "8f0c9f7a6b3b4934bbef8a5ff5370595": [
        "def solution():\n    total_integers = 100\n    multiples_of_10 = total_integers // 10\n    \n    not_multiples_of_10 = total_integers - multiples_of_10\n    percentage_not_multiples_of_10 = (not_multiples_of_10 / total_integers) * 100\n\n    return percentage_not_multiples_of_10\n\nans = solution()"
    ],
    "eccd3a25ed1441c68e1a0cbcad3fe748": [
        "def solution():\n    initial_amount = 4\n    paid_back = initial_amount * 30 / 100\n    still_owe = initial_amount - paid_back\n\n    return still_owe\n\nans = solution()"
    ],
    "675eadedaada48a9974ff5a0fa4e1f98": [
        "def solution():\n    total_children = 26\n    henry_position_from_left = 18\n    tony_position_from_right = 17\n\n    # Position of Tony when counted from left\n    tony_position_from_left = total_children - tony_position_from_right + 1\n\n    # Number of children between Henry and Tony (including both)\n    if henry_position_from_left <= tony_position_from_left:\n        children_between = tony_position_from_left - henry_position_from_left + 1\n    else:\n        children_between = henry_position_from_left - tony_position_from_left + 1\n\n    return children_between\n\nans = solution()"
    ],
    "6f694af3c9bd48f386b3503a12b5964d": [
        "def solution():\n    # Define the number of legs for each animal\n    cat_legs = 4\n    dog_legs = 4\n    rabbit_legs = 4\n    bird_legs = 2\n\n    # Given the total number of legs\n    total_legs = 28\n\n    # Given the number of each animal except for birds\n    num_cats = 2\n    num_dogs = 2\n    num_rabbits = 1\n\n    # Calculate the total number of legs for the given animals\n    legs_without_birds = (num_cats * cat_legs) + (num_dogs * dog_legs) + (num_rabbits * rabbit_legs)\n\n    # Calculate the remaining legs which should be equal to the total number of bird legs\n    remaining_legs = total_legs - legs_without_birds\n\n    # Calculate the number of birds\n    num_birds = remaining_legs / bird_legs\n\n    return int(num_birds)\n\nans = solution()"
    ],
    "4d9b648aa31444f0a8961689da036596": [
        "def solution():\n    jack_speed = 15  # Jack's speed in km/h\n    rose_speed = 10  # Rose's speed in km/h\n    time = 10        # Time they trave before meeting in hours\n\n    # Total distance covered by both before meeting\n    total_distance = (jack_speed + rose_speed) * time\n\n    return total_distance\n\nans = solution()"
    ],
    "d74f00b435ac4576a44ffbd313804476": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(12 * (x - 1), 36)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "6c4a0c8fddc0483ca389ad988e693de1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    melvin, nelson, oliver = symbols('melvin nelson oliver')\n    melvin_start = 40\n\n    # After first round, Melvin's new card count\n    melvin_after_first = melvin_start + (5/8) * melvin_start\n\n    # After second round, all lose 1/4 of Melvin's original number of cards\n    melvin_after_second = melvin_after_first - (1/4) * melvin_start\n    nelson_after_second = nelson - (1/4) * melvin_start\n    oliver_after_second = oliver + (1/4) * melvin_start + (1/4) * melvin_start\n\n    # After final round, Melvin's new card count\n    melvin_final = melvin_after_second + (1/8) * melvin_start\n    nelson_final = nelson_after_second - (1/8) * melvin_start\n    oliver_final = oliver_after_second\n\n    # All have the same number of cards:\n    equation = Eq(melvin_final, nelson_final)\n    equation2 = Eq(nelson_final, oliver_final)\n\n    # Solve equations considering all cards Melvin, Nelson and Oliver had at first\n    solutions = solve((equation, equation2, Eq(melvin + nelson + oliver, melvin_start + melvin_start)), (melvin, nelson, oliver))\n\n    return solutions[melvin] + solutions[nelson] + solutions[oliver]\n\nans = solution()"
    ],
    "b7eac049934747d7b62bda3fbaa5bc8d": [
        "def solution():\n    # List all cards with their prime factorizations\n    cards = [6, 12, 35, 175, 245, 300]\n    prime_factors = {6: [2, 3], \n                     12: [2, 2, 3], \n                     35: [5, 7], \n                     175: [5, 5, 7], \n                     245: [5, 7, 7], \n                     300: [2, 2, 3, 5, 5]}\n    \n    # Calculate the product of all cards\n    product_all_cards = 1\n    for card in cards:\n        product_all_cards *= card\n    \n    # Find products for Candy (2 cards) and Candice (3 cards)\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            # Product of 2 cards chosen by Candy\n            candy_product = cards[i] * cards[j]\n            # Product of the remaining cards, which would be Candice's choice\n            candice_product = product_all_cards // candy_product\n            \n            if candy_product == candice_product:\n                # The card not picked is the one remaining in the product of all cards\n                not_picked = set(cards) - set([cards[i], cards[j]])\n                for k, v in prime_factors.items():\n                    if sorted(prime_factors[k]) == sorted([p for sublist in [prime_factors[n] for n in not_picked] for p in sublist]):\n                        return k\n\nans = solution()"
    ],
    "75a97b3cb75d416aaa38e4b494bb534c": [
        "def solution():\n    n = 0\n    for i in range(1, 25, 2):  # Iterate through odd numbers up to 24\n        if 24 % i == 0:  # Check if i is a factor of 24\n            n += i  # Add the odd factor to the sum\n    return n\n\nans = solution()"
    ],
    "d41691029c33461e96ef95148a5eba13": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let Polly's age be x\n    # When Polly is x years old, her children are (x-20), (x-22), and (x-24) years old respectively.\n    polly = symbols('polly')\n    \n    # Create an equation where Polly's age is equal to the sum of her children's ages\n    equation = Eq(polly, (polly - 20) + (polly - 22) + (polly - 24))\n\n    # Solve the equation for Polly's age\n    age_of_polly = solve(equation, polly)\n    \n    return age_of_polly[0]\n\nans = solution()"
    ],
    "e3e8c1bb5e4a47f285f57b642b489dbf": [
        "def solution():\n    first_term = 2\n    last_term = 100\n    difference = 2\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n    return sum_of_sequence\n\nans = solution()"
    ],
    "2c263a2cb715471786756a60d709dd70": [
        "def solution():\n    part1 = (2 * 5) + (1 * 5)\n    part2 = (2 + 1) * 5\n    ans = part1 == part2\n    return ans\n\nans = solution()"
    ],
    "59093ee3ace74e00af6550aaa30da949": [
        "def solution():\n    initial_sweets = 12\n    additional_sweets = 7\n    total_sweets = initial_sweets + additional_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "14c4144f0869404aa3f5ee8c1fd30121": [
        "def solution():\n    total_weight_with_presents = 20\n    multiple = 5\n    weight_of_suitcase = total_weight_with_presents / multiple\n    return weight_of_suitcase\n\nans = solution()"
    ],
    "2f7745024468479cbef4990d93752c41": [
        "def solution():\n    for big_boxes in range(10):\n        for small_boxes in range(10):\n            if big_boxes + small_boxes < 10 and 6 * big_boxes + 4 * small_boxes == 50:\n                return big_boxes\n\nans = solution()"
    ],
    "9119ad36d763494589f8442ace3a3ec0": [
        "def solution():\n    combined_age_4_years_ago = 10\n    years_passed_since_then = 4 + 2\n    combined_future_age = combined_age_4_years_ago + 2 * years_passed_since_then\n    \n    return combined_future_age\n\nans = solution()"
    ],
    "f0344902bde148c3ab13297920aace4a": [
        "def solution():\n    # Let the smaller number be x and the larger number be y\n    # We then have the system of equations:\n    # y - x = 39 (1)\n    # y + x = 59 (2)\n    # Solving for x in terms of y using equation (1):\n    # y = x + 39\n    # Substituting into equation (2):\n    # (x + 39) + x = 59\n    # 2x + 39 = 59\n    # 2x = 59 - 39\n    # 2x = 20\n    # x = 10\n    # The smaller number is 10\n    x = (59 - 39) / 2\n    return x\n\nans = solution()"
    ],
    "1a06f46e2821453599d11045a0a00ca2": [
        "def solution():\n    ans = 5 * 4 + 6 * 8\n    return ans\n\nans = solution()"
    ],
    "daa74d1025eb4e84bac18f7f987c4c5b": [
        "def solution():\n    richard_age = 12\n    adam_age = 2 * richard_age\n    will_age = (2/3) * adam_age\n    total_age = richard_age + adam_age + will_age\n    return total_age\n\nans = solution()"
    ],
    "50c1187bcefc42f782b81876db5c9b43": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    m = symbols('m')\n    equation = Eq(14 * m, 8 * (10 + m) - 3)\n    \n    solution = solve(equation, m)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "201413f1d95843569dc578e3191479b4": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    A, B, C = symbols('A B C')\n    \n    equation1 = Eq(A * B, 30)\n    equation2 = Eq(B * C, 35)\n    equation3 = Eq(C * A, 42)\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    for sol in solutions:\n        # Checking if all the numbers are natural numbers i.e., positive integers\n        if all(isinstance(num, int) and num > 0 for num in sol):\n            return sum(sol)\n\nans = solution()"
    ],
    "0220f39d28a1457ab882171d36b85267": [
        "def solution(x, y):\n    passengers_after_stop = x - 12 + y\n    return passengers_after_stop\n\n# Assuming x and y are given, if not you can define or remove x and y from parameters.\nans = solution(x, y)  # Replace x, y with actual values if available"
    ],
    "d0dda40eb81841348c13c9c91a33a12b": [
        "def solution():\n    percentage = 0.15\n    amount = 340\n    result = percentage * amount\n    return result\n\nans = solution()"
    ],
    "af73e4b5208646ebada742ac2fe92ee4": [
        "def solution():\n    justin_age = 8\n    mother_age = 32\n    years = 0\n\n    while mother_age != 3 * (justin_age + years):\n        years += 1\n\n    return years\n\nans = solution()"
    ],
    "53956386ba3c4b4c950b6dca01045afc": [
        "def solution():\n    from math import factorial\n    return factorial(10)\n\nans = solution()"
    ],
    "6ce557a6c8f5454c8bfd60bf19896563": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cora, qingle = symbols('cora qingle')\n\n    equation1 = Eq(qingle + 8, cora - 8 + 4)\n\n    solutions = solve((equation1,), (cora, qingle))\n\n    difference = solutions[cora] - solutions[qingle]\n\n    return difference\n\nans = solution()"
    ],
    "b2f4e1c67fb348e19f5fc8792ed237cb": [
        "def solution():\n    ans = 5 * 4 + 6 * 8\n    return ans\n\nans = solution()"
    ],
    "18a547d69f104e56ae2814a05d14aaec": [
        "def solution():\n    # Since the line passes through the origin, b is 0\n    b = 0\n\n    # Using the point (4,8) to find m\n    # We can substitute x=4 and y=8 into the equation y = mx + b\n    # 8 = m*4 + 0 --> m = 8/4\n    m = 8 / 4\n\n    # Now we have both m and b, we can write the equation\n    # Since b is 0, the equation is y = mx\n    return f\"y={m}x\"\n\nans = solution()"
    ],
    "8687c8d26bc84869836e90d4f5fc68a9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's define symbols for the shells Jane and Eric initially have\n    j, e = symbols('j e')\n    \n    # Initial ratio of their shells\n    equation1 = Eq(j, 5/7 * e)\n    \n    # After Eric gives Jane 6 shells, the ratio changes to 11:13\n    equation2 = Eq((j + 6) / (e - 6), 11/13)\n    \n    # Solve the equations for j and e\n    solutions = solve((equation1, equation2), (j, e))\n    \n    # Calculate the total number of seashells they have\n    total_seashells = solutions[j] + solutions[e]\n    \n    return int(total_seashells)\n\nans = solution()"
    ],
    "b4a6a6d3563d489c96fe7593170152df": [
        "def solution():\n    largest_number = 0\n    current_number = 0\n    for warren_add in range(20, 0, -1):\n        current_number += warren_add\n        largest_number = max(largest_number, current_number)\n        naida_subtract = 21 - warren_add\n        current_number -= naida_subtract\n    return largest_number\n\nans = solution()"
    ],
    "a46723e46cfb4bedb4d7b603e4267646": [
        "def solution():\n    first_faucet_rate = 1 / 20\n    other_faucets_rate = 3 * first_faucet_rate\n    combined_rate = first_faucet_rate + 3 * other_faucets_rate\n\n    hours_to_fill = 1 / combined_rate\n    return hours_to_fill\n\nans = solution()"
    ],
    "2ef6d5e475ed4057b993f02bafa8ea83": [
        "from sympy import factorint\n\ndef solution():\n    product = 48 * 925 * 38 * 435\n    factors = factorint(product)\n    min_power_of_zero_factors = min(factors.get(2, 0), factors.get(5, 0))\n    return min_power_of_zero_factors\n\nans = solution()"
    ],
    "9494b45a03aa47d3b840f6416268ac67": [
        "from itertools import permutations\n\ndef solution():\n    digits = '53948'\n    even_numbers = [int(''.join(p)) for p in permutations(digits) if int(p[-1]) % 2 == 0]\n    return min(even_numbers)\n\nans = solution()"
    ],
    "ef6a6b59f128499ab1b4a2073ffa3a22": [
        "def solution():\n    total_pupils = 180\n    piano_pupils = 52\n    violin_pupils = 38\n\n    piano_violin_pupils = piano_pupils / 4\n\n    pupils_play_both = piano_violin_pupils\n\n    pupils_play_either = piano_pupils + violin_pupils - pupils_play_both\n\n    pupils_play_neither = total_pupils - pupils_play_either\n\n    return int(pupils_play_neither)\n\nans = solution()"
    ],
    "4d4d648041e64f4f8fbcae12529f4d91": [
        "def solution():\n    principal = 20000\n    interest_rate = 0.05\n    time = 11\n    \n    amount = principal * (1 + interest_rate * time)\n    \n    return amount\n\nans = solution()"
    ],
    "326c55e1dbe34a55b42d8f2355c0d688": [
        "def solution():\n    ans = 7\n    return ans\n\nans = solution()"
    ],
    "b38ea6a5211742ffb6b17515774d525f": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)\n    initial_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "4c36fb915f3b494faaabab2d3b6937ff": [
        "def solution():\n    # The area of the isosceles right triangle with waist length of 2\n    area_triangle = (2 * 2) / 2\n    \n    # The area of the quarter-circle sector with a radius of 1, centered at right angle vertex\n    from math import pi\n    area_sector = (pi * 1**2) / 4\n    \n    # Probability is the ratio of the area of the sector to the area of the triangle\n    probability = area_sector / area_triangle\n    \n    return probability\n\nans = solution()"
    ],
    "5787ee72c4d04dc79a6fef83e42a30f8": [
        "def solution():\n    # Number of students who got an A in Maths\n    math_A = 10\n    # Number of students who got an A in English\n    english_A = 15\n    # Number of students who got an A in both Maths and English\n    both_A = 2\n\n    # Applying the Inclusion-Exclusion Principle to find total number of students who got A in either test\n    either_A = math_A + english_A - both_A\n\n    return either_A\n\nans = solution()"
    ],
    "61d2be77a64146af8827b79a42a801d8": [
        "def solution():\n    from datetime import datetime, timedelta\n    \n    time_left_school = datetime.strptime(\"15:22\", \"%H:%M\")\n    time_caught_bus = datetime.strptime(\"16:01\", \"%H:%M\")\n    time_on_bus = timedelta(minutes=18)\n    time_got_home = datetime.strptime(\"16:35\", \"%H:%M\")\n    \n    walking_time_to_bus = time_caught_bus - time_left_school\n    walking_time_from_bus = time_got_home - (time_caught_bus + time_on_bus)\n    \n    total_walking_time = walking_time_to_bus + walking_time_from_bus\n    \n    # Return the total walking time in minutes\n    return total_walking_time.seconds // 60\n\nans = solution()"
    ],
    "6dc2dadd3a6147068fc0bfdae746ed45": [
        "def solution():\n    count = 0\n    for i in range(100, 201):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a0bc9ddd90c8400ea4cf8347a9020791": [
        "def solution():\n    for D in range(1, 10):  # The last digit can't be zero and should be less than 10\n        A = D // 4\n        if D % 4 != 0 or A == 0:  # First digit should be a whole number and not zero\n            continue\n        for B in range(0, 10):\n            if B == A or B == D or B != A - 1:  # Second digit is one less than the first, and all digits must be different\n                continue\n            for C in range(0, 10):\n                if C in (A, B, D):  # All digits must be different\n                    continue\n                if int(f\"{A}{B}{C}{D}\") * 4 == int(f\"{D}{C}{B}{A}\"):  # Number multiplied by 4 is its reverse\n                    return int(f\"{A}{B}{C}{D}\")\n\nans = solution()"
    ],
    "730f25d6c1bc4e37a31dd815615af70b": [
        "def solution():\n    answer = 25\n    number_after_division = answer - 10\n    original_number = number_after_division * 3\n\n    return original_number\n\nans = solution()"
    ],
    "1dbda155390140e09242722fa7ec4c1f": [
        "def solution():\n    return sum(range(1, 9))\n\nans = solution()"
    ],
    "6877d33364b24d4982c45c4a93293a57": [
        "def solution():\n    numbers = [2, 3, 8, 4, 7, 6]\n    mean_value = 5\n    total_numbers = len(numbers) + 1  # +1 for the unknown 'a'\n\n    # Calculate the sum of the known numbers\n    known_sum = sum(numbers)\n    # The mean of all numbers is the sum of numbers divided by the number of numbers\n    total_sum = mean_value * total_numbers\n\n    # Find 'a' by subtracting the known sum from the total sum\n    a = total_sum - known_sum\n\n    return a\n\nans = solution()"
    ],
    "2d27041da5e747b9b4c4949e40cd5d6a": [
        "def solution():\n    left_side = 2030452\n    right_side_without_box = 30000 + 452\n\n    missing_number = (left_side - right_side_without_box) // 2\n\n    return missing_number\n\nans = solution()"
    ],
    "586e5da41dc343e286f5bdb9a9aab06c": [
        "def solution():\n    return 0.20 * 8880\n\nans = solution()"
    ],
    "d992065f5fdb49bdb385a59fc97cf3bb": [
        "def solution():\n    total_length_cm = 150\n    half_length_meters = (total_length_cm / 2) / 100\n    return half_length_meters\n\nans = solution()"
    ],
    "5ea6d9da123442c4a8d28b5ba3fe74e5": [
        "def solution():\n    # Worst case for each color when there are 3 colors\n    # After taking out one of each color, the next sock guarantees a pair\n    worst_case_socks = 1 + 1 + 1 + 1  # one of each color + 1 more to guarantee a pair\n    return worst_case_socks\n\nans = solution()"
    ],
    "3ef61299b7c4476884b4646603c76fc5": [
        "def solution():\n    n = 72 // (3 * 6)\n    return n\n\nans = solution()"
    ],
    "94696a1a3ade4f6a85f0aaa9c64215ae": [
        "def solution():\n    pupils_in_row = 6 + 1 + 7  # Pupils to her left, Victoria, and to her right\n    total_rows = 1 + 1 + 8  # Rows in front, Victoria's row, and rows behind\n    total_pupils = pupils_in_row * total_rows\n\n    return total_pupils\n\nans = solution()"
    ],
    "8b5b06b976f0457fb05ae92796e950c6": [
        "def solution():\n    average_marks = 75\n    total_marks_for_3_tests = average_marks * 3\n    total_marks_for_2_tests = 172\n    marks_in_remaining_test = total_marks_for_3_tests - total_marks_for_2_tests\n\n    return marks_in_remaining_test\n\nans = solution()"
    ],
    "6246bd4ec6524aff80623b6953875e8b": [
        "def solution():\n    principal = 400000\n    rate = 1.2 / 100\n    time = 1\n\n    interest = principal * rate * time\n\n    return interest\n\nans = solution()"
    ],
    "743969de5e9d4dda93e740107239e799": [
        "def solution():\n    return 452 - 191\n\nans = solution()"
    ],
    "34a7fe65f21049408fe7d74314f392a8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the unknown number\n    x = symbols('x')\n\n    # Create the equation according to the problem statement\n    equation = Eq((x + 3) / 4 * 9, 81)\n\n    # Solve the equation for x\n    solutions = solve(equation, x)\n\n    # Return the solution\n    return solutions[0]\n\nans = solution()"
    ],
    "3378ca3dc79a44d9b8d60a873b97d5c7": [
        "def solution():\n    # Calculate the numerator\n    numerator_sum = sum(1/(i*(i+1)) for i in range(1, 20, 2))\n\n    # Calculate the denominator\n    denominator_sum = sum(1/((11+i)*(20-i)) for i in range(0, 10, 2))\n\n    # Calculate the answer\n    ans = numerator_sum / denominator_sum\n\n    return ans\n\nans = solution()"
    ],
    "5521675555dc4d9a8af13086a54334e6": [
        "def solution():\n    final_result = 25\n    subtracted_value = final_result - 10\n    original_number = subtracted_value * 3\n    \n    return original_number\n\nans = solution()"
    ],
    "eb5c3a8d80624ac095e1421ab5bf8025": [
        "def solution():\n    x = (17 - 2) / 5\n    return x\n\nans = solution()"
    ],
    "207d21f7872b44c39bcd6ee8534d8b32": [
        "def solution():\n    initial_candies = 36\n    given_to_lily = initial_candies * 3 / 4\n    remaining_after_lily = initial_candies - given_to_lily\n    given_to_brother = remaining_after_lily * 1 / 3\n    final_remaining = remaining_after_lily - given_to_brother\n\n    return final_remaining\n\nans = solution()"
    ],
    "64b7530c3fcd4d98840ab7e499004ae8": [
        "def solution():\n    # Given distances at times\n    distance_at_8_am = 6300  # in meters\n    distance_at_8_30_am = 1800  # in meters\n\n    # Calculate the duration between the two times in minutes\n    time_difference_in_minutes = 30\n\n    # Assuming constant speed, calculate the distance covered in the time period\n    distance_covered = distance_at_8_am - distance_at_8_30_am\n    \n    # Now we find the speed in meters per minute\n    speed = distance_covered / time_difference_in_minutes\n\n    # Calculate the time it takes to cover the remaining distance at the same speed\n    time_to_cover_remaining_distance = distance_at_8_30_am / speed  # in minutes\n\n    # Convert this time to hours and minutes\n    hours = int(time_to_cover_remaining_distance // 60)\n    minutes = int(time_to_cover_remaining_distance % 60)\n\n    # Calculate the time he reaches his friend's house\n    arrival_time_hour = 8 + hours\n    arrival_time_minute = 30 + minutes\n\n    # Adjust if the minutes go over 60\n    if arrival_time_minute >= 60:\n        arrival_time_hour += 1\n        arrival_time_minute -= 60\n\n    # Return the arrival time as a string formatted HH:MM\n    return f\"{arrival_time_hour:02d}:{arrival_time_minute:02d}\"\n\nans = solution()"
    ],
    "fa946bf107f84b9d9749b1c8b96288fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    may_age_then = 10\n    kenny_age_diff = 2\n    may_current_age = 7\n    \n    kenny_younger_brother_age, kenny_current_age = symbols('kenny_younger_brother_age kenny_current_age')\n    \n    # Equation representing the future age sum of Kenny and his brother being 3 times May's age then\n    equation1 = Eq((kenny_younger_brother_age + kenny_current_age), 3 * may_age_then)\n    \n    # Equation representing that Kenny is 2 years older than his younger brother\n    equation2 = Eq(kenny_current_age, kenny_younger_brother_age + kenny_age_diff)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (kenny_younger_brother_age, kenny_current_age))\n    \n    # Kenny's current age\n    kenny_current_age_solution = solutions[kenny_current_age]\n    \n    # The difference in age between Kenny and May currently\n    age_difference = kenny_current_age_solution - may_current_age\n    \n    return age_difference\n\nans = solution()"
    ],
    "02842e44d6784d8ea8f173ee23a5edf6": [
        "def solution():\n    # Let's denote the original amount of money Amy had as x.\n    # She spent x/2 on donuts and x/2 on muffins.\n    # We know the price per donut (10 for 7) and per muffin (6 for 3).\n    # Let's denote the number of donuts as d and the number of muffins as m.\n\n    # Since she bought 54 more donuts than muffins, we have the equation d = m + 54.\n    # The cost for d donuts is d * (10/7) and for m muffins is m * (6/3).\n    # According to the problem, the cost of d donuts and m muffins should each be x/2.\n    # Therefore we have two equations:\n    # d * (10/7) = x/2\n    # m * (6/3) = x/2\n    \n    # We can express m in terms of d using the first equation: m = d - 54\n    # Now we substitute m in the second equation and find the value of d, and subsequently, the value of x.\n    \n    for d in range(1, 1000):  # Let's iterate through possible numbers of donuts, Amy doesn't have infinite money\n        m = d - 54  # Number of muffins in terms of number of donuts\n        if d * (10/7) == m * (6/3) * 2:  # Check if the amount spent on donuts is the same as the amount on muffins\n            x = d * (10/7) * 2  # If true, calculate the original amount of money\n            return x\n            \nans = solution()"
    ],
    "49c2deec1cbb44739a83382de18766c5": [
        "def solution():\n    pancakes_per_minute = 2\n    minutes_cooking = 12\n\n    total_pancakes = pancakes_per_minute * minutes_cooking\n\n    return total_pancakes\n\nans = solution()"
    ],
    "46e11702823f49719758ac932f77acbe": [
        "def solution():\n    # Given values\n    total_weight_kg = 5\n    cost_price_pounds = 10\n    weight_per_bag_g = 250\n    selling_price_per_bag_pence = 65\n    \n    # Conversion from kg to g (because weight per bag is in grams)\n    total_weight_g = total_weight_kg * 1000\n    # Number of bags\n    number_of_bags = total_weight_g / weight_per_bag_g\n    # Total selling price in pounds (1 pound = 100 pence)\n    total_selling_price_pounds = (selling_price_per_bag_pence * number_of_bags) / 100\n    # Profit is selling price minus cost price\n    profit_pounds = total_selling_price_pounds - cost_price_pounds\n    # Percentage profit is (profit divided by cost price) times 100\n    percentage_profit = (profit_pounds / cost_price_pounds) * 100\n    \n    return percentage_profit\n\nans = solution()"
    ],
    "98264c90c4f44945a18baa5c270fa929": [
        "def solution():\n    total_apples = 14\n    children = 5\n\n    # To find the largest possible number of apples given to the child who receives the most,\n    # we give out the minimum one apple to each of the other children first\n    apples_after_min_distribution = total_apples - (children - 1)\n\n    return apples_after_min_distribution\n\nans = solution()"
    ],
    "e97c46c875534340a3de7f73e01112a9": [
        "def solution():\n    distance_between_teeth = 30 / (9 - 4)\n    total_distance = distance_between_teeth * (100 - 1)\n    return total_distance / 10\n\nans = solution()"
    ],
    "9473695aa8e7449bb892566a91379acd": [
        "def solution():\n    start_distance = 6300  # distance from friend's house at 8.00 am in meters\n    half_hour_distance = 1800  # distance from friend's house at 8.30 am in meters\n    distance_covered_in_half_hour = start_distance - half_hour_distance\n\n    # Assumes he runs at a constant speed\n    total_distance_to_cover = start_distance\n    time_to_cover_total_distance = (total_distance_to_cover / distance_covered_in_half_hour) * 0.5  # in hours\n\n    # Start time is 8.00 am, so we add the time needed to the start time\n    start_time_hours = 8\n    start_time_minutes = 0\n    time_to_reach_in_hours = start_time_hours + time_to_cover_total_distance\n    time_to_reach_in_minutes = (time_to_reach_in_hours - int(time_to_reach_in_hours)) * 60\n    final_hour = int(time_to_reach_in_hours)\n    final_minutes = int(round(time_to_reach_in_minutes))\n\n    # Format the final time, assuming no day switch (am to pm) is needed\n    final_time = f\"{final_hour:02d}:{final_minutes:02d} am\"\n\n    return final_time\n\nans = solution()"
    ],
    "d8d809f89a7b4ed380c0e0f2a53b344a": [
        "def solution():\n    # Mr. Smith's mixture\n    mr_smith_total_volume = 300 + 600  # in mL\n    mr_smith_sugar_content = 300 * 0.50 + 600 * 0.20  # in mL\n\n    # Mrs. Smith's mixture known part\n    mrs_smith_known_volume = 700  # in mL\n    mrs_smith_known_sugar_content = 700 * 0.10  # in mL\n\n    # Mrs. Smith's mixture unknown part\n    mrs_smith_unknown_volume = 300  # in mL\n\n    # The sugar content percentage is assumed to be the same\n    # Let's calculate the total percentage for Mr. Smith\n    mr_smith_sugar_percentage = mr_smith_sugar_content / mr_smith_total_volume\n\n    # Set the equation for Mrs. Smith's total sugar content\n    # Total volume for Mrs. Smith is known (700 mL + 300 mL = 1000 mL)\n    # Unknown is the x% sugar in 300 mL\n    # (mrs_smith_known_sugar_content + 300 * x / 100) / 1000 = mr_smith_sugar_percentage\n    # Solve for x\n\n    x = symbols('x')\n    equation = Eq((mrs_smith_known_sugar_content + mrs_smith_unknown_volume * x / 100) / (mrs_smith_known_volume + mrs_smith_unknown_volume), mr_smith_sugar_percentage)\n\n    x_value = solve(equation, x)\n\n    # Round to the nearest two decimal places\n    return round(x_value[0], 2)\n\nans = solution()"
    ],
    "93c6119a0fb64233a3a47cabdebb6ab5": [
        "def solution():\n    from math import factorial\n\n    # Total number of ways without any restrictions (5 people can line up in 5! ways)\n    total_ways = factorial(5)\n\n    # Now count the number of ways in which the two specific people stand next to each other\n    # Consider the pair of two refusing people as a single person, giving us 4 \"people\" to line up\n    ways_with_pair_together = factorial(4)\n\n    # But the two specific people can switch places with each other, so we must multiply by 2\n    ways_with_pair_together *= 2\n\n    # Subtract the ways in which the two people stand next to each other from the total number of ways\n    ways_with_pair_apart = total_ways - ways_with_pair_together\n\n    return ways_with_pair_apart\n\nans = solution()"
    ],
    "3acaa5a4f1c749c2a12dac032c35167c": [
        "def solution():\n    # Since each friend must get at least one ice-cream cone,\n    # we can start by giving each one cone. This leaves 2 cones to be distributed.\n    remaining_cones = 5 - 3\n    \n    # The number of ways to distribute the remaining cones is equivalent to\n    # the number of solutions to the equation x + y + z = remaining_cones\n    # where x, y, z are non-negative integers. This is a stars and bars problem.\n    # The formula for the number of ways to distribute n identical items into k bins\n    # is C(n+k-1, k-1), where C is the binomial coefficient.\n    \n    from math import comb\n    num_ways = comb(remaining_cones + 3 - 1, 3 - 1)\n    \n    return num_ways\n\nans = solution()"
    ],
    "56e4adc68056477b9e25d947d40d0245": [
        "def solution():\n    total_vegetables = 60\n    sold_on_monday = (2 / 3) * total_vegetables\n    remaining_vegetables = total_vegetables - sold_on_monday\n    sold_on_tuesday = (2 / 5) * remaining_vegetables\n\n    total_sold = sold_on_monday + sold_on_tuesday\n    return total_sold\n\nans = solution()"
    ],
    "91f7c2d158094aecab623a3dd7d51aae": [
        "def solution():\n    # Worst case scenario, we need to avoid getting 16 balls of one color\n    # and 13 balls of another up until the last pick.\n    \n    # So we can take up to 15 balls from each of the five colors (one less than 16).\n    # Additionally, we need to consider the 12 balls from each of the five colors\n    # (one less than 13) to avoid getting 13 of the second color before getting the 16th of the first.\n    # Then in the worst case scenario, the next ball we pick would give us either 16 of one color\n    # or 13 of a second color.\n\n    # Total = (15 balls from each of the 5 colors) + (12 additional balls from the 4 remaining colors)\n    balls_to_pick = (15 * 5) + (12 * 4) + 1  # The plus one represents the final pick that ensures the condition\n\n    return balls_to_pick\n\nans = solution()"
    ],
    "565d75f4184c40158e38b62f8b7a8e56": [
        "def solution():\n    ans = 26.1 / 10000\n    return ans\n\nans = solution()"
    ],
    "8c2140926a504b439da436bc045ac3fb": [
        "def solution():\n    total_sum = 0\n    for i in range(5, 856, 15):\n        total_sum += i - (i - 5)\n    return total_sum\n\nans = solution()"
    ],
    "fd6c4c01349c419f8b677eaff8345ce3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    p, q = symbols('p q')\n\n    equation1 = Eq(p, 4 * q)\n    equation2 = Eq(p, q + 2700)\n\n    solutions = solve((equation1, equation2), (p, q))\n\n    return solutions[q]\n\nans = solution()"
    ],
    "2b2a2e587ee14b41a501ab4265950264": [
        "def solution():\n    total_biscuits = 12\n    biscuits_given_away = total_biscuits / 4\n    biscuits_left = total_biscuits - biscuits_given_away\n\n    return int(biscuits_left)\n\nans = solution()"
    ],
    "1b10af37f10e4e378350822821ccd0e2": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Declare symbols for A, B, and C\n    A, B, C = symbols('A B C')\n\n    # Equations given in the problem\n    eq1 = C + B - 18\n    eq2 = B - 3*A\n    eq3 = C + A - 10\n\n    # Solve the system of equations\n    result = solve((eq1, eq2, eq3), (A, B, C))\n\n    # Answer for B\n    return result[B]\n\nans = solution()"
    ],
    "f959c9aa94cb4444a05fed72622f9203": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the cost of one table, and c be the cost of one chair.\n    t, c = symbols('t c')\n\n    # According to the problem:\n    # 2 tables + 5 chairs = 220 pounds\n    # 1 table = 3 chairs\n    eq1 = Eq(2 * t + 5 * c, 220)\n    eq2 = Eq(t, 3 * c)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (t, c))\n\n    return solutions[t]\n\nans = solution()"
    ],
    "fdf01e833d7c4f0a82c64b43a8d356df": [
        "def solution():\n    nums = [1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 29]\n    ans = sum(nums)\n    return ans\n\nans = solution()"
    ],
    "23deca2dec7341899b3bd1e49078449d": [
        "def solution():\n    spent = 1.55 + 2.25\n    remaining_fraction = 4 / 5\n    initial_money = spent / (1 - remaining_fraction)\n    return initial_money\n\nans = solution()"
    ],
    "cf14830fc6664a70a173fbe0ffbab834": [
        "def solution():\n    principal = 4000\n    rate = 3.81 / 100\n    time = 5\n    \n    amount = principal * (1 + rate * time)\n    \n    return amount\n\nans = solution()"
    ],
    "fba9a6dc71794e82967fc086a3bcc09b": [
        "def solution():\n    return 75 * 0.40\n\nans = solution()"
    ],
    "f83284a837da4e2fb26549abab697c91": [
        "def solution():\n    hook_walk = 20\n    lily_walk = hook_walk - 5\n    return lily_walk\n\nans = solution()"
    ],
    "ffd358a18901488c82211c659492c7a0": [
        "def solution():\n    ans = (125 + 75) * (630 - 616)\n    return ans\n\nans = solution()"
    ],
    "608176c2f8294c308bc2eb16e490831d": [
        "def solution():\n    total = 0\n    for i in range(5, 856, 5):\n        if i % 10 == 5:\n            total += i\n        else:\n            total -= i\n    return total\n\nans = solution()"
    ],
    "43898b2ed2594f919d1a1e91a9899bc8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    P, Q = symbols('P Q')\n    \n    equation1 = Eq(P, 4 * Q)\n    equation2 = Eq(P, Q + 2700)\n\n    solutions = solve((equation1, equation2), (P, Q))\n\n    return solutions[Q]\n\nans = solution()"
    ],
    "9554ef69c62a485194537701b7cbafe1": [
        "def solution():\n    first_term = 50\n    difference = -1\n    num_terms = 30\n\n    # Use the formula for the sum of an arithmetic sequence: n/2 * (2a + (n-1)d)\n    sum_of_sequence = num_terms / 2 * (2 * first_term + (num_terms - 1) * difference)\n\n    return int(sum_of_sequence)\n\nans = solution()"
    ],
    "59500938d9aa429c963148ba7e8054ea": [
        "def solution():\n    # Number of pizzas needed for 30 people\n    pizzas_for_30 = 12\n    # Number of people now\n    people_now = 35\n\n    # Calculate the unit rate (pizzas per person)\n    unit_rate = pizzas_for_30 / 30\n\n    # Calculate the total number of pizzas needed for 35 people\n    pizzas_needed = unit_rate * people_now\n\n    # Round up since you can't have a fraction of a pizza\n    from math import ceil\n    ans = ceil(pizzas_needed)\n\n    return ans\n\nans = solution()"
    ],
    "c28579adfb0e4c66af894392fda2aa03": [
        "def solution():\n    teams = 16\n    rounds = 0\n    while teams > 1:\n        teams /= 2\n        rounds += 1\n    return rounds\n\nans = solution()"
    ],
    "16eb3c5479c84e7488205bd06c552370": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    julie = symbols('julie')\n    marion = 2 * julie\n    ethan = 5 * julie\n    equation = Eq(marion - ethan, -168)\n\n    julie_pay = solve(equation, julie)[0]\n    marion_pay = 2 * julie_pay\n    ethan_pay = 5 * julie_pay\n    total_pay = julie_pay + marion_pay + ethan_pay\n\n    return total_pay\n\nans = solution()"
    ],
    "501a0a55ecd341dc996261f472d570c8": [
        "def solution():\n    return 21 * 5\n\nans = solution()"
    ],
    "98fccede682543abb0a7e6ce6c0a6e69": [
        "def solution():\n    import math\n\n    count = 0\n    for i in range(1, 2017):\n        number = i * 72\n        sqrt_number = math.isqrt(number)\n        if sqrt_number * sqrt_number == number:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "aebe8c69595b46bf9a87e30c9324afe4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wands, cards = symbols('wands cards')\n    equation1 = Eq(wands + cards, 69)\n    equation2 = Eq(wands, cards + 17)\n\n    solutions = solve((equation1, equation2), (wands, cards))\n\n    return solutions[wands]\n\nans = solution()"
    ],
    "3fc92a68dae34f66b6cd792e86640204": [
        "def solution():\n    cost_per_lollipop = 5\n    num_lollipops = 10\n    \n    total_cost = cost_per_lollipop * num_lollipops\n    \n    return total_cost\n\nans = solution()"
    ],
    "71f696cfd5a84b80996ceb9957f484a3": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The number of children is 0 modulo 5\n    # The number of children is 6 modulo 7 (1 has to sit out)\n    # The number of children is 7 modulo 8 (1 has to sit out)\n    congruences = [(0, 5), (6, 7), (7, 8)]\n\n    result = solve_congruence(*congruences)\n    \n    if result is not None:\n        return result[0]\n    else:\n        return \"No solution\"\n\nans = solution()"
    ],
    "665b5255c92349eb9ddeb5d93d37b49d": [
        "def solution():\n    original_value = 160\n    new_value = 40\n    percent_change = ((new_value - original_value) / original_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "f44c4462b0f64bab846629402568bf16": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the variables\n    x = symbols('x')  # x is the number of years we are trying to find\n\n    # Set up the equations based on the problem description\n    # Let d = Danny's current age and e = Efron's current age\n    # We know that:\n    # d = e + 30 (Efron is 30 years younger than Danny)\n    # d/e = 8/3 (current age ratio of Danny to Efron)\n    # (d+x) / (e+x) = 5/3 (future age ratio)\n\n    # From the first two pieces of information, we can determine the current ages of Danny and Efron\n    # d = 8k and e = 3k for some positive integer k\n    # Since d = e + 30, we have 8k = 3k + 30\n    k = symbols('k')\n    eq1 = Eq(8*k, 3*k + 30)\n    k_value = solve(eq1, k)[0]\n\n    # Calculate Danny and Efron's current ages\n    d = 8 * k_value\n    e = 3 * k_value\n\n    # Now set up the equation involving x, the number of years until the 5:3 ratio\n    eq2 = Eq((d + x) / (e + x), 5 / 3)\n    # Solve for x\n    x_value = solve(eq2, x)[0]\n    \n    return x_value\n\nans = solution()"
    ],
    "29030dd68348449a8312e00b2527cb9e": [
        "def solution():\n    ans = 427 * 100\n    return ans\n\nans = solution()"
    ],
    "70c940fee10b465a84d7c757aa018a9e": [
        "def solution():\n    cookies_per_gram_of_butter = 100 / 40\n    grams_of_butter_for_150_cookies = 150 / cookies_per_gram_of_butter\n    return grams_of_butter_for_150_cookies\n\nans = solution()"
    ],
    "830a6979358f4071bfa17925dbf71666": [
        "def solution():\n    marks = [27, 28, 26, 24, 20]\n    mean_mark = sum(marks) / len(marks)\n    return mean_mark\n\nans = solution()"
    ],
    "6718d58202814857b7fb4876e51e86b3": [
        "def solution():\n    count = 0\n    for i in range(1, 405):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "418a9a3d03a942a4a2c621e1a1688350": [
        "def solution():\n    sophie_tshirts = 13\n    sister_tshirts = sophie_tshirts - 5\n    return sister_tshirts\n\nans = solution()"
    ],
    "46ab1acc8aff4e4fa30eb837311aab05": [
        "def solution():\n    pencil_colours = 15\n    ruler_colours = 20\n    pen_colours = 10\n\n    pencil_ruler_combinations = pencil_colours * ruler_colours\n    ruler_pen_combinations = ruler_colours * pen_colours\n    pencil_pen_combinations = pencil_colours * pen_colours\n\n    # Since you can choose only two items, it's a combination of 2 items taken at a time\n    total_combinations = pencil_ruler_combinations + ruler_pen_combinations + pencil_pen_combinations\n    \n    return total_combinations\n\nans = solution()"
    ],
    "4700822a4e3e41d3bd6cf4dda57b3084": [
        "def solution():\n    # Calculate the number of games in the group stage\n    # Each group has 4 teams, and each team plays against every other team once\n    games_per_group = (4 * (4 - 1)) // 2  # Combination C(4, 2) for each group\n    total_group_games = games_per_group * 8  # There are 8 groups\n\n    # Calculate the number of games in the knockout round\n    # After group stage, 16 teams enter knockout round\n    # 8 for round of 16, 4 for quarterfinals, 2 for semifinals\n    # Additionally, 1 for third place match, and 1 for the final\n    total_knockout_games = 15 + 1  # 15 games from round of 16 to semifinals, plus third-place match\n\n    # Total games played\n    total_games = total_group_games + total_knockout_games\n\n    return total_games\n\nans = solution()"
    ],
    "eaa3534db535408eb1b161cbafa4af7a": [
        "def solution():\n    count = 0\n    # Iterate through all possible values of the second digit from 1 to 9 (since it's a digit).\n    for second_digit in range(1, 10):\n        first_digit = 1 + 2 * second_digit\n        # Check if first_digit is a valid digit (less than 10).\n        if first_digit < 10:\n            # Iterate through all possible values of the third digit from 0 to 9.\n            for third_digit in range(0, 10):\n                if 9 < first_digit + second_digit + third_digit < 14:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "496c9d2a7f38418389c85a6060857948": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    big_class, small_class = symbols('big_class small_class')\n    \n    apples_for_big = 2 * big_class\n    oranges_for_big = 3 * big_class\n    apples_for_small = 2 * small_class\n    oranges_for_small = 2 * small_class\n    \n    total_apples = Eq(apples_for_big + apples_for_small, 48)\n    total_oranges = Eq(oranges_for_big + oranges_for_small, 55)\n    \n    solutions = solve((total_apples, total_oranges), (big_class, small_class))\n    \n    return solutions[small_class]\n\nans = solution()"
    ],
    "d9a90dd46e1b4f7b8ea8abbd0d0cda50": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the ball and racket prices\n    ball, racket = symbols('ball racket')\n\n    # Equation 1: The total cost of the ball and racket is £30\n    equation1 = Eq(ball + racket, 30)\n\n    # Equation 2: The racket costs £28 more than the ball\n    equation2 = Eq(racket, ball + 28)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (ball, racket))\n\n    return solutions[ball]\n\nans = solution()"
    ],
    "7f68a155e73c4da8811ddfc74a0de5bb": [
        "def solution():\n    ans = -6 / 6 == 6\n    return ans\n\nans = solution()"
    ],
    "90d54cf3746b403a998b30644e14ed6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n\n    # equation for 3 apples and 2 bananas\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    # equation for 1 apple and 1 banana\n    equation2 = Eq(apple + banana, 0.48)\n\n    # solve the equations for the price of an apple and a banana\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    # calculate the cost of 5 bananas\n    cost_5_bananas = 5 * solutions[banana]\n\n    return cost_5_bananas\n\nans = solution()"
    ],
    "67d603b406954580bb312d236cca3026": [
        "def solution():\n    matches = 15\n    n = (1 + (1 + 8 * matches) ** 0.5) // 2\n    return int(n)\n\nans = solution()"
    ],
    "0c56c61f84034ba086b7ccfeb89c1dd8": [
        "def solution():\n    from sympy import factorint\n    \n    # Prime factorization of the number to get the powers of prime factors\n    factors_dict = factorint(224)\n    # To find the number of factors, increment each power by 1 and multiply them together\n    num_factors = 1\n    for power in factors_dict.values():\n        num_factors *= (power + 1)\n    \n    return num_factors\n\nans = solution()"
    ],
    "c7dac16768af42858204c39c3827fc02": [
        "def solution():\n    n = 1\n    while n * (n - 1) / 2 != 15:\n        n += 1\n    return n\n\nans = solution()"
    ],
    "49cdd6b806674d4aaf0cef8780f8f8cb": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n\n    ans = pencils * rulers * pens\n\n    return ans\n\nans = solution()"
    ],
    "f55b7420a598495d8cb743d46cebb8de": [
        "def solution():\n    total_questions = 10\n    points_correct = 6\n    points_incorrect = -2\n    total_points = 44\n\n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        if points_correct * correct_answers + points_incorrect * incorrect_answers == total_points:\n            return correct_answers\n\nans = solution()"
    ],
    "f7d16bba0eef40749220aeee30f11c1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    shorts, t_shirt = symbols('shorts t_shirt')\n    equation1 = Eq(2 * shorts + 3 * t_shirt, 26)\n    equation2 = Eq(2 * shorts + 5 * t_shirt, 40)\n\n    solutions = solve((equation1, equation2), (shorts, t_shirt))\n\n    return solutions[t_shirt]\n\nans = solution()"
    ],
    "129b35bd2e4c40649186f5cfd5e08f55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining symbols for the number of triangles and quadrilaterals\n    triangles, quadrilaterals = symbols('triangles quadrilaterals')\n\n    # Given 2 pentagons, number of quadrilaterals is 82 more than triangles\n    equation1 = Eq(quadrilaterals, triangles + 82)\n\n    # Triangles have 3 sides, quadrilaterals have 4, pentagons have 5, all shapes have 394 sides\n    # 3 * triangles (for 3 sides each) + 4 * quadrilaterals + 5 * 2 (for 2 pentagons)\n    equation2 = Eq(3 * triangles + 4 * quadrilaterals + 5 * 2, 394)\n\n    # Now solve for triangles and quadrilaterals\n    solutions = solve((equation1, equation2), (triangles, quadrilaterals))\n\n    return solutions[quadrilaterals]\n\nans = solution()"
    ],
    "661c4eed4a32448abe382838199f26bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 's' be the cost of a pair of shorts and 't' be the cost of a T-shirt\n    s, t = symbols('s t')\n    \n    # Writing down the system of equations based on the problem statement\n    eq1 = Eq(2 * s + 3 * t, 26)  # 2 pairs of shorts and 3 T-shirts cost £26\n    eq2 = Eq(2 * s + 5 * t, 40)  # 2 pairs of shorts and 5 T-shirts cost £40\n\n    # Solving the system of equations for 's' and 't'\n    solution = solve((eq1, eq2), (s, t))\n\n    return solution[t]\n\nans = solution()"
    ],
    "32b965ddd9334985a59c4e74953701c5": [
        "def solution():\n    count = 0\n    for i in range(10, 100): # from 10 to 99, which are the two-digit numbers\n        tens = i // 10\n        ones = i % 10\n        if tens == ones + 3:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "39341763d576440d9bf2d603ec9d0a28": [
        "def solution():\n    first_term = 0.3\n    second_term = 0.8\n    common_difference = second_term - first_term\n    third_term = first_term + 2 * common_difference\n    return third_term\n\nans = solution()"
    ],
    "0568330ddd524498892da0859a5ec187": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of sweets Rachel and Alice originally have\n    rachel, alice = symbols('rachel alice')\n    \n    # Create equation based on the first condition where Rachel gives Alice 10 sweets\n    equation1 = Eq(rachel - 10, alice + 10)\n    \n    # Create equation based on the second condition where they both eat 8 sweets\n    # and Rachel ends up with 3 times the sweets Alice does\n    equation2 = Eq(rachel - 8, 3 * (alice - 8))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n    \n    # Calculate the total number of sweets they originally had\n    total_sweets = solutions[rachel] + solutions[alice]\n    \n    return total_sweets\n\nans = solution()"
    ],
    "73f073ef77d3485a9e2db22b74b4d99c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let r represent the number of sweets Rachel has originally\n    # Let a represent the number of sweets Alice has originally\n    r, a = symbols('r a')\n    \n    # If Rachel gives Alice 10 sweets, they will have the same amount\n    equation1 = Eq(r - 10, a + 10)\n    \n    # If they both eat 8 sweets, Rachel will have 3 times the sweets Alice has\n    equation2 = Eq(r - 8, 3 * (a - 8))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (r, a))\n    \n    # Calculate the total number of sweets they originally had\n    total_sweets = solutions[r] + solutions[a]\n    \n    return total_sweets\n\nans = solution()"
    ],
    "842908b1fc5d4a659cac34d9f6c84d6b": [
        "def solution():\n    # Let the number of all-girl teams be g\n    # According to (iⅲ), the number of all-boy teams is 2g\n    # From (i) and (ii), we have\n    # 15 single-boy teams + 27 multi-boy teams = 2g all-boy teams\n    # 15 + 27 = 2g\n    # Now, calculate g\n    g = (15 + 27) / 2\n\n    # Total number of teams is 150 students / 3 per team\n    total_teams = 150 / 3\n\n    # Now we know the number of all-girl teams (g) and all-boy teams (2g),\n    # and we can calculate mixed teams (single-boy teams + multi-boy teams = 15 + 27)\n    mixed_teams = total_teams - g - (2 * g)\n\n    # Calculate the total number of girls:\n    # Girls in all-girl teams = 3 * number of all-girl teams (g)\n    # Girls in mixed teams = Mixed teams - 15 single-boy teams\n    total_girls = (3 * g) + (mixed_teams - 15)\n\n    return total_girls\n\nans = solution()"
    ],
    "184cf0c663e945deb8bdb09f3954a920": [
        "def solution():\n    lcm = (3 * 5 * 7) # Least common multiple of 3, 5, and 7\n    for i in range(10, 100): # Last two digits range from 10 to 99\n        number = int(\"6\" + str(i))\n        if number % lcm == 0:\n            return number\n\nans = solution()"
    ],
    "cfc59e7dc0614196bfb7795914dacdef": [
        "def solution():\n    ans = 63 - (55 - 27)\n    return ans\n\nans = solution()"
    ],
    "ae1a09d2d17649718463491e636b12d1": [
        "def solution():\n    score = 36\n    total = 40\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "bab688e90abc4ad7a664334dbd742c1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, peaches, pears = symbols('apples peaches pears')\n\n    equation1 = Eq(apples, 5 + 6 * pears)\n    equation2 = Eq(peaches, 3 * pears - 2)\n    equation3 = Eq(apples + peaches + pears, 73)\n\n    solutions = solve((equation1, equation2, equation3), (apples, peaches, pears))\n\n    return solutions[apples]\n\nans = solution()"
    ],
    "519312ec2beb41659919be97138e6ba6": [
        "def solution():\n    product = 2*5*7*2*5*7*2*5\n    sum_of_digits = sum(int(digit) for digit in str(product))\n    return sum_of_digits\n\nans = solution()"
    ],
    "5bd7e5a5661d47afb0bef048489bb3fe": [
        "def solution():\n    # Convert the numbers from base 7 to decimal\n    dec_61_base_7 = int(str(61), 7)\n    dec_34_base_7 = int(str(34), 7)\n\n    # Calculate the difference in decimal\n    diff_in_decimal = dec_61_base_7 - dec_34_base_7\n\n    # Convert the result back to base 7\n    ans = ''\n    while diff_in_decimal > 0:\n        ans = str(diff_in_decimal % 7) + ans\n        diff_in_decimal //= 7\n\n    return int(ans)\n\nans = solution()"
    ],
    "00c7ec21843b40aba2d39a75810ffc85": [
        "def solution():\n    # Let the distance between Town A and B be D km.\n    # If Ben cycles at 10 km/h and arrives at 10 am:\n    # Time taken at 10 km/h = D / 10\n    # If Ben cycles at 15 km/h and arrives at 8 am:\n    # Time taken at 15 km/h = D / 15\n    # Since the time difference between 10 am and 8 am is 2 hours:\n    # Time difference = Time at 10 km/h - Time at 15 km/h = (D / 10) - (D / 15) = 2 hours\n    \n    # Finding distance D:\n    # (D / 10) - (D / 15) = 2 \n    # (3D / 30) - (2D / 30) = 2 \n    # D / 30 = 2\n    # D = 60\n\n    D = 60  # Distance in km\n\n    # Ben wants to arrive at 9 am which is 1 hour after 8 am and 1 hour before 10 am\n    # Since at 10 km/h it takes D / 10 hours and he would arrive at exactly 10 am,\n    # To arrive at 9 am, he needs to take 1 hour less, so the time he has is (D / 10) - 1\n    # Let the required speed be S:\n    # So we need to find S such that D / S = (D / 10) - 1\n    # Replacing D with 60 km, we have:\n    # 60 / S = (60 / 10) - 1\n    # 60 / S = 6 - 1\n    # 60 / S = 5\n    # S = 60 / 5\n    # S = 12 km/h\n\n    S = D / 5  # Required speed in km/h\n\n    return S\n\nans = solution()"
    ],
    "c5e1085504df4fe38872ff3a46620cd6": [
        "def solution():\n    dog_to_rabbit_weight_ratio = 8\n    rabbit_to_chicken_weight_ratio = 2\n    \n    chicken_weight_equivalent_to_one_dog = dog_to_rabbit_weight_ratio * rabbit_to_chicken_weight_ratio\n    return chicken_weight_equivalent_to_one_dog\n\nans = solution()"
    ],
    "233efeea19724a82bb0152f79a9c9ee1": [
        "def solution():\n    # since there are 2 colors, pulling out 3 gloves will ensure that 2 are of the same color\n    # since there are 2 types (left-hand and right-hand), pulling out 2 more gloves will ensure a matching pair\n    return 3 + 2  # 3 for color, 2 more to guarantee matching type\n\nans = solution()"
    ],
    "00d539f1b4db48d3b3494c0f120062fd": [
        "def solution():\n    candies_per_student_before = 12\n    number_of_students_before = 5\n\n    total_candies = candies_per_student_before * number_of_students_before\n    number_of_students_after = number_of_students_before + 1\n    candies_per_student_after = total_candies // number_of_students_after\n\n    return candies_per_student_after\n\nans = solution()"
    ],
    "80aa447385fb495cb5bf06d8c7b0fdda": [
        "def solution():\n    raj_height = 138\n    david_height = 170\n\n    jacob_height = (raj_height + david_height) / 2\n\n    return jacob_height\n\nans = solution()"
    ],
    "dec3fb034aea47b1b73c5397fa7a6777": [
        "def solution():\n    from sympy import lcm\n\n    # Conditions as per the problem statement\n    num_cards_4 = 4\n    remainder_4 = 3\n    num_cards_5 = 5\n    remainder_5 = 4\n    num_cards_7 = 7\n    remainder_7 = 6\n    \n    # Calculate Least Common Multiple (LCM) of divisors\n    lcm_val = lcm(num_cards_4, num_cards_5, num_cards_7)\n    \n    # Start searching for the least number of cards greater than the LCM \n    # that satisfies all conditions\n    num_cards = lcm_val\n    while True:\n        if (num_cards % num_cards_4 == remainder_4) and \\\n           (num_cards % num_cards_5 == remainder_5) and \\\n           (num_cards % num_cards_7 == remainder_7):\n            break\n        num_cards += lcm_val\n    \n    return num_cards\n\nans = solution()"
    ],
    "815b73a9e29e4090bfd993eec9cfa5f8": [
        "def solution():\n    initial_value = 120\n    depreciation_rate = 0.04\n    years = 5\n\n    final_value = initial_value * (1 - depreciation_rate)**years\n\n    return round(final_value, 2)\n\nans = solution()"
    ],
    "453da806d0d44938b0462fc02a292532": [
        "def solution():\n    total_students = 0\n    boys_diff = 52\n\n    for square_side in range(2, 1000, 2):  # We start with 2 because 1x1 would mean only 1 student, which doesn't fit the problem description\n        boys_in_layer = square_side * 4 - 4\n        girls_in_layer = (square_side - 2) * 4\n        total_boys = boys_in_layer * (square_side // 2)\n        total_girls = girls_in_layer * (square_side // 2) if square_side > 2 else 0\n\n        if total_boys - total_girls == boys_diff:\n            total_students = total_boys + total_girls\n            break\n\n    return total_students\n\nans = solution()"
    ],
    "db9048b0a36740abaf853e98897fbb20": [
        "from math import factorial\n\ndef solution():\n    word = \"REVISE\"\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    \n    total_permutations = factorial(len(word))\n\n    for count in letter_counts.values():\n        total_permutations //= factorial(count)\n\n    return total_permutations\n\nans = solution()"
    ],
    "11200de7f462445fbdc06bbefca57a99": [
        "from math import factorial\n\ndef solution():\n    word = 'REVISE'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    \n    total_permutations = factorial(len(word))\n    for count in letter_counts.values():\n        total_permutations //= factorial(count)\n    \n    return total_permutations\n\nans = solution()"
    ],
    "4873bec7d2b148f0b1a8ce80aa0a60fa": [
        "def solution():\n    # To be divisible by 9, the sum of the digits must be divisible by 9.\n    sum_digits = 1 + 2 + 3 + 4 + 5  # Sum of known digits\n    \n    # Find the value of A such that the sum of digits is divisible by 9\n    for A in range(10):  # A can be from 0 to 9\n        if (sum_digits + A) % 9 == 0:\n            break\n\n    # Now we have the full six-digit number as a string\n    six_digit_number = f\"12345{A}\"\n\n    # The remainder when divided by 4 only depends on the last two digits\n    # of the number (because of the property of divisibility by 4)\n    last_two_digits = int(six_digit_number[-2:])\n\n    # Compute the remainder when the last two digits are divided by 4\n    remainder = last_two_digits % 4\n\n    return remainder\n\nans = solution()"
    ],
    "31d6392f86454fcfabd63010d5f7ac45": [
        "def solution():\n    return 528\n\nans = solution()"
    ],
    "c347c951d6764ecabf96c472825de32c": [
        "def solution():\n    original_price = 480\n    discount_percentage = 35\n    sale_price = original_price * (1 - (discount_percentage / 100))\n    return sale_price\n\nans = solution()"
    ],
    "b381663c286a41b4b2c212c8d9fa625f": [
        "def solution():\n    ans = 7.257 - 3.47\n    return ans\n\nans = solution()"
    ],
    "1edfbfb983cc4026861711aed39ec50b": [
        "def solution():\n    # To win, Kelly needs to ensure that she always leaves Dan in a position where\n    # the number of matches remaining is a multiple of 3 (after Dan's turn).\n    # In this way, Kelly can always control the game and win.\n\n    # Since the total matches are 11, we can work our way backwards to find the\n    # multiple of 3 closest to but less than 11, which is 9.\n    # So Kelly must leave 9 matches after her first turn.\n    # Therefore, Kelly must take away (11 - 9) = 2 matches in the first turn.\n    \n    first_turn_take = 11 % 3\n    if first_turn_take == 0:\n        first_turn_take = 2\n\n    return first_turn_take\n\nans = solution()"
    ],
    "790337bbc4c640c2ba17ccfd95719755": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_flowers = symbols('total_flowers', real=True, positive=True)\n    red_flowers = total_flowers / 2\n    remaining_flowers = total_flowers - red_flowers\n    pink_flowers = 4/7 * remaining_flowers\n    equation = Eq(red_flowers, pink_flowers + 6)\n    \n    flowers_in_garden = solve(equation, total_flowers)\n    \n    return flowers_in_garden[0]\n\nans = solution()"
    ],
    "d7960525f20d4a85b2d07f16b77a89de": [
        "def solution():\n    from fractions import Fraction\n\n    numerator = Fraction(5, 1) + Fraction(1, 7) + Fraction(3, 1) + Fraction(3, 11) + Fraction(1, 1) + Fraction(13, 23)\n    denominator = Fraction(3, 1) + Fraction(3, 7) + Fraction(2, 1) + Fraction(2, 11) + Fraction(1, 1) + Fraction(1, 23)\n\n    result = numerator / denominator\n\n    return result\n\nans = solution()"
    ],
    "c79974cfe3544139952b7aa20868fe35": [
        "def solution():\n    n = 15\n    ans = (n * (n + 1) * (2 * n + 1)) // 6\n    return ans\n\nans = solution()"
    ],
    "fcdca3fe5e6e44a3aaa6b8fc55320938": [
        "def solution():\n    from math import factorial\n\n    num_kids = 3\n    arrangements = factorial(num_kids)\n    \n    return arrangements\n\nans = solution()"
    ],
    "3e876b88a82f4fabb94444319efac888": [
        "def solution():\n    return (65 + 3) // 4\n\nans = solution()"
    ],
    "354d850fc3c644989668ea964029af35": [
        "def solution():\n    total_vehicles = 27\n    total_wheels = 78\n    \n    for cars in range(total_vehicles + 1):\n        motorcycles = total_vehicles - cars\n        wheels = cars * 4 + motorcycles * 2\n        if wheels == total_wheels:\n            return cars\n\nans = solution()"
    ],
    "06bf4f7c67004f1dbe9f03b5dc14516d": [
        "def solution():\n    # Let x be the number of stickers Nicole had initially.\n    # Jason had 20 stickers initially, and after receiving 18 stickers from Nicole, he had 38 stickers.\n    # Nicole had x - 18 stickers after giving 18 to Jason.\n    # Jason had 5 fewer stickers than Nicole after the exchange, so we set up the equation:\n    # 38 (Jason's stickers) = (x - 18) - 5 (Nicole's stickers after giving away 18, minus the 5 that Jason has fewer)\n    # Solve for x:\n    x = 38 + 5 + 18  # Simplifying the equation gives us Nicole's initial number of stickers.\n    return x\n\nans = solution()"
    ],
    "9bf9b1c2a24e4de3a5ed1f6932581844": [
        "def solution():\n    # Increase in length by 10% means the new length is 1.10 times the original length\n    new_length_ratio = 1.10\n\n    # Reduction in breadth to 4/5 of the original breadth\n    new_breadth_ratio = 4 / 5\n\n    # The new height is 11/10 times the original height\n    new_height_ratio = 11 / 10\n\n    # The new volume will be the product of these three ratios\n    new_volume_ratio = new_length_ratio * new_breadth_ratio * new_height_ratio\n\n    # Expressing the new volume as a percentage of the original volume\n    new_volume_percentage = new_volume_ratio * 100\n\n    return new_volume_percentage\n\nans = solution()"
    ],
    "8d09ac1d8970471dbd6ed0727980bd24": [
        "def solution():\n    count = 0\n    # Loop through possible numbers of 2-gram weights (0 to 38, because 2*39 > 77)\n    for two_gram_count in range(0, 39):\n        # Remaining weight to be made up by 3-gram weights\n        remaining_weight = 77 - (two_gram_count * 2)\n        # If remaining weight is divisible by 3, we found a valid combination\n        if remaining_weight % 3 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "2d748e0d6f544f23b0cf14359ab45b8f": [
        "def solution():\n    boys = 176\n    girls = boys - 50\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "3825adc1e7f941ebb2ac15ca5828613b": [
        "def solution():\n    total_distance_km = 5\n    num_marshals = 9\n    intervals = num_marshals - 1\n    distance_between_marshals_m = (total_distance_km * 1000) / intervals\n\n    return distance_between_marshals_m\n\nans = solution()"
    ],
    "33681430650f48419421a99318bdaf3d": [
        "def solution():\n    speed1 = 180  # meters per minute\n    time1 = 6     # minutes\n    speed2 = 120  # meters per minute\n    time2 = 8     # minutes\n\n    distance1 = speed1 * time1\n    distance2 = speed2 * time2\n\n    total_distance = distance1 + distance2\n\n    return total_distance\n\nans = solution()"
    ],
    "c471960bec8946e69cab7ac7cb6411c3": [
        "def solution():\n    total_tiles = 400\n    red_tiles = 0\n    green_tiles = 0\n    current_layer = 1\n    \n    # Since the tiles are arranged in square layers, we need to find the\n    # number of tiles in each layer added until we reach total_tiles.\n    # Knowing that each layer L consists of (2L-1)^2 tiles helps us calculate.\n    while total_tiles > 0:\n        layer_tiles = (2 * current_layer - 1) ** 2\n        total_tiles -= layer_tiles\n        \n        # Alternate between adding to red and green.\n        if current_layer % 2 == 1:\n            red_tiles += layer_tiles\n        else:\n            green_tiles += layer_tiles\n            \n        current_layer += 1\n        \n    # If total_tiles goes below zero, we've subtracted too much, i.e.,\n    # we've gone one layer too far. We need to add the last layer_tiles\n    # count back into total_tiles to determine the color of the last complete\n    # layer, then subtract only the needed tiles from the dominant color.\n    if total_tiles < 0:\n        total_tiles += layer_tiles\n        if current_layer % 2 == 1:\n            green_tiles -= -total_tiles\n        else:\n            red_tiles -= -total_tiles\n            \n    # Determine the dominant color and how many more tiles of that color are present\n    if red_tiles > green_tiles:\n        dominant_color = 'red'\n        more_tiles = red_tiles - green_tiles\n    else:\n        dominant_color = 'green'\n        more_tiles = green_tiles - red_tiles\n\n    return more_tiles\n\nans = solution()"
    ],
    "52895a5f9c584889b60e514eea4cb012": [
        "def solution():\n    # Incorrect sum of marks based on the wrong average\n    incorrect_sum = 74 * 7\n    \n    # Correcting the mistake by removing the incorrect score and adding the correct one\n    correct_sum = incorrect_sum - 81 + 18\n    \n    # Calculating the correct average\n    correct_average = correct_sum / 7\n    \n    return correct_average\n\nans = solution()"
    ],
    "e4b6fc33fb6044dbbf98541fd73229a3": [
        "def solution():\n    principal = 6000\n    interest_rate = 0.03\n    \n    # Calculate interest for the first year\n    first_year_interest = principal * interest_rate\n    first_year_total = principal + first_year_interest\n    \n    # Calculate interest for the second year\n    second_year_interest = first_year_total * interest_rate\n    \n    # Total interest earned at the end of the second year\n    total_interest = first_year_interest + second_year_interest\n    \n    return total_interest\n\nans = solution()"
    ],
    "27def3f9c6524488aff45fe308ba3df3": [
        "def solution():\n    time_per_picture = 10  # Time in minutes to paint one picture\n    total_time = 80  # Total time available in minutes (1 hour and 20 minutes)\n\n    num_pictures = total_time // time_per_picture\n\n    return num_pictures\n\nans = solution()"
    ],
    "0f41145869544b529481d63e5b99081f": [
        "def solution():\n    decimal_value = 1 + (4/7)\n    ans = round(decimal_value, 1)\n    return ans\n\nans = solution()"
    ],
    "4d04c9aca7b14fc0b67361f6a0e0bb64": [
        "def solution():\n    recurring_part = \"428571\"\n    # Since the 68th digit is one before the 69th and Python uses 0-based indexing\n    index = (69 - 1) % len(recurring_part)\n    return int(recurring_part[index])\n\nans = solution()"
    ],
    "b5d689e03b7a4370a956fabc41aa5767": [
        "def solution():\n    total_salt_dylan = 300 * 0.35\n    total_salt_daisy = 200 * 0.50\n    combined_solution_weight = 300 + 200\n    combined_salt_weight = total_salt_dylan + total_salt_daisy\n    concentration = combined_salt_weight / combined_solution_weight\n    return concentration\n\nans = solution()"
    ],
    "c0156725df024018aed39df49f106ef3": [
        "def solution():\n    # Let x be the number of widgets Megacorp sold in 2014\n    # Then Vastco sold 1.68*x widgets in 2014\n    # In 2015, Vastco sold 1.32*1.68*x = 2.2176*x widgets (32% rise)\n    # Also in 2015, Vastco sold 1.44*x widgets according to 44% more sales than Megacorp\n    \n    # Since both expressions represent Vastco's sales in 2015, they are equal:\n    # 2.2176*x = 1.44*y, where y is the number of widgets Megacorp sold in 2015\n    # And we want to find y as a percentage increase over x\n\n    # Thus, 2.2176*x = 1.44*y implies y = (2.2176/1.44) * x\n    megacorp_sales_increase_ratio = 2.2176 / 1.44\n\n    # The percentage increase for Megacorp from 2014 to 2015 is:\n    # ((megacorp_sales_increase_ratio - 1) * x) / x * 100%\n    percentage_increase_megacorp = (megacorp_sales_increase_ratio - 1) * 100\n\n    return percentage_increase_megacorp\n\nans = solution()"
    ],
    "53974104b6a9479d95d1207ebbf1bf13": [
        "def solution(y):\n    return y / 2\n\nans = solution(y)"
    ],
    "a48c37c796244f69b5dd70e1b55e15d4": [
        "def solution():\n    planned_profit_rate = 0.5\n    actual_profit_rate = 0.82\n\n    first_day_sale_rate = 0.7\n    second_day_sale_rate = 1 - first_day_sale_rate\n\n    # total profit is 82% of the planned profit\n    total_actual_profit = actual_profit_rate * planned_profit_rate\n\n    # On the first day, goods are sold at 50% profit, which is 50% of 70% goods\n    first_day_profit = first_day_sale_rate * planned_profit_rate\n\n    # Remaining profit must come from the second day\n    second_day_profit = total_actual_profit - first_day_profit\n\n    # Since it is known that 30% goods are remaining, find the discount rate\n    # for the second day.\n    # Let x be the discount rate for the second day.\n    # Then, profit from the second day is given by (1 - x) * 30% goods\n    # and it should be equal to the second_day_profit found.\n\n    discount_rate_on_second_day = 1 - (second_day_profit / second_day_sale_rate)\n\n    return discount_rate_on_second_day\n\nans = solution()"
    ],
    "5b136def7b58491b81995c72b9ad067a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the children's ages\n    older_son, younger_son, older_daughter, younger_daughter = symbols('older_son younger_son older_daughter younger_daughter')\n\n    # Equations based on the problem statement\n    equation1 = Eq(younger_son - older_son, 3)                  # The two sons were born three years apart\n    equation2 = Eq(younger_daughter - older_daughter, 2)        # The two daughters were born two years apart\n    equation3 = Eq(younger_son, 2 * older_daughter)             # The younger son is twice the age of the older daughter\n    equation4 = Eq(older_son + younger_son + older_daughter + younger_daughter, 55)  # The sum of the children's ages is 55\n\n    # Solve the set of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (older_son, younger_son, older_daughter, younger_daughter))\n\n    # Find the youngest child of the four\n    youngest_age = min(solutions[older_son], solutions[younger_son], solutions[older_daughter], solutions[younger_daughter])\n\n    return youngest_age\n\nans = solution()"
    ],
    "ffba176a010a4d0187358ab3db7ff0b7": [
        "def solution():\n    jen_beads = 438\n    lily_beads = jen_beads + 195\n    total_beads = jen_beads + lily_beads\n    return total_beads\n\nans = solution()"
    ],
    "4ed24c6d67bb4a53beeb3f3413937be2": [
        "def solution():\n    total_bottles = 48  # Initial number of bottles\n    empty_bottles = 48  # All initial bottles will be empty eventually\n\n    # Continue the loop as long as there are enough empty bottles to exchange\n    while empty_bottles >= 4:\n        new_bottles = empty_bottles // 4  # Get new bottles by exchanging empties\n        total_bottles += new_bottles  # Add new bottles to total\n        # Update the count of empty bottles: new empties plus remainder from exchange minus borrowed bottle\n        empty_bottles = new_bottles + (empty_bottles % 4) - 1\n\n        # If she runs out of bottles and has borrowed one, she gets one more\n        if empty_bottles == -1:\n            total_bottles += 1\n            break  # She cannot borrow more\n\n    return total_bottles\n\nans = solution()"
    ],
    "7519f32e6df34b519be6057181658e4e": [
        "def solution():\n    # Let's denote the total number of pearls originally on the strand by x.\n    # According to the problem, we have:\n    # Half of the pearls fell onto the floor: x/2\n    # A fourth rolled under a chair: x/4\n    # A sixth fell into her lap: x/6\n    # Three pearls remained on the strand: 3\n    # The sum of these should be equal to the original number of pearls, x:\n    # x = x/2 + x/4 + x/6 + 3\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x/2 + x/4 + x/6 + 3, x)\n    solution = solve(equation, x)\n\n    return int(solution[0])\n\nans = solution()"
    ],
    "c34210e64f26416da03013fc4f6aef91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pearls = symbols('pearls')\n    \n    floor = pearls / 2\n    chair = pearls / 4\n    lap = pearls / 6\n    remaining = 3\n\n    equation = Eq(floor + chair + lap + remaining, pearls)\n\n    total_pearls = solve(equation, pearls)\n\n    return total_pearls[0]\n\nans = solution()"
    ],
    "d7ccf6eb76b340b0a3ccd8caf9bcbfda": [
        "def solution():\n    workers = 3\n    days = 3\n\n    # Work done by 1 worker in 1 day\n    work_per_worker_per_day = 1 / (workers * days)\n\n    # Total work done remains the same, so total days needed for 1 worker is:\n    total_days_for_1_worker = 1 / work_per_worker_per_day\n\n    return total_days_for_1_worker\n\nans = solution()"
    ],
    "7f30a1e297f84571b00d9e89bbef9c69": [
        "def solution():\n    ans = 124 - 76\n    return ans\n\nans = solution()"
    ],
    "8bbc403c2d8f461cbbb29a4b072980aa": [
        "def solution():\n    ans = 548 - 45 + 23 - 107\n    return ans\n\nans = solution()"
    ],
    "698be5f0089b4737bfda189fa3acbd25": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    # Initialize a counter for the number of ways.\n    count = 0\n    # Generate all permutations of 4 people entering through 3 entrances.\n    for perm in permutations(range(1, 4), 4):\n        # Check if all entrances are used (at least once).\n        if len(set(perm)) == 3:\n            count += 1\n    # Multiply by the number of ways to assign 4 people to the selected entrances.\n    count *= factorial(4)\n    return count\n\nans = solution()"
    ],
    "067a0a4f635849c888d2b3821c72eb84": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    black, white, grey = symbols('black white grey')\n\n    equation1 = Eq(black, white + 14)\n    equation2 = Eq(grey, white - 2)\n    equation3 = Eq(black + white + grey, 84)\n\n    solutions = solve((equation1, equation2, equation3), (black, white, grey))\n\n    return solutions[white]\n\nans = solution()"
    ],
    "bc13cb301fa84f25ab114f928effbff4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, brother = symbols('john brother')\n    equation1 = Eq(john, brother + 32)\n    equation2 = Eq(john + brother, 246)\n\n    solutions = solve((equation1, equation2), (john, brother))\n\n    return solutions[brother]\n\nans = solution()"
    ],
    "477830e358774ebc992553d65daa5aed": [
        "def solution():\n    for number in range(60, 81):\n        if number % 3 == 0 and number % 8 == 0:\n            return number\n\nans = solution()"
    ],
    "0ab634c3b8454930935d8d7eeae75287": [
        "def solution():\n    # Define the total number of glasses and the amount Peter made\n    total_glasses = 100\n    total_amount = 92\n\n    # Hypothesis: Peter didn't break any glass\n    # So Peter would have made $100 if no glasses were broken\n    supposed_amount_without_breaks = total_glasses\n    \n    # The difference would be the number of glasses broken\n    num_broken_glasses = supposed_amount_without_breaks - total_amount\n\n    return num_broken_glasses\n\nans = solution()"
    ],
    "55d1c0e624b04989949990c12957fded": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # let n be the number of teams\n    n = symbols('n')\n\n    # In a round-robin competition, each team plays with each other team exactly once\n    # Total rounds = n(n-1)/2 because each team plays n-1 games, and each game is between two teams\n    equation = Eq(n*(n-1)/2, 45)\n\n    num_teams = solve(equation, n)\n\n    # There will be two solutions since it's a quadratic equation, one positive and one negative.\n    # We are only interested in the positive number of teams.\n    ans = [sol for sol in num_teams if sol.is_real and sol > 0]\n    \n    return int(ans[0])\n\nans = solution()"
    ],
    "0205b2b75de94213a048023d3039d864": [
        "def solution():\n    answer = (40 - 4) / 2\n    return answer\n\nans = solution()"
    ],
    "64205cfac54a493583dddaf95648be2c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of people, boats in the original scenario,\n    # and the adjusted scenarios (one boat less and one boat more)\n    people, boats = symbols('people boats')\n\n    # Equation 1 (one boat less): (boats - 1) * 9 = people\n    # Equation 2 (one boat more): (boats + 1) * 6 = people\n    equation1 = Eq((boats - 1) * 9, people)\n    equation2 = Eq((boats + 1) * 6, people)\n\n    # We solve for the number of people and the number of boats\n    solutions = solve((equation1, equation2), (people, boats))\n\n    # We are interested in the total number of people\n    ans = solutions[people]\n    return ans\n\nans = solution()"
    ],
    "e17967bd47d74eefa35caffacc4df30e": [
        "def solution():\n    ans = 37 * 4 * 5\n    return ans\n\nans = solution()"
    ],
    "5fa94c02c76e4dfcaadc3cece8a6370b": [
        "def solution():\n    price_per_banana = 98 / 7  # price for one banana in pence\n    total_cost_in_p = 15 * price_per_banana  # cost for 15 bananas in pence\n    total_cost_in_pounds = total_cost_in_p / 100  # convert pence to pounds\n\n    change = 12 - total_cost_in_pounds  # calculate change from £12\n\n    return round(change, 2)  # round the answer to 2 decimal places\n\nans = solution()"
    ],
    "32ddbe1c6e04445387ccdb65a7acb10d": [
        "def solution():\n    for x in range(1, 57):\n        if x + (x + 2) + (x + 4) == 57:\n            return x\n\nans = solution()"
    ],
    "71354bd305fb422b983b708a2e55f7c0": [
        "def solution():\n    for x in [2, 6, 1, 10, 5, 3]:\n        if x * 3 == 6:\n            ans = x\n            break\n    \n    return ans\n\nans = solution()"
    ],
    "24f3890540474354abf2b6aab5320a8e": [
        "def solution():\n    count = 0\n    for x1 in range(3, 15):\n        for x2 in range(3, 15):\n            for x3 in range(3, 15):\n                if x1 + x2 + x3 == 15:\n                    count += 1\n    return count // 6  # to account for permutations of the same numbers\n\nans = solution()"
    ],
    "e4302d8e3fe6443f86fb2f2192888ff3": [
        "def solution():\n    ans = 37 * 4 * 5\n    return ans\n\nans = solution()"
    ],
    "f73c33519c0241a3819521391ab37f99": [
        "def solution():\n    return 495 // 9\n\nans = solution()"
    ],
    "2b306992899a447c8bce44df9392630c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john_initial, peter_initial = symbols('john_initial peter_initial')\n    john_sold = 4/5 * john_initial\n    peter_sold = 3/10 * peter_initial\n    john_left = john_initial - john_sold\n    peter_left = peter_initial - peter_sold\n    \n    equation1 = Eq(john_initial, peter_initial + 180)\n    equation2 = Eq(john_left, 1/2 * peter_left)\n\n    solutions = solve((equation1, equation2), (john_initial, peter_initial))\n\n    return solutions[john_initial]\n\nans = solution()"
    ],
    "749c7cdc53e24203887314d85737cdc8": [
        "def solution():\n    for i in range(5, 16):\n        if i % 4 == 0 and 36 % i == 0:\n            ans = i\n            return ans\n\nans = solution()"
    ],
    "f0c276e8ed7d4821a196335de4288bc4": [
        "from math import gcd\n\ndef solution():\n    pencils = 32\n    pens = 40\n    max_students = gcd(pencils, pens)\n    return max_students\n\nans = solution()"
    ],
    "35b813cb449f448997d243f1033f3d44": [
        "def solution():\n    from itertools import permutations\n\n    # Generate all the possible permutations of 4 digits\n    digits = [1, 3, 4, 7]\n    perms = permutations(digits, 4)\n\n    # Initialize the minimum sum to a large value\n    min_sum = float('inf')\n\n    # Iterate through all permutations\n    for perm in perms:\n        # Form two 2-digit numbers from the permutation\n        num1 = perm[0]*10 + perm[1]\n        num2 = perm[2]*10 + perm[3]\n\n        # Update the minimum sum if a smaller one is found\n        current_sum = num1 + num2\n        min_sum = min(min_sum, current_sum)\n\n    return min_sum\n\nans = solution()"
    ],
    "e9ac9bbd3734447f886684d6a291bb73": [
        "def solution():\n    total_marks = 4 * 60  # Total marks for first 4 tests\n    total_marks += 70     # Add marks for the fifth test\n    average_now = total_marks / 5  # Calculate new average\n\n    return average_now\n\nans = solution()"
    ],
    "794ee5871b124fb5a74edc519e0ba668": [
        "def solution():\n    total_horses = 6\n    total_pigs = 12\n    total_rabbits = 12\n\n    apples_per_horse = 20\n    apples_per_pig = 15\n    apples_per_rabbit = 5\n\n    total_apples_eaten = (total_horses * apples_per_horse) + (total_pigs * apples_per_pig) + (total_rabbits * apples_per_rabbit)\n    total_animals = total_horses + total_pigs + total_rabbits\n\n    average_apples_eaten_per_animal = total_apples_eaten / total_animals\n\n    return average_apples_eaten_per_animal\n\nans = solution()"
    ],
    "f37924ba75cc416ea7c7bd48e7b219c5": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        str_num = str(i)\n        if int(str_num[2]) == (int(str_num[0]) + int(str_num[1])):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a0efd19a57614ce1b7d082746b893c41": [
        "def solution():\n    full_price_per_cup = 4\n    total_cups = 6\n    total_full_price = full_price_per_cup * total_cups\n    \n    discount_first_plan = 0.1 * total_full_price\n    discount_second_plan = 7 if total_cups >= 6 else 0\n    \n    final_price_first_plan = total_full_price - discount_first_plan\n    final_price_second_plan = total_full_price - discount_second_plan\n    \n    ans = min(final_price_first_plan, final_price_second_plan)\n    return ans\n\nans = solution()"
    ],
    "ced80c2b218f4935873bd032dc151175": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    num_peaches, a_students, b_students = symbols('num_peaches a_students b_students')\n\n    # Equations based on the problem statement\n    equation1 = Eq((num_peaches - 10) / 5, a_students) # All peaches to Class A\n    equation2 = Eq((num_peaches + 2) / 8, b_students)  # All peaches to Class B\n    equation3 = Eq(a_students, 3 + b_students)         # Class A has 3 more students than Class B\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (num_peaches, a_students, b_students))\n\n    return solutions[num_peaches]\n\nans = solution()"
    ],
    "762265e33a1846639ea872d9802d0788": [
        "def solution():\n    number = 3172\n    round_to = 100\n\n    ans = round(number / round_to) * round_to\n\n    return ans\n\nans = solution()"
    ],
    "8e18ac8eb4bf4eb1aa2ab441e1aa8f37": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 7), (3, 9), (4, 11)]\n    least_number, _ = solve_congruence(*congruences)\n    \n    return least_number\n\nans = solution()"
    ],
    "359bfb2629704d10a8dd53892a5dc3f6": [
        "def solution():\n    S = sum(int('2' * i) for i in range(1, 2018))\n    last_five_digits = str(S)[-5:]\n    ans = sum(map(int, list(last_five_digits)))\n    return ans\n\nans = solution()"
    ],
    "296fcbb0011f488f90d6fbcdc37797a7": [
        "def solution():\n    total_orange_drink = 12\n    fraction_water = 3 / 4\n    amount_water = total_orange_drink * fraction_water\n    \n    return amount_water\n\nans = solution()"
    ],
    "7a1ae541cfea449eb61ea2f963babc55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    benson_left, jayden_left = symbols('benson_left jayden_left')\n\n    # Benson spent $74\n    # Jayden spent $120\n    # Benson_left = 3 * Jayden_left\n    # Benson_left + Jayden_left + $74 + $120 = $590\n\n    equation1 = Eq(benson_left, 3 * jayden_left)\n    equation2 = Eq(benson_left + jayden_left + 74 + 120, 590)\n\n    solutions = solve((equation1, equation2), (benson_left, jayden_left))\n\n    return solutions[jayden_left]\n\nans = solution()"
    ],
    "af2c741435fd4a9c86c69499b4f20b42": [
        "def solution():\n    return 145 + 37\n\nans = solution()"
    ],
    "09786a51b6224d4080e5d4e9523b4288": [
        "def solution():\n    result = 547 * 479\n    n = result % 10\n    return n\n\nans = solution()"
    ],
    "fd1283ec4ba7444fabc638211f9fb2c9": [
        "def solution():\n    metres = 212.4\n    centimetres_per_metre = 100\n    ans = metres * centimetres_per_metre\n    return ans\n\nans = solution()"
    ],
    "40405459ec9349f392fa92d748ff0ae5": [
        "def solution():\n    return 32068 - 1774\n\nans = solution()"
    ],
    "1893b64c811b4996a464e737aadc6c57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables\n    betty_speed, kevin_speed, betty_time, kevin_time = symbols('betty_speed kevin_speed betty_time kevin_time')\n    \n    # Betty travels for 6 minutes, Kevin travels for 3 minutes less\n    equation1 = Eq(betty_speed * 6, kevin_speed * 3 + 150)  # Distance comparison after Betty's 6 minutes walk\n\n    # Kevin reaches the store in the same time Betty walks additional 900 meters\n    equation2 = Eq(betty_speed * (6 + 3), kevin_speed * 3)  # Kevin reaches the store after 3 additional minutes\n    equation3 = Eq(betty_speed * (6 + 3) + 900, kevin_speed * (6 + 3))  # Betty is 900m away from the cinema\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (betty_speed, kevin_speed, betty_time, kevin_time))\n    \n    kevin_to_store_time = solutions[kevin_speed] * 3  # Kevin's travel time to the store\n    betty_early_leave_time = kevin_to_store_time - 6  # The time Betty left earlier than Kevin\n    \n    return betty_early_leave_time\n\nans = solution()"
    ],
    "b2f8f67236184468a93d906237dd6e44": [
        "def solution():\n    for i in range(1, 380):\n        if i * i + i == 380:\n            return i\n\nans = solution()"
    ],
    "98327552e4884c52bb882152f3999d49": [
        "def solution():\n    total_pet_owners = 143\n    dog_owners = 100\n    goldfish_owners = 14\n    both_owners = 9\n\n    neither_owners = total_pet_owners - (dog_owners + goldfish_owners - both_owners)\n    \n    return neither_owners\n\nans = solution()"
    ],
    "8012fb86c41b408f81b73e1a65e6726b": [
        "def solution():\n    ans = 314 - 159\n    return ans\n\nans = solution()"
    ],
    "459d851ac5cd4dcd8da1397633b3b589": [
        "def solution():\n    total_parts = 1 + 2 + 3\n    total_volume = 300\n    raspberry_part = 1\n\n    raspberry_volume = (raspberry_part / total_parts) * total_volume\n\n    return raspberry_volume\n\nans = solution()"
    ]
}