{
    "559135fce0cc43d09bcdb784b6b68b16": [
        "def solution():\n    n = 15\n    sum_squares = (1/6)*n*(n+1)*(2*n+1) - (1/6)*(4)*(5)*(6)  # Subtract the sum of squares until 4\n    return int(sum_squares)\n\nans = solution()"
    ],
    "3ae45bd14e7f417c9f717caaa1c8e5f6": [
        "def solution():\n    total_bones = 206\n    hand_bone_fraction = 27 / 103\n    finger_bone_fraction_of_hand = 14 / 27\n\n    hand_bones = total_bones * hand_bone_fraction\n    finger_bones = hand_bones * finger_bone_fraction_of_hand\n\n    return int(finger_bones)\n\nans = solution()"
    ],
    "5c4e76cbed394941b52264c055387694": [
        "def solution():\n    remaining_after_bag = 90 / 0.6\n    original_amount = remaining_after_bag / (1 - 0.2)\n    return original_amount\n\nans = solution()"
    ],
    "7598dc1e2b3942f987670ac551b91e44": [
        "def solution():\n    total_students = 36\n    physics_students = total_students * (1/6)\n    biology_students = total_students * (2/9)\n    chemistry_students = total_students - (physics_students + biology_students)\n    return int(chemistry_students)\n\nans = solution()"
    ],
    "f0976cf87d42410886ef671aee576759": [
        "def solution():\n    ans = 167 - 43\n    return ans\n\nans = solution()"
    ],
    "04ba6a8bbd934c9fb2c34951b1c5e1b9": [
        "def solution():\n    # Assume the original number of students is x and they form a square array with side of n\n    # so x = n^2 + 5 and x + 26 = (n + 1)^2\n    # Set up equation n^2 + 5 + 26 = (n + 1)^2\n    \n    n = 1 # Start testing from a square of 1 student\n    while True:\n        if (n + 1)**2 == n**2 + 5 + 26: # Check if this condition is true\n            break # Found the correct value of n\n        n += 1 # Increment n by 1\n    \n    x = n**2 + 5 # Calculate the number of students from the original square\n    return x\n\nans = solution()"
    ],
    "55d37813feb54cc0939c8d521cc804ed": [
        "def solution():\n    amy_apples = 37\n    john_apples = 15\n\n    # Let's assume Amy gives x apples to John\n    # After giving x apples, Amy will have (amy_apples - x) apples\n    # John will have (john_apples + x) apples\n    # Amy wants to have 4 more apples than John\n    # So, (amy_apples - x) = (john_apples + x) + 4\n\n    # Solving the equation for x\n    x = (amy_apples - john_apples - 4) // 2\n\n    return x\n\nans = solution()"
    ],
    "743c478b487e4e84b54812fd75dcf6e2": [
        "from math import factorial\n\ndef solution():\n    n = 9  # total different potted plants\n    r = 4  # number of potted plants to arrange\n\n    # Number of ways to arrange r potted plants out of n is given by P(n, r) = n! / (n-r)!\n    ways = factorial(n) // factorial(n - r)\n\n    return ways\n\nans = solution()"
    ],
    "e17f0eb85a0a4e86a5fdc51debd2ae80": [
        "def solution():\n    sale_price = 99000\n    # Profit calculation for the first house\n    purchase_price_profit_house = sale_price / 1.10\n    profit_first_house = sale_price - purchase_price_profit_house\n    \n    # Loss calculation for the second house\n    purchase_price_loss_house = sale_price / 0.90\n    loss_second_house = purchase_price_loss_house - sale_price\n\n    # Overall profit or loss\n    overall_profit_loss = profit_first_house - loss_second_house\n\n    return overall_profit_loss\n\nans = solution()"
    ],
    "b741d2a40c624148991fcce3147038d7": [
        "def solution():\n    jane_saved = 13\n    ali_saved = jane_saved * 3 + 5\n\n    return ali_saved\n\nans = solution()"
    ],
    "6145df4ce0824a5cb58e397de57d33fd": [
        "def solution():\n    # If Fred takes 1, 2, or 3 oranges, the remaining oranges will be 14, 13, or 12 respectively.\n    # To ensure a win, Fred should aim to leave a multiple of 4 oranges after George's turn\n    # because no matter how many oranges George takes (1, 2, or 3), Fred can always take enough\n    # oranges to leave another multiple of 4, eventually leading to George having to take the last orange.\n\n    # Fred needs to take 3 oranges initially to leave 12 oranges on the table,\n    # which is a multiple of 4. Then, regardless of George's move, Fred can always\n    # take enough oranges to leave another multiple of 4.\n    \n    # For example, if George takes 1 orange (leaving 11), Fred takes 3 (leaving 8).\n    # If George takes 2 oranges (leaving 10), Fred takes 2 (leaving 8).\n    # If George takes 3 oranges (leaving 9), Fred takes 1 (leaving 8).\n\n    # By following this strategy, Fred can always leave a multiple of 4 after George's turn,\n    # which ensures he takes the last orange to win the game.\n\n    # Therefore, Fred should take 3 oranges in his first turn.\n    return 3\n\nans = solution()"
    ],
    "7c040f8b099e47f7b0e8c01b1cc4ecfb": [
        "def solution():\n    shirts = 3\n    pants = 2\n    dresses = 3\n    shoes = 4\n    heels = 2\n\n    combinations_with_pants = shirts * pants * shoes\n    combinations_with_dress_shoes = dresses * shoes\n    combinations_with_dress_heels = dresses * heels\n    \n    total_combinations = combinations_with_pants + combinations_with_dress_shoes + combinations_with_dress_heels\n    return total_combinations\n\nans = solution()"
    ],
    "50918482ad34489a9d43a8fee8182902": [
        "def solution():\n    common_factor = 17\n    sum_of_multipliers = 2 + 3 + 5\n    result = common_factor * sum_of_multipliers\n    return result\n\nans = solution()"
    ],
    "f61b518525e8497db5343129a17e8632": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    tom = symbols('tom')\n    dad_age = 43\n    equation = Eq(4 * tom - 5, dad_age)\n    \n    tom_age = solve(equation, tom)[0]\n    \n    return tom_age\n\nans = solution()"
    ],
    "865d61c08ae7439db106bc956f814d22": [
        "def solution():\n    ans = 66666 * 66666\n    return ans\n\nans = solution()"
    ],
    "b59c5c8afae1475392bc408efcd4db9b": [
        "def solution():\n    start_time = 9 # starts at 9:00\n    end_time = 10 # ends at 10:00\n    class_duration = end_time - start_time\n    return class_duration\n\nans = solution()"
    ],
    "a6f2ff602bea44d790a48701447b7788": [
        "def solution():\n    return 816 // 17\n\nans = solution()"
    ],
    "d8b69834edec4cabaf8b61b1c0041fa7": [
        "def solution():\n    fraction_value = 3 / 20\n    decimal_value = 0.16\n\n    ans = \"3/20\" if fraction_value > decimal_value else \"0.16\"\n    return ans\n\nans = solution()"
    ],
    "538a2dfa1040448b8789e3db2bc69bf4": [
        "def solution():\n    cupcakes = 90\n    cupcakes_per_egg_group = 15\n    eggs_per_group = 3\n\n    total_egg_groups = cupcakes / cupcakes_per_egg_group\n    total_eggs = total_egg_groups * eggs_per_group\n\n    return int(total_eggs)\n\nans = solution()"
    ],
    "087f11a4dea84aec80d825a39e619ea1": [
        "def solution():\n    skipping_rope = 40\n    long_jump = 31\n    both_events = 21\n\n    only_one_event = (skipping_rope - both_events) + (long_jump - both_events)\n    \n    return only_one_event\n\nans = solution()"
    ],
    "39130411ca2f46d8be16d6a43fbef29b": [
        "def solution():\n    # Speed while jogging in km/h\n    jogging_speed = 8\n    # Speed while walking in km/h (half of jogging speed)\n    walking_speed = jogging_speed / 2\n\n    # Time spent jogging in hours (from 6.30 am to 8.30 am)\n    jogging_time = 2\n    # Time spent walking in hours (from 8.30 am to 9.30 am)\n    walking_time = 1\n\n    # Distance travelled while jogging\n    jogging_distance = jogging_speed * jogging_time\n    # Distance travelled while walking\n    walking_distance = walking_speed * walking_time\n\n    # Total distance travelled during her exercise\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "68e2259a732c46c8abe672bceb53dfa2": [
        "def solution():\n    count = 0\n    # permutations of all students\n    from itertools import permutations\n    for perm in permutations('ABCDE'):\n        if perm.index('A') > perm.index('B') and perm.index('A') < perm.index('C'):\n            count += 1\n        elif perm.index('A') < perm.index('B') and perm.index('A') > perm.index('C'):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "05b887b14c214e5085156b2107ca9318": [
        "def solution():\n    ans = 74 * 15 * 8 * 250\n    return ans\n\nans = solution()"
    ],
    "f945574dc9954c9b93f6e0ecf99884de": [
        "def solution():\n    # Let n be the number of each type of note.\n    # The total value is calculated by 5*n + 10*n + 20*n = 280.\n    # Simplify the equation: 35*n = 280. Solve for n.\n    total_value = 280\n    value_per_set = 5 + 10 + 20\n\n    # Find the number of notes (each set containing one of each type).\n    n = total_value // value_per_set\n    \n    # Since there are equal numbers of each note, the total number\n    # of notes is 3 times n (because there are three types of notes).\n    total_notes = n * 3\n\n    return total_notes\n\nans = solution()"
    ],
    "fba5e5ffd4b2401fb75dcd70694a4470": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "f5367d282a3a43acbe086861a0f6d129": [
        "def solution():\n    def diamond(M, N):\n        return M * N + N + 1\n\n    def square(M, N):\n        return 8 * M - N * N\n\n    ans = square(diamond(7, 6), 9)\n    return ans\n\nans = solution()"
    ],
    "14305f680d27486a905dd8dc12e89924": [
        "def solution():\n    from sympy import isprime\n    \n    p = 2\n    while not (isprime(p) and isprime(p + 107)):\n        p += 1\n        \n    return p\n\nans = solution()"
    ],
    "49c26db5eaf641e1a5d1fedde5e7be96": [
        "def solution():\n    # Since we only care about the last digit, we can use modular arithmetic (mod 10)\n    # Last digit of powers of 2 repeats every 4 steps: 2, 4, 8, 6 \n    last_digit_2 = (2**(100%4)) % 10  # Using 100 % 4 because the pattern repeats every 4\n    if last_digit_2 == 0:\n        last_digit_2 = 6  # as 2**4 ends in 6\n    \n    # Last digit of powers of 7 repeats every 4 steps: 7, 9, 3, 1\n    last_digit_7 = (7**(100%4)) % 10  # Using 100 % 4 because the pattern repeats every 4\n    if last_digit_7 == 0:\n        last_digit_7 = 1  # as 7**4 ends in 1\n    \n    # Last digit of powers of 9 repeats every 2 steps: 9, 1\n    last_digit_9 = (9**(100%2)) % 10  # Using 100 % 2 because the pattern repeats every 2\n    if last_digit_9 == 0:\n        last_digit_9 = 1  # as 9**2 ends in 1\n\n    # Multiply the last digits together and again consider only the last digit\n    last_digit = (last_digit_2 * last_digit_7 * last_digit_9) % 10\n\n    return last_digit\n\nans = solution()"
    ],
    "6136c35f10c146b6933727bbeae9cc0f": [
        "from itertools import combinations\n\ndef solution():\n    total_marbles = 16\n    max_pile_size = None\n    \n    # Get all possible combinations for 4 piles that sum up to 16\n    for combo in combinations(range(1, total_marbles), 3):\n        piles = sorted(combo)\n        pile4 = total_marbles - sum(piles)\n        # Check to avoid duplicate sizes and pile4 should be greater than the last pile\n        if pile4 > piles[-1]:\n            piles.append(pile4)\n            if max_pile_size is None or piles[-1] < max_pile_size:\n                max_pile_size = piles[-1]\n    \n    return max_pile_size\n\nans = solution()"
    ],
    "9e090b3df83a42eebe23be5e23c2fa04": [
        "def solution():\n    n = 19 // 2  # Since the series is of odd squares, divide by 2 to get the term count\n    ans = (n * (n + 1) * (2 * n + 1)) // 6\n    return ans\n\nans = solution()"
    ],
    "1efe483e70024fb2ab2678147636e373": [
        "def solution():\n    students = 92\n    capacity = 6\n    minibusses_needed = (students + capacity - 1) // capacity\n    return minibusses_needed\n\nans = solution()"
    ],
    "16569fabb3364f8488579e555b7c2701": [
        "from fractions import Fraction\n\ndef solution():\n    result = sum(Fraction(1, d) for d in range(1, 6))\n    result_in_60ths = result * 60\n    A = result_in_60ths.numerator\n    return A\n\nans = solution()"
    ],
    "9cf8631bfbee42e5855a61e09bcd4e80": [
        "def solution():\n    # If Danny takes 12 minutes to go from the first to the fourth floor,\n    # this implies he passes three intervals (1st to 2nd, 2nd to 3rd, 3rd to 4th).\n    \n    # Since he's moving at a constant speed, the time to pass each interval is the same.\n    # Therefore, the time to pass one interval (e.g., from the first to the second floor) is\n    # 12 minutes divided by 3 intervals.\n    \n    time_per_interval = 12 / 3\n\n    return time_per_interval\n\nans = solution()"
    ],
    "ddc124ebdf394e27ba7e0a2f7f5a5377": [
        "def solution():\n    sum_series = 0\n    for i in range(1, 2008):\n        sum_series += (i ** 2 + (i + 1) ** 2) / (i * (i + 1))\n    return round(sum_series)\n\nans = solution()"
    ],
    "28743e9e9f164cf594fa43bdd40cccc5": [
        "def solution():\n    incorrect_avg = 159\n    correct_avg = 163\n    incorrect_height = 126\n    correct_height = 162\n\n    # Find the deficit caused by the incorrect recording\n    height_deficit = correct_avg - incorrect_avg\n    # The difference between the correct height and incorrect height contributed to this deficit\n    single_height_difference = correct_height - incorrect_height\n\n    # Find out how many times the deficit fits into the single height difference\n    # It gives the number of girls\n    num_girls = single_height_difference / height_deficit\n\n    return int(num_girls)\n\nans = solution()"
    ],
    "d10979d095f949d99d2f66996f58a6b3": [
        "def solution():\n    percentage = 24\n    number = 25\n\n    ans = (percentage / 100) * number\n\n    return ans\n\nans = solution()"
    ],
    "ea6e646ea13c4df596eb009a1fcb24c6": [
        "def solution():\n    result = 16 * 103\n    return result\n\nans = solution()"
    ],
    "9787f436650643b8bcdc8f3423f5efd0": [
        "def solution():\n    def hash_op(a, b):\n        return a * b - 2 * a + 4\n\n    result = 200\n    for i in range(199, 0, -1):\n        result = hash_op(result, i)\n\n    return result\n\nans = solution()"
    ],
    "24dce9b709594b28a5a36bcec14da54f": [
        "def solution():\n    result = 1.5 * 1.3333333333333333 * 1.25 * 1.2 * 1.1666666666666667 * 1.1428571428571428 * 1.125 * 1.1111111111111112\n    return result\n\nans = solution()"
    ],
    "473c8349035b4eefb0b4f9931022b96c": [
        "def solution():\n    n = 7  # Since the series is 1^3, 3^3, ..., 13^3, the n here is (13+1)/2\n    sum_of_series = ((n * (n + 1)) // 2) ** 2  # Using the formula for the sum of cubes\n    return sum_of_series\n\nans = solution()"
    ],
    "262f4235c15a48d8867e110f1ec25448": [
        "def solution():\n    total_apples = 37\n    container_capacity = 4\n\n    num_containers = (total_apples + container_capacity - 1) // container_capacity\n\n    return num_containers\n\nans = solution()"
    ],
    "c464a13a5fa84a98b5f96b4da026c8ac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ken, beth = symbols('ken beth')\n    \n    equation1 = Eq(ken, beth + 75)\n    equation2 = Eq(4/5 * beth, 2/5 * ken)\n    \n    solutions = solve((equation1, equation2), (ken, beth))\n    \n    total_seashells = solutions[ken] + solutions[beth]\n    return total_seashells\n\nans = solution()"
    ],
    "8ffc9bb3b9b14815bbbef4f710602d07": [
        "def solution():\n    for cube_root in range(1, 50):\n        cube = cube_root ** 3\n        square = cube - 2\n        square_root = int(square ** 0.5)\n        if square_root * square_root == square:\n            return square\n\nans = solution()"
    ],
    "24e6a79cbcf3471baf6993ecdd2917eb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    num_2_dollar_notes, num_10_dollar_notes, gift_cost = symbols('num_2_dollar_notes num_10_dollar_notes gift_cost')\n\n    # Equations based on the problem statement\n    total_notes_eq = Eq(num_2_dollar_notes + num_10_dollar_notes, 40)  # David has a total of 40 notes\n    spent_10_notes_eq = Eq(num_10_dollar_notes - 0.4 * num_10_dollar_notes,\n                           4/5 * (num_2_dollar_notes - 0.25 * num_2_dollar_notes))  # The ratio after spending\n    \n    # David spends 40% of the $10 notes and 25% of the $2 notes on a gift\n    gift_cost_eq = Eq(gift_cost, 0.4 * num_10_dollar_notes * 10 + 0.25 * num_2_dollar_notes * 2)\n\n    # Solve the equations\n    solutions = solve((total_notes_eq, spent_10_notes_eq, gift_cost_eq), (num_2_dollar_notes, num_10_dollar_notes, gift_cost))\n\n    # Get the cost of the gift\n    return solutions[gift_cost]\n\nans = solution()"
    ],
    "9fad48b32dd54f7d8f6c57a2e1c1c739": [
        "def solution():\n    # After giving each kid 2 oranges, we have 13 - 2*3 = 7 oranges left\n    # Let's define the count variable to keep track of the number of ways to divide the remaining oranges\n    count = 0\n    \n    # Iterate through all possible numbers of oranges that the first child could get from the remaining\n    for x1 in range(0, 8):\n        for x2 in range(0, 8 - x1):\n            # The third child gets the rest\n            x3 = 7 - x1 - x2\n            # Increment the count since this represents a valid distribution\n            count += 1\n    \n    return count\n\nans = solution()"
    ],
    "e889a2076f404fb8b48259549449cd54": [
        "def solution():\n    sum_of_numbers = sum(range(1, 10)) + 7  # We add the extra 7 here since it's repeated\n    return sum_of_numbers\n\nans = solution()"
    ],
    "48f99615d7554b569d6065aa09ad29fe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables for the two original numbers\n    x, y = symbols('x y')\n    \n    # The first equation represents the correct sum of the numbers\n    equation1 = Eq(x + y, 11.63)\n    \n    # The second equation represents the sum as calculated by Oliver\n    # where one of the numbers' decimal point is shifted\n    # We assume x is the number with the decimal shifted\n    equation2 = Eq(x / 10 + y, 5.87)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Calculate one hundred times the difference between the two numbers\n    difference = abs(solutions[x] - solutions[y]) * 100\n    \n    return difference\n\nans = solution()"
    ],
    "a1026833d23d4e0d9b3d3b7fc72eed9b": [
        "def solution():\n    from math import gcd\n\n    ribbon1 = 56\n    ribbon2 = 42\n    ribbon3 = 84\n\n    greatest_common_divisor = gcd(gcd(ribbon1, ribbon2), ribbon3)\n\n    return greatest_common_divisor\n\nans = solution()"
    ],
    "15dbd49938d249928c98f4f1fcb84fee": [
        "def solution():\n    initial_number = 9876543\n    ans = initial_number + 10000\n    return ans\n\nans = solution()"
    ],
    "7902f1d486d74393bc7de12711dcb3ff": [
        "def solution():\n    # The given product can be transformed using the difference of two squares formula:\n    # (a + b)(a - b) = a^2 - b^2\n    # For each term in the product, we can find a corresponding term such that:\n    # (1 + 1/2^n)(1 - 1/2^n) = 1 - 1/2^2n\n    # But we have in our product only the positive term (1 + 1/2^n),\n    # So each term is like the (a + b) part of the difference of squares (a+b)(a-b) = a^2 - b^2.\n    # To get the (a - b) part, the next term provides it:\n    # For example: (1 + 1/2)(1 + 1/4) -> here (1 + 1/4) can work as (a - b) for the next term of (1 + 1/8)\n    \n    # We can notice that each term in the product cancels out a part of the term which follows it.\n    # Let's write the first few terms fully simplified and observe the pattern:\n    # (1 + 1/2)(1 + 1/4) = 3/2 * 5/4 = 15/8\n    # (1 + 1/8)(1 + 1/16) = 9/8 * 17/16 = 153/128\n    \n    # Canceling the 2^3 in the denominator from 15/8 and 2^7 from 153/128 leaves us with the form:\n    # (2 - 1/8)(2 - 1/128)\n    # It's easy to see that for each i-th term, we have (2 - 1/2^(2^i))\n    \n    # Thus the n-th term will have a denominator that is 2^(2^n)\n    # Given that the product equals to 2(1 - 1/2^(2^n)), the only term not canceled is from the 2009-th term.\n    # Which means, n should be 2009\n\n    n = 2009\n    return n\n\nans = solution()"
    ],
    "6c29f3b41d5a4f7889347840102cd90e": [
        "def solution():\n    return 342 // 6\n\nans = solution()"
    ],
    "fc2dc1ff01c442ee8bac9a42520f29e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sally, john = symbols('sally john')\n\n    equation1 = Eq(sally + 3, 6 * (john + 3))\n    equation2 = Eq(sally + john, 50)\n\n    solutions = solve((equation1, equation2), (sally, john))\n\n    return solutions[sally]\n\nans = solution()"
    ],
    "c1ee40d11fbd48de808886c4e3c9346a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    licia, krisnam, imran = symbols('licia krisnam imran')\n\n    equation1 = Eq(licia, 3 * krisnam)\n    equation2 = Eq(imran, licia + 138)\n    equation3 = Eq(licia + krisnam + imran, 2238)\n\n    solutions = solve((equation1, equation2, equation3), (licia, krisnam, imran))\n\n    return solutions[imran]\n\nans = solution()"
    ],
    "249ff97ab0a04659a46ad1e415926b19": [
        "def solution():\n    ans = (7/8) * 32\n    return ans\n\nans = solution()"
    ],
    "97c6599317ae40c0a130a7c36adb4b0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bill, son, father = symbols('bill son father')\n\n    equation1 = Eq(bill, 2 * son)\n    equation2 = Eq(son, father - 50)\n    equation3 = Eq(bill + son + father, 142)\n\n    solutions = solve((equation1, equation2, equation3), (bill, son, father))\n\n    return solutions[bill]\n\nans = solution()"
    ],
    "06973ad362db4d66ba9d6b002e663ba0": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 4):\n        P, A, S, O = perm\n        if P == 0:  # P cannot be zero as it's the first digit of a 4-digit number\n            continue\n        PASO = P * 1000 + A * 100 + S * 10 + O\n        SOPA = S * 1000 + O * 100 + P * 10 + A\n        if PASO - SOPA == 6547:\n            return PASO\n\nans = solution()"
    ],
    "80475a976f7b497ab82f076e94c1eb50": [
        "def solution():\n    num = 100\n    while True:\n        if num % 7 == 1 and num % 9 == 5:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "83bd57b5f2044e249a35cf1dc299b27f": [
        "def solution():\n    mark_money = 26\n    sue_money = mark_money / 2\n    total_money = mark_money + sue_money\n    return total_money\n\nans = solution()"
    ],
    "a509801c05d046ddbb0f80cbc8f2de96": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Harry's water as H and Liam's water as L\n    H, L = symbols('H L')\n\n    # Original total amount of water\n    total_water = Eq(H + L, 640)\n\n    # After transferring 90 ml of water from Liam to Harry\n    transfer_water = Eq(H + 90, 3 * (L - 90))\n\n    # Solve the equations\n    solutions = solve((total_water, transfer_water), (H, L))\n\n    return solutions[H]\n\nans = solution()"
    ],
    "eaa3bd18a64e40968b71f7429893a5f4": [
        "def solution():\n    first_day = 3\n    common_difference = 3\n    total_days = 7\n\n    # Using arithmetic series sum formula: S_n = n/2 * (2a + (n - 1)d)\n    total_questions = (total_days / 2) * (2 * first_day + (total_days - 1) * common_difference)\n    \n    return int(total_questions)\n\nans = solution()"
    ],
    "37ff6eaa86e84fce88804835c34d1857": [
        "def solution():\n    # Let's denote the rate at which the man drinks as m barrels per day,\n    # and the rate at which his wife drinks as w barrels per day.\n    \n    # The man can finish the barrel in 15 days, so his rate is 1/15 barrels per day.\n    m = 1/15\n    \n    # Together they can finish the barrel in 12 days, so their combined rate is 1/12 barrels per day.\n    combined_rate = 1/12\n    \n    # Their combined rate is the sum of their individual rates: 1/12 = m + w\n    # We can find his wife's rate by subtracting the man's rate from the combined rate.\n    w = combined_rate - m\n\n    # The wife's time to finish the barrel on her own is the inverse of her rate.\n    wife_time = 1 / w\n    \n    return wife_time\n\nans = solution()"
    ],
    "9402dca5a2494aaa90174d3dcc2b38f6": [
        "def solution():\n    return 7.55 + 6.32 + 6.45 - 5.32\n\nans = solution()"
    ],
    "5538dcae57d5405daf57ad4e6cbaefbe": [
        "def solution():\n    # Define the common difference (d) of the arithmetic sequence based on increments\n    # between the given hours.\n    d = (28 - 20)  # Increments are the same and can be found by subtracting counts between hours\n\n    # Given:\n    # 20 beans from 9-10\n    # 28 beans from 10-11 (20 + d)\n    # 36 beans from 11-12 (20 + 2*d)\n    # We need to find the number of beans from 7-8 (two hours before 9-10)\n    # So it will be 20 beans - 2*d = the number of beans from 7-8\n    first_hour_beans = 20 - 2 * d\n\n    return first_hour_beans\n\nans = solution()"
    ],
    "de889839b5114b1296f34ad36b21626e": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 6:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "2168499404134fc2adf349c4200b2d1b": [
        "from math import comb\n\ndef solution():\n    total_ways = 0\n    # The number of white balls remaining can range from 3 to 8 (inclusive)\n    for white_balls_left in range(3, 9):\n        # The number of red balls remaining can range from 2 to 5 (inclusive, since there are only 5 red balls)\n        for red_balls_left in range(2, 6):\n            # The number of black balls remaining can range from 0 to 3 (inclusive)\n            for black_balls_left in range(0, 4):\n                # The number of balls picked of each color\n                white_balls_picked = 9 - white_balls_left\n                red_balls_picked = 5 - red_balls_left\n                black_balls_picked = 6 - black_balls_left\n                \n                # If the total number of balls picked is 10, calculate the combinations\n                if white_balls_picked + red_balls_picked + black_balls_picked == 10:\n                    total_ways += comb(9, white_balls_picked) * comb(5, red_balls_picked) * comb(6, black_balls_picked)\n    \n    return total_ways\n\nans = solution()"
    ],
    "ef3f3f94225949a58df726e58eb69b6c": [
        "def solution():\n    result = 77.5 * 0.52 + 5.2 * 2.25\n    return result\n\nans = solution()"
    ],
    "6cb9a183b95a46fb81d725bba4fbd059": [
        "def solution():\n    remainder = (2 ** 10) % 3\n    return remainder\n\nans = solution()"
    ],
    "bf0d9139a15044e2ba9ab0bab0208c0f": [
        "def solution():\n    insect_length_cm = 5\n    snake_length_m = 1\n    snake_length_cm = snake_length_m * 100\n    times_smaller = snake_length_cm / insect_length_cm\n    return times_smaller\n\nans = solution()"
    ],
    "89ff81f6b03f4a6eb38de4755a3e7b7a": [
        "def solution():\n    term = 1\n    difference = 2\n    while term < 100:\n        term += difference\n        difference += 2\n    return term - difference\n\nans = solution()"
    ],
    "395df03e3da54196a51c7ff3b7a39d90": [
        "def solution():\n    mean_initial = 120\n    mean_final = 150\n    num_numbers_initial = 3\n    num_numbers_final = 4\n\n    total_initial = mean_initial * num_numbers_initial\n    total_final = mean_final * num_numbers_final\n\n    fourth_number = total_final - total_initial\n\n    return fourth_number\n\nans = solution()"
    ],
    "b9d47fcf7dbb40338318bab5201d44a1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pearls = symbols('pearls')\n    \n    floor = pearls / 2\n    chair = pearls / 4\n    lap = pearls / 6\n    strand = 3\n    \n    equation = Eq(floor + chair + lap + strand, pearls)\n    \n    original_pearls = solve(equation, pearls)\n    \n    return original_pearls[0]\n\nans = solution()"
    ],
    "33e3182a110545e4aac441cab30efd1b": [
        "def solution():\n    initial_mass = 2.3\n    given_away = 0.76\n    remaining_mass = initial_mass - given_away\n    return round(remaining_mass, 1)\n\nans = solution()"
    ],
    "53089c6bd249446b8b0196fbb0b9703a": [
        "def solution():\n    ans = 372 * 6\n    return ans\n\nans = solution()"
    ],
    "cc6e6ddc9099471392da17b986cd942e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # We are solving the following system of congruences:\n    # x = 0 (mod 7)   - The first number is a multiple of 7.\n    # x+2 = 0 (mod 8) - The second number is a multiple of 8; therefore, (x = -2 mod 8).\n    # x+4 = 0 (mod 9) - The third number is a multiple of 9; therefore, (x = -4 mod 9).\n    congruences = [(0, 7), (-2, 8), (-4, 9)]\n\n    # Solving the system using the Chinese Remainder Theorem\n    x, _ = solve_congruence(*congruences)\n\n    # The sum of these three numbers is 3x + 6\n    return 3 * x + 6\n\nans = solution()"
    ],
    "3fa1ccdaf7494491b72d7cb7bb7823d5": [
        "def solution():\n    full_weight = 80\n    half_full_weight = 60\n\n    # Subtract the half full weight from the full weight to find the weight of the half of the mangoes\n    half_mangoes_weight = full_weight - half_full_weight\n\n    # Subtract the weight of half of the mangoes from the half full weight to get the weight of the empty basket\n    empty_basket_weight = half_full_weight - half_mangoes_weight\n\n    return empty_basket_weight\n\nans = solution()"
    ],
    "4d3f432b490949d3925832026d9e4a66": [
        "def solution():\n    # Pip is 6th from the front, so there are 5 people in front of Pip\n    # Bud is 6th from the end, so there are 5 people behind Bud\n    # There are 5 children between Pip and Bud, including neither Pip nor Bud\n    # So we sum these three numbers together and add 2 for Pip and Bud themselves\n    total_children = 5 + 5 + 5 + 2\n    return total_children\n\nans = solution()"
    ],
    "cd7290c100ba4294b7ef33d6d31bec83": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 5), (4, 6), (1, 7)]\n    lcm_value = solve_congruence(*congruences)\n    return lcm_value[0]\n\nans = solution()"
    ],
    "14ae67b1d73847249fcea1dbc5eda7df": [
        "def solution():\n    first_term = 10\n    difference = (25 - 10) // (4 - 1)\n    number_of_rows = 25\n\n    last_term = first_term + (number_of_rows - 1) * difference\n    \n    total_athletes = (first_term + last_term) * number_of_rows / 2\n    \n    return int(total_athletes)\n\nans = solution()"
    ],
    "d398f7f40bb64d5fb8ef87ec0477dcf5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let p be the total age of the parents now\n    p = symbols('p')\n    \n    # The total age of the family now\n    total_age_now = 29 * 6\n    \n    # The total age of the parents now\n    parents_age_now = total_age_now - 64\n    \n    # The average age of the parents 3 years ago\n    average_age_parents_3_years_ago = (parents_age_now - 3*2) / 2\n    \n    return average_age_parents_3_years_ago\n\nans = solution()"
    ],
    "257342f894034d4f8d8102d254731724": [
        "def solution():\n    total_paintings_done = 35\n    total_days_so_far = 5\n    total_paintings_target = 56\n\n    paintings_per_day = total_paintings_done / total_days_so_far\n    remaining_paintings = total_paintings_target - total_paintings_done\n    additional_days_needed = remaining_paintings / paintings_per_day\n\n    return round(additional_days_needed)\n\nans = solution()"
    ],
    "524b8c04c5894f029a0397c7af386fd8": [
        "def solution():\n    sum_result = 3 * 8  # 3 added 8 times\n    ans = sum_result // 3  # Find the factor that multiplies with 3 to give the sum_result\n    return ans\n\nans = solution()"
    ],
    "63e2e26e1682446aac1d93fad30b5007": [
        "def solution():\n    total_papers = 18\n    interval = 3\n    num_leaves = total_papers // (interval + 1)\n    return num_leaves\n\nans = solution()"
    ],
    "dc8c93a375a54464922a54b1b49ff957": [
        "def solution():\n    term_5 = 8\n    term_12 = 50\n    # The difference in term number\n    term_diff = 12 - 5\n    # The difference in term value\n    term_value_diff = term_12 - term_5\n    \n    # Difference between consecutive terms\n    common_difference = term_value_diff / term_diff\n    \n    return common_difference\n\nans = solution()"
    ],
    "155a2124ddcf40f9b74dff87ab3c4f69": [
        "def solution():\n    return 95 * (37 + 42 + 21)\n\nans = solution()"
    ],
    "e4deea45600b48659f31a194ff56e172": [
        "def solution():\n    ans = 35 * 24\n    return ans\n\nans = solution()"
    ],
    "54fd381d66a4495b81ec629060372915": [
        "def solution():\n    from itertools import combinations\n\n    # Time taken by each person in minutes.\n    times = [7, 9, 4, 10]\n    fastest_time = 0\n\n    # Strategy: Send the two fastest over first, they return with the fastest,\n    # then send the two slowest over, and have the fastest come back to re-cross with the remaining person.\n    \n    times.sort()  # Sort the times for convenience\n    fastest, second_fastest, second_slowest, slowest = times\n\n    # Two possible strategies:\n    # Strategy 1: Fastest goes with each of the other ones, coming back each time.\n    strategy1 = (slowest + fastest + second_slowest + fastest + second_fastest)\n    \n    # Strategy 2: Fastest and second fastest go first, send fastest back.\n    # Slowest and second_slowest go, send second_fastest back, and lastly fastest and second_fastest go.\n    strategy2 = (fastest + 2*second_fastest + second_slowest + slowest)\n    \n    # The shortest time strategy is selected.\n    fastest_time = min(strategy1, strategy2)\n    \n    return fastest_time\n\nans = solution()"
    ],
    "f16ba08240ad425e89f61fc8df41e78f": [
        "def solution():\n    first_term = 2\n    common_difference = 3\n    last_term_initial = 242\n    \n    # Calculate the number of terms in the original arithmetic sequence\n    n_initial = ((last_term_initial - first_term) // common_difference) + 1\n    \n    # Every time we erase the first 3 terms, we reduce the number of terms by 2\n    # Since we stop when there are only 3 terms left,\n    # we can calculate how many sets of 3 terms we erase\n    sets_erased = (n_initial - 3) // 2\n\n    # Calculate the second term after all sets of 3 terms are erased\n    # The second term = first term + common difference\n    second_term_after_erasures = (first_term + 2 * common_difference * sets_erased)\n    \n    return second_term_after_erasures\n\nans = solution()"
    ],
    "b2a960366a1e4206865a6d0760704900": [
        "def solution():\n    numbers = [0.01, 0.08, 0.13, 0.2, 0.9]\n    closest_value = min(numbers, key=lambda x: abs(x - 0.1))\n\n    return closest_value\n\nans = solution()"
    ],
    "21925b1973084732a0bda763e78de8cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2*x + 3*x + 2, 30 + 6*x - 8*x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7a9b9029d5734b7c90666cccb4699070": [
        "def solution():\n    numbers = [29, 37, 76, 63, 24, 45, 61, 55]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "e9e6206bf20f4a548fb5ea4a8b0d40b5": [
        "def solution():\n    # Let p = Pip's weight, b = Bud's weight, and o = Bob's weight\n    \n    # The average weight of Pip and Bud is 30 kg, so (p + b) / 2 = 30\n    # The average weight of Pip and Bob is 33 kg, so (p + o) / 2 = 33\n    # The average weight of Bud and Bob is 36 kg, so (b + o) / 2 = 36\n    \n    # From the averages we can write the following equations:\n    # p + b = 2 * 30 = 60\n    # p + o = 2 * 33 = 66\n    # b + o = 2 * 36 = 72\n    \n    # To find Pip's weight, we can solve the system of equations for p\n    from sympy import symbols, Eq, solve\n\n    p, b, o = symbols('p b o')\n    equation1 = Eq(p + b, 60)\n    equation2 = Eq(p + o, 66)\n    equation3 = Eq(b + o, 72)\n\n    solutions = solve((equation1, equation2, equation3), (p, b, o))\n\n    return solutions[p]\n\nans = solution()"
    ],
    "7e73704f04d44c6bb2d64ca0206cc145": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define symbols\n    distance, original_time, reduced_time = symbols('distance original_time reduced_time')\n\n    # Original speed equation (distance = speed * time)\n    eq1 = Eq(distance, 30 * 60)  # in meters, considering her original speed is 1m/s and she runs for 30 minutes\n    \n    # Speed after reduced by 20%, which is 80% of the original speed\n    reduced_speed = 0.8 * 60  # in meters/min, considering her original speed is 1m/s\n\n    # Equation for the time taken to cover the remaining distance at a reduced speed\n    eq2 = Eq(reduced_time, 2400 / reduced_speed)  # in minutes\n\n    # Equation for the total time taken, which is 5 minutes more than the original time\n    eq3 = Eq(original_time + reduced_time, 30 + 5)  # in minutes\n\n    # Solve equations for the distance and times\n    solutions = solve((eq1, eq2, eq3), (distance, original_time, reduced_time))\n\n    # Maria's total running distance\n    return solutions[distance]\n\nans = solution()"
    ],
    "f3c93367205a456ea52d0000fc85cdec": [
        "def solution():\n    jacob = 1\n    sisters = 4\n    brothers = 3\n    total_children = jacob + sisters + brothers\n    return total_children\n\nans = solution()"
    ],
    "80ae2580a9e14b43aeb41aca80397bf8": [
        "def solution():\n    initial_people = 5\n    initial_days = 15\n    target_days = 7\n    work = initial_people * initial_days  # Total amount of work required\n    \n    # work is constant, so initial_people * initial_days = new_people * target_days\n    # Rearrange to solve for new_people:\n    new_people = work / target_days\n    \n    additional_people_needed = new_people - initial_people\n    return int(additional_people_needed)  # We need whole people, hence cast to int.\n\nans = solution()"
    ],
    "4df4bcfe8431481b82ea6620cf995bdb": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.07\n    years = 5\n    approximate_dep_value = 0.6957\n\n    final_value = initial_value * approximate_dep_value\n\n    return round(final_value, 2)\n\nans = solution()"
    ],
    "23b6320496c74802b1ab8fa3492896ab": [
        "def solution():\n    return 1.25 * 88\n\nans = solution()"
    ],
    "ea291fdb39c04d6bb392ebad4dae8604": [
        "def solution():\n    # Let x be the number of students in school A originally,\n    # and y be the number of students in school B.\n    # We have two equations:\n    # 1) x + y = 1050  (total students in both schools)\n    # 2) x - 20 = y + 10  (after transferring 20 students, school A has 10 more students than school B)\n    # Solving these equations simultaneously gives the original number of students in school A.\n\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 1050)\n    equation2 = Eq(x - 20, y + 10)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "0447196e6c6246baa9661487a6cbd4c6": [
        "def solution():\n    return 672 // 8\n\nans = solution()"
    ],
    "8ddb5880b1e64f2d96621c773f4f7ace": [
        "def solution():\n    initial_temp = -3  # Temperature at 5:00 am\n    rate_per_hour = 2  # Temperature rise rate in degrees Celsius per hour\n    time_passed = 5.5  # Time passed from 5:00 am to 10:30 am in hours\n\n    final_temp = initial_temp + (rate_per_hour * time_passed)\n\n    return final_temp\n\nans = solution()"
    ],
    "1cfc58120fbc40b6bf8247588930f7c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_money = symbols('initial_money')\n\n    # 1st shop: Spent half plus $1, so remaining is half minus $1\n    after_shop_a = initial_money / 2 - 1\n\n    # 2nd shop: Spent half of the remaining plus $2\n    after_shop_b = after_shop_a / 2 - 2\n\n    # 3rd shop: Spent 1/3 of the remaining plus $3\n    after_shop_c = after_shop_b - (after_shop_b / 3 + 3)\n\n    # After shopping, Mrs Chan had $49 left\n    equation = Eq(after_shop_c, 49)\n\n    # Solve for the initial money\n    initial_amount = solve(equation, initial_money)\n\n    return initial_amount[0]\n\nans = solution()"
    ],
    "caaa1eddd8e44bef93f25acbc57b8371": [
        "def solution():\n    return 12321 // 37\n\nans = solution()"
    ],
    "28774179acd44fbdaf5d40e780523af5": [
        "def solution():\n    total_books = 280\n    num_shelves = 7\n    difference = 3\n\n    # Using arithmetic series sum formula: n/2 * (2a + (n-1)d) = S\n    # where n is the number of terms, a is the first term, and d is the difference\n    # S is the sum of the arithmetic sequence\n    # Here n = num_shelves, S = total_books, and d = -difference\n    # a is the number of books on the top shelf, which we need to find\n    from sympy import symbols, Eq, solve\n    a = symbols('a')\n    shelves_eq = Eq(num_shelves/2 * (2*a + (num_shelves - 1) * (-difference)), total_books)\n    solution_a = solve(shelves_eq, a)\n    return solution_a[0]\n\nans = solution()"
    ],
    "38bf844b32b44c12972bb035ec388106": [
        "def solution():\n    # Total pencils of each color\n    blue = green = white = 3\n    \n    # To guarantee drawing 1 green pencil, Darrell could pick all non-green pencils first\n    # That is, all blue and white ones\n    worst_case_pencils_without_green = blue + white\n    \n    # After picking all blue and white pencils, the next one must be green\n    draw_to_get_green = worst_case_pencils_without_green + 1\n    \n    return draw_to_get_green\n\nans = solution()"
    ],
    "bb1f1a78e8b14c55b2e4ca48c347db8c": [
        "def solution():\n    total_students = 32\n    fraction_boys = 3/4\n    boys = total_students * fraction_boys\n    girls = total_students - boys\n    return int(girls)\n\nans = solution()"
    ],
    "6650434a14d84648b471103d681433eb": [
        "def solution():\n    from sympy import divisors, is_square\n    \n    # Get all divisors of 2240\n    divs = divisors(2240)\n    \n    # Check which divisors make 2240/n a square\n    for d in divs:\n        if is_square(2240 // d):\n            n = d\n            break\n    \n    return n\n\nans = solution()"
    ],
    "02bc5b84f38e437d928aa61c776bd24c": [
        "def solution():\n    from math import lcm\n\n    # The period for each chore\n    sweep_period = 3        # Every 3 days\n    mope_period = 5         # Every 5 days\n    cook_period = 9         # Every 9 days\n    clean_windows_period = 21  # Every 3 weeks (1 week = 7 days)\n\n    # Least Common Multiple (LCM) finds the smallest number that all the periods will divide into\n    ans = lcm(sweep_period, mope_period, cook_period, clean_windows_period)\n\n    return ans\n\nans = solution()"
    ],
    "8b07fa55294340ce938279e09cfc9c8c": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n\n    # Using the Inclusion-Exclusion Principle\n    both_competitions = math_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "0e28012c7afd408599dee757d5a607e6": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 311):\n        for digit in str(i):\n            total_sum += int(digit)\n    return total_sum\n\nans = solution()"
    ],
    "a3f51789234d477fb06391f3a221a5f8": [
        "def solution():\n    ans = 22 * 125 * 8\n    return ans\n\nans = solution()"
    ],
    "e351511a62494ba0991dc2cdd9255710": [
        "def solution():\n    avril_age_now = 8\n    dad_age_now = 5 * avril_age_now\n\n    avril_age_2_years_ago = avril_age_now - 2\n    dad_age_2_years_ago = dad_age_now - 2\n\n    age_difference_2_years_ago = dad_age_2_years_ago - avril_age_2_years_ago\n\n    return age_difference_2_years_ago\n\nans = solution()"
    ],
    "3610afbddbce47998aebfb515c853f57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote c as the total number of candies, and k as the number of kids.\n    c, k = symbols('c k')\n    \n    # If each kid eats 18 candies, then 12 more candies are needed to serve all kids.\n    # So, k * 18 + 12 = total candies\n    equation1 = Eq(k * 18 + 12, c)\n    \n    # If each kid eats 15 candies, the candies are just enough for 2 more kids.\n    # So, (k + 2) * 15 = total candies\n    equation2 = Eq((k + 2) * 15, c)\n    \n    # Now we solve the equations for c and k\n    solutions = solve((equation1, equation2), (c, k))\n    \n    # We get the solution for the number of candies\n    return solutions[c]\n\nans = solution()"
    ],
    "12630e7ba91647e9a662b2150bd08918": [
        "def solution():\n    from sympy import root, Rational, sqrt\n\n    expression = 16.7 - root(\n        ((-4.56)**2 - (8.1)**3) / (7.2)**3 / (-sqrt(Rational(27, 4)) - (-30.15)),\n        3\n    )\n    ans = round(expression.evalf(), 3)\n    return ans\n\nans = solution()"
    ],
    "dea0d88a56c14c18bf792f9e1d676070": [
        "def solution():\n    # Set up the initial ages\n    oliver_age_now = 20\n    lin_age_now = 26\n\n    # Loop until the sum of their ages is 48\n    years_later = 0\n    while (oliver_age_now + lin_age_now) < 48:\n        years_later += 1\n        oliver_age_now += 1\n        lin_age_now += 1\n\n    return years_later\n\nans = solution()"
    ],
    "e61ecccd8d4e46a5bae3436df379fd8e": [
        "def solution():\n    total_distance = 440\n    jayden_speed_ratio = 7\n    carter_speed_ratio = 4\n\n    # The rate at which the distance between them is being closed \n    closing_speed_ratio = jayden_speed_ratio + carter_speed_ratio\n\n    # The fraction of the total distance Jayden covers in the time \n    # it takes for them to meet the first time\n    jayden_fraction = jayden_speed_ratio / closing_speed_ratio\n\n    # Distance Jayden covers until the first meeting\n    first_meeting_distance = total_distance * jayden_fraction\n\n    # Since Jayden immediately turns around and continues walking,\n    # the distance he covers after turning around until meeting Carter again\n    # will be the same as the distance Carter covered until their first meeting.\n    # This is the remaining distance Carter needs to cover, which is also\n    # the distance from Jayden's turning point to the point where he meets Carter again.\n    second_meeting_distance_from_turning_point = first_meeting_distance\n\n    # The second meeting point is the sum of distances Jayden covers until the \n    # first meeting and the distance he covers after turning around.\n    second_meeting_distance_from_A = first_meeting_distance + second_meeting_distance_from_turning_point\n\n    return second_meeting_distance_from_A\n\nans = solution()"
    ],
    "f3a192a1a028460aa34b249e7e3af6b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    mr_lim, mrs_lim = symbols('mr_lim mrs_lim')\n    \n    equation1 = Eq((mr_lim - 7) / (mrs_lim - 7), 6/5)\n    equation2 = Eq(mr_lim + mrs_lim, 69)\n    \n    solutions = solve((equation1, equation2), (mr_lim, mrs_lim))\n    \n    return solutions[mr_lim]\n\nans = solution()"
    ],
    "2ef9562fe8a044c3af3451bfe10a4c3b": [
        "def solution():\n    mean_of_five = 87\n    mean_of_six = 88\n\n    total_score_for_five = mean_of_five * 5\n    total_score_for_six = mean_of_six * 6\n\n    jim_score = total_score_for_six - total_score_for_five\n\n    return jim_score\n\nans = solution()"
    ],
    "914f071ea10440cebf9dbe8becbdbc9d": [
        "def solution():\n    numbers = [58, 63, 59, 62, 63, 56, 61]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "7f06cc0235094faaa81a0a2fb9cab606": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the initial number of stickers Sam had be 7x and Peter had be 5x\n    sam, peter, john_initial, john_final = symbols('sam peter john_initial john_final')\n    x = symbols('x')\n\n    # Sam and Peter gave 20% of their stickers to John\n    sam_gave = 0.20 * 7 * x\n    peter_gave = 0.20 * 5 * x\n\n    # John's stickers increased by 80%, which means 1.80 * john_initial = john_final\n    # And John initially had some stickers, which we can write as (john_final - sam_gave - peter_gave)\n    equation1 = Eq(john_final, 1.80 * (john_final - sam_gave - peter_gave))\n\n    # After giving away stickers, Sam had 20 stickers more than John\n    equation2 = Eq((7 * x - sam_gave) - john_final, 20)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, john_final))\n\n    # Peter's initial amount is 5x\n    peter_initial = 5 * solutions[x]\n\n    return peter_initial\n\nans = solution()"
    ],
    "4a241f99a7b844b08c465d23e0993893": [
        "def solution():\n    one_fifth_length = 6\n    full_length = one_fifth_length * 5\n    one_third_length = full_length / 3\n    return one_third_length\n\nans = solution()"
    ],
    "b4b4e5c5437f4235a2a175fc8db815dd": [
        "def solution():\n    initial_price = 4200\n    first_discount = 0.1  # 10%\n    second_discount = 0.2  # 20%\n\n    price_after_first_discount = initial_price * (1 - first_discount)\n    final_price = price_after_first_discount * (1 - second_discount)\n\n    return final_price\n\nans = solution()"
    ],
    "457a726196e141089b3e12d90241956e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let r represent the original amount of money Raja had (which is also the same amount Kumar had)\n    r = symbols('r')\n    \n    # After spending, Raja's amount is r-286 and Kumar's amount is r-109\n    # Kumar's remaining amount is 4 times Raja's remaining amount\n    equation = Eq(r - 109, 4 * (r - 286))\n\n    # Solving the equation\n    solutions = solve(equation, r)\n    \n    # The solution will be the amount Raja and Kumar each had originally\n    return solutions[0]\n\nans = solution()"
    ],
    "2a7407914fcd4db5b094cbb7fb4b2b91": [
        "def solution():\n    cost_per_item = 6.30 / 9\n    cost_for_eleven_items = cost_per_item * 11\n    return cost_for_eleven_items\n\nans = solution()"
    ],
    "34ba1fe6c4914c9988860c36d1caf4a3": [
        "def solution():\n    total_boys = 47\n    per_minibus = 6\n\n    minibusses_needed = (total_boys + per_minibus - 1) // per_minibus\n\n    return minibusses_needed\n\nans = solution()"
    ],
    "3518cc99e1f044c886a532f40ac85ca4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    equation1 = Eq(table, chair + 160)\n    equation2 = Eq(table + 5 * chair, 328)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[chair]\n\nans = solution()"
    ],
    "9da061efc392431dbe6794c1c302e8e3": [
        "def solution():\n    return 879 + 268\n\nans = solution()"
    ],
    "5b0b415f20824bf48a8768e9f5d5ec26": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n\n    eq1 = Eq(triangle + triangle, square)\n    eq2 = Eq(square + triangle, circle)\n    eq3 = Eq(diamond, circle + square + triangle)\n\n    solutions = solve((eq1, eq2, eq3), (triangle, square, circle, diamond))\n\n    return solutions[triangle].subs(solutions)\n\nans = solution()"
    ],
    "b36b7952db0b4b93a6507a61d91c0d4d": [
        "def solution():\n    total_sum = 10 * 1111\n    mean_diff = 240\n    \n    # Let x be the mean of the last 6 numbers\n    # mean of the first 4 numbers = x - 240\n    # total of the first 4 numbers = 4*(x - 240)\n    # total of the last 6 numbers = 6*x\n    # 4*(x - 240) + 6*x = total_sum\n    \n    x = (total_sum + 4 * 240) / 10\n    \n    return x\n\nans = solution()"
    ],
    "0851ade8e456416a88c4d9132c4034de": [
        "def solution():\n    pip_money_p = 60  # Pip has 60 pence\n    bud_money_pounds = 1.10  # Bud has £1.10\n    \n    # Convert Bud's pounds to pence\n    bud_money_p = bud_money_pounds * 100  # £1 = 100 pence\n    \n    # Calculate total money in pence\n    total_money_p = pip_money_p + bud_money_p\n    \n    # Convert total money back to pounds\n    total_money_pounds = total_money_p / 100\n    \n    return total_money_pounds\n\nans = solution()"
    ],
    "6cd294ca2ca74856bd3764d49417e29b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r represent Rachel's candy and a represent Alice's candy\n    r, a = symbols('r a')\n\n    # If Rachel gives Alice 10 pieces, they have the same amount of candy\n    # r - 10 = a + 10\n    equation1 = Eq(r - 10, a + 10)\n\n    # If Alice gives Rachel 10 pieces, Rachel has 4 more than 3 times Alice's candy\n    # r + 10 = 3 * (a - 10) + 4\n    equation2 = Eq(r + 10, 3 * (a - 10) + 4)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (r, a))\n\n    # Calculate the total number of candy\n    total_candy = solutions[r] + solutions[a]\n\n    return total_candy\n\nans = solution()"
    ],
    "779ed1e319ae4389b632ed4de525a437": [
        "def solution():\n    from itertools import permutations\n    \n    for p in permutations(range(10), 4):\n        i, s, p = p\n        if p == 0:  # P cannot be 0 as it is the first digit of PI\n            continue\n        is_val = i * 10 + s\n        pi_val = p * 10 + i\n        if is_val * 4 == pi_val:\n            return pi_val\n\nans = solution()"
    ],
    "bc4b9a02e5f940dead7da75f6c772177": [
        "def solution():\n    # Let the rate of the hot tap be h and the rate of the cold tap be 2h,\n    # since the cold tap flows at twice the rate of the hot tap.\n    # 1/h = time taken to fill the bath using just the hot tap\n    # 1/(2h) = time taken to fill the bath using just the cold tap\n    # The combined rate of both taps filling the bath is 1/h + 1/(2h) = 3/(2h)\n\n    # We know that it takes 10 minutes (1/6 hours) to fill the bath using both taps\n    # so the combined rate is 1 bath per 10 minutes, or 1/10 bath per minute.\n\n    # We can set up the equation: 1/h + 1/(2h) = 1/10\n    # Multiplying through by 2h to clear the fractions:\n    # 2 + 1 = 2h/10\n    # 3 = 2h/10\n    # h = 3 * 10 / 2\n    # h = 15\n\n    # Now we find the time taken to fill the bath using just the cold tap:\n    # 1/(2h) = 1/(2*15)\n    # It takes 30 minutes to fill the bath using just the cold tap.\n\n    return 30  # the time (in minutes) it would take to fill the bath using just the cold tap\n\nans = solution()"
    ],
    "1f8c8ba64a594dd29927d99fdf51836d": [
        "def solution():\n    # Calculate time spent on each section of the race\n    time_first_part = 280 / 7\n    time_middle_part = 400 / 5\n    time_last_part = (800 - 280 - 400) / 8\n\n    # Total time is the sum of the time spent on all three parts\n    total_time = time_first_part + time_middle_part + time_last_part\n    \n    return total_time\n\nans = solution()"
    ],
    "de8e499d6ea74617b2a986394b5a5443": [
        "def solution():\n    # Given ratio of Jocye's speed to Lori's speed is 3:2\n    ratio_jocye = 3\n    ratio_lori = 2\n\n    # Lori's speed is given as 2 meters per second\n    speed_lori = 2  # meters per second\n\n    # Jocye's speed can be calculated using the ratio\n    speed_jocye = (ratio_jocye / ratio_lori) * speed_lori\n\n    # Distance that Jocye can run in 10 seconds\n    distance_jocye_10_seconds = speed_jocye * 10\n\n    return distance_jocye_10_seconds\n\nans = solution()"
    ],
    "0f0e737c506a401d8cff81ef9c2365a6": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.88\n    years = 8\n\n    value_after_years = initial_value * (depreciation_rate ** years)\n    ans = round(value_after_years, 1)\n\n    return ans\n\nans = solution()"
    ],
    "f42746b63c97449b9bd8019271c9ec21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of baseball bats purchased\n    x = symbols('x')\n\n    # Cost price per bat\n    cost_price = 135\n\n    # Selling price per bat\n    selling_price = 185\n\n    # The remaining bats when the profit is made\n    remaining_bats = 3\n\n    # Profit made by the shop\n    profit = 2945\n\n    # Total cost price for x bats\n    total_cost_price = cost_price * x\n\n    # Total selling price when 3 bats are left\n    total_selling_price = selling_price * (x - remaining_bats)\n\n    # Setting up the equation:\n    # Total selling price - Total cost price = Profit\n    equation = Eq(total_selling_price - total_cost_price, profit)\n\n    # Solving the equation for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "399c54f13ae4483e856b4165e9f0062f": [
        "def solution():\n    probability_A_over_20 = 0.6\n    probability_A_over_25_given_over_20 = 0.3\n\n    probability_A_over_25 = probability_A_over_25_given_over_20 / probability_A_over_20\n\n    return probability_A_over_25\n\nans = solution()"
    ],
    "270f382989f44eca81a1f3f8761a46cb": [
        "def solution():\n    don_speed = 60  # Don's speed in metres per minute\n    total_distance_to_library = 780  # total distance from home to library in metres\n    distance_where_they_meet = 360  # distance from home where Don and Danny meet\n\n    # Don's travel time until he meets Danny\n    don_travel_time = distance_where_they_meet / don_speed\n\n    # Remaining distance to the library from the meeting point\n    remaining_distance = total_distance_to_library - distance_where_they_meet\n\n    # Danny's speed = Remaining distance / Don's travel time\n    danny_speed = remaining_distance / don_travel_time\n\n    return danny_speed\n\nans = solution()"
    ],
    "c2a559c3b6124e8a9ad447bce30b9d43": [
        "def solution():\n    from math import comb\n\n    num_teams = 5\n    num_games = comb(num_teams, 2)\n\n    return num_games\n\nans = solution()"
    ],
    "1302114e84374d8f8d8fde77c6f270af": [
        "def solution():\n    total_digits = 0\n    pages = 0\n    while total_digits < 792:\n        pages += 1\n        total_digits += len(str(pages))\n    return pages - 1  # Subtract one because we exceed 792 in the last iteration\n\nans = solution()"
    ],
    "2266bba4c5654df6ac5b7df6d9d4e424": [
        "def solution():\n    # Total number of students participating in rope skipping\n    rope_skipping = 40\n    # Total number of students participating in long jump\n    long_jump = 31\n    # Number of students participating in both events\n    both_events = 21\n\n    # Number of students participating only in one event\n    # is the sum of the students in each event minus the students participating in both\n    only_one_event = (rope_skipping + long_jump) - both_events\n\n    return only_one_event\n\nans = solution()"
    ],
    "1ea732c5a49c4c82bed4097a4a8a3cc3": [
        "def solution():\n    total_weight = (1.5 + 1.2 + 0.9) # Weight in kg\n    weight_per_tin = total_weight / 8 # Divide by the number of cake tins\n    return weight_per_tin\n\nans = solution()"
    ],
    "9af3526725c54d168b001b25839f37fd": [
        "def solution():\n    ans = sum(i/j for i in range(1, 11) for j in range(i, 11))\n    return ans\n\nans = solution()"
    ],
    "42bf42bdc05245e899b8ef7be48f6759": [
        "from itertools import permutations\n\ndef solution():\n    people = ['A', 'B', 'C', 'D']\n    count = 0\n    for p in permutations(people):\n        if (p[0] == 'A' or p[0] == 'B') or (p[-1] == 'A' or p[-1] == 'B'):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "bed68fc453f94368b47e0f9de6b2c0bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(51 - (15 - 2*x), 11*x)\n\n    x_value = solve(equation, x)\n\n    return x_value[0]\n\nans = solution()"
    ],
    "e7c5db2d941e4d1f9962ca19c545eb0e": [
        "def solution():\n    numerator = 20 * 27\n    denominator = 30\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "cb99f14cb28547ce8a12013d9b435b2b": [
        "def solution():\n    # Maximum number possible without ensuring 4 marbles of the same color:\n    # Take 3 of each color\n    max_without_4_same = 3 * 3\n    \n    # To ensure 4 marbles of the same color, take one more\n    min_to_get_4_same = max_without_4_same + 1\n\n    return min_to_get_4_same\n\nans = solution()"
    ],
    "e7ebfcda9f0740958ddcaf89fb51bd23": [
        "def solution():\n    ans = 727 + 482\n    return ans\n\nans = solution()"
    ],
    "57bb5b4044d043d7ab2ed365ec7917fa": [
        "def solution():\n    digits = ['1', '2', '3']\n    two_digit_numbers = set()\n    \n    for first_digit in digits:\n        for second_digit in digits:\n            if first_digit != second_digit:\n                two_digit_numbers.add(first_digit + second_digit)\n    \n    ans = len(two_digit_numbers)\n    return ans\n\nans = solution()"
    ],
    "c781c988a20442c8b61fad38f74231ea": [
        "def solution():\n    digits = [4, 5, 7, 9]\n    # The smallest 4-digit even number must end with the smallest even digit, which is 4\n    even_digit = 4\n    digits.remove(even_digit)\n    # Now sort the remaining digits to find the smallest combination\n    digits.sort()\n    # Combine the sorted digits with the even digit at the end\n    smallest_number = int(''.join(map(str, digits)) + str(even_digit))\n    return smallest_number\n\nans = solution()"
    ],
    "1a41fe933c714f5dbf0d2b6b1a44c69f": [
        "def solution():\n    for number in range(99, 9, -1):\n        if number % 7 == 5 and number % 13 == 11:\n            return number\n\nans = solution()"
    ],
    "514cdf8bac23435c8c06bbdf81e64567": [
        "def solution():\n    workers = 3\n    days_for_workers = 3\n\n    total_work = workers * days_for_workers\n    days_for_one_worker = total_work / 1\n\n    return days_for_one_worker\n\nans = solution()"
    ],
    "307ab345fabd4b8aaff4b7d5917794fd": [
        "def solution():\n    for x in range(1, 10):     # x is a digit, can't be 0\n        for y in range(10):    # y is a digit, can be 0\n            A = 10 * x + y     # Value of A as xy\n            B = 20 * x + y     # Value of B as 2xy\n            if B == 6 * A + 25:\n                return A       # Return A if the condition is met\n    return \"No solution found\" # If no solution is found\n\nans = solution()"
    ],
    "bc2eaa05c2644d01acc25bd3b154dd7d": [
        "def solution():\n    total_pupils = 39\n    num_rows = 3\n    pupils_per_row = total_pupils // num_rows\n    return pupils_per_row\n\nans = solution()"
    ],
    "f3cda231135d443db7dbdf86f98d01dd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the variables\n    a, b = symbols('a b')\n\n    # Define the two equations\n    equation1 = Eq(a + 12, 16)\n    equation2 = Eq(2 * a + b, 18)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "41c7afc767ed40daaa39d2def9f0bda4": [
        "def solution():\n    unlock_count = 0\n    for i in range(1, 101):\n        if (i % 3 == 0) != (i % 5 == 0):  # Toggle lock state for divisible by 3 or 5, not both\n            continue  # Locker will be locked\n        else:\n            unlock_count += 1  # Locker stays unlocked\n    return unlock_count\n\nans = solution()"
    ],
    "c98d52b67705466d8ba4e69027df1a56": [
        "def solution():\n    # There are 5 places to potentially insert the first opening bracket and 4 places for the closing bracket after the opening bracket\n    # since brackets cannot be empty. For the second pair of brackets, there are initially 3 options for the opening bracket, then 2 for the closing one. However, this includes overlapping cases, which are not allowed.\n    # We will calculate all the possibilities and then subtract the disallowed overlapping ones.\n\n    # The expression parts: \"285\", \"+\", \"15\", \"/\", \"5\", \"-\", \"2\"\n    # Possible bracket insertion points (represented by indexes):\n    # (, 285, +, 15, /, 5, -, 2, )\n\n    # Calculate all the possibilities of inserting one pair of brackets.\n    possibilities_one_pair = 0\n    for i in range(5): # for the opening bracket\n        for j in range(i+1, 6): # for the closing bracket, must be after the opening bracket\n            possibilities_one_pair += 1\n    \n    # Calculate all the possibilities of inserting two pairs of brackets.\n    possibilities_two_pairs = 0\n    for i in range(5): # for the first opening bracket\n        for j in range(i+1, 6): # for the first closing bracket\n            for k in range(5): # for the second opening bracket\n                for l in range(k+1, 6): # for the second closing bracket\n                    if l <= i or k >= j:\n                        # Only count non-overlapping brackets\n                        possibilities_two_pairs += 1\n\n    # The total number of different results is the sum of possibilities with one pair\n    # and two pairs of brackets, since there's no bracket is the original equation \n    # and that gives us the original calculation as one of the results.\n    total_possibilities = possibilities_one_pair + possibilities_two_pairs\n    return total_possibilities\n\nans = solution()"
    ],
    "c27708a444de416daece772484d27182": [
        "import itertools\n\ndef count_valid_permutations(permutation):\n    str_perm = ''.join(permutation)\n    # Check for D and E not being next to each other and FG being together\n    if 'DE' not in str_perm and 'ED' not in str_perm and ('FG' in str_perm or 'GF' in str_perm):\n        # Check if A is in the middle of B and C, not necessarily next to each other\n        for i in range(len(permutation)):\n            if permutation[i] == 'A':\n                # Check positions of B and C related to A\n                if ('B' in permutation[:i] and 'C' in permutation[i+1:]) or ('C' in permutation[:i] and 'B' in permutation[i+1:]):\n                    return True\n        return False\n    else:\n        return False\n\ndef solution():\n    count = 0\n    students = ['A', 'B', 'C', 'D', 'E', 'F', 'G']\n    for permutation in itertools.permutations(students):\n        if count_valid_permutations(permutation):\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "b6d01c501c18487f9e4f3f79d7526cce": [
        "def solution():\n    # When Nicolas reaches level 4, Yiding reaches level 3.\n    # This suggests that for every 4 levels Nicolas climbs, Yiding climbs 3 levels.\n    # Therefore, the ratio of their speeds is 4:3.\n\n    # We need to find out which level Yiding will reach when Nicolas reaches level 16.\n    # If we take the levels as multiples of their speeds, we can find Yiding's level as follows:\n    # 16 levels for Nicolas * (3 levels for Yiding / 4 levels for Nicolas)\n    yiding_level = (16 * 3) // 4\n\n    return yiding_level\n\nans = solution()"
    ],
    "4a96b08695f1451ab05c1c722f12a959": [
        "def solution():\n    # Let the cost of one cake be x dollars\n    # If Lucy buys 10 cakes, the total cost is 10x dollars\n    # She needs to borrow $11, so she has y = 10x - 11 dollars\n    #\n    # If Lucy buys 13 cakes, the total cost is 13x dollars\n    # She needs to borrow $26, so she has y = 13x - 26 dollars\n    #\n    # Therefore, we have two equations:\n    # 10x - 11 = y\n    # 13x - 26 = y\n    #\n    # Subtracting the first equation from the second, we get:\n    # 3x - 15 = 0\n    # Solving for x gives us the cost of one cake.\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    # Creating the equations based on the problem statement\n    equation1 = Eq(10 * x - 11, 13 * x - 26)\n\n    # Solving the equation\n    solution = solve(equation1, x)\n\n    # The cost of one cake\n    return solution[x]\n\nans = solution()"
    ],
    "c9848b7f2bdb4b02b6a8315b987132c2": [
        "def solution():\n    total_mass_boys = 4 * 50\n    total_mass_girls = 6 * 40\n    total_mass_children = total_mass_boys + total_mass_girls\n    average_mass_children = total_mass_children / 10\n\n    return average_mass_children\n\nans = solution()"
    ],
    "cc9a4ae09bbb496aaa4271ae07c4779f": [
        "def solution():\n    divisor = 12\n    quotient = 11\n    remainder = 5\n\n    number = (divisor * quotient) + remainder\n\n    return number\n\nans = solution()"
    ],
    "418d9f95c94b4bab93c8e3700c845d5e": [
        "def solution():\n    part1 = 1 / (2 - 3)\n    part2 = 4 / (5 - 6)\n    part3 = 7 / (8 - 9)\n\n    ans = part1 - part2 - part3\n\n    return ans\n\nans = solution()"
    ],
    "abaab11ba949453489f49e64542f6792": [
        "def solution():\n    num1 = 4.6\n    num2 = 13.8\n    ans = (num1 + num2) / 2\n    return ans\n\nans = solution()"
    ],
    "f1c6632cac7d493a881d8e10eab95ae1": [
        "def solution():\n    total_matches = 5\n    mean_score = 40\n    # Sum of scores in all matches\n    total_score = total_matches * mean_score\n    # Sum of scores in given matches\n    given_scores = 37 + 53 + 29 + 41\n    # Calculate x, which is the missing score\n    x = total_score - given_scores\n    return x\n\nans = solution()"
    ],
    "52dedf9ce05e4ea3a7d65ae01e1338d3": [
        "def solution():\n    count = 0\n    for i in range(1, 100):\n        palindromic_number = int(str(i) + str(i)[::-1])\n        if 1000 <= palindromic_number <= 9999:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "938ae204da174d739962f4162d4b20e8": [
        "def solution():\n    ans = 4336 // 8\n    return ans\n\nans = solution()"
    ],
    "e00d2baa889045a6810756a5f6ded27b": [
        "from math import factorial\n\ndef solution():\n    total_letters = len(\"CHEESE\")\n    c_count = 1\n    h_count = 1\n    e_count = 3\n    s_count = 1\n\n    total_ways = factorial(total_letters) // (factorial(c_count) * factorial(h_count) * factorial(e_count) * factorial(s_count))\n    \n    return total_ways\n\nans = solution()"
    ],
    "06ccb550f9c94b6e88edf78ee248277b": [
        "def solution():\n    count = 0\n    \n    # Count numbers with two sevens and one different digit\n    for digit in range(10):  # different digit could be any of the 10 digits (0-9)\n        if digit != 7:\n            count += 3  # (77X, 7X7, X77)\n            \n    # Count numbers with three sevens\n    count += 1  # 777\n    \n    # Subtract overcounted number (077, 177, ..., 977) as they are not three-digit numbers\n    count -= 9\n    \n    return count\n\nans = solution()"
    ],
    "707f06cacc044e1d85aef697dea2c32f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols we will use to solve the problem.\n    total_animals_initial, goats_initial = symbols('total_animals_initial goats_initial')\n\n    # Equation 1: Based on the initial percentage of cows (which is 65% of total).\n    cows_initial = 0.65 * total_animals_initial\n    # Equation 1.1: Remaining animals are goats.\n    equation1 = Eq(goats_initial, total_animals_initial - cows_initial)\n\n    # Equation 2: After adding 240 animals, 85% are cows (since percentage of cows increased by 20%)\n    # Also, number of goats has doubled.\n    cows_later = 0.85 * (total_animals_initial + 240)\n    goats_later = 2 * goats_initial\n    # Equation 2.1: After the addition, the new total will be initial plus 240\n    equation2 = Eq(cows_later + goats_later, total_animals_initial + 240)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (total_animals_initial, goats_initial))\n\n    return solutions[goats_initial]\n\nans = solution()"
    ],
    "7c5a2dda1a89437a812dee6e6d3c8006": [
        "def solution():\n    for i in range(10000, 100000):\n        original_number = i * 10 + 9\n        new_number = int(str(9) + str(i))\n        if new_number == 4 * original_number:\n            return original_number\n\nans = solution()"
    ],
    "8f0a469087a3468e9dd6d097faa4382a": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    minimum_divisor = 1\n\n    minimum_dividend = minimum_divisor * quotient + remainder\n\n    return minimum_dividend\n\nans = solution()"
    ],
    "9e16012db73740a0b2623e56b90ddb02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Abigail's and Jonathan's current ages\n    Abigail, Jonathan = symbols('Abigail Jonathan')\n\n    # Setup the equations based on the problem statement\n    equation1 = Eq(Abigail, Jonathan + 6)                # Abigail is 6 years older than Jonathan\n    equation2 = Eq(Abigail - 6, 2 * (Jonathan - 6))      # Six years ago she was twice as old as he\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (Abigail, Jonathan))\n\n    # Return Jonathan's age\n    return solutions[Jonathan]\n\nans = solution()"
    ],
    "85287eb8abe94dc69ff3f32348aa3828": [
        "def solution():\n    alice_work_rate = 1 / 40\n    bob_work_rate = 1 / 60\n    total_time = 27\n\n    # Let 'x' be the number of days Alice takes off.\n    # Total work done by Alice and Bob together in 27 days, considering Alice takes 'x' days off.\n    # Work done by Alice = (27 - x) * alice_work_rate\n    # Work done by Bob = 27 * bob_work_rate\n    \n    # The equation for the total work done (which should be equal to 1, the whole job) is:\n    # (27 - x) * alice_work_rate + 27 * bob_work_rate = 1\n\n    # Solving for 'x'\n    x = (1 - (27 * bob_work_rate)) / alice_work_rate + 27\n\n    return x\n\nans = solution()"
    ],
    "1079de7a7656466a8e5c71823b1f57b3": [
        "def solution():\n    def new_operation(a, b):\n        return a * b + a - b\n\n    ans = new_operation(4, 3) - new_operation(3, 4)\n    return ans\n\nans = solution()"
    ],
    "f67eff9f23014ecb8eded92248463a7b": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 4):\n        A, B, C, D = perm\n        if A == 0 or C == 0:  # Leading digits can't be zero\n            continue\n        if ((A*100 + B*10 + A) + (C*100 + D*10 + C)) == 726:\n            return A + B + C + D\n\nans = solution()"
    ],
    "219697dc832b445ca3d9d8288e536ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n\n    equation1 = Eq(pip + bud, 10)\n    equation2 = Eq(pip, bud + 2)\n\n    solutions = solve((equation1, equation2), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "11e8ba58465f4c138c8725a020c95ec7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the price of an apple and a banana\n    apple, banana = symbols('apple banana')\n    \n    # Equations based on the given costs\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apple, banana))\n    \n    # Calculate the cost of 5 bananas\n    cost_5_bananas = 5 * solutions[banana]\n    \n    return cost_5_bananas\n\nans = solution()"
    ],
    "66dcd5cada06407ba1e9153afc26043f": [
        "def solution():\n    initial_amount = 200\n    final_amount = 250\n    increase = final_amount - initial_amount\n    percentage_increase = (increase / initial_amount) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "b9373bcf833d4821b3f8fcb64de110d4": [
        "def solution():\n    for number in range(30, 41):\n        if number % 3 == 0 and number % 4 == 0:\n            return number\n\nans = solution()"
    ],
    "1848190c71c645c0997874fe8ca76815": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the pages in the book (p) and the days (d) to finish reading\n    d, p = symbols('d p')\n    \n    # Create equations based on given information\n    equation1 = Eq(p / 30, d + 2)  # Vanessa will finish 2 days late if she reads 30 pages a day\n    equation2 = Eq(p / 39, d - 4)  # Vanessa will finish 4 days early if she reads 39 pages a day\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (d, p))\n    \n    # Return the number of days and pages of the storybook\n    return solutions[d], solutions[p]\n\nans = solution()"
    ],
    "5262af77457a47089064b6dc77839b82": [
        "def solution():\n    sequence = [2, 0, 2, 0, 0, 2, 0, 2, 2, 0, 2, 0, 0, 2, 0, 2]\n    sequence_length = len(sequence)\n    count_2s_in_sequence = sequence.count(2)\n    \n    full_sequences = 535 // sequence_length\n    remaining_digits = 535 % sequence_length\n    \n    # Count the number of 2s in the full sequences\n    total_2s = full_sequences * count_2s_in_sequence\n    \n    # Count the number of 2s in the remaining part of the sequence\n    total_2s += sequence[:remaining_digits].count(2)\n    \n    return total_2s\n\nans = solution()"
    ],
    "a4663920546242aeb50c5eaeaf379262": [
        "def solution():\n    result = (36 * 37 * 38 * 39 * 40 * 41) % 7\n    return result\n\nans = solution()"
    ],
    "caad5339582b4857888fcff1cca8c78e": [
        "def solution():\n    ans = 126 / 2\n    return ans\n\nans = solution()"
    ],
    "ccbbcf445df24e4ba0699d6f1e37b90a": [
        "def solution():\n    return (1000 + 2000 + 2100) / 17\n\nans = solution()"
    ],
    "070c04e9775b4292869eedb678f57b8f": [
        "def solution():\n    apples_per_box = 5\n    num_boxes = 6\n    total_apples = apples_per_box * num_boxes\n    return total_apples\n\nans = solution()"
    ],
    "b152c6eb52ea4a47bee276fd7fdc5526": [
        "def solution():\n    def delta_operation(a, b):\n        return a**2 + b\n\n    ans = delta_operation(10, 9)\n    return ans\n\nans = solution()"
    ],
    "bf206205208a4e6aaa3f21b6175f11a0": [
        "def solution():\n    result = 3102 // 6\n    return result\n\nans = solution()"
    ],
    "11fb94abf2634f198729473920061c7d": [
        "def solution():\n    total_passengers = 863\n    men = 354\n    children = 165\n    women = total_passengers - men - children\n    return women\n\nans = solution()"
    ],
    "ff8eaf85f9494a4bb58b4c2de7f7a467": [
        "def solution():\n    morning_cookies = 85\n    afternoon_cookies = 135\n    given_cookies = 55\n\n    remaining_cookies = (morning_cookies + afternoon_cookies) - given_cookies\n\n    return remaining_cookies\n\nans = solution()"
    ],
    "c3879ebf82934b73a62fb270f35eee17": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    adult_tickets, child_tickets = symbols('adult_tickets child_tickets')\n\n    equation1 = Eq(adult_tickets * 5 + child_tickets * 3, 75)\n    equation2 = Eq(adult_tickets + child_tickets, 19)\n\n    solutions = solve((equation1, equation2), (adult_tickets, child_tickets))\n\n    return solutions[adult_tickets]\n\nans = solution()"
    ],
    "539ace63a9a84f38adf540a759c0f768": [
        "def solution():\n    # initially, let the total number of fifty-cent coins be represented by f, and the total number of one-dollar coins be d\n    # Owen's initial state based on the problem:\n    # f = (2/7) * (f + d)  # since (2/7) of his coins were fifty-cent coins\n    # Then his mother gave him 10 one-dollar coins and 5-dollars worth of fifty-cent coins,\n    # which equals 10 fifty-cent coins, changing the quantities to (f+10) and (d+10)\n    # Afterwards, he had twice as many one-dollar coins as fifty-cent coins:\n    # (d + 10) = 2 * (f + 10)\n    # Now we have two equations with two variables:\n    # Equation 1: f = (2/7) * (f + d)\n    # Equation 2: d + 10 = 2 * (f + 10)\n    \n    # Rearrange Equation 1: 5f = 2d\n    # Rearrange Equation 2: d = 2f + 10 - 10\n    # Combine them: 5f = 2 * (2f + 10 - 10), after simplifying:\n    # 5f = 4f + 20 - 20\n    # f = 20\n    # Use f to solve for d from Equation 1:\n    # d = (7/2) * f\n    # d = (7/2) * 20\n    # d = 70\n\n    # Total initial coins = f + d\n    total_initial_coins = 20 + 70\n\n    return total_initial_coins\n\nans = solution()"
    ],
    "277ff5ac1d264964a4d29eb33ba74058": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    belt, dress, shirt = symbols('belt dress shirt')\n\n    equation1 = Eq(dress, 3 * belt)\n    equation2 = Eq(shirt, 2 * dress)\n    equation3 = Eq(shirt - belt, 155)\n\n    solutions = solve((equation1, equation2, equation3), (belt, dress, shirt))\n\n    dress_cost = solutions[dress]\n    shirt_cost = solutions[shirt]\n\n    return dress_cost - shirt_cost\n\nans = solution()"
    ],
    "d9a025512c6941b6b97c54521e40115c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables for the number of marbles for Anna, Betsy and Charlene have at the end\n    a, b, c = symbols('a b c')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(a + b + c, 168)  # total marbles\n    equation2 = Eq(a / b / c, 2 / 5 / 7)  # ratio of marbles\n    equation3 = Eq(c - 15, b + 15)  # Charlene gave 15 marbles to Betsy\n    equation4 = Eq(b - 8, a + 8)  # Betsy gave 8 marbles to Anna\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (a, b, c))\n    \n    # Calculate initial number of marbles Betsy had (before transactions)\n    initial_betsy = solutions[b] + 8 - 15\n\n    return initial_betsy\n\nans = solution()"
    ],
    "56a6e5f6729f412081b2719e7253346e": [
        "def solution():\n    andy_savings_per_day = 7\n    brenda_savings_per_day = 6\n    andy_total_savings = 378\n\n    andy_days = andy_total_savings / andy_savings_per_day\n    brenda_total_savings = brenda_savings_per_day * andy_days\n\n    return brenda_total_savings\n\nans = solution()"
    ],
    "d4ec077973ca41e3a9584a6faecfcac3": [
        "def solution():\n    total_questions = 10\n    correct_points = 6\n    incorrect_points = -2\n    total_score = 44\n    \n    for correct in range(total_questions + 1):\n        incorrect = total_questions - correct\n        if correct * correct_points + incorrect * incorrect_points == total_score:\n            return correct\n\nans = solution()"
    ],
    "9060af40a1724e5887ca3ecd529e790f": [
        "def solution():\n    original_length = 1  # Assume original length is 1 unit\n    original_breadth = 1  # Assume original breadth is 1 unit\n    original_height = 1  # Assume original height is 1 unit\n    \n    new_length = original_length * 1.1  # Increase by 10%\n    new_breadth = original_breadth * (4/5)  # Reduce to 4/5\n    new_height = original_height * (11/10)  # New height to original height ratio is 11:10\n    \n    original_volume = original_length * original_breadth * original_height\n    new_volume = new_length * new_breadth * new_height\n    \n    volume_percentage = (new_volume / original_volume) * 100\n    \n    return volume_percentage\n\nans = solution()"
    ],
    "4bdb0a33fd034a4a9f038d5763df3bfc": [
        "def solution():\n    ans = 52 / (2/3)\n    return ans\n\nans = solution()"
    ],
    "db664e372bde470cad3851d48f1d711a": [
        "def solution():\n    return 52836 // 7\n\nans = solution()"
    ],
    "218af0df4ee747b79d4247767d1fee5a": [
        "def solution():\n    from math import factorial\n    \n    contestants = 8\n    podium_spots = 3  # gold, silver, bronze\n    \n    ways = factorial(contestants) // factorial(contestants - podium_spots)\n    \n    return ways\n\nans = solution()"
    ],
    "0fc0dda3957d4f01b0dccedf0adc5e89": [
        "from math import comb\n\ndef solution():\n    num_points = 10\n    num_vertices = 3\n    \n    return comb(num_points, num_vertices)\n\nans = solution()"
    ],
    "c58c5d01acfc430494432756a46333bc": [
        "def solution():\n    return (30+40+50) * 3\n\nans = solution()"
    ],
    "74c9ac42df4148feacf2613537771942": [
        "def solution():\n    percent_remaining = 100 - 60  # 100% - 60% completed = 40% remaining\n    total_masks = 360 * (100 / percent_remaining)\n    return int(total_masks)\n\nans = solution()"
    ],
    "cf37fa4d8197426aa1fcab8a861e06d2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    first_hour, second_hour = symbols('first_hour second_hour')\n    \n    total_mushrooms = Eq(first_hour + second_hour, 40)\n    equal_mushrooms_after_adding = Eq(first_hour + 26, second_hour)\n    \n    solutions = solve((total_mushrooms, equal_mushrooms_after_adding), (first_hour, second_hour))\n    \n    return solutions[second_hour]\n\nans = solution()"
    ],
    "975e68a88e6347caa844fbf5ca68107e": [
        "def solution():\n    # Since there are 5 students, and each must solve a different number of\n    # questions, we can start by giving 1 question to the first student,\n    # 2 to the second, 3 to the third, and 4 to the fourth.\n    # We then give the remaining questions to Noa.\n    \n    # Given to other 4 classmates\n    given_questions = 1 + 2 + 3 + 4\n    \n    # Remaining questions for Noa\n    noa_questions = 40 - given_questions\n    \n    return noa_questions\n\nans = solution()"
    ],
    "c1041fa9a5bf437993ae13aa3e37085f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    scan, ted = symbols('scan ted')\n    \n    # Current age ratio is 1:4\n    equation1 = Eq(scan / ted, 1 / 4)\n    \n    # Age ratio after 4 years is 1:3\n    equation2 = Eq((scan + 4) / (ted + 4), 1 / 3)\n    \n    # Solve the system of equations for scan and ted\n    solutions = solve((equation1, equation2), (scan, ted))\n    \n    scan_age = solutions[scan]\n    ted_age = solutions[ted]\n    \n    # Find the number of years ago when the ratio was 1:9\n    years_ago = symbols('years_ago')\n    equation3 = Eq((scan - years_ago) / (ted - years_ago), 1 / 9)\n    \n    # Solve for years_ago\n    years_ago_solution = solve(equation3.subs({scan: scan_age, ted: ted_age}), years_ago)\n    \n    return years_ago_solution[0]\n\nans = solution()"
    ],
    "411faed309f74656b50d4010f9f71511": [
        "def solution():\n    number = 278\n    rounded_number = round(number, -1)\n    return rounded_number\n\nans = solution()"
    ],
    "6adbd55fec9e4553850968c3abf80ddd": [
        "def solution():\n    return 52.8 * 7\n\nans = solution()"
    ],
    "a20ccf64b8a1484aa5b1280c574930fa": [
        "def solution():\n    coldest_temperature = -89\n    hottest_temperature = 58\n    difference = hottest_temperature - coldest_temperature\n    return difference\n\nans = solution()"
    ],
    "4fc438b08e484934a9e0729ceb008c74": [
        "def solution():\n    # Time jogged in hours from 6:30am to 7:30am\n    jogging_time = 1 # because from 6:30am to 7:30am is one hour\n    \n    # Speed while jogging in miles per hour\n    jogging_speed = 6.5\n    \n    # Distance covered while jogging\n    jogging_distance = jogging_time * jogging_speed\n    \n    # Time walked in hours from 7:30am to 9:30am\n    walking_time = 2 # because from 7:30am to 9:30am is two hours\n    \n    # Speed while walking in miles per hour\n    walking_speed = 4.5\n    \n    # Distance covered while walking\n    walking_distance = walking_time * walking_speed\n    \n    # Total distance covered\n    total_distance = jogging_distance + walking_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "16943328c1ba4a80883339e370325f73": [
        "def solution():\n    number = 4321\n    round_to = 1000\n    ans = round(number / round_to) * round_to\n    return ans\n\nans = solution()"
    ],
    "2f6aeacb6c0049d8990d1ffd7bffdc5d": [
        "def solution():\n    metres = 9\n    centimetres_per_metre = 100\n    ans = metres * centimetres_per_metre\n    return ans\n\nans = solution()"
    ],
    "ec690aff1f1e4750a9a76a1e9427e744": [
        "def solution():\n    ans = 200 * 30 * 60\n    return ans\n\nans = solution()"
    ],
    "f4da090f08704285bf99c48d28b8f30e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Creating variables for foldable (f) and non-foldable (nf) bicycles\n    f, nf = symbols('f nf')\n\n    # Writing the equations based on the information given.\n    # The total number of bicycles initially is 476\n    equation1 = Eq(f + nf, 476)\n    # After the sale, 5/9 of non-foldable and 4/7 of foldable bicycles are left \n    # This means 4/9 of non-foldable and 3/7 of foldable bicycles were sold\n    # Hence, 4/9 * nf + 3/7 * f = 208 bicycles were sold\n    equation2 = Eq(4/9 * nf + 3/7 * f, 208)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (f, nf))\n\n    # The number of foldable bicycles sold is 3/7 times the initial count\n    foldable_bikes_sold = 3/7 * solutions[f]\n\n    return int(foldable_bikes_sold)\n\nans = solution()"
    ],
    "ca0885fd429b47b29cbca128a13934e5": [
        "def solution():\n    height = 45\n    day_climb = 10\n    night_slide = 1\n    current_height = 0\n    day = 0\n\n    while current_height < height:\n        day += 1\n        current_height += day_climb\n        if current_height >= height:\n            break\n        current_height -= night_slide\n        night_slide += 1\n\n    return day\n\nans = solution()"
    ],
    "ef539f6c79ef45e6a787351ed4759e6b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mollies, goldfish, guppies = symbols('mollies goldfish guppies')\n\n    equation1 = Eq(mollies, 2 * goldfish)\n    equation2 = Eq(goldfish, 2 * guppies)\n    equation3 = Eq(mollies, 276)\n\n    solutions = solve((equation1, equation2, equation3), (mollies, goldfish, guppies))\n\n    more_mollies_than_guppies = solutions[mollies] - solutions[guppies]\n\n    return more_mollies_than_guppies\n\nans = solution()"
    ],
    "1e39295f7be440f19c866b2c67eb6233": [
        "def solution():\n    scale_ratio = 2 / 3\n    real_tree_height = 12\n    \n    model_tree_height = real_tree_height * scale_ratio\n    \n    return model_tree_height\n\nans = solution()"
    ],
    "db83e40568bc4ed1abb293d337e3b898": [
        "def solution():\n    # Applying the Pigeonhole Principle\n    students = 20\n    min_candies = (students - 1) * 2 + 3  # (n-1) bins with 2 and the last bin with at least 3 candies\n    return min_candies\n\nans = solution()"
    ],
    "0f326466fded430f8bb9c80424cf6fb4": [
        "def solution():\n    num = 20\n    factors = set()\n    for i in range(1, num + 1):\n        if num % i == 0:\n            factors.add(i)\n            factors.add(num // i)\n    ans = sum(factors)\n    return ans\n\nans = solution()"
    ],
    "0b6455df8e764e0297e3e34a90919102": [
        "def solution():\n    return 5 * 34\n\nans = solution()"
    ],
    "98bea305d2724084a1300cba10c4995b": [
        "def solution():\n    total_questions = 20\n    score = 100\n    marks_correct = 8\n    marks_wrong = -4\n\n    # Let x be the number of correct answers\n    # Each wrong answer reduces the total score by marks_correct + marks_wrong (8 - 4 = 4)\n    # The total score will then be 8x - 4(20 - x) = 100\n    # Solving for x gives us the number of correct answers\n    \n    for x in range(total_questions + 1):\n        if marks_correct * x + marks_wrong * (total_questions - x) == score:\n            return x\n\nans = solution()"
    ],
    "dfd006a02012410fbbb4bcbd7a08eeda": [
        "def solution():\n    remaining_flour = 6000\n    used_fraction = 5/8\n    remaining_fraction = 1 - used_fraction\n\n    original_flour = remaining_flour / remaining_fraction\n\n    return original_flour\n\nans = solution()"
    ],
    "b7f55925dab84b38804fc61f246c5093": [
        "def solution():\n    # To guarantee a pair of white socks, Yohan could get the worst-case scenario:\n    # picking all the red socks and all the black socks before getting any white socks.\n    # So he takes 10 red + 10 black = 20 socks that are not white.\n    # Then he must take 2 white socks to be sure to have at least one pair of white socks.\n    \n    max_socks_to_pair_of_white = 10 + 10 + 2\n\n    return max_socks_to_pair_of_white\n\nans = solution()"
    ],
    "0f98369691cc4fa8828f869e61430e64": [
        "def solution():\n    return 765 * 0.60\n\nans = solution()"
    ],
    "61b231b8c15b475c917f5d10487169ba": [
        "def solution():\n    total_flowers = 30\n    flowers_between_posts = 3\n\n    # Number of gaps between lamp posts is one more than the number of intervals with 3 flowers\n    number_of_gaps = (total_flowers // flowers_between_posts) + 1\n\n    # Total length of road is 50m, we divide this by the number of gaps to find the distance between each lamp post\n    distance_between_posts = 50 / number_of_gaps\n\n    return distance_between_posts\n\nans = solution()"
    ],
    "a1e43bc939ea4c6fb34a34753a72751b": [
        "def solution():\n    ans = sum(range(1, 20, 2))\n    return ans\n\nans = solution()"
    ],
    "318cb203ec2b4e69af03513f0f5f7db2": [
        "def solution():\n    return 1741 - 968\n\nans = solution()"
    ],
    "4341f23ecb084909afaca690c7016fd3": [
        "def solution():\n    ans = 3 * 126\n    return ans\n\nans = solution()"
    ],
    "54d9517c5a7c4afaa953d1464774e445": [
        "def solution():\n    books_left = 6\n    books_right_from_favorite = 14\n    total_books = books_left + books_right_from_favorite\n    return total_books\n\nans = solution()"
    ],
    "13404c9d8a0144d0a8d6ce4d8a80834c": [
        "def solution():\n    initial_temp = 8\n    difference = 17\n\n    final_temp = initial_temp - difference\n\n    return final_temp\n\nans = solution()"
    ],
    "de8f312c348043bca42e8c7aa90f7a69": [
        "def solution():\n    road_length = 150\n    tree_interval = 10\n\n    # Include the trees at opposite ends\n    num_trees = (road_length // tree_interval) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "a4bab2ddc00f4d6db863991f6cc9b894": [
        "def solution():\n    ans = 48 / (4/5)\n    return ans\n\nans = solution()"
    ],
    "1f2fa42e73c245739af9883dfb728d2f": [
        "def solution():\n    first_number = 160000\n    ratio = 1 / 4\n    nth_term = 5\n\n    nth_number = first_number * (ratio ** (nth_term - 1))\n\n    return nth_number\n\nans = solution()"
    ],
    "f712d845b49943c78aeaa70968af1f15": [
        "def solution():\n    result = (13.8 * 10**7) * (5.4 * 10**-12)\n    return result\n\nans = solution()"
    ],
    "7cd63e4421874b14aac53b57251e8230": [
        "def solution():\n    max_apples = 19 - sum(range(1, 5))  # Sum of the smallest 4 unique numbers of apples\n    return max_apples\n\nans = solution()"
    ],
    "19d110feae03410cb8fbd2510aacfe2a": [
        "def solution():\n    # P's work rate per day\n    p_rate_per_day = 1 / 12\n    # P's work rate per hour\n    p_rate_per_hour = p_rate_per_day / 8\n    \n    # Q's work rate per day\n    q_rate_per_day = 1 / 8\n    # Q's work rate per hour\n    q_rate_per_hour = q_rate_per_day / 10\n    \n    # Combined work rate of P and Q per hour when they work together\n    combined_rate_per_hour = p_rate_per_hour + q_rate_per_hour\n    \n    # Calculate the total number of hours P and Q take to finish the job when working together\n    total_hours_combined = 1 / combined_rate_per_hour\n    \n    # Since they work 8 hours a day, we divide total hours by 8 to get the number of days\n    days_to_complete = total_hours_combined / 8\n\n    return days_to_complete\n\nans = solution()"
    ],
    "f1f0d797b7874b22a4002f5247bb2471": [
        "def solution():\n    speed_van_1 = 132\n    speed_van_2 = 78\n    time = 8\n\n    distance_apart = (speed_van_1 + speed_van_2) * time\n    \n    return distance_apart\n\nans = solution()"
    ],
    "537950035403436781a4ec53ef771d8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((2/3)*(x-1) - (1/4)*(3*x+1), 1/6)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "75b8e7d0476046b699f4dc0ad1ac6abd": [
        "def solution():\n    ans = (2 - 1.8) / (1/2) * (5/2)\n    return ans\n\nans = solution()"
    ],
    "aa00ee47d18541ea8553ef86e27f0748": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define a symbol for Pinkie's original score\n    original_score = symbols('original_score')\n    \n    # Write the equation based on the problem statement\n    equation = Eq(original_score - 30, (original_score / 2) + 10)\n    \n    # Solve the equation for Pinkie's original score\n    solution = solve(equation, original_score)\n    \n    # Return the solution\n    return solution[0]\n\n# Call the solution function to get the answer\nans = solution()"
    ],
    "a6f93d90cbad41798ee50c1162ac774e": [
        "def solution():\n    num_apples = 78\n    num_ways = 0\n    # Iterate over all even numbers from 2 up to 78 (inclusive)\n    for num_bags in range(2, num_apples + 1, 2):\n        if num_apples % num_bags == 0:\n            num_ways += 1\n    return num_ways\n\nans = solution()"
    ],
    "1fd121a0e4224cf5a769dd8b70d3cb9b": [
        "def solution():\n    # Side length of the lawn\n    side_length = 12\n    # Distance from the edge\n    edge_distance = 1.5\n    # Distance between rosebushes\n    bush_distance = 3\n\n    # Length available for planting rosebushes on one side\n    # Subtracting the distance from both edges of the side\n    planting_length = side_length - 2 * edge_distance\n\n    # Number of rosebushes that can be planted on one side\n    # Taking the available planting length, divided by the distance needed between bushes,\n    # and adding 1 for the first bush\n    num_bushes_per_side = (planting_length // bush_distance) + 1\n\n    # Total number of rosebushes for all four sides\n    # But subtracting the corner bushes because they are counted twice, once for each side\n    total_bushes = 4 * num_bushes_per_side - 4\n\n    return int(total_bushes)\n\nans = solution()"
    ],
    "68df60021a694c14829fcbe8cf5ae9a5": [
        "def solution():\n    # Define the exchange rates\n    rabbits_per_goat = 9 / 3\n    goats_per_cow = 2 / 4\n    \n    # Find the exchange rate for rabbits to cows by multiplying the two rates\n    rabbits_per_cow = rabbits_per_goat * goats_per_cow\n    \n    # Find how many rabbits can be exchanged for 2 cows\n    rabbits_for_2_cows = rabbits_per_cow * 2\n    \n    return rabbits_for_2_cows\n\nans = solution()"
    ],
    "a17df35105e1488fb14099c56b437550": [
        "def solution():\n    numbers = [12, 16, 20, 24, 28]\n    total_sum = sum(numbers)\n    count = len(numbers)\n    average = total_sum / count\n    return average\n\nans = solution()"
    ],
    "c49938cd48584dd7af3a734aee5be731": [
        "def solution():\n    total_questions = 50\n    unattempted_questions = 3\n    attempted_questions = total_questions - unattempted_questions\n    score = 168\n\n    # Let x be the number of correct answers\n    # Each correct answer gives 4 marks, and each wrong answer takes -1 mark\n    # The total number of wrong answers would be (attempted_questions - x)\n    # So we have the equation: 4x - (attempted_questions - x) = score\n    # Simplify the equation: 4x - attempted_questions + x = score\n    # 5x - attempted_questions = score\n    # x = (score + attempted_questions) / 5\n\n    correct_answers = (score + attempted_questions) // 5\n    return correct_answers\n\nans = solution()"
    ],
    "696c23fc06e14b05a2c046255119fd33": [
        "def solution():\n    remaining_work = 360\n    completed_percentage = 0.60\n    total_masks = remaining_work / (1 - completed_percentage)\n    return int(total_masks)\n    \nans = solution()"
    ],
    "a3c6321b718247e1a8c87ed13d6bfa40": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencils, pens = symbols('pencils pens')\n\n    initial_ratio = Eq(4 * pens, 5 * pencils)\n    new_ratio = Eq(7 * (pens - 1), 8 * (pencils + 1))\n\n    solutions = solve((initial_ratio, new_ratio), (pencils, pens))\n\n    total_items = solutions[pencils] + solutions[pens]\n\n    return total_items\n\nans = solution()"
    ],
    "e07c7a8fcd134268ba390e93dbde6058": [
        "def solution():\n    first_term = 30\n    common_difference = 4\n    num_rows = 10\n\n    # Sum of n terms in arithmetic progression: n/2 * (2*a + (n-1)*d)\n    total_seats = num_rows / 2 * (2 * first_term + (num_rows - 1) * common_difference)\n\n    return int(total_seats)\n\nans = solution()"
    ],
    "7c68f55d51744cc39eaac03dbd0615e5": [
        "def solution():\n    total_sweets = 30\n    sweets_for_sister = 6\n    number_of_friends = 6\n\n    sweets_left = total_sweets - sweets_for_sister\n    sweets_per_friend = sweets_left // number_of_friends\n\n    return sweets_per_friend\n\nans = solution()"
    ],
    "4657d3f1b0d749a7899c0ce49a8d740d": [
        "def solution():\n    def custom_operation(a, b):\n        return a * b - 5 * a + 8\n\n    result = custom_operation(10, 9)\n    result = custom_operation(result, 8)\n    result = custom_operation(result, 7)\n    result = custom_operation(result, 6)\n    result = custom_operation(result, 5)\n    ans = custom_operation(result, 4)\n\n    return ans\n\nans = solution()"
    ],
    "6f9eda7abbf146b88413ef8871a3770e": [
        "def solution():\n    planned_profit = 0.6\n    actual_profit = 0.8 * planned_profit\n    first_day_profit = 0.7 * 0.6\n    second_day_total_profit = actual_profit - first_day_profit\n    \n    # The books sold on the second day represent 30% of the total books.\n    second_day_books_ratio = 0.3\n    \n    # The profit from the second day's sales is the ratio of the second day's books\n    # times the overall profit, divided by the ratio of the second day's books.\n    second_day_profit_per_book = second_day_total_profit / second_day_books_ratio\n    \n    # The discount on the second day resulted in the expected profit being reduced to this value.\n    second_day_discount_rate = 1 - second_day_profit_per_book\n    \n    return second_day_discount_rate * 100\n\nans = solution()"
    ],
    "36b7c8ca803942679b913576ffc1164b": [
        "def solution():\n    girls = 72\n    boys_percentage = 40\n    girls_percentage = 100 - boys_percentage\n    total_children = (girls * 100) / girls_percentage\n\n    return int(total_children)\n\nans = solution()"
    ],
    "06be771ddff04930b7a9da426c7d1667": [
        "def solution():\n    initial_strawberries = 96\n    eaten_strawberries = 73\n    bought_strawberries = 52\n\n    remaining_strawberries = initial_strawberries - eaten_strawberries + bought_strawberries\n\n    return remaining_strawberries\n\nans = solution()"
    ],
    "cc24fe62d17a41c2b8ef24f004c5e021": [
        "def solution():\n    # Every sheet has two page numbers (front and back).\n    # The last page number before missing pages is 14,\n    # which means the next sheet starts with page number 15 on the front.\n    # The first page number after missing pages is 35,\n    # which means the last missing page number is 34 (back of the last missing sheet).\n    # Calculate the total page numbers missing.\n    total_pages_missing = 34 - 15 + 1  # +1 because we're including both end points.\n\n    # Since there are 2 page numbers per sheet, divide by 2 to get the number of sheets.\n    sheets_missing = total_pages_missing / 2\n    \n    return int(sheets_missing)\n\nans = solution()"
    ],
    "c51419313ddf46ada3ba30f9e095d92c": [
        "def solution():\n    ans = 8 ** 2 + 27\n    return ans\n\nans = solution()"
    ],
    "8b11a69372f04c60a5ae352fe25c67d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tuna, curry = symbols('tuna curry')\n\n    equation1 = Eq(curry, tuna - 0.20)\n    equation2 = Eq(12 * tuna + 19 * curry, 39.60)\n\n    solutions = solve((equation1, equation2), (tuna, curry))\n\n    return float(solutions[tuna])\n\nans = solution()"
    ],
    "1501e7c8fa1943abaaf5e0674516ab89": [
        "def solution():\n    digits = [0, 1, 2, 3, 6, 8]\n    count = 0\n    for tens in digits:\n        for ones in digits:\n            if tens != ones:\n                number = tens * 10 + ones\n                if number % 2 != 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "fdfe690a562d4d6bbf61eceb229efec5": [
        "def solution():\n    for num in range(1, 500):\n        if num % 5 == 1 and num % 8 == 4 and num % 9 == 5:\n            return num\n\nans = solution()"
    ],
    "3a37961dddb1493592a78ae3db74b6e6": [
        "def solution():\n    ans = 4 * 8 + 4 * 17\n    return ans\n\nans = solution()"
    ],
    "bc66529b008c4e1590163de5bfb2e7d7": [
        "def solution():\n    total_children = 38\n    total_balloons = 126\n    \n    # Let's assume all children are boys, and calculate the difference when\n    # converting them to girls (as each girl gets 2 more balloons).\n    # Then we divide the difference by 2 (the extra balloons each girl gets) to find the number of girls.\n    \n    balloons_if_all_boys = total_children * 2\n    extra_balloons_needed = total_balloons - balloons_if_all_boys\n    number_of_girls = extra_balloons_needed // 2\n    \n    number_of_boys = total_children - number_of_girls\n    \n    return number_of_boys\n\nans = solution()"
    ],
    "d1dd44a77a9344ba8d2e79cc83171fae": [
        "def solution():\n    start = 10\n    end = 25\n    ans = end - start + 1\n    return ans\n\nans = solution()"
    ],
    "143d2e71979c46a0a813017c419c172c": [
        "def solution():\n    speed_meters_per_minute = 36\n    time_in_minutes = 200 / 60\n    distance_traveled = speed_meters_per_minute * time_in_minutes\n    return distance_traveled\n\nans = solution()"
    ],
    "250641e98bbf4da6a3ad1c67bad85305": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    total_animals = symbols('total_animals')\n    cows = 0.65 * total_animals\n    goats = total_animals - cows\n    \n    # New number of cows and goats\n    new_cows = cows + 0.20 * total_animals\n    new_goats = 2 * goats\n    \n    # After 240 more animals added\n    equation = Eq(new_cows + new_goats, total_animals + 240)\n\n    # Solve for total number of animals\n    total_animals_solution = solve(equation, total_animals)[0]\n\n    # Calculate the original number of goats\n    original_goats = total_animals_solution - 0.65 * total_animals_solution\n\n    return original_goats\n\nans = solution()"
    ],
    "1d23a4cf5cd24aa78d4522ee259f6ea9": [
        "from fractions import Fraction\n\ndef solution():\n    # Each mixed fraction can be converted to an improper fraction as follows: a + b/c = (ac + b)/c\n    # Calculate the product of the series of improper fractions\n    product = 1\n    for i in range(3, 20, 2): # Goes from 3 to 19, the denominators of all fractions\n        product *= (i + 2) / i\n\n    # Using Fraction to keep the result in fraction form\n    ans = Fraction(product).limit_denominator()\n    return ans\n\nans = solution()"
    ],
    "d4b69388447b40c1b49c9da3070b537d": [
        "def solution():\n    n = (55 - 3) / 4\n    return n\n\nans = solution()"
    ],
    "ae1399c1d3834a26a096bf6302870872": [
        "def solution():\n    # convert roll length to centimeters\n    roll_length_cm = 20 * 100\n    # each string length\n    string_length_cm = 85\n    # number of strings needed\n    strings_needed = 400\n    # total length of strings needed in cm\n    total_length_cm = string_length_cm * strings_needed\n    # calculate number of rolls needed, rounding up since partial rolls are not possible\n    rolls_needed = -(-total_length_cm // roll_length_cm)\n    return rolls_needed\n\nans = solution()"
    ],
    "53bc7d0205304d2f983aa90502860e23": [
        "def solution():\n    return 863 * 37\n\nans = solution()"
    ],
    "e850469f35b74929a1cad1745166a939": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    emma, john = symbols('emma john')\n    \n    # John is 7 years older than Emma\n    equation1 = Eq(john, emma + 7)\n    \n    # In 3 years, the sum of the ages of John and Emma will be 27\n    equation2 = Eq(john + 3 + emma + 3, 27)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (emma, john))\n    \n    return solutions[emma]\n\nans = solution()"
    ],
    "af4a495ebf5c4ddcacec30bac10e45e8": [
        "def solution():\n    for cookies in range(1, 40):\n        if cookies % 6 == 5 and (-cookies) % 5 == 3:\n            return cookies\n\nans = solution()"
    ],
    "22889dd8c0654312a1905b6415cc2e99": [
        "def solution():\n    # Let x be the total salary\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    # Mike donates 1/4 of his salary\n    donation = x / 4\n    # The remainder after donation\n    remainder = x - donation\n    # He spends 5/6 of the remainder on food\n    food = 5 / 6 * remainder\n    # Remaining money is savings\n    savings = remainder - food\n    # He spends £78 more on food than on donation to charity\n    equation = Eq(food - donation, 78)\n\n    # Solve the equation to find the salary\n    salary = solve(equation, x)\n\n    return salary[0]\n\nans = solution()"
    ],
    "1ecdd14157fe4525aa6c08b14b9eb1dc": [
        "def solution():\n    # The last digit of a number that is a power of 2 cycles every 4:\n    # 2 -> 4 -> 8 -> 6 -> and then it repeats.\n    # Since 2017 mod 4 is 1, the last digit of 2 raised to the 2017th power is 2.\n    last_digit_2 = 2\n\n    # The last digit of a number that is a power of 3 cycles every 4:\n    # 3 -> 9 -> 7 -> 1 -> and then it repeats.\n    # Since 2017 mod 4 is 1, the last digit of 3 raised to the 2017th power is 3.\n    last_digit_3 = 3\n\n    # Now multiply the last digits of each to find the last digit of the entire expression.\n    ans = (last_digit_2 * last_digit_3) % 10\n\n    return ans\n\nans = solution()"
    ],
    "cc03092bb36e4ec3a7e2bb8f320c115b": [
        "def solution():\n    a7 = 57\n    a15 = 89\n    common_difference = (a15 - a7) / (15 - 7)\n    return common_difference\n\nans = solution()"
    ],
    "41c46720b9f14be894784705391637b0": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 2), (2, 3), (4, 5), (6, 7)]\n    number, _ = solve_congruence(*congruences)\n    while number < 400:\n        return number\n        number += 2 * 3 * 5 * 7\n\nans = solution()"
    ],
    "0806f05076574fdcaf845a2224dc162a": [
        "def solution():\n    # A number is divisible by 9 if the sum of its digits is divisible by 9\n    # The sum of the fixed digits 4+7+1+9 = 21\n    # The remaining sum needed for the number to be divisible by 9 = 9 * k - 21, where k is a positive integer\n    # As A, B, C are digits, their minimum value is 0 and maximum is 9\n\n    for A in range(10):\n        for B in range(10):\n            for C in range(10):\n                if A != B and A != C and B != C and A not in {4, 7, 1, 9} and B not in {4, 7, 1, 9}\\\n                        and C not in {4, 7, 1, 9}:\n                    digit_sum = 21 + A + B + C\n                    if digit_sum % 9 == 0:\n                        return A + B + C, f'47A1B9C'.replace('A', str(A)).replace('B', str(B)).replace('C', str(C))\n\nans = solution()"
    ],
    "de288ae7d0a442c4a9c046e0eed208ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the time (in minutes) David walks at the increased speed\n    t = symbols('t')\n\n    # David walks for 10 minutes at the initial speed of 150m/min\n    initial_distance = 150 * 10\n\n    # Then he walks for t minutes at the increased speed of 200m/min\n    increased_speed_distance = (150 + 50) * t\n\n    # The total distance walked is the sum of these two parts and it's given to be 3700m\n    total_distance = Eq(initial_distance + increased_speed_distance, 3700)\n\n    # Solve the equation for t\n    time_at_increased_speed = solve(total_distance, t)[0]\n\n    # The total time spent walking is the time at initial speed (10 minutes) + time at increased speed\n    total_time = 10 + time_at_increased_speed\n\n    return total_time\n\nans = solution()"
    ],
    "05796f765d214621bf4c7e2a5b70ed1e": [
        "def solution():\n    sweets_initial = 240\n    sweets_gained_per_week = 45\n    sweets_eaten_per_week = 60\n    sweets_final = 150\n    \n    sweets_change_per_week = sweets_gained_per_week - sweets_eaten_per_week\n    weeks = (sweets_final - sweets_initial) / sweets_change_per_week\n    \n    return abs(int(weeks))\n\nans = solution()"
    ],
    "e4f1396967f949e8aac075d260a9e904": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apple, orange = symbols('apple orange')\n    jessie = Eq(2*apple + orange, 40)\n    bella = Eq(apple + 2*orange, 35)\n    solutions = solve((jessie, bella), (apple, orange))\n    \n    carrie = solutions[apple] + solutions[orange]\n    return carrie\n\nans = solution()"
    ],
    "252e549ce3e84c9fa92978ffc5919293": [
        "def solution():\n    # There are three choices for each of the three positions in a three-digit number.\n    choices_per_position = 3\n    # The number of different three-digit numbers is the number of choices\n    # for the first digit times the number of choices for the second digit\n    # times the number of choices for the third digit.\n    total_numbers = choices_per_position ** 3\n    \n    return total_numbers\n\nans = solution()"
    ],
    "833677d869d1418d96be1acc39cb4ff5": [
        "def solution():\n    total_students = 37\n    sport_class = 18\n    reading_class = 22\n\n    both_classes = sport_class + reading_class - total_students\n\n    return both_classes\n\nans = solution()"
    ],
    "4d679466d49c48a5ba8bd1230747a070": [
        "def solution():\n    racket_price = 49\n    ball_price = 1.5\n    total_money = 140\n    total_racket_price = 2 * racket_price\n\n    remaining_money = total_money - total_racket_price\n    num_balls = remaining_money // ball_price\n\n    return int(num_balls)\n\nans = solution()"
    ],
    "adce279592f04e808385106fbc96b9c7": [
        "def solution():\n    # Worst case scenario to get 3 different colored balls.\n    # First, draw all balls of one color (4 balls), then draw all balls of second color (4 more balls).\n    # The next ball has to be of the third color, ensuring we have all 3 different colors.\n    balls_needed = 4 + 4 + 1\n    \n    return balls_needed\n\nans = solution()"
    ],
    "84f7de20cdd542549b782f41e1b21e72": [
        "def solution():\n    num_sweets = 2\n    while not (num_sweets % 3 == 2 and num_sweets % 4 == 2 and num_sweets % 5 == 2 and num_sweets % 6 == 2):\n        num_sweets += 1\n    return num_sweets\n\nans = solution()"
    ],
    "6b3303365ecc41dab11b7954d4116eb6": [
        "def solution():\n    ans = 581 - 229\n    return ans\n\nans = solution()"
    ],
    "8e151c79d73b44098fb3999b3b61196d": [
        "def solution():\n    heinz_chocolates = 87\n    jed_chocolates = 137\n    week = 0\n\n    while heinz_chocolates < jed_chocolates:\n        heinz_chocolates += 4\n        jed_chocolates -= 6\n        week += 1\n\n    return week\n\nans = solution()"
    ],
    "70f1a5fb307c4820a64c6b9c7a3e8ba6": [
        "def solution():\n    donuts_per_box = 6\n    boxes_bought = 6\n    donuts_eaten = 3\n\n    total_donuts = donuts_per_box * boxes_bought\n    donuts_left = total_donuts - donuts_eaten\n\n    return donuts_left\n\nans = solution()"
    ],
    "3d4453f48b85485db44a73fe0e83a81c": [
        "def solution():\n    total_durians = 90\n    sold_fraction = 4/6\n    sold_durians = total_durians * sold_fraction\n    durians_left = total_durians - sold_durians\n    return durians_left\n\nans = solution()"
    ],
    "57221fd378d74100a636076027c2568d": [
        "from math import comb\n\ndef solution():\n    # Any three points taken at evenly spaced distances on a circle\n    # form an isosceles triangle. For this triangle to be right-angled,\n    # the distance between two non-adjacent points of the triangle should\n    # be the diameter of the circle.\n\n    # Count of selected points (vertices of the right-angled triangle)\n    selected_points = 3\n\n    # The only way to form a right-angled triangle, given the condition above,\n    # is when one side of the triangle is a diameter. Since there are 12 points,\n    # there are 6 diameters possible. And for each diameter chosen, we have two\n    # possible points to choose from to complete the triangle on either side of the\n    # diameter. Thus, for each diameter, there are 2 right-angled triangles possible.\n\n    # Total number of diameters on the circle\n    num_diameters = 12 // 2\n\n    # Each diameter gives us 2 options to form a right-angled triangle.\n    right_angle_triangles_per_diameter = 2 \n\n    # Total number of right-angled triangles\n    total_triangles = num_diameters * right_angle_triangles_per_diameter\n\n    # Return the total number of right-angled triangles\n    return total_triangles\n\nans = solution()"
    ],
    "deeb116148504ace9de18dfb01c2ab56": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    racket, shuttlecock = symbols('racket shuttlecock')\n\n    equation1 = Eq(racket + 5 * shuttlecock, 205)\n    equation2 = Eq(2 * racket + 15 * shuttlecock, 515)\n\n    solutions = solve((equation1, equation2), (racket, shuttlecock))\n\n    return solutions[racket]\n\nans = solution()"
    ],
    "ee76cce07a1c443dab8df84aab143d24": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    c = symbols('c')\n    equation = Eq(5 * (6 * c - 1), -35)\n    solution = solve(equation, c)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ca43287494e7451e9a31849cb5bdfb51": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote a box of apples as 'a' and a box of oranges as 'o'\n    a, o = symbols('a o')\n    \n    # Now we write down the equations according to the problem statement\n    # 3 boxes of apples and 5 boxes of oranges weigh 270 kg\n    eq1 = Eq(3*a + 5*o, 270)\n    \n    # 3 boxes of apples and 7 boxes of oranges weigh 342 kg\n    eq2 = Eq(3*a + 7*o, 342)\n    \n    # Solve the system of equations\n    solution = solve((eq1, eq2), (a, o))\n    \n    return solution[a], solution[o]\n\nans = solution()"
    ],
    "aedfdb2e53834d18b4dd9b71091562bf": [
        "def solution():\n    # The tiger is in the middle and also the 11th in line\n    # This means there are 10 animals in front of the tiger and 10 behind it\n    total_animals = 10 + 1 + 10  # 1 for the tiger itself\n    return total_animals\n\nans = solution()"
    ],
    "de0a19ac15d54fe88a6e870b218a8ac6": [
        "def solution():\n    monthly_salary = 1.2\n    debt = 2.6\n\n    months_needed = debt / monthly_salary\n\n    return months_needed\n\nans = solution()"
    ],
    "a6b4f6eda2dd4c1086279d0e363ac3fb": [
        "def solution():\n    result = (1/3) * 24 + (2/5) * 30 + (1/3) * 15\n    return result\n\nans = solution()"
    ],
    "f232bcc26c5b4a5f9cf2fd8102e72acd": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):  # hundreds digit must be at least 1 for a three-digit number\n        for tens in range(10):     # tens digit can be 0-9\n            for ones in range(10): # ones digit can be 0-9\n                if hundreds + tens + ones == 4:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "3590a4b33e5c474cba9961cce5263a4b": [
        "def solution():\n    # Each of the first 3 vases has 24/3 roses\n    roses_in_each_first_vase = 24 // 3\n    \n    # After adding the unknown amount of roses, each of the new 4 vases has the same amount\n    roses_in_each_second_vase = roses_in_each_first_vase  # Since they are the same amount\n    \n    # Total roses will the sum of roses in the first 3 vases and the roses in the new 4 vases\n    total_roses = 3 * roses_in_each_first_vase + 4 * roses_in_each_second_vase\n    \n    return total_roses\n\nans = solution()"
    ],
    "b2590928a5354962820ebf5c75fbea46": [
        "def solution():\n    return 100 - (33 + 34)\n\nans = solution()"
    ],
    "4ebbc0a9bb1e42cd8e77949e6447a0d2": [
        "def solution():\n    return 36.42 * 1000\n\nans = solution()"
    ],
    "5843cc2900624024adfb41c64f5bdf23": [
        "def solution():\n    haribo_cost = 0.50  # given cost of Haribo in dollars\n    mamee_cost = haribo_cost - 0.30  # 30 cents less than Haribo\n    jelly_cost = 6 * mamee_cost  # big packet of jelly costs 6 times as much as Mamee\n    return jelly_cost\n\nans = solution()"
    ],
    "a0808fb3383548829621ede423be79eb": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # The system of congruences to solve:\n    # x ≡ 2 (mod 3)\n    # x ≡ 3 (mod 4)\n    # x ≡ 4 (mod 5)\n\n    congruences = [(2, 3), (3, 4), (4, 5)]\n    x, _ = solve_congruence(*congruences)\n\n    return x\n\nans = solution()"
    ],
    "ffcd2dd5014240228dc1917324db1930": [
        "def solution():\n    lemon_flavour = 2\n    cherry_flavour = 7\n    mint_flavour = 1\n    max_candies_will_can_eat = lemon_flavour + cherry_flavour\n\n    return max_candies_will_can_eat\n\nans = solution()"
    ],
    "0760b73c607e495a97b0a547a70d5af8": [
        "def solution():\n    return (-18 + -2) / 2\n\nans = solution()"
    ],
    "aa8b7ff7b5d044b3b3060a29be5c6a9b": [
        "def solution():\n    num = 2405 + 1827\n    num_words = {\n        0: 'zero', 1: 'one', 2: 'two', 3: 'three', 4: 'four', 5: 'five',\n        6: 'six', 7: 'seven', 8: 'eight', 9: 'nine', 10: 'ten',\n        11: 'eleven', 12: 'twelve', 13: 'thirteen', 14: 'fourteen',\n        15: 'fifteen', 16: 'sixteen', 17: 'seventeen', 18: 'eighteen',\n        19: 'nineteen', 20: 'twenty', 30: 'thirty', 40: 'forty', \n        50: 'fifty', 60: 'sixty', 70: 'seventy', 80: 'eighty', \n        90: 'ninety', 1000: 'thousand', 1000000: 'million', \n        1000000000: 'billion'\n    }\n\n    def in_words(n):\n        if n < 20:\n            return num_words[n]\n        elif n < 100:\n            return num_words[n//10*10] + ('' if n % 10 == 0 else ' ' + in_words(n % 10))\n        elif n < 1000:\n            return num_words[n//100] + ' hundred' + ('' if n % 100 == 0 else ' and ' + in_words(n % 100))\n        elif n < 1000000:\n            return in_words(n//1000) + ' thousand' + ('' if n % 1000 == 0 else ' ' + in_words(n % 1000))\n\n    ans = in_words(num).capitalize()\n    return ans\n\nans = solution()"
    ],
    "76c82b772019406399e1152b52afe3a5": [
        "def solution():\n    for A in range(1, 10):  # A cannot be 0, as it is a four-digit number\n        for B in range(0, 10):\n            for C in range(0, 10):\n                for D in range(0, 10):\n                    if A != B and A != C and A != D and B != C and B != D and C != D:  # all digits must be different\n                        AB = A * 10 + B\n                        BC = B * 10 + C\n                        CD = C * 10 + D\n                        ABC = A * 100 + B * 10 + C\n                        BCD = B * 100 + C * 10 + D\n                        if AB % 2 == 0 and BC % 3 == 0 and CD % 5 == 0 and ABC % 9 == 0 and BCD % 11 == 0:\n                            return A * 1000 + B * 100 + C * 10 + D\n\nans = solution()"
    ],
    "f253907f9bdf4de3a6151819ae43b291": [
        "def solution():\n    # Price of strawberry cake\n    strawberry_cake = 3\n    \n    # Price of marble cake, which is $2 more than strawberry cake\n    marble_cake = strawberry_cake + 2\n    \n    # Price of cheese cake, which is thrice the price of marble cake\n    cheese_cake = 3 * marble_cake\n    \n    # Price of 2 cheese cakes\n    price_2_cheese_cakes = 2 * cheese_cake\n    \n    return price_2_cheese_cakes\n\nans = solution()"
    ],
    "a3e35c4319ef4a119310524b050ec78f": [
        "def solution():\n    for num in range(1, 80):\n        if num % 2 == 1 and num % 3 == 2 and num % 4 == 3 and num % 5 == 4:\n            return num\n\nans = solution()"
    ],
    "5c92d8264b89439e9a8efcb1cde156d8": [
        "def solution():\n    return 10.256 + 9.2 - 7.51\n\nans = solution()"
    ],
    "0b1fff26446748ceb6d70df2d4c59f1f": [
        "def solution():\n    num_teachers = 16\n    num_games = num_teachers - 1\n\n    return num_games\n\nans = solution()"
    ],
    "031f3635142c4421b05d4b2b576e071a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for children's ages\n    older_son, younger_son, older_daughter, younger_daughter = symbols('older_son younger_son older_daughter younger_daughter', integer=True)\n\n    # Equations based on the problem\n    sum_of_ages = Eq(older_son + younger_son + older_daughter + younger_daughter, 55)\n    son_age_diff = Eq(younger_son - older_son, 3)\n    daughter_age_diff = Eq(younger_daughter - older_daughter, 2)\n    younger_son_twice_older_daughter = Eq(younger_son, 2 * older_daughter)\n\n    # Solve the system of equations\n    solutions = solve((sum_of_ages, son_age_diff, daughter_age_diff, younger_son_twice_older_daughter), (older_son, younger_son, older_daughter, younger_daughter))\n    \n    # Since we want the youngest child, we pick the minimum age from the solution\n    youngest_child_age = min(solutions[older_son], solutions[younger_son], solutions[older_daughter], solutions[younger_daughter])\n\n    return youngest_child_age\n\nans = solution()"
    ],
    "776031bcc4e54790a7e85880c7273093": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3*x + 6, x + 16)\n\n    original_number = solve(equation, x)\n    \n    return original_number[0]\n\nans = solution()"
    ],
    "c7821793dd724577866140431e80753a": [
        "def solution():\n    # Given ratio of height to width is 3:4\n    ratio_height_to_width = 3 / 4\n    # Given height of the television\n    height = 21\n    # Calculate the width based on the given height and the ratio\n    width = (4 / 3) * height\n    # Calculate the perimeter of the television screen\n    perimeter = 2 * (height + width)\n    \n    return perimeter\n\nans = solution()"
    ],
    "07cca6d9086647059f61d49c4cc9e778": [
        "def solution():\n    return 20 + 19 + 18 + 17 + 16 - 15 - 14 - 13 - 12 - 11\n\nans = solution()"
    ],
    "e3e500d971604e29aa0a14edf78c74f7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wallet, watch = symbols('wallet watch')\n    equation1 = Eq(2 * wallet + 3 * watch, 433)\n    equation2 = Eq(5 * wallet + 4 * watch, 701)\n\n    solutions = solve((equation1, equation2), (wallet, watch))\n\n    return solutions[wallet]\n\nans = solution()"
    ],
    "3dff81f53f23452495bb29a705bf520f": [
        "def solution():\n    recurring_sequence = \"428571\"\n    sequence_length = len(recurring_sequence)\n    \n    total_digits_needed = 58\n    full_repeats = total_digits_needed // sequence_length\n    partial_repeat = total_digits_needed % sequence_length\n    \n    sum_full_repeats = sum(int(digit) for digit in recurring_sequence) * full_repeats\n    sum_partial_repeat = sum(int(recurring_sequence[i]) for i in range(partial_repeat))\n    \n    ans = sum_full_repeats + sum_partial_repeat\n    \n    return ans\n\nans = solution()"
    ],
    "1a4d0a08fad44f9ebb6ae96dbaae9f12": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "a2c8013f67c740bb813e2cff828c7cc3": [
        "def solution():\n    eddie = 15\n    jenny = 10\n    jason = 8\n\n    total_distance = eddie + jenny + jason\n    num_people = 3\n\n    average_distance = total_distance / num_people\n\n    return average_distance\n\nans = solution()"
    ],
    "e81380a3834146729a81c2bca69516e4": [
        "def solution():\n    tom_string_length = 13\n    nick_string_length = tom_string_length + 25\n    difference = nick_string_length - tom_string_length\n    return difference\n\nans = solution()"
    ],
    "7b9c62b20e00466b99795e4987d051bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # x is the amount of solution exchanged from bottle A to B\n    x = symbols('x')\n    \n    # Initial amount of sugar in each bottle\n    sugar_A = 50 * 0.11\n    sugar_B = 50 * 0.47\n\n    # After exchanging x grams, the amount of sugar in A becomes (sugar_A - 0.11x + 0.47x)\n    # And the amount of sugar in B becomes (sugar_B + 0.11x - 0.47x)\n    # The concentration in both bottles should be equal after exchanging\n    equation = Eq((sugar_A - 0.11*x + 0.47*x) / (50 - x + x), (sugar_B + 0.11*x - 0.47*x) / (50 + x - x))\n\n    # Solve for x\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "ee22231baefc4e1bace6954a18c6dfd1": [
        "def solution():\n    students_total = 50\n    students_chicken_tenders = 18\n\n    percent = (students_chicken_tenders / students_total) * 100\n\n    return percent\n\nans = solution()"
    ],
    "8a1f5a78534245b78c14a7d808df202e": [
        "def solution():\n    plot_length_cm = 20 * 100  # Convert plot length from meters to centimeters\n    cauliflower_spacing_cm = 40\n    first_cauliflower_offset_cm = 20\n\n    # Calculate the length available for planting cauliflowers\n    planting_length_cm = plot_length_cm - 2 * first_cauliflower_offset_cm\n\n    # Calculate the number of cauliflowers by dividing the planting length by the spacing\n    num_cauliflowers = planting_length_cm // cauliflower_spacing_cm\n\n    return num_cauliflowers\n\nans = solution()"
    ],
    "8589e072708949c4a1c18f959b68d739": [
        "def solution():\n    return 0.2 * 0.3\n\nans = solution()"
    ],
    "b00dd9facbe04160a2ed274649dd7571": [
        "def solution():\n    return (75 - 3) // 8\n\nans = solution()"
    ],
    "dd2b5176641b47188cb8bc10cc18c3dc": [
        "def solution():\n    from itertools import combinations\n\n    candies = 15\n    piles = 4\n\n    # Generate all combinations of splitting the remaining candy (candies - piles since each pile\n    # needs at least 1) into piles-1 partitions by representing this as placing dividers (piles-1)\n    # into candies (candies - piles slots).\n    comb = combinations(range(1, candies - piles + 1), piles - 1)\n\n    # Return the number of unique combinations, as each represents a different way to divide the candies.\n    return len(list(comb))\n\nans = solution()"
    ],
    "8d16df72513e48ce9cf5c5768ac94b3b": [
        "def solution():\n    # Given cards with digits 1, 3, and 6\n    # We can use each card any number of times since they can be rotated\n    # We need to create three-digit numbers\n    # For three-digit number n = ABC, where A, B, C are the digits\n    # A can be either 1, 3, or 6\n    # B can be either 1, 3, or 6\n    # C can be either 1, 3, or 6\n    # Thus, for each position, we have 3 possible choices\n    # So, we will multiply the possibilities for each digit's place\n    \n    possibilities_per_place = 3\n    num_of_digits = 3\n    total_possibilities = possibilities_per_place ** num_of_digits\n    \n    return total_possibilities\n\nans = solution()"
    ],
    "b6a2b577b4e5470188401b67b822af20": [
        "from math import factorial\n\ndef solution():\n    total_books = 3 + 4 + 2 + 2  # total number of books\n    same_biographies = 3\n    same_science_fictions = 4\n    same_magazines = 2\n    same_practice_books = 2\n\n    # Calculate permutation with identical items using the formula:\n    # n! / (p1! * p2! * p3! * ... * pk!) where n is the total number of items\n    # and p1, p2, p3, ..., pk are the number of identical items of each type.\n    ans = factorial(total_books) // (\n        factorial(same_biographies) *\n        factorial(same_science_fictions) *\n        factorial(same_magazines) *\n        factorial(same_practice_books)\n    )\n\n    return ans\n\nans = solution()"
    ],
    "003a17cf90624266bdfa006deb29cd68": [
        "def solution():\n    from sympy import isprime\n\n    ans = []\n    for num in range(2, 51):\n        if isprime(num) and isprime(num + 6) and num + 6 <= 50:\n            ans.append(num)\n        elif isprime(num) and isprime(num - 6) and num - 6 >= 2:\n            ans.append(num)\n\n    return sorted(set(ans))\n\nans = solution()"
    ],
    "c87b5329b55a4badb42841d47bba1a1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lucy, peter, edmund, susan = symbols('lucy peter edmund susan')\n\n    equation1 = Eq(edmund, 2 * susan)\n    equation2 = Eq(peter, 3 * edmund)\n    equation3 = Eq(lucy, peter / 2)\n    equation4 = Eq(lucy + peter + edmund + susan, 120)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (lucy, peter, edmund, susan))\n\n    return solutions[lucy]\n\nans = solution()"
    ],
    "d45dd29337134aa9b9314275c5f2b31a": [
        "def solution():\n    percentage = 30\n    base = 250\n\n    return (percentage / 100) * base\n\nans = solution()"
    ],
    "148b423200fd4f4f9cc3cfed406293e0": [
        "def solution():\n    # Convert 64 cm to metres\n    cm_to_metres = 64 / 100\n    \n    # Add 3.7 metres and converted cm in metres\n    total_metres = 3.7 + cm_to_metres\n    \n    # Convert 2 metres 7 cm to metres\n    metres_to_subtract = 2 + (7 / 100)\n    \n    # Subtract the meters to subtract from the total metres\n    ans = total_metres - metres_to_subtract\n    \n    # Return the final result\n    return ans\n\nans = solution()"
    ],
    "8ae8aebcd931414896cbbb9d92a27fa1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    banana, pear = symbols('banana pear')\n    \n    equation1 = Eq(banana + 2 * pear, 94)\n    equation2 = Eq(banana + pear, 62)\n    \n    solutions = solve((equation1, equation2), (banana, pear))\n    \n    return solutions[banana]\n\nans = solution()"
    ],
    "45d85cbefb344a0a875c5e59df47d4f3": [
        "def solution():\n    a, b = 1, 2\n    while True:\n        a, b = b, a + b\n        if a > 21:\n            break\n    return a\n\nans = solution()"
    ],
    "0b1752605b164c48b0814af3beffe291": [
        "def solution():\n    return 19 + 23 + 19 + 22 + 20\n\nans = solution()"
    ],
    "0807a5b8035f428595efa3d05b37f60b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    black, white, grey = symbols('black white grey')\n\n    # Total number of black and white rabbits is 11 more than the number of grey rabbits\n    equation1 = Eq(black + white, grey + 11)\n    # Total number of rabbits\n    equation2 = Eq(black + white + grey, 59)\n    # The number of black rabbits is 9 less than the white rabbits\n    equation3 = Eq(black, white - 9)\n\n    solutions = solve((equation1, equation2, equation3), (black, white, grey))\n\n    return solutions[white]\n\nans = solution()"
    ],
    "560f55b2062d4bb393b7c4c68779398a": [
        "def solution():\n    total_fruit = 48\n    fraction_apples = 5 / 8\n    number_of_apples = total_fruit * fraction_apples\n    number_of_pears = total_fruit - number_of_apples\n\n    return int(number_of_pears)\n\nans = solution()"
    ],
    "ce41ebada23a4f4d8a127ded83c184fd": [
        "def solution():\n    # This sequence is a geometric sequence with a common ratio of 2.\n    # The nth term of a geometric sequence is given by ar^(n-1) where\n    # a is the first term and r is the common ratio.\n    \n    # In this sequence, a = 1 and r = 2\n    \n    # The 20th term would be 1 * 2^(20-1) = 2^19\n    twentieth_term = 2 ** 19\n    \n    # The 17th term would be 1 * 2^(17-1) = 2^16\n    seventeenth_term = 2 ** 16\n    \n    # Dividing the 20th term by the 17th term:\n    # (2^19) / (2^16) = 2^(19-16) = 2^3 = 8\n    ans = twentieth_term // seventeenth_term\n\n    return ans\n\nans = solution()"
    ],
    "4de7bc9127b844c8845810ad2db2dd1b": [
        "def solution():\n    sum_of_numbers = 35\n    # The product of two numbers is maximized when the numbers are as close to each other as possible.\n    # For even splits, this would be 17.5 each, but we need integers, so the closest is 17 and 18.\n    num1 = sum_of_numbers // 2\n    num2 = sum_of_numbers - num1\n    # Calculate the product of the two numbers\n    max_product = num1 * num2\n    return max_product\n\nans = solution()"
    ],
    "bdfb73d963c14ec7bac25b679d5d5735": [
        "def solution():\n    average_daily_earnings = 70\n    days_worked = 6\n\n    total_earnings = average_daily_earnings * days_worked\n\n    return total_earnings\n\nans = solution()"
    ],
    "dc79304d4b074af798fdc304b00f1fe2": [
        "def solution():\n    minutes = 4.6\n    seconds_per_minute = 60\n    ans = minutes * seconds_per_minute\n    return ans\n\nans = solution()"
    ],
    "32f413ff728d481fb33f3ff50b93c6ce": [
        "def solution():\n    # Average number of books for Alice, Becky, and Crystal\n    average_books_abc = 60\n    \n    # Total number of books for Alice, Becky, and Crystal\n    total_books_abc = average_books_abc * 3\n    \n    # New average when Dennis is included\n    new_average_books_abcd = average_books_abc + 10\n    \n    # Total number of books for Alice, Becky, Crystal and Dennis\n    total_books_abcd = new_average_books_abcd * 4\n    \n    # Books that Dennis has\n    dennis_books = total_books_abcd - total_books_abc\n    \n    return dennis_books\n\nans = solution()"
    ],
    "873caeb39b18425fa3cf21cb40505ac6": [
        "def solution():\n    distance_per_day = 5 - 3\n    last_day_climb = 5\n    total_distance = 16\n\n    days = (total_distance - last_day_climb) / distance_per_day\n\n    if (total_distance - last_day_climb) % distance_per_day != 0:\n        days += 1\n\n    return int(days) + 1  # plus one for the last climb\n\nans = solution()"
    ],
    "9eefa1dbad6349a090e42d50a09d87fd": [
        "def solution():\n    from sympy import isprime\n    from math import sqrt\n\n    # Find the smallest two-digit prime number\n    for num in range(10, 100):\n        if isprime(num):\n            smallest_two_digit_prime = num\n            break\n    \n    # Find the largest two-digit square number\n    largest_two_digit_square = int(sqrt(99)) ** 2\n    \n    # Calculate the product\n    ans = smallest_two_digit_prime * largest_two_digit_square\n    return ans\n\nans = solution()"
    ],
    "515f9b66abd142d0bd65c4a91de0a79a": [
        "def solution():\n    distance_1_to_4 = 9\n    number_of_intervals_1_to_4 = 4 - 1  # since we're counting intervals, not flags\n    distance_per_interval = distance_1_to_4 / number_of_intervals_1_to_4\n\n    number_of_intervals_1_to_9 = 9 - 1  # for the 1st to the 9th flag\n    distance_1_to_9 = distance_per_interval * number_of_intervals_1_to_9\n\n    return distance_1_to_9\n\nans = solution()"
    ],
    "c852142aceb043f5b55cd004438cf7a6": [
        "def solution():\n    total_beads = 700\n    beads_per_necklace = 27\n\n    full_necklaces = total_beads // beads_per_necklace\n\n    return full_necklaces\n\nans = solution()"
    ],
    "53411c78458748e1ab1aa5ff7a2ef692": [
        "def solution():\n    johns_model_height = 19.6\n    ratio_john_mike = 2 / 3\n\n    mikes_model_height = johns_model_height / ratio_john_mike\n\n    return mikes_model_height\n\nans = solution()"
    ],
    "00d0ef22036440bfba46cf90f1e51a5a": [
        "def solution():\n    from sympy import isprime\n    \n    ans = isprime(233)\n    \n    return ans\n\nans = solution()"
    ],
    "6927ac3bb6f64f89b5830b5fccd79ae6": [
        "def solution():\n    # The value at one's place (4) plus the digit at tenth's (6) and hundredth's (7) places.\n    number = 4 + 0.6 + 0.07\n    return number\n\nans = solution()"
    ],
    "cf4d33bf77d24115a787173fb7fe030e": [
        "def solution():\n    speed_in_still_water = 22\n    current_speed = 3\n    downstream_speed = speed_in_still_water + current_speed\n    distance = 200\n\n    time = distance / downstream_speed\n    return time\n\nans = solution()"
    ],
    "56d8daf28c984740b59bdb2fd77882d7": [
        "def solution():\n    numbers = [19, 6, 12, 13, 21, 4, 8, 17]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "6a0c0299b8e74741b435eee435724ca3": [
        "def solution():\n    # Cost of one pencil\n    pencil_cost = 2\n    # Cost of one pen\n    pen_cost = 4\n    \n    # Number of pencils equivalent to the cost of one pen\n    pencils_per_pen = pen_cost // pencil_cost\n\n    return pencils_per_pen\n\nans = solution()"
    ],
    "63233813070f46b2ac40a6c1b5bc9b6c": [
        "def solution():\n    # Let x be the number of correct answers\n    # There are 10 questions, so there are (10 - x) incorrect answers\n    # Each correct answer gives 6 points: 6x points for correct answers\n    # Each incorrect answer gives -2 points: -2(10 - x) for incorrect answers\n    # Total score is 36 points\n    # The equation for total points is then: 6x - 2(10 - x) = 36\n    # Solve for x to find the number of correct answers\n\n    x = (36 + 2*10) / (6 + 2)  # Simplify the equation to solve for x\n    return int(x)  # Return the number of correct answers\n\nans = solution()"
    ],
    "c824a5b0a4384dcc938f65073d4a8794": [
        "def solution():\n    trains = 4\n    buses = 3\n    flights = 2\n\n    ans = trains + buses + flights\n    return ans\n\nans = solution()"
    ],
    "6801a3acc18c476f8557f9869fe2dd0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of students in class A as 'a' \n    # and the number of students in class B as 'b'.\n    # Let's denote the total number of peaches as 'p'.\n    a, b, p = symbols('a b p')\n\n    # The problem gives us the following equations:\n    # If all peaches are given to Class A, each student can get 5 peaches\n    # and there will be 10 peaches left: p = 5*a + 10.\n    eq1 = Eq(p, 5*a + 10)\n\n    # If all peaches are given to Class B, each student can get 8 peaches,\n    # and we will need 2 more peaches: p + 2 = 8*b.\n    eq2 = Eq(p + 2, 8*b)\n\n    # It is known that Class A has 3 more students than Class B: a = b + 3.\n    eq3 = Eq(a, b + 3)\n\n    # Solve the system of equations for p.\n    solutions = solve((eq1, eq2, eq3), (p, a, b))\n    return solutions[p]\n\nans = solution()"
    ],
    "3e88caa587c24fdea4f8a57b8dbd78f8": [
        "def solution():\n    ans = 9.95 - 2.6 - 3.412\n    return ans\n\nans = solution()"
    ],
    "30ec79644d524ec291def656fb45df08": [
        "def solution():\n    product = 888 * 999\n    last_two_digits = product % 100\n    return last_two_digits\n\nans = solution()"
    ],
    "d3732a99f6ef4521b3a6328c710459fd": [
        "def solution():\n    ans = 78.2 - 31.45 + 5.245 - 2.3\n    return ans\n\nans = solution()"
    ],
    "1fd49a79b84a47ae801b6ede661a42f2": [
        "from math import factorial\n\ndef solution():\n    # Total number of performances\n    dances = 7\n    sketches = 3\n    \n    # The minimum number of dances between sketches is 1, so we can place the 3 sketches within the 8 possible slots (7 dances + 1) created.\n    # This is choosing 3 places from the 8 slots for the sketches\n    sketch_positions = factorial(dances + 1) // (factorial(sketches) * factorial(dances - sketches + 1))\n    \n    # Each type of performance can be rearranged among themselves.\n    # For 7 dances, there are 7! permutations. For 3 sketches, there are 3! permutations.\n    dance_permutations = factorial(dances)\n    sketch_permutations = factorial(sketches)\n    \n    # The total number of ways to arrange the performances is the product of these possibilities.\n    total_ways = sketch_positions * dance_permutations * sketch_permutations\n    \n    return total_ways\n\nans = solution()"
    ],
    "20389c4707d0488a9cd27afb2d7c45ed": [
        "def solution():\n    # We know 28512 should be divisible by h to give a cube number\n    # A cube number's prime factors are in multiples of 3\n    # util we need for prime factorization\n    from sympy import primefactors\n\n    # get prime factors of 28512\n    prime_factors = primefactors(28512)\n\n    # determine the powers needed for each prime factor to make 28512 a perfect cube\n    powers_needed = {}\n    for factor in prime_factors:\n        # count the occurrences of each prime factor\n        count = 0\n        temp = 28512\n        while temp % factor == 0:\n            count += 1\n            temp //= factor\n        if count % 3 != 0:  # if the prime factor doesn't already contribute to a perfect cube\n            powers_needed[factor] = (3 - (count % 3))\n\n    # now multiply the factors needed to get h\n    h = 1\n    for factor, power in powers_needed.items():\n        h *= factor ** power\n\n    return h\n\nans = solution()"
    ],
    "d8669bc3a70344f58225403abd0196e9": [
        "def solution():\n    # Taking 2 chips from the same color does not guarantee two different colors.\n    # Therefore, we need to take at least 3 chips to ensure two different colors in worst-case scenario.\n    # But since the smallest count of a color is 3 (red), taking one from each of the three colors, we'll take at most 3 chips.\n    \n    ans = 3  # One from red, one from yellow, one from brown to ensure two different colors.\n    return ans\n\nans = solution()"
    ],
    "a5e7e019fb4d4c0080d3bb8fee16309b": [
        "def solution():\n    # This is a classic problem of derangements, sometimes known as subfactorials or !n,\n    # which count the number of permutations of n elements with no fixed points.\n    \n    def subfactorial(n):\n        # Using the recurrence relation:\n        # !n = (n-1)(!(n-1) + !(n-2))\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n-1) * (subfactorial(n-1) + subfactorial(n-2))\n    \n    return subfactorial(7)\n\nans = solution()"
    ],
    "688bd3546a274323aedfd728fc91d0e1": [
        "def solution():\n    # Each father shakes hands with 9 other fathers, 9 mothers and 9 children\n    # from each of the other 9 families\n    father_handshakes = 9 * 3 * 10\n\n    # Each mother shakes hands with 9 fathers and 9 children \n    # from each of the other 9 families\n    mother_handshakes = 9 * 2 * 10\n\n    # Each child shakes hands with 9 fathers and 9 mothers \n    # from each of the other 9 families\n    child_handshakes = 9 * 2 * 10\n\n    # Total handshakes is the sum of handshakes by fathers, mothers and children\n    total_handshakes = father_handshakes + mother_handshakes + child_handshakes\n\n    return total_handshakes\n\nans = solution()"
    ],
    "980c93de91ea458b9c9e8248ad74e8b5": [
        "def solution():\n    # Applying the difference of two squares formula reversely:\n    # a^2 - b*c = (a-b)(a+c) if b = c+1 or c = b-1\n    a = 31415926\n    b = 31415927\n    c = 31415925\n    # here b = a+1 and c = a-1, so it applies\n    ans = (a - b) * (a + c)\n    return ans\n\nans = solution()"
    ],
    "e7684856f58240ceb07efec4b2d70e70": [
        "def solution():\n    mark_position = 8\n    helen_position_from_end = 9\n    children_between = 6\n\n    total_children = mark_position + children_between + helen_position_from_end\n\n    return total_children\n\nans = solution()"
    ],
    "b4bdf164e10c4b1b9d4e3c8fbc8fb268": [
        "def solution():\n    odd_digits = 5  # 1, 3, 5, 7, 9\n    return odd_digits ** 3\n\nans = solution()"
    ],
    "6601fcfffa994bc9b56b9f035024b14a": [
        "def solution():\n    repeating_sequence = \"85274\"\n    sequence_length = len(repeating_sequence)\n    position = (79 - 1) % sequence_length  # subtract 1 for 0-based index\n    ans = int(repeating_sequence[position])\n    return ans\n\nans = solution()"
    ],
    "af4a763c71d14bfc86469b27fffda5d7": [
        "def solution():\n    for num in range(999, 99, -1):\n        if (num + 2009) % (17 * 19) == 0:\n            return num\n\nans = solution()"
    ],
    "a082a5ee490e4087b147b853ed2e0705": [
        "def solution():\n    free_hours = 40\n    additional_hours_cost = 82\n    total_hours = free_hours\n    \n    # Calculate hours in the $5 per hour range, up to a maximum of 10 hours\n    if additional_hours_cost > 0:\n        hours_at_5_dollars = min(additional_hours_cost // 5, 10)\n        additional_hours_cost -= hours_at_5_dollars * 5\n        total_hours += hours_at_5_dollars\n    \n    # Calculate hours in the $8 per hour range, up to a maximum of 10 hours\n    if additional_hours_cost > 0:\n        hours_at_8_dollars = min(additional_hours_cost // 8, 10)\n        additional_hours_cost -= hours_at_8_dollars * 8\n        total_hours += hours_at_8_dollars\n    \n    # Calculate hours in the $15 per hour range\n    if additional_hours_cost > 0:\n        hours_at_15_dollars = additional_hours_cost // 15\n        total_hours += hours_at_15_dollars\n        \n    return total_hours\n\nans = solution()"
    ],
    "700ddae7c261440e8dfef14d11e42592": [
        "def solution():\n    total_pages = 62\n    correct_sum = (total_pages * (total_pages + 1)) // 2\n    sum_with_missing_page = 1939\n    missing_page = correct_sum - sum_with_missing_page\n    return missing_page\n\nans = solution()"
    ],
    "87f7b53af1c7449bb3a1c8c021923671": [
        "def solution():\n    # When Jane picks the marbles one by one, we think about the worst-case scenario that she picks as many as possible without getting all 4 colors\n    # In the worst-case, she could pick all of one color first (7 green marbles), then pick another color (4 red marbles), then the third color (6 blue marbles)\n    # After having 7 + 4 + 6 = 17 marbles of 3 different colors, the very next marble she picks must be of the fourth color since only orange is left\n    # Therefore, Jane needs to pick 17 + 1 = 18 marbles to ensure having all 4 different colors\n\n    total_marbles_to_ensure_four_colors = 7 + 4 + 6 + 1\n    return total_marbles_to_ensure_four_colors\n\nans = solution()"
    ],
    "18a332d1534047ebbe0fc807217bdfa9": [
        "def solution():\n    for ticket1 in range(1000):\n        ticket2 = 777 - ticket1\n        if ticket1 + 1 == ticket2:\n            return ticket2 + 1\n\nans = solution()"
    ],
    "c73a9fe2a1a84b32b28f07fc9fc2e630": [
        "def solution():\n    # Define a function to calculate the number of ways to climb n steps\n    def climb_stairs(n):\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 4\n        # Use dynamic programming to store the results\n        dp = [0] * (n + 1)\n        dp[1], dp[2], dp[3] = 1, 2, 4\n        for i in range(4, n + 1):\n            dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3]\n        return dp[n]\n\n    # Number of ways to reach 4th step (since 5th step is muddy)\n    to_step_4 = climb_stairs(4)\n    # Number of ways to reach 10th step from 6th step (skipping the 5th)\n    after_step_5_to_10 = climb_stairs(10 - 5)\n\n    # The final answer is the product of the two scenarios\n    return to_step_4 * after_step_5_to_10\n\nans = solution()"
    ],
    "1b42b4b26b2a4a84918723d849472aa1": [
        "def solution():\n    initial_value = 20000\n    depreciation_rate = 0.9\n    years = 5\n\n    final_value = initial_value * (depreciation_rate ** years)\n\n    return final_value\n\nans = solution()"
    ],
    "8b84d4c8e6d6433bb169eac92ff0c74c": [
        "def solution():\n    fraction = 5 / 16\n    decimal = format(fraction, '.2f')\n    return decimal\n\nans = solution()"
    ],
    "031cd0de1ee64e169848ce69d7f5b3ca": [
        "def solution():\n    length = 5\n    width = 3\n\n    perimeter = 2 * (length + width)\n\n    return perimeter\n\nans = solution()"
    ],
    "71b17521447249e196a0f8b18fb89aa3": [
        "def solution():\n    average_earnings_per_day = 60\n    days_in_a_week = 7\n\n    total_earnings = average_earnings_per_day * days_in_a_week\n\n    return total_earnings\n\nans = solution()"
    ],
    "5fdb62b3b2ec43a38c6fad9527ab2e7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x - 2*x + 7, 6*x + 4*x - 14)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d756434ccb6b454cbe50d5d2de90751a": [
        "def solution():\n    ans = 3016 - 100\n    return ans\n\nans = solution()"
    ],
    "fcad283a7a1f427793d6d2d9b3d1a441": [
        "def solution():\n    # Since we're looking for the largest number, let's sort the numbers from smallest to largest.\n    # Any 5 odd numbers will add up to an odd number, but we want the sum to be 85 which is odd.\n    # Hence, we start by guessing the smallest odd numbers: 1, 3, 5, 7\n    \n    # Calculate the sum of the first 4 smallest odd numbers\n    smallest_sum = sum(range(1, 8, 2))\n    \n    # Subtract this sum from the total to get the maximum possible value of the 5th number\n    max_5th_number = 85 - smallest_sum\n\n    return max_5th_number\n\nans = solution()"
    ],
    "d767cbc2899b42849970436783d686bb": [
        "def solution():\n    ans = 23.2 - 14.7\n    return ans\n\nans = solution()"
    ],
    "e8e9b50054f946dcb1b7e07440b9d29f": [
        "def solution():\n    speed_ship = 88\n    speed_current = 12\n    distance = 500\n\n    speed_downstream = speed_ship + speed_current\n    time_downstream = distance / speed_downstream\n\n    return time_downstream\n\nans = solution()"
    ],
    "40d0f97fc5af4ba79f1e1007a926a66b": [
        "def solution():\n    minutes_to_seconds = 2.5 * 60\n    return int(minutes_to_seconds)\n\nans = solution()"
    ],
    "16aa6cb964434e138d37f5f5467ea1c6": [
        "def solution():\n    # Let the distance between A and B be d.\n    # Let the speed of Alan be v meters per minute.\n    # Then the speed of Phillip is v + 15 meters per minute.\n    # Alan takes 12 + 3 = 15 minutes to walk from A to B.\n    # Phillip takes 12 minutes to walk from A to B.\n\n    # Using the formula distance = speed * time:\n    # For Alan: d = v * 15\n    # For Phillip: d = (v + 15) * 12\n\n    # Equating the two expressions for distance, we have:\n    # v * 15 = (v + 15) * 12\n    # Solving for v:\n    v = (15 * 12) / (15 - 12)\n\n    # Now, use the speed of Alan or Phillip to find the distance:\n    d = v * 15  # Using Alan's speed and time\n\n    return d\n\nans = solution()"
    ],
    "a04912e5c32e426a9c96bc96e65c469c": [
        "def solution():\n    total_coins = 213\n    children = 5\n    remainder = total_coins % children\n    return remainder\n\nans = solution()"
    ],
    "fec0efe56cd043f2ae93914883589ff6": [
        "def solution():\n    numbers = [0.993, 1.006, 1.1, 0.94, 0.99]\n    closest_value = min(numbers, key=lambda x: abs(x - 1))\n    return closest_value\n\nans = solution()"
    ],
    "a7ab5e95b20b449aae26b7bc5ce0f53b": [
        "from math import comb\n\ndef solution():\n    girls_ways = comb(8, 4)   # ways to pick 4 girls out of 8\n    boys_ways = comb(12, 3)   # ways to pick 3 boys out of 12\n    total_ways = girls_ways * boys_ways  # Total combinations\n\n    return total_ways\n\nans = solution()"
    ],
    "2d070af2dcd74f2ca39de8161148fb7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    T = symbols('T')\n    income = symbols('income')\n\n    # Tax at T% for first $30,000\n    first_tax = T * 30000 / 100\n\n    # Tax at (T+3)% for the rest of the income\n    additional_tax = (T + 3) * (income - 30000) / 100\n\n    # Total tax is (T+1)% of the annual income\n    total_tax = (T + 1) * income / 100\n\n    # Equation is based on the total tax paid is the sum of both parts\n    equation = Eq(first_tax + additional_tax, total_tax)\n\n    # Solve for the annual income\n    solutions = solve((equation,), (income,))\n\n    return solutions[0]\n\nans = solution()"
    ],
    "f3b90fc112134c11bf16c053ec5b9bb5": [
        "from sympy import is_square\n\ndef solution():\n    count = 0\n    number = 2\n    while number < 25666:  # limiting the check to the number pattern provided\n        if is_square(number):\n            count += 1\n        number = number * 10 + 5  # building the sequence according to the pattern\n    return count\n\nans = solution()"
    ],
    "e23c6ff29b964509baa268af08cccfb5": [
        "def solution():\n    # Let x be the number of 20-cent coins\n    # Let y be the number of 50-cent coins\n    # We have two equations based on the problem statement:\n    # x + y = 21 (because there are 21 coins in total)\n    # 0.20x + 0.50y = 6.30 (value of all coins combined is $6.30)\n    # We can transform the second equation to avoid floating point by multiplying by 10:\n    # 2x + 5y = 63\n    # Now we can solve this system of equations using simple substitution or elimination methods\n    \n    for y in range(22):  # We go up to 22 because range is exclusive and there can't be more than 21 fifty-cent coins\n        x = 21 - y\n        if 2*x + 5*y == 63:\n            return y\n\nans = solution()"
    ],
    "0dcc886d48d14da3a0ba1c786f23c05c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    alice_initial, tom_initial = symbols('alice_initial tom_initial')\n    alice_spent = 36\n    alice_remaining = tom_initial - 25.40\n    tom_had = 68.10\n\n    # Alice's money after spending\n    equation1 = Eq(alice_initial - alice_spent, alice_remaining)\n    # Tom's money given in the problem\n    equation2 = Eq(tom_initial, tom_had)\n\n    solutions = solve((equation1, equation2), (alice_initial, tom_initial))\n\n    return solutions[alice_initial]\n\nans = solution()"
    ],
    "e4cf51421424479896c2cc37d2e05235": [
        "def solution():\n    mean1 = 28\n    mean2 = 11\n    count1 = 5\n    count2 = 12\n\n    total1 = mean1 * count1\n    total2 = mean2 * count2\n    mean_of_all = (total1 + total2) / (count1 + count2)\n\n    return mean_of_all\n\nans = solution()"
    ],
    "1dc393d01ecf4792b3b72098c4cdff99": [
        "def solution():\n    original_price = 15.40\n    discount_percentage = 20\n    discount_value = (discount_percentage / 100) * original_price\n    new_price = original_price - discount_value\n    return new_price\n\nans = solution()"
    ],
    "d3a5ba15a4034a49afce92beb5409bf9": [
        "def solution():\n    total_distance = 74\n    distance_between_benches = 7\n    number_of_gaps = 9 - 1\n    total_benches_length = total_distance - (number_of_gaps * distance_between_benches)\n    bench_length = total_benches_length / 9\n    return bench_length\n\nans = solution()"
    ],
    "a16e80d24e034bddb8280d950f5a08b1": [
        "from sympy import symbols, solve, Eq\n\ndef solution():\n    a_students, b_students, candies = symbols('a_students b_students candies')\n    \n    equation1 = Eq(4 * a_students + 20, candies)\n    equation2 = Eq(6 * b_students, candies - 16)\n    equation3 = Eq(a_students, 2 * b_students)\n    \n    solutions = solve((equation1, equation2, equation3), (a_students, b_students, candies))\n    \n    return solutions[candies]\n\nans = solution()"
    ],
    "9bb5ada2b3c4496bbf433bd138e2e0ae": [
        "def solution():\n    total_cuts = 21\n    regrowth = 5\n    original_arms = total_cuts // (regrowth - 1) * regrowth\n\n    return original_arms\n\nans = solution()"
    ],
    "0f7063d1e1484313ab5cf6b5f0420c06": [
        "def solution():\n    # The third greatest number is 246, and since we are looking for the \n    # minimum value of the fourth greatest number, we must maximize the \n    # sum of the top two numbers.\n    # If we let the largest and second largest numbers be as close to 246 as possible,\n    # the rest numbers should be minimized, which means every other number should be 1\n    # (the minimum value for a positive whole number).\n\n    # As there are 10 numbers in total and one of them is 246, there are 9 other numbers.\n    # Subtracting the known value 246 gives us 2021 - 246 for the remaining 9 numbers.\n    remaining_sum = 2021 - 246\n\n    # Since we are trying to minimize the fourth largest number,\n    # we can distribute the remaining sum to the largest and second largest numbers\n    # and minimize the first 7 numbers by making them 1.\n    # Remaining sum for the two largest numbers\n    remaining_for_two_largest = remaining_sum - (7 * 1)\n\n    # Since we want to find the minimum of the fourth largest number,\n    # we should maximize the second largest number without exceeding the third largest which is 246.\n    # Considering the largest number to be one greater than the third, i.e., 247,\n    # we can give the second largest the rest of the sum.\n    second_largest = remaining_for_two_largest - 247\n\n    return second_largest\n\nans = solution()"
    ],
    "c8155e9c63f74065a3befe7a41ec8e68": [
        "def solution():\n    # If we take out 6 coins, they could all be of the same color (worst-case scenario)\n    # To guarantee a different color, we must take out one more coin.\n    # Therefore, we need to take out 6 + 1 coins to be sure of having two different colors.\n    coins_needed = 6 + 1\n    return coins_needed\n\nans = solution()"
    ],
    "4b28c12170034843abf93f81771140af": [
        "def solution():\n    # Assuming trees are evenly spaced, let the distance between each tree be d.\n    # This means the distance from the 1st to the 5th tree involves 4 intervals (d).\n    # If the distance from the 1st to the 5th tree is 20 cm, then\n    # 4d = 20\n    # d = 20 / 4\n    # d = 5 cm\n    \n    # Now we want to find out the distance from the 8th to the 14th tree.\n    # This involves 14 - 8 = 6 intervals.\n    \n    # The distance from the 8th to the 14th tree is 6d.\n    # So the distance will be 6 * 5 = 30 cm.\n    \n    distance_per_interval = 20 / 4\n    distance_8_to_14 = (14 - 8) * distance_per_interval\n    \n    return distance_8_to_14\n\nans = solution()"
    ],
    "c4a0044218d4459486aeded38095d16e": [
        "def solution():\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23]\n    numbers = set(range(1, 25))\n    \n    # Remove non-prime even numbers and 1 because they are divisible by 2, which is prime\n    numbers.difference_update({num for num in range(1, 25) if num % 2 == 0 or num == 1})\n    \n    # We now have all prime numbers and odd numbers from the original set\n    # However, we need to ensure mutual exclusivity between adjacent numbers\n    # Starting with the highest prime, we check if we can add the prime to our set of selected numbers\n    selected_numbers = set()\n    for prime in sorted(primes, reverse=True):\n        can_add_prime = all(prime % other_prime != 0 for other_prime in selected_numbers)\n        if can_add_prime:\n            selected_numbers.add(prime)\n    \n    # In the end, we are just looking for the number of selected primes\n    ans = len(selected_numbers)\n    return ans\n\nans = solution()"
    ],
    "ea360eacf521407f98ff8b5280ab0671": [
        "def solution():\n    count = 0\n    for i in range(1, 511):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "ceb847740b284e4291e28c8612c7623e": [
        "def solution():\n    speed_m_per_min = 60\n    time_seconds = 150\n    time_minutes = time_seconds / 60\n    \n    distance = speed_m_per_min * time_minutes\n    return distance\n\nans = solution()"
    ],
    "b2c8b37b16bc4b09830fda1738de61da": [
        "def solution():\n    ans = 38 * 32 + 37 * 33 + 36 * 34\n    return ans\n\nans = solution()"
    ],
    "a7d31aaf346e44cc80aea145f699fb6c": [
        "def solution():\n    pip_sweets = 7\n    kevin_sweets = 3 * pip_sweets\n    qingqing_sweets = kevin_sweets + 6\n    total_sweets = pip_sweets + kevin_sweets + qingqing_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "81817e35e8504d14a4853709b3f0f4bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    devi, jerry = symbols('devi jerry')\n    eq1 = Eq(devi, jerry + 8)\n    eq2 = Eq((devi + 4) / (jerry + 4), 5/7)\n\n    sol = solve((eq1, eq2), (devi, jerry))\n\n    return sol[jerry]\n\nans = solution()"
    ],
    "e147bf0d408e4c8a9fccf6228377aabc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be Grey's age and y be Grey's father's age\n    x, y = symbols('x y')\n\n    # When Grey was born, his father was 30 years old\n    equation1 = Eq(y - x, 30)\n\n    # This year, the age of Grey's father is three times that of Grey's age\n    equation2 = Eq(y, 3 * x)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # We want Grey's father's age, so we get y from the solutions\n    return solutions[y]\n\nans = solution()"
    ],
    "31840b7e162d44dcaffb4626ba30ea1a": [
        "def solution():\n    # Since it's required to draw a \"parts\" graph, the problem in essence\n    # is to compute the ratio of Pip's apples to Bud's apples and express it graphically.\n    # The ratio is given as 5:1 (Pip:Bud).\n    # We'll represent this graphically using a simple text-based representation.\n\n    parts_graph = \"Pip: \" + \"■\" * 5 + \"\\nBud: \" + \"■\"\n    \n    return parts_graph\n\nans = solution()"
    ],
    "2ee25cfde76549e8a74f4b49a19e6576": [
        "def solution():\n    numerator_sum = 2998 + 2999 + 3000\n    denominator_sum = 2997 + 2998 + 2999 + 3000 + 3001\n    ans = 10 * (numerator_sum / denominator_sum)\n    return ans\n\nans = solution()"
    ],
    "5e6155d2b3e346cbbc38976ee85ef798": [
        "def solution():\n    total_books = 35\n    layers = 4\n\n    min_books_on_most_crowded_layer = (total_books + layers - 1) // layers\n\n    return min_books_on_most_crowded_layer\n\nans = solution()"
    ],
    "0875b88ce12741689decc2618d2990ae": [
        "def solution():\n    first_term = 48\n    difference = 4\n    last_term = 80\n\n    # Calculate the number of rows using the formula for the nth term of an arithmetic sequence:\n    # last_term = first_term + (n - 1) * difference\n    n = ((last_term - first_term) / difference) + 1\n\n    # Calculate the sum of the arithmetic sequence using the formula:\n    # sum = n/2 * (first_term + last_term)\n    total_seats = n/2 * (first_term + last_term)\n\n    return int(total_seats)\n\nans = solution()"
    ],
    "a9ce794d4d724087ae8161cbe09c09a1": [
        "def solution():\n    from itertools import permutations\n    \n    digits = [3, 6, 9]\n    perm = permutations(digits, 3)\n    \n    count = len(list(perm))\n    \n    return count\n\nans = solution()"
    ],
    "2dd0df0b47f04bfb8660c7f9d1f7eab6": [
        "def solution():\n    ans = 0.12 + 0.345 + 0.6789\n    return ans\n\nans = solution()"
    ],
    "3a9016a2cfba4bf48567281430e8ea9b": [
        "def solution():\n    ans = 3 * 37 * 9\n    return ans\n\nans = solution()"
    ],
    "ed453aff15e04b3fbad1957ab9fac783": [
        "def solution():\n    count = 0\n    for hundred in range(1, 3):  # The hundred's place cannot be 0\n        for ten in range(0, 3):  # The ten's place can be 0, 1, or 2\n            for unit in range(0, 3):  # The unit's place can be 0, 1, or 2\n                if hundred != ten and hundred != unit and ten != unit:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "bd2b901e7ebe48c895db12c5cefe8864": [
        "def solution():\n    cows = 523\n    pigs = 172\n    difference = cows - pigs\n    return difference\n\nans = solution()"
    ],
    "32f99dc7770c48f891cc519a0e993603": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 3), (3, 5), (5, 7)]\n    number, _ = solve_congruence(*congruences)\n    while number <= 200:\n        if number >= 100:\n            return number\n        number += 3 * 5 * 7\n    return None\n    \nans = solution()"
    ],
    "2f7c543f936b44159eb43f58e41436ea": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    # The minimum dividend occurs with the smallest possible positive divisor, which is 1\n    divisor = 1\n\n    dividend = quotient * divisor + remainder\n    return dividend\n\nans = solution()"
    ],
    "473f107b34bc4eb98a8c18b2d5a71597": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    betty, veron, eliza = symbols('betty veron eliza')\n    \n    equation1 = Eq(eliza, 2 * veron)\n    equation2 = Eq(betty, eliza - 185)\n    equation3 = Eq(betty + veron + eliza, 855)\n    \n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n    \n    return solutions[betty]\n\nans = solution()"
    ],
    "2927ab094a1741819a4e2a25ebabc6e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the total number of animals initially\n    cattle, goats = symbols('cattle goats')\n    \n    # Originally, 65% were cows\n    equation1 = Eq(cattle, 0.65 * (cattle + goats))\n    \n    # When 240 more animals were added, cows became 85% of total\n    equation2 = Eq(cattle + 240, 0.85 * (cattle + goats + 240))\n    \n    # The number of goats doubled after 240 animals were added\n    equation3 = Eq(2 * goats, goats + 240)\n    \n    solutions = solve((equation1, equation2, equation3), (cattle, goats))\n    \n    return solutions[goats]\n\nans = solution()"
    ],
    "d3a62f3a2a154a3d9ba934079c4f679d": [
        "def solution():\n    first_section_cm = 30  # already in cm\n    second_section_cm = 1.5 * 100  # converting from m to cm\n    third_section_cm = 150 / 10  # converting from mm to cm\n\n    total_width_cm = first_section_cm + second_section_cm + third_section_cm\n    return total_width_cm\n\nans = solution()"
    ],
    "58b2b0f298394a909fc6d284a735e599": [
        "def solution():\n    melanie_age = 8\n\n    # Let the uncle's age be x.\n    # When Melanie reaches her uncle's age (x), her uncle will be 38.\n    # The time it will take Melanie to reach her uncle's age is (x - melanie_age).\n    # Therefore, her uncle's current age is (x - melanie_age) + 38.\n\n    melanie_future_age = 38\n    uncle_current_age = (melanie_future_age - melanie_age) + 38\n\n    return uncle_current_age\n\nans = solution()"
    ],
    "72bf22ed00544452be7c9b7e3e3c9ea5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Hazel's current age and Jessica's current age\n    hazel_now, jessica_now = symbols('hazel_now jessica_now')\n    \n    # Hazel will be y years old in three years, so now she is y - 3\n    hazel_future = hazel_now + 3\n    \n    # Jessica is 3 years younger than Hazel, so her current age is hazel_future - 3\n    jessica_future = jessica_now + 1  # Jessica's age next year\n    hazel_next_year = hazel_future - 2  # Hazel's age next year\n\n    # Define the equation for Jessica being 3 years younger than Hazel now\n    equation = Eq(jessica_now, hazel_now - 3)\n\n    # Solve the equation for Jessica's current age using Hazel's current age\n    jessica_current_age = solve(equation, jessica_now)[0]\n    \n    # Express Hazel's current age in terms of Hazel's future age y\n    hazel_current_age = hazel_future - 3\n    \n    # Calculate Jessica's age next year using her current age\n    jessica_next_year = jessica_current_age + 1\n    \n    # Calculate their total age next year\n    total_age_next_year = hazel_next_year + jessica_next_year\n    \n    # Since we have expressed everything in terms of y (Hazel's age in 3 years),\n    # the final expression for the total age next year will be in terms of y\n    return total_age_next_year\n\nans = solution()"
    ],
    "93d27a37cf174f6c9e8a2ff60b9bbf22": [
        "def solution():\n    pence_in_pound = 100\n    percentage = (15 / (3 * pence_in_pound)) * 100\n    return percentage\n\nans = solution()"
    ],
    "4e0dc5edbf7d4e40b8ac2e3de13c21a2": [
        "def solution():\n    count = 0\n    for i in range(1, 51):\n        if i % 4 != 0 and i % 6 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "9c12fef929b2434bab748c05a0ff93fd": [
        "def solution():\n    start_hour = 15  # 3 PM in 24-hour format\n    start_minutes = 25\n    duration_minutes = 108\n\n    end_minutes_total = start_minutes + duration_minutes\n    end_hour = start_hour + end_minutes_total // 60\n    end_minutes = end_minutes_total % 60\n\n    return f\"{end_hour:02d}:{end_minutes:02d}\"\n\nans = solution()"
    ],
    "baeaa1b74d3542bbabb148cbdd2cc14c": [
        "def solution():\n    degree = 5\n    x_degree = 3\n    # degree of monomial is sum of degrees of x and y\n    # degree = x_degree + 2n, where 2n is degree of y\n    # so, 5 = 3 + 2n\n    n = (degree - x_degree) // 2\n    return n\n\nans = solution()"
    ],
    "8aad4836c0734930b7d215cbb6b09d6c": [
        "def solution():\n    return 18 + 3 - 8 + 17\n\nans = solution()"
    ],
    "2f1be30621994420880174e39997c979": [
        "from fractions import Fraction\n\ndef solution():\n    # Convert mixed numbers into improper fractions\n    first = 2 + Fraction(3, 8)\n    second = 6 + Fraction(9, 12)\n    third = 1 + Fraction(14, 16)\n\n    # Perform the addition of the improper fractions\n    result = first + second + third\n\n    # Simplify the result and convert to mixed number\n    mixed_num = result.numerator // result.denominator\n    frac_part = Fraction(result.numerator % result.denominator, result.denominator)\n\n    # Final result as a mixed number\n    ans = mixed_num + frac_part\n\n    return ans\n\nans = solution()"
    ],
    "1b593b3bdeb34c18b0cff4c24a506258": [
        "def solution():\n    amy_age_now = 15\n    amy_age_5_years_ago = amy_age_now - 5\n    sister_age_3_years_later = amy_age_5_years_ago\n    sister_age_now = sister_age_3_years_later - 3\n\n    return sister_age_now\n\nans = solution()"
    ],
    "eef4ade5677a43a4ae0df6aeeb38fe6e": [
        "def solution():\n    # There are 13 different ranks (numbers or letters) in a deck of cards\n    ranks = 13\n    # Drawing one card from each rank does not guarantee a match, so draw one more to ensure a match\n    cards_to_draw = ranks + 1 \n    return cards_to_draw\n\nans = solution()"
    ],
    "01b407a825884d83acf6b91beaf5d407": [
        "def solution():\n    min_num = float('inf')\n    \n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 21 and i % 2 == 0:\n            min_num = min(min_num, i)\n\n    return min_num\n\nans = solution()"
    ],
    "d853853301cf40d6a725ec4ab3774957": [
        "def solution():\n    ans = sum(1 / i for i in range(2, 21))\n    for j in range(2, 20):\n        ans += j * sum(1 / i for i in range(j + 1, 21))\n    return ans\n\nans = solution()"
    ],
    "25040bd355be4585bf5a273889285a78": [
        "def solution():\n    part_value = 18 # value of 3/5 of the sum\n    fraction = 3/5 # the fraction that is given\n\n    whole_amount = part_value / fraction # calculating the whole amount\n\n    return whole_amount\n\nans = solution()"
    ],
    "f58db1d3f54446688138665d57db026d": [
        "def solution():\n    ans = 423 * 72\n    return ans\n\nans = solution()"
    ],
    "52a86fa066cb48858c6bc524eece5782": [
        "def solution():\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = 3 * x + 5 - 20\n\n    x_value = solve(equation, x)\n\n    return x_value[0]\n\nans = solution()"
    ],
    "44f2ee1889614bbfb19535bdd92da120": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "017473f68ce348d49eb42bb8dbb458a6": [
        "网络故障，请重试"
    ],
    "3502c215c1be4b7fb69703f1b13e625d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the cost of a book in pounds\n    book_price = symbols('book_price')\n\n    # Given that a pencil costs 40p, which is 0.40 pounds\n    pencil_price = 0.40\n\n    # Create an equation based on the problem statement\n    # Sarah's total cost - Rebecca's total cost = 1 pound\n    equation = Eq(8 * book_price + 3 * pencil_price, 3 * book_price + 8 * pencil_price + 1)\n\n    # Solve the equation\n    solution = solve(equation, book_price)\n\n    # There should be only one solution for the cost of the book\n    return solution[0]\n\nans = solution()"
    ],
    "5fa3410a0ede4f5c874b9848f3d5326f": [
        "def solution():\n    even_squares = sum([(2*i)**2 for i in range(1, 11)])\n    odd_squares = sum([(2*i-1)**2 for i in range(1, 11)])\n    ans = even_squares - odd_squares\n    return ans\n\nans = solution()"
    ],
    "d7bced643fdd4eb6bdc74acb29830ef9": [
        "def solution():\n    total_water = 17\n    jug_capacity = 2\n    num_jugs = 6\n    \n    water_poured = jug_capacity * num_jugs\n    water_left = total_water - water_poured\n    \n    return water_left\n\nans = solution()"
    ],
    "0be151f2fbc745f7a608fa9e0444c3fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let l represent the initial number of Liverpool fans.\n    # Let m represent the initial number of Manchester Utd fans.\n    l, m = symbols('l m')\n\n    # Initial condition: l = m + 1000\n    equation1 = Eq(l, m + 1000)\n\n    # After more fans entered the stadium:\n    # Liverpool fans become l + 472\n    # Manchester Utd fans become m + 4836\n    # New condition: (m + 4836) = 3 * (l + 472)\n    equation2 = Eq(m + 4836, 3 * (l + 472))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (l, m))\n\n    return solutions[l]\n\nans = solution()"
    ],
    "4fed3bbe2a4c479fb032cdfa43d46b2d": [
        "def solution():\n    return 12.5 * 32\n\nans = solution()"
    ],
    "c5410d85775f48bd93e84ab31405739b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the unknown (price of a book in pounds)\n    book_price = symbols('book_price')\n\n    # Given values\n    pencil_price = 0.40  # price of a pencil in pounds\n    sarah_paid_more = 1.00  # amount in pounds Sarah paid more than Rebecca\n\n    # Sarah's total cost for books and pencils\n    sarah_total_cost = 8 * book_price + 3 * pencil_price\n    # Rebecca's total cost for books and pencils\n    rebecca_total_cost = 3 * book_price + 8 * pencil_price\n\n    # Equation based on the information that Sarah paid £1 more than Rebecca\n    equation = Eq(sarah_total_cost, rebecca_total_cost + sarah_paid_more)\n\n    # Solve the equation for the price of a book\n    book_cost_solution = solve(equation, book_price)\n\n    # Return the solution\n    return book_cost_solution[0]\n\nans = solution()"
    ],
    "72bb560fb6bc4884bb7499eb0d199c5c": [
        "def solution():\n    andrew_points = 20\n    jack_more_points = 18\n    jack_points = andrew_points + jack_more_points\n    return jack_points\n\nans = solution()"
    ],
    "da5a959c72974b06be19c4288fbc217c": [
        "from math import comb\n\ndef solution():\n    total_players = 12\n    players_needed = 6\n\n    number_of_ways = comb(total_players, players_needed)\n\n    return number_of_ways\n\nans = solution()"
    ],
    "c23d5f0deb8a4bc7a5a92b52a64b5653": [
        "def solution():\n    remaining_after_mike = 3 + 2  # Add back the $2 given to Mike\n    remaining_after_nini = remaining_after_mike * 2  # Undo giving half to Nini\n    remaining_after_bob = remaining_after_nini * 2  # Undo giving half to Bob\n    original_amount = remaining_after_bob * 2  # Undo giving half to mother\n    return original_amount\n\nans = solution()"
    ],
    "859405caaa7e4a0b9fa498591ea6d75b": [
        "def solution():\n    return 4867 + 285\n\nans = solution()"
    ],
    "15cab5ac2a464bd49b38abf530497521": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7*x + 3*(x + 5), 45)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "6e612604c8ff4d42b99013c98deabfdd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    peaches, a_students, b_students = symbols('peaches a_students b_students')\n    # Equation representing distribution to class A\n    equation1 = Eq(peaches, 5 * a_students + 10)\n    # Equation representing distribution to class B\n    equation2 = Eq(peaches, 8 * b_students - 2)\n    # Equation representing the student count difference\n    equation3 = Eq(a_students, b_students + 3)\n    \n    solutions = solve((equation1, equation2, equation3), (peaches, a_students, b_students))\n    \n    return solutions[peaches]\n\nans = solution()"
    ],
    "8cecf1b760794f42ac5164ddf2ddd1b9": [
        "def solution():\n    number = \"\"\n    i = 1\n    while len(number) < 2023:\n        number += str(i)\n        i += 1\n    ans = int(number[2022])\n    return ans\n\nans = solution()"
    ],
    "d564d279579b4412beee324ea716c5ac": [
        "def solution():\n    first_number = 178\n    second_number = first_number - 69\n    total_sum = 450\n\n    third_number = total_sum - (first_number + second_number)\n\n    return third_number\n\nans = solution()"
    ],
    "1d72b15c9167478a811748cdd734865e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the total number of T-shirts, and c the total number of caps\n    t, c = symbols('t c')\n\n    # Equation representing the ratio of T-shirts to caps (8t = 5c)\n    equation_ratio = Eq(8 * c, 5 * t)\n\n    # Equation representing the total cost of items sold\n    # Siti sold 1/4 of the T-shirts and 1/5 of the caps: (1/4)*t*$3 + (1/5)*c*$5 = $132\n    equation_sales = Eq((1/4) * t * 3 + (1/5) * c * 5, 132)\n\n    # Solving the system of equations\n    solutions = solve((equation_ratio, equation_sales), (t, c))\n\n    # Retrieve the number of T-shirts\n    t_shirts = solutions[t]\n    \n    return t_shirts\n\nans = solution()"
    ],
    "50cd7efd01b841d298218aea08ed2f91": [
        "def solution():\n    age_at_99 = 11\n    years_passed = 2001 - 1999\n    age_at_01 = age_at_99 + years_passed\n    return age_at_01\n\nans = solution()"
    ],
    "68189bcaa99d4e9f9c3e3ce95e7937fd": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['4', '6', '2', '5']\n    perms = [''.join(p) for p in permutations(digits)]\n    odd_numbers = [int(p) for p in perms if int(p) % 2 != 0]\n    return min(odd_numbers)\n\nans = solution()"
    ],
    "76be802a2529408ebd6445587693be90": [
        "def solution():\n    return 9.95 - 2.6 - 3.42\n\nans = solution()"
    ],
    "81a3546d49f540918fa6687b12bf0b34": [
        "def solution():\n    students = 40\n    boat_capacity = 6\n    \n    trips = (students + boat_capacity - 1) // boat_capacity\n\n    return trips\n\nans = solution()"
    ],
    "c1de6601e4b04d30ad771a324ae51e3c": [
        "def solution():\n    first_term = 2\n    common_difference = 2\n    nth_term = 36\n    \n    ordinal_number = (nth_term - first_term) // common_difference + 1\n    \n    return ordinal_number\n\nans = solution()"
    ],
    "085c8151173f4b7d90be8a69b00d7f5d": [
        "from sympy import isprime\n\ndef solution():\n    count = 0\n    for tens_digit in [2, 3, 5, 7]:\n        for ones_digit in [2, 3, 5, 7]:\n            N = tens_digit * 10 + ones_digit\n            if isprime(N):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e2695aa79cb340d99906881fc1d6a0c6": [
        "def solution():\n    initial_kids_caught = 8\n    kids_who_ran_away = 5\n    kids_caught_from_library = 9\n\n    # Total kids caught at the end\n    total_caught = initial_kids_caught - kids_who_ran_away + kids_caught_from_library\n\n    return total_caught\n\nans = solution()"
    ],
    "f0328bec52924f7ea69d1ae80d116453": [
        "def solution():\n    time_for_one_picture = 10  # minutes\n    total_time_available = 80  # minutes (1 hour and 20 minutes)\n    \n    ans = total_time_available // time_for_one_picture\n    return ans\n\nans = solution()"
    ],
    "0cddcd3bc30743f58a6fa95ed48ba314": [
        "def solution():\n    # Let x be the number of game cards Eric has\n    # Joe has 7 times as many game cards as Eric, so Joe has 7*x game cards\n    # After giving some game cards to Eric, both will have 168 game cards\n    # So, Joe gives (7*x - 168) game cards to Eric\n    # And Eric will have (x + (7*x - 168)) game cards after receiving from Joe\n    # The total game cards after Joe gives to Eric will both be 168\n\n    # Thus, we have the equation:\n    # x + (7*x - 168) = 168\n    # Simplifying, we get:\n    # 8*x - 168 = 168\n    # 8*x = 168 + 168\n    # x = (168 + 168) / 8\n\n    x = (168 + 168) / 8\n\n    # Now, we calculate the number of game cards Joe must give to Eric\n    cards_to_give = 7*x - 168\n\n    return int(cards_to_give)\n\nans = solution()"
    ],
    "b2064a45faa94ab689a5ee8b42de5b1c": [
        "def solution():\n    for n in range(1, 40):  # We know the number should be between 1 and 40 as the max difference can't be more than 40.\n        if (19 + n // 2) % n == 6 % n:\n            return n\n\nans = solution()"
    ],
    "7b92cabf616c4f65bb3f245acc3311d5": [
        "def solution():\n    count = 0\n    total_apples = 10\n    # We only need to find combinations for one group,\n    # the other group will implicitly have the remaining apples.\n    for apples_in_group1 in range(1, total_apples):\n        apples_in_group2 = total_apples - apples_in_group1\n        if apples_in_group1 != apples_in_group2:\n            count += 1\n    # Since in each count we are considering two distinct groups,\n    # we need to divide by 2 to avoid double counting.\n    return count // 2\n\nans = solution()"
    ],
    "6520b25ec5ca47c28184d097d5c1d50f": [
        "def solution():\n    from math import factorial\n\n    # The number of ways to arrange n distinct objects in a line\n    # is given by n factorial (n!)\n    num_students = 5\n    num_ways = factorial(num_students)\n\n    return num_ways\n\nans = solution()"
    ],
    "4464e412391748539179d461f02021f4": [
        "def solution():\n    total_pears = 38\n    difference = 6\n\n    # If Anne gives Charlie 6 pears they will have the same amount of pears\n    # Let x be the number of pears that Anne originally had\n    # Then Charlie would have x - 6 pears originally\n    # We know that the total is 38, so x + (x - 6) = 38\n    # Solving for x we get 2x - 6 = 38, then 2x = 44 and x = 22\n\n    anne_pears = (total_pears + difference) // 2\n\n    return anne_pears\n\nans = solution()"
    ],
    "6a68efce3a3843c488c04405fe0ad806": [
        "def solution():\n    amy_swimming = 14\n    joanne_swimming = 5\n    difference = amy_swimming - joanne_swimming\n    return difference\n\nans = solution()"
    ],
    "292666d407aa47a1b8822e94b934f869": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    a, b, c, d = symbols('a b c d', integer=True)\n    abcd = 1000*a + 100*b + 10*c + d  # number abcd\n    abc = 100*a + 10*b + c            # number abc\n    ab = 10*a + b                     # number ab\n    \n    # equation based on the given condition\n    equation = Eq(abcd + abc + ab + a, 1370)\n    \n    # solve for a, b, c, d\n    solutions = solve(equation, (a, b, c, d))\n    \n    # calculate the value of abcd based on the solved values of a, b, c, d\n    abcd_value = solutions[a]*1000 + solutions[b]*100 + solutions[c]*10 + solutions[d]\n    \n    return abcd_value\n\nans = solution()"
    ],
    "5f4b4e56afb34cf5a1144d2bc36161da": [
        "def solution():\n    sachin_rate = 1 / 3\n    peter_rate = 1 / 6\n\n    combined_rate = sachin_rate + peter_rate\n    time_together = 1 / combined_rate\n\n    return time_together\n\nans = solution()"
    ],
    "cc9705da6c674505ab7de37d248f4508": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    isaac, joseph = symbols('isaac joseph')\n\n    # Isaac originally had 5 times the stamps of Joseph\n    equation1 = Eq(isaac, 5 * joseph)\n\n    # After Joseph received 154 stamps, he has 9/10 of Isaac's stamps\n    equation2 = Eq(joseph + 154, (9/10) * isaac)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (isaac, joseph))\n\n    return solutions[isaac]\n\nans = solution()"
    ],
    "899b1a4b796c49099d270e74392468e4": [
        "def solution():\n    factorial = 1\n    for i in range(1, 30):\n        factorial *= i\n        \n    count_zeroes = 0\n    while factorial % 10 == 0:\n        factorial //= 10\n        count_zeroes += 1\n        \n    return count_zeroes\n\nans = solution()"
    ],
    "d98f7fbf1401483cbb8a9febb9b267a5": [
        "def solution():\n    # Convert base 8 number to base 10\n    N = int(str(12345654321), 8)\n    \n    # Calculate the remainder when N is divided by 7 and by 9\n    remainder_7 = N % 7\n    remainder_9 = N % 9\n    \n    # Sum of the remainders\n    sum_of_remainders = remainder_7 + remainder_9\n    \n    return sum_of_remainders\n\nans = solution()"
    ],
    "1bb4ac60011c4f049e418cf89d7b6aca": [
        "def solution():\n    # Let the length of the path be x meters\n    # Linda's speed ratio to Ted is 3:4, so when Linda runs 3 units, Ted runs 4 units.\n    # Since Linda has jogged 1200m (3 units) when they meet, Ted must have jogged 1200m * (4/3) to meet Linda\n    ted_distance = 1200 * (4/3)\n    # The total length of the path is the distance Linda jogged plus the distance Ted jogged\n    path_length = 1200 + ted_distance\n    return path_length\n\nans = solution()"
    ],
    "13bdfa0cc0bf4ec8b5035a9b4a3cba96": [
        "def solution():\n    count = 0\n    for year in range(2018, 2109):\n        if sum(int(digit) for digit in str(year)) == 18:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "f4d8b1a7fd8f46d0a9ef67f2bee482c1": [
        "def solution():\n    for A in range(10):\n        if (2 + 0 + 1 + 8 + A) % 9 == 0:\n            number = int(f\"2018{A}\")\n            return number % 8\n\nans = solution()"
    ],
    "7634476c9aa54ec59121ed35be37a90a": [
        "def solution():\n    ryan_front = 5\n    elvis_behind = 7\n    between_ryan_elvis = 1\n    \n    # Ryan is in front of Elvis, so we add Ryan's position + 1 (squirrel between them) + Elvis' position.\n    total_squirrels = ryan_front + between_ryan_elvis + elvis_behind + 1  # Adding 1 for Elvis himself\n\n    return total_squirrels\n\nans = solution()"
    ],
    "be80ef03c92f4f92945f77d21a554dbf": [
        "def solution():\n    def count_derangements(n):\n        if n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            return (n - 1) * (count_derangements(n - 1) + count_derangements(n - 2))\n    \n    ans = count_derangements(6)\n    return ans\n\nans = solution()"
    ],
    "ccda4529057344dfb3239b232b55def3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x + 3*x + 2, 38 + 5*x - 8*x)\n\n    solution_x = solve(equation, x)\n\n    return solution_x[x]\n\nans = solution()"
    ],
    "3372b3b3a25d471db3a7b9b84e20d407": [
        "def solution():\n    numerator = 2019 + 2018 * 2020\n    denominator = 2019 * 2020 - 1\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "de7d03220ef44866b5c5a28b228aa86c": [
        "def solution():\n    workers = 3\n    days = 3\n    work_done_by_one_worker_in_one_day = 1 / (workers * days)\n    days_for_one_worker = 1 / work_done_by_one_worker_in_one_day\n    \n    return days_for_one_worker\n\nans = solution()"
    ],
    "260e6647f054406db07646bdfcd45cc2": [
        "def solution():\n    initial_amount = 3600\n    interest_rate = 0.02  # 2%\n\n    interest = initial_amount * interest_rate\n\n    return interest\n\nans = solution()"
    ],
    "c76e6054330d410d8964478169646a8e": [
        "def solution():\n    percentage = 25 / 100\n    total_weight = 64\n    result = percentage * total_weight\n    return result\n\nans = solution()"
    ],
    "f5dda3a779a843e88e20668719067b5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((3*x + 3)/6, (5*x - 2)/8)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "4127bb2d659e42e7b67a826610a830ff": [
        "def solution():\n    # Let's denote the initial number of pupils in School P as x\n    # Since the ratio of the pupils in School P to School Q is 2:3,\n    # We can express the initial number of pupils in School Q as (3/2) * x\n\n    # 240 Primary one pupils were admitted to School P and School Q respectively\n    # The ratio becomes 3:4\n    # Therefore, (x + 240) / ((3/2) * x + 240) = 3/4\n    # Cross multiplying gives us 4(x + 240) = 3(3/2 * x + 240)\n    # Simplifying: 4x + 960 = 9/2 * x + 720\n    # => 8x + 1920 = 9x + 1440\n    # => 9x - 8x = 1920 - 1440\n    # => x = 480\n\n    # Now calculating x which is the number of pupils in School P at first\n    x = 480\n    return x\n\nans = solution()"
    ],
    "15a6e721c67f4f68bcb7869cb424dc30": [
        "def solution():\n    percentage = 30\n    amount = 45\n    \n    ans = (percentage / 100) * amount\n    \n    return ans\n\nans = solution()"
    ],
    "c41136a149b7455588eedcd3638a6d6e": [
        "def solution():\n    return sum(range(1, 20, 2))\n\nans = solution()"
    ],
    "ba12d160c6704062bce29f06d2df0413": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variable for Jack's current age\n    jack_age_now = symbols('jack_age_now')\n    \n    # Create equation based on the problem\n    equation = Eq(jack_age_now - 5, (jack_age_now + 8) / 2)\n    \n    # Solve the equation\n    solution = solve(equation, jack_age_now)\n    \n    # Get Jack's current age\n    ans = solution[0]\n    \n    return ans\n\nans = solution()"
    ],
    "d1ef65d2af0d48fca0d26f7460c255c2": [
        "def solution():\n    spent_on_bag_percentage = 70\n    spent_on_purse_fraction = 3/8\n\n    remaining_after_bag = 100 - spent_on_bag_percentage\n    spent_on_purse_percentage = remaining_after_bag * spent_on_purse_fraction\n\n    return spent_on_purse_percentage\n\nans = solution()"
    ],
    "ad7c476fa787456a984de908cbf3274a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kenny, timmy, ron = symbols('kenny timmy ron')\n\n    equation1 = Eq(timmy, kenny - 12)\n    equation2 = Eq(ron, kenny + 20)\n    equation3 = Eq(kenny + timmy + ron, 284)\n\n    solutions = solve((equation1, equation2, equation3), (kenny, timmy, ron))\n\n    return solutions[ron]\n\nans = solution()"
    ],
    "e6126aee30d340e584a91ebb8121b3b4": [
        "from math import factorial\n\ndef solution():\n    total_letters = factorial(9) # All permutations of the letters in EDUCATION\n    vowels = \"EAUOIO\" # These are the vowels in the word EDUCATION\n    consonants = \"DCTN\" # These are the consonants in the word EDUCATION\n    \n    # Permutations where vowels are considered one entity:\n    vowel_perms = factorial(6) # All permutations of the vowels\n    consonant_vowel_perms = factorial(5) # Permutations of consonants + 1 entity of vowels\n    \n    # Total arrangements where vowels are always together\n    together_perms = consonant_vowel_perms * vowel_perms\n    \n    # Subtract permutations where vowels are together from total permutations\n    ans = total_letters - together_perms\n    return ans\n\nans = solution()"
    ],
    "f045ccc90cd4400c86e6a51f2a370f28": [
        "def solution():\n    return 86.3 + 7\n\nans = solution()"
    ],
    "cda98aa296634bf2a385a6527a02e9c2": [
        "def solution():\n    initial_students = 5\n    candies_each = 12\n    new_students = initial_students + 1\n    \n    total_candies = initial_students * candies_each\n    new_candies_each = total_candies // new_students\n    \n    return new_candies_each\n\nans = solution()"
    ],
    "1d9d7ae4443a4d1a8f150b0ff35e0812": [
        "def solution():\n    angle_BAC = 50\n    angle_BPC = 180 - angle_BAC\n    return angle_BPC\n\nans = solution()"
    ],
    "d68ae3a33d98427494ecd3ac34702711": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(0.3 * x + 0.7 * (20 - x), 20 * 0.54)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a5723a387628481d828499d1c34bdcfc": [
        "def solution():\n    # Initial number of sweets Sharon can buy\n    sweets = 11\n    # Initial number of wrappers\n    wrappers = 11\n\n    while wrappers >= 3:\n        # Exchange wrappers for new sweets\n        new_sweets, wrappers = divmod(wrappers, 3)\n        # Add the new sweets to total sweets count\n        sweets += new_sweets\n        # Add the new wrappers to current wrappers\n        wrappers += new_sweets\n\n    return sweets\n\nans = solution()"
    ],
    "60143fac73a641d4afc2cffe6b15a9e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of each bird\n    two_tailed, three_tailed, six_tailed, eight_tailed = symbols('two_tailed three_tailed six_tailed eight_tailed')\n\n    # Define equations based on the given conditions\n    equation1 = Eq(two_tailed, 5 + 2 * eight_tailed)\n    equation2 = Eq(three_tailed, 2 + six_tailed / 2)\n    equation3 = Eq(2 * two_tailed + 3 * three_tailed + 6 * six_tailed + 8 * eight_tailed,\n                   4 * (two_tailed + three_tailed + six_tailed + 2 * eight_tailed) - 2)\n    equation4 = Eq((two_tailed + three_tailed + six_tailed + 2 * eight_tailed) - \n                   (2 * two_tailed + 3 * three_tailed + 6 * six_tailed + 8 * eight_tailed), 241)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), \n                      (two_tailed, three_tailed, six_tailed, eight_tailed))\n\n    return solutions[three_tailed]\n\nans = solution()"
    ],
    "44bd36d5b38b44949074bb84feb11ca3": [
        "def solution():\n    arrival_time = 11 * 60 + 40  # Convert 11:40 AM to minutes\n    duration = 4 * 60 + 50       # Convert 4 hours and 50 minutes to minutes\n\n    # Calculate the time Natalie left the party in minutes from midnight\n    leave_time_minutes = arrival_time + duration\n\n    # Convert the leave time back to hours and minutes\n    leave_hour = leave_time_minutes // 60\n    leave_minute = leave_time_minutes % 60\n    \n    # Adjust for the 12-hour clock format, if leave_hour exceeds 12\n    if leave_hour > 12:\n        leave_hour -= 12\n\n    return (leave_hour, leave_minute)\n\nans = solution()"
    ],
    "cf273ad7cc974df890c0f43328a5de3e": [
        "def solution():\n    for num in range(10, 100):  # The smallest two-digit number is 10 and the largest is 99\n        if (num - 4) % 5 == 0 and (num - 4) % 7 == 0:\n            return num\n    return None\n\nans = solution()"
    ],
    "34e244879a6646619b79a8414c6a5f70": [
        "def solution():\n    cost_price = 10\n    selling_price_per_bag = 0.65\n    weight_per_bag = 250\n    total_weight = 5000\n\n    number_of_bags = total_weight / weight_per_bag\n    total_selling_price = number_of_bags * selling_price_per_bag\n    \n    profit = total_selling_price - cost_price\n    percentage_profit = (profit / cost_price) * 100\n\n    return percentage_profit\n\nans = solution()"
    ],
    "c8bc4498b3bb47adb5838b21d3e0bd8b": [
        "def solution():\n    return sum(range(1, 11))\n\nans = solution()"
    ],
    "c756926469794615a094702ab4e29ea3": [
        "def solution():\n    ans = 421 * 11\n    return ans\n\nans = solution()"
    ],
    "4683962764924f4684ed92eb7591a368": [
        "def solution():\n    # Ayton to Beeton: 4 ways\n    # Beeton to Ceeton: 5 ways\n    # Ceeton to Deeton: 6 ways\n    # Ayton directly to Deeton: 3 ways\n    \n    # Since we can go from Ayton to Beeton to Ceeton to Deeton, we have 4 * 5 * 6 = 120 ways\n    ayton_to_deeton_through_others = 4 * 5 * 6\n    \n    # Since there are also 3 direct roads from Ayton to Deeton\n    ayton_to_deeton_directly = 3\n    \n    # Total ways is the sum of both possible routes\n    total_ways = ayton_to_deeton_through_others + ayton_to_deeton_directly\n    return total_ways\n\nans = solution()"
    ],
    "1eb4f3669f2a43a5ba508ec8beae550e": [
        "def solution():\n    # Given fraction equation: 15/20 = 3/□\n    # The goal is to find the value of □.\n    \n    # To find the equivalent fraction, we equate the cross-multiplications.\n    # 15 * □ = 20 * 3\n\n    # Simplifying the right side of the equation gives us:\n    right_hand_side = 20 * 3\n\n    # Now divide by 15 to solve for □\n    ans = right_hand_side / 15\n\n    return ans\n\nans = solution()"
    ],
    "37136a98a87e4ccc8a809b51309fdb50": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n\n    common_difference = (fifteenth_term - tenth_term) / (15 - 10)\n    twelfth_term = tenth_term + common_difference * (12 - 10)\n\n    return int(twelfth_term)\n\nans = solution()"
    ],
    "29a1fb0ba439450d99b96fff93b44d3a": [
        "def solution():\n    ans = 1003.67 + 108.98 + 9.08 + 102.33 + 32.02 - 3.08\n    return ans\n\nans = solution()"
    ],
    "5faf0bb3bd074227a53f6f2ca2666324": [
        "def solution():\n    count = 0\n    # Find multiples of 2 and 3 but not 4 (red and blue but not green)\n    for number in range(1, 2017):\n        if number % 2 == 0 and number % 3 == 0 and number % 4 != 0:\n            count += 1\n    # Find multiples of 2 and 4 but not 3 (red and green but not blue)\n    for number in range(1, 2017):\n        if number % 2 == 0 and number % 3 != 0 and number % 4 == 0:\n            count += 1\n    # Find multiples of 3 and 4 but not 2 (blue and green but not red)\n    # This condition will never be true because every multiple of 4 is also a multiple of 2, so we can ignore this loop.\n\n    return count\n\nans = solution()"
    ],
    "4241ca142c384e5db8c27de3f5d5df25": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's assume Joe had x dollars at first\n    sally = 3.75\n    joe = symbols('joe')\n    spent_each = 2.50\n\n    # Equation: Sally's money after spending + Joe's money after spending = total money left\n    equation = Eq((sally - spent_each) + (joe - spent_each), 5)\n\n    # Solving for Joe's original amount of money\n    joe_original_amount = solve(equation, joe)\n\n    return joe_original_amount[0]\n\nans = solution()"
    ],
    "0a0f38ce5c7546d5abe2f8fcc81598f0": [
        "def solution():\n    first_3_days_avg = 135\n    last_5_days_avg = 151\n    total_days = 8\n\n    total_trees_first_3_days = first_3_days_avg * 3\n    total_trees_last_5_days = last_5_days_avg * 5\n    total_trees = total_trees_first_3_days + total_trees_last_5_days\n\n    overall_avg = total_trees / total_days\n\n    return overall_avg\n\nans = solution()"
    ],
    "72e107fe7fc142fd8ecabcbd205ebd7a": [
        "def solution():\n    return 876 * 3\n\nans = solution()"
    ],
    "bb982f52c6d041079ae774e83f7e8a99": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n    equation = Eq((149 + magic_number), 5 * (21 + magic_number))\n    solution = solve(equation, magic_number)\n\n    return solution[magic_number]\n\nans = solution()"
    ],
    "064b4c0781ad453690eeb8941886a949": [
        "from math import comb\n\ndef solution():\n    salads = 15\n    soups = 20\n    vegetables = 12\n    sandwiches = 6\n\n    choices_for_two = comb(4, 2)\n\n    salads_soups = salads * soups\n    salads_vegetables = salads * vegetables\n    salads_sandwiches = salads * sandwiches\n    soups_vegetables = soups * vegetables\n    soups_sandwiches = soups * sandwiches\n    vegetables_sandwiches = vegetables * sandwiches\n\n    total_combinations = (salads_soups + salads_vegetables + \n                          salads_sandwiches + soups_vegetables + \n                          soups_sandwiches + vegetables_sandwiches)\n    \n    overall_choices = choices_for_two * total_combinations\n\n    return overall_choices\n\nans = solution()"
    ],
    "66db5c6e664741e08931a2b39f1d7db8": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if i % 2 == 0:\n            digits = [int(d) for d in str(i)]\n            if sum(digits) == 7:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "06968ea362d247569a9767c8f284e0e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the magic number symbol\n    magic_number = symbols('magic_number')\n\n    # Define the equation according to the problem statement\n    equation = Eq(202 + magic_number, 6 * (22 + magic_number))\n\n    # Solve the equation for the magic number\n    solved_magic_number = solve(equation, magic_number)\n\n    return solved_magic_number[0]\n\nans = solution()"
    ],
    "caaf98f1ce924c36986670403ceffbf8": [
        "def solution():\n    boy_diff = 32\n    total_students = 0\n\n    # starting from an array of 3x3, since at least one layer of each is needed\n    layer = 3\n    while True:  \n        # boys will be on odd layers, and girls on even layers\n        boys = layer**2 - (layer - 2)**2 if layer > 1 else 1\n        girls = (layer - 1)**2 - (layer - 3)**2 if layer > 2 else 0\n        \n        # check if the difference matches\n        if boys - girls == boy_diff:\n            total_students = layer**2 + girls\n            break\n        \n        layer += 2  # increasing by 2 to add a layer of boys and girls\n    \n    return total_students\n\nans = solution()"
    ],
    "bb7fbef0b6c04ccc86f554baf2f4420e": [
        "def solution():\n    from sympy import isprime\n\n    # We know that prime numbers greater than 2 are always odd.\n    n = 3  # Starting from the smallest odd prime number.\n    \n    while True:\n        # If conditions are not met, skip to the next odd number.\n        if not (isprime(n) and isprime(n + 2) and isprime(n + 4) and isprime(n + 106) and isprime(n + 308)):\n            n += 2\n            continue\n        \n        # If all numbers are prime, we have found our n.\n        return n\n\nans = solution()"
    ],
    "fcc29a22bd5b45e4abf794b10c54e303": [
        "def solution():\n    return 6.2 - 3.7\n\nans = solution()"
    ],
    "6fc14f87857d4b2ab8bc4618b7d72da4": [
        "def solution():\n    total_plasters = 12 * 30\n    plasters_per_day_new = 20\n    days_last = total_plasters / plasters_per_day_new\n    return days_last\n\nans = solution()"
    ],
    "4d30cc9b8bd246a78b9505752672ee09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 's' be the initial mass of strawberries\n    s = symbols('s')\n    m = s + 448  # The initial mass of mangoes\n    m -= 900  # After giving away 900g of mangoes\n\n    # After giving away mangoes, the mass of strawberries is twice the mass of mangoes\n    equation = Eq(s, 2 * m)\n\n    # Solve the equation for 's'\n    s_value = solve(equation, s)\n\n    return s_value[0]\n\nans = solution()"
    ],
    "5bb673202e8c4412b7bf28637be9a334": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_items = symbols('total_items')\n\n    # Create equations based on the problem statement\n    apples = (2/3) * total_items\n    bananas = (1/9) * total_items\n    lemons = total_items - apples - bananas\n    \n    equation = Eq(apples - lemons, 12)\n\n    # Solve the equation for the total number of items\n    total_items_solution = solve(equation, total_items)\n\n    lemons_count = total_items_solution[0] - (2/3) * total_items_solution[0] - (1/9) * total_items_solution[0]\n\n    return lemons_count\n\nans = solution()"
    ],
    "598caa8f690845ce82ae845429eed710": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the original amounts for Max and Anthony\n    max_original, anthony_original = symbols('max_original anthony_original')\n\n    # Equations based on the given ratios\n    # If Max bought the chocolates\n    equation1 = Eq((max_original - 12) / anthony_original, 2 / 5)\n    # If Anthony bought the chocolates\n    equation2 = Eq(max_original / (anthony_original - 12), 8 / 13)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (max_original, anthony_original))\n\n    # Return the original amount of money Max had\n    return solutions[max_original]\n\nans = solution()"
    ],
    "5b2783f2b2b94d62984318ff167ab65d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red_initial, blue_initial, blue_remaining = symbols('red_initial blue_initial blue_remaining')\n\n    red_final = red_initial * (1 - 2/3)\n    total_initial = red_initial + blue_initial\n    total_final = total_initial / 4\n\n    equation1 = Eq(red_initial, blue_initial)\n    equation2 = Eq(red_final + blue_remaining, total_final)\n\n    solutions = solve((equation1, equation2), (red_initial, blue_remaining))\n\n    blue_given_away_fraction = (solutions[red_initial] - solutions[blue_remaining]) / solutions[red_initial]\n\n    return blue_given_away_fraction\n\nans = solution()"
    ],
    "2df9daedfb014f1a9790c3fcebc2c6cc": [
        "from math import factorial\n\ndef solution():\n    n = 20 - 6  # We start by giving 1 pen to each kid\n    k = 6 - 1   # We want to split the remaining pens among the kids\n    # Calculate the number of ways to divide n pens among k kids\n    ans = factorial(n + k) // (factorial(n) * factorial(k))\n    return ans\n\nans = solution()"
    ],
    "774b551f44f642d4ad38d30236c3d19d": [
        "def solution():\n    base_unit_digit = 4\n    powers_of_4_cycle = [4, 6, 4, 6] # Unit digits of powers of 4\n    cycle_length = len(powers_of_4_cycle)\n    exponent_mod_cycle = 2022 % cycle_length\n\n    unit_digit = powers_of_4_cycle[exponent_mod_cycle - 1]\n    return unit_digit\n\nans = solution()"
    ],
    "934a4d14b18e49949c6ef24167ffb74e": [
        "def solution():\n    # The strategy here is to minimize the number of marbles in the biggest pile.\n    # To do so, we start distributing the marbles in the smallest piles first.\n    # We can start from one marble for the first pile and increase by one for subsequent piles,\n    # since all piles must have different numbers of marbles.\n    # Given that piles are distinct, we can use the smallest possible numbers 1, 2, and 3 for the first three piles.\n    # Then we subtract the sum of these from the total to find the minimum number for the biggest pile.\n\n    total_marbles = 16\n    # Assuming we use the minimum number of marbles in the first three piles (1, 2, and 3)\n    first_piles_marbles = 1 + 2 + 3\n    # The smallest possible number in the biggest pile would be the remainder\n    biggest_pile = total_marbles - first_piles_marbles\n\n    return biggest_pile\n\nans = solution()"
    ],
    "efedc63bacb049028c7f9d9de27653a3": [
        "def solution():\n    # Define lengths in millimetres\n    lengths_mm = [\n        10,          # 10 millimetres\n        100 * 10,    # 100 centimetres\n        10 * 1000,   # 10 metres\n        2 * 1000 * 1000,   # 2 kilometres\n        2800 * 10,   # 2800 centimetres\n        2500 * 1000, # 2500 metres\n        100,          # 100 millimetres\n        100 * 1000    # 100 metres\n    ]\n\n    # Find the index of the smallest length\n    smallest_length_index = lengths_mm.index(min(lengths_mm))\n\n    # Return the smallest length in original units\n    original_units = [\"10 millimetres\", \"100 centimetres\", \"10 metres\", \"2 kilometres\",\n                      \"2800 centimetres\", \"2500 metres\", \"100 millimetres\", \"100 metres\"]\n    ans = original_units[smallest_length_index]\n    \n    return ans\n\nans = solution()"
    ],
    "3c6d061b54774cefa8ae106251ed9e95": [
        "def solution():\n    first_day_pages = 30\n    last_day_pages = 70\n    difference = 4\n    \n    num_days = ((last_day_pages - first_day_pages) // difference) + 1\n    total_pages = (num_days * (first_day_pages + last_day_pages)) // 2\n    \n    return total_pages\n\nans = solution()"
    ],
    "189eefe9efb74acf9b1ba115d8e2b1cc": [
        "def solution():\n    largest_5_digit = 99999\n    smallest_6_digit = 100000\n    difference = smallest_6_digit - largest_5_digit\n    return difference\n\nans = solution()"
    ],
    "22169485afe346008751bdb1b79de0ac": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 2, 3, 4, 5, 6]\n    odd_numbers = [num for num in digits if num % 2 != 0]\n    count = 0\n\n    for perm in permutations(digits, 3):\n        if perm[-1] in odd_numbers:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "875c9cac1ffb4452aabd90fa4729b651": [
        "def solution():\n    swim_only = 20 - 10\n    basketball_only = 25 - 10\n    both = 10\n    neither = 9\n    total_students = swim_only + basketball_only + both + neither\n    return total_students\n\nans = solution()"
    ],
    "e8d4c70e0af44824834deba59032af0c": [
        "def solution():\n    sequence = [3, 7, 11, 15, 19]\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "61cfc0ac0f1449fa967d6076176b1137": [
        "def solution():\n    return 324 * 24\n\nans = solution()"
    ],
    "2a20ffa4a69c4484999bb958ab96dc80": [
        "def solution():\n    steps = 1991\n    while True:\n        steps += 1\n        if str(steps) == str(steps)[::-1]:\n            return steps - 1991\n\nans = solution()"
    ],
    "18b56edf99804cd18f944ac9024bf259": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(A, 2/3 * B)\n    equation2 = Eq(B, 4/5 * C)\n    equation3 = Eq(A, C - 21)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "e2f136c1d0e3438fb5a5222737d65150": [
        "def solution():\n    return 34.2 + 2.96 + 0.0364\n\nans = solution()"
    ],
    "a51a939a7af045ed9ba206d87ac10cdc": [
        "def solution():\n    count = 0\n    for year in range(2018, 2109):\n        if sum(map(int, str(year))) == 18:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "afe76018408f45b5a643b041061c21be": [
        "def solution():\n    count = 0\n    for page in range(1, 201): # Iterating through page numbers 1 to 200\n        count += str(page).count('4') # Counting the number of '4's in each page number\n    return count\n\nans = solution()"
    ],
    "c9fc66837ed74b1eb8a4707c4398b6d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    bookmarks, pupils = symbols('bookmarks pupils')\n    \n    equation1 = Eq(bookmarks - 4 * pupils, 8)\n    equation2 = Eq(bookmarks - 6 * pupils, -10)\n    \n    solutions = solve((equation1, equation2), (bookmarks, pupils))\n    \n    return solutions[bookmarks]\n\nans = solution()"
    ],
    "b36c82106098479eb7454b8150d50947": [
        "def solution():\n    return 608 * 56\n\nans = solution()"
    ],
    "bf559d9d7adc46e5928853ca81300c0d": [
        "def solution():\n    # Let's denote the number of cows as c and the number of ducks as d\n    # Each cow has 4 legs and each duck has 2 legs\n    # We have two equations:\n    # c + d = 25 (total animals)\n    # 4c + 2d = 68 (total legs)\n    \n    # We can solve these equations for c and d\n    # From the first equation, we get c = 25 - d\n    # Plugging this into the second equation, we get:\n    # 4(25 - d) + 2d = 68\n    # 100 - 4d + 2d = 68\n    # 2d = 68 - 100\n    # 2d = -32\n    # d = -32 / 2\n    # d = -16, which does not make sense for the number of ducks\n    \n    # It seems there is an error in the script or the problem as we cannot have a negative number of ducks\n    # Let's correct the formulation by assuming a total of 68 legs and cows have 4 legs and ducks 2 as per the instructions.\n    # Hence:\n    # 4c + 2d = 68\n    # factoring out 2, we get 2c + d = 34\n    # c + d = 25\n    # subtracting these two equations we get:\n    # 2c + d - (c + d) = 34 - 25\n    # c = 9\n    # therefore, d = 25 - c = 25 - 9\n    d = 25 - 9\n    \n    return d\n\nans = solution()"
    ],
    "fc746990a19a47ab9601f133eccf8da2": [
        "def solution():\n    total_children = 11 + 5\n    avg_height = 122.5\n    girl_boy_height_diff = 3.2\n\n    # Let's denote the average height of boys as 'boy_avg'\n    # Then, the average height of girls is 'boy_avg + girl_boy_height_diff'\n\n    # The total height is the sum of the average heights of boys and girls multiplied by their counts\n    # So, we have the following equation:\n    # (11 * (boy_avg + girl_boy_height_diff)) + (5 * boy_avg) = total_children * avg_height\n\n    # Solving for boy_avg, we get:\n    boy_avg = (total_children * avg_height - 11 * girl_boy_height_diff) / total_children\n\n    # Now we can calculate the average height of the girls\n    girl_avg = boy_avg + girl_boy_height_diff\n\n    return girl_avg\n\nans = solution()"
    ],
    "fe1dad1b4cf74ae287ebf8d0b28bb3b4": [
        "def solution():\n    # Use recursive relation for maximum number of regions (R_n) formed by n lines:\n    # R_n = R_(n-1) + n (where R_1 = 2)\n    # Since each triangle consists of 3 lines and they don't necessarily intersect at the same points,\n    # we consider n as the total number of lines.\n    \n    # Initial number of regions formed by 1 line (which is a base of a triangle)\n    R_1 = 2\n    # Total number of lines from 5 non-overlapping triangles is 3*5\n    total_lines = 3 * 5\n    \n    # Calculate recursively the maximum number of regions the plane can be divided into\n    ans = R_1\n    for i in range(2, total_lines + 1):\n        ans += i\n    \n    return ans\n\nans = solution()"
    ],
    "28e62637c4fc4eadb594a6d0da417836": [
        "def solution():\n    return 602 // 7\n\nans = solution()"
    ],
    "ea4169e9382046cda7491251be10687b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n    total_students = 70\n    total_average = 66\n    girls_average = 70\n    boys_average = 63\n\n    equation1 = Eq(girls + boys, total_students)\n    equation2 = Eq(girls_average * girls + boys_average * boys, total_students * total_average)\n\n    solutions = solve((equation1, equation2), (girls, boys))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "cafcc058aa184b18aab818d577427a22": [
        "def solution():\n    # Since they are consecutive odd numbers, the numbers form an arithmetic sequence\n    # with a common difference of 2. Let the middle number be 'm'\n    # There are 4 numbers before and after the middle number 'm'\n    # Hence, we have (m-8 + m-6 + m-4 + m-2 + m + m+2 + m+4 + m+6 + m+8) = 1503\n    # Which is 9m = 1503\n    \n    total_sum = 1503\n    num_terms = 9\n    \n    # Calculate the middle term 'm'\n    m = total_sum // num_terms\n    \n    # Calculate the smallest value, which is 'm' minus 4 times the common difference 2\n    smallest_value = m - 8\n    \n    return smallest_value\n\nans = solution()"
    ],
    "ed7781ecfa264cb686cd6671df26577b": [
        "def solution():\n    term_32 = 157\n    term_108 = 537\n    n_32 = 32\n    n_108 = 108\n\n    # Calculate the difference (d) between consecutive terms\n    d = (term_108 - term_32) / (n_108 - n_32)\n\n    # Calculate the first term (a_1)\n    a_1 = term_32 - d * (n_32 - 1)\n\n    return a_1\n\nans = solution()"
    ],
    "398f40d1810d4daf96c3048cfc41ed7c": [
        "def solution():\n    # Starting from Kate's perspective\n    kate_left = 42\n    kate_ate = kate_left * 1/4\n    kate_total = kate_left + kate_ate  # kate_total represents the candies before Kate ate\n\n    # Calculating the total candies that Jane had\n    jane_ate = 4\n    jane_total = kate_total * 3 + jane_ate  # jane_total represents the candies before Jane ate\n\n    # Calculating the total number of candies Donna gave to Jane\n    donna_remainder_gave = jane_total * 1/3 + jane_ate\n\n    # Calculating the total candies Donna had\n    donna_total = (donna_remainder_gave + 3) * 2\n\n    return donna_total\n\nans = solution()"
    ],
    "1e6694bd51114d55895dbe80e548b123": [
        "def solution():\n    # There are 4 individuals. Let's label them A, B, C, D.\n    # A starts passing the ball so the start and end is fixed: A -> X -> Y -> A\n    # Since the ball has to return to A after 3 passes, A can pass to B, C, or D (3 options)\n    # Whomever catches the ball can pass to either of the two remaining people (2 options)\n    # Therefore, the total number of different methods is 3 passes * 2 passes = 6 methods\n\n    ans = 3 * 2\n    return ans\n\nans = solution()"
    ],
    "c6c7e58ef9c24768a4622a112505b93d": [
        "def solution():\n    cost_per_crisp = 5\n    days = 5\n    total_cost = cost_per_crisp * days\n    return total_cost\n\nans = solution()"
    ],
    "046de3a2a2bc40f1bb251c3bf9fae045": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "cc823defea034e0fbb575cefdc9584df": [
        "def solution():\n    ans = 342 + 469\n    return ans\n\nans = solution()"
    ],
    "61be272e45f5417780499f0cb4d747d2": [
        "def solution():\n    ans = (36 * 21) // (6 * 7)\n    return ans\n\nans = solution()"
    ],
    "d0be78861f1d41c8bd8c7de01241ca3a": [
        "def solution():\n    from itertools import permutations\n\n    # Generate all permutations of the digits 0-9\n    perm = permutations(range(10), 2)\n\n    # Loop through permutations to find when QP - PQ = 18\n    for q, p in perm:\n        qp = q * 10 + p\n        pq = p * 10 + q\n        if qp - pq == 18:\n            return qp\n\nans = solution()"
    ],
    "88aebab1fdb9459da60e672b70e23921": [
        "def solution():\n    # Let x be the number of storybooks Anthea originally has\n    # Then, after Jason gives Anthea 4 books, they have the same number:\n    # Jason's new total: 30 - 4\n    # Anthea's new total: x + 4\n    # This gives us the equation:\n    # 30 - 4 = x + 4\n    # Solving for x\n    x = (30 - 4) - 4\n\n    # The difference in their number of storybooks originally is:\n    # Jason's original - Anthea's original\n    difference = 30 - x\n\n    return difference\n\nans = solution()"
    ],
    "8c7bad2823b64ce9bd000eca653f9f98": [
        "def solution():\n    lcm = 4 * 10\n    for i in range(1, lcm + 1):\n        if i % 4 == 0 and i % 10 == 0:\n            return i\n\nans = solution()"
    ],
    "7e40ac2cb8734521aa2bcc3baf6d6cd1": [
        "def solution():\n    return sum(range(27, 34))\n\nans = solution()"
    ],
    "42175aff49384f8fb2e1b8e87cd5d6dc": [
        "def solution():\n    ans = 0.98 + 1.98 + 2.98 + 3.98\n    return ans\n\nans = solution()"
    ],
    "dfc638bbb6ae4aabb28cb4b9417fc631": [
        "def solution():\n    speed = 2  # metres per second\n    time = 12 * 60  # minutes to seconds\n    distance = speed * time\n    return distance\n\nans = solution()"
    ],
    "090de4dbbc22403c821128cff3d594be": [
        "def solution():\n    common_factor = 4\n    term1 = 2020 * 68\n    term2 = 505 * 128\n\n    extracted1 = term1 // common_factor\n    extracted2 = term2 // common_factor\n\n    ans = (extracted1 + extracted2) * common_factor\n    return ans\n\nans = solution()"
    ],
    "abbaed0cf4b24b7a96c8d6bc432d9ddb": [
        "def solution():\n    xavier_sugar = 100 * 0.25\n    yelena_sugar = 500 * 0.55\n    carol_sugar = 400 * 0.35\n\n    total_sugar = xavier_sugar + yelena_sugar + carol_sugar\n    total_solution = 100 + 500 + 400\n\n    concentration = (total_sugar / total_solution) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "e6223ed171b341058c807c2c490548d2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # A's and B's work rates\n    A, B = symbols('A B', positive=True, real=True)\n\n    # A's efficiency is twice B's\n    equation1 = Eq(A, 2 * B)\n\n    # A finishes the job in 12 days less than B\n    # Thus, the time taken by B = time taken by A + 12\n    # Work done (W) can be assumed 1 (as in the whole job)\n    # W = A * time_A = B * time_B\n    # Given that W = 1 (completing the whole job)\n    # the equation becomes 1/A + 1/(A + 12) = 1\n    equation2 = Eq(1 / A + 1 / (A + 12), 1)\n\n    # Solve equations for A\n    solutions = solve((equation1, equation2), A)\n\n    # Solve for B using one of the solutions\n    B_value = solutions[0] / 2\n\n    # Time taken by both A and B working together is 1 / (A + B)\n    total_time = (1 / (solutions[0] + B_value)).evalf()\n\n    return total_time\n\nans = solution()"
    ],
    "aef98a3088f64f3c987d8e8cad49eb89": [
        "def solution():\n    total_paid = 10\n    newspaper_cost = 2.20\n    change_received = 4.83\n\n    tissues_cost = total_paid - (newspaper_cost + change_received)\n\n    return tissues_cost\n\nans = solution()"
    ],
    "ab364c81a2864910ac73de45139fb81c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # symbol declaration for boys and girls\n    b = symbols('b')\n    \n    # equation representing the given situation\n    equation = Eq((2/5) * b, b - 42 - 12)\n    \n    # solving the equation\n    solved_b = solve(equation, b)[0]\n    \n    # since the initial number of boys and girls is equal, total students is 2 * number of boys\n    total_students = 2 * solved_b\n    \n    return total_students\n\nans = solution()"
    ],
    "c44b7e0f636c4a559b50166c1518c540": [
        "def solution():\n    # convert minutes to hours\n    late_time = 12 / 60\n    early_time = 4 / 60\n    \n    # Let the distance be d km\n    # Using the formula time = distance / speed\n    # When late, the time taken is time = d / 3 - 12 minutes (converted to hours)\n    # When early, the time taken is time = d / 5 + 4 minutes (converted to hours)\n    # d / 3 - d / 5 = late_time + early_time\n    \n    # Calculate the distance\n    d = (3 * 5 * (late_time + early_time)) / (5 - 3)\n    \n    return d\n\nans = solution()"
    ],
    "c34811dd64254c04b657b905af68cf0f": [
        "def solution():\n    return 111111111 * 99999999\n\nans = solution()"
    ],
    "c7ddd97daf6145ed96ee9ebd4abbe31a": [
        "import math\n\ndef solution():\n    # Number of digits to choose from\n    digits = 3\n    \n    # Calculate the number of permutations for each possible length\n    ans = sum(math.perm(digits, i) for i in range(1, digits + 1))\n    \n    return ans\n\nans = solution()"
    ],
    "9a23b61c00aa4f4f9ce7d319f75b093d": [
        "def solution():\n    # Number of baskets of tomatoes\n    tomatoes = 27\n    # Number of baskets of cucumbers is 3 more than 3 times of tomatoes\n    cucumbers = 3 + (3 * tomatoes)\n    \n    return cucumbers\n\nans = solution()"
    ],
    "5f9a3caf3a844c859338c8ee6c84403c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r represent the original number of candies Rachel has\n    # Let a represent the original number of candies Alice has\n    r, a = symbols('r a')\n\n    # Form the equations based on the problem statement\n    eq1 = Eq(r - 10, a + 10)  # If Rachel gives Alice 10 candies, they have the same number\n    eq2 = Eq(r + 10, 3 * (a - 10) + 4)  # If Alice gives Rachel 10 candies, Rachel has 4 more than 3 times Alice's candies\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (r, a))\n\n    # Calculate the total number of candies they originally had\n    total_candies = solutions[r] + solutions[a]\n    \n    return total_candies\n\nans = solution()"
    ],
    "a914eab1c1f143d09f08b68c60165f8a": [
        "def solution():\n    cost_per_pencil_case = 6.25\n    total_cost_for_12_cases = cost_per_pencil_case * 12\n    return total_cost_for_12_cases\n\nans = solution()"
    ],
    "de26875a56ac47ad9dcf5dcc75dde7cf": [
        "def solution():\n    last_night_temp = -8\n    today_temp = 13\n\n    increase = today_temp - last_night_temp\n\n    return increase\n\nans = solution()"
    ],
    "5bd1eec767354db6b84f9b6d57d59263": [
        "from math import factorial\n\ndef solution():\n    # Calculate the number of ways to arrange four different colored socks\n    ways_with_different_colors = factorial(4)\n    \n    # Calculate the number of ways to arrange two different colored pairs of socks\n    # There are four socks in total, two of each color.\n    # First, arrange the two pairs (as if they were unique), then divide by the permutation of the two identical pairs.\n    ways_with_pairs = factorial(4) // (factorial(2) * factorial(2))\n    \n    return ways_with_different_colors, ways_with_pairs\n\nans = solution()"
    ],
    "b3d11c4825554079b29f7c4d34b2ed81": [
        "def solution():\n    A = 40\n    B = A / 2\n    C = B / 2\n    total_value = A + B + C\n    return total_value\n\nans = solution()"
    ],
    "5baea30fbec6495a8b6283b09656e48a": [
        "def solution():\n    total_pupils = 112 + 1098\n    pupils_each_room = total_pupils // 2\n    return pupils_each_room\n\nans = solution()"
    ],
    "c60c26e3a9984f1fb74edb0acff647db": [
        "def solution():\n    # Let's assume the initial number of boys is 3x and girls is 2x (since the ratio is 3:2)\n    # After 12 boys and girls joined, the new numbers are (3x + 12) boys and (2x + 12) girls\n    # The new ratio is therefore (3x + 12):(2x + 12) = 19:14\n    # Then we can write an equation for the ratio as:\n    # (3x + 12) / (2x + 12) = 19/14\n    # Solving this equation will give us the value of x.\n\n    # We will solve for x which gives us the original counts.\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((3*x + 12) / (2*x + 12), 19/14)\n\n    # Now we solve for x\n    x_value = solve(equation, x)\n\n    # Once we have the original count of boys and girls, we can add 12 to each to find the total.\n    boys_original = 3 * x_value[0]\n    girls_original = 2 * x_value[0]\n\n    # New total after 12 boys and girls joined\n    total_children_afternoon = boys_original + girls_original + 12 + 12\n\n    return total_children_afternoon\n\nans = solution()"
    ],
    "b13f6c28aaeb458aaa713c2e08380709": [
        "def solution():\n    # The lengths of the two iron bars are given and so is the length of the joint\n    length_bar1 = 23\n    length_bar2 = 37\n    length_joint = 3\n\n    # The full length is the sum of the lengths of the two bars minus the joint, since it's double-counted\n    full_length = (length_bar1 + length_bar2) - length_joint\n    \n    return full_length\n\nans = solution()"
    ],
    "504138d5ab434544b07d09526512e8d0": [
        "def solution():\n    # Define the gravity on Earth and the Moon\n    g_earth = 9.81  # acceleration due to gravity on Earth (m/s^2)\n    g_moon = g_earth / 6  # acceleration due to gravity on the Moon (m/s^2)\n\n    # Period of the simple pendulum on Earth\n    T_earth = 1  # given period on Earth in seconds\n\n    # Calculate the length of the pendulum using the formula: T = 2*pi*sqrt(L/g)\n    # Rearrange the formula to get the length L: L = (T^2 * g) / (4 * pi^2)\n    from math import pi, sqrt\n\n    L = (T_earth ** 2 * g_earth) / (4 * pi ** 2)\n\n    # Calculate the period of the simple pendulum on the Moon using the formula: T = 2*pi*sqrt(L/g)\n    T_moon = 2 * pi * sqrt(L / g_moon)\n\n    return T_moon\n\nans = solution()"
    ],
    "8fbd1f3154514d90b348d98dc9937be2": [
        "def solution():\n    for william_correct in range(11):\n        justin_correct = william_correct + 24//6\n        total_correct = justin_correct + william_correct\n        total_points = justin_correct*6 - (10-justin_correct)*2 + william_correct*6 - (10-william_correct)*2\n        if total_points == 96:\n            return william_correct\n\nans = solution()"
    ],
    "b24c8d3c218c4aacac0618f7c854fd25": [
        "def solution():\n    tile_count = 400\n    side_length = int(tile_count ** 0.5)  # Since the wall is square-shaped\n    red_tiles = green_tiles = 0\n    \n    for layer in range(0, side_length // 2):\n        if layer % 2 == 0:  # red layer\n            layer_tile_count = (side_length - 2 * layer) ** 2 - (side_length - 2 * (layer + 1)) ** 2\n            red_tiles += layer_tile_count\n        else:  # green layer\n            layer_tile_count = (side_length - 2 * layer) ** 2 - (side_length - 2 * (layer + 1)) ** 2\n            green_tiles += layer_tile_count\n\n    # Center tile, if side_length is odd\n    if side_length % 2 != 0:\n        if (side_length // 2) % 2 == 0:  # Center is red\n            red_tiles += 1\n        else:  # Center is green\n            green_tiles += 1\n    \n    dominant_color = 'red' if red_tiles > green_tiles else 'green'\n    more_tiles = abs(red_tiles - green_tiles)\n    return (dominant_color, more_tiles)\n\nans = solution()"
    ],
    "10f23d6da9944476ae1f44b6fd44944d": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime.strptime(\"1 Mar\", \"%d %b\")\n    end_date = datetime.strptime(\"15 Apr\", \"%d %b\")\n    current_year = datetime.now().year\n    start_date = start_date.replace(year=current_year)\n    end_date = end_date.replace(year=current_year)\n    \n    delta = end_date - start_date\n    return delta.days + 1\n\nans = solution()"
    ],
    "c3766f132f16414bb326ea29c9942ad7": [
        "def solution():\n    x_squared = 7\n    x_fourth = x_squared ** 2\n    return x_fourth\n\nans = solution()"
    ],
    "1d5693592dcd4d74af7216902ea3469a": [
        "def solution():\n    # A's work rate per day\n    A_rate = 1 / 15\n    # B's work rate per day\n    B_rate = 1 / 10\n\n    # Work done in 3 days\n    work_done = 3 * (A_rate + B_rate)\n    # Remaining work to be done\n    remaining_work = 1 - work_done\n\n    # Time for B to finish the remaining work alone\n    time_B = remaining_work / B_rate\n\n    return time_B\n\nans = solution()"
    ],
    "fe9c604c26c54da584f4631fb51fabca": [
        "def solution():\n    return 265 * 30\n\nans = solution()"
    ],
    "8d3535d489694c9ab72858ec3e09c1ee": [
        "def solution():\n    import math\n    # Calculate the side length of the square array\n    side_length = int(math.sqrt(100))\n    \n    # Calculate the number of people in the outermost layer\n    # There are 4 sides and the corners are counted only once\n    outer_layer_count = 4 * side_length - 4\n\n    return outer_layer_count\n\nans = solution()"
    ],
    "0f1117672a63416cbd3434112e8ffbdd": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Define symbols for the digits\n    A, B, C, D, E, F, G, H, I = symbols('A B C D E F G H I', integer=True)\n\n    # Define the constraints for digits from 1 to 9\n    constraints = (\n        A > 0, B > 0, C > 0, D > 0, E > 0, F > 0, G > 0, H > 0, I > 0,   # all digits are positive\n        A < 10, B < 10, C < 10, D < 10, E < 10, F < 10, G < 10, H < 10, I < 10, # all digits are less than 10\n        A != B, A != C, A != D, A != E, A != F, A != G, A != H, A != I,  # all digits are different\n        B != C, B != D, B != E, B != F, B != G, B != H, B != I,\n        C != D, C != E, C != F, C != G, C != H, C != I,\n        D != E, D != F, D != G, D != H, D != I,\n        E != F, E != G, E != H, E != I,\n        F != G, F != H, F != I,\n        G != H, G != I,\n        H != I,\n    )\n\n    # Define the equation represented by the number puzzle\n    equation = Eq((A*(10**8) + B*(10**7) + C*(10**6) + D*(10**5) + E*(10**4) + F*(10**3) + G*(10**2) + H*10 + I) + \n                  (A*(10**8) + D*(10**7) + I*(10**6) + H*(10**5) + G*(10**4) + F*(10**3) + E*(10**2) + C*10 + B), \n                 (B*(10**8) + C*(10**7) + E*(10**6) + F*(10**5) + G*(10**4) + H*(10**3) + I*(10**2) + A*10 + G))\n\n    # Solve the equation with the given constraints\n    solution = solve((equation,) + constraints, (A, B, C, D, E, F, G, H, I), dict=True)\n\n    # Extract the value of A from the solution\n    ans = solution[0][A]\n    return ans\n\nans = solution()"
    ],
    "6aff689afc7c437db64fc2e27c02833a": [
        "def solution():\n    first_term = 50\n    difference = 46 - 50  # Negative because the sequence is decreasing\n    # Find the term that is just before becoming negative:\n    # nth term = first_term + ((n - 1) * difference), so if nth term <= 0\n    # 0 >= 50 + ((n - 1) * -4)\n    # n - 1 <= 50 / 4\n    # n <= (50 / 4) + 1\n    # Since we can't have a fraction of a term, we use the floor division and add 1\n    num_terms = first_term // abs(difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "10195dd0d1d04543a0ade2917338e294": [
        "def solution():\n    # The game is about creating a situation where the opponent is forced to make a move that leaves you in a winning position.\n    # The winning strategy for such games often involves Nim-sum, which is the XOR of the count of objects (cards in this case) in each pile.\n    # When the Nim-sum is zero, the player about to play is in a losing position if the opponent does not make a mistake.\n    # The piles have 88 and 52 cards. Let's find the Nim-sum:\n    \n    nim_sum = 88 ^ 52\n    \n    # If the Nim-sum is not zero, the winning strategy is to play in a way that leaves the Nim-sum at zero after your turn.\n    # If Tom (player 1) starts, for him to win, he has to ensure the Nim-sum is zero after his first move.\n    # So, Tom should aim for making a move that results in equalizing the card count in a way that their XOR (Nim-sum) will be zero.\n    \n    # Find a pile where removing a certain number of cards would make the Nim-sum zero.\n    # Note: A pile is safe to remove cards from if it has more cards than the Nim-sum at the start.\n\n    if nim_sum == 0:\n        # This would mean Tom is in a losing position if Jane plays perfectly, but we assume Tom goes first and must make a move.\n        move = {'pile': 'A', 'cards_to_take': 1}  # Arbitrarily choose a valid move\n    else:\n        # Find out which pile to remove cards from (pile with more cards than the Nim-sum)\n        if 88 >= nim_sum:\n            cards_to_take = 88 - (88 ^ nim_sum)  # We want to leave this pile with a new count that is the Nim-sum.\n            move = {'pile': 'A', 'cards_to_take': cards_to_take}\n        else:\n            cards_to_take = 52 - (52 ^ nim_sum)\n            move = {'pile': 'B', 'cards_to_take': cards_to_take}\n\n    # Tom's winning first move is to take the calculated number of cards from the determined pile.\n    return move\n\nans = solution()"
    ],
    "6564fd0ca13b4e9b8f99f3ea28add3e9": [
        "def solution():\n    # Hugo had $280 left after giving 1/8 of the remaining cash to his mum\n    # Let's denote the money left after giving to his sister as remaining_after_sister\n    # remaining_after_sister - (1/8)*remaining_after_sister = 280\n\n    # remaining_after_sister * (1 - 1/8) = 280\n    # remaining_after_sister * (7/8) = 280\n    # remaining_after_sister = 280 / (7/8)\n    remaining_after_sister = 280 / (7.0/8.0)\n\n    # Now we know the amount he had after giving 3/7 to his sister\n    # Let's denote the original amount of money as original_amount\n    # original_amount - (3/7)*original_amount = remaining_after_sister\n    # original_amount * (1 - 3/7) = remaining_after_sister\n    # original_amount * (4/7) = remaining_after_sister\n    # original_amount = remaining_after_sister / (4/7)\n    original_amount = remaining_after_sister / (4.0/7.0)\n\n    return original_amount\n\nans = solution()"
    ],
    "e77e2351b78345d6962d155aaf8c5efa": [
        "def solution():\n    loafs_per_cup = 6 / 5\n    desired_loafs = 24\n    cups_needed = desired_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "ad2a343c34cb44ac88504dd245fdcc8b": [
        "def solution():\n    # You can't distribute 80 apples to less than 3 students if each gets at least 3 apples\n    # Let's start by giving 3 apples to each student and see how many students\n    # we can distribute to without exceeding 80 apples\n    apples = 80\n    min_apples_per_student = 3\n    max_students = apples // min_apples_per_student\n    \n    return max_students\n\nans = solution()"
    ],
    "5dbed78cb0054ac8b310230d17f9c26e": [
        "def solution():\n    temperatures = [-10, 16, 9, 2]\n    difference = max(temperatures) - min(temperatures)\n    return difference\n\nans = solution()"
    ],
    "1848fbe1d98944c9b1f806488a4b51a7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, white, black = symbols('red white black')\n\n    equation1 = Eq(red / white, 1 / 2)\n    equation2 = Eq(white / black, 3 / 4)\n    equation3 = Eq(red + white + black, 34)\n\n    solutions = solve((equation1, equation2, equation3), (red, white, black))\n\n    return solutions[red]\n\nans = solution()"
    ],
    "a54b55467ea147c6b9f5372a54243a74": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cheesecake, logcake = symbols('cheesecake logcake')\n\n    equation1 = Eq(6*cheesecake + 7*logcake, 1426)\n    equation2 = Eq(4*cheesecake, 3*logcake)\n\n    solutions = solve((equation1, equation2), (cheesecake, logcake))\n\n    cost = 10 * solutions[cheesecake] + 10 * solutions[logcake]\n\n    return cost\n\nans = solution()"
    ],
    "9563da65f57444518660d7e7ae11fc79": [
        "def solution():\n    total_amount = 51.20\n    people_count = 8\n    \n    amount_per_person = total_amount / people_count\n    \n    return amount_per_person\n\nans = solution()"
    ],
    "c913d4e63fce41d2aaca6a3e2a3cf6f4": [
        "def solution():\n    # Since the last digit of a factorial will be zero once it includes a multiple of 10,\n    # and since 2014! is sure to have 10 as one of the factors (in fact, it has 201 10s),\n    # the last non-zero digit of 2014! will be 0.\n    ans = 0\n    return ans\n\nans = solution()"
    ],
    "7b4cba3fe33741189ed2ca4a5ed157f2": [
        "def solution():\n    fraction = 4/50\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "82fc1a902d704c95a9aa6a164228805e": [
        "def solution():\n    base_area = 5 * 5      # Area of the base of the prism\n    hole_area = 1 * 1      # Area of the hole\n    net_base_area = base_area - hole_area # Net area with the hole subtracted\n    \n    # To find the height we divide the volume by the net area of the base\n    height = 480 / net_base_area\n    return height\n\nans = solution()"
    ],
    "80d14d6dace648ab9a745e93b255b8c9": [
        "def solution():\n    total = 0\n    for n in range(1, 11):\n        total += n * (2 * n - 1)\n    return total\n\nans = solution()"
    ],
    "4d8068dd3c0d45ac9d058b56e9ab8e71": [
        "def solution():\n    pencil_cost = 5\n    pen_cost = 15\n\n    # Simplify the ratio to find out how many pencils equal the cost of one pen\n    pencils_per_pen = pen_cost // pencil_cost\n\n    return pencils_per_pen\n\nans = solution()"
    ],
    "d3e59c50fe3a4e3c8c9fc840de30fe66": [
        "def solution():\n    # Since the pattern is to add and subtract subsequent numbers,\n    # odd numbers are added and even numbers are subtracted.\n    # We can pair the numbers (1, -2), (3, -4), ..., (999, -1000)\n    # Each pair sums up to -1 and there are 500 such pairs (from 1 to 1000).\n    # The last number, 1001, is added to the cumulative sum of the pairs.\n    pairs_sum = -1 * (1000 // 2)\n    ans = pairs_sum + 1001\n\n    return ans\n\nans = solution()"
    ],
    "f9c8b3de0b744d5bb1ceeff64db1f6f8": [
        "def solution():\n    ans = 12 + 102 + 1002 + 10002\n    return ans\n\nans = solution()"
    ],
    "d4f12453aa6f49b4880fbca48045adeb": [
        "def solution():\n    count = 0\n    for x1 in range(1, 13): # Excluding 0, start from 1\n        for x2 in range(1, 13): # Excluding 0, start from 1\n            for x3 in range(1, 13): # Excluding 0, start from 1\n                if x1 + x2 + x3 == 13:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "b4cb09af0f6e4f17bdbc0e57212c2ab5": [
        "def solution():\n    marbles_given_to_brother = 26\n    marbles_given_to_sisters = 13 * 2\n    marbles_left = 16\n\n    total_marbles = marbles_given_to_brother + marbles_given_to_sisters + marbles_left\n\n    return total_marbles\n\nans = solution()"
    ],
    "9572661330c44c6fa75e2c4321ce76ad": [
        "def solution():\n    # Let the initial number of yellow beads be 3x and green beads be 2x\n    # After buying more beads, the new ratio of green to yellow is also 3:2\n    # The new number of yellow beads is 3x + 5\n    # The new number of green beads is 2x + 20\n    # We can set up the new ratio in the form of an equation as follows:\n    # (2x + 20) / (3x + 5) = 3/2\n    # Cross multiply to solve for x\n    # 2(2x + 20) = 3(3x + 5)\n    # 4x + 40 = 9x + 15\n    # 40 - 15 = 9x - 4x\n    # 25 = 5x\n    # x = 5\n    \n    # Now we find the initial total number of beads by adding the initial yellow and green beads\n    # initial_total = 3x + 2x\n    # initial_total = 5x\n    x = 5\n    initial_total = 5 * x\n    \n    return initial_total\n\nans = solution()"
    ],
    "d66ce8f472054e71aa236e8e613a5157": [
        "def solution():\n    count = 0\n    for i in range(10, 1000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "84fb655f45e54baa81690c12194c4cfb": [
        "def solution():\n    sum = 0\n    for a in range(20, 1, -2):\n        b = a - 1\n        sum += (a + b)\n    return sum\n\nans = solution()"
    ],
    "a2686828e0aa405aab8754b3f12eaf64": [
        "def solution():\n    # Amy's speed (in miles per hour)\n    amy_speed = 60\n    \n    # Christen's speed (in miles per hour)\n    christen_speed = 40\n    \n    # Time they meet after (in hours)\n    time_to_meet = 4\n    \n    # Calculate the distance each person has traveled when they meet\n    amy_distance = amy_speed * time_to_meet\n    christen_distance = christen_speed * time_to_meet\n    \n    # Total distance between their starting points\n    total_distance = amy_distance + christen_distance\n    \n    # Time it takes for Christen to reach Amy's starting point\n    time_for_christen = total_distance / christen_speed\n    \n    return time_for_christen\n\nans = solution()"
    ],
    "71c8465f7f6740fb84c60f24c0fa5b05": [
        "def solution():\n    return 617 + 385\n\nans = solution()"
    ],
    "8ac3b604d92f4e359866a78b06048dfd": [
        "def solution():\n    ans = 2570 / 10000\n    return ans\n\nans = solution()"
    ],
    "a5cd848f2ed5457aa4de5ac1376a568b": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['0', '1', '3', '6', '8', '9']\n    even_digits = ['0', '6', '8']\n    count = 0\n    for p in permutations(digits, 4):\n        if p[-1] in even_digits and p[0] != '0': # Check if it's an even number and doesn't start with 0\n            count += 1\n    return count\n\nans = solution()"
    ],
    "cecaf4be2c7445afbef79df483f09fe6": [
        "def solution():\n    total_questions = 50\n    marks_for_correct = 4\n    marks_for_wrong = -1\n    total_marks = 110\n\n    # Let x be the number of correct answers\n    # Then (total_questions - x) will be the number of wrong answers\n    # Equation: x * marks_for_correct + (total_questions - x) * marks_for_wrong = total_marks\n    # 4x - (50 - x) = 110\n    # 5x = 160\n    # x = 32\n\n    x = (total_marks + total_questions * marks_for_wrong) // (marks_for_correct - marks_for_wrong)\n    return x\n\nans = solution()"
    ],
    "b8eda4ea253243a6bc4591a500731f57": [
        "def solution():\n    total_cakes = 420\n    vanilla_cakes = (2 / 7) * total_cakes\n    banana_cakes = (35 / 100) * total_cakes\n    remaining_cakes = total_cakes - vanilla_cakes - banana_cakes\n    lemon_ratio = 4\n    chocolate_ratio = 5\n    ratio_sum = lemon_ratio + chocolate_ratio\n    lemon_cakes = (lemon_ratio / ratio_sum) * remaining_cakes\n    return int(lemon_cakes)\n\nans = solution()"
    ],
    "8a1fa4f39e19492fb5019958052fc68b": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if len(set(str(i))) == 2:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ae83fe9ef869429482fffd4b5f259176": [
        "def solution():\n    from math import lcm\n    \n    ans = lcm(2, 3, 4, 5, 6)\n    return ans\n\nans = solution()"
    ],
    "0e57c290f8c748f5a8c86e2a3bf96219": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote x as the number of books Lily sends to Judy\n    x = symbols('x')\n    # Let l be the number of books Lily originally has\n    # Let j be the number of books Judy originally has\n    # According to the problem, after sharing, Lily has (l - x) books and Judy has (j + x) books\n    # And they both have the same amount of books after sharing\n    equation = Eq(l - x, j + x)\n\n    # Additionally, we know that Lily had more books than Judy originally\n    # Therefore, the difference between their books is l - j\n    # And this difference is equal to the books Lily sends to Judy, which is x\n    difference_eq = Eq(l - j, x)\n\n    # Solving the two equations to find the relationship between l and j\n    # Since we just need the difference, we do not need actual values for l and j, the equation x will suffice\n    solutions = solve((equation, difference_eq), (x))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "a8d1ad2b149e49638120daa2fb4f7e50": [
        "def solution():\n    # Lily has two choices for the first pass: Cici or April\n    first_pass_options = 2\n\n    # After the first pass, the one who receives the ball has only one choice, to pass to the third person.\n    # No matter who Lily passes to first, the second pass will always have only one choice.\n    second_pass_options = 1\n\n    # The total number of passing ways is the product of the options at each pass\n    total_passing_ways = first_pass_options * second_pass_options\n\n    return total_passing_ways\n\nans = solution()"
    ],
    "37eda3d2a7f44391ba89ab6bf862df70": [
        "def solution():\n    avg_first_four = 89\n    total_first_four = avg_first_four * 4\n    score_fifth = 94\n    total_five_assignments = total_first_four + score_fifth\n    avg_five_assignments = total_five_assignments / 5\n\n    return avg_five_assignments\n\nans = solution()"
    ],
    "0cc3cd452b624c9498a48d64322243b8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chloe, david, emily = symbols('chloe david emily')\n\n    equation1 = Eq(chloe, 2 * david)\n    equation2 = Eq(david, 3 * emily)\n    equation3 = Eq(74 + 86 + chloe + david + emily, 400)\n\n    solutions = solve((equation1, equation2, equation3), (chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "1f9f29d4bf5649379a9cfd3c9d5fcb04": [
        "def solution():\n    wibble_arms = 6\n    total_arms = 81\n    wibbles = 11\n    \n    wibble_total_arms = wibble_arms * wibbles\n    wobble_arms = total_arms - wibble_total_arms\n    wobble_arms_each = 5\n\n    wobbles = wobble_arms // wobble_arms_each\n    return wobbles\n\nans = solution()"
    ],
    "59de4a78f41748248348566692dedf92": [
        "from sympy import isprime\n\ndef solution():\n    for a in range(2, 179//7 + 1):\n        if isprime(a):\n            b = (179 - 7*a) / 9\n            if b.is_integer() and isprime(int(b)):\n                return a + int(b)\n\nans = solution()"
    ],
    "0833ee006bff4737af597938f80a6679": [
        "def solution():\n    # Iterate through each possible 3-digit number\n    for number in range(100, 1000):\n        # Convert number to a string to get each digit\n        digits = str(number)\n        # Calculate the sum of the digits, the tens condition, and the hundreds condition\n        if (int(digits[0]) + int(digits[1]) + int(digits[2]) == 15 and \n            int(digits[1]) == 2 * int(digits[0]) and\n            int(digits[0]) == int(digits[2]) + 1):\n            return number\n\nans = solution()"
    ],
    "c214cce759fc4604b8bd4aac04f2f467": [
        "def solution():\n    boys = 18\n    girls = boys * 2\n    return girls\n\nans = solution()"
    ],
    "1933faa02cf240199d07d7e6c69c3b86": [
        "def solution():\n    percentage = 15\n    total_amount = 420\n\n    ans = (percentage / 100) * total_amount\n    return ans\n\nans = solution()"
    ],
    "84bcfd2527634a87ba73c95b75479cb4": [
        "def solution():\n    total_minutes = 32\n    fraction_of_time = (1/4) * (1/6) * (1/8) * total_minutes\n    seconds = fraction_of_time * 60\n    return int(seconds)\n\nans = solution()"
    ],
    "ef69916912d64c749a2c5414ca933b35": [
        "def solution():\n    # Convert Maverick's catch up time from minutes to hours\n    maverick_time_hours = 24 / 60.0  # 24 minutes to hours\n    # Calculate the distance Maverick travels in that time\n    maverick_speed_kmh = 15\n    maverick_distance_km = maverick_speed_kmh * maverick_time_hours\n    # Calculate the distance Kelvin travels in that time\n    kelvin_speed_kmh = 10\n    kelvin_distance_km = kelvin_speed_kmh * maverick_time_hours\n    # Calculate the difference in distance travelled by Maverick and Kelvin\n    distance_difference_km = maverick_distance_km - kelvin_distance_km\n    # Initial distance between Maverick and Kelvin\n    initial_distance_km = 10\n    # Check if Maverick's distance difference is equal or greater than the initial distance,\n    # If it is, then Maverick caught up\n    caught_up = distance_difference_km >= initial_distance_km\n    # If Maverick did not catch up, calculate how long it actually took him\n    if not caught_up:\n        # The time it takes Maverick to catch up can be found by equating the distances travelled by both\n        # (maverick_speed_kmh * actual_time_hours) - (kelvin_speed_kmh * actual_time_hours) = initial_distance_km\n        # Solve for actual_time_hours\n        actual_time_hours = initial_distance_km / (maverick_speed_kmh - kelvin_speed_kmh)\n        # Convert the actual time from hours to minutes\n        actual_time_minutes = actual_time_hours * 60\n        return actual_time_minutes\n    return maverick_time_hours * 60\n\nans = solution()"
    ],
    "e7d9f592443542ef9f580c770df2ce1a": [
        "def solution():\n    # Since a # b = a + b - (ab/910), we can simplify the operation by looking for a pattern.\n    # Starting with the smallest operation:\n    # 1 # 2 = 1 + 2 - (1*2)/910 = 3 - 2/910\n    # When we have 2 # 1, it would yield:\n    # 2 # 1 = 2 + 1 - (2*1)/910 = 3 - 2/910\n    # The pattern suggests that for n # (n-1), we will always get:\n    # n # (n-1) = n + (n-1) - (n*(n-1))/910\n    # Since both n and (n-1) are factors of 910, the term (n*(n-1))/910 simplifies to 1.\n    # Therefore, n # (n-1) = n + (n-1) - 1 = 2n - 2\n    # When performing this operation repeatedly until 1, we get:\n    # 2016 # 2015 # 2014 # ... # 1 = ((...((2016 # 2015) # 2014) ...) # 1)\n    # This reduces each pair to 2n - 2 until we get to the last one where n=2.\n    # The final term will be simply 2 # 1 which is 3 - 2/910\n    # Since we count from 2 to 2016, we have 2015 terms of \"2n - 2\", and finally a 3 (since 2 # 1 = 3 - 2/910).\n    \n    terms_sum = sum((2*n - 2) for n in range(2, 2017)) + 3\n    return terms_sum\n\nans = solution()"
    ],
    "939569b8df414ce2859c11258d03bfc9": [
        "def solution():\n    result = (113 - 5) // 9\n    return result\n\nans = solution()"
    ],
    "cc2d217fd9294779a151ac26e6edcda8": [
        "def solution():\n    # Let the smaller number be x and the larger number be y\n    # Then we have two equations\n    # x + y = 80 (equation 1)\n    # y - x = 40 (equation 2)\n    \n    # Adding equation 1 and equation 2, we get\n    # x + y + y - x = 80 + 40\n    # 2y = 120\n    # y = 60\n    # Substituting the value of y in equation 1\n    # x + 60 = 80\n    # x = 80 - 60\n    # x = 20\n    \n    # Therefore, the smaller number is 20\n    return 20\n\nans = solution()"
    ],
    "7d33980148da4ca2a7359bd7f16eac27": [
        "def solution():\n    boys = 3\n    girls = 4\n    ans = boys * girls\n    return ans\n\nans = solution()"
    ],
    "51add92ad60b41bd8d0e28c5401b2bae": [
        "def solution():\n    # Using the formula for distributing n identical items to r distinct groups:\n    # The number of ways is C(n-1, r-1) where C is combinations\n    # In this case, n = 6 (erasers), r = 3 (kids), so we use C(6-1, 3-1)\n    \n    from math import comb\n    ways = comb(6 - 1, 3 - 1)\n    return ways\n\nans = solution()"
    ],
    "4b1aed0b9dfb4774968b86622359a2d5": [
        "def solution():\n    total_questions = 6\n    correct_score = 5\n    incorrect_deduction = -2\n    total_score = 23\n\n    for correct in range(total_questions + 1):\n        incorrect = total_questions - correct\n        if (correct * correct_score + incorrect * incorrect_deduction) == total_score:\n            return correct\n\nans = solution()"
    ],
    "35a2e016d6e741289d85bfd98cae8549": [
        "def solution():\n    # Calculate the total distance between the first and the last plum tree\n    total_distance = (41 - 1) * 4  # 40 intervals of 4m each\n\n    # Calculate the number of pine trees by dividing the total distance by the distance between pine trees\n    # and adding 1 for the first tree\n    num_pine_trees = (total_distance // 5) + 1\n\n    return num_pine_trees\n\nans = solution()"
    ],
    "19e648dd36f74957bbf3ab2e377bf993": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the current age of the younger man and y be the current age of the older man\n    x, y = symbols('x y')\n    \n    # From the first statement, we calculate the difference in their ages\n    # \"When I was your age, you were only 4 years old.\" means y - (y - x) = 4\n    equation1 = Eq(y - x, 4)\n    \n    # From the second statement, we calculate the difference again\n    # \"When I am your age, you will be 61.\" means x + (y - x) = 61\n    equation2 = Eq(x + (y - x), 61)\n\n    # We now solve the set of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Since we want the younger man's age, we return x's value\n    return solutions[x]\n\nans = solution()"
    ],
    "cd978bde655c4eeab7c4cd5b3e79f234": [
        "def solution():\n    ans = sum(range(1, 7))\n    return ans\n\nans = solution()"
    ],
    "960af76a998542a6bf58bd1a0539e775": [
        "def solution():\n    original_people = 10\n    original_hours = 9\n    target_hours = 3\n\n    # Work is assumed to be constant, so work = people * hours\n    # original_people * original_hours = target_people * target_hours\n    # target_people = (original_people * original_hours) / target_hours\n\n    target_people = (original_people * original_hours) / target_hours\n\n    return target_people\n\nans = solution()"
    ],
    "c7ea8a8261394a278c052e1d963f6832": [
        "def solution():\n    # Let the total money Bud had initially be x.\n    # She spent 1/3 of it on a book, so she had 2/3x left.\n    # Then she spent 2/5 of the remaining money on a bag.\n\n    # The cost of the bag is given as 120.\n    # Therefore, (2/5) * (2/3) * x = 120\n    cost_of_bag = 120\n    fraction_for_bag = 2/5 * 2/3  # This is the fraction representing the part of the total money spent on the bag.\n\n    # Now we can find x by dividing the cost of the bag by the fraction for the bag.\n    initial_money = cost_of_bag / fraction_for_bag\n\n    return initial_money\n\nans = solution()"
    ],
    "9ccb508c829548d7abb565af2518a286": [
        "def solution():\n    week1 = 27\n    week2 = 25\n    week3 = 30\n    total_litres = week1 + week2 + week3\n    return total_litres\n\nans = solution()"
    ],
    "e9c6ea8b3c7942a7b584df1117ea9972": [
        "def solution():\n    candy_weight = 30\n    difference = 4\n    nancy_weight = candy_weight - difference\n    return nancy_weight\n\nans = solution()"
    ],
    "b95ce34c4904482cb93b8929a241db81": [
        "def solution():\n    remaining_after_first_day = 48 / (1 - 0.6)  # Remaining after selling 60% on the second day\n    total_watermelons = remaining_after_first_day / (2/3)  # After selling 1/3 on the first day\n    return int(total_watermelons)\n\nans = solution()"
    ],
    "28e8d3b2c27742f3ace084be157d24aa": [
        "def solution():\n    n = 15\n    sum_squares = sum(i**2 for i in range(5, n + 1))\n    return sum_squares\n\nans = solution()"
    ],
    "6d4657e0a9824b57b531a1b2c5afa9eb": [
        "def solution():\n    count = 0\n    for i in range(1, 9):\n        for j in range(i + 1, 9):\n            for k in range(j + 1, 9):\n                if i + j + k == 13:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ecab41bccb924851abd1f915401a0eda": [
        "def solution():\n    desks_in_front_of_jessica = 5\n    desks_behind_judy = 7\n    desks_between_jessica_and_judy = 1  # Judy is right behind Jessica\n\n    total_desks = desks_in_front_of_jessica + desks_between_jessica_and_judy + 1 + desks_behind_judy\n\n    return total_desks\n\nans = solution()"
    ],
    "d0d1460243fb491a970711148da8bdbd": [
        "def solution():\n    return 125 * 8 * 49\n\nans = solution()"
    ],
    "afeb51e7b2d34fa88856173d28928c5d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Initialize symbols for boys and girls\n    boys, girls = symbols('boys girls')\n\n    # Create equations based on the question\n    equation1 = Eq(boys - boys / 11, girls - 5)\n    equation2 = Eq(boys + girls, 152)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    # Return the number of boys\n    return solutions[boys]\n\nans = solution()"
    ],
    "19b4042ba2f8433493147e1a596bf779": [
        "def solution():\n    ans = 9 - 8 + 7 - 6 + 5 - 4 + 3 - 2 + 1\n    return ans\n\nans = solution()"
    ],
    "2b2fae5ea687426e9dedde667bf69e55": [
        "def solution():\n    from sympy import symbols, solve\n    \n    x = symbols('x')\n    equation = 0.75 * x - 5 - 2.5\n    \n    ans = solve(equation, x)[0]\n    return ans\n\nans = solution()"
    ],
    "3f2537244e194218846046e4e72a93db": [
        "def solution():\n    initial_amount = 1000\n    subtract_amount = 11\n    current_amount = initial_amount\n    term_number = 0\n    \n    while current_amount >= 0:\n        current_amount = initial_amount - term_number * subtract_amount\n        term_number += 1\n    \n    return current_amount + subtract_amount\n\nans = solution()"
    ],
    "b4ef0f615e074408b4de5de14d0436b3": [
        "def solution():\n    product = 888 * 999\n    last_two_digits = product % 100\n    return last_two_digits\n\nans = solution()"
    ],
    "5a7e2d52cd5643888c27fcb6f06badc1": [
        "def solution():\n    mid_point = 0.126\n    first_number = 0.11\n    # The distance between the midpoint and each number is the same \n    # so the second number is mid_point + (mid_point - first_number)\n    second_number = mid_point + (mid_point - first_number)\n    return second_number\n\nans = solution()"
    ],
    "1e5a18b4b8724826840fb986aacf25d5": [
        "def solution():\n    total_sweets = 486\n    classmates = 17\n\n    sweets_per_classmate = total_sweets // classmates\n\n    return sweets_per_classmate\n\nans = solution()"
    ],
    "b09251df1d4e43b491aaaabfee97a699": [
        "def solution():\n    chocolates_per_toffee = 12 / 7\n    num_chocolates = 72\n    num_toffees = num_chocolates / chocolates_per_toffee\n\n    return int(num_toffees)\n\nans = solution()"
    ],
    "d6aec573cb244941b3aefa06caa06e7a": [
        "def solution():\n    for num in range(28, 41):\n        if num % 4 == 0 and 9 in set(i for i in range(1, num + 1) if num % i == 0):\n            return num\n\nans = solution()"
    ],
    "7a3a4893dd26417fb58c5b88ebbabd36": [
        "def solution():\n    ans = 21 + 27 + 19 - 17 + 22 + 18\n    return ans\n\nans = solution()"
    ],
    "e486c9dd773145848b5f37d0c04bbf06": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lychee_price_per_case = symbols('lychee_price_per_case')\n    total_cost = 2826\n    mango_price_per_case = 56\n    mango_cases = 24\n    lychee_cases = 19\n    \n    equation = Eq(mango_price_per_case * mango_cases + lychee_price_per_case * lychee_cases, total_cost)\n    lychee_price = solve(equation, lychee_price_per_case)\n\n    return lychee_price[0]\n\nans = solution()"
    ],
    "1d935725dd9f4e3fa1aed495190dc424": [
        "def solution():\n    coin_types = [1, 2, 5]\n    unique_sums = set()\n\n    for i in coin_types:\n        for j in coin_types:\n            for k in coin_types:\n                sum_of_coins = i + j + k\n                unique_sums.add(sum_of_coins)\n\n    ans = len(unique_sums)\n    return ans\n\nans = solution()"
    ],
    "0195214807ca4ebb8735a37f3bd0f396": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 3):\n        A, B, C = perm\n        if 100 * A + 10 * B + C < 222:\n            continue\n        if A != 0 and (10 * A + B) * C == 100 * A + 10 * B + C:\n            return A + B + C\n\nans = solution()"
    ],
    "c42ce6475895428ab114a1af2385cd70": [
        "def solution():\n    from math import comb\n    num_teams = 6\n    num_games = comb(num_teams, 2)\n    return num_games\n\nans = solution()"
    ],
    "66c85837504345c58750cdb4cd50976c": [
        "def solution():\n    principal = 10000\n    rate = 0.05\n    years = 3\n\n    amount = principal * ((1 + rate) ** years)\n\n    return amount\n\nans = solution()"
    ],
    "d3475d6b771245278e01398bd5f12797": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(24*x - 5*(3 + x), 4)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "f8128d9e28164d24aec427b96c538dec": [
        "def solution():\n    percentage = 65 / 100\n    decimal = 0.507\n    fraction = 1 / 4\n    \n    ans = percentage + decimal + fraction\n    return ans\n\nans = solution()"
    ],
    "6db54abfbef4439db3f32fb63eccef7f": [
        "def solution():\n    for P in range(10):\n        for Q in range(10):\n            for R in range(10):\n                if (P != Q and P != R and Q != R):\n                    num1 = int(f\"{P}{Q}{Q}{R}\")\n                    num2 = int(f\"{R}{R}{P}\")\n                    product = num1 * num2\n                    if product == int(f\"{P}{P}{Q}{Q}{R}{R}\"):\n                        return P + Q + R\n                    \nans = solution()"
    ],
    "aaa5c754fa8b4afba08b7370dcadfd5c": [
        "def solution():\n    total_children = 50\n    total_paid = 555\n    price_without_name = 10\n    price_with_name = 15\n    difference = price_with_name - price_without_name\n    \n    # Let x be the number of children who paid to have their name on the shirt\n    # Then, (total_children - x) is the number of children who did not\n    # The total cost is then x * price_with_name + (total_children - x) * price_without_name\n    # We can set up the equation as follows:\n    # x * price_with_name + (total_children - x) * price_without_name = total_paid\n    # Simplify the equation to find x\n    # x = (total_paid - total_children * price_without_name) / difference\n\n    x = (total_paid - total_children * price_without_name) / difference\n    \n    return int(x)\n\nans = solution()"
    ],
    "32cdb025d7b6487e8f23c740bc73c7a7": [
        "def solution():\n    # Calculate time spent jogging and walking\n    jogging_hours = 1     # 7:30 AM to 8:30 AM\n    walking_hours = 2     # 8:30 AM to 10:30 AM\n\n    # Calculate distances\n    jogging_distance = jogging_hours * 5  # Jogging speed is 5 mph\n    walking_distance = walking_hours * 3  # Walking speed is 3 mph\n\n    # Total distance traveled\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "7e4fe708d5fe47a8b3e7945e164570cb": [
        "def solution():\n    from itertools import permutations\n    \n    cards = '1122'\n    perms = set(permutations(cards))\n    \n    count = 0\n    for perm in perms:\n        if perm[0] != '0':\n            number = ''.join(perm)\n            if len(number) == 3:\n                count += 1\n    \n    return count\n\nans = solution()"
    ],
    "5e7920b1469e44e9b17a7f258f840f18": [
        "def solution():\n    # If the five consecutive numbers are a, a+1, a+2, a+3, a+4\n    # Their sum is: a + (a+1) + (a+2) + (a+3) + (a+4) = 5a + 10\n    # It is given that their sum is 100. Thus, we have 5a + 10 = 100\n    # Solving for a gives us: a = (100 - 10) / 5 = 18\n    \n    # Therefore, the smallest number a is 18\n    smallest_number = (100 - 10) // 5\n    return smallest_number\n\nans = solution()"
    ],
    "181bc921ffe648fdb943b55640a83626": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 44000 to get its prime factors and their exponents\n    factors = factorint(44000)\n\n    # Find q by getting the product of prime factors raised to powers \n    # that would make the quotient a cube (power mod 3 == 0)\n    q = 1\n    for prime, exponent in factors.items():\n        if exponent % 3 != 0:\n            q *= prime ** (3 - (exponent % 3))\n\n    return q\n\nans = solution()"
    ],
    "29d7bb7ee42147cb9da0d2f87542dc6c": [
        "def solution():\n    total_oranges = 75\n    total_oranges -= 10 * 3  # 10 oranges into each of 3 boxes\n    total_oranges -= 5 * 7   # 5 oranges into each of 7 boxes\n    return total_oranges\n\nans = solution()"
    ],
    "6e0d33aabe9c4bcab5d514bcef0a008a": [
        "def solution():\n    total_balls = 27\n    balls_per_bag = 5\n    remaining_balls = 2\n\n    bags_used = (total_balls - remaining_balls) // balls_per_bag\n\n    return bags_used\n\nans = solution()"
    ],
    "68ce89970a8a42d0af6104403b9d3ddf": [
        "def solution():\n    total_length = 800\n    num_trees = 21\n    intervals = num_trees - 1\n    \n    distance_between_trees = total_length / intervals\n    \n    return distance_between_trees\n\nans = solution()"
    ],
    "23f3e87699854b52b46eb378c40700f3": [
        "def solution():\n    ans = 32 * 125 * 49\n    return ans\n\nans = solution()"
    ],
    "4884fdf18c7a4806a27e23695f55df93": [
        "def solution():\n    # According to the Pigeonhole Principle, with 4 suits, drawing 9 cards ensures 3 of the same suit.\n    # Since we want 3 cards of the same number (not suit), consider the worst case:\n    # If we draw two cards of each different number (we have 13 different numbers), that would give us 2 * 13 = 26 cards.\n    # After 26 cards, every draw can possibly give us a third card of some number.\n    # So, we need to draw one more card, which would be the 27th card, to ensure we have at least 3 cards with the same number.\n    ans = 27\n    return ans\n\nans = solution()"
    ],
    "febedf25f5b741c99cfb8b948352ac30": [
        "def solution():\n    andy_notebooks = 149\n    andy_gives = 38\n    sister_initial_notebooks = (andy_notebooks - andy_gives) // 2\n\n    return sister_initial_notebooks\n\nans = solution()"
    ],
    "de1a1dea86fa48258e157a13cfd72cc0": [
        "def solution():\n    ans = (3/4) * 28\n    return ans\n\nans = solution()"
    ],
    "0aeb025cc8c240e8b251019f1650c9d2": [
        "def solution():\n    distance_between_buildings = 90\n    number_of_intervals = 9 + 1  # +1 because we need to count the intervals, not the trees\n\n    distance_between_each_tree = distance_between_buildings / number_of_intervals\n\n    return distance_between_each_tree\n\nans = solution()"
    ],
    "4d7449c37dc04e2caef48c2973cae23f": [
        "def solution():\n    # Possible cards based on the suit and number\n    spades = ['A', 'J', 'K']\n    hearts = ['3', '5', 'K']\n    diamonds = ['2', '7', 'J']\n    clubs = ['A', '7']\n\n    # Hypothesis 1: Eddie says neither of them know the card.\n    # This implies the card is not Ace of Spades nor Ace of Clubs,\n    # since if Eddie had heard 'Spades' or 'Clubs', he could have figured it out.\n    possible_suits = ['Hearts', 'Diamonds']\n\n    # Hypothesis 2: Avril now knows the card after Eddie's statement.\n    # This means it can't be King of Hearts, because if Avril heard 'King',\n    # there would still be two possibilities (Spades and Hearts).\n    # So, Avril must have heard '3', '5', '2', '7' or 'J'\n    possible_numbers = ['3', '5', '2', '7', 'J']\n\n    # Hypothesis 3: Since Eddie now knows the card too, this means the number given to Avril must be unique.\n    # '7' appears in both Diamonds and Clubs, so it can't be '7'.\n    # This leaves us with '3', '5', '2', and 'J'.\n    unique_numbers = ['3', '5', '2', 'J']\n\n    # Now checking the unique_numbers against the suits and previously possible numbers\n    for number in unique_numbers:\n        if number in hearts and number in possible_numbers:\n            card = ('Hearts', number)\n        elif number in diamonds and number in possible_numbers:\n            card = ('Diamonds', number)\n\n    return card\n\nans = solution()"
    ],
    "eaee4c5f914f464893c6c617cd8da980": [
        "def solution():\n    mean_value = 5\n    total_sum = mean_value * 5\n    given_numbers_sum = sum([3, 4, 6, 10])\n    fifth_number = total_sum - given_numbers_sum\n    return fifth_number\n\nans = solution()"
    ],
    "f6face9fc7c7465783d957d20e60eabe": [
        "def solution():\n    from sympy import isprime\n\n    base_number = 200\n    numbers = set()\n\n    # change the hundreds digit\n    for i in range(10):\n        if i != 2: # excluding original number\n            numbers.add(int(f\"{i}00\"))\n\n    # change the tens digit\n    for i in range(10):\n        numbers.add(int(f\"2{i}0\"))\n\n    # change the units digit\n    for i in range(10):\n        numbers.add(int(f\"20{i}\"))\n    \n    count_primes = sum(isprime(num) for num in numbers)\n\n    return count_primes\n\nans = solution()"
    ],
    "64a0b45c920043ea9de7368f87d76a34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the two numbers\n    x, y = symbols('x y')\n\n    # Setup the equations based on the problem statement\n    equation1 = Eq(x + y, 72)\n    equation2 = Eq(x, 2 * y)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Return the smaller number\n    return solutions[y]\n\nans = solution()"
    ],
    "8ddc7b2bdd5b4d1a82dc0c65276359f0": [
        "def solution():\n    time_per_cut = 12 / 3  # 12 minutes for 3 cuts\n    total_cuts = 5 * 4  # 5 times into 4 sections each\n    total_time = time_per_cut * (total_cuts - 1)  # Minus 1 because no cut is needed for the start\n    return total_time\n\nans = solution()"
    ],
    "8b959182183d418eb25cefb9bf8dc219": [
        "def solution():\n    emily_position_from_front = 25 + 1\n    danny_position_from_back = 14\n    total_people = emily_position_from_front + danny_position_from_back\n\n    return total_people\n\nans = solution()"
    ],
    "d71cc09281d5402dbf1e61d96fc56855": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining the symbols\n    total_pages = symbols('total_pages')\n    deadline = symbols('deadline')\n\n    # Equations based on the information given\n    equation1 = Eq((total_pages / 30), deadline + 2)\n    equation2 = Eq((total_pages / 39), deadline - 4)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (total_pages, deadline))\n\n    # Extracting the values\n    num_days = solutions[deadline]\n    num_pages = solutions[total_pages]\n\n    return int(num_days), int(num_pages)\n\nans = solution()"
    ],
    "98e96ab2a5464c2f8b55cc5355c56197": [
        "def solution():\n    count = 0\n    page_number = 0\n    \n    while count < 30:\n        page_number += 1\n        count += str(page_number).count('5')\n    \n    return page_number if str(page_number).count('5') == 1 else page_number - 1\n\nans = solution()"
    ],
    "967f79ab6d244b729f644537a06bdcc3": [
        "def solution():\n    total_cost = 13.23\n    number_of_cups = 9\n    cost_per_cup = total_cost / number_of_cups\n    return cost_per_cup\n\nans = solution()"
    ],
    "19c7948c5c3b458f98616eed8bb06cfc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(13 - 2 * (2 * x - 3), 5 - (x - 2))\n\n    age = solve(equation, x)\n\n    return age[0]\n\nans = solution()"
    ],
    "bb066669a1d043539b0f78f992d232f1": [
        "def solution():\n    return (10+9+8+7+6)-(5+4+3+2+1)\n\nans = solution()"
    ],
    "b603c5461f8548a3b4cec3a87b533133": [
        "def solution():\n    ans = 7.298 / 0.2\n    return ans\n\nans = solution()"
    ],
    "0a9790cb77334c198e6f33340f5f941c": [
        "def solution():\n    rooms_per_day_per_worker = 2\n    total_workers = 2\n    total_rooms_to_paint = 4\n    \n    days_to_paint = total_rooms_to_paint / (rooms_per_day_per_worker * total_workers)\n    \n    return days_to_paint\n\nans = solution()"
    ],
    "317ce9d0b92e4e9b82f5bce5d48051a3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for the price of each fruit\n    price_apple, price_orange = symbols('price_apple price_orange')\n\n    # Create equations based on the given information\n    equation1 = Eq(price_apple + 2 * price_orange, 48)\n    equation2 = Eq(price_apple + price_orange, 31)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (price_apple, price_orange))\n\n    # Return the price of one orange\n    return solutions[price_orange]\n\nans = solution()"
    ],
    "7ab2e2f436264488b6a85e26de20ed20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pocket_money = symbols('pocket_money')\n    price_per_ball = symbols('price_per_ball')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(4 * price_per_ball + 27, pocket_money)\n    equation2 = Eq(2 * price_per_ball + 1.51, pocket_money)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (pocket_money, price_per_ball))\n    \n    return solutions[pocket_money]\n\nans = solution()"
    ],
    "ef8fc9f97c334d85b494fffa1bd0577b": [
        "def solution():\n    pages_per_hour = 30 / (3/4)\n    seconds_per_hour = 3600\n    seconds_per_page = seconds_per_hour / pages_per_hour\n    return seconds_per_page\n\nans = solution()"
    ],
    "a68fba20646a499593183aa13dfc3f51": [
        "def solution():\n    total_badges = 24\n    badges_given = total_badges * (3/8)\n    badges_left = total_badges - badges_given\n    return badges_left\n\nans = solution()"
    ],
    "a1b6d3dc280e4ab498a45c02841bbb75": [
        "def solution():\n    count = 0\n    for num in range(100, 1000):\n        str_num = str(num)\n        if str_num.count('0') == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "29b13d5b92d24153bb5eab0c0a6b79b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jason, will, tom = symbols('jason will tom')\n\n    equation1 = Eq(jason, 3 * will)\n    equation2 = Eq(tom, will - 15)\n    equation3 = Eq(jason + will + tom, 225)\n\n    solutions = solve((equation1, equation2, equation3), (jason, will, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "b2e74fd3787345abaed2bffc05eda905": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    elias, aileen = symbols('elias aileen')\n\n    equation1 = Eq(elias, 5 * aileen)\n    equation2 = Eq(elias - 88, aileen - 8)\n\n    solutions = solve((equation1, equation2), (elias, aileen))\n\n    end_elias = solutions[elias] - 88\n    end_aileen = solutions[aileen] - 8\n\n    return end_elias, end_aileen\n\nans = solution()"
    ],
    "5ed3ede08de4405abf392b2e764a8a3a": [
        "def solution():\n    steps_per_staircase = 12\n    total_staircases = 3\n\n    total_steps = steps_per_staircase * total_staircases\n\n    return total_steps\n\nans = solution()"
    ],
    "163d5569c8794822827aa5f3fb2a9e54": [
        "def solution():\n    total_people = 23\n    people_behind = 14\n    people_in_front = total_people - people_behind - 1  # Subtract 1 for Louis himself\n    return people_in_front\n\nans = solution()"
    ],
    "cb7de8383bda423f846c2a0d41099259": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    thomas, gerald = symbols('thomas gerald')\n    \n    equation1 = Eq(thomas, 5/3 * gerald)\n    equation2 = Eq(gerald + thomas, 104)\n\n    solutions = solve((equation1, equation2), (thomas, gerald))\n\n    difference = solutions[thomas] - solutions[gerald]\n\n    return difference\n\nans = solution()"
    ],
    "350b297b009e49fa80ba80c3b2e816be": [
        "def solution():\n    nums = range(11, 32, 2)\n    ans = sum(nums)\n    return ans\n\nans = solution()"
    ],
    "192ed864378f46f0992b02857290262e": [
        "def solution():\n    ans = sum(range(2, 9))\n    return ans\n\nans = solution()"
    ],
    "99153d571f7b47888d63eeb16f4101aa": [
        "def solution():\n    ans = 730 / 1000\n    return ans\n\nans = solution()"
    ],
    "d70de15ac2b64e119755895c7c1775b0": [
        "def solution():\n    cookies_per_gram = 25 / 20\n    cookies_with_48_grams = cookies_per_gram * 48\n    return int(cookies_with_48_grams)\n\nans = solution()"
    ],
    "91e8c0f537a24098854e3e9ad367ef40": [
        "def solution():\n    # Convert the octal numbers to decimal\n    num1 = int('25', 8)\n    num2 = int('37', 8)\n    \n    # Perform the addition in decimal\n    sum_decimal = num1 + num2\n    \n    # Convert the sum back to octal\n    ans = oct(sum_decimal)[2:]  # Remove the '0o' prefix\n\n    return ans\n\nans = solution()"
    ],
    "ab65eb6366424791bc96225b7748674a": [
        "def solution():\n    result = (8/11) * 1.54\n    return result\n\nans = solution()"
    ],
    "7bf99922eaaf4266b6882b0fd9059ea0": [
        "def solution():\n    total_people = symbols('total_people')\n    boys = (2/7) * (total_people/3)\n    girls = (total_people/3) - boys\n    children = boys + girls\n    adults = (2/3) * children\n    equation = Eq(adults - boys, 1228)\n\n    solutions = solve(equation, total_people)\n\n    return solutions[0]\n  \nans = solution()"
    ],
    "7580babfb6664341b878371c05f2522f": [
        "def solution():\n    ans = 3597 // 11\n    return ans\n\nans = solution()"
    ],
    "15cc7b6d484d4ffcad21a4bb4923bca1": [
        "def solution():\n    return 5987 + 67 + 983\n\nans = solution()"
    ],
    "eb3a8e66576f4d9f9023ccfe7b7b53c5": [
        "def solution():\n    cost_price = 150\n    selling_price = 175\n    remaining_rackets = 8\n    profit = 525\n\n    # Let x be the number of rackets originally purchased\n    # The total cost price is x * cost_price\n    # The total selling price for the rackets sold is (x - remaining_rackets) * selling_price\n    # According to the problem, the selling price covers the cost price plus the profit\n    # So, we set up the following equation:\n    # (x - remaining_rackets) * selling_price = x * cost_price + profit\n\n    # Rearrange the equation to solve for x\n    # x * selling_price - remaining_rackets * selling_price = x * cost_price + profit\n    # x * (selling_price - cost_price) = profit + remaining_rackets * selling_price\n    # x = (profit + remaining_rackets * selling_price) / (selling_price - cost_price)\n\n    x = (profit + remaining_rackets * selling_price) // (selling_price - cost_price)\n\n    return x\n\nans = solution()"
    ],
    "5a8b109d6748455c802ec8c38135b025": [
        "def solution():\n    return 12.4 / 40\n\nans = solution()"
    ],
    "888e7a05c66a49078a06713b83ca6ce1": [
        "def solution():\n    days_spent = (157 - 82) // (25 - 20)\n    initial_amount_gordon = 157 + (days_spent * 25)\n    return initial_amount_gordon\n\nans = solution()"
    ],
    "ed32aedbb2a34499a71cf190747aeb19": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    equation1 = Eq(B + 24, A - 2)\n    equation2 = Eq(A + 25, 5 * (B - 25))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "3900795ab2d94196ad395c7483e5c648": [
        "def solution():\n    return 813 * 72\n\nans = solution()"
    ],
    "33e79ce7d01446d9a282b54a045a5e8e": [
        "def solution():\n    circles = 10\n    regions = 1 + circles * (circles + 1) // 2\n    return regions\n\nans = solution()"
    ],
    "c96b47bede684b9f8ba38d50dd4e1086": [
        "def solution():\n    num_bags = 8\n    pens_per_bag = 4\n    total_pens = num_bags * pens_per_bag\n    return total_pens\n\nans = solution()"
    ],
    "0c86c445fc0a4c6da74c3a666872027f": [
        "def solution():\n    n = 5 * (4 ** 2)\n    return n\n\nans = solution()"
    ],
    "678881c9e47f44f59d88da4a1055e2af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10 - 2 * (x - 9), 2 * x - 4 * (5 - x))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0b8067aa5d3f4321a2018a93d46b6c9e": [
        "def solution():\n    count = 0\n    for x1 in range(1, 14):\n        for x2 in range(x1 + 1, 14):\n            x3 = 14 - x1 - x2\n            if x2 < x3:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "57ff93a0b8da463fa5f80c4c21a775ee": [
        "def solution():\n    # Let x be the initial total value of the jewels in P, and y be the initial total value of the jewels in Q.\n    # After transferring one jewel worth £5000 from P to Q, the new total for P is (x - 5000) and for Q is (y + 5000).\n    # Before the transfer, the average value of the jewels in P was x/3 and in Q was y/3.\n    # After the transfer, the average value becomes (x - 5000)/2 in P and (y + 5000)/4 in Q.\n    # According to the question, both these averages have increased by £1000:\n    # (x - 5000)/2 = x/3 + 1000 and (y + 5000)/4 = y/3 + 1000.\n    # Solving these equations gives us the initial values of x and y.\n\n    # import sympy for solving equations\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n\n    # setting up the equations\n    equation1 = Eq((x - 5000)/2, x/3 + 1000)\n    equation2 = Eq((y + 5000)/4, y/3 + 1000)\n\n    # solving the equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Since x and y are the total values for boxes P and Q respectively, the total value of all 6 jewels is x + y.\n    return solutions[x] + solutions[y]\n\nans = solution()"
    ],
    "27c967821aaa4f3f9ac178e7c395b919": [
        "def solution():\n    factorial = 1\n    for i in range(1, 11):\n        factorial *= i\n    \n    count = 0\n    while factorial % 10 == 0:\n        factorial //= 10\n        count += 1\n    \n    return count\n\nans = solution()"
    ],
    "a5905a83aea54ed7b0165353ec295c7e": [
        "def solution():\n    total_melons = 20\n    cost_price = 15\n    bad_melons = total_melons // 5\n    remaining_melons = total_melons - bad_melons\n    selling_price_per_melon = 1.5\n    total_revenue = remaining_melons * selling_price_per_melon\n    profit = total_revenue - cost_price\n    return profit\n\nans = solution()"
    ],
    "7ce4a67e0ab846d8bd1eb78dffb57e9e": [
        "def solution():\n    from math import gcd\n\n    # Number of oranges and apples\n    oranges = 150\n    apples = 100\n\n    # Remainders after distributing the fruits\n    oranges_leftover = 17\n    apples_leftover = 5\n\n    # Calculate the number of fruits actually distributed\n    distributable_oranges = oranges - oranges_leftover\n    distributable_apples = apples - apples_leftover\n\n    # Find the greatest common divisor of the distributable fruits\n    # which represents the total number of neighbours\n    num_neighbours = gcd(distributable_oranges, distributable_apples)\n\n    return num_neighbours\n\nans = solution()"
    ],
    "a2a533fc1c424f969f5fae611daad3e8": [
        "def solution():\n    line_length = 10\n    cross_distance = 1\n    num_crosses = (line_length // cross_distance) + 1\n    return num_crosses\n\nans = solution()"
    ],
    "52bacc6ef48b44b8bc4d02992a7b6173": [
        "def solution():\n    return 8.7 * 3.4\n\nans = solution()"
    ],
    "9ed7da1b104344da81a0dc411168159e": [
        "def solution():\n    return 6.23 - 5.72\n\nans = solution()"
    ],
    "ee0568f16c2b4ce48ef303d392601ff8": [
        "def solution():\n    pattern_length = 6\n    green_in_pattern = 2\n    \n    full_patterns = 75 // pattern_length\n    remaining_balloons = 75 % pattern_length\n    \n    green_balloons = full_patterns * green_in_pattern\n    \n    if remaining_balloons > 2:\n        green_balloons += 1\n    if remaining_balloons == 6:\n        green_balloons += 1\n    \n    return green_balloons\n\nans = solution()"
    ],
    "684f885693764340afae67d6e64e96ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let s be the original number of marbles Sandra had\n    # Let j be the original number of marbles Jessica had\n    s, j = symbols('s j')\n\n    # After giving 13 marbles, Sandra has s - 13 and Jessica has j + 13\n    # Sandra had 6 fewer marbles than Jessica after giving 13 marbles\n    equation = Eq((s - 13) + 6, j + 13)\n\n    # Solve the equation to find the difference in the beginning\n    difference = solve(equation, s - j)\n\n    return difference[s - j]\n\nans = solution()"
    ],
    "07c7c85bda4847ceafa321fc737bd219": [
        "def solution():\n    distance_between_first_and_sixth = 60\n    number_of_intervals_between_first_and_sixth = 6 - 1  # because we are counting the spaces between the posts\n    distance_between_each_lamppost = distance_between_first_and_sixth / number_of_intervals_between_first_and_sixth\n\n    number_of_intervals_between_first_and_ninth = 9 - 1\n    distance_between_first_and_ninth = distance_between_each_lamppost * number_of_intervals_between_first_and_ninth\n\n    return distance_between_first_and_ninth\n\nans = solution()"
    ],
    "ce622d4ae66d44e1bcc0df82fbe961fc": [
        "def solution():\n    num_teams = 3\n    # In a round-robin tournament, each team plays every other team once.\n    # The formula for the number of matches is n * (n - 1) / 2\n    num_matches = num_teams * (num_teams - 1) // 2\n    return num_matches\n\nans = solution()"
    ],
    "e29e4f297900441f9110516bd6b642d0": [
        "def solution():\n    total_strawberries = 15 + 27 + 19\n    strawberries_left = total_strawberries % 8\n    return strawberries_left\n\nans = solution()"
    ],
    "0edc4483e1764691b7f15e9bedcc4156": [
        "def solution():\n    count_1 = 0\n    count_2 = 0\n    N = 1\n    while True:\n        str_n = str(N)\n        count_1 += str_n.count('1')\n        count_2 += str_n.count('2')\n        if count_1 == 15 and count_2 == 14:\n            return N\n        N += 1\n\nans = solution()"
    ],
    "33e6fe50af554266b27e4c2074a6a3f9": [
        "def solution():\n    # Let's figure out how many candies Kate brought to school based on what's given.\n    # If each of the 7 friends received 26 pieces, plus Kate kept 22 for herself...\n    candies_at_school = 7 * 26 + 22\n\n    # Since she ate 1/3 at home, the candies brought to school represent 2/3 of the total amount she bought.\n    # Let's use this to calculate the initial number of candies.\n    initial_candies = candies_at_school * (3/2)\n\n    return int(initial_candies)\n\nans = solution()"
    ],
    "14e3978e40d049dbad0dcf4a4cf738df": [
        "def solution():\n    andy_current_floor = 9\n    bob_current_floor = 5\n\n    total_floors = 25\n    andy_top_floor = total_floors\n\n    bob_speed_per_andy = bob_current_floor / andy_current_floor\n    bob_top_floor = bob_speed_per_andy * andy_top_floor\n\n    return int(bob_top_floor)\n\nans = solution()"
    ],
    "0f48eb78665e4e5ba3b372be6f2eab93": [
        "def solution():\n    for m in range(10):\n        if (10 * 12 + m) == (9 * (10 + m) - 2):\n            return m\n\nans = solution()"
    ],
    "593a8f96d20c408d86fda58e89c71746": [
        "def solution():\n    lights = [0] * 10  # 0 for off, 1 for on\n    # Ms. Lily's action\n    for i in range(1, 11, 2):  # Pressing every other switch starting from 1\n        lights[i-1] = 1  # Turn on the light\n\n    # Sam's action\n    for i in range(2, 11, 2):  # Even numbered switches\n        lights[i-1] = (lights[i-1] + 7) % 2  # Press the switch 7 times\n\n    return sum(lights)  # Count the number of lights that are on\n\nans = solution()"
    ],
    "fc7f764e9d664c45bf77553a3e6315b8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B = symbols('A B')\n    \n    # A has 2/3 the amount of water in B originally\n    equation1 = Eq(A, 2/3 * B)\n    \n    # When 4 litres is transferred from B to A, A has 7/8 the amount in B\n    equation2 = Eq(A + 4, 7/8 * (B - 4))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (A, B))\n    \n    # The total amount of water is A + B\n    total_water = solutions[A] + solutions[B]\n    \n    return total_water.evalf()\n\nans = solution()"
    ],
    "25e5a7db39a14e5080bf1594f85931a6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the total number of words James needs to type as W.\n    # Let his original speed be S words per minute.\n    W, S = symbols('W S')\n\n    # According to the problem:\n    # James can finish W words in 3 minutes, so we get the equation W = 3*S\n    equation1 = Eq(W, 3 * S)\n    \n    # If he types 30 more words per minute, his speed becomes S + 30 words per minute\n    # In that case, he will finish W words in 2 minutes, giving us W = 2*(S + 30)\n    equation2 = Eq(W, 2 * (S + 30))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (W, S))\n\n    return solutions[W]\n\nans = solution()"
    ],
    "eefc87844ecc4f2285ce5feedafa6913": [
        "def solution():\n    depth = 8\n    climb = 3\n    slip = 2\n    day = 0\n    current_height = 0\n    \n    while current_height < depth:\n        day += 1\n        current_height += climb\n        if current_height >= depth:\n            break\n        current_height -= slip\n    \n    return day\n\nans = solution()"
    ],
    "2891d5c6bf714aaaaf484ccacdcf4660": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    table, chair = symbols('table chair')\n    equation1 = Eq(table, 2 * chair)\n    equation2 = Eq(2 * table + 3 * chair, 280)\n    \n    solutions = solve((equation1, equation2), (table, chair))\n    \n    return solutions[table]\n\nans = solution()"
    ],
    "0442d07405364ff5bc82f86bcabbc881": [
        "def solution():\n    initial_volume = 900\n    initial_sugar_percentage = 0.06\n    desired_sugar_percentage = 0.10\n\n    initial_sugar_content = initial_volume * initial_sugar_percentage\n    final_sugar_content = initial_volume * desired_sugar_percentage\n\n    sugar_to_add = final_sugar_content - initial_sugar_content\n\n    return sugar_to_add\n\nans = solution()"
    ],
    "841da503f5384dbabdbc92f2a781fe22": [
        "def solution():\n    dresses_per_day_per_seamstress = 2\n    seamstresses = 2\n    days = 9\n    \n    total_dresses = dresses_per_day_per_seamstress * seamstresses * days\n    \n    return total_dresses\n\nans = solution()"
    ],
    "957e833104764c96b1f4eea0f026e06f": [
        "def solution():\n    parts_already_made = 20\n    total_parts_needed = 100\n\n    # Calculate the number of parts made per hour\n    rate_per_hour = parts_already_made / 2  # Eddy's calculation is correct\n\n    # Calculate the number of additional parts needed\n    additional_parts_needed = total_parts_needed - parts_already_made\n\n    # Calculate the number of hours needed for the remaining parts\n    additional_hours_needed = additional_parts_needed / rate_per_hour\n\n    return additional_hours_needed\n\nans = solution()"
    ],
    "b18d474df71d462c9b1d16e929a17ca3": [
        "def solution():\n    price_per_bar = 50\n    num_bars = 4\n    total_cost = price_per_bar * num_bars\n    return total_cost\n\nans = solution()"
    ],
    "a9df9fef73994fa0adfd6c7233026811": [
        "def solution():\n    # Since there are 5 balls of each color, drawing 5 balls of one color is possible.\n    # To guarantee getting 3 different colored balls, we must consider the worst case.\n    # The worst case is that we draw all 5 balls of one color, then all 5 balls of another color.\n    # After having 10 balls (5 of the same color and 5 of another), the next ball we draw must be of the third color.\n    # Therefore, we need to draw 5 + 5 + 1 = 11 balls in the worst case.\n\n    return 5 + 5 + 1\n\nans = solution()"
    ],
    "66aa3aec53fa48d1aa6897cfab540921": [
        "def solution():\n    ans = 8 / (2/3)\n    return ans\n\nans = solution()"
    ],
    "53629bc84abc46a99608abaf3f651c5c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    grade4, grade5, grade6 = symbols('grade4 grade5 grade6')\n\n    equation1 = Eq(grade5, 2 * grade4 + 4)\n    equation2 = Eq(grade6, 3 * grade4 + 8)\n    equation3 = Eq(grade4 + grade5 + grade6, 720)\n\n    solutions = solve((equation1, equation2, equation3), (grade4, grade5, grade6))\n\n    return solutions[grade6]\n\nans = solution()"
    ],
    "94b2228e40b74d7c81c5e89a014088b7": [
        "def solution():\n    from math import comb\n\n    # The number of ways to pick 2 balls of different colors\n    diff_colors = comb(5, 2)\n    # The number of ways to pick 2 balls of the same color\n    same_color = 5\n    \n    total_unique_combinations = diff_colors + same_color\n    \n    # If total_unique_combinations people take balls, there must be at least two with the same kind of balls\n    return total_unique_combinations + 1\n\nans = solution()"
    ],
    "028b46b0fbd045fa90a02a752e75494c": [
        "def solution():\n    # To ensure that there are two numbers whose product is divisible by 4,\n    # we need to consider the worst-case scenario where we pick the maximum\n    # number of integers without getting a pair divisible by 4.\n    # We can have at most:\n    # - all the even numbers not divisible by 4 (21, 23, ..., 41) which is 10 numbers\n    # - all the odd numbers (10, 12, ..., 40) which is 16 numbers\n    # The next number we draw, no matter what it is, will ensure that we have a pair divisible by 4.\n    # As this is the worst case, we will have drawn 10 + 16 + 1 numbers.\n    \n    return 10 + 16 + 1\n\nans = solution()"
    ],
    "d432ce5fae8d408da28df3d9a18e9baf": [
        "def solution():\n    total_cards = 876\n    # let the number of cards Hisham had be x\n    # then Melissa had 2x cards\n    # total number of cards is x + 2x = 876\n    # we solve for x to find the cards Hisham had\n    hisham_cards = total_cards / 3\n    melissa_cards = 2 * hisham_cards\n    # the number of cards Melissa should give to Hisham\n    # so they both have the same amount is\n    # half the difference between Melissa's and Hisham's cards\n    cards_to_give = (melissa_cards - hisham_cards) / 2\n\n    return int(cards_to_give)\n\nans = solution()"
    ],
    "cfb59b638eb341b18ad204a7ce303359": [
        "def solution():\n    return 20504 // 8\n\nans = solution()"
    ],
    "6a23c9856a834221b62e63996c06f972": [
        "def solution():\n    first_term = 5\n    third_term = 19\n    common_difference = (third_term - first_term) // 2\n\n    return common_difference\n\nans = solution()"
    ],
    "0370e917ba5444c99e91df970a15bb74": [
        "def solution():\n    total_length_cm = 220  # 2 m 20 cm in cm\n    each_piece_length = total_length_cm / 2\n    return each_piece_length\n\nans = solution()"
    ],
    "555f0cafaf514767b0fe800156cb0727": [
        "def solution():\n    num_cakes = 195\n    cost_per_cake = 46\n    total_cost = num_cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "4a1f680de9ae4c519ea93c401f8702e6": [
        "def solution():\n    a = 1 + 0.23 + 0.34\n    b = 0.23 + 0.34 + 0.45\n    c = 1 + 0.23 + 0.34 + 0.45\n    d = 0.23 + 0.34\n    ans = a * b - c * d\n    return ans\n\nans = solution()"
    ],
    "284c25d3574441a78eaf010240003c8c": [
        "def solution():\n    sum = 0\n    for i in range(46, 51):\n        sum += i * (100 - i)\n    return sum\n\nans = solution()"
    ],
    "6196c646546f4ef5bf8c9473472fe841": [
        "def solution():\n    import sympy as sp\n\n    # Find smallest two-digit prime number\n    smallest_two_digit_prime = sp.nextprime(10)\n\n    # Find largest two-digit square number\n    largest_two_digit_square = int(9**2)\n\n    # Calculate the product of the smallest two-digit prime number and the largest two-digit square number\n    ans = smallest_two_digit_prime * largest_two_digit_square\n\n    return ans\n\nans = solution()"
    ],
    "aa9463208898426a81ae9e66616bff47": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(40 / (x + 5), 5)\n    \n    solved = solve(equation, x)\n    \n    return solved[0]\n\nans = solution()"
    ],
    "7a03810f71064f1b8a00a0c741b7d68e": [
        "def solution():\n    brian_age = 14\n    father_age = 41\n    \n    while True:\n        brian_age += 1\n        father_age += 1\n        if str(brian_age).zfill(2) == str(father_age).zfill(2)[::-1]:\n            return brian_age\n\nans = solution()"
    ],
    "6c18ef58e8b240a0b1d815b125d4e754": [
        "def solution():\n    return 9 / 0.2\n\nans = solution()"
    ],
    "0249d770955143e49182729ffbddfa3d": [
        "def solution():\n    euro_to_usd = 1 / 0.96\n    cost_in_euros = 4.8\n    cost_in_usd = cost_in_euros * euro_to_usd\n    return cost_in_usd\n\nans = solution()"
    ],
    "7f0edbf8e5cb484f87961218f9db99d0": [
        "from itertools import permutations\n\ndef solution():\n    max_value = 0\n    \n    # Generate all permutations of the numbers 1 to 9\n    for p in permutations(range(1, 10)):\n        a, b, c, d, e, f, g, h, j = p\n        \n        # Calculate the expression for the current permutation\n        value = a + b/c + (d/e) * f - (g + h/j)\n        \n        # Check if the result is an integer and greater than the current max_value\n        if value.is_integer() and value > max_value:\n            max_value = value\n    \n    return int(max_value)\n\nans = solution()"
    ],
    "105d3ea760424235a98e71c0d8ca6303": [
        "def solution():\n    max_product = 0\n    for A in range(1, 20):\n        for B in range(1, 20 - A):\n            C = 19 - A - B\n            max_product = max(max_product, A * B * C)\n    return max_product\n\nans = solution()"
    ],
    "020a47d927424600b54866be0f9e7377": [
        "def solution():\n    total_books = 3900\n    total_new_books = 510\n    ratio_chinese = 4\n    ratio_malay = 3\n    ratio_english = 6\n    ratio_total = ratio_chinese + ratio_malay + ratio_english\n\n    chinese_books_before = (ratio_chinese / ratio_total) * total_books\n    malay_books_before = (ratio_malay / ratio_total) * total_books\n    english_books_before = (ratio_english / ratio_total) * total_books\n\n    chinese_books_after = chinese_books_before * 1.2\n    malay_books_after = malay_books_before * 1.1\n\n    new_chinese_malay_books = (chinese_books_after - chinese_books_before) + \\\n                              (malay_books_after - malay_books_before)\n    english_books_after = total_new_books - new_chinese_malay_books + english_books_before\n    \n    percentage_increase_english = ((english_books_after - english_books_before) / english_books_before) * 100\n\n    return percentage_increase_english\n\nans = solution()"
    ],
    "6a75c42493d548a6833f83188863c29b": [
        "def solution():\n    from math import gcd\n\n    # Find the LCM of 12 and 56 since the number of cakes must be divisible by both\n    lcm_value = (12 * 56) // gcd(12, 56)\n    return lcm_value\n\nans = solution()"
    ],
    "51c43a6b56234d0e83f79c035496cdfc": [
        "def solution():\n    total_students = 12 + 8\n    average_all_students = 14\n    average_juniors = 10\n\n    # Calculate the total scores for juniors and all students \n    total_score_juniors = 12 * average_juniors\n    total_score_all_students = total_students * average_all_students\n\n    # Calculate the total scores for seniors\n    total_score_seniors = total_score_all_students - total_score_juniors\n\n    # Calculate the average score for seniors\n    average_seniors = total_score_seniors / 8\n\n    return average_seniors\n\nans = solution()"
    ],
    "062deceefd35411f997b29c901129f1c": [
        "def solution():\n    return 9650\n\nans = solution()"
    ],
    "0c10d6b8653d43ff821582cda7ac2c32": [
        "def solution():\n    combined_age_4_years_ago = 10\n    increment_per_year_for_both_dogs = 2  # Every year, each dog gets 1 year older, so combined they age 2 years.\n    current_combined_age = combined_age_4_years_ago + (4 * increment_per_year_for_both_dogs)\n    combined_age_in_2_years = current_combined_age + (2 * increment_per_year_for_both_dogs)\n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "7e469a60ae594c1eb1c906000dd9e1b3": [
        "def solution():\n    total_questions = 25\n    attempted_questions = total_questions - 1\n    correct_points = 4\n    incorrect_points = -2\n    rex_score = 66\n    \n    for correct_answers in range(attempted_questions + 1):\n        incorrect_answers = attempted_questions - correct_answers\n        score = correct_answers * correct_points + incorrect_answers * incorrect_points\n        if score == rex_score:\n            return correct_answers\n\nans = solution()"
    ],
    "38dff589122e45f682f4fbac9629ef22": [
        "def solution():\n    total_questions = 90\n    # Calculate the number of questions answered\n    answered_questions = int(total_questions * 0.60)\n    # The unanswered questions\n    unanswered_questions = total_questions - answered_questions\n\n    # Trying every possible correct answers from 0 to answered_questions\n    for correct_answers in range(0, answered_questions + 1):\n        # Wrong answers are the remaining ones\n        wrong_answers = answered_questions - correct_answers\n        # Total score for current scenario\n        total_score = (correct_answers * 5) - (wrong_answers * 2) + unanswered_questions\n        if total_score == 264:\n            return correct_answers\n\nans = solution()"
    ],
    "61ca6c49f97240f88a3d539f152d6ee5": [
        "def solution():\n    # According to the Pigeonhole Principle, if there are n containers,\n    # then to ensure at least one container has 2 apples, one must have n+1 apples.\n    containers = 10\n    ans = containers + 1 # because we want at least one container to have 2 apples\n    return ans\n\nans = solution()"
    ],
    "ad17dd64f37241d8a7ec221ca69a178b": [
        "def solution():\n    numerator = 1058 / (10 ** 2021)  # Shift the decimal point right by 2018+3 places\n    denominator = 92 / (10 ** 2022)  # Shift the decimal point right by 2019+2 places\n\n    ans = numerator / denominator\n    \n    return ans\n\nans = solution()"
    ],
    "158af0779d9e4980a24fe0fec884683c": [
        "def solution():\n    # Number of cookies Tiara can make per gram of butter\n    cookies_per_gram = 160 / 50\n    \n    # How many grams of butter she needs to make 300 cookies\n    butter_needed = 300 / cookies_per_gram\n\n    return butter_needed\n\nans = solution()"
    ],
    "85cb1cd4dcbe4dca96112c2906555a7c": [
        "def solution():\n    ans = 15.9 * 2\n    return ans\n\nans = solution()"
    ],
    "f4f1fe067a974d22bfe3b0f49a7ee798": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dedra, timm = symbols('dedra timm')\n\n    # Equation representing the initial condition, Dedra had 4 times as much as Timm\n    equation1 = Eq(dedra, 4 * timm)\n\n    # Both received 72 dollars each\n    dedra_after = dedra + 72\n    timm_after = timm + 72\n\n    # Equation representing the final condition, Dedra has twice as much as Timm now\n    equation2 = Eq(dedra_after, 2 * timm_after)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (dedra, timm))\n\n    # Answer to the question (How much money did Dedra have at first?)\n    return solutions[dedra]\n\nans = solution()"
    ],
    "eb93ba1f7aac42b6a7670ab7c76772c4": [
        "def solution():\n    current_number = 1\n    total_digits = 0\n\n    # Loop until we reach or exceed 1000 digits\n    while total_digits < 1000:\n        # Convert current number to string and get its length (number of digits)\n        current_str = str(current_number)\n        total_digits += len(current_str)\n        if total_digits >= 1000:\n            break  # Exit the loop if we've reached 1000 digits\n        current_number += 1  # Increment the number for the next round\n\n    # Go back one step as we have exceeded 1000 digits in the last addition\n    # Then take the difference to find the position of the 1000th digit in the last number\n    overshoot = total_digits - 1000\n    required_digit = current_str[len(current_str) - overshoot - 1]  # Get the 1000th digit\n\n    return int(required_digit)\n\nans = solution()"
    ],
    "33c000792028428a9334d9f3595c547f": [
        "def solution():\n    # Given the equation: 3 * box - 2 = 19\n    # We have to find the value of the box, so let's solve for box\n\n    # Rearrange the equation to solve for box\n    # Add 2 to both sides of the equation: 3 * box = 19 + 2\n    # Divide both sides by 3 to find the box: box = (19 + 2) / 3\n    \n    box = (19 + 2) / 3\n    return box\n\nans = solution()"
    ],
    "748996495b98460c9ede4e3d079565a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jane, jack = symbols('jane jack')\n    \n    equation1 = Eq(jane - jack, 5)\n    equation2 = Eq(jane + jack, 33)\n    \n    solutions = solve((equation1, equation2), (jane, jack))\n    \n    return solutions[jane]\n\nans = solution()"
    ],
    "6c63bbe1764848a7a7edbe24ddc026e9": [
        "def solution():\n    A = 62\n    C = 90\n    E = 68\n    AC = 48\n    AE = 36\n    CE = 50\n    ACE = 25\n\n    total = A + C + E - AC - AE - CE + ACE\n    return total\n\nans = solution()"
    ],
    "390c6b384a7c47feba87ecb9961bf4c4": [
        "def solution():\n    return 6.91 - 0.13\n\nans = solution()"
    ],
    "26973dde1699489cb5a3ca2bb878350e": [
        "def solution():\n    total_people = 23\n    people_behind = 14\n\n    # Subtracting number of people behind from total to find those in front\n    people_in_front = total_people - people_behind - 1  # Subtract 1 because we don't count Louis\n\n    return people_in_front\n\nans = solution()"
    ],
    "6a9590e4dc124affafcabb1bb2c4dbf3": [
        "def solution():\n    return 257.36 / 0.4\n\nans = solution()"
    ],
    "bfaf5aa76fe74c98aade35dd2f53d568": [
        "def solution():\n    from math import factorial\n\n    def permutations(n, r):\n        return factorial(n) // factorial(n - r)\n    \n    ans = permutations(18, 3)\n    \n    return ans\n\nans = solution()"
    ],
    "9561236e6a034115a599777cf75dad5c": [
        "def solution():\n    return 6.31 - 3.2\n\nans = solution()"
    ],
    "9874ade3ca974e3a9cbed1309bdbedc8": [
        "def solution():\n    monthly_salary = 1.4\n    debt = 5.04\n    \n    months_needed = debt / monthly_salary\n    \n    return months_needed\n\nans = solution()"
    ],
    "d60abe09efb64d48bd30a37956fbb0c9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack, jason, bruce, willie = symbols('jack jason bruce willie')\n\n    # Given condition is Jack is 4 years old\n    jack = 4\n\n    # Bruce and Willie are of the same age as Jason\n    bruce = jason\n    willie = jason\n\n    # The total age of the 4 children is 19 years.\n    equation = Eq(jack + jason + bruce + willie, 19)\n\n    # Solve the equation to find Jason's age\n    solutions = solve(equation, jason)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "1cf4ab67a6aa43e2b4e76978de4840ad": [
        "def solution():\n    x, remainder_5, shortage_6 = 1, 3, 2\n    while True:\n        if (x * 5 + remainder_5 == x * 6 - shortage_6):\n            ans = x * 5 + remainder_5\n            return ans\n        x += 1\n\nans = solution()"
    ],
    "6a64f533a5b44e0a81122bb8514d9b21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Jake and John's current ages.\n    jake, john = symbols('jake john')\n\n    # The sum of their ages is $44.\n    equation1 = Eq(jake + john, 44)\n\n    # In $14 years, Jake will be twice as old as John.\n    equation2 = Eq(jake + 14, 2 * (john + 14))\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (jake, john))\n\n    # We're interested in how old John will be in $14 years.\n    john_future_age = solutions[john] + 14\n\n    return john_future_age\n\nans = solution()"
    ],
    "b999190a8cc2489a92311c186296685f": [
        "def solution():\n    veronica_money = 9\n    jonathan_money = 3 * veronica_money\n    rachel_money = jonathan_money + 48\n    return rachel_money\n\nans = solution()"
    ],
    "4d93eb426c534eb2b0fcd1e85de53d1d": [
        "def solution():\n    final_amount = 2360\n    annual_interest_rate = 0.06\n    years = 3\n\n    # Calculate initial deposit using compound interest formula rearranged\n    initial_deposit = final_amount / ((1 + annual_interest_rate) ** years)\n\n    return initial_deposit\n\nans = solution()"
    ],
    "c65b1dcd5d9542dc8301c97e47a9f794": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's assume the age of the youngest child is 'y'\n    y = symbols('y')\n\n    # The oldest child is six times as old\n    oldest = 6 * y\n\n    # The age difference between each child is 15 months\n    # Therefore the age difference between the oldest and the youngest is\n    # 15 months * (9 - 1) children = 120 months\n    # Convert 120 months to years by dividing by 12\n    age_difference = 120 / 12 \n\n    # Find the youngest child's age by equating the age difference to the difference in age between the oldest and youngest\n    equation = Eq(oldest - y, age_difference)\n    \n    # Solve for the youngest child's age\n    youngest_age = solve(equation, y)\n\n    return youngest_age[0]\n\nans = solution()"
    ],
    "57e7b37a36d64b3ea1c8eaf24798521c": [
        "def solution():\n    # Since multiplication has precedence over addition and subtraction,\n    # to minimize the result, we want to increase the effect of subtraction\n    # and decrease the effect of multiplication.\n    # Thus, we should add brackets around the addition that is right before\n    # the multiplication and around the subtraction that follows it:\n    # \n    # Original: 15 + 5 * 5 + 15 - 6 + 7\n    # With brackets: (15 + 5) * (5 + 15) - (6 + 7)\n    # This changes the additions to multiplications and minimizes the result\n    # due to the negative sign in front of the last term.\n\n    ans = (15 + 5) * (5 + 15) - (6 + 7)\n    return ans\n\nans = solution()"
    ],
    "db674de270ac4711b415cc34c37f9aff": [
        "def solution():\n    ans = 2018 - 786\n    return ans\n\nans = solution()"
    ],
    "d1a297dde50e43a99002f159a8a8b64a": [
        "def solution():\n    total = 0\n    for i in range(1, 2008):\n        total += (i**2 + (i+1)**2) / (i * (i+1))\n    return round(total)\n\nans = solution()"
    ],
    "2763d0dc70154f8c927352d51849cbe4": [
        "def solution():\n    # Since we are looking for the smallest original combination,\n    # we start from the smallest 4 digit number where swapping the\n    # first and last digits increases the number by 5877\n    for i in range(1000, 10000):\n        original = str(i)\n        new_number = int(original[-1] + original[1:-1] + original[0])\n        if new_number - i == 5877:\n            return i\n\nans = solution()"
    ],
    "342cd5472a69472ab392495beba4ee8b": [
        "def solution():\n    # Let the number of sweets Jiaxiang has be x.\n    # Then Cayden has x + 5 sweets.\n    # After giving 10 sweets to Jiaxiang, Jiaxiang will have x + 10 sweets,\n    # and Cayden will have (x + 5) - 10 = x - 5 sweets.\n    # The difference in the number of sweets they have now will be:\n    difference = (x + 5) - (x + 10)  # (Cayden's sweets) - (Jiaxiang's sweets)\n    return abs(difference)\n\n# Since we don't have the exact number of sweets Jiaxiang has (x), \n# we simplify the equation (x + 5) - (x + 10) = x - 5 + 5 - x - 10\n# Which results in simplified: -10 + 5 - x + x = -5\nans = solution()"
    ],
    "fd0626678d7e40de84c59fc2f0b662e1": [
        "def solution():\n    ans = (2.5 * 7.7) + (0.25 * 23)\n    return ans\n\nans = solution()"
    ],
    "28b3d4a0798e4f5d952dbe5322188194": [
        "def solution():\n    first_multiple = (50 // 11) * 11\n    if first_multiple < 50:\n        first_multiple += 11\n    last_multiple = (150 // 11) * 11\n    if last_multiple > 150:\n        last_multiple -= 11\n    \n    num_multiples = ((last_multiple - first_multiple) // 11) + 1\n    \n    return num_multiples\n\nans = solution()"
    ],
    "1ebf8cccb54b4188b3cdecb0ff9b3e1b": [
        "def solution():\n    result = (75 * 0.29) + (75 * 0.01 * 74) - (0.3 / (2/15))\n    return result\n\nans = solution()"
    ],
    "3a0b88faf37e4067b5a697aa6c171c8d": [
        "def solution():\n    # number of pupils excluding Mary\n    num_pupils_excl_mary = 5\n\n    # average score of pupils excluding Mary\n    avg_score_excl_mary = 72\n\n    # total score of pupils excluding Mary\n    total_score_excl_mary = avg_score_excl_mary * num_pupils_excl_mary\n\n    # new average score with Mary's score included\n    new_avg_score_incl_mary = 75\n\n    # total class size with Mary\n    num_pupils_incl_mary = num_pupils_excl_mary + 1\n\n    # total score with Mary's score included\n    total_score_incl_mary = new_avg_score_incl_mary * num_pupils_incl_mary\n\n    # calculate Mary's score\n    marys_score = total_score_incl_mary - total_score_excl_mary\n\n    return marys_score\n\nans = solution()"
    ],
    "e1cf756e61684775af46c3970f3ab17f": [
        "def solution():\n    train_length = 200\n    bridge_length = 220\n    speed = 60\n\n    # The train has to cover its own length and the length of the bridge\n    total_distance = train_length + bridge_length\n    time = total_distance / speed\n\n    return time\n\nans = solution()"
    ],
    "176806bd2d38491fb95d4bb561a6bcc2": [
        "def solution():\n    total_cookies = 200\n    morning_cookies = total_cookies * 1/5\n    remainder_after_morning = total_cookies - morning_cookies\n    afternoon_cookies = remainder_after_morning * 3/4\n    return afternoon_cookies\n\nans = solution()"
    ],
    "439376d5d90d4b149b7e06233ef1f948": [
        "def solution():\n    # Initialize the greatest number to the minimum possible value\n    greatest_number = 0\n    # Iterate over 3-digit odd numbers divisible by 9\n    for number in range(999, 100, -9):\n        tens_digit = (number // 10) % 10\n        # Check if tens digit is divisible by 4 and if the number is odd\n        if tens_digit % 4 == 0 and number % 2 == 1:\n            greatest_number = number\n            break\n    return greatest_number\n\nans = solution()"
    ],
    "a9f9d09538154b1e94723a8e9651f18f": [
        "def solution():\n    from math import factorial\n    \n    def combinations(n, k):\n        return factorial(n) // (factorial(k) * factorial(n - k))\n\n    # Distributing 11 - 4 = 7 remaining doughnuts to 4 students where each student \n    # gets at least one doughnut is like placing 3 dividers among the 7 doughnuts\n    # to divide them into 4 non-empty groups.\n    # We have 7 spaces for doughnuts and 3 dividers, so we need to choose 3 positions\n    # out of 10 possible positions (7 doughnuts + 3 dividers) for the dividers.\n    ans = combinations(7 + 4 - 1, 4 - 1)\n    return ans\n\nans = solution()"
    ],
    "2610ab8c39aa47039e5d5e3e44e751e3": [
        "def solution():\n    distance = 48 # meters\n    speed = 8 # meters per minute\n    time_taken = distance / speed\n\n    return int(time_taken)\n\nans = solution()"
    ],
    "850576e4f94e42508fc4e975ba331970": [
        "def solution():\n    # Worst case scenario: Jane picks the maximum number of marbles of one color first.\n    # Therefore, she picks all 7 green marbles first.\n    \n    # Then she picks the maximum number of another color (6 blue), still without having 4 different colors:\n    max_green_blue = 7 + 6\n\n    # Next, she picks all 4 red marbles to get three different colors:\n    max_green_blue_red = max_green_blue + 4\n\n    # Finally, to ensure she has all four colors, she has to pick one orange marble:\n    total_to_ensure_four = max_green_blue_red + 1\n\n    return total_to_ensure_four\n\nans = solution()"
    ],
    "e3d851587fc14bcdbe8c7bfda9cd6200": [
        "def solution():\n    # The total change Angela should get is 500 pence (since she paid with a five pound note).\n    # There are five different coins and each is a multiple of 5 pence\n    coins = [5, 10, 20, 50, 100, 200]  # available coins in pence\n\n    for c1 in coins:\n        for c2 in coins:\n            for c3 in coins:\n                for c4 in coins:\n                    for c5 in coins:\n                        if c1 != c2 and c1 != c3 and c1 != c4 and c1 != c5 and c2 != c3 and c2 != c4 \\\n                            and c2 != c5 and c3 != c4 and c3 != c5 and c4 != c5:\n                            if c1 + c2 + c3 + c4 + c5 == 500:\n                                return 500 - (c1 + c2 + c3 + c4 + c5)\n\nans = solution()"
    ],
    "16953792ef8c48809eac37a4caf5d3f5": [
        "def solution():\n    ans = 0.2 * 7\n    return ans\n\nans = solution()"
    ],
    "e81257a894bf49f182de3109989a386e": [
        "def solution():\n    midday_temp = 4\n    drop_temp = 11\n    midnight_temp = midday_temp - drop_temp\n    return midnight_temp\n\nans = solution()"
    ],
    "3d7b8c3bc3f54a2dbce551c74529dd16": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of $2 notes and $10 notes\n    num_twos, num_tens = symbols('num_twos num_tens')\n\n    # Equations based on the problem statement\n    eq1 = Eq(num_twos + num_tens, 38) # Total number of notes\n    # After spending 80% of the $10 notes and 75% of the $2 notes\n    eq2 = Eq(num_tens - 0.8 * num_tens, 3 * (num_twos - 0.75 * num_twos))\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (num_twos, num_tens))\n    num_twos_solution = solutions[num_twos]\n    num_tens_solution = solutions[num_tens]\n\n    # Calculate the cost of the fan based on the number of notes spent\n    cost = 0.8 * num_tens_solution * 10 + 0.75 * num_twos_solution * 2\n\n    return cost\n\nans = solution()"
    ],
    "04e3e33129dc4f65bfae11d6c879f614": [
        "def solution():\n    hives_for_50kg = 5\n    honey_per_hive = 50 / hives_for_50kg\n    hives_for_90kg = 90 / honey_per_hive\n\n    additional_hives_needed = hives_for_90kg - hives_for_50kg\n    return additional_hives_needed\n\nans = solution()"
    ],
    "b7e31907e86c496e848fa4239fbfcc8e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ali, kumar = symbols('ali kumar')\n\n    # Ratio before Ali gave Kumar 10 erasers\n    initial_ratio = Eq(ali / kumar, 7/5)\n\n    # Ratio after Ali gave Kumar 10 erasers\n    final_ratio = Eq((ali - 10) / (kumar + 10), 1/5)\n\n    # Solve the system of equations\n    solutions = solve((initial_ratio, final_ratio), (ali, kumar))\n\n    # Calculate the total number of country erasers they have altogether\n    total_erasers = solutions[ali] + solutions[kumar]\n\n    return total_erasers\n\nans = solution()"
    ],
    "c5a32fbb6fcb46b48f3e67ce27fcc7b2": [
        "def solution():\n    first_term = 4\n    difference = 3\n    nth_term = 23\n\n    nth_term_value = first_term + (nth_term - 1) * difference\n\n    return nth_term_value\n\nans = solution()"
    ],
    "f015194282af429a8af72aaa964f578e": [
        "def solution():\n    import math\n    \n    # Horizontal distance from A to B\n    horizontal_distance = 15 - 9\n    \n    # Total vertical distance from A to B\n    vertical_distance = 3 + 5\n    \n    # Shortest distance from A to B (Pythagorean theorem)\n    shortest_distance = math.sqrt(horizontal_distance**2 + vertical_distance**2)\n    \n    return shortest_distance\n\nans = solution()"
    ],
    "7866c751419b4d9097fee74972b01d9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, pear = symbols('banana pear')\n\n    # Max's purchase: 1 banana + 3 pears = 84p\n    equation1 = Eq(banana + 3 * pear, 84)\n\n    # Emily's purchase: 1 banana + 1 pear = 48p\n    equation2 = Eq(banana + pear, 48)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "30f09344ca4a4013b33fc28adc31ff05": [
        "def solution():\n    total_minutes = 8 * 60 + 20  # Convert total hours and minutes to minutes\n    \n    # activity_duration includes both the activity time and the break time afterwards\n    activity_duration = 45 + 20  # 45 minutes for activity and 20 minutes for break\n    \n    # Subtract the final break, since it's not needed after the last activity\n    total_activity_time = total_minutes - 20\n\n    # The number of activities is the total time for activities divided by the duration of one full activity cycle\n    activities = total_activity_time // activity_duration\n\n    return activities\n\nans = solution()"
    ],
    "69bc4bec9bee483683d61a26cbefa4ac": [
        "def solution():\n    # Let a, b, c represent the weights of Adam, Ben, and Carl respectively.\n    # We have the following equations based on the problem statement:\n    # a + b = 102\n    # b + c = 97\n    # a + c = 92\n\n    # Summing all the equations we get:\n    # 2(a + b + c) = 102 + 97 + 92\n    # 2(a + b + c) = 291\n    # Total weight of Adam, Ben and Carl:\n    total_weight = 291 // 2\n\n    return total_weight\n\nans = solution()"
    ],
    "b5e98b7ca17e48e9aceb47ddcd12fb5e": [
        "def solution():\n    # We can form numbers using the cards with restriction that the first digit should be 5 or 8\n    # to ensure the number is greater than 5000.\n    # First card (thousands place) can be chosen in 2 ways: 5 or 8\n    # Second card (hundreds place) can be chosen in 3 ways, since one card is already used for thousands place\n    # Third card (tens place) can be chosen in 2 ways, because two cards are used\n    # Fourth card (ones place) can be chosen in 1 way, because three cards are used\n    # Total number of different 4-digit numbers = 2 * 3 * 2 * 1\n    ans = 2*3*2*1\n    return ans\n\nans = solution()"
    ],
    "999d1345ce434bc0b7648892d297c82e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2 + 3 * (x - 26), 52 - (x - 40))\n\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "46cd8c8fc22a4192a04253ceaca842cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the time taken by B to finish the work by himself be x days.\n    # Hence, A would take x - 5 days to finish the same work.\n    x = symbols('x')\n\n    # If A's efficiency is twice B's, A would finish 1/(x - 5) of the work in a day,\n    # and B would finish 1/x of the work in a day.\n    # Since A's efficiency is twice B's, A's work in one day is 2 * (1/x of the work).\n    equation = Eq(1 / (x - 5), 2 / x)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    # The solution will be a list with two values, we need to pick the positive one\n    # since time cannot be negative.\n    B_days = [sol.evalf() for sol in solution if sol > 0][0]\n\n    return B_days\n\nans = solution()"
    ],
    "5993b277c13b4ff38cb800c6c4a33a65": [
        "def solution():\n    marks = [16, 15, 16, 10]\n    mean_score = sum(marks) / len(marks)\n    return mean_score\n\nans = solution()"
    ],
    "ec93c9b0e33b4132b916d18ebb789c94": [
        "def solution():\n    ans = (3/5) * 35\n    return ans\n\nans = solution()"
    ],
    "899bd98193b34e558ea4353df664f200": [
        "def solution():\n    number = 123456\n    str_num = str(number)\n    \n    # Implement the divisibility rule for 11: Subtract the sum of the digits at odd places\n    # from the sum of the digits at even places. The result should be divisible by 11.\n    odd_sum = sum(int(str_num[i]) for i in range(0, len(str_num), 2))\n    even_sum = sum(int(str_num[i]) for i in range(1, len(str_num), 2))\n    \n    # Check the divisibility by 11\n    remainder = (odd_sum - even_sum) % 11\n    \n    # Return the correctness of George's answer and the actual remainder if he's not correct\n    return (remainder == 1, remainder)\n\nans = solution()"
    ],
    "2fe30b6237e0498f8b46e088fbbc4301": [
        "def solution():\n    total_bulbs = 40\n    crocus_bulbs = 0.25 * total_bulbs\n    tulip_bulbs = 1/5 * total_bulbs\n    daffodil_bulbs = total_bulbs - crocus_bulbs - tulip_bulbs\n    return int(daffodil_bulbs)\n\nans = solution()"
    ],
    "9f293803776049bca507bf11f748846b": [
        "def solution():\n    start_length = 2.06  # in meters\n    end_length = 78 / 100  # converting cm to meters\n    melted_length = start_length - end_length\n    return melted_length\n\nans = solution()"
    ],
    "66c27502b84244db8f72fb311fd7f115": [
        "def solution():\n    percentage = 40\n    total_grams = 650\n\n    ans = (percentage / 100) * total_grams\n\n    return ans\n\nans = solution()"
    ],
    "aa84ae289f2b4586bef8164084d18865": [
        "def solution():\n    ways = [0] * 10\n    ways[0] = 1  # 0 steps, 1 possibility (to stay where he is)\n\n    for i in range(1, 10):\n        if i >= 1:\n            ways[i] += ways[i-1]\n        if i >= 4:\n            ways[i] += ways[i-4]\n    return ways[9]\n\nans = solution()"
    ],
    "ee942986e3444be99926258561b6aba7": [
        "def solution():\n    return 3549 // 7\n\nans = solution()"
    ],
    "b417154f43274315bf9c280cf406e937": [
        "def solution():\n    planes_in_12_minutes = 17\n    time_factor = 36 / 12\n    planes_in_36_minutes = planes_in_12_minutes * time_factor\n    return planes_in_36_minutes\n\nans = solution()"
    ],
    "f50bfa91cfc94371b13058e0e79935a3": [
        "def solution():\n    initial_passengers = 35\n    after_first_stop = initial_passengers - (2/5) * initial_passengers + 7\n    after_second_stop = after_first_stop - (1/4) * after_first_stop + 13\n    return int(after_second_stop)\n\nans = solution()"
    ],
    "96f6824d7c5c43528d8840695801e0fa": [
        "def solution():\n    term = 0.5\n    sum_of_terms = 0\n    \n    while term <= 10:\n        sum_of_terms += term ** 3\n        term += 0.5\n\n    ans = sum_of_terms\n    return ans\n\nans = solution()"
    ],
    "2d139d10c0eb4247b231356fa4fdf082": [
        "def solution():\n    estimated_price = 35\n    rounding_error = 5 / 2  # Half of the rounding interval\n    actual_min_price = estimated_price - rounding_error\n    return actual_min_price\n\nans = solution()"
    ],
    "40a2c5266dff4ef9b884738049f2b326": [
        "def solution():\n    current_sum = 22\n    future_sum = 40\n    years_until_future_sum = future_sum - current_sum\n    return years_until_future_sum\n\nans = solution()"
    ],
    "7f37d7d7b9fc4673a77900f514ce7751": [
        "def solution():\n    count = 0\n    for school1 in range(98, 103):\n        for school2 in range(98, 103):\n            school3 = 300 - school1 - school2\n            if 98 <= school3 <= 102:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "985600d1f0d24b41a9d3607140bd9878": [
        "def solution():\n    total_toys = 40\n    elephant_position_from_left = 10\n    toys_between_rabbit_and_elephant = 5\n    \n    rabbit_position_from_left = elephant_position_from_left - toys_between_rabbit_and_elephant - 1\n    rabbit_position_from_right = total_toys - rabbit_position_from_left\n    \n    return rabbit_position_from_right\n\nans = solution()"
    ],
    "ff86d855c39d4764a5ffb262848abdd0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Nancy's rate of working\n    nancy_rate = 1/6\n    # Tim's rate of working\n    tim_rate = symbols('tim_rate')\n    # Combined rate when Nancy and Tim work together\n    combined_rate = 1/4\n\n    # Equation representing the combined work rate\n    equation = Eq(nancy_rate + tim_rate, combined_rate)\n    \n    # Solving for Tim's rate\n    solutions = solve(equation, tim_rate)\n    \n    # Now we find the time it takes for Tim to complete the work alone\n    tim_time = 1 / solutions[tim_rate]\n    \n    return tim_time\n\nans = solution()"
    ],
    "7a500b5489884af9ad95dc1143f1643a": [
        "def solution():\n    pencils = 1\n    while True:\n        if (pencils % 2 == 1 and pencils % 3 == 2 and\n            pencils % 4 == 3 and pencils % 5 == 4):\n            return pencils\n        pencils += 1\n\nans = solution()"
    ],
    "bb41ee852bed4cf5adccccc9b1c77534": [
        "def solution():\n    total_biscuits = 12\n    people_count = 1 + 3  # Ewan and his 3 sisters\n    biscuits_per_person = total_biscuits // people_count\n    return biscuits_per_person\n\nans = solution()"
    ],
    "111b0f86493b40b19e61144527ced67f": [
        "def solution():\n    return (3 / 7) * 385\n\nans = solution()"
    ],
    "c694691621a9431ea4bca6bc4ce553d4": [
        "def solution():\n    # Convert the total mass of the sauce to grams for ease of calculation\n    total_mass_grams = 172000  # 172 kg to grams\n\n    # Mass of one packet of each ingredient\n    mass_p = 300  # in grams\n    mass_q = 400  # in grams\n    mass_r = 500  # in grams\n\n    # Ratio of the number of packets of ingredients P, Q, and R\n    ratio_p = 7\n    ratio_q = 3\n    ratio_r = 2\n\n    # Calculate the total number of parts in the ratio\n    total_parts = ratio_p + ratio_q + ratio_r\n\n    # Calculate the total mass of one part\n    mass_one_part = (ratio_p * mass_p + ratio_q * mass_q + ratio_r * mass_r) / total_parts\n\n    # Calculate the total number of parts that make up the total mass\n    total_parts_used = total_mass_grams / mass_one_part\n\n    # Calculate the number of packets for each ingredient\n    packets_p = total_parts_used * (ratio_p / total_parts)\n    packets_q = total_parts_used * (ratio_q / total_parts)\n    packets_r = total_parts_used * (ratio_r / total_parts)\n\n    # Calculate the total number of packets used altogether\n    total_packets = packets_p + packets_q + packets_r\n\n    return int(total_packets)\n\nans = solution()"
    ],
    "f3c6461dee114615a71a938306942695": [
        "def solution():\n    numbers = [8, 14, 6, 9, 13, 12]\n    mean_value = 12\n    sum_of_numbers = mean_value * (len(numbers) + 1)\n    a = sum_of_numbers - sum(numbers)\n    return a\n\nans = solution()"
    ],
    "e78f15baf14349d3a74406de623335fc": [
        "from math import lcm\n\ndef solution():\n    # Convert the time into seconds for more precision\n    # First traffic light changes every minute (60 seconds)\n    first_light = 60\n    # Second traffic light changes every 1.5 minutes (90 seconds)\n    second_light = 90\n    # The traffic lights turn green together every 9 minutes (540 seconds)\n    cycle_time = 540\n    \n    # Calculate the least common multiple of the first two lights\n    lcm_first_second = lcm(first_light, second_light)\n    \n    # The third light needs to be the factor of the cycle time\n    # Start with a minimum possible time of 30 seconds for the third light\n    min_time_third_light = 30  # minimum possible time (30 seconds)\n    \n    while True:\n        if cycle_time % min_time_third_light == 0 and lcm_first_second % min_time_third_light == 0:\n            return min_time_third_light\n        min_time_third_light += 1\n\nans = solution()"
    ],
    "c9a78261a27b44b1bdd0c3d2ee5a8794": [
        "def solution():\n    # Convert all lengths to centimeters\n    pink_length_cm = 2.5 * 100\n    blue_length_cm = 220\n    orange_length_cm = 30.5\n\n    # Find the longest ribbon by comparing their lengths in centimeters\n    longest_length = max(pink_length_cm, blue_length_cm, orange_length_cm)\n\n    # Determine which ribbon is the longest\n    if longest_length == pink_length_cm:\n        ans = \"pink\"\n    elif longest_length == blue_length_cm:\n        ans = \"blue\"\n    else:\n        ans = \"orange\"\n\n    return ans\n\nans = solution()"
    ],
    "dab2cf7eb1d44c0eba4e7832b4ff92e8": [
        "def solution():\n    prep_time = 10\n    baking_time = 15\n    washing_time = 5\n    eating_time = 15\n\n    total_time = prep_time + baking_time + washing_time + eating_time\n\n    return total_time\n\nans = solution()"
    ],
    "4c802ea687a8492b9acb91c335e6d58b": [
        "def solution():\n    sale_price = 75\n    discount_rate = 0.50\n    original_price = sale_price / (1 - discount_rate)\n    return original_price\n\nans = solution()"
    ],
    "758c762d7161444799a78a19de32398f": [
        "def solution():\n    red_cars = 3\n    blue_cars = 12\n    green_cars = 15\n    red_car_capacity = 10\n    blue_car_capacity = 15\n    green_car_capacity = 20\n\n    total_people = (red_cars * red_car_capacity) + (blue_cars * blue_car_capacity) + (green_cars * green_car_capacity)\n    total_cars = red_cars + blue_cars + green_cars\n\n    average_capacity = total_people / total_cars\n\n    return average_capacity\n\nans = solution()"
    ],
    "3ac7118d01c14ab5a18f0c5846d9e605": [
        "def solution():\n    # Known values\n    rachel_speed = 84  # Rachel's speed in km/h\n    time_difference = 1.5  # Time difference in hours after they passed each other\n    eleanor_time = 4  # Eleanor's total time to travel from F to G in hours\n\n    # Calculate the distance Rachel traveled in the time difference\n    rachel_distance_after_passing = rachel_speed * time_difference\n\n    # The distance Rachel is from F plus what she traveled gives the distance Eleanor drove in the remaining time\n    eleanor_remaining_distance = rachel_distance_after_passing + 39\n\n    # Eleanor's speed can be calculated by the distance she covered in the remaining time\n    eleanor_speed = eleanor_remaining_distance / time_difference\n\n    # Total distance between the cities is Eleanor's speed times her total travel time\n    total_distance = eleanor_speed * eleanor_time\n\n    return total_distance\n\nans = solution()"
    ],
    "c4b23a034eb54649b787eefdf2846d0a": [
        "def solution():\n    def operation(a, n):\n        return sum(a * 10**i for i in range(n))\n\n    return operation(4, 3)\n\nans = solution()"
    ],
    "75592f9b267643f6ad1600fe6fa8b090": [
        "def solution():\n    total_students = 25\n    boys = 5\n    \n    percent_boys = (boys / total_students) * 100\n    \n    return percent_boys\n\nans = solution()"
    ],
    "c6530b57d5304a398df4e406019afc9f": [
        "def solution():\n    cad_to_usd_rate = 1.25\n    book_cost_cad = 64\n\n    book_cost_usd = book_cost_cad / cad_to_usd_rate\n\n    return book_cost_usd\n\nans = solution()"
    ],
    "1f5b327371834bc891e8992a355a3c02": [
        "def solution():\n    # Let s be the total number of shelves in the library.\n    # According to the statement,\n    # from front to back Sara's book is on the 8th shelf\n    # and from back to front, it's on the 10th shelf.\n    # This means there are 7 shelves before and 9 shelves after Sara's book.\n    # Therefore, the total number of shelves is 7 (shelves before) + 1 (Sara's book shelf) + 9 (shelves after).\n    ans = 7 + 1 + 9\n    return ans\n\nans = solution()"
    ],
    "eb710dc184384ed3b2e9731301601159": [
        "def solution():\n    total_points_needed = 5 * 90\n    max_possible_score = 100\n    \n    # Start from the lowest possible score and increase to find the minimum score\n    # one student must have to still reach the total while having unique scores.\n    for lowest_score in range(1, max_possible_score):\n        remaining_points = total_points_needed - lowest_score\n        # Define possible scores for the remaining four students,\n        # ensuring they are unique and do not exceed 100.\n        possible_scores = set(range(lowest_score + 1, max_possible_score + 1))\n        found = False\n        \n        for score1 in possible_scores:\n            for score2 in possible_scores - {score1}:\n                for score3 in possible_scores - {score1, score2}:\n                    for score4 in possible_scores - {score1, score2, score3}:\n                        if score1 + score2 + score3 + score4 == remaining_points:\n                            found = True\n                            break\n                    if found:\n                        break\n                if found:\n                    break\n            if found:\n                break\n        \n        if found:\n            break\n    \n    return lowest_score\n\nans = solution()"
    ],
    "4b26a9102a274ba0b8e309640745063b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the lengths of the ropes\n    A, B, C = symbols('A B C')\n\n    # Given relationships between the ropes\n    equation1 = Eq(A, 3 * B)     # Rope A is 3 times as long as Rope B\n    equation2 = Eq(C, B + 56)    # Rope C is 56 cm longer than Rope B\n    equation3 = Eq(A, C + 130)   # Rope A is 1 m 30 cm (or 130 cm) longer than Rope C\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    # The total length of the three ropes in cm\n    total_length = solutions[A] + solutions[B] + solutions[C]\n\n    return total_length\n\nans = solution()"
    ],
    "8af91674f16f411fb99260d559566771": [
        "def solution():\n    numbers = [4, 11, 8, 2, 7, 13]\n    smallest_number = min(numbers)\n    largest_number = max(numbers)\n\n    result = (2 * largest_number) - (3 * smallest_number)\n    return result\n\nans = solution()"
    ],
    "ce900c6f009e458cad1bdac095599872": [
        "def solution():\n    return 4.6 - 3.55\n\nans = solution()"
    ],
    "07ed7dd4a7c04b8aaf4b1c03f590920c": [
        "from math import factorial\n\ndef solution():\n    # Total ways to choose 3 letters out of 5 (ABCDE)\n    total_ways = factorial(5) / factorial(5 - 3)\n    \n    # Ways to choose the remaining one letter from the remaining 3 (CDE)\n    remaining_ways = factorial(3) / factorial(3 - 1)\n    \n    # Probability that A and B will both be in the string\n    # We already chose A and B, we just choose the third letter\n    prob_AB = remaining_ways / total_ways\n    \n    return prob_AB\n\nans = solution()"
    ],
    "4287149f96d446cfa12f1fd21889e61b": [
        "def solution():\n    total_male_members = 50\n    total_female_members = 70\n    student_male_percentage = 16\n    student_female_percentage = 10\n\n    student_males = (student_male_percentage / 100) * total_male_members\n    student_females = (student_female_percentage / 100) * total_female_members\n    total_students = student_males + student_females\n    total_members = total_male_members + total_female_members\n\n    student_percentage = (total_students / total_members) * 100\n\n    return student_percentage\n\nans = solution()"
    ],
    "b2b5b4f81d8448afaba3be6d10769542": [
        "def solution():\n    # Calculate the amount of fruit juice in each punch bowl\n    amount_in_first_bowl = 200 * 0.35\n    amount_in_second_bowl = 300 * 0.50\n    \n    # Calculate the total amount of fruit juice\n    total_fruit_juice = amount_in_first_bowl + amount_in_second_bowl\n    \n    # Calculate the total volume of the new mixture\n    total_volume = 200 + 300\n    \n    # Calculate the percentage concentration of the new mixture\n    percentage_concentration = (total_fruit_juice / total_volume) * 100\n    \n    return percentage_concentration\n\nans = solution()"
    ],
    "3c6c375d11374de1b3101dfbfc2c9524": [
        "def solution():\n    x = 48 * (3/4)\n    return x\n\nans = solution()"
    ],
    "5c67d22d929c48579cb3027189617400": [
        "def solution():\n    return 1212 // 6\n\nans = solution()"
    ],
    "c18565e80cc44b0cb72b59076a383b6d": [
        "def solution():\n    amy = 37\n    john = 15\n    amy_gives = (amy - john - 4) // 2\n    return amy_gives\n\nans = solution()"
    ],
    "ae4e6b1dfa8a49a5b3241156334f3bed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    betty, veron, eliza = symbols('betty veron eliza')\n    \n    equation1 = Eq(eliza, 2 * veron)\n    equation2 = Eq(betty, eliza - 185)\n    equation3 = Eq(betty + veron + eliza, 855)\n\n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n\n    return solutions[betty]\n\nans = solution()"
    ],
    "bc597e322c194058a175f92bfbfd92e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the total number of papers and y be the initial speed of marking papers per hour\n    x, y = symbols('x y')\n    \n    # Initial plan to finish work in 5 hours\n    eq1 = Eq(x, 5 * y)\n    \n    # After working for one hour at initial speed, remaining amount is (x-y), time left is 4 hours\n    # She needs to increase her speed by 6 papers per hour to meet the deadline\n    eq2 = Eq(x - y, 4 * (y + 6))\n    \n    # If she can mark 10 more papers per hour, she can finish 1 hour early\n    # So the remaining work after 1 hour at the initial speed must equal to 3 hours at the increased speed\n    eq3 = Eq(x - y, 3 * (y + 10))\n    \n    # Solving the system of equations\n    solutions = solve((eq1, eq2, eq3), (x, y))\n    \n    # The total number of papers (x)\n    return solutions[x]\n\nans = solution()"
    ],
    "ff63e777962f41f4899b17ad9e14deeb": [
        "def solution():\n    # This is an arithmetic sequence with a common difference of 2\n    # First term (a1) is 1, last term (an) is 159, common difference (d) is 2\n    a1 = 1\n    an = 159\n    d = 2\n    \n    # The number of terms (n) can be found using the formula: n = (an - a1) / d + 1\n    n = (an - a1) / d + 1\n    \n    # The sum of an arithmetic sequence can be found using the formula: S = n/2 * (a1 + an)\n    S = n/2 * (a1 + an)\n    \n    return int(S)\n\nans = solution()"
    ],
    "70deaa04761b4956a63e868e9ffc6d99": [
        "from fractions import Fraction\n\ndef solution():\n    chicken_pies = 40\n    vegetable_pies = 20\n    fruit_pies = 30\n    \n    fraction_more_chicken_than_vegetable = Fraction(chicken_pies - vegetable_pies, vegetable_pies)\n    fraction_less_vegetable_than_fruit = Fraction(fruit_pies - vegetable_pies, fruit_pies)\n\n    ans = (fraction_more_chicken_than_vegetable, fraction_less_vegetable_than_fruit)\n    return ans\n\nans = solution()"
    ],
    "622956fd3ac44f62a123456124a4a8b9": [
        "def solution():\n    markers_left = 32 - 7\n    bags = markers_left // 5\n    return bags\n\nans = solution()"
    ],
    "dd320540af104d229ba61a14357af45a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the cost of one jug (j) and one cup (c)\n    j, c = symbols('j c')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(4 * j + 5 * c, 85)  # 4 jugs and 5 cups cost £85\n    equation2 = Eq(2 * j + 2 * c, 40)  # 2 jugs and 2 cups cost £40\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (j, c))\n\n    return solutions[c]\n\nans = solution()"
    ],
    "939e258bc3ae4686add9892e1a88d211": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(10):\n            ab = 10 * a + b\n            ba = 10 * b + a\n            if 8 * ab == 3 * ba:\n                return ab\n\nans = solution()"
    ],
    "b75379f387c44ded9da89ecef088d85d": [
        "def solution():\n    bill = 55\n    tip = bill * 0.20\n    tax = bill * 0.10\n    total_cost = bill + tip + tax\n    return total_cost\n\nans = solution()"
    ],
    "52eea861c20540a8873541169102d6b1": [
        "def solution():\n    greatest_1_digit_even = 8\n    smallest_2_digit_odd = 11\n    return greatest_1_digit_even + smallest_2_digit_odd\n\nans = solution()"
    ],
    "85d27affc1b445c88f9b4a5e100c1bd9": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 208):\n        for digit in str(i):\n            total_sum += int(digit)\n    return total_sum\n\nans = solution()"
    ],
    "433eb146729b4478bbfd89939dc13d1d": [
        "def solution():\n    designs_made = 24\n    fraction_complete = 3/4\n    total_designs = designs_made / fraction_complete\n    return int(total_designs)\n\nans = solution()"
    ],
    "9d40cceb3a7043b58f824a777d1db3e8": [
        "def solution():\n    count = 0\n    # Iterate through all three-digit numbers\n    for i in range(100, 1000):\n        # Split the number into its individual digits\n        digits = [int(d) for d in str(i)]\n        # Check if the sum of the digits is equal to 4\n        if sum(digits) == 4:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "9b15cde54f244f2688f75ecf97188c89": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0e7224d495f743d994a3285524f8f2a5": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define symbols for the costs of cap and wristband\n    cap_cost, wristband_cost, total_money = symbols('cap_cost wristband_cost total_money')\n\n    # Set up the equations based on the problem statement\n    # Caleb spent 2/5 of his money on caps and wristbands\n    eq1 = Eq(2 * total_money / 5, 4 * cap_cost + 6 * wristband_cost)\n    # The cost of each cap is 3 times the cost of each wristband\n    eq2 = Eq(cap_cost, 3 * wristband_cost)\n    # Solve the equations to get the relationships between cap cost, wristband cost, and total money\n    solutions = solve((eq1, eq2), (cap_cost, wristband_cost, total_money))\n    \n    # Determine the remaining money after spending 2/5\n    remaining_money = solutions[total_money] * (1 - 2/5)\n    # He spent 1/3 of the remaining money on more caps\n    additional_caps_cost = remaining_money / 3\n    # Number of additional caps he can buy\n    additional_caps = additional_caps_cost / solutions[cap_cost]\n    \n    # Total number of caps he bought (initially 4 plus the additional ones)\n    total_caps = 4 + additional_caps\n\n    return total_caps\n\nans = solution()"
    ],
    "b9a7c7092370400a8a6b8c58ae2510c9": [
        "def solution():\n    return 5.4 + 3.7\n\nans = solution()"
    ],
    "8a063eb7bf3f4613bbd55a6c63048295": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Given height difference\n    h_initial = 3000  # in meters\n    h_final = 2000  # in meters\n\n    # Gravitational acceleration (approx.)\n    g = 9.81  # in m/s^2\n\n    # Initial velocity (starts from rest)\n    u = 0  # in m/s\n\n    # Use the kinematic equation v^2 = u^2 + 2*g*h to find final velocity\n    \n    # Symbol for the final velocity\n    v = symbols('v')\n    \n    # Change in altitude\n    h_change = h_initial - h_final\n\n    # Kinematic equation without air resistance\n    equation = Eq(v**2, u**2 + 2*g*h_change)\n\n    # Solve for v (positive root only, as we want the downward velocity)\n    solutions = solve(equation, v)\n    final_velocity = max(solutions)\n\n    return final_velocity\n\nans = solution()"
    ],
    "bacdd0107009480e90e10957f1ab6f1c": [
        "def solution():\n    # To ensure 4 consecutive numbers, we have to consider the worst case scenario using the pigeonhole principle.\n    # Since there are 13 numbers and we want 4 consecutive numbers, we can have at most 10 non-consecutive \"starting\" numbers for the first 3 cards (1 through 10).\n    # For each pattern, we could draw 3 cards that are non-consecutive. That's 4 patterns x 3 cards = 12 cards.\n    # Now, to ensure the next card creates a consecutive sequence, we can only draw 1 more card.\n    # Thus, the worst case is drawing all these non-consecutive cards plus 1 to guarantee 4 consecutive numbers.  \n    ans = (3 * 4) + 1\n    return ans\n\nans = solution()"
    ],
    "a43767a35548410b91388a97d31bf269": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('0245689', 7):  \n        b, d, e, f, h, i, j = perm\n        if int(b) % 2 == 0 and \\\n           int('3' + b + '1') % 3 == 0 and \\\n           int('3' + b + '1' + d) % 4 == 0 and \\\n           int('3' + b + '1' + d + e) % 5 == 0 and \\\n           int('3' + b + '1' + d + e + f) % 6 == 0 and \\\n           int('3' + b + '1' + d + e + f + '7') % 7 == 0 and \\\n           int('3' + b + '1' + d + e + f + '7' + h) % 8 == 0 and \\\n           int('3' + b + '1' + d + e + f + '7' + h + i) % 9 == 0 and \\\n           int(j) % 10 == 0:\n            return {'A': '3', 'B': b, 'C': '1', 'D': d, 'E': e, 'F': f, 'G': '7', 'H': h, 'I': i, 'J': '0'}\n\nans = solution()"
    ],
    "aa716df8b445405ab6cdebdb3ae4adf9": [
        "def solution():\n    ashley_age = 10\n    difference_age = 2\n    brother_age = (ashley_age - 3) - difference_age\n    return brother_age\n\nans = solution()"
    ],
    "9c2c49e5d3134ddeb8fb6b3c0c42f5cd": [
        "def solution():\n    # Every third page number is omitted, so we skip counting every third page\n    # starting from page 3.\n    \n    # Initialize the counter for the actual pages and the printed page number.\n    actual_page_count = 0\n    printed_page_number = 0\n    \n    # Iterate through the pages, incrementing actual page count and printing\n    # the page number according to the pattern until we reach the 89th page.\n    while actual_page_count < 89:\n        actual_page_count += 1\n        \n        # For every 3rd page, we don't increase the printed page number.\n        if actual_page_count % 3 != 0:\n            printed_page_number += 1\n    \n    return printed_page_number\n\nans = solution()"
    ],
    "6e9234dea3b64376a232e45d14effce4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    adults, children = symbols('adults children')\n\n    equation1 = Eq(5 * adults + 3 * children, 75)\n    equation2 = Eq(adults + children, 19)\n\n    solutions = solve((equation1, equation2), (adults, children))\n\n    return solutions[adults]\n\nans = solution()"
    ],
    "5cb5ef0814c74ded81cb8b6ce6f1bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the variable\n    x = symbols('x')\n    \n    # Define the equation\n    equation = Eq(3*x - (2*x + 3), 5)\n\n    # Solve the equation\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "8a66caf6aaba494f95bca104943cb7c4": [
        "def solution():\n    ans = 459 + 3762\n    return ans\n\nans = solution()"
    ],
    "0bced7bb4af84506acecdc385274abfd": [
        "def solution():\n    # Number of multiples of 3 in the range 1 to 600\n    multiples_of_3 = 600 // 3\n    # Number of multiples of 5 in the range 1 to 600\n    multiples_of_5 = 600 // 5\n    # Number of multiples of both 3 and 5 (i.e., multiples of 15) in the range 1 to 600\n    multiples_of_15 = 600 // 15\n    \n    # Applying Inclusion-Exclusion Principle\n    ans = multiples_of_3 + multiples_of_5 - multiples_of_15\n    return ans\n\nans = solution()"
    ],
    "f8495fe245f34edeb912b66b7ea8ce5c": [
        "def solution():\n    return 123 + 468\n\nans = solution()"
    ],
    "66edf568e9a74a2aa97d9e92b05d94e2": [
        "def solution():\n    tom_age_now = 10\n    tom_age_future = 20\n    grandma_age_future = 60\n    grandma_age_now = grandma_age_future - (tom_age_future - tom_age_now)\n    return grandma_age_now\n\nans = solution()"
    ],
    "94bb6ae56dbd4a98a0fbeaa59c7d8691": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let B be the number of students in class B\n    # Therefore, 2B is the number of students in class A\n    # C is the total number of candies\n    B, C = symbols('B C')\n\n    # If each student in class A gets 4 candies, 20 more candies are needed\n    # So the total number of candies should be 4 * 2B + 20\n    equation1 = Eq(4 * 2 * B + 20, C)\n\n    # If each student in class B can get 6 candies, there will be 16 candies left\n    # So the total number of candies should be 6 * B - 16\n    equation2 = Eq(6 * B - 16, C)\n\n    # Solving the system of equations for B and C\n    solutions = solve((equation1, equation2), (B, C))\n\n    # C is the total number of candies\n    return solutions[C]\n\nans = solution()"
    ],
    "9bfff3c25a624f939fbe758d02cada7b": [
        "def solution():\n    count = 0\n    # Jeremy can use 0 to 5 ten-pence coins\n    for ten_pence in range(6):\n        # Jeremy can use 0 to 3 twenty-pence coins\n        for twenty_pence in range(4):\n            # Jeremy can use 0 or 1 fifty-pence coins\n            for fifty_pence in range(2):\n                total = ten_pence * 10 + twenty_pence * 20 + fifty_pence * 50\n                if total == 70:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ecaddfdc1ad84d24a6e9ae0e8904ebc2": [
        "def solution():\n    # The worst case scenario according to the Pigeonhole Principle would be to pick each sticker of different colors first\n    # So we pick one red, one green, and then the next one we pick must be either red or green, giving us two of the same color\n\n    # Picking the first red\n    first_pick = 1\n    # Picking the first green\n    second_pick = 1\n    # The next pick must give us two of the same color\n    third_pick = 1\n\n    # Therefore, the minimum number of stickers needed to be picked to ensure two of the same color is the sum\n    ans = first_pick + second_pick + third_pick\n    \n    return ans\n\nans = solution()"
    ],
    "24f3b610c11745edb5ef8e3bb5e6b77b": [
        "def solution():\n    # Using the Pigeonhole Principle\n    # Sheila needs to take out 3 blue balls, 4 orange balls, and 2 yellow balls to ensure she does not have 4 of the same color\n    # To guarantee she has 4 of the same color, she needs to take one more ball from the remaining balls\n    max_without_4_same = 3 + 3 + 2\n    balls_needed_for_4_same = max_without_4_same + 1\n\n    return balls_needed_for_4_same\n\nans = solution()"
    ],
    "9435fd70b9e341539b05792950bee0ca": [
        "def solution():\n    ducklings_legs = 4 * 2  # 4 ducklings with 2 legs each\n    geese_legs = 2 * 2      # 2 baby geese with 2 legs each\n    # Remaining legs are belonging to lambs which have 4 legs each\n    lambs_legs = 36 - (ducklings_legs + geese_legs)\n    number_of_lambs = lambs_legs // 4  # Each lamb has 4 legs\n\n    return number_of_lambs\n\nans = solution()"
    ],
    "dd8d8a23d4864feb861a8645d06813fa": [
        "def solution():\n    num_teams = 5\n    matches = (num_teams * (num_teams - 1)) // 2\n    return matches\n\nans = solution()"
    ],
    "0dbb0cc68b7945019907f84cebf4487e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    equation1 = Eq(boys, 3 * girls)\n    equation2 = Eq(2 * boys + 4 * girls, 570)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "7f4c057f9edc486381868b2cb62f8eb3": [
        "def solution():\n    digits = [3, 1, 9, 2]\n    largest_num = int(''.join(map(str, sorted(digits, reverse=True))))\n    smallest_num = int(''.join(map(str, sorted(digits))))\n    \n    return largest_num - smallest_num\n\nans = solution()"
    ],
    "5395374ab911412c892a95bcb1538a6c": [
        "def solution():\n    # Each layer forms a square with side length decreasing by 1 for each subsequent layer\n    # The number of boxes in each layer is therefore the side length squared\n    layer1 = 1**2  # top layer has 1 box\n    layer2 = 2**2  # second layer has 4 boxes\n    layer3 = 3**2  # third layer has 9 boxes\n\n    # The total number of boxes is the sum of boxes in each layer\n    total_boxes = layer1 + layer2 + layer3 \n\n    return total_boxes\n\nans = solution()"
    ],
    "9882354a7f8745e7818f5641ce7c7354": [
        "def solution():\n    ans = 8.7 * 3.4\n    return ans\n\nans = solution()"
    ],
    "6c31ab9c5c724ce1b5dd8e18d56c817d": [
        "def solution():\n    total_cost = 2.35 + 0.78 + 0.65\n    change = 5 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "a53c706f0348463594c82aefd860177b": [
        "def solution():\n    value = 1.2 + 1.23 + 1\n    ans = value * value - value * (1.2 + 1.23)\n    return ans\n\nans = solution()"
    ],
    "ffae2b155c6e4e12a0dd3224c209353d": [
        "def solution():\n    count = 0\n    for i in range(100, 200):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b7345c517ee645059ca6864ac5589ef4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the time the son takes to harvest the crops by himself\n    x = symbols('x')\n\n    # Equation based on work done: 1/farmer_time + 1/son_time = 1/total_time\n    # When they work together for 16 hours (after son's 6 hours), the work should be complete.\n    # Therefore, combining their work rates should equal 1 complete work in 16 hours.\n    # The farmer's work rate is 1/24 (since he can complete the work in 24 hours alone)\n    # The son's work rate is 1/x (since we're trying to find out how long he would take)\n    # Since the son works 6 hours alone, he finishes 6/x of the work.\n    # Thus, the equation representing the rest of the work done together is (1/24) + (1/x) = 1/16\n\n    equation = Eq(1/24 + 1/x, 1/16)\n\n    # Solve the equation\n    son_time = solve(equation, x)\n\n    return son_time[0]\n\nans = solution()"
    ],
    "53c10c1a3da34ac99c165981e9123c15": [
        "def solution():\n    smiles_per_day = 47\n    days_in_january = 31\n    \n    total_smiles = smiles_per_day * days_in_january\n    \n    return total_smiles\n\nans = solution()"
    ],
    "765a3cf2104c412c90dfa3e660a67e11": [
        "def solution():\n    side_length = int(40**0.5)\n    return side_length\n\nans = solution()"
    ],
    "0fca214bb995431dbbfd8125bbcbb3a8": [
        "def solution():\n    # Calculate the amount of sugar in each solution\n    sugar_annie = 300 * 0.15\n    sugar_becky = 400 * 0.25\n    sugar_carol = 300 * 0.35\n\n    # Calculate the total amount of the mixture\n    total_mixture = 300 + 400 + 300\n\n    # Calculate the total amount of sugar in the mixture\n    total_sugar = sugar_annie + sugar_becky + sugar_carol\n\n    # Calculate the concentration of the sugar in the mixture\n    concentration = total_sugar / total_mixture\n\n    return concentration\n\nans = solution()"
    ],
    "8ce469dd3f78455bbe361dfbac65ec35": [
        "def solution():\n    initial_height = 10  # Height from which the ball is dropped\n    bounce_height = initial_height / 2  # Height after the first bounce\n\n    # Total distance travelled = Distance fallen + 2 times bounce height\n    total_distance = initial_height + 2 * bounce_height\n\n    return total_distance\n\nans = solution()"
    ],
    "61c631f4351c4f37b2e5a67ac813bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    dorothy, timmy, kevin = symbols('dorothy timmy kevin')\n    \n    equation1 = Eq(dorothy, 9 * timmy - 3)\n    equation2 = Eq(dorothy, 96)\n    equation3 = Eq(kevin, timmy + 45)\n\n    solutions = solve((equation1, equation2, equation3), (dorothy, timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "5d35989e2b284f488fb943b1ec405028": [
        "def solution():\n    total_rolls = 30\n    probability_of_five = 1 / 6  # Since it's a fair six-sided die\n\n    expected_times = total_rolls * probability_of_five\n\n    return expected_times\n\nans = solution()"
    ],
    "dfc1f111c9384999a8ce3a20bc2cffc5": [
        "def solution():\n    total_good_copies = 600\n    good_copies_A = total_good_copies * (3/5)\n    good_copies_B = total_good_copies * (2/5)\n\n    total_copies_A = (good_copies_A / 4) * 5\n    total_copies_B = (good_copies_B / 5) * 6\n\n    total_copies = total_copies_A + total_copies_B\n    \n    return int(total_copies)\n\nans = solution()"
    ],
    "2b60051b00824874b4fa3beaf2110c81": [
        "def solution():\n    for num in range(999, 99, -1):\n        if num % 36 == 0:\n            return num\n\nans = solution()"
    ],
    "3a2ed089aaaf41639e7c8cf3a2c8a734": [
        "from math import factorial\n\ndef solution():\n    total_children = 5\n    # Total permutations without restriction\n    total_permutations = factorial(total_children)\n    \n    # Count the permutations where Hugh stands between Louise and Richard\n    # Treat Louise, Hugh, and Richard as one unit since Hugh can't be between Louise and Richard,\n    # and consider the permutations within this unit (LHR, LRH, HLR, HRL, RLH, RHL)\n    # Only LHR, LRH are valid because Hugh is not in the middle.\n    valid_unit_permutations = 2\n    # Treat the trio as a single entity plus the two remaining children gives us 3 factorial permutations\n    blocked_permutations = valid_unit_permutations * factorial(total_children - 2)\n    \n    # Subtract blocked permutations from total permutations\n    valid_permutations = total_permutations - blocked_permutations\n    \n    return valid_permutations\n\nans = solution()"
    ],
    "98777c411fcc4cb6af9079ff424408ba": [
        "def solution():\n    ans = 10 - 1 + 1\n    return ans\n\nans = solution()"
    ],
    "ce53d4f8e44943daa525defbe2c3fe07": [
        "def solution():\n    total_matches = 10 / (1 - (2/5) - (7/20))\n    wins = (2/5) * total_matches\n    draws = (7/20) * total_matches\n    points = (wins * 3) + (draws * 1)\n    return int(points)\n\nans = solution()"
    ],
    "5cbbe117fdc24fd7b9a7955d77adea5e": [
        "def solution():\n    quotient = 9\n    remainder = 2\n    divisor = 4\n    \n    # Johnny's claimed product (incorrect step)\n    incorrect_product = quotient * remainder\n    \n    # Correct product is quotient * divisor\n    correct_product = quotient * divisor\n    \n    # Adding the remainder to the correct product to find the dividend\n    dividend = correct_product + remainder\n    \n    # Johnny's proposed answer\n    johnnys_answer = incorrect_product + divisor\n    \n    # Check if Johnny's answer is correct\n    is_correct = johnnys_answer == dividend\n    \n    # Correct working\n    correct_working = correct_product + remainder\n    \n    return correct_working if not is_correct else dividend\n\nans = solution()"
    ],
    "87ae32b6102741f1b5918d4117319755": [
        "def solution():\n    total_sum = 0\n    # Starting from 40, down to 2, with a step of -2\n    for n in range(40, 1, -2):\n        # Add even-indexed terms and subtract odd-indexed ones\n        total_sum += n if (n // 2) % 2 == 0 else -n\n    return total_sum\n\nans = solution()"
    ],
    "b7a661c038da48b0a38328c3af3f8724": [
        "def solution():\n    sophie_tshirts = 13\n    sister_tshirts = sophie_tshirts - 5\n    return sister_tshirts\n\nans = solution()"
    ],
    "c76c8db1463743adbd53ed8b96efcbd5": [
        "def solution():\n    chocolate_price = 75  # price in pence\n    pen_price = 95  # price in pence\n    chocolates = 4\n    pens = 3\n    note_value = 1000  # £10 note value in pence\n\n    total_cost = (chocolate_price * chocolates) + (pen_price * pens)\n    change = note_value - total_cost\n\n    return change / 100  # converting pence back to pounds\n\nans = solution()"
    ],
    "162b4dfb6c85480ab3fa57a6c7291de2": [
        "def solution():\n    original_price = 4200\n    first_discount = 0.10\n    second_discount = 0.20\n\n    after_first_discount = original_price * (1 - first_discount)\n    final_price = after_first_discount * (1 - second_discount)\n\n    return final_price\n\nans = solution()"
    ],
    "0eb584e3f8a14f75a374964af3070d71": [
        "def solution():\n    total_mean = 555\n    total_sum = total_mean * 8\n    \n    diff_mean = 296\n    last_5_mean = (total_sum - 3 * (total_mean - diff_mean)) / 5\n    \n    return last_5_mean\n\nans = solution()"
    ],
    "cf531f6537954b0c9eb9ebd7c0cea500": [
        "def solution():\n    max_number = 100\n    min_number = 2\n    step = 2\n    \n    multiples = list(range(min_number, max_number + 1, step))\n    ans = len(multiples)\n    \n    return ans\n\nans = solution()"
    ],
    "fbdb47198fdf4306a9847b12bf333226": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    vicky, timmy, kevin = symbols('vicky timmy kevin')\n    \n    # Vicky has 99 stickers\n    equation1 = Eq(vicky, 99)\n    \n    # Vicky has 3 less than 6 times as many stickers as Timmy\n    equation2 = Eq(vicky, 6 * timmy - 3)\n    \n    # Kevin has 32 more stickers than Timmy\n    equation3 = Eq(kevin, timmy + 32)\n\n    # Solve the system of equations for Timmy and Kevin\n    solutions = solve((equation1, equation2, equation3), (vicky, timmy, kevin))\n    \n    return solutions[kevin]\n\nans = solution()"
    ],
    "7f70404ac5f74504a1cfebab700ec8a5": [
        "def solution():\n    initial_people = 5\n    initial_days = 15\n    target_days = 5\n\n    work_rate_per_person = 1 / (initial_people * initial_days)\n    total_work = 1  # the whole bridge\n    target_work_rate = total_work / target_days\n\n    required_people = target_work_rate / work_rate_per_person\n    extra_people = required_people - initial_people\n\n    return int(extra_people)\n\nans = solution()"
    ],
    "70f5ff9ddd8c4370b2cfb94de5a970ab": [
        "def solution():\n    footballs_per_basket = 5\n    number_of_baskets = 7\n    total_footballs = footballs_per_basket * number_of_baskets\n    return total_footballs\n\nans = solution()"
    ],
    "b88c740d29b747828949ce062283a33f": [
        "def solution():\n    total_children = 20\n    pip_position = 3\n    children_between = 5\n    bud_from_front = pip_position + children_between + 1\n    bud_from_end = total_children - bud_from_front + 1\n    return bud_from_end\n\nans = solution()"
    ],
    "312d3c547d294d18b1e263e554e02de1": [
        "def solution():\n    isaac_current_age = 53\n    mother_current_age = 81\n    years_ago = 0\n\n    while True:\n        if (isaac_current_age - years_ago) * 3 == (mother_current_age - years_ago):\n            return years_ago\n        years_ago += 1\n\nans = solution()"
    ],
    "df16de37f8d64768a0f4c9b79d33d31e": [
        "def solution():\n    pounds = 154\n    kg_per_pound = 1 / 2.2\n    kg = pounds * kg_per_pound\n    return kg\n\nans = solution()"
    ],
    "ecbf3f006c6147d3aaf09f392d5a387e": [
        "def solution():\n    def custom_op(a, b):\n        sum_a_to_b_minus_1 = sum(range(a, b))\n        result = sum_a_to_b_minus_1 - b\n        return result\n\n    ans = custom_op(5, 10) - custom_op(4, 9)\n    return ans\n\nans = solution()"
    ],
    "21b6e23a4408430bbf4acc393c601243": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Grandma's age when divided by 4 leaves a remainder of 2: age % 4 == 2\n    # Grandma's age when divided by 5 leaves a remainder of 3: age % 5 == 3\n    # Grandma's age when divided by 9 leaves a remainder of 6: age % 9 == 6\n    \n    congruences = [(2, 4), (3, 5), (6, 9)]\n    age = solve_congruence(*congruences)\n    \n    return age[0]  # Since solve_congruence returns a tuple (solution, lcm_of_moduli)\n\nans = solution()"
    ],
    "35167ef06b9844828843e2c87be8c949": [
        "def solution():\n    ans = 35 + 18 + 26 + 22 - 16 + 25\n    return ans\n\nans = solution()"
    ],
    "cd9d85bed1d74e6cb214e001f0a094e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n\n    # Rasidah had $48 less than Chai Seng\n    equation1 = Eq(rasidah, chai_seng - 48)\n\n    # Rasidah spent 3/5 of her money\n    rasidah_left = rasidah * (2/5)\n\n    # Chai Seng spent 6/7 of his money\n    chai_seng_left = chai_seng * (1/7)\n\n    # In the end, Chai Seng had 1/2 as much money left as Rasidah\n    equation2 = Eq(chai_seng_left, rasidah_left / 2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "791c504e967a47a3a7621807a53b47c8": [
        "def solution():\n    elena_speed = 8\n    cat_speed = 3\n    distance_behind = 500\n\n    relative_speed = elena_speed - cat_speed\n\n    time_to_catch_up = distance_behind / relative_speed\n\n    return time_to_catch_up\n\nans = solution()"
    ],
    "1754095281684c188e6216f11d4caff3": [
        "def solution():\n    from itertools import permutations\n    \n    digits = [1, 2, 3]\n    all_permutations = list(permutations(digits, 3))\n    \n    return len(all_permutations)\n\nans = solution()"
    ],
    "83dbbf7b91904b22b7e2f875718cafe1": [
        "from sympy import isprime\n\ndef solution():\n    count = 0\n    for prime in range(20):\n        if isprime(prime) and isprime(prime + 6) and isprime(prime - 6):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6a3017d012a04a6c9f0ed680b9bf9a09": [
        "def solution():\n    sequence = [8, 20, 31, 41, 50]\n    differences = [sequence[i] - sequence[i - 1] for i in range(1, len(sequence))]\n    second_differences = [differences[i] - differences[i - 1] for i in range(1, len(differences))]\n    next_second_difference = second_differences[-1]\n    next_difference = differences[-1] + next_second_difference\n    next_number = sequence[-1] + next_difference\n    return next_number\n\nans = solution()"
    ],
    "3c78e8e403284c9486c1fe552fdb5004": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(58 - (6 * x + 2), 20)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "9f5fc79092f442618d0ed912989d3195": [
        "from math import factorial\n\ndef solution():\n    # There are 5 choices for the first digit,\n    # 4 choices for the second digit,\n    # 3 choices for the third digit,\n    # 2 choices for the fourth digit but only one choice must be even (2 or 4),\n    # And finally only 1 choice for the last digit.\n    # But since the last digit must be even, there are only 2 choices for it (2, 4).\n    # Therefore, we have to consider these two scenarios separately.\n\n    # Case 1: Last digit is 2, choices for other positions are 4!\n    # Case 2: Last digit is 4, same number of choices for other positions as case 1.\n    # The two cases are mutually exclusive, so the total number of ways is the sum of ways in both cases.\n\n    ways_case_1 = factorial(4)  # When last digit is 2\n    ways_case_2 = factorial(4)  # When last digit is 4\n\n    return ways_case_1 + ways_case_2\n\nans = solution()"
    ],
    "b3a3839d65e84a9eb609756270102de4": [
        "def solution():\n    smallest_number = None\n    for tens in range(1, 10):\n        for ones in range(10):\n            if tens + ones == 15:\n                current_number = 10 * tens + ones\n                if smallest_number is None or current_number < smallest_number:\n                    smallest_number = current_number\n    return smallest_number\n\nans = solution()"
    ],
    "71a76491c3df48ae9b18543d4e5cc354": [
        "def solution():\n    total_weight_first = 8 * 50  # Total weight of eight apples\n    total_weight_second = 9 * 52  # Total weight with the extra apple\n\n    weight_of_extra_apple = total_weight_second - total_weight_first  # Difference is the weight of extra apple\n\n    return weight_of_extra_apple\n\nans = solution()"
    ],
    "dd2fcc192d2f4c3dbf232e72bcb19fa6": [
        "def solution():\n    x = -4**2\n    return x\n\nans = solution()"
    ],
    "287a2d46ffa247fc9ad946e5c0911c54": [
        "def solution():\n    nums = [99, 98, 97, 96]\n    ans = sum(nums)\n    return ans\n\nans = solution()"
    ],
    "966d6206a5444394a2096b3a802b79a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of pages in the document.\n    x = symbols('x')\n\n    # Original time to copy the document\n    original_time = x / 50\n\n    # New time to copy the document with increased speed\n    new_time = x / (50 + 20)\n\n    # Set up the equation based on the condition that the new time is 2 minutes less than the original time.\n    equation = Eq(original_time - new_time, 2)\n\n    # Solve the equation for x.\n    pages = solve(equation, x)\n\n    return pages[0]\n\nans = solution()"
    ],
    "0ba3b59c0bfb4c87ae2d34a874d2d690": [
        "def solution():\n    # Only the lamps with switches pressed an odd number of times will be on.\n    # A switch is pressed an odd number of times iff it's a perfect square.\n    # There will be a perfect square for every square number up to 250.\n    \n    ans = 0\n    for num in range(1, 251):\n        if int(num**0.5)**2 == num:\n            ans += 1\n    return ans\n\nans = solution()"
    ],
    "f4b2a4d95a2f4145b73f56fb9ae21969": [
        "def solution():\n    first_term = 1\n    last_term = 199\n    number_of_terms = (last_term - first_term) // 2 + 1\n    average = (first_term + last_term) / 2\n    return average\n\nans = solution()"
    ],
    "2bb2908692c1496e83c9da8633b98269": [
        "def solution():\n    first_term = 6\n    difference = 4\n    n = 30\n\n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "9adda98665dc499994e24f43869d3eea": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime(2013, 1, 28)\n    one_day = timedelta(days=1)\n    one_year = timedelta(days=365)\n\n    while True:\n        start_date += one_year\n        if start_date.weekday() == 0:  # Check if it is Monday\n            if start_date.year % 4 == 0 and (start_date.year % 100 != 0 or start_date.year % 400 == 0):\n                # Leap year correction\n                start_date -= one_day\n            if start_date.weekday() == 0:\n                return start_date.year\n\nans = solution()"
    ],
    "939f1ef2920640e18e6791035bfe7f8a": [
        "def solution():\n    return 5842 + 351\n\nans = solution()"
    ],
    "84e25013e5fb4deda35beda9f5782685": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    equation1 = Eq(oranges, apples + 194)\n    equation2 = Eq(oranges, 6 * apples + 4)\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "446707881fde4e908bf63228a9dc7ee5": [
        "def solution():\n    for divisor in range(1, 100):\n        for dividend in range(1, 1000):\n            if dividend // divisor == 8 and dividend % divisor == 7:\n                return (dividend, divisor)\n\nans = solution()"
    ],
    "c2cbf1f7958e4d09ae575ec083bddec8": [
        "def solution():\n    # Loop through the possible ages that satisfy the conditions given\n    for age in range(20, 36):\n        if age % 3 == 0 and (age + 1) % 5 == 0:\n            return age\n\nans = solution()"
    ],
    "8488dbe7c4e548e79cc11b66f832cb46": [
        "def solution():\n    # Jogging speed and time\n    jogging_speed = 6  # miles per hour\n    jogging_time = 1  # hour (from 6:30 am to 7:30 am)\n    \n    # Walking speed and time\n    walking_speed = 5  # miles per hour\n    walking_time = 2  # hours (from 7:30 am to 9:30 am)\n    \n    # Distance traveled by jogging\n    jogging_distance = jogging_speed * jogging_time\n    \n    # Distance traveled by walking\n    walking_distance = walking_speed * walking_time\n    \n    # Total distance\n    total_distance = jogging_distance + walking_distance\n    return total_distance\n\nans = solution()"
    ],
    "f94d81e4add44bbdb22df230a08a082f": [
        "def solution():\n    initial_money = 20\n    daily_saving = 1\n    days_saved = 7\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    total_saved = initial_money + (daily_saving * days_saved) - lent_to_brother - spent_on_snacks\n    \n    return total_saved\n\nans = solution()"
    ],
    "c6742159f800490eb0db04916361e0a1": [
        "def solution():\n    total_meters = 900\n    total_companies = 4\n    total_days = 5\n    \n    meters_per_company_per_day = total_meters / (total_companies * total_days)\n    \n    return meters_per_company_per_day\n\nans = solution()"
    ],
    "196a119f90d9439aaddd24ed22d849f3": [
        "def solution():\n    normal_cost = 400\n    discount = 0.10\n    members = 30\n\n    discounted_cost = normal_cost * (1 - discount)\n    cost_per_member = discounted_cost / members\n\n    return cost_per_member\n\nans = solution()"
    ],
    "4e262975314040ab820a9ec130db1cb3": [
        "def solution():\n    base_rate = 0.8  # 80 cents as a dollar value\n    additional_rate = 0.05  # 5 cents as a dollar value\n    total_charge = 1.4  # Total charge of the call in dollars\n    additional_charge = total_charge - base_rate\n\n    # Calculate the number of additional minutes\n    if additional_charge > 0:\n        additional_minutes = int(additional_charge / additional_rate)\n    else:\n        additional_minutes = 0\n\n    # Total minutes is the sum of the first 15 minutes plus additional minutes\n    total_minutes = 15 + additional_minutes\n\n    return total_minutes\n\nans = solution()"
    ],
    "9cbab768b996487fafdce66ceab5b47e": [
        "def solution():\n    last_digit_2 = (2 ** 2017) % 10\n    last_digit_3 = (3 ** 2017) % 10\n\n    ans = (last_digit_2 * last_digit_3) % 10\n    return ans\n\nans = solution()"
    ],
    "f53f2f8694b148fdbea2cbce2274ad5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(4 * x - 13, 55)\n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "e50577a37b7c4a59a13a3b048ce98118": [
        "def solution():\n    boys = 255\n    girls = 234\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "ffcf1702672046df8e86e7270234c92d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(((x - 4) / 2) + 11, 37)\n    original_number = solve(equation, x)[0]\n\n    return original_number\n\nans = solution()"
    ],
    "2c68e4214ff54f85956ee7cc54457f0e": [
        "def solution():\n    first_multiple = -(-56 // 5) * 5  # Ceiling division to get the first multiple of 5 after 56\n    last_multiple = 120 // 5 * 5  # Floor division to get the last multiple of 5 before 120\n\n    if last_multiple > 120:  # Correcting in case 120 itself is a multiple of 5\n        last_multiple -= 5\n\n    count_of_multiples = ((last_multiple - first_multiple) // 5) + 1\n\n    return count_of_multiples\n\nans = solution()"
    ],
    "b2659c11d02e40ed86b49d179fd937b1": [
        "def solution():\n    # Analyzing the given operations with new definitions provided in the question:\n    # From 4 ◈ 7 = 21, 6 ◈ 22 = 20, and 8 ◈ 30 = 26, it seems that the operation defined as ◈\n    # is related to the multiplication or addition/subtraction of the two numbers with maybe some pattern.\n    \n    # To find the pattern, we need to determine the relationship between the numbers\n    # Let's look at the products and sums of each example:\n    # 4 * 7 = 28, and 28 - 7 = 21 (subtract second number)\n    # 6 * 22 = 132, and 132 - 22 * 6 / 7 = 20 (subtract second number multiplied by the ratio of 6 to 7)\n    # 8 * 30 = 240, and 240 - 30 * 8 / 7 = 26 (subtract second number multiplied by the ratio of 8 to 7)\n\n    # Based on the above observations, it seems that the operation ◈ is:\n    # a ◈ b = a * b - b * a/7\n\n    # Therefore, for 9 ◈ 20 we calculate:\n    a = 9\n    b = 20\n    result = a * b - b * a / 7\n\n    return int(result)\n\nans = solution()"
    ],
    "03cf341346924ba7a563f01f54c2a13f": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(35, 10 - 2 * x + 7 * x)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "ae56d2e7b43c4bd68b65a028a92a6651": [
        "def solution():\n    total_quarters = 2 + 1/2\n    quarters_in_one = 4\n    ans = total_quarters * quarters_in_one\n    return ans\n\nans = solution()"
    ],
    "8aad358e912f47108a9715343902ea04": [
        "def solution():\n    lucy_position = 5\n    eddie_position = 9\n    people_between = 2\n\n    total_people = (lucy_position - 1) + people_between + eddie_position\n\n    return total_people\n\nans = solution()"
    ],
    "77ab09536f3247d9bbce6ad4688ccf88": [
        "def solution():\n    # Gina was 50 years old on 10th May 2005\n    # This means Gina was born in 2005 - 50 = 1955\n    gina_birth_year = 2005 - 50\n\n    # James was 20 years old on 10th May 1997\n    # This means James was born in 1997 - 20 = 1977\n    james_birth_year = 1997 - 20\n\n    # We need to find out how old James was when Gina was 35\n    # Gina was 35 years old in 1955 + 35 = 1990\n    gina_age_35_year = gina_birth_year + 35\n\n    # James age when Gina was 35 is the year Gina was 35 - James's birth year\n    james_age_when_gina_35 = gina_age_35_year - james_birth_year\n\n    return james_age_when_gina_35\n\nans = solution()"
    ],
    "59d86540e8a94f73833a04f93b4465f1": [
        "def solution():\n    for B in range(10):\n        number = int(f\"26{B}789\")\n        if number % 13 == 0:\n            return B\n\nans = solution()"
    ],
    "47825c0910a244f4bdcd974186bcaefe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 4) * 7 - 21, 35)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f0cc63d487f641d6828e61eaf1fc53c8": [
        "def solution():\n    primes = [2, 3, 5, 7]  # potential remainders when divided by 3, 5, 7, 8\n    for n in range(1, 3 * 5 * 7 * 8):  # the smallest possible value of the number should be less than the lcm(3, 5, 7, 8)\n        remainders = [n % 3, n % 5, n % 7, n % 8]\n        if sorted(remainders) == primes:  # remainders must be the prime numbers in the list\n            return n\n    return None\n\nans = solution()"
    ],
    "fe803c1367d64b149801be4344758226": [
        "def solution():\n    total_length_cm = 11 * 100 + 74  # Convert meters to cm\n    cut_length_cm = 5 * 100 + 8      # Convert meters to cm\n    remaining_length_cm = total_length_cm - cut_length_cm\n    stripe_length_cm = remaining_length_cm / 9  # Divide by 9 to get each stripe length\n\n    stripe_length_m = stripe_length_cm // 100  # Convert cm to meters\n    stripe_length_cm_remainder = stripe_length_cm % 100  # Get the remainder in cm\n\n    return stripe_length_m, stripe_length_cm_remainder\n\nans = solution()"
    ],
    "58e3a2db56754c6f9d5e40fe1b58ffe7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    orchids, tulips, roses = symbols('orchids tulips roses')\n    total_flowers = 3616\n    flowers_left = 2644\n    \n    # equations based on the given conditions\n    equation1 = Eq(orchids + tulips + roses, total_flowers)\n    equation2 = Eq(5 * orchids, 3 * tulips)\n    \n    # after selling the flowers\n    sold_orchids = 0.40 * orchids\n    sold_tulips = 1/5 * tulips\n    sold_roses = 0.25 * roses\n    equation3 = Eq(orchids - sold_orchids + tulips - sold_tulips + roses - sold_roses, flowers_left)\n    \n    # solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (orchids, tulips, roses))\n    \n    return solutions[orchids]\n\nans = solution()"
    ],
    "a56cc128d0da4c10987a8d45533419d8": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n    \n    # The smallest number of right-handed girls would occur when all non-right-handed pupils are girls.\n    # Calculate the number of girls who are not right-handed first.\n    not_right_handed = total_pupils - right_handed\n    \n    # The smallest number of right-handed girls is given by subtracting non-right-handed girls from total girls.\n    right_handed_girls = girls - not_right_handed\n    \n    # If there are more non-right-handed pupils than girls, then all girls are right-handed.\n    right_handed_girls = max(right_handed_girls, 0)\n    \n    return right_handed_girls\n\nans = solution()"
    ],
    "4fbf262896eb43f0886f401236b6a692": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    equation1 = Eq(A + B, 130)\n    equation2 = Eq(A, 5 * B + 4)\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "2a6b8ddd03b04d6ca675e0515ac48c3f": [
        "def solution():\n    result = 20.23 * 39 + 202.3 * 4.1 + 4 * 101.15\n    return result\n\nans = solution()"
    ],
    "76f0b59b2fe34356a29cea5b4f171d3b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    books, files = symbols('books files')\n\n    # Each book costs $12 and each file costs $9\n    equation1 = Eq(12 * books + 9 * files, 336)\n    # She bought 14 more books than files\n    equation2 = Eq(books, files + 14)\n\n    solutions = solve((equation1, equation2), (books, files))\n\n    return solutions[books]\n\nans = solution()"
    ],
    "488360b26f1144849d4bb784a270ca57": [
        "def solution():\n    for chickens in range(11):  # Only 0 to 10 chickens possible\n        rabbits = 10 - chickens\n        if 2 * chickens + 4 * rabbits == 34:\n            return chickens\n\nans = solution()"
    ],
    "701a44d04fe2471b8b3b4a02034c3aed": [
        "def solution():\n    ans = 10034\n    return ans\n\nans = solution()"
    ],
    "bdc6e2ddbb4c4c19b2b90c3c89e0ae05": [
        "def solution():\n    return 0.012 + 2.03 + 0.1456\n\nans = solution()"
    ],
    "8a42b93556ef4bcebb38b2ba338a9e1d": [
        "def solution():\n    ans = 60.2 / 7\n    return ans\n\nans = solution()"
    ],
    "49714794b0f94aada1cf3dfbf03a6990": [
        "def solution():\n    ones_digits = [pow(i, 2013, 10) for i in range(1, 10)]\n    total = sum(ones_digits)\n    return total % 10\n\nans = solution()"
    ],
    "a7d1fbe2679e40b58d6660db0ed3287b": [
        "def solution():\n    for age in range(30, 121):\n        if age % 6 == 2 and age % 7 == 5:\n            return age\n\nans = solution()"
    ],
    "4073b71163494881a2c9c5629d8b16a5": [
        "def solution():\n    # Worst case: Peter takes 1 sock of each color.\n    # After that, the next sock Peter takes out must match one of the socks he already has.\n    # Therefore, Peter needs to take out 4 socks to guarantee he gets two of the same colour.\n    ans = 1 + 1 + 1 + 1  # Each 1 represents one sock of a different color, the last 1 ensures a pair.\n    return ans\n\nans = solution()"
    ],
    "6a58abe1371844c497a2ad82064a0ebd": [
        "def solution():\n    # Convert the departure and arrival times to a 24-hour clock\n    departure_hour = 20 # 8pm in 24-hour clock\n    arrival_hour = 1    # 1am in 24-hour clock\n\n    # Calculate the total hours from the departure to midnight of the same day in Japan\n    hours_to_midnight_japan = 24 - departure_hour\n    \n    # Calculate total flight duration considering the time difference and the day change\n    total_flight_duration = hours_to_midnight_japan + arrival_hour + 7 # 7 hours time difference\n\n    # Remember the flight crossed a day (2nd July to 3rd July)\n    total_flight_duration -= 24 # Subtract the 24 hours that represent a full day\n    \n    return total_flight_duration\n\nans = solution()"
    ],
    "c2819474faa94700a66e972f6de65651": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    square, triangle, diamond = symbols('square triangle diamond')\n\n    equation1 = Eq(square + triangle, 10)\n    equation2 = Eq(triangle + diamond, 16)\n    equation3 = Eq(square + triangle + diamond, 22)\n\n    solutions = solve((equation1, equation2, equation3), (square, triangle, diamond))\n\n    return solutions[diamond] + solutions[square]\n\nans = solution()"
    ],
    "29659ea8c8ba40fcbfd094b963998970": [
        "def solution():\n    total_digits = 0\n    for i in range(1, 132):\n        total_digits += len(str(i))\n    return total_digits\n\nans = solution()"
    ],
    "6fc358af07bb4fb290d8b7b95d0d4815": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    necklace, earring = symbols('necklace earring')\n\n    # The total cost of 9 necklaces and 5 earrings was $1440\n    equation1 = Eq(9 * necklace + 5 * earring, 1440)\n    # The total cost of 2 necklaces and 3 earrings was $439\n    equation2 = Eq(2 * necklace + 3 * earring, 439)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (necklace, earring))\n\n    # Find the total cost of 1 necklace and 1 earring\n    total_cost = solutions[necklace] + solutions[earring]\n\n    return total_cost\n\nans = solution()"
    ],
    "b89eb8f48467425ca5d1e6474cae3be8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eugene, sid = symbols('eugene sid')\n\n    equation1 = Eq(eugene, 5 * sid)\n    equation2 = Eq(eugene + sid - 71 - 16, 51)\n\n    solutions = solve((equation1, equation2), (eugene, sid))\n\n    return solutions[eugene]\n\nans = solution()"
    ],
    "b658611043604a84904809a513eca7b0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n\n    equation1 = Eq(x + y, 71)\n    equation2 = Eq(x - y, 9)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "d8d8fba2232a4e928731d18f9af5290b": [
        "def solution():\n    # There are 3 choices for the first digit (1, 2)\n    # and 3 choices for the second digit (0, 1, 2)\n    # because we cannot use 0 as the first digit of a 2-digit number\n    \n    # The number of ways to form the 2-digit number is then 2*3\n    ans = 2 * 3\n\n    return ans\n\nans = solution()"
    ],
    "9638aa4f9615400687f09c8801020eb6": [
        "def solution():\n    ans = 391 * 7\n    return ans\n\nans = solution()"
    ],
    "b99e232169f64053801fd886d5ce3984": [
        "def solution():\n    # Since the numbers are consecutive even numbers, their common difference is 2.\n    # Let the smallest number be x. Then the sequence is x, x+2, x+4, x+6, x+8\n    # The sum of these numbers is 200, so we have the equation:\n    # x + (x + 2) + (x + 4) + (x + 6) + (x + 8) = 200\n    # Simplifying the equation gives us:\n    # 5*x + 20 = 200\n    # Now solve for x:\n    x = (200 - 20) / 5\n    return int(x)\n\nans = solution()"
    ],
    "a137655c79064ec7a5bd8abbf2cc059d": [
        "def solution():\n    sum_series = 0\n    numerator = 100\n    denominator = 97\n    factorial_denominator = 1\n    \n    for i in range(97):\n        sum_series += (numerator / (denominator * factorial_denominator))\n        numerator *= (99 - i)\n        factorial_denominator *= (97 - i)\n\n    return sum_series\n\nans = solution()"
    ],
    "8dea568bfc0f47a88a18a150964ebdd8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the volume of sugar solution transferred in grams\n    x = symbols('x')\n\n    # Initial amounts of sugar in each container\n    sugar_A = 0.10 * 50  # 10% concentration in 50g of water\n    sugar_B = 0.20 * 30  # 20% concentration in 30g of water\n\n    # After sugar solution is transferred, remaining volume in each container\n    water_A = 50 - x\n    water_B = 30 - x\n\n    # New sugar concentration in container A after losing x grams and gaining x grams from B\n    sugar_concentration_A = (sugar_A - 0.10 * x + 0.20 * x) / water_A\n    \n    # New sugar concentration in container B after losing x grams and gaining x grams from A\n    sugar_concentration_B = (sugar_B - 0.20 * x + 0.10 * x) / water_B\n\n    # Equation representing that the concentrations are now equal\n    equation = Eq(sugar_concentration_A, sugar_concentration_B)\n\n    # Solve for x\n    solution = solve(equation, x)[0]  # Taking the first solution\n\n    return solution\n\nans = solution()"
    ],
    "5e71c6a0c7254d3ab8b549338d61acff": [
        "def solution():\n    # If it takes 8 minutes to cut a piece of wood into 5 sections,\n    # this means Katie makes 4 cuts (since 5 sections result from 4 cuts).\n    time_per_cut = 8 / 4  # time taken for each cut\n\n    # If she needs to cut the wood 6 times, she will make 6 cuts.\n    # Therefore, we multiply the time per cut by 6 to find the total time needed.\n    total_time = time_per_cut * 6\n\n    return total_time\n\nans = solution()"
    ],
    "f22bedb58be24a40a4d182dd0dbc7ffc": [
        "def solution():\n    total_votes = 120\n    mark_votes = 22\n    nicole_votes = 27\n    peter_votes = 35\n    \n    # Remaining votes to be allocated\n    remaining_votes = total_votes - (mark_votes + nicole_votes + peter_votes)\n    \n    # To win, need one more vote than half the total votes\n    votes_needed_to_win = total_votes // 2 + 1\n    \n    # Votes Peter needs to get to have one more than half the total votes\n    additional_votes_needed = votes_needed_to_win - peter_votes\n    \n    # If the remaining votes can get Peter to win\n    if additional_votes_needed <= remaining_votes:\n        return additional_votes_needed\n    else:\n        return \"Not enough remaining votes for Peter to win outright\"\n\nans = solution()"
    ],
    "92a0e5f9500b4853819d540562be1a80": [
        "def solution():\n    return 87 * 23\n\nans = solution()"
    ],
    "adae7d5f0cb94d7e81c361caadeeff21": [
        "def solution():\n    total_questions = 50\n    unattempted_questions = 3\n    attempted_questions = total_questions - unattempted_questions\n    score_per_correct = 4\n    score_per_wrong = -1  # Deducted score for wrong answer\n    total_score = 168\n\n    # Let x be the number of correct answers.\n    # Then (attempted_questions - x) is the number of wrong answers.\n    # The equation will be: score_per_correct * x + score_per_wrong * (attempted_questions - x) = total_score\n    # Solve for x.\n\n    for x in range(attempted_questions + 1):\n        if score_per_correct * x + score_per_wrong * (attempted_questions - x) == total_score:\n            return x\n\nans = solution()"
    ],
    "3aa75c8b30a54c67a6563a2056fe6973": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # boys - girls = 7\n    equation1 = Eq(boys - girls, 7)\n    \n    # boys + girls = 995\n    equation2 = Eq(boys + girls, 995)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "2084c341f98040dbb7686adc74b457f7": [
        "def solution():\n    # For whole numbers, the highest value of units is the greatest single digit\n    num1_units = 31 % 10\n    num2_units = 32 % 10\n\n    # Compare the units\n    if num1_units > num2_units:\n        ans = 31\n    else:\n        ans = 32\n\n    return ans\n\nans = solution()"
    ],
    "4517703a55ee4695b02b8505817748b1": [
        "def solution():\n    total_amount = 490  # Convert to pence\n    # Let the number of each coin type be n. \n    # Then the total value is 5n for 5p, 10n for 10p and 20n for 20p coins.\n    # 5n + 10n + 20n = total_amount -> 35n = total_amount -> n = total_amount / 35\n    n = total_amount // 35  # Using integer division since number of coins must be integral\n    total_coins = 3 * n  # There are equal numbers of 5p, 10p, and 20p coins\n\n    return total_coins\n\nans = solution()"
    ],
    "590bcb8900904fe88f3fadadb68feb11": [
        "def solution():\n    original_price = 540\n    discount = 189\n    percentage_reduction = (discount / original_price) * 100\n    return percentage_reduction\n\nans = solution()"
    ],
    "038a870a64fa4b908242c675e09c8860": [
        "def solution():\n    # Total sweets eaten\n    total_sweets = 135\n    # Number of days\n    days = 9\n    # Number of sweets eaten on the first day (assuming x)\n    # Total number of sweets eaten can be represented by the sum of an arithmetic sequence:\n    # total_sweets = (first_day + last_day) * days / 2\n    # Also, each day he eats 3 more sweets than the day before, so:\n    # last_day = first_day + 3 * (days - 1)\n    # Combining the two we get:\n    # total_sweets = (2 * first_day + 3 * (days - 1)) * days / 2\n    # Then solve the equation for first_day:\n    # 2 * first_day = (total_sweets * 2 / days) - 3 * (days - 1)\n    first_day = ((total_sweets * 2) / days - 3 * (days - 1)) / 2\n    # Then, calculate the last_day (the number of sweets eaten on the last day) using the relation:\n    # last_day = first_day + 3 * (days - 1)\n    last_day = first_day + 3 * (days - 1)\n    return int(last_day)\n\nans = solution()"
    ],
    "27fec67c0edf42efbd46038d592d002b": [
        "def solution():\n    initial_amount = 100\n    book_percentage = 0.10\n    dvd_percentage = 0.20\n\n    after_book = initial_amount * (1 - book_percentage)\n    after_dvd = after_book * (1 - dvd_percentage)\n\n    return after_dvd\n\nans = solution()"
    ],
    "892ff0f234ae4e3cb7a7bf750eb3a01d": [
        "def solution():\n    initial_amount = 28  # Amount Annie has initially in dollars\n    gift_cost = 20       # Cost of the gift in dollars\n    remaining_amount = initial_amount - gift_cost  # Amount remaining after buying the gift in dollars\n    remaining_amount_cents = remaining_amount * 100  # Convert remaining amount to cents\n    return remaining_amount_cents\n\nans = solution()"
    ],
    "8f16804135244d3d952f4f7aa96aea99": [
        "def solution():\n    principal = 1000\n    rate = 0.06\n    time = 5\n    compound_interest_factor = 1.33823\n\n    final_balance = principal * compound_interest_factor\n\n    return final_balance\n\nans = solution()"
    ],
    "fa6e880afc1b420b858420333e657e2c": [
        "def solution():\n    pages = 185\n    digits = 0\n\n    # 1-9: 9 pages each have 1 digit\n    digits += 9\n    \n    # 10-99: 90 pages each have 2 digits\n    digits += 90 * 2\n    \n    # 100-185: 86 pages each have 3 digits\n    digits += (pages - 99) * 3\n\n    return digits\n\nans = solution()"
    ],
    "749213142ff9426e8ef90f3f3aa7daa5": [
        "def solution():\n    annual_salary = 24000\n    pay_rise_percentage = 10\n\n    new_annual_salary = annual_salary + (annual_salary * pay_rise_percentage / 100)\n    new_monthly_salary = new_annual_salary / 12\n\n    return new_monthly_salary\n\nans = solution()"
    ],
    "27c26de10eb14930ae9cdf02279d1e58": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10 - 3 * (x - 2), 4 * x - 5 * (4 - x))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3da2630a7c3042408936061a5d0172c6": [
        "def solution():\n    ans = 7842 - 998\n    return ans\n\nans = solution()"
    ],
    "a8fa71f1af7245808f0ae42a4ff273b0": [
        "def solution():\n    ans = 704 - 457\n    return ans\n\nans = solution()"
    ],
    "a12c2b2900394c9999c189d1a33af5a3": [
        "def solution():\n    ans = 123 - (23 + 56)\n    return ans\n\nans = solution()"
    ],
    "e6f07695c3c44ceda16250795d0df505": [
        "def solution():\n    for month in range(1, 13):  # There are only 12 months\n        for day in range(1, 32):  # Assuming a maximum of 31 days in a month\n            if month * 31 + day * 12 == 376:\n                return '{:02d}{:02d}'.format(day, month)\n\nans = solution()"
    ],
    "0581d122126f4a8aa0564b99c14fdde4": [
        "def solution():\n    missing_number = (4.08 * 20 - 1.08 * 20) / 20\n    return missing_number\n\nans = solution()"
    ],
    "50997193003b42a5b1b612a65004742c": [
        "def solution():\n    ans = sum([119, 113, 109, 105, 101]) - sum([115, 111, 107, 103, 99])\n    return ans\n\nans = solution()"
    ],
    "7501b55360b14603a4f3cd0fec5e5c2e": [
        "def solution():\n    return 158 * 23\n\nans = solution()"
    ],
    "2596b3b0a45a4d33bab961b1ab804010": [
        "def solution():\n    count = 0\n    for i in range(1, 2023):\n        if i % 7 != 0 and i % 17 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "39fc04a75d5b4b149928dc45f62d257c": [
        "def solution():\n    cooker_price = 350\n    quantity = 16\n    total_cost = cooker_price * quantity\n    return total_cost\n\nans = solution()"
    ],
    "18b18182a46e40b88627f1ccea5b3d8e": [
        "def solution():\n    # Calculate the sale price of the calculators (reduced by a quarter)\n    calculator_price = 6 * 0.75\n    # Calculate the sale price of the protractors (half price)\n    protractor_price = 0.30 / 2\n\n    # Calculate the total cost for calculators and protractors\n    total_calculators_price = calculator_price * 8\n    total_protractors_price = protractor_price * 20\n\n    # Sum of both prices\n    total_price = total_calculators_price + total_protractors_price\n    \n    return total_price\n\nans = solution()"
    ],
    "6aa8b0892ddb472f98ad315fc9309ec6": [
        "def solution():\n    flour_needed = 40\n    milk_needed = 80\n    tom_flour = 25\n\n    milk_to_use = (milk_needed / flour_needed) * tom_flour\n\n    return milk_to_use\n\nans = solution()"
    ],
    "b0936b75d5ce4b94ae9381888ed227ad": [
        "def solution():\n    sweets_taken = 5\n    sweets_left = 38\n\n    initial_sweets = sweets_taken + sweets_left\n\n    return initial_sweets\n\nans = solution()"
    ],
    "a1e7310c3dd84d7a9231e38d0f9f7452": [
        "def solution():\n    younger_current_age = 18\n    older_future_age = 62\n    age_difference = older_future_age - younger_current_age\n    older_current_age = younger_current_age + age_difference\n    return older_current_age\n\nans = solution()"
    ],
    "cbb06928b2ac4d109928a77853509743": [
        "def solution():\n    # Since the grass grows at a constant rate, we can use the relationship:\n    # (number of oxen) * (time in weeks) = constant\n    # For 27 oxen to finish in 6 weeks: 27 * 6 = constant\n    # For 23 oxen to finish in 9 weeks: 23 * 9 = constant\n    # We equate them to find the constant:\n    constant = 27 * 6  # which should be equal to 23 * 9\n\n    # Now we need to find out how many weeks it will take for 21 oxen to finish eating\n    # Let x be the number of weeks for 21 oxen to finish eating\n    # So, we have the equation: 21 * x = constant\n    # We solve for x:\n    x = constant / 21\n\n    return x\n\nans = solution()"
    ],
    "d32e56919f284c4db3acbe24232d6fd9": [
        "def solution():\n    result_in_tonnes = 1.194 * (2/3)\n    result_in_kilograms = result_in_tonnes * 1000\n    return result_in_kilograms\n\nans = solution()"
    ],
    "060047cfbee741bb986e84b4387b64bc": [
        "def solution():\n    # Ellen's bike ride\n    bike_speed = 10  # miles per hour\n    bike_time = 1    # hour (from 7:30am to 8:30am)\n    bike_distance = bike_speed * bike_time\n    \n    # Ellen's train ride\n    train_speed = 50  # miles per hour\n    train_time = 2    # hours (from 8:30am to 10:30am)\n    train_distance = train_speed * train_time\n    \n    # Total distance\n    total_distance = bike_distance + train_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "3912f4432e58498cbda173e79f990a37": [
        "def solution():\n    numerator = 1\n    denominator = 2015**3 - 2014 * (2015**2 + 2016)\n    \n    # Simplify the equation in the denominator\n    # 2015^3 - 2014 * 2015^2 - 2014 * 2016\n    # 2015 * (2015^2 - 2014 * 2015) - 2014 * 2016\n    # 2015 * (2015 * 2015 - 2014 * 2015) - 2014 * 2016\n    # 2015 * (2015 - 2014) * 2015 - 2014 * 2016\n    # 2015 * 1 * 2015 - 2014 * 2016\n    # 2015^2 - 2014 * 2016\n    \n    simplified_denominator = 2015**2 - 2014*2016\n    \n    ans = numerator / simplified_denominator\n    return ans\n\nans = solution()"
    ],
    "3747f6795b484a8d933bdeff1799037e": [
        "def solution():\n    ans = (0.02) ** 2\n    return ans\n\nans = solution()"
    ],
    "de37bee61aca42a6b5dabc0d16ba4df1": [
        "def solution():\n    return 1440 // 24\n\nans = solution()"
    ],
    "356c71d6a146447aa7e01a575a71da98": [
        "def solution():\n    # There are three boxes and five balls. Since the balls are identical, this is a problem of\n    # partitioning five indistinguishable items into three distinguishable boxes.\n    # This is an example of the \"stars and bars\" combinatorial problem.\n    # The formula for the number of ways to distribute n identical objects into k distinct boxes is:\n    # C(n+k-1, k-1)\n    # Where C(n, k) is the binomial coefficient representing n choose k.\n    from math import comb\n    \n    balls = 5\n    boxes = 3\n    \n    # Since the boxes are distinguishable, we can think of the problem as inserting two dividers\n    # among the five balls. The number of ways to place the dividers is the number of solutions.\n    num_ways = comb(balls + boxes - 1, boxes - 1)\n    \n    return num_ways\n\nans = solution()"
    ],
    "ff9e28ea21aa4addbaf6b47561b79b63": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    red, blue, green = symbols('red blue green')\n\n    # Equations based on the problem statement\n    equation1 = Eq(red, blue + 25)\n    equation2 = Eq(green, red + 32)\n    equation3 = Eq(red + blue + green, 112)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (red, blue, green))\n    \n    return solutions[blue]\n\nans = solution()"
    ],
    "51579396b1d94a949192647f00104857": [
        "from math import factorial\n\ndef solution():\n    word = 'TEENAGE'\n    letters_count = {letter: word.count(letter) for letter in set(word)}\n    total_permutations = factorial(len(word))\n    for count in letters_count.values():\n        total_permutations //= factorial(count)\n\n    return total_permutations\n\nans = solution()"
    ],
    "be8ef166256a4fb4a86c6d0fcd933a8b": [
        "def solution():\n    rows = 3 + 2 - 1  # Lucas is 3rd from front and 2nd from back\n    columns = 4 + 3 - 1  # Lucas is 4th from left and 3rd from right\n    total_students = rows * columns  # Total students is rows multiplied by columns\n    return total_students\n\nans = solution()"
    ],
    "216fe3f443544e68a0aed48da56449e1": [
        "def solution():\n    sale_price = 60\n    discount_rate = 0.25\n    original_price = sale_price / (1 - discount_rate)\n    return original_price\n\nans = solution()"
    ],
    "2d46f0af47944add838f9674e67c820b": [
        "def solution():\n    num = 217\n    while sum(int(digit) for digit in str(num)) != 9:\n        num += 1\n    return num\n\nans = solution()"
    ],
    "d361ce8aec3d498eba6093a4def8859a": [
        "def solution():\n    ans = 284 + 69 - 271\n    return ans\n\nans = solution()"
    ],
    "b02ecddb14a14da0b461c2caa96532c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the amounts of money Ema and Keng Wee have\n    ema, keng_wee = symbols('ema keng_wee')\n\n    # Equation based on the problem statement\n    equation1 = Eq(ema + 360, keng_wee)                  # Ema had $360 less than Keng Wee\n    equation2 = Eq(ema - ema/4, keng_wee - 4/7*keng_wee) # After spending, they have the same amount\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (ema, keng_wee))\n\n    return solutions[keng_wee]\n\nans = solution()"
    ],
    "4527a361966a43bfb89e355298a7a037": [
        "def solution():\n    one_fourth_of_36 = 36 / 4\n    one_tenth_of_square = one_fourth_of_36 * 10\n    return one_tenth_of_square\n\nans = solution()"
    ],
    "cefb89968d41422986f6e937e4276320": [
        "def solution():\n    # Since Lucas is the 3rd from the front and 2nd from the back, there are 3 + 2 - 1 people in his column\n    # (subtract 1 because Lucas is counted twice).\n    number_in_column = 3 + 2 - 1\n\n    # Since Lucas is the 4th from the left and 3rd from the right, there are 4 + 3 - 1 people in his row\n    # (subtract 1 because Lucas is counted twice).\n    number_in_row = 4 + 3 - 1\n\n    # The total number of students is the product of the number of people in a column and row.\n    total_students = number_in_column * number_in_row\n\n    return total_students\n\nans = solution()"
    ],
    "584f43df1fd1456fb6a9ff29d820ce08": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    g, b = symbols('g b')  # g for girls, b for boys\n\n    # Initial ratio of girls to boys\n    equation1 = Eq(g, 9/11 * b)\n\n    # After 2 girls are transferred in, the new ratio\n    equation2 = Eq(g + 2, 10/11 * b)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (g, b))\n\n    # Calculate the total number of students after the 2 girls are transferred in\n    total_students_after = solutions[g] + 2 + solutions[b]\n\n    return total_students_after\n\nans = solution()"
    ],
    "a1693ad113aa4c239ad89d235418724c": [
        "def solution():\n    return 5 / (1/4)\n\nans = solution()"
    ],
    "ef243e4e071b44f7aa95098500cc59c4": [
        "def solution():\n    ans = 37 + 38 + 40 + 43 + 42 + 41\n    return ans\n\nans = solution()"
    ],
    "a98a706222f448d38a755e2d7c5165fc": [
        "def solution():\n    ans = 418 * 7\n    return ans\n\nans = solution()"
    ],
    "67b7658f12214846a53f685f44cedc06": [
        "def solution():\n    ans = 77.5 * 52 / 100 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "439b192b6f9344e0b4321e87c7abf0c6": [
        "def solution():\n    ans = 1  # Starting with the first term 1\n    for denominator in range(2, 11):\n        # For each denominator from 2 to 10 inclusive, we have two series.\n        # One series is incrementing from 1 to the denominator,\n        # and the other is decrementing from the denominator back to 1.\n        # Due to the pattern, each fraction will be counted twice except the one with the denominator itself.\n        series_sum = sum(2 * (num / denominator) for num in range(1, denominator))\n        # Add the value of the denominator itself.\n        series_sum += 1  \n        # Accumulate the current series sum to the total answer.\n        ans += series_sum\n    return ans\n\nans = solution()"
    ],
    "302d0208f5dc4303b27c7d3b793b9b4a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation = Eq(2 * (3 * x - y), 2 * x + 4)\n    solutions = solve(equation, (x, y))\n    x_val = solutions[x]\n    y_val = solutions[y]\n\n    ans = 2 * x_val - y_val\n    return ans\n\nans = solution()"
    ],
    "a4fcfa11aee9487fa89fc3ae9b909d04": [
        "def solution():\n    total_cost_pence = (3 * 31) + (2 * 17) + 78 + (105)\n    total_paid_pence = 5 * 100\n    change_pence = total_paid_pence - total_cost_pence\n    return change_pence\n\nans = solution()"
    ],
    "dc5e7ba6ef7e4f3aa7342a10e0e8ce72": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    trevor, siobhan = symbols('trevor siobhan')\n    equation1 = Eq(trevor, 5 * siobhan)\n    equation2 = Eq(siobhan, trevor - 24)\n\n    solutions = solve((equation1, equation2), (trevor, siobhan))\n\n    return solutions[trevor]\n\nans = solution()"
    ],
    "a33234abdd534b3cb07a4fa3e75ec899": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of tiles Mr Lim and Mr Tan have\n    tiles_lim, tiles_tan = symbols('tiles_lim tiles_tan')\n\n    # Define the two equations based on the problem statement\n    equation1 = Eq(tiles_lim + tiles_tan, 390)  # Total number of tiles\n    equation2 = Eq(tiles_lim, 5 * tiles_tan)    # Mr Lim has 5 times the tiles Mr Tan has\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (tiles_lim, tiles_tan))\n\n    # Calculate how many more tiles Mr Lim has than Mr Tan\n    more_tiles = solutions[tiles_lim] - solutions[tiles_tan]\n\n    return more_tiles\n\nans = solution()"
    ],
    "67e8fb8a09154285b3afecd086511f32": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Zehan's current age as z\n    z = symbols('z')\n\n    # Equation representing the relationship: In 12 years, Zehan will be 3 times as old as she is now\n    equation = Eq(z + 12, 3 * z)\n\n    # Solving the equation for Zehan's current age\n    zehans_age = solve(equation, z)\n\n    return zehans_age[0]\n\nans = solution()"
    ],
    "d92a77c7952a48ab83c4fa481451ad5c": [
        "def solution():\n    return 6.4 * 2.7\n\nans = solution()"
    ],
    "a19e02dd5cf546089c95a5d1d0b6a300": [
        "from math import comb\n\ndef solution():\n    # There are three scenarios: A is chosen, B is chosen, or C is chosen\n    # For each scenario, there are comb(14, 4) ways to choose the remaining 4 students from the 14 that are not A, B, or C\n    # So we should multiply this by 3 for the three possible scenarios\n    ways_to_choose = 3 * comb(14, 4)\n    return ways_to_choose\n\nans = solution()"
    ],
    "281573f15ba24a4186a9388a1bf098cb": [
        "def solution():\n    total_cost = 58.10\n    number_of_tickets = 7\n\n    cost_per_ticket = total_cost / number_of_tickets\n\n    return round(cost_per_ticket, 2)\n\nans = solution()"
    ],
    "6001dc976c8f4e57b213b0ec00f81c8d": [
        "def solution():\n    return 0.36 * 100\n\nans = solution()"
    ],
    "f8d4c7f0881341e782609d8014e213f2": [
        "def solution():\n    # Let x be the original amount of lemon juice in the bottle\n    x = symbols('x')\n\n    # Since lemonade is made in the ratio of 2 parts lemon juice to 3 parts of water,\n    # Let 2/5 of the total lemonade volume be the original lemon juice\n    # Let 3/5 of the total lemonade volume be the original water\n\n    # After adding 80ml of lemon juice, the ratio becomes 6:5 (lemon juice: water).\n    # This means that the ratio of lemon juice to total volume is 6/11\n\n    # Now the equation based on the total volume and ratio\n    # (x + 80) / (x + 80 + (3/2) * x) = 6 / 11\n\n    # Solve the equation for x\n    equation = Eq((x + 80) / (x + 80 + (3/2) * x), 6 / 11)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f316dc29ab1c42f6856c88cdf434b9d6": [
        "def solution():\n    return 536 - 11\n\nans = solution()"
    ],
    "30a3509e42044edda1c9958aff442893": [
        "def solution():\n    v = 3 * 6\n    return v\n\nans = solution()"
    ],
    "23588cfeb453402e8f12679dd2cc4b4d": [
        "def solution():\n    ratio_shaila = 6\n    sweets_shaila = 36\n\n    total_sweets = sweets_shaila * (5 + ratio_shaila) / ratio_shaila\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "0cbee9a5a4dd4fbe91884d23889738ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    savings = symbols('savings')\n\n    # Kim gave 1/3 of her savings to her mother\n    mother_share = savings / 3\n\n    # Kim spent 177 on dresses\n    spent_dresses = 177\n\n    # Kim spent 129 on a pair of earrings\n    spent_earrings = 129\n    \n    # The amount left is 50% of what she gave her mother\n    amount_left = mother_share / 2\n\n    # Equation based on the total savings\n    equation = Eq(savings - mother_share - spent_dresses - spent_earrings, amount_left)\n\n    # Solve for the total savings\n    solution = solve(equation, savings)\n\n    return solution[0]\n\nans = solution()"
    ],
    "2f04dfbbee9d429aa18f6c6b7716eaad": [
        "def solution():\n    total_teachers = 100\n    french_teachers = 75\n    japanese_teachers = 45\n    both_languages = french_teachers + japanese_teachers - total_teachers\n    \n    only_french = french_teachers - both_languages\n    return only_french\n\nans = solution()"
    ],
    "183382b70cca478d82e7b2a617f4c3a7": [
        "def solution():\n    usual_speed = 60\n    increased_speed = usual_speed * 1.3\n    delay_in_hours = 9 / 60\n\n    time_needed_at_usual_speed = delay_in_hours / 0.3\n    distance = usual_speed * time_needed_at_usual_speed\n\n    return distance\n\nans = solution()"
    ],
    "93c95414fb804348a0d0b204e11a3791": [
        "def solution():\n    quotient = 80\n    original_number = ((quotient * 8) + 8) / 8 - 8\n    return original_number\n\nans = solution()"
    ],
    "1f23a8cd28504dc283d3311874eb1b31": [
        "def solution():\n    # Let the number of red ropes be 'r' and the number of blue ropes be 'b'.\n    # r + b = 10, since there are a total of 10 ropes.\n    # 2r + 3b = 26, as the total length of the ropes is 26 meters.\n    # We solve these equations for 'r'.\n\n    for r in range(11): # 'r' can be from 0 to 10\n        b = 10 - r\n        if 2 * r + 3 * b == 26:\n            return r\n\nans = solution()"
    ],
    "271cac95894d444cb0e4c7e109f430e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(37 - 3 * (x + 7), 5 * x)\n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "8539d96612824e36b81b50c2b2658def": [
        "def solution():\n    skipping_rope = 40\n    long_jump = 31\n    both_events = 21\n\n    only_one_event = (skipping_rope + long_jump) - (2 * both_events)\n\n    return only_one_event\n\nans = solution()"
    ],
    "f4c49e9a21c542c0922cf3476b6075cf": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let d be the distance, v be the original speed, and t be the original time\n    d, v, t = symbols('d v t')\n\n    # From the first condition:\n    # (1 + 25/100)v * (t - 1/3) = d\n    # v * t = d\n    equation1 = Eq((v * 5 / 4) * (t - 1 / 3), d)\n    \n    # From the second condition:\n    # (v - 45) * (t * 7 / 4) = d\n    # v * t = d\n    equation2 = Eq((v - 45) * (t * 7 / 4), d)\n    \n    # Since v * t = d (time * speed = distance)\n    equation3 = Eq(v * t, d)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (d, v, t))\n\n    # Returning the distance\n    return solutions[d]\n\nans = solution()"
    ],
    "c51f49dc3f6c442eb3ffb2f4d9696fa4": [
        "def solution():\n    return 21 / 0.3\n\nans = solution()"
    ],
    "dfd8ad42f8c24fbab602cc7800828a8d": [
        "def solution():\n    total_first_half = 366\n    avg_second_half = 65\n    months_second_half = 6\n    \n    total_second_half = avg_second_half * months_second_half\n    total_year = total_first_half + total_second_half\n    \n    avg_per_month = total_year / 12\n    \n    return avg_per_month\n\nans = solution()"
    ],
    "4189a90109e9484e9780addd6b35f9fb": [
        "def solution():\n    for i in range(1, 9 * 7):  # The number of children must be less than the LCM of 7 and 9\n        if (i % 7 == 0) and (i % 9 == 2):\n            return i\n\nans = solution()"
    ],
    "c5cf05af833245899166a02b3570e548": [
        "def solution():\n    count = 0\n    for i in range(1, 22):\n        for j in range(i+1, 22):\n            if i + j == 22:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "6f8781d116474d85b94e06547f7d5416": [
        "from fractions import Fraction\n\ndef solution():\n    brownies = Fraction(1, 7)\n    cookies = Fraction(1, 14)\n    muffins = Fraction(1, 2)\n    \n    total_used = brownies + cookies + muffins\n    ans = total_used.simplify()\n    return ans\n\nans = solution()"
    ],
    "21c19bf30c9e484da5b4f34fb1840b5e": [
        "def solution():\n    for i in range(2, 42):  # Starts from 2 because 1 is a factor of all integers\n        if 41 % i == 0:\n            A = i + 41  # Smallest factor + difference = greatest factor (since A has to be greater than 41)\n            seventh_multiple = A * 7\n            break  # Break after finding the first valid A\n    return seventh_multiple\n\nans = solution()"
    ],
    "def5b3612da3468e9d98c7cc1995d2cd": [
        "def solution():\n    # Given ratio of height to width is 3:4\n    ratio_height = 3\n    ratio_width = 4\n\n    # Given height of the television screen\n    height = 21  # in cm\n\n    # Calculating width based on the height and the ratio\n    width = (height / ratio_height) * ratio_width\n\n    # Calculating perimeter of the television screen\n    perimeter = 2 * (height + width)\n\n    return perimeter\n\nans = solution()"
    ],
    "d8025a94b93345f1902df99a144007ac": [
        "def solution():\n    result = 1  # initialize result\n    for i in range(2, 12):\n        result *= (1 + 1/i)\n    return result\n\nans = solution()"
    ],
    "04961b35b9584c548a6854262aa9304c": [
        "def solution():\n    return 98 // 7\n\nans = solution()"
    ],
    "e7414af263794113add74774679c9252": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nathan, rosephine, sheena = symbols('nathan rosephine sheena')\n\n    equation1 = Eq(nathan / 2, rosephine / 5)\n    equation2 = Eq(rosephine / 5, 3 / 5 * sheena)\n    equation3 = Eq(nathan + rosephine + sheena, 780)\n\n    solutions = solve((equation1, equation2, equation3), (nathan, rosephine, sheena))\n\n    return solutions[sheena]\n\nans = solution()"
    ],
    "b648815bab0d43cd9b3f91f1c29fe90c": [
        "def solution():\n    jessie_weight = 450 / (3 - 1)\n    buzz_weight = 3 * jessie_weight\n    return buzz_weight\n\nans = solution()"
    ],
    "7f1e36d85a1d4a2f9ceb00407fbaa1e4": [
        "def solution():\n    # Let's denote the smaller number as \"x\" and the larger number as \"y\".\n    # The two equations from the problem will then be:\n    # y - x = 36 (1)\n    # x + y = 98 (2)\n    # We can solve this system of linear equations for x and y.\n    \n    # Adding equations (1) and (2):\n    # y - x + x + y = 36 + 98\n    # 2y = 134\n    # y = 134 / 2\n    y = 67\n    \n    # Now, we use equation (1) to find x:\n    # y - x = 36\n    # x = y - 36\n    x = y - 36\n    \n    return x\n\nans = solution()"
    ],
    "a6427ff471f34eac98798cb1ab5da071": [
        "def solution():\n    number = int(\"3\" * 12)\n    remainder = number % 7\n    return remainder\n\nans = solution()"
    ],
    "4e8cab6040bd40b7893c300856c19b6b": [
        "def solution():\n    first_term = 2\n    last_term = 160\n    number_of_terms = (last_term - first_term) // 2 + 1\n\n    sum_of_sequence = (first_term + last_term) * number_of_terms // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "6e24543c83134c5590295ad8804d20c1": [
        "def solution():\n    bags = 8\n    pens_per_bag = 4\n    total_pens = bags * pens_per_bag\n    return total_pens\n\nans = solution()"
    ],
    "562c0f78f4174d73bb44a0cce09887c7": [
        "def solution():\n    # Last digit of any power of 4 is always 6\n    last_digit_4 = 6\n\n    # Last digit of 7 raised to any power cycles [7, 9, 3, 1] every 4 cycles, so 7^100 last digit is 1\n    last_digit_7 = 1\n\n    # Last digit of 9 raised to any power cycles [9, 1] every 2 cycles, so 9^100 last digit is 1\n    last_digit_9 = 1\n\n    # Last digit of an odd number raised to any power cycles every 4 cycles, 11's last digit is 1, and 1 raised to any power is 1\n    last_digit_11 = 1\n\n    # Multiply last digits together to get the last digit of the full expression\n    last_digit = (last_digit_4 * last_digit_7 * last_digit_9 * last_digit_11) % 10\n\n    return last_digit\n\nans = solution()"
    ],
    "f0b605621a9e488c833ca38ce574f364": [
        "def solution():\n    ans = 18 + 17 - 16 - 15 + 14 + 13 - 12 - 11\n    return ans\n\nans = solution()"
    ],
    "1abc42cdc116468cb9f0339bff2e3acc": [
        "def solution():\n    total_questions = 60\n    correct_percentage = 70\n    correct_marks = 3\n    wrong_marks = -1\n    total_marks = 78\n\n    correct_answers = (correct_percentage / 100) * total_questions\n    wrong_answers = total_questions - correct_answers\n    \n    # Define the equation based on total marks\n    # total_marks = correct_answers * correct_marks + (wrong_answers) * wrong_marks\n    # wrong_answers in this case would be the wrong guessed questions from the correct_answers attempted\n    # since there are no negative marks for unanswered questions\n\n    for i in range(int(correct_answers) + 1):  # iterate from 0 to number of questions attempted\n        if i * correct_marks + (correct_answers - i) * wrong_marks == total_marks:\n            return i\n\nans = solution()"
    ],
    "348877530d8f4f2dbe709fa72001f569": [
        "def solution():\n    # Given that 6 files and 10 rulers cost $40\n    # Let's consider the cost of one file to be f and one ruler to be r\n    # So, 6f + 10r = 40\n    # We need to find the cost of 9 files and 15 rulers\n    # That would be 9f + 15r\n    # To find the cost of 9f + 15r, we need to manipulate the given equation\n    # If we multiply the equation by 1.5 we get:\n    # (1.5 * 6)f + (1.5 * 10)r = 1.5 * 40\n    # 9f + 15r = 60\n    # Therefore, the cost of 9 files and 15 rulers is $60\n\n    ans = 60\n    return ans\n\nans = solution()"
    ],
    "c94ef69eb1ea40b382fada9c92ec874e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let j represent Jessie's original amount of money\n    j = symbols('j')\n    # John had 5/13 of Jessie's money\n    john_money_before = (5/13) * j\n    # Jessie transferred $600 to John\n    john_money_after = john_money_before + 600\n    # After the transfer, John's money is 50% of Jessie's remaining money\n    jessie_money_after = j - 600\n    # Now John's money after transfer is equal to 50% of Jessie's money after transfer\n    equation = Eq(john_money_after, 0.5 * jessie_money_after)\n\n    # Solve for Jessie's original amount of money\n    jessie_money_before = solve(equation, j)[0]\n\n    # Calculate John's money after the transfer\n    # Calculate the total money they had together\n    total = jessie_money_before + john_money_before\n\n    return total\n\nans = solution()"
    ],
    "399a22bd96244c04ab9eff62cbee5b68": [
        "def solution():\n    # We know that the digit 1 is used 15 times and the digit 2 is used 14 times.\n    # The digits 1 and 2 will be used in the numbers 1-9 once each.\n    # Then, in the numbers 10-19, the digit 1 will be used an additional 10 times.\n    # This means we have already used the digit 1 a total of 1 (from 1-9) + 10 (from 10-19) = 11 times.\n    # We need 4 more 1's to reach 15, which means N must be at least 21.\n    # Up to 21, we've used 1 from 1-9 + 10 from 10-19 + 2 from 20 and 21 = 13 times.\n    # The pattern repeats for 22-29, but 2 is used an additional 10 times for 10-19 and an additional time for 20, 21, 22.\n    # So we've used 2 a total of 1 (from 1-9) + 10 (from 10-19) + 3 (from 20-22) = 14 times.\n    # Thus, we need to find the number that uses the last two 1's.\n    # Since we have 13 instances of 1 by the time we reach 21, the next two numbers to include the digit 1 will be 31 and 41.\n\n    N = 41  # 31 would be the 14th instance and 41 would be the 15th instance of digit 1.\n    return N\n\nans = solution()"
    ],
    "a848bdfd5ea34a9ebb4eb13e5c8f9d6f": [
        "from datetime import datetime\n\ndef solution():\n    format_str = '%H:%M'  # The format\n\n    time_in = datetime.strptime('10:30', format_str)\n    time_out = datetime.strptime('11:00', format_str)\n\n    baking_time = time_out - time_in\n\n    return baking_time.total_seconds() / 60  # Convert the time difference to minutes\n\nans = solution()"
    ],
    "a6ce7d2ec26147f4873239aa9574bc39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables for the number of T-shirts and caps\n    t_shirts, caps = symbols('t_shirts caps')\n    \n    # Create the equation based on the ratio of T-shirts to caps\n    ratio_equation = Eq(t_shirts / caps, 8 / 5)\n    \n    # Calculate the number of T-shirts and caps sold using the given fractions\n    t_shirts_sold = t_shirts / 4\n    caps_sold = caps / 5\n    \n    # Create the equation based on the total cost collected\n    cost_equation = Eq(3 * t_shirts_sold + 5 * caps_sold, 132)\n    \n    # Solve the equations for the number of T-shirts and caps\n    solutions = solve((ratio_equation, cost_equation), (t_shirts, caps))\n    \n    return solutions[t_shirts]\n\nans = solution()"
    ],
    "a31cae71b18e4581ac44ea1064373892": [
        "def solution():\n    cost_bananas = 3 * 12  # total cost of bananas in pence\n    cost_apples = 5 * 11   # total cost of apples in pence\n    total_cost = cost_bananas + cost_apples  # total cost in pence\n    change_in_pence = 200 * 100 - total_cost  # convert £2 to pence and subtract total cost\n    change_in_pounds = change_in_pence / 100  # convert change back to pounds\n\n    return change_in_pounds\n\nans = solution()"
    ],
    "6c88703393b945c0b0bfae7254353841": [
        "def solution():\n    youngest_age = 7\n    difference = 2\n    number_of_children = 7\n    harvir_position = number_of_children - 1\n    harvir_age = youngest_age + harvir_position * difference\n    return harvir_age\n\nans = solution()"
    ],
    "a4d1fe51e51644a68d34267f1c2f5275": [
        "def solution():\n    calendar_price = 6.97\n    ball_price = 2.99\n\n    total_spent = calendar_price + ball_price\n\n    return total_spent\n\nans = solution()"
    ],
    "e44878f3a4c142f6a0f13947c2b24159": [
        "def solution():\n    flour_left = 360 / 1000  # Convert grams to kilograms\n    flour_used = (1/5) + (1/2)  # Sum of flour used for muffins and cookies in kilograms\n\n    initial_flour = flour_left + flour_used  # Total initial amount of flour\n\n    return initial_flour\n\nans = solution()"
    ],
    "c578c0aa1c3c4f668b3e35402f2a9536": [
        "def solution():\n    # Let x be the number of oranges and y be the number of lemons.\n    # Since each orange costs 26p and each lemon costs 30p,\n    # we have the equations: 26x + 30y = 500 (since 1 pound is 100p and he spent 5 pounds)\n    \n    # Initialize the number of ways to 0\n    ways = 0\n    \n    # We will iterate over the possible number of oranges (x)\n    # Since he cannot spend more than 500p, the maximum number of oranges he can buy is 500p/26p\n    for x in range(0, 500 // 26 + 1):\n        # For each x, we calculate the possible y\n        y = (500 - 26 * x) / 30\n        # If y is an integer, this is a valid combination\n        if y.is_integer():\n            ways += 1\n            oranges = x\n            lemons = int(y)\n            break  # Since we only need to find one solution\n    \n    return oranges + lemons\n\nans = solution()"
    ],
    "cd2ade63fdb943c2be635c4890f7b39f": [
        "def solution():\n    from math import factorial\n    return factorial(4 - 1)\n\nans = solution()"
    ],
    "0bc58aa125af4c5da502baffb301c81e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_eggs = symbols('original_eggs')\n\n    equation = Eq(original_eggs + 24, 3 * original_eggs)\n\n    solutions = solve(equation, original_eggs)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "e63df9e57c014a358e54d2a32b1e30ef": [
        "def solution():\n    def delta(a, b):\n        return 3 * a + 2 * b\n\n    def star(a, b):\n        return 3 * a - 2 * b\n\n    ans = delta(star(delta(3, 4), 5), 6)\n    return ans\n\nans = solution()"
    ],
    "297ef73642eb4bb7bc9c876f32b727e7": [
        "def solution():\n    count = 0\n    for i in range(1, 441):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "f96223372da84682a7c29924dbb659bb": [
        "def solution():\n    cookies = 298\n    box_capacity = 8\n    boxes_needed = (cookies + box_capacity - 1) // box_capacity\n    return boxes_needed\n\nans = solution()"
    ],
    "36563a3f9be64d47a2d4bd411b572cae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the number of female visitors on the first day as f and male as m\n    f, m = symbols('f m')\n    \n    # From the problem's description, we have two equations:\n    # On the first day, the number of male visitors was 450 more than the number of female visitors\n    eq1 = Eq(m, f + 450)\n    \n    # On the second day, the total number of visitors is 1354\n    # Female visitors increased by 15% and male visitors decreased by 18%\n    eq2 = Eq((f * 1.15) + (m * 0.82), 1354)\n    \n    # Now we solve these equations to find the number of female and male visitors\n    solutions = solve((eq1, eq2), (f, m))\n    \n    # Total number of visitors on the first day\n    total_first_day = solutions[f] + solutions[m]\n    \n    return total_first_day\n\nans = solution()"
    ],
    "5ee47aa9d6ab43b487b000bf91697924": [
        "def solution():\n    n = (10 - 5) / 2\n    return n\n\nans = solution()"
    ],
    "74eeba4eef5b4ec989b3c5c3a572e887": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    leo, jason = symbols('leo jason')\n\n    equation1 = Eq(leo, jason + 220)\n    equation2 = Eq(jason * 2, leo + 180 + 1100)\n\n    solutions = solve((equation1, equation2), (leo, jason))\n\n    return solutions[jason]\n\nans = solution()"
    ],
    "21668aad8ae540c3af86ad2cada5fa45": [
        "from math import factorial\n\ndef solution():\n    total_books = 3 + 4 + 2 + 2\n    biographies = 3\n    scifi = 4\n    magazines = 2\n    schoolbooks = 2\n    \n    total_ways = factorial(total_books) // (factorial(biographies) * factorial(scifi) * factorial(magazines) * factorial(schoolbooks))\n    \n    return total_ways\n\nans = solution()"
    ],
    "302fe51df29b42d5b5c26676941903eb": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 5):\n        A, B, C, D, E = perm\n        if A == 0:  # As EFCBH is a number, it cannot start with 0\n            continue\n        sum_1 = E + 10*F + 100*C + 1000*B + 10000*H\n        sum_2 = 4 * (E + 10*D + 100*C + 1000*B + 10000*A)\n        if sum_1 == sum_2:\n            return sum_1\n\nans = solution()"
    ],
    "6c0f20194f4d43c694fdc3e29818292c": [
        "def solution():\n    # Note that the problem equivalent to finding the number of solutions to the equation:\n    # x1 + x2 + x3 = 7, where x1, x2, x3 are non-negative integers.\n    # This is a classic \"stars and bars\" problem (balls-and-urns), where we have to place two bars in between the seven stars.\n    # Number of ways to place two bars in between seven stars is (7 + 3 - 1) choose (3 - 1) = 9 choose 2\n\n    from math import comb\n\n    ans = comb(7 + 3 - 1, 3 - 1)\n\n    return ans\n\nans = solution()"
    ],
    "2cbac0435d3842e0a32ebcb7823538b7": [
        "def solution():\n    robots_per_day = 347\n    days_in_week = 7\n\n    total_robots = robots_per_day * days_in_week\n\n    return total_robots\n\nans = solution()"
    ],
    "f005eeb563694763b1cfdaeee89b1c28": [
        "def solution():\n    starting_number = 345\n    countdown = 9\n    last_positive_number = starting_number % countdown\n    \n    return last_positive_number if last_positive_number != 0 else countdown\n\nans = solution()"
    ],
    "0dba6392fb4849a0b274002c4f736054": [
        "def solution():\n    total_cost = 3_000_000  # 3 million pounds\n    number_of_friends = 5\n\n    cost_per_friend = total_cost / number_of_friends\n\n    return cost_per_friend\n\nans = solution()"
    ],
    "9322b5fd8c0f4ef49dbb6806c5d58465": [
        "def solution():\n    total_sum = 555\n    price_without_name = 10\n    price_with_name = 15\n\n    # Let x be the number of children who paid to have their name put on the shirts\n    # Then (50 - x) is the number of children who paid without having their name put on the shirts\n    # The total sum paid is a combination of both types: \n    # price_with_name * x + price_without_name * (50 - x) = total_sum\n    # We solve for x to find the answer.\n\n    # Form the equation based on the above description\n    x = (total_sum - price_without_name * 50) / (price_with_name - price_without_name)\n\n    return int(x)\n\nans = solution()"
    ],
    "4b392afd5d974f1c924defced1ff9b83": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Variables: t1 - time walking at original speed, t2 - time walking at increased speed\n    t1, t2 = symbols('t1 t2')\n\n    # Equations based on the problem statement\n    equation1 = Eq(150 * t1 + (150 + 50) * t2, 3700)  # total distance equation\n    equation2 = Eq(t1, t2 + 10) # since David walks at the original speed for 10 more minutes\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (t1, t2))\n    \n    # Total time spent walking is the sum of times spent walking at both speeds\n    total_time = solutions[t1] + solutions[t2]\n\n    return total_time\n\nans = solution()"
    ],
    "fa72055fad084ab58ad10b1fda0c68de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    male_visitors_first_day, female_visitors_first_day = symbols('male_visitors_first_day female_visitors_first_day')\n    \n    # male_visitors_first_day = female_visitors_first_day + 450 (from the first condition)\n    equation1 = Eq(male_visitors_first_day, female_visitors_first_day + 450)\n    # On the second day, use 1.15 for a 15% increase and 0.82 for an 18% decrease\n    # The total number of visitors (male + female) on the second day was 1354\n    equation2 = Eq(female_visitors_first_day * 1.15 + male_visitors_first_day * 0.82, 1354)\n    \n    solutions = solve((equation1, equation2), (male_visitors_first_day, female_visitors_first_day))\n    \n    return solutions[male_visitors_first_day]\n\nans = solution()"
    ],
    "a20cb097c8264920ad40461d2d3be9bd": [
        "def solution():\n    return 2**(len(bin(40)) - 3)\n\nans = solution()"
    ],
    "2cf10171726c4ba39f1ef12370d42497": [
        "def solution():\n    # Singapore is 7 hours ahead of London.\n    time_difference = 7\n\n    # Singapore local time of taking off\n    singapore_takeoff = 5\n\n    # London local time of landing\n    london_landing = 11\n\n    # Calculating the London time when the plane took off\n    # if Singapore local time is 5:00, then London local time would be 5 - 7 = 22:00 on the previous day\n    london_takeoff = singapore_takeoff - time_difference\n    if london_takeoff < 0:\n        london_takeoff += 24\n\n    # Calculating flight duration\n    # We assume that the flight did not last more than 24 hours\n    if london_landing < london_takeoff:\n        london_landing += 24\n\n    flight_duration = london_landing - london_takeoff\n\n    return flight_duration\n\nans = solution()"
    ],
    "47a4f2843f6546ecafe1fb93a795ff45": [
        "def solution():\n    from math import factorial\n\n    def permutations(n, k):\n        return factorial(n) // factorial(n - k)\n\n    num_hearts = 4\n    num_spades = 3\n    num_diamonds = 7\n    total_cards = num_hearts + num_spades + num_diamonds\n\n    total_permutations = factorial(total_cards)\n    permutations_hearts = factorial(num_hearts)\n    permutations_spades = factorial(num_spades)\n    permutations_diamonds = factorial(num_diamonds)\n\n    ans = total_permutations // (permutations_hearts * permutations_spades * permutations_diamonds)\n\n    return ans\n\nans = solution()"
    ],
    "2cf16071a494408aa27882168fe6226a": [
        "def solution():\n    first_digit = 5  # Smallest multiple of 5\n    second_digit = 1  # Smallest odd number among natural numbers\n    third_digit = 9  # Largest odd single digit\n    fourth_digit = 2  # Smallest even number in nature\n    fifth_digit = 8  # Largest single digit that is a multiple of 2\n    sixth_digit = 3  # Smallest odd number greater than 1 in nature\n    seventh_digit = 0  # Multiple of 2 and 5\n\n    ans = (first_digit, second_digit, third_digit, fourth_digit, fifth_digit, sixth_digit, seventh_digit)\n    return ans\n\nans = solution()"
    ],
    "b2512ca447d44ce79e7439b887e4b561": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jon, miguel = symbols('jon miguel')\n\n    equation1 = Eq(jon, miguel + 0.3 * miguel)\n    equation2 = Eq(jon + miguel, 46)\n\n    solutions = solve((equation1, equation2), (jon, miguel))\n\n    return solutions[jon]\n\nans = solution()"
    ],
    "bb60d9d026a3416baa2d8cced7ed7efa": [
        "def solution():\n    total_pages_read_before_last_day = 0\n    pages_read = 20\n    while True:\n        total_pages_read_before_last_day += pages_read\n        pages_read += 5\n        if total_pages_read_before_last_day + pages_read >= 80:\n            break\n    total_pages = total_pages_read_before_last_day + 80\n    return total_pages\n\nans = solution()"
    ],
    "2089b724a45c4ed988606f4860fbeb30": [
        "from fractions import Fraction\n\ndef solution():\n    weight_almonds = Fraction(4, 9)\n    weight_cashews = Fraction(1, 3)\n    difference = weight_almonds - weight_cashews\n    \n    return difference\n\nans = solution()"
    ],
    "0dc187974a4f4bdc885566505c9ca033": [
        "def solution():\n    dividend = 9 * 4 + 2  # Reverse operation to find the original number\n    divisor = 4\n    quotient, remainder = divmod(dividend, divisor)\n\n    incorrect_step = \"9 * 2\"\n    correct_multiply = 9 * 4\n    correct_step = \"{} + 2\".format(correct_multiply)\n    final_answer = correct_multiply + 2\n\n    is_correct = (incorrect_step == correct_step)\n    \n    return (is_correct, final_answer)\n\nans = solution()"
    ],
    "05e8386eec1a4686bcceefeeec0da532": [
        "def solution():\n    sum_positives = sum(range(4, 55, 4))  # Sum of positive terms\n    sum_negatives = sum(range(2, 51, 4))  # Sum of negative terms\n    ans = sum_positives - sum_negatives\n    return ans\n\nans = solution()"
    ],
    "33806102632247718f0ca6cc3c4ae3cd": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 6), (4, 7), (1, 8)]\n    remainder, modulus = solve_congruence(*congruences)\n    return remainder\n\nans = solution()"
    ],
    "97ff1c826b9449ebba306715644e00d7": [
        "def solution():\n    from itertools import permutations\n    \n    for p in permutations(range(10), 5):\n        S, A, M, O, G = p\n        if S == 0 or G == 0:  # S and G can't be zero, as they are the first digits\n            continue\n        SASMO = 10000 * S + 1000 * A + 100 * S + 10 * M + O\n        OGAMS = 10000 * O + 1000 * G + 100 * A + 10 * M + S\n        if SASMO * 4 == OGAMS:\n            return SASMO\n\nans = solution()"
    ],
    "5f83a7f525c2424e93dbfaca3c6f9265": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys = symbols('boys')\n    girls = Eq(40 - boys)  # since the total number of boys and girls is 40\n\n    equation1 = Eq(boys * 4 - (40 - boys) * 3, 62)\n\n    solutions = solve((equation1, girls), boys)\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "d8f72795c5214d67bdae537f6f2294cc": [
        "def solution():\n    # Initialize the sequence list\n    sequence = []\n    # Fill the sequence with numbers according to the pattern until the first 11 appears\n    for i in range(1, 12):  # 11 is the last number to check for\n        sequence.extend([i] * i)  # Extend the list by repeating the current number i times\n    \n    # Since the sequence is sorted, we can find the median easily\n    n = len(sequence)\n    if n % 2 == 1:\n        # If the number of elements is odd, the median is the middle element\n        ans = sequence[n // 2]\n    else:\n        # If the number of elements is even, the median is the average of the two middle elements\n        ans = (sequence[(n // 2) - 1] + sequence[n // 2]) / 2\n    \n    return ans\n\nans = solution()"
    ],
    "9764b7f8732540ffab94bb9e73235bfc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables\n    cut_length = symbols('cut_length')\n    \n    # Define the equation based on the problem statement\n    equation = Eq((65 - cut_length), 3 * (29 - cut_length))\n    \n    # Solve the equation\n    cut_length_value = solve(equation, cut_length)\n    \n    return cut_length_value[0]\n\n# Call the function to obtain ans\nans = solution()"
    ],
    "58b52e2f938546e89e5a64e5f2bf4334": [
        "def solution():\n    total_rolls = 30\n    probability_of_5 = 1/6\n\n    expected_number_of_5s = total_rolls * probability_of_5\n\n    return expected_number_of_5s\n\nans = solution()"
    ],
    "645b71623d4d4b11a64007d32b21db61": [
        "def solution():\n    return 345 * 4\n\nans = solution()"
    ],
    "627fc9344fb748cca98e15cf87d2083a": [
        "def solution():\n    ans = 15 / 0.05\n    return ans\n\nans = solution()"
    ],
    "4f46c32b143a401aafbf4d6ead565a65": [
        "def solution():\n    num = 12 * 6 // 18\n    return num\n\nans = solution()"
    ],
    "8cc478711c8f4086b30df7455059147a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for A, B, and C\n    A, B, C = symbols('A B C')\n    \n    # The given ratios\n    ratio1 = Eq(A/B, 2/3)\n    ratio2 = Eq(B/C, 6/5)\n    \n    # The given average of A, B and C\n    average_eq = Eq((A + B + C)/3, 45)\n    \n    # Solve the system of equations\n    solutions = solve((ratio1, ratio2, average_eq), (A, B, C))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "8cf1dcd99c234fe3bed14598d82e6dbf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    total_cost_dresses = 6 * 7 * x\n    total_cost_skirts = 3 * 35\n    total_spent = 441\n\n    equation = Eq(total_cost_dresses + total_cost_skirts, total_spent)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a9763e974eea446e92026fb8477bfbd4": [
        "def solution():\n    odd_digits_count = len([1, 3, 5, 7, 9])  # There are 5 odd digits: 1, 3, 5, 7, 9\n    ans = odd_digits_count * odd_digits_count * odd_digits_count  # 3 positions each can be any of the 5 odd digits\n    return ans\n\nans = solution()"
    ],
    "60f6f205ec4c40bb89204475765d9532": [
        "def solution():\n    ans = 5 * 7 * 8\n    return ans\n\nans = solution()"
    ],
    "aa5f85b2df7440f382a1edca655a0195": [
        "def solution():\n    # The pattern for the numerator is always 1 less than the denominator in the general term\n    # So k = 2011 in this case, since we have up to 1/(2011*2012) and the fraction reduces to k/(k+1)\n    return 2011\n\nans = solution()"
    ],
    "bc1425cad1954c489bb66ff166a40ad5": [
        "def solution():\n    remainder_sum = 0\n    for i in range(1, 1000, 2):\n        remainder_sum += (i**2) % 3\n    return remainder_sum % 3\n\nans = solution()"
    ],
    "d1aea7f5923c41419c0a7f013a821868": [
        "def solution():\n    # Let l and w be the length and width of the original rectangle, respectively\n    # The length of the new rectangle is l + 12\n    # The perimeter of the new rectangle is 2(l + 12) + 2w = 38\n    # Thus, we can write the equation for the perimeter:\n    # 2l + 24 + 2w = 38\n    # Simplifying, we have 2l + 2w = 38 - 24\n    # 2l + 2w = 14\n    # The perimeter of the original rectangle is 2l + 2w\n    # Hence, the perimeter of the original rectangle is 14 cm.\n\n    original_perimeter = 14\n    return original_perimeter\n\nans = solution()"
    ],
    "b3933f96a6f64df2937f9504f73d4f93": [
        "def solution():\n    nell_ratio = 4\n    joe_ratio = 5\n    \n    nell_sweets = 24\n    total_sweets = (nell_sweets * (nell_ratio + joe_ratio)) // nell_ratio\n    \n    return total_sweets\n\nans = solution()"
    ],
    "46886e982cd848a7abf837e5973c5ae7": [
        "def solution():\n    baby_chickens = 270\n    hens = (8/9) * baby_chickens\n    roosters = (1/4) * hens\n\n    return int(roosters)\n\nans = solution()"
    ],
    "5c4786655fca473fb242916467fa9779": [
        "def solution():\n    first_term = 2\n    difference = 4\n    n = 11\n\n    n_term = first_term + (n - 1) * difference\n\n    return n_term\n\nans = solution()"
    ],
    "1af1519ce39648a5a5a614d850ea16ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let ja and na be the number of stamps Jamie-Anne and Natasha have, respectively\n    ja, na = symbols('ja na')\n\n    # equation based on the ratio 5:3\n    equation1 = Eq(ja/na, 5/3)\n\n    # equation based on the information that Jamie-Anne has 18 more stamps\n    equation2 = Eq(ja - na, 18)\n\n    # solving equations\n    solutions = solve((equation1, equation2), (ja, na))\n\n    # total number of stamps\n    total_stamps = solutions[ja] + solutions[na]\n    \n    return total_stamps\n\nans = solution()"
    ],
    "7fafcabd4a364cf7a536efe02bf4be6e": [
        "def solution():\n    for a in range(1, 10):  # a cannot be 0 because it is the first digit of a two-digit number\n        for b in range(0, 10):  # b can range from 0 to 9\n            ab = 10 * a + b\n            ba = 10 * b + a\n            aab = 100 * a + 10 * a + b\n            if ab + ba + b == aab:\n                return a + b\n\nans = solution()"
    ],
    "563e040a6b604c99be6f021744a72867": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let 's' be the number of coins Sana had and 'm' be the number of coins Mina had.\n    s, m = symbols('s m')\n    \n    # The total number of coins initially was 234\n    equation1 = Eq(s + m, 234)\n    \n    # Sana had 8 times as many coins as Mina initially\n    equation2 = Eq(s, 8 * m)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (s, m))\n    \n    # Mina gave away 12 coins\n    mina_coins_left = solutions[m] - 12\n    \n    return mina_coins_left\n\nans = solution()"
    ],
    "61a8f774aec24308b2fbbb6d4c4052db": [
        "def solution():\n    total_grapes = 210\n    sold_monday = (3 / 7) * total_grapes\n    remaining_after_monday = total_grapes - sold_monday\n    sold_tuesday = (3 / 8) * remaining_after_monday\n    remaining_after_tuesday = remaining_after_monday - sold_tuesday\n    bag_weight = 3 / 4\n    num_bags = remaining_after_tuesday / bag_weight\n    \n    return int(num_bags)\n\nans = solution()"
    ],
    "6c63ea0de1a8415980442a6c8569fc9d": [
        "def solution():\n    students = 123\n    flour_per_student = 142\n    total_flour = students * flour_per_student\n    return total_flour\n\nans = solution()"
    ],
    "2f8eea7d70d643d9a9a6d7959dcc5596": [
        "def solution():\n    first_term = 81\n    common_difference = 75 - 81\n    term_index = 11\n\n    eleventh_term = first_term + (term_index - 1) * common_difference\n\n    return eleventh_term\n\nans = solution()"
    ],
    "e01a60afedfc47728af6bf6cd42afab2": [
        "def solution():\n    pence_in_pound = 100\n    amount_in_pence = 15\n    total_amount_in_pounds = 3.00\n    total_amount_in_pence = total_amount_in_pounds * pence_in_pound\n\n    percentage = (amount_in_pence / total_amount_in_pence) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "7d339ab0e49d487d82f990bb57b18e62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of days it takes for the lazy one to paint the house on their own\n    x = symbols('x')\n\n    # The energetic one can paint 1/12 of the house per day on their own\n    energetic_rate = 1 / 12\n\n    # If we do not know the rate of the lazy one, we represent it as 1/x\n    lazy_rate = 1 / x\n\n    # Working together, they can paint 1/8 of the house per day\n    combined_rate = 1 / 8\n\n    # Equation representing the combined work rate of both decorators working together\n    equation = Eq(energetic_rate + lazy_rate, combined_rate)\n\n    # Solve for x (the number of days it takes for the lazy one to paint the house on their own)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a2b6115aec834dc68138160027844aaa": [
        "def solution():\n    count = 0\n    for i in range(1, 121):\n        count += str(i).count('7')\n    return count\n\nans = solution()"
    ],
    "53cbd8fd0f77499fb24e88ab3dcaacba": [
        "def solution():\n    time_for_10_lamp_posts = 50\n    time_for_80_seconds = 80\n    # Counting both the first and the eleventh lamp post\n    lamp_posts_for_10 = 11\n    # The rate at which he cycles past lamp posts\n    lamp_posts_per_second = lamp_posts_for_10 / time_for_10_lamp_posts\n    # How many he will cycle past after 80 seconds, plus the first lamp post\n    lamp_posts_after_80 = time_for_80_seconds * lamp_posts_per_second + 1\n    return int(lamp_posts_after_80)\n\nans = solution()"
    ],
    "8626a5ac5cd849a99b266ae11eb763c0": [
        "def solution():\n    # There are flowers at the corners, and they are shared by the sides.\n    # To avoid counting corner flowers multiple times, we subtract the number of corners from the total number of flowers.\n    \n    flowers_per_side = 6\n    number_of_sides = 4\n    corners = 4\n\n    total_flowers = flowers_per_side * number_of_sides - (corners - 1) * (number_of_sides - 1)\n    \n    return total_flowers\n\nans = solution()"
    ],
    "89b9c39288374835a4dd1f8d8af530fd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_items = symbols('total_items')\n\n    apples_fraction = 2/3\n    bananas_fraction = 1/9\n    lemons_fraction = 1 - (apples_fraction + bananas_fraction)\n\n    apples = apples_fraction * total_items\n    lemons = lemons_fraction * total_items\n\n    # 12 more apples than lemons\n    equation = Eq(apples - lemons, 12)\n\n    total_items_solution = solve(equation, total_items)\n\n    lemons_count = lemons_fraction * total_items_solution[0]\n\n    return lemons_count\n\nans = solution()"
    ],
    "7cec8a1b08d943669b99d263f87e4fa6": [
        "def solution():\n    original_price = 80 + 20\n    discount = 20\n    discount_percent = (discount / original_price) * 100\n    return discount_percent\n\nans = solution()"
    ],
    "2b8a88ca5fe7429ea82c73c3b8990e1b": [
        "def solution():\n    # Digit in the hundreds place is 8 (since its value is 800)\n    hundreds_digit = 8\n\n    # The digit in the ones place is the sum of all the factors of 4\n    factors_of_4 = [1, 2, 4]\n    ones_digit = sum(factors_of_4)\n\n    # The digit in the thousands place is 1 more than the digit in the hundreds place\n    thousands_digit = hundreds_digit + 1\n\n    # The digit in the tens place is the difference between the digit in the hundreds place and the digit in the ones place\n    tens_digit = hundreds_digit - ones_digit\n    \n    # Construct the 5-digit number\n    number = 40000 + thousands_digit * 1000 + hundreds_digit * 100 + tens_digit * 10 + ones_digit\n    \n    return number\n\nans = solution()"
    ],
    "44e8dcc102494f3192e7ebf223ca7d90": [
        "def solution():\n    ans = 6 - 18\n    return ans\n\nans = solution()"
    ],
    "9eb437e49efd42d88c006e74f9099f07": [
        "def solution():\n    basketball_court_length = 25\n    football_field_extra_length = 56\n    football_field_length = basketball_court_length + football_field_extra_length\n    \n    return football_field_length\n\nans = solution()"
    ],
    "7c04260dcb0743288f345e79968829c7": [
        "def solution():\n    original_price = 60 / (1 - 0.20)\n    ana_discount = 1 - (67.50 / original_price)\n    ana_discount_percentage = ana_discount * 100\n\n    return ana_discount_percentage\n\nans = solution()"
    ],
    "3fe7176a573649c389081f702880fe81": [
        "from fractions import Fraction\n\ndef solution():\n    smallest_s = None\n    for s in range(1, 1000):  # Setting a reasonable upper bound for search\n        for r in range(1, s):\n            frac = Fraction(r, s)\n            if Fraction(3, 10) < frac < Fraction(5, 16):\n                if smallest_s is None or s < smallest_s:\n                    smallest_s = s\n                    break  # Breaks out of inner loop as we found a valid r for this s\n        if smallest_s is not None:\n            break  # Breaks out of outer loop as we found the smallest s\n    return smallest_s\n\nans = solution()"
    ],
    "f21830983a5f48e28095fe2ece3c5a85": [
        "def solution():\n    first_day = 300\n    second_day = 250\n    part_of_total = 5 / 6\n\n    total_steering_wheels = (first_day + second_day) / part_of_total\n\n    return int(total_steering_wheels)\n\nans = solution()"
    ],
    "278081b797fb4ba488225b7671c17347": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12*x - (7*x + 9), 1)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "439fae9a23bb4288adfdb67093fcdb41": [
        "def solution():\n    total_children_capacity = 40\n    total_adult_capacity = 24\n    children_on_bus = 15\n\n    # Remaining capacity for children\n    remaining_children_capacity = total_children_capacity - children_on_bus\n\n    # Convert remaining capacity for children to adult capacity using equivalent substitution\n    # Since 40 children is equivalent to 24 adults, then 1 child is equivalent to 24/40 adults\n    remaining_adult_capacity = remaining_children_capacity * (total_adult_capacity / total_children_capacity)\n\n    # The greatest number of adults has to be an integer because we cannot have a fraction of an adult\n    max_adults_on_bus = int(remaining_adult_capacity)\n\n    return max_adults_on_bus\n\nans = solution()"
    ],
    "485363fa5d114e10aa5193dda256cebb": [
        "def solution():\n    from sympy import factorint, sqrt\n\n    factors = factorint(28)\n    multipliers = 1\n    for prime, exponent in factors.items():\n        if exponent % 2 != 0:\n            multipliers *= prime\n\n    return multipliers\n\nans = solution()"
    ],
    "15ed9cc3ded941faafa1ff286a405f77": [
        "def solution():\n    pancakes_per_3_minutes = 2\n    total_minutes = 12\n    pancakes_in_12_minutes = (pancakes_per_3_minutes / 3) * total_minutes\n    return int(pancakes_in_12_minutes)\n\nans = solution()"
    ],
    "9b046c316f30464f8998d4a3f5a6db6b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 - x, 5*x - 8)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f7fa4272e23e482598b3fd2264f07a29": [
        "def solution():\n    tri_op = lambda a, b: (a + 2) / b\n    return tri_op(8, tri_op(6, 4))\n\nans = solution()"
    ],
    "78cc1f0029db4e2baf026af900879af7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    russell_current_age = symbols('russell_current_age')\n    \n    future_age = russell_current_age + 32\n    past_age = russell_current_age - 16\n    \n    equation = Eq(future_age, 4 * past_age)\n    \n    age_solution = solve(equation, russell_current_age)\n    \n    return age_solution[0]\n\nans = solution()"
    ],
    "d0e55b24b2d94a99a067394ed0971714": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    salary = symbols('salary')\n\n    # Mr Krishnan spent $740\n    remaining_after_dvd = salary - 740\n\n    # Then, he spent 3/4 of the remaining money on a television set\n    remaining_after_tv = remaining_after_dvd - (3/4) * remaining_after_dvd\n\n    # Finally, he had 1/5 of his salary left\n    equation = Eq(remaining_after_tv, (1/5) * salary)\n\n    # Solve the equation\n    solved_salary = solve(equation, salary)\n\n    return solved_salary[0]\n\nans = solution()"
    ],
    "aa03a281d4d94018a0064e56c41ee496": [
        "def solution():\n    return 1.3 - 0.02\n\nans = solution()"
    ],
    "bdd4de642a694795bd55c992b23b3398": [
        "def solution():\n    percentage = 40 / 100\n    number = 120\n    result = percentage * number\n    return result\n\nans = solution()"
    ],
    "18b8daa61603447d8022fd9b8bc02b69": [
        "def solution():\n    # Directly opposite in a circle means half the circumference of the circle.\n    # The difference between the two numbers (19 - 6) must be half the number of people.\n    difference = 19 - 6\n    total_people = difference * 2\n    return total_people\n\nans = solution()"
    ],
    "f7751c2233f24b7d9dbfbe6d168ddef9": [
        "def solution():\n    for A in range(1, 10):  # A cannot be 0 because it's the thousands digit\n        for B in range(10):  # B can be any digit from 0 to 9\n            for C in range(10):  # C can be any digit from 0 to 9\n                Pips_number = A * 1000 + B * 100 + C * 10 + A\n                Buds_number = A * 1000 + C * 100 + B * 10 + A\n                if Pips_number + Buds_number == 5510:\n                    return Pips_number\n\nans = solution()"
    ],
    "fd624218613f48f49c62fe0c615eab9a": [
        "def solution():\n    # Assuming a is the number of students initially in Class 6A\n    # Assuming b is the number of students initially in Class 6B\n    # a = (4/9) * b [Given condition]\n    # After the reshuffling:\n    # (a + 18) - 3 = (b - 18) + 3\n    # which simplifies to:\n    # a + 15 = b - 15\n    # Given that a = (4/9) * b, substitute a in the second equation:\n    # (4/9) * b + 15 = b - 15\n    # Solving for b we get:\n    b = 45  # This value will be derived from algebraic manipulation\n    a = (4/9) * b  # Calculate initial value of a based on b\n\n    return a\n\nans = solution()"
    ],
    "311137556c874d4bb13b99f9b5117222": [
        "def solution():\n    # It takes 2 minutes to make 1 cut which results in 2 pieces\n    # To make 5 pieces, he must make 4 cuts\n    num_cuts_needed = 5 - 1\n    time_per_cut = 2\n    total_time = num_cuts_needed * time_per_cut\n    return total_time\n\nans = solution()"
    ],
    "64da3536e459433ea4a1e1ffe0974428": [
        "def solution():\n    total_students = 35\n    num_sizes = 3\n    \n    min_students_same_size = (total_students + num_sizes - 1) // num_sizes\n\n    return min_students_same_size\n\nans = solution()"
    ],
    "0574b4ea3bce459692a79ced3c88cee6": [
        "def solution():\n    total_shelves = 15\n    total_spelling_books = 72\n    spelling_books_per_shelf = 9\n\n    # Calculate how many shelves are filled with spelling books\n    shelves_with_spelling_books = total_spelling_books // spelling_books_per_shelf\n\n    # Remaining shelves will have math books\n    shelves_with_math_books = total_shelves - shelves_with_spelling_books\n\n    # Each shelf with math books contains 4 math books\n    math_books_per_shelf = 4\n\n    # Calculate the total number of math books\n    total_math_books = shelves_with_math_books * math_books_per_shelf\n\n    return total_math_books\n\nans = solution()"
    ],
    "295414faedcc466dba1a6853455af3c4": [
        "def solution():\n    time_for_3_floors = 6\n    floors_climbed = 3\n    total_floors_to_climb = 9\n\n    time_per_floor = time_for_3_floors / floors_climbed\n    total_time = time_per_floor * total_floors_to_climb\n\n    return total_time\n\nans = solution()"
    ],
    "ec4f8ef8e4e24394bc6bbee281e961db": [
        "def solution():\n    original_chocolate = 40\n    original_biscuits = 100\n    available_biscuits = 75\n\n    chocolate_to_use = (available_biscuits * original_chocolate) / original_biscuits\n\n    return chocolate_to_use\n\nans = solution()"
    ],
    "965c2ac5dad34d4fa1d38ad774207e9a": [
        "def solution():\n    ans = 3 + 2 * 5\n    return ans\n\nans = solution()"
    ],
    "ca4820ab45754f35b7d59a04967d1276": [
        "def solution():\n    average_daily_earnings = 90\n    days_in_a_week = 7\n    total_earnings = average_daily_earnings * days_in_a_week\n    return total_earnings\n\nans = solution()"
    ],
    "f5f0fa861ee84ff5baf0932a2cdd79df": [
        "def solution():\n    luna_flowers = 15\n    harry_flowers = luna_flowers - 3\n    return harry_flowers\n\nans = solution()"
    ],
    "065ea362f1f84acd909b64af10328dd1": [
        "def solution():\n    pasta_choices = 2\n    sauce_choices = 3\n    topping_choices = 2\n\n    total_combinations = pasta_choices * sauce_choices * topping_choices\n    return total_combinations\n\nans = solution()"
    ],
    "1bee8ef3713140f195baa78f51579340": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    n = symbols('n')\n    equation = Eq(32 / n, n / 2)\n    \n    ans = solve(equation, n)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "ed4d903eb27d49279a669eb29f697081": [
        "def solution():\n    # Initial condition\n    initial_opposite = 16\n    \n    # Final condition after more students join\n    final_opposite = 22\n    \n    # The 8th student is directly opposite to the 16th in the initial setup.\n    # That means there are (16 - 8) * 2 students in total initially.\n    initial_total_students = (initial_opposite - 8) * 2\n    \n    # After more students join, the 8th is directly opposite to the 22nd.\n    # That means there are (22 - 8) * 2 students in total finally.\n    final_total_students = (final_opposite - 8) * 2\n    \n    # The number of new students is the difference in the number of students\n    new_students = final_total_students - initial_total_students\n\n    return new_students\n\nans = solution()"
    ],
    "b096b994b81c439089e43a5964dae9ae": [
        "def solution():\n    # Distance covered in each stage\n    distance_stage_1 = 280\n    distance_stage_2 = 400\n    distance_stage_3 = 800 - (distance_stage_1 + distance_stage_2)\n\n    # Speed in each stage\n    speed_stage_1 = 7\n    speed_stage_2 = 5\n    speed_stage_3 = 8\n\n    # Time spent in each stage (time = distance / speed)\n    time_stage_1 = distance_stage_1 / speed_stage_1\n    time_stage_2 = distance_stage_2 / speed_stage_2\n    time_stage_3 = distance_stage_3 / speed_stage_3\n\n    # Total time spent on the race\n    total_time = time_stage_1 + time_stage_2 + time_stage_3\n\n    return total_time\n\nans = solution()"
    ],
    "1ec6272d9b5f4fb681677cca4ba5a3ef": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let a, b, c be the final amounts for Anna, Betsy, and Charlene\n    a, b, c = symbols('a b c')\n    \n    # Given the final ratio of marbles\n    equation1 = Eq(a/b, 2/5)\n    equation2 = Eq(b/c, 5/7)\n    equation3 = Eq(a + b + c, 168)\n    \n    # Charlene gave 15 marbles to Betsy\n    # Then, Betsy gave 8 marbles to Anna\n    # Therefore, the original amounts were a-8, b+7, c-15\n    # The final sum didn't change, so we still have a + b + c = 168\n    \n    # Solve the set of equations\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n    \n    # Calculate Betsy's original amount of marbles\n    betsy_original = solutions[b] + 7\n    \n    return betsy_original\n\nans = solution()"
    ],
    "ea4fdc5ca1cf4568b300810db0eaa9e2": [
        "def solution():\n    expression = 180 - 9 - 9 - 9 - 9 - 9 - 9 - 7 - 7 - 7 - 7 - 7 - 7\n    return expression\n\nans = solution()"
    ],
    "4ceaa57063624f489d2a91560349d225": [
        "from math import factorial\n\ndef solution():\n    total_cards = 4 + 3 + 7\n    yellow_cards = 4\n    red_cards = 3\n    green_cards = 7\n    # Formula for permutation of multiset: n! / (n1! * n2! * ... * nk!)\n    ways = factorial(total_cards) // (factorial(yellow_cards) * factorial(red_cards) * factorial(green_cards))\n    return ways\n\nans = solution()"
    ],
    "a49805b294c44372af6c664415044e6a": [
        "def solution():\n    # Let x be the number of lollipops and y be the number of gum drops initially.\n    # According to the original ratio, we have: 5/7 = x/y\n    # After adding 120 pieces of candy to each, the ratio is 4/5: (x + 120)/(y + 120) = 4/5\n    # We need to solve for x and y, and then find the total number of candies after adding 120 to each.\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    \n    # Original ratio equation\n    eq1 = Eq(5*y, 7*x)\n    # New ratio after adding 120 to each\n    eq2 = Eq((x + 120)*5, (y + 120)*4)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (x, y))\n\n    x_candies = solutions[x]\n    y_candies = solutions[y]\n    \n    # Calculate total candies now\n    total_candies_now = (x_candies + 120) + (y_candies + 120)\n    return total_candies_now\n\nans = solution()"
    ],
    "111ec186a6084484b7572731bc3bcb77": [
        "def solution():\n    pages = 268\n    digits = 0\n    for number in range(1, pages + 1):\n        digits += len(str(number))\n    return digits\n\nans = solution()"
    ],
    "6dff7252335c45c0a2fdec728a95565a": [
        "def solution():\n    import math\n    # Length and width of the paper in cm\n    length = 136\n    width = 80\n    # Calculate the greatest common divisor to find the size of the largest square\n    gcd = math.gcd(length, width)\n    # Calculate the number of squares by dividing the area of the paper by the area of one square\n    num_squares = (length // gcd) * (width // gcd)\n    return num_squares\n\nans = solution()"
    ],
    "006665a313c24b1a92752af5e31bc16a": [
        "def solution():\n    count = 0\n    for hundreds in [4, 5, 7]:\n        for tens in [4, 5, 7]:\n            for ones in [4, 5, 7]:\n                if (hundreds * 100 + tens * 10 + ones) % 2 != 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "b8665b34ac3a4d59aa8061f1eb6eec07": [
        "def solution():\n    ans = 854 * 100\n    return ans\n\nans = solution()"
    ],
    "22718af89a8243c19613574db590d256": [
        "def solution():\n    numbers_less_than_201 = range(1, 201)\n    divisible_by_5 = {n for n in numbers_less_than_201 if n % 5 == 0}\n    divisible_by_7 = {n for n in numbers_less_than_201 if n % 7 == 0}\n    \n    divisible_by_both = divisible_by_5.union(divisible_by_7)\n    \n    ans = len(divisible_by_both)\n    \n    return ans\n\nans = solution()"
    ],
    "88c5dedae77f46f589b56a149633c09c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of each fruit\n    durian, pineapple, watermelon = symbols('durian pineapple watermelon')\n\n    # Chris's transaction equation\n    chris_eq = Eq(durian + 2 * pineapple + 3 * watermelon, 440)\n    # Dylan's transaction equation\n    dylan_eq = Eq(4*durian + 6 * pineapple + 9 * watermelon, 1625)\n\n    # Solve the system of equations\n    solutions = solve((chris_eq, dylan_eq), (durian, pineapple, watermelon))\n\n    return solutions[durian]\n\nans = solution()"
    ],
    "5cd17b7047fd44e184eb28205a77c263": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of teams be 'n'\n    n = symbols('n')\n\n    # Each team plays (n-1) other teams twice, so total matches is n*(n-1) and equals 30\n    equation = Eq(n*(n-1), 30*2)\n\n    # Solve for n\n    solution = solve(equation, n)\n\n    # Filter positive and integer solutions (number of teams must be a positive integer)\n    num_teams = [s for s in solution if s.is_real and s > 0]\n\n    return num_teams[0]\n\nans = solution()"
    ],
    "4ea645a34f3a435db4d0fc57a7f2a099": [
        "def solution():\n    ans = sum((-1)**(i + 1) * i for i in range(1, 101))\n    return ans\n\nans = solution()"
    ],
    "092c73eab03d47ef9afdbfaf1c46b4ee": [
        "def solution():\n    for i in range(10, 2000):\n        if i - int(str(i) + \"0\") == -135:\n            return i\n\nans = solution()"
    ],
    "f5082b520e464b9a9b6f7696942bc7de": [
        "def solution():\n    result = (10 + 1/20 + (3 - 0.85) / (5/6)) / 505.2\n    return result\n\nans = solution()"
    ],
    "77ba726662b34445bc8b3b0c966cb3ac": [
        "def solution():\n    return (49 * 57) + 7\n\nans = solution()"
    ],
    "5b9cd44e2a8d46b2b9f5c8533ec96089": [
        "def solution():\n    # Let x be the total number of students\n    # According to the question, we have:\n    # 0.8x - number of students choosing Grade A Math\n    # 0.35x - number of students choosing Grade B Math\n    # 0.1x - number of students choosing neither\n    # 75 students choosing both (intersection of A and B)\n\n    # According to the principle of inclusion-exclusion:\n    # Total number of students = Students choosing A + Students choosing B - Students choosing both + Students choosing neither\n    # x = 0.8x + 0.35x - 75 + 0.1x\n    # Thus, we can rearrange to solve for x:\n    # x - 0.8x - 0.35x - 0.1x = -75\n    # 0.25x = -75\n    # x = -75 / 0.25\n    # x = -300 (this number should not be negative, so we appear to have a mistake in signs)\n\n    # Let's correct it:\n    # x = 0.8x + 0.35x - 75 - 0.1x\n    # x - 0.8x - 0.35x + 0.1x = 75\n    # 0.25x = 75\n    # x = 75 / 0.25\n    x = 75 / 0.25\n    return int(x)\n\nans = solution()"
    ],
    "77c2ba769a7047048ada0b99188fd52a": [
        "def solution():\n    ones = 7\n    hundreds = 3\n    tens = 2\n    number = hundreds * 100 + tens * 10 + ones\n    return number\n\nans = solution()"
    ],
    "998af0079c4247a1989e0807c81a7b0b": [
        "from itertools import permutations\nfrom math import prod\n\ndef count_factors(n):\n    factors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors += 1\n    return factors\n\ndef solution():\n    all_numbers = set(range(1, 14))\n    for a, b, c, d, e, f, g, h, i in permutations(all_numbers, 9):\n        others = [b, c, d, e, f, g, h, i]\n        factors_count = [count_factors(number) for number in others]\n\n        # Two students (Alice and May) know their number of factors\n        if len(set(factors_count)) != len(factors_count):\n            continue\n\n        # Alice knows she has an odd number, so let's assign a to be Alice\n        if a % 2 == 0:\n            continue\n        \n        # May's number is less than Alice's by 2 and greater than someone's by 1\n        # This someone can't be Alice, so we skip two first elements a, b\n        # Let's say b is Mark, so May must be c\n        if a - b == 2 and b - c == 1:\n            unpicked_numbers = all_numbers - {a, b, c, d, e, f, g, h, i}\n            return prod(unpicked_numbers)\n        \n    return None\n\nans = solution()"
    ],
    "3afaef15c6e14038b0ae9b8cc73f4661": [
        "def solution():\n    return -7 + -3\n\nans = solution()"
    ],
    "5a33774640ef42fbb9d5c0f6fadf05ae": [
        "def solution():\n    ans = 100 / (1 + 1/99)\n    return ans\n\nans = solution()"
    ],
    "859adbbe512546a0b75ae0bf0e8f181d": [
        "def solution():\n    students = 37\n    boat_capacity = 5\n    round_trip = 2\n    one_way_trip = 1\n\n    # If 5 students cross at once, one must return to bring the boat back\n    trips_for_one_round_trip = round_trip - one_way_trip\n    \n    # Calculate total number of full boat trips needed and remaining students\n    full_trips, remaining_students = divmod(students, boat_capacity - 1)\n\n    # Every group of 4 students (full boat trip minus one returning) makes 1 round trip\n    total_trips = full_trips * trips_for_one_round_trip\n\n    # If there are remaining students, they make one more trip\n    # and if there are more students than the boat can carry, one has to return to bring the boat back\n    if remaining_students == 0:\n        pass  # no extra trip needed\n    elif remaining_students < boat_capacity:\n        total_trips += one_way_trip  # one extra trip for the remaining students\n    else:\n        total_trips += round_trip  # one return trip needed plus one for the remaining students\n\n    return total_trips + full_trips  # add the full trips to get the final number of trips\n\nans = solution()"
    ],
    "b17c4c6265e04390be67da9c493fc323": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Frank's, Alex's, and Paul's ages\n    frank, alex, paul = symbols('frank alex paul')\n\n    # Equation 1: The age difference between Frank and Alex is the same as between Alex and Paul\n    equation1 = Eq(frank - alex, alex - paul)\n\n    # Equation 2: The sum of their ages is 99\n    equation2 = Eq(frank + alex + paul, 99)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (frank, alex, paul))\n\n    # Return Alex's age\n    return solutions[alex]\n\nans = solution()"
    ],
    "8a24c57fe2014f94b5b8a95629a79a2d": [
        "from itertools import permutations\n\ndef solution():\n    all_nums = [''.join(p) for p in permutations('1469')]\n    sum_of_all_nums = sum(int(num) for num in all_nums)\n    average = sum_of_all_nums / len(all_nums)\n    return average\n\nans = solution()"
    ],
    "1820577397204c509b1907b2ea4c2a5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Initial condition where number of boys is equal to number of girls\n    initial_condition = Eq(boys, girls)\n\n    # After 60 boys and 12 girls leave, there are twice as many girls as boys\n    boys_left = boys - 60\n    girls_left = girls - 12\n    final_condition = Eq(girls_left, 2 * boys_left)\n\n    # Solve the system of equations\n    solutions = solve((initial_condition, final_condition), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "4a286a0dcf7a4ca5a4d61c7e63b2cb90": [
        "def solution():\n    for digit in range(1, 10):\n        for ones_place in range(10):\n            if digit + ones_place == 15:\n                if ones_place % 2 == 0:  # The number is even\n                    return 900 + digit * 10 + ones_place\n\nans = solution()"
    ],
    "6a4c9fce03a84201b80dea6e9a6cd7cf": [
        "def solution():\n    bowls_per_jug = 3\n    jugs_per_pail = 2\n\n    bowls_per_pail = bowls_per_jug * jugs_per_pail\n\n    return bowls_per_pail\n\nans = solution()"
    ],
    "39bfd666abde40ed9ef0dbeb23faa055": [
        "def solution():\n    short_rope = 20\n    long_rope = 5 * short_rope\n    total_length = short_rope + long_rope\n    return total_length\n\nans = solution()"
    ],
    "959efbb55d9940c8a07132d59f0420ff": [
        "def solution():\n    speed_van = 80  # speed of the van in km/h\n    speed_car = 120  # speed of the car in km/h\n    lead_time = 3  # hours van has traveled before the car starts\n\n    # calculate the distance covered by the van during the 3 hour lead\n    lead_distance = speed_van * lead_time\n\n    # relative speed at which the car is catching up to the van\n    catch_up_speed = speed_car - speed_van\n\n    # hours needed for car to catch up\n    catch_up_time = lead_distance / catch_up_speed\n\n    return catch_up_time\n\nans = solution()"
    ],
    "eba97ef5f84146c19418485d0ecbe151": [
        "def solution():\n    from itertools import combinations\n\n    # Wendy has options to bring 0 to 4 hats, 3 shirts, 2 pairs of pants, and 1 skirt (always brought)\n    hat_options = [0, 1, 2, 3, 4]\n    shirt_options = [1]\n    pants_options = [1]\n    skirt_options = [1]\n\n    # Calculate combinations using the multiplication principle\n    total_combinations = sum(len(list(combinations(hat_options, h))) for h in hat_options) * len(shirt_options) \\\n                         * len(pants_options) * len(skirt_options)\n\n    return total_combinations\n\nans = solution()"
    ],
    "93563e24dcde4ff39e2fadedcde819a3": [
        "def solution():\n    # Convert repeating decimals to fractions\n    # 0.010101... = 1/99\n    a = 1/99\n    # The square of 1/99\n    a_squared = a * a\n    # Convert the squared fraction back to a repeating decimal to find the length of repetend\n    # Turn the fraction into a decimal string representation\n    decimal_rep = str(a_squared)\n    # The repetend will start after the decimal point and '0's\n    repetend_start = decimal_rep.find('1')\n    # The repetend will be the digits after the '0's repeated\n    repetend = decimal_rep[repetend_start:-1] # Exclude the last digit which might not be accurate due to rounding\n    # Length of the repetend for the product\n    return len(repetend)\n\nans = solution()"
    ],
    "689ae8da46554adf826beb1a55700c76": [
        "def solution():\n    # Calculate the number of pages each printer can print in a minute\n    pages_per_minute_A = 300 / 12\n    pages_per_minute_B = 300 / 10\n    \n    # Calculate the total pages per minute when both printers are used\n    total_pages_per_minute = pages_per_minute_A + pages_per_minute_B\n    \n    # Calculate the total number of pages printed in 1/2 hours (30 minutes)\n    pages_in_half_hour = total_pages_per_minute * 30\n    \n    return pages_in_half_hour\n\nans = solution()"
    ],
    "d559f399083a49ba9b8396e4af839356": [
        "def solution():\n    return 72 * 43\n\nans = solution()"
    ],
    "adc0111f2b2c4d378ae08bcd6ee30b74": [
        "def solution():\n    return 33033\n\nans = solution()"
    ],
    "993780e2460e4c75a69e44c4d42adb9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_items = symbols('total_items')\n\n    apples = (2/3) * total_items\n    bananas = (1/9) * total_items\n    lemons = total_items - apples - bananas\n\n    equation = Eq(apples, lemons + 12)\n    \n    solutions = solve((equation), (total_items))\n\n    # Calculate the number of lemons using the total_items solution.\n    num_lemons = int(solutions[0] - ((2/3) * solutions[0] + (1/9) * solutions[0]))\n\n    return num_lemons\n\nans = solution()"
    ],
    "2a4b4cb16018411e860c36a08fa77b24": [
        "def solution():\n    count = 0\n    for month in range(1, 13):\n        if month < 10:\n            month_str = '0' + str(month)\n        else:\n            month_str = str(month)\n        for day in range(1, 32):\n            if day < 10:\n                day_str = '0' + str(day)\n            else:\n                day_str = str(day)\n\n            date_str = day_str + '/' + month_str + '/2019'\n            \n            count += date_str.count('3')\n\n            # February and months with 30 days condition\n            if month == 2 and day == 28:\n                break\n            elif month in [4, 6, 9, 11] and day == 30:\n                break\n\n    return count\n\nans = solution()"
    ],
    "de32aa63739340c1b48d956920574cde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    durian, chocolate, strawberry = symbols('durian chocolate strawberry')\n    \n    equation1 = Eq(durian, 3/9)\n    equation2 = Eq(chocolate, 4/9)\n    equation3 = Eq(strawberry, 2/9)\n    equation4 = Eq(5*durian + 3*chocolate + 4*strawberry, 560)\n    \n    solutions = solve((equation1, equation2, equation3, equation4), (durian, chocolate, strawberry))\n    \n    money_from_durian = solutions[durian] * 5\n    \n    return money_from_durian\n\nans = solution()"
    ],
    "bbf5395114fa4ebba02cabdc25eef45a": [
        "def solution():\n    # Since the cuboid is 7x5x14 and cut into 490 small cubes of the same size, each side length of small cube is 1 (7*5*14 = 490).\n    # Cubes that have exactly 3 faces painted are the corner cubes.\n    # A 7x5x14 cuboid has 8 corners. Thus there are 8 small cubes with exactly three faces painted.\n    num_corners = 8\n\n    return num_corners\n\nans = solution()"
    ],
    "92b5600f34c745cc9d5dd15bf5842acc": [
        "def solution():\n    for tens in range(1, 10):\n        for units in range(0, 10):\n            original_number = tens * 10 + units\n            swapped_number = units * 10 + tens\n            if swapped_number == (original_number // 3) + 3:\n                return original_number\n\nans = solution()"
    ],
    "64b747db943b470e8d5bcc4cd037f8bc": [
        "def solution():\n    principal = 10000\n    rate_first_period = 0.06\n    rate_second_period = 0.08\n    time_first_period = 3\n    time_second_period = 2\n    \n    # Calculate amount after first period\n    amount_after_first_period = principal * (1 + rate_first_period) ** time_first_period\n    \n    # Calculate final amount after second period\n    final_amount = amount_after_first_period * (1 + rate_second_period) ** time_second_period\n\n    # Round to the nearest hundredth\n    ans = round(final_amount, 2)\n    \n    return ans\n\nans = solution()"
    ],
    "97e7c5c45535473c925714e02efb350b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let d be the price of one donut and r be the price of one raisin roll.\n    d, r = symbols('d r')\n    \n    # Given that each raisin roll costs 3 times as much as each donut.\n    equation1 = Eq(r, 3 * d)\n    \n    # Also given that 5 raisin rolls and 6 donuts cost $14.70.\n    equation2 = Eq(5 * r + 6 * d, 14.70)\n    \n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (r, d))\n    \n    # We want to find the cost of a raisin roll.\n    return solutions[r]\n\nans = solution()"
    ],
    "a72c43c3bde841a3810fb516a1d277f4": [
        "def solution():\n    from math import gcd\n\n    school1 = 24\n    school2 = 36\n    school3 = 42\n    \n    # Find the Greatest Common Divisor (GCD) for the three numbers\n    # GCD is the largest possible number of students in each team\n    ans = gcd(gcd(school1, school2), school3)\n\n    return ans\n\nans = solution()"
    ],
    "9ec93e5371534d979ad30c4708659ad9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for levels of A, B, C, D (Zachary, Yvonne, Xavier, Waylon)\n    A, B, C, D, Z, Y, X, W = symbols('A B C D Z Y X W', integer=True)\n\n    # Equations derived from the given conditions\n    equations = [\n        A < D, A > C,          # A is higher than C, but lower than D\n        B < X,                 # B is lower than Xavier's unit\n        D == 5 * Y,            # D's unit is 5 times Yvonne's unit\n        Z + 2 - X == Z - W,    # Zachary two levels up equals the difference between Xavier and Waylon\n        Z == Y + X             # Zachary's level is the sum of Yvonne and Xavier's levels\n    ]\n\n    # Considering the apartment has 18 levels\n    domain = [\n        (A > 0) & (A <= 18),\n        (B > 0) & (B <= 18),\n        (C > 0) & (C <= 18),\n        (D > 0) & (D <= 18),\n        (Z > 0) & (Z <= 18),\n        (Y > 0) & (Y <= 18),\n        (X > 0) & (X <= 18),\n        (W > 0) & (W <= 18)\n    ]\n\n    # Solve the system of equations within the domain\n    solutions = solve(equations + domain, (A, B, C, D, Z, Y, X, W), dict=True)\n\n    # Extract the result for A and map names to levels\n    for solution in solutions:\n        if all(1 <= solution[val] <= 18 for val in [A, B, C, D]):\n            # Map the names to the levels (Z, Y, X, W are placeholders for the names)\n            name_to_level = {Z: 'Zachary', Y: 'Yvonne', X: 'Xavier', W: 'Waylon'}\n            level_to_name = {v: name_to_level[k] for k, v in solution.items() if k in name_to_level}\n\n            # Find out who stays on which level based on the alphabetical order A, B, C, D\n            ABCD_to_name = sorted((solution[A], 'A'), (solution[B], 'B'), (solution[C], 'C'), (solution[D], 'D'))\n            level_of_A = ABCD_to_name[0][0]\n            return level_of_A  # Return the level of A\n    \n    return None  # If no solution is found\n\nans = solution()"
    ],
    "beed278a1bed4c50a92eafa931245d88": [
        "def solution():\n    ans = 200 - 100 / 5 + 200\n    return ans\n\nans = solution()"
    ],
    "c0de10f834e9467fb65b332409f0b795": [
        "def solution():\n    # Let the cost of a notebook be x, pencil case be y and eraser be z.\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables\n    x, y, z = symbols('x y z')\n    \n    # The equations based on the problem statement\n    equation1 = Eq(3*x + 4*y + 5*z, 50)\n    equation2 = Eq(x + y, 6)\n    equation3 = Eq(y + z, 9)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n    \n    # Return the cost of a pencil case\n    return solutions[y]\n\nans = solution()"
    ],
    "907abf99743b45bcb21f5e10053628da": [
        "def solution():\n    count = 0\n    for hundred in range(1, 10):\n        for ten in range(1, 10):\n            for unit in range(1, 10):\n                if hundred % ten == 0 and hundred % unit == 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "f026bb192f0f4088a86ad13d7cc26d86": [
        "from itertools import permutations\n\ndef solution():\n    digits = [4, 5, 8]\n    all_permutations = list(permutations(digits))\n    return len(all_permutations)\n\nans = solution()"
    ],
    "d16475774e2d40e298ca4d00de004671": [
        "def solution():\n    # number of terms for the two different sums\n    n1 = 9\n    n2 = 27\n    \n    # sums of the terms\n    S1 = 99\n    S2 = 540\n    \n    # formulas to find the sum of n terms in arithmetic sequence:\n    # S_n = n/2 * (first_term + last_term)\n    # S_n = n/2 * (2*first_term + (n-1)*difference)\n    \n    # From the first sum, we can express the first term (a) and the common\n    # difference (d) in terms of S1 and n1:\n    # 2*S1 = n1 * (2*a + (n1-1)*d)\n    #\n    # From the second sum, we can also express in terms of S2 and n2:\n    # 2*S2 = n2 * (2*a + (n2-1)*d)\n    #\n    # We can set up a system of linear equations to solve for 'a' and 'd'.\n    # We'll use the sympy library to help us solve the equations.\n    \n    from sympy import symbols, Eq, solve\n    \n    a, d = symbols('a d')\n    equation1 = Eq(2*S1, n1 * (2*a + (n1-1)*d))\n    equation2 = Eq(2*S2, n2 * (2*a + (n2-1)*d))\n    \n    # Solving the system of equations for 'a' and 'd'\n    solutions = solve((equation1, equation2), (a, d))\n    \n    # Using 'a' and 'd' found, we will calculate the sum of the first 16 terms\n    n3 = 16\n    a = solutions[a]\n    d = solutions[d]\n    \n    S3 = n3/2 * (2*a + (n3-1)*d)\n    \n    return S3\n\nans = solution()"
    ],
    "9626ae3648b54685b675bed33b248975": [
        "def solution():\n    loafs_per_cup = 6 / 5\n    desired_loafs = 24\n    cups_needed = desired_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "e70904d7218642df8d9ac82e9cbb1818": [
        "def solution():\n    # Calculate total numbers from 1 to 12 with the pattern given.\n    total_numbers = sum([i for i in range(1, 13)])\n\n    # Since the sequence is in ascending order, the median will be the middle number.\n    # If the sequence has an even number of items, the median is the average of the two middle numbers.\n    # For sequence 1,2,2,3,3,3,...,12,12,...12 (12 times), the middle two numbers will be 12.\n    \n    if total_numbers % 2 == 0:\n        median = 12\n    else:\n        median = 12  # In this sequence, it's always going to be 12 because 12 is written 12 times, making it the middle value(s).\n\n    return median\n\nans = solution()"
    ],
    "2989d3782ec842dcb36b4a949d8588db": [
        "def solution():\n    total_people = 216\n    teachers_count = 139\n    children_count = total_people - teachers_count\n    return children_count\n\nans = solution()"
    ],
    "d26a5497d6514135ba9d0ea0f54b8bb4": [
        "def solution():\n    count = 0\n    for i in range(7, 41):\n        count += len(str(i))\n    return count\n\nans = solution()"
    ],
    "d495a6229050459d9704caa6c86a306f": [
        "from math import comb\n\ndef solution():\n    # Number of games in the group stage: each group has 4 teams and each team plays 3 games\n    group_games = 8 * comb(4, 2)\n\n    # Number of games in the knockout round: round of 16 + quarter-finals + semi-finals + third place + finals\n    knockout_games = 16 / 2 + 8 / 2 + 4 / 2 + 2 / 2 + 1\n\n    return int(group_games + knockout_games)\n\nans = solution()"
    ],
    "26c05d1067be4f228420a8d03d60d1f1": [
        "def solution():\n    from math import lcm\n\n    red_flash_rate = 4  # times per minute\n    green_flash_rate = 6  # times per minute\n\n    flashes_per_hour = 60  # since we are considering 1 hour\n\n    least_common_multiple = lcm(red_flash_rate, green_flash_rate)\n\n    simultaneously_flash_rate = flashes_per_hour // least_common_multiple\n\n    # Including the first and the last time they both flash simultaneously\n    ans = simultaneously_flash_rate + 1\n\n    return ans\n\nans = solution()"
    ],
    "bd83c15a08c149f196a2f6caf1bec626": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * x + 1, 22)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b89d2244ef89497f80cc165487752747": [
        "def solution():\n    total_paintings = 120\n    landscapes = int(0.4 * total_paintings)\n    still_lifes = total_paintings - landscapes\n    french_landscapes = 25\n    total_french_paintings = 40\n    non_french_landscapes = landscapes - french_landscapes\n    non_french_still_lifes = still_lifes - (total_french_paintings - french_landscapes)\n    \n    return non_french_still_lifes\n\nans = solution()"
    ],
    "8a316589158f4d3da421f3970c3ae486": [
        "def solution():\n    total_drink = 60 + 780\n    max_volume_per_glass = total_drink // 9\n    return max_volume_per_glass\n\nans = solution()"
    ],
    "dc48d7be2274447aa61b412cef4e1d7b": [
        "def solution():\n    amount_a = 100\n    concentration_a = 0.50\n    amount_b = 400\n    concentration_b = 0.80\n    \n    total_amount = amount_a + amount_b\n    total_rice = (amount_a * concentration_a) + (amount_b * concentration_b)\n    \n    ans = total_rice / total_amount\n    \n    return ans\n\nans = solution()"
    ],
    "c347b5871cff46138c8d8bcabd9edb4d": [
        "def solution():\n    speed_m_per_min = 24\n    time_seconds = 300\n    time_minutes = time_seconds / 60\n    \n    distance = speed_m_per_min * time_minutes\n    \n    return distance\n\nans = solution()"
    ],
    "93719c34b1574999936ad00f94cad2e8": [
        "def solution():\n    return 30.03 - 3.3\n\nans = solution()"
    ],
    "e847f4218f9d4d7db291515e8c3a7f1e": [
        "def solution():\n    total_hay = 12 * 15\n    days_for_20_horses = total_hay / 20\n\n    return days_for_20_horses\n\nans = solution()"
    ],
    "7181abe12a9441efa29c9b6450170e13": [
        "def solution():\n    oliver_age_now = 20\n    lin_age_now = 26\n    sum_of_ages_target = 48\n\n    years_later = (sum_of_ages_target - (oliver_age_now + lin_age_now)) / 2\n\n    return int(years_later)\n\nans = solution()"
    ],
    "4c625760244c484b9b010ff513d7aacb": [
        "def solution():\n    return 6.67 + 5.93\n\nans = solution()"
    ],
    "e8ea378d2e224df88c51e8df519dd96a": [
        "def solution():\n    numbers = [0.0099, 0.81, 1.2, 0.087, 1.21]\n    closest = min(numbers, key=lambda x: abs(x - 1))\n    return closest\n\nans = solution()"
    ],
    "41c299f84c8e465ab37555ce3abe8dbd": [
        "def solution():\n    sandra_age_now = 8\n    mother_age_now = 4 * sandra_age_now\n    difference_age_2_years_ago = (mother_age_now - 2) - (sandra_age_now - 2)\n    return difference_age_2_years_ago\n\nans = solution()"
    ],
    "8f71ad4877d946aca5623bd2c5a1ffd9": [
        "def solution():\n    # x is a 4-digit number represented as ABCD\n    # Moving the first digit to the ones place results in an integer represented as BCD * 10 + A\n    # The new number is 4707 greater than the original number\n    # Therefore, BCD * 10 + A = ABCD + 4707\n    # Expanding that equation: (1000 * B + 100 * C + 10 * D) + A = (1000 * A + 100 * B + 10 * C + D) + 4707\n    # Rearranging the terms gives: 1000 * B + 100 * C + 10 * D - D = 1000 * A - A + 4707\n    # Simplifying gives: 999 * B + 100 * C + 9 * D = 999 * A + 4707\n    # BCD + A = ABCD + 4707\n    # (1000B + 100C + 10D + A) = 4707 + (1000A + 100B + 10C + D)\n    # 1000B + 100C + 10D - D = 1000A - A + 4707\n    # 999B + 90C + 9D = 999A + 4707\n    # 111(9B + 10C + D) = 999A + 4707\n    # Since the left side is divisible by 111, the right side must be divisible by 111\n    \n    for A in range(1, 10):  # A can't be 0 since it's a 4-digit number\n        right_side = 999 * A + 4707\n        if right_side % 111 == 0:\n            # Find BCD = (right_side / 111) - A\n            BCD = int(right_side / 111) - A\n            if BCD >= 100 and BCD <= 999:  # BCD must be a 3-digit number\n                return int(str(BCD) + str(A))\n\nans = solution()"
    ],
    "44be0754c9694d719af9a93c29de6a7f": [
        "def solution():\n    i = 1\n    while True:\n        number = i * 35\n        if str(number).endswith(\"35\") and sum(int(digit) for digit in str(number)) == 35:\n            return number\n        i += 1\n\nans = solution()"
    ],
    "af1991b7f84d4f62aaf6b6878cddfe02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    y = symbols('y')\n    total_money = 8 * y\n    watch_price = 4 * y\n    handbag_price = 20\n    child_money_each = y - 5\n\n    equation = Eq(total_money, watch_price + handbag_price + 2 * child_money_each)\n    solution_value = solve(equation, y)\n    \n    return solution_value[0]\n\nans = solution()"
    ],
    "42c5c84cc6f5475fbadec4fb054ea542": [
        "def solution():\n    total_days = 0\n    for year in range(1901, 2000):\n        if (year % 4) == 0:\n            total_days += 366  # Leap year\n        else:\n            total_days += 365  # Non-leap year\n    total_days += 366  # Adding days of the year 2000, which is a leap year\n\n    return total_days\n\nans = solution()"
    ],
    "99f53a3e706d464e97e730165f364f49": [
        "def solution():\n    total_money = 100\n    days = 15\n    for day in range(1, days + 1):\n        if day % 2 == 1:  # Deposit days\n            total_money += 10\n        else:  # Spending days\n            total_money -= 8\n    return total_money\n\nans = solution()"
    ],
    "25e1b3f1ea544f5fb040500722f553f5": [
        "def solution():\n    total_sum = sum(int('2' * i) for i in range(1, 2018))\n    last_five_digits = str(total_sum)[-5:]\n    ans = sum(map(int, last_five_digits))\n    return ans\n\nans = solution()"
    ],
    "d079d30d875545e8b201477ce3c16428": [
        "def solution():\n    total_numbers = 99  # As we consider numbers less than 100\n\n    # Using Inclusion-Exclusion Principle\n    # Count multiples of 3\n    multiples_of_3 = total_numbers // 3\n\n    # Count multiples of 7\n    multiples_of_7 = total_numbers // 7\n\n    # Count multiples of both 3 and 7 (i.e., multiples of 3*7=21)\n    multiples_of_3_and_7 = total_numbers // 21\n\n    # Calculating the numbers that can't be divided by 3 or 7\n    cannot_divide_by_3_or_7 = total_numbers - (multiples_of_3 + multiples_of_7 - multiples_of_3_and_7)\n\n    return cannot_divide_by_3_or_7\n\nans = solution()"
    ],
    "f0ef1fefe9e4405cb773c5fc47ab6e50": [
        "def solution():\n    return 5.6 * 2.4\n\nans = solution()"
    ],
    "c4423db7405342c1aecbf4c4b4097957": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 28)\n\nans = solution()"
    ],
    "0ddcfdef95d9497987f43afbe170f9f1": [
        "def solution():\n    first_term = 1\n    last_term = 12\n    number_of_terms = last_term\n\n    sum_of_terms = (number_of_terms * (first_term + last_term)) / 2\n\n    return int(sum_of_terms)\n\nans = solution()"
    ],
    "b92d0cd587064c7195d1d5818981c69c": [
        "def solution():\n    weight_per_coin = 2.5  # weight of one ten-pence coin in grams\n    total_pence = 40  # total value in pence\n    num_coins = total_pence / 10  # number of ten-pence coins\n\n    total_weight = weight_per_coin * num_coins  # total weight\n\n    return total_weight\n\nans = solution()"
    ],
    "0e1b4fc3bb9a4b798f86eca17838ecba": [
        "def solution():\n    # Let the number of buttons James has be x\n    # Nina has (22 - x) buttons because together they have 22\n    # After giving 4 buttons to James, Nina has (22 - x - 4) buttons\n    # After receiving 4 buttons, James has (x + 4) buttons\n    # They have the same number of buttons after the exchange, so (22 - x - 4) = (x + 4)\n\n    # Now solve the equation (22 - x - 4) = (x + 4) for x\n    x = (22 - 4 - 4) // 2\n\n    # Since Nina has more buttons than James, we calculate Nina's original number of buttons\n    nina_original = 22 - x\n    \n    return nina_original\n\nans = solution()"
    ],
    "83396f638262415bb8e62a96478ffa20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the fruits\n    mango, pear, apple = symbols('mango pear apple')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(mango + pear, 3.40)\n    equation2 = Eq(mango + apple, 3.80)\n    equation3 = Eq(4*mango + 2*pear + apple, 13.20)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (mango, pear, apple))\n\n    return solutions[mango]\n\nans = solution()"
    ],
    "2035192c81ab4e4ca4f6708f47f4638d": [
        "def solution():\n    total_people = 20\n    ratio_adults = 1\n    ratio_children = 4\n    total_ratio = ratio_adults + ratio_children\n\n    adults = (total_people * ratio_adults) / total_ratio\n\n    return adults\n\nans = solution()"
    ],
    "fc18df7e18e04a7ba182dc1493c19ef1": [
        "def solution():\n    # Let x be the number of correct answers.\n    # Then (6 - x) would be the number of wrong answers.\n    # Based on the points system:\n    # 5x - 2(6 - x) = 23\n    # Solve for x to get the number of correct answers.\n    for x in range(7):  # number of questions is 6, so x can only be from 0 to 6.\n        if 5 * x - 2 * (6 - x) == 23:\n            return x\n\nans = solution()"
    ],
    "21305df1a3f34c78b15a5895829b6b0e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'r' be the mass of one tennis racket and 'b' be the mass of one tennis ball.\n    r, b = symbols('r b')\n\n    # Given the first equation: 1 racket + 3 balls = 536 grams\n    equation1 = Eq(r + 3*b, 536)\n\n    # Given the second equation: 2 rackets + 3 balls = 904 grams\n    equation2 = Eq(2*r + 3*b, 904)\n\n    # Solving the two equations simultaneously\n    solutions = solve((equation1, equation2), (r, b))\n\n    return solutions[r]\n\nans = solution()"
    ],
    "f83ac99f77f44f1eb0edef1268dfc574": [
        "import math\n\ndef solution():\n    initial_speed = 10  # m/s\n    angle_degrees = 37\n    g = 9.81  # acceleration due to gravity (m/s^2)\n\n    # Convert the angle to radians for calculation\n    angle_radians = math.radians(angle_degrees)\n    \n    # Calculate the height using conservation of energy principles\n    # potential energy at max height = kinetic energy at start\n    # m * g * h = 0.5 * m * v0^2\n    # h = (v0^2) / (2 * g), where v0 is the initial speed along the y-axis\n    # v0y = v0 * sin(angle) - initial speed in the direction of gravity\n    v0y = initial_speed * math.sin(angle_radians)\n    height = (v0y ** 2) / (2 * g)\n    \n    # Calculate the distance along the ramp using the relation height = distance * sin(angle)\n    distance = height / math.sin(angle_radians)\n    \n    return height, distance\n\nans = solution()"
    ],
    "2628cccb1cfe4903b268f7641a4ef75c": [
        "def solution():\n    total_candies = 35\n    starting_seat = 3\n    num_children = 9\n\n    # Find the seat number that receives the last candy\n    last_seat = (starting_seat + total_candies - 1) % num_children\n    # Adjust the result if last_seat is 0, it should be the num_children th child\n    last_seat = last_seat if last_seat != 0 else num_children\n\n    return last_seat\n\nans = solution()"
    ],
    "13b8f82b60e940e09ee1f5cec6149d01": [
        "def solution():\n    numbers = [9, 12, 17, 18, 21, 23]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "8570bae0d8974f76bc97044f422b89b5": [
        "def solution():\n    # If Sheila wants to ensure she has 2 groups of 4 balls of the same colour.\n    # In the worst case scenario, she might pick 3 balls of each colour first.\n    # Then she continues to pick more balls one by one.\n    # After she picks the next ball, she will have 4 balls of one colour.\n    # But she needs 4 balls of a second colour as well.\n    # Therefore, she might need to pick almost all the remaining balls.\n    # The only ball that will definitely not be needed is the last ball of the third colour.\n    \n    # 3 balls of each colour to start with, in the worst case:\n    initial_pick = 3 * 3\n    \n    # To ensure the fourth ball of one colour, only one more is needed:\n    one_full_set = 1\n    \n    # Now, worst case, she needs to pick up all the remaining balls, except the last one of the third colour:\n    remaining_balls = (5 - 4) + (4 - 4) + (2 - 1)\n    \n    # Therefore, the total balls she must pick is:\n    total_picks = initial_pick + one_full_set + remaining_balls\n    \n    return total_picks\n\nans = solution()"
    ],
    "e884adb0e6b040cdb2a34a42819fab4c": [
        "def solution():\n    return 30 + 30 * 30 + 30 * 30 * 30\n\nans = solution()"
    ],
    "0dbf1ccfd2fc4007a533a919605fe57f": [
        "def solution():\n    players = 64\n    matches = 0\n    while players > 1:\n        matches += players // 4\n        players = players // 4\n    return matches\n\nans = solution()"
    ],
    "2473e761fb61498e9259082d612f70e0": [
        "def solution():\n    ans = 2.5 * 24\n    return ans\n\nans = solution()"
    ],
    "17e5719cf1f44333aa04f4722862715a": [
        "def solution():\n    ans = 782 - 9 * 24 // 2\n    return ans\n\nans = solution()"
    ],
    "ae73ec11506148a9bdc9da9a59f4f805": [
        "def solution():\n    return 1 + 3 + 5 + 95 + 97 + 99\n\nans = solution()"
    ],
    "4109885176844bd28d5df4cb978b2199": [
        "def solution():\n    for digit1 in range(1, 10):  # leading digit cannot be 0\n        for digit2 in range(0, 10):\n            for digit3 in range(0, 10):\n                for digit4 in range(0, 10):\n                    original_number = digit1 * 1000 + digit2 * 100 + digit3 * 10 + digit4\n                    new_number = digit2 * 1000 + digit3 * 100 + digit4 * 10 + digit1\n                    if new_number - original_number == 4707:\n                        return original_number\n                        \nans = solution()"
    ],
    "328cb846f149403d8585071dd7244539": [
        "def solution():\n    total_weight = 22\n    cheese_weight = 6\n    number_of_bags = 4\n\n    flour_weight = (total_weight - cheese_weight) / number_of_bags\n\n    return flour_weight\n\nans = solution()"
    ],
    "3ae9a5c1a17b4f1095105ce89b2df771": [
        "def solution():\n    # Note: The actual exchange rate is not provided in the problem.\n    # Assuming that we have the exchange rate from GBP to RUB\n    # For instance, let's assume the exchange rate is 1 GBP = 100 RUB\n    # And assuming the cost of a CD in St Petersburg is 140 RUB\n    # These values should be adjusted based on the actual exchange rate and local CD cost\n    \n    exchange_rate = 100  # 1 GBP = 100 RUB\n    cost_in_rub = 140  # Cost of a CD in St Petersburg in RUB\n\n    # Richard spent 14 GBP\n    spent_in_gbp = 14\n\n    # Convert the amount to RUB\n    spent_in_rub = spent_in_gbp * exchange_rate\n\n    # Calculate how many CDs he could buy in St Petersburg\n    number_of_cds = spent_in_rub // cost_in_rub\n\n    return number_of_cds\n\nans = solution()"
    ],
    "50bc0ad9cea747f5b927172f53d8747a": [
        "def solution():\n    from sympy import isprime\n\n    # To narrow down the search, we can look at the options provided and work backwards.\n    possible_ages = [28, 39, 52, 84]\n\n    # Test each age to see if it meets the conditions\n    for age in possible_ages:\n        # Age three years ago must be a square number\n        age_three_years_ago = age - 3\n        if (age_three_years_ago ** 0.5) % 1 != 0:\n            continue\n\n        # Age next year must be a prime number\n        age_next_year = age + 1\n        if not isprime(age_next_year):\n            continue\n\n        # Age in 12 years must be a cube number\n        age_in_12_years = age + 12\n        if round(age_in_12_years ** (1/3)) ** 3 != age_in_12_years:\n            continue\n\n        # If all conditions are met, return the age\n        return age\n\nans = solution()"
    ],
    "e8608d6fe45347b7a5f73ee97e718fe9": [
        "def solution():\n    return 168 * 91\n\nans = solution()"
    ],
    "34b8599fcad846d6b22ce1cb7e0d67e3": [
        "def solution():\n    # To ensure that Bart gets 2 M&Ms of different colors, he might pick the chips as follows:\n    # First, he could pick all 3 red chips - and still have chips of only one color.\n    # Next, he could pick up to 4 yellow chips - if he is really unlucky and picks all yellows, he will\n    # still have only red and yellow chips.\n    # However, as soon as he picks one more chip (which must be brown as it's the only color left), he is\n    # guaranteed to have at least 2 different colors.\n    # Therefore, he needs to pick 3 red + 4 yellow + 1 more chip = 8 chips to ensure he has 2 of different colors.\n\n    return 3 + 4 + 1  # reds + yellows + 1 more to ensure different colors\n\nans = solution()"
    ],
    "ee25df77dbc84b5194bfbcc0c0bd215c": [
        "def solution():\n    def new_operation(a, b):\n        return a * b + a + b\n\n    # Given the new_operation, we have:\n    # 2 * (x * 4 + x + 4) + 2 + (x * 4 + x + 4) = 59\n    # which simplifies to:\n    # 2x * 4 + 2x + 8 + 2 + x * 4 + x + 4 = 59\n    # 8x + 2x + x + 14 = 59\n    # 11x = 59 - 14\n    # 11x = 45\n    # x = 45 / 11\n    x = 45 / 11\n    \n    return x\n\nans = solution()"
    ],
    "a3f26b4b45934be08cf8676828e7ba57": [
        "def solution():\n    # Let a be the first term and d be the common difference\n    # The sum of an arithmetic series formula is: S_n = n/2 * (2a + (n - 1)*d)\n    \n    # Equation based on sum of first 9 terms\n    # 72 = 9/2 * (2*a + (9 - 1)*d) => 72 = 9*a + 36*d\n    # Equation based on sum of first 23 terms\n    # 736 = 23/2 * (2*a + (23 - 1)*d) => 736 = 23*a + 506*d\n    \n    # Solving these two equations to find a and d\n    from sympy import symbols, Eq, solve\n    \n    a, d = symbols('a d')\n    equation1 = Eq(9*a + 36*d, 72)\n    equation2 = Eq(23*a + 506*d, 736)\n    \n    # Solve for a and d\n    solutions = solve((equation1, equation2), (a, d))\n    \n    # Now calculate sum of first 16 terms using the formula and the values of a and d\n    a = solutions[a]\n    d = solutions[d]\n    # Sum of first 16 terms: S_16 = 16/2 * (2*a + (16 - 1)*d)\n    S_16 = 16/2 * (2*a + (16 - 1)*d)\n    \n    return S_16\n\nans = solution()"
    ],
    "751fb35fe9d44a4db9f500a8a4b466c9": [
        "def solution():\n    pattern = \"2345\"\n    pattern_length = len(pattern)\n    total_length = 43\n    full_patterns_count = total_length // pattern_length\n    remaining_digits_count = total_length % pattern_length\n\n    sum_full_patterns = sum(int(digit) for digit in pattern) * full_patterns_count\n    sum_remaining_digits = sum(int(pattern[i]) for i in range(remaining_digits_count))\n\n    return sum_full_patterns + sum_remaining_digits\n\nans = solution()"
    ],
    "bc530cd877f2428bb79ffc956252f9b3": [
        "def solution():\n    # Define speed ratio between Andrew and Bernice and between Bernice and Cassandra\n    # When Andrew is at level 5, Bernice is at level 3\n    # Therefore, Andrew's speed : Bernice's speed = 5 : 3\n    ratio_andrew_bernice = 5 / 3\n    \n    # When Bernice is at level 6, Cassandra is at level 10\n    # Therefore, Bernice's speed : Cassandra's speed = 6 : 10\n    ratio_bernice_cassandra = 6 / 10\n    \n    # Find the effective ratio of Andrew's speed to Cassandra's speed\n    ratio_andrew_cassandra = ratio_andrew_bernice * ratio_bernice_cassandra\n    \n    # When Cassandra is at level 19, Andrew's level will be 19 * (Andrew's speed ratio to Cassandra's speed)\n    level_andrew = 19 * ratio_andrew_cassandra\n    \n    return int(level_andrew)\n\nans = solution()"
    ],
    "a7221d21ffb140cf886d39364cd7c81f": [
        "def solution():\n    ans = 43242 / 100\n    return ans\n\nans = solution()"
    ],
    "43310de103274061a3f319f61ec706e8": [
        "def solution():\n    minutes_per_quiz = 30\n    quizzes = 4\n    hours_per_quiz = minutes_per_quiz / 60\n\n    total_hours = quizzes * hours_per_quiz\n\n    return total_hours\n\nans = solution()"
    ],
    "0ace0cd817cf47d78db91f0ee0283a12": [
        "def solution():\n    kilometres = 4.7\n    centimetres_in_a_kilometre = 100000\n    ans = kilometres * centimetres_in_a_kilometre\n    return ans\n\nans = solution()"
    ],
    "a44dbd04ca324e2dade754b21d81088b": [
        "def solution():\n    grandpa_age = 61\n    grandson_ages = [4, 7, 12]\n    years = 0\n\n    while sum(grandson_ages) != grandpa_age:\n        years += 1\n        grandpa_age += 1\n        grandson_ages = [age + 1 for age in grandson_ages]\n\n    return years\n\nans = solution()"
    ],
    "84c4b5d7849c464193a6bad9277ea2b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of one chair and one table\n    cost_chair, cost_table = symbols('cost_chair cost_table')\n    \n    # Equation 1: cost of a table is equal to cost of 3 chairs\n    equation1 = Eq(cost_table, 3 * cost_chair)\n    \n    # Equation 2: total cost for 4 tables and 9 chairs is $504\n    equation2 = Eq(4 * cost_table + 9 * cost_chair, 504)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (cost_chair, cost_table))\n\n    # Return the cost of each chair\n    return solutions[cost_chair]\n\nans = solution()"
    ],
    "260fe91f8f7f438498be6c9fceaafc9b": [
        "def solution():\n    count = 0\n    for five_p in range(0, 41, 5):\n        for ten_p in range(0, 41, 10):\n            if five_p + ten_p == 40:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "8e72117b5da04fdfb91ab3f9a9aab2cd": [
        "def solution():\n    speed_shafur = 54  # km/h\n    speed_samuel = 66  # km/h\n\n    # Convert 40 minutes to hours\n    time_before_turning_back = 40 / 60  # hours\n\n    # Distance travelled by both before Samuel turns back\n    distance_before_turning_back = speed_samuel * time_before_turning_back\n\n    # Time taken by Shafur to travel the same distance alone after Samuel turns back\n    time_shafur_alone = distance_before_turning_back / speed_shafur\n\n    # Total time taken by Shafur to reach Town Y\n    total_time_shafur = time_before_turning_back + time_shafur_alone\n\n    # Total distance between Town X and Town Y is how far Shafur travelled in total time\n    distance_X_to_Y = total_time_shafur * speed_shafur\n\n    return distance_X_to_Y\n\nans = solution()"
    ],
    "b30c16550e45492986ba4327f062d606": [
        "def solution():\n    first_term = 50\n    common_difference = 46 - 50  # negative because the sequence is decreasing\n\n    # Using the formula for the nth term of an arithmetic sequence:\n    # a_n = a_1 + (n - 1)d\n    # To find the first negative term, we set a_n < 0 and solve for n.\n    # 0 > 50 + (n - 1)(-4)\n    \n    n = 1  # start with the first term\n    term = first_term\n    while term > 0:\n        n += 1\n        term += common_difference\n    \n    # Since we want the number of terms before the first negative term\n    return n - 1\n\nans = solution()"
    ],
    "95bcebc21d174c318350f0c2fd3955a3": [
        "def solution():\n    ans = 100 / 40\n    return ans\n\nans = solution()"
    ],
    "212dddf2d58c488f92051cac02b24a4d": [
        "def solution():\n    for i in range(100, 1000):\n        product = 1\n        for digit in str(i):\n            product *= int(digit)\n        if product >= 100 and product <= 999:\n            return i\n\nans = solution()"
    ],
    "740a0eb88157475a86714273b6c58967": [
        "def solution():\n    flowers = 68\n    capacity = 9\n\n    vases_needed = (flowers + capacity - 1) // capacity\n\n    return vases_needed\n\nans = solution()"
    ],
    "6a83a12baea34666bb5d5db02ee98315": [
        "def solution():\n    morning_fruit = 416\n    afternoon_fruit = 248\n    ans = morning_fruit - afternoon_fruit\n    return ans\n\nans = solution()"
    ],
    "b216c4dcef5246b1a1032e1ce7b59830": [
        "def solution():\n    from fractions import Fraction\n    \n    # First expression\n    expr1_numerator = Fraction(7, -10)  # 7 divided by -3.333333 is 7 divided by -10/3\n    expr1_denominator = (-27 / 1000) ** (1/3)  # Cube root of -0.027\n    expr1 = expr1_numerator / expr1_denominator\n    \n    # Second expression\n    expr2_numerator = 2**3 / 4**2  # 8 divided by 16\n    expr2_denominator = 0.125 * (1.8 - (0.2 * 7))  # 0.125 times (1.8 minus 1.4)\n    expr2 = expr2_numerator / expr2_denominator\n    \n    # Third expression\n    expr3_part1 = 0.1 / Fraction(1, 7)  # 0.1 divided by 0.142857 repeating, which is 1/7\n    expr3_part2 = 2 * 0.3\n    expr3 = expr3_part1 + expr3_part2\n    \n    # Final answer\n    ans = expr1 + expr2 - expr3\n\n    return float(ans)\n\nans = solution()"
    ],
    "ef74f31cad3e47e99a0e8f28fe1357b7": [
        "def solution():\n    first_multiple = -(-38 // 3)  # Ceiling division to find the first multiple of 3\n    last_multiple = 81 // 3\n\n    num_multiples = last_multiple - first_multiple + 1\n\n    return num_multiples\n\nans = solution()"
    ],
    "dda1e4bf25b443da8efc70aaf2624bc4": [
        "def solution():\n    from math import lcm\n    ans = lcm(12, 15)\n    return ans\n\nans = solution()"
    ],
    "0f28dcf2c6ad4abeb816c16558e621eb": [
        "def solution():\n    # Half of the remaining mobile phones in February + 13 is 78\n    half_remaining_feb = 78 - 13\n    # Total remaining mobile phones in February is twice the half\n    total_remaining_feb = half_remaining_feb * 2\n    # Total mobile phones before February sale is total remaining + 22 more than half sold in January\n    total_before_feb = total_remaining_feb + (total_remaining_feb // 2) + 22\n    # Total mobile phones at first is twice the half sold in January + 1 (since original total is an odd number)\n    total_initial_phones = (total_before_feb // 2) * 2 + 1\n\n    return total_initial_phones\n\nans = solution()"
    ],
    "8601fccdea1547d8bdbea5b58f76c291": [
        "def solution():\n    # Calculate the original number from the fraction given\n    original_number = (18 * 7) / 3\n\n    # Calculate the required fraction of the original number\n    required_fraction = (original_number * 5) / 6\n\n    return required_fraction\n\nans = solution()"
    ],
    "8eceffc0fa6b407998bd0ae271a1ef01": [
        "def solution():\n    # Calculate the sum of the complete sequence from 3 to 10 and then back to 3\n    # Sum of an arithmetic sequence: S = n/2 * (a1 + an)\n    n_forward = 10 - 3 + 1  # Number of terms from 3 to 10\n    n_backward = 10 - 3  # Number of terms from 10 to 4\n    sum_forward = n_forward / 2 * (3 + 10)\n    sum_backward = n_backward / 2 * (10 + 4)\n    \n    # The total sum of the sequence with missing numbers (3 and 10)\n    total_sum = sum_forward + sum_backward\n    \n    return total_sum\n\nans = solution()"
    ],
    "3a1798bad2d541fcb5c6a144f4ce03cd": [
        "def solution():\n    # In a knockout tournament, each game eliminates one player.\n    # For 'n' players, we need 'n-1' games to determine a winner.\n    num_players = 5\n    games_needed = num_players - 1\n\n    return games_needed\n\nans = solution()"
    ],
    "297e8fe4a3fd48839219bc3a9649f928": [
        "def solution():\n    total_items = 438\n    difference = 50\n\n    pencils = (total_items - difference) / 2\n    return int(pencils)\n\nans = solution()"
    ],
    "9d2c6f4e1357450eaed4a31c6237f2d2": [
        "def solution():\n    avg_jan_to_apr = 500\n    avg_may_to_jul = 300\n    total_aug_to_sep = 400\n    avg_oct_to_dec = 300\n\n    months_jan_to_apr = 4\n    months_may_to_jul = 3\n    months_aug_to_sep = 2\n    months_oct_to_dec = 3\n\n    total_spent_jan_to_apr = avg_jan_to_apr * months_jan_to_apr\n    total_spent_may_to_jul = avg_may_to_jul * months_may_to_jul\n    total_spent_oct_to_dec = avg_oct_to_dec * months_oct_to_dec\n\n    total_spent = total_spent_jan_to_apr + total_spent_may_to_jul + total_aug_to_sep + total_spent_oct_to_dec\n    total_months = months_jan_to_apr + months_may_to_jul + months_aug_to_sep + months_oct_to_dec\n    \n    average_per_month = total_spent / total_months\n\n    return average_per_month\n\nans = solution()"
    ],
    "eeedd7f61d3f499e91214241749f7193": [
        "def solution():\n    boxes = 5\n    apples_per_box = 9\n    apples_from_bud = 16\n\n    total_apples = (boxes * apples_per_box) + apples_from_bud\n\n    return total_apples\n\nans = solution()"
    ],
    "4d8c3d77b070434f8e98c669130876ad": [
        "def solution():\n    total_needed = 70 * 4\n    money_short = 15\n    money_had = total_needed - money_short\n    return money_had\n\nans = solution()"
    ],
    "24ae47ec3af142b6a27136a41410c388": [
        "def solution():\n    count = 0\n    for i in range(4, 52):\n        count += str(i).count('3')\n        if i == 23:\n            ans = count\n    return ans\n\nans = solution()"
    ],
    "7b05e8856130431fa24c3121679e2bb7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Pip and Bud's pocket money\n    pip, bud = symbols('pip bud')\n\n    # Equation: Pip has 50 more than Bud\n    equation1 = Eq(pip, bud + 50)\n\n    # Equation: Ratio of the remaining money (after spending) is 6:5\n    equation2 = Eq((pip - 0.8 * pip) / (bud - 3/4 * bud), 6/5)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (pip, bud))\n\n    # Extract the solution for Pip's pocket money\n    return solutions[pip]\n\nans = solution()"
    ],
    "252c59d9b9aa4aa9b64d371d39a82574": [
        "def solution():\n    num_people = 5\n    num_games = num_people - 1  # In a knockout tournament, each game eliminates one player until one winner remains\n\n    return num_games\n\nans = solution()"
    ],
    "33067bcb25344c1d903a52e71d15db47": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anna, betsy, charlene = symbols('anna betsy charlene')\n\n    equation1 = Eq(anna + betsy + charlene, 168)\n    equation2 = Eq(anna + 8, (betsy - 15 - 8) * 2)\n    equation3 = Eq((betsy - 15) * 5, (charlene + 15) * 2)\n\n    solutions = solve((equation1, equation2, equation3), (anna, betsy, charlene))\n\n    return solutions[betsy]\n\nans = solution()"
    ],
    "51a7705457af49c88147499591a76612": [
        "def solution():\n    numbers = [19, 6, 12, 13, 21, 4, 8, 17]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "1383ca4e525041c99d8fa68660917e37": [
        "def solution():\n    # If the book is on the 8th shelf from the front and 10th from the back,\n    # it means there are 7 shelves before it and 9 shelves after it.\n    # Thus, the total number of shelves is 7 (before) + 1 (the shelf with the book) + 9 (after).\n    # So, the answer is 17.\n    ans = 7 + 1 + 9\n    return ans\n\nans = solution()"
    ],
    "1576b6692de34a408952ede9da9ad5ba": [
        "def solution():\n    from_left = 3\n    from_right = 7\n    from_front = 7\n    from_back = 4\n    \n    # Calculate total number of students in each row and column\n    total_columns = from_left + from_right - 1\n    total_rows = from_front + from_back - 1\n    \n    # Calculate total number of students\n    total_students = total_rows * total_columns\n    \n    return total_students\n\nans = solution()"
    ],
    "22303a6e166b42b9a7f52651f42185f7": [
        "def solution():\n    # Four years ago, the combined age of 2 dogs was 10.\n    combined_age_4_years_ago = 10\n    # Four years have passed since then, so we add 4 years for each dog.\n    combined_age_now = combined_age_4_years_ago + 2 * 4\n    # In 2 more years, we will add 2 more years to the combined age of each dog.\n    combined_age_in_2_years = combined_age_now + 2 * 2\n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "06699a3607d9471db8f9ba87968896ad": [
        "def solution():\n    ans = 3.5 * (4/5) + 5.5 * (80/100) + 0.8\n    return ans\n\nans = solution()"
    ],
    "399908c2f1ad4ee9a7c420afd356fe12": [
        "from sympy import primefactors\n\ndef solution():\n    factors = primefactors(2016) # Prime factors of 2016\n    ages = [2, 2, 2, 2, 2, 3, 3, 7] # 2016 = 2^5 * 3^2 * 7\n    # Since the children are of different ages and under 10, we can group the factors\n    # 2*2*2 = 8 for the oldest child,\n    # remaining: 2*2*7 = 28, but since we need all children to be under 10,\n    # we adjust the grouping to 2*7 = 14 for the next child,\n    # and 3*3 = 9 for the next, leaving the last child with the age of 2.\n    # The ages are 8, 14, 9, 2\n    sum_ages = sum([8, 2, 9, 14])\n    return sum_ages\n\nans = solution()"
    ],
    "f58334bfc17f4a5ba758430811171cb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ten_pence = symbols('ten_pence')\n\n    twenty_pence = 2 * ten_pence\n    five_pence = ten_pence / 2\n\n    total_value = 5 * five_pence + 10 * ten_pence + 20 * twenty_pence\n\n    equation = Eq(total_value, 1575)  # The value should be in pence\n\n    solutions = solve(equation, ten_pence)\n\n    twenty_pence_count = 2 * solutions[0]\n\n    return twenty_pence_count\n\nans = solution()"
    ],
    "9ee836eb0a204a248346cf0a5a814237": [
        "def solution():\n    first_term = 8\n    twelfth_term = 140\n    n = 12\n    \n    common_difference = (twelfth_term - first_term) / (n - 1)\n    \n    return common_difference\n\nans = solution()"
    ],
    "3c267ac100df422598b3c04374b84cda": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let b be the number of boys and g be the number of girls\n    b, g = symbols('b g', integer=True)\n    \n    # Each boy has as many sisters as brothers: sisters = b - 1, brothers = b\n    # Each girl has half as many sisters as brothers: sisters = g - 1, brothers = b\n    equation1 = Eq(g, b - 1)\n    equation2 = Eq(g - 1, b / 2)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (b, g))\n    \n    # Calculate the total number of children\n    num_children = solutions[b] + solutions[g]\n\n    return num_children\n\nans = solution()"
    ],
    "fffededa84664c688f626145cc4d0859": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    \n    # Convert minutes to hours for each segment\n    time_segment = 30 / 60\n\n    # Create equations based on the information given\n    distance_first_30 = x * time_segment\n    distance_second_30 = (x - 20) * time_segment\n    distance_third_30 = (x + 10) * time_segment\n    \n    # Calculate the total distance traveled which is equal to 70 miles\n    total_distance = Eq(distance_first_30 + distance_second_30 + distance_third_30, 70)\n\n    # Solve the equation for x\n    solution = solve(total_distance, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "98507f7a1ab04ff5987283dcfdf7b586": [
        "def solution():\n    remaining_percentage = 1 - 3/5\n    original_mass = 60 / remaining_percentage\n    return original_mass\n\nans = solution()"
    ],
    "645e2eb6b0834d9c99a6e7716f19be7a": [
        "def solution():\n    ans = 29 + 6 * (40 - 28) // (34 - 22)\n    return ans\n\nans = solution()"
    ],
    "c7ffcb7a1eca4535a488e6da6a9364f7": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime(2023, 5, 15)  # Assuming the current year is 2023\n    duration = timedelta(weeks=3)\n    end_date = start_date + duration\n\n    return end_date.strftime(\"%B %d\")\n\nans = solution()"
    ],
    "2c96bab18bda4f58822aca3d954a2306": [
        "def solution():\n    first_term = 5\n    last_term = 131\n    difference = 6\n\n    num_students = ((last_term - first_term) // difference) + 1\n\n    return num_students\n\nans = solution()"
    ],
    "db4d028578d9467fa3efdfc0289ceb82": [
        "def solution():\n    sally = 8\n    kelvin = sally + 12\n    ivan = 2 * kelvin\n    return ivan\n\nans = solution()"
    ],
    "c92aa76e3e324a49ad94e03580521716": [
        "def solution():\n    base_10_number = 96\n    base_6_number = ''\n    \n    while base_10_number > 0:\n        remainder = base_10_number % 6\n        base_6_number = str(remainder) + base_6_number\n        base_10_number = base_10_number // 6\n    \n    return int(base_6_number)\n\nans = solution()"
    ],
    "93da49e2550546f48b47327ef5577cd1": [
        "def solution():\n    total_apples = 27\n    children = 5\n\n    # We want to minimize the apples for the kid with the most,\n    # while ensuring that each kid gets a different number of apples.\n\n    # Strategy: distribute apples starting from 1 for the first child and so on,\n    # incrementally, until the remaining apples to the last child will be minimised.\n    \n    # Iterate to find the minimum number of apples for the 5th child\n    min_apples_for_last_child = total_apples\n    for i in range(1, children):  # We consider distributing 1 apple to the first 4 children\n        min_apples_for_last_child -= i\n\n    return min_apples_for_last_child\n\nans = solution()"
    ],
    "ae40978145f94c6f9996c9e966b8c97d": [
        "def solution():\n    total_cost = 6 * 5.50\n    tip = total_cost * 0.10\n    total_payment = total_cost + tip\n    change = 50 - total_payment\n    return change\n\nans = solution()"
    ],
    "f8ccc3d1db7a464b831820a4451322ff": [
        "def solution():\n    seconds_per_minute = 60\n    return seconds_per_minute\n\nans = solution()"
    ],
    "a64f47165f93431bb686e430ed75deeb": [
        "def solution():\n    total_distance = 10\n    day_distance = 4\n    night_distance = 2\n    effective_distance_per_day = day_distance - night_distance\n    \n    # Since the snail climbs 4m on the last day and reaches the top, we subtract this from the total distance.\n    remaining_distance_after_last_climb = total_distance - day_distance\n    \n    # Divide the remaining distance by the effective distance to know on which day the snail reaches the remaining distance.\n    days_to_reach_remaining = remaining_distance_after_last_climb // effective_distance_per_day\n\n    # Add one day for the last climb.\n    ans = days_to_reach_remaining + 1 \n    return ans\n\nans = solution()"
    ],
    "0588ff4a3789420685f1bed8b5f2e9be": [
        "def solution():\n    # Since the player who takes the last marble loses, we work backwards from 26.\n    # If Jason leaves 5 marbles for Belinda, he can ensure his victory.\n    # This is because no matter if Belinda takes 1, 2, or 3 marbles, \n    # Jason can always take the remaining to leave 1 marble for Belinda,\n    # which forces her to take the last one and lose the game.\n    # Thus, Jason needs to make sure that after his first turn and every subsequent turn,\n    # the number of marbles left is 5, 9, 13, 17, 21, or 25.\n    # These numbers are all one more than a multiple of 4.\n    # Since 26 is not one more than a multiple of 4, Jason has to take either 1, 2, or 3 marbles\n    # to leave a multiple of 4.\n    # Jason should take 2 marbles on his first turn to leave 24 marbles, \n    # which is a multiple of 4.\n\n    # Jason takes 2 marbles first.\n    return 2\n\nans = solution()"
    ],
    "29a8a89ddd5447e8affdeb65b7d6869b": [
        "def solution():\n    s = 0\n    n = 1\n    while True:\n        s += 5 * n\n        if s % 2013 == 0:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "54efb1f9d0924e1d8fa4596005959b2a": [
        "def solution():\n    ans = (6/7) * 42\n    return ans\n\nans = solution()"
    ],
    "caf23672c0554b8295549b932bf0889a": [
        "def solution():\n    ans = 953 + 1065\n    return ans\n\nans = solution()"
    ],
    "cd9ad5be90634b298514a198bfb61625": [
        "def solution():\n    ways = []\n    for x1 in range(1, 25):\n        for x2 in range(1, 25):\n            for x3 in range(1, 25):\n                for x4 in range(1, 25):\n                    for x5 in range(1, 25):\n                        for x6 in range(1, 25):\n                            for x7 in range(1, 25):\n                                if x1 + x2 + x3 + x4 + x5 + x6 + x7 == 25 and len(set([x1, x2, x3, x4, x5, x6, x7])) == 7:\n                                    ways.append(sorted([x1, x2, x3, x4, x5, x6, x7]))\n    unique_ways = []\n    for way in ways:\n        if way not in unique_ways:\n            unique_ways.append(way)\n    return unique_ways\n\nans = solution()"
    ],
    "633dae2f3a3e45cb9daaa00438a515d7": [
        "def solution():\n    # Since the alcoholic is not found in two of the bars, there is a 100% chance they are in the third one.\n    return 1\n\nans = solution()"
    ],
    "8e243ca0416749c4ab65f908ade8388d": [
        "def solution():\n    three_sevenths_of_number = 18\n    number = (three_sevenths_of_number * 7) / 3\n    five_sixths_of_number = (number * 5) / 6\n    return five_sixths_of_number\n\nans = solution()"
    ],
    "efa05afe196f4afa960648690f074c1f": [
        "def solution():\n    # Let's denote:\n    # G as the amount of grass (in cow-week units) available at full growth,\n    # r as the weekly growth rate of the grass (in cow-week units per week),\n    # C as the number of cows that can be sustained for 6 weeks.\n\n    # From the information given:\n    # For 120 cows over 12 weeks, we have the equation: 120 * 12 = G + 12r\n    # For 150 cows over 8 weeks, we have the equation: 150 * 8 = G + 8r\n    # Simplify the equations to:\n    # 1440 = G + 12r (1)\n    # 1200 = G + 8r  (2)\n    # Subtracting (2) from (1) to get r\n    # 240 = 4r -> r = 60\n\n    r = 60\n\n    # Substitute the value of r into either (1) or (2) to get G\n    G = 1440 - 12 * r\n    # or G = 1200 - 8 * r (both will give the same result)\n\n    # Now, for 6 weeks, we have the equation: C * 6 = G + 6r\n    # Substitute G and r into the equation to get C\n    C = (G + 6 * r) / 6\n\n    # Return the answer\n    return int(C)\n\nans = solution()"
    ],
    "32f18491c74041d8817a310362816c55": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime.strptime('15/05/2023', '%d/%m/%Y')\n    end_date = start_date + timedelta(weeks=3)\n    return end_date.strftime('%d/%m/%Y')\n\nans = solution()"
    ],
    "e86fd8332fe14c18baddfef75e03ff27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote pencil as 'p' and marker as 'm'\n    p, m = symbols('p m')\n\n    # Given equations\n    equation1 = Eq(3*p + 2*m, 13)\n    equation2 = Eq(2*p + 3*m, 12)\n\n    # Solving for the prices of pencil and marker\n    solutions = solve((equation1, equation2), (p, m))\n\n    # Calculate the total cost of 7 pencils and 7 markers\n    total_cost = (7 * solutions[p]) + (7 * solutions[m])\n\n    return total_cost\n\nans = solution()"
    ],
    "09a3a1d022104884aa725a719c560f60": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    volunteers, trees = symbols('volunteers trees')\n\n    # If each plants 4 trees, 5 trees are left.\n    equation1 = Eq(volunteers * 4 + 5, trees)\n\n    # If each plants 7 trees, 1 volunteer has nothing to plant.\n    # That means, trees are 1 less than a multiple of 7.\n    equation2 = Eq(volunteers * 7 - 7, trees - 1)\n\n    solutions = solve((equation1, equation2), (volunteers, trees))\n\n    return solutions\n\nans = solution()"
    ],
    "b3dcd19bf9ef49f6abe5c02758449b1a": [
        "def solution():\n    return 98 + 6\n\nans = solution()"
    ],
    "662004bd60264ac5b02db70eebf6c2af": [
        "def solution():\n    ans = 3200 - 1476\n    return ans\n\nans = solution()"
    ],
    "aecd8ddb67d4485295695f4d5b6f8788": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bagA, bagB = symbols('bagA bagB')\n\n    # Total number of stickers\n    equation1 = Eq(bagA + bagB, 270)\n\n    # After moving 56 stickers from A to B, B to A ratio is 3:2\n    equation2 = Eq((bagB + 56) / (bagA - 56), 3/2)\n\n    # Solving the equations to find the number of stickers in Bag A at first\n    solutions = solve((equation1, equation2), (bagA, bagB))\n\n    return solutions[bagA]\n\nans = solution()"
    ],
    "6681c9a39b3645079a46a6daf29a4854": [
        "def solution():\n    return (10 * 21) // 14\n\nans = solution()"
    ],
    "aa2c433bd04243828094f4f0da449459": [
        "def solution():\n    # assume that there are n layers\n    # boys will be in layers 1, 3, 5, ..., and girls in layers 2, 4, 6, ...\n    # the boys in the first layer will be n^2\n    # the boys in the third layer will be (n-2)^2\n    # the girls in the second layer will be (n-1)^2\n    # the girls in the fourth layer will be (n-3)^2\n    # this forms two sequences which converge towards the center, one for boys and one for girls\n    \n    # The difference in the number of boys and girls is 55\n    # sum(boys) - sum(girls) = 55 => n^2 + (n-2)^2 + ... - [(n-1)^2 + (n-3)^2 + ...] = 55\n    # We can simplify this expression by combining terms:\n    # n^2 - (n-1)^2 + (n-2)^2 - (n-3)^2 + ... = 55\n    # Each pair n^2 - (n-1)^2 can be simplified to 2n - 1\n    # So we have: (2*n - 1) + (2*(n-2) - 1) + ... = 55\n    \n    # Let's find the layer number n that satisfies this condition\n    n = 1 # starting with 1 layer\n    while True:\n        layer_difference_sum = sum([(2*i - 1) for i in range(n, 0, -2)])\n        if layer_difference_sum == 55:\n            break\n        n += 1\n    \n    # Now calculate the total number of students by summing up boys and girls layers\n    total = sum([i**2 for i in range(n, 0, -1)])\n    \n    return total\n\nans = solution()"
    ],
    "5b97b704f01a431fbcd061cfe8853201": [
        "def solution():\n    difference = 6\n    last_term = 41\n\n    next_term = last_term + difference\n    return next_term\n\nans = solution()"
    ],
    "54e546b3285e46baa909a946531986b5": [
        "def solution():\n    children = 74\n    bars_per_packet = 8\n\n    packets = -(-children // bars_per_packet)  # Ceiling division\n  \n    return packets\n\nans = solution()"
    ],
    "7d4469e90d7e44938c44082c04573041": [
        "def solution():\n    return 5 / 100 * 180\n\nans = solution()"
    ],
    "517f83e2071941a890e20a4e3126cc19": [
        "def solution():\n    def sum_of_factors(n):\n        sum_factors = 1  # start with 1 because it's a factor of every number\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                sum_factors += i\n                if i != n // i:  # add the factor pair\n                    sum_factors += n // i\n        return sum_factors\n    \n    num = 2  # start with the smallest possible perfect number\n    while True:\n        if sum_of_factors(num) == num:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "2d6942e7e2a049b0875a5daaa2d8662f": [
        "def solution():\n    result = 30\n    for i in range(14, 31, 4):\n        result -= (i+2)\n        result += i\n    return result\n\nans = solution()"
    ],
    "31d560632aeb4f189ed15394a994b8ea": [
        "def solution():\n    nth_term = 25\n    common_difference = 28 - 25\n    n = 10\n\n    first_term = nth_term - common_difference * (n - 1)\n\n    return first_term\n\nans = solution()"
    ],
    "6fa5dd836ec04fd1867acfcafb149b3b": [
        "def solution():\n    total_cakes = 80\n    cakes_per_box = 5\n    \n    boxes_needed = total_cakes // cakes_per_box if total_cakes % cakes_per_box == 0 else total_cakes // cakes_per_box + 1\n    \n    return boxes_needed\n\nans = solution()"
    ],
    "09f6f0f9df4e4407bb6d0d93d12f86f3": [
        "def solution():\n    total_sweets = 30\n    kept_for_sister = 6\n    number_of_friends = 6\n\n    sweets_for_friends = (total_sweets - kept_for_sister) // number_of_friends\n\n    return sweets_for_friends\n\nans = solution()"
    ],
    "d0aafdcf41bd41af9f7703e35d618f89": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    lovelle, makayla = symbols('lovelle makayla')\n\n    # Lovelle and Makayla had $3998 muffins altogether\n    equation1 = Eq(lovelle + makayla, 3998)\n\n    # After Lovelle sold 462 muffins and Makayla sold 2/5 of her muffins,\n    # Lovelle and Makayla had an equal number of muffins left\n    equation2 = Eq(lovelle - 462, makayla - (2/5) * makayla)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (lovelle, makayla))\n\n    return solutions[lovelle]\n\nans = solution()"
    ],
    "61cacff2e135446188147ef9331416bf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the total amount of money Irene had initially as 'x'.\n    x = symbols('x')\n\n    # The equation representing the situation is:\n    # (1/4)*x = cost of the book\n    # (2/7)*x = cost of the bag\n    # (1/4)*x + (2/7)*x = 225 (total cost of the book and the bag)\n    equation = Eq((1/4) * x + (2/7) * x, 225)\n\n    # Solve for 'x'.\n    solution = solve(equation, x)\n\n    # Since 'solution' is a list, we need to return the first (and only) element.\n    return solution[0]\n\nans = solution()"
    ],
    "199f98404707430a8c113444383853f4": [
        "def solution():\n    # Use a formula to calculate the maximal number of different positive integers that can add up to 30.\n    # We can get a sequence by subtracting successive numbers (1, 2, 3, ..., n) from 30, until the remaining\n    # is smaller than the next integer to be subtracted.\n    n = 1\n    sum = 0\n    while sum <= 30:\n        sum += n\n        n += 1\n    # As we go one step further with while loop, we decrease n to get the correct number of terms\n    n -= 1\n    return n - 1  # We subtract one because we need the number of unique positive integers\n\nans = solution()"
    ],
    "48c4af399af1492c8496fdcbe4b79ce4": [
        "def solution():\n    # If the card dealer selects 9 cards of each of the 3 smallest groups (4, 8, 12),\n    # he could end up with 9 * 3 = 27 cards without getting 10 cards of the same color.\n    # To ensure he gets 10 cards of one color, he must select one more from any pile.\n    \n    cards_needed = (9 * 3) + 1\n\n    return cards_needed\n\nans = solution()"
    ],
    "7334697b756d4565a7eb61beac61cfb8": [
        "def solution():\n    number_of_daffodils = 8\n    gap_between_daffodils = 1.1\n\n    # The number of gaps is one less than the number of daffodils\n    number_of_gaps = number_of_daffodils - 1\n    total_length_of_gaps = number_of_gaps * gap_between_daffodils\n\n    # The total length of the row includes both the daffodils and the gaps\n    total_length_of_row = total_length_of_gaps + (2 * 0) # daffodils have no thickness\n\n    return total_length_of_row\n\nans = solution()"
    ],
    "e2768d76048543a996b33863b0237436": [
        "def solution():\n    ribbon_length = 87\n    pieces = 30\n\n    length_per_piece = ribbon_length / pieces\n\n    return length_per_piece\n\nans = solution()"
    ],
    "e139050ca60c4fb8ae683ddbe39fd88c": [
        "def solution():\n    num_boxes = 1450\n    books_per_box = 258\n    total_books = num_boxes * books_per_box\n    return total_books\n\nans = solution()"
    ],
    "e79fe3bad58843cb9ba29a747eecfe37": [
        "from itertools import combinations\n\ndef solution():\n    total_stickers = 9\n    boxes = 3\n    count = 0\n    \n    for combo in combinations(range(1, total_stickers), boxes - 1):\n        if sum(combo) == total_stickers and len(set(combo)) == boxes - 1:\n            count += 1\n    \n    return count\n\nans = solution()"
    ],
    "f3c45f5f9fe141138b4274ad08514257": [
        "def solution():\n    distance_to_market = 48\n    walking_speed = 8\n    time_taken = distance_to_market / walking_speed\n    return int(time_taken)\n\nans = solution()"
    ],
    "5d2b6883175743eda687b1bb058d4c89": [
        "from math import comb\n\ndef solution():\n    total_boys = 7\n    total_girls = 5\n    group_size = 4\n\n    # Total ways to choose 4 from 12 students\n    total_ways_without_restriction = comb(total_boys + total_girls, group_size)\n\n    # Total ways to choose 4 girls (which means 0 boys)\n    ways_to_choose_only_girls = comb(total_girls, group_size)\n\n    # Subtracting the ways to choose only girls from the total\n    # ways will give us the ways to choose at least 1 boy.\n    ways_to_choose_with_at_least_one_boy = total_ways_without_restriction - ways_to_choose_only_girls\n\n    return ways_to_choose_with_at_least_one_boy\n\nans = solution()"
    ],
    "81ab24eed7cd4f2296d627d76b1e2ec2": [
        "def solution():\n    # Let x be the missing number.\n    # According to the equation: 1/4 of 16 equals 1/2 of x.\n    # The mathematical representation of the statement is: (1/4)*16 = (1/2)*x\n    \n    # Simplifying the left side (1/4)*16 gives us 4.\n    left_side = (1/4)*16\n    \n    # Now, we want to find x such that 1/2 of x is equal to 4.\n    # So, we need to solve for x in the equation (1/2)*x = 4.\n    # Solving for x gives us x = 4 / (1/2), which simplifies to x = 4 * 2 = 8.\n    \n    # Thus, the missing number is 8.\n    x = 4 / (1/2)\n    \n    return int(x)\n\nans = solution()"
    ],
    "d349a45227c5469c8d98a746d07c5555": [
        "def solution():\n    total_pear = 18\n    total_strawberry = 30\n    total_chocolate = 18\n    number_of_friends = 6\n\n    fruits_per_friend = (total_pear + total_strawberry) // number_of_friends\n\n    return fruits_per_friend\n\nans = solution()"
    ],
    "0116cb5ffe3f43828ce4925528badb2e": [
        "def solution():\n    # After spending 1/4 of her money on a book, 3/4 remains\n    # Of that remaining money, 2/5 is spent on a bag\n    # The bag costs £60, which means 2/5 of the remaining money is £60\n\n    remaining_after_book = 60 / (2/5)\n    total_money = remaining_after_book / (3/4)\n\n    return total_money\n\nans = solution()"
    ],
    "b50f8ca3f787492f9f27c716da3258de": [
        "def solution():\n    x = (15 * 5) / 3\n    return x\n\nans = solution()"
    ],
    "30aa83b2ee3f4ead83de91a226189785": [
        "def solution():\n    x = 5**2\n    y = 6\n    return x * y\n\nans = solution()"
    ],
    "3ef9ddcfb78d4c79b8835fcd29559ed7": [
        "def solution():\n    total_digits = 157\n    digits_used = 0\n    pages = 0\n    \n    while digits_used < total_digits:\n        pages += 1\n        digits_used += len(str(pages))\n    \n    return pages - 1\n\nans = solution()"
    ],
    "ef48001475784ca48f23a6a14697b062": [
        "def solution():\n    for number in range(201, 242, 2):  # Step through odd numbers between 200 and 241\n        if number % 3 == 0 and number % 7 == 0:  # Check if number is divisible by 3 and 7\n            return number\n\nans = solution()"
    ],
    "e9d1fadd4f7340399f406e12d58bc690": [
        "def solution():\n    total_juice = 150\n    # Let's assume the amount Jane drinks is x.\n    # Then, Alex drinks 50% more than Jane, which means Alex drinks 1.5x.\n    # Together, they finish the bottle, so x + 1.5x = 150 ml.\n    # Solving for x gives us the amount Jane drinks, and 1.5x gives us the amount Alex drinks.\n    jane_drinks = total_juice / (1 + 1.5)\n    alex_drinks = 1.5 * jane_drinks\n    return alex_drinks\n\nans = solution()"
    ],
    "6cc6f9f62af04d3f8eb7d700d44ac715": [
        "def solution():\n    ans = (70 / 7 - 7) * 13\n    return ans\n\nans = solution()"
    ],
    "b1362edc59474e289cdb2ea885cdd477": [
        "def solution():\n    for digit1 in range(10):\n        for digit2 in range(10):\n            total_price = int(f\"{digit1}679{digit2}\")\n            if total_price % 72 == 0:\n                unit_price = total_price // 72\n                return unit_price\n\nans = solution()"
    ],
    "1ddfd41822fc4ff5909fb0c086a9e1cc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of students in class B\n    # Then 2x is the number of students in class A\n    # Let c be the total number of candies Miss Jenny has\n    x, c = symbols('x c')\n\n    # We translate the information given into equations\n    equation1 = Eq(4 * (2 * x) - c, -20)  # If 4 candies per student in class A, 20 more needed\n    equation2 = Eq(6 * x - c, 16)         # If 6 candies per student in class B, 16 candies are left\n\n    # Solve the system of equations for x and c\n    solutions = solve((equation1, equation2), (x, c))\n\n    # We want the number of candies, which is c\n    return solutions[c]\n\nans = solution()"
    ],
    "501bce5f0d5c41eb96c1a803d85678b4": [
        "def solution():\n    train_length = 360\n    speed = 40  # m/s\n\n    time_to_pass = train_length / speed\n\n    return time_to_pass\n\nans = solution()"
    ],
    "41e25daefa484ddabc8596daad89dee5": [
        "def solution():\n    # Total number of gaps between peach trees is one less than the number of trees.\n    total_peach_tree_gaps = 41 - 1\n\n    # Total length of the road, based on the peach trees' gaps and the distance between them.\n    total_length = total_peach_tree_gaps * 3\n\n    # Calculate the number of gaps between lamp posts based on the total length of the road.\n    # Since lamp posts are also on both ends of the road, the total length must be divisible\n    # by the distance between the lamp posts to find out the number of gaps.\n    lamp_post_gaps = total_length // 8\n\n    # The number of lamp posts is one more than the number of gaps between them.\n    num_lamp_posts = lamp_post_gaps + 1\n\n    return num_lamp_posts\n\nans = solution()"
    ],
    "65c1681a1cc943ca8fed37eafd2809bd": [
        "def solution():\n    count = 0\n    for i in range(10, 100):   # 2-digit numbers start from 10 to 99\n        if (i // 10 + i % 10) % 5 == 0:  # Sum of digits divisible by 5\n            count += 1\n    return count\n\nans = solution()"
    ],
    "79002f093bcc4697a0f9a3929ef1d7a5": [
        "def solution():\n    ans = 208 // 8\n    return ans\n\nans = solution()"
    ],
    "600b0d1413ee4c7f9c8323852cd824de": [
        "def solution():\n    intervals = 21\n    potted_plants = intervals + 1\n\n    return potted_plants\n\nans = solution()"
    ],
    "44295cc103b24b67af16130f5db0f090": [
        "def solution():\n    total_money = 24\n    spent_on_dvd = total_money / 3\n    remaining_after_dvd = total_money - spent_on_dvd\n    spent_on_book = remaining_after_dvd * 0.25\n    remaining_after_book = remaining_after_dvd - spent_on_book\n    return remaining_after_book\n\nans = solution()"
    ],
    "a22a990372e6459ab93701b27bbe1333": [
        "def solution():\n    initial_rabbits = 32\n    growth_rate_per_year = 3\n    wolves_eating_rate = 0.5\n\n    rabbits_after_first_year = (initial_rabbits * growth_rate_per_year) * (1 - wolves_eating_rate)\n    rabbits_after_second_year = (rabbits_after_first_year * growth_rate_per_year) * (1 - wolves_eating_rate)\n    rabbits_after_third_year = (rabbits_after_second_year * growth_rate_per_year) * (1 - wolves_eating_rate)\n\n    return int(rabbits_after_third_year)\n\nans = solution()"
    ],
    "eb83c6f6832f41feaed4f34edd98a1ca": [
        "def solution():\n    # Calculate the time taken to travel the first mile at 60 mph\n    time_for_mile_at_60mph = 1 / 60\n    # Calculate the time taken to travel the second mile at 30 mph\n    time_for_mile_at_30mph = 1 / 30\n\n    # Calculate the total time taken for 2 miles\n    total_time = time_for_mile_at_60mph + time_for_mile_at_30mph\n    # Total distance traveled\n    total_distance = 2\n\n    # Average speed is total distance divided by total time\n    average_speed = total_distance / total_time\n    \n    return average_speed\n\nans = solution()"
    ],
    "a3995edc2a1a43daa636491bd11f901f": [
        "def solution():\n    wash_price = 1.40\n    target_amount = 12\n    num_washes = target_amount // wash_price + 1\n    return int(num_washes)\n\nans = solution()"
    ],
    "2450c7184dc1494db29badfda3df6350": [
        "def solution():\n    count = 0\n    for number in range(1, 41):\n        if '2' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "64dfb01da35643c0b9de911c9ea05789": [
        "def solution():\n    initial_candies = 2\n    day = 4\n    candies_eaten_on_day = initial_candies * (2 ** (day - 1))\n    return candies_eaten_on_day\n\nans = solution()"
    ],
    "34416f7c5b99456f877168a0fd62da99": [
        "def solution():\n    for number in range(121, 136):\n        if number % 4 == 0 and number % 6 == 0:\n            return number\n\nans = solution()"
    ],
    "875569394f454c87ba59b92ec3568007": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, n = symbols('a n', integer=True)\n    equations = [Eq(290 % n, a), Eq(235 % n, a + 2), Eq(200 % n, a + 5)]\n\n    solutions = solve(equations)\n    for sol in solutions:\n        if sol[n] > 1:\n            return sol[n]\n\nans = solution()"
    ],
    "01a700f22d8440ff98528ae95438b080": [
        "def solution():\n    return 901 - 582\n\nans = solution()"
    ],
    "7a629088064049ac9991a8c0a6a39bc2": [
        "def solution():\n    daily_earnings = 70\n    days_worked = 6\n\n    total_earnings = daily_earnings * days_worked\n\n    return total_earnings\n\nans = solution()"
    ],
    "05067bad937e48738bea7614f9cc4676": [
        "def solution():\n    # Let x be the smallest angle\n    # The other angle is 2x\n    # The sum of angles in a triangle is 180 degrees\n    # We have a right angle which is 90 degrees\n    # So, 90 + x + 2x = 180\n    # Solving for x, we get x + 2x = 180 - 90\n    # 3x = 90\n    # x = 90 / 3\n    x = 90 / 3\n    # The largest angle is 2x\n    largest_angle = 2 * x\n    return largest_angle\n\nans = solution()"
    ],
    "2a9c4ac0af274c21b3b543fdc562d57c": [
        "def solution():\n    for P in range(1, 10):\n        for I in range(10):\n            for S in range(10):\n                if I != S and 4 * (10 * I + S) == (10 * P + I):\n                    return 10 * P + I\n\nans = solution()"
    ],
    "d93d643e886d4754abfa2f90328da9f1": [
        "def solution():\n    total_age = 765\n    # Since the ages are consecutive, we can use the formula for the sum of an arithmetic sequence:\n    # total_age = n/2 * (first_term + last_term), where n is the number of terms\n    # We know that n = 9 (nine elderly members)\n    # We can find the middle term by dividing the total sum by the number of terms and then subtracting 4 (half of n-1)\n    # This works because in an arithmetic sequence, the middle term equals the average of the sequence\n\n    middle_age = total_age // 9\n    return middle_age\n\nans = solution()"
    ],
    "5e8d313c1541406a95c53bcb9f149496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for necklace and earring\n    necklace, earring = symbols('necklace earring')\n\n    # Equation for the first scenario: 9 necklaces + 5 earrings = 1440\n    equation1 = Eq(9 * necklace + 5 * earring, 1440)\n\n    # Equation for the second scenario: 3 necklaces + 1 earring = 438\n    equation2 = Eq(3 * necklace + 1 * earring, 438)\n\n    # Solve the system of equations\n    solution = solve((equation1, equation2), (necklace, earring))\n\n    # Total cost of 1 necklace and 1 earring\n    total_cost = solution[necklace] + solution[earring]\n\n    return total_cost\n\nans = solution()"
    ],
    "91a598b887f6483a86d977ea27f5c731": [
        "def solution():\n    average_mon_to_sat = 3  # average hours of sunshine per day from Monday to Saturday\n    total_sunshine_mon_to_sat = average_mon_to_sat * 6  # total hours of sunshine from Monday to Saturday\n    sunshine_sunday = 10  # hours of sunshine on Sunday\n    days_in_week = 7  # total days in a week\n\n    # Overall total sunshine for the week including Sunday\n    total_sunshine_week = total_sunshine_mon_to_sat + sunshine_sunday\n    \n    # Calculate the average sunshine for the entire week\n    average_sunshine_week = total_sunshine_week / days_in_week\n\n    return average_sunshine_week\n\nans = solution()"
    ],
    "1edc3edaab9048beaf044a5eee61b184": [
        "def solution():\n    walking_speed = 75  # m/min\n    running_speed = 2 * walking_speed  # m/min\n\n    # Total time taken solely by walking\n    total_walking_time = 24  # min\n\n    # Total distance to school if he walks all the way\n    total_distance = total_walking_time * walking_speed\n\n    # Distance covered by walking during the mixed journey\n    walking_distance_half = total_distance / 2\n\n    # Time taken to walk half the distance\n    walking_time_half = walking_distance_half / walking_speed\n\n    # Distance covered by running during the mixed journey, which is the other half\n    running_distance_half = total_distance / 2\n\n    # Time taken to run half the distance\n    running_time_half = running_distance_half / running_speed\n\n    # Total time taken during the mixed journey\n    total_mixed_time = walking_time_half + running_time_half\n\n    return total_mixed_time\n\nans = solution()"
    ],
    "13d1dc22063b44a6bfd3c253184381b8": [
        "def solution():\n    total_trees = 79\n    road_length = 320\n    # Trees are at regular intervals, so there are (total_trees + 1) intervals including both ends.\n    intervals = total_trees + 1\n    # The distance between each tree is the road length divided by the number of intervals.\n    distance_between_trees = road_length / intervals\n    return distance_between_trees\n\nans = solution()"
    ],
    "d02e694f3a564aafaf5019cd2b7a9a4d": [
        "def solution():\n    boys = 120\n    girls = 80\n    boys_saw_movie = boys * 0.5\n    girls_saw_movie = girls * 0.6\n    total_saw_movie = boys_saw_movie + girls_saw_movie\n    return int(total_saw_movie)\n\nans = solution()"
    ],
    "f1b82ff9340a4655b4cf7000c847b825": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    savings = symbols('savings')\n\n    equation = Eq(savings - 1/3*savings - 177 - 129, 1/2 * (1/3 * savings))\n\n    solution = solve(equation, savings)\n\n    return solution[0]\n\nans = solution()"
    ],
    "909e9ffd178a4a82a7e2ba972d438c99": [
        "def solution():\n    total_length = 385\n    cut_length = 15\n    leftover = total_length % cut_length\n    return leftover\n\nans = solution()"
    ],
    "4af0a33072c147caa27c6f6519d84e3f": [
        "def solution():\n    integer_part = 1\n    fractional_part = 3 / 100\n    ans = integer_part + fractional_part\n    return ans\n\nans = solution()"
    ],
    "3676c87ead1a489f9e921d0d75aa36ef": [
        "def solution():\n    num_teams = 8\n    # Every team plays against each other team once, so we use combination formula:\n    # C(n, 2) = n*(n-1)/2\n    num_matches = (num_teams * (num_teams - 1)) // 2\n    return num_matches\n\nans = solution()"
    ],
    "3f5d80aa10384e98a458b98fad0305a2": [
        "def solution():\n    # Partition of the integer 6 into at most 3 parts\n    # 6 = 6\n    # 6 = 5 + 1\n    # 6 = 4 + 2\n    # 6 = 4 + 1 + 1\n    # 6 = 3 + 3\n    # 6 = 3 + 2 + 1\n    # 6 = 3 + 1 + 1 + 1\n    # 6 = 2 + 2 + 2\n    # 6 = 2 + 2 + 1 + 1\n    # 6 = 2 + 1 + 1 + 1 + 1\n    # 6 = 1 + 1 + 1 + 1 + 1 + 1\n\n    # However, as baskets are identical, we don't differentiate between the orders.\n    # So we eliminate duplicate cases to get the following unique distributions:\n    # 6\n    # 5 + 1\n    # 4 + 2\n    # 4 + 1 + 1\n    # 3 + 3\n    # 3 + 2 + 1\n    # 3 + 1 + 1 + 1\n    # 2 + 2 + 2\n    # 2 + 2 + 1 + 1\n    \n    # Therefore, the total number of possibilities is:\n    ans = 9\n    return ans\n\nans = solution()"
    ],
    "fcb6d1b5111d48d9a3ae25817b7ba302": [
        "def solution():\n    sum_of_N = sum(N for N in range(1, 2018) if 2018 % N == 11)\n    return sum_of_N\n\nans = solution()"
    ],
    "1a428efca7154d45b9f95d2f7093cbe7": [
        "def solution():\n    skirts_per_worker = 6\n    total_skirts = 0\n    for day in range(1, 10):\n        total_skirts += day * skirts_per_worker\n    return total_skirts\n\nans = solution()"
    ],
    "494681f041b745a591be1d725abc3a02": [
        "def solution():\n    for chickens in range(9):\n        cows = 8 - chickens\n        if chickens * 2 + cows * 4 == 26:\n            return chickens\n\nans = solution()"
    ],
    "715019fd42ea4f559b0924cbe53893bc": [
        "def solution():\n    ans = (77.5 * 52 / 100) + (5.2 * 2.25)\n    return ans\n\nans = solution()"
    ],
    "0a9deb608fe24aa6b6430859835ac8d7": [
        "def solution():\n    sequence = range(11, 61, 3)  # Start at 11, end before 61, step by 3 (common difference)\n    numbers_in_sequence = [num for num in range(30, 61) if num in sequence]\n    return numbers_in_sequence\n\nans = solution()"
    ],
    "9e5271cce46840fc8756f7236f3fd9b2": [
        "def solution():\n    cost_per_person = 253 / 11\n    total_cost_for_12 = cost_per_person * 12\n    return total_cost_for_12\n\nans = solution()"
    ],
    "f1c6e0272fae419183c3fb080070f9ad": [
        "def solution():\n    # start with single digit numbers\n    digit_count = 9\n    number_length = 1\n\n    # find range with 2023rd digit\n    while True:\n        if 2023 <= digit_count:\n            break\n        number_length += 1\n        start_number = 10**(number_length - 1)\n        end_number = 10**number_length - 1\n        digit_count += (end_number - start_number + 1) * number_length\n\n    # backtrack to the range containing the 2023rd digit\n    digit_count -= (end_number - start_number + 1) * number_length\n    remaining_digits = 2023 - digit_count\n\n    # find the exact number that has the 2023rd digit\n    full_numbers, partial_digit_index = divmod(remaining_digits, number_length)\n    if partial_digit_index == 0:\n        desired_number = start_number + full_numbers - 1\n        digit = int(str(desired_number)[-1])\n    else:\n        desired_number = start_number + full_numbers\n        digit = int(str(desired_number)[partial_digit_index - 1])\n\n    return digit\n\nans = solution()"
    ],
    "6885b2a6b6b54f2d8315a175fa94e91a": [
        "def solution():\n    total_sweets = 138\n    min_sweets_per_student = 5\n\n    # Since the sweets are distributed evenly, the class size would be \n    # a divisor of the total number of sweets.\n    for class_size in range(min_sweets_per_student, total_sweets):\n        if total_sweets % class_size == 0:\n            return class_size\n\nans = solution()"
    ],
    "13dd71975a16405c87357c875ed6c03c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    cost_of_5_bananas = 5 * solutions[banana]\n    return cost_of_5_bananas\n\nans = solution()"
    ],
    "c098a360c7f6486099fd66b709ca7e5a": [
        "def solution():\n    # Total annual income\n    income = 150000\n    # First 50k taxed at 8%\n    tax_on_first_50k = 0.08 * 50000\n    # Remaining income above 50k\n    remaining_income = income - 50000\n    # Total tax paid\n    total_tax_paid = 15000\n    # Tax paid on the remaining income\n    tax_on_remaining_income = total_tax_paid - tax_on_first_50k\n    # Tax rate for the remaining income\n    T_plus_8_percent = tax_on_remaining_income / remaining_income\n    # Subtract the initial 8% to find T\n    T = (T_plus_8_percent * 100) - 8\n    \n    return T\n\nans = solution()"
    ],
    "6d1e50acecb5443699ff1409bbab9ab1": [
        "def solution():\n    total_questions = 25\n    for correct in range(total_questions):\n        incorrect = (total_questions - 1) - correct\n        if (correct * 4) - (incorrect * 2) == 66:\n            return correct\n\nans = solution()"
    ],
    "ae271ee454574a6f9c07ffcb062507f5": [
        "def solution():\n    n = 66 / (3 * 11)\n    return int(n)\n\nans = solution()"
    ],
    "eaa36f2338ce478c9ef3805f3e5db384": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq((rachel - 8) / 3, alice - 8)\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    total_candy = solutions[rachel] + solutions[alice]\n\n    return total_candy\n\nans = solution()"
    ],
    "a024f762eee54f819b5a5c703275d15c": [
        "def solution():\n    total_boys = 432\n    days_in_january = 31\n\n    # Apply Pigeonhole Principle\n    min_boys_per_day = (total_boys + days_in_january - 1) // days_in_january\n\n    return min_boys_per_day\n\nans = solution()"
    ],
    "5810f2c593d14c5d83787fff4babe6f3": [
        "def solution():\n    digits = ['0', '2', '3']\n    three_digit_numbers = set()\n    for i in digits:\n        for j in digits:\n            for k in digits:\n                number = i + j + k\n                if i != '0' and len(set(number)) == len(number):\n                    three_digit_numbers.add(int(number))\n    return len(three_digit_numbers)\n\nans = solution()"
    ],
    "8bebcb024a134af6bd81b9505fe32657": [
        "def solution():\n    first_car_length = 6\n    other_car_length = 4\n    number_of_other_cars = 31 - 1\n    space_between_cars = 5\n    total_space_between_cars = space_between_cars * (31 - 1)\n\n    total_length = first_car_length + (other_car_length * number_of_other_cars) + total_space_between_cars\n\n    return total_length\n\nans = solution()"
    ],
    "5635691adc5141a8867ba1ea8124d38e": [
        "def solution():\n    nth_value = 7  # 7th value in the sequence is 105\n    common_difference = 120 - 105  # common difference between terms\n    first_term = 105 - (nth_value - 1) * common_difference  # calculate the first term\n\n    # calculate the 100th term using the formula: a_n = a_1 + (n - 1) * d\n    hundredth_term = first_term + (100 - 1) * common_difference\n\n    return hundredth_term\n\nans = solution()"
    ],
    "e1990839b31d461db3729e71325eabbd": [
        "def solution():\n    total_chocolates = 5 * 10\n    chocolates_given = 23\n    chocolates_left = total_chocolates - chocolates_given\n    return chocolates_left\n\nans = solution()"
    ],
    "d1a178f9942d41d9a82ed3706f2e8f56": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    cards = ['0', '3', '5', '8']\n    perm = permutations(cards)\n    for p in perm:\n        if p[0] != '0' and int(''.join(p)) > 5000:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "4ff16f5b62234dcaa6dfb47ec0b97611": [
        "from itertools import permutations\n\ndef solution():\n    count = 0 \n    students = ['A', 'B', 'C', 'D', 'E', 'F', 'G']\n    for p in permutations(students):\n        a_index = p.index('A')\n        b_index = p.index('B')\n        c_index = p.index('C')\n        d_index = p.index('D')\n        e_index = p.index('E')\n        \n        # A wants to stand in the middle of B and C\n        if not (b_index < a_index < c_index or c_index < a_index < b_index):\n            continue\n        \n        # D and E want to be next to each other\n        if abs(d_index - e_index) != 1:\n            continue\n        \n        count += 1\n    \n    return count\n\nans = solution()"
    ],
    "eb2770c6e3204216b75646ea3e20a071": [
        "def solution():\n    return 5272 // 4\n\nans = solution()"
    ],
    "6e587e1396e4469da9fb76d1a63500a8": [
        "def solution():\n    # Given Sarah's ratio is 3 and she received 12 sweets:\n    sarah_ratio = 3\n    sarah_sweets = 12\n\n    # Calculate the value of 1 part in the ratio\n    one_part = sarah_sweets / sarah_ratio\n    \n    # Calculate the total number of sweets based on the ratio 2:3:5\n    total_sweets = one_part * (2 + 3 + 5)  # Sue's part + Sarah's part + Ian's part\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "0ff88920dd05452c8edcdf168d81d61a": [
        "def solution():\n    biscuits_cost_per_packet = 73  # in Pence\n    cakes_cost_per_unit = 113  # in Pence (1 Pound 13 Pence)\n    total_cost_in_pence = (7 * biscuits_cost_per_packet) + (9 * cakes_cost_per_unit)\n    \n    # Convert total cost back to Pounds (since there are 100 pence in a pound)\n    total_cost_in_pounds = total_cost_in_pence / 100\n    \n    # Amount Malcolm has in Pounds\n    malcolm_amount = 20  # in Pounds\n    \n    # Change received in Pounds\n    change_in_pounds = malcolm_amount - total_cost_in_pounds\n    return change_in_pounds\n\nans = solution()"
    ],
    "5526c23ffd024f3697e30d23a595af55": [
        "def solution():\n    growth_rate = 1/5\n    current_length = 30\n    original_length = current_length / (1 + growth_rate)\n    return original_length\n\nans = solution()"
    ],
    "66db04ea675e442a808a4648e3bb0e13": [
        "def solution():\n    # simple addition of litre values\n    litres_week1 = 27\n    litres_week2 = 25\n    litres_week3 = 30\n\n    # sum of all the litres filled in the 3 weeks\n    total_litres = litres_week1 + litres_week2 + litres_week3\n    \n    return total_litres\n\nans = solution()"
    ],
    "64578896b85247a5bc8033060abe3385": [
        "def solution():\n    return 734 * 58\n\nans = solution()"
    ],
    "8b535506c66e4092b2c7ac1a8fd5a43f": [
        "def solution():\n    piles = 6\n    apples_per_pile = 8\n    total_apples = piles * apples_per_pile\n    return total_apples\n\nans = solution()"
    ],
    "973a7aa6ad0b475ca38055bf318f176b": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    sam, peter = symbols('sam peter')\n    sam_start = peter + 40\n    peter_to_sam = sam_start * 0.20\n    sam_end = sam_start - peter_to_sam\n    peter_start = sam_start - 40\n    sam_from_peter = (peter_start + peter_to_sam) * 0.25\n    final_sam = sam_end + sam_from_peter\n    final_peter = (peter_start + peter_to_sam) - sam_from_peter\n    equation = Eq(final_sam - final_peter, 96)\n\n    initial_peter_stickers = solve(equation, peter)\n    \n    return initial_peter_stickers[0]\n\nans = solution()"
    ],
    "0e99723387294b9f9f858dfe311b994f": [
        "def solution():\n    ans = 1.8 - 0.57\n    return ans\n\nans = solution()"
    ],
    "a520cd6b98004192bc4c2d780f54359e": [
        "def solution():\n    tops = 4\n    bottoms = 5\n    combinations = tops * bottoms\n    return combinations\n\nans = solution()"
    ],
    "f6c67f2f93b44bc79f64e534dcd8fb1b": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (3, 5), (3, 6), (3, 9)]\n    ans_tuple = solve_congruence(*congruences)\n\n    return ans_tuple[0]\n\nans = solution()"
    ],
    "d995898eb3f8495b80d5b29890be42a1": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    lunch_end_time = datetime.strptime(\"14:50\", \"%H:%M\")\n    total_minutes_before_lunch = 10 + 20 + 20\n    home_arrival_time = lunch_end_time - timedelta(minutes=total_minutes_before_lunch)\n    return home_arrival_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "e4365323b3f24240b896655358cb30ad": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"12:40\", \"%H:%M\")\n    duration = timedelta(hours=2, minutes=40)\n    departure_time = arrival_time + duration\n    return departure_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "b7b9b80dff99475f987ad65337577b2b": [
        "from itertools import permutations\n\ndef solution():\n    # For 3-digit numbers, we avoid leading zeros by not using 0 as the first digit\n    # Hence, we have 3 options for the first digit (2, 1, or 7), and then we permute the remaining digits\n    three_digit_numbers = len(list(permutations('217', 3)))  # 3 choices for the first digit, then permute the other 2\n    \n    # For 4-digit numbers, we can simply permute all 4 digits since the leading zero is not an issue\n    four_digit_numbers = len(list(permutations('2017', 4)))  # Permute all 4 digits\n    \n    # The total number is the sum of both\n    total = three_digit_numbers + four_digit_numbers\n    \n    return total\n\nans = solution()"
    ],
    "d47ef27ff4d24d97b0950971a5d0ebae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 * (x - 5) - 3, 6)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "9fcfa23fda9646908ef7e4baafdfbb8e": [
        "def solution():\n    result = 6.5 / 0.5\n    return result\n\nans = solution()"
    ],
    "9fc589a666df49d2893ceb77b7ad8793": [
        "def solution():\n    return 887 + 96\n\nans = solution()"
    ],
    "238dd80b8a46477eaafb237f243e1492": [
        "def solution():\n    first_term = 5\n    common_difference = 3\n    num_of_terms = 14\n    \n    last_term = first_term + (num_of_terms - 1) * common_difference\n    sum_of_terms = (num_of_terms * (first_term + last_term)) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "de62c39c82f94cadada80699ccead608": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_crystals = symbols('initial_crystals')\n\n    equation = Eq(initial_crystals / 2 + 10 - 14 + 20, 35)\n\n    solutions = solve(equation, initial_crystals)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "74259b5e9ab14d9f87fc462cc2c9c9c4": [
        "def solution():\n    digits = [0, 1, 5, 8]\n    # Remove 0 from the list for the first digit to ensure it's a three-digit number\n    possible_first_digits = [1, 5, 8]\n    \n    # Generate all possible 3-digit numbers\n    possible_numbers = []\n    for first_digit in possible_first_digits:\n        for second_digit in digits:\n            for third_digit in digits:\n                if first_digit != second_digit and first_digit != third_digit and second_digit != third_digit:\n                    possible_numbers.append(first_digit * 100 + second_digit * 10 + third_digit)\n    \n    # Find the maximum and minimum 3-digit numbers\n    max_number = max(possible_numbers)\n    min_number = min(possible_numbers)\n    \n    # Find the difference\n    return max_number - min_number\n\nans = solution()"
    ],
    "bc434e7f2cc44029adcb3a3799e67e66": [
        "def solution():\n    # Since the pattern is 1 black, 2 white, 2 grey, the total pattern length is 5 rabbits.\n    pattern_length = 5\n    # We are given there are 14 grey rabbits.\n    grey_rabbits = 14\n    # Every pattern has 2 grey rabbits.\n    grey_per_pattern = 2\n    # Calculate the number of complete patterns with an integer division.\n    complete_patterns = grey_rabbits // grey_per_pattern\n    # Calculate the number of grey rabbits within complete patterns.\n    grey_in_complete_patterns = complete_patterns * grey_per_pattern\n    # Calculate the number of additional grey rabbits outside of complete patterns.\n    additional_grey = grey_rabbits - grey_in_complete_patterns\n    # Calculate the total number of rabbits in complete patterns.\n    total_rabbits_in_complete_patterns = complete_patterns * pattern_length\n\n    # If additional_grey is 0, then we have only complete patterns.\n    if additional_grey == 0:\n        # No extra rabbits beyond complete patterns.\n        additional_rabbits = 0\n    else:\n        # Since the pattern starts with a black rabbit, if there's any additional grey rabbit,\n        # there must be at least 1 black and 2 white rabbits before them, making up a total of 3 additional rabbits.\n        additional_rabbits = 3\n\n    # Therefore, the minimum number of rabbits is the sum of rabbits in complete patterns and any additional rabbits.\n    min_rabbits = total_rabbits_in_complete_patterns + additional_rabbits\n    \n    return min_rabbits\n\nans = solution()"
    ],
    "9008be14593f40169be1110ccfe7e329": [
        "def solution():\n    x = 1\n    while True:\n        if (x % 3 == 2) and (x % 4 == 2) and (x % 5 == 2) and (x % 7 == 1):\n            return x\n        x += 1\n\nans = solution()"
    ],
    "249b1679bd9a4e0cab73014b4563c817": [
        "def solution():\n    import math\n    # Find the Greatest Common Divisor (GCD) for the three class sizes.\n    gcd = math.gcd(math.gcd(12, 15), 18)\n    return gcd\n\nans = solution()"
    ],
    "a2724e23a1a2486ba4b16942479338fe": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1234'\n    even_digits = '24'\n    count = 0\n    # Generate permutations for the first three digits\n    for p in permutations(digits, 3):\n        # The last digit must be an even number to make the whole number even\n        for last_digit in even_digits:\n            if last_digit not in p:\n                count += 1\n    return count\n                \nans = solution()"
    ],
    "b00aab6ff6404d4c8fdb343288b6e0d9": [
        "def solution():\n    return 37 * 27\n\nans = solution()"
    ],
    "b89dd263e0b74d39b39fc4d3fdbfb49e": [
        "def solution():\n    def count_nines(n):\n        count = 0\n        for i in range(1, n + 1):\n            count += str(i).count('9')\n        return count\n\n    low = 1\n    high = 1000\n    while low < high:\n        mid = (low + high) // 2\n        if count_nines(mid) < 181:\n            low = mid + 1\n        else:\n            high = mid\n\n    if count_nines(low) == 181:\n        return low\n    else:\n        return -1\n\nans = solution()"
    ],
    "19787e6cd66e47d59c4f1aa7b622367f": [
        "def solution():\n    factors_of_180 = sum(1 for i in range(1, 181) if 180 % i == 0 and i % 9 == 0)\n    return factors_of_180\n\nans = solution()"
    ],
    "780536f26cf94aaead22cb26adb13a45": [
        "def solution():\n    sarah_age = 24\n    peter_age = sarah_age / 2\n    mike_age = (2 / 3) * peter_age\n    total_age = sarah_age + peter_age + mike_age\n\n    return total_age\n\nans = solution()"
    ],
    "ac06ad0afb9a4d7289d8a8d0c7948dbb": [
        "def solution():\n    ans = 25 * 6\n    return ans\n\nans = solution()"
    ],
    "2fca64d5949f47de80b3591fd9ab16fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    u = symbols('u')\n    equation = Eq(340 - 2*u, 5*u - 220)\n\n    solutions = solve(equation, u)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "45c4e765f9d9484cb09882339459ff20": [
        "def solution():\n    for a in range(10):\n        number = int(f\"26{a}539\")\n        if number % 9 == 0:\n            return a\n\nans = solution()"
    ],
    "cb7a55fac46240dfb8afe8d50e4bb828": [
        "def solution():\n    principal = 10000\n    rate = 0.05\n    time = 3\n\n    amount = principal * ((1 + rate) ** time)\n\n    return amount\n\nans = solution()"
    ],
    "eff977d9b7e24c4898ee8a2de20024aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    yi_yen, kyra = symbols('yi_yen kyra')\n    \n    equation1 = Eq(yi_yen + kyra, 100)\n    equation2 = Eq(yi_yen, 4 * kyra)\n\n    solutions = solve((equation1, equation2), (yi_yen, kyra))\n\n    return solutions[yi_yen]\n\nans = solution()"
    ],
    "48194ec32ba347e09ddad0af6959c376": [
        "def solution():\n    price_per_box = 2.89\n    number_of_boxes = 12\n    total_cost = price_per_box * number_of_boxes\n    return total_cost\n\nans = solution()"
    ],
    "5dfa1ffa102441ac98eb20610ee9be00": [
        "def solution():\n    # Calculate the number of sweets that can be bought in bundles of three\n    bundle_price = 30\n    single_price = 12\n    budget_pence = 200\n    \n    max_bundles = budget_pence // bundle_price\n    remaining_budget = budget_pence % bundle_price\n    \n    # Calculate the number of additional sweets that can be bought with the remaining budget\n    additional_sweets = remaining_budget // single_price\n\n    # Calculate the total number of sweets\n    total_sweets = (max_bundles * 3) + additional_sweets\n    \n    return total_sweets\n\nans = solution()"
    ],
    "f9e42807c5be4058858957db5e1c9c1f": [
        "def solution():\n    may_age = 7\n    future_may_age = 10\n    kenny_older_by = 2\n\n    # Let's denote the current age of Kenny's brother as 'b'\n    # When May is 10, Kenny's brother will be b + (10 - 7) = b + 3\n    # Kenny will be (b + 3) + 2 because Kenny is 2 years older than his brother.\n    # According to the problem, at that time, the sum of Kenny and his brother's age will be 3 times May's age when she is 10.\n    # So, we get the equation: (b + 3) + (b + 3 + 2) = 3 * 10\n\n    # Solving for b we get\n    b = symbols('b')\n    equation = Eq((b + 3) + (b + 3 + kenny_older_by), 3 * future_may_age)\n    brother_age = solve(equation, b)\n\n    # Kenny's current age would be brother_age + 3 (as the brother will age 3 years when May is 10) + kenny_older_by\n    kenny_age = brother_age[0] + 3 + kenny_older_by\n\n    # The difference in age between Kenny and May this year\n    return kenny_age - may_age\n\nans = solution()"
    ],
    "45a248898f1c4807b784e259bea7cd69": [
        "from math import comb\n\ndef solution():\n    # To place n identical objects into k different boxes with each box having \n    # at least one object, use the formula comb(n - 1, k - 1).\n    # This is also known as \"stars and bars\" problem, where we have n stars (balls)\n    # and k - 1 bars (divisions between boxes) to place.\n\n    balls = 10\n    boxes = 7\n    # Since we want at least one ball in each box, we distribute one ball to each box\n    # and then distribute the remaining.\n    remaining_balls = balls - boxes\n    \n    # The number of ways to distribute remaining balls into boxes is the number of \n    # ways to place the bars (dividers) among the balls.\n    ans = comb(remaining_balls + boxes - 1, boxes - 1)\n    \n    return ans\n\nans = solution()"
    ],
    "bc11b31a4a6140a59472be824b99ccf9": [
        "def solution():\n    # In the game where Felix and John take turns eating candies,\n    # Felix can ensure victory by going first and complying with the following strategy:\n    # 1. Eat 1 candy on the first turn.\n    # 2. On every subsequent turn, Felix should eat enough candies to make the \n    #    total number eaten so far a multiple of 3.\n    \n    # By doing so, Felix ensures that he always reaches a state of the game where\n    # the total number of candies eaten so far is 7 (since 7 is the greatest\n    # multiple of 3 that is less than 10). This means that there are 3 candies left.\n    # No matter whether John eats 1 or 2 candies on his turn, Felix will always be able\n    # to eat the remaining candies and win.\n    \n    # Felix should go first with the described strategy to ensure victory.\n    return \"first\", \"Eat 1 candy then make the total a multiple of 3\"\n\nans = solution()"
    ],
    "31e292cd70e349bb90992c388528e37a": [
        "def solution():\n    # Let the total volume of the tank be x litres\n    # If he uses a 5-litre pail, then the tank volume is x = 5n + 4, where n is the number of full pails.\n    # If he uses a 3-litre pail, then the tank volume is x = 3m - 4, where m is the number of full pails plus 4 extra pails.\n    # Solving these two equations will give us the value of x, the total volume of the tank.\n\n    # We need to find two numbers 5n + 4 and 3m - 4 that are equal by brute force since the numbers are not large.\n    n = 1\n    while True:\n        volume_with_5 = 5 * n + 4  # Volume if using 5-litre pails\n        # Check if (volume_with_5 - 4) is divisible by 3, since that would be the case if 3-litre pails could fill it\n        if (volume_with_5 - 4) % 3 == 0:\n            m = (volume_with_5 - 4) // 3\n            if m == n + 4: # There are 4 more 3-litre pails than 5-litre pails\n                break\n        n += 1\n\n    return volume_with_5\n\nans = solution()"
    ],
    "49251eb5b4424b0f98bd1041d8e0da15": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (x + 3), 50 - x + 3)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "00ac4d063d6648e78bb7009c03d426bf": [
        "def solution():\n    total_length = 305\n    pipe_length = 5\n    num_pipes = total_length / pipe_length\n    return int(num_pipes) + (1 if total_length % pipe_length else 0)\n\nans = solution()"
    ],
    "850134f061fd402ea63d73775d0910fc": [
        "def solution():\n    ans = (38 + 8 * 9 - 15) / 5\n    return ans\n\nans = solution()"
    ],
    "b4734a26463d4091ba7a023c1ba461ca": [
        "def solution():\n    count = 0  # Initialize count for numbers underlined exactly twice\n    \n    # Iterate through all the numbers from 1 to 2016 (inclusive)\n    for i in range(1, 2017):\n        # Initialize a variable to keep track of the number of underlines for the current number\n        underlines = 0\n\n        # Check for multiples of two and increment the underlines count\n        if i % 2 == 0:\n            underlines += 1\n        # Check for multiples of three and increment the underlines count\n        if i % 3 == 0:\n            underlines += 1\n        # Check for multiples of four and increment the underlines count\n        if i % 4 == 0:\n            underlines += 1\n        \n        # If a number is multiple of 4, it is also a multiple of 2 (so we skip that case)\n        # Therefore, we only care about the numbers that are multiples of 2 and 3 but not 4\n        if underlines == 2 and i % 4 != 0:\n            count += 1\n    \n    return count\n\nans = solution()"
    ],
    "89fd0157409641fc9cb98637c2461cfa": [
        "def solution():\n    pages = 0\n    times = 0\n    while True:\n        pages += 1\n        times += str(pages).count('3')\n        if times == 28:\n            break\n    return pages\n\nans = solution()"
    ],
    "4e3792c14b8148b28eb1c6fbd6164292": [
        "def solution():\n    original_amount = 50 + 20 + 10 + 5\n    brother_amount = original_amount / 2\n    \n    coins = [50, 20, 10, 5]\n    \n    for coin in coins:\n        if original_amount - coin == 2 * brother_amount:\n            return coin\n\nans = solution()"
    ],
    "697ff89b7a8e49d59bb66c994a87d7b9": [
        "from math import comb\n\ndef solution():\n    # Number of ways to pick 4 girls out of 8\n    girls_ways = comb(8, 4)\n    # Number of ways to pick 3 boys out of 12\n    boys_ways = comb(12, 3)\n\n    # Total number of ways is the product of the two possibilities\n    total_ways = girls_ways * boys_ways\n    return total_ways\n\nans = solution()"
    ],
    "09a97d605e2e4cabb643032c99b282ed": [
        "def solution():\n    # Calculate the sum of the 4 numbers with each average\n    sums = [36 * 4, 38 * 4, 39 * 4, 45 * 4, 49 * 4]\n\n    # Sum up sums to get combined total of all numbers (including repeat additions)\n    total_sum = sum(sums)\n    \n    # Since each number was added 4 times, we can divide total_sum by 4 to get\n    # the sum of the 5 unique numbers\n    unique_sum = total_sum // 4\n    \n    # Find the sum of the smallest 4 numbers\n    smallest_sum = sum(sorted(sums)[:4])\n    \n    # The largest number is then total sum of unique numbers minus the smallest sum\n    largest_number = unique_sum - smallest_sum\n    \n    return largest_number\n\nans = solution()"
    ],
    "0f831cd802e74004acc53b99817c46c5": [
        "def solution():\n    first_bus_time = 15*60 + 55  # Convert 15.55 to minutes\n    second_bus_time = 16*60 + 35 # Convert 16.35 to minutes\n    arrive_time = first_bus_time + 4  # 4 minutes late for the first bus\n\n    wait_time = second_bus_time - arrive_time  # Time to wait for the second bus\n    return wait_time\n\nans = solution()"
    ],
    "de21fb1f2c5c4002bd75f2837252b916": [
        "def solution():\n    return 456 - (170 - 144)\n\nans = solution()"
    ],
    "804f12c690c0453fbb8f0a21ecaea5b2": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    boys, girls = symbols('boys girls')\n    total_students = 152\n\n    # Equation representing the total number of students\n    equation1 = Eq(boys + girls, total_students)\n\n    # Equation after removing 1/11 of boys and 5 girls, they become equal\n    equation2 = Eq(boys - boys / 11, girls - 5)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "6161662a5ed44368b8a03f001cc375ea": [
        "def solution():\n    road_length = 40\n    distance_between_trees = 5\n\n    number_of_trees = (road_length / distance_between_trees) + 1\n\n    return int(number_of_trees)\n\nans = solution()"
    ],
    "aba1fa935b644d9ab044d095de69983d": [
        "def solution():\n    import math\n    total_workers = 70\n    capacity_per_lorry = 8\n    \n    num_lorries = math.ceil(total_workers / capacity_per_lorry)\n    \n    return num_lorries\n\nans = solution()"
    ],
    "02d7ef47aaab4c4bbec478d089387344": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    men, women = symbols('men women')\n    equation1 = Eq(women, 4 * men)\n    equation2 = Eq(women, men + 126)\n\n    solutions = solve((equation1, equation2), (men, women))\n\n    total_people = solutions[men] + solutions[women]\n\n    return total_people\n\nans = solution()"
    ],
    "c78925a177374d8b82f3a67f599df2e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, louise = symbols('andrew louise')\n    equation1 = Eq(andrew, 3 * louise)\n    equation2 = Eq(andrew + louise, 84)\n\n    solutions = solve((equation1, equation2), (andrew, louise))\n\n    return solutions[louise]\n\nans = solution()"
    ],
    "43b3978e200e47a993909c47ecd3ded2": [
        "def solution():\n    pages_first_three_days = 40\n    average_pages_next_four_days = 20\n    pages_last_two_days = 60\n\n    total_pages = pages_first_three_days + (average_pages_next_four_days * 4) + pages_last_two_days\n    return total_pages\n\nans = solution()"
    ],
    "324ea1c40561423abe7bda23ae7ac925": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Define the congruences based on the problem statement\n    congruences = [(3, 4), (3, 5), (3, 9)]\n\n    # Solve the system of congruences using the Chinese Remainder Theorem\n    crt_sol = solve_congruence(*congruences)\n\n    # Extract only the solutions that are three-digit numbers and less than 200\n    ans = [number for number in crt_sol if 100 <= number[0] < 200]\n\n    # Return the first (and only) solution that satisfies the criteria\n    return ans[0][0] if ans else None\n\nans = solution()"
    ],
    "8389523689d7482abe8ecaa9a5b6b9ca": [
        "def solution():\n    students_per_room_option1 = 4\n    students_per_room_option2 = 5\n\n    # Using the given condition, we create two equations:\n    # Option 1: total_students = 4 * number_of_rooms + 6\n    # Option 2: total_students + 1 * 5 = 5 * (number_of_rooms + 1)\n\n    # Since the total number of students must be the same in both cases:\n    # 4 * number_of_rooms + 6 = 5 * (number_of_rooms + 1)\n    # Solving for number_of_rooms\n\n    number_of_rooms = symbols('number_of_rooms')\n    equation = Eq(4 * number_of_rooms + 6, 5 * (number_of_rooms + 1))\n\n    # Solve the equation\n    number_of_rooms_solution = solve(equation, number_of_rooms)[0]\n\n    # Now calculate the total number of students from any of the above equations.\n    total_students = 4 * number_of_rooms_solution + 6\n\n    return total_students\n\nans = solution()"
    ],
    "a1289345588b4eea9e075413d1d189c7": [
        "def solution():\n    count = 0\n    for dice1 in range(1, 7):\n        for dice2 in range(1, 7):\n            for dice3 in range(1, 7):\n                if dice1 != dice2 and dice2 != dice3 and dice1 != dice3:\n                    if dice1 + dice2 + dice3 == 12:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "06964238b9a24ef7b303a09d9b1c85c7": [
        "def solution():\n    bill_age = 70\n    grandsons_ages = [6, 12, 18]\n    \n    while True:\n        bill_age += 1\n        grandsons_ages = [age + 1 for age in grandsons_ages]\n        if bill_age == sum(grandsons_ages):\n            break\n    \n    return bill_age\n\nans = solution()"
    ],
    "1774a1190e9c46c2aacaa2e8fc28e2da": [
        "def solution():\n    total_initial = 7 * 9\n    total_final = 6 * 10\n    number_removed = total_initial - total_final\n    return number_removed\n\nans = solution()"
    ],
    "2758e86259aa42e29a0318d2bdb3a711": [
        "def solution():\n    total_people = 120\n    people_left = total_people * (1/3)\n    people_remaining = total_people - people_left\n    return int(people_remaining)\n\nans = solution()"
    ],
    "fd395dd46af44c2fba9a202703ad88e8": [
        "def solution():\n    x = (16 - 1) / 5\n    return x\n\nans = solution()"
    ],
    "314a52b81cf948798c3eb0b23a09fb4e": [
        "def solution():\n    total_marks = 79\n    correct_mark = 5\n    incorrect_deduction = 2\n    total_questions = 20\n\n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        # The \"hypothesis\" method for this Chicken-Rabbit type problem:\n        # Assume all questions were answered correctly first and then reduce the score\n        # by swapping a correct answer (-correct_mark) with an incorrect one (+incorrect_deduction)\n        if (correct_answers * correct_mark) - (incorrect_answers * incorrect_deduction) == total_marks:\n            return correct_answers\n\nans = solution()"
    ],
    "9562aafe97384f7ea95275fcb79e1da2": [
        "def solution():\n    from math import lcm\n    next_time = lcm(15, 12, 8)\n    \n    hours = next_time // 60\n    minutes = next_time % 60\n\n    # Add the hours and minutes to the initial 10:00 am\n    hours += 10\n    \n    # If the minutes exceed 59, add an hour and correct minutes\n    if minutes > 59:\n        hours += 1\n        minutes -= 60\n        \n    # If the hours exceed 23, reset to 0 (for the next day)\n    if hours > 23:\n        hours -= 24\n        \n    return f'{hours:02d}:{minutes:02d}'\n\nans = solution()"
    ],
    "770aa7f2ec2448dfb419dc832282a417": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(56 - 4 * (20 - 6 * x), 48)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "98f594e37f074962982921040758a2f4": [
        "def solution():\n    count = 0\n    for i in range(1, 106):\n        count += str(i).count('0')\n    return count\n\nans = solution()"
    ],
    "60370cf36b164039b0b08b75d45daf26": [
        "def solution():\n    total_students = 52\n    swimmers = 30\n    cyclists = 35\n    table_tennis_players = 42\n\n    # By inclusion-exclusion principle for three sets:\n    # |A ∪ B ∪ C| = |A| + |B| + |C| - |A ∩ B| - |A ∩ C| - |B ∩ C| + |A ∩ B ∩ C|\n    # Let x be the number of students who play all three sports, we want to minimize x\n    # The total number of students is also the union of the three sets\n    # 52 = 30 + 35 + 42 - (sum of pairwise intersections) + x\n    # The minimum x can be is when the sum of pairwise intersections is maximized.\n    # Since no set size can be greater than the total number of students,\n    # the maximum intersection of any two sets is the size of the smallest set: min(30, 35, 42) = 30\n    # But adding up three times the smallest set size overestimates the count, because some students could be in\n    # all three categories, we know that maximum possible pairwise intersections are bounded by:\n    # 30 (swimmers and cyclists) + 30 (swimmers and table tennis players) + 35 (cyclists and table tennis players)\n\n    max_possible_pairwise_intersections = min(swimmers, cyclists) + min(swimmers, table_tennis_players) + min(cyclists, table_tennis_players)\n    x = swimmers + cyclists + table_tennis_players - max_possible_pairwise_intersections - total_students\n\n    # Since this is a minimum, if x is negative it means there are no students playing all three sports,\n    # but since we want the least possible number, we'll assume there's at least one.\n    return max(x, 0)\n\nans = solution()"
    ],
    "7a6352d69d43478d857666ac24c5efac": [
        "def solution():\n    a = 3999\n    b = 2014.2014\n    c = 3999.3999\n    d = 2014\n    e = 12.0012\n\n    result = (a * b + c * d) / e\n    return result\n\nans = solution()"
    ],
    "12599cd086b74a6dbee49affc2b9da94": [
        "def solution():\n    time_seconds = 30  # Time taken to pass the tree in seconds\n    train_length_meters = 360  # Length of the train in meters\n\n    # Speed = Distance / Time\n    speed_meters_per_second = train_length_meters / time_seconds\n    \n    # Convert speed to meters per second to kilometers per hour (1 m/s = 3.6 km/h)\n    speed_kilometers_per_hour = speed_meters_per_second * 3.6\n    \n    return speed_kilometers_per_hour\n\nans = solution()"
    ],
    "28537d9f7465445e968eb0b26a4a451c": [
        "def solution():\n    sugar_weight_kg = 1\n    pasta_weight_g = 50\n    handful_spaghetti_g = 15\n\n    # Convert sugar weight to grams\n    sugar_weight_g = sugar_weight_kg * 1000\n\n    # Calculate total weight in grams\n    total_weight_g = sugar_weight_g + pasta_weight_g + handful_spaghetti_g\n\n    return total_weight_g\n\nans = solution()"
    ],
    "8d509648485641b48c77ecbbb044bdcf": [
        "def solution():\n    num_piles = 6\n    apples_per_pile = 8\n    total_apples = num_piles * apples_per_pile\n    return total_apples\n\nans = solution()"
    ],
    "499aa61be1124476bb26bc1e720b0c26": [
        "def solution():\n    total_distance = 11\n    distance_per_day = 3\n    slide_per_night = 1\n    effective_distance_per_day = distance_per_day - slide_per_night\n    \n    # Since the snail slides down 1 meter at night, it must reach at least 10 meters before the final climb to success.\n    days_to_reach_last_day = (total_distance - distance_per_day) // effective_distance_per_day\n    \n    # After reaching 10 meters, the snail will climb out the next day without sliding back.\n    final_day = days_to_reach_last_day + 1\n\n    return final_day\n\nans = solution()"
    ],
    "06b1e5f9947e4439b6bdd18c70668419": [
        "def solution():\n    # In the worst case, we could pick marbles of the same color consecutively.\n    # Thus, we need to ensure we pick enough to guarantee we have 4 different colors.\n    # We pick all the marbles of the most abundant color (red), then one of each of the other colors.\n    # So the answer is 3 (less abundant colors) + 12 (most abundant color) + 1 (to ensure fourth color)\n\n    ans = 3 + 12 + 1  # Total of 3 other colors + all red marbles + 1\n    return ans\n\nans = solution()"
    ],
    "a8c99058f45b4a2a8e447d1b68ae74bc": [
        "def solution():\n    total_choices = 8 + 6 + 4\n    return total_choices\n\nans = solution()"
    ],
    "6c11b151fed94fb483ea9f5b76290855": [
        "def solution():\n    # Since the people are evenly spaced, the positions can be thought of as even numbers on a circle.\n    # The difference between the numbers directly opposite each other on the circle is half the total number of people.\n\n    # Let the total number of people be 'n' and they are given even numbers from 2 to 2*n (inclusive).\n    # Person with number 10 is directly opposite to person with number 24.\n    # The difference in their positions would be n/2.\n    \n    # Let's find 'n' from the given information.\n    # Person numbered 10 would stand at position 10/2 = 5 (since numbers are even and start at 2).\n    # Person numbered 24 would stand at position 24/2 = 12.\n    # The difference in positions is 12 - 5 = 7.\n    # Since this difference represents half the number of people, we multiply by 2 to find 'n'.\n    n = 7 * 2\n    return n\n\nans = solution()"
    ],
    "1a58479ac34b4689bdb3e7c074f88212": [
        "def solution():\n    pocket_money = 80\n    books_percent = 20\n    savings_less_food = 6\n\n    books_expense = (books_percent / 100) * pocket_money\n    food_expense = (pocket_money - books_expense) / (1 + 3 + 1)\n    transport_expense = food_expense / 3\n    savings = food_expense - savings_less_food\n\n    savings_percent = (savings / pocket_money) * 100\n\n    return savings_percent\n\nans = solution()"
    ],
    "a033d32f04c4454c8b6d34df01854889": [
        "def solution():\n    return 7.72 - 7.54\n\nans = solution()"
    ],
    "d9ed06f56ae74dfcb2fd97b178c32dea": [
        "def solution():\n    factors_of_66 = [i for i in range(1, 67) if 66 % i == 0]\n    for age in factors_of_66:\n        if (age - 4) % 6 == 0:\n            return age\n\nans = solution()"
    ],
    "541674da97474788b63ff77b2d0287bb": [
        "def solution():\n    from math import lcm\n    return lcm(24, 64)\n\nans = solution()"
    ],
    "3daa406fe23b4025ab00fffd6760fde8": [
        "def solution():\n    count = 0\n    for i in range(3267, 5121):\n        num_str = str(i)\n        if len(set(num_str)) == len(num_str) and all(d in '123456' for d in num_str):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6829f51b13a0426fb1a619b064401568": [
        "def solution():\n    # A two-digit factor of 75 could be 15, 25, or 75.\n    # We look for a number that gives a remainder of 3 when divided by 6.\n    for i in [15, 25, 75]:\n        if i >= 10 and i < 100 and i % 6 == 3:\n            return i\n\nans = solution()"
    ],
    "bf31842e59b84f869bdd3a0411e455df": [
        "def solution():\n    # Miss Careless's incorrect subtraction: x - 41 = 50\n    # The correct subtraction should be: x - 14\n    # Let's find what x should be first\n    incorrect_subtrahend = 41\n    miss_careless_result = 50\n\n    # Miss Careless's perceived value for x\n    x = miss_careless_result + incorrect_subtrahend\n\n    # Correct subtrahend\n    correct_subtrahend = 14\n\n    # Correct difference\n    correct_difference = x - correct_subtrahend\n\n    return correct_difference\n\nans = solution()"
    ],
    "93403cabcded4b63968e13348f241754": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(34 - 3 * (2 * x - 2), 16)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "a778b5cfeeed482b83f37aa61c3b6eb5": [
        "def solution():\n    ans = sum([x if (i % 2 == 0) else -x for i, x in enumerate(range(40, 21, -2))])\n    return ans\n\nans = solution()"
    ],
    "5384b43a54f049ec9c65ebb35ee718c1": [
        "def solution():\n    justin_ate = 4\n    sisters_ate_total = 5 * 4\n    apples_left = 20\n\n    total_apples = justin_ate + sisters_ate_total + apples_left\n\n    return total_apples\n\nans = solution()"
    ],
    "86d0f1125cdd46ac9604c4d192220e10": [
        "def solution():\n    return 45.36 + 1.25 + 2.75 + 4.64\n\nans = solution()"
    ],
    "df97cfc5a9874cc7aac262f019e950a2": [
        "def solution():\n    for n in range(1, 100):  # iterate through potential original square sizes\n        if (n + 1) * (n + 1) == n * n + 31:\n            return (n + 1) * (n + 1)\n\nans = solution()"
    ],
    "3b5e11ff28904b30b8919884597986b5": [
        "def solution():\n    return 888 // 24\n\nans = solution()"
    ],
    "c3b93f4ccd0047d9b0123beb59667db6": [
        "def solution():\n    return 56 / 21\n\nans = solution()"
    ],
    "ae3921e4e39849ffbe3f0c238b81b81b": [
        "def solution():\n    # We can find the interest rate using the compound interest formula:\n    # A = P(1 + r/n)^(nt), where A is the amount owed, P is the principal,\n    # r is the annual interest rate, n is the number of times interest is\n    # compounded per year (n=1 because it is annually), and t is the time in years.\n    # We rearrange the formula to solve for r:\n    # r = ((A/P)^(1/nt) - 1) * n\n    \n    A = 7320.5  # final amount owed\n    P = 5000  # principal amount borrowed\n    n = 1  # interest compounded annually\n    t = 4  # time in years\n    \n    # Now we calculate r using the rearranged formula\n    r = ((A / P) ** (1 / (n * t)) - 1) * n\n    return round(r * 100, 2)  # converting to percentage\n\nans = solution()"
    ],
    "3009ddde568d44929af80990edfca6a6": [
        "def solution():\n    term1 = (3.2 + 6.77 + 8.88)\n    term2 = (6.77 + 8.88 + 6.3)\n    term3 = (3.2 + 6.77 + 8.88 + 6.3)\n    term4 = (6.77 + 8.88)\n\n    ans = (term1 * term2) - (term3 * term4)\n    return ans\n\nans = solution()"
    ],
    "f43eb58f48b14c988c4e389d78a71faa": [
        "def solution():\n    total_savings = 4410\n    january_savings = 2450\n    march_savings = 855\n\n    february_savings = total_savings - january_savings - march_savings\n\n    return february_savings\n\nans = solution()"
    ],
    "a7e6156c711b427a80b6ffdd8bebbce8": [
        "def solution():\n    initial_value = 176\n    final_value = 88\n    change = final_value - initial_value\n    percent_change = (change / initial_value) * 100\n\n    return percent_change\n\nans = solution()"
    ],
    "644892f23d5d42ca9787cd008215de03": [
        "def solution():\n    time_for_one_picture = 10  # minutes\n    total_time = 80  # one hour and twenty minutes in minutes\n\n    number_of_pictures = total_time / time_for_one_picture\n\n    return number_of_pictures\n\nans = solution()"
    ],
    "5f662e9aa4db4fbfbf1a266b8558e2a8": [
        "def solution():\n    minutes = 8\n    seconds_per_minute = 60\n    total_seconds = minutes * seconds_per_minute\n    return total_seconds\n\nans = solution()"
    ],
    "bf846dec93ce477ab47a02ca859245e6": [
        "def solution():\n    final_amount = 924\n    interest_rate = 0.08\n    years = 4\n\n    initial_deposit = final_amount / ((1 + interest_rate) ** years)\n\n    return initial_deposit\n\nans = solution()"
    ],
    "e199247a5e3f4630aa1a02b225d3db54": [
        "def solution():\n    return 7.3 - 2.64\n\nans = solution()"
    ],
    "26b43a4d19504cc39391c90f265a8e59": [
        "def solution():\n    total_apples = 30\n    children = 5 # excluding Ann\n    # Each of the other children gets at least one apple\n    min_apples_for_others = 1 \n    # Calculate the maximum number of apples Ann can get\n    max_apples_for_Ann = total_apples - (min_apples_for_others * children)\n\n    return max_apples_for_Ann\n\nans = solution()"
    ],
    "36a3b0319aa94ac78912a13a30272f8d": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1356789'\n    for perm in permutations(digits):\n        first_num = int(''.join(perm[:2]))\n        second_num = int(''.join(perm[2:5]))\n        third_num = int(''.join(perm[5:7]))\n        \n        if second_num == 2 * first_num and third_num == 4 * first_num:\n            return third_num\n\nans = solution()"
    ],
    "e8548c7b8d69402e81f35205050bd98d": [
        "def solution():\n    shirts = 3\n    pants = 2\n    dresses = 3\n    shoes = 4\n    heels = 2\n\n    blouse_pants_shoes_combinations = shirts * pants * shoes\n    dress_shoes_combinations = dresses * shoes\n    dress_heels_combinations = dresses * heels\n\n    total_combinations = blouse_pants_shoes_combinations + dress_shoes_combinations + dress_heels_combinations\n\n    return total_combinations\n\nans = solution()"
    ],
    "182737e9117d46c389cc27f2a8aad6c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the masses of the objects\n    A, B, C = symbols('A B C')\n    \n    # Set up the two equations given in the problem\n    equation1 = Eq(A + B, 13)\n    equation2 = Eq(A + C, 25)\n    \n    # Set up the relationship between B and C\n    equation3 = Eq(C, 3 * B)\n    \n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    # Return the mass of object A\n    return solutions[A]\n\nans = solution()"
    ],
    "cf31bb404b754d18bd83978a61ac8d0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, teddy_bear = symbols('book teddy_bear')\n\n    equation1 = Eq(4 * book + 8 * teddy_bear, 164)\n    equation2 = Eq(2 * book + 3 * teddy_bear, 67)\n\n    solutions = solve((equation1, equation2), (book, teddy_bear))\n\n    return solutions[book]\n\nans = solution()"
    ],
    "8813aaf9e8434f92984ad99a90e18eb9": [
        "from sympy import divisors\n\ndef solution():\n    # Given: HCF of M and N is 75 which is 3^1 * 5^2\n    # Since M has 12 factors, we can consider the form M = 3^a * 5^b\n    # The number of factors of M is given by (a + 1)(b + 1) = 12\n\n    # Create a function to find the possibilities for the power of prime factors\n    # given the number of divisors it should have\n    def find_possible_powers(num_divisors, excluded_powers):\n        possibilities = []\n        for a in range(num_divisors):\n            for b in range(num_divisors):\n                if (a + 1) * (b + 1) == num_divisors and {a, b}.isdisjoint(excluded_powers):\n                    possibilities.append((a, b))\n        return possibilities\n\n    # Find the possible power combinations for M (12 divisors) and N (10 divisors)\n    # The excluded power for M and N includes the HCF's powers, so they both exclude {1, 2}\n    possible_powers_M = find_possible_powers(12, {1, 2})\n    possible_powers_N = find_possible_powers(10, {1, 2})\n\n    # Now find the actual numbers M and N based on their prime factors\n    # We iterate through each possibility and make sure they share the prime factors of HCF\n    for a, b in possible_powers_M:\n        M = (3 ** (a)) * (5 ** (b)) * 75  # Multiplying by HCF to include the prime factors of it\n        for c, d in possible_powers_N:\n            N = (3 ** (c)) * (5 ** (d)) * 75  # Multiplying by HCF to include the prime factors of it\n\n            # Checking if the number of divisors match what was provided\n            if len(divisors(M)) == 12 and len(divisors(N)) == 10:\n                return M + N\n\n# Compute the answer\nans = solution()"
    ],
    "a38308f19b794b3b96e4cb5fede094c4": [
        "def solution():\n    total_mass_kg = 9\n    total_mass_g = 5\n    soil_mass_kg = 4\n    soil_mass_g = 50\n\n    # Convert all masses to grams\n    total_mass_in_g = (total_mass_kg * 1000) + total_mass_g\n    soil_mass_in_g = (soil_mass_kg * 1000) + soil_mass_g\n\n    # Calculate the mass of the sand pack in grams\n    sand_mass_in_g = total_mass_in_g - soil_mass_in_g\n\n    # Calculate the difference in grams\n    difference_in_g = abs(soil_mass_in_g - sand_mass_in_g)\n\n    # Convert the difference back to kg and g\n    difference_kg = difference_in_g // 1000\n    difference_g = difference_in_g % 1000\n\n    return (difference_kg, difference_g)\n\nans = solution()"
    ],
    "1bf59a6dc1ea4ff38f6849f658bfb007": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    james, nina = symbols('james nina')\n\n    # Equation 1: The total number of buttons\n    equation1 = Eq(james + nina, 22)\n\n    # Equation 2: After Nina gave 4 buttons to James, they have the same number\n    equation2 = Eq(nina - 4, james + 4)\n\n    solutions = solve((equation1, equation2), (james, nina))\n\n    return solutions[nina]\n\nans = solution()"
    ],
    "1530f45644534ab9a97cbe5b7104abc7": [
        "def solution():\n    sum_fraction = 0\n    for i in range(1, 101):\n        for j in range(1, i):\n            sum_fraction += j / i\n    return sum_fraction\n\nans = solution()"
    ],
    "0072c8403a1845a5b093725c5bb5aeaf": [
        "def solution():\n    base_pattern_sum = sum([int(digit) for digit in '12345'])\n    full_patterns = 52 // 5\n    remaining_digits = 52 % 5\n\n    full_pattern_sum = base_pattern_sum * full_patterns\n    remaining_pattern_sum = sum([int('12345'[i]) for i in range(remaining_digits)])\n    \n    return full_pattern_sum + remaining_pattern_sum\n\nans = solution()"
    ],
    "6d8bf3a7fce3414a9c67c4a3fa1f7c48": [
        "def solution():\n    paper_area = 4.8\n    kite_area = 0.36\n    num_kites = paper_area // kite_area\n\n    return int(num_kites)\n\nans = solution()"
    ],
    "217f4abc2ab44264affad60373305d47": [
        "def solution():\n    # Since there are no trees in front of the school or her house,\n    # the number of intervals is one more than the number of trees.\n    num_intervals = 79 + 1\n\n    # Calculate the distance between each tree\n    distance_between_trees = 320 / num_intervals\n\n    return distance_between_trees\n\nans = solution()"
    ],
    "6c6e0d85d93f4c04993e70d48958151d": [
        "def solution():\n    # Let x be the number of correct answers\n    # and y be the number of incorrect answers\n    # Since there are 10 questions in total, x + y = 10\n    # Each correct answer gives 4 points, each incorrect answer deducts 2 points\n    # Total score is 29 points, so 4x - 2y = 29\n    # Now we have two equations:\n    # x + y = 10  -> equation 1\n    # 4x - 2y = 29 -> equation 2\n\n    # We can solve this system of equations by various methods, let's use substitution\n    # From equation 1, we can express y in terms of x: y = 10 - x\n\n    # Plug y into equation 2:\n    # 4x - 2(10 - x) = 29\n    # 4x - 20 + 2x = 29\n    # 6x - 20 = 29\n    # 6x = 49\n    x = 49 // 6  # We use integer division because x must be an integer number of questions\n\n    return x\n\nans = solution()"
    ],
    "2d9fc3817dca46ac92eaa73adac8ada7": [
        "def solution():\n    # 10 fish for 4 rabbits indicates the ratio of fish to rabbits is 10:4 or simplified, 5:2\n    fish_per_rabbit = 5 / 2\n\n    # 5 rabbits for 6 packs of wheat indicates the ratio of rabbits to packs of wheat is 5:6\n    rabbit_per_wheat = 5 / 6\n    \n    # To find out fish per pack of wheat, we multiply fish_per_rabbit by rabbit_per_wheat\n    fish_per_wheat = fish_per_rabbit * rabbit_per_wheat\n    \n    # Now, to find out how many fish needed for 12 packs of wheat, we multiply the fish_per_wheat by 12\n    fish_for_twelve_packs = fish_per_wheat * 12\n    \n    return fish_for_twelve_packs\n\nans = solution()"
    ],
    "b65a5554264043bb99d0c4476d46daa7": [
        "def solution():\n    from fractions import Fraction\n\n    # The length of the metal rod as a fraction\n    metal_rod_length = Fraction(54, 5)  # 10 4/5 metres as an improper fraction\n\n    # The length of each short rod\n    short_rod_length = Fraction(3, 10)\n\n    # Number of short rods that can be cut\n    num_short_rods = metal_rod_length / short_rod_length\n\n    return num_short_rods\n\nans = solution()"
    ],
    "604b32ec4594413a9da6ea7f419a86e6": [
        "def solution():\n    single_laptop_price = 149.99\n    deal_price = 2800\n    deal_laptop_count = 30\n    required_laptop_count = 20\n\n    total_cost_without_deal = single_laptop_price * required_laptop_count\n    cost_per_laptop_with_deal = deal_price / deal_laptop_count\n    total_cost_with_deal = cost_per_laptop_with_deal * required_laptop_count\n\n    savings = total_cost_without_deal - total_cost_with_deal\n\n    return savings\n\nans = solution()"
    ],
    "6422450ba3314b00956e086caa019113": [
        "def solution():\n    original_price = 125\n    discount_rate = 0.35\n    final_price = original_price * (1 - discount_rate)\n    \n    return final_price\n\nans = solution()"
    ],
    "6d6721335237466b8bf898c20f70285f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let p be the number of penguins\n    p = symbols('p')\n\n    # If 3 fish each leaves 5 fish left over:\n    # Total fish = 3*p + 5\n    # If 4 fish each needs 15 more fish:\n    # Total fish = 4*p - 15\n\n    # Both total fish calculations should be equal\n    equation = Eq(3*p + 5, 4*p - 15)\n\n    # Solve for p\n    num_penguins = solve(equation, p)\n\n    return num_penguins[0]\n\nans = solution()"
    ],
    "558a4fe5c5fe460f838fa7deae63c54b": [
        "def solution():\n    hourly_rate = 5.12\n    hours_worked = 8\n    earnings = hourly_rate * hours_worked\n    return earnings\n\nans = solution()"
    ],
    "6d6c627dff57484693f832331a8fed28": [
        "from math import factorial\n\ndef solution():\n    # Calculates the permutation of n items\n    def perm(n, k):\n        return factorial(n) // factorial(n - k)\n\n    # There are max 3 spots between 4 dancing performances where singing performances \n    # can be inserted with at least 1 singing performance each: D_S_D_S_D_S_D\n    # The remaining 3 singing performances can go into these four spots including the \n    # start and the end: _S_D_S_D_S_D_S_\n    \n    # There are 5 spots to place the remaining 3 singing performances\n    # This can be done in perm(5, 3) ways\n    spots = perm(5, 3)\n\n    # Additionally, we have to permute 4 dancing and 6 singing performances within their spots\n    # = perm(4, 4) * perm(6, 6)\n    dances = perm(4, 4)\n    songs = perm(6, 6)\n\n    return spots * dances * songs\n\nans = solution()"
    ],
    "01b4b64e032345db96ca5a028d2343db": [
        "def solution():\n    wrong_result = -14\n    subtracted_instead_of_adding = 26\n    correct_result = wrong_result + 2 * subtracted_instead_of_adding\n    return correct_result\n\nans = solution()"
    ],
    "c408c811fcb041b3aa27099ad68703f4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(28 - 3 * (24 - 5*x), 1)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0dd1e1e4796044aeb251dbf0652d6b52": [
        "def solution():\n    ans = 322 - (95 - 87) * 16\n    return ans\n\nans = solution()"
    ],
    "25b73873a475424bb2c3460ea7370ffc": [
        "def solution():\n    matthew_height = 120\n    ratio_matthew = 4\n    ratio_kelly = 5\n\n    kelly_height = matthew_height * ratio_kelly / ratio_matthew\n    return kelly_height\n\nans = solution()"
    ],
    "6dead3e618154fcda9ed1a944c4d862e": [
        "def solution():\n    percent = 35\n    amount = 80\n\n    ans = (percent / 100) * amount\n\n    return ans\n\nans = solution()"
    ],
    "ada569f0735e44a5b658b942af33e959": [
        "def solution():\n    count = 0\n    # Iterate over possible goals by home team at half time\n    for home_ht in range(4):  # home team can score 0, 1, 2, or 3 goals by half time\n        # Iterate over possible goals by away team at half time\n        for away_ht in range(3):  # away team can score 0, 1, or 2 goals by half time\n            # Ensure that the half time score is possible with the final score\n            if home_ht <= 3 and away_ht <= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "056eb54e02ef4e86834ab49cf3cc01b4": [
        "def solution():\n    return 689 // 13\n\nans = solution()"
    ],
    "61bb0063c0734b36a1996af254e6fb90": [
        "def solution():\n    original_cards = 56\n    lost_fraction = 3/8\n    lost_cards = original_cards * lost_fraction\n    return int(lost_cards)\n\nans = solution()"
    ],
    "02bd6a91ac214217ad925716b17c6508": [
        "def solution():\n    for a in range(1, 10):  # since a is the first digit, it can't be 0\n        for b in range(10):  # b can be any digit\n            if (10*a + b) + (10*b + a) + b == 100*a + 10*a + b:\n                return a + b\n\nans = solution()"
    ],
    "2789484c36cf4e54b28be43d05009e13": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    clara, emma = symbols('clara emma')\n    equation = Eq(clara, 5 * emma)\n    total_cookies = Eq(clara + emma, 1002)\n\n    solutions = solve((equation, total_cookies), (clara, emma))\n\n    return solutions[emma]\n\nans = solution()"
    ],
    "d3a2000bbe0d4458a84669bc22de18a2": [
        "def solution():\n    from math import comb\n\n    num_students = 6\n    num_monitors = 2\n\n    num_ways = comb(num_students, num_monitors)\n\n    return num_ways\n\nans = solution()"
    ],
    "31f14949d8114ab8a17cdccc2df7d350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g be the number of girls and b be the number of boys in the class.\n    g, b = symbols('g b', integer=True)\n\n    # Since the number of boys and girls who cannot swim is equal, there are 10 boys and 10 girls who cannot swim\n    # This means that 3/8 of the girls can swim, so 5/8 of the girls cannot swim, which equals 10 girls\n    # Similarly for boys, 3/5 of the boys can swim, so 2/5 of the boys cannot swim, which equals 10 boys\n    equation1 = Eq(5*g/8, 10)\n    equation2 = Eq(2*b/5, 10)\n\n    # Now, we solve the equations for g and b\n    solutions = solve((equation1, equation2), (g, b))\n\n    # The total number of pupils in class is sum of girls and boys\n    total_pupils = solutions[g] + solutions[b]\n\n    return total_pupils\n\nans = solution()"
    ],
    "cd20ea5fd0f64dad8fea2ee8adb41891": [
        "def solution():\n    # Initialize counters for desks and total combinations\n    counter = 0\n\n    # Since Mike is always the 2nd in line from any direction in a rectangular array,\n    # the total number of rows and columns must be greater than 2.\n    # Assuming a maximum of 51 students since an exhaustive search is reasonable,\n    # as there are not a large number of small factors.\n    \n    for rows in range(2, 52):\n        for cols in range(2, 52):\n            # The position of Mike suggests that he sits at (2, 2), (2, cols-1),\n            # (rows-1, cols-1), or (rows-1, 2) in a 0-indexed array.\n            if rows * cols > 4:\n                if (rows - 1 == 2 or cols - 1 == 2) and rows != cols:\n                    counter += 1\n                    students = rows * cols\n\n    # Since the question implies there's a unique solution, we expect to find only one\n    # combination where Mike can always be the second in line. Therefore, when counter\n    # is exactly one, we have found our unique class size.\n    if counter == 1:\n        return students\n    else:\n        return None\n\nans = solution()"
    ],
    "879e5feaeecc4a8ea542b447bc7e8fce": [
        "def solution():\n    full_weight = 80\n    half_full_weight = 60\n    \n    mangoes_half_full_weight = half_full_weight - (full_weight - half_full_weight)\n    empty_basket_weight = full_weight - (full_weight - mangoes_half_full_weight)\n\n    return empty_basket_weight\n\nans = solution()"
    ],
    "b6d07c1739e540859bca83cddbe021fd": [
        "def solution():\n    return 0.85 * 400\n\nans = solution()"
    ],
    "e59a69364151431da70cfdb7b285eac6": [
        "def solution():\n    return 32 * 125 * 23\n\nans = solution()"
    ],
    "42e36157dca7436e992427566b464adc": [
        "def solution():\n    bud_sweets = 16\n    pip_ratio = 3 / 5\n    bud_ratio = 1 - pip_ratio\n\n    total_sweets = bud_sweets / bud_ratio\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "d40f5cb1f6a24d038e89fe06cd993eb4": [
        "def solution():    \n    product = 6 * 5\n    number = product * 100 / 40\n    return number\n\nans = solution()"
    ],
    "c322675f6c904cb28fcb4d8fcdeea6df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    equation = Eq(8.5 - 4 * (x - 1.5) + 3.2 * (x - 2), 2.5 * x + 3 * (2.5 - x))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "813f3075f35d4821a1a7fc16e2f6d52b": [
        "def solution():\n    ans = 5 * 57 * 4\n    return ans\n\nans = solution()"
    ],
    "103d552fb6da4c0783be7a342f20b8bc": [
        "def solution():\n    total_cost_for_3_cups = 30\n    number_of_cups_initially = 3\n    number_of_cups_mandy_wants = 5\n    \n    cost_per_cup = total_cost_for_3_cups / number_of_cups_initially\n    total_cost_for_mandy = cost_per_cup * number_of_cups_mandy_wants\n    \n    return total_cost_for_mandy\n\nans = solution()"
    ],
    "43a325f2110643bc915bdc94e8f7b758": [
        "def solution():\n    # Number of rabbits that can be accommodated in big mushroom houses\n    rabbits_in_big_houses = 4 * 5\n    \n    # Remaining rabbits which should be accommodated in small mushroom houses\n    remaining_rabbits = 38 - rabbits_in_big_houses\n    \n    # Since all small mushroom houses should accommodate an equal number of rabbits\n    rabbits_per_small_house = remaining_rabbits / 9\n\n    return rabbits_per_small_house\n\nans = solution()"
    ],
    "308e0096e80b4f19bf3d9b5c553a195d": [
        "def solution():\n    average_daily_earnings = 60\n    days_in_a_week = 7\n\n    total_earnings = average_daily_earnings * days_in_a_week\n\n    return total_earnings\n\nans = solution()"
    ],
    "65f6b4e0577647579449a1aa4cc3fa40": [
        "def solution():\n    ans = 0\n    for i in range(1, 9):\n        if i % 2 == 0:\n            ans += i**2\n        else:\n            ans -= i**2\n    return ans\n\nans = solution()"
    ],
    "8aa18ff22f444b93b44cb12fdcc6688e": [
        "def solution():\n    ways = [0] * (6 + 1)\n    ways[0] = 1  # there is one way to be on the ground (not taking any steps)\n\n    for i in range(1, 7):\n        ways[i] = ways[i - 1] + ways[i - 2] + ways[i - 3]\n\n    return ways[6]\n\nans = solution()"
    ],
    "b1efeaefd31345e39a5a87a2bb5673a9": [
        "def solution():\n    total_children = 234\n    absent_children = 75\n    present_children = total_children - absent_children\n\n    return present_children\n\nans = solution()"
    ],
    "9d723089837f477db7a98fc0d0033d94": [
        "def solution():\n    ans = 5 - 1.02\n    return ans\n\nans = solution()"
    ],
    "4b507d02ac2f4e03895bd099fa8097c8": [
        "def solution():\n    average_pizza_per_month = 15\n    number_of_months = 5  # From March to July is 5 months\n\n    total_pizza = average_pizza_per_month * number_of_months\n\n    return total_pizza\n\nans = solution()"
    ],
    "340fa54260fb43788db3cac05726737c": [
        "def solution():\n    sum_numbers = 21 + 22 + 23\n    for i in range(1, sum_numbers + 1):\n        if 2 * 3 * i == sum_numbers:\n            return i\n\nans = solution()"
    ],
    "5206643ac0d74672bd7f51f36c05b327": [
        "def solution():\n    ans = 21 + 27 + 19 - 17\n    return ans\n\nans = solution()"
    ],
    "6a0715adbecf4e6d977379c6d8e8b693": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Abigail's current age and Ryan's current age\n    abigail_age, ryan_age = symbols('abigail_age ryan_age')\n\n    # Equation 1: Abigail is three times as old as Ryan\n    equation1 = Eq(abigail_age, 3 * ryan_age)\n\n    # Equation 2: In 6 years, Abigail will be 42 years old\n    equation2 = Eq(abigail_age + 6, 42)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (abigail_age, ryan_age))\n\n    # Ryan's age in 2 years\n    ryan_age_in_2_years = solutions[ryan_age] + 2\n\n    return ryan_age_in_2_years\n\nans = solution()"
    ],
    "a63c3f97f6f747fb8f6167272df4d9e0": [
        "def solution():\n    ans = 20.2 * 3.83 + 2.02 * 143.7 + 18.2 * 79.8\n    return ans\n\nans = solution()"
    ],
    "db1980b14fff4be98f10937c9ad2d0bb": [
        "def solution():\n    speed_in_still_water = 33\n    speed_of_current = 3\n    distance_upstream = 150\n    \n    speed_upstream = speed_in_still_water - speed_of_current\n    time_to_travel_upstream = distance_upstream / speed_upstream\n    \n    return time_to_travel_upstream\n\nans = solution()"
    ],
    "61e1de37a14f48a6991bab9a2d3a4694": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The system of congruences can be written as:\n    # x ≡ 2 (mod 3)\n    # x ≡ 3 (mod 4)\n    # x ≡ 4 (mod 5)\n    congruences = [(2, 3), (3, 4), (4, 5)]\n\n    # Using the Chinese Remainder Theorem to solve the above system of congruences\n    x, _ = solve_congruence(*congruences)\n\n    # Now we find all positive whole numbers less than 100 that satisfy the above conditions\n    ans = []\n    while x < 100:\n        ans.append(x)\n        x += 3 * 4 * 5  # Increment by the product of the moduli to find next solution\n\n    return ans[-1]  # Return the last element which is less than 100\n\nans = solution()"
    ],
    "6e6e70f8c762461081d8768c9cd5d599": [
        "def solution():\n    # Convert the monetary values to pence for consistency (1 pound = 100 pence)\n    from sympy import symbols, Eq, solve\n\n    drink, popcorn = symbols('drink popcorn')\n\n    # Setting up equations based on the given information\n    equation1 = Eq(drink + popcorn, 90)\n    equation2 = Eq(2 * drink + popcorn, 145)\n\n    # Solving the two equations\n    solutions = solve((equation1, equation2), (drink, popcorn))\n\n    return solutions[popcorn]\n\nans = solution()"
    ],
    "2ef08403147440cebc886fef6d923504": [
        "def solution():\n    first_multiple = (56 // 4) * 4\n    if first_multiple < 56:\n        first_multiple += 4\n    \n    last_multiple = (92 // 4) * 4\n    if last_multiple > 92:\n        last_multiple -= 4\n\n    num_multiples = ((last_multiple - first_multiple) // 4) + 1\n\n    return num_multiples\n\nans = solution()"
    ],
    "7b0029bc1a5e4ae98eb2f317f91d9e07": [
        "def solution():\n    return (3.5 + 6.9) / 2\n\nans = solution()"
    ],
    "938865d708b54013bdffe7745f3c071e": [
        "def solution():\n    first_term = 2\n    last_term = 50\n    difference = 2\n    num_terms = (last_term - first_term) // difference + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n    return sum_of_sequence\n\nans = solution()"
    ],
    "ff21b342853b4526901990586afdd9a1": [
        "def solution():\n    sum = 0\n    sign = 1\n    for i in range(60, 0, -1):\n        sum += i * sign\n        # Alternate sign every two steps\n        if i % 2 == 0:\n            sign *= -1\n    return sum\n\nans = solution()"
    ],
    "9566235419c644bda8f4a29fbdf4e32d": [
        "def solution():\n    ans = 80 * 125 * 63\n    return ans\n\nans = solution()"
    ],
    "243b6cce4d9f45acafd03f1040ae77c4": [
        "def solution():\n    # Define a function to get the last digit of a power of 9\n    def last_digit_of_power_of_9(exp):\n        # The pattern of the last digit for powers of 9 is 9, 1, 9, 1, ...\n        # Since the pattern repeats every 2, we can check if the exponent is odd or even\n        if exp % 2 == 0:\n            return 1\n        else:\n            return 9\n\n    # Since 999^99 has the same ones digit as 9^99 because the last digit of a power only depends on the last digit of the base\n    ones_digit = last_digit_of_power_of_9(99)\n\n    return ones_digit\n\nans = solution()"
    ],
    "d40d9028269a40b1a074fb83c6e6f359": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbol for Claire's current age\n    claire_current = symbols('claire_current')\n\n    # Equation representing the future age scenario\n    equation = Eq(claire_current + 6, 3 * claire_current)\n\n    # Solve for Claire's current age\n    claire_current_age = solve(equation, claire_current)[0]\n\n    # Calculate Claire's age two years from now\n    claire_future_age = claire_current_age + 2\n\n    return claire_future_age\n\nans = solution()"
    ],
    "2dc1cabb496241cf9e53891c8379b8e2": [
        "def solution():\n    ans = 526 * 4\n    return ans\n\nans = solution()"
    ],
    "494ec1b29a6b4fa3a72a5c3c403e4f01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let t be the time the journey should have taken in minutes\n    t = symbols('t')\n    \n    # According to the problem, the train was 15 minutes late leaving\n    # and 5 minutes late arriving, so the journey time was t - 10\n    # Also, the journey actually took 11/12 of the time it should take\n    # So the actual journey time was (11/12) * t\n    # These two times are equal\n    equation = Eq((11/12) * t, t - 10)\n    \n    # Solve the equation for t\n    solution = solve(equation, t)\n    \n    # Return the solution for the time the journey should have taken\n    return solution[0]\n\nans = solution()"
    ],
    "e488c808a03c473b9671ebeb77e0b942": [
        "def solution():\n    # Calculation within one line\n    ans = (4/15) - (7/10) + (11/15) - (3/10)\n    \n    # The result is returned\n    return ans\n\nans = solution()"
    ],
    "4674fd3d4c514026b6edb3199c9264fa": [
        "def solution():\n    year = 2022\n    while True:\n        year += 1\n        if set(str(year)) <= {\"0\", \"2\"}:\n            return year - 2022\n\nans = solution()"
    ],
    "51057b69aa2149679627b1da24beca2b": [
        "def solution():\n    # Given equation is 5.42 * 25 = 5.42 * box + 5.42 * 5\n    # Using distributive property, box should be (25 - 5) to satisfy the expression\n    box = 25 - 5\n    return box\n\nans = solution()"
    ],
    "b2d9b3a92e1e4767a2f8078a10ceb071": [
        "def solution():\n    bus_fare = 44  # Bus fare in pence\n    coins = [1, 2, 5, 10, 20, 50, 100, 200]  # Pence values of coins, include £1 and £2 coins for completeness\n    coins.sort(reverse=True)  # Sort coins in descending order\n\n    # We assume Susan will pay with a combination involving the least number of coins, which means she uses the largest coin smaller than the fare or just equal (since any bigger coin would require additional change and hence more coins)\n    for coin in coins:\n        if coin <= bus_fare:\n            payment = coin\n            break\n    \n    change_needed = payment - bus_fare\n\n    # Calculate the smallest number of coins for the change\n    num_coins_for_change = 0\n    for coin in coins:\n        while change_needed >= coin:\n            change_needed -= coin\n            num_coins_for_change += 1\n            \n        if change_needed == 0:\n            break\n\n    # The total number of coins that change hands is the number of coins Susan pays with (1 coin, payment) + the number of coins for the change\n    total_coins = 1 + num_coins_for_change\n    return total_coins\n\nans = solution()"
    ],
    "b5d10eac540a45de8714ae1313e250a8": [
        "def solution():\n    # Start drawing marbles one by one\n    # Using Pigeonhole Principle: worst case is getting all marbles of the current maximum count \n    # and then one more that guarantees the next colour\n    \n    # Start by drawing all of one color (the one with the least amount)\n    draw = 2  # The 2 orange marbles\n    \n    # Now draw all marbles of the next highest amount (excluding the one already drawn - orange)\n    draw += 4  # The 4 red marbles\n    \n    # Still need to draw at least one green and one blue marble to have all 4 colors\n    draw += 1 + 1  # One green and one blue marble\n    \n    # Now Jane must have 4 different colored marbles\n    return draw\n\nans = solution()"
    ],
    "e77d21bed25146b6a602d491b8b1dd35": [
        "def solution():\n    total_chickens = 9\n    legs_per_chicken = 8 / 4\n    total_legs = total_chickens * legs_per_chicken\n    return int(total_legs)\n\nans = solution()"
    ],
    "fa054be2367d41a5a66f84ddf604783c": [
        "def solution():\n    return 18 - 12\n\nans = solution()"
    ],
    "977dd4a7f9a847319b7cce1778764124": [
        "def solution():\n    total_sweets = 420\n    people = 17\n\n    sweets_per_person = total_sweets // people\n\n    return sweets_per_person\n\nans = solution()"
    ],
    "fcc1c6b6be6b4c52b0c513c00e208621": [
        "def solution():\n    total_distance = 9\n    daily_advance = 3\n    nightly_slide = 1\n    accumulated_distance = 0\n    day = 0\n\n    while accumulated_distance < total_distance:\n        day += 1\n        accumulated_distance += daily_advance\n        if accumulated_distance >= total_distance:\n            break\n        accumulated_distance -= nightly_slide\n    \n    return day\n\nans = solution()"
    ],
    "4dbef50f0cc443289ac166137fd5b410": [
        "from math import factorial\n\ndef solution():\n    # We need to find the number of ways to distribute 19 books among 4 kids\n    # with the constraint that each kid gets at least one book.\n    # This is equivalent to putting 19 identically books into 4 distinct boxes\n    # where each box has at least 1 book.\n    # This is a problem of distributing n identical items into r distinct boxes\n    # with non-zero items in each box (stars and bars method).\n    # We can first give 1 book to each kid, and then distribute the remaining books.\n    \n    remaining_books = 19 - 4\n    # Now we need to find the ways to distribute remaining_books into 4 parts\n    # This is equivalent to finding the combinations of remaining_books + 3 choose 3\n    \n    # Calculate the number of combinations for (remaining_books + 3) choose 3\n    ans = factorial(remaining_books + 3) // (factorial(3) * factorial(remaining_books))\n    return ans\n\nans = solution()"
    ],
    "2718b4f1a9754ccaa68760b5effe4800": [
        "def solution():\n    return 7052 + 832 - 523\n\nans = solution()"
    ],
    "32f6acf1aa344c2bbe62ce981053863f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for bicycles (motorbikes), tricycles, and vans\n    bikes, tricycles, vans = symbols('bikes tricycles vans')\n    \n    # One bike has 2 wheels, one tricycle has 3 wheels, one van has 4 wheels\n    # Set up the equations based on the problem statement\n    equation1 = Eq(bikes * 2 + vans * 4, tricycles * 3 + 35)\n    equation2 = Eq(tricycles * 3 + vans * 4, bikes * 2 + 13)\n    equation3 = Eq(bikes * 2 + tricycles * 3 + vans * 4, 101)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (bikes, tricycles, vans))\n    \n    # Calculate the difference between the number of motorbikes and vans\n    bike_van_difference = solutions[bikes] - solutions[vans]\n\n    return bike_van_difference\n\nans = solution()"
    ],
    "930f7e9ace4f4e9abfa6c69bf0acf8ba": [
        "def solution():\n    a = 2\n    b = 1\n    while a < 100:\n        b += 1\n        a += b\n    return a\n\nans = solution()"
    ],
    "48433bd7096b4db2b8a0bc0666b48b61": [
        "def solution():\n    # The problem is equivalent to finding the number of solutions to the equation\n    # x + y + z = 6 such that x, y, z are positive integers (the pencil case cannot be empty)\n    # This is a problem of distributing n identical items into r different groups\n    # which can be solved using the formula for combinations with repetitions:\n    # (n + r - 1) choose (r - 1)\n    \n    from math import comb\n    \n    pens = 6                 # total identical pens to distribute\n    pencil_cases = 3         # total different coloured pencil cases\n    # We subtract one from both pens and pencil_cases because each pencil case\n    # must contain at least one pen.\n    ways = comb(pens - 1, pencil_cases - 1)\n    return ways\n\nans = solution()"
    ],
    "71cf4cae85d941ca996a445c85a2b4af": [
        "def solution():\n    ans = (72 - 4) * 6 / 3\n    return ans\n\nans = solution()"
    ],
    "27cc7102419c4252a0693643e0aafd5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the symbols represent the amount of water in each tank\n    A, B, C, D = symbols('A B C D')\n\n    # Given values\n    D_amount = 41\n\n    # Equations based on the problem statements\n    equation1 = Eq(A, 5 * B)\n    equation2 = Eq(B, 5 + C)\n    equation3 = Eq(C + D, A)\n    equation4 = Eq(D, D_amount)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (A, B, C, D))\n\n    # Return the amount of water in Tank B\n    return solutions[B]\n\nans = solution()"
    ],
    "d23bc459c7eb40fca3869160d4d63e83": [
        "def solution():\n    ans = sum((2*i+2)**2 - (2*i)**2 for i in range(1, 20))\n    return ans\n\nans = solution()"
    ],
    "0e7fb5a8438d409db8fc8721b6c9b013": [
        "def solution():\n    cups_per_gallon = 6\n    cups_needed = 30\n    gallons_needed = cups_needed / cups_per_gallon\n    return gallons_needed\n\nans = solution()"
    ],
    "0ad7378f865243469246236c3c58c016": [
        "def solution():\n    people_in_front_of_Pip = 9\n    people_behind_Bud = 10\n    Bud_and_Pip = 2  # Bud and Pip themselves\n\n    total_people = people_in_front_of_Pip + Bud_and_Pip + people_behind_Bud\n\n    return total_people\n\nans = solution()"
    ],
    "104d6bb537274c5aad38cc4c6f3475dc": [
        "def solution():\n    return 68 + 75\n\nans = solution()"
    ],
    "d558457c695c422cb8038f4d788d1b1d": [
        "from itertools import product\n\ndef solution():\n    count = 0\n    for month in range(1, 13):\n        for day in range(1, 32):  # Assume all months have 31 days, will correct later\n            # Check if the day is valid\n            if month in [4, 6, 9, 11] and day > 30:\n                continue  # Skip 31st for these months\n            if month == 2 and (day > 29 or (day == 29 and not (2014 % 4 == 0 and (2014 % 100 != 0 or 2014 % 400 == 0)))):\n                continue  # Skip invalid February dates\n            # Create date string representation\n            date_str = '2014{:02d}{:02d}'.format(month, day)\n            # Count the number of 0's, 1's, and 2's\n            num_0 = date_str.count('0')\n            num_1 = date_str.count('1')\n            num_2 = date_str.count('2')\n            # If the count of 0's, 1's, and 2's are equal, increase count\n            if num_0 == num_1 == num_2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "96ce69b25ffc4f6ba38c21545d6733a1": [
        "def solution():\n    numbers = [4, 5, 6, 9, 3, 9]\n    average = 6\n    num_count = 8\n    total_sum = average * num_count\n    known_sum = sum(numbers)\n    pq_sum = total_sum - known_sum\n    \n    for p in range(3, 10):\n        q = pq_sum - p\n        if p < q and max(numbers + [p, q]) - min(numbers + [p, q]) == 6:\n            return q\n    \nans = solution()"
    ],
    "d57aa24f90f445c5abf13b469d1984b6": [
        "def solution():\n    first_term = 4\n    last_term = 298\n    difference = 3\n\n    term_number = ((last_term - first_term) // difference) + 1\n\n    return term_number\n\nans = solution()"
    ],
    "b36c4f44ee6d4d5f8f83c706b3da11e7": [
        "def solution():\n    # Let x be the number of students who like both football and basketball.\n    x = symbols('x')\n\n    # Number of students who like football is 3 times those who like both, which is 3x.\n    football = 3 * x\n\n    # Number of students who like basketball is 4 times those who like both, which is 4x.\n    basketball = 4 * x\n\n    # Sum of students who like football only, basketball only, and both is equal to the total number\n    # Using Inclusion-Exclusion Principle: |A ∪ B| = |A| + |B| - |A ∩ B|\n    # where A is the set of students who like football and B is the set of students who like basketball.\n    total_students_equation = Eq(football + basketball - x, 36)\n\n    # Solving the equation for x.\n    solution = solve(total_students_equation, x)\n\n    # The number of students who like both sports is the solution for x.\n    return solution[0]\n\nans = solution()"
    ],
    "df09ff6de9a24b87ad2cf9a7a605db3d": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Create the congruences according to the Chinese Remainder Theorem\n    congruences = [(3, 7), (7, 11), (9, 13)]\n    \n    # Use the sympy library to solve the system of congruences\n    num, _ = solve_congruence(*congruences)\n    \n    # Since we want the smallest five-digit number, we need to find the smallest\n    # number that is greater than or equal to 10,000 which satisfies the congruences\n    # Since the solution will be in the form of num + k * lcm(7, 11, 13) for some integer k,\n    # we will find the smallest such k that makes the result a five-digit number\n    while num < 10000:\n        num += 7 * 11 * 13\n    \n    return num\n\nans = solution()"
    ],
    "36c0726e53b4423887ba038a9a8b7de4": [
        "def solution():\n    # Adam's speed: 60 km/h\n    # Jacob's speed: 80 km/h\n    # Jacob's time to get home: 3 hours\n    # Adam's additional time to get home: 0.5 hours\n    # Total time for Adam to get home: 3 + 0.5 = 3.5 hours\n\n    # Jacob's distance to home\n    distance_jacob = 80 * 3  # speed * time\n\n    # Adam's distance to home\n    distance_adam = 60 * 3.5  # speed * time\n    \n    # Total distance apart is Jacob's distance plus Adam's distance\n    total_distance = distance_jacob + distance_adam\n    \n    return total_distance\n\nans = solution()"
    ],
    "eabcf3964b4a496a8ef64c1ebb4291fb": [
        "def custom_operation(a, b):\n    return ((a * b + 16) / (a + b)) ** 2\n\ndef solution():\n    result = custom_operation(custom_operation(custom_operation(1, 2), 3), 4)\n    ans = custom_operation(result, 5)\n    return int(ans)\n\nans = solution()"
    ],
    "2b16d73352954ba2b572f2ae9c2c1fd1": [
        "def solution():\n    prime_factors = [2, 2, 3, 3, 7]  # 252 = 2^2 * 3^2 * 7^1\n    exponents = [prime_factors.count(i) for i in set(prime_factors)]\n    num_factors = 1\n    for exp in exponents:\n        num_factors *= (exp + 1)\n    return num_factors\n\nans = solution()"
    ],
    "779097010de347adac3173e788b818b1": [
        "def solution():\n    total_cakes = 50\n    layers = 9\n    # Using the Pigeonhole Principle, we calculate the minimum number of cakes in the layer \n    # with the most cakes by dividing the total number of cakes by the number of layers and \n    # rounding up to the nearest whole number.\n    max_cakes_in_layer = -(-total_cakes // layers)\n    \n    return max_cakes_in_layer\n\nans = solution()"
    ],
    "cf8db366b2f64605b21b99daa35db369": [
        "def solution():\n    gst_rate = 0.07\n    total_paid = 0.91\n\n    cost_before_gst = total_paid / (1 + gst_rate)\n\n    return round(cost_before_gst, 2)\n\nans = solution()"
    ],
    "f2cc6bf5eb964e03b4744beef89de39f": [
        "def solution():\n    # Using the Pigeonhole Principle, to guarantee two marbles of the same color,\n    # Lucy needs to take out one more marble than there are colors since there are 2 colors.\n    num_colors = 2\n    marbles_to_guarantee_same_color = num_colors + 1\n\n    return marbles_to_guarantee_same_color\n\nans = solution()"
    ],
    "c587b2c5f5344744bff9a00aad6cea06": [
        "def solution():\n    # Convert all weights to grams\n    weight1 = 2.49 * 1000  # kg to g\n    weight2 = 670           # g\n    weight3 = (3 * 1000) + 80  # kg and g to g\n\n    # Add all weights together\n    total_weight = weight1 + weight2 + weight3\n\n    return total_weight\n\nans = solution()"
    ],
    "ec2f787ddc4f496c8e1670044fcde021": [
        "def solution():\n    total_minutes = 60\n    cycling_fraction = 1 / 3\n    jogging_minutes = total_minutes * (1 - cycling_fraction)\n    return jogging_minutes\n\nans = solution()"
    ],
    "67374cb1f2b44b8594ce58b7c2757c30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for Justin's current age\n    justin_age = symbols('justin_age')\n    \n    # Create the equations based on the problem statement\n    # In 18 years, Justin will be 4 times as old as he was 6 years ago\n    equation = Eq(justin_age + 18, 4 * (justin_age - 6))\n    \n    # Solve the equation\n    justin_current_age = solve(equation, justin_age)[0]\n    \n    return justin_current_age\n\nans = solution()"
    ],
    "750fd66718534733b8ee051343e835e2": [
        "def solution():\n    a1 = 2  # The first term of the arithmetic sequence\n    d = 5   # The common difference between the terms\n    n = 21  # The term number we want to find\n\n    # The formula for the nth term of an arithmetic sequence is a_n = a1 + (n-1)*d\n    an = a1 + (n - 1) * d\n\n    return an\n\nans = solution()"
    ],
    "af56a6fc059e429192ef55675e57c67c": [
        "def solution():\n    difference = 22 - 18\n    n = 2 - difference\n    return n\n\nans = solution()"
    ],
    "340b86ff5e0b464289776aeb6627ceff": [
        "def solution():\n    # Initialize the variable for the largest number of apples.\n    max_apples = 0\n    \n    # The 6 children will get at least one apple each. This means we need to subtract 6 from the total of 30 apples\n    # because we are distributing the remaining 24 apples in a way that each child's share is unique.\n    remaining_apples = 30 - 6  # 24 apples remain after ensuring each child has 1 apple.\n\n    # We need to find the largest number of apples one child can have.\n    # We will assign apples to the children with the least first and maximize the number for the one with the most.\n    \n    # We distribute remaining apples starting from 1 to remaining_apples and check if we can distribute the remaining\n    # apples to the other children uniquely.\n    for apples in range(1, remaining_apples):\n        # We start with the assumption that one child can have the current number of apples.\n        # Then, we assign the rest of the apples to the other children with the constraint that each gets a unique amount.\n        # The amount each child can get is within the range of 1 to the child with current maximum apples - 1.\n        \n        # This forms a sum with the ith term being (apples - i) for each child.\n        remaining = sum(range(apples+1, apples + 6))\n        \n        # If the sum of apples assigned to the rest of the children matches the number of remaining apples,\n        # we have found a valid distribution and the current maximum can be considered.\n        if remaining == remaining_apples:\n            # Since we are maximizing the number of apples one child can get, we keep the highest value.\n            max_apples = max(max_apples, apples)\n    \n    # Finally, return the maximum number of apples plus 1 (since every child gets at least 1 apple initially)\n    # which will be the share of the child who gets the most.\n    return max_apples + 1\n\nans = solution()"
    ],
    "f2faa17dbd4546fe9f05e0ca1b14be52": [
        "def solution():\n    sam_mpg = 72.8            # Sam's car's mileage in miles per gallon\n    distance = 273            # distance from London to Kendal in miles\n    additional_petrol_tom = 6.75  # Tom's additional petrol consumption in gallons\n\n    # Calculate Sam's petrol consumption for the trip\n    sam_petrol = distance / sam_mpg\n\n    # Calculate Tom's total petrol consumption (Sam's consumption + Tom's additional consumption)\n    tom_petrol = sam_petrol + additional_petrol_tom\n\n    # Calculate Tom's mileage in miles per gallon\n    tom_mpg = distance / tom_petrol\n    \n    return tom_mpg\n\nans = solution()"
    ],
    "0d3f4384ce58444a89f0b0451c47a86a": [
        "from math import lcm\n\ndef solution():\n    ashley_time = 56\n    ben_time = 80\n    charlie_time = 105\n\n    least_common_multiple = lcm(ashley_time, ben_time, charlie_time)\n\n    # Calculate the number of minutes and seconds they will next meet.\n    minutes, seconds = divmod(least_common_multiple, 60)\n\n    # Starting time is 10.00 am, so we convert it to total minutes since 0:00.\n    start_time_minutes = 10 * 60\n\n    # Calculate next meeting time in minutes since 0:00\n    next_meeting_time_minutes = start_time_minutes + minutes\n\n    # Convert next meeting time to hours and minutes.\n    next_meeting_hour, next_meeting_minute = divmod(next_meeting_time_minutes, 60)\n\n    return f\"{next_meeting_hour:02d}:{next_meeting_minute:02d}\"\n\nans = solution()"
    ],
    "e24a897f0dea4a47950e3faa1cdaf6d1": [
        "def solution():\n    return 77.5 * 0.52 + 5.2 * 2.25\n\nans = solution()"
    ],
    "f475cb94110941b287259508a63a9ff8": [
        "def solution():\n    sum_numbers = 3017 + 4962\n    return sum_numbers\n\nans = solution()"
    ],
    "333aed92d083437e97962341c0e3e05c": [
        "def solution():\n    for i in range(10):\n        number = int(f\"24572{i}\")\n        if number % 7 == 0:\n            return number\n\nans = solution()"
    ],
    "a4af03b27daa4f28856b42ba428afc2d": [
        "def solution():\n    # Bart needs to pick at least 1 red and 1 yellow, or 1 red and 1 brown, or 1 yellow and 1 brown to satisfy the condition.\n    # To ensure he gets 2 M&M's chips of different colours, he should take the worst-case scenario into account.\n    # The worst-case scenario is picking all chips of one color before getting a different color.\n    # Therefore, he could pick all 3 red chips, and he still wouldn't satisfy the condition.\n    # He would then need to pick at least one more chip, which could be yellow or brown.\n    # Since he needs to be sure to get two different colors, the smallest number he needs to take is:\n    # All red + 1 more = 3 (red) + 1 = 4 chips.\n    return 4\n\nans = solution()"
    ],
    "a11a7f4df40f40c8820fc6e6e0c78560": [
        "def solution():\n    return 9039 + 93\n\nans = solution()"
    ],
    "9ed706ba39e2411fba6e6de96d5ecfd7": [
        "def solution():\n    ans = sum(i**2 for i in range(1, 20, 2))\n    return ans\n\nans = solution()"
    ],
    "41fb6eaf263648dd86dc9ac6a43a72f3": [
        "def solution():\n    num_shirts = 2\n    num_skirts = 2\n\n    outfit_combinations = num_shirts * num_skirts\n\n    return outfit_combinations\n\nans = solution()"
    ],
    "b4ccb4b4d7b14da0aad36bfe517a8484": [
        "def solution():\n    count = 0\n    for page in range(1, 101):\n        count += str(page).count('6')\n    return count\n\nans = solution()"
    ],
    "f297a90915044281a14d6377f0457a4f": [
        "def solution():\n    # In the given sequence, each term (after the first) appears to be the previous term multiplied by 3.\n    # To follow this pattern:\n    # 1 * 3 = 3 (second term)\n    # So to find the third term:\n    # 3 * 3 = 9\n    \n    third_term = 3 * 3\n\n    return third_term\n\nans = solution()"
    ],
    "b768e69a54ce422c9bdc0bc62ce7f112": [
        "def solution():\n    # The difference between consecutive terms\n    difference = 120 - 105  # This is the common difference\n\n    # The first term can be computed by subtracting the common difference from the 7th term\n    # six times as the 7th term minus 6 times the common difference gives the first term\n    first_term = 105 - 6 * difference\n\n    # Calculate the 100th term using the formula for nth term of an arithmetic sequence\n    # nth_term = first_term + (n - 1) * common_difference\n    nth_term = first_term + (100 - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "5b6e52b88b774ca78d70e6c94d7bdc3f": [
        "def solution():\n    # Convert the numbers from base 7 to decimal\n    num1 = int(str(45), 7)\n    num2 = int(str(66), 7)\n    \n    # Add the numbers in decimal\n    sum_decimal = num1 + num2\n    \n    # Convert the sum back to base 7\n    if sum_decimal == 0:\n        return \"0\"\n    base7 = \"\"\n    while sum_decimal > 0:\n        base7 = str(sum_decimal % 7) + base7\n        sum_decimal //= 7\n    \n    return base7\n\nans = solution()"
    ],
    "dd9b6244a4c4445bb632f0876b616353": [
        "def solution():\n    total_choices = 9 + 3 + 2\n    return total_choices\n\nans = solution()"
    ],
    "e94db5c96fbd44048da7eae72591635d": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n\n    x = Symbol('x')\n    equation = 12 - (3*x - 4) - x\n\n    ans = solve(equation, x)\n    return ans[0]\n\nans = solution()"
    ],
    "601ad6e41047493c8d8f3dea2a05469a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges, lemons = symbols('oranges lemons')\n\n    # Original ratio\n    equation1 = Eq(oranges / lemons, 3/5)\n\n    # New ratio after selling 48 oranges\n    equation2 = Eq((oranges - 48) / lemons, 1/2)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (oranges, lemons))\n\n    return solutions[lemons]\n\nans = solution()"
    ],
    "940e042aba2b4f56a60da84000fece0e": [
        "def solution():\n    rabbits = 8\n    days = 5\n    carrots_per_rabbit_per_day = 4\n    \n    total_carrots = rabbits * days * carrots_per_rabbit_per_day\n\n    return total_carrots\n\nans = solution()"
    ],
    "a50a55a4409a4341b2950b27e6d39826": [
        "def solution():\n    horse_rate = 1 / 2\n    cow_rate = 1 / 3\n    sheep_rate = 1 / 12\n\n    total_rate = horse_rate + cow_rate + sheep_rate\n\n    total_bales = 22\n\n    days = total_bales / total_rate\n\n    return days\n\nans = solution()"
    ],
    "c41373fcf732485caf9d92171e911149": [
        "def solution():\n    fraction = 5 / 8\n    whole_number = 160\n\n    return fraction * whole_number\n\nans = solution()"
    ],
    "7ed96bead1224f409f2317f83bd45b09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mother_age_now, daughter_age_now = symbols('mother_age_now daughter_age_now')\n\n    age_difference = mother_age_now - daughter_age_now\n\n    # When the daughter reaches her mother's current age\n    equation1 = Eq(mother_age_now + age_difference, 75)\n\n    # When the mother was at her daughter's current age\n    equation2 = Eq(daughter_age_now - age_difference, 3)\n\n    solutions = solve((equation1, equation2), (mother_age_now, daughter_age_now))\n\n    return solutions[mother_age_now]\n\nans = solution()"
    ],
    "996413eb0e084c8fad4262d2e563cbe1": [
        "def solution():\n    return 146 * 37\n\nans = solution()"
    ],
    "025a48e3ac854ca98f6c3b39cdf5562f": [
        "def solution():\n    n = 72/(3*6)\n    return n\n\nans = solution()"
    ],
    "a62c00fc50db459e9f0fdc6cdac1102e": [
        "def solution():\n    from itertools import permutations\n    \n    total_days = 0\n\n    # Generate all possible permutations for the two remaining digits after 2014\n    for perm in permutations('012'*2, 4):\n        ymd = '2014' + ''.join(perm)\n        \n        # Check if the month is valid\n        month = int(ymd[4:6])\n        if month < 1 or month > 12:\n            continue\n        \n        # Check if the day is valid\n        day = int(ymd[6:])\n        if day < 1:\n            continue\n        \n        # Check for different months\n        if month == 2: # February\n            # Considering whether it's a leap year\n            if (2014 % 4 == 0 and 2014 % 100 != 0) or (2014 % 400 == 0):\n                if day > 29:\n                    continue\n            else:\n                if day > 28:\n                    continue\n        elif month in [4, 6, 9, 11]: # April, June, September, November\n            if day > 30:\n                continue\n        else: # January, March, May, July, August, October, December\n            if day > 31:\n                continue\n        \n        # If valid, increment total_days\n        total_days += 1\n    \n    # Divide by 6 to correct for overcounting due to permutations of 012\n    return total_days // 6\n\nans = solution()"
    ],
    "c5d002031015489ba21101105aaa559a": [
        "def solution():\n    # Maximum number of non-red apples Isabella could take before she is sure to have 3 red apples\n    max_non_red_apples = (11 + 7) # Green and yellow apples\n\n    # She needs to take 3 red apples, so add this to the count of non-red apples\n    total_apples_to_take = max_non_red_apples + 3\n\n    return total_apples_to_take\n\nans = solution()"
    ],
    "c350a05252414b3db3a1131ee3b9e465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    x = symbols('x')\n\n    # Define the equation\n    equation = Eq(7 * (x + 2), 51 + 2 * (x - 1))\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "27762b79cb644368b2a5457a17f92ee7": [
        "def solution():\n    initial_value = 200\n    final_value = 204\n    percentage_change = ((final_value - initial_value) / initial_value) * 100\n    return percentage_change\n\nans = solution()"
    ],
    "597ad4cf18ea4c63bf6c95cd675bf196": [
        "def solution():\n    # Total pupils\n    total_pupils = 30\n    # Right-handed pupils\n    right_handed = 21\n    # Total girls\n    total_girls = 16\n    \n    # The smallest number of girls who are right-handed happens when all non-right-handed pupils are girls\n    # Total non-right-handed\n    non_right_handed = total_pupils - right_handed\n    \n    # Smallest number of girls who are right-handed\n    right_handed_girls = total_girls - non_right_handed\n    \n    # Ensure that the number of right-handed girls is not negative\n    right_handed_girls = max(right_handed_girls, 0)\n    \n    return right_handed_girls\n\nans = solution()"
    ],
    "3509ed6613a44f60bb123d2ebb9a5094": [
        "def solution():\n    ans = (20 - 19) + (18 - 17) + (16 - 15) + (14 - 13)\n    return ans\n\nans = solution()"
    ],
    "7a09b099857143ed8e06a64d34c8813c": [
        "def solution():\n    total_spent = 6400\n    discount = 0.8\n    saved = total_spent / (1 - discount)\n    return saved - total_spent\n\nans = solution()"
    ],
    "2f9ea1c8c72f424db4c1a4c24536bbb0": [
        "def solution():\n    # In a round-robin tournament with six teams, each team plays every other team once.\n    # Total number of games played is Combination(6, 2) = 6! / (2! * (6-2)!)\n    from math import factorial\n    total_games = factorial(6) // (factorial(2) * factorial(6 - 2))\n    \n    # There are three possible results for each game: a win for one team, a loss for another, or a tie.\n    # In the case of a win or loss, 2 points are distributed in total (2 for the winner, 0 for the loser).\n    # In the case of a tie, 2 points are distributed in total as well (1 point each).\n    # Regardless of the outcome, each game always contributes 2 points to the total point pool.\n    \n    # Thus, the total number of points = number of games * 2 points per game\n    total_points = total_games * 2\n    \n    return total_points\n\nans = solution()"
    ],
    "892a76fc652846adbcd762365971437f": [
        "def solution():\n    children = 45\n    capacity = 8\n\n    num_minibuses = (children + capacity - 1) // capacity\n\n    return num_minibuses\n\nans = solution()"
    ],
    "3393c5c42ebe4894a4440ce64fee1a72": [
        "def solution():\n    ans = 101 + 97 + 102 + 99 + 98 + 103 - 100\n    return ans\n\nans = solution()"
    ],
    "c616f997861742469b08bfc319528f5b": [
        "def solution():\n    # We have to find the worst-case scenario\n    # This means we need to consider the case where she picks all marbles\n    # of one color first, then the next, and so on, until she draws at least one of each color\n\n    # Number of marbles of each color:\n    red = 4\n    green = 7\n    blue = 6\n    orange = 2\n\n    # Worst case:\n    # She can draw all marbles of one color except for the color with the least number of marbles (orange)\n    # And then she needs to draw at least one marble of each of the other colors\n\n    # So she can draw all green, blue, and 3 red (since 1 red is compulsory to make it 4 colors)\n    # After that, she will definitely draw the 4th color on the next draw\n    draws = green + blue + (red - 1) + 1\n\n    return draws\n\nans = solution()"
    ],
    "e594932553e149d89309f852797d5586": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim = symbols('girls boys girls_swim girls_not_swim boys_swim boys_not_swim')\n\n    # Total number of students\n    total_students = Eq(girls + boys, 1690)\n\n    # There are 90 more boys than girls\n    more_boys = Eq(boys, girls + 90)\n\n    # Ratio of the number of girls who can swim to the number of girls who cannot swim is 31:49\n    girls_ratio = Eq(girls_swim, 31/80 * girls)\n    girls_not_swim_ratio = Eq(girls_not_swim, 49/80 * girls)\n\n    # The number of boys who can swim is 120 less than the number of boys who cannot swim\n    boys_swim_ratio = Eq(boys_swim, boys_not_swim - 120)\n\n    # Solving the system of equations\n    solutions = solve((total_students, more_boys, girls_ratio, girls_not_swim_ratio, boys_swim_ratio), (girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim))\n\n    # The number of pupils who cannot swim is the sum of girls who cannot swim and boys who cannot swim\n    pupils_cannot_swim = solutions[girls_not_swim] + solutions[boys_not_swim]\n\n    return pupils_cannot_swim\n\nans = solution()"
    ],
    "8b599766a2704c0eb0e8c0f696e62f06": [
        "def solution():\n    for number in range(1, 101):\n        if all([number % 2 == 0, number % 3 == 0, number % 5 == 0, number % 7 == 6]):\n            return number\n\nans = solution()"
    ],
    "9f8109ce906145b3a3bb3b7938082e99": [
        "def solution():\n    n = 1\n    zeros = 0\n    factors_of_five = 0\n\n    # As 10 is the product of 2 and 5, and there are typically more 2s in factorization,\n    # we need to count the number of times 5 will appear in the factors to determine zeros.\n    while zeros < 28:\n        n += 1\n        temp = n\n        while temp % 5 == 0:\n            factors_of_five += 1\n            temp //= 5\n        zeros = factors_of_five\n\n    return n - 1\n\nans = solution()"
    ],
    "7af09b472cda4e49ba756b79f79625b3": [
        "def solution():\n    return 789 * 6\n\nans = solution()"
    ],
    "ee58fa876fa247d58050d060bebe1078": [
        "def solution():\n    from sympy import primerange\n    \n    # Generate a list of prime numbers less than 41 (as 3a < 41 and 7b < 41)\n    primes = list(primerange(1, 41))\n    \n    for a in primes:\n        for b in primes:\n            if 3*a + 7*b == 41:\n                return a + b\n\nans = solution()"
    ],
    "fd889752fd27457fbe03dc85570eec17": [
        "def solution():\n    price_per_pc_4pc = 7 / 4\n    price_per_pc_6pc = 8.5 / 6\n\n    if price_per_pc_4pc < price_per_pc_6pc:\n        ans = '4pc is a better buy'\n    else:\n        ans = '6pc is a better buy'\n\n    return ans\n\nans = solution()"
    ],
    "ac6b5f6822aa44afb8423aeef1df7f92": [
        "def solution():\n    total_rolls = 60\n    # Possible outcomes when rolling two dice\n    outcomes = 6 * 6\n    # Event: the total of two dice is greater than 10, which can happen with (5, 6), (6, 5), (6, 6)\n    successful_outcomes = 3\n    probability_of_success = successful_outcomes / outcomes\n    expected_winnings = probability_of_success * 10\n    expected_loss_per_game = 1 - expected_winnings\n    total_expected_loss = expected_loss_per_game * total_rolls\n    return total_expected_loss\n\nans = solution()"
    ],
    "e49cf16bbb284f1fbfb9c440134d58be": [
        "def solution():\n    return 1.83 + 0.2\n\nans = solution()"
    ],
    "e3aa5800105743d5b2435db12b158401": [
        "def solution():\n    # Let x be the monthly salary\n    # 740 is spent, then 75% of the remaining (x - 740) is spent on rent\n    # Finally, 1/5 of the salary is left\n    # So the equation representing this situation is: x - 740 - 0.75*(x - 740) = (1/5)*x\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = x - 740 - 0.75 * (x - 740) - (x / 5)\n    \n    # Solve the equation\n    salary = solve(equation, x)\n    return salary[0]\n\nans = solution()"
    ],
    "d13312f8d069494cab8f69737daed0b0": [
        "def solution():\n    total_weight_with_apples = 580\n    remaining_weight_with_fewer_apples = 280\n    apples_taken_out = 3\n    \n    weight_of_taken_apples = total_weight_with_apples - remaining_weight_with_fewer_apples\n    weight_of_each_apple = weight_of_taken_apples / apples_taken_out\n    weight_of_basket = remaining_weight_with_fewer_apples - (2 * weight_of_each_apple)\n    \n    return weight_of_basket\n\nans = solution()"
    ],
    "02a402ada62746cca4a7c0600dfc8a9b": [
        "from itertools import permutations\n\ndef solution():\n    digits = '234'\n    all_combinations = set()\n    \n    for i in range(1, len(digits) + 1):\n        all_combinations.update(set(permutations(digits, i)))\n    \n    return len(all_combinations)\n\nans = solution()"
    ],
    "bdfc511086b14c2a828a8ce71b43f330": [
        "def solution():\n    # Starting time is 02:31\n    # Convert the starting time to minutes\n    start_minutes = 2 * 60 + 31\n\n    # Iterate over time until all digits 0, 1, 2, 3 next appear together again\n    # We'll break out of the loop once we have a time that includes all digits\n    while True:\n        start_minutes += 1\n        hours, minutes = divmod(start_minutes, 60)\n        if 0 <= hours <= 23 and 0 <= minutes <= 59:  # Valid time\n            time_str = f\"{hours:02d}{minutes:02d}\"\n            if all(digit in time_str for digit in \"0123\"):\n                break\n        if hours > 23:\n            start_minutes = 0  # Reset to 00:00 after 23:59\n\n    # The next time all digits 0, 1, 2, 3 appear together is at 12:30\n    # Convert the next time to minutes\n    next_time_minutes = 12 * 60 + 30\n\n    # Calculate the difference in minutes\n    minutes_until = next_time_minutes - (2 * 60 + 31)\n\n    return minutes_until\n\nans = solution()"
    ],
    "19fa00d48659426b9b8f9c7cc44133aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'x' be the amount of water in the bottle originally.\n    x = symbols('x')\n\n    # Equation based on the problem description:\n    # After drinking half before class, there's x/2 left.\n    # After class, he drinks another 100ml, so: x/2 - 100 = 150ml\n    equation = Eq(x/2 - 100, 150)\n\n    # Solve the equation to find the original amount of water.\n    original_amount = solve(equation, x)\n\n    return original_amount[0]\n\nans = solution()"
    ],
    "6008ef744a284692b526a28fd0e8a695": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    first_hour, second_hour = symbols('first_hour second_hour')\n    \n    equation1 = Eq(first_hour, second_hour - 26)\n    equation2 = Eq(first_hour + second_hour, 40)\n    \n    solutions = solve((equation1, equation2), (first_hour, second_hour))\n    \n    return solutions[second_hour]\n\nans = solution()"
    ],
    "66c31d7e12eb4ffb8ad1f1e8bb55f199": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    lynn, mary = symbols('lynn mary')\n    equation1 = Eq(mary - 58, 3 * (lynn - 160))\n    equation2 = Eq(lynn, mary)\n    \n    solutions = solve((equation1, equation2), (lynn, mary))\n    \n    return solutions[lynn] - 160\n\nans = solution()"
    ],
    "fa119130b0764e8fa4d0f0a2fa2f19fd": [
        "def solution():\n    def diamond(A, B):\n        return A * A - 3 * B\n    \n    def triangle(A, B):\n        return 5 * A - B * B\n    \n    result = triangle(diamond(4, 2), 6)\n\n    return result\n\nans = solution()"
    ],
    "e4bab25ee48f4b6185a11c389207eebf": [
        "def solution():\n    total_weight = 210\n    monday_sold = 3 / 7 * total_weight\n    remainder_after_monday = total_weight - monday_sold\n    tuesday_sold = 3 / 8 * remainder_after_monday\n    remainder_after_tuesday = remainder_after_monday - tuesday_sold\n    weight_per_bag = 3 / 4\n    \n    number_of_bags = remainder_after_tuesday // weight_per_bag\n    \n    return int(number_of_bags)\n\nans = solution()"
    ],
    "5a50e00932e34a2eae95e3e9228b6993": [
        "def solution():\n    percent_sold = 60 / 100\n    tickets_unsold = 28\n\n    total_tickets = tickets_unsold / (1 - percent_sold)\n\n    return int(total_tickets)\n\nans = solution()"
    ],
    "1e1a13a0a844402da455fc7eb9d39755": [
        "def solution():\n    fifth_grade_students = 6 * 36\n    sixth_grade_students = 3 * 38\n    total_students = fifth_grade_students + sixth_grade_students\n    return total_students\n\nans = solution()"
    ],
    "a098761e7204471dbfd3c5f04017e952": [
        "def solution():\n    quotient = 27\n    remainder = 9\n    # The dividend can be expressed as dividend = divisor * quotient + remainder\n    # To minimize the dividend, we need to minimize the divisor, which can be at least 1 (cannot be 0).\n    # Thus, the minimum dividend is computed with the smallest possible divisor (which is 1)\n    min_dividend = 1 * quotient + remainder\n    return min_dividend\n\nans = solution()"
    ],
    "9e459979ca2e4f8e84e5da348f9dba5d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Devi and Jerry's current ages.\n    devi, jerry = symbols('devi jerry')\n\n    # Create equations based on the problem statement.\n    eq1 = Eq(devi - jerry, 8)  # Devi is 8 years older than Jerry.\n    # In 4 years' time, the ratio of their ages will be 5:7.\n    eq2 = Eq((devi + 4) / (jerry + 4), 5/7)\n\n    # Solve the system of equations for Devi and Jerry's ages.\n    solutions = solve((eq1, eq2), (devi, jerry))\n\n    # Jerry's age now.\n    return solutions[jerry]\n\nans = solution()"
    ],
    "36398085891449859c0c35083ebfdaad": [
        "def solution():\n    ans = sum([64-62, 60-58, 56-54, 52-50, 48-46, 44])\n    return ans\n\nans = solution()"
    ],
    "41284b5312574903a6aad669cbd6ab65": [
        "def solution():\n    correct = 0\n    for minuend_tens in range(1, 10):\n        for minuend_ones in range(0, 10):\n            minuend = minuend_tens * 10 + minuend_ones\n            subtrahend_mistake = (minuend_tens - 2) * 10 + minuend_ones - 1\n            mistake_diff = minuend - subtrahend_mistake\n            if mistake_diff == 36:\n                correct_subtrahend = (minuend_tens - 3) * 10 + minuend_ones - 2\n                correct = minuend - correct_subtrahend\n                return correct\n\nans = solution()"
    ],
    "56303c0854a843e68eb523ba25963b8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    number = symbols('number')\n    equation = Eq(number * 5 - 4, 41)\n\n    solution = solve(equation, number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a9b59929e341406986d4962db964c9ec": [
        "def solution():\n    total_juice_ml = 7 * 195\n    jug_capacity_ml = 250\n    num_jugs = (total_juice_ml + jug_capacity_ml - 1) // jug_capacity_ml\n    return num_jugs\n\nans = solution()"
    ],
    "3444a75f07964bfca7021f8d0f95217f": [
        "def solution():\n    total_balls = 50\n    blue_balls = 1\n    target_percentage = 0.90\n\n    # red_balls_removed is the number of red balls that need to be removed\n    red_balls_removed = 0\n    while True:\n        current_red_balls = 49 - red_balls_removed\n        current_total_balls = total_balls - red_balls_removed\n        current_percentage = current_red_balls / current_total_balls\n        if current_percentage <= target_percentage:\n            break\n        red_balls_removed += 1\n\n    return red_balls_removed\n\nans = solution()"
    ],
    "757e6ca91df84091a26bd18fc1b7fa2a": [
        "from math import factorial\n\ndef solution():\n    ans = sum((factorial(100) // factorial(100 - k)) / (factorial(97) // factorial(97 - k)) for k in range(1, 4))\n    return ans\n\nans = solution()"
    ],
    "e9f7473a32874d5c820cadf0a1870a0b": [
        "def solution():\n    total_weight_with_matches = 45\n    weight_of_empty_box = 12\n    number_of_matches = 220\n\n    weight_of_all_matches = total_weight_with_matches - weight_of_empty_box\n    \n    weight_of_one_match = weight_of_all_matches / number_of_matches\n\n    return weight_of_one_match\n\nans = solution()"
    ],
    "d6c3aebbe67749778e84875f4bfe6ebf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cows, birds = symbols('cows birds')\n\n    equation1 = Eq(cows + birds, 1300)        # total number of cows and birds\n    equation2 = Eq(4*cows + 2*birds, 3440)    # total number of legs\n\n    solutions = solve((equation1, equation2), (cows, birds))\n\n    return solutions[cows]\n\nans = solution()"
    ],
    "8a9992f6a3c04fea9afe2ab07209e489": [
        "def solution():\n    number = 96\n    factors = set()\n\n    for i in range(1, int(number ** 0.5) + 1):\n        if number % i == 0:\n            factors.add(i)\n            factors.add(number // i)\n\n    return len(factors)\n\nans = solution()"
    ],
    "f58f700fac024611a683956a1768c0ec": [
        "def solution():\n    from sympy import symbols, Eq, solve, sqrt\n\n    m1 = 500  # mass of the first car\n    v1 = 20   # velocity of the first car (north)\n    m2 = 500  # mass of the second car\n    v2 = 30   # velocity of the second car (west)\n\n    # Conservation of momentum (vector form)\n    # m1*v1 + m2*v2 = (m1+m2)*v_final\n    # Since the momentum is conserved and the cars lock bumpers and stick together:\n    # The final mass is the sum of the two masses\n    m_final = m1 + m2\n    \n    # Let's assume final velocity components as vx (west direction) and vy (north direction)\n    vx, vy = symbols('vx vy')\n\n    # Conservation of momentum equations in vector components\n    equation1 = Eq(m1 * v1, m_final * vy)  # conservation of momentum in north direction\n    equation2 = Eq(m2 * v2, m_final * vx)  # conservation of momentum in west direction\n\n    # Solve for final velocities\n    solution = solve((equation1, equation2), (vx, vy))\n\n    # The magnitude of the final velocity vector\n    v_final = sqrt(solution[vx]**2 + solution[vy]**2)\n\n    return v_final\n\nans = solution()"
    ],
    "20346fdc304242a383a7ac635afbb0e0": [
        "def solution():\n    for num in range(999, 99, -1):\n        if num % 2 != 0 and num % 9 == 0:\n            tens_digit = (num // 10) % 10\n            if tens_digit % 4 == 0:\n                return num\n\nans = solution()"
    ],
    "0f159b78762443838fac481eb0a7bed3": [
        "def solution():\n    return (18 - 17) + (16 - 15) + (14 - 13)\n\nans = solution()"
    ],
    "00e7cd11eefb4db19a4650a5e8cf1454": [
        "def solution():\n    jenny_pens = 83\n    pens_to_give = 28\n\n    ben_pens = jenny_pens - pens_to_give\n\n    return ben_pens\n\nans = solution()"
    ],
    "4f45df48b0844cadb68195e413cce783": [
        "def solution():\n    books_per_week = 6 / 3\n    total_books = books_per_week * 8\n    return total_books\n\nans = solution()"
    ],
    "237e4009b4c54725a1fe587507e1513b": [
        "def solution():\n    # Length of the entire sequence of trees is given by:\n    # Total length = (Number of intervals between trees) * (Distance between trees)\n    # Since there are trees at both ends and 21 trees, there are 20 intervals between them.\n    total_length = (21 - 1) * 2\n    \n    # Since lamp posts are also to be placed at opposite ends, just like the trees,\n    # the number of lamp posts is calculated by dividing the total length by the distance\n    # between lamp posts and adding 1 for the lamp post at the beginning.\n    num_lamp_posts = (total_length // 10) + 1\n    \n    return num_lamp_posts\n\nans = solution()"
    ],
    "4585a53e3fbb44e9b8554c9841fc9066": [
        "def solution():\n    ans = 15.05 - 14.84\n    return ans\n\nans = solution()"
    ],
    "32f4232fd0304fc781fcf26ecbab7e3e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    laptop, dvd_player = symbols('laptop dvd_player')\n\n    # Equation representing the total cost paid for laptops and DVD players\n    total_cost_eq = Eq(5 * laptop + 4 * dvd_player, 14438)\n    # Equation representing the combined cost of 1 laptop and 1 DVD player\n    combined_cost_eq = Eq(laptop + dvd_player, 2960)\n\n    # Solving the system of equations\n    solutions = solve((total_cost_eq, combined_cost_eq), (laptop, dvd_player))\n\n    return solutions[dvd_player]\n\nans = solution()"
    ],
    "cb9e84648a164fd796bda214bd912eed": [
        "def solution():\n    sizes = 3  # S, M, L\n    colors = 5  # black, white, red, yellow, purple\n\n    ans = sizes * colors\n    return ans\n\nans = solution()"
    ],
    "e6aad1cc98b64cac96958775db869e00": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total weight of the original group and y be the number of people in the original group.\n    x, y = symbols('x y')\n\n    # The average weight before Aaron joined\n    equation1 = Eq(x / y, 61 - (45/y))\n    \n    # The average weight after Aaron joined but before Ben joined\n    equation2 = Eq((x + 45) / (y + 1), 61)\n    \n    # The average weight after Ben joined\n    equation3 = Eq((x + 45 + 71) / (y + 2), 62)\n\n    # Use the 2nd and the 3rd equations to solve for x and y.\n    # The first equation will give us the original average which can be derived from the 2nd eq.\n    solutions = solve((equation2, equation3), (x, y))\n\n    # Return the original average weight\n    original_average = solutions[x] / solutions[y]\n    \n    return original_average\n\nans = solution()"
    ],
    "0bd951281c1c44b48652968acdb95351": [
        "def solution():\n    # Since the triangle is the same in all values, let's call its value T.\n    # All different letters stand for different digits, so we can represent them by numbers 0-9.\n    # We can loop through 1-9 for the triangle (T cannot be 0 as it's the first digit in a 3-digit number),\n    # and for the other digits we only check those that are different from T.\n\n    for T in range(1, 10):\n        values = set(range(10)) - {T}\n        for U in values:\n            for V in values - {U}:\n                for W in values - {U, V}:\n                    for X in values - {U, V, W}:\n                        for Y in values - {U, V, W, X}:\n                            for Z in values - {U, V, W, X, Y}:\n                                a = int(f\"{T}{U}{V}\")\n                                b = int(f\"{T}{W}{X}\")\n                                c = int(f\"{T}{Y}{Z}\")\n                                if a + b + c == int(f\"{T}{T}{T}\"):\n                                    return T\n    return None\n\nans = solution()"
    ],
    "f743e1d8460a4eb08dd3685920fb9466": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        for j in range(i + 1, 101):\n            if (i + j) % 5 == 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "74f45194f12f4ae7be245fca2332fd63": [
        "def solution():\n    pattern = \"12345\"\n    pattern_sum = sum(int(digit) for digit in pattern)\n    complete_patterns = 2000 // len(pattern)  # number of complete 12345 patterns\n    remaining_digits = 2000 % len(pattern)  # number of digits in the partial pattern\n\n    total_sum = complete_patterns * pattern_sum\n    total_sum += sum(int(pattern[i]) for i in range(remaining_digits))\n\n    return total_sum\n\nans = solution()"
    ],
    "473e918a9fd74e4aaf831efa01b71026": [
        "def solution():\n    total_cost = 5.15  # Total cost in pounds\n    coffee_cost = 3.69  # Coffee cost in pounds\n    milk_cost = 0.89  # Milk cost in pounds (converted from 89p to 0.89 pounds)\n    \n    sugar_cost = total_cost - (coffee_cost + milk_cost)  # Subtract the sum of coffee and milk costs from the total cost to find the sugar cost\n\n    return sugar_cost\n\nans = solution()"
    ],
    "702bd47461974ab69465dea85d588eab": [
        "def solution():\n    for hours_passed in range(1, 12):\n        hours_remaining = 12 - hours_passed\n        if hours_passed == 2 * hours_remaining:\n            return hours_passed\n\nans = solution()"
    ],
    "639b8a35b20848139819ed0f716ed926": [
        "def solution():\n    ans = 2.3 + 9.7 + 5.2 - 2.2\n    return ans\n\nans = solution()"
    ],
    "b591b0d58af5497096019cf0b220ebb3": [
        "def solution():\n    ans = 2 + 12 * (8 - 3) // 4\n    return ans\n\nans = solution()"
    ],
    "5eab24fc6ea24611818fe89f4277708d": [
        "def solution():\n    orange_price_per_kg = 1.5\n    mango_price_per_kg = 2.3\n    oranges_weight = 4.1\n    mangoes_weight = 2\n\n    total_cost = (orange_price_per_kg * oranges_weight) + (mango_price_per_kg * mangoes_weight)\n\n    return total_cost\n\nans = solution()"
    ],
    "a98ea86c6ab94572a37ea72e70fc26dd": [
        "def solution():\n    # Maximum number of balls Sheila can take without having 4 of the same color:\n    # 3 blue balls (but not the 4th),\n    # 3 orange balls (but not the 4th),\n    # and 2 yellow balls (all of them, since there are only 2).\n    # Beyond this point, she must get the 4th ball of either blue or orange color.\n    max_balls_without_four_of_same = 3 + 3 + 2\n\n    # The next ball she takes must result in having 4 balls of the same color.\n    balls_to_get_four_of_same = max_balls_without_four_of_same + 1\n\n    return balls_to_get_four_of_same\n\nans = solution()"
    ],
    "bfd53c31223f4d469ed9eef0d582baeb": [
        "def solution():\n    ans = (45 / 9) * (100 / 10) + (23 - 19)\n    return ans\n\nans = solution()"
    ],
    "1e698072c71546a1a63ac8be1c0891fe": [
        "def solution():\n    numbers = [2, 3, 8, 4, 7, 6]\n    mean = 5\n    total_sum = mean * (len(numbers) + 1)\n    a = total_sum - sum(numbers)\n    return a\n\nans = solution()"
    ],
    "230b8cfda67a440eb974960188adca8c": [
        "def solution():\n    return 4825 + 1754\n\nans = solution()"
    ],
    "6ac549d7fd244d5c97410534859cd40b": [
        "def solution():\n    # Work rate of A\n    work_rate_A = 1 / 15\n    # Work rate of B\n    work_rate_B = 1 / 10\n    # Combined work rate\n    combined_work_rate = work_rate_A + work_rate_B\n   \n    # Amount of work done in 4 days\n    work_done_in_4_days = 4 * combined_work_rate\n\n    # Remaining work\n    remaining_work = 1 - work_done_in_4_days\n\n    # Time for B to finish the remaining job\n    days_for_B_to_finish = remaining_work / work_rate_B\n\n    return days_for_B_to_finish\n\nans = solution()"
    ],
    "292095048e3e4e1983e4b66c7cd45d35": [
        "def solution():\n    # The given series can be split into two sequences: 1 to 13, and 13 to 1. \n    # Both are arithmetic sequences.\n\n    # First calculate the sum of the first sequence (1 to 13)\n    n1 = 13  # Number of terms in the first sequence\n    a1 = 1   # First term of the first sequence\n    d1 = 1   # Common difference of the first sequence\n    sum_seq1 = (n1 / 2) * (2 * a1 + (n1 - 1) * d1)\n\n    # Then calculate the sum of the second sequence (13 to 1)\n    # However, since it includes 13 again, we will count it only once. Therefore, we start from 12.\n    n2 = 13 - 1  # Number of terms in the second sequence (excluding the repeated 13)\n    a2 = 2       # First term of the second sequence (starting from 12 and going down)\n    d2 = 1       # Common difference of the second sequence\n    sum_seq2 = (n2 / 2) * (2 * a2 + (n2 - 1) * d2)\n\n    # The total sum is the sum of both sequences\n    total_sum = sum_seq1 + sum_seq2\n\n    return int(total_sum)\n\nans = solution()"
    ],
    "45ba73cc1b1e4ca6b099a7a996e9c3b4": [
        "def solution():\n    original_price = 650\n    reduced_price = 455\n    discount = original_price - reduced_price\n    percentage_reduction = (discount / original_price) * 100\n    return percentage_reduction\n\nans = solution()"
    ],
    "2e1b20f5fdfd4bc595117f252b7bcea6": [
        "def solution():\n    def calculate_people_in_layer(layer, total_layers):\n        if layer == total_layers: # The innermost layer can be a 1x1 square (just one person)\n            return 1 if layer % 2 == 0 else 0\n        side_length = 2 * layer - 1\n        return 4 * side_length - 4 # Number of people in one layer, excluding corners for inner layers\n    \n    boys_more_than_girls = 52\n    total_layers = 1\n\n    while True:\n        boys = sum(calculate_people_in_layer(layer, total_layers) for layer in range(1, total_layers + 1, 2))\n        girls = sum(calculate_people_in_layer(layer, total_layers) for layer in range(2, total_layers + 1, 2))\n        if boys - girls == boys_more_than_girls:\n            total_students = boys + girls\n            return total_students\n        total_layers += 1\n\nans = solution()"
    ],
    "f380084cf36b45bbbda0a1c8d0634812": [
        "def solution():\n    # Since every bottle could be treated as a binary position (poisoned or not),\n    # we are finding the minimum number of binary digits (bits)\n    # needed to represent the total number of bottles uniquely.\n    # Since we have 1000 bottles, we need to figure out how many\n    # bits it takes to get a number greater than or equal to 1000.\n    \n    # Starting at 0, which will need no test tubes.\n    test_tubes = 0\n    \n    # Since 2^10 = 1024 is the smallest power of 2 greater than 1000,\n    # we need at least 10 test tubes.\n    while 2**test_tubes < 1000:\n        test_tubes += 1\n        \n    return test_tubes\n\nans = solution()"
    ],
    "28c2da8de504408d83cd9b973e4a5df2": [
        "def solution():\n    number = 100  # Smallest three-digit number to start with\n    while True:\n        if number % 5 == 1 and number % 6 == 1 and number % 7 == 1:\n            return number\n        number += 1  # Increment by 1 until a solution is found\n\nans = solution()"
    ],
    "3c35813541b2403abf942fa5547821b4": [
        "def solution():\n    # Ducklings have 2 legs each, baby geese have 2 legs each, and lambs have 4 legs each.\n    duckling_legs = 4 * 2\n    baby_geese_legs = 2 * 2\n    \n    # Total legs excluding lambs\n    total_legs_excluding_lambs = duckling_legs + baby_geese_legs\n    \n    # Total legs from the question\n    total_legs = 36\n    \n    # Legs belonging to lambs\n    lamb_legs = total_legs - total_legs_excluding_lambs\n    \n    # Each lamb has 4 legs\n    number_of_lambs = lamb_legs // 4\n    \n    return number_of_lambs\n\nans = solution()"
    ],
    "d5bc2d04c57440d0a114ebf980abe4d0": [
        "def solution():\n    n = 2.5 * 1000  # Since 1 litre is 1000 millilitres\n    return n\n\nans = solution()"
    ],
    "754c4e4720274d728d76669caba145eb": [
        "def solution():\n    # Define the fraction of sweets eaten each day\n    day1 = 1/7\n    day2 = 1/6\n    day3 = 1/5\n    day4 = 1/4\n\n    # Define the number of sweets remaining after each day\n    remaining_after_day4 = 6\n\n    # Calculate the number of sweets before the fourth day\n    remaining_after_day3 = remaining_after_day4 / (1 - day4)\n\n    # Calculate the number of sweets before the third day\n    remaining_after_day2 = remaining_after_day3 / (1 - day3)\n\n    # Calculate the number of sweets before the second day\n    remaining_after_day1 = remaining_after_day2 / (1 - day2)\n\n    # Calculate the number of sweets initially in the bowl\n    initial_sweets = remaining_after_day1 / (1 - day1)\n\n    return int(initial_sweets)\n\nans = solution()"
    ],
    "40435e2c684944fdbc3ffece625e8a3a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_cookies = symbols('total_cookies')\n\n    charlene_kept = total_cookies / 2 + 8\n    cookies_after_charlene = total_cookies - charlene_kept\n    emerald_ate = cookies_after_charlene / 3 + 4\n    cookies_after_emerald = cookies_after_charlene - emerald_ate\n    hebe_ate = cookies_after_emerald / 4\n    cookies_after_hebe = cookies_after_emerald - hebe_ate\n\n    equation = Eq(cookies_after_hebe, 42)\n    total_cookies_solution = solve(equation, total_cookies)\n\n    return total_cookies_solution[0]\n\nans = solution()"
    ],
    "3aad0d27a09d4acabf6d7f99f57fe23b": [
        "def solution():\n    first_kid_chocolates = 17\n    last_kid_chocolates = 150\n    difference = 7\n\n    num_kids = ((last_kid_chocolates - first_kid_chocolates) // difference) + 1\n\n    return num_kids\n\nans = solution()"
    ],
    "dfa6543288d54c429575cda96cbfdc86": [
        "def solution():\n    # Let n be the number of teams in the league.\n    # Each team plays every other team twice, so the total number of matches\n    # for each team is 2*(n-1), since it plays two matches (home and away) against each other team.\n    # The total number of matches is then n*(n-1), because for n teams, each team's matches are counted.\n    # This number has to be divided by 2 because each match is counted twice - once for each team.\n    # So we have the equation:\n    # n*(n-1)/2 * 2 = 30\n    # Simplifying, we get:\n    # n*(n-1) = 30\n    # Now we need to find a number n such that n*(n-1) equals 30.\n    # To find this n, we can iterate through potential values of n and check if they satisfy the equation.\n    n = 1\n    while n*(n-1) != 60:  # We use 60 because each match is played twice, hence total is 30 matches * 2\n        n += 1\n    return n\n\nans = solution()"
    ],
    "03409dc9701540c6a419d3a46178c3c1": [
        "def solution():\n    ans = 528 + 30\n    return ans\n\nans = solution()"
    ],
    "adf81947d41b4b1e99112db71d0a03fa": [
        "def solution():\n    total_uniforms = 3600\n    made_in_5_days = 720\n\n    # Find out how many sets are made per day\n    daily_output = made_in_5_days / 5\n\n    # Calculate how many more sets need to be made\n    remaining_uniforms = total_uniforms - made_in_5_days\n\n    # Calculate how many more days will it take\n    remaining_days = remaining_uniforms / daily_output\n\n    # Include the first 5 days\n    total_days = remaining_days + 5\n\n    return total_days\n\nans = solution()"
    ],
    "8211d1479b8042baafb1f9c517bfcb00": [
        "def solution():\n    # Function to compute number of ways to climb to a given step\n    def count_ways(step):\n        if step <= 1:\n            return 1\n        ways = [0] * (step + 1)\n        ways[0], ways[1] = 1, 1\n        for i in range(2, step + 1):\n            ways[i] = ways[i - 1] + ways[i - 2]\n        return ways[step]\n\n    # Total ways to climb up to the 5th step\n    ways_to_5th = count_ways(5)\n\n    # Total ways to climb up from the 5th step to the 10th step\n    ways_from_5th_to_10th = count_ways(10 - 5)\n\n    # Total ways to climb up to the 10th step while stepping on the 5th step\n    total_ways = ways_to_5th * ways_from_5th_to_10th\n\n    return total_ways\n\nans = solution()"
    ],
    "1f6bb23ddb7b4674a491542df7d83ca5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    first, second, third = symbols('first second third')\n\n    # Define the equations based on the problem description\n    equation1 = Eq(first, second + 1099)\n    equation2 = Eq(third, second - 877)\n    equation3 = Eq(first + second + third, 7656)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (first, second, third))\n\n    # Get the value of the second number\n    return solutions[second]\n\nans = solution()"
    ],
    "6b0695abb6df4ba593213d47fe31343a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = 45\n    boys = symbols('boys')\n\n    equation = Eq(girls, 3 * boys - 21)\n\n    solutions = solve(equation, boys)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "e72460d64b534a3298ee1f886015ab98": [
        "def solution():\n    # prime factors of 2: 2\n    # prime factors of 3: 3\n    # prime factors of 5: 5\n    # prime factors of 8: 2 * 2 * 2\n    # prime factors of 25: 5 * 5\n\n    # Product = 2*2*2*3*8*5*5*25\n    # Number of 2's in prime factors:\n    num_twos = 3 + 3  # From 2*2*2 and 8\n    # Number of 5's in prime factors:\n    num_fives = 2 + 2  # From 5*5 and 25\n\n    # The number of zeros at the end of a product is given by the minimum of the counts \n    # of 2s and 5s in the prime factorization (since 10 = 2 * 5).\n    num_zeros = min(num_twos, num_fives)\n\n    return num_zeros\n\nans = solution()"
    ],
    "928e94ae89fa44c5874fa56b5f7f9faa": [
        "import math\n\ndef solution():\n    for i in range(int(math.sqrt(40)) + 1, int(math.sqrt(50)) + 1):\n        n = i ** 2\n        if 40 < n < 50:\n            return n\n\nans = solution()"
    ],
    "4d1826d9ba0f4ebbb85234e705eb930d": [
        "def solution():\n    result = 5.824 / 0.4\n    return result\n\nans = solution()"
    ],
    "b791f9f3418348b2b25b747708582ba4": [
        "def solution():\n    initial_amount = 150  # Initial amount of water in the jug in ml\n    cup_amount = 40       # Amount of water each cup can hold in ml\n    cups_poured = 3       # Number of cups poured\n    water_used = cup_amount * cups_poured\n    water_left = initial_amount - water_used\n\n    return water_left\n\nans = solution()"
    ],
    "70fdf0a16e48489da5ef6d613c075f2a": [
        "def solution():\n    midpoint = (0.7 + 5.1) / 2\n    return midpoint\n\nans = solution()"
    ],
    "dcd09d0a6e93478eb3e9e8bd7ce45d74": [
        "def solution():\n    return 936 // 54\n\nans = solution()"
    ],
    "01024c395010440bb3461f6a74c2772d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n\n    equation1 = Eq(3 * notebook + 4 * pencil_case + 5 * eraser, 50)\n    equation2 = Eq(notebook + pencil_case, 6)\n    equation3 = Eq(pencil_case + eraser, 8)\n\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n\n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "2cbe94dcc30b432db9e9911ee6b53171": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # symbols for Alice's age and her sister's age\n    alice, sister = symbols('alice sister')\n\n    # Alice is twice as old as her sister now\n    equation1 = Eq(alice, 2 * sister)\n\n    # In 10 years, their total age will be 53 years old\n    equation2 = Eq(alice + 10 + sister + 10, 53)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (alice, sister))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "46c81f732f2f457ea8198cbda5de4904": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the smallest of the four consecutive numbers as 'n'.\n    n = symbols('n', integer=True)\n\n    # The product of four consecutive natural numbers can be expressed as:\n    # n * (n+1) * (n+2) * (n+3) = 3024\n    equation = Eq(n * (n + 1) * (n + 2) * (n + 3), 3024)\n\n    # Solve the equation for the integer solutions of 'n'.\n    solutions = solve(equation, n)\n\n    # Filter out the positive solutions as they represent natural numbers.\n    natural_solutions = [sol for sol in solutions if sol > 0]\n\n    # Get the value of the largest number which is 'n+3'.\n    largest_num = natural_solutions[0] + 3\n\n    return largest_num\n\nans = solution()"
    ],
    "f347b0c1866d4183abf11ae869f9ba55": [
        "def solution():\n    ans = 527 - 9\n    return ans\n\nans = solution()"
    ],
    "3efa9649b4a9475fad4ee03677e8ceed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bob = symbols('alan bob')\n\n    # Bob has 15 more Match Dfex cards than Alan\n    equation1 = Eq(bob, alan + 15)\n\n    # Colin gives Bob 25 cards. Bob now has 3 times as many as Alan\n    equation2 = Eq(bob + 25, 3 * alan)\n\n    solutions = solve((equation1, equation2), (alan, bob))\n\n    return solutions[alan]\n\nans = solution()"
    ],
    "648fd5bbe5184a74a37d66b24481008b": [
        "from math import lcm\n\ndef solution():\n    packs = lcm(6, 8, 9, 15)\n    markers_per_pack = 6 + 8 + 9 + 15\n    min_packs = -(-1000 // markers_per_pack) * packs\n    return min_packs\n\nans = solution()"
    ],
    "5563bcc54cdc46f8b6be436624c0097b": [
        "def solution():\n    num_students = 10\n    handshakes_per_student = num_students - 1\n    total_handshakes = (handshakes_per_student * num_students) // 2\n\n    return total_handshakes\n\nans = solution()"
    ],
    "2efad079da624ca689f0016c3dcf7602": [
        "def solution():\n    ans = 34 * 19\n    return ans\n\nans = solution()"
    ],
    "a8b915f14aa548d4a3dd9ab3e68ccce6": [
        "def solution():\n    # Convert recurring decimals to rational numbers\n    # For 0.1(1)99251(7) = 0.111... + 0.000...0992517\n    # a = 1, b = 992517, c = 6 (length of repeating block after decimal)\n    # Convert to fraction: a / 9 * 10^0 + b / 9...9 (c times '9') * 10^-(c+2)\n    a1, b1, c1 = 1, 992517, 6\n    num1 = a1 / 9 + b1 / (10**c1 - 1) / 100\n\n    # For 0.2(3)456(7) = 0.233... + 0.000...0004567\n    # a = 23, b = 4567, c = 3 (length of repeating block after decimal)\n    # Convert to fraction: a / 9 * 10^1 + b / 9...9 (c times '9') * 10^-(c+2)\n    a2, b2, c2 = 23, 4567, 3\n    num2 = a2 / 99 + b2 / (10**c2 - 1) / 10000\n\n    # Find n by comparing decimal expansions of the two numbers\n    n = 1\n    while True:\n        num1_decimal = round(num1 % 1 * 10**n, 10)  # Get n-th decimal as integer\n        num2_decimal = round(num2 % 1 * 10**n, 10)  # Get n-th decimal as integer\n        # Check if n-th decimal digits of both numbers are equal to 7\n        if int(num1_decimal) == 7 and int(num2_decimal) == 7:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "4e17d0e9e030497eb049f15de9682760": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anne = symbols('anne')\n    maria = anne + 20\n    total_apples = 44\n\n    equation = Eq(anne + maria, total_apples)\n\n    solution = solve(equation, anne)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f66a33367339488285ad5b4dd84375df": [
        "def solution():\n    target = 6789\n    numbers = [678, 6798, 6879, 9876, 6987]\n    closest = min(numbers, key=lambda x: abs(x - target))\n    return closest\n\nans = solution()"
    ],
    "74956c812140447db809a56e7b348996": [
        "def solution():\n    difference = (20 / 100) * 90 - (90 / 100) * 20\n    return difference\n\nans = solution()"
    ],
    "8863cd48f2b44608bc940bde6c45c8fd": [
        "def solution():\n    morning_fruit = 416\n    afternoon_fruit = 248\n    difference = morning_fruit - afternoon_fruit\n    return difference\n\nans = solution()"
    ],
    "efe5d1d421074320ad4c3900d67cbf17": [
        "def solution():\n    orange_ratio = 2\n    water_ratio = 25\n    orange_grams = 10\n\n    water_grams = (water_ratio * orange_grams) / orange_ratio\n\n    return water_grams\n\nans = solution()"
    ],
    "5750692f9864439ba5afe8796b229fda": [
        "def solution():\n    required_average = 8.5\n    scores = [7.9, 8.3, 8.8, 8.6]\n    total_scores_needed = required_average * 5\n    current_total = sum(scores)\n    final_judge_score = total_scores_needed - current_total\n    return final_judge_score\n\nans = solution()"
    ],
    "0e1fad8ec8d14086ac428eca327ba26b": [
        "def solution():\n    # Total pages read\n    total_pages = 550\n\n    # Pages read on the first and last day\n    first_day_pages = 30\n    last_day_pages = 70\n\n    # Total pages read on the first and last day\n    first_last_pages = first_day_pages + last_day_pages\n\n    # Remaining pages to be read\n    remaining_pages = total_pages - first_last_pages\n\n    # Since he reads an arithmetic sequence of pages\n    # The count of remaining days is one less than the count of remaining page differences\n    # remaining_pages = (n-1)d where n is the total number of days and d is the common difference\n\n    # We also know that the last_day_pages = first_day_pages + (n-1)d\n    # By rearranging the first equation:\n    # d = remaining_pages / (n-1)\n    # We can find n from the second equation\n    # n = (last_day_pages - first_day_pages) / d + 1\n\n    # Combining both equations to express n in terms of known values:\n    # n = (last_day_pages - first_day_pages) / (remaining_pages / (n-1)) + 1\n    # Since the numerator in the first equation and the denominator in the second equation is the same:\n    # n = (last_day_pages - first_day_pages) * (n-1) / remaining_pages + 1\n\n    # Thus, we have a quadratic equation for n:\n    # n^2 - n - (last_day_pages - first_day_pages) * (n-1) / remaining_pages = 0\n\n    # To solve for n, we need to find the roots of this quadratic equation\n    # The solutions are: n = (1 +/- sqrt(1 + 4 * (last_day_pages - first_day_pages) * (n-1) / remaining_pages)) / 2\n\n    # Since n must be positive, we use the positive root\n    # However, this quadratic equation can be simplified because we know that n is an integer\n    # The equation represents the sum of an arithmetic sequence: S = n/2 * (first_day + last_day)\n    # From the sum equation we get:\n    # n = 2S / (first_day + last_day)\n\n    # Finding the number of days (n)\n    n = 2 * total_pages / (first_day_pages + last_day_pages)\n\n    # Finding the common difference (d)\n    d = (last_day_pages - first_day_pages) / (n - 1)\n\n    return d\n\nans = solution()"
    ],
    "3cb49c7c36f6450c8a64796070308cdc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(60 - 8 * (2 * x - 5), 4)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7fa90f34a95a47b59d3a3839cc104395": [
        "def solution():\n    # Assuming the interest rate per year is r and it is compounded yearly\n    # The situation can be modelled by the compound interest formula\n    # A = P (1 + r/n)^(nt)\n    # where\n    # A is the amount of money accumulated after n years, including interest.\n    # P is the principal amount (the initial amount of money).\n    # r is the annual interest rate (decimal).\n    # n is the number of times that interest is compounded per year.\n    # t is the time the money is invested for in years.\n\n    from sympy import symbols, Eq, solve\n\n    # Let's represent the interest rate per year as r\n    r = symbols('r')\n\n    # Since the interest is compounded yearly, n = 1\n    n = 1\n    # The principal amount P is $10000\n    P = 10000\n    # The total amount A at the end of the second year will be the principal plus interest earned\n    A = P + 816\n    # The time t is 2 years\n    t = 2\n\n    # Now we set up the equation A = P * (1 + r/n)^(nt) and solve for r\n    equation = Eq(A, P * (1 + r/n)**(n*t))\n\n    # We solve the equation for r\n    interest_rate = solve(equation, r)\n\n    # Assuming there is only one real positive root which is the interest rate per year\n    # We return the interest rate as a percentage by multiplying by 100\n    return float(interest_rate[0] * 100)\n\nans = solution()"
    ],
    "e2aa604a164645d08fcb78a7d4b2edac": [
        "def solution():\n    dividend = 9 * 4 + 2\n    divisor = 4\n    quotient = dividend // divisor\n    remainder = dividend % divisor\n    \n    if remainder != 2 or quotient != 9:\n        correct_quotient = (dividend - remainder) // divisor\n        correct_remainder = remainder\n        correct_answer = correct_quotient\n    else:\n        correct_answer = quotient\n    \n    return correct_answer\n\nans = solution()"
    ],
    "dede4ea0d33d4f38a225a8f17f3bc881": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    number = symbols('number')\n    equation = Eq(2 * number + 7, 43)\n    solution = solve(equation, number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "27bc5028c63b41e1a9f9d0def88902ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Hannah's speed as x\n    # Peter's speed is x + 15\n    hannah_speed = symbols('hannah_speed')\n    \n    # Given ratio of time taken by Peter to Hannah is 3:4\n    # Since speed is inversely proportional to time we get the following equation:\n    # (Hannah's speed)/(Peter's speed) = (Peter's time)/(Hannah's time) \n    # Hannah's speed / (Hannah's speed + 15) = 3/4\n    \n    equation = Eq(hannah_speed / (hannah_speed + 15), 3/4)\n\n    # Solve for Hannah's speed\n    hannah_speed_value = solve(equation, hannah_speed)\n\n    return hannah_speed_value[0]\n\nans = solution()"
    ],
    "1098f69ccd5544cc85bda00f27b8a033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mango, pear, apple = symbols('mango pear apple')\n\n    equation1 = Eq(mango + pear, 3.40)\n    equation2 = Eq(mango + apple, 3.80)\n    equation3 = Eq(4 * mango + 2 * pear + apple, 13.20)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (mango, pear, apple))\n\n    return solutions[mango]\n\nans = solution()"
    ],
    "3082b2d8519e44a1ad584e668793812a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    emily, victor, victoria = symbols('emily victor victoria')\n    \n    equation1 = Eq(emily, 3 * victor)\n    equation2 = Eq(victoria, emily + 68)\n    equation3 = Eq(emily + victor + victoria, 320)\n    \n    solutions = solve((equation1, equation2, equation3), (emily, victor, victoria))\n    \n    return solutions[victoria]\n\nans = solution()"
    ],
    "b9075265d1ee4df3938f4e17c31577cb": [
        "def solution():\n    ans = 3.7 + 5.7\n    return ans\n\nans = solution()"
    ],
    "dd3e36501a5c492dab63fa293539b326": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of fifty-cent coins\n    # Let y be the number of one-dollar coins\n    x, y = symbols('x y')\n\n    # Equation 1: Before getting more coins from his mother,\n    # fifty-cent coins are 2/7 of total coins\n    equation1 = Eq(x, 2/7 * (x + y))\n\n    # Equation 2: After receiving coins from his mother,\n    # the number of one-dollar coins (y + 10) is twice\n    # the number of fifty-cent coins (x + 10)\n    equation2 = Eq(y + 10, 2 * (x + 10))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Total number of coins before getting more from his mother is x + y\n    return solutions[x] + solutions[y]\n\nans = solution()"
    ],
    "6422fe3aeecf483ba766cbd4e64ac26a": [
        "def solution():\n    total_time = 90\n    time_spent_on_multiple_choices = 23\n    time_spent_on_fill_in_the_blank = 35\n    time_left_for_short_answers = total_time - (time_spent_on_multiple_choices + time_spent_on_fill_in_the_blank)\n\n    return time_left_for_short_answers\n\nans = solution()"
    ],
    "dd7483c3437a49a9a145debe3fa29718": [
        "def solution():\n    train_speed = 30  # train speed in meters per second\n    train_length = 850  # train length in meters\n    cross_time = 45  # time to cross the tunnel in seconds\n\n    # The total distance covered by the train while crossing the tunnel\n    total_distance = train_speed * cross_time\n\n    # Length of the tunnel is total distance covered minus the train length\n    tunnel_length = total_distance - train_length\n\n    return tunnel_length\n\nans = solution()"
    ],
    "3b1b4add028148159a147e645f93b19a": [
        "def solution():\n    circles = 5\n    line = 1\n\n    # The maximum number of parts created by n circles is given by the formula:\n    # parts = n^2 + n + 1\n    parts_by_circles = circles ** 2 + circles + 1\n\n    # Each line can intersect each circle in at most 2 points, creating two more parts per circle.\n    parts_created_by_line = 2 * circles\n\n    # We add one more part for the division created by the line itself.\n    total_parts = parts_by_circles + parts_created_by_line + line\n\n    return total_parts\n\nans = solution()"
    ],
    "adde032b1234481e91098235d742001a": [
        "from math import factorial\n\ndef solution():\n    # total number of ways without restriction for 3 people (Joe, Mike, Tina) to choose from 4 entrances\n    total_ways = factorial(4) // factorial(4 - 3)  # This is a permutation (4P3)\n    \n    # number of ways Joe and Mike both choose the same entrance\n    same_entrance_ways = 4 * factorial(2)  # Choose one entrance for both, and permute the two\n    \n    # Subtracting the restricted ways from total ways\n    # Each case where Joe and Mike use the same entrance is counted twice in total_ways (once for each order)\n    final_ways = total_ways - same_entrance_ways\n    \n    return final_ways\n\nans = solution()"
    ],
    "88a249b7e2d34dfe98ded5f27cc37e47": [
        "def solution():\n    total_money = 55\n    saved_money = 32.50\n    spent_money = total_money - saved_money\n\n    # Let the amount spent on transportation be x\n    # Then the amount spent on food is 2x\n    # x + 2x = spent_money\n    # 3x = spent_money\n    # x = spent_money / 3\n\n    transportation = spent_money / 3\n    food = 2 * transportation\n\n    return food\n\nans = solution()"
    ],
    "424ae64f8f474576a4106f853829077b": [
        "def solution():\n    # constants\n    first_3_tons_rate = 4  # dollars per ton for the first 3 tons\n    additional_rate = 3  # dollars for each additional ton\n    fixed_service_fee = 4  # fixed service fee\n    total_amount = 109  # total amount available for water\n\n    # calculate the cost for the first 3 tons and the fixed service fee\n    first_3_tons_cost = 3 * first_3_tons_rate + fixed_service_fee\n\n    # calculate the remaining amount after deducting the cost of first 3 tons and the fixed fee\n    remaining_amount = total_amount - first_3_tons_cost\n\n    # calculate the number of additional tons she can afford with the remaining amount\n    additional_tons = remaining_amount // additional_rate\n\n    # total tons = first 3 tons + additional tons\n    total_tons = 3 + additional_tons\n\n    return int(total_tons)\n\nans = solution()"
    ],
    "582a93bd201d467584951df06919257a": [
        "def solution():\n    H = (45 * 7 + 13 * 7) / 7\n    return H\n\nans = solution()"
    ],
    "e80abf22da4c4703bbd3c8b8cb247517": [
        "def solution():\n    ans = 3258 // 9\n    return ans\n\nans = solution()"
    ],
    "5d63dffe5e5b4c6195a4e20ccdebb0f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    amelia, bala, carl, daniel = symbols('amelia bala carl daniel')\n    \n    equation1 = Eq(bala, amelia / 2 + carl + daniel)\n    equation2 = Eq(carl, 3/4 * (amelia + bala + daniel))\n    equation3 = Eq(amelia + bala + carl + daniel, 6230)\n    equation4 = Eq(amelia, 160)\n    equation5 = Eq(bala, 320 + daniel)\n\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (amelia, bala, carl, daniel))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "19e51d8fef124cbcb849c81b5dde55d3": [
        "def solution():\n    quotient = 15\n    remainder = 6\n    smallest_possible_divisor = remainder + 1\n    smallest_possible_dividend = quotient * smallest_possible_divisor + remainder\n    return smallest_possible_dividend\n\nans = solution()"
    ],
    "ba3935cd34094e49a8cea4e788c25c2f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the time it takes for the lazy gardener to mow the lawn alone\n    x = symbols('x') \n\n    # quick gardener's work rate\n    quick_rate = 1 / 12\n    # lazy gardener's work rate\n    lazy_rate = 1 / x\n\n    # combined work rate\n    combined_rate = quick_rate + lazy_rate\n\n    # Equation for combined work rate to complete the job in 8 hours\n    equation = Eq(combined_rate, 1 / 8)\n\n    # Solving for the time it would take the lazy gardener to mow the lawn alone\n    lazy_time = solve(equation, x)[0]\n\n    return lazy_time\n\nans = solution()"
    ],
    "5d728c04569e4acda389027dab33f9d6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote apples as 'a' and oranges as 'o'\n    a, o = symbols('a o')\n\n    # Equation based on the problem statement\n    # The number of oranges is 32 more than the number of apples\n    equation1 = Eq(o, a + 32)\n\n    # After giving away 1/3 of his apples and 1/2 of his oranges, he had 100 fruits left\n    equation2 = Eq((a - (a / 3)) + (o - (o / 2)), 100)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (a, o))\n\n    # Calculate the total number of fruits before giving them away\n    total_fruits = solutions[a] + solutions[o]\n\n    return total_fruits\n\nans = solution()"
    ],
    "e94e14d7daec44d3928cf6249572099e": [
        "def solution():\n    total_candy = 12 + 9 + 0\n    number_of_girls = 3\n    candy_per_girl = total_candy // number_of_girls\n    return candy_per_girl\n\nans = solution()"
    ],
    "d21ed197c3554a4494dc5ae572154e6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    noah, pete, howard = symbols('noah pete howard')\n\n    equation1 = Eq(noah + pete, 75)\n    equation2 = Eq(noah + howard, 145)\n    equation3 = Eq(howard, 3 * pete)\n\n    solutions = solve((equation1, equation2, equation3), (noah, pete, howard))\n\n    return solutions[noah]\n\nans = solution()"
    ],
    "ab8b76c78fba49bba15b8e9295c78803": [
        "def solution():\n    belinda_tomatoes = 36\n    matthew_tomatoes = belinda_tomatoes - 7\n    initial_matthew_tomatoes = matthew_tomatoes - 7\n    \n    return initial_matthew_tomatoes\n\nans = solution()"
    ],
    "ef768e372ece4b9c863d8281a92c382f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(182 - 5*x - 3*x, 5*x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b4d71da68bcc434e8354987810259e88": [
        "def solution():\n    from math import floor, ceil\n\n    result = floor(2017) - ceil(201.7) + floor(20.17) - ceil(2.017)\n    return result\n\nans = solution()"
    ],
    "b2aea1c47ffd41fb983fc289346c687f": [
        "from math import lcm\n\ndef solution():\n    green_line_interval = 5   # Green line trains set out every 5 minutes\n    red_line_interval = 6     # Red line trains set out every 6 minutes\n    \n    # Calculate the least common multiple to find the time interval \n    # when both trains will set out at the same time again\n    minutes_until_same_time = lcm(green_line_interval, red_line_interval)\n    \n    # Calculate the hours and minutes\n    hours = minutes_until_same_time // 60\n    minutes = minutes_until_same_time % 60\n    \n    # Start time is 5 am, so add the hours to the start time\n    time_in_hours = 5 + hours\n    \n    # Format the time to hh:mm AM/PM format\n    if time_in_hours >= 12:\n        suffix = \"PM\" if time_in_hours > 12 else \"AM\"\n        time_in_hours = time_in_hours % 12 if time_in_hours > 12 else time_in_hours\n    else:\n        suffix = \"AM\"\n        \n    formatted_time = f\"{time_in_hours}:{minutes:02d} {suffix}\"\n    \n    return formatted_time\n\nans = solution()"
    ],
    "d1701c8b237c4c5181c58dcde299fe9b": [
        "def solution():\n    product = 1\n    sum_products = 0\n    for i in range(1, 15, 2):\n        product *= i\n        sum_products += product\n    ans = sum_products + 14\n    return ans\n\nans = solution()"
    ],
    "a5d947afabb14059a86977035b7e71e6": [
        "def solution():\n    jug_capacity_ml = 990\n    half_jug = jug_capacity_ml / 2\n    cups_filled = 3\n    cup_capacity_ml = half_jug / cups_filled\n    return cup_capacity_ml\n\nans = solution()"
    ],
    "aec33ac892404f198dfd2e4806f460f4": [
        "def solution():\n    distance_per_tree = 3\n    num_trees_to_walk = 101 - 1\n    walking_time_for_100_trees_in_minutes = 3\n\n    # Olivia walks 100 trees distance in 3 minutes, we can calculate her speed per minute\n    speed_per_minute = distance_per_tree * num_trees_to_walk / walking_time_for_100_trees_in_minutes \n\n    # Total distance to home is 4000 meters, calculate the time it takes to get home at the speed per minute\n    total_time_to_home_in_minutes = 4000 / speed_per_minute\n\n    return total_time_to_home_in_minutes\n\nans = solution()"
    ],
    "cd28c0514392451480947377c812fcb5": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "65e148bb5a774c4b8538009506ae4475": [
        "def solution():\n    total_cars = 15\n    blue_car_front_position = 8\n\n    blue_car_back_position = total_cars - blue_car_front_position + 1\n\n    return blue_car_back_position\n\nans = solution()"
    ],
    "4274973e4812443fb90e78a925599481": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    cost_5_bananas = 5 * solutions[banana]\n    \n    return cost_5_bananas\n\nans = solution()"
    ],
    "258f6418c7a44634b786fa4d69d806ec": [
        "def solution():\n    number = 29381\n    # To round to the nearest 1000, we find the modulus of the number with 1000.\n    remainder = number % 1000\n    if remainder >= 500:\n        # If the remainder is equal or larger than 500, we round up.\n        ans = number - remainder + 1000\n    else:\n        # If the remainder is less than 500, we round down.\n        ans = number - remainder\n    return ans\n\nans = solution()"
    ],
    "7d415985d40749aeae60fb6233cfafce": [
        "def solution():\n    cost_per_100g = 80\n    weight_needed = 250\n    cost_per_gram = cost_per_100g / 100\n    total_cost = cost_per_gram * weight_needed\n    return total_cost\n\nans = solution()"
    ],
    "e9f47ee528114383ba4f6be4529ce4b8": [
        "def solution():\n    sum_of_squares = 0\n    for i in range(4, 125, 4):\n        sum_of_squares += i**2\n    return sum_of_squares\n\nans = solution()"
    ],
    "f24d6740b95540bf84759a2c0479e327": [
        "def solution():\n    ans = sum(i**2 for i in range(6, 52, 5))\n    return ans\n\nans = solution()"
    ],
    "5fcdd3004ac646839223368cdc7d8517": [
        "def solution():\n    ans = 2017 + 597\n    return ans\n\nans = solution()"
    ],
    "80479df10d714924af0698610d81b4e7": [
        "def solution():\n    fish_to_rabbits = 5 / 2\n    rabbits_to_wheat = 7 / 4\n    wheat_to_fish = 1 / (fish_to_rabbits * rabbits_to_wheat)\n    \n    fish_for_14_wheat = wheat_to_fish * 14\n    \n    return fish_for_14_wheat\n\nans = solution()"
    ],
    "9a284d31007d42739f51042d9bcfbb75": [
        "from itertools import permutations\n\ndef solution():\n    ways = set()\n    people = 'LJAJ'\n    for perm in permutations(people, 4):\n        for i in range(1, 4):\n            for j in range(i+1, 4):\n                for k in range(j+1, 4):\n                    entrance_used = set([perm[0:i], perm[i:j], perm[j:k], perm[k:]])\n                    if len(entrance_used) == 3:\n                        ways.add(tuple(sorted(entrance_used)))\n\n    return len(ways)\n\nans = solution()"
    ],
    "739abceeaa8940b49a1de4e16f2e066f": [
        "def solution():\n    for correct in range(7):\n        wrong = 6 - correct\n        score = correct * 5 - wrong * 2\n        if score == 23:\n            return correct\n\nans = solution()"
    ],
    "210032ce53ff4939827463e6a45cdfea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cows, goats = symbols('cows goats')\n\n    initial_cows_percentage = 65\n    additional_cows_percentage = initial_cows_percentage + 20\n\n    # Equation for the description \"65% of the animals in a farm were cows and the rest were goats.\"\n    equation1 = Eq(cows, (initial_cows_percentage / 100) * (cows + goats))\n\n    # Equation for the description \"the number of goats doubled\" and \"240 more cows and goats were added\"\n    equation2 = Eq(goats * 2, goats + 240)\n\n    # Equation for \"the percentage of cows increased by 20%\"\n    equation3 = Eq(cows + 240, (additional_cows_percentage / 100) * (cows + goats + 240))\n\n    solutions = solve((equation1, equation2, equation3), (cows, goats))\n\n    return solutions[goats]\n\nans = solution()"
    ],
    "854b6e25b0df409b8d09ffcf3c018a12": [
        "def solution():\n    numbers = [4, 6, 12, 18]\n    mean = sum(numbers) / len(numbers)\n    return mean\n\nans = solution()"
    ],
    "1f3d2852ba334ae381d67ba4685feefc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote Justin's current age as 'j'\n    j = symbols('j')\n\n    # Creating the equation based on the problem statement\n    # In 18 years, Justin will be 4 times as old as he was 6 years ago\n    equation = Eq(j + 18, 4 * (j - 6))\n\n    # Solving the equation for Justin's current age\n    justin_age = solve(equation, j)\n\n    return justin_age[0]\n\nans = solution()"
    ],
    "d1030adb2d044db580ef9ccb90cd0ce2": [
        "def solution():\n    time_per_drawing = 124\n    total_drawings = 111\n    total_time = time_per_drawing * total_drawings\n    return total_time\n\nans = solution()"
    ],
    "e705de293fcb400b9a1dfb656dfa1166": [
        "def solution():\n    # Start with the smallest number that can be divided by 8 with no remainder\n    cookies = 8\n    while True:\n        # Check if when divided by 9, there is 1 cookie left\n        if cookies % 9 == 1:\n            # If we find such a number, return it\n            return cookies\n        # Otherwise, increase the number of cookies by 8 and check again\n        cookies += 8\n            \nans = solution()"
    ],
    "fd98368e011c40af9c0a16f0fe8c92a9": [
        "def solution():\n    ans = 378 - 196\n    return ans\n\nans = solution()"
    ],
    "ceadf2b1ae6f4d6885ecfbb1cd6a855f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 4), (2, 5), (3, 6)]\n    answer, _ = solve_congruence(*congruences)\n\n    while answer < 100:\n        return int(answer)\n        answer += 4 * 5 * 6\n\nans = solution()"
    ],
    "cb887c2f2c5545b7a05451b8ef325c36": [
        "def solution():\n    halfway = (2.6 + 4.8) / 2\n    return halfway\n\nans = solution()"
    ],
    "99f042a00a454b7493149ecaa15aeaae": [
        "def solution():\n    total_cost = 62\n    if total_cost >= 50:\n        discount = 15\n    elif total_cost >= 20:\n        discount = 4\n    else:\n        discount = 0\n    final_payment = total_cost - discount\n    return final_payment\n\nans = solution()"
    ],
    "fb6bdead23d74b31a9f612a923a7e6d0": [
        "def solution():\n    ans = 828 + 191\n    return ans\n\nans = solution()"
    ],
    "6689bf51afe64009a81b09cd69008faf": [
        "def solution():\n    books_per_case = 10 // 2\n    total_books_in_six_cases = books_per_case * 6\n    return total_books_in_six_cases\n\nans = solution()"
    ],
    "4bc1254a6fe041a991a7100f650c67ac": [
        "def solution():\n    from math import factorial\n    # Two boys can be arranged in 2! ways\n    boys_arrangements = factorial(2)\n    # Three girls can be arranged in 3! ways\n    girls_arrangements = factorial(3)\n    # Total arrangements is the product of boys' and girls' arrangements\n    total_arrangements = boys_arrangements * girls_arrangements\n    return total_arrangements\n\nans = solution()"
    ],
    "86e9c26ad82341cfa9a20b2d32bf56b0": [
        "def solution():\n    # Given ages of the siblings\n    ages = [6, 9, 10]\n    \n    # Given condition: Tom's age is a multiple of 3\n    # Tom can be either 9 or 6, but since Jason is younger, Tom can't be 6.\n    tom_age = 9\n\n    # Jason is younger than Tom, so he must be the one who is 6 years old.\n    jason_age = 6\n\n    # Adam's age is the one that's left\n    adam_age = [age for age in ages if age not in [tom_age, jason_age]][0]\n\n    return adam_age\n\nans = solution()"
    ],
    "07a423a429ad445dae3180bf686780f7": [
        "def solution():\n    # Drawing all balls from one colour (worst case) won't ensure 3 different coloured balls: 5 balls\n    # Drawing all from another colour adds 5 more: 5 + 5 = 10 balls\n    # Drawing one more ball will ensure to have at least 3 different coloured balls: 10 + 1 = 11 balls\n    return 5 + 5 + 1\n\nans = solution()"
    ],
    "ccebb61c3253490ca4582aebc55574a0": [
        "def solution():\n    number = \"2023\"\n    n = 1\n    while True:\n        num = int(number * n)\n        if num % 11 == 0:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "60b666d3655c439dae65e37097947530": [
        "def solution():\n    ans = 224 - 75\n    return ans\n\nans = solution()"
    ],
    "84dcdcd96c1048d69413739dad19be6d": [
        "def solution():\n    b = (7 + 9) / 4\n    return b\n\nans = solution()"
    ],
    "07da074b86d84faabb12f53c21c42e0c": [
        "def solution():\n    ans = 80040\n    return ans\n\nans = solution()"
    ],
    "72e7f1101ae74488b35a8eb2c990d03b": [
        "def solution():\n    return 483 // 21\n\nans = solution()"
    ],
    "218136d2d92e439d904e0302f6af8a72": [
        "def solution():\n    # To maximize the number of apples Avril can get, we should minimize the apples the other children get.\n    # Since each child must get a different number of apples and at least one, we start distribution from 1.\n    # Thus, the first five children would get 1, 2, 3, 4, and 5 apples respectively.\n    # Now, we calculate the total number of apples these five children would get.\n    apples_others = sum(range(1, 6))  # 1+2+3+4+5\n\n    # Subtract the total apples given to the first five children from the total number of apples to get Avril's share.\n    avril_apples = 28 - apples_others\n\n    return avril_apples\n\nans = solution()"
    ],
    "50398a9afcad4e3e91e6a646e9abe499": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n    eq1 = Eq(triangle + triangle, square)\n    eq2 = Eq(square + triangle, circle)\n    eq3 = Eq(diamond, circle + square + triangle)\n\n    solutions = solve((eq1, eq2, eq3), (triangle, square, circle, diamond))\n\n    return solutions[diamond] / solutions[triangle]\n\nans = solution()"
    ],
    "7c9de8ac84804f9ba2fe6b73d259b89d": [
        "def solution():\n    count = 0\n    for i in range(1, 401):\n        count += str(i).count('3')\n    return count\n\nans = solution()"
    ],
    "21a782c4b45c43f9b4ecbc9c1de7c46b": [
        "def solution():\n    total_money = 984\n    laptop_cost = (5/8) * total_money\n    return laptop_cost\n\nans = solution()"
    ],
    "e9497c826db341cda1c37f184c32773e": [
        "def solution():\n    lori_speed = 2\n    jocye_lori_ratio = 3 / 2\n    jocye_speed = lori_speed * jocye_lori_ratio\n    jocye_distance_10_sec = jocye_speed * 10\n    return jocye_distance_10_sec\n\nans = solution()"
    ],
    "e1599fd308ba411f82f7fa4febd782fe": [
        "def solution():\n    initial_average = 60\n    new_average = 70\n    initial_sum = initial_average * 2\n    new_sum = new_average * 3\n    new_number = new_sum - initial_sum\n    return new_number\n\nans = solution()"
    ],
    "40c1e8a02c9845be9b54d604dedcbd90": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Define the time format\n    time_format = \"%H:%M\"\n\n    # Define the times based on the problem\n    time_left_school = datetime.strptime(\"15:22\", time_format)\n    time_bus_caught = datetime.strptime(\"16:01\", time_format)\n    time_bus_trip_start = time_bus_caught\n    time_bus_trip_end = time_bus_trip_start + timedelta(minutes=18)\n    time_got_home = datetime.strptime(\"16:35\", time_format)\n\n    # Calculate the walking time before bus\n    walking_time_before_bus = (time_bus_caught - time_left_school).total_seconds() / 60\n\n    # Calculate the walking time after bus\n    walking_time_after_bus = (time_got_home - time_bus_trip_end).total_seconds() / 60\n\n    # Total walking time\n    total_walking_time = walking_time_before_bus + walking_time_after_bus\n\n    return int(total_walking_time)\n\nans = solution()"
    ],
    "b93faf4325af43f9b9ddf824cb85bb6d": [
        "def solution():\n    first_term = 16\n    second_term = 23\n    difference = second_term - first_term\n    last_term = 79\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "2a34cf02f3524187ba971bb585f0ff12": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ken_original, lisa_original, amount_given = symbols('ken_original lisa_original amount_given')\n\n    equation1 = Eq(ken_original, lisa_original + 15)\n    equation2 = Eq(ken_original - amount_given, lisa_original + amount_given - 21)\n\n    solutions = solve((equation1, equation2), (ken_original, lisa_original, amount_given))\n\n    return solutions[amount_given]\n\nans = solution()"
    ],
    "ea15746d343648b5b1905e6b6b3058e1": [
        "def solution():\n    trophies = 0\n    for i in range(1, 10):\n        if i <= 5:\n            trophies += i\n        else:\n            trophies += (10 - i)\n    return trophies\n\nans = solution()"
    ],
    "46c88bd515d4485ea196f2cb3df07861": [
        "def solution():\n    boys = 290\n    girls = boys - 80\n    total_children = boys + girls\n\n    percentage_boys = (boys / total_children) * 100\n    return percentage_boys\n\nans = solution()"
    ],
    "9f8ac2e29e8241a1b702cf02e3cc8591": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of cookies eaten on the first day\n    x = symbols('x')\n\n    # Setting up arithmetic sequence with common difference of 6\n    # x + (x + 6) + (x + 12) + (x + 18) + (x + 24) = 100\n    equation = Eq(x + (x + 6) + (x + 12) + (x + 18) + (x + 24), 100)\n\n    # Solve the equation for x\n    cookies_first_day = solve(equation, x)[0]\n\n    return cookies_first_day\n\nans = solution()"
    ],
    "3836f8199279464492fa9ffeb517630a": [
        "def solution():\n    # Initializing the sequence list to store the numbers\n    sequence = []\n\n    # Iterating to add the needed numbers to the sequence list\n    for i in range(1, 9):\n        sequence.extend([i] * (i + 1))\n\n    # Find the length of the sequence\n    N = len(sequence)\n\n    # Since the sequence is already sorted, we can find the median directly\n    if N % 2 == 1:\n        # If it's odd, median is the middle value\n        median = sequence[N // 2]\n    else:\n        # If it's even, median is the average of the two middle values\n        median = (sequence[N // 2 - 1] + sequence[N // 2]) / 2\n\n    return median\n\nans = solution()"
    ],
    "e91231eaf4d8439faaede60ec5091276": [
        "def solution():\n    total_marbles_except_red = 18 + 8  # blue + orange marbles\n    marbles_to_ensure_red = total_marbles_except_red + 2  # plus 2 red marbles\n    return marbles_to_ensure_red\n\nans = solution()"
    ],
    "34f44583a8cd45e19c113454790dece8": [
        "def solution():\n    from itertools import permutations\n\n    digits = [3, 1, 9, 2]\n    all_possible_numbers = sorted([''.join(map(str, p)) for p in permutations(digits)])\n    smallest_number = int(all_possible_numbers[0])\n    largest_number = int(all_possible_numbers[-1])\n    \n    return largest_number - smallest_number\n\nans = solution()"
    ],
    "372d3979dd3241aa8a0f262aeedf3e12": [
        "def solution():\n    count = 0\n    # Iterating through each student's number\n    for i in range(1, 31):\n        # If the number is a multiple of both 2 and 3 (6), it will end up the same way it started.\n        # Otherwise, if it's a multiple of only one of those, it will turn around.\n        if i % 2 == 0 and i % 3 == 0:\n            continue\n        elif i % 2 == 0 or i % 3 == 0:\n            count += 1\n    # The remaining students are facing the opposite way\n    ans = 30 - count\n    return ans\n\nans = solution()"
    ],
    "bf2cd12d57fa4f7bb8bebd58e44e01a3": [
        "def solution():\n    return 3267 - 745\n\nans = solution()"
    ],
    "89e2769fb2db4433a5c129d85a787ba3": [
        "def solution():\n    from sympy import Eq, solve, sqrt\n\n    x = solve(Eq(sqrt(x) + sqrt(36), sqrt(81)), x)\n\n    return x[0]\n\nans = solution()"
    ],
    "7670470dcd1f4c8c96ea9a2887dfc3bc": [
        "def solution():\n    first_term = 10\n    fourth_term = 25\n    total_rows = 25\n\n    # Calculate common difference\n    common_difference = (fourth_term - first_term) // (4 - 1)\n    \n    # Calculate the last term using the formula for the nth term of an arithmetic sequence:\n    # nth_term = first_term + (n - 1) * common_difference\n    last_term = first_term + (total_rows - 1) * common_difference\n    \n    # Calculate the sum of the arithmetic sequence using the formula:\n    # sum = (n / 2) * (first_term + last_term)\n    total_athletes = (total_rows / 2) * (first_term + last_term)\n    \n    return int(total_athletes)\n\nans = solution()"
    ],
    "8dc109b953614926bb4b8a13ca7104a0": [
        "def solution():\n    # Given the problem, switching doors (from an initial random choice)\n    # should theoretically give a 2/3 chance of winning the car, while sticking\n    # with the original choice gives 1/3 chance of winning the car. This is the\n    # Monty Hall problem.\n\n    # Since the host knows where the car is, they will always open a gate with a goat\n    # after the initial choice. Therefore, if the first choice was a car (1/3 chance),\n    # the remaining door also has a goat. But if the first choice was a goat (2/3\n    # chance), the remaining door has the car.\n\n    # The ideal strategy is to switch to gate 2.\n    # This doesn't actually require calculation as it is a well-documented statistical\n    # result, but for the sake of returning a result:\n    \n    # Probability of car behind gate 2 after switch\n    prob_switch_win = 2/3\n    \n    # Probability of car behind gate 1 if staying\n    prob_stay_win = 1/3\n    \n    # Return the probabilty of winning if we switch\n    return prob_switch_win\n\nans = solution()"
    ],
    "3814e1d67d1e4e95aa0ff2ddfffc3251": [
        "def solution():\n    return 2184 // 7\n\nans = solution()"
    ],
    "6f725efbd53047b3a646809b5162d3a0": [
        "def solution():\n    return 221 * 4\n\nans = solution()"
    ],
    "29fb2769be344578a23b172da388fb1e": [
        "def solution():\n    first_term = 1\n    last_term = 49\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_sequence = num_terms * (first_term + last_term) // 2\n\n    return sum_sequence\n\nans = solution()"
    ],
    "708c9e7ed608441c98ea48c7bbc04858": [
        "def solution():\n    return 468 // 9\n\nans = solution()"
    ],
    "dfba4fdc8eb54b0c962f907a4edf3d42": [
        "def solution():\n    num = 2\n    while not (num % 4 == 2 and num % 3 == 2 and num % 7 == 1):\n        num += 1\n    return num\n\nans = solution()"
    ],
    "33f5c3de051f4cdebf9fe82fa4041ef2": [
        "def solution():\n    x = symbols('x')\n    total_spent = 6 * x\n    return total_spent\n\nans = solution()"
    ],
    "c34160a26e5c402eae8db3c3bc42f9b9": [
        "def solution():\n    total_sum = sum(i * (i + 1) for i in range(1, 32))\n    return total_sum\n\nans = solution()"
    ],
    "0c251d28e5f34b3790b5b39adc9a140b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_sum = symbols('original_sum')\n\n    cds_cost = original_sum * 3/4\n    remaining_sum = original_sum - cds_cost\n    batteries_cost = remaining_sum / 4\n    left_sum = remaining_sum - batteries_cost\n\n    equation = Eq(left_sum, original_sum / 3)\n\n    sol = solve(equation, original_sum)\n\n    return sol[0]\n\nans = solution()"
    ],
    "60431e14fe314b0dbc9334280d889c13": [
        "def solution():\n    poke_per_trainer_per_min = 7 / 7 / 7\n    return 49 / (49 * poke_per_trainer_per_min)\n\nans = solution()"
    ],
    "6e103a2ef68043989f0694b5cb663d85": [
        "from math import factorial\n\ndef combination(n, k):\n    return factorial(n) // (factorial(k) * factorial(n - k))\n\ndef solution():\n    # Total ways to choose 1 book for the first student out of 7\n    first_student = combination(7, 1)\n    # Total ways to choose 1 book for the second student out of the remaining 6 books\n    second_student = combination(6, 1)\n    # Total ways to choose 1 book for the third student out of the remaining 5 books\n    third_student = combination(5, 1)\n    \n    # Since the order of selection matters, we multiply the possibilities\n    total_ways = first_student * second_student * third_student\n    return total_ways\n\nans = solution()"
    ],
    "9193db4182e34c75be3ffc7a426aad35": [
        "def solution():\n    num_friends = 13\n    time_per_friend = 142\n    total_time = num_friends * time_per_friend\n    return total_time\n\nans = solution()"
    ],
    "a6a193e0597a44869d654226d5c6024e": [
        "def solution():\n    # Number 928 repeats 33 times to form a 99-digit number\n    repeats = 99 // len(\"928\")\n\n    # Remainder of 928 divided by 9\n    remainder_928 = 928 % 9\n\n    # Remainder of the whole number is the sum of the remainders\n    total_remainder = (remainder_928 * repeats) % 9\n\n    return total_remainder\n\nans = solution()"
    ],
    "aad63064de384c75967ad2fe1ab5fc65": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for the unknown value\n    oplus = symbols('oplus')\n    \n    # Set up the equation according to the problem\n    equation = Eq(oplus * 9 + 47 - oplus, 84 + 27)\n    \n    # Solve the equation for the unknown value\n    solutions = solve(equation, oplus)\n    \n    # Get the solution from the solutions list\n    return solutions[0]\n\nans = solution()"
    ],
    "d8e38e05e8d54b2da8f23e0d88ae7907": [
        "def solution():\n    total_people = 5000\n    incorrect_people = 1500\n\n    percentage_incorrect = (incorrect_people / total_people) * 100\n\n    return percentage_incorrect\n\nans = solution()"
    ],
    "077a03a4ff1146cf942d5c075e60786b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the three numbers be a, b, and c where a < b < c    \n    a, b, c = symbols('a b c')\n\n    # Establish equations based on the problem statement\n    equation1 = Eq(a + b + c, 56)\n    equation2 = Eq((a + b)/2, 14)\n    equation3 = Eq((b + c)/2, 22)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n\n    # Since a < b < c, b is the median\n    return solutions[b]\n\nans = solution()"
    ],
    "2a141bb7917247d0940bb1bec7dc53e1": [
        "def solution():\n    target_value = 2.5\n    numbers = [3, 2.1, 2.494, 2.449, 2.51]\n    closest_value = min(numbers, key=lambda x: abs(target_value - x))\n\n    return closest_value\n\nans = solution()"
    ],
    "0fbd2843bdcc4f0a895c0a1773ac180c": [
        "def solution():\n    # Cost of one 'Sour Sweets' bar in pence\n    cost_sour_sweets = 12\n    # Cost of one 'Chocolate Drops' bar in pence\n    cost_choco_drops = 17\n    # Eliot's payment in pence (3 pounds in pence)\n    eliot_payment = 3 * 100\n    # Maya's payment in pence (4 pounds in pence)\n    maya_payment = 4 * 100\n    \n    # We need to find the number of bars where the change from both transactions is the same\n    # For this, we iterate over possible numbers of bars and check when the changes are equal\n    for bars in range(1, min(eliot_payment // cost_sour_sweets, maya_payment // cost_choco_drops) + 1):\n        change_eliot = eliot_payment - (bars * cost_sour_sweets)\n        change_maya = maya_payment - (bars * cost_choco_drops)\n        if change_eliot == change_maya:\n            return bars\n\nans = solution()"
    ],
    "e771bc7cbc15407692c34b8827ae5c9c": [
        "def solution():\n    digits = [1, 0, 2, 9]\n    \n    # Sort the list to find the smallest digits for each place value\n    digits.sort()\n    \n    # Create the smallest even number\n    if digits[0] == 0:  # if the smallest digit is 0, it can't be at the beginning\n        # Find the smallest non-zero digit for the first position\n        for d in digits[1:]:\n            if d != 0:\n                smallest_first_digit = d\n                break\n        # Remove the used digit and reinsert the 0 at start\n        digits.remove(smallest_first_digit)\n        digits = [smallest_first_digit] + digits\n\n    # Place the smallest even digit at the end\n    for i in range(len(digits) - 1, -1, -1):\n        if digits[i] % 2 == 0:\n            smallest_even_digit = digits.pop(i)\n            break\n    \n    # Construct the smallest 4-digit even number\n    smallest_even_number = int(''.join(map(str, digits[:-1]))) * 10 + smallest_even_digit\n    \n    return smallest_even_number\n\nans = solution()"
    ],
    "2a41554ff61e4bf3b29916349e9d7f23": [
        "def solution():\n    total_juice = 10\n    per_container = 2\n\n    num_containers = total_juice / per_container\n\n    return int(num_containers)\n\nans = solution()"
    ],
    "308dc425a3d44c09abe3d9fd91e8ec30": [
        "def solution():\n    count = 0\n    for i in range(41):\n        if '2' in str(i):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "026a3697b867401aa50c1eed67be23fe": [
        "def solution():\n    eq1 = 66 * 2 + 66 * 3\n    eq2 = 66 * 5\n\n    return eq1 == eq2\n\nans = solution()"
    ],
    "1feb10160f034a898eb973a9aac889c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    pork_dumpling, bun = symbols('pork_dumpling bun')\n    \n    # Set up the equations based on the problem statement\n    eq1 = Eq(6 * pork_dumpling + 4 * bun, 92)\n    eq2 = Eq(3 * pork_dumpling + 1 * bun, 41)\n    \n    # Solve the equations\n    solutions = solve((eq1, eq2), (pork_dumpling, bun))\n    \n    return solutions[pork_dumpling]\n\nans = solution()"
    ],
    "c42ce86645884bed8f12c68ae8245158": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Jackson's age now (j) and Chloe's age now (c)\n    j, c = symbols('j c')\n\n    # Equation for the sum of their ages now\n    equation1 = Eq(j + c, 54)\n\n    # Equation for their ages in 3 years, with Jackson being 5 times Chloe's age\n    equation2 = Eq(j + 3, 5 * (c + 3))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (j, c))\n\n    # Jackson's age 3 years later\n    jackson_age_in_3_years = solutions[j] + 3\n\n    return jackson_age_in_3_years\n\nans = solution()"
    ],
    "b7fea9e98bef46af9acd40209ffe5387": [
        "def solution():\n    ans = 297 + 198 + 204 + 99\n    return ans\n\nans = solution()"
    ],
    "ada253044cf143859091a35ddb998f0b": [
        "def solution():\n    base_charge = 2.5\n    additional_charge = 1.2\n    total_cost = 8.5\n    base_distance = 1.8\n\n    cost_after_base = total_cost - base_charge\n    additional_distance = cost_after_base / additional_charge\n    total_distance = base_distance + additional_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "c25c01f5db07454fba0a46c84f70815c": [
        "def solution():\n    apples = 80\n    # at least one student gets at least 3 apples,\n    # therefore, at most, we can have 3 apples per student\n    # using the pigeonhole principle, to determine the number of students (pigeonholes)\n    class_size = apples // 3  # integer division\n    return class_size\n\nans = solution()"
    ],
    "f7e855eea0fd468da4854a78b1524831": [
        "def solution():\n    for num_apples in range(1, 50):\n        if num_apples % 5 == 0 and num_apples % 6 == 3 and num_apples % 8 == 5:\n            return num_apples\n\nans = solution()"
    ],
    "186bc13df3b24db5a2d94b621966fdd7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, yellow, blue = symbols('red yellow blue')\n    equation1 = Eq(red, 2 * yellow)\n    equation2 = Eq(blue, 3 * yellow)\n    equation3 = Eq(red + yellow + blue, 150)\n\n    solutions = solve((equation1, equation2, equation3), (red, yellow, blue))\n\n    return solutions[red]\n\nans = solution()"
    ],
    "dfa5352c28124e0ebb6a359a752ef95f": [
        "def solution():\n    return 648 * 5\n\nans = solution()"
    ],
    "7a0515a38a4e44bc9248081a392748cd": [
        "def solution():\n    received_chocolates = 8\n    original_chocolates = received_chocolates * 2  # As you received half, we multiply by 2 to get the original number\n    return original_chocolates\n\nans = solution()"
    ],
    "36675ac7266944a1a8727f6fe3dbe742": [
        "def solution():\n    boys = 36\n    girls = 12\n    big_car_capacity = 4\n    small_car_capacity = 2\n\n    big_cars_needed = boys // big_car_capacity\n    small_cars_needed = girls // small_car_capacity\n\n    total_cars_needed = big_cars_needed + small_cars_needed\n\n    return total_cars_needed\n\nans = solution()"
    ],
    "8f2c8b866334452790965d39bbf73bfd": [
        "def solution():\n    mother_age = 36\n    father_age = 42\n    julia_age = 7\n    total_target = 100\n    \n    years = 0\n    while mother_age + father_age + julia_age + 3 * years < total_target:\n        years += 1\n \n    return years\n\nans = solution()"
    ],
    "900f814eac484c948ddfe9ef92667f08": [
        "def solution():\n    ounces_in_pound = 16\n    pounds_in_kg = 2.2\n    weight_in_ounces = 56\n\n    weight_in_pounds = weight_in_ounces / ounces_in_pound\n    weight_in_kg = weight_in_pounds / pounds_in_kg\n\n    return round(weight_in_kg, 1)\n\nans = solution()"
    ],
    "a1c19e0170ab4067a75561de9f31246c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x + 0.25 * x, 200)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d4f51ce9d1594b9dae05c831a2fa12b0": [
        "def solution():\n    # The sequence is symmetrical around the center number 80.\n    # So we can calculate the sum of one half and then double it, subtracting one occurrence of 80\n    sum_half = sum(range(5, 81))  # Sum of numbers from 5 to 80\n    total_sum = 2 * sum_half - 80  # Doubling the sum and subtract one 80\n    return total_sum\n\nans = solution()"
    ],
    "5eb0c6d54ccd4e5192f0639fa9e61712": [
        "def solution():\n    return 342 * 24\n\nans = solution()"
    ],
    "3cfe944baa5b44af9f73a9a9804766df": [
        "from itertools import permutations\n\ndef solution():\n    max_A = 0\n    for perm in permutations(range(1, 10)):\n        A = (100*perm[0] + 10*perm[1] + perm[2]) + \\\n            (100*perm[1] + 10*perm[2] + perm[3]) + \\\n            (100*perm[2] + 10*perm[3] + perm[4]) + \\\n            (100*perm[3] + 10*perm[4] + perm[5]) + \\\n            (100*perm[4] + 10*perm[5] + perm[6]) + \\\n            (100*perm[5] + 10*perm[6] + perm[7]) + \\\n            (100*perm[6] + 10*perm[7] + perm[8])\n        max_A = max(A, max_A)\n    return max_A\n\nans = solution()"
    ],
    "f2784483b59048f78ecec37c0cf104ea": [
        "def solution():\n    original_price = 32 / (1 - 0.20)\n    final_price = 32 - 4\n    total_discount = original_price - final_price\n    total_percentage_discount = (total_discount / original_price) * 100\n\n    return total_percentage_discount\n\nans = solution()"
    ],
    "79716db040e342488b8e0ca3c513ff69": [
        "from itertools import permutations\n\ndef solution():\n    persons = ['A', 'B', 'C', 'D', 'E']\n    count = 0\n    for perm in permutations(persons):\n        if perm.index('A') < perm.index('B') < perm.index('C'):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "639d9d79e69d4eb784e27de0551d879d": [
        "def solution():\n    ans = sum(2019 / (n * (n + 7)) for n in range(3, 2013, 7))\n    return ans\n\nans = solution()"
    ],
    "fdf926a10e994a328cedd41a2dba9645": [
        "def solution():\n    first_term = 21\n    last_term = 159\n    common_difference = 2\n\n    n = ((last_term - first_term) // common_difference) + 1\n    sum_of_series = n * (first_term + last_term) / 2\n    return int(sum_of_series)\n\nans = solution()"
    ],
    "4336ad7957714455a5e676bfde71730b": [
        "def solution():\n    # Observing the pattern given in the puzzle:\n    # (10 - 1)^2 = 1, because 9^2 = 81 and the last digit is 1\n    # (11 - 1)^2 = 4, because 10^2 = 100 and the last digit is 0, 100 + 4 = 104 and the middle digit is 4\n\n    # Hence, the pattern suggests (number - 1)^2 and then take the last two digits (tens and units)\n    # Let's apply the same logic to 55\n    result = (55 - 1) ** 2\n    last_two_digits = result % 100  # Taking the last two digits of the number by modulo operation\n\n    return last_two_digits\n\nans = solution()"
    ],
    "59c88edfb7be49da8035991eac68ecce": [
        "from itertools import permutations\n\ndef solution():\n    digits = '012345'\n    all_numbers = sorted([''.join(p) for p in permutations(digits)])\n    return all_numbers[504]\n\nans = solution()"
    ],
    "8fa1eaa5b7fa4b98874b9e1f39b2e808": [
        "def solution():\n    count = 0\n\n    # hundreds place can't be 0, so it has 2 options (2 or 3)\n    for hundreds in [2, 3]:\n        # tens place can be 0, 2, or 3 (3 options)\n        for tens in [0, 2, 3]:\n            # ones place can be 0, 2, or 3 (3 options)\n            for ones in [0, 2, 3]:\n                # Ensure we're not repeating digits\n                if len(set([hundreds, tens, ones])) == 3:\n                    count += 1\n    \n    return count\n\nans = solution()"
    ],
    "f81850060b9546ac8c3d3601b6fcbdba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')\n    boys = 36 - girls\n    total_average = 89\n    girls_average = 88\n    boys_average = 91\n\n    equation = Eq(girls * girls_average + boys * boys_average, total_average * 36)\n\n    girls_number = solve(equation, girls)\n\n    return girls_number[0]\n\nans = solution()"
    ],
    "6bef5aece1a847a6937f986da3d23922": [
        "def solution():\n    # Alice's work rate per day\n    alice_work_rate = 1 / 40\n    \n    # Bob's work rate per day\n    bob_work_rate = 1 / 60\n    \n    # Total work rates\n    total_work_rate = alice_work_rate + bob_work_rate\n    \n    # Total days worked\n    total_days = 27\n    \n    # Total work done\n    total_work_done = total_days * bob_work_rate\n    \n    # Remaining work for Alice after Bob's contribution\n    work_remaining_for_alice = 1 - total_work_done\n    \n    # Days Alice actually worked\n    actual_work_days_alice = work_remaining_for_alice / alice_work_rate\n    \n    # Days Alice took off\n    days_off_alice = total_days - actual_work_days_alice\n    \n    return days_off_alice\n\nans = solution()"
    ],
    "eea0bc5267ed47068ae3e77ef2b698e5": [
        "def solution():\n    return 546 * 4\n\nans = solution()"
    ],
    "7ee4e5c971f5489dada98a446c456e7d": [
        "def solution():\n    multiples = []\n    for num in range(21, 50):\n        if num % 6 == 0 and num % 9 == 0:\n            multiples.append(num)\n    return multiples\n\nans = solution()"
    ],
    "b8879dc8433645f393f3d14ce8b21788": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, white, black = symbols('red white black')\n\n    equation1 = Eq(red/white, 1/2)\n    equation2 = Eq(white/black, 3/4)\n    equation3 = Eq(red + white + black, 136)\n\n    solutions = solve((equation1, equation2, equation3), (red, white, black))\n\n    return solutions[red]\n\nans = solution()"
    ],
    "730403a00f674fff868250a995376cb4": [
        "def solution():\n    # Given that 105, 120, and 135 are the 7th, 8th, and 9th terms respectively,\n    # we can find the common difference of the arithmetic sequence.\n    common_difference = 120 - 105  # This is the difference between consecutive terms\n\n    # Now, we find the first term by going back 6 terms from the 7th term\n    first_term = 105 - 6 * common_difference\n\n    # Calculate the 100th term using the formula for the nth term of an arithmetic sequence:\n    # nth_term = first_term + (n - 1) * common_difference\n    nth_term = first_term + (100 - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "606a8457449743e08d9df3044b63e356": [
        "def solution():\n    # If I take one red and one blue, I won't be sure to have a matching pair.\n    # Therefore, if I take one more of any color, I have a matching pair.\n    # That means I need to take at least 3 socks to be sure to have a matching pair.\n    ans = 3\n    return ans\n\nans = solution()"
    ],
    "703de86e768447d88b6ebb7aeb638e8e": [
        "def solution():\n    combined_age_4_years_ago = 24\n    number_of_dogs = 3\n\n    # Each dog was 4 years younger 4 years ago\n    # Combined age increases by 4 * number of dogs over 4 years to the present\n    # Then it will increase by 2 * number of dogs over the next 2 years\n    combined_age_in_2_years = combined_age_4_years_ago + (4 + 2) * number_of_dogs\n\n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "640eb5c54e4c4b87a5a40a1c3e55b996": [
        "def solution():\n    eleventh_square = 11 ** 2\n    return eleventh_square\n\nans = solution()"
    ],
    "371b5fe21e2e4a93b42f86daca04f7cf": [
        "def solution():\n    ans = 5297 + 7345\n    return ans\n\nans = solution()"
    ],
    "c7d0858edd084447b5408a6df5a80275": [
        "def solution():\n    n = (4**2) / 2\n    return int(n)\n\nans = solution()"
    ],
    "7db195e18e37456ca8f6e7f6ef27321c": [
        "def solution():\n    # Let the number of marbles Ryan had at first be 2x, \n    # and the number of marbles Audrey had at first be 7x.\n    # After Ryan bought another 20 marbles, he had 2x + 20 marbles.\n    # After Audrey gave away 80 marbles, she had 7x - 80 marbles.\n    # The new ratio is 1:3, so we have (2x + 20)/(7x - 80) = 1/3.\n    # This can be simplified to 3*(2x + 20) = 7x - 80.\n    # Solving for x gives us x = 60.\n    # Thus, Audrey had 7x marbles at first, which is 7*60.\n\n    x = (80 + 3 * 20) / (7 - 3 * 2)\n    audrey_marbles_at_first = 7 * x\n    return int(audrey_marbles_at_first)\n\nans = solution()"
    ],
    "cff9675f0a924539ac2ac9ce83a0a08d": [
        "def solution():\n    hour = 8\n    minute = 30\n    # Angle covered by hour hand (360/12 degrees per hour):\n    hour_angle = (hour % 12) * 30 + (minute / 60) * 30\n    # Angle covered by minute hand (360/60 degrees per minute):\n    minute_angle = minute * 6\n    # Difference between the two angles\n    angle = abs(hour_angle - minute_angle)\n    # Smaller angle between hands\n    if angle > 180:\n        angle = 360 - angle\n    return angle\n\nans = solution()"
    ],
    "c530af2f48304f898bbec512de1ee00a": [
        "def solution():\n    justin_apples = 4\n    sisters_apples = 5 * 4  # Four sisters ate 5 apples each\n    remaining_apples = 20\n\n    total_apples = justin_apples + sisters_apples + remaining_apples\n    return total_apples\n\nans = solution()"
    ],
    "fe37a41678a645a88ee9bdcc3da1b86a": [
        "def solution():\n    piano_only = 30 - 15\n    violin_only = 41 - 15\n    both = 15\n    total_students = piano_only + violin_only + both\n    return total_students\n\nans = solution()"
    ],
    "a97028adbf254284ad53a804e526f05e": [
        "def solution():\n    # Define the pattern lengths for each color\n    black_pattern = 3\n    white_pattern = 2\n    red_pattern = 2\n    \n    # Calculate the length of one full pattern\n    full_pattern_length = black_pattern + white_pattern + red_pattern\n    \n    # Calculate the number of full patterns in 65 beads\n    full_patterns = 65 // full_pattern_length\n    \n    # Count the number of black beads in the full patterns\n    black_beads_full_patterns = full_patterns * black_pattern\n    \n    # Calculate the remaining beads that do not form a full pattern\n    remaining_beads = 65 % full_pattern_length\n    \n    # Add black beads from the incomplete pattern if applicable\n    black_beads_incomplete_pattern = min(remaining_beads, black_pattern)\n    \n    # Total number of black beads\n    total_black_beads = black_beads_full_patterns + black_beads_incomplete_pattern\n    \n    return total_black_beads\n\nans = solution()"
    ],
    "f4489da9f1884801a10bcedceb12a47f": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    total_minutes = 13 + 23 + 8 + 27\n    arrival_time = datetime.strptime('7:45', '%H:%M')\n    wake_up_time = arrival_time - timedelta(minutes=total_minutes)\n    return wake_up_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "efb92f40c4c44473bfcc2623df15f364": [
        "def solution():\n    sum = 0\n    sign = 1\n    for i in range(60, 0, -1):\n        sum += sign * i\n        # Invert the sign if the current number is even\n        if i % 2 == 0:\n            sign *= -1\n    return sum\n\nans = solution()"
    ],
    "153332ac79b349408ebeb32bb8a75f24": [
        "def solution():\n    ans = 489 + 375 + 92\n    return ans\n\nans = solution()"
    ],
    "7730e0dc2bae4994a062e0e494e4b937": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let c represent the number of chickens (and also ducks since it's the same),\n    # and let co represent the number of cows.\n    c, co = symbols('c co')\n\n    # Equation1: Each chicken and each duck has 1 head, each cow has 1 head\n    # Since the number of chickens is equal to the number of ducks, we have:\n    # c (for chickens) + c (for ducks) + co (for cows) = 51 heads\n    equation1 = Eq(2*c + co, 51)\n\n    # Equation2: Each chicken and each duck has 2 legs, each cow has 4 legs\n    # 2*c (for chickens' legs) + 2*c (for ducks' legs) + 4*co (for cows' legs) = 160 legs\n    equation2 = Eq(2*2*c + 4*co, 160)\n\n    # Solving the system of equations for two unknowns\n    solutions = solve((equation1, equation2), (c, co))\n\n    # Since c represents the number of chickens and the number of ducks (same number),\n    # we return the value of c which is the number of chickens\n    return solutions[c]\n\nans = solution()"
    ],
    "8d5b99e07c77482abfe53cb919364656": [
        "def solution():\n    ans = 4.2 + 7.8 + 7.5 - 2.5\n    return ans\n\nans = solution()"
    ],
    "11f6f29725ad4c4dacb24f94de454b8a": [
        "def solution():\n    coins = [1, 2, 5]\n    possible_sums = set()\n    for coin1 in coins:\n        for coin2 in coins:\n            for coin3 in coins:\n                possible_sums.add(coin1 + coin2 + coin3)\n    return len(possible_sums)\n\nans = solution()"
    ],
    "b440fab9ebc4484292e18843c0eaa0f9": [
        "from itertools import permutations\n\ndef solution():\n    entrances = ['A', 'B', 'C', 'D']\n    count = 0\n\n    for p in permutations(entrances, 3):\n        joe_entrance, mike_entrance, _ = p\n        if joe_entrance != mike_entrance:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "43077c3455b94d59a72275e377e21a52": [
        "def solution():\n    total_juice = 750\n    rebekah_drink = total_juice / 5\n    abigail_drink = 200\n    anna_drink = 120\n\n    juice_left = total_juice - (rebekah_drink + abigail_drink + anna_drink)\n    return juice_left\n\nans = solution()"
    ],
    "ef5c87ebb60d47efb47ffb24ab3fdaa4": [
        "def solution():\n    quantity = 90\n    percentage = 75 / 100\n    result = quantity * percentage\n    return result\n\nans = solution()"
    ],
    "71354999b1864945830241cc90cefcff": [
        "def solution():\n    distance = 3000  # in nautical miles\n    days = 13\n    hours = 22\n    total_hours = days * 24 + hours  # Total time in hours\n    average_speed = distance / total_hours  # Average speed in nautical miles per hour\n\n    return round(average_speed)  # Rounded to nearest integer\n\nans = solution()"
    ],
    "1d807b2a160d43e5ab284c4f23b30f90": [
        "def solution():\n    volume1 = 2\n    concentration1 = 40\n\n    volume2 = 3\n    concentration2 = 70\n\n    total_volume = volume1 + volume2\n    total_juice = (volume1 * concentration1) + (volume2 * concentration2)\n\n    new_concentration = (total_juice / total_volume) / 100\n\n    return new_concentration\n\nans = solution()"
    ],
    "0046d00874954b5eb9373fa247e7d3bb": [
        "def solution():\n    return 8.4 - 4.7 + 2.6 - 3.3\n\nans = solution()"
    ],
    "acfd2df07c9d4b9e8c8d0fd768515606": [
        "def solution():\n    ans = 2136 // 8\n    return ans\n\nans = solution()"
    ],
    "0153bfa01ade41859016fa9a0b48eb8d": [
        "def solution():\n    first_multiple = (50 // 11) * 11\n    if first_multiple < 50:\n        first_multiple += 11\n    \n    last_multiple = (150 // 11) * 11\n    if last_multiple > 150:\n        last_multiple -= 11\n    \n    num_multiples = (last_multiple - first_multiple) // 11 + 1\n    \n    return num_multiples\n\nans = solution()"
    ],
    "4d4ad28089e14625a3c978c761454507": [
        "def solution():\n    # Let w be the initial number of women and m be the initial number of men at the bus stop\n    from sympy import symbols, Eq, solve\n\n    w, m = symbols('w m')\n\n    # When 36 women left, the remaining women became 3/5 of men\n    eq1 = Eq(w - 36, 3/5 * m)\n\n    # After 48 men left, the number of men became equal to the number of women remaining\n    eq2 = Eq(m - 48, w - 36)\n\n    # Solve the equations for w and m\n    solutions = solve((eq1, eq2), (w, m))\n\n    # Total people initially = number of women + number of men\n    total_people = solutions[w] + solutions[m]\n\n    return total_people\n\nans = solution()"
    ],
    "600418fdb9fd41ac90e4ae2ed38c4317": [
        "def solution():\n    initial_stamps = 1347\n    gave_away_first = 339\n    bought_stamps = 455\n    gave_away_second = 777\n\n    remaining_stamps = initial_stamps - gave_away_first + bought_stamps - gave_away_second\n\n    return remaining_stamps\n\nans = solution()"
    ],
    "e8307197fd5741a1bab5b7ce9faff12e": [
        "def solution():\n    people_in_front_of_bella = 15\n    people_behind_albert = 12\n    albert_and_bella = 2\n\n    total_people = people_in_front_of_bella + people_behind_albert + albert_and_bella\n\n    return total_people\n\nans = solution()"
    ],
    "a5a5bc9b5a914f54b5a59cc324c4e470": [
        "def solution():\n    numbers = [17, 21, 36, 23, 4, 49, 10]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "ca6721b4076a459bbe0a58a7d219708a": [
        "def solution():\n    from sympy import primerange\n\n    primes = list(primerange(20, 30))\n    return primes[0]  # Return the first prime number in the range\n\nans = solution()"
    ],
    "4828afb807854856954b4952a48e470e": [
        "def solution():\n    ans = 36 * 24\n    return ans\n\nans = solution()"
    ],
    "f826de035ab748bbbf391b6f382601be": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    age = symbols('age')\n    equation = Eq(age + 2, 2 * (age - 5))\n\n    age_solution = solve(equation, age)\n\n    return age_solution[0]\n\nans = solution()"
    ],
    "5d81fd5bcb6d489fbca8914a372910a6": [
        "def solution():\n    count = 0\n    combinations = []\n    for x1 in range(1, 14):\n        for x2 in range(x1 + 1, 14):  # Ensure x2 > x1 to have different numbers\n            x3 = 14 - x1 - x2\n            if x3 > x2:  # Ensure x3 > x2 to have different numbers\n                combinations.append((x1, x2, x3))\n                count += 1\n    return count, combinations\n\nans = solution()"
    ],
    "5990abeaf2ef44129f8a7714654dd1c8": [
        "def solution():\n    numerator = 1*3*8 + 2*6*16 + 3*9*24\n    denominator = 1*2*4 + 2*4*8 + 3*6*12\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "646fcc0d8aca45c2b2efbaed5048a912": [
        "def solution():\n    total_height_range = 132 - 124 + 1  # +1 to include both ends\n    min_same_height_students = 4\n\n    # Apply Pigeonhole Principle: total_height_range pigeonholes and min_same_height_students pigeons.\n    # To guarantee at least one pigeonhole with min_same_height_students pigeons,\n    # we need (min_same_height_students - 1) additional pigeonholes.\n    class_size = total_height_range * (min_same_height_students - 1) + 1\n\n    return class_size\n\nans = solution()"
    ],
    "f84e58b96fc548a9b8a2cc0247ee0d82": [
        "def solution():\n    total_cost = 3 * 0.50\n    change = 5 - total_cost\n    return change\n\nans = solution()"
    ],
    "e9d3605185b84231858a4ef516053885": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(8.5 - 4 * (x - 1.5), 2.5 * x + 3 * (2.5 - x))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "15264635822b439b919be7d215630609": [
        "def solution():\n    total_books = 3154\n    english_books = 1849\n    chinese_books = total_books - english_books\n    difference = english_books - chinese_books\n    return difference\n\nans = solution()"
    ],
    "db91ac44fa344822983552e996da323b": [
        "def solution():\n    # If Fred can leave a multiple of 4 for George, he will always win.\n    # This is because whatever number George picks (1, 2, or 3), Fred can\n    # pick a number that makes the total pick equal to 4. This ensures that\n    # Fred is always leaving a multiple of 4 for George, eventually leaving\n    # him with 4 oranges, which guarantees Fred's victory.\n    n_oranges = 15\n\n    # Fred should take enough oranges to make the remaining number\n    # a multiple of 4. In this case, since 15 is not a multiple of 4,\n    # he should take 15 % 4 = 3 oranges.\n    fred_first_pick = n_oranges % 4\n\n    # If the number of oranges was already a multiple of 4, Fred couldn't assure\n    # his victory regardless of his first move. However, in this case taking\n    # the remainder works. If the number was a multiple of 4, the strategy would need\n    # adjusting but the question assumes a winning strategy exists.\n    return fred_first_pick\n\nans = solution()"
    ],
    "d87d77e43dab4026a154e8ec2beda138": [
        "def solution():\n    go_only = 42 - 18 - 10 + 5\n    checkers_only = 55 - 18 - 9 + 5\n    chess_only = 33 - 10 - 9 + 5\n    go_checkers_chess = 5\n    go_checkers_only = 18 - go_checkers_chess\n    go_chess_only = 10 - go_checkers_chess\n    checkers_chess_only = 9 - go_checkers_chess\n\n    total_students = go_only + checkers_only + chess_only + go_checkers_only + go_chess_only + checkers_chess_only + go_checkers_chess\n    return total_students\n\nans = solution()"
    ],
    "8a63aa9572bb4412ae53e5439a7865ac": [
        "def solution():\n    oliver_current_age = 20\n    lin_current_age = 26\n    target_sum_age = 48\n    \n    # Both Oliver and Lin age one year for each year that passes\n    years_later = (target_sum_age - (oliver_current_age + lin_current_age)) // 2\n\n    return years_later\n\nans = solution()"
    ],
    "c09507e96cc44da8898b1879faefbf61": [
        "def solution():\n    tickets = 16\n    cost_per_ticket = 112\n    total_cost = tickets * cost_per_ticket\n    return total_cost\n\nans = solution()"
    ],
    "0760ea6011714945925169546bfe0c97": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Define the time at which the cake should be ready\n    ready_time = datetime.strptime(\"19:15\", \"%H:%M\")\n    \n    # Define the cooking duration\n    cooking_duration = timedelta(hours=1, minutes=25)\n    \n    # Calculate the start time by subtracting the cooking_duration from ready_time\n    start_time = ready_time - cooking_duration\n    \n    # Format the result to return only the time as a string in the format \"HH:MM\"\n    return start_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "a2090f2b75c044cb932b529d4f6c76ed": [
        "def solution():\n    number_of_poles = 40\n    distance_between_poles = 3  # meters\n\n    distance = (number_of_poles - 1) * distance_between_poles\n\n    return distance\n\nans = solution()"
    ],
    "9be9f04df4aa4fad90e2c592b50495cd": [
        "def solution():\n    cm_value = 736\n    m_value = cm_value / 100\n    return m_value\n\nans = solution()"
    ],
    "77fd9afe874840219f53431a52a3a55f": [
        "def solution():\n    ans = sum([((64 - i * 2) - (62 - i * 2)) for i in range(10)])\n    return ans\n\nans = solution()"
    ],
    "61c8e4b651014f6abc20d2bf4138cdcb": [
        "from sympy import factorint\n\ndef solution():\n    factorization = factorint(245)\n    p = 1\n    for base, exp in factorization.items():\n        needed_exp = (3 - exp % 3) % 3\n        p *= base ** needed_exp\n    return p\n\nans = solution()"
    ],
    "25a47ea57b4647599987b84251fd1281": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 5):\n        E, S, A, M, O = perm\n        if E == 0:  # avoid leading zero in a number\n            continue\n        ESSE = E*1000 + S*110 + E\n        SASMO = S*10000 + A*1000 + S*100 + M*10 + O\n        if ESSE + 2018 == SASMO:\n            return S+A+S+M+O\n\nans = solution()"
    ],
    "22c136c471c246b1b3392b99cb5d2dfb": [
        "def solution():\n    this_year_production = 36000\n    last_year_production = (1/4) * this_year_production + 1\n\n    return int(last_year_production)\n\nans = solution()"
    ],
    "4e4e510238974caa86256923e2e038c2": [
        "def solution():\n    first_term = 22\n    last_term = 98\n    difference = 26 - 22\n\n    num_terms = ((last_term - first_term) / difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "08f15646d5be4ac6a59a45c45853c225": [
        "def solution():\n    total_sum = 0\n    for i in range(2, 2018):\n        term_sum = sum([j / i for j in range(1, i)])\n        total_sum += term_sum\n    return total_sum\n\nans = solution()"
    ],
    "8a10d5adbcea4531970b60dfa42fd819": [
        "def solution():\n    return 0.3 * 270\n\nans = solution()"
    ],
    "47dff524f26242ad9fa5ff839557debe": [
        "def solution():\n    total_students = 48\n    absent_students = 1 + 1  # one on sick leave and one on personal leave\n    present_students = total_students - absent_students\n    attendance_rate = (present_students / total_students) * 100\n\n    return attendance_rate\n\nans = solution()"
    ],
    "b4e4441c3f0440be8e09da643628b41d": [
        "def solution():\n    # Tim's position gives us the size of the array\n    from_front = 4\n    from_back = 3\n    from_left = 1\n    from_right = 4\n    \n    # Calculating the total rows and columns\n    rows = from_front + from_back - 1\n    columns = from_left + from_right - 1\n    \n    # Calculating total number of band members\n    ans = rows * columns\n    return ans\n\nans = solution()"
    ],
    "f784396939674fa89af27d5359f38965": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    # Original ratio equation 3/8 = apples/oranges\n    original_ratio = Eq(3 * oranges, 8 * apples)\n\n    # When one apple is removed, the ratio changes to 1/3 = (apples-1)/oranges\n    new_ratio = Eq(oranges, 3 * (apples - 1))\n\n    # Solve the system of equations\n    solutions = solve((original_ratio, new_ratio), (apples, oranges))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "1f546f2cbdd947219d887b2aa75e71f6": [
        "def solution():\n    ans = 25 * 4 * 27\n    return ans\n\nans = solution()"
    ],
    "bb3a1671c17647d78e01b43d8630223f": [
        "def solution():\n    sum_of_first_14 = sum(range(1, 15))  # Sum of the first 14 consecutive natural numbers\n    new_sum = sum_of_first_14 + 2019     # New sum when 2019 is added\n\n    # Find the eight consecutive natural numbers whose sum equals new_sum\n    for i in range(1, new_sum):\n        # Sum of 8 consecutive numbers starting with i\n        sum_of_consecutives = sum(range(i, i+8))\n        if sum_of_consecutives == new_sum:\n            return i  # Return the smallest number of the 8 consecutive natural numbers\n\nans = solution()"
    ],
    "c49f4ad1d6e74285a471cae0a0494b8c": [
        "def solution():\n    return 8 * (15/5)\n\nans = solution()"
    ],
    "410cabc838ed44f48fb660b0a2c3782d": [
        "def solution():\n    return 9 + 88\n\nans = solution()"
    ],
    "a9ec2d33adf8474197070ba71da55c04": [
        "def solution():\n    ans = (6 + 1/2) / (1/4)\n    return ans\n\nans = solution()"
    ],
    "12396eda43e54937ba9c6bd015a43e54": [
        "def solution():\n    first_term = 2\n    last_term = 100\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "02a4bfa1cce24886a09dd6a0ebf0cfc6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the weight of one rabbit as r, one chicken as c, and one kangaroo as k.\n    r, c, k = symbols('r c k')\n\n    # Given equations according to the problem statement\n    equation1 = Eq(2 * r, 6 * c)  # The weight of 2 rabbits is equal to 6 chickens\n    equation2 = Eq(3 * k, 4 * r)  # The weight of 3 kangaroos is equal to 4 rabbits\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (r, c, k))\n\n    # Relation between one kangaroo and chickens (k = ? * c)\n    kangaroo_in_chickens = solutions[k] / solutions[c]\n\n    return kangaroo_in_chickens\n\nans = solution()"
    ],
    "a666c2ea1fef4b64a986908460e91640": [
        "from math import factorial\n\ndef solution():\n    word = \"STATISTICS\"\n    frequency = {char: word.count(char) for char in set(word)}\n    \n    num_ways = factorial(len(word))\n    for key in frequency:\n        num_ways //= factorial(frequency[key])\n        \n    return num_ways\n\nans = solution()"
    ],
    "43672fb4dbf24b02bb90359769d8f568": [
        "def solution():\n    numbers = [199, 99.9, 100.2, 100.029, 98.999]\n    closest_number = min(numbers, key=lambda x: abs(100 - x))\n    \n    return closest_number\n\nans = solution()"
    ],
    "15b65d4a82f249f0b83939ac418a1d25": [
        "def solution():\n    common_factor = 3428\n    sum_of_multipliers = 836 + 162 + 2\n\n    ans = common_factor * sum_of_multipliers\n\n    return ans\n\nans = solution()"
    ],
    "6fda0ead943b49128df85bf6b5849e36": [
        "def solution():\n    # Calculate the minimum number of days for each activity\n    cut_wood_days = 3\n    weave_rope_days = 1\n    dry_wood_days = 5\n    mow_grass_days = 1\n    prepare_food_days = 1\n    soak_grass_days = 1\n    choose_wood_days = 1\n    \n    # Determine activities that can be done simultaneously\n    # The activities that take the longest time will determine the total minimum days\n    simultaneous_activities = max(cut_wood_days + choose_wood_days + dry_wood_days,\n                                  mow_grass_days + soak_grass_days + weave_rope_days,\n                                  prepare_food_days)\n    \n    return simultaneous_activities\n\nans = solution()"
    ],
    "488c8f884bea4ca59a65a31e0e04aa9d": [
        "def solution():\n    daily_saving = 2.40\n    total_amount_needed = 150\n    days_needed = total_amount_needed / daily_saving\n    weeks_needed = days_needed / 7\n\n    return int(weeks_needed) if weeks_needed.is_integer() else int(weeks_needed) + 1\n\nans = solution()"
    ],
    "a1ec4f1847ce4822947204953d74de5b": [
        "def solution():\n    return 342 + 576\n\nans = solution()"
    ],
    "48ff1e7865214bdc975558caeae2d50b": [
        "def solution():\n    ashley_age = 10\n    difference_age = 2\n    brother_age_3_years_ago = ashley_age - 3 - difference_age\n    brother_current_age = brother_age_3_years_ago + 3\n    return brother_current_age\n\nans = solution()"
    ],
    "7d88ede971b64fd9827de58a37434916": [
        "def solution():\n    Y = (9 * 5 + 15 * 5) // 5\n    return Y\n\nans = solution()"
    ],
    "b2264aba67854c45bb17ca0a45c40d21": [
        "def solution():\n    # Since Snow White is 7th from the front and is exactly in the middle,\n    # There must be 6 people in front of her and 6 people behind her\n    total_dwarves = (7 - 1) * 2\n\n    # Return the total number of dwarves playing with Snow White\n    return total_dwarves\n\nans = solution()"
    ],
    "03c5885919f34314bb4b44bfe248420c": [
        "def solution():\n    participants = 100\n    # Each school must have at least 4 participants to be the school with the most.\n    # Using the Pigeonhole Principle, we divide 100 participants by 4 and round up.\n    min_participants_per_school = 4\n\n    # The maximum number of schools is achieved when each has exactly 4 participants.\n    max_schools = -(-participants // min_participants_per_school)\n\n    return max_schools\n\nans = solution()"
    ],
    "06dde9f26aa64d8c91f787c1c4d71389": [
        "def solution():\n    first_term = 7\n    last_term = 52\n    difference = 3\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    ans = (num_terms * (first_term + last_term)) // 2\n\n    return ans\n\nans = solution()"
    ],
    "33956c5d5c43463196c5619abf1d36ca": [
        "def is_square(n):\n    return int(n**0.5) ** 2 == n\n\ndef is_cube(n):\n    return int(n**(1/3)) ** 3 == n\n\ndef solution():\n    for i in range(1000, 10000):\n        if is_cube(i * 6) and is_square(i // 6):\n            return i\n\nans = solution()"
    ],
    "ace1245119464470b5cdb95b2c3595e4": [
        "from fractions import Fraction\n\ndef solution():\n    result = 3 + Fraction(5, 9) + 6 + Fraction(4, 9)\n    return result\n\nans = solution()"
    ],
    "125fbe1405c64507b8d833c4d1798f63": [
        "def solution():\n    speed_faster = 48\n    speed_slower = 36\n    difference_distance = 70\n\n    # Using the formula: distance = speed * time\n    # Let 't' be the time at which they meet.\n    # For the faster train: distance_faster = speed_faster * t\n    # For the slower train: distance_slower = speed_slower * t\n    # According to the problem: distance_faster = distance_slower + difference_distance\n\n    # We can equate the time 't' for both trains as they started simultaneously and met after 't' hours.\n    # Hence, speed_faster * t = speed_slower * t + difference_distance\n    # Solving for 't' gives us: t = difference_distance / (speed_faster - speed_slower)\n\n    time_meet = difference_distance / (speed_faster - speed_slower)\n\n    # Once we have the time 't', we can find the distance traveled by each train\n    # Then, the total distance between the two stations is the sum of distances covered by both trains.\n    total_distance = (speed_faster * time_meet) + (speed_slower * time_meet)\n\n    return total_distance\n\nans = solution()"
    ],
    "528f30d146454d9fbd940a06520bb850": [
        "from math import lcm\n\ndef solution():\n    return lcm(2, 3, 8)\n\nans = solution()"
    ],
    "28bfcc3c31154a39a652d06135594627": [
        "def solution():\n    total_amount = 1000\n    note_value = 5\n\n    num_notes = total_amount / note_value\n    return int(num_notes)\n\nans = solution()"
    ],
    "8587852257524191ae8a0cf973cb3197": [
        "def solution():\n    # Tim is 4th from front and 3rd from back, so there are 3 people in front of him and 2 behind him\n    total_rows = 3 + 1 + 2\n\n    # Tim is 4th from left and 7th from right, so there are 3 people to his left and 6 to his right\n    total_columns = 3 + 1 + 6\n\n    # Total members is rows times columns\n    total_members = total_rows * total_columns\n\n    return total_members\n\nans = solution()"
    ],
    "e56936fac25c4b8e9ff669e07797ab6c": [
        "def solution():\n    num = 0\n    while True:\n        num += 1\n        if num % 4 == 3 and num % 7 == 1 and num % 9 == 5:\n            return num\n\nans = solution()"
    ],
    "64d0d52e2bf64e88b638cf7cc846261f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lily, gigi = symbols('lily gigi')\n\n    equation1 = Eq(lily - 36, gigi + 36 + 26)\n    equation2 = Eq(lily, 8 * gigi)\n\n    solutions = solve((equation1, equation2), (lily, gigi))\n\n    return solutions[lily]\n\nans = solution()"
    ],
    "65a3698a450943d3ab1dbc4023a956a8": [
        "def solution():\n    ans = sum((2018 + i) / 5 - int((2018 + i) / 5) for i in range(1, 2019))\n    return ans\n\nans = solution()"
    ],
    "9d7ec4d7b1464bba9277da3aadbff391": [
        "def solution():\n    zoey_coins = [50, 20, 10, 5]  # Zoey's coins in cents\n    brother_total = sum(zoey_coins) / 2  # Zoey has twice as much as her brother\n    \n    for coin in zoey_coins:\n        if sum(zoey_coins) - coin == brother_total:\n            return coin\n            \n    return None\n\nans = solution()"
    ],
    "3a5a01fd9a9844408f2c7062b63270b0": [
        "def solution():\n    result = 48 / (1 + 1/3) / (6/7)\n    return result\n\nans = solution()"
    ],
    "e45decf2b87f4c4ba7f9717cc4a6fb05": [
        "def solution():\n    for boats in range(1, 100):\n        if ((boats + 1) * 6 == (boats - 1) * 9):\n            students = (boats + 1) * 6\n            break\n    return students\n\nans = solution()"
    ],
    "39977f0e34da4e1489169692316de3da": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        for j in range(i+1, 101):\n            if (i + j) % 5 == 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "718f81285ce94030bea31c3cbb679ab7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    total_chocolates, friends = symbols('total_chocolates friends')\n\n    # If she gives each friend 18 pieces, she has 41 excess\n    equation1 = Eq(total_chocolates, friends * 18 + 41)\n\n    # If she gives each friend 23 pieces, she is short of 34\n    equation2 = Eq(total_chocolates, friends * 23 - 34)\n\n    # Solve equations for total chocolates and number of friends\n    solutions = solve((equation1, equation2), (total_chocolates, friends))\n\n    # Calculate remaining chocolates if she gives each friend 20 pieces\n    chocolates_remaining = solutions[total_chocolates] - solutions[friends] * 20\n\n    return chocolates_remaining\n\nans = solution()"
    ],
    "d09cf908f3aa4485b244c8b396d7753b": [
        "def solution():\n    for thousands in range(1, 10):\n        for hundreds in range(thousands + 1, 10):\n            for tens in range(hundreds + 1, 10):\n                ones = 16 - (thousands + hundreds + tens)\n                if ones > tens and tens == (hundreds + thousands):\n                    return ones\n                    \nans = solution()"
    ],
    "2fc75a01535c4ae98dffb54b5bcd459f": [
        "def solution():\n    # Count for two digit numbers starting with 2 or 4\n    count_2_or_4 = 2 * 2  # Two choices for the first digit (2 or 4) and two choices (0 or the other digit) for the second digit\n\n    # Count for two digit numbers starting with 0 is not possible\n\n    return count_2_or_4\n\nans = solution()"
    ],
    "0aa90dabe6d64f0285ceda7e7598b164": [
        "def solution():\n    ans = 599999 + 59999 + 5999 + 599 + 59 + 5\n    return ans\n\nans = solution()"
    ],
    "e5c1b794ac8648ec850e93b55dab48de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n    \n    # Rasidah had $48 less than Chai Seng.\n    equation1 = Eq(rasidah, chai_seng - 48)\n    \n    # Rasidah spent 3/5 of her money: rasidah_remaining = rasidah - 3/5 * rasidah\n    # Chai Seng spent 6/7 of his money: chai_seng_remaining = chai_seng - 6/7 * chai_seng\n    # In the end, Chai Seng had 1/2 as much money left as Rasidah: chai_seng_remaining = 1/2 * rasidah_remaining\n    equation2 = Eq(chai_seng - 6/7 * chai_seng, 1/2 * (rasidah - 3/5 * rasidah))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "5d4699cf5231465b949cc5c32e601170": [
        "def solution():\n    ans = 371 + (24 + 19) * 3\n    return ans\n\nans = solution()"
    ],
    "3dd0e028b2e0476fb27782b124909bdf": [
        "def solution():\n    ans = (0.007)**2\n    return ans\n\nans = solution()"
    ],
    "4d8046b8a53d442a9ac1c228e0ce0ab7": [
        "from itertools import permutations\n\ndef solution():\n    digits = [2, 4, 6, 8]\n    max_number = 0\n    for perm in permutations(digits):\n        number = int(''.join(map(str, perm)))\n        if number % 4 == 0 and number > max_number:\n            max_number = number\n    return max_number\n\nans = solution()"
    ],
    "01a32f2cf14e462c9b61d1fcd77574f4": [
        "def solution():\n    # Calculate the distance covered uphill and downhill\n    uphill_distance = 3 * 5  # Time * Speed going uphill\n    downhill_distance = 2 * 10 # Time * Speed going downhill\n\n    # Calculate the total distance\n    total_distance = uphill_distance + downhill_distance\n\n    # Calculate the total time taken\n    total_time = 3 + 2\n\n    # Calculate the average speed\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "f0bee63f873d497b96407169a7e2db47": [
        "def solution():\n    # Fixed cost\n    fixed_service_fee = 3\n\n    # Cost for first 5 kWh\n    first_5_kwh_cost = 2 * 5\n\n    # Remaining cost after fixed cost and first 5 kWh\n    remaining_cost = 63 - fixed_service_fee - first_5_kwh_cost\n\n    # Rate for additional kWh\n    additional_kwh_rate = 1\n\n    # Total kWh Susan can use for the remaining cost at the rate for additional kWh\n    additional_kwh = remaining_cost / additional_kwh_rate\n\n    # Total kWh is the sum of the first 5 kWh and the additional kWh she can use\n    total_kwh = 5 + additional_kwh\n\n    return total_kwh\n\nans = solution()"
    ],
    "58650bb89c1441479147f7d4f580c378": [
        "def solution():\n    ans = 54 * 7 / 63\n    return ans\n\nans = solution()"
    ],
    "11e0382a85804608b378e0d0257999a1": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.1\n    years = 5\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n    return round(final_value, 1)\n\nans = solution()"
    ],
    "cc135b9291974bc8a3f809cc912e685e": [
        "def solution():\n    for i in range(1, 1000):\n        if (i % 3 == 2) and (i % 7 == 6) and (i % 11 == 10):\n            return i\n\nans = solution()"
    ],
    "7134e7994980408d978447b2fb2d3866": [
        "def solution():\n    for x in range(1, 10):  \n        for y in range(10):\n            A = int(str(x) + str(y))\n            B = int(str(4) + str(x) + str(y))\n            if B == 10 + 7 * A:\n                return A\n\nans = solution()"
    ],
    "de23539233a540d8a78444b87207ab4f": [
        "def solution():\n    total_cookies = 9 * 660\n    cookies_per_small_box = 600\n    small_boxes_needed = (total_cookies + cookies_per_small_box - 1) // cookies_per_small_box\n\n    return small_boxes_needed\n\nans = solution()"
    ],
    "a6fe92eccb9540d7bace6c4b67cdf3d2": [
        "def solution():\n    return (-8) - (-19)\n\nans = solution()"
    ],
    "0a85a3267e0d4f238d507e043b936277": [
        "def solution():\n    # Total pupils who passed at least one test\n    total_passed_at_least_one = 43\n    \n    # Pupils passed each test\n    math_passed = 30\n    science_passed = 28\n    english_passed = 25\n    \n    # Maximum possible pupils passed all three tests\n    # Using Inclusion-Exclusion Principle to find minimum passed at least two tests\n    min_passed_at_least_two = (math_passed + science_passed + english_passed) - total_passed_at_least_one\n\n    # Since it's at most condition, we consider all the minimum passed at least two tests as passed all three\n    max_passed_all_three = min_passed_at_least_two\n\n    return max_passed_all_three\n\nans = solution()"
    ],
    "b59168ae6b464ccaa42cf8065c6eb4ae": [
        "def solution():\n    prime_factors_4320 = 2**5 * 3**3 * 5\n    power_of_3_over_2 = 3**1 * 2**-1\n    \n    # since we multiply by (3/2)^n, n must be at most 3, because that's the power of 3 in 4320,\n    # and we can't go higher than that without making it a non-integer\n    # But we must also consider the powers of 2. Since we have an extra 5 powers of 2\n    # in 4320, we can have n values from 0 to 3 + 5 = 8.\n    \n    # n ranges from 0 to 8 inclusive\n    n_values = list(range(9)) # from 0 to 8 inclusive\n    \n    ans = len(n_values)\n    \n    return ans\n\nans = solution()"
    ],
    "18183ed9b54a424c9c391e8cb804cfc6": [
        "def solution():\n    amount_A = 20\n    concentration_A = 35\n    amount_B = 30\n    concentration_B = 60\n\n    total_amount = amount_A + amount_B\n    total_concentration = ((amount_A * concentration_A) + (amount_B * concentration_B)) / total_amount\n\n    return total_concentration\n\nans = solution()"
    ],
    "048da12bce8148d3a40134a2b3b09a86": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for the original amount of grain in warehouse B\n    original_b = symbols('original_b')\n    \n    # Define the equation based on the given conditions\n    equation = Eq((50 + 12), 2 * (original_b - 16))\n    \n    # Solve the equation to find the original amount of grain in warehouse B\n    solutions = solve(equation, original_b)\n    \n    # Return the solution\n    return solutions[0]\n\nans = solution()"
    ],
    "f17963c6412147f8a3c618b9ffa4db12": [
        "def solution():\n    # Prime numbers between 29 and 43\n    primes = [29, 31, 37, 41, 43]\n    # The missing prime number is 37\n    return primes[2]\n\nans = solution()"
    ],
    "f0b18311921842e38deebe821472b76e": [
        "def solution():\n    cookies = 76\n    cookies_per_box = 6\n    boxes_needed = -(-cookies // cookies_per_box)  # Ceiling division\n    return boxes_needed\n\nans = solution()"
    ],
    "719dc7a052524541afb0f37592e3b324": [
        "from math import factorial\n\ndef solution():\n    word = 'COLLEGE'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    total_permutations = factorial(len(word))\n    for count in letter_counts.values():\n        total_permutations //= factorial(count)\n    \n    return total_permutations\n\nans = solution()"
    ],
    "4dbb6a3e89004483bd9aad06124dacee": [
        "def solution():\n    result = 0.50 * 0.20 * 6000\n    return result\n\nans = solution()"
    ],
    "21a6577206bb4af599c66a03599918a9": [
        "def solution():\n    fishes_for_rabbit = 3\n    rabbits_for_wheat = 2 / 3\n\n    fishes_for_wheat = fishes_for_rabbit * rabbits_for_wheat\n    return fishes_for_wheat\n\nans = solution()"
    ],
    "5b64a9ba57014e80a0eadd05b75a22b7": [
        "def solution():\n    total_cost = 120\n    booking_fee = 30\n    cost_per_hour = 10\n    hours_hired = (total_cost - booking_fee) / cost_per_hour\n    return int(hours_hired)\n\nans = solution()"
    ],
    "97138569fa3945528991305d98ea59a6": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 4), (2, 5), (4, 7)]\n    ans, _ = solve_congruence(*congruences)\n\n    # Find the smallest number in the range [400, 500]\n    while ans < 400:\n        ans += 4 * 5 * 7\n\n    return ans\n\nans = solution()"
    ],
    "89ba0ac50c0947d59e7ffc2bb24819cb": [
        "def solution():\n    count = 0\n    for x1 in range(10):  # From 0 to 9, inclusive\n        for x2 in range(10):  # From 0 to 9, inclusive\n            x3 = 9 - x1 - x2\n            if x3 >= 0:  # x3 must also be a non-negative integer\n                count += 1  # Each valid combination counts as one way\n    return count\n\nans = solution()"
    ],
    "2f137b3f948e48c59657d647ceea7f64": [
        "def solution():\n    # Assume the number of benches is b and the number of people is p.\n    # From the problem's information, we get two equations:\n    # 1) p = 3b + 7 (if 3 people per bench, 7 people left standing)\n    # 2) p + 3 = 7(b - 3) (if 7 people per bench, 3 benches left empty)\n    # Now, we need to solve these two linear equations.\n\n    # Rearrange the first equation to express b in terms of p:\n    # b = (p - 7) / 3\n\n    # Substitute b into the second equation:\n    # p + 3 = 7((p - 7) / 3 - 3)\n    # To find the value of p, we solve this equation.\n\n    # Import the sympy package to solve the equation\n    from sympy import symbols, solve\n\n    p = symbols('p')\n    equation = p + 3 - 7*((p - 7) / 3 - 3)\n\n    # Solve for the number of people (p)\n    p_value = solve(equation, p)\n\n    # Since the number of people must be an integer, we take the integer solution\n    return p_value[0]\n\nans = solution()"
    ],
    "0b6a5290a25f41a7a77aba2e0b7f5322": [
        "def solution():\n    dell_stickers = 32\n    ginnie_stickers = dell_stickers // 2\n    lyn_stickers = ginnie_stickers // 4\n\n    total_stickers = ginnie_stickers + lyn_stickers\n    return total_stickers\n\nans = solution()"
    ],
    "283f1a2c7c5141a6b01dc50aa7df541c": [
        "def solution():\n    return abs(11 - 21)\n\nans = solution()"
    ],
    "2d05e2c2cd5947adb306583d6211d765": [
        "def solution():\n    total_amount = 21.50\n    ratio_sum = 2 + 3\n    bigger_share = (total_amount / ratio_sum) * 3\n\n    return bigger_share\n\nans = solution()"
    ],
    "209f59bf096047a6b42adec3650f0b2f": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if i % 2 == 1:\n            sum_of_digits = sum([int(digit) for digit in str(i)])\n            if sum_of_digits == 5:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "3243a4ef0c884def972ed158010ea3b4": [
        "def solution():\n    total_digits = 0\n    page = 0\n    digits_per_page = 1\n    \n    while total_digits < 1101:\n        page += 1\n        if page >= 10**digits_per_page:\n            digits_per_page += 1\n        total_digits += digits_per_page\n    \n    return page\n\nans = solution()"
    ],
    "f5c4e560546f4d75baff7ccc4901ab4f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    empty_bottle, apple_juice = symbols('empty_bottle apple_juice')\n\n    equation1 = Eq((5/6) * apple_juice + empty_bottle, 4.6)\n    equation2 = Eq((2/3) * apple_juice + empty_bottle, 4.45)\n\n    solutions = solve((equation1, equation2), (empty_bottle, apple_juice))\n\n    return solutions[empty_bottle] * 1000  # converting kg to grams\n\nans = solution()"
    ],
    "c0f11f95efb245dcb3a0840d374c7f26": [
        "def solution():\n    # Given variables\n    factor1 = 123\n    factor2 = 321\n\n    # Perform multiplication\n    result = factor1 * factor2\n\n    return result\n\nans = solution()"
    ],
    "e2b7c0b669b44057aa36a3500e3c6605": [
        "def solution():\n    result = sum((-1) ** (i % 2) * (20 - i) for i in range(20))\n    return result\n\nans = solution()"
    ],
    "a97a50db173b4947a7cbbd35408c0568": [
        "def solution():\n    term = 1\n    increment = 2\n    while term < 100:\n        if term + increment >= 100:\n            break\n        term += increment\n        increment += 2\n    return term\n\nans = solution()"
    ],
    "ae03ca6fe3fa45aebbb01c97d1cb54b7": [
        "def solution():\n    adam_ben = 102\n    ben_carl = 97\n    adam_carl = 93\n    \n    # Adam + Ben + Carl + Ben = Adam + Ben + Ben + Carl\n    twice_total = adam_ben + ben_carl\n    \n    # Since Ben is counted twice, we need to subtract one Ben from twice the total\n    total_weight = (adam_carl + twice_total) / 2\n    \n    return int(total_weight)\n\nans = solution()"
    ],
    "e9095a6ced1247bda89ad65c13639eb7": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "403660592ec0470dbd38b7b878ae0a19": [
        "def solution():\n    total_amount = 23\n    book_price = 3.40\n    magazine_price = 1.60\n    \n    # The maximum number of books Clara can buy\n    max_books = total_amount // book_price\n    \n    # Try every possible number of books and check if the remaining amount is divisible by the magazine price\n    for books in range(int(max_books) + 1):\n        remaining_amount = total_amount - (books * book_price)\n        if remaining_amount % magazine_price == 0:\n            magazines = remaining_amount / magazine_price\n            return int(magazines)  # Return the number of magazines as an integer\n\nans = solution()"
    ],
    "3b935033a325415c8ec95174a48b4a4e": [
        "def solution():\n    andy_notebooks = 149\n    andy_gives = 38\n    sister_notebooks = andy_notebooks - andy_gives - (andy_notebooks - 2 * andy_gives)\n    return sister_notebooks\n\nans = solution()"
    ],
    "731fa504bf944a3997349eeb999781ca": [
        "def solution():\n    result = (19 + 3) / 2\n    return result\n\nans = solution()"
    ],
    "ce60eab1409d4f9baf6240c550f9de18": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ashley = symbols('ashley')\n    crystal = 2 * ashley\n    justin = 10 * ashley\n    equation = Eq(justin, crystal + 64)\n    \n    ashley_pages = solve(equation, ashley)[ashley]\n    crystal_pages = 2 * ashley_pages\n    justin_pages = 10 * ashley_pages\n    total_pages = ashley_pages + crystal_pages + justin_pages\n\n    return total_pages\n\nans = solution()"
    ],
    "0fbbc6b96cb740ebbd61af7fbae24d80": [
        "def solution():\n    n = 50\n    sum_of_sequence = n * (n + 1) // 2\n    return sum_of_sequence\n\nans = solution()"
    ],
    "1b7cc025e9e347ce80741fb93834ea0c": [
        "def solution():\n    for age in range(1, 100):  # Assuming the age is below 100 for practicality\n        if int(str(age) + '0', 3) == age:\n            return age\n\nans = solution()"
    ],
    "6cf21aa3ccf54551ba52bdfff6859b56": [
        "def solution():\n    room_a = 235\n    room_b = 567\n    total_pupils = room_a + room_b\n    pupils_after_transfer = total_pupils // 2  # // ensures integer division\n    return pupils_after_transfer\n\nans = solution()"
    ],
    "9b62350128b847c5b5201460ac1d06f0": [
        "def solution():\n    ans = ((5/8) + (1/17)) * 8 + (9/17)\n    return ans\n\nans = solution()"
    ],
    "6e8c76be7aa54ee7b128dba952c8fee0": [
        "def solution():\n    factors = []\n    for i in range(10, 100):  # Looping through all 2-digit numbers\n        if 7007 % i == 0:  # Checking if i is a factor of 7007\n            other_factor = 7007 // i\n            if 10 <= other_factor < 100 and 7007 % other_factor == 0:  # Both factors must be 2-digit numbers\n                factors.append((i, other_factor))\n    \n    # Since two 2-digit multiples of 7 have a product of 7007, \n    # and their factors should also be multiples of 7, we check for this condition.\n    for factor_pair in factors:\n        if factor_pair[0] % 7 == 0 and factor_pair[1] % 7 == 0:\n            return sum(factor_pair)\n\nans = solution()"
    ],
    "250872667abf4b0b871368e870726b7f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of orchids, tulips, and roses\n    orchids, tulips, roses = symbols('orchids tulips roses')\n\n    # Given ratios and percentages sold\n    ratio_orchids_to_tulips = 3/5\n    sold_orchids = 0.4\n    sold_tulips = 1/5\n    sold_roses = 0.25\n    \n    # Create the equations based on the given information\n    # Equation for the ratio\n    equation1 = Eq(orchids, ratio_orchids_to_tulips * tulips)\n    \n    # Equation for the total number of flowers before sales\n    equation2 = Eq(orchids + tulips + roses, 3616)\n    \n    # Equation for the total number of flowers after sales\n    equation3 = Eq((1-sold_orchids) * orchids + (1-sold_tulips) * tulips + (1-sold_roses) * roses, 2644)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (orchids, tulips, roses))\n\n    return solutions[orchids]\n\nans = solution()"
    ],
    "0cc063c19a444034a295d8438baf0c4b": [
        "def solution():\n    from math import factorial\n    \n    # Since the table is circular, we fix one person's position to avoid counting rotations as different arrangements.\n    # Therefore, we only arrange the remaining 6 people.\n    ans = factorial(6)\n    \n    return ans\n\nans = solution()"
    ],
    "d156836fbd9444f5a5ba15bda04a829e": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 55))\n    for prime in primes:\n        if (55 - prime) in primes:\n            return prime * (55 - prime)\n    \nans = solution()"
    ],
    "6d336ec6da534a848cc3b89b64fee021": [
        "def solution():\n    ans = 379 * 0.00038 + 159 * 0.00621 + 3.79 * 0.121\n    return ans\n\nans = solution()"
    ],
    "1a9174d419fc4350b792c473f6c385d3": [
        "def solution():\n    # Given that 1 cookie costs $9\n    cost_per_cookie = 9\n\n    # Given that the cost of 3 pieces of cheesecake is equal to the cost of 5 cookies\n    # Let's denote the cost of 1 piece of cheesecake as 'cheesecake_cost'\n    # So the cost of 3 cheesecakes is equal to $45 (5 cookies * $9)\n    cheesecake_cost = 45 / 3  # cost for 3 pieces of cheesecake\n\n    # Given that the cost of 3 pieces of chocolate cake is equal to the cost of 2 pieces of cheesecake\n    # Let's denote the cost of 1 piece of chocolate cake as 'chocolate_cake_cost'\n    # So the cost of 3 pieces of chocolate cake is equal to 2*cheesecake_cost\n    chocolate_cake_cost = (2 * cheesecake_cost) / 3 # cost for 3 pieces of chocolate cake\n\n    return chocolate_cake_cost\n\nans = solution()"
    ],
    "507deaa25b1c45fcad9434c45d9ba929": [
        "def solution():\n    ways = 0\n    for x1 in range(1, 9):\n        for x2 in range(1, 10 - x1):\n            x3 = 10 - x1 - x2\n            if x1 <= x2 <= x3:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "9b198ae160ae44c2a23ed12656fc56ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the cost of basketball and volleyball\n    basketball, volleyball = symbols('basketball volleyball')\n\n    # Set up the two equations based on the problem statement\n    equation1 = Eq(2 * basketball + 3 * volleyball, 195)\n    equation2 = Eq(4 * basketball + 5 * volleyball, 355)\n\n    # Solve the equations for basketball and volleyball\n    solutions = solve((equation1, equation2), (basketball, volleyball))\n\n    # We are interested in the cost of each volleyball\n    return solutions[volleyball]\n\nans = solution()"
    ],
    "ab73159fcaf54202a082d7e06f5b5b05": [
        "def solution():\n    for A in range(10):\n        for M in range(10):\n            for C in range(10):\n                if len({2, 0, A, M, C, 1, 9}) == 7: # ensure all digits are different\n                    number = 20000000 + A * 1000000 + M * 100000 + C * 10000 + 1900\n                    if number % 9 == 0: # divisible by 9\n                        return A + M + C\n\nans = solution()"
    ],
    "0ee15c78437e4441b6fab59b505f4f07": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    A, B, C = symbols('A B C')\n\n    # Define equations based on problem statement\n    equation1 = Eq(C + B, 18)\n    equation2 = Eq(B, A + A + A)\n    equation3 = Eq(C + A, 10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    # Return the value of B\n    return solutions[B]\n\nans = solution()"
    ],
    "16a3dc8e16654eba8f42e5628ae6b0d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    mike, valeria = symbols('mike valeria')\n    \n    total_candy = 36\n    mike_left = 6\n    valeria_left = 22\n    \n    # System of equations based on the problem\n    equation1 = Eq(mike + valeria, total_candy)\n    equation2 = Eq(mike - mike_left, valeria - valeria_left)\n\n    solutions = solve((equation1, equation2), (mike, valeria))\n\n    return solutions[valeria]\n\nans = solution()"
    ],
    "3a0c96637f8f4963be5154dec26041d4": [
        "def solution():\n    part_per_day = 1/4 / 3\n    total_days = 1 / part_per_day\n    return total_days\n\nans = solution()"
    ],
    "69441d55da344f318ced84a6b17a5d9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    melissa_age_then, melissa_age_now, mother_age_then, mother_age_now = symbols('melissa_age_then melissa_age_now mother_age_then mother_age_now')\n\n    # When Melissa was 8 years old, her mother was 32 years old.\n    equation1 = Eq(melissa_age_then, 8)\n    equation2 = Eq(mother_age_then, 32)\n\n    # The age difference between Melissa and her mother will always be the same.\n    equation3 = Eq(mother_age_then - melissa_age_then, mother_age_now - melissa_age_now)\n\n    # Now, Melissa's mother is three times as old as Melissa.\n    equation4 = Eq(mother_age_now, 3 * melissa_age_now)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3, equation4), (melissa_age_then, melissa_age_now, mother_age_then, mother_age_now))\n\n    return solutions[melissa_age_now]\n\nans = solution()"
    ],
    "813e51f849b44a6fa9381c1e0c4e0ab4": [
        "def solution():\n    ans = 237 * 3\n    return ans\n\nans = solution()"
    ],
    "21362a16887e4938b66f90a3b86538ec": [
        "def solution():\n    n = 42 / (2 * 7)\n    return n\n\nans = solution()"
    ],
    "0451666ed3a54fca8dd2a6d9767c0524": [
        "def solution():\n    # Since the recurring decimal has a repeating cycle: '857142', that's 6 digits.\n    # To find the sum of the first 58 digits follow these steps:\n    # 1. Find out how many complete cycles of '857142' are there in 58 digits.\n    # 2. Multiply the sum of one cycle by the number of complete cycles.\n    # 3. Add the sum of the remaining digits, if any.\n\n    # The sum of digits in one cycle '857142'\n    cycle_sum = sum(map(int, '857142'))\n    \n    # Number of complete cycles in 58 digits\n    complete_cycles = 58 // 6\n\n    # Sum of digits in complete cycles\n    complete_cycles_sum = complete_cycles * cycle_sum\n\n    # Number of digits remaining after complete cycles\n    remaining_digits_count = 58 % 6\n\n    # Sum of the remaining digits, taking them from the cycle '857142'\n    remaining_digits_sum = sum(map(int, '857142'[:remaining_digits_count]))\n\n    # Total sum of the first 58 digits\n    total_sum = complete_cycles_sum + remaining_digits_sum\n\n    return total_sum\n\nans = solution()"
    ],
    "475ca97d0299476480ca43202424b241": [
        "def solution():\n    from decimal import Decimal, getcontext\n\n    # Setting precision high enough for recurring decimals\n    getcontext().prec = 9\n\n    num1 = Decimal('4.73').quantize(Decimal('1.000'))\n    num2 = Decimal('4.73')\n    num3 = Decimal('4.77')\n    num4 = Decimal('4.737')\n\n    decimals = [num1, num2, num3, num4]\n\n    smallest = min(decimals)\n    \n    return smallest\n\nans = solution()"
    ],
    "d60380a226c84add9f82f10ca29d840d": [
        "def solution():\n    remaining_plants = 4\n    # Joel removes 2 less than half of the remaining plants to leave 4\n    joel_removed = 2 + remaining_plants\n    # After Joel removed, total was twice of what was left after removal plus the removed plants\n    remaining_after_valerie = 2 * (remaining_plants + joel_removed)\n    # Valerie removes 3 less than half of the remaining plants\n    valerie_removed = 3 + remaining_after_valerie\n    # After Valerie removed, total was twice of what was left after removal plus the removed plants\n    remaining_after_ethan = 2 * (remaining_after_valerie + valerie_removed)\n    # Ethan removes 1 less than half of the remaining plants\n    ethan_removed = 1 + remaining_after_ethan\n    # Original number of plants\n    original_plants = remaining_after_ethan + ethan_removed\n\n    return original_plants\n\nans = solution()"
    ],
    "9cf67e307d96451eae198324e79cdb76": [
        "def solution():\n    train_length = 128\n    tunnel_length = 544\n    speed = 52\n    \n    # The entire train will be in the tunnel when the front of the train enters the tunnel until the end of the train exits\n    # The distance for this to occur is the length of the train plus the length of the tunnel\n    total_distance = train_length + tunnel_length\n    \n    # Time is distance divided by speed\n    time = total_distance / speed\n    \n    return time\n\nans = solution()"
    ],
    "4043641cbe8e48579335b4edc83806ab": [
        "def solution():\n    numbers = [33, 29, 34, 28, 27, 30]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "67336d9158cc4e12887f9dc78bf7e50d": [
        "def solution():\n    remaining_eggs = 18\n    # He sold 7 eggs fewer than half of the remaining eggs in the basket\n    # This means half of the remaining eggs was remaining_eggs + 7\n    sold_second_half = (remaining_eggs + 7) * 2\n    # Now we add the second sold amount to the remaining to get the amount before the second transaction\n    before_second_sale = sold_second_half + remaining_eggs\n\n    # He sold 16 eggs more than half the number of eggs in his basket at first\n    # This means half of the initial eggs was before_second_sale - 16\n    sold_first_half = (before_second_sale - 16) * 2\n    # Finally, add the first sold amount to the amount before the second sale to get the initial amount\n    initial_eggs = sold_first_half + before_second_sale\n\n    return initial_eggs\n\nans = solution()"
    ],
    "634f64a64d30499f9f880472d43a7055": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    p1, p6 = symbols('p1 p6')\n\n    equation1 = Eq(p1 + p6, 120)  # total students\n    equation2 = Eq(2*p6 + p1/2, 180)  # total buckets\n\n    solutions = solve((equation1, equation2), (p1, p6))\n    \n    return solutions[p1]\n\nans = solution()"
    ],
    "5da1575e00d448078124140f108f6b1b": [
        "def solution():\n    # Given lengths are squares of the actual lengths; find actual lengths\n    PB_square = 60**2 * 10  # (PB)^2\n    PC_square = 60**2 * 5   # (PC)^2\n    PD_square = 120**2 * 2  # (PD)^2\n    PG_square = 36**2 * 7   # (PG)^2\n    \n    # Given that AB, AC, and AD are edges of the cube and AG is a cube diagonal,\n    # we can deduce the following:\n    # AB^2 + AC^2 + AD^2 = AG^2 (Pythagorean theorem in three dimensions)\n    # Since AB = AC = AD (since it's a cube), let s = AB, then 3s^2 = AG^2\n    # Given PG, we can find s^2 = AG^2 - PG^2\n    \n    s_square = PG_square / 3  # (s)^2\n    AG_square = s_square * 3  # (AG)^2\n    \n    # PA is also a diagonal of the cube, so PA^2 = AB^2 + AC^2 + AD^2\n    # PA^2 = 3 * AB^2 = AG^2\n    PA_square = AG_square\n    \n    # Solve for PA\n    PA = PA_square**0.5\n    \n    return PA\n\nans = solution()"
    ],
    "cb8c28b4153d467c8903c0e71a0a22d4": [
        "def solution():\n    outcomes_per_toss = 2  # heads or tails\n    total_tosses = 2\n\n    total_outcomes = outcomes_per_toss ** total_tosses\n\n    return total_outcomes\n\nans = solution()"
    ],
    "1234c16c22404bc6a76790494da1a78e": [
        "def solution():\n    num_teams = 5\n    matches = num_teams * (num_teams - 1) // 2\n    return matches\n\nans = solution()"
    ],
    "53f82e136dfc4d0697c253feec246f5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the price of one basketball and one volleyball\n    basketball, volleyball = symbols('basketball volleyball')\n\n    # Set up the two equations based on the information given\n    equation1 = Eq(2 * basketball + 3 * volleyball, 195)\n    equation2 = Eq(4 * basketball + 5 * volleyball, 355)\n\n    # Solve the equations for both basketball and volleyball\n    solutions = solve((equation1, equation2), (basketball, volleyball))\n\n    # Extract the cost of one volleyball\n    return solutions[volleyball]\n\nans = solution()"
    ],
    "692b53f35cbd484ba885d86fdf51f30f": [
        "def solution():\n    ans = 7 / (1/3)\n    return ans\n\nans = solution()"
    ],
    "726917a5243142e79bae60dd034dcbc5": [
        "def solution():\n    from math import gcd\n\n    pencils = 55\n    pens = 143\n\n    ans = gcd(pencils, pens)\n\n    return ans\n\nans = solution()"
    ],
    "4ba6c7d9ff624ec59381cbce9385be36": [
        "def solution():\n    # Owen traded 3 fish for 1 rabbit\n    fish_to_rabbit = 3 / 1\n\n    # Oscar traded 2 rabbits for 3 packs of wheat\n    rabbit_to_wheat = 2 / 3\n\n    # To find out how many fish for 1 pack of wheat,\n    # we multiply the two ratios (fish_to_rabbit and rabbit_to_wheat (inverted))\n    fish_to_wheat = fish_to_rabbit * (1 / rabbit_to_wheat)\n\n    return fish_to_wheat\n\nans = solution()"
    ],
    "363d10eef0ea4189a47ee75921956b9a": [
        "def solution():\n    # Correct method for solving the division with a remainder is:\n    quotient = 9\n    remainder = 2\n    divisor = 4\n\n    # The correct original number can be calculated as follows:\n    original_number = quotient * divisor + remainder\n\n    # Johnny's error was that he multiplied the remainder by the quotient, which is incorrect.\n    # The correct answer is\n    return original_number\n\nans = solution()"
    ],
    "95169f59fb1e45c8aaf5a970e8290d37": [
        "def solution():\n    dice_sides = 6\n    score_target = 8\n    count = 0\n    ways = []\n\n    for dice1 in range(1, dice_sides + 1):\n        for dice2 in range(1, dice_sides + 1):\n            if dice1 + dice2 == score_target:\n                count += 1\n                ways.append((dice1, dice2))\n\n    return count, ways\n\nans = solution()"
    ],
    "8d86bdb1a0a24c279d87fda22507fcf9": [
        "def solution():\n    increased_price = 21\n    increase_percentage = 0.40\n    original_price = increased_price / (1 + increase_percentage)\n\n    return original_price\n\nans = solution()"
    ],
    "55734b338e6d4ee0aa4775fc46af08dd": [
        "def solution():\n    apples_per_box = 14 / 4\n    total_boxes = 66.5 / apples_per_box\n    return round(total_boxes)\n\nans = solution()"
    ],
    "e6f7522a2ae041debd897088b6275751": [
        "def solution():\n    age_difference = 48 - 8\n    eddie_future_age = 18\n    mike_future_age = eddie_future_age + age_difference\n    return mike_future_age\n\nans = solution()"
    ],
    "7cef41fa4f8244ccbd2620d682e9d2d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys_initial_fraction = 40 / 100\n    boys_final_fraction = 2 / 15\n    boys_diff = girls_diff = 16\n\n    # Let 's' be the total number of students initially in the canteen\n    s = symbols('s')\n    # Equation: boys_initial_fraction * s - boys_diff = boys_final_fraction * (s + girls_diff - boys_diff)\n    equation = Eq(boys_initial_fraction * s - boys_diff, boys_final_fraction * (s + girls_diff - boys_diff))\n\n    # Solve for 's', the total number of students initially\n    total_students_initial = solve(equation, s)[0]\n\n    # Calculate initial number of boys and girls\n    boys_initial = boys_initial_fraction * total_students_initial\n    girls_initial = total_students_initial - boys_initial\n\n    # Calculate the number of girls now\n    girls_now = girls_initial + girls_diff\n\n    return int(girls_now)\n\nans = solution()"
    ],
    "67e5f1006ba14b7ba20f1a63cf93e70c": [
        "from itertools import permutations\nfrom sympy import isprime\n\ndef solution():\n    digits = '279'\n    primes = set()\n\n    # Generate all permutations including repetitions for 1, 2, and 3 digit numbers\n    for length in range(1, 4):\n        for perm in permutations(digits, length):\n            num = int(''.join(perm))\n            if num < 100 and isprime(num):\n                primes.add(num)\n                \n    return len(primes)\n\nans = solution()"
    ],
    "83d292a05ff04677a8c5ed5ab8c0c835": [
        "from fractions import Fraction\n\ndef solution():\n    numerator = (Fraction(10, 3) * 1.9 + 19.5 / Fraction(9, 2))\n    denominator = (Fraction(62, 75) - 0.16) / (3.5 + Fraction(14, 3) + Fraction(32, 15)) * (0.5 * (Fraction(21, 20) + 4.1))\n    result = numerator / denominator\n    return float(result)\n\nans = solution()"
    ],
    "c24f600dece04c93bb09e2b54f50d1af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    necklace, bracelet, ring = symbols('necklace bracelet ring')\n\n    equation1 = Eq(necklace, 2 * bracelet)\n    equation2 = Eq(ring, bracelet - 10)\n    equation3 = Eq(necklace + bracelet + ring, 350)\n\n    solutions = solve((equation1, equation2, equation3), (necklace, bracelet, ring))\n\n    return solutions[bracelet]\n\nans = solution()"
    ],
    "2770667d43574021b710d6ea74fb5929": [
        "def solution():\n    # Iterating through all the four-digit numbers\n    for N in range(1000, 10000):\n        # Converting the number to a string\n        str_N = str(N)\n        # Checking each digit by removing it\n        for i in range(4):\n            # Creating the new three-digit number M\n            M = int(str_N[:i] + str_N[i+1:])\n            # If the difference is 2021 then we found the number\n            if N - M == 2021:\n                return N\n\nans = solution()"
    ],
    "e6b0f44cc53249e1aaf86a515c4628c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    banana, pear = symbols('banana pear')\n\n    equation1 = Eq(banana + 2 * pear, 94)\n    equation2 = Eq(banana + pear, 62)\n\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "e55659b67fec48ffadc5d661886b3f84": [
        "def solution():\n    total_students = 200\n    swimming = 0.82 * total_students\n    jogging = 0.54 * total_students\n    neither = 0.16 * total_students\n\n    # By the principle of inclusion-exclusion:\n    both = (swimming + jogging) - (total_students - neither)\n\n    return int(both)\n\nans = solution()"
    ],
    "df34fda134ee46a8ac94860f5ae12f9f": [
        "def solution():\n    # Work done by A in one day\n    work_a_per_day = 1 / 15\n    # Work done by B in one day\n    work_b_per_day = 1 / 10\n    \n    # Work done together in 4 days\n    work_done_in_4_days = 4 * (work_a_per_day + work_b_per_day)\n    \n    # Remaining work after 4 days\n    remaining_work = 1 - work_done_in_4_days\n    \n    # Days B takes to finish the remaining job\n    days_b_to_finish = remaining_work / work_b_per_day\n    \n    return days_b_to_finish\n\nans = solution()"
    ],
    "2fdb4d6852a34749900c0604b0418b95": [
        "def solution():\n    ans = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.65) - (1 + 0.23 + 0.34 + 0.65) * (0.23 + 0.34)\n    return ans\n\nans = solution()"
    ],
    "4265848eb5144e06beaccae813bc11b5": [
        "def solution():\n    ticket_price = 112\n    num_tickets = 16\n    total_cost = ticket_price * num_tickets\n    return total_cost\n\nans = solution()"
    ],
    "1b84c5b40beb49b39b7f4106f6ee146a": [
        "def solution():\n    distance = 150\n    spacing = 10\n    number_of_trees = (distance // spacing) + 1\n    return number_of_trees\n\nans = solution()"
    ],
    "a36a520966aa451d95a300b07e198fe4": [
        "def solution():\n    linda_rate = 1 / 5  # Linda's rate in problems per minute\n    cici_rate = 1 / 6   # Cici's rate in problems per minute\n\n    combined_rate = linda_rate + cici_rate  # Combined rate in problems per minute\n\n    total_time = 2 * 60  # Total time in minutes\n\n    total_problems = combined_rate * total_time  # Total problems they can do together\n\n    return int(total_problems)\n\nans = solution()"
    ],
    "073d74f386764ceba3da553d97018f98": [
        "def solution():\n    amy = 37\n    john = 15\n    # Let x be the number of apples Amy has to give to John.\n    # After giving x apples, Amy would have amy - x apples and John would have john + x apples.\n    # We want amy - x to be 4 more than john + x.\n    # so, amy - x = john + x + 4\n    # Solving for x gives us:\n\n    x = (amy - john - 4) // 2\n    return x\n\nans = solution()"
    ],
    "3997afa5717b4b90979f5a94f367106a": [
        "from math import gcd\n\ndef solution():\n    num1 = 16\n    num2 = 28\n    return gcd(num1, num2)\n\nans = solution()"
    ],
    "c1d55208f4314facb8dcb7a0c1f51107": [
        "def solution():\n    alice_stickers = 245\n    janet_more_stickers = 125\n\n    janet_stickers = alice_stickers + janet_more_stickers\n    total_stickers = alice_stickers + janet_stickers\n\n    return total_stickers\n\nans = solution()"
    ],
    "a17b0ae95a20483eb0160f780a8e055e": [
        "def solution():\n    ans = 15\n    return ans\n\nans = solution()"
    ],
    "6325f3cd4acc410e9a72d43acf9b5e4a": [
        "def solution():\n    late_by_minutes = 18\n    bus_frequency_minutes = 45\n    \n    wait_time = bus_frequency_minutes - (late_by_minutes % bus_frequency_minutes)\n    \n    return wait_time\n\nans = solution()"
    ],
    "4de96797dadc44f48c4b27b71845270c": [
        "def solution():\n    ans = 273 // 7\n    return ans\n\nans = solution()"
    ],
    "75af17ec850b4308b6ad72a935dd048e": [
        "def solution():\n    known_numbers = [12, 25, 27, 6, 16, 14, 13, 7, 21]\n    total_sum = 37 * 10\n    sum_of_known = sum(known_numbers)\n    missing_number = total_sum - sum_of_known\n    return missing_number\n\nans = solution()"
    ],
    "8a7b6a6417544e3db14b40a2435e0338": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y, z = symbols('x y z')\n    equation1 = Eq(x, y + 83)\n    equation2 = Eq(z, x + 24)\n    equation3 = Eq(x + y + z, 283)\n    \n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n    \n    return solutions[y]\n\nans = solution()"
    ],
    "0961229b4dfe45bdaf586d80da5a6a93": [
        "def solution():\n    # Let the total amount of grass be G.\n    # From the question, we know that G can feed 14 goats for 15 days, so daily consumption per goat is G / (14 * 15).\n    # Similarly, G can feed 70 rabbits for 8 days, so daily consumption per rabbit is G / (70 * 8).\n    # Given that one goat eats the same amount of grass as 4 rabbits do in a day, we can equate the consumptions:\n    # G / (14 * 15) = 4 * (G / (70 * 8))\n    # Simplify to find the total amount of grass G (it will cancel out).\n\n    # We want to find out the number of days D that the pasture can feed 17 goats and 20 rabbits.\n    # The daily consumption of 17 goats is 17 * (G / (14 * 15)).\n    # The daily consumption of 20 rabbits is 20 * (G / (70 * 8)).\n    # The total daily consumption of 17 goats and 20 rabbits is their sum.\n    # The number of days D can then be obtained by dividing the total grass G by this total daily consumption.\n\n    # Total consumption by goats in one day (G_day_g)\n    G_day_g = G / (14 * 15)\n    # Since one goat eats as much as 4 rabbits, total consumption by rabbits in one day\n    G_day_r = 4 * G / (70 * 8)\n\n    # Now we need to find the consumption of 17 goats and 20 rabbits in one day\n    daily_consumption_17_goats = 17 * G_day_g\n    daily_consumption_20_rabbits = 20 * (G_day_r / 4) # since we have a 4x factor in G_day_r\n\n    # Total daily consumption\n    total_daily_consumption = daily_consumption_17_goats + daily_consumption_20_rabbits\n\n    # Number of days the pasture can feed 17 goats and 20 rabbits\n    D = G / total_daily_consumption\n\n    # Simplify to find D\n    # D = G / (17 * G / (14 * 15) + 20 * G / (70 * 8))\n\n    # Multiply both numerator and denominator by (14 * 15 * 70 * 8) to simplify the equation\n    # After simplification (G and factors of G cancel out), we get:\n    D = (14 * 15 * 70 * 8) / (17 * 70 * 8 + 20 * 14 * 15)\n\n    return D\n\nans = solution()"
    ],
    "3c6d41e0ffa34ee694abb711aabe5956": [
        "def solution():\n    cost_per_person = 216\n    number_of_people = 67\n    total_cost = cost_per_person * number_of_people\n    return total_cost\n\nans = solution()"
    ],
    "d7b4feae676a418c84a780e950e5d4ea": [
        "def solution():\n    total_cost_nine_books = 38.79\n    cost_per_book = total_cost_nine_books / 9\n    total_cost_seven_books = cost_per_book * 7\n    return total_cost_seven_books\n\nans = solution()"
    ],
    "24686bdbc8614ff88d9dba695c5c1775": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n    total = tens + tenths + hundredths\n    return total\n\nans = solution()"
    ],
    "5b5d9ce674b5461e84d5e7eef6e47575": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chan, toh = symbols('chan toh')\n\n    equation1 = Eq(1/4 * chan, 1/3 * toh + 33)\n    equation2 = Eq(chan + toh, 1000)\n\n    solutions = solve((equation1, equation2), (chan, toh))\n\n    return solutions[toh]\n\nans = solution()"
    ],
    "274626bb25f24193b540a837c430a2c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for number of erasers each person has\n    sandra, tasha, riley = symbols('sandra tasha riley')\n\n    # Equations based on the problem\n    equation1 = Eq(sandra, tasha / 3)\n    equation2 = Eq(riley, (3 / 5) * sandra)\n    equation3 = Eq(tasha, riley + 60)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (sandra, tasha, riley))\n\n    return solutions[riley]\n\nans = solution()"
    ],
    "d36c559112ec475d90ba54b5fb925432": [
        "def solution():\n    height_reached = 0\n    day_count = 0\n    slide_distance = 1\n    while height_reached < 45:\n        day_count += 1\n        height_reached += 10\n        if height_reached >= 45:\n            break\n        height_reached -= slide_distance\n        slide_distance += 1\n\n    return day_count\n\nans = solution()"
    ],
    "605b7166959c4309ba377c841f125c8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x + 3*(19 - x), 65)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0bed7f7889ec46ae8c8a1d9b3ffad093": [
        "def solution():\n    result = 4\n    for i in range(1, 4):\n        result += int(str(4) * (i + 1))\n    return result\n\nans = solution()"
    ],
    "6e66da49abf64b81a126cd036c206db2": [
        "def solution():\n    january_savings = 13\n    february_savings = 18\n    march_savings = 5\n    \n    total_savings = january_savings + february_savings + march_savings\n    num_months = 3\n    \n    mean_savings = total_savings / num_months\n    \n    return mean_savings\n\nans = solution()"
    ],
    "af0e6eebf4764c91a8984e3324ae0c84": [
        "def solution():\n    x = (9**2) - 7\n    return x\n\nans = solution()"
    ],
    "857ab67cbb1247aea950633a74d6701b": [
        "def solution():\n    # The total number of ways to divide a number n into k piles is given by the number of partitions of n - 1 into k - 1 parts.\n    # For our problem with n=6, we need to consider cases where k=2,3,...,n (since we want at least two piles)\n    # Luckily, Python provides a library that can generate and count partitions, called 'sympy'\n    \n    from sympy import IntegerPartition\n    \n    # For 6, we need to subtract 1 from n and k because we are looking for the sum of positive numbers, not non-negative\n    n = 6\n    count = 0\n    # loop through each possible number of piles\n    for k in range(2, n+1):\n        count += len(list(IntegerPartition(n-1).partition[k-1]))\n    return count\n\nans = solution()"
    ],
    "3df1ffb0a3aa4d07b3bd3acc1b128b78": [
        "def solution():\n    from fractions import Fraction\n    # convert recurring decimals to fractions\n    part1 = Fraction(1, 9)  # 0.0(1)\n    part2 = Fraction(12, 90)  # 0.1(2)\n    part3 = Fraction(23, 90)  # 0.2(3)\n    part4 = Fraction(34, 90)  # 0.3(4)\n    part5 = Fraction(45, 90)  # 0.4(5)\n    part6 = Fraction(54, 90)  # 0.5(4)\n    part7 = Fraction(78, 90)  # 0.7(8)\n\n    # sum the parts\n    sum_of_parts = part1 + part2 + part3 + part4 + part5 + part6 + part7\n\n    # get the decimal value\n    ans = float(sum_of_parts)\n\n    return ans\n\nans = solution()"
    ],
    "708686c18792498ca280531b38305bd6": [
        "def solution():\n    from sympy import symbols, sqrt, simplify\n    \n    a = symbols('a', positive=True)\n    x = sqrt(a) - 2 / sqrt(a)\n    \n    expression = sqrt(x**2 + 8 * x)\n    simplified_expression = simplify(expression)\n    \n    return simplified_expression\n\nans = solution()"
    ],
    "aa65bb86d41443cba1628a0551144ba9": [
        "def solution():\n    # Define a mapping function for the characters to numbers\n    def char_to_number_mapping(char):\n        return {\n            'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4,\n            'F': 5, 'G': 6, 'H': 7, 'I': 8, 'J': 9,\n            'K': 10, 'L': 11, 'M': 12, 'N': 13, 'O': 14,\n            'P': 15, 'Q': 16, 'R': 17, 'S': 18, 'T': 19,\n            'U': 20, 'V': 21, 'W': 22, 'X': 23, 'Y': 24,\n            'Z': 25\n        }[char]\n\n    # Convert 'Angel' to its numerical representation\n    angel = \"ANGEL\"\n    angel_num = ''.join([str(char_to_number_mapping(c)) for c in angel])\n    \n    # Convert 'Devil' to its numerical representation\n    devil = \"DEVIL\"\n    devil_num = ''.join([str(char_to_number_mapping(c)) for c in devil])\n    \n    # Andy's attempt to unlock the chest\n    andy_attempt = \"4005220912\"\n    \n    # Check if Andy's attempt matches the 'Devil' password\n    if devil_num == andy_attempt:\n        # Andy can unlock the chest\n        return (True, \"Andy can unlock the treasure chest\")\n    else:\n        # Andy cannot unlock the chest and provide the correct password\n        return (False, devil_num)\n\nans = solution()"
    ],
    "40eb290a88af4052901031e1476213be": [
        "def solution():\n    # Initialize the count of ways\n    count = 0\n\n    # Iterate through the sequence of numbers\n    for i in range(2017, 2036):\n        for j in range(i + 1, 2036):\n            for k in range(j + 1, 2036):\n                # Check if the sum is divisible by 4\n                if (i + j + k) % 4 == 0:\n                    count += 1\n\n    return count\n\nans = solution()"
    ],
    "0f13e96f9aaa4d28997b667b9c11593b": [
        "def solution():\n    total_sheep = 23\n    total_pens = 11\n\n    # Using the Pigeonhole Principle, calculate the minimum number of sheep in the sheep pen with the most sheep\n    min_sheep_most_pen = (total_sheep + total_pens - 1) // total_pens\n\n    return min_sheep_most_pen\n\nans = solution()"
    ],
    "a30b46882b6149eb828e015d814c6a7b": [
        "def solution():\n    for i in range(300, 401):\n        if i % 3 == 2 and i % 4 == 2 and i % 5 == 2 and i % 7 == 5:\n            return i\n\nans = solution()"
    ],
    "b1ec96325b0e48bbb89d9c37f1f20bfa": [
        "def solution():\n    total_boys = 18\n    mean_age_boys = 16.2\n    total_girls = 27\n    mean_age_girls = 16.7\n\n    total_age_boys = total_boys * mean_age_boys\n    total_age_girls = total_girls * mean_age_girls\n    total_age = total_age_boys + total_age_girls\n    \n    total_children = total_boys + total_girls\n    mean_age = total_age / total_children\n    \n    return mean_age\n\nans = solution()"
    ],
    "1158d90d7f994c008185739c0f7b4c3e": [
        "def solution():\n    angel_code = \"0141705021\"\n    devil_code_attempt = \"4005220912\"\n\n    # Sort the digits of both the given angel code and Andy's attempt for the devil code\n    sorted_angel_code = sorted(angel_code)\n    sorted_devil_code_attempt = sorted(devil_code_attempt)\n    \n    # Compare sorted codes to see if they are made of the same digits\n    if sorted_angel_code == sorted_devil_code_attempt:\n        ans = 'Yes'  # Andy can unlock the treasure chest\n    else:\n        devil_code = \"\".join(sorted_angel_code)  # Create the correct password if needed\n        ans = devil_code  # The correct password for 'Devil'\n    \n    return ans\n\nans = solution()"
    ],
    "a8a21f84ab5f44019c3f7690709b84e5": [
        "def solution():\n    for num in range(200, 301):\n        if num % 6 == 1 and num % 13 == 8:\n            return num\n\nans = solution()"
    ],
    "ca038012d8394203b0afe2e0b7b9c6ab": [
        "from math import lcm\n\ndef solution():\n    # Find the least common multiple (LCM) of the days\n    days_to_meet_again = lcm(6, 12, 16)\n    return days_to_meet_again\n\nans = solution()"
    ],
    "e4135525c98945d49a3e9731dcae7f35": [
        "def solution():\n    # Since there are only 3 different colors and she wants to be sure to get 5 balls of the same color,\n    # in the worst case, she would take all balls of two colors without getting 5 of the same color.\n    \n    # If she takes all green and yellow balls, that's 7 + 5, she still wouldn't be sure to have 5 of either color.\n    # So we should add one more to guarantee she gets 5 of the same color, which could be red in the worst case.\n\n    green_balls = 7\n    yellow_balls = 5\n    red_balls = 2\n    \n    # To guarantee 5 balls of the same color, she must take all balls except 4 of a single color\n    # because even if she took 4 red and all yellow, the next ball would be green, giving her 5 green.\n    \n    balls_to_take = green_balls + yellow_balls + red_balls - 4\n\n    return balls_to_take\n\nans = solution()"
    ],
    "727dbcf473414fbc9939bfee97cb4aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n\n    # Total mass of 3 tables is equal to total mass of 4 chairs\n    equation1 = Eq(3 * table, 4 * chair)\n    \n    # A table is 2kg heavier than a chair\n    equation2 = Eq(table, chair + 2)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "9da771602ee246a181dd1962904ef124": [
        "def solution():\n    nth_term = 10\n    last_shown_term = 31\n    common_difference = 3  # 28 - 25, observed from the sequence given\n\n    first_term = last_shown_term - (nth_term - 1) * common_difference\n    return first_term\n\nans = solution()"
    ],
    "b70b59bf48324644a782454f2b7ea13d": [
        "def solution():\n    pool_length = 30  # length of the swimming pool in meters\n    sam_speed = 1  # Sam's speed in meters per second\n    ben_speed = 0.6  # Ben's speed in meters per second\n\n    swimming_time_in_seconds = 10 * 60  # total swimming time in seconds\n\n    # Combined speed when swimming towards each other\n    combined_speed = sam_speed + ben_speed\n\n    # Time taken to meet each other for the first time in seconds\n    time_to_meet = pool_length / combined_speed\n\n    # Number of times they meet\n    meets = swimming_time_in_seconds // time_to_meet\n\n    return int(meets)\n\nans = solution()"
    ],
    "31eaf65804d54a3b8c6e51af4e58623c": [
        "def solution():\n    # Define the operation as per Peter's rule\n    def new_operation(a, b):\n        return (a // 10) * (a % 10) + (b // 10) * (b % 10)\n    \n    # Calculate the result using the new operation\n    ans = new_operation(89, 75)\n    return ans\n\nans = solution()"
    ],
    "3f49f548bea24803a2293b65735a1967": [
        "def solution():\n    return 5928 * 13\n\nans = solution()"
    ],
    "94e0c1d7e2e64c55bf498ab0da425bf2": [
        "def solution():\n    temperatures = [-11, 17, 8, -3, -6]\n    difference = max(temperatures) - min(temperatures)\n    return difference\n\nans = solution()"
    ],
    "4296e2f3a8b241e3a8477feb371d9f40": [
        "def solution():\n    bob_and_cindy_average = 120\n    total_height_for_bob_and_cindy = bob_and_cindy_average * 2\n    doris_height = 126\n    average_height_for_three = (total_height_for_bob_and_cindy + doris_height) / 3\n    return average_height_for_three\n\nans = solution()"
    ],
    "0d85bf8110034401aca552b3cdbd023f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    destin, nephew = symbols('destin nephew')\n    equation1 = Eq(destin + 6, 2 * (nephew + 6))\n    equation2 = Eq((destin - 6) / (nephew - 6), 5)\n\n    solutions = solve((equation1, equation2), (destin, nephew))\n\n    sum_in_10_years = solutions[destin] + 10 + solutions[nephew] + 10\n\n    return sum_in_10_years\n\nans = solution()"
    ],
    "4052d15f214249809613fa6de2242cc9": [
        "def solution():\n    total_average = 35\n    boys_average = 20\n    girls_average = 60\n    total_students = 40\n\n    # Let the number of boys be x\n    # Then the number of girls will be total_students - x\n    # Set up the equations based on the average formula:\n    # (boys_average * boys + girls_average * girls) / total_students = total_average\n\n    # boys_average * boys + girls_average * (total_students - boys) = total_average * total_students\n    # 20x + 60(total_students - x) = 35 * total_students\n    # Solve for x (number of boys)\n\n    boys = (girls_average * total_students - total_average * total_students) / (girls_average - boys_average)\n\n    return int(boys)\n\nans = solution()"
    ],
    "24bf5eb8b2e54ae8a85ca04786fa6736": [
        "def solution():\n    ans = 9.97 + 9.98 + 9.99\n    return ans\n\nans = solution()"
    ],
    "3a046196146143df8c11a228fe1ea8e9": [
        "def solution():\n    from itertools import permutations\n    \n    digits = [1, 3, 5]\n    perm = permutations(digits)\n    count = len(list(perm))\n    return count\n\nans = solution()"
    ],
    "e86bfb04d39a44d2a53da86f38d8841d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the original number of pies each had be x\n    x = symbols('x')\n    \n    # Mrs Tan bought 12 more pies, so she has x + 12 pies now\n    # Mrs Lim gave away 4 pies, so she has x - 4 pies now\n    \n    # According to the problem, Mrs Tan has twice as many pies as Mrs Lim now:\n    # x + 12 = 2 * (x - 4)\n    equation = Eq(x + 12, 2 * (x - 4))\n    \n    # Solve the equation for x\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "aa5a70d5b23d4d83a688ce6c80ff9fbb": [
        "def solution():\n    from datetime import datetime\n\n    time_format = '%I:%M%p'\n    departure_time = datetime.strptime('6:35AM', time_format)\n    arrival_time = datetime.strptime('10:22AM', time_format)\n\n    travel_duration = arrival_time - departure_time\n\n    total_minutes = travel_duration.total_seconds() / 60\n\n    return int(total_minutes)\n\nans = solution()"
    ],
    "c8c3777bba9244539cc9e012e79c700e": [
        "def solution():\n    pattern = '3456'\n    pattern_length = len(pattern)\n    total_length = 50\n\n    # Calculate how many complete patterns fit into 50 digits\n    complete_patterns = total_length // pattern_length\n\n    # Calculate the sum of one pattern\n    sum_of_pattern = sum(int(digit) for digit in pattern)\n    \n    # Calculate the sum of the complete patterns\n    sum_complete_patterns = sum_of_pattern * complete_patterns\n    \n    # Calculate the leftover digits if the last pattern is incomplete\n    remaining_digits_count = total_length % pattern_length\n    remaining_digits = pattern[:remaining_digits_count]\n    sum_remaining_digits = sum(int(digit) for digit in remaining_digits)\n    \n    # Total sum is the sum of complete patterns and the sum of remaining digits\n    total_sum = sum_complete_patterns + sum_remaining_digits\n    \n    return total_sum\n\nans = solution()"
    ],
    "46a38674ac06447aab8309abe41f63ee": [
        "def solution():\n    result = 3 / (3 / 5) / (5 / 7) / (7 / 9) / (9 / 13) / (13 / 15)\n    return result\n\nans = solution()"
    ],
    "66bbfb9d35fd4c258976e0e26f366bba": [
        "def solution():\n    total_sweets = 220\n    fraction_first_group = 3/5\n    sweets_first_group = 6\n    fraction_second_group = 1/4\n\n    sweets_second_group = 4\n    sweets_third_group = 5\n\n    # Calculate sweets given to the first group of students\n    sweets_for_first_group = fraction_first_group * total_sweets\n\n    # Calculate number of students in the first group\n    students_first_group = sweets_for_first_group / sweets_first_group\n\n    # Calculate sweets remaining after the first group\n    remaining_sweets = total_sweets - sweets_for_first_group\n\n    # Calculate sweets given to the second group of students\n    sweets_for_second_group = fraction_second_group * remaining_sweets\n\n    # Calculate number of students in the second group\n    students_second_group = sweets_for_second_group / sweets_second_group\n\n    # Calculate sweets remaining after the second group\n    remaining_sweets_after_second = remaining_sweets - sweets_for_second_group\n\n    # Calculate number of students in the third group\n    students_third_group = remaining_sweets_after_second / sweets_third_group\n\n    # Calculate the total number of students in the classroom\n    total_students = students_first_group + students_second_group + students_third_group\n\n    return int(total_students)\n\nans = solution()"
    ],
    "2d58f4f006e243febdaf5acbd7d6781f": [
        "from sympy import primefactors\n\ndef solution():\n    card_numbers = [6, 12, 35, 175, 245, 300]\n    not_picked = None\n\n    for number in card_numbers:\n        remaining_cards = card_numbers.copy()\n        remaining_cards.remove(number)\n        products = {}\n        for i in range(len(remaining_cards)):\n            for j in range(i+1, len(remaining_cards)):\n                prod = remaining_cards[i] * remaining_cards[j]\n                if prod in products:\n                    not_picked = number\n                products[prod] = (remaining_cards[i], remaining_cards[j])\n                \n    return not_picked\n\nans = solution()"
    ],
    "531ec5e5d7a54e7eb5aad13441f2d557": [
        "def solution():\n    ans = 3.88 - 1.111\n    return ans\n\nans = solution()"
    ],
    "b789c34055e44469a46db4918988572a": [
        "def solution():\n    katherine = 24\n    tom = 2 * katherine\n    gareth = 4 * tom\n    return gareth\n\nans = solution()"
    ],
    "02013d24983948fe8e37ccb917ba805e": [
        "def solution():\n    # Let father's current age be x years\n    x = symbols('x')\n\n    # When Tom reaches his father's current age, his father will be 70 years old.\n    # Let's say it takes y years for this to happen.\n    # So, Tom's age at that time will be x (which will be the same as his father's current age)\n    # Therefore, Tom will be 10 + y years old when he reaches his father's current age.\n    # His father's age at that time will be 70, so his father's age now will be 70 - y\n    # We can set up the equation as follows:\n    # x (father's current age) = Tom's current age (10) + y (the number of years it takes for Tom to reach his father's age)\n    # 70 (father's age when Tom is x years old) = x + y\n    # From the above two equations we get two expressions for y:\n    # y = x - 10 (from Tom's perspective)\n    # y = 70 - x (from father's perspective)\n    # Solving these two equations will give us x, the father's current age.\n\n    # Setting up the equations\n    y = symbols('y')\n    tom_age = 10\n    tom_future_age = x\n    father_future_age = 70\n\n    # Equation from Tom's perspective\n    equation1 = Eq(tom_future_age, tom_age + y)\n    # Equation from father's perspective\n    equation2 = Eq(father_future_age, x + y)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Father's current age\n    return solutions[x]\n\nans = solution()"
    ],
    "7a453395152a41388d5f4386067df058": [
        "def solution():\n    ans = (3/10) * 54 + 0.3 * 45 + 30 / 100\n    return ans\n\nans = solution()"
    ],
    "0d471b7547134c0f9e37864e9573cf56": [
        "def solution():\n    def is_composite(n):\n        if n < 4:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return True\n        return False\n\n    for odd in range(999, 2, -2):\n        found = False\n        for i in range(2, odd):\n            if is_composite(i):\n                for j in range(2, odd - i):\n                    if is_composite(j):\n                        k = odd - i - j\n                        if is_composite(k) and i != j and j != k and i != k:\n                            found = True\n                            break\n            if found:\n                break\n        if not found:\n            ans = odd\n            break\n\n    return ans\n\nans = solution()"
    ],
    "b7d81cc61e59452e8e10e55be3614c12": [
        "from math import lcm\n\ndef solution():\n    packet_a = 25\n    packet_b = 20\n    cycle_days = lcm(packet_a, packet_b)  # LCM of packet sizes gives the cycle length in days\n\n    # Calculate the date she starts both again\n    days_in_month = 31  # March has 31 days\n    next_start_day = cycle_days % days_in_month\n\n    if next_start_day == 0:  # if evenly divides, it would be on the last day of a month\n        next_start_day = days_in_month\n    \n    # Since March has 31 days and the cycle is less, April will be expected month\n    month = \"April\"\n    \n    return (month, next_start_day)\n\nans = solution()"
    ],
    "b3fa535df8954c9aac674b856db4f258": [
        "def solution():\n    return (17 + 35) / 2\n\nans = solution()"
    ],
    "6349c95e066c4ac9a6e978154b7e5cc5": [
        "def solution():\n    bigger_by = (3 + 1/4) - (1 + 3/4)\n    return float(bigger_by)\n\nans = solution()"
    ],
    "6f2e36dcb2704f26b44a0dbfa435da24": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    total_money = 580\n    boy_money = 8\n    girl_money = 5\n    boy_to_girl_ratio = 3\n\n    equation1 = Eq(boys, boy_to_girl_ratio * girls)\n    equation2 = Eq(boy_money * boys + girl_money * girls, total_money)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "3d8d87b5a55b42d89c08579dd89354fb": [
        "def solution():\n    first_term = 3\n    common_difference = 4\n    last_term = 99  # Last term below 100, leaving a remainder of 3 when divided by 4\n    \n    # Calculate the number of terms in the arithmetic sequence\n    num_terms = ((last_term - first_term) // common_difference) + 1\n\n    # Sum of an arithmetic sequence formula: n/2 * (first_term + last_term)\n    sum_of_terms = num_terms / 2 * (first_term + last_term)\n\n    return int(sum_of_terms)\n\nans = solution()"
    ],
    "f3c61e8fd40d43f0a6b6887470b4299d": [
        "def solution():\n    count = 0\n    # The perimeter of the triangle is 12\n    perimeter = 12\n    # loop through all possibilities of side lengths\n    for a in range(1, perimeter//2 + 1):  # one side of the isosceles triangle\n        for b in range(1, perimeter//2 + 1):  # the other two sides are equal\n            if 2 * b + a == perimeter and a <= 2 * b:  # to form a valid triangle\n                count += 1\n    return count\n\nans = solution()"
    ],
    "8345ff1d37344640b2384652635b2dd7": [
        "def solution():\n    bill = 45\n    tip_percent = 0.15\n    sales_tax_percent = 0.08\n\n    tip = bill * tip_percent\n    sales_tax = bill * sales_tax_percent\n    \n    total_cost = bill + tip + sales_tax\n\n    return total_cost\n\nans = solution()"
    ],
    "13f3cf43be684a8c8f1075a13f8131ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    # Define symbols for current ages of elder and younger brothers\n    elder, younger = symbols('elder younger')\n\n    # Create equations based on problem statement\n    equation1 = Eq(elder + younger, 42)  # Sum of current ages\n    # A few years ago, elder was the age of current younger, and younger was half the elder's current age\n    equation2 = Eq(younger, elder / 2)\n\n    # Solve the system of equations for elder and younger\n    solutions = solve((equation1, equation2), (elder, younger))\n\n    # Return the current age of the elder brother\n    return solutions[elder]\n\nans = solution()"
    ],
    "566472f9b1624140a8d419487a79d50c": [
        "def solution():\n    total_students = 42\n    sports_team = 30\n    art_team = 25\n    # Using the Inclusion-Exclusion Principle\n    both_teams = sports_team + art_team - total_students\n\n    return both_teams\n\nans = solution()"
    ],
    "79ebfd585db2407482e7cf14b77e035d": [
        "def solution():\n    return 104 // 4\n\nans = solution()"
    ],
    "014509f53414409198e8302211988bc5": [
        "def solution():\n    strawberries_initial = 86\n    strawberries_given_away = 29\n    strawberries_final = 100\n\n    strawberries_received = strawberries_final - (strawberries_initial - strawberries_given_away)\n\n    return strawberries_received\n\nans = solution()"
    ],
    "63f544191af94265b786a75669858d3b": [
        "def solution():\n    from math import gcd\n\n    A_students = 8\n    B_students = 12\n    C_students = 20\n\n    gcf_ab = gcd(A_students, B_students)\n    gcf_abc = gcd(gcf_ab, C_students)\n\n    return gcf_abc\n\nans = solution()"
    ],
    "71d8dd44935a4d74ab3f2f038bd63e9b": [
        "def solution():\n    total_students = 30\n    passed_first_exam = 25\n    failed_second_exam = 12\n    pass_second_fail_first = 3\n\n    pass_only_first_exam = passed_first_exam - (total_students - failed_second_exam - pass_second_fail_first)\n\n    return pass_only_first_exam\n\nans = solution()"
    ],
    "f7dc723fc9c0444bb72711cfa044db6f": [
        "def solution():\n    # Routes from A to D directly\n    direct_AD = 6\n    \n    # Routes from A to B to D\n    AB_to_D = 7 * 2\n    \n    # Routes from B to C to D\n    BCD = 5 * 2\n    \n    # Routes from A to B then B to C then C to D\n    ABCD = 7 * BCD\n    \n    # Routes from A to C to D\n    ACD = 4 * 2\n\n    # Total routes from A to D\n    total_routes = direct_AD + AB_to_D + ABCD + ACD\n\n    return total_routes\n\nans = solution()"
    ],
    "934c22a63d3149ffb43b1d24593d0c01": [
        "def solution():\n    # Let x be the number of chocolate cupcakes and y be the number of cheese cupcakes.\n    # We have two equations based on the problem:\n    # Equation 1: Total number of cupcakes baked is 255\n    # Equation 2: After selling 40% of chocolate cupcakes and 75% of cheese cupcakes, the remainder is equal\n    # x + y = 255\n    # 0.6x = 0.25y\n    \n    # We want to find the number of cupcakes left, which is 0.6x or 0.25y\n    \n    # Import sympy to solve linear equations\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for x and y\n    x, y = symbols('x y')\n    \n    # Define the equations\n    equation1 = Eq(x + y, 255)\n    equation2 = Eq(0.6 * x, 0.25 * y)\n    \n    # Solve the equation system\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Calculate the number of cupcakes left (either 0.6 * chocolate or 0.25 * cheese can be used since they are equal)\n    cupcakes_left = 0.6 * solutions[x]\n    \n    return int(cupcakes_left)\n\nans = solution()"
    ],
    "1972b3d726cb4c91b08b5636358089e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the pen's price\n    pen_price = symbols('pen_price')\n\n    # Since each pencil costs £2 and 3 pencils were bought, total cost for pencils is £6\n    pencil_cost = 2 * 3 \n\n    # Pip bought 2 pens for a total of (£20 - pencil_cost)\n    equation = Eq(2 * pen_price, 20 - pencil_cost)\n\n    # Solve the equation for the pen's price\n    pen_cost_solution = solve(equation, pen_price)\n\n    return pen_cost_solution[0]\n\nans = solution()"
    ],
    "ac54c8b609c94030b92316d569da1836": [
        "def solution():\n    total_hay = 300\n    cattle = 5\n    days = 10\n    \n    # Total amount of hay eaten by one cattle in 10 days\n    hay_per_cattle = total_hay / cattle\n    \n    # Amount of hay eaten by one cattle in 1 day\n    hay_per_day_per_cattle = hay_per_cattle / days\n    \n    return hay_per_day_per_cattle\n\nans = solution()"
    ],
    "60783bc25b9749de9150f2006634255c": [
        "def solution():\n    for youngest in range(1, 10):\n        for middle in range(youngest + 1, 10):\n            for oldest in range(middle + 1, 10):\n                if youngest * middle * oldest == 210:\n                    return youngest\n\nans = solution()"
    ],
    "9d5fcd691dcd4877acf240f16e7063cb": [
        "def solution():\n    # Let b be the number of boys and g be the number of girls\n    # The total number of students is 39: b + g = 39\n    # According to the condition 1/4 of the boys equals 2/5 of the girls: b/4 = 2g/5\n    # From the above equation, we can derive b = 8g/5\n    # Substituting the derived value of b into the total equation we get:\n    # 8g/5 + g = 39\n    # This simplifies to: 13g/5 = 39\n    # Solving for g gives us: g = 39 * 5 / 13 = 15\n    # Now we can calculate b using the equation: b = 39 - g\n\n    g = (39 * 5) / 13\n    b = 39 - g\n    ans = int(b - g)\n\n    return ans\n\n\nans = solution()"
    ],
    "ef208d09ffee4f59ad9b66d3ea949934": [
        "def solution():\n    total_weight = 960\n    weight_per_box = 8\n    num_boxes = total_weight // weight_per_box\n    return num_boxes\n\nans = solution()"
    ],
    "3ac0f16eac8647b8b591701993aa5623": [
        "def solution():\n    total_seedlings = 296\n    fraction_killed = 3 / 8\n\n    killed_seedlings = total_seedlings * fraction_killed\n    surviving_seedlings = total_seedlings - killed_seedlings\n\n    return int(surviving_seedlings)\n\nans = solution()"
    ],
    "fb1f2e79dcf341bf81ac3f2db4f131ec": [
        "def solution():\n    daily_intake = 12\n    total_locusts = 100\n\n    days = total_locusts // daily_intake\n    remaining_locusts = total_locusts % daily_intake\n    \n    ans = remaining_locusts if remaining_locusts else daily_intake\n    return ans\n\nans = solution()"
    ],
    "34b006c5adeb493dbdbe598de9425edd": [
        "def solution():\n    ans = 77.5 * (52 / 100) + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "70c9f09a81b741faab4149e0ce3c2e08": [
        "def solution():\n    first_term = 2\n    last_term = 240\n    difference = 2\n\n    num_terms = ((last_term - first_term) / difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "f8f2a1e9445b4dcda537fd994f74f84b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    notes_five, notes_ten = symbols('notes_five notes_ten')\n\n    # Total number of notes\n    total_notes_eq = Eq(notes_five + notes_ten, 116)\n\n    # After spending notes\n    notes_five_left = notes_five - 0.25 * notes_five\n    notes_ten_left = notes_ten - 0.60 * notes_ten\n\n    # Left ratio of notes ten to five\n    ratio_eq = Eq(notes_ten_left, (4 / 7) * notes_five_left)\n\n    # Solve the equations\n    solutions = solve((total_notes_eq, ratio_eq), (notes_five, notes_ten))\n\n    # Calculate total and percentage spent\n    money_spent_five = solutions[notes_five] * 0.25 * 5\n    money_spent_ten = solutions[notes_ten] * 0.60 * 10\n\n    # Total cost of the bag\n    total_spent = money_spent_five + money_spent_ten\n\n    return total_spent\n\nans = solution()"
    ],
    "79b3d22b017c4dc5bc3455a8f8bca3ed": [
        "def solution():\n    ans = (12 * 92) + (22 * 82) + (32 * 72)\n    return ans\n\nans = solution()"
    ],
    "f11cc314015c4356be0ae68d5c3ced7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    don_stickers, ben_stickers = symbols('don_stickers ben_stickers')\n    \n    # Original ratio equation\n    equation1 = Eq(don_stickers * 3, ben_stickers * 2)\n    \n    # New ratio equation after changes\n    equation2 = Eq((don_stickers + 10) * 7, (ben_stickers - 5) * 6)\n    \n    solutions = solve((equation1, equation2), (don_stickers, ben_stickers))\n\n    return solutions[don_stickers]\n\nans = solution()"
    ],
    "e750a026daa342fc915455072a011aba": [
        "def solution():\n    return 60 * 20\n\nans = solution()"
    ],
    "8f82a9fa21664af9b7af5284e8c4493f": [
        "def solution():\n    ans = round(726 * 8, 1)\n    return ans\n\nans = solution()"
    ],
    "cb610f1994f441c5aa75e99c47dc7c49": [
        "def solution():\n    remainder = 4293 % 25\n    if remainder == 0:\n        return 0\n    else:\n        return 25 - remainder\n\nans = solution()"
    ],
    "aca847f6240f4ca38811b767301a74f8": [
        "def solution():\n    amy_toys = 50\n    sally_toys = 26\n    amy_give = (amy_toys - sally_toys) // 2\n    \n    return amy_give\n\nans = solution()"
    ],
    "4240bfa02e564792b745d971a51cf6aa": [
        "def solution():\n    baby_chickens = 3600\n    hens = (8/9) * baby_chickens\n    roosters = (1/16) * hens\n    return int(roosters)\n\nans = solution()"
    ],
    "45c579ce75cb41d3bab3bcda32699a25": [
        "def solution():\n    cecilia_money = 80\n    kenny_money = cecilia_money / 4\n    total_money = cecilia_money + kenny_money\n    return total_money\n\nans = solution()"
    ],
    "7716f1cb1ca14992ae86bd9c52735efd": [
        "def solution():\n    # To maximize the product abc given a + b + c = 31,\n    # we should use the AM-GM inequality which states that\n    # for non-negative a, b, and c, the arithmetic mean (AM)\n    # is always greater than or equal to the geometric mean (GM).\n    # AM = (a + b + c) / 3\n    # GM = (abc)^(1/3)\n    # Since a, b, and c are positive integers, and we have a fixed sum,\n    # the product abc is maximized when a, b, and c are as close to each other as possible.\n    \n    # We start by setting two of the variables to be equal, because\n    # if all three were equal, they would not be integers.\n    # So let's assume that a and b are equal and as close to c as possible.\n    a = b = (31 - c) // 2\n    while not (a + b + c == 31 and a > 0 and b > 0 and c > 0):\n        c -= 1\n        a = b = (31 - c) // 2\n\n    return a * b * c\n\nans = solution()"
    ],
    "305f09b3cd4e439eb8bd23de400c08f3": [
        "def solution():\n    # Given the sum of squares\n    sum_of_squares = 2870\n    # Since 39 * 41 is the product of consecutive odd numbers which can be expressed as (2k-1)(2k+1)\n    # which results in 4k^2 - 1, the sum of the series can be expressed in terms of squares - number of terms\n    # As there are 20 terms in the given sum of squares, the sum of the required series can be obtained\n    # by finding 4 times the sum of squares minus 20 (since 1 will be subtracted for each term in the sum)\n    required_sum = 4 * sum_of_squares - 20\n    return required_sum\n\nans = solution()"
    ],
    "e6664d91f4d5422a9967575f83a6dcba": [
        "def solution():\n    road_length = 150\n    tree_spacing = 10\n\n    # Since trees are planted at both ends, we subtract the length of one tree spacing\n    num_trees = (road_length - tree_spacing) // tree_spacing + 1 + 1  # +1 for each end\n\n    return num_trees\n\nans = solution()"
    ],
    "90f3a7cdbae348efb794b15c5519e1e1": [
        "def solution():\n    cups_per_gallon = 6\n    order_cups = 30\n    \n    gallons_needed = order_cups / cups_per_gallon\n    \n    return gallons_needed\n\nans = solution()"
    ],
    "f4a02eb509224062b7d4a7b00e982d44": [
        "def solution():\n    total = 0\n    for i in range(1, 2017):\n        if i % 2 == 0:\n            total += i\n        else:\n            total -= i\n    return total\n\nans = solution()"
    ],
    "7d02cb0ab8354e44968e796de4cb54d3": [
        "def solution():\n    for d1 in range(10):\n        for d2 in range(10):\n            num = int(f\"21{d1}{d2}35\")\n            if num % 99 == 0:\n                return num\n\nans = solution()"
    ],
    "f2b7d72bc0e0413388bba2a9429b9e63": [
        "def solution():\n    # Starting from day 1, if the first day is a Friday\n    max_fridays = 55 // 7 + (1 if 55 % 7 >= 1 else 0)\n    \n    return max_fridays\n\nans = solution()"
    ],
    "b781fc8f3a7c4ac5b3c263cd0ed580ef": [
        "def solution():\n    return 3 / (1 - 1/2)\n\nans = solution()"
    ],
    "5d1664b6531d452198dbf2ebb51359c0": [
        "def solution():\n    total_girls = 25\n    percentage_wearing_glasses = 20\n\n    num_girls_wearing_glasses = (percentage_wearing_glasses / 100) * total_girls\n\n    return int(num_girls_wearing_glasses)\n\nans = solution()"
    ],
    "c49e92d63d14477a969fe081cfe53304": [
        "def solution():\n    from math import factorial\n\n    # Treat the triplet sisters as a single unit. Now we have 5 \"units\" to arrange,\n    # which includes the triplet unit, the two twin brothers, and the other two students.\n    total_units = 5\n\n    # Calculate the number of arrangements for these units\n    unit_arrangements = factorial(total_units)\n\n    # Now, calculate possible positions of the triplet sisters as a single unit\n    triplet_positions = factorial(3)\n\n    # For the twin brothers, we need to find arrangements where they are not next to each other.\n    # We can do this by finding all possible arrangements and then subtracting the ones where they are together.\n    total_twin_arrangements = factorial(2)\n    # When twins are together, treat them as a single unit.\n    # Now we have 4 \"units\" in total to arrange\n    together_units = 4\n    twin_together_arrangements = factorial(together_units)\n\n    # Calculate the number of wrong arrangements where twins are next to each other\n    # (by treating them as a single unit and adding the arrangements of the unit itself)\n    wrong_twin_arrangements = twin_together_arrangements * total_twin_arrangements\n\n    # Subtract the wrong arrangements from all possible arrangements of twin brothers\n    twin_arrangements = total_twin_arrangements * total_units - wrong_twin_arrangements\n\n    # Multiply all the independent possible arrangements to get the final answer\n    ans = unit_arrangements * triplet_positions * twin_arrangements\n\n    return ans\n\nans = solution()"
    ],
    "7c8f1a20bc9749f7b59b0f1ad124a82f": [
        "def solution():\n    number_of_students = 320\n    days_in_week = 7\n\n    # Using the pigeonhole principle, we divide the number of students by days in the week\n    # The ceiling of the result is the least number of students born in the week with the most students.\n    least_number_of_students = -(-number_of_students // days_in_week)\n\n    return least_number_of_students\n\nans = solution()"
    ],
    "20a734ca64ba4070bb73709f8775c1bb": [
        "def solution():\n    # Cost of one pencil\n    cost_pencil = 2\n    # Cost of one pen\n    cost_pen = 4\n\n    # Since Owen wants to trade a pen, he needs to give Oscar pencils equivalent to the cost of one pen\n    pencils_for_one_pen = cost_pen // cost_pencil\n\n    return pencils_for_one_pen\n\nans = solution()"
    ],
    "de5bc649b5e64036b73efabb4e608b1b": [
        "def solution():\n    heather_savings = 12.15\n    zach_savings = 3 * heather_savings\n    serena_savings = zach_savings + 24.50\n    jason_savings = serena_savings / 5\n    william_savings = jason_savings - 1.54\n    \n    return william_savings\n\nans = solution()"
    ],
    "89c07102e40b408485bed168ad9751a2": [
        "def solution():\n    ans = 53 * 47\n    return ans\n\nans = solution()"
    ],
    "92911ac8b9144f938149832f7b7402c6": [
        "def solution():\n    ans = 8386 // 14\n    return ans\n\nans = solution()"
    ],
    "9b6fc41b0a9a49fea3924bc898749d7d": [
        "def solution():\n    total_pupils = 560\n    pupils_away = total_pupils / 5\n    pupils_going_to_cathedral = total_pupils - pupils_away\n    return int(pupils_going_to_cathedral)\n\nans = solution()"
    ],
    "6b4e0702e3de4173981781093a35339e": [
        "def solution():\n    minutes_per_song = 3\n    total_songs = 2\n    total_children = 50\n\n    total_time = minutes_per_song * total_songs\n\n    return total_time\n\nans = solution()"
    ],
    "ac385e53c24d4641950c3bc12d00cf65": [
        "def solution():\n    total_weight_with_apples = 580\n    remaining_weight_with_two_apples = 280\n    weight_of_three_apples = total_weight_with_apples - remaining_weight_with_two_apples\n    weight_of_one_apple = weight_of_three_apples / 3\n    weight_of_five_apples = 5 * weight_of_one_apple\n    weight_of_basket = total_weight_with_apples - weight_of_five_apples\n    \n    return weight_of_basket\n\nans = solution()"
    ],
    "33059b4275c842cfbe5060e8e558c094": [
        "def solution():\n    fraction = 25 / 100\n    decimal = 0.3\n\n    if fraction > decimal:\n        ans = \"25%\"\n    else:\n        ans = \"0.3\"\n\n    return ans\n\nans = solution()"
    ],
    "955c179e463143d28ade540096508f5f": [
        "def solution():\n    # Least common multiple (LCM) for 2, 3, 4, 5, 6, 8, 9 because N is divisible by all these\n    from math import lcm\n    L = lcm(2, 3, 4, 5, 6, 8, 9)\n    N = L\n    # N gives a remainder of 5 when divided by 7, so N should be of the form 7k + 5\n    while N % 7 != 5:\n        N += L\n    return N\n\nans = solution()"
    ],
    "9d2dc78991904963a971fcd7d4ca960c": [
        "def solution():\n    ans = 1\n    return ans\n\nans = solution()"
    ],
    "2b391dae225f4f358dfa8a02cfaea5f6": [
        "def solution():\n    loafs_per_cup = 7 / 4\n    desired_loafs = 35\n    cups_needed = desired_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "08ead4044f5c4e0cb7f564479dcbb641": [
        "def solution():\n    cost_per_mug = 3.50 / 5\n    cost_per_pen = 6.80 / 8\n    total_cost = 7 * cost_per_mug + 5 * cost_per_pen\n    change = 10 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "e80e460c0afe49d7918f9c4c9e99d36a": [
        "from sympy import lcm\n\ndef solution():\n    multiple_3_and_7 = lcm(3, 7)\n    for i in range(1, 10):\n        num = multiple_3_and_7 * i\n        if str(num)[-1] == '2':\n            return num\n\nans = solution()"
    ],
    "e33f554d8b1644c19022b4fa4594db6b": [
        "def solution():\n    days_in_week = 7\n    num_weeks = 2\n    return days_in_week * num_weeks\n\nans = solution()"
    ],
    "c847b39a398345608e4e416f46045845": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies, cakes = symbols('cookies cakes')\n\n    equation1 = Eq(cookies, 3 * cakes)\n    equation2 = Eq(cookies - 39 + cakes - 17, 48)\n\n    solutions = solve((equation1, equation2), (cookies, cakes))\n\n    cookies_left = solutions[cookies] - 39\n\n    return cookies_left\n\nans = solution()"
    ],
    "926c0d38b66140b8900e8ac92ba84f48": [
        "def solution():\n    value_of_first_3 = 3 * 10**5  # The first 3 is in the hundred thousand's place\n    value_of_second_3 = 3 * 10**1  # The second 3 is in the ten's place\n    difference = value_of_first_3 - value_of_second_3\n\n    return difference\n\nans = solution()"
    ],
    "246eea2b254546f6a06a17c8c5da0778": [
        "def solution():\n    return (2 ** 17) % 10\n\nans = solution()"
    ],
    "824b5f4234db4e34ba3320198b6e527a": [
        "def solution():\n    donuts_per_box = 6\n    boxes_bought = 6\n    donuts_eaten = 3\n\n    total_donuts = donuts_per_box * boxes_bought\n    donuts_left = total_donuts - donuts_eaten\n    \n    return donuts_left\n\nans = solution()"
    ],
    "15d29f8eed604f4faf1e5161667d0a8e": [
        "def solution():\n    total_pages = sum(i for i in range(1, 21))\n    return total_pages\n\nans = solution()"
    ],
    "0521571bcf6e46beb68e012434205a1a": [
        "def solution():\n    def is_solvable(n, a, b):\n        for i in range(n // a + 1):\n            for j in range(n // b + 1):\n                if a * i + b * j == n:\n                    return True\n        return False\n\n    a, b = 4, 5\n    n = 1\n    while is_solvable(n, a, b):\n        n += 1\n    ans = n - 1\n    return ans\n\nans = solution()"
    ],
    "13ecc517842a4e27b0943158564ba2f9": [
        "def solution():\n    # Let's denote the work rates of John, Jonah, and Angus as j, n, and a respectively.\n    # That is to say, John can finish 1/j of the work in 1 hour,\n    # Jonah can finish 1/n of the work in 1 hour,\n    # and Angus can finish 1/a of the work in 1 hour.\n    \n    # According to the question,\n    # John, Jonah, and Angus together take 27 hours to build the wall,\n    # so their combined work rate is 1/27 of the wall per hour.\n    \n    # Jonah and Angus together take 36 hours to build the wall,\n    # so their combined work rate is 1/36 of the wall per hour.\n    \n    # We can set up two equations based on the information:\n    # Equation 1: (1/j) + (1/n) + (1/a) = 1/27 (John, Jonah and Angus together)\n    # Equation 2: (1/n) + (1/a) = 1/36 (Jonah and Angus together)\n    \n    # By subtracting Equation 2 from Equation 1, we get\n    # (1/j) = (1/27) - (1/36)\n    # Now we can find the value for 1/j (John's work rate) and then find how many hours John takes to build the wall\n    \n    john_rate = (1/27) - (1/36)\n    # The time John would take to build the wall on his own is the reciprocal of his work rate (1/john_rate)\n    john_time = 1 / john_rate\n    return john_time\n\nans = solution()"
    ],
    "be94a430bb8b4fcaa11c93b71957d202": [
        "def solution():\n    sum_of_numbers = 1001\n    greatest_common_divisor = 1\n\n    for d in range(1, sum_of_numbers + 1):\n        if sum_of_numbers % d == 0:\n            greatest_common_divisor = d\n            \n    return greatest_common_divisor\n\nans = solution()"
    ],
    "4b619e6f83fb4fcb8bd134e22add52a2": [
        "def solution():\n    principal = 35000\n    rate = 1.5 / 100\n    final_amount = 37100\n\n    years_passed = 0\n    amount = principal\n\n    while amount < final_amount:\n        amount += amount * rate\n        years_passed += 1\n\n    return years_passed\n\nans = solution()"
    ],
    "576faec091114697b4cc7ea7ab748d0c": [
        "def solution():\n    # Combined age of Claire and Daniel five years ago\n    combined_age_5_years_ago = 14\n    # The combined age currently is 14 years plus 5 years each\n    current_combined_age = combined_age_5_years_ago + 5 * 2\n    # The combined age in 3 years will be the current combined age plus 3 years each\n    combined_age_in_3_years = current_combined_age + 3 * 2\n\n    return combined_age_in_3_years\n\nans = solution()"
    ],
    "1eee00688a104ff986a31b1fee446322": [
        "def solution():\n    count = 0\n    for a in range(10):\n        for b in range(10):\n            num = 108200 + a * 10 + b\n            if num % 12 == 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "099cc2e5ff734ad197d27fee09bc11fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, pear = symbols('apple pear')\n\n    equation1 = Eq(3 * apple + 4 * pear, 1.81)\n    equation2 = Eq(5 * apple + 2 * pear, 1.71)\n\n    solutions = solve((equation1, equation2), (apple, pear))\n    \n    weight = 4 * solutions[apple] + 4 * solutions[pear]\n\n    return weight\n\nans = solution()"
    ],
    "043842622d23468b98edf5cef7ed85bf": [
        "def solution():\n    from math import gcd\n    length_ribbon1 = 45\n    length_ribbon2 = 30\n    longest_piece_length = gcd(length_ribbon1, length_ribbon2)\n    return longest_piece_length\n\nans = solution()"
    ],
    "a33b75b9ed48463ca3eeddc40ed2b3d3": [
        "def solution():\n    for boys in range(152):\n        girls = 152 - boys\n        if boys - boys / 11 == girls - 5:\n            return boys\n\nans = solution()"
    ],
    "93147f6eb5f740a294872bacc776ddb6": [
        "def solution():\n    return 475 + 138\n\nans = solution()"
    ],
    "7f1aa4e059a14f339db6b2ca01c5fcab": [
        "def solution():\n    number = 1\n    while True:\n        if number % 5 == 1 and number % 12 == 3:\n            ans = number\n            break\n        number += 1\n    return ans\n\nans = solution()"
    ],
    "be1d59d57baf4467ac4f9b6959b15354": [
        "def solution():\n    return 42 + 21 + 16 + 44 + 37\n\nans = solution()"
    ],
    "5703bb8ce16a4381b41f8d825e3b1d53": [
        "def solution():\n    total_pencils = 128\n    pencils_per_box = 16\n\n    num_boxes = total_pencils // pencils_per_box\n\n    return num_boxes\n\nans = solution()"
    ],
    "675d0644ed364630886e6ad4d9107e49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amanda, bernie, cathy = symbols('amanda bernie cathy')\n\n    equation1 = Eq(cathy, 3 * amanda)\n    equation2 = Eq(amanda, 2 * bernie)\n    equation3 = Eq(amanda + bernie + cathy, 378)\n\n    solutions = solve((equation1, equation2, equation3), (amanda, bernie, cathy))\n\n    return solutions[amanda] + solutions[cathy]\n\nans = solution()"
    ],
    "2775c0cd96fc41549c1710e81e205e35": [
        "def solution():\n    ans = 386 + 99\n    return ans\n\nans = solution()"
    ],
    "ab9fcefd7c4e479ea261d1c0846c27b6": [
        "def solution():\n    daily_laying_rate = 50\n    maturation_period = 30\n    total_days = 40\n    adult_fleas = 0\n\n    for day in range(1, total_days + 1):\n        if day > maturation_period:\n            adult_fleas += daily_laying_rate\n\n    return adult_fleas\n\nans = solution()"
    ],
    "1661939d67544a83807ef71d048c5ebf": [
        "def solution():\n    ans = 3 * 7 + 24\n    return ans\n\nans = solution()"
    ],
    "0842c79b27de450fa5cfe122f9bcadc6": [
        "def solution():\n    French = 15\n    Japanese = 12\n    Italian = 13\n    French_Japanese = 5\n    French_Italian = 3\n    Japanese_Italian = 2\n    all_three = 1\n\n    total = French + Japanese + Italian - French_Japanese - French_Italian - Japanese_Italian + all_three\n    \n    return total\n\nans = solution()"
    ],
    "f9fc8eb9b14d4cc9a262fcb37c90fda7": [
        "def solution():\n    total_orange_drink = 12\n    fraction_water = 3/4\n    litres_of_water = total_orange_drink * fraction_water\n    return litres_of_water\n\nans = solution()"
    ],
    "2055cce1efcf44bea37be19436b9bcf2": [
        "def solution():\n    first_term = 3\n    common_difference = 3\n    num_rows = 22\n\n    # Sum of n terms in arithmetic progression formula: n/2 * (2a + (n - 1)d)\n    ans = num_rows / 2 * (2 * first_term + (num_rows - 1) * common_difference)\n\n    return int(ans)\n\nans = solution()"
    ],
    "4e21bd2101d34265aef926bc9e12fa2a": [
        "def solution():\n    story_books = 75\n    magazines = 12 + 3 * story_books\n    total = story_books + magazines\n    return total\n\nans = solution()"
    ],
    "487795a712ca4df799ee2cbe1e449bfa": [
        "def solution():\n    for abcd in range(1000, 10000):\n        M = int(\"5\" + str(abcd))\n        N = int(str(abcd) + \"5\")\n        if M - N == 22122:\n            return abcd\n\nans = solution()"
    ],
    "c095aeb90ada41a7b2026c6d00a0a9a5": [
        "from fractions import Fraction\n\ndef solution():\n    num1_int_part = 21\n    num1_frac_part = Fraction(21, 286)\n    num1 = num1_int_part + num1_frac_part\n\n    num2_int_part = 6\n    num2_frac_part = Fraction(647, 2530)\n    num2 = num2_int_part + num2_frac_part\n\n    num3_int_part = 1\n    num3_frac_part = Fraction(1370, 2829)\n    num3 = num3_int_part + num3_frac_part\n\n    result = num1 / num2 * num3\n    return result\n\nans = solution()"
    ],
    "a8ad8c1da3f64db3b4d3e1134a3879a8": [
        "def solution():\n    return 30 / 100 * 1600\n\nans = solution()"
    ],
    "1080dc888bc1462c875ce93fbe5290ad": [
        "def solution():\n    total_money = 3.85\n    cost_pencil = 0.38\n    cost_ruler = 0.59\n\n    money_left = total_money - (cost_pencil + cost_ruler)\n\n    return round(money_left, 2)\n\nans = solution()"
    ],
    "b941a481a3ec4834ae3b5b86f5aec29d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let s be the rate at which Star types and n be the rate at which Nini types.\n    # We have two equations representing the work done:\n    # 1. 5s + 20n = 1 (the work is finished)\n    # 2. 20s + 8n = 1 (the work is finished)\n\n    s, n = symbols('s n')\n\n    # Set up the equations\n    equation1 = Eq(5 * s + 20 * n, 1)\n    equation2 = Eq(20 * s + 8 * n, 1)\n\n    # Solve the equations for s and n\n    solutions = solve((equation1, equation2), (s, n))\n\n    # Find how long it will take Nini to finish the job by herself, which is 1/n\n    time_for_nini = 1 / solutions[n]\n\n    return time_for_nini\n\nans = solution()"
    ],
    "e02f12831853474bb8ee7052e880632b": [
        "def solution():\n    length, width, height = 6, 10, 12\n    num_cubes_length, num_cubes_width, num_cubes_height = length * width * height // 720, length * height // 720, width * height // 720\n    \n    # Faces painted on the length and width sides\n    lw_face_painted = (num_cubes_length - 2) * (num_cubes_width - 2) * 2\n\n    # Faces painted on the length and height sides\n    lh_face_painted = (num_cubes_length - 2) * (num_cubes_height - 2) * 2\n\n    # Faces painted on the width and height sides\n    wh_face_painted = (num_cubes_width - 2) * (num_cubes_height - 2) * 2\n\n    # Total painted on only one face\n    total_one_face_painted = lw_face_painted + lh_face_painted + wh_face_painted\n    \n    return total_one_face_painted\n\nans = solution()"
    ],
    "ee5f7e8a908d460b8adcc1ad027e999e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    anne = symbols('anne')\n    maria = anne + 20\n    total_apples = Eq(anne + maria, 44)\n\n    number_of_apples = solve(total_apples, anne)\n\n    return number_of_apples[0]\n\nans = solution()"
    ],
    "c918b81873d64b8aa1c102ce71280309": [
        "def solution():\n    # Prime factorization of 140: 2^2 * 5 * 7\n    # Every pile has an odd number of candies, so every pile has to be a divisor of 5 * 7 = 35, since 2^2 (4) is even.\n    # We need to count the number of divisors of 35.\n    # If n = p1^e1 * p2^e2 * ... * pk^ek is the prime factorization of n,\n    # then the number of positive divisors of n, including 1 and n itself, is (e1 + 1)(e2 + 1)...(ek + 1).\n    # Here, for 35 = 5^1 * 7^1, the number of divisors is (1+1)(1+1) = 2 * 2 = 4.\n    return 4\n\nans = solution()"
    ],
    "6b16fdd0be384cf5a083adb6b7ddc329": [
        "def solution():\n    for number in range(10, 100):  # 2-digit numbers range from 10 to 99\n        if number % 9 == 5 and number % 11 == 2:\n            return number\n\nans = solution()"
    ],
    "9399d8d9f49e46a198d04e3865b85816": [
        "def solution():\n    # After Tom takes 4 stones from Stack B, there are 20 stones in Stack A,\n    # and 16 stones in Stack B.\n    # To ensure a win, Jerry must take stones in such a way that the number\n    # of stones in both stacks is the same after Jerry's turn.\n    # This will ensure that no matter what Tom does, Jerry can always mirror\n    # Tom's move and eventually be the one to take the last stone.\n    \n    # Calculate the number of stones Jerry must take to balance the stacks.\n    stones_to_take = 20 - 16\n    \n    # Jerry should take these stones from Stack A to balance both stacks.\n    stack = 'A'\n    \n    return f'Jerry must take {stones_to_take} stone(s) from Stack {stack}.'\n\nans = solution()"
    ],
    "7580acd98a0c4ef6bda0a71edd51c899": [
        "def solution():\n    # Each sheet contains 4 page numbers (front and back, even and odd)\n    # Third sheet will have the page numbers 5, 6, 7, 8 (1-based index)\n    # The sum of these page numbers:\n    ans = 5 + 6 + 7 + 8\n    return ans\n\nans = solution()"
    ],
    "7a962b40b4df4e7da95c3f2d31a2f3ce": [
        "def solution():\n    total_students = 98\n    fraction_of_girls = 3 / 7\n    number_of_girls = total_students * fraction_of_girls\n    return int(number_of_girls)\n\nans = solution()"
    ],
    "3199cfbf2dfe4ff5b0205bf52aec9191": [
        "def solution():\n    # The worst case scenario when trying to match keys to the correct lock\n    # is when each key is tried in every lock before finding the correct one.\n    # Since there are a total of 20 keys and 20 locks,\n    # the warden will try 19 times unsuccessfully for the first correct key,\n    # then 18 times unsuccessfully for the second, and so on until the last key,\n    # which will match the last lock without any trial (since it's the only one left).\n    \n    # The sum of all unsuccessful trials before finding each correct key is:\n    # 19 + 18 + 17 + ... + 1 + 0\n    # This is equivalent to the sum of the first 19 natural numbers.\n    # The formula to find the sum of the first n natural numbers is:\n    # sum = n * (n + 1) / 2\n\n    # We use n = 19 for the case when there are 20 keys,\n    # and we don't need to include the last key since it will fit the last lock without a trial.\n    n = 19\n    sum_unsuccessful_tries = n * (n + 1) // 2\n    \n    return sum_unsuccessful_tries\n\nans = solution()"
    ],
    "2bf32838f785445980cc390cb6320d3d": [
        "def solution():\n    numerator = (2017/2018) + (20172017/20182018)\n    denominator = 201720172017/201820182018\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "23f8aa9db7e147b3b3742048c1d3174a": [
        "def solution():\n    ans = 861 // 7\n    return ans\n\nans = solution()"
    ],
    "04b825cc67fe4b4f8a1f4497100aeb7c": [
        "def solution():\n    peaches_per_watermelon = 6\n    apples_per_peach = 3 / 2\n\n    apples_per_watermelon = peaches_per_watermelon * apples_per_peach\n    \n    return apples_per_watermelon\n\nans = solution()"
    ],
    "7ed76480d276434fbfc1ef6cec1b7bdd": [
        "def solution():\n    total_digits = 933\n    digits = 0\n    page_number = 0\n    \n    while digits < total_digits:\n        page_number += 1\n        digits += len(str(page_number))\n    \n    return page_number - 1  # Subtracting 1 because the loop stops after exceeding total_digits\n\nans = solution()"
    ],
    "69821dbcaf204ec39ed74a835223a3ce": [
        "def solution():\n    number1 = 120\n    number2 = 300\n    halfway_point = (number1 + number2) / 2\n    return halfway_point\n\nans = solution()"
    ],
    "b79ceb9a914f43578cdb34802a537cfe": [
        "def solution():\n    ans = 100\n    return ans\n\nans = solution()"
    ],
    "fa6c8419cbc948ed949fceaaf819f554": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "894a1b1acc3e45f59d4643eed64472b1": [
        "def solution():\n    total_cost = (30 * 5) + (50 * 3) + (20 * 10)\n    total_cups = 30 + 50 + 20\n    average_cost_per_cup = total_cost / total_cups\n    return average_cost_per_cup\n\nans = solution()"
    ],
    "796675bc6c294ff3bcb032a3c401a43e": [
        "def solution():\n    count = 0\n    for page in range(1, 301):\n        if '3' in str(page):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "88e4456f85e441199253d72e1f99a80c": [
        "def solution():\n    total_digits = 0\n    for i in range(1, 92):\n        total_digits += len(str(i))\n    return total_digits\n\nans = solution()"
    ],
    "c9603f52f68b48fb9942c64a01b72b5b": [
        "def solution():\n    start_time = (9 * 60) + 15  # Convert start time 9:15pm to minutes\n    end_time = (11 * 60) + 6    # Convert end time 11:06pm to minutes\n    duration = end_time - start_time\n    return duration\n\nans = solution()"
    ],
    "f93fc07de4544d5f963823aa20a6df3c": [
        "def solution():\n    # Initialize the difference between boys and girls\n    diff = 32\n    \n    # Iterate to find a square number for both boys and girls\n    for girls_per_side in range(1, diff):\n        # Calculate the total number of girls in the square array\n        girls = (2 * girls_per_side - 1) ** 2\n        # Calculate the total number of boys in the square array\n        boys = girls + diff\n        # Check if boys form a square number\n        boys_per_side = int(boys ** 0.5)\n        \n        if boys_per_side ** 2 == boys:\n            # Calculate the total number of students\n            total_students = boys + girls\n            return total_students\n\nans = solution()"
    ],
    "2256985532604103b84c8d43d526ad28": [
        "def solution():\n    # Initial number of pens in Box A\n    blue_A = 10\n    red_A = 15\n    black_A = 20\n    green_A = 25\n    \n    # Initial number of pens in Box B\n    blue_B = 10\n    red_B = 15\n    black_B = 20\n    green_B = 25\n    \n    # Remove 20 pens from Box A (5 of each color)\n    blue_A -= 5\n    red_A -= 5\n    black_A -= 5\n    green_A -= 5\n    \n    # Add the removed pens to Box B\n    blue_B += 5\n    red_B += 5\n    black_B += 5\n    green_B += 5\n\n    # Pens needed to ensure at least 15 of each in Box A\n    pens_to_return = 0\n    if blue_A < 15:\n        pens_to_return += (15 - blue_A)\n    if red_A < 15:\n        pens_to_return += (15 - red_A)\n    if black_A < 15:\n        pens_to_return += (15 - black_A)\n    if green_A < 15:\n        pens_to_return += (15 - green_A)\n\n    return pens_to_return\n\nans = solution()"
    ],
    "7e7c1a59a5694db697ef232a76a2ffdf": [
        "def solution():\n    fraction = 1 / 8\n    return fraction\n\nans = solution()"
    ],
    "81eb5a575fa2413fb713f5e997cd9be1": [
        "def solution():\n    total_chocolates = 20\n    plain_chocolates = 8\n    soft_centre_chocolates = 16\n\n    # Since there are only 20 chocolates and 16 of them have soft-centres,\n    # at least 16 - 12 = 4 plain chocolates must have soft centres,\n    # because all 12 milk chocolates could be soft-centre chocolates at most.\n    min_plain_soft_centre = soft_centre_chocolates - (total_chocolates - plain_chocolates)\n\n    # At most, all 8 plain chocolates could be soft-centre chocolates.\n    max_plain_soft_centre = min(plain_chocolates, soft_centre_chocolates)\n\n    # If we are asked what we can say for sure, it is that at least 4 plain chocolates have soft-centres.\n    # We cannot say with certainty that there are more than 4, because the information given does not specify that.\n    ans = min_plain_soft_centre\n\n    return ans\n\nans = solution()"
    ],
    "3e0ec8edcb27464fae3044b467f54920": [
        "def solution():\n    quotient = 29\n    remainder = 11\n    sum_dividend_divisor = 431\n\n    # Let the divisor be x\n    # So the dividend would be quotient * divisor + remainder = 29*x + 11\n    # According to the problem, dividend + divisor = 431\n    # So, we get the equation: (29*x + 11) + x = 431\n    # Simplifying: 30*x + 11 = 431\n    # So, x + 29*x + 11 = 431\n    # Therefore, x = (431 - 11) / 30\n    divisor = (sum_dividend_divisor - remainder) // (quotient + 1)\n\n    # The dividend is then:\n    dividend = quotient * divisor + remainder\n\n    # The difference between dividend and divisor is:\n    difference = dividend - divisor\n\n    return difference\n\nans = solution()"
    ],
    "b2d3da9e064d4575a7d21857a9386c15": [
        "def solution():\n    percent_playing_violin = 12.5\n    num_violin_players = 11\n\n    total_pupils = (num_violin_players * 100) / percent_playing_violin\n\n    return int(total_pupils)\n\nans = solution()"
    ],
    "766f7130bda14f6780c8a29b28b45542": [
        "def solution(n):\n    C = 50 * n\n    return C\n\nans = solution"
    ],
    "bd8976f4ffcd4d51b276b2ccda2e228d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of each type of coin\n    x = symbols('x')\n    \n    # The total amount made up by 1p, 2p, 5p, and 10p coins\n    equation = Eq(1*x + 2*x + 5*x + 10*x, 90)\n    \n    # Solve the equation for x\n    solution = solve(equation, x)\n    \n    # The total number of coins is 4 times the number of each type of coin\n    num_coins = 4 * solution[0]\n    \n    return num_coins\n\nans = solution()"
    ],
    "55d9d0163f3a466c8356b0f2120c7887": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apples, pears = symbols('apples pears', integer=True)\n    \n    equation1 = Eq(apples + pears, 105)\n    equation2 = Eq((1 - 1/3) * apples, (5/6) * (1 - 2/5) * pears)\n    \n    solutions = solve((equation1, equation2), (apples, pears))\n    \n    apples_sold = solutions[apples] / 3\n    pears_sold = 2 * solutions[pears] / 5\n    \n    total_sold = apples_sold + pears_sold\n    \n    return int(total_sold)\n\nans = solution()"
    ],
    "418f309d7a1845b1a05816bed5dfb673": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n\n    equation1 = Eq(stickers - 13 * pupils, 190)\n    equation2 = Eq(stickers - 17 * pupils, 50)\n\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "6eeec66a73a24afc801c791a461a7aa6": [
        "def solution():\n    total_cars = 60\n    red_cars = (5/12) * total_cars\n    blue_cars = (20/100) * total_cars\n    neither_red_nor_blue = total_cars - red_cars - blue_cars\n    return int(neither_red_nor_blue)\n\nans = solution()"
    ],
    "bb42c63fe2114d219cb0459ccb14f1a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    ratio_eq = Eq(A/B, 4/5) & Eq(B/C, 5/6)\n    difference_eq = Eq(C - A, 10)\n\n    # Solving the system of equations\n    solutions = solve((ratio_eq, difference_eq), (A, B, C))\n\n    return sum(solutions[A], solutions[B], solutions[C])\n\nans = solution()"
    ],
    "3c78fac74fe445cdaba8f451af901d4f": [
        "def solution():\n    from math import factorial as fact\n\n    group_of_4 = fact(4)  # Permutations for A, B, C, D since they should be always next to each other\n    rest_students = 8  # Since A, B, C, D are considered as one unit for ordering\n    permutations_for_rest = fact(rest_students)  # Permutations for rest of the students\n    permutations_with_group = fact(rest_students + 1)  # Including the unit A, B, C, D\n\n    return group_of_4 * permutations_with_group\n\nans = solution()"
    ],
    "9da90a336543472fb221543495f75212": [
        "def solution():\n    total_games = 6 * (6 - 1) // 2  # Total number of games is combination C(6, 2)\n    total_points = total_games * 2  # Each game has 2 points to distribute\n    sum_of_points = 7 + 6 + 5 + 4 + 3  # Sum of points of five students\n    remaining_points = total_points - sum_of_points  # Points for the remaining student\n\n    return remaining_points\n\nans = solution()"
    ],
    "2fbf56cda6294a4ba514fb0676d5a24c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the weights of bags A and B\n    A, B = symbols('A B')\n\n    # Create equations based on the given conditions\n    # Original ratio 5:3\n    equation1 = Eq(A/B, 5/3)\n    # New ratio 7:5 after transferring 10 grams from A to B\n    equation2 = Eq((A - 10)/(B + 10), 7/5)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (A, B))\n\n    # Calculate the total weight of both bags\n    total_weight = solutions[A] + solutions[B]\n\n    return total_weight\n\nans = solution()"
    ],
    "f90f17b98c3244ee80cbcf47c9a22ca7": [
        "def solution():\n    boys_to_girls_ratio = 3 / 5\n    number_of_boys = 9\n\n    number_of_girls = (number_of_boys / boys_to_girls_ratio) * 5\n\n    return number_of_girls\n\nans = solution()"
    ],
    "0c806097cde44e2b993a1db7282d9731": [
        "def solution():\n    total_players = 378\n    first_line = 22\n    last_line = 62\n\n    # Given that it's an arithmetic sequence, we use the formula for the sum of an arithmetic sequence:\n    # total_players = n/2 * (first_line + last_line)\n    # where n is the number of lines (which we don't know)\n\n    # Rearranging the formula to solve for n gives us:\n    # n = total_players * 2 / (first_line + last_line)\n    n = total_players * 2 / (first_line + last_line)\n\n    # Since we need an integer number of lines, ensure n is an integer\n    n = int(n)\n\n    # The difference (common difference in arithmetic sequence) d can be found by:\n    # d = (last_line - first_line) / (n - 1)\n    d = (last_line - first_line) / (n - 1)\n\n    return int(d)\n\nans = solution()"
    ],
    "d6a1e647460246479951e8955d7126b0": [
        "def solution():\n    for number in range(100, 201):\n        if (number % 3 == 2) and (number % 5 == 2) and (number % 7 == 2):\n            return number\n\nans = solution()"
    ],
    "1c808145d3a040e4899219721beca8a3": [
        "def solution():\n    # Calculate the product of the numbers\n    product = 48 * 925 * 38 * 435\n    \n    # Convert the product to string and count how many zeros are at the end\n    count_zeros = len(str(product)) - len(str(product).rstrip('0'))\n    \n    return count_zeros\n\nans = solution()"
    ],
    "65b97cc4685a4c2285fda77b5e2dd58d": [
        "def solution():\n    # Convert all masses to grams for easier comparison\n    masses_in_grams = [30, 1000, 300, 2500, 3000, 150, 3]\n    # Find the maximum mass\n    max_mass = max(masses_in_grams)\n    return max_mass\n\nans = solution()"
    ],
    "859d0b8b48294702afaa6ae358e1b4b8": [
        "def solution():\n    from sympy import Rational\n\n    # Probability of dog barking on any given day\n    probability_of_barking_any_night = Rational(3, 7)\n\n    # Probability of a theft occurring on any given day\n    probability_of_theft_any_day = Rational(2, 1000)\n\n    # Probability that a theft is occurring given that the dog barks\n    probability_theft_given_barking = Rational(9, 10)\n\n    # Using Bayes' theorem:\n    # P(theft|barking) = P(barking|theft) * P(theft) / P(barking)\n    # We need to find P(barking|theft), which is the probability of the dog barking during the occurrence of the theft\n    # Since P(theft) and P(barking) are given, we can rearrange for P(barking|theft):\n    probability_barking_during_theft = (probability_theft_given_barking * probability_of_theft_any_day) / probability_of_barking_any_night\n\n    return float(probability_barking_during_theft)\n\nans = solution()"
    ],
    "7522b62306804ad5ac94948668c3a1b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the number of each candy type\n    apple, orange, grape, pineapple = symbols('apple orange grape pineapple')\n\n    # Create the equations based on the given conditions\n    equation1 = Eq(apple, orange + 7)\n    equation2 = Eq(apple, grape + 3)\n    equation3 = Eq(pineapple, orange + 2)\n    equation4 = Eq(apple + orange + grape + pineapple, 25)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (apple, orange, grape, pineapple))\n\n    return solutions[apple]\n\nans = solution()"
    ],
    "cbc5f810ee4d4266ac73f789efc26675": [
        "def solution():\n    total_children = 407\n    boys_ratio = 5 / 11  # boys = 5 out of every 11 children\n    number_of_boys = total_children * boys_ratio\n\n    return int(number_of_boys)\n\nans = solution()"
    ],
    "cb24212b24014d99811733199a00d63c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n    \n    equation1 = Eq(stickers - 13 * pupils, 190)\n    equation2 = Eq(stickers - 17 * pupils, 50)\n\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "514c9d0ed96a47ed9c826d6081877afc": [
        "def solution():\n    smallest_diff = float('inf')\n    \n    # Create all permutations of the digits 1 to 9\n    from itertools import permutations\n    perms = permutations([1,2,3,4,5,6,7,8,9])\n\n    # Convert each tuple of digits to an integer and sort all permutations\n    numbers = sorted([int(''.join(map(str, perm))) for perm in perms])\n    \n    # Iterate through the sorted numbers and find the smallest difference\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < smallest_diff:\n            smallest_diff = diff\n\n    return smallest_diff\n\nans = solution()"
    ],
    "525efcf75fb844b7b5bfc88c0478887d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Equation based on the information given\n    equation1 = Eq(boys, girls - 65)\n    equation2 = Eq((2/5) * boys, (3/7) * girls)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    boys_left = (3/5) * solutions[boys]\n    girls_left = (4/7) * solutions[girls]\n    total_left = boys_left + girls_left\n\n    return total_left\n\nans = solution()"
    ],
    "a8823bcc458c444d8e7a13e610f7cd2a": [
        "def solution():\n    ans = (70 * 4) - (80 * 3) + (60 * 5)\n    return ans\n\nans = solution()"
    ],
    "0d96f11c50ce4d189e891f9019eef601": [
        "def solution():\n    return 2412 // 9\n\nans = solution()"
    ],
    "d95d576c1e1d4865bb3b4aa77767da99": [
        "def solution():\n    count = 0\n    for page_number in range(1, 131):\n        count += str(page_number).count('1')\n    return count\n\nans = solution()"
    ],
    "c5424cddd42c402499631a2dc29f9de6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of bricks at first be x.\n    x = symbols('x')\n\n    # We use inverse operations to model the problem.\n    # At the end 25 bricks remain, so total bricks moved is x - 25.\n    # On the third trip, 68 bricks are moved, thus before the third trip, we had x - 25 + 68 bricks.\n    # On the second trip, they moved 11 bricks more than half of the remaining bricks, so remaining bricks were 2 * (second_trip - 11).\n    # After the first trip, we have x - (first_trip) bricks left.\n    # On the first trip, they moved 26 bricks less than half the number of bricks, so first_trip = (1/2) * x - 26.\n\n    # Writing down the equation from the above statements\n    equation = Eq(x - (1/2 * x - 26) - (2 * (x - (1/2 * x - 26) - 68) / 2 + 11) - 68 - 25, 0)\n\n    # Solving the equation for x\n    solutions = solve(equation, x)\n\n    # Since the number of bricks has to be positive, we discard any negative solutions.\n    ans = max(solutions)\n\n    return ans\n\nans = solution()"
    ],
    "fa96d25c74d0403cb10a17ab2f107e56": [
        "def solution():\n    total_pupils = 1690\n    more_boys = 90\n    girls_ratio_swim = 31\n    girls_ratio_not_swim = 49\n    boys_swim_lesser = 120\n\n    # Total number of girls and boys\n    total_girls = (total_pupils - more_boys) / 2\n    total_boys = total_girls + more_boys\n\n    # Number of girls who can swim and who cannot\n    total_girls_swim = (total_girls * girls_ratio_swim) / (girls_ratio_swim + girls_ratio_not_swim)\n    total_girls_not_swim = total_girls - total_girls_swim\n\n    # Number of boys who can swim and who cannot\n    total_boys_not_swim = (total_boys + boys_swim_lesser) / 2\n    total_boys_swim = total_boys_not_swim - boys_swim_lesser\n\n    # Total pupils who can swim and who cannot\n    total_cannot_swim = total_girls_not_swim + total_boys_not_swim\n\n    return int(total_cannot_swim)\n\nans = solution()"
    ],
    "9238796298a4443b8f23e7932b9616d6": [
        "def solution():\n    from math import factorial\n\n    num_kids = 3\n    ans = factorial(num_kids)\n    return ans\n\nans = solution()"
    ],
    "e1834f400a7b4dd1aceed1e5f730d59b": [
        "def solution():\n    # Mike can only be 2nd in line if the square array is a 3x3 square\n    # Since in a larger square, being second in any direction would not be possible\n    # In a 2x2 square, there's no \"second\" position in any line\n    # Thus, there must be 3 students on each side of the square\n\n    # Number of students is the square of the side length of the square array\n    num_students = 3 ** 2\n\n    return num_students\n\nans = solution()"
    ],
    "e001594de0464ba1b21b4efea0bd0572": [
        "def solution():\n    # Let x be the current age of Geoff and y be the current age of his sister\n    # x + y = 22 (Equation 1)\n    # After n years, their ages would be (x + n) and (y + n)\n    # The sum of their ages after n years would be (x + n) + (y + n) = 2n + 22\n    # We are looking for the number of years n such that 2n + 22 = 40 (Equation 2)\n    \n    # Solution:\n    n = (40 - 22) / 2\n    \n    return int(n)\n\nans = solution()"
    ],
    "157222dd22d34a94998e5528efa14ab0": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)\n    initial_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "957c6e2479f14a37aca09d1bc7ff195f": [
        "def solution():\n    digits = 0\n    for page in range(1, 21):\n        digits += len(str(page))\n    return digits\n\nans = solution()"
    ],
    "97bb7d23bdbf4724b5bab9effbd3ac6e": [
        "def solution():\n    ans = 125 * 34 * 25 * 4 * 8\n    return ans\n\nans = solution()"
    ],
    "105a05ed86254429b49e9aa1e948fc3f": [
        "def solution():\n    # Create a dictionary to store the number of ways to reach each step\n    # Base cases: 0 ways to get to step 0, 1 way to reach step 2 (one jump of 2),\n    # and 1 way to reach step 3 (one jump of 3).\n    ways = {0: 0, 1: 0, 2: 1, 3: 1}\n    \n    # Start calculating from step 4 to 10\n    for step in range(4, 11):\n        # The number of ways to get to the current step is the sum of the ways\n        # to get to the two previous positions from which Peter can jump \n        # (since he can jump either 2 or 3 steps).\n        ways[step] = ways[step - 2] + ways[step - 3]\n    \n    return ways[10]\n\nans = solution()"
    ],
    "a447314d1b7e47d595af58ce12a8673e": [
        "def solution():\n    # We'll iterate over all possible combinations to find the one that satisfies the condition\n    for i in range(1000, 10000): # The range of 4-digit numbers\n        original = i\n        # Extracting digits\n        ones = original % 10\n        tens = (original // 10) % 10\n        hundreds = (original // 100) % 10\n        thousands = original // 1000\n        \n        # Construct the new number by substituting the ones place with the thousands place\n        new_number = ones * 1000 + thousands + tens * 10 + hundreds * 100\n        \n        # Check if the new number is greater by 5877\n        if new_number - original == 5877:\n            return original\n\nans = solution()"
    ],
    "ef6efdf0f99e45afbcac63320b9c084a": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    smallest_divisor = 1\n    minimum_dividend = smallest_divisor * quotient + remainder\n    return minimum_dividend\n\nans = solution()"
    ],
    "b576b58e760e4608bde960e52d27390f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(bentley, david - 25)\n    equation3 = Eq(david + bentley + triston, 410)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[bentley]\n\nans = solution()"
    ],
    "1d179bb769e243588baf620c0eddb4c3": [
        "def solution():\n    number = '1998'\n    total_digits = len(number)\n    while True:\n        if int(number) % 33 == 0:\n            return len(number)\n        number += '1998'\n        total_digits += 4\n\nans = solution()"
    ],
    "8b5b1973788f4120b9eaa557471090b6": [
        "def solution():\n    group_number = 5\n    first_term = group_number\n    second_term = group_number ** 2\n    third_term = second_term * group_number\n\n    sum_of_group = first_term + second_term + third_term\n    \n    return sum_of_group\n\nans = solution()"
    ],
    "37df628db6754f34a0428e73a9610822": [
        "def solution():\n    return 882 // 14\n\nans = solution()"
    ],
    "b9ea86dfaf4448428f87deacbb7a0f5a": [
        "def solution():\n    total_miles = 3.75\n    per_run_miles = 1/4\n\n    num_runs = total_miles / per_run_miles\n\n    return int(num_runs)\n\nans = solution()"
    ],
    "d888f754042d47c097e6350ffd0bf91f": [
        "def solution():\n    ans = 3000000 + 30000 + 30\n    return ans\n\nans = solution()"
    ],
    "9a6a60ff879c4c6bbc80d88a7bee3dd1": [
        "def solution():\n    boys = 42\n    boys_to_girls_ratio = 3 / 2\n\n    girls = boys / boys_to_girls_ratio\n\n    return int(girls)\n\nans = solution()"
    ],
    "523cf0df494b4333b5fe0276768d0d6f": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 5 == 3 and num % 6 == 4 and num % 9 == 1:\n            return num\n\nans = solution()"
    ],
    "da2e2930096a4f6e840662dbf18b6d76": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    candice, doris, elly = symbols('candice doris elly')\n    \n    equation1 = Eq(elly, doris + 6)\n    equation2 = Eq(candice, 5 * elly)\n    equation3 = Eq(candice + doris + elly, 50)\n    \n    solutions = solve((equation1, equation2, equation3), (candice, doris, elly))\n    \n    return solutions[candice]\n\nans = solution()"
    ],
    "33ccad8b36de4799bc2bc55439667b1d": [
        "def solution():\n    # Cross-multiply the terms of the proportion to find the missing value (x).\n    x = (10 * 21) / 14\n    return x\n\nans = solution()"
    ],
    "900857df81614ea5855ed60ccd1e3252": [
        "def solution():\n    fish_books = 78\n    bird_books = fish_books - 12\n    total_books = fish_books + bird_books\n    return total_books\n\nans = solution()"
    ],
    "3a67a40b66334eb68ffe9d005d60fa1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of stamps each person has\n    andrew, kim, shaun = symbols('andrew kim shaun')\n\n    # Shaun has twice as many stamps as Kim\n    equation1 = Eq(shaun, 2 * kim)\n    # Andrew has 24 less stamps than Shaun\n    equation2 = Eq(andrew, shaun - 24)\n    # Total number of stamps\n    equation3 = Eq(andrew + kim + shaun, 256)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (andrew, kim, shaun))\n\n    return solutions[andrew]\n\nans = solution()"
    ],
    "a4ee7f4c3e13434da3c2253ab814136c": [
        "def solution():\n    for num in range(10, 100, 10):  # Two-digit numbers ending in 0\n        if num % 6 == 0 and num % 9 == 0:\n            return num\n\nans = solution()"
    ],
    "5adbbaf57fc64b529ecdb661df6d9c9e": [
        "def solution():\n    original_number = 5832\n    tens_to_add = 7 * 10\n    correct_answer = original_number + tens_to_add\n\n    return correct_answer\n\nans = solution()"
    ],
    "17091d7aa5fd4380bc6e97f0a25be60b": [
        "def solution():\n    n = 27\n    ans = 1\n    while n % 2 == 0:\n        ans += 1\n        n //= 2\n\n    d = 3\n    while d * d <= n:\n        if n % d == 0:\n            e = 0\n            while n % d == 0:\n                e += 1\n                n //= d\n            ans *= e + 1\n        d += 2\n\n    if n > 1:\n        ans *= 2\n\n    return ans - 1\n\nans = solution()"
    ],
    "08031ac64ba7489a8cb62dc6a25d5652": [
        "def solution():\n    total_length_cm = 300  # Convert 3 m to cm\n    piece1 = 147  # Length of the first piece in cm\n    piece2 = 32.5  # Length of the second piece in cm\n    piece3 = 67  # Length of the third piece in cm\n\n    # Calculate the length of the fourth piece\n    piece4 = total_length_cm - (piece1 + piece2 + piece3)\n\n    return piece4\n\nans = solution()"
    ],
    "e2d31838755547eba6842f1253e3ffd1": [
        "def solution():\n    ans = 308 - 197\n    return ans\n\nans = solution()"
    ],
    "741594190e264f008d30c48a942dc6ee": [
        "def solution():\n    pieces_of_paper = 18\n    interval = 3\n    leaves_needed = (pieces_of_paper - 1) // interval\n    return leaves_needed\n\nans = solution()"
    ],
    "b4e006ff98474bd0850725353e1e101a": [
        "def solution():\n    return (101+234+567)*(234+567+89) - (101+234+567+89)*(234+567)\n\nans = solution()"
    ],
    "3cf63d0be0824f3c84d43730e223636f": [
        "def solution():\n    # Probability A passes, B fails, C fails\n    p_a = 0.5 * (1 - 0.4) * (1 - 0.2)\n    # Probability B passes, A fails, C fails\n    p_b = (1 - 0.5) * 0.4 * (1 - 0.2)\n    # Probability C passes, A fails, B fails\n    p_c = (1 - 0.5) * (1 - 0.4) * 0.2\n    # Probability A and B pass, C fails\n    p_ab = 0.5 * 0.4 * (1 - 0.2)\n    # Probability A and C pass, B fails\n    p_ac = 0.5 * (1 - 0.4) * 0.2\n    # Probability B and C pass, A fails\n    p_bc = (1 - 0.5) * 0.4 * 0.2\n    # Probability A, B, and C all pass\n    p_abc = 0.5 * 0.4 * 0.2\n    # Probability no one passes\n    p_none = (1 - 0.5) * (1 - 0.4) * (1 - 0.2)\n    \n    # Finding the most likely number of people to pass\n    # Pass counts will be 0, 1, 2, or 3, we have to compare the sum of probabilities\n    \n    # Sum of probabilities for no one passing\n    pass_0 = p_none\n    # Sum of probabilities for exactly one passing\n    pass_1 = p_a + p_b + p_c\n    # Sum of probabilities for exactly two passing\n    pass_2 = p_ab + p_ac + p_bc\n    # Probability for all three passing\n    pass_3 = p_abc\n    \n    # Comparing the probabilities\n    pass_counts = {0: pass_0, 1: pass_1, 2: pass_2, 3: pass_3}\n    most_likely_pass_count = max(pass_counts, key=pass_counts.get)\n    \n    return most_likely_pass_count\n\nans = solution()"
    ],
    "b422fcfa507f4716856239caa8b70d72": [
        "def solution():\n    ans = sum(2 * j/i for i in range(1, 11) for j in range(1, i))\n    return ans\n\nans = solution()"
    ],
    "0049786ba1f8489782eb5b1cdec203a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watches, caps = symbols('watches caps')\n    \n    original_ratio = Eq(watches / caps, 8 / 11)\n    new_ratio = Eq(watches / (caps - 88), 12 / 11)\n    \n    solutions = solve((original_ratio, new_ratio), (watches, caps))\n    \n    return solutions[watches]\n\nans = solution()"
    ],
    "b404e6302dad4073a624607030879a2e": [
        "def solution():\n    time_for_six_houses = 30  # Time to go from the first house to the sixth house\n\n    # There are 5 intervals between 6 houses\n    intervals_for_six_houses = 5\n\n    # Time for one interval\n    time_per_interval = time_for_six_houses / intervals_for_six_houses\n\n    # There are 9 intervals between 10 houses\n    intervals_for_ten_houses = 9\n\n    # Total time for ten houses\n    total_time_for_ten_houses = time_per_interval * intervals_for_ten_houses\n\n    return total_time_for_ten_houses\n\nans = solution()"
    ],
    "13a6697cd8dc4ffab7300721bb11888a": [
        "def solution():\n    return 31 * 56\n\nans = solution()"
    ],
    "7ebc9c1439ea4a04bb6f8b9daa36c101": [
        "def solution():\n    for d in range(1, 10):  # last digit\n        a = d // 4          # first digit (must be whole number)\n        if a * 4 != d:      # filter out if it's not exactly 1/4\n            continue\n        b = a - 1           # second digit\n        if b == a or b == d or b == 0:  # since a is 1/4 of d, b cannot be 0 (a cannot be 1)\n            continue\n        c = 10 - b - a - d  # third digit (none of the digits are the same, must add up to 9)\n\n        original = a * 1000 + b * 100 + c * 10 + d\n        reverse = d * 1000 + c * 100 + b * 10 + a\n        if original * 4 == reverse:\n            return original\n\nans = solution()"
    ],
    "26535c3c7cf044319e17743d60510a51": [
        "def solution():\n    total_length_m = 1.05  # Total length of the ribbon in meters\n    total_length_cm = total_length_m * 100  # Convert meters to centimeters\n    \n    # Let shorter piece's length be x cm, so longer piece's length is 2x cm\n    # Then x + 2x = total_length_cm, solving for x we get:\n    shorter_piece_length_cm = total_length_cm / 3\n    \n    # The length of longer piece would be twice the length of shorter piece\n    longer_piece_length_cm = 2 * shorter_piece_length_cm\n    \n    return longer_piece_length_cm\n\nans = solution()"
    ],
    "0643ad338aa0456895d017aec0d4285d": [
        "def solution():\n    miles_driven = 560\n    miles_per_gallon = 34.5\n    cost_per_litre = 1.08\n    litres_per_gallon = 4.55\n\n    gallons_used = miles_driven / miles_per_gallon\n    litres_used = gallons_used * litres_per_gallon\n    total_cost = litres_used * cost_per_litre\n\n    return total_cost\n\nans = solution()"
    ],
    "69e6ce5788b847b9b25303af2fe5a1fb": [
        "def solution():\n    # To ensure that Jack always wins, he needs to leave a multiple of 12 (1+11) for Ken after his first move,\n    # which forces Ken to always leave a non-multiple of 12 for Jack.\n    total_coins = 2015\n    # Compute the remainder of the pile after being divided by the total moves possible (12).\n    # This will help to find out how many coins Jack needs to pick to leave Ken with a multiple of 12.\n    remainder = total_coins % (1+11)\n\n    # If the remainder is 0, Jack is already at a disadvantage (as any number he picks will leave a non-multiple of\n    # 12 for Ken). Since it's not possible to pick 0 coins, Jack cannot guarantee a win in this case,\n    # so there's no strategy that ensures Jack's win.\n    # However, if remainder is not zero, he can pick that number of coins,\n    # and implement the winning strategy from that point onwards.\n    if remainder == 0:\n        return 0\n    else:\n        # Jack should pick up the remainder number of coins to ensure his win.\n        return remainder\n\nans = solution()"
    ],
    "be2bd70c882644a99d167bdd71a65b7e": [
        "def solution():\n    # Since the line passes through the origin, b = 0.\n    b = 0\n\n    # Given the point (4, 8) lies on the line y = mx + b\n    x, y = 4, 8\n\n    # We can find the slope m by y = mx.\n    m = y / x\n\n    # Since b = 0, the linear equation is y = mx\n    linear_equation = f\"y={m}x\"\n\n    return linear_equation\n\nans = solution()"
    ],
    "c59f693d386d4a73a2d62b1ebcb6185c": [
        "def solution():\n    ans = 1200031093\n    return ans\n\nans = solution()"
    ],
    "90111a213be04afd824d36b70a321040": [
        "def solution():\n    # Pattern: ●○●○○\n    # The pattern repeats every 5 balls, with 3 black and 2 white balls in each pattern.\n    \n    # Number of white balls given\n    white_balls = 92\n    \n    # Since we have 2 white balls in every pattern, we can find the number of patterns by dividing\n    # the total number of white balls by 2.\n    total_patterns = white_balls // 2\n    \n    # For each pattern, there are 5 balls (3 black and 2 white).\n    # Therefore, the total number of balls is the number of patterns times 5.\n    total_balls = total_patterns * 5\n    \n    # Check if there is an incomplete pattern where the last ball is white.\n    if white_balls % 2 != 0:\n        # If there is an incomplete pattern, add the number of balls in the incomplete pattern.\n        # The incomplete pattern could contain 1 or 2 balls and end with a white ball.\n        # The only incomplete pattern possible here is ●○ (2 balls), since we add one more white ball.\n        total_balls += 2\n    \n    return total_balls\n\nans = solution()"
    ],
    "ad17dc3f8a494864b760b100079443f6": [
        "def solution():\n    total_count = 0\n    \n    # Count for hours with a four\n    for hour in range(24):\n        if '4' in str(hour):\n            # if hour includes a 4, all 60 minutes will satisfy at least two fours\n            total_count += 60\n        else:\n            # Count for minutes with a four when hour does not include a 4\n            for minute in range(60):\n                if str(minute).count('4') >= 2:\n                    total_count += 1\n                elif '4' in str(minute):\n                    total_count += 1\n\n    return total_count\n\nans = solution()"
    ],
    "91e7591f3e904be694c0587963279359": [
        "def solution():\n    num = 2015\n    count = 0\n    while num > 0:\n        if num % 10 == 0 or num % 10 == 6 or num % 10 == 9:\n            count += 1\n        elif num % 10 == 8:\n            count += 2\n        num //= 10\n    return count\n\nans = solution()"
    ],
    "cb33eae512244d56b52f675bb43136e8": [
        "def solution():\n    # Let the age of the youngest be x\n    # Since the dwarfs are born in consecutive years, their ages form an arithmetic sequence\n    # Therefore, the ages of the youngest three are x, x+1, and x+2\n    # Their sum is given as 42, thus the equation would be x + (x + 1) + (x + 2) = 42\n    # We can simplify this to:\n    # 3x + 3 = 42\n    # Hence, we solve for x\n    x = (42 - 3) // 3\n    \n    # The oldest one would be x + 6, as they are born in 7 consecutive years\n    # and the youngest three would have x, x+1, and x+2 as their ages\n    oldest_age = x + 6\n    return oldest_age\n\nans = solution()"
    ],
    "0894ed5b3d6f4b4fb5f060190e4e433a": [
        "def solution():\n    ans = 78 + 263 - 174\n    return ans\n\nans = solution()"
    ],
    "0e998f78d8e24e0db196fc058218632c": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 28)\n\nans = solution()"
    ],
    "1d5d5c2cc7ed4484b0ee32dc49820fea": [
        "def solution():\n    pears = 0\n    while True:\n        pears += 1\n        if ((pears - 2) % 6 == 0) and ((pears + 3) % 7 == 0):\n            return pears\n\nans = solution()"
    ],
    "ab6dabced7d2420b96da9161a985e3da": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)\n    initial_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "6fbfa557708a48f88080cdee949845ca": [
        "def solution():\n    original_length_cm = 10\n    shorter_length_mm = 4\n  \n    shorter_length_cm = shorter_length_mm / 10 \n    new_length = original_length_cm - shorter_length_cm\n  \n    return new_length\n\nans = solution()"
    ],
    "1a6a4bcf3e384d149434758e9e9ee954": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, peter, john = symbols('sam peter john')\n\n    # Sam gives away 20% of his stickers\n    sam_gives = 0.20 * sam\n    # Peter gives away 20% of his stickers\n    peter_gives = 0.20 * peter\n    # John receives an increase of 80%, hence he initially had\n    john_initial = (sam_gives + peter_gives) / 0.80\n    # Dealing with sticker ratios\n    ratio_eq = Eq(sam / peter, 7/5)\n    # Sam had 20 stickers more than John finally\n    sam_john_diff_eq = Eq(sam - sam_gives - (john_initial + 1.80 * john_initial), 20)\n    # We find the initial values by the change in stickers\n    change_eq = Eq(sam_gives + peter_gives, 1.80 * john_initial)\n\n    solutions = solve((ratio_eq, sam_john_diff_eq, change_eq), (sam, peter, john))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "e8a7cdbe9f064caa8845fdc48753ccf2": [
        "def solution():\n    # Given data\n    distance1 = 420  # distance for the first part\n    speed1 = 7       # speed in the first part (m/s)\n    distance2 = 620  # distance for the middle part\n    speed2 = 5       # speed in the middle part (m/s)\n    distance3 = 1200 - distance1 - distance2  # distance for the last part\n    speed3 = 8       # speed in the sprint stage (m/s)\n\n    # Calculating time spent on each part\n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    time3 = distance3 / speed3\n\n    # Total time spent on the entire race\n    total_time = time1 + time2 + time3 \n\n    return total_time\n\nans = solution()"
    ],
    "60f2bc1eec7c407c8a6d23e10fdfedbd": [
        "def solution():\n    initial_tests = 4\n    initial_average = 89\n    target_average = 95\n    max_score = 100\n\n    # Total score after 4 tests\n    initial_total = initial_tests * initial_average\n\n    # Tests needed to achieve 95 on average.\n    tests_needed = 0\n    while True:\n        total_tests = initial_tests + tests_needed\n        total_needed = total_tests * target_average  # Total needed for a 95 average\n        required_score = total_needed - initial_total\n        \n        # If the required score can be achieved with max_score on additional tests, stop\n        if required_score <= max_score * tests_needed:\n            break\n        # Else, increment the number of additional tests needed\n        else:\n            tests_needed += 1\n\n    # Return the number of additional tests needed\n    return tests_needed\n\nans = solution()"
    ],
    "7463bf137d564fbabe4d8eb8c8c7ee34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the number of $2 notes and $10 notes\n    notes_2, notes_10 = symbols('notes_2 notes_10')\n\n    # Equations based on the problem statement\n    equation1 = Eq(notes_2 + notes_10, 72)  # Total amount of notes\n    equation2 = Eq(notes_10 - 0.9*notes_10, 2*(notes_2 - 0.75*notes_2))  # Ratio after spending\n\n    # Solve equations\n    solutions = solve((equation1, equation2), (notes_2, notes_10))\n\n    # Amount spent\n    spent_2_notes = solutions[notes_2] * 0.75 * 2\n    spent_10_notes = solutions[notes_10] * 0.9 * 10\n    gift_cost = spent_2_notes + spent_10_notes\n\n    return gift_cost\n\nans = solution()"
    ],
    "8c1bb4f017184cbfae594c5cfaf4d059": [
        "def solution():\n    # 1/A + 1/B = 1/9\n    # 1/A + 1/C = 1/12\n    # 1/B + 1/C = 1/18\n    # Solve for A, B, and C\n    \n    from sympy import symbols, Eq, solve\n    \n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(1/A + 1/B, 1/9)\n    equation2 = Eq(1/A + 1/C, 1/12)\n    equation3 = Eq(1/B + 1/C, 1/18)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    # Get the individual rates of A, B, and C\n    rate_A = solutions[A][0]\n    rate_B = solutions[B][0]\n    rate_C = solutions[C][0]\n    \n    # Calculate combined rate when A, B, and C are working together\n    combined_rate = rate_A + rate_B + rate_C\n\n    # Calculate time taken with combined rates\n    time_taken = 1 / combined_rate\n    \n    return time_taken\n\nans = solution()"
    ],
    "53f089451f8842afb473055ab5d608e1": [
        "def solution():\n    days = 4\n    meters_per_day = 75\n    total_length = days * meters_per_day\n    return total_length\n\nans = solution()"
    ],
    "289652248f414fe9bbafc2f88b401174": [
        "def solution():\n    # We have 3 colors.\n    # To ensure that we get at least one marker of each color, we can draw 1 of each.\n    # So, 3 markers will give us one of each color for sure.\n    # To ensure we have 2 of the same color, we just need to take one more.\n    # This is because if we have 1 of each color, the next one we draw must be a repeat color.\n    fewest_markers = 3 + 1\n    return fewest_markers\n\nans = solution()"
    ],
    "b6319f96909f43389019a555f34399dc": [
        "def solution():\n    for num_5_dollar_notes in range(59):\n        num_2_dollar_notes = 58 - num_5_dollar_notes\n        total_value = num_5_dollar_notes * 5 + num_2_dollar_notes * 2\n        if total_value == 164:\n            return num_5_dollar_notes\n\nans = solution()"
    ],
    "d1e1ebce0b4843ca9292e8dbdda01d4d": [
        "def solution():\n    a7 = 105  # The 7th term\n    a8 = 120  # The 8th term\n\n    # Difference between consecutive terms\n    common_difference = a8 - a7\n\n    # The 100th term, using formula for nth term of an arithmetic sequence: an = a1 + (n - 1)*d\n    a100 = a7 + (100 - 7) * common_difference\n\n    return a100\n\nans = solution()"
    ],
    "3ec3a596e66c4dfcb4ea91b63a5bf969": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the symbols\n    muffin_price, total_money = symbols('muffin_price total_money')\n\n    # First equation, based on the total money spent on the initial purchase\n    equation1 = Eq((5/9) * total_money, 36 * 3 * muffin_price + 32 * muffin_price)\n\n    # The second equation, based on the total money spent on all the cupcakes\n    equation2 = Eq((1/6) * total_money + 36 * 3 * muffin_price, 187.50)\n\n    # Solving the equations for total_money and muffin_price\n    solutions = solve((equation1, equation2), (muffin_price, total_money))\n    muffin_cost = solutions[muffin_price] * 32\n\n    return float(muffin_cost)\n\nans = solution()"
    ],
    "fc35d0defe2942ffad92505706ccc8ee": [
        "def solution():\n    # Start with the smallest even numbers for 8 boxes\n    # Since two boxes will contain the same number of marbles and all others are different and even\n    # We have the first 9 smallest even numbers (counting the repeated one) starting from 2\n    marbles = [2*i for i in range(1, 9)]  # Smallest even numbers for 8 boxes\n    marbles.append(marbles[-1])  # Add the repeated number for the 9th and 10th box\n\n    # Calculate the total number of marbles\n    ans = sum(marbles)\n    return ans\n\nans = solution()"
    ],
    "cc22edf7a7fd4aa79216b432dcbeac61": [
        "def solution():\n    a = (14 - 8) / 3\n    return a\n\nans = solution()"
    ],
    "e2673569a0b943b292503bf53ce7b3a2": [
        "def solution():\n    return 894 // 3\n\nans = solution()"
    ],
    "a7840b9a2b4b4d80bcfb1955e50dedb1": [
        "def solution():\n    seq = [1, 2, 3, 4, 5, 6, 7, 8, 9, 8, 7, 6, 5, 4]\n    ans = sum(seq)\n    return ans\n\nans = solution()"
    ],
    "eab847de393a4cc89be122fdacf06c1b": [
        "def solution():\n    total_pigeons = 75\n    total_cages = 20\n\n    min_pigeons_in_top_cage = -(-(total_pigeons) // total_cages)\n\n    return min_pigeons_in_top_cage\n\nans = solution()"
    ],
    "4f9c4a2d52664632815cca87ff3639cd": [
        "def solution():\n    num_parterres = 1007\n    min_sprinklers = (num_parterres - 1) // 2 + 1\n    return min_sprinklers\n\nans = solution()"
    ],
    "13b735246ec440b287eb3433e89d8de3": [
        "def solution():\n    papaya_mass = 2 + 1/4\n    jackfruit_mass = 3 * papaya_mass\n    total_mass = papaya_mass + jackfruit_mass\n    return total_mass\n\nans = solution()"
    ],
    "df5ddf6fab1640afbbe79fdc2c9c6b0d": [
        "def is_palindrome(number):\n    return str(number) == str(number)[::-1]\n\ndef solution():\n    steps = 1991\n    while True:\n        steps += 1\n        if is_palindrome(steps):\n            return steps - 1991\n\nans = solution()"
    ],
    "f621eb20ae1b443e9decb28c81cacff9": [
        "def solution():\n    num1 = 387\n    num2 = 729\n    average = (num1 + num2) / 2\n    return average\n\nans = solution()"
    ],
    "7b38d775bba24657ba681d25822af411": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the initial number of stickers Alexis had\n    # let y be the initial number of stickers Marry had\n    # let z be the initial number of stickers Charlotte had\n    x, y, z = symbols('x y z')\n\n    # Marry had 7/5 as many stickers as Alexis\n    eq1 = Eq(y, 7/5 * x)\n\n    # Marry and Alexis each gave 20% of their stickers to Charlotte\n    # z increases by 80%\n    eq2 = Eq(z * 1.8, z + y * 0.2 + x * 0.2)\n\n    # In the end, Marry had 20 stickers more than Charlotte\n    eq3 = Eq(y - z * 1.8, 20)\n\n    # Solving the equations\n    solutions = solve((eq1, eq2, eq3), (x, y, z))\n\n    # Returning the value of x, which is the initial number of stickers Alexis had\n    return solutions[x]\n\nans = solution()"
    ],
    "8f05ca5aac6947c0a578b4f78816fdeb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_length = symbols('total_length')\n    \n    equation = Eq(8 + (total_length / 6) + 4, (5 / 12) * total_length)\n    solve_result = solve(equation, total_length)\n    \n    return solve_result[0]\n\nans = solution()"
    ],
    "411dbd979ec64b9198f41e36f93de415": [
        "def solution():\n    from itertools import permutations\n    \n    digits = [3, 4, 5]\n    perms = permutations(digits, 3)  # Generate all permutations of length 3\n    count = len(list(perms))  # Count the number of permutations\n\n    return count\n\nans = solution()"
    ],
    "dbcf24f4b4254940a364df67ea2a66dd": [
        "def solution():\n    remaining_fraction = 5 / 9\n    given_away = 440\n    # Let the original number of bottle caps be x.\n    # According to the problem, x - 440 = 5/9 * x\n    # So, x = (440) / (1 - 5/9)\n    original = given_away / (1 - remaining_fraction)\n    return int(original)\n\nans = solution()"
    ],
    "a6f199354188491987e033f7760fc3d5": [
        "def solution():\n    perimeter = 2 * (144 + 204)  # Calculate the perimeter of the field\n    wheat_count_with_corners = 116 - 4   # Subtract the four corners which already have wheat planted\n    distance_between_wheat = perimeter / wheat_count_with_corners\n\n    return distance_between_wheat\n\nans = solution()"
    ],
    "3722f385e5304408b4bd51d4538ed104": [
        "def solution():\n    multiple = 35\n    while True:\n        if sum(map(int, str(multiple))) == 35 and str(multiple).endswith('35'):\n            return multiple\n        multiple += 35\n\nans = solution()"
    ],
    "ee9f3d0764634811a0757f003abad19d": [
        "def solution():\n    heights = [102, 98, 120, 80]\n    average_height = sum(heights) / len(heights)\n    return average_height\n\nans = solution()"
    ],
    "2c1659a425074c80b8d88dda965c59d5": [
        "def solution():\n    for rainy_days in range(9):\n        sunny_days = 8 - rainy_days\n        if (rainy_days * 12 + sunny_days * 20) == 112:\n            return rainy_days\n\nans = solution()"
    ],
    "c53620b9ca634a889e36b3bf16163ca2": [
        "def solution():\n    # Define the costs in pence\n    cost_single = 15\n    cost_double = 28\n    cost_pack = 60\n    \n    # Initialize the minimum cost to a high number (more than the highest possible cost)\n    min_cost = 17 * cost_single\n    \n    # Use three loops to check all combinations of single, double, and pack purchases\n    for num_packs in range(0, 17//5 + 1):\n        for num_doubles in range(0, (17 - num_packs*5)//2 + 1):\n            num_singles = 17 - num_packs*5 - num_doubles*2\n            total_cost = num_packs*cost_pack + num_doubles*cost_double + num_singles*cost_single\n            if total_cost < min_cost:\n                min_cost = total_cost\n                \n    # Convert the answer to pounds\n    ans = min_cost / 100\n    return ans\n\nans = solution()"
    ],
    "a0d71a6e29644023a0cc17a608bc01dc": [
        "def solution():\n    # For a knockout tournament format between four people, each match eliminates one person.\n    # Since we start with 4 people, we need to eliminate 3 to find the winner.\n    # Thus, a minimum of 3 rounds must be played to determine a winner.\n    ans = 3\n    return ans\n\nans = solution()"
    ],
    "f994d8dfd7f44217b9637c5e8ba447d8": [
        "def solution():\n    total_first_question = 10\n    total_second_question = 15\n    both_questions = 7\n\n    only_one_question = (total_first_question - both_questions) + (total_second_question - both_questions)\n    return only_one_question\n\nans = solution()"
    ],
    "daccc8a42fc0479db52cec10235601e6": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime('4 April', '%d %B')\n    end_date = datetime.strptime('18 May', '%d %B')\n    number_of_days = (end_date - start_date).days + 1  # Including the end date\n\n    return number_of_days\n\nans = solution()"
    ],
    "3059ea77d08247578ee3a70a3f475405": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n    \n    # If Rachel gives Alice 10 pieces of candy, they have the same amount\n    equation1 = Eq(rachel - 10, alice + 10)\n\n    # After eating 8 pieces each, Rachel has 3 times as much as Alice\n    equation2 = Eq((rachel - 8) / 3, alice - 8)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    # Total amount of candy originally\n    total_candy = solutions[rachel] + solutions[alice]\n    \n    return int(total_candy)\n\nans = solution()"
    ],
    "4f3b48792a094028b1bc267e22a30835": [
        "def solution():\n    speed = 42             # Speed of the train in meters per second\n    time = 5               # Time in seconds to pass the tree\n\n    length = speed * time  # Distance formula: distance = speed * time\n\n    return length\n\nans = solution()"
    ],
    "47562186606a4d038d9527452b08ffc2": [
        "def solution():\n    fib_sequence = [1, 1, 2, 3, 5, 8, 13, 21]\n    next_fib = fib_sequence[-1] + fib_sequence[-2]\n    return next_fib\n\nans = solution()"
    ],
    "bfacb76c25624bfc8d5d2c06215023ad": [
        "def solution():\n    # Storing the original expression to be evaluated\n    expression = \"285+15/5-2\"\n\n    # Creating a list of different expressions by adding one or two pairs of brackets\n    expressions_with_brackets = [\n        f\"({expression})\",\n        f\"(285+15)/5-2\",\n        f\"285+(15/5)-2\",\n        f\"285+15/(5-2)\",\n        f\"285+((15/5)-2)\",\n        f\"(285+15)/(5-2)\",\n        f\"(285+15/5)-2\",\n        f\"285+(15/5-2)\",\n        f\"285+(15/(5-2))\",\n        f\"(285+15/5-2)\"\n    ]\n\n    # Evaluate the expressions and store the unique results\n    results = set()\n    for exp in expressions_with_brackets:\n        results.add(eval(exp))\n\n    # Count the unique results\n    ans = len(results)\n\n    return ans\n\nans = solution()"
    ],
    "5907fd55c3fc43edb065e669513c11e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    first_hour, second_hour = symbols('first_hour second_hour')\n\n    # total mushrooms gathered equation\n    equation1 = Eq(first_hour + second_hour, 40)\n    # if he gathered 26 more in the first hour, they would be equal\n    equation2 = Eq(first_hour + 26, second_hour)\n\n    solutions = solve((equation1, equation2), (first_hour, second_hour))\n\n    return solutions[second_hour]\n\nans = solution()"
    ],
    "5e3f58e8aa7b463281a06313c58c9dfc": [
        "def solution():\n    towel_price = 10\n    brush_price = 3\n    total_spent = 59\n    \n    max_brush_spent = 10\n    max_brushes = max_brush_spent // brush_price\n\n    # Find the number of brushes Bud can buy without exceeding £10 on brushes\n    for brushes in range(max_brushes, -1, -1):\n        if (total_spent - (brushes * brush_price)) % towel_price == 0:\n            return brushes\n\nans = solution()"
    ],
    "f60e137f7250477d8b286d3f212c854b": [
        "def solution():\n    # This is an arithmetic sequence problem where we know the sum of the sequence (35 teddy bears)\n    # and the number of terms (5 days). We can let the number of teddy bears made on the first day be x.\n    # Then the sequence of teddy bears made each day is: x, x+2, x+4, x+6, x+8.\n    # The sum of an arithmetic sequence is (first_term + last_term) * number_of_terms / 2.\n    # We solve for x using the formula for the sum of an arithmetic sequence.\n\n    # Let the number of bears made on the first day be x\n    # The sum of the arithmetic sequence is given by:\n    # sum = (first_term + last_term) * number_of_terms / 2\n    # 35 = (x + (x + 2*4)) * 5 / 2\n    # Multiply both sides by 2\n    # 70 = 5x + 20\n    # Subtract 20 from both sides\n    # 50 = 5x\n    # Divide both sides by 5\n    # x = 10\n\n    # The fifth day would be the first day + 4 days * 2 bears more each day\n    # fifth_day_bears = x + 4 * 2\n    fifth_day_bears = 10 + 4 * 2\n\n    return fifth_day_bears\n\nans = solution()"
    ],
    "1f65bc2d548c462284458547726c98be": [
        "def solution():\n    result_number = 71\n    initial_number = (result_number - 8) / 7\n    return initial_number\n\nans = solution()"
    ],
    "2a082a4e041f4b3e973245a4c33b3b27": [
        "from fractions import Fraction\n\ndef solution():\n    return Fraction('0.49').limit_denominator()\n\nans = solution()"
    ],
    "2032d412937a4167a615ecb8aa60b3ea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rick, morty = symbols('rick morty')\n    \n    equation1 = Eq(rick - morty, 70)\n    equation2 = Eq(rick - 70, morty + 20)\n    equation3 = Eq(rick, 9 * morty)\n\n    solutions = solve((equation1, equation2, equation3), (rick, morty))\n\n    return solutions[rick]\n\nans = solution()"
    ],
    "c762956fba3241bd967d57b33577e2de": [
        "def solution():\n    from itertools import permutations\n\n    digits = ['0', '1', '8']\n    count = 0\n    for perm in permutations(digits, 3):\n        if perm[0] != '0':  # the first digit should not be 0 for a three-digit number\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "a329051d839b463a826c9d78e15a0b08": [
        "def solution():\n    max_other_colors = 9 + 7  # pink + grey\n    draw_to_ensure_blue = max_other_colors + 1\n    \n    return draw_to_ensure_blue\n\nans = solution()"
    ],
    "66a11fd054514f65b3baf9ede59874a5": [
        "def solution():\n    ans = 262 + 8\n    return ans\n\nans = solution()"
    ],
    "49922fe7ff9a40c38d907ed0e51522ca": [
        "def solution():\n    miles_per_day = 23\n    days_in_two_weeks = 14\n\n    total_miles = miles_per_day * days_in_two_weeks\n\n    return total_miles\n\nans = solution()"
    ],
    "f9992ec9b0a34d969a70763f33c68a29": [
        "def solution():\n    tax_rate = 7.5 / 100\n    tax_paid = 30\n\n    price_of_computer = tax_paid / tax_rate\n\n    return price_of_computer\n\nans = solution()"
    ],
    "39ac38c32dc74df58ea6b0d18c06ad13": [
        "from itertools import permutations\nfrom math import gcd\n\ndef solution():\n    count = 0\n    for perm in permutations(range(1, 9)):\n        if all(gcd(perm[i], perm[i + 1]) == 1 for i in range(len(perm) - 1)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "aa18065f01ed471dbddb2b83716b2ed7": [
        "def solution():\n    percentage = (3/10) / (6/7) * 100\n    return percentage\n\nans = solution()"
    ],
    "1db0cce1e16144579673d8e8a9fc0654": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    \n    # equation 1: initial difference between boys and girls\n    equation1 = Eq(boys, girls - 30)\n    # equation 2: number of boys and girls left are equal after recess\n    equation2 = Eq(boys - (3/5)*boys, girls - (5/8)*girls)\n    \n    # solve the equations\n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    # we need the number of boys\n    return solutions[boys]\n\nans = solution()"
    ],
    "304401f32f204704929d05f5f2f6f8b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of frogs and dragonflies before the magic show\n    frogs_before, dragonflies_before = symbols('frogs_before dragonflies_before')\n\n    # Given that the frogs are 9 more than the dragonflies before the magic show\n    equation1 = Eq(frogs_before, dragonflies_before + 9)\n\n    # After the magic show, there are 11 frogs and 10 dragonflies\n    # Since the total amount of animals doesn't change, the sum before and after the show is the same\n    equation2 = Eq(frogs_before + dragonflies_before, 11 + 10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (frogs_before, dragonflies_before))\n\n    return solutions[frogs_before]\n\nans = solution()"
    ],
    "7c10a4083da5483c963882fa31bda8ad": [
        "def solution():\n    numbers = [9, 19, 29, 39, 49, 59]\n    ans = 300 - sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "3e007fd230a249ff8d05a19fcfe583ba": [
        "def solution():\n    expressions = [\n        '(285+15)/5-2', '285+15/(5-2)', '(285+15)/(5-2)',\n        '285+(15/5)-2', '285+(15/5-2)', '(285+15/5)-2',\n        '285+15/(5-2)', '285+(15/(5-2))'\n    ]\n    results = set()\n    for expr in expressions:\n        results.add(eval(expr))\n    return len(results)\n\nans = solution()"
    ],
    "d17c4969cf134fab95adbf60e4d9650c": [
        "def solution():\n    amy = 26\n    john = 8\n    s = (amy - john) // 2\n    return s\n\nans = solution()"
    ],
    "e7ddf473a2ae4816b3668ad9956ebcfa": [
        "def solution():\n    for i in range(24):\n        if (24 - i) / 4 == 4:\n            return i\n\nans = solution()"
    ],
    "c475b1643de744428b44276a9212a842": [
        "def solution():\n    # rates of working for A, B, and C\n    a_plus_b = 1/3\n    b_plus_c = 1/4\n    a_plus_c = 1/8\n\n    # sum of individual rates\n    sum_rates = a_plus_b + b_plus_c + a_plus_c\n\n    # since (A+B+C+A+B+C) then to find the rate of (A+B+C), we divide sum_rates by 2\n    rate_all_three = sum_rates / 2\n\n    # Time taken by all three workers is the reciprocal of their combined rate\n    time_all_three = 1 / rate_all_three\n\n    return time_all_three\n\nans = solution()"
    ],
    "d188d39b891542928d1912e7274a2caa": [
        "def solution():\n    total = 0\n    for i in range(1, 101):\n        if i % 2 == 0:  # Adding even numbers\n            total += i\n        else:           # Subtracting odd numbers\n            total -= i\n    return total\n\nans = solution()"
    ],
    "eb34430f7cb249a8a572783eee511d5a": [
        "def solution():\n    jack_cards = 42\n    tom_cards = 38\n    james_cards = 3 * (jack_cards + tom_cards)\n    \n    return james_cards\n\nans = solution()"
    ],
    "d7ded10e6b6742babab86ac9a55feb15": [
        "def solution():\n    ans = 11.38 / 100\n    return ans\n\nans = solution()"
    ],
    "142a0e7cf7264398809cd19740d822d4": [
        "def solution():\n    return 9678 * 8\n\nans = solution()"
    ],
    "5474f73e5ab6431890df2e54e821b742": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # x is the amount of 15% sugar water needed\n    x = symbols('x')\n\n    # Equation representing the total sugar\n    equation = Eq(2 * 0.45 + x * 0.15, (2 + x) * 0.25)\n\n    # Solve the equation\n    x_value = solve(equation, x)\n\n    return x_value[0]\n\nans = solution()"
    ],
    "063df5600f0440a196ad7fccf9a7bf8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    johnson, vicky = symbols('johnson vicky')\n\n    equation1 = Eq(johnson + vicky, 48)\n    equation2 = Eq(vicky + 8, johnson - 2)\n\n    solutions = solve((equation1, equation2), (johnson, vicky))\n\n    return solutions[johnson]\n\nans = solution()"
    ],
    "300d9dec8c7842cfa4010c28ded862c2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of candies and y be the number of kids.\n    x, y = symbols('x y')\n\n    # If every kid eats 18 candies, then 12 more candies are needed.\n    equation1 = Eq(x, y * 18 - 12)\n\n    # If every kid eats 15 candies, the candies are just enough to be distributed to 2 more kids.\n    equation2 = Eq(x, (y + 2) * 15)\n\n    # Solving the simultaneous equations for x and y.\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "7b23b760c2484da8af4bc6eead1035fc": [
        "def solution():\n    boys_to_girls_ratio = 3 / 2\n    total_boys = 42\n    girls_per_boy = 1 / boys_to_girls_ratio\n\n    total_girls = total_boys * girls_per_boy\n    return int(total_girls)\n\nans = solution()"
    ],
    "0774e88f23d347fc960a7df67aa5cea5": [
        "def solution():\n    # Since we're only interested in the last five digits,\n    # we can work modulo 100000 (since 100000 is 10^5, which will give us the last 5 digits)\n    mod = 100000\n    \n    S = 0\n    term = 2\n    for _ in range(2017):\n        S += term\n        S %= mod  # Only keep the last five digits\n        term = term * 10 + 2  # Append a '2' to the last term to get the next\n    \n    # S will be the sum, and because of modulo 100000, we have the last five digits\n    return S\n\nans = solution()"
    ],
    "0cfb180ff80343978b552cedc1149839": [
        "def solution():\n    result = 77\n    added_number = 6\n    multiplied_by = 7\n    \n    original_number = (result / multiplied_by) - added_number\n    return int(original_number)\n\nans = solution()"
    ],
    "7e9903ea9c5d4ad4b4d9e47668802818": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, eugene = symbols('david eugene')\n    # David has thrice as many cupcakes as Eugene.\n    equation1 = Eq(david, 3 * eugene)\n    # David has 14 more cupcakes than Eugene.\n    equation2 = Eq(david, eugene + 14)\n\n    # Solve the simultaneous equations for david and eugene.\n    solutions = solve((equation1, equation2), (david, eugene))\n\n    # Calculate the total number of cupcakes both boys have.\n    total_cupcakes = solutions[david] + solutions[eugene]\n    return total_cupcakes\n\nans = solution()"
    ],
    "f1a2fc61d2954912aabcdce67bec8fd1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the initial amounts of cookies Sam and Tim had\n    sam, tim = symbols('sam tim')\n    \n    # The total amount of cookies before any actions\n    total_cookies_eq = Eq(sam + tim, 1170)\n    \n    # After Sam ate 1/4 of her cookies\n    sam_after_eating = sam - (1/4) * sam\n    \n    # After Tim bought 1/5 more cookies\n    tim_after_buying = tim + (1/5) * tim\n    \n    # Sam has 663 fewer cookies than Tim after the actions\n    sam_tim_difference_eq = Eq(tim_after_buying - sam_after_eating, 663)\n    \n    # Solving the system of equations \n    solutions = solve((total_cookies_eq, sam_tim_difference_eq), (sam, tim))\n    \n    # Amount of cookies Sam ate\n    sam_cookies_eaten = (1/4) * solutions[sam]\n    \n    return int(sam_cookies_eaten)\n\nans = solution()"
    ],
    "699981dcd6d84d42b6e018723ba6a619": [
        "def solution():\n    ans = 297 + 196 + 388 + 199\n    return ans\n\nans = solution()"
    ],
    "3d69ea36244c47f49f012029d94f587c": [
        "def solution():\n    total_cost = 11.4\n    total_kilograms = 0.6\n    cost_per_kilogram = total_cost / total_kilograms\n    return cost_per_kilogram\n\nans = solution()"
    ],
    "b4f91c464064460aa19ddf1c6a62ab91": [
        "def solution():\n    daily_pick = 24 / 6\n    total_pick = daily_pick * 8\n    return total_pick\n\nans = solution()"
    ],
    "a02bf655141845c2bd2c46d349316684": [
        "def solution():\n    for number in range(200, 301):\n        if all(number % x == 1 for x in [2, 3, 4, 6]) and number % 7 == 0:\n            return number\n\nans = solution()"
    ],
    "5bd506abd39a478abeb0aa9d9fdb559b": [
        "def solution():\n    sally_initial = 40\n    ting_initial = 32\n\n    # Let x be the number of stamps Sally gives to Ting\n    # After giving x stamps, Sally has (sally_initial - x) stamps\n    # and Ting has (ting_initial + x) stamps\n    # The ratio of Sally's to Ting's stamps is 1:2\n    for x in range(1, sally_initial):\n        if (sally_initial - x) * 2 == (ting_initial + x):\n            ting_final = ting_initial + x\n            break\n\n    return ting_final\n\nans = solution()"
    ],
    "c9845a2160b54fd095573f962d57e562": [
        "def solution():\n    # Jerry's rate per hour\n    jerry_rate = 1 / 18\n    \n    # Combined rate of Tom and Jerry per hour\n    combined_rate = 1 / 6\n    \n    # Tom's rate per hour\n    tom_rate = combined_rate - jerry_rate\n    \n    # Time taken by Tom to do the job by himself\n    tom_time = 1 / tom_rate\n    \n    return tom_time\n\nans = solution()"
    ],
    "7082213a798d483d975ec38c9264a87a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the time (in minutes) David walks at the increased speed\n    t = symbols('t')\n\n    # The distance David walks at the first speed: 150 m/min * 10 min\n    distance_first_speed = 150 * 10\n\n    # The distance David walks at the increased speed: (150 + 50) m/min * t\n    distance_second_speed = (150 + 50) * t\n\n    # Total distance equation\n    total_distance_eq = Eq(distance_first_speed + distance_second_speed, 3700)\n\n    # Solve for t\n    time_second_speed = solve(total_distance_eq, t)[0]\n\n    # Total time spent walking in the park is the sum of time spent walking at the first and second speeds\n    total_time = 10 + time_second_speed\n\n    return total_time\n\nans = solution()"
    ],
    "e308e1fd22e34cdb9709c55c86942efe": [
        "def solution():\n    sissy_candies = 9\n    lily_candies = 7\n    total_candies = sissy_candies + lily_candies\n    return total_candies\n\nans = solution()"
    ],
    "3626f191924141a1b2eafb54a9e067f3": [
        "def solution():\n    # Given values\n    packet_price = 4\n    total_money = 20\n    sweets_per_packet = 8\n    bonus_sweets_condition = 2  # one free sweet for every two packets bought\n\n    # Calculate the maximum packets that can be bought with $20\n    max_packets_bought = total_money // packet_price\n\n    # Calculate the number of free sweets based on the condition\n    free_sweets = max_packets_bought // bonus_sweets_condition\n\n    # Calculate the maximum number of sweets\n    max_sweets = (max_packets_bought * sweets_per_packet) + free_sweets\n\n    return max_sweets\n\nans = solution()"
    ],
    "24fc3628e5b54a6b862cebd30089e10d": [
        "def solution():\n    total_candy = 88\n    children = 8\n\n    # Distribute 1 candy to each child initially\n    total_candy -= children\n\n    # Distribute candy such that each child gets different amount starting from 1\n    candies = [i for i in range(1, children + 1)]\n    \n    # Incrementally give one more candy to the child with the highest amount until all candies are given out\n    while total_candy > 0:\n        candies[-1] += 1\n        total_candy -= 1\n        # Reshuffle to maintain the increasing order if needed\n        candies.sort()\n        \n    return candies[-1]\n\nans = solution()"
    ],
    "02ae9d804ee04428807ccf0347735e1f": [
        "def solution():\n    # Initial counters\n    pink = 5\n    purple = 7\n    orange = 8\n\n    # Initial total counters\n    total_counters = pink + purple + orange\n\n    # Initial probability of choosing a pink counter\n    initial_probability = pink / total_counters\n\n    # New probability, which is double the initial probability\n    new_probability = 2 * initial_probability\n\n    # Let x be the number of extra counters to add\n    # The probability after adding x extra counters will be pink / (total_counters + x)\n    # Set the new probability equal to the desired probability\n    # Solve for x\n    \n    # pink / (total_counters + x) = new_probability\n    # pink = new_probability * (total_counters + x)\n    # x = (pink / new_probability) - total_counters\n\n    x = (pink / new_probability) - total_counters\n\n    return int(x)\n\nans = solution()"
    ],
    "6ff1aeeafc744e33a64e02e90286d5c2": [
        "def solution():\n    decimal_number = 0.4 - (1/4)\n    return decimal_number\n\nans = solution()"
    ],
    "3afd6466bf0841adb2f6d6bd84bf3bad": [
        "from math import factorial\n\ndef solution():\n    # Calculate 16 factorial\n    fact = factorial(16)\n    # Convert to string to count trailing zeroes\n    fact_str = str(fact)\n    # Find the number of consecutive zeros at the end\n    return len(fact_str) - len(fact_str.rstrip('0'))\n\nans = solution()"
    ],
    "09a7409bcc7b41bab933d472b6cf9c72": [
        "def solution():\n    # Maximum number of socks to be taken out without guaranteeing at least 2 pairs of the same color:\n    # Taking maximum of one color plus one of the others guarantees at least one pair\n    # 4 (black) + 4 (grey) + 1 (either of the remaining) = 9 socks\n    max_without_pairs = (4 - 1) + (4 - 1) + 1\n\n    # Since taking out 9 socks we only guarantee 1 pair.\n    # We need to take out one more to guarantee at least 2 pairs of the same color.\n    socks_needed_for_two_pairs = max_without_pairs + 1\n\n    return socks_needed_for_two_pairs\n\nans = solution()"
    ],
    "ec10bd49f8c6457cb449008b7df6d3b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cupcakes, muffins = symbols('cupcakes muffins')\n\n    # After selling, muffins left is twice the cupcakes left\n    equation = Eq(muffins - 12, 2 * (cupcakes - 60))\n\n    # Demi had an equal number of cupcakes and muffins at first\n    initial_condition = Eq(cupcakes, muffins)\n\n    solutions = solve((equation, initial_condition), (cupcakes, muffins))\n\n    # Total number at first is the sum of cupcakes and muffins\n    total_initial = solutions[cupcakes] + solutions[muffins]\n\n    return total_initial\n\nans = solution()"
    ],
    "e7f93b20fa1949a5b96d163190fe511f": [
        "def solution():\n    # Let's denote the initial number of girls as G and boys as B.\n    # According to the problem, initially there were 40% (or 0.4) more boys than girls, so B = G + 0.4G\n    # After 24 boys and 24 girls left the gathering, there were 50% (or 0.5) more boys than girls, so (B - 24) = (G - 24) + 0.5(G - 24)\n    \n    # We have two equations now:\n    # B = G + 0.4G -> equation 1\n    # (B - 24) = (G - 24) + 0.5(G - 24) -> equation 2\n    \n    # We will solve these two equations to find B and G.\n    \n    # From equation 1, we get B = 1.4G\n    # Substituting B from equation 1 into equation 2, we get:\n    # (1.4G - 24) = (G - 24) + 0.5(G - 24)\n    # Let's solve for G:\n    \n    G = symbols('G')  # We are declaring G as a symbol\n    equation = Eq(1.4 * G - 24, (G - 24) + 0.5 * (G - 24))  # Representing equation 2\n    \n    # Now we solve the equation\n    solution = solve(equation, G)\n    \n    # Once we get G, we can find B using equation 1:\n    B = 1.4 * solution[0]\n    \n    return B\n\nans = solution()"
    ],
    "424f5f08f14e449d86908c4063ea4d54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5 * x + 7, 47)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "28ed05faea8a41e59403eb56b72c9a55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    helen_daily, george_daily = symbols('helen_daily george_daily')\n\n    # George receives $3 more pocket money than Helen every day.\n    equation1 = Eq(george_daily, helen_daily + 3)\n\n    # Each of them spends $5 a day and saves the rest.\n    # Savings = Daily pocket money - Daily expenditure\n    helen_savings = helen_daily - 5\n    george_savings = george_daily - 5\n\n    # After some time, when Helen saves $60 in total, George would have saved $90 more than Helen.\n    # Helen saves total $60\n    # George saves total $60 + $90\n    equation2 = Eq(george_savings - helen_savings, 90)\n\n    # Since Helen has saved $60 in total, we find the number of days it took to save that much.\n    days_to_save_60 = 60 / helen_savings\n\n    # The additional money George saves during that same period is $90.\n    # We know that george_savings * days_to_save_60 - 60 = 90\n    equation3 = Eq(george_savings * days_to_save_60, 60 + 90)\n\n    solutions = solve((equation1, equation2, equation3), (helen_daily, george_daily))\n\n    return solutions[helen_daily]\n\nans = solution()"
    ],
    "d27388e49bb147658b5c5f6726146dbd": [
        "def solution():\n    time_shanghai_to_LA = 12.25  # hours\n    time_LA_to_shanghai = time_shanghai_to_LA + 1.5  # additional 90 minutes converted to hours\n\n    total_time_round_trip = time_shanghai_to_LA + time_LA_to_shanghai\n\n    return total_time_round_trip\n\nans = solution()"
    ],
    "460949f85e3c4effbfebde69b6a70325": [
        "def solution():\n    ans = 278 + 127\n    return ans\n\nans = solution()"
    ],
    "68de1a3c2c7a42e5878f6678167e988b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Initialize symbols for the amounts of money Eddi and Wiya have\n    eddi, wiya = symbols('eddi wiya')\n\n    # Equation based on initial ratio (3:2)\n    initial_ratio_eq = Eq(eddi/wiya, 3/2)\n    \n    # Equation based on the new ratio after Eddi is given $4 (8:5)\n    new_ratio_eq = Eq((eddi + 4)/wiya, 8/5)\n    \n    # Solve the equations\n    solutions = solve((initial_ratio_eq, new_ratio_eq), (eddi, wiya))\n    \n    return solutions[wiya]\n\nans = solution()"
    ],
    "4432e80fba244f3683780a9b58ec36db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for the common difference\n    d = symbols('d')\n    a1 = symbols('a1')  # First term of the arithmetic sequence\n\n    # According to the problem, we set up the equations\n    eq1 = Eq(a1 + 8*d, a1 + 14*d + 18)\n    eq2 = Eq(a1 + 19*d + a1 + 11*d, 88)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (a1, d))\n\n    # Calculate the 32nd term using the common difference and the first term\n    term_32 = solutions[a1] + 31 * solutions[d]\n\n    return term_32\n\nans = solution()"
    ],
    "76b97ba68b034e2aabd4b14679196416": [
        "def solution():\n    # Calculate the sum of numbers from 1 to 30 using the arithmetic series sum formula\n    sum_to_30 = (30 * (30 + 1)) // 2\n    # Calculate the sum of numbers from 1 to 29 using the arithmetic series sum formula\n    sum_to_29 = (29 * (29 + 1)) // 2\n    # The total sum is the sum of both series\n    ans = sum_to_30 + sum_to_29\n    return ans\n\nans = solution()"
    ],
    "47b5be5fc2a54717be3e247384b899b4": [
        "def solution():\n    total_students = 37\n    sport_class = 18\n    reading_class = 22\n    \n    both_classes = sport_class + reading_class - total_students\n    \n    return both_classes\n\nans = solution()"
    ],
    "51d10a94ff2b458f8e10c3ad1c546dd9": [
        "def solution():\n    # Distance traveled in the first 2 hours at 40 km/h\n    distance_first_part = 2 * 40\n\n    # Distance traveled in the remaining part at 70 km/h\n    distance_remaining_part = 280\n\n    # Total distance traveled\n    total_distance = distance_first_part + distance_remaining_part\n\n    # Time taken to travel the remaining distance at 70 km/h\n    time_remaining_part = distance_remaining_part / 70\n\n    # Total time taken for the whole trip\n    total_time = 2 + time_remaining_part\n\n    # Average speed for the whole trip\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "f1b52139fff84b708e70c8798718411d": [
        "def solution():\n    total_penpals = 11\n    total_pages = 38\n    for three_page_letters in range(total_penpals + 1):\n        four_page_letters = total_penpals - three_page_letters\n        if 3 * three_page_letters + 4 * four_page_letters == total_pages:\n            return three_page_letters\n\nans = solution()"
    ],
    "3934fba87a6f49588fd973f95f1b42fa": [
        "def solution():\n    minutes = 180\n    hours = minutes / 60\n    return hours\n\nans = solution()"
    ],
    "8270a7ab11474b5c9b8d4b50e94ccec5": [
        "def solution():\n    number = 768354\n    place_value_of_8 = (number // 10 ** (len(str(number)) - (str(number).index('8') + 1))) % 10 * 10 ** (len(str(number)) - (str(number).index('8') + 1))\n\n    return place_value_of_8\n\nans = solution()"
    ],
    "f765b179fd664d7283eb3748010a8192": [
        "def solution():\n    # Counting all numbers from 100 to 999 inclusive\n    total_count = 0\n    # Counting numbers with exactly two sevens\n    two_sevens = 0\n    # Counting numbers with exactly three sevens\n    three_sevens = 0\n\n    for i in range(1, 10):\n        for j in range(0, 10):\n            for k in range(0, 10):\n                # Form the number from its digits\n                number = str(i) + str(j) + str(k)\n                # Count the number if it has at least two sevens\n                if number.count('7') >= 2:\n                    total_count += 1\n                    # If it has exactly two sevens increment the specific counter\n                    if number.count('7') == 2:\n                        two_sevens += 1\n                    # If it has three sevens increment the specific counter\n                    elif number.count('7') == 3:\n                        three_sevens += 1\n\n    # The number with three sevens has been counted thrice in two_sevens hence subtracting twice\n    ans = total_count - (three_sevens * 2)\n    return ans\n\nans = solution()"
    ],
    "18d62414fcc14256a14001acd25ead4d": [
        "from math import lcm\n\ndef solution():\n    days_in_common = lcm(25, 20)\n\n    next_start_day = 1 + days_in_common\n    \n    month_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    current_day = 1\n    current_month = 3  # March\n    \n    while next_start_day > month_days[current_month - 1]:\n        next_start_day -= month_days[current_month - 1]\n        current_month += 1\n        if current_month > 12:  # Wrap around to January\n            current_month = 1\n    \n    ans = (next_start_day, current_month)\n    return ans\n\nans = solution()"
    ],
    "7ed12a6fbb2b477488bf0f46e7aa015e": [
        "from math import factorial\n\ndef solution():\n    # Total Performances (Singing and Dancing)\n    total_singing = 6\n    total_dancing = 4\n    \n    # Calculate the permutations for the singing performances\n    singing_permutations = factorial(total_singing)\n    \n    # Calculate the number of slots available for dancing performances\n    # Given there must be at least one singing performance between two dancing performances\n    # We can have a dancing performance before the first singing, between each singing and after the last singing\n    # So we have total_singing+1 available positions for the total_dancing performances\n    slots_for_dancing = total_singing + 1\n    \n    # The number of ways to choose slots from the available positions for dancing\n    # We use combinations here, as the order in which we choose the slots does not matter\n    dancing_combinations = factorial(slots_for_dancing) / (factorial(total_dancing) * factorial(slots_for_dancing - total_dancing))\n    \n    # The final answer is the combination of choosing slots for dancing performances\n    # multiplied by the permutations of singing performances\n    ans = int(singing_permutations * dancing_combinations)\n    \n    return ans\n\nans = solution()"
    ],
    "205d168df66c45e39d3bf4f711e8f6fc": [
        "def solution():\n    A = 1\n    a1 = A - 1/2\n    a2 = A - 2/3\n    a3 = A - 7/8\n    a4 = A - 29/30\n    a5 = A - 139/144\n    a6 = A - 839/840\n    a0 = A - (a1 + a2 + a3 + a4 + a5 + a6)\n\n    # Now we simplify the expression for a0\n    from fractions import Fraction\n    a0 = Fraction(a0).limit_denominator()  # This will put a0 in its simplest form\n\n    m = a0.numerator\n    n = a0.denominator\n\n    return m + n\n\nans = solution()"
    ],
    "88e7bc9feb964b91bb3e5ab4e020c19d": [
        "def solution():\n    # Given hints from the teacher's answers to Tom's guesses\n    hints = [\n        (\"8765\", \"two correct but wrong positions\"),\n        (\"1023\", \"two correct but wrong positions\"),\n        (\"8642\", \"two correct and right positions\"),\n        (\"5430\", \"all wrong\"),\n    ]\n\n    # Based on hint 4 where all digits are wrong, we can ignore these digits.\n    excluded_digits = set(\"5430\")\n\n    # Possible digits for each position based on hints 1 and 2\n    possible_digits = [set(\"0126789\") - excluded_digits for _ in range(4)]\n\n    # For hints 1 and 2, identify the digits that are correct but in wrong positions\n    for guess, hint in hints[:2]:\n        # Exclude digits that are in the same position\n        for i, digit in enumerate(guess):\n            if digit in possible_digits[i]:\n                possible_digits[i].remove(digit)\n\n    # Based on hint 3, include only the correct digits in correct positions\n    for i, digit in enumerate(\"8642\"):\n        if hint[0] == \"8642\" and hint[1] == \"two correct and right positions\":\n            possible_digits[i] = set(digit)\n\n    # Now, possible_digits contains only the possible digits for each position\n    # There should be only one digit per position left, find and construct the number\n    number = ''.join([list(digits)[0] for digits in possible_digits])\n\n    return int(number)\n\nans = solution()"
    ],
    "467efc939dfd4170ba4658e1f6f2cb7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    mistake_eq = Eq(x/4 - 25, 2021)\n    mistake_sol = solve(mistake_eq, x)\n\n    correct_answer = mistake_sol[0] * 4 + 25\n\n    return correct_answer\n\nans = solution()"
    ],
    "aeba54327d714c2483bb9b0bcf5e84a1": [
        "def solution():\n    from sympy import primefactors, factorint\n\n    numbers = [75, 56, 12, 105]\n    count_2 = 0\n    count_5 = 0\n    \n    for number in numbers:\n        factors = factorint(number)\n        count_2 += factors.get(2, 0)\n        count_5 += factors.get(5, 0)\n    \n    ans = min(count_2, count_5)\n    return ans\n\nans = solution()"
    ],
    "91a7b96128014a318c03b1434e2ae770": [
        "def solution():\n    # Let x be the number of books Donna has, then Chloe has 4*x books.\n    # According to the problem, Chloe has 816 more books than Donna, so we have:\n    # 4*x - x = 816\n    # Solving for x:\n    x = 816 // 3  # Divide both sides by 3 to solve for x\n    \n    return x\n\nans = solution()"
    ],
    "8e0b24a6852b4ad99f69ab3e1d9f46fa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variable for the tilde symbol (assuming it's a single digit)\n    tilde = symbols('tilde')\n    \n    # Since the tilde represents a single digit, it has to be in the range [0, 9]\n    possible_values = list(range(10))\n    \n    # Set up the equation given that ~~~~ is a repeated digit, making it 1111*tilde\n    equation = Eq((1111*tilde + 4)/8, 3)\n    \n    # Solve the equation for the tilde symbol\n    solution = solve(equation, tilde)\n    \n    # Filter the solution for values that are single-digit integers\n    filtered_solution = [s for s in solution if s.is_integer and (s in possible_values)]\n    \n    # Assuming the question implies a unique single-digit solution\n    return filtered_solution[0]\n\nans = solution()"
    ],
    "a7a7be210f714db38b6463860e92ad08": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    adults, children, boys, girls = symbols('adults children boys girls')\n    \n    # Given conditions\n    equation1 = Eq(adults, 3 * children)\n    equation2 = Eq(boys, 2 * girls)\n    equation3 = Eq(adults - girls, 176)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (adults, children, boys, girls))\n    \n    # Calculate the total people at the concert\n    total_people = solutions[adults] + solutions[children] + solutions[boys] + solutions[girls]\n    \n    return total_people\n\nans = solution()"
    ],
    "cbe6883d9f0a4c368c4018abfcc1fd6b": [
        "def solution():\n    # Since we are only interested in the ones digit, we can consider the pattern of ones digits in powers of 9\n    # This pattern repeats every 10 powers, as 9^10 will have a ones digit of 9 and the pattern restarts.\n    # The pattern of ones digits for powers of 9 is: 9, 1, 9, 1, ... repeating every 2 powers.\n    # Since 99 is an odd number, the ones digit will be the same as the ones digit of 9^1\n    ones_digit = 9 ** 1\n    return ones_digit % 10\n\nans = solution()"
    ],
    "b5c92f2132ac4326b5a389ac237c0de3": [
        "def solution():\n    from sympy import isprime\n\n    for a in range(2, 193):\n        if isprime(a):\n            for b in range(2, 193):\n                if isprime(b) and 3 * a + 11 * b == 193:\n                    return a + b\n\nans = solution()"
    ],
    "8b43d11a50194a5c8d37dc13e3e6af0d": [
        "def solution():\n    for a in range(1, 10):  # 'a' cannot be 0 since it's the first digit of a two-digit number\n        for b in range(10):  # 'b' can be 0 through 9, as it is the second digit of a two-digit number\n            ab = 10 * a + b\n            if ab * 7 == 100 * a + b:\n                return ab\n\nans = solution()"
    ],
    "e9e75300f0b1494ead9f2af2a39646a1": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 4), (2, 5), (4, 7)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "f1a22796821b429bbf0ea5a8dc834049": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's assume 'b' is the price for one banana and 'a' for one apple.\n    b, a = symbols('b a')\n\n    # Ellie's equation: 2 bananas + 3 apples = 1.50\n    equation1 = Eq(2 * b + 3 * a, 1.50)\n\n    # Beth's equation: 3 bananas + 2 apples = 1.45\n    equation2 = Eq(3 * b + 2 * a, 1.45)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (b, a))\n\n    # Annabella's cost: 1 banana + 1 apple\n    annabella_cost = solutions[b] + solutions[a]\n\n    return annabella_cost\n\nans = solution()"
    ],
    "c4e92a647c2e4f7cafbf405c8fd96b68": [
        "def solution():\n    workers_initial = 3\n    houses_built_initial = 14\n    days_initial = 4\n\n    workers_final = 9\n    days_final = 2\n\n    # Calculate houses built per worker per day\n    houses_per_worker_per_day = houses_built_initial / (workers_initial * days_initial)\n\n    # Calculate the final number of houses that can be built by 9 workers in 2 days\n    houses_built_final = houses_per_worker_per_day * workers_final * days_final\n\n    return int(houses_built_final)\n\nans = solution()"
    ],
    "bafdbe5ffa744970a2060ec88389886a": [
        "from math import gcd\n\ndef solution():\n    return gcd(gcd(12, 15), 60)\n\nans = solution()"
    ],
    "955addf2cd5343a2baa0cdc99bc64d70": [
        "def solution():\n    ages = []\n    for bob in range(1, 29):\n        for rex in range(1, bob):  # Rex is younger than Bob\n            for fido in range(1, rex):  # Fido is younger than Rex and 10 years younger than Bob\n                if bob - fido == 10 and bob + rex + fido == 28:\n                    ages.append(bob * rex * fido)\n    ans = min(ages)\n    return ans\n\nans = solution()"
    ],
    "205b5f4fe40f4dc39f4c13a431c6c24e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_people = symbols('total_people')\n\n    children = (2/5) * total_people\n    women = (1/4) * total_people\n    men = total_people - children - women\n\n    equation = Eq(children, men + 20)\n\n    solved_people = solve(equation, total_people)\n\n    return solved_people[0]\n\nans = solution()"
    ],
    "7920f0e04e1c4bb58bdd059b9a8054a5": [
        "def solution():\n    # Equations based on the problem statement:\n    # Let x be the amount of money Adam has\n    # Let y be the cost of one ball\n    # 1. x - 5y = 15\n    # 2. x - 8y = -12\n    # We'll solve these two equations to find the value of y\n\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n\n    # Creating equations based on the given\n    equation1 = Eq(x - 5*y, 15)\n    equation2 = Eq(x - 8*y, -12)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "e572f57537f244f3960d8f1978f65baa": [
        "def solution():\n    max_sum = 0\n    for a in range(100, 1000):\n        if a % 75 != 0:  # A must be divisible by 75\n            continue\n        a_str = str(a)\n        if a_str[0] == a_str[1] or a_str[0] == a_str[2] or a_str[1] == a_str[2]:  # A has two equal digits\n            for b in range(a+1, 1000):  # B must be greater than A\n                if b % 75 != 0:  # B must also be divisible by 75\n                    continue\n                b_str = str(b)\n                if len(set(b_str)) < 3:  # B has two equal digits\n                    if a != b: # A and B are distinct\n                        max_sum = max(max_sum, a + b)\n    return max_sum\n\nans = solution()"
    ],
    "bb6949f9da5a4b318164ce5a0275f45c": [
        "def solution():\n    height_after_second_bounce = 9  # in cm\n    height_initial_drop = height_after_second_bounce * (3 ** 2)\n    \n    return height_initial_drop\n\nans = solution()"
    ],
    "f8d4595ae1c84386a2cdab88d9bf6c10": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (4, 7), (7, 8)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "9caf24529ff449c5bd52234a7d53d0f4": [
        "def solution():\n    # Perform the calculations within the complex fractions\n    numerator_first = (1 / 30) + (1 / 6)\n    denominator_first = 2 / 25\n    first_fraction = numerator_first / denominator_first\n\n    numerator_second = 2 - (2 / 3)\n    denominator_second = 8 / 3\n    second_fraction = numerator_second / denominator_second\n\n    # Add the results of the two fractions\n    ans = first_fraction + second_fraction\n\n    return ans\n\nans = solution()"
    ],
    "dd4d3217f6ad466eb4b512fa290b4fab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    xuanxuan, lingling, jay = symbols('xuanxuan lingling jay')\n    \n    equation1 = Eq(xuanxuan + lingling, 120.5)\n    equation2 = Eq(xuanxuan + jay, 105.25)\n    equation3 = Eq(lingling, 2 * jay)\n    \n    solutions = solve((equation1, equation2, equation3), (xuanxuan, lingling, jay))\n    \n    return solutions[xuanxuan]\n\nans = solution()"
    ],
    "84471787dba0421d8ae2f1995580d453": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let l be the work Lee does per hour, n be the work Nancy does per hour\n    l, n = symbols('l n')\n\n    # Together they finish the work in 10 hours\n    eq1 = Eq(10 * (l + n), 1)\n\n    # Lee works for 6 hours and Nancy for 20 hours to finish the job\n    eq2 = Eq(6 * l + 20 * n, 1)\n\n    # Solving the equations to find n\n    solutions = solve((eq1, eq2), (l, n))\n\n    # Since n is the work Nancy does per hour,\n    # the time Nancy will take to do the job alone is 1/n\n    time_for_nancy = 1 / solutions[n]\n\n    return time_for_nancy\n\nans = solution()"
    ],
    "d268cf0ab65245d3958844e7297250a7": [
        "def solution():\n    total_students = 40 + 30\n    total_average = 90\n    total_marks = total_students * total_average\n\n    class_b_average_plus_seven = total_marks - (40 * (total_average - 7))\n    class_b_average = class_b_average_plus_seven / 30\n    \n    return class_b_average\n\nans = solution()"
    ],
    "c69301f007a447459a2f26b32add259c": [
        "def solution():\n    # Add the denominators as per the sequence provided\n    denominator_sum = (1 / (2007 * 2008)) + (1 / (2008 * 2009)) + (1 / 2009)\n    \n    # Compute the reciprocal of the denominator sum to find the value of the complex fraction\n    ans = 1 / denominator_sum\n    \n    return ans\n\nans = solution()"
    ],
    "736d1bb4aa004960971db73d59909663": [
        "def solution():\n    ways = 0\n    for ten_pences in range(6):\n        for twenty_pences in range(4):\n            for fifty_pences in range(2):\n                if ten_pences * 10 + twenty_pences * 20 + fifty_pences * 50 == 70:\n                    ways += 1\n    return ways\n\nans = solution()"
    ],
    "73e16b4d6b4148cd8d14bdc6e7150eb3": [
        "def solution():\n    students = 40\n    boat_capacity = 7\n    boats_needed = (students + boat_capacity - 1) // boat_capacity\n    return boats_needed\n\nans = solution()"
    ],
    "5a540f16cc654e8dadce8dec2e692dc0": [
        "def solution():\n    ans = 11 - 2 + 7 - 4 + 2\n    return ans\n\nans = solution()"
    ],
    "994aeb7c561a42fe8347e558ec900f32": [
        "def solution():\n    return (250250**2) - (250249 * 250251)\n\nans = solution()"
    ],
    "bf82b1b89b484ee5960960a7d950ca09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    aaron, becky, caris = symbols('aaron becky caris')\n    equation1 = Eq(aaron - becky, becky - caris)\n    equation2 = Eq(aaron + becky + caris, 60)\n\n    solutions = solve((equation1, equation2), (aaron, becky, caris))\n\n    return solutions[becky]\n\nans = solution()"
    ],
    "d446c52e4dbb4e51aceaff4c60dc5ab8": [
        "def solution():\n    people_behind = 16\n    total_people = 30\n\n    people_in_front = total_people - people_behind - 1\n\n    return people_in_front\n\nans = solution()"
    ],
    "ac1c2a9c6937485ea8ffba2f93c05b4f": [
        "def solution():\n    ans = sum(len(str(i)) for i in range(1, 201))\n    return ans\n\nans = solution()"
    ],
    "a5706681d10c49489b9cbe928880bbdb": [
        "def solution():\n    for a in range(10):\n        number = 9000 + a * 100 + 80 + a\n        if number % 15 == 0:\n            return a\n\nans = solution()"
    ],
    "9852339c36f84963a115452803677de2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 2)/3, 1 + (x - 1)/4)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7194d8ece9df4cd49ccf1b51dff55042": [
        "def solution():\n    # For a number to be divisible by 4, the last two digits must be divisible by 4.\n    # We try all values of J from 0 to 9 and check which one makes 125J6 divisible by 4.\n    for J in range(10):\n        if (int(f\"125{J}6\") % 4) == 0:\n            return J\n\nans = solution()"
    ],
    "252455d7397e4190b4b727c54849c01e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for cost per table (T) and per chair (C)\n    T, C = symbols('T C')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(5 * T + 12 * C, 720)  # Total cost of tables and chairs\n    equation2 = Eq(T, C + 25)            # Each table costs 25 more than each chair\n\n    # Solve the system of equations for T and C\n    solutions = solve((equation1, equation2), (T, C))\n\n    # Return the cost of a table\n    return solutions[T]\n\nans = solution()"
    ],
    "9ad04db2b944413e9b7b20c98134596f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, peach = symbols('apple peach')\n\n    equation1 = Eq(4 * apple + 3 * peach, 10)\n    equation2 = Eq(4 * apple + 6 * peach, 16)\n\n    solutions = solve((equation1, equation2), (apple, peach))\n\n    return solutions[peach]\n\nans = solution()"
    ],
    "a38e52eeb9e34e54a87285df19594d9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the original number with x\n    x = symbols('x')\n\n    # Creating the equation according to the problem:\n    # (x + 7) * 6 = 66\n    equation = Eq((x + 7) * 6, 66)\n\n    # Solving the equation \n    original_number = solve(equation, x)\n\n    return original_number[0]\n\nans = solution()"
    ],
    "d8016a78f9724496a543874862c8f889": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n\n    total_water = audrey_water + jane_water\n\n    return total_water\n\nans = solution()"
    ],
    "ba1cf976efc14128bab1463d61d8172d": [
        "def solution():\n    # Define the custom operation\n    def custom_operation(a, b):\n        return 5 * a - 2 * b\n    \n    # Equation: 9 ⊙ x = 33\n    # Solve for x\n    x = symbols('x')\n    equation = Eq(custom_operation(9, x), 33)\n    \n    # Find the solution for x\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "b06bcf32c5ce4534aa9ae601dd737c7a": [
        "def solution():\n    def sum_of_squares(n):\n        return (n * (n + 1) * (2 * n + 1)) // 6\n    \n    def sum_of_cubes(n):\n        sum_of_ints = (n * (n + 1)) // 2\n        return sum_of_ints ** 2\n    \n    ans = sum_of_cubes(23) - sum_of_squares(23)\n    return ans\n\nans = solution()"
    ],
    "28dce32aa4a84544ae4a2373b615edc0": [
        "def solution():\n    ans = 36 + 17 + 18 + 24 + 33\n    return ans\n\nans = solution()"
    ],
    "6414fa3c36c949d8bc8d4375490aad90": [
        "def solution():\n    return 476 // 17\n\nans = solution()"
    ],
    "05109018bc434fdfa8dff3bea6fe10cd": [
        "def solution():\n    return 11\n\nans = solution()"
    ],
    "3c4b0bb759df46ac8dc162978d7d83b6": [
        "def solution():\n    age_in_6_years = 24\n    current_age = age_in_6_years - 6\n    age_9_years_ago = current_age - 9\n    return age_9_years_ago\n\nans = solution()"
    ],
    "8421a5213cd640929f9873c905812c37": [
        "from math import lcm\nfrom datetime import datetime, timedelta\n\ndef solution():\n    lcm_days = lcm(25, 20)  # Least common multiple of the packet sizes\n    \n    start_date = datetime(2023, 3, 1)\n    next_start_date = start_date + timedelta(days=lcm_days - 1)  # Subtract 1 because she starts on the 1st\n    \n    return next_start_date.strftime('%d/%m/%Y')\n\nans = solution()"
    ],
    "644a44bb704f4384a83cf940f7f6970c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the time for going up be 5t and time for down be 4t\n    # The total time is 360 minutes\n    # 5t + 4t = 360\n    t = symbols('t')\n    eq = Eq(5*t + 4*t, 360)\n    time_solution = solve(eq, t)\n    time_up = 5 * time_solution[0]\n    time_down = 4 * time_solution[0]\n\n    # Let the speed going down be s and up be s-10\n    # distance = speed * time\n    s_up = symbols('s')\n    s_down = s_up - 10\n    distance_up = s_up * time_up\n    distance_down = s_down * time_down\n\n    # The total distance is the sum of distances up and down\n    total_distance = distance_up + distance_down\n\n    # Solve the equation for s_up to find the total distance\n    ans = solve(total_distance - 360, s_up)\n\n    return ans[0]\n\nans = solution()"
    ],
    "04443e386f27447897840ea2ceacf48e": [
        "def solution():\n    # Initialize total watermelons and pineapples\n    total_watermelons = 94\n    total_pineapples = 138\n\n    # Define the usage of watermelons and pineapples per day\n    watermelons_per_day = 9\n    pineapples_per_day = 9\n\n    # Using a simple loop to find the number of days after which\n    # the number of pineapples is 3 times the number of watermelons\n    days = 0\n    while total_watermelons >= 0 and total_pineapples >= 0:\n        if total_pineapples == 3 * total_watermelons:\n            return days\n        total_watermelons -= watermelons_per_day\n        total_pineapples -= pineapples_per_day\n        days += 1\n\n    return days\n\nans = solution()"
    ],
    "f2a79e337470459580999ca824060e81": [
        "def solution():\n    num_friends = 6\n    # Each of the 6 friends sent a card to each of the other 5 friends\n    total_cards_sent = num_friends * (num_friends - 1)\n    ans = total_cards_sent\n    return ans\n\nans = solution()"
    ],
    "863f091493be404bbbf1a3b6b11108a9": [
        "def solution():\n    ans = 3.6 * 100\n    return ans\n\nans = solution()"
    ],
    "7ecb434f5d8b4685a1bf09ae7bb7ba8e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be Tom's current age and y be Jerry's current age.\n    tom, jerry = symbols('tom jerry')\n    \n    # Tom will be twice his age in 4 years.\n    equation1 = Eq(tom + 4, 2 * tom)\n    \n    # The sum of Tom's and Jerry's ages three years ago was 10.\n    equation2 = Eq((tom - 3) + (jerry - 3), 10)\n    \n    # Solve the equations to find Tom's and Jerry's current ages.\n    solutions = solve((equation1, equation2), (tom, jerry))\n\n    # Extract Tom's and Jerry's ages from the solutions.\n    tom_age = solutions[tom]\n    jerry_age = solutions[jerry]\n    \n    # We need to find in how many years from now Jerry's age will be doubled.\n    # Let n be the number of years from now when Jerry's age will be doubled.\n    # Then we have the equation: jerry_age + n = 2 * jerry_age.\n    # Solving for n gives us: n = jerry_age\n    n = jerry_age\n    \n    return n\n\nans = solution()"
    ],
    "c7d09eee09884180b22647b680abde83": [
        "def solution():\n    fruits_per_car = 24.2 / 4\n    fruits_per_truck = 410 / 50\n\n    difference = fruits_per_truck - fruits_per_car\n    \n    return difference\n\nans = solution()"
    ],
    "53ec9e4b9d804cd3a26e23b2cb281a3a": [
        "def solution():\n    wait_time = (35 - (9 * 60 + 22) % 35) % 35\n    return wait_time\n\nans = solution()"
    ],
    "594446f092204f07a8f1c0cebe891b21": [
        "def solution():\n    total_days = 329\n    days_in_week = 7\n    weeks_until_birthday = total_days // days_in_week\n    return weeks_until_birthday\n\nans = solution()"
    ],
    "2fcfa373d34340dda08f178934a5be32": [
        "def solution():\n    eddie_speed = 62\n    brother_speed = 70\n    time_to_meet = 5\n\n    distance_met = (eddie_speed + brother_speed) * time_to_meet\n    return distance_met\n\nans = solution()"
    ],
    "7b68f177602a4cc584823135bed89664": [
        "def solution():\n    return 252 - (62 - 58) * 13\n\nans = solution()"
    ],
    "d05b2b87366644bea5ba5fa990a4796c": [
        "def solution():\n    ans = (5/9) * 243\n    return ans\n\nans = solution()"
    ],
    "d6baa433c44047ebbc0a9cea630f8afa": [
        "def solution():\n    result = 161 / 46\n    return result\n\nans = solution()"
    ],
    "c72580c4f08e4db9b41e5dae34b5ba80": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(39 - (3 * x - 4), 34)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "98919fdedf144aaf9b373ecd9d790e80": [
        "def solution():\n    from sympy import isprime\n\n    # Ages of family members currently\n    my_age, brother_age, mother_age, father_age = 7, 5, 29, 31\n    # Increase the year count starting from 2017\n    year = 2018\n\n    while True:\n        # Increase ages as year passes\n        my_age += 1\n        brother_age += 1\n        mother_age += 1\n        father_age += 1\n\n        # Check if all ages are prime in the current year\n        if all(isprime(age) for age in [my_age, brother_age, mother_age, father_age]):\n            ans = father_age\n            break\n\n        year += 1\n\n    return ans\n\nans = solution()"
    ],
    "0284805b100e4942a4c70e5c0bda46ec": [
        "def solution():\n    original_price = 800\n    discount = 0.15 * original_price\n    discounted_price = original_price - discount\n    increase = 0.15 * discounted_price\n    final_price = discounted_price + increase\n    return final_price\n\nans = solution()"
    ],
    "41a3c03d8eb44fc899606653983540eb": [
        "def solution():\n    ans = sum(i**2 if i % 2 == 1 else -i**2 for i in range(3, 52))\n\n    return ans\n\nans = solution()"
    ],
    "706569a3dca842c19c29d93aa3f7c891": [
        "def solution():\n    ans = 0.2 * 4 + 1.4 + 0.3\n    return ans\n\nans = solution()"
    ],
    "330ae3eaf06f40fc836f52dc7ad73cd3": [
        "def solution():\n    return 9321 - 899\n\nans = solution()"
    ],
    "4ba068e7720f40409cd5ae73716e4408": [
        "def solution():\n    total_flowers = 30\n    flowers_between_posts = 3\n    total_length = 50\n\n    # Number of intervals between lamp posts\n    num_intervals = total_flowers // flowers_between_posts + 1  # +1 for the last interval after the last set of 3 flowers\n\n    # Distance between each set of lamp posts\n    distance_between_posts = total_length / num_intervals\n\n    return distance_between_posts\n\nans = solution()"
    ],
    "8206be1ec41b408abd4e771355c66b57": [
        "def solution():\n    # The maximum number of regions created by drawing circles can be determined\n    # by the formula: regions = 1 + n(n + 1)/2 + n(n - 1)(n - 2)/6 where n is\n    # the number of circles. This is derived by recursively counting the number\n    # of new regions formed by addition of each circle.\n    n = 7\n    regions = 1 + n * (n + 1) // 2 + n * (n - 1) * (n - 2) // 6\n    return regions\n\nans = solution()"
    ],
    "fb9f310cf3714558a4a5507c2790883c": [
        "def solution():\n    total_books = 279\n    books_given = 15 * 8\n    books_packed = total_books - books_given\n    return books_packed\n\nans = solution()"
    ],
    "2a5bc09f9e2444d0ad16b16b429e0669": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be Lora's age and y be her mother's age\n    x, y = symbols('x y')\n    \n    # Equation 1: Sum of Lora's age and her mother's age is 44\n    equation1 = Eq(x + y, 44)\n    \n    # Equation 2: Lora's mother's age is 3 times Lora's age\n    equation2 = Eq(y, 3 * x)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Return Lora's age\n    return solutions[x]\n\nans = solution()"
    ],
    "8b707c3e74aa4ca6aa566cfafbe81d3f": [
        "def solution():\n    # Define the base and exponent\n    base_unit_digit = 4\n    exponent = 2008\n    \n    # Since we're only interested in the unit digit, we can focus on the cyclicality of the powers of 4:\n    # Base 4 has a unit digit cycle of 4 -> 6 -> 4 -> 6 when raised to successive powers. The cycle length is 2.\n    \n    # Calculate the position within the cycle, modulo the cycle length (2)\n    position_in_cycle = exponent % 2\n    \n    # If the position is 0, it corresponds to the unit digit being 6.\n    # If the position is 1, it corresponds to the unit digit being 4.\n    if position_in_cycle == 0:\n        unit_digit = 6\n    elif position_in_cycle == 1:\n        unit_digit = 4\n    \n    return unit_digit\n\nans = solution()"
    ],
    "e4a263cc4f734491a94e2dda982f4f21": [
        "def solution():\n    num = 'ninety thousand and nine'.split()\n    number_words = {'ninety': 90, 'thousand': 1000, 'and': 0, 'nine': 9}\n\n    ans = 90 * 1000 + 9\n    return ans\n\nans = solution()"
    ],
    "b157ac35c09c46d1a0f9228b2a98a0c9": [
        "def solution():\n    total_adults = 40\n    fraction_male = 3 / 5\n    num_males = total_adults * fraction_male\n    return int(num_males)\n\nans = solution()"
    ],
    "25c64c726c244d3aaeaa551352e609a3": [
        "def solution():\n    ben_sweets = 17\n    bob_sweets = 10\n    total_sweets = ben_sweets + bob_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "26e8404f1e6e4ecdb0c65de9d6a345a6": [
        "def solution():\n    paths_from_home_to_audio_shop = 6\n    paths_from_home_to_book_shop = 4\n    paths_from_home_to_chapel = 5\n    paths_from_audio_shop_to_school = 2\n    paths_from_book_shop_to_school = 2\n    paths_from_chapel_to_school = 3\n\n    total_paths = (paths_from_home_to_audio_shop * paths_from_audio_shop_to_school +\n                   paths_from_home_to_book_shop * paths_from_book_shop_to_school +\n                   paths_from_home_to_chapel * paths_from_chapel_to_school)\n\n    return total_paths\n\nans = solution()"
    ],
    "acf3c89a437f4533b94fbc004a77b124": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # define variables\n    adam, ben, carl = symbols('adam ben carl')\n    \n    # equations based on the sum of pairs\n    equation1 = Eq(adam + ben, 102)\n    equation2 = Eq(ben + carl, 97)\n    equation3 = Eq(adam + carl, 93)\n\n    # add two equations to cancel out one variable, then subtract the thrid one\n    # to get the sum of all three people\n    total_weight = solve(equation1 + equation2 - equation3)[adam] + \\\n                   solve(equation1 + equation2 - equation3)[ben] + \\\n                   solve(equation1 + equation2 - equation3)[carl]\n\n    return total_weight\n\nans = solution()"
    ],
    "5c9b212318c240b4a74ad8f4e844ef5b": [
        "def solution():\n    arrival_time_hour = 12\n    arrival_time_minute = 40\n    stay_duration_hours = 2\n    stay_duration_minutes = 40\n\n    end_time_hour = arrival_time_hour + stay_duration_hours\n    end_time_minute = arrival_time_minute + stay_duration_minutes\n\n    if end_time_minute >= 60:\n        end_time_hour += end_time_minute // 60\n        end_time_minute = end_time_minute % 60\n\n    ans = (end_time_hour, end_time_minute)\n    return ans\n\nans = solution()"
    ],
    "2c92522309c445228b27f336d60a049f": [
        "def solution():\n    total_coins = 495\n    one_pound_coins = total_coins // 3\n    fifty_p_coins = 124\n    twenty_p_coins = total_coins - one_pound_coins - fifty_p_coins\n    \n    total_value = one_pound_coins * 1 + fifty_p_coins * 0.5 + twenty_p_coins * 0.2\n    \n    return total_value\n\nans = solution()"
    ],
    "c15d8300682f4868979f9fe7293cdddd": [
        "def solution():\n    return 76 * 9\n\nans = solution()"
    ],
    "42059b08dbed41ce877ac6d4245af7e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    benson, clive = symbols('benson clive')\n    \n    equation1 = Eq(benson + clive, 705)\n    equation2 = Eq(benson - 34, clive - 63)\n    \n    solutions = solve((equation1, equation2), (benson, clive))\n    \n    return solutions[clive]\n\nans = solution()"
    ],
    "517bec3444474e42bb9cb8c495766694": [
        "def solution():\n    return 14.8 - 5.67\n\nans = solution()"
    ],
    "556f6176dffb4d75900eef7a7bd1baa6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    belle, eddie = symbols('belle eddie')\n\n    belle += 49\n    eddie -= 11\n\n    equation = Eq(belle, eddie)\n\n    solutions = solve(equation, eddie)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "a2fe9cf5c86e468186050a214e5271c5": [
        "def solution():\n    num_lamp_posts = 50\n    distance_between_posts = 2  # in meters\n\n    # As there are lamp posts at both ends, we subtract one post from the total count for calculation\n    length_of_road = (num_lamp_posts - 1) * distance_between_posts\n\n    return length_of_road\n\nans = solution()"
    ],
    "007cfb31882a43b8a576d0a1be81a6b1": [
        "def solution():\n    ans = 198 + 298 + 398 + 498\n    return ans\n\nans = solution()"
    ],
    "cc59b7c9a7804769b430b15dea0b2243": [
        "def solution():\n    glasgow_temperature = -7\n    difference = 12\n    exeter_temperature = glasgow_temperature + difference\n    return exeter_temperature\n\nans = solution()"
    ],
    "29173022662a4326b363f95bb7111d39": [
        "def solution():\n    ans = ((5 / 11) + (2 / 27)) * 11 + (5 / 27)\n    return ans\n\nans = solution()"
    ],
    "f2d1624bd6914f419871977e97929aae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, brian = symbols('chelsia brian')\n    equation1 = Eq(3/4 * chelsia, 5/6 * brian)\n    equation2 = Eq(chelsia, brian + 24)\n\n    solutions = solve((equation1, equation2), (chelsia, brian))\n\n    total_money = solutions[chelsia] + solutions[brian]\n\n    return total_money\n\nans = solution()"
    ],
    "f3a732dd8b134a0d8668f613c0e04366": [
        "def solution():\n    weight_per_box = 1.3\n    number_of_boxes = 6\n    total_weight = weight_per_box * number_of_boxes\n    return total_weight\n\nans = solution()"
    ],
    "d10e094ae6b64c01873f9605961d4568": [
        "def solution():\n    ans = 11 + 8 - 4 + 2\n    return ans\n\nans = solution()"
    ],
    "76eab0f31f2c401ea284400880158c26": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, kofi = symbols('john kofi')\n\n    total_coins_eq = Eq(john + kofi, 25)\n    after_giving_eq = Eq(kofi + 4, john - 4 - 3)\n\n    solutions = solve((total_coins_eq, after_giving_eq), (john, kofi))\n    return solutions[john]\n\nans = solution()"
    ],
    "2de358aca892457597c6b256327bbab7": [
        "def solution():\n    total_tea = 983 + 179\n    each_share = total_tea // 2\n    tea_to_give = each_share - 179\n\n    return tea_to_give\n\nans = solution()"
    ],
    "c47a6f5f7feb44a1a708cd7ee24c6d4f": [
        "def solution():\n    from itertools import permutations\n    \n    digits = [2, 4, 6]\n    all_permutations = set(permutations(digits))\n    \n    return len(all_permutations)\n\nans = solution()"
    ],
    "94caf5aef0e34fb6850eae1e6f450368": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    normal_rabbits, special_rabbits = symbols('normal_rabbits special_rabbits')\n    \n    # normal rabbits have 1 head, special rabbits have 3 heads\n    equation_heads = Eq(normal_rabbits + 3 * special_rabbits, 53)\n    # normal rabbits have 4 feet, special rabbits have 2 feet\n    equation_feet = Eq(4 * normal_rabbits + 2 * special_rabbits, 102)\n    \n    # solve the system of equations\n    solutions = solve((equation_heads, equation_feet), (normal_rabbits, special_rabbits))\n    return solutions[normal_rabbits] + solutions[special_rabbits]\n\nans = solution()"
    ],
    "c2d38aa135914d7cbc85eacbe4abc34c": [
        "def solution():\n    cost_per_banana = 98 / 7\n    cost_of_13_bananas = cost_per_banana * 13\n    change_from_10_pounds = (10 * 100) - cost_of_13_bananas  # converting pounds to pence\n    return change_from_10_pounds\n\nans = solution()"
    ],
    "b9dc1e7c14884af2affa4cacaa7fb5a9": [
        "def solution():\n    return (18 + 2 + 16)\n\nans = solution()"
    ],
    "1e359fb023094a249a7e06543302f43c": [
        "def solution():\n    sum = 0\n    for i in range(1, 101):\n        if i % 2 == 0:\n            sum += i\n        else:\n            sum -= i\n    return sum\n\nans = solution()"
    ],
    "82376facf64846dea0f32cd7690fcb86": [
        "def solution():\n    # Calculate the repeating cycle of 1/70\n    remainder = 1\n    digits = \"\"\n    remainders_seen = {}\n    cycle_length = 0\n    counter = 0\n\n    # Find the repeating cycle\n    while remainder and remainder not in remainders_seen:\n        remainders_seen[remainder] = len(digits)\n        remainder *= 10\n        digit, remainder = divmod(remainder, 70)\n        digits += str(digit)\n        cycle_length += 1\n\n    # Find the position of the 500th digit in the repeating cycle\n    position = (500 - 1) % cycle_length  # subtract 1 because we start from the first decimal place\n\n    # Retrieve the digit at the calculated position\n    ans = int(digits[position])\n\n    return ans\n\nans = solution()"
    ],
    "635bb79136ff42d8a188a0bd46337917": [
        "def solution():\n    neelesh_sweets_after_eating = 4\n    sweets_received_by_neelesh = neelesh_sweets_after_eating + 1\n    total_sweets = sweets_received_by_neelesh * 6\n    sweets_left_with_ayesha = total_sweets - sweets_received_by_neelesh\n    return sweets_left_with_ayesha\n\nans = solution()"
    ],
    "b49aa6ce18de4e7e95ea0c909ef9340d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    copper, iron = symbols('copper iron')\n\n    equation1 = Eq(8 * copper + 9 * iron, 135)\n    equation2 = Eq(6 * copper + 3 * iron, 75)\n\n    solutions = solve((equation1, equation2), (copper, iron))\n\n    return solutions[copper]\n\nans = solution()"
    ],
    "c0d39545ea18469395ac00e338169f45": [
        "from fractions import Fraction\n\ndef solution():\n    result = 3 / Fraction(1, 3)\n    return result\n\nans = solution()"
    ],
    "6f08803f689f4c72bcdea50d636ea987": [
        "def solution():\n    numerator = sum(1 / (i * (i + 1)) for i in range(1, 20, 2))\n    denominator = sum(1 / (i * (20 + 11 - i)) for i in range(11, 16))\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "fb81c39a4a004c44a04415b1127e4172": [
        "def solution():\n    ans = 5 * 8 * 37 * 2 * 3\n    return ans\n\nans = solution()"
    ],
    "4b71e5c9920b435b9041ce4896dba538": [
        "def solution():\n    # Let the number of gummy bears be 5x and lollipops be 7x in both piles\n    # According to the problem, after adding 120 pieces to each, the ratio becomes 4:5\n    # So now we will have (5x + 120) and (7x + 120)\n\n    # Set up the equation for the new ratio 4:5\n    # (5x + 120)/(7x + 120) = 4/5\n    # Cross multiply to solve for x\n    # 5*(5x + 120) = 4*(7x + 120)\n    \n    # Solve for x\n    x = symbols('x')\n    equation = Eq(5*(5*x + 120), 4*(7*x + 120))\n\n    # Calculate the value of x\n    x_value = solve(equation, x)[0]\n    \n    # Calculate the initial number of gummy bears and lollipops\n    gummy_bears = 5 * x_value\n    lollipops = 7 * x_value\n    \n    # Calculate the new total number of gummy bears and lollipops after adding 120\n    new_gummy_bears = gummy_bears + 120\n    new_lollipops = lollipops + 120\n    \n    # Calculate total pieces of candy now\n    total_candy_now = new_gummy_bears + new_lollipops\n\n    return total_candy_now\n\nans = solution()"
    ],
    "ff3ca477695c441ca3e802ed3aff2147": [
        "def solution():\n    from math import gcd\n\n    count = 0\n    total_sum = 425\n    for a in range(1, total_sum):\n        b = total_sum - a\n        if a < b and gcd(a, b) == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "3879585254c84c84980eeddc57632689": [
        "def solution():\n    n = 4.5 / 5\n    return n\n\nans = solution()"
    ],
    "8cf4df806e1a4f38b2163bf0c0f80fb2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    box_a = 80\n    box_c = symbols('box_c')\n    box_b = 2 * box_c\n    total_marbles = 560\n\n    equation = Eq(box_a + box_b + box_c, total_marbles)\n    solutions = solve(equation, box_c)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "1d7ff38273c84d93a9260643964e7030": [
        "def solution():\n    david_weight_stone = 15\n    stone_to_pounds = 14\n    david_weight_pounds = david_weight_stone * stone_to_pounds\n    andrew_weight_pounds = 275\n    weight_difference = abs(david_weight_pounds - andrew_weight_pounds)\n    return weight_difference\n\nans = solution()"
    ],
    "f7687594899c4a84936c2dc5acc1a17b": [
        "def solution():\n    common_difference = 28 - 25\n    nth_term = 10\n    nth_value = 31\n\n    first_term = nth_value - common_difference * (nth_term - 1)\n    return first_term\n\nans = solution()"
    ],
    "582d4b5a26c541bc8d1fb60d2121ed94": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(24*x - 5*(3 + x), 4)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "ab2b45088a334801819c6e6a9d94fab4": [
        "def solution():\n    numbers = [5, 15, 17, 23]\n    sum_numbers = sum(numbers) * 3  # Each number sequence is repeated three times\n    return sum_numbers\n\nans = solution()"
    ],
    "fc1e6d4f69b04d27a7517c0eb6c4e22f": [
        "def solution():\n    numbers = [31, 42, 53, 64, 75, 86, 97]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "9dbeb15b0ccc44199b320299a1531c7e": [
        "def solution():\n    # Convert the numbers to base 10\n    num1 = int('12101', 3)\n    num2 = int('2210', 3)\n    \n    # Subtract the numbers in base 10\n    result_base10 = num1 - num2\n    \n    # Convert the result back to base 3\n    result_base3 = ''\n    while result_base10 > 0:\n        result_base3 = str(result_base10 % 3) + result_base3\n        result_base10 //= 3\n    \n    return result_base3\n\nans = solution()"
    ],
    "e83aa38155204c758ec3f3c943621ee1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    andy, bella, carl = symbols('andy bella carl')\n    \n    equation1 = Eq(andy, 3 * carl - 5)\n    equation2 = Eq(bella, 5 * carl + 6)\n    equation3 = Eq(andy + bella + carl, 82)\n    \n    solutions = solve((equation1, equation2, equation3), (andy, bella, carl))\n    \n    return solutions[bella]\n\nans = solution()"
    ],
    "a7abc8be2a334d6eaec3ea33bebffa38": [
        "def solution():\n    return 0.50 * 0.50 * 3.20\n\nans = solution()"
    ],
    "b9e41291c02c4031a7bcdcb38cb3cafe": [
        "def solution():\n    return 58 * 60\n\nans = solution()"
    ],
    "12eba26cbba04c40831d8de0d613bdcb": [
        "def solution():\n    # Initialize the numbers 1 to 20\n    numbers = set(range(1, 21))\n    # Initialize the set for the chosen numbers\n    chosen = set()\n\n    # Iterate over the numbers\n    while numbers:\n        # Take the smallest number from the remaining\n        num = min(numbers)\n        # Add this number to the chosen set\n        chosen.add(num)\n        # Remove the chosen number and those differ by 5 from the original set\n        numbers.difference_update({num, num + 5})\n\n    # The largest value of n is the size of the chosen set\n    return len(chosen)\n\nans = solution()"
    ],
    "3d7dd83d87f844e58d9e560870e4d190": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cake, biscuit = symbols('cake biscuit')  # Create symbols for cake and biscuit\n    equation1 = Eq(cake + 2*biscuit, 450)    # One cake and two biscuits give 450 calories\n    equation2 = Eq(2*cake + 3*biscuit, 800)  # Two cakes and three biscuits give 800 calories\n\n    # Solve the system of equations for 'cake' and 'biscuit'\n    solutions = solve((equation1, equation2), (cake, biscuit))\n\n    return solutions[biscuit]  # Return the calories of one biscuit\n\nans = solution()"
    ],
    "87af33f1b5884c4ea69e49e33d0a8d54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for John's age now (j) and his mother's age now (m)\n    j, m = symbols('j m')\n\n    # Create the equation based on the problem statement\n    # John's age in 8 years equals his mother's age 20 years ago\n    equation1 = Eq(j + 8, m - 20)\n\n    # The age difference between John and his mother is constant\n    age_difference = m - j\n\n    # Now, we need to find when John's age is 5 times his age\n    # Since the age difference is constant, we can use it to express his mother's age\n    # when John is x years old: mother's age = x + age_difference\n\n    # Then, we have another equation where mother's age = 5 * John's age at that time\n    # j_current_age = j - (current time - time when John was 5 times younger)\n    j_current_age = symbols('j_current_age')\n    equation2 = Eq(j_current_age + age_difference, 5 * j_current_age)\n\n    # Using the first equation, we solve for m in terms of j\n    solved_m = solve(equation1, m)[0]\n\n    # Substitute m in the second equation with the solved value in terms of j\n    equation2_substituted = equation2.subs(m, solved_m)\n\n    # Solve the substituted equation for j_current_age\n    j_current_age_solution = solve(equation2_substituted, j_current_age)\n    \n    # Since we need John's age at that time, we return the first (and only) solution\n    return j_current_age_solution[0]\n\nans = solution()"
    ],
    "40f23dfb4c6944d6827e112692a2f4af": [
        "def solution():\n    correct_answers = 6\n    wrong_answers = 2\n    correct_mark = 12\n    wrong_mark = 0\n    total_marks = (correct_answers * correct_mark) + (wrong_answers * wrong_mark)\n    total_questions = correct_answers + wrong_answers\n    average_mark = total_marks / total_questions\n    return average_mark\n\nans = solution()"
    ],
    "457ec627f0894b55bd6bbb19ec3216ed": [
        "def solution():\n    num1 = 2017 + 7/8\n    num2 = 3 + 2/3\n    num3 = 2016.875\n    num4 = 11/3\n    num5 = 2017 + 1/3\n    num6 = 2016.875\n    num7 = 17\n    num8 = 3 + 23/32\n\n    result = ((num1 * num2 - num3 * num4) / ((num5 - num6) * num7)) * num8\n\n    return result\n\nans = solution()"
    ],
    "cf212f0a8ebe4fcbb9183e471f844eb7": [
        "def solution():\n    for i in range(1,100):\n        B1B=int(str(i) * 2)\n        if B1B % 44 == 0:\n            return B1B // 44\n    return None\n\nans = solution()"
    ],
    "5290a7a4297b46f79f02b35ba7b86bba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kevin, sara, james = symbols('kevin sara james')\n\n    equation1 = Eq(kevin, sara + 30)\n    equation2 = Eq(james, sara + 40)\n    equation3 = Eq(kevin + sara + james, 160)\n    \n    solutions = solve((equation1, equation2, equation3), (kevin, sara, james))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "c21adc6d12784b558ba6313332b0f960": [
        "from math import gcd\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\ndef solution():\n    numbers = [4, 6, 7]\n    lcm_result = lcm(numbers[0], numbers[1])\n    for i in range(2, len(numbers)):\n        lcm_result = lcm(lcm_result, numbers[i])\n    return lcm_result\n\nans = solution()"
    ],
    "40292969e8e14e9cbeb87311d97671dc": [
        "def solution():\n    M = 1\n    while True:\n        remainders = {M % i for i in range(2, 11)}\n        if len(remainders) == 9 and all(remainder != 0 for remainder in remainders):\n            return M\n        M += 1\n\nans = solution()"
    ],
    "8e019855e907491ab5c9eee5d32827fc": [
        "def solution():\n    lcm = (24 * 8) // math.gcd(24, 8)\n    return lcm\n\nimport math\nans = solution()"
    ],
    "9eed42cf78144b53839062fc748a2a6b": [
        "def solution():\n    total_apples = 37\n    apples_per_container = 4\n\n    num_containers = (total_apples + apples_per_container - 1) // apples_per_container\n\n    return num_containers\n\nans = solution()"
    ],
    "071a1796963f4c3b964229a2d8a43b31": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the amounts collected by Romily and Reema\n    romily, reema = symbols('romily reema')\n\n    # Romily collects 10 more than Reema\n    equation = Eq(romily, reema + 10)\n\n    # Since we don't have the total, we cannot solve for the exact amounts\n    # However, we can express Romily's collection in terms of Reema's collection\n    solution = solve(equation, reema)\n\n    # Return Reema's collection as it is what we are asked for\n    # Since we don't have numbers to work with, the solution will be in terms of a symbol\n    return solution[0]\n\nans = solution()"
    ],
    "ac392742b1ee4f6d953d5d00c6d023b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    allison, ben, eunice = symbols('allison ben eunice')\n\n    equation1 = Eq(allison, ben - 6)\n    equation2 = Eq(eunice, 3 * ben)\n    equation3 = Eq(allison + ben + eunice, 74)\n\n    solutions = solve((equation1, equation2, equation3), (allison, ben, eunice))\n\n    return solutions[eunice]\n\nans = solution()"
    ],
    "976d0ed32bf84f5083e1272cd57f3a72": [
        "def solution():\n    books_about_fish = 78\n    books_about_birds = books_about_fish - 12\n    total_books = books_about_fish + books_about_birds\n    return total_books\n\nans = solution()"
    ],
    "4bc3c98e818346f4be4d3e3f73cdd332": [
        "def solution():\n    total_students = 44\n    math_competition = 30\n    art_competition = 26\n\n    both_competitions = math_competition + art_competition - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "fe1ec268421740a592e27756f3a3f6ed": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 28 to get its prime factors\n    factors = factorint(28)\n    # Each prime factor should be in pairs for the number to be a perfect square\n    # Find the smallest number needed to make each prime factor count even\n    smallest_number = 1\n    for prime, count in factors.items():\n        if count % 2 != 0:  # If the count of prime is odd\n            smallest_number *= prime  # Multiply prime to make it even\n\n    return smallest_number\n\nans = solution()"
    ],
    "762ea7c4f43b426abdae8d0c00523b6d": [
        "def solution():\n    length_of_field = 480\n    distance_between_posts = 4\n\n    # Since there is a post at the beginning and end, we add 1 to the result of division\n    num_posts = (length_of_field // distance_between_posts) + 1\n\n    return num_posts\n\nans = solution()"
    ],
    "1daaad84df24455faa123c07aa34efd8": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(0, 10):\n            if 8 * (10 * a + b) == 3 * (10 * b + a):\n                return 10 * a + b\n\nans = solution()"
    ],
    "c49dc118c0ec4d2aa50863db0c43cc31": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, louise = symbols('andrew louise')\n    equation1 = Eq(andrew, 3 * louise)\n    equation2 = Eq(andrew + louise, 84)\n\n    solutions = solve((equation1, equation2), (andrew, louise))\n\n    return solutions[louise]\n\nans = solution()"
    ],
    "d9d2b528c7a443f89a86e5b624e1ee62": [
        "def solution():\n    ans = (612 / 34) * 25\n    return ans\n\nans = solution()"
    ],
    "9cd4bf4428bf41138128774d0ccd221a": [
        "def solution():\n    positive_sum = 10 + 20 + 30 + 50 + 60 + 70\n    negative_sum = 6 + 16 + 26 + 46 + 56 + 66\n    ans = positive_sum - negative_sum\n    return ans\n\nans = solution()"
    ],
    "5e82be0f6fa64850ad780e72281f7277": [
        "def solution():\n    from datetime import datetime, timedelta\n    \n    # Lunch finished at 2:50 PM\n    lunch_finished = datetime.strptime(\"14:50\", \"%H:%M\")\n    \n    # Lunch lasted for 20 minutes, so start of lunch was at 2:30 PM\n    lunch_started = lunch_finished - timedelta(minutes=20)\n    \n    # Watched television for 20 minutes before lunch, so he started watching at 2:10 PM\n    tv_started = lunch_started - timedelta(minutes=20)\n    \n    # Played for 10 minutes after reaching home, so he reached home at 2:00 PM\n    home_reached = tv_started - timedelta(minutes=10)\n    \n    # Format the answer to return only the time\n    return home_reached.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "7ada23a33bc94088ae1ae8186b32007c": [
        "def solution():\n    from math import factorial\n    \n    # A and B can be treated as one entity plus the remaining 4 students\n    # We can compute the permutations for these 5 entities\n    grouped_permutations = factorial(5)\n    \n    # A and B can arrange themselves in 2! ways\n    ab_permutations = factorial(2)\n    \n    # Total permutations will be the arrangement of the groups\n    # multiplied by arrangements within the group\n    total_permutations = grouped_permutations * ab_permutations\n    \n    return total_permutations\n\nans = solution()"
    ],
    "d6fa863308bf4180b14d7c87b45ff7fe": [
        "def solution():\n    initial_rabbits = 64\n    years = 5\n    for _ in range(years):\n        initial_rabbits = 5 * initial_rabbits // 2\n    return initial_rabbits\n\nans = solution()"
    ],
    "1463a32cbb5c44b19f250a84a1236899": [
        "def solution(y, x):\n    total_fare = 6 * x\n    return total_fare == y\n\nans = solution(y, x)"
    ],
    "dcab993860a143ab9ab270b31a317e8a": [
        "def solution():\n    max_number = 99\n    while max_number > 0:\n        if max_number % 4 == 3 and max_number % 5 == 3:\n            return max_number\n        max_number -= 1\n\nans = solution()"
    ],
    "6d5c4a1d978545239a3df4d8d35da342": [
        "def solution():\n    buzz_weight = 450 / (3 - 1)\n    buzz_weight *= 3\n    return buzz_weight\n\nans = solution()"
    ],
    "c632ecf0b70c4dc68f095f11d53a2c48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of steps on the escalator be 's' and the speed of the escalator be 'e' steps per second\n    s, e = symbols('s e')\n\n    # Equation for Peter walking at 1 step per second and taking 10 seconds to reach the top\n    # In 10 seconds, escalator alone would have taken him '10*e' steps\n    equation1 = Eq(s, 1*10 + 10*e)\n\n    # Equation for Peter walking at 2 steps per second and taking 8 seconds to reach the top\n    # In 8 seconds, escalator alone would have taken him '8*e' steps\n    equation2 = Eq(s, 2*8 + 8*e)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (s, e))\n\n    return solutions[s]\n\nans = solution()"
    ],
    "dabcd77349ae4d299a61e7caf4c19962": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, green, purple = symbols('red green purple')\n\n    # Given relations\n    equation1 = Eq(red, green / 4)\n    equation2 = Eq(red, 3 * purple / 5)\n\n    # Total mass\n    total_mass = Eq(4 * red + 5 * green + 7 * purple, 642)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, total_mass), (red, green, purple))\n\n    return solutions[purple]\n\nans = solution()"
    ],
    "c530bf9072b44544be96e328b31dddec": [
        "def solution():\n    sweets = 138\n    class_size = sweets // 5  # Starting with at least one student getting 5 sweets\n    while sweets % class_size != 0:  # Adjust the class size until it divides the sweets evenly\n        class_size -= 1\n    return class_size\n\nans = solution()"
    ],
    "5dd30416f315499b8a0dbde91c6c41cf": [
        "def solution():\n    result_246x135 = 246 * 135\n    given_result = 33210\n    assert result_246x135 == given_result, \"Given multiplication result does not match actual multiplication result.\"\n\n    result_248x135 = 248 * 135\n    return result_248x135\n\nans = solution()"
    ],
    "63b0962a80a14f52b0f59716321e5cc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(34 - 3 * (2 * x - 2), 16)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "dd6f7bdd1929429eadda217510a131e9": [
        "def solution():\n    road_length = 500\n    interval = 5\n\n    num_trees = (road_length // interval) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "8bb5257fccb34dadb3f706c8afa40ab1": [
        "def solution():\n    tens = 3 * 10\n    hundredths = 33 * 0.01\n    thousandths = 300 * 0.001\n    sum_of_values = tens + hundredths + thousandths\n    return sum_of_values\n\nans = solution()"
    ],
    "728ef59836434ae1bf3a1b1506cf0b69": [
        "def solution():\n    ans = 25 / 100 * 1200\n    return ans\n\nans = solution()"
    ],
    "a270f073fd714e96b31da30d7e7b2333": [
        "def solution():\n    james_height = 120  # cm\n    height_difference = 30  # cm\n\n    mark_height = james_height + height_difference\n\n    return mark_height\n\nans = solution()"
    ],
    "fc6ca0edb0d64b2c9a19de7afec2cf87": [
        "def solution():\n    total_stickers = 243\n    stickers_per_child = 6\n    remaining_stickers = 3\n\n    num_children = (total_stickers - remaining_stickers) // stickers_per_child\n\n    return num_children\n\nans = solution()"
    ],
    "0f2e5c37cda24be7a26aca5a0cef0e9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jon, miguel = symbols('jon miguel')\n    equation = Eq(jon, miguel * 1.3)\n    total = Eq(jon + miguel, 46)\n    \n    solution = solve((equation, total), (jon, miguel))\n    \n    return solution[jon]\n\nans = solution()"
    ],
    "296f5e0875b34350bfa03c591217b39e": [
        "def solution():\n    total_blocks = 20\n    given_blocks = total_blocks / 4\n    remaining_blocks = total_blocks - given_blocks\n    return remaining_blocks\n\nans = solution()"
    ],
    "52c6df5f73ca41218bfc3137351d2ab7": [
        "def solution():\n    for hundreds in range(1, 5):  # 100s place must be an even number less than 5 (since 2*4=8 is the max for the 1s place)\n        for tens in range(0, 10, 2):  # Tens place must be an even number\n            if hundreds < tens:  # 100s digit is smaller than the tens digit\n                ones = 2 * hundreds  # 1s digit is twice the 100s digit\n                number = hundreds * 100 + tens * 10 + ones\n                if number % 2 == 0 and number % 9 == 0:\n                    return number\n\nans = solution()"
    ],
    "f24a947247034c0d9d80524cd5787f66": [
        "def solution():\n    return 7268 + 94 + 567\n\nans = solution()"
    ],
    "a3a5c767bd45427d82afb83f82fc1001": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sally, ken = symbols('sally ken')\n\n    equation1 = Eq(sally / ken, 5 / 7)\n    equation2 = Eq(sally + 24, 2 * (ken - 24))\n\n    solutions = solve((equation1, equation2), (sally, ken))\n\n    return solutions[ken] - 24\n\nans = solution()"
    ],
    "1e972793be384a17b12b0af5d4176a57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the color pencils (cp) and notebooks (nb)\n    cp, nb = symbols('cp nb')\n\n    # 5cp + 6nb = 17\n    equation1 = Eq(5 * cp + 6 * nb, 17)\n    \n    # 8cp + 6nb = 20\n    equation2 = Eq(8 * cp + 6 * nb, 20)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (cp, nb))\n\n    # Calculate the cost of 1 color pencil and 1 notebook\n    total_cost = solutions[cp] + solutions[nb]\n\n    return total_cost\n\nans = solution()"
    ],
    "5efa232175da4ea8aef5abb6b0a6ab63": [
        "def solution():\n    # Initial free hours allotted\n    free_hours = 40\n    # Cost after free hours up to 50 hours\n    cost_40_to_50 = 5\n    # Total cost when parked for 50 hours\n    total_cost_at_50 = (50 - free_hours) * cost_40_to_50\n    \n    # Additional cost from 50 to 60 hours\n    cost_50_to_60 = 8\n    # Total cost when parked for 60 hours\n    total_cost_at_60 = total_cost_at_50 + (60 - 50) * cost_50_to_60 \n    \n    # Calculate the cost after 60 hours\n    cost_after_60 = 15\n    \n    # Parking bill of the employer\n    parking_bill = 82\n    \n    # Calculate the total hours parked\n    if parking_bill <= total_cost_at_50:\n        total_hours_parked = free_hours + (parking_bill / cost_40_to_50)\n    elif parking_bill <= total_cost_at_60:\n        total_hours_parked = 50 + ((parking_bill - total_cost_at_50) / cost_50_to_60)\n    else:\n        total_hours_parked = 60 + ((parking_bill - total_cost_at_60) / cost_after_60)\n    \n    return total_hours_parked\n\nans = solution()"
    ],
    "51079614a5ec47b0b15c1b5488ae900f": [
        "def solution():\n    ans = 478 - 189\n    return ans\n\nans = solution()"
    ],
    "89a89120ab754c9caf6049809ce30d70": [
        "def solution():\n    bill = 55\n    tip_percent = 20 / 100\n    tax_percent = 10 / 100\n\n    tip = bill * tip_percent\n    tax = bill * tax_percent\n\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "8696d8e4602b473aa501ef6f73193bfa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    raju, vijay, patrick = symbols('raju vijay patrick')\n    \n    equation1 = Eq(raju, 3 * vijay)\n    equation2 = Eq(raju, patrick + 152)\n    equation3 = Eq((raju + vijay + patrick) / 3, 507)\n    \n    solutions = solve((equation1, equation2, equation3), (raju, vijay, patrick))\n    \n    return solutions[vijay]\n\nans = solution()"
    ],
    "c57f27a1e67c4f79802030c3561c11d4": [
        "def solution():\n    sides_square = 4\n    sides_triangle = 3\n    thought_number = (sides_square * 2) - sides_triangle\n    return thought_number\n\nans = solution()"
    ],
    "c38be742ce424260a3f93e4e8335becf": [
        "def solution():\n    original_pay = 7.5\n    increase_percentage = 0.12\n    new_pay = original_pay + original_pay * increase_percentage\n    return new_pay\n\nans = solution()"
    ],
    "02949cc66116485ca8bed41784c54430": [
        "def solution():\n    audrey = 177\n    jane = audrey + 32\n    total_water = audrey + jane\n    return total_water\n\nans = solution()"
    ],
    "6b90c037d1be47a69b827f642dbed228": [
        "def solution():\n    total_digits = 0\n    page_number = 0\n\n    while total_digits < 1014:\n        page_number += 1\n        total_digits += len(str(page_number))\n\n    return page_number\n\nans = solution()"
    ],
    "8fddb6866a0c42b6905b4afb3024b9c9": [
        "def solution():\n    return 89 * 19\n\nans = solution()"
    ],
    "60f1559c0b6c431ebd109f40541ca33e": [
        "def solution():\n    return 96 * 8\n\nans = solution()"
    ],
    "27fb27320fd24c98af0e5d6caa596fae": [
        "def solution():\n    joanna_weekly = 5.00\n    amy_weekly = 3.50\n    amy_spent = 0.75\n    weeks = 5\n\n    joanna_total = joanna_weekly * weeks\n    amy_saved = (amy_weekly - amy_spent) * weeks\n\n    ans = joanna_total - amy_saved\n    return ans\n\nans = solution()"
    ],
    "fc089fb6a2704dc6baf4797d3c3c45b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n    equation = Eq(57 + magic_number, 4 * (9 + magic_number))\n\n    solution = solve(equation, magic_number)\n\n    return solution[magic_number]\n\nans = solution()"
    ],
    "0f2da0528c2f48f5870753bbc07cdc39": [
        "from math import comb\n\ndef solution():\n    total_students = 7 + 6   # Total number of students\n    total_teachers = 2       # Total number of teachers\n    \n    # Total ways to form a committee with 1 teacher and 4 students regardless of gender\n    total_ways_no_restriction = comb(total_teachers, 1) * comb(total_students, 4)\n    \n    # Total ways to form a committee with 1 teacher and 4 male students\n    total_ways_all_male = comb(total_teachers, 1) * comb(7, 4)\n    \n    # Total ways to form a committee with at least 1 female student\n    total_ways_at_least_one_female = total_ways_no_restriction - total_ways_all_male\n    \n    return total_ways_at_least_one_female\n\nans = solution()"
    ],
    "b4eefed42dc74e7e8e95f0ff3ff68f36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the variable\n    x = symbols('x')\n\n    # Define the equation: 3*x + 6 = x + 16\n    equation = Eq(3*x + 6, x + 16)\n\n    # Solve the equation\n    solutions = solve(equation, x)\n\n    # Return the solution\n    return solutions[0]\n\nans = solution()"
    ],
    "151555f881df4432befb850114db3fff": [
        "def solution():\n    monthly_salary = 3.248\n    debt = 1.6\n\n    months_needed = debt / monthly_salary\n\n    return months_needed\n\nans = solution()"
    ],
    "874bf5bc08b84870965ca710d514ca6c": [
        "def solution():\n    ans = sum(range(10, 71, 10)) - sum(range(6, 67, 10)) + 2021\n    return ans\n\nans = solution()"
    ],
    "7cd83847e1cb45e8af9499a2ccb9d6d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, sister = symbols('alice sister')\n    equation1 = Eq(alice, 2 * sister)\n    equation2 = Eq(alice + 10 + sister + 10, 53)\n\n    solutions = solve((equation1, equation2), (alice, sister))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "96fe43257ccf486992d5d460d0a71d9a": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n    term_difference = fifteenth_term - tenth_term\n    difference_per_term = term_difference / (15 - 10)  # Common difference\n\n    twelfth_term = tenth_term + 2 * difference_per_term\n\n    return twelfth_term\n\nans = solution()"
    ],
    "1c0ea42cfd6a4ccbbe8d53d2ca3efe95": [
        "def solution():\n    degree_x = 3\n    n = symbols('n')\n    # Since the degree is the sum of the exponents, we have 3 for x^3 and 2n for y^(2n)\n    degree_y = 2*n\n    equation = Eq(degree_x + degree_y, 5)\n    sol = solve(equation, n)\n    return sol[0]\n\nans = solution()"
    ],
    "6a672f1831e34d92bcdd43e39b7f6729": [
        "def solution():\n    cups = 45\n    milk_per_cup = 2/3\n    tea_per_cup = 3/5\n\n    total_milk = cups * milk_per_cup\n    total_tea = cups * tea_per_cup\n    \n    total_milk_tea = total_milk + total_tea\n    \n    return total_milk_tea\n\nans = solution()"
    ],
    "bce90c0bc27243dbbf3b460013299a73": [
        "def solution():\n    marks_scored = 17\n    total_marks = 20\n    \n    percentage = (marks_scored / total_marks) * 100\n    \n    return percentage\n\nans = solution()"
    ],
    "a0351e748b1c43eea23b3f8711946c24": [
        "def solution():\n    n = 10\n    nth_term = 5 * n\n    return nth_term\n\nans = solution()"
    ],
    "4971d043e24c45eea658bd168d78c5f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book_price = symbols('book_price')\n\n    # Sarah's total = 8 books + 3 pencils - £1 (since she paid more)\n    sarah_total = Eq(8 * book_price + 3 * 0.40 - 1, 0)\n    \n    # Rebecca's total = 3 books + 8 pencils\n    rebecca_total = Eq(3 * book_price + 8 * 0.40, 0)\n    \n    # Set up the equation that Sarah paid £1 more than Rebecca\n    equation = Eq((8 * book_price + 3 * 0.40) - (3 * book_price + 8 * 0.40), 1)\n\n    solution = solve(equation, book_price)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f51ebd85ffb142399f8aa45e108f8c7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    angela, bernice, candice = symbols('angela bernice candice')\n    total_cost_pence = 342  # £3.42 is 342 pence\n  \n    # Create equations based on the problem statement\n    equation1 = Eq(angela, bernice + 2)\n    equation2 = Eq(bernice, candice + 8)\n    equation3 = Eq(angela * 6 + bernice * 6 + candice * 6, total_cost_pence)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (angela, bernice, candice))\n\n    return solutions[angela]\n\nans = solution()"
    ],
    "175f3134588c438fbd11afdc6d088ab3": [
        "def solution():\n    # Given that the median is 20\n    # With the list of numbers sorted, the median is the middle number\n    # Since there are 10 numbers in the list, the median will be the average of the 5th and 6th numbers\n    # Let the 5th number be n+7 and the 6th number be n+8\n    \n    # Calculate n from the median\n    median = 20\n    n = (median * 2 - 15) / 2\n    \n    # Calculate the mean\n    # The mean is the sum of all terms divided by the number of terms\n    numbers = [n, n+2, n+3, n+5, n+7, n+8, n+11, n+14, n+16, n+19]\n    mean = sum(numbers) / len(numbers)\n\n    return mean\n\nans = solution()"
    ],
    "c73139012b3a4617bcdf34be499ab519": [
        "def solution():\n    n = 100\n    ans = n * (n + 1) // 2\n    return ans\n\nans = solution()"
    ],
    "93002079121d48f6aea4f803b68b139d": [
        "def solution():\n    # The three consecutive numbers can be defined as n, n+1, and n+2\n    # Their sum is 3n + 3 = 60\n    # Solving for n, we get n = (60 - 3) / 3\n    n = (60 - 3) // 3\n    # The largest number is n+2\n    return n + 2\n\nans = solution()"
    ],
    "f63a917efc384a819f65597f5c2cdf8e": [
        "def solution():\n    total_volume = 10  # total litre of orange juice\n    container_volume = 2  # litres for each container\n    num_containers = total_volume / container_volume  # calculate the number of containers needed\n    return num_containers\n\nans = solution()"
    ],
    "0d1b0c5f7803452da1653f98e4626d11": [
        "def solution():\n    return 427 // 7\n\nans = solution()"
    ],
    "f64bb6d575274f2eb7aed9c54b618daf": [
        "def solution():\n    # Let a, b, c be the weights of the apples, with a < b < c.\n    # Mean weight of the remaining two apples after eating the largest one (c):\n    # (a + b) / 2 = 70 => a + b = 140\n\n    # Mean weight of the remaining two apples after eating the lightest one (a):\n    # (b + c) / 2 = 105 => b + c = 210\n\n    # We now have two equations:\n    # 1. a + b = 140\n    # 2. b + c = 210\n    # We want to find the value of c - a.\n\n    # Since Tim has three apples and we know the sum of the lightest two and the heaviest two,\n    # we can calculate the total sum of all three apples by adding equations (1) and (2), and then\n    # dividing by 2, because b is counted twice, once in each equation.\n\n    total_weight = (140 + 210) // 2  # Total weight of a + b + c\n    weight_c = total_weight - 140  # c = (a + b + c) - (a + b)\n    weight_a = total_weight - 210  # a = (a + b + c) - (b + c)\n\n    # Weight difference between the heaviest apple and lightest apple\n    weight_diff = weight_c - weight_a\n\n    return weight_diff\n\nans = solution()"
    ],
    "8aa228a35f9341e2ba3ad7168a64568b": [
        "def solution():\n    for num in range(1, 10):  # single-digit numbers from 1 to 9\n        new_num = int(str(num) + '0')\n        if new_num - num == 27:\n            return num\n\nans = solution()"
    ],
    "7be31461e97f4911bea77bc2fc190e08": [
        "def solution():\n    first_term = 2\n    common_difference = 4\n    n = 11  # 11th student\n\n    nth_term = first_term + (n - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "888de29c136b4d85b33e27c600d1d94a": [
        "def solution():\n    nate_age = 11\n    sister_age = nate_age + 2\n    return sister_age\n\nans = solution()"
    ],
    "ae79c827ac84468cbfe680efa5f4322f": [
        "def solution():\n    # As the fox is always the 3rd in line regardless of the direction,\n    # the array must be of 3x3 size to satisfy this condition.\n    # This is because the fox must be at the center of the array.\n    # Therefore, there are 3 rows and 3 columns.\n    rows = 3\n    columns = 3\n\n    # The total number of animals is the number of rows multiplied by the number of columns.\n    total_animals = rows * columns\n\n    return total_animals\n\nans = solution()"
    ],
    "a45e4fa740df4a7baa653312b07f2227": [
        "def solution():\n    plum_trees = 41\n    distance_between_plum_trees = 4\n    distance_between_pine_trees = 5\n\n    total_length = (plum_trees - 1) * distance_between_plum_trees\n\n    pine_trees = (total_length // distance_between_pine_trees) + 1\n\n    return pine_trees\n\nans = solution()"
    ],
    "b502e3de36614cb6b890c32cf02729c5": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    A = symbols('A')\n\n    # The sum of digits in each column is the same as A.\n    equation1 = Eq(1 + 2, A)\n    equation2 = Eq(6 + A, 10 + A // 10)\n    equation3 = Eq(8 + A // 10, A)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (A))\n\n    return int(solutions[A])\n\nans = solution()"
    ],
    "004ab338da1a4dada61e061cc3b9f844": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    one_cent, two_cent, five_cent = symbols('one_cent two_cent five_cent')\n\n    # Create the equations based on the problem statement\n    # 6 one-cent coins have the same height as 5 two-cent coins: 6 * one_cent = 5 * two_cent\n    # 4 one-cent coins have the same height as 3 five-cent coins: 4 * one_cent = 3 * five_cent\n    # Total number of coins used is 124: one_cent + two_cent + five_cent = 124\n\n    equation1 = Eq(6 * one_cent, 5 * two_cent)\n    equation2 = Eq(4 * one_cent, 3 * five_cent)\n    equation3 = Eq(one_cent + two_cent + five_cent, 124)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (one_cent, two_cent, five_cent))\n\n    # Calculate the total value using the solution\n    total_value = solutions[one_cent] + 2 * solutions[two_cent] + 5 * solutions[five_cent]\n\n    return total_value\n\nans = solution()"
    ],
    "6fd47ac3b3fb42dca4192701b2a036bb": [
        "def solution():\n    ans = 245 / 5\n    return int(ans)\n\nans = solution()"
    ],
    "4f74241972d3482ca774dea7319f446e": [
        "def solution():\n    smallest_multiple = (100 // 11 + 1) * 11\n    largest_multiple = (300 // 11) * 11\n    return smallest_multiple + largest_multiple\n\nans = solution()"
    ],
    "a5d9770a94fa4709a356e767867213ac": [
        "def solution():\n    incorrect_total_salary = 4000 * 12\n    incorrect_salary = 2800\n    correct_salary = 3040\n    correct_total_salary = incorrect_total_salary - incorrect_salary + correct_salary\n    correct_average_salary = correct_total_salary / 12\n    return correct_average_salary\n\nans = solution()"
    ],
    "384f0b70b2a44ba7beb5d3d58e5f61b3": [
        "def solution():\n    total_members = 17\n    non_shaking_members = 4\n    \n    # Total handshakes without restrictions by formula n*(n-1)/2\n    total_handshakes = total_members * (total_members - 1) // 2\n    \n    # Handshakes not happening because 4 members didn't shake hands with each other: 4*(4-1)/2\n    non_shaken_handshakes = non_shaking_members * (non_shaking_members - 1) // 2\n    \n    # Subtracting the unaccounted handshakes from the total\n    handshakes = total_handshakes - non_shaken_handshakes\n    \n    return handshakes\n\nans = solution()"
    ],
    "ed97e5e57d5b40ec8113dcb104438e54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b = symbols('a b')  # Let a be the initial amount of water in Container A\n\n    # Equation: A had 350 mL more than B originally\n    equation1 = Eq(a, b + 350)\n\n    # Equation: After spilling 500 mL, B had twice as much as A\n    equation2 = Eq(b, 2 * (a - 500))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[a]\n\nans = solution()"
    ],
    "dae17711b2cd4d8882ad91e169803384": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    durian, honeydew = symbols('durian honeydew')\n\n    equation1 = Eq(2*durian + 3*honeydew, 77)\n    equation2 = Eq(durian, 2*honeydew)\n\n    solutions = solve((equation1, equation2), (durian, honeydew))\n\n    return solutions[durian]\n\nans = solution()"
    ],
    "9bdf1b39c69d40c192cf8573177c7066": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(17*x - 3*(6 + x), 9*x + 32)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a3c32223f3b045ae854ecf8d286778e6": [
        "def solution():\n    max_red_pens = 0\n    for green_pens in range(1, 100):\n        blue_pens = 2 * green_pens / 5\n        red_pens = green_pens / 4\n        if blue_pens.is_integer() and red_pens.is_integer():\n            total_pens = blue_pens + green_pens + red_pens\n            if total_pens < 100 and red_pens > max_red_pens:\n                max_red_pens = int(red_pens)\n    return max_red_pens\n\nans = solution()"
    ],
    "25c62dcd851e4ad1b5f7189dcfb4ed2b": [
        "def solution():\n    initial_amount = 200\n    books_spent = initial_amount * 0.25\n    remaining_after_books = initial_amount - books_spent\n    dvd_spent = remaining_after_books * 0.20\n    remaining_after_dvd = remaining_after_books - dvd_spent\n\n    return remaining_after_dvd\n\nans = solution()"
    ],
    "0eb5531c437b4567aef0bba6c28958a4": [
        "def solution(m):\n    monthly_production = m / 12\n    return monthly_production\n\nans = solution(m)"
    ],
    "e8a29ad030a44c90b8487dcc6ab6265a": [
        "def solution():\n    for i in range(999999, 100000, -1):\n        if str(i) == str(i)[::-1] and i % 6 == 0:\n            return i\n\nans = solution()"
    ],
    "3f99ba9a016d4255a61b7cc828b2284d": [
        "def solution():\n    initial_boys = 216\n    initial_girls = 153\n    children_joined = 37\n\n    total_children_after_hour = initial_boys + initial_girls + children_joined\n    \n    return total_children_after_hour\n\nans = solution()"
    ],
    "e990e7f85afe4ec8b4a88f34ca128f91": [
        "def solution():\n    cans_per_day = 42 / 6\n    cans_in_9_days = cans_per_day * 9\n    return cans_in_9_days\n\nans = solution()"
    ],
    "3d026487768a4329970e9623128a6980": [
        "def solution():\n    return 56 + 78 + 44 + 22\n\nans = solution()"
    ],
    "b0e8486e84644676b58c927c2f5c98ee": [
        "def solution():\n    desired_length = 1.83  # in meters\n    too_short = 0.10  # 10 cm converted to meters\n    piece_length = desired_length - too_short\n    return piece_length\n\nans = solution()"
    ],
    "5ed239080ded493396d3231a4454902f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'x' be the original number of marbles Wei Yan had.\n    x = symbols('x')\n\n    # Equation representing the problem statement\n    equation = Eq(((x - 3/8*x) - 5/7*(x - 3/8*x)) + 408, 2*x)\n\n    # Solve the equation for x\n    original_marbles = solve(equation, x)\n\n    return original_marbles[0]\n\nans = solution()"
    ],
    "3bd10f66a047470cb619292f83def4bd": [
        "def solution():\n    # Since sold pins and the remaining needles are equal\n    # Let the remaining needles be 'x'\n    # total pins and needles at first = 2540\n    # sold pins = 1820\n    # sold needles = (4/5) * total needles\n    # Remaining needles = total needles - sold needles\n    # Therefore, remaining needles also equals the remaining pins (which is the initial pins minus sold pins)\n    # Hence, we set up the equation:\n    # (total needles - (4/5) * total needles) = (total pins and needles - total needles - sold pins)\n    \n    from sympy import symbols, Eq, solve\n\n    total_needles = symbols('total_needles')\n    \n    # total needles minus the sold needles portion which is equal to the remaining pins\n    equation = Eq(total_needles - (4/5) * total_needles, 2540 - total_needles - 1820)\n    \n    # Solve the equation to find the total number of needles\n    total_needles_solution = solve(equation, total_needles)[0]\n    \n    # Find the number of needles left after selling 4/5 of them\n    needles_left = total_needles_solution - (4/5) * total_needles_solution\n\n    return needles_left\n\nans = solution()"
    ],
    "4e932e68be27467ea297053d9901fc5e": [
        "def solution():\n    pattern = [8, 8, 3, 3, 2, 5]\n    pattern_length = len(pattern)\n    pattern_sum = sum(pattern)\n    full_patterns = 41 // pattern_length\n    remaining_numbers = 41 % pattern_length\n\n    total_sum = full_patterns * pattern_sum + sum(pattern[:remaining_numbers])\n    return total_sum\n\nans = solution()"
    ],
    "5a0d6b60b12e4a5fa3381f303b4ec98e": [
        "def solution():\n    return (2/7) * 315\n\nans = solution()"
    ],
    "c7a29e2ef9654a2a957ff7a2cb12c3aa": [
        "def solution():\n    count = 0\n    for two_p in range(0, 24):  # As 2 * 24 = 48 which is greater than 47\n        for five_p in range(0, 10):  # As 5 * 10 = 50 which is greater than 47\n            if 2 * two_p + 5 * five_p == 47:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "ce5f19623c5a44689e7c49754192cf5a": [
        "def solution():\n    num1 = (9 + 10 + 11) / 8\n    num2 = (10 + 11 + 12) / 9\n    num3 = (11 + 12 + 13) / 10\n    num4 = (12 + 13 + 14) / 11\n\n    denom1 = 1 / 8\n    denom2 = 1 / 9\n    denom3 = 1 / 10\n    denom4 = 1 / 11\n\n    numerator = (num1 - num2 + num3 - num4)\n    denominator = (denom1 - denom2 + denom3 - denom4)\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "98c9966f7fd249d7beb63974bfe3742c": [
        "def solution():\n    # initial ages of Brian and his father\n    brian_age = 14\n    father_age = 41\n\n    # difference between their ages\n    age_diff = father_age - brian_age\n\n    # we are looking for a future age, so start searching from current age\n    for b in range(brian_age + 1, age_diff):\n        f = b + age_diff  # father's future age\n        if str(b)[::-1] == str(f):\n            return b\n\nans = solution()"
    ],
    "591840ca7c7b45a5bd7b76b65a763eeb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(52 - (4*x - 3), 47)\n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "ef45cb41c0684c548c0b00944deb7b6e": [
        "def solution():\n    count = 0\n    for x1 in range(1, 11):\n        for x2 in range(1, 11 - x1):\n            x3 = 11 - x1 - x2\n            if x1 >= 1 and x2 >= 1 and x3 >= 1:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "7a275792c5364908a3e7b3c7c4d8f6af": [
        "def solution():\n    num1 = 654876\n    num2 = 279745\n    \n    num1_rounded = round(num1, -2)\n    num2_rounded = round(num2, -2)\n    \n    estimated_difference = num1_rounded - num2_rounded\n    \n    return estimated_difference\n\nans = solution()"
    ],
    "9aae6b402ba548c6930873d942339f30": [
        "def solution():\n    time_to_pass = 16  # time to pass the tree in seconds\n    length_of_train = 480  # length of the train in meters\n\n    # Speed = Distance / Time\n    speed_of_train = length_of_train / time_to_pass\n\n    return speed_of_train  # speed of the train in meters per second\n\nans = solution()"
    ],
    "58b3af9d6c964137b1edfb53c29428ea": [
        "def solution():\n    numbers = [1, 2, 3, 4, 5, 4, 3, 2, 1]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "80a6303359124d99934818dd22810e2e": [
        "def solution():\n    ans = 49 + 83\n    return ans\n\nans = solution()"
    ],
    "fbf2d88569644819af3dd38084210d8b": [
        "def solution():\n    cost_per_kg = 3.60 / 2.5\n    cost_for_3_5_kg = cost_per_kg * 3.5\n    return cost_for_3_5_kg\n\nans = solution()"
    ],
    "20e6b2c641d34326ba0e011da65e2397": [
        "def solution():\n    ans = 20.6 + 5.2 + 1.4 + 4.8\n    return ans\n\nans = solution()"
    ],
    "2fb1bc8c622247da958854a407c487b9": [
        "def solution():\n    frac = 2/5\n    whole_number = 30\n    ans = frac * whole_number\n    return ans\n\nans = solution()"
    ],
    "4b78873d37fb432ca3d3cbcd97a41dd1": [
        "def solution():\n    ways = 0\n    for x1 in range(1, 8):\n        for x2 in range(1, 8):\n            if x1 + x2 == 8 and x1 != x2:\n                ways += 1\n    # Since every pair is counted twice, we halve the count\n    ways = ways // 2\n\n    # Now to count how many ways to split into more than 2 parts\n    # For 3 parts\n    for x1 in range(1, 8):\n        for x2 in range(1, 8):\n            for x3 in range(1, 8):\n                if x1 + x2 + x3 == 8 and len(set([x1, x2, x3])) == 3:\n                    ways += 1\n\n    # For 4 parts\n    for x1 in range(1, 8):\n        for x2 in range(1, 8):\n            for x3 in range(1, 8):\n                for x4 in range(1, 8):\n                    if x1 + x2 + x3 + x4 == 8 and len(set([x1, x2, x3, x4])) == 4:\n                        ways += 1\n\n    # For 5 parts\n    for x1 in range(1, 8):\n        for x2 in range(1, 8):\n            for x3 in range(1, 8):\n                for x4 in range(1, 8):\n                    for x5 in range(1, 8):\n                        if x1 + x2 + x3 + x4 + x5 == 8 and len(set([x1, x2, x3, x4, x5])) == 5:\n                            ways += 1\n\n    # For 6 parts\n    for x1 in range(1, 8):\n        for x2 in range(1, 8):\n            for x3 in range(1, 8):\n                for x4 in range(1, 8):\n                    for x5 in range(1, 8):\n                        for x6 in range(1, 8):\n                            if x1 + x2 + x3 + x4 + x5 + x6 == 8 and len(set([x1, x2, x3, x4, x5, x6])) == 6:\n                                ways += 1\n\n    # For 7 parts, there is only one way, which is 1+1+1+1+1+1+1\n    ways += 1\n    \n    return ways\n\nans = solution()"
    ],
    "6b573c8aa446405c9ce58ca024a8db57": [
        "def solution():\n    fraction = 5 / 8\n    number = 4000\n\n    ans = fraction * number\n\n    return ans\n\nans = solution()"
    ],
    "3b599d1537964d4d8232681ee0808bca": [
        "def solution():\n    distance_between_lampposts = 8\n    number_of_lampposts = 113\n    length_of_road = (number_of_lampposts - 1) * distance_between_lampposts\n    return length_of_road\n\nans = solution()"
    ],
    "67f220877e984c29ad61b7f41c214535": [
        "def solution():\n    ans = (10 ** 5) / (5 ** 5)\n    return ans\n\nans = solution()"
    ],
    "48554051f2e24553a7af8d7920ec5816": [
        "def solution():\n    failed = 14\n    total_pupils = 40\n    failed_percentage = (failed / total_pupils) * 100\n    return failed_percentage\n\nans = solution()"
    ],
    "5f04cbde7c154926a18bd9d4d73e17bf": [
        "def solution():\n    erased_sum = 0\n    for number in range(1, 51):\n        if '3' in str(number):\n            erased_sum += number\n    return erased_sum\n\nans = solution()"
    ],
    "66221e9a8b3746c485f75a9f4a5d0ddb": [
        "def solution():\n    pastas = 4\n    sauces = 3\n    toppings = 3\n\n    combinations = pastas * sauces * toppings\n\n    return combinations\n\nans = solution()"
    ],
    "7ef36b5f0f06421e85d5adcf3d61a56c": [
        "def solution():\n    # In the worst case scenario, the warden would try all keys for the first door,\n    # then all remaining keys for the second door, and so on, until only one key is left for the last door.\n    # The number of tries would be sum of a descending arithmetic series.\n    num_keys = 10\n    max_tries = sum(range(1, num_keys + 1))  # Sums up 10, 9, 8, ..., 2, 1\n    return max_tries\n\nans = solution()"
    ],
    "a54ae46dec7f42e29795d23b9ef90715": [
        "def solution():\n    numbers = [0.89, 0.9, 0.17, 0.72, 0.73]\n    largest = max(numbers)\n    smallest = min(numbers)\n    return largest - smallest\n\nans = solution()"
    ],
    "5ffbee4470f04187ad886c281d595cc1": [
        "def solution():\n    total_guests = 153\n    bag_size = 12\n\n    poppers_needed = total_guests % bag_size\n\n    poppers_left = bag_size - poppers_needed\n\n    return poppers_left\n\nans = solution()"
    ],
    "66eeed32cf3f4adc8bdbd45de1710156": [
        "def solution():\n    from sympy import root, Rational\n\n    numerator = root(Rational(-40, 3), 3) * (Rational(409, 99))**2\n    denominator = Rational(5924, 100) - root(Rational(111, 9), 2)\n\n    result = numerator / denominator\n\n    return round(float(result), 3)\n\nans = solution()"
    ],
    "d6c0469e3c2e4cf7ada3a095234ebb1c": [
        "def solution():\n    # Create a long string of the concatenated numbers from 1 to 30\n    number_string = ''.join(str(i) for i in range(1, 31))\n    \n    # Since we want the smallest number after removing 46 characters,\n    # we remove the digits from the back since it creates the smallest number\n    smallest_number_after_removal = number_string[:-46]\n\n    # Convert the remaining string back to an integer\n    ans = int(smallest_number_after_removal)\n\n    return ans\n\nans = solution()"
    ],
    "5e5e594f0cb646f382c3348317a05dec": [
        "def solution():\n    for num in range(999, 99, -1):\n        if num % 5 == 3 and num % 6 == 2 and num % 7 == 1:\n            return num\n\nans = solution()"
    ],
    "8523b28be59d40be8d747baa32fe31b2": [
        "def solution():\n    # The pattern of the ones digit of powers of 7 is periodic with a period of 4: 7, 9, 3, 1\n    period = 4\n    # Finding the equivalent power of the last digit in the 4-period cycle for 2023 sevens\n    equivalent_power = 2023 % period\n    # ones_digit_pattern = [7, 9, 3, 1] but since it is zero-indexed we will shift by 1 to get proper index\n    equivalent_power = equivalent_power - 1 if equivalent_power != 0 else 3\n    \n    # Corresponding ones digit for the equivalent power\n    ones_digit_pattern = [7, 9, 3, 1]\n    ans = ones_digit_pattern[equivalent_power]\n    \n    return ans\n\nans = solution()"
    ],
    "e47aa6dbf96a4f8f919752049304b476": [
        "def solution():\n    # Least 5-digit palindrome number\n    least_5_digit = 10001\n    \n    # Greatest 6-digit palindrome number\n    greatest_6_digit = 999999\n    \n    # Calculate the difference\n    difference = greatest_6_digit - least_5_digit\n    \n    return difference\n\nans = solution()"
    ],
    "dd388341dc404def898b956143854ae5": [
        "from math import comb\n\ndef solution():\n    total_children = 10\n    pick_children = 2\n\n    ans = comb(total_children, pick_children)\n    \n    return ans\n\nans = solution()"
    ],
    "f189c3cfa2ce4635aec8a32b63b8d264": [
        "def solution():\n    boys = 20\n    total_members = boys * 4  # Since boys represent 1/4 of the members\n    girls = total_members * (3/4)  # Since 3/4 of the members are girls\n    return int(girls)\n\nans = solution()"
    ],
    "4f5cb4eaf89140bd9217b1719727dd6c": [
        "def solution():\n    return (32 - 15) - 12\n\nans = solution()"
    ],
    "adb16ed119df40bda080aaed7ef8ac1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, apple = symbols('banana apple')\n\n    equation1 = Eq(2*banana + 3*apple, 1.50)\n    equation2 = Eq(3*banana + 2*apple, 1.45)\n\n    solutions = solve((equation1, equation2), (banana, apple))\n    banana_price = solutions[banana]\n    apple_price = solutions[apple]\n\n    annabella_pays = banana_price + apple_price\n\n    return annabella_pays\n\nans = solution()"
    ],
    "889138baccd24c1b9eb080bdb667f596": [
        "def solution():\n    sara_age = 8\n    lucy_age = 36\n    years_later = 0\n    while True:\n        if (sara_age + lucy_age) == 60:\n            break\n        sara_age += 1\n        lucy_age += 1\n        years_later += 1\n    return years_later\n\nans = solution()"
    ],
    "e097362981d0409885ba18d30b163d07": [
        "def solution():\n    return 11 + 17 + 9 - 7 + 12 + 8\n\nans = solution()"
    ],
    "540be23e94244c70aad6ecd37c304418": [
        "def solution():\n    two_seater_benches = 6\n    three_seater_benches = 9\n\n    total_seats = (two_seater_benches * 2) + (three_seater_benches * 3)\n\n    return total_seats\n\nans = solution()"
    ],
    "468559e91e614d4bae2de59111f672af": [
        "def solution():\n    book_cost = 15.49\n    # Assume \"pay only with £1 coins\" means you pay with an amount just enough to cover the book cost.\n    # Since you can't pay in fractions of a coin, we round the cost up to the nearest whole number.\n    paid_amount = int(book_cost) + 1 if book_cost % 1 > 0 else int(book_cost)\n    change = paid_amount - book_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "ac29be7b853c4812bccecb19739c2026": [
        "def solution():\n    # Initialize the sum\n    ans = 0\n    sign = 1 # Start with a positive sign\n\n    # Loop through the sequence, alternating signs and summing the numbers\n    for num in range(99, 120, 2): # Start at 99, end before 120, step by 2\n        ans += num * sign\n        sign *= -1 # Alternate the sign\n\n    return ans\n\nans = solution()"
    ],
    "216cb1366d314b5dbd12758607304eb7": [
        "def solution():\n    # Convert mixed fraction to improper fraction\n    improper_fraction = 201 * 7 + 1  # (201 * 7) + 1/7\n\n    # Perform the division\n    divided_result = improper_fraction / (8 * 7)  # Divide by 8 and 7 separately\n\n    # Subtract the fraction part to get A\n    A = divided_result - (1 / 7)\n\n    return A\n\nans = solution()"
    ],
    "680ddbe0ce3c49ce854bcd2f1ea66237": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    footballs, basketballs = symbols('footballs basketballs')\n    original_ratio = Eq(footballs, 2/5 * basketballs)\n    new_ratio = Eq(footballs, 2/3 * (basketballs - 16))\n    \n    solutions = solve((original_ratio, new_ratio), (footballs, basketballs))\n    \n    return solutions[footballs] + solutions[basketballs]\n\nans = solution()"
    ],
    "04c5b12aa7f042fabd03ff53cb7e08e1": [
        "def solution():\n    marshmallows_per_minute = 5\n    minutes = 5\n\n    total_marshmallows = marshmallows_per_minute * minutes\n\n    return total_marshmallows\n\nans = solution()"
    ],
    "ce3e27f032134ea699180a318687918c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    older_now, younger_now = symbols('older_now younger_now')\n    equation1 = Eq(older_now - younger_now, younger_now - 12)\n    equation2 = Eq(older_now + (older_now - younger_now), 27)\n\n    solutions = solve((equation1, equation2), (older_now, younger_now))\n\n    return solutions[older_now]\n\nans = solution()"
    ],
    "7e57b2275ee24957a6f27d1a194a17fe": [
        "def solution():\n    # To ensure Rona can have a pair in the same color, she needs to account for the worst-case scenario:\n    # She could pick one glove of each color without getting a matching pair.\n    # So after picking one glove of each color (5 gloves), the next glove she picks, no matter the color,\n    # will guarantee a pair of the same color.\n    \n    colors = 5  # There are 5 different colors.\n    gloves_to_pick_for_worst_case = colors * 1  # One of each color.\n    sure_pair = 1  # The next glove will create a sure pair.\n\n    # The total number of gloves Rona must take out to ensure a pair of gloves in the same color\n    total_gloves = gloves_to_pick_for_worst_case + sure_pair\n    return total_gloves\n\nans = solution()"
    ],
    "01951c851f4d440aa5d5a49d736fb69d": [
        "def solution():\n    first_multiple = -(-30 // 8)  # Ceiling division to find the first multiple of 8 that is >= 30\n    last_multiple = 82 // 8  # Floor division to find the last multiple of 8 that is <= 82\n    ans = last_multiple - first_multiple + 1  # +1 because the range is inclusive\n    return ans\n\nans = solution()"
    ],
    "c6d0a3426bdd48c09f8e5ed6be864293": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    sam, peter = symbols('sam peter')\n\n    # Given information\n    # Sam had 40 stickers more than Peter initially\n    equation1 = Eq(sam, peter + 40)\n\n    # Sam gave 20% of his stickers to Peter\n    # Peter gave 25% of his stickers to Sam\n    # In the end, Sam had 96 stickers more than Peter\n    equation2 = Eq(sam - 0.20 * sam + 0.25 * (peter + 0.20 * sam), peter + 0.20 * sam - 0.25 * (peter + 0.20 * sam) + 96)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sam, peter))\n\n    # Return the value of Peter's stickers initially\n    return solutions[peter]\n\nans = solution()"
    ],
    "32eb233b7b8648fc98ae6c8e1000cce8": [
        "def solution():\n    n_lines = 13\n    max_junctions = n_lines * (n_lines - 1) // 2\n    return max_junctions\n\nans = solution()"
    ],
    "3127ad21500549f99d1530b6020f645c": [
        "def solution():\n    original_price = 120\n    price_after_increase = original_price * (1 + 10 / 100)\n    price_after_decrease = price_after_increase * (1 - 10 / 100)\n    return price_after_decrease\n\nans = solution()"
    ],
    "5a2adc2e38cb4df2b6461fbcb699d0a0": [
        "def solution():\n    # Convert time into hours (7.2 minutes / 60 minutes/hour)\n    time_spent_hours = 7.2 / 60\n\n    # Let the length of the line be x km.\n    # The teacher spent some time t1 to reach the head of the team and t2 to come back.\n    # For the head of the team: distance = speed * time => x = 8 * t1\n    # For the teacher: distance = speed * time\n    # Going towards the head: x = 12 * t1\n    # Coming back: x = 12 * (time_spent_hours - t1) - 8 * (time_spent_hours - t1)\n    # x = 12 * time_spent_hours - 12 * t1 - 8 * time_spent_hours + 8 * t1\n    # Combining both equations: 12 * t1 - 8 * t1 = 12 * time_spent_hours - x - 8 * time_spent_hours\n    # 4 * t1 = 12 * time_spent_hours - 8 * time_spent_hours - x\n    # t1 = (4 * time_spent_hours - x) / 4\n    # But we also know that x = 8 * t1 from the first equation\n    # Thus, 8 * t1 = 8 * ((4 * time_spent_hours - x) / 4)\n    # x = 2 * time_spent_hours - x/4\n    # x + x/4 = 2 * time_spent_hours\n    # (5/4) * x = 2 * time_spent_hours\n    # x = (2 * time_spent_hours) / (5/4)\n    # x = (2 * time_spent_hours) * 4/5\n    # x = (2 * 7.2/60) * 4/5 km\n\n    x_length_of_the_line = (2 * 7.2 / 60) * 4 / 5\n    return x_length_of_the_line\n\nans = solution()"
    ],
    "3117c2400ae549259f555f986ce29058": [
        "def solution():\n    # Calculate the number of games in the group stage for a single group\n    # using the formula n * (n - 1) / 2 for a round-robin tournament with n participants\n    # each of the 4 groups has 4 participants\n    group_games_per_group = 4 * (4 - 1) // 2\n    total_group_games = group_games_per_group * 4  # 4 groups in total\n\n    # Calculate the number of games in the knockout stage\n    # There are 8 participants, which means 7 games (quarter-finals, semi-finals, final, and third place)\n    knockout_games = 8 - 1  # Top 8, top 4, top 2, and third place match\n\n    # Total games are the sum of group stage games and knockout stage games\n    total_games = total_group_games + knockout_games\n\n    return total_games\n\nans = solution()"
    ],
    "83eeb3967efd4f44ae944aeda3665452": [
        "def solution():\n    return 1.3 + 2.87 + 3.7\n\nans = solution()"
    ],
    "e72ae7b5041949c2b5780adfc4f7a4d6": [
        "def solution():\n    # Flora's age this year\n    flora_age = 5\n\n    # Flora's age two years ago\n    flora_age_two_years_ago = flora_age - 2\n\n    # Father's age two years ago\n    father_age_two_years_ago = 9 * flora_age_two_years_ago\n\n    # Father's age this year\n    father_age = father_age_two_years_ago + 2\n\n    return father_age\n\nans = solution()"
    ],
    "a10dc724d9ee4196877466390813cdbe": [
        "def solution():\n    possible_sweets = [i for i in range(31, 40) if i % 4 == 0 and i % 6 == 0]\n    return possible_sweets[0]  # There should be only one such number in the range.\n\nans = solution()"
    ],
    "3e2cfeed3b034453a6cd4c890991cff6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bugcat, pusheen, doggo = symbols('bugcat pusheen doggo')\n\n    equation1 = Eq(bugcat, 5 * pusheen)\n    equation2 = Eq(bugcat, doggo + 53)\n    equation3 = Eq(bugcat + pusheen + doggo, 189)\n\n    solutions = solve((equation1, equation2, equation3), (bugcat, pusheen, doggo))\n\n    return solutions[doggo]\n\nans = solution()"
    ],
    "f324ee4f900c4965905630c53b282ca4": [
        "def solution():\n    ans = 122.55 + 9.45 + 13.21 - 3.21\n    return ans\n\nans = solution()"
    ],
    "1191b2497aca4e478f89acd3913baa4b": [
        "def solution():\n    ans = 1.1 * (1.2 + 1.3) * 2\n    return ans\n\nans = solution()"
    ],
    "ccee253cade74bf4b980a1d6da9300b1": [
        "def solution():\n    ans = 902 - 387\n    return ans\n\nans = solution()"
    ],
    "8adc9a67754d493090774f606c1387c2": [
        "def solution():\n    count = 0\n    for i in range(8, 86):\n        count += str(i).count('3')\n    return count\n\nans = solution()"
    ],
    "92b6d681156647e98a2b8f515678090b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    distance = symbols('distance')\n\n    # Mike is 20 minutes late when he travels at 4 km/h\n    # Convert 20 minutes to hours, which is 20/60\n    time_for_4kmh = distance / 4 - 20/60\n    \n    # Mike is 10 minutes early when he travels at 6 km/h\n    # Convert 10 minutes to hours, which is 10/60\n    time_for_6kmh = distance / 6 + 10/60\n    \n    # Setting the equation where both times should have been equal\n    equation = Eq(time_for_4kmh, time_for_6kmh)\n\n    # Solve for distance\n    solution = solve(equation, distance)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "7c0a8adbe97047ac8c3d2545bed65331": [
        "def solution():\n    count = 0\n    for number in range(2, 51, 2):  # Generate the first 25 even numbers\n        count += str(number).count('3')  # Count the occurrences of digit '3' in each number\n    return count\n\nans = solution()"
    ],
    "fd011cee8c7149b08bd7a235ce74b4b0": [
        "def solution():\n    pounds_to_pence_conversion_rate = 100\n    value_in_pounds = 1.25\n    value_in_pence = value_in_pounds * pounds_to_pence_conversion_rate\n    return value_in_pence\n\nans = solution()"
    ],
    "7f5de3640130476b8479c8c57c6cceab": [
        "def solution():\n    ramen_price = 8\n    pineapple_juice_price = ramen_price - 5\n    roasted_duck_price = ramen_price * 6\n    total_price = ramen_price + pineapple_juice_price + roasted_duck_price\n    return total_price\n\nans = solution()"
    ],
    "e4bf62e1d6374c7db8fdd451a0891d39": [
        "def solution():\n    total_climbed = 7 * 5 + 3  # Climbed for 5 days and 3 meters on the 6th day\n    total_days_to_climb_out = 6  # Total days including the 6th day\n\n    # Since the snail climbs out completely on the 6th day, it does not slide back down.\n    # We calculate the height climbed taking into account the slide down every night before the 6th day.\n    height_after_sliding_down = (total_days_to_climb_out - 1) * 7 - (total_climbed - 18)\n\n    # The distance the snail slides down each night is the difference between the total climbed in a day\n    # and the net height gained after sliding down for the days before the 6th day.\n    slide_down_per_night = 7 - height_after_sliding_down\n\n    return slide_down_per_night\n\nans = solution()"
    ],
    "d2ad7065c3964fdb85960dd64b7389fe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    roses, tulips, sunflowers = symbols('roses tulips sunflowers')\n\n    equation1 = Eq(tulips, 3 * roses)\n    equation2 = Eq(sunflowers, roses + 40)\n    equation3 = Eq(roses + tulips + sunflowers, 590)\n\n    solutions = solve((equation1, equation2, equation3), (roses, tulips, sunflowers))\n\n    return solutions[roses]\n\nans = solution()"
    ],
    "aea05f0dcdd04e4c903d863ad3465317": [
        "from itertools import permutations\n\ndef solution():\n    unique_permutations = set(permutations(\"CYZZ\"))\n    return len(unique_permutations)\n\nans = solution()"
    ],
    "c03d7d32adb849f8813c089f2f3caaaa": [
        "def solution():\n    ans = 24 * 25 * 31\n    return ans\n\nans = solution()"
    ],
    "c49b5ae0746f481e9831c9c0d1d6f386": [
        "def solution():\n    # Convert all the measurements to centimeters\n    in_meters_to_cm = 5 * 100  # 5m to cm\n    in_cm = 120  # Already in cm\n    in_mm_to_cm = 50 / 10  # 50mm to cm\n    # Assuming 1 foot is 30.48cm\n    in_feet_to_cm = 8 * 30.48  # 8 feet to cm\n\n    # Assuming the height of a pupil is in the range of 100cm to 200cm\n    height_range = range(100, 201)\n\n    # Check which conversions fall within the typical height range for pupils\n    correct_estimations = [h for h in [in_meters_to_cm, in_cm, in_mm_to_cm, in_feet_to_cm] if h in height_range]\n    \n    # Return the number of correct estimations\n    return len(correct_estimations)\n\nans = solution()"
    ],
    "26234260bf8544e8be9832159593b76c": [
        "def solution():\n    # Let the number of boys be 'b' and the number of girls be '3b' (since there are 3 times as many girls as boys)\n    # Each girl takes 2 paintbrushes, and each boy takes 3 paintbrushes\n    # Therefore, the total number of paintbrushes taken is 2*(3b) + 3*b = 99\n\n    # We can set up the equation: 2*(3b) + 3*b = 99 and solve for 'b'\n    # 6b + 3b = 99\n    # 9b = 99\n    # b = 99 / 9\n    b = 99 / 9\n\n    # Number of girls is 3 times the number of boys\n    num_girls = 3 * b\n\n    return int(num_girls)\n\nans = solution()"
    ],
    "f5e0a986e3934f67ba17ff2b35ad8068": [
        "def solution():\n    m = 12**2\n    n = 3**2 * 2**3\n    return m + n\n\nans = solution()"
    ],
    "2c231e6d73964ddb90cae67a6e2c06ca": [
        "def solution():\n    total_boys = 18\n    total_girls = 12\n    average_boys = 74\n    average_total = 82\n    \n    total_score_all = (total_boys + total_girls) * average_total\n    total_score_boys = total_boys * average_boys\n    total_score_girls = total_score_all - total_score_boys\n    average_girls = total_score_girls / total_girls\n    \n    return average_girls\n\nans = solution()"
    ],
    "1f89b3dca16b41f3af194d672af50912": [
        "def solution():\n    from math import lcm\n    return lcm(2, 3, 5)\n\nans = solution()"
    ],
    "a6e45aae06f442f6a7eb0e90e00a24ed": [
        "def solution():\n    first_term = 124\n    common_difference = 121 - 124\n    term_number = 15\n\n    nth_term = first_term + (term_number - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "5f10a8b2ef2a4f548faa94902d80cc0f": [
        "def solution():\n    remaining_candy = 3\n    # Reverse Ken's action by doing the inverse operation\n    ken_took = (remaining_candy + 1) * 2\n    remaining_candy += ken_took\n\n    # Reverse Nini's action\n    nini_took = (remaining_candy - 3) * 2\n    remaining_candy += nini_took\n\n    # Reverse Ivy's action\n    ivy_took = (remaining_candy + 2) * 2\n    remaining_candy += ivy_took\n\n    # Reverse Eddie's action\n    eddie_took = (remaining_candy - 1) * 2\n    start_candies = remaining_candy + eddie_took\n\n    return start_candies\n\nans = solution()"
    ],
    "9cd0dd31a2934eacb9090d85b490b36e": [
        "def solution():\n    rabbits_initial = 12\n    days_initial = 15\n    rabbits_final = 20\n\n    days_final = (rabbits_initial * days_initial) / rabbits_final\n    ans = days_final\n\n    return int(ans)\n\nans = solution()"
    ],
    "6c12066021f245adb5fffd4e97a9c889": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of fish in the pond\n    x = symbols('x')\n    \n    # The proportion of marked fish in the second catch should equal\n    # the proportion of marked fish in the pond after the first catch\n    # 25/200 = 100/x\n    \n    equation = Eq(25/200, 100/x)\n\n    # Solve the equation for x\n    total_fish = solve(equation, x)\n\n    # Total fish is a list, we take the first (and in this case, only) solution\n    return total_fish[0]\n\nans = solution()"
    ],
    "40402588d4b04fcc949d1665e6d2b545": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    equation1 = Eq(girls, boys + 12)\n    equation2 = Eq(boys + girls, 100)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "1e148bc64be04bd6b16fe0c8028ec408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the amounts each person has\n    chloe, maggie, lily, george = symbols('chloe maggie lily george')\n\n    # Define the equations based on the problem statement\n    equation1 = Eq(chloe + maggie + lily, 187)\n    equation2 = Eq(maggie + lily + george, 327)\n    equation3 = Eq(george, 5 * chloe)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (chloe, maggie, lily, george))\n\n    # Calculate the total number of sweets\n    total_sweets = solutions[chloe] + solutions[maggie] + solutions[lily] + solutions[george]\n\n    return total_sweets\n\nans = solution()"
    ],
    "f4a5d0f84ea8406fbac7ecee01ee432d": [
        "def solution():\n    from math import gcd\n\n    A_students = 12\n    B_students = 16\n    C_students = 20\n\n    group_size = gcd(gcd(A_students, B_students), C_students)\n\n    return group_size\n\nans = solution()"
    ],
    "a31cc8dad19349aebe0414ae78e4bc33": [
        "def solution():\n    susan_money = 10\n    money_received = 22\n    dress_cost = 56\n\n    total_money = susan_money + money_received\n    money_needed = dress_cost - total_money\n\n    return money_needed\n\nans = solution()"
    ],
    "71033e51e28146eea6ced67678e21748": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    wakeup_time = datetime.strptime('07:40', '%H:%M')\n    breakfast_time = timedelta(minutes=25 + 10)\n    travel_time = timedelta(minutes=35)\n    late_time = timedelta(minutes=5)\n\n    arrival_time = wakeup_time + breakfast_time + travel_time + late_time\n    registration_time = arrival_time - late_time\n\n    return registration_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "bedd8521f63647f2a0a12a31cd344069": [
        "def solution():\n    salt_per_packet = 0.23\n    packets = 6\n    total_salt = salt_per_packet * packets\n    return total_salt\n\nans = solution()"
    ],
    "932b8a20d21b4686a582828ee98ca875": [
        "def solution():\n    ans = 952 + 139\n    return ans\n\nans = solution()"
    ],
    "9ff9e65c65be4e54bb20e233432fc9bb": [
        "def solution():\n    ways = 0\n    for two_gram_count in range(0, 77 // 2 + 1):\n        if (77 - 2 * two_gram_count) % 3 == 0:\n            ways += 1\n    return ways\n\nans = solution()"
    ],
    "fc9b83fecfb44012b1232f0149dad1f8": [
        "def solution():\n    # Calculate the sum of cubes from 1 to 20\n    sum_cubes_20 = (sum(range(1, 21)))**2\n    \n    # Calculate the sum of cubes from 1 to 9\n    sum_cubes_9 = (sum(range(1, 10)))**2\n    \n    # The difference will give us the sum of cubes from 10 to 20\n    ans = sum_cubes_20 - sum_cubes_9\n    return ans\n\nans = solution()"
    ],
    "3133bc72d66445bb9b6aa55994df350f": [
        "def solution():\n    total_amount = 2 + 1/2\n    num_quarters = total_amount / 0.25\n    return int(num_quarters)\n\nans = solution()"
    ],
    "ebd7e33ee05545079118ad813f66ccf7": [
        "def solution():\n    total_score_for_five_assignments = 90 * 5\n    score_of_first_four_assignments = 96 + 85 + 89 + 92\n    score_on_fifth_assignment = total_score_for_five_assignments - score_of_first_four_assignments\n    return score_on_fifth_assignment\n\nans = solution()"
    ],
    "5caaa9b1c72e4cf7b0f5d589bbf27d1a": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (4, 5), (6, 7)]\n    ans = solve_congruence(*congruences)[0]\n\n    return ans\n\nans = solution()"
    ],
    "dfae10a6a701443a9ac7f6922b150321": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    G = symbols('G')  # Number of girls in the school\n    B = G + 90        # Number of boys in the school (90 more than girls)\n    total_pupils = 1690\n\n    # Ratio of girls who can swim to those who cannot swim is 31:49\n    girls_swim = 31/80 * G      # Number of girls who can swim\n    girls_not_swim = 49/80 * G  # Number of girls who cannot swim\n\n    # Boys who can swim and cannot swim\n    boys_swim = symbols('boys_swim')       # Number of boys who can swim\n    boys_not_swim = boys_swim + 120        # Number of boys who cannot swim (120 more than can swim)\n\n    # Equation based on total number of pupils\n    equation1 = Eq(G + B, total_pupils)\n    # Equation based on number of pupils who can and cannot swim\n    equation2 = Eq(boys_swim + 120 + girls_not_swim, total_pupils)\n\n    # Solve the system of equations for the unknowns\n    solutions = solve((equation1, equation2), (G, boys_swim))\n    girls = solutions[G]\n    boys_can_swim = solutions[boys_swim]\n\n    not_swim = girls_not_swim.subs(G, girls) + boys_not_swim.subs(boys_swim, boys_can_swim)\n\n    return not_swim.evalf()\n\nans = solution()"
    ],
    "95d8e98043834da0a4c0071a63f5ea23": [
        "def solution():\n    # To ensure we have at least 5 different colors with at least 10 pencils for each color,\n    # we need to consider the worst-case scenario, where we pick 10 pencils for each of the first\n    # 4 colors and then only 1 pencil is needed to ensure the 5th color.\n\n    # Number of pencils for the first 4 colors with 10 pencils of each color\n    first_colors = 4 * 10 \n    # We need only one more pencil to ensure the 5th color\n    fifth_color = 1 \n    # Total minimum number of pencils required\n    total_pencils = first_colors + fifth_color \n\n    return total_pencils\n\nans = solution()"
    ],
    "09d73c26d27144a79753ab402d8e3506": [
        "def solution():\n    total_pupils = 200\n    pupils_per_coach = 34\n\n    coaches_needed = (total_pupils + pupils_per_coach - 1) // pupils_per_coach\n\n    return coaches_needed\n\nans = solution()"
    ],
    "3477e87e292f48ec8ee3fc913b1a71ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original number of sweets Pip had and y be the original number of sweets Bud had.\n    x, y = symbols('x y')\n    \n    # Original ratio: Pip's sweets (x) to Bud's sweets (y) is 4:7.\n    equation1 = Eq(x/y, 4/7)\n    \n    # After Santa's gift: Bud's sweets become y + 5.\n    # The new ratio of Pip's sweets to Bud's sweets is 8:15.\n    equation2 = Eq(x/(y + 5), 8/15)\n    \n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Returning Pip's number of sweets.\n    return solutions[x]\n\nans = solution()"
    ],
    "c7e71280a8ab4500a65a6e96a34fd78a": [
        "def solution():\n    perimeter = (144 + 204) * 2  # Calculate the perimeter of the field\n    wheats_on_sides = 116 - 4  # Subtract the four corner wheats\n    distance_between_wheats = perimeter / wheats_on_sides  # Find the distance between wheats\n    return distance_between_wheats\n\nans = solution()"
    ],
    "19a6283fdef941a5aa103bd8c0a0d755": [
        "def solution():\n    last_digit_of_5_power_20 = (5**20) % 10\n    last_digit_of_7_power_30 = (7**30) % 10\n\n    last_digit = (last_digit_of_5_power_20 * last_digit_of_7_power_30) % 10\n\n    return last_digit\n\nans = solution()"
    ],
    "fc68f114d75f4d00a000bd9a959d7bb8": [
        "def solution():\n    from sympy import primerange\n\n    # Generate a list of prime numbers less than 45\n    primes = list(primerange(1, 46))\n    \n    # Define candidates for A, B, and C's numbers\n    possible_As = []\n    possible_Bs = []\n    possible_Cs = []\n    \n    # Iterate through primes to find possible numbers for A, B and C based on the given information.\n    for A in primes:\n        for B in primes:\n            for C in primes:\n                if A != B and A != C and B != C:  # All numbers are different\n                    if not (A + B == C or A + C == B or B + C == A):  # Cannot form a correct addition equation\n                        if B - 1 != A + 7 and B - 1 != C + 7:  # B subtracting 1, the only number with difference 7 is not prime\n                            if 2 * C + A in primes or 2 * C + B in primes:  # Double C and add to A or B to get a prime\n                                possible_As.append(A)\n                                possible_Bs.append(B)\n                                possible_Cs.append(C)\n    \n    # Remove the duplicates by converting to sets\n    possible_As = set(possible_As)\n    possible_Bs = set(possible_Bs)\n    possible_Cs = set(possible_Cs)\n\n    # Since B knows that there is only one possibility, we need to find the B that appears only once\n    unique_Bs = [B for B in possible_Bs if possible_Bs.count(B) == 1]\n    \n    # There should be one unique B which satisfies the condition\n    if len(unique_Bs) == 1:\n        B = unique_Bs[0]\n        \n        # Find all combinations for A and C that work with the unique B\n        for A in possible_As:\n            for C in possible_Cs:\n                if B - 1 == A + 7 or B - 1 == C + 7:\n                    if A != B and A != C and B != C and (2 * C + A == B or 2 * C + B == A):\n                        # Return the sum of the three prime numbers\n                        return A + B + C\n    \n    # In case of no solution, which should not happen\n    return None\n\nans = solution()"
    ],
    "4be8de9c0cc14f33b367a9c501a90089": [
        "def solution():\n    from math import gcd\n\n    length1 = 39\n    length2 = 52\n\n    longest_piece_length = gcd(length1, length2)\n    \n    return longest_piece_length\n\nans = solution()"
    ],
    "cda998982a894cdb8077bdfb4a0b2764": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the points for each A and B grade\n    points_A, points_B = symbols('points_A points_B')\n    \n    # Simon's equation: 4A + 4B = 36\n    equation1 = Eq(4 * points_A + 4 * points_B, 36)\n    \n    # Peter's equation: 2A + 3B = 22\n    equation2 = Eq(2 * points_A + 3 * points_B, 22)\n    \n    # Solve the system of equations to find points for A and B\n    solutions = solve((equation1, equation2), (points_A, points_B))\n    \n    # Calculate the score for someone with 3 A grades and 5 B grades\n    score = 3 * solutions[points_A] + 5 * solutions[points_B]\n\n    return score\n\nans = solution()"
    ],
    "99d7b27d46844be596baf37965890e96": [
        "def solution():\n    # Joe decides to share his chocolate bar with his friend.\n    # This implies that the bar will be split between Joe and his friend.\n    # Hence, the total number of squares (16) will be divided by 2.\n    \n    total_squares = 16\n    # The result will be the number of squares Joe has after sharing.\n    joe_squares = total_squares // 2\n    \n    return joe_squares\n\nans = solution()"
    ],
    "73b357f92b7e40399f2271567c50156d": [
        "def solution():\n    number = 999\n    ans = number / 2\n    return ans\n\nans = solution()"
    ],
    "536fb0bff4d04a49a0e59a954dc6348a": [
        "def solution():\n    laura_position = 4\n    amanda_position_from_end = 7\n    children_between = 2\n\n    total_children = laura_position + children_between + amanda_position_from_end\n\n    return total_children\n\nans = solution()"
    ],
    "4741132a2a6e4fd9b62cc955675da60c": [
        "def solution():\n    count = 0\n    for i in range(1, 121):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "39ff6ce753bc44909a9a09937c88d468": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of stickers each person originally had\n    mary, alexis, charlotte = symbols('mary alexis charlotte')\n\n    # Equations based on the problem statement\n    # The initial ratio of stickers between Mary and Alexis\n    equation1 = Eq(mary, 7/5 * alexis)\n    # Both give 20% of their stickers to Charlotte\n    # hence they keep 80% of their stickers\n    equation2 = Eq(0.8 * mary, mary - charlotte + 20)\n    # Charlotte's stickers increase by 80%\n    equation3 = Eq(charlotte + 0.2 * mary + 0.2 * alexis, 1.8 * charlotte)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (mary, alexis, charlotte))\n\n    return solutions[alexis]\n\nans = solution()"
    ],
    "7217243413c449e2bad76755d71dd583": [
        "def solution():\n    people_off = 42\n    people_on = 60\n    people_after = 322\n\n    people_before = people_after - people_on + people_off\n\n    return people_before\n\nans = solution()"
    ],
    "2583cc3e3e5749a5bdc1a87f0ef8ed05": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(4 + 8 * (50 - 3 * x), 92)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "78b02b5b75964068adef771a062c712c": [
        "def solution():\n    # Eddie, mom, dad treated as one unit, so together with the rest of the family, \n    # we see how many ways to arrange the units\n    # Then multiply by number of ways Eddie, mom, and dad can arrange among themselves\n    \n    family_units_except_eddie_and_parents = 4  # Since the family has 7 members in total\n    ways_to_arrange_family_units = factorial(family_units_except_eddie_and_parents + 1)  # +1 for the Eddie-parents unit\n    ways_to_arrange_eddie_and_parents = factorial(3)\n    \n    ans = ways_to_arrange_family_units * ways_to_arrange_eddie_and_parents\n    \n    return ans\n\nfrom math import factorial\n\nans = solution()"
    ],
    "c08789bee10c46c2902b114a45c0d0a6": [
        "def solution():\n    return 34 * 100\n\nans = solution()"
    ],
    "0756d6f5711a4c54986ef915e57a0ccd": [
        "from itertools import permutations\n\ndef solution():\n    digits = '22233'\n    perm_set = set(permutations(digits, 4))\n    return len(perm_set)\n\nans = solution()"
    ],
    "8d2b72129fea4fe2bed54b1710b74200": [
        "def solution():\n    # A is the smallest prime number\n    A = 2\n    # B is the smallest composite number\n    B = 4\n    # C is neither a prime number nor a composite number or zero\n    C = 1\n    # D is 2 less than the smallest prime number\n    D = A - 2\n    # E is the largest composite number up to 10\n    E = 9\n    # F only has factors 1 and 5\n    F = 5\n    # G is the greatest factor of 8\n    G = 4\n    # H is the lowest multiple of 6.\n    H = 6\n\n    # Create the phone number\n    ans = int(f\"{A}{B}{C}{D}{E}{F}{G}{H}\")\n    \n    return ans\n\nans = solution()"
    ],
    "d4071be0f0c7425fb8d8e725d1b67417": [
        "def solution():\n    for a in range(1, 10):  # thousands and units digit (cannot be 0)\n        for b in range(0, 10):  # hundreds digit\n            for c in range(0, 10):  # tens digit\n                pip_number = 1000 * a + 100 * b + 10 * c + a  # Pip's number\n                bud_number = 1000 * c + 100 * b + 10 * a + a  # Bud's number\n                if pip_number + bud_number == 5510:\n                    return pip_number\n\nans = solution()"
    ],
    "c1c6e64207724fd1a56270ce126df35a": [
        "def solution():\n    # Let's use the relationship between cows (c), days (d) and amount of grass (g)\n    # Since the amount of grass is constant, we can say that c * d = g is a constant value\n    # We know that 25 cows for 10 days (25 * 10) is the same as 15 cows for 20 days (15 * 20)\n    # This means 250 units of grass can feed cows for a certain number of days\n\n    # Therefore, we find the \"grass\" constant g\n    g = 25 * 10  # which is equal to 15 * 20 as well\n\n    # We want to know how many cows (x) can be fed for 50 days, so we use g = x * 50\n    # Thus x = g / 50\n    x = g / 50\n\n    return x\n\nans = solution()"
    ],
    "104714b036e84a2696f951000c89ff03": [
        "def solution():\n    seconds_per_minute = 60\n    minutes_per_hour = 60\n    hours_per_day = 24\n\n    fraction_of_day = (1/4) * (1/6) * (1/8)\n    total_seconds = fraction_of_day * hours_per_day * minutes_per_hour * seconds_per_minute\n\n    return int(total_seconds)\n\nans = solution()"
    ],
    "a8439e99e6a1477cac347feb553247d6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges, lemons = symbols('oranges lemons')\n\n    initial_ratio = Eq(oranges / lemons, 3 / 5)\n    final_ratio = Eq((oranges - 48) / lemons, 1 / 2)\n\n    solutions = solve((initial_ratio, final_ratio), (oranges, lemons))\n\n    return solutions[lemons]\n\nans = solution()"
    ],
    "2ab0503d127a4c73a785328ae9680841": [
        "def solution():\n    incorrect_minuend = 116\n    correct_minuend = 166\n    incorrect_difference = 81\n\n    correct_difference = correct_minuend - (incorrect_minuend - incorrect_difference)\n\n    return correct_difference\n\nans = solution()"
    ],
    "007602e598e6490ea3de0467b56b3e6a": [
        "def solution():\n    # In the best case scenario, John reads n pages on the first day, n+1 pages on the second day, and so on.\n    # This forms an arithmetic sequence with the first term, a1 = 1 (at least one page per day)\n    # Using the formula for the sum of the first n terms of an arithmetic sequence: S = n/2 * (2*a1 + (n - 1)*d)\n    # where S is the total number of pages, a1 is the first term, n is the number of terms, and d is the common difference,\n    # we get: 95 = n/2 * (2*1 + (n - 1)*1) => simplifies to n(n+1)/2 = 95\n    \n    # Now we find the maximum integer n such that n(n+1)/2 <= 95.\n    n = 1\n    while n*(n+1)/2 <= 95:\n        n += 1\n    return n - 1  # Subtract 1 because the loop exits when n is too large\n\nans = solution()"
    ],
    "fee3950a7d754643a6574d07b8b3cb97": [
        "def solution():\n    first_day = 20\n    second_day = first_day * 3  # Since first day is 1/3 of second day\n    third_day = second_day * (5/3)  # Third day is 5/3 of second day\n\n    total_sold = first_day + second_day + third_day\n\n    return int(total_sold)\n\nans = solution()"
    ],
    "835aacd2f1bc42c084af969d3791ac9a": [
        "from math import factorial\n\ndef solution():\n    # Treat the math books as a single unit and the English books as another unit\n    # We then have 3 + 2 - 2 = 3 units (math books unit, English books unit, and 3 other books)\n    units = 3\n\n    # Calculate the permutations of the 3 units\n    unit_permutations = factorial(units)\n\n    # Calculate the permutations for the 3 maths books among themselves\n    math_book_permutations = factorial(3)\n\n    # Calculate the permutations for the 2 English books among themselves\n    english_book_permutations = factorial(2)\n\n    # Final answer is permutations of the units multiplied by the permutations within each unit\n    ans = unit_permutations * math_book_permutations * english_book_permutations\n\n    return ans\n\nans = solution()"
    ],
    "c4ecbada09354d1ab1f0f9e6e7430943": [
        "def solution():\n    original_price = 2000\n    discount = 0.30\n    member_discount = 100\n    tax_rate = 0.10\n\n    price_after_discount = original_price * (1 - discount) - member_discount\n    price_after_tax = price_after_discount * (1 + tax_rate)\n    \n    return price_after_tax\n\nans = solution()"
    ],
    "319659d1f9494d8da86df50b138ccfd5": [
        "def solution():\n    people_in_front = 7\n    people_behind = 3\n    judy = 1\n\n    total_people = people_in_front + judy + people_behind\n    \n    return total_people\n\nans = solution()"
    ],
    "f733db5ae9be4fc19b2772e1336899bf": [
        "def solution():\n    flour_per_cake = 200 / 12\n    num_cakes = 250 / flour_per_cake\n\n    return int(num_cakes)\n\nans = solution()"
    ],
    "69a10a7a8381484b8df4c3813750ce0c": [
        "def solution():\n    ivy_rate = 1/24\n    kevin_rate = 1/20\n    combined_rate = ivy_rate + kevin_rate\n    kevin_days_off = symbols('kevin_days_off')\n\n    # If Kevin did not take any days off, they would finish the job in:\n    full_work_days = 1/combined_rate\n\n    # However, they finish on the 12th day, so the equation is:\n    # (combined_rate * (12 - kevin_days_off)) + (ivy_rate * kevin_days_off) = 1 (complete job)\n    equation = Eq((combined_rate * (12 - kevin_days_off)) + (ivy_rate * kevin_days_off), 1)\n\n    # Solving for the number of days Kevin took off\n    solutions = solve(equation, kevin_days_off)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "52f7ec2008844b4b96f3e14ec5bc08c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of diamonds each person has\n    ophelia, penelope = symbols('ophelia penelope')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(ophelia, 4 * penelope)\n    equation2 = Eq(penelope + 21, (5/8) * ophelia)\n    \n    # Solve the two equations to find the values of ophelia and penelope\n    solutions = solve((equation1, equation2), (ophelia, penelope))\n    \n    # Since we want the number of diamonds Ophelia has\n    return solutions[ophelia]\n\nans = solution()"
    ],
    "91b1fa437ec640b6a726e2f243fbcdc6": [
        "def solution():\n    return 20 * (8 / 32)\n\nans = solution()"
    ],
    "a6d2722285fe41fc82cfbf38df970e88": [
        "def solution():\n    kilograms = 0.0025\n    grams_per_kilogram = 1000\n    grams = kilograms * grams_per_kilogram\n    return grams\n\nans = solution()"
    ],
    "62e6f0c8e4844cf5913cc68756ec307e": [
        "def solution():\n    total_students = 44\n    maths_competition = 30\n    art_competition = 26\n\n    both_competitions = (maths_competition + art_competition) - total_students\n    return both_competitions\n\nans = solution()"
    ],
    "0fe10f3434414681820fd105b8e64e1a": [
        "def solution():\n    remainder = 379 % 6\n    return remainder\n\nans = solution()"
    ],
    "1951c1ebe48e4ad0a4cd072379459f1d": [
        "def solution():\n    count = 0\n    for i in range(201):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "3be019225e774908af2f46af704db571": [
        "def solution():\n    # There are two colors of socks: black and red\n    num_colors = 2\n    # To ensure she gets at least one pair of the same color, she might get one of each color first\n    # Therefore, after taking out 'num_colors' socks, taking out just one more guarantees a pair of the same color.\n    socks_needed = num_colors + 1\n    \n    return socks_needed\n\nans = solution()"
    ],
    "59f40a74a46b4f6a92446fb1fe6d3f5b": [
        "from math import factorial\n\ndef solution():\n    # Number of ways to arrange n items in r places\n    # is given by n! / (n-r)!\n    n = 9 # total number of statues\n    r = 4 # number of statues to arrange\n    num_ways = factorial(n) // factorial(n - r)\n    return num_ways\n\nans = solution()"
    ],
    "2809b71b8eb74287a05d0ce2c1647a67": [
        "def solution():\n    initial_price = 0.10  # Price in pounds\n    final_price = 1.00  # Price in pounds\n\n    percent_increase = ((final_price - initial_price) / initial_price) * 100\n\n    return percent_increase\n\nans = solution()"
    ],
    "0faafc65dcc940c68dac95ff81fd8bbe": [
        "def solution():\n    bracelet_cost = 80\n    gst_rate = 0.08\n\n    total_cost = bracelet_cost * (1 + gst_rate)\n    return total_cost\n\nans = solution()"
    ],
    "ceb94cece3814f3ba7dbce87461af7eb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b represent the number of bicycles and t represent the number of tricycles.\n    b, t = symbols('b t')\n\n    # Equation 1: The total number of bicycles and tricycles is 300.\n    equation1 = Eq(b + t, 300)\n\n    # Equation 2: Each tricycle has 3 wheels, each bicycle has 2 wheels.\n    # The total number of tricycle wheels (3 * t) is 180 more than the total number of bicycle wheels (2 * b).\n    equation2 = Eq(3 * t, 2 * b + 180)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (b, t))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "0fa7fc81f75c4a438c7e27101422e437": [
        "def solution():\n    future_value = 2360\n    interest_rate = 0.06\n    number_of_years = 3\n\n    present_value = future_value / ((1 + interest_rate) ** number_of_years)\n\n    return present_value\n\nans = solution()"
    ],
    "19695e62163a49de8f347a78fa0034ec": [
        "def solution():\n    grey_rabbit_ratio = 2  # For every cycle of the pattern, there are 2 grey rabbits\n    total_cycles = 14 / grey_rabbit_ratio  # Each cycle corresponds to this many grey rabbits\n    total_rabbits_per_cycle = 1 + 2 + 2  # The sum of black, white, and grey rabbits in one cycle\n    max_rabbits = total_cycles * total_rabbits_per_cycle\n    return int(max_rabbits)\n\nans = solution()"
    ],
    "02085f3402f64823bda6f851884cad43": [
        "def solution():\n    initial_value = 120\n    depreciation_rate = 0.04\n    years = 5\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n    \n    return round(final_value, 2)\n\nans = solution()"
    ],
    "e234c915fb16462f9526941f4556b996": [
        "def solution():\n    quotient = 27\n    remainder = 9\n    # Let d be the divisor, then the dividend is given by:\n    # dividend = divisor * quotient + remainder\n    # Since we want the minimum value of the dividend, we need the smallest divisor possible.\n    # The smallest divisor possible giving a remainder of 9 is obviously 10,\n    # since a divisor less than the remainder would not leave that remainder.\n    divisor = remainder + 1\n    dividend = divisor * quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "912427a474264adaaabc2ae198e4adde": [
        "def solution():\n    return 6 + 9\n\nans = solution()"
    ],
    "0d77e82eea214976a5d8bf3ab4e08b0b": [
        "def solution():\n    return (2015*2015) - (2016*2014)\n\nans = solution()"
    ],
    "aba2e0d130f344469e4cfa2b6010392a": [
        "def solution():\n    ans = 3.5 * 0.8 + 5.5 * 0.8 + (4/5) * 1\n    return ans\n\nans = solution()"
    ],
    "81fcb6311cba411b82d413bf90689157": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the original speed be s meters per minute and the original time be t minutes\n    # Let the distance be d meters\n    s, t, d = symbols('s t d')\n    \n    # If speed increases by 25%, new speed is 1.25s and time decreases by 20 mins, new time is t - 20\n    # If speed decreases by 45m per min, new speed is s - 45 and time increases by 75%, new time is 1.75t\n    \n    # Original distance equation\n    equation1 = Eq(s * t, d)\n    # Increased speed distance equation\n    equation2 = Eq(1.25 * s * (t - 20), d)\n    # Decreased speed distance equation\n    equation3 = Eq((s - 45) * 1.75 * t, d)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (s, t, d))\n    \n    # Since there may be multiple solutions, filter out the feasible one (with all positive values)\n    solution = next(sol for sol in solutions if all(val > 0 for val in sol))\n\n    # Get the distance\n    return solution[d]\n\nans = solution()"
    ],
    "aa34af4f0c0d4f1193c0c13f4ef71431": [
        "def solution():\n    number = 9 / 1000 + 7 / 100 + 6 / 10 + 4\n    rounded_number = round(number, 1)\n    correct_answer = 9764.0  # Tongtong's answer\n    return rounded_number == correct_answer, rounded_number\n\nans = solution()"
    ],
    "d6f47c7d14794cf0882cbdded57195ef": [
        "def solution():\n    total_biscuits = 36\n    foil_wrappers = 20\n    chocolate_with_foil = 15\n    neither_choco_nor_foil = 9\n\n    # Using the Inclusion-Exclusion Principle\n    # Total = Total Foil + Total Chocolate - Both Foil and Chocolate + Neither\n    # Solving the equation for Total Chocolate:\n    total_chocolate = total_biscuits - foil_wrappers + chocolate_with_foil - neither_choco_nor_foil\n    \n    return total_chocolate\n\nans = solution()"
    ],
    "061ad10a381246f0b22fbd4f813aa403": [
        "def solution():\n    return 398 / 4\n\nans = solution()"
    ],
    "8ee5b1b4a0b744aea869489b01233c34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_crystals = symbols('initial_crystals')\n    # Create an equation based on the problem description\n    equation = Eq(initial_crystals / 2 + 10 - 20 + 14, initial_crystals - 35)\n\n    # Solve the equation\n    solutions = solve(equation, initial_crystals)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "bddd9a07ce1b4cd89fa99ccb14a387de": [
        "def solution():\n    # Prime factorize 5^15 * 2^10\n    # The number of zeros at the end of a product is determined by the number of pairs of 5 and 2 factors.\n    # Since there are more 5s than 2s, the number of zeros will be equal to the number of 2s, which is 10.\n    zeros = min(15, 10)  # the number of 2 and 5 pairs\n    return zeros\n\nans = solution()"
    ],
    "c735dd28ea2240689abbbd4d577fd596": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1568'\n    # Find all permutations of the digits\n    perm = permutations(digits)\n    \n    # Since the decimal point can be inserted at any of the 4 positions between the digits\n    # (after the first, second, third, or fourth digit), we multiply by 4 for each permutation\n    ans = len(list(perm)) * 4\n    return ans\n\nans = solution()"
    ],
    "017ca40d1bbb43fa95bea8515f5a0087": [
        "def solution():\n    people_in_front_ali = 14\n    people_behind_bala = 10\n    ali_bala = 2 # since Bala is directly behind Ali\n\n    total_people = people_in_front_ali + ali_bala + people_behind_bala\n    return total_people\n\nans = solution()"
    ],
    "b411b6a9f50c4eeb9ad77ea2bf97d4c4": [
        "def solution():\n    return 257 * 37\n\nans = solution()"
    ],
    "f780445f7b1e4a9083acc80c65867dd2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    olaf, anna = symbols('olaf anna')\n    \n    # Olaf had thrice as many carrots as Anna\n    equation1 = Eq(olaf, 3 * anna)\n    \n    # Olaf gave away 335 carrots\n    # After giving away, Anna had twice as many carrots as Olaf\n    equation2 = Eq(anna, 2 * (olaf - 335))\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (olaf, anna))\n\n    return solutions[anna]\n\nans = solution()"
    ],
    "46dbc4d8085d4f6983e54168bf69207b": [
        "def solution():\n    return 397 + 784 + 86\n\nans = solution()"
    ],
    "d3694a86bdbf4f47b69dd4f491c85b50": [
        "def solution():\n    richard_age = 18\n    adam_age = richard_age / 2\n    will_age = (2/3) * adam_age\n    total_age = richard_age + adam_age + will_age\n    \n    return total_age\n\nans = solution()"
    ],
    "522f9a97b72e4157b05087fe25269f68": [
        "def solution():\n    pence_per_plant = 85\n    pounds_to_spend = 30\n    total_pence_to_spend = pounds_to_spend * 100\n\n    number_of_plants = total_pence_to_spend // pence_per_plant\n\n    return number_of_plants\n\nans = solution()"
    ],
    "f521fd6cd0bd42ab975826d346f3d148": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    \n    equation1 = Eq(x + y, 80)\n    equation2 = Eq(x - y, 40)\n    \n    solutions = solve((equation1, equation2), (x, y))\n\n    return min(solutions[x], solutions[y])\n\nans = solution()"
    ],
    "0ed2fd09143045b3bdb6bd4e5af3258f": [
        "def solution():\n    total_cars = 60\n    black_dodges = 25\n    blue_cars = 18\n    fords = 25\n\n    # Total dodges = total cars - fords\n    dodges = total_cars - fords\n\n    # Blue dodges = blue cars - blue fords (which we have to find)\n    # Black fords = fords - blue fords\n    # Blue dodges + black fords = dodges - black dodges (because these are the only two categories left)\n    # So, blue cars - blue fords + fords - blue fords = total dodges - black dodges\n    # Simplify: blue cars + fords - 2 * blue fords = dodges - black dodges\n    # blue fords = (blue cars + fords - dodges + black dodges) / 2\n\n    blue_fords = (blue_cars + fords - dodges + black_dodges) // 2\n\n    return blue_fords\n\nans = solution()"
    ],
    "7bb6052160e54c4c996c2b4554bc7d90": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(4 * (x - 3) + 6 * x, 28)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "55d8d326e1d84f5591afabea1baed475": [
        "def solution():\n    # Starting from 4 because it's the smallest composite number\n    A = 4\n    while True:\n        B = A + 1\n        C = A + 2\n        D = A + 3\n        # Check if A, B, C, D are all composite\n        if (not all(is_prime(x) for x in (A, B, C, D)) and\n                any(is_composite(x) for x in (A, B, C, D))):\n            if all(is_composite(x) for x in (A, B, C, D)):\n                return A + B + C + D\n        A += 1\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_composite(n):\n    return not is_prime(n)\n\nans = solution()"
    ],
    "408a76137cb74fe6b5a4628ffe8dd9fc": [
        "def solution():\n    # We apply the Pigeonhole Principle: if you have n containers and m items where m > n,\n    # if you distribute the items in the containers, at least one container will have more than \n    # one item.\n    # In this case, the \"containers\" are the colors of the balls.\n    # Hence, the magician has to pick at least one ball from each color to ensure he gets at\n    # least one of each color. But because he might start picking the balls of the most\n    # abundant color, to guarantee getting all three colors, he needs to pick all but two colors\n    # (since there are 3 colors) in the worst case, plus one ball to surely get the last color.\n    \n    # Calculate the total number of balls without one ball of each of the two most numerous colors.\n    blue_balls = 8\n    red_balls = 10\n    green_balls = 13\n    min_picks = (green_balls - 1) + (red_balls - 1) + 1\n\n    return min_picks\n\nans = solution()"
    ],
    "0e0d80b219274c0faaf2195165716eec": [
        "def solution():\n    result = 7.73 - 7.53\n    return result\n\nans = solution()"
    ],
    "4d85f6fe7d5845cfa81cf1f042e09c59": [
        "def solution():\n    num = 0\n    while True:\n        if num % 11 == 5 and num % 7 == 1:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "5cfc215c78a9472a8a18a9ba927900bd": [
        "def solution():\n    daily_earnings = 120\n    number_of_days = 5\n\n    total_earnings = daily_earnings * number_of_days\n    \n    return total_earnings\n\nans = solution()"
    ],
    "b8255d96c133471bb6e3c22310b41adf": [
        "def solution():\n    total_questions = 50\n    score_per_correct = 3\n    penalty_per_wrong = 2\n    total_score = 125\n\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        score = (correct_answers * score_per_correct) - (wrong_answers * penalty_per_wrong)\n        if score == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "199c56ed665e423c91ceb0507bd0ab53": [
        "def solution():\n    ans = (3/8) * 960\n    return ans\n\nans = solution()"
    ],
    "bb4e43f4f3bd41c086968d751b91561e": [
        "from math import comb\n\ndef solution():\n    team_count = 6\n    games_played = comb(team_count, 2)\n    return games_played\n\nans = solution()"
    ],
    "f2e8931a123545f7956d58a111edc936": [
        "def solution():\n    a = 31\n    b = 29\n    ans = (a + b) * (a - b)\n    return ans\n\nans = solution()"
    ],
    "9a69c834b77544398d9efb56ebcabb0a": [
        "def solution():\n    import math\n\n    return math.gcd(math.gcd(60, 72), 84)\n\nans = solution()"
    ],
    "202cfc0fd1a34d84987c51e10238c07e": [
        "def solution():\n    return 7001 - 360\n\nans = solution()"
    ],
    "4405728c929e4c69acaa6a473aab8e49": [
        "def solution():\n    # Each of the 8 children gets at least 1 apple\n    apples_left = 50 - 8\n\n    # To minimize the maximum number of apples one child gets, we distribute\n    # the remaining apples as evenly as possible\n    # There are 8-1 = 7 other children to receive the remaining apples\n    other_children = 7\n\n    # Distribute the remaining apples to the 7 other children\n    # as evenly as possible by using integer division\n    max_for_others = apples_left // other_children\n\n    # The least possible number of apples the kid who gets the most can get\n    # is therefore max_for_others + 1\n    least_possible_for_most = max_for_others + 1\n\n    return least_possible_for_most\n\nans = solution()"
    ],
    "a48ac2327a494c02bf02f51c7a25087f": [
        "def solution():\n    # Since Eddie stops at 10 o'clock after counting to 30,\n    # we need to figure out the starting point.\n    # The clock has 12 hours, so if he counts to 30,\n    # this is equivalent to counting to 30 % 12 = 6 o'clock if he starts at 12 o'clock.\n    # Since he stops at 10 o'clock, he has to count back 6 hours to find the starting point.\n    start_at_10_and_count_back_6_hours = 10 - 6\n\n    # If the result is less than or equal to 0, it means we've cycled through 12,\n    # so we add 12 to get the correct starting hour on the clock.\n    if start_at_10_and_count_back_6_hours <= 0:\n        start_at_10_and_count_back_6_hours += 12\n\n    return start_at_10_and_count_back_6_hours\n\nans = solution()"
    ],
    "e9da788ec1b54b65a18fecebd1daa615": [
        "def solution():\n    for digit in range(10):\n        # Form the complete number by placing digit in the square\n        number = int(f\"296{digit}12\")\n        \n        # Check if the number is divisible by 9\n        if number % 9 == 0:\n            return digit\n\nans = solution()"
    ],
    "a4fa99021c374f29b4110f2783cfd291": [
        "def solution():\n    seq = [2, 2]\n    for i in range(2, 2011):\n        next_num = (seq[-1] + seq[-2]) % 10\n        seq.append(next_num)\n    return seq[2010]\n\nans = solution()"
    ],
    "46421c119de14d79b2cc3d333a42ca8c": [
        "def solution():\n    two_thirds = 24\n    number = (two_thirds * 3) / 2\n    three_quarters = (number * 3) / 4\n    return three_quarters\n\nans = solution()"
    ],
    "14656e3844dc4d66b7a39d88a9afb8f9": [
        "def solution():\n    k, m = 31, 1  # Start with the smallest possible value of k > 30\n    while True:\n        series_sum = sum([2*i + 1 for i in range(11, k)])  # Summation of the series starting from 23\n        if (series_sum ** 0.5).is_integer():  # Check if the square root of the sum is a whole number\n            m = int(series_sum ** 0.5)\n            break\n        k += 1  # Increment k to check the next possible value\n    return m\n\nans = solution()"
    ],
    "b2a8300be95d4862a99c0a044007743d": [
        "def solution():\n    # Calculate the distance covered in the first 2 hours\n    distance_first_part = 2 * 40  # speed * time\n    \n    # Given remaining distance\n    distance_remaining = 280\n    \n    # Total distance covered\n    total_distance = distance_first_part + distance_remaining\n    \n    # Time taken to cover the remaining distance\n    time_remaining = distance_remaining / 70  # distance / speed\n    \n    # Total time taken for the whole trip\n    total_time = 2 + time_remaining  # initial 2 hours + remaining time\n    \n    # Calculate average speed for the whole trip\n    average_speed = total_distance / total_time\n    \n    return average_speed\n\nans = solution()"
    ],
    "bb2d33406c1e486b9da0c4789678c8e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bob = symbols('alan bob')\n\n    # initial difference in cards between Bob and Alan\n    equation1 = Eq(bob, alan + 15)\n    \n    # After Colin gives 25 cards to Bob, Bob has three times as many as Alan\n    equation2 = Eq(bob + 25, 3 * alan)\n\n    # We solve the equations for alan and bob\n    solutions = solve((equation1, equation2), (alan, bob))\n\n    return solutions[alan]\n\nans = solution()"
    ],
    "2832c695b129428eb3f7330133ef2d33": [
        "def solution():\n    return (423 * 326) % 4\n\nans = solution()"
    ],
    "5513ff312a12411eae4858bfd699527a": [
        "def solution():\n    original_money = 20\n    money_saved = 1 * 7  # $1 everyday for one week\n    money_lent = 5\n    money_spent = 3\n\n    current_money = original_money + money_saved - money_lent - money_spent\n\n    return current_money\n\nans = solution()"
    ],
    "a543d8cd5bcf46c784fc4a1226cbbd55": [
        "def solution():\n    # Let the total number of visitors be 'x'\n    # Let the number of children be 'c'\n    # Then the number of men will be 'c + 12'\n    # 37% of the visitors were men, and the rest (63%) were women and children\n    # Women to children ratio is given as 4:5\n    \n    # Let 'w' be the number of women, we need to find 'w' which satisfies:\n    # (c + 12) / x = 0.37 (since 37% were men) AND \n    # w / c = 4 / 5 (since women to children ratio is 4:5)\n    # w + c = 0.63 * x (since 63% were women and children)\n    \n    from sympy import symbols, Eq, solve\n\n    x, c = symbols('x c')\n    # Equation 1 derived from the fact that 37% of x is c + 12\n    equation1 = Eq((c + 12) / x, 0.37)\n    # Equation 2 derived from the fact that 63% of x is split between women and children\n    # and that their ratio is 4:5\n    equation2 = Eq((4/5)*c + c, 0.63 * x)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, c))\n    \n    # Find the number of women using the ratio 4:5 or w = (4/5)*c\n    w = (4/5) * solutions[c]\n    \n    return int(w)\n\nans = solution()"
    ],
    "146248a0d3d64afe8918234f3da5b527": [
        "def solution():\n    cows = 5\n    days = 3\n    grass_per_cow_per_day = 1\n\n    ans = cows * days * grass_per_cow_per_day\n    \n    return ans\n\nans = solution()"
    ],
    "824799b919f548949a8702760dbeaab5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b represent the cost of one banana and a represent the cost of one apple.\n    b, a = symbols('b a')\n\n    # Two equations based on the problem statement\n    equation1 = Eq(2*b + 3*a, 3)  # Ellie's payment equation\n    equation2 = Eq(3*b + 2*a, 4)  # Beth's payment equation\n\n    # Solve the system of equations to find the cost of one banana and one apple\n    solutions = solve((equation1, equation2), (b, a))\n\n    # Calculate Annabella's cost for 10 bananas and 10 apples using the found prices\n    total_cost = 10 * solutions[b] + 10 * solutions[a]\n\n    return total_cost\n\nans = solution()"
    ],
    "54048b9f40ed41f0805db2d51102d2f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the amount of oil sold from each bucket\n    x = symbols('x')\n\n    # Equation for the big bucket after selling x kilograms\n    equation1 = Eq(89 - x, 12 * (45 - x))\n\n    # Solve the equation to find the amount of oil sold\n    amount_sold = solve(equation1, x)\n\n    return amount_sold[0]\n\nans = solution()"
    ],
    "a69f37c117db4732b832f08fb22c082e": [
        "def solution():\n    prob_work_late = 0.7\n    prob_home_late = 0.4\n\n    prob_both_on_time = (1 - prob_work_late) * (1 - prob_home_late)\n    prob_at_least_one_late = 1 - prob_both_on_time\n\n    return prob_at_least_one_late\n\nans = solution()"
    ],
    "f8b86822291f4eeb9da03b7a91347c42": [
        "def solution():\n    return 6.6 + 13.5\n\nans = solution()"
    ],
    "729c668804d14fd39ae12b3b213c23b9": [
        "def solution():\n    lena_had_initially = 86\n    lena_gave_away = 29\n    lena_had_finally = 100\n\n    strawberries_mother_gave = lena_had_finally - (lena_had_initially - lena_gave_away)\n    \n    return strawberries_mother_gave\n\nans = solution()"
    ],
    "9413da5a29d94f68bda0bca4fa184194": [
        "def solution():\n    total_two_digit_numbers = 90  # There are 90 two-digit numbers (from 10 to 99)\n    numbers_without_six = 64  # 8 options (1-5 and 7-9) for each digit, 8 * 8\n    numbers_with_at_least_one_six = total_two_digit_numbers - numbers_without_six\n    return numbers_with_at_least_one_six\n\nans = solution()"
    ],
    "102f809f85cc4c64bd406383329e958e": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime('1/4/2023', '%d/%m/%Y')\n    end_date = datetime.strptime('18/5/2023', '%d/%m/%Y')\n\n    return (end_date - start_date).days + 1\n\nans = solution()"
    ],
    "f54684d1af9a4195b08d5e9f85769b4d": [
        "def solution():\n    from math import floor, ceil\n    \n    return floor(2017) - ceil(201.7) + floor(20.17) - ceil(2.017)\n\nans = solution()"
    ],
    "0224d77dd22a452996b6417887c3bc74": [
        "def solution():\n    return sum(range(1, 31))\n\nans = solution()"
    ],
    "9b4e50b2cce74bd080a154bda1547248": [
        "def solution():\n    count = 0\n    for i in range(1, 2023):\n        if i % 7 != 0 and i % 17 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ea0d74bbb60148689b29e204ee0a434f": [
        "def solution():\n    speed_a = 48\n    speed_b = 72\n    total_distance = 360\n\n    relative_speed = speed_a + speed_b\n    time = total_distance / relative_speed\n\n    return time\n\nans = solution()"
    ],
    "87405c2a8850443ebcf2f68413e180c6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the fruits\n    mango, orange, pear = symbols('mango orange pear')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(mango + orange, 3.80)\n    equation2 = Eq(mango + pear, 3.40)\n    equation3 = Eq(4 * mango + 2 * pear + orange, 13.20)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (mango, orange, pear))\n\n    return solutions[mango]\n\nans = solution()"
    ],
    "6d1da4e249844060b1007899c512c4fc": [
        "def solution():\n    # Calculate the last digit of 2023^2. Since 3^2 ends with 9, 2023^2 will also end with 9.\n    last_digit_2023_squared = (2023 ** 2) % 10\n\n    # Calculate the last digit of 2^2023. The last digits of powers of 2 cycle every 4 powers:\n    # 2^1 ends with 2, 2^2 ends with 4, 2^3 ends with 8, 2^4 ends with 6, and then it repeats.\n    # Thus, 2^(2023 mod 4) will give us the last digit of 2^2023.\n    last_digit_2_power_2023 = (2 ** (2023 % 4)) % 10\n\n    # Add the last digits and find the last digit of the sum.\n    last_digit_sum = (last_digit_2023_squared + last_digit_2_power_2023) % 10\n\n    # Raise the last digit of the sum to the power of 3 and find the last digit.\n    ans = (last_digit_sum ** 3) % 10\n\n    return ans\n\nans = solution()"
    ],
    "164afcec5f87405ab3a28c1284c5b89b": [
        "def solution():\n    num_lines = 13\n    max_intersections = num_lines * (num_lines - 1) // 2\n    return max_intersections\n\nans = solution()"
    ],
    "2ff1001e219d4b0ebd3a3f0f80ec684b": [
        "def solution():\n    return 9744 // 7\n\nans = solution()"
    ],
    "8da214e5bceb4927bd7edbb025a80cf8": [
        "def solution():\n    last_digit_5s = (5 ** 20) % 10\n    last_digit_7s = (7 ** 20) % 10\n    ans = (last_digit_5s * last_digit_7s) % 10\n    return ans\n\nans = solution()"
    ],
    "fc18d60c6efd483aba5f6e0938c4d924": [
        "def solution():\n    # Given that AB = CD = 14 cm and they are diameters of the semicircles\n    radius_semi = 14 / 2  # radius of the semicircles\n    \n    # The circumference of a whole circle with diameter 14 cm is pi*diameter\n    # Since these are semicircles, their collective perimeter would be equal to the circumference of a full circle\n    perimeter_semicircles = (22 / 7) * 14\n\n    # The perimeter of the quadrants can be calculated as the circumference of a circle with diameter AB (or CD),\n    # then take half of that (since they are half-circles) and multiply by 2 (since there are 2 quadrants)\n    perimeter_quadrants = ((22 / 7) * 14) / 2 * 2\n\n    # The perimeter of the figure is the addition of both perimeters minus 4 times the radius (to exclude the straight lines inside the shape)\n    total_perimeter = perimeter_semicircles + perimeter_quadrants - 4 * radius_semi\n\n    return total_perimeter\n\nans = solution()"
    ],
    "c369770b6e0847c7b9bea03be1874741": [
        "def solution():\n    from math import gcd\n\n    pencils = 28\n    pens = 63\n    greatest_common_divisor = gcd(pencils, pens)\n\n    return greatest_common_divisor\n\nans = solution()"
    ],
    "936bbd100b83467b8e8f7ca63b277148": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of watermelons Helen started with\n    x = symbols('x')\n\n    # Equation based on the problem statement\n    equation = Eq((1 - (1/3) - (1/3) * (3/5)) * x, 48)\n\n    # Solve the equation for x\n    total_watermelons = solve(equation, x)\n\n    # Get the number of watermelons\n    return total_watermelons[0]\n\nans = solution()"
    ],
    "23d9ec7fa57f4172838349ff3d74acd6": [
        "def solution():\n    ans = 2.99 + 12.99 + 22.99\n    return ans\n\nans = solution()"
    ],
    "93cf1ceee35c46ea82413427f66b961c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ahmad, sam, jim = symbols('ahmad sam jim')\n\n    equation1 = Eq(sam, ahmad + 6)\n    equation2 = Eq(jim, 2 * ahmad)\n    equation3 = Eq(ahmad + sam + jim, 334)\n\n    solutions = solve((equation1, equation2, equation3), (ahmad, sam, jim))\n\n    return solutions[jim]\n\nans = solution()"
    ],
    "48e659b717794dd1b47e78672c0d2e01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for the price of a packet of rice\n    rice_price = symbols('rice_price')\n\n    # Equation for total cost paid by Alice\n    total_cost = Eq(6 * 95 + 5 * rice_price, 1170) # Prices are in pence\n\n    # Solve for the price of a packet of rice\n    solutions = solve(total_cost, rice_price)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "18f570e74c21419eb70c8ce179cc02dc": [
        "def solution():\n    lcm = 3 * 5 * 7  # Least common multiple of 3, 5, and 7\n    for i in range(10, 100):\n        number = int(f\"6{i}\")\n        if number % lcm == 0:\n            return number\n\nans = solution()"
    ],
    "1169fdf1689a45368fbfa500b29b4d4a": [
        "from math import comb\n\ndef solution():\n    total_noodles = 10\n    choose_noodles = 6\n    \n    ans = comb(total_noodles, choose_noodles)\n    \n    return ans\n\nans = solution()"
    ],
    "64e22caf8eac4296b018f35f51dcffe6": [
        "def solution():\n    return (3/4) * (2/5) * 1\n\nans = solution()"
    ],
    "9e39cc7574e64c79abd7435129d58354": [
        "def solution():\n    ans = 336 // 6\n    return ans\n\nans = solution()"
    ],
    "8cbab745f9da4de496aff3862df03057": [
        "def solution():\n    num_cakes = 195\n    cost_per_cake = 46\n\n    total_cost = num_cakes * cost_per_cake\n\n    return total_cost\n\nans = solution()"
    ],
    "ea69a9598ef948f590dc1d10f048d2a0": [
        "def solution():\n    total_work = 1  # Represent the total work to paint the house as 1\n    energetic_rate = 1 / 20  # Energetic one paints 1 house in 20 days\n    combined_rate = 1 / 12  # Together they paint 1 house in 12 days\n    \n    # Let lazy_rate be the rate at which the lazy one works\n    # Since combined work is the sum of each person's rate, we have:\n    lazy_rate = combined_rate - energetic_rate\n    \n    # Time taken by the lazy one to paint the house on his own\n    days_lazy = 1 / lazy_rate\n    \n    return days_lazy\n\nans = solution()"
    ],
    "64339b5e0ff14488a7a7915e85f7baad": [
        "def solution():\n    # Start with 13/10 and subtract 1 to get the next fraction inside the complex fraction\n    fraction = 13/10 - 1  # result is 3/10\n\n    # Find the whole number 'a' such that 1/a is the largest fraction less than 3/10\n    a = int(1 / (fraction))  # result is 3\n\n    # Subtract 1/a from the fraction to get the next fraction inside the complex fraction\n    fraction = fraction - 1/a  # result is 1/30\n\n    # Find the whole number 'b' such that 1/b is the largest fraction less than 1/30\n    b = int(1 / (fraction))  # result is 30\n\n    # Subtract 1/b from the fraction to get the last number 'c'\n    c = int(1 / (fraction - 1/b))  # result is 1 since the fraction is 1/1 at this point\n\n    # Return the result of the expression a + 2b + 3c\n    return a + 2*b + 3*c\n\nans = solution()"
    ],
    "a59f135bac214a5da575b9ce4f066823": [
        "def solution():\n    result = 0.30 * (2/3) * 45\n    return result\n\nans = solution()"
    ],
    "b6b08041a7514720a1278986419ff0cb": [
        "def solution():\n    B = (3 * 9 + 5 * 9) / 8\n    return B\n\nans = solution()"
    ],
    "bbda3a80787243eab22a64bb52857096": [
        "def solution():\n    # Given sum of fifteen consecutive numbers is 1650\n    total_sum = 1650\n    num_of_numbers = 15\n\n    # Average of the numbers is total_sum divided by the number of numbers\n    average = total_sum / num_of_numbers\n\n    # The middle number in the list of consecutive numbers is the average\n    # Because it's the sum of consecutive numbers, the middle number is an integer\n    middle_num = int(average)\n\n    # The smallest number is the middle number minus half the length of the sequence minus 1\n    # And the largest number is the middle number plus half the length of the sequence minus 1\n    smallest_num = middle_num - (num_of_numbers // 2)\n    largest_num = middle_num + (num_of_numbers // 2)\n\n    # The sum of the largest and smallest number\n    sum_largest_smallest = smallest_num + largest_num\n\n    return sum_largest_smallest\n\nans = solution()"
    ],
    "da6271db0c0242c5935ddca8b62ae82b": [
        "def solution():\n    pies = 1\n    while pies % 4 != 0 or pies % 6 != 0:\n        pies += 1\n    return pies\n\nans = solution()"
    ],
    "c11a8651ce514fa998ed30b3b9b53658": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "e5c0ab18d1ae4d8d82cff69be28b3579": [
        "def solution():\n    boys = 42\n    boy_girl_ratio = 3 / 2\n    girls = boys / boy_girl_ratio\n    return int(girls)\n\nans = solution()"
    ],
    "c465c0e7f9a94f92b6df9d60a786dffa": [
        "def solution():\n    count = 0\n\n    for number in range(1, 1000):\n        number_is_oddtastic = all(int(digit) % 2 != 0 for digit in str(number))\n        if number_is_oddtastic:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "b678890a19374c38ad59d1486f4db916": [
        "def solution():\n    # since a div 8 has a remainder of 6, a can be expressed as 8k + 6\n    # since b div 8 has a remainder of 7, b can be expressed as 8m + 7\n    # adding a and b, we get (8k + 6) + (8m + 7) = 8(k + m) + 13\n    # dividing the sum by 8 will leave a remainder of (13 mod 8), because 8(k + m) is divisible by 8\n    remainder = (13 % 8)\n    return remainder\n\nans = solution()"
    ],
    "439bd1eb78b4450ebb4e7f6c4c72416e": [
        "def solution():\n    total_cloth = 45\n    cloth_per_skirt = 2.83\n    number_of_skirts = 8\n\n    cloth_used_for_skirts = cloth_per_skirt * number_of_skirts\n    remaining_cloth = total_cloth - cloth_used_for_skirts\n    number_of_blouses = 2\n\n    cloth_per_blouse = round(remaining_cloth / number_of_blouses, 1)\n\n    return cloth_per_blouse\n\nans = solution()"
    ],
    "14a5a44068684024a8f1f67d00758fe4": [
        "def solution():\n    ans = 2189 - 1056\n    return ans\n\nans = solution()"
    ],
    "d54fa4b78c5640dab674ce3faf979b3b": [
        "def solution():\n    number = ''\n    i = 1\n    while len(number) < 2019:\n        number += str(i)\n        i += 1\n    return int(number[2018])\n\nans = solution()"
    ],
    "2d35f2e1d3d34ffbb28a8cebae92c23e": [
        "def solution():\n    return 11 + 10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2\n\nans = solution()"
    ],
    "b764a882e0bc414689dc39fd81aaa3f1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    alice, bernice, cindy = symbols('alice bernice cindy')\n    \n    equation1 = Eq(bernice, alice + 240)\n    equation2 = Eq(cindy, bernice + 100)\n    equation3 = Eq(alice + bernice + cindy, 1792)\n    \n    solutions = solve((equation1, equation2, equation3), (alice, bernice, cindy))\n    \n    return solutions[alice]\n\nans = solution()"
    ],
    "0de428143ddc41079e76fd4ffbe23365": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    n = solve_congruence(*congruences)[0]\n    return n\n\nans = solution()"
    ],
    "d4e1d8676a734ecc80b7b6a843595692": [
        "def solution():\n    score = 84\n    total = 120\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "70c25992de344a84b58dad3b24775a9b": [
        "from math import factorial\n\ndef solution():\n    # Total number of digits (3 of '2's and 2 of '3's)\n    total_digits = 5\n    # there are 3 twos\n    count_2 = 3\n    # there are 2 threes\n    count_3 = 2\n\n    # Calculate permutations without considering identical items\n    # to place 5 items in a 4 item slot (5-1)!/(3-1)!(2-1)!\n    # Subtract from it the permutations that have 3 twos in first 3 slots, which\n    # isn't a valid four-digit number as it would start with a zero (which would only leave two 3s in the sequence)\n    distinct_permutations = factorial(total_digits - 1) // (factorial(count_2 - 1) * factorial(count_3))\n\n    return distinct_permutations\n\nans = solution()"
    ],
    "752e5759eb7140ecb85296bce9368f6d": [
        "def solution():\n    sum_numbers = 3009\n    greater_number = 1722\n    smaller_number = sum_numbers - greater_number\n    difference = greater_number - smaller_number\n    return difference\n\nans = solution()"
    ],
    "9b1cb8dd1d064db29dc7e2d464d99ce8": [
        "def solution():\n    total_mass_kg = 6.5  # total mass in kilograms\n    basket_mass_kg = 500 / 1000  # basket mass converted from grams to kilograms\n    kitten_mass_kg = 0.6  # mass of one kitten in kilograms\n    number_of_kittens = 4\n    \n    # Calculating the mass of the cat\n    cat_mass_kg = total_mass_kg - (basket_mass_kg + kitten_mass_kg * number_of_kittens)\n    \n    return cat_mass_kg\n\nans = solution()"
    ],
    "c3e11e75704c400fa620bd26e3fb5ccc": [
        "def solution():\n    return 412 / 1000\n\nans = solution()"
    ],
    "8b508f3a63af42fc89337bb741587d2a": [
        "def solution():\n    total_cost = 33 + 20.40\n    number_of_friends = 6\n    cost_per_person = total_cost / number_of_friends\n    return cost_per_person\n\nans = solution()"
    ],
    "4787ee3647b6493ebaa57cbbe430a914": [
        "def solution():\n    initial_price = 4\n    increase_percentage = 20 / 100\n    new_price = initial_price * (1 + increase_percentage)\n    return new_price\n\nans = solution()"
    ],
    "01fcd86ba34343e3abb3f7ccb88315bf": [
        "def solution():\n    family_members = 1 + 3 + 4  # Mary plus three brothers and four sisters\n    # Each person buys an Easter egg for each of the other family members\n    eggs_bought = family_members * (family_members - 1)\n    return eggs_bought\n\nans = solution()"
    ],
    "ff9990049fcc49a0a8417652c96375b8": [
        "def solution():\n    from datetime import timedelta\n\n    start_time = timedelta(hours=7, minutes=50)\n    end_time = timedelta(hours=8, minutes=40)\n    \n    duration = end_time - start_time\n    return duration\n\nans = solution()"
    ],
    "59b6fc93c0364f6fab328fca8f96a25e": [
        "def solution():\n    n = 72 / (3*6)\n    return n\n\nans = solution()"
    ],
    "e56f53a819d843a4ac3977912faff7e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n    \n    equation1 = Eq(3 * apple + banana, 32)\n    equation2 = Eq(6 * apple + banana, 53)\n    \n    solutions = solve((equation1, equation2), (apple, banana))\n    \n    return solutions[banana]\n\nans = solution()"
    ],
    "cc4d6508bfc94140bc674ed22aab0fb3": [
        "def solution():\n    # This is a sequence where the difference between consecutive terms is increasing by 1 each time.\n    # The differences are: 6-3=3, 10-6=4, 15-10=5\n    # Therefore, the next difference should be 5+1=6\n    # So the missing number should be: 15 + 6 = 21\n    \n    missing_number = 15 + 6\n    return missing_number\n\nans = solution()"
    ],
    "ffe4e2fccc06432695daf3045845a872": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the initial money Samuel had as x.\n    x = symbols('x')\n\n    # Samuel spent 1/6 of his money and an additional $5 on a DVD.\n    remaining_after_dvd = x - (x / 6) - 5\n\n    # He then spent 2/5 of his remaining money and an additional $12 on magazines.\n    remaining_after_magazines = remaining_after_dvd - (2 / 5) * remaining_after_dvd - 12\n\n    # After buying the magazines, he had $24 left.\n    equation = Eq(remaining_after_magazines, 24)\n\n    # Solving the equation for x will give us the initial amount.\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "4c14bb3f346248288c5863e88eba5a22": [
        "def solution():\n    remaining_after_bag = 80 / (1 - 3/5)\n    initial_money = remaining_after_bag / (1 - 1/5)\n    return initial_money\n\nans = solution()"
    ],
    "374ef3bc7e0a42419bf59b665a1e8df4": [
        "def solution():\n    total_oil = 47\n    oil_poured_out = 5\n    tanks = 6\n\n    oil_remaining = total_oil - oil_poured_out\n    oil_volume_per_tank = oil_remaining / tanks\n\n    return oil_volume_per_tank\n\nans = solution()"
    ],
    "293a4c45646547c38aa5f707c907ac82": [
        "def solution():\n    grandpa_current_age = 72\n    johnny_current_age = 8\n    \n    # Let x be the number of years until Grandpa's age is 5 times Johnny's age\n    # 72 + x = 5 * (8 + x)\n    # Solving for x\n    x = symbols('x')\n    equation = Eq(72 + x, 5 * (8 + x))\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "9fec34e2fa3e48e3b534a4a88195f5ba": [
        "def solution():\n    # Pip is 8th from the front\n    position_pip_from_front = 8\n    \n    # Bud is 10th from the end\n    position_bud_from_end = 10\n    \n    # There are 4 children between Pip and Bud\n    children_between = 4\n    \n    # Calculate the total number of children in the queue\n    # The position of Bud from the front is Pip's position plus the children between plus one (for Pip)\n    position_bud_from_front = position_pip_from_front + children_between + 1\n    \n    # Total number of children in the queue is Bud's position from the front plus Bud's position from the end minus one (since we counted Bud twice)\n    total_children = position_bud_from_front + position_bud_from_end - 1\n\n    return total_children\n\nans = solution()"
    ],
    "e757d8a583d44579823d7d3329dd4962": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bob = symbols('alan bob')\n\n    # Bob has 15 more Match Dfex cards than Alan\n    equation1 = Eq(bob, alan + 15)\n    # Colin gives Bob 25 cards\n    bob_new = bob + 25\n    # Bob now has 3 times as many as Alan\n    equation2 = Eq(bob_new, 3 * alan)\n\n    solutions = solve((equation1, equation2), (alan, bob))\n\n    return solutions[alan]\n\nans = solution()"
    ],
    "2557fa802eef44bc834d1a8106a622e5": [
        "def solution():\n    principal = 2000\n    amount = 2519.42\n    years = 3\n    # Use the compound interest formula: A = P (1 + r/n)^(nt) to find the rate 'r'\n    # As the interest was compounded annually, n = 1 and it simplifies to A = P * (1 + r)^t\n    # Therefore, (1 + r)^t = A/P and r = ((A/P)^(1/t)) - 1\n    # We already have the approximate power for both 1.079^3 and 1.058^3 provided in the question.\n    # Since the answer lies between these powers, this can narrow down our search for 'r'\n\n    # Calculate rate by taking the nth root of A/P, then subtracting 1\n    rate = (amount / principal) ** (1/years) - 1\n    # Convert the rate to percentage and round to the nearest tenth\n    rate_percent = round(rate * 100, 1)\n\n    return rate_percent\n\nans = solution()"
    ],
    "b70ebf97614545e8a65cd9169021bb74": [
        "def solution():\n    # Sum of all odd numbers from 1 to 50\n    sum_of_odds = sum(range(1, 51, 2))\n    \n    # Sum of all even numbers from 1 to 50\n    sum_of_evens = sum(range(2, 51, 2))\n    \n    # Difference between Monica's and Melvin's sums\n    ans = sum_of_evens - sum_of_odds\n    \n    return ans\n\nans = solution()"
    ],
    "8c7b9411bbb04086ab07eacadf5afd5e": [
        "def solution():\n    ans = 193 * 72\n    return ans\n\nans = solution()"
    ],
    "215e1d378ffe437ba1c9ccb1e8aee393": [
        "def solution():\n    # Let x be the number of elderly.\n    # If Janice gave 20 oranges to each elderly, 10 elderly will not receive any oranges.\n    # So there are (x - 10) elderly actually receiving oranges and x * 20 is the total number of oranges.\n    # If she gave 16 oranges to each, she would pack 25 boxes of oranges, each containing 24 oranges.\n    # So total oranges is 25 * 24.\n\n    # Total oranges with 20 per elderly = Total oranges with 16 per elderly\n    # (x - 10) * 20 = 25 * 24\n\n    # Solving for x using the equation above\n    x = (25 * 24) // 20 + 10\n\n    # Total number of oranges\n    total_oranges = (25 * 24)\n\n    # Calculate the number of oranges per elderly so that it divides evenly into total oranges\n    for oranges_per_elderly in range(1, total_oranges + 1): # Start from 1 to total oranges\n        if total_oranges % oranges_per_elderly == 0: # Check if divisible\n            if total_oranges // oranges_per_elderly == x: # Check if it gives the correct number of elderly\n                return oranges_per_elderly\n\nans = solution()"
    ],
    "bc4291892b8945d4b66ab1f2b66dcee3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    m, n = symbols('m n')\n    custom_op = Eq(5*m + 3*n, 37)\n    solve_for_n = solve(custom_op.subs(m, symbol), n)\n\n    # Substitute x for m and 9 for n in the given custom operation\n    x = symbols('x')\n    equation = Eq(5*x + 3*9, 37)\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "ad306d1a04ac4d08a086e821e61e24be": [
        "def solution():\n    # In the worst case, Sheila could draw out all the balls of the\n    # two smallest groups without getting 4 balls of the same color.\n    # Therefore, we calculate the number of balls by adding +1 to \n    # ensure she gets 4 balls of the same color.\n\n    # Sum of the two smallest numbers of balls (orange and yellow)\n    # because in the worst-case she could get all orange and yellow balls\n    balls_orange_yellow = 4 + 2\n    \n    # Add one to the sum of the smallest two groups to ensure she gets\n    # at least 4 balls of the same color (since she would then have to take\n    # one more ball which would be blue in this case).\n    balls_to_ensure_four_of_a_kind = balls_orange_yellow + 1\n    \n    return balls_to_ensure_four_of_a_kind\n\nans = solution()"
    ],
    "1dc5079dba0a4447af8a598e73c3cbd8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime('11:15 AM', '%I:%M %p')\n    travel_time = timedelta(hours=3, minutes=50)\n    departure_time = arrival_time - travel_time\n    return departure_time.strftime('%I:%M %p').lstrip('0')\n\nans = solution()"
    ],
    "7a7da228cc224c7b93f5a155d88b34d8": [
        "def solution():\n    full_weight = 31\n    remaining_soil_fraction = 1 - 1/5\n    current_weight = 27\n\n    # Find the weight of the soil left in the wheel barrow\n    soil_weight_left = current_weight / remaining_soil_fraction\n\n    # Calculate the empty weight of the wheel barrow\n    empty_weight = full_weight - (full_weight - current_weight) / remaining_soil_fraction\n\n    return empty_weight\n\nans = solution()"
    ],
    "f1389cbcaf72480d9657232ad57f5bec": [
        "def solution():\n    total_marks = 214\n    scored_marks = 136\n    missed_marks = total_marks - scored_marks\n    return missed_marks\n\nans = solution()"
    ],
    "2f184eae91df42e18de5b645882a1cc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Tim's and Tyler's cookies\n    tim, tyler = symbols('tim tyler')\n\n    # Equations based on the problem statement\n    equation1 = Eq((1/6) * tim, (3/8) * tyler)\n    equation2 = Eq(tim, 9 * (tyler - 96))\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (tim, tyler))\n\n    # Calculate the total number of cookies initially\n    total_cookies = solutions[tim] + solutions[tyler]\n\n    return total_cookies\n\nans = solution()"
    ],
    "f4a9a527d7144792b53639888c6da554": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n    equation1 = Eq(chocolate, vanilla + 72)\n    equation2 = Eq(blueberry, vanilla - 36)\n    equation3 = Eq(chocolate / 6 + vanilla * 2 / 3 + blueberry * 7 / 9, 427)\n\n    solutions = solve((equation1, equation2, equation3), (chocolate, vanilla, blueberry))\n\n    chocolate_cupcakes = solutions[chocolate]\n    sold_chocolate = chocolate_cupcakes / 6\n\n    return sold_chocolate\n\nans = solution()"
    ],
    "4c5e47c0c616449c92a2b06408c58928": [
        "def solution():\n    three_quarters_tank = 24\n    full_tank = three_quarters_tank * (4/3)\n\n    return full_tank\n\nans = solution()"
    ],
    "b32f8f344d984bb382e4fb73887230ab": [
        "from math import lcm\n\ndef solution():\n    platform1_interval = 24\n    platform2_interval = 30\n    next_common_time = lcm(platform1_interval, platform2_interval)\n    initial_time_minutes = 9 * 60  # 9 a.m. in minutes\n    next_common_time_minutes = initial_time_minutes + next_common_time\n    next_common_time_hours = next_common_time_minutes // 60\n    next_common_time_minutes %= 60\n\n    return f\"{next_common_time_hours}:{str(next_common_time_minutes).zfill(2)}\"\n\nans = solution()"
    ],
    "87c44b7f86fe43459f5e47d26f57a64a": [
        "def solution():\n    # The remainders when a and b are individually divided by 8 are given as 6 and 7 respectively.\n    remainder_a = 6\n    remainder_b = 7\n    \n    # The sum of the remainders gives the remainder when (a + b) is divided by 8.\n    total_remainder = (remainder_a + remainder_b) % 8\n\n    return total_remainder\n\nans = solution()"
    ],
    "a558f6a1623e42cca6fbc286a7fa522e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    Anu, Benu, Chris, Dave = symbols('Anu Benu Chris Dave')\n    \n    equation1 = Eq(Anu + Benu + Chris + Dave, 20)\n    equation2 = Eq(Dave, Chris + 5)\n    equation3 = Eq(Dave, Benu + 3)\n    equation4 = Eq(Anu, Chris - 3)\n    \n    solutions = solve((equation1, equation2, equation3, equation4), (Anu, Benu, Chris, Dave))\n    \n    return solutions[Anu]\n\nans = solution()"
    ],
    "620fcfd4b5dc4851a21f52802f067616": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables\n    red_original, white_original = symbols('red_original white_original')\n    red_added_by_pip = symbols('red_added_by_pip')\n    white_added_by_bud = symbols('white_added_by_bud')\n    \n    # Original ratio equation 3:2\n    equation1 = Eq(red_original / white_original, 3/2)\n    \n    # After Pip adds red marbles, the ratio is 5:3\n    equation2 = Eq((red_original + red_added_by_pip) / white_original, 5/3)\n    \n    # After Bud adds white marbles, the ratio is 5:4\n    equation3 = Eq((red_original + red_added_by_pip) / (white_original + white_added_by_bud), 5/4)\n    \n    # Bud puts 100 more marbles than Pip\n    equation4 = Eq(white_added_by_bud - red_added_by_pip, 100)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4),\n                      (red_original, white_original, red_added_by_pip, white_added_by_bud))\n    \n    white_at_first = solutions[white_original]\n    \n    return white_at_first\n\nans = solution()"
    ],
    "6d2040f88fa04f798b4a1705445cb70b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mark, david = symbols('mark david')\n    equation1 = Eq(mark - david, 3)\n    equation2 = Eq(mark + david, 89)\n\n    solutions = solve((equation1, equation2), (mark, david))\n\n    return solutions[mark]\n\nans = solution()"
    ],
    "7a743410e3e345b999a0951be98a6199": [
        "def solution():\n    # Desks in front of Jessica\n    desks_in_front_of_jessica = 5\n    \n    # Desks behind Judy\n    desks_behind_judy = 7\n    \n    # Since Jessica sits in front of Judy, there is only one desk between them\n    desks_between_jessica_and_judy = 1\n\n    # Total desks in the column\n    total_desks = desks_in_front_of_jessica + desks_between_jessica_and_judy + desks_behind_judy + 1  # +1 for Judy's desk\n\n    return total_desks\n\nans = solution()"
    ],
    "85bee46ebede4627b0afc4c7e6181e1d": [
        "def solution():\n    count = 0\n    for i in range(2, 57):\n        count += str(i).count(\"6\")\n    return count\n\nans = solution()"
    ],
    "92dd78baf86e411d93098d70392d8777": [
        "def solution():\n    ans = 2.507 + 13.49\n    return ans\n\nans = solution()"
    ],
    "8f0cf923121b43fb96d737a8fba5bd2f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    agnes, george, jack = symbols('agnes george jack')\n\n    equation1 = Eq(agnes, george - 5)\n    equation2 = Eq(jack, 3 * george)\n    equation3 = Eq(agnes + george + jack, 55)\n\n    solutions = solve((equation1, equation2, equation3), (agnes, george, jack))\n\n    return solutions[jack]\n\nans = solution()"
    ],
    "22842fb942f54d6e8ba1e02bb2901a77": [
        "def solution():\n    red_balloons = 57\n    yellow_balloons = red_balloons // 3\n    return yellow_balloons\n\nans = solution()"
    ],
    "3ae41e17112a464fa38fa87aa1753aeb": [
        "def solution():\n    for i in range(10000, 100000):\n        str_i = str(i)\n        if \"0\" not in str_i and len(set(str_i)) == len(str_i):\n            if int(str_i[1]) * int(str_i[2]) == int(str_i[3]):\n                if int(str_i[0]) * int(str_i[1]) == int(str_i[4]) * 10 + int(str_i[2]):\n                    return i\n    return None\n\nans = solution()"
    ],
    "1cae0bc768934c11a33a33e0df128753": [
        "def solution():\n    return 428 - 244\n\nans = solution()"
    ],
    "4afd36119b724be1826c3ac3454d6dba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the symbols we'll use\n    # x will represent the total weight of the initial group\n    # n will represent the number of people in the initial group\n    x, n = symbols('x n')\n\n    # We are given that Aaron's weight (45kg) changes the average to 61kg\n    # This gives us our first equation: (x + 45) / (n + 1) = 61\n    equation1 = Eq((x + 45) / (n + 1), 61)\n\n    # We are given that Ben's weight (71kg) changes the average to 62kg\n    # This gives us our second equation: (x + 45 + 71) / (n + 2) = 62\n    equation2 = Eq((x + 45 + 71) / (n + 2), 62)\n\n    # Let's solve the system of equations for x and n\n    solutions = solve((equation1, equation2), (x, n))\n\n    # The average weight before anyone joined them is x / n\n    x_value = solutions[x]\n    n_value = solutions[n]\n\n    original_avg = x_value / n_value\n\n    return original_avg\n\nans = solution()"
    ],
    "fcd9ab9940e142e0b0a968d0d5e14a94": [
        "def solution():\n    white_balls = 1991\n    black_balls = 1000\n    taken_balls = 2989\n\n    while taken_balls > 0:\n        # If both white or both black, the total number of balls in Bag A reduces by 1.\n        # If one black and one white, the number of balls in Bag A remains the same.\n        # In either case, we have effectively taken out one ball from Bag A.\n        taken_balls -= 1\n    \n    # After 2989 effective removals, all black balls would be removed first (1000).\n    # Then the remaining removals (1989) would be from the white balls.\n    remaining_white_balls = white_balls - 1989  # 1991 - 1989\n    remaining_black_balls = 0  # All black balls are gone\n\n    return remaining_white_balls, 'white'\n\nans = solution()"
    ],
    "c2f74cd9163744c0b6071601b66266d4": [
        "def solution():\n    people_initial = 6\n    time_initial = 15\n    time_required = 2\n\n    work_rate_initial = people_initial / time_initial\n    people_required = work_rate_initial * time_required\n\n    return int(people_required)\n\nans = solution()"
    ],
    "46bcd0c64033467eaa6a8102289e0a41": [
        "def solution():\n    cakes = 195\n    cost_per_cake = 46\n\n    total_cost = cakes * cost_per_cake\n\n    return total_cost\n\nans = solution()"
    ],
    "08705e45e80047af971fb071b94f2dd8": [
        "def solution():\n    meters = 2.1\n    centimeters_per_meter = 100\n    n = meters * centimeters_per_meter\n    return int(n)\n\nans = solution()"
    ],
    "ce902dc0e38d427eb9cd68b799e3bcaf": [
        "def solution():\n    birthday_money = 30\n    sweets_cost = 3.99\n    magazine_cost = 2.50\n    stickers_cost = 0.70\n    pizza_cost = 10.99\n    orange_juice_cost = 1.50 * 4\n\n    total_spent = sweets_cost + magazine_cost + stickers_cost + pizza_cost + orange_juice_cost\n\n    change_left = birthday_money - total_spent\n    \n    return round(change_left, 2)\n\nans = solution()"
    ],
    "79e15e6ed353495ba1c745aa3360ff9c": [
        "def solution():\n    n = 40\n    sum_of_numbers = n * (n + 1) // 2\n    return sum_of_numbers\n\nans = solution()"
    ],
    "dd3337cf8b074877bdba86538785b68b": [
        "def solution():\n    count = 0\n    for x1 in range(1, 5):\n        for x2 in range(1, 5):\n            if x1 + x2 == 5:\n                count += 1\n            for x3 in range(1, 5):\n                if x1 + x2 + x3 == 5:\n                    count += 1\n                for x4 in range(1, 5):\n                    if x1 + x2 + x3 + x4 == 5:\n                        count += 1\n    return count // 2  # Divide by 2 to account for duplicates (order does not matter)\n\nans = solution()"
    ],
    "d7edf824287e4a788997a750d1c998c7": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(10):\n            for units in range(10):\n                if units == hundreds + 2:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "044e10e45e8f4f60ae3f9ce39d3f3cf8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mr_han, daughter = symbols('mr_han daughter')\n    equation1 = Eq(mr_han, 3 * daughter)\n    equation2 = Eq(mr_han + daughter, 91.2)\n\n    solutions = solve((equation1, equation2), (mr_han, daughter))\n\n    return solutions[mr_han]\n\nans = solution()"
    ],
    "cc66cd3f11294d1984b5cf049794398d": [
        "def solution():\n    remaining_after_students = 108 / (2/5)\n    initial_chocolates = remaining_after_students / (1 - 0.8)\n    return int(initial_chocolates)\n\nans = solution()"
    ],
    "f74c213339b0455a9cf262e2e789bcee": [
        "def solution():\n    ans = sum((i + 1) ** 2 - i ** 2 for i in range(1, 100, 2))\n    return ans\n\nans = solution()"
    ],
    "4a61def62aa04793872f134a2ee581fc": [
        "def solution():\n    # To ensure Samantha has more votes than anyone else, she must have more votes than the other two combined.\n    \n    # So the least number of votes Samantha should have:\n    # Let x be the total number of votes the other two students have.\n    # Then Samantha should have (x + 1) votes to ensure she has more.\n    # Since the total votes cast is 25, we have x + (x + 1) = 25.\n    # Solving for x gives x = 12.\n    # Therefore, Samantha must have at least 13 votes.\n    \n    total_votes = 25\n    \n    # Votes for the other two candidates combined is at most (total_votes - 1) // 2\n    other_two_combined = (total_votes - 1) // 2\n\n    # Samantha's votes is one more than that combined total\n    samantha_votes = other_two_combined + 1\n    \n    return samantha_votes\n\nans = solution()"
    ],
    "3973a8cd4ae64cb8a964980f72c023df": [
        "def solution():\n    coin_values = [1, 2, 5]\n    unique_totals = set()\n\n    for i in coin_values:\n        for j in coin_values:\n            for k in coin_values:\n                unique_totals.add(i + j + k)\n\n    ans = len(unique_totals)\n    return ans\n\nans = solution()"
    ],
    "7dfb05a6c32a4880b5ff66c479e32727": [
        "def solution():\n    ans = 2 + 3 * (3 + 2)\n    return ans\n\nans = solution()"
    ],
    "2aa1e0027a284c64a861b8e60942d889": [
        "def solution():\n    count = 0\n    for i in range(1, 131):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "250e63b1521b424d9f6cf44f8f79623b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(4*x + 7, 5*(x + 1))\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "2c1618650feb43ee829f8c60f37d6d85": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the interest rate\n    x = symbols('x')\n\n    # Initial investment\n    P = 6000\n\n    # Final amount\n    A = 8029.35\n\n    # Number of years\n    t = 5\n\n    # Compound interest formula A = P * (1 + x/100)^t\n    # We need to solve for x, so we set up the equation accordingly\n    equation = Eq(P * (1 + x/100)**t, A)\n\n    # Solve for x\n    interest_rate = solve(equation, x)\n\n    # Return the interest rate (as a percentage)\n    return round(interest_rate[0], 2)\n\nans = solution()"
    ],
    "c7536ec02a28451588a7654fe8fdcb94": [
        "def solution():\n    pages = 0\n    digits = 0\n\n    while digits < 291:\n        pages += 1\n        digits += len(str(pages))\n\n    return pages - 1\n\nans = solution()"
    ],
    "71a5e420be854536b851bfc6431ef442": [
        "def solution():\n    fraction = 13 / 25\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "1e18650a928a4a8aaa9433e3d4f8bdbf": [
        "def solution():\n    kg_to_g = 2.4 * 1000\n    return kg_to_g\n\nans = solution()"
    ],
    "54ed486695084b83bc52e1acf3621c39": [
        "def solution():\n    total_money = 1500\n    money_on_chairs = 360\n    percent_on_chairs = (money_on_chairs / total_money) * 100\n    return percent_on_chairs\n\nans = solution()"
    ],
    "58827db30bfe41e3aa8887dbbf840403": [
        "def solution():\n    # Let x be the total number of pages in the magazine.\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    # If Clarice has read 1 part, then she hasn't read 5 parts.\n    # So, we have read_pages = x / 6 and unread_pages = (5/6)*x.\n    read_pages = x / 6\n    unread_pages = (5 * x) / 6\n\n    # After reading another 80 pages,\n    read_pages_after = read_pages + 80\n\n    # The read pages become 70% of the total number of pages, hence the equation:\n    equation = Eq(read_pages_after, 0.7 * x)\n\n    # Solve the equation for x to find the total number of pages.\n    total_pages = solve(equation, x)\n\n    # Return the total number of pages in the magazine\n    return total_pages[0]\n\nans = solution()"
    ],
    "d6a8e2b1fe0b4d46b18689b12ef527f6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, magazine = symbols('book magazine')\n\n    # 2 books and 3 magazines cost $24.90\n    equation1 = Eq(2 * book + 3 * magazine, 24.90)\n    # 1 book and 1 magazine cost $10\n    equation2 = Eq(book + magazine, 10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (book, magazine))\n\n    return solutions[magazine]\n\nans = solution()"
    ],
    "86483a83b8a641b3802d1bcfe3db3b99": [
        "def solution():\n    girls = 45\n    girls_per_room = 5\n    teachers = 6\n    teachers_per_room = teachers / 3\n\n    girls_rooms = girls // girls_per_room\n    teachers_rooms = teachers // teachers_per_room\n\n    total_rooms = girls_rooms + teachers_rooms\n\n    return total_rooms\n\nans = solution()"
    ],
    "96bead80155a4a23ba5e189d220a2750": [
        "def solution():\n    people_initial = 15\n    flour_initial = 650\n    people_final = 18\n\n    flour_final = (flour_initial / people_initial) * people_final\n\n    return flour_final\n\nans = solution()"
    ],
    "c113a7ebab824fa5aff9432d5ba4e66a": [
        "def solution():\n    # Let x be the number of correct answers CC got\n    # Then the number of correct answers Vivi got is x + 3 (since each question is 10 points and difference is 15 points)\n    # The total score for CC is 10x - 5(10 - x), since for each wrong answer she loses 5 points\n    # The total score for Vivi is 10(x + 3) - 5(10 - (x + 3))\n    # The combined score is 95, so we have:\n    # 10x - 5(10 - x) + 10(x + 3) - 5(10 - (x + 3)) = 95\n    # Simplify the equation to find x\n\n    # total points for CC's correct answers\n    points_for_correct_cc = 10\n    # total points for CC's wrong answers\n    points_for_wrong_cc = -5\n\n    # total points for Vivi's correct answers\n    points_for_correct_vivi = 10\n    # total points for Vivi's wrong answers\n    points_for_wrong_vivi = -5\n\n    # total questions each\n    total_questions = 10\n\n    # Given total points\n    combined_points = 95\n\n    for cc_correct in range(total_questions + 1):\n        vivi_correct = cc_correct + 3  # because Vivi got 15 more points, which means 3 more correct answers\n        if (cc_correct * points_for_correct_cc + (total_questions - cc_correct) * points_for_wrong_cc +\n            vivi_correct * points_for_correct_vivi + (total_questions - vivi_correct) * points_for_wrong_vivi) == combined_points:\n            return cc_correct\n\nans = solution()"
    ],
    "71c301ca64c3481fa3c4d9fbd27b071f": [
        "def solution():\n    adult_ticket_price = 6.34\n    child_ticket_price = 4.75\n    num_adults = 2\n    num_children = 3\n\n    total_cost = (num_adults * adult_ticket_price) + (num_children * child_ticket_price)\n    \n    return total_cost\n\nans = solution()"
    ],
    "8d63b90682ef4e86a52c8d41e221e99e": [
        "def solution():\n    number = \"2581953752\"\n    length = len(number)\n    min_sum = float('inf')\n\n    for i in range(1, length - 1):\n        for j in range(i+1, length):\n            # Split the number into three parts based on the indices i and j\n            first = int(number[:i])\n            second = int(number[i:j])\n            third = int(number[j:])\n\n            # Calculate the sum of the three parts\n            current_sum = first + second + third\n\n            # Find the minimum sum\n            if current_sum < min_sum:\n                min_sum = current_sum\n\n    return min_sum\n\nans = solution()"
    ],
    "41e9b6cd168c41fd92de334d68528b9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 11.63)\n    equation2 = Eq(x + y/10, 5.87)\n    \n    solutions = solve((equation1, equation2), (x, y))\n    \n    difference = abs(solutions[x] - solutions[y])\n    return int(difference * 100)\n\nans = solution()"
    ],
    "5286b8a162984ebd83b4dc18a0895e9d": [
        "def solution():\n    mm_to_m_conversion = 1000\n    ans = 7000000 / mm_to_m_conversion\n    return ans\n\nans = solution()"
    ],
    "982b7c2099ae4cbbbf15acf185975676": [
        "def solution():\n    total_members = 99\n\n    # Ratio science:literature = 9:10\n    # Ratio literature:math = 5:7\n    # Therefore, ratio science:literature:math = 9x:10x:14x\n\n    # Calculate x based on the total_members = 9x + 10x + 14x\n    x = total_members / (9 + 10 + 14)\n    \n    # Number of members in literature club\n    literature_members = 10 * x\n\n    # Number of members in math club\n    math_members = 14 * x\n\n    # Calculate the difference\n    difference = math_members - literature_members\n\n    return int(difference)\n\nans = solution()"
    ],
    "2428c63651de4a9cb4a9fd440dd72a13": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    minimum_divisor = 1\n    minimum_dividend = minimum_divisor * quotient + remainder\n    return minimum_dividend\n\nans = solution()"
    ],
    "e429d1f710e0443ca3e34ebd54ce1999": [
        "def solution():\n    # To be sure to get 3 marbles of the same color, we consider the worst-case scenario.\n    # Taking out one blue, yellow and red will still not guarantee 3 of the same color.\n    # So at this point, we have taken out 1 blue + 1 yellow + 1 red = 3 marbles.\n    # The next marble we take out must be of a color we already have, ensuring 3 of the same color.\n    # Total marbles taken out = 3 (different colors) + 1 (to ensure 3 of the same color)\n    count = 3 + 1\n\n    return count\n\nans = solution()"
    ],
    "a01e320335ab4dd5a4d3902f2010b2ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let m be Melissa's current age and mm be her mother's current age\n    m, mm = symbols('m mm')\n    \n    # Equation based on the past ages\n    equation1 = Eq(mm - m, 32 - 8)\n    \n    # Equation based on the current ages\n    equation2 = Eq(mm, 3 * m)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (m, mm))\n    \n    return solutions[m]\n\nans = solution()"
    ],
    "60cc013cce3f4dc3889d6f7f58af72a5": [
        "def solution():\n    # Since a flower is embroidered at each corner, these flowers are counted once for each \n    # of the two sides that meet at that corner. To avoid counting these corner flowers \n    # twice, we calculate the number of flowers on the sides without the corners and then \n    # add the corner flowers separately.\n    \n    # Total flowers on one side without corners\n    flowers_per_side_without_corners = 6 - 2 # subtracting the flowers at the two corners\n    \n    # There are 4 sides, and we multiply by 4 to find the total without corners for all sides\n    total_flowers_without_corners = flowers_per_side_without_corners * 4\n    \n    # Add the corner flowers, which are 4\n    total_flowers = total_flowers_without_corners + 4\n    \n    return total_flowers\n\nans = solution()"
    ],
    "d67e4c58bf394611abfd4c9f92360478": [
        "def solution():\n    factors = [i for i in range(1, 49) if 48 % i == 0]\n    even_factors_count = sum(1 for factor in factors if factor % 2 == 0)\n    return even_factors_count\n\nans = solution()"
    ],
    "27557b6401534a719cdf0923343a5978": [
        "def solution():\n    original_length = 10\n    first_cut = 4.8\n    second_cut = 2.73\n\n    remaining_length = original_length - (first_cut + second_cut)\n    longest_piece = max(first_cut, second_cut, remaining_length)\n    shortest_piece = min(first_cut, second_cut, remaining_length)\n    difference_in_length = longest_piece - shortest_piece\n\n    return difference_in_length\n\nans = solution()"
    ],
    "0ee683d386944878b9a97b21d30b9512": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    basketball, volleyball = symbols('basketball volleyball')\n\n    # 5 basketballs and 6 volleyballs cost 325\n    equation1 = Eq(5 * basketball + 6 * volleyball, 325)\n\n    # A basketball costs 10 more than a volleyball\n    equation2 = Eq(basketball, volleyball + 10)\n\n    solutions = solve((equation1, equation2), (basketball, volleyball))\n\n    return solutions[basketball]\n\nans = solution()"
    ],
    "f1695ae843b54e2e815cd446c64a29f4": [
        "def solution():\n    cost_per_bottle = 2.52 / 6\n    cost_for_nine_bottles = cost_per_bottle * 9\n    return cost_for_nine_bottles\n\nans = solution()"
    ],
    "fa6f1ecf65574a4f92806a9db2ff7aa4": [
        "def solution():\n    # The book cost 1/3 of the original amount\n    # The bag cost 1/2 of the remaining amount after buying the book\n    # Their total cost is $132\n    # Let's denote the original amount of money Li Yan had as x\n    # Then the book cost (1/3)x and the bag cost (1/2)(2/3)x = (1/3)x\n    # Hence, the total cost (1/3)x + (1/3)x = (2/3)x\n    # According to Thomas' solution, 5 units equal to $132, but this is incorrect.\n    # It should be 2 units equal to $132. Therefore, let's calculate what one unit represents:\n\n    total_cost = 132\n    # According to the correct interpretation:\n    # 2 units (cost of the book and bag together) are equal to the total cost\n    one_unit_cost = total_cost / 2  # This will give us the cost of 1/3 of the original amount\n\n    # Therefore, the original amount (x) would be 3 times one_unit_cost, because it's 3/3\n    original_amount = one_unit_cost * 3\n\n    return original_amount\n\nans = solution()"
    ],
    "0d0aa1e9d4534f37bbbcb05df00921eb": [
        "def solution():\n    pattern = '1234'\n    period_length = len(pattern)\n    total_digits = 47\n    complete_repeats = total_digits // period_length\n    partial_repeat_length = total_digits % period_length\n\n    sum_complete_repeats = sum(map(int, pattern)) * complete_repeats\n    sum_partial_repeat = sum(map(int, pattern[:partial_repeat_length]))\n\n    return sum_complete_repeats + sum_partial_repeat\n\nans = solution()"
    ],
    "e886e230e9a14129ab9efc5f51fc6eeb": [
        "def solution():\n    total_points = 61\n    total_problems = 25\n    \n    for correct in range(total_problems + 1):\n        incorrect = total_problems - correct\n        points = 4 * correct - incorrect\n        if points == total_points:\n            for j_correct in range(correct + 1, total_problems + 1):\n                j_incorrect = total_problems - j_correct\n                j_points = 4 * j_correct - j_incorrect\n                if j_points == total_points:\n                    return total_problems - correct\n\nans = solution()"
    ],
    "cb28d5923791411abd5c48b4c2e56055": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(0, 10):\n            ab = 10 * a + b\n            ba = 10 * b + a\n            if 8 * ab == 3 * ba:\n                return ab\n\nans = solution()"
    ],
    "d042bcbac05b43a89ee5aae713200f24": [
        "def solution():\n    total_pupils = 40\n    average_pencils = 35\n    boys_average = 20\n    girls_average = 60\n\n    # Let the number of boys be x\n    # Then the number of girls is 40 - x\n    # total pencils owned by boys is boys_average * x\n    # total pencils owned by girls is girls_average * (total_pupils - x)\n    # The average number of pencils (total_pupils * average_pencils) is equal to the sum of pencils owned by boys and girls\n    # boys_average * x + girls_average * (total_pupils - x) = total_pupils * average_pencils\n    \n    # Now we solve for x:\n    x = (total_pupils * average_pencils - girls_average * total_pupils) / (boys_average - girls_average)\n    \n    return int(x)\n\nans = solution()"
    ],
    "2760fd70b00d4bc1bbb33c4a1176ce49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pigs, goats = symbols('pigs goats')\n    \n    # Equations based on the question's information\n    equation1 = Eq(3 * pigs + 1 * goats, 440)\n    equation2 = Eq(1 * pigs + 2 * goats, 280)\n    \n    # Solving for the price of one pig and one goat\n    prices = solve((equation1, equation2), (pigs, goats))\n    \n    # Calculating the total cost for 5 pigs and 5 goats\n    total_cost = 5 * prices[pigs] + 5 * prices[goats]\n\n    return total_cost\n\nans = solution()"
    ],
    "8d9f841035384ec78cd71c7adbc51cf2": [
        "def solution():\n    pounds = 1.28\n    pence = 57\n    total_pounds = pounds + (pence / 100)\n    return total_pounds\n\nans = solution()"
    ],
    "e42cc648c3f649cf90ee902c4be9e740": [
        "def solution():\n    ans = 15 * 3\n    return ans\n\nans = solution()"
    ],
    "70a735430d5b4777a79bbddaf2823ef0": [
        "def solution():\n    # Cost constants\n    price_per_cupcake = 4.50\n    shipping_handling = 12\n    discount = 0.20\n    \n    # Bill amount\n    total_bill = 120\n    \n    # Calculate the number of cupcakes for orders of 20 or fewer cupcakes\n    if (total_bill - shipping_handling) / price_per_cupcake <= 20:\n        cupcakes_ordered = (total_bill - shipping_handling) // price_per_cupcake\n    else:\n        # Calculate the number of cupcakes for orders of more than 20 cupcakes\n        # Calculate cost for the first 20 cupcakes with shipping and handling\n        first_20_cost = 20 * price_per_cupcake + shipping_handling\n        # Calculate remaining amount after the first 20 cupcakes\n        remaining_amount = total_bill - first_20_cost\n        # Calculate the price per cupcake with the discount for additional cupcakes\n        discounted_price = price_per_cupcake * (1 - discount)\n        # Calculate the number of cupcakes bought with the remaining amount\n        additional_cupcakes = remaining_amount / discounted_price\n        # Total number of cupcakes ordered\n        cupcakes_ordered = 20 + additional_cupcakes\n\n    return int(cupcakes_ordered)\n\nans = solution()"
    ],
    "1f17462588b24d4d87e7ac26ce8e297e": [
        "def solution():\n    # Starting from the smallest 5-digit number, 10000, to the largest, 99999\n    for num in range(10000, 100000):\n        if int(\"1\" + str(num)) * 3 == int(str(num) + \"1\"):\n            return num\n\nans = solution()"
    ],
    "5b2be8c5931d445e95f69e4a169b6320": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A = symbols('A')\n    equation = Eq(2 + 1 / (2 + 1 / (1 + 1 / (2 + 1 / A))), 64/27)\n    solution = solve(equation, A)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f29bca0ca85649a0aa278151d40c1060": [
        "def solution():\n    people_in_front = 9\n    position_from_back = 12\n\n    total_people = people_in_front + position_from_back - 1  # Subtract one since Rose is counted twice\n\n    return total_people\n\nans = solution()"
    ],
    "ad987dbb1afa406d877032905dfd4b9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the time it takes for the lazy one to paint the house alone\n    x = symbols('x')\n\n    # 1/x is the work rate of the lazy one, 1/10 is the work rate of the energetic one\n    # Together their combined work rate is 1/6 (since they finish in 6 days together)\n    equation = Eq(1/x + 1/10, 1/6)\n\n    # Solve the equation for x\n    days_lazy_one = solve(equation, x)\n\n    return days_lazy_one[0]\n\nans = solution()"
    ],
    "c2a4472f1dcc4adaa002fb9b0cdbc480": [
        "def solution():\n    john_age_now = 8\n    grandmother_age_now = john_age_now + 42\n    total_age_in_2_years = (john_age_now + 2) + (grandmother_age_now + 2)\n    return total_age_in_2_years\n\nans = solution()"
    ],
    "af15f396b0a9452e90cd92024ee3655d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # defining the symbol for the number John thought of\n    x = symbols('x')\n    \n    # translating the word problem into an equation\n    # (x + 45) / 3 = 2 * x\n    equation = Eq((x + 45) / 3, 2 * x)\n\n    # finding the solution to the equation\n    solution = solve(equation, x)\n\n    # solution will be a list, we take the first (and only) solution as it is\n    # a linear equation and thus has only one solution\n    return solution[0]\n\nans = solution()"
    ],
    "164b7924a0ed4adebd005bf7b479d61e": [
        "def solution():\n    num_terms = 50\n    first_term = 1\n    last_term = 50\n\n    sum_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_sequence\n\nans = solution()"
    ],
    "c873b5b5ac9541dcb53c627cbe9f99fb": [
        "def solution():\n    result = 52\n    thought_number = (result - 10) / 2\n    return thought_number\n\nans = solution()"
    ],
    "48f2b82e698b40afaaebc96c59f848cf": [
        "def solution():\n    count = 0\n    # Since each brother should get at least two books, we start from 2 and go up to (10 - 2*2) books\n    for brother1 in range(2, 10 - 2*2 + 1):\n        for brother2 in range(2, 10 - brother1 - 2 + 1):\n            brother3 = 10 - brother1 - brother2\n            if brother3 >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "d2baf801099b456eb142be13a3d0ee04": [
        "def solution():\n    ans = -2 + 9\n    return ans\n\nans = solution()"
    ],
    "1b6c26ceb8bb4bedb8eb52f798a8d704": [
        "def solution():\n    # Calculate the worst-case scenario for drawing marbles\n    # Draw all marbles of one color, then all of another color,\n    # and then all but one of the third color to ensure that\n    # the next marble is guaranteed to be of the fourth color.\n\n    # For the worst-case scenario you need to consider drawing:\n    # All 12 red marbles (12), all 9 blue marbles (12+9=21),\n    # all 8 yellow marbles (12+9+8=29),\n    # but only 3 red marbles are needed,\n    # so we subtract 1 because we already counted red marbles.\n    \n    # We do not need to draw all red marbles again because we already have 3 red,\n    # so we only need to draw 1 more marble of any color to guarantee the fourth color which is red.\n\n    # Draw 1 more to ensure the fourth color (29+1=30).\n\n    return 12 + 9 + 8 + 1  # Red + Blue + Yellow + 1\n\nans = solution()"
    ],
    "902e4b7c9173456ebdf391276d04a873": [
        "def solution():\n    number_str = '5' * 19 + '{}' + '9' * 19\n    for digit in range(10):\n        if int(number_str.format(digit)) % 7 == 0:\n            return digit\n\nans = solution()"
    ],
    "6563b1695a224e99b4db826a159ebb3f": [
        "def solution():\n    pages_first_day = 40\n    fraction_of_book = 1/5\n    \n    total_pages = pages_first_day * (1 / fraction_of_book)\n    \n    return int(total_pages)\n\nans = solution()"
    ],
    "c07d7632fe45424588ee9b8ac2d2fccf": [
        "def solution():\n    max_height = 131 - (31 - 10)\n    return max_height\n\nans = solution()"
    ],
    "5c64c7efc74e45c9b22395c64f0188f1": [
        "def solution():\n    for hundreds in range(1, 10):\n        for ones in range(10):\n            tens = 2 * hundreds\n            if tens < 10 and hundreds == ones + 1 and hundreds + tens + ones == 15:\n                return hundreds * 100 + tens * 10 + ones\n\nans = solution()"
    ],
    "7607c9c8b07e482d9e79d3a708db918f": [
        "def solution():\n    # First two-digit number with unit digit 6 is 16 (10 + 6)\n    first_num = 16\n    # Last two-digit number with unit digit 6 is 96 (90 + 6)\n    last_num = 96\n    # Each two-digit number with unit digit 6 increases by 10\n    increment = 10\n\n    # The total count would be the (difference between last and first) divided by increment, plus 1\n    count = ((last_num - first_num) // increment) + 1\n\n    return count\n\nans = solution()"
    ],
    "2dfebe97055d446791ecaff5fcc836bf": [
        "def solution():\n    last_purchase = 105.6 - 14.4\n    total_spent = last_purchase + 105.6\n    return total_spent\n\nans = solution()"
    ],
    "fcb8fb796c2e414aa7381ebb608de85a": [
        "def solution():\n    return 73 * 42\n\nans = solution()"
    ],
    "3d72ae69fbf944028dbf7faeb677cf3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the magic number as a symbol\n    magic_number = symbols('magic_number')\n    \n    # Create equations based on the given problem\n    equation = Eq(208 - magic_number, 9 * (136 - magic_number))\n    \n    # Solve the equations\n    magic_number_value = solve(equation, magic_number)\n    \n    # Return the value of the magic number\n    return magic_number_value[0]\n\nans = solution()"
    ],
    "0d39e6b35f684ae79df0144ef9a461d4": [
        "def solution():\n    ans = 0.7 / 100\n    return ans\n\nans = solution()"
    ],
    "39dc0e644ff04e4b8de2705b050243b2": [
        "def solution():\n    jason_books = 30\n    # Let Anthea have x books\n    # Jason gives Anthea 4 books: Jason has (30 - 4) books, Anthea has (x + 4) books\n    # Both have the same number of books after the exchange, so 30 - 4 = x + 4\n    anthea_books = (jason_books - 4) - 4\n    # The difference between Jason and Anthea at first is their initial number of books\n    difference = jason_books - anthea_books\n    return difference\n\nans = solution()"
    ],
    "f7ea1bce2ab643be811669ebb19981e8": [
        "def solution():\n    # Define the initial two numbers in the sequence\n    a, b = 3, 10\n    \n    # Since each number is the sum of the previous two, and we want to find the remainder\n    # when divided by 3, we only need the remainder of each term when divided by 3.\n    # The sequence of remainders will eventually repeat because there are only\n    # a finite number of possible pairs of remainders for (a % 3, b % 3).\n    \n    # Find the pattern of remainders\n    rem_a, rem_b = a % 3, b % 3\n    remainders = [rem_a, rem_b]\n    \n    while True:\n        rem_next = (rem_a + rem_b) % 3\n        rem_a, rem_b = rem_b, rem_next\n\n        # Check if the current pair of remainders has appeared before\n        if (rem_a, rem_b) == (remainders[0], remainders[1]):\n            break\n        \n        remainders.append(rem_next)\n\n    # The length of the repeating sequence of remainders\n    cycle_length = len(remainders) - 1\n\n    # Find the position of the 2023rd term within the cycle\n    position_in_cycle = (2023 - 1) % cycle_length\n\n    # Get the remainder of the 2023rd term\n    rem_of_2023rd = remainders[position_in_cycle]\n\n    return rem_of_2023rd\n\nans = solution()"
    ],
    "b0b3f16fb74d472d8584aeb80b4a4f84": [
        "def solution():\n    remainder_when_5 = 3\n    remainder_when_4 = 9\n\n    gifts = remainder_when_4  # Start at 9, because we know at least 9 gifts are there from the second condition\n    while True:\n        # If the number of gifts gives us the correct remainder when divided by 5, we have found the number of gifts\n        if (gifts - remainder_when_5) % 5 == 0 and (gifts - remainder_when_4) % 4 == 0:\n            break\n        gifts += 4  # increase gifts by 4 each time, because that is the remainder when giving 4 per student\n\n    # The number of students is the total gifts divided by 5 (since giving 5 to each has no gifts left over)\n    num_students = (gifts - remainder_when_5) / 5\n\n    return int(num_students)\n\nans = solution()"
    ],
    "b6d78733f8874f2bbfe35bd591c415ac": [
        "def solution():\n    factors_count = 0\n    for i in range(1, 841):\n        if 840 % i == 0:\n            factors_count += 1\n    return factors_count\n\nans = solution()"
    ],
    "4abc9fccc13742938eb625a6b470a258": [
        "def solution():\n    return 349 * 7\n\nans = solution()"
    ],
    "d920f123f70448728a0dafe2a25fdf8d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bella, chloe = symbols('alan bella chloe')\n\n    equation1 = Eq(alan / bella, 4 / 3)\n    equation2 = Eq(alan - chloe, 20)\n    equation3 = Eq(alan + bella + chloe, 200)\n\n    solutions = solve((equation1, equation2, equation3), (alan, bella, chloe))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "9778a46322434ec1b4d042645d3fe72c": [
        "def solution():\n    box_of_chocolates = 7.85\n    bar_of_chocolate = 1.83\n    number_of_bars = 2\n    note = 20\n\n    total_cost = box_of_chocolates + (bar_of_chocolate * number_of_bars)\n    change = note - total_cost\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "008ec416ca584514bc4c64610a10f70c": [
        "def solution():\n    from math import factorial\n\n    # Lily stands on the left end (1 way) and her mother on the right end (1 way).\n    # The remaining three family members can be arranged in any order between them.\n    # Thus, we calculate the factorial of the number of those family members.\n    remaining_family_members = 3\n    arrangements = factorial(remaining_family_members)\n\n    return arrangements\n\nans = solution()"
    ],
    "56e3afa3b21b4b4d94f49f7e28b2d801": [
        "def solution():\n    # Given first term and the difference in the arithmetic sequence\n    first_term = 7\n    difference = 4\n\n    # Find the number of the last row using the formula for the nth term of an arithmetic sequence: \n    # last_term = first_term + (n - 1) * difference\n    # where last_term is 99 in this case\n    last_term = 99\n    n = ((last_term - first_term) // difference) + 1\n\n    # Now calculate the sum of an arithmetic sequence using the formula\n    # sum = n/2 * (first_term + last_term)\n    total_seats = n * (first_term + last_term) // 2\n    \n    return total_seats\n\nans = solution()"
    ],
    "d648707a7707454fba27679a28405452": [
        "def solution():\n    for number in range(10, 100):\n        if number % 5 == 4 and number % 7 == 4:\n            return number\n\nans = solution()"
    ],
    "d56f06764b62432b87f7f6c8d24937fd": [
        "def solution():\n    ans = 1.28 - 0.57\n    return ans\n\nans = solution()"
    ],
    "e681c565553246ed822a81c5b707ec85": [
        "from itertools import permutations\n\ndef solution():\n    # Generate all 2-digit permutations with non-repeating digits from 1 to 8\n    perms = [''.join(p) for p in permutations('12345678', 2)]\n    # Convert string to integers\n    num_perms = [int(p) for p in perms]\n\n    # Filter the numbers based on the given conditions\n    # Condition 1: In the smallest number, the ones digit is twice the tens digit.\n    # Condition 2: In the largest number, the sum of ones and tens digits is 9.\n    # Condition 3: In the second largest number, the tens digit is 5 more than the ones digit.\n    # Condition 4: There is only 1 odd number among these 4 numbers.\n    valid_numbers = []\n    for num in num_perms:\n        tens, ones = divmod(num, 10)\n        if tens * 2 == ones or tens + ones == 9 or tens - 5 == ones or num % 2 != 0:\n            valid_numbers.append(num)\n\n    # Sort the valid numbers to find the second smallest\n    valid_numbers.sort()\n    # Eliminate numbers that do not fulfill all conditions\n    # Set which stores used digits so far\n    used_digits = set()\n\n    # Iterate over the sorted valid numbers\n    for x in valid_numbers:\n        str_x = str(x)\n        # If digits have already been used, it cannot be part of the numbers\n        if any(digit in used_digits for digit in str_x):\n            continue\n\n        # Check if the number fulfills all conditions\n        tens, ones = divmod(x, 10)\n        # Find the 4 numbers based on the given conditions\n        if tens * 2 == ones:\n            smallest = x\n        elif tens + ones == 9:\n            largest = x\n        elif tens - 5 == ones:\n            second_largest = x\n        elif x % 2 != 0:\n            odd_one = x\n        else:\n            continue\n\n        # Check if we found one of each type\n        if len({smallest, largest, second_largest, odd_one}) == 4:\n            # Get second smallest number (bigger than the smallest which has the ones digit twice the tens digit)\n            second_smallest = sorted([smallest, largest, second_largest, odd_one])[1]\n            return second_smallest\n        used_digits.update(str_x)\n\n# Store the answer by calling the function `solution`\nans = solution()"
    ],
    "9c5b7505e33a431cbdc19a2c3eb56463": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_visitors = symbols('total_visitors')\n    children_fraction = 3/5\n    men_fraction = 1/2\n\n    children = children_fraction * total_visitors\n    remaining = total_visitors - children\n    men = men_fraction * remaining\n\n    equation = Eq(children - men, 140)\n\n    total = solve(equation, total_visitors)\n\n    return total[0]\n\nans = solution()"
    ],
    "355c1761cec84abd8c37e4d0cef83961": [
        "def solution():\n    # Average of three numbers is 120\n    average_three = 120\n    # Total sum of three numbers\n    sum_three = average_three * 3\n\n    # New average with the fourth number is 150\n    average_four = 150\n    # Total sum of four numbers\n    sum_four = average_four * 4\n\n    # Difference is the fourth number\n    fourth_number = sum_four - sum_three\n\n    return fourth_number\n\nans = solution()"
    ],
    "e2a5a025a0174c48a9cbcfecee7eec99": [
        "def solution():\n    def sum_of_squares(n):\n        return (n * (n + 1) * (2 * n + 1)) // 6\n    \n    kimmy_answer = (15 * 16 * 31) // 6\n    correct_answer = sum_of_squares(15) - sum_of_squares(4)\n    \n    return kimmy_answer, correct_answer\n\nans = solution()"
    ],
    "c49ccde6fc4248779aaf8093faa8ad18": [
        "def solution():\n    for correct in range(21):\n        wrong = 20 - correct\n        score = correct * 5 - wrong * 2\n        if score == 51:\n            return correct\n\nans = solution()"
    ],
    "bab761c62984431592b8726b89f2c00c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, peter = symbols('sam peter')\n\n    # sam had 40 stickers more than peter\n    equation1 = Eq(sam, peter + 40)\n\n    # sam gave 20% of his stickers to peter\n    equation2 = Eq(sam - 0.20 * sam, sam * (1 - 0.20))\n\n    # peter gave 25% of his stickers to sam\n    equation3 = Eq(peter + 0.20 * sam - 0.25 * (peter + 0.20 * sam), peter * (1 + 0.20 * (1 - 0.20)) - 0.25 * (peter + 0.20 * sam))\n\n    # in the end, sam has 96 stickers more than peter\n    equation4 = Eq(sam * (1 - 0.20) + 0.25 * (peter + 0.20 * sam), (peter * (1 + 0.20 * (1 - 0.20)) - 0.25 * (peter + 0.20 * sam)) + 96)\n\n    # solve the system of equations\n    solution = solve((equation1, equation4), (sam, peter))\n\n    return solution[peter]\n\nans = solution()"
    ],
    "a377ef0412d7428190675053dcb17b39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the starting amount of money be 'x'\n    x = symbols('x')\n    \n    # After spending (6/11)x + 5\n    after_highlighters = x - (6/11)*x - 5\n    \n    # Then spending (3/10) of the remainder and an additional $12\n    after_pens = after_highlighters - (3/10)*after_highlighters - 12\n    \n    # She has $30 left\n    equation = Eq(after_pens, 30)\n    \n    # Solve for x\n    initial_amount = solve(equation, x)\n    \n    return initial_amount[0]\n\nans = solution()"
    ],
    "e03fffbc9560433d92099ac8fe50d88b": [
        "def solution():\n    ans = 543 * 6\n    return ans\n\nans = solution()"
    ],
    "98eef6de38874e70b51aaed908dca418": [
        "def solution():\n    ans = (26 + (12 + 6) * 3) / 4\n    return ans\n\nans = solution()"
    ],
    "f15fa89c42d94b389e9ef9de02718b7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Sally's and Gillian's current ages\n    sally, gillian = symbols('sally gillian')\n\n    # Equation based on the current age ratio 2:7\n    equation1 = Eq(sally / gillian, 2/7)\n\n    # Equation based on the future age ratio 1:2 (in 15 years)\n    equation2 = Eq((sally + 15) / (gillian + 15), 1/2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sally, gillian))\n\n    # Return Sally's current age\n    return solutions[sally]\n\nans = solution()"
    ],
    "2c7e97e51b1c44f49d2f4e7c79fde704": [
        "def solution():\n    mistaken_subtrahend = 70\n    mistaken_result = 30\n    actual_subtrahend = 75\n\n    # Find the minuend (the number being subtracted from)\n    minuend = mistaken_result + mistaken_subtrahend\n    \n    # Calculate the correct result\n    correct_result = minuend - actual_subtrahend\n    \n    return correct_result\n\nans = solution()"
    ],
    "7b32265def7a4762b0e99a9bf7936e79": [
        "def solution():\n    lcm = (3 * 4) // math.gcd(3, 4)\n    customers = 40\n    count = customers // lcm\n    return count\n\nimport math\nans = solution()"
    ],
    "a1d04f9a8f8d4d059eb87e3597859b60": [
        "def solution():\n    hook_walk_time = 20\n    lily_walk_time = hook_walk_time - 5\n    return lily_walk_time\n\nans = solution()"
    ],
    "3061e5b8281f449bae77026f2740418a": [
        "def solution():\n    apples_per_kg = 9\n    apples_per_cake = 4\n    total_apples_used = 8 * apples_per_kg\n\n    number_of_cakes = total_apples_used / apples_per_cake\n\n    return int(number_of_cakes)\n\nans = solution()"
    ],
    "d7682b78c94a49209da98614f89b4b03": [
        "def solution():\n    num_of_45 = 35\n    whole = num_of_45 / (45 / 9)\n    return int(whole)\n\nans = solution()"
    ],
    "681b53f5f3ca46d192bdc4d5538dc3f9": [
        "def solution():\n    distance_between_seeds = 1.5\n    number_of_seeds = 12\n    total_distance = distance_between_seeds * number_of_seeds\n    return total_distance\n\nans = solution()"
    ],
    "a91b6b3ee1ba49258ef75384834b6006": [
        "def solution():\n    return (3/8) * 32\n\nans = solution()"
    ],
    "e3c684818e824d38b568f73a39a2e8a3": [
        "def solution():\n    original_pieces = 10\n    total_pieces = 16\n    pieces_after_cut = 3\n\n    # Let x be the number of pieces of paper that were cut into three parts\n    # Each paper cut into three parts results in an increase of 2 pieces (3 parts - 1 original piece)\n    # So the equation would be: original_pieces + (2 * x) = total_pieces\n\n    x = (total_pieces - original_pieces) / (pieces_after_cut - 1)\n    return int(x)\n\nans = solution()"
    ],
    "48863edbbbd648d296639b0ac7b6a0a5": [
        "def solution():\n    ans = 198 + 67 - 25\n    return ans\n\nans = solution()"
    ],
    "51f55ad6ea4b438da0c7c862bf88d5ca": [
        "def solution():\n    total_boys = 12\n    avg_boys = 10\n    total_participants = 12 + 8\n    avg_total = 14\n\n    total_score_boys = total_boys * avg_boys\n    total_score_all = total_participants * avg_total\n\n    total_score_girls = total_score_all - total_score_boys\n    avg_girls = total_score_girls / 8\n    \n    return avg_girls\n\nans = solution()"
    ],
    "13a8b45061f4450e89e1c253f4020c18": [
        "def solution():\n    # Initialization of variables\n    n = 0  # The number of students on one side of the initial square array\n    additional_students = 16 - 9  # The difference between needed and surplus students\n    \n    while True:\n        # Calculate the total students for the current square array\n        total_students = n**2 + 9\n        # Calculate the total students for the larger square array\n        larger_square_students = (n + 1)**2\n        \n        # Check if the difference is equal to the additional students needed\n        if larger_square_students - total_students == additional_students:\n            # If the condition is met, we have found our answer\n            break\n        n += 1  # Increment to check the next possible square\n    \n    # The answer is the total number of students in the initial square\n    ans = total_students\n    return ans\n\nans = solution()"
    ],
    "18a91f2a3e4b4cc6a04adbcfd3069472": [
        "def solution():\n    # Initial condition\n    envelopes_initial = 5\n    \n    # After one week\n    envelopes_additional = 2\n    \n    # Total envelopes after adding new postcards\n    total_envelopes = envelopes_initial + envelopes_additional\n    \n    # Since each envelope has the same number of postcards (unit rate),\n    # and there were 50 postcards in 5 envelopes initially,\n    # we find the number of postcards per envelope\n    postcards_per_envelope = 50 / envelopes_initial\n    \n    # Now we calculate the total number of postcards after receiving additional postcards\n    # by multiplying the number of postcards per envelope with the total number of envelopes\n    total_postcards = postcards_per_envelope * total_envelopes\n\n    return total_postcards\n\nans = solution()"
    ],
    "c0dd58bb208c4720a65f8a3da63ebc53": [
        "def solution():\n    # Possible coin values in UK currency: 1p, 2p, 5p, 10p, 20p, 50p, £1, £2\n    coin_values = [0.01, 0.02, 0.05, 0.10, 0.20, 0.50, 1.00, 2.00]\n    # The total change Harry received\n    total_change = 2.50\n    \n    for coin in coin_values:\n        # Since there is an exact pair for each coin, we multiply the coin value by 2\n        pair_value = coin * 2\n        # Subtract the pair value from the total change\n        remaining_change = total_change - pair_value\n        # Check if the remaining value can be exactly composed of other pairs of coins\n        if remaining_change % 2 == 0:\n            # As we are iterating from smallest to largest,\n            # the first valid coin is the smallest coin\n            return coin\n\nans = solution()"
    ],
    "3443aaa6a82a4aa1acae9f85d2a28ffe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the total number of cookies baked at first\n    x = symbols('x')\n\n    # if she threw away 3/5 of the cookies, she had 2/5 of the cookies left\n    remaining_cookies = 2/5 * x\n\n    # she sold 75% of the remaining cookies\n    sold_cookies = 3/4 * remaining_cookies\n\n    # the number of burnt cookies is 42 more than the number of sold cookies\n    burnt_cookies = sold_cookies + 42\n\n    # the number of burnt cookies is 3/5 of total cookies baked\n    equation = Eq(3/5 * x, burnt_cookies)\n\n    # solve the equation\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d7759b0612fe43e8a7e3a06d59283855": [
        "def solution():\n    cost_per_100g = 0.80\n    grams_needed = 250\n    cost_per_gram = cost_per_100g / 100\n    total_cost = cost_per_gram * grams_needed\n    return total_cost / 100  # Convert pence to pounds\n\nans = solution()"
    ],
    "8cf2ad99816645c8ba0e8566d2059b61": [
        "def solution():\n    ans = ((-3.2) - (0.2)**2) / (-1.8) - (41.08 - (-2/5)**2) / (3 + (-2)**3)\n    return ans\n\nans = solution()"
    ],
    "03ff37f2d8384e4285c23e9e15eec692": [
        "def solution():\n    total_apples = 27\n    apples_per_container = 4\n\n    num_containers = (total_apples + apples_per_container - 1) // apples_per_container\n\n    return num_containers\n\nans = solution()"
    ],
    "a5661c18fea04c948a12554694325f0d": [
        "def solution():\n    for i in range(1, 10):\n        for j in range(1, 10000):\n            original_number = j * 10 + 9\n            new_number = int('9' + str(j))\n            if new_number == 4 * original_number:\n                return original_number\n\nans = solution()"
    ],
    "d6d6b3b23b51458482c4922539d3c5df": [
        "def solution():\n    ans = 50 - 21 - 19\n    return ans\n\nans = solution()"
    ],
    "5477bd06248540239e46216795757a4a": [
        "def solution():\n    score = 14\n    total = 20\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "2324e551139441b59d8da8e39e7bf259": [
        "def solution():\n    for y in range(10):\n        if (1070 + y) % 6 == 0:\n            return y\n\nans = solution()"
    ],
    "7b61fa01ec374c2b83c5f8a39d04e91c": [
        "def solution():\n    for i in range(10, 100):\n        if i % 4 == 1 and i % 7 == 1:\n            return i\n\nans = solution()"
    ],
    "93e28acfc00d445394efdabe5a2da3c8": [
        "def solution():\n    from math import factorial\n\n    # Total number of students is Laura, Rita + 4 others = 6 students\n    total_students = 6\n    \n    # Laura must stand in front, so there are 5 positions left\n    remaining_positions = total_students - 1\n    \n    # Rita cannot stand at the end, so she has 4 positions to choose from\n    rita_positions = remaining_positions - 1\n    \n    # The other four students can be arranged in any order in the remaining positions\n    other_students_arrangements = factorial(remaining_positions - 1)\n\n    # The total number of ways is positions for Rita times arrangements for the others\n    total_ways = rita_positions * other_students_arrangements\n    \n    return total_ways\n\nans = solution()"
    ],
    "90c447fcc0de4e5a9b771920095757aa": [
        "def solution():\n    sugar = 70\n    water = 490\n    total_solution = sugar + water\n    \n    concentration = (sugar / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "90d9980aee5c463cad10072163e15658": [
        "def solution():\n    kevin_speed = 80  # mph\n    jerry_fraction_travelled = 3/7\n    \n    # Jerry travels 2/5 of the total length every hour\n    # Kevin travels at a constant speed of 80 mph\n    # When Jerry has traveled 3/7 of the way, they meet - which means Kevin also traveled 4/7 of the way\n    # Jerry's speed can be expressed as (2/5) * total_length per hour\n    # In the same time, Kevin travels 4/7 * total_length\n\n    # Now, we want to find the point where (3/7)L / (2/5)L = 80 mph\n    # Let total_length be represented by L\n    # Therefore, the ratio of Jerry's speed to Kevin's speed is equal to the fraction of the distance they traveled\n    jerry_speed_to_kevin_speed_ratio = jerry_fraction_travelled / ((1 - jerry_fraction_travelled))\n    jerry_speed = kevin_speed * jerry_speed_to_kevin_speed_ratio\n    \n    # We know that Jerry travels 2/5 of the road length in one hour\n    # 2/5 of the road length = Jerry's speed\n    total_length = jerry_speed / (2/5)\n    \n    return total_length\n\nans = solution()"
    ],
    "b5485eaf0ddf46c89dd4082df078ffbf": [
        "def solution():\n    n = (36 / 3) / 4\n    return n\n\nans = solution()"
    ],
    "2bf4015e0be3437da65611461a6f01c5": [
        "def solution():\n    a, b = 4, 7\n    ans = (a + b) * a\n    return ans\n\nans = solution()"
    ],
    "0f16879a0bec4f9fb882203fb6a75cef": [
        "def solution():\n    regular_price = 120\n    discount_50_percent = regular_price * 0.5\n    additional_discount_20_percent = discount_50_percent * 0.2\n    final_price = discount_50_percent - additional_discount_20_percent\n    return final_price\n\nans = solution()"
    ],
    "799dbcfeda0a40a3a052a9aed029df33": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "3d94d3aa90b542049e493d4ab7538dea": [
        "def solution():\n    apples_sold = 88\n    fraction_sold = 4 / 7\n    apples_brought = apples_sold / fraction_sold\n    \n    return int(apples_brought)\n\nans = solution()"
    ],
    "695197b7d2474faba84b6999f62c3332": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Singapore time of departure\n    sg_departure_time = datetime(2023, 8, 24, 5, 0)\n\n    # London time of arrival\n    london_arrival_time = datetime(2023, 8, 24, 11, 0)\n\n    # Adjust for time difference (+7 hours for Singapore)\n    adjusted_sg_time_of_arrival = london_arrival_time + timedelta(hours=7)\n\n    # Calculate the duration of the flight\n    flight_duration = adjusted_sg_time_of_arrival - sg_departure_time\n\n    return flight_duration.seconds // 3600  # convert to hours\n\nans = solution()"
    ],
    "bac4be7824ee43909d38294e95af5558": [
        "def solution():\n    return 42 / 10\n\nans = solution()"
    ],
    "ca71d8deb6874a48b997dfa4946cf66c": [
        "def solution():\n    total_pupils = 40\n    average_pencils = 35\n    boys_average = 20\n    girls_average = 60\n    \n    # Let the number of boys be x\n    # Then, the number of girls will be (total_pupils - x)\n    # (boys_average * x + girls_average * (total_pupils - x)) / total_pupils = average_pencils\n    # Solve the linear equation to find the number of boys (x)\n    x = (average_pencils - girls_average) / (boys_average - girls_average) * total_pupils\n    \n    return int(x)\n\nans = solution()"
    ],
    "e15d4768dc4c4072857f5a57de71a7fd": [
        "def solution():\n    win_prob = 0.3\n    draw_prob = 0.1\n    lose_prob = 1 - win_prob - draw_prob\n\n    # Probability of winning one game and losing another\n    win_lose = win_prob * lose_prob\n\n    # Probability of losing one game and winning another\n    lose_win = lose_prob * win_prob\n\n    # Probability of winning exactly one game\n    prob_win_exactly_one = win_lose + lose_win\n\n    return prob_win_exactly_one\n\nans = solution()"
    ],
    "6a26a1f4961b42cda05e71749b6db36e": [
        "def solution():\n    # As the number of lollipops left over when putting 4 into each box is constant (32),\n    # the total number of lollipops is 32 more than a multiple of 4.\n    # Similarly, when putting 7 lollipops into each box, the remainder is 3,\n    # so the total number of lollipops is 3 more than a multiple of 7.\n    \n    # We can start checking from 32, which is the minimum possible number of lollipops,\n    # and increment by 4 each time until the remainder when divided by 7 is 3.\n    \n    lollipops = 32\n    while (lollipops % 7) != 3:\n        lollipops += 4\n    \n    return lollipops\n\nans = solution()"
    ],
    "a6f1656bdca94cb5bb2e8feecf11199a": [
        "def solution():\n    import math\n\n    a = 2010\n    b = 2377\n    c = 3111\n\n    # Differences between the numbers to get the remainders out of the equation\n    ab_diff = b - a\n    ac_diff = c - a\n\n    # Greatest common divisor of the differences\n    d = math.gcd(ab_diff, ac_diff)\n\n    # Now find the largest R using the formula R = a % d (since D divides a-R precisely)\n    r = a % d\n\n    return d + r\n\nans = solution()"
    ],
    "c8ffb29e933649f1a14001292da6814e": [
        "def solution():\n    return 53 * 9\n\nans = solution()"
    ],
    "f23477aaae354680a318e24f3cc005a7": [
        "def solution():\n    decimal = str(1 / 13)[2:]  # Convert the fraction to decimal and remove the \"0.\"\n    period = len(decimal)  # The length of the recurring cycle\n    \n    # The 2012th decimal place in a recurring cycle\n    decimal_place = (2012 % period) - 1\n    \n    if decimal_place == -1:  # If mod result is 0, means it's the last digit of the cycle\n        return int(decimal[-1])\n    else:\n        return int(decimal[decimal_place])\n\nans = solution()"
    ],
    "1704b8a5c6f542c3a689bc27fdeec9dd": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "23f30d5016a749f989d2709b4e2a66a8": [
        "def solution():\n    count = 0\n    for i in range(10, 100):\n        if (i // 10 + i % 10) % 5 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "86efdba907a74bacbc9b69da4825ce61": [
        "def solution():\n    def custom_operator(a, b):\n        return a * 3 + b * 4\n    \n    ans = custom_operator(4, 7)\n    return ans\n\nans = solution()"
    ],
    "2ad497194d6f450abccaef3b55d6f58f": [
        "def solution():\n    # Let the original number of Eddi's cards be 8x and Wiya's cards be 7x\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    # Eddi's original cards = 8x, after giving away 4 cards = 8x - 4\n    # Wiya's original cards = 7x, after receiving 4 cards = 7x + 4\n    # New ratio equation: (8x - 4) / (7x + 4) = 18/17\n    equation = Eq((8 * x - 4) / (7 * x + 4), 18/17)\n\n    # Solve for x\n    x_value = solve(equation, x)\n\n    # Eddi's original cards = 8x\n    eddi_original_cards = 8 * x_value[0]\n\n    return int(eddi_original_cards)\n\nans = solution()"
    ],
    "770c05d97a024fdbaf944f8e7f240d9f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 * (2 * x - 2), 30 - 3 * x)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "5500f21bc74e4e09974c72edd6ba504d": [
        "def solution():\n    blue_marbles = 72\n    red_to_blue_ratio = 5 / 6\n    red_marbles = blue_marbles * red_to_blue_ratio\n    green_marbles = red_marbles / 2\n    total_marbles = blue_marbles + red_marbles + green_marbles\n    return total_marbles\n\nans = solution()"
    ],
    "8a86b5d67c0c44e89925084668201394": [
        "def solution():\n    # Calculate the numerator and the denominator separately and then divide them\n    numerator = (2017 + 7/8) * (3 + 2/3) - 2016.875 * (11/3)\n    denominator = (2017 + 1/3 - 2016.875) * 17\n    # Calculate the final result by dividing the numerator by the denominator\n    # and then multiplying by 3 + 23/32\n    result = (numerator / denominator) * (3 + 23/32)\n    return result\n\nans = solution()"
    ],
    "1bf11d4ba9fe405c8767bb70997fd945": [
        "def solution():\n    # Speed of rabbit and turtle in meters per minute\n    speed_rabbit = 330\n    speed_turtle = 30\n    \n    # Rabbit's head start in meters after 10 minutes\n    rabbit_head_start = speed_rabbit * 10\n    \n    # Time for rabbit to finish race without sleeping, in minutes\n    rabbit_race_time_without_sleep = (6990 - rabbit_head_start) / speed_rabbit\n    \n    # Time for turtle to finish race, in minutes\n    turtle_race_time = 6990 / speed_turtle\n    \n    # Check if rabbit can still win after sleeping\n    rabbit_total_time = 10 + 215 + rabbit_race_time_without_sleep\n    if rabbit_total_time < turtle_race_time:\n        winner = \"rabbit\"\n        # Calculate distance between them when rabbit finishes\n        turtle_distance_covered_when_rabbit_finishes = speed_turtle * rabbit_total_time\n        distance_between = 6990 - turtle_distance_covered_when_rabbit_finishes\n    else:\n        winner = \"turtle\"\n        # Calculate distance between them when turtle finishes\n        rabbit_distance_covered_when_turtle_finishes = rabbit_head_start + speed_rabbit * (turtle_race_time - 10 - 215)\n        distance_between = 6990 - rabbit_distance_covered_when_turtle_finishes\n\n    return winner, distance_between\n\nans = solution()"
    ],
    "79d7374a63ab4894b0eb632021d19346": [
        "def solution():\n    # Let the number of students in Class B be x\n    # Then the number of students in Class A is x + 47\n    # We want to move y students from Class A to Class B\n    # After moving y students, Class A will have (x + 47 - y) students\n    # and Class B will have (x + y) students\n    # We want Class A to have 9 more students than Class B, so:\n    # x + 47 - y = x + y + 9\n    # Simplify the equation to find y\n    y = (47 - 9) // 2  # integer division because the number of students needs to be whole\n    return y\n\nans = solution()"
    ],
    "2c92243cffd64756b422d36fd5a66424": [
        "def solution():\n    total_length = 13.2\n    first_piece = 5.3\n    second_piece = 3.8\n\n    third_piece = total_length - (first_piece + second_piece)\n\n    return third_piece\n\nans = solution()"
    ],
    "61eccb915ca741c7b21a213b89915b76": [
        "def solution():\n    max_product = 0\n    for A in range(1, 32):\n        for B in range(1, 32 - A):\n            C = 31 - A - B\n            max_product = max(max_product, A * B * C)\n    return max_product\n\nans = solution()"
    ],
    "cf1c9e5f45354fe48f3b0685d1e60dbe": [
        "def solution():\n    return 5.221 + 5.8\n\nans = solution()"
    ],
    "c4e305df8e864689a3ba869bd34de689": [
        "def solution():\n    footballs_per_basket = 5\n    number_of_baskets = 7\n    total_footballs = footballs_per_basket * number_of_baskets\n    return total_footballs\n\nans = solution()"
    ],
    "ab941a0743bd48f0a1e26a2e34ebdae5": [
        "def solution():\n    car_cost = 25000\n    selling_percentage = 120 / 100\n    selling_price = car_cost * selling_percentage\n    return selling_price\n\nans = solution()"
    ],
    "93fe50f0358b4d2ea6a521e9ea3ed0a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    num1, num2 = symbols('num1 num2')\n    \n    equation1 = Eq(num1 - num2, 57)\n    equation2 = Eq(num1 + num2, 77)\n    \n    solutions = solve((equation1, equation2), (num1, num2))\n    \n    return min(solutions[num1], solutions[num2])\n\nans = solution()"
    ],
    "f50c5960070d4a3fb0b23a7198ed14e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, adults, girls = symbols('boys adults girls')\n\n    equation1 = Eq(adults, 2 * boys)\n    equation2 = Eq(girls, 3 * boys)\n    equation3 = Eq(boys + adults + girls, 480)\n\n    solutions = solve((equation1, equation2, equation3), (boys, adults, girls))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "bfa83b401aa849afa830d6bedd007504": [
        "def solution():\n    count = 0\n    for num in range(1, 1000):\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "3e8c59f7bce94540b723e7c4f74ae108": [
        "def solution():\n    count = 0\n    # Since we're looking for 3-digit numbers, the hundreds place can't be 0, and for odd numbers the ones place must be odd (1, 3, 5, 7, or 9)\n    for hundreds in range(1, 10): # Hundreds place (1-9)\n        for tens in range(0, 10): # Tens place (0-9)\n            for ones in [1, 3, 5, 7, 9]: # Ones place, odd digits (1, 3, 5, 7, 9)\n                if hundreds + tens + ones == 5: # Sum of digits should be 5\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "a750e73a350c42c59e6e88752789f517": [
        "def solution():\n    total_pairs = 16\n    total_cost = 24  # in pounds\n    total_cost_pence = total_cost * 100  # convert pounds to pence\n    total_avocados = total_pairs * 2  # each pair has 2 avocados\n    \n    cost_per_avocado = total_cost_pence / total_avocados\n\n    return cost_per_avocado\n\nans = solution()"
    ],
    "e06dbcf7684f4efe9b8aa8167604d9eb": [
        "from collections import Counter\n\ndef solution():\n    counts = Counter()\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            total = die1 + die2\n            counts[total] += 1\n    \n    most_common = counts.most_common(1)\n    return most_common[0][0]\n\nans = solution()"
    ],
    "3489712bf419469fb79ab41aed184413": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')\n    boys = 36 - girls\n\n    total_score = 36 * 89\n    girls_score = girls * 88\n    boys_score = boys * 91\n\n    equation = Eq(girls_score + boys_score, total_score)\n\n    num_girls = solve(equation, girls)[0]\n\n    return num_girls\n\nans = solution()"
    ],
    "393a5918d6354e808621ec682f62ddae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let r be the number of rhinos, d the number of deer, o the number of ostriches\n    r, d, o = symbols('r d o')\n    \n    # Each rhino and deer has 1 head and 4 legs, each ostrich has 1 head and 2 legs\n    # The number of rhinos is equal to the number of deer\n    # There are a total of 28 heads and 88 legs altogether.\n    eq1 = Eq(r + d + o, 28)  # total heads\n    eq2 = Eq(4*r + 4*d + 2*o, 88)  # total legs\n    eq3 = Eq(r, d)  # number of rhinos equal to number of deer\n    \n    # solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (r, d, o))\n    return solutions[r]\n\nans = solution()"
    ],
    "bb069229eb994a6685105c9e4771780d": [
        "def solution():\n    people_per_square_table = 12\n    num_tables = 8\n    people_at_ends = 2 * num_tables  # People sitting at the two ends of the long table\n    people_on_long_sides = (people_per_square_table - 4) * num_tables  # Excluding corner seats\n    \n    max_people = people_at_ends + people_on_long_sides\n    return max_people\n\nans = solution()"
    ],
    "b6cf5eeb7a434c4697c9588add4acbec": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let a be Andrew's marbles, b be Boris's, j be Jeffery's, x be Xavier's.\n    a, b, j, x = symbols('a b j x')\n    \n    # Andrew has 30 marbles less than the average of Boris, Jeffery and Xavier.\n    eq1 = Eq(a, (b + j + x)/3 - 30)\n    \n    # Xavier has thrice as many marbles as Andrew.\n    eq2 = Eq(x, 3 * a)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (a, b, j, x))\n    \n    # Substitute x in terms of a into the first equation to solve for a, and then j + b\n    # Since the question does not require us to find each individual value, we return the sum of j and b.\n    a_value = solutions[a]\n    x_value = 3 * a_value\n    j_and_b_value = 4 * a_value + 30 - a_value\n    \n    return j_and_b_value\n\nans = solution()"
    ],
    "938d7287364b480e824843004f4aebab": [
        "def solution():\n    result = 9786 // 7\n    return result\n\nans = solution()"
    ],
    "40b2f9c840514df0bcbdb734e998e84c": [
        "def solution():\n    total_digits = 339  # Total number of digits used\n    digits_per_page = 0  # Used to count the number of digits per page\n    pages_counted = 0  # Pages counted so far\n\n    # Count the pages with 1-digit numbers\n    for i in range(1, 10):\n        digits_per_page += 1\n        pages_counted += 1\n        total_digits -= digits_per_page\n\n    # Count the pages with 2-digit numbers\n    for i in range(10, 100):\n        digits_per_page += 1\n        pages_counted += 1\n        total_digits -= digits_per_page\n        if total_digits < digits_per_page:\n            break\n\n    # If there are still digits left, count the pages with 3-digit numbers\n    if total_digits > 0:\n        for i in range(100, 1000):\n            digits_per_page += 1\n            pages_counted += 1\n            total_digits -= digits_per_page\n            if total_digits < digits_per_page:\n                break\n\n    return pages_counted\n\nans = solution()"
    ],
    "f98fcfbad2e34f8b8786c6f68bb63d64": [
        "def solution():\n    from sympy import divisor_count\n\n    count = 0\n    i = 15\n    while True:\n        # As we want the number to be a multiple of 15, it must be of the form 15 * k\n        if divisor_count(i) == 15:\n            count += 1\n            # we can stop when we have checked the smallest number with more than 15 divisors\n            if divisor_count(i + 1) > 15:\n                break\n        i += 15\n\n    return count\n\nans = solution()"
    ],
    "590b2a37fdc343dfa343951f96523662": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"11:15\", \"%H:%M\")\n    journey_time = timedelta(hours=3, minutes=50)\n    departure_time = arrival_time - journey_time\n    return departure_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "b9cafccb9f7942af839da92a0784cef0": [
        "def solution():\n    last_digit_32 = pow(32, 33, 10)  # Find the ones digit of 32^33\n    last_digit_22 = pow(22, 29, 10)  # Find the ones digit of 22^29\n    \n    ans = (last_digit_32 - last_digit_22) % 10  # Compute the difference and mod by 10 to find the ones digit\n    return ans\n\nans = solution()"
    ],
    "31ea77f39d7d403bbbe15a0f51d288e2": [
        "def solution():\n    # The square array can be visualized like a series of concentric squares,\n    # with students and teachers alternating in layers.\n    # If 'n' is the number of layers in total and 's' is the total number of students\n    # and 't' is the total number of teachers, then:\n    # s - t = 52\n    # s + t = (1^2 + 3^2 + 5^2 + ... + (2*n-1)^2) + (2^2 + 4^2 + ... + (2*n-2)^2)\n    # This is because students occupy the odd squares and teachers occupy the even squares.\n    # We also know that s = (1^2 + 3^2 + 5^2 + ... + (2*n-1)^2) and\n    # t = (2^2 + 4^2 + ... + (2*n-2)^2). We thus have two equations with two unknowns.\n\n    # We start by assuming a small number of layers and work our way up until we find\n    # the condition that satisfies s - t = 52.\n    n = 1  # Start with 1 layer\n    while True:\n        # Sum of squares of odd numbers till (2n-1)\n        s = sum([(2 * i - 1) ** 2 for i in range(1, n + 1)])  \n        # Sum of squares of even numbers till (2n-2)\n        t = sum([(2 * i) ** 2 for i in range(1, n)])\n\n        if s - t == 52:\n            # Find the total number of people\n            total_people = s + t\n            return total_people\n        \n        n += 1  # Move to the next layer if the current one doesn't satisfy the condition\n\nans = solution()"
    ],
    "def24a48cf8144e2845215066bcd4239": [
        "def solution():\n    max_diff = 0\n    for A in range(10, 100):\n        for B in range(1000, 10000):\n            if (A + B) % 7 == 0 and (A**2 + B**2) % 7 == 0:\n                diff = B - A\n                if diff > max_diff:\n                    max_diff = diff\n    return max_diff\n\nans = solution()"
    ],
    "ce29edf6f9f549f8b1c3ce33cbd9bf94": [
        "from math import comb\n\ndef solution():\n    total_players = 12\n    players_needed = 6\n    \n    ways_to_choose = comb(total_players, players_needed)\n    \n    return ways_to_choose\n\nans = solution()"
    ],
    "45a3a595ab6f4318985335abde87fad4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of apples as a and the number of oranges as o\n    a, o = symbols('a o')\n\n    # First condition implies: a = (5/7) * o\n    first_condition = Eq(a, (5/7) * o)\n\n    # After buying 12 more oranges, the ratio becomes 2/3: a = (2/3) * (o + 12)\n    second_condition = Eq(a, (2/3) * (o + 12))\n\n    # Solving the simultaneous equations to find the values of a and o\n    solutions = solve((first_condition, second_condition), (a, o))\n\n    # We are interested in the number of apples Danny had\n    return solutions[a]\n\nans = solution()"
    ],
    "4c1d54551ef14b4a8f6fff1699ee1017": [
        "def solution():\n    # Since we need to find the value to complete the perfect square, we can rewrite the equation as\n    # 8*80*100 = 8^2 * x, we need to solve for x.\n    # First, simplify the left side: 8*80*100 = 6400 * 100 = 640000\n    # We already have an 8^2 on the left side coming from the 64 (which is 8^2), so we divide 640000 by 64\n    \n    left_value = 8 * 80 * 100\n    right_value_base = 8 ** 2\n\n    # Calculate the value of x by dividing the left value by 8^2 (64)\n    x = left_value / right_value_base\n    \n    # Return the value to complete the perfect square\n    return int(x)\n\nans = solution()"
    ],
    "629056fd8d3d4d1ea0babc83d1b81d2e": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x, y, z = symbols('x y z', integer=True)\n    \n    equation = Eq(2014/37, 54 + 1/(x + 1/(y + 1/z)))\n\n    # Let's create a set of plausible values for x, y, and z based on the equation\n    # We'll narrow down possibilities later\n    plausible_values = set(range(1, 37))\n    \n    # Check for possible solutions within our plausible range\n    solutions = []\n    for val_x in plausible_values:\n        for val_y in plausible_values - {val_x}:\n            for val_z in plausible_values - {val_x, val_y}:\n                if solve(equation.subs({x: val_x, y: val_y, z: val_z})):\n                    solutions.append((val_x, val_y, val_z))\n    \n    # there should be only one solution, pick the first one.\n    x_val, y_val, z_val = solutions[0]\n    return x_val + y_val + z_val\n\nans = solution()"
    ],
    "303eb712b613463aa24269578fcdc93c": [
        "def solution():\n    starting_number = (10 - 30) % 12\n    if starting_number == 0:\n        starting_number = 12\n    return starting_number\n\nans = solution()"
    ],
    "3c819166640d4aecbdf6943fefaf19ae": [
        "def solution():\n    return 200 + 198 + 196 + 194 + 24\n\nans = solution()"
    ],
    "20b44a4c32af41ef9142b775909cfdb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of oil sold from each bucket\n    x = symbols('x')\n    \n    # Big bucket equation: 89 - x = 12 * (45 - x)\n    equation = Eq(89 - x, 12 * (45 - x))\n\n    # Solve for x\n    sold_amount = solve(equation, x)\n\n    return sold_amount[0]\n\nans = solution()"
    ],
    "98d19dcddff5420181c5cbae730d43e1": [
        "def solution():\n    avril_apples = 15\n    eddie_apples = avril_apples - 3\n    return eddie_apples\n\nans = solution()"
    ],
    "e0433d6820a94cd280f26a0265506784": [
        "def solution():\n    total_jackpot = 131112\n    people = 9\n    amount_per_person = total_jackpot // people\n    return amount_per_person\n\nans = solution()"
    ],
    "82d6cd07eb9b4742a9b4276838f20555": [
        "def solution():\n    snake_hibernation = 180\n    bear_hibernation = (2 / 3) * snake_hibernation\n    frog_hibernation = (5 / 4) * bear_hibernation\n\n    return frog_hibernation\n\nans = solution()"
    ],
    "7b8f27df031046e09fbf9d6b69396f37": [
        "def solution():\n    shoes_per_alien = 5\n    socks_per_alien = 2\n    aliens = 6\n    price_per_5_shoes = 78\n    price_per_pair_socks = 12\n\n    total_cost_shoes = (shoes_per_alien * price_per_5_shoes) * aliens\n    total_cost_socks = (socks_per_alien * price_per_pair_socks) * aliens\n\n    total_cost = total_cost_shoes + total_cost_socks\n    return total_cost\n\nans = solution()"
    ],
    "23acb98496a1431485725ca44356cb95": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 5 == 1 and num % 6 == 1 and num % 7 == 1:\n            return num\n\nans = solution()"
    ],
    "6aabcae871ce46f8ad05bfca32697274": [
        "def solution():\n    a = 31 - 26\n    b = 26 - 20\n    c = 31 - 20\n\n    return a * b * c\n\nans = solution()"
    ],
    "21ec0c0ec1814ca58f0852a04fb021ce": [
        "def solution():\n    # Average speeds\n    speed_to_park = 5  # km/h\n    speed_back_home = 4  # km/h\n\n    # Total time taken in hours (54 min converted to hours)\n    total_time = 54 / 60  # hours\n\n    # Let 'd' be the distance from home to the park in km. Time is distance over speed.\n    # The total time taken for the trip to and from the park is\n    # d / speed_to_park + d / speed_back_home = total_time\n    # Solve for 'd' in this equation\n    \n    # Convert the equation to d terms and simplify\n    # 1/5 d + 1/4 d = total_time\n    # (4d + 5d) / 20 = total_time\n    # 9d / 20 = total_time\n    # d = (total_time * 20) / 9\n\n    d = (total_time * 20) / 9\n\n    return d\n\nans = solution()"
    ],
    "992b03b260e0423f8ae1b4a971e95d16": [
        "def solution():\n    return sum(range(1, 31))\n\nans = solution()"
    ],
    "d43c72e5a6ae4f8db05bca5a0b40f880": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of pies Rennie baked as r\n    # and the number of pies Joleen baked as j.\n    r, j = symbols('r j')\n\n    # Construct the equations based on the given information\n    # Joleen baked 5 more pies than Rennie: j = r + 5\n    # 3/4 of the pies Rennie baked was equal to 2/3 of the pies Joleen baked: (3/4)*r = (2/3)*j\n    equation1 = Eq(j, r + 5)\n    equation2 = Eq((3/4)*r, (2/3)*j)\n\n    # Solve the system of equations for r and j\n    solutions = solve((equation1, equation2), (r, j))\n\n    # Calculate the total number of pies baked by Rennie and Joleen\n    total_pies = solutions[r] + solutions[j]\n\n    return total_pies\n\nans = solution()"
    ],
    "04f441aa03884165973a65e941e979f6": [
        "def solution():\n    total_pupils = 26\n    # Let the number of boys be x\n    # Then the number of girls is x + 8\n    # We know that x + (x + 8) = total_pupils\n    # Solving for x, we get 2x + 8 = total_pupils\n    # Hence, x = (total_pupils - 8) / 2\n    boys = (total_pupils - 8) / 2\n    girls = boys + 8\n\n    return int(girls)\n\nans = solution()"
    ],
    "5fdb9bf232c24130acb67d6989c9f36f": [
        "def solution():\n    # Let x be the number of students who like both apples and bananas\n    x = symbols('x')\n    # The number of students who like apples is three times the number of those who like both\n    apples = 3 * x\n    # The number of students who like bananas is five times the number of those who like both\n    bananas = 5 * x\n    # According to the Inclusion-Exclusion Principle for two sets:\n    # |A ∪ B| = |A| + |B| - |A ∩ B|\n    # Where A is the set of students who like apples, B is the set of students who like bananas,\n    # and A ∩ B is the intersection (students who like both).\n    # Since every student likes at least one of the two fruits, |A ∪ B| = 35 (total number of students).\n    total_students = Eq(apples + bananas - x, 35)\n    # Solve for x\n    both_likes_solution = solve(total_students, x)\n    \n    return both_likes_solution[0]\n\nans = solution()"
    ],
    "7bb16c6234cc4815b0e5460af5d3bcde": [
        "def solution():\n    total_kg = 3.5  # Total kilograms of oranges\n    used_oranges_g = 550 + 1050  # Total grams of oranges used\n    used_oranges_kg = used_oranges_g / 1000  # Convert grams to kilograms\n    remaining_oranges_kg = total_kg - used_oranges_kg  # Subtract used oranges from total\n    \n    return remaining_oranges_kg\n\nans = solution()"
    ],
    "cfc90e2bd8784f839af8df92030da2cc": [
        "def solution():\n    price_per_computer = 380\n    number_of_students = 600\n    total_cost = price_per_computer * number_of_students\n    return total_cost\n\nans = solution()"
    ],
    "5836c32ab92349858d64ea01519ff950": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the time Nancy takes to finish the job by herself, in hours\n    x = symbols('x')\n    \n    # Equation 1: Together they finish the job in 10 hours\n    # 1 job / 10h + 1 job / x h = 1 job / h (combined rate)\n    equation1 = Eq(1/10 + 1/x, 1)\n    \n    # Equation 2: Nancy types for 20 hours, Lee types for 6 hours\n    # 6h / 10h + 20h / x h = 1 job\n    equation2 = Eq(6/10 + 20/x, 1)\n\n    # Solve the system of equations\n    solution = solve((equation1, equation2), (x))\n\n    return solution[x]\n\nans = solution()"
    ],
    "6c0af911bf3441ceb0aa84e3591c07ce": [
        "def solution():\n    first_day_chairs = 15\n    difference = 3\n    days = 5\n\n    total_chairs = (days / 2) * (2 * first_day_chairs + (days - 1) * difference)\n\n    return int(total_chairs)\n\nans = solution()"
    ],
    "5279176e8bb34e36a3a0b92d193ca529": [
        "def solution():\n    count = 0\n    for i in range(1, 416):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "45df453d65d8460098e8bd6f64aa6e8d": [
        "def solution():\n    # John's attempt results\n    john_result = 60*1 + 6*1 + 25\n    supposed_B = 200 + 10*1 + 1\n    john_is_right = (john_result == supposed_B)\n\n    if john_is_right:\n        A = 10*1 + 1\n    else:\n        # Correct equation considering the place values for A and B\n        # 6*A + 25 = B → 6*(10x + y) + 25 = 200x + 20y\n        # Simplify to find the values of x and y:\n        # 60x + 6y + 25 = 200x + 20y → 140x = 14y - 25\n        # Since x and y are digits, x can be from 1 to 9 and y can be from 0 to 9.\n        # We find a pair (x, y) that satisfies the equation 140x = 14y + 25\n        for x in range(1, 10):\n            for y in range(0, 10):\n                if 140*x == 14*y + 25:\n                    A = 10*x + y\n                    return A\n        # If no solution found within the defined range, return an error\n        A = \"No solution found within the digit range\"\n\n    return A\n\nans = solution()"
    ],
    "82fb8614fc1f452fa0c62237c0880ab5": [
        "def solution():\n    pence = 15\n    pounds_to_pence = 300  # 1 pound = 100 pence\n    percentage = (pence / pounds_to_pence) * 100\n    return percentage\n\nans = solution()"
    ],
    "c6a998a4a44742708de70bf568712c7e": [
        "def solution():\n    ans = 111111111 * 99999999\n    return ans\n\nans = solution()"
    ],
    "72920f692e1f4bc5a9ad132468b2ba55": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n\n    pencil_ruler_combinations = pencils * rulers\n    pencil_pen_combinations = pencils * pens\n    ruler_pen_combinations = rulers * pens\n\n    total_combinations = pencil_ruler_combinations + pencil_pen_combinations + ruler_pen_combinations\n\n    return total_combinations\n\nans = solution()"
    ],
    "967ece94a30248298d61d641cb4adf93": [
        "def solution():\n    fraction = 12 / 25\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "3794af6cfad9436889422b80da641626": [
        "def solution():\n    # We need to consider the worst-case scenario where Benny takes out\n    # marbles and still doesn't have 3 of the same color.\n    # So let's pick 2 blue, 2 yellow (since 3 would guarantee 3 of a color),\n    # and 1 red (since we have only 1). This is 2+2+1 = 5 marbles.\n    # The next marble he picks, no matter what color, will ensure 3 of a kind.\n  \n    total_marbles = 2 + 2 + 1 + 1\n    return total_marbles\n\nans = solution()"
    ],
    "5c2114692687459380bfd372aebfde19": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # According to the problem statement, we set up the following congruences:\n    # x ≡ -3 (mod 4) => x ≡ 1 (mod 4) because -3 ≡ 1 (mod 4)\n    # x ≡ -1 (mod 13)\n    congruences = [(1, 4), (-1, 13)]\n\n    # Solve the congruences using the Chinese Remainder Theorem\n    x, _ = solve_congruence(*congruences)\n\n    # Check for the solution within the given bounds [100, 190]\n    while x < 100:\n        x += 4 * 13  # LCM of 4 and 13\n\n    return x\n\nans = solution()"
    ],
    "c24b40236ebf4569ab4996b428c1ea27": [
        "def solution():\n    book_price = 8.15\n    tshirt_price = 24.55\n    pen_price = 0.85\n    total_spent = book_price + tshirt_price + pen_price\n    return total_spent\n\nans = solution()"
    ],
    "88717234762b4482bb4b328d802d0085": [
        "def solution():\n    return (98 - 87) + (76 - 65) + (54 - 43) + (32 - 21) + 10\n\nans = solution()"
    ],
    "b712f3023cd74d2a97af516420fec795": [
        "def solution():\n    ans = 312 // 6\n    return ans\n\nans = solution()"
    ],
    "8033f9bd063140b6985e12301e7828e5": [
        "def solution():\n    current_sum = 45\n    sum_in_5_years = current_sum + 5 * 2  # Because both will be 5 years older\n    return sum_in_5_years\n\nans = solution()"
    ],
    "626a9662882f4dc4a1ba95cb02ab64da": [
        "def solution():\n    y = -10 + 3\n    return y\n\nans = solution()"
    ],
    "67ecb5e143af40a489aca335acd8434a": [
        "def solution():\n    cost_of_one_sharpener = 14  # in pence\n    total_sharpeners = 7\n    total_cost_in_pence = cost_of_one_sharpener * total_sharpeners  # total cost in pence\n    amount_paid_in_pence = 100  # £1 in pence\n\n    change_in_pence = amount_paid_in_pence - total_cost_in_pence  # change in pence\n\n    return change_in_pence\n\nans = solution()"
    ],
    "2d4bb268d17840b4a2af67c13b75b9e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sebastian, garrett = symbols('sebastian garrett')\n    equation1 = Eq(sebastian, garrett - 24)\n    equation2 = Eq(garrett + 10, 3 * (sebastian + 10))\n\n    solutions = solve((equation1, equation2), (sebastian, garrett))\n\n    return solutions[garrett]\n\nans = solution()"
    ],
    "28b3283e4adb46b1981d2f77bbce5dc3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    equation1 = Eq(girls - boys, 65)\n    equation2 = Eq(boys - (2/5) * boys, girls - (3/7) * girls)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    boys_remain = boys - (2/5) * boys\n    girls_remain = girls - (3/7) * girls\n    \n    total_remain = boys_remain.subs(boys, solutions[boys]) + girls_remain.subs(girls, solutions[girls])\n    return total_remain\n\nans = solution()"
    ],
    "34bf57dff6004159b9678570286b3a45": [
        "def solution():\n    tax_rate = 0.06\n    sales_tax_paid = 90\n    price_of_sofa = sales_tax_paid / tax_rate\n    return price_of_sofa\n\nans = solution()"
    ],
    "2f2d4651795c439599a60c5b9bd40011": [
        "def solution():\n    num_people = 4\n    num_days = 7\n    cost_travel_per_person = 150\n    cost_hotel_per_person_per_day = 50\n    cost_spending_per_person = 250\n\n    total_travel_cost = num_people * cost_travel_per_person\n    total_hotel_cost = num_people * num_days * cost_hotel_per_person_per_day\n    total_spending_cost = num_people * cost_spending_per_person\n\n    total_cost = total_travel_cost + total_hotel_cost + total_spending_cost\n\n    return total_cost\n\nans = solution()"
    ],
    "21c0c469254846459707b10aa5368b1e": [
        "def solution():\n    march_earnings = 1354\n    april_earnings = 1672\n    total_earnings = march_earnings + april_earnings\n    return total_earnings\n\nans = solution()"
    ],
    "c28d501a4f3c490c9058face33142635": [
        "def solution():\n    first_term = 2\n    common_difference = 3\n    nth_term = first_term + (20 - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "d103fb7881a84891a1e2f0db57a5cdff": [
        "def solution():\n    from math import factorial\n\n    # Considering the group of math books as one unit, chemistry books as one unit, and physics books as one unit,\n    # we have 4 units in total to arrange (including the single biology book)\n    \n    # Ways to arrange 4 different units\n    units_arrangement = factorial(4)\n\n    # Now, we arrange the books within their respective units, which are considered as individual entities:\n    math_books_arrangement = factorial(4)\n    chemistry_books_arrangement = factorial(3)\n    physics_books_arrangement = factorial(2)\n\n    # Therefore, the total number of ways is the product of the arrangements of the units and the arrangements within each unit\n    total_arrangements = units_arrangement * math_books_arrangement * chemistry_books_arrangement * physics_books_arrangement\n\n    return total_arrangements\n\nans = solution()"
    ],
    "9ad4425b3ae341e383eaf5a81b5fea27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    oranges, apples, bananas = symbols('oranges apples bananas')\n    \n    equation1 = Eq(apples, oranges + 150)\n    equation2 = Eq(bananas, oranges + 50)\n    equation3 = Eq(apples + oranges + bananas, 1400)\n    \n    solutions = solve((equation1, equation2, equation3), (oranges, apples, bananas))\n    \n    return solutions[oranges]\n\nans = solution()"
    ],
    "00cb26f4bf1b4dea92d43d8871529e21": [
        "def solution():\n    ans = 70017007\n    return ans\n\nans = solution()"
    ],
    "4e7d8e9e8c70434db387985ffc3ced9d": [
        "def solution():\n    height_metres = 8850\n    height_kilometres = height_metres / 1000\n    return height_kilometres\n\nans = solution()"
    ],
    "ef906b4f53fd45d79377d690c9653778": [
        "def solution():\n    category_1 = 30\n    category_2 = 40\n    category_3 = 45\n\n    ways = category_1 * category_2 * category_3\n    return ways\n\nans = solution()"
    ],
    "a2e75549c690497cad6e854a67bb9ca0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eugene, melvin, david = symbols('eugene melvin david')\n\n    # After Eugene gave Melvin twice as many stickers as Melvin had, Eugene has eugene - 2*melvin\n    # and Melvin has melvin + 2*melvin = 3*melvin\n    # After Melvin gave David as many stickers as David had, Melvin has 3*melvin - david and David has 2*david\n    # Finally, David gave Eugene as many stickers as Eugene had left, David has 2*david - (eugene - 2*melvin)\n    # And Eugene has 2*(eugene - 2*melvin)\n    # At the end, the ratio of Eugene's to Melvin's to David's stickers was 46:12:7, so we have:\n    # 2*(eugene - 2*melvin) / (3*melvin - david) / (2*david - (eugene - 2*melvin)) == 46/12/7\n\n    # Total number of stickers is 260\n    total_stickers = Eq(eugene + melvin + david, 260)\n    \n    # Ratio equations\n    eugene_final = 2*(eugene - 2*melvin)\n    melvin_final = 3*melvin - david\n    david_final = 2*david - (eugene - 2*melvin)\n    \n    ratio_eugene = Eq(eugene_final, 46*(melvin_final + david_final) / (12 + 7))\n    ratio_melvin = Eq(melvin_final, 12*(eugene_final + david_final) / (46 + 7))\n    ratio_david = Eq(david_final, 7*(eugene_final + melvin_final) / (46 + 12))\n    \n    # Solve the system of equations\n    solutions = solve((total_stickers, ratio_eugene, ratio_melvin, ratio_david), (eugene, melvin, david))\n\n    return solutions[eugene]\n\nans = solution()"
    ],
    "89c2e46a330f4c809acc4ee66605274d": [
        "def solution():\n    count = 0\n    for a in range(1, 12//2 + 1): # side a\n        for b in range(a, 12):    # side b\n            c = 12 - (a + b)      # side c\n            if c >= b and a + b > c:  # triangle inequality theorem\n                count += 1\n    return count\n\nans = solution()"
    ],
    "b00136397bfb4af8943135704801f794": [
        "from sympy import primerange\n\ndef solution():\n    # 31 + a = 26 + b = 20 + c\n    # a - b = -5, b - c = 6\n    # Since a, b, and c are prime, we look for a prime sequence matching this pattern\n    \n    primes = list(primerange(1, 100))  # Assuming a, b, c are less than 100 for practicality\n    ans = None\n    for c in primes:\n        b = c + 6\n        a = b - 5\n        if a in primes and b in primes and a != b and b != c and a != c:\n            ans = a * b * c\n            break  # We found our match, no need to continue further\n    return ans\n\nans = solution()"
    ],
    "2d130e3c0e3945b685446c7cfb272294": [
        "from math import factorial\n\ndef solution():\n    total_letters = 7\n    total_vowels = 3\n    total_consonants = total_letters - total_vowels\n\n    # Total arrangements without any restrictions\n    total_arrangements = factorial(total_letters)\n\n    # Total arrangements where all vowels are together\n    # Consider all vowels as a single entity\n    vowels_as_one = factorial(total_consonants + 1)\n    # Multiply by the number of arrangements of the vowels among themselves\n    vowels_among_themselves = factorial(total_vowels)\n    all_vowels_together = vowels_as_one * vowels_among_themselves\n\n    # Subtract arrangements where all vowels are together from total arrangements\n    arrangements_with_vowels_not_together = total_arrangements - all_vowels_together\n\n    return arrangements_with_vowels_not_together\n\nans = solution()"
    ],
    "7904921931804014a07b69845bab7b59": [
        "def solution():\n    # This is a classical nim game problem.\n    # The winning strategy exists when the xor of the number of matches in all piles is not 0.\n    # If the xor of the piles is 0, the player forced to play will lose given perfect play from opponent.\n    \n    # Initial piles A and B\n    pile_A = 35\n    pile_B = 24\n    \n    # Game winning strategy is determined by XOR of pile_A and pile_B\n    winning_strategy = pile_A ^ pile_B\n    \n    # If XOR of two piles is zero, player to play will lose, meaning Wei'er wins.\n    # If XOR of two piles is non-zero, player to play can always win, meaning Eddie wins.\n    if winning_strategy == 0:\n        return \"Wei'er\", \"No winning strategy since XOR is 0\"\n    else:\n        return \"Eddie\", \"Take matches to make the XOR of two piles equal to 0\"\n\nans = solution()"
    ],
    "7ba8140ad05947758fcf5701002a8435": [
        "def solution():\n    return 525 + 75\n\nans = solution()"
    ],
    "0c03095444bb44a4b57d684dd17a77c7": [
        "from math import factorial\n\ndef solution():\n    n_people = 6\n    n_seats = 8\n    # Since rotating the table results in the same order, we can fix one person and arrange the others.\n    # Hence, we arrange (n_people - 1) people around the table with (n_seats - 1) spots.\n    ans = factorial(n_seats - 1) // factorial(n_seats - n_people)\n    return ans\n\nans = solution()"
    ],
    "9613eedf0f0948dcb5413f496404e450": [
        "def solution():\n    boys = girls = 1\n    while True:\n        if (boys + 12) == 2 * (girls - 8):\n            break\n        boys += 1\n        girls += 1\n    return boys + girls\n\nans = solution()"
    ],
    "bff8b9eeb1c245eb8fd44124619a0ff8": [
        "def solution():\n    first_term = 31\n    last_term = 41\n    num_terms = (last_term - first_term + 1)\n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n    return sum_of_series\n\nans = solution()"
    ],
    "912de4f90ddb4216bf505fc2ea36050f": [
        "def solution():\n    ans = sum([2 * i - (2 * i + 2) for i in range(28, 40)])\n    return ans\n\nans = solution()"
    ],
    "df1629274fe246d5b09f00b408d237a3": [
        "def solution():\n    # Speeds in meters per second\n    speed_1 = 7\n    speed_2 = 5\n    speed_3 = 8\n\n    # Distances in meters\n    distance_1 = 280\n    distance_2 = 400\n    distance_3 = 800 - (distance_1 + distance_2)\n\n    # Time calculations in seconds\n    time_1 = distance_1 / speed_1\n    time_2 = distance_2 / speed_2\n    time_3 = distance_3 / speed_3\n\n    # Total time\n    total_time = time_1 + time_2 + time_3\n\n    return total_time\n\nans = solution()"
    ],
    "acbee96ed2cb4a61be352fee44d29870": [
        "def solution():\n    ans = 21 * (2 / 7)\n    return ans\n\nans = solution()"
    ],
    "fb64702818de4244b242b01464507459": [
        "def solution():\n    from itertools import permutations\n    digits = ['3', '5', '7']\n    perm = permutations(digits, 3)\n    unique_numbers = {''.join(tup) for tup in perm}\n    return len(unique_numbers)\n\nans = solution()"
    ],
    "931f7e125e804e0bbab5078c31bf920e": [
        "def solution():\n    from sympy import isprime\n\n    for num in range(2, 25):\n        if isprime(num) and isprime(25 - num):\n            return num * (25 - num)\n\nans = solution()"
    ],
    "097a0efcc6c64ff08677a4704bcd76bb": [
        "def solution():\n    from math import gcd\n    ribbon1 = 15\n    ribbon2 = 45\n\n    ans = gcd(ribbon1, ribbon2)\n\n    return ans\n\nans = solution()"
    ],
    "71633ecd388b4b3fb18cf8470f3168fa": [
        "def solution():\n    start_hour, start_minute = 6, 52\n    end_hour, end_minute = 8, 24\n\n    start_total_minutes = start_hour * 60 + start_minute\n    end_total_minutes = end_hour * 60 + end_minute\n\n    minutes_spent = end_total_minutes - start_total_minutes\n\n    return minutes_spent\n\nans = solution()"
    ],
    "a223ddccd2724fcfad6b70a5cedd679d": [
        "def solution():\n    ans = 150 - 12 * 12\n    return ans\n\nans = solution()"
    ],
    "dcda2529e50e438892b5fe26db544d87": [
        "def solution():\n    ans = 168 * 91\n    return ans\n\nans = solution()"
    ],
    "74c598a697fa4036ba52acb5c3dae9a8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote vanilla cupcakes as 'v', then chocolate 'c' and blueberry 'b'.\n    v, c, b = symbols('v c b')\n\n    # Equations based on the given problem\n    equation1 = Eq(c, v + 72)  # chocolate is more than vanilla by 72\n    equation2 = Eq(b, v - 36)  # blueberry is lesser than vanilla by 36\n    equation3 = Eq(c / 6 + 2 * v / 3 + 7 * b / 9, 427)  # cupcakes left after selling\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (v, c, b))\n\n    chocolate_initial = solutions[c]\n    chocolate_sold = chocolate_initial - chocolate_initial / 6\n\n    return chocolate_sold.evalf()\n\nans = solution()"
    ],
    "c6c18c591cee4de090f23b01cc195845": [
        "def solution():\n    num_lampposts = 50\n    distance_between = 2\n\n    # Since there are lamp posts at both ends, we subtract 1 from the total number of lamp posts\n    # before multiplying by the distance between each lamp post.\n    road_length = (num_lampposts - 1) * distance_between\n\n    return road_length\n\nans = solution()"
    ],
    "587b3b02dde341268ada10eb1e31a729": [
        "def solution():\n    peaches = 47\n    students = 6\n    # Using the Pigeonhole Principle, we calculate the minimum number of peaches \n    # that the student with the most peaches would get by dividing the total number \n    # of peaches by the number of students and then rounding up.\n    min_peaches_max_student = (peaches + students - 1) // students\n\n    return min_peaches_max_student\n\nans = solution()"
    ],
    "54d68cc151df4bfb9d1b20b9d2fb2aa3": [
        "def solution():\n    ans = 48 + 84\n    return ans\n\nans = solution()"
    ],
    "bd901fb2c6284efb98073eaa14689640": [
        "def solution():\n    return (18 + 52) / 2\n\nans = solution()"
    ],
    "d459013620f445ba980f5db75d210d9b": [
        "def solution():\n    ans = 40 - 15 + 1\n    return ans\n\nans = solution()"
    ],
    "47de481b43de4ea9bc2a81e973f8542c": [
        "def solution():\n    # Sum of an arithmetic sequence formula: n/2 * (first_term + last_term)\n    # Here n is 7 since we're considering seven consecutive whole numbers.\n    \n    # Let the first term of the sequence be 'a'\n    # Then the last term of the sequence will be 'a + 6'\n    # Given sum of the sequence is 140, we can set up the equation:\n    # 7/2 * (a + (a + 6)) = 140\n    # Simplifying, we get:\n    # 7 * (2a + 6) = 280\n    # 2a + 6 = 40\n    # 2a = 34\n    # a = 17\n    # The first term 'a' is the smallest number\n    \n    return 17\n\nans = solution()"
    ],
    "5620dc4830cf4177b81a1d252a13bdf6": [
        "def solution():\n    ans = (2 / 9) * 36\n    return ans\n\nans = solution()"
    ],
    "03abc0f287024f5d96ba76d95640a07b": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Equations according to the problem\n    # x = -1 (mod 4)  ====> x + 1 is divisible by 4\n    # x = -1 (mod 7)  ====> x + 1 is divisible by 7\n    # x = -3 (mod 9)  ====> x + 3 is divisible by 9\n    congruences = [(-1, 4), (-1, 7), (-3, 9)]\n\n    # Solve the congruence equations using the Chinese Remainder Theorem\n    x, _ = solve_congruence(*congruences)\n    return x\n\nans = solution()"
    ],
    "9a9953295d5740bc87f3c1edd90b8b54": [
        "def solution():\n    post_card_cost_pence = 45\n    stamp_cost_pence = 27\n    total_post_cards = 10\n    total_stamps = 10\n    note_value_pounds = 10\n\n    total_cost_pence = (total_post_cards * post_card_cost_pence) + (total_stamps * stamp_cost_pence)\n    total_cost_pounds = total_cost_pence / 100\n\n    change = note_value_pounds - total_cost_pounds\n    \n    return change\n\nans = solution()"
    ],
    "270c294ed2df4203a13160fdf772f5be": [
        "def solution():\n    # Claire's seat is fixed\n    # There are 3 seats left for the other three participants\n    # Tony has 2 choices to avoid sitting face to face with Claire.\n    # After Tony sits, there are 2 seats left, so 2 choices for Chantel\n    # Finally, Cale has only 1 choice left.\n    # So the total number of ways is the product of the choices each has.\n    total_ways = 2 * 2 * 1\n    return total_ways\n\nans = solution()"
    ],
    "e22e61e5355d4cf286d0a863eac51562": [
        "def solution():\n    frank_rate = 180 / 10\n    ryan_rate = 180 / 15\n    difference = frank_rate - ryan_rate\n    return difference\n\nans = solution()"
    ],
    "68c228ef01e64096ae6ea0c0c72ce5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of questions\n    x = symbols('x')\n    \n    # If she marked 4 questions a minute, she would leave 5 minutes late\n    # Time taken at 4 questions a minute is (x / 4) and is equal to the correct time plus 5\n    eq1 = Eq(x / 4, (x / 5) + 5)\n\n    # If she marked 6 questions a minute, she would leave 5 minutes early\n    # Time taken at 6 questions a minute is (x / 6) and is equal to the correct time minus 5\n    eq2 = Eq(x / 6, (x / 5) - 5)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (x))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "77c1430ed23f41599ca28024f5d0c1b6": [
        "def solution():\n    smallest_mass = 7.35  # As 7.4 rounded to one decimal place could be anything from 7.35 to less than 7.45\n    return smallest_mass\n\nans = solution()"
    ],
    "6d33b364eee54bfcb1f7cf59f055a829": [
        "def solution():\n    for num in range(10, 100):\n        # Define the five consecutive numbers\n        n1 = num\n        n2 = num + 1\n        n3 = num + 2\n        n4 = num + 3\n        n5 = num + 4\n        \n        # Check the divisibility conditions\n        if ((n1 + n2 + n3) % 37 == 0 or (n2 + n3 + n4) % 37 == 0 or (n3 + n4 + n5) % 37 == 0) and \\\n           ((n1 + n2 + n3) % 60 == 0 or (n2 + n3 + n4) % 60 == 0 or (n3 + n4 + n5) % 60 == 0):\n            return n5\n\nans = solution()"
    ],
    "d3c48a9697fa4a4eb28b56062dbe1df1": [
        "def solution():\n    total_questions = 20\n    correct_points = 5\n    incorrect_points = -2  # Deduct points\n    total_marks = 79\n\n    # Let x be the number of correct answers Kathy answered\n    # Then (total_questions - x) will be the number of wrong answers\n    # Set up the equation:\n    # correct_points * x + incorrect_points * (total_questions - x) = total_marks\n    # Solve for x\n\n    correct_answers = (total_marks - incorrect_points * total_questions) / (correct_points - incorrect_points)\n    \n    return int(correct_answers)\n\nans = solution()"
    ],
    "3393096c6a844b2dadae6b5e08940ba8": [
        "def solution():\n    total_money_raised = 165  # In pounds\n    price_per_cake = 0.75     # In pounds (since 75 pence is 0.75 pounds)\n\n    # Calculate the number of cakes sold by dividing the total money raised by the price per cake.\n    number_of_cakes_sold = total_money_raised / price_per_cake\n\n    return int(number_of_cakes_sold)\n\nans = solution()"
    ],
    "18cee48b4d67429daae6f6a7b4da9f6c": [
        "def solution():\n    total_amount = 1440\n    spent_at_restaurant = (3/7) * total_amount\n    remainder = total_amount - spent_at_restaurant\n    spent_on_fees = (2/9) * remainder\n    amount_left = remainder - spent_on_fees\n    \n    return amount_left\n\nans = solution()"
    ],
    "30f8a7925ff34166983d3831a3dd1927": [
        "def solution():\n    amy_candies = 24\n    emma_candies = 10\n    total_candies = amy_candies + emma_candies\n    candies_each = total_candies // 2\n    candies_to_give = amy_candies - candies_each\n    return candies_to_give\n\nans = solution()"
    ],
    "b85b80d96c214b3f9767320633e9d1e4": [
        "def solution(x, y):\n    cost = 5 * x + 1 * y\n    return cost\n\nans = solution(x, y)"
    ],
    "25ecfb7fac334e73b6113226048393ed": [
        "def solution():\n    # Assume chiming starts immediately at the hour\n    # Time taken to chime thrice = 6 seconds => includes 2 intervals between chimes\n    # 2 intervals take 6 seconds, so 1 interval takes 3 seconds\n\n    # To chime 6 times, there are 5 intervals between chimes\n    # Each interval takes 3 seconds, so 5 intervals take 5 * 3 seconds\n    time_to_chime_six = 5 * 3\n\n    return time_to_chime_six\n\nans = solution()"
    ],
    "6d6b64c92ea64a01b75ed338a1814766": [
        "def solution():\n    total_hours_p = 12 * 8\n    total_hours_q = 8 * 10\n\n    work_per_hour_p = 1 / total_hours_p\n    work_per_hour_q = 1 / total_hours_q\n\n    combined_work_per_hour = work_per_hour_p + work_per_hour_q\n    total_hours_together = 1 / combined_work_per_hour\n\n    days_to_complete = total_hours_together / 8\n    \n    # Since we need whole days, we take the ceiling of the number of days.\n    from math import ceil\n    return ceil(days_to_complete)\n\nans = solution()"
    ],
    "08a35d75e3c6466b94f233066ea49537": [
        "def solution():\n    difference_in_metres = 3.2 - 0.3  # convert 30 cm to metres and subtract from 3.2 metres\n    difference_in_centimetres = difference_in_metres * 100  # convert the result to centimetres\n    return difference_in_centimetres\n\nans = solution()"
    ],
    "38f0f6e2b17a49f9901e5abd3924ce28": [
        "def solution():\n    # Square of sum of squares formula: n(n + 1)(2n + 1)/6\n    n = 10 # Because we're summing up the squares of the numbers from 1^2 through 10^2\n    sum_of_squares = n * (n + 1) * (2 * n + 1) // 6\n    ans = 3 * sum_of_squares\n    return ans\n\nans = solution()"
    ],
    "fd9804acb7e544a69a055503fd3def6a": [
        "def solution():\n    ans = 15 * 1.98\n    return ans\n\nans = solution()"
    ],
    "73d546a2c1f0431cbfd7415491f84730": [
        "def solution():\n    digits = 0\n    for page in range(1, 41):\n        digits += len(str(page))\n    return digits\n\nans = solution()"
    ],
    "9527ef42da6941e7be57a1270b76ceb3": [
        "def solution():\n    # cost per kilogram in pounds\n    cost_per_kg = 0.56\n    # total cost for 5 kilograms\n    total_cost = 5 * cost_per_kg\n    # amount Lindsey has\n    total_amount = 10\n    \n    # calculate change\n    change = total_amount - total_cost\n    \n    return change\n\nans = solution()"
    ],
    "787da3f18e5e412287bbd42e447a76ef": [
        "def solution():\n    number = 120\n    factors = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            factors += 1\n    return factors\n\nans = solution()"
    ],
    "106593b9b5bb443c9285898752bf5849": [
        "def solution():\n    n = 180\n    factors = []\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.append((i, n // i))\n    min_diff = float('inf')\n    for factor_pair in factors:\n        diff = abs(factor_pair[1] - factor_pair[0])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n\nans = solution()"
    ],
    "bbfed58ca2f642f482fdc598bc7882b5": [
        "def solution():\n    midnight_temp = -8\n    midday_temp = 13\n\n    overall_change = midday_temp - midnight_temp\n\n    return overall_change\n\nans = solution()"
    ],
    "2112c6328fbd45fe9356d8c4b6c92b4e": [
        "def solution():\n    attendees = 85\n    ticket_price = 1.30\n    total_money_collected = attendees * ticket_price\n    return total_money_collected\n\nans = solution()"
    ],
    "ebe796d82e734546a5d8d043ba66fb08": [
        "from math import gcd\n\ndef solution():\n    num1 = 16\n    num2 = 36\n    ans = gcd(num1, num2)\n    return ans\n\nans = solution()"
    ],
    "cc27afdc4fa642d99b8a96c299e48d50": [
        "def solution():\n    for num in range(6, 16):  # Iterate from 6 to 15 because the number is between 5 and 15\n        if num % 3 == 0 and 27 % num == 0:  # Check if the number is a multiple of 3 and a factor of 27\n            return num\n\nans = solution()"
    ],
    "9a83c293667c44a394743b502e08ad48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12*x - 2*(5 + x), 20)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b3c63472965f4875854399b30b013a75": [
        "def solution():\n    # Let t be the time taken by Max to cover the distance.\n    # Then, Luca takes t + 10 minutes to cover the same distance.\n    \n    # Based on their speed ratio 2:3, we can infer the following:\n    # Since Luca is slower, he would take more time to cover the distance.\n    # If Max takes t minutes, then Luca takes (3/2) * t minutes to cover the distance\n    # according to the ratio of their speeds.\n    # But we know Luca takes t + 10 minutes, so we get the equation:\n    # (3/2) * t = t + 10\n    \n    # Solving for t:\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    t = symbols('t')\n\n    # Create the equation based on the description\n    equation = Eq((3/2) * t, t + 10)\n\n    # Solve the equation for t\n    time_max = solve(equation, t)[0]\n\n    # If Luca walked at double his usual speed, the time would be halved.\n    # His original time would be (3/2) * t\n    time_luca_normal_speed = (3/2) * time_max\n\n    # At double speed, the time taken would be half of his usual time.\n    time_luca_double_speed = time_luca_normal_speed / 2\n\n    return time_luca_double_speed\n\nans = solution()"
    ],
    "31b84522628b463e9e35f8337da9486d": [
        "def solution():\n    total_weight_durian = 3 * 2.6\n    total_weight_watermelon = 5 * 9.24\n    total_weight = total_weight_durian + total_weight_watermelon\n    total_fruits = 3 + 5\n    average_weight = total_weight / total_fruits\n    return average_weight\n\nans = solution()"
    ],
    "fb0704ef09444ba29e79685e326dd2b9": [
        "def solution():\n    number = 42008\n    million = 1000000\n    ans = million - number\n    return ans\n\nans = solution()"
    ],
    "d9b578012565439f986a633f66f05484": [
        "def solution():\n    # Given values\n    total_questions = 40\n    total_score = 71\n    score_correct = 2\n    score_wrong = -1\n\n    # Using equations to solve for correct and incorrect answers\n    # correct_answers * score_correct + wrong_answers * score_wrong = total_score\n    # correct_answers + wrong_answers = total_questions\n\n    # Since we have two equations, we can solve for two variables (correct_answers and wrong_answers)\n    # Let's denote correct_answers as 'c' and wrong_answers as 'w'\n    # Equation 1: 2c - w = 71\n    # Equation 2: c + w = 40\n    # Solving these two equations, we get:\n\n    # Let's add equation 1 and equation 2 to eliminate 'w'\n    # (2c - w) + (c + w) = 71 + 40  =>  3c = 111  =>  c = 111 / 3\n    correct_answers = (total_score + total_questions) / (score_correct + abs(score_wrong))\n    wrong_answers = total_questions - correct_answers\n\n    return int(wrong_answers)\n\nans = solution()"
    ],
    "eca10a43dea24e5b8f40734daf3f5e9e": [
        "def solution():\n    # The worst case scenario would be if we draw all non-Ace cards from each suit.\n    # Since there are 4 suits and we need to draw each non-Ace card,\n    # at worst we will draw all 12 non-Ace cards from each of the 4 suits.\n    cards_without_ace = 12\n    num_suits = 4\n    max_draws_without_ace = cards_without_ace * num_suits  # max draws without an Ace\n    \n    # To ensure that we draw at least one Ace, we need to draw one card more.\n    at_least_one_ace = max_draws_without_ace + 1\n    return at_least_one_ace\n\nans = solution()"
    ],
    "c29aa8875cbd4e7d9da3314c1b9a63d0": [
        "def solution():\n    # Calculate time spent jogging (from 6:30 AM to 7:30 AM)\n    jogging_time = 1  # in hours\n    \n    # Calculate time spent walking (from 7:30 AM to 9:30 AM)\n    walking_time = 2  # in hours\n    \n    # Jogging speed in miles per hour\n    jogging_speed = 6.5\n    \n    # Walking speed in miles per hour\n    walking_speed = 4.5\n    \n    # Calculate distance traveled during jogging\n    jogging_distance = jogging_speed * jogging_time\n    \n    # Calculate distance traveled during walking\n    walking_distance = walking_speed * walking_time\n    \n    # Calculate total distance traveled\n    total_distance = jogging_distance + walking_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "7a2fec9d9f2a4cacbf558f6ae3813319": [
        "def solution():\n    speed_still_water = 33\n    speed_current = 7\n    distance = 320\n\n    speed_downstream = speed_still_water + speed_current\n    time = distance / speed_downstream\n\n    return time\n\nans = solution()"
    ],
    "5ff26caf1d8641c3b74748b9efd22500": [
        "def solution():\n    # Let x be the number of pens and x be the number of pencils initially\n    # After giving 5 pencils away: x - (x - 5) = 2 * (x - 5)\n    # Solving for x: x = 2 * (x - 5) + 5\n    # Simplify: x = 2x - 10 + 5\n    # 10 = x - 5\n    # 15 = x (the initial amount of pens and pencils)\n    # She then buys another 18 pens: 15 + 18\n\n    initial_pens_and_pencils = 15\n    additional_pens = 18\n    total_pens = initial_pens_and_pencils + additional_pens\n\n    return total_pens\n\nans = solution()"
    ],
    "ec60860f433c4d77837f8b9b847882cc": [
        "def solution():\n    ben_sweets = 17\n    bob_sweets = 14\n    total_sweets = ben_sweets + bob_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "5a05da475bdf4d4f9c26b86b5ca7c335": [
        "def solution():\n    count = 0\n    for i in range(1, 319):\n        count += str(i).count('3')\n    return count\n\nans = solution()"
    ],
    "dc98d04066844b33b74e3117952005e5": [
        "def solution():\n    count = 0\n    for page in range(1, 100):\n        if '4' in str(page):\n            count += str(page).count('4')\n    return count\n\nans = solution()"
    ],
    "e7da9c665b464c9ca102d23b33677067": [
        "def solution():\n    count = 0\n    for i in range(1, 226):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "f6df262ec3d8481f8a51b4a2492214da": [
        "def solution():\n    total_books = 70\n    num_piles = 10\n\n    books_per_pile = total_books // num_piles\n\n    return books_per_pile\n\nans = solution()"
    ],
    "14254cf94d7540a7a332d80102aa8f38": [
        "def solution():\n    ans = 6081 - 5076\n    return ans\n\nans = solution()"
    ],
    "67cd26c1867b4d648638a34d32fad1b9": [
        "def solution():\n    total_length = 240\n    cut_length_1 = 45\n    cut_length_2 = 45\n    length_after_cuts = total_length - (cut_length_1 + cut_length_2)\n    length_for_40cm_cuts = length_after_cuts // 40\n\n    return length_for_40cm_cuts\n\nans = solution()"
    ],
    "1b632632619c4c03a2a49fc43f39ccb8": [
        "def solution():\n    left_handed_tennis_players = 16\n    fraction_of_left_handed_who_play_tennis = 1 / 10\n\n    # Calculate the total number of left-handed students\n    total_left_handed = left_handed_tennis_players / fraction_of_left_handed_who_play_tennis\n\n    fraction_of_girls_who_are_left_handed = 0.25\n\n    # Calculate the total number of students\n    total_students = total_left_handed / fraction_of_girls_who_are_left_handed\n\n    return int(total_students)\n\nans = solution()"
    ],
    "3badf3ad5d7e4d65997e7dba4984ed0d": [
        "def solution():\n    # Given ratio of cookies to butter is 80 cookies for 20 grams of butter\n    cookies_per_gram_of_butter = 80 / 20\n    \n    # Calculate the amount of butter needed for 100 cookies\n    butter_needed_for_100_cookies = 100 / cookies_per_gram_of_butter\n    \n    return butter_needed_for_100_cookies\n\nans = solution()"
    ],
    "d524ba10be4e42d287da738c4dd0f9f7": [
        "def solution():\n    departure_time_hour = 10\n    departure_time_minute = 35\n    journey_time_hour = 3\n    journey_time_minute = 35\n\n    # Calculate the minute part of the time\n    total_minutes = departure_time_minute + journey_time_minute\n\n    extra_hour = total_minutes // 60\n    arrival_minute = total_minutes % 60\n\n    # Calculate the hour part of the time\n    arrival_hour = departure_time_hour + journey_time_hour + extra_hour\n\n    # Check if we need to convert to 12-hour format\n    if arrival_hour >= 24:\n        arrival_hour -= 24\n\n    return (arrival_hour, arrival_minute)\n\nans = solution()"
    ],
    "6e3e5239895349b08896dfe4a2f9817a": [
        "def solution():\n    # Each of the three digits can be chosen from 3 possibilities (6, 7, 8)\n    # Since they can be used more than once, each place (hundred, ten, unit) has 3 options\n    choices_per_digit = 3  # 6, 7, or 8\n\n    # Total combinations will be choices for the hundred's place multiplied\n    # by choices for the ten's place multiplied by choices for the unit place\n    total_combinations = choices_per_digit ** 3\n\n    return total_combinations\n\nans = solution()"
    ],
    "c95c7f2647524a1b84a553fdaf384550": [
        "def solution():\n    zero_count = 0\n    current_num = 1\n    \n    while zero_count < 100:\n        str_num = str(current_num)\n        zero_count += str_num.count('0')\n        \n        if zero_count < 100:\n            current_num += 1\n        \n    return current_num\n\nans = solution()"
    ],
    "361af5c7444d4a77a809bd5fb28f128e": [
        "def solution():\n    total_cartons = 8\n    juice_per_carton = 3  # liters\n    juice_drank = 9  # liters\n\n    total_juice = total_cartons * juice_per_carton\n    juice_left = total_juice - juice_drank\n\n    return juice_left\n\nans = solution()"
    ],
    "57c249281b304080a78e5214cc07daa6": [
        "def solution():\n    principal = 3600\n    rate = 2 / 100\n    time = 10\n\n    interest = principal * rate * time\n\n    return interest\n\nans = solution()"
    ],
    "eda84d19ef334353a874d1471a677058": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 * (2 * x - 2), 30 - 3 * x)\n    \n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "56c90f1a30374a13b09ffe20646206b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bud, pip, tom = symbols('bud pip tom')\n\n    equation1 = Eq(bud, 3 * pip)\n    equation2 = Eq(tom, 2 * bud)\n    equation3 = Eq(bud + pip + tom, 50)\n\n    solutions = solve((equation1, equation2, equation3), (bud, pip, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "b592cb34a1374b25a352ce50080da48d": [
        "def solution():\n    total_cars = 60\n    red_cars = (5 / 12) * total_cars\n    blue_cars = (20 / 100) * total_cars\n    neither_red_nor_blue = total_cars - (red_cars + blue_cars)\n    return int(neither_red_nor_blue)\n\nans = solution()"
    ],
    "b7fd46892ef74e929cb5d1f4d54a7f75": [
        "def solution():\n    first_leg_speed = 180  # meters per minute\n    second_leg_speed = 120  # meters per minute\n\n    first_leg_time = 6  # minutes\n    second_leg_time = 8  # minutes\n\n    first_leg_distance = first_leg_speed * first_leg_time\n    second_leg_distance = second_leg_speed * second_leg_time\n\n    total_distance = first_leg_distance + second_leg_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "8e1c584bb43949dc93fc621494c3073f": [
        "def solution():\n    # The sum of an arithmetic sequence can be calculated by (n/2)(first_term + last_term)\n    # where n is the number of terms. For eight consecutive whole numbers, n = 8.\n    # Let x be the first number, so the last number would be x+7 (as there are 8 numbers).\n    # The sum S = (n/2)(first_term + last_term) = 2012.\n    # Hence, (8/2)(x + (x + 7)) = 2012, which simplifies to 4(2x + 7) = 2012.\n\n    # Solve for x (the first term)\n    x = (2012 / 4 - 7) / 2\n\n    # Now find the largest number, which is x + 7\n    largest_number = x + 7\n\n    return int(largest_number)\n\nans = solution()"
    ],
    "90a6c5c7e28a4bc489bb3ef6acd51b15": [
        "def solution():\n    sachin_rate = 1 / 3  # Sachin can clean the flat in 3 hours\n    peter_rate = 1 / 6   # Peter can clean the flat in 6 hours\n    \n    combined_rate = sachin_rate + peter_rate  # Combined rate of cleaning\n    time_together = 1 / combined_rate  # Time is reciprocal of the combined rate\n    \n    return time_together\n\nans = solution()"
    ],
    "e084829c18924d79acacaf75a980d4f9": [
        "def solution():\n    people_in_front_of_elias = 25\n    danya_position_from_back = 14\n\n    # Total people = People in front of Elias + Elias + people behind Danya\n    total_people = people_in_front_of_elias + 1 + (danya_position_from_back - 1)\n\n    return total_people\n\nans = solution()"
    ],
    "d15e0e53fbde4c1aa79efca6f630157d": [
        "def solution():\n    ans = (42 / 35) * 100\n    return ans\n\nans = solution()"
    ],
    "015418b57d46449a8b2161571801303b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let a be the number of students in class A and b be the number of students in class B\n    a, b = symbols('a b')\n    # Initial ratio of the number of students in classes A and B\n    equation1 = Eq(a, 5/7 * b)\n    # New ratio after transferring 3 students from class B to class A\n    equation2 = Eq(a + 3, 4/5 * (b - 3))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[a]\n\nans = solution()"
    ],
    "65df19ad9a52462f88ad9585d2e88ca8": [
        "def solution():\n    a = (14 - 8) / 3\n    return a\n\nans = solution()"
    ],
    "1f3250a1ab714b5a93c359bb33407829": [
        "def solution():\n    return 24.4 * 1000\n\nans = solution()"
    ],
    "12524a06278546ab8e9e8b16a0f5e800": [
        "def solution():\n    # Let x be the number of bottles Faye has at first.\n    # Since she managed to get 1 more bottle than expected, we imply that's without the extra bottle,\n    # after 5 swaps, she should have gotten 3 bottles.\n    # Every swap is exchanging 3 bottles for 1 bottle.\n\n    # Set initial and expected bottles after 5 swaps\n    expected_bottles = 3\n    extra_bottle = 1\n    swaps = 5\n\n    # Calculate the total bottles Faye would have after 5 swaps without the extra one\n    total_bottles = (expected_bottles + extra_bottle) * (3 ** swaps)\n\n    # Subtract the extra bottle to find the initial number of bottles\n    initial_bottles = total_bottles - extra_bottle\n\n    return initial_bottles\n\nans = solution()"
    ],
    "7991c8c9adaf4cbb9a682e09102844fc": [
        "def solution():\n    dividend = 52248\n    divisor = 12\n\n    ans = dividend // divisor\n\n    return ans\n\nans = solution()"
    ],
    "6fd5f6f4f4764d0a976b09a87613282b": [
        "def solution():\n    # Let the side of the square formed by boys be x.\n    # The total number of boys would then be x^2.\n    # After adding 17 girls, we form a larger square array (x+1)(x+1).\n    # The difference between the larger square and the smaller square is the number of girls, which is 17.\n    # So, (x+1)^2 - x^2 = 17\n    \n    # Import the math library to use the square root function.\n    import math\n    \n    # Start with an initial guess for x.\n    x = 1\n    while True:\n        # Calculate the total number of students in the larger square.\n        total_students = (x + 1) ** 2\n        # Calculate the number of boys based on our current guess for x.\n        boys = x ** 2\n        # Check if the difference between the total number of students and the number of boys is 17.\n        if total_students - boys == 17:\n            # When the difference is 17, we have found the correct number of boys.\n            return boys\n        # Increment x to try the next higher possible value for the side of the square.\n        x += 1\n\nans = solution()"
    ],
    "6424a92c08be44a48125b4a91cdf0541": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the variable 's' represent the speed in km/h for the original 6-hour travel\n    # Let the variable 'd' represent the distance between the home and destination\n    s, d = symbols('s d')\n\n    # Original travel time is 6 hours (from 1pm to 7pm)\n    # Hence, the relation between speed and distance is d = s * 6 (Equation 1)\n\n    # If Ivy wants to arrive one hour earlier, the travel time would be 5 hours\n    # To cover the same distance in 5 hours, she must increase her speed to s + 2 km/h\n    # Hence, the relation between the new speed and distance is d = (s + 2) * 5 (Equation 2)\n\n    equation1 = Eq(d, s * 6) # Original scenario\n    equation2 = Eq(d, (s + 2) * 5) # Scenario with 1 hour earlier arrival and increased speed\n\n    # Solve the system of equations for s (speed) and d (distance)\n    solutions = solve((equation1, equation2), (s, d))\n\n    # We require the distance 'd'\n    return solutions[d]\n\nans = solution()"
    ],
    "76ba583e46624ad6ad49e0fa892660ad": [
        "def solution():\n    total_litres = 40\n    flow_rate_millilitres_per_second = 125\n    total_millilitres = total_litres * 1000\n    total_seconds = total_millilitres / flow_rate_millilitres_per_second\n    return total_seconds\n\nans = solution()"
    ],
    "355ee489190e440a97b10b0e4a181b2c": [
        "def solution():\n    pages, digits = 0, 0\n    while digits < 237:\n        pages += 1\n        digits += len(str(pages))\n    return pages - 1 if digits > 237 else pages\n\nans = solution()"
    ],
    "75742fbf8de24d479bd0cd4b5397eb2d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    a1, d = symbols('a1 d')\n    \n    # Given that the 9th term is 18 larger than the 15th term\n    eq1 = Eq(a1 + 8 * d + 18, a1 + 14 * d)\n    \n    # Given that the sum of the 20th term and the 12th term is 88\n    eq2 = Eq(a1 + 19 * d + a1 + 11 * d, 88)\n    \n    # Solve the equations\n    solution = solve((eq1, eq2), (a1, d))\n    \n    # Find the 32nd term\n    a32 = solution[a1] + 31 * solution[d]\n    \n    return a32\n\nans = solution()"
    ],
    "4cc013248faa4925b3066d0d0269c175": [
        "def solution():\n    incorrect_average = 1468\n    correct_average = 1462\n    incorrect_value = 1268\n    correct_value = 1082\n    difference_in_savings = incorrect_value - correct_value\n    difference_in_averages = incorrect_average - correct_average\n\n    number_of_days = difference_in_savings / difference_in_averages\n    return int(number_of_days)\n\nans = solution()"
    ],
    "3f0badddf0e84f4285bbd3a1d9b4b2e7": [
        "def solution():\n    # Time taken to cut 1 rope into 4 equal pieces.\n    time_for_4_pieces = 12  # minutes\n\n    # Each cut creates 1 additional piece, so to make 4 pieces, 3 cuts are needed.\n    cuts_for_4_pieces = 4 - 1\n\n    # Time taken for each cut when cutting into 4 pieces.\n    time_per_cut = time_for_4_pieces / cuts_for_4_pieces\n\n    # To cut into 12 pieces, 11 cuts are needed.\n    cuts_for_12_pieces = 12 - 1\n\n    # Time taken to cut 1 rope into 12 equal pieces\n    time_for_12_pieces = time_per_cut * cuts_for_12_pieces\n\n    return time_for_12_pieces\n\nans = solution()"
    ],
    "c5b38e5e2199435c95eb989e88e91cc9": [
        "def solution():\n    birth_year = 1940 - 80\n    current_year = 2011\n    age_of_oak_tree = current_year - birth_year\n    return age_of_oak_tree\n\nans = solution()"
    ],
    "7215e81d77604964bf294178622f8fee": [
        "def solution():\n    nth_term = 10\n    last_value = 31\n    difference = last_value - 28\n\n    first_term = last_value - (nth_term - 1) * difference\n\n    return first_term\n\nans = solution()"
    ],
    "a7861f09bf0047a1abbdf01cf43d20db": [
        "def solution():\n    for lily in range(1, 100):  # Search within a reasonable range for a person's age\n        marry = lily + 1\n        carol = marry + 2\n        if 4 * lily * marry * carol == 2240:\n            return carol\n\nans = solution()"
    ],
    "baabee468b9f46dd9d3a226e53fabfd7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    # Chewy's equation that needs to be corrected\n    chewy_equation = Eq((8 * x + 8) / 2 - 3 * (x + 6), 0)\n    \n    # Solve the correct equation\n    correct_answer = solve(chewy_equation, x)\n    \n    return correct_answer[0]\n\nans = solution()"
    ],
    "0dd2e9d562984533a486b18296484a81": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(22 + 3 * (6 - 2 * x), 8 + 10 * x)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "ca0a4ee804934a22b8a061da9f276028": [
        "def solution():\n    total_flowers = 200\n    red_flowers = (2 / 5) * total_flowers\n    purple_flowers = (1 / 8) * total_flowers\n\n    return int(red_flowers + purple_flowers)\n\nans = solution()"
    ],
    "539f23e975a649d497568948c5e3f459": [
        "def solution():\n    number = 38942\n    remainder = number % 9\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = remainder\n\n    return ans\n\nans = solution()"
    ],
    "a7676438a1a847d8ab70d7998ed51f7a": [
        "def solution():\n    ways = 0\n    for pile1 in range(1, 10): # since we need 2 piles, when pile1 is determined, pile2 is also determined\n        pile2 = 10 - pile1\n        if pile2 != pile1: # ensure different number of marbles in each pile\n            ways += 1\n    return ways // 2 # Divide by 2 to correct for double counting\n\nans = solution()"
    ],
    "f0ea959eec6b41118011cbb0ba3f17c6": [
        "def solution():\n    ans = 6444 // 18\n    return ans\n\nans = solution()"
    ],
    "503dcced126a4cae9f67e60f2048cded": [
        "def solution():\n    # Conversion factor from liters to quarts (1 liter = 1.05668821 quarts)\n    conversion_factor = 1.05668821\n    # Bottle volume in liters\n    bottle_volume_liters = 2.5\n    # Cup capacity in quarts\n    cup_capacity_quarts = 0.5\n    # Convert bottle volume to quarts\n    bottle_volume_quarts = bottle_volume_liters * conversion_factor\n    # Calculate the number of cups\n    num_cups = bottle_volume_quarts / cup_capacity_quarts\n    # Round to nearest integer\n    return round(num_cups)\n\nans = solution()"
    ],
    "a4c428257cff4445a4d9df7423135eaf": [
        "def solution():\n    # Let's consider the worst case scenario to ensure we get 3 toy cars of the same color.\n    # Pick all cars of one color and one less from the other two colors. This way, the next car picked will guarantee three of the same color.\n    # So, in the worst case:\n    # We pick all 5 red cars, 8 blue cars and 3 white cars. This totals to 16 cars.\n    # The next (17th) car we pick must be either blue or white, giving us 3 of a kind.\n    \n    cars_needed = 5 + 8 + 3 + 1  # Red + Blue + White + 1 to ensure the third of any color\n    \n    return cars_needed\n\nans = solution()"
    ],
    "31cea5404a28497fa58c3d4ac14250bf": [
        "def solution():\n    lengths_in_cm = [85, 200, 147]  # 2m is 200cm\n    total_length_cm = sum(lengths_in_cm)\n    total_length_m = total_length_cm / 100  # convert cm to m\n    return total_length_m\n\nans = solution()"
    ],
    "02cec2fdec424ee0a518fe03ccd11faa": [
        "def solution():\n    whole_number = 2\n    fractional_part = 34 / 100\n    ans = whole_number + fractional_part\n    return ans\n\nans = solution()"
    ],
    "521225eba88d499087ca7a728e7babaa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin = symbols('justin')\n    vivian = 5 * justin + 8\n\n    equation = Eq(vivian, justin + 48)\n\n    solution = solve(equation, justin)\n\n    return solution[justin] + 48\n\nans = solution()"
    ],
    "e4b841a897a04191927b64bfe38ff722": [
        "def solution():\n    initial_stamps = (34 + 2) - 11 + 14\n    return initial_stamps\n\nans = solution()"
    ],
    "c7d9e6a152bf4aac8eb62a0c004333d5": [
        "def solution():\n    litres_to_millilitres = 1000\n    ans = 7.5 * litres_to_millilitres\n    return ans\n\nans = solution()"
    ],
    "730d6fe3d6a34ed4b170b749c262e84f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    equation = Eq(((x - 6) * 6 + 6) / 6, 6)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "6e99e1ccf3764b41b183ed57f3093159": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let h be the height from which the ball was dropped\n    h = symbols('h')\n\n    # First bounce: the ball bounces 3 times the height h\n    first_bounce_height = 3 * h\n\n    # Second bounce: the ball bounces 3 times the height reached after the first bounce\n    second_bounce_height = 3 * first_bounce_height\n\n    # Third bounce: the ball bounces half the height reached after the second bounce\n    third_bounce_height = second_bounce_height / 2\n\n    # Fourth bounce: the ball bounces half the height reached after the third bounce, which is given to be 36m\n    fourth_bounce_height = third_bounce_height / 2\n\n    # Set up the equation fourth_bounce_height = 36\n    equation = Eq(fourth_bounce_height, 36)\n\n    # Solve for h\n    solutions = solve(equation, h)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "71c5dafbfe4e49e48f3ff2ba324fa816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 11.63)\n    equation2 = Eq(x + y/10, 5.87)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    difference = abs(solutions[x] - solutions[y])\n\n    return difference * 100\n\nans = solution()"
    ],
    "c847b4e44f3b41f4925f34fe099d474a": [
        "def solution():\n    ans = (2 * 9) + 200 + 9\n    return ans\n\nans = solution()"
    ],
    "c0478d9244ba49339b683a82526b16a9": [
        "def solution():\n    initial_money = 32\n    spent_money = initial_money / 2\n    remaining_money = initial_money - spent_money\n    return remaining_money\n\nans = solution()"
    ],
    "945736381b124f10ad0d4586420a9666": [
        "def solution():\n    for num in range(30, 41):\n        if num % 3 == 0 and num % 4 == 0:\n            return num\n\nans = solution()"
    ],
    "89245e2c38cd4e249921977cacaefb32": [
        "def solution():\n    legs_sum = 64\n    spider_legs = 8\n    ant_legs = 6\n\n    # Hypothesizing that all creatures are ants initially\n    max_ants = legs_sum // ant_legs\n    remaining_legs = legs_sum % ant_legs\n\n    # Replace ants with spiders one by one until the remaining legs can be divided by the number of spider legs\n    while remaining_legs % spider_legs != 0:\n        max_ants -= 1\n        remaining_legs += ant_legs\n\n    return max_ants\n\nans = solution()"
    ],
    "e6b3da9856474849a7c73d75f573f103": [
        "def solution():\n    for a in range(10):\n        for b in range(10):\n            for c in range(10):\n                for d in range(0, 10, 2):  # Even for divisibility by 4\n                    for e in range(0, 10, 5):  # Ends in 0 or 5 for divisibility by 5\n                        number = int(f\"8{a}{b}{c}{d}{e}\")\n                        if len(set(str(number))) == 6:  # Unique digits\n                            if number % 3 == 0 and number % 4 == 0 and number % 5 == 0:\n                                return number\n\nans = solution()"
    ],
    "9074f61b08b34feb83fb6026f085b5f2": [
        "def solution():\n    cost_per_song = 99  # pence\n    cost_full_cd = 899  # pence, converting £8.99 to pence to keep consistent units\n\n    total_cost_songs = 12 * cost_per_song  # total cost if bought separately\n    \n    savings = total_cost_songs - cost_full_cd  # savings in pence\n    savings_pounds = savings / 100  # convert savings to pounds\n\n    return savings_pounds\n\nans = solution()"
    ],
    "2826012497a04a32b3544b4cbd378949": [
        "def solution():\n    eggs_per_tray = 16\n    total_trays = 40\n    total_eggs = eggs_per_tray * total_trays\n\n    return total_eggs\n\nans = solution()"
    ],
    "f20519cbe24047f480f153f89d45c8f9": [
        "def solution():\n    differences = set()\n    for i in range(10, 100):\n        original = str(i)\n        reversed_num = int(original[::-1])\n        if i > reversed_num:\n            difference = i - reversed_num\n        else:\n            difference = reversed_num - i\n        differences.add(difference)\n    return differences\n\nans = solution()"
    ],
    "e1c6641aa30549ec93c747f03b8fde94": [
        "def solution():\n    total_cost = 1.69 + 0.82 + 2.99\n    change = 20 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "022ef21b0ed847d68df150adecb637ea": [
        "def solution():\n    digits = ['1', '2', '3']\n    two_digit_numbers = {int(x + y) for x in digits for y in digits if x != y}\n    return len(two_digit_numbers)\n\nans = solution()"
    ],
    "4b2c1678e7f14496a3b8d08653cd8693": [
        "def solution():\n    digits = list(range(10))  # All of the digits from 0 to 9\n\n    # To minimize the difference between the two numbers,\n    # we want the largest digit in the tens place of the smaller number\n    # So, we fix the smallest number to start with 0 and the other digits arranged in ascending order\n    smaller_number = int(''.join(map(str, [0] + sorted(digits[1:]))))\n\n    # For the larger number, the smallest digit (which is not zero) should be in the highest place\n    # and the rest should be arranged in descending order\n    larger_number = int(''.join(map(str, [digits[1]] + sorted(digits[1:], reverse=True))))\n\n    # Calculate the difference\n    diff = larger_number - smaller_number\n\n    return diff\n\nans = solution()"
    ],
    "7123aa7bbad1493684f0f3f2ffa7852a": [
        "def solution():\n    for N in range(10):\n        if (300 + 10 * N + 3) % 9 == 1:\n            return N\n\nans = solution()"
    ],
    "40503ef3b45647cda8ec8ab5a12a3568": [
        "def solution():\n    ans = 19 + 27 - 9 - 7 + 8\n    return ans\n\nans = solution()"
    ],
    "9dd11761e2f946e1aaa0f232e5513538": [
        "def solution():\n    time = 15  # time in seconds for the train to pass the tree\n    length = 450  # length of the train in meters\n    \n    # Speed = Distance / Time\n    speed = length / time  # Speed in meters per second\n    \n    return speed\n\nans = solution()"
    ],
    "cc3b876c55ae46299e40246b9eafb3d1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Sam's stickers as 's' and Peter's stickers as 'p'\n    s, p = symbols('s p')\n\n    # Initial condition: Sam had 40 more stickers than Peter\n    initial_condition = Eq(s, p + 40)\n\n    # Sam gives 20% of his stickers to Peter\n    sam_gives = 0.20 * s\n    # Peter gives 25% of his stickers (after receiving from Sam) to Sam\n    peter_gives = 0.25 * (p + sam_gives)\n\n    # The final number of stickers for Sam and Peter\n    final_sam = s - sam_gives + peter_gives\n    final_peter = p + sam_gives - peter_gives\n\n    # Final condition: Sam has 96 more stickers than Peter\n    final_condition = Eq(final_sam, final_peter + 96)\n\n    # Solve the system of equations\n    solutions = solve((initial_condition, final_condition), (s, p))\n\n    # Returning Peter's initial number of stickers (p)\n    return solutions[p]\n\nans = solution()"
    ],
    "bff9eb9a097b4c9fbe698fb9361765b1": [
        "def solution():\n    # Calculate 10! using a loop to multiply the numbers from 1 to 10\n    factorial_10 = 1\n    for i in range(1, 11):\n        factorial_10 *= i\n    return factorial_10\n\nans = solution()"
    ],
    "73d622eab89d4aeab04694fa52f525db": [
        "def solution():\n    A = (3 * 13 + 5 * 13) / 8\n    return A\n\nans = solution()"
    ],
    "64d9c0d96e8b4b6a9b2af8e53a386877": [
        "def solution():\n    salt = 8\n    water = 32\n    total_weight = salt + water\n    concentration = (salt / total_weight) * 100\n    return concentration\n\nans = solution()"
    ],
    "8fdba5860ae8459494f40b54d38548a9": [
        "def solution():\n    result = 70 / 100 * 40\n    return result\n\nans = solution()"
    ],
    "3fc4b3f3cb89424db751f420508a1d40": [
        "def solution():\n    # Price of a pencil in dollars\n    price_pencil = 2\n    # Price of a pen in dollars\n    price_pen = 4\n\n    # The number of pencils Owen should give to Oscar is the ratio\n    # of the price of a pen to the price of a pencil\n    pencils_per_pen = price_pen / price_pencil\n\n    return int(pencils_per_pen)\n\nans = solution()"
    ],
    "a1f84fb286e24074ba7396201d611eff": [
        "def solution():\n    people_in_front_of_ali = 14\n    people_behind_bala = 10\n    ali_and_bala = 2\n\n    total_people_in_queue = people_in_front_of_ali + ali_and_bala + people_behind_bala\n\n    return total_people_in_queue\n\nans = solution()"
    ],
    "30fd86b9d9a641a881e71dc018c583f4": [
        "def solution():\n    friends = 4\n    # Each friend sends a card to every other friend, so we have \n    # friend-1 potential recipients for each of the sender friends\n    cards_sent = friends * (friends - 1)\n    \n    return cards_sent\n\nans = solution()"
    ],
    "d47c10d6ed9c4e61976326927d0db6ac": [
        "def solution():\n    ans = (18 - 17) + (16 - 15) + (14 - 13)\n    return ans\n\nans = solution()"
    ],
    "7fb2dd15b44a432ebf16f80ff0ac18d8": [
        "def solution():\n    count = 0\n    for i in range(1, 829):\n        count += str(i).count('9')\n    return count\n\nans = solution()"
    ],
    "06005d7a51944fbcab3a4f5650bb5d66": [
        "def solution():\n    from math import lcm\n    ans = lcm(1, 2, 3, 4, 5, 6)\n    return ans\n\nans = solution()"
    ],
    "29f757912336498e89b265d7c3dc2c68": [
        "def solution():\n    sum = 0\n    for i in range(1, 102):\n        sum += i * (i - 1)\n    return sum\n\nans = solution()"
    ],
    "9a0b6021c3bf41b6bfe3ce63e893970b": [
        "def solution():\n    initial_water = 2\n    jug_capacity = 7\n    jugs_added = 4\n    water_added = jug_capacity * jugs_added\n    total_water = initial_water + water_added\n    \n    return total_water\n\nans = solution()"
    ],
    "4d874eded9f6441287acd8ba0029f6bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chloe, david, emily = symbols('chloe david emily')\n\n    equation1 = Eq(chloe, 2 * david)\n    equation2 = Eq(david, 3 * emily)\n    equation3 = Eq(74 + 86 + chloe + david + emily, 400)\n\n    solutions = solve((equation1, equation2, equation3), (chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "4916026562cd47e283b98f0d0cd4bf19": [
        "def solution():\n    total_days = 3 + 2 + 2\n    total_cookies = (9 * 3) + (15 * 2) + (10 * 2)\n    average_cookies_per_day = total_cookies / total_days\n    return average_cookies_per_day\n\nans = solution()"
    ],
    "51560f6fe7b14fcdb4bd060c96dbc1a9": [
        "def solution():\n    # Candy's rate of work per day\n    candy_rate = 1 / 20\n    # David's rate of work per day\n    david_rate = 1 / 25\n    \n    # Let x be the number of days David takes off.\n    # Total work done by Candy and David to finish the job \n    # is equal to 1 (since the job is one whole job).\n    \n    # In 12 days, Candy can do 12 * candy_rate part of the job\n    # David works for (12 - x) days, so he can do \n    # (12 - x) * david_rate part of the job.\n    \n    # The equation for the total job done is:\n    # candy's work + david's work = 1 (the whole job)\n    \n    for x in range(13):  # David can take off up to 12 days\n        if 12 * candy_rate + (12 - x) * david_rate >= 1:\n            return x\n\nans = solution()"
    ],
    "7a2a20573729484498268bb992ca72c1": [
        "def solution():\n    # The magnitude of the force exerted by the table on the book\n    # is equal in magnitude and opposite in direction to the weight\n    # of the book due to Newton's third law of motion.\n    book_mass = 20  # The mass of the book in Newtons\n\n    # The force exerted by the table is the normal force, which is equal to\n    # the weight (mass) of the book in this static situation (no acceleration).\n    force_by_table = book_mass\n\n    return force_by_table\n\nans = solution()"
    ],
    "aa1ba812762546cd8c78bc85ae3a25cc": [
        "def solution(y):\n    return y - 3\n\nans = solution(y)  # Replace 'y' with Lemar's actual age if given."
    ],
    "4a6392aa73ad47e08098f73769dc697c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let total_fruits be the total number of fruits in the box at first\n    total_fruits = symbols('total_fruits')\n\n    # According to the problem, 4/5 of the fruits were apples\n    apples = 4/5 * total_fruits\n\n    # Hence, 1/5 of the fruits were pears\n    pears = 1/5 * total_fruits\n\n    # After 3/4 of the fruits were removed, 1/4 of the fruits were left\n    remaining_fruits = 1/4 * total_fruits\n\n    # According to the problem, 1/8 of the apples and 30 pears were left\n    remaining_apples = 1/8 * apples\n    remaining_pears = 30\n\n    # The remaining fruits were made up of the remaining apples and pears\n    equation = Eq(remaining_fruits, remaining_apples + remaining_pears)\n\n    # Solve the equation to find the total number of fruits at first\n    sol = solve(equation, total_fruits)\n\n    return sol[0]\n\nans = solution()"
    ],
    "8ef2118cd0cb45d3a3940b6138d4e8da": [
        "def solution():\n    income = 140000\n    first_tax_rate = 0.05\n    additional_tax_base = 0.08\n    paid_tax = 15100\n\n    # Tax for the first $50,000\n    first_tax = 50000 * first_tax_rate\n\n    # Tax paid for the amount above $50,000\n    additional_tax_paid = paid_tax - first_tax\n\n    # The income above $50,000\n    additional_income = income - 50000\n\n    # Calculate T from the additional tax rate formula (0.08 + T)%\n    T = (additional_tax_paid / additional_income) - additional_tax_base\n\n    # Convert T to percentage\n    T_percentage = T * 100\n\n    return T_percentage\n\nans = solution()"
    ],
    "936e8db367764ee7ad52e4eed4333f1b": [
        "def solution():\n    time_for_6_cakes = 36\n    cakes_made = 6\n    cakes_needed = 10\n    time_per_cake = time_for_6_cakes / cakes_made\n    total_time_for_10_cakes = time_per_cake * cakes_needed\n    return total_time_for_10_cakes\n\nans = solution()"
    ],
    "0f96314625f240a7a0bac5d0d7506fa0": [
        "def solution():\n    # If Lily takes 5 footballs (worst case scenario without getting 6 of the same),\n    # plus 5 basketballs (worst case scenario for basketballs), \n    # plus 3 volleyballs (all of them), even in the worst case she is guaranteed to have \n    # 6 of either the footballs or basketballs in the next draw.\n    \n    # Footballs: 5 (without having 6 of the same)\n    # Basketballs: 5 (without having 6 of the same)\n    # Volleyballs: 3 (all of them)\n    \n    # Next draw guarantees 6 of the same type, hence:\n    balls_needed = 5 + 5 + 3 + 1\n    \n    return balls_needed\n\nans = solution()"
    ],
    "a4968c4a62914361ad7a1d205bb1e5b4": [
        "def solution():\n    bill = 40\n    tip_percentage = 0.15\n    tax_percentage = 0.08\n\n    tip = bill * tip_percentage\n    tax = bill * tax_percentage\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "58ee44d10dd9468d827490e2aa404506": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of stickers and y be the number of pupils\n    x, y = symbols('x y')\n\n    # Equation based on the first condition\n    equation1 = Eq(x - 13 * y, 190)\n\n    # Equation based on the second condition\n    equation2 = Eq(x - 17 * y, 50)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "f4b67240ff2e4eea856a54877b0f510d": [
        "def solution():\n    # Total oranges\n    total_oranges = 13\n    # Kids\n    kids = 3\n    # Since each kid must get at least one orange, we give them one each.\n    total_oranges -= kids\n    # Now we need to find the number of ways to distribute the remaining oranges (13 - 3)\n    # As the problem is equivalent to placing two dividers in the 10 places between oranges\n    # This is a combination problem \"10 choose 2\"\n\n    from math import comb\n    return comb(total_oranges + kids -1, kids - 1)\n\nans = solution()"
    ],
    "aaaca6fa5ad944f5b9d50ad2726de809": [
        "from sympy import symbols, Eq, solve\nfrom math import sqrt\n\ndef solution():\n    # Given values\n    h = 30  # height of the building in meters\n    v0 = 5  # initial velocity in m/s\n    angle = 45  # angle of projection in degrees\n\n    # Convert angle to radians\n    angle_rad = angle * (pi / 180)\n\n    # Split the initial velocity into horizontal and vertical components\n    v0x = v0 * cos(angle_rad)\n    v0y = v0 * sin(angle_rad)\n\n    # Calculate the time to reach the ground\n    # Equation of motion: h = v0y * t + (1/2) * g * t^2\n    # Here, g is the acceleration due to gravity which is 9.8 m/s^2\n    # Since the arrow reaches the ground, h = -30 (taking downward direction as negative)\n    g = 9.8\n    t = symbols('t', real=True, positive=True)\n    eq = Eq(v0y * t - (1/2) * g * t**2, -h)\n    time_of_flight = solve(eq, t)\n\n    # There are two solutions, we take the positive one\n    t_ground = max(time_of_flight)\n\n    # Calculate the vertical velocity at the ground (vy)\n    vy = v0y - g * t_ground\n\n    # The horizontal velocity (vx) remains constant as there's no horizontal acceleration\n    vx = v0x\n\n    # Calculate the final velocity vector magnitude when it hits the ground using Pythagorean theorem\n    v = sqrt(vy**2 + vx**2)\n\n    return v\n\nans = solution()"
    ],
    "a36914e472964629805f90180ee32817": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 5):\n        S, A, M, O, G = p\n        # Check if S and O are nonzero digit as they are the first digit\n        if S == 0 or O == 0:\n            continue\n        SASMO = S*10000 + A*1000 + S*100 + M*10 + O\n        OGAMS = O*10000 + G*1000 + A*100 + M*10 + S\n        if SASMO * 4 == OGAMS:\n            return SASMO\n\nans = solution()"
    ],
    "47ab709ca45c4de2874c7ae5d6b26888": [
        "def solution():\n    # We'll start by creating a number with a digit sum of 20,\n    # and check divisibility by 11. We'll start from the smallest\n    # possible number with a digit sum of 20: 20000(1+9), as\n    # it is the smallest number with a digit sum of 20\n    # We'll check every possible number increasing the least significant digit\n    # and decreasing the most significant digit while keeping the digit sum of 20\n    \n    # A number is divisible by 11 if the difference between the sum of the digits\n    # in the odd positions and the sum of the digits in the even positions is\n    # either 0 or a multiple of 11.\n\n    for i in range(20000, 30000): # Checking numbers between 20000 and 30000\n        number = str(i)\n        if sum(map(int, number)) == 20: # Ensure the digit sum is 20\n            odd_sum = sum(int(digit) for idx, digit in enumerate(number) if idx % 2 == 0)\n            even_sum = sum(int(digit) for idx, digit in enumerate(number) if idx % 2 != 0)\n            if (odd_sum - even_sum) % 11 == 0:\n                return i  # Return the smallest number satisfying both conditions\n\nans = solution()"
    ],
    "93268f61447f4bc89f03ed35d94d32d2": [
        "def solution():\n    # Number of choices for each category\n    food_choices = 2  # sandwiches, burgers\n    drink_choices = 3  # coffee, milk, tea\n    dessert_choices = 4  # cake, pudding, ice-cream, pie\n\n    # Calculate total different ways to order lunch\n    total_ways = food_choices * drink_choices * dessert_choices\n\n    return total_ways\n\nans = solution()"
    ],
    "7d5b9285020f4096b89f646f6ac6914e": [
        "def solution():\n    return 78.16 * 1.45 + 3.14 * 21.84 + 169 * 0.7816\n\nans = solution()"
    ],
    "0abf82b202384e50a18c63eb91160283": [
        "def solution():\n    from math import sqrt\n\n    # Given values\n    g = 9.8  # acceleration due to gravity (m/s^2)\n    h = 5.0  # height of the tabletop above floor (m)\n\n    # Using the formula v^2 = u^2 + 2gh where u(initial velocity) = 0\n    # Solving for v (final velocity)\n    v = sqrt(2 * g * h)\n\n    return v\n\nans = solution()"
    ],
    "18e751b89c0f4f688755003c0becbb1a": [
        "def solution():\n    total_water = 48 + 28\n    water_in_each_container = total_water / 2\n    water_to_transfer = 48 - water_in_each_container\n\n    return water_to_transfer\n\nans = solution()"
    ],
    "616e7eb6274e4b9f80158e3a237118cb": [
        "def solution():\n    # Equations based on the problem statement\n    # 2 elephants = 5 cows -> elephant = (5/2) * cows\n    # 4 cows = 3 horses -> cow = (3/4) * horses\n    # 3 horses = 5 pigs -> horse = (5/3) * pigs\n    \n    # We substitute cows and horses in terms of pigs\n    # elephant = (5/2) cows = (5/2) * (3/4) * horses = (5/2) * (3/4) * (5/3) pigs\n    # Simplify the expression\n    elephant_to_pig_ratio = (5/2) * (3/4) * (5/3)\n    # Calculate for 8 elephants\n    pigs_equivalent_to_8_elephants = 8 * elephant_to_pig_ratio\n    \n    return pigs_equivalent_to_8_elephants\n\nans = solution()"
    ],
    "6f7fe67009984428871104da0134627c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    principal = 2000\n    final_amount = 2519.42\n    years = 3\n    \n    rate = symbols('rate')\n    equation = Eq(principal * (1 + rate) ** years, final_amount)\n    \n    solution = solve(equation, rate)\n    \n    return float(solution[0])\n\nans = solution()"
    ],
    "43ef6239d7c44a0183051685a5117a3a": [
        "def solution():\n    total_paid = (2 * 10) + (4 * 2) + (8 * 0.50)\n    total_cost = total_paid - 0.40\n    cost_per_cup = total_cost / 4\n    return cost_per_cup\n\nans = solution()"
    ],
    "a7860a3460d6490f888b36cb3f9823b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the price of each box of mangoes\n    # Let y be the price of each box of lychees\n    x, y = symbols('x y')\n\n    # Set up the two equations based on the given problem\n    equation1 = Eq(24 * x + 20 * y, 1160)\n    equation2 = Eq(y, 2 * x - 6)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "e47957966fd14e6a9af6de7b6554166e": [
        "def solution():\n    return 0.6 * (2/5) * 75\n\nans = solution()"
    ],
    "802ac638436e4b4fa6a0b74f166a9968": [
        "def solution():\n    bill = 50\n    tip_rate = 0.18\n    tax_rate = 0.10\n\n    tip_amount = bill * tip_rate\n    tax_amount = bill * tax_rate\n    total_cost = bill + tip_amount + tax_amount\n\n    return total_cost\n\nans = solution()"
    ],
    "7ead04e31502472f99c0ca926b39ba6f": [
        "from math import factorial\n\ndef solution():\n    # First step is to put 3 S between D's to satisfy at least one singing performance between every 2 dancing performances\n    # D S D S D S D, where S denotes a singing performance, and D denotes a dancing performance.\n\n    # We are now left with 3 additional S's and 3 spots amongst the 4 D's (or around them) to put these in.\n    # We use stars and bars method here to calculate the number of ways to arrange 3 S's in 5 possible spots.\n    # 5 spots because we can put the remaining singing performances before the first D, between the D's, and after the last D.\n    # The formula for stars and bars is (n + k - 1)! / (k! * (n - 1)!)\n\n    # Here n = 3 (remaining S's) and k = 5 (spots among D's)\n    n = 3\n    k = 5\n    ways_to_place_s = factorial(n + k - 1) // (factorial(k) * factorial(n - 1))\n\n    # The S's are indistinguishable amongst themselves and the D's amongst themselves\n    # So we then multiply the result by the number of ways we can arrange 4 D's (4!)\n    # and the number of ways we can arrange 6 S's (6!)\n\n    ans = ways_to_place_s * factorial(4) * factorial(6)\n    \n    return ans\n\nans = solution()"
    ],
    "995ae0debbe74e3ca36d61e2bc8db3d4": [
        "def solution():\n    total_weight_5_boxes = 350\n    weight_per_box = total_weight_5_boxes / 5\n    total_weight_3_boxes = weight_per_box * 3\n    return total_weight_3_boxes\n\nans = solution()"
    ],
    "f73e444fccf74dffa657783361eaec4a": [
        "from math import factorial\n\ndef solution():\n    # Consider the four comics as one unit and the six fictions as one unit.\n    # First find the number of ways to arrange these two units.\n    units = factorial(2)\n\n    # Now find the number of ways to arrange the comics within their unit.\n    comics_arrangements = factorial(4)\n\n    # Lastly, find the number of ways to arrange the fictions within their unit.\n    fictions_arrangements = factorial(6)\n\n    # The total number of arrangements is the product of these individual arrangements.\n    total_arrangements = units * comics_arrangements * fictions_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "58a07f22b6ae4e54bc49c3b1f8bc18b8": [
        "def solution():\n    ans = 2.4 * 7 - (6.8 - 7 / 10)\n    return ans\n\nans = solution()"
    ],
    "325dbb02dff7405f9292450c4e4cc0df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin, dora = symbols('justin dora')\n    dora_correct = symbols('dora_correct')\n\n    # Points from correct answers = correct answers * 10\n    # Points from wrong answers = (total questions - correct answers) * (-5)\n    # Justin got 15 more points than Dora\n    # Together they got 155 points\n    # Each answered 10 questions\n\n    equation1 = Eq(justin - dora, 15)  # Justin got 15 more points than Dora\n    equation2 = Eq(justin + dora, 155)  # Together they scored 155 points\n    # Dora's points can be expressed in terms of correct answers\n    equation3 = Eq(10*dora_correct - 5*(10 - dora_correct), dora)\n\n    solutions = solve((equation1, equation2, equation3), (justin, dora, dora_correct))\n\n    return solutions[dora_correct]\n\nans = solution()"
    ],
    "e09e01d9f1ee46fd9759c4157d7cb3cd": [
        "def solution():\n    # Let x be the average number of candies sold by each group in Class B\n    # Total candies sold by groups in Class A (3 groups * 12 candies each)\n    total_A = 3 * 12\n    # Total groups from both classes\n    total_groups = 3 + 4\n    # Total candies sold by groups in both classes (7 groups * 8 candies each)\n    total_candies = total_groups * 8\n    # Subtract the total candies sold by Class A from the total to find candies sold by Class B\n    total_B = total_candies - total_A\n    # Average number of candies sold by each group in Class B is the total divided by the number of groups (4)\n    average_B = total_B / 4\n    return average_B\n\nans = solution()"
    ],
    "b46ebbe765bd4ec282a9d4cddc1aaae1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the time Lee takes to finish the job alone\n    # let y be the time Nancy takes to finish the job alone\n    x, y = symbols('x y')\n\n    # Together they finish the job in 10 hours\n    equation1 = Eq(1/x + 1/y, 1/10)\n\n    # Lee works for 6 hours and Nancy works for 20 hours to finish the job\n    equation2 = Eq(6/x + 20/y, 1)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "03472dc686454fea90ff512c5ee5c03f": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    coffee_litres = 6\n\n    total_ratio = coffee_ratio + milk_ratio\n    latte_litres = (coffee_litres / coffee_ratio) * total_ratio\n\n    return latte_litres\n\nans = solution()"
    ],
    "2636ac2e0f8a4fe4b34c78f1070efed0": [
        "def solution():\n    total_string_length = 250\n    used_string_length = 180\n    remaining_string_pieces = 10\n\n    remaining_string_length = total_string_length - used_string_length\n    length_per_piece = remaining_string_length / remaining_string_pieces\n\n    return length_per_piece\n\nans = solution()"
    ],
    "edcff11e678a491588a876c850626fd8": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1 / 3)\n    initial_passengers = remaining_after_first_stop / (1 - 2 / 5)\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "558947a4413a469d810b676273f6d771": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = ((3, 4), (4, 5))\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "3eb0547b332f4b4cbda72d04972e652b": [
        "def solution():\n    percentage = 45 / 100\n    total = 80\n    \n    ans = percentage * total\n    return ans\n\nans = solution()"
    ],
    "73eb429b39444b6784a10591bacf3800": [
        "def solution():\n    from math import comb\n    flavours = 7\n    doughnuts = 2\n    ans = comb(flavours, doughnuts)\n    return ans\n\nans = solution()"
    ],
    "bb50e26a7c3b4ac39e82395f0fbd0d95": [
        "def solution():\n    from math import gcd\n    return gcd(gcd(6, 9), 18)\n\nans = solution()"
    ],
    "6bf07e1e42d0448f94f431aced05a8af": [
        "def solution():\n    from math import comb\n    num_people = 10\n    # Combination of 10 people taken 2 at a time\n    num_handshakes = comb(num_people, 2)\n    return num_handshakes\n\nans = solution()"
    ],
    "c6adf9f4ee8d4ab6b37166fa2ee565c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for number of each type of chocolates\n    white, milk, dark = symbols('white milk dark')\n    \n    # Construct the system of equations based on the problem statement\n    ratio_eq = Eq(white/dark, 3/5)  # Ratio of white to dark chocolates is 3:5\n    difference_eq = Eq(dark - white, 8)  # There are 8 more dark chocolates than white chocolates\n    milk_eq = Eq(milk, 7 * white / 3)  # Ratio of milk to white chocolates is 7:3\n    \n    # Solve the system of equations\n    solutions = solve((ratio_eq, difference_eq, milk_eq), (white, milk, dark))\n    \n    return solutions[milk]\n\nans = solution()"
    ],
    "938d2bcb3f644872a707547c2058d4a7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the total number of students as 'n'\n    n = symbols('n')\n\n    # According to the problem:\n    # 1/4 of the students like badminton\n    badminton = n / 4\n\n    # Additional 3 boys like badminton\n    badminton += 3\n\n    # 1/3 of the remaining students like table tennis\n    remaining_students = n - badminton\n    table_tennis = remaining_students / 3\n\n    # 3 fewer from the remaining students like table tennis\n    table_tennis -= 3\n\n    # The rest of the 25 students in the class like football\n    football = 25\n\n    # The equation for the total is\n    total_students_equation = Eq(badminton + table_tennis + football, n)\n\n    # Solve the equation for 'n'\n    solution = solve(total_students_equation, n)\n\n    return solution[0]\n\nans = solution()"
    ],
    "2c9bb3658d544a4ab8fdb08d93091cca": [
        "def solution():\n    green_balls = 10\n    # Let red_balls_added be the number of red balls to be added\n    red_balls = 5\n    red_balls_added = symbols('red_balls_added')\n\n    # Setting up the equation: green_balls / (total_balls + red_balls_added) = 1/3\n    total_balls = red_balls + green_balls\n    equation = Eq(green_balls / (total_balls + red_balls_added), 1/3)\n\n    # Solving for red_balls_added\n    red_balls_added_solution = solve(equation, red_balls_added)\n\n    return red_balls_added_solution[0]\n\nans = solution()"
    ],
    "fd6b3a86acd14b529b51cdd518e9a4a8": [
        "def solution():\n    large_square_side = 6\n    small_square_side = 3\n    ans = (large_square_side // small_square_side)**2\n    return ans\n\nans = solution()"
    ],
    "e8b01adb4f7d4d8cbff0e3c9d3bc098f": [
        "def solution():\n    meters = 70.24\n    centimeters_per_meter = 100\n    total_centimeters = meters * centimeters_per_meter\n\n    return total_centimeters\n\nans = solution()"
    ],
    "271b87d6fd084f7eaa3b6cae9b7ba2b5": [
        "def solution():\n    for i in range(10, 100):\n        if i % 3 == 0 and i % 7 == 0:\n            return i\n\nans = solution()"
    ],
    "44b8a79ef3104647b9810c583a5a4c21": [
        "def solution():\n    spent = 5\n    fraction = 1 / 4\n    total_money = spent / fraction\n    return total_money\n\nans = solution()"
    ],
    "5371e511c53e4a5f8747fe8e3a5e87ad": [
        "def solution():\n    return 12 * 3 * 50\n\nans = solution()"
    ],
    "6657a223a619480aabc4ab2e4d50e627": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sam, peter = symbols('sam peter')\n    \n    # Sam originally had 40 stickers more than Peter\n    # Sam gave 20% of his stickers to Peter: sam - 0.2 * sam\n    # Peter gave 25% of his stickers to Sam after receiving Sam's stickers: peter + 0.2 * sam - 0.25 * (peter + 0.2 * sam)\n    # In the end, Sam had 96 stickers more than Peter\n    equation = Eq(sam - 0.2 * sam + 0.25 * (peter + 0.2 * sam), peter - 0.2 * sam + 96)\n    \n    # Initial condition equation: sam == peter + 40\n    initial_condition = Eq(sam, peter + 40)\n    \n    # Solve the system\n    solutions = solve((equation, initial_condition), (sam, peter))\n    \n    return solutions[peter]\n\nans = solution()"
    ],
    "a9ff37e5065046b585071011b2edb0c3": [
        "def solution():\n    total_cost = 25 + 10\n    change = 50 - total_cost\n    return change\n\nans = solution()"
    ],
    "c969df7dcbf546bcbc2a769e7568a5df": [
        "def solution():\n    # The ones digit of a number raised to a power is cyclical with a period that depends on the base number.\n    # Calculate the cycle for 32 and 22.\n    \n    # For 32, the cycle of ones digit is 2 -> 4 -> 8 -> 6 -> 2 ...\n    # Since a cycle is of length 4, we can calculate 33 mod 4 to find the position in the cycle, which is 1.\n    ones_digit_32 = (32 ** (33 % 4)) % 10\n    \n    # For 22, the cycle of ones digit is 2 -> 4 -> 8 -> 6 -> 2 ...\n    # Since a cycle of length 4, we can calculate 29 mod 4 to find the position in the cycle, which is 1.\n    ones_digit_22 = (22 ** (29 % 4)) % 10\n    \n    # Subtract the ones digits to get the ones digit of the difference.\n    ans = (ones_digit_32 - ones_digit_22) % 10  # Use modulo 10 in case the result is negative.\n    \n    return ans\n\nans = solution()"
    ],
    "3020fb600b944914a5d9fcd520cae6fd": [
        "def solution():\n    count_6 = 0\n    page_number = 1\n    while count_6 < 18:\n        page_str = str(page_number)\n        count_6 += page_str.count('6')\n        page_number += 1\n    return page_number - 1\n  \nans = solution()"
    ],
    "b24dd75457e8421e98afe8366bd50107": [
        "def solution():\n    count = 0\n    for d1 in range(1, 7):\n        for d2 in range(1, 7):\n            for d3 in range(1, 7):\n                if d1 != d2 and d1 != d3 and d2 != d3:\n                    if d1 + d2 + d3 == 12:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "5fe02e26ce5e42fc93b9699b286adec3": [
        "def solution():\n    # Number of different types of fruits\n    fruits = 2\n    # Number of different kinds of vegetables\n    vegetables = 3\n\n    # Number of different combinations of one fruit and one vegetable\n    combinations = fruits * vegetables\n\n    return combinations\n\nans = solution()"
    ],
    "524308c13c044993b5bf5bba992cdbb7": [
        "def solution():\n    ans = 4619 + 457 + 88\n    return ans\n\nans = solution()"
    ],
    "b5f0243f080b48f7ba4d7a62e9120e41": [
        "def solution():\n    # The proportion 4:9 is equal to the proportion x:81\n    # So we can write it as 4/9 = x/81\n    # To find x, rearrange the equation: x = (4/9) * 81\n    x = (4 / 9) * 81\n    return int(x)\n\nans = solution()"
    ],
    "3d6760aa4d044cbc825d82a834e51780": [
        "def solution():\n    total_distance = 40\n    jump_up = 5\n    fall_down = 3\n    jumps = 0\n\n    # Create a loop for the jumping process\n    while total_distance > 0:\n        # Monkey jumps up\n        total_distance -= jump_up\n        jumps += 1\n        # After each two jumps, monkey falls down except if it reaches the top\n        if jumps % 2 == 0 and total_distance > 0:\n            total_distance += fall_down\n\n    return jumps\n\nans = solution()"
    ],
    "22e56c50744347a3be314d81fcaa4a39": [
        "def solution():\n    result = 0\n    for n in range(1, 2013):\n        result += (2*n)**3 / (n * (n + 1) * (n + 2))\n    result += 1 / 4026\n    return result\n\nans = solution()"
    ],
    "7492b9e26fc448699eab170daa00a7e4": [
        "def solution():\n    ans = None\n    for i in range(1, 100):\n        if i % 16 == 0 and (i + 1) % 5 == 0 and (i ** 0.5).is_integer():\n            ans = i\n            break\n    return ans\n\nans = solution()"
    ],
    "f68d71c9bc684cafa24d741e381775bb": [
        "def solution():\n    last_term = 39\n    common_difference = 21 - 15\n    next_term = last_term + common_difference\n    return next_term\n\nans = solution()"
    ],
    "3fe260109d4545118d6fa5fb6542ba93": [
        "def solution():\n    # Let x be the number of questions answered correctly\n    # Then (80 - x) would be the number of questions answered incorrectly or not at all\n    # Each correct answer gives 4 marks: 4 * x\n    # Each wrong or unanswered question deducts 2 marks: 2 * (80 - x)\n    # The total score is the sum of marks from correct and incorrect/unanswered questions\n    # 4 * x - 2 * (80 - x) = 152\n    # Solve for x to find the number of correctly answered questions\n    \n    x = symbols('x')\n    total_questions = 80\n    total_score = 152\n    \n    # Equation: marks from correct answers - marks deducted for incorrect/unanswered questions = total score\n    equation = Eq(4 * x - 2 * (total_questions - x), total_score)\n    \n    # Solve the equation to find x\n    solution = solve(equation, x)\n    \n    # Return the number of questions answered correctly\n    return solution[0]\n\nans = solution()"
    ],
    "79173ac47d4446a7a4b25de9f562a87c": [
        "def solution():\n    cans_per_day = 42 / 6  # cans of tuna per day\n    cans_in_9_days = cans_per_day * 9  # cans of tuna in 9 days\n    return cans_in_9_days\n\nans = solution()"
    ],
    "c58f946556534129afb051e96256c03c": [
        "def solution():\n    # You need 1 cut to share 16 sausages among 2 people,\n    # so you need n - 1 cuts to share among n people.\n    # Since each person needs an equal portion, each person gets 16/24 sausages.\n    # We are trying to find the smallest cuts to get the 24 equal parts out of the 16 sausages.\n    # 24 equal parts require 23 cuts. However, we can rearrange the sausages to reduce the number of cuts.\n    # We can stack the sausages in groups and cut them all at once.\n    # Since the GCD (Greatest Common Divisor) of 16 and 24 is 8, we can stack them in 8 groups with 2 sausages each.\n    # Each of these 8 groups can then be cut in 3 places to make 24 pieces, \n    # resulting in 8*3 = 24 total pieces with only 3 cuts per group.\n    # Thus, we need 3 cuts for one group and only 3 groups.\n\n    from math import gcd\n    \n    sausages = 16\n    people = 24\n    groups = gcd(sausages, people)\n    cuts_per_group = people // groups - 1\n    num_cuts = cuts_per_group * groups\n\n    return num_cuts\n\nans = solution()"
    ],
    "6ba4e21d59274d4aab0481cae22611d3": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    total_ways = factorial(7)\n    vowels = ['A', 'I', 'O']\n    consonants_count = 4\n    vowels_count = len(vowels)\n    \n    together_ways = factorial(vowels_count) * factorial(consonants_count + 1)\n    \n    ways_with_vowels_never_together = total_ways - together_ways\n    return ways_with_vowels_never_together\n\nans = solution()"
    ],
    "7b4fffccc9d443f6bae39d698e210c9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    wendy, vivien = symbols('wendy vivien')\n    equation1 = Eq(wendy, 2 * vivien)\n    equation2 = Eq((vivien - 10), (wendy - 10) / 4)\n    \n    solutions = solve((equation1, equation2), (wendy, vivien))\n    \n    wendy_age_in_5_years = solutions[wendy] + 5\n    \n    return wendy_age_in_5_years\n\nans = solution()"
    ],
    "b399219fb06d458cbe46dd2b1df7cb15": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B = symbols('A B')\n\n    equation1 = Eq(A, B + 350)\n    equation2 = Eq(B, 2 * (A - 500))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "26af7f86bc8d46ac94cf787333d3fd91": [
        "def solution():\n    from math import gcd\n\n    # Calculate the absolute differences between the numbers\n    diff1 = abs(39 - 51)\n    diff2 = abs(39 - 147)\n    diff3 = abs(51 - 147)\n\n    # Find the Greatest Common Divisor of the differences\n    # This GCD will be the required integer\n    ans = gcd(gcd(diff1, diff2), diff3)\n    \n    return ans\n\nans = solution()"
    ],
    "fc84e91f2444473ea06eee0510e38067": [
        "def solution():\n    # Lovelle speaks 3 Sentences with each of the 5 members she interacts with\n    lovelle_interactions = 3 * 5  # Lovelle's interactions\n    \n    # 12 members did not speak to Lovelle\n    non_interactions = 12\n    \n    # Each of the 5 members would also speak 3 sentences among themselves (excluding Lovelle)\n    # Calculating the total interactions among the 5 members \n    team_interactions = 5 * (5 - 1) // 2 * 3  # Each pair interacts and speaks 3 sentences\n    \n    # Total interactions is the sum of Lovelle's interactions and the team interactions\n    # Note that this total excludes the 12 members who did not speak to Lovelle\n    total_interactions = lovelle_interactions + team_interactions\n    \n    # Since the total interactions includes all pairs of interactions except those involving the 12 members\n    # We find the total number of team members (including Lovelle) by adding the 12 members to the 5 members Lovelle interacts with and Lovelle herself\n    total_team_members = 5 + 12 + 1  # Lovelle + 5 members she interacts with + 12 members\n\n    return total_team_members\n\nans = solution()"
    ],
    "13c1aaafec5c4eb2a546b2823b7c9da0": [
        "def solution():\n    return 3 / 8\n\nans = solution()"
    ],
    "fa07d0a580554d999b6611baedc3f30f": [
        "def solution():\n    total_digits = 0\n\n    # Pages 1-9 use 1 digit each\n    total_digits += 9\n    \n    # Pages 10-99 use 2 digits each\n    total_digits += (99 - 10 + 1) * 2\n\n    # Pages 100-325 use 3 digits each\n    total_digits += (325 - 100 + 1) * 3\n\n    return total_digits\n\nans = solution()"
    ],
    "cf5ba5b483a144138738a1737ed5a419": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    word = 'STATISTIC'\n\n    # Calculate total permutations without restrictions.\n    total_perms = factorial(len(word)) // (factorial(word.count('S')) * factorial(word.count('T')) *\n                                           factorial(word.count('A')) * factorial(word.count('I')) *\n                                           factorial(word.count('C')))\n\n    # Calculate permutations where Ts are together. Treat the TT's as one letter.\n    word_with_T_together = 'STATISTIC'.replace('TT', 'X')\n    perms_with_T_together = factorial(len(word_with_T_together)) // (factorial(word_with_T_together.count('S')) *\n                                                                     factorial(word_with_T_together.count('X')) *\n                                                                     factorial(word_with_T_together.count('A')) *\n                                                                     factorial(word_with_T_together.count('I')) *\n                                                                     factorial(word_with_T_together.count('C')))\n    # Since X represents TT, we must also consider the permutation of Ts within X.\n    perms_with_T_together *= factorial(2)\n\n    # Subtract the permutations where T's are together from the total permutations.\n    return total_perms - perms_with_T_together\n\nans = solution()"
    ],
    "46cef24404be44039ae2dc1b54fadeb2": [
        "def solution():\n    first_week_tickets = 2140\n    second_week_tickets = first_week_tickets - 320\n    third_week_tickets = second_week_tickets - 210\n\n    total_tickets = first_week_tickets + second_week_tickets + third_week_tickets\n\n    return total_tickets\n\nans = solution()"
    ],
    "0d3504aeda6446b2821326f127f1ec2d": [
        "def solution():\n    ans = 81 + 81 / 9 + 110\n    return ans\n\nans = solution()"
    ],
    "fdb8c2ece83d4d068bfb7949b80be75f": [
        "def solution():\n    ans = 58 + 127\n    return ans\n\nans = solution()"
    ],
    "ab88cfc915d14fbb80689295c573dfcb": [
        "def solution():\n    for total_gums in range(1, 1000):  # Arbitrary upper limit to find the solution\n        remaining_gums_after_music = total_gums - 2\n        shared_gums = remaining_gums_after_music // 3\n        if remaining_gums_after_music % 3 == 0:  # Check if one third is an integer\n            remaining_gums_after_break = remaining_gums_after_music - shared_gums\n            if remaining_gums_after_break % 4 == 0:  # Check if the amount for each of the next four lessons is an integer\n                return total_gums\n\nans = solution()"
    ],
    "3330453138ae4958abd914a2a7448912": [
        "def solution():\n    total_pieces = 450\n    rate_per_hour = 50\n\n    hours_needed = total_pieces / rate_per_hour\n\n    return hours_needed\n\nans = solution()"
    ],
    "7aa2c65cbce244dcaa12d38ff857c220": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sarah, mark = symbols('sarah mark')\n  \n    # Equation 1: Sarah had $20 more Pokemon cards than Mark initially\n    equation1 = Eq(sarah, mark + 20)\n    \n    # Equation 2: Today, Sarah bought 16 extra Pokemon cards, and she had 3 times more than Mark\n    equation2 = Eq(sarah + 16, 3 * mark)\n    \n    # Solving the equations for the number of cards Sarah and Mark had\n    solutions = solve((equation1, equation2), (sarah, mark))\n    \n    # The number of Pokemon cards Sarah had before buying new cards today\n    return solutions[sarah]\n\nans = solution()"
    ],
    "81087fa894824da4b6c11846677ddcec": [
        "def solution():\n    number = 418\n    rounded_number = round(number, -1)\n    return rounded_number\n\nans = solution()"
    ],
    "36b223a5a83d47b19a34d4a0c5a1649d": [
        "def solution():\n    ans = 17 + 18 + 29 + 6\n    return ans\n\nans = solution()"
    ],
    "308a277543c04ae090ebdf3f5bdc0324": [
        "def solution():\n    ans = (2018 - 20 + 18) // 8\n    return ans\n\nans = solution()"
    ],
    "8f01d238435847a7a31b2925c68c14ab": [
        "def solution():\n    attempts = (9 * 8 * 7 * 6) - 1\n    return attempts\n\nans = solution()"
    ],
    "6f69d6a468eb423cb027c930d2635209": [
        "def solution():\n    return 527 * 8\n\nans = solution()"
    ],
    "6e38f6f4ee8843d096766411ae11499d": [
        "def solution():\n    return 2.98 * 23\n\nans = solution()"
    ],
    "ab508b1e2f9a4215994ac2d9ef293ffd": [
        "def solution():\n    # We need to find the pattern in the sequence\n    # Let's first create a list of given numbers\n    sequence = [2945, 3445, 3245, 3745, 4045, 3845]\n    \n    # We compare consecutive differences to find the pattern\n    differences = [sequence[i+1] - sequence[i] for i in range(len(sequence)-1)]\n    \n    # We notice that the differences alternate between +500, -200, +500, -200, ...\n    # Therefore, after 3745 the pattern should decrease by 200, so the next number is:\n    missing_number = sequence[3] - 200\n    \n    return missing_number\n\nans = solution()"
    ],
    "51e3e0dca7794d3eaec40de5cb8e99fa": [
        "def solution():\n    sum_squares = sum([i**2 for i in range(1, 26, 2)])\n    return sum_squares\n\nans = solution()"
    ],
    "c96e5aeffc5c4914b430832baafb7a02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    h = symbols('h')\n    equation = Eq(2 * h, 25 + h)\n    solutions = solve(equation, h)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "17b66351b21c4cb391ca2267e3a54abf": [
        "def solution():\n    for number in range(99, 9, -1):\n        if number % 3 == 0 and number % 5 == 0:\n            return number\n\nans = solution()"
    ],
    "9691b4fae60c4d1e9e827ad0a388037a": [
        "def solution():\n    numerator = 15\n    denominator = 1/7\n    \n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "8abec5f9b93a4a2eb3f0ab042e5a2ec4": [
        "def solution():\n    total_mushrooms = 40\n    diff_first_hour = 26\n\n    # Let x be the mushrooms gathered in the first hour\n    # Then, the mushrooms gathered in the second hour = total_mushrooms - x\n    # According to the condition given: x + diff_first_hour = total_mushrooms - x\n    # Which simplifies to: x + x = total_mushrooms - diff_first_hour\n    # So, 2x = total_mushrooms - diff_first_hour\n\n    x = (total_mushrooms - diff_first_hour) / 2\n\n    # The number of mushrooms gathered in the second hour is total_mushrooms - x\n    mushrooms_second_hour = total_mushrooms - x\n\n    return int(mushrooms_second_hour)\n\nans = solution()"
    ],
    "36eb6fb5682347a586edc281a6c0df91": [
        "def solution():\n    initial_value = 20000\n    depreciation_rate = 0.10\n    years = 6\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n\n    return final_value\n\nans = solution()"
    ],
    "28ab82b7bb864d0cae94f2ab3cd7c918": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables\n    women, men = symbols('women men')\n    \n    # Define the equations based on the problem statement\n    equation1 = Eq(women, 4 * men)  # There were four times as many women as men\n    equation2 = Eq(2 * women + 5 * men, 182)  # Total number of cupcakes eaten\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (women, men))\n\n    return solutions[women]\n\nans = solution()"
    ],
    "fb6a59597d654291bed01b4df12ecc2a": [
        "def solution():\n    diameter_of_one_coin = 1.85  # diameter of one coin in cm\n    number_of_coins = 11  # number of coins\n\n    # The total length of the row of coins is:\n    # length of one coin + length of (number_of_coins - 1) gaps (where a gap has a width of one coin's diameter)\n    total_length = diameter_of_one_coin + (number_of_coins - 1) * diameter_of_one_coin\n\n    return total_length\n\nans = solution()"
    ],
    "870378fe08e54c25879633bc63dcfb58": [
        "def solution():\n    num_terms = 14\n    first_term = 5\n    common_diff = 3\n    \n    nth_term = first_term + (num_terms - 1) * common_diff\n    sum_sequence = (num_terms * (first_term + nth_term)) // 2\n    \n    return sum_sequence\n\nans = solution()"
    ],
    "a98be4f6b8d9491eb39649d9e6370466": [
        "def solution():\n    number = 5345\n    round_to_nearest = 100\n\n    ans = round(number / round_to_nearest) * round_to_nearest\n    \n    return ans\n\nans = solution()"
    ],
    "935623bcdc6a4872838561b5773ef917": [
        "def solution():\n    return 3 * 20 // 12\n\nans = solution()"
    ],
    "888087113ad04b5893f98edb9c00188d": [
        "def solution():\n    ans = 12 * (15 - 9) + 24 // (10 - 6)\n    return ans\n\nans = solution()"
    ],
    "0e58b9cb1b3b4b438f3c51f0ee11f3f3": [
        "def solution():\n    participants = 10\n    handshakes = (participants * (participants - 1)) // 2\n    return handshakes\n\nans = solution()"
    ],
    "46fe46fdf5be405f973b8d4e6c7447ae": [
        "def solution():\n    from math import factorial\n\n    ans = factorial(7)  # 8 people but we fix one to account for rotation\n    return ans\n\nans = solution()"
    ],
    "ccf6b106f5b54dbc953e3d9d6e9d4019": [
        "def solution():\n    morning_temp = -5\n    night_temp = 10\n\n    temp_difference = night_temp - morning_temp\n\n    return temp_difference\n\nans = solution()"
    ],
    "9223b2da325349b8b26286bfe0d69c61": [
        "def solution():\n    last_digit_2 = (2 ** 2017) % 10  # The last digit of 2^2017\n    last_digit_3 = (3 ** 2017) % 10  # The last digit of 3^2017\n\n    ans = (last_digit_2 * last_digit_3) % 10  # The last digit of the product\n\n    return ans\n\nans = solution()"
    ],
    "3ff6ebc4090643778a1addb47fc34433": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    initial_ants = symbols('initial_ants')\n    \n    after_sweep = (1 - 3/4) * initial_ants\n    after_fear = (1 - 2/5) * after_sweep\n    final_ants = after_fear + 185\n    \n    equation = Eq(final_ants, 2 * initial_ants)\n    \n    ans = solve(equation, initial_ants)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "15bb7f3dbdea4fa191d64a8c757e2591": [
        "def solution():\n    sandra_age_now = 8\n    mother_age_now = sandra_age_now + 33\n    sandra_age_2_years_ago = sandra_age_now - 2\n    mother_age_2_years_ago = mother_age_now - 2\n    age_difference = mother_age_2_years_ago - sandra_age_2_years_ago\n    return age_difference\n\nans = solution()"
    ],
    "c3ccc050c32c44daa5991bb6f2a6ba89": [
        "def solution():\n    ans = 25 * 123 * 0.4\n    return ans\n\nans = solution()"
    ],
    "218eba99b87c41d18d1865559215bc59": [
        "def solution():\n    book_cost = 13\n    books_first_day = 89\n    books_second_day = 11\n    total_cost = book_cost * (books_first_day + books_second_day)\n\n    return total_cost\n\nans = solution()"
    ],
    "adf1208d41db4a14bf12a4808bccc462": [
        "def solution():\n    ans = 6342 // 7\n    return ans\n\nans = solution()"
    ],
    "1307cafce9d24303b397ab789e178e8a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the first term be a and the common difference be d\n    a, d = symbols('a d')\n    \n    # Sum of an arithmetic progression: S_n = n/2 * (2a + (n - 1)d)\n    # Sum of first four terms\n    S_first_four = 4 / 2 * (2 * a + (4 - 1) * d)\n    # Sum of last four terms (terms 5 to 8)\n    S_last_four = 4 / 2 * (2 * (a + 4 * d) + (4 - 1) * d)\n    \n    # Equation according to the problem statement\n    equation = Eq(S_last_four - S_first_four, 32)\n    \n    # Solve for d\n    solution = solve(equation, d)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "4ad9c8bc9fdb42738d2d58bfbd0f8c29": [
        "def solution():\n    # The given sequence consists of square numbers: 1^2, 2^2, 3^2, etc.\n    # To find the next number in the sequence, identify the next square number.\n    \n    # The last number given is 49, which is 7^2 (since 49 is the square of 7)\n    # So, the next number will be the square of (7+1), which is 8^2.\n\n    next_number = (7 + 1) ** 2\n    return next_number\n\nans = solution()"
    ],
    "ec254d781c2b43cfab681f9a4da37327": [
        "def solution():\n    pens_per_friend = 23\n    number_of_friends = 42\n\n    total_pens = pens_per_friend * number_of_friends\n\n    return total_pens\n\nans = solution()"
    ],
    "a59e62d9c9954410934bd68af788363b": [
        "def solution():\n    def next_number(num):\n        num = 2 * num + 4\n        return num if num < 100 else num % 100\n  \n    num = 1\n    for i in range(2021):\n        num = next_number(num)\n  \n    return num\n\nans = solution()"
    ],
    "cf24e8570c5f445681de61cc8e392341": [
        "def solution():\n    from math import gcd\n\n    # Calculate the Least Common Multiple (LCM) of the two flashing rates\n    flashes_per_minute_red = 4\n    flashes_per_minute_green = 6\n\n    lcm = (flashes_per_minute_red * flashes_per_minute_green) // gcd(flashes_per_minute_red, flashes_per_minute_green)\n\n    # Calculate how many times both lights flash together in one minute\n    flashes_together_per_minute = lcm // flashes_per_minute_red\n\n    # Calculate how many times both lights flash together in one hour\n    flashes_in_hour = 60 * flashes_together_per_minute\n\n    return flashes_in_hour\n\nans = solution()"
    ],
    "7dd4045d492549698d37a5863045d780": [
        "def solution():\n    ans = 312 + 9\n    return ans\n\nans = solution()"
    ],
    "a2b3614814354adfabe59be257d8e75b": [
        "from sympy import primerange\n\ndef solution():\n    possible_as = list(primerange(1, 14)) # since 3a < 41, a < 14\n    possible_bs = list(primerange(1, 11)) # since 7b < 41, b < 6\n    for a in possible_as:\n        for b in possible_bs:\n            if 3*a + 7*b == 41:\n                return a + b\n\nans = solution()"
    ],
    "4e46f2beb27349e6aa3f6d1b29e68cab": [
        "def solution():\n    return (4.5 + 10.3) / 2\n\nans = solution()"
    ],
    "0ddb927d100f4ec0b3038de3ef7a76be": [
        "def solution():\n    sale_price = 6500\n    profit_percentage = 30\n    cost_price = sale_price / (1 + profit_percentage / 100)\n\n    desired_profit = 5000\n    new_sale_price = cost_price + desired_profit\n    new_profit_percentage = (desired_profit / cost_price) * 100\n    \n    return new_profit_percentage\n\nans = solution()"
    ],
    "2dca95dfad284b9387bbcee7d41b7a7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    n = symbols('n')\n    equation = Eq(32/n, n/2)\n\n    solutions = solve(equation, n)\n\n    return solutions\n\nans = solution()"
    ],
    "1e29620d8c1546499923e5051d3708fa": [
        "def solution():\n    total_volume = 120 / (1 - 3/5)\n    water_volume_per_bottle = total_volume - 120\n    water_needed_for_6_bottles = water_volume_per_bottle * 6\n    return water_needed_for_6_bottles\n\nans = solution()"
    ],
    "ea94212bd8754f72b8001d195d361ee0": [
        "def solution():\n    kg_to_g = 1000  # 1 kg equals 1000 grams\n    n = 8.2 * kg_to_g\n    return int(n)\n\nans = solution()"
    ],
    "51adf37d19ad431c8fff66b81f840b33": [
        "from math import factorial\n\ndef solution():\n    return factorial(len(\"EARTH\"))\n\nans = solution()"
    ],
    "fc9c893a6de2407d928994eaaedf78a9": [
        "def solution():\n    return 4 * 18 * 25\n\nans = solution()"
    ],
    "f0f847c95e5f466d90b8e462be6ed071": [
        "def solution():\n    simon_speed = 150   # Simon's walking speed in feet per minute\n    friend_speed = 200   # Friend's walking speed in feet per minute\n    walking_time = 10    # Walking time before Simon returns in minutes\n    \n    # Simon's distance from school when he starts to run back\n    simon_distance = simon_speed * walking_time\n    \n    # Simon's running speed, twice his walking speed\n    simon_running_speed = simon_speed * 2\n    \n    # Time taken for Simon to run back to school\n    running_time = simon_distance / simon_running_speed\n\n    # Total time friend has been walking (away + Simon's return time)\n    total_friend_time = walking_time + running_time\n\n    # Distance friend is from school\n    friend_distance = total_friend_time * friend_speed\n\n    return friend_distance\n\nans = solution()"
    ],
    "3bd51f5982c940ddbbde362e9af86b8e": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('123456789', 5):\n        s, e, n, d, m, o, r, y = *perm[0:5], '0', perm[5], perm[6], perm[7]\n        send = int(s) * 1000 + int(e) * 100 + int(n) * 10 + int(d)\n        more = int(m) * 1000 + int(o) * 100 + int(r) * 10 + int(e)\n        money = int(m) * 10000 + int(o) * 1000 + int(n) * 100 + int(e) * 10 + int(y)\n        if send + more == money:\n            return send * more\n\nans = solution()"
    ],
    "32cddd410fc54087979e0acde6f71066": [
        "from math import factorial\n\ndef solution():\n    total_bells_stars_redballs = 2 + 2 + 2  # Sum of identical items (2 bells, 2 stars, 2 red balls)\n    total_items = total_bells_stars_redballs + 1  # Total items, including the green ball\n\n    # Calculate the factorial of the total items\n    total_permutations = factorial(total_items)\n    \n    # Divide by the factorial of the number of identical items to account for indistinguishable permutations\n    permutations_bells = factorial(2)\n    permutations_stars = factorial(2)\n    permutations_redballs = factorial(2)\n\n    # Calculate the final answer\n    ans = total_permutations / (permutations_bells * permutations_stars * permutations_redballs)\n    \n    return ans\n\nans = solution()"
    ],
    "1664d9ce104d45fd8be662f12fc279a0": [
        "def solution():\n    # Combination of actions and corresponding durations.\n    actions = [\n        (1, 2, 2),  # Step 1: Eddie and Jack cross, Jack returns. Total time = 2+2\n        (1, 5, 5),  # Step 2: Eddie and Rose cross, Eddie returns. Total time = 1+5\n        (1, 10, 10), # Step 3: Eddie and Mary cross. Total time = 1\n        # No need to return the flashlight as everyone has crossed.\n    ]\n\n    # The shortest amount of time needed is the sum of the individual times.\n    shortest_time = sum(action[2] for action in actions)\n\n    return shortest_time\n\nans = solution()"
    ],
    "2a228cd17f4e409e9bc77a0ccc4c9809": [
        "def solution():\n    dispenser_capacity = 5  # in litres\n    container_ratio = 0.25\n    cup_volume = 0.150  # in litres, 150ml converted to litres\n    number_of_cups = 14\n\n    container_volume = dispenser_capacity * container_ratio\n    total_cup_volume = cup_volume * number_of_cups\n\n    water_left = dispenser_capacity - (container_volume + total_cup_volume)\n\n    return water_left\n\nans = solution()"
    ],
    "fa00622124e242f3b8c0fe92c2d39c73": [
        "def solution():\n    def derangement(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n\n    ans = derangement(7)\n    return ans\n\nans = solution()"
    ],
    "6433bb0ce3b84294a9f9739ddd7a9ca5": [
        "def solution():\n    for d1 in range(10):\n        for d2 in range(10):\n            number = int(f\"2{d1}{d2}335\")\n            if number % 99 == 0:\n                return number\n\nans = solution()"
    ],
    "02456ecae03a47dab61beed2cc4c0b15": [
        "def solution():\n    n = 100\n    while n % 7 != 0:\n        n -= 1\n    return n - 7\n\nans = solution()"
    ],
    "3adf2f6e8afc4a6ca82c84688afc78b5": [
        "def solution():\n    harry_speed_ratio = 3\n    ginny_speed_ratio = 4\n    harry_time = 24\n\n    ginny_time = (harry_time / harry_speed_ratio) * ginny_speed_ratio\n\n    return ginny_time\n\nans = solution()"
    ],
    "bd690baeb49d4336869943efade96813": [
        "def solution():\n    ans = 5 / (1/4)\n    return ans\n\nans = solution()"
    ],
    "5fa23afcf49349ac9cd5d88b0ce77585": [
        "def solution():\n    # Let 'p' be the number of pages Anny writes per day at the original rate\n    # Let 't' be the total number of pages Anny has to write\n    \n    # According to the problem:\n    # p * 8 = t => t is divisible by 8\n    # (p + 2) * (8 - 2) = t => t is divisible by 6\n    \n    # We know that t must be the common multiple of 8 and 6\n    # We can start checking from the least common multiple (LCM) of 8 and 6\n    \n    from math import gcd\n\n    def lcm(x, y):\n        return x * y // gcd(x, y)\n\n    # Smallest possible total number of pages based on LCM of delays (8 and 6)\n    smallest_t = lcm(8, 6)\n    \n    while True:\n        if smallest_t % 8 == 0 and smallest_t % 6 == 0:\n            p_original = smallest_t // 8  # Pages per day at original rate\n            p_faster = smallest_t // 6  # Pages per day at faster rate\n            if (p_faster - p_original) == 2:  # Anny writes 2 more pages per day\n                return smallest_t\n        smallest_t += 1\n\nans = solution()"
    ],
    "244f808ad1cc4d13a675289a3ecd9a1a": [
        "def solution():\n    count = 0\n    for page in range(1, 201):\n        count += str(page).count('5')\n    return count\n\nans = solution()"
    ],
    "c6905843d5c84d1896ee600c07cec573": [
        "def solution():\n    # Pip's rate of baking is 5 loaves in 20 minutes.\n    # So in 40 minutes, Pip can bake double the amount, as 40 minutes is double of 20 minutes.\n    pip_loaves = (5 * 40) // 20\n    \n    # Bud's rate of baking is 3 loaves in 15 minutes\n    # In 40 minutes, Bud can bake (40/15) times the amount he can bake in 15 minutes.\n    # To ensure integer division, we can multiply first and then divide.\n    bud_loaves = (3 * 40) // 15\n    \n    # The total number of loaves baked by Pip and Bud in 40 minutes\n    total_loaves = pip_loaves + bud_loaves\n    return total_loaves\n\nans = solution()"
    ],
    "0555563c570c465e86a95b3ddf408f78": [
        "def solution():\n    ans = 828 // 9\n    return ans\n\nans = solution()"
    ],
    "09b093e35e3d45d0b688e30cc6a0ba76": [
        "def solution():\n    # Initial value of the house is not given directly. We need to calculate it.\n    # Let's name it initial_price. We are told that after a year, the value increased by 10%\n    # to reach £11,000. So the initial_price was 100% and it reached 110% after first year.\n    \n    # Calculate initial price of the house using the value after first year\n    value_after_first_year = 11000\n    initial_price = value_after_first_year / 1.1  # because 110% after increase is £11,000\n\n    # Now calculate the value of the house after the second year when it decreased by 10%\n    value_after_second_year = initial_price * 0.9  # decrease of 10%\n\n    # Finally, calculate the loss or profit by subtracting the initial price from the value after second year\n    loss_or_profit = value_after_second_year - initial_price\n    \n    return loss_or_profit\n\nans = solution()"
    ],
    "bf44fa7967fe492d97b8a311fafdfaee": [
        "def solution():\n    # Worst case scenario:\n    # Yohan takes out all the red socks (10) and all the black socks (10)\n    # The next sock Yohan takes out has to be a white sock to make a pair\n    max_socks = 10 + 10 + 1\n    \n    return max_socks\n\nans = solution()"
    ],
    "b5a825d4f853436bb277e7f3866639d2": [
        "def solution():\n    a = symbols('a')\n    expr = (12 * a) / 4 + 2 * a * 5\n    simplified_expr = expr.simplify()\n    return simplified_expr\n\nans = solution()"
    ],
    "fc738668235447c79203dcca2ce2a678": [
        "def solution():\n    d = symbols('d')\n    expression = (6 * d) + (5 * d) - d\n    simplified_expression = simplify(expression)\n    return simplified_expression\n\nans = solution()"
    ],
    "084167b934b34115b89c8d9ae9a3b4a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for the total number of cookies Richard had at first\n    total_cookies = symbols('total_cookies')\n\n    # Create the equation representing the problem\n    equation = Eq((total_cookies * (3/8)) + (total_cookies * (1/6)) + 33, total_cookies)\n\n    # Solve the equation for the total number of cookies\n    solutions = solve(equation, total_cookies)\n\n    # Return the solution\n    return solutions[0]\n\nans = solution()"
    ],
    "ceff5d5955364eabbd46a62f98797a05": [
        "def solution():\n    sequence = []\n    for i in range(1, 10):\n        sequence.extend([i] * (i + 2))\n        \n    mid_index = len(sequence) // 2\n    if len(sequence) % 2 == 0:  # If the total number of the elements is even\n        median = (sequence[mid_index - 1] + sequence[mid_index]) / 2\n    else:  # If the total number of the elements is odd\n        median = sequence[mid_index]\n\n    return median\n\nans = solution()"
    ],
    "b90de1565c844c2d97a4ccdcf12c2aac": [
        "def solution():\n    # Let the number Jemma thinks be x\n    # According to the problem statement, we have: (x + 3) * 5 = 35\n    # Now we need to find x\n    \n    # Inverse operation of multiplication by 5 is division by 5\n    result_after_adding = 35 / 5\n    \n    # Inverse operation of adding 3 is subtracting 3\n    jemmas_number = result_after_adding - 3\n    \n    return jemmas_number\n\nans = solution()"
    ],
    "12bef96eae3c41e78b2c7c959b7cb247": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime(2023, 5, 5)  # 5th May 2023 is a Friday, according to the problem statement\n    end_date = datetime(2023, 6, 7)    # 7th June\n\n    sundays_count = 0\n    current_date = start_date\n\n    while current_date <= end_date:\n        if current_date.weekday() == 6:  # 0: Monday, 1: Tuesday, ..., 6: Sunday\n            sundays_count += 1\n        current_date += timedelta(days=1)  # increment the day by one\n\n    return sundays_count\n\nans = solution()"
    ],
    "06cae666e4524e0780eed7ff941bb6a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r be the original number of red marbles and w the original number of white marbles\n    # Let x be the number of red marbles added by Pip and y the number of white marbles added by Bud\n    r, w, x, y = symbols('r w x y', integer=True)\n\n    # The original ratio of red to white marbles is 3:2\n    equation1 = Eq(r / w, 3 / 2)\n\n    # After Pip adds red marbles, the ratio becomes 5:3\n    equation2 = Eq((r + x) / w, 5 / 3)\n\n    # After Bud adds white marbles, the ratio becomes 5:4\n    equation3 = Eq((r + x) / (w + y), 5 / 4)\n\n    # Bud puts 100 more marbles than Pip\n    equation4 = Eq(y - x, 100)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (r, w, x, y))\n\n    # Obtain the number of white marbles at first\n    initial_white_marbles = solutions[w]\n\n    return initial_white_marbles\n\nans = solution()"
    ],
    "d6e7284ab38c41e8ade59a5718682ded": [
        "def solution():\n    barrel_capacity = 120\n    bucket_capacity = 8\n    num_buckets = barrel_capacity // bucket_capacity\n    return num_buckets\n\nans = solution()"
    ],
    "d782b43878bb4cf1bafe5b83f82438e2": [
        "def solution():\n    total_pupils = 20\n    left_handed = total_pupils / 4\n    not_left_handed = total_pupils - left_handed\n    return int(not_left_handed)\n\nans = solution()"
    ],
    "9034744a6a62443fa56a651ca2584ee4": [
        "def solution():\n    total_flour = 40\n    num_packets = 25\n    \n    flour_per_packet = total_flour / num_packets\n\n    return flour_per_packet\n\nans = solution()"
    ],
    "1a3522fba8a14fd7bb05a7ed2ce9622e": [
        "def solution():\n    # Applying divisibility rule for 3 where the sum of the digits should be divisible by 3\n    for k in range(10):\n        if (5 + k + 2 + 7 + k) % 3 == 0:\n            # Applying divisibility rule for 4 where the last two digits should form a number divisible by 4\n            if int(f\"{7}{k}\") % 4 == 0:\n                return k\n\nans = solution()"
    ],
    "a63989af68494194bfb53a854e3665ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let c represent the number of cookies and b represent the number of brownies.\n    c, b = symbols('c b')\n    \n    # We have two equations based on the problem statement:\n    # Initial ratio: 4/3 = c/b\n    # After giving away 6 brownies: 12/7 = c/(b - 6)\n    eq1 = Eq(4*b, 3*c)\n    eq2 = Eq(12*(b - 6), 7*c)\n    \n    # Solve the equations for c and b\n    solutions = solve((eq1, eq2), (c, b))\n    \n    # The total number of cookies and brownies is c + b\n    total = solutions[c] + solutions[b]\n    \n    return total\n\nans = solution()"
    ],
    "f4fc1897652e40b78918728180071644": [
        "def solution():\n    # Calculate the construction amount of work per company per day\n    work_per_company_per_day = 900 / (4 * 5)\n    \n    # Calculate the amount of work required for a 5400m expressway\n    total_work_required = 5400\n    \n    # Calculate the total work per day for 6 construction companies combined\n    total_work_per_day_by_6_companies = work_per_company_per_day * 6\n    \n    # Calculate the number of days required for the 5400m expressway by 6 construction companies\n    days_required = total_work_required / total_work_per_day_by_6_companies\n    \n    return days_required\n\nans = solution()"
    ],
    "02ba9287f10746898f97cec009cbf38a": [
        "def solution():\n    # Buy at 10, sell at 20: profit = 20 - 10\n    profit1 = 20 - 10\n    \n    # Buy at 30, sell at 40: profit = 40 - 30\n    profit2 = 40 - 30\n    \n    # Total profit = profit1 + profit2\n    total_profit = profit1 + profit2\n    \n    return total_profit\n\nans = solution()"
    ],
    "ac5436a25e0442f2a16bce013c5fb452": [
        "def solution():\n    # Adam spends 93 pounds for 6 tickets\n    # Meaning, the price for each ticket is 93/6 pounds\n    ticket_price = 93 / 6\n    \n    # Claire spends 124 pounds\n    # The number of tickets she can buy is the total amount she spends\n    # Divided by the price per ticket\n    tickets_claire = 124 / ticket_price\n    \n    return int(tickets_claire)  # Return the whole number of tickets\n\nans = solution()"
    ],
    "3ed7b46e44cc4f75b5c4f2b2c79caf4e": [
        "def solution():\n    term_position = 10\n    term_value = 31\n    difference = 3\n    \n    first_term = term_value - difference * (term_position - 1)\n\n    return first_term\n\nans = solution()"
    ],
    "49021dd3aa7f4c03a9353bfc19e4a911": [
        "def solution():\n    total_shoes = 9 * 2  # 9 pairs of shoes, each pair has 2 shoes\n    time_per_shoe = 2 # minutes to clean each shoe\n    \n    # Each cobbler can clean half of the total shoes\n    time_taken = (total_shoes / 2) * time_per_shoe\n    \n    return time_taken\n\nans = solution()"
    ],
    "a978c7f92cdf44f1942f967781ad3207": [
        "def solution():\n    # Sum of squares formula: sum of squares of first n numbers is n*(n+1)*(2n+1)/6\n    ans = sum(i*(i+1)*(2*i+1)//6 for i in range(1, 21))\n    return ans\n\nans = solution()"
    ],
    "a77bd217c8b244528cdb996bbf73a46b": [
        "def solution():\n    total_cookies = 118\n    cookies_per_packet = 7\n    packets_needed = -(-total_cookies // cookies_per_packet)  # Ceiling division\n    return packets_needed\n\nans = solution()"
    ],
    "f3712fb16f9f469bab602738d8fc9cc5": [
        "def solution():\n    # The total sum of the numbers 1 through 8 is 1+2+3+4+5+6+7+8 = 36\n    total_sum = sum(range(1, 9))\n    \n    # If Player One's cards sum to 23, Player Two's cards sum to the remainder when 36 is split.\n    player_two_sum = total_sum - 23\n  \n    # We need to find the combination of 4 cards that gives Player Two the highest single card\n    # while the sum does not exceed player_two_sum.\n    max_card = 0\n    for i in range(8, 0, -1):  # Start checking from the highest card (8) downwards\n        if i < player_two_sum - (i - 1) - (i - 2) - (i - 3):  # The sum of the rest 3 lowest cards\n            max_card = i\n            break\n    \n    return max_card\n\nans = solution()"
    ],
    "7039740729c84c8b8342e7002a2ca25f": [
        "def solution():\n    numerator = 2019 + 2018 * 2020\n    denominator = 2019 * 2020 - 1\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "54675caae3be46bdbb99950ef3e25cf4": [
        "def solution():\n    total_questions = 50\n    not_attempted = 3\n    attempted = total_questions - not_attempted\n    score_correct = 4\n    score_wrong = -1\n    total_score = 168\n\n    for correct in range(attempted + 1):\n        wrong = attempted - correct\n        if correct * score_correct + wrong * score_wrong == total_score:\n            return correct\n\nans = solution()"
    ],
    "83a40f2b75d945d99e8db96a35ed071c": [
        "def solution():\n    from math import comb\n\n    # Number of players\n    players = 6\n    # Number of handshakes is the number of ways to choose 2 out of 6\n    handshakes = comb(players, 2)\n\n    return handshakes\n\nans = solution()"
    ],
    "77bd08c2a453492a87c56b21199104f7": [
        "def solution():\n    luna_dumplings = 17\n    lucy_dumplings = 11\n    total_dumplings = luna_dumplings + lucy_dumplings\n    dumplings_each = total_dumplings // 2\n    dumplings_to_give = luna_dumplings - dumplings_each\n\n    return dumplings_to_give\n\nans = solution()"
    ],
    "2b1da842ccca44b1832de397d53e2758": [
        "def solution():\n    # Given that two-thirds of a number is 24\n    # Let's find the whole number first\n    whole_number = (24 * 3) / 2\n\n    # Now, we want to find three-quarters of the same number\n    three_quarters = (whole_number * 3) / 4\n\n    return three_quarters\n\nans = solution()"
    ],
    "e99a2fad50b8447bb1d94893b6d71077": [
        "def solution():\n    return sum(range(1, 20, 2))\n\nans = solution()"
    ],
    "2963cf233b46447fb5c825b6196c2767": [
        "def solution():\n    return 14 * 7 * 2\n\nans = solution()"
    ],
    "79ee6ea187d04728affd0de95d4a7018": [
        "def solution():\n    from itertools import permutations\n\n    for p in permutations(range(10), 4):\n        B, D, E, C = p\n        if B == 0:  # Skip if B is 0, as we want a 4-digit number\n            continue\n        CBCD = C * 1000 + B * 100 + C * 10 + D\n        CDBC = C * 1000 + D * 100 + B * 10 + C\n        BDEC = B * 1000 + D * 100 + E * 10 + C\n        if CBCD + CDBC == BDEC:\n            return BDEC\n\nans = solution()"
    ],
    "fa8616efa25d4f8299991f1f8407ebf5": [
        "def solution():\n    from math import lcm\n\n    # Get the least common multiple of 6, 8, 9, and 15\n    least_common_multiple = lcm(6, 8, 9, 15)\n    \n    # Calculate how many packs are needed to have at least 1000 markers\n    packs_needed = -(-1000 // least_common_multiple)\n    \n    # Calculate the minimum number of markers to purchase\n    min_markers = packs_needed * least_common_multiple\n\n    return min_markers\n\nans = solution()"
    ],
    "b8daef005cc44c47badd2aa9cc85b532": [
        "def solution():\n    ans = 543 - 284\n    return ans\n\nans = solution()"
    ],
    "eeede3cca47a4853803fb6e1834b3f28": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "69645c35c8a9498f96d6bd29db22e3cd": [
        "def solution():\n    dresses_per_day_per_tailor = 2\n    number_of_tailors = 2\n    number_of_days = 9\n\n    total_dresses = dresses_per_day_per_tailor * number_of_tailors * number_of_days\n\n    return total_dresses\n\nans = solution()"
    ],
    "ddadda8c0ee24b048475b1ed01e97866": [
        "def solution():\n    result = 77.5 * (52 / 100) + 5.2 * 2.25\n    return result\n\nans = solution()"
    ],
    "0f973003177e403a90be16bda5983322": [
        "from math import factorial\n\ndef solution():\n    word = \"CHALLENGE\"\n    vowels = \"AEE\"  # Vowels that must be together\n    consonants = \"\".join([c for c in word if c not in vowels])    \n    \n    # Count the consonants and unique arrangements of vowels\n    consonants_count = len(consonants)\n    vowels_count = factorial(len(vowels)) // factorial(vowels.count('E'))\n    \n    # Treat the grouped vowels as a single character and add to the total count of characters.\n    total_characters = consonants_count + 1\n    \n    # Calculate the number of ways to arrange all characters (including grouped vowels).\n    all_arrangements = factorial(total_characters)\n    \n    # Multiply by the unique vowel arrangements inside the grouped vowels\n    ans = all_arrangements * vowels_count\n    \n    return ans\n\nans = solution()"
    ],
    "f87d0f3c9c544ecc84257dfd2c08ff82": [
        "def solution():\n    # Calculate the total expenditure for each period\n    jan_to_mar_total = 450 * 3\n    apr_to_jul_total = 350 * 4\n    aug_to_oct_total = 1250\n    nov_to_dec_total = 400 * 2\n    \n    # Calculate the overall total expenditure\n    total_expenditure = jan_to_mar_total + apr_to_jul_total + aug_to_oct_total + nov_to_dec_total\n    \n    # Calculate the average per month for the entire year\n    average_per_month = total_expenditure / 12\n    \n    return average_per_month\n\nans = solution()"
    ],
    "ab2b472b178c42e1be0cb06a1e3c1731": [
        "def solution():\n    n = 13\n    while n <= 50:\n        n += 13\n    return n\n\nans = solution()"
    ],
    "5382dfa2d3874f6fb2d80352fe7491cf": [
        "def solution():\n    # Calculate the total revenue for each type of cake\n    total_carrot = 4 * 5\n    total_cheese = 1 * 10\n    total_chocolate = 5 * 12\n    \n    # Total revenue from all cakes\n    total_revenue = total_carrot + total_cheese + total_chocolate\n    \n    # Total number of cakes\n    total_cakes = 4 + 1 + 5\n    \n    # Calculate the average selling price\n    average_price = total_revenue / total_cakes\n    \n    return average_price\n\nans = solution()"
    ],
    "7d6b5eb612604e62842cf23e7effa510": [
        "def solution():\n    total_cost = 104.10\n    number_of_people = 6\n    cost_per_person = total_cost / number_of_people\n    return cost_per_person\n\nans = solution()"
    ],
    "cd83fc2a714c467082ec8c0821d5ca86": [
        "def solution():\n    return 2 * 25 * 123\n\nans = solution()"
    ],
    "172e8369614e4791ae4f2791ae3d9b80": [
        "def solution():\n    ans = 143 + 22 + 157\n    return ans\n\nans = solution()"
    ],
    "45d5eb20e04045f59025c5f269819d6d": [
        "def solution():\n    initial_value = 50000\n    depreciation_rate = 0.15\n    years = 2\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n    return final_value\n\nans = solution()"
    ],
    "9addac3e46e44e54a72dccaf472b32a3": [
        "def solution():\n    first_term = 10\n    difference = 2\n    row_number = 12\n\n    nth_term = first_term + (row_number - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "b2352f675fd94fd2aa06d2b9fd4f2ba3": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    cars, bikes, lorries = symbols('cars bikes lorries', integer=True)\n\n    # The number of cars is four-thirds of the number of bikes\n    eq1 = Eq(cars, 4/3 * bikes)\n    \n    # The number of bikes is one quarter more than the number of lorries\n    eq2 = Eq(bikes, lorries + lorries/4)\n    \n    # The total is an even number and <100\n    # Since bikes and lorries are positive integers, cars will also be an integer.\n    # We can then just iterate over possible values of lorries\n    for lorries_val in range(1, 100):\n        # Solve the equations with the current value of lorries\n        solutions = solve((eq1, eq2), (cars, bikes))\n        total_vehicles = solutions[cars] + solutions[bikes] + lorries_val\n        # Check if the total number of vehicles is even and less than 100\n        if total_vehicles % 2 == 0 and total_vehicles < 100:\n            ans = (int(solutions[cars]), int(solutions[bikes]), lorries_val)\n            break\n\n    return ans\n\nans = solution()"
    ],
    "bd1ac5cdb71d4b9895407f5f400fb9e6": [
        "def solution():\n    p = 1\n    while not ((245 * p) ** (1/3)).is_integer():\n        p += 1\n    return p\n\nans = solution()"
    ],
    "74584a19c48347f89526c8b68de4bad8": [
        "def solution():\n    total_pages = 600\n    pages_per_day = 20\n    days_to_read = total_pages / pages_per_day\n    return int(days_to_read)\n\nans = solution()"
    ],
    "64fc79ccfc074918a3acf3065f946315": [
        "def solution():\n    # Number of visitors joining per minute\n    join_rate = 10\n\n    # Number of visitors per entrance that can check-in per minute\n    check_in_rate_per_entrance = 25\n\n    # Total check-in rate for one entrance\n    total_check_in_rate_1_entrance = 1 * check_in_rate_per_entrance\n\n    # Calculate the time it takes for one entrance to clear the queue\n    time_to_clear_with_1_entrance = 16\n\n    # Total visitors in the line when there is one entrance\n    visitors_in_line = join_rate * time_to_clear_with_1_entrance\n\n    # Total check-in rate for two entrances\n    total_check_in_rate_2_entrances = 2 * check_in_rate_per_entrance\n\n    # Calculate the time it takes for two entrances to clear the same queue\n    time_to_clear_with_2_entrances = visitors_in_line / total_check_in_rate_2_entrances\n\n    return time_to_clear_with_2_entrances\n\nans = solution()"
    ],
    "6e011ddf528c41a2841e18229bc4ef7a": [
        "def solution():\n    ans = 193 * 72\n    return ans\n\nans = solution()"
    ],
    "08152a7dda6848a09cff15a407c5e8c7": [
        "def solution():\n    divisor_quotient = 8  # Assume the least possible divisor which is one more than the remainder\n    while True:\n        dividend = divisor_quotient**2 + 7\n        if dividend % divisor_quotient == 7:\n            return dividend\n        divisor_quotient += 1\n\nans = solution()"
    ],
    "825ebd9e4b2e4171951ba63f6748b0ed": [
        "def solution():\n    ans = 6**2 - 4**2\n    return ans\n\nans = solution()"
    ],
    "d6ee9c6fc34d4dcc804163dd5f791636": [
        "def solution():\n    return 2014 + 998\n\nans = solution()"
    ],
    "9b8fa831793640388f99903b6da9cfa0": [
        "def solution():\n    shermaine = 142\n    elvis = shermaine + 157\n    claudia = elvis + 202\n    total = shermaine + elvis + claudia\n    return total\n\nans = solution()"
    ],
    "73720d8a53844a81a014f335f06e561a": [
        "def solution():\n    initial_money = 100\n    money_after_book = initial_money - (10 / 100) * initial_money\n    money_after_dvd = money_after_book - (20 / 100) * money_after_book\n    return money_after_dvd\n\nans = solution()"
    ],
    "e76a8423b47d4b808a5aeadbbdc02127": [
        "def solution():\n    decimal_part = '3' * 1000  # Since 1/3 = 0.333..., the decimal part is repeating \"3\"s\n    sum_of_digits = sum(int(digit) for digit in decimal_part)\n    return sum_of_digits\n\nans = solution()"
    ],
    "babb3e967e7b4903b754afff7e3ac9af": [
        "def solution():\n    total_distance = 16\n    day_distance = 5\n    night_distance = 3\n    days = 0\n    current_distance = 0\n    \n    while current_distance < total_distance:\n        days += 1\n        current_distance += day_distance\n        if current_distance >= total_distance:\n            break\n        current_distance -= night_distance\n    \n    return days\n\nans = solution()"
    ],
    "9223e7ed5d434394b8c1269d1e768459": [
        "def solution():\n    result_number = 34\n    added_number = 12\n    original_number = (result_number - added_number) / 2\n    return original_number\n\nans = solution()"
    ],
    "1488e869ebdf483eb9bb096cb73b1708": [
        "def solution():\n    scores = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    total_scores = sum(scores)\n    num_games = len(scores)\n    mean_score = total_scores / num_games\n    return mean_score\n\nans = solution()"
    ],
    "2d4a6c8599b4492b9b95d9d9b87446d5": [
        "def solution():\n    # Let the initial number of oranges be 3x and lemons be 5x.\n    # After selling 48 oranges, the ratio became 1:2.\n    # So, the number of oranges becomes 3x - 48 and the number of lemons is still 5x.\n    # According to the new ratio, (3x - 48) / 5x = 1 / 2\n    # so, 6x - 96 = 5x, hence x = 96\n    \n    x = 96\n    num_lemons = 5 * x # Number of lemons initially\n\n    return num_lemons\n\nans = solution()"
    ],
    "fd64eed080d74099adc2ffa22714239d": [
        "def solution():\n    return 8102 - 2018\n\nans = solution()"
    ],
    "4e9945e556e74ffe91cb3030ad37baae": [
        "def solution():\n    # Since students can choose 0 or 1 of each kind of fruit, there are 2 options for each fruit.\n    # Therefore, there are 2 * 2 * 2 = 8 possible combinations for any student to choose from.\n\n    # To ensure that at least two students choose exactly the same combination of fruits,\n    # we need to have at least one more student than the possible combinations.\n    # This is due to the Pigeonhole Principle.\n    ans = 8 + 1\n    \n    return ans\n\nans = solution()"
    ],
    "5731ad5e696643829195d329db479a6b": [
        "def solution():\n    bike_price = 80\n    discount_percent = 10\n    discount_amount = (discount_percent / 100) * bike_price\n    final_price = bike_price - discount_amount\n    return final_price\n\nans = solution()"
    ],
    "dcae38ac969c4a158f8f8806395f093f": [
        "from itertools import product\n\ndef solution():\n    burgers = 2\n    sides = 3\n    drinks = 5\n    \n    total_combos = burgers * sides * drinks\n\n    return total_combos\n\nans = solution()"
    ],
    "d6816432b29549ef83897c88e2df4bca": [
        "def solution():\n    spent = 10  # Avril spent 10p.\n    fraction_of_total = 1 / 4  # Spent amount is one-quarter of total money.\n    total_money = spent / fraction_of_total\n    return total_money\n\nans = solution()"
    ],
    "6af40f0ef07e4f66810e88983de37cf0": [
        "def solution():\n    # Legs count for each animal\n    duck_legs = 2\n    parrot_legs = 2\n    rabbit_legs = 4\n\n    # Given counts of ducks, parrots, and rabbit\n    ducks = 3\n    parrots = 2\n    rabbit = 1\n    \n    # Given total legs\n    total_legs = 32\n    \n    # Calculate legs without cats\n    legs_without_cats = (ducks * duck_legs) + (parrots * parrot_legs) + (rabbit * rabbit_legs)\n    \n    # Calculate the number of cats\n    cats = (total_legs - legs_without_cats) // 4\n    \n    return cats\n\nans = solution()"
    ],
    "74abfc1f309c4e35ab04f1a1d6695900": [
        "def solution():\n    ans = 818 - 271 - 18 + 64 - 29 + 36\n    return ans\n\nans = solution()"
    ],
    "5512327e08b64371a00550b6d22306bd": [
        "def solution():\n    from math import gcd\n    \n    students_A = 45\n    students_B = 75\n    students_C = 210\n    \n    gcf_AB = gcd(students_A, students_B)\n    gcf_ABC = gcd(gcf_AB, students_C)\n    \n    return gcf_ABC\n\nans = solution()"
    ],
    "d6c279a7a7694686a1864a5bf68f39e6": [
        "def solution():\n    from math import comb\n    \n    num_teams = 11\n    num_matches = comb(num_teams, 2)\n\n    return num_matches\n\nans = solution()"
    ],
    "30a048071a8e4db6b6628b18c39b3e8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 * (x - 1), 9 - 2 * (x + 1))\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "7ae0fef8de6c493cb2eee6482338c688": [
        "def solution():\n    def phi(a, b):\n        if a < 7:\n            return a + b * b\n        else:\n            return a - b\n            \n    return phi(4, phi(8, 3))\n\nans = solution()"
    ],
    "ca8974b0e2b446cfbbdf59c9fa10f48f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    judys_age, fathers_age, years_ago = symbols('judys_age fathers_age years_ago')\n    \n    equation1 = Eq(fathers_age, judys_age + 33)\n    equation2 = Eq(fathers_age + judys_age, 63)\n    equation3 = Eq(fathers_age - years_ago, 4 * (judys_age - years_ago))\n    \n    solutions = solve((equation1, equation2, equation3), (judys_age, fathers_age, years_ago))\n    \n    return solutions[years_ago]\n\nans = solution()"
    ],
    "10e0e482b8824984872affe8ce1e0490": [
        "def solution():\n    from math import lcm\n    # Calculate the least common multiple (LCM) of the multiples\n    markers_lcm = lcm(6, 8, 9, 15)\n\n    # To purchase at least 1000 markers, find the multiple of LCM that is greater than or equal to 1000\n    min_markers = markers_lcm\n    while min_markers < 1000:\n        min_markers += markers_lcm\n\n    return min_markers\n\nans = solution()"
    ],
    "dad5d4611c204567a94ca9e6e9e3d5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B = symbols('A B')\n\n    equation1 = Eq(A, B + 25)\n    equation2 = Eq(A + 35, 6 * B)\n    \n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "f7bdbfc9be95446a8cb7289c066d92b3": [
        "def solution():\n    # Let's use x and y for the ages of the older and younger brother currently.\n    # We know that when the older brother was the age of the younger brother now (y), the younger brother was 12.\n    # We also know that when the younger brother becomes the age of the older brother now (x), the older brother will be 27.\n    # This gives us two equations:\n    # 1) x - y = y - 12\n    # 2) 27 - y = x - y\n    # We can solve this system of equations to find the value of x and y.\n\n    from sympy import symbols, Eq, solve\n    x, y = symbols('x y')  # older brother's current age is x, younger brother's current age is y\n\n    # Equation (1): x - y = y - 12\n    eq1 = Eq(x - y, y - 12)\n\n    # Equation (2): 27 - y = x - y\n    eq2 = Eq(27 - y, x - y)\n\n    # Solve the system of equations\n    solution = solve((eq1, eq2), (x, y))\n\n    return solution[x]\n\nans = solution()"
    ],
    "3f4b5d68e6a34a558a6a5627f763bf86": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n\n    # The difference between terms is the same\n    common_difference = (fifteenth_term - tenth_term) / (15 - 10)\n\n    # The first term can be calculated by stepping back from the tenth term\n    first_term = tenth_term - (9 * common_difference)\n\n    # Now find the 102nd term using the first term and common difference\n    nd_term = first_term + (102 - 1) * common_difference\n\n    return int(nd_term)\n\nans = solution()"
    ],
    "16b3c8aa2d704da6a537f88f6fec0816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rooms = symbols('rooms')\n    \n    # If there are 4 people in each room, 40 students don't have dormitories\n    equation1 = Eq(4 * rooms, 40 + 4 * rooms - 40)\n    \n    # If there are 6 people in each room, 24 beds will be vacated\n    equation2 = Eq(6 * rooms, 4 * rooms - 40 + 24)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (rooms))\n\n    # Since we only have one variable, we extract the first element of the solution.\n    return solutions[0]\n\nans = solution()"
    ],
    "8822cb428e1f404e8f4004bb9e245353": [
        "def solution():\n    eaten_fraction = 3 / 5\n    eaten_sweets = 18\n    total_sweets = eaten_sweets / eaten_fraction\n    remaining_sweets = total_sweets - eaten_sweets\n\n    return int(remaining_sweets)\n\nans = solution()"
    ],
    "d21328403ccc4ef1888fbbd2ff71269e": [
        "def solution():\n    jane_age_now = 9\n    john_age_now = 5\n    jane_target_age = 15\n\n    years_until_jane_is_15 = jane_target_age - jane_age_now\n    john_age_when_jane_is_15 = john_age_now + years_until_jane_is_15\n\n    return john_age_when_jane_is_15\n\nans = solution()"
    ],
    "70e335db4e004110b36ede05612ac93b": [
        "def solution():\n    for num in range(10, 21):\n        if num % 4 == 0 and 36 % num == 0:\n            return num\n\nans = solution()"
    ],
    "21b6aec5564b47a2b3f38fad58c06438": [
        "def solution():\n    ans = 9678 * 8\n    return ans\n\nans = solution()"
    ],
    "f9501133c3614a48a8b6a1577fb1a1db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cost_price = symbols('cost_price')\n    \n    # calculate marked price which is 20% above cost price\n    marked_price = cost_price * 1.2\n    \n    # calculate selling price which is 80% of marked price\n    selling_price = marked_price * 0.8\n    \n    # equation representing loss which is cost price minus selling price\n    loss = Eq(cost_price - selling_price, 40)\n    \n    # solve for cost price\n    cost_price_value = solve(loss, cost_price)[0]\n    \n    return cost_price_value.evalf()\n\nans = solution()"
    ],
    "c4f58a5f4ee74d11a1ceefa03d4b0989": [
        "def solution():\n    return ((7 + 3) * 11) - (7 + (3 * 11))\n\nans = solution()"
    ],
    "9c5276fb1c214521afb9cff714698795": [
        "def solution():\n    # 1/x + 1/y = 1/6\n    # x = 10\n    # 1/10 + 1/y = 1/6\n    # 1/y = 1/6 - 1/10\n    # y = 1 / (1/6 - 1/10)\n    \n    y = 1 / ((1/6) - (1/10))\n    return y\n\nans = solution()"
    ],
    "e6fb8dbc811842a5bd4fa6371e5e2187": [
        "def solution():\n    apples_only = 20 - 10  # Students liking only apples\n    strawberries_only = 30 - 10  # Students liking only strawberries\n    both = 10  # Students liking both apples and strawberries\n    neither = 5  # Students liking neither\n\n    total_students = apples_only + strawberries_only + both + neither\n    return total_students\n\nans = solution()"
    ],
    "4052fcf1d3c045db91150181ba09abd4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be Xuanrui's original number of markers and y be Yaokuan's original number of markers\n    x, y = symbols('x y')\n    \n    # The equation representing the total number of markers they had originally\n    equation1 = Eq(x + y, 708)\n    \n    # The equation representing the number of markers each had after the transactions\n    equation2 = Eq(x - 532, y - (3/7)*y)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Xuanrui's original number of markers\n    xuanrui_markers = solutions[x]\n\n    return xuanrui_markers\n\nans = solution()"
    ],
    "19f6f50448bf4f7a813675df0afe5ff5": [
        "def solution():\n    original_price = 1050\n    discount_rate = 0.12\n    discount_amount = original_price * discount_rate\n    final_price = original_price - discount_amount\n    return final_price\n\nans = solution()"
    ],
    "7617a8045f5b4ff5b5324982a66889ea": [
        "def solution():\n    ans = 62 + 48 + 18 + 32\n    return ans\n\nans = solution()"
    ],
    "e34d46213408429baafffc5193541fcb": [
        "def solution():\n    total_questions = 10\n    correct_points = 6\n    incorrect_points = -2\n    total_points = 44\n\n    # Let the number of correct answers be x.\n    # Then the number of incorrect answers is (total_questions - x).\n    # We can set up the equation:\n    # correct_points * x + incorrect_points * (total_questions - x) = total_points\n    # Now we solve for x.\n\n    x = symbols('x')\n    equation = Eq(correct_points*x + incorrect_points*(total_questions - x), total_points)\n    correct_answers = solve(equation, x)\n\n    return correct_answers[0]\n\nans = solution()"
    ],
    "bcd8fb20c8b744e99ffa82607c24bb9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((13 - x)**2, 25)\n\n    solutions = solve(equation, x)\n    ans = solutions\n    return ans\n\nans = solution()"
    ],
    "bf4013af9d5b45968ef5e11b2c7e33c2": [
        "def solution():\n    factorial_sum = sum(factorial(i) for i in range(1, 9))\n    return factorial_sum % 100\n\nfrom math import factorial\n\nans = solution()"
    ],
    "22d57fd8aceb477a89a51700a52e11c5": [
        "def solution():\n    volume_A = 300\n    concentration_A = 0.20\n    volume_B = 300\n    concentration_B = 0.30\n    \n    total_volume = volume_A + volume_B\n    total_sugar = volume_A * concentration_A + volume_B * concentration_B\n    \n    concentration_mixture = total_sugar / total_volume\n    \n    return concentration_mixture\n\nans = solution()"
    ],
    "1e1427d5ceba4320aee5afcaccc52125": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ahmad, ryan = symbols('ahmad ryan')\n\n    equation1 = Eq(ahmad + ryan, 1442)\n    equation2 = Eq(ahmad, 6 * ryan)\n\n    solutions = solve((equation1, equation2), (ahmad, ryan))\n\n    ahmad_marbles = solutions[ahmad]\n    ryan_marbles = solutions[ryan]\n\n    marbles_to_give = (ahmad_marbles - ryan_marbles) / 2\n\n    return int(marbles_to_give)\n\nans = solution()"
    ],
    "f97121683f7348f08e4de57f11abcaed": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "44a59b6d17564f77996536b4fa6617a7": [
        "def solution():\n    ans = (3/10) + (1/100) + (7/1000)\n    return ans\n\nans = solution()"
    ],
    "11ea9bd45a5646b0b52b444e218c2de9": [
        "def solution():\n    pounds_to_dollars_rate = 2.5\n    dollars_amount = 1000\n    pounds_amount = dollars_amount / pounds_to_dollars_rate\n    return pounds_amount\n\nans = solution()"
    ],
    "cfb3940b70b44b77b4051f6425ca4116": [
        "def solution():\n    # Let x be the number of $2-notes, and y be the number of $10-notes\n    # We have two equations:\n    # 1) x + y = 95 (total number of notes)\n    # 2) (x + 5y) = 175 (total number of $2-notes after exchanging $10-notes for $2-notes)\n\n    # We can express y from the first equation: y = 95 - x\n    # Substitute y into the second equation: x + 5(95-x) = 175\n\n    # Now we will solve for x using these equations\n    total_notes = 95\n    total_2notes_after_exchange = 175\n\n    # Substitute y into the second equation\n    # x + 5(95-x) = 175\n    # x + 475 - 5x = 175\n    # 475 - 175 = 5x - x\n    # 300 = 4x\n    # x = 300 / 4\n    x = (total_2notes_after_exchange - 5*(total_notes - total_2notes_after_exchange)) // 4\n\n    return x\n\nans = solution()"
    ],
    "9e6ca5b654384e328bb7c1dbb3561114": [
        "def solution():\n    total_length = 540\n    head_length = 10\n    carriage_length = 27\n    spacing = 1\n\n    # Subtract the head length and one spacing since we are including the head of the train\n    remaining_length = total_length - head_length - spacing\n    # Each carriage has its own length plus spacing\n    length_per_carriage = carriage_length + spacing\n\n    # Calculate the number of carriages without the head of the train\n    num_carriages = remaining_length // length_per_carriage\n    \n    # Include the head of the train in the count\n    total_carriages = num_carriages + 1\n\n    return total_carriages\n\nans = solution()"
    ],
    "90718dbaf0fd4ed89a5a4d96ad666df5": [
        "def solution():\n    # Counting the number of 8's in one's place from 1 to 288\n    ones_place = 28 + 1  # because 288 also contains an 8 in one's place\n\n    # Counting the number of 8's in ten's place from 1 to 288\n    tens_place = 10 * 3  # Because for every hundred, there are 10 occurrences (80-89, 180-189, and 280-288)\n    # Additionally, for 280-288.\n    tens_place += 1  # because 288 also contains an 8 in ten's place\n\n    # Counting the number of 8's in hundred's place from 1 to 288\n    hundreds_place = 0  # No pages with 8 in hundred's place\n\n    # Adding up all the 8's from one's, ten's, and hundred's place\n    total_eights = ones_place + tens_place + hundreds_place\n    return total_eights\n\nans = solution()"
    ],
    "bd978d750b6e4729980ff669042abeea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pen, pencil = symbols('pen pencil')\n    equation1 = Eq(pen + pencil, 2.90)\n    equation2 = Eq(pen, pencil + 0.60)\n\n    solutions = solve((equation1, equation2), (pen, pencil))\n\n    return solutions[pen]\n\nans = solution()"
    ],
    "278b3ce4e6b040338ce029d381e86ebf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for each shape\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n\n    # Given equations\n    equation1 = Eq(triangle + triangle, square)\n    equation2 = Eq(square + triangle, circle)\n    equation3 = Eq(diamond, circle + square + triangle)\n\n    # Solve the equations\n    solution_dict = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n\n    # Calculate how many triangles are equal to one diamond\n    num_triangles_for_diamond = solution_dict[diamond] / solution_dict[triangle]\n\n    return int(num_triangles_for_diamond)\n\nans = solution()"
    ],
    "866545814d6e4615b2af1cbb207b8c44": [
        "def solution():\n    # Let's denote the correct answers as c and wrong answers as w.\n    # As per the conditions the equations will be,\n    # c + w = 50 (Since there are 50 questions in total)\n    # 2c - w = 82 (For correct answers, 2 points are given, and for wrong answers, 1 point is subtracted)\n\n    # Now we will find the value of c and w using the equations.\n\n    from sympy import symbols, Eq, solve\n\n    c, w = symbols('c w')\n    equation1 = Eq(c + w, 50)\n    equation2 = Eq(2 * c - w, 82)\n\n    solutions = solve((equation1, equation2), (c, w))\n\n    return solutions[c]\n\nans = solution()"
    ],
    "a9f0d9027e26479ba10780496a0c4d24": [
        "def solution():\n    from sympy import symbols, Eq, solve, Integer\n\n    x, y = symbols('x y', integer=True)\n    equation = Eq(24 * x - 25 * y, 8)\n    solutions = solve(equation, (x, y))\n\n    # Filter to keep only whole number solutions and find smallest x\n    x_values = [sol[x] for sol in solutions if isinstance(sol[x], Integer)]\n    min_x = min(x_values)\n\n    return min_x\n\nans = solution()"
    ],
    "35d6ac2bebfe44ffa37211e279b87749": [
        "def solution():\n    for x in range(1, 10):\n        for y in range(0, 10):\n            A = 10 * x + y\n            B = 20 * x + 2 * y\n            if B == 25 + 6 * A:\n                return A\n\nans = solution()"
    ],
    "01dd3259609c4a6da4fd5831e9936f4d": [
        "def solution():\n    original_price = 800\n    discount_rate = 0.15\n    increase_rate = 0.15\n\n    final_price = original_price * (1 - discount_rate) * (1 + increase_rate)\n    \n    return final_price\n\nans = solution()"
    ],
    "a59668f1e93b4825ba207bf6e1c4f492": [
        "def solution():\n    # Calculate the price per kg for each bag\n    price_per_kg_bag1 = 5 / 2.5\n    price_per_kg_bag2 = 7.70 / 4\n    \n    # Compare the price per kg to determine the better value\n    if price_per_kg_bag1 < price_per_kg_bag2:\n        return \"2.5kg bag\"\n    else:\n        return \"4kg bag\"\n\nans = solution()"
    ],
    "8fb6994898db4fa78cffadd0bf6a1ec7": [
        "def solution():\n    S_inverse = sum(1/i for i in range(2001, 2011))\n    S = 1 / S_inverse\n    return int(S)\n\nans = solution()"
    ],
    "e7527c6eca0e41f7b5a274121821fab1": [
        "def solution():\n    return 521 - 173 - 127\n\nans = solution()"
    ],
    "d39880770cf44cc1b8953e1fa9f1233b": [
        "def solution():\n    price_per_book = 4.50\n    number_of_books = 5\n    total_cost = price_per_book * number_of_books\n    return total_cost\n\nans = solution()"
    ],
    "dac6db12c85f45c99ab167826c4098d6": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 4), (2, 5), (8, 9)]\n    least_value, _ = solve_congruence(*congruences)\n    return least_value\n\nans = solution()"
    ],
    "ddf47a1b5bb549f3a5068ab88ce95d61": [
        "def solution():\n    total_amount = 1\n    fraction1 = 3/4\n    fraction2 = 2/5\n\n    ans = total_amount * fraction1 * fraction2\n    return ans\n\nans = solution()"
    ],
    "547dd66262ab4fd8b89a202921fdd75e": [
        "def solution():\n    monday_pages = 280\n    tuesday_pages = monday_pages - 28\n    total_pages = monday_pages + tuesday_pages\n\n    return total_pages\n\nans = solution()"
    ],
    "a2e32a8bfee74449ac3c05a82c14f783": [
        "def solution():\n    return 365 - (19 + 65)\n\nans = solution()"
    ],
    "94bd0c0ea38e484483c3d392ca25d206": [
        "def solution():\n    road_length = 60\n    interval = 10\n\n    trees_per_side = (road_length // interval) + 1\n    total_trees = trees_per_side * 2\n\n    return total_trees\n\nans = solution()"
    ],
    "6ba06bbd86ed47918a1f1d77269cfed8": [
        "def solution():\n    from math import lcm\n\n    red_mark = 5\n    blue_mark = 10\n    green_mark = 12\n\n    ans = lcm(red_mark, blue_mark, green_mark)\n\n    return ans\n\nans = solution()"
    ],
    "4bb30a08bef844b295fc45cdd2506df9": [
        "def solution():\n    bus_length = 5  # length of each bus\n    distance_between = 2  # distance between two buses\n    num_buses = 7  # total number of buses\n\n    # the length of the line is the sum of the lengths of the buses and the distances between them\n    line_length = (num_buses * bus_length) + (distance_between * (num_buses - 1))\n    \n    return line_length\n\nans = solution()"
    ],
    "166102618f9a4ea0b545a8ba6b224baa": [
        "def solution():\n    # Let the initial number be x\n    # Mistakenly, Aiden did (x / 4) - 25 instead of (x * 4) + 25\n    # The mistaken result is 2021, so we can set up the equation:\n    # (x / 4) - 25 = 2021\n    # Solve for x\n    x = (2021 + 25) * 4\n\n    # Now we calculate the correct answer by multiplying x by 4 and adding 25\n    correct_answer = (x * 4) + 25\n\n    return correct_answer\n\nans = solution()"
    ],
    "3b8e61c8ea8e4ba78d0aca808cf223c9": [
        "def solution():\n    height_of_28_blocks = 182\n    unit_height = height_of_28_blocks / 28\n    height_of_42_blocks = unit_height * 42\n    return height_of_42_blocks\n\nans = solution()"
    ],
    "78a5cb5509884246bd419bba61d02340": [
        "def solution():\n    ans = 45 * 7\n    return ans\n\nans = solution()"
    ],
    "a92d9eb66c3b4acd8f2839b36fdd0e14": [
        "def solution():\n    ans = 4.8 * 5\n    return ans\n\nans = solution()"
    ],
    "f321e52bafc84cfeaf82fee608fc2c47": [
        "def solution():\n    mass_quarter_full = 250\n    mass_three_quarters_full = 350\n    mass_half_full = (mass_three_quarters_full - mass_quarter_full) / 2\n\n    # Full jar mass (without subtracting the empty jar mass)\n    full_jar_mass = mass_quarter_full - mass_half_full\n\n    # Empty jar mass\n    empty_jar_mass = mass_quarter_full - full_jar_mass\n\n    return empty_jar_mass\n\nans = solution()"
    ],
    "5979a7958e5a49019259104db32617ae": [
        "def solution():\n    first_term = 106\n    last_term = 2019\n    num_terms = (last_term - first_term) // 1 + 1  # difference is 1\n    sum_of_sequence = (first_term + last_term) * num_terms // 2\n    return sum_of_sequence\n\nans = solution()"
    ],
    "fe3ec539b5a04bb7a24f12c0750720eb": [
        "def solution():\n    # For a number to be divisible by 9, the sum of its digits must also be divisible by 9.\n    # The sum of the digits of the number 2E3E2 is 2 + E + 3 + E + 2 = 7 + 2*E.\n    # To find the possible value(s) of E, solve 7 + 2*E for divisibility by 9.\n    for E in range(10):\n        if (7 + 2 * E) % 9 == 0:\n            return E\n\nans = solution()"
    ],
    "1be249dc19cb422a809047b2d7a80f6a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation = Eq(x / 5, y / 3)\n\n    # solve for y when x is 5\n    relationship = \"directly\"\n    y_solution = solve(equation.subs(x, 5), y)[0]\n\n    return relationship, y_solution\n\nans = solution()"
    ],
    "1046c694c10a415381a568db27604763": [
        "def solution():\n    cost_price = 200\n    selling_price_before_discount = cost_price * (1 + 0.50)  # 50% above cost\n    selling_price_after_discount = selling_price_before_discount * (1 - 0.10)  # 10% Christmas discount\n    profit = selling_price_after_discount - cost_price\n    \n    return profit\n\nans = solution()"
    ],
    "5a88150fabe34769918ee4dd88293fca": [
        "from math import sqrt\n\ndef solution():\n    m = 0\n    while True:\n        total_students_m = m**2 + 5\n        n = int(sqrt(total_students_m + 18))\n        if n**2 == total_students_m + 18:\n            break\n        m += 1\n    return total_students_m\n\nans = solution()"
    ],
    "d54cf1582b9840d2832c444ed488a72a": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "0ff7cfe71371476695329b23de3069ac": [
        "def solution():\n    # assuming the sequence a, b, a+b, a+2b, 2a+3b, 3a+5b\n    # we have two equations: a+2b = 6 and 3a+5b = 15.\n    \n    # Solving the system of equations for a and b\n    # Let's use sympy to solve the equations\n    from sympy import symbols, Eq, solve\n    \n    a, b = symbols('a b')\n    equation1 = Eq(a + 2*b, 6)\n    equation2 = Eq(3*a + 5*b, 15)\n    solutions = solve((equation1, equation2), (a, b))\n    \n    # Getting the values of a and b\n    a_val = solutions[a]\n    b_val = solutions[b]\n    \n    # The seventh number in the sequence is 5a+8b\n    seventh_number = 5*a_val + 8*b_val\n    \n    return seventh_number\n\nans = solution()"
    ],
    "6ddf66ac448548e690721ecb2b5f565e": [
        "def solution():\n    for num in range(99, 9, -1):\n        if num % 3 == 0 and num % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "d346e6a28b64479882e6e011bb7a6f19": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq((2*x + 3)/4 + (6 + 4*x)/3, (7*x + 22)/8)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "dd6d097a63594cca959d1e71d2d3ebea": [
        "def solution():\n    nums = [9, 11, 8, 12, 7, 13, 6, 14, 5, 14]\n    ans = sum(nums)\n    return ans\n\nans = solution()"
    ],
    "9e9d512190c84daf805cb3e49be050a6": [
        "def solution():\n    from math import gcd\n\n    class_a = 12\n    class_b = 15\n    class_c = 18\n\n    gcf_ab = gcd(class_a, class_b)\n    gcf_abc = gcd(gcf_ab, class_c)\n\n    return gcf_abc\n\nans = solution()"
    ],
    "03105f423b1347369d8ed85d1f00d475": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_time = datetime.strptime('17:00', '%H:%M')\n    badminton_duration = timedelta(minutes=45)\n    jogging_duration = timedelta(minutes=30)\n    end_time = start_time + badminton_duration + jogging_duration\n    return end_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "ecd9405da0514df5b2a0f1179131079e": [
        "def solution():\n    original_average = 25\n    new_average = 22\n    total_numbers = 3\n    new_number = 16\n    \n    original_sum = original_average * total_numbers\n    new_sum = new_average * total_numbers\n    \n    difference_in_sum = original_sum - new_sum\n    original_number = new_number + difference_in_sum\n    \n    return original_number\n\nans = solution()"
    ],
    "f4a44d5718564604b3aba4fefda53416": [
        "def solution():\n    num = 1\n    while True:\n        if num % 5 == 3 and num % 6 == 5:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "34d25cf24d7949d780640e0194156dfe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    girls = symbols('girls')\n    \n    boys = 36 - girls\n    total_score = 36 * 89\n    girls_score = girls * 88\n    boys_score = boys * 91\n    \n    equation = Eq(girls_score + boys_score, total_score)\n    \n    girls_count = solve(equation, girls)[0]\n    \n    return girls_count\n\nans = solution()"
    ],
    "57f1a73a3e564db985c24fecdf759cd6": [
        "def solution():\n    ans = (2 + 3)**2 + 4 * 5\n    return ans\n\nans = solution()"
    ],
    "32cc18556b6c45a9b298776fc2cefc3a": [
        "def solution():\n    total_questions = 25\n    score_correct = 4\n    score_incorrect = -2\n    rex_score = 66\n    unanswered_questions = 1\n    \n    # Let x be the number of correct answers\n    # Then total_questions - unanswered_questions - x will be the number of incorrect ones\n    for x in range(total_questions - unanswered_questions + 1):\n        if x * score_correct + (total_questions - unanswered_questions - x) * score_incorrect == rex_score:\n            return x\n\nans = solution()"
    ],
    "4a3bcfd145bb4a24aefa5c3766f7cbaa": [
        "from itertools import permutations\n\ndef solution():\n    vertices = ['A', 'B', 'C', 'D']\n    edges = list(permutations(vertices, 2))  # Possible directed edges\n    count = 0\n    \n    for a1, b1 in edges:\n        for a2, b2 in edges:\n            if a1 != a2 and b1 != b2 and a1 != b2 and a2 != b1:\n                for a3, b3 in edges:\n                    if (\n                        a3 not in [a1, a2, b1, b2]\n                        and b3 not in [a1, a2, b1, b2]\n                        and a3 != b3\n                    ):\n                        count += 1\n    # Each valid combination is counted six times (2 for each node's order)\n    ans = count // 6\n    \n    return ans\n\nans = solution()"
    ],
    "8dd4cfbce09b4b4ebc7f9f1a6f86de7d": [
        "def solution():\n    # David's sugar\n    david_sugar = 800 * 0.05\n    # Eugene's sugar\n    eugene_sugar = 200 * 0.30\n    # Felix's sugar\n    felix_sugar = 300 * 0.10\n    \n    # Total sugar\n    total_sugar = david_sugar + eugene_sugar + felix_sugar\n    # Total solution weight\n    total_solution = 800 + 200 + 300\n    \n    # Concentration of the mixture\n    concentration = (total_sugar / total_solution) * 100\n    \n    return concentration\n\nans = solution()"
    ],
    "17d3038b31954df3beaf2a17eef6f2f2": [
        "def solution():\n    return 715 - 364\n\nans = solution()"
    ],
    "b4c07ba5dcbe471282f64123c9e4bd81": [
        "def solution():\n    black_pens = 9\n    blue_pens = 4 * black_pens\n    green_pens = 2 * black_pens\n    total_pens = black_pens + blue_pens + green_pens\n    return total_pens\n\nans = solution()"
    ],
    "f5a6c0d6715945a695ecf6dfbb64f92e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, gill = symbols('andrew gill')\n    equation1 = Eq(andrew + gill, 62)\n    equation2 = Eq(gill - andrew, 18)\n\n    solutions = solve((equation1, equation2), (andrew, gill))\n\n    return solutions[gill]\n\nans = solution()"
    ],
    "f6df3f11753e4cdc80268ae5f06e3ade": [
        "def solution():\n    total_volume = 20 + 30\n    juice_in_first_punch = 20 * 0.35\n    juice_in_second_punch = 30 * 0.60\n    total_juice = juice_in_first_punch + juice_in_second_punch\n    concentration = (total_juice / total_volume) * 100\n    return concentration\n\nans = solution()"
    ],
    "9e3c2c6854d3426e92fab24e9a0b03a3": [
        "def solution():\n    from math import comb\n    ans = comb(4, 2)\n    return ans\n\nans = solution()"
    ],
    "718e8dda7ebd4d5fb3b2c9ce80ba10e6": [
        "def solution():\n    ans = 58 + 74\n    return ans\n\nans = solution()"
    ],
    "d01d33f6697441ebb3567f6b25f6068c": [
        "def solution():\n    return 3.8 + 59.6 - 12\n\nans = solution()"
    ],
    "cecb4b4d838e4a73937b529a2db06ceb": [
        "def solution():\n    total_cookies = 148\n    cookies_per_box = 9\n\n    boxes_needed = (total_cookies + cookies_per_box - 1) // cookies_per_box\n\n    return boxes_needed\n\nans = solution()"
    ],
    "82bde9d1e9404bf391015eb87b176f5d": [
        "def solution():\n    digits_with_7 = [7 - i for i in range(5)] + [7 + i for i in range(1, 5)]\n    digits_with_7 = [i for i in digits_with_7 if 0 <= i <= 9]\n\n    smallest_number = float('inf')  # Start with an infinitely large number\n    for digit_1 in digits_with_7:\n        for digit_2 in digits_with_7:\n            for digit_3 in digits_with_7:\n                if digit_1 != digit_2 and digit_2 != digit_3 and digit_1 != digit_3:\n                    number = digit_1 * 100 + digit_2 * 10 + digit_3\n                    if 7 in [digit_1, digit_2, digit_3] and number < smallest_number:\n                        smallest_number = number\n                        \n    return smallest_number\n\nans = solution()"
    ],
    "bae752593a0041d5ad09bba75d528d91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of badges Wendy made at the beginning\n    x = symbols('x')\n    \n    # She sold 5/7 of the badges on the first day, so 2/7 are left\n    badges_left_after_first_day = (2/7) * x\n    \n    # She sold 1/3 of the remaining badges on the second day\n    badges_left_after_second_day = (1 - 1/3) * badges_left_after_first_day\n    \n    # She then made an additional 354 badges\n    total_badges_after_making_more = badges_left_after_second_day + 354\n    \n    # In the end, she had 3 times the number of badges she made at first\n    equation = Eq(total_badges_after_making_more, 3 * x)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "423cce1700d94adeb333d25876d65a23": [
        "def solution():\n    # Since it's a knockout tournament, in every round, half of the players get eliminated.\n    # There are 4 players, thus the sequence of games will be 4 -> 2 -> 1.\n    # When there is 1 player left, that's the winner.\n    # Therefore, we need a minimum of two rounds (semifinal and final) to determine the winner.\n\n    num_players = 4\n    rounds = 0\n    \n    # Continue to halve the number of players until only 1 remains\n    while num_players > 1:\n        num_players /= 2\n        rounds += 1\n\n    return rounds\n\nans = solution()"
    ],
    "107b6a756a8e456194025d4361f2a118": [
        "def solution():\n    count = 0\n    for page in range(1, 101):\n        count += str(page).count('2')\n    return count\n\nans = solution()"
    ],
    "d6ed026fb584429b8dc2a4b41d3885fe": [
        "def solution():\n    total_exhibits = 498\n    not_A = 266\n    not_B = 178\n\n    both_A_and_B = (total_exhibits - not_A) + (total_exhibits - not_B) - total_exhibits\n\n    return both_A_and_B\n\nans = solution()"
    ],
    "3a8d9debec2f4fc3a575d0ea16005083": [
        "def solution():\n    # Mapping Letter to Number\n    letter_to_number = {\n        'A': 0, 'D': 1, 'E': 2, 'G': 3, \n        'I': 4, 'L': 5, 'N': 6, 'O': 7,\n        'R': 8, 'T': 9, 'V': 10, 'W': 11\n    }\n    \n    # Password for \"Angel\"\n    angel_numbers = [letter_to_number[letter] for letter in \"ANGEL\"]\n    \n    # Andy tries with the numbers for \"Devil\"\n    devil_numbers = [letter_to_number[letter] for letter in \"DEVIL\"]\n    \n    # Convert the lists to single numbers without leading zeros\n    angel_password = int(''.join(map(str, angel_numbers)))\n    devil_try = int(''.join(map(str, devil_numbers)))\n    \n    # Check if Andy's attempt is correct\n    is_correct = angel_password == devil_try\n\n    return (is_correct, devil_try)\n\nans = solution()"
    ],
    "10a4f68009184b2f9611a45a014abd56": [
        "def solution():\n    noon_temp = 4\n    drop_temp = 10\n    midnight_temp = noon_temp - drop_temp\n    return midnight_temp\n\nans = solution()"
    ],
    "868f76b6c8934a7885d5e14c1c5de743": [
        "def solution():\n    # The worst case scenario is picking all balls of one color first, then all balls of second color.\n    # After that, the next ball that is picked will guarantee that we have at least one ball of each color.\n    # Therefore, we take the maximum amount of balls of one color and the maximum amount of balls of the \n    # second color and add 1 to guarantee the third color.\n    blue_balls = 8\n    red_balls = 10\n    green_balls = 13\n    \n    # We can pick in worst case all red and green balls first which are the most in quantity\n    balls_needed = red_balls + green_balls + 1 # +1 to guarantee the third color\n\n    return balls_needed\n\nans = solution()"
    ],
    "1ebfe4d3586444b28bbdf27520a1abab": [
        "def solution():\n    for num in range(200, 301):\n        if num % 6 == 3 and num % 7 == 3 and num % 11 == 5:\n            return num\n\nans = solution()"
    ],
    "27181cdb9b38443f964d9820ad8f0b75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    skirt, blouse = symbols('skirt blouse')\n\n    equation1 = Eq(3 * skirt + 2 * blouse, 317)\n    equation2 = Eq(skirt, blouse + 14)\n    \n    solutions = solve((equation1, equation2), (skirt, blouse))\n\n    return solutions[blouse]\n\nans = solution()"
    ],
    "82a919f9eba447aab7c5e2b20dd75061": [
        "def solution():\n    # Given that 8A - 3B is a multiple of 3, implies that (8A - 3B) mod 3 = 0\n    # This means that 8A mod 3 = 3B mod 3\n    # Since A and B are primes, and the only even prime is 2, we can ignore even numbers for A (other than 2)\n    # We can check all prime numbers for A, and find the corresponding B such that the condition holds\n    from sympy import primerange\n    \n    for A in primerange(1, 100):  # we can use an arbitrary range to check for prime A\n        if (8 * A) % 3 == 0:  # Check if 8A is divisible by 3\n            return A  # As B is also a prime number, 3B is only divisible by 3 when B=3 which doesn't change 8A mod 3 = 0 condition, so we only need to find A\n\nans = solution()"
    ],
    "6ca3b864aba0479d81b5e2d80e516196": [
        "def solution():\n    # In the first year, the value of the house increased by 10%,\n    # and the value in the last year was £110,000.\n    # Let's calculate the original price of the house.\n    original_price = 110000 / 1.10\n    \n    # In the second year, the house loses 10% of its value.\n    value_after_slump = original_price * (1 - 0.10)\n    \n    # Calculate the profit or loss by subtracting the original price from the value after slump.\n    profit_loss = value_after_slump - original_price\n    \n    return profit_loss\n\nans = solution()"
    ],
    "d7e151832f704caeb06c6674341c5d53": [
        "def solution():\n    total_pupils = 235 + 567\n    pupils_after_transfer_each_room = total_pupils // 2\n    return pupils_after_transfer_each_room\n\nans = solution()"
    ],
    "ea25f69560044c42a5dc8b686d83b90f": [
        "def solution():\n    from math import factorial\n    from sympy import divisors\n\n    # 1*2*3*4*5*6 can be written as factorial(6)\n    multiple_of_6fact = factorial(6)\n\n    # 1*2*3*4*5*6*7*8 can be written as factorial(8)\n    factor_of_8fact = factorial(8)\n\n    # Getting all divisors of factorial(8)\n    divisors_of_8fact = divisors(factor_of_8fact)\n\n    # Count all divisors which are multiples of factorial(6)\n    count = sum(1 for divisor in divisors_of_8fact if divisor % multiple_of_6fact == 0)\n\n    return count\n\nans = solution()"
    ],
    "3ad5f155b2244cbcb39a2d0959b08316": [
        "def solution():\n    # If you want to maximize the number of different positive integers that sum to 60,\n    # you would start with the smallest positive integer 1 and keep adding the next\n    # smallest integer that hasn't been used yet.\n    # This forms a sequence like 1, 2, 3, 4, ... until the sum reaches 60.\n\n    total_sum = 60\n    current_sum = 0\n    max_integers = 0\n\n    # Start with the smallest positive integer and keep adding the next integer\n    for i in range(1, total_sum+1):\n        current_sum += i\n        max_integers += 1\n        # If the next number is going to exceed the total sum, stop\n        if current_sum + i + 1 > total_sum:\n            break\n\n    return max_integers\n\nans = solution()"
    ],
    "e9e57ebfab514d86a5ed141c3c353815": [
        "from math import factorial\n\ndef solution():\n    rose_perms = factorial(3)\n    jasmine_perms = factorial(4)\n    # Daisy being a single flower has only one way of placement.\n\n    # Now, consider the groups of flowers as items: 3 (roses varieties) + 1 (jasmine varieties) + 1 (single daisy) = 5\n    group_perms = factorial(5)\n\n    total_ways = rose_perms * jasmine_perms * group_perms\n    return total_ways\n\nans = solution()"
    ],
    "46df85e92a924b12ac1d505c93cd885c": [
        "def solution():\n    pies = 0\n    while True:\n        if (pies - 3) % 5 == 0 and (pies + 2) % 6 == 0:\n            return pies\n        pies += 1\n\nans = solution()"
    ],
    "a37a54e4fb8445b4bc0772fa3a12e2ff": [
        "def solution():\n    original_price = 125\n    discount_percent = 20\n    discount_amount = (discount_percent / 100) * original_price\n    new_price = original_price - discount_amount\n    \n    return new_price\n\nans = solution()"
    ],
    "8b18733b1be0419dba54b2eb00a90c19": [
        "def solution():\n    ans = 12321 // 9\n    return ans\n\nans = solution()"
    ],
    "2b8380c480924871bff4133ed7e6b4db": [
        "def solution():\n    leak_rate_per_min = 20  # in ml\n    minutes_per_hour = 60\n    ml_to_liters = 1000  # 1000 ml in 1 liter\n\n    leaked_volume_per_hour_ml = leak_rate_per_min * minutes_per_hour\n    leaked_volume_per_hour_liters = leaked_volume_per_hour_ml / ml_to_liters\n\n    return leaked_volume_per_hour_liters\n\nans = solution()"
    ],
    "07de75394b5841918be5feca68429eb9": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('0123456789', 3):\n        s, e, r = perm\n        if s != '0':  # 'SEE' cannot start with 0\n            see = int(s + e + e)\n            eer = int(e + e + r)\n            if see + see == eer:\n                return see\n\nans = solution()"
    ],
    "9161eca90a924c55a4b89f523ab076ad": [
        "def solution():\n    for age in range(1, 100):  # Assuming age is less than 100 for practical reasons\n        if (age % 2 == 1 and\n            age % 3 == 1 and\n            age % 4 == 1 and\n            age % 6 == 1 and\n            age % 7 == 0):\n            return age\n\nans = solution()"
    ],
    "7c7eeadfbdca4d60ababafecea8a2a6a": [
        "def solution():\n    james_height = 120\n    difference = 30\n    mark_height = james_height + difference\n    return mark_height\n\nans = solution()"
    ],
    "681ad7cd00094b8b958f2990dc828dc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, honeydew = symbols('watermelon honeydew')\n\n    equation1 = Eq(2 * watermelon + 3 * honeydew, 48)\n    equation2 = Eq(honeydew, 2 * watermelon)\n\n    solutions = solve((equation1, equation2), (watermelon, honeydew))\n\n    return solutions[watermelon]\n\nans = solution()"
    ],
    "5a18e751149d448d874661947903bc87": [
        "def solution():\n    # There are 3 colors and she needs to ensure she has at least one pair of the same color.\n    # According to the Pigeonhole Principle, to ensure at least one pair of the same color,\n    # Cindy should get one more sock than three times the number of colors (since after 3 socks,\n    # she could still have one of each color).\n\n    colors = 3\n    socks_for_a_pair = colors + 1\n\n    return socks_for_a_pair\n\nans = solution()"
    ],
    "0b55e6a4e6c14d308cec4f22d3a63d1a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dominic, hannah, abdul = symbols('dominic hannah abdul')\n\n    equation1 = Eq(dominic, 2 * hannah)\n    equation2 = Eq(abdul, 3 * dominic)\n    equation3 = Eq(dominic + hannah + abdul, 63)\n\n    solutions = solve((equation1, equation2, equation3), (dominic, hannah, abdul))\n\n    return solutions[abdul]\n\nans = solution()"
    ],
    "08b4fb633ec84894aa5ff3a4608e3b6b": [
        "def solution():\n    # Let x be the number of pieces of paper cut into three parts.\n    # Initially, there are 10 pieces of paper.\n    # Each piece cut into three parts results in an additional 2 pieces (since one piece => three pieces).\n    # After cutting, there are 16 pieces of paper.\n    # So the equation is: 10 + 2 * x = 16\n    \n    # Solve for x\n    x = (16 - 10) // 2\n    \n    return x\n\nans = solution()"
    ],
    "fb238c080afd420c908c028ca9054101": [
        "def solution():\n    # You take one red apple, one green apple, and the worst-case scenario to ensure you\n    # have two apples of the same color is to pick another apple of either color.\n    # Therefore, you need to pick 3 apples to guarantee you have two of the same color.\n    \n    return 3\n\nans = solution()"
    ],
    "d5f9287c340749138bbce5897de4eb98": [
        "def solution():\n    number = 20000 - 20\n    return number\n\nans = solution()"
    ],
    "4bcc90775cce4036a6d6e2de902d15a1": [
        "def solution():\n    scores = [7, 8, 10, 9, 8, 8, 10, 7, 8, 9]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "ff03e3e004084b4592ed56380ac4b86f": [
        "def solution():\n    return 6.3 + 8.7 + 9.6 - 2.6\n\nans = solution()"
    ],
    "4cd5315568c9436fb37d857619aade0b": [
        "def solution():\n    water_per_pail = 4\n    num_pails = 4\n    water_left = 7\n\n    original_volume = (water_per_pail * num_pails) + water_left\n    return original_volume\n\nans = solution()"
    ],
    "eda44d14e12244e89aedc633ee8617cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y, z = symbols('x y z')\n    eq = Eq(x**20 * y**15 * z**5, 243)\n    solutions = solve(eq, (x, y, z))\n\n    # 243 can be expressed as 3^5. Since the equation is a multiplication \n    # of powers, we find the individual powers of x, y, and z by taking\n    # the fifth root of 243 which gives us 3. \n    # Then, x^20 = 3^4, y^15 = 3^3, and z^5 = 3^1.\n\n    # We now want to calculate x^8 * y^6 * z^2. To do this we\n    # use the relation x^8 = (x^20)^(8/20) = 3^(4*(8/20)) = 3^1.6,\n    # y^6 = (y^15)^(6/15) = 3^(3*(6/15)) = 3^1.2, and z^2 = (z^5)^(2/5) = 3^(1*(2/5)) = 3^0.4.\n    # When multiplied together, we have 3^(1.6+1.2+0.4) = 3^3.2 = 3^3 * 3^0.2 = 27 * 3^(1/5)\n\n    ans = 3**3.2\n\n    return ans\n\nans = solution()"
    ],
    "e712313031b94278a2ec2b83580cf2ff": [
        "def solution():\n    richard_age = 12\n    adam_age = 2 * richard_age\n    will_age = (2/3) * adam_age\n\n    total_age = richard_age + adam_age + will_age\n\n    return total_age\n\nans = solution()"
    ],
    "3eea1e7f99c34f13ba952490fd0e0223": [
        "def solution():\n    # Calculating the sum by pairwise subtraction\n    # the difference between the pairs is always 1 and will lead to -1 in each case\n    # since the pattern starts with subtraction, each pair reduces to -1 (even - odd = -1)\n    # we have 46 // 2 pairs since the numbers go from 1 to 46\n    total_pairs = 46 // 2\n\n    # Each pair contributes -1 to the sum\n    ans = total_pairs * (-1)\n\n    return ans\n\nans = solution()"
    ],
    "21dff506ecab4714a6d9d8ea21b7f020": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    c = symbols('c')\n    equation = Eq(5 * (6 * c - 1), -35)\n    solutions = solve(equation, c)\n    \n    return solutions[0]  # Since it's a linear equation, only one solution is expected\n\nans = solution()"
    ],
    "899f31b2d9c747e09ae28a17d893d246": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, pencil_box = symbols('book pencil_box')\n\n    # Two equations based on the given information\n    equation1 = Eq(2 * book + 3 * pencil_box, 42)\n    equation2 = Eq(2 * book + 6 * pencil_box, 60)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (book, pencil_box))\n\n    return solutions[pencil_box]\n\nans = solution()"
    ],
    "6db678cd280949ad907c4ce941d65604": [
        "def solution():\n    def trailing_non_zero(n):\n        # Initialize product as 1\n        product = 1\n        \n        # Loop through numbers from 1 to n\n        for i in range(1, n + 1):\n            # Multiply product by the number\n            product = product * i\n            \n            # While the product's last digit is 0, divide by 10\n            while product % 10 == 0:\n                product = product // 10\n                \n            # Take modulo with 100000 to prevent large numbers which may cause computation lag\n            product = product % 100000\n            \n        # Return the last non-zero digit of the product\n        return product % 10\n    \n    ans = trailing_non_zero(2010)\n    return ans\n\nans = solution()"
    ],
    "0496270f31e94bba8f1297dbcc51925c": [
        "def solution():\n    total_numbers = sum([2 * i for i in range(1, 9)])\n    mid = total_numbers // 2\n    if total_numbers % 2 != 0:\n        mid += 1\n    \n    accumulator = 0\n    for current_num in range(1, 9):\n        accumulator += current_num * 2\n        if accumulator >= mid:\n            return current_num\n\nans = solution()"
    ],
    "b2e6579890a9418cb8be3cdb1db7fdab": [
        "def solution():\n    total_height_for_six = 6 * 150  # Total height for all six players\n    average_height_for_four = 150 - 2  # Average height for four of them\n    total_height_for_four = 4 * average_height_for_four  # Total height for those four players\n    total_height_for_two = total_height_for_six - total_height_for_four  # Total height for the other two players\n    average_height_for_two = total_height_for_two / 2  # Average height for the other two players\n    return average_height_for_two\n\nans = solution()"
    ],
    "f38a4b59c2e540cf9e41096b829c82b2": [
        "from math import comb\n\ndef solution():\n    num_participants = 10\n    num_handshakes = comb(num_participants, 2)\n    return num_handshakes\n\nans = solution()"
    ],
    "6c0112d5b52d43b7b55287abd3ead152": [
        "def solution():\n    total_road_length = 500\n    daily_paving_length = 50\n\n    num_days = total_road_length / daily_paving_length\n\n    return int(num_days)\n\nans = solution()"
    ],
    "367be73f540346348ec1e229247db265": [
        "def solution():\n    x = 42\n    y = 1\n\n    for factor in range(2, 43):\n        if 42 % factor == 0:\n            while (42 * y) % (factor ** 2) == 0:\n                y *= factor\n\n    ans = x + y\n    return ans\n\nans = solution()"
    ],
    "69408e55202e417bbe0a5c4b1edfebd4": [
        "def solution():\n    cattles = 8\n    days = 4\n    fodder_per_day_per_cattle = 10\n    \n    total_fodder = cattles * days * fodder_per_day_per_cattle\n    \n    return total_fodder\n\nans = solution()"
    ],
    "a8613b9533934b1dade8db288f570450": [
        "def solution():\n    dog_to_rabbit = 8\n    rabbit_to_chicken = 2\n    dog_to_chicken = dog_to_rabbit * rabbit_to_chicken\n    return dog_to_chicken\n\nans = solution()"
    ],
    "d893d7be89fe4ab18afad5ace001607b": [
        "def solution():\n    # Let the total number of marbles Larry had initially be x\n    # After giving away (5/12)x to Mark and 30 to Nate and 26 to Ollie,\n    # Larry is left with 35 marbles. Thus, the equation can be written as:\n    # x - (5/12)x - 30 - 26 = 35\n    # Simplifying it we get (7/12)x = 91\n    # So x = 91 * (12/7)\n    \n    x = 91 * (12/7)\n    \n    return int(x)\n\nans = solution()"
    ],
    "8fa4370c176d41b39b6866f139a48dde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jess, jill = symbols('jess jill')\n    \n    # Jill has six sweets for every five sweets Jess has.\n    equation1 = Eq(jill, 6/5 * jess)\n    \n    # Jill gives eight sweets to Jess.\n    # Now, Jill has four sweets for every seven sweets Jess has.\n    equation2 = Eq(jill - 8, 4/7 * (jess + 8))\n    \n    # solving the system of equations\n    solutions = solve((equation1, equation2), (jess, jill))\n    \n    # Calculate the total number of sweets\n    total_sweets = solutions[jess] + solutions[jill]\n    \n    return total_sweets\n\nans = solution()"
    ],
    "9a8296da36564b8aa1d283b8fa70dd00": [
        "def solution():\n    total_weight = 600\n    sugar_concentration = 0.22\n    sugar_weight = total_weight * sugar_concentration\n    return sugar_weight\n\nans = solution()"
    ],
    "62ddaa1b93c44e7f85b309208c5f28e6": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 100):\n        total_sum += sum(int(digit) for digit in str(i))\n    return total_sum\n\nans = solution()"
    ],
    "448302e8cd5b46e0b31999de01e48592": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the cost of one pie, y be the number of cakes sold\n    x, y = symbols('x y')\n    \n    # Equation based on the ratio of money collected (pies: 15x, cakes: 7x)\n    equation1 = Eq(15*x + 7*(x+13), 1848)\n    \n    # Solve equation1 for x\n    x_value = solve(equation1, x)[0]\n\n    # Equation based on the ratio of the number of pies to cakes sold (pies: 4y, cakes: y)\n    equation2 = Eq(4*y*x_value + y*(x_value+13), 1848)\n    \n    # Solve equation2 for y\n    y_value = solve(equation2, y)[0]\n\n    return y_value\n\nans = solution()"
    ],
    "dbf1101a135f495c9943bc0f68400a5b": [
        "def solution():\n    total_money = 4.44\n    portion_given = total_money / 4\n    return portion_given\n\nans = solution()"
    ],
    "4779c64adc47418a896e55784a17e2cb": [
        "def solution():\n    for number in range(10000, 100000):\n        if int('1' + str(number)) * 3 == int(str(number) + '1'):\n            return number\n\nans = solution()"
    ],
    "ee0aa5d3849d485c9f2f52e25183c07d": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Fred's current age in years and months\n    age_years = 38\n    age_months = 6\n\n    # Current date\n    current_date = datetime.now()\n\n    # Calculate the year and month of birth\n    birth_year = current_date.year - age_years\n    birth_month = current_date.month - age_months\n\n    if birth_month <= 0:\n        birth_month += 12\n        birth_year -= 1\n\n    # Fred's birth year\n    return birth_year\n\nans = solution()"
    ],
    "547a49466468412f8777a85ec725c904": [
        "def solution():\n    original_length = 12.6\n    cut_length = 3.75\n    remaining_length = original_length - cut_length\n    return remaining_length\n\nans = solution()"
    ],
    "532079a764c14bf09bd373b4c7fc5f7c": [
        "def solution():\n    ans = sum(i**4 for i in range(1, 20))\n    return ans\n\nans = solution()"
    ],
    "750dbb830f534f51927d1d1d3c9f04f8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define Hanson's original amount of money as a variable\n    original_money = symbols('original_money')\n\n    # After spending 1/4 of his money and additional $3, this is what remains\n    money_after_CDs = original_money - (original_money / 4) - 3\n\n    # After spending 3/5 of the remaining money and additional $6, Hanson is left with $24\n    money_left = money_after_CDs - (3/5) * money_after_CDs - 6\n\n    # Set up the equation based on the information given\n    equation = Eq(money_left, 24)\n\n    # Solve the equation for the original amount of money Hanson had\n    solution = solve(equation, original_money)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7862ebf4ebee413a94b72306448a771f": [
        "from itertools import permutations\n\ndef solution():\n    digits = [0, 1, 3, 6, 8, 9]\n    count = 0\n    \n    for perm in permutations(digits, 4):\n        if perm[3] % 2 == 0 and perm[0] != 0:  # Last digit should be even and first digit should not be 0\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "9498ad8ff09a450b88310639f2e5e3b4": [
        "def solution():\n    beads = []\n    for i in range(40, 81):\n        if i % 4 == 0 and i % 7 == 0:\n            beads.append(i)\n    ans = beads[0]\n    return ans\n\nans = solution()"
    ],
    "6e73517ab45147c1aa9d1e79e8150821": [
        "def solution():\n    return 345 * 76\n\nans = solution()"
    ],
    "07ad8fe80a0748e18cb311667f70b91b": [
        "def solution():\n    # Weiling walks 72 m/min and Qiqi walks 60 m/min\n    speed_qiqi = 60\n    speed_weiling = 72\n\n    # Weiling starts 2 minutes later than Qiqi\n    start_diff = 2\n\n    # Weiling arrives 4 minutes earlier than Qiqi\n    arrive_diff = 4\n\n    # Since Weiling arrives 4 mins earlier than Qiqi, even starting 2 mins later,\n    # essentially, Weiling took 4 + 2 = 6 mins less than Qiqi to reach the school.\n\n    # Let the time taken by Qiqi be t minutes.\n    # Then, time taken by Weiling will be t - 6.\n    # Distance travelled by both is the same, hence:\n    # speed_qiqi * t = speed_weiling * (t - 6)\n    # 60 * t = 72 * (t - 6)\n\n    # Solving for t\n    t = (speed_weiling * start_diff) / (speed_weiling - speed_qiqi)\n\n    # Now find the distance using Qiqi's speed and time.\n    distance = speed_qiqi * t\n\n    return distance\n\nans = solution()"
    ],
    "20b70bb054c14b73a8185f937a535c5e": [
        "def solution():\n    # The units digit of a number in the form of 9^k repeats every 2 powers.\n    # 9^1 has a units digit of 9\n    # 9^2 has a units digit of 1\n    # Thus, we only need to consider the units digit of 9^2015 and 9^2016.\n    units_digit_2015 = 9  # since 2015 is odd\n    units_digit_2016 = 1  # since 2016 is even\n\n    # Adding the two units digits\n    total_units_digit = (units_digit_2015 + units_digit_2016) % 10  # Modulus to get the units digit\n\n    return total_units_digit\n\nans = solution()"
    ],
    "16b50c758e404b52b2f26d63ad9b63f4": [
        "from math import factorial\n\ndef solution():\n    men_factorial = factorial(5)\n    women_factorial = factorial(4)  # One dummy man included to prevent women from standing next to each other\n    arrangements = men_factorial * women_factorial // factorial(1)  # Dividing by the dummy man's factorial\n\n    return arrangements\n\nans = solution()"
    ],
    "546dbea8b6cf4aeb804964a448179516": [
        "def solution():\n    from math import gcd\n    \n    length1 = 45\n    length2 = 30\n\n    longest_piece_length = gcd(length1, length2)\n\n    return longest_piece_length\n\nans = solution()"
    ],
    "c69955d7ca0b48e1af24e735819ad11b": [
        "def solution():\n    marc_time_minutes = (11 * 60 + 50) - 15  # Convert Marc's current time to minutes and subtract the slow\n    george_time_minutes = marc_time_minutes + 7  # Correct the time for George's fast watch\n    half_hour_later = george_time_minutes + 30  # Add half an hour in minutes\n\n    # Convert minutes back to hours and minutes\n    hours = half_hour_later // 60\n    minutes = half_hour_later % 60\n    \n    # Format the time for George's watch\n    time = \"{:02d}.{:02d}\".format(hours, minutes)\n    \n    return time\n\nans = solution()"
    ],
    "e33cf79397014b3fbccf3f13532fa8db": [
        "def solution():\n    n = 525 / 25\n    return n\n\nans = solution()"
    ],
    "76e017050d7b464cbea52dfef7557a80": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    income = symbols('income')\n\n    # Tax for the first $30000\n    tax_first_part = T / 100 * 30000\n\n    # Tax for the income above $30000\n    tax_rest = ((T + 3) / 100) * (income - 30000)\n\n    # Total tax paid\n    total_tax = tax_first_part + tax_rest\n\n    # Equation based on the condition that the tax paid is (T+1)% of his annual income\n    equation = Eq(total_tax, (T + 1) / 100 * income)\n\n    # Solve the system of equations\n    solutions = solve((equation, income > 30000), (T, income))\n\n    return solutions[income]\n\nans = solution()"
    ],
    "6fe28da5b56043b6b8b677c81b5c9f70": [
        "def solution():\n    return 0.45 * 540\n\nans = solution()"
    ],
    "da2ec31a074d412a8b7a5644870d32d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    h = symbols('h')\n    equation = Eq(2 * h, 25 + h)\n    solution = solve(equation, h)\n\n    return solution[0]\n\nans = solution()"
    ],
    "1c892f5e4d484f6c8248b19f022e669c": [
        "def solution():\n    total_distance = 31\n    jump_up = 3\n    fall_down = 2 * 3  # Fall down after every 3 jumps\n    distance_per_period = (3 * jump_up) - fall_down\n    \n    # Calculate number of full periods\n    periods = (total_distance - 1) // distance_per_period  # -1 so the last jump does not include a fall\n    jumps = periods * 3\n    \n    # Calculate remaining distance\n    distance_covered = periods * distance_per_period\n    remaining_distance = total_distance - distance_covered\n\n    # Calculate remaining jumps\n    while remaining_distance > 0:\n        jumps += 1\n        remaining_distance -= jump_up\n        if remaining_distance <= 0:\n            break\n        remaining_distance += fall_down // 3  # fall down after each jump, hence a third of the total fall\n\n    return jumps\n\nans = solution()"
    ],
    "9ac39bfb7cbf4ddfb0db66bd11dcd812": [
        "def solution():\n    total_questions = 30\n    correct_mark = 5\n    wrong_mark = -1\n    total_marks = 90\n\n    # Let x be the number of correct answers\n    # Then total_questions - x will be the number of wrong answers\n    # 5x + (-1) * (30 - x) = 90\n    # Solving for x gives us the number of correct questions\n    x = (total_marks + wrong_mark * total_questions) / (correct_mark - wrong_mark)\n\n    return int(x)\n\nans = solution()"
    ],
    "1c1ae09ff91145d8a4f35ba808809f50": [
        "def solution():\n    a_rate = 1 / 10\n    b_rate = 1 / 15\n    combined_rate = a_rate + b_rate\n    time_together = 1 / combined_rate\n    return time_together\n\nans = solution()"
    ],
    "ac8d3bc867394370882a34f8da7d69b5": [
        "def solution():\n    ans = 20.14 * 4.4\n    return ans\n\nans = solution()"
    ],
    "ae8336c2fd0e4359a933990f040a86cb": [
        "def solution():\n    # Calculate the worst case where we draw as many marbles as possible without getting 4 different ones\n    # This implies drawing all marbles of one color plus all but three of the other colors.\n    \n    # There are only 3 red marbles, so we take all of them to make sure we don't get 4 different colors\n    # Then we can take all 8 yellow, all 9 blue and 3 of the red to still have only three colors\n    # After that, the next marble we draw must be the fourth color.\n    \n    # 3 red + 9 blue + 8 yellow + 1 (next drawn) = 21 marbles\n    marbles_to_ensure_four = 3 + 9 + 8 + 1\n    \n    return marbles_to_ensure_four\n\nans = solution()"
    ],
    "353773f473b443be8571fddf31056166": [
        "def solution():\n    for x in range(1, 101):\n        if x % 3 == 0 and x % 7 == 0 and (x - 2) % 8 == 0:\n            return x\n\nans = solution()"
    ],
    "d1d60aa85e194b498d447ca654276627": [
        "def solution():\n    # Gigi's age when Gigi was 22\n    gigi_age_at_22 = 22\n\n    # Jenny's age on 15th May, 1995\n    jenny_age_in_1995 = 22\n\n    # Difference in years between 2002 and 1995\n    year_diff = 2002 - 1995\n\n    # Gigi's age in 1995, which is 7 years before 2002\n    gigi_age_in_1995 = 45 - year_diff\n\n    # Jenny's age when Gigi was 22, we subtract the age difference between Gigi and Jenny from Gigi's age at 22\n    jenny_age_when_gigi_22 = gigi_age_at_22 - (gigi_age_in_1995 - jenny_age_in_1995)\n\n    return jenny_age_when_gigi_22\n\nans = solution()"
    ],
    "de02c9bb61484cb9a5967b90fb5f9477": [
        "def solution():\n    first_term = 50\n    common_difference = 46 - 50\n    last_term = 0  # this is the smallest positive term\n\n    # Formula for the nth term of an arithmetic sequence: a_n = a_1 + (n - 1) * d\n    # We need to find the largest n such that a_n > 0\n    # 0 = 50 + (n - 1) * (-4)\n    # (n - 1) * (-4) = -50\n    # n - 1 = 50 / 4\n    # n = 50 / 4 + 1\n    # n = 12.5 + 1\n    # n = 13.5\n\n    # Since n must be an integer, we take the floor of 13.5 which is 13\n    # Therefore, there are 13 positive terms in the sequence\n    n = int(50 / 4) + 1\n\n    return n\n\nans = solution()"
    ],
    "a42c9894b8224a81a0f9cfb0f1077f4c": [
        "def solution():\n    return 1.29 * 1000\n\nans = solution()"
    ],
    "e8dbdad37fe840819b36a79b108b7bcc": [
        "def solution():\n    digits_sum = sum([int(digit) for digit in \"20190406\"])\n    A = (9 - (digits_sum % 9)) % 9\n\n    return A\n\nans = solution()"
    ],
    "9be7c60631db43ffa0e913650c7d7c6b": [
        "def solution():\n    num = 0\n    # Start checking from the smallest number that ends with 2 and is a multiple of 8\n    while True:\n        num += 8*10\n        if num % 3 == 0:\n            return num\n        if num > 8*10*12: # A reasonable upper limit to avoid infinite loop\n            break\n    return None\n\nans = solution()"
    ],
    "c8cbb563970b472ca93e23b6fef1e7dc": [
        "def solution():\n    ans = 2.5 * 7 * 4\n    return ans\n\nans = solution()"
    ],
    "853aa802a45a48ae9162dda36b40c38c": [
        "def solution():\n    for last_digit in range(10):\n        code = int(f\"451{last_digit}\")\n        if code % 3 == 0 and code % 5 != 0 and code % 9 != 0:\n            return last_digit\n\nans = solution()"
    ],
    "35ecce2854094a7ab058c59fade67c60": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime.strptime('15/05/%Y', '%d/%m/%Y')  # Assuming the year is the current year\n    duration = timedelta(weeks=3)\n    \n    end_date = start_date + duration\n    \n    return end_date.strftime('%d/%m/%Y')  # format the end_date to Day/Month/Year\n\nans = solution()"
    ],
    "78ede9ed721a48f2b277058be8293b71": [
        "def solution():\n    from math import sqrt, pow\n    \n    numerator = -6.94 - pow(9.604, 1/3)\n    denominator = sqrt(44.541 / 67) - (-377 / 6 * (5 / 3))\n    result = numerator / denominator\n    \n    ans = round(result, 3)\n    return ans\n\nans = solution()"
    ],
    "5caa8c8d8485429793ce2c81b896b975": [
        "def solution():\n    total_apples = 12\n    ways_to_divide = (total_apples - 1) // 2\n    return ways_to_divide\n\nans = solution()"
    ],
    "b9f0a0188fd34cb597620588c14138ba": [
        "def solution():\n    speed_in_still_water = 25\n    speed_of_current = 3\n    distance = 140\n\n    speed_downstream = speed_in_still_water + speed_of_current\n    time_downstream = distance / speed_downstream\n\n    return time_downstream\n\nans = solution()"
    ],
    "7c20e08dc4ee4e90b36a5ebc67c30bf0": [
        "def solution():\n    original_price = 30\n    discount_rate = 0.15\n    sale_price = original_price * (1 - discount_rate)\n    return sale_price\n\nans = solution()"
    ],
    "742450894fd54f4eb51a1b84280864eb": [
        "def solution():\n    total_cost = (5 * 0.99) + (2 * 1.98)\n    return total_cost\n\nans = solution()"
    ],
    "66967fd57a7c491592192fe52883de6a": [
        "def solution():\n    total_payment = 12.15\n    cupcake_cost = 3.25\n    total_cupcake_cost = 3 * cupcake_cost\n    total_drink_cost = total_payment - total_cupcake_cost\n    cost_per_can = total_drink_cost / 2\n    return cost_per_can\n\nans = solution()"
    ],
    "2a035f2d1ebc482193f41e5de7e3022d": [
        "def solution():\n    for correct in range(21):\n        wrong = 20 - correct\n        if correct * 5 - wrong * 2 == 51:\n            return correct\n\nans = solution()"
    ],
    "b811cf9ea3a34145953b30f3ef9f811c": [
        "def solution():\n    from math import gcd\n\n    lcm_12 = 9 * 60  # Least common multiple of first two lights (in seconds)\n\n    def lcm(x, y):\n        return x * y // gcd(x, y)\n\n    min_third_light_time = 30  # Minimum time for the third light in seconds\n    \n    # Finding the smallest time for the third light that with the LCM gives 9 minutes\n    while True:\n        if lcm(lcm_12, min_third_light_time) == lcm_12 * 3:\n            break\n        min_third_light_time += 1\n\n    return min_third_light_time\n\nans = solution()"
    ],
    "d8bd98baadc745c5867262a1f291c0c0": [
        "def solution():\n    members_A = 36 - 11\n    members_B = 36 - members_A\n    \n    pictures = members_A * members_B\n    remaining_pictures = pictures % 36\n    \n    return 36 - remaining_pictures\n\nans = solution()"
    ],
    "c48000b870b0411c9680bd0939cc2c12": [
        "def solution():\n    differences = [20-8, 31-20, 41-31, 50-41]\n    second_differences = [differences[i+1] - differences[i] for i in range(len(differences)-1)]\n    \n    last_difference = differences[-1]\n    difference_of_difference = second_differences[-1]\n    next_difference = last_difference + difference_of_difference\n    \n    last_term = 50\n    next_term = last_term + next_difference\n    \n    return next_term\n\nans = solution()"
    ],
    "933caaafe98a48ce8e5379db15d6d8f0": [
        "def solution():\n    numbers = [9, 1, 7, 4, 3, 6, 8]\n    mean_value = 5\n    total_numbers = len(numbers) + 1  # including the missing number\n    total_sum = mean_value * total_numbers\n    \n    missing_number = total_sum - sum(numbers)\n    \n    return missing_number\n\nans = solution()"
    ],
    "976b95e20676470a955c0924996ff02d": [
        "def solution():\n    # There are 3 individuals (B, C, D) who can catch the ball from A\n    first_pass_options = 3\n    \n    # After the first pass, the person who caught the ball can now pass to 2 remaining people\n    second_pass_options = 2\n    \n    # After the second pass, the last individual (who hasn't had the ball yet) must pass it back to A\n    third_pass_options = 1\n    \n    # The total number of different methods is the product of the options for each pass\n    total_methods = first_pass_options * second_pass_options * third_pass_options\n\n    return total_methods\n\nans = solution()"
    ],
    "30b87370b94246ef86d748c09d9b63b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Daniel's and Ming's current ages\n    daniel, ming = symbols('daniel ming')\n\n    # Equation 1: Daniel is four times older than Ming\n    equation1 = Eq(daniel, 4 * ming)\n\n    # Equation 2: Six years later, the sum of their ages is 62\n    equation2 = Eq((daniel + 6) + (ming + 6), 62)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (daniel, ming))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "734f5828407148b5a9e8d2668afc7458": [
        "def solution():\n    for num in range(60, 71):\n        if num % 7 == 0 and num % 9 == 0:\n            return num\n\nans = solution()"
    ],
    "26bb5c0bcd0e4e05994c3b21387ff92f": [
        "def solution():\n    weight_per_paper_g = 25\n    number_of_girls = 250\n    \n    total_weight_g = weight_per_paper_g * number_of_girls\n    total_weight_kg = total_weight_g / 1000  # Convert grams to kilograms\n    \n    return total_weight_kg\n\nans = solution()"
    ],
    "21e75f5992e7425ab944a24b2a56d916": [
        "from itertools import permutations\n\ndef solution():\n    cards = [1, 2, 8, 9]\n    max_product = 0\n\n    for perm in permutations(cards):\n        num1 = perm[0] * 10 + perm[1]\n        num2 = perm[2] * 10 + perm[3]\n        product = num1 * num2\n        max_product = max(max_product, product)\n\n    return max_product\n\nans = solution()"
    ],
    "75d9330dae2941ad9484a74e2379bd60": [
        "def solution():\n    # Given data\n    length_of_line = 3      # meters\n    first_bridge_length = 9 # meters\n    time_first_bridge = 8   # seconds\n    time_second_bridge = 10 # seconds\n    \n    # Calculate the speed of the line using the first bridge information\n    # The entire line has crossed when its last person has stepped off the bridge\n    # So the extra distance the last person travels equals the line's length\n    speed = (first_bridge_length + length_of_line) / time_first_bridge\n\n    # Calculate the length of the second bridge\n    # Using the speed and the time it takes the last person to cross the second bridge\n    second_bridge_length = (speed * time_second_bridge) - length_of_line\n\n    return second_bridge_length\n\nans = solution()"
    ],
    "5127cf4b12c348eeaec2b82e72f95ae5": [
        "def solution():\n    sum_even_squares = sum((2*i)**2 for i in range(1, 501))\n    sum_odd_squares = sum((2*i-2)**2 for i in range(1, 501))\n\n    return sum_even_squares - sum_odd_squares\n\nans = solution()"
    ],
    "ac7f27e33493434bb1574b2c4a2d01c2": [
        "def solution():\n    import math\n    \n    # Since the numbers are consecutive even numbers, their product is 2688\n    # we can estimate a starting point by taking the cubic root of 2688\n    # because for consecutive numbers n*(n+2)*(n+4)≈n^3 for large n\n    cube_root = int(math.ceil(2688 ** (1/3)))\n\n    # We know that the cube root will not be the exact number since it's not a perfect cube,\n    # we can find the approximation and then adjust if it's odd\n    if cube_root % 2 != 0:\n        cube_root -= 1  # adjust to the closest smaller even number if it is odd\n    \n    # Now we check and find the exact even numbers by decreasing the search space\n    for n in range(cube_root, 0, -2):  # decrement by 2 to keep checking even numbers\n        if 2688 % n == 0:\n            # Found the smallest even factor\n            second_number = n\n            # Calculate the other two even numbers based on the smallest\n            first_number = second_number - 2\n            third_number = second_number + 2\n            # Verify if indeed their product is 2688\n            if first_number * second_number * third_number == 2688:\n                return third_number  # the largest one\n\nans = solution()"
    ],
    "8ac10a7ccfe44215b75cf06a67533c06": [
        "def solution():\n    start_time = (11 * 60) + 55  # Convert start time (11:55 am) to minutes\n    end_time = (13 * 60) + 40    # Convert end time (1:40 pm) to minutes\n    duration = end_time - start_time  # Calculate the duration in minutes\n    return duration\n\nans = solution()"
    ],
    "d33e99d3f1614fde81acb0bcf2ddf29a": [
        "def solution():\n    people_left = 11\n    people_right = 7\n\n    # Multiplying by 2 since there are 2 rows and adding Crystal to the count\n    total_people = (people_left + people_right + 1) * 2\n\n    return total_people\n\nans = solution()"
    ],
    "699943037ddb46d287bd76abad9b6da4": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 3 == 0 and num % 11 == 0:\n            if (num - 1) % 2 == 0 and (num - 1) % 7 == 0:\n                return num\n\nans = solution()"
    ],
    "fc44184a4b6a4decbe05a477d57fc9ed": [
        "def solution():\n    # Total cupcakes\n    total_cupcakes = 10\n    # Initialize count of ways to 0\n    count = 0\n    # Use 'group1' to represent the number of cupcakes in the first group\n    for group1 in range(1, total_cupcakes):\n        group2 = total_cupcakes - group1  # The rest of the cupcakes go to the second group\n        if group1 < group2:  # Ensure the groups have different numbers of cupcakes\n            count += 1\n    return count\n\nans = solution()"
    ],
    "35cc2d1e692e433a9edb2ca57099c016": [
        "def solution():\n    n = 224\n    factors = set()\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    return len(factors)\n\nans = solution()"
    ],
    "e6b14f6552294cf9bfe42605e064c5f3": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_time = datetime.strptime('08:30', '%H:%M')\n    lesson_duration = timedelta(minutes=45)\n    moving_period = timedelta(minutes=5)\n\n    total_time = (lesson_duration + moving_period) * 2 + lesson_duration\n    break_start_time = start_time + total_time\n\n    return break_start_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "889a39026ec84d3e84f3871155b05e7a": [
        "def solution():\n    for a in range(1, 10):  # hundreds digit\n        for b in range(0, 10):  # tens digit\n            for c in range(0, 10):  # ones digit\n                if (b == a + 5) and (c == b - 2) and (b == (a + b + c) / 2):\n                    return a * 100 + b * 10 + c\n\nans = solution()"
    ],
    "566f34b38ba04e8f88aa14c24a1773e4": [
        "def solution():\n    from math import gcd\n    \n    num1, num2, num3 = 28, 84, 126\n    greatest_divisor = gcd(gcd(num1, num2), num3)\n    \n    return greatest_divisor\n\nans = solution()"
    ],
    "c81f5752a9034395af391ec11de7b293": [
        "def solution():\n    total_eggs = 65\n    eggs_per_box = 6\n    full_boxes = total_eggs // eggs_per_box\n\n    return full_boxes\n\nans = solution()"
    ],
    "ea7852a3c82f44b998bc40a543ec62cd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    fives, tens = symbols('fives tens')\n\n    # Total count of notes\n    total_notes_eq = Eq(fives + tens, 57)\n\n    # Spent 60% of the $10 notes and 25% of the $5 notes\n    spent_tens_eq = Eq(tens * 0.6, tens - fives*2)\n    spent_fives_eq = Eq(fives * 0.25, fives - tens/2)\n\n    # Solve the system of equations\n    solutions = solve((total_notes_eq, spent_tens_eq, spent_fives_eq), (fives, tens))\n\n    # Calculate the cost of the bag\n    cost = solutions[fives] * 5 * 0.25 + solutions[tens] * 10 * 0.6\n    \n    return cost\n\nans = solution()"
    ],
    "84ff7543ed7e4cf78a5bf1c71f95827d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    troy, adam = symbols('troy adam')\n\n    # Troy initially has 5 times the number of coins as Adam\n    equation1 = Eq(troy, 5 * adam)\n    # After Adam took 24 more coins, he had 1/3 as many as Troy\n    equation2 = Eq(adam + 24, troy / 3)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (troy, adam))\n\n    # Total coins they had at first\n    total_coins = solutions[troy] + solutions[adam]\n\n    return total_coins\n\nans = solution()"
    ],
    "dc51c8ed80f14b4fb5ff275cbe1ab05c": [
        "def solution():\n    neha_won = 12018\n    jasmine_won = 309\n    total_won = neha_won + jasmine_won\n    return total_won\n\nans = solution()"
    ],
    "d44b505766094322ba1d157aa0c69927": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    wands, cards = symbols('wands cards')\n    equation1 = Eq(wands + cards, 69)\n    equation2 = Eq(wands, cards + 17)\n    \n    solutions = solve((equation1, equation2), (wands, cards))\n    \n    return solutions[wands]\n\nans = solution()"
    ],
    "a7318cfeb5c6465bbe4c97e1828d60ef": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_money = symbols('initial_money')\n\n    # After spending 1/4 of his money and additional $3 on CDs\n    remaining_after_CDs = initial_money - (initial_money / 4 + 3)\n\n    # Then he spends 3/5 of the remaining money and an additional $6 on batteries\n    remaining_after_batteries = remaining_after_CDs - (3/5 * remaining_after_CDs + 6)\n\n    # He is then left with $24\n    equation = Eq(remaining_after_batteries, 24)\n\n    solution = solve(equation, initial_money)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8fc6e7b3c33b401c8a75af3f7886a7a5": [
        "def solution():\n    count = 0\n    for i in range(1000, 10000):\n        product = 1\n        for digit in str(i):\n            product *= int(digit)\n        if product == 8:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a3b714dd4cfa4127838d98a3fa713af3": [
        "def solution():\n    # Count the number of three-digit even numbers possible\n    count = 0\n    \n    # Iterate through all three-digit numbers\n    for number in range(100, 1000):\n        # Check if the number is even and the sum of its digits equal to 8\n        if number % 2 == 0:\n            digits = [int(i) for i in str(number)]\n            if sum(digits) == 8 and len(set(digits)) == len(digits):\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "486b933d7136464ebf2a797cb5af1ae2": [
        "def solution():\n    # He can draw all blue and white beads without getting 5 green beads.\n    blue_beads = 5\n    white_beads = 6\n    # To ensure he gets 5 green beads, he will need to draw them out after all blue and white beads.\n    green_beads_needed = 5\n\n    # The worst case is drawing all blue and white beads first, then drawing green beads.\n    worst_case_beads = blue_beads + white_beads + green_beads_needed\n\n    return worst_case_beads\n\nans = solution()"
    ],
    "4f279967112d4e8291b26b30696f3212": [
        "def solution():\n    ans = (18 / 16) * (16 * 15) / (5 * 3)\n    return ans\n\nans = solution()"
    ],
    "2ccb49f86adf445b9ee2629356df536a": [
        "def solution():\n    for i in range(6, 55):\n        if i % 5 == 0 and (i + 1) % 7 == 0:\n            return i\n\nans = solution()"
    ],
    "57bbf7c2710645ddb501b125a1011400": [
        "def solution():\n    missing_number = (1/4 * 16) / (1/2)\n    return missing_number\n\nans = solution()"
    ],
    "a671b7c0ccab40f5bd855f933009765d": [
        "def solution():\n    # Calculate number of games in group stage\n    games_per_group = sum(range(4))  # Single round-robin for 4 people\n    group_stage_games = 4 * games_per_group\n    \n    # Knockout round games\n    knockout_stage_games = 7  # From top 8 to winner, 7 games are played\n    \n    # Total number of games\n    total_games = group_stage_games + knockout_stage_games\n    \n    return total_games\n\nans = solution()"
    ],
    "88fc6c95b74d4d2fac199a6028657150": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of days B takes to complete the job alone\n    x = symbols('x')\n    \n    # A is twice as good a workman as B, so A takes x/2 days to complete the job alone\n    # A takes 12 days less than B to finish the job alone, so x/2 = x - 12\n    equation = Eq(x/2, x - 12)\n    \n    # Solve for x\n    days_b_alone = solve(equation, x)[0]\n\n    # Work rates for A and B\n    work_rate_a = 1 / (days_b_alone - 12)  # A finishes in 12 days less\n    work_rate_b = 1 / days_b_alone         # B finishes in x days\n    \n    # Combined work rate is the sum of individual work rates\n    combined_work_rate = work_rate_a + work_rate_b\n    \n    # Total time for A and B to complete the job together is 1 job divided by the combined work rate\n    total_time_ab = 1 / combined_work_rate\n\n    return total_time_ab\n\nans = solution()"
    ],
    "84324bf350214be1afe8ddd33f8aafd5": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # The number has to satisfy these conditions:\n    # x ≡ 1 (mod 5)\n    # x ≡ 1 (mod 6)\n    # x ≡ 0 (mod 11)\n    congruences = [(1, 5), (1, 6), (0, 11)]\n    ans = solve_congruence(*congruences)[0] # get the smallest solution\n    return ans\n\nans = solution()"
    ],
    "81791dec21a04fdeb351302cab2f3155": [
        "def solution():\n    first_term = 2\n    last_term = 58\n    difference = 4\n\n    num_terms = ((last_term - first_term) / difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "b69502e313be4bbcab0a850bb20d73b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # let r represent the number of candies Rachel has initially\n    # let a represent the number of candies Alice has initially\n    r, a = symbols('r a')\n    \n    # If Rachel gives Alice 10 pieces, they have the same number.\n    equation1 = Eq(r - 10, a + 10)\n    \n    # If Alice gives Rachel 10 pieces, Rachel will have 4 more than 3 times Alice's candies.\n    equation2 = Eq(r + 10, 3 * (a - 10) + 4)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (r, a))\n    \n    # Calculate their total number of candies\n    total_candies = solutions[r] + solutions[a]\n    \n    return total_candies\n\nans = solution()"
    ],
    "7196414549e64d5ca1eabc28ed2a8caa": [
        "from math import factorial\n\ndef solution():\n    total_plants = 9\n    arrange_plants = 4\n\n    ways = factorial(total_plants) // factorial(total_plants - arrange_plants)\n    \n    return ways\n\nans = solution()"
    ],
    "e103c3656a5446f89488050c094e88fb": [
        "def solution():\n    total_people = 25\n    like_bananas = 18\n    like_apples = 12\n    \n    # Using the Inclusion-Exclusion Principle\n    like_both = like_bananas + like_apples - total_people\n    \n    return like_both\n\nans = solution()"
    ],
    "bf578d94e713400d83f878025fcbf395": [
        "def solution():\n    final_stickers = 489\n    stickers_given_away = 76\n    stickers_received = 65\n\n    initial_stickers = final_stickers - stickers_received + stickers_given_away\n\n    return initial_stickers\n\nans = solution()"
    ],
    "ba7ace62e80a46f8982696e6de196708": [
        "def solution():\n    return 158 * 23\n\nans = solution()"
    ],
    "5e0d1fe1598b4b41acce8ca7d7a1255b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pineapple, apple = symbols('pineapple apple')\n\n    equation1 = Eq(pineapple, apple + 650)\n    equation2 = Eq(3 * pineapple + 4 * apple, 5450)\n\n    solutions = solve((equation1, equation2), (pineapple, apple))\n\n    return solutions[pineapple]\n\nans = solution()"
    ],
    "2174c9eb7abb4f71acfc17373e2a150d": [
        "def solution():\n    # Start checking from 2 since all conditions need a remainder of 2 with 3, 4 and 5.\n    # Due to the remainders we can skip by multiples of the LCM of 3, 4, and 5 which is 60.\n    number = 2\n    while True:\n        if (number % 3 == 2 and \n            number % 4 == 2 and \n            number % 5 == 2 and \n            number % 7 == 0):\n            return number\n        number += 60  # increment by the least common multiple of 3, 4, and 5\n\nans = solution()"
    ],
    "33fa644455fd44ab8c76126614f2a54f": [
        "def solution():\n    return 520 + (180 - 320)\n\nans = solution()"
    ],
    "91805eebef62437a8beff8b33e922e50": [
        "def solution():\n    # Since 15 and 21 are factors of the number, their least common multiple is also a factor.\n    from math import gcd\n    lcm_15_21 = (15 * 21) // gcd(15, 21)\n\n    # Generate a set of factors including 1 and the number itself.\n    factors = {1, 15, 21, lcm_15_21}\n    \n    # Find the missing factors by looking at the divisors of the lcm.\n    for i in range(2, int(lcm_15_21**0.5) + 1):\n        if lcm_15_21 % i == 0:\n            factors.add(i)\n            factors.add(lcm_15_21 // i)\n        if len(factors) >= 8:\n            break\n\n    # Since we are looking for exactly 8 factors, and we already have 15 and 21,\n    # the number itself must be the lcm of 15 and 21.\n    return sum(factors)\n\nans = solution()"
    ],
    "f0fc9e28a3cd44f985074b04f9b45f45": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations('0123456789'):\n        if p[0] != '8':  # the leftmost digit of this number is '8'\n            continue\n\n        number = ''.join(p)\n        if all(int(number[:i]) % i == 0 for i in range(1, 10)):\n            return int(number)\n\nans = solution()"
    ],
    "68623df2f94648e0b20904cbcc43ed94": [
        "def solution():\n    # Let x be the number of tomatoes Matthew had at first\n    # Belinda has 36 tomatoes\n    # After Belinda gives 7 tomatoes to Matthew, they will have the same number\n    # So the equation will be like this: 36 - 7 = x + 7\n    # Simplify the equation to find x\n    \n    belinda_after = 36 - 7\n    matthew_after = belinda_after  # After giving, they will have the same number\n\n    # Matthew had this number of tomatoes at first\n    matthew_initial = matthew_after - 7\n\n    return matthew_initial\n\nans = solution()"
    ],
    "ac5194c88a70467cad49c435e839d329": [
        "def solution():\n    base_assembly_rate = 10\n    efficiency_increase = 50 / 100\n    \n    new_assembly_rate = base_assembly_rate * (1 + efficiency_increase)\n    \n    return new_assembly_rate\n\nans = solution()"
    ],
    "cd2c86b449f14cc58b97e4c02a818e7c": [
        "def solution():\n    from math import gcd\n    \n    # Calculate the difference between the two numbers\n    number_difference = abs(2012 - 1274)\n    \n    # Find the greatest common divisor of the difference, which is the maximum possible D\n    D = gcd(number_difference, 2012 % number_difference)\n    \n    # The remainder R is the same when 2012 or 1274 is divided by D\n    R = 2012 % D\n    \n    # Calculate D - R\n    ans = D - R\n    return ans\n\nans = solution()"
    ],
    "d912f4012f844228bafad624ceda9c23": [
        "def solution():\n    for rabbits in range(8):\n        ducks = 7 - rabbits\n        if (rabbits * 4 + ducks * 2) == 20:\n            return rabbits\n\nans = solution()"
    ],
    "c199e1915ab2422a868443394b9ff1a6": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # We are looking for a number 'n' such that\n    # n % 5 == 1, n % 6 == 1, and n % 7 == 1\n    \n    congruences = [(1, 5), (1, 6), (1, 7)]\n    n, _ = solve_congruence(*congruences)\n    return n\n\nans = solution()"
    ],
    "9005f1b685f54bf5852f34fd3b024fd5": [
        "def solution():\n    total_juice = 630\n    given_to_grace = (5/7) * total_juice\n    remainder = total_juice - given_to_grace\n    given_to_evelyn = (1/9) * remainder\n    left_juice = remainder - given_to_evelyn\n\n    return left_juice\n\nans = solution()"
    ],
    "64fc86fe03b44fa5a15210295474c594": [
        "def solution():\n    # The last digit of a power of 4 cycles every 2 steps: 4, 6, 4, 6, ...\n    # Thus, 4^odd will have a last digit of 4, 4^even will have a last digit of 6\n\n    # The last digit of a power of 6 is always 6 (6^1 = 6, 6^2 = 36, ...)\n\n    # Therefore, the last digit of 4^2009 (which is an odd power) will be 4\n    # and the last digit of 6^2010 (which is any power) will be 6\n\n    # So the last digit of 4^2009 + 6^2010 will be the last digit of 4 + 6 => 0\n\n    return 0\n\nans = solution()"
    ],
    "836113e2b5c3443e9bf7aa438b3388f2": [
        "def solution():\n    # Initialize a list of size 52, to represent if the position is a winning (True) or losing (False) position\n    dp = [False] * 53  # We need 53 entries, because we are numbering from 1 to 52\n    \n    # Fill out the list with True or False, indicating if having i numbers left is a winning or losing position\n    for i in range(1, 53):\n        # If it's possible to move to a losing position in one step, it means the current state is winning\n        if i - 1 >= 0 and not dp[i - 1]:\n            dp[i] = True\n        elif i - 3 >= 0 and not dp[i - 3]:\n            dp[i] = True\n        elif i - 4 >= 0 and not dp[i - 4]:\n            dp[i] = True\n        elif i - 6 >= 0 and not dp[i - 6]:\n            dp[i] = True\n    \n    # Determine Betty's best move and if she should go first based on the final position being winning or losing\n    betty_wins = dp[52]\n    if betty_wins:\n        first_or_second = 'first'  # Betty should go first because 52 is a winning position\n        # Find a move that leads to a losing position for Abby\n        if not dp[52 - 1]:\n            strategy = 1\n        elif not dp[52 - 3]:\n            strategy = 3\n        elif not dp[52 - 4]:\n            strategy = 4\n        elif not dp[52 - 6]:\n            strategy = 6\n    else:\n        first_or_second = 'second'  # Betty should go second because 52 is a losing position\n        # No strategy as Betty will always lose if Abby plays optimally\n        strategy = None\n\n    return (first_or_second, strategy)\n\nans = solution()"
    ],
    "85f18b88abb847d2ac8ed05a32300b15": [
        "def solution():\n    ways = 0\n    for two_grams in range(32):\n        for five_grams in range(13):\n            if 2 * two_grams + 5 * five_grams == 63:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "62087bcec6884796a1c5b9acd6d5f3a0": [
        "def solution():\n    total_height_for_six = 6 * 150\n    average_height_of_four = 150 - 2\n    total_height_for_four = 4 * average_height_of_four\n    \n    total_height_for_other_two = total_height_for_six - total_height_for_four\n    average_height_of_other_two = total_height_for_other_two / 2\n\n    return average_height_of_other_two\n\nans = solution()"
    ],
    "4fbbbe33f9d643a79e9eec4d1694212f": [
        "def solution():\n    total_questions = 25\n    rex_questions = total_questions - 1  # He answered all but one\n    score_correct = 4\n    score_incorrect = -2\n    rex_score = 66\n\n    # x is the number of correct answers\n    # rex_questions - x is the number of incorrect answers\n    # Score is computed as: x * score_correct + (rex_questions - x) * score_incorrect\n    # Set up the equation: 4x - 2(rex_questions - x) = rex_score and solve for x\n\n    for x in range(0, rex_questions + 1):  # Rex can answer from 0 to all except one question correctly\n        if x * score_correct + (rex_questions - x) * score_incorrect == rex_score:\n            return x\n\nans = solution()"
    ],
    "ace93f555d35415e8fd4bad294887d9e": [
        "def solution():\n    ans = sum(range(1, 21)) + sum(range(1, 20))\n    return ans\n\nans = solution()"
    ],
    "5be13676699942f49a395268e1f5d8e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the capacity of the pool\n    # Let r_a, r_b, r_c be the rate of water flow from pipes A, B, C respectively\n    x, r_a, r_b, r_c = symbols('x r_a r_b r_c')\n\n    # r_b = 2 * r_a\n    equation1 = Eq(r_b, 2 * r_a)\n\n    # If A and C are on, they fill the pool, and A contributes 18 tons\n    # (r_a + r_c) * t = x and r_a * t = 18 -> t = x / (r_a + r_c) and r_a * x / (r_a + r_c) = 18\n    equation2 = Eq(r_a * x / (r_a + r_c), 18)\n\n    # Similarly, for B and C filling the pool, and B contributes 27 tons\n    # (r_b + r_c) * t = x and r_b * t = 27 -> t = x / (r_b + r_c) and r_b * x / (r_b + r_c) = 27\n    equation3 = Eq(r_b * x / (r_b + r_c), 27)\n\n    # Now, we solve the system of equations for x, the capacity of the pool\n    solutions = solve((equation1, equation2, equation3), (x, r_a, r_b, r_c))\n    capacity = solutions[x]\n\n    return capacity\n\nans = solution()"
    ],
    "3ad80911c83e482091540057163573aa": [
        "def solution():\n    from math import factorial\n\n    # There are 5 colors to choose for the first letter, 4 for the second, 3 for the third, and 2 for the last letter.\n    # This is a permutation problem where we are choosing and arranging 4 colors out of 5 for the 4 letters.\n    ways = factorial(5) // factorial(5 - 4)\n\n    return ways\n\nans = solution()"
    ],
    "08e324d694994846a1553d5b65da495f": [
        "def solution():\n    for age in range(10, 100):  # Alberta's age has two digits\n        reversed_age = int(str(age)[::-1]) + 1\n        if reversed_age == age / 2:\n            return age\n\nans = solution()"
    ],
    "42372c8fe434451ba8bf5bb0da429399": [
        "def solution():\n    # Given that initially there are 20 meatballs left\n    remaining_first = 20\n    # After the new student comes, there are 10 meatballs left\n    remaining_second = 10\n    # The difference in remainders must be equal to the number of meatballs each student gets\n    meatballs_per_student = remaining_first - remaining_second\n    \n    return meatballs_per_student\n\nans = solution()"
    ],
    "4ee96f3c14a241f197933544bbe8db53": [
        "def solution():\n    original_value = 9.32\n    increase_fraction = 1 / 10\n    increased_value = original_value + (original_value * increase_fraction)\n    return increased_value\n\nans = solution()"
    ],
    "c52c9bc9f59d4cbf824806accfda1f41": [
        "def solution():\n    remaining_day3 = 23\n    half_remaining_day2 = remaining_day3 * 2 + 5\n    total_remaining_day1 = half_remaining_day2 * 2\n    half_total_day1 = total_remaining_day1 - 7\n    total_questions = half_total_day1 * 2\n    \n    return total_questions\n\nans = solution()"
    ],
    "a8688d554c69475692b7b0ed84cdf3c9": [
        "def solution():\n    fraction_value = 4 / 25\n    decimal_value = 0.17\n\n    if fraction_value > decimal_value:\n        ans = \"4/25 is larger\"\n    else:\n        ans = \"0.17 is larger\"\n\n    return ans\n\nans = solution()"
    ],
    "9eca731a85d34c5c84ce4315a5438484": [
        "def solution():\n    initial_volume = 1000  # milliliters (1 litre)\n    poured_volume = 200 * 3  # milliliters (200 ml into each of 3 cups)\n    remaining_volume = initial_volume - poured_volume\n    return remaining_volume\n\nans = solution()"
    ],
    "c419ce5358864ba09eea0ae91783b76f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the number of roses and y be the number of daisies originally in the park\n    x, y, n = symbols('x y n')\n\n    # we have two equations based on the problem statement\n    equation1 = Eq(x + y, 300)  # originally there are 300 flowers\n    equation2 = Eq(x + n, 280)  # at some future time, there are 280 roses\n    equation3 = Eq(y + n, 180)  # at the same future time, there are 180 daisies\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (x, y, n))\n\n    # return the number of roses originally\n    return solutions[x]\n\nans = solution()"
    ],
    "3e243b1122134f85813f8fa4e13d7976": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n    position_difference = 15 - 10\n    \n    common_difference = (fifteenth_term - tenth_term) / position_difference\n\n    twelfth_term = tenth_term + 2 * common_difference\n\n    return twelfth_term\n\nans = solution()"
    ],
    "680347d9be334298803934506acbea08": [
        "def solution():\n    ans = 221 * 8\n    return ans\n\nans = solution()"
    ],
    "bf508186ac3b4867b029488d3fe8ef88": [
        "def solution():\n    # Using the formula for the sum of the first n terms of an arithmetic sequence: S_n = n/2 * (2a + (n - 1)d)\n    # We have two equations:\n    # S_8 = 8/2 * (2a + (8 - 1)d) = 32\n    # S_22 = 22/2 * (2a + (22 - 1)d) = 44\n    \n    # From the first equation, we can get the value of a + 7d/2 = 32/4\n    a_plus_7d_by_2 = 32 / 4\n    \n    # From the second equation, we can get the value of a + 21d/2 = 44/11\n    a_plus_21d_by_2 = 44 / 11\n    \n    # Now we can set up a system of equations to solve for a and d:\n    # a + 7d/2 = 8\n    # a + 21d/2 = 4\n    \n    # Subtract the first equation from the second to solve for d:\n    d = 2 * (a_plus_21d_by_2 - a_plus_7d_by_2)\n    \n    # Now solve for a using the value of d:\n    a = a_plus_7d_by_2 - 7 * d / 2\n    \n    # Now calculate the sum of the first 15 terms using S_n formula:\n    S_15 = 15/2 * (2 * a + (15 - 1) * d)\n    \n    return S_15\n\nans = solution()"
    ],
    "8a82b904fe8845d7ace8f6031f51ff8b": [
        "def solution():\n    ans = 0\n    for i in range(1, 251):\n        if int(i**0.5)**2 == i:\n            ans += 1\n    return ans\n\nans = solution()"
    ],
    "2556a70133494b14a2fdfa3f1d8a534d": [
        "def solution():\n    total_problems = 10 + 20 + 30\n    correct_problems = (10 * 20 / 100) + (20 * 80 / 100) + (30 * 90 / 100)\n\n    overall_score_percentage = (correct_problems / total_problems) * 100\n\n    return overall_score_percentage\n\nans = solution()"
    ],
    "9f7d5af3fb5845e58bbb24c28e44207b": [
        "def solution():\n    one_brick_area_in_dm2 = 6 * 6  # area of one brick in decimeters squared\n    total_area_in_dm2 = 80 * one_brick_area_in_dm2  # total area covered by 80 bricks\n\n    one_brick_area_in_cm2 = 64  # area of one smaller brick in centimeters squared\n    total_area_in_cm2 = total_area_in_dm2 * 100  # converting decimeter squared to centimeter squared\n\n    num_smaller_bricks = total_area_in_cm2 / one_brick_area_in_cm2  # number of smaller bricks needed\n\n    return int(num_smaller_bricks)\n\nans = solution()"
    ],
    "937225b6b7ac470ab01b68f8a4389aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for a bottle of water (w) and a bag of fruit (f)\n    w, f = symbols('w f')\n\n    # Create the equations based on the problem statement\n    # 2 bottles of water + 3 bags of fruit = £2.55\n    equation1 = Eq(2*w + 3*f, 2.55)\n    # A bottle of water costs 15p more than a bag of fruit\n    equation2 = Eq(w, f + 0.15)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (w, f))\n\n    # Extract the cost of a bag of fruit\n    return solutions[f]\n\nans = solution()"
    ],
    "9c96976b9a0644528200db1a240ce22f": [
        "def solution():\n    from itertools import permutations\n\n    max_number = 0\n    for perm in permutations([1, 3, 4, 5, 7, 8], 6):\n        number = int(''.join(map(str, perm)))\n        if number % 11 == 0:\n            max_number = max(max_number, number)\n\n    return max_number\n\nans = solution()"
    ],
    "77bc73140f934ab28b377454635f30a4": [
        "def solution():\n    ans = 7 + 8 * 3\n    return ans\n\nans = solution()"
    ],
    "8ee614cba3ae409b923c2260cf36ff3e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n    # equation representing the total number of pupils\n    equation1 = Eq(girls + boys, 500)\n    # equation representing the difference in the number of girls and boys\n    equation2 = Eq(girls, boys + 30)\n\n    solutions = solve((equation1, equation2), (girls, boys))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "8da16cb231e141899db831c841592f4e": [
        "def solution():\n    number = 91\n    if number > 1:\n        for i in range(2, int(number**0.5)+1):\n            if (number % i) == 0:\n                return (i, number // i)  # Return the factors that prove 91 is not prime\n    return True  # In case the number is prime (which it is not for 91)\n\nans = solution()"
    ],
    "00bedbbff96a4c41a6d2dc74e09c2bbc": [
        "def solution():\n    import math\n\n    # Number of 4's: 4 is 2^2, so 2018 4's contribute to the exponent of 2 as 2018*2 = 4036\n    exponent_of_2 = 2018 * 2\n    \n    # Number of 25's: 25 is 5^2, so 2018 25's contribute to the exponent of 5 as 2018*2 = 4036\n    exponent_of_5 = 2018 * 2\n    \n    # Since 10 = 2 * 5, we can pair each 2 with a 5 to make a 10\n    # The minimum of the exponents of 2 and 5 determines the power of 10 in the factorization of A\n    exponent_of_10 = min(exponent_of_2, exponent_of_5)\n\n    # The number of digits of A is the exponent of 10 plus 1\n    num_digits = exponent_of_10 + 1\n\n    return num_digits\n\nans = solution()"
    ],
    "5b4ba0d6146248b28e891e03399c5b95": [
        "def solution():\n    length_A = 10\n    length_B = 5 * length_A\n    total_length = length_A + length_B\n    return total_length\n\nans = solution()"
    ],
    "209362616733426d8b75bc739a42bd1c": [
        "from math import comb\n\ndef solution():\n    total_players = 5\n    team_size = 3\n\n    ans = comb(total_players, team_size)\n\n    return ans\n\nans = solution()"
    ],
    "bf9c9c142f014e25baff17cc266a571a": [
        "def solution():\n    # Initialize variables for the difference, boys, and girls\n    diff = 31\n    boys = 0\n    girls = 0\n    layer = 0\n\n    # Iterate until the difference between boys and girls meets the requirement\n    while boys - girls != diff:\n        # Each layer is a square, with side equal to layer*2 + 1\n        side_length = layer * 2 + 1\n        # Calculate total students at current layer\n        curr_layer_total = side_length * side_length\n        if layer % 2 == 0:\n            # If layer is even (including the outermost layer 0), count as boys\n            boys = curr_layer_total\n        else:\n            # Else, layer is odd, count as girls\n            girls = curr_layer_total - ((layer - 1) * 2 + 1) ** 2\n        \n        # Proceed to the next layer\n        layer += 1\n\n    # Total students is the sum of the last calculated boys and girls values\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "e66987ea1869420495aacf4803e1a0e6": [
        "def solution():\n    selling_price = 6500\n    profit_percentage = 30\n    \n    cost_price = selling_price / (1 + profit_percentage / 100)\n    \n    new_profit = 5000\n    new_selling_price = cost_price + new_profit\n    new_profit_percentage = (new_profit / cost_price) * 100\n    \n    return new_profit_percentage\n\nans = solution()"
    ],
    "928d90a169904ea2a45144f88db5fc41": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10):\n        for x2 in range(1, 10):\n            if x1 != x2 and x1 + x2 < 10:\n                x3 = 10 - x1 - x2\n                if x3 != x1 and x3 != x2:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "2046f9901ec645f3b15da0905103e4b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the total initial apples\n    apples = symbols('apples')\n\n    # Equation representing the apples left after selling 1/5th on Monday\n    monday_left = apples - (apples / 5)\n\n    # Equation representing the apples left after selling 80 apples on Tuesday\n    tuesday_left = monday_left - 80\n\n    # Equation representing the condition that he is left with 30% of the apples\n    final_condition = Eq(tuesday_left, apples * 0.30)\n\n    # Solving for the number of initial apples\n    initial_apples = solve(final_condition, apples)\n\n    # The number of apples in the end is 30% of the initial number of apples\n    apples_in_the_end = initial_apples[0] * 0.30\n\n    return apples_in_the_end\n\nans = solution()"
    ],
    "d4cf12e04703450586eb3ad6f4fbf86b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the first even number be x\n    x = symbols('x')\n    \n    # The seven consecutive even numbers are x, x+2, x+4, ..., x+12\n    # The fourth number is x+6\n    # According to the problem, x+6 = (1/3)*(x + x+12) + 6\n    equation = Eq(x + 6, (1/3) * (x + (x + 12)) + 6)\n\n    # Solve for x\n    first_even_number = solve(equation, x)[0]\n\n    # Calculate the sum of these seven even numbers\n    sum_of_even_numbers = sum([first_even_number + i*2 for i in range(7)])\n\n    return sum_of_even_numbers\n\nans = solution()"
    ],
    "cab8adbf9a644688a8392376fee0a725": [
        "def solution():\n    total_cookies = 200\n    morning_cookies = total_cookies / 5\n    remainder_cookies = total_cookies - morning_cookies\n    afternoon_cookies = (3 / 4) * remainder_cookies\n    return int(afternoon_cookies)\n\nans = solution()"
    ],
    "ea3cc6d4b3a84e5bafa81bda550dd59c": [
        "def solution():\n    km_to_m = 1.5 * 1000\n    return km_to_m\n\nans = solution()"
    ],
    "95cc2a35844f4793bec67feb3c34b55a": [
        "def solution():\n    total_sum = 9 * 140  # Average of 9 numbers times the number of numbers\n    remaining_sum = total_sum - 180  # Subtract the one number out of the average calculation\n    new_average = remaining_sum / 8  # Calculate the average of the remaining 8 numbers\n\n    return new_average\n\nans = solution()"
    ],
    "1fc13706bdfd4125b1f46f271923f69c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    purple, yellow, white, red = symbols('purple yellow white red')\n    \n    equation1 = Eq(purple, 2 * yellow)               # Ben has twice as many purple orchids as yellow\n    equation2 = Eq(yellow, 3 * white)                # 3 times as many yellow orchids as white orchids\n    equation3 = Eq(red + white, 38)                  # 38 red and white orchids\n    equation4 = Eq(red, 28)                          # 28 orchids are red\n    \n    solutions = solve((equation1, equation2, equation3, equation4), (purple, yellow, white, red))\n    \n    total_orchids = solutions[purple] + solutions[yellow] + solutions[white] + solutions[red]\n    \n    return total_orchids\n\nans = solution()"
    ],
    "1b6cda7ee5184882bed20314b0c55e5b": [
        "def solution():\n    count = 0\n    for x in range(1, 14 - 1):\n        for y in range(x + 1, 14 - x):\n            z = 14 - x - y\n            if z > y:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "4ae3195333ce44baae2440d899e42e7b": [
        "def solution():\n    people_in_front_of_emily = 25\n    people_behind_danny = 16\n    danny_and_emily = 2\n\n    total_people = people_in_front_of_emily + danny_and_emily + people_behind_danny\n\n    return total_people\n\nans = solution()"
    ],
    "fd400a9b34ea45bab56f191197ce87a7": [
        "def solution():\n    total_length = 52\n    num_pieces = 2\n\n    length_per_piece = total_length / num_pieces\n\n    return length_per_piece\n\nans = solution()"
    ],
    "a69442f9714442b29511db3b6b5cef94": [
        "def solution():\n    blue_markers = 80\n    red_markers = 2 * blue_markers\n    green_markers = blue_markers + 45\n    total_markers = red_markers + blue_markers + green_markers\n    return total_markers\n\nans = solution()"
    ],
    "40e27d47a03d4eed83ff6c5ccbbd0c12": [
        "def solution():\n    length_of_highway = 45\n    distance_apart = 9\n\n    # Since trees are at both ends, we start with two trees\n    # and calculate how many intervals of 9 meters fit in 45 meters\n    # for one side. Then we multiply by 2 since there are two sides.\n    num_trees_one_side = (length_of_highway // distance_apart) + 1\n    total_trees = num_trees_one_side * 2\n\n    return total_trees\n\nans = solution()"
    ],
    "c95e959b4299436693470a7a54149f3c": [
        "def solution():\n    return 2 * 20 - 1\n\nans = solution()"
    ],
    "6a792aa33daf4ec4a06273453da47af8": [
        "def solution():\n    # The driver finished in second place,\n    # so there's one car ahead of him.\n    # He overtook 5 cars.\n    # Hence, there were 1 (first place) + 5 (overtaken cars) + 1 (Ferrari driver itself) cars.\n    total_cars = 1 + 5 + 1\n    return total_cars\n\nans = solution()"
    ],
    "6ddb6579408f43569d88970148692882": [
        "def solution():\n    johnny_rings = 194\n    amber_rings = 5 * johnny_rings\n    remaining_rings = 65\n\n    total_rings = johnny_rings + amber_rings + remaining_rings\n    \n    return total_rings\n\nans = solution()"
    ],
    "ad1785cf47534eb79f57a2988c26b792": [
        "def solution():\n    eddie_current_age = 8\n    mike_current_age = 48\n    age_difference = mike_current_age - eddie_current_age\n\n    eddie_future_age = 18\n    mike_future_age = eddie_future_age + age_difference\n\n    return mike_future_age\n\nans = solution()"
    ],
    "fe2f6c6e96c74d368dbe56b437d7dbc0": [
        "def solution():\n    lily_price = 15.99\n    amy_price = lily_price + 8.01\n    total_price = lily_price + amy_price\n    return total_price\n\nans = solution()"
    ],
    "8773123676b246e1b04d41c383be9480": [
        "def solution():\n    sides = 9\n    return (sides - 2) * 180 / sides\n\nans = solution()"
    ],
    "8e8f9986b2ec4a658422dc4b646e598a": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 21):\n        total_sum += int(\"5\" * i)\n    ans = total_sum % 10000  # Get the last 4 digits\n    return ans\n\nans = solution()"
    ],
    "b985fa2059844dd9846e790e911a7a78": [
        "def solution(x, y):\n    # time for 1 man to build 1 wall is 2 men * 3 days\n    time_for_1_man_to_build_1_wall = 2 * 3\n    \n    # time for y men to build x walls is (time for 1 man to build 1 wall) / y men * x walls\n    time_for_y_men_to_build_x_walls = (time_for_1_man_to_build_1_wall / y) * x\n    \n    return time_for_y_men_to_build_x_walls\n\n# Example usage:\nx = 1  # number of walls\ny = 6  # number of men\nans = solution(x, y)"
    ],
    "bacacf9e4d6344c08c919cdfcd0dd171": [
        "def solution():\n    total_people = 200\n    men_percentage = 25\n    women_fraction = 1 / 5\n\n    men_count = (men_percentage / 100) * total_people\n    women_count = women_fraction * total_people\n    children_count = total_people - men_count - women_count\n    \n    return int(children_count)\n\nans = solution()"
    ],
    "2aa5fb221cec4c6f9ef10acc189afca8": [
        "def solution():\n    # Let the number of checked shirts be x\n    # Then the number of white shirts is 7x\n    # The total number of shirts sold is x + 7x = 72\n    # Therefore, we need to solve the equation 8x = 72\n    \n    # Solving the equation for x\n    x = 72 / 8\n    \n    # Number of white shirts is 7 times the number of checked shirts\n    white_shirts = 7 * x\n    \n    return int(white_shirts)\n\nans = solution()"
    ],
    "3df0c3dde5e243a9ab9d9c0623518d14": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (3, 4), (4, 5)]\n    ans, _ = solve_congruence(*congruences)\n    while ans < 100:\n        return ans\n        ans += 3 * 4 * 5  # LCM of moduli\n\nans = solution()"
    ],
    "0b0e2b60afe9443a983a2f0c179e8cb6": [
        "def solution():\n    for number in range(999, 100, -1):\n        if number % 9 == 0 and number % 2 != 0:\n            tens_digit = (number // 10) % 10\n            if tens_digit % 4 == 0:\n                return number\n\nans = solution()"
    ],
    "60493d0a930546ecbdb78a1d7c6e8fc5": [
        "def solution():\n    pages_per_day = 16 / 2\n    total_pages = pages_per_day * 9\n\n    return int(total_pages)\n\nans = solution()"
    ],
    "d95ed3ffcb4c4e158e87923bbb18dbc2": [
        "def solution():\n    return 72 + 60 + 48 + 36 + 24 + 12\n\nans = solution()"
    ],
    "124505e7801f407bbb2c337fd03e40c0": [
        "def solution():\n    # Since the question is incomplete and the pattern is not specified,\n    # I'm going to assume it is a placeholder for a pattern that might usually be represented.\n    # Therefore, I am unable to provide a solution to this particular question.\n    # In a typical scenario, the pattern would be analyzed and the value of the specific term\n    # would be calculated based on the observed pattern.\n    return None\n\nans = solution()"
    ],
    "a768a55edb6b4c729273848fbd84119b": [
        "def solution():\n    # Following the pigeonhole principle, to ensure drawing 2 balls of the same color,\n    # you need to consider the worst-case scenario.\n\n    # If you draw one ball from each color, you still cannot ensure 2 balls of the same color.\n    # That is: 1 white + 1 red + 1 green = 3 balls,\n    # and you have no guarantee they are the same color.\n\n    # However, once you draw the 4th ball, you must have at least two balls of one color,\n    # since there are only three colors.\n\n    # So you must draw at least 4 times to ensure 2 balls of the same color.\n    return 4\n\nans = solution()"
    ],
    "36b9783bc7c540cd8a6f80ea8164926c": [
        "def solution():\n    return 42 // 6\n\nans = solution()"
    ],
    "f18dbb07c7d948eb81cecdc6adc6657e": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.12\n    years = 8\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n\n    return final_value\n\nans = solution()"
    ],
    "3bf359500b04447eb133eb82ac3cdcd6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(girls + boys, 390)\n    equation2 = Eq((1/3) * girls, (1/2) * boys)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "ae2892dc2b454550bff74338556e93c8": [
        "def solution():\n    for num in range(6, 55):\n        if num % 5 == 0 and (num + 1) % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "39baf06fc25b46b29d10b9191c1761d0": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (4, 5), (5, 6)]\n    number = solve_congruence(*congruences)\n\n    return number[0]\n\nans = solution()"
    ],
    "99d84eff6ac64f09ab3bcfb4983bcdfc": [
        "def S(n):\n    return sum(int(digit) for digit in str(n))\n\ndef solution():\n    # reasonable starting point since S(m) = 5S(m+1) we want to look for m such that m < 5(m+1)\n    m = 1\n    while True:\n        if S(m) == 5 * S(m + 1):\n            return m\n        m += 1\n\nans = solution()"
    ],
    "c53e746b357140a38e789d2b4661f42f": [
        "def solution():\n    # From January to April (4 months)\n    jan_to_apr_total = 300 * 4\n    \n    # From May to July (3 months)\n    may_to_july_total = 250 * 3\n    \n    # From August to September (2 months)\n    aug_to_sep_total = 750  # Already provided as total\n    \n    # From October to December (3 months)\n    oct_to_dec_total = 300 * 3\n    \n    # Total for the year\n    total_year = jan_to_apr_total + may_to_july_total + aug_to_sep_total + oct_to_dec_total\n    \n    # Average per month\n    avg_per_month = total_year / 12\n\n    return avg_per_month\n\nans = solution()"
    ],
    "1f292e7a93ed4fffaa057286ebde0e3e": [
        "def solution():\n    # Let x be the number that Theo thought of.\n    # According to the problem, three quarters of it is 24.\n    # Therefore, we can write the equation: (3/4) * x = 24\n\n    # To find x, we divide both sides by (3/4) or multiply by (4/3).\n    x = 24 * (4/3)\n\n    return int(x)\n\nans = solution()"
    ],
    "0ac355b21f2a426fa5a12babd8ae8f58": [
        "def solution():\n    daily_pick_rate = 24 / 5\n    total_pick = daily_pick_rate * 8.5\n    return total_pick\n\nans = solution()"
    ],
    "13972553585945499780bd1f9de3edbb": [
        "def solution():\n    k = 1 - 0.02\n    return k\n\nans = solution()"
    ],
    "e6c4ff2e43db4f879b08144db3336f68": [
        "def solution():\n    bottom_temp = 17\n    top_temp = -2\n    temp_drop = bottom_temp - top_temp\n\n    return temp_drop\n\nans = solution()"
    ],
    "67e73a7f1c6c4c4e9ba62435f2be80d4": [
        "def solution():\n    total_passengers = 400\n    men_fraction = 9 / 20\n    women_percentage = 30 / 100\n\n    men_count = total_passengers * men_fraction\n    women_count = total_passengers * women_percentage\n    \n    children_count = total_passengers - men_count - women_count\n    \n    return children_count\n\nans = solution()"
    ],
    "f0a5dbe6de374eba85a44510eb9aa5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jordan, evie, emily = symbols('jordan evie emily')\n    \n    equation1 = Eq(jordan, 3 * emily)\n    equation2 = Eq(evie, jordan - 20)\n    equation3 = Eq(jordan + evie + emily, 400)\n    \n    solutions = solve((equation1, equation2, equation3), (jordan, evie, emily))\n    \n    return solutions[evie]\n\nans = solution()"
    ],
    "895c80e1252f488aa0bcc6bfe68a22ba": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    departure_time = datetime.strptime(\"0735\", \"%H%M\")\n    journey_duration = timedelta(hours=1, minutes=35)\n    walk_duration = timedelta(minutes=40)\n\n    arrival_time = departure_time + journey_duration + walk_duration\n    return arrival_time.strftime(\"%H%M\")\n\nans = solution()"
    ],
    "978a2a1cb0b648789d46ea37337fec80": [
        "def solution():\n    # Let's denote Tom's age as T and Father's age as F.\n    # According to the problem, currently Tom is 10 years old (T = 10).\n    # We are also told that when Tom reaches Father's current age, Father will be 70 years old.\n\n    T = 10  # Tom's current age\n\n    # Let's assume Father's current age is F.\n    # We want to find the value of F.\n    # The time it would take for Tom to reach Father's age is F - T years.\n    # In F - T years, Father will be 70 years old.\n\n    # So, we have the equation: F + (F - T) = 70\n    # Simplify the equation to: 2F - T = 70\n    # Substitute the value of T (Tom's age): 2F - 10 = 70\n    # Solve for F: F = (70 + 10) / 2\n\n    F = (70 + T) / 2  # Father's current age\n\n    return int(F)  # Return as integer value\n\nans = solution()"
    ],
    "5b740c87653c43258c0586d8f12663d4": [
        "def solution():\n    possible_values = []\n    for N in range(200):\n        # Convert N to base 4 and check if the sum of its digits is 5.\n        if sum(int(d) for d in format(N, '4')) == 5:\n            # Convert N to base 6 and check if the sum of its digits is 8.\n            if sum(int(d) for d in format(N, '6')) == 8:\n                # Convert N to base 8 and check if the sum of its digits is 9.\n                if sum(int(d) for d in format(N, '8')) == 9:\n                    possible_values.append(N)\n    return possible_values\n\nans = solution()"
    ],
    "afcd43f8aadd48d3b3b70d1cd4402d8c": [
        "def solution():\n    # There are 2 choices for the first digit (can be either 2 or 3)\n    # There are 3 choices for the second digit (can be 0, 2, or 3)\n    # There are 3 choices for the third digit (can be 0, 2, or 3)\n    # Multiply the number of choices together to find the number of different numbers\n    \n    return 2 * 3 * 3\n\nans = solution()"
    ],
    "f5736677dc6940b8a6a9e5d768b339cf": [
        "def solution():\n    cost_for_six = 1.10\n    cost_for_twelve = cost_for_six * 2\n    return cost_for_twelve\n\nans = solution()"
    ],
    "b85bc56d0f9b4a388b112f1d1c98b5ac": [
        "def solution():\n    price_per_bag_in_pence = 16\n    total_money_in_pence = 200  # £2 is 200p\n\n    num_bags = total_money_in_pence // price_per_bag_in_pence\n\n    return num_bags\n\nans = solution()"
    ],
    "2ff378394a154043a3ef7f34cd20ed7b": [
        "def solution():\n    for digit in range(10):\n        num = int(f\"63{digit}25\")\n        if num % 45 == 0:\n            return digit\n\nans = solution()"
    ],
    "c3b73f89dc164b2c8290804ecfee10f2": [
        "def solution():\n    return 8.3 * 40\n\nans = solution()"
    ],
    "3a737e87377f45d6b533c3df64a44d83": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n    \n    chip = Symbol('chip')\n    dale = Symbol('dale')\n    # chip gives 14 acorns to Dale, then they have the same number\n    # chip - 14 = dale after giving\n    # chip - 14 = dale + 14 --> chip = dale + 28\n    # chip + dale = 124 (total acorns)\n    # Substitute chip: (dale + 28) + dale = 124\n    equation = (dale + 28) + dale - 124\n    \n    dale_acorns = solve(equation, dale)\n    chip_acorns = dale_acorns[0] + 28\n    \n    return chip_acorns\n\nans = solution()"
    ],
    "98497b9ada5a4cf096e251a78f90e4f5": [
        "def solution():\n    red_eggs = 8\n    yellow_eggs = red_eggs + 7\n    total_eggs = red_eggs + yellow_eggs\n    return total_eggs\n\nans = solution()"
    ],
    "fd972a8b8be9487fa73a04079ced2d12": [
        "from math import factorial\n\ndef solution():\n    total_books = 6 + 2  # Total number of books\n    fiction_books = 6  # Number of fiction books\n    comic_books = 2  # Number of comic books\n    \n    # Number of ways to arrange all books is factorial of total_books\n    # Since fiction and comic books are indistinguishable among themselves, \n    # we divide by factorial of fiction_books and factorial of comic_books\n    ans = factorial(total_books) // (factorial(fiction_books) * factorial(comic_books))\n    \n    return ans\n\nans = solution()"
    ],
    "64f1d8eb28744f888d7b31370fa44497": [
        "def solution():\n    for i in range(1, 100):\n        if i % 2 == 0 and i % 4 == 0 and i % 3 == 0:\n            if (i**0.5).is_integer():\n                return i\n\nans = solution()"
    ],
    "e8a6833cb7f04cedbeaf3a2156064cdf": [
        "def solution():\n    dividend = 85\n    divisor = 5\n    \n    ans = dividend // divisor\n    \n    return ans\n\nans = solution()"
    ],
    "40c82361e0c74a8ea2b45cd4b91a81ca": [
        "def solution():\n    x = symbols('x')       # Represent the cost of one CD as x pounds\n    total_cost = 8 * x     # The total cost for 8 CDs would be 8 times x\n    return total_cost\n\nans = solution()"
    ],
    "005dea19a47e4533b68eed3a0f0b497c": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 52))  # List of primes less than 51\n    min_count = float('inf')  # Start with an infinitely large count\n\n    def find_min_count(target, current_count, start):\n        nonlocal min_count\n        if target == 0:\n            min_count = min(min_count, current_count)  # Found a sum, update min_count if smaller\n            return\n        if target < 0 or current_count >= min_count:  # If over the target or count is not minimal\n            return\n        for i in range(start, len(primes)):\n            find_min_count(target - primes[i], current_count + 1, i)  # Recursive step considering same prime again\n\n    find_min_count(51, 0, 0)  # Start with target 51, count 0, and the first prime number\n    return min_count\n\nans = solution()"
    ],
    "18e2a859640043989d18f5185f01a455": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq((2/3)*(x-1) - (1/4)*(3*x+1), 1/6)\n    ans = solve(equation, x)\n    return ans[0]\n\nans = solution()"
    ],
    "18ba329683b9437a99bb36874be11b6d": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            if '5' in str(hour) or '5' in str(minute):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "6108bfa174894485b78d31f295206c3f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    novels, science_books = symbols('novels science_books')\n    \n    equation1 = Eq(science_books, 6 * novels - 14)\n    equation2 = Eq(novels, science_books - 106)\n   \n    solutions = solve((equation1, equation2), (novels, science_books))\n    \n    return solutions[science_books]\n\nans = solution()"
    ],
    "528a56a810f04995a3393b4a5b5c2aff": [
        "def solution():\n    eggs_per_tray = 26\n    trays = 4\n    total_eggs = eggs_per_tray * trays\n    return total_eggs\n\nans = solution()"
    ],
    "9b180ed71aad4dea867c316124171dcc": [
        "def solution():\n    total = 0\n    for i in range(1, 41, 2):\n        total += (i + 1) - i\n    return total\n\nans = solution()"
    ],
    "8b7e921fc69e446a84cae8a24f0dd127": [
        "def solution():\n    principal = 3600\n    interest_rate = 0.02\n    interest = principal * interest_rate\n\n    return interest\n\nans = solution()"
    ],
    "2a58888942e444b482b08c681e223aac": [
        "def solution():\n    total_penpals = 11\n    total_pages = 38\n    \n    for three_page_penpals in range(total_penpals + 1):\n        four_page_penpals = total_penpals - three_page_penpals\n        if 3 * three_page_penpals + 4 * four_page_penpals == total_pages:\n            return three_page_penpals\n\nans = solution()"
    ],
    "8890e33ef31b4ccc99ae9b0385739828": [
        "def solution():\n    for i in range(100, 1000):\n        if i // 24 == 36 and i % 24 == 0:\n            return i\n\nans = solution()"
    ],
    "508d839986774182b702b7f8bea45c05": [
        "def solution():\n    initial_weight_kg = 2.5\n    apple_pie_weight_g = 750\n    apple_juice_weight_g = 1025\n    \n    remaining_weight_kg = initial_weight_kg - (apple_pie_weight_g + apple_juice_weight_g) / 1000\n    \n    return remaining_weight_kg\n\nans = solution()"
    ],
    "ff3f13e0f5834b50bd1c146b2310996b": [
        "def solution():\n    for num in range(10, 100):\n        if num % 4 == 2 and num % 5 == 2:\n            return num\n\nans = solution()"
    ],
    "65be0a62238c44a1a81f3a149de3c3e7": [
        "def solution():\n    people_in_front_of_amy = 9\n    amy_position_from_back = 15\n\n    total_people = amy_position_from_back + people_in_front_of_amy - 1\n\n    return total_people\n\nans = solution()"
    ],
    "f7301d7cd70d47c88eb5997a858caf0c": [
        "def solution():\n    return 7 - (-4)\n\nans = solution()"
    ],
    "d9b549ad5efb489b9e021f1fff6fe259": [
        "def solution():\n    initial_height = 17\n    final_height = 65\n    weeks = 4\n\n    growth_per_week = (final_height - initial_height) / weeks\n\n    return growth_per_week\n\nans = solution()"
    ],
    "cff268a0ab3d4d4689a53ee2d5eab94a": [
        "def solution():\n    # Draw all balls of one color (5) and all balls of another color (5) \n    # without getting three different colors. \n    # Then, the next ball drawn guarantees the third color.\n    balls_to_draw = 5 + 5 + 1\n\n    return balls_to_draw\n\nans = solution()"
    ],
    "5f2651543daf486c9b5689378dd5d200": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining the symbols\n    x, y = symbols('shorter_piece longer_piece')\n\n    # Equations based on the problem statement\n    equation1 = Eq(x + y, 12.75)  # The sum of both pieces is 12.75 m\n    equation2 = Eq(y, 2 * x)  # The longer piece is twice the shorter piece\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Returning the length of the longer piece\n    return solutions[y]\n\nans = solution()"
    ],
    "626a60e2bb934c6c9efb5ecfc8cc7b07": [
        "def solution():\n    right_of_favorite = 6\n    position_from_left = 14\n    total_books = position_from_left + right_of_favorite\n\n    return total_books\n\nans = solution()"
    ],
    "432a2792a8fd48ab90470670028065e3": [
        "def solution():\n    # If all dimensions are halved, the volume is reduced by 1/2 * 1/2 * 1/2 = 1/8\n    volume_factor = (1/2) ** 3\n    # The new weight is the original weight times the volume factor\n    new_weight = 1200 * volume_factor\n    return new_weight\n\nans = solution()"
    ],
    "763158cf5ddc46bda0149e66cd6e5891": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    gigi_original = 120\n    lily_original = 24\n    gigi_new, lily_new = symbols('gigi_new lily_new')\n\n    equation1 = Eq(gigi_new, gigi_original + lily_new)\n    equation2 = Eq(lily_new, lily_original + lily_new)\n    equation3 = Eq(gigi_new, 3 * lily_new)\n\n    solutions = solve((equation1, equation2, equation3), (gigi_new, lily_new))\n\n    return solutions[lily_new]\n\nans = solution()"
    ],
    "34aba952c92541a880a60157ce1f2a2a": [
        "from sympy import primerange\n\ndef solution():\n    prime_cards = list(primerange(1, 21))\n    total_cards = 20\n    non_prime_cards = total_cards - len(prime_cards)\n    return non_prime_cards\n\nans = solution()"
    ],
    "db88854e5b9e4689aa2540cd3230716e": [
        "def solution():\n    return 694 * 27\n\nans = solution()"
    ],
    "03ff8fd61a1e4e12875cd66e409c1908": [
        "def solution():\n    # Initial ages of Brian and his father\n    brian_age = 14\n    father_age = 41\n\n    # Calculate the age difference between Brian and his father\n    age_difference = father_age - brian_age\n\n    # Loop over the years until the ages are reversed again\n    while True:\n        brian_age += 1\n        father_age += 1\n        brian_age_str = str(brian_age)\n        father_age_str = str(father_age)\n\n        # Check if Brian's age is the reverse of his father's age\n        if brian_age_str == father_age_str[::-1]:\n            break\n\n    return brian_age\n\nans = solution()"
    ],
    "4a59132b51dd42b3907574fc7508b606": [
        "def solution():\n    return 8386 // 14\n\nans = solution()"
    ],
    "8246bb5345f84017abee88e67f605f55": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):  # The hundreds digit must be from 1 to 9\n        for tens in range(0, 10):  # The tens digit must be from 0 to 9\n            for ones in range(1, 10, 2):  # The ones digit must be an odd number\n                if hundreds + tens + ones == 11:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ac3db56fed3b4b9dadaddbafb7210b8d": [
        "def solution():\n    # Since it takes 5 minutes to boil an egg and we have 3 eggs to boil,\n    # assuming we have only one container to boil eggs, \n    # the least amount of time to boil all 3 eggs one after another will be:\n    \n    # Time for boiling 1 egg              = 5 minutes\n    # Time for boiling 3 eggs (sequentially) = 5 * 3 minutes\n    # So, the total least time will be 15 minutes.\n    \n    return 5 * 3\n\nans = solution()"
    ],
    "f52723613c644fc7a8654b9875518c28": [
        "def solution():\n    total_students = 35\n    capacity = 6\n    min_cabins = (total_students + capacity - 1) // capacity\n    return min_cabins\n\nans = solution()"
    ],
    "6ae16204dd0c432f9b2b3b1d7e3657bc": [
        "def solution():\n    total_dough_g = 11160  # Convert 11.16kg to grams\n    cookie_dough_g = 45    # Dough for one cookie in grams\n    brownie_dough_g = 150  # Dough for one brownie in grams\n\n    dough_used_g = (240 * cookie_dough_g) + (2 * brownie_dough_g)\n    \n    dough_left_g = total_dough_g - dough_used_g\n    dough_left_kg = dough_left_g / 1000  # Convert grams back to kg\n\n    return dough_left_kg\n\nans = solution()"
    ],
    "b2ce68cf7f1747dfb2b3a9656328089f": [
        "def solution():\n    # Let c represent the number of calories Dan can take in today\n    # In order for Dan to take in less calories today than he did yesterday, we have the inequality c < 1000\n    # Since we are only writing the inequality in a Python function, we don't actually calculate a numeric answer.\n    # Therefore, we just return the string representation of the inequality.\n    return \"c < 1000\"\n\nans = solution()"
    ],
    "612ec442ad6443f4a359e99c3e7de273": [
        "def solution():\n    remaining_biscuits = 10\n    # Undo the operations of the second day\n    remaining_biscuits += 2  # Add 2 because Pip ate 2 less\n    remaining_biscuits *= 2  # Multiply by 2 because Pip ate half of the remaining\n\n    # Undo the operations of the first day\n    remaining_biscuits += 4  # Add 4 because Pip ate 4 more\n    total_biscuits = remaining_biscuits * 2  # Multiply by 2 because Pip ate half of all the biscuits\n\n    return total_biscuits\n\nans = solution()"
    ],
    "e350ae84124b4fc6989aada9939cc84a": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    n, a1, a2, a3, a4, an, an_1, an_2, an_3 = symbols('n a1 a2 a3 a4 an an_1 an_2 an_3')\n    d = symbols('d')\n    \n    # Equations based on the question\n    eq1 = Eq(a1 + a2 + a3 + a4, 124)  # sum of the first 4 numbers\n    eq2 = Eq(a1 + (n-1)*d, an)  # nth term of the sequence\n    eq3 = Eq(an + (an + (-d)) + (an + (-2*d)) + (an + (-3*d)), 156)  # sum of last 4 numbers\n    eq4 = Eq(n/2 * (a1 + an), 210)  # sum of all numbers in the sequence\n    \n    # Express a2, a3, a4 in terms of a1 and d\n    eq5 = Eq(a1 + d, a2)\n    eq6 = Eq(a2 + d, a3)\n    eq7 = Eq(a3 + d, a4)\n    \n    # Solve the equations\n    solutions = solve((eq1, eq2, eq3, eq4, eq5, eq6, eq7), (n, a1, d, an))\n    \n    # Since we are expecting more than one solution, we are interested in the solution for n which is a positive integer\n    for solution in solutions:\n        if solution[n].is_real and solution[n] > 0:\n            return int(solution[n])\n\nans = solution()"
    ],
    "7863fd485a6b400695c4ed78bf2cec89": [
        "def solution():\n    total_days = 15\n    money = 100\n    for day in range(1, total_days + 1):\n        if day % 2 == 1:  # odd days, deposit £5\n            money += 5\n        else:  # even days, spend £8\n            money -= 8\n    return money\n\nans = solution()"
    ],
    "93c3881ba71b4288b0c393273f475ffb": [
        "def solution():\n    pattern = [70, 71, 72, 71, 70]\n    pattern_length = len(pattern)\n    index = (1004 - 1) % pattern_length\n    ans = pattern[index]\n    return ans\n\nans = solution()"
    ],
    "eee379a91f664722bc128506d5cbe9a3": [
        "def solution():\n    total_wine_gums = 20\n    children = 5\n    wine_gums_per_child = total_wine_gums // children\n    return wine_gums_per_child\n\nans = solution()"
    ],
    "eb7626e5b04249ad8fe88c3ada4dac42": [
        "def solution():\n    first_term = 10\n    last_term = 298\n    difference = 3\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_terms\n\nans = solution()"
    ],
    "a0a094786a444fc89f05eba94b8e1741": [
        "def solution():\n    ans = 123 + 456 - 789\n    return ans\n\nans = solution()"
    ],
    "01b66abf11cc46dbbbfb8fc1cacabe78": [
        "def solution():\n    ans = 25 * 24\n    return ans\n\nans = solution()"
    ],
    "242aa8419d55484d8e58d0da5659df75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    friends, chocolates = symbols('friends chocolates')\n\n    equation1 = Eq(chocolates - 18*friends, 41)\n    equation2 = Eq(23*friends - chocolates, 34)\n\n    solutions = solve((equation1, equation2), (friends, chocolates))\n\n    chocolates_left = solutions[chocolates] - 20*solutions[friends]\n\n    return chocolates_left\n\nans = solution()"
    ],
    "c9055cb54a8e4238a45292b86630682e": [
        "def solution():\n    # Check for numbers within the range of 100 to 999 (3-digit numbers)\n    for number in range(100, 1000):\n        # Count the number of true statements\n        true_statements = 0\n        # Student A: The number is a multiple of 27\n        if number % 27 == 0:\n            true_statements += 1\n        # Student B: The number is a multiple of 7\n        if number % 7 == 0:\n            true_statements += 1\n        # Student C: The sum of the digits of the number is 17\n        if sum(int(digit) for digit in str(number)) == 17:\n            true_statements += 1\n        # Student D: The number is a perfect square\n        if int(number**0.5)**2 == number:\n            true_statements += 1\n        # Student E: The number is a factor of 89100\n        if 89100 % number == 0:\n            true_statements += 1\n        \n        # Only three of these statements are true\n        if true_statements == 3:\n            return number\n    return None\n\nans = solution()"
    ],
    "0a3f07dfc88447c4904fa68658a039cc": [
        "def solution():\n    ans = 84.8 / 400\n    return ans\n\nans = solution()"
    ],
    "b2b289d532544e649564ecfd97481da8": [
        "def solution():\n    initial_money = 200\n    money_spent_book = initial_money * 0.15\n    remaining_money = initial_money - money_spent_book\n    money_spent_dvd = remaining_money * 0.30\n    money_left = remaining_money - money_spent_dvd\n\n    return money_left\n\nans = solution()"
    ],
    "00797547355649a7aeaa0ba63a6da114": [
        "def solution():\n    result = 5992 // 7\n    return result\n\nans = solution()"
    ],
    "ba5d90894baa46bfb336f5a957cccabb": [
        "def solution():\n    # Let 'm' represent the number of push-ups Mulan can do\n    # The inequality representing that Mulan can do more push-ups than the best boy soldier (who can do 50) is:\n    m = symbols('m')\n    inequality = m > 50\n    \n    # Since the question does not require a numerical answer, the inequality itself is the answer.\n    # The Python code will just return the representation of inequality in symbolic form.\n    # As the question stands, it is not required to solve the inequality, so the answer is the inequality itself.\n\n    return inequality\n\nans = solution()"
    ],
    "f2ee218e18d746598a977b19436df816": [
        "def solution():\n    balloons_needed = 40\n    balloons_blown = 22\n    balloons_burst = 3\n\n    balloons_remaining = balloons_needed - (balloons_blown - balloons_burst)\n\n    return balloons_remaining\n\nans = solution()"
    ],
    "a3164e1c9a684eb6985ada44124f8660": [
        "def solution():\n    return 3 * 27.6\n\nans = solution()"
    ],
    "8379e6cdd21b409f88bd041595e96f86": [
        "def solution():\n    # The provided details are insufficient to solve the problem.\n    # There is no information about the number of teams or the format of the tournament.\n    # Therefore, this question cannot be solved without additional details.\n    return \"Not enough details to solve the problem.\"\n\nans = solution()"
    ],
    "297630efead3458f83114baea5177aa8": [
        "def solution():\n    # The problem is equivalent to finding the smallest integer such that when we sum up\n    # 8 distinct positive integers starting from 1 to that integer (inclusive), the sum is at least 88.\n    \n    # We start with the minimum distribution (1, 2, 3, ..., 7) for the first seven children\n    min_distribution = sum(range(1, 8))\n\n    # Calculate the least number of pieces the last (eighth) child can get\n    # It is 88 - sum of minimum distribution + 1 (since the 8th piece must be distinct and greater than 7)\n    least_pieces = 88 - min_distribution + 1\n\n    return least_pieces\n\nans = solution()"
    ],
    "4d1afc03690e4059a20150252e9aa14a": [
        "def solution():\n    # After Tom takes 4 stones from Stack B, the stacks look like this:\n    # Stack A: 20 stones\n    # Stack B: 16 stones\n    \n    # For Jerry to win, he must ensure that after his turn, the number of stones\n    # in both stacks are the same. This way, no matter how Tom plays in the\n    # next round, Jerry can always mimic Tom's action and eventually pick the\n    # last stone. Since Stack A has 20 stones and Stack B has 16 stones, Jerry\n    # needs to take 4 stones from Stack A.\n    \n    stack_to_pick_from = \"A\"\n    stones_to_pick = 4\n    \n    # The answer template requires a string output.\n    return f\"Jerry must take {stones_to_pick} stone(s) from Stack {stack_to_pick_from}.\"\n\nans = solution()"
    ],
    "4d68899272944beeb370dd566bd82e48": [
        "def solution():\n    halfway_number = (15 + 37) / 2\n    return halfway_number\n\nans = solution()"
    ],
    "4883a159ef4841db869cc5b99c3cb8e9": [
        "def solution():\n    pails_filled = 4\n    volume_per_pail = 4\n    water_left = 7\n\n    original_volume = (pails_filled * volume_per_pail) + water_left\n    return original_volume\n\nans = solution()"
    ],
    "70882e282f9e400e9ee36f2422f02038": [
        "def solution():\n    # The ratio of girls to boys is 7:9\n    # Let the number of girls be 7x and the number of boys be 9x\n    # There are 16 more boys than girls, so we have the following equation\n    # 9x = 7x + 16\n    # This simplifies to 2x = 16\n\n    # Calculate the value of x\n    x = 16 / 2\n\n    # Calculate the total number of pupils (girls + boys)\n    total_pupils = (7 * x) + (9 * x)\n\n    return int(total_pupils)\n\nans = solution()"
    ],
    "1f11408ee01e48db98990edeed513497": [
        "def solution():\n    expected_sum = sum(range(1, 1 + 3 * 37, 3))\n    mistake_diff = expected_sum - 2011\n    mistake_position = mistake_diff // 6 + 1\n    return mistake_position\n\nans = solution()"
    ],
    "61ae1572690948d28178f82d9d76d770": [
        "def solution():\n    circumference = 840\n    interval = 14\n\n    num_trees = circumference // interval\n\n    return num_trees\n\nans = solution()"
    ],
    "9f102133c2f64e46b998d847ff6646d4": [
        "def solution():\n    # Since the numbers are consecutive, we can denote them as:\n    # x - 2, x - 1, x, x + 1, x + 2, where x is the middle number.\n    \n    # The sum of these numbers is: (x - 2) + (x - 1) + x + (x + 1) + (x + 2)\n    # Simplifying, we get: 5x = 160\n    # Thus, the middle number is:\n    x = 160 // 5\n    \n    # The student with the most balls has x + 2 balls\n    most_balls = x + 2\n    \n    return most_balls\n\nans = solution()"
    ],
    "2cd006f14c7e4d62957c102b37ad3764": [
        "def solution():\n    for hundreds_digit in range(1, 10):  # Hundreds digit must be between 1 and 9\n        for units_digit in range(10):    # Units digit must be between 0 and 9\n            M = 100 * hundreds_digit     # Construct number M with 0 in tens place\n            S = hundreds_digit + units_digit  # Sum of the digits in M\n            if M == 67 * S:\n                reversed_M = 10 * hundreds_digit + units_digit  # Reverse the digits in M\n                return reversed_M // S\n\nans = solution()"
    ],
    "c616e250bb3a4ea28dc67bcaf6e13e3c": [
        "def solution():\n    stick_length_cm = 200  # 2 meters in centimeters\n    piece_length_cm = 6\n    number_of_pieces = stick_length_cm // piece_length_cm\n\n    return number_of_pieces\n\nans = solution()"
    ],
    "ddd57f21e2e3415fb85f06496019817a": [
        "def solution():\n    ans = 2.7 + 5.31 - 0.08\n    return ans\n\nans = solution()"
    ],
    "ba849ade4b5b4888ba3f01dfb7156e06": [
        "from math import comb\n\ndef solution():\n    total_balls = 10\n    balls_to_select = 7\n    \n    # Calculate the number of combinations of 10 items taken 7 at a time\n    number_of_ways = comb(total_balls, balls_to_select)\n    \n    return number_of_ways\n\nans = solution()"
    ],
    "13881a97e1fa4780b71be7965da96d93": [
        "def solution():\n    base = 8\n    exponent = 30\n    ones_digit = (base ** exponent) % 10\n    return ones_digit\n\nans = solution()"
    ],
    "1f7ecb3b2fa446d9a36c3db0462423d0": [
        "def solution():\n    total_pages = 400\n    pages_per_day = 40\n\n    days = total_pages / pages_per_day\n\n    return days\n\nans = solution()"
    ],
    "67e5ac39390942c8a80324b810ad995a": [
        "def solution():\n    # We start with the fraction 13/10, and we will perform the operations in reverse\n    # to find the values of a, b, and c.\n\n    # Initial fraction\n    target_fraction = 13 / 10\n\n    # Step 1: Subtract 1 to find the reciprocal of the complex fraction part.\n    part_reciprocal = target_fraction - 1  # This is 1/(a + 1/(b + 1/c))\n\n    # Step 2: Take the reciprocal of the result to find a + 1/(b + 1/c)\n    a_and_rest = 1 / part_reciprocal  # This is (a + 1/(b + 1/c))\n\n    # 'a' is the integral part of 'a_and_rest'\n    a = int(a_and_rest)\n\n    # Repeat the process to find 'b'\n    part_reciprocal = a_and_rest - a  # This is 1/(b + 1/c)\n    b_and_c = 1 / part_reciprocal  # This is (b + 1/c)\n\n    # 'b' is the integral part of 'b_and_c'\n    b = int(b_and_c)\n\n    # And finally repeat the process to find 'c'\n    part_reciprocal = b_and_c - b  # This is 1/c\n    c = int(1 / part_reciprocal)   # This solves for 'c'\n\n    # Now we return the desired sum a + 2b + 3c\n    return a + 2 * b + 3 * c\n\nans = solution()"
    ],
    "c5d3aa356bb54af391702fd40639b5a9": [
        "def solution():\n    milk_per_cake = 10 / 12\n    shortcakes_made = 25 / milk_per_cake\n    return int(shortcakes_made)\n\nans = solution()"
    ],
    "3e2e9cfc559f4b45bfa32bae4770f18e": [
        "def solution():\n    total_questions = 20\n    points_correct = 5\n    points_incorrect = -3\n    \n    for correct in range(total_questions + 1):\n        incorrect = total_questions - correct\n        if correct * points_correct + incorrect * points_incorrect == 52:\n            return correct\n\nans = solution()"
    ],
    "739a7e30c1464e608503a893832d84ca": [
        "def solution():\n    days, max_peaches = 1, 0\n    while max_peaches < 100:\n        max_peaches += days\n        days += 1\n    return days - 1\n\nans = solution()"
    ],
    "dfcd76d3d08844e4b30d258dfaddff6c": [
        "def solution():\n    first_term = 10\n    last_term = 155\n    difference = 5\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "9ea706f25a51493ca9cf1548e9f7723b": [
        "def solution():\n    left_side = 0.3 * 100\n    right_side = 150\n    ans = right_side / left_side\n    return ans\n\nans = solution()"
    ],
    "8d827b1dc9424f36a3d0f0d1b0364775": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    equation1 = Eq(girls, boys + 12)\n    equation2 = Eq(boys + girls, 100)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "22edd0e9c1bc4f6b9f43fac11a14a0ea": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 21):\n        if i % 6 == 1:\n            total_sum += i\n    return total_sum\n\nans = solution()"
    ],
    "1e7aa3e2ce774fb09345a5574b3c93ae": [
        "def solution():\n    total_weight = 600  # Total weight of the sugar solution\n    sugar_percentage = 48 / 100  # Percentage of sugar in the solution\n\n    sugar_weight = total_weight * sugar_percentage  # Weight of the sugar in the solution\n    water_weight = total_weight - sugar_weight  # Weight of the water in the solution\n\n    return water_weight\n\nans = solution()"
    ],
    "77e366a8747b42c7b9ef3a9f1734ce77": [
        "def solution():\n    ans = 53.4 - 2.5\n    return ans\n\nans = solution()"
    ],
    "01afed4a053f422f832876b1f67b28f4": [
        "def solution():\n    num_times = 9\n    multiplier = 5\n    ans = sum([multiplier for _ in range(num_times)])\n    return ans\n\nans = solution()"
    ],
    "ee3ee1e00e154afca5040ce397cbbfac": [
        "def solution():\n    # If the youngest dwarf is x years old, then the next two youngest dwarfs are x+1 and x+2 years old\n    # The total of the three youngest dwarfs' ages is 42\n    # x + (x + 1) + (x + 2) = 42\n    # 3x + 3 = 42\n    # 3x = 39\n    # x = 13\n    # Therefore, the youngest dwarf is 13 years old\n    \n    # The oldest three are therefore consecutive years starting from x+4\n    # Their ages would thus be (x+4), (x+5), (x+6)\n    # (x+4) + (x+5) + (x+6)\n    # 3x + 15\n    # 3*13 + 15 = 39 + 15 = 54\n    # Thus, the total age of the oldest three is 54 years\n    \n    return 54\n\nans = solution()"
    ],
    "8ece565c32b34b0a85e297903d183180": [
        "def solution():\n    for N in range(5):\n        number = int(f\"12{N}4\")\n        if number % 3 == 0:\n            return N\n\nans = solution()"
    ],
    "2cfc7d4447c340039a6f001c399114d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b, c, d = symbols('a b c d', integer=True)\n    \n    # Define the equation based on the question\n    # \\overline{abcd} = 1000a + 100b + 10c + d\n    # \\overline{abc} = 100a + 10b + c\n    # \\overline{ab} = 10a + b\n    # Since \\overline{abcd}+\\overline{abc}+\\overline{ab}+a = 1370, we have:\n    # 1000a + 100b + 10c + d + 100a + 10b + c + 10a + b + a = 1370\n    equation = Eq(1000*a + 100*b + 10*c + d + 100*a + 10*b + c + 10*a + b + a, 1370)\n    \n    # Solve the equation considering the digits must be between 0 and 9\n    solution_set = solve(equation, (a, b, c, d))\n    for sol in solution_set:\n        if all(0 <= i <= 9 for i in sol):\n            return sol[0]*1000 + sol[1]*100 + sol[2]*10 + sol[3]\n    \n    # If no solution is found\n    return None\n\nans = solution()"
    ],
    "fbfcdbbeb2dd460580732e2456668e09": [
        "def solution():\n    scores = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "bc4d4257932a4e18a0a6054b2ad402a3": [
        "def solution():\n    # Define the sum of the whole numbers and the fractional part separately\n    whole_numbers = 19 + 199 + 1999 + 19999 + 199999\n    fraction_part = (4/5) * 5  # Since (4/5) is repeated 5 times\n  \n    # Combine the whole number sum and the fractional part\n    ans = whole_numbers + fraction_part\n  \n    return ans\n\nans = solution()"
    ],
    "06a5dba2a3c2483782a5e76f0725f304": [
        "def solution():\n    total_pence = 408\n    fraction = 5 / 8\n\n    ans = total_pence * fraction\n\n    return ans\n\nans = solution()"
    ],
    "75889ef5d68c4e27a3f50900db827671": [
        "def solution():\n    janice_age = 11\n    sister_age = janice_age + 5\n    current_total_age = janice_age + sister_age\n    years_needed = (35 - current_total_age)\n\n    return years_needed\n\nans = solution()"
    ],
    "0be90630e25149ab81224adc5eed02eb": [
        "def solution():\n    total_marks_for_3_tests = 75 * 3\n    total_marks_for_2_tests = 172\n    marks_in_remaining_test = total_marks_for_3_tests - total_marks_for_2_tests\n    return marks_in_remaining_test\n\nans = solution()"
    ],
    "374399623a6247989f8e869566efbabe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dad_current, son_current = symbols('dad_current son_current')\n\n    equation1 = Eq(dad_current - 6, 5 * (son_current - 6))\n    equation2 = Eq(dad_current + son_current, 78)\n\n    solutions = solve((equation1, equation2), (dad_current, son_current))\n\n    return solutions[dad_current]\n\nans = solution()"
    ],
    "009d4994f44241d6adfaf6cd25586a33": [
        "def solution():\n    ans = 0\n    for i in range(1, 9):\n        ans += i / i\n        for j in range(1, i):\n            ans += j / i * 2\n    return ans\n\nans = solution()"
    ],
    "6e7c5cd2038a4a78b493c785f03022af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    terry, gerald = symbols('terry gerald')\n\n    equation1 = Eq(gerald, terry + 57)\n    equation2 = Eq(terry + gerald, 777)\n\n    solutions = solve((equation1, equation2), (terry, gerald))\n\n    return solutions[gerald]\n\nans = solution()"
    ],
    "97a3f06ac00743faa22d113268079816": [
        "def solution():\n    # Let the number of milk chocolates be m.\n    # According to the question:\n    # 6 fruit drops = (2/7) * m --> m = (6 * 7)/2\n    m = (6 * 7) / 2\n    \n    # The number of milk chocolates (m) is (3/4) of the total number of sweets (t).\n    # m = (3/4) * t --> t = (4/3) * m\n    t = (4 / 3) * m\n    \n    return int(t)\n\nans = solution()"
    ],
    "96a62c49fc964fc58960e404634765ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    football, volleyball = symbols('football volleyball')\n\n    # Equation for buying 1 football and 2 volleyballs with $60\n    equation1 = Eq(football + 2 * volleyball, 60)\n    # Equation for buying 2 footballs and getting $16 back\n    equation2 = Eq(2 * football, 60 - 16)\n\n    # Solving the equations for the price of one football and one volleyball\n    solutions = solve((equation1, equation2), (football, volleyball))\n\n    # Getting the price of one volleyball\n    return solutions[volleyball]\n\nans = solution()"
    ],
    "aa07dd133e5a418397ba560c1b9b4019": [
        "def solution():\n    from statistics import mean, median, multimode\n\n    # Since the range is 6, and the mode is 7, we must have someone that is 7, and someone that is 7+6=13.\n    # We also know the mean is 9, so the sum of ages is 9*5=45.\n    for a in range(1, 14):\n        for b in range(a, 14):\n            ages = [7, 7, 13, a, b]  # Assume we have two 7 year olds, one 13 year old, and two unknowns\n            if mean(ages) == 9 and median(sorted(ages)) == 8 and multimode(ages) == [7]:\n                return sorted(ages)[-2]  # Return the second oldest member's age\n\nans = solution()"
    ],
    "3158da53b8bf4a7584a950b66fcdd9c7": [
        "def solution():\n    from itertools import permutations\n\n    # Get all permutations of '3541' since all digits are correct but in wrong positions\n    possible_numbers = [''.join(p) for p in permutations('3541')]\n\n    # Filter out possibilities based on the hints\n    def is_valid(num):\n        # First hint: two digits are correct and in correct positions\n        first_hint = (num[0] == '1') + (num[1] == '7') + (num[2] == '0') + (num[3] == '3') == 2\n        # Second hint: two digits are correct but in wrong positions\n        second_hint = (num.count('2') == 1) + (num.count('7') == 0) + (num.count('4') == 1) + (num.count('5') == 0) == 2\n        # Third hint: all digits are correct but in wrong positions\n        third_hint = all(num[i] != '3541'[i] for i in range(4))\n        # All digits should be different\n        all_different = len(set(num)) == 4\n        return first_hint and second_hint and third_hint and all_different\n\n    # Return the first valid number from possible_numbers\n    for number in possible_numbers:\n        if is_valid(number):\n            return number\n\nans = solution()"
    ],
    "c5979856964d41d596b0d0d097b051db": [
        "def solution():\n    number = 1000\n    difference = 630\n\n    ans = number - difference\n\n    return ans\n\nans = solution()"
    ],
    "925f4e025c564ed28a953715c34c7dc2": [
        "def solution():\n    ans = 57 + 8\n    return ans\n\nans = solution()"
    ],
    "0f51237988594921863438cf9edfab1c": [
        "def solution():\n    n = 20\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    return sum_of_cubes\n\nans = solution()"
    ],
    "047b5f556fb5469db5a0dd878deb688b": [
        "def solution():\n    first_term = 1\n    last_term = 49\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "ae6e80cdd9bc412b91d8c35ca30a7537": [
        "def solution():\n    import math\n    num_books = 3  # number of books to arrange\n    arrangements = math.factorial(num_books)  # find the number of arrangements (permutations)\n    return arrangements\n\nans = solution()"
    ],
    "ca3f6a5eb48f4f8e8b5fa5ab8277b925": [
        "def solution():\n    # A can't be in the first or last position, so it has 3 options (2nd, 3rd, or 4th place)\n    ways_for_A = 3  \n    # The remaining four people can be arranged in 4! ways\n    ways_for_others = 4 * 3 * 2 * 1  \n    total_ways = ways_for_A * ways_for_others\n    return total_ways\n\nans = solution()"
    ],
    "ecec780bcb244e6abbe08afdb7f88ba2": [
        "def solution():\n    import math\n    num_people = 16\n    # In each round half of the players are eliminated in a knockout tournament\n    # So, we need to find the number of times we can divide the number of players by 2 until we get 1\n    num_rounds = math.ceil(math.log(num_people, 2))\n    return num_rounds\n\nans = solution()"
    ],
    "df15059d1f2245d7a0ebad02edda73c2": [
        "def solution():\n    # let's denote yellow flowers as y, red flowers as r and pink flowers as p\n    # from the problem statement we have the following two relationships\n    # r = 3 * y (the number of red flowers is 3 times that of yellow flowers)\n    # p = y - 7 (the number of pink flowers is 7 fewer than that of yellow flowers)\n    # we were also told that there were 3 pink flowers (p = 3)\n    \n    # let's use these relationships to find the number of yellow flowers first\n    y = 3 + 7  # we substitute p = 3 into the second relationship\n    \n    # now we can find out the number of red flowers\n    r = 3 * y  # we use the number of yellow flowers to find the number of red flowers\n    \n    # the problem asks for the total number of red and yellow flowers\n    total_red_and_yellow = r + y\n    \n    return total_red_and_yellow\n\nans = solution()"
    ],
    "f74936f4fb2743fa9280b53676ad92ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x + 3*x + 2, 38 + 5*x - 8*x)\n    ans = solve(equation, x)\n\n    return ans[0]\n\nans = solution()"
    ],
    "8485b1846a4246249bff0e15b2a80830": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of boys and girls\n    boys, girls = symbols('boys girls')\n\n    # Ollie's initial ratio\n    initial_ratio = Eq(boys, 1.5 * girls)\n    \n    # After adding 12 boys and 12 girls\n    updated_boys = boys + 12\n    updated_girls = girls + 12\n    afternoon_ratio = Eq(updated_boys / updated_girls, 19 / 14)\n\n    # Solving the equations to find the number of boys and girls in the morning\n    solutions = solve((initial_ratio, afternoon_ratio), (boys, girls))\n    \n    # Calculating the total number of children in the afternoon\n    total_children_afternoon = solutions[boys] + solutions[girls] + 12 + 12\n    return total_children_afternoon\n\nans = solution()"
    ],
    "18ce5581f91b49fc8dc1bb6048706547": [
        "def solution():\n    scheduled_time = 5 * 60 + 30  # convert 5:30 pm to minutes\n    delay = 30  # delay in minutes\n    \n    arrival_time = scheduled_time + delay\n    arrival_hour = arrival_time // 60\n    arrival_minute = arrival_time % 60\n    \n    # Since the time is in pm and the hours could go beyond 12, we adjust it\n    if arrival_hour > 12:\n        arrival_hour -= 12\n\n    return f\"{arrival_hour}:{arrival_minute:02d} pm\"\n\nans = solution()"
    ],
    "257cbb8e43a84bf4bc33363d090d12f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    # Initial ratio equation: apples / oranges = 3 / 8\n    equation1 = Eq(apples / oranges, 3 / 8)\n    \n    # Ratio after removing one apple: (apples - 1) / oranges = 1 / 3\n    equation2 = Eq((apples - 1) / oranges, 1 / 3)\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "3f961fb2104d4e9e893a8f97f5406880": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):  # Hundreds digit must be 1-9\n        for tens in range(0, 10):  # Tens digit can be 0-9\n            for units in range(0, 10):  # Units digit can be 0-9\n                # Check if it's a V-number: high-low-high\n                if hundreds > tens and units > tens:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "c66ee3588fd642e996d89671f5c4c45a": [
        "def solution():\n    from math import factorial\n\n    # This is the problem of derangement, also known as subfactorial or !n\n    # The formula for a derangement is !n = (n-1)(!(n-1) + !(n-2))\n    # You can calculate directly or recursively. For n=6, I'll use direct calculation.\n    \n    # Using the direct formula for derangement: !n = n! * (1 - 1/1! + 1/2! - 1/3! + ... + (-1)^n/n!)\n    # For n=6, the result is the integer part of: 6! * (1 - 1/1! + 1/2! - 1/3! + 1/4! - 1/5! + 1/6!)\n    n = 6\n    derangement = factorial(n)\n    for i in range(1, n+1):\n        derangement += (-1)**i * factorial(n) // factorial(i)\n    \n    return derangement\n\nans = solution()"
    ],
    "30b9c89f50a64d548b5206fecab5e49e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n\n    equation1 = Eq(table, 2 * chair)\n    equation2 = Eq(2 * table + 3 * chair, 280)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "53091b38428546359c01b3a68ba14617": [
        "def solution():\n    total_spend = 48\n    num_classmates = 10\n    cost_notebook = 3\n    cost_pencils = 9\n\n    pencils = 0\n    while ((total_spend - (pencils * cost_pencils)) >= 0):\n        if (total_spend - (pencils * cost_pencils)) % cost_notebook == 0:\n            if ((total_spend - (pencils * cost_pencils)) / cost_notebook) + pencils == num_classmates:\n                return pencils\n        pencils += 1\n\nans = solution()"
    ],
    "f2f7e251a30f4cec8d22cfa15118db43": [
        "def solution():\n    total_students = 500\n    rows_first_floor = 9\n    students_per_row = 36\n    students_first_floor = rows_first_floor * students_per_row\n\n    students_second_floor = total_students - students_first_floor\n    return students_second_floor\n\nans = solution()"
    ],
    "fad26d9436534871b7a08dd833fbbf68": [
        "def solution():\n    ratio = 14 // 7\n    last_term = 56\n    next_term = last_term * ratio\n    \n    return next_term\n\nans = solution()"
    ],
    "814dfc7a21bc47f6afecf3149a685506": [
        "def solution():\n    # Total sum of the six consecutive even numbers\n    total_sum = 510\n    \n    # Since the numbers are consecutive even numbers, the mean and median are the same and can be found by dividing the total sum by 6\n    mean_median = total_sum / 6\n    \n    # The difference between the mean and the median for consecutive numbers is always 0\n    difference = 0\n    \n    return difference\n\nans = solution()"
    ],
    "ed79c0ee5e45459ca9d0eef32c921bcc": [
        "def solution():\n    ans = sum((-1)**(i % 2) * i for i in range(1, 32))\n    return ans\n\nans = solution()"
    ],
    "952275a830de41e986a33a873accdb47": [
        "def solution():\n    return 385 // 7\n\nans = solution()"
    ],
    "28db2d3d5a60452a9e31b2965f649f7d": [
        "def solution():\n    n = 50\n    num_zeros = 0\n    \n    while n > 0:\n        n //= 5\n        num_zeros += n\n    \n    return num_zeros\n\nans = solution()"
    ],
    "01993ccb07d9483683f5755975ca0a3a": [
        "def solution():\n    count = 0\n    for i in range(3, 48):\n        count += str(i).count('7')\n    return count\n\nans = solution()"
    ],
    "c71ea8f69b6c45d38f496733e04f53c0": [
        "def solution():\n    helen_original = 18\n    oliver_original = 22\n    helen_now = (helen_original + oliver_original) / 2 + 5  # divide total number of cards by 2 and add half the difference\n    return helen_now\n\nans = solution()"
    ],
    "78dd9ae80fbc4599b9a1de7b271c3242": [
        "def solution():\n    a = 40\n    b = a / 2\n    c = b / 2\n    total_value = a + b + c\n    return total_value\n\nans = solution()"
    ],
    "2a2937f5b7644f15afc477aa03c1c930": [
        "def solution():\n    total_mass = 250\n    sugar_concentration = 0.65\n    sugar_mass = total_mass * sugar_concentration\n    return sugar_mass\n\nans = solution()"
    ],
    "f18ab428f55e4e0181b741b70951b391": [
        "def solution():\n    initial_height = 12\n    climb_up = 23\n    climb_down = 31\n    climb_up_again = 17\n\n    final_height = initial_height + climb_up - climb_down + climb_up_again\n\n    return final_height\n\nans = solution()"
    ],
    "e686a0dd4b2744f6bfffc71fb37c57ec": [
        "def solution():\n    ans = 94 * 38\n    return ans\n\nans = solution()"
    ],
    "09b505251b1a41e4bcb506573632dfd0": [
        "import math\n\ndef solution():\n    N = 5 ** 100\n    num_digits = int(math.log10(N)) + 1\n    return num_digits\n\nans = solution()"
    ],
    "25b3374bcbaf4146b57baab9709569a8": [
        "def solution():\n    ans = 25 * 71\n    return ans\n\nans = solution()"
    ],
    "cd13264eaaab461380200e36148f3029": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mangoes, strawberries = symbols('mangoes strawberries')\n    \n    # mangoes = strawberries + 448\n    equation1 = Eq(mangoes, strawberries + 448)\n    # strawberries = 2 * (mangoes - 900)\n    equation2 = Eq(strawberries, 2 * (mangoes - 900))\n    \n    solutions = solve((equation1, equation2), (mangoes, strawberries))\n    \n    return solutions[strawberries]\n\nans = solution()"
    ],
    "59db59b0e0a842ca9b1e81136fe98f84": [
        "def solution():\n    # Let the smallest number be x\n    # The consecutive numbers will be x, x+1, x+2, x+3, x+4\n    # Their sum is 5x + 10\n    # We know the sum is 40, so 5x + 10 = 40\n    # Therefore, 5x = 40 - 10 => 5x = 30 => x = 6\n    # The smallest number is 6\n    return 6\n\nans = solution()"
    ],
    "057fbde681f548c7a8497fef0220ea57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * x - 8, 4)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a295b79b82d040ba90888d02ac50c7b7": [
        "def solution():\n    count = 0\n    for year in range(1900, 2001):\n        if sum(int(digit) for digit in str(year)) == 21:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "96b01291e9d14c7c96848c68852976a8": [
        "def solution():\n    ans = 2 * 13 * 3.5\n    return ans\n\nans = solution()"
    ],
    "2069f2cb20514f5e86df254f2165bc03": [
        "from itertools import permutations\n\ndef solution():\n    digits = '0134689'\n    multiples_of_9 = []\n\n    for perm in permutations(digits):\n        number = int(''.join(perm))\n        if number > 10000 and number % 9 == 0:  # 5-digit number and multiple of 9\n            multiples_of_9.append(number)\n\n    M = max(multiples_of_9)\n    N = min(multiples_of_9)\n    ans = (M - N) // 9\n    \n    return ans\n\nans = solution()"
    ],
    "6345c9979983478692f42a218f423f1a": [
        "def solution():\n    total_numbers = 99\n    prime_numbers = 25\n    composite_numbers = total_numbers - prime_numbers - 1  # Subtracting 1 for the number 1, which is neither prime nor composite\n\n    return composite_numbers\n\nans = solution()"
    ],
    "6b83b3fc0cf6400a82301aaa18e28565": [
        "def solution():\n    initial_sweets = 33\n    sweets_given_away = 8\n    sweets_left = initial_sweets - sweets_given_away\n    return sweets_left\n\nans = solution()"
    ],
    "3814b49678af4c93bb25cc8fb167d647": [
        "def solution():\n    # We know that in an arithmetic sequence, the nth term is given by a + (n-1)d\n    # where a is the first term and d is the common difference.\n    \n    # We can set up two equations based on the given information:\n    # for the fourth term: a + 3d = 39\n    # for the twelfth term: a + 11d = 57\n\n    # Subtract the first equation from the second to find d:\n    # d = (57 - 39) / (11 - 3)\n    d = (57 - 39) / (11 - 3)\n\n    # Now that we have d, we can find a from the equation of the fourth term:\n    # a = 39 - 3d\n    a = 39 - 3 * d\n\n    return a\n\nans = solution()"
    ],
    "0cdc1772d765463a83d6d817314f35cb": [
        "def solution():\n    from itertools import permutations\n\n    # We want the largest whole number, so we arrange the digits in descending order\n    digits = '1352'\n    all_permutations = sorted(permutations(digits), reverse=True)\n\n    # Get the first permutation which is the largest\n    largest_permutation = all_permutations[0]\n\n    # Convert the tuple to a string and then an integer\n    largest_number = int(''.join(largest_permutation))\n\n    return largest_number\n\nans = solution()"
    ],
    "e5d4d19b2a0b404d86003d303b4bd386": [
        "def solution():\n    ans = 4400004\n    return ans\n\nans = solution()"
    ],
    "2f4cada72bf546d2845330b0771d17c9": [
        "def solution():\n    total_salt = 30 * 0.30 + 20 * 0.20\n    total_mass = 30 + 20  # Before adding water\n    \n    # Let w be the amount of water to be added\n    # New concentration should be 10%, so we have:\n    # (total_salt) / (total_mass + w) = 10%\n    # Solve for w\n    w = (total_salt - 0.10 * total_mass) / 0.10\n\n    return w\n\nans = solution()"
    ],
    "58710cbbe23c42eca9ad3e2a797617c4": [
        "def solution():\n    incorrect_addend = 540\n    actual_addend = 450\n    incorrect_sum = 987\n    correct_sum = incorrect_sum - incorrect_addend + actual_addend\n    return correct_sum\n\nans = solution()"
    ],
    "a72010a49704494c91001e683893ccc5": [
        "def solution():\n    for num in range(1, 380):\n        if num * num + num == 380:\n            return num\n\nans = solution()"
    ],
    "ed6d6de30c0a478ab65c8423f336ce88": [
        "def solution():\n    johnson_speed = 600  # meters per minute\n    vicky_speed = 250  # meters per minute\n    total_distance = 3000  # meters\n    \n    # Time taken by Johnson to finish the race\n    johnson_time = total_distance / johnson_speed\n    \n    # Time taken by Vicky to finish the race\n    vicky_time = total_distance / vicky_speed\n    \n    # Time difference\n    time_difference = vicky_time - johnson_time\n    \n    return time_difference\n\nans = solution()"
    ],
    "0533c1ce2f634bc79e510f81aa3623bc": [
        "def solution():\n    # In the worst case for every number drawn, we get a card from a different suit,\n    # so we need to draw one more card after drawing 2 from each suit to guarantee\n    # at least 3 cards with the same number.\n\n    cards_to_draw_from_each_suit = 2  # Two from each of the four suits\n    suits = 4  \n\n    # We must draw two cards from each of the four suits (total 8 cards) without having three of the same number\n    # To get at least three of the same number, we must draw one more card\n    cards_to_ensure_three_of_a_kind = (cards_to_draw_from_each_suit * suits) + 1\n\n    return cards_to_ensure_three_of_a_kind\n\nans = solution()"
    ],
    "f13a082b45f944e2a679050f7cab968c": [
        "def solution():\n    from sympy import primerange\n    \n    prime_numbers = list(primerange(1, 21))\n    total_numbers = 20\n    \n    proportion = len(prime_numbers) / total_numbers\n\n    return proportion\n\nans = solution()"
    ],
    "1e7ec51916d44aea846598bf1fabbce4": [
        "def solution():\n    return (3.2 + 5.6) / 2\n\nans = solution()"
    ],
    "5a5711bd536c40dd88759a0c885cbbdf": [
        "def solution():\n    # According to the Pigeonhole Principle, if we want to make sure to get\n    # 29 balls of one color, 28 balls of another, and 10 balls of the last color,\n    # we should first consider the worst case scenario where we pick the maximum balls\n    # without fulfilling the requirement.\n\n    # The worst case scenario would be to pick balls as follows:\n    # Pick all white balls (30), which is the smallest number among the three colors.\n    # Then, pick all red balls (40).\n    # Until this point, we still haven't reached the condition for any color.\n\n    # Now, we need to pick the remaining balls to ensure we have 29 of one color,\n    # which we can guarantee by picking blue balls next.\n    # If we have 29 blue balls, then we have fulfilled the requirement for one color.\n    # So we pick 29 blue balls.\n    # Total balls = white balls + red balls + blue balls to ensure the condition\n    total_balls = 30 + 40 + 29\n    return total_balls\n\nans = solution()"
    ],
    "cd7eb0808ff5495d92aa81f731c5f0a9": [
        "def solution():\n    n = 7 - 12\n    return n\n\nans = solution()"
    ],
    "216ce3bfa9344644a2c44241a09784d3": [
        "def solution():\n    known_numbers = [12, 4, 6, 4, 2, 9, 7]\n    mean_value = 8\n    total_numbers = 8\n    total_sum = mean_value * total_numbers\n    missing_number = total_sum - sum(known_numbers)\n    return missing_number\n\nans = solution()"
    ],
    "050789f6f9e949ee9482ca9c43230bc9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of solution transferred from A to B and vice versa\n    x = symbols('x')\n    \n    # Equation for lime in bottle A after transfer\n    eq1 = Eq(0.1 * (5 - x) + 0.2 * x, (5 * 0.1 + 3 * 0.2) / (5 + 3) * (5 - x + x))\n\n    # Equation for lime in bottle B after transfer\n    eq2 = Eq(0.2 * (3 - x) + 0.1 * x, (5 * 0.1 + 3 * 0.2) / (5 + 3) * (3 - x + x))\n\n    # Solving the equations\n    solutions = solve((eq1, eq2), x)\n\n    return solutions[x]\n\nans = solution()"
    ],
    "3a777a84d1174b55af384cb43e211812": [
        "def solution():\n    sum_1_to_50 = 1275\n    sum_2_to_51 = sum_1_to_50 - 1 + 51  # Subtract the first term and add the new last term\n    return sum_2_to_51\n\nans = solution()"
    ],
    "4de8d3bd10bb44b382de57b1cba1fb5f": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    # Generate all permutations for the students other than C, since C's position\n    # is dependent on the positions of A and B.\n    students = ['A', 'B', 'D', 'E', 'F', 'G', 'H']\n    for perm in permutations(students):\n        # Find all positions where C could go in between A and B.\n        for i in range(7):\n            for j in range(i+1, 7):\n                if (perm[i] == 'A' and perm[j] == 'B') or (perm[i] == 'B' and perm[j] == 'A'):\n                    # Check if D and E are next to each other.\n                    if 'DE' in ''.join(perm) or 'ED' in ''.join(perm):\n                        # Check if F and G are next to each other.\n                        if 'FG' in ''.join(perm) or 'GF' in ''.join(perm):\n                            # A valid arrangement where C is in the middle of A and B.\n                            count += 1\n    return count\n\nans = solution()"
    ],
    "31df8f23c61440d0a0f22ef9a6d1d9f1": [
        "def solution():\n    notebook_prices = [5, 6, 8]\n    calendar_prices = [7, 9]\n    \n    return len(set([n+c for n in notebook_prices for c in calendar_prices]))\n\nans = solution()"
    ],
    "b0463272ddb246178e49ce0075bfc9a7": [
        "def solution():\n    ans = 546 - 287\n    return ans\n\nans = solution()"
    ],
    "661ce7b23d5040428b44b729610f90df": [
        "def solution():\n    students = 31\n    tables_per_row = 5\n    \n    rows_needed = (students + tables_per_row - 1) // tables_per_row\n\n    return rows_needed\n\nans = solution()"
    ],
    "0031ea04d15446af809c52112342ff37": [
        "def solution():\n    # The pattern in adding numbers looks like 123 is appended \n    # one more time with each subsequent number\n    # Observing the last three numbers: 321 (reverse of 123)\n    # It can be seen that the hundreds digit only depends on the pattern of 321\n    # Adding the numbers 321 + 321 would result in 642 (last three digits)\n    # Thus, the hundreds digit changes every 3 numbers (123 -> 246 -> 369 -> 3(0+1)92 -> 615 -> ...)\n    # We find the hundreds digit trend for each set of 3 numbers 321, 642, 963\n    # The hundreds digit is 3, 6, 9 respectively\n\n    hundreds_digit = [3, 6, 9]\n    # Find the index in the pattern 123s\n    # Since there are 123 '123's, we find the remainder when divided by 3 to get the position in the hundreds_digit list\n    index = (123 - 1) % 3\n\n    return hundreds_digit[index]\n\nans = solution()"
    ],
    "f39a2ffc63b2451faaf10086c439a64c": [
        "def solution():\n    # Given values\n    length_painting = 90\n    length_lego_smaller = 70.5\n    ratio_length_breadth = 5 / 2\n\n    # Calculate length of the lego based on the reduction\n    length_lego = length_painting - length_lego_smaller\n\n    # Calculate breadth of the lego using the ratio of length to breadth\n    breadth_lego = length_lego / ratio_length_breadth\n\n    # Return the maximum size of the breadth of the lego (rounded down to the nearest integer)\n    return int(breadth_lego)\n\nans = solution()"
    ],
    "c85383c567de4d2c87d36c00bdee31a8": [
        "def solution():\n    total_amount = 50 + 20 + 10 + 5  # Zoey's total amount with all coins\n    brother_amount = total_amount // 2  # Zoey's amount should be twice her brother's\n\n    for lost_coin in [50, 20, 10, 5]:\n        if total_amount - lost_coin == brother_amount:\n            return lost_coin\n\nans = solution()"
    ],
    "e1f6ce757e814cc98dd8bb318f3ce87e": [
        "def solution():\n    total_people = 25\n    like_bananas = 18\n    like_apples = 12\n\n    like_both = like_bananas + like_apples - total_people\n\n    return like_both\n\nans = solution()"
    ],
    "6ffd313df5c84cbea917dab85c602eb9": [
        "def solution():\n    jaan_distance = 200  # Jaan runs 200m\n    jaan_speed = 8  # Jaan's speed in m/s\n    jaan_time = jaan_distance / jaan_speed  # time taken by Jaan to finish 200m in seconds\n    kane_distance = jaan_distance - 12.5  # Kane is 12.5m behind when Jaan finishes\n    kane_speed = kane_distance / jaan_time  # Kane's speed in m/s\n    return kane_speed\n\nans = solution()"
    ],
    "b2195314d6904c97819e32043f734644": [
        "def solution():\n    cake_price = 5.50\n    milk_price = 3.75\n    voucher = 110 / 100  # Convert pence to pounds\n\n    total_pay = (cake_price + milk_price) - voucher\n\n    return total_pay\n\nans = solution()"
    ],
    "7516bd8e3a554c9e8a9888a667a1aa56": [
        "def solution():\n    normal_rate = 12\n    hours_worked = 10\n    overtime_rate = 1.25 * normal_rate\n    normal_hours = 8\n\n    overtime_hours = hours_worked - normal_hours\n    normal_pay = normal_hours * normal_rate\n    overtime_pay = overtime_hours * overtime_rate\n\n    total_pay = normal_pay + overtime_pay\n\n    return total_pay\n\nans = solution()"
    ],
    "d4d4df7fd96047a69ce80699a26c4864": [
        "def solution():\n    ans = 111 - 87\n    return ans\n\nans = solution()"
    ],
    "2c4866d958f643a58cb054fe6c157f1e": [
        "def solution():\n    return 35 * 60 / 100\n\nans = solution()"
    ],
    "aa03416c5455441d81c098442d3c2d35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the age of the younger brother and y be the age of the elder brother\n    x, y = symbols('x y')\n    \n    # The sum of their ages is 42\n    equation1 = Eq(x + y, 42)\n    \n    # A few years ago, the elder brother was the age of the younger brother now, so y-x years ago\n    # The younger brother was half the elder brother's age at that time\n    equation2 = Eq(x - (y - x), y / 2)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "1cb912909e124af1a7949a343cef8e13": [
        "def solution():\n    for num in range(10, 100):  # Two-digit numbers range from 10 to 99\n        if num % 5 == 3 and num % 7 == 3:\n            return num\n\nans = solution()"
    ],
    "dc92fc8ba3454847b1dd2c2308d30548": [
        "def solution():\n    # The number is composed of '928' repeated 33 times (99 digits)\n    repeated_times = 99 // 3\n    # Each '928' when divided by 9 gives a remainder of 1 (since 9+2+8 = 19, which gives a remainder 1 when divided by 9)\n    remainder_per_repetition = 1\n    # The remainder for the whole number is the sum of the remainders for each repetition, mod 9\n    total_remainder = (repeated_times * remainder_per_repetition) % 9\n    return total_remainder\n\nans = solution()"
    ],
    "20914560eb4c46a087218709875442de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the rates of John, Raj, and Pete\n    john_rate, raj_rate, pete_rate = symbols('john_rate raj_rate pete_rate')\n    \n    # The equations based on the problem statement\n    # 1 job/hour = sum of their individual rates\n    equation1 = Eq(john_rate + raj_rate + pete_rate, 1)\n    \n    # John and Raj can finish the job in 1 hour 12 minutes (72 minutes) = 5/6 hours\n    equation2 = Eq(john_rate + raj_rate, 5/6)\n    \n    # Raj and Peter can finish the job in 1 hour 30 minutes (90 minutes) = 3/2 hours\n    equation3 = Eq(raj_rate + pete_rate, 2/3)\n    \n    # Solve the equations for the individual rates\n    solutions = solve((equation1, equation2, equation3), (john_rate, raj_rate, pete_rate))\n\n    # Since we want the time Raj will take, we use Raj's rate and invert it to find the time in hours\n    raj_time_hours = 1 / solutions[raj_rate]\n\n    # Convert hours to minutes\n    raj_time_minutes = raj_time_hours * 60\n\n    return raj_time_minutes\n\nans = solution()"
    ],
    "d896015adbd04599a2cc26daea95baf7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(1 / (1 + 1 / (2 + 1 / (3 + 1 / x))), 30/43)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "9416b780ce1141bb848907b83016fcce": [
        "def solution():\n    # Take all the balls of colors that we don't want to get three of.\n    # There are 7 blue, 5 green, and 2 orange balls, so we can take:\n    # 2 from each of blue and green (2 * 2 = 4), and 2 from orange to potentially avoid getting three of a kind (total of 6 balls).\n    # At this point, we have:\n    # 8 white, 5 blue, 3 green, and no orange balls.\n    # The worst-case scenario to ensure we get three of the same color is to take 2 more blue and 2 more green.\n    # Since we are left with only white balls, the next ball we take will give us three white balls.\n    # So in total, we need to take 2 + 2 + 2 + 2 + 2 + 1 = 11 balls.\n    return 11\n\nans = solution()"
    ],
    "c9d8078e6b1f44b7ae76553201933a68": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    ans, _ = solve_congruence(*congruences)\n    \n    return ans\n\nans = solution()"
    ],
    "4f4fb0feeaea4c15b84a9162a5ffbd55": [
        "def solution():\n    for tens in range(1, 10):\n        for ones in range(0, 10):\n            original_number = tens * 10 + ones\n            swapped_number = ones * 10 + tens\n            if swapped_number == original_number // 3 + 3:\n                return original_number\n\nans = solution()"
    ],
    "440aa36a121f47c7b484c8c1f4367f6f": [
        "def solution():\n    apples_per_box = 14 / 4\n    boxes_needed = 66.5 / apples_per_box\n    return int(boxes_needed)\n\nans = solution()"
    ],
    "3419bae73fb749eeb7ef999b0bb66f8f": [
        "def solution():\n    # Let's say 'n' is the number of years later their sum of ages will be 40\n    # the sum of ages now is 34, the sum of ages n years later will be 34 + 2n (because they both will be n years older)\n    # so we have the equation: 34 + 2n = 40\n    # solving for n\n    n = (40 - 34) // 2\n\n    return n\n\nans = solution()"
    ],
    "57e9c2f24664499ba1b930195f008ac3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    teams = symbols('teams')\n    equation = Eq(teams * (teams - 1), 60)  # Each team plays 2*(teams-1) matches, and sum of all such matches = 30 matches * 2 \n    solution = solve(equation, teams)\n\n    return max(solution)  # We're only interested in the positive number of teams\n\nans = solution()"
    ],
    "b79a007b43284d9e9fd0dbf5e85e2911": [
        "def solution():\n    # If there are at most 4 participants from each of the 11 countries\n    # then there can be 11 * 4 participants without having 5 from the same country\n    max_participants_without_5_from_same_country = 11 * 4\n    \n    # According to the pigeonhole principle, we add one more participant to ensure\n    # that at least one country will have 5 participants\n    ans = max_participants_without_5_from_same_country + 1\n    \n    return ans\n\nans = solution()"
    ],
    "5bf4daf22b5a40a9887f31566b2d48fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y, z = symbols('x y z')\n    equation1 = Eq(x + y, 9)\n    equation2 = Eq(y + z, 15)\n    equation3 = Eq(z + x, 12)\n\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    return solutions[x] + solutions[y] + solutions[z]\n\nans = solution()"
    ],
    "eb26143450c84a16921ed5a98f9de962": [
        "def solution():\n    students = 31\n    tables_per_row = 5\n    rows_needed = (students + tables_per_row - 1) // tables_per_row\n    return rows_needed\n\nans = solution()"
    ],
    "0a280d66b3c54260bc3e5e5b92675682": [
        "def solution():\n    ans = 73 + 28 + 37 + 82\n    return ans\n\nans = solution()"
    ],
    "c155a8080b684c068448baa4beb540fd": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 4):\n        A, B, C, D = perm\n        if A != 0:\n            number1 = A * 1000 + B * 100 + C * 10 + D\n            number2 = D * 1000 + C * 100 + B * 10 + A\n            if number1 + number2 == 8888:\n                return A + B + C + D\n\nans = solution()"
    ],
    "93017999421c4dfb8d3245edf5e78291": [
        "def solution():\n    total_numbers = 1000  # from 1000 to 1999 inclusive\n    favorable_numbers = 1999 - 1499  # from 1500 to 1999 inclusive\n\n    probability = favorable_numbers / total_numbers\n    return probability\n\nans = solution()"
    ],
    "c35ec43fb3f648c2add882035b734b41": [
        "def solution():\n    # Catherine has 5 more cards than Ben\n    catherine_cards = 54\n    ben_cards = catherine_cards - 5\n\n    # Ash has three times as many cards as Ben\n    ash_cards = 3 * ben_cards\n\n    return ash_cards\n\nans = solution()"
    ],
    "48e3194ccba043bc8a5dc6cec126652f": [
        "def solution():\n    ans = 92 * 503\n    return ans\n\nans = solution()"
    ],
    "a239a2f7efec479d8b6dec2e19b56410": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kitty, nora = symbols('kitty nora')\n    equation1 = Eq(kitty + nora, 11)\n    equation2 = Eq(kitty, nora + 3)\n\n    solutions = solve((equation1, equation2), (kitty, nora))\n\n    return solutions[kitty]\n\nans = solution()"
    ],
    "467bd772358e49a68cedca5e2cd63eb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_money = symbols('total_money')\n    \n    spent = (3/7) * total_money\n    not_used = total_money - spent\n    difference = spent - not_used\n    \n    equation = Eq(difference, 12)\n    \n    solutions = solve(equation, total_money)\n    \n    amount_spent_on_bag = (3/7) * solutions[0]\n    \n    return amount_spent_on_bag\n\nans = solution()"
    ],
    "56dd9ea0cff247b9b36fe15ff5d91c1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')  # x is the length of the rope, y is the perimeter of the tree\n    equation1 = Eq(10 * y + 3, x)\n    equation2 = Eq(12 * y - 3, x)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y] * 8 + 3  # Calculate for 8 turns and add the extra length\n\nans = solution()"
    ],
    "61c1df4ae6dc4b04b1f7294d3a316b5c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2 * x + 6, 28)\n    original_number = solve(equation, x)\n\n    return original_number[0]\n\nans = solution()"
    ],
    "a12f50c13e3547a0ae15f90b1739b8cc": [
        "def solution():\n    # Since the dwarfs were born in seven consecutive years, their ages form an arithmetic sequence.\n    # Given that the sum of the youngest three is 42, if we denote the age of the middle dwarf as 'm',\n    # then the ages of the youngest three can be represented as (m-3), (m-2) and (m-1).\n    # Their sum is 3m - 6 = 42\n    # Solving for m gives us the age of the middle dwarf.\n\n    m = (42 + 6) // 3  # m is the age of the fourth dwarf\n\n    # The ages of the three oldest dwarfs will be (m+1), (m+2), and (m+3).\n    # Their sum is 3m + 6.\n\n    sum_oldest_three = 3 * m + 6\n\n    return sum_oldest_three\n\nans = solution()"
    ],
    "d85b8dc81daa4cff9e229ed18013f421": [
        "def solution():\n    num = 111\n    dots = 7\n    ans = num - sum(range(1, dots))\n    return ans\n\nans = solution()"
    ],
    "740c2ea1db4846958c463409a773c7f3": [
        "def solution():\n    return 2018 * 17\n\nans = solution()"
    ],
    "d111890eecfe4763af42bdbdd75ef647": [
        "def solution():\n    n = 100 // 5\n    ans = (1/6) * n * (n + 1) * (2 * n + 1) * (5 ** 2)\n    return int(ans)\n\nans = solution()"
    ],
    "6f0e1348bfdc4d1ea3352d71e2692834": [
        "def solution():\n    # Let's denote a, b, and c as the number of toys made by factories A, B, and C, respectively.\n    # We are given the following equations:\n    # a + b + c = 659 (total toys made by all factories)\n    # a + b = 447 (toys made by factory A and B)\n    # b + c = 335 (toys made by factory B and C)\n    \n    # We can calculate the number of toys made by factory C (c) by subtracting the toys made by A and B (a + b) from the total toys (a + b + c):\n    c = 659 - 447\n    \n    # Now we can find the number of toys made by factory B (b) by subtracting the toys made by factory C (c) from the toys made by B and C (b + c):\n    b = 335 - c\n    \n    return b\n\nans = solution()"
    ],
    "bb1ead10049c43daa3e195435cc53a8d": [
        "def solution():\n    # Let x be the number of stickers Mr. Ya initially has, and y be the number of pupils.\n    # If he gives 13 stickers to each pupil, he will have an excess of 190 stickers.\n    # If he gives 17 stickers to each pupil, he will have an excess of 50 stickers.\n    # Therefore, we have the following equations:\n    # x = 13y + 190 ...(1)\n    # x = 17y + 50  ...(2)\n\n    # We can solve for y by equating the value of x from both equations:\n    # 13y + 190 = 17y + 50\n    # 4y = 140\n    # y = 140 / 4\n    y = 140 // 4\n\n    # Substitute the value of y into any of the equations to find x:\n    # x = 13*35 + 190 (using equation (1))\n    x = 13 * y + 190\n\n    return x\n\nans = solution()"
    ],
    "c5c71659203f4ee49a62c35017eeabf9": [
        "def solution():\n    monthly_salary = 1.4\n    debt = 5.04\n    months_needed = debt / monthly_salary\n\n    return months_needed\n\nans = solution()"
    ],
    "308d0a3f39044f29afa6faf36c5ef1d5": [
        "def solution():\n    n = 72\n    factors = set()\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    ans = sum(factors)\n    return ans\n\nans = solution()"
    ],
    "676023bee5544241be8dd837eee97422": [
        "def solution():\n    numbers = [11, 13, 15, 17]\n    ans = sum(numbers) / len(numbers)\n    return ans\n\nans = solution()"
    ],
    "f5b829df546b43c1a2a3f325813d409e": [
        "def solution():\n    total_pupils = 500\n    difference = 30\n    boys = (total_pupils - difference) // 2\n    girls = boys + difference\n\n    return girls\n\nans = solution()"
    ],
    "a4e98db3396e4882871511a7668317b7": [
        "def solution():\n    initial_trays = 7\n    initial_mean = 13\n    additional_tray_sausages = 21\n    new_trays = initial_trays + 1\n\n    total_sausages = initial_trays * initial_mean + additional_tray_sausages\n    new_mean = total_sausages / new_trays\n\n    return new_mean\n\nans = solution()"
    ],
    "a65f0fe64967475ba4b828d09b4f6362": [
        "def solution():\n    ans = 1.99 + 2.99 + 3.99 + 4.99\n    return ans\n\nans = solution()"
    ],
    "c01ed3d066de41f4b0dc3b432983e51a": [
        "def solution():\n    count = 0\n    # Iterate through all 3-digit numbers\n    for i in range(100, 1000):\n        # Extract hundreds, tens, and ones digits\n        hundreds_digit = i // 100\n        tens_digit = (i // 10) % 10\n        ones_digit = i % 10\n        # Check if it's a V-number\n        if tens_digit < hundreds_digit and tens_digit < ones_digit:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "2acae01fc5ad425b87d9eeb0cca3489d": [
        "def solution():\n    result = (3 + 1/2) / (1/4)\n    return result\n\nans = solution()"
    ],
    "3c947304032d4050bb2c1007cb1ba227": [
        "def solution():\n    # Total distance covered when crossing the first bridge\n    total_distance_first_bridge = 137 + 263\n    # Time taken to cross the first bridge (in seconds)\n    time_first_bridge = 20\n\n    # Total distance covered when crossing the second bridge\n    # train_length + second_bridge_length = total_distance_second_bridge\n    # Time taken to cross the second bridge (in seconds)\n    time_second_bridge = 27\n\n    # Speed of the train is the same in both cases, so we can write\n    # speed = total_distance_first_bridge / time_first_bridge = (train_length + second_bridge_length) / time_second_bridge\n    # multiplying both sides by time_second_bridge to solve for second_bridge_length:\n    second_bridge_length = (total_distance_first_bridge * time_second_bridge / time_first_bridge) - 137\n\n    return second_bridge_length\n\nans = solution()"
    ],
    "a5ba7c5275b6482395f95a17e5b4bb62": [
        "def solution():\n    ans = 8.8 + 5.6\n    return ans\n\nans = solution()"
    ],
    "b0700754dfa7464eb071ad2a5f2c576a": [
        "def solution():\n    ans = 2014 * 40\n    return ans\n\nans = solution()"
    ],
    "879a251dabb24df9ab8ee19fc30fa517": [
        "def solution():\n    numerator = 2022 + 4567 * 7890\n    denominator = 4568 * 7890 - 5778\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "02b793a0cdc04afdb8f93895a893bda8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    file, storybook = symbols('file storybook')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(7 * file + 4 * storybook, 108)\n    equation2 = Eq(5 * file + 3 * storybook, 80)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (file, storybook))\n\n    # Total cost of 1 file and 1 storybook\n    total_cost = solutions[file] + solutions[storybook]\n\n    return total_cost\n\nans = solution()"
    ],
    "ca443bd6f6ae418ea84d9a56e57912a5": [
        "from itertools import permutations\n\ndef solution():\n    # Number of books \n    books = 7\n    # Since each of the three students must get at least one book, we start with giving \n    # one book to each student\n    chosen_books = 3\n    # The remaining books that can be shared in any manner amongst the three students\n    remaining_books = books - chosen_books\n    # Now we calculate permutations of the remaining books among the three students\n    # since the books are distinct and can be distributed in any order\n    perm = permutations([1, 2, 3], remaining_books)\n    # Convert the generator to a list to get the number of permutations\n    perm_list = list(perm)\n    # Every permutation can be associated to the 3 students in 3! ways \n    # because each student can get any permutation of books.\n    fact = 1*2*3  # This is 3! (factorial of 3)\n    # The total number of ways is then the number of permutations times the ways students \n    # can receive the permutations\n    total_ways = len(perm_list) * fact\n    return total_ways\n\nans = solution()"
    ],
    "894f8948c65e423aafef61f63e598f12": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Defining the symbols for watches and handbags\n    watch, handbag = symbols('watch handbag')\n    \n    # Setting up the equations\n    equation1 = Eq(3 * watch + 5 * handbag, 915)\n    equation2 = Eq(4 * watch + 2 * handbag, 632)\n    \n    # Solving the equations\n    solutions = solve((equation1, equation2), (watch, handbag))\n    \n    # Calculating the total cost for 2 watches and 2 handbags\n    total_cost = 2 * solutions[watch] + 2 * solutions[handbag]\n    \n    return total_cost\n\nans = solution()"
    ],
    "b12b9f5178d140e682c64da6f1cf80e5": [
        "def solution():\n    candies = 88\n    children = 8\n    # Use arithmetic progression sum formula: n/2 * (first_term + last_term)\n    # To find minimum sum for 7 children with different amount of candies each,\n    # we can sequentially distribute candies starting from 1\n    min_sum_for_others = (7 / 2) * (1 + 7)  # Arithmetic sum from 1 to 7\n\n    # The leftover candies for the 8th child\n    max_candies_for_last_child = candies - min_sum_for_others\n    return int(max_candies_for_last_child)\n\nans = solution()"
    ],
    "c7c1666cff0e4299806585caa2a77a6d": [
        "def solution():\n    rani = 456\n    brenda = 528\n    total = rani + brenda\n    average = total // 2\n\n    money_to_give = brenda - average\n\n    return money_to_give\n\nans = solution()"
    ],
    "ab227cc9f73a4cb5a765a8c55e9d31b4": [
        "def solution():\n    original_price = 80 + 20\n    discount_amount = 20\n    discount_percent = (discount_amount / original_price) * 100\n    return discount_percent\n\nans = solution()"
    ],
    "33f0af890b564ab1aa7a516852f730ee": [
        "def solution():\n    ans = 56 - 7 * 4 / (5 - 3)\n    return ans\n\nans = solution()"
    ],
    "cd598ad9ace144b2bfb79abe93cbc606": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    blue, red = symbols('blue red')\n    \n    equation1 = Eq((2/5)*blue, (3/5)*red)      # 2/5 of blue balls = 3/5 of the red balls\n    equation2 = Eq(blue + red, 125)            # total of blue balls and red balls = 125 \n    \n    # Solve the two equations\n    solutions = solve((equation1, equation2), (blue, red))\n    \n    difference = solutions[blue] - solutions[red]  # Compute the difference between blue and red balls\n    \n    return difference\n\nans = solution()"
    ],
    "9d9d88531760402f8ece6a4b9d1e5fd4": [
        "def solution():\n    # Grandmother's age on 1st December 2008\n    grandmother_age_2008 = 80\n\n    # Daughter's age on 1st December 1996\n    daughter_age_1996 = 40\n\n    # Difference in years between 1996 and 2008\n    year_difference = 2008 - 1996\n\n    # Daughter's age on 1st December 2008\n    daughter_age_2008 = daughter_age_1996 + year_difference\n\n    # Grandmother's age when her daughter was born\n    grandmother_age_when_daughter_born = grandmother_age_2008 - daughter_age_2008\n\n    return grandmother_age_when_daughter_born\n\nans = solution()"
    ],
    "904f0cdae54f4d4a9375c041f3a5ebf8": [
        "def solution():\n    # On the first pass, A can pass the ball to any of the 3 other individuals.\n    first_pass_options = 3\n    # On the second pass, the person who received the ball from A can pass it to\n    # one of the 2 remaining individuals, as they can't pass it back to A.\n    second_pass_options = 2\n    # On the third pass, the person who received the ball on the second pass\n    # must pass the ball back to A, so there is only 1 option.\n    third_pass_options = 1\n\n    # The total number of different methods is the product of the options\n    # at each pass.\n    total_methods = first_pass_options * second_pass_options * third_pass_options\n\n    return total_methods\n\nans = solution()"
    ],
    "53e2a3f3ec9744be90c9f22a4ed5982f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    nicole, eddy = symbols('nicole eddy')\n    equation1 = Eq(nicole, 3 * eddy)\n    equation2 = Eq(nicole - 130 + eddy - 38, 24)\n    \n    solutions = solve((equation1, equation2), (nicole, eddy))\n    \n    return solutions[nicole]\n\nans = solution()"
    ],
    "870e50a685df4a29a8af253e6fc7e1bc": [
        "def solution():\n    ans = 3.5 * 0.8 + 5.5 * 80 / 100 + 4 / 5 * 100 / 100\n    return ans\n\nans = solution()"
    ],
    "9b9cfe3c11e145838950ed7277589f2e": [
        "def solution():\n    # Calculate the amount of salt in each solution\n    leroy_salt = 200 * 0.35\n    lenny_salt = 300 * 0.50\n    \n    # Calculate the total amount of salt after mixing\n    total_salt = leroy_salt + lenny_salt\n    \n    # Calculate the total weight of the mixed solution\n    total_solution = 200 + 300\n    \n    # Calculate the concentration of the resulting solution\n    concentration = total_salt / total_solution\n    \n    return concentration\n\nans = solution()"
    ],
    "ecc3b3f2bec24a058e7c38b24394b25f": [
        "def solution():\n    total_candy = 36\n    mike_eaten = valeria_eaten = (total_candy - 6 - 22) / 2\n    valeria_candy = 22 + valeria_eaten\n    return valeria_candy\n\nans = solution()"
    ],
    "e191879db45c48ff90d30488b861c796": [
        "def solution():\n    import math\n    \n    # Total ways for 8 people to line up\n    total_ways = math.factorial(8)\n    \n    # Treat A and B as one unit because they want to stand next to each other\n    # Consider AB as one person, so we have 7 entities to arrange\n    AB_together_ways = math.factorial(7)\n    \n    # Ways for C and D to stand next to each other (treat CD as one unit)\n    # Then, we subtract this from the total ways for arranging 8 people to eliminate cases where C and D are together\n    CD_together_ways = math.factorial(7)\n    \n    # When treating A and B or C and D as one unit, we also need to consider the arrangements of A and B within that unit,\n    # and the same applies to C and D. So we need to multiply by 2 for each case (AB can be AB or BA, and CD can be CD or DC).\n    CD_together_including_AB = AB_together_ways * 2  # Because within those arrangments A and B are also next to each other\n    \n    # Finding the final answer by accounting for the ways A and B are together\n    # and then subtracting the ways in which C and D are also together\n    ans = (AB_together_ways * 2) - (CD_together_including_AB)\n    \n    return ans\n\nans = solution()"
    ],
    "363fad5f614943dfb0cf3e05c47b60d2": [
        "def solution():\n    total_solution = 300\n    sugar_percentage = 0.35\n\n    sugar_weight = total_solution * sugar_percentage\n    water_weight = total_solution - sugar_weight\n\n    return water_weight\n\nans = solution()"
    ],
    "9a2001545cec4ccaa9dd40221c502641": [
        "def solution():\n    # Given 12^50 > k^75\n    # So, we need to solve for k, which will be 12^(50/75)\n    k = 12 ** (50/75)\n    # Since we need the largest whole number, we'll take the floor of k\n    ans = int(k)\n    return ans\n\nans = solution()"
    ],
    "86d05dc47dc744c0ac39d1fd344f31fb": [
        "def solution():\n    final_count = 133\n    thrown_away = 34\n    bought = 25\n    initial_count = final_count - bought + thrown_away\n    return initial_count\n\nans = solution()"
    ],
    "c67845741aaf419ca66672bdfdbdb918": [
        "def Psi_operation(a, b):\n    if a < b:\n        return a * b + 2\n    else:\n        return a - b + 2\n\ndef solution():\n    first_operation = Psi_operation(14, 13)\n    ans = Psi_operation(first_operation, 12)\n    return ans\n\nans = solution()"
    ],
    "525762f2f6e042f985a9eb27b6ebb6fd": [
        "def solution():\n    # since the series is just a count from 1 to 19\n    # we can simply convert the numbers to strings and get their length\n    series_length = sum(len(str(i)) for i in range(1, 20))\n    return series_length\n\nans = solution()"
    ],
    "3718c228fa6540b487cde297c66ba680": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    girls = symbols('girls')\n    boys = 36 - girls\n\n    total_average = 89\n    girls_average = 88\n    boys_average = 91\n\n    total_score = total_average * 36\n    girls_score = girls_average * girls\n    boys_score = boys_average * boys\n\n    equation = Eq(girls_score + boys_score, total_score)\n\n    girls_number = solve(equation, girls)[0]\n\n    return girls_number\n\nans = solution()"
    ],
    "ad5c7faae0734a86b7fadb1303a9f16e": [
        "def solution():\n    # Let's denote the number of birds as 'b'.\n\n    # Number of legs for each animal:\n    # Cats: 2 cats * 4 legs/cat = 8 legs\n    # Dogs: 2 dogs * 4 legs/dog = 8 legs\n    # Rabbits: 1 rabbit * 4 legs/rabbit = 4 legs\n    # Birds: b birds * 2 legs/bird = 2b legs\n\n    # Total legs:\n    total_legs = 8 + 8 + 4  # Sum of legs of cats, dogs, and the rabbit\n\n    # Using the total number of legs provided:\n    # Total legs of all pets, including birds = 28 legs\n\n    # We can find out the number of birds by the equation:\n    # total_legs + 2b = 28\n    # 2b = 28 - total_legs\n    # b = (28 - total_legs) / 2\n\n    b = (28 - total_legs) / 2\n\n    return int(b)\n\nans = solution()"
    ],
    "26344c38e9c448e8b356d146763a48a2": [
        "def solution():\n    time_for_original_fence = 6  # hours taken for original fence\n    original_fence_length_multiplier = 1 \n    new_fence_length_multiplier = 2  # neighbor's fence is twice as long\n    desired_time_for_new_fence = 5  # hours to complete the neighbor's fence\n    \n    # Original team's work rate per hour for the entire fence\n    original_team_work_rate = (5 * original_fence_length_multiplier) / time_for_original_fence\n    \n    # Work rate needed per hour to complete the neighbor's fence in less than 5 hours\n    needed_team_work_rate = new_fence_length_multiplier / desired_time_for_new_fence\n    \n    # Minimum number of people required to achieve the needed work rate\n    # Since we cannot have a fraction of a person, we use ceil to round up to the nearest whole person\n    from math import ceil\n    min_people = ceil(needed_team_work_rate / original_team_work_rate)\n    \n    return min_people\n\nans = solution()"
    ],
    "88d1b67e1ad54227ad1e912db7853b6a": [
        "def solution():\n    ans = 694 + 888\n    return ans\n\nans = solution()"
    ],
    "c3d38fc4ca7d4aab8188ce6862d374c4": [
        "def solution():\n    time_for_one_shift = 12 // 4  # Time to walk up one flight of stairs\n    flights_in_30_mins = 30 // time_for_one_shift\n    \n    return flights_in_30_mins\n\nans = solution()"
    ],
    "a36703deada040f4bfd94e22b7d1fa9b": [
        "def solution():\n    return 80 * 30\n\nans = solution()"
    ],
    "cbdb7ff490c04e3a92b3782d84c28e6a": [
        "def solution():\n    butter_per_cookie = 8 / 50\n    cookies_with_new_butter = 21.6 / butter_per_cookie\n    return cookies_with_new_butter\n\nans = solution()"
    ],
    "0416bb6956e54f29ba4f1c69d845e321": [
        "def solution():\n    # Convert base 8 number to base 10\n    N_base10 = int(str(12345654321), 8)\n    \n    # Calculate remainders\n    remainder_7 = N_base10 % 7\n    remainder_9 = N_base10 % 9\n    \n    # Sum of remainders\n    sum_of_remainders = remainder_7 + remainder_9\n    \n    return sum_of_remainders\n\nans = solution()"
    ],
    "e377472a9c68458e9891ee67442a2346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    belt, wallet, handbag = symbols('belt wallet handbag')\n    \n    equation1 = Eq(wallet, belt + 54)\n    equation2 = Eq(handbag, wallet + 300)\n    equation3 = Eq(belt + wallet + handbag, 840)\n    \n    solutions = solve((equation1, equation2, equation3), (belt, wallet, handbag))\n\n    return solutions[belt]\n\nans = solution()"
    ],
    "d620d54398de4f13a1c45f2bf4327f65": [
        "def solution():\n    ans = 96 // 3\n    return ans\n\nans = solution()"
    ],
    "4aedbf6d92b44b4dad2e2eed5fdfabf3": [
        "def solution():\n    combined_age_three_years_ago = 7\n    combined_age_now = combined_age_three_years_ago + 2 * 3  # Each cat is 3 years older now\n    combined_age_in_four_years = combined_age_now + 2 * 4  # Each cat will be 4 years older\n    return combined_age_in_four_years\n\nans = solution()"
    ],
    "2d92ec4620534efbbcc9c406a5deeb1f": [
        "def solution():\n    ans = 513 - 236\n    return ans\n\nans = solution()"
    ],
    "38aa9d3b89004c14ad2ed83c80367f5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    book, magazine = symbols('book magazine')\n    \n    # 2 books and 3 magazines cost $24.90\n    equation1 = Eq(2 * book + 3 * magazine, 24.90)\n    # 1 book and 1 magazine cost $10\n    equation2 = Eq(book + magazine, 10)\n    \n    # solve the system of equations\n    solutions = solve((equation1, equation2), (book, magazine))\n    \n    return solutions[magazine]\n\nans = solution()"
    ],
    "284741c33dc2463f995c4965d27e5abb": [
        "def solution():\n    n = 99\n    sum_of_squares = n * (n + 1) * (2*n + 1) // 6\n    sum_of_n = n * (n + 1) // 2\n    ans = sum_of_squares + sum_of_n\n    return ans\n\nans = solution()"
    ],
    "bc7bc5a7f5724db3ab52e783cbad387f": [
        "def solution():\n    return 637 - 473\n\nans = solution()"
    ],
    "6bb84ead0f0149a69267c203c7dcf79f": [
        "def solution():\n    ans = 0\n    for i in range(1, 2016 + 1):\n        if 2016 % (i*i) == 0:\n            ans += 1\n    return ans\n\nans = solution()"
    ],
    "006b556a40774bb786928b5e8628397b": [
        "def solution():\n    # Let the first number be x.\n    # Then the consecutive numbers are x+1 and x+2.\n    # Their sum is x + (x+1) + (x+2) = 60.\n    # Solving for x we get 3x + 3 = 60 => 3x = 57 => x = 19.\n    # The largest number is x+2.\n    x = (60 - 3) // 3\n    largest_number = x + 2\n    return largest_number\n\nans = solution()"
    ],
    "3e20cfd987aa4c41955c78eb36cd75ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7*x - 3*x + 2, 22)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "33aab4041f0f402a8174696b588641a1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    big_p, small_p = symbols('big_p small_p')\n\n    equation1 = Eq(3*big_p + 4*small_p, 68)\n    equation2 = Eq(4*big_p + 2*small_p, 64)\n\n    solutions = solve((equation1, equation2), (big_p, small_p))\n\n    return solutions[big_p]\n\nans = solution()"
    ],
    "7fadce2ae96f472cb7d9703a5f808b47": [
        "def solution():\n    for A in range(1, 10):\n        for B in range(0, 10):\n            for C in range(1, 10):\n                for D in range(0, 10):\n                    if A != B and A != C and A != D and B != C and B != D and C != D:\n                        if (A * 101 + B * 10) + (C * 101 + D * 10) == 726:\n                            return A + B + C + D\n\nans = solution()"
    ],
    "f5bcf94ffda8467a907da5740aab11b5": [
        "def solution():\n    # Worst-case scenario for not getting a yellow shirt involves taking all the other shirts first\n    max_non_yellow = 6 + 4 + 12  # all the orange, pink, and brown shirts\n    \n    # After taking all non-yellow shirts, Annabella must take at least one more shirt to ensure a yellow\n    return max_non_yellow + 1\n\nans = solution()"
    ],
    "ebd40fb218054510aeb86c96dfced3fc": [
        "def solution():\n    total_pens_needed = 70 * 3\n    packs_needed = -(-total_pens_needed // 8)  # Ceiling division because we can't buy a fraction of a pack\n    return packs_needed\n\nans = solution()"
    ],
    "96a1c9809ffd4f579596d44d35b5896c": [
        "def solution():\n    return 249 * 31\n\nans = solution()"
    ],
    "dd56e7a3afe744abb3a668a3d42ef994": [
        "def solution():\n    ans = 3.2 + 6.41 + 0.207\n    return ans\n\nans = solution()"
    ],
    "bfc090949ff6429496bb1b10076bb3dd": [
        "def solution():\n    # Convert all mixed fractions to improper fractions\n    mixed_fractions = [9 + 4/5, 99 + 4/5, 199 + 4/5, 2999 + 4/5, 39999 + 4/5, 1]\n\n    # Add all fractions\n    sum_fractions = sum(mixed_fractions)\n\n    return sum_fractions\n\nans = solution()"
    ],
    "d24262d1d37a487682fd61310661cfd5": [
        "def solution():\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = 6*x - (2 - (3*x - 16))\n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "2908d71fd0ef401ab05cc4649db1ec58": [
        "def solution():\n    # Assuming the sequence has a constant difference between its terms\n    # Calculate the difference between the known sequence numbers\n    difference1 = 80 - 73  # Difference between the third and fourth term\n    difference2 = 73 - 66  # Difference between the fourth and fifth term\n    \n    # Assuming the sequence is linear, the second term should follow the same difference\n    second_term = 94 - difference1  # Calculate the second term\n    \n    return second_term\n\nans = solution()"
    ],
    "7e6235a5f2e34ffeb942f81fedd76b05": [
        "def solution():\n    sugar = 30\n    water = 170\n    total_solution = sugar + water\n    concentration = (sugar / total_solution) * 100  # concentration as a percentage\n    return concentration\n\nans = solution()"
    ],
    "f569465348234fb386433e1f3c49b08a": [
        "def solution():\n    age = 1\n    while True:\n        if (age % 2 == 1) and (age % 3 == 1) and (age % 4 == 1) and (age % 6 == 1) and (age % 7 == 0):\n            return age\n        age += 1\n\nans = solution()"
    ],
    "d1da302670c445868750665ea9e1e53d": [
        "def solution():\n    for age in range(1, 58):\n        if age % 7 == 0 and (age + 1) % 9 == 0:\n            return age\n\nans = solution()"
    ],
    "b496ffab1ef6486791ac9a2562ae6998": [
        "def solution():\n    # Amount of juice in wine glasses\n    wine_glasses_juice_ml = 25 * 100\n    # Amount of juice in tumblers\n    tumblers_juice_ml = 12 * 200\n    # Total amount of juice in ml\n    total_juice_ml = wine_glasses_juice_ml + tumblers_juice_ml\n    # Convert ml to litres\n    total_juice_l = total_juice_ml / 1000\n    # Calculate number of cartons needed, rounding up to the nearest whole number\n    cartons_needed = -(-total_juice_l // 1)  # Ceiling division\n\n    return int(cartons_needed)\n\nans = solution()"
    ],
    "9aee79585275499c8017c3e2e4499346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of avocados, peaches, and lemons be 2x, 9x, and 8x respectively\n    x = symbols('x')\n\n    # After selling some fruits, the remaining fruits will be\n    # (2x - 52) avocados, (9x - 12) peaches, and (8x - 60) lemons\n\n    # The new ratio of peaches to lemons is 6:5\n    equation = Eq(6*(8*x - 60), 5*(9*x - 12))\n\n    # Solve for x\n    x_value = solve(equation, x)[0]\n\n    # Calculate the remaining number of fruits\n    avocados_left = 2*x_value - 52\n    peaches_left = 9*x_value - 12\n    lemons_left = 8*x_value - 60\n    \n    # Total fruits left\n    total_fruits_left = avocados_left + peaches_left + lemons_left\n\n    return total_fruits_left\n\nans = solution()"
    ],
    "7b9872c76da143f7914b38327c9d1581": [
        "def solution():\n    total_people = 15\n    position_from_front = 9\n    position_from_end = total_people - position_from_front + 1\n    return position_from_end\n\nans = solution()"
    ],
    "f17a871c84cc4e1fb96fb91b864f0695": [
        "def solution():\n    n = 620 / 20\n    return int(n)\n\nans = solution()"
    ],
    "68464cb7965d42e2974a5374db0adaf7": [
        "def solution():\n    ans = 125 * 32 * 25 * 7\n    return ans\n\nans = solution()"
    ],
    "c7265fcca4564dfbbed3794cc4c26974": [
        "def solution():\n    total_students = 60\n    multiples_of_3 = total_students // 3\n    multiples_of_5 = total_students // 5\n    multiples_of_15 = total_students // 15  # Multiples of both 3 and 5\n\n    # Initially all facing the teacher\n    # Turn around for multiples of 3 and 5, but if a student is a multiple of both,\n    # he/she will turn around twice, ending up facing the teacher again\n    facing_teacher = total_students - (multiples_of_3 + multiples_of_5 - 2 * multiples_of_15)\n\n    return facing_teacher\n\nans = solution()"
    ],
    "ac493b6b7d0a401888bc24c649523bc1": [
        "def solution():\n    n = (36 / 3) / 4\n    return n\n\nans = solution()"
    ],
    "a04cac85a9884a9187a1ad6d908f193b": [
        "def solution():\n    # Since we're only interested in the last digit, we can observe the pattern of last digits of powers of 2:\n    # 2^1 = 2 --> last digit is 2\n    # 2^2 = 4 --> last digit is 4\n    # 2^3 = 8 --> last digit is 8\n    # 2^4 = 16 --> last digit is 6\n    # 2^5 = 32 --> last digit is 2\n    # and so on...\n    # As seen, every 4th power, the last digit repeats: 2, 4, 8, 6\n    # Thus, we can find the last digit after 859433 powers of 2 by calculating 859433 modulo 4 to find where it fits in the cycle\n    \n    power_cycle_position = 859433 % 4\n    \n    # Since our cycle is [2, 4, 8, 6], we can map the modulo result to the last digit\n    # If modulo is 1, last digit is 2\n    # If modulo is 2, last digit is 4\n    # If modulo is 3, last digit is 8\n    # If modulo is 0, last digit is 6 (since 4th position in cycle corresponds to modulo 0)\n    \n    last_digit_cycle = {1: 2, 2: 4, 3: 8, 0: 6}\n    \n    # Get the last digit from the cycle\n    last_digit = last_digit_cycle[power_cycle_position]\n    \n    return last_digit\n\nans = solution()"
    ],
    "368db30ced514aa0a4c14fd84ae26f51": [
        "def solution():\n    from sympy.ntheory import lcm\n    \n    least_common_multiple = lcm(2, 4, 6)  # Find the LCM of 2, 4, 6\n    age = least_common_multiple + 1  # Peter's age gives remainder 1 when divided by 2, 4, or 6\n    \n    while age % 7 != 5:  # Check for the condition when divided by 7 gives remainder 5\n        age += least_common_multiple\n    \n    return age\n\nans = solution()"
    ],
    "43dfa2d812fc44359cbc9ed198dfed87": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial number of sweets Jill has and y be the initial number of sweets Jess has.\n    x, y = symbols('x y')\n\n    # Jill has six sweets for every five sweets Jess has.\n    equation1 = Eq(x, 6 * y / 5)\n\n    # Jill gives eight sweets to Jess.\n    # New count for Jill -> x - 8\n    # New count for Jess -> y + 8\n    # Now, Jill has four sweets for every seven sweets Jess has.\n    equation2 = Eq(x - 8, 4 * (y + 8) / 7)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Calculate the total number of sweets.\n    total_sweets = solutions[x] + solutions[y]\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "76aa21da5d384dccb38483d763fd552d": [
        "from itertools import permutations\n\ndef solution():\n    max_digit = 7\n    digits = list(range(1, max_digit + 1))\n\n    for num_digits in range(max_digit, 0, -1):\n        for perm in permutations(digits, num_digits):\n            num = int(''.join(map(str, perm)))\n            if all(num % d == 0 for d in perm):\n                return num\n\nans = solution()"
    ],
    "9bbae54e3737448abd3501177769689d": [
        "def solution():\n    ans = 0\n    for i in range(1, 900, 2):\n        sum = 0\n        n = 0\n        while sum < 900:\n            sum += (i + n)\n            n += 2\n        if sum == 900 and n // 2 > ans:\n            ans = n // 2\n    return ans\n\nans = solution()"
    ],
    "8d91d54e4c4b4bc6b73c53b8dd7ea30a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(52 - (4 * x - 3), 47)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e3b5e72653f44428b98d1a54dd056bca": [
        "def solution():\n    # Let A, B, C represent the weights of Adam, Ben, and Carl respectively\n    A_plus_B = 102 # Adam and Ben weigh together\n    B_plus_C = 97  # Ben and Carl weigh together\n    A_plus_C = 93  # Adam and Carl weigh together\n\n    # In order to find the total weight, we add up A+B, B+C and A+C\n    # Notice that by doing this, we will count the weight of each person twice\n    total_weight_twice = A_plus_B + B_plus_C + A_plus_C\n\n    # Since the total weight is counted twice, we divide by 2 to get the actual total weight\n    total_weight = total_weight_twice / 2\n\n    return int(total_weight)\n\nans = solution()"
    ],
    "7c0b46427c0c48029b6941ed62bf32c8": [
        "def solution():\n    for num in range(10, 100):  # Considering only two-digit numbers.\n        if num % 3 == 2 and num % 11 == 2:\n            return num\n\nans = solution()"
    ],
    "531f65fc27864e3a881f25dddace2c6a": [
        "def solution():\n    divisor = 53\n    remainder = 2\n\n    smallest_number = divisor + remainder\n    while smallest_number <= 120:\n        smallest_number += divisor\n\n    return smallest_number\n\nans = solution()"
    ],
    "0de8f8f3eac5485fa0fae9f57ecc6d21": [
        "def solution():\n    return 46 * 37\n\nans = solution()"
    ],
    "c5cba4277873402db4efd1be60e4e847": [
        "def solution():\n    length = 4.5\n    width = 6.2\n    perimeter = 2 * (length + width)\n    return perimeter\n\nans = solution()"
    ],
    "6ffedd49a405465ab88697b2f7d7ae79": [
        "def solution():\n    numbers = [8.05, 8.50, 8.505, 8.055]\n    ans = min(numbers)\n\n    return ans\n\nans = solution()"
    ],
    "1743bb23aed04ec2b7a7f8fec1d14118": [
        "def solution():\n    height_metres = 2\n    height_centimetres = 2\n\n    # Convert centimetres to metres\n    height_centimetres_to_metres = height_centimetres / 100\n\n    # Total height in metres\n    total_height_metres = height_metres + height_centimetres_to_metres\n\n    return total_height_metres\n\nans = solution()"
    ],
    "4348474e45be4c4784a60dab18304844": [
        "def solution():\n    first_test_score = 60\n    second_test_increase = 0.25\n    third_test_decrease = 0.20\n    \n    second_test_score = first_test_score * (1 + second_test_increase)\n    third_test_score = second_test_score * (1 - third_test_decrease)\n    \n    total_score = first_test_score + second_test_score + third_test_score\n    \n    return int(total_score)\n\nans = solution()"
    ],
    "481bd4bd37034fc8a43530a5477069e1": [
        "def solution():\n    principal_amount = 5000\n    interest_rate = 0.03\n    years = 2\n    \n    # Compound interest formula: A = P(1 + r/n)^(nt)\n    # In this case, the interest is compounded annually, so n = 1\n    final_amount = principal_amount * ((1 + interest_rate/1)**(1*years))\n    \n    return final_amount\n\nans = solution()"
    ],
    "1634653b15164af9958af85781121677": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bookmarks, pupils = symbols('bookmarks pupils')\n\n    equation1 = Eq(bookmarks - 4 * pupils, 8)\n    equation2 = Eq(bookmarks - 6 * pupils, -10)\n\n    solutions = solve((equation1, equation2), (bookmarks, pupils))\n\n    return solutions[bookmarks]\n\nans = solution()"
    ],
    "b8670c2b439149d7a72fcf4fe146bf96": [
        "def solution():\n    total_savings = 13 + 18 + 5\n    mean_savings = total_savings / 3\n    return mean_savings\n\nans = solution()"
    ],
    "26527b2a0a2c4e4d877500b4ff8a3656": [
        "def solution():\n    count = 0\n    # Loop through all the hours and minutes of the day\n    for hour in range(24):\n        for minute in range(60):\n            # Convert hour and minute to string and concatenate\n            time = f\"{hour:02d}{minute:02d}\"\n            # Count if there are at least two '4's in the time\n            if time.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "ffc16ac75f7f47fcb1d3eb07fae6db1e": [
        "def solution():\n    from sympy import isprime\n\n    if isprime(233):\n        ans = True\n    else:\n        ans = False\n\n    return ans\n\nans = solution()"
    ],
    "f4f08eaaa1b64a658de25585dad20e40": [
        "def solution():\n    sum_of_squares = sum(i**2 for i in range(7, 106, 7))\n    return sum_of_squares\n\nans = solution()"
    ],
    "ba6364de23e74495bec276c83b164e14": [
        "def solution():\n    total = 4.22 + 31.49 + 0.76\n    return total\n\nans = solution()"
    ],
    "6c7e9b74e26440e9abed54180422f05b": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(130, 151))\n    return len(primes)\n\nans = solution()"
    ],
    "bfadf094fc4b4d4f952061bbaeb8b5d0": [
        "def solution():\n    # Multiple of 4 greater than or equal to 56\n    first_multiple = (56 + 3) // 4\n    # Multiple of 4 less than or equal to 92\n    last_multiple = 92 // 4\n    \n    # Calculate the number of multiples of 4 between first and last (inclusive)\n    ans = last_multiple - first_multiple + 1\n    return ans\n\nans = solution()"
    ],
    "7e8a739ac409498b80dc7f1731900ebb": [
        "def solution():\n    for num in range(1, 100):\n        if num % 3 == 2 and num % 4 == 3 and num % 5 == 4:\n            return num\n\nans = solution()"
    ],
    "f29917f11bd644f2a9c8e57a6f612d23": [
        "def solution():\n    # Given still water speed of the ship\n    still_water_speed = 15  # in km/h\n\n    # Total distance between the towns\n    distance = 144  # in km\n\n    # Time taken to travel downstream\n    time_downstream = 8  # in hours\n\n    # Downstream speed (still water speed + stream speed)\n    speed_downstream = distance / time_downstream\n\n    # Stream speed\n    stream_speed = speed_downstream - still_water_speed\n\n    # Upstream speed (still water speed - stream speed)\n    speed_upstream = still_water_speed - stream_speed\n\n    # Time taken to go upstream (return journey)\n    time_upstream = distance / speed_upstream\n\n    return time_upstream\n\nans = solution()"
    ],
    "c4f94facc9b340b4a2a6145ef66bc8af": [
        "def solution():\n    jenny = 6\n    qiqi = jenny + 5\n    return qiqi\n\nans = solution()"
    ],
    "d8643be2681f41c897691ad4ae4d10ab": [
        "from math import comb\n\ndef solution():\n    total_students = 15\n    students_to_select = 2\n\n    ans = comb(total_students, students_to_select)\n\n    return ans\n\nans = solution()"
    ],
    "c2b06e8dbe5c4834b11b9e8c5471c680": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the amount of food the hippo and kangaroo eat per day\n    hippo_per_day, kangaroo_per_day = symbols('hippo_per_day kangaroo_per_day')\n    \n    # The hippo eats 45 kilograms more food than the kangaroo\n    equation1 = Eq(hippo_per_day, kangaroo_per_day + 45)\n    \n    # After 20 days, the hippo has consumed 10 times as much food as the kangaroo\n    equation2 = Eq(20 * hippo_per_day, 10 * (20 * kangaroo_per_day))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (hippo_per_day, kangaroo_per_day))\n    \n    # Calculate the total food consumed by the hippo in 20 days\n    total_food_hippo = solutions[hippo_per_day] * 20\n    \n    return total_food_hippo\n\nans = solution()"
    ],
    "94c97ffe57a2432ba8c0eeaa3ce36a92": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    wait_time = timedelta(hours=1, minutes=25)\n    john_wait_time = datetime.strptime(\"3:15 PM\", \"%I:%M %p\")\n    meet_time = john_wait_time + wait_time\n    formatted_meet_time = meet_time.strftime(\"%I:%M %p\")\n    return formatted_meet_time\n\nans = solution()"
    ],
    "fc103906e8e44feea1ebe0162fb169f5": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [\n        (1, 2),\n        (2, 3),\n        (3, 4),\n        (4, 5),\n        (5, 6)\n    ]\n\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "23289d4f9e054a8bb7c18484e70642db": [
        "def solution():\n    sum_of_fractions = 0\n    for i in range(1, 20):\n        for j in range(i+1, 21):\n            sum_of_fractions += i/j\n    return sum_of_fractions\n\nans = solution()"
    ],
    "5c85b6e4f6b74768adaad620ef94842e": [
        "def solution():\n    # Work rate of worker A per day\n    work_rate_A = 1 / 15\n    # Work rate of worker B per day\n    work_rate_B = 1 / 20\n    # Work rate of both workers together per day\n    combined_work_rate = work_rate_A + work_rate_B\n    # Work completed in 2 days\n    work_completed_in_2_days = 2 * combined_work_rate\n    # Remaining work to be done\n    remaining_work = 1 - work_completed_in_2_days\n    # Days required for worker A to finish the remaining work\n    days_required_A = remaining_work / work_rate_A\n\n    return days_required_A\n\nans = solution()"
    ],
    "a9ada9a471c14c9089a859c1a81f4727": [
        "def solution():\n    # To guarantee at least two balls of the same color,\n    # consider the worst-case scenario where we pick different colors each time.\n    # We can take 1 green ball and 1 blue ball and still not have a guaranteed pair of same color.\n    # The next ball we take out, no matter the color, will ensure we have at least two balls of the same color.\n    balls_needed = 1 + 1 + 1  # One green, one blue, and one more ball of any color\n\n    return balls_needed\n\nans = solution()"
    ],
    "25336ea78ab34494bb296b208a1d61f0": [
        "def solution():\n    num_zodiac_signs = 12\n    # According to the pigeonhole principle, to guarantee at least 11 students sharing the same zodiac sign,\n    # we calculate by assuming the worst-case distribution where each of the 12 zodiac signs has 10 students (which is one less than 11)\n    # and then we add one more student which will have to fall into one of the zodiac signs, thus guaranteeing 11 students with the same sign.\n    students = (num_zodiac_signs * (11 - 1)) + 1\n    return students\n\nans = solution()"
    ],
    "ffeb5f99fef6492788aecdd5191a6fbc": [
        "def solution():\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = 3 * x + 5 - 20\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "699c77bb441b4ebda83105b6f2f13d9b": [
        "def solution():\n    yellow_balls = 5\n    white_balls = 15\n    black_balls = 20\n\n    # To ensure that she gets 10 balls of the same color, she must take out all balls of the other two colors completely.\n    # So, she must take out all yellow balls and all but one of the white balls.\n    # Then, any additional ball she takes out will be the tenth black ball.\n    balls_needed = yellow_balls + (white_balls - 1) + 1\n\n    return balls_needed\n\nans = solution()"
    ],
    "934f5ca54cb7439aa6d799d5d2c44dcb": [
        "def solution():\n    total_candies = 35\n    starting_seat = 3\n    total_seats = 9\n    \n    last_seat_received = (starting_seat + total_candies - 1) % total_seats\n    if last_seat_received == 0:\n        last_seat_received = total_seats\n    \n    return last_seat_received\n\nans = solution()"
    ],
    "bf15675f14f14212bf6c9e9d10c58225": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for lineup in permutations('ABCDEFG'):\n        if ('F' in lineup[1:] and lineup[lineup.index('F') - 1] == 'G') or ('F' in lineup[:-1] and lineup[lineup.index('F') + 1] == 'G'):\n            continue\n        if lineup.index('B') < lineup.index('A') < lineup.index('C') or lineup.index('C') < lineup.index('A') < lineup.index('B'):\n            if lineup.index('D') == lineup.index('E') - 1 or lineup.index('D') == lineup.index('E') + 1:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "f24bfda99f1c4bb2bd7903af23a66829": [
        "def solution():\n    first_term = 4\n    difference = 3\n    n = 60\n\n    # Using the formula for the sum of n terms in an arithmetic sequence:\n    # Sum = n/2 * (first_term + last_term)\n    # last_term = first_term + (n - 1) * difference\n    last_term = first_term + (n - 1) * difference\n    sum_n_terms = n / 2 * (first_term + last_term)\n\n    return int(sum_n_terms)\n\nans = solution()"
    ],
    "9b63ec4f71094b1d885ce1afa323969f": [
        "def solution():\n    from math import lcm # Least Common Multiple\n\n    # The cycle will repeat every LCM of 7 and 3 days\n    cycle_days = lcm(7, 3)\n    \n    # She eats both on the 2nd of January\n    day_first_joint_meal = 2\n\n    # The next time she will eat them both on the same day\n    day_next_joint_meal = day_first_joint_meal + cycle_days\n    \n    return day_next_joint_meal\n\nans = solution()"
    ],
    "e576332748d74067a92a264b25cf6bf6": [
        "def solution():\n    total_children = 30\n    children_with_dogs = 19\n    children_with_cats = 18\n    \n    max_single_pet_owners = total_children - (children_with_dogs + children_with_cats - total_children)\n    \n    return children_with_dogs + children_with_cats - total_children - max_single_pet_owners\n\nans = solution()"
    ],
    "e23be947b2694a46ae2d582a9c3ce1d5": [
        "def solution():\n    ans = -12 - 5\n    return ans\n\nans = solution()"
    ],
    "332cdb55e65a4055a7b3f28234f15541": [
        "def solution():\n    # Assume it's a 10x10 table filled with ascending integers starting from 1\n    # to represent that a table would have 100 values in a 10x10 format\n    numbers_in_table = 100\n    first_number = 1\n    last_number = 100\n    \n    # Formula to calculate the sum of an arithmetic progression\n    sum_of_numbers = (numbers_in_table * (first_number + last_number)) / 2\n    \n    return int(sum_of_numbers)\n\nans = solution()"
    ],
    "30dedaf91b7c41adbc5ee0f51c1d61cc": [
        "def solution():\n    numbers = [12, 145, 32, 77, 62]\n    range_of_dataset = max(numbers) - min(numbers)\n    \n    return range_of_dataset\n\nans = solution()"
    ],
    "fea775d35ddc44779758a9feca2b1e44": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    shirts, skirts = symbols('shirts skirts')\n\n    # Natalie had 36 less shirts than skirts.\n    equation1 = Eq(shirts, skirts - 36)\n\n    # She sold 2/3 of her shirts and 5/6 of her skirts\n    # After selling, she had 72 shirts and skirts left in total.\n    equation2 = Eq((shirts * (1 - 2/3)) + (skirts * (1 - 5/6)), 72)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (shirts, skirts))\n\n    # Return the number of skirts she had at first.\n    return solutions[skirts]\n\nans = solution()"
    ],
    "dc7690a8acef47d2b8179414454362dd": [
        "def solution():\n    monthly_saving = 12\n    num_months = 3\n    total_saving = monthly_saving * num_months\n    return total_saving\n\nans = solution()"
    ],
    "c0fbd9fc6c0349318ed02805c0f14bb0": [
        "def solution():\n    total_length = 100\n    total_width = 80\n    cloak_length = 5\n    cloak_width = 4\n\n    cloaks_from_length = total_length // cloak_length\n    cloaks_from_width = total_width // cloak_width\n\n    total_cloaks = cloaks_from_length * cloaks_from_width\n    return total_cloaks\n\nans = solution()"
    ],
    "4fd1c9c268424dcd9c1930cdbe826408": [
        "def solution():\n    # Distance to travel to and from the place\n    distance = 120\n    \n    # Speed of the motorcycle driver while going to the place\n    speed_to = 20\n    \n    # Time taken to travel to the place\n    time_to = distance / speed_to\n    \n    # Expected average speed for the entire trip\n    avg_speed = 30\n    \n    # Total time for the trip based on the expected average speed\n    total_time = (2 * distance) / avg_speed\n    \n    # Time left for the return trip\n    time_back = total_time - time_to\n    \n    # Speed required on the way back to maintain the average speed\n    speed_back = distance / time_back\n    \n    return speed_back\n\nans = solution()"
    ],
    "5ee23347e0d74d3baa1160988c797db8": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 5), (2, 6), (7, 11)]\n    lcm_mod, residue = solve_congruence(*congruences)\n\n    biscuits = residue\n    while biscuits < 400:\n        biscuits += lcm_mod\n\n    return biscuits\n\nans = solution()"
    ],
    "4d94cc32d7e645e3ae2c634cbeddd095": [
        "def solution():\n    nell_ratio = 4\n    joe_ratio = 5\n    nell_sweets = 24\n\n    total_sweets = (nell_sweets / nell_ratio) * (nell_ratio + joe_ratio)\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "b6548625db5443beaaee6fa94d6e0200": [
        "def solution():\n    total_digits = 0\n\n    for number in range(1, 35):\n        total_digits += len(str(number))\n\n    return total_digits\n\nans = solution()"
    ],
    "7f69be54279d4eb282c98cde135e73cd": [
        "def solution():\n    # He needs one less cut than the number of pieces\n    # For 2 pieces, it takes 2 minutes (1 cut)\n    # For 5 pieces, it will require 4 cuts\n    # If each cut takes the same time, it will take 4 * 2 minutes\n    cuts_needed = 5 - 1\n    time_per_cut = 2\n    total_time = cuts_needed * time_per_cut\n    return total_time\n\nans = solution()"
    ],
    "501ad0e046c84d61b8cd854a0e3231d0": [
        "def solution():\n    numbers = [55, 62, 80, 36, 18, 29, 76, 92]\n    average = sum(numbers) / len(numbers)\n    return average\n\nans = solution()"
    ],
    "0a765ef7e14c440981d6c2d7b04dabd7": [
        "def solution():\n    return 46 * 37\n\nans = solution()"
    ],
    "a796ea09fb744741a25cd47d0f76b732": [
        "def solution():\n    ans = 31.6 * 7\n    return ans\n\nans = solution()"
    ],
    "6fc0618e43e242b49bfdaeb256945ca5": [
        "def solution():\n    initial_average = 120\n    final_average = 110\n    num_numbers_initial = 3\n    num_numbers_final = num_numbers_initial + 1\n\n    total_initial = initial_average * num_numbers_initial\n    total_final = final_average * num_numbers_final\n    \n    number_to_add = total_final - total_initial\n\n    return number_to_add\n\nans = solution()"
    ],
    "1cb1f7199ce14218a8ee265ccbe06c7e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for marbles of Jovan (j), Sean (s), and Herman (h)\n    j, s, h = symbols('j s h')\n\n    # Given equations\n    # Jovan has twice as many marbles as Sean\n    equation1 = Eq(j, 2 * s)\n    # Herman has 3 times as many marbles as Jovan.\n    equation2 = Eq(h, 3 * j)\n    # Jovan has 240 fewer marbles than Herman\n    equation3 = Eq(j, h - 240)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (j, s, h))\n\n    # Calculate the total number of marbles\n    total_marbles = solutions[j] + solutions[s] + solutions[h]\n    \n    return total_marbles\n\nans = solution()"
    ],
    "90966aea3ce94728843a0f98acc20314": [
        "def solution():\n    for m in range(10):\n        if 140 + m == 8 * (10 + m) - 3:\n            return m\n\nans = solution()"
    ],
    "34140a9862a3448881425579d24734b9": [
        "def solution():\n    first_term = 5\n    last_term = 65\n    difference = 4\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n    return sum_of_sequence\n\nans = solution()"
    ],
    "e68039658fe340f98db91346e8adc898": [
        "def solution():\n    x = -11\n    T = 7 + 7 * x\n    return T\n\nans = solution()"
    ],
    "ad7cb903a931476bafc590cff0bdcd26": [
        "def solution():\n    ans = 10.25 + 9.2 - 7\n    return ans\n\nans = solution()"
    ],
    "c16f42441097422a80a4fc1b82640502": [
        "def solution():\n    horses_initial = 12\n    days_initial = 15\n    horses_final = 20\n\n    days_per_horse_initial = days_initial / horses_initial\n    total_days_for_all_horses = days_per_horse_initial * horses_initial\n    days_final = total_days_for_all_horses / horses_final\n\n    return days_final\n\nans = solution()"
    ],
    "f01af5cab78a49d192ad10c608f1a18a": [
        "def solution():\n    ans = 301 + 303 + 305 - 9\n    return ans\n\nans = solution()"
    ],
    "b7218901ffc24d00b3c7f10efa784bfe": [
        "from math import gcd\n\ndef solution():\n    return gcd(gcd(6, 9), 12)\n\nans = solution()"
    ],
    "99005a2c071040f195c27f37d05344df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, andy, charles = symbols('john andy charles')\n\n    equation1 = Eq(john + andy, 105)\n    equation2 = Eq(charles + john, 67)\n    equation3 = Eq(andy, 3 * charles)\n\n    solutions = solve((equation1, equation2, equation3), (john, andy, charles))\n\n    total_mass = solutions[john] + solutions[andy] + solutions[charles]\n    \n    return total_mass\n\nans = solution()"
    ],
    "51f1eccaaa5844a897f213dcf2f3e11a": [
        "def solution():\n    total_meters = 900\n    companies = 4\n    days = 5\n\n    meters_per_company_per_day = total_meters / (companies * days)\n\n    return meters_per_company_per_day\n\nans = solution()"
    ],
    "2c3ac058e2204cb087e20661a4ad713a": [
        "def solution():\n    import numpy as np\n    \n    data = np.array([3, 2, 3, 5, 2, 4, 4, 1])\n    mean = np.mean(data)\n    deviations = np.abs(data - mean)\n    mad = np.mean(deviations)\n    \n    return mad\n\nans = solution()"
    ],
    "2dafccaefb9c4371a9aa0d6a0927b08b": [
        "def solution():\n    from math import comb\n    # Distribute 13 oranges to 3 kids, allowing for some kids to get no oranges\n    # This is a stars and bars problem: (n+k-1) choose (k-1), where\n    # n = 13 (number of stars, i.e., oranges to distribute)\n    # k = 3 (number of bars, i.e., kids to distribute among + 1)\n    # We add 1 to the number of kids because we need to account for the possibility\n    # that a kid can get zero oranges.\n\n    ways = comb(13 + 3 - 1, 3 - 1)\n    return ways\n\nans = solution()"
    ],
    "5f22389e9a6a48338414d0443e5b1107": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bud, pip, tom = symbols('bud pip tom')\n\n    equation1 = Eq(bud, 3 * pip)\n    equation2 = Eq(tom, 2 * bud)\n    equation3 = Eq(bud + pip + tom, 50)\n\n    solutions = solve((equation1, equation2, equation3), (bud, pip, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "da5873ba4dcd43299bae1be0e6fd21e6": [
        "def solution():\n    # There is one alien and five brothers, making six individuals in total\n    num_individuals = 6\n    \n    # Each individual has five legs, thus the total number of legs is 6 * 5\n    total_legs = num_individuals * 5\n    \n    # The cost of 5 individual shoes is $78, so the cost per shoe is $78 / 5\n    cost_per_shoe = 78 / 5\n    \n    # Each leg requires one shoe and one sock\n    # The cost for all the shoes is the cost per shoe times the total number of legs\n    total_shoe_cost = cost_per_shoe * total_legs\n    \n    # The cost for all the socks is the price per pair of socks times the total number of legs\n    # Since a pair of socks is for two legs, we divide the total number of legs by 2 to find the number of pairs\n    total_sock_cost = 12 * (total_legs / 2)\n    \n    # The total cost is the sum of the total shoe cost and the total sock cost\n    total_cost = total_shoe_cost + total_sock_cost\n    \n    return total_cost\n\nans = solution()"
    ],
    "43c595f7d6ef46c0be98290684686cf6": [
        "def solution():\n    # Loop through all possible 4-digit numbers to find the original number\n    for number in range(1000, 10000):\n        original_number = str(number)\n        # Swap the last digit to the first position to create the new number\n        new_number = int(original_number[-1] + original_number[1:-1] + original_number[0])\n        # Check the condition stated in the problem\n        if new_number - number == 5877:\n            return number\n\nans = solution()"
    ],
    "b791fcccc3654f3db33c3a0ec7363553": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # let jc be the number of Jeremy's $0.50 cookies\n    # let jct be the number of Jeremy's $0.10 cookies\n    # According to the problem, David's cookies cost 3 times as much as Jeremy's $0.50 cookies (which we can equate to 3jc)\n    # Jeremy has (3/5) as many $0.50 cookies as $0.10 cookies (0.5jc = 0.3jct)\n    # There were 60 fewer $0.10 cookies than $0.50 cookies (jct = jc - 60)\n    jc, jct = symbols('jc jct')\n    \n    equation1 = Eq(3*jc, 0.50)\n    equation2 = Eq(jc, 0.6*jct)\n    equation3 = Eq(jct, jc - 60)\n\n    solutions = solve((equation1, equation2, equation3), (jc, jct))\n    \n    # Calculate the value of Jeremy's cookies\n    jeremy_cookies_value = solutions[jc] * 0.50 + solutions[jct] * 0.10\n    \n    return jeremy_cookies_value\n\nans = solution()"
    ],
    "360ae3551215452fb3d04ffde3f78d2c": [
        "from itertools import combinations\n\ndef solution():\n    # List of given numbers\n    numbers = [6, 12, 35, 175, 245, 300]\n    \n    # Find all possible combinations of two and three numbers\n    two_card_combinations = list(combinations(numbers, 2))\n    three_card_combinations = list(combinations(numbers, 3))\n    \n    products_two_cards = {a * b: (a, b) for a, b in two_card_combinations}\n    products_three_cards = {a * b * c: (a, b, c) for a, b, c in three_card_combinations}\n    \n    # Find the common product\n    common_product = set(products_two_cards).intersection(products_three_cards)\n    \n    # Get the picked numbers\n    picked_numbers = set(products_two_cards[next(iter(common_product))]) | set(products_three_cards[next(iter(common_product))])\n    \n    # Find the number that was not picked\n    for number in numbers:\n        if number not in picked_numbers:\n            return number\n\nans = solution()"
    ],
    "7e7e0d58634e4a7b912975d7485e5197": [
        "def solution():\n    possible_totals = [49, 80, 32, 66, 8, 58]\n    for total in possible_totals:\n        if (total - 4) % 7 == 0:\n            ans = total\n            return ans\n\nans = solution()"
    ],
    "f5d42ab6bc434fe48dcbb4d9b9e637ea": [
        "def solution():\n    # The distance from the first to the fifth tree indicates there are 4 intervals\n    intervals_between_trees = 4\n    distance_between_first_and_fifth = 20\n    \n    # Calculate the distance of one interval\n    distance_one_interval = distance_between_first_and_fifth / intervals_between_trees\n    \n    # The length of the road needs to be divided by the distance of one interval to get the number of intervals along the road\n    number_intervals_along_road = 200 / distance_one_interval\n    \n    # The number of trees is one more than the number of intervals, because there's a tree at both the beginning and end of the road\n    total_number_of_trees = number_intervals_along_road + 1\n    \n    return int(total_number_of_trees)\n\nans = solution()"
    ],
    "d8ec2b2972f74f84955c8f0a68f3ad73": [
        "def solution():\n    rate_A = 1 / 12   # Tank per minute\n    rate_B = 1 / 8    # Tank per minute\n    combined_rate = rate_A + rate_B  # Combined rate of tank per minute\n    time_for_half_tank = (1 / 2) / combined_rate   # Time to fill half the tank\n    return time_for_half_tank\n\nans = solution()"
    ],
    "4a6ce2ef677140aebc108d44cab3b1ca": [
        "def solution():\n    # Initial expression\n    initial_expression = (36 * 21) / (6 * 7)\n    \n    # Jason's first step should be\n    step_1 = 36 * 21 / 6 * 7\n    \n    # Jason's second step should be (since division takes precedence)\n    step_2 = (36 / 6) * 21 * 7\n    \n    # Jason's third step should be\n    step_3 = 6 * 21 * 7\n    \n    # Final answer Jason got\n    jason_answer = 882\n\n    # Correct answer\n    correct_answer = step_3\n\n    # Check if Jason's answer is correct\n    if step_1 == initial_expression and \\\n       step_2 == initial_expression and \\\n       step_3 == initial_expression and \\\n       jason_answer == correct_answer:\n        ans = True # Jason's answer is correct\n    else:\n        ans = False # Jason's answer is not correct\n\n    # If ans is False, we need to find out the mistake and correct it\n    if not ans:\n        # Jason's mistake is at the step transitioning from step 1 to step 2\n        # Correction:\n        corrected_step_2 = 6 * 21 * 7\n        ans = corrected_step_2\n\n    return ans\n\nans = solution()"
    ],
    "6cab8d77da3e4447922fdcd2d2b21d24": [
        "def solution():\n    return 4392 // 6\n\nans = solution()"
    ],
    "e40ae4418f8f44cebd8f9882aa3ca6b1": [
        "def solution():\n    total_fruit = 48\n    fraction_apples = 5/8\n    apples = total_fruit * fraction_apples\n    pears = total_fruit - apples\n    return int(pears)\n\nans = solution()"
    ],
    "57725168bfb44ed79b6561aad62288cd": [
        "def solution():\n    jane_age = 12\n    cousin_age_currently = 2 * jane_age\n    cousin_age_in_8_years = cousin_age_currently + 8\n    return cousin_age_in_8_years\n\nans = solution()"
    ],
    "35c4e495a24542e1b20ed3ff479cced6": [
        "def solution():\n    return 148 + 73\n\nans = solution()"
    ],
    "c4a1d3b65f70441c8f162b68482444ed": [
        "def solution():\n    ann_position = 8\n    people_between = 3\n    david_position_from_end = 2\n    total_people = ann_position + people_between + david_position_from_end\n    return total_people\n\nans = solution()"
    ],
    "cf2c548f0cae420c9a89c81143562fc1": [
        "def solution():\n    # Let's denote the side of the initial square array formed by boys as 'n'.\n    # After adding 17 girls, we have another square array with the side 'n+2' (one row and one column added).\n    # The number of boys can be expressed as n^2.\n    # The number of students after girls join can be expressed as (n+2)^2.\n    # According to the problem, the difference between these two numbers is 17.\n    # So the equation is (n+2)^2 - n^2 = 17.\n    # Let's solve this equation for n.\n\n    # Find the positive integer solution for the equation\n    n = 1  # Starting from 1\n    while True:\n        if (n+2)**2 - n**2 == 17:\n            break\n        n += 1    # Increment n to test the next number\n\n    # The number of boys is n^2\n    num_boys = n**2\n\n    return num_boys\n\nans = solution()"
    ],
    "d744cc75e3ab4185ad0c2604e81b69c3": [
        "def solution():\n    count = 0\n    page = 1\n    while count < 22:\n        if '8' in str(page):\n            count += str(page).count('8')\n        page += 1\n    return page - 1\n\nans = solution()"
    ],
    "c6bfa3d0de504912b6200f3d457f6a73": [
        "def solution():\n    first_number = 157\n    second_number = first_number - 98\n    sum_of_numbers = 555\n\n    third_number = sum_of_numbers - (first_number + second_number)\n\n    return third_number\n\nans = solution()"
    ],
    "995d99072a7246aa89a178ecfa7b3be9": [
        "def solution():\n    n = 8 * (9 / 12)\n    return n\n\nans = solution()"
    ],
    "35f3ac45fb9a416cab9f6a6f3d80fc88": [
        "def solution():\n    return -7 + -3\n\nans = solution()"
    ],
    "9138c2779a554688a69ae241821b9044": [
        "def solution():\n    ans = 3280 / 1000\n    return ans\n\nans = solution()"
    ],
    "6ba693d3debc40ffbe091f4a2e915e1a": [
        "def solution():\n    # Maximum number of balls picked without fulfilling the condition is when\n    # we picked just below the required number of each color\n    # That is 28 blue, 27 red, and 9 white balls\n    max_balls_without_condition = (28 - 1) + (27 - 1) + (9 - 1)\n\n    # To make sure we get 29, 28, 10 of at least one color, we will need to pick\n    # just one more ball\n    balls_needed = max_balls_without_condition + 1\n\n    return balls_needed\n\nans = solution()"
    ],
    "c1a30ce92e014b75b30b4b0d41e23b10": [
        "def solution():\n    total_distance = 9\n    climb_distance = 3\n    slide_distance = 1\n    net_distance = climb_distance - slide_distance\n    day_count = 0\n\n    while total_distance > 0:\n        day_count += 1\n        total_distance -= climb_distance\n        if total_distance <= 0:\n            break\n        total_distance += slide_distance\n\n    return day_count\n\nans = solution()"
    ],
    "91aac3f6cd314824a5ff7ae8d57ba16f": [
        "def solution():\n    total_students = 44\n    maths_competition = 30\n    art_competition = 26\n\n    both_competitions = maths_competition + art_competition - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "64953fb1208e4686b70662072858e299": [
        "def solution():\n    principal = 800\n    rate = 8 / 100\n    time = 3\n    \n    simple_interest = principal * rate * time\n    return simple_interest\n\nans = solution()"
    ],
    "0222cefe72d14af08beade5cd8d39234": [
        "def solution():\n    lucy_sleep_hours = 8\n    mary_sleep_hours = lucy_sleep_hours + 2\n    return mary_sleep_hours\n\nans = solution()"
    ],
    "7fccc27dfac64e26ac8313027c062718": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(6 * 1.5 + 4*x, 19)\n    \n    ans = solve(equation, x)[0]\n    \n    return ans\n\nans = solution()"
    ],
    "d4270b64c9444e9bae6186f03a8dd3cf": [
        "def solution():\n    height_england_mountain = 978\n    height_world_highest_mountain = 8848\n\n    difference = height_world_highest_mountain - height_england_mountain\n\n    return difference\n\nans = solution()"
    ],
    "c159c9b51b5641cb9fe4bd410317a6b6": [
        "def solution():\n    from sympy import isprime\n\n    for number in range(1, 50):\n        if (number + 2) % 3 == 0 and isprime(number) and (number - 2) % 5 == 0:\n            return number\n\nans = solution()"
    ],
    "873d86ac5c8b42ebb89adf32077600aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let a, b, and c represent the initial amounts of money Alicia, Beth, and Casey had respectively.\n    a, b, c = symbols('a b c')\n\n    # System of equations based on the problem statement\n    equation1 = Eq(a / 2 + b - 60 + 3 * (a / 2) - c, 0)  # The spending results in the same amount of money left\n    equation2 = Eq(a + b + c, 900)                         # The sum of their money is $900\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, b, c))\n\n    return solutions[a]\n\nans = solution()"
    ],
    "1fef03e615784d6ab50b1a8664c3bed8": [
        "def solution():\n    # Since the factorial of any number greater than 9 will end with a zero,\n    # due to the fact that it includes the multiplication of 10 (5 * 2),\n    # we can conclude that the last digit of 2014! will be 0.\n    ans = 0\n    return ans\n\nans = solution()"
    ],
    "2234f3644e4744e1abe7c224874b8458": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(2 * (x + 3), 30)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "ba39e5d277a84ab58e881af5d3bc8aa5": [
        "def solution():\n    product = 2 * 2 * 3 * 8 * 5 * 5 * 5\n    count_zeros = 0\n    while product % 10 == 0:\n        product = product // 10\n        count_zeros += 1\n    return count_zeros\n\nans = solution()"
    ],
    "20985347da3c477badaed88276511692": [
        "def solution():\n    ans = 0.64 * 10\n    return ans\n\nans = solution()"
    ],
    "06b709845181421a902cea1ac8c94213": [
        "def solution():\n    # Here we are solving for the unknown denominator(x) in: 6/20 = 30/x\n    # We know that for two fractions to be equivalent, the cross products must be equal\n    # Hence, 6*x = 20*30\n\n    numerator = 6\n    constant_numerator = 30\n    denominator = 20\n\n    # Cross multiplication to find the unknown denominator\n    unknown_denominator = (denominator * constant_numerator) // numerator\n\n    return unknown_denominator\n\nans = solution()"
    ],
    "788387594b6e4c5eba7e277ec7c07b6e": [
        "def solution():\n    # Work backwards from the final answer\n    final_answer = 1\n    # Step 1: Add 8 (reverse of subtracting 8)\n    step1 = final_answer + 8\n    # Step 2: Multiply by 8 (reverse of dividing by 8)\n    step2 = step1 * 8\n    # Step 3: Divide by 3 (reverse of multiplying by 3)\n    step3 = step2 / 3\n    # Step 4: Subtract 6 (reverse of adding 6)\n    number = step3 - 6\n    return number\n\nans = solution()"
    ],
    "1406508f604a4d8b99426de2592c46fd": [
        "def solution():\n    original_number = symbols('original_number')\n    new_number = 10 * original_number\n    equation = Eq(original_number + new_number, 253)\n\n    solution = solve(equation, original_number)\n    return solution[0]\n\nans = solution()"
    ],
    "ac96959c816f40b994c3095a95678430": [
        "def solution():\n    # Let the number of cookies eaten on the first day be x.\n    # Then the number of cookies eaten on subsequent days forms an arithmetic sequence:\n    # 1st day: x\n    # 2nd day: x + 6\n    # 3rd day: x + 12\n    # 4th day: x + 18\n    # 5th day: x + 24\n    # The sum of an arithmetic sequence can be calculated as:\n    # Sum = n/2 * (first_term + last_term)\n    # where n is the number of terms.\n    # Therefore, from the given condition, we have:\n    # 100 = 5/2 * (x + (x + 24))\n    \n    # We can solve for x by simplifying the above equation.\n    first_day = (100 * 2 / 5 - 24) / 2\n    return first_day\n\nans = solution()"
    ],
    "c8ac5b12c5ef4250bf78a994cef11a8c": [
        "def solution():\n    initial_seashells = 380\n    given_to_sister = 35\n    given_to_friend = 23\n    picked_seashells = 70\n    boxes = 8\n    \n    remaining_seashells = initial_seashells - given_to_sister - given_to_friend + picked_seashells\n    seashells_per_box = remaining_seashells // boxes\n    \n    return seashells_per_box\n\nans = solution()"
    ],
    "ef204ac96744497b958e9e43d91d62c7": [
        "def solution():\n    from sympy import isprime\n\n    for number in range(1, 90):\n        if number % 9 == 0 and isprime(number + 1) and (number - 1) % 5 == 0:\n            return number\n\nans = solution()"
    ],
    "1cc6abdd4aa14ca3ba0c0f221bc83033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cayden, sicheng, yixuan = symbols('cayden sicheng yixuan')\n    \n    equation1 = Eq(cayden, sicheng + 6)\n    equation2 = Eq(yixuan, 2 * cayden)\n    equation3 = Eq(yixuan, sicheng + 22)\n    \n    solutions = solve((equation1, equation2, equation3), (cayden, sicheng, yixuan))\n    \n    total_questions = sum(solutions.values())\n    \n    return total_questions\n\nans = solution()"
    ],
    "1f1415e1ba0e473686320bc1228072ad": [
        "def solution():\n    ans = 250 * 0.18\n    return ans\n\nans = solution()"
    ],
    "fbb644a513c74c369072437e70b25c4b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(56 - 4 * (20 - 6 * x), 48)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5d03707100c24bec944429cac593007c": [
        "def solution():\n    from math import factorial\n\n    # There are 4 men and 4 women\n    men_ways = factorial(4)  # Men can be arranged in 4! ways\n    women_ways = factorial(4)  # Women can be arranged in 4! ways\n\n    # Men and women stand alternately, starting with a man or a woman, so multiply by 2\n    total_ways = men_ways * women_ways * 2\n\n    return total_ways\n\nans = solution()"
    ],
    "e93a2e8d34fe4c5d88042e9cb1dc1359": [
        "from math import factorial\n\ndef solution():\n    letters = \"HAPPY\"\n    frequency = {letter: letters.count(letter) for letter in set(letters)}\n    \n    total_permutations = factorial(len(letters))\n    for freq in frequency.values():\n        total_permutations //= factorial(freq)\n\n    return total_permutations\n\nans = solution()"
    ],
    "84593b3ba13b4e8a80ff8451f501055f": [
        "def solution():\n    count = 0\n    for i in range(1, 481):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "f447d86af6a24aefb4ec7afe8f748ab6": [
        "def solution():\n    # cost of one pack (8 rolls) at Ali's shop\n    cost_per_pack_ali = 2.40\n    # cost per roll at Ali's shop\n    cost_per_roll_ali = cost_per_pack_ali / 8\n    # cost per roll at Mya's shop (twice the cost at Ali's shop)\n    cost_per_roll_mya = 2 * cost_per_roll_ali\n    # cost for 3 rolls at Mya's shop\n    cost_for_three_rolls_mya = 3 * cost_per_roll_mya\n    return cost_for_three_rolls_mya\n\nans = solution()"
    ],
    "e041fe632ffb4b6c9323daa6940df30a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ashley, crystal, justin = symbols('ashley crystal justin')\n\n    equation1 = Eq(crystal, 2 * ashley)\n    equation2 = Eq(justin, 10 * ashley)\n    equation3 = Eq(justin, crystal + 72)\n\n    solutions = solve((equation1, equation2, equation3), (ashley, crystal, justin))\n\n    total_pages = solutions[ashley] + solutions[crystal] + solutions[justin]\n\n    return total_pages\n\nans = solution()"
    ],
    "6a2c78cfdb9a4d7fb383272b52cd59ee": [
        "def solution():\n    girls = 12\n    boys_fraction = 2/5\n    total_children = girls / (1 - boys_fraction)\n    boys = total_children * boys_fraction\n    return int(boys)\n\nans = solution()"
    ],
    "c872f5bf2c784f41bccb9e92a97425cc": [
        "def solution():\n    n = 96\n    factors = 0\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            factors += 1\n        i += 1\n    return factors\n\nans = solution()"
    ],
    "c8a3ce14a35a4261ab029e2433bd676a": [
        "def solution():\n    people_in_front_of_peter = 9\n    people_behind_john = 10\n    # Since Peter is directly in front of John, we count them as one entity\n    peter_and_john = 1\n\n    total_people = people_in_front_of_peter + peter_and_john + people_behind_john\n\n    return total_people\n\nans = solution()"
    ],
    "64993852492147cc8482c078cd34b38e": [
        "def solution():\n    return 900 * 0.10 * 0.60\n\nans = solution()"
    ],
    "89b6ad1ba96b49799186cb97be8ced41": [
        "def solution():\n    departure_time_in_hours = 12\n    flight_duration_in_hours = 4\n    time_difference_in_hours = 3  # St Petersburg is 3 hours ahead of England.\n\n    arrival_time_in_hours = (departure_time_in_hours + flight_duration_in_hours + time_difference_in_hours) % 24\n\n    return arrival_time_in_hours\n\nans = solution()"
    ],
    "1beeabbc07d5419182360e392e6e8167": [
        "def solution():\n    final_amount = 870\n    interest_rate = 0.09\n    years = 5\n\n    initial_deposit = final_amount / ((1 + interest_rate) ** years)\n\n    return initial_deposit\n\nans = solution()"
    ],
    "f53340cd1b0242cc909e54dbf5f9c740": [
        "def solution():\n    for N in range(1, 10):  # N cannot be 0 as it's a two-digit number\n        for O in range(10):  # O can be any digit, including 0\n            if N != O:  # NO must consist of different digits\n                NO = 10 * N + O  # Construct the two-digit number NO\n                ON = 10 * O + N  # Construct the two-digit number ON\n                TOO = 100 * O + 10 * O + O  # Construct the three-digit number TOO\n                if (NO + ON) == TOO:\n                    return NO\n    return None\n\nans = solution()"
    ],
    "d83742ad1ef8454dbe6712dd724e0f28": [
        "def solution():\n    return sum([(-1) ** (i % 2) * (50 - 2 * i) for i in range(10)])\n\nans = solution()"
    ],
    "d03ade3a4dd74e8080364bf4014a629f": [
        "def solution():\n    # There are 3 different colors, so the worst case scenario for getting at least one pair of the same color is:\n    # She picks one of each color (3 socks), and then she has to pick one more to ensure a pair.\n    # This results in 3 (one of each color) + 1 (to guarantee a pair) = 4 socks\n    return 4\n\nans = solution()"
    ],
    "fddfd48467ab4e0fb6a8660a9290dacd": [
        "def solution():\n    kg_to_g = 1000\n    return 2.5 * kg_to_g\n\nans = solution()"
    ],
    "9080a0bc912a4dbd8b2d995a6f90476f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The conditions given can be rewritten as the following congruences:\n    # x ≡ 1 (mod 2)\n    # x ≡ 2 (mod 3)\n    # x ≡ 3 (mod 4)\n    # x ≡ 4 (mod 5)\n    \n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n\n    x, _ = solve_congruence(*congruences)\n    return x\n\nans = solution()"
    ],
    "662c78fcaea44e82bcb9bf7c3df9c9b4": [
        "def solution():\n    total_sweets = 360\n    ratio_boys = 3/8\n    sweets_per_boy = 4\n    sweets_per_girl = 12\n    total_children = total_sweets / (ratio_boys * sweets_per_boy + (1 - ratio_boys) * sweets_per_girl)\n    number_of_girls = total_children * (1 - ratio_boys)\n    return int(number_of_girls)\n\nans = solution()"
    ],
    "a5de38fa67a44419bc522d068fd7f25f": [
        "def solution():\n    scale_ratio = 5 / 1  # 5 cm on the map represents 1 km on the ground\n    map_distance_cm = 12  # distance of two villages on the map in cm\n    ground_distance_km = (map_distance_cm / scale_ratio)  # distance on the ground in km\n    return ground_distance_km\n\nans = solution()"
    ],
    "819144d05ae94a409b2ad0fa501b330e": [
        "def solution():\n    return 2 / 0.1\n\nans = solution()"
    ],
    "19e25948a6f64404bdc6be96b3c341cf": [
        "def solution():\n    product = 1\n    for n in range(2, 51):\n        product *= (1/n - 1/(52 - n))\n    return product\n\nans = solution()"
    ],
    "0e5f8af3ee36434c8fc6f0d54e0b0332": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Create a symbol for our number\n    x = symbols('x')\n\n    # Equation representing conditions for remainders\n    eq1 = Eq(x % 7, 5)\n    eq2 = Eq(x % 8, 6)\n    eq3 = Eq(x % 10, 6)\n\n    # Equation representing the sum of the quotients\n    # as the (number - remainder) / divisor\n    eq4 = Eq((x - 5) / 7 + (x - 6) / 8 + (x - 6) / 6, 265)\n\n    # Solve the system of equations\n    sol = solve((eq1, eq2, eq3, eq4), x)\n\n    # Return the valid solution (which is an integer and satisfies all conditions)\n    for num in sol:\n        if num.is_integer:\n            return num\n    \nans = solution()"
    ],
    "8162588281f2442aaf05ae898f61facb": [
        "def solution():\n    speed_kmh = 7.2\n    time_seconds = 24\n\n    speed_m_per_s = (speed_kmh * 1000) / (60 * 60)\n    distance_meters = speed_m_per_s * time_seconds\n\n    return distance_meters\n\nans = solution()"
    ],
    "69e401d76eff4dc0a2cbc3608563a312": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack, jimmy, tommy = symbols('jack jimmy tommy')\n\n    equation1 = Eq(jimmy, jack + 7)\n    equation2 = Eq(tommy, 3 * jimmy)\n    equation3 = Eq(jack + jimmy + tommy, 43)\n\n    solutions = solve((equation1, equation2, equation3), (jack, jimmy, tommy))\n\n    return solutions[tommy]\n\nans = solution()"
    ],
    "3d8744d18dd54cbea1b1412a084ed5ef": [
        "def solution():\n    # A positive integer which is not a prime number could be one (1)\n    # which is neither prime nor composite.\n    # Therefore, Pip's statement is not entirely correct\n    # because it does not take into account the number one (1).\n    prime_number_definition = \"A prime number is a positive integer greater than 1 which has no positive integer divisors other than 1 and itself.\"\n    composite_number_definition = \"A composite number is a positive integer greater than 1 that is not prime, meaning it can be divided evenly by numbers other than 1 and itself.\"\n    is_pip_correct = all([prime_number_definition, composite_number_definition])\n    return is_pip_correct\n\nans = solution()"
    ],
    "0ecf6bcd64b5409797eb1c22fd967682": [
        "def solution():\n    total_students = 93\n    math_students = 70\n    language_students = 54\n\n    both_classes = math_students + language_students - total_students\n\n    only_math_students = math_students - both_classes\n\n    return only_math_students\n\nans = solution()"
    ],
    "fcaab3458b0540ffaf17a8b8e46d47e3": [
        "from fractions import Fraction\n\ndef solution():\n    total = Fraction(1, 1) # Starts with 1/1 to avoid multiplying by 0\n    for i in range(2, 10):\n        total *= Fraction(i + 1, i)\n    return total\n\nans = solution()"
    ],
    "c0b29d7381404f04ba70d03ba52e2056": [
        "def solution():\n    x = symbols('x')\n    equation = Eq((1/3 - 0.25) * x, 36)\n    solutions = solve(equation, x)\n    return solutions[0]\n\nans = solution()"
    ],
    "5acf29084a144a8c9e6e54ea27130ca2": [
        "def solution():\n    count = 0\n    for x1 in range(1, 12):\n        for x2 in range(1, 12):\n            for x3 in range(1, 12):\n                for x4 in range(1, 12):\n                    if x1 + x2 + x3 + x4 == 12 and len({x1, x2, x3, x4}) == 4:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "fc12020bb86948df82cb6bfbc58da724": [
        "def solution():\n    number = 40309\n    while True:\n        number += 1\n        if str(number) == str(number)[::-1]:\n            return number - 40309\n\nans = solution()"
    ],
    "97f9b3cd0d1f4ef49d372ccb5e9623ef": [
        "def solution():\n    total_sweets = 42\n    sweets_kept = 13\n    \n    # Sweets shared\n    sweets_shared = total_sweets - sweets_kept\n    \n    # Each friend gets half of the shared sweets\n    sweets_each_friend = sweets_shared / 2\n    \n    # Lucie gives 2/7 of her sweets to Joan\n    sweets_given_to_joan = (2/7) * sweets_each_friend\n    \n    # Lucie keeps the rest\n    lucie_keeps = sweets_each_friend - sweets_given_to_joan\n    \n    return lucie_keeps\n\nans = solution()"
    ],
    "8f11aa1d0d264d7fbdcc09d8264a8c74": [
        "def solution():\n    total_difference = 52\n    total_students = 0\n    side_length = 1  # Start with the smallest possible square (1 boy)\n\n    while True:\n        boys = side_length ** 2 - (side_length - 2) ** 2 if side_length > 1 else 1\n        girls = (side_length - 2) ** 2 - (side_length - 4) ** 2 if side_length > 3 else 0\n\n        difference = boys - girls\n        if difference == total_difference:\n            total_students = side_length ** 2\n            break\n        side_length += 2  # Increase the square side length by 2 (adding one layer of boys and one of girls)\n\n    return total_students\n\nans = solution()"
    ],
    "36cde50d7411407280da3e197b3728f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    x = symbols('x')\n\n    # Define the equation\n    equation = Eq(3 + 2 * (9 - x), 4 * (x - 5) + 5)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "ff1dd3113eea4badb05fc22604f4f410": [
        "def solution():\n    # Granddad spends 1/4 on Friday\n    fraction_spent_on_friday = 1/4\n\n    # Remaining after Friday\n    remaining_after_friday = 1 - fraction_spent_on_friday\n\n    # Granddad spends 1/3 of the remaining on Saturday\n    fraction_spent_on_saturday = 1/3\n\n    # Remaining after Saturday\n    remaining_after_saturday = remaining_after_friday - (remaining_after_friday * fraction_spent_on_saturday)\n    \n    # This is the fraction left for the rest of the week\n    return remaining_after_saturday\n\nans = solution()"
    ],
    "0c7a535a8f1e4491b32b1e1b1639b03a": [
        "def solution():\n    # Let x be the volume of the fish tank.\n    # If using a 5-litre pail, 4 litres overflow, so the capacity of the tank is x = 5 - 4.\n    # If using a 3-litre pail, 4 more pails are needed beyond the one that fills it to capacity, so: x + 3*4 = 3*5.\n    # Solving the two equations:\n    # x = 5 - 4\n    # x + 12 = 15\n    # Hence, x = 5 - 4 = 1 litre, which is the capacity of the tank without overflowing.\n    # We do not need to solve the second equation, because it only confirms the result.\n    # Since Mr Nelson fills exactly the tank's capacity, the answer is 1 litre.\n    return 1\n\nans = solution()"
    ],
    "0239fb4bde9f47c69180ca8669502d62": [
        "def solution():\n    return 42768 / 120\n\nans = solution()"
    ],
    "6326923a95f047bdabd68344659c4d65": [
        "def solution():\n    total_people = 20\n    ratio_adults = 1\n    ratio_children = 4\n    total_ratio = ratio_adults + ratio_children\n\n    adults = total_people * (ratio_adults / total_ratio)\n\n    return adults\n\nans = solution()"
    ],
    "e7cedcf4f50346fda3609ffc82271bcb": [
        "def solution():\n    num_school_bags = 3\n    num_pencil_boxes = 4\n    combinations = num_school_bags * num_pencil_boxes\n    return combinations\n\nans = solution()"
    ],
    "8e60fa08b0204229a54c896f7f2968fa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of apples be 3x and the number of pears be 4x\n    x = symbols('x')\n    \n    # Initial ratio equation: apples / pears = 3 / 4\n    initial_apples = 3 * x\n    initial_pears = 4 * x\n\n    # After replacement: (apples + 36) / (pears - 36) = 3 / 2\n    new_apples = initial_apples + 36\n    new_pears = initial_pears - 36\n    ratio_equation = Eq(new_apples / new_pears, 3 / 2)\n\n    # Solve for x\n    solutions = solve((ratio_equation,), (x,))\n\n    # The number of apples at first\n    initial_apples_num = initial_apples.subs(x, solutions[x])\n\n    return initial_apples_num\n\nans = solution()"
    ],
    "b7159096815a4a038b3ffdc419ce649d": [
        "def solution():\n    recurring_digits = '6129043'\n    length_recurring = len(recurring_digits)\n    sum_digits = 0\n    \n    for i in range(212):\n        sum_digits += int(recurring_digits[i % length_recurring])\n\n    return sum_digits\n\nans = solution()"
    ],
    "1aa4173baac54897a1633d0cb7b950ea": [
        "def solution():\n    return 36 / 100 * 50\n\nans = solution()"
    ],
    "c54762ddbeef45b193a20da66e6829f5": [
        "def solution():\n    zeros_needed = 28\n    n = 1\n    factorial_power_of_5 = 0\n    while factorial_power_of_5 < zeros_needed:\n        n += 1\n        num = n\n        while num % 5 == 0:\n            factorial_power_of_5 += 1\n            num //= 5\n\n    return n - 1\n\nans = solution()"
    ],
    "fbf9b992307b444eb938a67abf0f79d0": [
        "def solution():\n    result = (2/3) * 729\n    return result\n\nans = solution()"
    ],
    "8f5505c28f074abd9d90140697874060": [
        "def solution():\n    num_people = 12\n    total_handshakes = (num_people * (num_people - 1)) // 2\n    return total_handshakes\n\nans = solution()"
    ],
    "43bd21f970c34177be1554432de294ca": [
        "def solution():\n    total_cost = 5 * 1.09 + 6 * 0.55\n    change = 10 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "e45422d20b09414ca93da798ae6e4103": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sam = symbols('sam')\n    equation = Eq(sam + 4, 2 * (sam - 4))\n    \n    sam_age = solve(equation, sam)\n\n    return sam_age[0]\n\nans = solution()"
    ],
    "3b9a5ab85be34057a1a3e3b571572c35": [
        "def solution():\n    # To be sure to have two pairs of matching socks of the same color, Daniel could pick\n    # in the worst case: \n    # - 1 yellow sock (not creating a pair)\n    # - 1 green sock (not creating a pair)\n    # - 1 white sock (not creating a pair)\n    # - 1 red sock (creating the first pair)\n    # At this point, no matter what color of sock Daniel picks next, it will create a pair,\n    # because there is already one sock of each color (except black which only has one sock in total)\n    # So the final sock picked (5th sock) would create the second pair which could be any color.\n    # Hence, Daniel must pick 5 socks to ensure two pairs of matching socks with the same colour.\n    return 5\n\nans = solution()"
    ],
    "11a8c054bda64d72bdfd6571d70646f1": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['3', '7', '2', '8']\n    odd_numbers = []\n\n    for perm in permutations(digits):\n        num = int(''.join(perm))\n        if num % 2 != 0:\n            odd_numbers.append(num)\n\n    n = min(odd_numbers)\n    return n\n\nans = solution()"
    ],
    "1b74b0ce31ca43179e9aa5db9f92ec32": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    total_letters = 7  # Number of letters in \"RAINBOW\"\n    vowel_count = 3    # Vowels in \"RAINBOW\" are A, I, O\n    consonant_count = total_letters - vowel_count  # R, N, B, W\n\n    # Total arrangements for RAINBOW\n    total_arrangements = factorial(total_letters)\n    \n    # Total arrangements where vowels are together\n    # We consider all vowels as a single entity plus the 4 consonants\n    vowels_together = factorial(vowel_count) * factorial(consonant_count + 1)\n    \n    # Subtracting the number of arrangements where vowels are together\n    # from total arrangements gives us the arrangements where vowels are not together\n    result = total_arrangements - vowels_together\n    \n    return result\n\nans = solution()"
    ],
    "de33ae344c7942fbb4e480c5ae79a90e": [
        "def solution():\n    return 492.9 + 73.521 + 32.12\n\nans = solution()"
    ],
    "00fd88a6512946ba898e3274c1c81239": [
        "def solution():\n    for i in range(1, 32):\n        if (i * i + i * 2 + 1) == (i + 31) ** 2:\n            return i * i + i * 2 + 31\n\nans = solution()"
    ],
    "0143483f1edf4af3a803bb1221bcb8e1": [
        "def solution():\n    for num in range(10, 21):\n        if num % 4 == 0 and 36 % num == 0:\n            return num\n\nans = solution()"
    ],
    "43d937a1a1ef47ef8b56b4494d1b2a22": [
        "def solution():\n    return 3.462 / 0.3\n\nans = solution()"
    ],
    "ca97262fc9e040ea9a7f04b576f910a7": [
        "def solution():\n    num_ginkgo_trees = 30\n    # One less willow tree than the number of ginkgo trees because one is planted between every 2.\n    num_willow_trees = num_ginkgo_trees - 1\n    return num_willow_trees\n\nans = solution()"
    ],
    "3fb10b4abb524d58afc63043c1689553": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(0.15 * x - 0.25 * (1000 - x), -50)\n    x_value = solve(equation, x)\n\n    return x_value[0]\n\nans = solution()"
    ],
    "dab22ef1b9474ab2b0ebf64fe8f912d5": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (3, 5), (4, 7)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "c0f56c7d52444d1a9b65ef7a1513a044": [
        "def solution():\n    ans = 128 - 54\n    return ans\n\nans = solution()"
    ],
    "104a46795ca64208939686b66fb9a82e": [
        "def solution():\n    # We have, \n    # chickens + goats = 40 ------- (1)\n    # 3 * chickens = 5 * cows ------ (2)\n    # 2 * goats = 10 * cows -------- (3)\n\n    # To find the number of feet, we need to know that chickens have 2 feet, \n    # cows and goats have 4 feet each.\n\n    # Let's denote chickens as c, goats as g, and cows as x.\n\n    # We'll solve the three equations to find the value of c, g, and x\n    # then calculate the total feet.\n\n    from sympy import symbols, Eq, solve\n\n    c, g, x = symbols('c g x')\n\n    # Equation (1)\n    equation1 = Eq(c + g, 40)\n    # Equation (2)\n    equation2 = Eq(3 * c, 5 * x)\n    # Equation (3)\n    equation3 = Eq(2 * g, 10 * x)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (c, g, x))\n\n    # Extracting solutions\n    chickens = solutions[c]\n    goats = solutions[g]\n    cows = solutions[x]\n\n    # Calculating total number of feet\n    total_feet = (chickens * 2) + (goats * 4) + (cows * 4)\n\n    return total_feet\n\nans = solution()"
    ],
    "d900be8e099f4d49838cded0aec8d0e8": [
        "def solution():\n    # Total number of stickers\n    total_stickers = 117\n    \n    # Ratio of the number of stickers Amy has to the number of stickers Penny has\n    amy_ratio = 5\n    penny_ratio = 4\n    \n    # Calculate the total ratio\n    total_ratio = amy_ratio + penny_ratio\n    \n    # Find the number of stickers Penny has\n    penny_stickers = (total_stickers * penny_ratio) / total_ratio\n    \n    return int(penny_stickers)\n\nans = solution()"
    ],
    "35c1ed41867c49dfb5f6c880fb136ac2": [
        "def solution():\n    count = 0\n    for i in range(1, 151):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "36e844fd0400420f989f1166d3df56c7": [
        "def solution():\n    words_per_minute = 125\n    minutes = 9\n    words_in_9_minutes = words_per_minute * minutes\n    \n    days = 6\n    words_in_6_days = words_in_9_minutes * days\n    \n    return words_in_6_days\n\nans = solution()"
    ],
    "921b2f01420749da85075867e970dacb": [
        "def solution():\n    speed_kmh = 3.6  # Lucy's speed in km/h\n    time_seconds = 300  # Time in seconds\n\n    # Convert speed to m/s (1 km/h is 1/3.6 m/s)\n    speed_ms = speed_kmh / 3.6\n    \n    # Calculate distance in meters\n    distance_meters = speed_ms * time_seconds\n    \n    return distance_meters\n\nans = solution()"
    ],
    "b370814add5e431bb51f7d7dac8d3ba5": [
        "def solution():\n    # Let total_apples be the total number of apples Jack has\n    total_apples = symbols('total_apples')\n\n    # He brought half of the total apples yesterday\n    brought_yesterday = total_apples / 2\n\n    # He sold 40 apples yesterday which is 4/7 of what he brought\n    sold_yesterday = Eq(40, (4/7) * brought_yesterday)\n\n    # Solve for total_apples\n    num_apples = solve(sold_yesterday, total_apples)\n\n    # Return the total number of apples\n    return num_apples[0]\n\nans = solution()"
    ],
    "6028933632e54b1a828b0f6d3598c001": [
        "def solution():\n    numbers = [200, 202, 204, 206, 208]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "44d68779a7c0423eb6e762338b582fca": [
        "def solution():\n    # Given averages\n    avg_first_2 = 10\n    avg_last_2 = 22\n    avg_first_last = 14\n\n    # Using the property: average = sum / number_of_elements\n\n    # Calculate the sum of the first 2 numbers and the last 2 numbers\n    sum_first_2 = avg_first_2 * 2\n    sum_last_2 = avg_last_2 * 2\n    \n    # Calculate the sum of the first and last numbers\n    sum_first_last = avg_first_last * 2\n\n    # Calculate the total sum of all 4 numbers\n    # We have 2*first + 2*last = sum_first_2 + sum_last_2\n    # Therefore, total sum = sum_first_last + sum of the two middle numbers\n    # The sum of the two middle numbers = (sum_first_2 + sum_last_2) - sum_first_last\n    sum_middle_2 = (sum_first_2 + sum_last_2) - sum_first_last\n\n    # Calculate the average of the two middle numbers\n    avg_middle_2 = sum_middle_2 / 2\n\n    return avg_middle_2\n\nans = solution()"
    ],
    "ed6e120cf0bc499d8e4a9bf4a9c4fd73": [
        "def solution():\n    # Let's denote the first term as 'a' and the common difference as 'd'.\n    \n    # The sum of the first n terms in an arithmetic progression is given by:\n    # S(n) = n/2 * (2a + (n - 1)d)\n    # For the given question, we have two equations:\n    # S(10) = 10/2 * (2a + (10 - 1)d) = 20\n    # S(30) = 30/2 * (2a + (30 - 1)d) = 90\n    \n    # Let's solve for 'a' and 'd' using these two equations.\n    \n    # From the first equation:\n    # 5 * (2a + 9d) = 20 => 2a + 9d = 4\n    # From the second equation:\n    # 15 * (2a + 29d) = 90 => 2a + 29d = 6\n    \n    # Now we can solve for 'd' by subtracting the first equation from the second:\n    # (2a + 29d) - (2a + 9d) = 6 - 4\n    # 20d = 2\n    # d = 2 / 20\n    d = 2 / 20\n    \n    return d\n\nans = solution()"
    ],
    "a754f6b5ebcb4917afb374104733b09e": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['9', '0', '2', '3']\n    all_possible_numbers = [int(''.join(p)) for p in permutations(digits)]\n    closest_number = min(all_possible_numbers, key=lambda x: abs(x - 2978))\n    return closest_number\n\nans = solution()"
    ],
    "1b32f8e585fc46068085a2478636e072": [
        "def solution():\n    jess_time = 18\n    jo_time = jess_time - 6\n    mary_time = jo_time + 4\n    \n    return mary_time\n\nans = solution()"
    ],
    "653842c3dbaa4a70846409866d45815a": [
        "def solution():\n    # The maximum number of plane regions formed by n lines is given by\n    # the recursive relation R(n) = R(n-1) + n\n    # This is a result of adding the nth line, which intersects the previous lines at most n-1 times\n    # Therefore, it can add at most n sections to the previous count\n    \n    # We can calculate it using the formula for the nth term:\n    # R(n) = n*(n+1)/2 + 1\n    \n    n = 10\n    ans = n*(n+1)//2 + 1\n    return ans\n\nans = solution()"
    ],
    "5ecddfaa220c43cf8e47b0f83763a84d": [
        "def solution():\n    first_term = 48\n    last_term = 80\n    difference = 4\n    # Calculate the number of rows using the formula for the nth term of an arithmetic sequence:\n    # last_term = first_term + (n - 1) * difference\n    # Solve for n:\n    num_rows = ((last_term - first_term) // difference) + 1\n    \n    # Calculate the sum of an arithmetic sequence using the formula:\n    # sum = n/2 * (first_term + last_term)\n    # Using the number of rows as n:\n    total_seats = num_rows / 2 * (first_term + last_term)\n\n    return int(total_seats)\n\nans = solution()"
    ],
    "40a9e9bead5546a4a0e08b6e1af8f008": [
        "def solution():\n    result = 50\n    original_number = (result + 10) / 2\n    return original_number\n\nans = solution()"
    ],
    "fbd5c2b741d540409dda4ac6ae1eefe3": [
        "def solution():\n    average_AB = 22\n    C = 19\n    # Since average = sum_of_elements / number_of_elements,\n    # sum_of_elements_AB = average_AB * number_of_elements_AB\n    sum_of_elements_AB = average_AB * 2\n    \n    # Sum of A, B, and C is sum_of_elements_AB + C\n    sum_of_elements_ABC = sum_of_elements_AB + C\n    \n    # Average of A, B, and C is sum_of_elements_ABC / number_of_elements_ABC\n    average_ABC = sum_of_elements_ABC / 3\n    \n    return average_ABC\n\nans = solution()"
    ],
    "668003c3b4ee4430939bf7445ffe574b": [
        "def solution():\n    product = 7007\n    factors = []\n    \n    for i in range(14, 100, 7):  # Starting from the smallest 2-digit multiple of 7\n        if product % i == 0:\n            other_factor = product // i\n            if 10 <= other_factor < 100:  # Check if the other factor is a 2-digit number\n                factors.append(i)\n                factors.append(other_factor)\n                break\n\n    sum_of_factors = sum(factors)\n    return sum_of_factors\n\nans = solution()"
    ],
    "6d5b83fe42184fb9bc959fdc4861c9b3": [
        "def solution():\n    avg_chinese_english = 34\n    avg_english_math = 36\n    avg_chinese_math = 44\n    \n    # Using the principle of Inclusion-Exclusion\n    # sum_avg = avg_chinese + avg_english + avg_math\n    sum_avg_double = (avg_chinese_english + avg_english_math + avg_chinese_math) * 2\n    avg_all_three = sum_avg_double / 3\n    \n    return avg_all_three\n\nans = solution()"
    ],
    "28594ee0096c4c27b6982e846d9415e3": [
        "def solution():\n    from datetime import datetime\n    \n    birth_date = datetime(1533, 9, 7)\n    death_date = datetime(1603, 3, 24)\n    \n    age = death_date - birth_date\n    age_years = age.days // 365  # Roughly calculate the years\n\n    return age_years\n\nans = solution()"
    ],
    "6b5f28a0da7644bf91c51262467f22af": [
        "def solution():\n    total_coins = 37\n    children = 5\n    remainder = total_coins % children\n    return remainder\n\nans = solution()"
    ],
    "5532a59da23d4cbea467c1a0cabeb494": [
        "def solution():\n    total_cakes = 50\n    layers = 9\n    max_in_layer = (total_cakes // layers) + (1 if total_cakes % layers else 0)\n    return max_in_layer\n\nans = solution()"
    ],
    "f83aeb54a6454c92abe4a6bb1cd131df": [
        "def solution():\n    max_side_length = int(23 ** 0.5)\n    square_length = max_side_length ** 2\n    length_to_cut = 23 - square_length\n    return length_to_cut\n\nans = solution()"
    ],
    "830b4822d207437b89a3a6ce5de16c84": [
        "def solution():\n    result = (21 + 1) * 7 - (20 + (1 * 7))\n    return result\n\nans = solution()"
    ],
    "3fa5ea265a5d4c0297ecf03b1cb17e9d": [
        "def solution():\n    total = 0\n    for i in range(1, 2019):\n        total += (2018 + i) / 5 - (2018 + i) // 5\n    return total\n\nans = solution()"
    ],
    "f2e7d75d544640ef95f39ae11d58e429": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    chelsia, benson = symbols('chelsia benson')\n    \n    # Create the equations based on the problem description\n    equation1 = Eq(3/4 * chelsia, 2/3 * benson)\n    equation2 = Eq(chelsia + 18, benson)\n    \n    # Solve the equations for the two unknowns\n    solutions = solve((equation1, equation2), (chelsia, benson))\n    \n    # Calculate the total sum of Chelsia and Benson's money\n    total_sum = solutions[chelsia] + solutions[benson]\n    \n    return total_sum\n\nans = solution()"
    ],
    "a38e073e5c4f4c3f94fc8c0ac26838a1": [
        "def solution():\n    # Average number in the sequence is the total sum divided by the number of terms\n    average = 357 // 7\n    \n    # Smallest number in the sequence is the average minus 3 times the common difference,\n    # which is 2 for odd numbers\n    smallest_number = average - 3 * 2\n    \n    return smallest_number\n\nans = solution()"
    ],
    "01afb46f9dd94497ab3c9968556ca7a1": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Let d be the common difference between the number of cookies in two adjacent boxes.\n    d = symbols('d')\n    \n    # The nth term of an arithmetic sequence is given by: a_n = a_1 + (n-1)d\n    # So the number of cookies in the 10th box is: 11 + 9d\n    # The sum of an arithmetic series is given by: S_n = (n/2)(2a_1 + (n-1)d)\n    # And we know that the sum of all cookies in the 10 boxes is 425.\n    # So we have the sum for 10 terms: S_10 = (10/2)(2*11 + (10-1)d) = 425\n    \n    # Now we setup the equation based on the sum formula and solve for d.\n    equation = Eq((10 / 2) * (2 * 11 + (10 - 1) * d), 425)\n    \n    # Solving the equation for d\n    solution = solve(equation, d)\n\n    # There might be multiple solutions, but we only need the one that makes sense in this context (positive difference)\n    for sol in solution:\n        if sol > 0:\n            return sol\n    \nans = solution()"
    ],
    "8da4fb1e422544f0a8b82f886050843b": [
        "def solution():\n    count = 0\n    for num in range(200, 501):\n        if '3' in str(num):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "7de9bf80e9294c29a99d27418f478a8e": [
        "from math import factorial\n\ndef solution():\n    total_numbers = factorial(5)\n    repeated_number = factorial(2)\n    ans = total_numbers // repeated_number\n    return ans\n\nans = solution()"
    ],
    "53f7ab0a979c47e9875a6745078c1158": [
        "def solution():\n    total_students = 300\n    year_5_students = total_students * 3 // 10\n    year_5_girls = year_5_students * 3 // 5\n\n    return year_5_girls\n\nans = solution()"
    ],
    "65457d2cc6de489f9eda50d81a2a99cd": [
        "def solution():\n    ans = 12 * 1.99\n    return ans\n\nans = solution()"
    ],
    "d5fb71d8282e4dad9d6f8b784f5145e7": [
        "def solution():\n    for number in range(200, 401):\n        if all(number % mod == rem for mod, rem in ((3, 2), (4, 2), (5, 2), (7, 5))):\n            return number\n\nans = solution()"
    ],
    "3c4de249075d4f07b0fc0c817ff3c58b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the cost of one chair in dollars\n    x = symbols('x')\n    # Each table costs $25 more than each chair, so the cost of a table is x + 25\n    \n    # The total cost for 5 tables and 12 chairs is $720\n    # So, we have the equation: 5 * (x + 25) + 12 * x = 720\n    equation = Eq(5 * (x + 25) + 12 * x, 720)\n\n    # Solve for x\n    cost_per_chair = solve(equation, x)[0]\n    # Calculate the cost per table\n    cost_per_table = cost_per_chair + 25\n\n    return cost_per_table\n\nans = solution()"
    ],
    "4b3d2f8a295c449eb0b933dd026b4cf9": [
        "def solution():\n    count = 0\n    for x1 in range(1, 13):\n        for x2 in range(1, 13):\n            for x3 in range(1, 13):\n                if x1 + x2 + x3 == 13:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "a6f219bbae8a4dde8e0a10e161120049": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    martin_time, carter_time = 9, 13\n    martin_speed, carter_speed = symbols('martin_speed carter_speed')\n\n    # Set up the equation based on the ratio of their times and the relationship of their speeds\n    equation1 = Eq(martin_speed / carter_speed, carter_time / martin_time)\n    equation2 = Eq(martin_speed, carter_speed + 20)\n\n    # Solve for Carter's speed\n    solutions = solve((equation1, equation2), (martin_speed, carter_speed))\n\n    return solutions[carter_speed]\n\nans = solution()"
    ],
    "eb64f29a539744afa20fabe47cf4247f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # We use the Chinese Remainder Theorem to solve the congruences\n    # The system of congruences is:\n    # x ≡ 1 (mod 5)\n    # x ≡ 1 (mod 6)\n    # x ≡ 1 (mod 7)\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    x, _ = solve_congruence(*congruences)\n\n    return x\n\nans = solution()"
    ],
    "985a10206885415abe07e67ad7c806da": [
        "def solution():\n    # The only even prime number is 2\n    return 2\n\nans = solution()"
    ],
    "033e1d824bce41289651265703300be3": [
        "def solution():\n    ans = 12636 // 54\n    return ans\n\nans = solution()"
    ],
    "e7dc5d1f98e34b2b9e1ae130e2a988c0": [
        "def solution():\n    # Fred and George together rate\n    fg_rate = 1 / 6\n\n    # Fred alone rate\n    f_rate = 1 / 9\n\n    # George alone rate (1/g_rate)\n    # 1/fg_rate = 1/f_rate + 1/g_rate\n    # Thus, 1/g_rate = 1/fg_rate - 1/f_rate\n    g_rate = 1 / (fg_rate - f_rate)\n\n    return g_rate\n\nans = solution()"
    ],
    "39314ee04d5249c699fbe6a90a08ea57": [
        "def solution(x):\n    initial_cloth = 18\n    remaining_cloth = initial_cloth - x\n    return remaining_cloth\n\nans = solution(x)  # 'x' is a placeholder and should be replaced with an actual number"
    ],
    "5b0fce7f22474da9ace32b857c116492": [
        "from fractions import Fraction\n\ndef solution():\n    result = Fraction(3) / Fraction(1, 3)\n    return result\n\nans = solution()"
    ],
    "281326e2a0e3497ca68a17bd591efba8": [
        "def solution():\n    return 543 + 284\n\nans = solution()"
    ],
    "0c22c9cf700b49a797234271b1f29ce6": [
        "def solution():\n    ans = (132 + 68) * (520 - 506)\n    return ans\n\nans = solution()"
    ],
    "c0b11362a9114743b4f269d706e86245": [
        "def solution():\n    # According to the Pigeonhole Principle, to ensure we have at least two apples of the same color,\n    # We need to take out one more apple than the number of distinct apple colors.\n\n    # We have 2 colors, so if we take out one of each color (2 apples in total), we are not guaranteed to have a pair of the same color.\n    # Therefore, we need to take out 3 apples to ensure at least two of them have the same color.\n\n    ans = 3  \n    return ans\n\nans = solution()"
    ],
    "854a818f3b564ec2936328e1204553fa": [
        "def solution():\n    A_inverse = sum(1 / x for x in range(1995, 2009))\n    A = 1 / A_inverse\n    return int(A)\n\nans = solution()"
    ],
    "8af761818c504f10a3169d69baf02a4b": [
        "def solution():\n    # Assuming each cat, dog, rabbit has four legs and each bird has two legs\n    cats_legs = 2 * 4\n    dogs_legs = 2 * 4\n    rabbit_legs = 1 * 4\n    # Let's define the number of legs that birds have\n    birds_legs = 2\n    \n    # Total legs of cats, dogs and rabbit\n    total_legs_without_birds = cats_legs + dogs_legs + rabbit_legs\n    \n    # Remaining legs that are supposed to belong to birds\n    remaining_legs_for_birds = 28 - total_legs_without_birds\n    \n    # Number of birds is the remaining legs divided by the number of legs per bird\n    num_birds = remaining_legs_for_birds // birds_legs\n    \n    return num_birds\n\nans = solution()"
    ],
    "90366a7b3e114b0782979eb7a1e2fcf7": [
        "def solution():\n    entrances = 5\n    people = 4\n    # Each person has 5 choices independently, so we multiply the choices for each person\n    ways = entrances ** people\n    return ways\n\nans = solution()"
    ],
    "d7922e5e4a59420081b76bfba68dfc63": [
        "def solution():\n    # Let x be the number of pens (both red and black) sold\n    # Initially, the ratio is 3:7, so we can write the initial quantities as 3y and 7y\n    # After selling x pens from each, the quantities become 3y-x and 7y-x\n    # The new ratio is 5:13, so (3y-x)/(7y-x) = 5/13\n\n    # Based on the information provided, we know that after selling x pens, there were 20 red pens left\n    # So we have 3y - x = 20\n\n    # Now we substitute and solve for y and x:\n    # (3y-x)/(7y-x) = 5/13 AND 3y - x = 20\n\n    # Simplify and solve the equation set\n    # 13(3y-x) = 5(7y-x)\n    # 39y - 13x = 35y - 5x\n    # 4y = 8x\n    # y = 2x\n\n    # Now substitute y in the second equation\n    # 3(2x) - x = 20\n    # 6x - x = 20\n    # 5x = 20\n    # x = 4\n\n    # So the original number of red pens is 3y = 3(2x) = 3(2*4) = 24\n    # Therefore, the number of red pens sold is 24 - 20 = 4\n\n    pens_sold = 4\n    return pens_sold\n\nans = solution()"
    ],
    "75543c0d8a344cd8a2e2dae02cbf92b8": [
        "def solution():\n    ans = 2.42 * 1.6\n    return ans\n\nans = solution()"
    ],
    "30f6b3c01a03478b9d6e70cbb8b7a3d4": [
        "def solution():\n    # Percentage increase and decrease\n    increase_percentage = 0.05\n    decrease_percentage = -0.05\n    \n    # Value after first year increase\n    value_after_first_year = 10500\n    \n    # Calculate original value using reverse of percentage increase\n    original_value = value_after_first_year / (1 + increase_percentage)\n    \n    # Calculate value after the second year (decrease)\n    value_after_second_year = original_value * (1 + decrease_percentage)\n    \n    # Calculate profit or loss\n    profit_or_loss = value_after_second_year - original_value\n    \n    return profit_or_loss\n\nans = solution()"
    ],
    "2bbb1e71338f41f6b5859b75e2be3aa2": [
        "def solution():\n    count_5 = 200 // 5\n    count_7 = 200 // 7\n    count_5_and_7 = 200 // (5 * 7)\n\n    ans = count_5 + count_7 - count_5_and_7\n    return ans\n\nans = solution()"
    ],
    "b3c36c7c2db9474583eeb898917fa090": [
        "def solution():\n    return 27 * 3\n\nans = solution()"
    ],
    "3eeca15404314eae896ffb6e5ded37b1": [
        "def solution():\n    factors_of_42 = [i for i in range(1, 43) if 42 % i == 0]\n    ans = next((factor for factor in factors_of_42 if 10 < factor < 20), None)\n    return ans\n\nans = solution()"
    ],
    "8abbe2b1899a4c2e80f9586a6a4dca94": [
        "def solution():\n    numbers = [8, 3, 9]\n    desired_average = 6\n    total_numbers = 4\n\n    total_sum_with_missing_number = desired_average * total_numbers\n    sum_of_known_numbers = sum(numbers)\n    missing_number = total_sum_with_missing_number - sum_of_known_numbers\n\n    return missing_number\n\nans = solution()"
    ],
    "465d94564aeb464d90ec7faaf9940c3d": [
        "def solution():\n    from sympy import symbols, solve\n\n    pen = symbols('pen')\n    \n    # Ruler costs $0.90 more than a pen\n    ruler = pen + 0.90\n\n    # Chuck bought 2 rulers and 9 pens for $21.60\n    equation = Eq(2 * ruler + 9 * pen, 21.60)\n\n    # Solve the equation\n    pen_price = solve(equation, pen)[0]\n    ruler_price = pen_price + 0.90\n\n    return ruler_price\n\nans = solution()"
    ],
    "3e5011dfff4a4b9b81f4caef853a49dc": [
        "def solution():\n    total_gravel_needed = 300\n    bag_weight = 12\n\n    bags_needed = total_gravel_needed / bag_weight\n\n    return int(bags_needed) if total_gravel_needed % bag_weight == 0 else int(bags_needed) + 1\n\nans = solution()"
    ],
    "52bf46560c164e7bb42b6bd92f0f48a8": [
        "def solution():\n    final_result = 1126\n    for month in range(1, 13):\n        for day in range(1, 32):\n            calculation = (((((month * 4) + 6) * 5) - 20) * 5) + day - 50\n            if calculation == final_result:\n                birthday = (month, day)\n                return birthday\n\nans = solution()"
    ],
    "e85ba3fcd99f4dd3a67b9b4bdac33f3c": [
        "def solution():\n    from sympy import isprime\n\n    for num in range(10, 50): # two-digit numbers are between 10 and 99, but less than 50 as per the clue\n        if (num + 2) % 3 == 0 and isprime(num) and (num - 2) % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "f5b4975343a544e0a0162174eaf7d4af": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('1356789'):\n        first_number = int(''.join(perm[:3]))\n        second_number = int(''.join(perm[3:5]))\n        third_number = int(''.join(perm[5:]))\n        if second_number == 2 * first_number and third_number == 4 * first_number:\n            return third_number\n\nans = solution()"
    ],
    "cab2106c28234f39ae49d4baa681fd8d": [
        "def solution():\n    term_1 = 4\n    term_last = 400\n    diff = 4\n    num_terms = (term_last - term_1) // diff + 1\n    sum_forward = num_terms * (term_1 + term_last) // 2\n    sum_backward = sum_forward - term_1 - term_last  # subtract first and last term once as they're not repeated\n    total_sum = sum_forward + sum_backward\n    return total_sum\n\nans = solution()"
    ],
    "f9135cf12fe94650a246bc80d424cf81": [
        "def solution():\n    return 24 * 7\n\nans = solution()"
    ],
    "8c8c3f8464b24d8c81c07c35b9ea6792": [
        "def solution():\n    cup_price = 5\n    refill_price = 1\n    total_money = 10\n\n    # Buy the first cup\n    total_cups = 1\n    remaining_money = total_money - cup_price\n\n    # Use remaining money to buy refills\n    total_cups += remaining_money // refill_price\n\n    return total_cups\n\nans = solution()"
    ],
    "3f1a8e5b057c47568af8eaa8c8a7ce10": [
        "def solution():\n    ans = 729 // 9\n    return ans\n\nans = solution()"
    ],
    "9e46398b6b5e425abaa591db8be0c422": [
        "from math import factorial\n\ndef solution():\n    story_books = factorial(2)\n    comic_books = factorial(3)\n    science_books = factorial(4)\n\n    # Calculate the arrangements for each type separately\n    arrangements_for_each_type = story_books * comic_books * science_books\n\n    # Calculate the arrangements for different types\n    different_types = factorial(3)\n\n    total_arrangements = arrangements_for_each_type * different_types\n\n    return total_arrangements\n\nans = solution()"
    ],
    "14c24a868f9148719c30a1b91c427e21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbol T for the variable tax rate we need to find\n    T = symbols('T')\n\n    # Calculating the tax\n    base_income = 50000\n    additional_income = 120000 - base_income\n    base_tax = 0.06 * base_income\n    additional_tax_rate = 0.06 + T / 100\n    additional_tax = additional_tax_rate * additional_income\n\n    # Setting up the equation\n    total_tax = Eq(base_tax + additional_tax, 10000)\n\n    # Solving for T\n    solution = solve(total_tax, T)\n    return solution[0]\n\nans = solution()"
    ],
    "ee339de70e1e49448ce55adaeae5eaa7": [
        "def solution():\n    total_peaches_3_monkeys = 96\n    days_3_monkeys = 2\n    number_of_monkeys = 3\n\n    # Calculate peaches eaten per monkey per day\n    peaches_per_monkey_per_day = total_peaches_3_monkeys / (number_of_monkeys * days_3_monkeys)\n\n    # Calculate total peaches eaten by 5 monkeys in 4 days\n    total_peaches_5_monkeys_4_days = peaches_per_monkey_per_day * 5 * 4\n\n    return total_peaches_5_monkeys_4_days\n\nans = solution()"
    ],
    "3681f2592b314f8ab3a72fc47b8f90bb": [
        "def solution():\n    from math import comb\n    \n    # Since each person must get at least one ice-cream, we first give each one ice-cream.\n    remaining_ice_creams = 5 - 3 # We have 5 ice-creams and 3 friends.\n    \n    # Now we need to distribute the remaining ice-creams among the three friends.\n    # This is equivalent to distributing `remaining_ice_creams` identical items into 3 parts,\n    # which is a problem of combinations with repetition.\n    \n    # The formula for combinations with repetition is comb(n + k - 1, k),\n    # where n is the number of items to distribute and k is the number of parts.\n    ans = comb(remaining_ice_creams + 3 - 1, remaining_ice_creams)\n    \n    return ans\n\nans = solution()"
    ],
    "8b8ec14b7a8644c29978ed2f26e00750": [
        "def solution():\n    ans = 345 * 5\n    return ans\n\nans = solution()"
    ],
    "e01c74553e6347a3b1a064b18bd7140d": [
        "def solution():\n    total_months = 12\n    average_jan_to_mar = 450\n    average_apr_to_jul = 350\n    total_aug_to_oct = 1250\n    average_nov_to_dec = 400\n\n    # Calculate the total spending for each time range\n    total_jan_to_mar = average_jan_to_mar * 3 # January to March (3 months)\n    total_apr_to_jul = average_apr_to_jul * 4 # April to July (4 months)\n    total_nov_to_dec = average_nov_to_dec * 2 # November to December (2 months)\n\n    # Calculate the overall total spending\n    total_spent = total_jan_to_mar + total_apr_to_jul + total_aug_to_oct + total_nov_to_dec\n\n    # Calculate the average spending per month for the whole year\n    average_per_month = total_spent / total_months\n\n    return average_per_month\n\nans = solution()"
    ],
    "27b3555bfced4c3fa57ebd84801ad9e9": [
        "def solution():\n    speed_walk = 40\n    speed_cycle = 60\n    # Assuming the distance to the library is d meters\n    # Time taken to walk to the library is d/speed_walk\n    # Time taken to cycle back is d/speed_cycle\n    # Average speed is total distance divided by total time\n    # Total distance = d (to) + d (from) = 2*d\n    # Total time = d/speed_walk + d/speed_cycle\n    # Average speed = total distance / total time\n    # Here we use the harmonic mean formula for the average speed of two sections of a trip\n    avg_speed = 2 / (1/speed_walk + 1/speed_cycle)\n    return avg_speed\n\nans = solution()"
    ],
    "8b91281c082e4e1e8991287413079e54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((3.5 / (3*x + 2)) + (2 / (1.5*x + 1)), (4.5 / (5 - 6*x)) - (3 / (2.5 - 3*x)))\n\n    solutions = solve(equation, x)\n\n    return solutions\n\nans = solution()"
    ],
    "bcade51c8974433b902c06454320d2d6": [
        "def solution():\n    for m in range(10):\n        total_sweets = int('127' + str(m))\n        if total_sweets % 25 == 0:\n            return int(total_sweets / 25)\n\nans = solution()"
    ],
    "e9b595c255074a5b964141db77e7289a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    equation = Eq(9/x, y/2)\n    y_value = solve(equation.subs(x, 3), y)[0]\n    \n    return 'inverse', y_value\n\nans = solution()"
    ],
    "462088e1598d4df6ad551447b191e0c2": [
        "def solution():\n    # Assuming x is the total amount given to Sophie.\n    \n    # Amount needed for 5 servings minus amount she was short for 5 servings equals amount needed for 3 servings plus the change she had left.\n    # 5 * price_per_serving - 2.30 = 3 * price_per_serving + 0.30\n    \n    # Simplifying the above equation:\n    # 2 * price_per_serving = 2.60\n    \n    # From the equation above we deduce that price_per_serving is 1.30.\n    # So the total amount given to Sophie is for 3 servings plus the change left:\n    # total_amount = 3 * price_per_serving + 0.30\n\n    price_per_serving = 2.60 / 2\n    total_amount = 3 * price_per_serving + 0.30\n    return total_amount\n\nans = solution()"
    ],
    "51ad76377c2d44b9bc497caa5e86cd99": [
        "from itertools import permutations\n\ndef solution():\n    digits = '2356'\n    all_odd_permutations = [int(''.join(p)) for p in permutations(digits) if int(p[-1]) % 2 != 0]\n    return min(all_odd_permutations)\n\nans = solution()"
    ],
    "1d0c88113962459d9a867535f00b7776": [
        "def solution():\n    return 391 // 17\n\nans = solution()"
    ],
    "09b871767fd046788bf00397a1526767": [
        "def solution():\n    # Let's assume the starting number is x\n    x = symbols('x')\n    \n    # Applying the operations to x one by one\n    # Add 3\n    operation = x + 3\n    \n    # Multiply by 2\n    operation *= 2\n    \n    # Take away 2\n    operation -= 2\n    \n    # Add 10\n    operation += 10\n    \n    # Divide by 2\n    operation /= 2\n    \n    # Take away the number you started with (x)\n    operation -= x\n    \n    # Simplify the operation to find the number left\n    ans = simplify(operation)\n        \n    return ans\n\nans = solution()"
    ],
    "931e1d2a335c4a7daca31b92b6d6c0ee": [
        "def solution():\n    from math import sqrt, pow\n\n    numerator = -6.94 - pow(9.604, 1/3)\n    denominator = sqrt(44.541 / 67) - (-377 / 6 * (5 / 3))\n\n    ans = round(numerator / denominator, 3)\n\n    return ans\n\nans = solution()"
    ],
    "54499dc98e4442c5aaa04120c1769fbe": [
        "def solution():\n    # To ensure we have at least two balls of the same color,\n    # we must consider the worst-case scenario where we keep picking different colors.\n    # Since there are only two colors, after picking one of each, the next ball must match one of those already picked.\n    \n    # First pick: 1 green\n    # Second pick: 1 blue\n    # Third pick: Must be either green or blue, so we have two of the same color\n    picks_needed = 1 + 1 + 1  # A total of 3 picks\n\n    return picks_needed\n\nans = solution()"
    ],
    "a58850681f6c454b93664a02ebcf4745": [
        "def solution():\n    ans = 299 + 199 + 99 + 5\n    return ans\n\nans = solution()"
    ],
    "7025bfa134974b12917661070ac0ccfc": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(50, 100))\n    return len(primes)\n\nans = solution()"
    ],
    "0015db147ca4414ca1e9736f722c0a81": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if str(i).count('7') >= 2:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a9e6ee1f892d4e91b4af844be4862a94": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Felicia's and Janice's bracelets\n    F, J, B = symbols('F J B')\n\n    # J is the initial number of Janice's bracelets which is 96\n    J = 96\n\n    # F_sold is the number of bracelets Felicia sold, which is 3/5 of her total bracelets F\n    # J_bought is the number of bracelets Janice bought from Felicia, which is 2/5 of what Felicia sold\n    F_sold = 3 * F / 5\n    J_bought = 2 * F_sold / 5\n\n    # Ratio becomes 5:7 for Felicia's remaining bracelets to Janice's total bracelets after buying\n    equation = Eq((F - F_sold) / (J + J_bought), 5 / 7)\n\n    # Use the equation to solve for F (Felicia's original number of bracelets).\n    solutions = solve(equation, F)\n\n    # Since we have two solutions, positively valued solution would make more sense\n    F_value = max(solutions)\n\n    # Calculate the number of bracelets Janice bought\n    num_bought = J_bought.subs(F, F_value)\n\n    return int(num_bought)\n\nans = solution()"
    ],
    "618cd3abae4a408c89cdfe804dd7861f": [
        "def solution():\n    # Total cost of science fictions\n    total_cost_sf = 20 * 4\n    \n    # Total cost of comic books\n    total_cost_cb = 10 * 5\n    \n    # Total cost of novels\n    total_cost_nv = 20 * 6\n    \n    # Total cost of all books\n    total_cost = total_cost_sf + total_cost_cb + total_cost_nv\n    \n    # Total number of books\n    total_books = 20 + 10 + 20\n    \n    # Average cost per book\n    average_cost = total_cost / total_books\n    \n    return average_cost\n\nans = solution()"
    ],
    "21b53a84fa7744b799aa83b063cea3d3": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    jack, kyle = symbols('jack kyle')\n    \n    # Jack had 5 times as much money as Kyle\n    equation1 = Eq(jack, 5 * kyle)\n    # After Jack lost $72, Kyle had 2/7 as much money as Jack\n    equation2 = Eq(kyle, (2/7) * (jack - 72))\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (jack, kyle))\n\n    return solutions[kyle]\n\nans = solution()"
    ],
    "f0b55e6d454f4ee0b6b7bab29ab5fcde": [
        "def solution():\n    # Total number of orange, pink, and brown shirts\n    non_yellow_shirts = 6 + 4 + 12\n\n    # To be sure to get 1 yellow shirt, Annabella must take out all non-yellow shirts plus one more,\n    # which would then be guaranteed to be yellow.\n    number_of_shirts_to_take = non_yellow_shirts + 1\n\n    return number_of_shirts_to_take\n\nans = solution()"
    ],
    "81c24559e88e4ed8bcd27664fdc09676": [
        "def solution():\n    from math import lcm\n    return lcm(9, 10, 15)\n\nans = solution()"
    ],
    "839a183a0d534ab08d061613682d208e": [
        "def solution():\n    multipack_cost = 3.90\n    individual_cost = 0.35 * 15\n    savings = individual_cost - multipack_cost\n    return savings\n\nans = solution()"
    ],
    "7e911c176e49479e9ed116f42644288d": [
        "def solution():\n    principal = 20000\n    rate = 0.05\n    time = 11\n\n    amount = principal * (1 + rate * time)\n\n    return amount\n\nans = solution()"
    ],
    "f12b69acb17a43e28c14160e54423ddd": [
        "def solution():\n    total_sum = (3/4) + (3/4) + (3/4)\n    missing_number = (total_sum - 1) * 4\n    return missing_number\n\nans = solution()"
    ],
    "fe146e5b026340f9924ffd3736d5162b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the first term as 'a' and the common difference as 'd'.\n    a = symbols('a')\n    d = 2  # given common difference\n    n = 20  # given number of terms\n\n    # The sum of an arithmetic progression is given by n/2 * (2a + (n-1)d).\n    # We are given this sum as 560.\n    equation = Eq(n / 2 * (2 * a + (n - 1) * d), 560)\n\n    # Solving the equation for 'a' (the first term)\n    solutions = solve(equation, a)\n    \n    # Since we want the smallest term and there could be multiple solutions, we take the min value.\n    smallest_term = min(solutions)\n    \n    return smallest_term\n\nans = solution()"
    ],
    "4b5a108e7b29463283a0121b8eff4ee7": [
        "def solution():\n    climbed_distance = 0\n    day = 0\n    while climbed_distance < 8:\n        day += 1\n        climbed_distance += 3  # Climb up during the day\n        if climbed_distance >= 8:\n            break\n        climbed_distance -= 2  # Slip down during the night\n    return day\n\nans = solution()"
    ],
    "24494b59b3a84f199458f505e96beab3": [
        "def solution():\n    days_first_period = 4\n    pages_per_day_first_period = 25\n\n    days_second_period = 6\n    pages_per_day_second_period = 40\n\n    days_third_period = 5\n    total_pages_third_period = 80\n\n    total_pages_read = (days_first_period * pages_per_day_first_period) + \\\n                       (days_second_period * pages_per_day_second_period) + \\\n                       total_pages_third_period\n\n    total_days = days_first_period + days_second_period + days_third_period\n\n    average_pages_per_day = total_pages_read / total_days\n\n    return average_pages_per_day\n\nans = solution()"
    ],
    "ecd90328d44a498ab3c19fbbded322fc": [
        "def solution():\n    chocolate = 54\n    strawberry = chocolate + 12\n    vanilla = 3 * chocolate\n\n    total_cookies = chocolate + strawberry + vanilla\n\n    return total_cookies\n\nans = solution()"
    ],
    "50bfc99c8d774fb4a0ecaeddfbae7daf": [
        "def solution():\n    birds_on_tree_A = 14\n    birds_on_tree_B = birds_on_tree_A + 7\n    total_birds = birds_on_tree_A + birds_on_tree_B\n    return total_birds\n\nans = solution()"
    ],
    "590987a303104728994dd0da7fd3edb0": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (3, 5), (5, 7), (9, 11)]\n    ans, _ = solve_congruence(*congruences)\n\n    return ans\n\nans = solution()"
    ],
    "3dcbd6c48bb44952b98d8cdbb7804567": [
        "def solution():\n    # let's assume the brother's original number of toys is x\n    # according to the question, Penny's toys = brother's toys + 10\n    # after giving away some toys, Penny's toys become 14 and brother's toys become 12\n    # Therefore, the equation is: x + (14 - 10) = 12\n    # Solve the simple equation for x:\n    x = 12 - (14 - 10)\n    return x\n\nans = solution()"
    ],
    "18e49347b54c42d49dfd7851649db755": [
        "def solution():\n    ans = 123 * 321\n    return ans\n\nans = solution()"
    ],
    "b61f2c67d5474cefa523298e7944c309": [
        "def solution():\n    for age in range(10, 100):  # Alberta's age is a two-digit number\n        reversed_age = int(str(age)[::-1])  # Reverse the digits\n        if reversed_age + 1 == age // 2:\n            return age\n\nans = solution()"
    ],
    "3b73a77f7c8e486d98024f7782b84098": [
        "def solution():\n    n = 50  # Last term\n    sum_of_series = (n * (n + 1)) // 2\n    return sum_of_series\n\nans = solution()"
    ],
    "6c8cdbe801664deaa9cc1f055549ee16": [
        "def solution():\n    return 3588 // 13\n\nans = solution()"
    ],
    "a4df0cfdb4324df6bf44b5accd085d76": [
        "def solution():\n    # Since there are 4 suits, to guarantee that Tom has 4 cards of the same suit\n    # after the worst-case scenario, he needs to get 4 cards of each suit\n    # plus one to make sure the next card belongs to a suit that already has 4 cards.\n\n    # Worst-case scenario before getting 4 of the same suit:\n    # 3 cards from each of the 4 suits = 3 * 4 = 12 cards\n\n    # Then one more to guarantee the 4th card of the same suit:\n    guarantee_four_of_a_kind = 12 + 1\n\n    return guarantee_four_of_a_kind\n\nans = solution()"
    ],
    "4a2049898e2f4dcb959012b7515613ac": [
        "def solution():\n    ans = 26 + 9 + 14 + 21\n    return ans\n\nans = solution()"
    ],
    "4ada2fc5ea7044e8883b8b41373103ba": [
        "def solution():\n    percent_unsold = 100 - 60\n    unsold_tickets = 28\n    \n    total_capacity = unsold_tickets * 100 / percent_unsold\n    \n    return int(total_capacity)\n\nans = solution()"
    ],
    "2eb3b3989afb45418447f85937aa1224": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the amounts spent by Hayden and Mitchell\n    spent = symbols('spent')\n\n    # Create the equation: Hayden's remaining money is 4 times Mitchell's\n    equation = Eq((1420 - spent), 4 * (505 - spent))\n\n    # Solve the equation\n    spent_amount = solve(equation, spent)[0]\n\n    return spent_amount\n\nans = solution()"
    ],
    "1404b37a858c4a309f7a557d011e187e": [
        "def solution():\n    one_quarter = 15\n    number = one_quarter * 4\n    two_thirds = (number * 2) / 3\n    return two_thirds\n\nans = solution()"
    ],
    "22ad17f448d649e0b1fe57f02fb19f28": [
        "def solution():\n    # Jim's initial total amount calculation\n    two_dollar_notes = 5\n    fifty_cent_coins = 7\n    file_cost = 11.95\n    \n    # Correct calculation in dollars\n    initial_amount = (two_dollar_notes * 2) + (fifty_cent_coins * 0.50)\n    \n    # Remaining amount after purchasing the file\n    remaining_amount = initial_amount - file_cost\n\n    return remaining_amount\n\nans = solution()"
    ],
    "f2d20571c7e14687b51b0f2273c1a1e6": [
        "def solution():\n    n = 100\n    return n * (n + 1) // 2\n\nans = solution()"
    ],
    "f8a9831c64444874a7a022c43dcf9b19": [
        "def solution():\n    saturday_sales = 2200\n    sunday_sales = 2200 - 435\n    total_sales = saturday_sales + sunday_sales\n    return total_sales\n\nans = solution()"
    ],
    "a4dc96d97cbd45ada42d2e9d64c14fe0": [
        "def solution():\n    # Let the total number of people be x.\n    # Then the number of children is (4/7) * x\n    # The number of boys among children is (3/8) * (4/7) * x\n    # The number of girls among children is the rest of the children, so (5/8) * (4/7) * x\n    # According to the problem, the number of girls is 45, so we can set up the equation:\n    # (5/8) * (4/7) * x = 45\n    # Solving for x gives us the total number of people at the party.\n    \n    x = (45 * 8 * 7) / (5 * 4)\n    return int(x)\n\nans = solution()"
    ],
    "305c7d5b598d4dd28cdaf101e7ead5d7": [
        "def solution():\n    day_progress = 3\n    night_regress = -1\n    net_progress = day_progress + night_regress\n    distance_to_climb = 11\n    day = 0\n\n    while True:\n        day += 1\n        distance_to_climb -= day_progress\n        if distance_to_climb <= 0:\n            break\n        distance_to_climb += night_regress\n\n    return day\n\nans = solution()"
    ],
    "01cf6f9c69e4458a8b94a0b745d2cc7d": [
        "def solution():\n    ginko_trees = 30\n    willow_trees_between = 2\n\n    total_willow_trees = (ginko_trees - 1) * willow_trees_between\n\n    return total_willow_trees\n\nans = solution()"
    ],
    "186459d1a5bc465cae1639d4f60e5ff7": [
        "def solution():\n    ans = 10 - 2\n    return ans\n\nans = solution()"
    ],
    "eec2a2b1d8c14700926c3b02af68e739": [
        "def solution():\n    speed_of_ship = 28\n    speed_of_current = 3\n    distance = 150\n\n    # Calculate upstream speed\n    upstream_speed = speed_of_ship - speed_of_current\n    \n    # Time = Distance / Speed\n    time = distance / upstream_speed\n    \n    return time\n\nans = solution()"
    ],
    "7d59e89e4b054b118a94d4c74670905c": [
        "def solution():\n    from math import factorial\n\n    def permutations(n, r):\n        return factorial(n) // factorial(n - r)\n\n    n_pupils = 18\n    r_seats = 3\n\n    ans = permutations(n_pupils, r_seats)\n\n    return ans\n\nans = solution()"
    ],
    "3bb33463238344c0b0c5e15f79be1c35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, brian, christopher = symbols('andrew brian christopher')\n\n    equation1 = Eq(andrew + brian, 40)\n    equation2 = Eq(andrew + christopher, 37)\n    equation3 = Eq(brian + christopher, 25)\n\n    solutions = solve((equation1, equation2, equation3), (andrew, brian, christopher))\n\n    total_money = solutions[andrew] + solutions[brian] + solutions[christopher]\n\n    return total_money\n\nans = solution()"
    ],
    "cb41cb4b2a104da19631ca6cf97368fb": [
        "def solution():\n    x = (26 + 4) / 5\n    return x\n\nans = solution()"
    ],
    "d26417287aa54f1a81818d3f38ddf3b7": [
        "def solution():\n    ramen_cost = 8\n    pineapple_juice_cost = ramen_cost - 5\n    roasted_duck_cost = 6 * ramen_cost\n\n    total_cost = ramen_cost + pineapple_juice_cost + roasted_duck_cost\n\n    return total_cost\n \nans = solution()"
    ],
    "c41f84fd63394a0391698bc5498037eb": [
        "def solution():\n    cheese_weight = 500 / 1000  # convert grams to kilograms\n    cheese_price_per_kg = 7.48\n    cost_of_cheese = cheese_price_per_kg * cheese_weight\n\n    apple_price = 0.12  # convert pence to pounds\n    number_of_apples = 8\n    cost_of_apples = apple_price * number_of_apples\n\n    yoghurt_price = 0.46  # convert pence to pounds\n    number_of_yoghurts = 2\n    cost_of_yoghurts = yoghurt_price * number_of_yoghurts\n\n    total_cost = cost_of_cheese + cost_of_apples + cost_of_yoghurts\n\n    money_given = 10  # in pounds\n    change = money_given - total_cost\n\n    return round(change, 2)\n    \nans = solution()"
    ],
    "b25a759f5a124329b59f7caa09995681": [
        "def solution():\n    # Equations based on the problem statement:\n    # Adam + Ben = 102 kg\n    # Ben + Carl = 97 kg\n    # Adam + Carl = 93 kg\n    \n    # Add all three equations:\n    # (Adam + Ben) + (Ben + Carl) + (Adam + Carl) = 102 + 97 + 93\n    # 2 * (Adam + Ben + Carl) = 292\n    # Total weight of Adam, Ben, and Carl:\n    total_weight = (102 + 97 + 93) / 2\n\n    return total_weight\n\nans = solution()"
    ],
    "c21db49e2ec24c00ad1e61412de8a8da": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andy_rate = symbols('andy_rate')  # Andy's rate in aircrafts per hour\n    zack_rate = 150                   # Zack's rate in aircrafts per hour\n\n    total_aircrafts = 1200            # Total number of aircrafts to be sold\n    time_together = 6                 # Time in hours to sell all aircrafts together\n\n    # Equation for total work done together\n    equation = Eq((andy_rate + zack_rate) * time_together, total_aircrafts)\n\n    # Solve for Andy's rate\n    andy_rate_value = solve(equation, andy_rate)[0]\n\n    # Calculate how long it would take for Andy to sell all the aircrafts by himself\n    time_andy_alone = total_aircrafts / andy_rate_value\n\n    return time_andy_alone\n\nans = solution()"
    ],
    "1a2675c93fa74d79bf17aa463233e418": [
        "def solution():\n    people_diff = 80\n    total_people = 1  # Start with a 1x1 square (innermost layer)\n    side_length = 1\n\n    while True:\n        # Add a layer of students (4 new sides, with the corners being counted twice)\n        students = 4 * side_length\n        total_people += students\n        side_length += 2  # Increase length for the next layer\n        # Add a layer of teachers (4 new sides, without the corners)\n        teachers = 4 * (side_length - 1)\n        total_people += teachers\n\n        if students - teachers == people_diff:\n            break\n\n    return total_people\n\nans = solution()"
    ],
    "a85551b5ada240de8c9dda1f7da71caa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chloe, david, emily = symbols('chloe david emily')\n\n    equation1 = Eq(chloe, 2 * david)\n    equation2 = Eq(david, 3 * emily)\n    equation3 = Eq(74 + 86 + chloe + david + emily, 400)\n\n    solutions = solve((equation1, equation2, equation3), (chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "97d454b709c64e6daff1a08bdaaa2036": [
        "def solution():\n    total_ratio = 2 + 7 + 6\n    total_volume = 300\n    orange_ratio = 7\n\n    orange_volume = (orange_ratio / total_ratio) * total_volume\n    \n    return orange_volume\n\nans = solution()"
    ],
    "e9ac6545c3a143c28291a6d293def281": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')  # x is the smaller number, y is the bigger number\n\n    equation1 = Eq(x + y, 528)\n    equation2 = Eq(y, 3 * x)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "ea932493a6be4bd8a55c3012ca3eed55": [
        "def solution():\n    original_amount = 20\n    daily_savings = 1 * 7  # $1 everyday for one week\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    remaining_amount = original_amount + daily_savings - lent_to_brother - spent_on_snacks\n    \n    return remaining_amount\n\nans = solution()"
    ],
    "e000ebdd6454463d874a0f9f4b5453da": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Symbols for the amounts Steven, Mark, and Ryan have\n    steve, mark, ryan = symbols('steve mark ryan')\n    # Symbol for the cost of the meal\n    meal_cost = symbols('meal_cost')\n\n    # System of equations based on the information given\n    # Equation 1: Steve has $40 more than Mark\n    eq1 = steve - mark - 40\n\n    # Equation 2: Ratios after Steve pays for the meal\n    eq2 = (steve - meal_cost) / (mark) / (ryan) - 3/8/9\n\n    # Equation 3: Ratios after Ryan pays for the meal\n    eq3 = (steve) / (mark) / (ryan - meal_cost) - 5/4/1\n\n    # Equation 4: Ratios after Mark pays for the meal\n    eq4 = (steve) / (mark - meal_cost) / (ryan) - 10/1/9\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4), (steve, mark, ryan, meal_cost))\n    \n    # Since there might be multiple solutions, we take the one with a positive cost\n    meal_cost_value = next(val[meal_cost] for val in solutions if val[meal_cost] > 0)\n\n    return meal_cost_value\n\nans = solution()"
    ],
    "adba7c277cb842899408b324ea11a443": [
        "def solution():\n    initial_amount = 28.74\n    repayment = 10.50\n    remaining_after_repayment = initial_amount - repayment\n    spent_on_magazines = remaining_after_repayment / 2\n    remaining_after_magazines = remaining_after_repayment - spent_on_magazines\n\n    return remaining_after_magazines\n\nans = solution()"
    ],
    "b3ed35bbe5ce4935bcc062b5653f1a11": [
        "def solution():\n    # We need to find a cube number that 44000 is divisible by.\n    # Let us factorize 44000 to its prime factors to easily find cube factors.\n    cube = 1\n    for i in range(2, 44001):\n        count = 0\n        while 44000 % i == 0:\n            count += 1\n            44000 //= i\n        # Since we need the number q such that 44000/q is a cube, we count how many times \n        # each prime factor appears, and we make sure to multiply by the factor if it \n        # is not part of a group of three, since grouped by threes they already create a cube.\n        cube *= i**(count%3)\n        if 44000 == 1:\n            break\n    return cube\n\nans = solution()"
    ],
    "be66bf7835674a479413fc1019bf6408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    l, w = symbols('l w')  # l represents the length, w represents the width\n    equation1 = Eq(l, 2 * w)\n    equation2 = Eq(2*l + 2*w, 72)\n\n    solutions = solve((equation1, equation2), (l, w))\n\n    return solutions[l]\n\nans = solution()"
    ],
    "cc1ad36629654bae97b8c5a7fac65f55": [
        "def solution():\n    nick_salt = 300 * 0.12\n    nicole_salt = 500 * 0.28\n    total_salt = nick_salt + nicole_salt\n    total_solution = 300 + 500\n    concentration = total_salt / total_solution\n    return concentration\n\nans = solution()"
    ],
    "be0c4394f54542bfb8c9b196143e27a7": [
        "def solution():\n    n3 = 23  # 3rd term\n    n15 = 155  # 15th term\n    common_difference = (n15 - n3) / (15 - 3)\n    return common_difference\n\nans = solution()"
    ],
    "dfcfac4be0e0482cbfbe73e3f8f36b37": [
        "def solution():\n    n = 81\n    factors = set()\n    \n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    \n    ans = len(factors)\n    return ans\n\nans = solution()"
    ],
    "de537ba1fad747e38db67229241b78f3": [
        "def solution():\n    mass = 100  # mass of the crate in kg\n    coefficient_of_static_friction = 0.4  # coefficient of static friction\n    applied_force = 250  # force applied in N\n\n    # Calculate the normal force (force perpendicular to the floor)\n    g = 9.81  # acceleration due to gravity in m/s^2\n    normal_force = mass * g\n\n    # Calculate the maximum force of static friction\n    max_static_friction = coefficient_of_static_friction * normal_force\n\n    # If the applied force is less than the maximum static frictional force,\n    # the force of static friction equals the applied force.\n    # Otherwise, it equals the maximum static frictional force.\n    force_of_static_friction = min(applied_force, max_static_friction)\n\n    return force_of_static_friction\n\nans = solution()"
    ],
    "d9b27069b97d43039159301e52324136": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    equation1 = Eq(B, A - 50)\n    equation2 = Eq(A + 25, 5 * (B - 25))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "05b3b86ca32248e090e1eb71f8a1857e": [
        "def solution():\n    i = 1\n    while True:\n        cube = i ** 3\n        square = (cube + 1) ** 0.5\n        if square.is_integer():\n            return int(square)**2\n        i += 1\n\nans = solution()"
    ],
    "63961e2f7dee44ca9a4d89a4d4de6c02": [
        "def solution():\n    total_buttons = 24\n    difference = 6\n\n    # Let's denote the number of buttons Nina has as 'n'.\n    # James would then have 'total_buttons - n' buttons.\n    # After Nina gives James 6 of her buttons, they have the same amount.\n    # This means Nina has 'n - 6' buttons and James has 'total_buttons - n + 6' buttons.\n    # Setting these equal to each other we get the equation: n - 6 = total_buttons - n + 6\n    \n    # Solving for 'n', we get:\n    n = (total_buttons + difference) / 2\n\n    return int(n)\n\nans = solution()"
    ],
    "100c6fbfe37a4df59970ef7b87bb2fb2": [
        "def solution():\n    result = ((11/30) - (9/20) + (7/12) - (1/3)) * 6 * (7/13) * 9.1\n    return result\n\nans = solution()"
    ],
    "154e009409a0475f899012d13bba6fbe": [
        "def solution():\n    total_workers = 3\n    total_parts = 90\n    total_hours = 5\n    \n    parts_per_hour_per_worker = (total_parts / total_hours) / total_workers\n    return parts_per_hour_per_worker\n\nans = solution()"
    ],
    "9b06a89d59134d6786d0f3304363e49b": [
        "def solution():\n    distance_climbed_per_day = 5\n    slide_down_at_night = 3\n    net_distance_per_day = distance_climbed_per_day - slide_down_at_night\n    total_distance = 16\n    day = 0\n\n    while total_distance > 0:\n        day += 1\n        total_distance -= distance_climbed_per_day\n        if total_distance <= 0:\n            break\n        total_distance += slide_down_at_night\n\n    return day\n\nans = solution()"
    ],
    "bee004ffbd0d4ae48f167a59c6b0eba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(bentley, david - 25)\n    equation3 = Eq(david + bentley + triston, 410)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[bentley]\n\nans = solution()"
    ],
    "e382d288fd514311b12b870b6e188cb0": [
        "def solution():\n    # Assuming the relationship between the number of bags (x) and the tax charged (y)\n    # is linear and follows the form y = mx + b, where m is the slope and b is the y-intercept.\n    \n    # For the sake of this solution, we'll assume the values for m and b are given as follows:\n    # m = 5 (since the problem statement indicated this as a rate per bag, for instance)\n    # b = 2 (as an example of a base tax charged regardless of the number of bags)\n\n    # Therefore, the equation that relates x and y would be:\n    equation = \"y = 5*x + 2\"\n\n    return equation\n\nans = solution()"
    ],
    "3f7c7e2ec1a24832be797aa888a40a2e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (3, 5), (3, 7), (0, 9)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "cf5c903f7a704e0e9edc0dcebf1c25a4": [
        "def solution():\n    return max(8/100, 0.7)\n\nans = solution()"
    ],
    "9518ce77f5dc46ba89558b1a438ed818": [
        "def solution():\n    ans = 3 * (4/5) * (1 + 1/9) * (5 + 1/2) * (3/11)\n    return ans\n\nans = solution()"
    ],
    "d023e16d6b0442258dbdd634f6f230cd": [
        "def solution():\n    flat_fee = 30\n    daily_fee_short_term = 25\n    daily_fee_long_term = 20\n    total_paid = 275\n    \n    # Calculate cost for 5 days or less\n    max_short_term_days = (total_paid - flat_fee) / daily_fee_short_term\n    \n    if max_short_term_days <= 5:\n        return max_short_term_days\n    else:\n        # Calculate days for long term rental, subtract short term cost from total\n        long_term_days = (total_paid - flat_fee - 5 * daily_fee_short_term) / daily_fee_long_term\n        return 5 + long_term_days  # Total days is sum of short term and long term days\n\nans = solution()"
    ],
    "5b1c49d670024781873d3ae0efb0c655": [
        "def solution():\n    # Given the relationship:\n    # 1 dog = 8 rabbits\n    # 1 rabbit = 2 chickens\n    # We can substitute the rabbit weight in terms of chickens into the dog weight.\n    # 1 dog = 8 * (1 rabbit in terms of chickens)\n    # 1 dog = 8 * 2 chickens\n    # Hence, 1 dog weighs as much as 16 chickens.\n    return 8 * 2\n\nans = solution()"
    ],
    "16022d017d8d4b2a93df59ec9de8de8d": [
        "def solution():\n    product = 1\n\n    for i in range(2, 51):\n        product *= ((1/i) - (1/(51-i)))\n\n    return product\n\nans = solution()"
    ],
    "eae7f41ff90f44e7a99eb2dc09729a1c": [
        "def solution():\n    initial_height = 270 \n    rebound_ratio = 0.1\n    total_distance = initial_height\n\n    while initial_height * rebound_ratio > 0:\n        total_distance += 2 * initial_height * rebound_ratio\n        initial_height *= rebound_ratio\n\n    return total_distance\n\nans = solution()"
    ],
    "42cc9c30d7da46e1b85c814f51f4cb50": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    green, yellow = symbols('green yellow')\n\n    equation1 = Eq(green - 60, yellow - 14)\n    equation2 = Eq(yellow - 14, 3 * (green - 60))\n\n    solutions = solve((equation1, equation2), (green, yellow))\n\n    return solutions[green] - 60\n\nans = solution()"
    ],
    "a6d0ec4cdc6d41c1bee18c4428510978": [
        "def solution():\n    buck_speed = 600  # meters per minute\n    elephant_speed = 250  # meters per minute\n    race_distance = 3000  # meters\n\n    buck_time = race_distance / buck_speed\n    elephant_time = race_distance / elephant_speed\n\n    time_difference = elephant_time - buck_time\n\n    return time_difference\n\nans = solution()"
    ],
    "f5f9f6e369044a1b83219aa9a9159ae4": [
        "def solution():\n    first_term = 4\n    last_term = 400\n    common_difference = 4\n    number_of_terms = ((last_term - first_term) / common_difference + 1)\n\n    # Sum of an arithmetic sequence\n    sum_sequence = (number_of_terms / 2) * (first_term + last_term)\n\n    # Since the sequence is repeated in reverse, we double the sum we just calculated.\n    # We don't count the last term twice, so we subtract it once.\n    ans = 2 * sum_sequence - last_term\n    return int(ans)\n\nans = solution()"
    ],
    "821bbb7b160a4641959ffcfcc87a1881": [
        "def solution():\n    percent_bad = 15\n    total_apples = 200\n\n    bad_apples = (percent_bad / 100) * total_apples\n\n    return bad_apples\n\nans = solution()"
    ],
    "901ccb4591ae4fc0b5dc46e406c89367": [
        "def solution():\n    ans = 123 - 67\n    return ans\n\nans = solution()"
    ],
    "da055c1b89524c48bc32bc19a92de881": [
        "def solution():\n    # The cost of one pencil\n    cost_per_pencil = 1.80 / 12\n\n    # The ratio cost of a pen to a pencil is 7:3, we can write cost_per_pen as:\n    cost_per_pen = (7 / 3) * cost_per_pencil\n\n    # The cost of 5 pens\n    cost_for_5_pens = 5 * cost_per_pen\n    \n    return cost_for_5_pens\n\nans = solution()"
    ],
    "6f13e1fc1b49403ea8b1930c4936f41a": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Initial conditions\n    simon_speed = 80  # km/h\n    wife_speed = 60  # km/h\n    distance_between_offices = 15  # km\n    starting_time = datetime.strptime(\"18:10\", \"%H:%M\")\n    \n    # Time difference for Simon to cover the 15 km gap at relative speed\n    # Relative speed = simon_speed - wife_speed\n    relative_speed = simon_speed - wife_speed\n    time_to_cover_gap = distance_between_offices / relative_speed\n\n    # Convert hours to minutes and add the time difference to the starting time\n    time_to_cover_gap_minutes = time_to_cover_gap * 60  # Convert hours to minutes\n    overtaking_time = starting_time + timedelta(minutes=time_to_cover_gap_minutes)\n\n    # Return the formatted time\n    return overtaking_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "3aaf82004b014041bf215ad6f6fcea70": [
        "def solution():\n    first_term = 2\n    last_term = 80\n    difference = 2\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_sequence = num_terms * (first_term + last_term) // 2\n    return sum_sequence\n\nans = solution()"
    ],
    "3e45de8cb94745a28ca3cae049c63279": [
        "def solution():\n    # Number of choices for drinks\n    drinks = 2  # coffee, milk\n    \n    # Number of choices for food items\n    food_items = 3  # hamburgers, burritos, bagels\n    \n    # Applying the principle of multiplication\n    ans = drinks * food_items\n    \n    return ans\n\nans = solution()"
    ],
    "fbd1909b07244f4b8fef27cb83be59f2": [
        "def solution():\n    ans = 0\n    for i in range(1, 101):\n        if i % 3 == 0:\n            if i % 5 == 0:\n                continue\n            else:\n                ans += 1\n        elif i % 5 == 0:\n            ans += 1\n    return ans\n\nans = solution()"
    ],
    "40bc621de9c14774a192faa5c08aa4c1": [
        "def solution():\n    pancakes_per_minute = 2 / 3\n    total_minutes = 12\n    total_pancakes = pancakes_per_minute * total_minutes\n    return int(total_pancakes)\n\nans = solution()"
    ],
    "14775f177c0c4183a67b4ef46483248b": [
        "def solution():\n    # Times each person takes to cross the river\n    jason = chi_yew = 5\n    wei_jie = 9\n    michael = 7\n\n    # Fastest persons cross first\n    time_to_cross = jason + michael  # Jason and Michael cross (fastest and slowest)\n    time_to_cross += jason           # Jason comes back\n    time_to_cross += chi_yew + wei_jie  # Chi Yew and Wei Jie cross\n    time_to_cross += chi_yew           # Chi Yew comes back\n    time_to_cross += jason + michael   # Jason and Michael cross again\n\n    return time_to_cross\n\nans = solution()"
    ],
    "6ed4b3f4d3984ba0b27b5278f3c00efa": [
        "def solution():\n    # To reach step 5, Nelson can either take 4 single steps, \n    # or 2 single steps and one double step in 3 different ways (1,1,2), (1,2,1), (2,1,1).\n    # So there are a total of 1 + 3 = 4 ways to reach step 5.\n\n    ways_to_reach_5 = 4\n\n    # After step 5, Nelson has 5 more steps. He could reach the 10th step in the same number\n    # of ways he could reach the 5th step since the problem is symmetrical.\n    # Therefore, there are 4 ways to reach the 10th step after stepping on the 5th.\n\n    ways_to_reach_10_after_5 = 4\n    \n    # The total number of different ways he can climb the stairs is the product of the two:\n    total_ways = ways_to_reach_5 * ways_to_reach_10_after_5\n    \n    return total_ways\n\nans = solution()"
    ],
    "fbc9c3861d2d486da8e9c21841d42bfa": [
        "def solution():\n    # Because we fold the paper in half and number 1, 2, 3, 4, ..., there will be 2 pages on each sheet\n    # Let's assume there are n sheets, then there will be n*2 pages.\n    # If we open up a sheet, two of the pages will be consecutive numbers x, x+1 and the other two will be \n    # (total_number_of_pages - x + 1) and (total_number_of_pages - x), which are at the beginning and end of the booklet.\n    # The total sum of numbers on the open sheet is then x + (x+1) + (total_number_of_pages - x + 1) + (total_number_of_pages - x)\n    # Simplifying: 2*x + 2 + 2*total_number_of_pages - 2*x = 58 <=> 2 + 2*total_number_of_pages = 58\n    # Now we just need to solve for total_number_of_pages and then divide by 2 to get the number of sheets.\n\n    total_sum = 58\n    # Remove the constant sum of the two middle pages, which is 2\n    total_number_of_pages = (total_sum - 2) // 2\n    # Divide by 2 to get the number of sheets\n    num_sheets = total_number_of_pages // 2\n\n    return num_sheets\n\nans = solution()"
    ],
    "e861bb32b7d547039e6ce80de36833a5": [
        "def solution():\n    sale_price = 48\n    discount_fraction = 1 / 5\n    original_price = sale_price / (1 - discount_fraction)\n    return original_price\n\nans = solution()"
    ],
    "42d848249dd041fd9a59aba42cf09b4e": [
        "def solution():\n    total_length = 500  # total length of road in metres\n    total_days = 5  # total days taken to pave the road\n\n    length_per_day = total_length / total_days  # length of road paved in one day\n    \n    return length_per_day\n\nans = solution()"
    ],
    "04f3463bdfd44e64844f13c3d9c4e55e": [
        "def solution():\n    countries = 18\n    max_people_without_repeat = (9 - 1) * countries\n    # To ensure at least 9 people from the same country, add one more person\n    ans = max_people_without_repeat + 1\n    return ans\n\nans = solution()"
    ],
    "d4be2c4b031f4b75b58c52a082b67c92": [
        "def solution():\n    # Given that Sandra mistook 98 with 88 and got a quotient of 22\n    # 88 / A = 22\n    # A = 88 / 22\n    A = 88 // 22\n    \n    # Now we need to calculate the correct answer which is 98 / A\n    correct_answer = 98 // A\n    \n    return correct_answer\n\nans = solution()"
    ],
    "17c7cc140d594f18884947838501f76d": [
        "def solution():\n    cost_per_calculator = 32 / 4\n    total_cost_for_twelve = cost_per_calculator * 12\n    return total_cost_for_twelve\n\nans = solution()"
    ],
    "a50d4aad678545d8ad403f9ee6aef9cb": [
        "def solution():\n    lucas_speed = 5 / 6  # laps per minute\n    miller_speed = 5 / 10  # laps per minute\n    relative_speed = lucas_speed - miller_speed  # relative laps per minute\n\n    time_to_overtake = 1 / relative_speed  # time in minutes to overtake once\n    return time_to_overtake * 2  # time in minutes to overtake twice\n\nans = solution()"
    ],
    "374b823fc9994ac6839b73f73220b2fc": [
        "def solution():\n    # Let's call the first number in the sequence of fifty three consecutive numbers \"x\".\n    # The terms form an arithmetic sequence with a common difference of 1.\n\n    # The sum of an arithmetic sequence is given by the formula:\n    # sum = (n/2) * (first_term + last_term)\n    # where n is the number of terms, in this case 53, and first_term is the first number in the sequence.\n    \n    # We have the total sum, which is 2014, and we need to find the last_term.\n    # Let the last_term be x + 52, as there are 53 terms and we start counting from 0\n\n    # We can write the equation as follows:\n    # 2014 = (53/2) * (x + (x + 52))\n    # This simplifies to:\n    # 2014 = (53/2) * (2x + 52)\n    # 2014 = 53x + (53 * 26)\n    # 53x = 2014 - (53 * 26)\n\n    # Now we solve for x:\n    x = (2014 - (53 * 26)) // 53\n\n    # Now that we have the first term \"x\", we can find the last term which is \"x + 52\"\n    largest_number = x + 52\n    \n    return largest_number\n\nans = solution()"
    ],
    "6e28fbe858694127965a423b5827545f": [
        "def solution():\n    rounded_savings = 1670\n    max_possible_savings = rounded_savings + 4 # Subtract 5 for rounding down.\n    return max_possible_savings\n\nans = solution()"
    ],
    "08f295cae61b452781fe8880031bedb9": [
        "def solution():\n    ans = 956 * 78\n    return ans\n\nans = solution()"
    ],
    "42304a89be8248ce998d0790579451c5": [
        "def solution():\n    ans = 345 * 6\n    return ans\n\nans = solution()"
    ],
    "97e34217530f47f198915d7380bfbd2d": [
        "def solution():\n    return 5217 % 13\n\nans = solution()"
    ],
    "62bcd683923a4c13a327d9e35f3b2302": [
        "def solution():\n    hours = 2 + 1/2\n    minutes_per_hour = 60\n    minutes = hours * minutes_per_hour\n    return int(minutes)\n\nans = solution()"
    ],
    "87766ec0f15a4f82a63df69a587cfef4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_visitors = symbols('total_visitors')\n\n    children = 3/5 * total_visitors\n    remaining = 2/5 * total_visitors\n    men = 1/4 * remaining\n\n    equation = Eq(children - men, 120)\n\n    solutions = solve(equation, total_visitors)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "b8e19c913d8d4ff69e6cd9698f1eb368": [
        "def solution():\n    base_rate = 80\n    additional_rate = 5\n    total_cost = 140\n    additional_cost = total_cost - base_rate\n    additional_minutes = additional_cost / additional_rate\n    total_minutes = 15 + additional_minutes\n    return total_minutes\n\nans = solution()"
    ],
    "cd9aa54c79074ee2aa4aad035a1be624": [
        "def solution():\n    tim_age_now = 8\n    years_in_future = 54 - tim_age_now\n    mothers_age_now = tim_age_now + years_in_future\n\n    return mothers_age_now\n\nans = solution()"
    ],
    "41b46512b7bf48eebc8468c2eb001314": [
        "def solution():\n    # Length of orange string in meters\n    orange_string_length = 5.52\n    # Relationship of orange string to purple string\n    factor = 9.2\n    # Length of purple string in meters\n    purple_string_length = orange_string_length / factor\n    # Additional length of green string compared to purple string in meters\n    additional_length = 24.9 / 100\n    \n    # Length of green string in meters\n    green_string_length = purple_string_length + additional_length\n    \n    return green_string_length\n\nans = solution()"
    ],
    "c1962524dabf4b3da31b4f37827a030a": [
        "def solution():\n    count = 0\n    for number in range(1, 100):\n        if number % 2 == 0 and number % 5 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "f88e8811450e4f85937e81e850e2d300": [
        "def solution():\n    money_monday = 60 + 40\n    total_money = money_monday * 3  # Since he gets the same amount on Tuesday and Wednesday\n\n    return total_money\n\nans = solution()"
    ],
    "184683893a1a450fb55ccb18cf570233": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables for the two pieces of rope\n    shorter_piece, longer_piece = symbols('shorter_piece longer_piece')\n    \n    # Create two equations based on the information given\n    equation1 = Eq(longer_piece, 5 * shorter_piece)        # longer piece is 5 times shorter piece\n    equation2 = Eq(shorter_piece + longer_piece, 49.5)     # sum of both pieces is 49.5 meters\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (shorter_piece, longer_piece))\n    \n    return round(solutions[longer_piece], 1)\n\nans = solution()"
    ],
    "aefe4b1d258c455f852061413286ec4b": [
        "def solution():\n    total_volume = 36\n    ratio_sum = 4 + 5\n    apple_juice_ratio = 4\n    \n    apple_juice_volume = (apple_juice_ratio / ratio_sum) * total_volume\n\n    return apple_juice_volume\n\nans = solution()"
    ],
    "4dedeb8bed9343319dda8177873725fd": [
        "def solution():\n    total_after = 400\n    year_7_after_percentage = 0.10\n    year_7_normal_percentage = 0.20\n    \n    year_7_after = total_after * year_7_after_percentage\n    total_normal = total_after / (1 - (year_7_normal_percentage - year_7_after_percentage))\n    \n    return int(total_normal)\n\nans = solution()"
    ],
    "e4d3c043d1fb45078d416e3b70973037": [
        "def solution():\n    total_distance = 0\n    day_count = 0\n    climb_distance = 4\n    slide_distance = 1\n    well_depth = 25\n\n    while total_distance < well_depth:\n        day_count += 1\n        total_distance += climb_distance\n        if total_distance >= well_depth:\n            break\n        total_distance -= slide_distance\n\n    return day_count\n\nans = solution()"
    ],
    "4a9d0a7ecc6a4d7b8a4bf5f49ac3f034": [
        "def solution():\n    # Nancy completes the book in 6 days\n    nancy_rate = 1 / 6\n    # Nancy and Tim complete the book in 4 days\n    together_rate = 1 / 4\n    # Tim's rate is the difference between the together rate and Nancy's rate\n    tim_rate = together_rate - nancy_rate\n    # Time taken by Tim to complete the book alone is the reciprocal of his rate\n    tim_time = 1 / tim_rate\n    return tim_time\n\nans = solution()"
    ],
    "04cf5bf4ba704663af7e01b1fc0bebfa": [
        "def solution():\n    total_days = 15\n    initial_amount = 100\n    deposit_amount = 5\n    spend_amount = 8\n\n    # Since Bob alternates between depositing and spending every 2 days,\n    # find the number of complete cycles + remainder days\n    cycles, remainder_days = divmod(total_days, 2)\n\n    # Calculate total behavior for complete cycles\n    total_deposits = cycles * deposit_amount\n    total_spends = cycles * spend_amount\n\n    # Handle the remainder day if it's a deposit day\n    final_amount = initial_amount + (total_deposits - total_spends)\n    if remainder_days == 1:\n        final_amount += deposit_amount\n\n    return final_amount\n\nans = solution()"
    ],
    "0a38ebf245ee4048babeb982de7ed428": [
        "def solution():\n    number = int('3' * 12)\n    remainder = number % 7\n    return remainder\n\nans = solution()"
    ],
    "c513a3033f3749eebdae943a22fb537a": [
        "def solution():\n    # Starting from A = 0 and incrementing to find the correct value\n    for A in range(10):\n        # Check the given puzzle condition.\n        # A + BBB + CCC = ABC\n        # Which translates to A + B*111 + C*111 = A*100 + B*10 + C\n        for B in range(10):\n            for C in range(10):\n                if A + B*111 + C*111 == A*100 + B*10 + C:\n                    return A\n\nans = solution()"
    ],
    "6ea9279809514a5d9fa706e9c64edc86": [
        "def solution():\n    height = 31\n    jump_up = 3\n    fall_down = 2\n    effective_jump = jump_up - (fall_down / 3)\n\n    jumps_needed = (height - jump_up) / effective_jump\n    return int(jumps_needed) + 1  # plus one because the last jump takes it to the top\n\nans = solution()"
    ],
    "4b76c5a5fefd4d379198d89518cf1797": [
        "def solution():\n    # Ivy's work rate per day\n    ivy_rate = 1 / 24\n    # Kevin's work rate per day\n    kevin_rate = 1 / 20\n\n    # Total work rate per day when both are working\n    combined_rate = ivy_rate + kevin_rate\n\n    # Total work done by the end of the 18th day\n    total_work_done = combined_rate * 18\n\n    # Since the work is finished by the end of the 18th day, the total work equals 1\n    # We calculate the excess work done when both were working together\n    excess_work = total_work_done - 1\n\n    # The excess work corresponds to the work Kevin would have done alone in \"days_off\" days\n    days_off = excess_work / kevin_rate\n\n    return days_off\n\nans = solution()"
    ],
    "a9c71626af834229920858670d8deb58": [
        "def solution():\n    ans = 32.4 * 20\n    return ans\n\nans = solution()"
    ],
    "c4e5b60db727448e994c386475bbe6ac": [
        "def solution():\n    # The general form of the term is given as: n / (a_n * a_(n+1))\n    # where a_n is the sequence starting from the first denominator (1, 2, 4, 7, 11, ...)\n    # We first find a pattern for a_n:\n    # It seems that the difference between consecutive terms increases by 1 each time\n    # So a_n can be represented as the sum of the first n natural numbers plus 1\n\n    def a_n(n):\n        return n * (n + 1) // 2 + 1\n\n    sum_series = 0\n    for n in range(1, 7):\n        sum_series += n / (a_n(n - 1) * a_n(n))\n    \n    # Adding the last term which is 1/22\n    sum_series += 1 / a_n(6)\n    \n    return sum_series\n\nans = solution()"
    ],
    "8b3d2426e47742fb80de5edfc5c95b39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total amount of money Helen has at the start\n    x = symbols('x')\n\n    # She spends one-third of x on a dress\n    # Remaining amount is (2/3) * x\n    remaining_after_dress = (2/3) * x\n\n    # She spends three-fifths of the remaining amount on shoes\n    remaining_after_shoes = (2/5) * remaining_after_dress\n\n    # She has £40 left\n    equation = Eq(remaining_after_shoes, 40)\n\n    # Solve for x\n    initial_amount = solve(equation, x)\n\n    return initial_amount[0]\n\nans = solution()"
    ],
    "c837716e3d8d4f158df0c801a3ba58fc": [
        "def solution():\n    from math import factorial\n\n    def count_trailing_zeros(n):\n        count = 0\n        i = 5\n        while n // i > 0:\n            count += n // i\n            i *= 5\n        return count\n    \n    numerator_zeros = count_trailing_zeros(999)\n    denominator_zeros = count_trailing_zeros(300)\n    \n    ans = numerator_zeros - denominator_zeros\n    \n    return ans\n\nans = solution()"
    ],
    "bb8f428d14394c4988e5515d435ac635": [
        "def solution():\n    ans = 198 + 298 + 398 + 498\n    return ans\n\nans = solution()"
    ],
    "608b695eba534dd0b83d2b27d7e435ab": [
        "def solution():\n    a = 10\n    b = 9\n    ans = 4 * a + 0.6 * b\n    return ans\n\nans = solution()"
    ],
    "05662ab12b7a42d08cb4ed68f2868599": [
        "def solution():\n    # Given that the outermost layer of the square has 60 students\n    # we know that the perimeter of the square is 60 * 4 students because a square has four sides.\n    perimeter = 60 * 4\n\n    # There are four corners in the square that have been counted twice, once for each side they touch.\n    # Since we want to consider them only once, we need to subtract these 4 corner students from the perimeter.\n    perimeter -= 4\n\n    # Each inner layer will have a perimeter that is 8 less than the layer before it because it loses 2 students per side.\n    # When we take these 4 corner students away, the next layer will have        \n    # a perimeter that is less by 8 students (2 for each side).\n    # The total number of students in each layer forms concentric squares and can be found by adding the perimeters,\n    # subtracting 8 for each consecutive inner square until we reach a perimeter of 0 or less.\n\n    total_students = 0\n    while perimeter > 0:\n        total_students += perimeter\n        perimeter -= 8\n\n    return total_students\n\nans = solution()"
    ],
    "b3775d03019b4cdcb4930d45861d8841": [
        "def solution():\n    for lorries in range(1, 100):\n        bikes = lorries + lorries // 4\n        cars = bikes + bikes // 3\n        total = cars + bikes + lorries\n        if total < 100 and total % 2 == 0:\n            return (cars, bikes, lorries)\n\nans = solution()"
    ],
    "5a93f9e1eb9e4c528f6c8a07e299ea6a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b = symbols('a b')\n    # Ken added x buttons to A and removed 2x from B\n    x = symbols('x')\n\n    # Original numbers\n    original_a = a\n    original_b = b\n\n    # After Ken's changes\n    changed_a = a + x\n    changed_b = b - 2*x\n\n    # Equations based on the problem statement\n    equation1 = Eq(a, b + 64)\n    equation2 = Eq(changed_b, b - 28)\n    equation3 = Eq(changed_a + changed_b, 4 * changed_b)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (a, b, x))\n\n    return solutions[a]\n\nans = solution()"
    ],
    "564dba708ca745b9b0b4d8a734001762": [
        "def solution():\n    first_term = 2\n    last_term = 42\n    difference = 4\n\n    num_terms = ((last_term - first_term) / difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "b7dd6767772245f2a0cb23c299ebb8cc": [
        "def solution():\n    return 18 * 20132013 - 2013 * 180018\n\nans = solution()"
    ],
    "f5cbd8c2b99c4ff8b9a9ff2d867ac03e": [
        "def solution():\n    return 764 * 7\n\nans = solution()"
    ],
    "2c22df9d95b44b4db50520cf03c17839": [
        "def solution():\n    total_tiles = 400\n    side_length = int(total_tiles ** 0.5)\n    red_count = 0\n    green_count = 0\n\n    for layer in range(1, side_length + 1, 2):  # Start from the outermost layer to the inside, counting odd layers\n        red_count += (side_length - (layer - 1)) ** 2  # Add the count of red tiles for the layer\n\n    green_count = total_tiles - red_count  # The remaining tiles are green\n\n    more_tiles_color = \"red\" if red_count > green_count else \"green\"\n    difference = abs(red_count - green_count)\n\n    return more_tiles_color, difference\n\nans = solution()"
    ],
    "4cf1f3c8353c42d48e99e5d8f388a57b": [
        "def solution():\n    boulevard_length = 300\n    interval = 10\n\n    # Since the bins are also placed at the ends, subtract the interval length once before division,\n    # then add 1 for the starting bin.\n    num_bins = (boulevard_length - interval) // interval + 1\n\n    return num_bins\n\nans = solution()"
    ],
    "5d7205c22e4740dd84e7bc08f1cd9a65": [
        "def solution():\n    # Let the number of rounds Hana won be w and the number of rounds she lost be l\n    # Since she played 12 rounds, we have w + l = 12\n    # She gains 4 cards for each win and loses 2 cards for each loss\n    # The total number of cards she won is 24, so 4w - 2l = 24\n    # We can solve these two equations to find the number of rounds she lost\n\n    # The first equation can be rewritten as l = 12 - w\n    # Substitute l in the second equation with the expression from the first equation:\n    # 4w - 2(12 - w) = 24\n    # 4w - 24 + 2w = 24\n    # Collect like terms:\n    # 6w - 24 = 24\n    # Add 24 to both sides:\n    # 6w = 48\n    # Divide both sides by 6:\n    # w = 8\n\n    # Now solve for l using the first equation\n    # l = 12 - w\n    # l = 12 - 8\n    # l = 4\n\n    # Hana lost 4 rounds\n    return 4\n\nans = solution()"
    ],
    "9f759ca5b84e4722b43ef86e4d6a402e": [
        "def solution():\n    flour_per_cake = 326\n    number_of_cakes = 112\n    \n    total_flour = flour_per_cake * number_of_cakes\n    \n    return total_flour\n\nans = solution()"
    ],
    "292d7aaf42294c3a913c5cd11bf66c14": [
        "def solution():\n    x, y, z = 20, 19, 18\n    rounds = 0\n    while min(x, y, z) > 0:\n        if x == max(x, y, z):\n            x -= 3\n            y += 1\n            z += 1\n        elif y == max(x, y, z):\n            y -= 3\n            x += 1\n            z += 1\n        else:\n            z -= 3\n            x += 1\n            y += 1\n        rounds += 1\n    return rounds\n\nans = solution()"
    ],
    "9dfbbfcf5edf458aa1a6122065492810": [
        "def solution():\n    # Divisibility rule for 3: The sum of the digits must be divisible by 3\n    # Divisibility rule for 11: The difference between the sum of the digits at odd places and the sum of the digits at even places must be 0 or divisible by 11\n    # The number is composed of fixed digits (26 at the start and 7 at the end) and a repeating sequence '2011'\n    \n    # Initialize the sum of the fixed digits (excluding the repeating part)\n    # 2 + 6 + 7 = 15\n    fixed_digits_sum = 15\n    repeating_seq = '2011'\n    repeating_sum_odd_places = 2 + 1  # Sum of digits at odd places in '2011'\n    repeating_sum_even_places = 0 + 1  # Sum of digits at even places in '2011'\n    \n    # Initialize the difference for divisibility by 11 to 0 (26 at start and 7 at end cancel out)\n    fixed_digits_diff = (2 - 6) - 7  # 2 and 7 are at odd places, 6 is at even place\n    \n    # Initialize variables\n    n = 0\n    total_sum = fixed_digits_sum\n    total_diff = fixed_digits_diff\n    \n    # Loop until the number is divisible by 3 and 11\n    while True:\n        # Add the sum of the digits for '2011' to the total sum\n        total_sum += sum(int(d) for d in repeating_seq)\n        \n        # Update the total difference for the divisibility by 11 rule\n        if n % 2 == 0:  # If n is even, the first '2' from '2011' enters an odd place\n            total_diff += repeating_sum_odd_places - repeating_sum_even_places\n        else:  # If n is odd, the first '2' from '2011' enters an even place\n            total_diff += repeating_sum_even_places - repeating_sum_odd_places\n        \n        # Check divisibility by 3 and 11\n        if total_sum % 3 == 0 and total_diff % 11 == 0:\n            break\n        \n        # Increment n to indicate an additional '2011' has been added\n        n += 1\n    \n    return n\n\nans = solution()"
    ],
    "241c2dd43db940409e5ad15ed39d57aa": [
        "def solution():\n    # The question is equivalent to solving the equation x + y + z = 7\n    # where x, y, and z are non-negative integers.\n    count = 0\n    for x in range(8):\n        for y in range(8):\n            z = 7 - x - y\n            if z >= 0:\n                count += 1\n    # Since the plates are identical, we divide by the number of permutations of the plates\n    ans = count // 6\n    return ans\n\nans = solution()"
    ],
    "3795aecee78f4af494bcf5420bcf0bb2": [
        "def solution():\n    initial_cuts = 3\n    additional_pieces = 8 - 4\n    # Each additional piece requires one cut. Since Bob took 3 minutes for 3 cuts,\n    # it will take him 1 minute for each additional cut.\n    total_time = initial_cuts + additional_pieces - 1\n    return total_time\n\nans = solution()"
    ],
    "f22dbe753e484186ac547d34fa2ff25b": [
        "def solution():\n    ans = 2.7 * 3.9\n    return ans\n\nans = solution()"
    ],
    "b13b087d91c3418cab75e734f729a72f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n    \n    # Rasidah had $48 less than Chai Seng\n    equation1 = Eq(rasidah, chai_seng - 48)\n    \n    # Rasidah spent 3/5 of her money\n    rasidah_spent = 3/5 * rasidah\n    \n    # Chai Seng spent 6/7 of his money\n    chai_seng_spent = 6/7 * chai_seng\n    \n    # In the end, Chai Seng had 1/2 as much money left as Rasidah\n    equation2 = Eq(chai_seng - chai_seng_spent, 1/2 * (rasidah - rasidah_spent))\n    \n    # Solve the equations for the amount of money Rasidah had at first\n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "94aea93a419044dfa74eed60bd70bafa": [
        "def solution():\n    initial_cards = 236\n    duplicates = 57\n    new_cards = 34\n\n    total_cards = initial_cards - duplicates + new_cards\n\n    return total_cards\n\nans = solution()"
    ],
    "9151e126e4304a27988564dbee6d682a": [
        "def solution():\n    from math import factorial\n    \n    total_people = 8\n    people_together = 2  # Amy and Judy considered as a single unit\n    seats = total_people - 1  # One less seat because we consider Amy and Judy as one\n    \n    # First find the number of ways to arrange the remaining 6 people and the Amy-Judy unit\n    arrangements = factorial(seats)\n    \n    # Then, find the number of ways to arrange Amy and Judy within their single unit\n    arrangements_within_unit = factorial(people_together)\n    \n    # The total arrangements considering the circular nature of the table\n    ans = arrangements * arrangements_within_unit\n    \n    return ans\n\nans = solution()"
    ],
    "2a6e8406868b4590b821325ac25f87f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for Andy's and Ben's original number of cookies\n    andy_initial, ben_initial = symbols('andy_initial ben_initial')\n\n    # Equation representing Andy's cookies being 84 fewer than Ben's\n    equation1 = Eq(andy_initial, ben_initial - 84)\n\n    # Equations for Andy's and Ben's additional cookies\n    andy_final = andy_initial + (andy_initial / 3)\n    ben_final = ben_initial + (ben_initial / 5)\n\n    # Equation representing Andy's final cookies being 1/3 of Ben's final cookies\n    equation2 = Eq(andy_final, ben_final / 3)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (andy_initial, ben_initial))\n\n    # Extract Andy's initial cookie count and compute his final cookie count\n    andy_end = solutions[andy_initial] + (solutions[andy_initial] / 3)\n\n    return andy_end\n\nans = solution()"
    ],
    "4f4e10b41d3540d6a2739c9860f76327": [
        "def solution():\n    result = sum(1 / i for i in range(1, 8))\n    return int(result)\n\nans = solution()"
    ],
    "73d5e9762ad24f7fa6f2d7569f186b42": [
        "def solution():\n    # Find all two-digit numbers divisible by 24\n    divisible_by_24 = [i for i in range(10, 100) if i % 24 == 0]\n    \n    # Tom raised his hand in both questions, so his number must be a common factor\n    # of all the two-digit numbers that his friends could see, that is also divisible by 24.\n    # Since we know that the second number in the paper is 24, Tom's number cannot be 24 or a multiple of 24\n    # but must be a divisor of 24 for the first question. The divisors of 24 are 1, 2, 3, 4, 6, 8, 12, 24.\n    # Tom's number must be a divisor of 24, except 24 itself (since it's not a two-digit number).\n    # We search for the greatest common divisor of the numbers divisible by 24 except the number itself.\n    tom_possible_numbers = {i for i in range(10, 100) if set(divisible_by_24).issubset(set(range(i, 100, i)))}\n\n    # Now we need to ensure Tom's number is not actually 24 or any two-digit number divisible by 24,\n    # as nobody else raised their hand in the first round - they couldn't be certain.\n    for num in divisible_by_24:\n        tom_possible_numbers.discard(num)\n\n    # Since Tom and 3 others raised their hands, we know that the 4 numbers they see aren't divisible\n    # by the number on the paper (otherwise, more students would've raised their hands).\n    # Therefore, we can find the sum by adding all two-digit numbers and subtracting the sums\n    # of the numbers divisible by 24 and the numbers Tom possibly had.\n    total_sum = sum(range(10, 100))\n    sum_divisible_by_24 = sum(divisible_by_24)\n    sum_tom_possible_numbers = sum(tom_possible_numbers)\n    \n    # The sum of all 8 numbers Tom saw is the total sum of two-digit numbers minus the sum of numbers\n    # divisible by 24 and minus the sum of numbers Tom could possibly have (only one number).\n    # We multiply by 8/9 because we are including Tom's number in the subtraction which shouldn't be.\n    # Hence we get the sum of 8 friends.\n    ans = (total_sum - sum_divisible_by_24 - sum_tom_possible_numbers) * 8 / 9\n    return int(ans)\n\nans = solution()"
    ],
    "c59949dfd8964b7c95155bd81b7b9c07": [
        "def solution():\n    principal = 35000\n    target_amount = 37100\n    interest_rate = 1.5 / 100\n\n    # Using the formula for compound interest A = P(1 + r)^t, solving for t\n    # Rearranged: t = log(A/P) / log(1 + r)\n    from math import log\n\n    years = log(target_amount / principal) / log(1 + interest_rate)\n    \n    if years.is_integer() and years == 5:\n        is_correct = True\n    else:\n        is_correct = False\n\n    return (is_correct, round(years)) if not is_correct else (is_correct, 5)\n\nans = solution()"
    ],
    "237973530d60417cbab4c373e76cf50a": [
        "from math import gcd\n\ndef solution():\n    pencils = 56\n    pens = 60\n\n    max_students = gcd(pencils, pens)\n\n    return max_students\n\nans = solution()"
    ],
    "057332102b164fd582fffc07825bb51c": [
        "def solution():\n    ans = 0.7 + 0.04 + 1.006\n    return ans\n\nans = solution()"
    ],
    "f4a501507e754c76bc20c97fd6f8faa9": [
        "def solution():\n    sequence = [18, -16, 19, -15]\n    while len(sequence) < 6:\n        if len(sequence) % 2 == 0:\n            next_value = sequence[-2] + 1\n        else:\n            next_value = sequence[-2] - 1\n        sequence.append(next_value)\n    \n    return sequence[-1]\n\nans = solution()"
    ],
    "f037a02a789f4f3a9d9393741e8484d5": [
        "def solution():\n    # Let the four numbers be a, b, c, d in descending order. Then the problem states:\n    # d + (a + b + c)/3 = 51  =>  3d + a + b + c = 153  =>  a + b + c = 153 - 3d  [Equation 1]\n    # a + (b + c + d)/3 = 39  =>  3a + b + c + d = 117  =>  b + c + d = 117 - 3a  [Equation 2]\n    \n    # From equations 1 and 2, we have:\n    # 153 - 3d = 117 - 3a + a\n    # To maximize d, we need to minimize a. Since a, b, c, d are distinct positive integers, a is at least 1 (smallest possible) and b, c will be at least 2 and 3, respectively.\n    \n    a = 1\n    # Substituting a back into equation 2, we get:\n    b_plus_c_plus_d = 117 - 3 * a\n    b_plus_c = b_plus_c_plus_d - d\n    \n    # Again, to maximize d, we can minimize b and c\n    b = 2\n    c = 3\n    # So we get:\n    b_plus_c = b + c\n    \n    # Now, calculate d\n    d = b_plus_c_plus_d - b_plus_c\n    \n    # Now using the calculated b_plus_c_plus_d\n    d = 117 - 3*1 - (2 + 3)\n\n    # Return the largest possible value of largest number d\n    return d\n\nans = solution()"
    ],
    "e3bab1d410dc404dbc75f29bc60577f7": [
        "def solution():\n    original_numerator = 6\n    original_denominator = 20\n    new_numerator = 12\n    scale_factor = new_numerator / original_numerator\n    new_denominator = original_denominator * scale_factor\n    return new_denominator\n\nans = solution()"
    ],
    "2c1f33a3652843e18c61ed4042aa9d84": [
        "def solution():\n    # Total students passed in at least one subject\n    total_passed_at_least_one = 43\n    \n    # Total students passed in each subject\n    total_math = 30\n    total_science = 28\n    total_english = 25\n\n    # The maximum number of students passed all three tests can be calculated as:\n    # Total passed in all individual subjects minus total passed at least one plus\n    # 2 * maximum possible for all three tests, because the maximum case will be when\n    # double the number of pupils passed all three subjects has to be subtracted from\n    # individual subject totals to get the total at least one subject count.\n    # Since we solve for the maximum, we rearrange the equation.\n    \n    # Using Inclusion-Exclusion Principle:\n    # n(M∩S∩E) = n(M) + n(S) + n(E) - n(at least one) + 2*n(M∩S∩E)\n    # 2*n(M∩S∩E) = n(M) + n(S) + n(E) - n(at least one)\n    # n(M∩S∩E) = (n(M) + n(S) + n(E) - n(at least one)) / 2\n\n    all_three_max = (total_math + total_science + total_english - total_passed_at_least_one) // 2\n    return all_three_max\n\nans = solution()"
    ],
    "d19c1cad2e934abcb96adf33ea0fad9b": [
        "def solution():\n    speed_ahmad = 80 \n    speed_brother = 50\n    \n    # When Ahmad met his younger brother 210 meters from school\n    # Ahmad traveled the distance to school and back for 210 meters\n    # His brother traveled the remaining distance minus 210 meters\n    # They walked for the same amount of time, so distance/speed must be equal\n    \n    # Let d be the full distance from home to the school\n    # Time Ahmad walked = Distance Ahmad walked / Speed Ahmad\n    # Time Brother walked = Distance Brother walked / Speed Brother\n    \n    # Therefore:\n    # (d + (d - 210)) / speed_ahmad = (d - 210) / speed_brother\n    \n    # Calculate the distance based on equality of time:\n    d = symbols('d')\n    equation = Eq((d + (d - 210)) / speed_ahmad, (d - 210) / speed_brother)\n\n    distance = solve(equation, d)[0]\n    \n    return distance\n\nans = solution()"
    ],
    "303367dad74a4dfb9a731577b950143b": [
        "def solution():\n    # Since the pens are identical, we just need to find the number of ways to partition the number 6 into 3 parts,\n    # with each part being non-zero (since no pencil case can be empty).\n    \n    count = 0\n    # We will iterate through the possible number of pens in the first pencil case.\n    for x1 in range(1, 6):  # If we have at least 1 pen in the first pencil case, there can be at most 5 left.\n        for x2 in range(1, 7 - x1):  # The number of pens in the second case depends on how many are left.\n            x3 = 6 - x1 - x2  # The rest go into the third pencil case.\n            if x3 > 0:  # All pencil cases must have at least one pen.\n                count += 1\n            \n    return count\n\nans = solution()"
    ],
    "70234dd3b3ad4df4976b94f3fc2b43b6": [
        "def solution():\n    ans = (1/30 + 1/6) / (2/25) + (2 - 2/3) / (8/3)\n    return ans\n\nans = solution()"
    ],
    "f5859830704a437f8da45cb32fad686c": [
        "def solution():\n    digit_higher_place = 8 * 10000  # The place value of the first 8\n    digit_lower_place = 8 * 10      # The place value of the second 8\n\n    difference = digit_higher_place - digit_lower_place\n    return difference\n\nans = solution()"
    ],
    "a1813c83d15f4f918bb921475c77ae6b": [
        "def solution():\n    # To be a multiple of 45, a number must be a multiple of both 9 and 5.\n    # For a number to be a multiple of 5, its last digit must be 0 or 5.\n    # Since we want a palindromic number, the first digit will have to be the same as the last.\n    # Therefore, the last digit (and thus the first digit) must be 5 to have a five-digit palindromic number.\n    # For a number to be a multiple of 9, the sum of its digits must be a multiple of 9.\n    \n    # The smallest five-digit palindrome number that is a multiple of 45 should start and end with 5 \n    # and have the smallest possible sum of the three middle digits that would allow for divisibility by 9.\n    # Since the sum of the outer digits is already 10, we just need to find the smallest sum of the middle three digits\n    # such that the entire sum is a multiple of 9.\n    smallest = 50005  # Starting with the smallest 5-digit palindromic multiple of 5\n    while smallest % 9 != 0:  # Iterate until we find a multiple of 9\n        smallest += 100  # Incrementing by 100 keeps the palindromic property\n\n    # The largest five-digit palindrome number that is a multiple of 45 follows the inverse logic.\n    # The first and last digits are 5 and we need the largest possible sum of the three middle digits\n    # such that the entire sum is a multiple of 9.\n    largest = 59995  # Starting with largest 5-digit palindromic multiple of 5\n    while largest % 9 != 0:  # Iterate until we find a multiple of 9\n        largest -= 100  # Decrementing by 100 keeps the palindromic property\n\n    return largest - smallest\n\nans = solution()"
    ],
    "a8da05a870cb4d889d878067168a25f3": [
        "def solution():\n    # A number is divisible by 5 if its last digit is 0 or 5.\n    # Since the last digit A needs to make the number divisible by 5, A must be 0 or 5.\n    # A number is divisible by 4 if the number formed by its last two digits is divisible by 4.\n    # If A is 5, the last two digits would be \"25\", which is not divisible by 4.\n    # Therefore, A must be 0 to make the number divisible by both 4 and 5.\n    ans = 0\n    return ans\n\nans = solution()"
    ],
    "8730c5dc402e4057a7e7d6856f461142": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Step 1: Find the common supplement\n    # The remainders are 1, 2, and 7 when divided by 5, 6, and 11 respectively\n    remainders_supplement = [(1, 5), (2, 6), (7, 11)]\n\n    # Step 2: Find the LCM of all the divisors\n    # Use the solve_congruence function from sympy which applies the Chinese Remainder Theorem\n    # which internally finds the LCM and solves the congruences\n    unknown, _ = solve_congruence(*remainders_supplement)\n\n    # Step 3: The unknown = the common multiple of all the divisors - the common remainder\n    # The unknown is already calculated in the previous step, so we just return it\n    return unknown\n\nans = solution()"
    ],
    "5f74a8aa962b42f9a008f301d384a07d": [
        "def solution():\n    num = 40309\n    while True:\n        num += 1\n        if str(num) == str(num)[::-1]:\n            return num - 40309\n\nans = solution()"
    ],
    "00ada5e7f99244a19a9c65f66bf12fe4": [
        "def solution():\n    from math import gcd\n    length1 = 16\n    length2 = 24\n    longest_piece_length = gcd(length1, length2)\n    return longest_piece_length\n\nans = solution()"
    ],
    "27f205a241de4c258f0bfe079d7d85e0": [
        "def solution():\n    luna_position = 7\n    sheep_behind = 4\n    total_sheep = luna_position + sheep_behind\n    return total_sheep\n\nans = solution()"
    ],
    "c5f435f6f01d47f984563502e879e7c1": [
        "def solution():\n    hourly_rate = 18\n    desired_earnings = 270\n    hours_needed = desired_earnings / hourly_rate\n    return hours_needed\n\nans = solution()"
    ],
    "306362839da448f6af25c3777e0f4fb8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mean_all = symbols('mean_all')\n    mean_top_3 = 92\n    mean_last_7 = mean_all - 6\n\n    # The sum of the scores of the top 3 students\n    sum_top_3 = mean_top_3 * 3\n    # The sum of the scores of the last 7 students\n    sum_last_7 = mean_last_7 * 7\n    \n    # The sum of all students' scores is equal to the sum of the top 3 plus the last 7\n    equation = Eq(sum_top_3 + sum_last_7, mean_all * 10)\n\n    # Solve for the mean score of all students\n    mean_all_solution = solve(equation, mean_all)\n\n    return mean_all_solution[0]\n\nans = solution()"
    ],
    "6fd3dee61dd1454aba4ca3fdcb068b42": [
        "def solution():\n    ans = (36 + 8 * 4 - 8) / 10\n    return ans\n\nans = solution()"
    ],
    "15a26c7f348e44f0984ed5433abaeb4a": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for year in range(1000, 2023):\n        digits = set(str(year))\n        if len(digits) == 4:\n            for permutation in permutations(digits):\n                sequence = [int(permutation[i]) for i in range(4)]\n                if sequence == sorted(sequence) and len(set(sequence)) == 4:\n                    count += 1\n                    break\n    return count\n\nans = solution()"
    ],
    "692dd4bd8aad469b93929bfd3c53cde1": [
        "from itertools import combinations\n\ndef solution():\n    bags = [19, 21, 27, 32, 37, 40]  # numbers of marbles in each bag\n    total = sum(bags)\n    for combo in combinations(bags, 3):  # take combinations of 3 bags for Jaslin\n        if sum(combo) == 2 * (total - sum(combo)):  # check if Jaslin gets twice as many marbles as George\n            red_marbles = total - 3 * sum(combo)  # calculate the number of red marbles\n            return red_marbles\n\nans = solution()"
    ],
    "102565a663954649adc3478cad3c899d": [
        "def solution():\n    # Let x be the number of sweets Beth initially had.\n    # Then Andre had 24 - x.\n    # After receiving 4 sweets each, Beth has x + 4 sweets,\n    # and Andre has (24 - x) + 4 sweets.\n    # According to the problem, Andre now has 6 more sweets than Beth:\n    # (24 - x) + 4 = (x + 4) + 6\n    # Simplify and solve for x:\n    x = (24 + 4 - 6) // 2\n    # Now, find the number of sweets Beth has now, which is initial sweets plus 4.\n    sweets_beth_now = x + 4\n    return sweets_beth_now\n\nans = solution()"
    ],
    "31ae45e446194415af930b6a32732592": [
        "def solution():\n    # Let the smallest even number be x\n    # Then the five consecutive even numbers are x, x+2, x+4, x+6, x+8\n    # The sum of these numbers is x + (x + 2) + (x + 4) + (x + 6) + (x + 8) = 100\n    # Simplifying, we get 5x + 20 = 100\n    # Therefore, 5x = 80\n    # Hence x = 80 / 5\n    x = 80 // 5\n    return x\n\nans = solution()"
    ],
    "96bf00410c5d499991e067f6eac1c2fb": [
        "def solution():\n    speed = 550 / 5\n    distance = speed * 3\n    return distance\n\nans = solution()"
    ],
    "dd7ef81126644ff58215f822282cae06": [
        "def solution():\n    from math import lcm\n    ans = lcm(1, 2, 3, 4, 5)\n    return ans\n\nans = solution()"
    ],
    "123966a82052442699a9217c1798213b": [
        "def solution():\n    num_jumps = 14 # from the 1st to the 15th post, the frog makes 14 jumps\n    jump_length = 3 # each jump is 3 inches long\n\n    total_distance = num_jumps * jump_length\n\n    return total_distance\n\nans = solution()"
    ],
    "7c976da5c8314e559893fed4d2545dcc": [
        "def solution():\n    ans = 342 - (85 - 78) * 15\n    return ans\n\nans = solution()"
    ],
    "4e5a3868c9c2434595c65034ace0b292": [
        "from math import factorial\nfrom fractions import Fraction\n\ndef count_even_perms(pairs):\n    # There are 5!! (double factorial) ways to arrange the pairs with even spacing\n    n = len(pairs)\n    return factorial(2 * n - 1) // (2**n * factorial(n))\n\ndef solution():\n    count_total_perms = factorial(12)\n    # To ensure even arrangements, we place pairs with 2 spaces between them\n    # We do this for all the pairs one by one, treating them as single units\n    # We then multiply the possibilities together because these are independent events\n    count_even_perms_all_colors = count_even_perms(['R', 'B', 'Y', 'G', 'O', 'P'])\n\n    # The probability that her arrangement is even\n    probability = Fraction(count_even_perms_all_colors, count_total_perms)\n\n    # Simplify the fraction to get relatively prime m and n\n    m = probability.numerator\n    n = probability.denominator\n\n    return m + n\n\nans = solution()"
    ],
    "30fcda504e8d40b4aeaac401d2df58e4": [
        "def solution():\n    total_fruits = 18 + 30 + 36\n    friends = 6\n    fruits_per_friend = total_fruits // friends\n    return fruits_per_friend\n\nans = solution()"
    ],
    "e71f218803924703bffc15e15224ba0b": [
        "def solution():\n    # 1/Alan's rate + 1/Bob's rate = 1/Total rate\n    # Let x be the time Alan takes to paint the room on his own\n    # Then Alan's rate of painting is 1/x rooms per hour\n    # Bob's rate of painting is 1/6 rooms per hour\n    # Together, their rate is 1/4 rooms per hour\n    # The equation to solve is 1/x + 1/6 = 1/4\n\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol x for Alan's time to paint the room alone\n    x = symbols('x')\n\n    # The equation representing the combined work\n    equation = Eq(1/x + 1/6, 1/4)\n\n    # Solve for x\n    alan_time = solve(equation, x)\n\n    # Return the time Alan would take on his own, take the positive solution\n    return alan_time[1]  # We expect two solutions, we only need the positive one\n\nans = solution()"
    ],
    "cd38959f92fb4e319b79a21e7b76d58f": [
        "def solution():\n    prob_rain_saturday = 0.7\n    prob_rain_sunday = 0.5\n    prob_no_rain_saturday = 1 - prob_rain_saturday\n    prob_no_rain_sunday = 1 - prob_rain_sunday\n    \n    prob_no_rain_both_days = prob_no_rain_saturday * prob_no_rain_sunday\n    prob_rain_at_least_one_day = 1 - prob_no_rain_both_days\n    \n    return prob_rain_at_least_one_day\n\nans = solution()"
    ],
    "932e3588f77946a58e948ab41abb1c9f": [
        "def solution():\n    remaining_fraction = 1 - 2/5\n    total_apples = 150 / remaining_fraction\n    \n    return int(total_apples)\n\nans = solution()"
    ],
    "2876f7ddaab14397976d9a29249f7fe2": [
        "def solution():\n    # Rates at which the inlets fill the pool\n    rate_A = 1 / 36  # pool per minute\n    rate_B = 1 / 48  # pool per minute\n\n    # The cycle is A for 1 min, B for 2 min, A for 2 min, B for 1 min\n    # Find the amount of the pool filled in one cycle\n    pool_filled_per_cycle = (rate_A * 1) + (rate_B * 2) + (rate_A * 2) + (rate_B * 1)\n\n    # Duration of one cycle\n    cycle_duration = 1 + 2 + 2 + 1  # 6 minutes per cycle\n\n    # Full pools filled in one cycle\n    full_pools_per_cycle = pool_filled_per_cycle\n\n    # Find how many complete cycles are required to fill the pool\n    complete_cycles_required = 1 // full_pools_per_cycle\n\n    # Remaining pool to be filled after complete cycles\n    remaining_pool = 1 % full_pools_per_cycle\n\n    # Time to fill the remaining pool\n    remaining_time = 0\n    sequence = [(1, rate_A), (2, rate_B), (2, rate_A), (1, rate_B)]\n\n    for time, rate in sequence:\n        if remaining_pool <= 0:\n            break\n        filled = rate * time\n        if filled >= remaining_pool:\n            # If the remaining pool will be filled in this step\n            remaining_time += remaining_pool / rate\n            break\n        else:\n            # If the remaining pool will not be filled in this step\n            remaining_time += time\n            remaining_pool -= filled\n\n    # Total time to fill up the pool\n    total_time = (complete_cycles_required * cycle_duration) + remaining_time\n\n    return round(total_time)\n\nans = solution()"
    ],
    "58c65fe8c729419faa7ab40e34ec522c": [
        "def solution():\n    matthew_pencils = 31\n    samantha_pencils = matthew_pencils - 6\n    return samantha_pencils\n\nans = solution()"
    ],
    "79f67407094f46b5b519e683dcaa47b1": [
        "def solution():\n    ans = (46 + 7 * 3 - 7) / 20\n    return ans\n\nans = solution()"
    ],
    "a95c5e315cdc4b218288615a503b9e17": [
        "def solution():\n    for correct in range(11):\n        incorrect = 10 - correct\n        if correct * 10 - incorrect * 3 == 48:\n            return incorrect\n\nans = solution()"
    ],
    "8a6cf5778ac04779aa35bd346944e9ea": [
        "def solution():\n    # Count the number of factors of 5 in the factorial since\n    # for every five there will likely be a corresponding pair of 2s for a zero.\n    # 5 is the limiting factor for trailing zeros in a factorial.\n    count_5 = 0\n    n = 0\n    # We iterate until the number of zeros reaches 28\n    while count_5 < 28:\n        n += 1\n        number = n\n        # Count the number of 5 factors in the current number\n        while number % 5 == 0:\n            count_5 += 1\n            number //= 5\n\n    return n\n\nans = solution()"
    ],
    "0d15eca36ec748eeb767eb2dd214bad3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    henry, fred, richard = symbols('henry fred richard')\n    \n    equation1 = Eq(richard, henry - 3.24)\n    equation2 = Eq(fred, richard + 5.6)\n    equation3 = Eq(henry + fred + richard, 204.56)\n    \n    solutions = solve((equation1, equation2, equation3), (henry, fred, richard))\n    \n    return solutions[fred]\n\nans = solution()"
    ],
    "a3fdcafb566f460b979225e8d39c3503": [
        "def solution():\n    initial_bottles = 10\n    borrowed_bottle = 1\n    total_bottles = initial_bottles + borrowed_bottle\n    empty_bottles = 0\n    while total_bottles > 1:\n        new_bottles = total_bottles // 2\n        empty_bottles = total_bottles % 2\n        total_bottles = new_bottles + empty_bottles\n        initial_bottles += new_bottles\n    return initial_bottles\n\nans = solution()"
    ],
    "b69896aa9f7e46fe9132abed6a7e3e0e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let h_A be the height of A's waterline and h_B be the height of B's waterline\n    # let t be the time in minutes after which h_A is 3 times h_B\n    t = symbols('t')\n    # Since the rate of draining A is the full height in 10 minutes, it drains 1/10 per minute\n    # Since the rate of draining B is the full height in 6 minutes, it drains 1/6 per minute\n    # The initial heights of both the pools are the same, let's assume it to be 1 (100% filled)\n    # After t minutes, the height of A's waterline will be 1 - (1/10)t\n    # After t minutes, the height of B's waterline will be 1 - (1/6)t\n    # We need to find t when the height of A's water is 3 times the height of B's water:\n    equation = Eq(1 - (1/10)*t, 3*(1 - (1/6)*t))\n\n    # Solve the equation\n    solution = solve(equation, t)\n    return solution[0]\n\nans = solution()"
    ],
    "e5f11fb592e84030a40404b984c70a41": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(51 - 3 * (2 * x - 2), 21)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5f4e105849d24adda1343493fbfdba1e": [
        "def solution():\n    total_children = 18\n    vanessa_position_from_front = 10\n    andrea_position_from_end = 12\n\n    # Calculate the position of Andrea from the front\n    andrea_position_from_front = total_children - andrea_position_from_end + 1\n\n    # Calculate the number of children between Vanessa and Andrea\n    num_children_between = abs(vanessa_position_from_front - andrea_position_from_front) - 1\n\n    return num_children_between\n\nans = solution()"
    ],
    "8447879252624d80abee2367655025a7": [
        "def solution():\n    total_weeks = 7\n    sweets_bought_each_week = 30\n\n    sweets_at_start = 320\n    sweets_at_end = 348\n\n    sweets_bought_total = total_weeks * sweets_bought_each_week\n    sweets_eaten_total = sweets_at_start + sweets_bought_total - sweets_at_end\n\n    sweets_eaten_each_week = sweets_eaten_total // total_weeks\n\n    return sweets_eaten_each_week\n\nans = solution()"
    ],
    "aef19b3423ea4e4db4e653899791075e": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"281{digit}\")\n        if number % 6 == 0:\n            return digit\n\nans = solution()"
    ],
    "7c9f36ec8f484e11986b79be63c2965e": [
        "def solution():\n    path_length = 5/6\n    fenced_length = 2/3\n    unfenced_length = path_length - fenced_length\n    return unfenced_length\n\nans = solution()"
    ],
    "33b87e7146da47bfaf494ee09b2a87fc": [
        "def solution():\n    louise_time = 4\n    sally_time = 3 * louise_time\n    return sally_time\n\nans = solution()"
    ],
    "eac1ed2db4cd4aeba3d60c1847748394": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((10*x - 8) - (12 - 10*x), 2)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "7e5f8417567e4906a4369f99123b1772": [
        "def solution():\n    # Define the variables where c is Chenxi's sweets and y is Yue Ying's sweets\n    c = y + 5\n\n    # After Chenxi gives Yue Ying 10 sweets.\n    c = c - 10  # Chenxi's sweets after giving 10 away to Yue Ying\n    y = y + 10  # Yue Ying's sweets after receiving 10 from Chenxi\n\n    # Now, we recalculate the difference after the exchange.\n    difference = abs(c - y)\n    return difference\n\n# Since we know that Chenxi has 5 more sweets initially, after giving 10 sweets to Yue Ying,\n# Yue Ying will have 5 more sweets than Chenxi, so let's calculate with considering initial difference.\nans = solution()"
    ],
    "a9cffd9f20194c40af59a76b9109b46e": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "298e42b0f337482ab1dc2d26faaf6521": [
        "def solution():\n    # There's only one way to tell the time \"1\"\n    return 1\n\nans = solution()"
    ],
    "b97c96624e2c48adabfda458ee48cae5": [
        "def solution():\n    percentage = 35\n    total_amount = 200\n    ans = (percentage / 100) * total_amount\n    return ans\n\nans = solution()"
    ],
    "192fafc0d2ce44eb94ff567dea0bb271": [
        "def solution():\n    from sympy import isprime\n\n    # we start searching from the middle since half of 69 is 34.5\n    # and we want to find the two prime numbers closest to each other.\n    for prime1 in range(35, 1, -1):\n        prime2 = 69 - prime1\n        if isprime(prime1) and isprime(prime2):\n            return abs(prime1 - prime2)\n\nans = solution()"
    ],
    "cc0957dc16a0487dbd25e08d32dfd716": [
        "def solution():\n    goats = 6\n    lambs = 4 * goats - 4\n\n    return lambs\n\nans = solution()"
    ],
    "101213693c2745c385e01db607de76dc": [
        "def solution():\n    # Let the distance from home to office be 'd' km\n    speed1 = 3  # km/h\n    speed2 = 7  # km/h\n    time_late = 12 / 60  # 12 minutes converted to hours\n    time_early = 8 / 60  # 8 minutes converted to hours\n\n    # The time taken to travel at speed1 (3 km/h)\n    # would be d / speed1\n    # The time taken to travel at speed2 (7 km/h)\n    # would be d / speed2\n\n    # Since he is 12 min late when travelling at speed1,\n    # and 8 min early when travelling at speed2,\n    # the difference in times is (time_late + time_early)\n\n    # d / speed1 - d / speed2 = time_late + time_early\n    # Solving the above equation will give us the distance 'd'\n\n    d = (time_late + time_early) / (1 / speed1 - 1 / speed2)\n    \n    # Now solve for d\n    distance = d  # assign the calculated distance to distance variable\n\n    return distance\n\nans = solution()"
    ],
    "90d3eecee3cc4363a4700ae0f6ac9f45": [
        "def solution():\n    # Let the original number of students in school A be A\n    # Let the original number of students in school B be B\n    # According to the question: A + B = 1050\n    # After 20 students transfer from A to B: A - 20 = B + 10\n    # Therefore, we can make a system of equations:\n    # A + B = 1050\n    # A - B = 20 + 10\n    \n    from sympy import symbols, Eq, solve\n    \n    A, B = symbols('A B')\n    \n    # Equations based on the information given\n    equation1 = Eq(A + B, 1050)\n    equation2 = Eq(A - B, 20 + 10)\n    \n    # Solving the system of equations for A and B\n    solutions = solve((equation1, equation2), (A, B))\n    \n    # Returning the original number of students in school A\n    return solutions[A]\n\nans = solution()"
    ],
    "8b5d0f2f1fc844cfbe9a313fbf4b0b31": [
        "def solution():\n    # There are different placements for two pairs of brackets,\n    # but we can deduce that to maximize the result,\n    # we should first multiply 5 by 5 and then add the large numbers to it.\n    # This can be achieved by placing the brackets as follows:\n    # (15+5) * (5+(15-6+7))\n    # so the answer is:\n    ans = (15+5) * (5+(15-6+7))\n    return ans\n\nans = solution()"
    ],
    "94a7862baa614940812b4e4e2f3f9368": [
        "def solution():\n    ans = 254 * 6\n    return ans\n\nans = solution()"
    ],
    "a0395fcbfd2d439aa13dcc4f5226aeb1": [
        "def solution():\n    for correct in range(11):\n        incorrect = 10 - correct\n        score = correct * 10 - incorrect * 5\n        if score == 70:\n            return correct\n\nans = solution()"
    ],
    "369c0cce832f4bee85b43ed04d21f9c1": [
        "def solution():\n    total_students = 35\n    math_students = 20\n    both_classes = 11\n    neither_classes = 10\n\n    # Calculate the number of students taking only one class\n    only_math = math_students - both_classes\n    total_with_classes = total_students - neither_classes\n    only_writing = total_with_classes - only_math - both_classes\n\n    return only_writing\n\nans = solution()"
    ],
    "067c82adbd46460b82300b0fbc1bcc13": [
        "from sympy import isprime\n\ndef solution():\n    digits = '08072003'\n    # Use set to avoid duplicates and sort it in descending order because we need the largest prime\n    unique_digits = sorted(set(digits), reverse=True)\n    for number in range(49, 1, -1):\n        if isprime(number) and all(digit in unique_digits for digit in str(number)):\n            return number\n\nans = solution()"
    ],
    "f90a5e4a189b415caad9310b12a991d9": [
        "def solution():\n    # From given data\n    average_of_five = 54\n    average_of_first_two = 48\n    total_five = average_of_five * 5\n    total_first_two = average_of_first_two * 2\n    total_last_three = total_five - total_first_two\n    average_of_last_three = total_last_three / 3\n\n    return average_of_last_three\n\nans = solution()"
    ],
    "86c522861eca4579aee63cfe6a2ed4f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote Teddy's age as 't' and his father's age as 'f'\n    t, f = symbols('t f')\n    \n    # From the problem we have two equations:\n    # 1. When Teddy was 5 years old, his father's age was 7 times his age: f - t = 7 * 5 - 5\n    # 2. His father will be 40 years old: f = 40\n    \n    # We solve these equations for 't' (Teddy's age when his father is 40)\n    equations = (Eq(f - t, 7 * 5 - 5), Eq(f, 40))\n    solution = solve(equations, (t, f))\n    \n    # Extract Teddy's age from the solution\n    teddy_age_when_father_40 = solution[t]\n    \n    return teddy_age_when_father_40\n\nans = solution()"
    ],
    "4822c5372e3f4b81b32d47e02e9fb76a": [
        "def solution():\n    sum_of_sequence = sum(range(1, 18+1, 2))\n    return sum_of_sequence\n\nans = solution()"
    ],
    "218aeeff17964c29855e70445931229c": [
        "def solution():\n    # Adriana's calculation mistake is in the proportion assigned to the girls.\n    # It should be girls = 1/5 of the remaining audience (not 1/5 * 2/7 of the total audience)\n\n    # Let the total number of people be x\n    # Adults = 2/7 of the audience = 2/7 * x\n    # Remaining audience = x - 2/7 * x = 5/7 * x\n    # Boys = 4/5 of the remaining audience = 4/5 * 5/7 * x = 4/7 * x\n    # Girls = remaining audience - boys = (5/7 * x) - (4/7 * x) = 1/7 * x\n    \n    # According to the question, adults - girls = 80 more adults than girls\n    # (2/7 * x) - (1/7 * x) = 80\n    # 1/7 * x = 80\n    \n    x = 80 * 7\n\n    return x\n\nans = solution()"
    ],
    "ff96cbe022d54ccd8c38734e0820996b": [
        "def solution():\n    cuts = 4\n    slices = (cuts * (cuts + 1)) // 2 + 1\n    return slices\n\nans = solution()"
    ],
    "6d776ddacbf9461eb585ab73856e3bc6": [
        "def solution():\n    ans = sum(int(digit) for number in range(1, 110) for digit in str(number))\n    return ans\n\nans = solution()"
    ],
    "0625264c9a9d4b1e9c10ef4590d1be1c": [
        "def solution():\n    for pink in range(1, 48):\n        gray = 48 - pink\n        if gray == 11 * pink:\n            return pink\n\nans = solution()"
    ],
    "fc10a17cccd04e8a8b4ba3e7393837eb": [
        "def solution():\n    base_length = 9\n    area = 54\n    height = (2 * area) / base_length\n    return height\n\nans = solution()"
    ],
    "de1d2a07c3e741a88e3e8a8c740433f4": [
        "def solution():\n    # Let's find the rabbit's position from left to right first.\n    elephant_position_left_to_right = 10\n    toys_between = 5\n    # The rabbit is to the right of the elephant.\n    rabbit_position_left_to_right = elephant_position_left_to_right + toys_between\n\n    # Now, let's find the rabbit's position from right to left.\n    total_toys = 40\n    rabbit_position_right_to_left = total_toys - rabbit_position_left_to_right + 1\n\n    return rabbit_position_right_to_left\n\nans = solution()"
    ],
    "a0a9b4817586473ab82958503266de20": [
        "def solution():\n    return 82 + 5135 + 109\n\nans = solution()"
    ],
    "7e59f3d16bb944d0af7260fa7a6a1a05": [
        "def solution():\n    ans = sum(i**2 for i in range(2, 33, 3))\n    return ans\n\nans = solution()"
    ],
    "62900d76501a411095425c90066b6baa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chairs, tables = symbols('chairs tables')\n\n    original_condition = Eq(chairs, tables)\n    chairs_added = chairs + 24\n    tables_sold = tables - 42\n\n    final_condition = Eq(chairs_added, 4 * tables_sold)\n\n    solutions = solve((original_condition, final_condition), (chairs, tables))\n\n    return solutions[chairs]\n\nans = solution()"
    ],
    "501f99ad661542b685b7602cc769d419": [
        "def solution():\n    percentage = 35\n    total_amount = 700\n    ans = (percentage / 100) * total_amount\n    return ans\n\nans = solution()"
    ],
    "1f92ac5fcbf346a58c902a4e56d63b9f": [
        "def solution():\n    left_of_candy = 4\n    right_of_candy = 7\n    candy_cabinet = 1  # Candy's own cabinet\n\n    total_cabinets = left_of_candy + right_of_candy + candy_cabinet\n\n    return total_cabinets\n\nans = solution()"
    ],
    "d0df4689449e49dbaa0b915c5b1e0d16": [
        "def solution():\n    ans = 1914 // 6\n    return ans\n\nans = solution()"
    ],
    "72e9171f682743098c4b8fec888c8a50": [
        "def solution():\n    books_first_day = 455\n    books_second_day = 198\n    total_books = books_first_day + books_second_day\n    return total_books\n\nans = solution()"
    ],
    "1a265e25f6874c5db75962c369ac17bc": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):  # Loop through the range of 3-digit numbers\n        if i % 2 == 0:  # Check if the number is even\n            digits = [int(d) for d in str(i)]  # Split the number into digits\n            if sum(digits) == 7:  # Check if the sum of the digits is 7\n                count += 1\n    return count\n\nans = solution()"
    ],
    "71839d8b337447be8093660f325bbed7": [
        "def solution():\n    for Y in range(10):\n        if int(f\"106{Y}\") % 18 == 0:\n            return Y\n\nans = solution()"
    ],
    "d75c9444af574fdf91925c609d2dc5d8": [
        "def solution():\n    boxes_per_class = 8\n    number_of_classes = 5\n    total_boxes = boxes_per_class * number_of_classes\n    return total_boxes\n\nans = solution()"
    ],
    "b61bf81e98dd4cc3b300767de6effa6e": [
        "def solution():\n    for i in range(99, -1, -1):\n        if i % 10 == 0 and (4900 + i) % 2 == 0 and (4900 + i) % 3 == 0:\n            return 4900 + i\n\nans = solution()"
    ],
    "0d83a44b34bd44cba27a54d4aa0c0f8b": [
        "def solution():\n    # Since 4^982 = (2^2)^982 = 2^(2*982) = 2^1964\n    # We can simplify the expression as 2^2019 / (2^1964 - 2^1963)\n    # Let's first calculate 2^2019 % 5, 2^1964 % 5, and 2^1963 % 5\n    \n    # According to Euler's theorem, since 5 is a prime number and gcd(2, 5) = 1,\n    # we have 2^4 ≡ 1 (mod 5), because 4 = 5 - 1 is Euler's totient function φ(5).\n    # We'll use this to reduce large exponents modulo 4 to simplify the calculation.\n    \n    # For 2^2019 (mod 5), we reduce 2019 modulo 4\n    exp_2019_mod_4 = 2019 % 4  # which is 3\n    # Therefore 2^2019 ≡ 2^3 (mod 5)\n    two_2019_mod_5 = (2 ** exp_2019_mod_4) % 5\n    \n    # For 2^1964 (mod 5), we reduce 1964 modulo 4\n    exp_1964_mod_4 = 1964 % 4  # which is 0\n    # Therefore 2^1964 ≡ 2^0 (mod 5)\n    two_1964_mod_5 = (2 ** exp_1964_mod_4) % 5\n    \n    # For 2^1963 (mod 5), we reduce 1963 modulo 4\n    exp_1963_mod_4 = 1963 % 4  # which is 3\n    # Therefore 2^1963 ≡ 2^3 (mod 5)\n    two_1963_mod_5 = (2 ** exp_1963_mod_4) % 5\n    \n    # Calculate the denominator modulo 5\n    denominator_mod_5 = (two_1964_mod_5 - two_1963_mod_5) % 5\n    \n    # The inverse of denominator modulo 5\n    # Multiplicative inverse of x mod 5 is a number y such that (x * y) % 5 = 1\n    # Since the denominator is 2^1964 - 2^1963, its value modulo 5 will be either 1 or 4\n    # Inverse of 1 mod 5 is 1, and inverse of 4 mod 5 is 4 because (4*4)%5 = 1\n    inverse_denominator_mod_5 = denominator_mod_5 if denominator_mod_5 != 0 else 1\n    \n    # Thus, 2^2019 divided by the denominator modulo 5 is:\n    ans = (two_2019_mod_5 * inverse_denominator_mod_5) % 5\n    return ans\n\nans = solution()"
    ],
    "4950b20e3ff347308b65c01922e1ecd1": [
        "def solution():\n    n = 100\n    sum_of_cubes = (n**2 * (n+1)**2) // 4\n    sum_of_numbers = (n * (n+1)) // 2\n    ans = sum_of_cubes / sum_of_numbers\n    return ans\n\nans = solution()"
    ],
    "0c07d3cceff140638bcc02cfd4b815c0": [
        "def solution():\n    # Total number of vehicles\n    total_vehicles = 27\n    # Total number of wheels\n    total_wheels = 96\n    # Assume all vehicles are motorcycles with 2 wheels\n    all_motorcycles_wheels = 2 * total_vehicles\n    # Remaining wheels after assuming all are motorcycles\n    remaining_wheels = total_wheels - all_motorcycles_wheels\n    # Since the number of cars equals the number of lorries, and each car-lorry pair adds 8 wheels (4+6=10-2=8)\n    # we can divide the remaining wheels by 8 to find the number of car-lorry pairs\n    car_lorry_pairs = remaining_wheels // 8\n    # The number of cars is equal to the number of car-lorry pairs\n    return car_lorry_pairs\n\nans = solution()"
    ],
    "7c6943752cfb4c10ba5d271cbd98b7f5": [
        "def solution():\n    ana_height = 150\n    olaf_height = ana_height - 116\n    kristoff_height = 5.5 * olaf_height\n    height_difference = kristoff_height - ana_height\n    return height_difference\n\nans = solution()"
    ],
    "825b09d6a8a7435181cbe8f03a8719e8": [
        "def solution():\n    ans = 113 - 29\n    return ans\n\nans = solution()"
    ],
    "64edc5874141435dbc97c986f5c8c721": [
        "def solution():\n    # Let's denote the mass of the jar as 'j' and the mass of one chocolate as 'c'.\n    # We have two equations based on the description:\n    # 1. j + 5c = 185\n    # 2. j + 17c = 317\n\n    # We can solve these two equations for 'j' and 'c'.\n\n    # From equation 1, express 'j' in terms of 'c':\n    # j = 185 - 5c\n\n    # Substitute 'j' from equation 1 into equation 2:\n    # (185 - 5c) + 17c = 317\n    # 185 + 12c = 317\n    # 12c = 317 - 185\n    # 12c = 132\n    c = 132 / 12\n\n    # Now find 'j' using the value of 'c':\n    j = 185 - 5 * c\n\n    # Now calculate the mass of the jar with 10 chocolates:\n    # j + 10c\n    ans = j + 10 * c\n\n    return ans\n\nans = solution()"
    ],
    "67726d4c5f1c43f99ab8c34d4c1d1255": [
        "def solution():\n    total_weight = 700  # total weight of the sugar solution\n    sugar_percentage = 0.32  # the concentration of sugar in the solution\n    weight_sugar = total_weight * sugar_percentage  # weight of the sugar\n    \n    weight_water = total_weight - weight_sugar  # weight of the water\n    return weight_water\n\nans = solution()"
    ],
    "b5bf6927be4b4a3087a39281607f3658": [
        "def solution():\n    initial_cookies = 15\n    eaten_cookies = 6\n    remaining_cookies = initial_cookies - eaten_cookies\n    return remaining_cookies\n\nans = solution()"
    ],
    "5f82ecd1f2614283b498976475a87d7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # price per apple\n    price_apple = 0.60\n\n    # number of apples, pears, and mangoes\n    apples, pears, mangoes = symbols('apples pears mangoes', integer=True)\n\n    # total money spent on the fruits\n    total_money = 150\n\n    # equations based on the information given\n    equation1 = Eq(pears, 4 / 5 * apples)\n    equation2 = Eq(mangoes, 2 / 5 * apples)\n    equation3 = Eq(3 / 2 * price_apple * apples, price_apple * pears)\n    equation4 = Eq(price_apple * pears, 1 / 5 * price_apple * mangoes)\n    equation5 = Eq(price_apple * apples + price_apple * pears + price_apple * mangoes, total_money)\n\n    # find the solutions\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (apples, pears, mangoes))\n\n    # calculate the total number of fruits\n    total_fruits = solutions[apples] + solutions[pears] + solutions[mangoes]\n\n    return total_fruits\n\nans = solution()"
    ],
    "ccf4b3c1375049a0a9b0d364cd87dedb": [
        "def solution():\n    result = 3.05 - 1/10\n    return result\n\nans = solution()"
    ],
    "ca40261e554e488db8f2110589404752": [
        "def solution():\n    total_trees = 21\n    total_distance = 800  # in meters\n\n    # Since both ends are planted with trees, we have 20 intervals between 21 trees.\n    num_intervals = total_trees - 1\n    \n    interval_distance = total_distance / num_intervals\n    return interval_distance\n\nans = solution()"
    ],
    "41cb580f803a4484aa9de2340f620cd5": [
        "def solution():\n    ans = 132 // 11\n    return ans\n\nans = solution()"
    ],
    "b5e2b7a8198347d0b928d1181cc5ab24": [
        "def solution():\n    first_half = 366  # kWh saved in the first half of the year\n    second_half_per_month = 65  # average kWh saved per month in the second half\n    months_in_half_year = 6\n    \n    second_half_total = second_half_per_month * months_in_half_year\n    total_saved = first_half + second_half_total\n    average_per_month = total_saved / 12\n    \n    return average_per_month\n\nans = solution()"
    ],
    "e20396c1126c4c378303deff5dbb8965": [
        "from math import factorial\n\ndef solution():\n    letters = \"ELEMENT\"\n    letter_counts = {letter: letters.count(letter) for letter in set(letters)}\n    \n    denominator = 1\n    for count in letter_counts.values():\n        denominator *= factorial(count)\n    \n    ans = factorial(len(letters)) // denominator\n    return ans\n\nans = solution()"
    ],
    "bee2bb31e9cc4bfd97c140eb2cd7ca84": [
        "def solution():\n    hazel_age_in_3_years = 9\n    hazel_current_age = hazel_age_in_3_years - 3\n    jessica_current_age = hazel_current_age - 3\n    total_age_next_year = (hazel_current_age + 1) + (jessica_current_age + 1)\n    return total_age_next_year\n\nans = solution()"
    ],
    "d09c9b0c4c064e1d91b4be6e28603df8": [
        "def solution():\n    first_term = 4\n    last_term = 11\n    num_terms = (last_term - first_term) + 1\n\n    sum_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_sequence\n\nans = solution()"
    ],
    "2f7331548e4c4ead9882750734e9dcb3": [
        "def solution():\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    ans = gcd(4811, 1981)\n    return ans\n\nans = solution()"
    ],
    "56e4e8204ffd46788f19f0fb559476b9": [
        "def solution():\n    total_score_for_six_assignments = 6 * 92\n    total_score_for_five_assignments = 5 * 94\n    score_for_sixth_assignment = total_score_for_six_assignments - total_score_for_five_assignments\n    return score_for_sixth_assignment\n\nans = solution()"
    ],
    "60a921961e274ba6b7944a53c0a16d35": [
        "def solution():\n    cost_price = 65\n    selling_price = 74\n    remaining_pairs = 5\n    profit = 440\n\n    # Calculate profit per pair of shoes\n    profit_per_pair = selling_price - cost_price\n\n    # Calculate the total number of pairs sold\n    pairs_sold = profit / profit_per_pair\n\n    # Calculate the total number of pairs purchased initially\n    total_pairs_purchased = pairs_sold + remaining_pairs\n\n    return int(total_pairs_purchased)\n\nans = solution()"
    ],
    "c3537d94f9474c1681dd753250a4e937": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    half_way_time = datetime.strptime(\"5:30 PM\", \"%I:%M %p\")\n    end_time = datetime.strptime(\"7:15 PM\", \"%I:%M %p\")\n    duration = end_time - half_way_time\n    start_time = half_way_time - duration\n\n    return start_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "9e5d33c0a5ac43408701c0c051cab6e9": [
        "def solution():\n    # For a number to be divisible by 2, its last digit must be even.\n    # For a number to be divisible by 5, its last digit must be 0 or 5.\n    # Since we are looking for the smallest number, we will use 0 for the last digit.\n    # For a number to be divisible by 11, the difference between the sum of digits at odd positions and the sum of digits\n    # at even positions is either 0 or a multiple of 11.\n    # For a number to be divisible by 3, the sum of its digits must be a multiple of 3.\n    \n    # The sum of digits at odd positions in 1992_ _ _0\n    # (Index:    7  6  5  4  3  2  1  -> 1, 3, 5, 7 are odd positions)\n    # is 1 + 9 + 0 + _ (we'll use S1 to represent the sum of digits at odd positions).\n    \n    # The sum of digits at even positions is 9 + 9 + _ + _ (we'll use S2 to represent the sum of digits at even positions).\n    \n    # Since we already have 0 at the last position, we need to minimize the digits at 5th and 6th positions.\n    \n    # Let's start checking from the smallest numbers for 5th and 6th positions until we find a number that\n    # satisfies the divisibility conditions.\n\n    min_number = None\n\n    # Since we need to minimize, we start with 00 at fifth and sixth positions\n    for fifth_digit in range(10):\n        for sixth_digit in range(10):\n            # Construct the complete number\n            number = int(f\"1992{fifth_digit}{sixth_digit}0\")\n            S1 = 1 + 9 + 0 + fifth_digit\n            S2 = 9 + 9 + sixth_digit + 0\n            \n            # Check the divisibility conditions\n            if (S1 - S2) % 11 == 0 and (S1 + S2) % 3 == 0:\n                min_number = number\n                break  # Found the smallest number, break from the inner loop\n        if min_number:\n            break  # Found the smallest number, break from the outer loop\n\n    return min_number\n\nans = solution()"
    ],
    "bf8d648694e046798009b3bcb8b11a51": [
        "def solution():\n    cars_at_end = 30\n    cars_entered = 8\n    cars_exited = 10\n\n    cars_at_beginning = cars_at_end - cars_entered + cars_exited\n\n    return cars_at_beginning\n\nans = solution()"
    ],
    "f0661ff980b543b2890c0b2cd9ed594d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(((x * 2 / 4) ** 2 - 4) / 10, 6)\n    ans = solve(equation, x)[0]  # Assuming there is at least one solution\n\n    return ans\n\nans = solution()"
    ],
    "91f1dc30074b4cc5ba3de816f8ebe024": [
        "def solution():\n    total_liters = 59\n    fill_rate = 10\n    leak_rate = 3\n    current_liters = 3\n    days = 1\n\n    while current_liters < total_liters:\n        days += 1\n        current_liters += fill_rate\n        if current_liters >= total_liters:\n            break\n        current_liters -= leak_rate\n\n    return days\n\nans = solution()"
    ],
    "ea2b0754dbd44371b1caf18c22c52d19": [
        "def solution():\n    return 1234 - 566\n\nans = solution()"
    ],
    "33baf7cac5884fbc952fe20bd5c8b056": [
        "def solution():\n    toys_in_5_minutes = 27\n    minutes_needed = 20\n    toys_in_20_minutes = (toys_in_5_minutes / 5) * minutes_needed\n    return toys_in_20_minutes\n\nans = solution()"
    ],
    "9921f066d3b9491bb6209aef0e315efb": [
        "def solution():\n    from math import gcd\n\n    amy_interval = 24\n    ginny_interval = 36\n\n    lcm = (amy_interval * ginny_interval) // gcd(amy_interval, ginny_interval)\n\n    return lcm\n\nans = solution()"
    ],
    "2d3e8ce232944b0da4446730b18adc15": [
        "def solution():\n    total_seconds = 30 * 60  # half an hour\n    digits_written = 0\n    current_number = 0\n\n    while total_seconds > 0:\n        current_number += 1\n        digits_in_current_number = len(str(current_number))\n        if total_seconds - digits_in_current_number >= 0:\n            digits_written += digits_in_current_number\n            total_seconds -= digits_in_current_number\n        else:\n            break\n    \n    ans = current_number if total_seconds == 0 else current_number - 1\n    return ans\n\nans = solution()"
    ],
    "c71b3187758541f2a9be1885e9788daf": [
        "def solution():\n    fractions = [1/2, 1/3, 1/4, 1/5, 1/6]\n    amounts = [30, 36, 40, 60, 96]\n    \n    values = [f * a for f, a in zip(fractions, amounts)]\n    \n    return max(values) - min(values)\n\nans = solution()"
    ],
    "2526a9251202448c82ca74dc1af18fd8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    end_time = datetime.strptime('11:20 PM', '%I:%20 %p')\n    game_duration = timedelta(minutes=225)\n    start_time = end_time - game_duration\n    return start_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "4b4550a7fb5a4da1879ab82345527afa": [
        "def solution():\n    # Worst case scenario: Darrell draws all marbles except the green ones first\n    marbles_before_green = 5 + 9 + 2\n    # Then he must draw one more to guarantee it's green\n    marbles_to_draw_green = marbles_before_green + 1\n    \n    return marbles_to_draw_green\n\nans = solution()"
    ],
    "63ccfd7c8f7948138140e37b2a8721c9": [
        "from math import comb\n\ndef solution():\n    num_teams = 20\n    num_matches = comb(num_teams, 2)\n    \n    return num_matches\n\nans = solution()"
    ],
    "d325179a1a7c406b95abe95c9433bf65": [
        "def solution():\n    toys_in_3_minutes = 27\n    toys_per_minute = toys_in_3_minutes / 3\n    return toys_per_minute\n\nans = solution()"
    ],
    "1a9163a8cb424cb9a9accd781412b79a": [
        "def solution():\n    # Total distance to climb is 20 metres\n    total_distance = 20\n    # Daily climb without the unique 7th day is 6 metres\n    daily_climb = 6\n    # Unique climb on the 7th day is 2 metres\n    seventh_day_climb = 2\n    # Calculate distance climbed after 6 days\n    six_days_climb = daily_climb * 6\n    # Remaining distance to climb on the 7th day\n    remaining_distance = total_distance - six_days_climb\n    # Calculate slide down distance using the 7th day's climb and remaining distance\n    slide_down_distance = seventh_day_climb - remaining_distance\n\n    return slide_down_distance\n\nans = solution()"
    ],
    "32e0c31f837f484dbc8307ce7ebbf9f6": [
        "def solution():\n    initial_rabbits = 32\n    years = 3\n\n    for _ in range(years):\n        initial_rabbits = 3 * initial_rabbits // 2\n\n    return initial_rabbits\n\nans = solution()"
    ],
    "e45c3400530944688f0b7c15612c3f65": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the speeds\n    candy_speed, ivy_speed = symbols('candy_speed ivy_speed')\n\n    # Ivy walked for 6+12=18 minutes and Candy for 12 minutes\n    ivy_time = 18\n    candy_time = 12\n\n    # Their speeds relative to each other\n    eq1 = Eq(ivy_speed, candy_speed + 20)\n\n    # The total distance should be the sum of their distances\n    # Ivy's distance + Candy's distance = 1200\n    eq2 = Eq(ivy_speed * ivy_time, candy_speed * candy_time + 1200)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (candy_speed, ivy_speed))\n\n    return solutions[candy_speed]\n\nans = solution()"
    ],
    "00b3826fde0d4426bbae01c933f41959": [
        "def solution():\n    # In a single round-robin tournament, each player plays every other player once.\n    # Therefore, each of the 8 players plays 7 games in total.\n    # Since the number of wins is different for each player, we can order the wins from most to least.\n    # The maximum number of wins is when a player wins all games, which is 7 wins.\n    # The next player can have at most 6 wins and so on.\n    # Hence, the champion, who has the most wins, will have 7 wins.\n    \n    return 7\n\nans = solution()"
    ],
    "7a85e45de1cf4eefac785ffc876e2419": [
        "def solution():\n    puffs_per_hour = 24 / 2\n    hours_for_120 = 120 / puffs_per_hour\n    return hours_for_120\n\nans = solution()"
    ],
    "407e3d4abdd84948b11417cc857b3a6f": [
        "def solution():\n    nickel_6mg = 6 * 0.45\n    nickel_14mg = 14 * 0.60\n    total_nickel = nickel_6mg + nickel_14mg\n    total_metal = 6 + 14\n    concentration = (total_nickel / total_metal) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "17b260645d6a414ab42dd5105d17a7a0": [
        "def solution():\n    max_product = 0\n    for a in range(1, 14):\n        for b in range(1, 14 - a):\n            for c in range(1, 14 - a - b):\n                d = 13 - a - b - c\n                max_product = max(max_product, a * b * c * d)\n    return max_product\n\nans = solution()"
    ],
    "0b323f74ff2440bd99945e7df07c7d9e": [
        "def solution():\n    edward_age = 8\n    mother_age = 32\n    years = symbols('years')\n\n    equation = Eq(mother_age + years, 3 * (edward_age + years))\n    solution_years = solve(equation, years)\n\n    return solution_years[0]\n\nans = solution()"
    ],
    "9931681699674c94a55cbd91e9fef93d": [
        "def solution():\n    scale_ratio = 6  # every 1 cm represents 6 meters\n    playground_length_plan = 5  # the playground length on the plan in cm\n\n    real_length_playground = playground_length_plan * scale_ratio  # the real playground length in meters\n    return real_length_playground\n\nans = solution()"
    ],
    "a3f71bfa7bda47abb06c88dc5fe9c667": [
        "def solution():\n    for num in range(10, 100):  # Loop through all 2-digit numbers\n        if num % 3 == 1 and num % 5 == 1:\n            return num\n\nans = solution()"
    ],
    "844dc49550ce457b94476fbbf9b26070": [
        "def solution():\n    result = (3/5) * 35\n    return result\n\nans = solution()"
    ],
    "f824d5ccf33349d2ab0f1608091dea39": [
        "def solution():\n    n = 1\n    while True:\n        small_square = n * n + 11\n        large_square = (n + 1) * (n + 1)\n        if large_square - small_square == 12:\n            return small_square\n        n += 1\n\nans = solution()"
    ],
    "dc7f0a68b9f24779bc4219332172235f": [
        "def solution():\n    total = 4060800\n    known_sum = 4000000 + 800\n    missing_number = total - known_sum\n    return missing_number\n\nans = solution()"
    ],
    "82a289b59d824994b394d0497a34059a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys = 15\n    boys_apples_average = 30\n    group_apples_average = 26\n    \n    girls = symbols('girls')\n    \n    total_apples_picked = boys * boys_apples_average + girls * 20\n    total_students = boys + girls\n    average_equation = Eq(total_apples_picked / total_students, group_apples_average)\n    \n    solutions = solve(average_equation, girls)\n    return solutions[0]\n\nans = solution()"
    ],
    "ba3fa896136240449736cb46b7e3fc42": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pen, pencil = symbols('pen pencil')\n    equation1 = Eq(pen + pencil, 4.5)\n    equation2 = Eq(pencil, pen - 0.5)\n\n    solutions = solve((equation1, equation2), (pen, pencil))\n\n    return solutions[pen]\n\nans = solution()"
    ],
    "75141a0eda0b4ee188fda622dacab4d8": [
        "def solution():\n    tank_a = 673\n    difference = 56\n    tank_b = tank_a + difference\n    return tank_b\n\nans = solution()"
    ],
    "e5322713de5247778392f797381187c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    basketballs, volleyballs = symbols('basketballs volleyballs')\n    total_cost = Eq(30 * basketballs + 25 * volleyballs, 340)\n    total_balls = Eq(basketballs + volleyballs, 12)\n\n    solutions = solve((total_cost, total_balls), (basketballs, volleyballs))\n\n    return solutions[basketballs]\n\nans = solution()"
    ],
    "12650053179d4354abc37f8acdc2f5cc": [
        "def solution():\n    total_wealth = 15e6\n    richie_share = total_wealth * (1/3)\n    remaining_after_richie = total_wealth - richie_share\n    thrifty_share = remaining_after_richie * (1/2)\n    remaining_after_thrifty = remaining_after_richie - thrifty_share\n    bounty_share = remaining_after_thrifty * (2/5)\n    archie_share = remaining_after_thrifty - bounty_share\n    \n    return archie_share\n\nans = solution()"
    ],
    "78ccf674710b4fe69a75eac5a5e851fe": [
        "def solution():\n    cost_per_book = 32 / 8\n    total_cost = cost_per_book * 12\n    return total_cost\n\nans = solution()"
    ],
    "548479b1b79a4bb28ce823621c5abeeb": [
        "def solution():\n    total_candy = 36\n    \n    candy_given_to_lily = (3/4) * total_candy\n    remaining_candy = total_candy - candy_given_to_lily\n    \n    candy_given_to_brother = (1/3) * remaining_candy\n    final_candy = remaining_candy - candy_given_to_brother\n    \n    return final_candy\n\nans = solution()"
    ],
    "033994c93a6b45b089e9faa4e06774ed": [
        "def solution():\n    ans = sum([sum([1/i for j in range(1, i)]) for i in range(2, 61)])\n    return ans\n\nans = solution()"
    ],
    "49f01b25ab6d4b69801d88a94adc488b": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Symbolic variables for the amounts in each container\n    c1, c2, c3 = symbols('c1 c2 c3')  # Total amount of candies in each container\n    m = symbols('m')  # Amount of mint candies, which is the same across all containers\n\n    # setup the system of equations for the mass of strawberry candies\n    # Given ratios of strawberry candies and total mass, we can setup equations\n    strawberry_c1 = 2/5 * c1  # Mass of strawberry candies in the first container\n    strawberry_c2 = 2/7 * c2  # Mass of strawberry candies in the second container\n    strawberry_c3 = 2/9 * c3  # Mass of strawberry candies in the third container\n\n    # system of equations based on the given information\n    eq1 = Eq(c1 - m, 5/3 * strawberry_c1)  # Mint and chocolate make up the remainder in container 1\n    eq2 = Eq(c2 - m, 7/2 * strawberry_c2)  # Mint and chocolate make up the remainder in container 2\n    eq3 = Eq(c3 - m, 9/2 * strawberry_c3)  # Mint and chocolate make up the remainder in container 3\n    eq4 = Eq(c1 + c2 + c3, 1371)  # Mass of all candies in all containers\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4), (c1, c2, c3, m))\n    \n    # total mass of strawberry candies in all containers\n    total_strawberry = strawberry_c1.subs(c1, solutions[c1]) \\\n                     + strawberry_c2.subs(c2, solutions[c2]) \\\n                     + strawberry_c3.subs(c3, solutions[c3])\n\n    return total_strawberry\n\nans = solution()"
    ],
    "ba33391702c54eddadac0a6dea3e8f20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x + 1, 16)\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "e41fa665820a4926b055fb0c8e503a19": [
        "def solution():\n    ans = 427 // 7\n    return ans\n\nans = solution()"
    ],
    "fdb38dfc8f624402a53c64aee38c936c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the amounts of money Roy and Dennis originally had\n    roy, dennis = symbols('roy dennis')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(roy + dennis, 340)  # Total sum of money shared by Roy and Dennis\n    equation2 = Eq(dennis - dennis / 4, 2 * (roy - 2 * roy / 3))  # Dennis has twice as much as Roy after spending\n\n    # Solve the equations for Roy and Dennis\n    solutions = solve((equation1, equation2), (roy, dennis))\n\n    # Find the amount Dennis had in the end after spending 1/4 of his money\n    dennis_end_amount = solutions[dennis] - solutions[dennis] / 4\n\n    return dennis_end_amount\n\nans = solution()"
    ],
    "7fc9064a1aa5469aa93c3e1bbde4bbee": [
        "def solution():\n    box_price = 6\n    total_money = 250\n    number_of_boxes = total_money // box_price\n    return number_of_boxes\n\nans = solution()"
    ],
    "5084bbc7b89c41b5bf2edb1303aac223": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    friday, saturday, sunday = symbols('friday saturday sunday')\n\n    equation1 = Eq(saturday, friday + 27)\n    equation2 = Eq(sunday, friday - 14)\n    equation3 = Eq(friday + saturday + sunday, 475)\n\n    solutions = solve((equation1, equation2, equation3), (friday, saturday, sunday))\n\n    return solutions[friday]\n\nans = solution()"
    ],
    "6a7f195d4df34990a4361a1279619703": [
        "def solution():\n    digits = 0\n    page = 0\n    while digits < 300:\n        page += 1\n        digits += len(str(page))\n    return page - 1\n\nans = solution()"
    ],
    "5c220b4fa8654c3a8555329850f8525d": [
        "def solution():\n    return 675 // 25\n\nans = solution()"
    ],
    "29250105e9c04c48bd1439676ca2782d": [
        "def solution():\n    total_cost = 235.60\n    number_of_balls = 8\n    ball_cost = 20.45\n\n    total_ball_cost = number_of_balls * ball_cost\n    total_hula_hoop_cost = total_cost - total_ball_cost\n    number_of_hula_hoops = 6\n\n    hula_hoop_cost = total_hula_hoop_cost / number_of_hula_hoops\n\n    return hula_hoop_cost\n\nans = solution()"
    ],
    "93cbd8cff1724a0288df495bf1bf1129": [
        "def solution():\n    from sympy import factorint\n    from math import sqrt\n\n    # Find prime factors of 693\n    factors = factorint(693)\n    # For a number to be a perfect square, all the prime factors must be in pairs \n    # So we will find those primes that are not in pairs and get one more of each to make it a pair\n    \n    prod = 1\n    for prime, exponent in factors.items():\n        if exponent % 2 != 0:  # Check if exponent is not even\n            prod *= prime  # Multiply that prime to create an even exponent for the prime\n\n    return prod\n\nans = solution()"
    ],
    "2294a90b377245e5a243e024c10b9e33": [
        "def solution():\n    # Finding the unit digit of 13^242\n    unit_digit_13 = pow(13, 242, 10)\n    \n    # Finding the unit digit of 17^379\n    unit_digit_17 = pow(17, 379, 10)\n    \n    # Finding the unit digit of 4^2012\n    unit_digit_4 = pow(4, 2012, 10)\n    \n    # Finding the unit digit of the sum of two numbers multiplied by the third\n    unit_digit = (unit_digit_13 + unit_digit_17 * unit_digit_4) % 10\n    \n    return unit_digit\n\nans = solution()"
    ],
    "52d042e76d354b68ac3284571d64fe18": [
        "def solution():\n    ans = -12 - 5\n    return ans\n\nans = solution()"
    ],
    "f92015fcf25b4f6b8a4c6c33740e86b0": [
        "def solution():\n    total_liters = 8 * 3\n    liters_consumed = 9\n    container_volume = 5\n\n    remaining_liters = total_liters - liters_consumed\n    containers_needed = -(-remaining_liters // container_volume)  # Ceiling division\n\n    return containers_needed\n\nans = solution()"
    ],
    "efc1886d8b6e41288f275b25df4f1970": [
        "def solution():\n    from sympy import Symbol, Eq, solve\n\n    A = Symbol('A')\n    expr = 2 + 1 / (2 + 1 / (1 + 1 / (2 + 1 / A)))\n    equation = Eq(expr, 64/27)\n\n    result = solve(equation, A)\n\n    return result[0]\n\nans = solution()"
    ],
    "298f22aae19b448d8ed281fe1ffd1c6a": [
        "def solution():\n    total_people = 22\n    position_from_front = 12\n\n    position_from_end = total_people - position_from_front + 1\n\n    return position_from_end\n\nans = solution()"
    ],
    "73173ea4753941c1aebae06530689d79": [
        "def solution():\n    return 498 + 349\n\nans = solution()"
    ],
    "615a06562ee54cbf883a97926cfa289a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the quantities we need to find\n    mary, alexis, charlotte = symbols('mary alexis charlotte')\n\n    # Mary had 7/5 as many stickers as Alexis implies mary = (7/5)*alexis\n    equation1 = Eq(mary, (7/5) * alexis)\n\n    # Mary and Alexis each gave 20% of their stickers to Charlotte\n    # This means mary_gave = 0.20 * mary and alexis_gave = 0.20 * alexis\n    mary_gave = 0.20 * mary\n    alexis_gave = 0.20 * alexis\n\n    # Charlotte's stickers increased by 80%\n    # Which means charlotte + (mary_gave + alexis_gave) = 1.80 * charlotte\n    equation2 = Eq(charlotte + (mary_gave + alexis_gave), 1.80 * charlotte)\n\n    # Mary had 20 stickers more than Charlotte in the end\n    # This means mary - mary_gave = charlotte + (mary_gave + alexis_gave) + 20\n    equation3 = Eq(mary - mary_gave, charlotte + (mary_gave + alexis_gave) + 20)\n\n    # We solve the system of equations for mary, alexis, and charlotte\n    solutions = solve((equation1, equation2, equation3), (mary, alexis, charlotte))\n\n    # Return the solution for Alexis\n    return solutions[alexis]\n\nans = solution()"
    ],
    "d56e2d0f4d3c49c09a9d9d2fae148065": [
        "def solution():\n    steak_weight = 3 + 1/2  # 3.5 kg\n    cost_per_kg = 7.50  # £7.50 per kg\n    total_cost = steak_weight * cost_per_kg\n    money_available = 20  # £20 note\n    money_needed = total_cost - money_available\n\n    return money_needed if money_needed > 0 else 0\n\nans = solution()"
    ],
    "f1a8a109f87844d5bb0f0d3f4dd4d789": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    light, heavy = symbols('light heavy')\n\n    equation1 = Eq(heavy, 2 * light)\n    equation2 = Eq(6 * light + 6 * heavy, 65.7)\n\n    solutions = solve((equation1, equation2), (light, heavy))\n\n    return round(solutions[light])\n\nans = solution()"
    ],
    "099b78e49bc4404ba303b17fc521c8a1": [
        "def solution():\n    return 6.5 + 2.55\n\nans = solution()"
    ],
    "07cef45a5cd34546b160beb5d63ff929": [
        "def solution():\n    scores = [8, 14, 11, 9, 12, 9]\n    average_score = sum(scores) / len(scores)\n    return average_score\n\nans = solution()"
    ],
    "866c8e678e0948b59e1d7291359716df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    benson, clive = symbols('benson clive')\n    \n    # Benson and Clive had a total of $705\n    equation1 = Eq(benson + clive, 705)\n    \n    # Benson bought a calculator for $34, so now he has Benson - 34\n    # Clive bought a badminton racket for $63, so now he has Clive - 63\n    # They then had the same amount of money left.\n    equation2 = Eq(benson - 34, clive - 63)\n    \n    # Solve the equations to find the amounts Benson and Clive had originally.\n    solutions = solve((equation1, equation2), (benson, clive))\n    \n    # We need the amount Clive had at first.\n    return solutions[clive]\n\nans = solution()"
    ],
    "d9fe69458a16475bb892b329f85a2176": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq((A + B) / 2, 50)\n    equation2 = Eq((B + C) / 2, 43)\n    equation3 = Eq((A + C) / 2, 45)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    average_ABC = (solutions[A] + solutions[B] + solutions[C]) / 3\n\n    return average_ABC\n\nans = solution()"
    ],
    "a3b2b317382c413b950d13170728af7c": [
        "def solution():\n    count = 0\n    for i in range(1, 10):  # First digit must be 1-9\n        for j in range(0, 10):  # Second digit can be 0-9\n            count += 1  # Each combination of i and j makes a unique palindromic number\n    return count\n\nans = solution()"
    ],
    "1c2eb2be878c46f9abd8fe0eebfe90e0": [
        "def solution():\n    sweets_in_A = 42\n    sweets_in_B = 4 * sweets_in_A\n    sweets_in_C = 2 * sweets_in_B\n    \n    return sweets_in_C\n\nans = solution()"
    ],
    "0463082fb7794b94ba6e248f5672f584": [
        "def solution():\n    denise_pens = symbols('denise_pens')\n    jay_pens = 6 * denise_pens\n    total_pens = Eq(denise_pens + jay_pens, 126)\n    answer = solve(total_pens, denise_pens)\n    return answer[denise_pens]\n\nans = solution()"
    ],
    "a81399939c8c430caa4f5477791e6872": [
        "def solution():\n    ans = 3192 // 7\n    return ans\n\nans = solution()"
    ],
    "1f147f03ccef4ae3a50a01ccda70772f": [
        "def solution():\n    ans = 18 - 4 * 2 + 3\n    return ans\n\nans = solution()"
    ],
    "0e1222f712bc4ffca972c05b2effd15b": [
        "def solution():\n    chocolate_bar_price = 1.26\n    total_cost_chocolate = 5 * chocolate_bar_price\n    cookie_price = total_cost_chocolate / 6\n    cost_of_cookies = 4 * cookie_price\n    initial_amount = 9.05\n    remaining_amount = initial_amount - cost_of_cookies\n    return remaining_amount\n\nans = solution()"
    ],
    "040686faef95411e8585542ead1f8966": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(boys / 3 + girls / 2, 250)\n    equation2 = Eq(boys + girls, 650)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "a36e566f98e442f5842ab9407dee385e": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 8 and i % 2 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "adcc0ea38c5c483abfaedf299c74cb3f": [
        "def solution():\n    total_amount = 75.90\n    ratio_10 = 8\n    ratio_50 = 3\n    ratio_sum = ratio_10 + ratio_50\n    value_10 = 0.10\n    value_50 = 0.50\n\n    total_value_50_coins = (total_amount * ratio_50) / (ratio_10 * value_10 + ratio_50 * value_50)\n    return total_value_50_coins\n\nans = solution()"
    ],
    "d9c3ed810a164a26992ebd764b6a4339": [
        "def solution():\n    # Define the unknown as 'x'\n    x = symbols('x')\n    \n    # Setup the equation based on the given mathematical expression\n    equation = Eq(8 * 11, x * 9 + 34)\n    \n    # Solve the equation for 'x'\n    solved_x = solve(equation, x)[0]\n    \n    return solved_x\n\nans = solution()"
    ],
    "d48e695fe4c940b2acce011d716fb7cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g represent the number of girls initially in the classroom\n    # Let b represent the number of boys initially in the classroom\n    g, b = symbols('g b', integer=True)\n    \n    # According to the problem, after 25 girls leave, we have:\n    # (g - 25) = (2/3)*(b)\n    # And after 15 boys leave, the number of boys and girls are equal:\n    # b - 15 = g - 25\n    equation1 = Eq(g - 25, (2/3) * b)\n    equation2 = Eq(b - 15, g - 25)\n\n    # Solving equations for g and b\n    solutions = solve((equation1, equation2), (g, b))\n\n    # Total students initially in the classroom is the sum of girls and boys\n    total_students = solutions[g] + solutions[b]\n\n    return total_students\n\nans = solution()"
    ],
    "b488441291104e42b32567c3545040a8": [
        "def solution():\n    original_price = 6400 / 0.2\n    savings = original_price - 6400\n    return savings\n\nans = solution()"
    ],
    "05b194fb5bbb4281aed3fa88a9af81f6": [
        "def solution():\n    side_length = 7\n    hole_side = 3\n    volume = 320\n\n    # The area of the base of the prism without the hole\n    base_area = side_length**2 - hole_side**2\n\n    # The height of the prism\n    height = volume / base_area\n\n    return height\n\nans = solution()"
    ],
    "e31b6f292ecc4753a2d83469dc4590f1": [
        "from math import factorial\n\ndef solution():\n    total_people = 8\n    people_together = 2\n    \n    # Treat Amy and Judy as one person first\n    # Since the table is circular, we fix one person (or the pair) and arrange the rest\n    arrangements_with_pair = factorial(total_people - 1)\n\n    # But Amy and Judy can switch places with each other, contributing a factor of 2\n    arrangements_Amy_Judy = people_together\n\n    total_arrangements = arrangements_with_pair * arrangements_Amy_Judy\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "f21d41597e6646d3be1d07eaad6c595f": [
        "def solution():\n    cuts = 0\n    pieces = 1\n    while pieces < 46:\n        pieces += cuts\n        cuts += 1\n    return cuts\n\nans = solution()"
    ],
    "871597fa52dc4a36a7d42eaa6aca7343": [
        "def solution():\n    n = 2008\n    total = 0\n    i = 1\n    \n    while total < n:\n        total += i\n        i += 1\n    \n    ans = n - (total - (i - 1))\n    return ans\n\nans = solution()"
    ],
    "449ef10f90444f13893b5ba270bc69ce": [
        "def solution():\n    x_weight = 1.5\n    total_x_weight = 3 * x_weight\n    num_of_ys = 10\n    y_weight = total_x_weight / num_of_ys\n    return y_weight\n\nans = solution()"
    ],
    "3893320e66ba431cbd94be3d97bd7bad": [
        "def solution():\n    return 35 * 24\n\nans = solution()"
    ],
    "c3a6b54c36ae43b689f9746376889267": [
        "def solution():\n    sequence = range(6, 27, 4)\n    return sum(sequence)\n\nans = solution()"
    ],
    "102d1f62f1754310866b41a5ade5f3d8": [
        "def solution():\n    tomatoes = 27\n    cucumbers = (tomatoes - 3) // 3\n    return cucumbers\n\nans = solution()"
    ],
    "1772deb848c44e73a5983aef50ac6df7": [
        "def solution():\n    from itertools import permutations\n    digits = [3, 5, 9]\n    perm = permutations(digits)\n    count = len(list(perm))\n    return count\n\nans = solution()"
    ],
    "d18ff02cbbaf44fa82bc520bd52cd64e": [
        "def solution():\n    count = 0\n\n    # Iterate over possible hundreds digits\n    for i in range(1, 10):\n        # Iterate over possible tens digits\n        for j in range(10):\n            # Calculate the ones digit\n            k = 5 - i - j\n            # Check if k is a valid digit\n            if 0 <= k < 10:\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "2f72bb76e3534c5eb2dc23ed6c53c0ad": [
        "def solution():\n    first_term = 2\n    last_term = 100\n    sum_numbers = 0\n\n    for number in range(first_term, last_term + 1):\n        if number % 5 == 2:\n            sum_numbers += number\n    \n    return sum_numbers\n\nans = solution()"
    ],
    "b623a87ccea1499fb63634242cab4656": [
        "def solution():\n    midday_temp = 8\n    drop_temp = 12\n    midnight_temp = midday_temp - drop_temp\n    return midnight_temp\n\nans = solution()"
    ],
    "36f6ee82d6634a45b07c1a4564134d1c": [
        "def solution():\n    # night 16th, mosquitoes eaten = 100\n    # difference (d) = 6\n    # We need to find the first term (a1) and then sum of 31 terms of this arithmetic sequence\n    \n    # Formula to find the nth term of an arithmetic sequence is: an = a1 + (n - 1)d\n    # For night 16: a16 = a1 + (16 - 1) * d\n    # 100 = a1 + 15 * 6\n    # a1 = 100 - 90\n    a1 = 10\n    \n    # Total number of nights (n) = 31\n    n = 31\n    \n    # Sum of n terms of an arithmetic sequence is given by: S_n = n/2 * (2a1 + (n - 1)*d)\n    total_mosquitoes = n / 2 * (2 * a1 + (n - 1) * 6)\n    \n    return int(total_mosquitoes)\n\nans = solution()"
    ],
    "a669b2ca57f844deb0cba08516ef70d7": [
        "def solution():\n    total_bags = 15\n    bags_given_away = total_bags / 3\n    bags_left = total_bags - bags_given_away\n\n    return int(bags_left)\n\nans = solution()"
    ],
    "8fc9c10f7d7b46d7b2146cde6378f1ae": [
        "def solution():\n    # To ensure victory, Chris can force a win by making sure they are always a multiple\n    # of 3 matches left after Dylan's turn. Chris should leave 5 matches at the end of \n    # the first turn because no matter if Dylan takes 1 or 2 matches,\n    # Chris will then be able to leave 3 matches for Dylan, which ensures Chris's victory.\n\n    # Total matches at the start\n    total_matches = 7\n\n    # Chris can take 1 or 2 matches.\n    # If Chris takes 2 matches, 5 will be left. Then Dylan can take either 1 or 2 matches.\n    # No matter what Dylan takes, Chris can take the opposite count to ensure that 3 matches\n    # are left after Dylan's next turn, thereby ensuring victory on the next turn.\n\n    # Number of matches Chris should take first to ensure a win\n    chris_first_turn = 2\n\n    return chris_first_turn\n\nans = solution()"
    ],
    "e9072c6898d44fc28e315a6cd5657cfa": [
        "def solution():\n    from itertools import permutations\n\n    for perm in permutations(range(10), 3):\n        A, B, C = perm\n        # Making sure A, B, and C are different digits and A is not 0\n        if A != 0:\n            ABC = 100 * A + 10 * B + C\n            return ABC\n\nans = solution()"
    ],
    "fb0a5cc20da34586a21b00309dee0247": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define each letter as a symbol\n    A, B, C, D, E = symbols('A B C D E')\n\n    # Represent the equations in terms of the symbols\n    equation = Eq(A*10**3 + B*10**2 + A*10 + C + D*10**3 + B*10**2 + E*10 + C, A*10**4 + C*10**3 + E*10**2 + D*10 + C)\n\n    # Since each letter represents a different digit (0-9), we set domain to `N` (natural numbers)\n    solutions = solve(equation, dict=True)\n\n    # Filter valid solutions such that all digits are different and are between 0-9\n    valid_solutions = [s for s in solutions if len(set(s.values())) == 5 and all(0 <= v < 10 for v in s.values())]\n\n    # Return the 4-digit number DBEC\n    for sol in valid_solutions:\n        D_val, B_val, E_val, C_val = sol[D], sol[B], sol[E], sol[C]\n        if D_val != 0:  # D cannot be 0 as it's the first digit in a 4-digit number\n            ans = D_val*10**3 + B_val*10**2 + E_val*10 + C_val\n            return ans\n\nans = solution()"
    ],
    "d32e98ac3f874eebacbd202b7baa856f": [
        "def solution():\n    start_time = (9 * 60) + 23  # Convert 9.23am to minutes\n    end_time = (13 * 60) + 6    # Convert 1.06pm to minutes (Note: 1pm is 13:00 in 24-hour time format)\n\n    minutes_diff = end_time - start_time\n\n    return minutes_diff\n\nans = solution()"
    ],
    "c2a0bced20654e69a37a8243f7a0a817": [
        "def solution():\n    ans = 1.6 + 2.3 + 3.4 + 12.2 + 5.7 - 2.2\n    return ans\n\nans = solution()"
    ],
    "9391ddf6c35a4fde8892b40958afa033": [
        "def solution():\n    a = 64\n    b = 36\n    ans = (a + b) * (a - b)\n    return ans\n\nans = solution()"
    ],
    "8321d60a92fb4651bd00bbee4c13a137": [
        "def solution():\n    # Assuming the question implies a certain number of restaurants that are not stated,\n    # typically such problems may present a fixed set of options (e.g., 10 restaurants).\n    # As the number of restaurants is not specified, we cannot provide a numerical answer.\n    # However, if 'n' is the number of restaurants, then the number of choices is 'n'.\n    # For example purposes, let's assume 'n' is 10 restaurants.\n    n = 10  # Number of restaurants, this variable should be set according to the actual problem.\n\n    return n\n\nans = solution()"
    ],
    "14fb2dfc36d7462d9626934b2a9875a3": [
        "def solution():\n    return sum(range(1, 10)) + sum(range(1, 9))\n\nans = solution()"
    ],
    "3947062555df4a428b3e6b98a885d729": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for each item's cost\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n\n    # Equations based on the problem statement\n    equation1 = Eq(3 * notebook + 4 * pencil_case + 5 * eraser, 50)\n    equation2 = Eq(notebook + pencil_case, 6)\n    equation3 = Eq(pencil_case + eraser, 8)\n\n    # Use sympy's solve function to find the solution\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n\n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "d4673ee1fc2f411f9eea5d8fc0e540a6": [
        "def solution():\n    total = sum((53 - 50) + (47 - 44) + (41 - 38) + (35 - 32) + (29 - 26) + (23,))\n    return total\n\nans = solution()"
    ],
    "067406b4f4a04fa6a7916a17ca92b1ad": [
        "def solution():\n    return 6.6 * 30\n\nans = solution()"
    ],
    "7da62cc10f93447ebd5250a89d0612a9": [
        "def solution():\n    distance = 48\n    speed = 8\n    time_taken = distance // speed\n    return time_taken\n\nans = solution()"
    ],
    "c17044f418d74fb09f393b68cc8342fd": [
        "def solution():\n    for A in range(1, 10):\n        for E in range(10):\n            if A != E:\n                AE = int(f\"{A}{E}{E}{A}\")\n                if len(set(str(AE))) == 2:\n                    return AE\n\nans = solution()"
    ],
    "85353e1815e64de9b01672fd4faa3880": [
        "def solution():\n    # Let's denote x as Harry's dad's age.\n    # average age of the family = total age of the family / number of family members\n    # 25 = (14 + 36 + 10 + x) / 4\n    # Now we solve for x.\n    \n    total_family_age = 25 * 4\n    age_of_others = 14 + 36 + 10\n    age_of_harrys_dad = total_family_age - age_of_others\n    \n    return age_of_harrys_dad\n\nans = solution()"
    ],
    "006b398886584c478594347960619995": [
        "def solution():\n    # Convert all units to centimeters for comparison\n    height_in_cm = {\n        '83m': 8300,\n        '200cm': 200,\n        '8cm': 8,\n        '1/2m': 50\n    }\n\n    # Assuming the height of a classroom door to be around 200cm\n    door_height_approx = 200\n\n    # Find the measurement closest to the classroom door height\n    closest_measurement = min(height_in_cm, key=lambda x: abs(height_in_cm[x] - door_height_approx))\n\n    # Return the closest measurement in its original unit\n    ans = closest_measurement\n    return ans\n\nans = solution()"
    ],
    "467fa0f0921245c98f8470b073242438": [
        "def solution():\n    ans = 16.4 / 20\n    return ans\n\nans = solution()"
    ],
    "d795930cfe064a999cc8e819cdf13cda": [
        "def solution():\n    total_digits = 450\n    pages_with_1_digit = 9  # Page numbers 1-9\n    pages_with_2_digits = 90  # Page numbers 10-99\n    pages_with_3_digits = (total_digits - pages_with_1_digit * 1 - pages_with_2_digits * 2) // 3\n    \n    total_pages = pages_with_1_digit + pages_with_2_digits + pages_with_3_digits\n    return total_pages\n\nans = solution()"
    ],
    "30df93da324249439f56623ab48606d3": [
        "def solution():\n    ans = 6.48 / 6\n    return ans\n\nans = solution()"
    ],
    "2132f99db9344be4a83936b1da90a005": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_money = symbols('initial_money')\n\n    lunch_expense = 5/12 * initial_money\n    remaining_after_lunch = initial_money - lunch_expense\n    dinner_expense = 2/7 * remaining_after_lunch\n    remaining_after_dinner = remaining_after_lunch - dinner_expense\n\n    equation = Eq(remaining_after_dinner, 45)\n\n    solutions = solve(equation, initial_money)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "c0bcad55039843688a280266a75e3093": [
        "def solution():\n    total_digits = 1524\n    pages, digits = 0, 0\n    \n    while digits < total_digits:\n        pages += 1\n        digits += len(str(pages))\n    \n    return pages\n\nans = solution()"
    ],
    "9df2844209ab4b48bb9e7656aff7a72a": [
        "def solution():\n    total_games = (5 * (5 - 1)) // 2  # Total number of games played in the tournament\n    # Subtract the wins of Lily, Eva, Tina, and Emma from the total games to get Gina's wins\n    games_won_by_gina = total_games - (2 + 1 + 4 + 3)\n    return games_won_by_gina\n\nans = solution()"
    ],
    "d94b3c942f214ed29b7cb5c2b4f59231": [
        "def solution():\n    numbers = [12, 6, 9, 21, 7, 23]\n    difference = max(numbers) - min(numbers)\n    ans = 2 * difference\n    return ans\n\nans = solution()"
    ],
    "104e0f1c1be44d5eb09a1de0f61c9249": [
        "import math\n\ndef solution():\n    angle = math.radians(20)  # Convert angle to radians\n    distance = 400  # Distance along the slope\n    g = 9.81  # Acceleration due to gravity\n    coefficient_friction = 0.2  # Coefficient of kinetic friction\n\n    # Find the force along the slope due to gravity\n    force_gravity = g * math.sin(angle)\n\n    # Find the force of friction (which is opposite to the direction of motion)\n    force_friction = coefficient_friction * g * math.cos(angle)\n\n    # Net force along the slope (gravity force minus friction force)\n    net_force = force_gravity - force_friction\n\n    # Acceleration can then be found from F = m * a, where mass (m) cancels out for constant acceleration\n    acceleration = net_force\n\n    # Use the kinematic equation v^2 = u^2 + 2 * a * d, with initial speed (u) = 0\n    final_speed = math.sqrt(2 * acceleration * distance)\n\n    return final_speed\n\nans = solution()"
    ],
    "18b4e19a2a474b58a2286cdb4391548c": [
        "def solution():\n    for avril_correct in range(11):\n        avril_points = 10 * avril_correct - 5 * (10 - avril_correct)\n        eddie_points = avril_points + 15\n        if avril_points + eddie_points == 155:\n            return avril_correct\n\nans = solution()"
    ],
    "39ac13b16ca64d7da0d126da55ae389f": [
        "def solution():\n    shirt_cost = 5\n    bag_cost = 10\n    total_cost = 300\n    \n    # Calculate number of groups based on the correct application of the unitary method\n    group_cost = (4 * shirt_cost) + bag_cost\n    number_of_groups = total_cost // group_cost\n    \n    # Calculate the number of shirts bought\n    shirts_bought = number_of_groups * 4\n    \n    return shirts_bought\n\nans = solution()"
    ],
    "6045ecc17a8240cf847e28c4ca7327a7": [
        "def solution():\n    men_per_day = 1 / (6 * 5)\n    women_per_day = 1 / (5 * 6)\n    combined_per_day = 10 * men_per_day + 5 * women_per_day\n    total_days = 1 / combined_per_day\n    return total_days\n\nans = solution()"
    ],
    "3028ecd60fde4f939707e80ce57d6888": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Initial ratio of boys to girls\n    equation1 = Eq(boys, 3 * girls)\n\n    # After 12 boys left and 20 girls joined, numbers are equal\n    equation2 = Eq(boys - 12, girls + 20)\n\n    # Solving the two equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "9a8905e262ef43708efc95e6c13e0dd2": [
        "def solution():\n    from math import gcd\n\n    # Weights of different types of coffee beans\n    type_A = 56\n    type_B = 96\n    type_C = 120\n\n    # Finding the greatest common divisor (GCD) for the three types\n    gcd_AB = gcd(type_A, type_B)\n    greatest_mass = gcd(gcd_AB, type_C)\n\n    return greatest_mass\n\nans = solution()"
    ],
    "3e2ad7353ee34db7941ef7f4ec470ad8": [
        "def solution():\n    num = 35\n    factors = [i for i in range(1, num + 1) if num % i == 0]\n    return sum(factors)\n\nans = solution()"
    ],
    "16622798daa848ff8e9a99b6b623c518": [
        "def solution():\n    apples = 30\n    children = 6\n    min_apples_to_other_children = 1 * (children - 1)\n    max_apples_to_one_child = apples - min_apples_to_other_children\n\n    return max_apples_to_one_child\n\nans = solution()"
    ],
    "12f08cb98de1436099e711b0564dfc03": [
        "def solution():\n    total_fruits = 24\n    ratio_sum = 1 + 2 + 3  # apples:bananas:oranges = 1:2:3\n\n    bananas = (total_fruits / ratio_sum) * 2\n    return int(bananas)\n\nans = solution()"
    ],
    "eeb7e226b5c04108bc05a1e3a95a4b52": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    years = symbols('years')\n\n    anna_age = 8 + years\n    mother_age = 44 + years\n\n    equation = Eq(mother_age, 3 * anna_age)\n\n    result = solve(equation, years)\n\n    return result[0]\n\nans = solution()"
    ],
    "5a83ea2badba4c79826ff79d1735c1b3": [
        "def solution():\n    may_short = 7\n    nancy_long = 18\n\n    # Since both have equal number of pieces of ribbon\n    # Let x be the number of long ribbons May has\n    # Then May would also have (25 - x) short ribbons because she already has 7 short ribbons\n    # Total length of May's ribbons = 7*40 + x*70\n    # Total length of Nancy's ribbons = 18*70\n    # According to the problem, length of May's ribbons is 2.4 m longer than Nancy's ribbons\n    # So, 7*40 + x*70 = 18*70 + 2.4*100\n\n    may_length = 7 * 40\n    nancy_length = 18 * 70\n    additional_length = 2.4 * 100  # converting 2.4 m to cm\n\n    x = symbols('x')\n    equation = Eq(may_length + x * 70, nancy_length + additional_length)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n    may_long = solution[0]\n\n    # Total pieces of ribbon May has = short + long\n    total_may_ribbons = may_short + may_long\n    return total_may_ribbons\n\nans = solution()"
    ],
    "f8678d8e2b9d4dccb1911a70b2606122": [
        "def solution():\n    for chickens in range(13):  # Maximum chickens can be 12, so range is from 0 to 12 (13 exclusive)\n        rabbits = 12 - chickens\n        if (chickens * 2 + rabbits * 4) == 34:\n            return rabbits\n\nans = solution()"
    ],
    "70660cca1f444b77bd1bdaba3f54255b": [
        "def solution():\n    sugar_weight = 55\n    water_weight = 220\n    total_solution_weight = sugar_weight + water_weight\n    concentration = (sugar_weight / total_solution_weight) * 100\n    return concentration\n\nans = solution()"
    ],
    "673c1a85dd1346948a16344e5724859d": [
        "def solution():\n    return 2.4 * 52 / 100 + 7.6 * 52 / 100\n\nans = solution()"
    ],
    "0c6f163b77d54e46bc6a8eadb82bfd9d": [
        "def solution():\n    for num in range(99, 9, -1):  # start from 99, go down to 10\n        if num % 4 == 3 and num % 5 == 3:\n            return num\n\nans = solution()"
    ],
    "c2b040f49df54d38991df78d71cf954e": [
        "def solution():\n    total_quantity = 1  # Total quantity of 'Purple Fire' paint in litres\n    ratio_sum = 3 + 1   # Sum of the parts in the ratio (red:blue)\n    red_part = 3        # Part of the ratio corresponding to red paint\n\n    red_quantity = (total_quantity * red_part) / ratio_sum\n\n    return red_quantity\n\nans = solution()"
    ],
    "12caf8fca32e42febe42dd8469b710c0": [
        "def solution():\n    return 345 * 67\n\nans = solution()"
    ],
    "a73aefc56ebe4450b1c222659aca3dbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b = symbols('a b')\n\n    equation1 = Eq(a - 40, b + 40)  # If A gives B 40 books, they would have the same number\n    equation2 = Eq(a + 40, 3 * (b - 40))  # If B gives A 40 books, A is 3 times that of B\n\n    solutions = solve((equation1, equation2), (a, b))\n\n    return solutions[a]\n\nans = solution()"
    ],
    "b86990b313b04b95b9eb607238d03c25": [
        "def solution():\n    numbers = [9, 7, 5, 8, 4, 1, 8]\n    mean_of_numbers = 6\n    total_sum = mean_of_numbers * (len(numbers) + 1)\n    missing_number = total_sum - sum(numbers)\n    return missing_number\n\nans = solution()"
    ],
    "48066947c0b143dfbd61973b59fefc94": [
        "def solution():\n    initial_amount = 68\n    quarter_amount = initial_amount / 4\n    remainder = initial_amount - quarter_amount\n    return remainder\n\nans = solution()"
    ],
    "e3a1d4b27da044ddad1173a844dfb144": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red = symbols('blue red')\n\n    equation1 = Eq(blue, 2 * red)\n    equation2 = Eq(blue + red, 18)\n\n    solutions = solve((equation1, equation2), (blue, red))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "a6e717d16ac04cf9b2916acf56c1b7e0": [
        "def solution():\n    min_apples = 1\n    while True:\n        apples = 50\n        children = 8\n        max_apple_count = apples - (children - 1) * min_apples\n        distinct_apples = set(range(min_apples, min_apples + children))\n        if sum(distinct_apples) == apples:\n            return max_apple_count\n        min_apples += 1\n\nans = solution()"
    ],
    "db9996863bc84afb88970ac5c70f87dc": [
        "def solution():\n    cows_for_8 = 8\n    days_for_8 = 10\n    cows_for_4 = 4\n    days_for_4 = 15\n    days_for_question = 5\n    \n    # Calculate the total amount of grass available in terms of cow-days\n    total_grass = cows_for_8 * days_for_8  # This is the same as cows_for_4 * days_for_4\n    \n    # Find out how many cows can be fed for the given number of days\n    cows_for_5_days = total_grass / days_for_question\n    \n    return cows_for_5_days\n\nans = solution()"
    ],
    "cacebdbc3369444fbebd09e2767b8146": [
        "def solution():\n    return 53 * 84\n\nans = solution()"
    ],
    "9f599323c52a4223810c1c60a307e07c": [
        "def solution():\n    total_mass = (1.02 / 12) * 4\n    return total_mass\n\nans = solution()"
    ],
    "7886d22ab5aa4161949641294c6c9ba5": [
        "def solution():\n    total_cost = 83\n    cost_per_tape = 9\n    num_tapes = 3\n    num_cds = 4\n\n    cost_of_tapes = cost_per_tape * num_tapes\n    cost_of_cds = total_cost - cost_of_tapes\n    cost_per_cd = cost_of_cds / num_cds\n\n    return cost_per_cd\n\nans = solution()"
    ],
    "857fbe5325ea47fa86a2d4c017f4e01b": [
        "def solution():\n    # Let x be the true result\n    # Let y be the divisor which is 1.22\n    # Since the decimal of the divisor wasn't placed, y became 122 instead of 1.22\n    # The incorrect result is x - 99.396 when using 122 as the divisor\n\n    # The correct equation for division would be: dividend = divisor * quotient\n    # Without the decimal point: dividend = 122 * (x - 99.396)\n    # With the decimal point: dividend = 1.22 * x\n    \n    # Hence, we can set up the following equation:\n    # 122 * (x - 99.396) = 1.22 * x\n\n    # Solving for x gives us:\n    x = 99.396 / (122 / 1.22 - 1)\n\n    return x\n\nans = solution()"
    ],
    "ff48944eb4344d26a3b5d1bf2e5d6209": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hisham, melissa = symbols('hisham melissa')\n\n    equation1 = Eq(melissa, 2 * hisham)\n    equation2 = Eq(hisham + melissa, 876)\n\n    solutions = solve((equation1, equation2), (hisham, melissa))\n\n    cards_to_give = (solutions[melissa] - solutions[hisham]) / 2\n\n    return int(cards_to_give)\n\nans = solution()"
    ],
    "040b8caf172f41a7bcb2b377bf7ecd95": [
        "def solution():\n    # Let's denote the first six numbers in the sequence as a, b, a+b, a+2b, 2a+3b, 3a+5b\n    # We are given that the fourth number is 6 and the sixth number is 15.\n    # Therefore, we have two equations:\n    # a + 2b = 6 (1)\n    # 3a + 5b = 15 (2)\n    # We can solve these two linear equations to find a and b.\n    \n    # Multiply equation (1) by 3 to eliminate a:\n    # 3a + 6b = 18 (3)\n    \n    # Subtract equation (2) from equation (3):\n    # b = 18 - 15\n    # b = 3\n    \n    # Substitute b into equation (1) to find a:\n    # a + 2*3 = 6\n    # a = 6 - 6\n    # a = 0\n    \n    # a = 0, b = 3\n    # The seventh number is 5a + 8b\n    # So we can calculate the seventh number as:\n    seventh_number = 5*0 + 8*3\n    \n    return seventh_number\n\nans = solution()"
    ],
    "dc7c1534320d4d5cbcc1d4abeb592b2c": [
        "def solution():\n    # Let x be the number Tasha first thought of\n    # Tasha multiplies it by 3 and then adds 8, which results in 35\n    # So, we have the equation: 3x + 8 = 35\n    # We need to find x\n    \n    # Subtract 8 from both sides to get: 3x = 35 - 8\n    # Divide both sides by 3 to find x\n    x = (35 - 8) / 3\n    \n    return x\n\nans = solution()"
    ],
    "8c47f81c09cb40598f99de91467025a0": [
        "def solution():\n    from math import gcd\n\n    boys = 28\n    girls = 32\n\n    greatest_common_divisor = gcd(boys, girls)\n\n    return greatest_common_divisor\n\nans = solution()"
    ],
    "83961d28b4bb455eb81f2d3b79db70dc": [
        "def solution():\n    n = 1.7 * 1000  # converting litres to millilitres\n    return n\n\nans = solution()"
    ],
    "0b7e4617d9c047468385d1998eb2f78f": [
        "def solution():\n    sum = 0\n    for i in range(0, 7):\n        sum += 1 / ((1 + 5 * i) * (6 + 5 * i))\n    ans = 36 * sum\n    return ans\n\nans = solution()"
    ],
    "57c4f3985bb74c62b7740a2f0c3435eb": [
        "from itertools import permutations\n\ndef solution():\n    digits = [4, 7, 5, 8, 3]\n    perm = permutations(digits)\n    min_odd_num = float('inf')\n    \n    for p in perm:\n        if p[0] == 0:\n            continue\n        num = int(''.join(map(str, p)))\n        if num % 2 != 0 and num < min_odd_num:\n            min_odd_num = num\n            \n    return min_odd_num\n\nans = solution()"
    ],
    "4c3f6d76550f4f3089cbf74b0f3d3fa9": [
        "def solution():\n    men_work_rate = 1 / (24 * 16)  # Work rate of one man per day\n    women_work_rate = 1 / (16 * 24)  # Work rate of one woman per day\n\n    total_work_rate = 10 * men_work_rate + 6 * women_work_rate\n    days_to_complete = 1 / total_work_rate\n    return days_to_complete\n\nans = solution()"
    ],
    "b4d1c1eb568e4c288faeed345d1531ee": [
        "def solution():\n    count = 0\n    for i in range(41):\n        if '2' in str(i):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "bfde09b81d63442bb7d2bdc77be0b501": [
        "def solution():\n    rectangles = 4\n    regions = 1\n    for i in range(1, rectangles + 1):\n        regions += i * (i + 1) // 2\n    return regions\n\nans = solution()"
    ],
    "5da353b85f0d48589f3c7704501b8d05": [
        "def solution():\n    bill_coins = 20\n    jim_coins = 4 * bill_coins\n    return jim_coins\n\nans = solution()"
    ],
    "5c7b9ce1905d45469426790e5ddb9e0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    julie = symbols('julie')\n    marion = 2 * julie\n    ethan = 5 * julie\n    equation = Eq(marion - ethan, -168)\n\n    julie_pay = solve(equation, julie)[0]\n    marion_pay = 2 * julie_pay\n    ethan_pay = 5 * julie_pay\n\n    total_pay = julie_pay + marion_pay + ethan_pay\n\n    return total_pay\n\nans = solution()"
    ],
    "17f689a51b1e456cbd853cbb42f52f25": [
        "def solution():\n    from math import factorial\n\n    # Calculate the total number of people\n    total_people = 5\n    # Calculate the number of ways to arrange 5 people\n    total_arrangements = factorial(total_people)\n    # Calculate the number of ways for Eddie to be in the middle, which is 1 (Eddie in the middle) * 4! (permutations of the other 4 people)\n    eddie_middle_arrangements = 1 * factorial(total_people - 1)\n    # Subtract the arrangements with Eddie in the middle from the total arrangements\n    valid_arrangements = total_arrangements - eddie_middle_arrangements\n\n    return valid_arrangements\n\nans = solution()"
    ],
    "3581c52ad5c34fea8de834f138a507fc": [
        "def solution():\n    # We identify that the sequence is a geometric sequence by looking at how each term relates to the next.\n    # To find the missing number n, we need to find the common ratio (r).\n    # r = term_(i+1) / term_i, so r = 24 / 96 for the known terms.\n\n    r = 24 / 96\n\n    # n is the term between 96 and 24, so using the common ratio, we calculate it as follows:\n    # n = 96 * r\n    n = 96 * r\n\n    return int(n)  # We return n as an integer, since it's a sequence of whole numbers.\n\nans = solution()"
    ],
    "6567f6570a0b4d6caced46d83395da96": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # x represents the total sum of money Hamid had originally\n    x = symbols('x')\n    # Equation representing the sum of money left after purchasing the watch and the tie\n    equation = Eq((1 - 1/3) * x - 56, 3/8 * x)\n    # Solve the equation for x\n    total_money = solve(equation, x)[0]\n\n    # Spending on watch\n    watch_spending = 1/3 * total_money\n    # Spending on tie\n    tie_spending = 56\n    \n    # Total spending\n    total_spending = watch_spending + tie_spending\n    return total_spending\n\nans = solution()"
    ],
    "9ea5b71855a94cfe9466fe43ab256389": [
        "from itertools import permutations\n\ndef is_divisible_by_11(num):\n    num_str = str(num)\n    odd_sum = sum(int(num_str[i]) for i in range(0, len(num_str), 2))\n    even_sum = sum(int(num_str[i]) for i in range(1, len(num_str), 2))\n    return (odd_sum - even_sum) % 11 == 0\n\ndef solution():\n    digits = '123456789'\n    for perm in permutations(digits):\n        num = int(''.join(perm))\n        if is_divisible_by_11(num):\n            return num\n\nans = solution()"
    ],
    "934469ea45974c6ba8322d85bcd538d4": [
        "def solution():\n    eddie_speed = 3  # m/s\n    train_speed = 57  # m/s\n    time_to_pass = 10  # seconds\n    \n    # Relative speed of the train with respect to Eddie\n    relative_speed = train_speed + eddie_speed  # m/s\n    \n    # The length of the train is the relative speed times the time it takes to pass\n    length_of_train = relative_speed * time_to_pass\n    \n    return length_of_train\n\nans = solution()"
    ],
    "805758debabb4563927203c5d2eba2d2": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 5), (2, 7), (3, 9)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "7d867d91c93842129d709466df2f1adc": [
        "def solution():\n    from itertools import product\n\n    max_value = 0\n    for signs in product(['+', '*'], repeat=3):\n        expression = f\"1{signs[0]}2{signs[1]}3{signs[2]}4\"\n        value = eval(expression)\n        max_value = max(max_value, value)\n\n    return max_value\n\nans = solution()"
    ],
    "4543b18126fb4fdb9c0d73c1c80f65f8": [
        "def solution():\n    train_length = 700\n    bridge_length = 900\n    speed = 400  # in meters per minute\n\n    total_distance = train_length + bridge_length\n    time = total_distance / speed  # time = distance / speed\n\n    return time\n\nans = solution()"
    ],
    "d57fcf981d694db99854d4d2d0775618": [
        "def solution():\n    # We can find the pattern of the remainders of the sequence when divided by 3\n    a = 3 % 3  # 1st term's remainder when divided by 3\n    b = 10 % 3 # 2nd term's remainder when divided by 3\n    for i in range(2, 1997):\n        # Since each term starting from the third is the sum of the two before,\n        # the remainder of a number when divided by 3 is also the sum of the remainders of the two numbers before it.\n        a, b = b, (a + b) % 3\n    return b\n\nans = solution()"
    ],
    "e97cf0638a05496c87c776dfee4ba7b6": [
        "def solution():\n    total_marks = 63\n    marks_per_correct = 8\n    marks_deducted = -3\n    total_questions = 12\n    \n    # Let x be the number of correct answers\n    # So, the number of incorrect or unanswered questions will be total_questions - x\n    # The equation modeling the scenario is:\n    # (marks_per_correct * x) + (marks_deducted * (total_questions - x)) = total_marks\n    \n    for x in range(total_questions + 1):\n        if (marks_per_correct * x) + (marks_deducted * (total_questions - x)) == total_marks:\n            return x\n\nans = solution()"
    ],
    "3147e744aa374d87a759f9e0a3b9f01c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the original number of stickers Peter had\n    x = symbols('x')\n    \n    # Sam has 40 more stickers than Peter originally\n    sam_original = x + 40\n    \n    # Sam gives 20% of his stickers to Peter\n    sam_gives = 0.20 * sam_original\n    peter_after_sam_gives = x + sam_gives\n    \n    # Peter then has his original x plus the 20% from Sam\n    # Peter gives 25% of what he now has to Sam\n    peter_gives = 0.25 * peter_after_sam_gives\n    sam_after_peter_gives = sam_original - sam_gives + peter_gives\n    \n    # The final difference is 96\n    equation = Eq(sam_after_peter_gives - peter_after_sam_gives + peter_gives, 96)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "001ad7f411fa4eb8b4910ab06fd33b1c": [
        "def solution():\n    # sum of the first 5 numbers in the sequence is 10\n    sum_first_5 = 10\n    # sum of the last 5 numbers in the sequence is 120\n    sum_last_5 = 120\n    # there are 60 numbers in the sequence\n    n = 60\n\n    # The sum of an arithmetic sequence can be calculated as S_n = (n/2) * (a_1 + a_n)\n    # where a_1 is the first term and a_n is the last term\n    # The average sum of the first and last 5 terms is equal to the average of the first and last terms in the sequence\n    avg_first_last_term = (sum_first_5 + sum_last_5) / 10\n    # The sum of all 60 numbers is then\n    total_sum = (n / 2) * (2 * avg_first_last_term)\n\n    return total_sum\n\nans = solution()"
    ],
    "8b46eeb4c87f4598815e931b7d5d7fb1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hazel_current, mom_current = symbols('hazel_current mom_current')\n\n    # In 12 years, Hazel will be 3 times her current age\n    equation1 = Eq(hazel_current + 12, 3 * hazel_current)\n    # On Hazel's 18th birthday, her mom will be 3 times Hazel's age\n    equation2 = Eq(mom_current + (18 - hazel_current), 3 * 18)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (hazel_current, mom_current))\n\n    # Hazel's current age is not required but could be calculated by solutions[hazel_current]\n    mom_current_age = solutions[mom_current]\n\n    return mom_current_age\n\nans = solution()"
    ],
    "e6c04a41ffe547dfa735b74e506279e7": [
        "def solution():\n    peter_age = 45\n    pip_age = 7\n    pit_age = 14\n    while peter_age != pip_age + pit_age:\n        peter_age += 1\n        pip_age += 1\n        pit_age += 1\n    return peter_age\n\nans = solution()"
    ],
    "2379196da153459db255aa3aea3155e9": [
        "def solution():\n    ans = 1.25 * 47 * 8\n    return ans\n\nans = solution()"
    ],
    "14a74e5e758a457ebd877eab88a12538": [
        "def solution():\n    # Use the formula: 1³+2³+3³+......+n³=(1+2+3+......+n)²\n    n = 10\n    sum_of_series = (n * (n + 1) // 2) ** 2  # Equivalent to (1+2+3+...+n)²\n\n    return sum_of_series\n\nans = solution()"
    ],
    "ffa814576b094530af15324d4a55a06c": [
        "def solution():\n    return 2616 // 6\n\nans = solution()"
    ],
    "31bc6cd2e2a24459b4a65c724b877090": [
        "def solution():\n    # According to the Pigeonhole Principle, since there are 13 different numbers,\n    # and we want consecutive numbers, drawing one card from each number will not\n    # guarantee consecutive cards. Therefore, we have to draw one more card after\n    # the 13 unique numbered ones to ensure we have consecutive numbers.\n    # We have 4 patterns (hearts, spades, diamonds and clubs), thus we need to draw\n    # at least 1 extra card after drawing one card for each pattern of each number\n    # which totals to 13 * 4 + 1.\n\n    ans = 13 * 4 + 1  # 4 patterns each with 13 numbers, plus 1 to ensure consecutive cards.\n    return ans\n\nans = solution()"
    ],
    "a85b2a0fbaee403bbf3d553375241db9": [
        "def solution():\n    return 296 // 8\n\nans = solution()"
    ],
    "9a89f94e62844db2ae26ce1b67de616f": [
        "def solution():\n    # The fifth sheet contains four page numbers\n    # If 36 is the back page, it means there are 18 sheets in total\n    # The front page of the fifth sheet will be (5 * 2) - 1 = 9\n    # The back page of the fifth sheet will be (5 * 2) = 10\n    # The facing page numbers will be 36 - 9 + 1 = 28 and 36 - 10 + 1 = 27\n\n    # Calculate sum of all page numbers on the fifth sheet\n    sum_of_pages = 9 + 10 + 27 + 28\n\n    return sum_of_pages\n\nans = solution()"
    ],
    "fac549e40da243d680e79d593cff89f9": [
        "def solution():\n    return 10 * 2\n\nans = solution()"
    ],
    "b6f89cabc4bd43e4a1af6187963a0b9f": [
        "def solution():\n    ans = (124 + 231) / 5\n    return ans\n\nans = solution()"
    ],
    "d4152b88afa849ccbb7f225bbecbf032": [
        "def solution():\n    # Set an initial value for M and the common difference\n    M = 0\n    common_difference = 1\n    \n    # Keep calculating until the correct M is found\n    found = False\n    while not found:\n        M += 1\n        remainders = [M % 7, M % 9, M % a, M % 28]\n        remainders.sort()\n        \n        if remainders[1] - remainders[0] == common_difference and \\\n           remainders[2] - remainders[1] == common_difference and \\\n           remainders[3] - remainders[2] == common_difference:\n            found = True\n    \n    return M\n\n# Example call to the function\nans = solution()"
    ],
    "d1f0df83d1604882a3431fe789a7a764": [
        "def solution():\n    # Let's denote the number of laptops by n and the original cost by c\n    # So the total cost is n * c\n    # Given: Selling price of each laptop is $2000\n    # Total selling price for all laptops is 2000 * n\n    # The initial profit is $60000, which is total selling price - total cost\n    # So, 2000 * n - n * c = 60000 ... [equation 1]\n    \n    # The cost of each laptop decreases by 1/5 of the original cost\n    # So the new cost of each laptop is c - c/5 = 4c/5\n    # Total new cost is 4c/5 * n\n    # The total profit increases by 30%, so new profit is 60000 * 1.3\n    # So, 2000 * n - 4c/5 * n = 60000 * 1.3 ... [equation 2]\n    \n    # Now let's solve the two equations for n and c\n    from sympy import symbols, Eq, solve\n    \n    n, c = symbols('n c')\n    equation1 = Eq(2000 * n - n * c, 60000)\n    equation2 = Eq(2000 * n - (4/5) * n * c, 60000 * 1.3)\n    \n    # We have two equations, we can solve them for n and c\n    solutions = solve((equation1, equation2), (n, c))\n    \n    # We need to return the number of laptops, which is n\n    return solutions[n]\n\nans = solution()"
    ],
    "9af4e0d14e574f1690bfcf5bfb24c584": [
        "def solution():\n    first_term = 48\n    last_term = 80\n    difference = 4\n\n    # Calculate number of terms in the sequence\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    # Calculate sum of the arithmetic sequence\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "a547b3e6bb76410c9882a46dc1128679": [
        "def solution():\n    # Count the digits for numbers 1 to 9 (1-digit numbers)\n    count_1_digit = 9\n    \n    # Count the digits for numbers 10 to 99 (2-digit numbers)\n    count_2_digit = (99 - 10 + 1) * 2\n    \n    # Count the digits for numbers 100 to 129 (3-digit numbers)\n    count_3_digit = (129 - 100 + 1) * 3\n    \n    # Total count of digits\n    total_digits = count_1_digit + count_2_digit + count_3_digit\n    return total_digits\n\nans = solution()"
    ],
    "dafcea06104b4591957d341d8390c6b3": [
        "def solution():\n    sugar_weight = 80\n    water_weight = 420\n    total_solution_weight = sugar_weight + water_weight\n\n    concentration = (sugar_weight / total_solution_weight) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "de19699381254d53a19e09b250810369": [
        "def solution():\n    # The difference in number of boys and girls is given by the formula\n    # diff = 4 * (n - 1), where n is the size of the square layer\n    # We need to find such n that gives a difference of 36\n    \n    # Starting guess for the size of the square (n x n)\n    # Since we need more boys than girls, n must be odd\n\n    n = 3  # We start with 3 because it's the smallest odd square greater than 1\n    diff = 36\n    total_students = 0\n    \n    while True:\n        # The number of boys on the outside layer is 4n - 4 (since we don't count corners twice)\n        boys = 4 * (n - 1)\n        \n        # Increment to check for the next layer\n        n += 2\n        \n        # Calculate girls based on the difference between boys and girls\n        girls = boys - diff\n        \n        # Add the current layer's students to the total count\n        total_students += boys + girls\n        \n        # If the girls for the current layer becomes less than or equal to 0, we stop.\n        # Since the next inner layer would contain boys.\n        if girls <= 0:\n            break\n    \n    return total_students\n\nans = solution()"
    ],
    "e0d4db42f51a486ebc92cb7153896228": [
        "def solution():\n    men1 = 3\n    days1 = 2\n    length1 = 120\n\n    men2 = 4\n    length2 = 880\n\n    work1 = men1 * days1\n    rate1 = length1 / work1\n\n    work2 = length2 / rate1\n    days2 = work2 / men2\n\n    return days2\n\nans = solution()"
    ],
    "14976163f7ed48a59ba08230a3a9fbbe": [
        "def solution():\n    total_people = 400\n    ellie_rate = 60\n    combined_weeks = 4\n    combined_rate = total_people / combined_weeks\n    gloria_rate = combined_rate - ellie_rate\n    gloria_weeks = total_people  / gloria_rate\n\n    return gloria_weeks\n\nans = solution()"
    ],
    "4fe05ec372ae4fd388877825449c2f71": [
        "def solution():\n    grams = 1756\n    kilograms = grams / 1000\n    return kilograms\n\nans = solution()"
    ],
    "5065cc90f1ca4fd59386ac472c8bfc71": [
        "def solution():\n    numerator = 2 * 15 / 5\n    return numerator\n\nans = solution()"
    ],
    "aee6713edde34c8cb3f3aae969752a2a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of books after moving.\n    books_first_shelf, books_second_shelf = symbols('books_first_shelf books_second_shelf')\n    \n    # Assume we move x books from the first shelf to the second. Then:\n    # books_first_shelf = 18 - x (since we remove x books from the first shelf)\n    # books_second_shelf = 24 + x (since we add x books to the second shelf)\n    # The second shelf must have twice as many books as the first shelf, hence:\n    # books_second_shelf = 2 * books_first_shelf\n    equation = Eq(24 + books_first_shelf, 2 * (18 - books_first_shelf))\n\n    # Solve the equation to find the number of books on the first shelf after moving x books\n    solution = solve(equation, books_first_shelf)\n\n    # Calculate the number of books to be moved from first shelf to second shelf\n    books_moved = 18 - solution[0]\n\n    return books_moved\n\nans = solution()"
    ],
    "ee3f24407cd74ec0b0589c27b4bb2f13": [
        "def solution():\n    num1 = 285 + 6/7\n    num2 = 181 + 10/11\n    num3 = 153 + 12/13\n    denom = 1/7 + 1/11 + 1/13\n\n    ans = (num1 + num2 + num3) / denom\n    return ans\n\nans = solution()"
    ],
    "7896d35343b54b5c86ea275d9e4da9f6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_pupils = symbols('total_pupils')\n\n    pupils_in_band = 5\n    pupils_neither = total_pupils * 2 / 9\n    pupils_choir = (total_pupils - pupils_in_band - pupils_neither) * 3 / 4\n\n    # Equation representing the remaining pupils after removing those in band and neither\n    equation = Eq(total_pupils - pupils_in_band - pupils_neither, pupils_choir * 4 / 3)\n    \n    # Solve the equation for the total number of pupils\n    solutions = solve(equation, total_pupils)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "9b43946bb50b4a52b1278ce86046276a": [
        "def solution():\n    time_seconds = 20  # time taken to cross the bridge in seconds\n    distance_meters = 300  # length of the bridge in meters\n\n    speed_meters_per_second = distance_meters / time_seconds\n    # Converting speed from m/s to km/h by multiplying with (3600/1000) factor\n    speed_kilometers_per_hour = speed_meters_per_second * (3600 / 1000)\n\n    return speed_kilometers_per_hour\n\nans = solution()"
    ],
    "817e9b740c9f4606b0221520b9045134": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(28 - 3 * (24 - 5 * x), 1)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "d7a25a03a50d4d6f870a401ce650e9a1": [
        "def solution():\n    # Assuming that the total number of lollipops can be expressed as 4*N + 32\n    # where N is the number of boxes in the first case.\n    # And it can also be expressed as 7*M + 3 where M is the number of boxes in the second case.\n    \n    # To find the smallest number that satisfies both conditions, we can start from the remainder when 4 lollipops per box\n    # and increment by 4 until we find a number that also gives a remainder of 3 when divided by 7.\n    \n    lollipops = 32\n    while (lollipops - 3) % 7 != 0:\n        lollipops += 4\n        \n    return lollipops\n\nans = solution()"
    ],
    "f407d2ea5de540a9874f5a1d203b573e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    long_tubes, short_tubes = symbols('long_tubes short_tubes')\n\n    equation1 = Eq(8 * long_tubes + 5 * short_tubes, 47)\n    solutions = solve((equation1,), (long_tubes, short_tubes))\n\n    return solutions[long_tubes]\n\nans = solution()"
    ],
    "d51becf0516a4eeaa5484909769ed784": [
        "def solution():\n    third_term = 8\n    ninth_term = 26\n    n = 11\n\n    # Calculate the common difference\n    difference = (ninth_term - third_term) / (9 - 3)\n\n    # Calculate the first term\n    first_term = third_term - 2 * difference\n\n    # Calculate the 11th term\n    eleventh_term = first_term + (n - 1) * difference\n\n    return eleventh_term\n\nans = solution()"
    ],
    "acf798e814284f3da1ec80f45daf1b22": [
        "def solution():\n    # Calculate the sum of cubes for the given integers while skipping certain numbers\n    cubes_sum = sum([x**3 for x in range(1, 15) if x not in {3, 6, 9, 12}])\n    return cubes_sum\n\nans = solution()"
    ],
    "71858362e80c462a97a1d69a789cf304": [
        "def solution():\n    original_price = 18.60\n    discount = 15 / 100\n    discounted_amount = original_price * discount\n    final_price = original_price - discounted_amount\n    \n    return final_price\n\nans = solution()"
    ],
    "31d498c8de6444af9466c0b067804d9a": [
        "def solution():\n    # Let x be the number Will is multiplying with 4.32\n    # The incorrect result is 432 * x\n    # The correct result is 4.32 * x\n    # According to the given information:\n    # 432 * x - 4.32 * x = 2138.4\n    # (432 - 4.32) * x = 2138.4\n    # 427.68 * x = 2138.4\n    # x = 2138.4 / 427.68\n    x = 2138.4 / 427.68\n    \n    # Now compute the true result using the correct decimal position\n    true_result = 4.32 * x\n    return true_result\n\nans = solution()"
    ],
    "bbbdd4f32eff450382ddff68d9210fd4": [
        "def solution():\n    # Let x be the initial number of Felicia's bracelets\n    janice_initial = 96\n    felicia_sold_ratio = 3/5\n    janice_bought_ratio = 2/5\n\n    # Felicia sold 3/5 of her bracelets and Janice bought 2/5 of what Felicia sold\n    # After the transaction, the ratio of Felicia's to Janice's bracelets is 5:7\n\n    # Define variables for the ratio parts\n    felicia_ratio_part = 5\n    janice_ratio_part = 7\n\n    # Suppose Felicia had 'x' bracelets initially\n    # Felicia sells (3/5)*x of her bracelets\n    # Janice buys (2/5)*(3/5)*x = (6/25)*x of Felicia's sold bracelets\n\n    # Felicia is left with:\n    # x - (3/5)*x = (2/5)*x bracelets\n    # Janice now has:\n    # 96 + (6/25)*x bracelets\n\n    # The ratio of their bracelets:\n    # ((2/5)*x) / (96 + (6/25)*x) = 5/7\n\n    # Solve for x\n    from sympy import symbols, solve, Rational\n    x = symbols('x')\n    equation = (Rational(2,5)*x) / (96 + Rational(6,25)*x) - Rational(5,7)\n\n    # Solve for the initial number of Felicia's bracelets (x)\n    initial_felicia = solve(equation, x)[0]\n\n    # Now calculate the number of bracelets that Janice bought from Felicia\n    janice_bought = (Rational(6,25) * initial_felicia).evalf()\n\n    return int(janice_bought)\n\nans = solution()"
    ],
    "bd44c92e7ad64e179de147924944ccae": [
        "def solution():\n    # Calculate the difference between each pair of numbers\n    diff1 = 2758 - 2017\n    diff2 = 3670 - 2758\n    diff3 = 3670 - 2017\n    \n    # Find the Greatest Common Divisor (GCD) of the differences\n    from math import gcd\n    gcd_1_2 = gcd(diff1, diff2)\n    gcd_all = gcd(gcd_1_2, diff3)\n    \n    # The possible values of A are the divisors of gcd_all, except A itself\n    possible_A = {i for i in range(1, gcd_all // 2 + 1) if gcd_all % i == 0}\n    possible_A.add(gcd_all)  # Include gcd_all itself\n    \n    # Calculate the sum of the possible values of A\n    ans = sum(possible_A)\n    return ans\n\nans = solution()"
    ],
    "cb369155904d41d3bbbbf4c1966b3f44": [
        "def solution():\n    ans = 9 + 99 + 999 + 9999\n    return ans\n\nans = solution()"
    ],
    "87557efca8df42a1b34010678b9a23bf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # Each boy gets 5 candies, each girl gets 3 candies, and there are 8 more girls than boys\n    equation1 = Eq(5 * boys + 3 * girls, 448)\n    equation2 = Eq(girls, boys + 8)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    total_children = solutions[boys] + solutions[girls]\n    return total_children\n\nans = solution()"
    ],
    "5a55a211033946a2b4c35af17fa8dfc6": [
        "def solution():\n    ans = 5 + 4 * 2\n    return ans\n\nans = solution()"
    ],
    "119dc81932594423a821eb0e3835d800": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the initial number of milk candies as m and fruit candies as f\n    m, f = symbols('m f', integer=True)\n\n    # Initial ratio condition: m/f = 7/9\n    initial_ratio = Eq(m/f, 7/9)\n\n    # After eating 8 milk candies, the ratio becomes: (m-8)/f = 2/3\n    new_ratio = Eq((m - 8)/f, 2/3)\n\n    # Now we solve the system of equations\n    solutions = solve((initial_ratio, new_ratio), (m, f))\n\n    return solutions[m]  # We are interested in the initial number of milk candies\n\nans = solution()"
    ],
    "708d8a95115e435f83a7c21859083e21": [
        "def solution():\n    ans = 15 - 8.36\n    return ans\n\nans = solution()"
    ],
    "40f1f703a3914f699ce57ea08f21df7e": [
        "def solution():\n    B = 1\n    while True:\n        if B % 3 == 1 and B % 5 == 2:\n            return B\n        B += 1\n\nans = solution()"
    ],
    "8370d497cc534bd1b69b748b4f2e7acf": [
        "def solution():\n    # Grandmother's age on 1st December 2008\n    grandmother_2008 = 80\n    # Mum's age on 1st December 1996\n    mum_1996 = 40\n\n    # Difference in years between 2008 and 1996\n    year_difference = 2008 - 1996\n\n    # Grandmother's age when Mum was 40\n    grandmother_when_mum_was_40 = grandmother_2008 - year_difference\n\n    # Grandmother's age when Mum was born (Mum's age was 0)\n    grandmother_when_mum_was_born = grandmother_when_mum_was_40 - mum_1996\n\n    return grandmother_when_mum_was_born\n\nans = solution()"
    ],
    "dcce40d2c5394a368e9835c3bd85ebaf": [
        "def solution():\n    count = 0\n    for i in range(4, 52):\n        count += str(i).count('3')\n        if i == 23:\n            ans = count\n    return ans\n\nans = solution()"
    ],
    "eedf0a2b13c7480981b6f0ae90e36208": [
        "def solution():\n    # Initialize variables\n    income = 2012\n    lemonade_price = 4\n    plus_price = 7\n    total_bottles = 350\n\n    # Calculate the maximum bottles of lemonade that could be sold\n    max_lemonade_sold = income // lemonade_price\n\n    # Initialize minimum bottles of \"1000 Plus\" to total bottles. This will be updated to the correct minimum.\n    min_plus_bottles = total_bottles\n\n    # Loop to find the minimum bottles of \"1000 Plus\" that could be sold\n    for lemonade_sold in range(max_lemonade_sold + 1):\n        # Lemonade sales income\n        lemonade_income = lemonade_sold * lemonade_price\n        # If lemonade_income exceeds total income, no solution for this number of lemonade bottles sold\n        if lemonade_income > income:\n            break\n        # Remaining income that must be covered by sales of \"1000 Plus\"\n        plus_income = income - lemonade_income\n        # Check if the remaining income is divisible by the price of \"1000 Plus\"\n        if plus_income % plus_price == 0:\n            plus_bottles = plus_income // plus_price\n            # Update min_plus_bottles if a lower number of \"1000 Plus\" bottles sold is found\n            if plus_bottles < min_plus_bottles:\n                min_plus_bottles = plus_bottles\n\n    return min_plus_bottles\n\nans = solution()"
    ],
    "513eb21b2999465f94c54ad7c1660b36": [
        "def solution():\n    # Calculate the number of friends\n    num_friends = 60 // 4\n\n    # Calculate the total number of apples needed if each friend asks for one more\n    total_apples_needed = num_friends * (4 + 1)\n\n    return total_apples_needed\n\nans = solution()"
    ],
    "f7fe37c32c4d45b2971f9a684a87178f": [
        "def solution():\n    # Yohan takes the maximum number of socks without getting a white pair\n    # That's the worst-case scenario where he takes all red and black socks first\n    # There are 10 red and 10 black socks\n    max_non_white_socks = 10 + 10\n    \n    # After taking all red and black socks, he needs just one more white sock to get a pair\n    # So he takes one white sock\n    white_sock_for_pair = 1\n    \n    # Total socks Yohan needs to take at most to guarantee a pair of white socks\n    # is all non-white socks plus one white sock\n    total_socks = max_non_white_socks + white_sock_for_pair\n\n    return total_socks\n\nans = solution()"
    ],
    "3bce0db903cb4b46828346019eae5cb1": [
        "def solution():\n    return 546 + 287\n\nans = solution()"
    ],
    "7c8ab5ff603c4374855b52023ed9bc79": [
        "def solution():\n    marks = [15, 19, 13, 18, 20]\n    mean_mark = sum(marks) / len(marks)\n    return mean_mark\n\nans = solution()"
    ],
    "6d772586b0a84788980ab24fb3d29532": [
        "def solution():\n    total_students = 112\n    total_groups = 24\n    # Let's denote the number of groups with 4 pupils as 'x' and with 6 pupils as 'y'.\n    # We have two equations based on the given information:\n    # x + y = total_groups (24)\n    # 4 * x + 6 * y = total_students (112)\n    \n    for x in range(total_groups + 1): \n        y = total_groups - x\n        if 4 * x + 6 * y == total_students:\n            return y  # we need to find the number of groups with 6 pupils\n\nans = solution()"
    ],
    "a04e2fb1ed1c471b8449b601924beb05": [
        "def solution():\n    # The sum of the first three numbers is 3 times the average, which is 60.\n    sum_of_first_three = 3 * 60\n    \n    # When the fourth number is added, the average becomes 90 for all four numbers.\n    # Therefore, the sum of all four numbers is 4 times the new average.\n    sum_of_all_four = 4 * 90\n    \n    # The fourth number is the difference between the sum of all four numbers and the sum of the first three numbers.\n    fourth_number = sum_of_all_four - sum_of_first_three\n    \n    return fourth_number\n\nans = solution()"
    ],
    "2766d440a8354c518fb5b8de557b59a9": [
        "def solution():\n    meters = 0.52\n    centimeters_per_meter = 100\n    cm = meters * centimeters_per_meter\n    return cm\n\nans = solution()"
    ],
    "0395b9449a6542edbdcf5b5c06f47904": [
        "def solution():\n    # Since ABC is a three-digit number and A, B, C represent different digits,\n    # A cannot be 0.\n    # We'll have to try each combination of digits from 1-9 for A,\n    # and 0-9 for B and C, checking for uniqueness and the given conditions.\n    for A in range(1, 10):\n        for B in range(10):\n            for C in range(10):\n                if len({A, B, C}) == 3:  # Check if all digits are unique\n                    ABC = 100*A + 10*B + C\n                    if A + B + C == 9:    # Sum of digits equals 9\n                        return ABC\n\nans = solution()"
    ],
    "e63cc75a785d4d938794d1691bdf1f91": [
        "def solution():\n    # Ratio of fish to rabbits in Owen's trade with Oscar\n    fish_per_rabbit = 3 / 2\n\n    # Ratio of rabbits to packs of wheat in Oscars's trade with Dennis\n    rabbits_per_wheat_pack = 3 / 4\n\n    # Calculate the ratio of fish to packs of wheat by multiplying the individual ratios\n    fish_per_wheat_pack = fish_per_rabbit * rabbits_per_wheat_pack\n\n    # Calculate how many fish Owen should give Dennis for 8 packs of wheat\n    ans = fish_per_wheat_pack * 8\n\n    return int(ans)\n\nans = solution()"
    ],
    "f16f67a593394039a3ef72a2e5b5e457": [
        "def solution():\n    total_spent = 3 * 1.60 + 2 * 0.62 + 4.50\n    change = 20 - total_spent\n    \n    return change\n\nans = solution()"
    ],
    "5b21a1a7d2744fbfa57fbc46e69a365c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let p be the original price of the purse before discount\n    p = symbols('p')\n\n    # Define the equation based on the problem statement\n    equation = Eq(0.20 * 428 + 0.28 * p, 121)\n\n    # Solve the equation to find the price of the purse before discount\n    original_price_purse = solve(equation, p)[0]\n\n    return float(original_price_purse)\n\nans = solution()"
    ],
    "fdf018bb61cc4677813a36cc14cfe619": [
        "def solution():\n    return 65 + 88\n\nans = solution()"
    ],
    "833b1df560b94f9e8b69c9356f27b429": [
        "def solution():\n    from math import factorial\n\n    def count_trailing_zeros(n):\n        zeros_count = 0\n        while n % 10 == 0:\n            zeros_count += 1\n            n //= 10\n        return zeros_count\n\n    factorial_25 = factorial(25)\n    ans = count_trailing_zeros(factorial_25)\n\n    return ans\n\nans = solution()"
    ],
    "732cda7ed4134de8b845829f981525ea": [
        "def solution():\n    # The repeating block is \"A2\", meaning every two digits will sum up to A+2.\n    # If the total of the first 20 digits is 80, then the sum of every pair is 80 / 10. \n    pair_sum = 80 // 10  # There are 10 pairs in the first 20 digits.\n\n    # Since we know each pair consists of the digits A and 2, their sum is A + 2.\n    # Therefore, pair_sum = A + 2.\n    # Solving for A gives us A = pair_sum - 2.\n    A = pair_sum - 2\n\n    return A\n\nans = solution()"
    ],
    "59cc2f9a46c248fd832ddb6e4cb5db84": [
        "def solution():\n    total_height = 25\n    climb_up = 4\n    slide_down = 1\n    # effective progress in a day\n    progress_per_day = climb_up - slide_down\n    days = 0\n    height = 0\n    \n    while True:\n        days += 1\n        height += climb_up  # the snail climbs in the day\n        if height >= total_height:  # reaches or exceeds the top\n            break\n        height -= slide_down  # slides down at night\n    return days\n\nans = solution()"
    ],
    "67da5f022f834e8d9713e38fb01fce1b": [
        "def solution():\n    dances_per_week = 2\n    weeks = 2\n    total_dances = dances_per_week * weeks\n    return total_dances\n\nans = solution()"
    ],
    "104457856ee04bf79d6b2d936f9025bb": [
        "def solution():\n    # Calculate the jogging distance from 6:30 a.m. to 7:00 a.m.\n    jogging_time = 0.5  # half an hour\n    jogging_speed = 6  # miles per hour\n    jogging_distance = jogging_speed * jogging_time\n\n    # Calculate the walking distance from 7:00 a.m. to 8:00 a.m.\n    walking_time = 1  # one hour\n    walking_speed = 5  # miles per hour\n    walking_distance = walking_speed * walking_time\n\n    # Total distance travelled\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "d54e6eab7a2b49a8afcd367d2c88a350": [
        "def solution():\n    # Let's denote the original amount of money as x.\n    # According to the problem, after spending $120 on a chair,\n    # Elvin spent 40% of the remaining money on a jacket.\n    # Finally, he is left with 30% of his original amount.\n    \n    # So we have the equation: x - 120 - 0.4 * (x - 120) = 0.3 * x\n    # Simplifying the above equation will give us the value of x\n    \n    # Let's calculate the remaining money after buying the chair\n    remaining_after_chair = lambda x: x - 120\n    \n    # Calculate the money spent on the jacket, which is 40% of the remaining money\n    spent_on_jacket = lambda x: 0.4 * remaining_after_chair(x)\n    \n    # The equation that represents the scenario after all spending\n    equation = lambda x: remaining_after_chair(x) - spent_on_jacket(x)\n    \n    # Now let's solve for x using the fact he's left with 30% of the original money\n    original_amount = lambda x: equation(x) == 0.3 * x\n    \n    # We can now use a simple loop to find the original amount of money\n    # Since the question does not provide any constraints on the money amount,\n    # we can start with 120 (the price of the chair) as the minimum possible original amount\n    \n    x = 120\n    while not original_amount(x):\n        x += 1\n    \n    return x\n\nans = solution()"
    ],
    "e2f0ace2f5554ef4a4b96194cf69005f": [
        "def solution():\n    return 398 / 4\n\nans = solution()"
    ],
    "8dfe115ec4fe4aa881b30f336c891785": [
        "from math import gcd\n\ndef solution():\n    count = 0\n    for numerator in range(1, 2012):\n        denominator = numerator + 5\n        if gcd(numerator, denominator) == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a900a568f02d4a159d7b0f8c62c4e745": [
        "from math import lcm\n\ndef solution():\n    ans = lcm(6, 10)\n    return ans\n\nans = solution()"
    ],
    "1aaf2aac3d134b9e8804dd390e239bda": [
        "def solution():\n    total_books = 35\n    layers = 4\n    books_in_most_layer = (total_books + layers - 1) // layers\n    return books_in_most_layer\n\nans = solution()"
    ],
    "f1d3495298e84267bc30b1547d7319b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # x represents the initial number of books Ahmad bought\n    x = symbols('x')\n\n    # The total price for the initial books\n    total_initial_price = 3.5 * x\n\n    # The total price for the additional books\n    total_additional_price = 2 * 6\n\n    # The new average price for all the books\n    new_average_price = 4\n\n    # Equation representing the new average price after buying 2 more books\n    equation = Eq((total_initial_price + total_additional_price) / (x + 2), new_average_price)\n\n    # Solve for the value of x\n    num_books_initial = solve(equation, x)[0]\n\n    # Total number of books is the initial amount plus the additional 2 books\n    total_books = num_books_initial + 2\n\n    return total_books\n\nans = solution()"
    ],
    "4f73e090c9d24ebf8913ba71fddf7af3": [
        "def solution():\n    count = 0\n    for i in range(1, 4):  # The hundreds place can be 1, 2, or 3\n        for j in range(0, 4):  # The tens place can be 0, 1, 2, or 3\n            for k in range(0, 4):  # The ones place can be 0, 1, 2, or 3\n                if i != j and i != k and j != k:  # All digits must be different\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "844bb71707b14ba9b438958cdcf143a8": [
        "def solution():\n    first_term = 50\n    difference = 46 - 50\n    n = 0\n    term = first_term\n    \n    while term > 0:\n        n += 1\n        term = first_term + (n - 1) * difference\n        \n    return n - 1\n\nans = solution()"
    ],
    "483d2059d96645c8a1cd0eaef152a05a": [
        "def solution():\n    max_product = 0\n    \n    for a in range(1, 31):\n        for b in range(1, 31-a):\n            c = 31 - a - b\n            product = a * b * c\n            if product > max_product:\n                max_product = product\n    \n    return max_product\n\nans = solution()"
    ],
    "79aaa41810464d378e8d61b04cee59b9": [
        "def solution():\n    return 129.35 - 0.47\n\nans = solution()"
    ],
    "cd0cb1ffbdd74527b73e0b27a88458ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq(rachel - 8, 3 * (alice - 8))\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    total_candy = solutions[rachel] + solutions[alice]\n\n    return total_candy\n\nans = solution()"
    ],
    "7673b69c12a4478ba10dd72c7cba39cc": [
        "def solution():\n    total_weight_grams = 1.2 * 1000  # convert kg to g\n    piece_weight = 30  # weight of one piece in g\n    \n    number_of_pieces = total_weight_grams / piece_weight\n    return int(number_of_pieces)\n\nans = solution()"
    ],
    "4ecf79f778ae40b686861b81b759f60e": [
        "def solution():\n    # Unit conversion: 1 liter = 1.05668821 quarts\n    liters_to_quarts = 2.5 * 1.05668821\n    cup_capacity = 0.5\n    \n    number_of_cups = liters_to_quarts / cup_capacity\n    \n    return round(number_of_cups)\n\nans = solution()"
    ],
    "6d6e8256edb347ee9e3d4d5dfa3a712c": [
        "def solution():\n    ans = 748 - 189\n    return ans\n\nans = solution()"
    ],
    "a3975ec5c3e042a19cc5b99120625ee9": [
        "def solution():\n    # The given values for B and D\n    B = 2\n    D = 0\n\n    # Iterate through possible values for A, C, E, and F\n    for A in range(10):\n        for C in range(10):\n            for E in range(10):\n                for F in range(1, 10): # F can't be 0 as it is the first digit of a four-digit number\n                    if len(set([A, B, C, D, E, F])) == 6: # All digits must be different\n                        ABCDEF = A*100000 + B*10000 + C*1000 + D*100 + E*10 + F\n                        EFABCD = E*100000 + F*10000 + A*1000 + B*100 + C*10 + D\n                        # Check if the equation holds\n                        if 5 * ABCDEF == 6 * EFABCD:\n                            return A*1000 + C*100 + E*10 + F  # The four-digit number FACE\n\nans = solution()"
    ],
    "4845459ce472463eab28814467f9c4ae": [
        "def solution():\n    ans = 12.3 + 4.9\n    return ans\n\nans = solution()"
    ],
    "3a7e7f1ca5674fc894e02d029b5853cd": [
        "def solution():\n    return 18 // 3\n\nans = solution()"
    ],
    "bd4a58a9e1f346c2a02141211d17aad3": [
        "def solution():\n    # Time spent jogging from 6:30 a.m. to 7:30 a.m. is 1 hour\n    jogging_time = 1 # hour\n    \n    # Time spent walking from 7:30 a.m. to 9:30 a.m. is 2 hours\n    walking_time = 2 # hour\n    \n    # Star's speed while jogging\n    jogging_speed = 6 # miles per hour\n    \n    # Star's speed while walking\n    walking_speed = 5 # miles per hour\n    \n    # Distance covered while jogging\n    jogging_distance = jogging_time * jogging_speed\n    \n    # Distance covered while walking\n    walking_distance = walking_time * walking_speed\n    \n    # Total distance traveled\n    total_distance = jogging_distance + walking_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "f9418bd52e404cb0ba8323619f7e16d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angel, belle = symbols('angel belle')\n\n    # Initially, Angel had 5/6 as many sweet wrappers as Belle.\n    equation1 = Eq(angel, 5/6 * belle)\n    \n    # After Angel threw away 58 sweet wrappers, she had 75% as many sweet wrappers as Belle.\n    equation2 = Eq(angel - 58, 0.75 * belle)\n\n    # Solve the system of equations for Belle.\n    solutions = solve((equation1, equation2), (angel, belle))\n\n    return solutions[belle]\n\nans = solution()"
    ],
    "c6c173915a8044e697dc662694645197": [
        "def solution():\n    squares = 45\n    circles = squares / 3\n    triangles = squares * 2\n\n    total_shapes = squares + circles + triangles\n\n    return int(total_shapes)\n\nans = solution()"
    ],
    "1806328c303e465aae52d08571416744": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dad_current, son_current = symbols('dad_current son_current')\n\n    equation1 = Eq((dad_current - 6), 5 * (son_current - 6))\n    equation2 = Eq(dad_current + son_current, 78)\n\n    solutions = solve((equation1, equation2), (dad_current, son_current))\n\n    return solutions[dad_current]\n\nans = solution()"
    ],
    "37a3bced5a4e423d82496aac9bccd711": [
        "def solution():\n    result = (4 / 9) * 36\n    return result\n\nans = solution()"
    ],
    "a9881864fa194fbdb56c0ce044f7e9a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    children = symbols('children')\n    \n    # Equation: amount = children * 70p - £20\n    # Equation: amount = children * 60p + £2.10\n    # Equalizing both equations for 'amount' and then solving for 'children'\n    equation = Eq(children * 70 - 20, children * 60 + 210)\n    \n    solution = solve(equation, children)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b83cbcd4901c48eabd1bebc1c3bd0eab": [
        "def solution():\n    salary = 3500\n    remit_percentage = 20 / 100\n    bank_charge_percentage = 0.5 / 100\n\n    remit_amount = salary * remit_percentage\n    bank_charge = remit_amount * bank_charge_percentage\n    \n    return bank_charge\n\nans = solution()"
    ],
    "eeacd0848f0c4bb8b1df25d1292193a6": [
        "def solution():\n    count = 0\n    for vase1 in range(1, 10):\n        for vase2 in range(1, 10):\n            for vase3 in range(1, 10):\n                if vase1 + vase2 + vase3 == 10 and len(set([vase1, vase2, vase3])) == 3:\n                    count += 1\n    return count // 6  # We divide by 6 to account for the permutations of the vases\n\nans = solution()"
    ],
    "0208115272b747ed9f455438107597e9": [
        "def solution():\n    account_balance = -76.20\n    payment = 120.75\n    new_balance = account_balance + payment\n    return new_balance\n\nans = solution()"
    ],
    "f6c1628be8644402bd9f85c22ea356d8": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime(2023, 3, 2)\n    end_date = datetime(2023, 4, 15)\n\n    delta = end_date - start_date\n\n    return delta.days + 1\n\nans = solution()"
    ],
    "29b56d3088d1435786656e1ffbb6008d": [
        "def solution():\n    for i in range(1, 10000):\n        original_number = i * 10 + 9  # Add 9 to units column\n        new_number = int(str(9) + str(i))  # Add 9 to the left hand end\n        if new_number == 4 * original_number:\n            return original_number\n\nans = solution()"
    ],
    "ec35840ccd1248e5a6d29e1104245ccc": [
        "from math import factorial\n\ndef solution():\n    # Eddie is on the left end, so there's only 1 way to place Eddie\n    # Avril is next to Eddie, so Avril can either be second from left or second from right\n    # There are 2 ways to place Avril next to Eddie\n    ways_to_place_Avril = 2\n    \n    # The remaining 5 students can be arranged in any order\n    ways_to_arrange_others = factorial(5)\n    \n    # The total number of ways is the product of the individual possibilities\n    total_ways = ways_to_place_Avril * ways_to_arrange_others\n    \n    return total_ways\n\nans = solution()"
    ],
    "eb53e414158c466caeef1968156633e7": [
        "def solution():\n    # To be sure to get a matching pair, Dilly can pick one glove from each type (one blue, one green) \n    # and then keep picking the most represented color until she gets a pair.\n    # The worst-case scenario would be picking all gloves of one color without getting a pair.\n    # That means picking all the left gloves or all the right gloves before getting one matching pair.\n\n    # Number of left-hand gloves (1 blue, 2 green)\n    left_gloves = 1 + 2\n    # Number of right-hand gloves (3 blue, 4 green)\n    right_gloves = 3 + 4\n\n    # Pick one from each to guarantee we have at least one of each color\n    picked_gloves = 2\n\n    # In the worst case, we have to pick all remaining gloves from the most numerous side (right-hand)\n    # before we find a matching pair (since we might keep picking alternate colors).\n    # Then just add one more to finally get a pair.\n\n    additional_gloves_needed = max(left_gloves, right_gloves) + 1\n\n    # Total gloves picked to ensure a matching pair\n    total_gloves = picked_gloves + additional_gloves_needed\n\n    return total_gloves\n\nans = solution()"
    ],
    "3693bdc4f96c495abe74ef6590148d91": [
        "def solution():\n    original_price = 200\n    increase_percentage = 45 / 100\n    increased_amount = original_price * increase_percentage\n    new_price = original_price + increased_amount\n\n    return new_price\n\nans = solution()"
    ],
    "a7dc9f6214394b39a9a7494116ffb8e3": [
        "def solution():\n    # The known numbers\n    known_numbers = [9, 7, 5, 4, 1, 8, 8]\n    # Number of known numbers\n    known_count = len(known_numbers)\n    # The given mean\n    mean = 6\n    # Total number of values \n    total_numbers = known_count + 1 # +1 for the missing number\n    # Total sum of all values to achieve the mean\n    total_sum = mean * total_numbers\n    # Sum of the known values\n    sum_known_numbers = sum(known_numbers)\n    # Finding the missing number\n    missing_number = total_sum - sum_known_numbers\n    \n    return missing_number\n\nans = solution()"
    ],
    "dac30729f20b435e955d54823c225c8a": [
        "def solution():\n    # Initial interval and total circumference\n    initial_interval = 3\n    circumference = 300\n    \n    # Holes dug with initial interval\n    holes_dug_initially = 30\n    \n    # Remaining circumference after 30 holes\n    remaining_circumference = circumference - holes_dug_initially * initial_interval\n    \n    # New interval\n    new_interval = 5\n    \n    # Calculate number of additional holes needed\n    additional_holes = remaining_circumference // new_interval\n    \n    # If there is any remaining distance that is not enough for a full interval\n    # we need to dig one more hole\n    if remaining_circumference % new_interval > 0:\n        additional_holes += 1\n    \n    return additional_holes\n\nans = solution()"
    ],
    "a9d1e1b3a6ff495da1992840b560d4ec": [
        "def solution():\n    # Define a function to calculate the number of ways to reach a certain step\n    def ways_to_step(n):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        else:\n            return ways_to_step(n - 1) + ways_to_step(n - 2)\n\n    # Ways to reach step 5\n    ways_to_5 = ways_to_step(5)\n\n    # Ways to reach step 10 from step 5\n    ways_from_5_to_10 = ways_to_step(10 - 5)\n\n    # The total number of ways to reach step 10 including step 5\n    total_ways = ways_to_5 * ways_from_5_to_10\n\n    return total_ways\n\nans = solution()"
    ],
    "969bbc016ec64147ba5857f77302bf8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq((rachel - 8) / 3, alice - 8)\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    total_sweets = solutions[rachel] + solutions[alice]\n\n    return total_sweets\n\nans = solution()"
    ],
    "752173f5003b4bd6abe560d6fd64f3ea": [
        "def solution():\n    pasta_choices = 2\n    sauce_choices = 3\n    topping_choices = 2\n\n    total_combinations = pasta_choices * sauce_choices * topping_choices\n\n    return total_combinations\n\nans = solution()"
    ],
    "55e306d2ed6b464bba4d3a62d5c153a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol\n    x = symbols('x')\n\n    # Equation: (x + 3) / 4 = 12\n    equation = Eq((x + 3) / 4, 12)\n    \n    # Solve the equation for x\n    solution = solve(equation, x)\n    \n    # We only expect one solution since it is a linear equation\n    return solution[0]\n\nans = solution()"
    ],
    "25a9b81e1f254a22ba8254c18f4094b6": [
        "def solution():\n    ans = sum(i * (16-i) for i in range(1, 16))\n    return ans\n\nans = solution()"
    ],
    "d53e348d27d24f5f894e4c70ba210f90": [
        "def solution():\n    cookies = 1\n    while True:\n        if cookies % 3 == 1 and cookies % 4 == 3 and cookies % 5 == 4:\n            return cookies\n        cookies += 1\n    \nans = solution()"
    ],
    "5fe9f334c8c54820a5b563a6ccd139b0": [
        "def solution():\n    erased_sum = 0\n    for page_number in range(1, 51):\n        if '3' in str(page_number):\n            erased_sum += page_number\n    return erased_sum\n\nans = solution()"
    ],
    "2553265bfbbf4a7aaae766e5e726bdde": [
        "def solution():\n    ans = 38 + (56 / 7) * 4\n    return ans\n\nans = solution()"
    ],
    "7a4bff3e5801439598b5006a37f9e671": [
        "def solution():\n    # We know that multiplication has a higher precedence than addition and subtraction.\n    # To maximize the result, we want to maximize the product. Therefore, we should \n    # place the brackets around the '5 * 5' to ensure this multiplication is prioritized.\n    # However, we can add brackets to include one of the additions with the '5' either \n    # the '15 + 5' or '5 + 15'. Including the subtraction would reduce the overall result.\n    # Between '15 + 5 * 5' and '5 * 5 + 15', choosing '(15 + 5) * (5 + 15)' gives the maximum product,\n    # as it not only ensures the multiplication is done first but also maximizes the sum that is multiplied.\n\n    ans = (15 + 5) * (5 + 15) - 6 + 7\n    return ans\n\nans = solution()"
    ],
    "9ec6921203444761a39b2c67e85f0e88": [
        "def solution():\n    total_digits = 792\n    digits = 0\n    pages = 0\n    \n    while digits < total_digits:\n        pages += 1\n        digits += len(str(pages))\n        \n    return pages\n\nans = solution()"
    ],
    "a8c6a94a28e9428ab4b13cce74354488": [
        "def solution():\n    ivan_total = 80 * 5\n    billy_total = 89 * 4\n    billy_final_average = 80 + 10\n    billy_needed_score = (billy_final_average * 5) - billy_total\n\n    return billy_needed_score\n\nans = solution()"
    ],
    "50d48bd4a4534e6794fdff42085da5c9": [
        "import math\n\ndef solution():\n    total_length = 305\n    pipe_length = 5\n\n    num_pipes = math.ceil(total_length / pipe_length)\n\n    return num_pipes\n\nans = solution()"
    ],
    "6580c0b5f26f44f8b40aa50046f59348": [
        "def solution():\n    # We only consider pairs (x, 1000-x) for x from 1 to 1000/2 since\n    # when x is greater than 1000/2, it would create pairs that were\n    # already considered (x, 1000-x) would become (1000-x, x).\n    # The number of ways to add two whole numbers to get 1000 is half the range from 1 to 1000,\n    # because for every number x, there is a corresponding number 1000-x.\n    # We must also consider the pair (500, 500) hence we add 1.\n    \n    num_ways = (1000 // 2) + 1\n    return num_ways\n\nans = solution()"
    ],
    "649064d7c05f4454a41370190bf8d34e": [
        "def solution():\n    # Given are the 7th, 8th, and 9th terms of the sequence\n    term_7 = 39\n    term_8 = 44\n    term_9 = 49\n\n    # Difference between consecutive terms\n    difference = term_8 - term_7\n\n    # Find the first term using the 7th term and the common difference\n    first_term = term_7 - (7 - 1) * difference\n\n    # Calculate the 100th term\n    term_100 = first_term + (100 - 1) * difference\n\n    return term_100\n\nans = solution()"
    ],
    "a1e89dc194cd4d63832576ee3cf6e989": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 1260\n    factors = factorint(1260)\n    # Create a dictionary where the keys are the factors and the values are their powers needed to make a square\n    required_powers = {factor: (2 - power % 2) % 2 for factor, power in factors.items()}\n\n    # Calculate m by multiplying the factors raised to the required power\n    m = 1\n    for factor, required_power in required_powers.items():\n        m *= factor ** required_power\n\n    return m\n\nans = solution()"
    ],
    "689c63a78be543f190535ba4297790fc": [
        "def solution():\n    peaches = 45\n    apples = 5 + 2 * peaches\n    return apples\n\nans = solution()"
    ],
    "8690a8a142c04f6691c64b0d4fb396ae": [
        "def solution():\n    for i in range(1, 28):\n        if (i % 4 == 3) and (i % 7 == 3):\n            return i % 28\n\nans = solution()"
    ],
    "c736e99075ea4aa78054fd8167197424": [
        "def solution():\n    # The least common multiple of 8 and 11\n    lcm = 8 * 11\n\n    # Iterate through all two-digit numbers to find the correct number\n    for number in range(10, 100):\n        if number % 8 == 6 and number % 11 == 6:\n            return number\n\nans = solution()"
    ],
    "b61ef7925dd94c3fb08a4830a036e4a4": [
        "def solution():\n    base = 9\n    # The ones digit in the power of 9 cycles every 2: 9^1 = 9, 9^2 = 81 (ones digit 1), 9^3 = 729 (ones digit 9), 9^4 = 6561 (ones digit 1), and so on...\n    power_cycle = [9, 1]\n    exponent = 99\n\n    # Since the cycle is of length 2, find the position in the cycle for 9^99\n    position_in_cycle = exponent % len(power_cycle)\n\n    # The ones digit is the one in the cycle position computed above\n    ones_digit = power_cycle[position_in_cycle - 1]  # -1 because list index starts from 0\n    \n    return ones_digit\n\nans = solution()"
    ],
    "ada1b1b89cec47f8849cd2d017a8b183": [
        "def solution():\n    students = 40\n    boat_capacity = 7\n    boats_needed = -(-students // boat_capacity) # Ceiling division to get the minimum number of boats needed\n\n    return boats_needed\n\nans = solution()"
    ],
    "3accd80c3de74ff4b09605882d0d3036": [
        "def solution():\n    table_price = 151.25\n    chair_price = 24.15\n    total_spent = table_price + chair_price\n    return total_spent\n\nans = solution()"
    ],
    "9521e8915fce4c6990100988ef474bdb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total value of the five other ponies\n    x = symbols('x')\n    \n    # Initial average value of the ponies in the small stable (with Rein Beau)\n    initial_small_avg = (x + 250000) / 3 \n    \n    # Initial average value of the ponies in the large stable\n    initial_large_avg = x / 3\n    \n    # After Rein Beau moves to the large stable, the average values rise by £10000 each\n    new_small_avg = x / 2\n    new_large_avg = (x + 250000) / 4\n    \n    # Set up the equations based on the average value change\n    equation1 = Eq(new_small_avg, initial_small_avg + 10000)\n    equation2 = Eq(new_large_avg, initial_large_avg + 10000)\n    \n    # Solve the simultaneous equations\n    solution = solve((equation1, equation2), (x))\n    \n    # Total value is x plus the value of Rein Beau\n    total_value = solution[x] + 250000\n\n    return total_value\n\nans = solution()"
    ],
    "dff026a0fb2549369d7be7c6aa7adf6b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for month and the day of birth\n    month, day = symbols('month day')\n\n    # given result\n    result = 1234\n\n    # Translate the calculation process into an equation\n    equation = Eq(50 * (4 * month + 1) + 2*day - 50, result)\n\n    # Solve the equation for month and day\n    solutions = solve(equation, (month, day))\n\n    # Ensure that the solutions are valid dates\n    valid_solutions = [(m, d) for m, d in solutions if 1 <= m <= 12 and 1 <= d <= 31]\n\n    return valid_solutions[0] if valid_solutions else None\n\nans = solution()"
    ],
    "20db318a830540dea5738356c974b264": [
        "def solution():\n    stickers_with_animals = 38\n    stickers_with_fruits = 14\n    stickers_given_away = 9\n    remaining_stickers = (stickers_with_animals + stickers_with_fruits) - stickers_given_away\n    return remaining_stickers\n\nans = solution()"
    ],
    "5c4cd1d2ec4b44978363bea24ebfa91c": [
        "def solution():\n    return 2**2015 % 3\n\nans = solution()"
    ],
    "3baa88503f344e83b1afe7aee1dc88ea": [
        "from math import factorial\n\ndef solution():\n    # Treat the group of 4 kids who want to stand together as one unit\n    total_units = 5\n    # Calculate the number of arrangements for these 5 units\n    unit_permutations = factorial(total_units)\n    \n    # Calculate the number of arrangements for the 4 kids within their group\n    within_group_permutations = factorial(4)\n    \n    # The final answer is the product of unit_permutations and within_group_permutations\n    ans = unit_permutations * within_group_permutations\n    return ans\n\nans = solution()"
    ],
    "789c72c81c1f4343a6331f9136346c34": [
        "def solution():\n    ans = 64 * 42\n    return ans\n\nans = solution()"
    ],
    "3a2cd4abff9642379247f914750ea56d": [
        "def solution():\n    sugar = 7\n    water = 21\n    total_mixture = sugar + water\n    concentration = (sugar / total_mixture) * 100\n    return concentration\n\nans = solution()"
    ],
    "8161131c45e24fd3b0153fe5037c7c3d": [
        "def solution():\n    # Since the numbers are consecutive, we can represent them as x, x+1, x+2.\n    # Their sum is given as x + (x+1) + (x+2) = 60.\n    # Simplifying this, we have 3x + 3 = 60 => 3x = 57 => x = 19.\n    # The largest of the three numbers is thus x+2, which is 19+2.\n    largest_number = 19 + 2\n    \n    return largest_number\n\nans = solution()"
    ],
    "a78fc203de2e495b9c3e288ffa2f20f2": [
        "def solution():\n    # Let g represent the number of gold medals won\n    # Let s represent the number of silver medals won\n    # We have two equations based on the problem statement:\n    # 5g + 4s = 331 (Total points awarded)\n    # g + s = 80 (Total number of medals)\n\n    # We can solve the above equations for g and s\n    # g + s = 80 => s = 80 - g\n    # Substituting s in the 1st equation:\n    # 5g + 4(80 - g) = 331\n    # 5g + 320 - 4g = 331\n    # g = 331 - 320\n    # g = 11\n\n    g = 331 - 320  # Number of gold medals won\n    return g\n\nans = solution()"
    ],
    "ffc0cb9420c84ae1a80072d5874cfa79": [
        "def solution():\n    lamb_price_per_kg = 8.70\n    beef_price_per_kg = 9.40\n    lamb_weight_kg = 7\n    beef_weight_kg = 30\n\n    total_cost = (lamb_price_per_kg * lamb_weight_kg) + (beef_price_per_kg * beef_weight_kg)\n    return total_cost\n\nans = solution()"
    ],
    "5bd73885b66a40709b62ae02cee893ef": [
        "def solution():\n    ans = 176 / 8\n    return ans\n\nans = solution()"
    ],
    "a37239e1c2af4896b905775df4d04faf": [
        "def solution():\n    return 234 + 578\n\nans = solution()"
    ],
    "d02d6991f9044e2cac9926170d76efbe": [
        "def solution():\n    # Number of women at the basketball match\n    women = 80\n    # Fraction of the spectators represented by women\n    fraction_women = 1 - (1/3) - (5/8)\n    # Total number of spectators at the basketball match\n    total_spectators = women / fraction_women\n    \n    return int(total_spectators)\n\nans = solution()"
    ],
    "01d43a1f75294754a6d7791646d4bb6e": [
        "def solution():\n    # Assuming ★ operation follows a pattern based on the examples provided,\n    # and the operation is commutative for the second and third example.\n    # We can deduce that a★b = a * b + a - b when a > b and a when a <= b\n    # Now let's calculate 11★10\n\n    a = 11\n    b = 10\n\n    if a > b:\n        result = a * b + a - b\n    else:\n        result = a\n    \n    return result\n\nans = solution()"
    ],
    "05e806ec585f447fac70a1de0f7fafd7": [
        "def solution():\n    elephant_pos_lr = 10  # elephant position from left to right\n    rabbit_pos_rl = 9  # rabbit position from right to left\n    dolls_between = 5   # dolls between rabbit and elephant\n\n    total_dolls = elephant_pos_lr + rabbit_pos_rl + dolls_between - 1\n\n    return total_dolls\n\nans = solution()"
    ],
    "533391b7910c4d72b88782719e955c60": [
        "def solution():\n    result = 0.4 * (11/52 / (2 + 3/4) * (4.3 - 1.8)) * 26\n    return result\n\nans = solution()"
    ],
    "8c65dcb55d104655a4964ef2003670c8": [
        "def solution():\n    boys_more_than_girls = 32\n    total_students = 0\n    layer = 0\n    while True:\n        boys = (layer * 2 + 1) ** 2\n        girls = (layer * 2) ** 2\n        if boys - girls == boys_more_than_girls:\n            total_students = boys + girls\n            break\n        layer += 1\n    return total_students\n\nans = solution()"
    ],
    "4e8d72ffdc694d47a6676b0e8d8108c7": [
        "def solution():\n    from sympy import primerange\n    \n    primes_sum = sum(primerange(50, 61))\n    \n    return primes_sum\n\nans = solution()"
    ],
    "be6d4037b22d46cb906e9ec47cc6b7e7": [
        "def solution():\n    # Given terms in the sequence\n    a10 = 23  # The 10th term\n    a15 = 38  # The 15th term\n\n    # Calculate the common difference\n    common_difference = (a15 - a10) // (15 - 10)\n\n    # Calculate the first term using the 10th term\n    a1 = a10 - 9 * common_difference\n\n    # Calculate the 102nd term\n    a102 = a1 + 101 * common_difference\n    \n    return a102\n\nans = solution()"
    ],
    "e35edf1fb63a4e5880945617f5b1aa9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r be the original number of roses, d be the original number of daisies\n    r, d = symbols('r d')\n\n    # Given that the sum of roses and daisies is 300\n    equation1 = Eq(r + d, 300)\n\n    # The planter plants the same number of roses and daisies every month\n    # Let x be the number of roses and daisies planted every month\n    # After a few months, there will be 280 roses and 180 daisies\n    # So r + months * x = 280 and d + months * x = 180\n    # We know that r - d = 280 - 180 = 100\n    equation2 = Eq(r - d, 100)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (r, d))\n\n    return solutions[r]\n\nans = solution()"
    ],
    "16e66be3bead4705bfdef4b05bca2651": [
        "def solution():\n    total_books = 3358\n    english_books = 2047\n    chinese_books_and_comics = total_books - english_books\n    # Let the number of comics be x, then the number of Chinese books is 2x\n    # So, we have x + 2x = chinese_books_and_comics\n    # 3x = chinese_books_and_comics\n    comics = chinese_books_and_comics // 3\n    return comics\n\nans = solution()"
    ],
    "a01cc16fe4b240daacb5d33d3e822ab6": [
        "def solution():\n    ans = 8.002 + 10.421\n    return ans\n\nans = solution()"
    ],
    "ba03d5e5fb8f453c9e98a6881e4d689b": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    coffee_litres = 6\n\n    total_ratio = coffee_ratio + milk_ratio\n    total_litres = (coffee_litres / coffee_ratio) * total_ratio\n\n    return total_litres\n\nans = solution()"
    ],
    "8945cbc7b9b04405ae4a89f7f6240bbe": [
        "def solution():\n    accurate_shots = 6\n    missed_shots = 4\n    score_per_accurate_shot = 5\n\n    total_score = accurate_shots * score_per_accurate_shot\n    total_shots = accurate_shots + missed_shots\n\n    average_score = total_score / total_shots\n\n    return average_score\n\nans = solution()"
    ],
    "f51701360c30428284abf7311cea43d8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the rate at which a master completes the work per day\n    # Let y be the rate at which an apprentice completes the work per day\n    x, y = symbols('x y')\n\n    # Formulate the equations based on the problem statement\n    # 1 master (x) and 3 apprentices (3y) complete the work in 4 days\n    equation1 = Eq(4 * (x + 3*y), 1)\n\n    # 2 masters (2x) and 1 apprentice (y) complete the work in 3 days\n    equation2 = Eq(3 * (2*x + y), 1)\n\n    # Solve the equations to find the rate of work for master and apprentice\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Calculate how long it takes for 1 apprentice to complete the work\n    # Work = rate * time\n    # 1 = y * time\n    time_apprentice_alone = 1 / solutions[y]\n\n    return time_apprentice_alone\n\nans = solution()"
    ],
    "70d30636843c42d0a9438f05f8dc9d7c": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('0')\n    return count\n\nans = solution()"
    ],
    "d3338ec2774341618a2a54e2dd8271c5": [
        "def solution():\n    # Start with the minimum number of apples for each child, which is 1.\n    # Then, we need to find the least number of apples that the child with the most \n    # can get given that each child gets a different number of apples.\n\n    # Minimum number of apples each child can get\n    min_apples = [1, 2, 3, 4, 5, 6, 7, 8]  \n    remaining_apples = 50 - sum(min_apples)  # Calculate remaining apples after giving each child a different amount\n\n    # Add remaining apples to the last child (who will have the most)\n    # to find the least number of apples he can get.\n    least_apples_most_child = min_apples[-1] + remaining_apples\n    \n    return least_apples_most_child\n\nans = solution()"
    ],
    "9bb2eab82c5d477485d34c73db23335d": [
        "def solution():\n    from fractions import Fraction\n\n    ans = (Fraction(1, 30) + Fraction(1, 6)) / Fraction(2, 25) + (2 - Fraction(2, 3)) / Fraction(8, 3)\n    return ans\n\nans = solution()"
    ],
    "12c9cf652a084a0780859470b77f7abb": [
        "def solution():\n    # The partition of a number is the number of ways it can be expressed as the sum of positive integers.\n    # p(n) is the partition function for the number n.\n    # The following code uses a dynamic programming approach to find the partitions of the number 8\n    # We initialize a list to store the counts of partitions for each number up to 8\n    # The base case is p(0) = 1, there is one way to partition zero (using no numbers).\n    \n    n = 8\n    partitions = [0] * (n + 1)  # Create a list to store partition counts\n    partitions[0] = 1  # Base case\n\n    # Fill the partitions array\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            partitions[j] += partitions[j - i]\n    \n    # Since we are interested in splitting the number into two or more parts,\n    # we have to subtract the case where the number is not split, which is 1.\n    ans = partitions[n] - 1  # Exclude the case where 8 is not split\n\n    return ans\n\nans = solution()"
    ],
    "25875cdc332046b7b367fa4d85e5897d": [
        "def solution():\n    total_cost = 11.4\n    weight_kg = 0.6\n    cost_per_kg = total_cost / weight_kg\n    return cost_per_kg\n\nans = solution()"
    ],
    "8e22c76c78f342539459fe92d4c4cf17": [
        "def solution():\n    eggs = 158\n    box_capacity = 12\n    \n    boxes_needed = (eggs + box_capacity - 1) // box_capacity\n    \n    return boxes_needed\n\nans = solution()"
    ],
    "25880b2e8da54b31803560072e23ded7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, orange = symbols('apple orange')\n\n    equation1 = Eq(3 * apple + 5 * orange, 270)\n    equation2 = Eq(3 * apple + 7 * orange, 342)\n\n    solutions = solve((equation1, equation2), (apple, orange))\n\n    return solutions[orange]\n\nans = solution()"
    ],
    "f1b1106045274f7da63ef3c891f87c34": [
        "def solution():\n    train_length = 253\n    tunnel_length = 669\n    speed = 104\n    \n    total_distance = train_length + tunnel_length\n    time = total_distance / speed\n    \n    return time\n\nans = solution()"
    ],
    "397ebb0d5b224df59aad1f5b774838fd": [
        "def solution():\n    total_men = 40\n    bow_ties = 18\n    spectacles = 23\n\n    minimum_wearing_both = bow_ties + spectacles - total_men\n\n    max_not_wearing_either = total_men - minimum_wearing_both\n\n    return max_not_wearing_either\n\nans = solution()"
    ],
    "adb62673a17442e2b006b7f5afbcd666": [
        "def solution():\n    ans = -7 - 4\n    return ans\n\nans = solution()"
    ],
    "457957b559d5468b8aeb74e2ef585f75": [
        "def solution():\n    base_amount = 350\n    first_percentage = 20 / 100\n    second_percentage = 50 / 100\n\n    ans = base_amount * first_percentage * second_percentage\n    return ans\n\nans = solution()"
    ],
    "96b12e33af8a4a438cc3968e7b3f70d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the number of marbles of each color\n    blue, red, green = symbols('blue red green')\n    \n    # Create the equations based on the problem statement\n    equation1 = Eq(red, blue + 25)      # red is 25 marbles more than blue\n    equation2 = Eq(green, red + 32)     # green is 32 marbles more than red\n    equation3 = Eq(blue + red + green, 112)  # total number of marbles is 112\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (blue, red, green))\n    \n    # Return the number of blue marbles\n    return solutions[blue]\n\n# Get the answer by calling the function\nans = solution()"
    ],
    "d23d120cfeb64135ab69663205810fbe": [
        "def solution():\n    result = (1/3) * 414\n    return result\n\nans = solution()"
    ],
    "7604f69468c6421ebdd1ba850cd8b42d": [
        "def solution():\n    # Since each child must get at least 1 apple and no two children can have the same number of apples,\n    # we will start by giving each child one apple and then distribute the remaining apples in order to maximize\n    # the number that the child with the most apples can receive.\n\n    # Start by giving each child one apple.\n    apples = 19 - 5\n    \n    # Now sort the remaining apples in descending order to ensure the one who gets the most receives the most possible\n    child_apples = [0] * 5\n    for i in range(5):\n        child_apples[i] = i + 1\n    \n    # Distribute the remaining apples\n    while apples > 0:\n        for i in range(4, -1, -1):\n            if apples <= 0:\n                break\n            child_apples[i] += 1\n            apples -= 1\n    \n    # The child with the most apples\n    max_apples = max(child_apples)\n    return max_apples\n\nans = solution()"
    ],
    "6bd2a5cd9d044be0ba73d47aa5238bbd": [
        "def solution():\n    import math\n    # Treat Ali and Bala as one entity since they must stand together.\n    # There are then 4 \"entities\": {Ali&Bala}, Charles, Dan, Ella\n    # Dan is always on the furthest left, so we need to arrange the remaining 3 \"entities\" \n    # which can be done in 3! ways.\n    arrangements_without_considering_positions_of_Ali_and_Bala = math.factorial(3)\n    \n    # Within the {Ali&Bala} entity, Ali and Bala can switch places, which gives us 2! more arrangements.\n    arrangements_of_Ali_and_Bala = math.factorial(2)\n    \n    # Multiply the arrangements of the entities with the arrangements of Ali and Bala within their entity.\n    total_arrangements = arrangements_without_considering_positions_of_Ali_and_Bala * arrangements_of_Ali_and_Bala\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "13ec2dec449b48e5b1f5949021f5319a": [
        "def solution():\n    # Given ratios\n    fishes_for_rabbits = 3 / 2  # Owen gives 3 fishes for 2 rabbits\n    rabbits_for_wheat = 3 / 4   # Oscar gives 3 rabbits for 4 packs of wheat\n\n    # Calculate the ratio of fishes to packs of wheat by multiplying the two ratios\n    fishes_for_wheat = fishes_for_rabbits * rabbits_for_wheat\n    # Ratio is now fishes per 1 pack of wheat\n    \n    # Calculate how many fishes Owen should give for 8 packs of wheat\n    fishes_for_8_wheat = fishes_for_wheat * 8\n\n    return fishes_for_8_wheat\n\nans = solution()"
    ],
    "bac3e6b470ff4843842320df6d600e95": [
        "def solution():\n    import math\n    ans = math.gcd(16, 36)\n    return ans\n\nans = solution()"
    ],
    "fb1c97df146541bebe3162f2e72c1cc0": [
        "def solution():\n    # Initialize the number of digits counter.\n    num_digits = 0\n    \n    # Pages 1-9 have 1 digit, 10-99 have 2 digits, 100-140 have 3 digits.\n    # Calculate the total number of digits used in each section.\n\n    # From 1 to 9, there are 9 pages with 1 digit.\n    num_digits += 1 * 9\n    \n    # From 10 to 99, there are 90 pages with 2 digits each.\n    num_digits += 2 * 90\n    \n    # From 100 to 140, there are 41 pages with 3 digits each.\n    num_digits += 3 * (140 - 99)\n     \n    return num_digits\n\nans = solution()"
    ],
    "6b79f6ee87a44493b182c62048b92e66": [
        "def solution():\n    # Let the correct tens place be x and the ones place be y\n    # Then the number Serene thought she was subtracting is 50 + 3 = 53\n    # And the actual number she should have been subtracting is 30 + 2 = 32\n    # The incorrect difference Serene got was 36\n    for x in range(10):\n        for y in range(10):\n            if (x*10 + y) - (50 + 3) == 36:\n                correct_difference = (x*10 + y) - (30 + 2)\n                return correct_difference\n\nans = solution()"
    ],
    "b3e5cbab90804708bce6148613126f16": [
        "def solution():\n    # In the worst-case scenario, we may draw all balls of one color first, and then all balls of a second color.\n    # To ensure 3 different colors, we then have to draw one more ball which is guaranteed to be of the third color.\n    max_single_color_balls = max(15, 9, 6)  # Maximum balls of the same color\n    max_two_color_balls = sum(sorted([15, 9, 6])[:2])  # Sum of balls of the two lesser quantities\n\n    # To get three different colors, take the worst scenario: drawing all of one color, then all of another color, \n    # then finally one of the last color. \n    draw_count = max_two_color_balls + 1  # One more than all of the two lesser colors\n\n    return draw_count\n\nans = solution()"
    ],
    "4f366210af224a9f9f43bbc93ae4f875": [
        "def solution():\n    sequence = [2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35]\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "9b13d74bafa4466eb645ffa554df735b": [
        "def solution():\n    total_students = 32 + 28 + 23 + 17\n    number_of_classes = 4\n    average_students = total_students / number_of_classes\n    return average_students\n\nans = solution()"
    ],
    "9939fb896f824a2881087102f27ab8c3": [
        "def solution():\n    total_length = 11.7\n    used_for_fences = 3.2\n    used_for_woods = 6.5\n\n    remaining_length = total_length - (used_for_fences + used_for_woods)\n\n    return remaining_length\n\nans = solution()"
    ],
    "bb27ebca96a14753b3a39b73a2462099": [
        "def solution():\n    from itertools import permutations\n    digits = [2, 7, 8]\n    three_digit_numbers = list(permutations(digits, 3))\n    ans = len(three_digit_numbers)\n    return ans\n\nans = solution()"
    ],
    "ee5084c8c8d24c4bbeb5d061801cc169": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ellen, lenny = symbols('ellen lenny')\n\n    equation1 = Eq(ellen - 12, (13/24) * (ellen + lenny))\n    equation2 = Eq(lenny - 12, (3/8) * (ellen + lenny))\n\n    solutions = solve((equation1, equation2), (ellen, lenny))\n\n    return solutions[ellen] + solutions[lenny]\n\nans = solution()"
    ],
    "eadf933fa489425a8e7934fbc30dfdf8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    first_50k_tax = 0.06 * 50000\n    remaining_income = 120000 - 50000\n    total_tax = 10000\n\n    tax_equation = Eq(first_50k_tax + remaining_income * (0.06 + T/100), total_tax)\n\n    T_value = solve(tax_equation, T)\n\n    return T_value[0]\n\nans = solution()"
    ],
    "1482dca47e9c40c88fa457ae47419d81": [
        "def solution():\n    smallest = sorted(\"1234567890\")  # Arrange smallest digits to the left, '0' must not be at the start\n    largest = sorted(\"1234567890\", reverse=True)\n    \n    # Construct the smallest and largest numbers ensuring '0' is not at the starting position\n    smallest_number = int(''.join(smallest[1] + smallest[0] + smallest[2:]))\n    largest_number = int(''.join(largest))\n    \n    # Compute the difference between the largest and smallest numbers\n    return largest_number - smallest_number\n\nans = solution()"
    ],
    "05e460cdfe874f2fbb3c0d1f81ffbec5": [
        "def solution():\n    train_length = 200\n    tunnel_length = 500\n    speed = 10\n\n    # The entire train should pass through the entire tunnel length plus its own length\n    total_distance = train_length + tunnel_length\n\n    # Duration is distance divided by speed\n    duration = total_distance / speed\n\n    return duration\n\nans = solution()"
    ],
    "97138baaf4754087a327cc1e83d8fd4f": [
        "def solution():\n    # Let Jessie's weight be j and Buzz's weight be b\n    # b = 3j (Buzz is three times as heavy as Jessie)\n    # b - j = 450 (Buzz is 450g heavier than Jessie)\n    \n    j = 450 / (3 - 1) # Solve the equation for j\n    b = 3 * j # Calculate b using the relationship between b and j\n    \n    return int(b)\n\nans = solution()"
    ],
    "764c50d4619f44199a22a6b9f383ed24": [
        "def solution():\n    cost_per_pound = 49  # cost in pence\n    pounds_bought = 2\n    total_cost = cost_per_pound * pounds_bought  # total cost in pence\n    amount_paid = 100  # amount paid in pence (£1)\n\n    change = amount_paid - total_cost\n\n    return change\n\nans = solution()"
    ],
    "60b84c6fa7f240ffafb43217e82d66db": [
        "from itertools import permutations\n\ndef solution():\n    # There are 7 gifts and 5 children.\n    # Richard and Kevin want either a toy car or a puzzle or toy car or a calculator.\n    # Let's identify those gifts by 1, 2 (toy car and puzzle), 3 (calculator) and the rest 4, 5, 6, 7 can be anything.\n    # So there are 2 cases to consider:\n    # Case 1: Richard gets 1 or 2 and Kevin gets 3.\n    # Case 2: Richard gets 3 and Kevin gets 1 or 2.\n    \n    total_ways = 0\n    \n    # Calculating for case 1:\n    # The remaining gifts to distribute among the other 3 children are 4, 5, 6, 7\n    remaining_gifts = [4, 5, 6, 7]\n    # First we give one of the two preferred gifts to Richard (2 possibilities)\n    for _ in range(2):  # He can get either gift 1 or 2\n        # Then we give the calculator to Kevin (1 possibility, since there's only one calculator)\n        for perm in permutations(remaining_gifts):\n            total_ways += 1  # All permutations of the rest of the gifts are valid\n\n    # Calculating for case 2:\n    # The remaining gifts to distribute among the other 3 children are 4, 5, 6, 7\n    # Richard gets the calculator (1 possibility)\n    # Kevin gets one of the two other preferred gifts (2 possibilities)\n    total_ways *= 2  # We multiply by 2 to account for the fact that Kevin can get either gift 1 or 2\n\n    return total_ways\n\nans = solution()"
    ],
    "14c07a0f9d734b5088fba3845ed8db4d": [
        "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef solution():\n    n = 1\n    while True:\n        if all(is_prime(n + i) for i in [0, 4, 6, 132, 250]):\n            return n\n        n += 1\n\nans = solution()"
    ],
    "f018488d15f94b99915f6422728512b7": [
        "def solution():\n    return 374 * 36\n\nans = solution()"
    ],
    "c9a79ce675034b2489e740af3c031037": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    first_rabbit, second_rabbit, third_rabbit = symbols('first_rabbit second_rabbit third_rabbit')\n\n    equation1 = Eq(second_rabbit, first_rabbit + 2)\n    equation2 = Eq(third_rabbit, second_rabbit - 0.8)\n    equation3 = Eq(first_rabbit + second_rabbit + third_rabbit, 19.7)\n\n    solutions = solve((equation1, equation2, equation3), (first_rabbit, second_rabbit, third_rabbit))\n\n    return solutions[first_rabbit]\n\nans = solution()"
    ],
    "1695f1a256a845c4b26912c5783eb123": [
        "def solution():\n    total_weight = 200\n    concentration = 0.15\n    \n    sugar_weight = total_weight * concentration\n    \n    return sugar_weight\n\nans = solution()"
    ],
    "56bd9145d93e48f49139ec624dac2068": [
        "def solution():\n    speed_jack = 15  # Jack's speed in km/hour\n    speed_rose = 10  # Rose's speed in km/hour\n    time_to_meet = 10  # time in hours until they meet\n\n    # Distance covered by Jack until they meet\n    distance_jack = speed_jack * time_to_meet\n    # Distance covered by Rose until they meet\n    distance_rose = speed_rose * time_to_meet\n\n    # The distance between Town A and Town B is the difference in the distances\n    # Jack and Rose covered until they meet, as they meet after traveling the same\n    # amount of time.\n    distance_between_A_and_B = abs(distance_jack - distance_rose)\n\n    return distance_between_A_and_B\n\nans = solution()"
    ],
    "23a1e04ca6614f4d99436ccdd578cd9c": [
        "def solution():\n    ans = 0\n    for i in range(2, 2021, 4):\n        ans += i**2 - (i-2)**2\n    return ans\n\nans = solution()"
    ],
    "2e878688541b46f5b7d0726609b2d7ef": [
        "def solution():\n    ans = 42.3 + 10.5 + 2.7 - 4.5\n    return ans\n\nans = solution()"
    ],
    "44ecc4dcdaa54831860666d510b464ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(4.6 * x - 0.35, 0.57)\n    \n    ans = solve(equation, x)[0]\n    \n    return ans\n\nans = solution()"
    ],
    "6bf760b6b8a740cda324d6bb831f42b3": [
        "def solution():\n    multiples_of_7 = 5000 // 7\n    multiples_of_13 = 5000 // 13\n    multiples_of_both = 5000 // (7 * 13)\n\n    ans = multiples_of_7 + multiples_of_13 - multiples_of_both\n    return ans\n\nans = solution()"
    ],
    "b4fbda1fc3454970a479018d78ecff7c": [
        "def solution():\n    num = 48739\n    remainder = num % 3\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = 3 - remainder\n    return ans\n\nans = solution()"
    ],
    "a65121c2cf9a4a3f88d13765512d893a": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    counts = {'S': 3, 'U': 1, 'C':2, 'E': 1}  # Letter counts\n    total_perms = factorial(sum(counts.values()))  # Total permutations without restriction\n    \n    for a in counts:\n        total_perms //= factorial(counts[a])  # Divide by factorial of each letter count\n    \n    # Calculate permutations where 'S's are next to each other\n    # Treat 'SSS' as one letter\n    counts_adjacent_s = {'SSS': 1, 'U': 1, 'C': 2, 'E': 1}\n    perms_adjacent_s = factorial(sum(counts_adjacent_s.values()))  # Total permutations with 'SSS'\n    \n    for a in counts_adjacent_s:\n        perms_adjacent_s //= factorial(counts_adjacent_s[a])  # Correct for identical letters\n    \n    # Ways to arrange 'SSS' within the other letters + 1 extra position\n    positions_for_s = len('UCE') + 1  # Additional positions for 'S'\n    perms_adjacent_s *= positions_for_s  # Multiply by positions for 'SSS'\n\n    return total_perms - perms_adjacent_s  # Subtract incorrect perms from total perms\n\nans = solution()"
    ],
    "54c307c65d4942e3a14a0c97e9c6453b": [
        "def solution():\n    total_pupils = 467\n    girls = 333\n    teachers = 36\n\n    boys = total_pupils - girls\n    more_boys_than_teachers = boys - teachers\n\n    return more_boys_than_teachers\n\nans = solution()"
    ],
    "70c643f015a64e749fe17245d8f47ced": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    emma_days = symbols('emma_days')\n    david_rate = 1 / 10\n    emma_rate = 1 / 18\n\n    equation = Eq(david_rate * (14 - emma_days) + emma_rate * emma_days, 1)\n\n    emma_days_solved = solve(equation, emma_days)\n\n    return emma_days_solved[0]\n\nans = solution()"
    ],
    "c40a0a6c89c3412b86d23bb5ec098bae": [
        "def solution():\n    tshirts_bought = 138\n    money_left = 56\n    total_tshirts = 145\n\n    # Find the cost of one T-shirt\n    cost_per_tshirt = money_left / (total_tshirts - tshirts_bought)\n\n    # Then find the total amount of money Josephine had at first\n    total_money = cost_per_tshirt * total_tshirts\n\n    return total_money\n\nans = solution()"
    ],
    "7a791003812544b6bac377d65f16cb90": [
        "def solution():\n    n = 100\n    # The sum of the first n cubes is the square of the sum of the first n natural numbers.\n    sum_of_cubes = (n**2 * (n + 1)**2) // 4\n    sum_of_naturals = (n * (n + 1)) // 2\n    ans = sum_of_cubes / sum_of_naturals\n    return ans\n\nans = solution()"
    ],
    "d2e88cea338f4ce69692532138d94fcb": [
        "def solution():\n    n = 14\n    average = 119\n    total_sum = average * n\n\n    # In a sequence of consecutive even numbers, the terms are equally spaced.\n    # Hence, the first term can be found by subtracting half of (n - 1) times the common difference (which is 2) from the total.\n    smallest_number = total_sum - (2 * (n - 1))\n    \n    return smallest_number\n\nans = solution()"
    ],
    "d5259f3a5c6e4402838e70389234367f": [
        "def solution():\n    for a in range(10):\n        num = int(f'1{a}2{a}3{a}4{a}5{a}')\n        if num % 11 == 0:\n            return a\n\nans = solution()"
    ],
    "75a7726543e04bea836b118cb451097f": [
        "def solution():\n    tallest_height = 132\n    shortest_height = 124\n    height_difference = tallest_height - shortest_height + 1  # +1 because range is inclusive\n\n    # Using the Pigeonhole Principle, we find the minimum class size\n    # where at least 4 students are of the same height.\n    num_students = height_difference * (4 - 1) + 1\n\n    return num_students\n\nans = solution()"
    ],
    "51ad861e00ec431192e04a5eb59b3380": [
        "def solution():\n    original_hourly_rate = 6.50\n    increase_percentage = 12 / 100\n    new_hourly_rate = original_hourly_rate * (1 + increase_percentage)\n    return new_hourly_rate\n\nans = solution()"
    ],
    "f1d598e9e6754a5fb544e02dd210fd8f": [
        "def solution():\n    # It takes Rachel 12 minutes to make 4 cuts to divide the wood into 5 sections.\n    cuts_for_5_sections = 4\n    time_for_5_sections = 12\n    # Time per cut is the same regardless of how many cuts are made.\n    time_per_cut = time_for_5_sections / cuts_for_5_sections \n\n    # To make 5 cuts, she would need:\n    cuts_needed = 5\n    time_needed = time_per_cut * cuts_needed\n    \n    return int(time_needed)\n\nans = solution()"
    ],
    "cba5a4b77fcc4b47a485159e97c6c596": [
        "def solution():\n    total_money_pence = 126  # convert £1.26 to pence\n    # Since there are equal number of 2p and 5p coins, let x be the number of each type of coin\n    # 2p coin is worth 2 pence and 5p coin is worth 5 pence\n    # The total money is then x*2 + x*5 = x*(2+5) = 7x pence\n    # We solve the equation 7x = total_money_pence\n\n    # number of coins of each type (either 2p or 5p)\n    number_of_coins_per_type = total_money_pence // 7\n    # The total number of coins is the number of 2p coins plus the number of 5p coins\n    total_number_of_coins = number_of_coins_per_type * 2\n\n    return total_number_of_coins\n\nans = solution()"
    ],
    "473dae367faa457db6245d50b030a2d2": [
        "def solution():\n    # since the ones digit of 3^n repeats every 4, \n    # we can find the ones digit of 3^2009 by finding the ones digit of 3^(2009 mod 4)\n\n    exponent_mod_4 = 2009 % 4\n    ones_digit = pow(3, exponent_mod_4) % 10\n\n    return ones_digit\n\nans = solution()"
    ],
    "acc5ff5f2838429d9de00e4ee08fb1fa": [
        "def solution():\n    girls = 36\n    boys_fraction = 5 / 9\n    remaining_fraction = 1 - (2 / 5)\n    boys = girls * (boys_fraction / (1 - boys_fraction))\n    total_people = girls + boys\n    total_people /= remaining_fraction\n    return int(total_people)\n\nans = solution()"
    ],
    "074c52d7c8884541a53bd81c8516e4ae": [
        "def solution():\n    for i in range(1, 1000):  # Iterate through numbers to find the smallest number meeting the conditions\n        num = i**2  # Calculate the square number\n\n        # Check if the number is an even number and a multiple of 5\n        if num % 2 == 0 and num % 5 == 0:\n            return num  # This is the smallest number that meets all conditions\n\nans = solution()"
    ],
    "76292cab066c4804960c0eb334442333": [
        "def solution():\n    child_discount = 0.25\n    senior_discount = 0.20\n    \n    child_ticket_cost = 30\n    adult_ticket_cost = child_ticket_cost / (1 - child_discount)\n    senior_ticket_cost = adult_ticket_cost * (1 - senior_discount)\n    \n    return senior_ticket_cost\n\nans = solution()"
    ],
    "f3b9f2f5f0a543b39b7bca6031d203f9": [
        "from math import comb\n\ndef solution():\n    # since the books are indistinguishable and the kids are distinguishable,\n    # we use stars and bars theorem to calculate the combinations\n    num_books = 20\n    num_kids = 4\n    \n    # We have to place 3 bars to divide books among 4 kids, and the total\n    # number of positions are num_books + num_kids - 1\n    ans = comb(num_books + num_kids - 1, num_kids - 1)\n    \n    return ans\n\nans = solution()"
    ],
    "35fcb930a0bc41a894f13b4d2d264e48": [
        "def solution():\n    men1 = 3\n    days1 = 30\n    men2 = 2\n\n    work_done1 = men1 * days1\n    days2 = work_done1 / men2\n\n    return days2\n\nans = solution()"
    ],
    "ceda71c2bab34d10981c8cc631f857e6": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "b7384c3ef6ce4e10accddb590b454709": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let will's current age be x\n    will_age = symbols('x')\n\n    # Equation: In 8 years, Will will be 4 times as old as he was 4 years ago\n    equation = Eq(will_age + 8, 4 * (will_age - 4))\n\n    # Solve the equation\n    solved_age = solve(equation, will_age)\n\n    # For practical purposes, we only consider positive age\n    return [age for age in solved_age if age > 0][0]\n\nans = solution()"
    ],
    "203d878b270d4d88a12ed23389c40a46": [
        "def solution():\n    first_term = 1\n    last_term = 97\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_terms\n\nans = solution()"
    ],
    "ac50d3117292453c911bc6e43ec859a8": [
        "def solution():\n    trains = 3\n    cars = 4\n    boats = 2\n\n    ways = trains + cars + boats\n\n    return ways\n\nans = solution()"
    ],
    "f15729b8c3bf42758bf674b97e695b4a": [
        "def solution():\n    total_pages = 981\n    pages_per_day = 25\n\n    days_needed = total_pages / pages_per_day\n\n    return int(days_needed)\n\nans = solution()"
    ],
    "e8ac97a4703d48e3a8d90b8986df72d1": [
        "from math import comb\n\ndef solution():\n    # Each child must get at least two books, so we distribute those first.\n    # This leaves 30 - (5*2) = 20 books to distribute freely among 5 children.\n    remaining_books = 30 - 5 * 2\n    \n    # The number of ways to distribute remaining_books into 5 parts (kids)\n    # can be calculated using combinations with repetitions.\n    # Formula: C(n+k-1, k) where n is the number of items to distribute\n    # and k is the number of parts.\n    ways = comb(remaining_books + 5 - 1, 5 - 1)\n    \n    return ways\n\nans = solution()"
    ],
    "a6292732361347fa8c864895f6e10ae3": [
        "def solution():\n    return 6846 * 8\n\nans = solution()"
    ],
    "7988af13cd9a4c19b46db9fc0c0bb229": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    mike, mason, chewy = symbols('mike mason chewy')\n    \n    equation1 = Eq(mason, 2/3 * chewy)\n    equation2 = Eq(chewy, 2/5 * mike)\n    equation3 = Eq(mason, mike - 550)\n    \n    solutions = solve((equation1, equation2, equation3), (mike, mason, chewy))\n    \n    total_soup_ml = solutions[mike] + solutions[mason] + solutions[chewy]\n    \n    return total_soup_ml / 1000  # Convert ml to litres\n\nans = solution()"
    ],
    "06e06b65731b4ae182bc34f8bdf78ad2": [
        "def solution():\n    initial_amount = 1000\n    interest_rate = 0.06\n    years = 2\n\n    final_amount = initial_amount * ((1 + interest_rate) ** years)\n    \n    return final_amount\n\nans = solution()"
    ],
    "65c188bedd614322a61cdc7a8fd0c01b": [
        "def solution():\n    total_girls = 28\n    like_one_direction = 20\n    like_the_vamps = 17\n    like_both = 15\n\n    like_neither = total_girls - (like_one_direction + like_the_vamps - like_both)\n    \n    return like_neither\n\nans = solution()"
    ],
    "1bee107571854f2d87bb88f1fc9b38c1": [
        "import itertools\nfrom fractions import Fraction\n\ndef solution():\n    values = [(Fraction(1, 2), Fraction(1, 9)),\n              (Fraction(1, 3), Fraction(1, 8)),\n              (Fraction(1, 4), Fraction(1, 7)),\n              (Fraction(1, 5), Fraction(1, 6))]\n    operations = ['+', '-', '*', '/']\n    max_sum = 0\n    second_largest_term_fraction = None\n\n    for perms in itertools.permutations(operations, 4):\n        terms = []\n        for (a, b), op in zip(values, perms):\n            if op == '+':\n                term = a + b\n            elif op == '-':\n                term = a - b\n            elif op == '*':\n                term = a * b\n            else:  # op == '/'\n                term = a / b\n            terms.append(term)\n        \n        current_sum = sum(terms)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            second_largest_term_fraction = sorted(terms)[2]  # second largest\n    \n    A = second_largest_term_fraction.numerator\n    B = second_largest_term_fraction.denominator\n\n    return A + B\n\nans = solution()"
    ],
    "d634317608b54dbcb954484f4a8c548c": [
        "def solution():\n    road_length = 500\n    interval = 5\n\n    num_trees = (road_length // interval) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "2b895d9f585d4c72b559deecf56f1079": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the cost of one jug (j) and one cup (c)\n    j, c = symbols('j c')\n    \n    # Equation based on the first statement: 4j + 5c = 85\n    eq1 = Eq(4*j + 5*c, 85)\n    \n    # Equation based on the second statement: 2j + 2c = 40\n    eq2 = Eq(2*j + 2*c, 40)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (j, c))\n    \n    # We want the cost of one cup\n    return solutions[c]\n\nans = solution()"
    ],
    "f3ea48411a6c498184b21b3604aa2db8": [
        "def solution():\n    # Coins denominations in pence\n    coin_denominations = [200, 100, 50, 20, 10, 5, 2, 1]\n    \n    # Susan's bus fare\n    bus_fare = 44\n    \n    # Amount to be paid\n    # We start with the assumption that she paid with a 50p coin\n    # This would be the usual case for paying with the smallest number of\n    # coins, as the bus fare is less than 50p and greater than any other smaller coin.\n    paid_amount = 50\n    change = paid_amount - bus_fare\n    \n    # A counter for the smallest number of coins\n    num_coins = 0\n    \n    # Susan pays with one coin of 50p - 1 coin changes hands\n    num_coins += 1\n    \n    # Determine the smallest number of coins for the change\n    for coin in coin_denominations:\n        while change >= coin:\n            change -= coin\n            num_coins += 1\n            if change == 0:\n                return num_coins\n\nans = solution()"
    ],
    "7c988a58a14c48c19fd7ebda71673015": [
        "def solution():\n    classrooms = 27\n    chairs_per_classroom = 28\n    total_chairs = classrooms * chairs_per_classroom\n    return total_chairs\n\nans = solution()"
    ],
    "ce2a11f3530044e69f0f940d2177c842": [
        "def solution():\n    from sympy import symbols, solve, N, Lt\n\n    x = symbols('x', real=True, positive=True)\n    inequality = (x + 3) / (2 * x + 5) - 0.505\n\n    # Find the value for x where the inequality is true\n    solution_set = solve(Lt(inequality, 0), x)\n\n    # Get the maximum integer x value for which inequality holds\n    largest_wins = N(max(solution_set))\n\n    # Since x is an integer we take the floor of largest_wins (47.5) and subtract 1\n    return int(largest_wins) - 1\n\nans = solution()"
    ],
    "240bc3106e614b409ed75b112d8a5572": [
        "def solution():\n    # Every pair of numbers in the series cancels each other out except for the first number\n    ans = 88\n    return ans\n\nans = solution()"
    ],
    "982d68ff78fb4d07914cf20c9a917bb2": [
        "def solution():\n    total_pupils = 235 + 567\n    pupils_each_room = total_pupils // 2\n    return pupils_each_room\n\nans = solution()"
    ],
    "faaa8deed0db48a0b6707146113de1c2": [
        "def solution():\n    ans = 818 - 271 - 18 + 64 - 29 + 36\n    return ans\n\nans = solution()"
    ],
    "27bdd20547f24d8985bedec355b3bcb2": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "b0db81c8fe684031982ca97bbbbe4f6c": [
        "def solution():\n    spent_money = 89.65\n    remaining_money = 20.35\n\n    initial_money = spent_money + remaining_money\n    return initial_money\n\nans = solution()"
    ],
    "bfc856ed693948c5bc8692af12953e1d": [
        "def solution():\n    total_points = 12\n    # Every right angled triangle on a circle involves the diameter.\n    # There are total_points/2 (i.e., 6) ways to choose a diameter (since the circle is divided into 12 equal parts).\n    # For each diameter, there are total_points - 2 points left to form a right triangle (excluding the 2 points on the diameter).\n    # Thus, for every diameter there are 10 possible third points for the right angled triangle.\n    # Since there are 6 possibilities for the diameter, we multiply the number of ways to choose the third point by 6.\n    right_angled_triangles = (total_points // 2) * (total_points - 2)\n\n    return right_angled_triangles\n\nans = solution()"
    ],
    "fe9555e52b6940b58bc0240731da3d6c": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n\n    # Find the common difference of the arithmetic sequence\n    common_difference = (fifteenth_term - tenth_term) // (15 - 10)\n\n    # Find the 12th number using the common difference and the 10th term\n    twelfth_term = tenth_term + 2 * common_difference\n\n    return twelfth_term\n\nans = solution()"
    ],
    "e25bc60d63ca444999ac89d8eb2ef5f4": [
        "def solution():\n    # We can calculate the sum by recognizing that the denominators are products of consecutive primes plus the last fraction\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n    ans = sum((i / (primes[i - 1] * primes[i])) for i in range(1, 8)) + (1 / primes[-1])\n    \n    return ans\n\nans = solution()"
    ],
    "1b578ba89dc64a0497a494ff8c376cf1": [
        "def solution():\n    from math import gcd\n\n    a_students = 24\n    b_students = 36\n    c_students = 42\n\n    ab_gcd = gcd(a_students, b_students)\n    abc_gcd = gcd(ab_gcd, c_students)\n\n    return abc_gcd\n\nans = solution()"
    ],
    "caef56015c2546c787649e8de4983b71": [
        "def solution():\n    sum = 0\n    sign = 1\n    for i in range(200, 0, -1):\n        sum += i * sign\n        if i % 2 == 0:  # Flip the sign after every second number\n            sign *= -1\n    return sum\n\nans = solution()"
    ],
    "f920596541b54c59bae5257c1fa6effd": [
        "def solution():\n    number_of_children = 200\n    cost_per_lunch = 4.36\n    number_of_days = 5\n\n    total_cost = number_of_children * cost_per_lunch * number_of_days\n\n    return total_cost\n\nans = solution()"
    ],
    "513db53d54374f00afb65d6d0f973de3": [
        "def solution():\n    total_questions = 20\n    correct_points = 5\n    incorrect_points = -3\n    total_points = 76\n\n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        if correct_answers * correct_points + incorrect_answers * incorrect_points == total_points:\n            return correct_answers\n\nans = solution()"
    ],
    "c502fd8bef51420684df77fd33225144": [
        "def solution():\n    return (3/8) * 16\n\nans = solution()"
    ],
    "fc6d0ef4b64c44a4900d03d68cbc4621": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cost_price = symbols('cost_price')\n\n    marked_price = cost_price * 1.20\n    selling_price = marked_price * 0.90\n    profit = selling_price - cost_price\n\n    equation = Eq(profit, 120)\n\n    solution = solve(equation, cost_price)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e45242e744df43f9909a012add8cd759": [
        "def solution():\n    total_sheep = 128\n    black_sheep = (5/8) * total_sheep\n    white_sheep = (1/4) * total_sheep\n    brown_sheep = total_sheep - black_sheep - white_sheep\n    return int(brown_sheep)\n\nans = solution()"
    ],
    "8e0574e136cb4a76abf5378d8154a43a": [
        "def solution():\n    cost_per_person = 27.60\n    number_of_people = 38\n    \n    total_cost = cost_per_person * number_of_people\n    \n    return total_cost\n\nans = solution()"
    ],
    "e9e3eafe8b3e48d3b2a71156f1fe9aae": [
        "def solution():\n    balls_per_box = 25 / 5\n    total_balls_in_6_boxes = balls_per_box * 6\n    return total_balls_in_6_boxes\n\nans = solution()"
    ],
    "b84b9d049f3944a6a3fec6f34b08dcdd": [
        "def solution():\n    from sympy import symbols, Eq, solve, Abs\n    \n    x = symbols('x')\n    equation = Eq(Abs(x + 1), 2 * x + 5)\n    \n    solutions = solve(equation, x)\n    \n    return [s.evalf() for s in solutions]\n\nans = solution()"
    ],
    "1f71711a37ba41f19b391be626ee7d84": [
        "def solution():\n    from math import factorial\n    \n    # For four different colored socks\n    ways_with_different_colors = factorial(4)\n\n    # For two pairs of different colored socks\n    ways_with_two_pairs = factorial(4) // (factorial(2) * factorial(2))\n\n    # Return the two numbers as a tuple\n    return (ways_with_different_colors, ways_with_two_pairs)\n\nans = solution()"
    ],
    "63250d13de624f798109236462057294": [
        "def solution():\n    return (13.8 + 18.6) / 2\n\nans = solution()"
    ],
    "3d56a142b7734cae80fcd6db270a1a50": [
        "def solution():\n    for a in range(1, 10):  # 'a' cannot be 0 as it is the first digit of a two-digit number\n        for b in range(0, 10):\n            if (10*a + b) + (10*b + a) + b == (100*a + 10*a + b):\n                return a + b\n\nans = solution()"
    ],
    "cc66abc29793482fb9eb2797063a599e": [
        "def solution():\n    return 7 * 4 * 37\n\nans = solution()"
    ],
    "2a26499da5b34ec8944d958d53314106": [
        "def solution():\n    ans = 9 * 59\n    return ans\n\nans = solution()"
    ],
    "273702e9fdfb4478a973714e3892e8a8": [
        "def solution():\n    num_people = 4\n    handshakes = num_people * (num_people - 1) // 2\n    return handshakes\n\nans = solution()"
    ],
    "336b55c1b98a494a8fcdec5a76129b58": [
        "from math import comb\n\ndef solution():\n    num_points = 10\n    points_per_triangle = 3\n    num_triangles = comb(num_points, points_per_triangle)\n    return num_triangles\n\nans = solution()"
    ],
    "a3e7cbd795a9409dbf490a20013698fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's assume Andre has 'a' sweets and Beth has 'b' sweets.\n    a, b = symbols('a b')\n    \n    # Andre and Beth originally had a total of 24 sweets.\n    original_total = Eq(a + b, 24)\n    \n    # After the teacher gave them 4 sweets each, Andre now has 6 sweets more than Beth.\n    # So, (a + 4) = (b + 4) + 6\n    after_gift = Eq(a - b, 6)\n    \n    # Solving the equations simultaneously.\n    solutions = solve((original_total, after_gift), (a, b))\n    \n    # Beth's sweets after the gift.\n    beth_sweets_after = solutions[b] + 4\n\n    return beth_sweets_after\n\nans = solution()"
    ],
    "b6b88edeb93e4d9cb9b8b1211d07bf53": [
        "def solution():\n    return 246 * 507\n\nans = solution()"
    ],
    "ebaac819520a41bea5853ed02b80e219": [
        "def solution():\n    first_term = 4\n    last_term = 121\n    difference = 3\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "b9605682663c4e549e208dbbe926ff31": [
        "def solution():\n    # Winning position is when the count of apples is 1 more than the multiple of 4\n    # (i.e. 5, 9, 13, 17). So when Anthea plays, she should take apples such that\n    # the remaining apples are one of these numbers.\n    \n    # Anthea wants to leave 17 apples to Ben so she should take 1 apple.\n    anthea_move = 1\n\n    # Answer is the number of apples Anthea takes initially\n    return anthea_move\n\nans = solution()"
    ],
    "de94f3e9046049bda163af8199fad009": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the mass of a table and a chair\n    table_mass, chair_mass = symbols('table_mass chair_mass')\n\n    # Given equations based on the problem statement\n    # 3 tables have the same total mass as 4 chairs\n    equation1 = Eq(3 * table_mass, 4 * chair_mass)\n\n    # A table is 2kg heavier than a chair\n    equation2 = Eq(table_mass, chair_mass + 2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (table_mass, chair_mass))\n\n    return solutions[table_mass]\n\nans = solution()"
    ],
    "fa9cbee13c99485d8303b1f5e6225e5c": [
        "def solution():\n    total_taller_than_180 = 4500\n    taller_than_190 = 750\n    between_180_and_190 = total_taller_than_180 - taller_than_190\n\n    return between_180_and_190\n\nans = solution()"
    ],
    "27eb9e5bd22f43eba7fb2e1a0973e1ba": [
        "def solution():\n    from math import factorial\n    # Judy can stand on 2 different ends\n    judy_positions = 2\n    # The rest 5 friends can arrange themselves in 5! ways\n    friends_arrangements = factorial(5)\n    # Using multiplication rule (Judy's positions * friends' arrangements)\n    total_ways = judy_positions * friends_arrangements\n    return total_ways\n\nans = solution()"
    ],
    "015af54f56854424960c5b919f820761": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andre, beth = symbols('andre beth')\n\n    total_sweets_before = Eq(andre + beth, 24)\n    total_sweets_after = Eq(andre - beth, 6)\n\n    # Since they both received 4 candies each, we have to add 4 to both their amounts\n    andre_after = andre + 4\n    beth_after = beth + 4\n\n    # They now have andre + 4 candies and beth + 4 candies respectively;\n    # and andre has 6 candies more than beth after they received the candies:\n    # (andre + 4) - (beth + 4) = 6\n    solutions = solve((total_sweets_before, total_sweets_after), (andre, beth))\n\n    beth_final = solutions[beth] + 4\n\n    return beth_final\n\nans = solution()"
    ],
    "af2115488bfc4cbfbf5f5ebb0bff2bef": [
        "def solution():\n    cost_per_bar = 3.18 / 6\n    cost_for_five_bars = cost_per_bar * 5\n    return cost_for_five_bars\n\nans = solution()"
    ],
    "e4f74093db054f9a9afeb2f53b05b7d1": [
        "def solution():\n    numbers = [9, 12, 17, 18, 21, 23]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "6e7fd510bdaa4c41b99c4531bc548e9a": [
        "def solution():\n    # If the Ferrari driver finished in second place,\n    # then only one car finished ahead of him.\n    # Additionally, he overtook 5 other cars.\n    # Therefore, there must have been 6 cars behind the car in the first place.\n    \n    # To find the total number of cars, we add the number of cars\n    # that finished behind the first place (6), the first place car (1),\n    # and the Ferrari driver itself (1).\n    \n    total_cars = 6 + 1 + 1  # cars overtaken, the first place car, and the Ferrari driver\n    return total_cars\n\nans = solution()"
    ],
    "c1faa5b5faaf44929efa78451a63ff75": [
        "def solution():\n    # Define the inverse operations\n    result_after_operations = 2\n    add_back = 6\n    multiply_by = 12\n\n    # Apply the inverse operations to find the original number\n    original_number = (result_after_operations * multiply_by) + add_back\n    return original_number\n\nans = solution()"
    ],
    "ab627271938f40748d9acac110c92172": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    younger_maths = symbols('younger_maths')\n    \n    # Elder sister maths time is younger_maths + 10\n    elder_maths = younger_maths + 10\n    \n    # Younger sister English time is younger_maths - 12 + 4\n    younger_english = younger_maths - 12 + 4\n    \n    # Elder sister English time is younger_english - 4\n    elder_english = younger_english - 4\n    \n    # Total time spent by elder sister\n    total_elder = elder_maths + elder_english\n    \n    # Known total time spent by elder sister\n    known_total_elder = 88\n    \n    # Create the equation based on total time\n    equation = Eq(total_elder, known_total_elder)\n    \n    # Solve the equation\n    solution = solve(equation, younger_maths)\n    \n    # Calculate younger sister's English time\n    younger_english_time = solution[0] - 12 + 4\n    \n    return younger_english_time\n\nans = solution()"
    ],
    "539a3a5cc52d4011bfeede240f8dd840": [
        "def solution():\n    count = 0\n    for i in range(1000, 10000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6dc506c916024720a5dab28d29fdcb33": [
        "def solution():\n    # Let sum be the total sum of the four numbers\n    sum = 4 * 130  # since average is 130\n    # When one number is removed, the new sum is the sum of three numbers\n    new_sum = 3 * 110  # since new average is 110\n    # The removed number is the difference between the original sum and new sum\n    removed_number = sum - new_sum\n    return removed_number\n\nans = solution()"
    ],
    "f8f8aec9479848be90565270cd0b38f4": [
        "from math import lcm\n\ndef solution():\n    # Convert light change times to seconds\n    # First traffic light changes every 60 seconds\n    # Second traffic light changes every 90 seconds (1.5 minutes)\n    # Find the LCM of the first two to satisfy the 9-minute (540 seconds) condition\n    lcm_first_two = lcm(60, 90)\n\n    # Third light must be at least 30 seconds\n    # Iterate over multiples of 30 to find the smallest number that is also a divisor of 540 seconds\n    third_light_time = 30\n    while True:\n        if (540 % third_light_time == 0) and lcm(lcm_first_two, third_light_time) == 540:\n            break\n        third_light_time += 30\n    \n    # Convert the time back to minutes for the answer\n    ans = third_light_time / 60\n\n    return ans\n\nans = solution()"
    ],
    "43c61058429c4fe489d7c947a01763c2": [
        "def solution():\n    # If Leo wants to ensure his victory, he needs to leave a number of apples such that\n    # no matter what Mia does (take 1 or 2 apples), Leo can always adjust his choice\n    # to leave a multiple of 3 for Mia. This is because if Mia is always faced with a multiple\n    # of 3, she will have to leave a non-multiple of 3 for Leo, guaranteeing his win.\n    \n    # Leo should take 1 apple. This leaves 13 apples, which is not a multiple of 3.\n    # Whatever Mia does, Leo can then adjust to leave her with a multiple of 3.\n    # If Mia takes 1 apple, 12 apples are left, and it's a multiple of 3 which is good for Leo.\n    # If Mia takes 2 apples, 11 apples are left, and Leo can take 2 to leave her with 9 apples.\n    \n    # Leo can guarantee a win by always taking enough apples to leave a multiple of 3.\n\n    # Leo's first move\n    leo_first_move = 1\n    \n    return leo_first_move\n\nans = solution()"
    ],
    "bbd5dd551d4b4d7abc9f239251339ad1": [
        "def solution():\n    # Let the value of one silver spoon be x, and the value of one gold ring be y.\n    # According to the question, the total value of Nick's silver spoons is 3/4 of the total value of Pilpha's gold rings\n    # Therefore, we have the equation: 12 * x = 3/4 * 6 * y\n    # Simplify the equation: 12x = 9y\n    # We want to find out how many silver spoons have the same value as 3 gold rings, which means finding the value of z in the equation: z * x = 3 * y\n    # Replace y from the first equation: z * x = 3 * (12x / 9)\n    # Simplify the equation: z = 3 * (12 / 9)\n    # Calculate z:\n    z = 3 * (12 / 9)\n    return z\n\nans = solution()"
    ],
    "9c9e21c3a7444569afbadf1e30e09b81": [
        "def solution():\n    # Initialize the additional boys to the given problem.\n    extra_boys = 55\n    \n    # Start with one boy (the smallest square)\n    total_boys = 1\n    girls = 0\n    layer = 1\n    \n    # We will increase the square layers until the condition is met\n    while total_boys - girls != extra_boys:\n        # One layer of girls is surrounded by a layer of boys, so add 8 for each layer\n        layer += 2\n        girls += (layer - 2) * 4\n        total_boys += layer * 4\n    \n    total_students = total_boys + girls\n    return total_students\n\nans = solution()"
    ],
    "a7eb63b14ee740bca350f5e3f57ea487": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencils, markers = symbols('pencils markers')\n\n    equation1 = Eq(3 * pencils + 2 * markers, 13)\n    equation2 = Eq(2 * pencils + 3 * markers, 12)\n\n    solutions = solve((equation1, equation2), (pencils, markers))\n\n    total_cost = 7 * solutions[pencils] + 7 * solutions[markers]\n\n    return total_cost\n\nans = solution()"
    ],
    "dca6b59a57004164891b83c2be747227": [
        "def solution():\n    total_cost = 28  # total amount paid by the teacher\n    total_items = 12  # total number of paintbrushes and whiteboard markers\n\n    # Assume all items are paintbrushes at $1 each\n    cost_if_all_paintbrushes = total_items * 1\n    extra_cost_per_marker = 3 - 1  # extra cost of a whiteboard marker compared to a paintbrush\n    \n    # Extra cost paid compared to if all items were paintbrushes\n    extra_cost_paid = total_cost - cost_if_all_paintbrushes\n\n    # Number of whiteboard markers is the extra cost divided by the extra cost per marker\n    num_markers = extra_cost_paid / extra_cost_per_marker\n\n    return int(num_markers)\n\nans = solution()"
    ],
    "a29766e9a35b4cf986fe192653492fb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let f be the number of female teachers\n    f = symbols('f')\n\n    # Total weight of male teachers\n    total_male_weight = 3 * 75\n    \n    # Total weight of female teachers\n    average_female_weight = 60\n\n    # Equation for the total weight based on the average\n    equation = Eq((total_male_weight + average_female_weight * f) / (3 + f), 65)\n\n    # Solve the equation for the number of female teachers\n    num_female_teachers = solve(equation, f)\n\n    return num_female_teachers[0]\n\nans = solution()"
    ],
    "0a147c77462a47acad9d599e3c92987b": [
        "def solution():\n    return 527 - 382\n\nans = solution()"
    ],
    "cf55459e46844705ab8a79455735ac26": [
        "def solution():\n    from_front = 5\n    from_back = 7\n    from_left = 2\n    from_right = 4\n    \n    rows = from_front + from_back - 1\n    cols = from_left + from_right - 1\n    \n    return rows * cols\n\nans = solution()"
    ],
    "e357740e701e49a8ac92bfcd275f4557": [
        "def solution():\n    from math import sqrt\n\n    # Prime factorize 33 and 55\n    prime_factors_33 = [3, 11]  # 33 = 3 * 11\n    prime_factors_55 = [5, 11]  # 55 = 5 * 11\n\n    # Combine the prime factors\n    combined_factors = prime_factors_33 + prime_factors_55\n    # Find out how many times each prime factor appears\n    factor_counts = {prime: combined_factors.count(prime) for prime in set(combined_factors)}\n\n    # For a number to be a perfect square, each prime factor must appear an even number of times.\n    # Initialize m as 1 (multiplicative identity).\n    m = 1\n\n    for factor, count in factor_counts.items():\n        if count % 2 != 0:  # If prime factor count is odd, we need to multiply by this factor\n            m *= factor\n\n    # Now, the product 33 * 55 * m will have all prime factors appearing an even number of times.\n    return m\n\nans = solution()"
    ],
    "a40fe8c3642a46819ca618c1a9afcf63": [
        "from math import comb\n\ndef solution():\n    total_candy = 8\n    plates = 3\n    min_candy_per_plate = 2\n    \n    # Since each plate must have at least 2 pieces of candy, we can distribute\n    # these now and consider the problem with the remaining candy.\n    total_candy -= min_candy_per_plate * plates\n    \n    # Now we need to distribute the remaining 2 candies to 3 plates.\n    # This is equivalent to placing two indistinguishable items into three distinguishable bins,\n    # which can be calculated using the \"stars and bars\" combinatorial method:\n    # We have 2 candies and 2 dividers (for the plates), giving us a total of 4 items.\n    # We need to choose positions for the 2 dividers, which is C(4, 2).\n    \n    ans = comb(total_candy + plates - 1, total_candy)\n    return ans\n\nans = solution()"
    ],
    "58c3353b6ce0476d96bec02a41fe9aa6": [
        "def solution():\n    return 40 * 700\n\nans = solution()"
    ],
    "f6a6b8973f3d4d1ca73c2a8e344b2022": [
        "def solution():\n    import math\n\n    # Since Star must be the first runner, there are 4 remaining spots\n    # and 4 teammates to fill these spots.\n    # We calculate the number of permutations of 4 teammates for 4 spots.\n\n    ans = math.perm(4, 4)  # This function calculates the number of permutations\n\n    return ans\n\nans = solution()"
    ],
    "307081f49a1647b9bb92dfaffe694842": [
        "def solution():\n    # The 3 numbers can be represented as abcd, dcba, and some permutation of abcd (let's call it wxyz).\n    # To find the possible values of a,b,c,d, we can use the fact that their sum times 222 = 26352\n    # Because each place (unit, tens, hundreds, thousands) is counted three times in the sum.\n    \n    # So the sum of the digits a+b+c+d must be 26352/222 = 118.666..., which is not possible as digits are integers. \n    # But we must account for the carryovers in addition, so we try a sum that is close to 118, which is 27 because 2+7 = 9\n    # This is because the carry would amount to 3*9 which each 9 represents (1+8) or (2+7) or (3+6), etc.\n    # With this carry, the total sum of digits would be 27 + 9 = 36, which means a+b+c+d = 36\n    # Now we must find four increasing digits that sum to 36\n    \n    for a in range(1, 10):\n        for b in range(a+1, 10):\n            for c in range(b+1, 10):\n                for d in range(c+1, 10):\n                    if a + b + c + d == 36:\n                        abcd = a*1000 + b*100 + c*10 + d\n                        dcba = d*1000 + c*100 + b*10 + a\n                        # Since abcd + dcba = (a+d)*1111 + (b+c)*111 = (a+d)*1001 + (b+c)*110\n                        # We can assume wxyz has the same middle digits b and c\n                        # Because swapping them does not change their sum\n                        # We only need to find the sum of a and d equals 8 based on our initial carry assumption\n                        \n                        # The smallest combination of $a$ and $d$ that sums to 9 (as a carry) is 1 and 8\n                        # Thus we already have the smallest number as a=1, hence abcd is the smallest\n                        \n                        # Verify the sum of all three numbers\n                        sum_3_nums = abcd + dcba + abcd # Third number, wxyz, has the same sum as abcd\n                        if sum_3_nums == 26352:\n                            return abcd\nans = solution()"
    ],
    "384faa4ecc0e47d79e49dfce00412c19": [
        "def solution():\n    def custom_operation(x, y):\n        return ((x * y) + (x + y) * 2)\n\n    ans = custom_operation(6, 12)\n    return ans\n\nans = solution()"
    ],
    "9e57bb3e87064594be7261beeaf4f749": [
        "def solution():\n    # Time taken to cut one segment\n    time_per_cut = 60 / (31 - 1)\n    \n    # Total time to cut into 50 segments, subtracting 1 since we are starting with one piece of wood\n    total_time = time_per_cut * (50 - 1)\n    \n    return total_time\n\nans = solution()"
    ],
    "8fc55209039645f08e1579f51727eae8": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 3), (3, 5), (5, 7)]\n    ans, _ = solve_congruence(*congruences)\n    \n    while ans < 100:\n        ans += 3 * 5 * 7\n    \n    return ans\n\nans = solution()"
    ],
    "dba8f63335da404e874ce5fc77d842f3": [
        "def solution():\n    return 123 - 41\n\nans = solution()"
    ],
    "cbeeb3a46e374ddca0fda082575458fb": [
        "def solution():\n    original_number = symbols('original_number')\n    equation = Eq(original_number - 0.30 * original_number, 210)\n    solution = solve(equation, original_number)\n    return solution[0]\n\nans = solution()"
    ],
    "55fb13e55caf41cc8779e7ea0146667d": [
        "def solution():\n    year = 2002\n    while True:\n        year += 1\n        if str(year) == str(year)[::-1]:\n            return year - 2002\n\nans = solution()"
    ],
    "ac8cb9cc0d5443de91ca6e628f69e729": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    candy_now, nancy_now = symbols('candy_now nancy_now')\n\n    # Initial number of flowers\n    candy_initial = 11\n    nancy_initial = 9\n\n    # Equation1: After giving, candy has candy_now flowers\n    # Equation2: After receiving, nancy has nancy_now flowers\n    # Nancy now has 8 more flowers than Candy\n    equation1 = Eq(nancy_now, candy_now + 8)\n\n    # The total number of flowers remains the same\n    equation2 = Eq(candy_initial - candy_now + nancy_initial + nancy_now, candy_initial + nancy_initial)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (candy_now, nancy_now))\n\n    # Return the number of flowers Candy has now\n    return solutions[candy_now]\n\nans = solution()"
    ],
    "a2bde406a8da4970a219afa0022bd89d": [
        "from math import factorial\n\ndef solution():\n    word = 'ARRANGE'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    divisor = 1\n    for count in letter_counts.values():\n        divisor *= factorial(count)\n    ans = factorial(len(word)) // divisor\n    return ans\n\nans = solution()"
    ],
    "b686e2f0e98042d783104bb0e8f6ac9a": [
        "def solution():\n    initial_cost = 200\n    increase_percentage = 0.45\n    final_cost = initial_cost * (1 + increase_percentage)\n    return final_cost\n\nans = solution()"
    ],
    "98be2cb5dcce45168975297b4f076410": [
        "def solution():\n    # Calculate the money given in one day\n    one_day_amount = 60 + 40\n\n    # Calculate the total amount given in three days\n    total_amount = one_day_amount * 3\n\n    return total_amount\n\nans = solution()"
    ],
    "3737e4a9ac8f48808137f02833fa17bc": [
        "def solution():\n    for num in range(100, 1000):\n        if num // 24 == 36 and num % 24 == 0:\n            return num\n\nans = solution()"
    ],
    "4d111600431f40ce98fbddc8a64d1e36": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq(60 - 8*(2*x - 5), 4)\n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "3dcee099b86f42178f5a693ab97c5bce": [
        "def solution():\n    temperature_midnight_friday = -5\n    temperature_midday_saturday = 17\n    overall_change = temperature_midday_saturday - temperature_midnight_friday\n    return overall_change\n\nans = solution()"
    ],
    "1b443edab3c147249e25ac875c4f6ab7": [
        "def solution():\n    n = 1\n    total = 1\n    while total <= 50:\n        n += 1\n        total += n\n    return total\n\nans = solution()"
    ],
    "5c90212721354a48a4e81ec2a43c81bc": [
        "def solution():\n    pen_price_p = 43 \n    booklet_price_pounds = 1.85 \n    total_budget_pounds = 10 \n\n    total_cost = 3 * (pen_price_p / 100) + 4 * booklet_price_pounds \n    change = total_budget_pounds - total_cost\n\n    return change\n\nans = solution()"
    ],
    "87e1f465cdbb4df7b961ae79f361a0c3": [
        "def solution():\n    people_in_front = 10\n    position_from_back = 14\n    ans = people_in_front + position_from_back - 1\n    return ans\n\nans = solution()"
    ],
    "55a229942e9e41f3a62e0880d02b5241": [
        "def solution():\n    ans = 10 + (10 * 10) - (10 / 10)\n    return ans\n\nans = solution()"
    ],
    "f8c6ec11093d496198cb0de06c6908ee": [
        "def solution():\n    population = 5351935  # The population of St Petersburg as per the latest figures available\n    return population\n\nans = solution()"
    ],
    "a24bbb90466f45bb817f8a9fa98063a4": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        str_i = str(i)\n        if abs(int(str_i[0]) - int(str_i[1])) >= 7 and abs(int(str_i[1]) - int(str_i[2])) >= 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "054c2ee09a60448ebda4bd6602806b2b": [
        "def solution():\n    count = 0\n    for i in range(6, 10):  # Thousands digit must be between 6 and 9 to be larger than 5000\n        for j in range(1, 10):  # Hundreds digit\n            for k in range(1, 10):  # Tens digit\n                for l in range(1, 10):  # Units digit\n                    if i % j == 0 and i % k == 0 and i % l == 0:\n                        # Check if the thousands digit is divisible by other digits\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "16105156e2914d5a8990c9b24f0b9981": [
        "def solution():\n    from sympy import prime\n\n    ans = prime(3)\n    return ans\n\nans = solution()"
    ],
    "4d1598c9ff7f4502a10cb35d69667abd": [
        "def solution():\n    digits = range(10)\n    correct_combination = [None] * 4\n\n    # Based on the fifth attempt, we know that none of the digits 1, 2, 5, 8 are in the combination\n    incorrect_digits = set([1, 2, 5, 8])\n\n    # Based on the first attempt, we know that two digits (5, 6 or 4, 8) are correct\n    possible_positions = [(0, 2), (1, 3), (0, 3), (1, 2)]\n    for positions in possible_positions:\n        if set([5648 // 10**i % 10 for i in positions]).isdisjoint(incorrect_digits):\n            for pos in positions:\n                correct_combination[pos] = 5648 // 10**pos % 10\n            break\n\n    # Based on the remaining attempts, refine the correct digits and their positions\n    attempts_with_two_wrong = [\n        (3628, [False, True, True, False]),\n        (3147, [True, True, False, False]),\n        (5629, [True, True, True, False])\n    ]\n    for attempt, mask in attempts_with_two_wrong:\n        for i, pos in enumerate(mask):\n            if not pos:\n                correct_combination[i] = attempt // 10**i % 10\n\n    return ''.join(map(str, correct_combination))\n\nans = solution()"
    ],
    "a736c91b54064c40a00c4a922d2dc285": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for the unknown value using tilde (~) notation\n    tilde = symbols('tilde')\n\n    # Define the equation based on the question\n    equation = Eq((tilde + 7) / 9, 9)\n\n    # Solve the equation\n    solutions = solve(equation, tilde)\n\n    # Return the solution for the variable (tilde)\n    return solutions[0]\n\nans = solution()"
    ],
    "392cb5c0bb804c05baec15996d6881df": [
        "def solution():\n    # Assuming the first child is at position 1\n    # The child directly opposite to the 4th child will be 4 + (total number of children / 2)\n    # Since the 22nd child is the one opposite to the 4th child (as given),\n    # 22 = 4 + (total number of children / 2)\n    # Solving for total number of children\n    total_children = (22 - 4) * 2\n    return total_children\n\nans = solution()"
    ],
    "27de9be9ab0d46f5a9881ef33bd601fa": [
        "def solution():\n    first_term = 10\n    difference = 4\n    num_weeks = 10\n    \n    # Calculate the nth (10th term in this case) term of arithmetic sequence\n    nth_term = first_term + (num_weeks - 1) * difference\n    \n    # Sum of the first n terms of an arithmetic sequence formula: (n/2) * (first_term + last_term)\n    total_coins = (num_weeks / 2) * (first_term + nth_term)\n    \n    return int(total_coins)\n\nans = solution()"
    ],
    "f3b1467c46654ba18779b73ec862809e": [
        "def solution():\n    lily = 24\n    gina = lily // 2\n    fiona = gina // 4\n\n    total = gina + fiona\n    return total\n\nans = solution()"
    ],
    "c8f6e26082ce4b84bed3069a498d5034": [
        "def solution():\n    ans = 0.8 * 3 * 10\n    return ans\n\nans = solution()"
    ],
    "e3c3e3c1805842db862f14a943f7260b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B, C, D, E = symbols('A B C D E')\n    \n    # Equations according to the given average information\n    equation1 = Eq((A + B + C) / 3, 95)\n    equation2 = Eq((B + C + D) / 3, 94)\n    \n    # Information about E's and A's scores and their relation to the others\n    equation3 = Eq(E, 96)\n    \n    # B and D have the same score\n    equation4 = Eq(B, D)\n    \n    # A's mark is the highest and all marks are above 91\n    constraints = (A > E, B > 91, C > 91, D > 91, E > 91)\n    \n    solutions = solve((equation1, equation2, equation3, equation4) + constraints, (A, B, C, D, E))\n    \n    # Since there are multiple solutions (A, B, C, D) that satisfy the equations, we need to find the one where A is highest\n    max_A = max(solutions, key=lambda x: x[0])\n    \n    return max_A[3]\n\nans = solution()"
    ],
    "ad676d9c940642cbac148da8b2a9a501": [
        "def solution():\n    initial_amount = 35000\n    final_amount = 37100\n    interest_rate = 1.5 / 100\n    years_assumed = 5\n\n    # Calculate the amount after the assumed years\n    calculated_amount = initial_amount * ((1 + interest_rate) ** years_assumed)\n    \n    # Check if the calculated amount matches the given final amount\n    if calculated_amount == final_amount:\n        return \"right\"\n    else:\n        # If she is wrong, find out how many years it took for the investment to reach the final amount\n        years_actual = 0\n        current_amount = initial_amount\n        while current_amount < final_amount:\n            current_amount *= (1 + interest_rate)\n            years_actual += 1\n\n        return years_actual\n\nans = solution()"
    ],
    "52696ab5f8494de9be7eed46df374cc7": [
        "def solution():\n    total_weight = 65  # average weight of all teachers\n    male_teachers = 3\n    male_avg_weight = 75\n    female_avg_weight = 60\n\n    # total weight of male teachers\n    total_male_weight = male_teachers * male_avg_weight\n\n    # Let x be the number of female teachers\n    # The total weight of all teachers is equal to the number of teachers multiplied by the average weight.\n    # total_weight = (total_male_weight + female_avg_weight * x) / (male_teachers + x)\n    \n    # Solve for x\n    # total_weight * (male_teachers + x) = total_male_weight + female_avg_weight * x\n    # 65 * male_teachers + 65 * x = total_male_weight + 60 * x\n    # 65 * x - 60 * x = total_male_weight - 65 * male_teachers\n    # 5 * x = total_male_weight - 65 * male_teachers\n    x = (total_male_weight - (total_weight * male_teachers)) / (total_weight - female_avg_weight)\n    \n    return int(x)\n\nans = solution()"
    ],
    "bcb4d3a73bdd461db258bc9c024573c1": [
        "def solution():\n    # Let j be the mass of the empty jar and m be the mass of Marmite per 1/4 jar.\n    # We have two equations based on the given information:\n    # j + 1/4 * m = 250 (1)\n    # j + 3/4 * m = 350 (2)\n    # By subtracting equation (1) from equation (2), we get:\n    # (3/4 * m - 1/4 * m) = 350 - 250\n    # 1/2 * m = 100\n    # m = 200g total mass of the Marmite for a full jar.\n    \n    # Now we substitute the value of m into the equation (1)\n    # j + 1/4 * 200 = 250\n    # j + 50 = 250\n    # j = 250 - 50\n    # j = 200g mass of the empty jar.\n    \n    mass_empty_jar = 250 - (1/4 * 200)\n    \n    return mass_empty_jar\n\nans = solution()"
    ],
    "f95f09c885d34503865d05cffe9b4ae0": [
        "def solution():\n    total_soda_liters = 13.15\n    bottle_part_liters = 9.1 * (1 / 7)\n    \n    cup_capacity_ml = 350\n    cups_liters = 4 * (cup_capacity_ml / 1000)  # Convert ml to liters\n\n    remaining_soda_liters = total_soda_liters - bottle_part_liters - cups_liters\n    \n    return round(remaining_soda_liters, 2)\n    \nans = solution()"
    ],
    "5072d7c5f2434099ac2734046be03e0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    father_current, son_current = symbols('father_current son_current') # father's current age and son's current age\n    \n    # 6 years ago, the father's age was 5 times the son's age\n    equation1 = Eq(father_current - 6, 5 * (son_current - 6))\n    \n    # The sum of their current ages is 78\n    equation2 = Eq(father_current + son_current, 78)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (father_current, son_current))\n\n    # father's current age is\n    return solutions[father_current].evalf()\n\nans = solution()"
    ],
    "3be5a913fea7494c80e0bfe6a08910b7": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Given values\n    m = 2.0  # mass in kg\n    k = 500  # spring constant in N/m\n    A = 0.08  # amplitude in m\n    x = 0.04  # displacement from equilibrium in m\n\n    # Total energy of the oscillator (E) is given by E = (1/2) * k * A^2\n    E = (1/2) * k * A**2\n\n    # Kinetic energy (KE) at displacement x is KE = E - potential energy at x\n    # Potential energy (PE) at x is PE = (1/2) * k * x^2\n    # So, KE = E - (1/2) * k * x^2\n\n    # Using the relation KE = (1/2) * m * v^2 to solve for speed v\n    v = symbols('v')\n    KE = E - (1/2) * k * x**2\n    equation = Eq((1/2) * m * v**2, KE)\n    solutions = solve(equation, v)\n\n    # The positive solution for speed is the one we're interested in\n    speed_at_x = max(solutions)\n\n    # Return the total energy and the speed\n    return E, speed_at_x\n\nans = solution()"
    ],
    "79ed6bec48e84620b031b1f6fe00dc58": [
        "def solution():\n    # In order to ensure a win, Rose must leave a multiple of 3 marbles after her first move.\n    # Because if Kylie takes away 1 or 2 marbles afterwards, Rose can always adjust her move to leave a multiple of 3 again.\n    # By this strategy, Rose will always take the last marble.\n    # So we look for a number x such that 14 - x is a multiple of 3.\n\n    for x in range(1, 3):  # Rose can take either 1 or 2 marbles\n        # Check if after Rose's move, the marbles left are a multiple of 3\n        if (14 - x) % 3 == 0:\n            return x  # Rose's winning first move\n\nans = solution()"
    ],
    "375112c34e0a4163ad8adac5448587c5": [
        "def solution():\n    a = 2023 ** 0.5\n    b = a  # since a and b are both square roots of 2023\n    ans = a + b - a * b\n    return ans\n\nans = solution()"
    ],
    "a4e26b2a8caa4a18ae49cec55472c63f": [
        "def solution():\n    return 245 - 182\n\nans = solution()"
    ],
    "c4ccfd8cb6b248a38a4fda147bef55ce": [
        "def solution():\n    total_pounds = 45\n    coin_value_pence = 5\n\n    num_coins = (total_pounds * 100) // coin_value_pence\n\n    return num_coins\n\nans = solution()"
    ],
    "32ad0f6a736244e3a4c5dda6e2a4ca47": [
        "def solution():\n    return -7 + -3\n\nans = solution()"
    ],
    "7d2942aa92ed44e29a1be000b1aaf0c2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining the variables\n    pip_per_minute, bud_per_minute = symbols('pip_per_minute bud_per_minute')\n\n    # Defining the equations based on the problem statement\n    total_distance = Eq(pip_per_minute + bud_per_minute, 540 / 3)  # They run 540 meters in total in 3 minutes\n    difference_in_speed = Eq(pip_per_minute, bud_per_minute + 20)  # Pip runs 20 meters more than Bud each minute\n\n    # Solving the system of equations\n    solutions = solve((total_distance, difference_in_speed), (pip_per_minute, bud_per_minute))\n\n    # Pip's total distance in 3 minutes\n    pip_total_distance = solutions[pip_per_minute] * 3\n\n    return pip_total_distance\n\nans = solution()"
    ],
    "2ec86cfd46db49fb8f7a59bc5ac2195f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of coins in each box\n    a, b, c = symbols('a b c')\n\n    # Create equations based on the problem statement\n    # Box A contains 4 times as many coins as Box B\n    equation1 = Eq(a, 4 * b)\n    # 6% of the coins in Box A and 20% of the coins in Box B were transferred to Box C\n    equation2 = Eq(c + 0.06 * a + 0.2 * b, 1220)\n    # After the transfer, Box C has 22% more than its original number\n    equation3 = Eq(c * 1.22, 1220)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n\n    # We need only the number of coins in box A at the beginning\n    return solutions[a]\n\nans = solution()"
    ],
    "8d4919986f144ffeae4055000acfbb47": [
        "def solution():\n    # Let the initial total number of bottled drinks be 100 for easy calculation.\n    # Initially, 60% were coffee, so 40% were tea.\n    initial_tea_percentage = 40\n\n    # In the end, 40% were coffee, so 60% were tea.\n    final_tea_percentage = 60\n\n    # The initial number of bottles of tea is the initial tea percentage.\n    initial_tea = initial_tea_percentage\n\n    # The final number of bottles of tea is the final tea percentage.\n    final_tea = final_tea_percentage\n\n    # Calculate the percentage increase in the number of bottles of tea.\n    percentage_increase = ((final_tea - initial_tea) / initial_tea) * 100\n\n    return percentage_increase\n\nans = solution()"
    ],
    "bcb80e6312784336a54c7308af6263cb": [
        "def solution():\n    # Convert hexadecimal numbers to decimal\n    decimal_sum = int('2A3', 16) + int('17B', 16)\n    # Convert the decimal sum back to hexadecimal\n    hexadecimal_sum = hex(decimal_sum)[2:].upper()\n    return hexadecimal_sum\n\nans = solution()"
    ],
    "d1ec5589c16045a8a24ef55131c530f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    x = symbols('x')\n\n    # Define the equation 3(2x + 1) = 75\n    equation = Eq(3 * (2 * x + 1), 75)\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "94913f61e8cf4fe8822180b9025e8717": [
        "def solution():\n    count = 0\n    for i in range(1, 501):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "afedf1aa53604878984ef0e2e15b9e62": [
        "def solution():\n    return 0.25 * 0.30 * 0.40 * 300\n\nans = solution()"
    ],
    "f17c963ecb1a4e4ea278edc6215a3efb": [
        "def solution():\n    ans = 152 + 45 - 52 + 16\n    return ans\n\nans = solution()"
    ],
    "1b3d94be63ab433dbec37b999532440f": [
        "def solution():\n    total_revenue = (5 * 2) + (2 * 5) + (3 * 10)\n    total_flowers = 5 + 2 + 3\n    average_price = total_revenue / total_flowers\n    return average_price\n\nans = solution()"
    ],
    "5260e448b7bd48408f279f75b3bc994b": [
        "def solution():\n    for tricycles in range(25):\n        cars = 24 - tricycles\n        if tricycles * 3 + cars * 4 == 86:\n            return tricycles\n\nans = solution()"
    ],
    "2eb9b96314cb4e659c476a8f2b9a7a6e": [
        "def solution():\n    washing_watermelons = 1\n    washing_glasses = 3\n    juicer_working = 4\n    pouring_juice = 1\n\n    total_time = washing_watermelons + washing_glasses + juicer_working + pouring_juice\n    \n    return total_time\n\nans = solution()"
    ],
    "7811a75321754070a2499adf8af1bec1": [
        "def solution():\n    lewis_money_p = 60  # Lewis has 60 pence\n    james_money_p = 110  # James has £1.10, which is equal to 110 pence\n\n    total_money_p = lewis_money_p + james_money_p\n    return total_money_p\n\nans = solution()"
    ],
    "5ef1c9a0438447ba9288b3fd84a1e5ea": [
        "def solution():\n    from math import factorial\n\n    total_letters = len(\"WINNING\")\n    w_count = \"WINNING\".count('W')\n    i_count = \"WINNING\".count('I')\n    n_count = \"WINNING\".count('N')\n    g_count = \"WINNING\".count('G')\n\n    ans = factorial(total_letters) // (factorial(w_count) * factorial(i_count) * factorial(n_count) * factorial(g_count))\n    \n    return ans\n\nans = solution()"
    ],
    "d500548212784181ae868f27144944a3": [
        "def solution():\n    count = 0\n    for x1 in range(3, 13):\n        for x2 in range(3, 13):\n            x3 = 13 - x1 - x2\n            if x3 >= 3:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "484ad20b23084a80a71997e86aafbbee": [
        "def solution():\n    ans = 7 * 0.4\n    return ans\n\nans = solution()"
    ],
    "cc8c61240c93470c82d6885fe1441a98": [
        "def solution():\n    from math import factorial\n    from sympy import symbols, Eq, solve\n    \n    # Define a function for the number of derangements (subfactorial)\n    def subfactorial(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (subfactorial(n - 1) + subfactorial(n - 2))\n    \n    # Calculate the number of ways for 6 students\n    return subfactorial(6)\n\nans = solution()"
    ],
    "e4dd70bfb9454c2286a8726ee86d101c": [
        "from itertools import combinations\nfrom math import prod\n\ndef solution():\n    all_numbers = set(range(1, 14))\n    possible_combinations = list(combinations(all_numbers, 9))\n    \n    # Calculate the number of factors for each number\n    def count_factors(n):\n        factors = 0\n        for i in range(1, n+1):\n            if n % i == 0:\n                factors += 1\n        return factors\n\n    # Store the counts of factors for numbers 1 through 13\n    factors_count = {n: count_factors(n) for n in all_numbers}\n    \n    # Filtering possible combinations based on the clues given\n    possible_numbers = []\n    for comb in possible_combinations:\n        # Two students know the numbers of different factors their number has\n        factors_seen = [factors_count[n] for n in comb if factors_count[n] > 1]\n        if len(set(factors_seen)) == len(factors_seen):\n            possible_numbers.append(comb)\n            \n    # Now further filter based on Alice's clue that her number is odd\n    # and May's number is smaller than Alice's by 2 and bigger than Mark's by 1\n    for comb in possible_numbers:\n        for alice in comb:\n            if alice % 2 == 1:  # Alice's number is odd\n                may = alice - 2\n                if may in comb:  # May's number is 2 less than Alice\n                    if may - 1 in comb:  # Mark's number is 1 less than May\n                        # Remove the numbers of Alice, May, and Mark from the set\n                        remaining_numbers = all_numbers - set(comb)\n                        # Product of four numbers not picked\n                        return prod(remaining_numbers)\n    \n    # If we cannot find such numbers, return an indicator such as 0 or None\n    return None\n\nans = solution()"
    ],
    "4fdb62c377d747f98107b2670277dd88": [
        "def solution():\n    # Let x be the number of bottles of lemonade sold ($4 each)\n    # Let y be the number of bottles of \"1000 Plus\" sold ($7 each)\n    # Total income: 4x + 7y = 2012\n    # Total bottles sold cannot exceed 350\n    # We are trying to minimize y, which means maximizing x, because x has the lower price per bottle\n    # Therefore, we start by trying to sell as many lemonade bottles as possible\n    # Hence, we iterate over the possible number of lemonade bottles sold until the income exceeds $2012\n    \n    max_lemonade_income = 4 * 350\n    if max_lemonade_income < 2012:\n        return \"Not possible\"\n    \n    for x in range(350, -1, -1):\n        total_income = 4 * x\n        if total_income > 2012:\n            continue\n        if (2012 - total_income) % 7 == 0:\n            y = (2012 - total_income) // 7\n            if x + y <= 350:\n                return y\n            \n    return \"No solution found\"\n\nans = solution()"
    ],
    "f881913e5ff54d8ea9433a89abb125b9": [
        "def solution():\n    # original ratio of blue pens to red pens is 3:5\n    # hence, let the original number of blue pens be 3x and red pens be 5x\n    # we know that 3x + 5x = 96 (total pens)\n    x = 96 / (3 + 5)\n\n    # original number of blue pens is 3x\n    original_blue_pens = 3 * x\n\n    # 60 red pens are added\n    new_red_pens = (5 * x) + 60\n\n    # let y be the number of blue pens added\n    # now, 40% of all pens are blue, so 60% are red\n    # hence, 0.4 * total_new_pens = original_blue_pens + y\n    # and 0.6 * total_new_pens = new_red_pens\n    # total_new_pens = original_blue_pens + y + new_red_pens\n    \n    # we set up the equation 0.4 * (original_blue_pens + y + new_red_pens) = original_blue_pens + y\n    from sympy import symbols, Eq, solve\n    \n    y = symbols('y')\n    total_new_pens = original_blue_pens + y + new_red_pens\n    equation = Eq(0.4 * total_new_pens, original_blue_pens + y)\n    solution = solve(equation, y)\n\n    return solution[0]\n\nans = solution()"
    ],
    "35f28b203ccb40b1b46923de84a56ccb": [
        "def solution():\n    mass = 2  # mass in kg\n    final_velocity = 8  # final velocity in m/s\n    time = 4  # time in seconds\n\n    # Using the formula for acceleration (a = (v - u) / t)\n    # where initial velocity (u) is 0 (since the object is stationary)\n    initial_velocity = 0\n    acceleration = (final_velocity - initial_velocity) / time\n\n    # Using the formula for force (F = m * a)\n    force = mass * acceleration\n\n    return force\n\nans = solution()"
    ],
    "f0db0aaf0c984695962fd98c327d2267": [
        "def solution():\n    for num in range(0, 101):\n        if num % 4 == 0 and num % 7 == 6 and num % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "4f1a75cb742a439caf72488bf6da4ab6": [
        "def solution():\n    # Using the Frobenius coin problem solution\n    # The largest number that cannot be expressed as a linear combination\n    # of 3 and 7 is given by (3*7) - 3 - 7 = 21 - 3 - 7 = 11.\n    return (3 * 7) - 3 - 7\n\nans = solution()"
    ],
    "94f9a30088f14e23ad5d292b0a21a0e4": [
        "def solution():\n    return 20172017 // 2017\n\nans = solution()"
    ],
    "eb8fb6f94cc1474ca839b50b4b0ce425": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    correct, incorrect = symbols('correct incorrect')\n\n    equation1 = Eq(correct, 3 * incorrect + 12)\n    equation2 = Eq(5 * correct - 2 * incorrect, 151)\n\n    solutions = solve((equation1, equation2), (correct, incorrect))\n\n    return solutions[correct]\n\nans = solution()"
    ],
    "31547fbcddfa44d195f62ee2a144d7f9": [
        "def solution():\n    total_cost = 2.42 * 32\n    cost_per_person = total_cost / 11\n    return round(cost_per_person, 2)\n\nans = solution()"
    ],
    "cbc6325d9c534f4b9977c61b302c8d0c": [
        "def solution():\n    total_children = 30\n    wearing_glasses = 8\n    wearing_watch = 12\n    wearing_both = 7\n\n    wearing_neither = total_children - (wearing_glasses + wearing_watch - wearing_both)\n\n    return wearing_neither\n\nans = solution()"
    ],
    "15d3db4f4eda491babda7b41a87df4bd": [
        "def solution():\n    for x in range(1, 21):\n        for y in range(x+1, 21):\n            if y == x + 1:\n                factors = set(range(1, 21)) - {x, y}\n                lcm = 1\n                for factor in factors:\n                    lcm = lcm * factor // math.gcd(lcm, factor)\n                if all(lcm % f == 0 for f in factors):\n                    ans = x + y\n                    return ans\n\nimport math\nans = solution()"
    ],
    "392b16f9a6ac48cca42c471b49e63670": [
        "def solution():\n    # Convert numbers from base 10 to base 7 and add them\n    num1_base7 = int(str(45), 7)\n    num2_base7 = int(str(66), 7)\n\n    # Performing the addition in base 10\n    sum_base10 = num1_base7 + num2_base7\n\n    # Convert the sum from base 10 to base 7\n    ans = ''\n    while sum_base10 > 0:\n        ans = str(sum_base10 % 7) + ans\n        sum_base10 //= 7\n\n    return int(ans)\n\nans = solution()"
    ],
    "a4b725f5709b47a982b182d038fac1ef": [
        "def solution():\n    return 628 * 5\n\nans = solution()"
    ],
    "8b67176726654523a82d12a0a53e5a72": [
        "def solution():\n    # Chess matches involve two players, so the total matches played equals twice the number of games\n    total_matches_individual = (4 + 6 + 2 + 1 + 3 + 5) * 2\n\n    # But every match is being counted twice since it involves two players\n    total_matches_actual = total_matches_individual // 2\n\n    # The total matches played must be divisible by 7 because each player plays with every other player once\n    # Thus every player must play the same number of matches\n    matches_per_player = total_matches_actual // 7\n\n    # Matches F played is equal to the matches per player\n    return matches_per_player\n\nans = solution()"
    ],
    "066d9987dbaf460b8056b1fcc71dd3f4": [
        "def solution():\n    return 67 * 23\n\nans = solution()"
    ],
    "ba994c84bc354e9ebb8e56f799001f32": [
        "def solution():\n    sum_of_numbers = 0\n    for i in range(161, 15*15):  # Since after 15*15 quotient changes\n        if i % 15 == i // 15:\n            sum_of_numbers += i\n    return sum_of_numbers\n\nans = solution()"
    ],
    "11d22bb6c3c14854bb9338e27e427226": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let linda_current represent Linda's current age and cici_current represent Cici's current age.\n    linda_current, cici_current = symbols('linda_current cici_current')\n\n    # When Cici was born, Linda was 11 years old - this gives us Cici's current age.\n    equation1 = Eq(linda_current - cici_current, 11)\n\n    # The sum of their ages 4 years later will be 37.\n    equation2 = Eq((linda_current + 4) + (cici_current + 4), 37)\n\n    # Solving the two equations to find Linda's current age.\n    solutions = solve((equation1, equation2), (linda_current, cici_current))\n\n    # Finding how old Linda will be 3 years later\n    linda_in_3_years = solutions[linda_current] + 3\n\n    return linda_in_3_years\n\nans = solution()"
    ],
    "8e079aa33fac45e2933fe8f9f57347fe": [
        "def solution():\n    first_term = 5\n    last_term = 85\n    difference = 4\n\n    num_terms = (last_term - first_term) // difference + 1\n\n    sum_seq = num_terms * (first_term + last_term) // 2\n\n    return sum_seq\n\nans = solution()"
    ],
    "f19f57dc40604eba86f9d7b2bb0b2c70": [
        "def solution():\n    # Let the common ratio multiplier be x.\n    # Then Jamie-Anne has 5x stamps and Natasha has 3x stamps.\n    # According to the problem, Jamie-Anne has 18 more stamps than Natasha.\n    # So, 5x - 3x = 18\n    x = 18 / 2  # Solving for x.\n\n    # Calculate the total number of stamps they have.\n    total_stamps = (5 * x) + (3 * x)\n\n    return total_stamps\n\nans = solution()"
    ],
    "95171e30845347a5a0bcbd146bae2a00": [
        "def solution():\n    # The least possible value for the first number\n    first_number_min = 5\n    # The least possible value for the second number\n    second_number_min = 2\n    # The least possible sum of the two numbers\n    least_sum = first_number_min + second_number_min\n    \n    return least_sum\n\nans = solution()"
    ],
    "bc39719692424efd97a67922f5478c31": [
        "def solution():\n    # Distance from home to school and back\n    distance_one_way = 300\n    total_distance = 2 * distance_one_way\n\n    # Speed uphill and downhill\n    speed_uphill = 10\n    speed_downhill = 30\n\n    # Time taken to travel uphill and downhill\n    time_uphill = distance_one_way / speed_uphill\n    time_downhill = distance_one_way / speed_downhill\n\n    # Total time for the round trip\n    total_time = time_uphill + time_downhill\n\n    # Average speed for the round trip\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "bdd45d02da3a4de3baed4b719bcf043f": [
        "def solution():\n    ans = 15.2 - 5.7\n    return ans\n\nans = solution()"
    ],
    "e3abc3aab67f4f7b981e00c65dd7ce44": [
        "def solution():\n    num_entrances = 5\n    num_people = 4\n\n    ways = num_entrances ** num_people\n\n    return ways\n\nans = solution()"
    ],
    "adb3d1fd535a48be8776775afaca3c49": [
        "def solution():\n    total_peaches = 18\n    peaches_per_bag = 2\n\n    num_bags = total_peaches // peaches_per_bag\n\n    return num_bags\n\nans = solution()"
    ],
    "8f4e94438ebd4f19ae675530ee3c1dd8": [
        "def solution():\n    from math import gcd\n\n    # Total number of fruits\n    apples = 226\n    pears = 352\n    oranges = 157\n\n    # Remaining fruits after dividing equally\n    apples_left = 10\n    pears_left = 28\n    oranges_left = 13\n\n    # Number of fruits distributed to students\n    apples_distributed = apples - apples_left\n    pears_distributed = pears - pears_left\n    oranges_distributed = oranges - oranges_left\n\n    # Greatest common divisor of distributed fruits\n    gcd_apples_pears = gcd(apples_distributed, pears_distributed)\n    gcd_all_fruits = gcd(gcd_apples_pears, oranges_distributed)\n\n    # The greatest possible number of students is the greatest common divisor\n    return gcd_all_fruits\n\nans = solution()"
    ],
    "f03076a28d8c4de9b99cc80f1669e699": [
        "def solution():\n    import math\n    # Judy can take 2 positions: First or Last\n    judy_positions = 2\n    # For the remaining friends, there are 5! ways to arrange them\n    friends_permutations = math.factorial(5)\n    # Total ways is the product of the two possibilities\n    total_ways = judy_positions * friends_permutations\n    \n    return total_ways\n\nans = solution()"
    ],
    "2f084b925d5c4e3c8e7edcf07200e325": [
        "def solution():\n    digit_count = 0\n    num = 1\n    while digit_count < 200:\n        digit_count += len(str(num))\n        if digit_count < 200:\n            num += 1\n    \n    # Get the exact digit by indexing the number string\n    index_of_digit = -1 * (digit_count - 200)\n    ans = int(str(num)[index_of_digit])\n    \n    return ans\n\nans = solution()"
    ],
    "b0092c2c2ecd4457baa2ed73067b8fd5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cost = symbols('cost')\n    price = cost + 40\n    discount_price = price * 0.8\n    profit = discount_price - cost\n    \n    equation = Eq(profit, 12)\n\n    cost_value = solve(equation, cost)\n\n    return cost_value[0]\n\nans = solution()"
    ],
    "452e139840314890bf5003e2f7071e6c": [
        "def solution():\n    ans = 6.25 * 8.27 * 16 + 1.25 * 0.827 * 8\n    return ans\n\nans = solution()"
    ],
    "20029a5838a5496b81ff40af3d12651e": [
        "def solution():\n    total_days = 4\n    total_tvs_per_day = 500\n    total_points = 9931\n    points_for_qualified = 5\n    points_lost_for_unqualified = 18\n\n    # Hypothesize all products are qualified\n    total_points_if_all_qualified = total_tvs_per_day * total_days * points_for_qualified\n    point_difference = total_points_if_all_qualified - total_points\n    \n    # Calculate number of unqualified products\n    unqualified_products = point_difference // (points_for_qualified + points_lost_for_unqualified)\n    \n    # Calculate number of qualified products\n    qualified_products = total_tvs_per_day * total_days - unqualified_products\n    return qualified_products\n\nans = solution()"
    ],
    "9f777ba0c7da4ecd859df39dac23c0ff": [
        "def solution():\n    # Given that their common factors are only 1 and 2,\n    # and the first (lowest) common multiple is 12,\n    # and one of the numbers is 6,\n    # the other number must be a number that does not have any other\n    # common factors with 6 except for 1 and 2.\n    # Thus, the other number cannot be a multiple of 3 (other than 6 itself).\n    # Since the LCM of the two numbers is 12,\n    # the other number must be a divisor of 12 that is not a multiple of 3.\n    \n    # Possible divisors of 12 are 1, 2, 3, 4, 6, and 12.\n    # However, because we want the common factors to be only 1 and 2,\n    # and one of the numbers is already 6, we also exclude 3 and 1.\n    \n    # Thus, the other number can only be 2 or 4.\n    # But since 6 is a multiple of 2, 2 is also excluded.\n    # So the only remaining number that satisfies all conditions is 4.\n    \n    other_number = 4\n    return other_number\n\nans = solution()"
    ],
    "b7b52b9389844c4ca62d9f3110155373": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Daniel's current age and his daughter's current age\n    daniel_age, daughter_age = symbols('daniel_age daughter_age')\n\n    # Equation representing the situation two years ago\n    equation1 = Eq(daniel_age - 2, 6 * (daughter_age - 2))\n\n    # Equation representing the situation two years from now\n    equation2 = Eq(daniel_age + 2, 4 * (daughter_age + 2))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (daniel_age, daughter_age))\n\n    # Daniel's current age\n    return solutions[daniel_age]\n\nans = solution()"
    ],
    "5018d5ab300649cebcf5c45010bddd83": [
        "def solution():\n    original_total = 7 * 12\n    new_mean = 11\n    new_total = 8 * new_mean\n\n    eighth_number = new_total - original_total\n\n    return eighth_number\n\nans = solution()"
    ],
    "9ed2edaef1a74aa7ab2da7a4c1e1e5ba": [
        "def solution():\n    # Let's denote the distance that Baye walked when they met as 'x'.\n    # Then April walked (1800 + 800 - x) meters to meet Baye.\n    \n    # Since April ran back to P after meeting Baye, the total distance April covered is twice the distance from P to where they met.\n    # So total distance April covered is 2 * (1800 + 800 - x).\n    \n    # When they met for the second time, the distances covered by April and Baye are in the ratio of her speeds, i.e., 1:4.\n    # Therefore, we can write the equation: x / (2 * (1800 + 800 - x)) = 1 / 4\n    \n    # Solve for x:\n    x = (1 / 4) * 2 * (1800 + 800)\n    \n    # Distance Baye is away from Q when April arrived back at P is (1800 - x).\n    distance_from_Q = 1800 - x\n\n    return distance_from_Q\n\nans = solution()"
    ],
    "8646401fa22043b3be02e989c5192b0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining symbols for hens (h) and roosters (r)\n    h, r = symbols('h r')\n\n    # Setting up the equations based on the problem statement\n    equation1 = Eq(h, 6 * r)                # The number of hens is 6 times the number of roosters\n    equation2 = Eq(h + 60, 4 * (r + 60))   # After increasing, the number of hens is 4 times the number of roosters\n\n    # Solving the equations for h and r\n    solutions = solve((equation1, equation2), (h, r))\n\n    # The total number of chickens before the increase is the number of hens plus the number of roosters\n    total_chickens = solutions[h] + solutions[r]\n\n    return total_chickens\n\nans = solution()"
    ],
    "a4a8d66b728347868536b3995b8fc695": [
        "def solution():\n    series_sum = sum(range(1, 9)) + sum(range(7, 0, -1)) + 3\n    return series_sum\n\nans = solution()"
    ],
    "d9216e847ffd4805a2ca577a27228cc1": [
        "def solution():\n    sequence = '538462'\n    position = 2021\n    \n    # Find the index of the 2021st digit in the repeating sequence\n    index = (position - 1) % len(sequence)\n    \n    # Get the digit at the index\n    digit = sequence[index]\n    \n    return int(digit)\n\nans = solution()"
    ],
    "216f3c5f6bd1448286cfaa40eb464d6f": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        count += str(i).count('9')\n    return count\n\nans = solution()"
    ],
    "8f3600a93e7c46e28e43d9b4b9104ddc": [
        "def solution():\n    ans = 8000 * 0.7\n    return ans\n\nans = solution()"
    ],
    "69c45c2ab19846ef90c4ca25ad543301": [
        "def solution():\n    numbers = [375, 753, 537, 357, 573, 735]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "dfbce185a0d1406bb45782f37f1adb2b": [
        "def solution():\n    count = 0\n    # For two-digit palindromes: ab where a = b\n    for a in range(1, 10):\n        count += 1  # 11, 22, 33, ..., 99\n    \n    # For three-digit palindromes: aba where a can vary from 1 to 9 and b from 0 to 9\n    for a in range(1, 10):\n        for b in range(0, 10):\n            count += 1  # 101, 111, 121, ..., 191, 202, ..., 909, 919, 929, ..., 999\n\n    return count\n\nans = solution()"
    ],
    "47d4d71ebd964d418d18b5348710fb9b": [
        "def solution():\n    sequence = [2, 3, 1, 4]\n    index = (100 - 1) % len(sequence)  # Subtract 1 because the list is 0-indexed\n    return sequence[index]\n\nans = solution()"
    ],
    "e2ea592e99324a6b86bbb07ba971a430": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let money Bud had initially be x\n    x = symbols('x')\n\n    # According to question\n    equation = Eq((1/3 + 2/5) * x, 132)\n\n    # Solving for x\n    initial_money = solve(equation, x)\n\n    return initial_money[0]\n\nans = solution()"
    ],
    "dbc4269e2e99475794fddbd7d1e826c6": [
        "def solution():\n    a = 1 + 0.23 + 0.34\n    b = 0.23 + 0.34 + 0.45\n    c = a * b\n    d = (1 + 0.23 + 0.34 + 0.45) * (0.23 + 0.34)\n    ans = c - d\n    return ans\n\nans = solution()"
    ],
    "1ccbabdc7f034326be8b94b02ccbf7ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    parcel_a, parcel_b, parcel_c = symbols('parcel_a parcel_b parcel_c')\n\n    equation1 = Eq(parcel_a, 5 * parcel_b)\n    equation2 = Eq(parcel_c, parcel_b - 75)\n    equation3 = Eq(parcel_a + parcel_b + parcel_c, 835)\n\n    solutions = solve((equation1, equation2, equation3), (parcel_a, parcel_b, parcel_c))\n\n    return solutions[parcel_a]\n\nans = solution()"
    ],
    "c249f8e6939148b99f296ae70f7cf7e8": [
        "def solution():\n    ans = 4125 - 837\n    return ans\n\nans = solution()"
    ],
    "a93778b948054d42ad167593922df9c6": [
        "def solution():\n    # Worst case scenario Darrell draws all blue and white beads before getting 5 green beads\n    blue_beads = 5\n    white_beads = 6\n    # Since he needs 5 green beads, he could draw the other 3 greens first before getting the 5 required.\n    green_beads_needed = 5 - 1\n    \n    # Total number of beads to draw to get 5 green beads for sure\n    ans = blue_beads + white_beads + green_beads_needed\n\n    return ans\n\nans = solution()"
    ],
    "101e7c9b793b4e26ac47357202b6291d": [
        "def solution():\n    count_5 = 105 // 5\n    count_7 = 105 // 7\n    count_5_and_7 = 105 // (5*7)\n\n    return count_5 + count_7 - count_5_and_7\n\nans = solution()"
    ],
    "2b1f58b0e57c45099538b16cb3f3c104": [
        "def solution():\n    total_digits = 0\n    for i in range(1, 216):\n        total_digits += len(str(i))\n    return total_digits\n\nans = solution()"
    ],
    "eca2b23e39bc4c299b30d3fbc9b3d73d": [
        "def solution():\n    for number in range(10000, 100000):\n        if int(str(1) + str(number)) * 3 == int(str(number) + str(1)):\n            return number\n\nans = solution()"
    ],
    "b45003629b394ccebb1e2b405d724add": [
        "def solution():\n    digits = 0\n    for i in range(1, 82):\n        digits += len(str(i))\n    return digits\n\nans = solution()"
    ],
    "1222cdddea1c4817bb25740ae257c8cd": [
        "def solution():\n    first_to_fourth_floor_time = 12  # Time taken to walk from 1st to 4th floor\n    floors_walked = 4 - 1  # Floors walked when going from 1st to 4th floor\n\n    # Assuming the speed is constant, the time taken is directly proportional to the number of floors.\n    # First, we calculate the time taken to walk one floor\n    time_per_floor = first_to_fourth_floor_time / floors_walked\n\n    # Now, calculate the time to walk from the 1st floor to the 8th floor\n    total_time = time_per_floor * (8 - 1)  # Number of floors when going from 1st to 8th\n\n    return total_time\n\nans = solution()"
    ],
    "0591335fbeb544698580a0e98be03d2a": [
        "def solution():\n    a = 6\n    b = 2\n    ans = 5 * a - 2 * b\n    return ans\n\nans = solution()"
    ],
    "979c9332296e4b05927d9ad6ccb64f02": [
        "def solution():\n    # Initially, let's assume the number of birds is 8x and squirrels is 5x.\n    # After one year, the number of squirrels increased by 20%.\n    # So the new number of squirrels is 5x * 120% = 6x.\n\n    # As the total number remains the same, the new total is 13x (since 8x + 5x = 13x before the change).\n    # The new number of birds then is 13x - 6x = 7x.\n\n    # The decrease in the number of birds is 8x - 7x = x.\n    # To find the percentage of the birds that flew away is (x / 8x) * 100%.\n\n    birds_flew_away_percentage = (1 / 8) * 100\n\n    return birds_flew_away_percentage\n\nans = solution()"
    ],
    "9c0a5f1ed9254394ae35f6dd067361f9": [
        "def solution():\n    average_pizzas_per_month = 15\n    total_months = 5  # From March to July inclusive\n\n    total_pizzas = average_pizzas_per_month * total_months\n\n    return total_pizzas\n\nans = solution()"
    ],
    "1b2e33b69c4341748d743ea3c35f44bd": [
        "def solution():\n    remainder = 3\n    possible_values = set()\n\n    for divisor in range(1, 40):\n        for quotient in range(1, 40):\n            dividend = divisor * quotient + remainder\n            if divisor + dividend + quotient + remainder == 40:\n                possible_values.add(dividend // quotient)\n\n    return len(possible_values)\n\nans = solution()"
    ],
    "40d0f5e5a3d04db08f0040c8220611b9": [
        "def solution():\n    count = 0\n    # Since the baskets are identical, we only need to care about the distribution of apples,\n    # not the order of the baskets.\n    # We can think about 3 dividers and 6 apples (represented as stars *), for example:\n    # **|**|** would mean 2 apples in each basket.\n    # The problem then becomes the same as finding the number of solutions to:\n    # a + b + c = 6, where a, b, c are non-negative integers.\n    # This is a typical stars and bars problem and can be solved by:\n    # (n+k-1)C(k-1) where 'n' is the number of stars and 'k' is the number of bars,\n    # and C is the combination function.\n    # Since we have 6 apples and want to split them into 3 baskets, we can use 2 dividers (bars).\n    n = 6  # number of stars (apples)\n    k = 3  # number of parts (baskets)\n    bars = k - 1  # number of bars\n\n    # Calculate the number of combinations\n    # Using the formula for combinations: C(n, k) = n! / (k! * (n-k)!)\n    count = math.comb(n + bars, bars)\n\n    return count\n\n# Using the built-in function from the math library\nimport math\n\nans = solution()"
    ],
    "14d6fb53ee054b819a454314775c99b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    fiona, gary, harold = symbols('fiona gary harold')\n\n    # Fiona and Gary picked 973 of strawberries in total\n    equation1 = Eq(fiona + gary, 973)\n    # Fiona and Harold picked 1823 of strawberries in total\n    equation2 = Eq(fiona + harold, 1823)\n    # Harold picked 6 times as many strawberries as Gary\n    equation3 = Eq(harold, 6 * gary)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (fiona, gary, harold))\n\n    return solutions[fiona]\n\nans = solution()"
    ],
    "6fec75e44860480685b5445a5272826d": [
        "def solution():\n    first_day_pages = 30\n    last_day_pages = 70\n    difference = 4\n\n    num_days = ((last_day_pages - first_day_pages) / difference) + 1\n\n    return int(num_days)\n\nans = solution()"
    ],
    "1804adbd1c694fbf927bc62b4de481a7": [
        "def solution():\n    return 32 * 2.99\n\nans = solution()"
    ],
    "21f2e786c44e43fd8fbda4a44480bfbf": [
        "def solution():\n    total_juice = 8 * 3  # 8 cartons of 3 liters each\n    juice_after_drinking = total_juice - 9  # after drinking 9 liters\n    containers_needed = -(-juice_after_drinking // 5)  # round up division\n\n    return containers_needed\n\nans = solution()"
    ],
    "edb6ff670e7a48e9aef3d4e832e24086": [
        "def solution():\n    common_difference = 15 - 7\n    last_term = 31\n    next_term = last_term + common_difference\n    return next_term\n\nans = solution()"
    ],
    "1abbedb2f71c4dbab5df55bde5e26a5d": [
        "def solution():\n    n = 50\n    ans = n * (n + 1) // 2\n    return ans\n\nans = solution()"
    ],
    "7bb759a90ae748649b4ddfa82640d631": [
        "def solution():\n    ans = 782 - 9 * 52 // 2\n    return ans\n\nans = solution()"
    ],
    "9cd1a6eac3734a348b37444a5f4ed5e0": [
        "def solution():\n    ans = 7 * 8\n    return ans\n\nans = solution()"
    ],
    "5b2b9a10bf9b44c1988bdcc8f01d4a18": [
        "def solution():\n    # According to the given pattern, we analyze the operation to find a relationship\n    # Let's denote the operation ◈ as a function f such that a ◈ b = f(a, b)\n    \n    # From the first example: 4 ◈ 7 = 4*7 - (7-4) = 28 - 3 = 25 (correct answer should be 21, so we adjust)\n    # From the second example: 6 ◈ 22 = 6*22 - (22-6) = 132 - 16 = 116 (correct should be 20, so we adjust)\n    # From the third example: 8 ◈ 30 = 8*30 - (30-8) = 240 - 22 = 218 (correct should be 26, so adjust)\n    \n    # Notice that the difference between our result and the expected result is increasing (4, 96, 192)\n    # Seems like the difference between a*b and the correct answer is related to b in such a way that we have to subtract b\n    # So we try the formula:\n    # a ◈ b = a * b - (a + b)\n    \n    # Let's test the formula with the given values:\n    # 4 ◈ 7 = 4*7 - (4 + 7) = 28 - 11 = 17\n    # 6 ◈ 22 = 6*22 - (6 + 22) = 132 - 28 = 104\n    # 8 ◈ 30 = 8*30 - (8 + 30) = 240 - 38 = 202\n    \n    # Now we see the pattern where the correct result is 4 less than our initial calculation:\n    # So final formula considering the pattern:\n    # a ◈ b = a * b - (a + b) + 4\n    \n    # Now let's calculate 9 ◈ 20 using our derived formula:\n    ans = 9 * 20 - (9 + 20) + 4\n    \n    return ans\n\nans = solution()"
    ],
    "1b458ff9afcc4e6694b4762bc4c0b43d": [
        "def solution():\n    count = 0\n    for A in range(1, 10):  # Since 9/A < 1, A must be greater than 9 for it to be true\n        if 5/9 < 9/A < 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "83fd4800ad634c9cb2b8e8bbefea460b": [
        "def solution():\n    loafs_per_cup = 7 / 4\n    total_loafs_required = 35\n    cups_needed = total_loafs_required / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "de32a278ca184c9c9f171ce6754bd1c9": [
        "def solution():\n    from itertools import permutations\n    \n    # We are looking for all permutations of the numbers 1 to 9 to assign to letters D, A, R, T, C\n    for values in permutations(range(1, 10), 5):\n        D, A, R, T, C = values\n        if D + A + R + T == 11 and T + A + R + T == 12 and C + A + R + T == 13:\n            return A + R + T\n\nans = solution()"
    ],
    "71733d004c514cf2bf9b3a3ddaab0766": [
        "def solution():\n    friends = 4\n    # Each friend sends a card to every other friend.\n    cards_sent_by_each = friends - 1\n    # Total number of cards is the number sent by each friend times the number of friends.\n    total_cards = friends * cards_sent_by_each\n\n    return total_cards\n\nans = solution()"
    ],
    "630d3f51949a4ab29f59d2121794d3d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    equation1 = Eq(boys + girls, 39)  # Total number of students\n    equation2 = Eq(boys/4, 2*girls/5)  # Relationship between number of boys and girls\n    \n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    return solutions[boys] - solutions[girls]\n\nans = solution()"
    ],
    "1af542041fcd45c9a176b5924756243f": [
        "def solution():\n    members_left_of_Tanya = 3\n    members_right_of_Tanya = 5\n    Tanya = 1\n\n    total_members = members_left_of_Tanya + Tanya + members_right_of_Tanya\n    return total_members\n\nans = solution()"
    ],
    "42831d4ef6484891b15f159d0746344e": [
        "def solution():\n    ans = 52 / (2/3)\n    return ans\n\nans = solution()"
    ],
    "33a1b183569242aa916ecbe40586c0c7": [
        "def solution():\n    from sympy import primerange\n    \n    number = 87878\n    for prime in reversed(list(primerange(1000, 10000))):\n        if number % prime == 0:\n            return prime\n\nans = solution()"
    ],
    "8d22899bdd964169a2e962c83bfbcbd5": [
        "def solution():\n    total_weight = 24 * 5  # total weight of crates in tonnes\n    max_load_per_van = 12  # maximum load each van can carry in tonnes\n    number_of_vans = -(-total_weight // max_load_per_van)  # ceiling division to get the number of vans needed\n    return number_of_vans\n\nans = solution()"
    ],
    "d0dd7735401a440189d8289ae8ab1028": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    daniel, patrick = symbols('daniel patrick')\n\n    # Set up the equation\n    equation = Eq(patrick + 10, 2 * (daniel - 24))\n\n    # Solve the equation\n    solution = solve((equation, Eq(daniel, patrick)), (daniel, patrick))\n\n    return solution[daniel]\n  \nans = solution()"
    ],
    "3cac306af46048b1913124fd77518e07": [
        "def solution():\n    ans = (128 - (24 + 16) // 5) * 2\n    return ans\n\nans = solution()"
    ],
    "c8f89b66009449e3865d5474344519ce": [
        "def solution():\n    # Distance covered in each stage of the race\n    distance_first_stage = 280  # metres\n    distance_second_stage = 400 # metres\n    distance_third_stage = 800 - distance_first_stage - distance_second_stage  # metres\n\n    # Speed in each stage of the race\n    speed_first_stage = 7     # metres per second\n    speed_second_stage = 5    # metres per second\n    speed_third_stage = 8     # metres per second\n\n    # Time taken in each stage of the race\n    time_first_stage = distance_first_stage / speed_first_stage   # seconds\n    time_second_stage = distance_second_stage / speed_second_stage # seconds\n    time_third_stage = distance_third_stage / speed_third_stage   # seconds\n\n    # Total time taken for the entire race\n    total_time = time_first_stage + time_second_stage + time_third_stage  # seconds\n    \n    return total_time\n\nans = solution()"
    ],
    "82b6a8beca7d4600a963dd45eccccf7d": [
        "def solution():\n    # Using P(n, k) - The number of ways to partition n using only numbers up to k\n    def P(n, k):\n        if n == 0:\n            return 1\n        if k == 0 or n < 0:\n            return 0\n        return P(n - k, k) + P(n, k - 1)\n\n    # The number of ways to split the number 5 using positive integers\n    return P(5, 5)\n\nans = solution()"
    ],
    "f701b731918b424b845fa7f5be85cca5": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "b9cbfde4746d478da4ea66e77bc853b0": [
        "def solution():\n    henry = 17\n    jack = 10 + 3 * henry\n    return jack\n\nans = solution()"
    ],
    "069dc14c48254481a3bc04db18550ed3": [
        "def solution():\n    whale_depth = -82 # Whale is 82 metres below sea level, represented as a negative number\n    plane_height = 569 # Plane is 569 metres above sea level, represented as a positive number\n\n    # The vertical distance between the whale and plane is the sum of their absolute distances from sea level.\n    vertical_distance = abs(whale_depth) + abs(plane_height)\n    return vertical_distance\n\nans = solution()"
    ],
    "ce865959d3344e57a3aaf073ee2bb3fb": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n\n    # The smallest number of right-handed girls would occur if all non-right-handed pupils were girls\n    # Therefore, calculate the number of left-handed students.\n    left_handed = total_pupils - right_handed\n\n    # Calculate the maximum number of left-handed girls.\n    # If there are more girls than left-handed students, the difference must be right-handed girls.\n    right_handed_girls_minimum = max(0, girls - left_handed)\n    \n    return right_handed_girls_minimum\n\nans = solution()"
    ],
    "466b36af3a8446caafde7a548b3f78e0": [
        "def solution():\n    # The smallest difference will always occur when the two numbers are closest to each other.\n    # Arranging the digits 1 to 9 to form the smallest and largest numbers respecting the rules.\n    smallest_number = int('123456789')   # Smallest possible number with the digits 1-9\n    largest_number = int('987654321')    # Largest possible number with the digits 1-9\n    \n    # Subtracting the smallest number from the one just larger than it, means replacing rightmost \"1\" with \"2\".\n    # Replace the rightmost \"9\" in largest number with \"8\" to get second largest number possible\n    second_smallest_number = int('12345679' + '2')  # Replaces '1' at the end with '2'\n    second_largest_number = int('98765432' + '1')  # Replaces '9' at the end with '8'\n    \n    # The difference between the two smallest numbers is just the difference between one's place: (2-1).\n    smallest_diff = second_smallest_number - smallest_number\n    # Alternatively, the smallest difference is also the difference between the two largest numbers\n    # because the 1's place is the only one that differs: (1-0).\n    largest_diff = largest_number - second_largest_number\n    \n    # The smallest possible difference is the same whether we are talking about the smallest or largest numbers\n    ans = min(smallest_diff, largest_diff)\n\n    return ans\n\nans = solution()"
    ],
    "d7f813e5b15745bbaf0c9127836fa459": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_fruits = symbols('total_fruits')\n    \n    equation1 = Eq((2/3) * total_fruits - (1 - 2/3 - 1/9) * total_fruits, 12)\n    \n    total_fruits_solution = solve(equation1, total_fruits)\n    total_fruits_number = total_fruits_solution[0]\n    \n    lemons = (1 - 2/3 - 1/9) * total_fruits_number\n\n    return int(lemons)\n\nans = solution()"
    ],
    "fffb4e32f90b489bbe7949d334d8186e": [
        "def solution():\n    ans = 234000 // 520\n    return ans\n\nans = solution()"
    ],
    "2d6aea4ba7814aac9c2750870ec89264": [
        "def solution():\n    jenny = 6\n    qiqi = jenny + 5\n    return qiqi\n\nans = solution()"
    ],
    "87b40651078348b78ccc888ac86bf65e": [
        "def solution():\n    probability_over_20 = 0.6\n    probability_over_25_given_over_20 = 0.3 / probability_over_20\n\n    return probability_over_25_given_over_20\n\nans = solution()"
    ],
    "ec878d4f92a64aa1ab12f86c3fa8a94b": [
        "def solution():\n    # Number of skirts a worker makes each day\n    skirts_per_worker = 6\n\n    # The total number of skirts made is the sum of an arithmetic series\n    # where the number of skirts made each day is a term in the series.\n\n    # The first term (a) is the number of skirts made on the first day (6 skirts, since there is only one worker on the first day).\n    a = skirts_per_worker * 1\n\n    # The last term (l) is the number of skirts made on the ninth day\n    # Since one worker is added each day, there will be 9 workers on the ninth day.\n    l = skirts_per_worker * 9\n\n    # Number of terms (n) in the arithmetic sequence is 9 (one for each day).\n    n = 9\n\n    # The sum of an arithmetic series is given by: sum = n/2 * (a + l)\n    # Where n is the number of terms, a is the first term and l is the last term.\n    total_skirts = n/2 * (a + l)\n\n    # The result is the total number of skirts made in nine days.\n    return int(total_skirts)\n\nans = solution()"
    ],
    "35851918f9924fceb5a562dd5d192675": [
        "def solution():\n    # If 5 taps take 2 minutes to fill a 1-litre jug,\n    # one tap would take 5 times longer to fill the same 1-litre jug.\n    time_for_one_tap = 2 * 5  # minutes for 1 litre\n    \n    # Now we need to find out how long it takes to fill a 500ml jug,\n    # which is half the size of a 1-litre jug. Hence, it would take half the time.\n    time_for_half_litre = time_for_one_tap / 2  # minutes for 0.5 litre\n    \n    return time_for_half_litre\n\nans = solution()"
    ],
    "de4ad58a954b4989ae634d7131538ded": [
        "def solution():\n    # Let x be the number of erasers John's brother has.\n    # Then John has x + 32 erasers.\n    # Together, they have a total of 246 erasers, so:\n    # x + (x + 32) = 246\n    # 2x + 32 = 246\n    # 2x = 246 - 32\n    # 2x = 214\n    # x = 214 / 2\n    x = (246 - 32) / 2\n    return x\n\nans = solution()"
    ],
    "4c87648eb039475abd9708a1ed7cecfa": [
        "def solution():\n    numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 29]\n    total_sum = sum(numbers)\n    return total_sum\n\nans = solution()"
    ],
    "e099576e4e594256ae673a9a633c5f85": [
        "def solution():\n    for a in range(1, 399):\n        if a * a + a + a == 399:\n            return a\n\nans = solution()"
    ],
    "f5c4e7bc746541e9b6316434d0ceb4b9": [
        "def solution():\n    ben_height = 110  # Ben's height in cm\n    height_difference = 20  # Ben is 20cm shorter than Sally\n\n    sally_height = ben_height + height_difference\n    return sally_height\n\nans = solution()"
    ],
    "7a70eb04e5694b2f959619353709df11": [
        "def solution():\n    men = symbols('men')\n    equation = Eq((3/5) * (men + 140) + (1/2) * ((2/5) * (men + 140)) + men, men + 140)\n    total_visitors = solve(equation, men)\n    return total_visitors[0] + 140\n\nans = solution()"
    ],
    "a59a1a5e7bb041eeba8b3ee3076a0168": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 3, 4, 6, 7, 8]\n    max_sum = 0\n    for perm in permutations(digits, 3):\n        remaining_digits = list(set(digits) - set(perm))\n        max_first_number = int(''.join(map(str, sorted(perm, reverse=True))))\n        max_second_number = int(''.join(map(str, sorted(remaining_digits, reverse=True))))\n        max_sum = max(max_sum, max_first_number + max_second_number)\n    return max_sum\n\nans = solution()"
    ],
    "4ca9bdd241ae40399356da6f218dbb41": [
        "def solution():\n    numerator = 360\n    denominator = 70 - (4 * 16)\n\n    ans = numerator / denominator\n\n    return ans\n\nans = solution()"
    ],
    "1b35f91f96ce4f3c9d7ed9202f8cdf3f": [
        "def solution():\n    total_volume_ml = 2000  # 2 litres in millilitres\n    volume_drank_ml = 350   # Quantity of cola drank in millilitres\n    \n    volume_left_ml = total_volume_ml - volume_drank_ml\n    return volume_left_ml\n\nans = solution()"
    ],
    "6f30ded079154369a2666ef1c735c804": [
        "def solution():\n    return 0.40 * 3280\n\nans = solution()"
    ],
    "77d56c10f2874a70a787b5301834ff74": [
        "def solution():\n    pay_per_match = 500\n    pay_per_goal = 100\n    games_played = 20\n    average_goals_per_game = 2\n\n    total_earnings = (pay_per_match * games_played) + (pay_per_goal * average_goals_per_game * games_played)\n\n    return total_earnings\n\nans = solution()"
    ],
    "faea17ac401e48f69feca7264a676aa1": [
        "def solution():\n    # Initialize the sequence list\n    sequence = [1, 8, 16, 23, 46, 53]\n    \n    # The sequence is alternating between two different operations\n    # Rule 1: n * 2 - 7\n    # Rule 2: n + 7\n    \n    # Identify the next operation to apply by looking at the length of the sequence\n    next_index = len(sequence)\n    if next_index % 2 == 0:  # even index, apply Rule 1\n        next_num = sequence[next_index - 1] * 2 - 7\n    else:  # odd index, apply Rule 2\n        next_num = sequence[next_index - 1] + 7\n    \n    return next_num\n\nans = solution()"
    ],
    "15d47923017f46819afb2823ad09cc4f": [
        "def solution():\n    ans = 125 * 33 * 8\n    return ans\n\nans = solution()"
    ],
    "8521e58090644e50b36a4c1538e31de9": [
        "def solution():\n    total_cost = 26.8\n    total_kilograms = 8\n    cost_per_kilogram = total_cost / total_kilograms\n    return cost_per_kilogram\n\nans = solution()"
    ],
    "8ede2732f5484360930b19455debcec8": [
        "def solution():\n    def operation_sun(a, b):\n        return sum(range(a, a + 2 * b, 2))\n\n    ans = operation_sun(1, 10)\n    return ans\n\nans = solution()"
    ],
    "92c3ddc959274727b4fd914c29d362cb": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 4):\n        M, A, T, H = perm\n        # Ensure that the first digits are not zero\n        if M == 0 or H == 0:\n            continue\n        # Calculate MATH + HTAM\n        math_val = M*1000 + A*100 + T*10 + H\n        htam_val = H*1000 + T*100 + A*10 + M\n        if math_val + htam_val == 12221:\n            return A + M + T + H\n    return None\n\nans = solution()"
    ],
    "519388df35614f98adbf4fccf30c1f5e": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if str(i).count('7') >= 2:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "45f8a5a1f53f4bff9dace272c0ede1d7": [
        "def solution():\n    return 10 - 5 + 1\n\nans = solution()"
    ],
    "ec0dc6144d204d6c943bc67a1de14ef9": [
        "def solution():\n    total_cost = 19.20\n    num_balls = 16\n\n    cost_per_ball = total_cost / num_balls\n\n    return cost_per_ball\n\nans = solution()"
    ],
    "ba1ea0471abe4147b19a80a73dee7d82": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of $2 notes and y be the number of $5 notes\n    x, y = symbols('x y')\n    \n    # Total pieces of notes initially\n    equation1 = Eq(x + y, 55)\n    \n    # Cindy spends 1/3 of the $2 notes\n    x_spent = x / 3\n    \n    # Cindy receives 8 more $5 notes\n    y_added = y + 8\n    \n    # After transactions, number of $5 notes is 3/7 of remaining notes\n    equation2 = Eq(y_added, (y + 8 + 2 * (x - x_spent)) * 3 / 7)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Calculate the total amount of money initially\n    total_money = solutions[x] * 2 + solutions[y] * 5\n    \n    return total_money\n\nans = solution()"
    ],
    "e069b4976d444e998bace1344680903f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the capacity of the pool be x tons\n    # Let the flow rate of A be a tons/hour and that of B be 2a tons/hour\n    # Let the time taken for A and C to fill the pool be t hours, and for B and C be t' hours\n    x, a, t, tp = symbols('x a t tp')\n    \n    # Equation representing the amount of water A and C fill in time t\n    equation1 = Eq(a*t + (x - 18), x)\n    # Equation representing the amount of water B and C fill in time t'\n    equation2 = Eq(2*a*tp + (x - 27), x)\n    \n    # Solving the equations\n    solutions = solve((equation1, equation2), (x, a, t, tp))\n\n    # The pool capacity will be the value of x\n    return solutions[x]\n\nans = solution()"
    ],
    "56ce2f46479443bfaa5b050d2e0cbbe4": [
        "from math import factorial\n\ndef solution():\n    # Considering Mr. Spencer and his two children as a single unit, since he has to sit between them.\n    # We have 4 units to arrange: (Mr. Spencer and his children) and the 3 other people.\n    units_to_arrange = factorial(4)\n\n    # The two children can be arranged in 2! ways.\n    children_arrangements = factorial(2)\n\n    # There are 4 possible seats for the (Mr. Spencer and children) unit, because once Mr. Spencer\n    # takes a seat, the children's positions are fixed assuming 1 seat on each side.\n    # This detail is inherently taken care of in the 4! arrangements of units,\n    # as the (Mr. Spencer and children) unit is considered as one and will take one position.\n\n    # The total arrangements will be the product of the possible unit arrangements\n    # and the internal arrangement of Mr. Spencer's children.\n    total_arrangements = units_to_arrange * children_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "efd4072c0059428488794f72455b87a4": [
        "def solution():\n    return (1.9 + 1.99) / 2\n\nans = solution()"
    ],
    "db79add64b5e4e55bd1c4d7204bfe7d4": [
        "def solution():\n    total_sweets = 60\n    sweets_eaten = total_sweets / 2\n    sweets_left = total_sweets - sweets_eaten\n    sweets_given_away = sweets_left / 3\n    sweets_left_after_giving = sweets_left - sweets_given_away\n    return sweets_left_after_giving\n\nans = solution()"
    ],
    "2baa1f80095e4ef99463beca11920717": [
        "def solution():\n    # 1 horse eats the same amount of grass per day as 4 sheep\n    horse_eats_per_day = 4 * 1  # Assuming 1 sheep eats 1 unit of grass\n    sheep_eats_per_day = 1\n    \n    # 20 horses can eat all grass in 12 days\n    total_grass = 20 * horse_eats_per_day * 12\n    \n    # Checking if calculation is correct\n    # 60 sheep can eat all grass in 24 days\n    assert total_grass == 60 * sheep_eats_per_day * 24\n    \n    # Now calculate the combined eating rate of 12 horses and 88 sheep\n    daily_eating_rate = 12 * horse_eats_per_day + 88 * sheep_eats_per_day\n    \n    # Calculate the number of days they can eat all the grass\n    days = total_grass / daily_eating_rate\n    \n    return days\n\nans = solution()"
    ],
    "120862b4815543c8aca7421dc70a00e8": [
        "def solution():\n    correct_marks = 5\n    incorrect_marks = -2\n    total_score = 23\n    total_questions = 6\n\n    # Let x be the number of correct answers, then (total_questions - x) is the number of incorrect answers\n    # We can express the total score as a sum of correct and incorrect marks:\n    # total_score = correct_marks*x + incorrect_marks*(total_questions - x)\n    \n    for x in range(total_questions + 1):\n        if correct_marks*x + incorrect_marks*(total_questions - x) == total_score:\n            return x\n\nans = solution()"
    ],
    "87f2dc4599dd46e7b4da2d0d59bb29b2": [
        "def solution():\n    factors_24 = [i for i in range(1,25) if 24 % i == 0]\n    factors_52 = [i for i in range(1,53) if 52 % i == 0]\n\n    # Find the common factor for B since B is involved in both equations\n    common_factors = [f for f in factors_24 if f in factors_52]\n\n    # Now we find the smallest A+C, which means the smallest A and the smallest C\n    # Since the largest B will give us the smallest A and smallest C\n    B = max(common_factors)\n    A = 24 // B\n    C = 52 // B\n    \n    return A + C\n\nans = solution()"
    ],
    "1d9a3128b1db4b549effea458b3678b2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4*(x-3) + 6*x, 28)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c58c161a2a7e4104a3d8b34ae6e39802": [
        "def solution():\n    distance = 56\n    speed = 7\n    time = distance / speed\n    return time\n\nans = solution()"
    ],
    "1713227e7a80417398659b991525285c": [
        "def solution():\n    from math import factorial\n\n    # Treat A, B, and C as a single unit and E and F as another single unit.\n    # First, we arrange the units and the remaining 3 individuals (8 - 3 ABC - 2 EF = 3).\n    # We have 5 units to arrange, which gives us 5! arrangements.\n    total_arrangements = factorial(5)\n\n    # Within the ABC unit, A, B, and C can arrange themselves in 3! ways.\n    abc_arrangements = factorial(3)\n\n    # Within the EF unit, E and F can arrange themselves in 2! ways.\n    ef_arrangements = factorial(2)\n\n    # Multiply all the possible arrangements together.\n    ans = total_arrangements * abc_arrangements * ef_arrangements\n    return ans\n\nans = solution()"
    ],
    "f5c39fd451224811bc9f3fa976367ff8": [
        "def solution():\n    result = 18\n    original_number = (result - 7) * 3\n    return original_number\n\nans = solution()"
    ],
    "7b25a6fdbf764009abb3fe46b1451b1f": [
        "def solution():\n    n = 20\n    odd_number = 2 * n - 1\n    return odd_number\n\nans = solution()"
    ],
    "c6731b7250a84dddb40920297aeac159": [
        "def solution():\n    # Let's denote the daily production rate as d and total scarfs as s\n    # Original plan: s = 6*d\n    # New plan: s = (6 - 2)*(d + 24)\n    # Equate the two equations to solve for d and s\n    from sympy import symbols, Eq, solve\n\n    d, s = symbols('d s')\n    equation1 = Eq(s, 6*d)\n    equation2 = Eq(s, 4*(d + 24))\n\n    solutions = solve((equation1, equation2), (d, s))\n    \n    return solutions[s]\n\nans = solution()"
    ],
    "d709aa3b4d544c198afcabe95e0a6f53": [
        "def solution():\n    # Let x be the number of students\n    # Let s be the total number of sweets\n    # According to the problem we have:\n    # s + 26 = 6x (he is short of 26 sweets when giving 6 to each student)\n    # s + 5 = 5x (he is short of 5 sweets when giving 5 to each student)\n    # We can set up the equations as:\n    # 6x - s = 26\n    # 5x - s = 5\n    # We subtract the second equation from the first equation to find x:\n    # (6x - 5x) - (s - s) = (26 - 5)\n    # x = 21 (number of students)\n    # Now we use x to find the total number of sweets s:\n    # s + 5 = 5 * 21\n    # s = 5 * 21 - 5\n    s = 5 * 21 - 5\n    return s\n\nans = solution()"
    ],
    "454de52781254b73adf45135eef41054": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the multiplier for the number of boys and girls originally\n    boys, girls, x = symbols('boys girls x')\n    \n    # Original ratio\n    equation1 = Eq(boys, 5 * x)\n    equation2 = Eq(girls, 3 * x)\n    \n    # Ratio after 15 boys left\n    equation3 = Eq((5 * x) - 15, 5 * girls)\n    equation4 = Eq(girls, 6 * ((5 * x) - 15) / 5)\n    \n    # Solve the equations\n    solved_values = solve((equation1, equation2, equation3, equation4), (boys, girls, x))\n    \n    # Total number of pupils in the school band at first\n    total_pupils = solved_values[boys] + solved_values[girls]\n    return total_pupils\n\nans = solution()"
    ],
    "3c337534e32542a2a1408abf3137fc73": [
        "def solution():\n    count = 0\n    for x1 in range(1, 15):\n        for x2 in range(x1 + 1, 15):\n            for x3 in range(x2 + 1, 15):\n                if x1 + x2 + x3 == 15:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "53a8834a683e42428e72d56e59ccf186": [
        "def solution():\n    # the series is an arithmetic sequence\n    # with a common difference of 2 starting from 2\n    series = [2, 4, 6, 8, 10, 12, 14]\n    ans = sum(series)\n    return ans\n\nans = solution()"
    ],
    "2bf9d0f65e0c410a9060c2958cf95896": [
        "def solution():\n    from sympy import factorint\n\n    # Factor the number 675 into its prime factors\n    factors = factorint(675)\n    \n    # A perfect square must have an even power of every prime factor.\n    # Thus, B must provide the missing powers to make all factors even.\n    B = 1\n    for prime, power in factors.items():\n        if power % 2 != 0:\n            B *= prime\n    \n    return B\n\nans = solution()"
    ],
    "39d04fb6c8704dc88d3f67c6f0d16d16": [
        "def solution():\n    shelby_current_age = 65\n    josh_age_5_years_ago = (3/5) * (shelby_current_age - 5)\n    josh_current_age = josh_age_5_years_ago + 5\n    return josh_current_age\n\nans = solution()"
    ],
    "1ed9cf1688a143ad9c551e4a3800d10f": [
        "def solution():\n    return 10 * 20 * 30 * 40\n\nans = solution()"
    ],
    "33ef6b53bcae4073868c3823af12b33b": [
        "def solution():\n    cost_per_multipack = 6.95  # in pounds\n    cost_per_can_individual = 65  # in pence\n\n    # Convert multipack cost to pence\n    cost_per_multipack_pence = cost_per_multipack * 100\n    \n    # Cost of 12 cans bought individually\n    cost_individually = cost_per_can_individual * 12\n    \n    # Calculate savings\n    savings = cost_individually - cost_per_multipack_pence\n    \n    return savings\n\nans = solution()"
    ],
    "536f036013ab4469bca6f5ad12ae6efc": [
        "def solution():\n    count = 0\n    for i in range(3267, 5121):\n        number_str = str(i)\n        if len(set(number_str)) == len(number_str) and all(digit in '123456' for digit in number_str):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b50cc1f20ca94e10b645d2097f488894": [
        "def solution():\n    total_amount = 21.40\n    quarter = total_amount / 4\n    return quarter\n\nans = solution()"
    ],
    "087f0c0cb6054a9ba715f2fad278b021": [
        "def solution():\n    # Let's denote Adam's weight as A, Ben's weight as B, and Carl's weight as C.\n    \n    # We have the following equations:\n    # A + B = 102\n    # B + C = 97\n    # A + C = 93\n\n    # If we add all these equations, we get:\n    # 2A + 2B + 2C = 102 + 97 + 93\n\n    # Dividing both sides by 2 gives us the total weight of Adam, Ben, and Carl:\n    total_weight = (102 + 97 + 93) / 2\n    return total_weight\n\nans = solution()"
    ],
    "f51139da1a3a4082be80548a0b4d3748": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for apples and bananas\n    apple, banana = symbols('apple banana')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(3 * apple + banana, 32)\n    equation2 = Eq(6 * apple + banana, 53)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    # Return the cost of one banana\n    return solutions[banana]\n\nans = solution()"
    ],
    "47f9d71bbd1347aea812d6674ed1a0d8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let A be the amount of time Alan takes to paint the room alone\n    A = symbols('A')\n    \n    # Equation: Alan's rate plus Bob's rate equals the rate working together\n    # 1/A + 1/6 = 1/4\n    equation = Eq(1/A + 1/6, 1/4)\n    \n    # Solve for A\n    alan_time = solve(equation, A)[0]\n    \n    return alan_time\n\nans = solution()"
    ],
    "19fe1b137a4c47e4a70b3c03766f0a82": [
        "def solution():\n    return 55 / 100 * 80\n\nans = solution()"
    ],
    "2f235f0788fb43ae81e1809f99c806ca": [
        "def solution():\n    total_stamps = 310\n    singapore_stamps = 172\n    malaysia_stamps = total_stamps - singapore_stamps\n    difference = singapore_stamps - malaysia_stamps\n    return difference\n\nans = solution()"
    ],
    "db4169b4944e4cbfbcf68f063aba4c5f": [
        "def solution():\n    principal = 500\n    rate = 0.08\n    time = 10\n\n    account_balance = principal * (1 + rate) ** time\n\n    return account_balance\n\nans = solution()"
    ],
    "6bc35ca24e8a477a8721a3ee646bc624": [
        "def solution():\n    ans = 10024 + 3968\n    return ans\n\nans = solution()"
    ],
    "533857ee1add4235b4509835e79455c4": [
        "def solution():\n    from math import gcd\n\n    return gcd(84, 108)\n\nans = solution()"
    ],
    "098dd57d750645208b9a88bebb06ae3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, kim, shaun = symbols('andrew kim shaun')\n    \n    equation1 = Eq(shaun, 2 * kim)\n    equation2 = Eq(andrew, shaun - 24)\n    equation3 = Eq(andrew + kim + shaun, 256)\n\n    solutions = solve((equation1, equation2, equation3), (andrew, kim, shaun))\n\n    return solutions[andrew]\n\nans = solution()"
    ],
    "08d6f2da7cab499fa7f725364cce9c85": [
        "def solution():\n    sale_price = 114\n    discount_factor = 2/3\n    original_price = sale_price / discount_factor\n    return original_price\n\nans = solution()"
    ],
    "119cdd759a7d4ca9845f3cc8718b8443": [
        "def solution():\n    weekly_food_kg = 15\n    num_weeks = 26\n\n    total_food_kg = weekly_food_kg * num_weeks\n\n    return total_food_kg\n\nans = solution()"
    ],
    "8ae98f07396b40058f13ac11affb9784": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_score = symbols('original_score')\n    equation = Eq(original_score - 30, (original_score / 2) + 10)\n\n    score_solution = solve(equation, original_score)\n\n    return score_solution[0]\n\nans = solution()"
    ],
    "508b9d97347440a0b80cafeabef4a947": [
        "def solution():\n    total_votes = 120\n    peter_votes = 35\n    others_votes = total_votes - peter_votes\n    votes_needed = (others_votes // 2) + 1\n    \n    return votes_needed - peter_votes\n\nans = solution()"
    ],
    "eea021c591d7400d80e856a767d07752": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the amount Alex and Nicholas have initially as 'x'.\n    x = symbols('x')\n    \n    # After Alex spent $58, he has 'x - 58'.\n    # After Nicholas spent $13, he has 'x - 13'.\n    # According to the problem, Nicholas has 6 times the amount of Alex after the spending.\n    equation = Eq((x - 13), 6 * (x - 58))\n    \n    # Solve the equation to find the initial amount of money 'x'.\n    initial_amount = solve(equation, x)\n    \n    # Since Alex and Nicholas have the same amount of money initially,\n    # the total amount they had altogether is '2 * x'.\n    total_initial_amount = 2 * initial_amount[0]\n    \n    return total_initial_amount\n\nans = solution()"
    ],
    "d5155e4d5ad84669b50a6dc5c2a99d1c": [
        "def solution():\n    for sweets in range(1, 30):\n        if sweets % 3 == 0 and sweets % 2 == 1 and sweets % 4 == 1 and sweets % 5 == 1:\n            return sweets\n\nans = solution()"
    ],
    "d1b3edb622a94a938bdd4deb2c79349e": [
        "def solution():\n    ans = 250 - 6*6 - 8*6\n    return ans\n\nans = solution()"
    ],
    "b57cda394d944362b1e48088868e9f0c": [
        "def solution():\n    days_later = 28\n    # A week has 7 days, so every 7 days the weekdays repeat.\n    # 28 days is exactly 4 weeks, so the day of the week will be the same.\n    # Since the provided date is Monday, 28 days later will also be Monday.\n    return \"0001\"  # Monday corresponds to 0001\n\nans = solution()"
    ],
    "0c1b04af51f742999f2ca9765aedb50d": [
        "def solution():\n    total_flour = 600\n    flour_left = 21\n    flour_used = total_flour - flour_left\n    return flour_used\n\nans = solution()"
    ],
    "6195126bb5a54128ab0d4b1902877f4f": [
        "def solution():\n    ans = 12.35 + 8.65 + 9.8 - 2.8\n    return ans\n\nans = solution()"
    ],
    "a6b80ec179af453daf8021b9dc7907b9": [
        "def solution():\n    a = 9**(3/2)\n    return a\n\nans = solution()"
    ],
    "0297a10276ed45e1aa82953f7cfb5934": [
        "def solution():\n    place_value = 0.01\n    value_of_6 = 6 * place_value\n    return value_of_6\n\nans = solution()"
    ],
    "f475d2f1e6f34559b3da9ca1ce9d31ff": [
        "def solution():\n    return 52 / (2 / 3)\n\nans = solution()"
    ],
    "507ce61646b54d9d972812acdf557e23": [
        "def solution():\n    total_distance = 240\n    interval = 12\n    number_of_poles = (total_distance - interval) // interval\n\n    return number_of_poles\n\nans = solution()"
    ],
    "3c1879332bf54abaa9acb25e23c4e762": [
        "def solution():\n    total_items = 52\n    difference = 10\n\n    rulers = (total_items - difference) / 2\n    return rulers\n\nans = solution()"
    ],
    "9d83d1281e9a4e2db5186517aa7ae8eb": [
        "def solution():\n    numbers = [11, 13, 17, 12]\n    mean_value = 11\n\n    # Calculate sum of the existing numbers\n    sum_of_numbers = sum(numbers)\n    # Calculate total sum required to maintain the mean\n    required_sum = mean_value * (len(numbers) + 1)\n\n    # x will be the difference between required sum and sum of numbers\n    x = required_sum - sum_of_numbers\n\n    return x\n\nans = solution()"
    ],
    "cc51dc96be8d4cb99c8479ff14df80ea": [
        "def solution():\n    position1_value = 7 * 10**3\n    position2_value = 7 * 10**1\n    difference = position1_value - position2_value\n    \n    return difference\n\nans = solution()"
    ],
    "8f9071448b334615b680eae78ad6d93f": [
        "def solution():\n    cost_per_person = 253 / 11\n    total_cost_12_people = cost_per_person * 12\n    return total_cost_12_people\n\nans = solution()"
    ],
    "11e835ed8a2649f0b446fa81c9cd3d23": [
        "def solution():\n    boys_ratio = 5\n    girls_ratio = 6\n    total_ratio = boys_ratio + girls_ratio\n    \n    boys = 200\n    total_students = boys * (total_ratio / boys_ratio)\n    girls = total_students - boys\n\n    return int(girls)\n\nans = solution()"
    ],
    "0aa9f0da78114b919761155b61de3f58": [
        "def solution():\n    # The decimal expansion of 1/3 is 0.333...\n    # Since every digit is 3, the sum of the first 1000 digits is simply 1000 times 3\n    ans = 1000 * 3\n    return ans\n\nans = solution()"
    ],
    "a97ee845f64d4f25b71479ba9826754d": [
        "def solution():\n    # To ensure we have 4 marbles of the same color, we need to consider the worst case scenario,\n    # which is that we pick 3 marbles of each color without getting 4 of the same.\n    # So we can take out 3 red, 3 yellow, and 3 blue marbles (3 * 3 = 9).\n    # The next marble we take out, no matter the color, will ensure we have 4 of one color.\n\n    marbles_needed = (3 * 3) + 1  # 3 each of red, yellow, blue, plus 1 to guarantee the fourth of a kind\n\n    return marbles_needed\n\nans = solution()"
    ],
    "1f3fc787b72e4079adc614b98529d7df": [
        "def solution():\n    percentage = 15\n    total_amount = 29\n    ans = (percentage / 100) * total_amount\n    return ans\n\nans = solution()"
    ],
    "027e7a3d49eb4325a8b4a3460e1cc172": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original concentration in container A\n    x = symbols('x')\n\n    # After adding 10 grams of solution to container A\n    A_concentration = (10 * x) / 40\n\n    # After adding 10 grams of solution from A to B\n    B_concentration = (10 * A_concentration) / 50\n\n    # After adding 10 grams of solution from B to C\n    C_concentration = (10 * B_concentration + 0.5) / 60\n\n    # Set up the equation for the final concentration in container C, which is 0.5%\n    equation = Eq(C_concentration, 0.5 / 100)\n\n    # Solve the equation for x\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "06a3c4c2e5804a44ace159113da6ba05": [
        "def solution():\n    last_number = 100\n    step = 2\n\n    # Count the multiples of 2 up to the last number\n    ans = last_number // step\n\n    return ans\n\nans = solution()"
    ],
    "ab6dca5c40ee402e956dc70279823b4c": [
        "def solution():\n    cost_of_8_books = 32\n    cost_of_1_book = cost_of_8_books / 8\n    cost_of_12_books = cost_of_1_book * 12\n    return cost_of_12_books\n\nans = solution()"
    ],
    "0b6bdeab9546405d978d1812c7201565": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 * x - 13, 55)\n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "ec87e304fc2740f28c9d1e303434b7bd": [
        "def solution():\n    fraction = 2/5\n    percentage = 35 / 100\n    decimal = 0.604\n\n    ans = fraction + percentage + decimal\n\n    return ans\n\nans = solution()"
    ],
    "144a37458618498d8c19e53cf5ec0049": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 2016 and 1377 into their prime factors\n    factors_2016 = factorint(2016)\n    factors_1377 = factorint(1377)\n\n    # Convert the prime factors into a list of primes raised to their powers for 2016 and 1377\n    ages_2016 = [prime**power for prime, power in factors_2016.items()]\n    ages_1377 = [prime**power for prime, power in factors_1377.items()]\n\n    # Since the product of their ages was 1377 last year, each cousin was 1 year younger.\n    # There are three cousins, thus the difference in product of their ages should be a factor of 3**3 = 27\n    # Find the common factor in ages_2016 and ages_1377 and divide by that to get the factor that was increased by 27\n    common_factor = min(set(ages_2016) & set(ages_1377))\n\n    # Calculate the individual age that increased over the year.\n    increased_age_factor = common_factor // factors_1377[common_factor]\n\n    # Find the ages two years ago\n    ages_two_years_ago = [age // increased_age_factor - 2 for age in ages_1377]\n\n    # Calculate the product of their ages two years ago.\n    ans = 1\n    for age in ages_two_years_ago:\n        ans *= age\n\n    return ans\n\nans = solution()"
    ],
    "3af1e296b55d48b081f32a1a006667ef": [
        "import math\n\ndef solution():\n    # Treat the two people who want to stand next to each other as one unit\n    # So, we have 4 units to arrange (the unit of two people + the other three individuals)\n    unit_arrangements = math.factorial(4)\n    \n    # The two people within the unit can also switch places\n    people_arrangements_within_unit = math.factorial(2)\n    \n    # Multiply the arrangements of the units by the arrangements within the unit\n    total_arrangements = unit_arrangements * people_arrangements_within_unit\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "e514e8bc1f604e7584c55c9dca3b2fed": [
        "def solution():\n    total_first_three_days = 33\n    average_last_four_days = 18\n    last_four_days = average_last_four_days * 4\n    total_week = total_first_three_days + last_four_days\n    average_per_day = total_week / 7\n    \n    return average_per_day\n\nans = solution()"
    ],
    "4ecf6dfe09074d81b2c8e57fe42c031f": [
        "def solution():\n    weight_metal1 = 12\n    nickel_percent1 = 40\n\n    weight_metal2 = 13\n    nickel_percent2 = 60\n\n    total_weight = weight_metal1 + weight_metal2\n    total_nickel_weight = (nickel_percent1 * weight_metal1 / 100) + (nickel_percent2 * weight_metal2 / 100)\n\n    nickel_concentration = (total_nickel_weight / total_weight) * 100\n\n    return nickel_concentration\n\nans = solution()"
    ],
    "31aa53351e2b49aab72bde2d7ea3c1a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(9 - (x + 3), 1)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "eb0f5add450e4a9ab6a265d98bae439c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    blue, red, yellow = symbols('blue red yellow')\n    \n    equation1 = Eq(blue, 2 * red)\n    equation2 = Eq(yellow, blue + 2.40)\n    equation3 = Eq(blue + red + yellow, 65.40)\n    \n    solutions = solve((equation1, equation2, equation3), (blue, red, yellow))\n    \n    return solutions[blue]\n\nans = solution()"
    ],
    "de0d981643f2427f8f190ba70891f0a6": [
        "def solution():\n    return (-3 + 8) / 2\n\nans = solution()"
    ],
    "ffb4fa57b0eb47ffb07fa2c7f49ef9f4": [
        "def solution():\n    result = 15 / (1/7)\n    return result\n\nans = solution()"
    ],
    "be0945399c6b4d0dba2ad2baaabb31ad": [
        "def solution():\n    n = 1\n    while True:\n        sum_of_series = (n * (n + 1)) // 2\n        if sum_of_series > 3405:\n            break\n        if (3405 - sum_of_series) <= n:\n            duplicate = 3405 - sum_of_series\n            return duplicate\n        n += 1\n\nans = solution()"
    ],
    "5fd6b39e9b3a49549d8336ce20856f59": [
        "def solution():\n    # Given sum of first 6 terms (S_6) and sum of first 12 terms (S_12)\n    S_6 = 64\n    S_12 = 156\n\n    # S_n = n/2 * (2a + (n - 1)d)\n    # S_6 = 6/2 * (2a + 5d) = 64\n    # 3 * (2a + 5d) = 64 => 2a + 5d = 64 / 3\n    \n    # S_12 = 12/2 * (2a + 11d) = 156\n    # 6 * (2a + 11d) = 156 => 2a + 11d = 156 / 6\n    \n    # 2 equations can be set up as:\n    # equation1: 2a + 5d = 64 / 3\n    # equation2: 2a + 11d = 156 / 6\n    \n    # Now we can use these two equations to solve for a (first term) and d (common difference)\n    # Rewrite equations in terms of a and solve for d:\n    # 2a = 64 / 3 - 5d ... (i)\n    # 2a = 156 / 6 - 11d ... (ii)\n\n    # equate the values for 2a from both equations to solve for d\n    # 64 / 3 - 5d = 156 / 6 - 11d\n    # 64 / 3 - 156 / 6 = -11d + 5d\n    # 128 / 6 - 156 / 6 = -6d\n    # -28 / 6 = -6d => d = 28 / 36 = 7 / 9\n\n    d = (28 / 6) / 6\n\n    # Substitute d back into (i) to find a\n    # 2a = 64 / 3 - 5(7 / 9)\n    # 2a = 64 / 3 - 35 / 9\n    # 2a = (192 / 9 - 35 / 9)\n    # 2a = 157 / 9\n    # a = 157 / 18\n\n    a = (64 / 3 - 5 * d) / 2\n\n    # Now we have a and d, so we can find sum of first 18 terms (S_18)\n    # S_18 = 18/2 * (2a + (18 - 1)d)\n    # S_18 = 9 * (2a + 17d)\n\n    S_18 = 9 * (2 * a + 17 * d)\n\n    return int(S_18)\n\nans = solution()"
    ],
    "13aecb4038e84ceeb7586defdcee7f3d": [
        "def solution():\n    total_math = 146 + 94\n    ratio_history_to_math = 7 / 8\n    total_history = total_math * ratio_history_to_math\n    return int(total_history)\n\nans = solution()"
    ],
    "c17e0a2b113d46b781b7f26e782fd14f": [
        "def solution():\n    # In a single round-robin tournament, each player plays every other player once.\n    # With 8 players, each player plays 7 matches.\n    # Since there's no tie, there's one winner for each match.\n    # Assuming the champion won all their matches, they would have the maximum possible wins.\n    \n    # Number of matches played by each player\n    matches_per_player = 7\n    \n    # The champion, having no ties and different number of wins from others,\n    # would win all their matches.\n    champion_wins = matches_per_player\n    \n    return champion_wins\n\nans = solution()"
    ],
    "758d557365b6402ba3525678e7c085b7": [
        "def solution():\n    # Reverse the numbers according to the Zog planet rules\n    # Subtract \"26\" which is \"62\" on Earth from \"729\" which is \"927\" on Earth\n    pluto_subtraction = int(str(927)[::-1]) - int(str(62)[::-1])\n\n    # Reverse the result to match the Zog number representation\n    ans = int(str(pluto_subtraction)[::-1])\n    return ans\n\nans = solution()"
    ],
    "cbad92babc7144ffa95f44fbcc74faa1": [
        "def solution():\n    from math import gcd\n    ans = gcd(45, 60)\n    return ans\n\nans = solution()"
    ],
    "f8b94a6a82c7406a83b47ec788b92ca2": [
        "def solution():\n    # Let's denote the original number of chickens in each pen as x\n    # and the original total number of chickens as N.\n    \n    # Original total number of pens: 24\n    # Number of pens after building 6 more: 24 + 6 = 30\n    \n    # Given that with 24 pens, when we built 6 more pens,\n    # the number of chickens in each pen reduced by 6.\n    # This means, new number of chickens in each pen is x - 6.\n    \n    # The total chickens remain the same, so we can set up the equation:\n    # 24 * x = 30 * (x - 6)\n    \n    # Solve for x\n    x = symbols('x')\n    equation = Eq(24 * x, 30 * (x - 6))\n    solution_x = solve(equation, x)\n    \n    # Now we know the original number of chickens in each pen, we can find the total.\n    total_chickens = 24 * solution_x[0]\n    \n    return total_chickens\n\nans = solution()"
    ],
    "221781af3d4444f881f99b112ffa3aa3": [
        "def solution():\n    remainder = 3\n    possible_values = set()\n\n    for divisor in range(1, 40 - remainder):\n        for quotient in range(1, 40 - divisor - remainder):\n            dividend = divisor * quotient + remainder\n            if divisor + dividend + quotient + remainder == 40:\n                possible_values.add(dividend / quotient)\n    \n    ans = len(possible_values)\n    return ans\n\nans = solution()"
    ],
    "0f19ecaf9e6a4a268a28394ccf10d38e": [
        "def solution():\n    ans = 312 + 9\n    return ans\n\nans = solution()"
    ],
    "4c066587422f44769fef6ac62ea2a629": [
        "def solution():\n    # Ashley is currently 10 years old.\n    # Three years ago, she was 10 - 3 = 7 years old.\n    # At that time, she was 2 years older than her brother.\n    # Therefore, her brother was 7 - 2 = 5 years old three years ago.\n\n    # If Ashley's brother was 5 years old three years ago,\n    # he is now 5 + 3 = 8 years old.\n\n    brother_age_now = 5 + 3\n    return brother_age_now\n\nans = solution()"
    ],
    "ddbda2b526d94447986b592f33c0b725": [
        "def solution():\n    train_length = 160\n    speed = 20\n    time = 30\n\n    # Distance covered by the train while passing through the bridge\n    distance_covered = speed * time\n\n    # The distance covered is the sum of the train's length and the bridge's length\n    # Thus, we subtract the train's length from the total distance to get the bridge's length\n    bridge_length = distance_covered - train_length\n\n    return bridge_length\n\nans = solution()"
    ],
    "92633a5c2d4045258377b67eb7914f16": [
        "def solution():\n    jogging_time = 0.5  # Time from 6:30am to 7:00am in hours\n    walking_time = 1    # Time from 7:00am to 8:00am in hours\n\n    jogging_speed = 9   # Jogging speed in km per hour\n    walking_speed = 7.5 # Walking speed in km per hour\n\n    jogging_distance = jogging_speed * jogging_time\n    walking_distance = walking_speed * walking_time\n\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "e7b83b9b5e1e45ebbe58b8753935aa52": [
        "def solution():\n    ans = 0.23 + 1.9 + 0.083\n    return ans\n\nans = solution()"
    ],
    "9bba3d6fb8a24e63b64427cf2f150104": [
        "def solution():\n    # First digit can be either 3 or 4 (2 possibilities)\n    # because it cannot be 0 (as it is a three-digit number).\n    first_digit_choices = 2\n\n    # Second and third digits can be 0, 3, or 4 (3 possibilities each)\n    second_digit_choices = 3\n    third_digit_choices = 3\n\n    # The total number of different numbers is the product\n    # of the choices for each digit.\n    total_numbers = first_digit_choices * second_digit_choices * third_digit_choices\n\n    return total_numbers\n\nans = solution()"
    ],
    "4f44a87fc2ed45138614656e0d4cdc2e": [
        "def solution():\n    emily_score = 30\n    hebe_percentage = 60\n    total_marks = 60\n    \n    hebe_score = (hebe_percentage / 100) * total_marks\n    difference = hebe_score - emily_score\n    \n    return difference\n\nans = solution()"
    ],
    "c3bbf6f074774feb9ff7aa22e47b31ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wins, losses = symbols('wins losses')\n    total_games = 63\n\n    equation1 = Eq(wins, 2 * losses)\n    equation2 = Eq(wins + losses, total_games)\n\n    solutions = solve((equation1, equation2), (wins, losses))\n\n    return solutions[losses]\n\nans = solution()"
    ],
    "54dfc5bdf157460ba47b99d87cd73558": [
        "def solution():\n    common_factor = 13\n    expression = (55 - 44) * common_factor\n    return expression\n\nans = solution()"
    ],
    "bdce3fe10c474df4a19293921b1f972c": [
        "def solution():\n    ans = 3647 // 7\n    return ans\n\nans = solution()"
    ],
    "56e620f09fd54f8c8dc2fe4e97e4c388": [
        "def solution():\n    ans = 9 - 8 + 7 - 6 + 5 - 4 + 3 - 2 + 1\n    return ans\n\nans = solution()"
    ],
    "3a1e525fd69d41e8bdcd18e39e142f01": [
        "def solution():\n    from math import factorial\n\n    # Calculate the permutations of the girls as a single unit and the 3 teachers\n    girls_unit_perms = factorial(4)\n\n    # Now permute the girls among themselves within the unit\n    girls_internal_perms = factorial(3)\n\n    # For the boys, treat the girls and teachers as 4 units and place boys in the 5 spaces between or at the ends\n    # (G/T) B (G/T) B (G/T) B (G/T)\n    boys_perms = factorial(5)\n\n    # Total permutations is the product of individual permutations\n    total_perms = girls_unit_perms * girls_internal_perms * boys_perms\n\n    return total_perms\n\nans = solution()"
    ],
    "0877713fe19e4645ba3e7db233f47117": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cows, goats = symbols('cows goats')\n\n    # Let's say the total number of animals initially is 'total'.\n    total = cows + goats\n    # 65% of the total are cows, hence cows=0.65*total.\n    # After adding 240 animals, the number of cows becomes cows + 240, \n    # and this is 85% of the new total, so cows + 240 = 0.85*(total + 240).\n    # The number of goats doubled, so 2*goats = total + 240 - (cows + 240).\n    equation1 = Eq(cows, 0.65 * total)\n    equation2 = Eq(cows + 240, 0.85 * (total + 240))\n    equation3 = Eq(2 * goats, total + 240 - (cows + 240))\n\n    solutions = solve((equation1, equation2, equation3), (cows, goats, total))\n\n    return solutions[goats]\n\nans = solution()"
    ],
    "a9d8b165410c4c1bb74c1c179cf2b128": [
        "def solution():\n    # Calculate the area of Triangle X using the formula for an equilateral triangle\n    # Area = (sqrt(3) / 4) * side^2\n    side_x = 3\n    area_x = (3 ** 0.5 / 4) * side_x ** 2\n\n    # Calculate the area of Triangle Y using the same formula\n    side_y = 9\n    area_y = (3 ** 0.5 / 4) * side_y ** 2\n\n    # Calculate how many times Triangle X fits into Triangle Y\n    ans = area_y / area_x\n\n    return int(ans)\n\nans = solution()"
    ],
    "6791440725654626ab51c36b9e94af1d": [
        "def solution():\n    for number in range(100, 1000):\n        if number % 7 == 4 and number % 8 == 4 and number % 9 == 4:\n            return number\n\nans = solution()"
    ],
    "d32cc1f9d4b249a0a64ad0610aee08f4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    \n    # 5x spent on 12 pens\n    pens_total = 5 * x\n\n    # 3x spent on 5 pencils\n    pencils_total = 3 * x\n    \n    # Total spend\n    total_spend = 120\n\n    # Equation\n    equation = Eq(pens_total + pencils_total, total_spend)\n\n    # Solve for x\n    x_value = solve(equation, x)\n    \n    return x_value[0]\n\nans = solution()"
    ],
    "78fdc8747f5a4d3aabce52d5e041f78f": [
        "from math import comb\n\ndef solution():\n    total_students = 5\n    students_to_choose = 2\n    \n    return comb(total_students, students_to_choose)\n\nans = solution()"
    ],
    "1e0501ed2b454e8abdc227085d3243e5": [
        "def solution():\n    larger_product = 8 * 9 * 10\n    smaller_product = 1 * 2 * 3\n    difference = larger_product - smaller_product\n    return difference\n\nans = solution()"
    ],
    "22bdbf51eef54f7ab3652064b38ab235": [
        "def solution():\n    bouquets = 30\n    roses_per_bouquet = 9\n\n    total_roses = bouquets * roses_per_bouquet\n\n    return total_roses\n\nans = solution()"
    ],
    "960bdf3b8c724781b3eb3607d3f03609": [
        "def solution():\n    appetisers = 2\n    main_courses = 3\n    soup = 2  # 1 soup + option not to choose any\n    desserts = 3  # 2 desserts + option not to choose any\n\n    # John will always pick 1 appetiser and 1 main course. For soup and dessert, he can either pick one or not.\n    combinations = appetisers * main_courses * soup * desserts\n\n    return combinations\n\nans = solution()"
    ],
    "65fe506e0c914a8c89a3851368d52567": [
        "def solution():\n    for children in range(100, 200 + 1):\n        if children % 8 == 3 and children % 9 == 1:\n            return children\n\nans = solution()"
    ],
    "9bb456e92cbe4dd58a5b0ef6f7f77fc4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Number of blue balls is the unknown\n    blue_balls = symbols('blue_balls')\n\n    # Total number of balls\n    total_balls = 4 + blue_balls\n\n    # Probability of taking one red ball out (4 red balls out of total)\n    prob_first_red = 4 / total_balls\n\n    # Probability of taking second red ball out (3 red balls left out of total minus one)\n    prob_second_red = 3 / (total_balls - 1)\n\n    # The probability of both events occurring is the product of their probabilities\n    prob_both_red = prob_first_red * prob_second_red\n\n    # Create an equation based on the given probability\n    equation = Eq(prob_both_red, 2/7)\n\n    # Solve the equation\n    solution = solve(equation, blue_balls)\n\n    # Return the solution that makes sense (non-negative integer)\n    ans = [s.evalf() for s in solution if s.is_integer and s > 0]\n    \n    return ans[0]\n\nans = solution()"
    ],
    "cfe05c3227c9427eadd085e9de47f044": [
        "def solution():\n    a1 = 6  # first term\n    an = 41  # last term\n    d = 5  # common difference\n    n = ((an - a1) // d) + 1  # number of terms\n\n    sum_n = (n * (a1 + an)) // 2  # sum of n terms of arithmetic sequence\n\n    return sum_n\n\nans = solution()"
    ],
    "2c300804986d4690a8ea13da0f77fd40": [
        "def solution():\n    dog_to_rabbit_weight_ratio = 8\n    rabbit_to_chicken_weight_ratio = 2\n\n    chickens_per_dog = dog_to_rabbit_weight_ratio * rabbit_to_chicken_weight_ratio\n\n    return chickens_per_dog\n\nans = solution()"
    ],
    "3aa12de14bc74a3ba901fd2b6e1a45e0": [
        "from math import factorial\n\ndef solution():\n    # Calculate the possible combinations of the digits.\n    # The prime factorization of 2^27 is just one prime number (2) repeated 27 times.\n    # We need to distribute these 27 twos into 10 places (digits).\n    # This is a problem of putting n identical items into k distinct boxes, where boxes can be empty.\n    # Using stars and bars method, we calculate it as combinations of n+k-1 items taken k-1 at a time.\n    \n    # We have 27 identical twos ('stars') to distribute into 10 digits ('bars' with one bar fixed at the start).\n    # Therefore, we will place the remaining 9 bars somewhere in between or after the 27 stars.\n    n = 27\n    k = 10 - 1  # Subtract 1 because the first place cannot be empty (no leading zeros)\n    \n    # Calculate number of ways to place 9 bars among 27+9-1 places\n    num_ways = factorial(n + k) // (factorial(n) * factorial(k))\n    \n    # Leading zeros are not allowed, so each number must start with at least one '2'.\n    # We fixed one '2' at the first place, the rest can be divided freely among the remaining 9 places.\n    # However, since the first place cannot have more than 3 twos ('2', '4', or '8'),\n    # we must subtract the cases where the first digit would be implicitly zero (all 27 twos in other places).\n    \n    # Cases where the first digit is zero (9 bars among the remaining 26 places)\n    zero_first_digit_cases = factorial(n + k - 1) // (factorial(n - 1) * factorial(k))\n    \n    # Subtracting the cases where the first digit is zero from the total number of combinations\n    ans = num_ways - zero_first_digit_cases\n    \n    return ans\n\nans = solution()"
    ],
    "08a17429c2dc42c9b5df787d8fb4954e": [
        "def solution():\n    # Let the original number of slices be x\n    # According to the problem, (3/5)x + 2 + 4 = x\n    # Solving for x we get (2/5)x = 6 \n    # Thus, x = 6 * (5/2) = 15\n\n    original_slices = 6 * (5 / 2)\n    return int(original_slices)\n\nans = solution()"
    ],
    "6a7086b44acb47afbeb35af00a141b68": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    mike, danny = symbols('mike danny')\n    \n    combined_rate = 1 / 10\n    mike_time = 8\n    danny_time = 13\n    \n    # Equation 1: mike's work + danny's work = 1 job\n    equation = Eq((mike_time / mike) + (danny_time / danny), 1)\n\n    # Equation 2: mike's rate + danny's rate = combined rate\n    equation2 = Eq((1 / mike) + (1 / danny), combined_rate)\n    \n    solutions = solve((equation, equation2), (mike, danny))\n    \n    return solutions[danny]\n\nans = solution()"
    ],
    "7e303a81959f4dd3a8821c03daae5549": [
        "def solution():\n    ans = 51 + 50 - 45 + 40 - 35 + 30 - 25 + 20 - 15\n    return ans\n\nans = solution()"
    ],
    "346ccc5e74434ee687f8c2396be87095": [
        "def solution():\n    place_value_1 = 3 * 10**2  # Place value of the 3 in the hundreds place\n    place_value_2 = 3 * 10**5  # Place value of the 3 in the hundred thousands place\n    difference = place_value_2 - place_value_1  # Difference in place values\n    return difference\n\nans = solution()"
    ],
    "807f47199e524c889e2cda11d4b6aedd": [
        "def solution():\n    total_pencils = 7\n    total_cases = 2\n    min_pencils = (total_pencils - 1) // total_cases + 1\n    return min_pencils\n\nans = solution()"
    ],
    "5a9cac73f017480d9c49cfcbd2b7a15a": [
        "def solution():\n    for m in range(1, 100): # Assuming m is within a reasonable range\n        total = 0\n        for i in range(m, m + 10 + 1):\n            total += i\n        if total == 66:\n            return m\n\nans = solution()"
    ],
    "5f8547cf000a40589c011a253c103568": [
        "def solution():\n    side_length = 54\n    interval = 3\n    # Number of chess per side is (side length - 1 interval at corner) / interval\n    # But we need to count each corner only once, so we subtract 3 from total chess count\n    chess_per_side = (side_length // interval)\n    total_chess = 4 * chess_per_side - 4\n    return total_chess\n\nans = solution()"
    ],
    "a6143a5df73447d390e4a2025ba6b232": [
        "def solution():\n    # We want to minimize the number of red squares.\n    # If a digit appears 5 times or more, it gets painted red.\n    # The fewest red squares occur when we have as many digits as possible appearing 4 times (avoiding 5 times).\n    # There are 10 possible digits (0-9), so the fewest red squares occurs when all 10 digits appear exactly 4 times.\n    # 4 appearances per digit * 10 digits = 40 squares.\n    # The remaining 60 squares can contain any digits without causing additional red squares.\n    # So the smallest possible number of red squares is 40.\n\n    return 40\n\nans = solution()"
    ],
    "507fbe69eeb341c4a1e466db8bc07b00": [
        "def solution():\n    first_term = 50\n    difference = 46 - 50  # sequence is decreasing, so difference is negative\n    term = first_term\n    num_terms = 0\n\n    # keep finding terms until we hit a negative number\n    while term > 0:\n        num_terms += 1\n        term += difference\n    \n    return num_terms\n\nans = solution()"
    ],
    "84c34602d0aa4900966c5a8ceeee71d3": [
        "def solution():\n    initial_money = 10\n    spent_money = 2.89\n    received_money = 4 / 5\n\n    remaining_money = initial_money - spent_money + received_money\n\n    return remaining_money\n\nans = solution()"
    ],
    "a19b145685704a7fb1edf952d6f61f0d": [
        "def solution():\n    for i in range(32, 100):  # 32^2 = 1024, 100^2 = 10000, so we only look at squares within this range\n        square = i ** 2\n        str_square = str(square)\n        if len(str_square) == 4 and str_square[0] == str_square[1] and str_square[2] == str_square[3]:\n            return square\n\nans = solution()"
    ],
    "b00453f28a704896a9c2914acfc85c84": [
        "def solution():\n    # A zero is produced by multiplication of 2 and 5. Since there are more 2s than 5s in\n    # factorials, we only need to count the number of 5s to determine the number of zeros\n    # at the end of the product of n factorial.\n\n    # Initialize variables\n    n = 0  # Test number starting from 0\n    count_fives = 0  # Counter to keep track of the number of fives\n\n    # Loop until we have 28 zeros at the end of the product\n    while count_fives < 28:\n        n += 1  # Increment n to find its factorial\n        k = n\n        # Factor n and count the number of 5s it contains\n        while k > 0:\n            if k % 5 == 0:\n                count_fives += 1\n                k //= 5\n            else:\n                break\n\n    return n\n\nans = solution()"
    ],
    "03819e32406b409c97adc853ab0849b7": [
        "def solution():\n    m = 7\n    ans = 3 * m - 1 + m\n    return ans\n\nans = solution()"
    ],
    "622d8f504b0b4e3c833da2860ca06ea3": [
        "def solution():\n    # Combined speed of Tim and Bob\n    combined_speed = 56 + 74\n    \n    # Initial distance between them\n    initial_distance = 780\n    \n    # Distance remaining when they are 130 km apart\n    remaining_distance = 130\n    \n    # Total distance covered when they are 130 km apart\n    distance_covered = initial_distance - remaining_distance\n    \n    # Time taken to cover the distance_covered\n    time_taken = distance_covered / combined_speed\n    \n    return time_taken\n\nans = solution()"
    ],
    "97280eb5e85b48fa922958bc7829aeeb": [
        "def solution():\n    total_distance = 11\n    climb_distance = 3\n    slide_distance = 1\n    net_distance = climb_distance - slide_distance\n    days = 0\n\n    while total_distance > 0:\n        days += 1\n        total_distance -= climb_distance\n        if total_distance <= 0:\n            break\n        total_distance += slide_distance\n\n    return days\n\nans = solution()"
    ],
    "87f0754be1e1426ea4912fd9aa134e2f": [
        "def solution():\n    return 6 - 4.226\n\nans = solution()"
    ],
    "2c9ba88b14dd492eae6b7ec023369d1e": [
        "def solution():\n    mean_value = 5\n    total_sum = mean_value * 5\n    sum_of_known_numbers = 3 + 4 + 6 + 10\n    \n    fifth_number = total_sum - sum_of_known_numbers\n    return fifth_number\n\nans = solution()"
    ],
    "42a62ad1ebd04b199cb34ac6b189a7bb": [
        "from math import lcm\n\ndef solution():\n    akon_cycle = 4\n    ben_cycle = 7\n    cris_cycle = 8\n    least_common_multiple = lcm(akon_cycle, ben_cycle, cris_cycle)\n    return least_common_multiple\n\nans = solution()"
    ],
    "cf4b67b2b09544679e877f2476cc1898": [
        "from itertools import permutations\n\ndef solution():\n    lucky_years = 0\n    for year in range(1000, 2023):\n        year_str = str(year)\n        digits = sorted(set(year_str))\n        if len(digits) == 4 and int(digits[3]) - int(digits[0]) == 3:\n            perms = set(permutations(year_str))\n            for perm in perms:\n                if perm[0] != '0':  # Exclude permutations starting with 0\n                    lucky_years += 1\n                    break  # Once a valid permutation is found, no need to check others\n    return lucky_years\n\nans = solution()"
    ],
    "3602d25562874d41ab24c4341b12f630": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n\n    ans = tens + tenths + hundredths\n    return ans\n\nans = solution()"
    ],
    "711c6d212b6b410f988c3dbe25973b9f": [
        "def solution():\n    decimal_part = \"8354\"\n    decimal_length = len(decimal_part)\n    sum_of_digits = 0\n\n    for i in range(84):\n        sum_of_digits += int(decimal_part[i % decimal_length])\n\n    return sum_of_digits\n\nans = solution()"
    ],
    "9aaa074a8d0943d59386b629100a1142": [
        "def solution():\n    total_distance = 15 + 10 + 8\n    number_of_people = 3\n    average_distance = total_distance / number_of_people\n    return average_distance\n\nans = solution()"
    ],
    "5c06e51a661b48fe8fa86f66e6eee9fa": [
        "def solution():\n    ans = 56 * 23\n    return ans\n\nans = solution()"
    ],
    "b7bc6562b2cd42848b4c261eea8d443b": [
        "def solution():\n    interval_duration = (43 - 6 * 3) / (6 - 1)\n    total_duration_12_strikes = 12 * 3 + interval_duration * (12 - 1)\n    return total_duration_12_strikes\n\nans = solution()"
    ],
    "e3e88b3c7611487d98b4ad69c6e41428": [
        "def solution():\n    total_cost = 104.10\n    num_people = 6\n\n    cost_per_person = total_cost / num_people\n\n    return round(cost_per_person, 2)\n\nans = solution()"
    ],
    "3ba3be708b874b10bc32437342966dfb": [
        "from math import factorial\n\ndef solution():\n    # To find the number of ways to divide 20 pens to 6 kids with at least one pen each\n    # We use the concept of combinations with identical items.\n    # This is a problem of distributing n identical items to r distinct groups,\n    # also known as \"stars and bars\" where we calculate (n - 1)C(r - 1).\n    \n    # Subtract 6 from 20 because each kid gets at least one pen\n    pens_left = 20 - 6\n    \n    # Calculate the number of combinations\n    ways = factorial(pens_left + 6 - 1) // (factorial(pens_left) * factorial(6 - 1))\n\n    return ways\n\nans = solution()"
    ],
    "a6ad322655a94a94b6a34e6b8951731a": [
        "def solution():\n    return 53 * 58\n\nans = solution()"
    ],
    "0786a0cfe2bd43a9ac1c176d78e73a19": [
        "def solution():\n    # Total person-hours required to build the bridge\n    total_person_hours = 6 * 15\n    # Number of people needed to build the bridge in 2 hours\n    people_needed = total_person_hours / 2\n    return int(people_needed)\n\nans = solution()"
    ],
    "02858fb0c1d7495998f805b27ff5ac13": [
        "def solution():\n    minutes_per_quiz = 30\n    total_quizzes = 4\n    hours_per_minute = 1 / 60\n\n    total_time_minutes = minutes_per_quiz * total_quizzes\n    total_time_hours = total_time_minutes * hours_per_minute\n\n    return total_time_hours\n\nans = solution()"
    ],
    "ec04407fbdb64de19ace6733c3919a43": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10\n    without_zero = 9 * 9 * 9 # Numbers that do not contain zero\n    with_at_least_one_zero = total_three_digit_numbers - without_zero\n    return with_at_least_one_zero\n\nans = solution()"
    ],
    "91978558dacc4505ac4e35d145f8108b": [
        "def solution():\n    # Initialize a variable for the original total number of students\n    orig_total_students = 0\n    \n    # Start searching for the solution\n    while True:\n        # Let m be the largest square number before adding 18 students\n        m_squared = orig_total_students - 5\n        \n        # Check if m_squared is a perfect square\n        if (int(m_squared ** 0.5) ** 2 == m_squared):\n            # Calculate n after adding 18 students\n            n_squared = orig_total_students + 18\n            \n            # Check if n_squared is a perfect square\n            if (int(n_squared ** 0.5) ** 2 == n_squared):\n                # We've found the number of students that meet the condition\n                break\n        \n        # If not found, increment the total students and repeat the search\n        orig_total_students += 1\n    \n    # Return the original number of students\n    return orig_total_students\n\nans = solution()"
    ],
    "86f2b7935f1d47b099995c9ad98cd1d0": [
        "def solution():\n    mass = 0.10  # in kilograms\n    velocity = 30  # in meters per second\n\n    kinetic_energy = 0.5 * mass * velocity**2\n\n    return kinetic_energy\n\nans = solution()"
    ],
    "bb26e8a364284f6d9f8d709ca1f345a8": [
        "def solution():\n    for number in range(100, 201):\n        if (number % 3 == 1) and (number % 4 == 1) and (number % 5 == 1) and (number % 7 == 2):\n            return number\n\nans = solution()"
    ],
    "612916c7c6464d37b5bdb4a7f7365e62": [
        "def solution():\n    red_marbles = 45\n    blue_marbles = 4 * red_marbles\n    total_marbles = red_marbles + blue_marbles\n\n    return total_marbles\n\nans = solution()"
    ],
    "4398b5072c214118a4d7e606b9c7f7dd": [
        "def solution():\n    first_term = 58\n    common_difference = 51 - 58\n    n = 7\n\n    seventh_term = first_term + (n - 1) * common_difference\n\n    return seventh_term\n\nans = solution()"
    ],
    "1efc8331490f402c8a2dc98af0eb69e8": [
        "def solution():\n    for num in range(100, 300):\n        if num % 5 == 2 and num % 6 == 2 and num % 7 == 2:\n            return num\n\nans = solution()"
    ],
    "163aa773f4d845c8a2f2ed208a8950fb": [
        "def solution():\n    total_distance = 225\n    kevin_speed_ratio = 1.5\n    # Let jerry_speed = 1, then kevin_speed = 1.5\n    combined_speed_ratio = 1 + kevin_speed_ratio\n    jerry_distance = total_distance / combined_speed_ratio\n    return jerry_distance\n\nans = solution()"
    ],
    "57bf99419fd84ddf891e49e75324f73f": [
        "def solution():\n    total_length = 99\n    cuts = 8\n    pieces = cuts + 1  # After h cuts, there will be h+1 pieces\n    length_each_piece = total_length / pieces\n    return length_each_piece\n\nans = solution()"
    ],
    "e8ce7a71a9c94b3d8ba599db217353fb": [
        "def solution():\n    # The greatest odd digit for the ones place is 9\n    ones = 9\n\n    # The hundreds and tens place should add up to 13\n    # Since we're forming the smallest 4-digit number, start with smallest digit for the thousands place.\n    # Next smallest digit after 0 (can't be used in the thousands place) is 1\n    thousands = 1\n\n    # Now, find the possible pairs of numbers that add up to 13 for the hundreds and tens place.\n    # Since all digits must be different and we've used 1 and 9 already, we exclude them from the possibilities.\n    for hundreds in range(2, 10):\n        tens = 13 - hundreds\n        # We must ensure that hundreds and tens are distinct and are not 1 or 9\n        if tens != ones and tens != thousands and tens > 1 and tens < 10 and hundreds != tens:\n            break\n\n    # Construct the smallest 4-digit number with the given criteria\n    number = thousands * 1000 + hundreds * 100 + tens * 10 + ones\n\n    return number\n\nans = solution()"
    ],
    "8164105a2885459cbe6f0149d5f46883": [
        "def solution():\n    original_height = 100  # Let's assume the original height to be 100 units.\n    bounce_height = original_height\n    bounce_count = 0\n    while bounce_height >= 25:\n        bounce_height *= 0.75  # Each bounce reaches 75% of the previous height.\n        bounce_count += 1\n    return bounce_count\n\nans = solution()"
    ],
    "46cd8353df274c078e2fd68b250e0da1": [
        "def solution():\n    sequence = range(5, 21, 3)\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "2b3f02a0fa7248d58cf401ab102a597d": [
        "def solution():\n    total_width = 4800\n    picture_width = 210\n    number_of_pictures = 10\n\n    # Space covered by pictures\n    pictures_total_width = number_of_pictures * picture_width\n\n    # Remaining space after putting 2 pictures at the extremes\n    remaining_space = total_width - pictures_total_width\n\n    # Spacing between the centers of adjacent pictures\n    spacing = remaining_space / (number_of_pictures - 1)\n\n    # Center of the wall\n    wall_center = total_width / 2\n\n    # The center of the third picture from the left\n    # is one picture width and one spacing to the right of the extreme left\n    center_third_picture = picture_width + spacing\n\n    # Distance from the center of the wall to the center of the third picture\n    # The third picture is the second space from the left. 2*spacing to the right from the center\n    # Half of the picture width is subtracted because we measure from the center of the picture\n    distance_from_center = (wall_center - center_third_picture) + (picture_width / 2)\n\n    return distance_from_center\n\nans = solution()"
    ],
    "00f1d5cbd249489fa41dae6e52599fbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(2*x + 3*x + 2, 30 + 6*x - 8*x)\n    \n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "b909d93696cf47d0b8ed0c83e74aa63a": [
        "def solution():\n    doris_age = 10\n    uncle_future_age = 40\n\n    years_until_doris_reaches_uncle = uncle_future_age - doris_age\n    uncle_age_now = doris_age + years_until_doris_reaches_uncle\n\n    return uncle_age_now\n\nans = solution()"
    ],
    "ca1376e41d4341c39abc294ee9b4d9bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, apple = symbols('banana apple')\n\n    equation1 = Eq(2 * banana + 3 * apple, 1.50)\n    equation2 = Eq(3 * banana + 2 * apple, 1.45)\n\n    solutions = solve((equation1, equation2), (banana, apple))\n\n    annabella_cost = solutions[banana] + solutions[apple]\n\n    return annabella_cost\n\nans = solution()"
    ],
    "14006e4edc6c498b925dff66addea986": [
        "def solution():\n    ans = 597 * 63\n    return ans\n\nans = solution()"
    ],
    "0483752c6a204f15aacda3ff94327d0f": [
        "def solution():\n    interest = 225\n    rate = 2.25 / 100\n\n    principal = interest / rate\n    \n    return principal\n\nans = solution()"
    ],
    "622e2b8da7ee4f1fb4f317c991b75767": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amanda, belinda, lisa = symbols('amanda belinda lisa')\n\n    equation1 = Eq(amanda, 4 * belinda)\n    equation2 = Eq(lisa, amanda - 11)\n    equation3 = Eq(amanda + belinda + lisa, 43)\n\n    solutions = solve((equation1, equation2, equation3), (amanda, belinda, lisa))\n\n    return solutions[lisa]\n\nans = solution()"
    ],
    "501cf0e0bdee491db50baa99ff69b1b7": [
        "def solution():\n    # According to Timothy's reasoning:\n    # If 5 is smaller than 8, then \"regrouping must have taken place\",\n    # which implies that in the process of addition, the sum of two digits\n    # exceeded 9, and hence, 1 was carried over to the next place value.\n    \n    # However, Timothy concludes that 8 + ? = 15. This is not correct because if\n    # there was regrouping, the sum of the digits (including the carried 1)\n    # should be such that the ones place is 5. Therefore, the initial sum of\n    # the digits should end in 4 (before adding the carried over 1).\n    \n    # Hence, the equation should be 8 + ? + 1(carry) = 15.\n    # Therefore, 8 + ? = 14 and the missing number is 6, not 7.\n    \n    missing_number = 15 - 8 - 1\n    return missing_number\n\nans = solution()"
    ],
    "798223ee8f80484e91a8451484c51727": [
        "def solution():\n    return 20 - 5 - 1\n\nans = solution()"
    ],
    "88e0c7d77835428bbe187450a89fd57e": [
        "def solution():\n    return 1348 - 234 - 76 + 2234 - 48 - 24\n\nans = solution()"
    ],
    "ce620993d78944209d67e832a4f6c350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_money = symbols('original_money')\n\n    equation = Eq(original_money - 200 - (2/7)*(original_money - 200), original_money / 3)\n\n    solution = solve(equation, original_money)\n\n    return solution[0]\n\nans = solution()"
    ],
    "91c7b4be08964d77b4b67e46cd1f734b": [
        "def solution():\n    from math import factorial\n\n    # Treat Tom and Harry as a single entity first, plus the other 4 students\n    arrangements_without_Ronda = factorial(5)\n    \n    # Ronda will stand at the far right, so we treat that position as fixed.\n    \n    # However, within this entity, Tom and Harry can switch places, so multiply by 2.\n    arrangements_Tom_Harry = 2\n    \n    # Total arrangements are the arrangements without Ronda,\n    # times the arrangements of Tom and Harry, times the possible positions\n    # for the single entity of Tom and Harry (which is 5, as they move together).\n    total_arrangements = arrangements_without_Ronda * arrangements_Tom_Harry * 5\n\n    return total_arrangements\n\nans = solution()"
    ],
    "cac726123b6048d88b1d9136486d8aec": [
        "def solution():\n    initial_investment = 5000\n    interest_first_three_years = 1.15763\n    interest_last_two_years = 1.1664\n\n    total_after_three_years = initial_investment * interest_first_three_years\n    total_after_five_years = total_after_three_years * interest_last_two_years\n\n    return round(total_after_five_years, 1)\n\nans = solution()"
    ],
    "2d575e9d3dcb4bb3a35bda8638540b40": [
        "def solution():\n    rounded_price = 125000\n    if rounded_price % 100 == 0:\n        lowest_possible_price = rounded_price - 50\n    else:\n        lowest_possible_price = (rounded_price // 100) * 100 + 1\n    return lowest_possible_price\n\nans = solution()"
    ],
    "ccc1e15016544ef18eb8d6fbfa342f6b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    speed, time, distance = symbols('speed time distance')\n\n    # First equation: distance = speed * time\n    eq1 = Eq(distance, speed * time)\n\n    # Second equation: with speed increased by 20%, time is reduced by 1 hour\n    eq2 = Eq(distance, speed * 1.2 * (time - 1))\n\n    # Third equation: Travel 200 km at usual speed and the rest at 25% increased speed, time reduced by 12 minutes (0.2 hours)\n    eq3 = Eq(distance, 200 + speed * 1.25 * (time - 200/speed - 0.2))\n\n    # Solve the equations\n    solutions = solve((eq1, eq2, eq3), (speed, time, distance))\n\n    # Get the distance solution\n    return solutions[distance]\n\nans = solution()"
    ],
    "cc5debb2fb484837bd9e20117b66253d": [
        "def solution():\n    current_average = 89\n    desired_average = 95\n    number_of_tests_taken = 4\n    full_score = 100\n\n    current_total = current_average * number_of_tests_taken\n    tests_needed = 0\n\n    while True:\n        tests_needed += 1\n        new_total = current_total + (tests_needed * full_score)\n        new_average = new_total / (number_of_tests_taken + tests_needed)\n\n        if new_average >= desired_average:\n            break\n\n    return tests_needed\n\nans = solution()"
    ],
    "01ebc2d721814d4db11a4f6271fd146a": [
        "def solution():\n    first_distance = 540\n    middle_distance = 300\n    final_distance = 1000 - first_distance - middle_distance\n\n    first_speed = 9\n    middle_speed = 6\n    final_speed = 10\n\n    first_time = first_distance / first_speed\n    middle_time = middle_distance / middle_speed\n    final_time = final_distance / final_speed\n\n    total_time = first_time + middle_time + final_time\n\n    return total_time\n\nans = solution()"
    ],
    "b33352ddaff94fdf9bca43b11dd51548": [
        "def solution():\n    doris_age_now = 10\n    doris_age_then = 40\n\n    uncle_age_now = doris_age_then + (doris_age_then - doris_age_now)\n\n    return uncle_age_now\n\nans = solution()"
    ],
    "46688ef5acdc4df49717f3ab80f36c17": [
        "def solution():\n    total_classes = 18\n    lia_performances = 1\n    liz_performances = 1\n    total_performances = total_classes + lia_performances + liz_performances\n    return total_performances\n\nans = solution()"
    ],
    "1f3d5b49f91c4771addbb17609528cde": [
        "def solution():\n    train_length = 250\n    bridge_length = 260\n    speed = 30  # in meters per second\n\n    total_distance = train_length + bridge_length\n    time = total_distance / speed\n\n    return time\n\nans = solution()"
    ],
    "56b1265849bc4172b9283606e061da30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sheep, cows = symbols('sheep cows')\n    sheep_begin = sheep\n    cows_begin = cows\n\n    # Equation representing the initial relationship between sheep and cows\n    equation1 = Eq(sheep, 5/7 * cows)\n    \n    # Equation representing the relationship after bringing new sheep and removing cows\n    equation2 = Eq(cows - 7, 3/4 * (sheep + 21))\n\n    # Solving the system of equations for sheep and cows\n    solutions = solve((equation1, equation2), (sheep, cows))\n\n    return solutions[sheep_begin]\n\nans = solution()"
    ],
    "c476669828e74aee81ba796c38aab4b8": [
        "def solution():\n    chloe_stamps = 176\n    polly_stamps = 4 * chloe_stamps\n    difference = polly_stamps - chloe_stamps\n    return difference\n\nans = solution()"
    ],
    "a549cf3800294c169634bf21d56759b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    books, pencil_box = symbols('books pencil_box')\n\n    equation1 = Eq(2 * books + 3 * pencil_box, 42)\n    equation2 = Eq(2 * books + 6 * pencil_box, 60)\n\n    solutions = solve((equation1, equation2), (books, pencil_box))\n\n    return solutions[pencil_box]\n\nans = solution()"
    ],
    "42047954e98a4b1098845e2ff791180b": [
        "def solution():\n    start_time = (8, 30)  # (hours, minutes)\n    end_time = (9, 25)  # (hours, minutes)\n\n    start_minutes = start_time[0] * 60 + start_time[1]\n    end_minutes = end_time[0] * 60 + end_time[1]\n\n    n = end_minutes - start_minutes\n\n    return n\n\nans = solution()"
    ],
    "98fa02662c3f496dbfbd82e145244c2d": [
        "def solution():\n    A_efficiency = 1 / 6\n    B_efficiency = A_efficiency / 2\n    total_efficiency = A_efficiency + B_efficiency\n    days_to_complete = 1 / total_efficiency\n    return days_to_complete\n\nans = solution()"
    ],
    "dc7dede26ff941569676a4c0dc370ff2": [
        "def solution():\n    # Let x be the number of years it will take for the sum of their ages to be 30\n    # If the sum of their ages is currently 22, in x years, the sum of their ages will be 22 + x + x (since both will be x years older)\n    # Therefore, we can set up the equation: 22 + 2x = 30\n\n    # Solving the equation for x, we subtract 22 from both sides\n    x = (30 - 22) // 2\n\n    # Return the value of x, which represents the number of years it will take\n    return x\n\nans = solution()"
    ],
    "672eac0e95a14d3f9ead29a67b3f22d2": [
        "def solution():\n    haribo_cost = 50  # cost in cents\n    mamee_cost = haribo_cost - 30\n    jelly_cost = 6 * mamee_cost\n\n    jelly_cost_dollars = jelly_cost / 100  # convert cents to dollars\n    return jelly_cost_dollars\n\nans = solution()"
    ],
    "e804f82f48cb432f87a500257865625a": [
        "def solution():\n    ans = 15.41 + 0.023\n    return ans\n\nans = solution()"
    ],
    "dc703045b2df402dbdfe5981fc60d341": [
        "def solution():\n    return 18 * 32 // 36\n\nans = solution()"
    ],
    "365d1f5c27234c98810406b6e4bcded0": [
        "def solution():\n    remaining_after_joel = 4\n    plants_before_joel = (remaining_after_joel + 2) * 2\n\n    remaining_after_valerie = plants_before_joel\n    plants_before_valerie = (remaining_after_valerie + 3) * 2\n\n    remaining_after_ethan = plants_before_valerie\n    total_plants = (remaining_after_ethan + 1) * 2\n\n    return total_plants\n\nans = solution()"
    ],
    "9d5c3d4446b7434aaaa6846a334f2ea1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_fishballs = symbols('initial_fishballs')\n\n    # He sold 3/4 in the morning\n    morning_sold = initial_fishballs * 3 / 4\n    remaining_after_morning = initial_fishballs - morning_sold\n\n    # He sold 1/3 of the remaining in the afternoon\n    afternoon_sold = remaining_after_morning / 3\n    remaining_after_afternoon = remaining_after_morning - afternoon_sold\n\n    # Made another 506 fishballs\n    made_more = 506\n\n    # Had twice the number of fishballs he made at first\n    final_count = remaining_after_afternoon + made_more\n\n    equation = Eq(final_count, 2 * initial_fishballs)\n\n    initial_count = solve(equation, initial_fishballs)\n\n    return initial_count[0]\n\nans = solution()"
    ],
    "4f9fc9c45bc74b13945e3b6e4a79c3ef": [
        "def solution():\n    salary_per_month = 7.65\n    debt = 2.5\n    months = debt / salary_per_month\n    return months\n\nans = solution()"
    ],
    "810b29e808374893b25143dad8014c66": [
        "def solution():\n    ans = 0.23 * 200\n    return ans\n\nans = solution()"
    ],
    "37ba30f7b64a46d380cae5ff5558dd59": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of vanilla cupcakes be v\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n\n    # We know the relationships between the types of cupcakes\n    equation1 = Eq(chocolate, vanilla + 72)\n    equation2 = Eq(blueberry, vanilla - 36)\n\n    # And we know how many are left after selling\n    remaining_chocolate = chocolate - chocolate / 6\n    remaining_vanilla = vanilla - 2 * vanilla / 3\n    remaining_blueberry = blueberry - 7 * blueberry / 9\n\n    # Total remaining cupcakes equation\n    total_cupcakes = remaining_chocolate + remaining_vanilla + remaining_blueberry\n    equation3 = Eq(total_cupcakes, 427)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (chocolate, vanilla, blueberry))\n\n    # Chocolate cupcakes Sally sold\n    chocolate_sold = solutions[chocolate] / 6\n\n    return chocolate_sold\n\nans = solution()"
    ],
    "a69ea7bbe98046abb05ec657125e9e2a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let total number of candies be x\n    total_candies = symbols('total_candies')\n    \n    # Anna received 3/8 of the candies\n    anna = (3/8) * total_candies\n    \n    # Belle received 1/4 of the candies\n    belle = (1/4) * total_candies\n    \n    # Cathy and Dawn received total_candies - (anna + belle) candies\n    cathy_and_dawn = total_candies - (anna + belle)\n    \n    # Anna and Belle received 90 more candies than Cathy and Dawn\n    equation = Eq(anna + belle - cathy_and_dawn, 90)\n\n    # Solve for total number of candies\n    solutions = solve(equation, total_candies)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "11ce6a9abf8e477b9581c4ee7316be07": [
        "def solution():\n    chris_books = 12\n    beck_books = chris_books + 8\n    books_to_give = (beck_books - chris_books) / 2\n\n    return books_to_give\n\nans = solution()"
    ],
    "2214d6869bd045e2afc03dba93bcda5e": [
        "def solution():\n    ans = (5/8) * 92 + 7 * 0.625 + 62.5 / 100\n    return ans\n\nans = solution()"
    ],
    "1e328cd92fa04425b72e9c28f440ba39": [
        "def solution():\n    boys = 14\n    ratio_boys = 2\n    ratio_girls = 7\n    total_ratio = ratio_boys + ratio_girls\n    total_students = (boys / ratio_boys) * total_ratio\n    return int(total_students)\n\nans = solution()"
    ],
    "a0d429ec9b9241fbafa343fefd207ff9": [
        "def solution():\n    strawberry_cake_price = 3\n    marble_cake_price = strawberry_cake_price + 2\n    cheese_cake_price = 3 * marble_cake_price\n\n    price_of_two_cheese_cakes = 2 * cheese_cake_price\n\n    return price_of_two_cheese_cakes\n\nans = solution()"
    ],
    "b43e05329caa4f1a984bd70f841acdce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(37 - 3*(x + 7), 5*x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "1c415c8f98ba481e86c80c0113bb20a1": [
        "def solution():\n    circle_value = (6*6 + 2 - 17) / 3\n    return circle_value\n\nans = solution()"
    ],
    "70ed86d3effe4cc5bd724d34f5219fb8": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 3), (3, 5), (5, 7)]\n    result, _ = solve_congruence(*congruences)\n    while result < 400:\n        result += 3 * 5 * 7\n    if result > 500:\n        return None  # Out of the specified range\n    return result\n\nans = solution()"
    ],
    "5d87e59fcef54f0d8cbf90a06ad4361a": [
        "def solution():\n    n = 36\n    factors = set()\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    return len(factors)\n\nans = solution()"
    ],
    "cba96ea4079d4147a8e7a1bba76598b4": [
        "def solution():\n    total_pigs = 8\n    green_apples = 1 * total_pigs\n    red_apples = total_pigs // 2\n\n    total_apples = green_apples + red_apples\n\n    return total_apples\n\nans = solution()"
    ],
    "e495bb663c3f4e3fb7b4594b7b6e3ce0": [
        "def solution():\n    total_seeds = 20\n    died_seeds = total_seeds * 1/4\n    sunflowers_grown = total_seeds - died_seeds\n    return int(sunflowers_grown)\n\nans = solution()"
    ],
    "0a6b3f52433742509667f3e14550f591": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 5), (4, 7), (5, 9)]\n    ans = solve_congruence(*congruences)[0]\n    return ans\n\nans = solution()"
    ],
    "892e6ad962394876990f5b04addfae37": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    shirt, pants = symbols('shirt pants')\n    \n    equation1 = Eq(3 * shirt + 2 * pants, 81)\n    equation2 = Eq(5 * shirt + 4 * pants, 147)\n\n    solutions = solve((equation1, equation2), (shirt, pants))\n\n    total_price = solutions[shirt] + solutions[pants]\n    \n    return total_price\n\nans = solution()"
    ],
    "99ec89df21bc47e580283576006ce753": [
        "def solution():\n    initial_amount = 100\n    days = 15\n    deposit = 10\n    spend = 8\n    period = 2  # deposit and spend happens over a two-day period\n\n    total_periods = days // period\n    remaining_days = days % period\n\n    # For each complete period, Andy's pocket money increases by (deposit - spend) each period\n    net_period_gain = (deposit - spend) * total_periods\n\n    # For the remaining days, if there's an odd remaining day, it must be a deposit day\n    remaining_amount = deposit if remaining_days == 1 else 0\n\n    # Total amount after 15 days\n    total_amount = initial_amount + net_period_gain + remaining_amount\n\n    return total_amount\n\nans = solution()"
    ],
    "0cdfa66a263441afa78bab0d33bc8b54": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "0e91657d43d34effa4d1a8ca9067f554": [
        "def solution():\n    total_durians = 90\n    sold_fraction = 4/6\n    sold_durians = total_durians * sold_fraction\n    durians_left = total_durians - sold_durians\n    \n    return int(durians_left)\n\nans = solution()"
    ],
    "5a342d4cec7f4c4886694b8cade4fa53": [
        "def solution():\n    # Let the number Michael thought be x.\n    # According to the problem, we have the equation:\n    # (2 * x + 178) / 4 = 54\n    # Solving for x we get:\n    x = (54 * 4 - 178) / 2\n\n    return int(x)\n\nans = solution()"
    ],
    "e1e9d7528bbf401cbf3607c4c9d25245": [
        "def solution():\n    total_apples = 42 + 41 + 30 + 29 + 38\n    num_students = 5\n    average_apples = total_apples / num_students\n    return average_apples\n\nans = solution()"
    ],
    "4bbb81d1111b4e3cbec6b7862f30f6d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    marry_ini, alexis_ini, charlotte_ini, marry_end, alexis_end, charlotte_end = symbols(\n        'marry_ini alexis_ini charlotte_ini marry_end alexis_end charlotte_end')\n\n    # marry and alexis give 20% of their stickers to Charlotte\n    equation1 = Eq(marry_end, marry_ini - 0.2 * marry_ini)\n    equation2 = Eq(alexis_end, alexis_ini - 0.2 * alexis_ini)\n    equation3 = Eq(charlotte_end, charlotte_ini + 0.2 * (marry_ini + alexis_ini))\n\n    # Charlotte's stickers increase by 80%\n    equation4 = Eq(charlotte_end, charlotte_ini * 1.8)\n\n    # The ratio of stickers Marry and Alexis have is 7:5\n    equation5 = Eq(marry_ini / alexis_ini, 7 / 5)\n\n    # Marry had 20 stickers more than Charlotte in the end\n    equation6 = Eq(marry_end, charlotte_end + 20)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6),\n                      (marry_ini, alexis_ini, charlotte_ini, marry_end, alexis_end, charlotte_end))\n\n    return solutions[alexis_ini]\n    \nans = solution()"
    ],
    "1d5142c64ec641dc8bbd86895e5a3579": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the speed and distance\n    speed = symbols('speed')\n    distance = symbols('distance')\n    \n    # Original speed gets her there in 8 hours\n    original_time = 8  # hours\n    \n    # Increased speed to arrive 1 hour earlier, which is 7 hours\n    faster_time = 7  # hours\n    \n    # The increased speed is 5 km/h more than the original speed\n    increased_speed = speed + 5\n    \n    # To arrive 1 hour earlier at the increased speed,\n    # distance is the same but time is 7 hours\n    equation1 = Eq(distance, speed * original_time)\n    \n    # Equation for the increased speed and reduced time to arrive 1 hour earlier\n    equation2 = Eq(distance, increased_speed * faster_time)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (speed, distance))\n    \n    # Return the distance solution\n    return solutions[distance]\n\nans = solution()"
    ],
    "adce1fe036694ef68f2fd4cdac3f0be4": [
        "def solution():\n    total_arrangements = 4 * 3 * 2 * 1  # total number of ways to arrange 4 people\n    opposite_arrangements = 2           # number of ways Claire and Tony can sit opposite each other\n    \n    # Subtract the unwanted opposite arrangements from the total arrangements\n    return total_arrangements - (opposite_arrangements * 2 * 1 * 1)\n\nans = solution()"
    ],
    "599d7ab82508440d8bc57c2a45cc2bb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    banana, pear = symbols('banana pear')\n    \n    equation1 = Eq(banana + 2 * pear, 94)\n    equation2 = Eq(banana + pear, 62)\n\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "1cfd9ab02afc40268d415154a39502bb": [
        "def solution():\n    return 32 * 47\n\nans = solution()"
    ],
    "7455d596a9584c91a9f5f01d9ac7dda1": [
        "from itertools import permutations\n\ndef solution():\n    digits = '359'\n    all_permutations = sorted([''.join(p) for p in permutations(digits)])\n    fifth_number = all_permutations[4]\n    return int(fifth_number)\n\nans = solution()"
    ],
    "19d73820d6d94870a69075b50604e9ea": [
        "def solution():\n    total_distance = 36\n    chairs_before = 10\n    chairs_after = chairs_before - 3\n    distance_between_chairs_before = total_distance / (chairs_before - 1)\n    distance_between_chairs_after = distance_between_chairs_before * chairs_before / chairs_after\n    \n    return distance_between_chairs_after\n\nans = solution()"
    ],
    "6070f6baef3345f49dc764aaf67f2145": [
        "def solution():\n    n = 7**2 - 6**2\n    return n\n\nans = solution()"
    ],
    "ec5a902e3059436a93f54bdff89b1b64": [
        "def solution():\n    # Each brother has at least two books, so we start with 6 books already given away (2 for each)\n    # and we have to distribute the remaining 4 books in any possible way.\n    count = 0\n    for x1 in range(2, 11): # x1 can range from 2 to 10 (as at least 2 books are with each brother)\n        for x2 in range(2, 11 - x1): # x2 is from 2 to (10 - x1), since x1 + x2 needs to be ≤ 10\n            x3 = 10 - (x1 + x2)       # x3 is determined by x1 and x2\n            if x3 >= 2:               # x3 must also have at least 2 books\n                count += 1            # This is a valid distribution\n\n    return count\n\nans = solution()"
    ],
    "002d73bb7e164b1cbeeebeeb6b1b8c36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Denote the smallest angle as x and the other unknown angle as 5x\n    x = symbols('x')\n    \n    # Since the sum of angles in a quadrilateral is 360 degrees and we have two right angles (90 degrees each)\n    # The equation is 90 + 90 + x + 5x = 360\n    equation = Eq(2 * 90 + x + 5 * x, 360)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    # Calculate the largest angle which is 5 times x\n    largest_angle = 5 * solution[x]\n\n    return largest_angle\n\nans = solution()"
    ],
    "a7c840e7a73042529289e2f30f4cce0a": [
        "def solution():\n    ans = 46 / (3 * 4) * (7 / 8) / (2 / 3) * (4 * 8) / (9 - 2)\n    return ans\n\nans = solution()"
    ],
    "18e7c7d882fd4965a7d2ddada6edb9ba": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "08b558c3faa347dab4cf75659be5e9ba": [
        "def solution():\n    # Function to calculate number of ways to reach a given step\n    def ways_to_step(n):\n        if n == 0 or n == 1:\n            return 1\n        if n == 2:\n            return 2\n        return ways_to_step(n-1) + ways_to_step(n-2) + ways_to_step(n-3)\n\n    # Total ways to step 4 as Jimmy can't step on 5\n    ways_to_4 = ways_to_step(4)\n    \n    # Now, for each way to get to step 4, calculate ways to get from step 6 to 10\n    # Because Jimmy has to skip step 5, he must take a two-step from 4 to 6\n    # So, the subproblem starts from step 6\n    ways_from_6_to_10 = ways_to_step(10 - 6)\n\n    # Total ways will be the product of ways to get to step 4 and ways to get from step 6 to 10\n    total_ways = ways_to_4 * ways_from_6_to_10\n\n    return total_ways\n\nans = solution()"
    ],
    "87be82c9d7de44ca9010e74b7b93822e": [
        "def solution():\n    ans = 768 // 3\n    return ans\n\nans = solution()"
    ],
    "d552a67eab8b49baa8a9ba818269f589": [
        "def solution():\n    # Initialize the count of the smallest number of boxes to infinite as we are looking for the minimum\n    min_boxes = float('inf')\n    # The maximum number of small boxes that can be used is 54 // 5\n    for small in range(54 // 5 + 1):\n        # The maximum number of medium boxes that can be used is (54 - 5 * small) // 7\n        for medium in range((54 - 5 * small) // 7 + 1):\n            # Calculate the number of large boxes that will make the total count of apples exactly 54\n            large = (54 - 5 * small - 7 * medium) / 10\n            # If the number of large boxes is an integer and the total number of boxes is less than current minimum\n            if large.is_integer() and small + medium + large < min_boxes:\n                # Update the minimum number of boxes\n                min_boxes = small + medium + large\n    return int(min_boxes)\n\nans = solution()"
    ],
    "a0bb16508a094a2b923d767cc547f24e": [
        "def solution():\n    factors = []\n    for i in range(10, 100):\n        if i % 7 == 0 and 7007 % i == 0:\n            factors.append(i)\n            if len(factors) == 2:\n                break\n    ans = sum(factors)\n    return ans\n\nans = solution()"
    ],
    "f238021737bb4ddf866f1e344662e725": [
        "def solution():\n    from math import ceil, log2\n\n    num_bottles = 1000\n\n    # Calculate the minimum number of test tubes needed using binary representation\n    min_test_tubes = ceil(log2(num_bottles))\n\n    return min_test_tubes\n\nans = solution()"
    ],
    "adee1a24c7024765a006ff883559d59a": [
        "def solution():\n    sequence = []\n    for i in range(1, 10):\n        sequence.extend([i] * i)\n    median_index = len(sequence) // 2\n    ans = sequence[median_index]\n    return ans\n\nans = solution()"
    ],
    "7f2800865ae74b51aea6bb7d879f748d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable in the equation\n    x = symbols('x')\n    \n    # Define the equation\n    equation = Eq((x + 6) / 3, 5)\n\n    # Solve for the variable\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "65d0a4bf0dd4421d8f7a7ae61320a871": [
        "def solution():\n    cans_in_6_days = 42\n    days = 9\n    cans_per_day = cans_in_6_days / 6\n    cans_in_9_days = cans_per_day * days\n    return cans_in_9_days\n\nans = solution()"
    ],
    "8c9a2bd605ed4c729cd446a9f7aa73b2": [
        "def solution():\n    ans = (6/7) * 42\n    return ans\n\nans = solution()"
    ],
    "026d98e841e64cdd89aad40de45ad4b6": [
        "def solution():\n    visitors_per_minute = 10\n    check_in_per_entrance = 25\n\n    # With one entrance, no waiting in line after 16 minutes\n    one_entrance_no_wait = 16\n    \n    # Total visitors after 16 minutes with one entrance\n    total_visitors = visitors_per_minute * one_entrance_no_wait\n    \n    # With two entrances, double the check-in rate\n    check_in_rate_two_entrances = check_in_per_entrance * 2\n\n    # Time to check in all visitors with two entrances without waiting\n    time_with_two_entrances = total_visitors / check_in_rate_two_entrances\n    \n    return time_with_two_entrances\n\nans = solution()"
    ],
    "43e9733a82014d8eabf755557196a178": [
        "def solution():\n    weekly_carrots = 14\n    total_weeks = 30\n    total_carrots = weekly_carrots * total_weeks\n    return total_carrots\n\nans = solution()"
    ],
    "5dd5b133aea24401a5002b33b8907b40": [
        "def solution():\n    miles_per_hour = 65\n    minutes = 15\n    hours = minutes / 60\n    distance_miles = miles_per_hour * hours\n    \n    # Conversion factor: 1 mile = 1.60934 kilometers\n    miles_to_kilometers = 1.60934\n    distance_kilometers = distance_miles * miles_to_kilometers\n\n    return distance_kilometers\n\nans = solution()"
    ],
    "81d722c81c1f48a79aedfcad65400bc2": [
        "def solution():\n    day_distance = 5\n    night_distance = 3\n    total_distance = 16\n    current_distance = 0\n    day_count = 0\n    \n    while current_distance < total_distance:\n        day_count += 1\n        current_distance += day_distance  # Snail climbs during the day\n        \n        if current_distance >= total_distance:\n            break  # Snail has climbed out of the burrow\n        \n        current_distance -= night_distance  # Snail slides at night\n\n    return day_count\n\nans = solution()"
    ],
    "da128269ec8a4b78bcc13ee12e8d271e": [
        "def solution():\n    total_cookies = 40\n    given_away = 8\n    cookies_per_bottle = 4\n\n    remaining_cookies = total_cookies - given_away\n    number_of_bottles = remaining_cookies / cookies_per_bottle\n\n    return int(number_of_bottles)\n\nans = solution()"
    ],
    "f330e5185f564b4f8439985f154a4ab2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cookies, muffins = symbols('cookies muffins')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(cookies, muffins + 24)\n    equation2 = Eq(cookies - 5/8 * cookies + muffins - 3/4 * muffins, 74)\n    \n    # Solving the equations\n    solutions = solve((equation1, equation2), (cookies, muffins))\n    \n    return solutions[cookies]\n\nans = solution()"
    ],
    "b295ec92694641e88fe8ece9db989418": [
        "def solution():\n    # Let the number of dragonflies before the magic show be x.\n    # Since the number of frogs is 9 more than that of dragonflies,\n    # the number of frogs before the magic show would be x + 9.\n\n    # After the magic show, there are 11 frogs and 10 dragonflies in total.\n    # Hence, the total number of animals before the show is the sum of frogs and dragonflies after the show.\n    # Total = frogs_initial + dragonflies_initial\n    # 21 = (x + 9) + x\n    # 21 = 2x + 9\n    # 12 = 2x\n    # x = 6\n\n    # So, there were 6 dragonflies before the show.\n    # The number of frogs before the show would be x + 9 = 6 + 9.\n\n    frogs_initial = 6 + 9\n    return frogs_initial\n\nans = solution()"
    ],
    "6bf09e258c0344d980831d0a2582021b": [
        "def solution():\n    for number in range(999, 99, -1):\n        if number % 25 == 0:\n            return number\n\nans = solution()"
    ],
    "15e2a7686f9044aeaf931e87b0693cae": [
        "def solution():\n    # Assuming the costs of tickets, metro, and coffee are constants that we know\n    # Without this information, we cannot proceed with the calculation\n    # Thus, we are assuming the following costs for demonstration:\n    ticket_price = 10  # The price for one ticket\n    metro_cost = 2.5   # Metro cost for a round trip\n    coffee_price = 1.5 # The cost for one cup of coffee\n\n    # Total money Richard has\n    total_money = 40\n\n    # Calculate costs for Richard himself first\n    richard_costs = (ticket_price + metro_cost + coffee_price)\n\n    # Remaining money to spend on friends\n    remaining_money = total_money - richard_costs\n\n    # Now calculate how many friends Richard can take\n    # Cost for each friend includes ticket, metro, and coffee\n    friend_costs = ticket_price + metro_cost + coffee_price\n\n    # The number of friends Richard can take is the remaining money divided by the cost per friend\n    num_friends = remaining_money // friend_costs\n\n    return int(num_friends)\n\nans = solution()"
    ],
    "0d784e5849d84e58ad27c2767fae5a52": [
        "def solution():\n    for A in range(10):\n        number = int(f\"123{A}456{A}789{A}0\")\n        if number % 9 == 0 and number % 5 != 0:\n            return A\n\nans = solution()"
    ],
    "e1f9970642f64e64b790ec29f85e494f": [
        "def solution():\n    # Speed ratio of driver to cyclist\n    driver_speed = 13\n    cyclist_speed = 2\n    speed_ratio = driver_speed / cyclist_speed\n\n    # The cyclist takes 143 minutes more than the driver\n    extra_time_cyclist = 143\n\n    # Let's denote the time taken by the driver as t (in minutes)\n    # So, the cyclist takes t + 143 minutes\n    # Since the distances are the same and time * speed = distance:\n    # driver_speed * t = cyclist_speed * (t + 143)\n    # Solve for t using the speed ratio:\n    # t = (cyclist_speed * 143) / (driver_speed - cyclist_speed)\n    t = (cyclist_speed * extra_time_cyclist) / (driver_speed - cyclist_speed)\n\n    return t\n\nans = solution()"
    ],
    "16f45879a4ca4545b12ade2f472ea304": [
        "def solution():\n    n = 12\n    sum_of_cubes = sum(i**3 for i in range(2, n+1))\n    return sum_of_cubes\n\nans = solution()"
    ],
    "f0b47802cada49d286687ff9e3a7086d": [
        "def solution():\n    ans = 48 - 47 + 46 - 45 + 44 - 43 + 42 - 41 + 40\n    return ans\n\nans = solution()"
    ],
    "82befdbc19124ec4a29b8a7200da5f5f": [
        "def solution():\n    total_cost = (4 * 24) + (5 * 81) + (7 * 20)\n    return total_cost\n\nans = solution()"
    ],
    "0ae254e064134f188c9be40779165325": [
        "def solution():\n    # Hypothetically check the conditions\n    for i in range(1, 6):  # Evaluate each statement\n        correct_statements = [False] * 5  # Initially set all statements to False\n        if i != 1:  # if the first statement is not true\n            correct_statements[0] = False\n        else:\n            correct_statements = [True] * 5  # If statement 1 is true, all are true (which creates a paradox)\n\n        if i != 2:  # if the second statement is not true\n            correct_statements[1] = False\n        else:\n            correct_statements = [False] * 5  # If statement 2 is true, all are false (which creates a paradox)\n\n        if i == 3:  # if the third statement is true\n            correct_statements[2] = True\n\n        if i != 4:  # if the fourth statement is not true\n            correct_statements[3] = False\n        else:\n            correct_statements = [True] * 5  # If statement 4 is true, all are true (which creates a paradox)\n\n        if i == 5:  # if the fifth statement is true\n            correct_statements[4] = True\n\n        # Now count the number of statements that are True\n        true_count = sum(correct_statements)\n\n        # We are looking for the scenario where only one statement is True\n        if true_count == 1 and correct_statements[i-1] is True:\n            return i  # Return the index of the single correct statement\n\nans = solution()"
    ],
    "2fd2c2cf5b0e4e77ade10ea6e459326d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'c' be the total number of coins\n    c = symbols('c')\n\n    # Original number of heads is one quarter of the total coins\n    heads_original = c / 4\n\n    # When two more coins are turned, the number of heads is one third\n    heads_after = (c + 2) / 3\n\n    # Equation after two coins are turned\n    equation = Eq(heads_original + 2, heads_after)\n\n    # Solve for the total number of coins 'c'\n    solutions = solve(equation, c)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "b92bb1c34016428e8b1539c16095a291": [
        "from math import factorial\n\ndef ways_to_arrange_shows(total_shows, comedy_shows):\n    return factorial(total_shows) // (factorial(comedy_shows) * factorial(total_shows - comedy_shows))\n\ndef solution():\n    total_ways = 0\n\n    # Total number of shows\n    total_shows = 5 + 3\n\n    # Number of possible positions for the first comedy show\n    for i in range(total_shows - 2):\n        # For each position i, there are (i+1) places to insert the remaining comedy shows\n        # without them being consecutive\n        total_ways += ways_to_arrange_shows(i + 1, 2) * ways_to_arrange_shows(total_shows - i - 1, 1)\n\n    return total_ways\n\nans = solution()"
    ],
    "509e74e27ec949a4bd04c96689bc27b8": [
        "def solution():\n    trains = 4\n    cars = 3\n    flights = 2\n    \n    total_ways = trains + cars + flights\n    \n    return total_ways\n\nans = solution()"
    ],
    "ab295a6189f54b16ad73515c7acb0dc0": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "85093fa878264795a7751d28ce2631a2": [
        "def solution():\n    total_road = 500\n    total_days = 5\n    \n    meters_per_day = total_road / total_days\n    \n    return meters_per_day\n\nans = solution()"
    ],
    "a93e649ea04246e29d39e3abf1c9cbf4": [
        "def solution():\n    total_sum = 0\n    # Since the pattern repeats every six digits (2, 3, 4, 5, 6, 0), we can find the sum of each cycle\n    cycle_sum = sum(range(2, 7))\n    # Find how many complete cycles of 6 digits there are in 2100 digits\n    complete_cycles = 2100 // 6\n    # Add up the sums of cycles\n    total_sum += complete_cycles * cycle_sum\n    # Calculate the remainder of digits\n    remaining_digits = 2100 % 6\n    # Sum the remaining digits by adding the start of the cycle (2, 3, 4, 5 or 6)\n    for i in range(2, 2 + remaining_digits):\n        total_sum += i\n    return total_sum\n\nans = solution()"
    ],
    "ad97ccd1f3f147778a05bec0c8d4686c": [
        "def solution():\n    values = [2/5, 1/4, 0.45, 0.35, 7/20]\n    sorted_values = sorted(values)\n    middle_index = len(sorted_values) // 2\n    return sorted_values[middle_index]\n\nans = solution()"
    ],
    "ad40132c81d646cca930b7085fe9b999": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((5 * x + 7) / 4, 8)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "805c2d490543494daae962252fa53bed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x / 2) - 9, 12)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "03a77a22a7ee441d83180f51247c76d2": [
        "def solution():\n    ans = 2018 - 314\n    return ans\n\nans = solution()"
    ],
    "d6f4e33c53824be9b1e66bbf1d27bf6a": [
        "def solution():\n    for chocolates in range(41, 60):\n        if chocolates % 4 == 2 and chocolates % 6 == 2:\n            return chocolates\n\nans = solution()"
    ],
    "f93efda9bc144ea8ad3f28fa5d961c5e": [
        "from math import factorial\n\ndef solution():\n    # Number of people\n    n = 6\n    # Number of seats\n    k = 8\n    # As the table is circular, we fix one person and arrange the remaining (n-1) people\n    # around the remaining (k-1) seats.\n    num_ways = factorial(n-1)\n    \n    return num_ways\n\nans = solution()"
    ],
    "4a1f30f8a5d9460a9ca929a63a2af4ef": [
        "def solution():\n    digits = [4, 5, 7, 9]\n    smallest_even = float('inf')\n\n    for d1 in digits:\n        for d2 in digits:\n            for d3 in digits:\n                for d4 in digits:\n                    if len({d1, d2, d3, d4}) == 4:  # making sure all digits are used once\n                        num = d1*1000 + d2*100 + d3*10 + d4\n                        if num % 2 == 0:  # num should be even\n                            smallest_even = min(smallest_even, num)\n    \n    return smallest_even\n\nans = solution()"
    ],
    "ac69d28e01274b9cb6dba2d848512b1e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    \n    equation = Eq(55 - 6 * (7 - x), 37)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "8356de756f6c4a9296f2986d44679ee5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of steps on the escalator be s\n    s = symbols('s')\n    \n    # When Peter walks at 1 step per second, the escalator takes 10 seconds to finish.\n    # The number of steps the escalator will have moved in that time is s-10\n    # So the escalator moves at a rate of (s-10)/10 steps per second\n\n    # When Peter walks at 2 steps per second, the escalator takes 8 seconds to finish (16 steps / 2 steps per second = 8)\n    # The number of steps the escalator will have moved in that time is s-16\n    # So the escalator moves at the same rate, (s-16)/8 steps per second\n\n    # We can create an equation stating that the two rates are equal\n    equation = Eq((s-10)/10, (s-16)/8)\n\n    # Solve the equation for the number of steps (s)\n    solution = solve(equation, s)\n\n    # Return the total number of steps on the escalator\n    return solution[0]\n\nans = solution()"
    ],
    "41faa1f0b1cc4a408ca39ea9588f7c41": [
        "def solution():\n    total_dollars = 3.5\n    quarters_in_dollar = 4\n\n    num_quarters = total_dollars * quarters_in_dollar\n\n    return int(num_quarters)\n\nans = solution()"
    ],
    "ef3c1e2ecc29478cae0e4c67e21cfd31": [
        "def solution():\n    chocolate_price_p = 72\n    balloon_price_p = 20\n    total_paid_p = 1000  # ￡10 note in pence\n    change_received_p = 388  # ￡3.88 change in pence\n\n    # Calculate the total amount spent (in pence)\n    total_spent_p = total_paid_p - change_received_p\n\n    # Subtract the cost of the chocolate to find the money spent on balloons\n    money_spent_on_balloons_p = total_spent_p - chocolate_price_p\n\n    # Calculate the number of balloons\n    number_of_balloons = money_spent_on_balloons_p // balloon_price_p\n\n    return number_of_balloons\n\nans = solution()"
    ],
    "0372e783670b4989a40bb288d0a50b49": [
        "def solution():\n    from math import lcm\n    return lcm(3, 4, 10)\n\nans = solution()"
    ],
    "c3bed35ee49449b1b1c173972bfbdc16": [
        "def solution():\n    percentage = 45\n    total_length = 2000\n\n    part_length = (percentage / 100) * total_length\n\n    return part_length\n\nans = solution()"
    ],
    "1fb58eeac24a49a9a387cd050b737f10": [
        "def solution():\n    students = 17\n    kayak_capacity = 4\n    min_kayaks = (students // kayak_capacity) + (students % kayak_capacity > 0)\n    return min_kayaks\n\nans = solution()"
    ],
    "efa72e12128b4d01a799c7adc89fd0e4": [
        "def solution():\n    total_money = 243\n    fraction_spent = 2 / 9\n    spent_money = total_money * fraction_spent\n    \n    remaining_money = total_money - spent_money\n    \n    # Let cost of one cupcake be c and cost of one slice of pizza be p.\n    # 3 slices of pizza equals 2 cupcakes: 3p = 2c\n    # He bought 5 cupcakes and 6 slices of pizza: 5c + 6p = spent_money\n    # We can now solve for the cost of one cupcake (c).\n    \n    # From the first equation: p = (2/3)c\n    # Substitute the value of p into the second equation to find c:\n    # 5c + 6 * (2/3)c = spent_money\n    # 5c + 4c = spent_money\n    # 9c = spent_money\n    c = spent_money / 9\n\n    # Find the greatest number of cupcakes he can buy with the remaining money\n    max_cupcakes = remaining_money // c\n\n    return int(max_cupcakes)\n\nans = solution()"
    ],
    "47daaf2e351c41baa45e0b8bebe5a912": [
        "def solution():\n    from sympy import symbols, solve, sqrt\n\n    x = symbols('x')\n    a = 4 * sqrt(3)\n    equation = 3 * a - sqrt(3 * x)\n\n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "9836746f750849eab60f6f4814df73ae": [
        "def solution():\n    part1 = 4 + (2 * 13)\n    part2 = (4 + 2) * 13\n    ans = part2 - part1\n    return ans\n\nans = solution()"
    ],
    "83872d0eef7a43dfb1188835aa5cf9cf": [
        "def solution():\n    # Let x be the age of the fourth dwarf (the middle one)\n    # then the ages of the youngest three (x-3, x-2, x-1)\n    # and their sum is 3x - 6\n    \n    # We know their sum is 42\n    sum_youngest_three = 42\n    x = (sum_youngest_three + 6) // 3\n    \n    # The ages of the oldest three are (x+1, x+2, x+3)\n    # and their sum is 3x + 6\n    sum_oldest_three = 3*x + 6\n    \n    return sum_oldest_three\n\nans = solution()"
    ],
    "95c22bdbc98241c5a13eb5bfac9fdeef": [
        "def solution():\n    count = 0\n    for num in range(74, 200):\n        str_num = str(num)\n        if len(set(str_num)) == len(str_num):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ed3efc4e403348c68b8110b921b8dbda": [
        "def solution():\n    ans = 861 // 7\n    return ans\n\nans = solution()"
    ],
    "ea690ce1e8584d07923ee3bc953befdb": [
        "def solution():\n    first_month = 15\n    last_month = 213\n    difference = 24 - 15\n\n    num_months = ((last_month - first_month) // difference) + 1\n\n    return num_months\n\nans = solution()"
    ],
    "206f12ce0af144238e17dafffb955002": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "997a64284e3544e7a7e0c6fe94460913": [
        "def solution():\n    from itertools import permutations\n    \n    numbers = [2, 3, 5]\n    perm = permutations(numbers, 3)\n    \n    count = len(list(perm))\n    return count\n\nans = solution()"
    ],
    "2e6b4015f6284de4a0c0669daaa24807": [
        "def solution():\n    import math\n\n    count = 0\n    number = 2\n\n    # Continue generating numbers in the sequence until the number becomes too large\n    while number < 10**10:  # Arbitrary large power of 10 to ensure we cover all given numbers\n        if math.isqrt(number)**2 == number:\n            count += 1\n        number = number * 10 + 5  # Append 5 to get the next number in the sequence\n    \n    return count\n\nans = solution()"
    ],
    "d9b42c64ab424ba98dbea5766a9ecc3c": [
        "def solution():\n    # Calculate the rate of production per worker per minute\n    rate_per_worker_per_minute = 120 / (6 * 4)\n\n    # Calculate the total number of parts produced by 3 workers in 10 minutes\n    parts = 3 * 10 * rate_per_worker_per_minute\n\n    return int(parts)\n\nans = solution()"
    ],
    "e495cca42c1345a4b15b14b27a2a00c5": [
        "def solution():\n    original_value = 98\n    new_value = 44.1\n    change = new_value - original_value\n    percent_change = (change / original_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "af0382a8cc5e48a18bb7e42fd763f480": [
        "def solution():\n    # Let x be the number of pieces of paper that were cut into three parts.\n    # Each piece of paper that is cut into three parts results in 2 additional pieces.\n    # The original number of pieces is 10, so we need to find the value of x that satisfies the following equation:\n    # 10 + 2x = 16\n\n    # Total pieces of paper after some are cut into three parts\n    total_pieces_after_cut = 16\n    # Original number of pieces of paper\n    original_pieces = 10\n    # Additional paper pieces created by each cut\n    additional_pieces_per_cut = 2\n\n    # Calculate the number of pieces cut into three parts\n    num_cut_into_three = (total_pieces_after_cut - original_pieces) // additional_pieces_per_cut\n\n    return num_cut_into_three\n\nans = solution()"
    ],
    "9b500db0f33f4fa7a395fa0b079d3de4": [
        "def solution():\n    total_apples = 8 * 10\n    rotten_apples = total_apples * 1/4\n    non_rotten_apples = total_apples - rotten_apples\n    return int(non_rotten_apples)\n\nans = solution()"
    ],
    "8df7c69637724afeb40a650136d884cc": [
        "def solution():\n    initial_value = 160\n    final_value = 168\n\n    percentage_increase = ((final_value - initial_value) / initial_value) * 100\n\n    return percentage_increase\n\nans = solution()"
    ],
    "ed6460b42a0146b59f0890c10edd817c": [
        "def solution():\n    ans = 14 * 7 * 2\n    return ans\n\nans = solution()"
    ],
    "e27aaf5d541a4c6dac0a50ca457f87ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sack_of_rice, packet_of_oatmeal = symbols('sack_of_rice packet_of_oatmeal')\n\n    equation1 = Eq(3 * sack_of_rice + 3 * packet_of_oatmeal, 36)\n    equation2 = Eq(sack_of_rice, 2 * packet_of_oatmeal)\n\n    solutions = solve((equation1, equation2), (sack_of_rice, packet_of_oatmeal))\n\n    return solutions[sack_of_rice]\n\nans = solution()"
    ],
    "0b88d57e68004f1f83f1f05147aba9ae": [
        "def solution():\n    total_pupils = 380\n    swimming_pupils = total_pupils * 70 / 100\n    swimming_girls = 200\n    \n    # Let the number of girls be g and boys be b\n    # g + b = total_pupils and b = total_pupils - g\n    # Additionally, 40% of boys cannot swim so 60% can swim.\n    # Therefore, swimming_pupils = swimming_girls + 0.6 * (total_pupils - g)\n    # We can solve for g using this equation.\n    \n    g = (swimming_pupils - swimming_girls) / 0.6\n    g = total_pupils - g  # Switching from boys to girls\n\n    return int(g)\n\nans = solution()"
    ],
    "b746b9baab8c4a33bd87af0d6945be01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5 * (6 * x + 1) - 2 * x, 89)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "b423b47f8b544d03af8cc3a8a122e9ab": [
        "def solution():\n    n = 12\n    sum_of_numbers = sum(range(1, n + 1))\n    A = sum_of_numbers ** 2\n    return A\n\nans = solution()"
    ],
    "b9c7443e6d2446d1880d97e9932a5033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the amount of 10% sugar water needed\n    x = symbols('x')\n\n    # Equation based on sugar quantity before and after mixing\n    # 30% of 4 kg + 10% of x kg = 26% of (4 kg + x kg)\n    equation = Eq(0.30 * 4 + 0.10 * x, 0.26 * (4 + x))\n\n    # Solve the equation for x\n    required_amount = solve(equation, x)\n\n    return required_amount[0]\n\nans = solution()"
    ],
    "5bb77e251c3740d5aab8750dc2aef4ff": [
        "def solution():\n    original_price_after_first_discount = 32\n    further_discount = 4\n    final_price = original_price_after_first_discount - further_discount\n\n    discount_percentage = 20\n    # The discounted price is equivalent to 80% of the original price\n    original_price_before_discounts = (original_price_after_first_discount / (1 - discount_percentage / 100))\n\n    # We can now find the total discount in terms of money\n    total_discount = original_price_before_discounts - final_price\n\n    # Now we find the percentage of the total discount\n    total_discount_percentage = (total_discount / original_price_before_discounts) * 100\n\n    return total_discount_percentage\n\nans = solution()"
    ],
    "94f427d14d9b4d18afe48096055372d1": [
        "def solution():\n    # Let j represent the mass of the jar without chocolates\n    # Let c represent the mass of one chocolate\n    # We have two equations:\n    # j + 5c = 185g\n    # j + 17c = 317g\n    \n    # We can solve for j and c using substitution or elimination.\n    # Let's use elimination. We'll subtract the first equation from the second.\n    # (j + 17c) - (j + 5c) = 317g - 185g\n    # j + 17c - j - 5c = 132g\n    # 12c = 132g\n    # c = 132g / 12\n    c = 132 / 12\n    \n    # Now we can find the mass of the jar (j) using the value of c in one of the equations.\n    # j + 5c = 185g\n    # j = 185g - 5c\n    j = 185 - 5 * c\n    \n    # Finally, we need to find the mass of the jar with 10 chocolates.\n    # The mass is represented by j + 10c\n    mass_with_10_chocolates = j + 10 * c\n    \n    return mass_with_10_chocolates\n\nans = solution()"
    ],
    "a8239f9e0ecd49818a91f1dd8da80bf9": [
        "def solution():\n    from math import sqrt\n\n    # Number to be divided into equal parts\n    num = 200\n    # Counter for the number of ways\n    count = 0\n\n    # Iterate over possible number of parts (n_parts) from 2 to number/2\n    for n_parts in range(2, num // 2 + 1):\n        if num % n_parts == 0:\n            count += 1\n\n    # Add one for the number itself being written as a sum of one part\n    count += 1\n\n    # Returns the final count of ways\n    return count\n\nans = solution()"
    ],
    "bbe36118c29249729aad8891551bb3d7": [
        "def solution():\n    def custom_operation(a, b):\n        return a * b - a - b + 1\n\n    ans = custom_operation(custom_operation(2, 3), 4)\n    return ans\n\nans = solution()"
    ],
    "fa375130b4804eb2ac24de6cdb33ba36": [
        "def solution():\n    from sympy import divisors, is_square\n\n    # Find all divisors of 2240\n    divs = divisors(2240)\n\n    # Go through the divisors and check which one makes the quotient a square\n    for d in divs:\n        quotient = 2240 // d\n        if is_square(quotient):\n            return d\n\nans = solution()"
    ],
    "2d23c45ab97549b4b8ab41ad32224d76": [
        "def solution():\n    # Since the wheat is planted along the side of the field, we'll calculate\n    # the perimeter first and then subtract the corners to avoid counting them twice.\n    length = 144\n    width = 204\n    total_wheat = 116\n\n    perimeter = 2 * (length + width)\n    \n    # Subtract 4 from the total wheat count to account for the corners.\n    space_for_wheat = total_wheat - 4\n    \n    # Divide the perimeter of the rectangle by the spaces for wheat\n    # to get the distance between every 2 wheat.\n    distance = perimeter / space_for_wheat\n    \n    return distance\n\nans = solution()"
    ],
    "f88ff061bff143cb95b6f618e6e1efd8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    lana, mark = symbols('lana mark')\n    total_sweets = 674\n    \n    # Equation representing the initial total\n    equation1 = Eq(lana + mark, total_sweets)\n    \n    # Equation after Lana gave away 1/3 of her sweets and Mark ate 34 sweets\n    equation2 = Eq(lana - lana/3, mark - 34)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (lana, mark))\n    \n    # The difference in the number of sweets Lana had compared to Mark initially\n    ans = solutions[lana] - solutions[mark]\n    return ans\n\nans = solution()"
    ],
    "c316b949005a4f70998bf21b2636f3e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dorothy, timmy, kevin = symbols('dorothy timmy kevin')\n    \n    equation1 = Eq(dorothy, 8 * timmy)\n    equation2 = Eq(kevin, timmy + 45)\n    equation3 = Eq(dorothy, 96)\n    \n    solutions = solve((equation1, equation2, equation3), (dorothy, timmy, kevin))\n    \n    return solutions[kevin]\n\nans = solution()"
    ],
    "00bac1b894d8400c927244d5ab291236": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_days = symbols('total_days')\n    \n    # Equation representing the problem\n    # total_days = 1/2*total_days + 1/4*total_days + 4 days + 2 weeks (14 days)\n    equation = Eq(total_days, (1/2)*total_days + (1/4)*total_days + 4 + 14)\n\n    # Solve the equation\n    days_solution = solve(equation, total_days)\n\n    return days_solution[0]\n\nans = solution()"
    ],
    "3110b53620c0471aa2cb667c3ce65e77": [
        "def solution():\n    # Number of minutes one cat takes to catch one fish\n    minutes_per_fish_per_cat = 10\n\n    # Since the number of cats and the number of fish to catch are equal,\n    # the time taken won't change regardless of the number of cats.\n    # This is because the number of fish each cat needs to catch is 1.\n    ans = minutes_per_fish_per_cat\n\n    return ans\n\nans = solution()"
    ],
    "b9c45a7f41d84579a8250cc2efdbeda0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, pineapple = symbols('watermelon pineapple')\n\n    equation1 = Eq(watermelon, 5 * pineapple)\n    equation2 = Eq(watermelon, pineapple + 5.6)\n\n    solutions = solve((equation1, equation2), (watermelon, pineapple))\n\n    return float(solutions[watermelon])\n\nans = solution()"
    ],
    "b3542d3cc8af443f8b242a3a4d02cd92": [
        "def solution():\n    # Total length to plant wheat is the perimeter of the field minus the 4 corners\n    perimeter = 2 * (144 + 204)\n    total_length = perimeter - 4  # since each corner has one wheat\n\n    # Total wheat plants along the perimeter, minus the 4 corners\n    total_wheat = 116 - 4\n\n    # The distance between every 2 wheat is the total length divided by the total wheat minus 1\n    # because the distance is between the plants\n    distance = total_length / total_wheat\n    \n    return distance\n\nans = solution()"
    ],
    "f2e2f998455a41098dae005947481855": [
        "def solution():\n    result = 81\n    number = (result / 9) * 4 - 3\n    return number\n\nans = solution()"
    ],
    "468e5ab1d23843a688c0d986c25ee3de": [
        "def solution():\n    total_bracelets = 84\n    morning_bracelets = (2 / 7) * total_bracelets\n    remainder_bracelets = total_bracelets - morning_bracelets\n    afternoon_bracelets = (3 / 5) * remainder_bracelets\n    bracelets_made = morning_bracelets + afternoon_bracelets\n    more_bracelets_needed = total_bracelets - bracelets_made\n    \n    return more_bracelets_needed\n\nans = solution()"
    ],
    "82e49ff36eba45e5b80fed7508aed40a": [
        "def solution():\n    total_people = 200\n    ellie_rate = 40\n    combined_time = 4\n\n    # Ellie's work in 4 weeks\n    ellie_work = ellie_rate * combined_time\n\n    # Remaining work to be done by Gloria\n    gloria_work = total_people - ellie_work\n\n    # Combined weekly work rate of Ellie and Gloria\n    combined_weekly_rate = total_people / combined_time\n\n    # Gloria's weekly work rate\n    gloria_rate = combined_weekly_rate - ellie_rate\n\n    # Time for Gloria to finish the work by herself\n    gloria_time = gloria_work / gloria_rate\n\n    return gloria_time\n\nans = solution()"
    ],
    "5756e8ef018e4deca17abc1cfcc3c79a": [
        "def solution():\n    from itertools import permutations\n\n    # We already know B and D\n    B = 2\n    D = 0\n\n    # Generate all permutations for A, C, E \n    digits = '123456789'\n    for perm in permutations(digits, 3):\n        A, C, E = map(int, perm)\n        if E == B or C == D:  # skip if E is the same as B or C is the same as D\n            continue\n        ABCDEF = int(f'{A}{B}{C}{D}{E}{F}')\n        EFABCD = int(f'{E}{F}{A}{B}{C}{D}')\n        # Check the condition 5 * ABCDEF = 6 * EFABCD\n        if 5 * ABCDEF == 6 * EFABCD:\n            return int(f'{A}{B}{C}{E}')  # Return the number FACE\n\nans = solution()"
    ],
    "134e520a63fc4cd4b9d24373d85afc3a": [
        "def solution():\n    return (3/8) * 48\n\nans = solution()"
    ],
    "05453f6e54854903b245e1b9f7315d91": [
        "def solution():\n    total_weight = 15 + 60\n    total_rice = 0.40 * 15 + 60 * (x / 100)\n    percent_rice_mixture = 28 / 100\n\n    x = symbols('x')\n    equation = Eq(total_rice, percent_rice_mixture * total_weight)\n    \n    rice_percent_B = solve(equation, x)[0]\n    \n    return rice_percent_B\n\nans = solution()"
    ],
    "89088a26e0bf4129b3d5aac6042e949e": [
        "def solution():\n    # assuming the four distinct positive whole numbers as a, b, c, d such that a < b < c < d\n    for d in range(120, 0, -1): # start from a large number and decrement to find the largest possible 'd'\n        for a in range(1, d):\n            for b in range(a + 1, d):\n                for c in range(b + 1, d):\n                    if a + (b + c + d) / 3 == 39 and d + (a + b + c) / 3 == 51:\n                        # checking for the conditions given in the problem statement\n                        return d  # returns the largest number if conditions met\n\nans = solution()"
    ],
    "9fbe57cb0ac6418ab2240792282591b7": [
        "def solution():\n    leak_rate_per_minute = 15  # in milliliters\n    minutes_in_2_hours = 2 * 60\n    total_leak_in_milliliters = leak_rate_per_minute * minutes_in_2_hours\n    total_leak_in_liters = total_leak_in_milliliters / 1000  # converting milliliters to liters\n    return total_leak_in_liters\n\nans = solution()"
    ],
    "f2e50e32110b4bbdac14c61d13824286": [
        "def solution():\n    road_length = 150\n    tree_spacing = 10\n    \n    num_trees = (road_length // tree_spacing) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "794649fd064842be800fcd3dd6a2517e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, pen = symbols('book pen')\n    equation1 = Eq(2 * book + 1 * pen, 12)\n    equation2 = Eq(1 * book + 2 * pen, 9)\n\n    solutions = solve((equation1, equation2), (book, pen))\n\n    return solutions[pen]\n\nans = solution()"
    ],
    "e082319eb56d42f888747eb43934b281": [
        "def solution():\n    total_change = 2 * 10 + 5 * 5 + 4 * 0.20\n    money_spent = 100 - total_change\n    return money_spent\n\nans = solution()"
    ],
    "410b895710664b55b1f42904c7fe0a39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(A, B * 4/3)\n    equation2 = Eq(A, C + 20)\n    equation3 = Eq(A + B + C, 200)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[C]\n\nans = solution()"
    ],
    "e7bd4bc8283741eb831b62ff36519ac8": [
        "def solution():\n    # Let x be the distance to the shopping mall from their starting point.\n    # Since Barbara reached the shopping mall, she covered the entire distance x.\n    # Catherine still had 60 meters to go, so she covered a distance of (x - 60) meters.\n    \n    # Barbara's speed is 60 meters per minute.\n    # Catherine's speed is 45 meters per minute.\n    # They both walked for the same amount of time, so we can set up a ratio of their speeds.\n    \n    # Barbara's distance / Barbara's speed = Catherine's distance / Catherine's speed\n    # x / 60 = (x - 60) / 45\n    \n    # Solving the equation:\n    # 45 * x = 60 * (x - 60)\n    # 45x = 60x - 3600\n    # 15x = 3600\n    # x = 3600 / 15\n    x = 3600 / 15\n    \n    return x\n\nans = solution()"
    ],
    "17d03f9197534de4bc9abd09472af81f": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x, y = symbols('x y')\n    equation = Eq(3*x + y + 21, 2*(0.5*y + x))\n    solution_x = solve(equation, x)\n    return solution_x[x]\n\nans = solution()"
    ],
    "3ba5f4eac4774daf9c2b513499cd343e": [
        "def solution():\n    time_per_plate = 3\n    total_time = 18\n    num_plates = total_time // time_per_plate\n    return num_plates\n\nans = solution()"
    ],
    "59eb954ff993443c9285d88a012ec8bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote Nini's age as n and Nini's dad's age as d\n    n, d = symbols('n d')\n\n    # The first equation represents that Nini's dad is twenty-five years older than Nini this year\n    equation1 = Eq(d, n + 25)\n    \n    # The second equation represents that after five years, the age of Nini's dad will be 8 less than two times that of Nini\n    equation2 = Eq(d + 5, 2 * (n + 5) - 8)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (n, d))\n\n    return solutions[n]\n\nans = solution()"
    ],
    "e3bed45262264696ba3ef5c430fcbf22": [
        "def solution():\n    students = list(range(1, 51))  # Students numbered from 1 to 50\n    for i in students:\n        if i % 4 == 0 or i % 6 == 0:\n            students[i - 1] = 0  # Turn backwards represented by 0\n    return students.count(1)  # Count students facing the teacher represented by 1\n\nans = solution()"
    ],
    "58dc414946bf46c0ba652c5866ea789b": [
        "def solution():\n    dividend = 471471471471\n    divisor = 157157157157\n    return dividend // divisor\n\nans = solution()"
    ],
    "ab914c10068e40aabb127e29805bd56b": [
        "def solution():\n    total_pears = 300\n    sold_first_day = total_pears * 2 // 5\n    remaining_pears = total_pears - sold_first_day\n    sold_second_day = remaining_pears * 7 // 9\n    \n    return sold_second_day\n\nans = solution()"
    ],
    "6951136ac6a143cc8a66d6e046b9c312": [
        "def solution():\n    return 2536 // 4\n\nans = solution()"
    ],
    "f266887d9734495ab9b3e624af600dc7": [
        "def solution():\n    result = (3/4) * (30/100) * 120\n    return result\n\nans = solution()"
    ],
    "a3540f1e7dc5422e96cb21be5f76dd9b": [
        "def solution():\n    apples = 29\n    # At least one student gets at least 3 apples\n    # To minimize the number of students, give 3 apples to one student first\n    apples -= 3\n    # Now, every other student can get at least 1 apple\n    # Using the Pigeonhole Principle, the number of students is apples + 1 (for the student who got 3 apples)\n    students = apples + 1\n\n    return students\n\nans = solution()"
    ],
    "7dac345168e24b7f9f57312741709d28": [
        "def solution():\n    boys_count = 3\n    girls_count = 4\n    \n    ways_to_pick_lead_singers = boys_count * girls_count\n    \n    return ways_to_pick_lead_singers\n\nans = solution()"
    ],
    "c49b566d28914d98a6c34de5890ff196": [
        "def solution():\n    from sympy import isprime\n\n    count = 0\n    for num in range(10, 100):\n        if isprime(num):\n            reverse_num = int(str(num)[::-1])\n            if num != reverse_num and isprime(reverse_num):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "1f597349b6ec4f37bf0ad940a0226974": [
        "def solution():\n    ans = 462 + 268\n    return ans\n\nans = solution()"
    ],
    "f3ad4296cd634e83b25be5b77004a4b0": [
        "def solution():\n    ans = 36 - 18 / 2 + 4 * 6 / 3\n    return ans\n\nans = solution()"
    ],
    "8acc0b244fed4d689a5ee6fdff28233e": [
        "def solution():\n    original_value = 140\n    new_value = 87.5\n    percent_change = ((new_value - original_value) / original_value) * 100\n    return round(percent_change, 2)\n\nans = solution()"
    ],
    "efb9468b904144138bdc171c8b89d9b7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g represent the number of green balls and b represent the number of blue balls initially.\n    g, b = symbols('g b')\n\n    # Initial total number of balls is 140\n    equation1 = Eq(g + b, 140)\n\n    # After removing 2/5 of the blue balls and 28 green balls, number of green and blue balls are equal\n    equation2 = Eq((g - 28), (b - (2/5) * b))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (g, b))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "603221d8eb7e48509c5ac61d65305758": [
        "def solution():\n    # Probability that the alcoholic is at one of the three bars at any random time\n    probability_at_one_bar = 1/3\n    \n    # Probability of the alcoholic not being at two bars means he must be at the third bar\n    # As it's given that the alcoholic is not at two of the bars, the probability he is at the third is 100% (from the perspective of the scenario given)\n    probability_at_third_bar_given_not_at_two_bars = 1\n    \n    # However, since the alcoholic drinks 90% of the day, we must consider this factor as well\n    probability_alcoholic_drinking = 0.9\n    \n    # Total probability is the probability of being at a bar multiplied by the probability he's drinking\n    probability_at_third_bar_when_drinking = probability_at_one_bar * probability_alcoholic_drinking * probability_at_third_bar_given_not_at_two_bars\n    \n    return probability_at_third_bar_when_drinking\n\nans = solution()"
    ],
    "2afab9fc169e49b190d537d496fbae66": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eliot_age_future = 16\n    years_in_future = 4\n    eliot_age_now = eliot_age_future - years_in_future\n    \n    cousin_age_now = symbols('cousin_age_now')\n\n    equation = Eq(eliot_age_now, 2 * cousin_age_now)\n    cousin_age_now_solution = solve(equation, cousin_age_now)[0]\n\n    cousin_age_future = cousin_age_now_solution + years_in_future\n\n    return cousin_age_future\n\nans = solution()"
    ],
    "6d6b160ceaa74bed9f0745675ca7130e": [
        "def solution():\n    return 5183 - 594\n\nans = solution()"
    ],
    "9125492975b445d4b6f48807e27c1382": [
        "def solution():\n    num1 = 387\n    num2 = 729\n    average = (num1 + num2) / 2\n    return average\n\nans = solution()"
    ],
    "61e7999f8b924716a703e69dcd306ee4": [
        "def solution():\n    caught_marked_first = 100  # Number of fish caught, marked, and released first time\n    caught_second_time = 100   # Number of fish caught second time\n    marked_second_time = 16    # Number of marked fish caught second time\n\n    # Using the capture-recapture method to estimate total number of fish in pond\n    estimate_fish_count = (caught_marked_first * caught_second_time) / marked_second_time\n\n    return estimate_fish_count\n\nans = solution()"
    ],
    "7ed04e8e16744d3b811bde9f5ab21683": [
        "def solution():\n    # Let d be the total distance between Nancy and Randy\n    # Let n be the distance Nancy walks\n    # Then Randy walks n + 10 meters\n    # According to question, for every 2 meters Nancy walks, Randy walks 3 meters, so their distances should be in the ratio 2:3\n    # We can now express Randy's distance walked in terms of Nancy's distance walked using the given ratio (2:3) and given that Randy walks 10 meters more than Nancy.\n    # n + 10 = (3/2) * n\n    # Solve for n to find the distance Nancy walks\n    n = symbols('n')\n    equation = Eq(n + 10, (3/2) * n)\n    nancy_distance = solve(equation, n)[0]\n\n    # Find the total distance by adding the distance Nancy walks and the extra 10 meters Randy walks\n    total_distance = nancy_distance + nancy_distance * (3/2)\n    return total_distance\n\nans = solution()"
    ],
    "26d6e3f96e9245abb8672de6d4d25383": [
        "def solution():\n    elaine_current_age = 6\n    mandy_current_age = 35\n    age_difference = mandy_current_age - elaine_current_age\n    elaine_future_age = 12\n    mandy_future_age = elaine_future_age + age_difference\n    return mandy_future_age\n\nans = solution()"
    ],
    "07e354462e5749c7b35205d8675ad8be": [
        "def solution():\n    return 324 + 132\n\nans = solution()"
    ],
    "549c6955bced409fbe3608247d39f37d": [
        "def solution():\n    num = (1 + 3/99) + (3 + 3/33) + (9 + 3/11)\n    denom = (1 + 1/99) + (3 + 1/33) + (9 + 1/11)\n    ans = num / denom\n    return ans\n\nans = solution()"
    ],
    "94fa427c30bc41b0bc1c23c2e238e7a4": [
        "def solution():\n    # Given repeating decimal 0.2014141414...\n    # Let the repeating part be 'y' thus y = 0.141414...\n    # Multiply 'y' by 100 to shift the decimal two places to the right.\n    # 100y = 14.141414...\n    # Subtract 'y' from 100y to find the non-repeating value of 'y':\n    # 100y - y = 14.141414... - 0.141414...\n    # 99y = 14\n    # y = 14 / 99\n\n    y = 14 / 99\n\n    # Now, let's find the value of the original repeating decimal:\n    # z = 0.2014y, where y = 0.141414...\n    # Multiply 'z' by 10000 to shift the '2014' part to whole number.\n    # 10000z = 2014.y (where 'y' is the repeating decimal 0.141414...)\n    # we already know the value of 'y' is 14 / 99, so substitute y in the equation.\n    # 10000z = 2014 + y\n    # 10000z = 2014 + 14/99\n    # 10000z = 2014 + 14/99\n    # z = (2014 + 14/99) / 10000\n\n    z = (2014 + y) / 10000\n\n    # The value of z corresponds to the fraction on the left side of the original equation x / 9900\n    # x / 9900 = z\n    # x = z * 9900\n\n    x = z * 9900\n\n    return int(x)\n\nans = solution()"
    ],
    "fa1aabed26fd4a0f8865c23013775faa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ali, bronson, charlie = symbols('ali bronson charlie')\n\n    equation1 = Eq(ali, (bronson + charlie) / 2 - 5)\n    equation2 = Eq(bronson, 2 * ali)\n    \n    solutions = solve((equation1, equation2), (ali, bronson, charlie))\n\n    return solutions[charlie]\n\nans = solution()"
    ],
    "8b3e2473ae0743c19785cba9cb052741": [
        "def solution():\n    sum1 = sum(range(10, 21, 2))\n    sum2 = sum(range(9, 20, 2))\n    ans = sum1 - sum2\n    return ans\n\nans = solution()"
    ],
    "77cc490d98fc4ff0b16ec404452ab1f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    alice, sister = symbols('alice sister')\n\n    # Define equations based on the problem statement\n    equation1 = Eq(alice, 2 * sister)                           # Alice is twice as old as her sister\n    equation2 = Eq(alice + 10 + sister + 10, 53)                # In 10 years, their total age will be 53\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (alice, sister))\n\n    # Return Alice's current age\n    return solutions[alice]\n\nans = solution()"
    ],
    "5eb6f108f7f945d3b8e14b92f427c6c4": [
        "def solution():\n    count = 0\n    for i in range(1, 8):  # The hundreds place cannot be 0 and must be less than 8 since numbers need to be unique and add to 8.\n        for j in range(0, 10):\n            for k in range(0, 10, 2):  # The units place has to be an even number, hence we step by 2.\n                if i != j and i != k and j != k and i + j + k == 8:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "9a8ebe1067614f2ba696f9ca243810e9": [
        "def solution():\n    for num in range(100000, 1000000): # 6-digit numbers start from 100000\n        if num % 10 == 2:  # Check if last digit (units column) is 2\n            new_number = int(str(num // 10).rjust(6, '2'))  # Remove the 2 and place it at left\n            if new_number == num / 3:  # Check if the new number is one-third of the original\n                return num\n\nans = solution()"
    ],
    "0e0926913a4c49b6b42a2bff3086a037": [
        "def solution():\n    total_students = 30\n    pass_first_exam = 25\n    fail_second_exam = 12\n    pass_second_fail_first = 3\n\n    # Using the Inclusion-Exclusion Principle\n    pass_only_first_exam = pass_first_exam - (total_students - fail_second_exam) + pass_second_fail_first\n\n    return pass_only_first_exam\n\nans = solution()"
    ],
    "807a797d374546a7ad31ed32cc60158c": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # congruences are of the form (remainder, modulo)\n    congruences = [(3, 5), (6, 8), (7, 9)]\n    # use Chinese Remainder Theorem to find the solution\n    number, _ = solve_congruence(*congruences)\n    \n    # check if number is within the desired range\n    while number < 500:\n        number += (5*8*9)  # LCM of the modulos\n\n    return number\n\nans = solution()"
    ],
    "5fdcb9eaeeda4228836991b47e7cf8da": [
        "def solution():\n    total_bars = 43\n    people = 4\n\n    remainder = total_bars % people\n\n    return remainder\n\nans = solution()"
    ],
    "c1b3143db8aa464aab4fa542021b858a": [
        "def solution():\n    sum_of_numbers = (a + b + c) * (111) * 2\n    return sum_of_numbers\n\na, b, c = symbols('a b c')\nans = solution()"
    ],
    "09cfeee5f94b44469b0645a7a6453ce2": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(10):\n            ab = a * 10 + b\n            ba = b * 10 + a\n            product = ab * ba\n            if product % 100 == 0:\n                return ab\n\nans = solution()"
    ],
    "93167d80f006455787219151d56379f4": [
        "def solution():\n    pay_per_hour = 78 / 6.5\n    hours_needed = 300 / pay_per_hour\n    return hours_needed\n\nans = solution()"
    ],
    "3ef3e16ae5454ad18e360ceeb9eeef62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    small_sack, large_sack = symbols('small_sack large_sack')\n    \n    equation1 = Eq(large_sack, small_sack + 0.20 * small_sack)\n    equation2 = Eq(small_sack + large_sack, 77)\n\n    solutions = solve((equation1, equation2), (small_sack, large_sack))\n\n    return solutions[large_sack]\n\nans = solution()"
    ],
    "19d5b1dcfa2c4b1bb5d7e097116869d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges, apples = symbols('oranges apples')\n    equation = Eq(oranges - 35, (apples / 2))\n    total_fruits = Eq(oranges + apples, 125)\n\n    solutions = solve((equation, total_fruits), (oranges, apples))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "f165d10b0a934af9ba1ae1c8293984e6": [
        "def solution():\n    ans = round(5/9, 2)\n    return ans\n\nans = solution()"
    ],
    "3569ba2a31094a19827f25ea3598dbd8": [
        "def solution():\n    least_5_digit_palindrome = int('10001')\n    greatest_6_digit_palindrome = int('999999')\n\n    return greatest_6_digit_palindrome - least_5_digit_palindrome\n\nans = solution()"
    ],
    "80120be608194dd2b89d6d3c9721eb31": [
        "def solution():\n    students = 35\n    capacity = 6\n    min_cabins = (students + capacity - 1) // capacity\n\n    return min_cabins\n\nans = solution()"
    ],
    "d77af89b3f1c41dd8496bce0d6d3ec08": [
        "def solution():\n    ans = sum(len(str(i)) for i in range(1, 59))\n    return ans\n\nans = solution()"
    ],
    "019e5a54ec7f459790a6d32439e83dfb": [
        "def solution():\n    # Initialize the number of digits counted from the right, and start with 1-digit numbers\n    remaining_digits = 2011\n    digit_length = 1\n    max_num_for_length = 9\n    \n    # We first need to figure out the length of the number where the 2011th digit from the right falls into\n    while remaining_digits > digit_length * max_num_for_length:\n        remaining_digits -= digit_length * max_num_for_length\n        digit_length += 1\n        max_num_for_length *= 10\n\n    # Now we need to identify the exact number containing the digit \n    start_num_for_length = 10 ** (digit_length - 1)\n    # \"-1\" because if there's exactly digit_length number of digits remaining\n    # it means we're looking at the first number of current digit_length\n    actual_num = start_num_for_length + (remaining_digits - 1) // digit_length\n    \n    # Finally, the position of the digit in the number\n    pos_in_num = remaining_digits % digit_length\n    # If position is 0, we are looking at the last digit of the previous number\n    actual_num -= 1 if pos_in_num == 0 else 0\n    pos_in_num = digit_length if pos_in_num == 0 else pos_in_num\n\n    # Get the digit at the calculated position from the right \n    digit_str = str(actual_num)\n    ans = int(digit_str[-pos_in_num])\n\n    return ans\n\nans = solution()"
    ],
    "e0b9281bf0a54571a6295132e8b1f3b8": [
        "def solution():\n    matthew_pencils = 31\n    samantha_pencils = matthew_pencils - 6\n    return samantha_pencils\n\nans = solution()"
    ],
    "742b4a19edd64989a9bc0c3e3a6c14e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the total number of coins on the table\n    total_coins = symbols('total_coins')\n\n    # Initial equation: 1/4 of total are heads\n    heads_initial = total_coins / 4\n\n    # After flipping 2 more coins, 1/3 of total are heads\n    heads_after_flip = (total_coins / 3)\n\n    # Set up the equation representing the change\n    equation = Eq(heads_initial + 2, heads_after_flip)\n\n    # Solve for the total number of coins\n    solution = solve(equation, total_coins)\n\n    # Assuming we need a positive integer number of coins\n    for sol in solution:\n        if sol.is_integer and sol > 0:\n            return sol\n\nans = solution()"
    ],
    "36e64178982945cca898597516b4d750": [
        "def solution():\n    books_on_right = 6\n    position_from_left = 14\n\n    total_books = position_from_left + books_on_right\n\n    return total_books\n\nans = solution()"
    ],
    "697722b344fb494fa3ef4ecb759d5167": [
        "def solution():\n    sum_of_multiples = 0\n    for number in range(5, 51, 5):\n        sum_of_multiples += number\n    return sum_of_multiples\n\nans = solution()"
    ],
    "bc3d8ec301fc410598e59a2ceb2b13e3": [
        "def solution():\n    distance1 = 30 * 5  # The distance traveled by the first planet in the past 5 minutes\n    distance2 = 40 * 5  # The distance traveled by the second planet in the past 5 minutes\n    total_distance = distance1 + distance2  # The total distance apart 5 minutes ago\n    return total_distance\n\nans = solution()"
    ],
    "d4c00e90a8ef4ae0981bbeedc1858cd9": [
        "def solution():\n    total_vehicles = 140\n    total_tyres = 490\n\n    for cars in range(total_vehicles + 1):\n        motorbikes = total_vehicles - cars\n        if 4 * cars + 2 * motorbikes == total_tyres:\n            return cars\n\nans = solution()"
    ],
    "913c9cae5532421db2aefcd71661c685": [
        "def solution():\n    # There are 5 choices for the first digit (1 to 5, excluding 0)\n    # because we cannot have a leading 0 in a two-digit number.\n    first_digit_options = 5\n\n    # There are 6 choices for the second digit (0 to 5),\n    # as this can include 0.\n    second_digit_options = 6\n\n    # The total number of two-digit numbers is simply\n    # the product of the number of choices for each digit.\n    total_two_digit_numbers = first_digit_options * second_digit_options\n\n    return total_two_digit_numbers\n\nans = solution()"
    ],
    "5c51cffb043942adb46a09a26bc746ab": [
        "def solution():\n    first_term = 26\n    difference = 34 - 26\n    last_term = 626\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "27cc97e40ad844c982dd1a9f1e766432": [
        "def solution():\n    paid_price = 64\n    discount_rate = 0.20\n\n    original_price = paid_price / (1 - discount_rate)\n\n    return original_price\n\nans = solution()"
    ],
    "031e28e1f3ad4f9f868951764773e37c": [
        "def solution():\n    total_liters = 36\n    ratio_sum = 4 + 5\n    apple_juice_ratio = 4\n\n    apple_juice_liters = (apple_juice_ratio / ratio_sum) * total_liters\n\n    return apple_juice_liters\n\nans = solution()"
    ],
    "5e3921774a0148c58a168a7d4d6a9158": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a = symbols('a')\n    x = symbols('x')  # the certain number\n\n    # Create equations based on the remainders given\n    equation1 = Eq(190 % x, a)\n    equation2 = Eq(137 % x, a + 4)\n    equation3 = Eq(101 % x, a + 6)\n\n    # Solve the system of equations for a and x\n    solutions = solve((equation1, equation2, equation3), (a, x))\n\n    # There might be multiple solutions, filter for the one that is positive and makes sense for our context\n    for sol in solutions:\n        if sol[a] >= 0 and sol[x] > sol[a]:\n            a_val = sol[a]\n            x_val = sol[x]\n            break\n\n    # Find the remainder when 299 is divided by the number x\n    remainder = 299 % x_val\n\n    return remainder\n\nans = solution()"
    ],
    "fa4eb19fd6df49bdb4533fec025fa83a": [
        "def solution():\n    return 125 * (76 + 12)\n\nans = solution()"
    ],
    "730105f481354ec491084be98c91d6f1": [
        "def solution():\n    total_distance = 11\n    climb_up = 3\n    slide_down = 1\n    net_distance_per_day = climb_up - slide_down\n    days = 0\n\n    while total_distance > 0:\n        days += 1\n        total_distance -= climb_up\n        if total_distance <= 0:\n            break\n        total_distance += slide_down\n\n    return days\n\nans = solution()"
    ],
    "4958c2ee692b42cdaaf22c2892011be2": [
        "def solution():\n    number = 8.765\n    ans = round(number, 1)\n\n    return ans\n\nans = solution()"
    ],
    "aa07d321ec634d83a0c7f8d255553cff": [
        "def solution():\n    total_avocados = 960\n    per_box_capacity = 8\n\n    num_boxes = total_avocados // per_box_capacity\n\n    return num_boxes\n\nans = solution()"
    ],
    "b81938b8cf7a46a4b628bfa5a8634ad1": [
        "def solution():\n    result = 26\n    subtracted = result - 12\n    original_number = subtracted / 2\n    return original_number\n\nans = solution()"
    ],
    "de030313f1e64b389d5594c99dd4dafe": [
        "def solution():\n    return 0.2 * 5.39\n\nans = solution()"
    ],
    "abaa56505ee547838c84f84921be0ebb": [
        "def solution():\n    number = 1\n    while True:\n        if number % 2 == 1 and number % 13 == 1:\n            return number\n        number += 1\n\nans = solution()"
    ],
    "1cecf15afbce45239bf7e71e6a2da145": [
        "def solution():\n    return (9/5) * (25 / 100) + (1/4) * 2.2 - 0.25\n\nans = solution()"
    ],
    "c5ef0c07edfc4211afdaa999ad856197": [
        "def solution():\n    num_classes = 5\n    students_per_class = 100\n    donation_per_student = 5.78\n\n    total_donation = num_classes * students_per_class * donation_per_student\n\n    return total_donation\n\nans = solution()"
    ],
    "9371af16b67240519deb5e635949e1a7": [
        "def solution():\n    max_value = 0\n    prime_set = set()\n    \n    # Generate prime numbers using Sieve of Eratosthenes\n    n = 200\n    sieve = [True] * (n + 1)\n    \n    for p in range(2, n + 1):\n        if sieve[p]:\n            prime_set.add(p)\n            for i in range(p * p, n + 1, p):\n                sieve[i] = False\n                \n    # Iterate through the prime numbers for x and y\n    for x in prime_set:\n        for y in prime_set:\n            if x != y and x * (2 + y) == 200 + y:\n                if x + y > max_value:\n                    max_value = x + y\n    return max_value\n\nans = solution()"
    ],
    "86cd9b725006412db04f636eca50d89b": [
        "from math import factorial\n\ndef solution():\n    total_digits = 6\n    duplicates_2 = 2\n    duplicates_3 = 2\n    \n    num_ways = factorial(total_digits) // (factorial(duplicates_2) * factorial(duplicates_3))\n    return num_ways\n\nans = solution()"
    ],
    "33d52a12c5824537a7ab10162e240c2c": [
        "def solution():\n    spent = 2\n    return spent * 4\n\nans = solution()"
    ],
    "6ed2905a0c1c4583b578668431fbae3f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for each dwarf's height\n    doc, happy, dopey, sneezy, bashful, grumpy, sleepy = symbols('doc happy dopey sneezy bashful grumpy sleepy')\n\n    # Given equations from the problem\n    equation1 = Eq(doc, happy + 10)\n    equation2 = Eq(happy, dopey + 10)\n    equation3 = Eq(sneezy, dopey)\n    equation4 = Eq(bashful, dopey)\n    equation5 = Eq(grumpy, dopey)\n    equation6 = Eq(sleepy, 80)\n    equation7 = Eq(doc + sleepy, dopey + sneezy)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6, equation7), \n                      (doc, happy, dopey, sneezy, bashful, grumpy, sleepy))\n\n    # Calculate the total height of all dwarfs\n    total_height = sum(solutions.values())\n\n    return total_height\n\nans = solution()"
    ],
    "80c9bf8ad95b4909a6d7ee77ac0d7e51": [
        "def solution():\n    num_teams = 8\n    num_rounds = (num_teams * (num_teams - 1)) // 2\n    return num_rounds\n\nans = solution()"
    ],
    "590a4f620ce648a89e73074cf3c6acf5": [
        "def solution():\n    a = 6\n    b = 7\n    ans = a * 3 + b - 4\n    return ans\n\nans = solution()"
    ],
    "3d554443b1224a4da2b07f8233870170": [
        "def solution():\n    from fractions import Fraction\n    \n    # Convert mixed numbers to improper fractions\n    num1 = 5 + Fraction(1, 6)\n    num2 = 6 + Fraction(1, 5)\n    \n    # Sum the two numbers\n    sum_nums = num1 + num2\n    \n    # Sum the denominators\n    denom_sum = Fraction(1, 6) + Fraction(1, 5)\n    \n    # Divide the sum of numbers by the sum of denominators\n    result = sum_nums / denom_sum\n    \n    return result\n\nans = solution()"
    ],
    "f39a0d61562749f19a4d1e5e510dac81": [
        "def solution():\n    result = (7/9) * 27\n    return result\n\nans = solution()"
    ],
    "c4bf31a44d8d46c9b19634c1115ae2a2": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['3', '5', '9']\n    numbers = sorted(int(''.join(p)) for p in permutations(digits))\n    return numbers[4]\n\nans = solution()"
    ],
    "17bc582ed1bf4564b574312e59268176": [
        "def solution():\n    meters_per_day = 1000 / 5\n    days_for_2600_meters = 2600 / meters_per_day\n    return days_for_2600_meters\n\nans = solution()"
    ],
    "d07b83cca75e406b9cac57296901269a": [
        "def solution():\n    distance = 250\n    time_taken = 5\n    time_for_travel = 3\n\n    speed = distance / time_taken\n    distance_travelled_in_3_hours = speed * time_for_travel\n\n    return distance_travelled_in_3_hours\n\nans = solution()"
    ],
    "d1cf2646f95e48aaab2267eb79ed0eb3": [
        "def solution():\n    total_trees = 60\n    trees_per_side = total_trees // 4\n\n    return trees_per_side\n\nans = solution()"
    ],
    "f7ab8cb826c649ec85b7b2cea10e2333": [
        "def solution():\n    for number in range(10, 60):\n        if number % 8 == 3 and number % 7 == 6:\n            return number\n\nans = solution()"
    ],
    "b5428109db6f4a889887b92377a44169": [
        "def solution():\n    num_terms = 90 - 12 + 1  # (last term - first term) + 1\n    avg = (12 + 90) / 2  # (first term + last term) / 2\n    sum_of_series = avg * num_terms  # sum = average * number of terms\n    return 'even' if sum_of_series % 2 == 0 else 'odd'\n\nans = solution()"
    ],
    "5b18261bd85f4736bb866cd18fa2f7c7": [
        "def solution():\n    # Let the numbers on the hats be a, b, and c\n    # From the problem statement,\n    # b + c = 11, a + c = 17, and a + b = 22\n\n    # Create equations\n    # a = 17 - c\n    # b = 22 - a = 22 - (17 - c) = 5 + c\n    # 5 + c + c = 11\n    # Solve for c\n    c = (11 - 5) // 2\n    # Now we can solve for a and b\n    a = 17 - c\n    b = 22 - a\n\n    # The largest number\n    ans = max(a, b, c)\n    return ans\n\nans = solution()"
    ],
    "0d15dac81380463388b2f48a1e5a4ac4": [
        "def solution():\n    trees = 30\n    distance_apart = 5  # in meters\n\n    # distance for 30 trees with 29 intervals of 5m each\n    road_length = (trees - 1) * distance_apart\n    \n    return road_length\n\nans = solution()"
    ],
    "29f0c1773b854d5b946e865190eba514": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    triangle = symbols('triangle')\n\n    equation = Eq(triangle * 6 + 12, 3 * 6 + 36)\n\n    solution = solve(equation, triangle)\n\n    return solution[0]\n\nans = solution()"
    ],
    "645960391d9a40f287074aea24d065e6": [
        "def solution():\n    product = 1\n    for i in range(2, 10):\n        product *= (1 + 1/i)\n    return product\n\nans = solution()"
    ],
    "5ba5f881a3d44e1588df5aa8c2d9b7be": [
        "from sympy import isprime\n\ndef solution():\n    count = 0\n    for prime in range(1, 21):\n        if isprime(prime) and isprime(prime + 6) and isprime(prime - 6):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "e7597a502cf74421b35bb550a54a362d": [
        "def solution():\n    ans = 54 * 7\n    return ans\n\nans = solution()"
    ],
    "ec3693af136e4822b07b647b190d64ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for x\n    x = symbols('x')\n\n    # First 30 minutes distance\n    distance_1st = x * (1/2) # since 30 minutes are 1/2 an hour\n    # Second 30 minutes distance\n    distance_2nd = (x - 20) * (1/2) # since 30 minutes are 1/2 an hour\n    # Third 30 minutes distance\n    distance_3rd = (x + 10) * (1/2) # since 30 minutes are 1/2 an hour\n\n    # Total distance equation\n    equation = Eq(distance_1st + distance_2nd + distance_3rd, 70)\n\n    # Solving for x\n    solution_dict = solve(equation, x)\n\n    # As solve returns a list, we take the first (and only) solution\n    return solution_dict[0]\n\nans = solution()"
    ],
    "3bd18c4e21064eeda7d67edd78bf418c": [
        "def solution():\n    total_digits = 0\n    for i in range(1, 346):\n        total_digits += len(str(i))\n    return total_digits\n\nans = solution()"
    ],
    "76403d5e9dca4ff6b2fc3602bef45a7e": [
        "def solution():\n    total_people = 340 + 20\n    max_per_bus = 25\n\n    buses_needed = -(-total_people // max_per_bus)  # ceil division\n\n    return buses_needed\n\nans = solution()"
    ],
    "7992bad8c26d42e1b736d8fab12944f1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the total prize money\n    x = symbols('x')\n    \n    # Setting up the equation based on the given information\n    equation = Eq((1/5 + 1/15) * x, 360)\n    \n    # Solving for x, the total prize money\n    total_prize_money = solve(equation, x)[0]\n    \n    return total_prize_money\n\nans = solution()"
    ],
    "46bce6274909462595b7cd5d528fd678": [
        "def solution():\n    from math import factorial\n\n    # There are 2 possible positions for the captain (left or right side of the coach)\n    captain_positions = 2\n\n    # The coach is already in the middle, so there are 5 other players to arrange\n    # This is a permutation of the 5 players, which is 5 factorial (5!)\n    other_players_permutations = factorial(5)\n\n    # Apply the multiplication principle\n    total_arrangements = captain_positions * other_players_permutations\n\n    return total_arrangements\n\nans = solution()"
    ],
    "89aaad0e5929492ebd91a881ccbdcd20": [
        "def solution():\n    boys = girls = total_students = 0\n    layer = 0\n\n    while True:\n        boys_in_layer = (layer * 4 + 1)**2 - (layer * 4 - 3)**2 if layer > 0 else 1\n        girls_in_layer = ((layer + 1) * 4 + 1)**2 - (layer * 4 + 1)**2\n        \n        if boys - girls > 20:\n            total_students = boys + girls - girls_in_layer  # Subtracting last layer of girls\n            break\n\n        boys += boys_in_layer\n        girls += girls_in_layer\n        layer += 2  # Increment by 2 because boys and girls are alternate layers\n        \n    return total_students\n\nans = solution()"
    ],
    "45bfd7efccc8407995a20fc0424601ff": [
        "def solution():\n    from sympy import symbols, solve\n\n    # x will represent the number of penguins\n    # y will represent the total number of fish\n    x = symbols('x')\n    y = symbols('y')\n\n    # If the staff gives 3 fish to each penguin, there will be 25 fish left\n    # Total fish = 3 fish/penguin * number of penguins + 25 leftover fish\n    equation1 = y - 3*x - 25\n    \n    # If the staff gives 6 fish to each penguin, there will be one penguin who gets only 1 fish\n    # Total fish = 6 fish/penguin * (number of penguins - 1) + 1 fish\n    equation2 = y - 6*(x - 1) - 1\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "21ac3377e3e04f7095b5e98b24de2cf5": [
        "def solution():\n    cube_root = (-0.512) ** (1/3)\n    square = (-1.2) ** 2\n    ans = cube_root + square\n    return ans\n\nans = solution()"
    ],
    "185585248b784d759d3d8f88fb2bb399": [
        "def solution():\n    count = 1\n    sum_of_terms = 0\n    current_term = 1\n    \n    while count <= 30:\n        for i in range(current_term):\n            if count > 30:\n                break\n            sum_of_terms += current_term\n            count += 1\n        current_term += 1\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "963c4317b46e4ab89cf2305881120383": [
        "def solution():\n    return (25 / 100) * 20 + (1 / 5) * 30 + (2 / 3) * 18\n\nans = solution()"
    ],
    "c7fe09cca9884a74bd0f46ebfe209d6e": [
        "def solution():\n    for a in range(10):\n        if (1 + 7 + 3 + 1) - (a + 7) % 11 == 0:\n            return a\n\nans = solution()"
    ],
    "1cdbbd42038c4d25a4e3858e94b44f02": [
        "def solution():\n    total_votes = 140\n    votes_alice = 31\n    votes_betty = 41\n    votes_cindy = 47\n\n    max_other_votes = max(votes_alice, votes_betty)\n    votes_needed = max_other_votes + 1 - votes_cindy\n\n    return votes_needed\n\nans = solution()"
    ],
    "14374f60574642deb9cb3cb4947ba4d5": [
        "def solution():\n    # Calculate expression 1: (7 / -3.333...) / (-0.027)**(1/3)\n    expr1_numerator = 7 / (-10/3)\n    expr1_denominator = (-27/1000)**(1/3)\n    expr1 = expr1_numerator / expr1_denominator\n    \n    # Calculate expression 2: (2**3 / 4**2) / (0.125 * (1.8 - (0.2 * 7)))\n    expr2_numerator = (2**3) / (4**2)\n    expr2_denominator = 0.125 * (1.8 - (0.2 * 7))\n    expr2 = expr2_numerator / expr2_denominator\n    \n    # Calculate expression 3: (0.1 / 0.142857...) + (2 * 0.3)\n    expr3_part1_numerator = 0.1\n    expr3_part1_denominator = 1/7  # since 0.142857... is the decimal representation of 1/7\n    expr3_part1 = expr3_part1_numerator / expr3_part1_denominator\n    expr3_part2 = 2 * 0.3\n    expr3 = expr3_part1 + expr3_part2\n    \n    # Final answer by combining all expressions\n    ans = expr1 + expr2 - expr3\n    \n    return ans\n\nans = solution()"
    ],
    "0f27bf9162ed4fbba2f119e08ed1cf48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, brian = symbols('chelsia brian')\n\n    equation1 = Eq(3/4 * chelsia, 5/6 * brian)\n    equation2 = Eq(chelsia - brian, 24)\n\n    solutions = solve((equation1, equation2), (chelsia, brian))\n\n    total_money = solutions[chelsia] + solutions[brian]\n\n    return total_money\n\nans = solution()"
    ],
    "477f4016e7a14d6cb1f6561d4b2f7cbc": [
        "def solution():\n    # Gina's age on the reference date (10th May 2005)\n    gina_age_2005 = 50\n\n    # James's age on the reference date (10th May 1997)\n    james_age_1997 = 20\n\n    # The difference in years between the two reference dates (2005 and 1997)\n    year_difference = 2005 - 1997\n\n    # Gina's age when James was born (James's 1997 age subtracted from Gina's 2005 age and adjusted for the year difference)\n    gina_age_when_james_born = gina_age_2005 - (james_age_1997 + year_difference)\n\n    return gina_age_when_james_born\n\nans = solution()"
    ],
    "9e011e38eb9e41da9b82d8e1b79479a9": [
        "def solution():\n    # Assigning given values to variables\n    base_salary = 2500\n    total_salary = 3300\n    lower_commission_rate = 0.02\n    upper_commission_rate = 0.05\n    lower_commission_sales_limit = 25000\n\n    # Calculating total commission earned\n    total_commission = total_salary - base_salary\n\n    # Check if all commissions are from the lower rate\n    if total_commission <= lower_commission_sales_limit * lower_commission_rate:\n        sales = total_commission / lower_commission_rate\n    else:\n        # Calculate commissions for the first 25000 at 2%\n        lower_commission = lower_commission_sales_limit * lower_commission_rate\n        # Subtract the commission earned at lower rate from total commission \n        # to find the commission earned at higher rate (5%)\n        upper_commission = total_commission - lower_commission\n        # Calculate sales at 5%\n        upper_sales = upper_commission / upper_commission_rate\n        # Total sales is the sum of lower commission sales and upper commission sales\n        sales = lower_commission_sales_limit + upper_sales\n\n    return sales\n\nans = solution()"
    ],
    "02c0f5596e944b52b450f57444a52432": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of marbles Ryan had at first\n    # Let y be the number of marbles Audrey had at first\n    x, y = symbols('x y')\n\n    # Original ratio of marbles: 2x = Ryan, 7x = Audrey\n    # New ratio after changes: (x + 20)/(y - 80) = 1/3\n    # Setup the equations based on the problem\n    original_ratio = Eq(2*x, y)\n    new_ratio = Eq((x + 20)/(y - 80), 1/3)\n\n    # Solve the system of equations\n    solutions = solve((original_ratio, new_ratio), (x, y))\n\n    # Audrey's marbles at first is represented by y\n    return solutions[y]\n\nans = solution()"
    ],
    "e491c5ac6e9343c7ba3274532283f9c9": [
        "def solution():\n    total_height_of_six_players = 6 * 150\n    average_height_of_four_players = 150 - 2\n    total_height_of_four_players = 4 * average_height_of_four_players\n    total_height_of_remaining_two_players = total_height_of_six_players - total_height_of_four_players\n    average_height_of_remaining_two_players = total_height_of_remaining_two_players / 2\n    \n    return average_height_of_remaining_two_players\n\nans = solution()"
    ],
    "bfde156ecaa4455aabd96e9c177c7723": [
        "def solution():\n    # Probability of passing on the first attempt\n    p1 = 0.4\n    # Probability of failing the first attempt and passing on the second attempt\n    p2 = (1 - p1) * 0.5\n    # Probability of failing the first two attempts and passing on the third attempt\n    p3 = (1 - p1) * (1 - 0.5) * 0.3\n\n    # Total probability of passing before the fourth attempt\n    total_p = p1 + p2 + p3\n\n    return total_p\n\nans = solution()"
    ],
    "e928057276ba4f80816203d0efad0161": [
        "def solution():\n    total_digits = 1014\n    digits_used = 0\n    num_pages = 0\n\n    while total_digits > 0:\n        num_pages += 1\n        if num_pages < 10:\n            digits = 1\n        elif num_pages < 100:\n            digits = 2\n        elif num_pages < 1000:\n            digits = 3\n        elif num_pages < 10000:\n            digits = 4\n        else:\n            raise ValueError(\"Reached an invalid number of pages\")\n\n        digits_used += digits\n        total_digits -= digits\n\n    return num_pages\n\nans = solution()"
    ],
    "4e41a656965248ecb27c18b15b949af4": [
        "def solution():\n    fruits = 3\n    vegetables = 4\n    ans = fruits * vegetables\n    return ans\n\nans = solution()"
    ],
    "601f7cda15454bc985fa1ee54ba442cd": [
        "def solution():\n    routes_from_A_to_B = 2\n    routes_from_B_to_C = 3\n    total_routes = routes_from_A_to_B * routes_from_B_to_C\n    return total_routes\n\nans = solution()"
    ],
    "25f54cb721264bd5a88945dcae9a35da": [
        "def solution():\n    first_term = 50\n    common_difference = -1\n    num_terms = 30\n\n    # Use arithmetic sum formula: n/2 * (first_term + last_term)\n    last_term = first_term + (num_terms - 1) * common_difference\n    sum_of_terms = num_terms / 2 * (first_term + last_term)\n\n    return int(sum_of_terms)\n\nans = solution()"
    ],
    "9dd71278e1224d6aae7ee3729d3d4491": [
        "def solution():\n    total_pieces = 450\n    pieces_per_hour = 50\n\n    hours_needed = total_pieces / pieces_per_hour\n\n    return hours_needed\n\nans = solution()"
    ],
    "9f1e95f7b0c743fc8509bf8504dcf8e6": [
        "def solution():\n    factorial = 1\n    zero_count = 0\n    for i in range(1, 16):\n        factorial *= i\n    while factorial % 10 == 0:\n        zero_count += 1\n        factorial //= 10\n    return zero_count\n\nans = solution()"
    ],
    "7dfcb604b94540d68268987c685cf44e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    age = symbols('age')\n\n    # Grandpa's statement translated into an equation: (age / 4) + 32 = age - 22\n    equation = Eq((age / 4) + 32, age - 22)\n\n    # Solve the equation\n    solution = solve(equation, age)\n\n    # Return Grandpa's age\n    return solution[0]\n\nans = solution()"
    ],
    "1c335261c4c74c9da70e62d9e80c84f7": [
        "def solution():\n    total_difference = 44\n    total_students = 0\n\n    for girls_layer in range(1, 100, 2):  # Assuming there won't be more than 100 layers\n        boys_layer = girls_layer + 1\n        boys = boys_layer ** 2\n        girls = girls_layer ** 2\n        difference = boys - girls\n        if difference == total_difference:\n            total_students = boys + girls\n            break\n\n    return total_students\n\nans = solution()"
    ],
    "949b4d4e3965458786c3c12e4175a6f5": [
        "def solution():\n    total_distance = 18\n    climb_speed_day = 7\n    # snail climbs only 3 meters on the 6th day, so first five days it climbed 7 meters each\n    distance_after_five_days = 5 * climb_speed_day \n    # total distance climbed after 5 days and the 6th day\n    total_climbed = distance_after_five_days + 3\n    # the snail must reach the top on the 6th day after climbing 3 meters\n    remaining_distance = total_distance - total_climbed\n    # since the snail reaches the top, it means it didn't slide down at night after the 6th day\n\n    # the distance snail slides down each night is the height climbed each day - progress made each day\n    # progress made each day is the remaining distance after 5 days, divided by 5\n    slide_down_night = climb_speed_day - (remaining_distance / 5)\n\n    return slide_down_night\n\nans = solution()"
    ],
    "170205b36dfc4146a66fb3af25081782": [
        "def solution():\n    max_apples_for_second_student = 0\n    total_apples = 48\n    for a in range(1, total_apples - 3):\n        for b in range(a + 1, total_apples - 2):\n            for c in range(b + 1, total_apples - 1):\n                d = total_apples - (a + b + c)\n                if d > c:\n                    max_apples_for_second_student = b\n    \n    return max_apples_for_second_student\n\nans = solution()"
    ],
    "0d196763e09c414685c93b6925e1fabd": [
        "def solution():\n    # Time taken by each person to cross the river\n    times = [1, 2, 5, 10]\n    \n    # Initial total time\n    total_time = 0\n\n    # Sort the times in ascending order for optimization\n    times.sort()\n\n    while len(times) > 3:\n        # Case 1: The two slowest people cross together\n        case1 = times[0] + times[1] + times[-1] + times[1]\n        # Case 2: The two fastest people cross with the slowest person\n        case2 = times[0] + times[0] + times[-1] + times[-2]\n        total_time += min(case1, case2)\n        # Remove the two people who have crossed\n        times = times[:-2]\n\n    # Cross the remaining people\n    if len(times) == 3:\n        total_time += sum(times) - times[0]\n    elif len(times) == 2:\n        total_time += times[1]\n    else:\n        total_time += times[0]\n\n    return total_time\n\nans = solution()"
    ],
    "70a8c903a8c54590bc01cc6b20324389": [
        "def solution():\n    # Let l be the original length of the rectangle, and w be the original width\n    # Perimeter of original rectangle is 2l + 2w\n    # Perimeter of new rectangle is 2(l + 12) + 2w = 38 cm\n    \n    from sympy import symbols, Eq, solve\n    \n    l, w = symbols('l w') # symbols for length and width\n    eq = Eq(2 * (l + 12) + 2 * w, 38) # equation for the perimeter of the new rectangle\n    w_expr = solve(eq, w)[0] # solve for width in terms of length\n    \n    # Substitute the expression for w back into the original perimeter formula\n    original_perimeter = Eq(2 * l + 2 * w_expr)\n    original_perimeter = original_perimeter.rhs.subs(l, l) # simplifying the perimeter expression\n    ans = original_perimeter - 24  # reduce 24 cm from the new perimeter to find the original perimeter\n    \n    return ans\n\nans = solution()"
    ],
    "e0acffb17f4e422ab27995621048da00": [
        "def solution():\n    return 641 + 283\n\nans = solution()"
    ],
    "a395940e0e844a3e82a13464bbacb552": [
        "def solution(): \n    ans = sum((2 * i - 1) ** 2 for i in range(1, 45))  # 45 because 89 is the 44th odd number to be squared\n    return ans\n\nans = solution()"
    ],
    "f059162501fb4a40bea57cfdd90f953a": [
        "def solution():\n    number = 2**19 - 1\n    remainder = number % 5\n    return remainder\n\nans = solution()"
    ],
    "0a442caa186a4d35a9cda613970fe659": [
        "def solution():\n    for num in range(30, 41):\n        if num % 3 == 1 and num % 4 == 1:\n            return num\n\nans = solution()"
    ],
    "cc80ec556420466ca6feeb07d774bc7f": [
        "from math import factorial\n\ndef solution():\n    num_students = 4\n    return factorial(num_students)\n\nans = solution()"
    ],
    "20d9cd46576c4f6b873a928db5bdaa21": [
        "def solution():\n    # There are three options for the first day: Chocolate (C), Peaches (P), and Strawberries (S).\n    # Jenny eats chocolate on the first day. We have two options for the second day: P or S.\n    # For each choice on the second day, we again have two options for the third day.\n    # If we create a tree diagram, branching out the options from each day, we can count the number of ways.\n    \n    # Day 1: C\n    # Day 2: P or S (2 options)\n    # Day 3: After P on Day 2, Jenny can have S or C; after S on Day 2, Jenny can have P or C.\n    # Therefore, for each option on the second day, we have 2 options on the third day.\n    \n    # Total ways: 2 options for Day 2 * 2 options for Day 3\n    ways = 2 * 2\n    return ways\n\nans = solution()"
    ],
    "91f9ed36f52f4c4d90e9a09c340e6eda": [
        "def solution():\n    target_sum = 8\n    ways = 0\n    \n    for i in range(1, target_sum):\n        if target_sum - i >= i:\n            ways += 1\n    \n    return ways\n\nans = solution()"
    ],
    "e247134ebc8e4290ab2c3cd47fbdb2bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    salary = symbols('salary')\n    remaining_after_tv = salary - (5/9)*salary\n    remaining_after_table = remaining_after_tv - (3/4)*remaining_after_tv\n\n    # Create the equation based on the remaining money after buying the table\n    equation = Eq(remaining_after_table, 160)\n\n    # Solve the equation to find the salary\n    total_salary = solve(equation, salary)[0]\n\n    # Calculate the cost of the television\n    tv_cost = (5/9) * total_salary\n\n    return tv_cost\n\nans = solution()"
    ],
    "31bc73a765324ee2aad5b0ab3902429e": [
        "import math\n\ndef solution():\n    # Since rotating the circular table will not change the order,\n    # we fix one person and arrange the rest.\n    # There are 6 seats remaining and 6 people to sit.\n    num_ways = math.factorial(6)\n    return num_ways\n\nans = solution()"
    ],
    "9aeb348fb18f40a0a779246f193ec03e": [
        "def solution():\n    numerator = 50\n    denominator = 5/3\n\n    ans = numerator / denominator\n\n    return ans\n\nans = solution()"
    ],
    "d7af08f16a30475cbed750f87127cc91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for John and Emma's current ages\n    john, emma = symbols('john emma')\n\n    # Equation representing sum of their ages in 3 years\n    equation1 = Eq(john + 3 + emma + 3, 27)\n\n    # Equation representing the difference in their ages\n    equation2 = Eq(emma, john - emma)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (john, emma))\n\n    return solutions[emma]\n\nans = solution()"
    ],
    "870fd125d6e84d51833e19966e6235aa": [
        "def solution():\n    average_daily_earnings = 70\n    number_of_working_days = 6\n    total_earnings = average_daily_earnings * number_of_working_days\n    return total_earnings\n\nans = solution()"
    ],
    "cdebf51b4d2f4676b84de41b5f4dfe1d": [
        "from math import comb\n\ndef solution():\n    points = 15\n    points_to_choose = 3\n\n    ans = comb(points, points_to_choose)\n    \n    return ans\n\nans = solution()"
    ],
    "ce3ae2eb22604f669d81413a11524dfe": [
        "def solution():\n    sheets_per_quire = 24\n    quires_per_ream = 20\n    reams = 2\n\n    total_sheets = sheets_per_quire * quires_per_ream * reams\n\n    return total_sheets\n\nans = solution()"
    ],
    "d052b96519684cd689b26d905e6932f3": [
        "def solution():\n    # Tom's speed is 48 km/h\n    tom_speed = 48\n    # Jack's speed is 50 km/h\n    jack_speed = 50\n    # Jack starts 3 hours after Tom\n    jack_delay = 3\n    # After another 5 hours, they are 15 km away from each other\n    time_after_meeting = 5\n    # Distance between them after 5 hours\n    remaining_distance = 15\n    \n    # Calculate the distance covered by Tom during the 3 hours before Jack started\n    tom_distance_before_jack = tom_speed * jack_delay\n    # The relative speed when both Tom and Jack are driving towards each other\n    relative_speed = tom_speed + jack_speed\n    # Distance covered during the 5 hours before they are 15 km apart\n    distance_covered_together = relative_speed * time_after_meeting\n    \n    # Total distance between A and B\n    total_distance = tom_distance_before_jack + distance_covered_together + remaining_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "adc18060457c42cd841d26c05a300d86": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_people = symbols('total_people')\n    # 1/4 chose tea\n    tea = total_people / 4\n    # 7 people chose coffee (no equation needed, direct information)\n    coffee = 7\n    # 30% chose cola\n    cola = total_people * 0.30\n    # Rest chose water, and the water section is 36 degrees in the pie chart\n    # Since a pie chart has 360 degrees, water makes up 36/360 of the choices\n    water = total_people * (36 / 360)\n\n    # We add up all the parts to form the whole, which is the total number of people\n    equation = Eq(tea + coffee + cola + water, total_people)\n\n    # Solve the equation\n    total_people_solution = solve(equation, total_people)\n\n    return total_people_solution[0]\n\nans = solution()"
    ],
    "209df8fae20d4538a1d8ebbf630188c1": [
        "def solution():\n    children = symbols('children')\n    # Each child has 2 legs, each dog has 4 legs\n    # 3 times as many dogs as children, thus 3 * children * 4 legs\n    # Total legs including children and dogs is 56\n    equation = Eq(2 * children + 12 * children, 56)\n    solutions = solve(equation, children)\n    return solutions[0]\n\nans = solution()"
    ],
    "7df5d75f0cda456abe35ca8b128ad0bc": [
        "def solution():\n    x = (26 + 4) / 5\n    return x\n\nans = solution()"
    ],
    "85433448087948ff8792d3be336da4ba": [
        "def solution():\n    # If 2/5 of the class are absent, then 3/5 are present\n    # Let's denote the total number of pupils in the class as 'total'\n    # We know that (3/5) * total = 18\n    # To find the total number of pupils, we can rearrange the equation:\n    # total = 18 / (3/5)\n    # total = 18 * (5/3)\n\n    total = 18 * (5/3)\n    return int(total)\n\nans = solution()"
    ],
    "48f752c3fb124d0eaef83bcc708662cc": [
        "def solution():\n    return (10 ** 5) // (5 ** 5)\n\nans = solution()"
    ],
    "11d9dfcd97f84a2b98dac9636f2ac079": [
        "def solution():\n    Z = 4 + 5\n    return Z\n\nans = solution()"
    ],
    "6bfc77576d4c4d8e990e203ed5df4a98": [
        "def solution():\n    return 5.2 + 6.7 + 4.8\n\nans = solution()"
    ],
    "1e0626005a234d7b9e16d436c68f0a46": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    saturday, sunday = symbols('saturday sunday')\n    equation1 = Eq(saturday, 4 * sunday - 5)\n    equation2 = Eq(saturday, sunday + 43)\n\n    solutions = solve((equation1, equation2), (saturday, sunday))\n\n    return solutions[saturday]\n\nans = solution()"
    ],
    "9838ab9595bb4b7698360b2187706163": [
        "def solution():\n    length = 50\n    width = 30\n    gap = 2\n\n    # Calculate the number of trees on each side. Subtract corner tree only once because it's shared by two sides.\n    num_trees_length = length // gap\n    num_trees_width = width // gap\n\n    # Calculate the total number of trees - subtracting 4 because each corner is counted twice\n    total_trees = 2 * (num_trees_length + num_trees_width) - 4\n\n    return total_trees\n\nans = solution()"
    ],
    "71a881110b784d499125ce0c2aeceff4": [
        "def solution():\n    meters = 1.36\n    cm_per_meter = 100\n    ans = meters * cm_per_meter\n    return ans\n\nans = solution()"
    ],
    "f22a2d40173242e9be3791a584a6bb8a": [
        "def solution():\n    initial_amount = 500\n    income_tax_percentage = 3\n    tax_amount = (income_tax_percentage / 100) * initial_amount\n    final_amount = initial_amount - tax_amount\n\n    return final_amount\n\nans = solution()"
    ],
    "dc011b9713364f7faace482d69733c6e": [
        "def solution():\n    total_charge = 110\n    adult_price = 20\n    child_price = 15\n\n    # Since there are at least two adults, we start counting from 2\n    for num_adults in range(2, total_charge // adult_price + 1):\n        num_children = (total_charge - num_adults * adult_price) // child_price\n        \n        if num_adults * adult_price + num_children * child_price == total_charge:\n            return num_children\n\nans = solution()"
    ],
    "0dd96e7150034b49b6e5114888b623ed": [
        "def solution():\n    total_sweets = 15\n    people_count = 3\n\n    sweets_per_person = total_sweets // people_count\n\n    return sweets_per_person\n\nans = solution()"
    ],
    "285cd6c94bbe4f0097e4b2365352fffc": [
        "def solution():\n    for i in range(1, 10):\n        for j in range(1, 1000):\n            original_number = j * 10 + 9\n            new_number = int(str(9) + str(j))\n            if new_number == 4 * original_number:\n                return original_number\n\nans = solution()"
    ],
    "7a18842efc724f239e5f1cad37485c40": [
        "def solution():\n    total_squash = 750\n    ratio_squash_to_water = 1 / 9\n    total_liquid = total_squash * (1 + ratio_squash_to_water)\n    one_litre_bottle_ml = 1000\n    number_of_bottles = total_liquid // one_litre_bottle_ml\n    return int(number_of_bottles)\n\nans = solution()"
    ],
    "79f81b8195b2409d9329430d172825a5": [
        "def solution():\n    left_side = 0.6 * 100\n    right_side = 180\n    ans = right_side / left_side\n    return ans\n\nans = solution()"
    ],
    "70e0934ac8904f528788ed9903ea3d65": [
        "def solution():\n    total_cost = 132\n    # Let the total money Li Yan had be x.\n    # She spent (1/3)x on a book.\n    # She then had (2/3)x left.\n    # She spent (1/2) of the remainder on a bag, i.e., (1/2)*(2/3)x = (1/3)x on a bag.\n    # So, the total money spent on the book and the bag is (1/3)x + (1/3)x = (2/3)x.\n    # Therefore, (2/3)x = 132.\n    # To find the initial amount of money (x), we solve the equation: x = 132 / (2/3).\n    x = total_cost / (2/3)\n    return x\n\nans = solution()"
    ],
    "5387ecceeb914413b67de510e2841de5": [
        "def solution():\n    base = 221\n    exponent = 2020\n    divisor = 7\n\n    # Calculate base^exponent % divisor using modular exponentiation\n    remainder = pow(base, exponent, divisor)\n\n    return remainder\n\nans = solution()"
    ],
    "526ef305508f433093616886e3aa2760": [
        "def solution():\n    return (6**2015 + 2015 * 6 + 2015**6) % 100\n\nans = solution()"
    ],
    "629aa303c06d45f7aa5cf8fa6f9fed98": [
        "def solution():\n    from itertools import permutations\n\n    # B=2 and D=0 are given\n    B, D = 2, 0\n\n    # Since each letter represents a distinct digit and B and D are known,\n    # we only need to permute the remaining digits A, C, E, and F\n    # without considering 0 and 2.\n    for A, C, E, F in permutations(set(range(10)) - {0, 2}, 4):\n        \n        # Form the numbers from the digits\n        num1 = int(f\"{A}{B}{C}{D}{E}{F}\")\n        num2 = int(f\"{E}{F}{A}{B}{C}{D}\")\n        \n        # Check the given condition\n        if 5 * num1 == 6 * num2:\n            # Return the 4-digit number FACE\n            return int(f\"{F}{A}{C}{E}\")\n\nans = solution()"
    ],
    "dfcff5e4c31f43209c5c33c350232425": [
        "def solution():\n    return 736 + 4588\n\nans = solution()"
    ],
    "6e22fcfa859a4c8fbb3d505818fcf090": [
        "def solution():\n    for cookies in range(1, 90):\n        if cookies % 6 == 4 and (-cookies) % 7 == 5:\n            return cookies\n\nans = solution()"
    ],
    "a977a5a877be459285ad29a00ee13491": [
        "def solution():\n    # Given factors of the number\n    given_factors = [1, 2, 4, 7, 8]\n    # The number must be the least common multiple (LCM) of the given factors\n    # Since all given factors are unique, the LCM is the product of all given factors\n    # However, given that there are 8 factors in total and we only have 5,\n    # the number must be a perfect square of the largest given factor (8 in this case),\n    # since the factors would be mirrored around the square root.\n    num = 8 ** 2\n\n    return num\n\nans = solution()"
    ],
    "997806d0555f4e0b9f0c37e93f8a847d": [
        "def solution():\n    ans = 8234 - 909\n    return ans\n\nans = solution()"
    ],
    "cdd44981698d4cf1892f1b87d1ff7e7e": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n    ans = tens + tenths + hundredths\n    return ans\n\nans = solution()"
    ],
    "06a399e8df5e48ef97ce40b3d0ef5589": [
        "def solution():\n    original_price = 10\n    discount_percentage = 10\n    discount_amount = (discount_percentage / 100) * original_price\n    sale_price = original_price - discount_amount\n    return sale_price\n\nans = solution()"
    ],
    "f7fe017b34bc4119bfc266aeef3024e6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let c be the initial number of cows and g be the initial number of goats.\n    c, g = symbols('c g')\n    \n    # 65% of the animals were cows initially, so the number of cows is 0.65(c+g).\n    eq1 = Eq(c, 0.65 * (c + g))\n    \n    # The rest of the animals are goats, so 100% - 65% = 35% of the animals are goats.\n    eq2 = Eq(g, 0.35 * (c + g))\n    \n    # When 240 more animals are added, the number of cows increases by 20% to 85% and the number of goats doubles.\n    # Therefore, the new number of cows is 0.85(c+g+240) and the new number of goats is 2*g.\n    # The total number of animals after the addition is now c+g+240.\n    eq3 = Eq(0.85 * (c + g + 240), c + 240)\n    eq4 = Eq(2 * g, (c + g + 240) - (c + 240))\n    \n    # Solve the system of equations for c and g.\n    solutions = solve((eq1, eq2, eq3, eq4), (c, g))\n    \n    return solutions[g]\n\nans = solution()"
    ],
    "2b33ed6a37234a7f8cfa9077a2c039ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote x as the number of cookies in the box\n    x = symbols('x')\n    \n    # According to the problem, James sold 1680 cookies in the first month\n    cookies_sold_first_month = 1680\n    \n    # James sold 7/20 more cookies from another box in the second month\n    cookies_sold_second_month = cookies_sold_first_month + (7/20) * x\n    \n    # The rest of the cookies kept by James decreased by 3/20\n    cookies_kept_decrease = (3/20) * x\n    \n    # Set up the equation relating the cookies kept in the first and second months\n    # Cookies kept in the first month - cookies kept in the second month = cookies_kept_decrease\n    equation = Eq(x - cookies_sold_first_month - (x - cookies_sold_second_month), cookies_kept_decrease)\n    \n    # Solve the equation for x\n    solution = solve(equation, x)\n    \n    # Return the number of cookies in the box\n    return solution[0]\n\nans = solution()"
    ],
    "b76888b795364a3a97fa604d5a2de050": [
        "def solution():\n    # Jolene is 6th from front, so there are 5 people ahead of Jolene.\n    # Amy is 8th from back, so there are 7 people behind Amy.\n    # Since Amy is directly behind Jolene, the people in front of Jolene and behind Amy combined gives the total number minus 2.\n    total_people = 5 + 7 + 2  # Plus 2 for Jolene and Amy themselves\n    return total_people\n\nans = solution()"
    ],
    "0b49d7a40bee40d08e1b699772470e6f": [
        "def solution():\n    total_distance = 40\n    jump_up = 5\n    slide_down = 3\n    jumps_per_period = 2\n    effective_jump = (jumps_per_period * jump_up) - slide_down\n    \n    periods_to_reach_near_top = (total_distance - jump_up) // effective_jump\n    distance_covered = periods_to_reach_near_top * effective_jump\n    remaining_distance = total_distance - distance_covered\n    jumps = periods_to_reach_near_top * jumps_per_period\n    \n    # Adding jumps required after the last full period\n    while remaining_distance > 0:\n        jumps += 1\n        remaining_distance -= jump_up\n        if remaining_distance <= 0:\n            break\n        remaining_distance += slide_down\n\n    return jumps\n\nans = solution()"
    ],
    "48809ae2c3da43959ae3c238acb60f7f": [
        "def solution():\n    return 78.2 - 31.45 + 5.24 - 2.3\n\nans = solution()"
    ],
    "d8a87667da5c4baebedd2e3f7026d5e2": [
        "def solution():\n    num = 1\n    while True:\n        if num % 5 == 1 and num % 6 == 2 and num % 11 == 9:\n            break\n        num += 1\n    return num\n\nans = solution()"
    ],
    "5a602b75179642109bb3448633b148be": [
        "def solution():\n    side_length = 432\n    distance_between_sunflowers = 4\n    \n    # Number of sunflowers on each side, excluding the corner sunflowers\n    sunflowers_per_side = (side_length - distance_between_sunflowers) // distance_between_sunflowers\n    \n    # Total number of sunflowers on the edges, excluding the corner ones\n    # (we multiply by 5 because it's a pentagon)\n    edge_sunflowers = sunflowers_per_side * 5\n    \n    # Now add the corner sunflowers, which there are 5 of (one at each corner)\n    total_sunflowers = edge_sunflowers + 5\n\n    return total_sunflowers\n\nans = solution()"
    ],
    "d9935bb2a60f4b2a850a8a82e921285b": [
        "def solution():\n    return 253 * 160\n\nans = solution()"
    ],
    "22fbfe3347ba45c18a5ef712714e7ba8": [
        "def solution():\n    cost_per_stamp = 46\n    total_budget_pence = 3 * 100  # £3 to pence\n    num_stamps = total_budget_pence // cost_per_stamp\n    return num_stamps\n\nans = solution()"
    ],
    "c710249ff4704f1da8138f0e161fa751": [
        "def solution():\n    people = 39\n    capacity = 7\n    trip_time = 2\n\n    trips = (people - 1) // (capacity - 1)  # One has to return with the boat\n    total_time = trips * 2 * trip_time  # Multiply by 2 because of returning\n\n    return total_time\n\nans = solution()"
    ],
    "225309bd862241c69715705eee0b6ecb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let t be the time Ryan would have taken if he drove at 45 miles/hour\n    t = symbols('t')\n    \n    # The distance to London remains the same, so\n    # 45 miles/hour * t hours = 30 miles/hour * (t + 2 hours)\n    equation = Eq(45 * t, 30 * (t + 2))\n    \n    # Solving for t\n    time_at_usual_speed = solve(equation, t)\n\n    return time_at_usual_speed[0]\n\nans = solution()"
    ],
    "0c9feee3629744129e6cf814a2834df3": [
        "def solution():\n    return 58 * 36\n\nans = solution()"
    ],
    "68fd1201ef784aef8db355b79934af59": [
        "def solution():\n    from math import factorial\n    ans = factorial(100) // factorial(98)\n    return ans\n\nans = solution()"
    ],
    "abaffb07b2a34ab0ae3decd35f783b15": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"976{digit}3\")\n        if number % 3 == 0:\n            return digit\n\nans = solution()"
    ],
    "d5ed58dcfd4f432cbd326fe91855c743": [
        "def solution():\n    # The sum starts at 3 and goes up to 10 then back down to 3\n    # We can see this as two arithmetic sequences, one ascending and one descending\n    # We exclude the top number (10) from one of the sequences to avoid double counting\n\n    # First sequence: 3 to 10 (ascending)\n    first_term_asc = 3\n    last_term_asc = 10\n    num_terms_asc = last_term_asc - first_term_asc + 1\n    sum_asc = (first_term_asc + last_term_asc) * num_terms_asc // 2\n\n    # Second sequence: 9 to 3 (descending)\n    first_term_desc = 9\n    last_term_desc = 3\n    num_terms_desc = first_term_desc - last_term_desc + 1\n    sum_desc = (first_term_desc + last_term_desc) * num_terms_desc // 2\n\n    # Total sum\n    total_sum = sum_asc + sum_desc\n\n    return total_sum\n\nans = solution()"
    ],
    "8080bf206efd47819bdd2a2adb6b5fd5": [
        "def solution():\n    # Define the function to count partitions of an integer n\n    def count_partitions(n, max_value):\n        if n == 0:\n            return 1\n        elif n < 0 or max_value == 0:\n            return 0\n        else:\n            with_max = count_partitions(n - max_value, max_value)\n            without_max = count_partitions(n, max_value - 1)\n            return with_max + without_max\n\n    # Deduct 1 to exclude the partition of the number 5 itself\n    ans = count_partitions(5, 5) - 1\n    return ans\n\nans = solution()"
    ],
    "17a4a261e09e46b188ed0705441570df": [
        "def solution():\n    a = 3\n    b = 10\n    for _ in range(1995):\n        a, b = b, a + b\n    ans = b % 3\n    return ans\n\nans = solution()"
    ],
    "ae54342caaed4120ac02a509fa3bcd4b": [
        "def solution():\n    numerator = (4.219 ** 2) / (4 + 2/3 + 38/59)\n    denominator = 2.501 ** 3\n    result = numerator / denominator\n    ans = round(result, 3)\n    return ans\n\nans = solution()"
    ],
    "f96fd22abee24d948addde2c9760bc8c": [
        "def solution():\n    # Let the number of students be n and the number of sweets be s.\n    # Based on the data given:\n    # If he gives each student 6 sweets, he is short of 26 sweets:\n    # s = 6*n - 26\n    \n    # If he gives each student 5 sweets, he is short of 5 sweets:\n    # s = 5*n - 5\n    \n    # Equating the two expressions for s:\n    # 6*n - 26 = 5*n - 5\n    # Solving for n:\n    n = 26 - 5\n    \n    # Now we find the number of sweets (s) using either equation.\n    # Using s = 5*n - 5:\n    s = 5*n - 5\n    \n    return s\n\nans = solution()"
    ],
    "3334f8ae569c45baaf836319780cb315": [
        "def solution():\n    # We know the difference between numbers in any two neighboring trees will always be 1\n    # Let's say the smallest number of fruits on a tree is x.\n    # Then the sequence of the number of fruits on the trees will be:\n    # x, x+1, x+2, ..., x+7\n\n    # Sum of the first n natural numbers is n*(n+1)/2\n    # Sum of an arithmetic progression of n terms starting with a and common difference d is n/2 * (2a + (n-1)d)\n    # In our case, n = 8, a = x and d = 1\n    # The sum of the number of fruits on the trees will be sum = 8/2 * (2x + (8-1)*1) = 4 * (2x + 7) = 8x + 28\n\n    # We are given the total sum to be 225. So we set up the equation 8x + 28 = 225\n    # Solve for x\n    x = (225 - 28) / 8\n\n    # Since x has to be a whole number for it to represent the number of fruits\n    # we will check if x is an integer\n    if x.is_integer():\n        # If x is an integer, calculate the number of fruits for each tree and provide summation\n        fruits_seq = list(range(int(x), int(x) + 8))\n        return True, \"Summation: \" + \" + \".join(map(str, fruits_seq)) + \" = \" + str(sum(fruits_seq))\n    else:\n        return False, \"It is not possible for the sum of the fruits to be 225, the initial number of fruits on a tree should be whole number but it is not.\"\n\nans = solution()"
    ],
    "e69cb84fa1d949ac908e9ed3436bc342": [
        "def solution():\n    amin_cookies = 329\n    jessica_cookies = amin_cookies + 97\n    mary_cookies = jessica_cookies - 58\n    return mary_cookies\n\nans = solution()"
    ],
    "22e39fcf09374deb821fcf3cbc39e4ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    white_shirts, blue_shirts = symbols('white_shirts blue_shirts')\n    \n    equation1 = Eq(white_shirts, 6 * blue_shirts)\n    equation2 = Eq(white_shirts + blue_shirts, 63)\n\n    solutions = solve((equation1, equation2), (white_shirts, blue_shirts))\n\n    return solutions[white_shirts]\n\nans = solution()"
    ],
    "f9cc7112db0e48c1af2b41cc821ce516": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    leo, son = symbols('leo son')\n    equation1 = Eq(leo - son, son - 4)\n    equation2 = Eq(son + (leo - son), 70)\n\n    solutions = solve((equation1, equation2), (leo, son))\n\n    return solutions[leo]\n\nans = solution()"
    ],
    "9676e5c5b2c94dcb884bf421cb85baac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blouse, dress = symbols('blouse dress')\n\n    equation1 = Eq(blouse + dress, 41)\n    equation2 = Eq(4 * blouse + 3 * dress, 140)\n\n    solutions = solve((equation1, equation2), (blouse, dress))\n\n    return solutions[blouse]\n\nans = solution()"
    ],
    "3d6aad1e230e440c976aa9835888e9af": [
        "from math import factorial\n\ndef solution():\n    # Total singing performances\n    singing_total = 4\n    \n    # Total dancing performances\n    dancing_total = 3\n    \n    # We will treat 3 dancing performances with gaps between them as fixed positions:\n    # D _ D _ D and we need to place 4 singing performances in these gaps\n    # We have 4 gaps where we can place our singing performances\n    # We can have 0 to 4 singing performances in the first gap, 0 to 3 in the second, because we need to place at least one between each pair of dancing performances\n    # and so on until we place the last one. This splits the singing performances into 4 groups (not necessarily non-empty).\n    # The number of ways to divide 4 singing performances into 4 groups is given by the formula for combinations with repetition:\n    \n    combinations_with_repetition = factorial(singing_total + 4 - 1) // (factorial(4 - 1) * factorial(singing_total))\n    \n    # Each arrangement of gaps uniquely determines a sequence of performances, so the total number of ways\n    # Tom can arrange the performances is equal to the number of ways he can arrange the gaps\n    \n    return combinations_with_repetition\n\nans = solution()"
    ],
    "c89438cf2e854b8b8d9e6b61f27fb988": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of years later\n    x = symbols('x')\n\n    heidi_age_now = 8\n    dad_age_now = 50\n\n    # In x years, Heidi's age will be heidi_age_now + x\n    # In x years, Dad's age will be dad_age_now + x\n    # We want to find when dad_age_now + x is 4 times heidi_age_now + x\n    equation = Eq(dad_age_now + x, 4 * (heidi_age_now + x))\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e1a30b1c30584a4ea62ce04ddf2a119b": [
        "def solution():\n    words_in_6_minutes = 48\n    time_ratio = 9 / 6\n    words_in_9_minutes = words_in_6_minutes * time_ratio\n    \n    return int(words_in_9_minutes)\n\nans = solution()"
    ],
    "2ec36757265f4822937a114644d2af76": [
        "def solution():\n    return 554 + 479\n\nans = solution()"
    ],
    "85f65609913d484fa252445d1bb3a6eb": [
        "def solution():\n    # Initialize the count of factor 5\n    count_fives = 0\n\n    # Loop through the numbers 1 to 60\n    for i in range(1, 61):\n        # Copy of the current number\n        number = i\n        # Count the number of 5s in the prime factorization of the current number\n        while number % 5 == 0:\n            count_fives += 1\n            number /= 5\n    \n    return count_fives\n\nans = solution()"
    ],
    "ae68a40584044249b59fcd754b0a9ab9": [
        "def solution():\n    # Initial average of three numbers\n    initial_average = 120\n    # Total of the first three numbers\n    total_of_three = initial_average * 3\n    \n    # New average with the fourth number\n    new_average = 150\n    # Total of the four numbers\n    total_of_four = new_average * 4\n\n    # Finding the fourth number\n    fourth_number = total_of_four - total_of_three\n\n    return fourth_number\n\nans = solution()"
    ],
    "062ee4a4b00f4be6ab03b9ae62d86a14": [
        "def solution():\n    return (11 * 14 + 26) / 15\n\nans = solution()"
    ],
    "250bdd97084e4457a18b42026735d9a3": [
        "def solution():\n    r = 1\n    while True:\n        if ((216*r)**0.5).is_integer():\n            return r\n        r += 1\n\nans = solution()"
    ],
    "d8532843d2c7486ea637674a0198cac2": [
        "def solution():\n    y = 4 * 10.5\n    return y\n\nans = solution()"
    ],
    "27766b651a1f4d2aae49cf67f35c42d8": [
        "def solution():\n    ans = (3/13) * 52\n    return ans\n\nans = solution()"
    ],
    "f4c9a4282e1345c9bbca6c475b472737": [
        "def solution():\n    daily_climb = 8\n    nightly_slip = 3\n    net_climb = daily_climb - nightly_slip\n    days_to_reach_out = 9\n\n    # Snail reaches out before the end of the 9th day, so for the first 8 days, it's the net climb\n    total_climb_after_8_days = net_climb * (days_to_reach_out - 1)\n\n    # On the 9th day, it climbs straight out without slipping back\n    total_climb_9th_day = daily_climb\n\n    # Well depth is equal to the total climb after 8 days plus the climb on the 9th day\n    well_depth = total_climb_after_8_days + total_climb_9th_day\n\n    return well_depth\n\nans = solution()"
    ],
    "971a39bdec6540cb9d485a6ec1047a5a": [
        "def solution():\n    original_price = 18.60\n    discount_percentage = 15\n    discount_amount = original_price * (discount_percentage / 100)\n    discounted_price = original_price - discount_amount\n    return discounted_price\n\nans = solution()"
    ],
    "f44b5a2d15354af582ad35749d438ad3": [
        "def solution():\n    ans = 20 + 519\n    return ans\n\nans = solution()"
    ],
    "3f9379f05667462b83ddc4ad0c015e2a": [
        "def solution():\n    quotient = 15\n    remainder = 6\n    divisor = remainder + 1  # Smallest possible divisor larger than the remainder.\n\n    dividend = quotient * divisor + remainder  # Formula: Dividend = Quotient * Divisor + Remainder\n\n    return dividend\n\nans = solution()"
    ],
    "75754b6444eb4ac999eea02d4c15c1ae": [
        "def solution():\n    return 285 // 3\n\nans = solution()"
    ],
    "3299707a36e74108be6c90e585878b40": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bag_price, can_price = symbols('bag_price can_price')\n\n    equation1 = Eq(3 * bag_price + 5 * can_price, 4.90)\n    equation2 = Eq(bag_price + 3 * can_price, 2.70)\n\n    solutions = solve((equation1, equation2), (bag_price, can_price))\n\n    return solutions[bag_price]\n\nans = solution()"
    ],
    "09e133cd62e94b3a83040c4a18ba31d0": [
        "def solution():\n    from math import factorial\n\n    total_ways = factorial(6)         # Total ways to arrange 6 people\n    ways_with_teddy_first = factorial(5)  # Ways with Teddy on the furthest left\n\n    # Subtracting the ways where Teddy is on the furthest left from the total\n    ans = total_ways - ways_with_teddy_first\n    return ans\n\nans = solution()"
    ],
    "a408d24a473b41c1b69fdd5572d7b292": [
        "def solution():\n    return 16.4 / 20\n\nans = solution()"
    ],
    "3121bf5cbc854fd786bb1b4d2885b8ee": [
        "def solution():\n    first_term = 50\n    difference = -4  # Because each term is 4 less than the previous\n\n    # Finding the term which will be just before becoming negative\n    n = 1  # starting from the first term\n    while first_term + (n - 1) * difference > 0:\n        n += 1\n\n    return n - 1  # '-1' because we need the term before the first negative term\n\nans = solution()"
    ],
    "0b8f50cdd3c44951b15c9241a332716f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(david, 2 * bentley)\n    equation3 = Eq(david + bentley + triston, 408)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[triston]\n\nans = solution()"
    ],
    "86c640d251b04743a791ed72e6ef1406": [
        "def solution():\n    total = 963\n    fraction = 4 / 9\n\n    ans = total * fraction\n    return ans\n\nans = solution()"
    ],
    "12bb2874238a47da87ffaed7ea879f56": [
        "def solution():\n    count = 0\n    for i in range(10, 100):\n        if (i % 10 + i // 10) % 7 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0e485f9ad3f7447285e70845caf1d116": [
        "def solution():\n    total_sum = 280\n    sequence_length = 7\n    average = total_sum // sequence_length\n    largest_number = average + (sequence_length // 2)\n    return largest_number\n\nans = solution()"
    ],
    "4ebd96f87e564c70a9f67b3e4a10d85d": [
        "def solution():\n    total = 0\n    sign = 1\n    for i in range(1000, 0, -10):\n        total += sign * (i ** 2)\n        sign *= -1\n    return total\n\nans = solution()"
    ],
    "e288e678bbb249bcaab6d53963001d88": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    eq1 = Eq(x + y, 49)\n    eq2 = Eq(x - y, 9)\n\n    solutions = solve((eq1, eq2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "d2cd4a56ec964afaadc7c52c40a6299e": [
        "def solution():\n    max_sum = 0\n    for A in range(100, 1000):\n        for B in range(A+1, 1000):\n            if A % 75 == 0 and B % 75 == 0:\n                A_digits = set(str(A))\n                B_digits = set(str(B))\n                common_digits = A_digits & B_digits\n                if len(common_digits) >= 2:\n                    max_sum = max(max_sum, A + B)\n    return max_sum\n\nans = solution()"
    ],
    "b654f11047ce401a8e2731b60cbe351b": [
        "def solution():\n    ans = sum(range(1, 10))\n    return ans\n\nans = solution()"
    ],
    "ae782a917c0e49dd8aa4c9143b7f6498": [
        "def solution():\n    sum = 0\n    for i in range(2, 21, 2):\n        if i % 4 == 0:\n            sum += i\n        else:\n            sum -= i\n    return sum\n\nans = solution()"
    ],
    "48223bc38999457a8ca5cb8944280073": [
        "def solution():\n    # The given series is (2^3) + (4^3) + (6^3) + ... + (18^3)\n    # This can be rewritten as 2^3 * (1^3 + 2^3 + 3^3 + ... + 9^3)\n    # Notice that (1^3 + 2^3 + ... + n^3) is the sum of cubes of first n natural numbers\n    # Which can be calculated by the formula: (1 + 2 + ... + n)^2 = [n(n + 1) / 2]^2\n    # So we need to calculate the sum of cubes for n = 9\n    \n    n = 9\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    \n    # We must multiply the sum of cubes by 2^3 to match the pattern in the series\n    ans = sum_of_cubes * (2 ** 3)\n    \n    return ans\n\nans = solution()"
    ],
    "5bad72a578f940cf8c6627f29fcbdfde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    angel, yiyang, kayla = symbols('angel yiyang kayla')\n    \n    equation1 = Eq(angel + yiyang, 92.20)\n    equation2 = Eq(angel + kayla, 28.20)\n    equation3 = Eq(yiyang, 5 * kayla)\n    \n    solutions = solve((equation1, equation2, equation3), (angel, yiyang, kayla))\n    \n    return solutions[angel]\n\nans = solution()"
    ],
    "cb198c5105554691b5c2769bc9702902": [
        "def solution():\n    total_teachers = 100\n    french_teachers = 75\n    japanese_teachers = 45\n\n    # Minimum number of teachers who know both languages\n    both_languages = (french_teachers + japanese_teachers) - total_teachers\n\n    # Number of teachers who only know French\n    only_french = french_teachers - both_languages\n\n    return only_french\n\nans = solution()"
    ],
    "e7473cbabe36456fb728cd45b22d0cc7": [
        "def solution():\n    throws = [5, 5, 3, 6, 2, 6, 1, 4]\n    position = 0\n    skip_next = False\n\n    for throw in throws:\n        if skip_next:\n            # Go back as many spaces as the throw value\n            position -= throw\n            skip_next = False\n        elif throw == 6:\n            # Skip next throw\n            skip_next = True\n        else:\n            # Move forward as many spaces as the throw value\n            position += throw\n\n    return position\n\nans = solution()"
    ],
    "73662c89c90340368f0f31dbbb793bcb": [
        "from math import factorial\n\ndef solution():\n    # Calculate the positions between magazines and outer sides for storybooks\n    # We have 5 magazines (M) and need to place storybooks (S) such that 1 magazine should be between every 2 storybooks:\n    # M S _ M S _ M S _ M S _ M -> We have 6 places to put our 5 storybooks, which is a combination problem.\n    \n    # Number of places to arrange storybooks\n    places_for_storybooks = 6\n    # Number of storybooks\n    storybooks = 5\n    \n    # Combination: Number of ways to choose 5 places from 6 for storybooks\n    ways_to_place_storybooks = factorial(places_for_storybooks) / (factorial(storybooks) * factorial(places_for_storybooks - storybooks))\n    \n    # After placing storybooks, the order of the magazines and storybooks within their own types doesn't matter anymore.\n    # So we need to calculate the permutations for magazines and storybooks separately.\n    \n    # Permutations for 5 magazines\n    permutations_of_magazines = factorial(5)\n    # Since storybooks are indistinguishable, we only count their placement once.\n    \n    # Multiplying the number of ways to place storybooks with\n    # the permutations of magazines gives us the final answer.\n    ans = ways_to_place_storybooks * permutations_of_magazines\n    \n    return int(ans)\n\nans = solution()"
    ],
    "e5cbd5d784b64b1e90f8c8affb745d94": [
        "def solution():\n    kate = 13\n    james = 28\n\n    amount_transferred = (james - kate) / 2\n\n    return amount_transferred\n\nans = solution()"
    ],
    "26fc18a2aa384355aa0db444268680d3": [
        "def solution():\n    for gums in range(1, 1000):  # Search for a reasonable upper bound number of gums\n        remaining = gums - 2  # Subtract the 2 gums eaten secretly\n        shared = remaining // 3  # Find the whole number shared with friends\n        if shared * 3 == remaining:  # Check if one third was shared\n            remaining_after_shared = remaining - shared  # Subtract the share from friends\n            if remaining_after_shared % 4 == 0:  # Check if the rest can be divided equally in 4 parts\n                return gums  # Return the number of gums in the packet\n\nans = solution()"
    ],
    "d67cc9413a3540dda3185a84e88494ff": [
        "def solution():\n    ans = 17.1 / 10\n    return ans\n\nans = solution()"
    ],
    "54a4368e09b64fa4ae17d9fafb1cc1f0": [
        "def solution():\n    for A in range(10):\n        for B in range(10):\n            number = int(f\"42{A}28{B}\")\n            if number % 99 == 0:\n                return int(f\"{A}{B}\")\n\nans = solution()"
    ],
    "dc0379c31de248fd8d41c231a4b7bbe8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    alex, brayden = symbols('alex brayden')\n    \n    total_money = alex + brayden\n    after_alex_gives = alex - 65\n    \n    equation1 = Eq(total_money, 756)\n    equation2 = Eq(after_alex_gives, 3 * (brayden + 65))\n    \n    solutions = solve((equation1, equation2), (alex, brayden))\n    \n    return solutions[brayden]\n\nans = solution()"
    ],
    "d2d70b19b95d4c2980b65eaa5b33a64f": [
        "def solution():\n    # Total sum of the 10 numbers with average 10\n    total_sum = 10 * 10\n    \n    # Total sum of the 9 remaining numbers with average 9\n    remaining_sum = 9 * 9\n    \n    # The number removed is the difference between the total sum and the remaining sum\n    number_removed = total_sum - remaining_sum\n    \n    return number_removed\n\nans = solution()"
    ],
    "0910afd7c9174c95a8df8508d6e7179e": [
        "def solution():\n    speed_kmh = 3.6\n    speed_mps = speed_kmh * 1000 / 3600\n    time_seconds = 300\n    \n    distance_meters = speed_mps * time_seconds\n    \n    return distance_meters\n\nans = solution()"
    ],
    "7ed06d70e33c42a59176b296814f9641": [
        "def solution():\n    # Let the original sum of money be x\n    # Each of the four siblings would get x/4\n    # If the three brothers shared the money, each would get x/3\n    # According to the condition given, they would receive £20 more if they shared without their sister\n    # So, we have the equation:\n    # x/3 = x/4 + 20\n    \n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')  # The original sum of money\n    equation = Eq(x/3, x/4 + 20)\n    original_sum = solve(equation, x)[0]\n    \n    return original_sum\n\nans = solution()"
    ],
    "c4239409e9834407bcd7d853669b16fc": [
        "def solution():\n    ans = 25 * 4 * 13\n    return ans\n\nans = solution()"
    ],
    "fd1df5442cc54af194c050069058433f": [
        "def solution():\n    # Generate odd numbers from 1 to 21\n    sequence = range(1, 22, 2)  # step is 2 to generate only odd numbers\n    # Calculate the sum of the cubes of the odd numbers\n    sum_of_cubes = sum(num**3 for num in sequence)\n    return sum_of_cubes\n\nans = solution()"
    ],
    "f396c06eee044d4c857925759f17b15d": [
        "def solution():\n    # Let x be the number of science books\n    # According to the problem, 1/3 of the art books (360) is equal to 4/5 of the science books\n    # Therefore, (1/3) * 360 = (4/5) * x\n    # Solve for x\n    x = (1/3) * 360 * (5/4)\n    return int(x)  # Returning the integer value since number of books cannot be a decimal\n\nans = solution()"
    ],
    "63fc0ee320d54f81933be0988ed9fb3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for red, green, and blue beads left after giving some away\n    red, green, blue = symbols('red green blue')\n\n    # Define equations based on the problem description\n    equation1 = Eq(red + green + blue, 350)  # Total beads left\n    equation2 = Eq(red, 2 * green)  # 2 times as many red beans as green\n    equation3 = Eq(blue, red - 50)  # 50 fewer blue beads than red beads\n    equation4 = Eq(blue + 112, red)  # blue beads initially the same as red, before giving away 112\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (red, green, blue))\n\n    # Calculate the initial number of blue beads before giving any away\n    initial_blue = solutions[blue] + 112\n\n    return initial_blue\n\nans = solution()"
    ],
    "5fa816e5b446405587309db43ab19e8d": [
        "def solution():\n    # If we multiply each average by the number of numbers (4), we get the sum of the four numbers\n    sums = [36*4, 38*4, 39*4, 45*4, 49*4]\n\n    # Since the sums represent the total of four numbers each, and no number is repeated,\n    # the fifth number must be added to one of these sums to get the other sums.\n    # Therefore, to find the largest number, we can find the difference between the largest\n    # and smallest sums. The largest number must be added to the smallest total to get the largest total.\n\n    largest_sum = max(sums)\n    smallest_sum = min(sums)\n    largest_number = largest_sum - smallest_sum\n\n    return largest_number\n\nans = solution()"
    ],
    "7b33b3e40e114514bc857beeadd0ef2e": [
        "def solution():\n    return 32 * 20 * 300\n\nans = solution()"
    ],
    "41f505bb491242358551d509d2bc0f53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    katelyn, jared = symbols('katelyn jared')\n    equation1 = Eq(jared, 5 * katelyn / 2)\n    equation2 = Eq(jared - katelyn, 60)\n\n    solutions = solve((equation1, equation2), (katelyn, jared))\n    \n    total_stickers = solutions[katelyn] + solutions[jared]\n    \n    return total_stickers\n\nans = solution()"
    ],
    "8e13d12e420d4c5ebcc4af6c803994d9": [
        "def solution():\n    initial_investment = 10000\n    interest_first_three_years = 1.15763\n    interest_last_two_years = 1.10 ** 2\n\n    final_amount = round(initial_investment * interest_first_three_years * interest_last_two_years, 1)\n    \n    return final_amount\n\nans = solution()"
    ],
    "1aa1093f65fa4076aac242c4103891b2": [
        "def solution():\n    numbers = [870, 165, 448, 425, 3562]\n    rounded_numbers = [round(num, -2) for num in numbers]\n    total = sum(rounded_numbers)\n    return total\n\nans = solution()"
    ],
    "7f47c8080f134d369478c048481bf15f": [
        "def solution():\n    from math import gcd\n\n    # The greatest possible number of textbooks each stack contains\n    # is the greatest common divisor (GCD) of the quantities of each type of textbook.\n    gcd_result = gcd(gcd(42, 63), 28)\n\n    return gcd_result\n\nans = solution()"
    ],
    "cf6a17fe82d4429d901a3cb109ff35af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    distance = symbols('distance')\n    \n    # Equation for the time it takes Qiqi to reach the school\n    time_qiqi = distance / 60\n    # Equation for the time it takes Weiling to reach the school\n    # Weiling starts 2 minutes later and arrives 4 minutes earlier\n    time_weiling = distance / 72 + 2 - 4\n\n    # Set the times equal to each other\n    equation = Eq(time_qiqi, time_weiling)\n\n    # Solve for the distance\n    distance_solution = solve(equation, distance)\n\n    return distance_solution[0]\n\nans = solution()"
    ],
    "68813ca3c24c42149ea862902169e0c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let s be the amount of the job Star can type in one hour\n    # Let n be the amount of the job Nini can type in one hour\n    s, n = symbols('s n')\n\n    # From the first condition, we have the following equation\n    # 5 * s + 20 * n = 1 (the whole job)\n    equation1 = Eq(5 * s + 20 * n, 1)\n\n    # From the second condition, we have the following equation\n    # 20 * s + 8 * n = 1 (the whole job)\n    equation2 = Eq(20 * s + 8 * n, 1)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (s, n))\n\n    # We are interested in how long it will take Nini (n) to finish the job by herself\n    # This means we need to find 1 / n since n represents the part of the job done by Nini in one hour\n    time_for_nini_to_finish = 1 / solutions[n]\n\n    return time_for_nini_to_finish\n\nans = solution()"
    ],
    "0589562cb3d8409e9ec3a0bb065f706f": [
        "def solution():\n    # We need to divide 16 sausages among 24 people\n    # Each person should get an equal amount, which means each person gets 16/24 sausages\n    # This fraction can be simplified to 2/3 sausages per person\n    # Since each person is getting a fraction of a sausage, all sausages must be cut in such a way that we can have pieces corresponding to the number of people.\n\n    # To minimize the number of cuts, we need to maximize the number of pieces each cut creates.\n    # To do this, we start by cutting all the sausages in half, yielding 2 pieces per sausage with one cut.\n    # Then we would have 32 pieces, but we need to divide them into 3 pieces each to get 2/3 per person (as there are 24 people)\n\n    # To further divide into 3 pieces each, we cut all 16 halves (32 pieces) simultaneously with another cut\n    # This will create an additional piece for each half, yielding 3 pieces per original sausage.\n\n    # Hence, the total number of cuts required would be 2\n    return 2\n\nans = solution()"
    ],
    "81af17d8de7a46a788695ca8365b15ae": [
        "def solution():\n    kg_to_lbs = 2.2\n    kg = 5\n    lbs = kg * kg_to_lbs\n    return lbs\n\nans = solution()"
    ],
    "b7ec49fc670841a1b3ed283d59481312": [
        "def solution():\n    jane_height = 130\n    height_difference = 45\n    ben_height = jane_height - height_difference\n    return ben_height\n\nans = solution()"
    ],
    "3cb997a578814bb191020afbf8ceb5f8": [
        "def solution():\n    # Let's define the given expressway length and days for 4 companies\n    length_by_4_companies = 900  # in meters\n    days_by_4_companies = 5      # in days\n\n    # Since we are given one expressway section of length 900m can be built by\n    # 4 companies in 5 days, we find the work rate of those 4 companies combined\n    work_rate_4_companies = length_by_4_companies / days_by_4_companies\n\n    # The work rate for 1 company is 1/4 (since there are 4 companies sharing the work equally)\n    work_rate_1_company = work_rate_4_companies / 4\n\n    # Now we need to find out how many days will 1 company take to build 2700m\n    length_by_1_company = 2700\n    days_by_1_company = length_by_1_company / work_rate_1_company\n\n    return days_by_1_company\n\nans = solution()"
    ],
    "d2ea6172a82640c28eb896db6bd6ed62": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # St Petersburg is GMT+3, Manchester is GMT+0\n    # If plane arrives at 12 noon St Petersburg time, it is effectively 9 AM in Manchester time\n    st_petersburg_time = datetime.strptime('12:00', '%H:%M')\n    \n    # Flight duration is not given, but assuming it is a direct knowledge route, \n    # Isobel would have travelled for an arbitrary flight duration\n    # Let's assume the arbitrary knowledge route takes us back 3 hours for example\n    flight_duration = timedelta(hours=3)\n\n    # Calculate the time the plane left Manchester\n    manchester_departure_time = st_petersburg_time - flight_duration\n    \n    # Format the time into AM/PM format\n    ans = manchester_departure_time.strftime('%I:%M %p')\n    \n    return ans\n\nans = solution()"
    ],
    "d252da6964f34cafb15841fcb98f9545": [
        "def solution():\n    ben_position_from_front = 6\n    frank_position_from_back = 9\n    people_between = 10\n    total_people_calculated_by_ben = 27\n\n    # Calculate actual number of people based on Ben's position and the people between them\n    # Ben (from the front) + people between Ben and Frank (inclusive of Frank when counting from front)\n    actual_total_people = ben_position_from_front + people_between + frank_position_from_back - 1\n\n    # Check if Ben's calculated number matches the actual number of people\n    return actual_total_people == total_people_calculated_by_ben, actual_total_people\n\n# Assign the result from solution to ans variable\nans = solution()"
    ],
    "31bceb787e4e47be97073d7d8a8b3778": [
        "def solution():\n    # ratio of coffee to the whole mixture is 3 parts out of (3+8) parts\n    total_parts = 3 + 8\n    coffee_part = 3\n    \n    # total quantity of Latte based on the ratio\n    total_quantity = (6 / coffee_part) * total_parts\n    \n    return total_quantity\n\nans = solution()"
    ],
    "486b088e81d74803b137ad63cc4007e3": [
        "def solution():\n    number = 100 # smallest three-digit integer\n    while (number % 8 != 2) or (number % 11 != 2):\n        number += 1\n    return number\n\nans = solution()"
    ],
    "6f0ec90fdeac4893aaf890122d46e374": [
        "def solution():\n    ans = sum((-1)**(i % 2) * (34 - i * 2) for i in range(17))\n    return ans\n\nans = solution()"
    ],
    "717137e7208846a585af9fb90e9f65a3": [
        "def solution():\n    result = 0.72 * 140\n    return result\n\nans = solution()"
    ],
    "f4ac3e3adf8e48cd9836ded820e5f0cf": [
        "def solution():\n    future_value = 870\n    annual_interest_rate = 0.09\n    years = 5\n\n    present_value = future_value / ((1 + annual_interest_rate) ** years)\n    return present_value\n\nans = solution()"
    ],
    "16bb2f8b73aa4a2f87ca69fbf8cc577c": [
        "def solution():\n    ans = 19 + 18 + 17 + 16 + 10\n    return ans\n\nans = solution()"
    ],
    "456be3e7a4b1442f849f8976ad331a08": [
        "def solution():\n    return (42663**2) % 9\n\nans = solution()"
    ],
    "52ca3ae0b2e14097bf693e3c00c7fd95": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    total_marbles = symbols('total_marbles')\n    red_marbles = (2/5) * total_marbles\n    green_marbles = (1/3) * total_marbles\n    yellow_marbles = 96\n\n    equation = Eq(red_marbles + green_marbles + yellow_marbles, total_marbles)\n    solution = solve(equation, total_marbles)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9418da19a88b4ab6ad37f24482a17de8": [
        "def solution():\n    last_digits = 0\n    mod_value = 10000  # To get the last 4 digits\n\n    # Generate each term and keep adding the last 4 digits of each to last_digits\n    for i in range(1, 2016):\n        term = int('1' * i)  # Generate number with i '1's\n        last_digits = (last_digits + term) % mod_value  # add and modulo to keep last 4 digits\n\n    return last_digits\n\nans = solution()"
    ],
    "49451447b0b84c1aa576ca9cf57eb570": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if i % 2 == 0 and sum(map(int, str(i))) == 8:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "9b2f93ae65ff4b8cb762302908c1e9e9": [
        "def solution():\n    ans = 1 / 20\n    return ans\n\nans = solution()"
    ],
    "d605a3d05bcc43148562bbdb79db1c71": [
        "def solution():\n    unit_digit_13 = pow(13, 242, 10)\n    unit_digit_17_times_4 = (pow(17, 379, 10) * pow(4, 2012, 10)) % 10\n    ans = (unit_digit_13 + unit_digit_17_times_4) % 10\n    return ans\n\nans = solution()"
    ],
    "23708dd0135542c9a0397bac3cf7df9e": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    \n    equations = [\n        Eq(x % 4, 2),\n        Eq(x % 5, 3),\n        Eq(x % 11, 3)\n    ]\n    \n    ans = solve(equations, x)\n    \n    # Since we want the smallest positive value, we'll get the first solution\n    return min(ans)\n\nans = solution()"
    ],
    "2f5f5ef83c574d589866d40947993237": [
        "def solution():\n    first_term = 11\n    common_difference = -3\n    n = 7\n    seventh_term = first_term + (n - 1) * common_difference\n    return seventh_term\n\nans = solution()"
    ],
    "104db66ae297441bbca8c76f5ce475ec": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the total money Mrs Chen had at first be x\n    x = symbols('x')\n\n    # She spent $36 on plates\n    spent_on_plates = 36\n\n    # Then she had x - $36 left\n    remaining = x - spent_on_plates\n\n    # She spent 3/4 of the remaining money on cups\n    spent_on_cups = (3/4) * remaining\n\n    # She had 1/6 of the original sum left\n    left = (1/6) * x\n\n    # Equation representing the money spent on plates and cups, and the amount left\n    equation = Eq(spent_on_plates + spent_on_cups + left, x)\n\n    # Solve for x\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "f1ec42c9727d45019312260e63e8481e": [
        "from itertools import permutations\n\ndef solution():\n    max_sum = 0\n    for perm in permutations(range(1, 10)):\n        a, b, c, d, e, f, g, h, i = perm\n        abc = 100*a + 10*b + c\n        bcd = 100*b + 10*c + d\n        cde = 100*c + 10*d + e\n        def_number = 100*d + 10*e + f  # 'def' is a keyword in Python, so I use 'def_number'\n        efg = 100*e + 10*f + g\n        fgh = 100*f + 10*g + h\n        ghi = 100*g + 10*h + i\n        current_sum = abc + bcd + cde + def_number + efg + fgh + ghi\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum\n\nans = solution()"
    ],
    "51b8bb60af70468585594276c4549d5f": [
        "def solution():\n    time_per_mile_minutes = 2 + 30 / 60  # Converting 2 minutes and 30 seconds to minutes\n    time_per_mile_hours = time_per_mile_minutes / 60  # Convert time per mile to hours\n\n    miles_in_one_hour = 1 / time_per_mile_hours  # Calculate how many miles in 1 hour\n\n    return miles_in_one_hour\n\nans = solution()"
    ],
    "5919c5ed904d4b1eb75ba4e56ab0daba": [
        "def solution():\n    # Initialize count and the integer we are looking for\n    count = 0\n    integer = 0\n    # Start with i = 8, and keep incrementing by 1\n    i = 8\n    # Continue looping until we reach the 2012th integer\n    while count < 2012:\n        s = str(i)\n        # Checks if the leftmost character of the integer is '8'\n        if s[0] == '8':\n            count += 1\n            integer = i\n        i += 1\n    return integer\n\nans = solution()"
    ],
    "14e76068ade649c18d46e10500185a77": [
        "def solution():\n    total_balls = 160\n    students = 5\n\n    # If numbers are consecutive and their sum is total_balls, the average number will be:\n    average_balls = total_balls // students\n\n    # Since there are 5 students and the balls are distributed as consecutive numbers,\n    # the student with the most balls will have:\n    most_balls = average_balls + (students - 1) // 2\n\n    return most_balls\n\nans = solution()"
    ],
    "fb2929103b234c36a83b16152d639699": [
        "from itertools import combinations_with_replacement\n\ndef solution():\n    total_envelopes = 15\n    # We subtract the minimum required envelopes for each box\n    remaining_envelopes = total_envelopes - (2 + 4 + 3)\n    count = 0\n    # We generate all possible combinations for placing the remaining envelopes in 4 boxes\n    for combination in combinations_with_replacement(range(4), remaining_envelopes):\n        if combination.count(0) >= 2 and combination.count(1) >= 4 and combination.count(2) >= 3:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "5c608f9e5216463fa42df2bcdf873d46": [
        "def solution():\n    return sum(i**2 for i in range(2, 21, 2))\n\nans = solution()"
    ],
    "0b6fb29ca6e9447ca855d69db2282654": [
        "def solution():\n    # If we take 3 marbles from the bag, whichever color they may be,\n    # we are guaranteed to have at least 2 marbles of the same color\n    # because there are only 2 colors. If you take only 2, you may\n    # have 1 of each color, so 3 is the minimum number to ensure 2 of the same color.\n    return 3\n\nans = solution()"
    ],
    "2f102fdf5c8944f590e2fe08c5776b62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, honeydew = symbols('watermelon honeydew')\n\n    equation1 = Eq(2 * watermelon + 3 * honeydew, 48)\n    equation2 = Eq(honeydew, 2 * watermelon)\n\n    solutions = solve((equation1, equation2), (watermelon, honeydew))\n\n    return solutions[honeydew]\n\nans = solution()"
    ],
    "2def08a06682438abd603dfb441bdcac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    income = symbols('income')\n    \n    tax_equation = Eq(0.15 * 20000 + 0.20 * (income - 20000), 7000)\n    solutions = solve(tax_equation, income)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "d378edcf9ef64254a7f97387b00ae18b": [
        "def solution():\n    # Initialize maximum possible age for search, assuming ages are reasonable human ages\n    max_age = 100\n\n    # Initialize a list to store valid combinations of ages\n    valid_ages = []\n\n    # Iterate through possible ages for Mary (John is one year older)\n    for mary_age in range(1, max_age):\n        john_age = mary_age + 1\n\n        # Iterate through possible ages for the oldest child\n        for child1_age in range(1, max_age):\n            # Calculate the ages of the other two children\n            child2_age = child1_age - 2\n            child3_age = child1_age - 4\n\n            # Ensure all children have valid ages (greater than 0)\n            if child2_age > 0 and child3_age > 0:\n                # Product of current ages\n                product_current_ages = john_age * mary_age * child1_age * child2_age * child3_age\n                # Product of ages next year\n                product_next_year = (john_age + 1) * (mary_age + 1) * (child1_age + 1) * (child2_age + 1) * (child3_age + 1)\n\n                # Check if the products of the ages satisfy the conditions\n                if product_current_ages < 2019 and product_next_year > 2020:\n                    # Add the valid combination of ages to the list\n                    valid_ages.append((john_age, mary_age, child1_age, child2_age, child3_age))\n\n    # Find the valid combination with the sum of ages and return the sum\n    for ages in valid_ages:\n        if sum(ages) > 0:\n            return sum(ages)\n\nans = solution()"
    ],
    "d304c371fad640039cf2aef0608bc6cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(47 - 2*(x + 3), 1)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "16719701a44b4e74b780b8ee086863a6": [
        "def solution():\n    ans = 1.4 * (1/10)\n    return ans\n\nans = solution()"
    ],
    "8b62ceaf1c8a475fb638fefb9ee9fe23": [
        "def solution():\n    numerator = 1\n    denominator = 13\n    quotient, remainder = divmod(numerator * 10**2022, denominator)\n    fraction_str = str(quotient)\n    \n    cycle_length = len(fraction_str) - len(fraction_str.rstrip(fraction_str[-1]))\n    position_in_cycle = (2022 - 1) % cycle_length\n    \n    return int(fraction_str[position_in_cycle])\n\nans = solution()"
    ],
    "d5d6a40303714f8a8ac28fac5100d265": [
        "def solution():\n    from math import gcd\n\n    # Lengths of the ropes\n    a = 28\n    b = 14\n    c = 56\n\n    # Calculate the Greatest Common Divisor (GCD) of the three lengths\n    gcd_ab = gcd(a, b)\n    gcd_abc = gcd(gcd_ab, c)\n\n    # The GCD is the longest possible length of each piece\n    return gcd_abc\n\nans = solution()"
    ],
    "a0ed7f5e8007463db822ca4a6d5c38ad": [
        "def solution():\n    total_animals = 40\n    total_legs = 100\n    # Let's assume all 40 animals are chickens, with 2 legs each.\n    # That would give us 80 legs in total. We have 100 legs,\n    # meaning the difference (100 - 80 = 20) must be from rabbits since they have 2 extra legs.\n    # So, for each rabbit, we subtract one chicken.\n    # The number of rabbits can be calculated as the difference divided by 2.\n\n    legs_difference = total_legs - (total_animals * 2)\n    rabbits = legs_difference // 2\n    chickens = total_animals - rabbits\n    return chickens\n\nans = solution()"
    ],
    "5112b404eb824dc0b71fd51b06757616": [
        "def solution():\n    percentage = 25\n    total = 80\n\n    ans = (percentage / 100) * total\n\n    return ans\n\nans = solution()"
    ],
    "e6d3e99bc50e4197ba980e76f8a3861f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial number of packs in each store\n    x = symbols('x')\n\n    # After A sold 290 packs, store A has x-290 and store B has 3 times the number of packs store A has\n    equation = Eq(3 * (x - 290), x)\n\n    # Solve for x\n    packs_in_each_store = solve(equation, x)[0]\n\n    # Calculate the total number of packs they had together initially\n    total_packs_initially = packs_in_each_store * 2\n\n    return total_packs_initially\n\nans = solution()"
    ],
    "469c613e4b42431083b62ce75d2ba64f": [
        "def solution():\n    total_students = 30\n    boys = 17\n    boys_packed = 4\n    girls_school = 7\n    students_home = 5\n    boys_home = 3\n\n    girls = total_students - boys\n    girls_packed = total_students - (boys_packed + girls_school + students_home)\n\n    packed_lunch = boys_packed + girls_packed\n\n    return packed_lunch\n\nans = solution()"
    ],
    "21d247063caa480aa4fd164855aaf8d6": [
        "def solution():\n    # Total cost calculation\n    total_cost = (20 * 6) + (20 * 5) + (20 * 4)\n    # Number of chocolates\n    total_chocolates = 20 + 20 + 20\n    # Calculate the average cost\n    average_cost = total_cost / total_chocolates\n    return average_cost\n\nans = solution()"
    ],
    "e88ad0d7f3f54f3cad6c71dd96553567": [
        "def solution():\n    total_uniforms = 3600\n    uniforms_in_5_days = 720\n    days_for_720_uniforms = 5\n\n    rate_per_day = uniforms_in_5_days / days_for_720_uniforms\n\n    total_days_needed = total_uniforms / rate_per_day\n\n    return total_days_needed\n\nans = solution()"
    ],
    "a805e5e4aa104df697703c2b687e1b6d": [
        "def solution():\n    n = 36\n    factors = set()\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    return len(factors)\n\nans = solution()"
    ],
    "842182ab896748b7a10d330f85ae87d8": [
        "def solution():\n    return (100 - 1) // 12\n\nans = solution()"
    ],
    "5dc3d08683054ae99151ce2641524c51": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    eq = Eq(10 * (x + 1) - 5 * (x + 1) - 28, 2)\n    sol = solve(eq, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "9781a5cc0b814b1bb88b4c3ef4a62e10": [
        "def solution():\n    speed = 53  # speed of the train in m/s\n    time = 19   # time taken to pass the tree in seconds\n\n    length = speed * time  # length of the train is speed times time\n\n    return length\n\nans = solution()"
    ],
    "2697c4034ea94601bb0fe5639660557d": [
        "def solution():\n    # rate of man = 1 barrel / 15 days\n    man_rate = 1 / 15\n    # rate of man + wife = 1 barrel / 12 days\n    together_rate = 1 / 12\n    # wife's rate = rate of man + wife - rate of man\n    wife_rate = together_rate - man_rate\n    # wife's time = 1 barrel / wife's rate\n    wife_time = 1 / wife_rate\n    return wife_time\n\nans = solution()"
    ],
    "8e3dbd5080e34453a64a1a23ca30111e": [
        "def solution():\n    product = 2017\n    for i in range(2, 2018):\n        product *= (1 - 1/i)\n    return product\n\nans = solution()"
    ],
    "005fc5ec14e04dcba10b71edf3c8e322": [
        "def solution():\n    total_pears = 18\n    total_strawberries = 30\n    total_chocolates = 18\n    number_of_friends = 6\n\n    pears_per_friend = total_pears // number_of_friends\n    strawberries_per_friend = total_strawberries // number_of_friends\n    chocolates_per_friend = total_chocolates // number_of_friends\n\n    fruits_per_friend = pears_per_friend + strawberries_per_friend\n\n    return fruits_per_friend\n\nans = solution()"
    ],
    "c15b927172434ffa9a24c1dbeb5e27c2": [
        "def solution():\n    wheels_per_tricycle = 3\n    num_tricycles = 6\n    ans = wheels_per_tricycle * num_tricycles\n    return ans\n\nans = solution()"
    ],
    "6067f08c4e394300937f039a6579403e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2 * x + 6, 3 * x - 3)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "aa0bf7ef0d1143f9b795235a58ca1591": [
        "def solution():\n    book_price = 16\n    offer_quantity = 3\n    free_books_with_offer = 1\n\n    books_to_get_with_offer = 5 // (offer_quantity + free_books_with_offer)\n    books_to_buy_separately = 5 % (offer_quantity + free_books_with_offer)\n\n    total_cost = (books_to_get_with_offer * offer_quantity * book_price) + (books_to_buy_separately * book_price)\n    \n    return total_cost\n\nans = solution()"
    ],
    "3731755de37e48238b28194f092ad465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let's denote total number of people as total, women as w, men as m and children as c\n    total, w, m, c = symbols('total w m c')\n\n    equation1 = Eq(w, 2 / 5 * total)            # 2/5 of total are women\n    equation2 = Eq(m, 3 * c)                    # thrice as many men as children\n    equation3 = Eq(w, c + 190)                  # 190 more women than children\n    equation4 = Eq(w + m + c, total)            # sum of women, men, and children is total\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (total, w, m, c))\n\n    return solutions[total]\n\nans = solution()"
    ],
    "3ba68d061ee44b82b9ca4db170f3bec5": [
        "def solution():\n    base_of_turpan = -154\n    tip_of_fuji = 3776\n    distance = abs(base_of_turpan) + abs(tip_of_fuji)\n    return distance\n\nans = solution()"
    ],
    "f2cae285f0b84b47ade17c9a18ab319b": [
        "def solution():\n    average_pencils = 35\n    boys_average = 20\n    girls_average = 60\n    total_students = 40\n    \n    boys = symbols('boys')\n    girls = total_students - boys\n    \n    total_pencils = average_pencils * total_students\n    equation = Eq(boys_average * boys + girls_average * girls, total_pencils)\n    \n    solutions = solve(equation, boys)\n    return solutions[0]\n\nans = solution()"
    ],
    "9a74773c879b4522a6185e9816be51da": [
        "def solution():\n    remainder = 7059 % 4\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = 4 - remainder\n    return ans\n\nans = solution()"
    ],
    "0f8960c766754ad7976ce474a09accd8": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "03505bb4be72488c85f4a43b911b69fb": [
        "def solution():\n    coding_only = 36 - 20\n    math_only = 21 - 20\n    both = 20\n    total_students = coding_only + math_only + both\n    return total_students\n\nans = solution()"
    ],
    "34a8b75acf004a629ab022c2cfb11cd3": [
        "def solution():\n    # Initialize result\n    result = 0\n\n    # Iterate over the 50 numbers and sum their last two digits\n    for i in range(1, 51):\n        number = int('1' * i)  # Generating the ith number in the series\n        result += number % 100  # Adding the last two digits to the result\n\n    # Get the last two digits of the final sum\n    ans = result % 100\n\n    return ans\n\nans = solution()"
    ],
    "ffec8472e27a457186b91c2a9b4876f7": [
        "def solution():\n    divisor_without_decimal = 211\n    incorrect_result = 98.01\n    \n    # Calculate the correction that needs to be applied\n    correction = incorrect_result * divisor_without_decimal\n    \n    # Calculate the true result by adding the correction to the incorrect result\n    true_result = correction + incorrect_result\n\n    return true_result\n\nans = solution()"
    ],
    "3be71ea95b604423b0c4053a0bdc5fc8": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n\n    both_competitions = math_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "da34c13acd4f4312a4166e9435990496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    john, choon_mui = symbols('john choon_mui')\n    \n    # Original amounts are the same\n    equation1 = Eq(john, choon_mui)\n    # John spent $30, Choon Mui spent $150\n    # John's amount is 4 times Choon Mui's amount after spending\n    equation2 = Eq(john - 30, 4 * (choon_mui - 150))\n    \n    solutions = solve((equation1, equation2), (john, choon_mui))\n    \n    # Calculate John's remaining amount after spending $30\n    john_left = solutions[john] - 30\n    \n    return john_left\n\nans = solution()"
    ],
    "8897310e705d4b0996136ec5d1345eb8": [
        "from itertools import combinations_with_replacement\n\ndef solution():\n    minimum_requirements = [2, 4, 3]  # minimum number of envelopes for A, B, C\n    remaining_envelopes = 15 - sum(minimum_requirements)  # remaining envelopes after the minimum requirements\n\n    # All valid combinations are combinations of the remaining envelopes for mailboxes A, B, C, and D\n    # Since we are allocating remaining envelopes, we need to add the minimum required envelopes to each box\n    combinations = combinations_with_replacement(range(remaining_envelopes + 1), 4)\n    \n    # Filter out combinations where the minimum requirements are not met\n    valid_combinations = [\n        combination for combination in combinations\n        if combination[0] + minimum_requirements[0] >= 2 and \n           combination[1] + minimum_requirements[1] >= 4 and \n           combination[2] + minimum_requirements[2] >= 3\n    ]\n    \n    # Count valid combinations\n    count = len(valid_combinations)\n    \n    return count\n\nans = solution()"
    ],
    "3a6ea0bb1dac4585a29c21ba5dadca5d": [
        "def solution():\n    seconds_per_minute = 60\n    minutes_per_hour = 60\n    hours_per_day = 24\n    days_per_week = 7\n\n    seconds_per_week = seconds_per_minute * minutes_per_hour * hours_per_day * days_per_week\n\n    return seconds_per_week\n\nans = solution()"
    ],
    "8d5bc66e7f26483e93a8178a57870366": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let m be the number of male visitors on the first day\n    # Let f be the number of female visitors on the first day\n    m, f = symbols('m f', real=True, positive=True)\n\n    # From the problem, we have the following two equations:\n    # On the first day: m = f + 450    \n    equation1 = Eq(m, f + 450)\n\n    # On the second day:\n    # The number of female visitors increased by 15%\n    # The number of male visitors decreased by 18%\n    # The total number of visitors is 1354\n    # f + 0.15f + m - 0.18m = 1354\n    equation2 = Eq(f * 1.15 + m * 0.82, 1354)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (m, f))\n\n    # The number of male visitors on the first day\n    return solutions[m]\n\nans = solution()"
    ],
    "db8434167bdb42b494e99767df043336": [
        "def solution():\n    remaining_eggs = 15\n    sold_second_time = remaining_eggs * 2 + 4\n    remaining_after_first_sale = sold_second_time * 2\n    initial_eggs = remaining_after_first_sale + 5\n\n    return initial_eggs\n\nans = solution()"
    ],
    "88e8074a774845edbbc61fbfd06e2d2f": [
        "def solution():\n    miles_per_hour = 65\n    minutes = 15\n    hours = minutes / 60\n    distance_in_miles = miles_per_hour * hours\n    kilometers_per_mile = 1.60934\n    distance_in_kilometers = distance_in_miles * kilometers_per_mile\n    return distance_in_kilometers\n\nans = solution()"
    ],
    "b5f4586abff348538a08b5773026326b": [
        "def solution():\n    original_amount = 200\n    percentage_increase = 0.10  # 10% as a decimal\n    increase_amount = original_amount * percentage_increase\n    new_amount = original_amount + increase_amount\n    return new_amount\n\nans = solution()"
    ],
    "953c0cd469784f418a1e4b46c24aa581": [
        "def solution():\n    actual_length_m = 8  # length in meters\n    scale_ratio = 1 / 20  # scale ratio\n    model_length_m = actual_length_m * scale_ratio\n    model_length_cm = model_length_m * 100  # converting meters to centimeters\n    return model_length_cm\n\nans = solution()"
    ],
    "026cc253a39b4f7a8ff32127b4f5f99c": [
        "def solution():\n    total_girls = 28\n    like_one_direction = 20\n    like_the_vamps = 17\n    like_both = 15\n\n    like_neither = total_girls - (like_one_direction + like_the_vamps - like_both)\n    \n    return like_neither\n\nans = solution()"
    ],
    "2addb83d9ec14899ae26c229580cd24c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    a, b = symbols('a b')  # a for price of an apple, b for price of a banana\n    # Equations based on the information given\n    equation1 = Eq(6*a + 7*b, 8*a + 4*b)\n    equation2 = Eq(8*a, 8*a)  # Money spent on 8 apples is his total money\n   \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, b))\n    \n    # Calculate the number of bananas he can buy\n    total_money = solutions[a] * 8\n    num_bananas = total_money / solutions[b]\n    \n    return num_bananas\n\nans = solution()"
    ],
    "61fc4738f46a4c1da0407128ad60defd": [
        "def solution():\n    return 617 * 6\n\nans = solution()"
    ],
    "5bf8127164644eda8c073097bd158315": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "ff891cbe817f4502a65021a59cdc3af5": [
        "def solution():\n    from itertools import permutations\n    \n    initial_positions = ['A', 'B', 'C', 'D']\n    count = 0\n    \n    for perm in permutations(initial_positions):\n        if all(perm[i] != initial_positions[i] for i in range(len(initial_positions))):\n            count += 1\n    \n    return count\n\nans = solution()"
    ],
    "4af723c7f6a341b197db0f858a97435c": [
        "def solution():\n    count = 0\n    ways = []\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            if die1 + die2 == 8:\n                ways.append((die1, die2))\n                count += 1\n    return count\n\nans = solution()"
    ],
    "af71ae92175c47c2bbfef7d6d4226104": [
        "def solution():\n    initial_amount = 12000\n    interest_rate = 0.10\n    years = 2\n\n    final_amount = initial_amount * (1 + interest_rate)**years\n\n    return final_amount\n\nans = solution()"
    ],
    "372a0dd4bdd148518598bd5418fd17af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(0.95*x - 2/5*x, 55)\n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "362010cacc1c428e87e8f76968f8b0d1": [
        "def solution():\n    total_distance = 11\n    day_distance = 3\n    night_distance = 1\n    net_distance = day_distance - night_distance\n\n    current_distance = 0\n    day_count = 0\n\n    while current_distance < total_distance:\n        day_count += 1\n        current_distance += day_distance\n        if current_distance >= total_distance:\n            break\n        current_distance -= night_distance\n\n    return day_count\n\nans = solution()"
    ],
    "d4d78225836642e3a6857447ae177c76": [
        "def solution():\n    ans = 2.4 * (3.7 + 1.3) / 2\n    return ans\n\nans = solution()"
    ],
    "bb7980b8187641c693b65724c3bf2545": [
        "def solution():\n    for number in range(2, 100):\n        if number % 7 == 2 and number % 13 == 2:\n            return number\n\nans = solution()"
    ],
    "932cd151b950413daad721128c59b65f": [
        "def solution():\n    hourly_rate = 78 / 6.5\n    total_hours = 8 * 5  # Assuming a week has 5 working days\n    total_pay = hourly_rate * total_hours\n    debt_remaining = 700 - total_pay\n    return {'total_pay': total_pay, 'debt_remaining': debt_remaining if debt_remaining > 0 else 'Paid off'}\n\nans = solution()"
    ],
    "546aa08753494a909833d0621b194317": [
        "def solution():\n    air_ticket = 800\n    train_ticket = 378\n    difference = air_ticket - train_ticket\n    return difference\n\nans = solution()"
    ],
    "fea0f54b7aae43d2aa3a63d63126d66b": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    end_work = datetime.strptime(\"20:30\", \"%H:%M\")\n    work_duration = timedelta(hours=8, minutes=45)\n\n    start_work = end_work - work_duration\n    return start_work.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "40fa5f91d7774c719164c67d4befac6e": [
        "def solution():\n    # Create a list to hold the possible values for A\n    possible_values = []\n\n    # Loop through the possible values of A\n    for A in range(10):\n        # Check if A satisfies the puzzle constraints\n        if (A + A == A * 3) and (A == A * 1):\n            # If constraints are satisfied, add A to the possible values list\n            possible_values.append(A)\n\n    # Return the first (and in this case, only) possible value for A\n    return possible_values[0]\n\nans = solution()"
    ],
    "18d69d8447c241eba858de2a934b9dd6": [
        "def solution():\n    count = 0\n    for num in range(100, 1000):\n        digits = [int(d) for d in str(num)]\n        if digits.count(0) == 1 and 0 not in [digits[0], digits[-1]]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0420376192d448b6b35d8dbb1e3ba394": [
        "from math import lcm\n\ndef solution():\n    arjun_period = 14  # 2 weeks = 14 days\n    yahya_period = 10  # 10 days\n    return lcm(arjun_period, yahya_period)\n\nans = solution()"
    ],
    "1a52a8a55f6a4622afbe5b311556da89": [
        "def solution():\n    return 53 * 627\n\nans = solution()"
    ],
    "0ea8d4a5251c4d73939b3f7e26abc354": [
        "def solution():\n    sum_of_numbers = 0\n    for i in range(10):\n        for j in range(10):\n            number = int(f'2{i}9{j}')\n            if number % 3 == 0 and number % 5 == 0:\n                sum_of_numbers += number\n    return sum_of_numbers\n\nans = solution()"
    ],
    "c569206e3d8e45da9a5fd08bd75dd481": [
        "def solution():\n    return round(14575, -2)\n\nans = solution()"
    ],
    "3a8af64305054e408ce6703563a42e67": [
        "def solution():\n    highway_length = 42\n    distance_apart = 7\n    num_trees = (highway_length // distance_apart) - 1\n    return num_trees\n\nans = solution()"
    ],
    "a50c5ac06f154c1ab40822b47b13e86a": [
        "def solution():\n    return 34 + 2 - 11 + 14\n\nans = solution()"
    ],
    "063e43565ec941b8b309de1ea64f2a4d": [
        "def solution():\n    cost_of_shoes = 30\n    fake_note = 50\n    lucas_lost = cost_of_shoes + fake_note\n    return lucas_lost\n\nans = solution()"
    ],
    "7d6f9d84e0f64b73964b90b16040c92d": [
        "def solution():\n    total_balloons = 175\n    pupils = 7\n    balloons_per_pupil = total_balloons // pupils\n\n    return balloons_per_pupil\n\nans = solution()"
    ],
    "51012ecffd1f47a19d29d548fccb4460": [
        "def solution():\n    first_term = 21\n    last_term = 99\n    num_terms = (last_term - first_term) // 1 + 1\n    sum_sequence = num_terms * (first_term + last_term) // 2\n\n    return sum_sequence\n\nans = solution()"
    ],
    "9929cc1f915941dd90453af8a8ff6e9d": [
        "def solution():\n    ans = (5/7) * 112\n    return ans\n\nans = solution()"
    ],
    "8a5fc0b3c5f6473db327f5603655842e": [
        "from math import factorial\n\ndef solution():\n    # Treat A, B and C as one unit, along with the other 7 students\n    # First, find the number of ways to arrange these \"8\" units\n    unit_arrangements = factorial(8)\n    \n    # Then, find the number of ways to arrange A, B and C within their own unit\n    abc_arrangements = factorial(3)\n\n    # Multiply the arrangements of the \"8\" units with the arrangements of A, B, and C\n    total_arrangements = unit_arrangements * abc_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "5af9d49786184344b4cc613f0a935eb9": [
        "def solution():\n    num_str = ''.join(str(i) for i in range(1, 31))\n    num_str_removed = num_str[:46]\n    \n    num_list = sorted(num_str_removed)\n    for i, digit in enumerate(num_list):\n        if digit != '0':\n            smallest_digit = num_list.pop(i)\n            break\n    smallest_number = int(smallest_digit + ''.join(num_list))  \n\n    return smallest_number\n\nans = solution()"
    ],
    "cb7070ea663b4e43bd0e3c4a4ae168ef": [
        "def solution():\n    return 6 * 9 * 12\n\nans = solution()"
    ],
    "b94280bff5ab40d6a0f1f51b73c6b796": [
        "def solution():\n    max_blue_balls = 6\n    return max_blue_balls + 1  # Taking all blue balls first, then one more to guarantee a white ball.\n\nans = solution()"
    ],
    "79102f1901d94f8aaf6295c7c0b16f08": [
        "from math import comb\n\ndef solution():\n    ans = comb(15, 4)\n    return ans\n\nans = solution()"
    ],
    "b50b389683c44f05a3574ad0a3a8b04f": [
        "def solution():\n    ans = (1 + 2 + 3 + 4) * 1 - (2020 + 2019 + 2018) * 0\n    return ans\n\nans = solution()"
    ],
    "f0fbdd43508d4b8bac3f15715fcfe710": [
        "def solution():\n    # Jack's speed during different parts of the race\n    speed_first_part = 7 # meters per second\n    speed_middle_part = 5 # meters per second\n    speed_final_part = 8 # meters per second\n    \n    # Distances of different parts of the race\n    distance_first_part = 280 # meters\n    distance_middle_part = 400 # meters\n    distance_final_part = 800 - (distance_first_part + distance_middle_part) # meters\n    \n    # Time calculations for each part\n    time_first_part = distance_first_part / speed_first_part # time = distance / speed\n    time_middle_part = distance_middle_part / speed_middle_part\n    time_final_part = distance_final_part / speed_final_part\n    \n    # Total time spent\n    total_time = time_first_part + time_middle_part + time_final_part\n    \n    return total_time\n\nans = solution()"
    ],
    "c5940c9b3ba945a795c1c8d4bf2dc024": [
        "def solution():\n    ruler_length = 20\n    overlap = 3\n\n    total_length = (3 * ruler_length) - (2 * overlap)\n\n    return total_length\n\nans = solution()"
    ],
    "38bb0a271e854cfb911c418384137f41": [
        "def solution():\n    # Total jogging time from 6:30 am to 7:30 am is 1 hour.\n    jogging_time_hours = 1\n    # Jogging speed is 6 miles per hour.\n    jogging_speed_mph = 6\n\n    # Total walking time from 7:30 am to 9:30 am is 2 hours.\n    walking_time_hours = 2\n    # Walking speed is 5 miles per hour.\n    walking_speed_mph = 5\n\n    # Distance traveled while jogging.\n    jogging_distance_miles = jogging_time_hours * jogging_speed_mph\n    # Distance traveled while walking.\n    walking_distance_miles = walking_time_hours * walking_speed_mph\n\n    # Total distance traveled is the sum of jogging and walking distances.\n    total_distance_miles = jogging_distance_miles + walking_distance_miles\n\n    return total_distance_miles\n\nans = solution()"
    ],
    "d3fe3513b7b8439ca80784b696227f81": [
        "def solution():\n    used_cups = 721\n    total_new_cups = 0\n\n    while used_cups >= 7:\n        new_cups = used_cups // 7\n        used_cups = used_cups % 7 + new_cups\n        total_new_cups += new_cups\n\n    return total_new_cups\n\nans = solution()"
    ],
    "1dc8d2d4657c44f2aa1053854785aaa4": [
        "def solution():\n    ans = 2000 - 222\n    return ans\n\nans = solution()"
    ],
    "de53e5290acf446d8f9e2d2cf711b150": [
        "def solution():\n    total_length_cm = 23 * 100  # convert meters to cm\n    distance_between_cauliflowers_cm = 15 + 45  # distance in cm from one cauliflower's center to the next\n    first_cauliflower_distance_cm = 20  # distance in cm from the start to the first cauliflower\n\n    planting_length_cm = total_length_cm - first_cauliflower_distance_cm  # effective length for planting in cm\n    number_of_cauliflowers = planting_length_cm // distance_between_cauliflowers_cm  # number of cauliflowers that can be planted\n\n    return int(number_of_cauliflowers)\n\nans = solution()"
    ],
    "c12d1d0039a7413aa3e069eb8b681b38": [
        "def solution():\n    total_days = 6\n    total_pages = (14 * 3) + (9 * 2) + 12\n    average_pages_per_day = total_pages / total_days\n\n    return average_pages_per_day\n\nans = solution()"
    ],
    "140462dc7e4c435c900bfaf90640d4f4": [
        "def solution():\n    from math import gcd\n\n    class_a = 8\n    class_b = 12\n    class_c = 20\n\n    # Find the greatest common divisor (GCD) of the three class sizes\n    ans = gcd(gcd(class_a, class_b), class_c)\n\n    return ans\n\nans = solution()"
    ],
    "d433f6c9238447089a529b20f6d55cfc": [
        "def solution():\n    return (20**2 - 18**2) + (19**2 - 17**2)\n\nans = solution()"
    ],
    "2f9549d4e4cd4be0a3da0b27a9aeb039": [
        "def solution():\n    speed_of_sound = 3.4 * 10 ** 2  # meters per second\n    distance = 1.5 * 10 ** 3        # meters (1.5 kilometers)\n    time = distance / speed_of_sound\n    return time\n\nans = solution()"
    ],
    "19ee53ef309b4ac1b03a0754f950fa53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of members in each club\n    badminton, bowling = symbols('badminton bowling')\n\n    # Create the equation for the initial condition\n    equation1 = Eq(badminton, 3 * bowling)\n\n    # Create the equation for the condition after members leave\n    equation2 = Eq(badminton - 36, bowling - 4)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (badminton, bowling))\n\n    # The final number of members in each club will be badminton - 36 or bowling - 4\n    badminton_final = solutions[badminton] - 36\n    bowling_final = solutions[bowling] - 4\n\n    return badminton_final, bowling_final\n\nans = solution()"
    ],
    "89588201f7f94ac8a1d4119cac4fc1e5": [
        "def solution():\n    n = 4.5 / 5\n    return n\n\nans = solution()"
    ],
    "f136e2a0e618480e99a0044f35156610": [
        "def solution():\n    number = 72\n    prime_factors = {}\n    factor = 2\n\n    while number > 1:\n        while number % factor == 0:\n            number //= factor\n            prime_factors[factor] = prime_factors.get(factor, 0) + 1\n        factor += 1\n\n    num_factors = 1\n\n    for power in prime_factors.values():\n        num_factors *= (power + 1)\n\n    return num_factors\n\nans = solution()"
    ],
    "59dd5e71c11a413fac9da29a37a1201b": [
        "def solution():\n    return 100\n\nans = solution()"
    ],
    "b96c9f2ccbdd4053bb3e1c306d2c7cbe": [
        "def solution():\n    james = 24\n    linda = james / 2\n    ben = linda / 4\n    total_marbles = james + linda + ben\n    return total_marbles\n\nans = solution()"
    ],
    "dc773bc479574ee4a35fac2c1bab3b74": [
        "def solution():\n    total_value = 504\n    average = 126\n    difference = 6\n\n    # number of cards\n    num_cards = total_value // average\n\n    # smallest number is average - (difference - 1) because they are all odd numbers\n    smallest_number = (average * num_cards - difference) // num_cards + 1\n\n    return smallest_number\n\nans = solution()"
    ],
    "caa371df0a494602a41234dce6604f84": [
        "def solution():\n    def count_factors(n, p):\n        count = 0\n        while n % p == 0 and n > 0:\n            n //= p\n            count += 1\n        return count\n\n    def factorial_prime_factors_count(start, end, prime):\n        count = 0\n        for i in range(start, end + 1):\n            count += count_factors(i, prime)\n        return count\n\n    twos_count = factorial_prime_factors_count(301, 999, 2)\n    fives_count = factorial_prime_factors_count(301, 999, 5)\n    \n    # The number of zeros at the end is determined by the number of 10s, \n    # which is the same as the minimum of the count of 2s and 5s.\n    ans = min(twos_count, fives_count)\n    return ans\n\nans = solution()"
    ],
    "abce3e56fd794c2e9db7fff1d57bab61": [
        "def solution():\n    number1 = 1234\n    number2 = 678\n    ans = number1 - number2\n    return ans\n\nans = solution()"
    ],
    "6d85c136dca14c8fb76cfaff88586b4f": [
        "def solution():\n    ans = 5.2 / 10\n    return ans\n\nans = solution()"
    ],
    "cc28359065b040f0baac3572436155d0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    wendy, vivien = symbols('wendy vivien')\n    \n    equation1 = Eq(wendy, 2 * vivien)\n    equation2 = Eq(vivien - 10, (wendy - 10) / 4)\n    \n    solutions = solve((equation1, equation2), (wendy, vivien))\n    \n    wendy_age_in_5_years = solutions[wendy] + 5\n    \n    return wendy_age_in_5_years\n\nans = solution()"
    ],
    "90378da3a7ee431ca10e34550d2fde15": [
        "def solution():\n    ans = sum(1 / i for i in range(10, 20))\n    return int(ans)\n\nans = solution()"
    ],
    "bc0c739adc5f403fb13b64dab9bc2e64": [
        "def solution():\n    x = (5 + 3) / 1\n    return x\n\nans = solution()"
    ],
    "5e7272ec96dc4c028e0cf9d07c5a405f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n    girls_swim, girls_not_swim = 31 * girls, 49 * girls\n    boys_swim, boys_not_swim = boys - 120, boys\n    \n    # Equations based on given information\n    eq1 = Eq(boys, girls + 90)\n    eq2 = Eq(girls_swim + girls_not_swim + boys_swim + boys_not_swim, 1690)\n    eq3 = Eq(girls_swim + girls_not_swim, girls)\n    eq4 = Eq(boys_swim + boys_not_swim, boys)\n    \n    # Using the equations to solve for the number of girls\n    solutions = solve((eq1, eq2, eq3, eq4), (girls, boys))\n    \n    g = solutions[girls]\n    b = solutions[boys]\n    \n    # Calculate the number of swimming and non-swimming students\n    not_swim_girls = 49 * g\n    not_swim_boys = b - 120\n    total_not_swim = not_swim_girls + not_swim_boys\n\n    return total_not_swim\n  \nans = solution()"
    ],
    "23fdb74183d9468b86a9a1e7485a3ab9": [
        "def solution():\n    for num in range(10, 100):\n        if num % 6 == 0 and (num - 1) % 13 == 0:\n            return num\n\nans = solution()"
    ],
    "e37f0736fbf94dbbadaa812272966e1b": [
        "def solution():\n    ans = 617 - 385\n    return ans\n\nans = solution()"
    ],
    "f04bf8b6007544d3b9bb2fd42578dd8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bolt, boris = symbols('bolt boris')\n\n    equation1 = Eq(bolt, boris + 1656)\n    equation2 = Eq(bolt, 5 * boris + 280)\n\n    solutions = solve((equation1, equation2), (bolt, boris))\n\n    total_distance = solutions[bolt] + solutions[boris]\n\n    return total_distance\n\nans = solution()"
    ],
    "57b28975ea284c60b94b10c37a4a685a": [
        "def solution():\n    english_classes = 20\n    math_classes = 35\n    both_classes = 15\n\n    total_students = (english_classes + math_classes) - both_classes\n\n    return total_students\n\nans = solution()"
    ],
    "25a45bd50b6544e0923661f3f0222503": [
        "def solution():\n    rabbit_speed = 330  # m/min\n    turtle_speed = 30   # m/min\n    race_distance = 6990  # m\n    rabbit_sleep_time = 215  # min\n    start_delay = 10  # min\n\n    # Calculate distance covered by rabbit before sleep\n    rabbit_distance_before_sleep = rabbit_speed * start_delay\n    \n    # Calculate time taken by turtle to cover full distance\n    turtle_time_full_distance = race_distance / turtle_speed\n\n    # Calculate remaining time for turtle after rabbit sleep\n    remaining_time_for_turtle = turtle_time_full_distance - start_delay - rabbit_sleep_time\n\n    # Calculate distance covered by turtle in remaining time\n    turtle_distance_covered_after_sleep = remaining_time_for_turtle * turtle_speed\n    \n    # Calculate time taken by rabbit to finish the race after waking up\n    rabbit_time_after_sleep = (race_distance - rabbit_distance_before_sleep) / rabbit_speed\n\n    # Compare times to finish for turtle and rabbit\n    if turtle_time_full_distance < rabbit_time_after_sleep + rabbit_sleep_time + start_delay:\n        winner = \"turtle\"\n        distance_between = race_distance - (turtle_time_full_distance * turtle_speed)\n    else:\n        winner = \"rabbit\"\n        # Calculate distance covered by turtle when rabbit finishes\n        turtle_distance_when_rabbit_finishes = (start_delay + rabbit_sleep_time + rabbit_time_after_sleep) * turtle_speed\n        distance_between = race_distance - turtle_distance_when_rabbit_finishes\n\n    return winner, int(distance_between)\n\nans = solution()"
    ],
    "a989d97e5a634181a65ac6343582a44d": [
        "def solution():\n    final_amount = 484\n    increase_rate = 0.10\n    num_years = 2020 - 2018\n\n    initial_amount = final_amount / ((1 + increase_rate) ** num_years)\n    return initial_amount\n\nans = solution()"
    ],
    "d40336763f3641a1be634dae96636feb": [
        "def solution():\n    ans = 4 * (2 + 7) - 2 * (5 + 3)\n    return ans\n\nans = solution()"
    ],
    "20418f7933e340978dd3bd82bcc92a3e": [
        "def solution():\n    from math import factorial\n\n    total_ways = factorial(7)\n    ways_together = factorial(3) * factorial(5)\n\n    return total_ways - ways_together\n\nans = solution()"
    ],
    "12e5a736389f435683bb5c8e50d61e2b": [
        "def solution():\n    first_term = 10\n    fourth_term = 25\n    number_of_rows = 25\n    \n    # Find the common difference of the arithmetic sequence\n    common_difference = (fourth_term - first_term) // 3\n    \n    # Find the last term of the arithmetic sequence\n    last_term = first_term + (number_of_rows - 1) * common_difference\n    \n    # Sum of arithmetic sequence formula: n/2 * (first_term + last_term)\n    total_athletes = number_of_rows * (first_term + last_term) // 2\n\n    return total_athletes\n\nans = solution()"
    ],
    "0e3fbb38811f4247902fb227b710e62e": [
        "def solution():\n    boys = 12\n    ratio_boys_to_girls = 1 / 2\n    girls = boys / ratio_boys_to_girls\n    total_students = boys + girls\n    return int(total_students)\n\nans = solution()"
    ],
    "4d62c7befaad4eceb13cc1cd164eebe3": [
        "def solution():\n    def count_factors(n, p):\n        count = 0\n        while n > 0:\n            n //= p\n            count += n\n        return count\n    \n    ans = count_factors(789, 5)\n    return ans\n\nans = solution()"
    ],
    "49744fee4f6447fcb89a783113d3f0c0": [
        "def solution():\n    # Total score of Team A\n    total_score_A = 76 * 20\n    \n    # Average score of both teams combined\n    combined_average_score = 70\n\n    # Since the total number of students in Team A is known, let x be the number of students in Team B.\n    # x * average_score_B + total_score_A = (20 + x) * combined_average_score\n    # Solving for x:\n    x = symbols('x')\n    equation = Eq((67 * x) + total_score_A, (20 + x) * combined_average_score)\n\n    num_students_B = solve(equation, x)[0]\n\n    return num_students_B\n\nans = solution()"
    ],
    "bef9ea98d3814300913ad8631dcc87c7": [
        "def solution():\n    participants = 100\n    # Using Pigeonhole Principle, if each school must have at least 4 participants to have\n    # the most participants, the maximum number of schools is participants divided by 4.\n    max_schools = participants // 4\n\n    return max_schools\n\nans = solution()"
    ],
    "bddc0899c1ca45f1a66f449e0e844404": [
        "def solution():\n    ans = 23 * 76\n    return ans\n\nans = solution()"
    ],
    "cde4477099f04ff785b49a2072d18f0b": [
        "def solution():\n    num_cakes = 195\n    cost_per_cake = 46\n    total_cost = num_cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "6f4e289e9e9942129769e8733efea31f": [
        "def solution():\n    count = 0\n    for hour in range(24):  # loop over hours\n        for minute in range(60):  # loop over minutes\n            time_string = f\"{hour:02d}{minute:02d}\"  # format time as a string with leading zeros\n            if time_string.count('4') >= 2:  # check if there are at least two '4's in the time\n                count += 1\n    return count\n\nans = solution()"
    ],
    "3bda0dbde94744968aa0181ba1cc0bac": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 2, 3, 7, 8, 9]\n    perms = permutations(digits, 3)\n    products = []\n    \n    for perm in perms:\n        number1 = int(''.join(map(str, perm)))\n        remaining = [d for d in digits if d not in perm]\n        for perm2 in permutations(remaining, 3):\n            number2 = int(''.join(map(str, perm2)))\n            products.append(number1 * number2)\n            \n    return min(products)\n\nans = solution()"
    ],
    "cd817843175e41e8b65030d600357b18": [
        "from itertools import permutations\n\ndef max_product(ABCD, EFG):\n    return ABCD * EFG\n\ndef min_product(ABCD, EFG):\n    return ABCD * EFG\n\ndef solution():\n    digits = list(range(1,10))  # List of possible digits 1 to 9\n    max_diff = 0\n    min_val = 1993 * 1993  # initialize to the maximum possible product\n    max_val = 0\n    \n    # Compute all permutations of the 7 digits\n    for p in permutations(digits, 7):\n        ABCD = 1000*p[0] + 100*p[1] + 10*p[2] + p[3]\n        EFG = 100*p[4] + 10*p[5] + p[6]\n        if ABCD + EFG == 1993:\n            product = max_product(ABCD, EFG)\n            max_val = max(max_val, product)\n            min_val = min(min_val, product)\n\n    # The difference between maximum and minimum products\n    diff = max_val - min_val\n    return diff\n\nans = solution()"
    ],
    "e9c5342a82354465b6f16c78f081eeab": [
        "def solution():\n    # On a regular die, the maximum roll is 6.\n    max_roll = 6\n    desired_position = 25\n    # To find minimum rolls, divide the desired position by the maximum roll.\n    # Since we are looking for the least number of times he needs to roll,\n    # we will use ceiling division because we can't have a fraction of a roll.\n    from math import ceil\n    minimum_rolls = ceil(desired_position / max_roll)\n\n    return minimum_rolls\n\nans = solution()"
    ],
    "a51bd65e7b8041c29809ddac356ad0cd": [
        "def solution():\n    first_term = 19\n    last_term = 2019\n    difference = 50\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_sequence\n\nans = solution()"
    ],
    "018443a51fa1436b9ab0ca6c0c37b98f": [
        "def solution():\n    for tens in range(1, 10):  # Start at 1 since it's a 2-digit number\n        for ones in range(10):  # Ones can be from 0 to 9\n            if tens + ones == 15:\n                return tens * 10 + ones\n\nans = solution()"
    ],
    "e17d88a82a53495296ec5959ab199254": [
        "def solution():\n    return 4.5 * 14\n\nans = solution()"
    ],
    "2edcaf59ada74114ad5ad084b9daa534": [
        "def solution():\n    ans = 2 - (-2 - 2) - (-2 - (-2 - 2))\n    return ans\n\nans = solution()"
    ],
    "d1bd5b0281c14603821cd856c0814f93": [
        "def solution():\n    first_term = 10\n    last_term = 20\n    num_terms = (last_term - first_term) + 1\n    ans = (first_term + last_term) * num_terms // 2\n    return ans\n\nans = solution()"
    ],
    "c46f174aa4ca4269bd208d1d522bca03": [
        "def solution():\n    ans = 43 - 5.2 + 1.03\n    return ans\n\nans = solution()"
    ],
    "d77bee6b305846ecbd5dff987f4e42d6": [
        "def solution():\n    ans = 0.45 + 1.02 + 3.003\n    return ans\n\nans = solution()"
    ],
    "ccee4c3a5a784522aa2ab0b3f57c382d": [
        "def solution():\n    # calculate the result of the expression\n    ans = (20.23 * 321) + (202.3 * 45.6) + (2.023 * 2230)\n    # return the final result\n    return ans\n\nans = solution()"
    ],
    "a05a23198be14a49b4fffef79e084b27": [
        "def solution():\n    depth = 220\n    climb_per_hour = 40\n    slip_back = 10\n    net_climb = climb_per_hour - slip_back\n    hours = 0\n    \n    while depth > 0:\n        hours += 1\n        depth -= climb_per_hour\n        if depth <= 0:\n            break\n        depth += slip_back\n\n    return hours\n\nans = solution()"
    ],
    "6cdbe58e9a9f4186995fe83503eec2d2": [
        "from sympy import isprime\n\ndef solution():\n    for number in range(29, 0, -1):\n        if isprime(number):\n            return number\n\nans = solution()"
    ],
    "6114bae2343b4198a428d3afa112c960": [
        "def solution():\n    total = 3989\n    known_sum = 3000 + 80 + 9\n    missing_number = total - known_sum\n    return missing_number\n\nans = solution()"
    ],
    "90f6519f131740598ed9fbc1b29e3f94": [
        "def solution():\n    original_typists = 5\n    original_words = 6000\n    original_time_minutes = 20\n    sick_typists = 2\n    remaining_typists = original_typists - sick_typists\n    target_words = 9000\n\n    words_per_typist_per_minute = original_words / (original_typists * original_time_minutes)\n    required_minutes = target_words / (remaining_typists * words_per_typist_per_minute)\n\n    return required_minutes\n\nans = solution()"
    ],
    "aacb3756717d41cc8276dc87aede4f8c": [
        "def solution():\n    price_per_cabbage = 0.96\n    total_cost = 8 * price_per_cabbage\n    num_lettuces = 6\n    price_per_lettuce = total_cost / num_lettuces\n    \n    return price_per_lettuce\n\nans = solution()"
    ],
    "019ec282bc4a45b8a08add1000a1c483": [
        "def solution():\n    total_money = 388\n    spent_money = 97\n    saved_money = total_money - spent_money\n    return saved_money\n\nans = solution()"
    ],
    "5111af6f7b234a2a86f4a95d7fe4e3aa": [
        "def solution():\n    total_distance = 30\n    original_plants = 11\n    remaining_plants = 11 - 8\n\n    # The number of intervals is always one less than the number of plants\n    original_intervals = original_plants - 1\n    new_intervals = remaining_plants - 1\n\n    # Original spacing is the total distance divided by the number of original intervals\n    original_spacing = total_distance / original_intervals\n\n    # New spacing is the total distance divided by the new number of intervals\n    new_spacing = total_distance / new_intervals\n\n    return new_spacing\n\nans = solution()"
    ],
    "c10ff9a910b5472fa4b29fef9b93fe4f": [
        "def solution():\n    start_time = (13 * 60) + 52  # Convert start time to minutes past midnight\n    end_time = (14 * 60) + 5   # Convert end time to minutes past midnight\n    duration = end_time - start_time  # Duration of the call in minutes\n    cost_per_minute = 14  # Cost per minute in pence\n    total_cost = duration * cost_per_minute  # Total cost of the call\n    return total_cost\n\nans = solution()"
    ],
    "8cf914f63b224541b0dbbd628dc0d76f": [
        "def solution():\n    from sympy import divisors\n\n    return sum(divisors(20))\n\nans = solution()"
    ],
    "df2923c88c0f4ff3b1ecc189c2f6e24f": [
        "def solution():\n    return 0.40 * 320\n\nans = solution()"
    ],
    "e3710402e52e4b1a92a506cba8e00a66": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):  # Iterate through all three-digit numbers\n        digits = set(str(i))  # Get the set of digits\n        if digits.issubset({'2', '3'}) and '2' in digits and '3' in digits:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "1969baf23afa40a7baf0654943977371": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime.strptime(\"17-10-2022\", \"%d-%m-%Y\")\n    end_date = datetime.strptime(\"20-12-2022\", \"%d-%m-%Y\")\n    \n    current_date = start_date\n    sunday_count = 0\n    \n    while current_date <= end_date:\n        if current_date.weekday() == 6:  # Sunday\n            sunday_count += 1\n        current_date += timedelta(days=1)\n    \n    return sunday_count\n\nans = solution()"
    ],
    "7b410b23a38b498c940b646f7eb41bbc": [
        "def solution():\n    pen = 5.50\n    ruler = 7.60\n    total = pen + ruler\n    return total\n\nans = solution()"
    ],
    "3d380dd79fda442a8c27fd6f0f572e5b": [
        "def solution():\n    return 251 * 27\n\nans = solution()"
    ],
    "5d4cb1405ca241f99a0798ad88be93f8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, peach = symbols('apple peach')\n    \n    equation1 = Eq(4 * apple + 3 * peach, 10)\n    equation2 = Eq(2 * apple + 2 * peach, 6)\n\n    solutions = solve((equation1, equation2), (apple, peach))\n\n    return solutions[apple]\n\nans = solution()"
    ],
    "d5a7ecbc1d6a47828162d5c281243895": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # s is the cost of a strawberry tart, a is the cost of an apple tart\n    # x is the number of strawberry tarts\n    s, a, x = symbols('s a x')\n\n    equation1 = Eq(s, a + 0.40)\n    equation2 = Eq(2 * x * a, x * s)\n    equation3 = Eq(2 * x * a + x * s, 40)\n\n    solutions = solve((equation1, equation2, equation3), (s, a, x))\n\n    # The total number of tarts is x strawberry tarts + 2x apple tarts\n    total_tarts = x + 2 * x\n\n    return total_tarts.subs(solutions)\n\nans = solution()"
    ],
    "89f3344c7d3f4ec385941566d34f211b": [
        "def solution():\n    from math import lcm\n\n    # Convert minutes to seconds\n    every_9_minutes_in_seconds = 9 * 60\n\n    # Traffic lights change every these seconds\n    first_light = 30  # half a minute\n    second_light = 45 # 0.75 minutes\n\n    # Calculate the LCM of the first two traffic lights\n    lcm_first_second = lcm(first_light, second_light)\n\n    # The third traffic light should have a time that is a factor of the LCM\n    for third_light in range(30, lcm_first_second + 1):\n        if every_9_minutes_in_seconds % third_light == 0 and lcm(lcm_first_second, third_light) == every_9_minutes_in_seconds:\n            return third_light\n\nans = solution()"
    ],
    "293fd7b7273c4a2985a35719002a4df3": [
        "def solution():\n    return 43 * 16\n\nans = solution()"
    ],
    "bb8774542eff44078c1080ee1b832fa5": [
        "def solution():\n    from math import factorial\n\n    # 5 people picking 5 different colored skiboards is a permutation problem\n    # Since there are 5 skiboards and each person must pick a different one,\n    # it is the same as arranging 5 distinct objects in 5 spots.\n    # The number of permutations is given by 5! (5 factorial)\n\n    ans = factorial(5)\n    return ans\n\nans = solution()"
    ],
    "faa1d07aa4874b9ba6f33ab3636209e1": [
        "def solution():\n    original_price = 7.20\n    new_price = 8.10\n    increase = new_price - original_price\n    percentage_increase = (increase / original_price) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "35f8d27cbb554601999e2b7fe17736e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let total_pieces represent the total number of pieces in the jigsaw\n    total_pieces = symbols('total_pieces')\n\n    # On the first day, Tim fits 20% of the total pieces\n    first_day_pieces = 0.20 * total_pieces\n\n    # On the second day, he fits 60 pieces\n    second_day_pieces = 60\n\n    # After the second day, the number of fitted pieces is 20% of total plus 60\n    fitted_pieces = first_day_pieces + second_day_pieces\n\n    # The ratio of fitted to unfitted is 2 to 5, hence unfitted is (total_pieces - fitted_pieces)\n    # Equation becomes fitted_pieces / (total_pieces - fitted_pieces) = 2 / 5\n\n    equation = Eq(fitted_pieces / (total_pieces - fitted_pieces), 2 / 5)\n\n    # Solve the equation to find the total number of pieces\n    solution = solve(equation, total_pieces)\n\n    return solution[0]\n\nans = solution()"
    ],
    "675eadedaada48a9974ff5a0fa4e1f98": [
        "def solution():\n    total_children = 26\n    henry_position = 18\n    tony_position_from_right = 17\n\n    tony_position_from_left = total_children - tony_position_from_right + 1\n    children_between_henry_tony = abs(henry_position - tony_position_from_left)\n\n    return children_between_henry_tony + 1\n\nans = solution()"
    ],
    "88eda4595d1348ee82e97a6c5620dcdc": [
        "def solution():\n    millimetres_in_a_metre = 1000\n    metres = 2\n    ans = metres * millimetres_in_a_metre\n    return ans\n\nans = solution()"
    ],
    "8f0c9f7a6b3b4934bbef8a5ff5370595": [
        "def solution():\n    total_integers = 100\n    multiples_of_10 = total_integers // 10\n\n    integers_not_multiples_of_10 = total_integers - multiples_of_10\n    percentage = (integers_not_multiples_of_10 / total_integers) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "eccd3a25ed1441c68e1a0cbcad3fe748": [
        "def solution():\n    amount_borrowed = 4\n    paid_back = amount_borrowed * 0.30\n    amount_owed = amount_borrowed - paid_back\n\n    return amount_owed\n\nans = solution()"
    ],
    "6f694af3c9bd48f386b3503a12b5964d": [
        "def solution():\n    legs_from_cats = 2 * 4\n    legs_from_dogs = 2 * 4\n    legs_from_rabbit = 1 * 4\n\n    legs_from_birds = 28 - (legs_from_cats + legs_from_dogs + legs_from_rabbit)\n\n    number_of_birds = legs_from_birds // 2\n    \n    return number_of_birds\n\nans = solution()"
    ],
    "4d9b648aa31444f0a8961689da036596": [
        "def solution():\n    jack_speed = 15  # Jack's speed in km/hour\n    rose_speed = 10  # Rose's speed in km/hour\n    meeting_time = 10  # Time they meet in hours\n    \n    total_distance = (jack_speed + rose_speed) * meeting_time\n    return total_distance\n\nans = solution()"
    ],
    "d74f00b435ac4576a44ffbd313804476": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12 * (x - 1), 36)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "6c4a0c8fddc0483ca389ad988e693de1": [
        "def solution():\n    melvin_original = 40\n    melvin_gained = (5/8) * melvin_original\n    melvin_after_gain = melvin_original + melvin_gained\n\n    melvin_lost_each = (1/4) * melvin_original\n    melvin_after_first_loss = melvin_after_gain - melvin_lost_each\n    nelson_after_first_loss = melvin_lost_each \n\n    melvin_gained_final = (1/8) * melvin_original\n    melvin_final = melvin_after_first_loss + melvin_gained_final\n\n    nelson_final = nelson_after_first_loss - melvin_gained_final\n    oliver_final = melvin_lost_each * 2\n\n    total_initial_cards = melvin_final * 3\n    \n    return total_initial_cards\n\nans = solution()"
    ],
    "b7eac049934747d7b62bda3fbaa5bc8d": [
        "def solution():\n    from itertools import combinations\n    from math import prod\n\n    cards = [6, 12, 35, 175, 245, 300]\n    for combo_2 in combinations(cards, 2):\n        product_2 = prod(combo_2)\n        for combo_3 in combinations(cards, 3):\n            if combo_2 != combo_3 and prod(combo_3) == product_2:\n                return list(set(cards) - set(combo_2) - set(combo_3))[0]\n\nans = solution()"
    ],
    "75a97b3cb75d416aaa38e4b494bb534c": [
        "def solution():\n    num = 24\n    odd_factors_sum = sum(i for i in range(1, num + 1, 2) if num % i == 0)\n    return odd_factors_sum\n\nans = solution()"
    ],
    "d41691029c33461e96ef95148a5eba13": [
        "def solution():\n    polly_age = 20\n    child1_age = 0\n    age_diff = 2\n    while True:\n        sum_children_age = child1_age + (child1_age - age_diff) + (child1_age - 2 * age_diff)\n        if polly_age == sum_children_age:\n            break\n        polly_age += 1\n        child1_age += 1\n        \n    return polly_age\n\nans = solution()"
    ],
    "e3e8c1bb5e4a47f285f57b642b489dbf": [
        "def solution():\n    first_term = 2\n    last_term = 100\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    ans = num_terms * (first_term + last_term) // 2\n\n    return ans\n\nans = solution()"
    ],
    "2c263a2cb715471786756a60d709dd70": [
        "def solution():\n    part1 = 2 * 5\n    part2 = 1 * 5\n    addition = part1 + part2\n    multiplication = (2 + 1) * 5\n    \n    ans = (addition, multiplication)\n    return ans\n\nans = solution()"
    ],
    "59093ee3ace74e00af6550aaa30da949": [
        "def solution():\n    initial_sweets = 12\n    additional_sweets = 7\n    total_sweets = initial_sweets + additional_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "14c4144f0869404aa3f5ee8c1fd30121": [
        "def solution():\n    total_weight = 20\n    multiplier = 5\n\n    suitcase_weight_without_presents = total_weight / multiplier\n\n    return suitcase_weight_without_presents\n\nans = solution()"
    ],
    "2f7745024468479cbef4990d93752c41": [
        "def solution():\n    for big_boxes in range(10):\n        small_boxes = (50 - 6 * big_boxes) / 4\n        if small_boxes.is_integer() and small_boxes + big_boxes < 10:\n            return big_boxes\n\nans = solution()"
    ],
    "9119ad36d763494589f8442ace3a3ec0": [
        "def solution():\n    combined_age_4_years_ago = 10  # Combined age of the 2 dogs four years ago\n    years_since_then = 4  # Number of years since four years ago\n    years_ahead = 2  # Number of years in the future\n\n    # Each dog ages one year for each year that passes, so we have two dogs aging together\n    # 4 years have passed since they were 10 years combined, plus 2 more years into the future\n    additional_years = years_since_then + years_ahead  # Total additional years for two dogs\n    combined_future_age = combined_age_4_years_ago + 2 * additional_years  # Combined future age\n\n    return combined_future_age\n\nans = solution()"
    ],
    "f0344902bde148c3ab13297920aace4a": [
        "def solution():\n    # Let the two numbers be x and y, with x being the smaller number.\n    # According to the problem, we have two equations:\n    # x - y = -39 (since x is the smaller number)\n    # x + y = 59\n    # Solving these two equations simultaneously gives us the values of x and y.\n\n    # Add the two equations to eliminate y:\n    # 2x = 59 - 39\n    # 2x = 20\n    # x = 20 / 2\n    # x = 10\n    x = (59 - 39) / 2\n\n    return x\n\nans = solution()"
    ],
    "1a06f46e2821453599d11045a0a00ca2": [
        "def solution():\n    ans = 5 * 4 + 6 * 8\n    return ans\n\nans = solution()"
    ],
    "daa74d1025eb4e84bac18f7f987c4c5b": [
        "def solution():\n    richard_age = 12\n    adam_age = 2 * richard_age\n    will_age = (2/3) * adam_age\n    total_age = richard_age + adam_age + will_age\n    return total_age\n\nans = solution()"
    ],
    "50c1187bcefc42f782b81876db5c9b43": [
        "def solution():\n    for m in range(1, 10):  # Loop through all possible values of m since it is a single digit\n        if 14*m == 8*(10 + m) - 3:\n            return m  # Return the value of m that satisfies the equation\n\nans = solution()"
    ],
    "201413f1d95843569dc578e3191479b4": [
        "def solution():\n    # Prime factorization of the given products\n    A_times_B = 30  # Prime factors: 2, 3, 5\n    B_times_C = 35  # Prime factors: 5, 7\n    C_times_A = 42  # Prime factors: 2, 3, 7\n\n    # To find A, B, C, we can find the greatest common divisors\n    # GCD(A*B, B*C) will give us B\n    # GCD(B*C, C*A) will give us C\n    # GCD(C*A, A*B) will give us A\n\n    B = math.gcd(A_times_B, B_times_C)\n    C = math.gcd(B_times_C, C_times_A)\n    A = math.gcd(C_times_A, A_times_B)\n\n    return A + B + C\n\nimport math\nans = solution()"
    ],
    "0220f39d28a1457ab882171d36b85267": [
        "def solution(x, y):\n    passengers_after_stop = x - 12 + y\n    return passengers_after_stop\n\n# Example usage:\n# ans = solution(x=20, y=5) would return 13"
    ],
    "d0dda40eb81841348c13c9c91a33a12b": [
        "def solution():\n    percentage = 15 / 100\n    total_amount = 340\n    amount = percentage * total_amount\n    return amount\n\nans = solution()"
    ],
    "af73e4b5208646ebada742ac2fe92ee4": [
        "def solution():\n    justin_age_now = 8\n    mother_age_now = 32\n    \n    years = symbols('years')\n    # Equation: Mother's future age = 3 * Justin's future age\n    equation = Eq(mother_age_now + years, 3 * (justin_age_now + years))\n    ans = solve(equation, years)[0]\n    \n    return ans\n\nans = solution()"
    ],
    "53956386ba3c4b4c950b6dca01045afc": [
        "def solution():\n    return 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1\n\nans = solution()"
    ],
    "6ce557a6c8f5454c8bfd60bf19896563": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's assume Cora has x sweets and Qingle has y sweets\n    cora, qingle = symbols('cora qingle')\n\n    # If Cora gives Qingle 8 sweets, Cora will have x-8 sweets and Qingle y+8 sweets\n    # Qingle will have 4 more sweets than Cora after giving: y+8 = (x-8) + 4 => y = x - 12\n    equation1 = Eq(qingle + 8, cora - 8 + 4)\n\n    # We solve the equation to find the difference in the number of sweets they have at first\n    solutions = solve((equation1), (cora, qingle))\n\n    # The difference in number of sweets they have at first is y - (x - 8) or (solutions[qingle]) - (solutions[cora] - 8)\n    difference = solutions[qingle] - (solutions[cora] - 8)\n\n    return difference\n\nans = solution()"
    ],
    "b2f4e1c67fb348e19f5fc8792ed237cb": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define the variables for a, b, c as symbols\n    a, b, c = symbols('a b c', integer=True)\n\n    # Set up the equation according to given mathematical expression\n    equation = Eq((100 * a + 10 * b + c) * (a + b + c), 1926)\n\n    # Find all possible solutions for this equation\n    solutions = solve(equation, (a, b, c))\n\n    # Go through the solutions to find the one that consists of whole numbers only\n    for sol in solutions:\n        if all(x.is_integer and x >= 0 for x in sol):\n            total = sum(sol)\n            return total\n\nans = solution()"
    ],
    "18a547d69f104e56ae2814a05d14aaec": [
        "def solution():\n    # Since the line passes through the origin (0,0), b must be 0.\n    # Using point (4,8) to calculate the slope m\n    m = 8 / 4  # change in y divided by change in x\n    # The linear equation is y = mx + b, with b = 0\n    # Thus, the equation becomes y = mx\n    return f\"y = {m}x\"\n\nans = solution()"
    ],
    "8687c8d26bc84869836e90d4f5fc68a9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let j be the number of seashells Jane originally has\n    # Let e be the number of seashells Eric originally has\n    j, e = symbols('j e')\n\n    # Jane has 5 seashells for every 7 seashells Eric has\n    equation1 = Eq(j, 5/7 * e)\n\n    # If Eric gives Jane 6 seashells, the ratio becomes 11:13\n    # (j + 6)/(e - 6) = 11/13\n    equation2 = Eq((j + 6) / (e - 6), 11/13)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (j, e))\n\n    # calculate the total number of seashells they have together\n    total_seashells = solutions[j] + solutions[e]\n\n    return total_seashells\n\nans = solution()"
    ],
    "b4a6a6d3563d489c96fe7593170152df": [
        "def solution():\n    largest_number = 0\n    current_number = 0\n    add_value = 20\n    subtract_value = 1\n    \n    while add_value > 0:\n        current_number += add_value\n        largest_number = max(largest_number, current_number)\n        \n        current_number -= subtract_value\n        \n        add_value -= 1\n        subtract_value += 1\n    \n    return largest_number\n\nans = solution()"
    ],
    "a46723e46cfb4bedb4d7b603e4267646": [
        "def solution():\n    first_faucet_rate = 1 / 20\n    other_faucet_rate = 3 * first_faucet_rate\n    \n    total_rate = first_faucet_rate + 3 * other_faucet_rate\n    \n    time_to_fill = 1 / total_rate\n    \n    return time_to_fill\n\nans = solution()"
    ],
    "2ef6d5e475ed4057b993f02bafa8ea83": [
        "def solution():\n    factors_of_10 = 2 * 5 # a zero is formed by the multiplication of 2 and 5\n    prime_2 = 0 # to count the number of 2s in the prime factorization\n    prime_5 = 0 # to count the number of 5s in the prime factorization\n\n    numbers = [48, 925, 38, 435]\n    for num in numbers:\n        # count the number of 5s\n        while num % 5 == 0:\n            prime_5 += 1\n            num = num // 5\n        # count the number of 2s\n        while num % 2 == 0:\n            prime_2 += 1\n            num = num // 2\n            \n    ans = min(prime_2, prime_5) # the number of 0s is limited by the smaller of the counts of 2s and 5s\n    return ans\n\nans = solution()"
    ],
    "ef6a6b59f128499ab1b4a2073ffa3a22": [
        "def solution():\n    total_pupils = 180\n    piano_players = 52\n    violin_players = 38\n    piano_and_violin = piano_players // 4\n    \n    neither_play = total_pupils - (piano_players + violin_players - piano_and_violin)\n    \n    return neither_play\n\nans = solution()"
    ],
    "4d4d648041e64f4f8fbcae12529f4d91": [
        "def solution():\n    principal = 20000\n    rate_of_interest = 0.05\n    time_period = 11\n\n    total_amount = principal * (1 + rate_of_interest * time_period)\n\n    return total_amount\n\nans = solution()"
    ],
    "326c55e1dbe34a55b42d8f2355c0d688": [
        "def solution():\n    ans = 7 # There are 7 days in a week\n    return ans\n\nans = solution()"
    ],
    "b38ea6a5211742ffb6b17515774d525f": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)\n    original_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(original_passengers)\n\nans = solution()"
    ],
    "4c36fb915f3b494faaabab2d3b6937ff": [
        "def solution():\n    import math\n\n    total_area = (2 * 2) / 2\n    quarter_circle_radius = 1\n    quarter_circle_area = math.pi * (quarter_circle_radius ** 2) / 4\n\n    prob = quarter_circle_area / total_area\n\n    return prob\n\nans = solution()"
    ],
    "a0bc9ddd90c8400ea4cf8347a9020791": [
        "def solution():\n    for A in range(1, 10):\n        for D in range(1, 10):\n            if A == D * 1/4:\n                for B in range(1, 10):\n                    if B == A - 1:\n                        for C in range(1, 10):\n                            if A != B and A != C and A != D and \\\n                               B != C and B != D and \\\n                               C != D and \\\n                               4 * (1000 * A + 100 * B + 10 * C + D) == \\\n                                  (1000 * D + 100 * C + 10 * B + A):\n                                return 1000 * A + 100 * B + 10 * C + D\nans = solution()"
    ],
    "5787ee72c4d04dc79a6fef83e42a30f8": [
        "def solution():\n    math_A = 10\n    english_A = 15\n    both_A = 2\n\n    either_A = math_A + english_A - both_A\n\n    return either_A\n\nans = solution()"
    ],
    "61d2be77a64146af8827b79a42a801d8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    time_left_school = datetime.strptime(\"15:22\", \"%H:%M\")\n    time_bus_caught = datetime.strptime(\"16:01\", \"%H:%M\")\n    time_bus_trip = timedelta(minutes=18)\n    time_got_home = datetime.strptime(\"16:35\", \"%H:%M\")\n\n    time_spent_walking_to_bus = time_bus_caught - time_left_school\n    time_spent_walking_home = time_got_home - (time_bus_caught + time_bus_trip)\n    \n    total_walking_time = time_spent_walking_to_bus + time_spent_walking_home\n    total_walking_minutes = total_walking_time.total_seconds() // 60\n    \n    return total_walking_minutes\n\nans = solution()"
    ],
    "6dc2dadd3a6147068fc0bfdae746ed45": [
        "def solution():\n    count = 0\n    for num in range(100, 201):\n        if str(num) == str(num)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "9494b45a03aa47d3b840f6416268ac67": [
        "from itertools import permutations\n\ndef solution():\n    digits = [5, 3, 9, 4, 8]\n    even_permutations = [int(\"\".join(map(str, perm))) for perm in permutations(digits) if perm[-1] % 2 == 0]\n    return min(even_permutations)\n\nans = solution()"
    ],
    "730f25d6c1bc4e37a31dd815615af70b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x / 3 + 10, 25)\n    original_number = solve(equation, x)\n\n    return original_number[0]\n\nans = solution()"
    ],
    "1dbda155390140e09242722fa7ec4c1f": [
        "def solution():\n    n = 8  # last number in the sequence\n    ans = n * (n + 1) // 2  # sum of first n natural numbers\n    return ans\n\nans = solution()"
    ],
    "6877d33364b24d4982c45c4a93293a57": [
        "def solution():\n    numbers = [2, 3, 8, 4, 7, 6]\n    total_numbers = len(numbers) + 1  # +1 for the unknown 'a'\n    mean = 5\n    # Calculate the sum of all numbers\n    total_sum = mean * total_numbers\n    # deduce the sum of the known numbers to find 'a'\n    sum_known = sum(numbers)\n    a = total_sum - sum_known\n    return a\n\nans = solution()"
    ],
    "2d27041da5e747b9b4c4949e40cd5d6a": [
        "def solution():\n    # Given equation: 2030452 = 2*□ + 30000 + 452\n    # Rearrange the equation to solve for □\n    ans = (2030452 - 30000 - 452) // 2\n    return ans\n\nans = solution()"
    ],
    "586e5da41dc343e286f5bdb9a9aab06c": [
        "def solution():\n    total = 8880\n    percentage = 20 / 100\n    ans = total * percentage\n    return ans\n\nans = solution()"
    ],
    "d992065f5fdb49bdb385a59fc97cf3bb": [
        "def solution():\n    ribbon_length_cm = 150\n    # Cut the ribbon in half\n    piece_length_cm = ribbon_length_cm / 2\n    # Convert the length from cm to meters\n    piece_length_m = piece_length_cm / 100\n    return piece_length_m\n\nans = solution()"
    ],
    "5ea6d9da123442c4a8d28b5ba3fe74e5": [
        "def solution():\n    # Calculation based on Pigeonhole Principle\n    # Worst case scenario is getting no pair in first picks.\n    # Lina must take one of each color first.\n    # With 3 colors, at least 3 socks needed to ensure no pair (all different colors).\n    # The next one, the 4th sock, must create a pair regardless of its color.\n    \n    # Therefore, Lina must take out at least 4 socks to ensure a pair.\n    min_socks_to_ensure_pair = 4\n    is_lina_correct = min_socks_to_ensure_pair == 3  # Lina's original guess\n    \n    return (is_lina_correct, min_socks_to_ensure_pair)\n\nans = solution()"
    ],
    "3ef61299b7c4476884b4646603c76fc5": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "94696a1a3ade4f6a85f0aaa9c64215ae": [
        "def solution():\n    pupils_per_row = 6 + 1 + 7  # Pupils to left, Victoria, pupils to right\n    rows = 1 + 1 + 8  # Rows in front, Victoria's row, rows behind\n    \n    total_pupils = pupils_per_row * rows\n    \n    return total_pupils\n\nans = solution()"
    ],
    "8b5b06b976f0457fb05ae92796e950c6": [
        "def solution():\n    total_marks_for_3_tests = 75 * 3\n    marks_in_the_remaining_test = total_marks_for_3_tests - 172\n    return marks_in_the_remaining_test\n\nans = solution()"
    ],
    "6246bd4ec6524aff80623b6953875e8b": [
        "def solution():\n    principal = 400000\n    interest_rate = 1.2 / 100\n    time = 1\n    interest = principal * interest_rate * time\n    return interest\n\nans = solution()"
    ],
    "743969de5e9d4dda93e740107239e799": [
        "def solution():\n    ans = 452 - 191\n    return ans\n\nans = solution()"
    ],
    "3378ca3dc79a44d9b8d60a873b97d5c7": [
        "def solution():\n    # Calculate the numerator\n    numerator_sum = sum(1/(i*(i+1)) for i in range(1, 20, 2))\n\n    # Calculate the denominator\n    denominator_sum = sum(1/(11+i)*(20-i) for i in range(0, 5))\n\n    # Find the answer\n    ans = numerator_sum / denominator_sum\n\n    return ans\n\nans = solution()"
    ],
    "64b7530c3fcd4d98840ab7e499004ae8": [
        "def solution():\n    distance_covered = 6300 - 1800\n    time_elapsed = 30  # minutes from 8.00 am to 8.30 am\n\n    # Calculate the speed (distance per minute)\n    speed = distance_covered / time_elapsed\n\n    # Distance left to cover at 8.30 am\n    distance_left = 1800\n\n    # Time required to cover the remaining distance at the calculated speed\n    time_required = distance_left / speed\n\n    # Add this time to 8.30 am to find the time he reached\n    arrival_time_minutes = 8 * 60 + 30 + time_required   # Convert 8.30 am to minutes and add the time required\n\n    # Convert minutes back into hours and minutes\n    arrival_hour = int(arrival_time_minutes // 60)\n    arrival_minute = int(arrival_time_minutes % 60)\n\n    # Since the question likely assumes the time format in hours and minutes,\n    # we'll construct a string representing the time he arrived.\n    arrival_time = f\"{arrival_hour:02d}:{arrival_minute:02d}\"\n\n    return arrival_time\n\nans = solution()"
    ],
    "5521675555dc4d9a8af13086a54334e6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the unknown percentage of sugar in Mrs. Smith's 300 mL drink\n    x = symbols('x')\n\n    # Mr. Smith's mixture\n    mr_smith_sugar = 0.50 * 300 + 0.20 * 600\n\n    # Mrs. Smith's mixture\n    mrs_smith_sugar = 0.10 * 700 + 0.01 * x * 300\n\n    # The total volume of each mixture\n    mr_smith_total_volume = 300 + 600\n    mrs_smith_total_volume = 700 + 300\n\n    # Set up the equation: Each final drink has the same percentage of sugar\n    equation = Eq(mr_smith_sugar / mr_smith_total_volume, mrs_smith_sugar / mrs_smith_total_volume)\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    # Return the result rounded to two decimal places\n    return round(solution[0], 2)\n\nans = solution()"
    ],
    "eb5c3a8d80624ac095e1421ab5bf8025": [
        "def solution():\n    x = (17 - 2) / 5\n    return x\n\nans = solution()"
    ],
    "207d21f7872b44c39bcd6ee8534d8b32": [
        "def solution():\n    total_candy = 36\n    given_to_lily = total_candy * (3/4)\n    remaining_after_lily = total_candy - given_to_lily\n    given_to_brother = remaining_after_lily * (1/3)\n    remaining_candy = remaining_after_lily - given_to_brother\n    \n    return remaining_candy\n\nans = solution()"
    ],
    "fa946bf107f84b9d9749b1c8b96288fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    may_age_when_10 = 10\n    kenny, brother = symbols('kenny brother')\n\n    # When May is 10, sum of Kenny and his brother's ages is 3 times May's age\n    equation1 = Eq(kenny + brother, 3 * may_age_when_10)\n    # Kenny is 2 years older than his younger brother\n    equation2 = Eq(kenny, brother + 2)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (kenny, brother))\n\n    # May's current age is 7, find the difference between Kenny's age now and May's age\n    kenny_current_age = solutions[kenny] - (may_age_when_10 - 7)\n    may_current_age = 7\n    \n    # Calculate the age difference between Kenny and May\n    age_difference = kenny_current_age - may_current_age\n    \n    return age_difference\n\nans = solution()"
    ],
    "02842e44d6784d8ea8f173ee23a5edf6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the amount of money Amy had at first be x.\n    x = symbols('x')\n\n    # She spent x/2 on donuts, \n    # Each donut costs $10/7, so she bought (x/2) * (7/10) donuts.\n    # She spent the other x/2 on muffins,\n    # Each muffin costs $6/3 = $2, so she bought (x/2) * (1/2) muffins.\n    # She bought 54 more donuts than muffins.\n\n    # Setting up the equations\n    # Number of donuts - Number of muffins = 54\n    equation = Eq((x/2) * (7/10) - (x/2) * (1/2), 54)\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "49c2deec1cbb44739a83382de18766c5": [
        "def solution():\n    pancakes_per_minute = 2\n    time = 12\n\n    total_pancakes = pancakes_per_minute * time\n\n    return total_pancakes\n\nans = solution()"
    ],
    "46e11702823f49719758ac932f77acbe": [
        "def solution():\n    cost_price = 10  # cost price in pounds\n    sell_price_per_bag = 0.65  # sell price per bag in pounds\n    weight_per_bag_in_kg = 0.25  # weight per bag in kg\n\n    # Total number of bags\n    total_bags = 5 / weight_per_bag_in_kg\n\n    # Total sell price for all the bags\n    total_sell_price = total_bags * sell_price_per_bag\n\n    # Profit\n    profit = total_sell_price - cost_price\n\n    # Percentage profit\n    percentage_profit = (profit / cost_price) * 100\n\n    return percentage_profit\n\nans = solution()"
    ],
    "34a7fe65f21049408fe7d74314f392a8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # x is the unknown number we are looking for\n    x = symbols('x')\n    equation = Eq((9*(x + 3))/4, 81)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "98264c90c4f44945a18baa5c270fa929": [
        "def solution():\n    total_apples = 14\n    children = 5\n    min_apples = 1 # Each child should get at least one apple\n\n    remaining_apples = total_apples - (children * min_apples)\n    max_apples_for_one = remaining_apples + min_apples\n\n    return max_apples_for_one\n\nans = solution()"
    ],
    "e97c46c875534340a3de7f73e01112a9": [
        "def solution():\n    # There are 5 gaps between the 4th and the 9th teeth\n    gap_count = 9 - 4\n    # Distance between the 4th and the 9th teeth is 30 mm\n    total_distance_mm = 30\n    # One gap distance in mm\n    gap_distance_mm = total_distance_mm / gap_count\n    # There are 99 gaps in total for 100 teeth (as gaps are one less than teeth count)\n    total_comb_length_mm = gap_distance_mm * (100 - 1)\n    # Convert the length from mm to cm\n    total_comb_length_cm = total_comb_length_mm / 10\n    return total_comb_length_cm\n\nans = solution()"
    ],
    "d8d809f89a7b4ed380c0e0f2a53b344a": [
        "def solution():\n    total = 46563 + 9785 + 859\n    return total\n\nans = solution()"
    ],
    "93c6119a0fb64233a3a47cabdebb6ab5": [
        "from math import factorial\n\ndef solution():\n    total_ways = factorial(5)\n    together_ways = factorial(4) * 2  # The two who refuse to stand next to each other are considered a single entity, and there's a factorial(2) ways to arrange them among themselves.\n    return total_ways - together_ways\n\nans = solution()"
    ],
    "3acaa5a4f1c749c2a12dac032c35167c": [
        "def solution():\n    # Since each person must get at least one ice-cream cone,\n    # we can first give each one ice-cream cone.\n    remaining_cones = 5 - 3\n\n    # Now the problem is how to distribute the remaining 2 identical cones to 3 friends.\n    # This is an example of a partitioning problem and can be solved by using\n    # the formula for combinations with repetitions (also known as stars and bars).\n    # The formula for combinations with repetitions is:\n    #   C(n + k - 1, k) where n is the number of items to choose from,\n    #   here remaining cones, which is 2 and k is the number of items to choose, here 3 - 1\n    #   because we have to choose places for \"bars\" that separate groups of \"stars\".\n\n    from math import comb\n\n    # Applying the combinations with repetitions formula\n    ans = comb(remaining_cones + 3 - 1, 3 - 1)\n    return ans\n\nans = solution()"
    ],
    "9473695aa8e7449bb892566a91379acd": [
        "def solution():\n    # grandmother's age in 2008\n    grandmother_age_2008 = 80\n    # mum's age in 1996\n    mum_age_1996 = 40\n    # age difference between the grandmother and mum\n    age_difference = grandmother_age_2008 - mum_age_1996\n    \n    # mum was 25 years old\n    mum_age_target = 25\n    # grandmother's age when mum was 25\n    grandmother_age_when_mum_25 = mum_age_target + age_difference\n\n    return grandmother_age_when_mum_25\n\nans = solution()"
    ],
    "56e4adc68056477b9e25d947d40d0245": [
        "def solution():\n    total_vegetables = 60\n    monday_vegetables = 2 / 3 * total_vegetables\n    remaining_after_monday = total_vegetables - monday_vegetables\n    tuesday_vegetables = 2 / 5 * remaining_after_monday\n    sold_monday_tuesday = monday_vegetables + tuesday_vegetables\n    return sold_monday_tuesday\n\nans = solution()"
    ],
    "91f7c2d158094aecab623a3dd7d51aae": [
        "def solution():\n    # To guarantee we get 16 balls of one color and 13 balls of another color,\n    # we want to consider the worst case scenario using the pigeonhole principle.\n    \n    # The worst case would be picking 15 balls of each color first without\n    # achieving 16 of any single color. This would be 5 colors times 15 balls each:\n    worst_case_same_color = 5 * 15\n    \n    # Now, to ensure we have 16 of one color, we pick one more ball:\n    worst_case_same_color += 1\n    \n    # The worst case for the second condition (13 balls of another color) would be\n    # picking 12 balls of each of the four remaining colors:\n    worst_case_second_color = 4 * 12\n    \n    # Then, we pick one more ball to make sure we have 13 of the second color:\n    worst_case_second_color += 1\n\n    # Summing them up will give us the minimum number of balls required according to the\n    # worst case scenario:\n    total_balls = worst_case_same_color + worst_case_second_color\n\n    return total_balls\n\nans = solution()"
    ],
    "565d75f4184c40158e38b62f8b7a8e56": [
        "def solution():\n    ans = 26.1 / 10000\n    return ans\n\nans = solution()"
    ],
    "fd6c4c01349c419f8b677eaff8345ce3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    P, Q = symbols('P Q')\n    \n    equation1 = Eq(P, 4 * Q)\n    equation2 = Eq(P - Q, 2700)\n    \n    solutions = solve((equation1, equation2), (P, Q))\n    \n    return solutions[Q]\n\nans = solution()"
    ],
    "2b2a2e587ee14b41a501ab4265950264": [
        "def solution():\n    total_biscuits = 12\n    given_to_sister = total_biscuits * 0.25\n    left_for_freddie = total_biscuits - given_to_sister\n\n    return int(left_for_freddie)\n\nans = solution()"
    ],
    "1b10af37f10e4e378350822821ccd0e2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the equations\n    A, B, C = symbols('A B C')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(C + B, 18)\n    equation2 = Eq(B, A + A + A)\n    equation3 = Eq(C + A, 10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    # Get the value of B\n    B_value = solutions[B]\n\n    return B_value\n\nans = solution()"
    ],
    "f959c9aa94cb4444a05fed72622f9203": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    table, chair = symbols('table chair')\n    \n    equation1 = Eq(2 * table + 5 * chair, 220)\n    equation2 = Eq(table, 3 * chair)\n    \n    solutions = solve((equation1, equation2), (table, chair))\n    \n    return solutions[table]\n\nans = solution()"
    ],
    "fdf01e833d7c4f0a82c64b43a8d356df": [
        "def solution():\n    numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 29]\n    total_sum = sum(numbers)\n    return total_sum\n\nans = solution()"
    ],
    "23deca2dec7341899b3bd1e49078449d": [
        "def solution():\n    spent = 1.55 + 2.25\n    remaining_fraction = 4/5\n    original_money = spent / (1 - remaining_fraction)\n    return original_money\n\nans = solution()"
    ],
    "cf14830fc6664a70a173fbe0ffbab834": [
        "def solution():\n    principal = 4000\n    rate = 3.81 / 100\n    time = 5\n\n    amount = principal * (1 + rate * time)\n    \n    return amount\n\nans = solution()"
    ],
    "fba9a6dc71794e82967fc086a3bcc09b": [
        "def solution():\n    percentage = 40\n    whole = 75\n    result = (percentage / 100.0) * whole\n    return result\n\nans = solution()"
    ],
    "f83284a837da4e2fb26549abab697c91": [
        "def solution():\n    hook_walk_time = 20\n    lily_walk_time = hook_walk_time - 5\n    return lily_walk_time\n\nans = solution()"
    ],
    "ffd358a18901488c82211c659492c7a0": [
        "def solution():\n    ans = (125 + 75) * (630 - 616)\n    return ans\n\nans = solution()"
    ],
    "608176c2f8294c308bc2eb16e490831d": [
        "def solution():\n    # Joann's coins\n    joann_coins = 3\n    # Sana's coins\n    sana_coins = 6\n    # Nancy's coins\n    nancy_coins = 8\n\n    # Total coins\n    total_coins = joann_coins + sana_coins + nancy_coins\n\n    return total_coins\n\nans = solution()"
    ],
    "43898b2ed2594f919d1a1e91a9899bc8": [
        "def solution():\n    total_distance = 20\n    remaining_distance = 4\n    ratio_lucas_speed = 3\n    ratio_mother_speed = 5\n\n    ratio_total = ratio_lucas_speed + ratio_mother_speed\n    distance_walked_by_lucas = (ratio_lucas_speed / ratio_total) * (total_distance - remaining_distance)\n\n    return distance_walked_by_lucas\n\nans = solution()"
    ],
    "8c2140926a504b439da436bc045ac3fb": [
        "def solution():\n    sum_positive = sum(range(5, 856, 10))\n    sum_negative = sum(range(10, 851, 10))\n    ans = sum_positive - sum_negative\n    return ans\n\nans = solution()"
    ],
    "9554ef69c62a485194537701b7cbafe1": [
        "def solution():\n    first_term = 50\n    difference = -1\n    num_terms = 30\n\n    # Sum of an arithmetic sequence: n/2 * (first_term + last_term)\n    last_term = first_term + (num_terms - 1) * difference\n    sum_of_terms = num_terms / 2 * (first_term + last_term)\n\n    return int(sum_of_terms)\n\nans = solution()"
    ],
    "59500938d9aa429c963148ba7e8054ea": [
        "def solution():\n    people_initial = 30\n    pizzas_initial = 12\n    people_final = 35\n    \n    pizzas_per_person = pizzas_initial / people_initial\n    required_pizzas = pizzas_per_person * people_final\n    \n    return round(required_pizzas)\n\nans = solution()"
    ],
    "c28579adfb0e4c66af894392fda2aa03": [
        "def solution():\n    import math\n    num_teams = 16\n    num_rounds = math.log(num_teams, 2)\n    return int(num_rounds)\n\nans = solution()"
    ],
    "16eb3c5479c84e7488205bd06c552370": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Marion, Julie, and Ethan's earnings\n    marion, julie, ethan = symbols('marion julie ethan')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(marion, 2 * julie)\n    equation2 = Eq(ethan, 5 * julie)\n    equation3 = Eq(ethan - marion, 168)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (marion, julie, ethan))\n\n    # Calculate the total earnings\n    total_earnings = solutions[marion] + solutions[julie] + solutions[ethan]\n\n    return total_earnings\n\nans = solution()"
    ],
    "501a0a55ecd341dc996261f472d570c8": [
        "def solution():\n    return 21 * 5\n\nans = solution()"
    ],
    "496c9d2a7f38418389c85a6060857948": [
        "def solution():\n    # Define variables\n    big_class_apples = 2\n    big_class_oranges = 3\n    small_class_apples = 2\n    small_class_oranges = 2\n    \n    # Total fruits given out\n    total_apples = 48\n    total_oranges = 55\n    \n    # Assume all students are in small class to find the difference in oranges\n    total_students = total_apples // small_class_apples\n    extra_oranges = total_students * small_class_oranges - total_oranges\n    \n    # Calculate the number of big class students based on the difference in oranges\n    big_class_students = extra_oranges // (big_class_oranges - small_class_oranges)\n    \n    # Remaining students are in small class\n    small_class_students = total_students - big_class_students\n    \n    return small_class_students\n\nans = solution()"
    ],
    "98fccede682543abb0a7e6ce6c0a6e69": [
        "def solution():\n    import math\n\n    count = 0\n    for i in range(1, 2017):\n        if math.sqrt(i * 72).is_integer():\n            count += 1\n    return count\n\nans = solution()"
    ],
    "aebe8c69595b46bf9a87e30c9324afe4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wands, cards = symbols('wands cards')\n    equation1 = Eq(wands + cards, 69)\n    equation2 = Eq(wands, cards + 17)\n\n    solutions = solve((equation1, equation2), (wands, cards))\n\n    return solutions[wands]\n\nans = solution()"
    ],
    "3fc92a68dae34f66b6cd792e86640204": [
        "def solution():\n    cost_per_lollipop = 5\n    num_lollipops = 10\n    total_cost = cost_per_lollipop * num_lollipops\n    return total_cost\n\nans = solution()"
    ],
    "f44c4462b0f64bab846629402568bf16": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    # Let danny's age = d and efron's age = e\n    # d = e + 30\n    # d/e = 8/3, then 3d = 8e => d = 8e/3\n    # (d+x)/(e+x) = 5/3\n    # 3(d+x) = 5(e+x)\n    \n    # equations\n    d_eq_e = Eq(8/3, 8/3)\n    ratio_later = Eq(3 * (8/3*x + x), 5 * (3/3*x + x))\n\n    # solve the system of equations\n    solution = solve((d_eq_e, ratio_later), x)\n    \n    return solution[x]\n\nans = solution()"
    ],
    "71f696cfd5a84b80996ceb9957f484a3": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The given problem can be modeled by these congruences:\n    # x ≡ 0 (mod 5) -- no one sat out in groups of 5\n    # x ≡ 6 (mod 7) -- one sat out in groups of 7 (7 - 1 = 6)\n    # x ≡ 7 (mod 8) -- one sat out in groups of 8 (8 - 1 = 7)\n    congruences = [(0, 5), (6, 7), (7, 8)]\n    result = solve_congruence(*congruences)\n\n    return result[0]\n\nans = solution()"
    ],
    "665b5255c92349eb9ddeb5d93d37b49d": [
        "def solution():\n    initial = 160\n    final = 40\n\n    change = final - initial\n    percent_change = (change / initial) * 100\n\n    return percent_change\n\nans = solution()"
    ],
    "29030dd68348449a8312e00b2527cb9e": [
        "def solution():\n    return 427 * 100\n\nans = solution()"
    ],
    "70c940fee10b465a84d7c757aa018a9e": [
        "def solution():\n    # Calculate the ratio of cookies to butter\n    cookies_to_butter_ratio = 100 / 40\n    # Calculate the amount of butter needed for 150 cookies, based on the ratio\n    butter_needed = 150 / cookies_to_butter_ratio\n    return butter_needed\n\nans = solution()"
    ],
    "830a6979358f4071bfa17925dbf71666": [
        "def solution():\n    marks = [27, 28, 26, 24, 20]\n    mean_mark = sum(marks) / len(marks)\n    return mean_mark\n\nans = solution()"
    ],
    "6718d58202814857b7fb4876e51e86b3": [
        "def solution():\n    count = 0\n    for i in range(1, 405):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "418a9a3d03a942a4a2c621e1a1688350": [
        "def solution():\n    sophie_tshirts = 13\n    sister_tshirts = sophie_tshirts - 5\n    return sister_tshirts\n\nans = solution()"
    ],
    "46ab1acc8aff4e4fa30eb837311aab05": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n\n    ways_to_choose = (pencils * rulers) + (pencils * pens) + (rulers * pens)\n\n    return ways_to_choose\n\nans = solution()"
    ],
    "4700822a4e3e41d3bd6cf4dda57b3084": [
        "def solution():\n    # Calculate the number of games in the group stage for one group.\n    # Each team in a group plays with every other team once, which is a combination of 4 teams taken 2 at a time.\n    group_games_per_group = 4 * (4 - 1) // 2\n\n    # Since there are 8 groups, multiply the games per group by the number of groups.\n    group_stage_games = group_games_per_group * 8\n\n    # Calculate the number of games in the knockout rounds.\n    # There are 16 teams, and each round halves the amount of teams until 1 is left.\n    # The rounds are: Round of 16, Quarter-finals, Semi-finals, Final and Third-place match.\n    knockout_stage_games = 16 - 1  # 15 knockout games total: 8 (Ro16) + 4 (QF) + 2 (SF) + 1 (Final) + 1 (Third-place)\n\n    # Total number of games is the sum of group stage games and knockout stage games.\n    total_games = group_stage_games + knockout_stage_games\n\n    return total_games\n\nans = solution()"
    ],
    "eaa3534db535408eb1b161cbafa4af7a": [
        "def solution():\n    count = 0\n    for second_digit in range(1, 10):\n        first_digit = 1 + 2 * second_digit\n        if first_digit > 9:\n            break\n        for third_digit in range(0, 10):\n            if 9 < (first_digit + second_digit + third_digit) < 14:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "d9a90dd46e1b4f7b8ea8abbd0d0cda50": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ball, racket = symbols('ball racket')\n\n    equation1 = Eq(racket, ball + 28)\n    equation2 = Eq(ball + racket, 30)\n\n    solutions = solve((equation1, equation2), (ball, racket))\n\n    return solutions[ball]\n\nans = solution()"
    ],
    "90d54cf3746b403a998b30644e14ed6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # symbols for the cost of an apple and a banana\n    apple, banana = symbols('apple banana')\n\n    # equations based on the given information\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    # solve the equations for the cost of an apple and a banana\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    # calculate the cost for 5 bananas\n    cost_for_5_bananas = 5 * solutions[banana]\n\n    return cost_for_5_bananas\n\nans = solution()"
    ],
    "67d603b406954580bb312d236cca3026": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    n = symbols('n')\n    matches_eq = Eq(n*(n-1)/2, 15)\n    num_teams = solve(matches_eq, n)\n\n    # Only consider positive integer solution for number of teams\n    num_teams = [s.evalf() for s in num_teams if s.is_real and s > 0]\n\n    return int(num_teams[0])\n\nans = solution()"
    ],
    "0c56c61f84034ba086b7ccfeb89c1dd8": [
        "def solution():\n    number = 224\n    factors = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            factors += 1\n    return factors\n\nans = solution()"
    ],
    "c7dac16768af42858204c39c3827fc02": [
        "def solution():\n    number = 210 / 0.7\n    return number\n\nans = solution()"
    ],
    "49cdd6b806674d4aaf0cef8780f8f8cb": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n\n    ans = pencils * rulers * pens\n    return ans\n\nans = solution()"
    ],
    "f55b7420a598495d8cb743d46cebb8de": [
        "def solution():\n    # Let x be the number of correct answers Eddie answered,\n    # and y be the number of wrong answers (including skipped).\n    # Each correct answer gives 6 points, each wrong answer gives -2 points.\n    \n    # We have the following equations based on the problem statement:\n    # x + y = 10 (total number of questions)\n    # 6x - 2y = 44 (total points Eddie got)\n    # From the first equation, we can express y as y = 10 - x.\n    # Substitute y in the second equation and solve for x:\n    # 6x - 2(10 - x) = 44\n    # 6x - 20 + 2x = 44\n    # 8x = 64\n    # x = 8\n    \n    # Eddie answered 8 questions correctly.\n    x = (44 + 2 * 10) / 8\n    return int(x)\n\nans = solution()"
    ],
    "f7d16bba0eef40749220aeee30f11c1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    shorts, tshirt = symbols('shorts tshirt')\n    \n    equation1 = Eq(2 * shorts + 3 * tshirt, 26)\n    equation2 = Eq(2 * shorts + 5 * tshirt, 40)\n    \n    solutions = solve((equation1, equation2), (shorts, tshirt))\n    \n    return solutions[tshirt]\n\nans = solution()"
    ],
    "129b35bd2e4c40649186f5cfd5e08f55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let t be the number of triangles\n    t = symbols('t')\n    # Number of sides for shapes\n    sides_triangle = 3\n    sides_quadrilateral = 4\n    sides_pentagon = 5\n\n    # Given number of pentagons\n    num_pentagons = 2\n    # The number of quadrilaterals is 82 more than that of triangles\n    num_quadrilaterals = t + 82\n\n    # Equation based on the total number of sides\n    equation = Eq(sides_triangle * t + sides_quadrilateral * num_quadrilaterals + sides_pentagon * num_pentagons, 394)\n\n    # Solve the equation\n    num_triangles = solve(equation, t)\n\n    # We then calculate the number of quadrilaterals\n    num_quad = num_triangles[0] + 82\n\n    return num_quad\n\nans = solution()"
    ],
    "661c4eed4a32448abe382838199f26bb": [
        "def solution():\n    numbers = [599999, 59999, 5999, 599, 59, 5]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "7f68a155e73c4da8811ddfc74a0de5bb": [
        "def solution():\n    ans = -6 / 6 == 6\n    return ans\n\nans = solution()"
    ],
    "32b965ddd9334985a59c4e74953701c5": [
        "def solution():\n    count = 0\n    for tens in range(1, 10):\n        ones = tens - 3\n        if ones >= 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "39341763d576440d9bf2d603ec9d0a28": [
        "def solution():\n    first_term = 0.3\n    second_term = 0.8\n    common_difference = second_term - first_term\n    \n    third_term = first_term + 2 * common_difference\n    return third_term\n\nans = solution()"
    ],
    "0568330ddd524498892da0859a5ec187": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq(rachel - 8, 3 * (alice - 8))\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n    \n    total_sweets = solutions[rachel] + solutions[alice]\n    \n    return total_sweets\n\nans = solution()"
    ],
    "73f073ef77d3485a9e2db22b74b4d99c": [
        "def solution():\n    distance_between_each = 25\n    number_of_gaps = 3  # there are 3 gaps between 4 lamp posts\n    \n    total_distance = number_of_gaps * distance_between_each\n    \n    return total_distance\n\nans = solution()"
    ],
    "184cf0c663e945deb8bdb09f3954a920": [
        "def solution():\n    # Find the Least Common Multiple (LCM) of 3, 5 and 7 which is a multiple of the number we are looking for\n    lcm = 3 * 5 * 7\n    # Look for the number in range(600, 700) because it is a three digit number starting with 6\n    for i in range(600, 700):\n        if i % lcm == 0:\n            return i\n\nans = solution()"
    ],
    "cfc59e7dc0614196bfb7795914dacdef": [
        "def solution():\n    ans = 63 - (55 - 27)\n    return ans\n\nans = solution()"
    ],
    "ae1a09d2d17649718463491e636b12d1": [
        "def solution():\n    score = 36\n    total = 40\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "842908b1fc5d4a659cac34d9f6c84d6b": [
        "def solution():\n    # Total number of students\n    total_students = 150\n    \n    # Total number of teams\n    total_teams = total_students // 3\n    \n    # Number of teams with only 1 boy\n    teams_1_boy = 15\n    \n    # Number of teams with two or more boys\n    teams_2_more_boys = 27\n    \n    # Total number of teams with boys (1 boy teams + 2 or more boy teams)\n    teams_with_boys = teams_1_boy + teams_2_more_boys\n    \n    # Given: all-boy teams is twice the number of all-girl teams\n    # Let all-girl teams be x, then all-boy teams will be 2x\n    # Total teams is sum of all-boy teams, all-girl teams, and teams with mixed boys and girls\n    # total_teams = all_boy_teams + all_girl_teams + mixed_boy_girl_teams\n    # total_teams = 2x + x + teams_with_boys\n    # 3x = total_teams - teams_with_boys\n    # 3x = total_teams - (teams_1_boy + teams_2_more_boys)\n    x = (total_teams - teams_with_boys) // 3\n    \n    # Total number of all-girl teams (we did not count teams with only 1 boy or 2+ boys)\n    all_girl_teams = x\n    \n    # Since each team has 3 members,\n    # Number of girls = all-girl teams * 3\n    number_of_girls = all_girl_teams * 3\n    \n    return number_of_girls\n\nans = solution()"
    ],
    "bab688e90abc4ad7a664334dbd742c1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Declare symbols for the weights of apples, peaches, and pears.\n    apples, peaches, pears = symbols('apples peaches pears')\n\n    # We know:\n    # 1. Total weight is 73 kg\n    # 2. Apples weight is 5 kg more than 6 times the weight of pears (apples = 6*pears + 5)\n    # 3. Peaches weight is 2 kg less than 3 times the weight of pears (peaches = 3*pears - 2)\n    eq1 = Eq(apples + peaches + pears, 73)\n    eq2 = Eq(apples, 6 * pears + 5)\n    eq3 = Eq(peaches, 3 * pears - 2)\n\n    # Solving the system of equations\n    solution_dict = solve((eq1, eq2, eq3), (apples, peaches, pears))\n\n    # We're interested in the weight of apples\n    return solution_dict[apples]\n\nans = solution()"
    ],
    "519312ec2beb41659919be97138e6ba6": [
        "def solution():\n    product = 2*5*7*2*5*7*2*5\n    sum_of_digits = sum(int(digit) for digit in str(product))\n    return sum_of_digits\n\nans = solution()"
    ],
    "5bd7e5a5661d47afb0bef048489bb3fe": [
        "def solution():\n    base = 7\n\n    # Separate digits according to place value in base 7\n    num1_units = 1\n    num1_tens = 6\n    num2_units = 4\n    num2_tens = 3\n\n    # Calculate the difference in units and tens place\n    diff_units = (num1_units - num2_units) % base\n    borrow = 1 if num1_units < num2_units else 0\n    diff_tens = (num1_tens - num2_tens - borrow + base) % base\n\n    # Combine the digits to form the answer in base 7\n    ans = diff_tens*base + diff_units\n    return ans\n\nans = solution()"
    ],
    "00c7ec21843b40aba2d39a75810ffc85": [
        "def solution():\n    # Since the distance between A to B is the same, we can derive the following equations:\n    # Let d be the distance from A to B.\n    # d = 10 * (t1 - 10)  --> (1) for 10 km/h\n    # d = 15 * (t2 - 8)   --> (2) for 15 km/h\n    # We are required to find the speed s for which he arrives at 9 am, hence\n    # d = s * (t - 9)     --> (3)\n\n    # We know from (1) and (2) that (t1 - 10) = (t2 - 8) because they cover the same distance\n    # Let x be the time in hours when he travels at 10 km/h and it is the same when he travels at 15 km/h\n    # d = 10 * x --> (1)\n    # d = 15 * (x - 2) --> Since he arrives two hours earlier at 15 km/h\n    # Equating (1) and (2), we get \n    # 10 * x = 15 * (x - 2)\n    # Solving for x \n    # 10x = 15x - 30\n    # 5x = 30\n    x = 30 / 5\n\n    # Now we have the time he would take to arrive at 10 am with a speed of 10 km/h\n    # We can calculate the distance d from that information\n    d = 10 * x\n\n    # He needs to arrive at 9 am so total time travelled will be x+1\n    # Now we use this distance to calculate the required speed s\n    # Applying d = s * (x + 1)\n    # Solving for s we get\n    s = d / (x + 1)\n\n    return s\n\nans = solution()"
    ],
    "c5e1085504df4fe38872ff3a46620cd6": [
        "def solution():\n    # Assuming the weight of 1 dog is d, the weight of 1 rabbit is r, and the weight of 1 chicken is c\n    # According to the question:\n    # d = 8 * r (1)\n    # r = 2 * c (2)\n\n    # We want to find how many chickens weigh as much as 1 dog,\n    # So, we will replace r from equation (2) in equation (1):\n    # d = 8 * (2 * c)\n    # d = 16 * c\n\n    # Therefore, 16 chickens weigh as much as 1 dog.\n    return 16\n\nans = solution()"
    ],
    "233efeea19724a82bb0152f79a9c9ee1": [
        "def solution():\n    # If we take one glove from each category,\n    # we could end up with 1 left-hand blue, 2 left-hand green,\n    # 3 right-hand blue, and 4 right-hand green, so 4 gloves in total.\n    #\n    # However, this does not guarantee a pair since they could all be different hands.\n    # To guarantee at least one matching pair, we need to consider the worst-case scenario.\n    # For blue gloves, we need to take all 4 (3 right-hand + 1 left-hand) to be sure of a pair.\n    # For green gloves, as soon as we take a fifth glove, we are guaranteed to have a pair,\n    # since we will have either 3 left-hand greens or 3 right-hand greens.\n    # So the answer is 5, because that's the smallest number that ensures a matching pair.\n    \n    return 5\n\nans = solution()"
    ],
    "00d539f1b4db48d3b3494c0f120062fd": [
        "def solution():\n    initial_students = 5\n    candies_each_initially = 12\n    total_candies = initial_students * candies_each_initially\n    new_student_count = initial_students + 1\n    new_candies_each = total_candies // new_student_count\n    return new_candies_each\n\nans = solution()"
    ],
    "80aa447385fb495cb5bf06d8c7b0fdda": [
        "def solution():\n    raj_height = 138\n    david_height = 170\n    jacob_height = (raj_height + david_height) / 2\n    return jacob_height\n\nans = solution()"
    ],
    "dec3fb034aea47b1b73c5397fa7a6777": [
        "def solution():\n    for cards in range(1, 4*5*7 + 1):\n        if cards % 4 == 3 and cards % 5 == 4 and cards % 7 == 6:\n            return cards\n\nans = solution()"
    ],
    "815b73a9e29e4090bfd993eec9cfa5f8": [
        "def solution():\n    initial_value = 1.20\n    depreciation_rate = 0.04\n    years = 5\n    approximate_depreciation = 0.8154\n\n    final_value = initial_value * (1 - depreciation_rate) ** years\n    ans = round(final_value, 4)  # approximate to four decimal places\n    \n    return ans\n\nans = solution()"
    ],
    "453da806d0d44938b0462fc02a292532": [
        "def solution():\n    boys_diff = 52\n    total_students = 0\n    # Find the possible side for the square\n    side = 1\n    while True:\n        if side % 2 == 0:\n            girls = (side - 2) ** 2\n            boys = side ** 2 - girls\n        else:\n            boys = (side - 1) ** 2\n            girls = side ** 2 - boys\n        if boys - girls == boys_diff:\n            total_students = boys + girls\n            break\n        side += 1\n    return total_students\n\nans = solution()"
    ],
    "db9048b0a36740abaf853e98897fbb20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    eugene, yuna = symbols('eugene yuna')\n\n    # Given conditions\n    # Eugene had 3 times as many pins as Yuna\n    condition1 = Eq(eugene, 3 * yuna)\n    # After Yuna bought 76 pins, Yuna had 7/9 as many pins as Eugene\n    condition2 = Eq(yuna + 76, 7/9 * eugene)\n\n    # Solve the system of equations\n    solutions = solve((condition1, condition2), (eugene, yuna))\n\n    # Extract the solution for the number of pins Eugene had\n    eugene_pins = solutions[eugene]\n\n    return eugene_pins\n\nans = solution()"
    ],
    "11200de7f462445fbdc06bbefca57a99": [
        "from math import factorial\n\ndef solution():\n    letters = 'REVISE'\n    letter_counts = {letter: letters.count(letter) for letter in set(letters)}\n    total_permutations = factorial(len(letters))\n    \n    for count in letter_counts.values():\n        total_permutations //= factorial(count)\n        \n    return total_permutations\n\nans = solution()"
    ],
    "4873bec7d2b148f0b1a8ce80aa0a60fa": [
        "def solution():\n    # Find the value of A such that the number is divisible by 9\n    for A in range(10):\n        if (1 + 2 + 3 + 4 + 5 + A) % 9 == 0:\n            num = int('12345' + str(A))\n            # Once A is found, find the remainder of the six-digit number when divided by 4\n            remainder = num % 4\n            return remainder\n\nans = solution()"
    ],
    "31d6392f86454fcfabd63010d5f7ac45": [
        "def solution():\n    ones = 5\n    hundreds = 2\n    tens = 8\n    number = hundreds * 100 + tens * 10 + ones\n    return number\n\nans = solution()"
    ],
    "c347c951d6764ecabf96c472825de32c": [
        "def solution():\n    normal_price = 480\n    discount = 35 / 100  # converting percentage to a decimal\n    reduction = normal_price * discount\n    sale_price = normal_price - reduction\n    return sale_price\n\nans = solution()"
    ],
    "b381663c286a41b4b2c212c8d9fa625f": [
        "def solution():\n    ans = 7.257 - 3.47\n    return ans\n\nans = solution()"
    ],
    "1edfbfb983cc4026861711aed39ec50b": [
        "def solution():\n    # The key for Kelly to win is to leave Dan in a position where he is forced to take 1 or 2 matches\n    # and leave 1 match for Kelly. Since Dan can only take 1 or 2, to ensure Kelly's victory,\n    # Kelly should leave a multiple of 3 for Dan on every turn. This means Kelly wants to leave 9 matches\n    # for Dan after her first turn. So Kelly should take away:\n    kellys_move = 11 - 9\n    return kellys_move\n\nans = solution()"
    ],
    "790337bbc4c640c2ba17ccfd95719755": [
        "def solution():\n    # Let the total number of flowers be x\n    red_flowers = (1 / 2) * x\n    remaining_flowers = x - red_flowers\n    pink_flowers = (4 / 7) * remaining_flowers\n    # There are 6 more red flowers than pink flowers\n    equation = red_flowers - pink_flowers - 6\n    # Solve this equation for x\n    x = symbols('x')\n    total_flowers = solve(equation, x)\n    return total_flowers[0]\n\nans = solution()"
    ],
    "d7960525f20d4a85b2d07f16b77a89de": [
        "def solution():\n    # Convert mixed numbers to improper fractions and perform the addition\n    numerator = (5 + 1/7) + (3 + 3/11) + (1 + 13/23)\n    denominator = (3 + 3/7) + (2 + 2/11) + (1 + 1/23)\n    \n    # Calculate the final result\n    ans = numerator / denominator\n    \n    return ans\n\nans = solution()"
    ],
    "c79974cfe3544139952b7aa20868fe35": [
        "def solution():\n    n = 15\n    ans = (1/6)*n*(n+1)*(2*n+1)\n    return int(ans)\n\nans = solution()"
    ],
    "fcdca3fe5e6e44a3aaa6b8fc55320938": [
        "def solution():\n    from math import factorial\n\n    # There are 3 kids, so we calculate the permutations of these 3 elements\n    num_ways = factorial(3)\n\n    return num_ways\n\nans = solution()"
    ],
    "3e876b88a82f4fabb94444319efac888": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    square = symbols('square')\n    equation = Eq(4 * square - 3, 65)\n    solution = solve(equation, square)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8d09ac1d8970471dbd6ed0727980bd24": [
        "def solution():\n    ways = 0\n    for two_grams in range(39):\n        for three_grams in range(26):\n            if 2 * two_grams + 3 * three_grams == 77:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "354d850fc3c644989668ea964029af35": [
        "def solution():\n    total_vehicles = 27\n    total_wheels = 78\n\n    # Representing cars with 'c' and motorcycles with 'm'\n    # Since each motorcycle has 2 wheels and each car has 4 wheels\n    # 2m + 4c = total_wheels AND m + c = total_vehicles\n    # From the above, we can express m = total_vehicles - c\n    # Substituting m in the first equation, we get:\n    # 2(total_vehicles - c) + 4c = total_wheels\n    # Simplifying the equation to find the number of cars\n    c = (total_wheels - 2 * total_vehicles) / 2\n\n    return int(c)\n\nans = solution()"
    ],
    "2d748e0d6f544f23b0cf14359ab45b8f": [
        "def solution():\n    boys = 176\n    girls = boys - 50\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "3825adc1e7f941ebb2ac15ca5828613b": [
        "def solution():\n    total_distance_km = 5  # The total distance of the race in kilometers\n    num_marshals = 9  # Number of marshals\n\n    # Since marshals are spread equally, we divide the total distance by (num_marshals - 1) to get distance between marshals\n    distance_between_marshals_m = (total_distance_km * 1000) / (num_marshals - 1)\n\n    return distance_between_marshals_m\n\nans = solution()"
    ],
    "06bf4f7c67004f1dbe9f03b5dc14516d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let n be the number of stickers Nicole had originally\n    jason, nicole = symbols('jason nicole')\n    \n    # Jason had 20 stickers, and after receiving 18 from Nicole he has jason + 18\n    # Nicole had n stickers and after giving away 18, she has nicole - 18\n    # After the exchange, Jason had 5 fewer stickers than Nicole: jason + 18 = nicole - 18 - 5\n    # Jason originally had 20 stickers: jason = 20\n    # Nicola had more stickers than Jason initially: nicole > jason\n    \n    equation1 = Eq(jason + 18, nicole - 18 - 5)\n    equation2 = Eq(jason, 20)\n    \n    solutions = solve((equation1, equation2), (jason, nicole))\n    \n    # as Nicole had more stickers than Jason, we check if the solution meets this condition\n    if solutions[nicole] > solutions[jason]:\n        return solutions[nicole]\n    else:\n        return \"No solution – Nicole should have more stickers than Jason.\"\n\nans = solution()"
    ],
    "9bf9b1c2a24e4de3a5ed1f6932581844": [
        "def solution():\n    # Original volume of the cuboid: V = l * b * h\n    # New volume of the cuboid after changes: V' = l' * b' * h'\n    # l' = 1.1 * l (length increased by 10%)\n    # b' = (4/5) * b (breadth reduced to 4/5 of the original)\n    # h' = (11/10) * h (height ratio of new to original is 11:10)\n    # V' = (1.1 * l) * ((4/5) * b) * ((11/10) * h)\n    # V' = 1.1 * (4/5) * (11/10) * l * b * h\n    # V' = (1.1 * 4 * 11) / (5 * 10) * V\n    # V' = (44 / 50) * V\n    # Volume percentage = (V'/V) * 100 = (44/50) * 100\n\n    new_volume_percentage = (44 / 50) * 100\n    return new_volume_percentage\n\nans = solution()"
    ],
    "33681430650f48419421a99318bdaf3d": [
        "def solution():\n    speed_initial = 180\n    time_initial = 6\n    distance_initial = speed_initial * time_initial\n\n    speed_tired = 120\n    time_tired = 8\n    distance_tired = speed_tired * time_tired\n\n    total_distance = distance_initial + distance_tired\n\n    return total_distance\n\nans = solution()"
    ],
    "c471960bec8946e69cab7ac7cb6411c3": [
        "def solution():\n    red_count = 0\n    green_count = 0\n    layer = 0\n\n    while (layer+1) * (layer+1) <= 400:\n        if layer % 2 == 0:\n            red_count += (layer * 4 + 4)\n        else:\n            green_count += (layer * 4 + 4)\n        layer += 1\n\n    more_tiles = abs(red_count - green_count)\n    if red_count > green_count:\n        dominant_color = \"red\"\n        red_count -= more_tiles\n    else:\n        dominant_color = \"green\"\n        green_count -= more_tiles\n\n    return dominant_color, more_tiles\n\nans = solution()"
    ],
    "52895a5f9c584889b60e514eea4cb012": [
        "def solution():\n    average_incorrect = 74\n    total_students = 7\n    total_incorrect = average_incorrect * total_students\n\n    incorrect_score = 81\n    correct_score = 18\n    difference = incorrect_score - correct_score\n\n    total_correct = total_incorrect - difference\n    correct_average = total_correct / total_students\n    \n    return correct_average\n\nans = solution()"
    ],
    "e4b6fc33fb6044dbbf98541fd73229a3": [
        "def solution():\n    initial_amount = 6000\n    interest_rate = 0.03  # 3%\n\n    # Calculate the compound interest after the first year\n    amount_after_first_year = initial_amount * (1 + interest_rate)\n\n    # Calculate the compound interest after the second year\n    amount_after_second_year = amount_after_first_year * (1 + interest_rate)\n\n    # Interest earned at the end of the second year is the total amount minus the initial amount\n    interest_earned_second_year = amount_after_second_year - initial_amount\n\n    return interest_earned_second_year\n\nans = solution()"
    ],
    "27def3f9c6524488aff45fe308ba3df3": [
        "def solution():\n    time_per_picture = 10  # minutes\n    total_time = 80  # one hour and twenty minutes in minutes\n    pictures_painted = total_time // time_per_picture\n    return pictures_painted\n\nans = solution()"
    ],
    "0f41145869544b529481d63e5b99081f": [
        "def solution():\n    fraction = 1 + (4 / 7)\n    ans = round(fraction, 1)\n    return ans\n\nans = solution()"
    ],
    "4d04c9aca7b14fc0b67361f6a0e0bb64": [
        "def solution():\n    # The recurring cycle of 3/7 is 428571, and it repeats every 6 digits\n    recurring_cycle = \"428571\"\n    cycle_length = len(recurring_cycle)\n    \n    # The 69th digit after the decimal is the same as the (69 mod 6)th digit\n    # in the cycle, because the pattern repeats every 6 digits\n    digit_index = (69 % cycle_length) - 1  # Subtract one because indices start at 0\n\n    # If mod operation yields zero, we should take the last digit of the cycle\n    if digit_index == -1:\n        digit_index = cycle_length - 1\n\n    # Retrieve the digit at the specified index\n    ans = int(recurring_cycle[digit_index])\n\n    return ans\n\nans = solution()"
    ],
    "a48c37c796244f69b5dd70e1b55e15d4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let p be the planned profit, which is 50% of the cost c\n    # hence, planned profit p = 0.5 * c\n    # Let d be the discount rate for the remaining goods on the second day\n\n    c, p, d = symbols('c p d')\n    \n    # Ken sold 70% of his goods at a 50% profit\n    first_day_sales = 0.7 * c * (1 + 0.5)\n    \n    # Therefore, the remaining goods are 30% of the goods\n    remaining_goods = 0.3 * c\n    \n    # Ken sold the remaining goods at a discount where we need to find discount rate d\n    second_day_sales = remaining_goods * (1 - d)\n    \n    # Total revenue is the sum of first and second day sales\n    total_revenue = first_day_sales + second_day_sales\n    \n    # Total profit is the total revenue minus the cost\n    total_profit = total_revenue - c\n    \n    # The total profit is 82% of the planned profit (0.82 * planned profit)\n    planned_profit = 0.5 * c\n    equation = Eq(total_profit, 0.82 * planned_profit)\n    \n    # Solve for discount rate d\n    discount_rate = solve(equation, d)[0]\n\n    return float(discount_rate)\n\nans = solution()"
    ],
    "c0156725df024018aed39df49f106ef3": [
        "def solution():\n    # Let Megacorp's sales in 2014 be x widgets\n    # Then Vastco's sales in 2014 is x + 0.68*x = 1.68x\n    # Vastco's sales in 2015 is 1.68x * 1.32 (since it's a 32% increase)\n    vastco_2015_sales = 1.68 * 1.32\n\n    # Vastco sold 44% more widgets than Megacorp in 2015\n    # Let Megacorp's sales in 2015 be y widgets\n    # Then Vastco's sales in 2015 is y + 0.44*y = 1.44*y\n    # We can set the two expressions for Vastco's 2015 sales equal to each other\n    # 1.68x * 1.32 = 1.44 * y\n\n    # The increase in Megacorp's sales can be expressed as y/x = 2015_sales/2014_sales\n    # Solving for y/x gives us the ratio of Megacorp's sales in 2015 to 2014\n    megacorp_sales_ratio = (1.68 * 1.32) / 1.44\n\n    # The percentage increase is this ratio minus 1 (representing the original sales), multiplied by 100\n    megacorp_percentage_increase = (megacorp_sales_ratio - 1) * 100\n\n    return megacorp_percentage_increase\n\nans = solution()"
    ],
    "5b136def7b58491b81995c72b9ad067a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    older_son, younger_son, older_daughter, younger_daughter = symbols('older_son younger_son older_daughter younger_daughter')\n\n    equation1 = Eq(older_son + younger_son + older_daughter + younger_daughter, 55)\n    equation2 = Eq(younger_son, older_son + 3)\n    equation3 = Eq(younger_daughter, older_daughter + 2)\n    equation4 = Eq(younger_son, 2 * older_daughter)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (older_son, younger_son, older_daughter, younger_daughter))\n\n    youngest_child = min(solutions.values())\n\n    return youngest_child\n\nans = solution()"
    ],
    "4ed24c6d67bb4a53beeb3f3413937be2": [
        "def solution():\n    total_bottles = 48\n    empty_bottles = total_bottles\n\n    while empty_bottles >= 4:\n        new_bottles = empty_bottles // 4\n        total_bottles += new_bottles\n        empty_bottles = empty_bottles % 4 + new_bottles\n\n    # Borrow 1 empty bottle if needed\n    if empty_bottles == 3:\n        total_bottles += 1\n\n    return total_bottles\n\nans = solution()"
    ],
    "7519f32e6df34b519be6057181658e4e": [
        "def solution():\n    # Calculate the number of digits in 1 to 9\n    digits_1_to_9 = 9 * 1\n\n    # Calculate the number of digits in 10 to 99\n    digits_10_to_99 = (99 - 10 + 1) * 2\n\n    # Calculate the number of digits in 100 to 113\n    digits_100_to_113 = (113 - 100 + 1) * 3\n\n    # Sum all the digit counts\n    total_digits = digits_1_to_9 + digits_10_to_99 + digits_100_to_113\n\n    return total_digits\n\nans = solution()"
    ],
    "c34210e64f26416da03013fc4f6aef91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pearls_total = symbols('pearls_total')\n\n    equation = Eq(pearls_total / 2 + pearls_total / 4 + pearls_total / 6 + 3, pearls_total)\n\n    pearls_original = solve(equation, pearls_total)[0]\n\n    return pearls_original\n\nans = solution()"
    ],
    "b5d689e03b7a4370a956fabc41aa5767": [
        "def solution():\n    dylan_salt = 300 * 0.35\n    daisy_salt = 200 * 0.50\n    total_salt = dylan_salt + daisy_salt\n    total_solution = 300 + 200\n    concentration = total_salt / total_solution\n    return concentration\n\nans = solution()"
    ],
    "53974104b6a9479d95d1207ebbf1bf13": [
        "def solution(y):\n    return y / 2\n\nans = solution(y)"
    ],
    "d7ccf6eb76b340b0a3ccd8caf9bcbfda": [
        "def solution():\n    workers = 3\n    days = 3\n\n    total_work = workers * days\n    days_for_one_worker = total_work / 1 \n\n    return days_for_one_worker\n\nans = solution()"
    ],
    "7f30a1e297f84571b00d9e89bbef9c69": [
        "def solution():\n    return 124 - 76\n\nans = solution()"
    ],
    "ffba176a010a4d0187358ab3db7ff0b7": [
        "def solution():\n    jen_beads = 438\n    lily_beads = jen_beads + 195\n    total_beads = jen_beads + lily_beads\n    return total_beads\n\nans = solution()"
    ],
    "8bbc403c2d8f461cbbb29a4b072980aa": [
        "def solution():\n    ans = 548 - 45 + 23 - 107\n    return ans\n\nans = solution()"
    ],
    "698be5f0089b4737bfda189fa3acbd25": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    people = ['Len', 'Joe', 'Angle', 'Jack']\n    for p in permutations(people):\n        entrances = set()\n        for i, person in enumerate(p):\n            entrances.add(i % 3)\n        if len(entrances) == 3:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "067a0a4f635849c888d2b3821c72eb84": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    white_rabbits, black_rabbits, grey_rabbits = symbols('white_rabbits black_rabbits grey_rabbits')\n    \n    equation1 = Eq(black_rabbits, white_rabbits + 14)\n    equation2 = Eq(grey_rabbits, white_rabbits - 2)\n    equation3 = Eq(white_rabbits + black_rabbits + grey_rabbits, 84)\n    \n    solutions = solve((equation1, equation2, equation3), (white_rabbits, black_rabbits, grey_rabbits))\n    \n    return solutions[white_rabbits]\n\nans = solution()"
    ],
    "bc13cb301fa84f25ab114f928effbff4": [
        "def solution():\n    # Total number of erasers\n    total_erasers = 246\n    # John has 32 more erasers than his brother\n    more_erasers = 32\n\n    # Let John's brother have x erasers\n    # Then John has x + more_erasers erasers\n    # According to the problem, we have the equation: x + (x + more_erasers) = total_erasers\n    # Simplifying: 2x + more_erasers = total_erasers\n\n    # Solve for x (John's brother erasers)\n    johns_brother_erasers = (total_erasers - more_erasers) / 2\n\n    return johns_brother_erasers\n\nans = solution()"
    ],
    "477830e358774ebc992553d65daa5aed": [
        "def solution():\n    for number in range(60, 81):\n        if number % 3 == 0 and number % 8 == 0:\n            return number\n\nans = solution()"
    ],
    "0ab634c3b8454930935d8d7eeae75287": [
        "def solution():\n    total_glasses = 100\n    total_earnings = 92\n    price_per_glass = 1\n\n    # Let x be the number of glasses broken\n    # Glasses delivered safely = total_glasses - x\n    # Earnings for safely delivered glasses = (total_glasses - x) * price_per_glass\n    # Loss for broken glasses = x * price_per_glass\n    # Total earnings = earnings for safely delivered - loss for broken\n    # total_earnings = (total_glasses - x) - x\n\n    x = (total_glasses - total_earnings) // 2\n    return x\n\nans = solution()"
    ],
    "0205b2b75de94213a048023d3039d864": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mayanks_number = symbols('mayanks_number')\n    equation = Eq(mayanks_number * 2 + 4, 40)\n\n    solution = solve(equation, mayanks_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e17967bd47d74eefa35caffacc4df30e": [
        "def solution():\n    ans = 17 - 8 / (-2) + 4 * (-3)\n    return ans\n\nans = solution()"
    ],
    "55d1c0e624b04989949990c12957fded": [
        "def solution():\n    # In a round robin, each team plays every other team once.\n    # The number of matches in a round-robin tournament given by the formula:\n    # Matches = n*(n-1)/2, where n is the number of teams.\n    # Thus, we need to solve for n in the equation: n*(n-1)/2 = 45.\n\n    # Simplify the equation to n^2 - n = 90 (by multiplying both sides by 2)\n    # Then, n^2 - n - 90 = 0 is the quadratic equation we need to solve.\n\n    # We look for an integer solution since the number of teams has to be an integer.\n    matches = 45\n    n = 1\n    while n*(n - 1) / 2 <= matches:\n        if n*(n - 1) / 2 == matches:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "5fa94c02c76e4dfcaadc3cece8a6370b": [
        "def solution():\n    cost_per_banana = 98 / 7\n    total_cost = 15 * cost_per_banana\n    change_from_12_pounds = (12 * 100) - total_cost  # convert pounds to pence for calculation\n    return change_from_12_pounds / 100  # convert pence back to pounds for the final result\n\nans = solution()"
    ],
    "64205cfac54a493583dddaf95648be2c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the original number of boats, and y be the number of people in the class\n    x, y = symbols('x y')\n    \n    # Setting up the equations based on the given conditions\n    equation1 = Eq((x - 1) * 9, y)\n    equation2 = Eq((x + 1) * 6, y)\n    \n    # Solving the equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[y]\n\nans = solution()"
    ],
    "32ddbe1c6e04445387ccdb65a7acb10d": [
        "def solution():\n    # If x, x+2, x+4 are the three consecutive odd integers\n    # Then their sum is: x + (x+2) + (x+4) = 57\n    # Solving the equation: 3x + 6 = 57\n    # Therefore, x = (57 - 6)/3\n    x = (57 - 6) // 3\n    return x  # x is the smallest of the three consecutive odd integers\n\nans = solution()"
    ],
    "71354bd305fb422b983b708a2e55f7c0": [
        "def solution():\n    for x in [2, 6, 1, 10, 5, 3]:\n        if x * 3 == 6:\n            ans = x\n            break\n    return ans\n\nans = solution()"
    ],
    "24f3890540474354abf2b6aab5320a8e": [
        "def solution():\n    count = 0\n    for x1 in range(3, 15):\n        for x2 in range(3, 15):\n            for x3 in range(3, 15):\n                if x1 + x2 + x3 == 15:\n                    count += 1\n    return count // 6  # to account for permutations of x1, x2, x3\n\nans = solution()"
    ],
    "e4302d8e3fe6443f86fb2f2192888ff3": [
        "def solution():\n    ans = 37 * 4 * 5\n    return ans\n\nans = solution()"
    ],
    "f73c33519c0241a3819521391ab37f99": [
        "def solution():\n    ans = 495 // 9\n    return ans\n\nans = solution()"
    ],
    "749c7cdc53e24203887314d85737cdc8": [
        "def solution():\n    for num in range(5, 16):\n        if num % 4 == 0 and 36 % num == 0:\n            return num\n\nans = solution()"
    ],
    "f0c276e8ed7d4821a196335de4288bc4": [
        "def solution():\n    from math import gcd\n    pencils = 32\n    pens = 40\n    ans = gcd(pencils, pens)\n    return ans\n\nans = solution()"
    ],
    "35b813cb449f448997d243f1033f3d44": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 3, 4, 7]\n    min_sum = float('inf')\n    for perm in permutations(digits, 4):\n        num1 = 10*perm[0] + perm[1]\n        num2 = 10*perm[2] + perm[3]\n        total = num1 + num2\n        if total < min_sum:\n            min_sum = total\n    return min_sum\n\nans = solution()"
    ],
    "2b306992899a447c8bce44df9392630c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let j represent the number of cookies John had at first\n    # Let p represent the number of cookies Peter had at first\n    j, p = symbols('j p')\n    \n    # John had 180 more cookies than Peter\n    equation1 = Eq(j, p + 180)\n    \n    # After selling, John had 4/5 of her cookies left\n    equation2 = Eq(4/5 * j, 1/2 * (p - 3/10 * p))\n    \n    # Solve the system of equations for j and p\n    solutions = solve((equation1, equation2), (j, p))\n    \n    # The number of cookies John had at first\n    return solutions[j]\n\nans = solution()"
    ],
    "e9ac9bbd3734447f886684d6a291bb73": [
        "def solution():\n    total_tests = 4\n    average_mark = 60\n    new_test_score = 70\n    \n    previous_total = total_tests * average_mark\n    new_total = previous_total + new_test_score\n    new_average = new_total / (total_tests + 1)\n    \n    return new_average\n\nans = solution()"
    ],
    "794ee5871b124fb5a74edc519e0ba668": [
        "def solution():\n    total_horses = 6\n    total_pigs = 12\n    total_rabbits = 12\n\n    apples_per_horse = 20\n    apples_per_pig = 15\n    apples_per_rabbit = 5\n\n    total_apples = (total_horses * apples_per_horse +\n                    total_pigs * apples_per_pig +\n                    total_rabbits * apples_per_rabbit)\n\n    total_animals = total_horses + total_pigs + total_rabbits\n\n    average_apples = total_apples / total_animals\n\n    return average_apples\n\nans = solution()"
    ],
    "f37924ba75cc416ea7c7bd48e7b219c5": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        str_num = str(i)\n        if int(str_num[2]) == int(str_num[0]) + int(str_num[1]):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a0efd19a57614ce1b7d082746b893c41": [
        "def solution():\n    full_price_per_cup = 4\n    total_cups = 6\n    sale_a_discount = 0.1  # 10% discount\n    sale_b_discount = 1    # 1 dollar discount\n\n    # calculate the total price without any discount\n    total_price_without_discount = full_price_per_cup * total_cups\n\n    # calculate the total price with Sale A (10% discount)\n    total_price_with_sale_a = total_price_without_discount * (1 - sale_a_discount)\n\n    # calculate the total price with Sale B (1 dollar discount per cup)\n    total_price_with_sale_b = (full_price_per_cup - sale_b_discount) * total_cups\n\n    # the better deal will have the lower total price\n    if total_price_with_sale_a < total_price_with_sale_b:\n        ans = total_price_with_sale_a\n    else:\n        ans = total_price_with_sale_b\n\n    return ans\n\nans = solution()"
    ],
    "ced80c2b218f4935873bd032dc151175": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables: A for Class A students, B for Class B students, P for peaches\n    A, B, P = symbols('A B P')\n\n    # Create equations based on the given conditions\n    equation1 = Eq(5*A + 10, P)       # Class A condition: P = 5*A + 10\n    equation2 = Eq(8*B - 2, P)        # Class B condition: P = 8*B - 2\n    equation3 = Eq(A, B + 3)          # Class A has 3 more students than Class B: A = B + 3\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (A, B, P))\n\n    return solutions[P]\n\nans = solution()"
    ],
    "762265e33a1846639ea872d9802d0788": [
        "def solution():\n    number = 3172\n    rounded = round(number, -2)\n    return rounded\n\nans = solution()"
    ],
    "7a1ae541cfea449eb61ea2f963babc55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let b be the amount Benson had left, and j be the amount Jayden had left\n    b, j = symbols('b j')\n    \n    # Benson spent $74, so Benson had left b = Benson's original amount - 74\n    # Jayden spent $120, so Jayden had left j = Jayden's original amount - 120\n    # Benson's amount left is three times Jayden's amount left: b = 3*j\n    # Combined they had $590 at first: b + 74 (Benson's spent) + j + 120 (Jayden's spent) = 590\n    \n    # Set up the equations\n    equation1 = Eq(b, 3 * j)  # Benson's left is three times Jayden's left\n    equation2 = Eq(b + j, 590 - 74 - 120)  # The total amount they originally had minus what they spent\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (b, j))\n    \n    return solutions[j]\n\nans = solution()"
    ],
    "8e18ac8eb4bf4eb1aa2ab441e1aa8f37": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 7), (3, 9), (4, 11)]\n    \n    ans = solve_congruence(*congruences)[0]\n    \n    return ans\n\nans = solution()"
    ],
    "359bfb2629704d10a8dd53892a5dc3f6": [
        "def solution():\n    S = sum(int('2' * i) for i in range(1, 2018))\n    last_five_digits = str(S)[-5:]\n    ans = sum(int(digit) for digit in last_five_digits)\n    return ans\n\nans = solution()"
    ],
    "296fcbb0011f488f90d6fbcdc37797a7": [
        "def solution():\n    orange_drink_total = 12\n    water_fraction = 3/4\n    \n    water_amount = water_fraction * orange_drink_total\n    \n    return water_amount\n\nans = solution()"
    ],
    "09786a51b6224d4080e5d4e9523b4288": [
        "def solution():\n    result = 547 * 479\n    n = result % 10\n    return n\n\nans = solution()"
    ],
    "fd1283ec4ba7444fabc638211f9fb2c9": [
        "def solution():\n    metres = 212.4\n    cm_per_metre = 100\n    return metres * cm_per_metre\n\nans = solution()"
    ],
    "40405459ec9349f392fa92d748ff0ae5": [
        "def solution():\n    return 32068 - 1774\n\nans = solution()"
    ],
    "b2f8f67236184468a93d906237dd6e44": [
        "def solution():\n    for i in range(1, 380):\n        if i * i + i == 380:\n            return i\n\nans = solution()"
    ],
    "98327552e4884c52bb882152f3999d49": [
        "def solution():\n    total_owners = 143\n    dog_owners = 100\n    goldfish_owners = 14\n    both_owners = 9\n    \n    neither_owners = total_owners - (dog_owners + goldfish_owners - both_owners)\n    \n    return neither_owners\n\nans = solution()"
    ],
    "1893b64c811b4996a464e737aadc6c57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b represents the speed of Betty in metres per minute\n    # Let k represents the speed of Kevin in metres per minute\n    # Let t represents the time in minutes that Betty leaves before Kevin\n\n    b, k, t = symbols('b k t')\n\n    # After Betty has walked for 6 minutes and Kevin for t minutes, they are at the same point (the grocery store)\n    # Equation 1: b * 6 = k * t\n    # After walking 3 more minutes, Kevin arrives at the store and Betty is 900 m away from cinema\n    # Equation 2: k * (t + 3) = b * 6\n    # Equation 3: b * (6 + 3) = 900\n\n    # Kevin has walked 150 m when Betty arrives at the store (after Betty walking 6 minutes)\n    # Equation 4: k * t = 150\n\n    # Now we solve these equations to find the values of b, k, and t\n    equation1 = Eq(b * 6, k * t)\n    equation2 = Eq(k * (t + 3), b * 6)\n    equation3 = Eq(b * (6 + 3), 900)\n    equation4 = Eq(k * t, 150)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (b, k, t))\n\n    return solutions[t]\n\nans = solution()"
    ],
    "8012fb86c41b408f81b73e1a65e6726b": [
        "def solution():\n    ans = 314 - 159\n    return ans\n\nans = solution()"
    ],
    "459d851ac5cd4dcd8da1397633b3b589": [
        "def solution():\n    total_parts = 1 + 2 + 3\n    raspberry_ratio = 1 / total_parts\n    raspberry_juice_ml = 300 * raspberry_ratio\n    \n    return raspberry_juice_ml\n\nans = solution()"
    ],
    "af2c741435fd4a9c86c69499b4f20b42": [
        "def solution():\n    ans = 145 + 37\n    return ans\n\nans = solution()"
    ]
}