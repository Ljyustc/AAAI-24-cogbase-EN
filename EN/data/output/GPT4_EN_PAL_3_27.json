{
    "3ae45bd14e7f417c9f717caaa1c8e5f6": [
        "def solution():\n    total_bones = 206\n    hand_bone_fraction = 27 / 103\n    finger_bone_fraction_of_hand = 14 / 27\n\n    hand_bones = total_bones * hand_bone_fraction\n    finger_bones = hand_bones * finger_bone_fraction_of_hand\n\n    return int(finger_bones)\n\nans = solution()"
    ],
    "b59c5c8afae1475392bc408efcd4db9b": [
        "def solution():\n    start_time = 9 * 60  # Convert 9:00 to minutes\n    end_time = 10 * 60   # Convert 10:00 to minutes\n\n    duration = end_time - start_time  # Calculate the difference in minutes\n\n    return duration  # Return the duration in minutes\n\nans = solution()"
    ],
    "5c4e76cbed394941b52264c055387694": [
        "def solution():\n    remaining_after_bag = 90 / 0.60\n    original_amount = remaining_after_bag / 0.80\n    return original_amount\n\nans = solution()"
    ],
    "559135fce0cc43d09bcdb784b6b68b16": [
        "def solution():\n    n = 15\n    first_term = 5\n    # Apply the formula for the sum of squares from first_term to n\n    sum_squares_n = (n * (n + 1) * (2 * n + 1)) // 6\n    sum_squares_before_first = ((first_term - 1) * first_term * (2 * (first_term - 1) + 1)) // 6\n    ans = sum_squares_n - sum_squares_before_first\n    return ans\n\nans = solution()"
    ],
    "04ba6a8bbd934c9fb2c34951b1c5e1b9": [
        "def solution():\n    students = 0\n    while True:\n        if (students + 5) % (students + 26) == 0:\n            sqrt_students = int((students + 5) ** 0.5)\n            if (sqrt_students + 1) ** 2 == students + 26:\n                break\n        students += 1\n    return students\n\nans = solution()"
    ],
    "7598dc1e2b3942f987670ac551b91e44": [
        "def solution():\n    total_students = 36\n    physics_students = total_students * (1/6)\n    biology_students = total_students * (2/9)\n    chemistry_students = total_students - (physics_students + biology_students)\n\n    return int(chemistry_students)\n\nans = solution()"
    ],
    "55d37813feb54cc0939c8d521cc804ed": [
        "def solution():\n    amy = 37\n    john = 15\n    amy_gives = (amy - john - 4) / 2\n    return int(amy_gives)\n\nans = solution()"
    ],
    "f0976cf87d42410886ef671aee576759": [
        "def solution():\n    ans = 167 - 43\n    return ans\n\nans = solution()"
    ],
    "b741d2a40c624148991fcce3147038d7": [
        "def solution():\n    jane_saves = 13\n    ali_saves = 5 + 3 * jane_saves\n    return ali_saves\n\nans = solution()"
    ],
    "743c478b487e4e84b54812fd75dcf6e2": [
        "from math import factorial\n\ndef solution():\n    total_plants = 9\n    plants_to_arrange = 4\n\n    # Calculate the number of arrangements using permutations formula: P(n, r) = n! / (n - r)!\n    num_ways = factorial(total_plants) / factorial(total_plants - plants_to_arrange)\n\n    return int(num_ways)\n\nans = solution()"
    ],
    "e17f0eb85a0a4e86a5fdc51debd2ae80": [
        "def solution():\n    # Let the cost of the first house be c1 and the cost of the second house be c2\n    # Let the selling price for both be s = £99000\n    s = 99000\n\n    # Given, (s - c1) / c1 = profit percentage of the first house = 10%\n    # Rearranging c1, we have c1 = s / (1 + profit percentage)\n    profit_percentage = 0.10\n    c1 = s / (1 + profit_percentage)\n\n    # Given, (c2 - s) / c2 = loss percentage of the second house = 10%\n    # Rearranging c2, we have c2 = s / (1 - loss percentage)\n    loss_percentage = 0.10\n    c2 = s / (1 - loss_percentage)\n\n    # Total cost of the houses\n    total_cost = c1 + c2\n    # Total selling price of the houses\n    total_sell = 2 * s\n\n    # If total selling price is higher, then it's an overall profit else a loss\n    profit_or_loss = total_sell - total_cost\n\n    return profit_or_loss\n\nans = solution()"
    ],
    "6145df4ce0824a5cb58e397de57d33fd": [
        "def solution():\n    # To ensure Fred wins, he needs to leave George with a number of oranges\n    # that is a multiple of 4 after his first turn (4, 8, 12),\n    # since whatever number of oranges George takes (1, 2, 3),\n    # Fred can always take a number that makes the total taken 4,\n    # which ensures that Fred is always the one to take the last orange.\n    \n    # Total number of oranges is 15. To leave a multiple of 4,\n    # Fred should take away (15 % 4) oranges.\n    # 15 % 4 = 3, so Fred should take 3 oranges on his first turn.\n    \n    fred_first_turn = 15 % 4\n    return fred_first_turn\n\nans = solution()"
    ],
    "f61b518525e8497db5343129a17e8632": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tom_age = symbols('tom_age')\n    dad_age = 43\n    equation = Eq(dad_age, 4 * tom_age - 5)\n\n    age = solve(equation, tom_age)\n\n    return age[0]\n\nans = solution()"
    ],
    "865d61c08ae7439db106bc956f814d22": [
        "def solution():\n    ans = 66666 * 66666\n    return ans\n\nans = solution()"
    ],
    "7c040f8b099e47f7b0e8c01b1cc4ecfb": [
        "def solution():\n    shirts = 3\n    pants = 2\n    dresses = 3\n    shoes = 4\n    heels = 2\n\n    outfit_with_pants = shirts * pants * shoes\n    outfit_with_dress_and_shoes = dresses * shoes\n    outfit_with_dress_and_heels = dresses * heels\n\n    total_outfits = outfit_with_pants + outfit_with_dress_and_shoes + outfit_with_dress_and_heels\n\n    return total_outfits\n\nans = solution()"
    ],
    "50918482ad34489a9d43a8fee8182902": [
        "def solution():\n    common_factor = 17\n    sum_of_coefficients = 2 + 3 + 5\n    result = common_factor * sum_of_coefficients\n    return result\n\nans = solution()"
    ],
    "d8b69834edec4cabaf8b61b1c0041fa7": [
        "def solution():\n    fraction = 3 / 20\n    decimal = 0.16\n    return fraction > decimal\n\nans = solution()"
    ],
    "a6f2ff602bea44d790a48701447b7788": [
        "def solution():\n    return 816 // 17\n\nans = solution()"
    ],
    "538a2dfa1040448b8789e3db2bc69bf4": [
        "def solution():\n    cupcakes = 90\n    eggs_per_15_cupcakes = 3\n\n    total_eggs = (cupcakes / 15) * eggs_per_15_cupcakes\n\n    return int(total_eggs)\n\nans = solution()"
    ],
    "087f11a4dea84aec80d825a39e619ea1": [
        "def solution():\n    students_skipping_rope = 40\n    students_long_jump = 31\n    students_both_events = 21\n\n    # students in only one event = total - students in both events\n    students_only_one_event = (students_skipping_rope + students_long_jump) - students_both_events\n\n    return students_only_one_event\n\nans = solution()"
    ],
    "68e2259a732c46c8abe672bceb53dfa2": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    # Generate all possible permutations for the five students\n    for perm in permutations('ABCDE'):\n        # Convert tuple to a string to use string methods\n        p = ''.join(perm)\n        # Check if A is in the middle of B and C\n        # We look for BAC, CAB, or positions where B and C are separated\n        # by one or more students and A is in the middle\n        if p.index('A') > p.index('B') and p.index('A') < p.index('C') or \\\n           p.index('A') < p.index('B') and p.index('A') > p.index('C'):\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "05b887b14c214e5085156b2107ca9318": [
        "def solution():\n    return 74 * 15 * 8 * 250\n\nans = solution()"
    ],
    "39130411ca2f46d8be16d6a43fbef29b": [
        "def solution():\n    # Jogging time is from 6.30 am to 8.30 am, which is 2 hours\n    jogging_time = 2  # hours\n    # Walking time is from 8.30 am to 9.30 am, which is 1 hour\n    walking_time = 1  # hour\n    \n    # Jogging speed is 8 km per hour\n    jogging_speed = 8  # km/h\n    # Walking speed is half of jogging, which is 4 km per hour\n    walking_speed = jogging_speed / 2  # km/h\n\n    # Distance travelled while jogging\n    jogging_distance = jogging_speed * jogging_time\n    # Distance travelled while walking\n    walking_distance = walking_speed * walking_time\n\n    # Total distance travelled\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "fba5e5ffd4b2401fb75dcd70694a4470": [
        "def solution():\n    count = 0\n    # Three-digit palindromic numbers are in the form of 'aba'\n    # 'a' can be from 1 to 9 (since it's three digits, it can't be 0)\n    # 'b' can be from 0 to 9\n    # So for each value of 'a', there are 10 choices for 'b'\n    for a in range(1, 10):\n        for b in range(0, 10):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "49c26db5eaf641e1a5d1fedde5e7be96": [
        "def solution():\n    last_digit_2s = (2 ** 100) % 10\n    last_digit_7s = (7 ** 100) % 10\n    last_digit_9s = (9 ** 100) % 10\n\n    ans = (last_digit_2s * last_digit_7s * last_digit_9s) % 10\n    return ans\n\nans = solution()"
    ],
    "f5367d282a3a43acbe086861a0f6d129": [
        "def solution():\n    def diamond(M, N):\n        return M * N + N + 1\n\n    def square(M, N):\n        return 8 * M - N * N\n\n    ans = square(diamond(7, 6), 9)\n    \n    return ans\n\nans = solution()"
    ],
    "f945574dc9954c9b93f6e0ecf99884de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's assume there are 'n' notes of each denomination in the purse\n    n = symbols('n')\n    \n    # Equation representing the total value: 5*n + 10*n + 20*n = 280\n    equation = Eq(5 * n + 10 * n + 20 * n, 280)\n    \n    # Solve for n\n    solution = solve(equation, n)[0]\n    \n    # Total number of notes = number of £5 notes + number of £10 notes + number of £20 notes = n + n + n = 3n\n    total_notes = 3 * solution\n    \n    return total_notes\n\nans = solution()"
    ],
    "14305f680d27486a905dd8dc12e89924": [
        "from sympy import isprime\n\ndef solution():\n    p = 2  # starting with the smallest prime\n    while True:\n        if isprime(p) and isprime(p + 107):\n            return p\n        p += 1\n\nans = solution()"
    ],
    "9e090b3df83a42eebe23be5e23c2fa04": [
        "def solution():\n    n = (19 + 1) // 2  # Since we are dealing with only odd squares, the nth term will be the number of odd numbers up to 19\n    ans = (1/6) * n * (n + 1) * (2*n + 1)\n    return int(ans)\n\nans = solution()"
    ],
    "1efe483e70024fb2ab2678147636e373": [
        "def solution():\n    import math\n    students = 92\n    minibus_capacity = 6\n    num_minibuses = math.ceil(students / minibus_capacity)\n    return num_minibuses\n\nans = solution()"
    ],
    "6136c35f10c146b6933727bbeae9cc0f": [
        "def solution():\n    # Since there are 4 piles and each pile must have a different number of marbles\n    # The maximum number for the largest pile is reduced accordingly    \n    for largest in range(16, 0, -1):  # Start from 16 and decrement to find the largest pile\n        for second_largest in range(largest - 1, 0, -1):  # Second largest must be smaller than largest\n            for third_largest in range(second_largest - 1, 0, -1):  # Third largest must be smaller than second\n                smallest = 16 - (largest + second_largest + third_largest)  # Calculate smallest pile\n                if smallest < third_largest:  # Smallest must be smaller than third largest\n                    return largest\n                \nans = solution()"
    ],
    "9cf8631bfbee42e5855a61e09bcd4e80": [
        "def solution():\n    # let the time taken to climb one floor be x minutes\n    # we can then define the following:\n    # 3x = 12 (since it takes 12 minutes to go from first to fourth floor, which is 3 floors)\n    # we solve for x to find the time for one floor\n    \n    time_one_floor = 12 / 3\n\n    # The time to go from the first floor to the second floor\n    # is just the time it takes to go one floor, which is x\n    time_first_to_second = time_one_floor\n\n    return time_first_to_second\n\nans = solution()"
    ],
    "d10979d095f949d99d2f66996f58a6b3": [
        "def solution():\n    ans = 24 / 100 * 25\n    return ans\n\nans = solution()"
    ],
    "28743e9e9f164cf594fa43bdd40cccc5": [
        "def solution():\n    # Correct average height\n    correct_avg_height = 163\n    # Incorrect average height\n    incorrect_avg_height = 159\n    # Height recorded incorrectly\n    incorrect_height_recorded = 126\n    # Correct height that should have been recorded\n    correct_height = 162\n\n    # Difference caused by the incorrect recording\n    height_difference = correct_height - incorrect_height_recorded\n\n    # Number of girls can be calculated by dividing the total height difference caused by the error\n    # by the difference in average heights (multiplied by number of girls).\n    number_of_girls = height_difference / (correct_avg_height - incorrect_avg_height)\n\n    return int(number_of_girls)\n\nans = solution()"
    ],
    "ea6e646ea13c4df596eb009a1fcb24c6": [
        "def solution():\n    ans = 12345679 * 63\n    return ans\n\nans = solution()"
    ],
    "9787f436650643b8bcdc8f3423f5efd0": [
        "def solution():\n    def new_operation(a, b):\n        return a * b - 2 * a + 4\n\n    ans = 200\n    for b in range(199, 0, -1):\n        ans = new_operation(ans, b)\n        \n    return ans\n\nans = solution()"
    ],
    "473c8349035b4eefb0b4f9931022b96c": [
        "def solution():\n    # The sum of cubes formula is (1^3 + 2^3 + 3^3 + ... + n^3) = (1 + 2 + 3 + ... + n)^2\n    # But we only want the sum of cubes of odd numbers: 1^3, 3^3, 5^3, ..., 13^3\n    # We notice that the sum of the first n odd numbers is n^2:\n    # 1 = 1^2, 1+3 = 2^2, 1+3+5 = 3^2, ..., 1+3+5+...+(2n-1) = n^2\n    # Hence we are looking for the sum (1^3 + 3^3 + 5^3 + ... + (2n-1)^3)\n    # which corresponds to summing the cubes of the first n odd numbers (n=7 for 1 to 13)\n\n    # Calculate the sum of the first n natural numbers and then square it to get the sum of cubes\n    n = (13 + 1) // 2  # (13 is the last odd number in the series, so n = (13+1)/2)\n    sum_of_naturals = n * (n + 1) // 2\n    sum_of_cubes = sum_of_naturals ** 2\n\n    return sum_of_cubes\n\nans = solution()"
    ],
    "ddc124ebdf394e27ba7e0a2f7f5a5377": [
        "def solution():\n    # This is a telescoping series, so consecutive terms will cancel out\n    # The general term is: (n^2 + (n+1)^2) / (n * (n+1))\n    # This simplifies to: ((n^2 + (n^2 + 2n + 1)) / n(n+1)\n    # Which further simplifies to: (2n^2 + 2n + 1) / n(n+1)\n    # Splitting the terms: (2n^2/n(n+1)) + (2n/n(n+1)) + (1/n(n+1))\n    # Simplified to: 2/(n+1) + 2/n(n+1) + 1/n(n+1)\n    # The 2/(n+1) cancels out with 2/n in the next fraction, and 1/n(n+1) cancels with -1/(n+1)(n+2)  \n    # So we are only left with the first fraction's numerator and the last fraction's denominator after canceling\n    \n    first_numerator = 1 ** 2\n    last_denominator = 2007 * 2008\n    \n    # Compute the sum of the two terms that do not cancel out\n    sum_non_canceling_terms = first_numerator + 2008 ** 2\n    \n    # Divide by the denominator to get the final result\n    ans = sum_non_canceling_terms / last_denominator\n    \n    # Round to the nearest whole number\n    return round(ans)\n\nans = solution()"
    ],
    "24dce9b709594b28a5a36bcec14da54f": [
        "from fractions import Fraction\n\ndef solution():\n    result = Fraction(1, 1)\n    for i in range(2, 10):\n        result *= Fraction(1, 1) + Fraction(1, i)\n    ans = result\n    return ans\n\nans = solution()"
    ],
    "262f4235c15a48d8867e110f1ec25448": [
        "def solution():\n    total_apples = 37\n    apples_per_container = 4\n\n    num_containers = -(-total_apples // apples_per_container)\n\n    return num_containers\n\nans = solution()"
    ],
    "a1026833d23d4e0d9b3d3b7fc72eed9b": [
        "def solution():\n    from math import gcd\n\n    length1 = 56\n    length2 = 42\n    length3 = 84\n\n    ans = gcd(gcd(length1, length2), length3)\n\n    return ans\n\nans = solution()"
    ],
    "c464a13a5fa84a98b5f96b4da026c8ac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ken, beth = symbols('ken beth')\n\n    equation1 = Eq(ken, beth + 75)\n    equation2 = Eq(4/5 * beth, 2/5 * ken)\n\n    solutions = solve((equation1, equation2), (ken, beth))\n\n    total_seashells = solutions[ken] + solutions[beth]\n\n    return total_seashells\n\nans = solution()"
    ],
    "15dbd49938d249928c98f4f1fcb84fee": [
        "def solution():\n    initial_number = 9876543\n    ans = initial_number + 10000\n    return ans\n\nans = solution()"
    ],
    "83bd57b5f2044e249a35cf1dc299b27f": [
        "def solution():\n    mark = 26\n    sue = mark / 2\n    total = mark + sue\n    return total\n\nans = solution()"
    ],
    "16569fabb3364f8488579e555b7c2701": [
        "from fractions import Fraction\n\ndef solution():\n    # Calculate the sum of the fractions\n    result = sum(Fraction(1, d) for d in range(1, 6))\n\n    # Return A which is the numerator when the sum is expressed as a fraction over 60\n    ans = result.numerator if result.denominator == 60 else result.numerator * (60 // result.denominator)\n    \n    return ans\n\nans = solution()"
    ],
    "24e6a79cbcf3471baf6993ecdd2917eb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of $10 notes, and y be the number of $2 notes\n    x, y = symbols('x y')\n\n    # Given conditions\n    total_notes = Eq(x + y, 40)\n    spent_notes = Eq(0.4 * x * 10 + 0.25 * y * 2, 40)  # The value of the gift\n    remaining_ratio = Eq((x - 0.4 * x) / (y - 0.25 * y), 4/5)  # After spending, the ratio of $10 to $2 notes\n\n    # Solve the system of equations\n    solutions = solve((total_notes, spent_notes, remaining_ratio), (x, y))\n\n    # Calculate the value of the gift\n    gift_value = 0.4 * solutions[x] * 10 + 0.25 * solutions[y] * 2\n\n    return gift_value\n\nans = solution()"
    ],
    "8ffc9bb3b9b14815bbbef4f710602d07": [
        "def solution():\n    # We're looking for a square number that is 2 less than a cube number and less than 50.\n    # Hence, we need to check each square number less than 50 and see if it is two less than a cube number.\n    for i in range(1, 8): # 7^3 = 343 which is larger than 50, so we only consider cube numbers with base up to 7\n        cube_number = i ** 3\n        square_number = cube_number - 2\n        \n        # Since we are interested in square numbers, we check if the square_number is indeed a perfect square\n        root = square_number ** 0.5\n        if root.is_integer():\n            return int(square_number)  # Return the perfect square number\n\nans = solution()"
    ],
    "9fad48b32dd54f7d8f6c57a2e1c1c739": [
        "from math import comb\n\ndef solution():\n    # 13 oranges - 2 oranges for each kid (since each must get at least two)\n    # This leaves us 13 - 3*2 = 7 oranges to distribute.\n    oranges_left = 13 - 3 * 2\n    \n    # We will use stars and bars method to divide the remaining oranges\n    # We have 7 oranges (stars) to place into 3 partitions (kids) with 2 bars\n    # This is equivalent to the number of ways to arrange 7 stars and 2 bars\n    # which is C(n+k-1, k-1) where n is the number of stars and k the number of bars\n    ans = comb(oranges_left + 3 - 1, 3 - 1)\n    return ans\n\nans = solution()"
    ],
    "7902f1d486d74393bc7de12711dcb3ff": [
        "def solution():\n    n = 2009\n    return n - 1\n\nans = solution()"
    ],
    "249ff97ab0a04659a46ad1e415926b19": [
        "def solution():\n    answer = (7/8) * 32\n    return answer\n\nans = solution()"
    ],
    "6c29f3b41d5a4f7889347840102cd90e": [
        "def solution():\n    ans = 342 // 6\n    return ans\n\nans = solution()"
    ],
    "48f99615d7554b569d6065aa09ad29fe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    # Original equation with correct sum\n    equation1 = Eq(x + y, 11.63)\n    # Equation with decimal shifted\n    equation2 = Eq(x + y/10, 5.87)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Difference between the two numbers\n    difference = abs(solutions[x] - solutions[y])\n\n    # The question asks for 100 times the difference\n    return int(difference * 100)\n\nans = solution()"
    ],
    "97c6599317ae40c0a130a7c36adb4b0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bill, son, father = symbols('bill son father')\n\n    equation1 = Eq(bill, 2 * son)\n    equation2 = Eq(son, father - 50)\n    equation3 = Eq(bill + son + father, 142)\n\n    solutions = solve((equation1, equation2, equation3), (bill, son, father))\n\n    return solutions[bill]\n\nans = solution()"
    ],
    "c1ee40d11fbd48de808886c4e3c9346a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    licia, krisnam, imran = symbols('licia krisnam imran')\n\n    equation1 = Eq(licia, 3 * krisnam)\n    equation2 = Eq(imran, licia + 138)\n    equation3 = Eq(licia + krisnam + imran, 2238)\n\n    solutions = solve((equation1, equation2, equation3), (licia, krisnam, imran))\n\n    return solutions[imran]\n\nans = solution()"
    ],
    "fc2dc1ff01c442ee8bac9a42520f29e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    # Let s represent Sally's current age, and j represent John's current age\n    s, j = symbols('s j')\n\n    # Equation representing the relationship in 3 years' time\n    equation1 = Eq(s + 3, 6 * (j + 3))\n    \n    # Equation representing their total current age\n    equation2 = Eq(s + j, 50)\n\n    # Solving the two equations\n    solutions = solve((equation1, equation2), (s, j))\n\n    # Returning Sally's current age\n    return solutions[s]\n\nans = solution()"
    ],
    "06973ad362db4d66ba9d6b002e663ba0": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 4):\n        P, A, S, O = perm\n        if P != 0:  # P cannot be 0 as it is the first digit\n            PASO = 1000*P + 100*A + 10*S + O\n            SOPA = 1000*S + 100*O + 10*P + A\n            if PASO - SOPA == 8805:\n                return PASO\n\nans = solution()"
    ],
    "80475a976f7b497ab82f076e94c1eb50": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 7 == 1 and num % 9 == 5:\n            return num\n\nans = solution()"
    ],
    "a509801c05d046ddbb0f80cbc8f2de96": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    harry, liam = symbols('harry liam')\n    total_water = 640\n    transferred_water = 90\n\n    # Equations based on the problem statement\n    equation1 = Eq(harry + liam, total_water)\n    equation2 = Eq(harry + transferred_water, 3 * (liam - transferred_water))\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (harry, liam))\n\n    return solutions[harry]\n\nans = solution()"
    ],
    "eaa3bd18a64e40968b71f7429893a5f4": [
        "def solution():\n    daily_increase = 3\n    monday_questions = 3\n    days = 7\n\n    total_questions = sum(monday_questions + daily_increase * (day - 1) for day in range(1, days + 1))\n\n    return total_questions\n\nans = solution()"
    ],
    "9402dca5a2494aaa90174d3dcc2b38f6": [
        "def solution():\n    ans = 7.55 + 6.32 + 6.45 - 5.32\n    return ans\n\nans = solution()"
    ],
    "5538dcae57d5405daf57ad4e6cbaefbe": [
        "def solution():\n    increment_per_hour = (28 - 20)\n    beans_at_8 = 20 - increment_per_hour\n\n    return beans_at_8\n\nans = solution()"
    ],
    "e889a2076f404fb8b48259549449cd54": [
        "def solution():\n    ans = sum(range(1, 10)) + 7\n    return ans\n\nans = solution()"
    ],
    "37ff6eaa86e84fce88804835c34d1857": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    man_rate = 1/15                       # Man's rate of drinking (barrel/day)\n    together_rate = 1/12                  # Together rate of drinking (barrel/day)\n    wife_rate = symbols('wife_rate')      # Wife's rate of drinking (barrel/day)\n    \n    equation = Eq(man_rate + wife_rate, together_rate) # Equation representing their rates combined\n    \n    # Solve for wife's rate\n    solutions = solve(equation, (wife_rate))\n    \n    # Calculate how many days wife takes to finish the barrel alone\n    wife_days = 1 / solutions[wife_rate]\n\n    return wife_days\n\nans = solution()"
    ],
    "2168499404134fc2adf349c4200b2d1b": [
        "from itertools import product\n\ndef solution():\n    count = 0\n    for white in range(1, 7): # Since we want at least 3 whites left, and at most 8, we can pick between 1 to 6 whites\n        for red in range(2, 4): # Since at least 2 reds should be left, we can pick 1 to 3 red balls\n            for black in range(0, 4): # Since at most 3 blacks should be left, we can pick 0 to 3 black balls\n                if white + red + black == 10: # We have to pick exactly 10 balls\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ef3f3f94225949a58df726e58eb69b6c": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "6cb9a183b95a46fb81d725bba4fbd059": [
        "def solution():\n    remainder = (2 ** 10) % 3\n    return remainder\n\nans = solution()"
    ],
    "de889839b5114b1296f34ad36b21626e": [
        "def solution():\n    count = 0\n    for i in range(1, 10):  # First digit must be from 1 to 9 for a three-digit number\n        for j in range(10):  # Second digit must be from 0 to 9\n            for k in range(10):  # Third digit must be from 0 to 9\n                if i + j + k == 6:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "bf0d9139a15044e2ba9ab0bab0208c0f": [
        "def solution():\n    insect_length_cm = 5\n    snake_length_m = 1\n    snake_length_cm = snake_length_m * 100\n\n    ans = snake_length_cm / insect_length_cm\n    return ans\n\nans = solution()"
    ],
    "89ff81f6b03f4a6eb38de4755a3e7b7a": [
        "def solution():\n    n = 1  # Initial index\n    term = 1  # Initial term of the sequence\n    while True:\n        next_term = term + 2 * n  # Generate next term\n        if next_term > 99:  # Check if next term is a three-digit number\n            break\n        term = next_term  # Update term to the next term\n        n += 1  # Increment n to generate the next term in the sequence\n    \n    return term  # Largest two-digit number in the sequence\n\nans = solution()"
    ],
    "395df03e3da54196a51c7ff3b7a39d90": [
        "def solution():\n    initial_mean = 120\n    final_mean = 150\n    \n    total_initial = initial_mean * 3\n    total_final = final_mean * 4\n    \n    fourth_number = total_final - total_initial\n    \n    return fourth_number\n\nans = solution()"
    ],
    "33e3182a110545e4aac441cab30efd1b": [
        "def solution():\n    initial_mass = 2.3\n    given_away = 0.76\n    remaining_mass = initial_mass - given_away\n    return round(remaining_mass, 1)\n\nans = solution()"
    ],
    "53089c6bd249446b8b0196fbb0b9703a": [
        "def solution():\n    ans = 372 * 6\n    return ans\n\nans = solution()"
    ],
    "b9d47fcf7dbb40338318bab5201d44a1": [
        "def solution():\n    # Let x be the total number of pearls\n    # According to the problem,\n    # half of the pearls fell onto the floor (x / 2),\n    # a fourth rolled under a chair (x / 4),\n    # a sixth fell into her lap (x / 6),\n    # and 3 pearls remained on the strand.\n    # The sum of these should equal the total number of pearls x.\n\n    # Set up the equation\n    # x / 2 + x / 4 + x / 6 + 3 = x\n    # Multiply through by the LCM of denominators 2, 4, and 6, which is 12,\n    # to clear the fractions:\n    # 6x + 3x + 2x + 36 = 12x\n    \n    # Simplify and solve for x:\n    # 11x + 36 = 12x\n    # 36 = x\n    \n    x = 36  # The number of pearls originally on the strand\n    return x\n\nans = solution()"
    ],
    "3fa1ccdaf7494491b72d7cb7bb7823d5": [
        "def solution():\n    full_weight = 80\n    half_full_weight = 60\n    half_mangoes_weight = half_full_weight - (full_weight / 2)\n    empty_basket_weight = full_weight - 2 * half_mangoes_weight\n\n    return empty_basket_weight\n\nans = solution()"
    ],
    "cc6e6ddc9099471392da17b986cd942e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Our congruences are [remainder, modulus]\n    # Since we want multiples, the remainders are 0\n    # First number is even and a multiple of 7 => it is a multiple of 14\n    # Second number is multiple of 8 and is 2 more than the first (consecutive even numbers)\n    # Third number is a multiple of 9 and is 4 more than the first\n    congruences = [(0, 14), (2, 8), (4, 9)]\n\n    # Using the Chinese Remainder Theorem to solve the system of congruences\n    solution = solve_congruence(*congruences)\n    \n    return sum(solution[0])  # The sum of the numbers\n\nans = solution()"
    ],
    "cd7290c100ba4294b7ef33d6d31bec83": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 5), (4, 6), (1, 7)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "14ae67b1d73847249fcea1dbc5eda7df": [
        "def solution():\n    first_term = 10\n    fourth_term = 25\n    num_rows = 25\n\n    common_difference = (fourth_term - first_term) // (4 - 1)\n\n    last_term = first_term + (num_rows - 1) * common_difference\n\n    total_athletes = (first_term + last_term) * num_rows // 2\n\n    return total_athletes\n\nans = solution()"
    ],
    "d398f7f40bb64d5fb8ef87ec0477dcf5": [
        "def solution():\n    total_age_family = 6 * 29  # Average age * number of family members\n    total_age_parents = total_age_family - 64  # Total age of the family - total age of children\n    average_age_parents = total_age_parents / 2  # There are two parents\n\n    # Average age of parents 3 years ago\n    average_age_parents_3_years_ago = average_age_parents - 3\n\n    return average_age_parents_3_years_ago\n\nans = solution()"
    ],
    "257342f894034d4f8d8102d254731724": [
        "def solution():\n    total_paintings_done = 35\n    days_spent = 5\n    total_paintings_goal = 56\n    \n    paintings_per_day = total_paintings_done / days_spent\n    total_days_needed = total_paintings_goal / paintings_per_day\n    additional_days_needed = total_days_needed - days_spent\n\n    return int(additional_days_needed)\n\nans = solution()"
    ],
    "524b8c04c5894f029a0397c7af386fd8": [
        "def solution():\n    lhs_sum = 3 + 3 + 3 + 3 + 3 + 3 + 3 + 3\n    rhs_multiple = lhs_sum // 3  # Use integer division to find the multiplier\n    return rhs_multiple\n\nans = solution()"
    ],
    "4d3f432b490949d3925832026d9e4a66": [
        "def solution():\n    # Let's denote the total number of children in the queue as n.\n    # Pip was the 6th from the front, so there are 5 children in front of Pip.\n    # Bud was the 6th from the end, so there are 5 children behind Bud.\n    # Counting from Pip to Bud, there are 5 children in between.\n    # Therefore, the number of children from the very front to Bud is 5 (in front of Pip) + 1 (Pip) + 5 (between Pip and Bud) + 1 (Bud).\n    # So the number of children before the end (excluding those after Bud) is 5 + 1 + 5 + 1 = 12.\n    # Including the 5 children behind Bud, the total number of children in the queue is 12 (up to Bud) + 5 (behind Bud) = 17.\n    \n    ans = 12 + 5\n    return ans\n\nans = solution()"
    ],
    "63e2e26e1682446aac1d93fad30b5007": [
        "def solution():\n    num_papers = 18\n    interval = 3\n    num_leaves = num_papers // interval\n    \n    return num_leaves\n\nans = solution()"
    ],
    "155a2124ddcf40f9b74dff87ab3c4f69": [
        "def solution():\n    return 95 * (37 + 42 + 21)\n\nans = solution()"
    ],
    "e4deea45600b48659f31a194ff56e172": [
        "def solution():\n    return 35 * 24\n\nans = solution()"
    ],
    "dc8c93a375a54464922a54b1b49ff957": [
        "def solution():\n    # Given information\n    term5 = 8\n    term12 = 50\n    \n    # Using the formula for arithmetic progression: a_n = a_1 + (n-1)*d\n    # We have two equations:\n    # term5 = a_1 + 4*d  => 8 = a_1 + 4*d\n    # term12 = a_1 + 11*d => 50 = a_1 + 11*d\n    \n    # We can find the common difference by subtracting the two equations\n    # (term12 - term5) = (a_1 + 11*d) - (a_1 + 4*d)\n    # 50 - 8 = 11*d - 4*d\n    # 42 = 7*d\n    # d = 42 / 7\n    common_difference = (term12 - term5) / (12 - 5)\n    \n    # Return the common difference\n    return common_difference\n\nans = solution()"
    ],
    "54fd381d66a4495b81ec629060372915": [
        "import itertools\n\ndef solution():\n    times = [7, 9, 4, 10]\n    shortest_time = float('inf')\n\n    # To minimize time, always send the fastest rower with others and brings the boat back\n    fastest_rower = min(times)\n    \n    # Generate all possible pairings for the first trip\n    for pair in itertools.combinations(times, 2):\n        # Time taken for the first trip by the pair\n        first_trip_time = max(pair)\n        \n        # Remaining people after the first trip\n        remaining = list(set(times) - set(pair))\n        \n        # Send the fastest rower back\n        second_trip_time = fastest_rower\n\n        # Now, send the remaining two people together\n        third_trip_time = max(remaining)\n\n        # Bring the fastest rower back again\n        fourth_trip_time = fastest_rower\n\n        # Send the original pair across again\n        fifth_trip_time = first_trip_time\n\n        # Calculate the total time for this configuration\n        total_time = first_trip_time + second_trip_time + third_trip_time + fourth_trip_time + fifth_trip_time\n        \n        # Update if this is the shortest total time found so far\n        if total_time < shortest_time:\n            shortest_time = total_time\n\n    return shortest_time\n\nans = solution()"
    ],
    "f16ba08240ad425e89f61fc8df41e78f": [
        "def solution():\n    first_term = 2\n    term_difference = 3\n    last_term = 242\n    while last_term - first_term >= 2 * term_difference:\n        sum_of_three = first_term + (first_term + term_difference) + (first_term + 2 * term_difference)\n        first_term += 3 * term_difference\n        last_term = sum_of_three\n    second_term = first_term + term_difference\n    return second_term\n\nans = solution()"
    ],
    "e9e6206bf20f4a548fb5ea4a8b0d40b5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud, bob = symbols('pip bud bob')\n\n    equation1 = Eq((pip + bud) / 2, 30)\n    equation2 = Eq((pip + bob) / 2, 33)\n    equation3 = Eq((bud + bob) / 2, 36)\n\n    solutions = solve((equation1, equation2, equation3), (pip, bud, bob))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "b2a960366a1e4206865a6d0760704900": [
        "def solution():\n    numbers = [0.01, 0.08, 0.13, 0.2, 0.9]\n    target = 0.1\n    closest = min(numbers, key=lambda x: abs(x - target))\n    return closest\n\nans = solution()"
    ],
    "7a9b9029d5734b7c90666cccb4699070": [
        "def solution():\n    numbers = [29, 37, 76, 63, 24, 45, 61, 55]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "f3c93367205a456ea52d0000fc85cdec": [
        "def solution():\n    jacob = 1\n    sisters = 4\n    brothers = 3\n\n    total_children = jacob + sisters + brothers\n\n    return total_children\n\nans = solution()"
    ],
    "21925b1973084732a0bda763e78de8cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for x\n    x = symbols('x')\n\n    # Construct the equation 2x + 3x + 2 = 30 + 6x - 8x\n    equation = Eq(2 * x + 3 * x + 2, 30 + 6 * x - 8 * x)\n\n    # Solve the equation for x\n    solution_x = solve(equation, x)\n\n    # Since there's only one variable, the solution will be a list with one element\n    return solution_x[0]\n\nans = solution()"
    ],
    "4df4bcfe8431481b82ea6620cf995bdb": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.07\n    years = 5\n    value_after_years = initial_value * ((1 - depreciation_rate) ** years)\n    return value_after_years\n\nans = solution()"
    ],
    "80ae2580a9e14b43aeb41aca80397bf8": [
        "def solution():\n    original_people = 5\n    original_days = 15\n    target_days = 7\n    \n    work_per_person_per_day = 1 / (original_people * original_days)\n    total_work_required = 1\n    work_per_day_required = total_work_required / target_days\n\n    people_required = work_per_day_required / work_per_person_per_day\n    additional_people_needed = int(people_required) - original_people\n\n    # Since we want at least the number of people, we need to check if we need to round up\n    if people_required > int(people_required):\n        additional_people_needed += 1\n\n    return additional_people_needed\n\nans = solution()"
    ],
    "23b6320496c74802b1ab8fa3492896ab": [
        "def solution():\n    return 1.25 * 88\n\nans = solution()"
    ],
    "0447196e6c6246baa9661487a6cbd4c6": [
        "def solution():\n    ans = 672 // 8\n    return ans\n\nans = solution()"
    ],
    "8ddb5880b1e64f2d96621c773f4f7ace": [
        "def solution():\n    initial_temperature = -3\n    rise_per_hour = 2\n    hours_passed = 5.5\n\n    final_temperature = initial_temperature + rise_per_hour * hours_passed\n\n    return final_temperature\n\nans = solution()"
    ],
    "ea291fdb39c04d6bb392ebad4dae8604": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbols for the number of students in schools A and B\n    A, B = symbols('A B')\n\n    # Equation1: Total number of students before transfer is 1050\n    equation1 = Eq(A + B, 1050)\n\n    # Equation2: After transferring 20 students from A to B, A has 10 more students than B\n    equation2 = Eq(A - 20 - (B + 20), 10)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (A, B))\n\n    # Returning the original number of students in school A\n    return solutions[A]\n\nans = solution()"
    ],
    "caaa1eddd8e44bef93f25acbc57b8371": [
        "def solution():\n    return 12321 // 37\n\nans = solution()"
    ],
    "7e73704f04d44c6bb2d64ca0206cc145": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_time, reduced_time, distance, original_speed, reduced_speed = symbols('original_time reduced_time distance original_speed reduced_speed')\n    \n    # Maria's usual time to cover the distance = 30min and she is 5min late, so total time is 35min\n    total_time = 30 + 5\n    \n    # Reduced speed is 80% of original, so we write it as an equation\n    equation1 = Eq(reduced_speed, original_speed * 0.8)\n    \n    # Maria runs a part of the distance with original speed and the remaining with reduced speed\n    # The time it took her to run with her original speed is her original time\n    # The time it took her to run 2400m with reduced speed is 2400m divided by her reduced speed\n    equation2 = Eq(original_time + (2400 / reduced_speed), total_time)\n    \n    # The distance covered with original speed is equal to the original speed times the original time\n    # Total distance = distance covered with original speed + 2400m\n    equation3 = Eq(distance, original_speed * original_time + 2400)\n    \n    # Use the fact that if Maria had not reduced her speed she would have arrived in 30 minutes\n    equation4 = Eq(original_speed * 30, distance)\n    \n    # We solve the equations for the distance\n    solution = solve((equation1, equation2, equation3, equation4), (original_time, reduced_time, distance, original_speed, reduced_speed))\n    \n    return solution[distance]\n\nans = solution()"
    ],
    "38bf844b32b44c12972bb035ec388106": [
        "def solution():\n    # Maximum pencils that can be drawn without getting a green pencil:\n    max_without_green = 3  # all blue\n    max_without_green += 3  # all white\n\n    # To ensure getting a green pencil, draw one more pencil:\n    return max_without_green + 1  # at least one green\n\nans = solution()"
    ],
    "1cfc58120fbc40b6bf8247588930f7c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total amount Mrs Chan had initially\n    x = symbols('x')\n\n    # After spending half plus $1 in shop A\n    remaining_after_A = (x / 2) - 1\n\n    # After spending half of the remaining plus $2 in shop B\n    remaining_after_B = (remaining_after_A / 2) - 2\n\n    # After spending 1/3 of the remaining plus $3 in shop C, she has $49 left\n    remaining_after_C = (remaining_after_B / 3) - 3\n\n    # Set up the equation based on the remaining money after shopping in shop C\n    equation = Eq(remaining_after_B - 3 * remaining_after_C, 49)\n\n    # Solve for x\n    ans = solve(equation, x)\n\n    return ans[0]\n\nans = solution()"
    ],
    "bb1f1a78e8b14c55b2e4ca48c347db8c": [
        "def solution():\n    total_students = 32\n    fraction_boys = 3 / 4\n    number_of_boys = total_students * fraction_boys\n    number_of_girls = total_students - number_of_boys\n\n    return int(number_of_girls)\n\nans = solution()"
    ],
    "28774179acd44fbdaf5d40e780523af5": [
        "def solution():\n    # Total number of books\n    total_books = 280\n    # Difference between the number of books on each shelf\n    difference = -3\n    # There are seven shelves, forming an arithmetic sequence.\n    num_shelves = 7\n\n    # Let the number of books on the top shelf be x.\n    # Then the total number of books is given by the sum of an arithmetic series:\n    # total_books = n/2 * (2*a + (n-1)*d)\n    # Solving for a (number of books on the top shelf):\n    # 280 = 7/2 * (2*x + (7-1)*(-3))\n    # Simplify to find x.\n    x = total_books / num_shelves * 2 - sum([difference * i for i in range(num_shelves-1)])\n    \n    return x\n\nans = solution()"
    ],
    "02bc5b84f38e437d928aa61c776bd24c": [
        "from math import lcm\n\ndef solution():\n    sweep = 3\n    mope = 5\n    cook = 9\n    clean = 3 * 7  # 3 weeks into days\n\n    return lcm(sweep, mope, cook, clean)\n\nans = solution()"
    ],
    "8b07fa55294340ce938279e09cfc9c8c": [
        "def solution():\n    total_students = 44\n    math_competition = 30\n    art_competition = 26\n\n    both_competitions = math_competition + art_competition - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "6650434a14d84648b471103d681433eb": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 2240 to get its prime factors and corresponding exponents\n    factors = factorint(2240)\n    \n    # For 2240/n to be a square, each prime factor's exponent must be even\n    # So, we need to make the current odd exponents even by multiplying them by 2\n    # The value of n would be the product of such adjustments\n    \n    n = 1\n    for prime, exponent in factors.items():\n        if exponent % 2 != 0:  # Check if exponent is odd\n            n *= prime  # Multiply n by the prime to make exponent even\n\n    return n\n\nans = solution()"
    ],
    "a3f51789234d477fb06391f3a221a5f8": [
        "def solution():\n    ans = 22 * 125 * 8\n    return ans\n\nans = solution()"
    ],
    "3610afbddbce47998aebfb515c853f57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candies, kids = symbols('candies kids')\n\n    # If every kid eats 18 candies, then 12 more candies are needed.\n    equation1 = Eq(candies, kids * 18 - 12)\n\n    # If every kid eats 15 candies, the candies are just enough to be distributed to 2 more kids.\n    equation2 = Eq(candies, (kids + 2) * 15)\n\n    solutions = solve((equation1, equation2), (candies, kids))\n\n    return solutions[candies]\n\nans = solution()"
    ],
    "0e28012c7afd408599dee757d5a607e6": [
        "def solution():\n    def page_number_sum(n):\n        sum_digits = 0\n        for page in range(1, n + 1):\n            sum_digits += sum(int(digit) for digit in str(page))\n        return sum_digits\n    \n    ans = page_number_sum(310)\n    return ans\n\nans = solution()"
    ],
    "2a7407914fcd4db5b094cbb7fb4b2b91": [
        "def solution():\n    items_cost = 6.30 / 9\n    total_cost = items_cost * 11\n    return total_cost\n\nans = solution()"
    ],
    "e351511a62494ba0991dc2cdd9255710": [
        "def solution():\n    avril_age_now = 8\n    dad_age_now = 5 * avril_age_now\n\n    avril_age_2_years_ago = avril_age_now - 2\n    dad_age_2_years_ago = dad_age_now - 2\n\n    age_difference = dad_age_2_years_ago - avril_age_2_years_ago\n\n    return age_difference\n\nans = solution()"
    ],
    "12630e7ba91647e9a662b2150bd08918": [
        "def solution():\n    from math import pow, sqrt\n\n    expression = 16.7 - pow((pow(-4.56, 2)-pow(8.1, 3))/pow(7.2, 3)/(-sqrt(6 + 3/4) + 30.15), 1/3)\n    ans = round(expression, 3)\n\n    return ans\n\nans = solution()"
    ],
    "dea0d88a56c14c18bf792f9e1d676070": [
        "def solution():\n    # Let \"n\" be the number of years later when the sum of their ages will be 48\n    # Oliver's age n years later will be 20 + n\n    # Lin's age n years later will be 26 + n\n    # Their combined age n years later will be (20 + n) + (26 + n)\n    n = symbols('n')\n    equation = Eq((20 + n) + (26 + n), 48)\n\n    solution = solve(equation, n)\n    return solution[0]\n\nans = solution()"
    ],
    "f3a192a1a028460aa34b249e7e3af6b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mr_lim, mrs_lim = symbols('mr_lim mrs_lim')\n\n    # Equation based on the given ratio 7 years ago\n    equation1 = Eq((mr_lim - 7) / (mrs_lim - 7), 6/5)\n    # Equation based on the sum of their current ages\n    equation2 = Eq(mr_lim + mrs_lim, 69)\n\n    solutions = solve((equation1, equation2), (mr_lim, mrs_lim))\n\n    return solutions[mr_lim]\n\nans = solution()"
    ],
    "2ef9562fe8a044c3af3451bfe10a4c3b": [
        "def solution():\n    # mean of 5 students is 87\n    total_score_of_5_students = 87 * 5\n    # mean of all 6 students will be 88\n    total_score_of_6_students = 88 * 6\n    # Jim's score is the difference between the total for 6 students and the total for 5 students\n    jims_score = total_score_of_6_students - total_score_of_5_students\n    return jims_score\n\nans = solution()"
    ],
    "914f071ea10440cebf9dbe8becbdbc9d": [
        "def solution():\n    numbers = [58, 63, 59, 62, 63, 56, 61]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "7f06cc0235094faaa81a0a2fb9cab606": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for stickers\n    sam, peter, john = symbols('sam peter john')\n\n    # Define the equations based on the problem statement\n    # Ratio of stickers between Sam and Peter\n    equation1 = Eq(sam, 7/5 * peter)\n\n    # Sam and Peter give 20% of their stickers to John\n    equation2 = Eq(sam - 0.20 * sam, john + 0.20 * sam)\n    equation3 = Eq(peter - 0.20 * peter, john + 0.20 * peter)\n\n    # John's stickers increased by 80%\n    equation4 = Eq(john * 1.80, sam * 0.20 + peter * 0.20 + john)\n\n    # Sam had 20 more stickers than John in the end\n    equation5 = Eq(sam - john, 20)\n\n    # Since three equations is enough to solve for three unknowns,\n    # we solve for `sam`, `peter`, and `john`\n    solutions = solve((equation1, equation2, equation4), (sam, peter, john))\n\n    # Extract the solution for Peter's stickers\n    return solutions[peter]\n\nans = solution()"
    ],
    "4a241f99a7b844b08c465d23e0993893": [
        "def solution():\n    one_fifth_length = 6\n    full_length = one_fifth_length * 5\n    one_third_length = full_length / 3\n    return one_third_length\n\nans = solution()"
    ],
    "b4b4e5c5437f4235a2a175fc8db815dd": [
        "def solution():\n    initial_price = 4200\n    first_discount = 0.10\n    second_discount = 0.20\n\n    price_after_first_discount = initial_price * (1 - first_discount)\n    final_price = price_after_first_discount * (1 - second_discount)\n\n    return final_price\n\nans = solution()"
    ],
    "34ba1fe6c4914c9988860c36d1caf4a3": [
        "def solution():\n    boys = 47\n    capacity = 6\n    minibusses_needed = (boys + capacity - 1) // capacity\n    return minibusses_needed\n\nans = solution()"
    ],
    "f42746b63c97449b9bd8019271c9ec21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_price_per_bat = 135\n    selling_price_per_bat = 185\n    remaining_bats = 3\n    total_profit = 2945\n\n    # Let x be the total number of bats initially purchased\n    x = symbols('x')\n\n    # Equation representing the total cost for x bats\n    total_cost_eq = Eq(x * initial_price_per_bat, (x - remaining_bats) * selling_price_per_bat - total_profit)\n\n    # Solve for x\n    total_bats_initially_purchased = solve(total_cost_eq, x)\n\n    return total_bats_initially_purchased[0]\n\nans = solution()"
    ],
    "457a726196e141089b3e12d90241956e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    raja, kumar = symbols('raja kumar')\n\n    # Setting up the equations according to the problem statement\n    equation1 = Eq(raja - 286, kumar - 109)\n    equation2 = Eq(4 * (raja - 286), kumar - 109)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (raja, kumar))\n\n    # Since both had the same amount at first, return either Raja's or Kumar's initial amount\n    return solutions[raja]\n\nans = solution()"
    ],
    "3518cc99e1f044c886a532f40ac85ca4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    table, chair = symbols('table chair')\n    equation1 = Eq(table, chair + 160)\n    equation2 = Eq(table + 5 * chair, 328)\n    \n    solutions = solve((equation1, equation2), (table, chair))\n    \n    return solutions[chair]\n\nans = solution()"
    ],
    "9da061efc392431dbe6794c1c302e8e3": [
        "def solution():\n    return 879 + 268\n\nans = solution()"
    ],
    "e61ecccd8d4e46a5bae3436df379fd8e": [
        "def solution():\n    # The speeds ratio of Jayden to Carter is 7:4.\n    # Let's denote Jayden's speed as 7k and Carter's speed as 4k.\n    # The total speed when they walk towards each other is 7k + 4k = 11k.\n    # Jayden meets Carter for the first time, the ratio of their distances traveled will be 7:4.\n    # Let d be the distance Jayden travels until the first meeting, \n    # then Carter travels (440 - d) meters and the ratio is d / (440 - d) = 7 / 4.\n    # Solving for d gives us d = 7/11 * 440.\n\n    # Jayden's distance until the first meeting:\n    d = (7/11) * 440\n    \n    # After first meeting, Jayden turns around and meets Carter again.\n    # At this point, Carter should have covered a distance of 2 * (440 - d).\n    # However, because Jayden turns around, they now approach each other\n    # with a relative speed of 11k again.\n    # We need to find the time t it takes for Carter to meet Jayden again,\n    # knowing that in this time, Jayden walks 7k * t and Carter walks 4k * t.\n    # Since they are 2 * (440 - d) meters apart, we have the equation:\n    # 7k * t + 4k * t = 2 * (440 - d)\n    # Using the fact that 11k * t = 2 * (440 - d), we find t.\n\n    # Carter's travel until the second meeting:\n    # Their relative speed would remain the same (11k), and they need to cover the\n    # remaining (440 - 2d) distance, where 2d is what Jayden has already walked.\n    remaining_distance = 440 - 2 * d\n    \n    # Using the ratio of speeds to find how far Carter travels\n    # We find distance_carter using the same ratio 7:4 which will give us how much they'll\n    # travel until the second meeting, using the remaining distance:\n    distance_carter = (4/11) * remaining_distance\n    \n    # The final distance from A will therefore be Jayden's first distance minus\n    # the distance Carter traveled in the same time.\n    final_distance_from_A = d + distance_carter\n    \n    return final_distance_from_A\n\nans = solution()"
    ],
    "5b0b415f20824bf48a8768e9f5d5ec26": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n\n    equation1 = Eq(triangle + triangle, square)\n    equation2 = Eq(square + triangle, circle)\n    equation3 = Eq(diamond, circle + square + triangle)\n\n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n\n    return solutions[diamond] / solutions[triangle]\n\nans = solution()"
    ],
    "b36b7952db0b4b93a6507a61d91c0d4d": [
        "def solution():\n    total_sum = 10 * 1111\n    mean_difference = 240\n\n    sum_first_4 = 4 * (1111 - mean_difference)\n    sum_last_6 = total_sum - sum_first_4\n  \n    mean_last_6 = sum_last_6 / 6\n    return mean_last_6\n\nans = solution()"
    ],
    "0851ade8e456416a88c4d9132c4034de": [
        "def solution():\n    pip_money = 60 / 100  # Convert pence to pounds\n    bud_money = 1.10  # Bud's money is already in pounds\n    total_money = pip_money + bud_money\n    return total_money\n\nans = solution()"
    ],
    "bc4b9a02e5f940dead7da75f6c772177": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cold_rate, hot_rate = symbols('cold_rate hot_rate')\n\n    # Equation when both taps are filling together\n    equation1 = Eq(1 / (cold_rate + hot_rate), 10)\n\n    # Given condition stating the cold tap's rate is twice the hot tap's rate\n    equation2 = Eq(cold_rate, 2 * hot_rate)\n\n    # Solve the equations to find the rates of the cold and hot taps\n    rates = solve((equation1, equation2), (cold_rate, hot_rate))\n\n    # Calculate the time to fill the bath when using just the cold tap\n    time_cold_tap = 1 / rates[cold_rate]\n\n    return time_cold_tap\n\nans = solution()"
    ],
    "de8e499d6ea74617b2a986394b5a5443": [
        "def solution():\n    lori_speed = 2  # Lori's speed (m/s)\n    ratio_jocye_to_lori = 3 / 2  # Jocye's speed ratio to Lori's\n    \n    # Calculate Jocye's speed based on the ratio and Lori's speed\n    jocye_speed = lori_speed * ratio_jocye_to_lori\n    \n    # Calculate the distance Jocye can run in 10 seconds\n    time_seconds = 10\n    distance_jocye_runs = jocye_speed * time_seconds\n    \n    return distance_jocye_runs\n\nans = solution()"
    ],
    "779ed1e319ae4389b632ed4de525a437": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    I, S, P = symbols('I S P', integer=True)\n\n    # Creating the equation based on the problem statement\n    equation = Eq(I*111 + S*111, P*10 + I)\n\n    # Setting the domain for the digits\n    digits = range(10)\n\n    # Initialize the answer variable as None\n    ans = None\n\n    for i in digits:\n        for s in digits:\n            for p in digits:\n                if i != s and i != p and s != p:  # Ensure all digits are different\n                    sol = solve((equation.subs(I, i).subs(S, s).subs(P, p)), (P, I))\n                    # Check if the solution is valid\n                    if sol[P].is_Integer and sol[P] != i and sol[P] != s and sol[P] in digits:\n                        ans = sol[P]*10 + i\n                        return ans\n\nans = solution()"
    ],
    "1f8c8ba64a594dd29927d99fdf51836d": [
        "def solution():\n    # Calculate the time it takes for each part of the race\n    time_first_part = 280 / 7  # time = distance / speed\n    time_middle_part = 400 / 5  # time = distance / speed\n    # Find out the remaining distance for the sprint stage\n    sprint_distance = 800 - (280 + 400)  # total distance - (first part + middle part)\n    time_sprint_part = sprint_distance / 8  # time = distance / speed\n\n    # Now, sum the time for each part to find the total time spent\n    total_time = time_first_part + time_middle_part + time_sprint_part\n\n    return total_time\n\nans = solution()"
    ],
    "6cd294ca2ca74856bd3764d49417e29b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for Rachel and Alice's original amount of candy\n    rachel, alice = symbols('rachel alice')\n\n    # If Rachel gives Alice 10 pieces, they have the same amount:\n    # rachel - 10 = alice + 10\n    equation1 = Eq(rachel - 10, alice + 10)\n\n    # If Alice gives Rachel 10 pieces, Rachel will have 4 more than 3 times Alice's amount:\n    # rachel + 10 = 3 * (alice - 10) + 4\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    # Calculate the total original amount of candy\n    total_candy = solutions[rachel] + solutions[alice]\n\n    return total_candy\n\nans = solution()"
    ],
    "0f0e737c506a401d8cff81ef9c2365a6": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.88\n    years = 8\n    \n    value_after_years = initial_value * (depreciation_rate ** years)\n    return round(value_after_years, 1)\n\nans = solution()"
    ],
    "e7ebfcda9f0740958ddcaf89fb51bd23": [
        "def solution():\n    return 727 + 482\n\nans = solution()"
    ],
    "399c54f13ae4483e856b4165e9f0062f": [
        "def solution():\n    probability_over_20 = 0.6\n    probability_over_25_given_over_20 = 0.3\n\n    probability_over_25 = (probability_over_25_given_over_20 / probability_over_20)\n\n    return probability_over_25\n\nans = solution()"
    ],
    "c2a559c3b6124e8a9ad447bce30b9d43": [
        "def solution():\n    from math import comb\n    num_teams = 5\n    # Since each team plays every other team exactly once, we use combinations\n    total_games = comb(num_teams, 2)\n\n    return total_games\n\nans = solution()"
    ],
    "2266bba4c5654df6ac5b7df6d9d4e424": [
        "def solution():\n    rope_skipping = 40\n    long_jump = 31\n    both_events = 21\n\n    only_one_event = (rope_skipping - both_events) + (long_jump - both_events)\n\n    return only_one_event\n\nans = solution()"
    ],
    "270f382989f44eca81a1f3f8761a46cb": [
        "def solution():\n    don_speed = 60  # Don's speed in metres per minute\n    distance_met = 360  # Distance from home where they meet in metres\n    total_distance = 780  # Total distance to the library in metres\n    \n    # Time for Don to meet Danny\n    time_don = distance_met / don_speed\n    \n    # Remaining distance for Danny to meet Don\n    distance_danny = total_distance - distance_met\n    \n    # Danny's speed\n    danny_speed = distance_danny / time_don\n    \n    return danny_speed\n\nans = solution()"
    ],
    "1302114e84374d8f8d8fde77c6f270af": [
        "def solution():\n    digits_per_page = 1\n    total_digits_used = 0\n    page_number = 1\n    \n    while total_digits_used < 792:\n        total_digits_used += digits_per_page\n        if page_number == 9 or page_number == 99:\n            digits_per_page += 1\n        page_number += 1\n\n    # Subtract one because we increase the page_number before checking if we've used 792 digits\n    return page_number - 1\n\nans = solution()"
    ],
    "9af3526725c54d168b001b25839f37fd": [
        "def solution():\n    ans = sum(sum(j / i for i in range(j, 11)) for j in range(1, 11))\n    return ans\n\nans = solution()"
    ],
    "1ea732c5a49c4c82bed4097a4a8a3cc3": [
        "def solution():\n    flour = 1 * 1000 + 500  # converting kg to g\n    sugar = 1 * 1000 + 200  # converting kg to g\n    butter = 900  # already in g\n\n    total_mixture = flour + sugar + butter\n    mixture_per_tin = total_mixture / 8\n    \n    return mixture_per_tin\n\nans = solution()"
    ],
    "bed68fc453f94368b47e0f9de6b2c0bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(51 - (15 - 2*x), 11*x)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "e7c5db2d941e4d1f9962ca19c545eb0e": [
        "def solution():\n    numerator = 20 * 27 // 30\n    return numerator\n\nans = solution()"
    ],
    "cb99f14cb28547ce8a12013d9b435b2b": [
        "def solution():\n    # Worst case scenario for not getting 4 marbles of the same color:\n    # Taking all the marbles of one color and one less than needed from the others\n    red = 10\n    blue = 5\n    green = 8\n\n    # 3 marbles from each color (not enough to ensure 4 of the same color)\n    worst_case = (blue - 1) + (green - 1) + (red - 1)\n    \n    # Add one more to ensure getting at least 4 of the same color\n    min_marbles = worst_case + 1\n\n    return min_marbles\n\nans = solution()"
    ],
    "42bf42bdc05245e899b8ef7be48f6759": [
        "from itertools import permutations\n\ndef solution():\n    positions = ['A', 'B', 'X', 'X'] # X stands for either C or D, since A and B only at ends\n    count = 0\n\n    for perm in permutations(positions, 4):\n        if (perm[0] == 'A' or perm[0] == 'B') and (perm[-1] == 'A' or perm[-1] == 'B') and len(set(perm)) == 3:\n            count += 1\n\n    return count // 2 # Divide by 2 because AB and BA on the ends are considered the same\n\nans = solution()"
    ],
    "57bb5b4044d043d7ab2ed365ec7917fa": [
        "def solution():\n    digits = [1, 2, 3]\n    count = 0\n\n    for i in digits:\n        for j in digits:\n            if i != j:\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "c781c988a20442c8b61fad38f74231ea": [
        "def solution():\n    digits = ['4', '5', '7', '9']\n    min_even_number = float('inf')\n\n    for d1 in digits:\n        for d2 in digits:\n            if d2 != d1:\n                for d3 in digits:\n                    if d3 != d1 and d3 != d2:\n                        for d4 in digits:\n                            if d4 != d1 and d4 != d2 and d4 != d3 and int(d4) % 2 == 0:\n                                number = int(d1 + d2 + d3 + d4)\n                                if number < min_even_number:\n                                    min_even_number = number\n    return min_even_number\n\nans = solution()"
    ],
    "514cdf8bac23435c8c06bbdf81e64567": [
        "def solution():\n    workers = 3\n    days = 3\n\n    work_done_by_one_worker_in_a_day = 1 / (workers * days)\n    days_required_by_one_worker = 1 / work_done_by_one_worker_in_a_day\n\n    return int(days_required_by_one_worker)\n\nans = solution()"
    ],
    "1a41fe933c714f5dbf0d2b6b1a44c69f": [
        "def solution():\n    for i in range(99, 9, -1):  # Loop from the largest 2-digit number to the smallest\n        if i % 7 == 5 and i % 13 == 11:\n            return i\n\nans = solution()"
    ],
    "bc2eaa05c2644d01acc25bd3b154dd7d": [
        "def solution():\n    total_pupils = 39\n    rows = 3\n    pupils_per_row = total_pupils // rows\n    return pupils_per_row\n\nans = solution()"
    ],
    "c98d52b67705466d8ba4e69027df1a56": [
        "def solution():\n    expressions = {\n        '285+(15/5)-2',\n        '(285+15)/5-2',\n        '285+15/(5-2)',\n        '285+(15/(5-2))',\n        '(285+15/(5-2))',\n        '((285+15)/5)-2',\n        '285+((15/5)-2)',\n        '(285+(15/5))-2',\n        '(285+15)/(5-2)',\n        '(285+(15/5)-2)',\n        '285+(15/(5-2))'\n    }\n    \n    results = set()\n    for exp in expressions:\n        results.add(eval(exp))\n    \n    return len(results)\n\nans = solution()"
    ],
    "f3cda231135d443db7dbdf86f98d01dd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    a, b = symbols('a b')\n    \n    equation1 = Eq(a + 12, 16)\n    equation2 = Eq(2 * a + b, 18)\n    \n    solutions = solve((equation1, equation2), (a, b))\n    \n    return solutions[b]\n\nans = solution()"
    ],
    "41c7afc767ed40daaa39d2def9f0bda4": [
        "def solution():\n    count = 0\n    for locker_number in range(1, 101):\n        if locker_number % 3 == 0:\n            # The locker will be locked if divisible by 3.\n            locker_status = 'locked'\n        else:\n            # The locker will remain unlocked if not divisible by 3.\n            locker_status = 'unlocked'\n\n        if locker_number % 5 == 0:\n            # Toggle the state of locker if divisible by 5.\n            locker_status = 'unlocked' if locker_status == 'locked' else 'locked'\n\n        if locker_status == 'unlocked':\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "307ab345fabd4b8aaff4b7d5917794fd": [
        "def solution():\n    # John's equation is: 6 * A + 25 = B\n    # Since A = xy and B = 2xy, John's equation becomes: 6 * (10x + y) + 25 = 20x + 2y\n    \n    # Let's solve for x and y using algebra\n    for x in range(1, 10):  # x is a digit, so it ranges from 1 to 9\n        for y in range(0, 10):  # y is a digit, so it ranges from 0 to 9\n            A = 10 * x + y\n            B = 20 * x + 2 * y\n            if B == 6 * A + 25:\n                return A  # Return the value of A if the condition is met\n    \n    return \"John's method is incorrect.\"\n\nans = solution()"
    ],
    "b6d01c501c18487f9e4f3f79d7526cce": [
        "def solution():\n    # Speed ratio of Nicolas to Yiding\n    speed_ratio = 4 / 3\n    # Target level for Nicolas\n    nicolas_target_level = 16\n\n    # Compute Yiding's level based on speed ratio and Nicolas' level\n    yiding_level = nicolas_target_level / speed_ratio\n    return yiding_level\n\nans = solution()"
    ],
    "cc9a4ae09bbb496aaa4271ae07c4779f": [
        "def solution():\n    quotient = 11\n    remainder = 5\n    divisor = 12\n\n    number = divisor * quotient + remainder\n\n    return number\n\nans = solution()"
    ],
    "c9848b7f2bdb4b02b6a8315b987132c2": [
        "def solution():\n    boys = 4\n    boys_average_mass = 50\n    girls = 6\n    girls_average_mass = 40\n    \n    total_mass = (boys * boys_average_mass) + (girls * girls_average_mass)\n    total_children = boys + girls\n    \n    average_mass = total_mass / total_children\n\n    return average_mass\n\nans = solution()"
    ],
    "4a96b08695f1451ab05c1c722f12a959": [
        "def solution():\n    # Let's denote c as the cost of one cake and m as the amount of money Lucy has.\n    from sympy import symbols, Eq, solve\n\n    c, m = symbols('c m')\n    # If Lucy buys 10 cakes, she borrows $11, so the total cost is m + 11\n    eq1 = Eq(10 * c, m + 11)\n    # If Lucy buys 13 cakes, she borrows $26, so the total cost is m + 26\n    eq2 = Eq(13 * c, m + 26)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (c, m))\n    return solutions[c]\n\nans = solution()"
    ],
    "abaab11ba949453489f49e64542f6792": [
        "def solution():\n    return (4.6 + 13.8) / 2\n\nans = solution()"
    ],
    "c27708a444de416daece772484d27182": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    # Generate all permutations for the 7 students\n    for perm in permutations('ABCDEFG'):\n        # Convert the tuple to a list for easier manipulation\n        perm = list(perm)\n        # Index positions of students A, B, C, D, E, F, and G\n        A_position = perm.index('A')\n        B_position = perm.index('B')\n        C_position = perm.index('C')\n        D_position = perm.index('D')\n        E_position = perm.index('E')\n        F_position = perm.index('F')\n        G_position = perm.index('G')\n        \n        # Check for conditions:\n        # 1. A wants to stand in the middle of B and C\n        if abs(B_position - A_position) != abs(C_position - A_position):\n            continue\n        \n        # 2. D and E refuse to be next to each other\n        if abs(D_position - E_position) == 1:\n            continue\n        \n        # 3. F and G want to be next to each other\n        if abs(F_position - G_position) != 1:\n            continue\n        \n        # If all conditions are met, increment the count\n        count += 1\n        \n    return count\n\nans = solution()"
    ],
    "f1c6632cac7d493a881d8e10eab95ae1": [
        "def solution():\n    total_matches = 5\n    reported_scores = [37, 53, 29, 41]\n    total_scored = total_matches * 40\n    x = total_scored - sum(reported_scores)\n    return x\n\nans = solution()"
    ],
    "418d9f95c94b4bab93c8e3700c845d5e": [
        "def solution():\n    ans = (1/(2-3)) - (4/(5-6)) - (7/(8-9))\n    return ans\n\nans = solution()"
    ],
    "52dedf9ce05e4ea3a7d65ae01e1338d3": [
        "def solution():\n    count = 0\n    for i in range(1000, 10000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "938ae204da174d739962f4162d4b20e8": [
        "def solution():\n    return 4336 // 8\n\nans = solution()"
    ],
    "7c5a2dda1a89437a812dee6e6d3c8006": [
        "def solution():\n    for num in range(10000, 100000):\n        original = num * 10 + 9  # append 9 to the end to make six-digit\n        new_num = int(str(9) + str(num))  # prepend 9 to make new six-digit\n        if new_num == 4 * original:\n            return original\n\nans = solution()"
    ],
    "e00d2baa889045a6810756a5f6ded27b": [
        "from math import factorial\n\ndef solution():\n    total_letters = len(\"CHEESE\")\n    c_count = 1\n    h_count = 1\n    e_count = 3\n    s_count = 1\n\n    total_ways = factorial(total_letters) // (factorial(c_count) * factorial(h_count) * factorial(e_count) * factorial(s_count))\n\n    return total_ways\n\nans = solution()"
    ],
    "06ccb550f9c94b6e88edf78ee248277b": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10  # we can't use 0 as the first digit\n    no_sevens = 8 * 9 * 9  # exclude 7 as an option for each digit\n\n    # At least two sevens means we have three scenarios: two sevens or three sevens\n    # Number with exactly two sevens = 3 positions choose 2 for the sevens\n    # (the remaining digit has 9 possibilities other than 7)\n    \n    two_sevens = 3 * 9  # there are 3 ways to position two sevens (77x, 7x7, x77) and 9 options for 'x'\n\n    # Number with exactly three sevens = 1 (777)\n\n    three_sevens = 1\n\n    at_least_two_sevens = total_three_digit_numbers - no_sevens + two_sevens + three_sevens\n\n    return at_least_two_sevens\n\nans = solution()"
    ],
    "8f0a469087a3468e9dd6d097faa4382a": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    divisor = 1  # The smallest possible non-zero natural number divisor\n    dividend = divisor * quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "9e16012db73740a0b2623e56b90ddb02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for Abigail's and Jonathan's current ages\n    abigail, jonathan = symbols('abigail jonathan')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(abigail, jonathan + 6)\n    equation2 = Eq(abigail - 6, 2 * (jonathan - 6))\n\n    # Solve the equations for the two individuals' ages\n    solutions = solve((equation1, equation2), (abigail, jonathan))\n\n    # Extract Jonathan's age from the solutions\n    return solutions[jonathan]\n\nans = solution()"
    ],
    "1079de7a7656466a8e5c71823b1f57b3": [
        "def solution():\n    # Define the operation as a function\n    def operation(a, b):\n        return a * b + a - b\n\n    # Calculate the result using the defined operation\n    result = operation(4, 3) - operation(3, 4)\n\n    # Return the final result\n    return result\n\nans = solution()"
    ],
    "85287eb8abe94dc69ff3f32348aa3828": [
        "def solution():\n    # Alice's rate of work per day\n    alice_rate = 1 / 40\n    # Bob's rate of work per day\n    bob_rate = 1 / 60\n    # Combined rate of work per day when both are working\n    combined_rate = alice_rate + bob_rate\n\n    # The time Bob works alone is the total time minus Alice's days off\n    # If we let x be the number of days Alice takes off, then we can write\n    # the following equation, where the left side represents the total work done:\n    # combined_rate * (27 - x) + bob_rate * x = 1 (representing 100% of the job)\n\n    # Solving the equation for x:\n    total_days = 27\n    x = (1 - combined_rate * total_days) / (bob_rate - combined_rate)\n    \n    return x\n\nans = solution()"
    ],
    "707f06cacc044e1d85aef697dea2c32f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the initial number of cows as c and the initial number of goats as g\n    c, g = symbols('c g')\n\n    # Initial condition: 65% of animals were cows, hence 35% were goats\n    initial_cows = Eq(c, 0.65 * (c + g))\n    initial_goats = Eq(g, 0.35 * (c + g))\n\n    # After adding 240 more animals, the percentage of cows increased to 85%,\n    # and the number of goats doubled\n    final_cows = Eq(0.85 * (c + g + 240), c + 240)  # 20% increase in cow percentage\n    final_goats = Eq(2 * g, g + 240)  # Goats doubled\n\n    # We solve the system of equations\n    solutions = solve((initial_cows, initial_goats, final_cows, final_goats), (c, g))\n\n    # We need the initial number of goats\n    return solutions[g]\n\nans = solution()"
    ],
    "219697dc832b445ca3d9d8288e536ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n    \n    equation1 = Eq(pip + bud, 10)\n    equation2 = Eq(pip, bud + 2)\n\n    solutions = solve((equation1, equation2), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "11e8ba58465f4c138c8725a020c95ec7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    cost_for_5_bananas = 5 * solutions[banana]\n\n    return cost_for_5_bananas\n\nans = solution()"
    ],
    "66dcd5cada06407ba1e9153afc26043f": [
        "def solution():\n    initial_amount = 200\n    final_amount = 250\n    increase = final_amount - initial_amount\n    percentage_increase = (increase / initial_amount) * 100\n    \n    return percentage_increase\n\nans = solution()"
    ],
    "b9373bcf833d4821b3f8fcb64de110d4": [
        "def solution():\n    for number in range(30, 41):\n        if number % 3 == 0 and number % 4 == 0:\n            return number\n\nans = solution()"
    ],
    "f67eff9f23014ecb8eded92248463a7b": [
        "def solution():\n    from itertools import permutations\n\n    for p in permutations(range(10), 4):\n        A, B, C, D = p\n        if A != 0 and C != 0 and ABA + CDC == 726:\n            ABA = A*101\n            CDC = C*101 + D*10\n            if ABA + CDC == 726:\n                return A + B + C + D\n\nans = solution()"
    ],
    "a4663920546242aeb50c5eaeaf379262": [
        "def solution():\n    product = (36 * 37 * 38 * 39 * 40 * 41) % 7\n    return product\n\nans = solution()"
    ],
    "caad5339582b4857888fcff1cca8c78e": [
        "def solution():\n    ans = 126 / 2\n    return ans\n\nans = solution()"
    ],
    "1848190c71c645c0997874fe8ca76815": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of days given be d and the total number of pages be p\n    d, p = symbols('d p')\n\n    # If Vanessa reads 30 pages a day, she'll finish in d+2 days\n    equation1 = Eq(30 * (d + 2), p)\n\n    # If Vanessa reads 39 pages a day, she'll finish in d-4 days\n    equation2 = Eq(39 * (d - 4), p)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (d, p))\n\n    # Return the solution as a tuple (days, pages)\n    return solutions[d], solutions[p]\n\nans = solution()"
    ],
    "5262af77457a47089064b6dc77839b82": [
        "def solution():\n    sequence = '202002020202'  # basic repeating unit in the sequence\n    total_digits = 535\n    unit_length = len(sequence)\n\n    # Calculate how many times the sequence is fully repeated\n    full_repeats = total_digits // unit_length\n    # Calculate the remaining digits\n    remaining_digits = total_digits % unit_length\n\n    # Count the number of '2's in a full sequence\n    num_twos_full_sequence = sequence.count('2')\n    # Count the number of '2's in the remaining part of the sequence\n    num_twos_remaining = sequence[:remaining_digits].count('2')\n\n    # Calculate the total number of '2's\n    total_twos = (full_repeats * num_twos_full_sequence) + num_twos_remaining\n\n    return total_twos\n\nans = solution()"
    ],
    "ccbbcf445df24e4ba0699d6f1e37b90a": [
        "def solution():\n    ans = (1000 + 2000 + 2100) / 17\n    return ans\n\nans = solution()"
    ],
    "070c04e9775b4292869eedb678f57b8f": [
        "def solution():\n    apples_per_box = 5\n    num_of_boxes = 6\n    total_apples = apples_per_box * num_of_boxes\n    return total_apples\n\nans = solution()"
    ],
    "ff8eaf85f9494a4bb58b4c2de7f7a467": [
        "def solution():\n    cookies_baked_morning = 85\n    cookies_baked_afternoon = 135\n    cookies_given_friends = 55\n    \n    cookies_left = (cookies_baked_morning + cookies_baked_afternoon) - cookies_given_friends\n    \n    return cookies_left\n\nans = solution()"
    ],
    "bf206205208a4e6aaa3f21b6175f11a0": [
        "def solution():\n    ans = 3102 // 6\n    return ans\n\nans = solution()"
    ],
    "b152c6eb52ea4a47bee276fd7fdc5526": [
        "def solution():\n    # Given that a Δ b = a^2 - a*b + b^2\n    # Applying the operation to 10 Δ 9\n\n    a = 10\n    b = 9\n    \n    ans = a**2 - a*b + b**2\n    return ans\n\nans = solution()"
    ],
    "11fb94abf2634f198729473920061c7d": [
        "def solution():\n    total_passengers = 863\n    men = 354\n    children = 165\n    women = total_passengers - men - children\n    return women\n\nans = solution()"
    ],
    "277ff5ac1d264964a4d29eb33ba74058": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the prices of the items\n    belt, dress, shirt = symbols('belt dress shirt')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(dress, 3 * belt)\n    equation2 = Eq(shirt, 2 * dress)\n    equation3 = Eq(shirt - belt, 155)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (belt, dress, shirt))\n\n    # Calculate the difference in cost between the dress and the shirt\n    difference = solutions[dress] - solutions[shirt]\n\n    return difference\n\nans = solution()"
    ],
    "c3879ebf82934b73a62fb270f35eee17": [
        "def solution():\n    # Let x be the number of adult tickets, and y be the number of child tickets.\n    # We have two equations based on the problem statement:\n    # 5x + 3y = 75 (total amount from ticket sales)\n    # x + y = 19 (total number of tickets sold)\n    # We will solve these equations for x and y.\n    \n    # Import the linear equation solver from sympy\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for x and y\n    x, y = symbols('x y')\n\n    # Define the equations based on the problem statement\n    eq1 = Eq(5*x + 3*y, 75)  # Total amount from ticket sales\n    eq2 = Eq(x + y, 19)      # Total number of tickets sold\n\n    # Solve the equations for x and y\n    solutions = solve((eq1, eq2), (x, y))\n\n    # Since we want to find the number of adult tickets sold, we return the value of x\n    return solutions[x]\n\nans = solution()"
    ],
    "539ace63a9a84f38adf540a759c0f768": [
        "def solution():\n    # Let x be the original total number of coins Owen had.\n    # 2/7 of the coins are fifty-cent coins, so (5/7)x are one-dollar coins.\n    # Mother gave Owen 10 one-dollar coins and 10 fifty-cent coins (5 dollars / 0.5 dollar per coin).\n\n    # After receiving the coins:\n    # Number of fifty-cent coins: (2/7)x + 10\n    # Number of one-dollar coins: (5/7)x + 10\n\n    # The final condition is:\n    # Number of one-dollar coins is twice the number of fifty-cent coins.\n    # (5/7)x + 10 = 2((2/7)x + 10)\n\n    # Solve for x:\n    # (5/7)x + 10 = (4/7)x + 20\n    # (1/7)x = 10\n    # x = 70\n    \n    # Owen originally had 70 coins.\n    return 70\n\nans = solution()"
    ],
    "56a6e5f6729f412081b2719e7253346e": [
        "def solution():\n    andy_daily_savings = 7\n    andy_total_savings = 378\n    brenda_daily_savings = 6\n\n    days_andy_saved = andy_total_savings // andy_daily_savings\n    brenda_total_savings = days_andy_saved * brenda_daily_savings\n\n    return brenda_total_savings\n\nans = solution()"
    ],
    "d9a025512c6941b6b97c54521e40115c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of marbles each person has after all transactions\n    anna_final, betsy_final, charlene_final = symbols('anna_final betsy_final charlene_final', integer=True)\n\n    # Create equations based on the problem statement\n    # Total marbles after all transactions\n    equation1 = Eq(anna_final + betsy_final + charlene_final, 168)\n    # The given ratio of marbles between Anna, Betsy, and Charlene\n    equation2 = Eq(anna_final/betsy_final, 2/5)\n    equation3 = Eq(betsy_final/charlene_final, 5/7)\n    # Define symbols for the number of marbles each person had originally\n    anna_orig, betsy_orig, charlene_orig = symbols('anna_orig betsy_orig charlene_orig', integer=True)\n    # Transactions\n    equation4 = Eq(betsy_orig + 15, betsy_final)\n    equation5 = Eq(anna_orig - 8, anna_final)\n    equation6 = Eq(charlene_orig - 15, charlene_final)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6), (anna_final, betsy_final, charlene_final, anna_orig, betsy_orig, charlene_orig))\n\n    return solutions[betsy_orig]\n\nans = solution()"
    ],
    "d4ec077973ca41e3a9584a6faecfcac3": [
        "def solution():\n    total_questions = 10\n    points_correct = 6\n    points_incorrect = -2\n    \n    for correct in range(total_questions + 1):\n        incorrect = total_questions - correct\n        total_points = correct * points_correct + incorrect * points_incorrect\n        if total_points == 44:\n            return correct\n\nans = solution()"
    ],
    "4bdb0a33fd034a4a9f038d5763df3bfc": [
        "def solution():\n    dividend = 52\n    divisor = 2/3\n    ans = dividend / divisor\n    return ans\n\nans = solution()"
    ],
    "db664e372bde470cad3851d48f1d711a": [
        "def solution():\n    ans = 52836 // 7\n    return ans\n\nans = solution()"
    ],
    "218af0df4ee747b79d4247767d1fee5a": [
        "from math import factorial\n\ndef solution():\n    num_contestants = 8\n    num_prizes = 3\n    return factorial(num_contestants) // factorial(num_contestants - num_prizes)\n\nans = solution()"
    ],
    "9060af40a1724e5887ca3ecd529e790f": [
        "def solution():\n    # Increase the length by 10%: multiplier is 1.1\n    length_multiplier = 1.1\n    \n    # Reduce the breadth to 4/5: multiplier is 0.8\n    breadth_multiplier = 0.8\n    \n    # Ratio of new height to original is 11:10: multiplier is 1.1\n    height_multiplier = 1.1\n    \n    # Calculate the new volume as a fraction of the old volume\n    new_volume_fraction = length_multiplier * breadth_multiplier * height_multiplier\n    \n    # Convert the fraction to a percentage\n    new_volume_percentage = new_volume_fraction * 100\n    \n    return new_volume_percentage\n\nans = solution()"
    ],
    "0fc0dda3957d4f01b0dccedf0adc5e89": [
        "from math import comb\n\ndef solution():\n    num_points = 10\n    num_vertices = 3\n\n    return comb(num_points, num_vertices)\n\nans = solution()"
    ],
    "c58c5d01acfc430494432756a46333bc": [
        "def solution():\n    sum_result = (30 + 40 + 50) * 3\n    return sum_result\n\nans = solution()"
    ],
    "74c9ac42df4148feacf2613537771942": [
        "def solution():\n    remaining_masks = 360\n    completed_percentage = 60\n    total_masks = remaining_masks / ((100 - completed_percentage) / 100)\n    return int(total_masks)\n\nans = solution()"
    ],
    "411faed309f74656b50d4010f9f71511": [
        "def solution():\n    number = 278\n    rounded_number = round(number, -1)\n    return rounded_number\n\nans = solution()"
    ],
    "cf37fa4d8197426aa1fcab8a861e06d2": [
        "def solution():\n    total_mushrooms = 40\n    more_mushrooms_first_hour = 26\n\n    # Let's assume the number of mushrooms gathered in the first hour is x.\n    # Then, the number of mushrooms gathered in the second hour is total_mushrooms - x.\n    # According to the condition given, x + more_mushrooms_first_hour = total_mushrooms - x.\n    # We solve for x.\n\n    x = (total_mushrooms - more_mushrooms_first_hour) / 2\n\n    # The second hour's count would be total_mushrooms - x.\n    second_hour_mushrooms = total_mushrooms - x\n\n    return int(second_hour_mushrooms)\n\nans = solution()"
    ],
    "975e68a88e6347caa844fbf5ca68107e": [
        "def solution():\n    # The largest number of questions Noa can solve will occur when the other four classmates solve the fewest number of questions possible with no one solving the same amount.\n    # If we give out 1, 2, 3, and 4 questions respectively to the four classmates, we minimize the total questions they solve, leaving the rest for Noa.\n    # Thus, Noa will solve the remaining questions.\n\n    questions_others_solved = 1 + 2 + 3 + 4  # sum of an arithmetic series with a difference of 1\n    questions_noa_solved = 40 - questions_others_solved\n\n    return questions_noa_solved\n\nans = solution()"
    ],
    "c1041fa9a5bf437993ae13aa3e37085f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    scan, ted = symbols('scan ted')\n    \n    # Current age ratio 1:4\n    equation1 = Eq(scan / ted, 1 / 4)\n    \n    # Age ratio 4 years from now 1:3\n    equation2 = Eq((scan + 4) / (ted + 4), 1 / 3)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (scan, ted))\n\n    scan_age = solutions[scan]\n    ted_age = solutions[ted]\n    \n    # Find 'x' where age ratio is 1:9 for scan:(scan-x) and ted:(ted-x)\n    x = symbols('x')\n    # Equation representing age ratio number of years ago\n    equation3 = Eq((scan_age - x) / (ted_age - x), 1 / 9)\n    \n    years_ago = solve(equation3, x)\n    \n    return years_ago[0]\n\nans = solution()"
    ],
    "6adbd55fec9e4553850968c3abf80ddd": [
        "def solution():\n    ans = 52.8 * 7\n    return ans\n\nans = solution()"
    ],
    "16943328c1ba4a80883339e370325f73": [
        "def solution():\n    number = 4321\n    round_to = 1000\n    ans = round(number / round_to) * round_to\n    return ans\n\nans = solution()"
    ],
    "2f6aeacb6c0049d8990d1ffd7bffdc5d": [
        "def solution():\n    metres = 9\n    centimetres_per_metre = 100\n    ans = metres * centimetres_per_metre\n    return ans\n\nans = solution()"
    ],
    "a20ccf64b8a1484aa5b1280c574930fa": [
        "def solution():\n    coldest = -89\n    hottest = 58\n\n    difference = hottest - coldest\n\n    return difference\n\nans = solution()"
    ],
    "4fc438b08e484934a9e0729ceb008c74": [
        "def solution():\n    # Time spent jogging: 7:30 am - 6:30 am = 1 hour\n    jogging_speed = 6.5  # miles per hour\n    jogging_distance = jogging_speed * 1  # miles\n\n    # Time spent walking: 9:30 am - 7:30 am = 2 hours\n    walking_speed = 4.5  # miles per hour\n    walking_distance = walking_speed * 2  # miles\n\n    # Total distance traveled\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "ec690aff1f1e4750a9a76a1e9427e744": [
        "def solution():\n    return 200 * 30 * 60\n\nans = solution()"
    ],
    "ca0885fd429b47b29cbca128a13934e5": [
        "def solution():\n    height = 45\n    climb_up = 10\n    day = 0\n    current_height = 0\n\n    while current_height < height:\n        day += 1\n        current_height += climb_up\n        if current_height >= height:\n            break\n        current_height -= day\n\n    return day\n\nans = solution()"
    ],
    "ef539f6c79ef45e6a787351ed4759e6b": [
        "def solution():\n    # Let the number of guppies be g\n    # Then, the number of goldfish is 2g\n    # And the number of mollies is 2 * (number of goldfish) = 2 * 2g = 4g\n    # According to the problem, there are 276 mollies, so we have 4g = 276\n    # Solving for g gives us g = 276 / 4\n    g = 276 / 4\n    # The difference between the number of mollies and guppies is 276 - g\n    ans = 276 - g\n    return int(ans)\n\nans = solution()"
    ],
    "f4da090f08704285bf99c48d28b8f30e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining the symbols for the foldable and non-foldable bicycles.\n    foldable, non_foldable = symbols('foldable non_foldable')\n    \n    # Equation for the total number of bicycles before any were sold.\n    total_bicycles_eq = Eq(foldable + non_foldable, 476)\n    \n    # Equations for the number of bicycles left after sales.\n    # Using the fractions given in the problem to represent the remaining bicycles.\n    non_foldable_left_eq = Eq(non_foldable * (5/9), non_foldable - (208 - foldable))\n    foldable_left_eq = Eq(foldable * (4/7), foldable - foldable)\n\n    # Solving the system of equations.\n    solutions = solve((total_bicycles_eq, non_foldable_left_eq, foldable_left_eq), (foldable, non_foldable))\n\n    # Getting the number of foldable bicycles sold.\n    foldable_sold = solutions[foldable] - solutions[foldable] * (4/7)\n\n    return foldable_sold\n\nans = solution()"
    ],
    "0f326466fded430f8bb9c80424cf6fb4": [
        "def solution():\n    from sympy import divisors\n\n    return sum(divisors(20))\n\nans = solution()"
    ],
    "1e39295f7be440f19c866b2c67eb6233": [
        "def solution():\n    scale_cm_per_m = 2 / 3  # cm per meter as per the scale\n    real_tree_height_m = 12  # height of the real tree in meters\n\n    model_tree_height_cm = real_tree_height_m * scale_cm_per_m\n\n    return model_tree_height_cm\n\nans = solution()"
    ],
    "0b6455df8e764e0297e3e34a90919102": [
        "def solution():\n    return 5 * 34\n\nans = solution()"
    ],
    "db83e40568bc4ed1abb293d337e3b898": [
        "def solution():\n    # Applying Pigeonhole Principle: At least one pigeon hole (student) will contain ceil(number of pigeons (candies) / number of pigeonholes (students))\n    # The worst case scenario is when each of the other 19 students gets 2 candies, leaving at least 3 candies for at least 1 student\n\n    students = 20  # Number of pigeonholes (students)\n    candies_per_student = 2  # Each of the other students might have at most 2 candies\n\n    # Minimum number of candies to ensure at least one student gets at least 3 candies\n    min_candies = (students - 1) * candies_per_student + 3\n\n    return min_candies\n\nans = solution()"
    ],
    "dfd006a02012410fbbb4bcbd7a08eeda": [
        "def solution():\n    remaining_flour = 6000\n    used_flour_ratio = 5/8\n    original_flour = remaining_flour / (1 - used_flour_ratio)\n    return original_flour\n\nans = solution()"
    ],
    "b7f55925dab84b38804fc61f246c5093": [
        "def solution():\n    # If he's very unlucky, he could pick all the red and black socks first.\n    # There are 10 red and 10 black socks, so he could pick 20 socks without getting a white pair.\n    # To ensure he gets a pair of white socks, he would need to take one more after those 20.\n    max_socks = 20 + 1\n\n    return max_socks\n\nans = solution()"
    ],
    "0f98369691cc4fa8828f869e61430e64": [
        "def solution():\n    return 765 * 0.60\n\nans = solution()"
    ],
    "a1e43bc939ea4c6fb34a34753a72751b": [
        "def solution():\n    ans = sum(range(1, 20, 2))\n    return ans\n\nans = solution()"
    ],
    "318cb203ec2b4e69af03513f0f5f7db2": [
        "def solution():\n    ans = 1741 - 968\n    return ans\n\nans = solution()"
    ],
    "98bea305d2724084a1300cba10c4995b": [
        "def solution():\n    total_questions = 20\n    score_per_correct = 8\n    deduction_per_wrong = 4\n    total_score = 100\n\n    # Let's denote the number of correct answers as `correct`\n    # and the number of incorrect answers as `incorrect`.\n    # We know that incorrect = total_questions - correct.\n    # The total score is the sum of scores for correct and incorrect answers:\n    # total_score = score_per_correct * correct - deduction_per_wrong * incorrect\n\n    for correct in range(total_questions + 1):\n        incorrect = total_questions - correct\n        if (score_per_correct * correct - deduction_per_wrong * incorrect) == total_score:\n            return correct\n\nans = solution()"
    ],
    "61b231b8c15b475c917f5d10487169ba": [
        "def solution():\n    total_flowers = 30\n    flowers_between_posts = 3\n\n    # The number of intervals between lamp posts is given by\n    # the following formula (total flowers / flowers between posts) + 1,\n    # because Jamie plants 3 flowers between every 2 lamp posts,\n    # which means the number of intervals is 1 more than (total_flowers / flowers_between_posts).\n    number_of_intervals = (total_flowers // flowers_between_posts) + 1\n\n    # Distance between every 2 lamp posts\n    distance_between_two_posts = 50 / number_of_intervals\n\n    return distance_between_two_posts\n\nans = solution()"
    ],
    "4341f23ecb084909afaca690c7016fd3": [
        "def solution():\n    ans = 3 * 126\n    return ans\n\nans = solution()"
    ],
    "13404c9d8a0144d0a8d6ce4d8a80834c": [
        "def solution():\n    initial_temp = 8\n    decrease = 17\n\n    final_temp = initial_temp - decrease\n\n    return final_temp\n\nans = solution()"
    ],
    "de8f312c348043bca42e8c7aa90f7a69": [
        "def solution():\n    road_length = 150\n    tree_spacing = 10\n\n    num_trees = (road_length // tree_spacing) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "a4bab2ddc00f4d6db863991f6cc9b894": [
        "def solution():\n    answer = 48 * (5/4)\n    return answer\n\nans = solution()"
    ],
    "54d9517c5a7c4afaa953d1464774e445": [
        "def solution():\n    # The number of books on the left of the favorite book\n    books_left = 6 \n    # The position of the favorite book from the right\n    favorite_book_position_from_right = 14 \n    # Total books is the sum of the books on the left, the favorite book,\n    # and the books on the right (which is the position from the right minus 1,\n    # because the favorite book is also counted in this position)\n    total_books = books_left + 1 + (favorite_book_position_from_right - 1)\n    \n    return total_books\n\nans = solution()"
    ],
    "1f2fa42e73c245739af9883dfb728d2f": [
        "def solution():\n    first_number = 160000\n    ratio = 1/4\n    nth_term = first_number * (ratio ** (5 - 1))\n    return nth_term\n\nans = solution()"
    ],
    "f712d845b49943c78aeaa70968af1f15": [
        "def solution():\n    result = (13.8 * 10**7) * (5.4 * 10**-12)\n    return result\n\nans = solution()"
    ],
    "7c68f55d51744cc39eaac03dbd0615e5": [
        "def solution():\n    sweets_for_sister = 6\n    total_sweets = 30\n    number_of_friends = 6\n    \n    sweets_left = total_sweets - sweets_for_sister\n    sweets_per_friend = sweets_left // number_of_friends\n    \n    return sweets_per_friend\n\nans = solution()"
    ],
    "1fd121a0e4224cf5a769dd8b70d3cb9b": [
        "def solution():\n    # Side length of the lawn\n    side_length = 12\n    # Distance from the edge of the garden\n    edge_distance = 1.5\n    # Distance between rosebushes\n    bush_distance = 3\n\n    # Effective planting length is the lawn side length minus twice the edge distance\n    effective_length = side_length - 2 * edge_distance\n    # Number of rosebushes along one side can be obtained by diving effective length by distance between rosebushes\n    # and rounding down to the nearest whole number\n    number_per_side = effective_length // bush_distance\n\n    # Total number of rosebushes is four times the number per side (each side of the square)\n    total_bushes = 4 * number_per_side\n\n    return int(total_bushes)\n\nans = solution()"
    ],
    "19d110feae03410cb8fbd2510aacfe2a": [
        "def solution():\n    # Work rate of P (jobs per hour)\n    rate_P = 1 / (12 * 8)\n    # Work rate of Q (jobs per hour)\n    rate_Q = 1 / (8 * 10)\n\n    # Combined work rate when both are working 8 hours a day\n    combined_rate = 8 * (rate_P + rate_Q)\n\n    # Total time (in days) to complete the job when working together\n    time_to_complete = 1 / combined_rate\n\n    return time_to_complete\n\nans = solution()"
    ],
    "7cd63e4421874b14aac53b57251e8230": [
        "def solution():\n    # Maximum number of apples the child who gets the most could have\n    max_apples = 0\n    # Remaining apples after giving max_apples to the child with the most\n    remaining_apples = 19 - max_apples\n    # Iterate over possible values of max_apples\n    for i in range(19, 0, -1):\n        max_apples = i\n        remaining_apples = 19 - max_apples\n        # The remaining children will get at least 1, 2, 3, 4 apples each\n        # So we get the sum of the smallest distinct numbers for 4 children\n        # which is 1 + 2 + 3 + 4 = 10 (smallest possible sum for four distinct positive integers)\n        if remaining_apples >= 10:\n            # Check if each of the remaining 4 children can get a distinct number of apples\n            for j in range(4):\n                for k in range(j + 1, 4):\n                    if remaining_apples - (1+2+3+4-j+k) > max_apples:\n                        break\n                else:\n                    # max_apples is valid only if the break statement is never reached\n                    continue\n                break  # break outer loop if an invalid distribution is found\n            else:\n                break  # if we found the solution, we break the loop\n                \n    return max_apples\n\nans = solution()"
    ],
    "537950035403436781a4ec53ef771d8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((2/3)*(x-1) - (1/4)*(3*x+1), 1/6)\n    \n    ans = solve(equation, x)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "696c23fc06e14b05a2c046255119fd33": [
        "def solution():\n    remaining_work = 360\n    completed_percent = 60\n    total_work = remaining_work / (1 - completed_percent / 100)\n    return int(total_work)\n\nans = solution()"
    ],
    "f1f0d797b7874b22a4002f5247bb2471": [
        "def solution():\n    speed_van_1 = 132\n    speed_van_2 = 78\n    time_in_hours = 8\n\n    distance_apart = (speed_van_1 + speed_van_2) * time_in_hours\n\n    return distance_apart\n\nans = solution()"
    ],
    "aa00ee47d18541ea8553ef86e27f0748": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    score = symbols('score')\n    equation = Eq(score - 30, (score / 2) + 10)\n    \n    solution = solve(equation, score)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "75b8e7d0476046b699f4dc0ad1ac6abd": [
        "def solution():\n    result = (2 - 1.8) / (1/2) * (5/2)\n    return result\n\nans = solution()"
    ],
    "a17df35105e1488fb14099c56b437550": [
        "def solution():\n    numbers = [12, 16, 20, 24, 28]\n    avg = sum(numbers) / len(numbers)\n    return avg\n\nans = solution()"
    ],
    "a6f93d90cbad41798ee50c1162ac774e": [
        "def solution():\n    from sympy import divisors\n\n    # Get all divisors of 78\n    all_divisors = divisors(78)\n\n    # Count even divisors because the number of the bags is an even number\n    even_divisors_count = sum(1 for divisor in all_divisors if divisor % 2 == 0)\n\n    return even_divisors_count\n\nans = solution()"
    ],
    "68df60021a694c14829fcbe8cf5ae9a5": [
        "def solution():\n    # Given:\n    # 9 rabbits == 3 goats\n    # 2 goats == 4 cows\n    \n    # From the given relation, we find the equivalent exchange rate \n    # between rabbits and goats\n    rabbits_for_one_goat = 9 / 3\n\n    # Next, we find the equivalent exchange rate between goats and cows\n    goats_for_one_cow = 2 / 4\n\n    # To find how many rabbits can be exchanged for one cow,\n    # we multiply the exchange rates\n    rabbits_for_one_cow = rabbits_for_one_goat / goats_for_one_cow\n    \n    # Now we need to find how many rabbits can be exchanged for 2 cows\n    rabbits_for_two_cows = rabbits_for_one_cow * 2\n\n    return rabbits_for_two_cows\n\nans = solution()"
    ],
    "e07c7a8fcd134268ba390e93dbde6058": [
        "def solution():\n    first_term = 30\n    difference = 4\n    num_rows = 10\n\n    # Use the formula for the sum of an arithmetic series: n/2 * (2a + (n-1)d)\n    total_seats = (num_rows / 2) * (2 * first_term + (num_rows - 1) * difference)\n\n    return int(total_seats)\n\nans = solution()"
    ],
    "c49938cd48584dd7af3a734aee5be731": [
        "def solution():\n    total_questions = 50\n    not_attempted = 3\n    correct_marks = 4\n    wrong_marks = -1\n    total_score = 168\n\n    # Calculate the number of attempted questions\n    attempted = total_questions - not_attempted\n\n    # Let x be the number of correct answers.\n    # Then, attempted - x will be the number of wrong answers.\n    # The equation based on the total score will be:\n    # correct_marks * x + wrong_marks * (attempted - x) = total_score\n\n    # Simplify the equation to solve for x:\n    # 4x - (attempted - x) = total_score\n    # 4x - attempted + x = total_score\n    # 5x = total_score + attempted\n    # x = (total_score + attempted) / 5\n\n    correct_answers = (total_score + attempted) // correct_marks\n\n    return correct_answers\n\nans = solution()"
    ],
    "a3c6321b718247e1a8c87ed13d6bfa40": [
        "def solution():\n    # Let the total multiplier for the original number of pencils and pens be x.\n    # Then the number of pencils is 4x and the number of pens is 5x.\n\n    # We take out one pen and replace it with one pencil. \n    # Therefore, the new number of pencils is 4x + 1 and the number of pens is 5x - 1.\n\n    # According to the new ratio, we have (4x + 1)/(5x - 1) = 7/8.\n    # Cross multiply to solve for x: 8(4x + 1) = 7(5x - 1)\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(8*(4*x + 1), 7*(5*x - 1))\n\n    # Solve for x\n    solution_x = solve(equation, x)\n    if solution_x:\n        # The total number of pencils and pens is the sum of 4x and 5x, which is 9x.\n        total = 9 * solution_x[0]\n        return total\n    \n    return None\n\nans = solution()"
    ],
    "6f9eda7abbf146b88413ef8871a3770e": [
        "def solution():\n    planned_profit = 1.6\n    actual_profit = 0.8 * planned_profit\n    first_day_profit = 0.7 * 1.6\n    second_day_books = 1 - 0.7\n    second_day_profit = actual_profit - first_day_profit\n\n    discount_rate = (1 - second_day_profit / second_day_books) * 100\n\n    return discount_rate\n\nans = solution()"
    ],
    "4657d3f1b0d749a7899c0ce49a8d740d": [
        "def solution():\n    def hash_op(a, b):\n        return a * b - 5 * a + 8\n        \n    # Calculate step by step\n    result = hash_op(10, 9)\n    result = hash_op(result, 8)\n    result = hash_op(result, 7)\n    result = hash_op(result, 6)\n    result = hash_op(result, 5)\n    result = hash_op(result, 4)\n    \n    return result\n\nans = solution()"
    ],
    "36b7c8ca803942679b913576ffc1164b": [
        "def solution():\n    girls = 72\n    boys_percentage = 40\n    girls_percentage = 100 - boys_percentage\n    total_children = (girls * 100) / girls_percentage\n    return int(total_children)\n\nans = solution()"
    ],
    "c51419313ddf46ada3ba30f9e095d92c": [
        "def solution():\n    ans = 8**2 + 27\n    return ans\n\nans = solution()"
    ],
    "06be771ddff04930b7a9da426c7d1667": [
        "def solution():\n    initial_strawberries = 96\n    eaten_strawberries = 73\n    bought_strawberries = 52\n\n    remaining_strawberries = initial_strawberries - eaten_strawberries + bought_strawberries\n\n    return remaining_strawberries\n\nans = solution()"
    ],
    "cc24fe62d17a41c2b8ef24f004c5e021": [
        "def solution():\n    # Each sheet has two consecutive pages: one on the front and one on the back.\n    # The last page number before the missing pages (14) is on the back of a sheet.\n    # The first page number after the missing pages (35) is on the front of a sheet.\n\n    # Therefore, the first missing sheet starts with page 15 on the front.\n    # The last missing sheet ends with page 34 on the back.\n\n    # To find the number of missing sheets, we calculate the number of pages missing.\n    missing_pages = 35 - 14 - 1  # Subtract the last page before and the first page after.\n\n    # Since each sheet has 2 pages, divide the number of missing pages by 2.\n    missing_sheets = missing_pages // 2\n    \n    return missing_sheets\n\nans = solution()"
    ],
    "1501e7c8fa1943abaaf5e0674516ab89": [
        "def solution():\n    digits = [0, 1, 2, 3, 6, 8]\n    odd_numbers_count = 0\n\n    for tens_digit in digits:\n        for ones_digit in digits:\n            if ones_digit % 2 == 1 and tens_digit != ones_digit:\n                odd_numbers_count += 1\n\n    return odd_numbers_count\n\nans = solution()"
    ],
    "8b11a69372f04c60a5ae352fe25c67d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tuna_puff_price, curry_puff_price = symbols('tuna_puff_price curry_puff_price')\n\n    equation1 = Eq(curry_puff_price, tuna_puff_price - 0.20)\n    equation2 = Eq(12 * tuna_puff_price + 19 * curry_puff_price, 39.60)\n\n    solutions = solve((equation1, equation2), (tuna_puff_price, curry_puff_price))\n\n    return solutions[tuna_puff_price]\n\nans = solution()"
    ],
    "fdfe690a562d4d6bbf61eceb229efec5": [
        "def solution():\n    for num in range(1, 500):\n        if num % 5 == 1 and num % 8 == 4 and num % 9 == 5:\n            return num\n\nans = solution()"
    ],
    "3a37961dddb1493592a78ae3db74b6e6": [
        "def solution():\n    ans = 4 * 8 + 4 * 17\n    return ans\n\nans = solution()"
    ],
    "d1dd44a77a9344ba8d2e79cc83171fae": [
        "def solution():\n    start_number = 10\n    end_number = 25\n    count = end_number - start_number + 1\n    return count\n\nans = solution()"
    ],
    "143d2e71979c46a0a813017c419c172c": [
        "def solution():\n    speed_m_per_min = 36\n    time_seconds = 200\n    time_minutes = time_seconds / 60\n    \n    distance = speed_m_per_min * time_minutes\n    return distance\n\nans = solution()"
    ],
    "1d23a4cf5cd24aa78d4522ee259f6ea9": [
        "def solution():\n    result = 1\n    for denominator in range(3, 20, 2):\n        mixed_fraction = 1 + 2 / denominator\n        result *= mixed_fraction\n    return result\n\nans = solution()"
    ],
    "d4b69388447b40c1b49c9da3070b537d": [
        "def solution():\n    return (55 - 3) // 4\n\nans = solution()"
    ],
    "bc66529b008c4e1590163de5bfb2e7d7": [
        "def solution():\n    total_children = 38\n    total_balloons = 126\n    \n    # Assume all 38 children are girls to get the maximum number of balloons.\n    max_girls_balloons = 4 * total_children\n    \n    # Calculate the excess balloons when assuming all are girls\n    # Each excess balloon represents one child that must be a boy,\n    # since swapping a girl for a boy reduces the total count by 2 balloons.\n    excess_balloons = max_girls_balloons - total_balloons\n    \n    # Calculate the number of boys\n    number_of_boys = excess_balloons // 2\n\n    return number_of_boys\n\nans = solution()"
    ],
    "ae1399c1d3834a26a096bf6302870872": [
        "def solution():\n    needed_length_cm = 400 * 85  # Total length of string needed in cm\n    roll_length_cm = 20 * 100    # Length of one roll of string in cm (1 m = 100 cm)\n\n    rolls_needed = needed_length_cm / roll_length_cm\n    if rolls_needed > int(rolls_needed):\n        rolls_needed = int(rolls_needed) + 1  # If there is any remainder, an additional roll is needed\n\n    return rolls_needed\n\nans = solution()"
    ],
    "53bc7d0205304d2f983aa90502860e23": [
        "def solution():\n    ans = 863 * 37\n    return ans\n\nans = solution()"
    ],
    "250641e98bbf4da6a3ad1c67bad85305": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_animals_initial, goats_initial = symbols('total_animals_initial goats_initial')\n    cows_initial = 0.65 * total_animals_initial\n    equation1 = Eq(goats_initial, total_animals_initial - cows_initial)\n\n    total_animals_after = total_animals_initial + 240\n    cows_after = 0.85 * total_animals_after\n    goats_after = 2 * goats_initial\n\n    equation2 = Eq(total_animals_after, cows_after + goats_after)\n\n    solutions = solve((equation1, equation2), (total_animals_initial, goats_initial))\n    \n    return solutions[goats_initial]\n\nans = solution()"
    ],
    "af4a495ebf5c4ddcacec30bac10e45e8": [
        "def solution():\n    for cookies in range(1, 40):\n        if cookies % 6 == 5 and (cookies + 3) % 5 == 0:\n            return cookies\n\nans = solution()"
    ],
    "22889dd8c0654312a1905b6415cc2e99": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    salary = symbols('salary')\n    donation = salary / 4\n    remainder = salary - donation\n    food = (5 / 6) * remainder\n    savings = remainder - food\n\n    equation = Eq(food - donation, 78)\n\n    solution = solve(equation, salary)\n\n    return solution[0]\n\nans = solution()"
    ],
    "1ecdd14157fe4525aa6c08b14b9eb1dc": [
        "def solution():\n    last_digit_2 = pow(2, 2017, 10)  # calculate the last digit of 2^2017\n    last_digit_3 = pow(3, 2017, 10)  # calculate the last digit of 3^2017\n    ans = (last_digit_2 * last_digit_3) % 10\n    return ans\n\nans = solution()"
    ],
    "e850469f35b74929a1cad1745166a939": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Emma and John's current ages\n    emma, john = symbols('emma john')\n\n    # Equation for their ages in 3 years' time\n    equation1 = Eq(john + emma + 3 * 2, 27)\n\n    # John is 7 years older than Emma\n    equation2 = Eq(john, emma + 7)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (emma, john))\n\n    return solutions[emma]\n\nans = solution()"
    ],
    "cc03092bb36e4ec3a7e2bb8f320c115b": [
        "def solution():\n    a7 = 57\n    a15 = 89\n    n1 = 7\n    n2 = 15\n    common_difference = (a15 - a7) / (n2 - n1)\n    return common_difference\n\nans = solution()"
    ],
    "41c46720b9f14be894784705391637b0": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [\n        (1, 2),\n        (2, 3),\n        (4, 5),\n        (6, 7)\n    ]\n\n    number, _ = solve_congruence(*congruences)\n\n    while number < 400:\n        return number\n        number += 2 * 3 * 5 * 7\n\nans = solution()"
    ],
    "de288ae7d0a442c4a9c046e0eed208ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable t for the amount of time spent walking at the increased speed\n    t = symbols('t')\n\n    # The distance walked at the initial speed (150 m/minute) for 10 minutes\n    initial_distance = 150 * 10\n\n    # The distance walked at the increased speed (200 m/minute) for t minutes\n    increased_distance = 200 * t\n\n    # Total distance is the sum of the initial and increased distance\n    total_distance = Eq(initial_distance + increased_distance, 3700)\n\n    # Solve for t\n    time_spent = solve(total_distance, t)\n    \n    # Total time spent walking is 10 minutes at initial speed plus t minutes at increased speed\n    total_time = 10 + time_spent[0]\n\n    return total_time\n\nans = solution()"
    ],
    "05796f765d214621bf4c7e2a5b70ed1e": [
        "def solution():\n    sweets_left = 240\n    sweets_per_week = 45 - 60\n\n    weeks = (150 - sweets_left) / sweets_per_week\n\n    return abs(int(weeks))\n\nans = solution()"
    ],
    "e4f1396967f949e8aac075d260a9e904": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apple, orange = symbols('apple orange')\n    equation1 = Eq(2 * apple + orange, 40)\n    equation2 = Eq(apple + 2 * orange, 35)\n    \n    solutions = solve((equation1, equation2), (apple, orange))\n    \n    carrie_cost = solutions[apple] + solutions[orange]\n    \n    return carrie_cost\n\nans = solution()"
    ],
    "252e549ce3e84c9fa92978ffc5919293": [
        "def solution():\n    digits_count = 3\n    num_places = 3\n    return digits_count ** num_places\n\nans = solution()"
    ],
    "833677d869d1418d96be1acc39cb4ff5": [
        "def solution():\n    total_students = 37\n    sport_class = 18\n    reading_class = 22\n\n    both_classes = sport_class + reading_class - total_students\n\n    return both_classes\n\nans = solution()"
    ],
    "0806f05076574fdcaf845a2224dc162a": [
        "def solution():\n    # A seven-digit number is divisible by 9 if the sum of its digits is divisible by 9.\n    # The given number is in the form 47A1B9C, so we fix the known digits' sum first.\n    fixed_sum = 4 + 7 + 1 + 9  # Sum of known digits\n\n    # Since all digits are different and already used 4, 7, 1, 9, possible choices for A, B, C are 0, 2, 3, 5, 6, 8\n    possible_digits = [0, 2, 3, 5, 6, 8]\n\n    # We will check for each possible triplet (A, B, C) if the sum of all digits is divisible by 9.\n    for A in possible_digits:\n        for B in possible_digits:\n            for C in possible_digits:\n                if A != B and A != C and B != C:  # Making sure all digits are different\n                    total_sum = fixed_sum + A + B + C\n                    if total_sum % 9 == 0:  # Check if the total sum is divisible by 9\n                        # Since there's only one solution where numbers aren't repeated and sum is divisible by 9\n                        return A + B + C, f'47A1B9C'.replace('A', str(A)).replace('B', str(B)).replace('C', str(C))\n\n# Store the result in variable ans\nans = solution()"
    ],
    "84f7de20cdd542549b782f41e1b21e72": [
        "def solution():\n    sweets = 2  # Start from 2 as there are always 2 sweets remaining.\n    \n    while True:\n        if (sweets % 3 == 2) and (sweets % 4 == 2) and (sweets % 5 == 2) and (sweets % 6 == 2):\n            return sweets\n        sweets += 1  # Increment and check the next number of sweets.\n\nans = solution()"
    ],
    "6b3303365ecc41dab11b7954d4116eb6": [
        "def solution():\n    return 581 - 229\n\nans = solution()"
    ],
    "4d679466d49c48a5ba8bd1230747a070": [
        "def solution():\n    total_money = 140\n    racket_price = 49\n    ball_price = 1.5\n\n    # Calculation for total cost of two rackets\n    cost_for_rackets = 2 * racket_price\n\n    # Remaining money after buying two rackets\n    remaining_money = total_money - cost_for_rackets\n\n    # Calculation of number of tennis balls he can buy\n    num_of_balls = remaining_money / ball_price\n\n    return int(num_of_balls)\n\nans = solution()"
    ],
    "adce279592f04e808385106fbc96b9c7": [
        "def solution():\n    # Worst case scenario when drawing balls to ensure 3 different colored balls:\n    # Draw all 4 balls of one color: 4 balls\n    # Draw all 4 balls of second color: 4 balls\n    # Draw at least 1 ball of the third color to ensure 3 different colors: 1 ball\n    # Total number of balls drawn in this worst-case scenario:\n    return 4 + 4 + 1\n\nans = solution()"
    ],
    "70f1a5fb307c4820a64c6b9c7a3e8ba6": [
        "def solution():\n    donuts_per_box = 6\n    boxes = 6\n    donuts_eaten = 3\n\n    total_donuts = donuts_per_box * boxes\n    donuts_left = total_donuts - donuts_eaten\n    return donuts_left\n\nans = solution()"
    ],
    "8e151c79d73b44098fb3999b3b61196d": [
        "def solution():\n    heinz_chocolates = 87\n    heinz_per_week = 4\n    jed_chocolates = 137\n    jed_per_week = -6\n\n    week = 0\n    while heinz_chocolates != jed_chocolates:\n        heinz_chocolates += heinz_per_week\n        jed_chocolates += jed_per_week\n        week += 1\n\n    return week\n\nans = solution()"
    ],
    "3d4453f48b85485db44a73fe0e83a81c": [
        "def solution():\n    total_durians = 90\n    sold_fraction = 4 / 6\n    sold_durians = total_durians * sold_fraction\n    remaining_durians = total_durians - sold_durians\n    return remaining_durians\n\nans = solution()"
    ],
    "57221fd378d74100a636076027c2568d": [
        "def solution():\n    # Number of ways to choose 3 points out of 12 to form triangles\n    total_triangles = (12 * 11 * 10) // (3 * 2 * 1)\n    # Number of right angled triangles that can have the center of the circle as one of its vertices\n    triangles_with_center = 12\n    # Total number of right angled triangles = total_triangles - triangles_with_center\n    right_angled_triangles = total_triangles - triangles_with_center\n    return right_angled_triangles\n\nans = solution()"
    ],
    "deeb116148504ace9de18dfb01c2ab56": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    racket, shuttlecock = symbols('racket shuttlecock')\n\n    equation1 = Eq(racket + 5 * shuttlecock, 205)\n    equation2 = Eq(2 * racket + 15 * shuttlecock, 515)\n\n    solutions = solve((equation1, equation2), (racket, shuttlecock))\n\n    return solutions[racket]\n\nans = solution()"
    ],
    "ee76cce07a1c443dab8df84aab143d24": [
        "def solution():\n    c = symbols('c')\n    equation = Eq(5 * (6 * c - 1), -35)\n    sol = solve(equation, c)\n    return sol[0]\n\nans = solution()"
    ],
    "aedfdb2e53834d18b4dd9b71091562bf": [
        "def solution():\n    # If the tiger is the 11th animal and also in the middle,\n    # then there are 10 animals in front of him and 10 animals behind him.\n    total_animals = (10 * 2) + 1\n    return total_animals\n\nans = solution()"
    ],
    "ca43287494e7451e9a31849cb5bdfb51": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let a be the weight of a box of apples, o be the weight of a box of oranges\n    a, o = symbols('a o')\n\n    # Form the equations based on the problem statement\n    # 3 boxes of apples and 5 boxes of oranges weigh 270kg\n    equation1 = Eq(3 * a + 5 * o, 270)\n    # 3 boxes of apples and 7 boxes of oranges weigh 342kg\n    equation2 = Eq(3 * a + 7 * o, 342)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (a, o))\n\n    return solutions[a], solutions[o]\n\nans = solution()"
    ],
    "de0a19ac15d54fe88a6e870b218a8ac6": [
        "def solution():\n    monthly_salary = 1.2\n    debt = 2.6\n\n    months_needed = debt / monthly_salary\n\n    return months_needed\n\nans = solution()"
    ],
    "a6b4f6eda2dd4c1086279d0e363ac3fb": [
        "def solution():\n    ans = (1/3) * 24 + (2/5) * 30 + (1/3) * 15\n    return ans\n\nans = solution()"
    ],
    "f232bcc26c5b4a5f9cf2fd8102e72acd": [
        "def solution():\n    count = 0\n    # Iterate through all three-digit numbers\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 4:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b2590928a5354962820ebf5c75fbea46": [
        "def solution():\n    return 100 - (33 + 34)\n\nans = solution()"
    ],
    "4ebbc0a9bb1e42cd8e77949e6447a0d2": [
        "def solution():\n    ans = 36.42 * 1000\n    return ans\n\nans = solution()"
    ],
    "5843cc2900624024adfb41c64f5bdf23": [
        "def solution():\n    haribo_cost_cents = 50\n    mamee_cost_cents = haribo_cost_cents - 30\n    jelly_cost_cents = 6 * mamee_cost_cents\n    jelly_cost_dollars = jelly_cost_cents / 100\n\n    return jelly_cost_dollars\n\nans = solution()"
    ],
    "aa8b7ff7b5d044b3b3060a29be5c6a9b": [
        "def solution():\n    num = 2405 + 1827\n    return num2words(num)\n\nfrom num2words import num2words\n\nans = solution()"
    ],
    "a0808fb3383548829621ede423be79eb": [
        "def solution():\n    for num in range(1, 100):\n        if (num % 3 == 2) and (num % 4 == 3) and (num % 5 == 4):\n            return num\n\nans = solution()"
    ],
    "ffcd2dd5014240228dc1917324db1930": [
        "def solution():\n    lemon = 2\n    cherry = 7\n    mint = 1\n\n    will_hates_mint = mint\n    max_candies_will_can_eat = lemon + cherry\n    \n    return max_candies_will_can_eat\n\nans = solution()"
    ],
    "3590a4b33e5c474cba9961cce5263a4b": [
        "def solution():\n    # Given that Nancy initially divides 24 roses into 3 vases.\n    initial_roses = 24\n    initial_vases = 3\n    roses_per_vase_initially = initial_roses // initial_vases\n\n    # Find how many vases are there in total after her mother brings more roses\n    total_vases = initial_vases + 4\n\n    # Since each vase has the same number of roses, the total roses must be a multiple of the total number of vases.\n    # The number of roses in each vase initially will be the same as the final roses per vase.\n    \n    total_roses = roses_per_vase_initially * total_vases\n    return total_roses\n\nans = solution()"
    ],
    "0760b73c607e495a97b0a547a70d5af8": [
        "def solution():\n    return (-18 + (-2)) / 2\n\nans = solution()"
    ],
    "f253907f9bdf4de3a6151819ae43b291": [
        "def solution():\n    strawberry_cake_price = 3\n    marble_cake_price = strawberry_cake_price + 2\n    cheese_cake_price = 3 * marble_cake_price\n\n    price_of_two_cheese_cakes = 2 * cheese_cake_price\n    return price_of_two_cheese_cakes\n\nans = solution()"
    ],
    "a3e35c4319ef4a119310524b050ec78f": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    num, _ = solve_congruence(*congruences)\n    while num < 80:\n        return num\n        num += 2*3*4*5\n\nans = solution()"
    ],
    "5c92d8264b89439e9a8efcb1cde156d8": [
        "def solution():\n    result = 10.256 + 9.2 - 7.51\n    return result\n\nans = solution()"
    ],
    "0b1fff26446748ceb6d70df2d4c59f1f": [
        "def solution():\n    num_teachers = 16\n    num_games = num_teachers - 1  # Each game eliminates one teacher until one winner remains\n    \n    return num_games\n\nans = solution()"
    ],
    "776031bcc4e54790a7e85880c7273093": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the unknown number\n    x = symbols('x')\n    \n    # Establish the equation based on the problem statement\n    equation = Eq(3*x + 6, x + 16)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    # Return the original number (the solution for x)\n    return solution[0]\n\nans = solution()"
    ],
    "76c82b772019406399e1152b52afe3a5": [
        "def solution():\n    # Given the divisibility conditions, we can directly infer some of the digits:\n    # CD must end with 0 or 5 to be divisible by 5. Since all digits are positive and unique,\n    # CD must end with 5 (it can't be 0).\n    D = 5\n    \n    # BCD is divisible by 11, we know D=5, so we need to find B and C such that (B+C) - C is a multiple of 11, B = 0 is not possible\n    # So B should be 6 because (6+C) - (5+C) = 6 - 5 = 1 which is not a multiple of 11,\n    # But (6+C) - (5+C) + 11k = 1 + 11k should be a multiple of 11 for some non-zero k, which gives us B = 6 and C = 0.\n    B, C = 6, 0\n   \n    # AB is divisible by 2, B=6 is even so A can be any digit. Given other conditions: ABC is divisible by 9,\n    # AB cannot be 16 because then C would be 9, violating the uniqueness of digits.\n    # So AB must be 26 because 2 + 6 + C(0) = 8 which is not divisible by 9, but 2 + 6 + 0 + 9k is divisible by 9 for k=1. Hence, A=2.\n    A = 2\n    \n    # Now we have all the digits which represent ABCD\n    ABCD = int(f\"{A}{B}{C}{D}\")\n    \n    return ABCD\n\nans = solution()"
    ],
    "031f3635142c4421b05d4b2b576e071a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for each child's age\n    son_younger, son_older, daughter_older, daughter_younger = symbols('son_younger son_older daughter_older daughter_younger', integer=True)\n    \n    # Since the younger son is twice the age of the older daughter\n    equation1 = Eq(son_younger, 2 * daughter_older)\n    \n    # Sons were born three years apart\n    equation2 = Eq(son_older, son_younger - 3)\n    \n    # Daughters were born two years apart\n    equation3 = Eq(daughter_older, daughter_younger + 2)\n    \n    # Sum of their ages is 55\n    equation4 = Eq(son_younger + son_older + daughter_older + daughter_younger, 55)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (son_younger, son_older, daughter_older, daughter_younger))\n    \n    # Since we are looking for the youngest child, we return the minimum age\n    return min(solutions.values())\n\nans = solution()"
    ],
    "07cca6d9086647059f61d49c4cc9e778": [
        "def solution():\n    positive_sum = sum(range(16, 21))\n    negative_sum = sum(range(11, 16))\n    ans = positive_sum - negative_sum\n    return ans\n\nans = solution()"
    ],
    "c7821793dd724577866140431e80753a": [
        "def solution():\n    # Given ratio height:width = 3:4\n    # Height is given as 21 cm, which corresponds to 3 parts of the ratio\n    # Calculating one part of the ratio\n    one_part = 21 / 3\n    \n    # Width corresponds to 4 parts of the ratio\n    width = 4 * one_part\n\n    # Calculating the perimeter of the screen\n    # Perimeter = 2 * (height + width)\n    perimeter = 2 * (21 + width)\n\n    return perimeter\n\nans = solution()"
    ],
    "e3e500d971604e29aa0a14edf78c74f7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for wallets (w) and watches (ww)\n    w, ww = symbols('w ww')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(2*w + 3*ww, 433)\n    equation2 = Eq(5*w + 4*ww, 701)\n\n    # Solve the system of equations for w and ww\n    solutions = solve((equation1, equation2), (w, ww))\n\n    # Get the price of one wallet\n    return solutions[w]\n\nans = solution()"
    ],
    "a2c8013f67c740bb813e2cff828c7cc3": [
        "def solution():\n    total_distance = 15 + 10 + 8\n    number_of_friends = 3\n    average_distance = total_distance / number_of_friends\n    return average_distance\n\nans = solution()"
    ],
    "3dff81f53f23452495bb29a705bf520f": [
        "def solution():\n    recurring_sequence = \"428571\"  # This is the recurring sequence of digits after the decimal point in 3/7\n    sequence_length = len(recurring_sequence)  # The number of digits in the repeating sequence (6 in this case)\n    total_digits = 58  # The total number of digits we want to sum\n    \n    # Calculate how many complete sequences of recurring digits fit into 58 digits and the remainder\n    full_sequences, remaining_digits = divmod(total_digits, sequence_length)\n    \n    # Sum the digits of all full sequences and the remainder of the sequence\n    sum_full_sequences = sum(int(digit) for digit in recurring_sequence) * full_sequences\n    sum_remaining_digits = sum(int(recurring_sequence[i]) for i in range(remaining_digits))\n    \n    # Final sum\n    ans = sum_full_sequences + sum_remaining_digits\n    return ans\n\nans = solution()"
    ],
    "1a4d0a08fad44f9ebb6ae96dbaae9f12": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "e81380a3834146729a81c2bca69516e4": [
        "def solution():\n    toms_string = 13  # Tom's string length in cm\n    nick_string = toms_string + 25  # Nick's string is 25 cm longer than Tom's\n\n    # Difference in length between Nick's and Tom's strings\n    difference = nick_string - toms_string\n\n    return difference\n\nans = solution()"
    ],
    "7b9c62b20e00466b99795e4987d051bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of solution to be exchanged\n    x = symbols('x')\n\n    # Equation representing concentration balance after exchange\n    # for bottle A the concentration after exchange is (50*0.11 - x*0.11 + x*0.47) / 50\n    # for bottle B the concentration after exchange is (50*0.47 - x*0.47 + x*0.11) / 50\n    # The concentrations should be equal after exchange\n    equation = Eq((50 * 0.11 - x * 0.11 + x * 0.47) / 50, \n                  (50 * 0.47 - x * 0.47 + x * 0.11) / 50)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ee22231baefc4e1bace6954a18c6dfd1": [
        "def solution():\n    students_choosing_tenders = 18\n    total_students = 50\n    \n    percentage = (students_choosing_tenders / total_students) * 100\n    \n    return percentage\n\nans = solution()"
    ],
    "b6a2b577b4e5470188401b67b822af20": [
        "from math import factorial\n\ndef solution():\n    total_books = 3 + 4 + 2 + 2\n    biographies = 3\n    science_fictions = 4\n    magazines = 2\n    practice_books = 2\n\n    # Combinations with repetition\n    ans = factorial(total_books) // (factorial(biographies) * factorial(science_fictions) * factorial(magazines) * factorial(practice_books))\n    return ans\n\nans = solution()"
    ],
    "8589e072708949c4a1c18f959b68d739": [
        "def solution():\n    return 0.2 * 0.3\n\nans = solution()"
    ],
    "b00dd9facbe04160a2ed274649dd7571": [
        "def solution():\n    result = (75 - 3) / 8\n    return result\n\nans = solution()"
    ],
    "8a1f5a78534245b78c14a7d808df202e": [
        "def solution():\n    plot_length_cm = 20 * 100  # Convert meters to centimeters\n    cauliflower_spacing_cm = 40  \n    first_cauliflower_offset_cm = 20  \n\n    # Calculate the available length for planting cauliflowers, starting from the first one\n    available_length_for_cauliflowers = plot_length_cm - first_cauliflower_offset_cm\n  \n    # Divide the available length by the spacing to find out how many cauliflowers can be planted\n    number_of_cauliflowers = available_length_for_cauliflowers // cauliflower_spacing_cm\n  \n    # Add the first cauliflower\n    number_of_cauliflowers += 1\n\n    return number_of_cauliflowers\n\nans = solution()"
    ],
    "8d16df72513e48ce9cf5c5768ac94b3b": [
        "def solution():\n    digits = [1, 3, 6]\n    count = 0\n    \n    # Generate all possible three-digit numbers\n    for i in digits:\n        for j in digits:\n            for k in digits:\n                if i != j and i != k and j != k:\n                    count += 1\n    \n    return count\n\nans = solution()"
    ],
    "dd2b5176641b47188cb8bc10cc18c3dc": [
        "def solution():\n    from itertools import combinations\n\n    candies = 15\n    piles = 4\n    ways = set()\n\n    for combo in combinations(range(1, candies), piles - 1):\n        if sum(combo) < candies:\n            ways.add(tuple(sorted((combo + (candies - sum(combo),)))))\n\n    ans = len(ways)\n    return ans\n\nans = solution()"
    ],
    "d45dd29337134aa9b9314275c5f2b31a": [
        "def solution():\n    return 0.30 * 250\n\nans = solution()"
    ],
    "003a17cf90624266bdfa006deb29cd68": [
        "def solution():\n    from sympy import isprime\n\n    prime_numbers = []\n    for num in range(2, 51):\n        if isprime(num) and isprime(num + 6) and num + 6 <= 50:\n            prime_numbers.append((num, num + 6))\n        elif isprime(num) and isprime(num - 6) and num - 6 >= 2:\n            if (num - 6, num) not in prime_numbers:\n                prime_numbers.append((num - 6, num))\n\n    ans = len(prime_numbers), prime_numbers\n    return ans\n\nans = solution()"
    ],
    "c87b5329b55a4badb42841d47bba1a1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lucy, peter, edmund, susan = symbols('lucy peter edmund susan')\n\n    equation1 = Eq(edmund, 2 * susan)\n    equation2 = Eq(peter, 3 * edmund)\n    equation3 = Eq(lucy, peter / 2)\n    equation4 = Eq(lucy + peter + edmund + susan, 120)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (lucy, peter, edmund, susan))\n\n    return solutions[lucy]\n\nans = solution()"
    ],
    "45d85cbefb344a0a875c5e59df47d4f3": [
        "def solution():\n    a, b = 1, 2\n    while True:\n        a, b = b, a + b\n        if a == 21:  # stop when the previous term is 21\n            break\n    return b\n\nans = solution()"
    ],
    "0b1752605b164c48b0814af3beffe291": [
        "def solution():\n    ans = 19 + 23 + 19 + 22 + 20\n    return ans\n\nans = solution()"
    ],
    "148b423200fd4f4f9cc3cfed406293e0": [
        "def solution():\n    total_length_m = 3.7          # Length in meters\n    additional_length_cm = 64     # Length in centimeters\n    subtract_length_m = 2         # Length in meters to subtract\n    subtract_length_cm = 7        # Centimeters to subtract\n\n    # Convert everything to meters\n    additional_length_m = additional_length_cm / 100\n    subtract_length_m_total = subtract_length_m + (subtract_length_cm / 100)\n\n    # Perform the addition and subtraction in meters\n    final_length_m = total_length_m + additional_length_m - subtract_length_m_total\n\n    return final_length_m\n\nans = solution()"
    ],
    "8ae8aebcd931414896cbbb9d92a27fa1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the price of one banana and one pear\n    banana, pear = symbols('banana pear')\n\n    # Create equations based on the information given\n    equation1 = Eq(1 * banana + 2 * pear, 94)  # Max's purchase\n    equation2 = Eq(1 * banana + 1 * pear, 62)  # Emily's purchase\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "0807a5b8035f428595efa3d05b37f60b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    black, white, grey = symbols('black white grey')\n\n    equation1 = Eq(black + white + grey, 59)\n    equation2 = Eq(black + white, grey + 11)\n    equation3 = Eq(black, white - 9)\n\n    solutions = solve((equation1, equation2, equation3), (black, white, grey))\n\n    return solutions[white]\n\nans = solution()"
    ],
    "560f55b2062d4bb393b7c4c68779398a": [
        "def solution():\n    total_fruit = 48\n    fraction_apples = 5 / 8\n    apples = total_fruit * fraction_apples\n    pears = total_fruit - apples\n    return int(pears)\n\nans = solution()"
    ],
    "4de7bc9127b844c8845810ad2db2dd1b": [
        "def solution():\n    target_sum = 35\n    max_product = 0\n    for x in range(1, target_sum // 2 + 1):\n        y = target_sum - x\n        max_product = max(max_product, x * y)\n    return max_product\n\nans = solution()"
    ],
    "bdfb73d963c14ec7bac25b679d5d5735": [
        "def solution():\n    average_daily_earnings = 70\n    num_working_days = 6  # From Monday to Saturday\n\n    total_earnings = average_daily_earnings * num_working_days\n\n    return total_earnings\n\nans = solution()"
    ],
    "dc79304d4b074af798fdc304b00f1fe2": [
        "def solution():\n    minutes = 4.6\n    seconds_per_minute = 60\n    ans = minutes * seconds_per_minute\n    return ans\n\nans = solution()"
    ],
    "ce41ebada23a4f4d8a127ded83c184fd": [
        "def solution():\n    # The sequence given is a geometric progression with the first term a = 1 and common ratio r = 2\n    # The nth term of a geometric sequence is given by: a_n = a * r^(n-1)\n    # We need to find the 20th term and the 17th term.\n    \n    a = 1  # first term\n    r = 2  # common ratio\n    \n    # 20th term\n    term_20 = a * (r ** (20 - 1))\n    \n    # 17th term\n    term_17 = a * (r ** (17 - 1))\n    \n    # Divide the 20th term by the 17th term\n    ans = term_20 / term_17\n    \n    return ans\n\nans = solution()"
    ],
    "32f413ff728d481fb33f3ff50b93c6ce": [
        "def solution():\n    # Average number of books Alice, Becky, and Crystal have is 60\n    average_abc = 60\n    # Total number of books Alice, Becky, and Crystal have\n    total_abc = 3 * average_abc\n    \n    # New average when Dennis is included\n    new_average = average_abc + 10\n    # Total number of books when Dennis is included\n    total_abcd = 4 * new_average\n    \n    # Dennis's number of books is the difference between total with and without him\n    dennis_books = total_abcd - total_abc\n    \n    return dennis_books\n\nans = solution()"
    ],
    "873caeb39b18425fa3cf21cb40505ac6": [
        "def solution():\n    total_distance = 16\n    day_distance = 5\n    night_distance = 3\n    effective_distance = day_distance - night_distance\n    day_count = 0\n\n    while total_distance > 0:\n        day_count += 1\n        total_distance -= day_distance\n        if total_distance <= 0:\n            break\n        total_distance += night_distance\n\n    return day_count\n\nans = solution()"
    ],
    "9eefa1dbad6349a090e42d50a09d87fd": [
        "def solution():\n    # Smallest two-digit prime number\n    smallest_two_digit_prime = 11\n    \n    # Largest two-digit square number\n    # We need to find the largest perfect square that is less than 100\n    largest_square = 0\n    for i in range(1, 10):\n        if (i*10)**2 < 100:\n            largest_square = (i*10)**2\n        else:\n            break\n    \n    # The product of the smallest two-digit prime number and the largest two-digit square number\n    ans = smallest_two_digit_prime * largest_square\n    return ans\n\nans = solution()"
    ],
    "515f9b66abd142d0bd65c4a91de0a79a": [
        "def solution():\n    distance_1_to_4 = 9\n    number_of_intervals_1_to_4 = 4 - 1\n    interval_distance = distance_1_to_4 / number_of_intervals_1_to_4\n    \n    distance_1_to_9 = interval_distance * (9 - 1)\n    return distance_1_to_9\n\nans = solution()"
    ],
    "c852142aceb043f5b55cd004438cf7a6": [
        "def solution():\n    beads = 700\n    beads_per_necklace = 27\n\n    full_necklaces = beads // beads_per_necklace\n\n    return full_necklaces\n\nans = solution()"
    ],
    "53411c78458748e1ab1aa5ff7a2ef692": [
        "def solution():\n    johns_height = 19.6\n    ratio_john = 2\n    ratio_mike = 3\n\n    mikes_height = johns_height * (ratio_mike / ratio_john)\n\n    return mikes_height\n\nans = solution()"
    ],
    "00d0ef22036440bfba46cf90f1e51a5a": [
        "def solution():\n    # Check if 233 is a prime number\n    if 233 > 1:\n        for i in range(2, 233):\n            if (233 % i) == 0:\n                return False  # Michael is incorrect, the chocolate can be divided evenly\n        else:\n            return True  # Michael is correct, the chocolate cannot be divided evenly\n    else:\n        return False  # Michael is incorrect, the chocolate cannot be divided evenly as the number of students cannot be less than 1\n\nans = solution()"
    ],
    "6927ac3bb6f64f89b5830b5fccd79ae6": [
        "def solution():\n    hundredths = 7\n    tenths = 6\n    ones = 4\n\n    number = ones + tenths / 10 + hundredths / 100\n    return number\n\nans = solution()"
    ],
    "cf4d33bf77d24115a787173fb7fe030e": [
        "def solution():\n    speed_of_ship = 22  # speed of the ship in still water in km/h\n    speed_of_current = 3  # speed of the current in km/h\n\n    # Speed downstream is the speed of the ship plus the speed of the current\n    speed_downstream = speed_of_ship + speed_of_current  # in km/h\n\n    distance = 200  # distance that needs to be traveled downstream in km\n\n    # Time = Distance / Speed\n    time = distance / speed_downstream  # time in hours\n\n    return time\n\nans = solution()"
    ],
    "56d8daf28c984740b59bdb2fd77882d7": [
        "def solution():\n    numbers = [19, 6, 12, 13, 21, 4, 8, 17]\n    return sum(numbers)\n\nans = solution()"
    ],
    "c824a5b0a4384dcc938f65073d4a8794": [
        "def solution():\n    trains = 4\n    buses = 3\n    flights = 2\n\n    ways = trains + buses + flights\n\n    return ways\n\nans = solution()"
    ],
    "6801a3acc18c476f8557f9869fe2dd0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x represent the number of students in Class B.\n    # Then, Class A has x + 3 students.\n    # Total peaches Eddie gets is represented by P.\n\n    x, P = symbols('x P')\n    \n    # Equation representing that if all peaches are given to Class A,\n    # each student can get 5 peaches with 10 left.\n    equation1 = Eq(P, (x + 3) * 5 + 10)\n    \n    # Equation representing that if all peaches are given to Class B,\n    # each student can get 8 peaches but 2 peaches are short.\n    equation2 = Eq(P + 2, x * 8)\n    \n    # Solving the system of equations.\n    solutions = solve((equation1, equation2), (x, P))\n    \n    # Extracting the number of peaches Eddie gets.\n    return solutions[P]\n\nans = solution()"
    ],
    "6a0c0299b8e74741b435eee435724ca3": [
        "def solution():\n    pencil_cost = 2\n    pen_cost = 4\n    \n    pencils_for_a_pen = pen_cost // pencil_cost\n    \n    return pencils_for_a_pen\n\nans = solution()"
    ],
    "63233813070f46b2ac40a6c1b5bc9b6c": [
        "def solution():\n    total_points = 36\n    points_per_correct = 6\n    points_per_incorrect = -2\n    total_questions = 10\n\n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        if (correct_answers * points_per_correct +\n                incorrect_answers * points_per_incorrect) == total_points:\n            return correct_answers\n\nans = solution()"
    ],
    "3e88caa587c24fdea4f8a57b8dbd78f8": [
        "def solution():\n    ans = 9.95 - 2.6 - 3.412\n    return ans\n\nans = solution()"
    ],
    "30ec79644d524ec291def656fb45df08": [
        "def solution():\n    product = 888 * 999\n    last_two_digits = product % 100\n    return last_two_digits\n\nans = solution()"
    ],
    "d3732a99f6ef4521b3a6328c710459fd": [
        "def solution():\n    result = 78.2 - 31.45 + 5.245 - 2.3\n    return result\n\nans = solution()"
    ],
    "20389c4707d0488a9cd27afb2d7c45ed": [
        "def solution():\n    from sympy import symbols, solveset, Eq\n\n    h = symbols('h', integer=True)\n    cube_root = 28512 ** (1/3)\n\n    equation = Eq(28512/h, cube_root**3)\n    h_values = solveset(equation, h)\n\n    for val in h_values:\n        if val.is_Integer:\n            return val\n\nans = solution()"
    ],
    "d8669bc3a70344f58225403abd0196e9": [
        "def solution():\n    # Bart needs to take at least 1 red, 1 yellow to make sure he has two different colors.\n    # However, to guarantee he gets two different colors, he must account for the worst case\n    # scenario where he picks all chips of one color first.\n    # If Bart takes all 5 brown chips first, he then needs to take 1 more chip which could be\n    # either red or yellow to guarantee two different colors. So the smallest number is 5 + 1.\n    \n    # Take all 5 brown, then one more which is guaranteed to be red or yellow\n    num_chips = 5 + 1\n    \n    return num_chips\n\nans = solution()"
    ],
    "a5e7e019fb4d4c0080d3bb8fee16309b": [
        "from math import factorial\n\ndef derangement(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 0\n    else:\n        return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n\ndef solution():\n    # Number of friends\n    n = 7\n    # Calculate derangement for n friends\n    ans = derangement(n)\n    return ans\n\nans = solution()"
    ],
    "1fd49a79b84a47ae801b6ede661a42f2": [
        "from math import factorial\n\ndef solution():\n    # Since there must be at least 1 dance performance (D) between every 2 sketch performances (S),\n    # We can initially place the dance performances like this: S D S D S\n    # Now we have 4 dance performances left to place in the 6 available slots (before and after each S, and at the ends)\n    # These can be distributed in the slots in the manner of \"stars and bars\"\n    # There are 5 slots between the sketch performances and 2 at the ends, so in total 7 \"bars\" and 4 \"stars\"\n    # This is equivalent to choosing 4 out of 7 slots to place the remaining dance performances \n    stars = 4\n    bars = 7\n    dance_slots = factorial(bars) // (factorial(stars) * factorial(bars - stars))\n\n    # Finally, within each type of performance, the order matters, so we multiply by the permutations of each type\n    dances_permutations = factorial(7)  # 7!\n    sketches_permutations = factorial(3)  # 3!\n\n    return dance_slots * dances_permutations * sketches_permutations\n\nans = solution()"
    ],
    "688bd3546a274323aedfd728fc91d0e1": [
        "def solution():\n    # There are 10 families with 3 members each, so there are 30 individuals.\n    # Number of handshakes between fathers from different families\n    fathers_handshakes = (10 * 9) // 2  # Each father shakes hands with 9 others (combinations of 2 from 10)\n    \n    # For mothers: Each mother shakes hands with all the fathers and children from other families \n    # (9 fathers and 9 children each).\n    mothers_handshakes_per_mother = 9 + 9\n    total_mothers_handshakes = 10 * mothers_handshakes_per_mother  # There are 10 mothers\n    \n    # For children: Each child will shake hands with all the fathers and mothers\n    # from the other families (9 fathers and 9 mothers each).\n    children_handshakes_per_child = 9 + 9\n    total_children_handshakes = 10 * children_handshakes_per_child  # There are 10 children\n    \n    # Total handshakes is the sum of all handshakes\n    total_handshakes = fathers_handshakes + total_mothers_handshakes + total_children_handshakes\n    \n    return total_handshakes\n\nans = solution()"
    ],
    "980c93de91ea458b9c9e8248ad74e8b5": [
        "def solution():\n    a = 31415926\n    b = 31415927\n    c = 31415925\n    ans = a**2 - b * c\n    return ans\n\nans = solution()"
    ],
    "6601fcfffa994bc9b56b9f035024b14a": [
        "def solution():\n    repeating_sequence = \"85274\"\n    length_of_sequence = len(repeating_sequence)\n    position_in_sequence = (79 - 1) % length_of_sequence\n    return int(repeating_sequence[position_in_sequence])\n\nans = solution()"
    ],
    "af4a763c71d14bfc86469b27fffda5d7": [
        "def solution():\n    max_number = 0\n\n    # Iterate from the largest 3-digit number down to the smallest\n    for num in range(999, 99, -1):\n        if (num + 2009) % 17 == 0 and (num + 2009) % 19 == 0:\n            max_number = num\n            break\n\n    return max_number\n\nans = solution()"
    ],
    "e7684856f58240ceb07efec4b2d70e70": [
        "def solution():\n    # Mark is 8th from the front.\n    # There are 6 children between Mark and Helen.\n    # Helen is 9th from the end.\n    \n    # Total children in the queue equals:\n    # the position of Mark from the front + the number of children in between Mark and Helen + Helen's position from the end\n    \n    total_children = 8 + 6 + 9\n    return total_children\n\nans = solution()"
    ],
    "b4bdf164e10c4b1b9d4e3c8fbc8fb268": [
        "def solution():\n    # There are 5 odd digits: 1, 3, 5, 7, 9\n    odd_digits = 5\n    \n    # For a 3-digit number, we need to pick an odd digit for each place (hundreds, tens, units)\n    # Since repetition is allowed, we have 5 choices for each place\n    num_hundreds = odd_digits\n    num_tens = odd_digits\n    num_units = odd_digits\n    \n    # By the multiplication principle, we multiply the choices together to get the total number of 3-digit odd numbers\n    total_numbers = num_hundreds * num_tens * num_units\n\n    return total_numbers\n\nans = solution()"
    ],
    "700ddae7c261440e8dfef14d11e42592": [
        "def solution():\n    # Calculate the expected sum of the first 62 page numbers\n    n = 62\n    expected_sum = n * (n + 1) // 2\n    \n    # The actual sum given by Tim\n    actual_sum = 1939\n    \n    # The missing page number is the difference\n    missing_page = expected_sum - actual_sum\n    \n    return missing_page\n\nans = solution()"
    ],
    "87f7b53af1c7449bb3a1c8c021923671": [
        "def solution():\n    # Maximum number of marbles drawn without getting four different colors is,\n    # if she draws all marbles of three colors. Since there are only two orange marbles,\n    # she might draw them last to get the fourth different color. So, we need to ensure\n    # she picks all red, green, and blue marbles.\n    total_marbles_without_orange = 4 + 7 + 6\n\n    # Now, to ensure that she also gets an orange marble, we add 1 to the total.\n    marbles_to_ensure_four_colors = total_marbles_without_orange + 1\n    \n    return marbles_to_ensure_four_colors\n\nans = solution()"
    ],
    "18a332d1534047ebbe0fc807217bdfa9": [
        "def solution():\n    for ticket in range(0, 998):\n        if ticket + (ticket + 1) == 777:\n            return ticket + 2\n\nans = solution()"
    ],
    "a082a5ee490e4087b147b853ed2e0705": [
        "def solution():\n    # Calculate the additional hours after the free 40 hours up until the bill reaches $82\n    total_bill = 82\n    bill_after_free_hours = total_bill - 40 * 0  # Subtracting the free hours cost (0 dollars for 40 hours)\n\n    # Calculate the bill for hours between 40 and 50\n    if bill_after_free_hours <= (50 - 40) * 5:\n        hours = 40 + bill_after_free_hours / 5\n    # Calculate the bill for hours between 50 and 60\n    elif bill_after_free_hours <= (50 - 40) * 5 + (60 - 50) * 8:\n        bill_after_first_segment = bill_after_free_hours - (50 - 40) * 5\n        hours = 50 + bill_after_first_segment / 8\n    else:\n        bill_after_second_segment = bill_after_free_hours - (50 - 40) * 5 - (60 - 50) * 8\n        hours = 60 + bill_after_second_segment / 15\n    \n    return hours\n\nans = solution()"
    ],
    "1b42b4b26b2a4a84918723d849472aa1": [
        "def solution():\n    initial_value = 20000\n    depreciation_rate = 0.9\n    years = 5\n\n    value_after_years = initial_value * (depreciation_rate ** years)\n\n    return value_after_years\n\nans = solution()"
    ],
    "8b84d4c8e6d6433bb169eac92ff0c74c": [
        "def solution():\n    ans = 5 / 16\n    return ans\n\nans = solution()"
    ],
    "031cd0de1ee64e169848ce69d7f5b3ca": [
        "def solution():\n    length = 5\n    width = 3\n    perimeter = 2 * (length + width)\n    return perimeter\n\nans = solution()"
    ],
    "d756434ccb6b454cbe50d5d2de90751a": [
        "def solution():\n    number = 3016\n    subtract_value = 100\n    ans = number - subtract_value\n    return ans\n\nans = solution()"
    ],
    "5fdb62b3b2ec43a38c6fad9527ab2e7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x - 2*x + 7, 6*x + 4*x - 14)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c73a9fe2a1a84b32b28f07fc9fc2e630": [
        "def solution():\n    def count_ways(steps_remaining, current_step, avoided_step):\n        if steps_remaining < 0:\n            return 0\n        if steps_remaining == 0:\n            return 1 if current_step != avoided_step else 0\n        if current_step == avoided_step:  # Skip the muddy step\n            return 0\n        \n        # Calculate the steps for 1, 2 and 3 steps ahead.\n        return (count_ways(steps_remaining - 1, current_step + 1, avoided_step) +\n                count_ways(steps_remaining - 2, current_step + 2, avoided_step) +\n                count_ways(steps_remaining - 3, current_step + 3, avoided_step))\n    \n    return count_ways(10, 0, 5)\n\nans = solution()"
    ],
    "71b17521447249e196a0f8b18fb89aa3": [
        "def solution():\n    average_per_day = 60\n    days_in_a_week = 7  # Monday to Sunday\n\n    total_earnings = average_per_day * days_in_a_week\n    return total_earnings\n\nans = solution()"
    ],
    "d767cbc2899b42849970436783d686bb": [
        "def solution():\n    return 23.2 - 14.7\n\nans = solution()"
    ],
    "fcad283a7a1f427793d6d2d9b3d1a441": [
        "def solution():\n    # Since we're looking for the maximum value for the largest number,\n    # let's assume the other four numbers are the smallest possible\n    # distinct odd numbers, which are 1, 3, 5, and 7.\n    smallest_numbers_sum = 1 + 3 + 5 + 7\n    \n    # Subtract the sum of the four smallest odd numbers from the total\n    # to find the maximum possible value for the fifth number.\n    largest_possible_number = 85 - smallest_numbers_sum\n\n    return largest_possible_number\n\nans = solution()"
    ],
    "fec0efe56cd043f2ae93914883589ff6": [
        "def solution():\n    numbers = [0.993, 1.006, 1.1, 0.94, 0.99]\n    closest = min(numbers, key=lambda x: abs(x - 1))\n    \n    return closest\n\nans = solution()"
    ],
    "e8e9b50054f946dcb1b7e07440b9d29f": [
        "def solution():\n    speed_ship_still_water = 88\n    speed_current = 12\n    distance = 500\n\n    speed_downstream = speed_ship_still_water + speed_current\n    time = distance / speed_downstream\n\n    return time\n\nans = solution()"
    ],
    "40d0f97fc5af4ba79f1e1007a926a66b": [
        "def solution():\n    # One minute has 60 seconds\n    seconds_per_minute = 60\n    # Two and a half minutes\n    minutes = 2.5\n    # Calculate the number of seconds\n    n = seconds_per_minute * minutes\n    return int(n)\n\nans = solution()"
    ],
    "2d070af2dcd74f2ca39de8161148fb7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    T = symbols('T')  # Tax rate for the first $30,000\n    income = symbols('income')  # Ryan's annual income\n    \n    # Define the equations based on the problem statement\n    tax_for_first_30000 = T / 100 * 30000\n    tax_for_remaining = (T + 3) / 100 * (income - 30000)\n    \n    # Total tax paid\n    total_tax_paid = tax_for_first_30000\n    # Include tax for income above $30,000 if applicable\n    total_tax_paid += tax_for_remaining * (income > 30000)\n    \n    # Equation where total tax paid is (T+1)% of his annual income\n    equation = Eq(total_tax_paid, (T + 1) / 100 * income)\n    \n    # Solve the equation for Ryan's annual income\n    # Assuming that income is more than $30,000 otherwise tax would be a flat T%\n    solution = solve((equation, income > 30000), (T, income))\n    \n    # There might be multiple solutions, we need the one with a positive income\n    annual_income = next(val[1] for val in solution if val[1] > 0)\n    \n    return annual_income\n\nans = solution()"
    ],
    "a04912e5c32e426a9c96bc96e65c469c": [
        "def solution():\n    total_coins = 213\n    children = 5\n    remainder = total_coins % children\n    return remainder\n\nans = solution()"
    ],
    "a7ab5e95b20b449aae26b7bc5ce0f53b": [
        "from math import comb\n\ndef solution():\n    girls_ways = comb(8, 4)\n    boys_ways = comb(12, 3)\n    total_ways = girls_ways * boys_ways\n    return total_ways\n\nans = solution()"
    ],
    "e23c6ff29b964509baa268af08cccfb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the number of 50-cent coins\n    x = symbols('x')\n    # let y be the number of 20-cent coins\n    y = symbols('y')\n\n    # since there are 21 coins in total\n    equation1 = Eq(x + y, 21)\n\n    # the total value of the coins is $6.30, which is 630 cents\n    # 50-cent coins are worth x*50 cents\n    # 20-cent coins are worth y*20 cents\n    equation2 = Eq(50 * x + 20 * y, 630)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # we are interested in the number of 50-cent coins, which is x\n    return solutions[x]\n\nans = solution()"
    ],
    "16aa6cb964434e138d37f5f5467ea1c6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    distance = symbols('distance')\n    # Phillip arrives 3 minutes earlier than Alan, so Alan takes 15 minutes to arrive at B\n    alan_time = 15\n    # So, Phillip speed is distance / 12, and Alan speed is distance / 15\n    phillip_speed = distance / 12\n    alan_speed = distance / alan_time\n    # Phillip walks 15 meters per minute more than Alan\n    speed_eq = Eq(phillip_speed, alan_speed + 15)\n\n    # Solve for the distance\n    distance_solution = solve(speed_eq, distance)\n\n    return distance_solution[0]\n\nans = solution()"
    ],
    "f3b90fc112134c11bf16c053ec5b9bb5": [
        "def solution():\n    import math\n    count = 0\n    num = 2\n    while True:\n        str_num = '2' + '5' * num\n        int_num = int(str_num)\n        if len(str_num) > 5:  # After 25555, the numbers get longer than 5 digits, so we stop\n            break\n        if math.isqrt(int_num) ** 2 == int_num:\n            count += 1\n        num += 1\n    return count\n\nans = solution()"
    ],
    "0dcc886d48d14da3a0ba1c786f23c05c": [
        "def solution():\n    tom_money = 68.10\n    alice_spent = 36\n    alice_tom_difference = 25.40\n\n    # Calculate the money Alice had after spending\n    alice_after_spending = tom_money - alice_tom_difference\n\n    # Calculate the original amount of money Alice had\n    alice_original = alice_after_spending + alice_spent\n\n    return alice_original\n\nans = solution()"
    ],
    "e4cf51421424479896c2cc37d2e05235": [
        "def solution():\n    total_five_numbers = 5 * 28\n    total_twelve_numbers = 12 * 11\n    mean_all_numbers = (total_five_numbers + total_twelve_numbers) / (5 + 12)\n    return mean_all_numbers\n\nans = solution()"
    ],
    "1dc393d01ecf4792b3b72098c4cdff99": [
        "def solution():\n    original_price = 15.40\n    discount_percentage = 20\n    discounted_price = original_price * (1 - discount_percentage / 100)\n    \n    return discounted_price\n\nans = solution()"
    ],
    "d3a5ba15a4034a49afce92beb5409bf9": [
        "def solution():\n    total_length = 74\n    distance_between_benches = 7\n    number_of_gaps = 9 - 1 # gaps between benches is one less than the number of benches\n\n    length_of_all_benches = total_length - (number_of_gaps * distance_between_benches)\n    length_of_one_bench = length_of_all_benches / 9\n\n    return length_of_one_bench\n\nans = solution()"
    ],
    "9bb5ada2b3c4496bbf433bd138e2e0ae": [
        "def solution():\n    # Let 'x' be the original number of arms the bugbear had.\n    # If Peter cuts off one arm, the total number of arms reduces by one.\n    # Every time Peter cuts off 5 arms, 1 arm grows back. \n    # This effectively means that every 5 arms cut, the number reduces by 4.\n    # Since Peter cut off 21 arms, we can calculate the number of times an arm grew back.\n    cut_arms = 21\n    grow_back_factor = 5\n    arms_grown_back = cut_arms // grow_back_factor\n    \n    # Calculate the original number of arms.\n    original_arms = cut_arms - (arms_grown_back * (grow_back_factor - 1))\n\n    return original_arms\n\nans = solution()"
    ],
    "c8155e9c63f74065a3befe7a41ec8e68": [
        "def solution():\n    # Since there are 6 gold and 6 silver coins, the worst-case scenario\n    # is that we take out all the coins of the same color first.\n    # To ensure we have 2 different coloured coins, we must take out\n    # one more coin after having taken out all coins of one color.\n\n    number_of_same_color_coins = 6  # All gold or all silver\n    coins_needed_for_two_different_colors = number_of_same_color_coins + 1\n\n    return coins_needed_for_two_different_colors\n\nans = solution()"
    ],
    "a16e80d24e034bddb8280d950f5a08b1": [
        "def solution():\n    # Let's denote:\n    # c = number of candies\n    # b = number of students in class B\n    # Since the number of students in class A is twice of class B, there are 2b students in class A.\n    \n    # From the given information, we have two equations:\n    # 4 * (2b) = c - 20 (1)\n    # 6 * b = c + 16 (2)\n    \n    # Multiplying equation (2) by 2 gives us:\n    # 12 * b = 2c + 32 (3)\n    \n    # Now we subtract equation (1) from equation (3):\n    # 12b - 8b = 2c + 32 - (c - 20)\n    # 4b = c + 52\n    \n    # Expressing b from equation (2):\n    # b = (c + 16) / 6\n    \n    # Substituting b into 4b = c + 52 gives us:\n    # 4 * ((c + 16) / 6) = c + 52\n    # We multiply both sides by 6 to clear the fraction:\n    # 4 * (c + 16) = 6 * (c + 52)\n    # 4c + 64 = 6c + 312\n    \n    # Solving for c:\n    # 2c = 312 - 64\n    # 2c = 248\n    # c = 124\n    \n    return 124\n\nans = solution()"
    ],
    "c4a0044218d4459486aeded38095d16e": [
        "def solution():\n    # A number is mutually exclusive with its multiples and divisors.\n    # \"Mutually exclusive\" can be interpreted as \"not co-prime\".\n    # To maximize the selected numbers:\n    # - We avoid including a number and its multiples in the circle.\n    \n    # Start with the set of numbers from 1 to 24\n    numbers = set(range(1, 25))\n    \n    # Remove 1 immediately because it is not coprime with any other number\n    numbers.remove(1)\n    \n    # Now iterate through the rest of the numbers and remove their multiples\n    for num in range(2, 25):\n        if num in numbers:  # If the number has not already been removed\n            multiple = 2 * num\n            while multiple <= 24:\n                if multiple in numbers: numbers.remove(multiple)\n                multiple += num\n    \n    # The remaining numbers in the set can be arranged in a circle\n    ans = len(numbers)\n    return ans\n\nans = solution()"
    ],
    "ea360eacf521407f98ff8b5280ab0671": [
        "def solution():\n    count = 0\n    for i in range(1, 511):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "4b28c12170034843abf93f81771140af": [
        "def solution():\n    # Given distances between the trees is constant\n    # The distance between the 1st and 5th tree involves 4 intervals\n    # The distance between the 8th and 14th tree involves 6 intervals\n    # We use the ratio of intervals to calculate the required distance\n    distance_1_to_5 = 20  # in cm\n    intervals_1_to_5 = 4  # number of intervals between 1st and 5th tree\n    intervals_8_to_14 = 6  # number of intervals between 8th and 14th tree\n\n    # Calculate the distance of one interval\n    distance_per_interval = distance_1_to_5 / intervals_1_to_5\n\n    # Calculate the distance from 8th to 14th tree\n    distance_8_to_14 = distance_per_interval * intervals_8_to_14\n\n    return distance_8_to_14\n\nans = solution()"
    ],
    "0f7063d1e1484313ab5cf6b5f0420c06": [
        "def solution():\n    # If the 3rd greatest number is 246 and there are 10 numbers in total, to minimize the 4th greatest number,\n    # we need to maximize the first two numbers. If we assume that number 10 is 1 (the smallest possible whole\n    # number) and increase progressively till we get to number 4, we will have numbers as follows (let's call this the base scenario):\n    # 1, 2, 3... (these are the 7 smallest numbers, which need to be as small as possible)\n    # 4th greatest number (unknown at this point)\n    # 246 (3rd greatest number)\n    # Number 2 and Number 1 (should be maximized)\n\n    # To maximize the 2nd and 1st numbers, we can minimize the sum of the first 7 numbers to free up as much\n    # value as possible for the top 3 numbers.\n    # The sum of the first 7 whole numbers can be found using the formula for the sum of an arithmetic series:\n    # Sum = n/2 * (first_number + last_number)\n    # where n is the number of terms\n    sum_of_smallest_seven = 7 * (1 + 7) // 2  # This is the minimized sum of the smallest seven numbers\n\n    # Therefore, the sum of the three largest numbers would be:\n    sum_of_largest_three = 2021 - sum_of_smallest_seven  # Total sum minus the sum of the smallest seven\n\n    # Knowing that the 3rd largest number is 246, the remaining sum for the first and second largest numbers is:\n    remaining_sum_for_two_largest = sum_of_largest_three - 246\n\n    # To maximize the top 2 numbers, we must minimize the 4th greatest number.\n    # If we assign the 4th greatest number to be x, then the second largest is at least x+1 (as all numbers are different)\n    # and the largest is at least x+2 for the same reason, hence we have:\n    # x + (x+1) + (x+2) = remaining_sum_for_two_largest\n    # 3x + 3 = remaining_sum_for_two_largest\n    # x = (remaining_sum_for_two_largest - 3) / 3\n\n    # Solving for x gives us the minimum value of the 4th largest number.\n    min_value_4th_greatest = (remaining_sum_for_two_largest - 3) // 3\n\n    # But since x cannot be equal or greater than 246 (the 3rd largest), we will use\n    # x = 245 (which is the maximum value for the 4th largest to still be less than the 3rd)\n    # to find the actual minimum values of the 2nd and 1st largest numbers.\n    # Hence,\n    # 245 + (245+1) + (245+2) <= remaining_sum_for_two_largest\n\n    min_value_2nd_and_1st = remaining_sum_for_two_largest - 245 - 246 - 247\n    if min_value_2nd_and_1st >= 0:\n        # The base scenario holds true, so the minimum value of the 4th largest number is actually 245.\n        return 245\n    else:\n        # If not, we have to adjust our numbers, starting from 245 downwards until it fits.\n        # We decrement x and check again, adding the difference to 2nd and 1st largest numbers.\n        x = 245\n        while True:\n            if (x + (x + 1) + (x + 2) <= remaining_sum_for_two_largest):\n                break\n            x -= 1\n        return x\n\nans = solution()"
    ],
    "ceb847740b284e4291e28c8612c7623e": [
        "def solution():\n    speed_m_per_minute = 60\n    time_seconds = 150\n    time_minutes = time_seconds / 60\n\n    distance = speed_m_per_minute * time_minutes\n    return distance\n\nans = solution()"
    ],
    "b2c8b37b16bc4b09830fda1738de61da": [
        "def solution():\n    return 38*32 + 37*33 + 36*34\n\nans = solution()"
    ],
    "a7d31aaf346e44cc80aea145f699fb6c": [
        "def solution():\n    pip_sweets = 7\n    kevin_sweets = 3 * pip_sweets\n    qingqing_sweets = kevin_sweets + 6\n    total_sweets = pip_sweets + kevin_sweets + qingqing_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "81817e35e8504d14a4853709b3f0f4bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    devi, jerry = symbols('devi jerry')\n\n    equation1 = Eq(devi, jerry + 8)\n    equation2 = Eq((devi + 4)/(jerry + 4), 5/7)\n\n    solutions = solve((equation1, equation2), (devi, jerry))\n\n    return solutions[jerry]\n\nans = solution()"
    ],
    "31840b7e162d44dcaffb4626ba30ea1a": [
        "def solution():\n    import matplotlib.pyplot as plt\n    import numpy as np\n    \n    # Bud has 1 part, Pip has 5 parts\n    parts = {'Bud': 1, 'Pip': 5}\n    \n    # Create a figure and a single subplot\n    fig, ax = plt.subplots()\n\n    # Data for plotting\n    labels = list(parts.keys())\n    sizes = list(parts.values())\n\n    # The actual drawing of the parts graph\n    # we only have two slices, so explode doesn't do much here\n    explode = (0.1, 0)  \n    colors = ['gold', 'lightskyblue']\n\n    ax.pie(sizes, explode=explode, labels=labels, colors=colors,\n           autopct='%1.1f%%', shadow=True, startangle=140)\n\n    ax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n    # Save the plot as a file\n    plt.savefig('parts_graph.png', bbox_inches='tight')\n\n    # Output the result as a message\n    ans = \"Parts graph has been drawn and saved as 'parts_graph.png'.\"\n    return ans\n\nans = solution()"
    ],
    "2ee25cfde76549e8a74f4b49a19e6576": [
        "def solution():\n    numerator = 2998 + 2999 + 3000\n    denominator = 2997 + 2998 + 2999 + 3000 + 3001\n    fraction = numerator / denominator\n    ans = 10 * fraction\n    return ans\n\nans = solution()"
    ],
    "5e6155d2b3e346cbbc38976ee85ef798": [
        "def solution():\n    total_books = 35\n    total_layers = 4\n\n    # Apply the Pigeonhole Principle\n    least_books_on_most_layer = (total_books + total_layers - 1) // total_layers\n\n    return least_books_on_most_layer\n\nans = solution()"
    ],
    "e147bf0d408e4c8a9fccf6228377aabc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    grey, father = symbols('grey father')\n\n    equation1 = Eq(father, 30 + grey)\n    equation2 = Eq(father, 3 * grey)\n\n    solutions = solve((equation1, equation2), (grey, father))\n\n    return solutions[father]\n\nans = solution()"
    ],
    "a9ce794d4d724087ae8161cbe09c09a1": [
        "from itertools import permutations\n\ndef solution():\n    digits = [3, 6, 9]\n    perm = permutations(digits)\n    count = sum(1 for _ in perm)\n    return count\n\nans = solution()"
    ],
    "2dd0df0b47f04bfb8660c7f9d1f7eab6": [
        "def solution():\n    ans = 0.12 + 0.345 + 0.6789\n    return ans\n\nans = solution()"
    ],
    "3a9016a2cfba4bf48567281430e8ea9b": [
        "def solution():\n    ans = 3 * 37 * 9\n    return ans\n\nans = solution()"
    ],
    "0875b88ce12741689decc2618d2990ae": [
        "def solution():\n    first_term = 48\n    last_term = 80\n    difference = 4\n\n    # Number of terms can be determined by (last_term - first_term) / difference + 1\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    # Sum of an arithmetic sequence: n/2 * (first_term + last_term)\n    sum_of_terms = num_terms / 2 * (first_term + last_term)\n\n    return int(sum_of_terms)\n\nans = solution()"
    ],
    "ed453aff15e04b3fbad1957ab9fac783": [
        "def solution():\n    # The first digit can be 1 or 2 (2 options), because it can't be 0 for a three-digit number\n    # The second digit can be 0, 1, or 2 but can't be the same as the first digit (2 options)\n    # The third digit can be 0, 1, or 2 but can't be the same as the first or second digit (1 option)\n    ans = 2 * 2 * 1  # Multiplying the number of options for each digit\n    return ans\n\nans = solution()"
    ],
    "bd2b901e7ebe48c895db12c5cefe8864": [
        "def solution():\n    cows = 523\n    pigs = 172\n    difference = cows - pigs\n    return difference\n\nans = solution()"
    ],
    "32f99dc7770c48f891cc519a0e993603": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 3), (3, 5), (5, 7)]\n    ans = solve_congruence(*congruences)\n    return next(filter(lambda x: 100 <= x < 200, range(ans[0], ans[0] + ans[1]*100, ans[1])))\n\nans = solution()"
    ],
    "2f7c543f936b44159eb43f58e41436ea": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    divisor = remainder + 1  # Since the remainder is 3, the minimum divisor is one more than that\n\n    # Calculate the minimum dividend\n    dividend = (quotient * divisor) + remainder\n    return dividend\n\nans = solution()"
    ],
    "473f107b34bc4eb98a8c18b2d5a71597": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    betty, veron, eliza = symbols('betty veron eliza')\n    \n    equation1 = Eq(eliza, 2 * veron)\n    equation2 = Eq(betty, eliza - 185)\n    equation3 = Eq(betty + veron + eliza, 855)\n\n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n\n    return solutions[betty]\n\nans = solution()"
    ],
    "72bf22ed00544452be7c9b7e3e3c9ea5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    y = symbols('y')  # y represents Hazel's age in three years\n    Hazel_current_age = y - 3\n    \n    Jessica_current_age = Hazel_current_age - 3\n    Hazel_next_year_age = Hazel_current_age + 1\n    Jessica_next_year_age = Jessica_current_age + 1\n\n    total_age_next_year = Hazel_next_year_age + Jessica_next_year_age\n\n    return total_age_next_year\n\nans = solution()"
    ],
    "d3a62f3a2a154a3d9ba934079c4f679d": [
        "def solution():\n    # Convert all measurements to cm\n    first_section_cm = 30\n    second_section_cm = 1.5 * 100  # 1.5m to cm\n    third_section_cm = 150 / 10    # 150mm to cm\n\n    # Sum the width of all three sections\n    total_width_cm = first_section_cm + second_section_cm + third_section_cm\n\n    # Return the total width in cm\n    return total_width_cm\n\nans = solution()"
    ],
    "58b2b0f298394a909fc6d284a735e599": [
        "def solution():\n    melanie_age = 8\n    difference = 38 - melanie_age\n    uncle_age = melanie_age + difference\n    return uncle_age\n\nans = solution()"
    ],
    "93d27a37cf174f6c9e8a2ff60b9bbf22": [
        "def solution():\n    pence = 15\n    pounds_to_pence = 3.00 * 100\n    percentage = (pence / pounds_to_pence) * 100\n    return percentage\n\nans = solution()"
    ],
    "4e0dc5edbf7d4e40b8ac2e3de13c21a2": [
        "def solution():\n    count = 0\n    for student_num in range(1, 51):\n        if student_num % 4 == 0:\n            count -= 1  # student turns backwards\n        if student_num % 6 == 0:\n            count += 1  # student facing forward if it was backwards, or backwards if it was facing forward\n    return 50 + count  # total number of students minus those who turned backwards\n\nans = solution()"
    ],
    "9c12fef929b2434bab748c05a0ff93fd": [
        "def solution():\n    start_hour = 15\n    start_minute = 25\n    duration_minutes = 108\n\n    end_hour = start_hour + (start_minute + duration_minutes) // 60\n    end_minute = (start_minute + duration_minutes) % 60\n\n    return f\"{end_hour:02d}:{end_minute:02d}\"\n\nans = solution()"
    ],
    "baeaa1b74d3542bbabb148cbdd2cc14c": [
        "def solution():\n    x_degree = 3\n    y_degree = 5 - x_degree\n    n = y_degree // 2\n    return n\n\nans = solution()"
    ],
    "2927ab094a1741819a4e2a25ebabc6e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the total number of animals originally be x\n    # Then the number of cows originally is 0.65x and goats is 0.35x\n    x = symbols('x')\n\n    # After adding 240 animals, the percentage of cows became 65% + 20%, which is 85%\n    # The number of goats doubled, so it became 2 * 0.35x\n    # Total animals after addition is x + 240, and the number of cows is 0.85 * (x + 240)\n\n    # We have two equations now:\n    # 0.65x + 240 = 0.85 * (x + 240) (1)\n    # 0.35x = 2 * 0.35x - 240 (2), because the number of goats doubled minus the 240 new animals\n\n    # We solve for x using the equations\n    eq1 = Eq(0.65*x + 240, 0.85*(x + 240))\n    eq2 = Eq(0.35*x, 2*0.35*x - 240)\n\n    solution = solve((eq1, eq2), (x))\n\n    original_goats = 0.35 * solution[x]\n\n    return int(original_goats)\n\nans = solution()"
    ],
    "8aad4836c0734930b7d215cbb6b09d6c": [
        "def solution():\n    ans = 18 + 3 - 8 + 17\n    return ans\n\nans = solution()"
    ],
    "1b593b3bdeb34c18b0cff4c24a506258": [
        "def solution():\n    amy_current_age = 15\n    sister_future_age = amy_current_age - 5\n    sister_current_age = sister_future_age - 3\n    return sister_current_age\n\nans = solution()"
    ],
    "eef4ade5677a43a4ae0df6aeeb38fe6e": [
        "def solution():\n    # Since there are 13 different numbers/letters,\n    # drawing 14 cards guarantees at least two cards have the same number/letter.\n    ans = 14\n    return ans\n\nans = solution()"
    ],
    "2f1be30621994420880174e39997c979": [
        "from fractions import Fraction\n\ndef solution():\n    result = 2 + Fraction(3, 8) + 6 + Fraction(9, 12) + 1 + Fraction(14, 16)\n    return result\n\nans = solution()"
    ],
    "d853853301cf40d6a725ec4ab3774957": [
        "def solution():\n    ans = sum(1/i for i in range(2, 21))\n    for j in range(2, 20):\n        ans += sum(j/i for i in range(j+1, 21))\n    return ans\n\nans = solution()"
    ],
    "25040bd355be4585bf5a273889285a78": [
        "def solution():\n    part_amount = 18\n    fraction = 3/5\n    whole_amount = part_amount / fraction\n    return whole_amount\n\nans = solution()"
    ],
    "01b407a825884d83acf6b91beaf5d407": [
        "def solution():\n    # Start from the smallest 3-digit number and check each one\n    # by ensuring the sum of digits == 21 and the number is even\n    for number in range(100, 1000, 2): # Even numbers only\n        if sum(map(int, str(number))) == 21:\n            return number\n\nans = solution()"
    ],
    "f58db1d3f54446688138665d57db026d": [
        "def solution():\n    return 423 * 72\n\nans = solution()"
    ],
    "52a86fa066cb48858c6bc524eece5782": [
        "def solution():\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = 3 * x + 5 - 20\n\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "44f2ee1889614bbfb19535bdd92da120": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "3502c215c1be4b7fb69703f1b13e625d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    book_price, pencil_price = symbols('book_price pencil_price')\n    pencil_price = 0.40  # 40p is £0.40\n    # Sarah's total cost is 8 books + 3 pencils\n    # Rebecca's total cost is 3 books + 8 pencils\n    # Sarah paid £1.00 more than Rebecca\n    equation = Eq(8 * book_price + 3 * pencil_price, 3 * book_price + 8 * pencil_price + 1)\n\n    solutions = solve(equation, book_price)\n\n    return float(solutions[0])\n\nans = solution()"
    ],
    "5fa3410a0ede4f5c874b9848f3d5326f": [
        "def solution():\n    even_squares = sum([(2*i)**2 for i in range(1, 11)])\n    odd_squares = sum([(2*i-1)**2 for i in range(1, 11)])\n\n    ans = even_squares - odd_squares\n    return ans\n\nans = solution()"
    ],
    "d7bced643fdd4eb6bdc74acb29830ef9": [
        "def solution():\n    total_water = 17\n    water_poured_per_jug = 2\n    number_of_jugs = 6\n\n    water_poured = water_poured_per_jug * number_of_jugs\n    remaining_water = total_water - water_poured\n\n    return remaining_water\n\nans = solution()"
    ],
    "017473f68ce348d49eb42bb8dbb458a6": [
        "def solution():\n    total_spent = 156\n    cactus_price = 2\n    sunflower_price = 7\n\n    # c: number of cacti, s: number of sunflowers\n    # 2c + 7s = 156\n    # c = s + 6\n    \n    # s = (156 - 2c) / 7\n    # c = ((156 - 2c) / 7) + 6\n\n    # We iterate over possible amounts of cacti\n    # Considering the constraints, cacti must be at most total_spent / cactus_price\n    for c in range(total_spent // cactus_price + 1):\n        s = (total_spent - cactus_price * c) / sunflower_price\n        if c == s + 6 and s.is_integer():\n            return c\n\nans = solution()"
    ],
    "4fed3bbe2a4c479fb032cdfa43d46b2d": [
        "def solution():\n    return 12.5 * 32\n\nans = solution()"
    ],
    "72bb560fb6bc4884bb7499eb0d199c5c": [
        "def solution():\n    andrew_points = 20\n    jack_more_points = 18\n    jack_points = andrew_points + jack_more_points\n    return jack_points\n\nans = solution()"
    ],
    "0be151f2fbc745f7a608fa9e0444c3fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    L, M = symbols('L M')  # L for Liverpool fans at first, M for Manchester United fans at first\n\n    # Original amounts: L - M = 1000\n    equation1 = Eq(L - M, 1000)\n\n    # After 30 minutes: M + 4836 = 3 * (L + 472)\n    equation2 = Eq(M + 4836, 3 * (L + 472))\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (L, M))\n\n    return solutions[L]\n\nans = solution()"
    ],
    "da5a959c72974b06be19c4288fbc217c": [
        "from math import comb\n\ndef solution():\n    total_players = 12\n    players_needed = 6\n    \n    number_of_ways = comb(total_players, players_needed)\n    \n    return number_of_ways\n\nans = solution()"
    ],
    "c5410d85775f48bd93e84ab31405739b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for the price of a book\n    book_price = symbols('book_price')\n\n    # Each pencil costs 40p which is £0.40\n    pencil_price = 0.40\n    \n    # Sarah bought 8 books and 3 pencils; she paid £1.00 more than Rebecca\n    sarah_total = 8 * book_price + 3 * pencil_price\n    \n    # Rebecca bought 3 books and 8 pencils\n    rebecca_total = 3 * book_price + 8 * pencil_price\n    \n    # Set up the equation: Sarah paid £1.00 more than Rebecca\n    equation = Eq(sarah_total, rebecca_total + 1)\n    \n    # Solve the equation for the price of a book\n    solution = solve(equation, book_price)\n    \n    # Get the price of the book in pounds\n    book_price_value = float(solution[0])\n    \n    return book_price_value\n\nans = solution()"
    ],
    "c23d5f0deb8a4bc7a5a92b52a64b5653": [
        "def solution():\n    remaining_after_mike = 3 + 2  # She had $3 left after giving $2 to Mike.\n    before_nini = remaining_after_mike * 2  # She had half of this money before giving half to Nini.\n    before_bob = before_nini * 2  # She had twice this money before giving half to Bob.\n    original_amount = before_bob * 2  # She had twice this money before giving half to her mother.\n    return original_amount\n\nans = solution()"
    ],
    "859405caaa7e4a0b9fa498591ea6d75b": [
        "def solution():\n    ans = 4867 + 285\n    return ans\n\nans = solution()"
    ],
    "6e612604c8ff4d42b99013c98deabfdd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    peaches, students_B = symbols('peaches students_B')\n    students_A = students_B + 3\n\n    equation1 = Eq((students_A * 5) + 10, peaches)\n    equation2 = Eq((students_B * 8) - 2, peaches)\n\n    solutions = solve((equation1, equation2), (peaches, students_B))\n\n    return solutions[peaches]\n\nans = solution()"
    ],
    "d564d279579b4412beee324ea716c5ac": [
        "def solution():\n    first_number = 178\n    second_number = first_number - 69\n    sum_numbers = 450\n\n    third_number = sum_numbers - (first_number + second_number)\n\n    return third_number\n\nans = solution()"
    ],
    "15cab5ac2a464bd49b38abf530497521": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(7*x + 3*(x + 5), 45)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "8cecf1b760794f42ac5164ddf2ddd1b9": [
        "def solution():\n    current_number, current_length, segment_length = 1, 0, 1\n    while True:\n        next_length = current_length + segment_length * 9 * 10**(segment_length - 1)\n        if next_length >= 2023:\n            break\n        current_number += 1\n        current_length = next_length\n        segment_length += 1\n    \n    # We're in the correct segment length now, we locate the exact number\n    numbers_left = 2023 - current_length - 1\n    full_numbers_passed = numbers_left // segment_length\n    exact_number = 10 ** (segment_length - 1) + full_numbers_passed\n    \n    # We locate the exact digit in the number\n    position_in_number = numbers_left % segment_length\n    ans = int(str(exact_number)[position_in_number])\n\n    return ans\n\nans = solution()"
    ],
    "50cd7efd01b841d298218aea08ed2f91": [
        "def solution():\n    age_at_end_of_98 = 11 - 1  # Tomorrow, the person will be 11, so at the end of 98, they are 10.\n    years_to_01 = 3  # From end of 98 to end of 01 is three years.\n\n    ans = age_at_end_of_98 + years_to_01\n    return ans\n\nans = solution()"
    ],
    "1d72b15c9167478a811748cdd734865e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    t_shirts, caps = symbols('t_shirts caps')\n    \n    # The equation for the ratio\n    ratio_equation = Eq(t_shirts / caps, 8 / 5)\n    # The equation for the amount collected\n    amount_equation = Eq(3 * (1/4) * t_shirts + 5 * (1/5) * caps, 132)\n    \n    # Solve the system of equations\n    solutions = solve((ratio_equation, amount_equation), (t_shirts, caps))\n    \n    return solutions[t_shirts]\n\nans = solution()"
    ],
    "76be802a2529408ebd6445587693be90": [
        "def solution():\n    return 9.95 - 2.6 - 3.42\n\nans = solution()"
    ],
    "81a3546d49f540918fa6687b12bf0b34": [
        "def solution():\n    students = 40\n    boat_capacity = 6\n    trips = -(-students // boat_capacity)\n    return trips\n\nans = solution()"
    ],
    "68189bcaa99d4e9f9c3e3ce95e7937fd": [
        "from itertools import permutations\n\ndef solution():\n    digits = '4625'\n    perms = permutations(digits)\n    odd_numbers = [int(''.join(p)) for p in perms if int(p[-1]) % 2 != 0]\n    return min(odd_numbers)\n\nans = solution()"
    ],
    "c1de6601e4b04d30ad771a324ae51e3c": [
        "def solution():\n    first_term = 2\n    common_diff = 2\n    n = 36\n\n    nth_term = (n / common_diff)\n\n    return int(nth_term)\n\nans = solution()"
    ],
    "0cddcd3bc30743f58a6fa95ed48ba314": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    joe_cards, eric_cards = symbols('joe_cards eric_cards')\n\n    equation1 = Eq(joe_cards, 7 * eric_cards)\n    equation2 = Eq(joe_cards - eric_cards, 168 * 2)\n\n    solutions = solve((equation1, equation2), (joe_cards, eric_cards))\n\n    cards_to_give = joe_cards - 168\n\n    return cards_to_give.subs(joe_cards, solutions[joe_cards])\n\nans = solution()"
    ],
    "085c8151173f4b7d90be8a69b00d7f5d": [
        "def solution():\n    from sympy import isprime\n\n    count = 0\n    for i in range(10, 100): # All two-digit numbers\n        tens_digit = i // 10\n        ones_digit = i % 10\n        if isprime(i) and isprime(tens_digit) and isprime(ones_digit):\n            count += 1\n    \n    return count\n\nans = solution()"
    ],
    "e2695aa79cb340d99906881fc1d6a0c6": [
        "def solution():\n    initial_kids_caught = 8\n    kids_ran_away = 5\n    additional_kids_caught = 9\n\n    total_kids_caught = initial_kids_caught - kids_ran_away + additional_kids_caught\n    return total_kids_caught\n\nans = solution()"
    ],
    "f0328bec52924f7ea69d1ae80d116453": [
        "def solution():\n    time_per_picture = 10  # time in minutes\n    total_time = 80  # time in minutes (1 hour and 20 minutes)\n\n    num_pictures = total_time / time_per_picture\n\n    return int(num_pictures)\n\nans = solution()"
    ],
    "b2064a45faa94ab689a5ee8b42de5b1c": [
        "def solution():\n    for i in range(1, 40):\n        if (19 - 6) % i == 0 and (19 - 6) // i == i // 2:\n            return i\n\nans = solution()"
    ],
    "6a68efce3a3843c488c04405fe0ad806": [
        "def solution():\n    amy_swims = 14\n    joanne_swims = 5\n    return amy_swims - joanne_swims\n\nans = solution()"
    ],
    "7b92cabf616c4f65bb3f245acc3311d5": [
        "def solution():\n    # Mina has 10 apples and wants to split into 2 groups with different numbers.\n    # One group will have 'i' apples, and the other will have '10-i' apples.\n    # The smallest non-zero group can have 1 apple;\n    # therefore, the largest group will have 10-1 = 9 apples.\n    # She can't have two equal groups, so she can't split them into 5-5.\n    # Therefore, there are 9 - 1 (5-5 case excluded) possible splits.\n    return 9 - 1\n\nans = solution()"
    ],
    "6520b25ec5ca47c28184d097d5c1d50f": [
        "def solution():\n    from math import factorial\n    \n    num_students = 5\n    num_ways = factorial(num_students)\n    \n    return num_ways\n\nans = solution()"
    ],
    "4464e412391748539179d461f02021f4": [
        "def solution():\n    total_pears = 38\n    # Let x be the number of pears Anne has originally\n    for x in range(1, total_pears):\n        if (x - 6) == (total_pears - x + 6) // 2:\n            return x\n\nans = solution()"
    ],
    "292666d407aa47a1b8822e94b934f869": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(0, 10):\n            for c in range(0, 10):\n                for d in range(0, 10):\n                    if (a*1001 + b*110 + c*11 + d) == 1370:\n                        return a*1000 + b*100 + c*10 + d\n\nans = solution()"
    ],
    "5f4b4e56afb34cf5a1144d2bc36161da": [
        "def solution():\n    sachin_rate = 1 / 3\n    peter_rate = 1 / 6\n    combined_rate = sachin_rate + peter_rate\n\n    time_taken = 1 / combined_rate\n    return time_taken\n\nans = solution()"
    ],
    "cc9705da6c674505ab7de37d248f4508": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for variables\n    isaac, joseph = symbols('isaac joseph')\n    \n    # Set up equations based on the problem statement\n    equation1 = Eq(isaac, 5 * joseph)                                    # Isaac had 5 times stamps as Joseph\n    equation2 = Eq(joseph + 154, (9 / 10) * isaac)                       # Joseph received 154 stamps\n    \n    # Solve equations simultaneously\n    solutions = solve((equation1, equation2), (isaac, joseph))\n    \n    # Return the number of stamps Isaac had\n    return solutions[isaac]\n\nans = solution()"
    ],
    "899b1a4b796c49099d270e74392468e4": [
        "def solution():\n    num_zeros = 0\n    fact = 1\n    for i in range(1, 30):\n        fact *= i\n    \n    while fact % 10 == 0:\n        fact //= 10\n        num_zeros += 1\n    \n    return num_zeros\n\nans = solution()"
    ],
    "d98f7fbf1401483cbb8a9febb9b267a5": [
        "def solution():\n    # Convert base 8 number to base 10\n    N_base8 = '12345654321'\n    N_base10 = int(N_base8, 8)\n    \n    # Calculate remainders\n    remainder_7 = N_base10 % 7\n    remainder_9 = N_base10 % 9\n    \n    # Calculate the sum of remainders\n    sum_of_remainders = remainder_7 + remainder_9\n    \n    return sum_of_remainders\n\nans = solution()"
    ],
    "1bb4ac60011c4f049e418cf89d7b6aca": [
        "def solution():\n    # Linda's speed to Ted's speed is 3:4\n    # When Linda has covered 1200m, Ted has covered a distance that is 4/3 of Linda's\n    # Therefore, Ted has covered 1200m * (4/3)\n    ted_distance = 1200 * (4 / 3)\n    \n    # The total length of the path is the distance covered by Linda plus the distance covered by Ted\n    total_length = 1200 + ted_distance\n    \n    return total_length\n\nans = solution()"
    ],
    "13bdfa0cc0bf4ec8b5035a9b4a3cba96": [
        "def solution():\n    count = 0\n    for year in range(2018, 2109):\n        if sum(map(int, str(year))) == 18:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "f4d8b1a7fd8f46d0a9ef67f2bee482c1": [
        "def solution():\n    for A in range(10):\n        number = int(f\"2018{A}\")\n        if number % 9 == 0:\n            ans = number % 8\n            return ans\n\nans = solution()"
    ],
    "7634476c9aa54ec59121ed35be37a90a": [
        "def solution():\n    # Ryan says there are 5 squirrels in front of him, so Ryan is at position 6 (assuming 1-indexed)\n    # Elvis says there are 7 squirrels behind him, so Elvis is at position (total_squirrels - 7)\n    # There is 1 squirrel between Ryan and Elvis, so Elvis's position is Ryan's position + 2\n    \n    # Let's denote total_squirrels as T\n    # From the given information, we can write the equation:\n    # Ryan's position + 2 = Elvis's position\n    # 6 + 2 = T - 7\n    # 8 = T - 7\n    # T = 15 (Ryan's position + Elvis's position + squirrel between + 7 squirrels behind Elvis + 5 squirrels in front of Ryan)\n    \n    ans = 15\n    return ans\n\nans = solution()"
    ],
    "be80ef03c92f4f92945f77d21a554dbf": [
        "def solution():\n    from math import factorial\n    \n    def D(n):\n        # Using the principle of inclusion-exclusion for derangement\n        return sum((-1)**i * factorial(n) // factorial(i) for i in range(n + 1))\n    \n    ans = D(6)\n    return ans\n\nans = solution()"
    ],
    "ccda4529057344dfb3239b232b55def3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x + 3*x + 2, 38 + 5*x - 8*x)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "3372b3b3a25d471db3a7b9b84e20d407": [
        "def solution():\n    numerator = 2019 + 2018 * 2020\n    denominator = 2019 * 2020 - 1\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "de7d03220ef44866b5c5a28b228aa86c": [
        "def solution():\n    workers = 3\n    days = 3\n    total_work = workers * days\n    days_for_one_worker = total_work / 1\n\n    return days_for_one_worker\n\nans = solution()"
    ],
    "260e6647f054406db07646bdfcd45cc2": [
        "def solution():\n    initial_amount = 3600\n    interest_rate = 0.02  # 2% interest\n\n    interest = initial_amount * interest_rate\n\n    return interest\n\nans = solution()"
    ],
    "c76e6054330d410d8964478169646a8e": [
        "def solution():\n    return 0.25 * 64\n\nans = solution()"
    ],
    "f5dda3a779a843e88e20668719067b5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for x\n    x = symbols('x')\n\n    # Set up the equation\n    equation = Eq((3*x + 3)/6, (5*x - 2)/8)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # Return the solution for x\n    return solution[0]\n\nans = solution()"
    ],
    "15a6e721c67f4f68bcb7869cb424dc30": [
        "def solution():\n    return 0.30 * 45\n\nans = solution()"
    ],
    "c41136a149b7455588eedcd3638a6d6e": [
        "def solution():\n    total_sum = sum([num for num in range(1, 20, 2)])\n    return total_sum\n\nans = solution()"
    ],
    "ba12d160c6704062bce29f06d2df0413": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack_current_age = symbols('jack_current_age')\n\n    equation = Eq(jack_current_age - 5, (jack_current_age + 8) / 2)\n\n    solutions = solve(equation, jack_current_age)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "4127bb2d659e42e7b67a826610a830ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial number of pupils in School P\n    x = symbols('x')  \n    # Since the ratio is 2:3, the initial number of pupils in School Q will be 1.5x\n    # After admitting pupils, the total number of pupils in School P and School Q:\n    # School P = x + 240\n    # School Q = 1.5x + 240\n    \n    # Now the new ratio is 3:4\n    equation = Eq((x + 240) / (1.5 * x + 240), 3/4)\n    # Solve the equation for x\n    solution = solve(equation, x)\n    # Since we want the initial number of pupils, we return x\n    return solution[0]\n\nans = solution()"
    ],
    "d1ef65d2af0d48fca0d26f7460c255c2": [
        "def solution():\n    bag_percentage = 70\n    purse_fraction = 3 / 8\n    \n    remainder_percentage = 100 - bag_percentage\n    purse_percentage = remainder_percentage * purse_fraction\n    \n    return purse_percentage\n\nans = solution()"
    ],
    "ad7c476fa787456a984de908cbf3274a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kenny, timmy, ron = symbols('kenny timmy ron')\n\n    equation1 = Eq(timmy, kenny - 12)\n    equation2 = Eq(ron, kenny + 20)\n    equation3 = Eq(kenny + timmy + ron, 284)\n\n    solutions = solve((equation1, equation2, equation3), (kenny, timmy, ron))\n\n    return solutions[ron]\n\nans = solution()"
    ],
    "e6126aee30d340e584a91ebb8121b3b4": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    word = \"EDUCATION\"\n    vowels = set(\"AEIOU\")\n    \n    total_permutations = factorial(len(word))\n    vowel_permutations = factorial(len([c for c in word if c in vowels]))\n    \n    adjacent_vowel_permutations = 0\n    for perm in permutations(word):\n        for i in range(len(perm) - 1):\n            if perm[i] in vowels and perm[i + 1] in vowels:\n                adjacent_vowel_permutations += 1\n                break\n    \n    non_adjacent_vowel_permutations = total_permutations - adjacent_vowel_permutations\n    \n    return non_adjacent_vowel_permutations // vowel_permutations\n\nans = solution()"
    ],
    "f045ccc90cd4400c86e6a51f2a370f28": [
        "def solution():\n    ans = 86.3 + 7\n    return ans\n\nans = solution()"
    ],
    "cda98aa296634bf2a385a6527a02e9c2": [
        "def solution():\n    initial_students = 5\n    initial_candies_per_student = 12\n    total_candies = initial_students * initial_candies_per_student\n    new_students = initial_students + 1\n    new_candies_per_student = total_candies // new_students\n    return new_candies_per_student\n\nans = solution()"
    ],
    "1d9d7ae4443a4d1a8f150b0ff35e0812": [
        "def solution():\n    # As BP and CP are the angle bisectors, they divide the angles B and C into two equal parts.\n    # Let's denote half of angle ABC as x and half of angle ACB as y.\n    # Therefore, angle ABC = 2x and angle ACB = 2y.\n    # The sum of the angles in triangle ABC is 180 degrees.\n    # We know angle BAC is 50 degrees, so 2x + 2y + 50 = 180.\n    # Simplifying gives x + y + 25 = 90 or x + y = 65.\n    \n    # The angle BPC is an exterior angle for triangle BPC and is equal to the sum of the opposite interior angles (x + y).\n    # Therefore, angle BPC = 65 degrees.\n    \n    angle_BPC = 65  # Since the angle bisectors divide the angles equally, angle BPC is 65 degrees.\n    return angle_BPC\n\nans = solution()"
    ],
    "d68ae3a33d98427494ecd3ac34702711": [
        "def solution():\n    from sympy import Eq, solve, symbols\n\n    x = symbols('x')\n    equation = Eq(0.3 * x + 0.7 * (20 - x), 20 * 0.54)\n    ans = solve(equation, x)\n\n    return ans[0]\n\nans = solution()"
    ],
    "a5723a387628481d828499d1c34bdcfc": [
        "def solution():\n    total_sweets = 11\n    wrappers = 11\n\n    while wrappers >= 3:\n        additional_sweets = wrappers // 3\n        total_sweets += additional_sweets\n        wrappers = wrappers % 3 + additional_sweets\n    \n    return total_sweets\n\nans = solution()"
    ],
    "44bd36d5b38b44949074bb84feb11ca3": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime('11:40', '%H:%M')\n    duration = timedelta(hours=4, minutes=50)\n    leave_time = arrival_time + duration\n    return leave_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "cf273ad7cc974df890c0f43328a5de3e": [
        "def solution():\n    for i in range(10, 100):\n        if i % 5 == 4 and i % 7 == 4:\n            return i\n\nans = solution()"
    ],
    "60143fac73a641d4afc2cffe6b15a9e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # let x1, x2, x3, x4 be the number of each bird type \n    x1, x2, x3, x4 = symbols('x1 x2 x3 x4')\n    \n    # equations based on the problem statement\n    eq1 = Eq(x1, 2 * x4 + 5)                                # two-tailed birds\n    eq2 = Eq(x2, x3 / 2 + 2)                               # three-tailed birds\n    eq3 = Eq(x1 * 2 + x2 * 3 + x3 * 6 + x4 * 8, 4 * (x1 + x2 + x3 + 2*x4) - 2) # tails equation\n    eq4 = Eq(x1 + x2 + x3 + 2*x4, (x1 * 2 + x2 * 3 + x3 * 6 + x4 * 8) - 241)   # heads-tails difference\n    \n    # solve the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4), (x1, x2, x3, x4))\n    \n    # return the number of three-tailed birds\n    return solutions[x2]\n\nans = solution()"
    ],
    "c8bc4498b3bb47adb5838b21d3e0bd8b": [
        "def solution():\n    return sum(range(1, 11))\n\nans = solution()"
    ],
    "c756926469794615a094702ab4e29ea3": [
        "def solution():\n    return 421 * 11\n\nans = solution()"
    ],
    "34e244879a6646619b79a8414c6a5f70": [
        "def solution():\n    cost_price = 10  # Cost price in pounds\n    selling_price_per_bag = 0.65  # Selling price per bag in pounds\n    weight_per_bag = 250  # weight of sweets per bag in grams\n    total_weight = 5000  # total weight of sweets bought in grams\n\n    # Calculate the number of bags\n    number_of_bags = total_weight / weight_per_bag\n    \n    # Calculate total selling price\n    total_selling_price = number_of_bags * selling_price_per_bag\n    \n    # Calculate profit\n    profit = total_selling_price - cost_price\n    \n    # Calculate percentage profit\n    percentage_profit = (profit / cost_price) * 100\n\n    return percentage_profit\n\nans = solution()"
    ],
    "4683962764924f4684ed92eb7591a368": [
        "def solution():\n    # Number of ways between towns\n    ayton_beeton = 4\n    beeton_ceeton = 5\n    ceeton_deeton = 6\n    ayton_deeton = 3\n\n    # We calculate the ways from Ayton to Deeton via Beeton and Ceeton\n    ayton_ceeton_via_beeton = ayton_beeton * beeton_ceeton\n    total_ways = ayton_ceeton_via_beeton * ceeton_deeton\n\n    # Add the direct roads from Ayton to Deeton\n    ans = total_ways + ayton_deeton\n\n    return ans\n\nans = solution()"
    ],
    "1eb4f3669f2a43a5ba508ec8beae550e": [
        "def solution():\n    num = 15\n    den = 20\n    reduced_num = 3\n\n    ans = den * reduced_num / num\n\n    return ans\n\nans = solution()"
    ],
    "37136a98a87e4ccc8a809b51309fdb50": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n    term_difference = fifteenth_term - tenth_term\n    steps_between = 15 - 10\n\n    difference_each_step = term_difference / steps_between\n\n    twelfth_term = tenth_term + (2 * difference_each_step)\n\n    return twelfth_term\n\nans = solution()"
    ],
    "29a1fb0ba439450d99b96fff93b44d3a": [
        "def solution():\n    numbers = [1003.67, 108.98, 9.08, 102.33, 32.02, -3.08]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "72e107fe7fc142fd8ecabcbd205ebd7a": [
        "def solution():\n    return 876 * 3\n\nans = solution()"
    ],
    "5faf0bb3bd074227a53f6f2ca2666324": [
        "def solution():\n    # Find numbers that are multiples of two of the sets {2, 3, 4}\n    count = 0\n    for i in range(1, 2017):\n        # Underlined twice if it's a multiple of exactly two of the sets:\n        # multiple of 2 and 3 (but not 4), multiple of 2 and 4 (but not 3), \n        # or multiple of 3 and 4 (but not 2 which is impossible since 4 is a multiple of 2)\n        multiples_of_2 = i % 2 == 0\n        multiples_of_3 = i % 3 == 0\n        multiples_of_4 = i % 4 == 0\n\n        # Verify condition for being underlined exactly twice\n        if (multiples_of_2 + multiples_of_3 + multiples_of_4) == 2:\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "4241ca142c384e5db8c27de3f5d5df25": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the amount of money Joe had initially\n    joe_initial = symbols('joe_initial')\n    \n    # Equation representing the money left after buying ice-cream\n    # Sally's remaining money: $3.75 - $2.50\n    # Joe's remaining money: joe_initial - $2.50\n    # Combined they have $5 left.\n    equation = Eq((3.75 - 2.50) + (joe_initial - 2.50), 5)\n    \n    # Solve the equation to find the initial money Joe had\n    solution = solve(equation, joe_initial)\n    \n    # Return Joe's initial amount of money\n    return solution[0]\n\nans = solution()"
    ],
    "0a0f38ce5c7546d5abe2f8fcc81598f0": [
        "def solution():\n    first_days = 3\n    last_days = 5\n    first_days_avg = 135\n    last_days_avg = 151\n\n    total_trees_first = first_days * first_days_avg\n    total_trees_last = last_days * last_days_avg\n    total_days = first_days + last_days\n    total_trees = total_trees_first + total_trees_last\n    \n    avg_trees = total_trees / total_days\n\n    return avg_trees\n\nans = solution()"
    ],
    "bb982f52c6d041079ae774e83f7e8a99": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create a symbol for the magic number\n    magic_number = symbols('magic_number')\n\n    # Set up the equation according to the problem statement\n    equation = Eq(149 + magic_number, 5 * (21 + magic_number))\n\n    # Solve for the magic number\n    solution = solve(equation, magic_number)\n\n    # Return the solution\n    return solution[magic_number]\n\nans = solution()"
    ],
    "66db5c6e664741e08931a2b39f1d7db8": [
        "def solution():\n    count = 0\n    # Loop through possible hundreds digit (1-9)\n    for hundreds in range(1, 10):\n        # Loop through possible tens digit (0-9)\n        for tens in range(10):\n            # Loop through possible ones digit (0-9) but only even numbers\n            for ones in range(0, 10, 2):\n                if hundreds + tens + ones == 7:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "06968ea362d247569a9767c8f284e0e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n    \n    equation = Eq(202 + magic_number, 6 * (22 + magic_number))\n    \n    magic_number_solution = solve(equation, magic_number)\n    \n    return magic_number_solution[0]\n\nans = solution()"
    ],
    "caaf98f1ce924c36986670403ceffbf8": [
        "def solution():\n    num_students = 0\n    for n in range(1, 100, 2):  # Assume the square can't be too large, iterate only over odd layer counts\n        boys = n * n\n        girls = (n - 2) * (n - 2) if n > 1 else 0\n        if boys - girls == 32:\n            num_students = boys + girls\n            break\n    return num_students\n\nans = solution()"
    ],
    "064b4c0781ad453690eeb8941886a949": [
        "from math import comb\n\ndef solution():\n    salads = 15\n    soups = 20\n    vegetables = 12\n    sandwiches = 6\n    \n    salad_soup = comb(salads, 1) * comb(soups, 1)\n    salad_vegetables = comb(salads, 1) * comb(vegetables, 1)\n    salad_sandwiches = comb(salads, 1) * comb(sandwiches, 1)\n    soup_vegetables = comb(soups, 1) * comb(vegetables, 1)\n    soup_sandwiches = comb(soups, 1) * comb(sandwiches, 1)\n    vegetables_sandwiches = comb(vegetables, 1) * comb(sandwiches, 1)\n    \n    total_combinations = (salad_soup + salad_vegetables + salad_sandwiches +\n                          soup_vegetables + soup_sandwiches + vegetables_sandwiches)\n    \n    return total_combinations\n\nans = solution()"
    ],
    "bb7fbef0b6c04ccc86f554baf2f4420e": [
        "from sympy import primerange, isprime\n\ndef solution():\n    primes = list(primerange(1, 1000)) # List of primes less than 1000\n    for prime in primes:\n        if all(isprime(prime + diff) for diff in [2, 4, 106, 308]):\n            return prime\n\nans = solution()"
    ],
    "fcc29a22bd5b45e4abf794b10c54e303": [
        "def solution():\n    ans = 6.2 - 3.7\n    return ans\n\nans = solution()"
    ],
    "6fc14f87857d4b2ab8bc4618b7d72da4": [
        "def solution():\n    total_plasters = 12 * 30\n    days_last = total_plasters // 20\n    return days_last\n\nans = solution()"
    ],
    "4d30cc9b8bd246a78b9505752672ee09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let m be the mass of mangoes, s be the mass of strawberries\n    m, s = symbols('m s')\n\n    # Set up the equation based on the problem statement\n    # m = s + 448 (448g more mangoes than strawberries)\n    # s = 2*(m - 900) (after giving away 900g of mangoes, strawberries is twice as much as mangoes)\n    equation1 = Eq(m, s + 448)\n    equation2 = Eq(s, 2 * (m - 900))\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (m, s))\n\n    return solutions[s]\n\nans = solution()"
    ],
    "5bb673202e8c4412b7bf28637be9a334": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_fruits = symbols('total_fruits')\n    apples = 2/3 * total_fruits\n    bananas = 1/9 * total_fruits\n    lemons = total_fruits - apples - bananas\n    equation = Eq(apples - lemons, 12)\n\n    total_fruits_solution = solve(equation, total_fruits)\n    lemons_solution = total_fruits_solution[0] - (2/3 * total_fruits_solution[0]) - (1/9 * total_fruits_solution[0])\n\n    return lemons_solution\n\nans = solution()"
    ],
    "598caa8f690845ce82ae845429eed710": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    max_money, anthony_money = symbols('max_money anthony_money')\n    \n    # Max buys the chocolates, remaining money ratio\n    equation1 = Eq((max_money - 12) / anthony_money, 2/5)\n    \n    # Anthony buys the chocolates, remaining money ratio\n    equation2 = Eq(max_money / (anthony_money - 12), 8/13)\n\n    solutions = solve((equation1, equation2), (max_money, anthony_money))\n\n    return solutions[max_money]\n\nans = solution()"
    ],
    "5b2783f2b2b94d62984318ff167ab65d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r be the original number of red stickers\n    # Let b be the original number of blue stickers\n    # r = b (since she had an equal number of red and blue stickers)\n\n    # She gave away 2/3 of her red stickers, so she is left with 1/3 of her red stickers\n    # Let x be the fraction of blue stickers she gave away\n\n    # In the end, she has 1/3 * r red stickers and (1 - x) * b blue stickers left\n    # And this constitutes 1/4 of her total stickers\n\n    # We set up an equation based on the description:\n    # 1/3 * r + (1 - x) * b = 1/4 * (r + b)\n    # Replace b with r as they were originally equal:\n    # 1/3 * r + (1 - x) * r = 1/4 * (r + r)\n\n    r, x = symbols('r x')\n    equation = Eq(1/3 * r + (1 - x) * r, 1/4 * (2 * r))\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    return solution[x]\n\nans = solution()"
    ],
    "2df9daedfb014f1a9790c3fcebc2c6cc": [
        "from math import factorial\n\ndef solution():\n    def nCr(n, r):\n        return factorial(n) // (factorial(r) * factorial(n - r))\n\n    # Since each child gets at least one pen, we distribute 6 pens first (one to each child),\n    # and then find out the number of ways to distribute the remaining 14 pens to 6 children.\n    n = 6 + 14 - 1  # number of items plus number of children minus one (for stars and bars theorem)\n    r = 14  # remaining number of pens to distribute\n    ans = nCr(n, r)\n    return ans\n\nans = solution()"
    ],
    "774b551f44f642d4ad38d30236c3d19d": [
        "def solution():\n    base_unit_digit = 4\n    powers_of_4_unit_digit = [4, 6, 4, 6] # The unit digits repeat every 4 powers\n    \n    # Finding the position in the cycle of unit digits\n    position = 2022 % len(powers_of_4_unit_digit)\n    \n    # Getting the unit digit\n    unit_digit = powers_of_4_unit_digit[position - 1] # -1 for zero-based index\n    \n    return unit_digit\n\nans = solution()"
    ],
    "934a4d14b18e49949c6ef24167ffb74e": [
        "def solution():\n    # Since each pile has a different number of marbles and we have 16 marbles\n    # We will try to find the smallest possible number for the biggest pile.\n    # To do that, we split marbles in a way where the other three piles have as many marbles as possible.\n    # Starting with the smallest number for the biggest pile (which should be greater than 1) and moving up.\n    for biggest_pile in range(2, 16):\n        remaining_marbles = 16 - biggest_pile\n        # Initialize heap sizes with 0\n        heap_sizes = [0] * 3\n        # Distribute the remaining marbles to form heaps in decreasing order\n        for i in range(3):\n            # Assigning the largest possible number of marbles to the current pile\n            # that is less than the current biggest pile size and more than the last heap\n            heap_sizes[i] = min(remaining_marbles, biggest_pile - 1)\n            remaining_marbles -= heap_sizes[i]\n        # Ensure the three piles we have formed have different number of marbles \n        # and there are no marbles remaining to be allocated\n        if len(set(heap_sizes)) == 3 and sum(heap_sizes) + biggest_pile == 16:\n            return biggest_pile\n\nans = solution()"
    ],
    "efedc63bacb049028c7f9d9de27653a3": [
        "def solution():\n    # Define a dictionary to store all lengths in metres\n    lengths = {\n        '10 millimetres': 10 / 1000,\n        '100 centimetres': 100 / 100,\n        '10 metres': 10,\n        '2 kilometres': 2 * 1000,\n        '2800 centimetres': 2800 / 100,\n        '2500 metres': 2500,\n        '100 millimetres': 100 / 1000,\n        '100 metres': 100,\n    }\n\n    # Find the smallest length by its value in metres\n    smallest_length_name = min(lengths, key=lengths.get)\n\n    # Return the name (unit) of the smallest length\n    return smallest_length_name\n\nans = solution()"
    ],
    "3c6d061b54774cefa8ae106251ed9e95": [
        "def solution():\n    first_day_pages = 30\n    last_day_pages = 70\n    page_increase_per_day = 4\n    \n    # Calculate the number of terms in the arithmetic sequence\n    # The nth term of an arithmetic sequence is given by a + (n-1)*d where\n    # a = first term, d = common difference and n = number of terms\n    # Here, last_day_pages = first_day_pages + (n-1) * page_increase_per_day\n    # Therefore, n = ((last_day_pages - first_day_pages) / page_increase_per_day) + 1\n    total_days = ((last_day_pages - first_day_pages) / page_increase_per_day) + 1\n    \n    # The sum of an arithmetic sequence is given by (n/2) * (a + l) where\n    # n = number of terms, a = first term, and l = last term\n    # Therefore, total_pages = total_days / 2 * (first_day_pages + last_day_pages)\n    total_pages = (total_days / 2) * (first_day_pages + last_day_pages)\n    \n    return int(total_pages)\n\nans = solution()"
    ],
    "189eefe9efb74acf9b1ba115d8e2b1cc": [
        "def solution():\n    largest_5_digit_number = 99999\n    smallest_6_digit_number = 100000\n    difference = smallest_6_digit_number - largest_5_digit_number\n    return difference\n\nans = solution()"
    ],
    "22169485afe346008751bdb1b79de0ac": [
        "def solution():\n    # Since we are trying to form three-digit odd numbers, the last digit has to be odd.\n    # Hence, we have 3 choices for the last digit (1, 3, or 5).\n    last_digit_choices = 3\n    \n    # For the first digit, we cannot have 0 and it cannot be the same as the last digit.\n    # Therefore, we have 5 choices remaining for the first digit (since one is taken by the last).\n    first_digit_choices = 5\n    \n    # For the middle digit, it cannot be the same as the first or last digit.\n    # Hence, we have 4 remaining choices.\n    middle_digit_choices = 4\n    \n    # We multiply the choices for each position to get the total number of combinations.\n    total_combinations = first_digit_choices * middle_digit_choices * last_digit_choices\n    \n    return total_combinations\n\nans = solution()"
    ],
    "875c9cac1ffb4452aabd90fa4729b651": [
        "def solution():\n    swim_only = 20 - 10\n    basketball_only = 25 - 10\n    both_swim_and_basketball = 10\n    neither = 9\n\n    total_students = swim_only + basketball_only + both_swim_and_basketball + neither\n    return total_students\n\nans = solution()"
    ],
    "e8d4c70e0af44824834deba59032af0c": [
        "def solution():\n    terms = [3, 7, 11, 15, 19]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "61cfc0ac0f1449fa967d6076176b1137": [
        "def solution():\n    return 324 * 24\n\nans = solution()"
    ],
    "2a20ffa4a69c4484999bb958ab96dc80": [
        "def solution():\n    steps = 1991\n    while True:\n        steps += 1\n        if str(steps) == str(steps)[::-1]:\n            return steps - 1991\n\nans = solution()"
    ],
    "18b56edf99804cd18f944ac9024bf259": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    equation1 = Eq(A, 2/3 * B)\n    equation2 = Eq(B, 4/5 * C)\n    equation3 = Eq(A, C - 21)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "e2f136c1d0e3438fb5a5222737d65150": [
        "def solution():\n    ans = 34.2 + 2.96 + 0.0364\n    return ans\n\nans = solution()"
    ],
    "a51a939a7af045ed9ba206d87ac10cdc": [
        "def solution():\n    count = 0\n    for year in range(2018, 2109):\n        if sum(map(int, str(year))) == 18:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "afe76018408f45b5a643b041061c21be": [
        "def solution():\n    count = 0\n    for page in range(1, 201):\n        count += str(page).count('4')\n    return count\n\nans = solution()"
    ],
    "c9fc66837ed74b1eb8a4707c4398b6d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    bookmarks, pupils = symbols('bookmarks pupils')\n    \n    equation1 = Eq(bookmarks - (pupils * 4), 8)\n    equation2 = Eq((pupils * 6) - bookmarks, 10)\n    \n    solutions = solve((equation1, equation2), (bookmarks, pupils))\n    \n    return solutions[bookmarks]\n\nans = solution()"
    ],
    "b36c82106098479eb7454b8150d50947": [
        "def solution():\n    return 608 * 56\n\nans = solution()"
    ],
    "bf559d9d7adc46e5928853ca81300c0d": [
        "def solution():\n    total_animals = 25\n    total_legs = 68\n\n    for cows in range(total_animals + 1):\n        ducks = total_animals - cows\n        if 4 * cows + 2 * ducks == total_legs:\n            return ducks\n\nans = solution()"
    ],
    "fc746990a19a47ab9601f133eccf8da2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    avg_height_group = 122.5\n    total_children = 11 + 5  # Total number of children (girls + boys)\n    girls_avg_more = 3.2\n    boys_avg_height, girls_avg_height = symbols('boys_avg_height girls_avg_height')\n\n    # Equation based on the total average height of the group\n    equation1 = Eq((11 * girls_avg_height + 5 * boys_avg_height) / total_children, avg_height_group)\n    # Equation based on the difference in average height between girls and boys\n    equation2 = Eq(girls_avg_height, boys_avg_height + girls_avg_more)\n\n    solutions = solve((equation1, equation2), (boys_avg_height, girls_avg_height))\n\n    return solutions[girls_avg_height]\n\nans = solution()"
    ],
    "fe1dad1b4cf74ae287ebf8d0b28bb3b4": [
        "def solution():\n    # Assuming that each triangle cuts all the others, we use the inductive formula\n    # parts = (new lines + previous parts + 1)\n    # where new lines represent the lines added by the new triangle\n    parts = 1  # with 0 triangles, there's just one part (the whole plane)\n\n    for i in range(1, 6):  # for each of the five triangles\n        new_lines = i         # a new triangle can intersect all previous ones\n        parts = new_lines + parts + 1  # applying the inductive step\n\n    return parts\n\nans = solution()"
    ],
    "28e62637c4fc4eadb594a6d0da417836": [
        "def solution():\n    ans = 602 // 7\n    return ans\n\nans = solution()"
    ],
    "ea4169e9382046cda7491251be10687b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # g for the number of girls, b for the number of boys\n    g = symbols('g')\n\n    # Since we have 70 students in total\n    b = 70 - g\n\n    # average score for the school * total number of students = sum of all scores\n    # average score for girls * number of girls + average score for boys * number of boys = sum of all scores\n    equation = Eq(70 * g + 63 * b, 70 * 66)\n\n    # Solving the equation for g\n    num_girls = solve(equation, g)[0]\n\n    return num_girls\n\nans = solution()"
    ],
    "ed7781ecfa264cb686cd6671df26577b": [
        "def solution():\n    # sequence position for the given terms\n    term_32nd = 32\n    term_108th = 108\n\n    # value of the terms at the given positions\n    value_32nd = 157\n    value_108th = 537\n\n    # The difference between the terms is constant, so we can find that common difference\n    common_difference = (value_108th - value_32nd) / (term_108th - term_32nd)\n\n    # The first term can be found by 'reversing' from the 32nd term\n    # first_term = value_32nd - (term_32nd - 1) * common_difference\n    first_term = value_32nd - (term_32nd - 1) * common_difference\n\n    return int(first_term)\n\nans = solution()"
    ],
    "398f40d1810d4daf96c3048cfc41ed7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the total candies Donna had at first\n    x = symbols('x')\n\n    # According to the problem, we set up the equations step by step\n    # After Donna kept half and 3 more, she gave the remaining to Jane\n    donnas_remaining = x - (x / 2 + 3)\n\n    # Jane ate 1/3 of what she got plus 4, and gave the remaining to Kate\n    janes_remaining = donnas_remaining - (donnas_remaining / 3 + 4)\n\n    # Kate ate 1/4 of what she got from Jane and had 42 left\n    equation = Eq(janes_remaining - janes_remaining / 4, 42)\n    \n    # Solve the equation\n    solution = solve(equation, x)\n    \n    # Return the original amount of candies\n    return solution[0]\n\nans = solution()"
    ],
    "cafcc058aa184b18aab818d577427a22": [
        "def solution():\n    # The sum of a consecutive odd numbers sequence which forms an arithmetic progression can be found using the formula:\n    # Sum = n * (first_term + last_term) / 2, where n is the number of terms\n    # Also, the difference (common difference) between two consecutive odd numbers is 2\n    # In this scenario, we know that the number of terms n is 9 and the sum is 1503\n    # We need to find the first term (which is the smallest odd number in the sequence)\n\n    n = 9\n    sum_seq = 1503\n    average = sum_seq // n  # The middle term (average) when the sequence sum is given.\n\n    # The middle term is also the fifth term because we have 9 terms in total\n    # Since the numbers are odd and consecutive, the first term can be calculated by subtracting 4 * difference from the middle term\n    difference = 2\n    first_term = average - 4 * difference\n    \n    return first_term\n\nans = solution()"
    ],
    "c6c7e58ef9c24768a4622a112505b93d": [
        "def solution():\n    cost_per_day = 5\n    days = 5\n    total_cost = cost_per_day * days\n    return total_cost\n\nans = solution()"
    ],
    "046de3a2a2bc40f1bb251c3bf9fae045": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "1e6694bd51114d55895dbe80e548b123": [
        "def solution():\n    # We have A, B, C, D, four individuals where A starts with the ball.\n    # There are 3 pass exchanges in which the ball can be passed to B, C, or D.\n    # 1st pass: A can pass to B, C, or D (3 options)\n    # 2nd pass: The receiver of the 1st pass can pass to any of the two remaining people (2 options)\n    # 3rd pass: The receiver of the 2nd pass can only pass back to A (1 option)\n    # So for each option of the 1st pass, there are 2 options for the 2nd pass,\n    # resulting in 3 * 2 = 6 possibilities.\n\n    return 3 * 2\n\nans = solution()"
    ],
    "cc823defea034e0fbb575cefdc9584df": [
        "def solution():\n    return 342 + 469\n\nans = solution()"
    ],
    "61be272e45f5417780499f0cb4d747d2": [
        "def solution():\n    ans = (36 * 21) / (6 * 7)\n    return ans\n\nans = solution()"
    ],
    "8c7bad2823b64ce9bd000eca653f9f98": [
        "def solution():\n    for i in range(1, 4*10 + 1):\n        if i % 4 == 0 and i % 10 == 0:\n            return i\n\nans = solution()"
    ],
    "7e40ac2cb8734521aa2bcc3baf6d6cd1": [
        "def solution():\n    ans = sum(range(27, 34))\n    return ans\n\nans = solution()"
    ],
    "d0be78861f1d41c8bd8c7de01241ca3a": [
        "def solution():\n    # Since P + P = P, P must be 0.\n    P = 0\n\n    # Since Q cannot be zero in a 2-digit number, R must be 1 to make carry over for the leftmost sum.\n    R = 1\n    Q = R\n\n    # Now, with Q and P found out, we can return the 2-digit number QP.\n    ans = Q * 10 + P\n    return ans\n\nans = solution()"
    ],
    "88aebab1fdb9459da60e672b70e23921": [
        "def solution():\n    # Let jason_books initially be the number of books Jason has,\n    # and anthea_books be the number of books Anthea has.\n    # According to the problem:\n    # jason_books - 4 = anthea_books + 4\n    # And we also know that Jason has 30 books to begin with:\n    # jason_books = 30\n    \n    jason_books = 30\n    # Now we can solve for anthea_books using the equation mentioned earlier:\n    anthea_books = jason_books - 4 - 4\n    \n    # Finally, calculate the initial difference in the number of books:\n    difference = jason_books - anthea_books\n    \n    return difference\n\nans = solution()"
    ],
    "42175aff49384f8fb2e1b8e87cd5d6dc": [
        "def solution():\n    ans = 0.98 + 1.98 + 2.98 + 3.98\n    return ans\n\nans = solution()"
    ],
    "dfc638bbb6ae4aabb28cb4b9417fc631": [
        "def solution():\n    speed_m_per_s = 2 # William's speed in meters per second\n    time_s = 12 * 60 # Convert 12 minutes to seconds\n    distance_m = speed_m_per_s * time_s # Distance = speed * time\n    return distance_m\n\nans = solution()"
    ],
    "090de4dbbc22403c821128cff3d594be": [
        "def solution():\n    common_factor_1 = 4\n    common_factor_2 = 101\n    multiple_1 = 505\n    multiple_2 = 17\n    additional_factor = 128\n\n    ans = (common_factor_1 * common_factor_2 * multiple_1 * multiple_2) + (multiple_1 * additional_factor)\n    return ans\n\nans = solution()"
    ],
    "abbaed0cf4b24b7a96c8d6bc432d9ddb": [
        "def solution():\n    xavier_sugar = 100 * 0.25\n    yelena_sugar = 500 * 0.55\n    carol_sugar = 400 * 0.35\n    total_sugar = xavier_sugar + yelena_sugar + carol_sugar\n    total_solution = 100 + 500 + 400\n    concentration = total_sugar / total_solution\n\n    return concentration\n\nans = solution()"
    ],
    "aef98a3088f64f3c987d8e8cad49eb89": [
        "def solution():\n    total_paid = 10.00\n    newspaper_cost = 2.20\n    change_received = 4.83\n    \n    tissues_cost = total_paid - (newspaper_cost + change_received)\n    \n    return tissues_cost\n\nans = solution()"
    ],
    "c34811dd64254c04b657b905af68cf0f": [
        "def solution():\n    return 111111111 * 99999999\n\nans = solution()"
    ],
    "c44b7e0f636c4a559b50166c1518c540": [
        "def solution():\n    # Convert minutes to hours\n    late_time = 12 / 60\n    early_time = 4 / 60\n\n    # Let the distance be 'd' km\n    # d = speed * time\n    # Time when late = d / 3\n    # Time when early = d / 5\n\n    # d / 3 = actual_time + late_time\n    # d / 5 = actual_time - early_time\n\n    # Setup the equations for time\n    # d / 3 - d / 5 = late_time + early_time\n    # Solving for d gets us:\n    d = (3 * 5 * (late_time + early_time)) / (5 - 3)\n\n    # Return the distance 'd'\n    return d\n\nans = solution()"
    ],
    "c7ddd97daf6145ed96ee9ebd4abbe31a": [
        "def solution():\n    from itertools import permutations\n    digits = [1, 2, 3]\n    \n    all_permutations = []\n\n    for i in range(1, len(digits)+1):\n        all_permutations += list(permutations(digits, i))\n\n    ans = len(all_permutations)\n    \n    return ans\n\nans = solution()"
    ],
    "ab364c81a2864910ac73de45139fb81c": [
        "def solution():\n    # Let's denote the initial number of boys and girls as b and g respectively.\n    # Since the number is equal at first, b = g.\n    # After 3/5 of the boys and 42 girls left, the number of boys is b - (3/5)b and the number of girls is g - 42.\n    # At this point, the number of boys exceeds the number of girls by 12, which gives us the equation:\n    # (b - (3/5)b) = (g - 42) + 12\n    # We also know from the problem that b = g, so let's substitute and solve for b.\n\n    from sympy.solvers import solve\n    from sympy import Symbol\n\n    # Define the symbol for the initial number of boys (or girls, since b = g)\n    b = Symbol('b')\n\n    # Equation derived from problem description\n    equation = b - (3/5) * b - (b - 42) - 12\n\n    # Solve for b using sympy's solve function\n    solution_set = solve(equation, b)\n\n    # We are just interested in the first (and only) solution\n    initial_number_of_boys = solution_set[0]\n    \n    # The total number of students initially is the sum of boys and girls \n    # Since b = g, total number of students is b + b = 2 * b\n    total_students = 2 * initial_number_of_boys\n\n    return total_students\n\nans = solution()"
    ],
    "e6223ed171b341058c807c2c490548d2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of days B takes to finish the job be 'b_days'\n    b_days = symbols('b_days')\n\n    # A's efficiency is twice B's, so A would take b_days/2 to complete the job alone\n    # A can finish the job in 12 days less than B, so we set up an equation\n    equation = Eq(b_days / 2, b_days - 12)\n\n    # Solve for the number of days B takes to finish the job\n    b_days_solution = solve(equation, b_days)[0]\n\n    # A's time to complete the job alone\n    a_days = b_days_solution / 2\n    \n    # A's work rate is 1/a_days and B's work rate is 1/b_days_solution per day\n    # Together their combined work rate is 1/a_days + 1/b_days_solution\n    combined_work_rate = 1/a_days + 1/b_days_solution\n\n    # They can complete the job in 1/combined_work_rate days\n    days_together = 1 / combined_work_rate\n\n    return days_together\n\nans = solution()"
    ],
    "9a23b61c00aa4f4f9ce7d319f75b093d": [
        "def solution():\n    number_of_tomatoes = 27\n    number_of_cucumbers = 3 + 3 * number_of_tomatoes\n    \n    return number_of_cucumbers\n\nans = solution()"
    ],
    "a914eab1c1f143d09f08b68c60165f8a": [
        "def solution():\n    single_case_cost = 6.25\n    total_cost = 12 * single_case_cost\n    return total_cost\n\nans = solution()"
    ],
    "5f9a3caf3a844c859338c8ee6c84403c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rachel, alice = symbols('rachel alice')\n    \n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n    \n    solutions = solve((equation1, equation2), (rachel, alice))\n    total_candy = solutions[rachel] + solutions[alice]\n    \n    return total_candy\n\nans = solution()"
    ],
    "de26875a56ac47ad9dcf5dcc75dde7cf": [
        "def solution():\n    last_night_temperature = -8\n    today_temperature = 13\n    ans = today_temperature - last_night_temperature\n    return ans\n\nans = solution()"
    ],
    "5baea30fbec6495a8b6283b09656e48a": [
        "def solution():\n    total_pupils = 112 + 1098\n    pupils_after_transfer = total_pupils // 2\n    return pupils_after_transfer\n\nans = solution()"
    ],
    "5bd1eec767354db6b84f9b6d57d59263": [
        "from math import factorial\n\ndef solution():\n    ans = []\n    # First part: four different colored socks in a row\n    ans.append(factorial(4))  # 4! because we're arranging 4 unique items\n    \n    # Second part: two different colored pairs of socks in a row\n    # Each pair is identical, so we divide by the permutations of each pair (2! for each pair)\n    ans.append(factorial(4) // (factorial(2) * factorial(2)))\n    \n    # Return the two answers\n    return ans\n\nans = solution()"
    ],
    "b3d11c4825554079b29f7c4d34b2ed81": [
        "def solution():\n    card_a = 40\n    card_b = card_a / 2\n    card_c = card_b / 2\n    \n    total_value = card_a + card_b + card_c\n    \n    return total_value\n\nans = solution()"
    ],
    "c60c26e3a9984f1fb74edb0acff647db": [
        "def solution():\n    # Let's denote the original number of boys and girls as 3x and 2x respectively.\n    # According to the question, after 12 boys and 12 girls joined,\n    # the ratio became 19 : 14. Hence, we get the equations:\n    # (3x + 12) / (2x + 12) = 19/14\n    # Solving for x will give us the original number of boys and girls.\n    # The total number of children is then (3x + 2x) + 12 + 12\n    \n    # Solve for x using cross multiplication\n    x = symbols('x')\n    equation = Eq((3 * x + 12) * 14, (2 * x + 12) * 19)\n    solution = solve(equation, x)\n    \n    # Now we know the value of x, we can find the total number of children\n    original_boys = 3 * solution[x]\n    original_girls = 2 * solution[x]\n    total_children = original_boys + original_girls + 12 + 12\n    \n    return total_children\n\nans = solution()"
    ],
    "b13f6c28aaeb458aaa713c2e08380709": [
        "def solution():\n    length_23_cm_bar = 23\n    length_37_cm_bar = 37\n    welded_part = 3\n    \n    # Subtract the welded part once because it is included in both bars' lengths\n    full_length = length_23_cm_bar + length_37_cm_bar - welded_part\n    return full_length\n\nans = solution()"
    ],
    "504138d5ab434544b07d09526512e8d0": [
        "def solution():\n    from math import sqrt\n\n    # The formula for the period of a simple pendulum is T = 2 * pi * sqrt(L/g)\n    # Where T is the period, L is the length of the pendulum and g is the acceleration due to gravity\n\n    # The ratio of the periods on the Earth (T_earth) and the Moon (T_moon) is:\n    # T_moon / T_earth = sqrt(g_earth / g_moon)\n\n    g_earth = 9.81  # Acceleration due to gravity on Earth in m/s^2\n    g_moon = g_earth / 6  # Acceleration due to gravity on the Moon in m/s^2\n\n    ratio_of_periods = sqrt(g_earth / g_moon)\n    T_earth = 1  # Given period on Earth in seconds\n\n    # Calculate the period on the Moon\n    T_moon = T_earth * ratio_of_periods\n\n    return T_moon\n\nans = solution()"
    ],
    "c3766f132f16414bb326ea29c9942ad7": [
        "def solution():\n    x_square = 7\n    x_fourth = x_square ** 2\n    return x_fourth\n\nans = solution()"
    ],
    "10f23d6da9944476ae1f44b6fd44944d": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime(2023, 3, 1)  # 1st March\n    end_date = datetime(2023, 4, 15)   # 15th April\n    trip_duration = end_date - start_date\n    return trip_duration.days + 1\n\nans = solution()"
    ],
    "8fbd1f3154514d90b348d98dc9937be2": [
        "def solution():\n    for william_correct in range(11):\n        justin_correct = william_correct + 4  # Justin gets 24 points more, which means 4 more correct answers\n        \n        william_points = william_correct * 6 - (10 - william_correct) * 2\n        justin_points = justin_correct * 6 - (10 - justin_correct) * 2\n        \n        if william_points + justin_points == 96:\n            return william_correct\n\nans = solution()"
    ],
    "0f1117672a63416cbd3434112e8ffbdd": [
        "def solution():\n    # Iterate over possible values of A, where A is from 0 to 9\n    # Since we are dealing with single digit multiplication A cannot be greater than 9\n    for A in range(10):\n        if A * 987654321 == 123456789 * A:\n            return A\n\nans = solution()"
    ],
    "b24c8d3c218c4aacac0618f7c854fd25": [
        "def solution():\n    total_tiles = 400\n    red_tiles_more = True\n\n    # The square root of 400 to find the size of one side\n    side_length = int(total_tiles ** 0.5)\n    \n    # Half the side length to determine the number of layers\n    layers = side_length // 2\n    \n    # Tiles in the outermost layer (all red)\n    red_tiles = side_length * 4 - 4\n\n    # Remaining layers\n    for i in range(1, layers):\n        # Check the color of the current layer\n        if i % 2 == 0:\n            # Red layer\n            red_tiles += (side_length - i * 2) * 4\n        else:\n            # Green layer, no need to add since we only need the red tile count\n\n        # Update the side length\n        side_length -= 2\n\n    green_tiles = total_tiles - red_tiles\n    more_tiles = red_tiles - green_tiles if red_tiles_more else green_tiles - red_tiles\n\n    return (\"Red\", more_tiles) if red_tiles_more else (\"Green\", more_tiles)\n\nans = solution()"
    ],
    "fe9c604c26c54da584f4631fb51fabca": [
        "def solution():\n    return 265 * 30\n\nans = solution()"
    ],
    "6aff689afc7c437db64fc2e27c02833a": [
        "def solution():\n    first_term = 50\n    difference = 46 - 50\n    term = first_term\n    num_terms = 0\n\n    while term > 0:\n        num_terms += 1\n        term += difference\n\n    return num_terms\n\nans = solution()"
    ],
    "1d5693592dcd4d74af7216902ea3469a": [
        "def solution():\n    # A's work rate per day\n    work_rate_A = 1 / 15\n    # B's work rate per day\n    work_rate_B = 1 / 10\n    \n    # Work done by A and B together in 3 days\n    work_done_3_days = 3 * (work_rate_A + work_rate_B)\n    \n    # Remaining work after 3 days\n    remaining_work = 1 - work_done_3_days\n    \n    # Days B needs to finish the remaining job\n    days_B = remaining_work / work_rate_B\n    \n    return days_B\n\nans = solution()"
    ],
    "8d3535d489694c9ab72858ec3e09c1ee": [
        "def solution():\n    # Since there are 100 people standing in a square array,\n    # the square root of 100 will give us the number of people\n    # along one side of the square.\n    side_length = int(100**0.5)\n\n    # The total number of people in the outermost layer can be calculated\n    # by counting all the people on the edges of the square minus the overlapping\n    # corners (since each corner is counted twice).\n    outermost_people = 4 * side_length - 4\n\n    return outermost_people\n\nans = solution()"
    ],
    "6564fd0ca13b4e9b8f99f3ea28add3e9": [
        "def solution():\n    # Let x be the original amount in Hugo's wallet\n    x = 280 / (1 - (3/7) - ((1/8) * (1 - (3/7))))\n    return x\n\nans = solution()"
    ],
    "e77e2351b78345d6962d155aaf8c5efa": [
        "def solution():\n    loafs_per_cups = 6 / 5\n    desired_loafs = 24\n    cups_needed = desired_loafs / loafs_per_cups\n    return cups_needed\n\nans = solution()"
    ],
    "10195dd0d1d04543a0ade2917338e294": [
        "def solution():\n    # Since Tom goes first, to ensure that he wins, he should make the number of cards\n    # in pile A and B equal. Because from any equal position, whatever move Jane makes,\n    # Tom can make a similar move leading to a victory in his next turn.\n    \n    # Initial number of cards in pile A and pile B\n    pile_A = 88\n    pile_B = 52\n\n    # To ensure he wins, Tom should make both piles equal in his first turn\n    # He should take the difference from pile A\n    cards_to_take = pile_A - pile_B\n\n    return cards_to_take\n\nans = solution()"
    ],
    "5dbed78cb0054ac8b310230d17f9c26e": [
        "def solution():\n    temperatures = [-10, 16, 9, 2]\n    difference = max(temperatures) - min(temperatures)\n    return difference\n\nans = solution()"
    ],
    "9563da65f57444518660d7e7ae11fc79": [
        "def solution():\n    total_amount = 51.20\n    people = 8\n    amount_per_person = total_amount / people\n    return amount_per_person\n\nans = solution()"
    ],
    "c913d4e63fce41d2aaca6a3e2a3cf6f4": [
        "def solution():\n    # Since factorial of any number greater than 9 has 0 as the last digit\n    # (due to multiplication by 10), the last digit of 2014! is 0.\n    return 0\n\nans = solution()"
    ],
    "a54b55467ea147c6b9f5372a54243a74": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cheesecake, logcake = symbols('cheesecake logcake')\n    \n    equation1 = Eq(6*cheesecake + 7*logcake, 1426)\n    equation2 = Eq(4*cheesecake, 3*logcake)\n\n    solutions = solve((equation1, equation2), (cheesecake, logcake))\n\n    cost_10_cheesecakes_logcakes = 10 * solutions[cheesecake] + 10 * solutions[logcake]\n\n    return cost_10_cheesecakes_logcakes\n\nans = solution()"
    ],
    "ad2a343c34cb44ac88504dd245fdcc8b": [
        "from sympy import symbols, solve\n\ndef solution():\n    # x - number of students, y - number of apples given to one student\n    x, y = symbols('x y', integer=True)\n\n    # According to the Pigeonhole Principle, \n    # if at least one student gets at least 3 apples, \n    # then we can distribute 80 - 3 apples to the rest \n    # ensuring each student gets at least 1 apple.\n    # After giving 3 apples to one student, there are 77 apples left to distribute.\n    # Thus, each of the remaining students must get at least 1 apple.\n    # So, we can have at most 77 students (each getting 1 apple) + 1 student (getting 3 apples) = 78 students.\n    equation = Eq(x * y + 3, 80)\n\n    # Solve for y assuming that the minimum apples a student can get is 1, hence (1 <= y)\n    sol = solve((equation, y - 1), (x, y), dict=True)\n\n    # Filter solutions to find the maximum size of the class, which means the minimum y\n    max_class_size = max(s[0][x] for s in sol if s[1][y] >= 1)\n\n    return max_class_size\n\nans = solution()"
    ],
    "7b4cba3fe33741189ed2ca4a5ed157f2": [
        "def solution():\n    fraction = 4 / 50\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "1848fbe1d98944c9b1f806488a4b51a7": [
        "def solution():\n    # Let the number of red, white and black balls be r, w, and b respectively.\n    # Given the ratios, we have:\n    # r:w = 1:2 and w:b = 3:4\n    # We can write this as r = w/2 and b = (4/3) * w\n    # The total number of balls is r + w + b = 34.\n    # Substituting r and b in terms of w, we get:\n    # w/2 + w + (4/3) * w = 34\n    # Multiplying the entire equation by 6 to clear the denominators, we get:\n    # 3w + 6w + 8w = 34 * 6\n    # 17w = 34 * 6\n    # w = (34 * 6) / 17\n    # Calculate w:\n    w = (34 * 6) / 17\n    # Calculate r using the ratio r = w/2\n    r = w / 2\n    \n    return int(r)\n\nans = solution()"
    ],
    "80d14d6dace648ab9a745e93b255b8c9": [
        "def solution():\n    sum_series = sum(i * (2*i - 1) for i in range(1, 11))\n    return sum_series\n\nans = solution()"
    ],
    "d3e59c50fe3a4e3c8c9fc840de30fe66": [
        "def solution():\n    ans = sum([i if i % 2 != 0 else -i for i in range(1, 1002)])\n    return ans\n\nans = solution()"
    ],
    "82fc1a902d704c95a9aa6a164228805e": [
        "def solution():\n    base_area = 5 * 5  # Calculate the area of the base square\n    hole_area = 1 * 1  # Calculate the area of the hole square\n    effective_base_area = base_area - hole_area  # Subtract the hole area to get the effective base area\n    height = 480 / effective_base_area  # Calculate the height by dividing the volume by the effective base area\n    return height\n\nans = solution()"
    ],
    "4d8068dd3c0d45ac9d058b56e9ab8e71": [
        "def solution():\n    pencil_cost = 5\n    pen_cost = 15\n\n    # Owen wants to trade for 1 pen, so we need to find how many pencils make up the cost of 1 pen.\n    pencils_per_pen = pen_cost / pencil_cost\n\n    return pencils_per_pen\n\nans = solution()"
    ],
    "f9c8b3de0b744d5bb1ceeff64db1f6f8": [
        "def solution():\n    ans = 12 + 102 + 1002 + 10002\n    return ans\n\nans = solution()"
    ],
    "d4f12453aa6f49b4880fbca48045adeb": [
        "def solution():\n    count = 0\n    for x1 in range(1, 13):\n        for x2 in range(1, 13):\n            for x3 in range(1, 13):\n                if x1 + x2 + x3 == 13:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "b4cb09af0f6e4f17bdbc0e57212c2ab5": [
        "def solution():\n    marbles_given_to_brother = 26\n    marbles_given_to_each_sister = 13\n    marbles_left = 16\n\n    total_marbles_given_to_sisters = marbles_given_to_each_sister * 2\n    initial_marbles = marbles_left + marbles_given_to_brother + total_marbles_given_to_sisters\n\n    return initial_marbles\n\nans = solution()"
    ],
    "d66ce8f472054e71aa236e8e613a5157": [
        "def solution():\n    count = 0\n    # From 10 to 100, there are 9 palindromic numbers (11, 22, ..., 99)\n    count += 9\n    # From 100 to 1000, palindromic numbers have the form xyx, total 9 * 10 options\n    count += 9 * 10\n\n    return count\n\nans = solution()"
    ],
    "84fb655f45e54baa81690c12194c4cfb": [
        "def solution():\n    ans = sum([(2*i + 1) for i in range(1, 20)])\n    return ans\n\nans = solution()"
    ],
    "9572661330c44c6fa75e2c4321ce76ad": [
        "def solution():\n    # Let the original number of yellow beads be 3x and green beads be 2x\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    original_yellow = 3 * x\n    original_green = 2 * x\n\n    # After buying more beads, yellow becomes 3x + 5 and green becomes 2x + 20\n    new_yellow = original_yellow + 5\n    new_green = original_green + 20\n\n    # The new ratio of green to yellow beads is 3:2\n    equation = Eq(new_green * 2, new_yellow * 3)\n\n    # Solve for the value of x\n    solution_x = solve(equation, x)\n\n    # Find the total number of beads he had at first by substituting x back into 3x + 2x\n    total_original_beads = (original_yellow + original_green).subs(x, solution_x[0])\n\n    return total_original_beads\n\nans = solution()"
    ],
    "71c8465f7f6740fb84c60f24c0fa5b05": [
        "def solution():\n    return 617 + 385\n\nans = solution()"
    ],
    "8ac3b604d92f4e359866a78b06048dfd": [
        "def solution():\n    return 2570 / 10000\n\nans = solution()"
    ],
    "cecaf4be2c7445afbef79df483f09fe6": [
        "def solution():\n    total_questions = 50\n    correct_mark = 4\n    incorrect_mark = -1\n    total_marks = 110\n\n    for correct in range(total_questions + 1):\n        incorrect = total_questions - correct\n        if correct_mark * correct + incorrect_mark * incorrect == total_marks:\n            return correct\n\nans = solution()"
    ],
    "a5cd848f2ed5457aa4de5ac1376a568b": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    digits = ['0', '1', '3', '6', '8', '9']\n    for perm in permutations(digits, 4):\n        if perm[-1] in ['0', '6', '8']:  # Check if the last digit is even\n            if perm[0] != '0': # Check that the number does not start with zero\n                count += 1\n    return count\n\nans = solution()"
    ],
    "a2686828e0aa405aab8754b3f12eaf64": [
        "def solution():\n    amy_speed = 60  # Amy's speed in miles per hour\n    christen_speed = 40  # Christen's speed in miles per hour\n    meeting_time = 4  # Time until Amy and Christen meet in hours\n\n    # Distance covered by Amy until they meet\n    amy_distance = amy_speed * meeting_time\n\n    # Time taken for Christen to cover the distance Amy covered (to reach Amy's starting point)\n    time_for_christen = amy_distance / christen_speed\n\n    return time_for_christen\n\nans = solution()"
    ],
    "b8eda4ea253243a6bc4591a500731f57": [
        "def solution():\n    total_cakes = 420\n    vanilla_cakes = (2 / 7) * total_cakes\n    banana_cakes = (35 / 100) * total_cakes\n    remaining_cakes = total_cakes - vanilla_cakes - banana_cakes\n\n    # Let the number of lemon cakes be 4x and chocolate cakes be 5x, where x is a common factor.\n    # lemon_cakes : chocolate_cakes = 4x : 5x\n    # Therefore, 4x + 5x = remaining_cakes => 9x = remaining_cakes\n    x_value = remaining_cakes / 9\n\n    lemon_cakes = 4 * x_value\n\n    return int(lemon_cakes)\n\nans = solution()"
    ],
    "ae83fe9ef869429482fffd4b5f259176": [
        "from math import lcm\n\ndef solution():\n    return lcm(2, 3, 4, 5, 6)\n\nans = solution()"
    ],
    "8a1fa4f39e19492fb5019958052fc68b": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):  # Three-digit integers start from 100 to 999\n        digits = set(str(i))  # Convert number to set of digits\n        if len(digits) == 2:  # Check if there are exactly 2 different digits\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "37eda3d2a7f44391ba89ab6bf862df70": [
        "def solution():\n    total_score_first_four = 89 * 4\n    score_fifth_assignment = 94\n    total_score_all_five = total_score_first_four + score_fifth_assignment\n    average_score_all_five = total_score_all_five / 5\n    return average_score_all_five\n\nans = solution()"
    ],
    "a8d1ad2b149e49638120daa2fb4f7e50": [
        "def solution():\n    # There are 3 players: Cici, Lily, and April.\n    # Lily starts and can pass to 2 others.\n    # After Lily makes the first pass, the receiver can then pass to only 1 other person (not back to Lily).\n    # So for each of the first pass, there is only 1 way for the second pass.\n    # Therefore, the total number of different passing ways is the number of people Lily can pass to.\n\n    first_pass_options = 2  # Cici or April\n    second_pass_options = 1  # One person left after the first pass\n\n    total_passing_ways = first_pass_options * second_pass_options\n\n    return total_passing_ways\n\nans = solution()"
    ],
    "0cc3cd452b624c9498a48d64322243b8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bilal, chloe, david, emily = symbols('alan bilal chloe david emily')\n    alan_value = 74\n    bilal_value = 86\n\n    equation1 = Eq(chloe, 2 * david)\n    equation2 = Eq(david, 3 * emily)\n    equation3 = Eq(alan + bilal + chloe + david + emily, 400)\n    equation4 = Eq(alan, alan_value)\n    equation5 = Eq(bilal, bilal_value)\n\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "1f9f29d4bf5649379a9cfd3c9d5fcb04": [
        "def solution():\n    wibble_arms = 6\n    total_arms = 81\n    total_wibbles = 11\n\n    total_wibble_arms = wibble_arms * total_wibbles\n    remaining_arms = total_arms - total_wibble_arms\n    wobble_arms = 5\n\n    num_wobbles = remaining_arms // wobble_arms\n\n    return num_wobbles\n\nans = solution()"
    ],
    "0e57c290f8c748f5a8c86e2a3bf96219": [
        "def solution():\n    # Let's introduce symbols for the number of books Lily and Judy have\n    from sympy import symbols, Eq, solve\n\n    # Let the number of books Judy initially has be j\n    # Let the number of books Lily initially has be l\n    l, j = symbols('l j')\n\n    # The problem states that if Lily gives c books to Judy, both will have the same amount\n    # This means: l - c = j + c\n    # We can also say that initially, Lily had c more books than Judy: l = j + c\n\n    # Now we have two equations\n    # Equation 1: l = j + c\n    # Equation 2: l - c = j + c\n\n    # Since we have two unknowns and only one equation, we need another condition or relationship\n    # However, the problem doesn't give us another numeric condition. Thus, we have to assume that\n    # 'c' can be any positive number. This means that Lily must have had at least one more book than Judy initially.\n    # So the answer is typified by c, where c is a positive integer.\n\n    # Here's how we can solve for c (the difference in the number of books)\n    equation1 = Eq(l, j + c)\n    equation2 = Eq(l - c, j + c)\n\n    # Solving these two equations will yield no unique solution since it's a dependent system\n    # Instead, the solution is any positive value of c\n    # Let's solve for l in terms of j and c\n    solutions = solve((equation1, equation2), (l, j))\n\n    # We get a dictionary of solutions. Extracting the expression for l.\n    l_expr = solutions[l]\n\n    # However, since we want the number of books Lily had more than Judy, we need 'c'\n    # We will return the expression of l - j, which is equivalent to c.\n    return l_expr - j\n\nans = solution()"
    ],
    "59de4a78f41748248348566692dedf92": [
        "def solution():\n    from sympy import isprime\n\n    for a in range(2, 179):\n        if isprime(a):\n            b = (179 - 7 * a) / 9\n            if b.is_integer() and isprime(int(b)):\n                return int(a + b)\n\nans = solution()"
    ],
    "c214cce759fc4604b8bd4aac04f2f467": [
        "def solution():\n    boys = 18\n    girls = 2 * boys\n    return girls\n\nans = solution()"
    ],
    "84bcfd2527634a87ba73c95b75479cb4": [
        "def solution():\n    total_minutes = 32 * (1/8) * (1/6) * (1/4)\n    total_seconds = total_minutes * 60\n    return total_seconds\n\nans = solution()"
    ],
    "1933faa02cf240199d07d7e6c69c3b86": [
        "def solution():\n    percentage = 15 / 100\n    amount = 420\n    return percentage * amount\n\nans = solution()"
    ],
    "939569b8df414ce2859c11258d03bfc9": [
        "def solution():\n    result = (113 - 5) / 9\n    return result\n\nans = solution()"
    ],
    "e7d9f592443542ef9f580c770df2ce1a": [
        "def solution():\n    # Using the given operation to find a pattern\n    def custom_op(a, b):\n        return a + b - (a * b / 910)\n    \n    # Starting from the rightmost operation as it has the highest precedence\n    # We can start with 2 # 1 and then iteratively apply the # operation to the rest\n    result = custom_op(2, 1)\n    for n in range(3, 2017):\n        result = custom_op(n, result)\n    \n    # The result now contains the evaluation of the entire expression\n    return result\n\nans = solution()"
    ],
    "ef69916912d64c749a2c5414ca933b35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # 24 minutes is 0.4 hours\n    time_maverick_thinks = 0.4\n\n    # Define the symbols for time\n    time_kelvin_thinks = symbols('t')\n\n    # Distance travelled by Maverick and Kelvin\n    distance_maverick = 15 * time_kelvin_thinks\n    distance_kelvin = 10 * time_kelvin_thinks + 10\n\n    # Equation (Maverick catches up to Kelvin)\n    equation = Eq(distance_maverick, distance_kelvin)\n\n    # Solve for Kelvin's time\n    time_kelvin = solve(equation, time_kelvin_thinks)[0]\n\n    # Compare the two times to see who is correct\n    is_maverick_correct = time_maverick_thinks == time_kelvin\n\n    if is_maverick_correct:\n        ans = (is_maverick_correct, None)\n    else:\n        ans = (is_maverick_correct, time_kelvin)\n\n    return ans\n\nans = solution()"
    ],
    "0833ee006bff4737af597938f80a6679": [
        "def solution():\n    for hundreds in range(1, 10):  # Hundreds place must be from 1 to 9\n        for tens in range(0, 10):  # Tens place could be 0 to 9\n            for ones in range(0, 10):  # Ones place could also be 0 to 9\n                # Checking the condition that tens is twice the hundreds\n                if tens == 2 * hundreds:\n                    # Checking that hundreds is one more than ones\n                    if hundreds == ones + 1:\n                        # Checking if the sum of digits is 15\n                        if hundreds + tens + ones == 15:\n                            # Formulating the number\n                            return hundreds * 100 + tens * 10 + ones\n                            \nans = solution()"
    ],
    "cc2d217fd9294779a151ac26e6edcda8": [
        "def solution():\n    # Let the two numbers be x (the larger number) and y (the smaller number).\n    # According to the problem, we have two equations:\n    # x + y = 80\n    # x - y = 40\n    # We can solve this system of equations by adding the two equations to\n    # eliminate y, or by subtracting the second equation from the first to\n    # eliminate x.\n\n    # Adding the two equations, we get:\n    # 2x = 120\n    # So the larger number x is:\n    x = 120 / 2\n\n    # Now we can find y using the first equation:\n    y = 80 - x\n\n    # y is the smaller number, so we return y\n    return y\n\nans = solution()"
    ],
    "7d33980148da4ca2a7359bd7f16eac27": [
        "def solution():\n    boys = 3\n    girls = 4\n    # The correct answer is found by multiplying the ways to choose a boy with the ways to choose a girl, not adding them.\n    ans = boys * girls\n    return ans\n\nans = solution()"
    ],
    "4b1aed0b9dfb4774968b86622359a2d5": [
        "def solution():\n    total_marks = 23\n    correct_mark = 5\n    wrong_mark = -2\n    num_questions = 6\n    \n    # Let x be the number of correct answers and y be the number incorrect. Then:\n    # x + y = number of questions\n    # 5x - 2y = total marks\n    # We want to find the value of x.\n\n    # Using substitution from the first equation, we get y = num_questions - x.\n    # Plugging y into the second equation, we get:\n    # 5x - 2(num_questions - x) = total marks\n    # which simplifies to:\n    # 5x - 12 + 2x = 23\n    # 7x = 35\n    # x = 5 (correct answers)\n\n    correct_answers = (total_marks + 2 * num_questions) / (correct_mark + wrong_mark)\n\n    return int(correct_answers)\n\nans = solution()"
    ],
    "51add92ad60b41bd8d0e28c5401b2bae": [
        "def solution():\n    from math import factorial\n\n    # In this case, since all erasers are identical, we are dealing with a partition of a number\n    # Here, we want to partition 6 into 3 parts with each part at least 1 (since each kid gets at least one)\n    # This is equivalent to partitioning (6 - 3) = 3 into 3 parts, which can include 0\n    # We can calculate this using the \"stars and bars\" combinatorial method\n\n    n = 6 - 3  # Total number of items to distribute after ensuring each kid gets one\n    k = 3 - 1  # Total bins (kids) minus 1\n\n    # The formula for combinations with repetition is C(n+k-1, k), which simplifies to C(n+k-1, n) for stars and bars\n    ways = factorial(n + k) // (factorial(n) * factorial(k))\n\n    return ways\n\nans = solution()"
    ],
    "35a2e016d6e741289d85bfd98cae8549": [
        "def solution():\n    # Calculate the total length of the road using the plum trees\n    total_length = (41 - 1) * 4  # one less interval than the number of trees for plum trees\n\n    # Calculate the number of pine trees using the length of the road\n    # There is one more tree than the number of intervals for pine trees\n    num_pine_trees = (total_length / 5) + 1\n\n    return int(num_pine_trees)\n\nans = solution()"
    ],
    "cd978bde655c4eeab7c4cd5b3e79f234": [
        "def solution():\n    ans = sum(range(1, 7))\n    return ans\n\nans = solution()"
    ],
    "19e648dd36f74957bbf3ab2e377bf993": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the current age of the younger man, and y be the current age of the older man\n    x, y = symbols('x y')\n\n    # First statement: When older was the age of younger, (y - x) years ago, the younger was 4\n    equation1 = Eq(x - (y - x), 4)\n\n    # Second statement: When younger will be the age of older, (y - x) years from now, the older will be 61\n    equation2 = Eq(y + (y - x), 61)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Return the age of the younger man\n    return solutions[x]\n\nans = solution()"
    ],
    "9ccb508c829548d7abb565af2518a286": [
        "def solution():\n    week1 = 27\n    week2 = 25\n    week3 = 30\n    total_litres = week1 + week2 + week3\n    return total_litres\n\nans = solution()"
    ],
    "e9c6ea8b3c7942a7b584df1117ea9972": [
        "def solution():\n    candy_weight = 30\n    weight_difference = 4\n    nancy_weight = candy_weight - weight_difference\n    return nancy_weight\n\nans = solution()"
    ],
    "960af76a998542a6bf58bd1a0539e775": [
        "def solution():\n    people = 10\n    time_required = 9\n    desired_time = 3\n\n    # Calculate the total work by multiplying people and the time they require.\n    total_work = people * time_required\n    \n    # Find how many people are needed to do the same work in desired time.\n    people_needed = total_work / desired_time\n\n    return people_needed\n\nans = solution()"
    ],
    "c7ea8a8261394a278c052e1d963f6832": [
        "def solution():\n    bag_cost = 120\n    fraction_remaining_after_book = 1 - 1/3\n    fraction_spent_on_bag = 2/5\n    initial_money = bag_cost / (fraction_remaining_after_book * fraction_spent_on_bag)\n    return initial_money\n\nans = solution()"
    ],
    "b95ce34c4904482cb93b8929a241db81": [
        "def solution():\n    remaining_after_first_day = 1 - 1/3\n    remaining_after_second_day = 1 - 0.6\n    final_remaining = remaining_after_first_day * remaining_after_second_day\n\n    initial_watermelons = 48 / final_remaining\n\n    return int(initial_watermelons)\n\nans = solution()"
    ],
    "6d4657e0a9824b57b531a1b2c5afa9eb": [
        "def solution():\n    count = 0\n    for x1 in range(1, 9):\n        for x2 in range(x1+1, 9):\n            for x3 in range(x2+1, 9):\n                if x1 + x2 + x3 == 13:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "d0d1460243fb491a970711148da8bdbd": [
        "def solution():\n    return 125 * 8 * 49\n\nans = solution()"
    ],
    "28e8d3b2c27742f3ace084be157d24aa": [
        "def solution():\n    n = 15\n    first_term = 5\n    last_term = n\n\n    sum_squares = (last_term*(last_term + 1)*(2*last_term + 1))//6 - ((first_term - 1) * first_term * (2*(first_term - 1) + 1))//6\n\n    return sum_squares\n\nans = solution()"
    ],
    "afeb51e7b2d34fa88856173d28928c5d": [
        "def solution():\n    total_students = 152\n    for boys in range(total_students + 1):\n        girls = total_students - boys\n        if girls - 5 == (boys - boys / 11):\n            return boys\n\nans = solution()"
    ],
    "ecab41bccb924851abd1f915401a0eda": [
        "def solution():\n    number_of_desks_in_front_of_jessica = 5\n    number_of_desks_behind_judy = 7\n\n    # Number of desks between Jessica and Judy is 1 (since they are adjacent)\n    number_of_desks_between = 1\n\n    # Total number of desks = desks in front of Jessica + 1 (Jessica's desk)\n    # + 1 (Judy's desk) + desks behind Judy\n    total_number_of_desks = (number_of_desks_in_front_of_jessica + 1\n                             + number_of_desks_between + 1\n                             + number_of_desks_behind_judy)\n\n    return total_number_of_desks\n\nans = solution()"
    ],
    "19b4042ba2f8433493147e1a596bf779": [
        "def solution():\n    ans = 9 - 8 + 7 - 6 + 5 - 4 + 3 - 2 + 1\n    return ans\n\nans = solution()"
    ],
    "2b2fae5ea687426e9dedde667bf69e55": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(0.75 * x - 5, 2.5)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "b4ef0f615e074408b4de5de14d0436b3": [
        "def solution():\n    result = 888 * 999\n    ans = result % 100\n    return ans\n\nans = solution()"
    ],
    "5a7e2d52cd5643888c27fcb6f06badc1": [
        "def solution():\n    num1 = 0.11\n    halfway = 0.126\n    distance = halfway - num1\n\n    num2 = halfway + distance\n\n    return num2\n\nans = solution()"
    ],
    "1e5a18b4b8724826840fb986aacf25d5": [
        "def solution():\n    total_sweets = 486\n    total_classmates = 17\n\n    sweets_per_person = total_sweets // total_classmates\n\n    return sweets_per_person\n\nans = solution()"
    ],
    "3f2537244e194218846046e4e72a93db": [
        "def solution():\n    initial_amount = 1000\n    subtraction_amount = 11\n\n    # Calculate the number of steps before the number goes negative\n    steps = (initial_amount - 1) // subtraction_amount\n\n    first_negative_number = initial_amount - subtraction_amount * (steps + 1)\n\n    return first_negative_number\n\nans = solution()"
    ],
    "b09251df1d4e43b491aaaabfee97a699": [
        "def solution():\n    chocolates = 72\n    ratio = 7 / 12\n    toffees = chocolates * ratio\n    return int(toffees)\n\nans = solution()"
    ],
    "d6aec573cb244941b3aefa06caa06e7a": [
        "def solution():\n    for num in range(28, 41):\n        if num % 4 == 0 and 9 in set(factor for factor in range(1, num + 1) if num % factor == 0):\n            return num\n\nans = solution()"
    ],
    "7a3a4893dd26417fb58c5b88ebbabd36": [
        "def solution():\n    return 21 + 27 + 19 - 17 + 22 + 18\n\nans = solution()"
    ],
    "e486c9dd773145848b5f37d0c04bbf06": [
        "def solution():\n    total_cost = 2826\n    mangoes_cost = 56\n    mangoes_boxes = 24\n\n    lychees_cost_per_box = (total_cost - (mangoes_boxes * mangoes_cost)) / 19\n    return lychees_cost_per_box\n\nans = solution()"
    ],
    "1d935725dd9f4e3fa1aed495190dc424": [
        "def solution():\n    coin_values = [1, 2, 5]\n    totals = set()\n    for i in coin_values:\n        for j in coin_values:\n            for k in coin_values:\n                totals.add(i + j + k)\n    ans = len(totals)\n    return ans\n\nans = solution()"
    ],
    "c42ce6475895428ab114a1af2385cd70": [
        "def solution():\n    from math import comb\n\n    num_teams = 6\n    num_games = comb(num_teams, 2)\n\n    return num_games\n\nans = solution()"
    ],
    "66c85837504345c58750cdb4cd50976c": [
        "def solution():\n    principal = 10000\n    rate = 0.05\n    years = 3\n\n    amount = principal * ((1 + rate) ** years)\n    \n    return amount\n\nans = solution()"
    ],
    "d3475d6b771245278e01398bd5f12797": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(24*x - 5*(3 + x), 4)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f8128d9e28164d24aec427b96c538dec": [
        "def solution():\n    percentage = 65 / 100\n    decimal = 0.507\n    fraction = 1 / 4\n\n    ans = percentage + decimal + fraction\n    return ans\n\nans = solution()"
    ],
    "7e4fe708d5fe47a8b3e7945e164570cb": [
        "def solution():\n    from itertools import permutations\n\n    # Create a list of all possible permutations of the four cards\n    cards = ['1', '1', '2', '2']\n    all_perms = set(permutations(cards, 3))\n\n    # Count how many of these permutations are valid three-digit numbers\n    # (i.e., numbers not starting with '0')\n    count = sum(1 for perm in all_perms if perm[0] != '0')\n\n    return count\n\nans = solution()"
    ],
    "aaa5c754fa8b4afba08b7370dcadfd5c": [
        "def solution():\n    total_children = 50\n    total_paid = 555\n    price_with_name = 15\n    price_without_name = 10\n    \n    for num_with_name in range(total_children + 1):\n        num_without_name = total_children - num_with_name\n        total_cost = num_with_name * price_with_name + num_without_name * price_without_name\n        if total_cost == total_paid:\n            return num_with_name\n\nans = solution()"
    ],
    "6db54abfbef4439db3f32fb63eccef7f": [
        "def solution():\n    # Since it's a multiplication tiling puzzle, we assume that each letter represents a unique digit.\n    # We can do a brute force search among all possible digit combinations that satisfy the puzzle.\n    # Loop through possibilities for P, Q, and R\n    for P in range(1, 10):  # P cannot be 0 because it's the first digit\n        for Q in range(10):  # Q can be 0\n            for R in range(10):  # R can be 0\n                # The multiplication as per the puzzle\n                if (P*100 + Q*10 + R) * 4 == R*1000 + R*100 + P*10 + Q:\n                    return P + Q + R\n\nans = solution()"
    ],
    "32cdb025d7b6487e8f23c740bc73c7a7": [
        "def solution():\n    # Calculate jogging distance\n    jogging_time = 1  # from 7:30 AM to 8:30 AM\n    jogging_speed = 5  # miles per hour\n    jogging_distance = jogging_speed * jogging_time\n\n    # Calculate walking distance\n    walking_time = 2  # from 8:30 AM to 10:30 AM\n    walking_speed = 3  # miles per hour\n    walking_distance = walking_speed * walking_time\n\n    # Total distance traveled\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "181bc921ffe648fdb943b55640a83626": [
        "def solution():\n    cube_values = [i**3 for i in range(1, int((44000)**(1/3)) + 1)]\n\n    for cube in cube_values:\n        if 44000 % cube == 0:\n            q = 44000 // cube\n            return q\n\nans = solution()"
    ],
    "0195214807ca4ebb8735a37f3bd0f396": [
        "from sympy import symbols, solve\n\ndef solution():\n    A, B, C = symbols('A B C')\n    # The multiplication must result in a 5-digit number with A at the thousand's place\n    # so A can't be 0, and the value of BCD * E must be in the range [1000, 9999]\n    \n    # The equation comes from the multiplication puzzle\n    #   AB\n    #  x CDE\n    # ------\n    #  ABCDE\n    \n    # Since we have ABCDE as the result, A must be 1 otherwise product will be a 6 digit number\n    # Now we look for B, C, D and E such that they satisfy our conditions\n    sols = []\n    for B in range(10):\n        for C in range(1, 10):\n            for D in range(10):\n                for E in range(10):\n                    expr1 = A * 100 + B * 10 + C\n                    expr2 = C * 100 + D * 10 + E\n                    if expr1 * E == (A*10000 + B*1000 + C*100 + D*10 + E):\n                        sols.append((B, C, D, E))\n    \n    # Since A must be 1, we look for the solution that satisfies the multiplication and gives \n    # 5-digit number\n    for sol in sols:\n        B, C, D, E = sol\n        if (10 + B) * (100 + D*10 + E) == (10000 + B*1000 + C*100 + D*10 + E):\n            return sum([1, B, C])\n    \n    return None\n\nans = solution()"
    ],
    "5e7920b1469e44e9b17a7f258f840f18": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')  # x represents the smallest of the five consecutive numbers\n    consecutive_sum = Eq(x + (x + 1) + (x + 2) + (x + 3) + (x + 4), 100)\n    smallest_number = solve(consecutive_sum, x)\n\n    return smallest_number[0]\n\nans = solution()"
    ],
    "6e0d33aabe9c4bcab5d514bcef0a008a": [
        "def solution():\n    total_balls = 27\n    balls_per_bag = 5\n    bags_used = (total_balls - 2) // balls_per_bag\n\n    return bags_used\n\nans = solution()"
    ],
    "29d7bb7ee42147cb9da0d2f87542dc6c": [
        "def solution():\n    total_oranges = 75\n    oranges_in_3_boxes = 3 * 10\n    oranges_in_7_boxes = 7 * 5\n    oranges_left = total_oranges - (oranges_in_3_boxes + oranges_in_7_boxes)\n    return oranges_left\n\nans = solution()"
    ],
    "4884fdf18c7a4806a27e23695f55df93": [
        "def solution():\n    # To make sure at least 3 cards have the same number, we consider the worst case scenario.\n    # In the worst case, we draw all different numbers for the first two cards of each pattern.\n    # So for 4 patterns, we can draw 2 cards each without having 3 of the same number.\n    # That makes a total of 4 patterns * 2 cards = 8 cards.\n    # When we draw the next card (the 9th one), we will definitely have 3 cards with the same number,\n    # because we already have 2 cards of each pattern and there are only 4 patterns.\n    \n    # Number of cards drawn before we are forced to have 3 of the same number:\n    cards_must_draw = 4 * 2 + 1 # because on the 9th draw, we get the 3rd card of some pattern\n    \n    return cards_must_draw\n\nans = solution()"
    ],
    "23f3e87699854b52b46eb378c40700f3": [
        "def solution():\n    return 32 * 125 * 49\n\nans = solution()"
    ],
    "68ce89970a8a42d0af6104403b9d3ddf": [
        "def solution():\n    total_length = 800\n    num_trees = 21\n    num_intervals = num_trees - 1\n    distance_between_trees = total_length / num_intervals\n    return distance_between_trees\n\nans = solution()"
    ],
    "de1a1dea86fa48258e157a13cfd72cc0": [
        "def solution():\n    return (3/4) * 28\n\nans = solution()"
    ],
    "febedf25f5b741c99cfb8b948352ac30": [
        "def solution():\n    andy = 149\n    given_to_sister = 38\n    andy_after_giving = andy - given_to_sister\n\n    # Since they have the same number of notebooks after Andy gives his sister 38 notebooks,\n    # we can find the initial number of notebooks sister had by subtracting the same amount from Andy's remaining notebooks.\n    sister_initial = andy_after_giving - given_to_sister\n\n    # We then check Joey's solution\n    joey_solution = 149 - (38 // 2)\n    is_joey_correct = sister_initial == joey_solution\n\n    return sister_initial, is_joey_correct\n\nans = solution()"
    ],
    "0aeb025cc8c240e8b251019f1650c9d2": [
        "def solution():\n    # Number of intervals between trees is 9 - 1, because if we have 9 trees, we have 8 spaces between them.\n    intervals = 9 - 1\n    # Total distance between buildings\n    total_distance = 90\n    # Distance between each tree is the total distance divided by the number of intervals\n    distance_between_trees = total_distance / intervals\n\n    return distance_between_trees\n\nans = solution()"
    ],
    "eaee4c5f914f464893c6c617cd8da980": [
        "def solution():\n    mean = 5\n    total_sum = mean * 5\n    known_sum = sum([3, 4, 6, 10])\n    fifth_number = total_sum - known_sum\n    return fifth_number\n\nans = solution()"
    ],
    "64a0b45c920043ea9de7368f87d76a34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 72)\n    equation2 = Eq(x, 2 * y)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "f6face9fc7c7465783d957d20e60eabe": [
        "from sympy import isprime\n\ndef solution():\n    primes_count = 0\n    base_number = 200\n    base_digits = [int(digit) for digit in str(base_number)]\n\n    for pos in range(len(base_digits)):\n        for digit in range(10):\n            if digit != base_digits[pos]:\n                new_number = int(''.join(\n                    str(d) if i != pos else str(digit)\n                    for i, d in enumerate(base_digits)\n                ))\n                if isprime(new_number):\n                    primes_count += 1\n\n    return primes_count\n\nans = solution()"
    ],
    "8b959182183d418eb25cefb9bf8dc219": [
        "def solution():\n    emily_position_from_front = 25 + 1  # Emily is directly behind Danny, so add 1 for Danny\n    danny_position_from_back = 14\n    total_people = emily_position_from_front + danny_position_from_back\n\n    return total_people\n\nans = solution()"
    ],
    "4d7449c37dc04e2caef48c2973cae23f": [
        "def solution():\n    possible_cards = {\n        'Spades': ['A', 'J', 'K'],\n        'Hearts': ['3', '5', 'K'],\n        'Diamonds': ['2', '7', 'J'],\n        'Clubs': ['A', '7']\n    }\n    \n    # Step 1: Eddie does not know the card, so it cannot be a unique suit card, eliminating Spades A and Clubs A\n    unique_suit = ['Spades', 'Clubs']\n    for suit in unique_suit:\n        if 'A' in possible_cards[suit]:\n            possible_cards[suit].remove('A')\n            \n    # Step 2: Avril does not know the card, so it cannot be a unique number\n    # Only one Jack ('J') exists in the remaining options, so we eliminate it\n    for suit, numbers in possible_cards.items():\n        if 'J' in numbers:\n            numbers.remove('J')\n            \n    # Step 3: Avril now knows the card, so the number must be unique across the remaining suits\n    # Find the unique number across all suits\n    unique_number = None\n    all_numbers = [number for numbers in possible_cards.values() for number in numbers]\n    for number in all_numbers:\n        if all_numbers.count(number) == 1:\n            unique_number = number\n            break\n            \n    # Step 4: Find the suit that has this unique number\n    for suit, numbers in possible_cards.items():\n        if unique_number in numbers:\n            ans = (suit, unique_number)\n            break\n    \n    return ans\n\nans = solution()"
    ],
    "8ddc7b2bdd5b4d1a82dc0c65276359f0": [
        "def solution():\n    # Since Emma cuts a piece of wood into 4 sections in 12 minutes, each cut takes 12/3 minutes\n    cut_time = 12 / 3\n    \n    # To cut the piece of wood 5 times, she needs 5 cuts * time per cut\n    total_time = 5 * cut_time\n    \n    return total_time\n\nans = solution()"
    ],
    "967f79ab6d244b729f644537a06bdcc3": [
        "def solution():\n    total_cost = 13.23\n    number_of_cups = 9\n\n    cost_per_cup = total_cost / number_of_cups\n\n    return cost_per_cup\n\nans = solution()"
    ],
    "d71cc09281d5402dbf1e61d96fc56855": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for total_pages, deadline, days_late, days_early\n    total_pages, deadline = symbols('total_pages deadline')\n\n    # Vanessa reads 30 pages a day and finishes 2 days after deadline\n    equation1 = Eq(30 * (deadline + 2), total_pages)\n\n    # Vanessa reads 39 pages a day and finishes 4 days before deadline\n    equation2 = Eq(39 * (deadline - 4), total_pages)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (total_pages, deadline))\n\n    # deadline is the number of days to finish the book, total_pages is the number of pages\n    return solutions[deadline], solutions[total_pages]\n\nans = solution()"
    ],
    "98e96ab2a5464c2f8b55cc5355c56197": [
        "def solution():\n    def count_fives(pages):\n        count = 0\n        for i in range(1, pages + 1):\n            count += str(i).count('5')\n        return count\n    \n    # Since we know 5 appears 30 times, we'll start from a lower bound\n    # because it surely appears less than 6*30 times in the page numbers.\n    \n    pages = 1\n    while count_fives(pages) < 30:\n        pages += 1\n    \n    return pages - 1  # Subtract 1 because the loop goes one page past the answer\n\nans = solution()"
    ],
    "bb066669a1d043539b0f78f992d232f1": [
        "def solution():\n    return (10 + 9 + 8 + 7 + 6) - (5 + 4 + 3 + 2 + 1)\n\nans = solution()"
    ],
    "b603c5461f8548a3b4cec3a87b533133": [
        "def solution():\n    ans = 7.298 / 0.2\n    return ans\n\nans = solution()"
    ],
    "19c7948c5c3b458f98616eed8bb06cfc": [
        "def solution():\n    # Reconstruct the equation to find the error and solve for x\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n\n    # Correct the equation according to math rules\n    eq = Eq(13 - 2 * (2 * x - 3), 5 - (x - 2))\n\n    # Solve for x\n    correct_x = solve(eq, x)\n\n    return correct_x[0]\n\nans = solution()"
    ],
    "0a9790cb77334c198e6f33340f5f941c": [
        "def solution():\n    rooms_per_day_per_worker = 2\n    total_rooms = 4\n    workers = 2\n\n    days = total_rooms / (rooms_per_day_per_worker * workers)\n\n    return days\n\nans = solution()"
    ],
    "317ce9d0b92e4e9b82f5bce5d48051a3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, orange = symbols('apple orange')\n\n    # Equation based on Kate's purchase\n    equation1 = Eq(apple + 2 * orange, 48)\n\n    # Equation based on Jade's purchase\n    equation2 = Eq(apple + orange, 31)\n\n    # Solving equations\n    solutions = solve((equation1, equation2), (apple, orange))\n\n    return solutions[orange]\n\nans = solution()"
    ],
    "7ab2e2f436264488b6a85e26de20ed20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pocket_money, tennis_ball_price = symbols('pocket_money tennis_ball_price')\n\n    equation1 = Eq(4 * tennis_ball_price + 27, pocket_money)\n    equation2 = Eq(2 * tennis_ball_price + 151, pocket_money)\n\n    solutions = solve((equation1, equation2), (pocket_money, tennis_ball_price))\n\n    return solutions[pocket_money]\n\nans = solution()"
    ],
    "ef8fc9f97c334d85b494fffa1bd0577b": [
        "def solution():\n    pages_per_hour = 30 / (3/4)\n    seconds_per_page = 3600 / pages_per_hour\n    return seconds_per_page\n\nans = solution()"
    ],
    "a68fba20646a499593183aa13dfc3f51": [
        "def solution():\n    total_badges = 24\n    given_badges = total_badges * (3/8)\n    remaining_badges = total_badges - given_badges\n    return remaining_badges\n\nans = solution()"
    ],
    "a1b6d3dc280e4ab498a45c02841bbb75": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        digits = [int(d) for d in str(i)]\n        if digits.count(0) == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "29b13d5b92d24153bb5eab0c0a6b79b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jason, will, tom = symbols('jason will tom')\n\n    equation1 = Eq(jason, 3 * will)\n    equation2 = Eq(tom, will - 15)\n    equation3 = Eq(jason + will + tom, 225)\n\n    solutions = solve((equation1, equation2, equation3), (jason, will, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "5ed3ede08de4405abf392b2e764a8a3a": [
        "def solution():\n    steps_per_staircase = 12\n    total_staircases = 3\n    total_steps = steps_per_staircase * total_staircases\n    return total_steps\n\nans = solution()"
    ],
    "163d5569c8794822827aa5f3fb2a9e54": [
        "def solution():\n    total_people = 23\n    behind_louis = 14\n    in_front_of_louis = total_people - behind_louis - 1 # Subtract Louis himself\n    return in_front_of_louis\n\nans = solution()"
    ],
    "cb7de8383bda423f846c2a0d41099259": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    thomas, gerald = symbols('thomas gerald')\n    \n    equation1 = Eq(thomas, 5/3 * gerald)\n    equation2 = Eq(thomas + gerald, 104)\n    \n    solutions = solve((equation1, equation2), (thomas, gerald))\n    \n    difference = solutions[thomas] - solutions[gerald]\n\n    return int(difference)\n\nans = solution()"
    ],
    "350b297b009e49fa80ba80c3b2e816be": [
        "def solution():\n    numbers = range(11, 32, 2)  # Start from 11, end before 32, step by 2\n    ans = sum(numbers)  # Sum the numbers in the range\n    return ans\n\nans = solution()"
    ],
    "b2e74fd3787345abaed2bffc05eda905": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    elias, aileen = symbols('elias aileen')\n\n    # Elias originally had 5 times as many stickers as Aileen\n    original_condition = Eq(elias, 5 * aileen)\n    # After Elias gave away 88 stickers and Aileen lost 8 stickers, they had the same number\n    end_condition = Eq(elias - 88, aileen - 8)\n\n    # Solving the system of equations\n    solutions = solve((original_condition, end_condition), (elias, aileen))\n\n    # Getting the number of stickers each of them had in the end\n    elias_end = solutions[elias] - 88\n    aileen_end = solutions[aileen] - 8\n\n    return elias_end, aileen_end\n\nans = solution()"
    ],
    "192ed864378f46f0992b02857290262e": [
        "def solution():\n    return sum(range(2, 9))\n\nans = solution()"
    ],
    "99153d571f7b47888d63eeb16f4101aa": [
        "def solution():\n    ans = 730 / 1000\n    return ans\n\nans = solution()"
    ],
    "d70de15ac2b64e119755895c7c1775b0": [
        "def solution():\n    cookies_per_gram = 25 / 20\n    cookies_with_48_grams = cookies_per_gram * 48\n    return int(cookies_with_48_grams)\n\nans = solution()"
    ],
    "0c86c445fc0a4c6da74c3a666872027f": [
        "def solution():\n    n = 5 * (4 ** 2)\n    return n\n\nans = solution()"
    ],
    "ab65eb6366424791bc96225b7748674a": [
        "def solution():\n    result = (8/11) * 1.54\n    return result\n\nans = solution()"
    ],
    "7580babfb6664341b878371c05f2522f": [
        "def solution():\n    ans = 3597 // 11\n    return ans\n\nans = solution()"
    ],
    "91e8c0f537a24098854e3e9ad367ef40": [
        "def solution():\n    # Convert from base 8 to base 10, add them, then convert back to base 8\n    sum_in_base_10 = int('25', 8) + int('37', 8)\n    ans = oct(sum_in_base_10)[2:]  # [2:] is used to remove the \"0o\" prefix\n    return ans\n\nans = solution()"
    ],
    "15cc7b6d484d4ffcad21a4bb4923bca1": [
        "def solution():\n    return 5987 + 67 + 983\n\nans = solution()"
    ],
    "5a8b109d6748455c802ec8c38135b025": [
        "def solution():\n    return 12.4 / 40\n\nans = solution()"
    ],
    "7bf99922eaaf4266b6882b0fd9059ea0": [
        "def solution():\n    # Let the number of boys be b\n    # Since there were 2/7 as many boys as girls, the number of girls is 7/2 times the number of boys\n    # The total number of children (boys + girls) is therefore b + (7/2)*b = (9/2)*b\n    # There are 2/3 as many adults as children, so the number of adults is (2/3) * (9/2)*b = 3*b\n    # The difference between the number of adults and boys is 1228, so 3*b - b = 1228\n    # Solving for b we get 2*b = 1228, so b = 614\n    # Now we can find the total number of people at the park by summing\n    # boys, girls, and adults: total = b + (7/2)*b + 3*b\n    # Substituting the value of b we found: total = 614 + (7/2)*614 + 3*614\n\n    b = 1228 / 2\n    total = b + (7/2)*b + 3*b\n\n    return total\n\nans = solution()"
    ],
    "eb3a8e66576f4d9f9023ccfe7b7b53c5": [
        "def solution():\n    purchase_price_per_racket = 150\n    selling_price_per_racket = 175\n    remaining_rackets = 8\n    profit = 525\n    \n    # Let x be the initial number of rackets\n    # Total cost price is purchase_price_per_racket times x\n    # Total selling price when 8 rackets are left is (x - 8) times selling_price_per_racket\n    # The equation for the total selling price to cover the cost and profit is:\n    # (x - 8) * selling_price_per_racket = x * purchase_price_per_racket + profit\n    # Solve for x\n    x = symbols('x')\n    equation = Eq((x - remaining_rackets) * selling_price_per_racket, x * purchase_price_per_racket + profit)\n    result = solve(equation, x)\n    \n    return result[0]\n\nans = solution()"
    ],
    "ed32aedbb2a34499a71cf190747aeb19": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the scores of two students as symbols\n    score_a, score_b = symbols('score_a score_b')\n\n    # Formulate the equations based on the problem statement\n    equation1 = Eq(score_b + 24, score_a - 2)\n    equation2 = Eq(score_a - 25, 5 * (score_b - 25))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (score_a, score_b))\n\n    # Student A's score is what we are looking for\n    return solutions[score_a]\n\nans = solution()"
    ],
    "888e7a05c66a49078a06713b83ca6ce1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial amount of money Chloe and Gordon each had\n    x = symbols('x')\n    # Chloe spent $20 each day. We don't know the number of days, let's call it d.\n    # She has $157 left, so the equation for her is: initial amount - 20 * days = money left\n    # Gordon spent $25 each day. With $82 left, his equation would be: initial amount - 25 * days = money left\n    \n    # Since the difference between what Chloe and Gordon have left is the extra $5 Gordon spends each day,\n    # the difference between $157 and $82 should give total overspent by Gordon which is the number of days times $5.\n    # We can set an equation as follows:\n    # $20 * d + $157 = $25 * d + $82\n    # Bringing d's to one side would give us:\n    # $20 * d - $25 * d = $82 - $157\n    # Solving this equation, we can find d, substitute back into Chloe's money left and find the initial amount.\n\n    equation = Eq(20*x - 157, 25*x - 82)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3900795ab2d94196ad395c7483e5c648": [
        "def solution():\n    return 813 * 72\n\nans = solution()"
    ],
    "33e79ce7d01446d9a282b54a045a5e8e": [
        "def solution():\n    n = 10\n    ans = 1 + n*(n+1)//2 + (n*(n-1)*(n-2)*(n+3))//24\n    return ans\n\nans = solution()"
    ],
    "c96b47bede684b9f8ba38d50dd4e1086": [
        "def solution():\n    bags = 8\n    pens_per_bag = 4\n    total_pens = bags * pens_per_bag\n    return total_pens\n\nans = solution()"
    ],
    "678881c9e47f44f59d88da4a1055e2af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    equation = Eq(10 - 2 * (x - 9), 2*x - 4 * (5 - x))\n\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "0b8067aa5d3f4321a2018a93d46b6c9e": [
        "def solution():\n    count = 0\n    for x1 in range(1, 14):\n        for x2 in range(x1 + 1, 14):\n            x3 = 14 - x1 - x2\n            if x3 > x2:  # Different positive numbers requirement\n                count += 1\n    return count\n\nans = solution()"
    ],
    "27c967821aaa4f3f9ac178e7c395b919": [
        "def solution():\n    from math import factorial\n\n    number = factorial(10)\n    count = 0\n    while number % 10 == 0:\n        count += 1\n        number //= 10\n\n    return count\n\nans = solution()"
    ],
    "a5905a83aea54ed7b0165353ec295c7e": [
        "def solution():\n    total_melons = 20\n    cost_price = 15\n    bad_melons = total_melons * (1/5)\n    remaining_melons = total_melons - bad_melons\n    selling_price_per_melon = 1.50\n    total_revenue = remaining_melons * selling_price_per_melon\n    profit = total_revenue - cost_price\n    \n    return profit\n\nans = solution()"
    ],
    "a2a533fc1c424f969f5fae611daad3e8": [
        "def solution():\n    line_length = 10  # in cm\n    cross_interval = 1  # in cm\n\n    # The number of crosses is one more than the number of intervals\n    num_crosses = (line_length // cross_interval) + 1\n\n    return num_crosses\n\nans = solution()"
    ],
    "52bacc6ef48b44b8bc4d02992a7b6173": [
        "def solution():\n    return 8.7 * 3.4\n\nans = solution()"
    ],
    "7ce4a67e0ab846d8bd1eb78dffb57e9e": [
        "def solution():\n    from math import gcd\n\n    # Total number of oranges and apples\n    total_oranges = 150\n    total_apples = 100\n\n    # Leftover oranges and apples\n    leftover_oranges = 17\n    leftover_apples = 5\n\n    # Oranges and apples that can be divided\n    divisible_oranges = total_oranges - leftover_oranges\n    divisible_apples = total_apples - leftover_apples\n\n    # Find the greatest common divisor (GCD) for the number of divisible oranges and apples\n    num_neighbours = gcd(divisible_oranges, divisible_apples)\n\n    return num_neighbours\n\nans = solution()"
    ],
    "9ed7da1b104344da81a0dc411168159e": [
        ""
    ],
    "684f885693764340afae67d6e64e96ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sandra, jessica = symbols('sandra jessica')\n\n    equation1 = Eq(sandra - 13, jessica + 13 - 6)\n    solutions = solve((equation1,), (sandra, jessica))\n\n    initial_difference = solutions[sandra] - solutions[jessica]\n    return initial_difference\n\nans = solution()"
    ],
    "57ff93a0b8da463fa5f80c4c21a775ee": [
        "def solution():\n    # Let the total initial value of jewels in P be x and in Q be y\n    # The average value of the jewels in each box is increased by £1000 when a £5000 jewel is transferred from P to Q\n    # The new average in Q is (y + 5000) / 3 + 1000, and for P it's (x - 5000) / 3 + 1000\n    # Before the transfer, the averages were x/3 for P and y/3 for Q\n    # We set up equations based on the given information:\n    # (x - 5000) / 3 + 1000 = x / 3\n    # (y + 5000) / 3 + 1000 = y / 3\n    # Simplify the equations to find x and y:\n    # x - 5000 + 3000 = x   =>   x - x = 5000 - 3000   =>   0 = 2000\n    # y + 5000 + 3000 = y   =>   y + 8000 = y   =>   8000 = 0\n    # These lead to contradictions, showing that our equation setup is incorrect because we misunderstood the problem.\n    # We revise the equations with the correct interpretation that the average value of the jewels in each box\n    # increases by £1000, thus:\n    # x/3 - 1000 = (x - 5000) / 3\n    # (y + 5000) / 3 = y/3 + 1000\n\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq((x - 5000) / 3, x / 3 - 1000)\n    equation2 = Eq((y + 5000) / 3, y / 3 + 1000)\n\n    solutions = solve((equation1, equation2), (x, y))\n    total_value = solutions[x] + solutions[y]\n    return total_value\n\nans = solution()"
    ],
    "07c7c85bda4847ceafa321fc737bd219": [
        "def solution():\n    distance_first_sixth = 60\n    number_of_intervals_first_sixth = 6 - 1\n    interval_length = distance_first_sixth / number_of_intervals_first_sixth\n    \n    number_of_intervals_first_ninth = 9 - 1\n    distance_first_ninth = interval_length * number_of_intervals_first_ninth\n    \n    return distance_first_ninth\n\nans = solution()"
    ],
    "ee0568f16c2b4ce48ef303d392601ff8": [
        "def solution():\n    pattern_length = 6  # the pattern repeats every 6 balloons\n    green_count_in_pattern = 2  # there are 2 green balloons in each pattern\n\n    full_patterns, partial_pattern_balloons = divmod(75, pattern_length)\n\n    # Count green balloons in complete patterns\n    total_green_balloons = full_patterns * green_count_in_pattern\n\n    # Count green balloons in the last incomplete pattern, if there is any\n    if partial_pattern_balloons >= 3:\n        total_green_balloons += 1\n    if partial_pattern_balloons == 6:\n        total_green_balloons += 1\n\n    return total_green_balloons\n\nans = solution()"
    ],
    "ce622d4ae66d44e1bcc0df82fbe961fc": [
        "def solution():\n    from math import comb\n    \n    num_teams = 3\n    num_matches = comb(num_teams, 2)\n    \n    return num_matches\n\nans = solution()"
    ],
    "e29e4f297900441f9110516bd6b642d0": [
        "def solution():\n    total_strawberries = 15 + 27 + 19\n    remaining_strawberries = total_strawberries % 8\n    return remaining_strawberries\n\nans = solution()"
    ],
    "33e6fe50af554266b27e4c2074a6a3f9": [
        "def solution():\n    each_friend = 26\n    friends = 7\n    kate_left = 22\n    at_school = each_friend * friends + kate_left\n    total_candy = at_school * 3\n    \n    return total_candy\n\nans = solution()"
    ],
    "66aa3aec53fa48d1aa6897cfab540921": [
        "def solution():\n    return 8 * (3/2)\n\nans = solution()"
    ],
    "0edc4483e1764691b7f15e9bedcc4156": [
        "def solution():\n    total_ones = 15\n    total_twos = 14\n    N = 9\n    ones_count = 0\n    twos_count = 0\n\n    while ones_count < total_ones or twos_count < total_twos:\n        N += 1\n        ones_count += str(N).count('1')\n        twos_count += str(N).count('2')\n\n    return N - 1  # Subtract 1 because N was incremented after counting digits\n\nans = solution()"
    ],
    "0f48eb78665e4e5ba3b372be6f2eab93": [
        "def solution():\n    for m in range(10):\n        if 120 + m == 9 * (10 + m) - 2:\n            return m\n\nans = solution()"
    ],
    "14e3978e40d049dbad0dcf4a4cf738df": [
        "def solution():\n    # Andy's speed compared to Bob's when Andy is at the 9th floor and Bob is at the 5th\n    # The ratio of Andy's position to Bob's is 9:5\n    andy_to_bob_speed_ratio = 9 / 5\n\n    # When Andy reaches the top floor (25th), we find Bob's position using the ratio\n    bobs_position_when_andy_reaches_top = 25 / andy_to_bob_speed_ratio\n\n    return int(bobs_position_when_andy_reaches_top)\n\nans = solution()"
    ],
    "25e5a7db39a14e5080bf1594f85931a6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    words_per_minute = symbols('w')\n    \n    # Equation represents the fact that the number of words James needs to type is constant\n    equation = Eq(3 * words_per_minute, 2 * (words_per_minute + 30))\n    \n    # Solve for words_per_minute\n    words_per_minute_solution = solve(equation, words_per_minute)\n    \n    # Calculate the total words\n    total_words = 3 * words_per_minute_solution[0]\n    \n    return total_words\n\nans = solution()"
    ],
    "593a8f96d20c408d86fda58e89c71746": [
        "def solution():\n    lights = [0] * 10  # 0 is off, 1 is on\n    # Ms. Lily's action: Toggle every other light\n    for i in range(1, 11, 2):\n        lights[i-1] = 1 - lights[i-1]  # Toggle the switch at position i\n    # Sam's action: Press each even numbered light switch 7 times\n    for i in range(2, 11, 2):\n        lights[i-1] = (lights[i-1] + 7) % 2  # Toggle the switch 7 times (7 toggles = 1 toggle)\n    # Count the number of lights that are on\n    ans = sum(lights)\n    return ans\n\nans = solution()"
    ],
    "eefc87844ecc4f2285ce5feedafa6913": [
        "def solution():\n    depth = 8\n    advance = 3\n    slip = 2\n    total_advance = 0\n    day = 0\n\n    while total_advance < depth:\n        day += 1\n        total_advance += advance\n        if total_advance >= depth:\n            break\n        total_advance -= slip\n\n    return day\n\nans = solution()"
    ],
    "841da503f5384dbabdbc92f2a781fe22": [
        "def solution():\n    dresses_per_day_per_seamstress = 2\n    number_of_seamstresses = 2\n    days = 9\n\n    total_dresses = dresses_per_day_per_seamstress * number_of_seamstresses * days\n\n    return total_dresses\n\nans = solution()"
    ],
    "fc7f764e9d664c45bf77553a3e6315b8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    A, B = symbols('A B', positive=True, real=True)\n\n    # Write down the equations based on the problem statement\n    # A has 2/3 as much water as B\n    # After pouring, A has 7/8 as much water as B - 4 litres\n    equation1 = Eq(A, (2/3) * B)\n    equation2 = Eq(A + 4, (7/8) * (B - 4))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (A, B))\n\n    # Calculate the total amount of water in both pails\n    total_water = solutions[A] + solutions[B]\n\n    return total_water\n\nans = solution()"
    ],
    "2891d5c6bf714aaaaf484ccacdcf4660": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    equation1 = Eq(table, 2 * chair)\n    equation2 = Eq(2 * table + 3 * chair, 280)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "0442d07405364ff5bc82f86bcabbc881": [
        "def solution():\n    initial_volume = 900  # ml\n    initial_sugar_content = 0.06  # 6%\n\n    # Calculate initial amount of sugar\n    initial_sugar = initial_volume * initial_sugar_content\n\n    # Let x be the amount of sugar to be added\n    # After adding x grams of sugar, the total volume will be 900 + x\n    # and we want the sugar content to be 10% or 0.10\n\n    # Set up the equation for the sugar content after adding x sugar\n    # (initial_sugar + x) / (initial_volume + x) = 0.10\n\n    # Solve for x\n    x = symbols('x')\n    equation = Eq((initial_sugar + x) / (initial_volume + x), 0.10)\n\n    # Solve the equation\n    added_sugar = solve(equation, x)\n\n    return added_sugar[0]\n\nans = solution()"
    ],
    "b18d474df71d462c9b1d16e929a17ca3": [
        "def solution():\n    cost_per_bar = 50\n    bars = 4\n    total_cost = cost_per_bar * bars\n    return total_cost\n\nans = solution()"
    ],
    "957e833104764c96b1f4eea0f026e06f": [
        "def solution():\n    parts_already_made = 20\n    hours_spent = 2\n    total_parts_needed = 100\n    \n    # Calculate the rate of production per hour\n    rate_of_production = parts_already_made / hours_spent\n    \n    # Calculate the number of spare parts left to produce\n    remaining_parts = total_parts_needed - parts_already_made\n    \n    # Calculate the number of additional hours needed to finish the remaining spare parts at the current rate\n    additional_hours_needed = remaining_parts / rate_of_production\n    \n    return additional_hours_needed\n\nans = solution()"
    ],
    "a9df9fef73994fa0adfd6c7233026811": [
        "def solution():\n    # To ensure 3 different coloured balls,\n    # we consider the worst-case scenario:\n    # - Draw all 5 balls of one color (5 red, for instance),\n    # - Draw all 5 balls of another color (5 white).\n    # Next ball drawn has to be of the remaining color (yellow),\n    # ensuring 3 different coloured balls.\n    # So we need to draw 5 red + 5 white + 1 yellow at least.\n    return 5 + 5 + 1\n\nans = solution()"
    ],
    "53629bc84abc46a99608abaf3f651c5c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    grade4, grade5, grade6 = symbols('grade4 grade5 grade6')\n\n    equation1 = Eq(grade5, 4 + 2 * grade4)\n    equation2 = Eq(grade6, 8 + 3 * grade4)\n    equation3 = Eq(grade4 + grade5 + grade6, 720)\n\n    solutions = solve((equation1, equation2, equation3), (grade4, grade5, grade6))\n\n    return solutions[grade6]\n\nans = solution()"
    ],
    "94b2228e40b74d7c81c5e89a014088b7": [
        "def solution():\n    # According to the Pigeonhole Principle, if there are n pigeonholes and if more than n pigeons are placed into them,\n    # then at least one pigeonhole must contain more than one pigeon.\n    \n    # For our problem, each pair of glass ball colors represents a unique pigeonhole.\n    # The number of unique pigeonholes (combinations of 2 colors out of 5) can be calculated using combinations:\n    # C(5, 2) = 5! / (2! * (5 - 2)!)\n\n    # To guarantee that at least two people have the same combination of colors, we add one to the total number of combinations.\n    from math import comb\n    pigeonholes = comb(5, 2)\n    people = pigeonholes + 1\n\n    return people\n\nans = solution()"
    ],
    "cfb59b638eb341b18ad204a7ce303359": [
        "def solution():\n    return 20504 // 8\n\nans = solution()"
    ],
    "d432ce5fae8d408da28df3d9a18e9baf": [
        "def solution():\n    total_cards = 876\n    # Let the number of cards Hisham had be x.\n    # Then Melissa had 2x cards.\n    # Together they had x + 2x = 876 cards.\n    hisham_cards = total_cards // 3\n    melissa_cards = total_cards - hisham_cards\n    # Melissa should give an amount of cards to Hisham such that they end up with the same number\n    # Let's call this number y. Then we should have: melissa_cards - y = hisham_cards + y\n    # Solving for y gives: y = (melissa_cards - hisham_cards) / 2\n    cards_to_give = (melissa_cards - hisham_cards) // 2\n\n    return cards_to_give\n\nans = solution()"
    ],
    "0370e917ba5444c99e91df970a15bb74": [
        "def solution():\n    total_length_cm = 220  # Convert given length to cm\n    each_piece_length = total_length_cm / 2\n    return each_piece_length\n\nans = solution()"
    ],
    "6a23c9856a834221b62e63996c06f972": [
        "def solution():\n    first_term = 5\n    third_term = 19\n    \n    common_difference = (third_term - first_term) / 2\n\n    return int(common_difference)\n\nans = solution()"
    ],
    "028b46b0fbd045fa90a02a752e75494c": [
        "def solution():\n    # There could be three types of numbers when considering divisibility by 4:\n    #   - Numbers that are multiples of 4\n    #   - Numbers that are even but not multiples of 4\n    #   - Numbers that are odd\n    \n    # The worst-case scenario is we pick the maximum number of odd numbers and even-but-not-multiples-of-4 numbers first.\n    # There are 16 odd numbers from 10 to 41 (inclusive)\n    # There are 8 even numbers from 10 to 41 that are not multiples of 4 (12, 16, 20, ..., 40)\n    \n    # So, we can pick all odd numbers (16) and all even-but-not-multiples-of-4 (8) and still not have a product divisible by 4.\n    # The next number we pick must make the product divisible by 4,\n    # which means the next number must be a multiple of 4.\n    \n    # Thus, in the worst case, we need to pick 16 (odd) + 8 (even, but not divisible by 4) + 1 (the next one which must be a multiple of 4)\n    return 16 + 8 + 1\n\n\nans = solution()"
    ],
    "555f0cafaf514767b0fe800156cb0727": [
        "def solution():\n    num_cakes = 195\n    cost_per_cake = 46\n    total_cost = num_cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "4a1f680de9ae4c519ea93c401f8702e6": [
        "def solution():\n    first_part = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.45)\n    second_part = (1 + 0.23 + 0.34 + 0.45) * (0.23 + 0.34)\n    ans = first_part - second_part\n    return ans\n\nans = solution()"
    ],
    "284c25d3574441a78eaf010240003c8c": [
        "def solution():\n    ans = 0\n    for i in range(50, 45, -1):\n        ans += i * (100 - i)\n    return ans\n\nans = solution()"
    ],
    "aa9463208898426a81ae9e66616bff47": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(40 / (x + 5), 5)\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "6c18ef58e8b240a0b1d815b125d4e754": [
        "def solution():\n    return 9 / 0.2\n\nans = solution()"
    ],
    "6196c646546f4ef5bf8c9473472fe841": [
        "def solution():\n    from sympy import primerange, isprime\n\n    # Find the smallest two-digit prime number\n    smallest_two_digit_prime = list(primerange(10, 100))[0]\n\n    # Find the largest two-digit square number by starting from 9^2 and going down\n    for i in range(9, 3, -1):\n        if i**2 < 100:\n            largest_two_digit_square = i**2\n            break\n\n    # Calculate the product\n    ans = smallest_two_digit_prime * largest_two_digit_square\n\n    return ans\n\nans = solution()"
    ],
    "0249d770955143e49182729ffbddfa3d": [
        "def solution():\n    euro_to_dollar_rate = 1 / 0.96\n    coffee_cost_euro = 4.8\n\n    coffee_cost_dollar = coffee_cost_euro * euro_to_dollar_rate\n\n    return coffee_cost_dollar\n\nans = solution()"
    ],
    "7a03810f71064f1b8a00a0c741b7d68e": [
        "def solution():\n    # Brian's age when his father was 41\n    brian_age = 14\n    father_age = 41\n    age_diff = father_age - brian_age\n\n    # Analyze the problem and calculate future age when the ages are reversed again\n    while True:\n        brian_age += 1\n        father_age += 1\n        # Check if the reversed age of Brian equals his father's age\n        if int(str(brian_age)[::-1]) == father_age:\n            return brian_age\n        # Since ages must be two digits, we can set an upper bound of 99 for Brian's age\n        if brian_age > 98:\n            break\n\nans = solution()"
    ],
    "105d3ea760424235a98e71c0d8ca6303": [
        "def solution():\n    max_product = 0\n    for A in range(1, 20):\n        for B in range(1, 20 - A):\n            C = 19 - A - B\n            product = A * B * C\n            if product > max_product:\n                max_product = product\n    return max_product\n\nans = solution()"
    ],
    "6a75c42493d548a6833f83188863c29b": [
        "def solution():\n    from math import lcm\n\n    ans = lcm(12, 56)\n    return ans\n\nans = solution()"
    ],
    "7f0edbf8e5cb484f87961218f9db99d0": [
        "from itertools import permutations\n\ndef solution():\n    max_value = 0\n    \n    for perm in permutations(range(1, 10)):\n        a, b, c, d, e, f, g, h, j = perm\n        N = a + b/c + (d/e)*f - (g + h/j)\n        if N.is_integer():\n            max_value = max(max_value, N)\n    \n    return max_value\n\nans = solution()"
    ],
    "062deceefd35411f997b29c901129f1c": [
        "def solution():\n    return 9650\n\nans = solution()"
    ],
    "51c43a6b56234d0e83f79c035496cdfc": [
        "def solution():\n    total_juniors = 12\n    total_seniors = 8\n    average_juniors = 10\n    average_total = 14\n    \n    total_score = (total_juniors + total_seniors) * average_total\n    juniors_score = total_juniors * average_juniors\n    seniors_score = total_score - juniors_score\n    \n    average_seniors = seniors_score / total_seniors\n    \n    return average_seniors\n\nans = solution()"
    ],
    "0c10d6b8653d43ff821582cda7ac2c32": [
        "def solution():\n    # Four years ago, if the combined age was 10 years\n    combined_past_age = 10\n    # Since four years have passed, we add 4 years for each dog\n    combined_current_age = combined_past_age + 4 * 2  # There are two dogs\n    # To find out the combined age in 2 years, we add 2 years for each dog to the current age\n    combined_future_age = combined_current_age + 2 * 2  # There are two dogs\n\n    return combined_future_age\n\nans = solution()"
    ],
    "7e469a60ae594c1eb1c906000dd9e1b3": [
        "def solution():\n    total_questions = 25\n    points_correct = 4\n    points_incorrect = -2\n    unanswered = 1\n    rex_score = 66\n    \n    # Let's denote the number of correct answers as 'c'\n    # Since Rex answered all but one question, and there are 25 questions, he answered 24 questions\n    # We can set up an equation: \n    # 4 * c - 2 * (24-c) = 66\n\n    # Solve the equation\n    c = (rex_score + 2 * (total_questions - 1 - unanswered)) / (points_correct - points_incorrect)\n    \n    return int(c)\n\nans = solution()"
    ],
    "61ca6c49f97240f88a3d539f152d6ee5": [
        "def solution():\n    containers = 10\n    # At least one apple per container to avoid empty containers\n    minimum_apples = containers - 1\n    # Plus additional apples to ensure at least one container has at least 2 apples\n    additional_apples = 1\n    # Total number of apples\n    total_apples = minimum_apples + additional_apples\n    return total_apples\n\nans = solution()"
    ],
    "020a47d927424600b54866be0f9e7377": [
        "def solution():\n    # Total number of books originally\n    total_books_original = 3900\n    total_books_new = 3900 + 510  # Total number of books after purchasing new ones\n    \n    # Ratios of Chinese, Malay and English books\n    ratio_chinese = 4\n    ratio_malay = 3\n    ratio_english = 6\n    ratio_total = ratio_chinese + ratio_malay + ratio_english\n    \n    # The number of books for each language originally\n    books_chinese_original = (ratio_chinese / ratio_total) * total_books_original\n    books_malay_original = (ratio_malay / ratio_total) * total_books_original\n    books_english_original = (ratio_english / ratio_total) * total_books_original\n    \n    # The number of books for Chinese and Malay after increase\n    books_chinese_new = books_chinese_original * 1.20  # 20% increase\n    books_malay_new = books_malay_original * 1.10      # 10% increase\n    \n    # The number of books for English after purchasing new ones\n    # Since we know the total books after purchase and the updates to Chinese and Malay books,\n    # we can find the new number of English books by subtracting the new total of other books from the new total.\n    books_english_new = total_books_new - books_chinese_new - books_malay_new\n    \n    # Calculating the percentage increase for English books\n    increase_english = books_english_new - books_english_original\n    percentage_increase_english = (increase_english / books_english_original) * 100\n    \n    return percentage_increase_english\n\nans = solution()"
    ],
    "158af0779d9e4980a24fe0fec884683c": [
        "def solution():\n    cookies_made = 160\n    butter_used = 50\n\n    desired_cookies = 300\n\n    butter_needed = (butter_used / cookies_made) * desired_cookies\n\n    return butter_needed\n\nans = solution()"
    ],
    "38dff589122e45f682f4fbac9629ef22": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_questions = 90\n    correct_percentage = 60\n    correct_mark = 5\n    wrong_mark = -2\n    unanswered_mark = 1\n    total_marks = 264\n    \n    correct_questions = (total_questions * correct_percentage) / 100\n    wrong_questions = total_questions - correct_questions\n    unanswered_questions = total_questions - correct_questions\n\n    marks = symbols('marks')\n    equation = Eq(correct_mark * correct_questions + wrong_mark * wrong_questions + unanswered_mark * unanswered_questions, total_marks)\n\n    solutions = solve(equation, marks)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "85cb1cd4dcbe4dca96112c2906555a7c": [
        "def solution():\n    ans = 15.9 * 2\n    return ans\n\nans = solution()"
    ],
    "ad17dd64f37241d8a7ec221ca69a178b": [
        "网络故障，请重试"
    ],
    "33c000792028428a9334d9f3595c547f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    square = symbols('square')\n\n    equation = Eq(3 * square - 2, 19)\n    \n    solution = solve(equation, square)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f4f1fe067a974d22bfe3b0f49a7ee798": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dedra, timm = symbols('dedra timm')\n\n    equation1 = Eq(dedra, 4 * timm)\n    equation2 = Eq(dedra + 72, 2 * (timm + 72))\n\n    solutions = solve((equation1, equation2), (dedra, timm))\n\n    return solutions[dedra]\n\nans = solution()"
    ],
    "748996495b98460c9ede4e3d079565a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jane, jack = symbols('jane jack')\n    \n    equation1 = Eq(jane - jack, 5)\n    equation2 = Eq(jane + jack, 33)\n\n    solutions = solve((equation1, equation2), (jane, jack))\n\n    return solutions[jane]\n\nans = solution()"
    ],
    "390c6b384a7c47feba87ecb9961bf4c4": [
        "def solution():\n    ans = 6.91 - 0.13\n    return ans\n\nans = solution()"
    ],
    "eb93ba1f7aac42b6a7670ab7c76772c4": [
        "def solution():\n    # The goal is to find the unit digit of the 1000th digit number\n    \n    # Initialize the current number to concatenate and the string N\n    current_number = 1\n    N = ''\n    \n    # Continue to append numbers to our string N until its length is 1000\n    while len(N) < 1000:\n        N += str(current_number)\n        current_number += 1\n        \n    # The unit digit of N is the last character of the string N\n    unit_digit = N[999]  # Index 999 because indexing starts from 0\n    \n    return int(unit_digit)\n\nans = solution()"
    ],
    "6c63bbe1764848a7a7edbe24ddc026e9": [
        "def solution():\n    A = 62\n    C = 90\n    E = 68\n    AC = 48\n    AE = 36\n    CE = 50\n    ACE = 25\n\n    # Using the Inclusion-Exclusion Principle\n    ans = A + C + E - AC - AE - CE + ACE\n    return ans\n\nans = solution()"
    ],
    "26973dde1699489cb5a3ca2bb878350e": [
        "def solution():\n    total_people = 23\n    people_behind = 14\n    people_in_front = total_people - people_behind - 1\n    \n    return people_in_front\n\nans = solution()"
    ],
    "6a9590e4dc124affafcabb1bb2c4dbf3": [
        "def solution():\n    result = 257.36 / 0.4\n    return result\n\nans = solution()"
    ],
    "bfaf5aa76fe74c98aade35dd2f53d568": [
        "from math import factorial\n\ndef solution():\n    total_pupils = 18\n    pupils_to_seat = 3\n    \n    ways_to_seat = factorial(total_pupils) / factorial(total_pupils - pupils_to_seat)\n    \n    return int(ways_to_seat)\n\nans = solution()"
    ],
    "9561236e6a034115a599777cf75dad5c": [
        "def solution():\n    ans = 6.31 - 3.2\n    return ans\n\nans = solution()"
    ],
    "9874ade3ca974e3a9cbed1309bdbedc8": [
        "def solution():\n    monthly_salary = 1.4\n    debt = 5.04\n    months_needed = debt / monthly_salary\n\n    return months_needed\n\nans = solution()"
    ],
    "b999190a8cc2489a92311c186296685f": [
        "def solution():\n    veronica = 9\n    jonathan = 3 * veronica\n    rachel = jonathan + 48\n    return rachel\n\nans = solution()"
    ],
    "d60abe09efb64d48bd30a37956fbb0c9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack_age = 4\n    jason_age = symbols('jason_age')\n    bruce_age = jason_age\n    willie_age = jason_age\n    total_age = 19\n\n    equation = Eq(jack_age + jason_age + bruce_age + willie_age, total_age)\n\n    solutions = solve(equation, jason_age)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "1cf4ab67a6aa43e2b4e76978de4840ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    erasers, friends = symbols('erasers friends')\n    \n    # Equation 1: If each friend gets 5 erasers, Andy would have 3 erasers left\n    equation1 = Eq(erasers - 5 * friends, 3)\n    \n    # Equation 2: If each friend gets 6 erasers, Andy would be short of 2 erasers\n    equation2 = Eq(erasers - 6 * friends, -2)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (erasers, friends))\n\n    # Andy's number of erasers is the first element in the tuple of solutions\n    return solutions[erasers]\n\nans = solution()"
    ],
    "6a64f533a5b44e0a81122bb8514d9b21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jake, john = symbols('jake john')\n    \n    # Jake is John's father. The sum of their ages = 44\n    equation1 = Eq(jake + john, 44)\n    # In 14 years, Jake will be twice as old as John\n    equation2 = Eq(jake + 14, 2 * (john + 14))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jake, john))\n    \n    # John's age in 14 years\n    john_age_in_14_years = solutions[john] + 14\n    \n    return john_age_in_14_years\n\nans = solution()"
    ],
    "4d93eb426c534eb2b0fcd1e85de53d1d": [
        "def solution():\n    final_amount = 2360\n    interest_rate = 0.06\n    years = 3\n\n    present_value = final_amount / ((1 + interest_rate) ** years)\n\n    return round(present_value, 2)\n\nans = solution()"
    ],
    "db674de270ac4711b415cc34c37f9aff": [
        "def solution():\n    ans = 2018 - 786\n    return ans\n\nans = solution()"
    ],
    "d1a297dde50e43a99002f159a8a8b64a": [
        "def solution():\n    total = 0\n    for i in range(1, 2008):\n        total += (i**2 + (i+1)**2) / (i * (i+1))\n    return round(total)\n\nans = solution()"
    ],
    "c65b1dcd5d9542dc8301c97e47a9f794": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    youngest = symbols('youngest')\n    \n    # Since there are 9 children at regular intervals of 15 months,\n    # The age difference between the oldest and the youngest is 8 intervals of 15 months.\n    age_difference = 8 * 15\n    \n    # The oldest is now six times as old as the youngest.\n    oldest = 6 * youngest\n    \n    # Equation representing the age difference \n    equation = Eq(oldest - youngest, age_difference)\n    \n    # Solve for the youngest child's age in months\n    youngest_age_in_months = solve(equation, youngest)[0]\n    \n    # Convert months to years\n    youngest_age_in_years = youngest_age_in_months / 12\n    \n    return youngest_age_in_years\n\nans = solution()"
    ],
    "57e7b37a36d64b3ea1c8eaf24798521c": [
        "from itertools import combinations\n\ndef solution():\n    # Variables for the numbers and operations\n    numbers = [15, 5, 5, 15, -6, 7]\n    operations = ['+', '*', '+', '-', '+']\n    \n    # Variables to store the smallest result and associated bracket positions\n    min_result = float('inf')\n    \n    # Try all possible combinations of two pairs of brackets\n    for combs in combinations(range(len(numbers)), 4):\n        # Ensure brackets do not overlap and are logically placed\n        if combs[1] < combs[2]:\n            result = 0\n            expression = ''\n            for i, number in enumerate(numbers):\n                if i in combs:\n                    if i == combs[0] or i == combs[2]:\n                        expression += '('\n                    else:\n                        expression += ')'\n                expression += str(number)\n                if i < len(operations):\n                    expression += operations[i]\n            # Evaluate the expression and update the minimum result\n            try:\n                calculation = eval(expression)\n                if calculation < min_result:\n                    min_result = calculation\n            except:\n                continue  # Skip invalid bracket placements\n    \n    return min_result\n\nans = solution()"
    ],
    "fd0626678d7e40de84c59fc2f0b662e1": [
        "def solution():\n    ans = 2.5 * 7.7 + 0.25 * 23\n    return ans\n\nans = solution()"
    ],
    "342cd5472a69472ab392495beba4ee8b": [
        "def solution():\n    # Cayden has 5 more sweets than Jiaxiang initially.\n    # Let the number of sweets Jiaxiang has be x.\n    # Therefore, the number of sweets Cayden has is x + 5.\n\n    # When Cayden gives Jiaxiang 10 sweets:\n    # Cayden will have (x + 5) - 10 sweets, which is x - 5 sweets.\n    # Jiaxiang will have x + 10 sweets.\n\n    # The difference in number of sweets they will have after the exchange is:\n    # | (x + 10) - (x - 5) |\n    # Simplifying the absolute value we get 15.\n\n    return 15\n\nans = solution()"
    ],
    "1ebf8cccb54b4188b3cdecb0ff9b3e1b": [
        "def solution():\n    ans = 75 * 0.29 + (75 / 100) * 74 - 0.3 / (2/15)\n    return ans\n\nans = solution()"
    ],
    "28b3d4a0798e4f5d952dbe5322188194": [
        "def solution():\n    lower_bound = (50 // 11) + 1\n    upper_bound = 150 // 11\n\n    return upper_bound - lower_bound + 1\n\nans = solution()"
    ],
    "3a0b88faf37e4067b5a697aa6c171c8d": [
        "def solution():\n    # Average score of first 5 pupils = 72%\n    avg_first_5 = 72\n\n    # Total score for the first 5 pupils\n    total_first_5 = avg_first_5 * 5\n\n    # New average with Mary's score included = 75% for 6 pupils\n    new_avg_with_Mary = 75\n\n    # Total score for all 6 pupils\n    total_with_Mary = new_avg_with_Mary * 6\n\n    # Mary's score = total score with Mary - total score without Mary\n    mary_score = total_with_Mary - total_first_5\n\n    return mary_score\n\nans = solution()"
    ],
    "e1cf756e61684775af46c3970f3ab17f": [
        "def solution():\n    train_length = 200  # length of the train in meters\n    bridge_length = 220  # length of the bridge in meters\n    train_speed = 60  # speed of the train in meters per second\n\n    # The total distance to be covered by the train to completely cross the bridge\n    total_distance = train_length + bridge_length\n\n    # Time taken to cross the bridge is total distance divided by train speed\n    time_to_cross = total_distance / train_speed\n\n    return time_to_cross\n\nans = solution()"
    ],
    "2763d0dc70154f8c927352d51849cbe4": [
        "def solution():\n    # Let's consider the original number ABCD\n    # The new number after changing the ones digit to the first digit will be DBCD\n    # According to the problem, DBCD - ABCD = 5877\n    # This simplifies to (D-A) * 1000 + (B-B) * 100 + (C-C) * 10 + (D-D) = 5877\n    # Which further simplifies to (D-A) * 1000 = 5877 because the rest of the terms cancel out\n    # Therefore, D-A = 5 because 5877 has a '5' in the thousands place, and the minimum difference is when D-A = 5\n    # The smallest such scenario would be when A = 0 and D = 5 (our smallest original combination)\n    # Hence, the smallest original number is 0BC5\n\n    # Now we need to find B and C such that DBCD is a valid scenario\n    # Since DBCD = ABCD + 5877, and we know A=0 and D=5, \n    # substituting them gives 5BC5 = 0BC5 + 5877 (the new number has to be valid after substitution)\n\n    # Because ABCD is a 4-digit number, A cannot be zero. Given D = A + 5, A should be at least 1.\n    # Now, let's iterate over possible values of A to find the smallest ABCD\n    for A in range(1, 10):\n        D = A + 5\n        if D > 9:  # D cannot be greater than 9\n            break\n        for B in range(0, 10):\n            for C in range(0, 10):\n                original_number = int(f'{A}{B}{C}{D}')\n                new_number = int(f'{D}{B}{C}{D}')\n                if new_number - original_number == 5877:\n                    return original_number\n    return None\n\nans = solution()"
    ],
    "439376d5d90d4b149b7e06233ef1f948": [
        "def solution():\n    # Start with the greatest 3-digit number\n    for num in range(999, 99, -1):\n        if num % 2 != 0 and num % 9 == 0:\n            tens_digit = (num // 10) % 10\n            if tens_digit % 4 == 0:\n                return num\n\nans = solution()"
    ],
    "176806bd2d38491fb95d4bb561a6bcc2": [
        "def solution():\n    total_cookies = 200\n    morning_cookies = total_cookies * (1/5)\n    remaining_cookies = total_cookies - morning_cookies\n    afternoon_cookies = remaining_cookies * (3/4)\n    \n    return int(afternoon_cookies)\n\nans = solution()"
    ],
    "2610ab8c39aa47039e5d5e3e44e751e3": [
        "def solution():\n    distance = 48\n    speed = 8\n    time_taken = distance / speed\n    return time_taken\n\nans = solution()"
    ],
    "a9f9d09538154b1e94723a8e9651f18f": [
        "def solution():\n    from math import comb\n    # Since each student must get at least one doughnut, we first give one to each.\n    remaining_doughnuts = 11 - 4\n    # It's a problem of partitioning the remaining 7 doughnuts to 4 students, which is equivalent\n    # to placing 3 dividers among the 7 doughnuts. This is a combinations with repetition problem.\n    ans = comb(remaining_doughnuts + 4 - 1, 4 - 1)\n    return ans\n\nans = solution()"
    ],
    "16953792ef8c48809eac37a4caf5d3f5": [
        "def solution():\n    ans = 0.2 * 7\n    return ans\n\nans = solution()"
    ],
    "850576e4f94e42508fc4e975ba331970": [
        "def solution():\n    # Count the worst-case scenario where Jane draws all marbles of the same colour first,\n    # We take the maximum quantity from each colour except the last one, since we want to guarantee\n    # all 4 different colours in the worst case\n    red = 4\n    green = 7\n    blue = 6 \n    # We should not count the orange marbles as we are taking the worst-case scenario\n    \n    # Draw all but one of the red, green, and blue marbles\n    draws = red + green + blue - 3\n    \n    # Guaranteed the next draw (4th color marble), she will have all four colours\n    # So we add one more draw for the guaranteed 4th color marble\n    draws += 1 \n    \n    return draws\n\nans = solution()"
    ],
    "e81257a894bf49f182de3109989a386e": [
        "def solution():\n    midday_temp = 4\n    drop_by_midnight = 11\n    midnight_temp = midday_temp - drop_by_midnight\n    return midnight_temp\n\nans = solution()"
    ],
    "04e3e33129dc4f65bfae11d6c879f614": [
        "def solution():\n    initial_hives = 5\n    initial_honey = 50\n    target_honey = 90\n\n    honey_per_hive = initial_honey / initial_hives\n    additional_hives_needed = (target_honey - initial_honey) / honey_per_hive\n\n    return int(additional_hives_needed)\n\nans = solution()"
    ],
    "e3d851587fc14bcdbe8c7bfda9cd6200": [
        "def solution():\n    # Possible coin values in pence: 5, 10, 20, 50, 100, 200 (since 1 pound is 100 pence)\n    coins = [5, 10, 20, 50, 100, 200]\n    \n    # Five pound note is 500 pence\n    five_pound = 500\n\n    # Find all combinations of five different coins\n    from itertools import combinations\n    for combo in combinations(coins, 5):\n        if sum(combo) < five_pound: # The sum of coins should be less than five pounds\n            spend = five_pound - sum(combo) # Calculate how much was spent\n            return spend\n\nans = solution()"
    ],
    "c5a32fbb6fcb46b48f3e67ce27fcc7b2": [
        "def solution():\n    first_term = 4\n    difference = 3\n    n = 23\n\n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "b7e31907e86c496e848fa4239fbfcc8e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for Ali and Kumar's erasers\n    ali, kumar = symbols('ali kumar')\n\n    # Initial ratio condition\n    equation1 = Eq(ali/kumar, 7/5)\n\n    # Final ratio condition after Ali gives Kumar 10 erasers\n    equation2 = Eq((ali - 10)/(kumar + 10), 1/5)\n\n    # Solve the system of equations to find the number of erasers Ali and Kumar have\n    solutions = solve((equation1, equation2), (ali, kumar))\n    \n    # Ali and Kumar's erasers altogether\n    total_erasers = solutions[ali] + solutions[kumar]\n\n    return total_erasers\n\nans = solution()"
    ],
    "3d7b8c3bc3f54a2dbce551c74529dd16": [
        "网络故障，请重试"
    ],
    "f015194282af429a8af72aaa964f578e": [
        "def solution():\n    import math\n    # Tina's final horizontal displacement: 15 km east - 9 km west = 6 km east\n    horizontal_displacement = 15 - 9\n    # Tina's final vertical displacement: 3 km + 5 km north = 8 km north\n    vertical_displacement = 3 + 5\n    # Shortest distance from A to B is the hypotenuse of the right triangle formed\n    # by horizontal_displacement and vertical_displacement\n    shortest_distance = math.hypot(horizontal_displacement, vertical_displacement)\n    return shortest_distance\n\nans = solution()"
    ],
    "7866c751419b4d9097fee74972b01d9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    banana, pear = symbols('banana pear')\n    equation1 = Eq(1*banana + 3*pear, 84)  # Max's purchase\n    equation2 = Eq(1*banana + 1*pear, 48)  # Emily's purchase\n    \n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "30f09344ca4a4013b33fc28adc31ff05": [
        "def solution():\n    total_minutes = 8 * 60 + 20  # Convert hours to minutes and add 20 minutes\n    activity_and_break = 45 + 20  # Duration of one activity and the following break\n\n    # Subtract 20 because there is no break after the last activity\n    activities = (total_minutes - 20) / activity_and_break\n\n    return int(activities)\n\nans = solution()"
    ],
    "b5e98b7ca17e48e9aceb47ddcd12fb5e": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['0', '3', '5', '8']\n    count = 0\n    for perm in permutations(digits):\n        num_str = ''.join(perm)\n        if num_str[0] != '0' and int(num_str) > 5000:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "69bc4bec9bee483683d61a26cbefa4ac": [
        "def solution():\n    # Let A be the weight of Adam, B be the weight of Ben, and C be the weight of Carl\n    A_plus_B = 102  # Adam and Ben's weight\n    B_plus_C = 97   # Ben and Carl's weight\n    A_plus_C = 92   # Adam and Carl's weight\n\n    # The sum of all three weights mentioned above (counting A, B, C twice each)\n    sum_twice_each = A_plus_B + B_plus_C + A_plus_C\n    \n    # Since A, B, C are counted twice, the total weight is half of the sum_twice_each\n    total_weight = sum_twice_each / 2\n\n    return total_weight\n\nans = solution()"
    ],
    "999d1345ce434bc0b7648892d297c82e": [
        ""
    ],
    "5993b277c13b4ff38cb800c6c4a33a65": [
        "def solution():\n    scores = [16, 15, 16, 10]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "899bd98193b34e558ea4353df664f200": [
        "def solution():\n    number = 123456\n    digits = [int(d) for d in str(number)]\n    alternating_sum = sum(digits[::2]) - sum(digits[1::2])\n    remainder = alternating_sum % 11\n\n    is_divisible = remainder == 0\n    correct_remainder = remainder if remainder else 11\n\n    return is_divisible, correct_remainder\n\nans = solution()"
    ],
    "46cd8c8fc22a4192a04253ceaca842cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # A's work per day and B's work per day\n    work_a, work_b = symbols('work_a work_b')\n\n    # A's efficiency is twice B's\n    efficiency_eq = Eq(work_a, 2 * work_b)\n\n    # A takes 5 days less than B\n    time_eq = Eq(work_a * (work_b * 5 + 5), 1)\n\n    # Solve the equations\n    solutions = solve((efficiency_eq, time_eq), (work_a, work_b))\n\n    # B's time to finish is work's reciprocal\n    time_b = 1 / solutions[work_b]\n\n    return time_b\n\nans = solution()"
    ],
    "2fe30b6237e0498f8b46e088fbbc4301": [
        "def solution():\n    total_bulbs = 40\n    crocus_bulbs = 0.25 * total_bulbs\n    tulip_bulbs = 1/5 * total_bulbs\n    daffodil_bulbs = total_bulbs - crocus_bulbs - tulip_bulbs\n    return int(daffodil_bulbs)\n\nans = solution()"
    ],
    "9f293803776049bca507bf11f748846b": [
        "def solution():\n    start_length_m = 2.06  # start length in meters\n    end_length_m = 0.78  # end length in meters (78 cm converted to meters)\n    melted_length_m = start_length_m - end_length_m  # calculate melted length in meters\n\n    return melted_length_m\n\nans = solution()"
    ],
    "66c27502b84244db8f72fb311fd7f115": [
        "def solution():\n    percentage = 40\n    total_grams = 650\n    ans = (percentage / 100) * total_grams\n    return ans\n\nans = solution()"
    ],
    "ec93c9b0e33b4132b916d18ebb789c94": [
        "def solution():\n    return (3/5) * 35\n\nans = solution()"
    ],
    "ee942986e3444be99926258561b6aba7": [
        "def solution():\n    dividend = 3549\n    divisor = 7\n    ans = dividend // divisor\n    return ans\n\nans = solution()"
    ],
    "b417154f43274315bf9c280cf406e937": [
        "def solution():\n    planes_per_minute = 17 / 12\n    planes_in_36_minutes = planes_per_minute * 36\n    return int(planes_in_36_minutes)\n\nans = solution()"
    ],
    "aa84ae289f2b4586bef8164084d18865": [
        "def solution():\n    ways = [0] * 10  # Create a list to hold the number of ways to climb to each step\n    ways[0] = 1  # Only one way to stay on the ground (step 0)\n    ways[1] = 1  # Only one way to climb to the first step (one step)\n    for i in range(2, 10):\n        ways[i] = ways[i - 1]  # One step from the previous\n        if i >= 4:\n            ways[i] += ways[i - 4]  # Four steps from i-4 to i\n    return ways[9]\n\nans = solution()"
    ],
    "f50bfa91cfc94371b13058e0e79935a3": [
        "def solution():\n    initial_passengers = 35\n    first_stop_get_off = initial_passengers * 2 // 5\n    passengers_after_first_stop = initial_passengers - first_stop_get_off + 7\n    second_stop_get_off = passengers_after_first_stop // 4\n    passengers_after_second_stop = passengers_after_first_stop - second_stop_get_off + 13\n    return passengers_after_second_stop\n\nans = solution()"
    ],
    "96f6824d7c5c43528d8840695801e0fa": [
        "def solution():\n    n = 10 // 0.5  # This is to find the number of terms in the series.\n    sum_of_series = ((n/2)*(n/2 + 1))**2  # This is using the formula for the sum of cubes.\n    return sum_of_series\n\nans = solution()"
    ],
    "2d139d10c0eb4247b231356fa4fdf082": [
        "def solution():\n    # If Mr Jones estimates the price to the nearest £5, the least amount his shopping bill could be\n    # is half-way to the next lower multiple of £5 because anything less than that would be rounded up to £30.\n    estimate = 35\n    rounding = 5\n    half_rounding = rounding / 2\n\n    least_amount = estimate - half_rounding\n    return least_amount\n\nans = solution()"
    ],
    "40a2c5266dff4ef9b884738049f2b326": [
        "def solution():\n    total_current_age = 22\n    total_future_age = 40\n    years_until_total_future_age = total_future_age - total_current_age\n    \n    return years_until_total_future_age\n\nans = solution()"
    ],
    "7f37d7d7b9fc4673a77900f514ce7751": [
        "def solution():\n    count = 0\n    for school1 in range(98, 103):\n        for school2 in range(98, 103):\n            for school3 in range(98, 103):\n                if school1 + school2 + school3 == 300:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "7a500b5489884af9ad95dc1143f1643a": [
        "def solution():\n    num_pencils = 1\n    while True:\n        if (num_pencils % 2 == 1) and (num_pencils % 3 == 2) and \\\n           (num_pencils % 4 == 3) and (num_pencils % 5 == 4):\n            return num_pencils\n        num_pencils += 1\n\nans = solution()"
    ],
    "111b0f86493b40b19e61144527ced67f": [
        "def solution():\n    return (3/7) * 385\n\nans = solution()"
    ],
    "bb41ee852bed4cf5adccccc9b1c77534": [
        "def solution():\n    total_biscuits = 12\n    number_of_sisters = 3\n    biscuits_each = total_biscuits // (number_of_sisters + 1) # +1 for Ewan himself\n    return biscuits_each\n\nans = solution()"
    ],
    "985600d1f0d24b41a9d3607140bd9878": [
        "def solution():\n    # Since the elephant is at the 10th position from the left,\n    # and there are 5 toys between the rabbit and the elephant,\n    # the rabbit is at the (10 - 5 - 1) position from the left \n    # (we subtract 1 because we don't count the elephant's position).\n    rabbit_position_from_left = 10 - 5 - 1\n\n    # The rabbit's position from the right is then:\n    # Total number of toys - rabbit's position from the left + 1\n    rabbit_position_from_right = 40 - rabbit_position_from_left\n    \n    return rabbit_position_from_right\n\nans = solution()"
    ],
    "ff86d855c39d4764a5ffb262848abdd0": [
        "def solution():\n    # Let the rate of work done by Nancy be 1/6 (since she can complete the book in 6 days)\n    # Let the rate of work done by Tim be 1/t (where t is the time taken by Tim to complete the book alone)\n    # Working together, their combined rate of work is 1/4 (since they can complete the book in 4 days)\n    \n    # The combined work rate is the sum of the individual work rates\n    # 1/6 + 1/t = 1/4\n    \n    # Solving for t using algebra\n    t = symbols('t')\n    equation = Eq(1/6 + 1/t, 1/4)\n    tim_days = solve(equation, t)\n\n    return tim_days[0]\n\nans = solution()"
    ],
    "f3c6461dee114615a71a938306942695": [
        "def solution():\n    numbers = [8, 14, 6, 9, 13, 12]\n    mean_value = 12\n    total_numbers = len(numbers) + 1  # Including 'a'\n    total_sum = mean_value * total_numbers\n    sum_of_known_numbers = sum(numbers)\n    a = total_sum - sum_of_known_numbers\n    return a\n\nans = solution()"
    ],
    "c9a78261a27b44b1bdd0c3d2ee5a8794": [
        "def solution():\n    # convert all lengths to metres\n    pink_length = 2.5  # already in metres\n    blue_length = 220 / 100.0  # convert centimetres to metres\n    orange_length = 30.5 / 100.0  # convert centimetres to metres\n    \n    # find the longest ribbon\n    longest_ribbon = \"pink\" if (pink_length > blue_length and pink_length > orange_length) else (\"blue\" if blue_length > orange_length else \"orange\")\n\n    return longest_ribbon\n\nans = solution()"
    ],
    "c694691621a9431ea4bca6bc4ce553d4": [
        "def solution():\n    total_mass = 172000  # convert kg to g\n\n    # Given ratio of packets P:Q:R = 7:3:2\n    # Let the common multiplier for the ratio be x\n    # Therefore, we have 7x packets of P, 3x packets of Q, 2x packets of R\n    # Total mass of packets is:\n    # (7x * 300g) + (3x * 400g) + (2x * 500g) = 172000g\n\n    # Equation: 2100x + 1200x + 1000x = 172000\n    # Simplify equation by dividing by 100: 21x + 12x + 10x = 1720\n    # Combine like terms: 43x = 1720\n    x = 172000 / 4300  # Solve for x\n\n    # Find total number of packets for each ingredient\n    packets_of_P = 7 * x\n    packets_of_Q = 3 * x\n    packets_of_R = 2 * x\n\n    # Find total packets used altogether\n    packets_used = packets_of_P + packets_of_Q + packets_of_R\n\n    return int(packets_used)\n\nans = solution()"
    ],
    "dab2cf7eb1d44c0eba4e7832b4ff92e8": [
        "def solution():\n    # Summing up the time for each activity\n    time_for_preparing = 10\n    time_for_baking = 15\n    time_for_washing = 5\n    time_for_eating = 15\n\n    total_time = time_for_preparing + time_for_baking + time_for_washing + time_for_eating\n\n    return total_time\n\nans = solution()"
    ],
    "e78f15baf14349d3a74406de623335fc": [
        "def solution():\n    from math import lcm\n\n    # Define the time periods for the first two traffic lights in seconds\n    light1_time = 60  # 1 minute = 60 seconds\n    light2_time = 90  # 1.5 minutes = 90 seconds\n\n    # Calculate the least common multiple for the first two lights\n    lcm_first_two = lcm(light1_time, light2_time)\n\n    # Since the first two turn green together every 9 minutes (540 seconds)\n    # we find the smallest time for the third light that is at least 30 seconds or longer,\n    # which when combined with lcm of first two, gives us a cycle time of 540 seconds\n    light3_time = lcm_first_two\n    while light3_time < 540:\n        if 540 % light3_time == 0 and light3_time >= 30:\n            break\n        light3_time += 1\n\n    return light3_time\n\nans = solution()"
    ],
    "4c802ea687a8492b9acb91c335e6d58b": [
        "def solution():\n    sale_price = 75\n    discount_rate = 0.50\n    original_price = sale_price / (1 - discount_rate)\n    return original_price\n\nans = solution()"
    ],
    "758c762d7161444799a78a19de32398f": [
        "def solution():\n    red_cars = 3\n    blue_cars = 12\n    green_cars = 15\n    red_capacity = 10 * red_cars\n    blue_capacity = 15 * blue_cars\n    green_capacity = 20 * green_cars\n\n    total_capacity = red_capacity + blue_capacity + green_capacity\n    total_cars = red_cars + blue_cars + green_cars\n\n    average_capacity = total_capacity / total_cars\n\n    return average_capacity\n\nans = solution()"
    ],
    "3ac7118d01c14ab5a18f0c5846d9e605": [
        "def solution():\n    # Rachel's speed is 84 km/h\n    rachel_speed = 84\n    # Rachel travels for 1.5 hours more than Eleanor\n    additional_time = 1.5\n    # Rachel is 39 km away from city F after Eleanor reached city G\n    distance_to_f = 39\n    # Eleanor takes 4 hours to travel from city F to city G\n    eleanor_time = 4\n    \n    # Calculate the distance Rachel travelled\n    rachel_distance = rachel_speed * (eleanor_time + additional_time)\n    \n    # The distance between the two cities is the distance Rachel travelled minus the 39 km she still had to travel\n    distance_between_cities = rachel_distance - distance_to_f\n    \n    return distance_between_cities\n\nans = solution()"
    ],
    "c4b23a034eb54649b787eefdf2846d0a": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 4):  # 3 is the right operand in 4⊙3, so there are 3 terms\n        number_str = str(4) * i  # Create the string '4' repeated i times\n        total_sum += int(number_str)  # Convert string to int and add to total sum\n    return total_sum\n\nans = solution()"
    ],
    "75592f9b267643f6ad1600fe6fa8b090": [
        "def solution():\n    total_students = 25\n    boys = 5\n\n    percent_boys = (boys / total_students) * 100\n\n    return percent_boys\n\nans = solution()"
    ],
    "c6530b57d5304a398df4e406019afc9f": [
        "def solution():\n    canadian_dollars = 64\n    exchange_rate = 1.25  # 1 US dollar = 1.25 Canadian dollars\n    us_dollars = canadian_dollars / exchange_rate\n    return us_dollars\n\nans = solution()"
    ],
    "1f5b327371834bc891e8992a355a3c02": [
        "def solution():\n    shelves_from_front = 8\n    shelves_from_back = 10\n    total_shelves = shelves_from_front + shelves_from_back - 1\n    return total_shelves\n\nans = solution()"
    ],
    "4b26a9102a274ba0b8e309640745063b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Assume the length of rope B is b, then we have:\n    # Rope A = 3 * b\n    # Rope C = b + 56\n    # Rope A = Rope C + 130\n    # We can set up the following equations based on the above conditions:\n    \n    b = symbols('b')\n    \n    equation1 = Eq(3 * b, b + 56 + 130)\n    \n    # Solve the equation for b\n    solution = solve(equation1, b)[0]\n\n    # Calculate Rope A, B, and C\n    rope_b = solution\n    rope_a = 3 * rope_b\n    rope_c = rope_b + 56\n\n    # Calculate the total length in cm\n    total_length = rope_a + rope_b + rope_c\n\n    return total_length\n\nans = solution()"
    ],
    "8af91674f16f411fb99260d559566771": [
        "def solution():\n    numbers = [4, 11, 8, 2, 7, 13]\n    largest_number = max(numbers)\n    smallest_number = min(numbers)\n    result = (2 * largest_number) - (3 * smallest_number)\n    return result\n\nans = solution()"
    ],
    "ce900c6f009e458cad1bdac095599872": [
        "def solution():\n    ans = 4.6 - 3.55\n    return ans\n\nans = solution()"
    ],
    "eb710dc184384ed3b2e9731301601159": [
        "def solution():\n    # Since there are five students wanting an average of 90 points,\n    # the total number of points they need to accumulate is 5 * 90.\n    total_points_required = 5 * 90\n\n    # The scores are distinct whole numbers, so we sort them in ascending order.\n    # We start by assigning the lowest possible scores to the first four students\n    # and give the last student the remaining points. We then increase the lowest score\n    # and adjust the others accordingly until they no longer hold distinct values.\n    for lowest_score in range(1, 100):\n        second_lowest_score = lowest_score + 1\n        third_lowest_score = second_lowest_score + 1\n        fourth_lowest_score = third_lowest_score + 1\n\n        # Calculate the score of the fifth student\n        fifth_score = total_points_required - (lowest_score + second_lowest_score + third_lowest_score + fourth_lowest_score)\n        \n        # Ensure the fifth score is less than or equal to 100, greater than the fourth lowest score,\n        # and that all scores are distinct whole numbers.\n        if fifth_score <= 100 and fifth_score > fourth_lowest_score:\n            ans = lowest_score\n            break\n\n    return ans\n\nans = solution()"
    ],
    "07ed7dd4a7c04b8aaf4b1c03f590920c": [
        "from math import factorial\n\ndef solution():\n    total_letters = 5\n    string_length = 3\n\n    # Calculate total possibilities for 3-letter strings from 5 different letters\n    total_ways = factorial(total_letters) / factorial(total_letters - string_length)\n\n    # Calculate possibilities for 3-letter strings containing A and B\n    # The remaining letter can be any of the 3 remaining letters\n    remaining_letters = total_letters - 2  # Exclude A and B\n    ways_with_A_and_B = factorial(remaining_letters)\n\n    # Calculate the probability\n    probability = ways_with_A_and_B / total_ways\n\n    return probability\n\nans = solution()"
    ],
    "4287149f96d446cfa12f1fd21889e61b": [
        "def solution():\n    total_male = 50\n    total_female = 70\n    student_male = total_male * (16 / 100)\n    student_female = total_female * (10 / 100)\n    total_students = student_male + student_female\n    total_members = total_male + total_female\n    percentage_students = (total_students / total_members) * 100\n    return percentage_students\n\nans = solution()"
    ],
    "3c6c375d11374de1b3101dfbfc2c9524": [
        "def solution():\n    x = 3 * 48 / 4\n    return x\n\nans = solution()"
    ],
    "5c67d22d929c48579cb3027189617400": [
        "def solution():\n    return 1212 // 6\n\nans = solution()"
    ],
    "b2b5b4f81d8448afaba3be6d10769542": [
        "def solution():\n    total_volume = 200 + 300\n    fruit_juice_first = 200 * 0.35\n    fruit_juice_second = 300 * 0.50\n    total_fruit_juice = fruit_juice_first + fruit_juice_second\n    concentration = (total_fruit_juice / total_volume) * 100\n    return concentration\n\nans = solution()"
    ],
    "c18565e80cc44b0cb72b59076a383b6d": [
        "def solution():\n    amy = 37\n    john = 15\n\n    # Let x be the number of apples Amy gives to John\n    # After giving x apples, Amy will have (amy - x) apples and John will have (john + x) apples\n    # We want Amy to have 4 more apples than John, so: amy - x = john + x + 4\n    \n    # Solving for x, we get:\n    # amy - john - 4 = 2x\n    # (amy - john - 4) / 2 = x\n    x = (amy - john - 4) / 2\n\n    return x\n\nans = solution()"
    ],
    "ff63e777962f41f4899b17ad9e14deeb": [
        "def solution():\n    first_term = 1\n    last_term = 159\n    difference = 2\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_sequence = num_terms * (first_term + last_term) // 2\n    return sum_sequence\n\nans = solution()"
    ],
    "ae4e6b1dfa8a49a5b3241156334f3bed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    betty, veron, eliza = symbols('betty veron eliza')\n\n    equation1 = Eq(eliza, 2 * veron)\n    equation2 = Eq(betty, eliza - 185)\n    equation3 = Eq(betty + veron + eliza, 855)\n\n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n\n    return solutions[betty]\n\nans = solution()"
    ],
    "622956fd3ac44f62a123456124a4a8b9": [
        "def solution():\n    markers_left = 32 - 7\n    bags = markers_left // 5\n\n    return bags\n\nans = solution()"
    ],
    "bc597e322c194058a175f92bfbfd92e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    papers = symbols('papers')\n    # The teacher has 4 hours left and needs to mark 6 more papers per hour,\n    # which means there are 4 * 6 papers left.\n    equation1 = Eq(papers / 5 + 4 * 6, papers)\n    # If the teacher marks 10 more papers per hour, she can finish in 4 hours.\n    equation2 = Eq(papers / (5 - 1), papers / 5 + 10)\n    \n    total_papers = solve((equation1, equation2), (papers))\n    \n    return total_papers[papers]\n\nans = solution()"
    ],
    "70deaa04761b4956a63e868e9ffc6d99": [
        "from fractions import Fraction\n\ndef solution():\n    chicken_pies = 40\n    vegetable_pies = 20\n    fruit_pies = 30\n\n    # (1) Fraction of the chicken pies more than vegetable pies\n    more_chicken_than_vegetable = chicken_pies - vegetable_pies\n    fraction_more_chicken = Fraction(more_chicken_than_vegetable, chicken_pies)\n    \n    # (2) Fraction of the vegetable pies less than fruit pies\n    less_vegetable_than_fruit = fruit_pies - vegetable_pies\n    fraction_less_vegetable = Fraction(less_vegetable_than_fruit, fruit_pies)\n\n    return (fraction_more_chicken, fraction_less_vegetable)\n\nans = solution()"
    ],
    "939e258bc3ae4686add9892e1a88d211": [
        "def solution():\n    for a in range(1, 10):  # a is the tens digit and cannot be zero\n        for b in range(10):  # b is the ones digit\n            ab = a * 10 + b  # Construct the 2-digit number ab\n            ba = b * 10 + a  # Construct the 2-digit number ba\n\n            if 8 * ab == 3 * ba:  # Check the given condition\n                return ab  # Return the 2-digit number ab if the condition is met\n\nans = solution()"
    ],
    "dd320540af104d229ba61a14357af45a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let j be the cost of one jug and c be the cost of one cup\n    j, c = symbols('j c')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(4 * j + 5 * c, 85)  # 4 jugs and 5 cups cost £85\n    equation2 = Eq(2 * j + 2 * c, 40)  # 2 jugs and 2 cups cost £40\n\n    # Solve the system of equations for j and c\n    solutions = solve((equation1, equation2), (j, c))\n\n    return solutions[c]\n\nans = solution()"
    ],
    "b75379f387c44ded9da89ecef088d85d": [
        "def solution():\n    bill = 55\n    tip_percentage = 0.20\n    tax_percentage = 0.10\n\n    tip = bill * tip_percentage\n    tax = bill * tax_percentage\n    \n    total_cost = bill + tip + tax\n    \n    return total_cost\n\nans = solution()"
    ],
    "52eea861c20540a8873541169102d6b1": [
        "def solution():\n    greatest_1_digit_even = 8\n    smallest_2_digit_odd = 11\n\n    sum_of_numbers = greatest_1_digit_even + smallest_2_digit_odd\n\n    return sum_of_numbers\n\nans = solution()"
    ],
    "85d27affc1b445c88f9b4a5e100c1bd9": [
        "def solution():\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n    \n    sum_of_all_digits = sum(sum_of_digits(page) for page in range(1, 208))\n    \n    return sum_of_all_digits\n\nans = solution()"
    ],
    "433eb146729b4478bbfd89939dc13d1d": [
        "def solution():\n    designs_made = 24\n    fraction_completed = 3/4\n    total_designs = designs_made / fraction_completed\n\n    return int(total_designs)\n\nans = solution()"
    ],
    "9d40cceb3a7043b58f824a777d1db3e8": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 4:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "9b15cde54f244f2688f75ecf97188c89": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b9a7c7092370400a8a6b8c58ae2510c9": [
        "def solution():\n    return 5.4 + 3.7\n\nans = solution()"
    ],
    "8a063eb7bf3f4613bbd55a6c63048295": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Constants\n    g = 9.81  # acceleration due to gravity in m/s^2\n    h_initial = 3000  # initial altitude in meters\n    h_final = 2000  # final altitude in meters\n\n    # Symbols\n    v_initial = symbols('v_initial')  # initial velocity, which we'll take as 0 m/s\n    v_final = symbols('v_final')  # final velocity in m/s\n\n    # Using the kinematic equation: v_final^2 = v_initial^2 + 2*g*(h_final - h_initial)\n    equation = Eq(v_final**2, v_initial**2 + 2*g*(h_final - h_initial))\n\n    # Solving the equation for final velocity (v_final)\n    solutions = solve(equation, v_final)\n\n    # Since the skydiver is falling, we're interested in the negative root\n    ans = max(solutions)  # Taking the max because solve returns a list of solutions\n\n    return ans\n\nans = solution()"
    ],
    "bacdd0107009480e90e10957f1ab6f1c": [
        "def solution():\n    consecutive_needed = 4\n    numbers_in_a_suit = 13\n    possible_consecutive_sets = numbers_in_a_suit - consecutive_needed + 1\n    suits = 4\n\n    cards_to_draw = (possible_consecutive_sets - 1) * suits + consecutive_needed\n    \n    return cards_to_draw\n\nans = solution()"
    ],
    "0e7224d495f743d994a3285524f8f2a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    total_money, cost_cap, cost_wristband = symbols('total_money cost_cap cost_wristband')\n\n    # Equations based on the problem statement\n    equation1 = Eq(cost_cap, 3 * cost_wristband)\n    equation2 = Eq((2/5) * total_money, 4 * cost_cap + 6 * cost_wristband)\n\n    # Solve for cost of one cap and total money\n    solutions = solve((equation1, equation2), (cost_cap, total_money))\n    \n    # Calculate money spent on the first purchase\n    money_spent = 4 * solutions[cost_cap] + 6 * solutions[cost_wristband]\n    \n    # Calculate remaining money\n    remaining_money = total_money - money_spent\n\n    # Money used to buy more caps\n    money_for_more_caps = (1/3) * remaining_money\n\n    # Number of more caps bought\n    more_caps = money_for_more_caps / solutions[cost_cap]\n\n    # Total number of caps Caleb bought altogether\n    total_caps = 4 + more_caps\n\n    return int(total_caps)\n\nans = solution()"
    ],
    "aa716df8b445405ab6cdebdb3ae4adf9": [
        "def solution():\n    ashley_age = 10\n    brother_age_three_years_ago = ashley_age - 3 - 2\n    brother_current_age = brother_age_three_years_ago + 3\n    return brother_current_age\n\nans = solution()"
    ],
    "9c2c49e5d3134ddeb8fb6b3c0c42f5cd": [
        "def solution():\n    count = 1\n    page_number = 1\n    while count < 89:\n        page_number += 1\n        if page_number % 3 != 0:\n            count += 1\n    return page_number\n\nans = solution()"
    ],
    "5cb5ef0814c74ded81cb8b6ce6f1bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3*x - (2*x + 3), 5)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "8a66caf6aaba494f95bca104943cb7c4": [
        "def solution():\n    return 459 + 3762\n\nans = solution()"
    ],
    "0bced7bb4af84506acecdc385274abfd": [
        "def solution():\n    count_3 = 600 // 3\n    count_5 = 600 // 5\n    count_15 = 600 // (3*5)\n\n    return count_3 + count_5 - count_15\n\nans = solution()"
    ],
    "f8495fe245f34edeb912b66b7ea8ce5c": [
        "def solution():\n    ans = 123 + 468\n    return ans\n\nans = solution()"
    ],
    "6e9234dea3b64376a232e45d14effce4": [
        "def solution():\n    # Total tickets sold\n    total_tickets = 19\n    # Total money collected\n    total_money = 75\n\n    # Price per adult ticket\n    price_adult = 5\n    # Price per child ticket\n    price_child = 3\n\n    # Loop through the number of adult tickets from 0 to total_tickets\n    for adult_tickets in range(total_tickets + 1):\n        # Calculate the number of child tickets by subtracting adult tickets from total\n        child_tickets = total_tickets - adult_tickets\n        # Calculate the total money from the current number of adult & child tickets\n        current_money = (adult_tickets * price_adult) + (child_tickets * price_child)\n        # If the current money matches the total money, we have the answer\n        if current_money == total_money:\n            ans = adult_tickets\n            return ans\n\n# Call the function to get the answer\nans = solution()"
    ],
    "66edf568e9a74a2aa97d9e92b05d94e2": [
        "def solution():\n    tom_age_now = 10\n    tom_age_future = 20\n    grandma_age_future = 60\n    age_difference = grandma_age_future - tom_age_future\n\n    grandma_age_now = tom_age_now + age_difference\n\n    return grandma_age_now\n\nans = solution()"
    ],
    "9bfff3c25a624f939fbe758d02cada7b": [
        "def solution():\n    ten_pences = 5\n    twenty_pences = 3\n    fifty_pences = 1\n    target = 70\n    ways = 0\n\n    for ten in range(ten_pences + 1):\n        for twenty in range(twenty_pences + 1):\n            for fifty in range(fifty_pences + 1):\n                if ten * 10 + twenty * 20 + fifty * 50 == target:\n                    ways += 1\n\n    return ways\n\nans = solution()"
    ],
    "a43767a35548410b91388a97d31bf269": [
        "from itertools import permutations\n\ndef solution():\n    # Since A=3, C=1, G=7, we only need to permute the remaining digits\n    remaining_digits = '0245689'\n    \n    # Store the result\n    result = []\n\n    # Iterate over all permutations of the remaining digits\n    for perm in permutations(remaining_digits):\n        P = perm\n        \n        # Insert the known digits A, C, and G into the permutation\n        P = P[:1] + ('3',) + P[1:2] + ('1',) + P[2:5] + ('7',) + P[5:]\n        \n        # Convert the tuple of characters to a string\n        number_str = ''.join(P)\n        \n        # Convert the string to an integer\n        number = int(number_str)\n        \n        # Check the divisibility rules for the number (2 to 9)\n        divisible = True\n        for i in range(2, 10):\n            prefix = int(number_str[:i])\n            if prefix % i != 0:\n                divisible = False\n                break\n        \n        # If divisible, assign result\n        if divisible:\n            for i, digit in enumerate(P):\n                if i == 1: B = digit\n                elif i == 2: D = digit\n                elif i == 4: E = digit\n                elif i == 5: F = digit\n                elif i == 7: H = digit\n                elif i == 8: I = digit\n                elif i == 9: J = digit\n            result = [A, B, C, D, E, F, G, H, I, J]\n            break\n\n    # Return the answer\n    return result\n\n# Define the given digits\nA = '3'\nC = '1'\nG = '7'\n\n# Call the solution function and derive answer\nans = solution()"
    ],
    "ecaddfdc1ad84d24a6e9ae0e8904ebc2": [
        "def solution():\n    # Use the Pigeonhole Principle to determine the worst case scenario\n    # There are 3 red and 3 green stickers\n    # To ensure we have 2 stickers of the same color, in the worst case scenario,\n    # We may pick 1 red then 1 green, continue this pattern until we have to pick a sticker of the same color\n    # 1 red, 1 green, 1 red, then we take another one, which has to be the same color as one we already have\n    # R G R and the next one we pick must either be R or G, giving us two of the same color\n    num_stickers = 4\n\n    return num_stickers\n\nans = solution()"
    ],
    "94bb6ae56dbd4a98a0fbeaa59c7d8691": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of students in class B\n    # Then 2x is the number of students in class A\n    # Let c be the total number of candies Jenny has\n    x, c = symbols('x c')\n\n    # Equation for class A: 4 * (2x) + 20 = c\n    equation1 = Eq(4 * (2 * x) + 20, c)\n\n    # Equation for class B: 6 * x = c - 16\n    equation2 = Eq(6 * x, c - 16)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (x, c))\n\n    return solutions[c]\n\nans = solution()"
    ],
    "24f3b610c11745edb5ef8e3bb5e6b77b": [
        "def solution():\n    # At worst, she could take out all blue balls (5) and still not meet the condition,\n    # then she could take out all orange balls (4), still not meeting the condition.\n    # At this point, no matter what ball she takes out next, she will have 4 of some color.\n    # So she needs to take out all blue and orange balls plus one more ball.\n    num_balls = 5 + 4 + 1\n\n    return num_balls\n\nans = solution()"
    ],
    "9435fd70b9e341539b05792950bee0ca": [
        "def solution():\n    duck_legs = 4 * 2  # Each duckling has 2 legs\n    geese_legs = 2 * 2  # Each baby goose has 2 legs\n    total_legs = 36\n    lamb_legs = 4  # Each lamb has 4 legs\n\n    legs_without_lambs = duck_legs + geese_legs\n    lamb_count = (total_legs - legs_without_lambs) / lamb_legs\n\n    return int(lamb_count)\n\nans = solution()"
    ],
    "dd8d8a23d4864feb861a8645d06813fa": [
        "def solution():\n    num_teams = 5\n    matches = (num_teams * (num_teams - 1)) // 2\n    return matches\n\nans = solution()"
    ],
    "9882354a7f8745e7818f5641ce7c7354": [
        "def solution():\n    return 8.7 * 3.4\n\nans = solution()"
    ],
    "7f4c057f9edc486381868b2cb62f8eb3": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['3', '1', '9', '2']\n    perm_digits = [''.join(p) for p in permutations(digits)]\n    max_num = max(perm_digits)\n    min_num = min(perm_digits)\n    \n    return int(max_num) - int(min_num)\n\nans = solution()"
    ],
    "5395374ab911412c892a95bcb1538a6c": [
        "def solution():\n    # Count number of fruit boxes in each of the top three layers\n    # 1st layer (top) will have 1^2 = 1 box\n    # 2nd layer will have 2^2 = 4 boxes\n    # 3rd layer will have 3^2 = 9 boxes\n    # The total number of boxes is the sum of the boxes in each of the three layers\n    ans = 1**2 + 2**2 + 3**2\n    return ans\n\nans = solution()"
    ],
    "6c31ab9c5c724ce1b5dd8e18d56c817d": [
        "def solution():\n    total_cost = 2.35 + 0.78 + 0.65\n    change = 5 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "0dbb0cc68b7945019907f84cebf4487e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(boys, 3 * girls)\n    equation2 = Eq(2 * boys + 4 * girls, 570)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "a53c706f0348463594c82aefd860177b": [
        "def solution():\n    sum_123 = 1.2 + 1.23 + 1\n    product1 = sum_123 * sum_123\n    product2 = sum_123 * (1.2 + 1.23)\n    ans = product1 - product2\n    return ans\n\nans = solution()"
    ],
    "ffae2b155c6e4e12a0dd3224c209353d": [
        "def solution():\n    count = 0\n    for i in range(100, 200):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "53c10c1a3da34ac99c165981e9123c15": [
        "def solution():\n    average_smiles_per_day = 47\n    days_in_january = 31\n\n    total_smiles_in_january = average_smiles_per_day * days_in_january\n\n    return total_smiles_in_january\n\nans = solution()"
    ],
    "765a3cf2104c412c90dfa3e660a67e11": [
        "import math\n\ndef solution():\n    num_students = 40\n    side_length = math.isqrt(num_students)\n    return side_length\n\nans = solution()"
    ],
    "dfc1f111c9384999a8ce3a20bc2cffc5": [
        "def solution():\n    # Calculate the number of 'good' copies for each photocopier\n    good_copies_A = (3/5) * 600\n    good_copies_B = (2/5) * 600\n    \n    # Calculate the number of 'bad' copies for each photocopier\n    # Photocopier A has 1 bad copy for every 4 good ones, so for x good copies there are x/4 bad copies\n    # Photocopier B has 1 bad copy for every 5 good ones, so for y good copies there are y/5 bad copies\n    bad_copies_A = good_copies_A / 4\n    bad_copies_B = good_copies_B / 5\n    \n    # Calculate the total number of copies including the 'bad' ones for each photocopier\n    total_copies_A = good_copies_A + bad_copies_A\n    total_copies_B = good_copies_B + bad_copies_B\n    \n    # Calculate the total number of copies needed\n    total_copies_needed = total_copies_A + total_copies_B\n    \n    return int(total_copies_needed)\n\nans = solution()"
    ],
    "8ce469dd3f78455bbe361dfbac65ec35": [
        "def solution():\n    initial_height = 10\n    bounce_height = initial_height / 2\n    total_distance = initial_height + 2 * bounce_height\n    return total_distance\n\nans = solution()"
    ],
    "b7345c517ee645059ca6864ac5589ef4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the son's working rate as son_rate\n    # and the farmer's working rate as farmer_rate\n    son_rate, farmer_rate = symbols('son_rate farmer_rate')\n\n    # If the farmer needs 24 hours to finish the work alone, his rate of work is 1/24\n    # If the farmer and his son can finish the work in 16 hours when working together, their combined rate is 1/16\n    # The son worked for 6 hours when working together with his father, which is 6 * son_rate amount of work\n\n    # Create the equations based on the problem statements\n    equation1 = Eq(farmer_rate, 1/24)                          # Farmer's work rate\n    equation2 = Eq(farmer_rate + son_rate, 1/16)               # Combined work rate\n    equation3 = Eq(6 * son_rate, 1/16 - 6/24)                  # Son's work contribution\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (son_rate, farmer_rate))\n\n    # The time taken for son to complete the work alone is the reciprocal of son_rate\n    son_time = 1 / solutions[son_rate]\n\n    return son_time\n\nans = solution()"
    ],
    "5d35989e2b284f488fb943b1ec405028": [
        "def solution():\n    total_rolls = 30\n    probability_of_getting_5 = 1 / 6  # As there are 6 faces on the dice\n\n    expected_number_of_times = total_rolls * probability_of_getting_5\n\n    return expected_number_of_times\n\nans = solution()"
    ],
    "2b60051b00824874b4fa3beaf2110c81": [
        "def solution():\n    ans = 999 - (999 % 36)\n    return ans\n\nans = solution()"
    ],
    "61c631f4351c4f37b2e5a67ac813bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dorothy, timmy, kevin = symbols('dorothy timmy kevin')\n\n    equation1 = Eq(dorothy, 9 * timmy - 3)\n    equation2 = Eq(dorothy, 96)\n    equation3 = Eq(kevin, timmy + 45)\n\n    solutions = solve((equation1, equation2, equation3), (dorothy, timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "0fca214bb995431dbbfd8125bbcbb3a8": [
        "网络故障，请重试"
    ],
    "98777c411fcc4cb6af9079ff424408ba": [
        "def solution():\n    return 10\n\nans = solution()"
    ],
    "5cbbe117fdc24fd7b9a7955d77adea5e": [
        "def solution():\n    divisor = 4\n    quotient = 9\n    remainder = 2\n\n    incorrect_method = quotient * remainder + divisor\n    correct_product = quotient * divisor + remainder\n\n    return incorrect_method == correct_product, correct_product\n\nans = solution()"
    ],
    "3a2ed089aaaf41639e7c8cf3a2c8a734": [
        "from math import factorial\n\ndef solution():\n    total_children = 5  # Total number of children\n    # Total permutations without restrictions is 5!\n    total_permutations = factorial(total_children)\n    \n    # We calculate the permutations where Hugh is between Louise and Richard\n    # Consider Louise, Hugh, and Richard as a single block. This block and the \n    # other two children can be arranged in 3! ways. Within this block, LHR can\n    # be arranged in 2! ways since Hugh can't be between Louise and Richard.\n    # There are no restrictions on the other two children, so they can be freely\n    # arranged within themselves, which gives another 2! ways.\n    # Finally, there are 3P2 ways to choose positions for Louise and Richard \n    # in the block, because Hugh cannot be between them.\n    permutations_lhr = 2 * factorial(3) * factorial(2)\n    \n    # Subtract the permutations where Hugh is between Louise and Richard\n    # from the total permutations to get the valid configurations\n    valid_permutations = total_permutations - permutations_lhr\n    \n    return valid_permutations\n\nans = solution()"
    ],
    "87ae32b6102741f1b5918d4117319755": [
        "def solution():\n    total = sum((-1)**(i+1) * (40 - 2*i) for i in range(20))\n    return total\n\nans = solution()"
    ],
    "ce53d4f8e44943daa525defbe2c3fe07": [
        "def solution():\n    # identify the total number of matches by adding up the fractions and the losses\n    total_matches = (2/5 + 7/20 + 10)\n\n    # the denominator of the fraction representing wins is 5, and for draws, it is 20.\n    # the least common multiple of 5 and 20 is 20, which indicates total_matches is out of 20 games\n    # hence we multiply the total_matches by 20/20 to find the actual number of matches\n    actual_matches = total_matches * 20 / 20\n\n    # calculate the number of wins and draws based on actual_matches\n    wins = (2/5) * actual_matches\n    draws = (7/20) * actual_matches\n\n    # points from wins and draws\n    points_won = 3 * wins\n    points_drawn = 1 * draws\n\n    # total points is the sum of points won and points drawn\n    total_points = points_won + points_drawn\n\n    return int(total_points)\n\nans = solution()"
    ],
    "b7a661c038da48b0a38328c3af3f8724": [
        "def solution():\n    sophie_tshirts = 13\n    sister_tshirts = sophie_tshirts - 5\n    return sister_tshirts\n\nans = solution()"
    ],
    "cf531f6537954b0c9eb9ebd7c0cea500": [
        "def solution():\n    max_number = 100\n    start_number = 2\n    step = 2\n\n    multiples = (max_number - start_number) // step + 1\n\n    return multiples\n\nans = solution()"
    ],
    "c76c8db1463743adbd53ed8b96efcbd5": [
        "def solution():\n    total_cost = (4 * 75) + (3 * 95)\n    total_cost_pounds = total_cost / 100\n    change = 10 - total_cost_pounds\n    return round(change, 2)\n\nans = solution()"
    ],
    "162b4dfb6c85480ab3fa57a6c7291de2": [
        "def solution():\n    initial_price = 4200\n    first_discount = initial_price * 0.10\n    price_after_first_discount = initial_price - first_discount\n    second_discount = price_after_first_discount * 0.20\n    final_price = price_after_first_discount - second_discount\n    return final_price\n\nans = solution()"
    ],
    "0eb584e3f8a14f75a374964af3070d71": [
        "def solution():\n    total_numbers = 8\n    total_mean = 555\n    difference = 296\n    \n    # Calculate the total sum of all numbers\n    total_sum = total_numbers * total_mean\n    \n    # Let the mean of the first 3 numbers be x\n    # Then the mean of the last 5 numbers is x + difference\n    # The sum of the first 3 numbers is 3 * x\n    # The sum of the last 5 numbers is 5 * (x + difference)\n    # total_sum = 3 * x + 5 * (x + difference)\n\n    # Solving for x\n    x = (total_sum - 5 * difference) / (3 + 5)\n    \n    # The mean of the last 5 numbers is x + difference\n    last_five_mean = x + difference\n\n    return last_five_mean\n\nans = solution()"
    ],
    "fbdb47198fdf4306a9847b12bf333226": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    vicky, timmy, kevin = symbols('vicky timmy kevin')\n\n    equation1 = Eq(vicky, 6 * timmy - 3)\n    equation2 = Eq(kevin, timmy + 32)\n    equation3 = Eq(vicky, 99)\n\n    solutions = solve((equation1, equation2, equation3), (vicky, timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "7f70404ac5f74504a1cfebab700ec8a5": [
        "def solution():\n    initial_people = 5\n    initial_days = 15\n    target_days = 5\n\n    workload = initial_people * initial_days\n    people_needed = workload // target_days\n\n    additional_people = people_needed - initial_people\n\n    return additional_people\n\nans = solution()"
    ],
    "70f5ff9ddd8c4370b2cfb94de5a970ab": [
        "def solution():\n    footballs_per_basket = 5\n    number_of_baskets = 7\n\n    return footballs_per_basket * number_of_baskets\n\nans = solution()"
    ],
    "b88c740d29b747828949ce062283a33f": [
        "def solution():\n    total_children = 20\n    pip_position = 3\n    children_between = 5\n    bud_from_front = pip_position + children_between + 1\n    bud_from_end = total_children - bud_from_front + 1\n    \n    return bud_from_end\n\nans = solution()"
    ],
    "312d3c547d294d18b1e263e554e02de1": [
        "def solution():\n    isaac_age = 53\n    mother_age = 81\n    years_ago = symbols('years_ago')\n    equation = Eq((isaac_age - years_ago), (mother_age - years_ago)/3)\n    ans = solve(equation, years_ago)\n    return ans[0]\n\nans = solution()"
    ],
    "21b6e23a4408430bbf4acc393c601243": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 4), (3, 5), (6, 9)]\n    age, _ = solve_congruence(*congruences)\n\n    return age\n\nans = solution()"
    ],
    "ecbf3f006c6147d3aaf09f392d5a387e": [
        "def solution():\n    def custom_oplus(a, b):\n        return sum(range(a, b)) - b\n\n    result = custom_oplus(5, 10) - custom_oplus(4, 9)\n    \n    return result\n\nans = solution()"
    ],
    "35167ef06b9844828843e2c87be8c949": [
        "def solution():\n    result = 35 + 18 + 26 + 22 - 16 + 25\n    return result\n\nans = solution()"
    ],
    "df16de37f8d64768a0f4c9b79d33d31e": [
        "def solution():\n    pounds = 154\n    kg_per_pound = 1 / 2.2\n    kg = pounds * kg_per_pound\n    return kg\n\nans = solution()"
    ],
    "cd9d85bed1d74e6cb214e001f0a094e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for Rasidah and Chai Seng's money\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n    \n    # Equation 1: Relationship between Rasidah and Chai Seng's money initially\n    equation1 = Eq(rasidah, chai_seng - 48)\n    \n    # Equation 2: Rasidah spent 3/5 of her money\n    rasidah_spent = rasidah * (3/5)\n    \n    # Equation 3: Chai Seng spent 6/7 of his money\n    chai_seng_spent = chai_seng * (6/7)\n    \n    # Equation 4: Chai Seng has 1/2 as much money left as Rasidah in the end\n    equation2 = Eq(chai_seng - chai_seng_spent, 1/2 * (rasidah - rasidah_spent))\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n    \n    # Return the amount of money Rasidah had at first\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "791c504e967a47a3a7621807a53b47c8": [
        "def solution():\n    elena_speed = 8\n    cat_speed = 3\n    distance_behind = 500\n\n    relative_speed = elena_speed - cat_speed  # relative speed at which Elena catches up with the cat\n\n    time_to_catch_up = distance_behind / relative_speed\n\n    return time_to_catch_up\n\nans = solution()"
    ],
    "1754095281684c188e6216f11d4caff3": [
        "def solution():\n    from math import factorial\n\n    def permutations(n, r):\n        return factorial(n) // factorial(n - r)\n\n    # We have 3 choices for the first digit, 2 for the second, and 1 for the third\n    total_numbers = permutations(3, 3)\n\n    return total_numbers\n\nans = solution()"
    ],
    "83dbbf7b91904b22b7e2f875718cafe1": [
        "def solution():\n    from sympy import isprime\n\n    count = 0\n    for prime in range(2, 21):\n        if isprime(prime):\n            if isprime(prime - 6) or isprime(prime + 6):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "3c78e8e403284c9486c1fe552fdb5004": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(58 - (6*x + 2), 20)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b3a3839d65e84a9eb609756270102de4": [
        "def solution():\n    for tens_digit in range(1, 10):\n        ones_digit = 15 - tens_digit\n        if 0 <= ones_digit < 10:  # Ensure it's a digit (0-9)\n            return tens_digit * 10 + ones_digit  # Smallest possible 2-digit number\n\nans = solution()"
    ],
    "6a3017d012a04a6c9f0ed680b9bf9a09": [
        "def solution():\n    differences = []\n    sequence = [8, 20, 31, 41, 50]\n    \n    # Calculate the first set of differences\n    for i in range(1, len(sequence)):\n        differences.append(sequence[i] - sequence[i-1])\n    \n    # Calculate the second set of differences\n    second_differences = []\n    for i in range(1, len(differences)):\n        second_differences.append(differences[i] - differences[i-1])\n    \n    # Since it's a sequence with a constant second difference, we can find the next second difference.\n    next_second_difference = second_differences[-1]\n    \n    # Now let's find the next first difference.\n    next_first_difference = differences[-1] + next_second_difference\n    \n    # Lastly, let's find the next number in the sequence.\n    next_number = sequence[-1] + next_first_difference\n    \n    return next_number\n\nans = solution()"
    ],
    "9f5fc79092f442618d0ed912989d3195": [
        "from math import factorial\n\ndef solution():\n    # The number of ways to arrange the first four cards\n    ways_to_arrange_first_four = factorial(4) # 4!\n    \n    # There are two possibilities for the last card to make the number even: 2 or 4\n    number_of_even_last_cards = 2\n    \n    # Multiply ways to arrange first four cards by the number of choices for last card\n    total_ways = ways_to_arrange_first_four * number_of_even_last_cards\n    \n    return total_ways\n\nans = solution()"
    ],
    "dd2fcc192d2f4c3dbf232e72bcb19fa6": [
        "def solution():\n    x = -(4**2)\n    return x\n\nans = solution()"
    ],
    "71a76491c3df48ae9b18543d4e5cc354": [
        "def solution():\n    # Total weight of the first 8 apples\n    total_weight_initial = 8 * 50\n\n    # Mean weight after adding the extra apple\n    new_mean_weight = 52\n\n    # Total weight after adding the extra apple\n    total_weight_after = 9 * new_mean_weight\n\n    # Weight of the extra apple\n    weight_extra_apple = total_weight_after - total_weight_initial\n\n    return weight_extra_apple\n\nans = solution()"
    ],
    "287a2d46ffa247fc9ad946e5c0911c54": [
        "def solution():\n    return sum(range(96, 100))\n\nans = solution()"
    ],
    "0ba3b59c0bfb4c87ae2d34a874d2d690": [
        "def solution():\n    # A lamp will be switched for every divisor it has.\n    # If a lamp is switched an odd number of times, it ends up on.\n    # A number has an odd number of divisors only when it is a perfect square,\n    # because divisors come in pairs, except when they are the same number \n    # (as in 1*1, 2*2, ..., which happens only for perfect squares).\n    \n    # We need to count the perfect squares between 1 and 250.\n    # Only square numbers have an odd number of divisors.\n    # The largest perfect square less than 250 is 15^2 = 225.\n\n    count = 0\n    for i in range(1, 16):   # As we're looking for numbers whose square is <= 250\n        if i * i <= 250:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "966d6206a5444394a2096b3a802b79a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pages = symbols('pages')\n    original_time = pages / 50\n    new_time = pages / (50 + 20)\n    time_difference = original_time - new_time\n\n    equation = Eq(time_difference, 2)\n\n    num_pages = solve(equation, pages)\n\n    return num_pages[0]\n\nans = solution()"
    ],
    "f4b2a4d95a2f4145b73f56fb9ae21969": [
        "def solution():\n    first_term = 1\n    last_term = 199\n    num_terms = (last_term - first_term) // 2 + 1\n    average = (first_term + last_term) / 2\n\n    return average\n\nans = solution()"
    ],
    "2bb2908692c1496e83c9da8633b98269": [
        "def solution():\n    first_term = 6\n    difference = 4\n    n = 30  # term number\n\n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "939f1ef2920640e18e6791035bfe7f8a": [
        "def solution():\n    return 5842 + 351\n\nans = solution()"
    ],
    "84e25013e5fb4deda35beda9f5782685": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n    equation1 = Eq(oranges, apples + 194)\n    equation2 = Eq(oranges, 6 * apples + 4)\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "446707881fde4e908bf63228a9dc7ee5": [
        "def solution():\n    remainder = 7\n    quotient = 8\n    # The divisor must be greater than the remainder; start looking from remainder + 1\n    for divisor in range(remainder + 1, remainder + 1 + quotient):\n        # The dividend is (divisor * quotient) + remainder\n        dividend = (quotient * divisor) + remainder\n        # If both dividend and divisor are minimum, this is the solution\n        if dividend // divisor == quotient and dividend % divisor == remainder:\n            return (dividend, divisor)\n\nans = solution()"
    ],
    "9adda98665dc499994e24f43869d3eea": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    date_start = datetime(2013, 1, 28)  # January 28, 2013 is a Monday\n    one_day = timedelta(days=1)\n    one_year = timedelta(days=365)\n    ans = 2013\n\n    while True:\n        ans += 1\n        next_year_date = date_start.replace(year=ans)\n\n        # Check for leap year and adjust\n        if ans % 4 == 0:\n            if ans % 100 != 0 or ans % 400 == 0:\n                next_year_date += one_day  # Add an extra day for leap year\n\n        # Check if the next_year_date is a Monday\n        if next_year_date.weekday() == 0:  # 0 is Monday\n            break\n\n        # Move start date to next year\n        date_start = next_year_date\n\n    return ans\n\nans = solution()"
    ],
    "c2cbf1f7958e4d09ae575ec083bddec8": [
        "def solution():\n    for age in range(20, 36):\n        if age % 3 == 0 and (age + 1) % 5 == 0:\n            return age\n\nans = solution()"
    ],
    "8488dbe7c4e548e79cc11b66f832cb46": [
        "def solution():\n    jogging_time = 1  # Time from 6:30 AM to 7:30 AM\n    walking_time = 2  # Time from 7:30 AM to 9:30 AM\n\n    jogging_speed = 6  # Jogging speed in miles per hour\n    walking_speed = 5  # Walking speed in miles per hour\n\n    jogging_distance = jogging_time * jogging_speed\n    walking_distance = walking_time * walking_speed\n\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "f94d81e4add44bbdb22df230a08a082f": [
        "def solution():\n    original_amount = 20\n    daily_saving = 1\n    days_saved = 7\n    amount_lent = 5\n    amount_spent = 3\n    \n    saved_amount = daily_saving * days_saved\n    final_amount = original_amount + saved_amount - amount_lent - amount_spent\n    \n    return final_amount\n\nans = solution()"
    ],
    "c6742159f800490eb0db04916361e0a1": [
        "def solution():\n    total_expressway = 900\n    companies = 4\n    days = 5\n\n    # Calculate the work done by 1 construction company in one day\n    work_per_company_per_day = total_expressway / (companies * days)\n\n    return work_per_company_per_day\n\nans = solution()"
    ],
    "196a119f90d9439aaddd24ed22d849f3": [
        "def solution():\n    normal_cost = 400\n    discount = 0.10\n    members = 30\n\n    discounted_cost = normal_cost * (1 - discount)\n    cost_per_member = discounted_cost / members\n\n    return cost_per_member\n\nans = solution()"
    ],
    "4e262975314040ab820a9ec130db1cb3": [
        "def solution():\n    initial_charge = 0.80  # Initial charge for up to 15 minutes\n    additional_rate = 0.05  # Rate for each additional minute\n    total_charge = 1.40  # Total charge for the call\n    \n    # Calculate additional charge beyond the initial 15 minutes\n    additional_charge = total_charge - initial_charge\n\n    # Calculate the number of additional minutes\n    additional_minutes = additional_charge / additional_rate\n\n    # The total duration of the call is the sum of the initial 15 minutes\n    # plus the additional minutes.\n    total_minutes = 15 + additional_minutes\n\n    return total_minutes\n\nans = solution()"
    ],
    "f53f2f8694b148fdbea2cbce2274ad5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the unknown\n    x = symbols('x')\n\n    # Define the equation 4*x - 13 = 55\n    equation = Eq(4 * x - 13, 55)\n\n    # Solve the equation for the unknown\n    solution = solve(equation, x)\n\n    # Get the value of the unknown (as an integer, if it's an integer)\n    return solution[0]\n\nans = solution()"
    ],
    "b2659c11d02e40ed86b49d179fd937b1": [
        "def solution():\n    # Define a function for the custom operation based on identified patterns\n    def custom_operation(a, b):\n        return a + b - (a // 2)\n\n    # Applying the custom operation to find 9 ◈ 20\n    ans = custom_operation(9, 20)\n    return ans\n\nans = solution()"
    ],
    "e50577a37b7c4a59a13a3b048ce98118": [
        "def solution():\n    boys = 255\n    girls = 234\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "ffcf1702672046df8e86e7270234c92d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for the number Sara first thought of\n    x = symbols('x')\n\n    # Create the equation based on the description\n    equation = Eq(((x - 4) / 2) + 11, 37)\n\n    # Solve the equation\n    original_number = solve(equation, x)\n\n    return original_number[0]\n\nans = solution()"
    ],
    "2c68e4214ff54f85956ee7cc54457f0e": [
        "def solution():\n    first_multiple = (56 // 5) * 5\n    if first_multiple < 56:\n        first_multiple += 5\n\n    last_multiple = (120 // 5) * 5\n    if last_multiple > 120:\n        last_multiple -= 5\n\n    num_multiples = ((last_multiple - first_multiple) // 5) + 1\n\n    return num_multiples\n\nans = solution()"
    ],
    "03cf341346924ba7a563f01f54c2a13f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(35, 10 - 2*x + 7*x)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9cbab768b996487fafdce66ceab5b47e": [
        "def solution():\n    # The last digit of any number raised to a power only depends on\n    # the last digit of the base and the exponent. Since 2 raised to\n    # any power alternates ending with 2, 4, 8, 6 and 3 raised to any\n    # power alternates ending with 3, 9, 7, 1, we only have to find the\n    # last digit in the cycle that corresponds to the power 2017.\n\n    # For 2: The cycle is [2, 4, 8, 6] which repeats every 4 powers\n    # 2017 % 4 = 1, so the last digit will be 2 (the first in the cycle)\n\n    # For 3: The cycle is [3, 9, 7, 1] which repeats every 4 powers\n    # 2017 % 4 = 1, so the last digit will be 3 (the first in the cycle)\n\n    # Now multiply the last digits of each\n    last_digit_2 = 2\n    last_digit_3 = 3\n    last_digit = (last_digit_2 * last_digit_3) % 10  # The last digit of the product\n\n    return last_digit\n\nans = solution()"
    ],
    "77ab09536f3247d9bbce6ad4688ccf88": [
        "def solution():\n    # Gina's age when she was 35\n    gina_35_year = 2005 - 50 + 35\n    # James' age in that year\n    james_age_when_gina_35 = (gina_35_year - 1997) + 20\n    \n    return james_age_when_gina_35\n\nans = solution()"
    ],
    "701a44d04fe2471b8b3b4a02034c3aed": [
        "def solution():\n    ans = 10034\n    return ans\n\nans = solution()"
    ],
    "ae56d2e7b43c4bd68b65a028a92a6651": [
        "def solution():\n    total_quarters = 2.5 * 4\n    return int(total_quarters)\n\nans = solution()"
    ],
    "59d86540e8a94f73833a04f93b4465f1": [
        "def solution():\n    for B in range(10):\n        number = int(f\"26{B}789\")\n        if number % 13 == 0:\n            return B\n\nans = solution()"
    ],
    "8aad358e912f47108a9715343902ea04": [
        "def solution():\n    # Lucy is the 5th from the front.\n    lucy_position = 5\n\n    # Eddie is the 9th from the back.\n    eddie_position = 9\n\n    # There are 2 people standing between Lucy and Eddie.\n    people_between = 2\n\n    # Total people in line is the position of Lucy plus people between\n    # plus Eddie's position (since positions overlap at Lucy and Eddie).\n    total_people = lucy_position + people_between + eddie_position\n\n    return total_people\n\nans = solution()"
    ],
    "f0cc63d487f641d6828e61eaf1fc53c8": [
        "from sympy import symbols, solve, isprime\n\ndef solution():\n    x = symbols('x')\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]  # Consider prime numbers up to at least 29\n    solutions = []\n\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                for l in primes:\n                    if i != j and j != k and k != l and i != k and i != l and j != l:\n                        # Generate equations based on the remainders and divisors\n                        equations = [\n                            x % 3 - i, \n                            x % 5 - j, \n                            x % 7 - k, \n                            x % 8 - l\n                        ]\n                        # Solve the system of equations\n                        sol = solve(equations, x)\n                        # Verify the solution is a positive integer before adding\n                        if sol and sol[x].is_integer and sol[x] > 0:\n                            solutions.append(sol[x])\n\n    # Return the smallest solution found\n    return min(solutions)\n\nans = solution()"
    ],
    "fe803c1367d64b149801be4344758226": [
        "def solution():\n    total_length_cm = 11 * 100 + 74  # Convert meters to centimeters\n    dress_length_cm = 5 * 100 + 8  # Convert meters to centimeters\n    remaining_length_cm = total_length_cm - dress_length_cm\n    stripe_length_cm = remaining_length_cm / 9\n    stripe_length_m = stripe_length_cm // 100  # Floor division to find meters\n    stripe_length_extra_cm = stripe_length_cm % 100  # Remainder to find centimeters\n    \n    return stripe_length_m, stripe_length_extra_cm\n\nans = solution()"
    ],
    "58e3a2db56754c6f9d5e40fe1b58ffe7": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import symbols\n\n    # Let o be the number of orchids, t be the number of tulips, r be the roses\n    o, t, r = symbols('o t r')\n\n    # Total number of flowers\n    total_flowers = o + t + r\n\n    # Equations based on the given information\n    equation1 = total_flowers - (0.4 * o + (1 / 5) * t + 0.25 * r) - 2644\n    equation2 = o + t + r - 3616\n    equation3 = (3 / 5) * t - o\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (o, t, r))\n    number_of_orchids = solutions[o]\n\n    return number_of_orchids\n\nans = solution()"
    ],
    "47825c0910a244f4bdcd974186bcaefe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 4) * 7 - 21, 35)\n\n    result = solve(equation, x)\n\n    return result[0]\n\nans = solution()"
    ],
    "4fbf262896eb43f0886f401236b6a692": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B = symbols('A B')\n    equation1 = Eq(A + B, 130)\n    equation2 = Eq(A, 5 * B + 4)\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "2a6b8ddd03b04d6ca675e0515ac48c3f": [
        "def solution():\n    ans = 20.23 * 39 + 202.3 * 4.1 + 4 * 101.15\n    return ans\n\nans = solution()"
    ],
    "76f0b59b2fe34356a29cea5b4f171d3b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    books, files = symbols('books files')\n    equation1 = Eq(12 * books + 9 * files, 336)\n    equation2 = Eq(books, files + 14)\n\n    solutions = solve((equation1, equation2), (books, files))\n\n    return solutions[books]\n\nans = solution()"
    ],
    "a56cc128d0da4c10987a8d45533419d8": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    total_girls = 16\n    \n    left_handed_girls = total_girls - (total_pupils - right_handed)\n    right_handed_girls = total_girls - max(left_handed_girls, 0)\n    \n    return right_handed_girls\n\nans = solution()"
    ],
    "488360b26f1144849d4bb784a270ca57": [
        "def solution():\n    for chickens in range(11):\n        rabbits = 10 - chickens\n        if 2 * chickens + 4 * rabbits == 34:\n            return chickens\n\nans = solution()"
    ],
    "bdc6e2ddbb4c4c19b2b90c3c89e0ae05": [
        "def solution():\n    return 0.012 + 2.03 + 0.1456\n\nans = solution()"
    ],
    "8a42b93556ef4bcebb38b2ba338a9e1d": [
        "def solution():\n    return 60.2 / 7\n\nans = solution()"
    ],
    "49714794b0f94aada1cf3dfbf03a6990": [
        "def solution():\n    # Compute the last digit of each number^2013 and sum them up\n    # Since the powers of 1, 5, and 6 always end with 1, 5, and 6 respectively\n    # The other numbers loop every 4 cycles, so we effectively only need the last digit of 2^1, 3^1, etc.\n    ones_digits = [pow(i, 2013, 10) if i not in (1, 5, 6) else i for i in range(1, 10)]\n    total = sum(ones_digits)\n    ans = total % 10  # Only the last digit (ones)\n    return ans\n\nans = solution()"
    ],
    "a7d1fbe2679e40b58d6660db0ed3287b": [
        "def solution():\n    for age in range(30, 121):\n        if age % 6 == 2 and age % 7 == 5:\n            return age\n\nans = solution()"
    ],
    "4073b71163494881a2c9c5629d8b16a5": [
        "def solution():\n    # In the worst case scenario, Peter needs to take out one sock of each color first.\n    # That means he needs to take 3 socks to have one of each color.\n\n    # As soon as he takes one more sock, it must match one of the colors he already has.\n    # Therefore, he needs to take out one additional sock to guarantee a matching pair.\n\n    # Total socks taken out = 3 (one of each color) + 1 (to guarantee a match) = 4\n    return 3 + 1  \n\nans = solution()"
    ],
    "6a58abe1371844c497a2ad82064a0ebd": [
        "def solution():\n    # Convert times to 24-hour format\n    departure_time = 20  # 8pm\n    arrival_time = 1 + 24  # 1am the next day\n\n    # Calculate the duration of the flight\n    # Add the time difference to the arrival time and then subtract the departure time\n    # Since France is behind Japan, we subtract the time difference\n    time_difference = 7\n    duration = (arrival_time - time_difference) - departure_time\n\n    return duration\n\nans = solution()"
    ],
    "c2819474faa94700a66e972f6de65651": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    square, triangle, diamond = symbols('square triangle diamond')\n\n    equation1 = Eq(square + triangle, 10)\n    equation2 = Eq(triangle + diamond, 16)\n    equation3 = Eq(square + triangle + diamond, 22)\n\n    solutions = solve((equation1, equation2, equation3), (square, triangle, diamond))\n    \n    return solutions[square] + solutions[diamond]\n\nans = solution()"
    ],
    "29659ea8c8ba40fcbfd094b963998970": [
        "def solution():\n    # Count number of digits from 1 to 9\n    digits_1_to_9 = 9\n    \n    # Count number of digits from 10 to 99\n    digits_10_to_99 = (99 - 10 + 1) * 2\n\n    # Count number of digits from 100\n    digits_100_to_131 = (131 - 100 + 1) * 3\n\n    # Total digits used\n    total_digits = digits_1_to_9 + digits_10_to_99 + digits_100_to_131\n\n    return total_digits\n\nans = solution()"
    ],
    "adae7d5f0cb94d7e81c361caadeeff21": [
        "def solution():\n    total_questions = 50\n    not_attempted = 3\n    attempted = total_questions - not_attempted\n    score = 168\n    correct_mark = 4\n    wrong_mark = 1\n\n    # Let's assume all attempted questions were answered correctly.\n    # Then we deduct the excess from the total marks assuming each excess mark\n    # comes from a question wrongly answered, which not only subtracts a correct mark (4 points)\n    # but also adds a wrong mark (1 point).\n    correct_answers = (score + attempted*wrong_mark) // (correct_mark + wrong_mark)\n\n    return correct_answers\n\nans = solution()"
    ],
    "6fc358af07bb4fb290d8b7b95d0d4815": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    necklace, earring = symbols('necklace earring')\n\n    equation1 = Eq(9 * necklace + 5 * earring, 1440)\n    equation2 = Eq(2 * necklace + 3 * earring, 439)\n\n    solutions = solve((equation1, equation2), (necklace, earring))\n\n    total_cost = solutions[necklace] + solutions[earring]\n\n    return total_cost\n\nans = solution()"
    ],
    "b89eb8f48467425ca5d1e6474cae3be8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eugene, sid = symbols('eugene sid')\n    \n    # Eugene had 5 times as many coins as Sid\n    equation1 = Eq(eugene, 5 * sid)\n    # After using coins they had 51 coins left altogether\n    equation2 = Eq(eugene - 71 + sid - 16, 51)\n\n    solutions = solve((equation1, equation2), (eugene, sid))\n\n    return solutions[eugene]\n\nans = solution()"
    ],
    "b658611043604a84904809a513eca7b0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the two numbers\n    x, y = symbols('x y')\n\n    # Set up the equations based on the given information\n    equation1 = Eq(x + y, 71)\n    equation2 = Eq(x - y, 9)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Return the bigger number\n    return solutions[x]\n\nans = solution()"
    ],
    "d8d8fba2232a4e928731d18f9af5290b": [
        "def solution():\n    # There are three choices for the first digit (1, and 2 since the first digit cannot be 0),\n    # and three choices for the second digit (0, 1, 2).\n    # Using the multiplication principle, we multiply the number of choices for each position.\n    first_digit_choices = 2  # cannot have a 0 in the tens place for a 2-digit number\n    second_digit_choices = 3  # can have 0, 1, or 2 in the units place\n\n    num_2_digit_numbers = first_digit_choices * second_digit_choices\n\n    return num_2_digit_numbers\n\nans = solution()"
    ],
    "9638aa4f9615400687f09c8801020eb6": [
        "def solution():\n    return 391 * 7\n\nans = solution()"
    ],
    "b99e232169f64053801fd886d5ce3984": [
        "def solution():\n    # let the first even number be x\n    # the consecutive even numbers are then x, x+2, x+4, x+6, x+8\n    # given that their sum is 200\n    # x + (x+2) + (x+4) + (x+6) + (x+8) = 200\n    # 5x + 20 = 200\n    # 5x = 180\n    # x = 36\n    # The smallest number of the five is x which is 36\n    return 36\n\nans = solution()"
    ],
    "8dea568bfc0f47a88a18a150964ebdd8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the amount of sugar solution transferred in grams\n    x = symbols('x')\n    \n    # For container A, initial sugar is 50 * 0.1. After transfer, it is (50 - x) * concentration + x * 0.2\n    # For container B, initial sugar is 30 * 0.2. After transfer, it is (30 - x) * concentration + x * 0.1\n    # The concentration is the same for both, so we set them equal to each other and solve for x\n    equation = Eq((50 - x) * 0.1 + x * 0.2, (30 - x) * 0.2 + x * 0.1)\n    \n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "a137655c79064ec7a5bd8abbf2cc059d": [
        "from math import factorial\n\ndef solution():\n    ans = sum(factorial(100) / (factorial(97) * factorial(100 - i) * factorial(i - 3)) for i in range(3, 101))\n    return ans\n\nans = solution()"
    ],
    "5e71c6a0c7254d3ab8b549338d61acff": [
        "def solution():\n    # Each cut takes 8 minutes / 4 cuts to create 5 sections\n    cut_time = 8 / 4\n    \n    # To make 6 cuts, we need 6 * cut_time minutes\n    total_time = 6 * cut_time\n    \n    return total_time\n\nans = solution()"
    ],
    "f22bedb58be24a40a4d182dd0dbc7ffc": [
        "def solution():\n    total_votes = 120\n    current_votes_for_peter = 35\n    votes_for_others = 22 + 27  # Mark's and Nicole's votes\n    remaining_votes = total_votes - votes_for_others - current_votes_for_peter\n    \n    # Peter must have more than half of the votes that are not for Mark and Nicole\n    # So we subtract current votes for Peter from remaining_votes and divide by 2 then add 1 \n    # (because he needs to beat the other candidates by at least one vote)\n    votes_needed_for_majority = (remaining_votes // 2 + 1) - current_votes_for_peter\n\n    return votes_needed_for_majority\n\nans = solution()"
    ],
    "3aa75c8b30a54c67a6563a2056fe6973": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(boys + girls, 995)\n    equation2 = Eq(girls, boys - 7)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "92a0e5f9500b4853819d540562be1a80": [
        "def solution():\n    return 87 * 23\n\nans = solution()"
    ],
    "2084c341f98040dbb7686adc74b457f7": [
        "def solution():\n    number1 = 31\n    number2 = 32\n    \n    if number1 % 10 > number2 % 10:\n        return number1\n    else:\n        return number2\n\nans = solution()"
    ],
    "590bcb8900904fe88f3fadadb68feb11": [
        "def solution():\n    original_price = 540\n    discount = 189\n    percentage_reduction = (discount / original_price) * 100\n    return percentage_reduction\n\nans = solution()"
    ],
    "27fec67c0edf42efbd46038d592d002b": [
        "def solution():\n    initial_money = 100\n    spent_book = 0.10 * initial_money\n    remaining_after_book = initial_money - spent_book\n    spent_dvd = 0.20 * remaining_after_book\n    remaining_money = remaining_after_book - spent_dvd\n\n    return remaining_money\n\nans = solution()"
    ],
    "4517703a55ee4695b02b8505817748b1": [
        "def solution():\n    total_amount = 490  # total amount in pence\n    # Let x be the number of each kind of coin. Then we have:\n    # 5x + 10x + 20x = total_amount\n    # 35x = total_amount\n    x = total_amount // 35\n    # Total number of coins = number of 5p coins + number of 10p coins + number of 20p coins\n    total_coins = 3 * x\n    return total_coins\n\nans = solution()"
    ],
    "892ff0f234ae4e3cb7a7bf750eb3a01d": [
        "def solution():\n    total_money_in_cents = 28 * 100  # convert dollars to cents\n    cost_of_gift_in_cents = 20 * 100 # convert dollars to cents\n    remaining_money_in_cents = total_money_in_cents - cost_of_gift_in_cents\n\n    return remaining_money_in_cents\n\nans = solution()"
    ],
    "038a870a64fa4b908242c675e09c8860": [
        "def solution():\n    total_days = 9\n    total_sweets = 135\n    difference = 3\n\n    # Using the formula for the sum of an arithmetic sequence: n/2 * (2a + (n-1)d) = S\n    # where n is the total number of terms, a is the first term, d is the common difference, and S is the sum of the terms\n    # We can solve for the first term (a) as follows:\n\n    # Here we have n (total_days), d (difference), and S (total_sweets)\n    # Rearranging the formula to solve for a:\n    # a = (S/n - (n-1)d/2)\n\n    # Once we have a, we can find the last term by using the formula:\n    # last_term = a + (n-1)d\n\n    # Finding the first term (a):\n    a = (total_sweets / total_days) - ((total_days - 1) * difference / 2)\n\n    # Finding the last term:\n    last_day_sweets = a + (total_days - 1) * difference\n    \n    return int(last_day_sweets)\n\nans = solution()"
    ],
    "8f16804135244d3d952f4f7aa96aea99": [
        "def solution():\n    principal = 1000  # initial amount\n    rate = 0.06  # interest rate\n    time = 5  # number of years\n\n    balance = principal * (1 + rate) ** time  # compound interest formula\n\n    return balance\n\nans = solution()"
    ],
    "fa6e880afc1b420b858420333e657e2c": [
        "def solution():\n    total_digits = 0\n    # 1-9: 9 pages with 1 digit\n    total_digits += 9 * 1\n    # 10-99: 90 pages with 2 digits\n    total_digits += 90 * 2\n    # 100-185: 86 pages with 3 digits\n    total_digits += (185 - 99) * 3\n\n    return total_digits\n\nans = solution()"
    ],
    "749213142ff9426e8ef90f3f3aa7daa5": [
        "def solution():\n    annual_salary_before_raise = 24000\n    pay_raise_percentage = 0.10\n    annual_salary_after_raise = annual_salary_before_raise + (annual_salary_before_raise * pay_raise_percentage)\n    monthly_salary_after_raise = annual_salary_after_raise / 12\n    \n    return monthly_salary_after_raise\n\nans = solution()"
    ],
    "27c26de10eb14930ae9cdf02279d1e58": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(10 - 3 * (x - 2), 4 * x - 5 * (4 - x))\n    \n    solution_x = solve(equation, x)\n    \n    return solution_x[0]\n\nans = solution()"
    ],
    "3da2630a7c3042408936061a5d0172c6": [
        "def solution():\n    return 7842 - 998\n\nans = solution()"
    ],
    "a8fa71f1af7245808f0ae42a4ff273b0": [
        "def solution():\n    ans = 704 - 457\n    return ans\n\nans = solution()"
    ],
    "a12c2b2900394c9999c189d1a33af5a3": [
        "def solution():\n    return 123 - (23 + 56)\n\nans = solution()"
    ],
    "e6f07695c3c44ceda16250795d0df505": [
        "def solution():\n    # Let m represent the birthday month and d represent the day.\n    # Based on the given information, we have the equation:\n    # 31*m + 12*d = 376\n    # We have constraints that 1 <= m <= 12 for months and 1 <= d <= 31 for days.\n    for m in range(1, 13):  # Loop for months\n        for d in range(1, 32):  # Loop for days\n            if 31 * m + 12 * d == 376:\n                # Format the day and month into a string \"ddmm\"\n                return f\"{d:02d}{m:02d}\"\n\nans = solution()"
    ],
    "0581d122126f4a8aa0564b99c14fdde4": [
        "def solution():\n    left_side = 4.08 * 20\n    known_product = 1.08 * 20\n    missing_product = left_side - known_product\n    missing_number = missing_product / 20\n    return missing_number\n\nans = solution()"
    ],
    "50997193003b42a5b1b612a65004742c": [
        "def solution():\n    series_sum = 0\n    sign = 1\n    for x in range(119, 98, -2):\n        series_sum += sign * x\n        sign *= -1\n    return series_sum\n\nans = solution()"
    ],
    "7501b55360b14603a4f3cd0fec5e5c2e": [
        "def solution():\n    ans = 158 * 23\n    return ans\n\nans = solution()"
    ],
    "2596b3b0a45a4d33bab961b1ab804010": [
        "def solution():\n    count = 0\n    for i in range(1, 2023):\n        if i % 7 != 0 and i % 17 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "39fc04a75d5b4b149928dc45f62d257c": [
        "def solution():\n    cost_per_cooker = 350\n    number_of_cookers = 16\n    total_cost = cost_per_cooker * number_of_cookers\n    return total_cost\n\nans = solution()"
    ],
    "18b18182a46e40b88627f1ccea5b3d8e": [
        "def solution():\n    # Original prices\n    calculator_original_price = 6\n    protractor_original_price = 0.30  # converting pence to pounds\n\n    # Discounts\n    calculator_discounted_price = calculator_original_price * (1 - 1/4)\n    protractor_discounted_price = protractor_original_price * (1 - 1/2)\n\n    # Quantity bought\n    calculators_bought = 8\n    protractors_bought = 20\n\n    # Total price calculation\n    total_price = (calculators_bought * calculator_discounted_price +\n                   protractors_bought * protractor_discounted_price)\n\n    return total_price\n\nans = solution()"
    ],
    "6aa8b0892ddb472f98ad315fc9309ec6": [
        "def solution():\n    flour_ratio = 40\n    milk_ratio = 80\n    available_flour = 25\n\n    milk_needed = (available_flour * milk_ratio) / flour_ratio\n\n    return milk_needed\n\nans = solution()"
    ],
    "b0936b75d5ce4b94ae9381888ed227ad": [
        "def solution():\n    sweets_left = 38\n    sweets_taken = 5\n\n    initial_sweets = sweets_left + sweets_taken\n\n    return initial_sweets\n\nans = solution()"
    ],
    "a1e7310c3dd84d7a9231e38d0f9f7452": [
        "def solution():\n    younger_age_now = 18\n    older_future_age = 62\n    age_difference = older_future_age - younger_age_now\n    \n    older_age_now = younger_age_now + age_difference\n    \n    return older_age_now\n\nans = solution()"
    ],
    "cbb06928b2ac4d109928a77853509743": [
        "def solution():\n    # Total grass consumed is the same in both scenarios.\n    # 27 oxen * 6 weeks = Total grass consumed = 23 oxen * 9 weeks\n    total_grass = 27 * 6  # or equivalently 23 * 9\n\n    # We want to find out how many weeks (w) it will take for 21 oxen to finish eating the total grass.\n    # 21 oxen * w weeks = Total grass consumed\n    # We solve for w:\n    w = total_grass / 21\n\n    return w\n\nans = solution()"
    ],
    "3912f4432e58498cbda173e79f990a37": [
        "def solution():\n    # Fast calculation using algebraic factorization\n    # (n+1)^3 - n*((n+1)^2 + (n+2)) = (n^3 + 3n^2 + 3n + 1) - n*(n^2 + 2n + 1 + n + 2)\n    # Simplifying we get\n    # n^3 + 3n^2 + 3n + 1 - n^3 - 2n^2 - n^2 - 3n - 2\n    # Further simplification gives:\n    # 1 - 2 = -1\n    n = 2015\n    ans = 1 / (-1)\n    return ans\n\nans = solution()"
    ],
    "d32e56919f284c4db3acbe24232d6fd9": [
        "def solution():\n    tonnes = 1.194\n    two_thirds_tonnes = (2 / 3) * tonnes\n    kilograms = two_thirds_tonnes * 1000  # 1 tonne is equal to 1000 kilograms\n    return kilograms\n\nans = solution()"
    ],
    "3747f6795b484a8d933bdeff1799037e": [
        "def solution():\n    ans = (0.02) ** 2\n    return ans\n\nans = solution()"
    ],
    "de37bee61aca42a6b5dabc0d16ba4df1": [
        "def solution():\n    ans = 1440 // 24\n    return ans\n\nans = solution()"
    ],
    "060047cfbee741bb986e84b4387b64bc": [
        "def solution():\n    # Ellen rides a bike from 7:30 AM to 8:30 AM, which is 1 hour\n    bike_speed = 10  # miles per hour\n    bike_time = 1  # hour\n    bike_distance = bike_speed * bike_time\n\n    # Ellen takes the train from 8:30 AM to 10:30 AM, which is 2 hours\n    train_speed = 50  # miles per hour\n    train_time = 2  # hours\n    train_distance = train_speed * train_time\n\n    # Total distance is the sum of the distance covered by bike and train\n    total_distance = bike_distance + train_distance\n    return total_distance\n\nans = solution()"
    ],
    "356c71d6a146447aa7e01a575a71da98": [
        "def solution():\n    from sympy import symbols, solveset, S\n\n    # Let x, y, z represent the number of balls in boxes A, B and C, respectively\n    x, y, z = symbols('x y z', integer=True)\n\n    # The sum of balls in all boxes should equal 5, this gives us the equation x + y + z = 5\n    # We want to find all nonnegative integer solutions to this equation\n\n    # The number of nonnegative integer solutions to an equation of the form:\n    # x_1 + x_2 + ... + x_k = n\n    # is given by the binomial coefficient C(n+k-1, k-1).\n    # For our case, k = 3 (because we have 3 boxes) and n = 5 (because we have 5 balls)\n    # Thus, the solution count is C(5+3-1, 3-1) = C(7, 2)\n\n    # Use sympy's binomial coefficient function\n    ans = S.Binomial(7, 2)\n\n    # Evaluate the expression to get an integer result\n    return ans.evalf()\n\nans = solution()"
    ],
    "ff9e28ea21aa4addbaf6b47561b79b63": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red, green = symbols('blue red green')\n    \n    equation1 = Eq(red, blue + 25)\n    equation2 = Eq(green, red + 32)\n    equation3 = Eq(blue + red + green, 112)\n\n    solutions = solve((equation1, equation2, equation3), (blue, red, green))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "51579396b1d94a949192647f00104857": [
        "from math import factorial\n\ndef solution():\n    total_letters = len(\"TEENAGE\")\n    e_count = \"TEENAGE\".count(\"E\")\n    n_count = \"TEENAGE\".count(\"N\")\n    a_count = \"TEENAGE\".count(\"A\")\n    t_count = \"TEENAGE\".count(\"T\")\n    g_count = \"TEENAGE\".count(\"G\")\n\n    ans = factorial(total_letters) // (factorial(e_count) * factorial(n_count) * factorial(a_count) * factorial(t_count) * factorial(g_count))\n    return ans\n\nans = solution()"
    ],
    "be8ef166256a4fb4a86c6d0fcd933a8b": [
        "def solution():\n    # Lucas is 3rd from front to back and 2nd from back to front\n    # This means there are 3 + 2 - 1 rows (subtract 1 because Lucas is counted twice)\n    rows = 3 + 2 - 1\n    \n    # Lucas is 4th from left to right and 3rd from right to left\n    # This means there are 4 + 3 - 1 columns (subtract 1 because Lucas is counted twice)\n    columns = 4 + 3 - 1\n    \n    # The total number of students is the product of the number of rows and columns\n    total_students = rows * columns\n    \n    return total_students\n\nans = solution()"
    ],
    "b02ecddb14a14da0b461c2caa96532c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's define the symbols\n    ema, keng_wee = symbols('ema keng_wee')\n    \n    # Given information translated to equations\n    equation1 = Eq(ema + 360, keng_wee)  # Ema has $360 less than Keng Wee\n    equation2 = Eq(ema - ema / 4, keng_wee - 4 / 7 * keng_wee)  # Both spent money and have same amount left\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (ema, keng_wee))\n    \n    # Returning the amount of money Keng Wee had at first\n    return solutions[keng_wee]\n\nans = solution()"
    ],
    "216fe3f443544e68a0aed48da56449e1": [
        "def solution():\n    sale_price = 60\n    discount = 0.25\n    original_price = sale_price / (1 - discount)\n    return original_price\n\nans = solution()"
    ],
    "2d46f0af47944add838f9674e67c820b": [
        "def solution():\n    num = 217\n    while True:\n        if sum(int(digit) for digit in str(num)) == 9:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "d361ce8aec3d498eba6093a4def8859a": [
        "def solution():\n    ans = 284 + 69 - 271\n    return ans\n\nans = solution()"
    ],
    "4527a361966a43bfb89e355298a7a037": [
        "def solution():\n    one_fourth_of_36 = 36 / 4\n    one_tenth_of_square = one_fourth_of_36 * 10\n\n    return one_tenth_of_square\n\nans = solution()"
    ],
    "d92a77c7952a48ab83c4fa481451ad5c": [
        "def solution():\n    return 6.4 * 2.7\n\nans = solution()"
    ],
    "cefb89968d41422986f6e937e4276320": [
        "def solution():\n    # Lucas is 3rd from the front and 2nd from the back, implying there are 3 + 2 - 1 = 4 rows.\n    rows = 3 + 2 - 1\n    # Lucas is 4th from the left and 3rd from the right, implying there are 4 + 3 - 1 = 6 columns.\n    columns = 4 + 3 - 1\n\n    # The number of students is equal to the number of rows times the number of columns.\n    num_students = rows * columns\n\n    return num_students\n\nans = solution()"
    ],
    "584f43df1fd1456fb6a9ff29d820ce08": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n\n    # The initial ratio of girls to boys\n    equation1 = Eq(girls, 9/11 * boys)\n\n    # The new ratio after 2 girls are transferred in\n    equation2 = Eq(girls + 2, 10/11 * boys)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (girls, boys))\n\n    # The total number of students after the transfer\n    total_students = solutions[girls] + 2 + solutions[boys]\n\n    return total_students\n\nans = solution()"
    ],
    "a1693ad113aa4c239ad89d235418724c": [
        "def solution():\n    ans = 5 / (1/4)\n    return ans\n\nans = solution()"
    ],
    "ef243e4e071b44f7aa95098500cc59c4": [
        "def solution():\n    numbers = [37, 38, 40, 43, 42, 41]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "a98a706222f448d38a755e2d7c5165fc": [
        "def solution():\n    return 418 * 7\n\nans = solution()"
    ],
    "67b7658f12214846a53f685f44cedc06": [
        "def solution():\n    result = 77.5 * 0.52 + 5.2 * 2.25\n    return result\n\nans = solution()"
    ],
    "439b192b6f9344e0b4321e87c7abf0c6": [
        "def solution():\n    ans = 1  # The first term of the series is 1\n    # We calculate the sum for each fraction part continuously from 1/2 to 10/10 and back to 1/10\n    for n in range(2, 11):  # From 1/2 to 10/10\n        ans += sum([i/n for i in range(1, n + 1)])\n    for n in range(10, 1, -1):  # From 9/10 back to 1/2\n        ans += sum([i/n for i in range(n - 1, 0, -1)])\n    return ans\n\nans = solution()"
    ],
    "302d0208f5dc4303b27c7d3b793b9b4a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation = Eq(2*(3*x - y), 2*x + 4)\n    solution = solve(equation, (x, y))\n\n    x_value = solution[x]\n    y_value = solution[y]\n    \n    term_in_brackets = (2*x_value - y_value)\n\n    return term_in_brackets\n\nans = solution()"
    ],
    "a4fcfa11aee9487fa89fc3ae9b909d04": [
        "def solution():\n    total_cost_pence = (3 * 31) + (2 * 17) + 78 + (105)\n    change_pence = (5 * 100) - total_cost_pence  # Convert £5 to pence and calculate change\n    return change_pence\n\nans = solution()"
    ],
    "dc5e7ba6ef7e4f3aa7342a10e0e8ce72": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    trevor, siobhan = symbols('trevor siobhan')\n\n    equation1 = Eq(trevor, 5 * siobhan)\n    equation2 = Eq(siobhan, trevor - 24)\n\n    solutions = solve((equation1, equation2), (trevor, siobhan))\n\n    return solutions[trevor]\n\nans = solution()"
    ],
    "a33234abdd534b3cb07a4fa3e75ec899": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lim, tan = symbols('lim tan')\n    \n    equation1 = Eq(lim + tan, 390)\n    equation2 = Eq(lim, 5 * tan)\n    \n    solutions = solve((equation1, equation2), (lim, tan))\n\n    more_tiles = solutions[lim] - solutions[tan]\n\n    return more_tiles\n\nans = solution()"
    ],
    "67e8fb8a09154285b3afecd086511f32": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for Zehan's current age\n    zehan_now = symbols('zehan_now')\n    \n    # The age relationship in 12 years\n    equation = Eq(zehan_now + 12, 3 * zehan_now)\n    \n    # Solve for Zehan's current age\n    age_now = solve(equation, zehan_now)\n\n    # Return Zehan's current age\n    return age_now[0]\n\nans = solution()"
    ],
    "281573f15ba24a4186a9388a1bf098cb": [
        "def solution():\n    total_cost = 58.10\n    num_tickets = 7\n    cost_per_ticket = total_cost / num_tickets\n    return cost_per_ticket\n\nans = solution()"
    ],
    "6001dc976c8f4e57b213b0ec00f81c8d": [
        "def solution():\n    decimal_value = 0.36\n    percent_value = decimal_value * 100\n    return percent_value\n\nans = solution()"
    ],
    "a19e02dd5cf546089c95a5d1d0b6a300": [
        "from math import comb\n\ndef solution():\n    # Total ways to choose 5 students out of 15\n    total_ways = comb(15, 5)\n    \n    # Ways to choose 5 students without A, B, or C\n    ways_without_ABC = comb(12, 5)\n    \n    # Ways to choose 4 students without A, B, or C (since one of A, B, C is included)\n    ways_with_one_ABC = comb(12, 4) * 3  # Multiply by 3 for each case A, B, or C\n    \n    # Final answer is the difference between these cases\n    ans = total_ways - ways_without_ABC + ways_with_one_ABC\n    return ans\n\nans = solution()"
    ],
    "f316dc29ab1c42f6856c88cdf434b9d6": [
        "def solution():\n    return 536 - 11\n\nans = solution()"
    ],
    "30a3509e42044edda1c9958aff442893": [
        "def solution():\n    ans = 3 * 6\n    return ans\n\nans = solution()"
    ],
    "f8d4c7f0881341e782609d8014e213f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_lemon, water = symbols('original_lemon water')\n\n    initial_ratio_eq = Eq(original_lemon / water, 2 / 3)\n    new_ratio_eq = Eq((original_lemon + 80) / water, 6 / 5)\n\n    solutions = solve((initial_ratio_eq, new_ratio_eq), (original_lemon, water))\n\n    return solutions[original_lemon]\n\nans = solution()"
    ],
    "23588cfeb453402e8f12679dd2cc4b4d": [
        "def solution():\n    shaila_ratio = 6\n    shaila_sweets = 36\n    total_ratio = 5 + shaila_ratio\n\n    total_sweets = (shaila_sweets / shaila_ratio) * total_ratio\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "0cbee9a5a4dd4fbe91884d23889738ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    savings = symbols('savings')\n    \n    # Kim gave 1/3 of her savings to her mother\n    mother_share = (1/3) * savings\n    \n    # Amount spent on dresses and earrings\n    spent_on_dresses_and_earrings = 177 + 129\n    \n    # Amount left is 50% of what she gave her mother\n    amount_left = (1/2) * mother_share\n    \n    # Equation representing the situation\n    equation = Eq(savings - mother_share - spent_on_dresses_and_earrings, amount_left)\n    \n    # Solve for savings\n    solved_savings = solve(equation, savings)\n    \n    return float(solved_savings[0])\n\nans = solution()"
    ],
    "2f04dfbbee9d429aa18f6c6b7716eaad": [
        "def solution():\n    total_teachers = 100\n    know_french = 75\n    know_japanese = 45\n\n    know_both = know_french + know_japanese - total_teachers\n    only_know_french = know_french - know_both\n\n    return only_know_french\n\nans = solution()"
    ],
    "93c95414fb804348a0d0b204e11a3791": [
        "def solution():\n    for number in range(-1000, 1000):  # range can be adjusted if needed\n        if (((number + 8) * 8 - 8) / 8) == 80:\n            return number\n\nans = solution()"
    ],
    "1f23a8cd28504dc283d3311874eb1b31": [
        "def solution():\n    total_ropes = 10\n    total_length = 26\n    count = 0\n\n    for red_ropes in range(total_ropes + 1):  # range from 0 to total ropes\n        blue_ropes = total_ropes - red_ropes\n        length = red_ropes * 2 + blue_ropes * 3\n        \n        if length == total_length:\n            count = red_ropes\n            break\n    \n    return count\n\nans = solution()"
    ],
    "183382b70cca478d82e7b2a617f4c3a7": [
        "def solution():\n    usual_speed = 60  # mph\n    increased_speed = usual_speed * 1.3  # 30% increase in speed\n    \n    # Find the time saved by increasing the speed to make up for the 9 minutes delay\n    # Let t be the usual time to travel the distance at usual_speed\n    # usual_speed * t = increased_speed * (t - 9/60)  # convert 9 minutes to hours\n    # Solve for t\n    \n    # Rearrange the equation: usual_speed * t = increased_speed * t - increased_speed * 9/60\n    # Combine like terms: (increased_speed - usual_speed) * t = increased_speed * 9/60\n    \n    time_saved_per_hour = increased_speed - usual_speed  # The time saved by increasing speed per hour\n    t = (increased_speed * 9/60) / time_saved_per_hour  # Total time to travel the distance\n    \n    # Distance = speed * time\n    distance = usual_speed * t\n    \n    return distance\n\nans = solution()"
    ],
    "271cac95894d444cb0e4c7e109f430e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(37 - 3 * (x + 7), 5 * x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f4c49e9a21c542c0922cf3476b6075cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be the distance, s be the original speed, and t be the original time.\n    d, s, t = symbols('d s t')\n\n    # If speed increases by 25%, time taken decreases by 20 minutes (1/3 hours).\n    equation1 = Eq((s + s / 4) * (t - 1/3), d)\n\n    # If speed decreases by 45 metres per minute, time taken increases by 75%.\n    # Converting minutes to hours by multiplying by 60\n    equation2 = Eq((s - 45) * (t + t * 3/4), d)\n\n    # Original distance can be written as speed * time.\n    equation3 = Eq(s * t, d)\n\n    # Solve the system of equations for the original distance d.\n    solutions = solve((equation1, equation2, equation3), (d, s, t))\n\n    return solutions[d]\n\nans = solution()"
    ],
    "8539d96612824e36b81b50c2b2658def": [
        "def solution():\n    skipping_rope = 40\n    long_jump = 31\n    both_events = 21\n\n    only_one_event = (skipping_rope - both_events) + (long_jump - both_events)\n\n    return only_one_event\n\nans = solution()"
    ],
    "c51f49dc3f6c442eb3ffb2f4d9696fa4": [
        "def solution():\n    P = 21 / 0.30\n    return P\n\nans = solution()"
    ],
    "dfd8ad42f8c24fbab602cc7800828a8d": [
        "def solution():\n    # Total electricity saved in the first half of the year\n    total_first_half = 366\n    \n    # Average electricity saved per month in the second half of the year\n    average_second_half = 65\n    \n    # Number of months in the second half of the year\n    months_second_half = 6\n    \n    # Calculate total savings for the second half of the year\n    total_second_half = average_second_half * months_second_half\n    \n    # Total savings for the whole year\n    total_year_savings = total_first_half + total_second_half\n    \n    # Number of months in a year\n    total_months_in_year = 12\n    \n    # Calculate average savings per month for the whole year\n    average_month_savings = total_year_savings / total_months_in_year\n    \n    return average_month_savings\n\nans = solution()"
    ],
    "4189a90109e9484e9780addd6b35f9fb": [
        "def solution():\n    for i in range(1, 1000):  # search within a reasonable limit\n        if i % 7 == 0 and (i - 2) % 9 == 0:\n            return i\n\nans = solution()"
    ],
    "c5cf05af833245899166a02b3570e548": [
        "def solution():\n    count = 0\n    for i in range(1, 22//2 + 1):\n        if i != 22 - i:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6f8781d116474d85b94e06547f7d5416": [
        "from fractions import Fraction\n\ndef solution():\n    brownies = Fraction(1, 7)\n    cookies = Fraction(1, 14)\n    muffins = Fraction(1, 2)\n\n    used_flour = brownies + cookies + muffins\n    used_flour_simplified = used_flour.simplify()\n\n    return used_flour_simplified\n\nans = solution()"
    ],
    "21c19bf30c9e484da5b4f34fb1840b5e": [
        "def solution():\n    for i in range(2, 42):\n        if 41 % i == 0:\n            A = 41 + i\n            return A * 7\n\nans = solution()"
    ],
    "d8025a94b93345f1902df99a144007ac": [
        "def solution():\n    ans = 1\n    for i in range(2, 12):\n        ans *= (1 + 1 / i)\n    return ans\n\nans = solution()"
    ],
    "04961b35b9584c548a6854262aa9304c": [
        "def solution():\n    ans = 98 // 7\n    return ans\n\nans = solution()"
    ],
    "e7414af263794113add74774679c9252": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nathan, rosephine, sheena = symbols('nathan rosephine sheena')\n    equation1 = Eq(nathan / 2, rosephine / 5)\n    equation2 = Eq(rosephine / 5, 3 / 5 * sheena)\n    equation3 = Eq(nathan + rosephine + sheena, 780)\n\n    solutions = solve((equation1, equation2, equation3), (nathan, rosephine, sheena))\n\n    return solutions[sheena]\n\nans = solution()"
    ],
    "def5b3612da3468e9d98c7cc1995d2cd": [
        "def solution():\n    # Given height and height to width ratio\n    height = 21\n    ratio_height = 3\n    ratio_width = 4\n\n    # Find the width using the ratio\n    width = (ratio_width / ratio_height) * height\n\n    # Calculate the perimeter (2 times the height + 2 times the width)\n    perimeter = 2 * height + 2 * width\n\n    return perimeter\n\nans = solution()"
    ],
    "b648815bab0d43cd9b3f91f1c29fe90c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "a6427ff471f34eac98798cb1ab5da071": [
        "def solution():\n    # Create the number with 12 repeated 3's\n    number_str = '3' * 12\n    number = int(number_str)\n\n    # Calculate the remainder\n    remainder = number % 7\n\n    return remainder\n\nans = solution()"
    ],
    "4e8cab6040bd40b7893c300856c19b6b": [
        "def solution():\n    first_term = 2\n    last_term = 160\n    common_difference = 2\n\n    number_of_terms = ((last_term - first_term) // common_difference) + 1\n    sum_of_series = (number_of_terms / 2) * (first_term + last_term)\n\n    return int(sum_of_series)\n\nans = solution()"
    ],
    "6e24543c83134c5590295ad8804d20c1": [
        "def solution():\n    bags = 8\n    pens_per_bag = 4\n    total_pens = bags * pens_per_bag\n    return total_pens\n\nans = solution()"
    ],
    "7f1e36d85a1d4a2f9ceb00407fbaa1e4": [
        "def solution():\n    # Let x be the larger number and y be the smaller number.\n    # According to the problem, we have two equations:\n    # x - y = 36 (difference between the two numbers)\n    # x + y = 98 (sum of the two numbers)\n    \n    # From the first equation, we can express x in terms of y: x = y + 36\n    # Substituting x in the second equation: (y + 36) + y = 98\n    # This simplifies to 2y + 36 = 98\n    # Subtract 36 from both sides: 2y = 62\n    # Divide by 2 to get the value of y: y = 31\n    smaller_number = 31\n    return smaller_number\n\nans = solution()"
    ],
    "562c0f78f4174d73bb44a0cce09887c7": [
        "def solution():\n    # Since we only need the last digit, we look at the last digit of each number raised to the 100th power\n    # Last digit of 4^100\n    last_digit_4 = (4 ** 100) % 10\n    # Last digit of 7^100\n    last_digit_7 = (7 ** 100) % 10\n    # Last digit of 9^100\n    last_digit_9 = (9 ** 100) % 10\n    # Last digit of 11^100 (which is the same as 1^100)\n    last_digit_11 = (11 ** 100) % 10\n\n    # Multiply the last digits and find the last digit of the result\n    last_digit = (last_digit_4 * last_digit_7 * last_digit_9 * last_digit_11) % 10\n\n    return last_digit\n\nans = solution()"
    ],
    "f0b605621a9e488c833ca38ce574f364": [
        "def solution():\n    ans = 18 + 17 - 16 - 15 + 14 + 13 - 12 - 11\n    return ans\n\nans = solution()"
    ],
    "1abc42cdc116468cb9f0339bff2e3acc": [
        "def solution():\n    total_questions = 60\n    correct_ans_percentage = 0.70\n    correct_ans_points = 3\n    wrong_ans_points = -1\n    total_score = 78\n    \n    correct_ans = int(total_questions * correct_ans_percentage)\n    wrong_ans = total_questions - correct_ans\n    \n    # Calculate the score with the assumption that the rest of the answers are wrong\n    assumed_score = (correct_ans * correct_ans_points) + (wrong_ans * wrong_ans_points)\n    \n    # Calculate how many wrong answers need to be converted to unanswered for the score to match the actual score\n    # Each conversion from wrong to unanswered adds 1 point.\n    unanswered = assumed_score - total_score\n    \n    # Adjust the correct answers count\n    correct_ans -= unanswered\n\n    return correct_ans\n\nans = solution()"
    ],
    "348877530d8f4f2dbe709fa72001f569": [
        "def solution():\n    # Ratio of files to rulers in both cases is the same\n    # Ratio of files (6:9) is 2:3, and for rulers (10:15) is also 2:3\n    # Since the ratio of the number of files and rulers is the same in both cases,\n    # the cost will also scale with the same ratio.\n\n    # Cost of 6 files and 10 rulers is $40\n    # The cost of 9 files and 15 rulers will be (3/2) times the cost of 6 files and 10 rulers\n\n    initial_cost = 40\n    scaling_factor = 3/2  # Scaling from 6 to 9 files and 10 to 15 rulers\n\n    # Calculate the final cost\n    final_cost = initial_cost * scaling_factor\n\n    return final_cost\n\nans = solution()"
    ],
    "c94ef69eb1ea40b382fada9c92ec874e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for John and Jessie's original amounts\n    john_initial, jessie_initial = symbols('john_initial jessie_initial')\n\n    # John had 5/13 of Jessie's money initially\n    equation1 = Eq(john_initial, (5/13) * jessie_initial)\n\n    # Jessie transferred $600 to John\n    john_after = john_initial + 600\n    jessie_after = jessie_initial - 600\n\n    # After the transfer, John has 50% of Jessie's money\n    equation2 = Eq(john_after, 0.5 * jessie_after)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (john_initial, jessie_initial))\n\n    # Calculate the total amount of money they have\n    total_money = solutions[john_initial] + solutions[jessie_initial]\n\n    return total_money\n\nans = solution()"
    ],
    "399a22bd96244c04ab9eff62cbee5b68": [
        "def solution():\n    # 1 appears 15 times, 2 appears 14 times\n    ones = 15\n    twos = 14\n    \n    # The '2's will reach 14 when we have 69, which includes:\n    # 2, 12, 20-29, 32, 42, 52, 62 (a total of 14 '2's)\n    \n    # We need to count the '1's till 69 now:\n    # 1, 10-19, 21, 31, 41, 51, 61 (15 '1's)\n    # When we reach 69, both 1's and 2's are used up\n    n = 69\n\n    return n\n\nans = solution()"
    ],
    "a848bdfd5ea34a9ebb4eb13e5c8f9d6f": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    time_in = datetime.strptime(\"10:30\", \"%H:%M\")\n    time_out = datetime.strptime(\"11:00\", \"%H:%M\")\n    baking_time = time_out - time_in\n    return baking_time.total_seconds() / 60.0  # Convert seconds to minutes\n\nans = solution()"
    ],
    "a6ce7d2ec26147f4873239aa9574bc39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    t_shirts, caps = symbols('t_shirts caps')\n    \n    eq1 = Eq(t_shirts / caps, 8/5)\n    eq2 = Eq((1/4)*t_shirts*3 + (1/5)*caps*5, 132)\n    \n    solutions = solve((eq1, eq2), (t_shirts, caps))\n    \n    return solutions[t_shirts]\n\nans = solution()"
    ],
    "a31cae71b18e4581ac44ea1064373892": [
        "def solution():\n    # Total cost of bananas\n    banana_cost = 3 * 12  # in pence\n    # Total cost of apples\n    apple_cost = 5 * 11  # in pence\n\n    # Total cost\n    total_cost = banana_cost + apple_cost  # in pence\n\n    # Amount paid\n    amount_paid = 200  # in pence, since £2 = 200p\n\n    # Change in pence\n    change_pence = amount_paid - total_cost\n\n    # Convert change to pounds and pence\n    change_pounds = change_pence // 100\n    change_pence_left = change_pence % 100\n    \n    # Final answer in pounds and pence\n    ans = (change_pounds, change_pence_left)\n    \n    return ans\n\nans = solution()"
    ],
    "6c88703393b945c0b0bfae7254353841": [
        "def solution():\n    youngest_age = 7\n    total_children = 7\n    age_difference = 2\n\n    # Since Harvir is the oldest, we calculate his age.\n    harvir_age = youngest_age + (total_children - 1) * age_difference\n\n    return harvir_age\n\nans = solution()"
    ],
    "a4d1fe51e51644a68d34267f1c2f5275": [
        "def solution():\n    calendar_price = 6.97\n    ball_price = 2.99\n\n    total_spent = calendar_price + ball_price\n    \n    return total_spent\n\nans = solution()"
    ],
    "e44878f3a4c142f6a0f13947c2b24159": [
        "def solution():\n    flour_used_muffins = 1 / 5\n    flour_used_cookies = 1 / 2\n    flour_left = 360 / 1000  # convert grams to kilograms\n\n    total_flour = flour_used_muffins + flour_used_cookies + flour_left\n\n    return total_flour\n\nans = solution()"
    ],
    "c578c0aa1c3c4f668b3e35402f2a9536": [
        "def solution():\n    # Initialize the count of total number of fruits\n    total_fruits = 0\n    \n    # Convert pounds to pence to work with integers\n    total_spent = 500 # ￡5 = 500p\n    \n    # Loop over all possible combinations of oranges and lemons\n    for oranges in range(total_spent // 26 + 1):  # number of oranges cannot exceed total_spent // 26\n        for lemons in range(total_spent // 30 + 1):  # number of lemons cannot exceed total_spent // 30\n            if 26 * oranges + 30 * lemons == total_spent:\n                total_fruits = oranges + lemons\n                return total_fruits\n\nans = solution()"
    ],
    "cd2ade63fdb943c2be635c4890f7b39f": [
        "def solution():\n    from math import factorial\n\n    # For circular permutations, (n - 1)! is the formula where n is the number of people.\n    num_people = 4\n    num_ways_to_sit = factorial(num_people - 1)\n    \n    return num_ways_to_sit\n\nans = solution()"
    ],
    "0bc58aa125af4c5da502baffb301c81e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_eggs = symbols('original_eggs')\n    \n    equation = Eq(original_eggs + 24, 3 * original_eggs)\n    solutions = solve(equation, original_eggs)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "e63df9e57c014a358e54d2a32b1e30ef": [
        "def solution():\n    def delta(a, b):\n        return 3 * a + 2 * b\n    \n    def star(a, b):\n        return 3 * a - 2 * b\n\n    result = delta(star(delta(3, 4), 5), 6)\n    return result\n\nans = solution()"
    ],
    "297ef73642eb4bb7bc9c876f32b727e7": [
        "def solution():\n    count = 0\n    for i in range(1, 441):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "f96223372da84682a7c29924dbb659bb": [
        "def solution():\n    cookies = 298\n    box_capacity = 8\n    boxes_needed = (cookies + box_capacity - 1) // box_capacity\n    return boxes_needed\n\nans = solution()"
    ],
    "36563a3f9be64d47a2d4bd411b572cae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Create symbols for the number of male and female visitors\n    male_first_day, female_first_day = symbols('male_first_day female_first_day')\n    \n    # Equation based on the first day condition\n    equation1 = Eq(male_first_day, female_first_day + 450)\n    \n    # Equations based on the second day condition\n    female_second_day = female_first_day * 1.15\n    male_second_day = male_first_day * 0.82\n    equation2 = Eq(female_second_day + male_second_day, 1354)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (male_first_day, female_first_day))\n    \n    # Calculate the total number of visitors on the first day\n    total_visitors_first_day = solutions[male_first_day] + solutions[female_first_day]\n    \n    return total_visitors_first_day\n\nans = solution()"
    ],
    "5ee47aa9d6ab43b487b000bf91697924": [
        "def solution():\n    return (10 - 5) / 2\n\nans = solution()"
    ],
    "74eeba4eef5b4ec989b3c5c3a572e887": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    leo, jason = symbols('leo jason')\n\n    # At first, Leo had $220 more than Jason\n    equation1 = Eq(leo, jason + 220)\n\n    # Leo got extra $180 dollars\n    # Jason got extra $1100 dollars\n    # Now, Jason has 2 times as much money as Leo\n    equation2 = Eq(jason + 1100, 2 * (leo + 180))\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (leo, jason))\n\n    return solutions[jason]\n\nans = solution()"
    ],
    "2cbac0435d3842e0a32ebcb7823538b7": [
        "def solution():\n    robots_per_day = 347\n    days_per_week = 7\n\n    return robots_per_day * days_per_week\n\nans = solution()"
    ],
    "21668aad8ae540c3af86ad2cada5fa45": [
        "from math import factorial\n\ndef solution():\n    # Total number of books is the sum of all categories\n    total_books = 3 + 4 + 2 + 2\n    \n    # Number of ways to arrange \"total_books\" books in a line\n    total_arrangements = factorial(total_books)\n    \n    # Since books of the same category are indistinguishable, divide by factorials of each category\n    arrangements_biographies = factorial(3)\n    arrangements_scifi = factorial(4)\n    arrangements_magazines = factorial(2)\n    arrangements_schoolbooks = factorial(2)\n    \n    # Calculate the number of distinct arrangements\n    distinct_arrangements = total_arrangements // (arrangements_biographies * arrangements_scifi * arrangements_magazines * arrangements_schoolbooks)\n    \n    return distinct_arrangements\n\nans = solution()"
    ],
    "302fe51df29b42d5b5c26676941903eb": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 5):\n        a, b, c, d, e = p\n        if a == 0:  # leading number cannot be zero\n            continue\n        x = a * 10000 + b * 1000 + c * 100 + d * 10 + e\n        y = e * 10000 + d * 1000 + c * 100 + b * 10 + a\n        if x == 4 * y:\n            return x\n\nans = solution()"
    ],
    "6c0f20194f4d43c694fdc3e29818292c": [
        "from math import factorial\n\ndef solution():\n    # Using the formula for combinations with repetition\n    # Number of ways to put n identical objects into k bins = (n + k - 1) choose (k - 1)\n    \n    n = 7  # number of pencils\n    k = 3  # number of pencil cases\n\n    # Combination formula: C(n, k) = n! / (k! * (n-k)!)\n    ways = factorial(n + k - 1) // (factorial(k - 1) * factorial((n + k - 1) - (k - 1)))\n\n    return ways\n\nans = solution()"
    ],
    "f005eeb563694763b1cfdaeee89b1c28": [
        "def solution():\n    last_number = 345\n    while last_number > 0:\n        last_number -= 9\n    last_number += 9\n    return last_number\n\nans = solution()"
    ],
    "0dba6392fb4849a0b274002c4f736054": [
        "def solution():\n    total_cost = 3e6 # The cost of the mansion is 3 million pounds\n    number_of_friends = 5 # 5 friends shared the cost\n\n    amount_paid_per_friend = total_cost / number_of_friends # Dividing the total cost equally among friends\n\n    return amount_paid_per_friend\n\nans = solution()"
    ],
    "9322b5fd8c0f4ef49dbb6806c5d58465": [
        "def solution():\n    total_children = 50\n    total_paid = 555\n    price_without_name = 10\n    price_with_name = 15\n\n    # Hypothesize all shirts are bought at the lower price.\n    total_at_lower_price = total_children * price_without_name\n    additional_cost_for_name = price_with_name - price_without_name\n\n    # Calculate the number of children paying for their name based on the extra cost paid.\n    children_with_name = (total_paid - total_at_lower_price) / additional_cost_for_name\n\n    return int(children_with_name)\n\nans = solution()"
    ],
    "4b392afd5d974f1c924defced1ff9b83": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for time walked at the increased speed\n    time_increased_speed = symbols('t')\n    \n    # Define the equation for the total distance walked\n    distance_initial_speed = 150 * 10  # Distance walked at initial speed\n    distance_increased_speed = (150 + 50) * time_increased_speed  # Distance walked at increased speed\n    total_distance = distance_initial_speed + distance_increased_speed\n    \n    # Set up the equation and solve for time\n    equation = Eq(total_distance, 3700)\n    time_solution = solve(equation, time_increased_speed)\n    \n    # Calculate total time walked\n    total_time = 10 + time_solution[0]  # Initial 10 minutes plus the increased speed time\n    \n    return total_time\n\nans = solution()"
    ],
    "fa72055fad084ab58ad10b1fda0c68de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    male_first, female_first = symbols('male_first female_first')\n    \n    # Equations based on the given information\n    equation1 = Eq(male_first, female_first + 450)\n    equation2 = Eq(female_first * 1.15 + male_first * 0.82, 1354)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (male_first, female_first))\n    \n    # since we only want the number of male visitors on the first day\n    return solutions[male_first]\n\nans = solution()"
    ],
    "a20cb097c8264920ad40461d2d3be9bd": [
        "def solution():\n    position = 1\n    while position * 2 <= 40:\n        position *= 2\n    return position\n\nans = solution()"
    ],
    "47a4f2843f6546ecafe1fb93a795ff45": [
        "from math import factorial\n\ndef solution():\n    total_cards = 4 + 3 + 7  # Total number of cards\n\n    # Calculate permutations of all cards\n    permutations_of_all = factorial(total_cards)\n\n    # Calculate permutations for each type of cards (since they are indistinguishable)\n    permutations_of_hearts = factorial(4)\n    permutations_of_spades = factorial(3)\n    permutations_of_diamonds = factorial(7)\n\n    # Divide total permutations by each type's permutations\n    ans = permutations_of_all // (permutations_of_hearts * permutations_of_spades * permutations_of_diamonds)\n    \n    return ans\n\nans = solution()"
    ],
    "2cf16071a494408aa27882168fe6226a": [
        "def solution():\n    first_digit = 5  # smallest multiple of 5\n    second_digit = 1  # smallest odd number among natural numbers\n    third_digit = 9  # largest single-digit odd number\n    fourth_digit = 2  # smallest even number in nature\n    fifth_digit = 8  # largest single-digit multiple of 2\n    sixth_digit = 3  # smallest odd number greater than 1 in nature\n    seventh_digit = 0  # multiple of 2 and 5\n\n    phone_number = (first_digit * 10**6 +\n                    second_digit * 10**5 +\n                    third_digit * 10**4 +\n                    fourth_digit * 10**3 +\n                    fifth_digit * 10**2 +\n                    sixth_digit * 10 +\n                    seventh_digit)\n    \n    return phone_number\n\nans = solution()"
    ],
    "b2512ca447d44ce79e7439b887e4b561": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jon, miguel = symbols('jon miguel')\n    equation = Eq(jon, miguel + 0.3 * miguel)\n    total_money = Eq(jon + miguel, 46)\n    \n    solutions = solve((equation, total_money), (jon, miguel))\n    \n    return solutions[jon]\n\nans = solution()"
    ],
    "2089b724a45c4ed988606f4860fbeb30": [
        "def solution():\n    almonds_kg = 4/9\n    cashew_kg = 1/3\n    difference = almonds_kg - cashew_kg\n    return difference\n\nans = solution()"
    ],
    "2cf10171726c4ba39f1ef12370d42497": [
        "def solution():\n    # Singapore time is 7 hours ahead of London\n    time_difference = 7\n\n    # Plane took off from Singapore at 05:00\n    # When plane landed in London, the local time was 11:00\n\n    # Since Singapore is ahead, we subtract the time difference to find the time when the plane landed in Singapore's time\n    landing_time_singapore = 11 + time_difference # The time in Singapore when the plane landed\n\n    if landing_time_singapore >= 24:\n        # If the time calculated is greater than or equal to 24, we subtract 24 to get the time on the same day\n        landing_time_singapore -= 24\n\n    # The duration of the flight is the landing time in Singapore minus the takeoff time\n    duration = landing_time_singapore - 5\n\n    return duration\n\nans = solution()"
    ],
    "0dc187974a4f4bdc885566505c9ca033": [
        "def solution():\n    # Find the number that divided by 4 gives a quotient of 9 and remainder of 2\n    quotient = 9\n    remainder = 2\n    divisor = 4\n\n    # Calculate the correct dividend\n    dividend = (quotient * divisor) + remainder\n    return dividend\n\nans = solution()"
    ],
    "bb60d9d026a3416baa2d8cced7ed7efa": [
        "def solution():\n    first_day_pages = 20\n    daily_increase = 5\n    last_day_pages = 80\n\n    # Since the last day he read 80 pages, we need to find the day before the last\n    # We can use the formula for the nth term of an arithmetic sequence: nth_term = first_term + (n-1) * difference\n    # Let n = number of days before the last day\n    # 80 = first_day_pages + n * daily_increase\n    # Solve for n\n    n = (last_day_pages - first_day_pages) / daily_increase\n\n    # The total days will include the last day\n    total_days = n + 1\n\n    # Calculate total pages using the formula for the sum of an arithmetic sequence: sum = (n/2) * (first_term + last_term)\n    total_pages = (total_days / 2) * (first_day_pages + last_day_pages)\n\n    return int(total_pages)\n\nans = solution()"
    ],
    "05e8386eec1a4686bcceefeeec0da532": [
        "def solution():\n    sum_positive = sum(range(4, 55, 4))\n    sum_negative = sum(range(2, 53, 4))\n    ans = sum_positive - sum_negative\n    return ans\n\nans = solution()"
    ],
    "33806102632247718f0ca6cc3c4ae3cd": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 6), (4, 7), (1, 8)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "5f83a7f525c2424e93dbfaca3c6f9265": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys = symbols('boys')\n    girls = 40 - boys\n\n    equation = Eq(4 * boys - 3 * girls, 62)\n\n    solutions = solve(equation, boys)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "97ff1c826b9449ebba306715644e00d7": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 5):\n        S, A, M, O, G = p\n        if S == 0 or G == 0:  # Leading digit can't be 0\n            continue\n        SASMO = S*10000 + A*1000 + S*100 + M*10 + O\n        OGAMS = O*10000 + G*1000 + A*100 + M*10 + S\n        if SASMO * 4 == OGAMS:\n            return SASMO\n\nans = solution()"
    ],
    "9764b7f8732540ffab94bb9e73235bfc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cut_length = symbols('cut_length')\n    \n    equation = Eq(65 - cut_length, 3 * (29 - cut_length))\n    \n    cut_length_solution = solve(equation, cut_length)\n    \n    return cut_length_solution[0]\n\nans = solution()"
    ],
    "58b52e2f938546e89e5a64e5f2bf4334": [
        "def solution():\n    total_rolls = 30\n    probability_of_5 = 1 / 6\n\n    expected_number_of_5s = total_rolls * probability_of_5\n\n    return expected_number_of_5s\n\nans = solution()"
    ],
    "d8f72795c5214d67bdae537f6f2294cc": [
        "def solution():\n    sequence = []\n    for i in range(1, 11):\n        sequence.extend([i] * i)\n        \n    # Sort the list to find the median easily\n    sequence.sort()\n    \n    # Calculate the median\n    n = len(sequence)\n    if n % 2 == 1:\n        median = sequence[n//2]\n    else:\n        median = (sequence[n//2 - 1] + sequence[n//2]) / 2\n    \n    return median\n\nans = solution()"
    ],
    "645b71623d4d4b11a64007d32b21db61": [
        "def solution():\n    return 345 * 4\n\nans = solution()"
    ],
    "627fc9344fb748cca98e15cf87d2083a": [
        "def solution():\n    return 15 / 0.05\n\nans = solution()"
    ],
    "4f46c32b143a401aafbf4d6ead565a65": [
        "def solution():\n    return (12 / 18) * 6\n\nans = solution()"
    ],
    "60f6f205ec4c40bb89204475765d9532": [
        "def solution():\n    return 5 * 7 * 8\n\nans = solution()"
    ],
    "8cc478711c8f4086b30df7455059147a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    equation1 = Eq(A / B, 2 / 3)\n    equation2 = Eq(B / C, 6 / 5)\n    equation3 = Eq((A + B + C) / 3, 45)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "8cf1dcd99c234fe3bed14598d82e6dbf": [
        "def solution():\n    # Let's denote the cost of each dress as 'x'.\n    # Number of dresses bought is 6, and each costs 7x\n    total_cost_dresses = 6 * 7 * x\n    \n    # Number of skirts bought is 3, and each costs $35\n    total_cost_skirts = 3 * 35\n    \n    # Total amount spent is $441\n    total_spent = 441\n    \n    # We set up the equation for the total cost and solve for x\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(total_cost_dresses + total_cost_skirts, total_spent)\n    \n    # Solve for the cost of one dress\n    cost_dress = solve(equation, x)\n    \n    return cost_dress[0]\n\nans = solution()"
    ],
    "a9763e974eea446e92026fb8477bfbd4": [
        "def solution():\n    # There are 5 possible odd digits: 1, 3, 5, 7, 9\n    num_odd_digits = 5\n\n    # Each of the three positions in a 3-digit number can be one of these 5 digits\n    # Since we're looking for numbers comprising exclusively odd digits, the total \n    # number is simply 5 * 5 * 5 (multiplication principle)\n\n    count = num_odd_digits ** 3\n\n    return count\n\nans = solution()"
    ],
    "aa5f85b2df7440f382a1edca655a0195": [
        "def solution():\n    k = 2011\n    return k\n\nans = solution()"
    ],
    "bc1425cad1954c489bb66ff166a40ad5": [
        "def solution():\n    remainder_sum = 0\n    for i in range(1, 1000, 2):\n        remainder_sum += i**2 % 3\n    ans = remainder_sum % 3\n    return ans\n\nans = solution()"
    ],
    "d1aea7f5923c41419c0a7f013a821868": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    length, width = symbols('length width')\n\n    # Perimeter of the new rectangle\n    equation1 = Eq(2 * (length + 12) + 2 * width, 38)\n    \n    # Solve for length in terms of width\n    length_solution = solve(equation1, length)[0]\n\n    # Since length and width can vary, let's try for the smallest positive integer width\n    for w in range(1, 38):\n        if length_solution.subs(width, w) > 0:\n            break\n            \n    # Now calculate the perimeter of the original rectangle\n    original_perimeter = 2 * length_solution.subs(width, w) + 2 * w\n\n    return original_perimeter\n\nans = solution()"
    ],
    "b3933f96a6f64df2937f9504f73d4f93": [
        "def solution():\n    nell_ratio = 4\n    joe_ratio = 5\n    nell_sweets = 24\n\n    total_ratio = nell_ratio + joe_ratio\n    total_sweets = (nell_sweets / nell_ratio) * total_ratio\n    \n    return total_sweets\n\nans = solution()"
    ],
    "46886e982cd848a7abf837e5973c5ae7": [
        "def solution():\n    baby_chickens = 270\n    hens = (8 / 9) * baby_chickens\n    roosters = (1 / 4) * hens\n    return int(roosters)\n\nans = solution()"
    ],
    "5c4786655fca473fb242916467fa9779": [
        "def solution():\n    first_term = 2\n    difference = 4\n    n = 11\n\n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "7d339ab0e49d487d82f990bb57b18e62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the time it takes for the lazy decorator to paint the house alone\n    x = symbols('x')\n\n    # Since the energetic one can paint the house in 12 days, his work rate is 1/12 per day\n    # The lazy one's work rate is 1/x per day\n    # Together, their combined work rate is 1/8 per day (since it takes them 8 days)\n    # The equation for their work rates combined to finish painting is: 1/12 + 1/x = 1/8\n    # We need to solve this equation for x\n\n    equation = Eq(1/12 + 1/x, 1/8)\n\n    # Solve the equation\n    solutions = solve(equation, x)\n\n    # There should be only one physical (positive) solution\n    return solutions[0]\n\nans = solution()"
    ],
    "7fafcabd4a364cf7a536efe02bf4be6e": [
        "def solution():\n    for a in range(10):\n        for b in range(10):\n            if 10*a + b + 10*b + a + b == 100*a + 10*a + b:\n                return a + b\n\nans = solution()"
    ],
    "6c63ea0de1a8415980442a6c8569fc9d": [
        "def solution():\n    flour_per_student = 142\n    number_of_students = 123\n    total_flour = flour_per_student * number_of_students\n    return total_flour\n\nans = solution()"
    ],
    "563e040a6b604c99be6f021744a72867": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    sana, mina = symbols('sana mina')\n\n    # Initial conditions\n    equation1 = Eq(sana, 8 * mina)\n    equation2 = Eq(sana + mina, 234)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (sana, mina))\n\n    # Calculate how many coins Mina has left after giving away 12 coins\n    coins_left = solutions[mina] - 12\n\n    return coins_left\n\nans = solution()"
    ],
    "1af1519ce39648a5a5a614d850ea16ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of stamps Natasha has.\n    jamie_anne, natasha = symbols('jamie_anne natasha')\n    # Given ratio is jamie_anne : natasha = 5 : 3.\n    equation1 = Eq(jamie_anne, 5/3 * natasha)\n    # Jamie-Anne has 18 more stamps than Natasha.\n    equation2 = Eq(jamie_anne, natasha + 18)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (jamie_anne, natasha))\n\n    # Calculate the total number of stamps.\n    total_stamps = solutions[jamie_anne] + solutions[natasha]\n\n    return total_stamps\n\nans = solution()"
    ],
    "61a8f774aec24308b2fbbb6d4c4052db": [
        "def solution():\n    total_grapes = 210\n    sold_monday = total_grapes * (3 / 7)\n    remainder_after_monday = total_grapes - sold_monday\n    sold_tuesday = remainder_after_monday * (3 / 8)\n    remainder_after_tuesday = remainder_after_monday - sold_tuesday\n    grapes_per_bag = 3 / 4\n    \n    num_bags = remainder_after_tuesday / grapes_per_bag\n    return int(num_bags)\n\nans = solution()"
    ],
    "2f8eea7d70d643d9a9a6d7959dcc5596": [
        "def solution():\n    first_term = 81\n    difference = 75 - 81\n    n = 11\n\n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "a2b6115aec834dc68138160027844aaa": [
        "def solution():\n    count = 0\n    for i in range(1, 121):  # Pages from 1 to 120\n        count += str(i).count('7')\n    return count\n\nans = solution()"
    ],
    "8626a5ac5cd849a99b266ae11eb763c0": [
        "def solution():\n    flowers_per_side = 6\n    corners = 4\n    \n    # Since a flower is embroidered at each of the four corners, they are counted twice\n    # when counting flowers for each side. So subtracting the corners\n    total_flowers = (flowers_per_side * corners) - corners\n    \n    return total_flowers\n\nans = solution()"
    ],
    "e01a60afedfc47728af6bf6cd42afab2": [
        "def solution():\n    pence = 15\n    pounds_to_pence = 300  # £3.00 is 300p\n    percentage = (pence / pounds_to_pence) * 100\n    return percentage\n\nans = solution()"
    ],
    "53cbd8fd0f77499fb24e88ab3dcaacba": [
        "def solution():\n    # Uncle Sam crosses 10 intervals in 50 seconds (from the first to the eleventh lamp post)\n    time_for_one_interval = 50 / 10\n\n    # Find out how many intervals he crosses in 80 seconds\n    intervals_in_80_secs = 80 / time_for_one_interval\n\n    # The number of lamp posts he will cycle past is the number of intervals + 1 (starting lamp post)\n    lamp_posts = int(intervals_in_80_secs) + 1\n\n    return lamp_posts\n\nans = solution()"
    ],
    "7cec8a1b08d943669b99d263f87e4fa6": [
        "def solution():\n    original_price = 80 + 20\n    discount_amount = 20\n    discount_percent = (discount_amount / original_price) * 100\n    return discount_percent\n\nans = solution()"
    ],
    "44e8dcc102494f3192e7ebf223ca7d90": [
        "def solution():\n    ans = 6 - 18\n    return ans\n\nans = solution()"
    ],
    "2b8a88ca5fe7429ea82c73c3b8990e1b": [
        "def solution():\n    # The digit in the hundreds place has a value of 800, so it is 8.\n    hundreds = 8\n    \n    # The digit in the ones place is the sum of all the factors of 4.\n    # Factors of 4 are 1, 2 and 4.\n    ones = sum([1, 2, 4])\n    \n    # The digit in the thousands place is 1 more than the digit in the hundreds place.\n    thousands = hundreds + 1 # 9\n\n    # The digit in the tens place is the difference between the digit in the hundreds and the ones.\n    tens = hundreds - ones\n\n    # Forming the 5-digit number.\n    number = (4 * 10000) + (thousands * 1000) + (hundreds * 100) + (tens * 10) + ones\n\n    return number\n\nans = solution()"
    ],
    "89b9c39288374835a4dd1f8d8af530fd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_items = symbols('total_items')\n\n    # Let the total number of items be 'total_items'\n    # 2/3 of the items are apples, and 1/9 of the items are bananas.\n    apples = 2/3 * total_items\n    bananas = 1/9 * total_items\n    \n    # The rest are lemons, which means lemons = total_items - (apples + bananas)\n    lemons = total_items - (apples + bananas)\n    \n    # Rena bought 12 more apples than lemons.\n    equation = Eq(apples, lemons + 12)\n\n    # Solve the equation\n    solution = solve(equation, total_items)\n    if solution:\n        # Since lemons = total_items - (apples + bananas)\n        # Plug the solution into the number of lemons\n        num_lemons = lemons.subs(total_items, solution[0])\n        return num_lemons\n    else:\n        return None\n\nans = solution()"
    ],
    "7c04260dcb0743288f345e79968829c7": [
        "def solution():\n    original_price = 60 / (1 - 0.20)\n    discount_ana = 1 - (67.5 / original_price)\n    discount_percentage_ana = discount_ana * 100\n    \n    return discount_percentage_ana\n\nans = solution()"
    ],
    "9eb437e49efd42d88c006e74f9099f07": [
        "def solution():\n    length_basketball_court = 25\n    length_football_field = length_basketball_court + 56\n    return length_football_field\n\nans = solution()"
    ],
    "3fe7176a573649c389081f702880fe81": [
        "def solution():\n    for s in range(1, 1000):  # Check up to an arbitrarily large number for 's'.\n        for r in range(1, s):\n            if (3/10) < (r/s) < (5/16):\n                return s\n\nans = solution()"
    ],
    "aa03a281d4d94018a0064e56c41ee496": [
        "def solution():\n    ans = 1.3 - 0.02\n    return ans\n\nans = solution()"
    ],
    "278081b797fb4ba488225b7671c17347": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12*x - (7*x + 9), 1)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f21830983a5f48e28095fe2ece3c5a85": [
        "def solution():\n    first_two_days = 300 + 250\n    total_steering_wheels = first_two_days / (5/6)\n    return int(total_steering_wheels)\n\nans = solution()"
    ],
    "15ed9cc3ded941faafa1ff286a405f77": [
        "def solution():\n    time_per_pancake = 3 / 2  # Time taken to cook one pancake\n    pancakes_in_12_minutes = 12 / time_per_pancake\n\n    return int(pancakes_in_12_minutes)\n\nans = solution()"
    ],
    "439fae9a23bb4288adfdb67093fcdb41": [
        "def solution():\n    # Total capacity for children\n    total_child_capacity = 40\n    \n    # Number of children already on the bus\n    children_on_bus = 15\n    \n    # Remaining spots for children\n    remaining_child_spots = total_child_capacity - children_on_bus\n    \n    # Adult to children ratio\n    adult_to_child_ratio = 40 / 24\n    \n    # Equivalent number of adult spots taken by the remaining children spots\n    adult_spots_taken_by_children = remaining_child_spots / adult_to_child_ratio\n    \n    # Total capacity for adults\n    total_adult_capacity = 24\n    \n    # The greatest number of adults that could be on the bus\n    max_adults_on_bus = total_adult_capacity - adult_spots_taken_by_children\n    \n    return int(max_adults_on_bus)\n\nans = solution()"
    ],
    "9b046c316f30464f8998d4a3f5a6db6b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(4 - x, 5*x - 8)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "f7fa4272e23e482598b3fd2264f07a29": [
        "def solution():\n    def triangle_operation(a, b):\n        return (a + 2) / b\n    \n    inner_result = triangle_operation(6, 4)\n    ans = triangle_operation(8, inner_result)\n    \n    return ans\n\nans = solution()"
    ],
    "485363fa5d114e10aa5193dda256cebb": [
        "def solution():\n    from math import gcd\n\n    # Get the prime factors of 28\n    def prime_factors(n):\n        factors = []\n        # prime factorization for 2\n        while n % 2 == 0:\n            factors.append(2)\n            n //= 2\n        # prime factorization for odd factors\n        f = 3\n        while f * f <= n:\n            while n % f == 0:\n                factors.append(f)\n                n //= f\n            f += 2\n        if n > 1:\n            factors.append(n)\n        return factors\n\n    # Count each prime factor\n    factors = prime_factors(28)\n    factor_count = {}\n    for factor in factors:\n        if factor in factor_count:\n            factor_count[factor] += 1\n        else:\n            factor_count[factor] = 1\n\n    # Find the smallest number that would make each prime factor count even\n    smallest_multiplier = 1\n    for factor, count in factor_count.items():\n        if count % 2 != 0:\n            smallest_multiplier *= factor\n\n    return smallest_multiplier\n\nans = solution()"
    ],
    "64da3536e459433ea4a1e1ffe0974428": [
        "def solution():\n    num_students = 35\n    num_sizes = 3\n    \n    min_students_same_size = (num_students // num_sizes) + 1\n    \n    return min_students_same_size\n\nans = solution()"
    ],
    "bdd4de642a694795bd55c992b23b3398": [
        "def solution():\n    return 40 / 100 * 120\n\nans = solution()"
    ],
    "18b8daa61603447d8022fd9b8bc02b69": [
        "def solution():\n    for n in range(1, 40):\n        if (19 - 6) % n == n / 2:\n            return n\n\nans = solution()"
    ],
    "78cc1f0029db4e2baf026af900879af7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Russell's current age\n    russell = symbols('russell')\n\n    # Equation representing the given age condition\n    equation = Eq(russell + 32, 4 * (russell - 16))\n\n    # Solve the equation\n    solutions = solve(equation, russell)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "d0e55b24b2d94a99a067394ed0971714": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    salary = symbols('salary')\n\n    # Mr Krishnan spent $740 on a DVD player\n    remaining_after_dvd = salary - 740\n\n    # Spent 3/4 of the remaining money on a television set\n    remaining_after_tv = remaining_after_dvd - 3/4 * remaining_after_dvd\n\n    # if he had 1/5 of his salary left\n    equation = Eq(remaining_after_tv, 1/5 * salary)\n\n    # Solve for salary\n    solved_salary = solve(equation, salary)\n\n    return solved_salary[0]\n\nans = solution()"
    ],
    "311137556c874d4bb13b99f9b5117222": [
        "def solution():\n    # given that it takes 2 minutes to cut a metal rod up into two pieces\n    # this means one cut takes 2 minutes\n    # to cut a rod into 5 pieces, we need 4 cuts\n    num_cuts_needed = 5 - 1\n    time_per_cut = 2\n    total_time = num_cuts_needed * time_per_cut\n    return total_time\n\nans = solution()"
    ],
    "0574b4ea3bce459692a79ced3c88cee6": [
        "def solution():\n    # Let m be the number of math books.\n    # Total spelling books is given as 72, thus the number of shelves with spelling books is 72/9.\n    spelling_shelves = 72 // 9\n    # Total shelves are 15, so the remaining shelves will have math books.\n    math_shelves = 15 - spelling_shelves\n    # Each shelf with math books contains 4 math books.\n    m = math_shelves * 4\n    return m\n\nans = solution()"
    ],
    "f7751c2233f24b7d9dbfbe6d168ddef9": [
        "def solution():\n    # Iterate through all the possible values for A and B\n    # Since the thousands digit and the units digit must be same,\n    # we only need to iterate A from 1 to 9 and B from 0 to 9.\n    for A in range(1, 10):\n        for B in range(0, 10):\n            # Create Pip's number using the digits A and B\n            Pips_number = int(f\"{A}{B}{B}{A}\")\n            # Create Bud's number by reversing the units and tens digits of Pip's number\n            Buds_number = int(f\"{A}{A}{B}{B}\")\n            # Check if the sum of Pip's and Bud's numbers equals 5510\n            if Pips_number + Buds_number == 5510:\n                return Pips_number\n\nans = solution()"
    ],
    "965c2ac5dad34d4fa1d38ad774207e9a": [
        "def solution():\n    ans = 3 + 2 * 5\n    return ans\n\nans = solution()"
    ],
    "ca4820ab45754f35b7d59a04967d1276": [
        "def solution():\n    daily_earnings = 90\n    total_days = 7  # From Monday to Sunday is 7 days\n    \n    total_earnings = daily_earnings * total_days\n    \n    return total_earnings\n\nans = solution()"
    ],
    "fd624218613f48f49c62fe0c615eab9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Class 6A initially had x students, and Class 6B initially had y students.\n    x, y = symbols('x y')\n    \n    # According to the problem, we have two equations:\n    # 1) x = 4/9 * y (the number of students in Class 6A was 4/9 the number of students in Class 6B)\n    # 2) x - 3 + 18 = y + 3 - 18 (after reshuffling, the number of students in both classes are equal)\n    equation1 = Eq(x, 4/9 * y)\n    equation2 = Eq(x + 15, y - 15)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "295414faedcc466dba1a6853455af3c4": [
        "def solution():\n    # Jeffrey walks from the first floor to the fourth floor in 6 minutes.\n    # This is a difference of 3 floors (from 1st to 4th floor: 2nd, 3rd, 4th).\n    time_for_three_floors = 6\n\n    # We need to find the time it takes to walk from the first floor to the tenth floor.\n    # This is a difference of 9 floors (from 1st to 10th floor: 2nd, 3rd, ..., 10th).\n    total_floors_to_walk = 9\n\n    # The time it takes to walk each floor is constant, so we can find the time for one floor first.\n    time_per_floor = time_for_three_floors / 3\n\n    # Then, we multiply the time for one floor by the total number of floors to walk from\n    # the first to the tenth floor.\n    total_time = time_per_floor * total_floors_to_walk\n\n    return total_time\n\nans = solution()"
    ],
    "f5f0fa861ee84ff5baf0932a2cdd79df": [
        "def solution():\n    luna_flowers = 15\n    harry_flowers = luna_flowers - 3\n\n    return harry_flowers\n\nans = solution()"
    ],
    "065ea362f1f84acd909b64af10328dd1": [
        "def solution():\n    pasta_choices = 2\n    sauce_choices = 3\n    topping_choices = 2\n\n    total_combinations = pasta_choices * sauce_choices * topping_choices\n\n    return total_combinations\n\nans = solution()"
    ],
    "1bee8ef3713140f195baa78f51579340": [
        "def solution():\n    n = 32 / 2\n    return n\n\nans = solution()"
    ],
    "b096b994b81c439089e43a5964dae9ae": [
        "def solution():\n    # Calculate the time for each part of the race\n    time1 = 280 / 7\n    time2 = 400 / 5\n    time3 = (800 - (280 + 400)) / 8\n\n    # Sum the times to get the total time\n    total_time = time1 + time2 + time3\n\n    return total_time\n\nans = solution()"
    ],
    "ed4d903eb27d49279a669eb29f697081": [
        "def solution():\n    # Initial number of students must be a multiple of 16 to allow 8th and 16th to be opposite\n    # After new students join, the total number must be a multiple of 22 for the same condition\n    \n    initial_students = 16  # Starting with the smallest multiple that fits the first condition\n    while True:\n        # Check if the number is also a multiple of 22 when new students join\n        if (initial_students * 2) % 22 == 0:\n            break\n        initial_students += 16  # Try the next multiple of 16\n        \n    new_total_students = initial_students * 2  # Total students after new ones join\n    new_students = new_total_students - initial_students  # Number of new students joining\n    return new_students\n\nans = solution()"
    ],
    "ea4fdc5ca1cf4568b300810db0eaa9e2": [
        "def solution():\n    ans = 180 - (9 * 6) - (7 * 6)\n    return ans\n\nans = solution()"
    ],
    "4ceaa57063624f489d2a91560349d225": [
        "from math import factorial\n\ndef solution():\n    total_cards = 4 + 3 + 7\n    yellow_cards = 4\n    red_cards = 3\n    green_cards = 7\n\n    ans = factorial(total_cards) // (factorial(yellow_cards) * factorial(red_cards) * factorial(green_cards))\n    return ans\n\nans = solution()"
    ],
    "111ec186a6084484b7572731bc3bcb77": [
        "def solution():\n    total_digits = 0\n\n    for i in range(1, 268 + 1):\n        total_digits += len(str(i))\n\n    return total_digits\n\nans = solution()"
    ],
    "a49805b294c44372af6c664415044e6a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lollipops, gum_drops = symbols('lollipops gum_drops')\n\n    # original ratio of lollipops to gum drops\n    equation1 = Eq(lollipops / gum_drops, 5/7)\n\n    # after adding 120 pieces of candy of each kind\n    equation2 = Eq((lollipops + 120) / (gum_drops + 120), 4/5)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (lollipops, gum_drops))\n\n    # calculate the total number of pieces of candy now\n    total_candy_now = solutions[lollipops] + solutions[gum_drops] + 240\n\n    return total_candy_now\n\nans = solution()"
    ],
    "1ec6272d9b5f4fb681677cca4ba5a3ef": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of marbles Anna, Betsy, and Charlene have at the end as a, b, and c, respectively.\n    a, b, c = symbols('a b c')\n\n    # We know the total number of marbles.\n    total_marbles = Eq(a + b + c, 168)\n\n    # We are given the final ratio of marbles.\n    ratio_a = Eq(a, 2)\n    ratio_b = Eq(b, 5)\n    ratio_c = Eq(c, 7)\n    \n    # Express the final number of marbles each has in terms of a common variable, x.\n    x = symbols('x')\n    ratios = Eq(a, 2*x)\n    ratios &= Eq(b, 5*x)\n    ratios &= Eq(c, 7*x)\n\n    # Combine the equations.\n    system = (total_marbles, ratios)\n\n    # Solve the system for the number of marbles each person has at the end, in terms of x.\n    solutions = solve(system, (a, b, c, x))\n\n    # Find the value of x.\n    x_value = solutions[x]\n\n    # Calculate the number of marbles each had at the end.\n    a_end = 2 * x_value\n    b_end = 5 * x_value\n    c_end = 7 * x_value\n\n    # Work backwards to find how many marbles Betsy had at first.\n    # Betsy's initial state: (b_end + 8) - 15, since Betsy gave 8 to Anna, and previously received 15 from Charlene\n    b_initial = (b_end + 8) - 15\n\n    return b_initial\n\nans = solution()"
    ],
    "b8665b34ac3a4d59aa8061f1eb6eec07": [
        "def solution():\n    return 854 * 100\n\nans = solution()"
    ],
    "006665a313c24b1a92752af5e31bc16a": [
        "def solution():\n    digits = [4, 5, 7]\n    count = 0\n\n    for d1 in digits:\n        for d2 in digits:\n            for d3 in digits:\n                if (d1 * 100 + d2 * 10 + d3) % 2 != 0:\n                    count += 1\n\n    return count\n\nans = solution()"
    ],
    "22718af89a8243c19613574db590d256": [
        "def solution():\n    count_5 = 200 // 5\n    count_7 = 200 // 7\n    count_5_and_7 = 200 // (5 * 7)\n\n    ans = count_5 + count_7 - count_5_and_7\n    return ans\n\nans = solution()"
    ],
    "ec4f8ef8e4e24394bc6bbee281e961db": [
        "def solution():\n    chocolate_per_biscuit = 40 / 100\n    chocolate_needed = chocolate_per_biscuit * 75\n\n    return chocolate_needed\n\nans = solution()"
    ],
    "6dff7252335c45c0a2fdec728a95565a": [
        "def solution():\n    from math import gcd\n\n    # dimensions of the rectangular piece of paper\n    width_m = 1.36\n    height_m = 0.8\n\n    # converting meters to centimeters to work with whole numbers\n    width_cm = int(width_m * 100)\n    height_cm = int(height_m * 100)\n\n    # largest square size is determined by the greatest common divisor\n    square_size = gcd(width_cm, height_cm)\n\n    # determine the number of squares by dividing the area of the rectangle\n    # by the area of the largest possible square\n    num_squares = (width_cm // square_size) * (height_cm // square_size)\n\n    return num_squares\n\nans = solution()"
    ],
    "88c5dedae77f46f589b56a149633c09c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the prices of each fruit\n    durian, pineapple, watermelon = symbols('durian pineapple watermelon')\n    \n    # Chris's purchase equation\n    eq1 = Eq(durian + 2 * pineapple + 3 * watermelon, 440)\n    \n    # Dylan's purchase equation\n    eq2 = Eq(4 * durian + 6 * pineapple + 9 * watermelon, 1625)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (durian, pineapple, watermelon))\n    \n    # Return the price of one durian\n    return solutions[durian]\n\nans = solution()"
    ],
    "4ea645a34f3a435db4d0fc57a7f2a099": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 101))\n    return ans\n\nans = solution()"
    ],
    "092c73eab03d47ef9afdbfaf1c46b4ee": [
        "def solution():\n    original_number = symbols('original_number')\n\n    modified_number = original_number - 10 * original_number % 10\n    equation = Eq(modified_number, original_number - 135)\n\n    solution = solve(equation, original_number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f5082b520e464b9a9b6f7696942bc7de": [
        "def solution():\n    ans = (10 + 1/20 + (3 - 0.85) / (5/6)) / 505.2\n    return ans\n\nans = solution()"
    ],
    "5cd17b7047fd44e184eb28205a77c263": [
        "def solution():\n    # Let n be the number of teams\n    for n in range(1, 31): # since there are 30 matches, we will not have more than 30 teams\n        # Every team plays with every other team twice\n        # The total matches will be n*(n-1) as each team plays n-1 other teams\n        # Since each pair of teams plays twice, we divide by 2 to count each match only once\n        matches = (n * (n - 1)) // 2 # Division by 2 is integer division because matches must be a whole number\n        if matches == 30:\n            return n\n\nans = solution()"
    ],
    "77ba726662b34445bc8b3b0c966cb3ac": [
        "def solution():\n    return (49 * 57) + 7\n\nans = solution()"
    ],
    "77c2ba769a7047048ada0b99188fd52a": [
        "def solution():\n    ones = 7\n    tens = 2\n    hundreds = 3\n\n    number = hundreds * 100 + tens * 10 + ones\n\n    return number\n\nans = solution()"
    ],
    "859adbbe512546a0b75ae0bf0e8f181d": [
        "def solution():\n    students = 37\n    boat_capacity = 5\n\n    # One trip includes a trip to the opposite side and the return of the boat\n    if students % boat_capacity == 0:\n        total_trips = 2 * (students // boat_capacity) - 1\n    else:\n        # Additional trip for the remainder students\n        total_trips = 2 * (students // boat_capacity) + 1\n\n    return total_trips\n\nans = solution()"
    ],
    "3afaef15c6e14038b0ae9b8cc73f4661": [
        "def solution():\n    ans = -7 + -3\n    return ans\n\nans = solution()"
    ],
    "5a33774640ef42fbb9d5c0f6fadf05ae": [
        "def solution():\n    # Calculate the factorial of a number using the math library\n    import math\n\n    # Calculate 100!, 99!, and 98! using factorial function from math library\n    factorial_100 = math.factorial(100)\n    factorial_99 = math.factorial(99)\n    factorial_98 = math.factorial(98)\n\n    # Calculate the expression\n    ans = factorial_100 / (factorial_99 + factorial_98)\n\n    return ans\n\nans = solution()"
    ],
    "5b9cd44e2a8d46b2b9f5c8533ec96089": [
        "def solution():\n    # Let the total number of students be x.\n    # According to the problem,\n    # 80% chose Grade A Math, which is 0.8 * x.\n    # 35% chose Grade B Math, which is 0.35 * x.\n    # 10% chose neither, which is 0.1 * x.\n    # 75 students chose both, which is the intersection of A and B.\n    \n    # Considering the Inclusion-Exclusion Principle:\n    # Number of students choosing either A or B = Students choosing A + Students choosing B - Students choosing both\n    # Students not choosing any = 10% of total students\n    \n    # Then we can write the equation:\n    # x = 0.8 * x + 0.35 * x - 75 - 0.1 * x\n\n    # Simplifying the equation gives:\n    # x = (0.8 + 0.35 - 0.1) * x - 75\n    # x = 1.05 * x - 75\n    # 0.05 * x = 75\n    # x = 75 / 0.05\n    x = 75 / 0.05\n    return int(x)\n\nans = solution()"
    ],
    "8a24c57fe2014f94b5b8a95629a79a2d": [
        "from itertools import permutations\n\ndef solution():\n    all_numbers = [''.join(p) for p in permutations('1469')]\n    all_numbers = [int(num) for num in all_numbers]\n    average = sum(all_numbers) / len(all_numbers)\n    return average\n\nans = solution()"
    ],
    "b17c4c6265e04390be67da9c493fc323": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for Frank, Alex, and Paul's ages\n    frank, alex, paul = symbols('frank alex paul')\n\n    # Given relationships\n    equation1 = Eq(frank - alex, alex - paul)\n    equation2 = Eq(frank + alex + paul, 99)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (frank, alex, paul))\n\n    # Alex's age\n    return solutions[alex]\n\nans = solution()"
    ],
    "998af0079c4247a1989e0807c81a7b0b": [
        "from itertools import permutations\nfrom sympy import factorint\n\ndef solution():\n    # Generate all possible combinations of 9 numbers from 1 to 13\n    all_combinations = list(permutations(range(1, 14), 9))\n\n    # Check for valid combinations based on the problem statement\n    valid_combinations = []\n    for combo in all_combinations:\n        factors_count = [len(factorint(num).keys()) for num in combo]\n        if factors_count.count(1) == 2:  # Two students know their number of factors (prime numbers)\n            for i, num in enumerate(combo):\n                alice_num_idx = (i + 1) % 9\n                mark_num_idx = (i - 1) % 9\n                alice_num = combo[alice_num_idx]\n                mark_num = combo[mark_num_idx]\n                may_num = combo[i]\n                # Check Alice's statement: unknown number but knows it's odd\n                # Check May's statement: number smaller than Alice's by 2 and bigger than Mark's by 1\n                if num % 2 == 1 and may_num == alice_num - 2 and may_num == mark_num + 1:\n                    valid_combinations.append(combo)\n\n    # Calculate the product of the four numbers that were not picked\n    valid_products = []\n    for valid_combo in valid_combinations:\n        remaining_numbers = set(range(1, 14)) - set(valid_combo)\n        product = 1\n        for number in remaining_numbers:\n            product *= number\n        valid_products.append(product)\n\n    return max(valid_products) if valid_products else None\n\nans = solution()"
    ],
    "39bfd666abde40ed9ef0dbeb23faa055": [
        "def solution():\n    short_rope_length = 20\n    long_rope_length = 5 * short_rope_length\n    total_length = short_rope_length + long_rope_length\n    return total_length\n\nans = solution()"
    ],
    "6a4c9fce03a84201b80dea6e9a6cd7cf": [
        "def solution():\n    bowls_per_jug = 3\n    jugs_per_pail = 2\n\n    bowls_per_pail = bowls_per_jug * jugs_per_pail\n\n    return bowls_per_pail\n\nans = solution()"
    ],
    "4a286a0dcf7a4ca5a4d61c7e63b2cb90": [
        "def solution():\n    hundreds_place = 9  # greatest 1-digit number\n    possible_digits = [0, 1, 2, 3, 4, 5, 6, 7, 8]  # excluding 9\n    for tens in possible_digits:\n        ones = 15 - tens  # The sum of tens and ones is 15\n        if ones in possible_digits and tens != ones and ones % 2 == 0:  # digits must be different and even\n            return hundreds_place * 100 + tens * 10 + ones\n\nans = solution()"
    ],
    "1820577397204c509b1907b2ea4c2a5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n\n    # Initially, the number of boys and girls is equal\n    equation1 = Eq(boys, girls)\n\n    # After 60 boys and 12 girls left, the number of girls became twice the number of boys\n    equation2 = Eq(girls - 12, 2 * (boys - 60))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "959efbb55d9940c8a07132d59f0420ff": [
        "def solution():\n    # Speed of van and car\n    speed_van = 80  # km/h\n    speed_car = 120 # km/h\n\n    # Time delay before car starts\n    delay = 3  # hours\n\n    # During the delay, the van travels for 3 hours, so the distance it covers is:\n    distance_van_start = speed_van * delay\n\n    # Relative speed of car with respect to van\n    relative_speed = speed_car - speed_van\n\n    # Time taken for car to catch up with the van\n    catch_up_time = distance_van_start / relative_speed\n\n    return catch_up_time\n\nans = solution()"
    ],
    "eba97ef5f84146c19418485d0ecbe151": [
        "def solution():\n    # hats are optional, so Wendy can choose 0 to 4 hats: 5 possibilities\n    hats = 5\n    # Wendy has to choose 3 shirts: 1 possibility\n    shirts = 1\n    # Wendy has to choose 2 pairs of pants: 1 possibility\n    pants = 1\n    # Wendy has to choose 1 skirt: 1 possibility\n    skirt = 1\n\n    # Total combinations = product of individual choices\n    total_combinations = hats * shirts * pants * skirt\n\n    return total_combinations\n\nans = solution()"
    ],
    "93563e24dcde4ff39e2fadedcde819a3": [
        "def solution():\n    # Convert repeating decimal to fraction\n    # Recurring decimal 0.01 can be represented as 1/99\n    numerator = 1\n    denominator = 99\n\n    # Square of 1/99 is the product\n    numerator_sq = numerator**2\n    denominator_sq = denominator**2\n    fraction_product = f\"{numerator_sq}/{denominator_sq}\"\n\n    # Find the length of the repetend of the product\n    # For 0.01^2 = 1^2 / 99^2 = 1 / 9801\n    # The length of the repetend in the denominator is the number of digits in 9801\n    # which is 4, since 9801 is a 4-digit number.\n    repetend_length = len(str(denominator_sq))\n\n    return repetend_length\n\nans = solution()"
    ],
    "d559f399083a49ba9b8396e4af839356": [
        "def solution():\n    ans = 72 * 43\n    return ans\n\nans = solution()"
    ],
    "689ae8da46554adf826beb1a55700c76": [
        "def solution():\n    time_A = 12      # time taken by printer A to print 300 pages\n    time_B = 10      # time taken by printer B to print 300 pages\n    half_hour = 30   # half an hour in minutes\n\n    rate_A = 300 / time_A   # rate at which printer A prints pages per minute\n    rate_B = 300 / time_B   # rate at which printer B prints pages per minute\n\n    combined_rate = rate_A + rate_B   # combined rate per minute\n    total_pages = combined_rate * half_hour  # total pages printed in half an hour\n\n    return int(total_pages)\n\nans = solution()"
    ],
    "adc0111f2b2c4d378ae08bcd6ee30b74": [
        "def solution():\n    ans = 33033\n    return ans\n\nans = solution()"
    ],
    "2a4b4cb16018411e860c36a08fa77b24": [
        "def solution():\n    count = 0\n    for month in range(1, 13):\n        for day in range(1, 32):\n            if month == 2 and day > 28: \n                continue\n            if month in [4, 6, 9, 11] and day > 30:\n                continue\n            date_string = f\"{day:02d}/{month:02d}/2019\"\n            count += date_string.count(\"3\")\n    return count\n\nans = solution()"
    ],
    "993780e2460e4c75a69e44c4d42adb9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_items = symbols('total_items')\n\n    # 2/3 of the total items are apples\n    apples = (2/3) * total_items\n\n    # 1/9 of the total items are bananas\n    bananas = (1/9) * total_items\n\n    # The rest are lemons\n    lemons = total_items - (apples + bananas)\n\n    # She bought 12 more apples than lemons\n    equation = Eq(apples - lemons, 12)\n\n    # Solve the equation\n    result = solve(equation, total_items)\n\n    # Number of lemons is total_items minus apples minus bananas\n    num_lemons = result[0] - (result[0] * (2/3 + 1/9))\n\n    return int(num_lemons)\n\nans = solution()"
    ],
    "de32aa63739340c1b48d956920574cde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Using symbols to represent the number of durian, chocolate, and strawberry puffs sold\n    durian_puffs, chocolate_puffs, strawberry_puffs = symbols('durian_puffs chocolate_puffs strawberry_puffs')\n\n    # Given ratio 3:4:2\n    equation1 = Eq(durian_puffs, 3/9 * (durian_puffs + chocolate_puffs + strawberry_puffs))\n    equation2 = Eq(chocolate_puffs, 4/9 * (durian_puffs + chocolate_puffs + strawberry_puffs))\n    equation3 = Eq(strawberry_puffs, 2/9 * (durian_puffs + chocolate_puffs + strawberry_puffs))\n\n    # Total amount collected from the sale of puffs\n    total_sales = Eq(5*durian_puffs + 3*chocolate_puffs + 4*strawberry_puffs, 560)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3, total_sales), (durian_puffs, chocolate_puffs, strawberry_puffs))\n\n    # Calculate and return the amount collected from the sale of durian puffs\n    money_collected_from_durian = 5 * solutions[durian_puffs]\n\n    return money_collected_from_durian\n\nans = solution()"
    ],
    "92b5600f34c745cc9d5dd15bf5842acc": [
        "def solution():\n    for tens in range(1, 10):\n        for ones in range(10):\n            original_number = tens * 10 + ones\n            swapped_number = ones * 10 + tens\n            if swapped_number == (original_number // 3) + 3:\n                return original_number\n\nans = solution()"
    ],
    "bbf5395114fa4ebba02cabdc25eef45a": [
        "def solution():\n    # Since the cuboid is 7x5x14, and it is cut into 490 small cubes (7x5x14=490), \n    # each small cube is of size 1x1x1.\n    # Only the cubes in the corners of the cuboid will have exactly three faces painted.\n    # There are 8 corners on a cuboid.\n\n    num_corners = 8\n    \n    return num_corners\n\nans = solution()"
    ],
    "a72c43c3bde841a3810fb516a1d277f4": [
        "def solution():\n    from math import gcd\n\n    # Number of students from each school\n    school1 = 24\n    school2 = 36\n    school3 = 42\n\n    # Calculate the greatest common divisor of the three numbers\n    ans = gcd(gcd(school1, school2), school3)\n\n    return ans\n\nans = solution()"
    ],
    "64b747db943b470e8d5bcc4cd037f8bc": [
        "def solution():\n    principal = 10000\n    rate_first_period = 1.191  # The product of three years at 6% compounded yearly\n    rate_second_period = 1.166  # The product of two years at 8% compounded yearly\n\n    # Compound for the first three years\n    amount_after_first_period = principal * rate_first_period\n    \n    # Now compound the amount after three years for the next two years\n    total_amount = amount_after_first_period * rate_second_period\n\n    # Rounding to the nearest hundredth\n    ans = round(total_amount, 2)\n\n    return ans\n\nans = solution()"
    ],
    "97e7c5c45535473c925714e02efb350b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of one raisin roll and one donut\n    raisin_roll, donut = symbols('raisin_roll donut')\n\n    # Given equations based on the problem statement\n    equation1 = Eq(5 * raisin_roll + 6 * donut, 14.70)\n    equation2 = Eq(raisin_roll, 3 * donut)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (raisin_roll, donut))\n\n    # Get the cost of a raisin roll\n    return solutions[raisin_roll]\n\nans = solution()"
    ],
    "beed278a1bed4c50a92eafa931245d88": [
        "def solution():\n    ans = 200 - 100 / 5 + 200\n    return ans\n\nans = solution()"
    ],
    "9ec93e5371534d979ad30c4708659ad9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the levels at which A, B, C, D, Zachary, Yvonne, Xavier, and Waylon live in the apartment\n    A, B, C, D, Zachary, Yvonne, Xavier, Waylon = symbols('A B C D Zachary Yvonne Xavier Waylon', integer=True)\n    \n    # Define the equations based on the given conditions\n    equations = [\n        Eq(A, Zachary),         # A is Zachary\n        Eq(B, Yvonne),          # B is Yvonne\n        Eq(C, Xavier),          # C is Xavier\n        Eq(D, Waylon),          # D is Waylon\n        A < D,                  # Condition (1)\n        A > C,                  # Condition (1)\n        B < C,                  # Condition (2)\n        Eq(D, 5 * B),           # Condition (3)\n        Eq(Zachary + 2 - Xavier, Zachary - Waylon),  # Condition (4)\n        Eq(Zachary, Yvonne + Xavier)  # Condition (5)\n    ]\n\n    # The levels are between 1 and 18\n    domain = And(*[level >= 1 for level in [A, B, C, D]], *[level <= 18 for level in [A, B, C, D]])\n\n    # Find all solutions that satisfy the equations and domain\n    solutions = solve(equations + [domain], (A, B, C, D, Zachary, Yvonne, Xavier, Waylon), dict=True)\n\n    # Assuming at least one solution exists, return the level at which A (Zachary) stays\n    return solutions[0][A] if solutions else None\n\nans = solution()"
    ],
    "c0de10f834e9467fb65b332409f0b795": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n    \n    equation1 = Eq(3*notebook + 4*pencil_case + 5*eraser, 50)\n    equation2 = Eq(notebook + pencil_case, 6)\n    equation3 = Eq(pencil_case + eraser, 9)\n    \n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n    \n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "907abf99743b45bcb21f5e10053628da": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(1, 10):\n            for units in range(1, 10):\n                if hundreds % tens == 0 and hundreds % units == 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "9626ae3648b54685b675bed33b248975": [
        "def solution():\n    loafs_per_cup = 6 / 5\n    desired_loafs = 24\n    cups_needed = desired_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "e70904d7218642df8d9ac82e9cbb1818": [
        "def solution():\n    total_numbers = 12 * (12 + 1) // 2  # Sum of first 12 natural numbers to get the total count of elements\n    median_position = total_numbers // 2\n    \n    # Find out the number at the median position\n    current_number = 1\n    while median_position > current_number:\n        median_position -= current_number\n        current_number += 1\n    \n    # In the case of an even number of elements, median is the average of the two middle elements\n    if total_numbers % 2 == 0:\n        next_number = current_number if median_position == current_number else current_number + 1\n        median = (current_number + next_number) / 2\n    else:\n        median = current_number\n\n    return median\n\nans = solution()"
    ],
    "f026bb192f0f4088a86ad13d7cc26d86": [
        "def solution():\n    from itertools import permutations\n\n    digits = [4, 5, 8]\n    perm = permutations(digits)\n    \n    count = len(list(perm))\n    \n    return count\n\nans = solution()"
    ],
    "d16475774e2d40e298ca4d00de004671": [
        "def solution():\n    # For an arithmetic sequence, the sum of the first n terms (S_n) is given by:\n    # S_n = n/2 * (2a + (n-1)d), where\n    # a is the first term and d is the common difference between the terms.\n    \n    # We have two equations given from the problem:\n    # S_9 = 99 and S_27 = 540\n    # S_9 = 9/2 * (2a + (9-1)d) => 99 = 9/2 * (2a + 8d)\n    # S_27 = 27/2 * (2a + (27-1)d) => 540 = 27/2 * (2a + 26d)\n    \n    # Simplify the equations:\n    # 99 = 9/2 * (2a + 8d) => 22 = 2a + 8d\n    # 540 = 27/2 * (2a + 26d) => 40 = 2a + 26d\n    \n    # Using the two equations above, we will solve for a and d:\n    from sympy import symbols, Eq, solve\n\n    a, d = symbols('a d')\n    equation1 = Eq(22, 2*a + 8*d)\n    equation2 = Eq(40, 2*a + 26*d)\n\n    solutions = solve((equation1, equation2), (a, d))\n\n    # Now that we have a and d, we can find the sum of the first 16 terms:\n    # S_16 = 16/2 * (2a + (16-1)d)\n    a_value = solutions[a]\n    d_value = solutions[d]\n    S_16 = 16/2 * (2*a_value + (16-1)*d_value)\n\n    return S_16\n\nans = solution()"
    ],
    "2989d3782ec842dcb36b4a949d8588db": [
        "def solution():\n    total_people = 216\n    teachers = 139\n    children = total_people - teachers\n    return children\n\nans = solution()"
    ],
    "d26a5497d6514135ba9d0ea0f54b8bb4": [
        "def solution():\n    count = 0\n    for i in range(7, 41):\n        count += len(str(i))\n    return count\n\nans = solution()"
    ],
    "26c05d1067be4f228420a8d03d60d1f1": [
        "def solution():\n    red_flash_rate = 4\n    green_flash_rate = 6\n    \n    # Find number of flashes in an hour\n    red_flashes_per_hour = 60 * red_flash_rate\n    green_flashes_per_hour = 60 * green_flash_rate\n    \n    # Find the Least Common Multiple (LCM) of the two rates to get the same flash rate\n    lcm = (red_flashes_per_hour * green_flashes_per_hour) // math.gcd(red_flashes_per_hour, green_flashes_per_hour)\n    \n    # Find how many times they flash together in an hour\n    flashes_together_per_hour = 60 // (lcm // red_flashes_per_hour)\n    \n    # Including the first time they flash at the same instant\n    ans = flashes_together_per_hour + 1\n    \n    return ans\n\nimport math\nans = solution()"
    ],
    "bd83c15a08c149f196a2f6caf1bec626": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number we are thinking of as x.\n    x = symbols('x')\n\n    # Set up the equation according to the problem statement.\n    # The equation is 3*x + 1 = 22\n    equation = Eq(3 * x + 1, 22)\n\n    # Solve the equation.\n    solved = solve(equation, x)\n    \n    # Return the solution.\n    return solved[0]\n\nans = solution()"
    ],
    "b89d2244ef89497f80cc165487752747": [
        "def solution():\n    total_paintings = 120\n    landscapes = int(0.40 * total_paintings)\n    still_lifes = total_paintings - landscapes\n    \n    french_artists_landscapes = 25\n    total_french_artists = 40\n    french_artists_still_lifes = total_french_artists - french_artists_landscapes\n    \n    not_french_still_lifes = still_lifes - french_artists_still_lifes\n    \n    return not_french_still_lifes\n\nans = solution()"
    ],
    "8a316589158f4d3da421f3970c3ae486": [
        "def solution():\n    total_drink = 60 + 780  # Total volume of rose drink\n    max_volume_per_glass = total_drink // 9  # Maximum volume of drink in each glass evenly\n\n    return max_volume_per_glass\n\nans = solution()"
    ],
    "dc48d7be2274447aa61b412cef4e1d7b": [
        "def solution():\n    total_weight = 100 + 400\n    rice_in_first_mixture = 100 * 0.5\n    rice_in_second_mixture = 400 * 0.8\n    total_rice = rice_in_first_mixture + rice_in_second_mixture\n    concentration_of_rice = (total_rice / total_weight) * 100\n    return concentration_of_rice\n\nans = solution()"
    ],
    "c347b5871cff46138c8d8bcabd9edb4d": [
        "def solution():\n    speed_m_per_min = 24\n    time_seconds = 300\n    \n    meters_ridden = speed_m_per_min * (time_seconds / 60)\n    \n    return meters_ridden\n\nans = solution()"
    ],
    "d495a6229050459d9704caa6c86a306f": [
        "def solution():\n    # Group stage: 4 teams play a single round-robin tournament, \n    # which is 3 games for each team.\n    group_games_per_team = 3\n    teams_per_group = 4\n    total_groups = 8\n\n    # Total group stage games\n    group_stage_games = (group_games_per_team * (teams_per_group / 2)) * total_groups\n\n    # Knockout stage:\n    # For each stage in the knockout, we have one game per match-up.\n    # There are 16 teams in the round of 16, 8 teams in the quarter-finals,\n    # 4 teams in the semi-finals, 2 teams in the third place play-off and the final.\n    # Each pair of teams plays one game, so we divide the number of teams by 2.\n\n    # Round of 16\n    round_of_16_games = 16 / 2\n    # Quarter-finals\n    quarter_finals_games = 8 / 2\n    # Semi-finals\n    semi_finals_games = 4 / 2\n    # Third place play-off and final\n    third_place_and_final_games = 2\n\n    # Total knockout stage games\n    knockout_stage_games = (round_of_16_games + quarter_finals_games + \n                            semi_finals_games + third_place_and_final_games)\n\n    # Total games played throughout the World Cup\n    total_games = group_stage_games + knockout_stage_games\n\n    return int(total_games)\n\nans = solution()"
    ],
    "25e1b3f1ea544f5fb040500722f553f5": [
        "def solution():\n    total = 0\n    for i in range(1, 2018):\n        total += int('2' * i)\n    ans = str(total)[-5:]\n    return int(ans)\n\nans = solution()"
    ],
    "e847f4218f9d4d7db291515e8c3a7f1e": [
        "def solution():\n    horses_initial = 12\n    days_initial = 15\n    horses_final = 20\n\n    # Using the unitary method, first find how many days one horse can feed on the pile of hay\n    days_per_horse = horses_initial * days_initial\n\n    # Then find how many days 20 horses can feed on the same pile of hay\n    days_for_20_horses = days_per_horse / horses_final\n\n    return days_for_20_horses\n\nans = solution()"
    ],
    "93719c34b1574999936ad00f94cad2e8": [
        "def solution():\n    return 30.03 - 3.3\n\nans = solution()"
    ],
    "7181abe12a9441efa29c9b6450170e13": [
        "def solution():\n    # Let x be the number of years later\n    # Oliver's age in x years: 20 + x\n    # Lin's age in x years: 26 + x\n    # Their combined age in x years: (20 + x) + (26 + x)\n    # Set equation for the sum of their ages to be 48: (20 + x) + (26 + x) = 48\n    # Solve the equation: 46 + 2x = 48\n\n    x = (48 - 46) / 2\n    return int(x)\n\nans = solution()"
    ],
    "4c625760244c484b9b010ff513d7aacb": [
        "def solution():\n    ans = 6.67 + 5.93\n    return ans\n\nans = solution()"
    ],
    "8f71ad4877d946aca5623bd2c5a1ffd9": [
        "def solution():\n    # Iterate through 4-digit numbers\n    for i in range(1000, 10000):\n        # Convert the number to a string\n        num_str = str(i)\n\n        # Move the first digit to the ones place\n        new_num_str = num_str[1:] + num_str[0]\n\n        # Convert back to an integer\n        new_num = int(new_num_str)\n\n        # Check if the new number is bigger by 4707\n        if new_num - i == 4707:\n            return i\n\nans = solution()"
    ],
    "e8ea378d2e224df88c51e8df519dd96a": [
        "def solution():\n    numbers = [0.0099, 0.81, 1.2, 0.087, 1.21]\n    closest = min(numbers, key=lambda x: abs(x-1))\n    return closest\n\nans = solution()"
    ],
    "41c299f84c8e465ab37555ce3abe8dbd": [
        "def solution():\n    sandra_age_now = 8\n    mother_age_now = 4 * sandra_age_now\n\n    sandra_age_2_years_ago = sandra_age_now - 2\n    mother_age_2_years_ago = mother_age_now - 2\n\n    age_difference = mother_age_2_years_ago - sandra_age_2_years_ago\n\n    return age_difference\n\nans = solution()"
    ],
    "44be0754c9694d719af9a93c29de6a7f": [
        "def solution():\n    for i in range(1, 1000):\n        num = 35 + i * 100\n        if sum(map(int, str(num))) == 35:\n            return num\n            \nans = solution()"
    ],
    "af1991b7f84d4f62aaf6b6878cddfe02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    y = symbols('y')\n    total_money = 8 * y\n    cost_watch = 4 * y\n    cost_handbag = 20\n    money_per_child = y - 5\n\n    money_given_to_children = 2 * money_per_child  # Mrs. Lim has 2 children\n\n    # Equation for the remainder of the money given to children\n    equation = Eq(total_money, cost_watch + cost_handbag + money_given_to_children)\n\n    # Solve the equation for y\n    solution = solve(equation, y)\n\n    return solution[0]\n\nans = solution()"
    ],
    "42c5c84cc6f5475fbadec4fb054ea542": [
        "def solution():\n    # Number of years between 1901 and 2000 inclusive\n    total_years = 2000 - 1901 + 1\n    \n    # Count of leap years and non-leap years\n    leap_years = len([year for year in range(1901, 2001) if (year % 4 == 0)])\n    non_leap_years = total_years - leap_years\n    \n    # Days in leap years and non-leap years\n    days_in_leap_years = leap_years * 366\n    days_in_non_leap_years = non_leap_years * 365\n    \n    # Total number of days\n    total_days = days_in_leap_years + days_in_non_leap_years\n    \n    return total_days\n\nans = solution()"
    ],
    "99f53a3e706d464e97e730165f364f49": [
        "def solution():\n    initial_amount = 100\n    days = 15\n    deposit = 10\n    spend = 8\n\n    cycle = 2  # deposit one day, spend the next day\n    complete_cycles = days // cycle  # complete deposit-spend cycles\n    remaining_days = days % cycle\n\n    total_amount = initial_amount\n    total_amount += complete_cycles * (deposit - spend)  # the net amount after complete cycles\n\n    if remaining_days == 1:  # if there's an extra day, it's a deposit day\n        total_amount += deposit\n\n    return total_amount\n\nans = solution()"
    ],
    "d079d30d875545e8b201477ce3c16428": [
        "def solution():\n    count = 0\n    for num in range(1, 100):\n        if num % 3 != 0 and num % 7 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "f0ef1fefe9e4405cb773c5fc47ab6e50": [
        "def solution():\n    ans = 5.6 * 2.4\n    return ans\n\nans = solution()"
    ],
    "c4423db7405342c1aecbf4c4b4097957": [
        "from math import gcd\n\ndef solution():\n    ans = gcd(16, 28)\n    return ans\n\nans = solution()"
    ],
    "0ddcfdef95d9497987f43afbe170f9f1": [
        "def solution():\n    # The sequence of strikes for 12 hours is an arithmetic sequence: 1, 2, 3, ..., 12\n    # The sum of an arithmetic sequence is given by the formula: n/2 * (first_term + last_term)\n    # where n is the number of terms\n    n = 12\n    first_term = 1\n    last_term = n\n\n    total_strikes = n/2 * (first_term + last_term)\n\n    return int(total_strikes)\n\nans = solution()"
    ],
    "b92d0cd587064c7195d1d5818981c69c": [
        "def solution():\n    weight_per_coin = 2.5  # weight of one ten-pence coin in grams\n    total_pence = 40       # total pence worth of coins\n    coins = total_pence / 10  # number of ten-pence coins\n\n    total_weight = weight_per_coin * coins  # total weight of the coins\n\n    return total_weight\n\nans = solution()"
    ],
    "0e1b4fc3bb9a4b798f86eca17838ecba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    james, nina = symbols('james nina')\n    # nina has more buttons than james\n    equation1 = Eq(james + nina, 22)\n    # when nina gives 4 buttons to james, they have the same amount\n    equation2 = Eq(nina - 4, james + 4)\n\n    solutions = solve((equation1, equation2), (james, nina))\n\n    return solutions[nina]\n\nans = solution()"
    ],
    "83396f638262415bb8e62a96478ffa20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mango, pear, apple = symbols('mango pear apple')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(mango + pear, 3.40)\n    equation2 = Eq(mango + apple, 3.80)\n    equation3 = Eq(4 * mango + 2 * pear + apple, 13.20)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (mango, pear, apple))\n    \n    return solutions[mango]\n\nans = solution()"
    ],
    "fc18df7e18e04a7ba182dc1493c19ef1": [
        "def solution():\n    total_marks = 23\n    marks_correct = 5\n    marks_wrong = -2\n    total_questions = 6\n\n    # Iterate through all possible combinations of correct and incorrect answers\n    for correct in range(total_questions + 1):\n        incorrect = total_questions - correct\n        score = correct * marks_correct + incorrect * marks_wrong\n        if score == total_marks:\n            return correct\n\nans = solution()"
    ],
    "2035192c81ab4e4ca4f6708f47f4638d": [
        "def solution():\n    # Total number of people on the bus\n    total_people = 20\n    # Ratio of adults to children\n    ratio_adults = 1\n    ratio_children = 4\n    # Total ratio parts\n    total_ratio = ratio_adults + ratio_children\n    # Number of adults calculated by the proportion of the total ratio parts\n    number_of_adults = (total_people * ratio_adults) / total_ratio\n    return int(number_of_adults)\n\nans = solution()"
    ],
    "f83ac99f77f44f1eb0edef1268dfc574": [
        "import math\n\ndef solution():\n    g = 9.8  # acceleration due to gravity in m/s^2\n    initial_speed = 10  # initial speed in m/s\n    angle_deg = 37  # angle of incline in degrees\n    angle_rad = math.radians(angle_deg)  # convert angle to radians\n\n    # Using the formula: height = (initial_speed^2 * sin^2(angle)) / (2 * g)\n    height = (initial_speed ** 2) * (math.sin(angle_rad) ** 2) / (2 * g)\n\n    # Using the formula: distance = (height) / sin(angle)\n    # because height = distance * sin(angle)\n    distance = height / math.sin(angle_rad)\n\n    return height, distance\n\nans = solution()"
    ],
    "2628cccb1cfe4903b268f7641a4ef75c": [
        "def solution():\n    total_candies = 35\n    total_children = 9\n    first_child = 3\n\n    last_child = (first_child + total_candies - 1) % total_children\n\n    # If remainder is 0, the last candy goes to the child with the seat number 9.\n    if last_child == 0:\n        last_child = total_children\n\n    return last_child\n\nans = solution()"
    ],
    "13b8f82b60e940e09ee1f5cec6149d01": [
        "def solution():\n    numbers = [9, 12, 17, 18, 21, 23]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "e884adb0e6b040cdb2a34a42819fab4c": [
        "def solution():\n    return 30 + 30 * 30 + 30 * 30 * 30\n\nans = solution()"
    ],
    "21305df1a3f34c78b15a5895829b6b0e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    racket, ball = symbols('racket ball')\n    equation1 = Eq(racket + 3 * ball, 536)\n    equation2 = Eq(2 * racket + 3 * ball, 904)\n\n    solutions = solve((equation1, equation2), (racket, ball))\n\n    return solutions[racket]\n\nans = solution()"
    ],
    "0dbf1ccfd2fc4007a533a919605fe57f": [
        "def solution():\n    players = 64\n    players_in_each_match = 4\n    matches_needed = (players - 1) // (players_in_each_match - 1)\n    return matches_needed\n\nans = solution()"
    ],
    "8570bae0d8974f76bc97044f422b89b5": [
        "def solution():\n    # We can deduce the worst case scenario using the Pigeonhole Principle.\n    # To ensure Sheila gets 2 groups of 4 balls of the same colour, she may take out all the balls of the other colours.\n    # First take out all 5 blue balls, and then all 4 orange balls. That's 9 balls in total.\n    # To ensure she gets 4 balls of the same colour, she must take out 4 more balls.\n    # But after the 9th ball, she definitely has 4 of some colour.\n    # To ensure a second group of 4, she must take all 4 remaining balls.\n    \n    return 5 + 4 + 4  # Total number of balls she needs to take out.\n\nans = solution()"
    ],
    "2473e761fb61498e9259082d612f70e0": [
        "def solution():\n    ans = 2.5 * 24\n    return ans\n\nans = solution()"
    ],
    "ae73ec11506148a9bdc9da9a59f4f805": [
        "def solution():\n    return 1 + 3 + 5 + 95 + 97 + 99\n\nans = solution()"
    ],
    "4109885176844bd28d5df4cb978b2199": [
        "def solution():\n    for i in range(1000, 10000):\n        moved_number = int(str(i)[1:] + str(i)[0])\n        if moved_number - i == 4707:\n            return i\n\nans = solution()"
    ],
    "328cb846f149403d8585071dd7244539": [
        "def solution():\n    total_weight = 22\n    cheese_weight = 6\n    num_bags_of_flour = 4\n\n    flour_weight = (total_weight - cheese_weight) / num_bags_of_flour\n\n    return flour_weight\n\nans = solution()"
    ],
    "17e5719cf1f44333aa04f4722862715a": [
        "def solution():\n    ans = 782 - 9 * 24 // 2\n    return ans\n\nans = solution()"
    ],
    "50bc0ad9cea747f5b927172f53d8747a": [
        "def solution():\n    from sympy import isprime, primerange\n\n    for age in [28, 39, 52, 84]:\n        if isprime(age + 1) and int((age - 3)**0.5)**2 == (age - 3) and round((age + 12)**(1/3))**3 == (age + 12):\n            return age\n\nans = solution()"
    ],
    "e8608d6fe45347b7a5f73ee97e718fe9": [
        "def solution():\n    return 168 * 91\n\nans = solution()"
    ],
    "3ae9a5c1a17b4f1095105ce89b2df771": [
        "def solution():\n    # Assume we are provided with the conversion rate from GBP to RUB (Russian Ruble)\n    # For the sake of an example, let's take a fictional conversion rate, say 1 GBP = 100 RUB\n    conversion_rate = 100  # This is a fictional conversion rate\n    cd_price_gbp = 14\n    cd_price_rub = cd_price_gbp * conversion_rate\n    \n    # Assume Richard spent 'x' amount of GBP which got converted to RUB in St Petersburg\n    # Let's say Richard spent 140 GBP, which would be a reasonable amount for illustration purposes\n    richard_spent_gbp = 140\n    richard_spent_rub = richard_spent_gbp * conversion_rate\n    \n    # To find out how many CDs Richard could buy, we divide the total amount in RUB by the price of one CD in RUB\n    number_of_cds = richard_spent_rub // cd_price_rub\n    \n    return int(number_of_cds)\n\nans = solution()"
    ],
    "a3f26b4b45934be08cf8676828e7ba57": [
        "def solution():\n    n_9 = 9\n    S_9 = 72\n    n_23 = 23\n    S_23 = 736\n\n    # Formula for the sum of the first n terms: S_n = n/2 * (2*a + (n-1)*d)\n    # We have two equations based on the above formula:\n    # 72 = 9/2 * (2*a + 8*d) and 736 = 23/2 * (2*a + 22*d)\n\n    # Solve the system of equations for a and d\n    a = symbols('a') # first term\n    d = symbols('d') # common difference\n\n    equation1 = Eq(n_9/2 * (2*a + (n_9-1)*d), S_9)\n    equation2 = Eq(n_23/2 * (2*a + (n_23-1)*d), S_23)\n\n    solutions = solve((equation1, equation2), (a, d))\n\n    # Now we have the first term and the common difference,\n    # we can find the sum of the first 16 terms\n    n_16 = 16\n    S_16 = n_16/2 * (2*solutions[a] + (n_16-1)*solutions[d])\n\n    return S_16\n\nans = solution()"
    ],
    "ee25df77dbc84b5194bfbcc0c0bd215c": [
        "def solution():\n    def custom_operation(a, b):\n        return a * b + a + b\n\n    # Given 2 vee (x vee 4) equals 59\n    # Let's find the value of x using the definition of the operation\n    for x in range(1, 59):\n        if custom_operation(2, custom_operation(x, 4)) == 59:\n            return x\n\nans = solution()"
    ],
    "751fb35fe9d44a4db9f500a8a4b466c9": [
        "def solution():\n    pattern = \"2345\"\n    pattern_length = len(pattern)\n    full_patterns = 43 // pattern_length\n    remaining_digits = 43 % pattern_length\n    sum_of_full_patterns = sum(int(digit) for digit in pattern) * full_patterns\n    sum_of_remaining_digits = sum(int(pattern[i]) for i in range(remaining_digits))\n\n    return sum_of_full_patterns + sum_of_remaining_digits\n\nans = solution()"
    ],
    "a7221d21ffb140cf886d39364cd7c81f": [
        "def solution():\n    ans = 43242 / 100\n    return ans\n\nans = solution()"
    ],
    "34b8599fcad846d6b22ce1cb7e0d67e3": [
        "def solution():\n    # Bart only needs to take a maximum of 3 chips to ensure he has 2 of different colors.\n    # Take one from each color (red, yellow, brown).\n    # Scenario:\n    # 1. If he takes one red, one yellow, he already has two different colors.\n    # 2. If he takes one more from any color, he will definitely have two different colors.\n    # Therefore, he needs to take at most 3 chips, one from each color group.\n\n    # He could take 3 of the same color, but the question asks for the 'smallest' number necessary,\n    # so we do not consider taking more than one from the same color initially.\n    # We will consider the worst-case scenario for different colors\n    \n    # Take 1 red + 1 yellow (but could still be the same color if he is unlucky and takes another red or yellow)\n    # Therefore, must take 1 more, which is from brown, to guarantee two different colors.\n    \n    # So, he needs to take at least 1 red + 1 yellow + 1 brown = 3 total\n    return 1 + 1 + 1  # 3 M&M's chips are needed to ensure 2 of different colors.\n\nans = solution()"
    ],
    "bc530cd877f2428bb79ffc956252f9b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew_speed, bernice_speed, cassandra_speed = symbols('andrew_speed bernice_speed cassandra_speed')\n    andrew_level = symbols('andrew_level')\n\n    # When Andrew reached level 5, Bernice was at level 3\n    equation1 = Eq(andrew_speed * 5, bernice_speed * 3)\n    \n    # When Bernice reached level 6, Cassandra was already at level 10\n    equation2 = Eq(bernice_speed * 6, cassandra_speed * 10)\n    \n    # Solve for the speed ratios\n    speeds = solve((equation1, equation2), (andrew_speed, bernice_speed, cassandra_speed))\n    \n    # Use Cassandra's speed to find the time it takes her to reach level 19 (assuming her speed is constant)\n    cassandra_time = 19 / speeds[cassandra_speed]\n    \n    # Use the time to find which level Andrew will be at (assuming his speed is constant as well)\n    andrew_final_level = cassandra_time * speeds[andrew_speed]\n\n    return andrew_final_level\n\nans = solution()"
    ],
    "43310de103274061a3f319f61ec706e8": [
        "def solution():\n    single_quiz_time_minutes = 30\n    total_quizzes = 4\n    total_time_minutes = single_quiz_time_minutes * total_quizzes\n    total_time_hours = total_time_minutes / 60\n    return total_time_hours\n\nans = solution()"
    ],
    "0ace0cd817cf47d78db91f0ee0283a12": [
        "def solution():\n    kilometres = 4.7\n    centimetres_in_a_kilometre = 100000\n    centimetres = kilometres * centimetres_in_a_kilometre\n    return centimetres\n\nans = solution()"
    ],
    "a44dbd04ca324e2dade754b21d81088b": [
        "def solution():\n    grandpa_age = 61\n    grandsons_ages = [4, 7, 12]\n    years = 0\n    \n    while sum(grandsons_ages) != grandpa_age:\n        years += 1\n        grandpa_age += 1\n        grandsons_ages = [age + 1 for age in grandsons_ages]\n    \n    return years\n\nans = solution()"
    ],
    "260fe91f8f7f438498be6c9fceaafc9b": [
        "def solution():\n    ways = 0\n    for five_p in range(0, 41, 5):\n        for ten_p in range(0, 41, 10):\n            if five_p + ten_p == 40:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "95bcebc21d174c318350f0c2fd3955a3": [
        "def solution():\n    ans = 100 / 40\n    return ans\n\nans = solution()"
    ],
    "8e72117b5da04fdfb91ab3f9a9aab2cd": [
        "def solution():\n    # Convert 40 minutes to hours\n    time_traveled_before_turning_back = 40 / 60\n    \n    # Calculate distances traveled by Shafur and Samuel before turning back\n    distance_shafur = 54 * time_traveled_before_turning_back\n    distance_samuel = 66 * time_traveled_before_turning_back\n    \n    # Since they arrive at the same time and Samuel turns back,\n    # the extra distance Samuel travels (to and from the petrol station)\n    # should be same as the distance Shafur has ahead of Samuel when Samuel turns back.\n    # Therefore, the extra time Samuel spends on traveling that extra distance\n    # is equal to time_shafur_travel - time_traveled_before_turning_back\n    \n    # Calculate the time Shafur took to travel the remaining distance to Town Y\n    time_shafur_travel = distance_shafur / 54\n    \n    # Calculate the total distance from Town X to Town Y\n    distance_X_to_Y = 54 * time_shafur_travel\n\n    return distance_X_to_Y\n\nans = solution()"
    ],
    "212dddf2d58c488f92051cac02b24a4d": [
        "def solution():\n    for number in range(100, 1000):\n        digits = [int(d) for d in str(number)]\n        product = 1\n        for digit in digits:\n            product *= digit\n        if 100 <= product <= 999:\n            return number\n\nans = solution()"
    ],
    "b30c16550e45492986ba4327f062d606": [
        "def solution():\n    first_term = 50\n    difference = 46 - 50  # negative since the sequence is decreasing\n    # the nth term formula for an arithmetic sequence is a + (n-1)d\n    # to find the first negative term, we can set a + (n-1)d < 0 and solve for n\n    # 50 + (n-1)(-4) < 0\n    # (n-1) > 50/4\n    # n > 12.5\n    # Since n has to be an integer, and the 13th term will be the first negative one\n\n    # but we need to find the last positive term (before the first negative term)\n    # So, the total number of positive terms is 13 - 1 = 12\n    return 12\n\nans = solution()"
    ],
    "6a83a12baea34666bb5d5db02ee98315": [
        "def solution():\n    morning_fruit = 416\n    afternoon_fruit = 248\n    ans = morning_fruit - afternoon_fruit\n    return ans\n\nans = solution()"
    ],
    "740a0eb88157475a86714273b6c58967": [
        "def solution():\n    flowers = 68\n    vase_capacity = 9\n    \n    vases_needed = (flowers + vase_capacity - 1) // vase_capacity\n\n    return vases_needed\n\nans = solution()"
    ],
    "84c4b5d7849c464193a6bad9277ea2b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the cost of one chair, then 3x is the cost of one table\n    x = symbols('x')\n    \n    # Equation: 4 tables and 9 chairs equals 504 dollars\n    equation = Eq(4 * (3 * x) + 9 * x, 504)\n    \n    # Solve for x\n    chair_cost = solve(equation, x)\n    \n    return chair_cost[0]\n\n\nans = solution()"
    ],
    "ef74f31cad3e47e99a0e8f28fe1357b7": [
        "def solution():\n    first_multiple = (38 + (3 - (38 % 3)) % 3)\n    last_multiple = 81 - (81 % 3)\n\n    ans = ((last_multiple - first_multiple) // 3) + 1\n    return ans\n\nans = solution()"
    ],
    "dda1e4bf25b443da8efc70aaf2624bc4": [
        "def solution():\n    from math import lcm\n    return lcm(12, 15)\n\nans = solution()"
    ],
    "b216c4dcef5246b1a1032e1ce7b59830": [
        "def solution():\n    frac_a = (7 / -3.333333) / (-0.027 ** (1/3))\n    frac_b = (2**3 / 4**2) / (0.125 * (1.8 - (0.2 * 7)))\n    frac_c = (0.1 / 0.142857) + (2 * 0.3)  # 0.142857 is 1/7\n\n    ans = frac_a + frac_b - frac_c\n    return round(ans, 4)\n\nans = solution()"
    ],
    "8601fccdea1547d8bdbea5b58f76c291": [
        "def solution():\n    total_number = (18 * 7) / 3\n    answer = (total_number * 5) / 6\n    return answer\n\nans = solution()"
    ],
    "8eceffc0fa6b407998bd0ae271a1ef01": [
        "def solution():\n    # Calculate the sum of the series 3 to 10 (inclusive)\n    sum_to_10 = sum(range(3, 11))\n    \n    # Calculate the sum of the series 3 to 6 (inclusive)\n    sum_to_6 = sum(range(3, 7))\n    \n    # The entire series is the sum of the sequence 3 to 10,\n    # followed by the sum of the sequence 3 to 6 in reverse, excluding the overlapping number 6\n    total_sum = sum_to_10 + (sum_to_6 - 6)\n    \n    return total_sum\n\nans = solution()"
    ],
    "7b05e8856130431fa24c3121679e2bb7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n\n    # Pip has £50 more than Bud\n    equation1 = Eq(pip, bud + 50)\n\n    # After spending, Pip has 20% left, Bud has 1/4 left\n    equation2 = Eq(6 * (bud * (1 - 3/4)), 5 * (pip * (1 - 80/100)))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "0f28dcf2c6ad4abeb816c16558e621eb": [
        "def solution():\n    mobiles_left = 78\n    february_sell = 13\n    january_sell = 22\n    \n    # Work backwards from the remaining number of phones\n    # Half remaining after February sell -> double the phones and subtract 13 to find phones before February sell\n    before_february = (mobiles_left + february_sell) * 2\n    \n    # Half remaining after January sell -> double the phones and subtract 22 to find initial number of phones\n    initial_phones = (before_february + january_sell) * 2\n    \n    return initial_phones\n\nans = solution()"
    ],
    "3a1798bad2d541fcb5c6a144f4ce03cd": [
        "def solution():\n    num_people = 5\n    num_games = num_people - 1\n\n    return num_games\n\nans = solution()"
    ],
    "eeedd7f61d3f499e91214241749f7193": [
        "def solution():\n    boxes = 5\n    apples_per_box = 9\n    apples_from_bud = 16\n    total_apples = (boxes * apples_per_box) + apples_from_bud\n    return total_apples\n\nans = solution()"
    ],
    "4d8c3d77b070434f8e98c669130876ad": [
        "def solution():\n    # Calculate the total amount needed for 4 red packets with $70 each\n    total_needed = 4 * 70\n    # Subtract the amount she is short of\n    total_have = total_needed - 15\n    \n    return total_have\n\nans = solution()"
    ],
    "297e8fe4a3fd48839219bc3a9649f928": [
        "def solution():\n    total_items = 438\n    more_pens = 50\n\n    # Let the number of pencils be x\n    # Then the number of pens will be x + 50\n    # The sum of pens and pencils is 438\n    # So x + (x + 50) = 438\n\n    # Solving for x\n    x = (total_items - more_pens) / 2\n\n    return int(x)\n\nans = solution()"
    ],
    "9d2c6f4e1357450eaed4a31c6237f2d2": [
        "def solution():\n    # Calculate total amount spent from January to April\n    jan_to_apr = 500 * 4\n    # Calculate total amount spent from May to July\n    may_to_jul = 300 * 3\n    # Total amount spent from August to September\n    aug_to_sep = 400\n    # Calculate total amount spent from October to December\n    oct_to_dec = 300 * 3\n\n    # Total amount spent over the entire year\n    total_spent = jan_to_apr + may_to_jul + aug_to_sep + oct_to_dec\n\n    # Calculate the average amount spent per month over the entire year\n    average_spent_per_month = total_spent / 12\n\n    return average_spent_per_month\n\nans = solution()"
    ],
    "24ae47ec3af142b6a27136a41410c388": [
        "def solution():\n    count = 0\n    for i in range(4, 52):\n        count += str(i).count('3')\n        if i == 23:\n            ans = count\n    return ans\n\nans = solution()"
    ],
    "252c59d9b9aa4aa9b64d371d39a82574": [
        "def solution():\n    # In a knockout tournament, each game eliminates one player.\n    # Since there are 5 players, we need to eliminate 4 players to determine the winner.\n    # Thus, 4 games will be played.\n    return 4\n\nans = solution()"
    ],
    "1383ca4e525041c99d8fa68660917e37": [
        "def solution():\n    shelf_from_front = 8\n    shelf_from_back = 10\n    \n    total_shelves = shelf_from_front + shelf_from_back - 1\n    \n    return total_shelves\n\nans = solution()"
    ],
    "51a7705457af49c88147499591a76612": [
        "def solution():\n    numbers = [19, 6, 12, 13, 21, 4, 8, 17]\n    return sum(numbers)\n\nans = solution()"
    ],
    "1576b6692de34a408952ede9da9ad5ba": [
        "def solution():\n    # Calculate the total number of rows based on Chris's positions: 7th from the front and 4th from the back.\n    rows = 7 + 4 - 1  # Subtract 1 because Chris is counted in both positions.\n    \n    # Calculate the total number of columns based on Chris's positions: 3rd from the left and 7th from the right.\n    columns = 3 + 7 - 1  # Subtract 1 because Chris is counted in both positions.\n    \n    # Calculate the total number of students by multiplying the number of rows and columns.\n    total_students = rows * columns\n    \n    return total_students\n\nans = solution()"
    ],
    "399908c2f1ad4ee9a7c420afd356fe12": [
        "def solution():\n    from sympy import factorint\n\n    # Prime factorization of 2016\n    factors = factorint(2016)\n    \n    # Possible ages from the prime factors,\n    # considering the product of ages should be 2016\n    possible_ages = [2 ** ex * base for base, exponent in factors.items() for ex in range(exponent + 1)]\n\n    # To find the different ages combinations that multiply to 2016,\n    # we need to find unique combinations of 4 numbers from possible ages\n    from itertools import combinations\n\n    for ages in combinations(possible_ages, 4):\n        if ages[0] * ages[1] * ages[2] * ages[3] == 2016 and max(ages) < 10:\n            ans = sum(ages)\n            return ans\n\nans = solution()"
    ],
    "33067bcb25344c1d903a52e71d15db47": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of marbles each person originally had\n    anna, betsy, charlene = symbols('anna betsy charlene')\n\n    # Create the equations based on the given conditions\n    # Original total marbles\n    total_marbles_eq = Eq(anna + betsy + charlene, 168)\n\n    # After Charlene gave 15 marbles to Betsy: charlene - 15, betsy + 15\n    charlene_to_betsy_eq = Eq(charlene - 15 + (betsy + 15) + anna, 168)\n\n    # After Betsy gave 8 marbles to Anna: betsy - 8, anna + 8\n    betsy_to_anna_eq = Eq((betsy + 15) - 8 + (anna + 8) + (charlene - 15), 168)\n\n    # Final ratio of 2:5:7 (considering the transactions)\n    final_ratio_eq = Eq((anna + 8) / (betsy + 15 - 8) / (charlene - 15), 2 / 5 / 7)\n\n    # Solve the system of equations\n    solutions = solve((total_marbles_eq, charlene_to_betsy_eq, betsy_to_anna_eq, final_ratio_eq), (anna, betsy, charlene))\n\n    return solutions[betsy]\n\nans = solution()"
    ],
    "22303a6e166b42b9a7f52651f42185f7": [
        "def solution():\n    combined_age_4_years_ago = 10  # Combined age of the 2 dogs four years ago\n    combined_age_now = combined_age_4_years_ago + 2 * 4  # Adding 4 years for each dog to their combined age\n    combined_age_in_2_years = combined_age_now + 2 * 2  # Adding 2 more years for each dog to their current combined age\n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "06699a3607d9471db8f9ba87968896ad": [
        "def solution():\n    result = 3.5 * (4/5) + 5.5 * (80/100) + 0.8\n    return result\n\nans = solution()"
    ],
    "f58334bfc17f4a5ba758430811171cb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ten_pence, total_amount = symbols('ten_pence total_amount')\n    twenty_pence = 2 * ten_pence\n    five_pence = ten_pence / 2\n    total_amount = Eq(5*five_pence + 10*ten_pence + 20*twenty_pence, 1575)\n\n    solutions = solve((total_amount), (ten_pence, twenty_pence))\n\n    return solutions[twenty_pence]\n\nans = solution()"
    ],
    "9ee836eb0a204a248346cf0a5a814237": [
        "def solution():\n    first_term = 8\n    nth_term = 140\n    nth = 12\n\n    # formula to find the nth term of an arithmetic progression: \n    # nth_term = first_term + (nth - 1) * common_difference\n    # Therefore, common_difference = (nth_term - first_term) / (nth - 1)\n    common_difference = (nth_term - first_term) / (nth - 1)\n\n    return common_difference\n\nans = solution()"
    ],
    "98507f7a1ab04ff5987283dcfdf7b586": [
        "def solution():\n    fraction_eaten = 3/5\n    remaining_weight = 60\n    original_weight = remaining_weight / (1 - fraction_eaten)\n    \n    return original_weight\n\nans = solution()"
    ],
    "645e2eb6b0834d9c99a6e7716f19be7a": [
        "def solution():\n    ans = 29 + 6 * (40 - 28) // (34 - 22)\n    return ans\n\nans = solution()"
    ],
    "3c267ac100df422598b3c04374b84cda": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    \n    # each boy has as many sisters as brothers: sisters = boys - 1\n    equation_for_boys = Eq(girls, boys - 1)\n    \n    # each girl has half as many sisters as brothers: sisters = 2 * (girls - 1)\n    equation_for_girls = Eq(girls - 1, 2 * (boys - girls))\n    \n    # Solve equations for boys and girls\n    solutions = solve((equation_for_boys, equation_for_girls), (boys, girls))\n    \n    total_children = solutions[boys] + solutions[girls]\n    \n    return total_children\n\nans = solution()"
    ],
    "2c96bab18bda4f58822aca3d954a2306": [
        "def solution():\n    first_term = 5\n    last_term = 131\n    difference = 6\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "db4d028578d9467fa3efdfc0289ceb82": [
        "def solution():\n    sally = 8\n    kelvin = sally + 12\n    ivan = 2 * kelvin\n    \n    return ivan\n\nans = solution()"
    ],
    "fffededa84664c688f626145cc4d0859": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')  # Define variable x\n\n    # Distance covered in the first 30 minutes (d1)\n    d1 = x * (30 / 60)  # Speed (x) times time (0.5 hours)\n\n    # Distance covered in the second 30 minutes (d2)\n    d2 = (x - 20) * (30 / 60)  # Speed (x-20) times time (0.5 hours)\n\n    # Distance covered in the third 30 minutes (d3)\n    d3 = (x + 10) * (30 / 60)  # Speed (x+10) times time (0.5 hours)\n\n    # Total distance traveled is the sum of distances in each interval\n    total_distance = d1 + d2 + d3\n\n    # Equation based on the fact that total traveled distance is 70 miles\n    equation = Eq(total_distance, 70)\n\n    # Solve the equation to find the value of x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c92aa76e3e324a49ad94e03580521716": [
        "def solution():\n    base_10_number = 96\n    base_6_number = ''\n\n    while base_10_number > 0:\n        remainder = base_10_number % 6\n        base_10_number = base_10_number // 6\n        base_6_number = str(remainder) + base_6_number\n\n    return base_6_number\n\nans = solution()"
    ],
    "ae40978145f94c6f9996c9e966b8c97d": [
        "def solution():\n    total_cost_per_person = 5.50\n    people_count = 6\n    tip_percentage = 10 / 100\n    paid_amount = 50\n\n    total_cost = total_cost_per_person * people_count\n    total_tip = total_cost * tip_percentage\n    total_paid = total_cost + total_tip\n\n    change = paid_amount - total_paid\n\n    return change\n\nans = solution()"
    ],
    "f8ccc3d1db7a464b831820a4451322ff": [
        "def solution():\n    seconds_in_one_minute = 60\n    return seconds_in_one_minute\n\nans = solution()"
    ],
    "93da49e2550546f48b47327ef5577cd1": [
        "def solution():\n    # Start with the scenario where the distribution has the lowest maximum value,\n    # Assign at least one apple to each child in ascending order\n    # Then distribute the remaining apples one by one, ensuring the condition of each child having a different amount\n    apples_distributed = [1, 2, 3, 4]  # The first 4 children get the minimum apples required to have different amounts\n    reserved_apples = 27 - sum(apples_distributed)  # Subtract from the total number to get the reserved apples for the last child\n\n    # Add apples to the children with the least apples to maintain the order condition\n    while True:\n        for i in range(len(apples_distributed)):\n            apples_distributed[i] += 1\n            reserved_apples -= 1\n\n            # Once we can't distribute more without giving two children the same number of apples, break\n            if apples_distributed[i] == reserved_apples:\n                return reserved_apples\n\nans = solution()"
    ],
    "0588ff4a3789420685f1bed8b5f2e9be": [
        "def solution():\n    # To win, Jason must leave a multiple of 4 marbles for Belinda after each round (4n+2).\n    # So after Jason's first turn, 24 (6*4) marbles should remain.\n    # Initially there are 26 marbles, so he should take 2 marbles first.\n    \n    return 26 % 4\n\nans = solution()"
    ],
    "a64f47165f93431bb686e430ed75deeb": [
        "def solution():\n    climbing_rate = 4\n    sliding_rate = 2\n    well_depth = 10\n    \n    days = 0\n    distance_climbed = 0\n\n    while distance_climbed < well_depth:\n        days += 1\n        distance_climbed += climbing_rate\n        if distance_climbed >= well_depth:\n            break\n        distance_climbed -= sliding_rate\n\n    return days\n\nans = solution()"
    ],
    "54efb1f9d0924e1d8fa4596005959b2a": [
        "def solution():\n    result = (6/7) * 42\n    return result\n\nans = solution()"
    ],
    "29a8a89ddd5447e8affdeb65b7d6869b": [
        "def solution():\n    total = 0\n    n = 1\n    while True:\n        # Calculate the sum of the arithmetic sequence\n        total = n * (5 + (5 * n)) // 2\n        # Check if the sum is divisible by 2013\n        if total % 2013 == 0:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "caf23672c0554b8295549b932bf0889a": [
        "def solution():\n    return 953 + 1065\n\nans = solution()"
    ],
    "8e243ca0416749c4ab65f908ade8388d": [
        "def solution():\n    three_sevenths = 18\n    whole_number = (three_sevenths * 7) / 3\n    five_sixths = (whole_number * 5) / 6\n    return five_sixths\n\nans = solution()"
    ],
    "cd9ad5be90634b298514a198bfb61625": [
        "from itertools import combinations\n\ndef solution():\n    solutions = []\n    for combo in combinations(range(1, 25), 7):\n        if sum(combo) == 25:\n            solutions.append(combo)\n    return len(solutions), solutions\n\nans = solution()"
    ],
    "633dae2f3a3e45cb9daaa00438a515d7": [
        "def solution():\n    # Probability of the alcoholic not being at the first bar\n    prob_not_first = 0.9\n    \n    # Probability of the alcoholic not being at the second bar\n    prob_not_second = 0.9\n    \n    # Since the events of not being at the first and second bar are independent,\n    # the probability of the alcoholic not being at both bars is the product\n    # of the individual probabilities and he must be in the third bar\n    prob_not_first_and_second = prob_not_first * prob_not_second\n    \n    # Since the alcoholic is not at the first two bars, he must definitely be\n    # at the third bar. Therefore, the probability of him being at the third\n    # bar, given that he is not at the first two, is 1.\n    prob_at_third = 1\n    \n    return prob_at_third * prob_not_first_and_second\n\nans = solution()"
    ],
    "32f18491c74041d8817a310362816c55": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime(2023, 5, 15)\n    duration = timedelta(weeks=3)\n    end_date = start_date + duration\n\n    return end_date.strftime('%d %B')\n\nans = solution()"
    ],
    "e86fd8332fe14c18baddfef75e03ff27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pencil, marker = symbols('pencil marker')\n    \n    equation1 = Eq(3 * pencil + 2 * marker, 13)\n    equation2 = Eq(2 * pencil + 3 * marker, 12)\n    \n    solutions = solve((equation1, equation2), (pencil, marker))\n    \n    total_cost = 7 * solutions[pencil] + 7 * solutions[marker]\n    \n    return total_cost\n\nans = solution()"
    ],
    "c7ffcb7a1eca4535a488e6da6a9364f7": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime.strptime(\"15/05/2023\", \"%d/%m/%Y\")\n    duration_days = 3 * 7  # 3 weeks = 21 days\n    end_date = start_date + timedelta(days=duration_days - 1)  # Subtract one because the start date is included\n    return end_date.strftime(\"%d/%m/%Y\")\n\nans = solution()"
    ],
    "09a3a1d022104884aa725a719c560f60": [
        "def solution():\n    volunteer = 1\n    while True:\n        if (volunteer * 4 + 5) % 7 == 0:\n            trees = volunteer * 4 + 5\n            break\n        volunteer += 1\n    return volunteer, trees\n\nans = solution()"
    ],
    "b3dcd19bf9ef49f6abe5c02758449b1a": [
        "def solution():\n    return 98 + 6\n\nans = solution()"
    ],
    "662004bd60264ac5b02db70eebf6c2af": [
        "def solution():\n    return 3200 - 1476\n\nans = solution()"
    ],
    "efa05afe196f4afa960648690f074c1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote x as the amount of grass grown each week\n    # and y as the initial amount of grass present in the pasture.\n    x, y = symbols('x y', real=True, positive=True)\n\n    # 120 cows will eat up the grass in 12 weeks can be written as\n    # Initial grass + growth over 12 weeks = 120 cows * 12 weeks of eating\n    equation1 = Eq(y + 12 * x, 120 * 12)\n\n    # 150 cows will eat up the grass in 8 weeks can be written as\n    # Initial grass + growth over 8 weeks = 150 cows * 8 weeks of eating\n    equation2 = Eq(y + 8 * x, 150 * 8)\n\n    # Solve for x and y\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Calculate the number of cows that the pasture can sustain for 6 weeks\n    # We can use any of the two equations to express y in terms of x and plug in the solution found:\n    y_sol = solutions[y]\n    # Initial grass + growth over 6 weeks = number_of_cows * 6 weeks of eating\n    # number_of_cows = (Initial grass + growth over 6 weeks) / (6 weeks)\n    number_of_cows = (y_sol + solutions[x] * 6) / 6\n\n    return int(number_of_cows)\n\nans = solution()"
    ],
    "aa2c433bd04243828094f4f0da449459": [
        "def solution():\n    for girls in range(1, 1000, 2):  # girls form odd layers\n        boys = girls + 2  # boys are on the layer outside the girls\n        total_boys = (boys ** 2) - ((boys - 2) ** 2)\n        total_girls = ((boys - 2) ** 2) - ((boys - 4) ** 2)\n        if total_boys - total_girls == 55:\n            total_students = boys ** 2\n            return total_students\n\nans = solution()"
    ],
    "6681c9a39b3645079a46a6daf29a4854": [
        "def solution():\n    # Given proportion 10:x = 14:21\n    # Cross multiply to solve for x: 10 * 21 = 14 * x\n    x = (10 * 21) / 14\n    \n    return int(x)\n\nans = solution()"
    ],
    "5b97b704f01a431fbcd061cfe8853201": [
        "def solution():\n    common_difference = 11 - 5\n    last_term = 41\n    next_term = last_term + common_difference\n    return next_term\n\nans = solution()"
    ],
    "54e546b3285e46baa909a946531986b5": [
        "def solution():\n    children = 74\n    bars_per_packet = 8\n\n    packets_needed = -(-children // bars_per_packet)  # Ceiling division\n\n    return packets_needed\n\nans = solution()"
    ],
    "aecd8ddb67d4485295695f4d5b6f8788": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of stickers in each bag\n    A, B = symbols('A B')\n\n    # Initial condition: total number of stickers\n    equation1 = Eq(A + B, 270)\n\n    # After moving 56 stickers from A to B\n    equation2 = Eq(B + 56, 3/2 * (A - 56))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "517f83e2071941a890e20a4e3126cc19": [
        "def solution():\n    def sum_of_factors(n):\n        sum = 1\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                sum += i\n                if i != n // i:\n                    sum += n // i\n        return sum\n\n    number = 2\n    while True:\n        if sum_of_factors(number) == number:\n            return number\n        number += 1\n\nans = solution()"
    ],
    "2d6942e7e2a049b0875a5daaa2d8662f": [
        "def solution():\n    sequence = [30, -28, 26, -24, 22, -20, 18, -16, 14]\n    result = sum(sequence)\n    return result\n\nans = solution()"
    ],
    "7d4469e90d7e44938c44082c04573041": [
        "def solution():\n    return 180 * 0.05\n\nans = solution()"
    ],
    "31d560632aeb4f189ed15394a994b8ea": [
        "def solution():\n    term_number = 10\n    last_term = 31\n    common_difference = 28 - 25\n\n    first_term = last_term - (term_number - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "6fa5dd836ec04fd1867acfcafb149b3b": [
        "def solution():\n    total_cakes = 80\n    cakes_per_box = 5\n\n    num_boxes = -(-total_cakes // cakes_per_box)\n\n    return num_boxes\n\nans = solution()"
    ],
    "09f6f0f9df4e4407bb6d0d93d12f86f3": [
        "def solution():\n    total_sweets = 30\n    sweets_for_sister = 6\n    num_friends = 6\n\n    sweets_per_friend = (total_sweets - sweets_for_sister) // num_friends\n\n    return sweets_per_friend\n\nans = solution()"
    ],
    "61cacff2e135446188147ef9331416bf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    money = symbols('money')\n    equation = Eq((1/4) * money + (2/7) * money, 225)\n    result = solve(equation, money)\n\n    return result[0]\n\nans = solution()"
    ],
    "d0aafdcf41bd41af9f7703e35d618f89": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    lovelle, makayla = symbols('lovelle makayla')\n    \n    # Original count of muffins\n    equation1 = Eq(lovelle + makayla, 3998)\n    \n    # After selling muffins, both have the same amount\n    equation2 = Eq(lovelle - 462, makayla - (2/5)*makayla)\n    \n    solutions = solve((equation1, equation2), (lovelle, makayla))\n\n    return solutions[lovelle]\n\nans = solution()"
    ],
    "199f98404707430a8c113444383853f4": [
        "def solution():\n    n = 30\n    count = 1 # start with the number itself as one possibility\n\n    # since we want maximum unique numbers that add up to n\n    # we start from 1 and go up to n//2 + 1\n    for i in range(1, n//2 + 1):\n        total = i\n        next_add = i + 1\n        # keep adding subsequent numbers until total exceeds or reaches n\n        while total < n:\n            total += next_add\n            next_add += 1\n        # if we get an exact match, we have found a combination\n        if total == n:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "48c4af399af1492c8496fdcbe4b79ce4": [
        "def solution():\n    # Number of cards in each color category\n    colors = [4, 8, 12, 16]\n    \n    # Calculate the maximum number of cards that can be drawn without \n    # having 10 cards of the same color using the Pigeonhole Principle\n    max_cards_without_10_same = (10 - 1) * 4\n\n    # At least one more card must be drawn to guarantee 10 cards of the same color\n    ans = max_cards_without_10_same + 1\n\n    return ans\n\nans = solution()"
    ],
    "e2768d76048543a996b33863b0237436": [
        "def solution():\n    total_length = 87\n    pieces = 30\n\n    length_per_piece = total_length / pieces\n\n    return length_per_piece\n\nans = solution()"
    ],
    "7334697b756d4565a7eb61beac61cfb8": [
        "def solution():\n    num_daffodils = 8\n    gap_length = 1.1\n    total_gaps = num_daffodils - 1\n    row_length = (total_gaps * gap_length) + 0.0  # Adding a daffodil's width of 0 at each end\n\n    return row_length\n\nans = solution()"
    ],
    "e139050ca60c4fb8ae683ddbe39fd88c": [
        "def solution():\n    boxes = 1450\n    books_per_box = 258\n    \n    total_books = boxes * books_per_box\n    \n    return total_books\n\nans = solution()"
    ],
    "f3c45f5f9fe141138b4274ad08514257": [
        "def solution():\n    distance = 48\n    speed = 8\n    time_taken = distance / speed\n    return int(time_taken)\n\nans = solution()"
    ],
    "e79fe3bad58843cb9ba29a747eecfe37": [
        "from itertools import combinations\n\ndef solution():\n    count = 0\n    # The total number of stickers is 9 and we have 3 boxes.\n    stickers = 9\n    boxes = 3\n    # We use combinations to find all the distinct ways to distribute the stickers.\n    # We start by listing all stickers as ones, so we can divide them into parts.\n    # Then, we find all ways to pick 2 partition points from the list of size 9 - 1 + 2\n    # since we initially must pick spots between stickers (which gives 9 - 1 options)\n    # and have 2 extra spots for the partition points.\n    for combo in combinations(range(1, stickers + boxes - 1), boxes - 1):\n        # Compute the number of stickers in each box by subtracting consecutive\n        # indices of the partition points from the combinations.\n        dist = [combo[0]] + [combo[i+1] - combo[i] for i in range(boxes - 2)] + [stickers + boxes - 1 - combo[-1]]\n        # We then see if the resulting partition constitutes a valid solution\n        # by making sure all values are distinct and non-zero (as each box cannot\n        # contain the same number of stickers and cannot be empty).\n        if len(set(dist)) == boxes:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "e9d1fadd4f7340399f406e12d58bc690": [
        "def solution():\n    total_juice = 150\n    # Let x be the amount Jane drinks, then Alex drinks x * 150%\n    # Together they drink the whole bottle, so x + x * 150% = total_juice\n    # x * (1 + 150/100) = total_juice\n    # x * 2.5 = total_juice\n    #x = total_juice / 2.5\n    jane_drinks = total_juice / 2.5\n    alex_drinks = jane_drinks * 1.5\n    \n    return alex_drinks\n\nans = solution()"
    ],
    "81ab24eed7cd4f2296d627d76b1e2ec2": [
        "def solution():\n    return (1 / 2) * (4 * 16)\n\nans = solution()"
    ],
    "b50f8ca3f787492f9f27c716da3258de": [
        "def solution():\n    x = (15 * 5) / 3\n    return x\n\nans = solution()"
    ],
    "5d2b6883175743eda687b1bb058d4c89": [
        "from math import comb\n\ndef solution():\n    total_girls = 5\n    total_boys = 7\n    group_size = 4\n\n    # Case 1: 1 boy, 3 girls\n    case1 = comb(total_boys, 1) * comb(total_girls, 3)\n\n    # Case 2: 2 boys, 2 girls\n    case2 = comb(total_boys, 2) * comb(total_girls, 2)\n\n    # Case 3: 3 boys, 1 girl\n    case3 = comb(total_boys, 3) * comb(total_girls, 1)\n\n    # Case 4: 4 boys, 0 girls\n    case4 = comb(total_boys, 4)\n\n    total_ways = case1 + case2 + case3 + case4\n\n    return total_ways\n\nans = solution()"
    ],
    "d349a45227c5469c8d98a746d07c5555": [
        "def solution():\n    total_fruits = 18 + 30  # Total number of pears and strawberries\n    friends = 6\n    fruits_per_friend = total_fruits // friends  # The number of fruits each friend gets\n    return fruits_per_friend\n\nans = solution()"
    ],
    "0116cb5ffe3f43828ce4925528badb2e": [
        "def solution():\n    # Let x be the amount of money Bud originally had.\n    # She spent 1/4 of it on a book, leaving 3/4 of the money.\n    # Then she spent 2/5 of the remaining money on a bag.\n    # The cost of the bag is given as 60.\n\n    # The equation representing the situation is:\n    # (3/4 * x) * (2/5) = 60\n    # Solve the equation for x to find the original amount of money.\n\n    x = 60 / (2/5) / (3/4)\n    return x\n\nans = solution()"
    ],
    "30aa83b2ee3f4ead83de91a226189785": [
        "def solution():\n    x = 5**2\n    y = 6\n    return x * y\n\nans = solution()"
    ],
    "ef48001475784ca48f23a6a14697b062": [
        "def solution():\n    for number in range(201, 242, 2):  # iterate over odd numbers only\n        if number % 3 == 0 and number % 7 == 0:\n            return number\n\nans = solution()"
    ],
    "6cc6f9f62af04d3f8eb7d700d44ac715": [
        "def solution():\n    ans = ((70 / 7 - 7) * 13)\n    return ans\n\nans = solution()"
    ],
    "41e25daefa484ddabc8596daad89dee5": [
        "def solution():\n    # Calculate the total length of the road\n    # Since there are trees at both ends, we subtract 1 from the number of trees to get the number of intervals between trees\n    total_length = (41 - 1) * 3\n\n    # Calculate the number of lamp posts\n    # Since there are lamp posts at both ends, we add 1 to the number of intervals to get the number of lamp posts\n    num_lamp_posts = (total_length // 8) + 1\n\n    return num_lamp_posts\n\nans = solution()"
    ],
    "3ef9ddcfb78d4c79b8835fcd29559ed7": [
        "def solution():\n    digits = 157\n    total_pages = 0\n    digits_used = 0\n\n    # 1-9 use 1 digit each, 10-99 use 2 digits each, etc.\n    for i in range(1, digits + 1):\n        if i < 10:\n            digits_per_page = 1\n        elif i < 100:\n            digits_per_page = 2\n        else:\n            digits_per_page = 3\n        \n        if digits_used + digits_per_page > digits:\n            break\n        else:\n            digits_used += digits_per_page\n            total_pages += 1\n            \n    return total_pages\n\nans = solution()"
    ],
    "b1362edc59474e289cdb2ea885cdd477": [
        "def solution():\n    for digit1 in range(10):\n        for digit2 in range(10):\n            total_price = int(f\"{digit1}679{digit2}\")\n            if total_price % 72 == 0:\n                unit_price = total_price // 72\n                return unit_price\n\nans = solution()"
    ],
    "501bce5f0d5c41eb96c1a803d85678b4": [
        "def solution():\n    train_length = 360  # in meters\n    speed = 40  # in meters per second\n    \n    time_to_pass = train_length / speed  # time = distance / speed\n    \n    return time_to_pass\n\nans = solution()"
    ],
    "65c1681a1cc943ca8fed37eafd2809bd": [
        "def solution():\n    count = 0\n    for i in range(10, 100):  # Range of all 2-digit numbers\n        if (i // 10 + i % 10) % 5 == 0:  # Sum of digits is a multiple of 5\n            count += 1\n    return count\n\nans = solution()"
    ],
    "79002f093bcc4697a0f9a3929ef1d7a5": [
        "def solution():\n    return 208 // 8\n\nans = solution()"
    ],
    "1ddfd41822fc4ff5909fb0c086a9e1cc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candies, students_b = symbols('candies students_b')\n    students_a = 2 * students_b\n\n    equation1 = Eq(candies - 4 * students_a, 20)\n    equation2 = Eq(candies - 6 * students_b, 16)\n\n    solutions = solve((equation1, equation2), (candies, students_b))\n\n    return solutions[candies]\n\nans = solution()"
    ],
    "600b0d1413ee4c7f9c8323852cd824de": [
        "def solution():\n    intervals = 21\n    potted_plants = intervals + 1\n    return potted_plants\n\nans = solution()"
    ],
    "44295cc103b24b67af16130f5db0f090": [
        "def solution():\n    initial_savings = 24\n    dvd_cost = initial_savings * (1 / 3)\n    remaining_after_dvd = initial_savings - dvd_cost\n    book_cost = remaining_after_dvd * (25 / 100)\n    remaining_after_book = remaining_after_dvd - book_cost\n    return remaining_after_book\n\nans = solution()"
    ],
    "a22a990372e6459ab93701b27bbe1333": [
        "def solution():\n    initial_rabbits = 32\n    years = 3\n\n    for year in range(years):\n        initial_rabbits = initial_rabbits * 3  # Rabbits multiply threefold\n        initial_rabbits = initial_rabbits // 2  # Wolves eat half of the rabbits\n\n    return initial_rabbits\n\nans = solution()"
    ],
    "2450c7184dc1494db29badfda3df6350": [
        "def solution():\n    count = 0\n    for i in range(41):\n        if '2' in str(i):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "eb83c6f6832f41feaed4f34edd98a1ca": [
        "def solution():\n    # Time taken to travel the first mile at 60 mph\n    time_for_60_mph = 1 / 60\n    \n    # Time taken to travel the second mile at 30 mph\n    time_for_30_mph = 1 / 30\n    \n    # Total time taken for 2 miles\n    total_time = time_for_60_mph + time_for_30_mph\n    \n    # Total distance covered is 2 miles\n    total_distance = 2\n    \n    # Average speed is total distance divided by total time\n    average_speed = total_distance / total_time\n    \n    return average_speed\n\nans = solution()"
    ],
    "a3995edc2a1a43daa636491bd11f901f": [
        "def solution():\n    amount_earned_per_wash = 1.40\n    desired_amount = 12\n    number_of_washes = desired_amount / amount_earned_per_wash\n\n    # Since Erica needs to make more than £12, we take the ceiling of the number of washes.\n    return int(number_of_washes) + (number_of_washes != int(number_of_washes))\n\nans = solution()"
    ],
    "34416f7c5b99456f877168a0fd62da99": [
        "def solution():\n    for num in range(121, 136):\n        if num % 4 == 0 and num % 6 == 0:\n            return num\n\nans = solution()"
    ],
    "64dfb01da35643c0b9de911c9ea05789": [
        "def solution():\n    candies_eaten_first_day = 2\n    days_passed = 4 - 1\n    candies_eaten_on_fourth = candies_eaten_first_day * (2 ** days_passed)\n    return candies_eaten_on_fourth\n\nans = solution()"
    ],
    "01a700f22d8440ff98528ae95438b080": [
        "def solution():\n    ans = 901 - 582\n    return ans\n\nans = solution()"
    ],
    "7a629088064049ac9991a8c0a6a39bc2": [
        "def solution():\n    average_daily_earnings = 70\n    number_of_working_days = 6  # from Monday to Saturday\n\n    total_earnings = average_daily_earnings * number_of_working_days\n\n    return total_earnings\n\nans = solution()"
    ],
    "875569394f454c87ba59b92ec3568007": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for natural number and assume a's initial possible value.\n    n = symbols('n', integer=True, positive=True)\n    a = symbols('a', integer=True)\n\n    # Create the equations based on the given conditions.\n    equation1 = Eq(290 % n, a)\n    equation2 = Eq(235 % n, a + 2)\n    equation3 = Eq(200 % n, a + 5)\n\n    # Since 'n' is supposed to be greater than 1, we'll look at potential solutions for 'n' considering that.\n    solutions = solve((equation1, equation2, equation3), (n, a))\n    for sol in solutions:\n        if sol[0] > 1:\n            return sol[0]\n\nans = solution()"
    ],
    "d93d643e886d4754abfa2f90328da9f1": [
        "def solution():\n    total_age = 765\n    num_members = 9\n\n    # The middle term of an arithmetic sequence where the terms are consecutive numbers\n    # can be found by dividing the sum of all terms by the number of terms.\n    middle_age = total_age / num_members\n\n    return int(middle_age)\n\nans = solution()"
    ],
    "05067bad937e48738bea7614f9cc4676": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the smaller unknown angle in the triangle\n    x = symbols('x')\n\n    # Since one angle is a right angle (90 degrees), the sum of the other two angles is 90 degrees.\n    # Let the larger angle be 2x, the two unknown angles sum to x + 2x = 90\n\n    equation = Eq(x + 2 * x, 90)\n\n    # Solve the equation\n    solutions = solve(equation, x)\n\n    # The largest angle is 2 times the smaller angle.\n    largest_angle = 2 * solutions[x]\n\n    return largest_angle\n\nans = solution()"
    ],
    "5e8d313c1541406a95c53bcb9f149496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    necklace, earring = symbols('necklace earring')\n    \n    equation1 = Eq(9 * necklace + 5 * earring, 1440)\n    equation2 = Eq(3 * necklace + earring, 438)\n    \n    solutions = solve((equation1, equation2), (necklace, earring))\n    \n    total_cost = solutions[necklace] + solutions[earring]\n    \n    return total_cost\n\nans = solution()"
    ],
    "2a9c4ac0af274c21b3b543fdc562d57c": [
        "from itertools import permutations\n\ndef solution():\n    for p, i, s in permutations(range(10), 3):\n        if p == 0 or s == 0:\n            continue  # 'P' and 'S' can't be 0 since they are the first digit\n        if 4 * (10 * i + s) == (10 * p + i):\n            return 10 * p + i\n\nans = solution()"
    ],
    "91a598b887f6483a86d977ea27f5c731": [
        "def solution():\n    average_mon_to_sat = 3\n    total_sunshine_mon_to_sat = average_mon_to_sat * 6\n    sunshine_sunday = 10\n    total_days = 7\n    total_sunshine_whole_week = total_sunshine_mon_to_sat + sunshine_sunday\n    average_for_whole_week = total_sunshine_whole_week / total_days\n\n    return average_for_whole_week\n\nans = solution()"
    ],
    "13d1dc22063b44a6bfd3c253184381b8": [
        "def solution():\n    # Total distance for the trees to be planted is 320m.\n    total_distance = 320\n    # Total number of intervals is one less than the number of trees\n    num_intervals = 79 - 1\n    # Distance between each tree is total distance divided by the number of intervals\n    distance_between_trees = total_distance / num_intervals\n    return distance_between_trees\n\nans = solution()"
    ],
    "1edc3edaab9048beaf044a5eee61b184": [
        "def solution():\n    walking_speed = 75  # m/min\n    running_speed = walking_speed * 2\n\n    walk_time_to_school = 24  # min\n    distance_to_school = walking_speed * walk_time_to_school\n\n    half_distance = distance_to_school / 2\n\n    walk_time_for_half = half_distance / walking_speed\n    run_time_for_half = half_distance / running_speed\n\n    total_time = walk_time_for_half + run_time_for_half\n\n    return total_time\n\nans = solution()"
    ],
    "d02e694f3a564aafaf5019cd2b7a9a4d": [
        "def solution():\n    boys = 120\n    girls = 80\n    boys_saw_movie = boys * 0.50\n    girls_saw_movie = girls * 0.60\n    total_saw_movie = boys_saw_movie + girls_saw_movie\n    \n    return total_saw_movie\n\nans = solution()"
    ],
    "909e9ffd178a4a82a7e2ba972d438c99": [
        "def solution():\n    total_length = 385\n    piece_length = 15\n\n    num_pieces = total_length // piece_length\n    remaining_length = total_length % piece_length\n\n    return remaining_length\n\nans = solution()"
    ],
    "3f5d80aa10384e98a458b98fad0305a2": [
        "def solution():\n    count = 0\n    for basket1 in range(0, 7):\n        for basket2 in range(0, 7 - basket1):\n            basket3 = 6 - basket1 - basket2\n            # Since the baskets are identical, we need to divide by the number\n            # of permutations of the three baskets to avoid overcounting.\n            if basket1 == basket2 == basket3:\n                count += 1  # Only one way to distribute if all have the same number\n            elif basket1 == basket2 or basket2 == basket3 or basket1 == basket3:\n                count += 3  # Two baskets have the same number, and one is different\n            else:\n                count += 6  # All baskets have different numbers\n\n    ans = count / 6  # There are 3! ways to arrange 3 baskets, so divide by 3!\n    return int(ans)\n\nans = solution()"
    ],
    "4af0a33072c147caa27c6f6519d84e3f": [
        "def solution():\n    whole_number = 1\n    numerator = 3\n    denominator = 100\n\n    decimal_value = whole_number + (numerator / denominator)\n    \n    return decimal_value\n\nans = solution()"
    ],
    "3676c87ead1a489f9e921d0d75aa36ef": [
        "def solution():\n    teams = 8\n    matches = teams * (teams - 1) // 2\n    return matches\n\nans = solution()"
    ],
    "fcb6d1b5111d48d9a3ae25817b7ba302": [
        "def solution():\n    sum_of_N = 0\n    for N in range(1, 2018):\n        if 2018 % N == 11:\n            sum_of_N += N\n    return sum_of_N\n\nans = solution()"
    ],
    "1a428efca7154d45b9f95d2f7093cbe7": [
        "def solution():\n    skirts_per_day = 6\n    total_skirts = sum((skirts_per_day * (worker + 1)) for worker in range(9))\n    return total_skirts\n\nans = solution()"
    ],
    "f1b82ff9340a4655b4cf7000c847b825": [
        "def solution():\n    # Let the total savings be x dollars.\n    # Kim gave 1/3 of her savings to her mother: (1/3) * x\n    # Amount spent on dresses and earrings: 177 + 129\n    # Amount left is 1/2 of what she gave her mother: (1/2) * ((1/3) * x)\n    # Equation: x - (1/3)*x - (177 + 129) = (1/2) * ((1/3) * x)\n    \n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x - (1/3)*x - (177 + 129), (1/2) * ((1/3) * x))\n    savings = solve(equation, x)\n\n    return savings[0]\n\nans = solution()"
    ],
    "494681f041b745a591be1d725abc3a02": [
        "def solution():\n    # Let x be the number of chickens and (8-x) be the number of cows\n    for x in range(9):  # Since there are 8 animals, x can be from 0 to 8\n        if 2*x + 4*(8-x) == 26:  # Chickens have 2 legs and cows have 4 legs\n            return x\n\nans = solution()"
    ],
    "715019fd42ea4f559b0924cbe53893bc": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "0a9deb608fe24aa6b6430859835ac8d7": [
        "def solution():\n    first_term = 11\n    difference = 3\n    nums_in_sequence = []\n    for num in range(30, 61):  # Range from 30 to 60 inclusive\n        if (num - first_term) % difference == 0:\n            nums_in_sequence.append(num)\n    return nums_in_sequence\n\nans = solution()"
    ],
    "9e5271cce46840fc8756f7236f3fd9b2": [
        "def solution():\n    cost_per_person = 253 / 11\n    total_cost_for_12 = cost_per_person * 12\n    return total_cost_for_12\n\nans = solution()"
    ],
    "6885b2a6b6b54f2d8315a175fa94e91a": [
        "def solution():\n    total_sweets = 138\n    min_sweets_per_student = 5\n    max_class_size = total_sweets // min_sweets_per_student\n    \n    return max_class_size\n\nans = solution()"
    ],
    "13dd71975a16405c87357c875ed6c03c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    cost_5_bananas = 5 * solutions[banana]\n\n    return cost_5_bananas\n\nans = solution()"
    ],
    "c098a360c7f6486099fd66b709ca7e5a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    T = symbols('T')\n    income_tax = Eq(0.08 * 50000 + (0.08 + T / 100) * (150000 - 50000), 15000)\n    T_value = solve(income_tax, T)\n\n    return T_value[0]\n\nans = solution()"
    ],
    "f1c6e0272fae419183c3fb080070f9ad": [
        "def solution():\n    digit_count = 0\n    num = 1\n    while True:\n        num_length = len(str(num))\n        digit_count += num_length\n        if digit_count >= 2023:\n            break\n        num += 1\n    return int(str(num)[2023 - (digit_count - num_length) - 1])\n\nans = solution()"
    ],
    "ae271ee454574a6f9c07ffcb062507f5": [
        "def solution():\n    n = 66 / (3 * 11)\n    return n\n\nans = solution()"
    ],
    "6d1e50acecb5443699ff1409bbab9ab1": [
        "def solution():\n    total_questions = 25\n    score_per_correct = 4\n    score_per_incorrect = -2\n    \n    for correct_answers in range(total_questions):\n        incorrect_answers = total_questions - correct_answers - 1  # -1 for the question not attempted\n        score = (correct_answers * score_per_correct) + (incorrect_answers * score_per_incorrect)\n        if score == 66:\n            return correct_answers\n\nans = solution()"
    ],
    "a024f762eee54f819b5a5c703275d15c": [
        "def solution():\n    total_boys = 432\n    days_in_january = 31\n    min_boys_per_day = total_boys // days_in_january\n    if total_boys % days_in_january == 0:\n        ans = min_boys_per_day\n    else:\n        ans = min_boys_per_day + 1\n    return ans\n\nans = solution()"
    ],
    "8bebcb024a134af6bd81b9505fe32657": [
        "def solution():\n    first_car_length = 6\n    other_car_length = 4\n    spacing = 5\n    total_cars = 31\n    \n    total_length = first_car_length + (total_cars - 1) * other_car_length + spacing * (total_cars + 1)\n    \n    return total_length\n\nans = solution()"
    ],
    "5810f2c593d14c5d83787fff4babe6f3": [
        "def solution():\n    count = 0\n    for digit1 in range(1, 4):  # First digit cannot be 0, so it can be 2 or 3\n        for digit2 in range(3):  # Second digit can be 0, 2, 3\n            for digit3 in range(3):  # Third digit can be 0, 2, 3\n                if len(set([digit1, digit2, digit3])) == 3:  # All digits must be different\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "e1990839b31d461db3729e71325eabbd": [
        "def solution():\n    total_chocolates = 5 * 10\n    chocolates_given_to_Helen = 23\n    chocolates_left = total_chocolates - chocolates_given_to_Helen\n    return chocolates_left\n\nans = solution()"
    ],
    "d1a178f9942d41d9a82ed3706f2e8f56": [
        "from itertools import permutations\n\ndef solution():\n    card_values = [0, 3, 5, 8]\n    count = 0\n    for perm in permutations(card_values):\n        if perm[0] > 5:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "eaa36f2338ce478c9ef3805f3e5db384": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let 'r' be the number of candies Rachel has and 'a' be the number Alice has\n    r, a = symbols('r a')\n    \n    # If Rachel gives Alice 10 pieces, they will have the same amount: r - 10 = a + 10\n    equation1 = Eq(r - 10, a + 10)\n    \n    # If they both eat 8 pieces, Rachel has 3 times the amount Alice has: (r - 8) = 3*(a - 8)\n    equation2 = Eq(r - 8, 3 * (a - 8))\n    \n    # Solve the system of equations for r and a\n    solutions = solve((equation1, equation2), (r, a))\n    \n    # The total number of candies is the sum of what Rachel and Alice have originally\n    total_candies = solutions[r] + solutions[a]\n    \n    return total_candies\n\nans = solution()"
    ],
    "5635691adc5141a8867ba1ea8124d38e": [
        "def solution():\n    # 7th term is 105, 8th term is 120, and 9th term is 135\n    # The common difference (d) can be calculated by subtracting consecutive terms\n    d = 120 - 105  # or 135 - 120, which will give the same result\n\n    # The first term (a) can be calculated by subtracting (n-1) * d from the nth term\n    # Using the 7th term (n = 7) to find the first term (a)\n    a = 105 - (7 - 1) * d\n\n    # The nth term of an arithmetic sequence can be calculated by the formula:\n    # nth_term = a + (n - 1) * d\n    # For the 100th term:\n    nth_term = a + (100 - 1) * d\n\n    return nth_term\n\nans = solution()"
    ],
    "4ff16f5b62234dcaa6dfb47ec0b97611": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for p in permutations(\"ABCDEFG\"):\n        if p.index('A') > p.index('B') and p.index('A') < p.index('C') or p.index('A') < p.index('B') and p.index('A') > p.index('C'):\n            if (p.index('D') == p.index('E') + 1) or (p.index('D') == p.index('E') - 1):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "6e587e1396e4469da9fb76d1a63500a8": [
        "def solution():\n    sarah_ratio = 3\n    total_ratio = 2 + 3 + 5\n    sarah_sweets = 12\n\n    total_sweets = (sarah_sweets * total_ratio) // sarah_ratio\n\n    return total_sweets\n\nans = solution()"
    ],
    "66db04ea675e442a808a4648e3bb0e13": [
        "def solution():\n    week1 = 27\n    week2 = 25\n    week3 = 30\n    ans = week1 + week2 + week3\n    return ans\n\nans = solution()"
    ],
    "5526c23ffd024f3697e30d23a595af55": [
        "def solution():\n    current_length = 30\n    growth_rate = 1 / 5\n    initial_length = current_length / (1 + growth_rate)\n    \n    return initial_length\n\nans = solution()"
    ],
    "64578896b85247a5bc8033060abe3385": [
        "def solution():\n    return 734 * 58\n\nans = solution()"
    ],
    "0ff88920dd05452c8edcdf168d81d61a": [
        "def solution():\n    biscuits_cost = 7 * 73   # cost in pence\n    cakes_cost = 9 * 113     # cost in pence because £1 = 100p\n\n    total_cost_pence = biscuits_cost + cakes_cost\n    total_cost_pounds = total_cost_pence / 100  # convert pence to pounds\n\n    change = 20 - total_cost_pounds  # change from a £20 note\n\n    return round(change, 2)  # rounding to 2 decimal places for pence\n\nans = solution()"
    ],
    "0e99723387294b9f9f858dfe311b994f": [
        "def solution():\n    ans = 1.8 - 0.57\n    return ans\n\nans = solution()"
    ],
    "8b535506c66e4092b2c7ac1a8fd5a43f": [
        "def solution():\n    num_piles = 6\n    apples_per_pile = 8\n    total_apples = num_piles * apples_per_pile\n    return total_apples\n\nans = solution()"
    ],
    "eb2770c6e3204216b75646ea3e20a071": [
        "def solution():\n    ans = 5272 // 4\n    return ans\n\nans = solution()"
    ],
    "f6c67f2f93b44bc79f64e534dcd8fb1b": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (3, 5), (3, 6), (3, 9)]\n    ans = solve_congruence(*congruences)[0]\n\n    return ans\n\nans = solution()"
    ],
    "d995898eb3f8495b80d5b29890be42a1": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    lunch_end_time = datetime.strptime(\"2:50 PM\", \"%I:%M %p\")\n    lunch_duration = timedelta(minutes=20)\n    tv_duration = timedelta(minutes=20)\n    play_duration = timedelta(minutes=10)\n\n    home_arrival_time = lunch_end_time - lunch_duration - tv_duration - play_duration\n    return home_arrival_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "973a7aa6ad0b475ca38055bf318f176b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let p represent Peter's original number of stickers\n    # Sam originally had p + 40 stickers.\n    # After transactions, Sam has p + 40 - 0.2*(p + 40) + 0.25*p stickers\n    # and Peter has p + 0.2*(p + 40) - 0.25*p stickers.\n    # The difference after transactions is 96 stickers\n\n    p = symbols('p')\n    equation = Eq(p + 40 - 0.2*(p + 40) + 0.25*p + 96, p + 0.2*(p + 40) - 0.25*p)\n\n    solution = solve(equation, p)\n    return solution[0]\n\nans = solution()"
    ],
    "d47ef27ff4d24d97b0950971a5d0ebae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 * (x - 5) - 3, 6)\n    \n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "a520cd6b98004192bc4c2d780f54359e": [
        "网络故障，请重试"
    ],
    "e4365323b3f24240b896655358cb30ad": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"12:40\", \"%H:%M\")\n    duration = timedelta(hours=2, minutes=40)\n    leave_time = arrival_time + duration\n    return leave_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "9008be14593f40169be1110ccfe7e329": [
        "def solution():\n    number = 1\n    while True:\n        if (number % 3 == 2) and (number % 4 == 2) and (number % 5 == 2) and (number % 7 == 1):\n            return number\n        number += 1\n\nans = solution()"
    ],
    "9fcfa23fda9646908ef7e4baafdfbb8e": [
        "def solution():\n    result = 6.5 / 0.5\n    return result\n\nans = solution()"
    ],
    "9fc589a666df49d2893ceb77b7ad8793": [
        "def solution():\n    ans = 887 + 96\n    return ans\n\nans = solution()"
    ],
    "b7b9b80dff99475f987ad65337577b2b": [
        "from itertools import permutations\n\ndef solution():\n    # All unique permutations of '2017' for 3-digit numbers\n    three_digit_permutations = set(permutations('2017', 3))\n    # Remove permutations starting with '0' as they are not valid 3-digit numbers\n    valid_three_digit_permutations = {perm for perm in three_digit_permutations if perm[0] != '0'}\n    \n    # All unique permutations of '2017' for 4-digit numbers\n    four_digit_permutations = set(permutations('2017', 4))\n    # No need to remove any permutation as '2017' does not start with '0'\n    \n    # Total count is the sum of valid three and four digit permutations\n    count = len(valid_three_digit_permutations) + len(four_digit_permutations)\n    return count\n\nans = solution()"
    ],
    "238dd80b8a46477eaafb237f243e1492": [
        "def solution():\n    first_term = 5\n    common_difference = 8 - 5\n    number_of_terms = 14\n    \n    last_term = first_term + (number_of_terms - 1) * common_difference\n    sum_of_terms = (number_of_terms * (first_term + last_term)) // 2\n    \n    return sum_of_terms\n\nans = solution()"
    ],
    "b89dd263e0b74d39b39fc4d3fdbfb49e": [
        "def solution():\n    count_nines = 0\n    page = 0\n\n    while count_nines < 181:\n        page += 1\n        count_nines += str(page).count('9')\n\n    return page\n\nans = solution()"
    ],
    "de62c39c82f94cadada80699ccead608": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n\n    # Let x be the initial number of crystals Jason had.\n    x = Symbol('x')\n\n    # Equation based on the problem statement:\n    # x - (10 + x/2) + 20 - 14 = 35\n    equation = x - (10 + x/2) + 20 - 14 - 35\n\n    # Solve for x\n    initial_crystals = solve(equation, x)\n\n    return initial_crystals[0]\n\nans = solution()"
    ],
    "bc434e7f2cc44029adcb3a3799e67e66": [
        "def solution():\n    grey_rabbits = 14\n    pattern_repeats = grey_rabbits // 2  # Each pattern has 2 grey rabbits\n    total_rabbits = pattern_repeats * 5  # Each complete pattern has 5 rabbits\n    \n    # Check for any remaining grey rabbits not forming a complete pattern\n    remaining_grey = grey_rabbits % 2\n    if remaining_grey > 0:\n        total_rabbits += 1 + 2 + remaining_grey  # add incomplete pattern\n\n    return total_rabbits\n\nans = solution()"
    ],
    "74259b5e9ab14d9f87fc462cc2c9c9c4": [
        "def solution():\n    numbers = [0, 1, 5, 8]\n    # Create all possible three-digit numbers by permutations\n    from itertools import permutations\n    all_possible_numbers = [int(\"\".join(map(str, perm))) for perm in permutations(numbers, 3) if perm[0] != 0]\n\n    # Find the smallest and the largest numbers from the list\n    smallest_number = min(all_possible_numbers)\n    largest_number = max(all_possible_numbers)\n\n    # Calculate the difference between the largest and smallest numbers\n    difference = largest_number - smallest_number\n\n    return difference\n\nans = solution()"
    ],
    "249b1679bd9a4e0cab73014b4563c817": [
        "def solution():\n    from math import gcd\n\n    # Number of students in each class\n    class_A = 12\n    class_B = 15\n    class_C = 18\n    \n    # Calculate the greatest common divisor of the three numbers\n    gcf_ab = gcd(class_A, class_B)\n    gcf_abc = gcd(gcf_ab, class_C)\n\n    return gcf_abc\n\nans = solution()"
    ],
    "b00aab6ff6404d4c8fdb343288b6e0d9": [
        "def solution():\n    ans = 37 * 27\n    return ans\n\nans = solution()"
    ],
    "19787e6cd66e47d59c4f1aa7b622367f": [
        "def solution():\n    factors_of_180 = [i for i in range(1, 181) if 180 % i == 0]\n    multiples_of_9 = [i for i in factors_of_180 if i % 9 == 0]\n    return len(multiples_of_9)\n\nans = solution()"
    ],
    "780536f26cf94aaead22cb26adb13a45": [
        "def solution():\n    sarah_age = 24\n    peter_age = sarah_age / 2\n    mike_age = (2 / 3) * peter_age\n    total_age = sarah_age + peter_age + mike_age\n    return total_age\n\nans = solution()"
    ],
    "a2724e23a1a2486ba4b16942479338fe": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['1', '2', '3', '4']\n    even_digits = ['2', '4']\n    count = 0\n    \n    for perm in permutations(digits, 4):\n        if perm[-1] in even_digits:\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "ac06ad0afb9a4d7289d8a8d0c7948dbb": [
        "def solution():\n    return 25 * 6\n\nans = solution()"
    ],
    "2fca64d5949f47de80b3591fd9ab16fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    u = symbols('u')\n    equation = Eq(340 - 2*u, 5*u - 220)\n    \n    solution = solve(equation, u)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "45c4e765f9d9484cb09882339459ff20": [
        "def solution():\n    for a in range(10):\n        if (2 + 6 + a + 5 + 3 + 9) % 9 == 0:\n            return a\n\nans = solution()"
    ],
    "cb7a55fac46240dfb8afe8d50e4bb828": [
        "def solution():\n    principal = 10000\n    rate = 0.05\n    years = 3\n\n    amount = principal * ((1 + rate) ** years)\n\n    return amount\n\nans = solution()"
    ],
    "eff977d9b7e24c4898ee8a2de20024aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    yi_yen, kyra = symbols('yi_yen kyra')\n\n    equation1 = Eq(yi_yen, 4 * kyra)\n    equation2 = Eq(yi_yen + kyra, 100)\n\n    solutions = solve((equation1, equation2), (yi_yen, kyra))\n\n    return solutions[yi_yen]\n\nans = solution()"
    ],
    "48194ec32ba347e09ddad0af6959c376": [
        "def solution():\n    cost_per_box = 2.89\n    number_of_boxes = 12\n    total_cost = cost_per_box * number_of_boxes\n    return total_cost\n\nans = solution()"
    ],
    "5dfa1ffa102441ac98eb20610ee9be00": [
        "def solution():\n    total_pence = 200  # Convert £2 to pence\n    single_price = 12  # Price for one sweet in pence\n    triple_price = 30  # Price for three sweets in pence\n\n    # Calculate maximum sweets if bought in sets of three\n    max_triples = total_pence // triple_price\n    remaining_pence = total_pence % triple_price\n\n    # Calculate remaining sweets that can be bought with the remaining pence\n    remaining_singles = remaining_pence // single_price\n\n    # Total number of sweets\n    max_sweets = (max_triples * 3) + remaining_singles\n\n    return max_sweets\n\nans = solution()"
    ],
    "f9e42807c5be4058858957db5e1c9c1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    may_age_future = 10  # May's age when she is 10\n    kenny_age_diff = 2   # Kenny is 2 years older than his younger brother\n    \n    # Let x be the age of Kenny's younger brother when May is 10 years old\n    younger_brother_future, kenny_age_now, may_age_now = symbols('younger_brother_future kenny_age_now may_age_now')\n\n    # Given equations from the problem statement\n    equation1 = Eq((younger_brother_future + (younger_brother_future + kenny_age_diff)), 3 * may_age_future)\n    equation2 = Eq(kenny_age_now, younger_brother_future + kenny_age_diff + (may_age_future - 7))\n    equation3 = Eq(may_age_now, 7)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (younger_brother_future, kenny_age_now, may_age_now))\n\n    # Kenny's age difference from May in the current year\n    age_difference = solutions[kenny_age_now] - solutions[may_age_now]\n\n    return age_difference\n\nans = solution()"
    ],
    "45a248898f1c4807b784e259bea7cd69": [
        "def solution():\n    from math import comb\n    # Since we need at least 1 ball in each box, we place 1 ball in each box first\n    remaining_balls = 10 - 7\n    # Now we distribute the remaining 3 balls into 7 boxes, which is equivalent \n    # to the number of combinations with repetition allowed, calculated by:\n    # comb(n + k - 1, k), where n is the number of boxes and k is the remaining balls\n    ans = comb(7 + remaining_balls - 1, remaining_balls)\n    return ans\n\nans = solution()"
    ],
    "49251eb5b4424b0f98bd1041d8e0da15": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (x + 3), 50 - x + 3)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "00ac4d063d6648e78bb7009c03d426bf": [
        "def solution():\n    total_length = 305\n    pipe_length = 5\n\n    num_pipes = total_length // pipe_length\n\n    if total_length % pipe_length != 0:\n        num_pipes += 1\n\n    return num_pipes\n\nans = solution()"
    ],
    "bc11b31a4a6140a59472be824b99ccf9": [
        "def solution():\n    def winning_strategy(total_candies):\n        # With 10 candies, if Felix follows the strategy to always leave a number\n        # of candies that is a multiple of 3 for John (after Felix's turn),\n        # Felix can ensure victory.\n        #\n        # If Felix goes first and eats 1 candy, 9 candies will be left.\n        # Now, no matter John eats 1 or 2 candies (leaving 7 or 8 candies),\n        # Felix can eat 2 or 1 candies respectively to leave a multiple of 3 for John (6 candies).\n        # From this point, Felix can always leave a multiple of 3 after his turn,\n        # eventually forcing John to eat the candy that leaves 1 candy,\n        # Felix eats the last one and wins.\n        #\n        # To generalize the strategy:\n        # Felix should make the remaining number of candies a multiple of 3 when his turn ends,\n        # thereby forcing his opponent into the losing positions.\n        if total_candies % 3 == 0:\n            return \"Second\", \"Leave a multiple of 3 candies after your turn.\"\n        else:\n            return \"First\", \"Eat 1 candy if total is modulo 3 equals 2, else eat 2 candies.\"\n\n    return winning_strategy(10)\n\nans = solution()"
    ],
    "31e292cd70e349bb90992c388528e37a": [
        "def solution():\n    # Let x be the number of litres the fish tank can hold.\n    # If he uses a 5-litre pail, 4 litres of water will overflow, so:\n    # x + 4 = 5p, where p is the number of 5-litre pails.\n    \n    # If he uses a 3-litre pail, he needs another 4 more pails of water, so:\n    # x - 3*4 = 3q, where q is the number of 3-litre pails needed.\n    \n    # We need to find the smallest x that satisfies both equations.\n    # We can iterate over multiples of 5 and check if they are 4 less than a multiple of 3.\n    p = 1\n    while True:\n        x = 5 * p - 4\n        if (x + 4) % 3 == 0:\n            return x\n        p += 1\n\nans = solution()"
    ],
    "850134f061fd402ea63d73775d0910fc": [
        "def solution():\n    ans = (38 + 8 * 9 - 15) / 5\n    return ans\n\nans = solution()"
    ],
    "b4734a26463d4091ba7a023c1ba461ca": [
        "def solution():\n    count_twice = 0\n    for num in range(1, 2017):\n        red = num % 2 == 0\n        blue = num % 3 == 0\n        green = num % 4 == 0\n\n        # Underlined exactly twice if it's multiple of two pairs of colors (2&3, 2&4 or 3&4)\n        if sum([red, blue, green]) == 2:\n            count_twice += 1\n\n    return count_twice\n\nans = solution()"
    ],
    "89fd0157409641fc9cb98637c2461cfa": [
        "def solution():\n    count, pages, digit = 0, 0, '3'\n    while True:\n        pages += 1\n        count += str(pages).count(digit)\n        if count == 28:\n            break\n    return pages\n\nans = solution()"
    ],
    "4e3792c14b8148b28eb1c6fbd6164292": [
        "def solution():\n    zoey_total = 50 + 20 + 10 + 5\n    coins = [50, 20, 10, 5]\n    for coin in coins:\n        if (zoey_total - coin) == 2 * (zoey_total - coin - coin):\n            lost_coin = coin\n            break\n    return lost_coin\n\nans = solution()"
    ],
    "697ff89b7a8e49d59bb66c994a87d7b9": [
        "from math import comb\n\ndef solution():\n    girls_comb = comb(8, 4)\n    boys_comb = comb(12, 3)\n    \n    return girls_comb * boys_comb\n\nans = solution()"
    ],
    "0f831cd802e74004acc53b99817c46c5": [
        "def solution():\n    first_bus_time = 15 * 60 + 55  # Time in minutes for the first bus (15:55)\n    second_bus_time = 16 * 60 + 35 # Time in minutes for the second bus (16:35)\n\n    time_late = 4 # Time late in minutes\n\n    time_missed_first_bus = first_bus_time + time_late\n    waiting_time_for_second_bus = second_bus_time - time_missed_first_bus\n\n    return waiting_time_for_second_bus\n\nans = solution()"
    ],
    "de21fb1f2c5c4002bd75f2837252b916": [
        "def solution():\n    ans = 456 - (170 - 144)\n    return ans\n\nans = solution()"
    ],
    "6161662a5ed44368b8a03f001cc375ea": [
        "def solution():\n    road_length = 40\n    distance_between_trees = 5\n    # Since we start with a tree at the beginning, we add 1 to include that tree.\n    num_trees = (road_length // distance_between_trees) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "aba1fa935b644d9ab044d095de69983d": [
        "def solution():\n    workers = 70\n    capacity = 8\n    lorries_needed = (workers + capacity - 1) // capacity\n    return lorries_needed\n\nans = solution()"
    ],
    "804f12c690c0453fbb8f0a21ecaea5b2": [
        "def solution():\n    # Let x be the number of boys\n    # Then the number of girls would be 152 - x\n    # If we remove 1/11 of the boys and 5 girls, the numbers become equal\n    # This gives us the equation: x - (1/11)*x = (152 - x) - 5\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x - (1/11)*x, (152 - x) - 5)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c78925a177374d8b82f3a67f599df2e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, louise = symbols('andrew louise')\n    equation1 = Eq(andrew, 3 * louise)\n    equation2 = Eq(andrew + louise, 84)\n\n    solutions = solve((equation1, equation2), (andrew, louise))\n\n    return solutions[louise]\n\nans = solution()"
    ],
    "43b3978e200e47a993909c47ecd3ded2": [
        "def solution():\n    pages_first_three_days = 40\n    average_next_four_days = 20\n    pages_last_two_days = 60\n\n    total_pages = pages_first_three_days + (average_next_four_days * 4) + pages_last_two_days\n    \n    return total_pages\n\nans = solution()"
    ],
    "09a97d605e2e4cabb643032c99b282ed": [
        "def solution():\n    # Calculate the sum of 4 numbers for each average given\n    sum_36 = 4 * 36\n    sum_38 = 4 * 38\n    sum_39 = 4 * 39\n    sum_45 = 4 * 45\n    sum_49 = 4 * 49\n    \n    # Since the sum of all 5 numbers should be the same regardless of which 4 numbers are chosen,\n    # The sum of the 5 numbers should be equivalent to the highest sum plus the largest number (since it was excluded from\n    # the smallest average calculation).\n    # To find the total sum of 5 numbers, we exclude the smallest average sum and add the largest number.\n    total_sum_5_numbers = sum_49 + 49  # Adding the largest number to the highest sum\n    \n    # We subtract the sums of the other averages from the total sum to find the excluded number.\n    excluded_number_from_36 = total_sum_5_numbers - sum_36\n    excluded_number_from_38 = total_sum_5_numbers - sum_38\n    excluded_number_from_39 = total_sum_5_numbers - sum_39\n    excluded_number_from_45 = total_sum_5_numbers - sum_45\n    # excluded_number_from_49 is not needed because it's the largest number which we already added to the total sum\n    \n    # The largest excluded number will be the largest number among the 5 numbers\n    largest_number = max(excluded_number_from_36, excluded_number_from_38,\n                         excluded_number_from_39, excluded_number_from_45, 49)\n    \n    return largest_number\n\nans = solution()"
    ],
    "02d7ef47aaab4c4bbec478d089387344": [
        "def solution():\n    # Let's denote the number of men as m and the number of women as w.\n    # According to the question, we have the following equations:\n    # w = 4 * m (there were 4 times as many women as men)\n    # w = m + 126 (the number of women was 126 more than the number of men)\n    \n    # Since both expressions are equal to w, we can set them equal to each other:\n    # 4 * m = m + 126\n    # Solve the equation for m\n    m = 126 / 3\n\n    # Find the number of women using either of the initial equations\n    w = 4 * m\n\n    # The total number of people in the concert hall is the sum of men and women\n    total_people = m + w\n    return int(total_people)\n\nans = solution()"
    ],
    "8389523689d7482abe8ecaa9a5b6b9ca": [
        "def solution():\n    # we have two equations based on the problem statement\n    # equation (1): total_students = 4 * rooms + 6\n    # equation (2): total_students + 5 = 5 * (rooms + 1)\n    # from equation (1) and (2), we can solve for total_students\n\n    rooms = symbols('rooms')\n    equation1 = Eq(4 * rooms + 6)\n    equation2 = Eq(5 * (rooms + 1) - 5)\n\n    # We want to find the value when both equations are equal (intersection point)\n    total_students = solve(equation1 - equation2, rooms)\n\n    # Calculate the number of students from the number of rooms\n    ans = 4 * total_students[0] + 6\n    \n    return ans\n\nans = solution()"
    ],
    "a1289345588b4eea9e075413d1d189c7": [
        "def solution():\n    count = 0\n    for dice1 in range(1, 7):\n        for dice2 in range(1, 7):\n            for dice3 in range(1, 7):\n                if dice1 + dice2 + dice3 == 12 and len(set([dice1, dice2, dice3])) == 3:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "06964238b9a24ef7b303a09d9b1c85c7": [
        "def solution():\n    bill_age = 70\n    grandsons_ages = [6, 12, 18]\n    \n    while True:\n        bill_age += 1\n        grandsons_ages = [age + 1 for age in grandsons_ages]\n        if bill_age == sum(grandsons_ages):\n            break\n            \n    return bill_age\n\nans = solution()"
    ],
    "324ea1c40561423abe7bda23ae7ac925": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The equations are x ≡ 3 (mod 4), x ≡ 3 (mod 5), x ≡ 3 (mod 9)\n    congruences = [(3, 4), (3, 5), (3, 9)]\n    \n    # Use Chinese Remainder Theorem to find solution\n    x, _ = solve_congruence(*congruences)\n\n    # Find the largest value less than 200\n    while x < 200:\n        ans = x\n        x += 4*5*9   # because the LCM of 4, 5, and 9 is their product\n\n    return ans\n\nans = solution()"
    ],
    "1774a1190e9c46c2aacaa2e8fc28e2da": [
        "def solution():\n    total_sum_initial = 7 * 9\n    total_sum_after_removal = 6 * 10\n    removed_number = total_sum_initial - total_sum_after_removal\n    return removed_number\n\nans = solution()"
    ],
    "2758e86259aa42e29a0318d2bdb3a711": [
        "def solution():\n    total_people = 120\n    people_left = total_people // 3\n    people_still_at_party = total_people - people_left\n    return people_still_at_party\n\nans = solution()"
    ],
    "28537d9f7465445e968eb0b26a4a451c": [
        "def solution():\n    sugar_weight_kg = 1\n    pasta_weight_g = 50\n    spaghetti_handful_g = 15\n\n    total_weight_g = (sugar_weight_kg * 1000) + pasta_weight_g + spaghetti_handful_g\n\n    return total_weight_g\n\nans = solution()"
    ],
    "fd395dd46af44c2fba9a202703ad88e8": [
        "def solution():\n    x = (16 - 1) // 5\n    return x\n\nans = solution()"
    ],
    "9562aafe97384f7ea95275fcb79e1da2": [
        "def solution():\n    from math import lcm\n\n    # Least common multiple will give us the time when all three trains arrive together\n    interval = lcm(15, 12, 8)\n    \n    # Each train arrives together at 10:00 am, which is 600 minutes from midnight (10*60)\n    next_time_minutes = 600 + interval\n    \n    # Calculate hours and minutes for next time\n    hours = next_time_minutes // 60\n    minutes = next_time_minutes % 60\n\n    return f\"{hours:02d}:{minutes:02d}\"\n\nans = solution()"
    ],
    "770aa7f2ec2448dfb419dc832282a417": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(56 - 4 * (20 - 6 * x), 48)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "314a52b81cf948798c3eb0b23a09fb4e": [
        "def solution():\n    total_questions = 20\n    marks_per_correct = 5\n    marks_per_wrong = -2\n\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        if correct_answers * marks_per_correct + wrong_answers * marks_per_wrong == 79:\n            return correct_answers\n\nans = solution()"
    ],
    "98f594e37f074962982921040758a2f4": [
        "def solution():\n    count = 0\n    for i in range(1, 106):\n        count += str(i).count('0')\n    return count\n\nans = solution()"
    ],
    "60370cf36b164039b0b08b75d45daf26": [
        "def solution():\n    total_students = 52\n    swimmers = 30\n    cyclists = 35\n    table_tennis_players = 42\n\n    # Using Inclusion-Exclusion Principle for the least number of students playing all three sports\n    # total = swimmers + cyclists + table_tennis_players - (at_least_two_sports) + all_three_sports\n    # Since we need to calculate the least possible number of students who play all three sports,\n    # we can assume that all students are included in the at_least_two_sports group. Hence,\n    # at_least_two_sports = total_students.\n    # Then, all_three_sports = swimmers + cyclists + table_tennis_players - total_students\n\n    all_three_sports = swimmers + cyclists + table_tennis_players - total_students\n\n    return all_three_sports\n\nans = solution()"
    ],
    "7a6352d69d43478d857666ac24c5efac": [
        "def solution():\n    a = 3999\n    b = 2014.2014\n    c = 3999.3999\n    d = 2014\n    e = 12.0012\n\n    common_factor = a * b + c * d\n    ans = common_factor / e\n    return ans\n\nans = solution()"
    ],
    "8d509648485641b48c77ecbbb044bdcf": [
        "def solution():\n    piles = 6\n    apples_per_pile = 8\n\n    total_apples = piles * apples_per_pile\n\n    return total_apples\n\nans = solution()"
    ],
    "499aa61be1124476bb26bc1e720b0c26": [
        "def solution():\n    total_distance = 11\n    day_climb = 3\n    night_slide = 1\n    net_progress = day_climb - night_slide\n    \n    # Calculate days for the last climb\n    days = (total_distance - day_climb) // net_progress + 1\n    \n    return days\n\nans = solution()"
    ],
    "06b1e5f9947e4439b6bdd18c70668419": [
        "def solution():\n    # Worst Case: We can take all marbles of one color without taking any marble of another color\n    # There are 4 colors: red, blue, yellow, and green\n\n    # Take almost all red marbles, still only red\n    red_marbles = 12\n    \n    # Take almost all blue marbles, still only red and blue\n    blue_marbles = 9\n    \n    # Take almost all yellow marbles, still only red, blue, and yellow\n    yellow_marbles = 8\n    \n    # The next marble we pick must be of the remaining color, green\n    # So we add one marble to ensure that we have all four colors\n    green_marbles = 1 \n    \n    # The number of marbles required to ensure 4 different colors is the sum of all the worst cases + 1\n    total_marbles = red_marbles + blue_marbles + yellow_marbles + green_marbles\n\n    return total_marbles\n\nans = solution()"
    ],
    "12599cd086b74a6dbee49affc2b9da94": [
        "def solution():\n    time_to_pass_tree = 30  # time in seconds\n    length_of_train = 360  # length in meters\n    \n    # Speed is distance divided by time\n    speed_of_train = length_of_train / time_to_pass_tree  # speed in meters per second\n    \n    # Convert speed from m/s to km/h\n    speed_of_train_kmh = speed_of_train * 3.6\n    \n    return speed_of_train_kmh\n\nans = solution()"
    ],
    "a8c99058f45b4a2a8e447d1b68ae74bc": [
        "def solution():\n    # Eddie can choose from either of the three types of restaurants\n    chinese_restaurants = 8\n    mexican_restaurants = 6\n    fast_food_restaurants = 4\n    \n    # The different choices Eddie has is the sum of the available restaurants.\n    total_choices = chinese_restaurants + mexican_restaurants + fast_food_restaurants\n    \n    return total_choices\n\nans = solution()"
    ],
    "6c11b151fed94fb483ea9f5b76290855": [
        "def solution():\n    # The difference between the numbers directly opposite in a circle is half the total number of people.\n    # The given numbers are 10 and 24, so the difference is 24 - 10 = 14.\n    # This difference is half the number of people, therefore the total number of people is 14 * 2\n    total_people = 14 * 2\n    return total_people\n\nans = solution()"
    ],
    "a033d32f04c4454c8b6d34df01854889": [
        "def solution():\n    return 7.72 - 7.54\n\nans = solution()"
    ],
    "d9ed06f56ae74dfcb2fd97b178c32dea": [
        "def solution():\n    factors_of_66 = [i for i in range(1, 67) if 66 % i == 0] \n    valid_ages = [age for age in factors_of_66 if (age - 4) % 6 == 0]\n    return valid_ages[0]\n\nans = solution()"
    ],
    "541674da97474788b63ff77b2d0287bb": [
        "def solution():\n    from math import lcm\n    return lcm(24, 64)\n\nans = solution()"
    ],
    "1a58479ac34b4689bdb3e7c074f88212": [
        "def solution():\n    # Adam's total weekly pocket money\n    total_money = 80\n\n    # Money spent on books and stationery\n    books_stationery = 0.20 * total_money\n\n    # Let the money spent on transport be x\n    # Then the money spent on food is 3x (3 times transport)\n    # Money saved is food - 6, thus:\n    # total_money = books_stationery + x + 3x + (3x - 6)\n    # Simplify the equation: total_money = books_stationery + 7x - 6\n\n    # Solve for x (transport)\n    x = (total_money - books_stationery + 6) / 7\n\n    # Calculate savings\n    savings = (3 * x) - 6\n\n    # Convert savings to percent of total pocket money\n    savings_percent = (savings / total_money) * 100\n\n    return savings_percent\n\nans = solution()"
    ],
    "3daa406fe23b4025ab00fffd6760fde8": [
        "def solution():\n    # Initialize the counter for the number of valid numbers\n    count = 0\n    # Generate all numbers between 3267 and 5120\n    for num in range(3267, 5121):\n        str_num = str(num)\n        # Check if the number is composed only of digits 1-6 and if all digits are unique\n        if all(digit in '123456' for digit in str_num) and len(set(str_num)) == len(str_num):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6829f51b13a0426fb1a619b064401568": [
        "def solution():\n    factors_of_75 = [factor for factor in range(10, 99) if 75 % factor == 0]\n    for num in factors_of_75:\n        if num % 6 == 3:\n            return num\n\nans = solution()"
    ],
    "bf31842e59b84f869bdd3a0411e455df": [
        "def solution():\n    # Little Miss Careless incorrectly wrote 41 instead of 14 and got 50 as answer.\n    # Let's denote the original minuend (the number to be subtracted from) as 'x'.\n    # According to the problem:\n    # x - 41 = 50 (Incorrect operation)\n    # The correct operation should be:\n    # x - 14 = correct_difference (Correct operation)\n    # From the incorrect operation we can deduce the actual minuend 'x':\n    minuend = 50 + 41\n    # Now, we can find the correct difference using the correct subtrahend '14':\n    correct_difference = minuend - 14\n    return correct_difference\n\nans = solution()"
    ],
    "93403cabcded4b63968e13348f241754": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(34 - 3 * (2 * x - 2), 16)\n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "a778b5cfeeed482b83f37aa61c3b6eb5": [
        "def solution():\n    return sum([40, 36, 32, 28, 24]) - sum([38, 34, 30, 26, 22])\n\nans = solution()"
    ],
    "5384b43a54f049ec9c65ebb35ee718c1": [
        "def solution():\n    justin_apples = 4\n    sisters_apples = 5 * 4  # 5 apples each for four sisters\n    remaining_apples = 20\n\n    total_apples = justin_apples + sisters_apples + remaining_apples\n    return total_apples\n\nans = solution()"
    ],
    "86d0f1125cdd46ac9604c4d192220e10": [
        "def solution():\n    ans = 45.36 + 1.25 + 2.75 + 4.64\n    return ans\n\nans = solution()"
    ],
    "ae3921e4e39849ffbe3f0c238b81b81b": [
        "def solution():\n    principal = 5000\n    final_amount = 7320.5\n    years = 4\n\n    rate = (final_amount / principal) ** (1 / years) - 1\n\n    return round(rate, 4)\n\nans = solution()"
    ],
    "df97cfc5a9874cc7aac262f019e950a2": [
        "def solution():\n    for n in range(1, 100):\n        if (n ** 2 + n + 31) == (n + 1) ** 2:\n            return n ** 2 + 31\n\nans = solution()"
    ],
    "3b5e11ff28904b30b8919884597986b5": [
        "def solution():\n    ans = 888 // 24\n    return ans\n\nans = solution()"
    ],
    "c3b93f4ccd0047d9b0123beb59667db6": [
        "def solution():\n    ans = 56 / 21 * 3\n    return ans\n\nans = solution()"
    ],
    "3009ddde568d44929af80990edfca6a6": [
        "def solution():\n    part1 = 3.2 + 6.77 + 8.88\n    part2 = 6.77 + 8.88 + 6.3\n    part3 = 3.2 + 6.77 + 8.88 + 6.3\n    part4 = 6.77 + 8.88\n    \n    ans = (part1 * part2) - (part3 * part4)\n    \n    return ans\n\nans = solution()"
    ],
    "f43eb58f48b14c988c4e389d78a71faa": [
        "def solution():\n    total_saved = 4410\n    january_saved = 2450\n    march_saved = 855\n    february_saved = total_saved - january_saved - march_saved\n    return february_saved\n\nans = solution()"
    ],
    "a7e6156c711b427a80b6ffdd8bebbce8": [
        "def solution():\n    original_value = 176\n    new_value = 88\n    percent_change = ((new_value - original_value) / original_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "644892f23d5d42ca9787cd008215de03": [
        "def solution():\n    time_per_picture = 10  # minutes required to paint one picture\n    total_time = 80  # total available time in minutes (1 hour and 20 minutes)\n\n    num_pictures = total_time // time_per_picture\n\n    return num_pictures\n\nans = solution()"
    ],
    "5f662e9aa4db4fbfbf1a266b8558e2a8": [
        "def solution():\n    minutes = 8\n    seconds_per_minute = 60\n    ans = minutes * seconds_per_minute\n    return ans\n\nans = solution()"
    ],
    "bf846dec93ce477ab47a02ca859245e6": [
        "def solution():\n    final_amount = 924\n    annual_interest_rate = 0.08\n    number_of_years = 4\n\n    present_value = final_amount / ((1 + annual_interest_rate) ** number_of_years)\n\n    return present_value\n\nans = solution()"
    ],
    "e199247a5e3f4630aa1a02b225d3db54": [
        "def solution():\n    answer = 7.3 - 2.64\n    return answer\n\nans = solution()"
    ],
    "26b43a4d19504cc39391c90f265a8e59": [
        "def solution():\n    total_apples = 30\n    other_children = 5\n    min_apples_other_children = 1\n\n    max_apples_Ann = total_apples - (min_apples_other_children * other_children)\n\n    return max_apples_Ann\n\nans = solution()"
    ],
    "36a3b0319aa94ac78912a13a30272f8d": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('1356789'):\n        first_number = int(''.join(perm[0:3]))\n        second_number = int(''.join(perm[3:5])) # Since the second number is twice the first, it must have two digits\n        third_number = int(''.join(perm[5:7])) # Since the third number is four times the first, it must have two digits\n        \n        if second_number == 2 * first_number and third_number == 4 * first_number:\n            return third_number\n\nans = solution()"
    ],
    "e8548c7b8d69402e81f35205050bd98d": [
        "def solution():\n    shirts = 3\n    pants = 2\n    dresses = 3\n    shoes = 4\n    heels = 2\n\n    pants_outfits = shirts * pants * shoes\n    dress_outfits_with_shoes = dresses * shoes\n    dress_outfits_with_heels = dresses * heels\n\n    total_outfits = pants_outfits + dress_outfits_with_shoes + dress_outfits_with_heels\n\n    return total_outfits\n\nans = solution()"
    ],
    "182737e9117d46c389cc27f2a8aad6c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    equation1 = Eq(A + B, 13)\n    equation2 = Eq(A + C, 25)\n    equation3 = Eq(C, 3 * B)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "cf31bb404b754d18bd83978a61ac8d0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, teddy_bear = symbols('book teddy_bear')\n\n    equation1 = Eq(4 * book + 8 * teddy_bear, 164)\n    equation2 = Eq(2 * book + 3 * teddy_bear, 67)\n\n    solutions = solve((equation1, equation2), (book, teddy_bear))\n\n    return solutions[book]\n\nans = solution()"
    ],
    "8813aaf9e8434f92984ad99a90e18eb9": [
        "def solution():\n    from sympy import divisors\n\n    # Since M and N only have prime factors 3 and 5, and their HCF is 75,\n    # we can start by trying to find M and N by multiplying 75 by powers of 3 and/or 5.\n    # The number of divisors a number has can be determined by its prime factorization.\n    # If a number has prime factorization a^p * b^q * c^r, ...\n    # ... then the number of divisors would be (p+1)*(q+1)*(r+1).\n\n    # 75 has the prime factorization of 3^1 * 5^2, so we're looking for M and N\n    # which have 12 and 10 divisors respectively,\n    # and they should be in the form of 3^x * 5^y where (x+1)(y+1) is 12 or 10.\n\n    # The only divisors of 75 are 1, 3, 5, 15, 25, and 75 (6 divisors),\n    # so we need to increase either the power of 3 or 5 or both.\n\n    # Trying combinations of powers of 3 and 5 such that (x+1)(y+1) = 12 or 10\n    # By trial, we get the following possible exponents (x,y) for 12 divisors: (3, 1) or (1, 5)\n    # For 10 divisors: (2, 1) or (1, 3)\n\n    # Calculate M and N based on the powers of 3 and 5.\n    # Only one combination of x and y will yield M and N with different number of divisors, using that combination\n    \n    # For M with 12 divisors (3^3 * 5^1 or 3^1 * 5^5)\n    possible_M = [3**3 * 5**1, 3**1 * 5**5]\n    \n    # For N with 10 divisors (3^2 * 5^1 or 3^1 * 5^3)\n    possible_N = [3**2 * 5**1, 3**1 * 5**3]\n\n    # Check the combinations to find M and N that have the correct amount of divisors\n    for m in possible_M:\n        for n in possible_N:\n            if len(divisors(m)) == 12 and len(divisors(n)) == 10 and m // 75 == m / 75 and n // 75 == n / 75:\n                ans = m + n\n                return ans\n\nans = solution()"
    ],
    "a38308f19b794b3b96e4cb5fede094c4": [
        "def solution():\n    total_mass_kg = 9\n    total_mass_g = 5\n    soil_mass_kg = 4\n    soil_mass_g = 50\n\n    total_mass_g += total_mass_kg * 1000  # Convert total mass to grams\n    soil_mass_g += soil_mass_kg * 1000    # Convert soil mass to grams\n    sand_mass_g = total_mass_g - soil_mass_g  # Find sand mass in grams\n\n    # Find the difference in mass between soil and sand packs in grams\n    difference = abs(soil_mass_g - sand_mass_g)\n\n    # Convert the difference back to kg and g\n    difference_kg = difference // 1000\n    difference_g = difference % 1000\n\n    return difference_kg, difference_g\n\nans = solution()"
    ],
    "1530f45644534ab9a97cbe5b7104abc7": [
        "def solution():\n    ans = sum(1 / i for i in range(1, 101) for j in range(1, i))\n    return ans\n\nans = solution()"
    ],
    "6c6e0d85d93f4c04993e70d48958151d": [
        "def solution():\n    total_questions = 10\n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        score = correct_answers * 4 - incorrect_answers * 2\n        if score == 29:\n            return correct_answers\n\nans = solution()"
    ],
    "0072c8403a1845a5b093725c5bb5aeaf": [
        "def solution():\n    pattern_length = len(\"12345\")\n    full_patterns = 52 // pattern_length\n    remaining_digits = 52 % pattern_length\n    sum_of_pattern = sum(int(digit) for digit in \"12345\")\n    \n    total_sum = full_patterns * sum_of_pattern + sum(int(\"12345\"[i]) for i in range(remaining_digits))\n    \n    return total_sum\n\nans = solution()"
    ],
    "1bf59a6dc1ea4ff38f6849f658bfb007": [
        "def solution():\n    # Let x be the number of buttons James originally has,\n    # Then Nina has 22 - x buttons.\n    # After Nina gives 4 buttons to James,\n    # James will have x + 4 buttons and Nina will have 22 - x - 4 buttons.\n    # They will have the same number of buttons, so we set the two expressions equal to each other.\n\n    for x in range(1, 22):\n        if x + 4 == 22 - x - 4:\n            # We found the number of buttons James has, so Nina's original number of buttons is:\n            return 22 - x\n\nans = solution()"
    ],
    "6d8bf3a7fce3414a9c67c4a3fa1f7c48": [
        "def solution():\n    paper_per_kite = 0.36\n    total_paper = 4.8\n\n    kites = total_paper / paper_per_kite\n\n    return int(kites)\n\nans = solution()"
    ],
    "2d9fc3817dca46ac92eaa73adac8ada7": [
        "def solution():\n    # Owen -> Oscar: 10 fish for 4 rabbits, so 1 rabbit is worth 10/4 fish\n    rabbit_worth_in_fish = 10 / 4\n\n    # Oscar -> Dennis: 5 rabbits for 6 packs of wheat, so 1 pack of wheat is worth 5/6 rabbits\n    wheat_worth_in_rabbits = 5 / 6\n\n    # How many fish for 1 pack of wheat? Multiply the value of rabbit in fish by the value of wheat in rabbits\n    wheat_worth_in_fish = rabbit_worth_in_fish * wheat_worth_in_rabbits\n\n    # How many fish for 12 packs of wheat?\n    fish_for_twelve_packs_of_wheat = wheat_worth_in_fish * 12\n\n    return fish_for_twelve_packs_of_wheat\n\nans = solution()"
    ],
    "b65a5554264043bb99d0c4476d46daa7": [
        "from fractions import Fraction\n\ndef solution():\n    long_rod_length = Fraction(54, 5) # Convert 10 4/5 to an improper fraction\n    short_rod_length = Fraction(3, 10)\n    number_of_short_rods = long_rod_length // short_rod_length\n\n    return number_of_short_rods\n\nans = solution()"
    ],
    "604b32ec4594413a9da6ea7f419a86e6": [
        "def solution():\n    single_laptop_price = 149.99\n    deal_price_for_30 = 2800\n    laptops_needed = 20\n\n    cost_without_deal = single_laptop_price * laptops_needed\n    cost_per_laptop_with_deal = deal_price_for_30 / 30\n    cost_with_deal = cost_per_laptop_with_deal * laptops_needed\n\n    savings = cost_without_deal - cost_with_deal\n\n    return round(savings, 2)\n\nans = solution()"
    ],
    "217f4abc2ab44264affad60373305d47": [
        "def solution():\n    total_length = 320  # The total length of the road in meters\n    num_trees = 79      # The total number of trees\n    \n    # The number of intervals between trees is one more than the number of trees\n    num_intervals = num_trees + 1\n    \n    # The distance between each tree is the total length divided by the number of intervals\n    distance_between_trees = total_length / num_intervals\n    \n    return distance_between_trees\n\nans = solution()"
    ],
    "6d6c627dff57484693f832331a8fed28": [
        "from math import factorial\n\ndef solution():\n    # The number of ways to arrange all singing performances (6!)\n    sing_perms = factorial(6)\n    \n    # The singing performances act as \"dividers\" for the dancing performances\n    # We choose 3 spots for the dancing performances from the available 7 spots,\n    # which come from 6 singing plus 1 extra spot to satisfy the condition.\n    dance_spots = factorial(7) // (factorial(4) * factorial(7 - 4))\n    \n    # Multiply the permutations of singing and the combination of dance spots\n    total_ways = sing_perms * dance_spots\n    \n    return total_ways\n\nans = solution()"
    ],
    "6422450ba3314b00956e086caa019113": [
        "def solution():\n    original_price = 125\n    discount_rate = 0.35\n    discounted_amount = original_price * discount_rate\n    final_price = original_price - discounted_amount\n    return final_price\n\nans = solution()"
    ],
    "6d6721335237466b8bf898c20f70285f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    penguins = symbols('penguins')\n    # If 3 fish per penguin, there are 5 fish left\n    equation1 = Eq(3 * penguins + 5, 4 * penguins - 15)\n\n    penguin_count = solve(equation1, penguins)\n\n    return penguin_count[0]\n\nans = solution()"
    ],
    "558a4fe5c5fe460f838fa7deae63c54b": [
        "def solution():\n    hourly_wage = 5.12\n    hours_worked = 8\n    total_earnings = hourly_wage * hours_worked\n    return total_earnings\n\nans = solution()"
    ],
    "01b4b64e032345db96ca5a028d2343db": [
        "def solution():\n    # Jenny subtracted 26 and got -14.\n    # So the original number before the wrong operation was:\n    original_number = -14 + 26\n\n    # The correct operation was to add 26, so the number she should have obtained is:\n    correct_number = original_number + 26\n\n    return correct_number\n\nans = solution()"
    ],
    "6dead3e618154fcda9ed1a944c4d862e": [
        "def solution():\n    percentage = 35\n    total = 80\n\n    ans = (percentage / 100) * total\n\n    return ans\n\nans = solution()"
    ],
    "c408c811fcb041b3aa27099ad68703f4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(28 - 3 * (24 - 5 * x), 1)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0dd1e1e4796044aeb251dbf0652d6b52": [
        "def solution():\n    ans = 322 - (95 - 87) * 16\n    return ans\n\nans = solution()"
    ],
    "25b73873a475424bb2c3460ea7370ffc": [
        "def solution():\n    matthew_height = 120\n    ratio_matthew = 4\n    ratio_kelly = 5\n    kelly_height = (matthew_height * ratio_kelly) / ratio_matthew\n    \n    return kelly_height\n\nans = solution()"
    ],
    "056eb54e02ef4e86834ab49cf3cc01b4": [
        "def solution():\n    ans = 689 // 13\n    return ans\n\nans = solution()"
    ],
    "61bb0063c0734b36a1996af254e6fb90": [
        "def solution():\n    total_cards = 56\n    fraction_lost = 3 / 8\n\n    cards_lost = total_cards * fraction_lost\n\n    return int(cards_lost)\n\nans = solution()"
    ],
    "02bd6a91ac214217ad925716b17c6508": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(10):\n            if 11 * a + 111 * b == int(f\"{a}{a}{b}\"):\n                return a + b\n\nans = solution()"
    ],
    "ada569f0735e44a5b658b942af33e959": [
        "def solution():\n    half_time_scores = 0\n    \n    # At half time, the maximum number of goals scored by either team can be 3\n    for team1_goals in range(4): \n        for team2_goals in range(3): # Since the final score for team2 is 2, it can't score more than 2 by half time\n            # The score during half time should be less than or equal to the final score\n            if team1_goals <= 3 and team2_goals <= 2:\n                # After half time, there should still be the possibility of achieving the final score\n                # So the remaining goals should be enough to reach the final score\n                remaining_goals_team1 = 3 - team1_goals\n                remaining_goals_team2 = 2 - team2_goals\n                if remaining_goals_team1 >= 0 and remaining_goals_team2 >= 0:\n                    half_time_scores += 1\n\n    return half_time_scores\n\nans = solution()"
    ],
    "2789484c36cf4e54b28be43d05009e13": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    clara, emma = symbols('clara emma')\n    equation1 = Eq(clara, 5 * emma)\n    equation2 = Eq(clara + emma, 1002)\n    \n    solutions = solve((equation1, equation2), (clara, emma))\n    \n    return solutions[emma]\n\nans = solution()"
    ],
    "d3a2000bbe0d4458a84669bc22de18a2": [
        "from math import comb\n\ndef solution():\n    return comb(6, 2)\n\nans = solution()"
    ],
    "879e5feaeecc4a8ea542b447bc7e8fce": [
        "def solution():\n    full_weight = 80\n    half_full_weight = 60\n    # When the basket is full, it contains the weight of the empty basket plus the weight of the mangoes.\n    # When the basket is half full, it also contains the weight of the empty basket, plus half the weight of the mangoes.\n    # By subtracting the weight of the half full basket from the weight of the full basket,\n    # we get half the weight of the mangoes. We can then subtract this value from the weight of the half full basket\n    # to find the weight of the empty basket.\n    weight_of_half_mangoes = full_weight - half_full_weight\n    empty_basket_weight = half_full_weight - weight_of_half_mangoes\n\n    return empty_basket_weight\n\nans = solution()"
    ],
    "b6d07c1739e540859bca83cddbe021fd": [
        "def solution():\n    percentage = 85 / 100\n    total_amount = 400\n    result = percentage * total_amount\n    return result\n\nans = solution()"
    ],
    "31f14949d8114ab8a17cdccc2df7d350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n\n    # Number of girls who can swim\n    girls_can_swim = (3/8) * girls\n\n    # Number of boys who can swim\n    boys_can_swim = (3/5) * boys\n\n    # Total pupils who can swim\n    total_can_swim = girls_can_swim + boys_can_swim\n\n    # Total pupils who cannot swim\n    total_cannot_swim = 20\n\n    # Since an equal number of boys and girls cannot swim,\n    # The number of girls who cannot swim is 10 (half of total who cannot swim)\n    # The number of boys who cannot swim is also 10\n\n    # Therefore, the total number of girls is\n    # girls_who_can_swim + girls_who_cannot_swim\n    equation1 = Eq(girls_can_swim + 10, girls)\n\n    # Therefore, the total number of boys is\n    # boys_who_can_swim + boys_who_cannot_swim\n    equation2 = Eq(boys_can_swim + 10, boys)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (girls, boys))\n\n    # Calculate total pupils in the class\n    total_pupils = solutions[girls] + solutions[boys]\n\n    return total_pupils\n\nans = solution()"
    ],
    "c322675f6c904cb28fcb4d8fcdeea6df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(8.5 - 4*(x - 1.5) + 3.2*(x - 2), 2.5*x + 3*(2.5 - x))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e59a69364151431da70cfdb7b285eac6": [
        "def solution():\n    return 32 * 125 * 23\n\nans = solution()"
    ],
    "42e36157dca7436e992427566b464adc": [
        "def solution():\n    bud_sweets = 16\n    pip_fraction = 3 / 5\n    total_sweets = bud_sweets / (1 - pip_fraction)\n    \n    return int(total_sweets)\n\nans = solution()"
    ],
    "cd20ea5fd0f64dad8fea2ee8adb41891": [
        "def solution():\n    # Since Mike's position is always the 2nd in line,\n    # the classroom must form a grid where Mike could be 2nd in all directions.\n    # This means the classroom arrangement could be 2xN or Nx2, where N is an unknown integer.\n    \n    # If the classroom is 2xN, Mike could be in position (1, 2) or (2, 1).\n    # If the classroom is Nx2, Mike could be in position (2, 1) or (N, 2).\n    # In both cases, Mike should not be located in a corner,\n    # and there must be at least one other student behind and in front of him, as well as to his left and right.\n    \n    # Thus, we need to find factors of the total number of students excluding 1 and itself,\n    # that can form such an arrangement.\n    # Since there is no upper limit given, we assume that number is reasonable and start from 2x3 grid as the smallest.\n    # Accordingly, the classroom cannot be a square, so we are only looking for 2 distinct factors.\n    \n    count = 0\n    for i in range(2, 101):  # reasonable upper bound for a classroom size\n        for j in range(i+1, 101):  # to ensure j != i\n            if i * j > count:\n                # Ensure Mike is not at a corner, so i and j must be greater than 2\n                if i > 2 and j > 2:\n                    count = i * j\n    \n    # The highest count value will be our answer\n    return count\n\nans = solution()"
    ],
    "d40f5cb1f6a24d038e89fe06cd993eb4": [
        "def solution():\n    result = 6 * 5\n    percentage = (result / 40) * 100\n    return percentage\n\nans = solution()"
    ],
    "813f3075f35d4821a1a7fc16e2f6d52b": [
        "def solution():\n    return 5 * 57 * 4\n\nans = solution()"
    ],
    "103d552fb6da4c0783be7a342f20b8bc": [
        "def solution():\n    price_per_cup = 30 / 3\n    total_cost = price_per_cup * 5\n    return total_cost\n\nans = solution()"
    ],
    "65f6b4e0577647579449a1aa4cc3fa40": [
        "def solution():\n    ans = sum([(i+1)**2 - i**2 for i in range(1, 9, 2)])\n    return ans\n\nans = solution()"
    ],
    "308e0096e80b4f19bf3d9b5c553a195d": [
        "def solution():\n    average_daily_earnings = 60\n    days_in_a_week = 7\n\n    total_earnings = average_daily_earnings * days_in_a_week\n\n    return total_earnings\n\nans = solution()"
    ],
    "b1efeaefd31345e39a5a87a2bb5673a9": [
        "def solution():\n    total_children = 234\n    absent_children = 75\n    present_children = total_children - absent_children\n    return present_children\n\nans = solution()"
    ],
    "8aa18ff22f444b93b44cb12fdcc6688e": [
        "def solution():\n    ways = [0] * (6 + 1)\n    ways[0] = 1  # Base case: 1 way to reach step 0\n\n    for i in range(1, 7):\n        ways[i] += ways[i - 1] if i - 1 >= 0 else 0\n        ways[i] += ways[i - 2] if i - 2 >= 0 else 0\n        ways[i] += ways[i - 3] if i - 3 >= 0 else 0\n\n    return ways[6]\n\nans = solution()"
    ],
    "43a325f2110643bc915bdc94e8f7b758": [
        "def solution():\n    big_houses = 5\n    small_houses = 9\n    big_house_capacity = 4\n    total_rabbits = 38\n\n    # Calculate how many rabbits can be accommodated in big houses\n    rabbits_in_big_houses = big_houses * big_house_capacity\n\n    # Calculate how many rabbits have to be accommodated in small houses\n    rabbits_in_small_houses = total_rabbits - rabbits_in_big_houses\n\n    # Calculate how many rabbits can each small house accommodate\n    rabbits_per_small_house = rabbits_in_small_houses / small_houses\n\n    return rabbits_per_small_house\n\nans = solution()"
    ],
    "9d723089837f477db7a98fc0d0033d94": [
        "def solution():\n    return 5 - 1.02\n\nans = solution()"
    ],
    "4b507d02ac2f4e03895bd099fa8097c8": [
        "def solution():\n    average_pizzas_per_month = 15\n    number_of_months = 5  # from March to July inclusive\n\n    total_pizzas = average_pizzas_per_month * number_of_months\n\n    return total_pizzas\n\nans = solution()"
    ],
    "340fa54260fb43788db3cac05726737c": [
        "def solution():\n    sum_numbers = 21 + 22 + 23\n    ans = int(sum_numbers / (2 * 3))\n    return ans\n\nans = solution()"
    ],
    "5206643ac0d74672bd7f51f36c05b327": [
        "def solution():\n    ans = 21 + 27 + 19 - 17\n    return ans\n\nans = solution()"
    ],
    "a63c3f97f6f747fb8f6167272df4d9e0": [
        "def solution():\n    ans = 20.2 * 3.83 + 2.02 * 143.7 + 18.2 * 79.8\n    return ans\n\nans = solution()"
    ],
    "db1980b14fff4be98f10937c9ad2d0bb": [
        "def solution():\n    speed_ship = 33\n    speed_current = 3\n    speed_upstream = speed_ship - speed_current\n    distance = 150\n    time_upstream = distance / speed_upstream\n\n    return time_upstream\n\nans = solution()"
    ],
    "6e6e70f8c762461081d8768c9cd5d599": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    drink, popcorn = symbols('drink popcorn')\n    \n    equation1 = Eq(drink + popcorn, 90)\n    equation2 = Eq(2 * drink + popcorn, 145)\n\n    solutions = solve((equation1, equation2), (drink, popcorn))\n\n    return solutions[popcorn]\n\nans = solution()"
    ],
    "2ef08403147440cebc886fef6d923504": [
        "def solution():\n    first_multiple = (56 // 4) * 4\n    if first_multiple < 56:\n        first_multiple += 4\n    last_multiple = (92 // 4) * 4\n\n    count_multiples = ((last_multiple - first_multiple) // 4) + 1\n    return count_multiples\n\nans = solution()"
    ],
    "61e1de37a14f48a6991bab9a2d3a4694": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (3, 4), (4, 5)]\n    ans, _ = solve_congruence(*congruences)\n    while ans < 100:\n        return ans\n        ans += lcm_3_4_5\n\nans = solution()"
    ],
    "7b0029bc1a5e4ae98eb2f317f91d9e07": [
        "def solution():\n    return (3.5 + 6.9) / 2\n\nans = solution()"
    ],
    "938865d708b54013bdffe7745f3c071e": [
        "def solution():\n    first_term = 2\n    last_term = 50\n    difference = 2\n\n    num_terms = (last_term - first_term) // difference + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "ff21b342853b4526901990586afdd9a1": [
        "def solution():\n    ans = 0\n    sign = 1\n    for i in range(60, 0, -1):\n        ans += sign * i\n        # Reverse sign after every two operations\n        if i % 2 == 0:\n            sign *= -1\n    return ans\n\nans = solution()"
    ],
    "6a0715adbecf4e6d977379c6d8e8b693": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    abigail_age_now, ryan_age_now = symbols('abigail_age_now ryan_age_now')\n\n    equation1 = Eq(abigail_age_now, 3 * ryan_age_now)                   # Abigail is three times as old as Ryan\n    equation2 = Eq(abigail_age_now + 6, 42)                             # In 6 years, Abigail will be 42\n\n    solutions = solve((equation1, equation2), (abigail_age_now, ryan_age_now))\n\n    ryan_age_in_2_years = solutions[ryan_age_now] + 2                   # Ryan's age in 2 years\n\n    return ryan_age_in_2_years\n\nans = solution()"
    ],
    "9566235419c644bda8f4a29fbdf4e32d": [
        "def solution():\n    return 80 * 125 * 63\n\nans = solution()"
    ],
    "243b6cce4d9f45acafd03f1040ae77c4": [
        "def solution():\n    base_pattern = [9, 1, 9, 1]  # 9^1 has ones digit 9, 9^2 has ones digit 1, and so on (it cycles)\n\n    # We want to find the ones digit of 999^99, but 999's ones digit behaves as 9's.\n    # So we compute the ones digit of 9^99. We use the pattern that repeats every 4 powers.\n    pattern_index = (99 % 4) - 1  # Subtract 1 to convert to 0-based index\n\n    # If pattern_index is negative, it means the index should be the last in the cycle\n    if pattern_index < 0:\n        pattern_index += 4\n\n    ones_digit = base_pattern[pattern_index]\n\n    return ones_digit\n\nans = solution()"
    ],
    "d40d9028269a40b1a074fb83c6e6f359": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    # Define the symbol for Claire's current age\n    claire_current_age = symbols('claire_current_age')\n    # Equation representing the age relation given in the problem\n    equation = Eq(claire_current_age + 6, 3 * claire_current_age)\n    # Solve the equation for Claire's current age\n    claire_age_now = solve(equation, claire_current_age)[0]\n    # Calculate Claire's age two years from now\n    claire_age_in_two_years = claire_age_now + 2\n    return claire_age_in_two_years\n\nans = solution()"
    ],
    "2dc1cabb496241cf9e53891c8379b8e2": [
        "def solution():\n    ans = 526 * 4\n    return ans\n\nans = solution()"
    ],
    "494ec1b29a6b4fa3a72a5c3c403e4f01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the variable t be the time the journey should have taken\n    t = symbols('t')\n\n    # Journey took 11/12 of the time it should have done\n    # It arrived 5 minutes late, despite leaving 15 minutes late\n    # The actual time taken is t * 11/12\n    # t + (-15) + 5 = t * 11/12\n\n    equation = Eq(t - 15 + 5, t * 11/12)\n\n    # solve for t\n    t_should_have_taken = solve(equation, t)\n\n    return t_should_have_taken[0]\n\nans = solution()"
    ],
    "e488c808a03c473b9671ebeb77e0b942": [
        "def solution():\n    return (4/15) - (7/10) + (11/15) - (3/10)\n\nans = solution()"
    ],
    "4674fd3d4c514026b6edb3199c9264fa": [
        "def solution():\n    year = 2022\n    while True:\n        year += 1\n        if set(str(year)) <= {'0', '2'}:\n            break\n    return year - 2022\n\nans = solution()"
    ],
    "51057b69aa2149679627b1da24beca2b": [
        "def solution():\n    total_product = 5.42 * 25\n    known_product = 5.42 * 5\n\n    missing_number = (total_product - known_product) / 5.42\n\n    return missing_number\n\nans = solution()"
    ],
    "b2d9b3a92e1e4767a2f8078a10ceb071": [
        "def solution():\n    coin_values = [200, 100, 50, 20, 10, 5, 2, 1]  # all coin values in pence\n    fare = 44\n    smallest_coins = float('inf')\n    for coin in coin_values:\n        if coin > fare:\n            continue\n        paid = coin\n        coins_count = 1\n        for change_coin in coin_values:\n            while paid - fare >= change_coin:\n                paid -= change_coin\n                coins_count += 1\n            if paid == fare:\n                smallest_coins = min(smallest_coins, coins_count)\n                break\n        if paid == fare:\n            break\n    return smallest_coins\n\nans = solution()"
    ],
    "977dd4a7f9a847319b7cce1778764124": [
        "def solution():\n    total_sweets = 420\n    people = 17\n    sweets_per_person = total_sweets // people\n    return sweets_per_person\n\nans = solution()"
    ],
    "e77d21bed25146b6a602d491b8b1dd35": [
        "def solution():\n    chicken_legs = 8 // 4\n    total_chicken_legs = 9 * chicken_legs\n    return total_chicken_legs\n\nans = solution()"
    ],
    "fa054be2367d41a5a66f84ddf604783c": [
        "def solution():\n    return 18 - 12\n\nans = solution()"
    ],
    "fcc1c6b6be6b4c52b0c513c00e208621": [
        "def solution():\n    total_height = 9\n    climb_up = 3\n    slide_down = 1\n    net_climb_per_day = climb_up - slide_down\n    remaining_height = total_height - climb_up\n\n    days = 1  # because the snail reaches or exceeds the top before sliding down on the final day\n\n    while remaining_height > 0:\n        remaining_height -= net_climb_per_day\n        days += 1\n        if remaining_height <= 0:\n            break\n        remaining_height += slide_down\n\n    return days\n\nans = solution()"
    ],
    "b5d10eac540a45de8714ae1313e250a8": [
        "def solution():\n    # Jane has to draw at least one marble of each color to get 4 different coloured marbles.\n    # There are 4 red, 7 green, 6 blue, and 2 orange marbles in the bag.\n    # In the worst case, she will draw all but one color without getting 4 different colours.\n    # Let's model the worst case scenario:\n    # She can take all the red marbles, which are 4.\n    # She can take all the blue marbles, which are 6.\n    # And she can take all the orange marbles, which are 2.\n    # So far she has 12 marbles in total (4 red + 6 blue + 2 orange) but only 3 different colors.\n    # To ensure she has 4 different coloured marbles, she must take at least one green marble.\n    # Hence, she must take at least one additional marble (the green one).\n    # Now she has 4 different coloured marbles.\n\n    # Total number of marbles she must draw:\n    ans = 4 + 6 + 2 + 1 # Sum of the worst scenario plus one green marble\n    return ans\n\nans = solution()"
    ],
    "4dbef50f0cc443289ac166137fd5b410": [
        "from itertools import combinations\n\ndef solution():\n    ans = 0\n    for c in combinations(range(1, 19), 3):\n        if len(set(c)) == 3:\n            ans += 1\n    return ans\n\nans = solution()"
    ],
    "2718b4f1a9754ccaa68760b5effe4800": [
        "def solution():\n    ans = 7052 + 832 - 523\n    return ans\n\nans = solution()"
    ],
    "930f7e9ace4f4e9abfa6c69bf0acf8ba": [
        "def solution():\n    a = 2  # First term\n    b = 1  # Initial second term increment\n    \n    while a < 100:  # Search for the first three digit number\n        a, b = a + b, b + 1  # Update the terms following the sequence rule\n    \n    return a\n\nans = solution()"
    ],
    "48433bd7096b4db2b8a0bc0666b48b61": [
        "def solution():\n    ways = 0\n    for case1 in range(1, 6):\n        for case2 in range(1, 6):\n            case3 = 6 - case1 - case2\n            if case3 > 0:  # ensure no pencil case is empty\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "71cf4cae85d941ca996a445c85a2b4af": [
        "def solution():\n    ans = (72 - 4) * 6 / 3\n    return ans\n\nans = solution()"
    ],
    "d23bc459c7eb40fca3869160d4d63e83": [
        "def solution():\n    ans = sum(((2*i + 2)**2 - (2*i)**2) for i in range(1, 20))\n    return ans\n\nans = solution()"
    ],
    "0e7fb5a8438d409db8fc8721b6c9b013": [
        "def solution():\n    cups_per_gallon = 6\n    order_cups = 30\n    \n    gallons_needed = order_cups / cups_per_gallon\n    \n    return gallons_needed\n\nans = solution()"
    ],
    "32f6acf1aa344c2bbe62ce981053863f": [
        "def solution():\n    # Let m be the number of motorbikes, t be the number of tricycles, and v be the number of vans.\n    # Given that a motorbike has two wheels, a tricycle has three wheels, and a van has four wheels, we have:\n    # 2m + 3t + 4v = 101 (total number of wheels)\n    # 2m + 4v = 3t + 35 (motorbike and van wheels compared to tricycle wheels)\n    # 3t + 4v = 2m + 13 (tricycle and van wheels compared to motorbike wheels)\n    # We can solve these equations using substitution or elimination.\n    \n    for m in range(101//2 + 1):  # There cannot be more motorbikes than half the total number of wheels\n        for v in range(101//4 + 1):  # There cannot be more vans than a quarter of the total number of wheels\n            # Calculate the tricycle wheels based on motorbike and van wheels\n            t = (2*m + 4*v - 35)//3\n            if 2*m + 3*t + 4*v == 101 and 3*t + 35 == 2*m + 4*v and 2*m + 13 == 3*t + 4*v:\n                # Once we find a solution, return the difference between motorbikes and vans\n                return m - v\n\nans = solution()"
    ],
    "27cc7102419c4252a0693643e0aafd5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    tank_a, tank_b, tank_c, tank_d = symbols('tank_a tank_b tank_c tank_d')\n    tank_d = 41\n    \n    equation1 = Eq(tank_a, 5 * tank_b)\n    equation2 = Eq(tank_b, tank_c + 5)\n    equation3 = Eq(tank_c + tank_d, tank_a)\n    \n    solutions = solve((equation1, equation2, equation3), (tank_a, tank_b, tank_c))\n    \n    return solutions[tank_b]\n\nans = solution()"
    ],
    "0ad7378f865243469246236c3c58c016": [
        "def solution():\n    people_in_front_of_pip = 9\n    people_behind_bud = 10\n    # There is one Pip and one Bud in the line\n    pip_and_bud = 2\n\n    total_people = people_in_front_of_pip + pip_and_bud + people_behind_bud\n\n    return total_people\n\nans = solution()"
    ],
    "104d6bb537274c5aad38cc4c6f3475dc": [
        "def solution():\n    ans = 68 + 75\n    return ans\n\nans = solution()"
    ],
    "d57aa24f90f445c5abf13b469d1984b6": [
        "def solution():\n    first_term = 4\n    common_difference = 3\n    nth_term = 298\n\n    # Using the formula for the nth term of an arithmetic sequence:\n    # nth_term = first_term + (n - 1) * common_difference\n    # Solving for n gives us the following:\n    n = ((nth_term - first_term) / common_difference) + 1\n\n    return int(n)\n\nans = solution()"
    ],
    "b36c4f44ee6d4d5f8f83c706b3da11e7": [
        "def solution():\n    # Let x be the number of students who like both sports\n    # Then, the number of students who like football is 3x\n    # And the number of students who like basketball is 4x\n    # Since there are no students that do not like at least one of the sports, we have:\n    # x + (3x - x) + (4x - x) = 36\n    # Simplifying the above, we have 3x + 4x - x = 36\n    # Which simplifies to 6x = 36\n    # Solving for x, we get x = 36 / 6\n    both_sports = 36 / 6\n    \n    return int(both_sports)\n\nans = solution()"
    ],
    "d558457c695c422cb8038f4d788d1b1d": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    year = \"2014\"\n    \n    for month in range(1, 13):\n        month_str = f\"{month:02d}\"\n        for day in range(1, 32):\n            if month == 2 and day > 28:\n                continue\n            if month in [4, 6, 9, 11] and day > 30:\n                continue\n            day_str = f\"{day:02d}\"\n            date_str = year + month_str + day_str\n            if all(date_str.count(digit) == 2 for digit in \"012\"):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "96ce69b25ffc4f6ba38c21545d6733a1": [
        "def solution():\n    numbers = [4, 5, 6, 9, 3, 9]\n    total_sum = 6 * 8  # Since the average of 8 numbers is 6.\n    existing_sum = sum(numbers)\n    remaining_sum = total_sum - existing_sum  # Sum of p and q.\n\n    # Range for p and q based on the highest and lowest values in numbers + 6 difference.\n    min_possible_value = min(numbers)\n    max_possible_value = max(numbers) + 6\n\n    # Since p < q, start with the smallest possible value for p and find the smallest q.\n    for p in range(min_possible_value, max_possible_value + 1):\n        q = remaining_sum - p\n        if p < q and q <= max_possible_value:\n            return q\n            \nans = solution()"
    ],
    "df09ff6de9a24b87ad2cf9a7a605db3d": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # We want to find a number x such that:\n    # x % 7 == 3, x % 11 == 7, x % 13 == 9\n    \n    congruences = [(3, 7), (7, 11), (9, 13)]\n    x, _ = solve_congruence(*congruences)\n    \n    # Find the smallest five-digit number that satisfies the conditions\n    while x < 10000:\n        x += 7 * 11 * 13\n\n    return x\n\nans = solution()"
    ],
    "36c0726e53b4423887ba038a9a8b7de4": [
        "def solution():\n    # Adam's speed is 60 km/h\n    adam_speed = 60\n    # Jacob's speed is 80 km/h\n    jacob_speed = 80\n    # Jacob reached home after 3 hours\n    jacob_time = 3\n    # Adam still has 0.5 hour to reach home\n    adam_remaining_time = 0.5\n\n    # Total time taken by Adam to reach home\n    adam_time = jacob_time + adam_remaining_time\n\n    # Distance travelled by Jacob to reach home\n    jacob_distance = jacob_speed * jacob_time\n    # Distance travelled by Adam to reach home\n    adam_distance = adam_speed * adam_time\n\n    # The distance apart their homes are\n    total_distance = jacob_distance + adam_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "eabcf3964b4a496a8ef64c1ebb4291fb": [
        "def solution():\n    def custom_multiply(a, b):\n        return ((a * b + 16) / (a + b)) ** 2\n    \n    result_1_2 = custom_multiply(1, 2)\n    result_1_2_3 = custom_multiply(result_1_2, 3)\n    result_1_2_3_4 = custom_multiply(result_1_2_3, 4)\n    final_result = custom_multiply(result_1_2_3_4, 5)\n\n    return int(final_result)\n\nans = solution()"
    ],
    "2b16d73352954ba2b572f2ae9c2c1fd1": [
        "def solution():\n    # Prime factorization of 252: 2^2 * 3^2 * 7\n    exponent1 = 2 + 1  # Adding 1 because for each prime, number of factors is exponent + 1\n    exponent2 = 2 + 1\n    exponent3 = 1 + 1\n\n    # Number of factors is product of (exponent + 1) for all primes\n    num_factors = exponent1 * exponent2 * exponent3\n\n    return num_factors\n\nans = solution()"
    ],
    "779097010de347adac3173e788b818b1": [
        "def solution():\n    total_cakes = 50\n    total_layers = 9\n\n    # Using Pigeonhole Principle: (total_cakes + total_layers - 1) // total_layers\n    max_cakes_in_layer = (total_cakes + total_layers - 1) // total_layers\n    \n    return max_cakes_in_layer\n\nans = solution()"
    ],
    "750fd66718534733b8ee051343e835e2": [
        "def solution():\n    first_term = 2\n    common_difference = 5\n    n = 21\n    nth_term = first_term + (n - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "cf8db366b2f64605b21b99daa35db369": [
        "def solution():\n    gst_rate = 7 / 100\n    paid_gst = 0.91\n\n    original_cost = paid_gst / gst_rate\n\n    return original_cost\n\nans = solution()"
    ],
    "f2cc6bf5eb964e03b4744beef89de39f": [
        "def solution():\n    # In the worst case, Lucy could pick one marble of each color before getting two of the same color.\n    # Therefore, after picking a blue and a yellow, she must pick at least one more to ensure two of the same color.\n    # So, she needs a total of 3 picks to guarantee two marbles of the same color.\n    return 3\n\nans = solution()"
    ],
    "c587b2c5f5344744bff9a00aad6cea06": [
        "def solution():\n    # Convert all weights to grams\n    weight1 = 2.49 * 1000  # kg to g\n    weight2 = 670          # g\n    weight3 = (3 * 1000) + 80  # kg to g and adding g\n\n    # Add the weights together\n    total_weight = weight1 + weight2 + weight3\n\n    return total_weight\n\nans = solution()"
    ],
    "0d3f4384ce58444a89f0b0451c47a86a": [
        "from math import lcm\n\ndef solution():\n    ashley_time = 56\n    ben_time = 80\n    charlie_time = 105\n\n    meet_time = lcm(ashley_time, ben_time, charlie_time)\n\n    start_time = 10 * 60  # 10:00 AM in minutes\n    next_meet_time = start_time + meet_time // 60  # Convert seconds to minutes and add to start time\n\n    next_meet_hour = next_meet_time // 60\n    next_meet_minute = next_meet_time % 60\n\n    return f'{next_meet_hour:02}:{next_meet_minute:02}'\n\nans = solution()"
    ],
    "ec2f787ddc4f496c8e1670044fcde021": [
        "def solution():\n    total_time_minutes = 60  # total exercise time in minutes\n    cycling_fraction = 1/3\n    jogging_time_minutes = total_time_minutes * (1 - cycling_fraction)\n    return jogging_time_minutes\n\nans = solution()"
    ],
    "67374cb1f2b44b8594ce58b7c2757c30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin = symbols('justin')\n\n    equation = Eq(justin + 18, 4 * (justin - 6))\n\n    solutions = solve(equation, justin)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "af56a6fc059e429192ef55675e57c67c": [
        "def solution():\n    # Given the sequence: 22, 18, 14, 10, 6, 2\n    # Find the common difference by subtracting any term from its predecessor\n    common_difference = 18 - 22  # This is -4\n  \n    # The last term given is 2, so the next term(n) is:\n    n = 2 + common_difference  # This subtracts the common difference\n  \n    return n\n\nans = solution()"
    ],
    "340b86ff5e0b464289776aeb6627ceff": [
        "def solution():\n    # Start distributing apples from the least amount, which is 1 for each child, ensuring each child gets at least one.\n    # As each child must get a different amount, we start with 1 apple and keep adding 1 more for the subsequent child.\n    # We will add up the minimum apples each child can get and then find the difference\n    # with the total apples available to determine the most apples the last child can get.\n    \n    # The smallest amounts of apples the first five children can get, which are 1, 2, 3, 4, and 5, respsectively.\n    min_apples = sum(range(1, 6))\n    \n    # The largest possible number for the kid who gets the most would be the remaining apples after distributing\n    # the minimum to the others.\n    most_apples = 30 - min_apples\n\n    return most_apples\n\nans = solution()"
    ],
    "f2faa17dbd4546fe9f05e0ca1b14be52": [
        "def solution():\n    sam_miles_per_gallon = 72.8\n    sam_distance = 273\n    tom_additional_gallons = 6 + 3/4\n\n    # Calculate gallons used by Sam's car\n    sam_gallons = sam_distance / sam_miles_per_gallon\n\n    # Calculate gallons used by Tom's car\n    tom_gallons = sam_gallons + tom_additional_gallons\n\n    # Calculate average rate of petrol consumption for Tom's car (miles per gallon)\n    tom_miles_per_gallon = sam_distance / tom_gallons\n\n    return tom_miles_per_gallon\n\nans = solution()"
    ],
    "a4af03b27daa4f28856b42ba428afc2d": [
        "def solution():\n    # Bart has 3 red, 4 yellow and 5 brown chips, total of 12 chips.\n    # The worst-case scenario to get 2 chips of different colours:\n    # Bart can pick all of one colour (smallest possible number, which is red with 3 chips),\n    # then 1 of another colour (the next smallest number, which is yellow with 4 chips).\n    # So in the worst case, Bart picks all red and then one yellow, needing to pick one more\n    # to ensure getting a non-red, non-yellow chip (brown in this case).\n    red = 3\n    yellow = 4\n    # brown = 5 (don't actually need to use this number)\n\n    # The smallest number of M&M's chips Bart needs to take out:\n    # All reds + one yellow + one more to guarantee a different colour\n    min_chips = red + 1 + 1\n\n    return min_chips\n\nans = solution()"
    ],
    "e24a897f0dea4a47950e3faa1cdaf6d1": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "f475cb94110941b287259508a63a9ff8": [
        "def solution():\n    return 3017 + 4962\n\nans = solution()"
    ],
    "333aed92d083437e97962341c0e3e05c": [
        "def solution():\n    for digit in range(10):\n        num = int(f\"24572{digit}\")\n        if num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "9ed706ba39e2411fba6e6de96d5ecfd7": [
        "def solution():\n    ans = sum(i**2 for i in range(1, 20, 2))\n    return ans\n\nans = solution()"
    ],
    "b4ccb4b4d7b14da0aad36bfe517a8484": [
        "def solution():\n    count = 0\n    for page in range(1, 101):\n        count += str(page).count('6')\n    return count\n\nans = solution()"
    ],
    "a11a7f4df40f40c8820fc6e6e0c78560": [
        "def solution():\n    ans = 9039 + 93\n    return ans\n\nans = solution()"
    ],
    "f297a90915044281a14d6377f0457a4f": [
        "def solution():\n    pattern = [1, 3]\n    while len(pattern) < 5:\n        pattern.append(pattern[-1] * 3)\n    return pattern[2]\n\nans = solution()"
    ],
    "41fb6eaf263648dd86dc9ac6a43a72f3": [
        "def solution():\n    shirts = 2\n    skirts = 2\n    outfit_combinations = shirts * skirts\n\n    return outfit_combinations\n\nans = solution()"
    ],
    "b768e69a54ce422c9bdc0bc62ce7f112": [
        "def solution():\n    # Calculate the common difference of the arithmetic sequence\n    common_difference = 120 - 105\n    \n    # Calculate the first term of the sequence (since 105 is the 7th term)\n    first_term = 105 - (7 - 1) * common_difference\n    \n    # Calculate the 100th term\n    nth_term = first_term + (100 - 1) * common_difference\n    \n    return nth_term\n\nans = solution()"
    ],
    "5b6e52b88b774ca78d70e6c94d7bdc3f": [
        "def solution():\n    # Convert base 10 numbers to base 7\n    def to_base7(num):\n        if num == 0:\n            return '0'\n        base7 = ''\n        while num > 0:\n            base7 = str(num % 7) + base7\n            num //= 7\n        return base7\n\n    # Sum the numbers in base 10\n    sum_base10 = 45 + 66\n\n    # Convert the sum to base 7\n    ans = to_base7(sum_base10)\n\n    return ans\n\nans = solution()"
    ],
    "dd9b6244a4c4445bb632f0876b616353": [
        "def solution():\n    chinese = 9\n    mexican = 3\n    fast_food = 2\n\n    ans = chinese + mexican + fast_food\n\n    return ans\n\nans = solution()"
    ],
    "e94db5c96fbd44048da7eae72591635d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12 - (3 * x - 4), x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "940e042aba2b4f56a60da84000fece0e": [
        "def solution():\n    rabbits = 8\n    days = 5\n    carrots_per_day_per_rabbit = 4\n    \n    total_carrots = rabbits * days * carrots_per_day_per_rabbit\n    \n    return total_carrots\n\nans = solution()"
    ],
    "a50a55a4409a4341b2950b27e6d39826": [
        "def solution():\n    # Calculate the rate at which each animal eats a bale of hay per day\n    horse_rate = 1 / 2\n    cow_rate = 1 / 3\n    sheep_rate = 1 / 12\n    \n    # Calculate the combined rate at which all animals eat the hay per day\n    combined_rate = horse_rate + cow_rate + sheep_rate\n    \n    # Calculate the number of days 22 bales will last\n    days = 22 / combined_rate\n    \n    return days\n\nans = solution()"
    ],
    "601ad6e41047493c8d8f3dea2a05469a": [
        "def solution():\n    # Let the original number of oranges be 3x and lemons be 5x according to the ratio 3:5\n    # After selling 48 oranges, the number of oranges becomes 3x - 48\n    # The new ratio 1:2 implies the equation (3x - 48) / 5x = 1/2\n    # Solving the proportion for x will give us the number of lemons as 5x\n    \n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((3*x - 48) / (5*x), 1/2)\n    solution_x = solve(equation, x)\n\n    # The number of lemons at first is 5 times x\n    lemons = 5 * solution_x[0]\n    return lemons\n\nans = solution()"
    ],
    "996413eb0e084c8fad4262d2e563cbe1": [
        "def solution():\n    ans = 146 * 37\n    return ans\n\nans = solution()"
    ],
    "c41373fcf732485caf9d92171e911149": [
        "def solution():\n    numerator = 5\n    denominator = 8\n    whole_number = 160\n\n    ans = (numerator / denominator) * whole_number\n\n    return ans\n\nans = solution()"
    ],
    "025a48e3ac854ca98f6c3b39cdf5562f": [
        "def solution():\n    n = 72 / (3 * 6)\n    return int(n)\n\nans = solution()"
    ],
    "7ed96bead1224f409f2317f83bd45b09": [
        "def solution():\n    # Let's denote the current age of the daughter as d and the mother as m.\n    from sympy import symbols, Eq, solve\n    \n    d, m = symbols('d m')\n    \n    # The mother told her daughter, \"When you reach my age, I will be 75 years old\".\n    # This means the difference in their ages is (75 - m) years.\n    \n    # The daughter told her mother, \"When you were at my age, I was only 3 years old.\"\n    # This means when the mother was d years old, the daughter was 3.\n    # So the difference in their ages should be (d - 3) years.\n    \n    # Since the difference in their ages doesn't change:\n    # (75 - m) = (d - 3)\n    \n    # create the equations based on the above information\n    equation1 = Eq(m - d, 75 - m)  # Mother's age when daughter is m will be 75\n    equation2 = Eq(m - d, d - 3)   # Mother was d years old when daughter was 3\n    \n    # solve the system of equations\n    solutions = solve((equation1, equation2), (d, m))\n    \n    # we want to find the age of the mother currently\n    return solutions[m]\n\nans = solution()"
    ],
    "c5d002031015489ba21101105aaa559a": [
        "def solution():\n    # To make sure to get 3 red apples we can get all green and yellow apples plus 3 red ones\n    # So, the smallest number of apples she needs to take out is:\n    green_apples = 11\n    yellow_apples = 7\n    red_apples_needed = 3\n\n    ans = green_apples + yellow_apples + red_apples_needed\n\n    return ans\n\nans = solution()"
    ],
    "c350a05252414b3db3a1131ee3b9e465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7*(x+2), 51+2*(x-1))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "27762b79cb644368b2a5457a17f92ee7": [
        "def solution():\n    old_value = 200\n    new_value = 204\n    percentage_change = ((new_value - old_value) / old_value) * 100\n    return percentage_change\n\nans = solution()"
    ],
    "a62c00fc50db459e9f0fdc6cdac1102e": [
        "def solution():\n    from math import comb\n\n    days = 0\n    for month in range(1, 13):\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            day_limit = 31\n        elif month in [4, 6, 9, 11]:\n            day_limit = 30\n        else:\n            day_limit = 28\n\n        for day in range(1, day_limit + 1):\n            date_str = f\"{2014:04d}{month:02d}{day:02d}\"\n            if date_str.count('0') == date_str.count('1') == date_str.count('2'):\n                days += 1\n    return days\n\nans = solution()"
    ],
    "3509ed6613a44f60bb123d2ebb9a5094": [
        "def solution():\n    ans = (20 - 19) + (18 - 17) + (16 - 15) + (14 - 13)\n    return ans\n\nans = solution()"
    ],
    "7a09b099857143ed8e06a64d34c8813c": [
        "def solution():\n    original_price = 6400 / 0.2\n    discount = original_price - 6400\n    return discount\n\nans = solution()"
    ],
    "2f9ea1c8c72f424db4c1a4c24536bbb0": [
        "def solution():\n    from itertools import combinations\n\n    # In a round-robin tournament, each team plays against every other team exactly once\n    total_games = len(list(combinations(range(6), 2)))\n\n    # For each game, there are 2 points awarded (either 2 to the winner, or 1 to each team in case of tie)\n    total_points = total_games * 2\n\n    return total_points\n\nans = solution()"
    ],
    "597ad4cf18ea4c63bf6c95cd675bf196": [
        "def solution():\n    # Total number of pupils\n    total_pupils = 30\n    # Total number of right-handed pupils\n    right_handed = 21\n    # Total number of girls\n    girls = 16\n\n    # Maximum possible number of left-handed girls\n    # is the number of girls subtracted from the number of right-handed pupils\n    max_left_handed_girls = total_pupils - right_handed\n\n    # Since not all girls are right-handed, the minimum number of right-handed girls\n    # would be when all the left-handed pupils are girls\n    # The minimum number of right-handed girls would then be the total number of girls\n    # minus the maximum possible number of left-handed girls\n    min_right_handed_girls = girls - max_left_handed_girls\n\n    return min_right_handed_girls\n\nans = solution()"
    ],
    "892a76fc652846adbcd762365971437f": [
        "def solution():\n    children = 45\n    minibus_capacity = 8\n\n    minibuses_needed = -(-children // minibus_capacity)  # Ceiling division\n\n    return minibuses_needed\n\nans = solution()"
    ],
    "3393c5c42ebe4894a4440ce64fee1a72": [
        "def solution():\n    ans = 101 + 97 + 102 + 99 + 98 + 103 - 100\n    return ans\n\nans = solution()"
    ],
    "8b599766a2704c0eb0e8c0f696e62f06": [
        "def solution():\n    for num in range(1, 101):\n        if num % 2 == 0 and num % 3 == 0 and num % 5 == 0 and num % 7 == 6:\n            return num\n\nans = solution()"
    ],
    "7af09b472cda4e49ba756b79f79625b3": [
        "def solution():\n    return 789 * 6\n\nans = solution()"
    ],
    "9f8109ce906145b3a3bb3b7938082e99": [
        "def solution():\n    n = 1\n    zeros = 0\n    factor_5 = 0\n    \n    while zeros < 28:\n        n += 1\n        temp_n = n\n        while temp_n % 5 == 0:\n            factor_5 += 1\n            temp_n /= 5\n        zeros = factor_5\n\n    return n - 1\n\nans = solution()"
    ],
    "c616f997861742469b08bfc319528f5b": [
        "def solution():\n    # Since Jane wants to ensure to get 4 different coloured marbles,\n    # she has to consider the worst-case scenario based on the pigeonhole principle.\n    \n    # The worst-case scenario is picking all marbles of the most abundant color plus\n    # all but one marble of the next most abundant color, and so on, until she has to pick only one of the last color.\n    # This way she will ensure to get all four different colors.\n    \n    # Marbles count by color (sorted from most to least abundant)\n    marbles_by_color = [7, 6, 4, 2]  # green, blue, red, orange\n\n    # Calculate the number of marbles to draw (worst-case scenario).\n    # We pick all from the first color, all but one from the second, all but one from the third,\n    # and at least one from the last color to ensure we have all 4 colors.\n    num_draws = sum(marbles_by_color[:-1]) + 1  # Add one marble from the least abundant color (orange)\n\n    return num_draws\n\nans = solution()"
    ],
    "ee58fa876fa247d58050d060bebe1078": [
        "def solution():\n    from sympy import isprime\n\n    for a in range(2, 14):  # 41 / 3 is roughly 13.6, so the maximum value for a is 13\n        if isprime(a):\n            b = (41 - 3*a) / 7  # Rearrange the equation to find b\n            if b.is_integer() and isprime(b):  # Check if b is a whole number and prime\n                return int(a + b)\n\nans = solution()"
    ],
    "e594932553e149d89309f852797d5586": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g be the number of girls, b be the number of boys\n    g, b = symbols('g b')\n    \n    # total number of pupils\n    total_pupils = 1690\n    \n    # Equations based on problem statement\n    equation1 = Eq(b - g, 90) # 90 more boys than girls\n    equation2 = Eq(b + g, total_pupils) # total number of pupils is 1690\n\n    # Solve for g and b\n    pupils = solve((equation1, equation2), (g, b))\n\n    # Extract solutions for number of girls (g) and boys (b)\n    num_girls = pupils[g]\n    num_boys = pupils[b]\n\n    # Ratios for girls who can swim (gs) to girls who can not swim (gns)\n    gs = 31\n    gns = 49\n    # Ratios for boys who can swim (bs) to boys who can not swim (bns) where bs = bns - 120\n    bns = symbols('bns')\n    bs = bns - 120\n\n    # Equation based on number of boys\n    equation3 = Eq(bs + bns, num_boys)\n\n    # Solve for number of boys who can swim (bs) and boys who can not swim (bns)\n    boys_swim = solve(equation3, (bns))\n\n    # Extract solution for number of boys who can not swim\n    num_boys_not_swim = boys_swim[bns]\n\n    # Calculate number of girls who can not swim based on ratio\n    num_girls_not_swim = num_girls * gns / (gs + gns)\n\n    # Total number of pupils who can not swim\n    total_not_swim = num_girls_not_swim + num_boys_not_swim\n\n    return int(total_not_swim)\n\nans = solution()"
    ],
    "e49cf16bbb284f1fbfb9c440134d58be": [
        "def solution():\n    return 1.83 + 0.2\n\nans = solution()"
    ],
    "fd889752fd27457fbe03dc85570eec17": [
        "def solution():\n    price_per_pc_4pc = 7 / 4\n    price_per_pc_6pc = 8.5 / 6\n    \n    if price_per_pc_4pc < price_per_pc_6pc:\n        ans = \"4pc is a better buy\"\n    elif price_per_pc_4pc > price_per_pc_6pc:\n        ans = \"6pc is a better buy\"\n    else:\n        ans = \"Both are the same\"\n\n    return ans\n\nans = solution()"
    ],
    "e3aa5800105743d5b2435db12b158401": [
        "def solution():\n    phone_expense = 740\n    remaining_salary_fraction = 1 - 0.75\n    final_salary_fraction = 1/5\n\n    # Let x be the total salary\n    # Equation: x - 740 - 0.75 * (x - 740) = 1/5 * x\n    # Simplify the equation to solve for x\n    x = (phone_expense + (final_salary_fraction * phone_expense)) / (1 - remaining_salary_fraction - final_salary_fraction)\n\n    return x\n\nans = solution()"
    ],
    "d13312f8d069494cab8f69737daed0b0": [
        "def solution():\n    total_weight_with_apples = 580\n    weight_with_two_apples = 280\n    weight_of_three_apples = total_weight_with_apples - weight_with_two_apples\n    weight_of_basket = weight_with_two_apples - 2 * (weight_of_three_apples / 3)\n\n    return weight_of_basket\n\nans = solution()"
    ],
    "02a402ada62746cca4a7c0600dfc8a9b": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['2', '3', '4']\n    all_combinations = set(''.join(p) for i in range(1, len(digits)+1) for p in permutations(digits, i))\n    ans = len(all_combinations)\n    return ans\n\nans = solution()"
    ],
    "ac6b5f6822aa44afb8423aeef1df7f92": [
        "def solution():\n    total_rolls = 60\n\n    # Calculating the probability of total of two dice is greater than 10:\n    # i.e., the possible outcomes for dice totals greater than 10 are (5,6), (6,5), (6,6)\n    favorable_outcomes = 3\n    total_possible_outcomes = 6 * 6  # Two dice, each with 6 possible outcomes\n\n    probability = favorable_outcomes / total_possible_outcomes\n\n    # For each of the `total_rolls` times, the player either wins £10 or loses £1.\n    # When they win, the net profit is £10 - £1 = £9 (because they get their £1 bet back).\n\n    expected_winnings_per_roll = probability * 9  # £10 prize minus £1 bet\n    expected_loss_per_roll = (1 - probability) * 1  # The bet amount\n\n    # The expected net loss per roll is then the expected winnings minus the expected loss:\n    expected_net_loss_per_roll = expected_winnings_per_roll - expected_loss_per_roll\n\n    # Multiply the expected net loss per roll by the total number of rolls to find the total expected loss:\n    expected_total_loss = total_rolls * expected_net_loss_per_roll\n\n    # The player wants to know the amount they expect to lose, so we change the sign to get a negative number.\n    return -1 * expected_total_loss\n\nans = solution()"
    ],
    "19fa00d48659426b9b8f9c7cc44133aa": [
        "def solution():\n    # Let x be the original amount of water in the bottle.\n    # After drinking half before class, the remaining amount is x/2.\n    # After drinking 100 ml after class, the remaining amount is (x/2) - 100 ml.\n    # We know that at the end there were 150 ml left in the bottle.\n    # So we can set up the equation: (x/2) - 100 = 150\n    # Solve for x:\n    x = 2 * (150 + 100)\n    \n    return x\n\nans = solution()"
    ],
    "bdfc511086b14c2a828a8ce71b43f330": [
        "def solution():\n    total_minutes = 24 * 60  # Total number of minutes in a day\n    start_time = 2 * 60 + 31  # Convert 02:31 to minutes past midnight\n\n    for minutes_passed in range(start_time + 1, total_minutes):\n        hours, minutes = divmod(minutes_passed, 60)\n        # Form a string that represents the current time\n        time_str = f\"{hours:02d}{minutes:02d}\"\n        # Check if all digits 0, 1, 2, 3 are present in the string\n        if all(digit in time_str for digit in \"0123\"):\n            return minutes_passed - start_time\n\n    # If not found in the same day, start from the beginning of the next day\n    for minutes_passed in range(0, start_time):\n        hours, minutes = divmod(minutes_passed, 60)\n        # Form a string that represents the current time\n        time_str = f\"{hours:02d}{minutes:02d}\"\n        # Check if all digits 0, 1, 2, 3 are present in the string\n        if all(digit in time_str for digit in \"0123\"):\n            return total_minutes - start_time + minutes_passed\n\nans = solution()"
    ],
    "fa119130b0764e8fa4d0f0a2fa2f19fd": [
        "def solution():\n    def diamond_operation(A, B):\n        return A * A - 3 * B\n\n    def triangle_operation(A, B):\n        return 5 * A - B * B\n\n    diamond_result = diamond_operation(4, 2)\n    ans = triangle_operation(diamond_result, 6)\n\n    return ans\n\nans = solution()"
    ],
    "6008ef744a284692b526a28fd0e8a695": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    first_hour, second_hour = symbols('first_hour second_hour')\n    equation1 = Eq(first_hour + second_hour, 40)\n    equation2 = Eq(first_hour, second_hour - 26)\n    \n    solutions = solve((equation1, equation2), (first_hour, second_hour))\n\n    return solutions[second_hour]\n\nans = solution()"
    ],
    "66c31d7e12eb4ffb8ad1f1e8bb55f199": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    lynn, mary = symbols('lynn mary')\n    \n    equation1 = Eq(lynn - 160, mary - 58)\n    equation2 = Eq(mary - 58, 3 * (lynn - 160))\n    \n    solutions = solve((equation1, equation2), (lynn, mary))\n    \n    return solutions[lynn] - 160\n\nans = solution()"
    ],
    "5a50e00932e34a2eae95e3e9228b6993": [
        "def solution():\n    unsold_tickets_percentage = 100 - 60\n    total_tickets = 28 * 100 / unsold_tickets_percentage\n    return int(total_tickets)\n\nans = solution()"
    ],
    "e4bab25ee48f4b6185a11c389207eebf": [
        "def solution():\n    initial_weight = 210\n    sold_monday = 3/7 * initial_weight\n    remaining_after_monday = initial_weight - sold_monday\n    sold_tuesday = 3/8 * remaining_after_monday\n    remaining_after_tuesday = remaining_after_monday - sold_tuesday\n    bag_weight = 3/4\n    number_of_bags = remaining_after_tuesday / bag_weight\n\n    return int(number_of_bags)\n\nans = solution()"
    ],
    "1e1a13a0a844402da455fc7eb9d39755": [
        "def solution():\n    fifth_grade_students = 6 * 36\n    sixth_grade_students = 3 * 38\n    total_students = fifth_grade_students + sixth_grade_students\n    return total_students\n\nans = solution()"
    ],
    "a098761e7204471dbfd3c5f04017e952": [
        "def solution():\n    quotient = 27\n    remainder = 9\n    divisor = quotient + 1  # Since the remainder is non-zero, the divisor must be at least one more than the quotient\n\n    # The dividend can be found by: dividend = (divisor * quotient) + remainder\n    dividend = (divisor * quotient) + remainder\n    return dividend\n\nans = solution()"
    ],
    "36398085891449859c0c35083ebfdaad": [
        "def solution():\n    sum = 0\n    sign = 1  # Start with a positive sign\n\n    for num in range(64, 43, -2):\n        sum += sign * num\n        sign *= -1  # Alternate the sign\n\n    return sum\n\nans = solution()"
    ],
    "9e459979ca2e4f8e84e5da348f9dba5d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    deivi, jerry = symbols('deivi jerry')\n\n    equation1 = Eq(deivi, jerry + 8)\n    equation2 = Eq((deivi + 4) / (jerry + 4), 5/7)\n\n    solutions = solve((equation1, equation2), (deivi, jerry))\n\n    return solutions[jerry]\n\nans = solution()"
    ],
    "41284b5312574903a6aad669cbd6ab65": [
        "def solution():\n    for tens in range(1, 10):\n        for ones in range(10):\n            correct_subtrahend = tens * 10 + ones\n            wrong_subtrahend = (tens - 2) * 10 + (ones + 1)\n            if correct_subtrahend - wrong_subtrahend == 36:\n                correct_difference = correct_subtrahend - (tens * 10 + ones - 1)\n                return correct_difference\n\nans = solution()"
    ],
    "56303c0854a843e68eb523ba25963b8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number Phoebe thought of as 'n'\n    n = symbols('n')\n    \n    # The equation based on the problem statement is: 5n - 4 = 41\n    equation = Eq(5 * n - 4, 41)\n    \n    # Solve the equation for 'n'\n    solution = solve(equation, n)\n    \n    # First element of the solution since it's the only solution for the number\n    return solution[0]\n\nans = solution()"
    ],
    "a9b59929e341406986d4962db964c9ec": [
        "def solution():\n    total_ml = 7 * 195\n    jug_capacity = 250\n    num_jugs = (total_ml + jug_capacity - 1) // jug_capacity\n    return num_jugs\n\nans = solution()"
    ],
    "3444a75f07964bfca7021f8d0f95217f": [
        "def solution():\n    total_balls = 49 + 1  # initial count of balls\n    blue_ball = 1  # count of blue balls is constant\n\n    # Let x be the number of red balls to remove\n    # We need to find x such that remaining red balls / total remaining balls = 90%\n    # (49 - x) / (total_balls - x) = 90/100\n    # We solve for x\n    x = (49 - 0.9 * total_balls) / 0.1\n\n    return int(x)\n\nans = solution()"
    ],
    "757e6ca91df84091a26bd18fc1b7fa2a": [
        "def solution():\n    from math import factorial\n\n    total = 0\n    for k in range(0, 98):\n        numerator = factorial(100) // factorial(100 - k)\n        denominator = factorial(97) // factorial(97 - k)\n        total += numerator / denominator\n\n    return total\n\nans = solution()"
    ],
    "e9f7473a32874d5c820cadf0a1870a0b": [
        "def solution():\n    total_weight_with_matches = 45\n    empty_box_weight = 12\n    number_of_matches = 220\n    \n    weight_of_matches = total_weight_with_matches - empty_box_weight\n    weight_of_one_match = weight_of_matches / number_of_matches\n\n    return weight_of_one_match\n\nans = solution()"
    ],
    "8a9992f6a3c04fea9afe2ab07209e489": [
        "def solution():\n    n = 96\n    factors = set()\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    ans = len(factors)\n    return ans\n\nans = solution()"
    ],
    "d6c3aebbe67749778e84875f4bfe6ebf": [
        "def solution():\n    total_animals = 1300\n    total_legs = 3440\n\n    # Assume all animals are birds (with 2 legs each)\n    legs_if_all_birds = total_animals * 2\n    \n    # The excess legs are due to cows (since cows have 4 legs and birds have 2)\n    excess_legs = total_legs - legs_if_all_birds\n    # Every cow contributes 2 excess legs\n    num_cows = excess_legs // 2\n    \n    return num_cows\n\nans = solution()"
    ],
    "0f159b78762443838fac481eb0a7bed3": [
        "def solution():\n    ans = (18 - 17) + (16 - 15) + (14 - 13)\n    return ans\n\nans = solution()"
    ],
    "00e7cd11eefb4db19a4650a5e8cf1454": [
        "def solution():\n    jenny_pens_before = 83\n    jenny_pens_after = jenny_pens_before - 28\n    ben_pens_before = jenny_pens_after\n    \n    return ben_pens_before\n\nans = solution()"
    ],
    "4f45df48b0844cadb68195e413cce783": [
        "def solution():\n    books_per_week = 6 / 3\n    total_books = books_per_week * 8\n    return total_books\n\nans = solution()"
    ],
    "f58f700fac024611a683956a1768c0ec": [
        "import math\n\ndef solution():\n    m1 = 500  # mass of car 1 in kg\n    v1 = 20   # velocity of car 1 in m/s (north)\n\n    m2 = 500  # mass of car 2 in kg\n    v2 = 30   # velocity of car 2 in m/s (west)\n\n    # The momentum before the collision for each car\n    p1 = m1 * v1  # momentum of car 1 in the north direction\n    p2 = m2 * v2  # momentum of car 2 in the west direction\n\n    # Since momentum is conserved, the total momentum after the collision\n    # is the vector sum of the momenta of the two cars\n\n    # Calculate the magnitude of the total momentum after the collision\n    p_total = math.sqrt(p1**2 + p2**2)\n\n    # The total mass after collision\n    m_total = m1 + m2\n\n    # Calculate the magnitude of velocity after collision\n    v_total = p_total / m_total\n\n    # Calculate the angle of the velocity vector with respect to north direction\n    theta = math.atan2(v2, v1)  # west to north, counter-clockwise is positive\n\n    # Return the magnitude and direction of the velocity\n    return v_total, math.degrees(theta)\n\nans = solution()"
    ],
    "20346fdc304242a383a7ac635afbb0e0": [
        "def solution():\n    max_number = 0\n    # Starting from the largest 3-digit number (999), go down to find the number that meets the conditions\n    for num in range(999, 100, -1):\n        if num % 2 != 0:  # Check if the number is odd\n            if num % 9 == 0:  # Check if the number is divisible by 9\n                tens_digit = (num // 10) % 10  # Extract the tens digit\n                if tens_digit % 4 == 0:  # Check if the tens digit is divisible by 4\n                    max_number = num\n                    break\n    return max_number\n\nans = solution()"
    ],
    "237e4009b4c54725a1fe587507e1513b": [
        "def solution():\n    distance_between_trees = 2\n    distance_between_lamps = 10\n    total_trees = 21\n    total_distance = (total_trees - 1) * distance_between_trees\n    num_lamp_posts = (total_distance // distance_between_lamps) + 1\n\n    return int(num_lamp_posts)\n\nans = solution()"
    ],
    "4585a53e3fbb44e9b8554c9841fc9066": [
        "def solution():\n    ans = 15.05 - 14.84\n    return ans\n\nans = solution()"
    ],
    "cb9e84648a164fd796bda214bd912eed": [
        "def solution():\n    sizes = 3  # S, M and L\n    colours = 5  # black, white, red, yellow and purple\n    # Each bag of a certain size can come in any of the 5 colours\n    # So for each size we have 5 colour choices, hence we multiply\n    different_types = sizes * colours\n    return different_types\n\nans = solution()"
    ],
    "32f4232fd0304fc781fcf26ecbab7e3e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    laptop, dvd_player = symbols('laptop dvd_player')\n\n    # Equation 1: 5 laptops and 4 DVD players cost $14438\n    equation1 = Eq(5 * laptop + 4 * dvd_player, 14438)\n\n    # Equation 2: 1 laptop and 1 DVD player cost $2960\n    equation2 = Eq(laptop + dvd_player, 2960)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (laptop, dvd_player))\n\n    # Returning the cost of one DVD player\n    return solutions[dvd_player]\n\nans = solution()"
    ],
    "f743e1d8460a4eb08dd3685920fb9466": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        for j in range(i+1, 101):\n            if (i + j) % 5 == 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "0bd951281c1c44b48652968acdb95351": [
        "from itertools import permutations\n\ndef solution():\n    # Generate all possible permutations for the digits 0-9\n    for perm in permutations(range(10), 4):\n        A, B, triangle, C = perm\n        # Convert letters to a number assuming D is a single triangle\n        digit_A = 100 * A + 10 * A + A\n        digit_B = 110 * B\n        digit_C = 100 * C + 10 * C + C\n        # Check if the sum of digits A, B, and C equals three Ds (triangles) and A, B and C are not zero\n        if A != 0 and B != 0 and C != 0 and digit_A + digit_B + digit_C == 111 * triangle:\n            return triangle\n\nans = solution()"
    ],
    "74f45194f12f4ae7be245fca2332fd63": [
        "def solution():\n    pattern = '12345'\n    pattern_length = len(pattern)\n    full_repeats = 2000 // pattern_length\n    partial_repeat_length = 2000 % pattern_length\n\n    sum_full_repeats = sum(int(digit) for digit in pattern) * full_repeats\n    sum_partial_repeat = sum(int(pattern[i]) for i in range(partial_repeat_length))\n\n    return sum_full_repeats + sum_partial_repeat\n\nans = solution()"
    ],
    "473e918a9fd74e4aaf831efa01b71026": [
        "def solution():\n    total_cost = 5.15\n    coffee_cost = 3.69\n    milk_cost = 0.89\n\n    sugar_cost = total_cost - (coffee_cost + milk_cost)\n\n    return sugar_cost\n\nans = solution()"
    ],
    "702bd47461974ab69465dea85d588eab": [
        "def solution():\n    for hour in range(1, 12):\n        hours_passed = hour\n        hours_remaining = 12 - hour\n        if hours_passed == 2 * hours_remaining:\n            return hour\n\nans = solution()"
    ],
    "639b8a35b20848139819ed0f716ed926": [
        "def solution():\n    ans = 2.3 + 9.7 + 5.2 - 2.2\n    return ans\n\nans = solution()"
    ],
    "e6aad1cc98b64cac96958775db869e00": [
        "def solution():\n    # We will use two equations based on the information given:\n    # Equation 1: (total_weight + 45) / (number_of_people + 1) = 61\n    # Equation 2: (total_weight + 45 + 71) / (number_of_people + 2) = 62\n\n    # Let x be the initial total weight and n be the initial number of people in the group.\n    # From equation 1, we can express the total weight (x) as follows:\n    # x + 45 = 61 * (n + 1)\n\n    # From equation 2, we can express the total weight (x) after Ben joined as follows:\n    # x + 45 + 71 = 62 * (n + 2)\n    \n    # Manipulate equation 1 to express n in terms of x:\n    # n = (x + 45) / 61 - 1\n    \n    # Now substitute this into equation 2:\n    # x + 116 = 62 * ((x + 45) / 61 + 1)\n    \n    # Now solve for x:\n    x = symbols('x')\n    equation = Eq(x + 116, 62 * ((x + 45) / 61 + 1))\n    total_weight = solve(equation, x)[0]\n    \n    # Now find the number of people by substituting x in equation 1:\n    number_of_people = (total_weight + 45) / 61 - 1\n    \n    # The average weight before Aaron and Ben joined (initial average weight) will be:\n    average_initial = total_weight / number_of_people\n    \n    return average_initial\n\nans = solution()"
    ],
    "b591b0d58af5497096019cf0b220ebb3": [
        "def solution():\n    ans = 2 + 12 * (8 - 3) / 4\n    return ans\n\nans = solution()"
    ],
    "bfd53c31223f4d469ed9eef0d582baeb": [
        "def solution():\n    ans = (45 / 9) * (100 / 10) + (23 - 19)\n    return ans\n\nans = solution()"
    ],
    "a98ea86c6ab94572a37ea72e70fc26dd": [
        "def solution():\n    # The worst case scenario is one where Sheila takes out the maximum number\n    # of balls without getting 4 of the same color.\n    \n    # If she takes out all orange balls, that's 4 orange balls.\n    max_orange_balls = 4\n    \n    # She could also take out all yellow balls, that's an additional 2 yellow balls.\n    max_yellow_balls = 2\n    \n    # Now, no matter which ball she draws next, she will get either:\n    # - A fifth blue ball (and thus 4 blue balls, since there are already at least 1 blue in hand).\n    # - A fifth orange or yellow ball, which is impossible due to their respective maximums.\n    \n    # Therefore, she must draw the next ball to ensure 4 of the same color, which will be blue.\n    # Thus, we add one more ball to the worst case total, which will be a blue ball.\n   \n    # Total balls drawn in the worst case scenario:\n    balls_needed = max_orange_balls + max_yellow_balls + 1\n    \n    return balls_needed\n\nans = solution()"
    ],
    "5eab24fc6ea24611818fe89f4277708d": [
        "def solution():\n    price_oranges_per_kg = 1.5\n    weight_oranges_kg = 4.1\n    cost_oranges = price_oranges_per_kg * weight_oranges_kg\n\n    price_mangoes_per_kg = 2.3\n    weight_mangoes_kg = 2\n    cost_mangoes = price_mangoes_per_kg * weight_mangoes_kg\n\n    total_cost = cost_oranges + cost_mangoes\n\n    return total_cost\n\nans = solution()"
    ],
    "230b8cfda67a440eb974960188adca8c": [
        "def solution():\n    return 4825 + 1754\n\nans = solution()"
    ],
    "1e698072c71546a1a63ac8be1c0891fe": [
        "def solution():\n    numbers = [2, 3, 8, 4, 7, 6]\n    mean_value = 5\n    total_numbers = len(numbers) + 1  # Including 'a'\n    sum_of_numbers = mean_value * total_numbers\n    sum_without_a = sum(numbers)\n    a = sum_of_numbers - sum_without_a\n    return a\n\nans = solution()"
    ],
    "45ba73cc1b1e4ca6b099a7a996e9c3b4": [
        "def solution():\n    original_price = 650\n    reduced_price = 455\n    reduction_amount = original_price - reduced_price\n    percentage_reduction = (reduction_amount / original_price) * 100\n\n    return percentage_reduction\n\nans = solution()"
    ],
    "6ac549d7fd244d5c97410534859cd40b": [
        "def solution():\n    # A's work rate per day\n    rate_A = 1 / 15\n    # B's work rate per day\n    rate_B = 1 / 10\n    # Work done by A and B together in 4 days\n    work_done = 4 * (rate_A + rate_B)\n    # Remaining work to be done\n    remaining_work = 1 - work_done\n    # Days required for B to finish the remaining work\n    days_for_B = remaining_work / rate_B\n    return days_for_B\n\nans = solution()"
    ],
    "292095048e3e4e1983e4b66c7cd45d35": [
        "def solution():\n    # Calculate the sum of the ascending sequence from 1 to 13\n    ascending_sum = sum(range(1, 14))\n\n    # Calculate the sum of the descending sequence from 13 to 1\n    descending_sum = sum(range(1, 14))\n\n    # The first sum includes numbers 1 to 13 once and the descending sum includes numbers 1 to 13 again.\n    # Hence, we simply need to double the ascending_sum to account for both the ascending and descending parts.\n    total_sum = 2 * ascending_sum\n\n    # Since the number 13 is included in both the ascending and descending parts, we subtract it once.\n    total_sum -= 13\n\n    return total_sum\n\nans = solution()"
    ],
    "28c2da8de504408d83cd9b973e4a5df2": [
        "def solution():\n    number = 100  # starting from the smallest three-digit number\n    while True:\n        if number % 5 == 1 and number % 6 == 1 and number % 7 == 1:\n            return number\n        number += 1\n\nans = solution()"
    ],
    "f380084cf36b45bbbda0a1c8d0634812": [
        "def solution():\n    test_tubes = 0\n    while 2 ** test_tubes < 1000:\n        test_tubes += 1\n    return test_tubes\n\nans = solution()"
    ],
    "2e1b20f5fdfd4bc595117f252b7bcea6": [
        "def solution():\n    boys_more = 52\n    students = 0\n    layer = 0\n    while True:\n        boys = (layer * 4 + 1) ** 2\n        girls = ((layer + 1) * 2 + 1) ** 2 - boys\n        if boys - girls == boys_more:\n            students = boys + girls\n            break\n        layer += 1\n    return students\n\nans = solution()"
    ],
    "d5bc2d04c57440d0a114ebf980abe4d0": [
        "def solution():\n    n = 2.5 * 1000  # Convert litres to millilitres\n    return n\n\nans = solution()"
    ],
    "3c35813541b2403abf942fa5547821b4": [
        "def solution():\n    # Given data\n    ducklings_legs = 4 * 2  # 4 ducklings with 2 legs each\n    geese_legs = 2 * 2      # 2 baby geese with 2 legs each\n    \n    # Total legs from ducklings and geese\n    total_bird_legs = ducklings_legs + geese_legs\n    \n    # Remaining legs are of the lambs\n    remaining_legs = 36 - total_bird_legs\n    \n    # Since each lamb has 4 legs\n    number_of_lambs = remaining_legs // 4\n    \n    return number_of_lambs\n\nans = solution()"
    ],
    "3aad0d27a09d4acabf6d7f99f57fe23b": [
        "def solution():\n    first_term = 17\n    last_term = 150\n    difference = 7\n    \n    num_kids = ((last_term - first_term) // difference) + 1\n    \n    return num_kids\n\nans = solution()"
    ],
    "754c4e4720274d728d76669caba145eb": [
        "def solution():\n    remaining_sweets = 6\n    fraction_day4 = 4/5  # Kenneth left (1 - 1/4) = 4/5 of the sweets\n    fraction_day3 = 5/6  # Kenneth left (1 - 1/5) = 5/6 of the sweets\n    fraction_day2 = 6/7  # Kenneth left (1 - 1/6) = 6/7 of the sweets\n    fraction_day1 = 7/8  # Kenneth left (1 - 1/7) = 7/8 of the sweets\n\n    initial_sweets = remaining_sweets / (fraction_day4 * fraction_day3 * fraction_day2 * fraction_day1)\n    return initial_sweets\n\nans = solution()"
    ],
    "03409dc9701540c6a419d3a46178c3c1": [
        "def solution():\n    ans = 528 + 30\n    return ans\n\nans = solution()"
    ],
    "dfa6543288d54c429575cda96cbfdc86": [
        "def solution():\n    matches = 30\n    # Since each team plays each other twice, we need to find 'n' such that n*(n-1) = 2 * matches.\n    # This is derived from the combination formula for picking 2 teams from n and multiplying by 2 (home and away): nC2 * 2 = matches\n    from sympy import symbols, Eq, solve\n\n    n = symbols('n', integer=True)\n    eq = Eq(n * (n - 1), 2 * matches)\n\n    teams = solve(eq, n)\n\n    # Since number of teams has to be a positive integer, we ignore the negative solution\n    for team_count in teams:\n        if team_count > 0:\n            return team_count\n\nans = solution()"
    ],
    "40435e2c684944fdbc3ffece625e8a3a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_cookies = symbols('total_cookies')\n\n    # Charlene keeps half plus 8\n    charlene_keeps = (1/2) * total_cookies + 8\n    \n    # Remaining cookies after Charlene keeps hers\n    remaining_after_charlene = total_cookies - charlene_keeps\n    \n    # Emerald eats a third of what she gets plus 4\n    emerald_eats = (1/3) * remaining_after_charlene + 4\n    \n    # Remaining cookies after Emerald eats\n    remaining_after_emerald = remaining_after_charlene - emerald_eats\n    \n    # Hebe eats a quarter of what she gets, and has 42 left\n    hebe_eats = (1/4) * remaining_after_emerald\n    hebe_remains = remaining_after_emerald - hebe_eats\n    \n    equation = Eq(hebe_remains, 42)\n    solution = solve(equation, total_cookies)\n\n    return solution[0]\n\nans = solution()"
    ],
    "1f6bb23ddb7b4674a491542df7d83ca5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the three numbers\n    first, second, third = symbols('first second third')\n\n    # Set up the equations based on the problem\n    equation1 = Eq(first, second + 1099)\n    equation2 = Eq(third, second - 877)\n    equation3 = Eq(first + second + third, 7656)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (first, second, third))\n\n    return solutions[second]\n\nans = solution()"
    ],
    "adf81947d41b4b1e99112db71d0a03fa": [
        "def solution():\n    sets_made_first_5_days = 720\n    total_sets_required = 3600\n\n    daily_production_rate = sets_made_first_5_days / 5\n    total_days_required = total_sets_required / daily_production_rate\n\n    return total_days_required\n\nans = solution()"
    ],
    "6b0695abb6df4ba593213d47fe31343a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys = symbols('boys')\n    girls = 45\n\n    equation = Eq(girls, 3 * boys - 21)\n    solutions = solve(equation, boys)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "8211d1479b8042baafb1f9c517bfcb00": [
        "def solution():\n    def count_ways(steps):\n        if steps <= 1:\n            return 1\n        # Initialize base cases: 1 way to climb 1 step, 1 way to climb 0 step\n        dp = [0] * (steps + 1)\n        dp[0], dp[1] = 1, 1\n\n        # Compute the number of ways to climb to each step\n        for i in range(2, steps + 1):\n            dp[i] = dp[i-1] + dp[i-2]\n\n        return dp[steps]\n\n    # Calculate the ways to reach the 5th step\n    ways_to_5th = count_ways(5)\n    # Calculate the ways to reach the top from 5th step\n    ways_from_5th_to_top = count_ways(10 - 5)\n\n    # Total ways are the combination of the two parts\n    total_ways = ways_to_5th * ways_from_5th_to_top\n\n    return total_ways\n\nans = solution()"
    ],
    "b791f9f3418348b2b25b747708582ba4": [
        "def solution():\n    jug_initial = 150\n    cup_volume = 40\n    cups_poured = 3\n    water_left = jug_initial - (cup_volume * cups_poured)\n    return water_left\n\nans = solution()"
    ],
    "928e94ae89fa44c5874fa56b5f7f9faa": [
        "def solution():\n    for i in range(7, 8):\n        if i ** 2 > 40 and i ** 2 < 50:\n            return i ** 2\n\nans = solution()"
    ],
    "4d1826d9ba0f4ebbb85234e705eb930d": [
        "def solution():\n    return 5.824 / 0.4\n\nans = solution()"
    ],
    "70fdf0a16e48489da5ef6d613c075f2a": [
        "def solution():\n    start = 0.7\n    end = 5.1\n    halfway = (start + end) / 2\n    return halfway\n\nans = solution()"
    ],
    "e72460d64b534a3298ee1f886015ab98": [
        "def solution():\n    from math import factorial\n    \n    prime_factors = [2, 2, 2, 3, 8, 5, 5, 25]\n    count_2s = prime_factors.count(2) + 3  # 8 is 2**3\n    count_5s = prime_factors.count(5) + 2  # 25 is 5**2\n    \n    num_zeros = min(count_2s, count_5s)\n    return num_zeros\n\nans = solution()"
    ],
    "dcd09d0a6e93478eb3e9e8bd7ce45d74": [
        "def solution():\n    return 936 // 54\n\nans = solution()"
    ],
    "f347b0c1866d4183abf11ae869f9ba55": [
        "def solution():\n    ans = 527 - 9\n    return ans\n\nans = solution()"
    ],
    "2cbe94dcc30b432db9e9911ee6b53171": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the age of Alice's sister\n    alice, x = symbols('alice x')\n    # Alice is twice as old as her sister now\n    equation1 = Eq(alice, 2 * x)\n    # In 10 years, their total age will be 53\n    equation2 = Eq(alice + x + 20, 53)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (alice, x))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "3efa9649b4a9475fad4ee03677e8ceed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    alan, bob = symbols('alan bob')\n    \n    equation1 = Eq(bob - alan, 15)\n    equation2 = Eq(bob + 25, 3 * alan)\n    \n    solutions = solve((equation1, equation2), (alan, bob))\n    \n    return solutions[alan]\n\nans = solution()"
    ],
    "01024c395010440bb3461f6a74c2772d": [
        "def solution():\n    # Let n, p, and e be the costs of a notebook, pencil case, and eraser respectively.\n    # We have the following 3 equations based on the problem statement:\n    # 3n + 4p + 5e = 50 (total cost)\n    # n + p = 6 (cost of a notebook and a pencil case)\n    # p + e = 8 (cost of a pencil case and an eraser)\n\n    # We can re-arrange the second and third equations to express n and e in terms of p:\n    # n = 6 - p\n    # e = 8 - p\n\n    # Substitute n and e from the above expressions into the first equation:\n    # 3(6 - p) + 4p + 5(8 - p) = 50\n    # Simplify the equation to find the value of p (pencil case cost):\n    # 18 - 3p + 4p + 40 - 5p = 50\n    # Combine like terms:\n    # p - 3p + 4p - 5p = 50 - 18 - 40\n    # -3p = -8\n    # p = -8 / -3\n    # p = 8 / 3\n    # p = 2.67 (Since the cost is probably in whole units, we can round this if desired)\n    \n    p = 8 / 3  # This equation is derived from simplifying the system of equations\n    return round(p, 2)  # Rounding to 2 decimal places to represent currency\n\nans = solution()"
    ],
    "5563bcc54cdc46f8b6be436624c0097b": [
        "def solution():\n    num_students = 10\n    handshakes = num_students * (num_students - 1) // 2\n    return handshakes\n\nans = solution()"
    ],
    "2efad079da624ca689f0016c3dcf7602": [
        "def solution():\n    return 34 * 19\n\nans = solution()"
    ],
    "648fd5bbe5184a74a37d66b24481008b": [
        "def solution():\n    from math import lcm\n\n    # Find least common multiple of the pack sizes\n    pack_lcm = lcm(6, 8, 9, 15)\n\n    # Calculate the minimum packs needed to get at least 1000 markers\n    min_packs = -(-1000 // pack_lcm)\n\n    # Total number of packs (since each pack contains an equal number)\n    total_packs = min_packs * 4\n\n    return total_packs\n\nans = solution()"
    ],
    "4e17d0e9e030497eb049f15de9682760": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anne = symbols('anne')\n    maria = anne + 20\n    total_apples = Eq(anne + maria, 44)\n\n    ans = solve(total_apples, anne)[0]\n    return ans\n\nans = solution()"
    ],
    "f66a33367339488285ad5b4dd84375df": [
        "def solution():\n    numbers = [678, 6798, 6879, 9876, 6987]\n    target_number = 6789\n    closest_number = min(numbers, key=lambda x: abs(x - target_number))\n    return closest_number\n\nans = solution()"
    ],
    "74956c812140447db809a56e7b348996": [
        "def solution():\n    first_calculation = (20 / 100) * 90\n    second_calculation = (90 / 100) * 20\n    ans = abs(first_calculation - second_calculation)\n    return ans\n\nans = solution()"
    ],
    "a8b915f14aa548d4a3dd9ab3e68ccce6": [
        "def solution():\n    # Convert recurring decimals into fractions\n    from sympy import nsimplify\n\n    # Recurring decimal 0.1[1]99251[7]\n    # Fraction = (0.111... + 0.0000899251...) - 0.111...\n    # Fraction = (1/9 + 899251/9000000000) - 1/9\n    first_decimal = nsimplify('0.(1)992517')\n\n    # Recurring decimal 0.2[3]456[7]\n    # Fraction = 0.233... + 0.0000456...\n    # Fraction = 7/30 + 456/10000000\n    second_decimal = nsimplify('0.(2)34567')\n\n    # Expand the decimals to find the nth decimal\n    # Start with 1 because the first decimal that is not zero (n = 1) is the one that interests us.\n    n = 1\n    while True:\n        # Multiplying by 10^n effectively shifts the decimal point n places to the right\n        shifted_first = first_decimal * 10**n\n        shifted_second = second_decimal * 10**n\n\n        # Compare the decimal parts only by subtracting the integer part\n        if int(shifted_first % 1 * 10) == int(shifted_second % 1 * 10):\n            break\n        n += 1\n\n    return n\n\nans = solution()"
    ],
    "8863cd48f2b44608bc940bde6c45c8fd": [
        "def solution():\n    morning_fruit = 416\n    afternoon_fruit = 248\n    more_fruit_morning = morning_fruit - afternoon_fruit\n    return more_fruit_morning\n\nans = solution()"
    ],
    "efe5d1d421074320ad4c3900d67cbf17": [
        "def solution():\n    orange_ratio = 2\n    water_ratio = 25\n    orange_weight = 10  # grams\n\n    water_weight = (orange_weight / orange_ratio) * water_ratio\n\n    return water_weight\n\nans = solution()"
    ],
    "0e1fad8ec8d14086ac428eca327ba26b": [
        "def solution():\n    total_pages = 550\n    first_day_pages = 30\n    last_day_pages = 70\n\n    # Let's denote the number of pages read more each day than the day before as 'd'.\n    # We need to find the common difference 'd' of the arithmetic sequence.\n    # We know that the last term (last_day_pages) equals the first term (first_day_pages)\n    # plus (n-1)*d, where n is the number of terms/days.\n    # We also know that the sum of an arithmetic sequence is (n/2)(first term + last term).\n    # Therefore, we have two equations:\n    # (1) total_pages = n/2 * (first_day_pages + last_day_pages)\n    # (2) last_day_pages = first_day_pages + (n-1)*d\n    # We need to find 'd' and we know n from equation (1).\n\n    # From equation (1) we get:\n    # total_pages = n/2 * (first_day_pages + last_day_pages)\n    # Thus, n = (2*total_pages) / (first_day_pages + last_day_pages)\n\n    n = (2 * total_pages) / (first_day_pages + last_day_pages)\n\n    # From equation (2) we get:\n    # last_day_pages = first_day_pages + (n-1)*d\n    # Thus, d = (last_day_pages - first_day_pages) / (n-1)\n\n    d = (last_day_pages - first_day_pages) / (n - 1)\n\n    return int(d)\n\nans = solution()"
    ],
    "3cb49c7c36f6450c8a64796070308cdc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(60 - 8*(2*x - 5), 4)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "5750692f9864439ba5afe8796b229fda": [
        "def solution():\n    scores = [7.9, 8.3, 8.8, 8.6]\n    required_average = 8.5\n\n    total_current_scores = sum(scores)\n    required_total_score = required_average * (len(scores) + 1)\n\n    lowest_final_score = required_total_score - total_current_scores\n\n    return lowest_final_score\n\nans = solution()"
    ],
    "7fa90f34a95a47b59d3a3839cc104395": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'r' be the interest rate per year in decimal\n    r = symbols('r')\n    principal = 10000\n    total_interest = 816\n\n    # Equation for compound interest after 2 years\n    equation = Eq(principal * (1 + r)**2 - principal, total_interest)\n\n    # Solving for 'r'\n    interest_rate = solve(equation, r)\n\n    # We assume the interest rate to be positive\n    interest_rate_percent = [rate for rate in interest_rate if rate > 0]\n\n    # As interest rate is usually represented in percentage\n    return float(interest_rate_percent[0] * 100)\n\nans = solution()"
    ],
    "e2aa604a164645d08fcb78a7d4b2edac": [
        "def solution():\n    # The original division expression\n    # Johnny's error is in the reconstruction of the original number\n    # It should be multiplied by the divisor, not the remainder\n    # Correct reconstruction: (quotient * divisor) + remainder\n    quotient = 9\n    divisor = 4\n    remainder = 2\n    \n    # Correct way to find the original number\n    original_number = (quotient * divisor) + remainder\n\n    # Answer is not 22\n    is_correct = original_number == 22\n    return is_correct, original_number\n\nans = solution()"
    ],
    "dede4ea0d33d4f38a225a8f17f3bc881": [
        "def solution():\n    # Let x be the original number\n    # According to the problem statement, if we double the number and then add 7, the answer is 43.\n    # Therefore, the equation is: 2x + 7 = 43\n    # To find the original number, we perform inverse operations:\n    # Subtract 7 from both sides of the equation to get: 2x = 43 - 7\n    result_after_subtracting = 43 - 7\n    # Divide both sides by 2 to solve for x: x = (43 - 7) / 2\n    original_number = result_after_subtracting / 2\n    \n    return original_number\n\nans = solution()"
    ],
    "46c81f732f2f457ea8198cbda5de4904": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the smallest of the four consecutive natural numbers\n    x = symbols('x', integer=True)\n\n    # Define the equation for the product of the four consecutive numbers\n    equation = Eq(x * (x + 1) * (x + 2) * (x + 3), 3024)\n\n    # Solve the equation for x\n    solution_set = solve(equation, x)\n\n    # Since we're only interested in the largest of the four numbers, we add 3 to the largest solution\n    largest_number = max(solution_set) + 3\n\n    return largest_number\n\nans = solution()"
    ],
    "1098f69ccd5544cc85bda00f27b8a033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    mango, pear, apple = symbols('mango pear apple')\n\n    equation1 = Eq(mango + pear, 3.40)\n    equation2 = Eq(mango + apple, 3.80)\n    equation3 = Eq(4 * mango + 2 * pear + apple, 13.20)\n    \n    solutions = solve((equation1, equation2, equation3), (mango, pear, apple))\n\n    return solutions[mango]\n\nans = solution()"
    ],
    "3082b2d8519e44a1ad584e668793812a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    emily, victor, victoria = symbols('emily victor victoria')\n\n    equation1 = Eq(emily, 3 * victor)\n    equation2 = Eq(victoria, emily + 68)\n    equation3 = Eq(emily + victor + victoria, 320)\n\n    solutions = solve((equation1, equation2, equation3), (emily, victor, victoria))\n\n    return solutions[victoria]\n\nans = solution()"
    ],
    "b9075265d1ee4df3938f4e17c31577cb": [
        "def solution():\n    ans = 3.7 + 5.7\n    return ans\n\nans = solution()"
    ],
    "6422fe3aeecf483ba766cbd4e64ac26a": [
        "def solution():\n    total_time = 90\n    multiple_choice_time = 23\n    fill_in_blank_time = 35\n\n    short_answers_time = total_time - (multiple_choice_time + fill_in_blank_time)\n\n    return short_answers_time\n\nans = solution()"
    ],
    "dd7483c3437a49a9a145debe3fa29718": [
        "def solution():\n    train_speed = 30  # Speed of train in meters per second\n    crossing_time = 45  # Time taken to cross the tunnel in seconds\n\n    # Distance covered by train while crossing the tunnel,\n    # which is equal to the length of the train plus the length of the tunnel\n    distance_covered = train_speed * crossing_time\n\n    length_of_train = 850  # Length of the train in meters\n\n    # Length of the tunnel is total distance covered minus the train's length\n    length_of_tunnel = distance_covered - length_of_train\n\n    return length_of_tunnel\n\nans = solution()"
    ],
    "dd3e36501a5c492dab63fa293539b326": [
        "def solution():\n    # Let x be the initial total number of coins Owen had\n    # Let f be the initial number of fifty-cent coins\n    # Then the initial number of one-dollar coins is (x - f)\n    \n    # According to the problem:\n    # f = (2/7) * x  (1)\n    \n    # His mother gave him 10 one-dollar coins and five-dollars’ worth of fifty-cent coins, which is 10 fifty-cent coins\n    # So the new number of fifty-cent coins is f + 10\n    # And the new number of one-dollar coins is (x - f) + 10\n    \n    # In the end, he had twice as many one-dollar coins as fifty-cent coins:\n    # (x - f) + 10 = 2 * (f + 10)  (2)\n    \n    # Now we can solve the equations (1) and (2)\n    from sympy import symbols, Eq, solve\n    x, f = symbols('x f')\n    equation1 = Eq(f, 2/7 * x)\n    equation2 = Eq(x - f + 10, 2 * (f + 10))\n    \n    solutions = solve((equation1, equation2), (x, f))\n    \n    # The solution for x will give us the initial total number of coins Owen had\n    return solutions[x]\n\nans = solution()"
    ],
    "27bc5028c63b41e1a9f9d0def88902ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the speeds of Peter and Hannah as p and h respectively.\n    p, h = symbols('p h')\n\n    # According to the given information, we have the following equations:\n    # p = h + 15 (since Peter is 15 cm/s faster than Hannah)\n    # The time ratio of Peter to Hannah is 3:4, which means (distance/h)/(distance/p) = 3/4\n    # Since distance is the same, we can simplify this to h/p = 3/4.\n\n    # Now, we set up our equations\n    equation1 = Eq(p, h + 15)\n    equation2 = Eq(h/p, 3/4)\n\n    # Using sympy's solve function to solve the two equations\n    solutions = solve((equation1, equation2), (p, h))\n\n    return solutions[h]\n\nans = solution()"
    ],
    "3b1b4add028148159a147e645f93b19a": [
        "def solution():\n    # Maximum number of regions a line can divide a plane is one more than number of lines\n    max_line_parts = 1 + 1\n    \n    # Maximum number of regions n circles can divide a plane is n^2 + n + 1\n    # Ref: https://en.wikipedia.org/wiki/Circle#Plane_divisions\n    num_circles = 5\n    max_circle_parts = num_circles**2 + num_circles + 1\n    \n    # Total maximum parts when combined is the sum of the two, minus overlap (the line cuts each circle once)\n    ans = max_line_parts + max_circle_parts - num_circles\n\n    return ans\n\nans = solution()"
    ],
    "88a249b7e2d34dfe98ded5f27cc37e47": [
        "def solution():\n    total_money = 55\n    saved_money = 32.5\n    spent_money = total_money - saved_money\n\n    # Let the money spent on transportation be x\n    # The money spent on food will be 2x\n    # Total money spent is x + 2x = 3x\n    # 3x = spent_money\n    x = spent_money / 3\n\n    # Money spent on food is twice that of transportation\n    money_food = 2 * x\n\n    return money_food\n\nans = solution()"
    ],
    "582a93bd201d467584951df06919257a": [
        "def solution():\n    H = (45 * 7 + 13 * 7) // 7\n    return H\n\nans = solution()"
    ],
    "424ae64f8f474576a4106f853829077b": [
        "def solution():\n    # Calculate the cost for the first 3 tons\n    first_3_tons_cost = 4 * 3\n    # Fixed service fee\n    service_fee = 4\n    # Total cost before additional tons\n    initial_cost = first_3_tons_cost + service_fee\n    # Remaining money for additional tons\n    remaining_money = 109 - initial_cost\n    # Cost per additional ton\n    additional_ton_cost = 3\n    # Calculate the maximum additional tons she can use\n    additional_tons = remaining_money // additional_ton_cost\n    # Total tons of water she can use\n    total_tons = 3 + additional_tons\n\n    return total_tons\n\nans = solution()"
    ],
    "e80abf22da4c4703bbd3c8b8cb247517": [
        "def solution():\n    ans = 3258 // 9\n    return ans\n\nans = solution()"
    ],
    "adde032b1234481e91098235d742001a": [
        "from math import factorial\n\ndef solution():\n    # Total number of ways to choose entrances for Joe, Mike, and Tina without restriction\n    total_ways = factorial(4) * factorial(3)  # This is 4! for first person * 3! for next two\n    \n    # Number of ways Joe and Mike can choose the same entrance (which is not allowed)\n    # Suppose Joe chose an entrance, there are 3! ways Tina can enter, and Mike must choose the same entrance as Joe, so 1 way for him\n    same_entrance_ways = factorial(3)  # This is 3! ways assuming Joe and Mike chose the same entrance\n    \n    # Subtract the not allowed combinations from the total\n    allowed_ways = total_ways - 3 * same_entrance_ways  # Multiply by 3 as Joe can choose any of 3 entrances to match Mike\n\n    return allowed_ways\n\nans = solution()"
    ],
    "ba3935cd34094e49a8cea4e788c25c2f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    quick_gardener_rate = 1/12\n    lazy_gardener_rate = symbols('l')\n\n    combined_rate = quick_gardener_rate + lazy_gardener_rate\n    equation = Eq(combined_rate, 1/8)\n\n    lazy_gardener_solution = solve(equation, lazy_gardener_rate)\n\n    return 1 / lazy_gardener_solution[0]\n\nans = solution()"
    ],
    "19e51d8fef124cbcb849c81b5dde55d3": [
        "def solution():\n    quotient = 15\n    remainder = 6\n    # the smallest divisor that gives a remainder is always 1 more than the remainder.\n    smallest_divisor = remainder + 1\n    # dividend = divisor * quotient + remainder\n    smallest_dividend = smallest_divisor * quotient + remainder\n    return smallest_dividend\n\nans = solution()"
    ],
    "5d728c04569e4acda389027dab33f9d6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    equation1 = Eq(oranges, apples + 32)\n    equation2 = Eq(apples - apples/3 + oranges - oranges/2, 100)\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    total_fruits = solutions[apples] + solutions[oranges]\n    return total_fruits\n\nans = solution()"
    ],
    "e94e14d7daec44d3928cf6249572099e": [
        "def solution():\n    eve_candy = 12\n    alice_candy = 9\n    irene_candy = 0\n\n    total_candy = eve_candy + alice_candy + irene_candy\n    number_of_girls = 3\n\n    candy_per_girl = total_candy // number_of_girls\n\n    return candy_per_girl\n\nans = solution()"
    ],
    "5d63dffe5e5b4c6195a4e20ccdebb0f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for each person\n    amelia, bala, carl, daniel = symbols('amelia bala carl daniel')\n\n    # Given equations\n    equation1 = Eq(bala, 320 + daniel)                                       # Bala had 320 more cookies than Daniel\n    equation2 = Eq(bala, amelia / 2)                                          # Bala had 1/2 as many cookies as Amelia, Carl, and Daniel\n    equation3 = Eq(carl, (3/4) * (amelia + bala + daniel))                    # Carl had 3/4 as many cookies as Amelia, Bala, and Daniel\n    equation4 = Eq(amelia + bala + carl + daniel, 6230)                       # Total number of cookies\n    equation5 = Eq(amelia, 160)                                               # Amelia had 160 cookies\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (amelia, bala, carl, daniel))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "d21ed197c3554a4494dc5ae572154e6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    noah, pete, howard = symbols('noah pete howard')\n\n    equation1 = Eq(noah + pete, 75)\n    equation2 = Eq(noah + howard, 145)\n    equation3 = Eq(howard, 3 * pete)\n\n    solutions = solve((equation1, equation2, equation3), (noah, pete, howard))\n\n    return solutions[noah]\n\nans = solution()"
    ],
    "ab8b76c78fba49bba15b8e9295c78803": [
        "def solution():\n    belinda = 36\n    matthew = belinda - 7\n    initial_matthew = matthew - 7\n    return initial_matthew\n\nans = solution()"
    ],
    "b4d71da68bcc434e8354987810259e88": [
        "def solution():\n    from math import floor, ceil\n\n    ans = floor(2017) - ceil(201.7) + floor(20.17) - ceil(2.017)\n    return ans\n\nans = solution()"
    ],
    "d1701c8b237c4c5181c58dcde299fe9b": [
        "def solution():\n    ans = 2\n    factor = 3\n    for i in range(3, 15, 2):\n        ans += factor * i\n        factor *= i\n    return ans\n\nans = solution()"
    ],
    "ef768e372ece4b9c863d8281a92c382f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    total_money = 182\n    cost_dress = 5\n    cost_skirt = 3\n    remaining = 5 * x\n\n    equation = Eq(total_money, cost_dress * x + cost_skirt * x + remaining)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b2aea1c47ffd41fb983fc289346c687f": [
        "def solution():\n    green_line_interval = 5\n    red_line_interval = 6\n\n    # Least Common Multiple (LCM) gives the time (in minutes) after which both trains will set out together again.\n    lcm = green_line_interval * red_line_interval // math.gcd(green_line_interval, red_line_interval)\n    \n    # The initial time is 5:00 am which is 300 minutes from midnight.\n    initial_time_minutes = 5 * 60\n\n    # Find the next time by adding LCM to the initial time\n    next_time_minutes = initial_time_minutes + lcm\n\n    # Convert back to hours and minutes\n    hours = next_time_minutes // 60\n    minutes = next_time_minutes % 60\n\n    # Format the time to HH:MM\n    return f'{hours:02d}:{minutes:02d}'\n\nans = solution()"
    ],
    "cd28c0514392451480947377c812fcb5": [
        "def solution():\n    ans = 77.5 * 52 / 100 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "a5d947afabb14059a86977035b7e71e6": [
        "def solution():\n    total_capacity_ml = 990\n    half_capacity_ml = total_capacity_ml / 2\n\n    capacity_per_cup_ml = half_capacity_ml / 3\n\n    return capacity_per_cup_ml\n\nans = solution()"
    ],
    "258f6418c7a44634b786fa4d69d806ec": [
        "def solution():\n    number = 29381\n    nearest_thousand = round(number, -3)\n    return nearest_thousand\n\nans = solution()"
    ],
    "65e148bb5a774c4b8538009506ae4475": [
        "def solution():\n    total_cars = 15\n    blue_car_position_from_front = 8\n    \n    blue_car_position_from_back = total_cars - blue_car_position_from_front + 1\n    \n    return blue_car_position_from_back\n\nans = solution()"
    ],
    "aec33ac892404f198dfd2e4806f460f4": [
        "def solution():\n    # Distance between the first tree and the 101th tree (100 intervals)\n    distance_101_trees = 100 * 3  # Trees are planted every 3 meters\n    \n    # Time to walk from the first tree to the 101th tree in minutes\n    time_101_trees = 3  \n    \n    # Speed in meters per minute\n    speed = distance_101_trees / time_101_trees  # Speed = Distance / Time\n    \n    # Total distance from the school to Olivia's home\n    total_distance = 4000  \n\n    # Total time to travel from school to home in minutes\n    total_time = total_distance / speed  # Time = Distance / Speed\n    \n    return total_time\n\nans = solution()"
    ],
    "4274973e4812443fb90e78a925599481": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n\n    # first equation: 3 apples and 2 bananas cost 1.25\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    # second equation: 1 apple and 1 banana cost 0.48\n    equation2 = Eq(apple + banana, 0.48)\n\n    # solving the two equations\n    solution = solve((equation1, equation2), (apple, banana))\n\n    # cost of 5 bananas\n    cost_five_bananas = 5 * solution[banana]\n\n    return cost_five_bananas\n\nans = solution()"
    ],
    "7d415985d40749aeae60fb6233cfafce": [
        "def solution():\n    cost_per_gram = 80 / 100\n    cost_for_250_grams = cost_per_gram * 250\n    return cost_for_250_grams\n\nans = solution()"
    ],
    "f24d6740b95540bf84759a2c0479e327": [
        "def solution():\n    sum_sq = sum(i**2 for i in range(6, 52, 5))\n    return sum_sq\n\nans = solution()"
    ],
    "5fcdd3004ac646839223368cdc7d8517": [
        "def solution():\n    ans = 2017 + 597\n    return ans\n\nans = solution()"
    ],
    "80479df10d714924af0698610d81b4e7": [
        "def solution():\n    # Calculate the ratio of fish to rabbits based on Owen and Oscar's trade\n    fish_to_rabbits = 5 / 2\n    \n    # Calculate the ratio of rabbits to packs of wheat based on Oscar and Dennis's trade\n    rabbits_to_wheat = 4 / 7\n\n    # Calculate the combined ratio of fish to packs of wheat\n    fish_to_wheat = fish_to_rabbits * rabbits_to_wheat\n\n    # Calculate the number of fish Owen should give Dennis for 14 packs of wheat\n    fish_for_14_wheat = fish_to_wheat * 14\n\n    return fish_for_14_wheat\n\nans = solution()"
    ],
    "e9f47ee528114383ba4f6be4529ce4b8": [
        "def solution():\n    # We need to find the sum of squares of the terms in the series 4n, where n = 1 to 31\n    # Note that 4^2 = (2*2)^2 = 2^2 * 2^2 = 4 * 4 = 16. Therefore, (4n)^2 = 16n^2.\n    # We can use the formula for the sum of squares of the first n natural numbers: n(n+1)(2n+1)/6.\n    \n    n = 31  # 124/4 gives us the last term of the sequence as an integer range (31)\n    sum_of_squares = 16 * n * (n + 1) * (2 * n + 1) / 6  # Multiply by 16 since the terms are 4n\n    \n    return int(sum_of_squares)\n\nans = solution()"
    ],
    "9a284d31007d42739f51042d9bcfbb75": [
        "def solution():\n    from itertools import permutations\n    \n    # All possible entrances each person can choose\n    entrances = '123'\n    arrangements = set(permutations(entrances * 4, 4))  # Create all permutations of length 4\n    \n    # Filter out permutations where all 3 entrances are not used\n    valid_arrangements = [arrangement for arrangement in arrangements if len(set(arrangement)) == 3]\n\n    ans = len(valid_arrangements)\n    return ans\n\nans = solution()"
    ],
    "739abceeaa8940b49a1de4e16f2e066f": [
        "def solution():\n    total_questions = 6\n    correct_mark = 5\n    wrong_mark = -2\n    total_score = 23\n    \n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        if correct_answers * correct_mark + wrong_answers * wrong_mark == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "854b6e25b0df409b8d09ffcf3c018a12": [
        "def solution():\n    numbers = [4, 6, 12, 18]\n    mean = sum(numbers) / len(numbers)\n    return mean\n\nans = solution()"
    ],
    "e705de293fcb400b9a1dfb656dfa1166": [
        "def solution():\n    cookies = 0\n    while True:\n        cookies += 8\n        if cookies % 9 == 1:\n            return cookies\n\nans = solution()"
    ],
    "1f3d2852ba334ae381d67ba4685feefc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    justin = symbols('justin')\n    \n    equation = Eq(justin + 18, 4 * (justin - 6))\n    \n    solution = solve(equation, justin)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "d1030adb2d044db580ef9ccb90cd0ce2": [
        "def solution():\n    time_per_drawing = 124\n    number_of_drawings = 111\n    total_time_needed = time_per_drawing * number_of_drawings\n    return total_time_needed\n\nans = solution()"
    ],
    "fd98368e011c40af9c0a16f0fe8c92a9": [
        "def solution():\n    return 378 - 196\n\nans = solution()"
    ],
    "ceadf2b1ae6f4d6885ecfbb1cd6a855f": [
        "def solution():\n    for num in range(1, 100):\n        if num % 4 == 1 and num % 5 == 2 and num % 6 == 3:\n            return num\n\nans = solution()"
    ],
    "cb887c2f2c5545b7a05451b8ef325c36": [
        "def solution():\n    return (2.6 + 4.8) / 2\n\nans = solution()"
    ],
    "210032ce53ff4939827463e6a45cdfea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote cows as 'c' and goats as 'g'\n    c, g = symbols('c g')\n    \n    # Original number of animals\n    original_total = c + g\n    \n    # 65% of the animals were cows so c = 0.65 * (c + g)\n    equation1 = Eq(c, 0.65 * original_total)\n\n    # When 240 more animals are added,\n    # the number of cows becomes c + 240 and goats become 2g (doubled)\n    new_total = c + 240 + 2 * g\n\n    # Percentage of cows increased by 20% so now it's 85% (65% + 20%)\n    equation2 = Eq(c + 240, 0.85 * new_total)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (c, g))\n\n    return solutions[g]\n\nans = solution()"
    ],
    "99f042a00a454b7493149ecaa15aeaae": [
        "def solution():\n    total_cost = 62\n    \n    # Check for the highest promotion criteria she meets, which is $50 or more\n    if total_cost >= 50:\n        discount = 15\n    elif total_cost >= 20:\n        discount = 4\n    else:\n        discount = 0\n    \n    final_payment = total_cost - discount\n    \n    return final_payment\n\nans = solution()"
    ],
    "fb6bdead23d74b31a9f612a923a7e6d0": [
        "def solution():\n    ans = 828 + 191\n    return ans\n\nans = solution()"
    ],
    "6689bf51afe64009a81b09cd69008faf": [
        "def solution():\n    books_per_case = 10 // 2\n    total_books_in_six_cases = books_per_case * 6\n    return total_books_in_six_cases\n\nans = solution()"
    ],
    "4bc1254a6fe041a991a7100f650c67ac": [
        "def solution():\n    import math\n    # There are 2 boys, they can be arranged in 2! ways.\n    boys_arrangements = math.factorial(2)\n    # There are 3 girls, they can be arranged in 3! ways.\n    girls_arrangements = math.factorial(3)\n    # Apply the multiplication principle.\n    total_arrangements = boys_arrangements * girls_arrangements\n    return total_arrangements\n\nans = solution()"
    ],
    "07a423a429ad445dae3180bf686780f7": [
        "def solution():\n    # In the worst case, all balls of the same color could be drawn first\n    # Draw 5 reds, then 5 whites. The next ball drawn must be yellow.\n    # Total balls drawn = 5 reds + 5 whites + 1 yellow = 11\n    return 5 + 5 + 1\n\nans = solution()"
    ],
    "ccebb61c3253490ca4582aebc55574a0": [
        "def solution():\n    n = 1\n    num = int('2023')\n    while num % 11 != 0:\n        n += 1\n        num = int(str(num) + '2023')\n    return n\n\nans = solution()"
    ],
    "60b666d3655c439dae65e37097947530": [
        "def solution():\n    ans = 224 - 75\n    return ans\n\nans = solution()"
    ],
    "86e9c26ad82341cfa9a20b2d32bf56b0": [
        "def solution():\n    ages = [6, 9, 10]\n    # Tom's age is a multiple of 3, so Tom cannot be 10.\n    # That leaves the ages 6 and 9 for Tom.\n    # Since Jason is younger than Tom, Jason must be 6, and Tom must be 9.\n    # Therefore, Adam is the one who is left, which means he is 10 years old.\n    adam_age = ages[-1]  # Adam is the oldest (10 years old)\n    \n    return adam_age\n\nans = solution()"
    ],
    "84dcdcd96c1048d69413739dad19be6d": [
        "def solution():\n    b = (7 + 9) / 4\n    return b\n\nans = solution()"
    ],
    "07da074b86d84faabb12f53c21c42e0c": [
        "def solution():\n    ans = 80040\n    return ans\n\nans = solution()"
    ],
    "72e7f1101ae74488b35a8eb2c990d03b": [
        "def solution():\n    ans = 483 // 21\n    return ans\n\nans = solution()"
    ],
    "7c9de8ac84804f9ba2fe6b73d259b89d": [
        "def solution():\n    count = 0\n    for i in range(1, 401):\n        count += str(i).count('3')\n    return count\n\nans = solution()"
    ],
    "218136d2d92e439d904e0302f6af8a72": [
        "def solution():\n    # Starting from the highest possible number for Avril,\n    # and distribute the rest with at least 1 apple for each and unique counts.\n    for Avril in range(28, 0, -1):\n        remaining = 28 - Avril\n        # maximum unique distribution to other 5 children\n        others = sum(range(1, 6))\n        if remaining >= others and len(set(range(1, 6)).union({remaining - others})) == 6:\n            return Avril\n\nans = solution()"
    ],
    "50398a9afcad4e3e91e6a646e9abe499": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n    \n    # Given equations\n    eq1 = Eq(2*triangle, square)\n    eq2 = Eq(square + triangle, circle)\n    eq3 = Eq(diamond, circle + square + triangle)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (triangle, square, circle, diamond))\n    \n    # Return the number of triangles that are equal to a diamond\n    return solutions[diamond] / solutions[triangle]\n\nans = solution()"
    ],
    "21a782c4b45c43f9b4ecbc9c1de7c46b": [
        "def solution():\n    total_money = 984\n    laptop_cost_fraction = 5/8\n    laptop_cost = total_money * laptop_cost_fraction\n    return laptop_cost\n\nans = solution()"
    ],
    "e1599fd308ba411f82f7fa4febd782fe": [
        "def solution():\n    original_average = 60\n    new_average = 70\n    original_sum = original_average * 2\n    new_sum = new_average * 3\n    new_number = new_sum - original_sum\n    return new_number\n\nans = solution()"
    ],
    "e9497c826db341cda1c37f184c32773e": [
        "def solution():\n    lori_speed = 2  # Lori's speed in meters per second\n    ratio_jocye_lori = 3 / 2  # Ratio of Jocye's speed to Lori's speed\n\n    # Calculate Jocye's speed based on the ratio and Lori's speed\n    jocye_speed = (ratio_jocye_lori * lori_speed)\n\n    # Calculate how far Jocye can run in 10 seconds\n    distance_jocye = jocye_speed * 10\n\n    return distance_jocye\n\nans = solution()"
    ],
    "b93faf4325af43f9b9ddf824cb85bb6d": [
        "def solution():\n    first_term = 16\n    second_term = 23\n    difference = second_term - first_term  # The common difference in the sequence\n    last_term = 79\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "2a34cf02f3524187ba971bb585f0ff12": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    ken_orig, lisa_orig, amount_given = symbols('ken_orig lisa_orig amount_given')\n\n    # Ken had $15 more than Lisa at first\n    equation1 = Eq(ken_orig, lisa_orig + 15)\n\n    # After giving the amount to Lisa, Ken had $21 less than Lisa\n    equation2 = Eq(ken_orig - amount_given, lisa_orig + amount_given - 21)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (ken_orig, lisa_orig, amount_given))\n\n    return solutions[amount_given]\n\nans = solution()"
    ],
    "40c1e8a02c9845be9b54d604dedcbd90": [
        "from datetime import timedelta, datetime\n\ndef solution():\n    # Define the times given in the problem\n    school_leave_time = datetime.strptime(\"15:22\", \"%H:%M\")\n    bus_catch_time = datetime.strptime(\"16:01\", \"%H:%M\")\n    bus_trip_duration = timedelta(minutes=18)\n    home_arrival_time = datetime.strptime(\"16:35\", \"%H:%M\")\n    \n    # Calculate total walking time\n    first_walk_duration = bus_catch_time - school_leave_time\n    second_walk_duration = home_arrival_time - (bus_catch_time + bus_trip_duration)\n    total_walking_time = first_walk_duration + second_walk_duration\n\n    # Convert total walking time to minutes\n    ans = total_walking_time.total_seconds() / 60\n\n    return int(ans)\n\nans = solution()"
    ],
    "ea15746d343648b5b1905e6b6b3058e1": [
        "def solution():\n    trophies = 0\n    for i in range(1, 10):\n        if i <= 5:\n            trophies += i\n        else:\n            trophies += (10 - i)\n    return trophies\n\nans = solution()"
    ],
    "46c88bd515d4485ea196f2cb3df07861": [
        "def solution():\n    boys = 290\n    girls = boys - 80\n    total_children = boys + girls\n    percentage_boys = (boys / total_children) * 100\n    return percentage_boys\n\nans = solution()"
    ],
    "3836f8199279464492fa9ffeb517630a": [
        "def solution():\n    from statistics import median\n\n    sequence = []\n    for i in range(1, 9):\n        sequence.extend([i] * (i + 1))\n\n    med = median(sequence)\n    return med\n\nans = solution()"
    ],
    "34f44583a8cd45e19c113454790dece8": [
        "def solution():\n    digits = [3, 1, 9, 2]\n    largest = int(''.join(map(str, sorted(digits, reverse=True))))\n    smallest = int(''.join(map(str, sorted(digits))))\n    return largest - smallest\n\nans = solution()"
    ],
    "bf2cd12d57fa4f7bb8bebd58e44e01a3": [
        "def solution():\n    ans = 3267 - 745\n    return ans\n\nans = solution()"
    ],
    "9f8ac2e29e8241a1b702cf02e3cc8591": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Using arithmetic sequence sum formula S = n/2 * (a1 + an)\n    # where n is the number of terms, a1 is the first term and an is the last term\n    # Here, n = 5 (days), S = 100 (total cookies), and d (difference) = 6\n\n    a1 = symbols('a1')  # First term\n    an = a1 + 4 * 6  # Last term, 4 is because there are 5 terms and we need the fifth term\n    total_cookies = Eq((5 / 2) * (a1 + an), 100)  # Total cookies eaten over 5 days\n\n    first_day_cookies = solve(total_cookies, a1)\n\n    return first_day_cookies[0]\n\nans = solution()"
    ],
    "372d3979dd3241aa8a0f262aeedf3e12": [
        "def solution():\n    students = 30\n    facing_teacher = 0\n\n    for i in range(1, students + 1):\n        turns = 0        \n        if i % 2 == 0:  # multiple of 2\n            turns += 1\n        if i % 3 == 0:  # multiple of 3\n            turns += 1\n        if turns % 2 == 0:  # if turned an even number of times, facing teacher\n            facing_teacher += 1\n            \n    return facing_teacher\n\nans = solution()"
    ],
    "e91231eaf4d8439faaede60ec5091276": [
        "def solution():\n    # To ensure getting 2 red marbles, we consider the worst-case scenario:\n    # Taking all blue marbles and all orange marbles first.\n    blues = 18\n    oranges = 8\n\n    # If after taking all blue and orange marbles, the next two must be red\n    reds_needed = 2\n\n    # Total marbles we must take out to ensure this happens:\n    total_marbles = blues + oranges + reds_needed\n\n    return total_marbles\n\nans = solution()"
    ],
    "89e2769fb2db4433a5c129d85a787ba3": [
        "def solution():\n    from sympy import Eq, solve, symbols, sqrt\n\n    x = symbols('x')\n    equation = Eq(sqrt(x) + sqrt(36), sqrt(81))\n    solutions = solve(equation, x)\n    return solutions[0]\n\nans = solution()"
    ],
    "3814e1d67d1e4e95aa0ff2ddfffc3251": [
        "def solution():\n    return 2184 // 7\n\nans = solution()"
    ],
    "6f725efbd53047b3a646809b5162d3a0": [
        "def solution():\n    ans = 221 * 4\n    return ans\n\nans = solution()"
    ],
    "7670470dcd1f4c8c96ea9a2887dfc3bc": [
        "def solution():\n    first_term = 10\n    fourth_term = 25\n    number_of_rows = 25\n    \n    common_difference = (fourth_term - first_term) // (4 - 1)\n    last_term = first_term + (number_of_rows - 1) * common_difference\n    \n    total_athletes = (number_of_rows * (first_term + last_term)) // 2\n\n    return total_athletes\n\nans = solution()"
    ],
    "8dc109b953614926bb4b8a13ca7104a0": [
        "def solution():\n    # Probability of the car being behind the initially chosen gate (gate 1): 1/3\n    # Probability of the car being behind one of the other two gates (gate 2 or 3): 2/3\n    # Host opens gate 3 to reveal a goat, meaning if the car is not behind gate 1, it must be behind gate 2.\n    # So the probability that the car is behind gate 2 now is 2/3.\n    \n    # Since the probability of the car being behind gate 2 is higher than the probability of being behind gate 1,\n    # You should switch to gate 2.\n    \n    # Return the gate number you should choose to maximize the chances of winning the car.\n    return 2  # Switch to gate 2\n\nans = solution()"
    ],
    "29fb2769be344578a23b172da388fb1e": [
        "def solution():\n    first_term = 1\n    last_term = 49\n    common_difference = 2\n\n    # Number of terms in the arithmetic sequence\n    n = ((last_term - first_term) // common_difference) + 1\n\n    # Sum of arithmetic sequence formula: S_n = n/2 * (first_term + last_term)\n    sum_sequence = n * (first_term + last_term) // 2\n\n    return sum_sequence\n\nans = solution()"
    ],
    "708c9e7ed608441c98ea48c7bbc04858": [
        "def solution():\n    ans = 468 // 9\n    return ans\n\nans = solution()"
    ],
    "dfba4fdc8eb54b0c962f907a4edf3d42": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 4), (2, 3), (1, 7)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "c34160a26e5c402eae8db3c3bc42f9b9": [
        "def solution():\n    ans = sum(i * (i + 1) for i in range(1, 32))\n    return ans\n\nans = solution()"
    ],
    "33f5c3de051f4cdebf9fe82fa4041ef2": [
        "def solution():\n    number_of_visits = 6\n    cost_per_visit = 'x'  # Algebraic expression representing cost per visit.\n\n    # Total cost is the cost per visit times the number of visits.\n    total_cost = f'{number_of_visits}*{cost_per_visit}'\n\n    return total_cost\n\nans = solution()"
    ],
    "0c251d28e5f34b3790b5b39adc9a140b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_sum = symbols('original_sum')\n\n    money_spent_on_CDs = 75\n    money_after_CDs = original_sum - money_spent_on_CDs\n    money_spent_on_batteries = money_after_CDs / 4\n    remaining_money = money_after_CDs - money_spent_on_batteries\n\n    equation = Eq(remaining_money, original_sum / 3)\n\n    solution = solve(equation, original_sum)\n\n    return solution[0]\n\nans = solution()"
    ],
    "60431e14fe314b0dbc9334280d889c13": [
        "def solution():\n    # Rate of one trainer is 1 pokemon in 7 minutes\n    # We need to catch 49 pokemons in 49 minutes\n    # Since time is multiplied by 7, we need the same number of trainers to maintain the same rate\n    # The solution is the same as the initial number of trainers\n    return 7\n\nans = solution()"
    ],
    "9193db4182e34c75be3ffc7a426aad35": [
        "def solution():\n    num_people = 13  # Tommy and his 12 friends\n    minutes_per_person = 142\n    \n    total_minutes = num_people * minutes_per_person\n    \n    return total_minutes\n\nans = solution()"
    ],
    "d8e38e05e8d54b2da8f23e0d88ae7907": [
        "def solution():\n    total_people = 5000\n    incorrect_identifications = 1500\n\n    percentage_incorrect = (incorrect_identifications / total_people) * 100\n\n    return percentage_incorrect\n\nans = solution()"
    ],
    "6e103a2ef68043989f0694b5cb663d85": [
        "from math import factorial\n\ndef solution():\n    # Total ways to distribute 7 different books among 3 students\n    # Each student gets 1 book, so we choose 1 book for each student from the 7\n    \n    # Choosing 1 book for the first student\n    ways_for_first_student = factorial(7) // factorial(7 - 1)\n    \n    # After choosing a book for the first student, we have 6 books left\n    # Choose 1 book for the second student\n    ways_for_second_student = factorial(6) // factorial(6 - 1)\n    \n    # Lastly, choose 1 book for the third student from the remaining 5\n    ways_for_third_student = factorial(5) // factorial(5 - 1)\n    \n    # The total number of ways is the product of the number of ways for each student\n    total_ways = ways_for_first_student * ways_for_second_student * ways_for_third_student\n    \n    return total_ways\n\nans = solution()"
    ],
    "aad63064de384c75967ad2fe1ab5fc65": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oplus = symbols('oplus')\n    equation = Eq(oplus * 9 + 47 - oplus, 84 + 27)\n\n    solutions = solve(equation, oplus)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "2a141bb7917247d0940bb1bec7dc53e1": [
        "def solution():\n    numbers = [3, 2.1, 2.494, 2.449, 2.51]\n    target = 2.5\n    closest = min(numbers, key=lambda x: abs(x - target))\n    return closest\n\nans = solution()"
    ],
    "a6a193e0597a44869d654226d5c6024e": [
        "def solution():\n    # The 99-digit number is made of the repeated sequence '928' repeated 33 times\n    # Since '928' is 3 digits long and 99 is a multiple of 3, we can conclude the repeated\n    # part is used exactly 33 times, without any trailing digits\n\n    repeated_sequence = '928'\n    number_of_repeats = 99 // len(repeated_sequence)\n    \n    # Convert the repeated sequence into an integer\n    int_repeated_sequence = int(repeated_sequence)\n    \n    # Since the remainder of a sum equals the sum of remainders,\n    # we can calculate the remainder of the repeated sequence and then multiply it by\n    # the number of repeats and take the remainder again\n    remainder_single_sequence = int_repeated_sequence % 9\n    total_remainder = (remainder_single_sequence * number_of_repeats) % 9\n    \n    return total_remainder\n\nans = solution()"
    ],
    "077a03a4ff1146cf942d5c075e60786b": [
        "def solution():\n    # Let the three numbers be a, b, c such that a <= b <= c.\n    # According to the problem, we have the following equations:\n    # a + b + c = 56\n    # (a + b) / 2 = 14 => a + b = 28\n    # (b + c) / 2 = 22 => b + c = 44\n\n    # From the first and second equation, we can find c:\n    # c = 56 - (a + b) = 56 - 28 = 28\n\n    # Now we substitute c into the third equation to find b:\n    # b + 28 = 44 => b = 44 - 28 = 16\n\n    # Finally, we find a:\n    # a = 28 - b = 28 - 16 = 12\n\n    # Now we have all three numbers: a = 12, b = 16, c = 28\n    # Since a <= b <= c, the median is b.\n\n    return 16\n\nans = solution()"
    ],
    "e771bc7cbc15407692c34b8827ae5c9c": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['1', '3', '5', '7']\n    min_even_num = float('inf')\n    for perm in permutations(digits):\n        if perm[-1] in '02468':  # Checks if the last digit is even\n            num = int(''.join(perm))\n            min_even_num = min(min_even_num, num)\n    return min_even_num\n\nans = solution()"
    ],
    "2a41554ff61e4bf3b29916349e9d7f23": [
        "def solution():\n    total_juice = 10\n    per_container = 2\n\n    num_containers = total_juice / per_container\n\n    return int(num_containers)\n\nans = solution()"
    ],
    "308dc425a3d44c09abe3d9fd91e8ec30": [
        "def solution():\n    count = 0\n    for i in range(41):\n        if '2' in str(i):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "026a3697b867401aa50c1eed67be23fe": [
        "def solution():\n    equation1 = 66 * 2 + 66 * 3\n    equation2 = 66 * 5\n    return equation1 == equation2\n\nans = solution()"
    ],
    "0fbd2843bdcc4f0a895c0a1773ac180c": [
        "def solution():\n    # Price of Sour Sweets in pence\n    price_sour_sweets = 12\n    # Price of Chocolate Drops in pence\n    price_chocolate_drops = 17\n    \n    # Amount paid by Eliot in pence\n    eliot_paid = 300\n    # Amount paid by Maya in pence\n    maya_paid = 400\n    \n    # Number of bars bought by each (we assume they bought the same amount)\n    number_of_bars = 0\n    \n    # Find the number of bars such that the change received by both is the same\n    while True:\n        eliot_change = eliot_paid - (number_of_bars * price_sour_sweets)\n        maya_change = maya_paid - (number_of_bars * price_chocolate_drops)\n        \n        # Check if the change is the same\n        if eliot_change == maya_change and eliot_change >= 0:\n            return number_of_bars\n        \n        number_of_bars += 1\n\nans = solution()"
    ],
    "c42ce86645884bed8f12c68ae8245158": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Jackson and Chloe's current ages.\n    jackson, chloe = symbols('jackson chloe')\n\n    # Set up the equations based on the given information.\n    equation1 = Eq(jackson + chloe, 54)\n    equation2 = Eq(jackson + 3, 5 * (chloe + 3))\n\n    # Solve the equations for Jackson and Chloe's current ages.\n    solutions = solve((equation1, equation2), (jackson, chloe))\n\n    # Extract the solution for Jackson's age 3 years later.\n    jackson_age_3_years_later = solutions[jackson] + 3\n\n    return jackson_age_3_years_later\n\nans = solution()"
    ],
    "1feb10160f034a898eb973a9aac889c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pork_dumpling, bun = symbols('pork_dumpling bun')\n    \n    equation1 = Eq(6 * pork_dumpling + 4 * bun, 92)\n    equation2 = Eq(3 * pork_dumpling + bun, 41)\n    \n    solutions = solve((equation1, equation2), (pork_dumpling, bun))\n    \n    return solutions[pork_dumpling]\n\nans = solution()"
    ],
    "b7fea9e98bef46af9acd40209ffe5387": [
        "def solution():\n    ans = 297 + 198 + 204 + 99\n    return ans\n\nans = solution()"
    ],
    "ada253044cf143859091a35ddb998f0b": [
        "def solution():\n    base_fare = 2.5\n    additional_fare_per_km = 1.2\n    total_cost = 8.5\n    base_distance = 1.8\n\n    additional_cost = total_cost - base_fare\n    additional_distance = additional_cost / additional_fare_per_km\n    total_distance = base_distance + additional_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "f7e855eea0fd468da4854a78b1524831": [
        "def solution():\n    for apples in range(1, 50):\n        if apples % 5 == 0 and apples % 6 == 3 and apples % 8 == 5:\n            return apples\n\nans = solution()"
    ],
    "dfa5352c28124e0ebb6a359a752ef95f": [
        "def solution():\n    ans = 648 * 5\n    return ans\n\nans = solution()"
    ],
    "7a0515a38a4e44bc9248081a392748cd": [
        "def solution():\n    return 8 * 2\n\nans = solution()"
    ],
    "186bc13df3b24db5a2d94b621966fdd7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, yellow, blue = symbols('red yellow blue')\n\n    equation1 = Eq(red, 2 * yellow)\n    equation2 = Eq(blue, 3 * yellow)\n    equation3 = Eq(red + yellow + blue, 150)\n\n    solutions = solve((equation1, equation2, equation3), (red, yellow, blue))\n\n    return solutions[red]\n\nans = solution()"
    ],
    "c25c01f5db07454fba0a46c84f70815c": [
        "def solution():\n    # Let's assume x is the number of students in the class\n    # According to the Pigeonhole Principle, if at least one student gets at least 3 apples,\n    # then the maximum number of students you can have without violating this condition\n    # is found by giving 2 apples to each student and then 1 to the last.\n\n    # Give 2 apples to each student, that leaves us with 80 - 2 * x apples.\n    # To assure that at least one student gets 3 apples, we need to have 1 leftover apple.\n    # So, 80 - 2 * x = 1, solving for x gives us:\n    x = (80 - 1) // 2\n\n    return x\n\nans = solution()"
    ],
    "900f814eac484c948ddfe9ef92667f08": [
        "def solution():\n    ounces = 56\n    pounds_per_ounce = 1 / 16\n    kg_per_pound = 1 / 2.2\n    \n    pounds = ounces * pounds_per_ounce\n    kg = pounds * kg_per_pound\n    \n    return round(kg, 1)\n\nans = solution()"
    ],
    "36675ac7266944a1a8727f6fe3dbe742": [
        "def solution():\n    boys_in_big_car = 36\n    girls_in_small_car = 12\n    capacity_big_car = 4\n    capacity_small_car = 2\n    \n    big_cars_needed = boys_in_big_car / capacity_big_car\n    small_cars_needed = girls_in_small_car / capacity_small_car\n    \n    total_cars_needed = big_cars_needed + small_cars_needed\n    \n    return int(total_cars_needed)\n\nans = solution()"
    ],
    "a1c19e0170ab4067a75561de9f31246c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x + 0.25*x, 200)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "5eb0c6d54ccd4e5192f0639fa9e61712": [
        "def solution():\n    return 342 * 24\n\nans = solution()"
    ],
    "8f2c8b866334452790965d39bbf73bfd": [
        "def solution():\n    julia_age = 7\n    mother_age = 36\n    father_age = 42\n    total_years = 100 - (julia_age + mother_age + father_age)\n\n    # Total years represent the sum of years each will age to reach sum of 100,\n    # but since all of them grow older at the same rate,\n    # the number of years will be the sum divided by 3.\n    ans = total_years // 3\n    \n    return ans\n\nans = solution()"
    ],
    "d4f51ce9d1594b9dae05c831a2fa12b0": [
        "def solution():\n    # Calculation for the sequence from 5 to 80\n    sum_to_80 = sum(range(5, 81))\n    # Calculation for the sequence from 5 to 78 (excluding 79 and 80 twice)\n    sum_to_78_twice = sum(range(5, 79)) * 2\n    # Final sum\n    ans = sum_to_80 + sum_to_78_twice\n\n    return ans\n\nans = solution()"
    ],
    "3cfe944baa5b44af9f73a9a9804766df": [
        "from itertools import permutations\n\ndef solution():\n    max_value = 0\n    for perm in permutations(range(1, 10)):\n        abc = perm[0] * 100 + perm[1] * 10 + perm[2]\n        bcd = perm[1] * 100 + perm[2] * 10 + perm[3]\n        cde = perm[2] * 100 + perm[3] * 10 + perm[4]\n        defg = perm[3] * 100 + perm[4] * 10 + perm[5]\n        efg = perm[4] * 100 + perm[5] * 10 + perm[6]\n        fgh = perm[5] * 100 + perm[6] * 10 + perm[7]\n        ghi = perm[6] * 100 + perm[7] * 10 + perm[8]\n        A = abc + bcd + cde + defg + efg + fgh + ghi\n        max_value = max(max_value, A)\n    return max_value\n\nans = solution()"
    ],
    "639d9d79e69d4eb784e27de0551d879d": [
        "def solution():\n    ans = sum(2019/(i*(i+7)) for i in range(3, 2013, 7))\n    return ans\n\nans = solution()"
    ],
    "f2784483b59048f78ecec37c0cf104ea": [
        "def solution():\n    # The price after the first discount\n    discounted_price = 32\n    \n    # Calculate the original price before any discount was applied\n    original_price = discounted_price / (1 - 0.20)\n    \n    # Calculate the price after the second discount given to Henry\n    further_discounted_price = discounted_price - 4\n    \n    # Calculate the total percentage discount given\n    total_discount = ((original_price - further_discounted_price) / original_price) * 100\n    \n    return total_discount\n\nans = solution()"
    ],
    "fdf926a10e994a328cedd41a2dba9645": [
        "def solution():\n    first_term = 21\n    last_term = 159\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_seq = num_terms * (first_term + last_term) // 2\n\n    return sum_seq\n\nans = solution()"
    ],
    "4336ad7957714455a5e676bfde71730b": [
        "def solution():\n    # The pattern seems to be that the result of each multiplication\n    # is the square of the difference between the digits.\n    # For example, 10 * 10 = (1 - 0) ^ 2 = 1\n    # And 11 * 11 = (1 - 1) ^ 2 = 0\n    # So, for 55 * 55, we do the same:\n    first_digit = 5\n    second_digit = 5\n    difference = abs(first_digit - second_digit)\n    result = difference ** 2\n\n    return result\n\nans = solution()"
    ],
    "59c88edfb7be49da8035991eac68ecce": [
        "from itertools import permutations\n\ndef solution():\n    digits = '012345'\n    all_permutations = sorted(set(permutations(digits, 6)))\n    return int(''.join(all_permutations[504]))\n\nans = solution()"
    ],
    "79716db040e342488b8e0ca3c513ff69": [
        "from math import factorial\n\ndef solution():\n    # There are 5 people: A, B, C, and two others (let's call them D and E).\n    # For A to be on the left of B and B to be on the left of C, we treat A, B, and C as a single unit.\n    # Thus, we effectively have 3 units to arrange: [A, B, C], D, and E.\n    # These three units can be arranged in 3! ways.\n    \n    abc_arrangements = factorial(3)\n    \n    # Within the unit [A, B, C], A must be on the left side of B, and B must be on the left side of C.\n    # There's only 1 way to arrange A, B, and C to satisfy these conditions (A, B, C in that order).\n    \n    abc_fixed_order = 1\n    \n    # Multiply the number of arrangements of the units with the arrangement inside the A-B-C unit.\n    total_arrangements = abc_arrangements * abc_fixed_order\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "f81850060b9546ac8c3d3601b6fcbdba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    girls = symbols('girls')\n    boys = 36 - girls\n    \n    total_score = 36 * 89\n    girls_score = 88 * girls\n    boys_score = 91 * boys\n    \n    equation = Eq(girls_score + boys_score, total_score)\n    \n    girls_number = solve(equation, girls)\n\n    return girls_number[0]\n\nans = solution()"
    ],
    "8fa1eaa5b7fa4b98874b9e1f39b2e808": [
        "def solution():\n    count = 0\n    for hundreds in [2, 3]:\n        for tens in [0, 2, 3]:\n            for ones in [0, 2, 3]:\n                if len(set([hundreds, tens, ones])) == 3:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "eea0bc5267ed47068ae3e77ef2b698e5": [
        "def solution():\n    return 546 * 4\n\nans = solution()"
    ],
    "7ee4e5c971f5489dada98a446c456e7d": [
        "def solution():\n    common_multiples = []\n    for i in range(21, 50):\n        if i % 6 == 0 and i % 9 == 0:\n            common_multiples.append(i)\n    return common_multiples\n\nans = solution()"
    ],
    "6bef5aece1a847a6937f986da3d23922": [
        "def solution():\n    # Alice's daily work rate\n    alice_rate = 1 / 40\n    # Bob's daily work rate\n    bob_rate = 1 / 60\n    \n    # Total work done by both when they work together for 27 days\n    total_work_done = 27 * (alice_rate + bob_rate)\n    \n    # Since the total work is equivalent to 1 job, we find out the equivalent days Alice would have worked alone\n    alice_effective_days = total_work_done / alice_rate\n    \n    # The days Alice took off is the difference between the actual days and her effective working days\n    alice_days_off = 27 - alice_effective_days\n    \n    return alice_days_off\n\nans = solution()"
    ],
    "b8879dc8433645f393f3d14ce8b21788": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    red, white, black = symbols('red white black')\n    total_balls = 136\n    \n    equation1 = Eq(red / white, 1 / 2)\n    equation2 = Eq(white / black, 3 / 4)\n    equation3 = Eq(red + white + black, total_balls)\n    \n    solutions = solve((equation1, equation2, equation3), (red, white, black))\n    \n    return solutions[red]\n\nans = solution()"
    ],
    "730403a00f674fff868250a995376cb4": [
        "def solution():\n    term7 = 105\n    term8 = 120\n    term9 = 135\n\n    common_difference = term8 - term7\n\n    term100 = term7 + (100 - 7) * common_difference\n\n    return term100\n\nans = solution()"
    ],
    "640eb5c54e4c4b87a5a40a1c3e55b996": [
        "def solution():\n    return 11**2\n\nans = solution()"
    ],
    "371b5fe21e2e4a93b42f86daca04f7cf": [
        "def solution():\n    return 5297 + 7345\n\nans = solution()"
    ],
    "606a8457449743e08d9df3044b63e356": [
        "def solution():\n    # You need 3 socks to ensure you have at least one matching pair,\n    # because even in the worst case scenario, where the first two socks are different,\n    # the third sock must match one of the first two.\n    return 3\n\nans = solution()"
    ],
    "703de86e768447d88b6ebb7aeb638e8e": [
        "def solution():\n    # Combined age 4 years ago\n    combined_age_4_years_ago = 24\n    \n    # Since 4 years have passed, each dog is 4 years older\n    # Hence the combined age currently is:\n    combined_age_now = combined_age_4_years_ago + 3 * 4\n    \n    # In 2 years' time, each dog would be 2 years older\n    # So the combined age in 2 years will be:\n    combined_age_in_2_years = combined_age_now + 3 * 2\n    \n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "c7d0858edd084447b5408a6df5a80275": [
        "def solution():\n    n = (4 ** 2) / 2\n    return int(n)\n\nans = solution()"
    ],
    "cff9675f0a924539ac2ac9ce83a0a08d": [
        "def solution():\n    hour = 8\n    minute = 30\n    minute_angle = minute * 6\n    hour_angle = (hour % 12) * 30 + (minute / 60) * 30\n    angle = abs(hour_angle - minute_angle)\n    return min(angle, 360 - angle)\n\nans = solution()"
    ],
    "c530af2f48304f898bbec512de1ee00a": [
        "def solution():\n    justin_apples = 4\n    sister_apples = 5 * 4\n    remaining_apples = 20\n\n    total_apples = justin_apples + sister_apples + remaining_apples\n\n    return total_apples\n\nans = solution()"
    ],
    "fe37a41678a645a88ee9bdcc3da1b86a": [
        "def solution():\n    piano_only = 30 - 15\n    violin_only = 41 - 15\n    both = 15\n    total_students = piano_only + violin_only + both\n    return total_students\n\nans = solution()"
    ],
    "7db195e18e37456ca8f6e7f6ef27321c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    ryan_initial, audrey_initial = symbols('ryan_initial audrey_initial')\n\n    # Equation based on the initial condition\n    equation1 = Eq(ryan_initial / audrey_initial, 2 / 7)\n    \n    # Equation based on the condition after Ryan bought and Audrey gave away marbles\n    equation2 = Eq((ryan_initial + 20) / (audrey_initial - 80), 1 / 3)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (ryan_initial, audrey_initial))\n\n    # Audrey's initial number of marbles\n    return solutions[audrey_initial]\n\nans = solution()"
    ],
    "f4489da9f1884801a10bcedceb12a47f": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    total_minutes = 13 + 23 + 8 + 27\n    required_time = datetime.strptime(\"7:45 AM\", \"%I:%M %p\")\n    latest_wakeup_time = required_time - timedelta(minutes=total_minutes)\n\n    return latest_wakeup_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "efb92f40c4c44473bfcc2623df15f364": [
        "def solution():\n    ans = sum([i if (i // 2) % 2 == 1 else -i for i in range(1, 61)])\n    return ans\n\nans = solution()"
    ],
    "153332ac79b349408ebeb32bb8a75f24": [
        "def solution():\n    return 489 + 375 + 92\n\nans = solution()"
    ],
    "8d5b99e07c77482abfe53cb919364656": [
        "def solution():\n    ans = 4.2 + 7.8 + 7.5 - 2.5\n    return ans\n\nans = solution()"
    ],
    "11f6f29725ad4c4dacb24f94de454b8a": [
        "def solution():\n    coins = [1, 2, 5]\n    combinations = set()\n    \n    for c1 in coins:\n        for c2 in coins:\n            for c3 in coins:\n                combinations.add(c1 + c2 + c3)\n\n    ans = len(combinations)\n    return ans\n\nans = solution()"
    ],
    "a97028adbf254284ad53a804e526f05e": [
        "def solution():\n    # Total number of beads\n    total_beads = 65\n    # Beads in one repeating set\n    set_beads = 3 + 2 + 2\n    # Black beads in one repeating set\n    black_beads_in_set = 3\n\n    # Number of full sets\n    full_sets = total_beads // set_beads\n    # Number of black beads from full sets\n    black_beads = full_sets * black_beads_in_set\n\n    # Remaining beads after full sets\n    remaining_beads = total_beads % set_beads\n    \n    # If there are remaining beads, check if they include black beads\n    if remaining_beads > 0:\n        if remaining_beads <= 3:\n            black_beads += remaining_beads\n        else:\n            black_beads += 3\n\n    return black_beads\n\nans = solution()"
    ],
    "7730e0dc2bae4994a062e0e494e4b937": [
        "def solution():\n    total_heads = 51\n    total_legs = 160\n    \n    # Let the number of chickens (and ducks) be c\n    # Cows have 4 legs, chickens and ducks have 2\n    # So total legs will be 2c (chickens) + 2c (ducks) + 4*(total_heads - 2c) (cows)\n    # 2c + 2c + 4*(total_heads - 2c) = total_legs\n    # 4c + 4*total_heads - 8c = total_legs\n    # 4*total_heads - 4c = total_legs\n    # c = (4*total_heads - total_legs) / 4\n    c = (4 * total_heads - total_legs) // 4\n\n    return c\n\nans = solution()"
    ],
    "b440fab9ebc4484292e18843c0eaa0f9": [
        "from itertools import permutations\n\ndef solution():\n    total_ways = 0\n\n    for order in permutations(['Joe', 'Mike', 'Tina']):\n        for joe_entrance in range(1, 5):\n            for mike_entrance in range(1, 5):\n                if joe_entrance != mike_entrance:  # Joe and Mike cannot join the same entrance\n                    for tina_entrance in range(1, 5):\n                        if tina_entrance != joe_entrance and tina_entrance != mike_entrance:\n                            total_ways += 1\n    return total_ways\n\nans = solution()"
    ],
    "43077c3455b94d59a72275e377e21a52": [
        "def solution():\n    initial_amount = 750\n    rebekah_drink = initial_amount / 5\n    abigail_drink = 200\n    anna_drink = 120\n    \n    left_amount = initial_amount - (rebekah_drink + abigail_drink + anna_drink)\n    \n    return left_amount\n\nans = solution()"
    ],
    "ef5c87ebb60d47efb47ffb24ab3fdaa4": [
        "def solution():\n    percentage = 75\n    quantity = 90\n    \n    ans = (percentage / 100) * quantity\n    \n    return ans\n\nans = solution()"
    ],
    "1d807b2a160d43e5ab284c4f23b30f90": [
        "def solution():\n    total_volume = 2 + 3\n    juice_in_first_punch = 2 * 0.40\n    juice_in_second_punch = 3 * 0.70\n    total_juice = juice_in_first_punch + juice_in_second_punch\n    concentration = total_juice / total_volume\n    return concentration\n\nans = solution()"
    ],
    "0046d00874954b5eb9373fa247e7d3bb": [
        "def solution():\n    return 8.4 - 4.7 + 2.6 - 3.3\n\nans = solution()"
    ],
    "acfd2df07c9d4b9e8c8d0fd768515606": [
        "def solution():\n    return 2136 // 8\n\nans = solution()"
    ],
    "0153bfa01ade41859016fa9a0b48eb8d": [
        "def solution():\n    first_multiple = (50 // 11) + 1\n    last_multiple = 150 // 11\n\n    ans = last_multiple - first_multiple + 1\n    return ans\n\nans = solution()"
    ],
    "71354999b1864945830241cc90cefcff": [
        "def solution():\n    total_time_hours = (13 * 24) + 22  # Convert days and hours to hours\n    total_distance_miles = 3000  # Total distance in nautical miles\n\n    average_speed = total_distance_miles / total_time_hours  # Average speed in nautical miles per hour\n\n    return round(average_speed)\n\nans = solution()"
    ],
    "600418fdb9fd41ac90e4ae2ed38c4317": [
        "def solution():\n    initial_stamps = 1347\n    gave_to_sister = 339\n    bought_stamps = 455\n    gave_away_again = 777\n\n    final_stamps = initial_stamps - gave_to_sister + bought_stamps - gave_away_again\n    \n    return final_stamps\n\nans = solution()"
    ],
    "a5a5bc9b5a914f54b5a59cc324c4e470": [
        "def solution():\n    numbers = [17, 21, 36, 23, 4, 49, 10]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "e8307197fd5741a1bab5b7ce9faff12e": [
        "def solution():\n    people_in_front_of_bella = 15\n    people_behind_albert = 12\n    albert_and_bella = 2\n\n    total_people = people_in_front_of_bella + people_behind_albert + albert_and_bella\n\n    return total_people\n\nans = solution()"
    ],
    "ca6721b4076a459bbe0a58a7d219708a": [
        "def solution():\n    primes = [23, 29]  # These are the prime numbers between 20 and 30.\n    return primes[0]  # Returning the first one.\n\nans = solution()"
    ],
    "4828afb807854856954b4952a48e470e": [
        "def solution():\n    return 36 * 24\n\nans = solution()"
    ],
    "f826de035ab748bbbf391b6f382601be": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    fatouma = symbols('fatouma')\n\n    equation = Eq(fatouma + 2, 2 * (fatouma - 5))\n    solution = solve(equation, fatouma)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5d81fd5bcb6d489fbca8914a372910a6": [
        "def solution():\n    ways = []\n    for x1 in range(1, 14):\n        for x2 in range(1, 14):\n            for x3 in range(1, 14):\n                if x1 + x2 + x3 == 14 and len(set([x1, x2, x3])) == 3:\n                    sorted_combination = tuple(sorted((x1, x2, x3)))\n                    if sorted_combination not in ways:\n                        ways.append(sorted_combination)\n\n    return ways\n\nans = solution()"
    ],
    "646fcc0d8aca45c2b2efbaed5048a912": [
        "def solution():\n    total_heights = 132 - 124 + 1 # +1 to include both ends\n    min_same_height_students = 4\n    class_size = total_heights * (min_same_height_students - 1) + 1 # +1 is the worst case addition\n    \n    return class_size\n\nans = solution()"
    ],
    "f84e58b96fc548a9b8a2cc0247ee0d82": [
        "def solution():\n    total_spent = 3 * 0.50  # Jennifer bought three pens at 50p each\n    money_given = 5  # Jennifer gave £5\n    change = money_given - total_spent  # Calculate the change\n\n    return change\n\nans = solution()"
    ],
    "5990abeaf2ef44129f8a7714654dd1c8": [
        "def solution():\n    # Calculate the numerator and the denominator separately\n    numerator = 1*3*8 + 2*6*16 + 3*9*24\n    denominator = 1*2*4 + 2*4*8 + 3*6*12\n\n    # Divide the numerator by the denominator to get the answer\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "4d4ad28089e14625a3c978c761454507": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for the number of men and women\n    men, women = symbols('men women')\n\n    # After the first bus, the number of women became 3/5 of men\n    equation1 = Eq(women - 36, 3/5 * (men))\n\n    # After the second bus, the number of men became men - 48\n    # And they are equal\n    equation2 = Eq(men - 48, women - 36)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (men, women))\n\n    # Calculate the total number of people at the bus stop at first\n    total_people = solutions[men] + solutions[women]\n\n    return total_people\n\nans = solution()"
    ],
    "15264635822b439b919be7d215630609": [
        "def solution():\n    total_books = 3154\n    english_books = 1849\n    chinese_books = total_books - english_books\n    difference = english_books - chinese_books\n    return difference\n\nans = solution()"
    ],
    "e9d3605185b84231858a4ef516053885": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(8.5 - 4 * (x - 1.5), 2.5 * x + 3 * (2.5 - x))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0760ea6011714945925169546bfe0c97": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Desired ready time\n    ready_time = datetime.strptime('19:15', '%H:%M')\n    \n    # Cooking duration\n    cook_duration = timedelta(hours=1, minutes=25)\n    \n    # Calculate start time\n    start_time = ready_time - cook_duration\n    \n    # Format time to return only the hour and minute in 24h format\n    return start_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "d87d77e43dab4026a154e8ec2beda138": [
        "def solution():\n    go = 42\n    checkers = 55\n    chess = 33\n    go_checkers = 18\n    go_chess = 10\n    checkers_chess = 9\n    all_three = 5\n\n    total_students = go + checkers + chess - go_checkers - go_chess - checkers_chess + all_three\n\n    return total_students\n\nans = solution()"
    ],
    "db91ac44fa344822983552e996da323b": [
        "def solution():\n    # To win the game, Fred needs to make sure that at every step,\n    # he leaves a number of oranges that is a multiple of 4 for George.\n    # Thus forcing George into a position where no matter the choice,\n    # Fred can keep the count a multiple of 4 after his turn.\n    # This strategy ensures that Fred will eventually get to a situation\n    # where 4 oranges are left, and he can then take all to win.\n    # Subtract four until we reach a number just below a multiple of 4 that is above 3\n    # (because there are only 1, 2, or 3 oranges that can be removed in one turn).\n    # This will be the ideal number of oranges Fred should take in his first turn.\n    \n    oranges_left = 15\n    while oranges_left > 3:\n        if oranges_left % 4 != 0:\n            break\n        oranges_left -= 1  # George's turn, iterate down from 15 to find Fred's optimal move.\n    \n    # Fred's optimal first move will leave George with a multiple of 4.\n    optimal_first_move = 15 - oranges_left\n\n    return optimal_first_move\n\nans = solution()"
    ],
    "8a63aa9572bb4412ae53e5439a7865ac": [
        "def solution():\n    # Let x be the number of years later needed for the sum of their ages to be 48\n    # Oliver's age in x years: 20 + x\n    # Lin's age in x years: 26 + x\n    # The sum of their ages in x years: (20 + x) + (26 + x) = 48\n    # Solving this equation for x, we have: 46 + 2x = 48 -> 2x = 2 -> x = 1\n    x = (48 - (20 + 26)) // 2\n\n    return x\n\nans = solution()"
    ],
    "c09507e96cc44da8898b1879faefbf61": [
        "def solution():\n    tickets = 16\n    cost_per_ticket = 112\n    total_cost = tickets * cost_per_ticket\n    return total_cost\n\nans = solution()"
    ],
    "a2090f2b75c044cb932b529d4f6c76ed": [
        "def solution():\n    num_poles = 40\n    distance_between_poles = 3\n\n    total_distance = (num_poles - 1) * distance_between_poles\n    \n    return total_distance\n\nans = solution()"
    ],
    "9be9f04df4aa4fad90e2c592b50495cd": [
        "def solution():\n    cm_value = 736\n    m_value = cm_value / 100\n    return m_value\n\nans = solution()"
    ],
    "77fd9afe874840219f53431a52a3a55f": [
        "def solution():\n    series = [64-62, 60-58, 56-54, 52-50, 48-46]\n    ans = sum(series)\n    return ans\n\nans = solution()"
    ],
    "61c8e4b651014f6abc20d2bf4138cdcb": [
        "from sympy import symbols, solveset, S\n\ndef solution():\n    p = symbols('p', integer=True)\n    eq = 245 * p # Our expression which is supposed to be a cube\n\n    # Since 245 is 5 * 7^2, the prime factorization of p must complement this\n    # to form a cube, p must be of the form a^3, b^3 where b is 5 and a^3 is 7.\n    # Since 245 already contains a 7^2, we need another 7 to complete the cube.\n\n    # p should be 7 to complete the cube of 245 * p.\n    p_value = solveset(eq - 7**3, p, domain=S.Integers)\n    \n    # Assuming the problem intends the smallest positive integer value for p\n    ans = min(p_value)\n    \n    return ans\n\nans = solution()"
    ],
    "25a47ea57b4647599987b84251fd1281": [
        "def solution():\n    from itertools import permutations\n\n    # Generate all possible permutations for the digits 0-9\n    for perm in permutations(range(10), 5):\n        s, a, m, o, e = perm\n        # Ensure S and E are not zero as they are first digits in the numbers\n        if s == 0 or e == 0:\n            continue\n        esse = e * 1000 + s * 100 + s * 10 + e\n        sasmo = s * 10000 + a * 1000 + s * 100 + m * 10 + o\n        if esse + 2018 == sasmo:\n            return s + a + s + m + o\n\nans = solution()"
    ],
    "22c136c471c246b1b3392b99cb5d2dfb": [
        "def solution():\n    this_year_production = 36000\n    fraction = 1 / 4\n    last_year_production = this_year_production * fraction + this_year_production\n\n    return last_year_production\n\nans = solution()"
    ],
    "47dff524f26242ad9fa5ff839557debe": [
        "def solution():\n    total_students = 48\n    present_students = total_students - 1 - 1  # one on sick leave and one on personal leave\n    attendance_rate = (present_students / total_students) * 100\n    return round(attendance_rate, 2)\n\nans = solution()"
    ],
    "c49f4ad1d6e74285a471cae0a0494b8c": [
        "def solution():\n    # Given fractions 5/15 and 8/□ are equal\n    # Calculate the value of □ by cross multiplying\n    # (5 * □) = (15 * 8)\n    # □ = (15 * 8) / 5\n    ans = (15 * 8) / 5\n    return ans\n\nans = solution()"
    ],
    "4e4e510238974caa86256923e2e038c2": [
        "def solution():\n    first_term = 22\n    second_term = 26\n    difference = second_term - first_term\n    last_term = 98\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "08f15646d5be4ac6a59a45c45853c225": [
        "def solution():\n    total_sum = 0\n    for i in range(2, 2018):\n        total_sum += sum(j/i for j in range(1, i))\n    return total_sum\n\nans = solution()"
    ],
    "8a10d5adbcea4531970b60dfa42fd819": [
        "def solution():\n    return 270 * 0.30\n\nans = solution()"
    ],
    "43672fb4dbf24b02bb90359769d8f568": [
        "def solution():\n    numbers = [199, 99.9, 100.2, 100.029, 98.999]\n    closest = min(numbers, key=lambda x: abs(x - 100))\n    return closest\n\nans = solution()"
    ],
    "488c8f884bea4ca59a65a31e0e04aa9d": [
        "def solution():\n    from math import ceil\n\n    daily_savings = 2.40\n    total_amount_needed = 150.0\n\n    days_needed = total_amount_needed / daily_savings\n    weeks_needed = days_needed / 7\n\n    return ceil(weeks_needed)  # rounding up to the next full week\n\nans = solution()"
    ],
    "f784396939674fa89af27d5359f38965": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    # Initial ratio equation: 3/8 = apples/oranges\n    # New ratio equation after removing one apple: 1/3 = (apples - 1)/oranges\n\n    equation1 = Eq(3 * oranges, 8 * apples)\n    equation2 = Eq(oranges, 3 * (apples - 1))\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "1f546f2cbdd947219d887b2aa75e71f6": [
        "def solution():\n    return 25 * 4 * 27\n\nans = solution()"
    ],
    "b4e4441c3f0440be8e09da643628b41d": [
        "def solution():\n    # Position of Tim from front to back: 4th\n    # Therefore, there are 3 people in front of Tim and at least 2 behind him.\n    rows = 3 + 1 + 2\n\n    # Position of Tim from right to left: 4th\n    # Therefore, there are 3 people to the right of Tim and he's the first from left,\n    # which means there are no people on his left.\n    columns = 3 + 1\n\n    # Total number of band members is the product of rows and columns.\n    total_members = rows * columns\n\n    return total_members\n\nans = solution()"
    ],
    "410cabc838ed44f48fb660b0a2c3782d": [
        "def solution():\n    return 9 + 88\n\nans = solution()"
    ],
    "bb3a1671c17647d78e01b43d8630223f": [
        "def solution():\n    original_sum = sum(range(1, 15))  # Sum of the first 14 natural numbers\n    target_sum = original_sum + 2019  # Sum after adding 2019\n\n    # Find eight consecutive numbers whose sum is target_sum\n    for i in range(1, target_sum):\n        if sum(range(i, i + 8)) == target_sum:\n            return i\n\nans = solution()"
    ],
    "a9ec2d33adf8474197070ba71da55c04": [
        "def solution():\n    # Convert mixed fraction to improper fraction\n    mixed_number = 6 + 1/2\n    divisor_fraction = 1/4\n    \n    # Perform division of fractions by multiplying by the reciprocal of the divisor\n    result = mixed_number * (1 / divisor_fraction)\n    \n    return result\n\nans = solution()"
    ],
    "a666c2ea1fef4b64a986908460e91640": [
        "from math import factorial\n\ndef solution():\n    word = \"STATISTICS\"\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    \n    numerator = factorial(len(word))\n    denominator = 1\n    for count in letter_counts.values():\n        denominator *= factorial(count)\n    \n    ans = numerator // denominator\n    return ans\n\nans = solution()"
    ],
    "12396eda43e54937ba9c6bd015a43e54": [
        "def solution():\n    first_term = 2\n    last_term = 100\n    common_difference = 2\n    \n    n_terms = int((last_term - first_term) / common_difference + 1)\n    sum_of_sequence = n_terms * (first_term + last_term) // 2\n    \n    return sum_of_sequence\n\nans = solution()"
    ],
    "15b65d4a82f249f0b83939ac418a1d25": [
        "def solution():\n    common_factor = 3428\n    sum_of_multipliers = 836 + 162 + 2\n    ans = common_factor * sum_of_multipliers\n    return ans\n\nans = solution()"
    ],
    "02a4bfa1cce24886a09dd6a0ebf0cfc6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the weight of one rabbit as r, one chicken as c, and one kangaroo as k.\n    r, c, k = symbols('r c k')\n\n    # Given that the weight of 2 rabbits is equal to 6 chickens, we have:\n    equation1 = Eq(2 * r, 6 * c)\n\n    # Given that the weight of 3 kangaroos is equal to 4 rabbits, we have:\n    equation2 = Eq(3 * k, 4 * r)\n\n    # We want to find out how many chickens weigh the same as one kangaroo.\n    # Therefore, we need to express the kangaroo's weight in terms of the chicken's weight.\n    # We can use substitution by solving equation1 for r and substituting into equation2.\n\n    # Solve equation1 for r\n    solution_r = solve(equation1, r)[0]\n\n    # Substitute solution_r into equation2\n    equation2_substituted = equation2.subs(r, solution_r)\n\n    # Now solve equation2_substituted for k in terms of c\n    solution_k_in_c = solve(equation2_substituted, k)[0]\n\n    # Return the coefficient of c in solution_k_in_c to find out the number of chickens\n    # that weigh the same as one kangaroo.\n    return solution_k_in_c.as_coefficient(c)\n\nans = solution()"
    ],
    "28bfcc3c31154a39a652d06135594627": [
        "def solution():\n    total_amount = 1000\n    note_value = 5\n    \n    num_notes = total_amount // note_value\n\n    return num_notes\n\nans = solution()"
    ],
    "6fda0ead943b49128df85bf6b5849e36": [
        "def solution():\n    # time required for each task\n    cut_wood = 3\n    weave_rope = 1\n    dry_wood = 5\n    mow_grass = 1\n    prepare_food = 1\n    soak_grass = 1\n    choose_wood = 1\n\n    # finding at least how long it will take\n    # since drying wood takes the longest, it can be done while doing other tasks\n    # tasks that can't be performed simultaneously must be added to the time of drying wood\n    total_time = max(dry_wood, cut_wood + choose_wood) + weave_rope + mow_grass + soak_grass + prepare_food\n\n    return total_time\n\nans = solution()"
    ],
    "a1ec4f1847ce4822947204953d74de5b": [
        "def solution():\n    return 342 + 576\n\nans = solution()"
    ],
    "48ff1e7865214bdc975558caeae2d50b": [
        "def solution():\n    # Ashley's current age\n    ashley_age_now = 10\n    \n    # Ashley's age three years ago\n    ashley_age_then = ashley_age_now - 3\n    \n    # Ashley was 2 years older than her brother three years ago\n    brother_age_then = ashley_age_then - 2\n    \n    # Brother's current age\n    brother_age_now = brother_age_then + 3\n    \n    return brother_age_now\n\nans = solution()"
    ],
    "7d88ede971b64fd9827de58a37434916": [
        "def solution():\n    Y = (9 * 5 + 15 * 5) // 5\n    return Y\n\nans = solution()"
    ],
    "06dde9f26aa64d8c91f787c1c4d71389": [
        "def solution():\n    first_term = 7\n    last_term = 52\n    difference = 3\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "65a3698a450943d3ab1dbc4023a956a8": [
        "def solution():\n    total = 0\n    for i in range(1, 2019):\n        frac_part = (2018 + i) / 5 - int((2018 + i) / 5)\n        total += frac_part\n    return total\n\nans = solution()"
    ],
    "03c5885919f34314bb4b44bfe248420c": [
        "def solution():\n    participants = 100\n    # Since each school must have at least 4 participants to be the school with the most participants,\n    # we apply the Pigeonhole Principle: if n pigeons are distributed in m pigeonholes, and n > mk,\n    # then at least one pigeonhole must contain more than k pigeons.\n    # In our case, to find the maximum number of schools (m), we can have at most 3 participants per school (k) \n    # that wouldn't reach 4 participants.\n    # Therefore, the formula becomes 100 = 4 * (m - 1) + 1, which simplifies to m = (100 - 1) // 3 + 1\n    max_schools = (participants - 1) // 3 + 1\n\n    return max_schools\n\nans = solution()"
    ],
    "b2264aba67854c45bb17ca0a45c40d21": [
        "def solution():\n    # Snow White is in the middle and also the 7th from the front,\n    # so there must be 6 people in front of her and 6 people behind her.\n    dwarves_in_front = 6\n    dwarves_behind = 6\n    snow_white = 1  # Counting Snow White herself\n\n    # Calculate the total number of dwarves by adding the number of dwarves in front,\n    # the number of dwarves behind, and Snow White.\n    total_dwarves = dwarves_in_front + dwarves_behind + snow_white\n\n    return total_dwarves\n\nans = solution()"
    ],
    "ace1245119464470b5cdb95b2c3595e4": [
        "from fractions import Fraction\n\ndef solution():\n    result = Fraction(3, 1) + Fraction(5, 9) + Fraction(6, 1) + Fraction(4, 9)\n    ans = result.limit_denominator()  # this will give the answer in simplest form\n    return ans\n\nans = solution()"
    ],
    "33956c5d5c43463196c5619abf1d36ca": [
        "def solution():\n    for i in range(1000, 10000):\n        if (i * 6) ** (1/3) % 1 == 0 and (i / 6) ** 0.5 % 1 == 0:\n            return i\n\nans = solution()"
    ],
    "528f30d146454d9fbd940a06520bb850": [
        "from math import gcd\n\ndef solution():\n    lcm = lambda x, y: x * y // gcd(x, y)\n    return lcm(lcm(2, 3), 8)\n\nans = solution()"
    ],
    "8587852257524191ae8a0cf973cb3197": [
        "def solution():\n    # As Tim stands 4th from the front and 3rd from the back, there are 3 people before him and 2 after him in the vertical line.\n    # So, the total number of rows is 4 + 2 = 6\n\n    # As Tim stands 4th from the left and 7th from the right, there are 3 people before him and 6 after him in the horizontal line.\n    # So, the total number of columns is 4 + 6 = 10\n    \n    # Total number of band members in the array is the product of the number of rows and columns\n    total_band_members = 6 * 10\n    return total_band_members\n\nans = solution()"
    ],
    "e56936fac25c4b8e9ff669e07797ab6c": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The congruences are provided in the format (remainder, modulo)\n    congruences = [(3, 4), (1, 7), (5, 9)]\n\n    # solve_congruence returns a tuple with the solution and the modulo. We only need the solution.\n    ans, _ = solve_congruence(*congruences)\n\n    return ans\n\nans = solution()"
    ],
    "125fbe1405c64507b8d833c4d1798f63": [
        "def solution():\n    # Define the speeds of the trains\n    speed_fast = 48  # in km/h\n    speed_slow = 36  # in km/h\n\n    # Since the trains meet at the same time, the ratio of their distances will be the same as the ratio of their speeds\n    ratio = speed_fast / speed_slow  # No units, as they cancel each other out\n\n    # Let the distance traveled by the slower train be x\n    # Then the distance traveled by the faster train will be x + 70 (as given in the problem statement)\n    \n    # The distance ratio between the faster and slower train is therefore (x + 70) / x = ratio\n    # We can write this as an equation: (x + 70) / x = ratio\n\n    # Solve for x\n    x = 70 / (ratio - 1)\n\n    # Now we find the total distance between the stations\n    # It's the sum of the distances both trains have traveled when they meet\n    total_distance = x + (x + 70)\n\n    return total_distance\n\nans = solution()"
    ],
    "64d0d52e2bf64e88b638cf7cc846261f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the tonnes of wheat Lily has and y be the tonnes of wheat Gigi has.\n    lily, gigi = symbols('lily gigi')\n\n    # Lily would still have 26 tonnes more wheat than Gigi has after giving Gigi 36 tonnes.\n    equation1 = Eq(lily - 36, gigi + 36 + 26)\n\n    # The weight of Lily's wheat is 8 times that of Gigi's.\n    equation2 = Eq(lily, 8 * gigi)\n\n    # Solve the two equations for lily and gigi.\n    solutions = solve((equation1, equation2), (lily, gigi))\n\n    return solutions[lily]\n\nans = solution()"
    ],
    "3a5a01fd9a9844408f2c7062b63270b0": [
        "def solution():\n    ans = 48 / (1 + 1/3) / (6/7)\n    return ans\n\nans = solution()"
    ],
    "e45decf2b87f4c4ba7f9717cc4a6fb05": [
        "def solution():\n    boat = 1\n    while True:\n        if (boat + 1) * 6 == (boat - 1) * 9:\n            break\n        boat += 1\n    ans = (boat + 1) * 6\n    return ans\n\nans = solution()"
    ],
    "9d7ec4d7b1464bba9277da3aadbff391": [
        "def solution():\n    total_amount = 50 + 20 + 10 + 5  # Zoey's total amount before losing a coin\n    coins = [50, 20, 10, 5]  # List of coins\n\n    for coin in coins:\n        if (total_amount - coin) == 2 * (total_amount / 2 - coin):\n            return coin\n\nans = solution()"
    ],
    "39977f0e34da4e1489169692316de3da": [
        "def solution():\n    pairs = 0\n    for i in range(1, 101):\n        for j in range(i+1, 101):\n            if (i + j) % 5 == 0:\n                pairs += 1\n    return pairs\n\nans = solution()"
    ],
    "718f81285ce94030bea31c3cbb679ab7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    chocolates, friends = symbols('chocolates friends')\n    \n    equation1 = Eq(chocolates - 18 * friends, 41)\n    equation2 = Eq(23 * friends - chocolates, 34)\n    \n    solutions = solve((equation1, equation2), (chocolates, friends))\n    \n    remaining_chocolates_with_20_each = solutions[chocolates] - 20 * solutions[friends]\n    \n    return remaining_chocolates_with_20_each\n\nans = solution()"
    ],
    "0aa90dabe6d64f0285ceda7e7598b164": [
        "def solution():\n    return 599999 + 59999 + 5999 + 599 + 59 + 5\n\nans = solution()"
    ],
    "2fc75a01535c4ae98dffb54b5bcd459f": [
        "def solution():\n    # Initialize the count of different two-digit numbers\n    count = 0\n\n    # Create a list of the digits that can be used to form the numbers\n    digits = [0, 2, 4]\n    \n    # Iterate over all possible two-digit combinations\n    for tens_digit in digits:\n        for ones_digit in digits:\n            # Skip the combination where the tens digit is 0 since it wouldn't be a two-digit number\n            if tens_digit == 0:\n                continue\n            # Increase the count for each valid two-digit number\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "5d4699cf5231465b949cc5c32e601170": [
        "def solution():\n    ans = 371 + (24 + 19) * 3\n    return ans\n\nans = solution()"
    ],
    "e5c1b794ac8648ec850e93b55dab48de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    r, c = symbols('r c')\n    \n    # Rasidah had $48 less than Chai Seng.\n    equation1 = Eq(r, c - 48)\n    \n    # Rasidah spent 3/5 of her money.\n    rasidah_spent = r * 3/5\n    \n    # Chai Seng spent 6/7 of his money.\n    chaiseng_spent = c * 6/7\n    \n    # In the end, Chai Seng had 1/2 as much money left as Rasidah.\n    equation2 = Eq(c - chaiseng_spent, (r - rasidah_spent) / 2)\n    \n    # Solve the equations.\n    solutions = solve((equation1, equation2), (r, c))\n    \n    # Return the amount of money Rasidah had at first.\n    return solutions[r]\n\nans = solution()"
    ],
    "d09cf908f3aa4485b244c8b396d7753b": [
        "def solution():\n    # Initialize the answer variable\n    ones_digit = None\n\n    # Loop through possible values for thousands, hundreds, tens, and ones digits\n    for d1 in range(1, 10):                   # thousands digit\n        for d2 in range(d1+1, 10):            # hundreds digit (must be larger than thousands digit)\n            for d3 in range(d2+1, 10):        # tens digit (must be larger than hundreds digit)\n                d4 = (d2 + d1)                # tens digit as the sum of thousands and hundreds digits\n                if d4 < d3 and (d1 + d2 + d3 + d4) == 16: # Check if digits are in increasing order and sum to 16\n                    ones_digit = (d1 + d2 + d3)           # ones digit is sum of other three\n                    return ones_digit\n\nans = solution()"
    ],
    "3dd0e028b2e0476fb27782b124909bdf": [
        "def solution():\n    return (0.007)**2\n\nans = solution()"
    ],
    "01a32f2cf14e462c9b61d1fcd77574f4": [
        "def solution():\n    # Calculate the distance covered uphill and downhill\n    uphill_distance = 3 * 5\n    downhill_distance = 2 * 10\n\n    # Calculate the total distance and total time\n    total_distance = uphill_distance + downhill_distance\n    total_time = 3 + 2\n\n    # Calculate the average speed\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "58650bb89c1441479147f7d4f580c378": [
        "def solution():\n    total = 63\n    result = 54\n    fraction = 7\n\n    numerator = (result * fraction) / total\n\n    return int(numerator)\n\nans = solution()"
    ],
    "4d8046b8a53d442a9ac1c228e0ce0ab7": [
        "from itertools import permutations\n\ndef solution():\n    digits = [2, 4, 6, 8]\n    max_number = 0\n    for p in permutations(digits):\n        num = int(''.join(map(str, p)))\n        if num % 4 == 0 and num > max_number:\n            max_number = num\n    return max_number\n\nans = solution()"
    ],
    "11e0382a85804608b378e0d0257999a1": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.10\n    years = 5\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n    return round(final_value, 1)\n\nans = solution()"
    ],
    "f0bee63f873d497b96407169a7e2db47": [
        "def solution():\n    # Base fee for the first 5 kWh\n    base_fee = 2 * 5\n    # Fixed service fee\n    fixed_fee = 3\n    # Total amount Susan has\n    total_amount = 63\n    # Subtracting the base fee and the fixed service fee from the total amount\n    remaining_amount = total_amount - base_fee - fixed_fee\n    # Calculating the number of additional kWh Susan can use\n    additional_kWh = remaining_amount / 1\n    # Total kWh is the sum of the first 5 kWh and the additional kWh\n    total_kWh = 5 + additional_kWh\n    \n    return int(total_kWh)\n\nans = solution()"
    ],
    "de23539233a540d8a78444b87207ab4f": [
        "def solution():\n    total_cookies = 9 * 660\n    small_box_capacity = 600\n    small_boxes_needed = total_cookies // small_box_capacity\n    if total_cookies % small_box_capacity != 0:\n        small_boxes_needed += 1\n    return small_boxes_needed\n\nans = solution()"
    ],
    "cc135b9291974bc8a3f809cc912e685e": [
        "def solution():\n    for num_students in range(1, 1000):  # Limiting the search as there must be a reasonable upper bound\n        if num_students % 3 == 2 and num_students % 7 == 6 and num_students % 11 == 10:\n            return num_students\n\nans = solution()"
    ],
    "7134e7994980408d978447b2fb2d3866": [
        "def solution():\n    for x in range(1, 10):  # x can't be 0 as it's the first digit\n        for y in range(10):  # y can be any digit from 0 to 9\n            A = 10 * x + y\n            B = 400 * x + 10 * y\n            if B == 10 + 7 * A:\n                return A\n\nans = solution()"
    ],
    "a6fe92eccb9540d7bace6c4b67cdf3d2": [
        "def solution():\n    return abs(-19 + 8)\n\nans = solution()"
    ],
    "0a85a3267e0d4f238d507e043b936277": [
        "def solution():\n    total_students = 43\n    math_pass = 30\n    science_pass = 28\n    english_pass = 25\n    all_tests_min = math_pass + science_pass + english_pass - total_students * 2\n    all_tests_max = min(math_pass, science_pass, english_pass, total_students - all_tests_min)\n    return all_tests_max\n\nans = solution()"
    ],
    "f17963c6412147f8a3c618b9ffa4db12": [
        "def solution():\n    primes = [29, 31, 37, 41, 43]\n    missing_prime = primes[2]  # The missing prime number in the sequence\n    return missing_prime\n\nans = solution()"
    ],
    "18183ed9b54a424c9c391e8cb804cfc6": [
        "def solution():\n    punch1_kg = 20\n    punch1_concentration = 0.35\n    punch2_kg = 30\n    punch2_concentration = 0.60\n    \n    total_punch = punch1_kg + punch2_kg\n    total_juice = (punch1_kg * punch1_concentration) + (punch2_kg * punch2_concentration)\n    \n    concentration_percent = (total_juice / total_punch) * 100\n    \n    return concentration_percent\n\nans = solution()"
    ],
    "b59168ae6b464ccaa42cf8065c6eb4ae": [
        "def solution():\n    from sympy import factorint\n\n    # Prime factorization of 4320\n    factors_4320 = factorint(4320)\n\n    # Since 3/2 raised to power n needs 3's to cancel out, we check how many 3's we have\n    num_threes = factors_4320.get(3, 0)\n\n    # By multiplying (3/2)^n, we introduce n more 3's and n 2's to be cancelled out.\n    # So, the number of 2's in 4320's prime factorization must be at least n for the product to be an integer.\n    num_twos = factors_4320.get(2, 0)\n\n    # Since we need at least n 2's to cancel out the n (1/2)'s, n can range from 0 to the number of 2's in the factorization\n    # If n is greater than the number of 3's, extra 1/3 factors would make the result non-integer.\n    # So the maximum value of n is the minimum of the number of 2's or 3's.\n    max_n = min(num_threes, num_twos)\n\n    # n can be 0 (4320 * 1) up to max_n, inclusive\n    # So there are max_n + 1 integer values for n\n    return max_n + 1\n\nans = solution()"
    ],
    "048da12bce8148d3a40134a2b3b09a86": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the amounts of grain in warehouses A and B\n    a, b = symbols('a b')\n    \n    # Equation representing the final state of A having twice the amount of B\n    equation = Eq((50 + 12), 2 * (b - 16))\n    \n    # Solve the equation for b\n    solution = solve(equation, b)\n    \n    return solution[b]\n\nans = solution()"
    ],
    "f0b18311921842e38deebe821472b76e": [
        "def solution():\n    cookies = 76\n    cookies_per_box = 6\n    boxes_needed = (cookies + cookies_per_box - 1) // cookies_per_box\n\n    return boxes_needed\n\nans = solution()"
    ],
    "4dbb6a3e89004483bd9aad06124dacee": [
        "def solution():\n    return 0.50 * 0.20 * 6000\n\nans = solution()"
    ],
    "719dc7a052524541afb0f37592e3b324": [
        "from math import factorial\n\ndef solution():\n    # Total letters in 'COLLEGE'\n    total_letters = len('COLLEGE')\n    # Frequency of each letter C=1, O=1, L=2, E=3, G=1\n    freq_c = 1\n    freq_o = 1\n    freq_l = 2\n    freq_e = 3\n    freq_g = 1\n\n    # Total number of permutations (total_letters! / (freq_c!*freq_o!*freq_l!*freq_e!*freq_g!))\n    num_ways = factorial(total_letters) // (factorial(freq_c) * factorial(freq_o) *\n                                             factorial(freq_l) * factorial(freq_e) *\n                                             factorial(freq_g))\n\n    return num_ways\n\nans = solution()"
    ],
    "5b64a9ba57014e80a0eadd05b75a22b7": [
        "def solution():\n    total_cost = 120\n    booking_fee = 30\n    hourly_rate = 10\n\n    hours_hired = (total_cost - booking_fee) / hourly_rate\n\n    return int(hours_hired)\n\nans = solution()"
    ],
    "21a6577206bb4af599c66a03599918a9": [
        "def solution():\n    # Owen to Oscar: 3 fishes = 1 rabbit\n    # Oscar to Dennis: 2 rabbits = 3 packs of wheat\n    \n    # Find the ratio of fishes to a pack of wheat\n    # Combine the ratios: (3 fishes / 1 rabbit) * (2 rabbits / 3 packs of wheat)\n    # The rabbits cancel out: 3 fishes * 2 / 3 packs of wheat = 2 fishes for 1 pack of wheat\n    \n    fishes_per_pack_wheat = (3 * 2) / 3\n    \n    return int(fishes_per_pack_wheat)\n\nans = solution()"
    ],
    "2f137b3f948e48c59657d647ceea7f64": [
        "def solution():\n    # Number of extra people when 3 people per bench\n    extra_people_3 = 7\n    # Number of extra benches when 7 people per bench\n    extra_benches_7 = 3\n\n    # Total seats when 3 people per bench\n    total_seats_with_3 = 3 * (extra_benches_7 + extra_people_3)\n\n    # Total people is total seats when 3 people per bench minus the extra people\n    total_people = total_seats_with_3 - extra_people_3\n\n    return total_people\n\nans = solution()"
    ],
    "97138569fa3945528991305d98ea59a6": [
        "def solution():\n    # Since Alison has a large number of colored pencils, we will start from 400 and go up to 500.\n    for pencils in range(400, 501):\n        if pencils % 4 == 1 and pencils % 5 == 2 and pencils % 7 == 4:\n            return pencils\n\nans = solution()"
    ],
    "0b6a5290a25f41a7a77aba2e0b7f5322": [
        "def solution():\n    dell = 32\n    ginnie = dell // 2\n    lyn = ginnie // 4\n    \n    return ginnie + lyn\n\nans = solution()"
    ],
    "283f1a2c7c5141a6b01dc50aa7df541c": [
        "def solution():\n    return abs(11 - 21)\n\nans = solution()"
    ],
    "2d05e2c2cd5947adb306583d6211d765": [
        "def solution():\n    total_amount = 21.50\n    ratio_sum = 2 + 3\n    bigger_share = (total_amount / ratio_sum) * 3\n    return bigger_share\n\nans = solution()"
    ],
    "89ba0ac50c0947d59e7ffc2bb24819cb": [
        "def solution():\n    count = 0\n    # Iterate for the first number from 0 to 9 (inclusive)\n    for x1 in range(10):\n        # Iterate for the second number from 0 to 9 (inclusive)\n        for x2 in range(10):\n            # Determine the third number from the remaining amount\n            # Since the total must be 9, x3 is automatically determined\n            # when x1 and x2 are chosen.\n            x3 = 9 - x1 - x2\n            # We do not need to iterate for x3, because it has a fixed \n            # value depending on x1 and x2, and it is always in the range of 0-9.\n            # Increment count if a valid solution is found\n            count += 1\n    return count\n\nans = solution()"
    ],
    "731fa504bf944a3997349eeb999781ca": [
        "def solution():\n    result = (19 + 3) / 2  # Reverse the operations\n    return result\n\nans = solution()"
    ],
    "209f59bf096047a6b42adec3650f0b2f": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if i % 2 != 0:  # Check if the number is odd\n            digits = [int(d) for d in str(i)]\n            if sum(digits) == 5:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "3243a4ef0c884def972ed158010ea3b4": [
        "def solution():\n    total_digits = 1101\n    pages = 0\n    digits_per_page = 1\n\n    while total_digits > digits_per_page * (9 * 10 ** (digits_per_page-1)):\n        total_digits -= digits_per_page * (9 * 10 ** (digits_per_page-1))\n        pages += 9 * 10 ** (digits_per_page-1)\n        digits_per_page += 1\n\n    pages += total_digits // digits_per_page\n\n    return pages\n\nans = solution()"
    ],
    "f5c4e560546f4d75baff7ccc4901ab4f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mass_full, mass_empty = symbols('mass_full mass_empty')\n\n    equation1 = Eq((5/6) * mass_full + mass_empty, 4.6)\n    equation2 = Eq((2/3) * mass_full + mass_empty, 4.45)\n\n    solutions = solve((equation1, equation2), (mass_full, mass_empty))\n\n    # Converting kilograms to grams\n    mass_empty_grams = solutions[mass_empty] * 1000\n\n    return mass_empty_grams\n\nans = solution()"
    ],
    "c0f11f95efb245dcb3a0840d374c7f26": [
        "def solution():\n    ans = 123 * 321\n    return ans\n\nans = solution()"
    ],
    "6cf21aa3ccf54551ba52bdfff6859b56": [
        "def solution():\n    pupils_A = 235\n    pupils_B = 567\n    total_pupils = pupils_A + pupils_B\n    pupils_each_room_after_transfer = total_pupils // 2\n    return pupils_each_room_after_transfer\n\nans = solution()"
    ],
    "e2b7c0b669b44057aa36a3500e3c6605": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 21))\n    return ans\n\nans = solution()"
    ],
    "a97a50db173b4947a7cbbd35408c0568": [
        "def solution():\n    num = 1\n    increment = 2\n    while num < 100:\n        num += increment\n        increment += 2\n        if num >= 100:\n            return prev_num\n        prev_num = num\n\nans = solution()"
    ],
    "ae03ca6fe3fa45aebbb01c97d1cb54b7": [
        "def solution():\n    adam_ben = 102\n    ben_carl = 97\n    adam_carl = 93\n\n    # Total weights of Adam, Ben and Carl\n    total_weight_twice = adam_ben + ben_carl + adam_carl\n    # Since each person's weight is added twice, we halve the result\n    total_weight = total_weight_twice / 2\n\n    return total_weight\n\nans = solution()"
    ],
    "403660592ec0470dbd38b7b878ae0a19": [
        "def solution():\n    total_amount = 23\n    book_price = 3.40\n    magazine_price = 1.60\n\n    # Try each possible number of books and check if the remaining amount can be spent on magazines\n    for books in range(total_amount // int(book_price) + 1):\n        if (total_amount - books * book_price) % magazine_price == 0:\n            magazines = (total_amount - books * book_price) // magazine_price\n            return magazines\n\nans = solution()"
    ],
    "e9095a6ced1247bda89ad65c13639eb7": [
        "def solution():\n    ans = 77.5 * 52 / 100 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "3b935033a325415c8ec95174a48b4a4e": [
        "def solution():\n    andy = 149\n    andy_gives = 38\n    sister_initial = andy - andy_gives * 2\n\n    return sister_initial\n\nans = solution()"
    ],
    "0fbbc6b96cb740ebbd61af7fbae24d80": [
        "def solution():\n    n = 50\n    ans = (n * (n + 1)) // 2\n    return ans\n\nans = solution()"
    ],
    "ce60eab1409d4f9baf6240c550f9de18": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ashley, crystal, justin = symbols('ashley crystal justin')\n    \n    equation1 = Eq(crystal, 2 * ashley)\n    equation2 = Eq(justin, 10 * ashley)\n    equation3 = Eq(justin, crystal + 64)\n    \n    solutions = solve((equation1, equation2, equation3), (ashley, crystal, justin))\n    \n    total_pages = sum(solutions.values())\n    \n    return total_pages\n\nans = solution()"
    ],
    "1b7cc025e9e347ce80741fb93834ea0c": [
        "def solution():\n    age_base3 = \"0\"\n    for age in range(1, 100):  # Assuming Mr. Lv is less than 100 years old.\n        if str(age) + \"0\" == str(age)[:-1] + str(int(str(age)[-1])*3):\n            if int(str(age), 10) == int(str(age) + age_base3, 3):\n                return int(str(age), 10)\n\nans = solution()"
    ],
    "9b62350128b847c5b5201460ac1d06f0": [
        "def solution():\n    ans = ((5/8) + (1/17)) * 8 + (9/17)\n    return ans\n\nans = solution()"
    ],
    "0cc063c19a444034a295d8438baf0c4b": [
        "def solution():\n    from math import factorial\n    # There are 7 people and 7 seats (since one seat will always be empty)\n    # to arrange in a circle, we consider one person fixed and arrange the remaining\n    num_people = 7\n    # (n-1)! arrangements for n people in a circle\n    arrangements = factorial(num_people - 1)\n    return arrangements\n\nans = solution()"
    ],
    "6e8c76be7aa54ee7b128dba952c8fee0": [
        "def solution():\n    # Given that 7007 is the product of the two 2-digit numbers\n    # Find the prime factors of 7007\n    from sympy import factorint\n    factors = factorint(7007)\n    primes = list(factors.keys())\n    \n    # Create a list of tuples, where each tuple is a pair of 2-digit multiples of 7\n    # that multiply to give 7007\n    possible_pairs = [(primes[i] * pow(primes_j, factors[primes_j]), primes[j] * pow(primes_i, factors[primes_i]))\n                      for i, primes_i in enumerate(primes)\n                      for j, primes_j in enumerate(primes) if i < j]\n    \n    # Check for the pairs that are both 2-digit numbers and return their sum\n    for pair in possible_pairs:\n        if all(10 <= num < 100 for num in pair):\n            return sum(pair)\n\nans = solution()"
    ],
    "507deaa25b1c45fcad9434c45d9ba929": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10):\n        for x2 in range(1, 10-x1):\n            x3 = 10 - x1 - x2\n            if x3 > 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "d156836fbd9444f5a5ba15bda04a829e": [
        "from sympy import isprime\n\ndef solution():\n    for i in range(2, 55):\n        if isprime(i) and isprime(55 - i):\n            return i * (55 - i)\n\nans = solution()"
    ],
    "250872667abf4b0b871368e870726b7f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    orchids, tulips, roses = symbols('orchids tulips roses')\n\n    # Ratio equation for orchids and tulips\n    ratio_eq = Eq(orchids / tulips, 3 / 5)\n\n    # Total flowers equation before selling\n    total_eq = Eq(orchids + tulips + roses, 3616)\n\n    # Equation after selling the flowers\n    sold_eq = Eq(0.6 * orchids + 4/5 * tulips + 0.75 * roses, 2644)\n\n    # Solve the equations\n    solutions = solve((ratio_eq, total_eq, sold_eq), (orchids, tulips, roses))\n\n    return solutions[orchids]\n\nans = solution()"
    ],
    "6d336ec6da534a848cc3b89b64fee021": [
        "def solution():\n    ans = 379 * 0.00038 + 159 * 0.00621 + 3.79 * 0.121\n    return ans\n\nans = solution()"
    ],
    "1a9174d419fc4350b792c473f6c385d3": [
        "def solution():\n    cookie_price = 9\n    # 3 pieces of cheesecake = 5 cookies\n    cheesecake_price = (5 * cookie_price) / 3\n    # 3 pieces of chocolate cake = 2 pieces of cheesecake\n    chocolate_cake_price = (2 * cheesecake_price) / 3\n    return chocolate_cake_price\n\nans = solution()"
    ],
    "9b198ae160ae44c2a23ed12656fc56ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    basketball, volleyball = symbols('basketball volleyball')\n\n    equation1 = Eq(2 * basketball + 3 * volleyball, 195)\n    equation2 = Eq(4 * basketball + 5 * volleyball, 355)\n\n    solutions = solve((equation1, equation2), (basketball, volleyball))\n\n    return solutions[volleyball]\n\nans = solution()"
    ],
    "ab73159fcaf54202a082d7e06f5b5b05": [
        "def solution():\n    for A in range(10):\n        for M in range(10):\n            for C in range(10):\n                if A != M and M != C and A != C and A != 0 and M != 0 and C != 1 and C != 9:\n                    number = int(f\"20{A}{M}C19\")\n                    if number % 9 == 0 and len(set(str(number))) == 7:\n                        return A + M + C\n\nans = solution()"
    ],
    "0ee15c78437e4441b6fab59b505f4f07": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(C + B, 18)\n    equation2 = Eq(B, A + A + A)\n    equation3 = Eq(C + A, 10)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "16a3dc8e16654eba8f42e5628ae6b0d7": [
        "def solution():\n    total_candy = 36\n    valeria_after = 22\n    mike_after = 6\n\n    # Since both eat the same amount, the difference between their current amounts\n    # will be the same as the difference after eating.\n    difference = valeria_after - mike_after\n\n    # Using the difference and the total number of candies to find how many Valeria has now.\n    valeria_now = (total_candy + difference) // 2\n\n    return valeria_now\n\nans = solution()"
    ],
    "3a0c96637f8f4963be5154dec26041d4": [
        "def solution():\n    days_per_fraction = 3  # days to read 1/4 of the book\n    total_days = days_per_fraction * 4  # total days to read full book (4/4)\n\n    return total_days\n\nans = solution()"
    ],
    "69441d55da344f318ced84a6b17a5d9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    melissa, mother = symbols('melissa mother')\n\n    # When Melissa was 8, her mother was 32\n    equation1 = Eq(mother - melissa, 32 - 8)\n\n    # Melissa's mother is now three times older than Melissa\n    equation2 = Eq(mother, 3 * melissa)\n\n    solutions = solve((equation1, equation2), (melissa, mother))\n\n    return solutions[melissa]\n\nans = solution()"
    ],
    "813e51f849b44a6fa9381c1e0c4e0ab4": [
        "def solution():\n    return 237 * 3\n\nans = solution()"
    ],
    "21362a16887e4938b66f90a3b86538ec": [
        "def solution():\n    return 42 // (2 * 7)\n\nans = solution()"
    ],
    "475ca97d0299476480ca43202424b241": [
        "def solution():\n    from fractions import Fraction\n\n    recurring_decimal = Fraction(473, 99)  # 4.7373...\n    decimal = 4.73\n    larger_recurring_decimal = 4.77  # 4.7700...\n    another_decimal = 4.737\n\n    smallest_one = min(recurring_decimal, decimal, larger_recurring_decimal, another_decimal)\n\n    return float(smallest_one)\n\nans = solution()"
    ],
    "d60380a226c84add9f82f10ca29d840d": [
        "def solution():\n    remaining_plants = 4  # After Joel's removal\n\n    # Reverse Joel's removal\n    joel_removed = (remaining_plants + 2) * 2\n    remaining_plants += joel_removed\n\n    # Reverse Valerie's removal\n    valerie_removed = (remaining_plants + 3) * 2\n    remaining_plants += valerie_removed\n\n    # Reverse Ethan's removal\n    ethan_removed = (remaining_plants + 1) * 2\n    total_plants = remaining_plants + ethan_removed\n\n    return total_plants\n\nans = solution()"
    ],
    "9cf67e307d96451eae198324e79cdb76": [
        "def solution():\n    train_length = 128\n    tunnel_length = 544\n    speed = 52\n\n    # total distance the train needs to cover to completely pass the tunnel\n    total_distance = train_length + tunnel_length\n\n    # time = distance / speed\n    time = total_distance / speed\n\n    return time\n\nans = solution()"
    ],
    "0451666ed3a54fca8dd2a6d9767c0524": [
        "def solution():\n    # Given recurring cycle for 6/7 after the decimal point is 857142\n    recurring_cycle = '857142'\n    \n    # Length of the recurring cycle\n    cycle_length = len(recurring_cycle)\n    \n    # Number of complete cycles within the first 58 digits\n    complete_cycles = 58 // cycle_length\n    \n    # Number of digits in the incomplete cycle\n    remaining_digits = 58 % cycle_length\n    \n    # Sum of digits in a complete cycle\n    cycle_sum = sum(int(digit) for digit in recurring_cycle)\n    \n    # Calculate the sum of all complete cycles\n    total_sum = cycle_sum * complete_cycles\n    \n    # Add the sum of the digits in the incomplete cycle\n    total_sum += sum(int(recurring_cycle[i]) for i in range(remaining_digits))\n    \n    return total_sum\n\nans = solution()"
    ],
    "67336d9158cc4e12887f9dc78bf7e50d": [
        "def solution():\n    final_eggs = 18\n    remaining_eggs = 2 * (final_eggs + 7)\n    total_eggs = remaining_eggs + 16 + (remaining_eggs // 2)\n\n    return total_eggs\n\nans = solution()"
    ],
    "4043641cbe8e48579335b4edc83806ab": [
        "def solution():\n    ans = 33 + 29 + 34 + 28 + 27 + 30\n    return ans\n\nans = solution()"
    ],
    "8d86bdb1a0a24c279d87fda22507fcf9": [
        "def solution():\n    increased_price = 21\n    increase_percentage = 0.40\n    original_price = increased_price / (1 + increase_percentage)\n    return original_price\n\nans = solution()"
    ],
    "634f64a64d30499f9f880472d43a7055": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    p1, p6 = symbols('p1 p6')\n    # Each P6 student carried 2 buckets, so p6 students carried 2 * p6 buckets\n    # Two P1 students carried 1 bucket together, so p1 students carried p1 / 2 buckets\n    # There was a total of 180 buckets of water\n    equation1 = Eq(2 * p6 + p1 / 2, 180)\n    \n    # There is a total of 120 students consisting of P1 and P6\n    equation2 = Eq(p1 + p6, 120)\n    \n    solutions = solve((equation1, equation2), (p1, p6))\n    \n    return solutions[p1]\n\nans = solution()"
    ],
    "cb8c28b4153d467c8903c0e71a0a22d4": [
        "def solution():\n    # There are 2 possible outcomes for each coin toss: heads (H) or tails (T)\n    outcomes_per_toss = 2\n    \n    # Since the coin is tossed 2 times, the number of possible outcomes is the product\n    # of the number of outcomes for each individual toss\n    total_outcomes = outcomes_per_toss ** 2\n    \n    return total_outcomes\n\nans = solution()"
    ],
    "1234c16c22404bc6a76790494da1a78e": [
        "def solution():\n    num_teams = 5\n    num_matches = num_teams * (num_teams - 1) // 2\n    return num_matches\n\nans = solution()"
    ],
    "5da1575e00d448078124140f108f6b1b": [
        "from sympy import symbols, solve\n\ndef solution():\n    # Let the cube have side length x and PA be the variable a.\n    a, x = symbols('a x', real=True, positive=True)\n    \n    # From the Pythagorean theorem, we have the following equations:\n    # PB² = x² + (x-a)² + x²\n    # PC² = x² + x² + (x-a)²\n    # PD² = (x-a)² + x² + x²\n    # PG² = x²/2 + x²/2 + (x-a)²\n    # And we have the given values.\n    equations = [\n        60**2 * 10 - (x**2 + (x-a)**2 + x**2),\n        60**2 * 5 - (x**2 + x**2 + (x-a)**2),\n        120**2 * 2 - ((x-a)**2 + x**2 + x**2),\n        36**2 * 7 - (x**2/2 + x**2/2 + (x-a)**2)\n    ]\n    \n    # Now we solve the system of equations for a and x.\n    solution = solve(equations, (a, x))\n    \n    # We take the positive solutions for a and x.\n    a_value = [sol[a] for sol in solution if sol[a] > 0 and sol[x] > 0][0]\n    \n    return a_value\n\nans = solution()"
    ],
    "53f82e136dfc4d0697c253feec246f5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    basketball, volleyball = symbols('basketball volleyball')\n\n    equation1 = Eq(2 * basketball + 3 * volleyball, 195)\n    equation2 = Eq(4 * basketball + 5 * volleyball, 355)\n\n    solutions = solve((equation1, equation2), (basketball, volleyball))\n\n    return solutions[volleyball]\n\nans = solution()"
    ],
    "692b53f35cbd484ba885d86fdf51f30f": [
        "def solution():\n    return 7 / (1/3)\n\nans = solution()"
    ],
    "726917a5243142e79bae60dd034dcbc5": [
        "def solution():\n    from math import gcd\n    \n    pencils = 55\n    pens = 143\n    greatest_common_divisor = gcd(pencils, pens)\n    \n    return greatest_common_divisor\n\nans = solution()"
    ],
    "363d10eef0ea4189a47ee75921956b9a": [
        "def solution():\n    # Johnny's calculation starts by multiplying the quotient 9 by the remainder 2, which is incorrect.\n    # The correct approach is to multiply the quotient by the divisor and then add the remainder.\n    \n    quotient = 9\n    remainder = 2\n    divisor = 4\n\n    # Correct calculation:\n    correct_result = (quotient * divisor) + remainder\n\n    return correct_result\n\nans = solution()"
    ],
    "95169f59fb1e45c8aaf5a970e8290d37": [
        "def solution():\n    ways = []\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            if die1 + die2 == 8:\n                ways.append((die1, die2))\n    ans = len(ways)\n    return ans, ways\n\nans, ways = solution()"
    ],
    "55734b338e6d4ee0aa4775fc46af08dd": [
        "def solution():\n    apples_per_box = 14 / 4\n    boxes_needed = 66.5 / apples_per_box\n    return int(boxes_needed)\n\nans = solution()"
    ],
    "4ba6c7d9ff624ec59381cbce9385be36": [
        "def solution():\n    # Owen the fisher traded 3 fish for 1 rabbit, so the ratio is 3 fish : 1 rabbit\n    fish_to_rabbit_ratio = 3 / 1\n\n    # Oscar traded 2 rabbits for 3 packs of wheat, so the ratio is 2 rabbits : 3 packs of wheat\n    rabbit_to_wheat_ratio = 2 / 3\n\n    # To find out how many fish Owen should give Dennis for one pack of wheat, we need to find out\n    # the ratio of fish to wheat. This can be done by multiplying the two ratios we have.\n\n    # Since the rabbit part of the ratio is both in the denominator of the first ratio and the numerator \n    # of the second ratio, these two will cancel each other out.\n    fish_to_wheat_ratio = fish_to_rabbit_ratio * (1 / rabbit_to_wheat_ratio)\n\n    # Now we have a direct proportion of fish to packs of wheat (per 1 pack of wheat)\n    fish_per_pack_wheat = fish_to_wheat_ratio\n\n    return fish_per_pack_wheat\n\nans = solution()"
    ],
    "e6f7522a2ae041debd897088b6275751": [
        "def solution():\n    age_difference = 48 - 8\n    eddie_future_age = 18\n    mike_future_age = eddie_future_age + age_difference\n    return mike_future_age\n\nans = solution()"
    ],
    "67e5f1006ba14b7ba20f1a63cf93e70c": [
        "from sympy import isprime\nfrom itertools import permutations\n\ndef solution():\n    digits = '279'\n    unique_primes = set()\n\n    for i in range(1, len(digits) + 1):\n        for combo in permutations(digits, i):\n            num = int(''.join(combo))\n            if num < 100 and isprime(num):\n                unique_primes.add(num)\n\n    return len(unique_primes)\n\nans = solution()"
    ],
    "c24f600dece04c93bb09e2b54f50d1af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    necklace, bracelet, ring = symbols('necklace bracelet ring')\n    equation1 = Eq(necklace, 2 * bracelet)\n    equation2 = Eq(ring, bracelet - 10)\n    equation3 = Eq(necklace + bracelet + ring, 350)\n\n    solutions = solve((equation1, equation2, equation3), (necklace, bracelet, ring))\n\n    return solutions[bracelet]\n\nans = solution()"
    ],
    "7cef41fa4f8244ccbd2620d682e9d2d7": [
        "def solution():\n    # Let the total number of students initially be t\n    # 40% of the students were boys, so number of boys initially = 0.40 * t\n    # After 16 boys left, the number of boys = 0.40 * t - 16\n    # After 16 girls entered, the total number of students = t + 16\n    # Now the boys make up 2/15 of the students\n    # Therefore, (0.40 * t - 16) / (t + 16) = 2/15\n    # Solve the equation to find t\n    from sympy import symbols, Eq, solve\n\n    t = symbols('t')\n    equation = Eq((0.40 * t - 16) / (t + 16), 2/15)\n    total_students_initially = solve(equation, t)[0]\n\n    # Calculate the number of boys and girls in the canteen now\n    boys_now = 0.40 * total_students_initially - 16\n    total_students_now = total_students_initially + 16\n    girls_now = total_students_now - boys_now\n\n    return int(girls_now)\n\nans = solution()"
    ],
    "83d292a05ff04677a8c5ed5ab8c0c835": [
        "def solution():\n    from fractions import Fraction\n\n    # Calculation\n    numerator = (Fraction(10, 3) * 1.9 + 19.5 / Fraction(9, 2))\n    denominator = (Fraction(62, 75) - 0.16)\n    first_fraction = numerator / denominator\n\n    second_numerator = 3.5 + Fraction(14, 3) + Fraction(2, 15)\n    second_denominator = 0.5 * (Fraction(21, 20) + 4.1)\n    second_fraction = second_numerator / second_denominator\n\n    ans = first_fraction / second_fraction\n\n    return float(ans)\n\nans = solution()"
    ],
    "e6b0f44cc53249e1aaf86a515c4628c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, pear = symbols('banana pear')\n\n    # Max's purchase: 1 banana and 2 pears = 94p\n    equation1 = Eq(banana + 2 * pear, 94)\n    # Emily's purchase: 1 banana and 1 pear = 62p\n    equation2 = Eq(banana + pear, 62)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "e55659b67fec48ffadc5d661886b3f84": [
        "def solution():\n    total_students = 200\n    swimming = 0.82 * total_students\n    jogging = 0.54 * total_students\n    neither = 0.16 * total_students\n    \n    both = swimming + jogging - (total_students - neither)\n    \n    return int(both)\n\nans = solution()"
    ],
    "df34fda134ee46a8ac94860f5ae12f9f": [
        "def solution():\n    work_per_day_A = 1 / 15\n    work_per_day_B = 1 / 10\n    work_done_in_4_days = 4 * (work_per_day_A + work_per_day_B)\n    remaining_work = 1 - work_done_in_4_days\n    days_for_B_to_finish = remaining_work / work_per_day_B\n    return days_for_B_to_finish\n\nans = solution()"
    ],
    "2fdb4d6852a34749900c0604b0418b95": [
        "def solution():\n    result = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.65) - (1 + 0.23 + 0.34 + 0.65) * (0.23 + 0.34)\n    return result\n\nans = solution()"
    ],
    "4265848eb5144e06beaccae813bc11b5": [
        "def solution():\n    num_tickets = 16\n    cost_per_ticket = 112\n    total_cost = num_tickets * cost_per_ticket\n    return total_cost\n\nans = solution()"
    ],
    "1b84c5b40beb49b39b7f4106f6ee146a": [
        "def solution():\n    road_length = 150\n    tree_spacing = 10\n\n    num_trees = (road_length // tree_spacing) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "3997afa5717b4b90979f5a94f367106a": [
        "def solution():\n    from math import gcd\n    return gcd(16, 28)\n\nans = solution()"
    ],
    "a36a520966aa451d95a300b07e198fe4": [
        "def solution():\n    # Linda's rate per minute\n    linda_rate = 1 / 5\n    # Cici's rate per minute\n    cici_rate = 1 / 6\n    # Combined rate per minute\n    combined_rate = linda_rate + cici_rate\n    # Total time in minutes\n    total_time_minutes = 2 * 60\n    # Total problems solved\n    total_problems = combined_rate * total_time_minutes\n    return int(total_problems)\n\nans = solution()"
    ],
    "073d74f386764ceba3da553d97018f98": [
        "def solution():\n    amy = 37\n    john = 15\n    # Let's call the number of apples Amy has to give to John \"x\".\n    # After giving away x apples, Amy will have (amy - x) apples.\n    # John will have (john + x) apples.\n    # Amy needs to have 4 more apples than John, so we set up the equation:\n    # (amy - x) = (john + x) + 4\n    # Now we solve for x.\n    x = (amy - john - 4) / 2\n    return int(x)\n\nans = solution()"
    ],
    "2770667d43574021b710d6ea74fb5929": [
        "def solution():\n    # The number N can be expressed as abc0, ab0c, a0bc, or 0abc, where a, b, and c are digits and N is a four-digit number.\n    # Accordingly, M can be expressed as abc, ab0 or a0b or 0ab (if zero is leading, it's just ab), etc.\n    # For each of these cases, we calculate the difference and find where it equals 2021.\n    \n    for a in range(1, 10):  # The first digit cannot be zero for a four-digit number\n        for b in range(10):  # Loop through all possibilities for b\n            for c in range(10):  # Ditto for c\n                for d in range(10):  # And for the digit being removed\n                    # Consider abc0 - abc\n                    if ((a*1000 + b*100 + c*10) - (a*100 + b*10 + c)) == 2021:\n                        return (a*1000 + b*100 + c*10 + d)\n                    # Consider ab0c - abc\n                    elif ((a*1000 + b*100 + d) - (a*100 + b*10 + c)) == 2021:\n                        return (a*1000 + b*100 + c*10 + d)\n                    # Consider a0bc - abc\n                    elif ((a*1000 + c*100 + d) - (a*100 + b*10 + c)) == 2021:\n                        return (a*1000 + b*100 + c*10 + d)\n                    # Consider 0abc - abc (but here d must be zero because we are omitting the first digit)\n                    elif a != 0 and ((b*1000 + c*100 + d*10) - (a*100 + b*10 + c)) == 2021:\n                        return (a*1000 + b*100 + c*10 + d)\n\nans = solution()"
    ],
    "c1d55208f4314facb8dcb7a0c1f51107": [
        "def solution():\n    alice_stickers = 245\n    janet_stickers = alice_stickers + 125\n    total_stickers = alice_stickers + janet_stickers\n    return total_stickers\n\nans = solution()"
    ],
    "a17b0ae95a20483eb0160f780a8e055e": [
        "def solution():\n    odd_number = 15\n    return odd_number\n\nans = solution()"
    ],
    "6325f3cd4acc410e9a72d43acf9b5e4a": [
        "def solution():\n    late_time = 18\n    bus_interval = 45\n\n    wait_time = bus_interval - (late_time % bus_interval)\n\n    return wait_time\n\nans = solution()"
    ],
    "4de96797dadc44f48c4b27b71845270c": [
        "def solution():\n    return 273 // 7\n\nans = solution()"
    ],
    "75af17ec850b4308b6ad72a935dd048e": [
        "def solution():\n    numbers_with_missing = [12, 25, 27, 6, 16, 14, 13, 7, 21]\n    total_for_mean = 37 * 10\n    missing_number = total_for_mean - sum(numbers_with_missing)\n    return missing_number\n\nans = solution()"
    ],
    "0961229b4dfe45bdaf586d80da5a6a93": [
        "def solution():\n    # Total amount of grass the pasture has\n    grass_total_goats = 14 * 15\n    grass_total_rabbits = 70 * 8\n\n    # A goat eats as much grass as 4 rabbits\n    goat_eats_like_rabbits = 4\n\n    # Grass needed for one day for goats and rabbits\n    grass_per_day_goats = 14\n    grass_per_day_rabbits = grass_total_goats / (goat_eats_like_rabbits * grass_per_day_goats)\n\n    # Total grass needed per day for 17 goats and 20 rabbits\n    total_grass_needed_per_day = 17 + (20/goat_eats_like_rabbits)\n\n    # Number of days the pasture can feed 17 goats and 20 rabbits\n    days_can_feed = grass_total_goats / total_grass_needed_per_day\n\n    return days_can_feed\n\nans = solution()"
    ],
    "3c6d41e0ffa34ee694abb711aabe5956": [
        "def solution():\n    cost_per_person = 216\n    number_of_people = 67\n\n    total_cost = cost_per_person * number_of_people\n\n    return total_cost\n\nans = solution()"
    ],
    "d7b4feae676a418c84a780e950e5d4ea": [
        "def solution():\n    total_cost_for_nine = 38.79\n    cost_per_book = total_cost_for_nine / 9\n    total_cost_for_seven = cost_per_book * 7\n    return total_cost_for_seven\n\nans = solution()"
    ],
    "8a7b6a6417544e3db14b40a2435e0338": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y, z = symbols('x y z')\n    \n    equation1 = Eq(x, y + 83)\n    equation2 = Eq(z, x + 24)\n    equation3 = Eq(x + y + z, 283)\n    \n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n    \n    return solutions[y]\n\nans = solution()"
    ],
    "24686bdbc8614ff88d9dba695c5c1775": [
        "def solution():\n    tens = 10\n    tenths = 35\n    hundredths = 8\n\n    decimal_value = tens * 10 + tenths * (1/10) + hundredths * (1/100)\n\n    return decimal_value\n\nans = solution()"
    ],
    "5b5d9ce674b5461e84d5e7eef6e47575": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for Chan and Toh's money\n    chan, toh = symbols('chan toh')\n\n    # Create the equations based on the problem description\n    equation1 = Eq(1/4 * chan - 1/3 * toh, 33)\n    equation2 = Eq(chan + toh, 1000)\n\n    # Solve the equations to find the amounts for Chan and Toh\n    solutions = solve((equation1, equation2), (chan, toh))\n\n    return solutions[toh]\n\nans = solution()"
    ],
    "d36c559112ec475d90ba54b5fb925432": [
        "def solution():\n    total_height = 45\n    climbed_height = 0\n    day = 0\n    \n    while climbed_height < total_height:\n        day += 1\n        climbed_height += 10  # the snail climbs 10 meters\n        if climbed_height >= total_height:\n            break\n        climbed_height -= day  # the snail slides down\n\n    return day\n\nans = solution()"
    ],
    "605b7166959c4309ba377c841f125c8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x + 3*(19 - x), 65)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0bed7f7889ec46ae8c8a1d9b3ffad093": [
        "def solution():\n    # Define the triangle function based on the provided definition\n    def triangle(a, b):\n        result = 0\n        for i in range(b):\n            result += int(str(a) * (i + 1))\n        return result\n    \n    # Calculate 4 triangle 3\n    ans = triangle(4, 3)\n    return ans\n\nans = solution()"
    ],
    "274626bb25f24193b540a837c430a2c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sandra, tasha, riley = symbols('sandra tasha riley')\n\n    equation1 = Eq(sandra, tasha / 3)\n    equation2 = Eq(riley, 3 * sandra / 5)\n    equation3 = Eq(tasha, riley + 60)\n\n    solutions = solve((equation1, equation2, equation3), (sandra, tasha, riley))\n\n    return solutions[riley]\n\nans = solution()"
    ],
    "6e66da49abf64b81a126cd036c206db2": [
        "def solution():\n    january_savings = 13\n    february_savings = 18\n    march_savings = 5\n    total_savings = january_savings + february_savings + march_savings\n    mean_savings = total_savings / 3\n    return mean_savings\n\nans = solution()"
    ],
    "af0e6eebf4764c91a8984e3324ae0c84": [
        "def solution():\n    return (9**2) - 7\n\nans = solution()"
    ],
    "aa65bb86d41443cba1628a0551144ba9": [
        "from itertools import permutations\n\ndef solution():\n    angel_permutations = set(permutations(\"0141705021\"))\n    devil = \"4005220912\"\n    if tuple(devil) in angel_permutations:\n        return True\n    else:\n        devil_permutation = sorted(devil)\n        return ''.join(devil_permutation)\n\nans = solution()"
    ],
    "40eb290a88af4052901031e1476213be": [
        "def solution():\n    count = 0\n    for i in range(2017, 2036):\n        for j in range(i + 1, 2036):\n            for k in range(j + 1, 2036):\n                if (i + j + k) % 4 == 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "857ab67cbb1247aea950633a74d6701b": [
        "def solution():\n    # Using the stars and bars theorem (n stars, k-1 bars)\n    # since we are summing to 6, we have 6 stars. \n    # Each number in the sum must at least be 1, so we start with k = 6 and move backwards,\n    # since we know we need at least two positive numbers.\n    count = 0\n    for k in range(6, 1, -1):\n        bars = k - 1\n        stars = 6 - k\n        num_ways = math.comb(stars + bars, bars)\n        count += num_ways\n        \n    return count\n\nimport math\nans = solution()"
    ],
    "3df1ffb0a3aa4d07b3bd3acc1b128b78": [
        "from fractions import Fraction\n\ndef solution():\n    # Convert recurring decimals to fractions\n    term1 = Fraction(1, 9)  # 0.0̅1\n    term2 = Fraction(12, 90)  # 0.1̅2\n    term3 = Fraction(23, 90)  # 0.2̅3\n    term4 = Fraction(34, 90)  # 0.3̅4\n    term5 = Fraction(45, 90)  # 0.4̅5\n    term6 = Fraction(54, 90)  # 0.5̅4\n    term7 = Fraction(78, 90)  # 0.7̅8\n\n    # Adding all the terms\n    sum_of_terms = term1 + term2 + term3 + term4 + term5 + term6 + term7\n\n    # Convert the sum to decimal\n    ans = float(sum_of_terms)\n    \n    return ans\n\nans = solution()"
    ],
    "708686c18792498ca280531b38305bd6": [
        "def solution():\n    from sympy import symbols, solve, sqrt\n    \n    x, a = symbols('x a', positive=True)\n    equation = sqrt(x) - (sqrt(a) - 2/sqrt(a))\n    \n    # Solve the equation for x\n    sol = solve(equation, x)\n    # Extract x value from the solution\n    x_value = sol[0]\n\n    # Calculate the required square root\n    sqrt_x_sq_plus_8x = sqrt(x_value**2 + 8 * x_value)\n    \n    # Simplify the expression and return the result\n    simplified_sqrt = sqrt_x_sq_plus_8x.simplify()\n\n    return simplified_sqrt\n\nans = solution()"
    ],
    "0f13e96f9aaa4d28997b667b9c11593b": [
        "def solution():\n    total_sheep = 23\n    total_pens = 11\n\n    # Applying Pigeonhole Principle\n    min_sheep_in_max_pen = (total_sheep + total_pens - 1) // total_pens\n\n    return min_sheep_in_max_pen\n\nans = solution()"
    ],
    "a30b46882b6149eb828e015d814c6a7b": [
        "def solution():\n    for i in range(300, 401):\n        if i % 3 == 2 and i % 4 == 2 and i % 5 == 2 and i % 7 == 5:\n            return i\n\nans = solution()"
    ],
    "b1ec96325b0e48bbb89d9c37f1f20bfa": [
        "def solution():\n    boys_count = 18\n    girls_count = 27\n    total_count = boys_count + girls_count\n    \n    mean_age_boys = 16.2\n    mean_age_girls = 16.7\n\n    total_age_boys = mean_age_boys * boys_count\n    total_age_girls = mean_age_girls * girls_count\n\n    total_age_all = total_age_boys + total_age_girls\n\n    mean_age_all = total_age_all / total_count\n    \n    return mean_age_all\n\nans = solution()"
    ],
    "a8a21f84ab5f44019c3f7690709b84e5": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 6), (8, 13)]\n    result = solve_congruence(*congruences)\n\n    if 200 <= result[0] < 300:\n        return result[0]\n    else:\n        multiple = (300 - result[0]) // result[1]\n        return result[0] + multiple * result[1]\n\nans = solution()"
    ],
    "ca038012d8394203b0afe2e0b7b9c6ab": [
        "def solution():\n    from math import lcm\n    return lcm(6, 12, 16)\n\nans = solution()"
    ],
    "e4135525c98945d49a3e9731dcae7f35": [
        "def solution():\n    # To be sure that Sara gets 5 balls of the same color, we consider the worst case scenario\n    # Maximum number of balls without getting 5 of the same color:\n    # 4 green + 4 yellow + 2 red = 10 balls.\n    # The next ball she draws, no matter what color it is, will give her 5 of the same color.\n    return 10 + 1  # The next ball drawn will guarantee a fifth ball of the same color.\n\nans = solution()"
    ],
    "1158d90d7f994c008185739c0f7b4c3e": [
        "def solution():\n    original_password = \"0141705021\"\n    original_word = \"Angel\"\n    input_password = \"4005220912\"\n    input_word = \"Devil\"\n\n    # A mapping from the original word 'Angel' to its numeric representation\n    # This gives a dictionary where each letter corresponds to its number\n    mapping = {letter: num for letter, num in zip(original_word, original_password)}\n\n    # Using the mapping, we try to map the input word 'Devil' to its numeric representation\n    # If a letter does not have a mapping (i.e., not in the original word 'Angel'),\n    # the password cannot be correct\n    correct_password = ''\n    for letter in input_word:\n        if letter in mapping:\n            correct_password += mapping[letter]\n        else:\n            # If a letter is not found, the password cannot be correct\n            return False, original_password  # Returning the correct original password\n\n    # If the constructed password matches the input, then it's the correct password\n    if correct_password == input_password:\n        return True, None\n    else:\n        return False, correct_password\n\nans = solution()"
    ],
    "727dbcf473414fbc9939bfee97cb4aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n\n    # Total mass of 3 tables is equal to the total mass of 4 chairs\n    equation1 = Eq(3 * table, 4 * chair)\n    \n    # A table is 2kg heavier than a chair\n    equation2 = Eq(table, chair + 2)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "9da771602ee246a181dd1962904ef124": [
        "def solution():\n    term_index = 10\n    last_term_value = 31\n    term_difference = 3\n\n    first_term_value = last_term_value - (term_index - 1) * term_difference\n    return first_term_value\n\nans = solution()"
    ],
    "31eaf65804d54a3b8c6e51af4e58623c": [
        "def solution():\n    a, b = divmod(89, 10)\n    c, d = divmod(75, 10)\n    return (a * b) + (c * d)\n\nans = solution()"
    ],
    "3f49f548bea24803a2293b65735a1967": [
        "def solution():\n    return 5928 * 13\n\nans = solution()"
    ],
    "94e0c1d7e2e64c55bf498ab0da425bf2": [
        "def solution():\n    temperatures = [-11, 17, 8, -3, -6]\n    ans = max(temperatures) - min(temperatures)\n    return ans\n\nans = solution()"
    ],
    "b70b59bf48324644a782454f2b7ea13d": [
        "def solution():\n    total_distance = 30\n    sam_speed = 1  # meters per second\n    ben_speed = 0.6  # meters per second\n    swimming_time = 10 * 60  # 10 minutes to seconds\n    \n    # Combined speed when they are swimming towards each other\n    combined_speed = sam_speed + ben_speed\n    \n    # Total distance they would cover together in one second\n    total_covered_in_a_second = combined_speed\n    \n    # Number of seconds for them to meet each time\n    seconds_per_meeting = total_distance / total_covered_in_a_second\n    \n    # Number of meetings in the given swimming time\n    number_of_meetings = swimming_time / seconds_per_meeting\n    \n    return int(number_of_meetings)\n\nans = solution()"
    ],
    "4296e2f3a8b241e3a8477feb371d9f40": [
        "def solution():\n    average_height_bob_cindy = 120\n    height_doris = 126\n    total_height_bob_cindy = average_height_bob_cindy * 2\n\n    total_height_three_children = total_height_bob_cindy + height_doris\n    average_height_three_children = total_height_three_children / 3\n\n    return average_height_three_children\n\nans = solution()"
    ],
    "b789c34055e44469a46db4918988572a": [
        "def solution():\n    katherine = 24\n    tom = 2 * katherine\n    gareth = 4 * tom\n    return gareth\n\nans = solution()"
    ],
    "0d85bf8110034401aca552b3cdbd023f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    destin, nephew = symbols('destin nephew')\n    # In 6 years, Destin is twice his nephew's age\n    equation1 = Eq(destin + 6, 2 * (nephew + 6))\n    # 6 years ago, the ratio of Destin's age to his nephew's age was 5:1\n    equation2 = Eq((destin - 6) / (nephew - 6), 5)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (destin, nephew))\n    \n    # Calculate the sum of their ages in 10 years' time\n    ages_sum_in_10_years = solutions[destin] + solutions[nephew] + 2 * 10\n\n    return ages_sum_in_10_years\n\nans = solution()"
    ],
    "4052d15f214249809613fa6de2242cc9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys = symbols('boys')\n    girls = 40 - boys\n    average_total = 35\n    average_boys = 20\n    average_girls = 60\n    total_pencils = average_total * 40\n    \n    equation = Eq(average_boys * boys + average_girls * girls, total_pencils)\n    \n    solution = solve(equation, boys)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "e86bfb04d39a44d2a53da86f38d8841d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of pies each had at first\n    x = symbols('x')\n\n    # Equation representing the scenario\n    equation = Eq((x + 12), 2 * (x - 4))\n\n    # Solve for x\n    initial_pies = solve(equation, x)\n\n    return initial_pies[0]\n\nans = solution()"
    ],
    "24bf5eb8b2e54ae8a85ca04786fa6736": [
        "def solution():\n    ans = 9.97 + 9.98 + 9.99\n    return ans\n\nans = solution()"
    ],
    "3a046196146143df8c11a228fe1ea8e9": [
        "from itertools import permutations\n\ndef solution():\n    digits = '135'\n    all_numbers = [''.join(p) for p in permutations(digits)]\n    return len(all_numbers)\n\nans = solution()"
    ],
    "aa5a70d5b23d4d83a688ce6c80ff9fbb": [
        "def solution():\n    from datetime import datetime\n\n    departure_time = datetime.strptime('6:35 am', '%I:%M %p')\n    arrival_time = datetime.strptime('10:22 am', '%I:%M %p')\n\n    travel_duration = arrival_time - departure_time\n    travel_minutes = travel_duration.total_seconds() / 60\n\n    return int(travel_minutes)\n\nans = solution()"
    ],
    "c8c3777bba9244539cc9e012e79c700e": [
        "def solution():\n    pattern = '34563456'\n    pattern_sum = sum(int(digit) for digit in pattern)\n    pattern_length = len(pattern)\n    \n    full_patterns = 50 // pattern_length\n    remaining_digits = 50 % pattern_length\n\n    total_sum = full_patterns * pattern_sum + sum(int(pattern[i]) for i in range(remaining_digits))\n    \n    return total_sum\n\nans = solution()"
    ],
    "46a38674ac06447aab8309abe41f63ee": [
        "def solution():\n    ans = 3 / (3 / 5) / (5 / 7) / (7 / 9) / (9 / 13) / (13 / 15)\n    return ans\n\nans = solution()"
    ],
    "66bbfb9d35fd4c258976e0e26f366bba": [
        "def solution():\n    total_sweets = 220\n    fraction_first_group = 3/5\n    sweets_first_group = 6\n    fraction_second_group = 1/4\n    sweets_second_group = 4\n    sweets_third_group = 5\n\n    student_first_group = (fraction_first_group * total_sweets) / sweets_first_group\n    remaining_sweets = total_sweets - (student_first_group * sweets_first_group)\n    student_second_group = (fraction_second_group * remaining_sweets) / sweets_second_group\n    remaining_sweets = remaining_sweets - (student_second_group * sweets_second_group)\n    student_third_group = remaining_sweets / sweets_third_group\n\n    total_students = student_first_group + student_second_group + student_third_group\n    return int(total_students)\n\nans = solution()"
    ],
    "531ec5e5d7a54e7eb5aad13441f2d557": [
        "def solution():\n    return 3.88 - 1.111\n\nans = solution()"
    ],
    "02013d24983948fe8e37ccb917ba805e": [
        "def solution():\n    # Let x be the father's current age\n    # Then, when Tom reaches his father's current age (x years), his father will be 70 years old\n\n    tom_age_now = 10\n    \n    # The difference in age between Tom and his father will remain constant.\n    # So, when Tom is x years old, the father will be x + (x - tom_age_now) = 70 years old.\n    # Hence, we get the equation: x + (x - 10) = 70\n\n    # Solve the equation for x\n    x = (70 + tom_age_now) // 2\n\n    return x\n\nans = solution()"
    ],
    "7a453395152a41388d5f4386067df058": [
        "def solution():\n    ans = (3/10) * 54 + 0.3 * 45 + 30 / 100\n    return ans\n\nans = solution()"
    ],
    "2d58f4f006e243febdaf5acbd7d6781f": [
        "def solution():\n    from itertools import combinations\n    from math import prod\n\n    numbers = [6, 12, 35, 175, 245, 300]\n    \n    # Generate all combination pairs for Candy (2 cards) and Candice (3 cards)\n    candy_combinations = list(combinations(numbers, 2))\n    candice_combinations = list(combinations(numbers, 3))\n\n    # Create a dictionary to store the product and associated numbers\n    products = {}\n\n    # Calculate products for Candy's combinations\n    for combo in candy_combinations:\n        product = prod(combo)\n        products[product] = products.get(product, []) + [combo]\n\n    # Compare with Candice's combinations to find the matching product\n    for combo in candice_combinations:\n        product = prod(combo)\n        if product in products:\n            products[product] += [combo]\n\n    # Find all numbers that are part of a matching product\n    picked_numbers = set()\n    for pairs in products.values():\n        for pair in pairs:\n            picked_numbers.update(pair)\n            \n    # Find the number that is not picked\n    not_picked = [number for number in numbers if number not in picked_numbers]\n\n    return not_picked[0]\n\nans = solution()"
    ],
    "b3fa535df8954c9aac674b856db4f258": [
        "def solution():\n    halfway_number = (17 + 35) / 2\n    return halfway_number\n\nans = solution()"
    ],
    "6349c95e066c4ac9a6e978154b7e5cc5": [
        "def solution():\n    # Convert mixed fractions to improper fractions\n    first_fraction = 3 + 1/4\n    second_fraction = 1 + 3/4\n\n    # Calculate the difference and return as a decimal\n    difference = first_fraction - second_fraction\n\n    return difference\n\nans = solution()"
    ],
    "0d471b7547134c0f9e37864e9573cf56": [
        "def solution():\n    def is_composite(n):\n        if n < 4:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return True\n        return False\n    \n    def can_split_into_composites(n):\n        for a in range(4, n - 7, 2):  # start from 4 since it's the smallest composite number\n            for b in range(a + 2, n - 3, 2):  # b should be different and composite\n                c = n - a - b\n                if c > b and is_composite(c):  # ensure c is the largest and composite\n                    return True\n        return False\n\n    # Search for the largest odd number that can't be split into three different composite numbers\n    n = 1000  # Starting point based on Knowledge Point Routes, needs to be an odd number\n    while n > 0:\n        if n % 2 != 0 and not can_split_into_composites(n):\n            return n\n        n -= 1\n\nans = solution()"
    ],
    "b7d81cc61e59452e8e10e55be3614c12": [
        "from math import lcm\n\ndef solution():\n    packet_A = 25  # Packet size for the first type of tablet\n    packet_B = 20  # Packet size for the second type of tablet\n\n    # Calculate the least common multiple of the packet sizes\n    days_until_sync = lcm(packet_A, packet_B)\n\n    # Starting from March 1st, find the date when she starts both packets again\n    start_month = 3\n    start_day = 1\n    year_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]  # Number of days in each month (non-leap year)\n\n    # Calculate the date by adding the number of days until synchronization to 1st March\n    current_month = start_month\n    current_day = start_day\n    while days_until_sync > 0:\n        days_in_current_month = year_days[current_month - 1]\n        if days_until_sync <= (days_in_current_month - current_day):\n            current_day += days_until_sync\n            days_until_sync = 0\n        else:\n            days_until_sync -= (days_in_current_month - current_day + 1)\n            current_day = 1\n            current_month += 1\n    # The result is in current_month and current_day now\n    return f\"{current_day}-{current_month}\"\n\nans = solution()"
    ],
    "3d8d87b5a55b42d89c08579dd89354fb": [
        "def solution():\n    first_term = 3\n    common_difference = 4\n    last_term = 99  # The last number less than 100 with a remainder of 3 when divided by 4\n    num_terms = ((last_term - first_term) // common_difference) + 1\n    sum_of_sequence = num_terms * (first_term + last_term) // 2\n    return sum_of_sequence\n\nans = solution()"
    ],
    "f3c61e8fd40d43f0a6b6887470b4299d": [
        "def solution():\n    count = 0\n    for a in range(1, 12 // 2 + 1):  # Side a ranges from 1 to half the perimeter\n        for b in range(a, 12 // 2 + 1):  # Side b ranges from a to half the perimeter\n            c = 12 - a - b  # The last side is determined by the perimeter\n            if a <= b and b <= c and a + b > c:  # Triangle inequality\n                count += 1\n    return count\n\nans = solution()"
    ],
    "8345ff1d37344640b2384652635b2dd7": [
        "def solution():\n    bill = 45\n    tip_percentage = 0.15\n    tax_percentage = 0.08\n\n    tip = bill * tip_percentage\n    tax = bill * tax_percentage\n\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "6f2e36dcb2704f26b44a0dbfa435da24": [
        "def solution():\n    # Let's denote the number of boys as b and the number of girls as g.\n    # According to the problem, there are thrice as many boys as girls.\n    # So, b = 3g -> equation (1)\n\n    # Each boy received $8 and each girl received $5\n    # Therefore, the total money given out will be 8b + 5g = $580 -> equation (2)\n\n    # Now we need to solve the system of equations.\n    # We can substitute b from equation (1) into equation (2):\n    # 8(3g) + 5g = 580\n    # 24g + 5g = 580\n    # 29g = 580\n    # g = 580 / 29\n    # g = 20\n    # Now we can find b by plugging g into equation (1)\n    # b = 3g\n    # b = 3 * 20\n    # b = 60\n\n    g = 580 / 29\n    b = 3 * g\n    return int(b)\n\nans = solution()"
    ],
    "566472f9b1624140a8d419487a79d50c": [
        "def solution():\n    total_students = 42\n    sports_team = 30\n    art_team = 25\n\n    # By inclusion-exclusion principle:\n    # |A ∪ B| = |A| + |B| - |A ∩ B|\n    # We need to find |A ∩ B| which represents the number of students in both teams\n    both_teams = sports_team + art_team - total_students\n\n    return both_teams\n\nans = solution()"
    ],
    "79ebfd585db2407482e7cf14b77e035d": [
        "def solution():\n    ans = 104 // 4\n    return ans\n\nans = solution()"
    ],
    "014509f53414409198e8302211988bc5": [
        "def solution():\n    initial_strawberries = 86\n    given_away = 29\n    final_strawberries = 100\n\n    strawberries_received = final_strawberries - (initial_strawberries - given_away)\n    \n    return strawberries_received\n\nans = solution()"
    ],
    "13f3cf43be684a8c8f1075a13f8131ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    elder, younger = symbols('elder younger')\n    \n    # Equation for the sum of their current ages\n    equation1 = Eq(elder + younger, 42)\n    \n    # Equation for the other condition given in the problem.\n    # A few years ago, the elder brother's age would be 'younger', and the younger brother's age\n    # was half the current age of the elder brother.\n    # 'elder - younger' represents the difference in their ages, since this will not change over time\n    # The age of the younger brother a few years ago = younger - (elder - younger)\n    # The age of the elder brother a few years ago = elder - (elder - younger)\n    # So the younger brother a few years ago was half the elder's current age: younger - (elder - younger) = elder/2\n    equation2 = Eq(younger - (elder - younger), elder/2)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (elder, younger))\n    \n    # We want the elder brother's current age\n    return solutions[elder]\n\nans = solution()"
    ],
    "63f544191af94265b786a75669858d3b": [
        "def solution():\n    from math import gcd\n\n    students_A = 8\n    students_B = 12\n    students_C = 20\n\n    common_factor_ab = gcd(students_A, students_B)\n    common_factor_abc = gcd(common_factor_ab, students_C)\n\n    return common_factor_abc\n\nans = solution()"
    ],
    "71d8dd44935a4d74ab3f2f038bd63e9b": [
        "def solution():\n    total_students = 30\n    pass_first_exam = 25\n    fail_second_exam = 12\n    pass_second_fail_first = 3\n\n    # Using the Inclusion-Exclusion Principle:\n    # |A ∪ B| = |A| + |B| - |A ∩ B|\n    pass_both_exams = pass_first_exam - pass_second_fail_first\n    pass_only_first_exam = total_students - fail_second_exam - pass_both_exams\n    \n    return pass_only_first_exam\n\nans = solution()"
    ],
    "f7dc723fc9c0444bb72711cfa044db6f": [
        "def solution():\n    # Number of routes from A directly to D\n    direct_AD = 6\n\n    # Number of routes from A to B then to D (A to B to C to D)\n    AB_CD = 7 * 5 * 2\n\n    # Number of routes from A directly to C then to D\n    AC_D = 4 * 2\n\n    # Total number of ways from A to D    \n    total_ways = direct_AD + AB_CD + AC_D\n\n    return total_ways\n\nans = solution()"
    ],
    "934c22a63d3149ffb43b1d24593d0c01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for chocolate cupcakes (c) and cheese cupcakes (ch)\n    c, ch = symbols('c ch')\n\n    # Equations based on the given information\n    equation1 = Eq(c + ch, 255)                           # Total cupcakes\n    equation2 = Eq(c - 0.4 * c, ch - 0.75 * ch)       # Remaining cupcakes are equal\n\n    # Solve the equations for both variables\n    solutions = solve((equation1, equation2), (c, ch))\n\n    # Calculate the number of cupcakes left (either chocolate or cheese)\n    cupcakes_left = c - 0.4 * c\n\n    # Substitute the solution for the number of chocolate cupcakes into the cupcakes left equation\n    return cupcakes_left.subs(c, solutions[c])\n\nans = solution()"
    ],
    "1972b3d726cb4c91b08b5636358089e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pen = symbols('pen')\n    pencil_cost = 2\n    total_cost = 20\n\n    # 2 pens + 3 pencils = £20\n    equation = Eq(2 * pen + 3 * pencil_cost, total_cost)\n    solution = solve(equation, pen)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ac54c8b609c94030b92316d569da1836": [
        "def solution():\n    total_hay = 300  # Total amount of hay in kilograms\n    cattle = 5  # Number of cattle\n    days = 10  # Number of days the hay lasts\n\n    daily_hay_per_cattle = total_hay / (cattle * days)\n\n    return daily_hay_per_cattle\n\nans = solution()"
    ],
    "60783bc25b9749de9150f2006634255c": [
        "from sympy import divisors\n\ndef solution():\n    age_product = 210\n    factors = divisors(age_product)\n    for i in range(len(factors)):\n        for j in range(i, len(factors)):\n            for k in range(j, len(factors)):\n                if factors[i] * factors[j] * factors[k] == age_product and factors[i] < 10 and factors[j] < 10 and factors[k] < 10:\n                    return factors[i]  # Youngest child's age\n\nans = solution()"
    ],
    "ef208d09ffee4f59ad9b66d3ea949934": [
        "def solution():\n    total_avocados = 960\n    per_box = 8\n\n    return total_avocados // per_box\n\nans = solution()"
    ],
    "fb1f2e79dcf341bf81ac3f2db4f131ec": [
        "def solution():\n    total_locusts = 100\n    daily_consumption = 12\n    days_until_none_left = total_locusts // daily_consumption\n    locusts_eaten_last_day = total_locusts - (days_until_none_left * daily_consumption)\n    return locusts_eaten_last_day\n\nans = solution()"
    ],
    "9d5fcd691dcd4877acf240f16e7063cb": [
        "def solution():\n    total_students = 39\n    # Let the number of boys be b and the number of girls be g\n    # We have b + g = total_students and (1/4)*b = (2/5)*g\n    # Solving these two equations will give us the values of b and g\n    \n    # b + g = 39\n    # (1/4)*b = (2/5)*g => 5b = 8g => b = (8/5)*g\n\n    # Substituting the value of b from the second equation in the first one\n    # (8/5)*g + g = 39\n    # Multiplying both sides by 5 to clear the fraction we get 8g + 5g = 195\n    # 13g = 195\n    # g = 195 / 13\n    g = 195 // 13  # Using // for integer division\n\n    # Now we find the number of boys using the first equation\n    # b + g = 39 => b = 39 - g\n    b = total_students - g\n\n    # The number of more boys than girls is simply b - g\n    ans = b - g\n\n    return ans\n\nans = solution()"
    ],
    "34b006c5adeb493dbdbe598de9425edd": [
        "def solution():\n    result = 77.5 * 52 / 100 + 5.2 * 2.25\n    return result\n\nans = solution()"
    ],
    "3ac0f16eac8647b8b591701993aa5623": [
        "def solution():\n    total_seedlings = 296\n    fraction_killed = 3 / 8\n\n    killed = total_seedlings * fraction_killed\n    survived = total_seedlings - killed\n\n    return int(survived)\n\nans = solution()"
    ],
    "70c9f09a81b741faab4149e0ce3c2e08": [
        "def solution():\n    first_term = 2\n    last_term = 240\n    difference = 2\n\n    num_terms = ((last_term - first_term) / difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "79b3d22b017c4dc5bc3455a8f8bca3ed": [
        "def solution():\n    return 12 * 92 + 22 * 82 + 32 * 72\n\nans = solution()"
    ],
    "f11cc314015c4356be0ae68d5c3ced7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    don, ben = symbols('don ben')\n    equation1 = Eq(don / ben, 2/3)\n    equation2 = Eq((don + 10) / (ben - 5), 6/7)\n\n    solutions = solve((equation1, equation2), (don, ben))\n\n    return solutions[don]\n\nans = solution()"
    ],
    "e750a026daa342fc915455072a011aba": [
        "def solution():\n    return 60 * 20\n\nans = solution()"
    ],
    "f8f2a1e9445b4dcda537fd994f74f84b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of $5 and $10 notes\n    num_5_dollar_notes, num_10_dollar_notes = symbols('num_5_dollar_notes num_10_dollar_notes')\n\n    # Total number of notes equation\n    total_notes_eq = Eq(num_5_dollar_notes + num_10_dollar_notes, 116)\n    \n    # After spending the money, he is left with 60% of the $10 notes and 75% of the $5 notes\n    remaining_10_dollar_notes_eq = Eq(num_10_dollar_notes * 0.4, (4/7) * (num_5_dollar_notes * 0.75))\n    \n    # Solve the system of equations\n    solutions = solve((total_notes_eq, remaining_10_dollar_notes_eq), (num_5_dollar_notes, num_10_dollar_notes))\n\n    # Calculate the total amount spent on the bag\n    spent_10_dollar_notes = solutions[num_10_dollar_notes] * 0.6\n    spent_5_dollar_notes = solutions[num_5_dollar_notes] * 0.25\n    \n    cost_of_bag = spent_10_dollar_notes * 10 + spent_5_dollar_notes * 5\n\n    return cost_of_bag\n\nans = solution()"
    ],
    "8f82a9fa21664af9b7af5284e8c4493f": [
        "def solution():\n    ans = round(726 * 8, 1)\n    return ans\n\nans = solution()"
    ],
    "cb610f1994f441c5aa75e99c47dc7c49": [
        "def solution():\n    remainder = 4293 % 25\n    number_to_subtract = remainder if remainder == 0 else 25 - remainder\n    return number_to_subtract\n\nans = solution()"
    ],
    "aca847f6240f4ca38811b767301a74f8": [
        "def solution():\n    amy_toys = 50\n    sally_toys = 26\n    difference = amy_toys - sally_toys\n    toys_to_give = difference // 2\n    return toys_to_give\n\nans = solution()"
    ],
    "4240bfa02e564792b745d971a51cf6aa": [
        "def solution():\n    baby_chickens = 3600\n    hens = (8/9) * baby_chickens\n    roosters = (1/16) * hens\n    return int(roosters)\n\nans = solution()"
    ],
    "f4a02eb509224062b7d4a7b00e982d44": [
        "def solution():\n    # Calculate the sum of positive terms: 2 + 4 + 6 + ... + 2016\n    # This is an arithmetic series with a common difference of 2\n    # To find the number of terms, (last_term - first_term) / difference + 1\n    first_positive = 2\n    last_positive = 2016\n    difference_positive = 2\n    num_terms_positive = (last_positive - first_positive) / difference_positive + 1\n    sum_positive = (num_terms_positive / 2) * (first_positive + last_positive)\n\n    # Now calculate the sum of negative terms: -3 - 5 - 7 - ... - 2015\n    # This is also an arithmetic series with a common difference of 2\n    first_negative = 3\n    last_negative = 2015\n    difference_negative = 2\n    num_terms_negative = (last_negative - first_negative) / difference_negative + 1\n    sum_negative = (num_terms_negative / 2) * (first_negative + last_negative)\n    \n    # The final result is the sum of positive terms minus the sum of negative terms\n    ans = sum_positive - sum_negative\n    return int(ans)\n\nans = solution()"
    ],
    "7716f1cb1ca14992ae86bd9c52735efd": [
        "def solution():\n    # We can use a property of the arithmetic mean and geometric mean which says that\n    # for any set of positive numbers a1, a2, ..., an, the arithmetic mean is always\n    # greater than or equal to the geometric mean. Equality holds when all ai are equal.\n    # AM >= GM  => a+b+c/3 >= (abc)^(1/3)\n    # Since a + b + c = 31, the arithmetic mean (AM) is 31/3.\n    # To maximize the product abc under the constraint a+b+c=31,\n    # we'd like a, b, and c to be as close as possible to their arithmetic mean 31/3.\n    # We therefore take two numbers to be as close as possible to 31/3 and the third\n    # to be whatever is needed to make the sum 31.\n    # a = b = 10 and c = 11 (because 10 + 10 + 11 = 31)\n\n    a = b = int(31 / 3)\n    c = 31 - (a + b)\n    max_product = a * b * c\n\n    return max_product\n\nans = solution()"
    ],
    "45c579ce75cb41d3bab3bcda32699a25": [
        "def solution():\n    cecilia_money = 80\n    kenny_money = cecilia_money / 4\n    total_money = cecilia_money + kenny_money\n    return total_money\n\nans = solution()"
    ],
    "305f09b3cd4e439eb8bd23de400c08f3": [
        "def solution():\n    total = 0\n    for i in range(1, 21):\n        total += (2*i - 1) * (2*i + 1)\n    return total\n\nans = solution()"
    ],
    "e6664d91f4d5422a9967575f83a6dcba": [
        "def solution():\n    road_length = 150\n    tree_interval = 10\n\n    num_trees = (road_length // tree_interval) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "de5bc649b5e64036b73efabb4e608b1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    heather, zach, serena, jason, william = symbols('heather zach serena jason william')\n    equation1 = Eq(zach, 3 * 12.15)\n    equation2 = Eq(serena, zach + 24.50)\n    equation3 = Eq(serena, 5 * jason)\n    equation4 = Eq(jason, william + 1.54)\n    equation5 = Eq(heather, 12.15)\n\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (heather, zach, serena, jason, william))\n\n    return solutions[william]\n\nans = solution()"
    ],
    "90f3a7cdbae348efb794b15c5519e1e1": [
        "def solution():\n    cups_per_gallon = 6\n    order_cups = 30\n    gallons_needed = order_cups / cups_per_gallon\n    return gallons_needed\n\nans = solution()"
    ],
    "c49e92d63d14477a969fe081cfe53304": [
        "def solution():\n    from math import factorial\n    \n    # Calculate the arrangements for the triplet sisters as a single unit plus the two remaining girls and one boy\n    # So, we have 1 (triplets unit) + 2 (girls) + 1 (boy) = 4 units to arrange\n    four_units = factorial(4)\n    \n    # Now arrange the 3 sisters within their unit. They can be in 3! ways.\n    triplet_arrangements = factorial(3)\n    \n    # Calculate the arrangements for the two boys not to be together.\n    # We first find total arrangements of 5 individuals (3 girls as 1 unit, 2 boys)\n    total_arrangements = factorial(5)\n    \n    # Then, we subtract the arrangements where the boys are together, treating them as a unit.\n    # Those arrangements are for 4 units (boys as 1 unit + 3 girls as another + 1 other boy) then multiplied by 2 (for the arrangements of the boys within their unit)\n    boys_together = factorial(4) * factorial(2)\n    \n    # Subtracting the arrangements where boys are together from the total gives us the arrangements where they're not together\n    boys_not_together = total_arrangements - boys_together\n    \n    # Multiplying the different arrangement types gives us the total number of ways.\n    ans = four_units * triplet_arrangements * boys_not_together\n    \n    return ans\n\nans = solution()"
    ],
    "7d02cb0ab8354e44968e796de4cb54d3": [
        "def solution():\n    for digit1 in range(10):\n        for digit2 in range(10):\n            number = int(f\"21{digit1}{digit2}35\")\n            if number % 99 == 0:\n                return number\n\nans = solution()"
    ],
    "7c8f1a20bc9749f7b59b0f1ad124a82f": [
        "def solution():\n    total_students = 320\n    days_in_week = 7\n\n    # Apply the Pigeonhole Principle\n    min_students_in_most_populous_week = (total_students + days_in_week - 1) // days_in_week\n    \n    return min_students_in_most_populous_week\n\nans = solution()"
    ],
    "b781fc8f3a7c4ac5b3c263cd0ed580ef": [
        "def solution():\n    return 3 / (1 - 1/2)\n\nans = solution()"
    ],
    "5d1664b6531d452198dbf2ebb51359c0": [
        "def solution():\n    percent_wearing_glasses = 20\n    total_girls = 25\n\n    girls_wearing_glasses = (percent_wearing_glasses / 100) * total_girls\n\n    return int(girls_wearing_glasses)\n\nans = solution()"
    ],
    "955c179e463143d28ade540096508f5f": [
        "def solution():\n    lcm = 1\n    for factor in [2, 3, 4, 5, 6, 8, 9]:\n        lcm = (lcm * factor) // math.gcd(lcm, factor)\n        \n    N = lcm\n    while N % 7 != 5:\n        N += lcm\n        \n    return N\n\nimport math\nans = solution()"
    ],
    "f2b7d72bc0e0413388bba2a9429b9e63": [
        "def solution():\n    # There are 7 days in a week, and we want to find out the number of Fridays within 55 days\n    # Since there are 7 days per week, every 7-day period contains exactly one Friday.\n    # By dividing 55 by 7, we find out how many complete weeks fit into the 55 days.\n    complete_weeks = 55 // 7\n\n    # These complete weeks contain exactly one Friday each.\n    fridays_in_complete_weeks = complete_weeks * 1\n\n    # Now we need to check the remainder of the days to see if there's an additional Friday.\n    remaining_days = 55 % 7\n\n    # If the summer vacation starts on a Friday, the first day is a Friday, hence,\n    # we need to check if the remainder days could potentially contain another Friday.\n    # We know that if the remainder is 0, summer vacation starts on a Thursday,\n    # if remainder is 1, it starts on a Friday, and so on till remainder is 6, it starts on a Wednesday.\n    # So for the greatest number of Fridays, vacation should start on a Friday.\n    # In this case, we have an additional Friday if the remaining days include a Friday.\n\n    additional_friday = 0\n    if remaining_days >= 1:\n        additional_friday = 1\n\n    # The greatest number of Fridays is the number of Fridays in complete weeks plus any additional Friday.\n    greatest_fridays = fridays_in_complete_weeks + additional_friday\n    return greatest_fridays\n\nans = solution()"
    ],
    "20a734ca64ba4070bb73709f8775c1bb": [
        "def solution():\n    # Cost of pencil\n    cost_pencil = 2\n    # Cost of pen\n    cost_pen = 4\n\n    # Ratio of the cost of a pen to the cost of a pencil\n    ratio = cost_pen // cost_pencil\n\n    return ratio\n\nans = solution()"
    ],
    "89c07102e40b408485bed168ad9751a2": [
        "def solution():\n    return 53 * 47\n\nans = solution()"
    ],
    "92911ac8b9144f938149832f7b7402c6": [
        "def solution():\n    ans = 8386 // 14\n    return ans\n\nans = solution()"
    ],
    "08ead4044f5c4e0cb7f564479dcbb641": [
        "def solution():\n    cost_of_5_mugs = 3.50\n    cost_of_8_pens = 6.80\n    \n    cost_per_mug = cost_of_5_mugs / 5\n    cost_per_pen = cost_of_8_pens / 8\n    \n    total_cost_of_7_mugs = 7 * cost_per_mug\n    total_cost_of_5_pens = 5 * cost_per_pen\n    \n    total_cost = total_cost_of_7_mugs + total_cost_of_5_pens\n    \n    change_from_10_pounds = 10 - total_cost\n    \n    return round(change_from_10_pounds, 2)\n\nans = solution()"
    ],
    "9b6fc41b0a9a49fea3924bc898749d7d": [
        "def solution():\n    total_pupils = 560\n    away_pupils_fraction = 1/5\n    away_pupils = total_pupils * away_pupils_fraction\n    pupils_going_to_cathedral = total_pupils - away_pupils\n    return int(pupils_going_to_cathedral)\n\nans = solution()"
    ],
    "6b4e0702e3de4173981781093a35339e": [
        "def solution():\n    time_per_song = 3\n    total_children = 50\n    total_songs = 2\n\n    total_time = time_per_song * total_songs * total_children\n\n    return total_time\n\nans = solution()"
    ],
    "ac385e53c24d4641950c3bc12d00cf65": [
        "def solution():\n    total_weight_with_apples = 580\n    weight_without_3_apples = 280\n    number_of_apples_taken_out = 3\n    \n    weight_of_3_apples = total_weight_with_apples - weight_without_3_apples\n    weight_per_apple = weight_of_3_apples / number_of_apples_taken_out\n    \n    total_weight_of_apples = 5 * weight_per_apple\n    weight_of_basket = total_weight_with_apples - total_weight_of_apples\n    \n    return weight_of_basket\n\nans = solution()"
    ],
    "33059b4275c842cfbe5060e8e558c094": [
        "def solution():\n    if 0.25 > 0.3:\n        ans = \"25%\"\n    else:\n        ans = \"0.3\"\n    return ans\n\nans = solution()"
    ],
    "9d2dc78991904963a971fcd7d4ca960c": [
        "def solution():\n    ans = 1\n    return ans\n\nans = solution()"
    ],
    "4b619e6f83fb4fcb8bd134e22add52a2": [
        "def solution():\n    principal = 35000\n    rate = 1.5 / 100\n    final_amount = 37100\n    \n    # Calculate the number of years using the formula A = P(1 + rt)\n    # where A is the final amount, P is the principal, r is the rate, and t is the time in years.\n    years = (final_amount / principal - 1) / rate\n\n    return round(years)\n\nans = solution()"
    ],
    "824b5f4234db4e34ba3320198b6e527a": [
        "def solution():\n    donuts_per_box = 6\n    boxes_bought = 6\n    donuts_eaten = 3\n\n    total_donuts = donuts_per_box * boxes_bought\n    donuts_left = total_donuts - donuts_eaten\n\n    return donuts_left\n\nans = solution()"
    ],
    "2b391dae225f4f358dfa8a02cfaea5f6": [
        "def solution():\n    loafs_per_cup = 7 / 4\n    desired_loafs = 35\n    cups_needed = desired_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "e80e460c0afe49d7918f9c4c9e99d36a": [
        "def solution():\n    lcm = 3 * 7  # LCM of 3 and 7\n    ans = lcm\n    while True:\n        if str(ans).endswith('2'):\n            return ans\n        ans += lcm\n\nans = solution()"
    ],
    "c847b39a398345608e4e416f46045845": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies, cakes = symbols('cookies cakes')\n\n    # there were thrice as many cookies as cakes\n    equation1 = Eq(cookies, 3 * cakes)\n    # After 39 cookies and 17 cakes were sold, a total of 48 were left\n    equation2 = Eq(cookies - 39 + cakes - 17, 48)\n\n    solutions = solve((equation1, equation2), (cookies, cakes))\n\n    # cookies left in the end\n    cookies_left = solutions[cookies] - 39\n\n    return cookies_left\n\nans = solution()"
    ],
    "e33f554d8b1644c19022b4fa4594db6b": [
        "def solution():\n    days_in_a_week = 7\n    weeks = 2\n\n    total_days = days_in_a_week * weeks\n\n    return total_days\n\nans = solution()"
    ],
    "926c0d38b66140b8900e8ac92ba84f48": [
        "def solution():\n    value1 = 3 * 10**2\n    value2 = 3 * 10**5\n    difference = value2 - value1\n    return difference\n\nans = solution()"
    ],
    "13ecc517842a4e27b0943158564ba2f9": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Define a variable for each person's hourly productivity\n    john_productivity, jonah_productivity, angus_productivity = symbols('john jonah angus')\n\n    # Equation for all three working together\n    eq1 = Eq(1 / john_productivity + 1 / jonah_productivity + 1 / angus_productivity, 1 / 27)\n\n    # Equation for Jonah and Angus working together\n    eq2 = Eq(1 / jonah_productivity + 1 / angus_productivity, 1 / 36)\n\n    # We want to find how long John would take, so we need to find John's productivity.\n    # We express Jonah's and Angus's productivity in terms of John's productivity\n    solutions = solve((eq1, eq2), (john_productivity, jonah_productivity, angus_productivity))\n\n    # Since we are looking for the time it takes for John to build the wall alone,\n    # we take the reciprocal of John's productivity to find the time.\n    john_time = 1 / solutions[john_productivity]\n\n    return john_time\n\nans = solution()"
    ],
    "246eea2b254546f6a06a17c8c5da0778": [
        "def solution():\n    return (2**17) % 10\n\nans = solution()"
    ],
    "15d29f8eed604f4faf1e5161667d0a8e": [
        "def solution():\n    # The number of times each number appears is equal to the number itself\n    # We need to add up these counts from 1 to 20 to get the total number of printed \"pages\"\n    total_pages = sum(range(1, 21))\n\n    # Since each actual page has a front and back, divide the print count by 2 to get the actual page count\n    actual_pages = total_pages // 2 if total_pages % 2 == 0 else (total_pages // 2) + 1\n\n    return actual_pages\n\nans = solution()"
    ],
    "0521571bcf6e46beb68e012434205a1a": [
        "def solution():\n    z = 1  # any positive value for z would result in the same pattern of solvability\n    coin1 = 4 * z\n    coin2 = 5 * z\n\n    # To find the largest total that cannot be made with 4z and 5z coins,\n    # we use the Frobenius Coin Problem formula for two coins: (coin1 * coin2) - coin1 - coin2\n    largest_total = (coin1 * coin2) - coin1 - coin2\n\n    return largest_total\n\nans = solution()"
    ],
    "be94a430bb8b4fcaa11c93b71957d202": [
        "def solution():\n    # The sum of the 10 positive integers is 1001\n    total_sum = 1001\n    \n    # We need to find the maximum gcd, which occurs when the numbers are most similar\n    # Since the gcd has to divide the total sum, we can start checking from 1001 and go down to 1\n    for d in range(total_sum, 0, -1):\n        if total_sum % d == 0:\n            # If it divides evenly, then it is the maximum gcd\n            return d\n\nans = solution()"
    ],
    "576faec091114697b4cc7ea7ab748d0c": [
        "def solution():\n    # Let x be the current combined age of Claire and Daniel.\n    # Five years ago, their combined age was x - 2*5.\n    # According to the problem, x - 2*5 = 14.\n    # Therefore, x is 14 + 2*5.\n\n    current_combined_age = 14 + 2*5\n\n    # In 3 years, their combined age will be the current combined age plus 3 years for each.\n    future_combined_age = current_combined_age + 2*3\n\n    return future_combined_age\n\nans = solution()"
    ],
    "1eee00688a104ff986a31b1fee446322": [
        "def solution():\n    count = 0\n    for a in range(10):\n        for b in range(10):\n            number = 108200 + a * 10 + b\n            if number % 12 == 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "099cc2e5ff734ad197d27fee09bc11fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, pear = symbols('apple pear')\n\n    # Define the equations based on the given conditions\n    equation1 = Eq(3 * apple + 4 * pear, 1.81)\n    equation2 = Eq(5 * apple + 2 * pear, 1.71)\n\n    # Solve the system of equations\n    solution = solve((equation1, equation2), (apple, pear))\n\n    # Calculate the weight of 4 apples and 4 pears\n    weight = 4 * solution[apple] + 4 * solution[pear]\n\n    return weight\n\nans = solution()"
    ],
    "043842622d23468b98edf5cef7ed85bf": [
        "def solution():\n    from math import gcd\n\n    length1 = 45\n    length2 = 30\n\n    longest_length = gcd(length1, length2)\n\n    return longest_length\n\nans = solution()"
    ],
    "a33b75b9ed48463ca3eeddc40ed2b3d3": [
        "def solution():\n    boys_plus_girls = 152\n    for boys in range(boys_plus_girls + 1):\n        girls = boys_plus_girls - boys\n        if boys - boys / 11 == girls - 5:\n            return boys\n\nans = solution()"
    ],
    "93147f6eb5f740a294872bacc776ddb6": [
        "def solution():\n    num1 = 475\n    num2 = 138\n    ans = num1 + num2\n    return ans\n\nans = solution()"
    ],
    "7f1aa4e059a14f339db6b2ca01c5fcab": [
        "def solution():\n    number = 0\n    while True:\n        number += 1\n        if number % 5 == 1 and number % 12 == 3:\n            break\n    return number\n\nans = solution()"
    ],
    "be1d59d57baf4467ac4f9b6959b15354": [
        "def solution():\n    return 42 + 21 + 16 + 44 + 37\n\nans = solution()"
    ],
    "5703bb8ce16a4381b41f8d825e3b1d53": [
        "def solution():\n    total_pencils = 128\n    pencils_per_box = 16\n\n    num_boxes = total_pencils // pencils_per_box\n\n    return num_boxes\n\nans = solution()"
    ],
    "2775c0cd96fc41549c1710e81e205e35": [
        "def solution():\n    sum_result = 386 + 99\n    return sum_result\n\nans = solution()"
    ],
    "ab9fcefd7c4e479ea261d1c0846c27b6": [
        "def solution():\n    eggs_per_day = 50\n    adult_in_days = 30\n    total_days = 40\n    new_adults = 0\n\n    # Iterate through each day to check how many new adults there will be\n    for day in range(1, total_days + 1):\n        # Eggs laid 30 days ago become adults today\n        if day > adult_in_days:\n            new_adults += eggs_per_day\n\n    return new_adults\n\nans = solution()"
    ],
    "1661939d67544a83807ef71d048c5ebf": [
        "def solution():\n    return (7 * 3) + ~~~  # Replace ~~~ with the unknown number.\n\nans = solution()"
    ],
    "675d0644ed364630886e6ad4d9107e49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amanda, bernie, cathy = symbols('amanda bernie cathy')\n\n    equation1 = Eq(cathy, 3 * amanda)\n    equation2 = Eq(amanda, 2 * bernie)\n    equation3 = Eq(amanda + bernie + cathy, 378)\n\n    solutions = solve((equation1, equation2, equation3), (amanda, bernie, cathy))\n\n    return solutions[amanda] + solutions[cathy]\n\nans = solution()"
    ],
    "f9fc8eb9b14d4cc9a262fcb37c90fda7": [
        "def solution():\n    total_orange_drink = 12\n    fraction_water = 3 / 4\n    litres_water = total_orange_drink * fraction_water\n    return litres_water\n\nans = solution()"
    ],
    "2055cce1efcf44bea37be19436b9bcf2": [
        "def solution():\n    first_term = 3\n    rows = 22\n    difference = 3\n\n    last_term = first_term + (rows - 1) * difference\n    total_students = (first_term + last_term) * rows // 2\n\n    return total_students\n\nans = solution()"
    ],
    "4e21bd2101d34265aef926bc9e12fa2a": [
        "def solution():\n    story_books = 75\n    magazines = 3 * story_books + 12\n    total_amount = story_books + magazines\n    return total_amount\n\nans = solution()"
    ],
    "0842c79b27de450fa5cfe122f9bcadc6": [
        "def solution():\n    # Number of people speaking each language\n    french = 15\n    japanese = 12\n    italian = 13\n\n    # Number of people speaking two languages\n    french_japanese = 5\n    french_italian = 3\n    japanese_italian = 2\n\n    # Number of people speaking all three languages\n    all_three = 1\n\n    # Using the Inclusion-Exclusion Principle\n    total_people = (\n        french +\n        japanese +\n        italian -\n        french_japanese -\n        french_italian -\n        japanese_italian +\n        all_three\n    )\n\n    return total_people\n\nans = solution()"
    ],
    "487795a712ca4df799ee2cbe1e449bfa": [
        "def solution():\n    for abcd in range(1000, 10000):\n        M = int(\"5\" + str(abcd))\n        N = int(str(abcd) + \"5\")\n        if M - N == 22122:\n            return abcd\n\nans = solution()"
    ],
    "c095aeb90ada41a7b2026c6d00a0a9a5": [
        "def solution():\n    from fractions import Fraction\n    \n    first_number = 21 + Fraction(21, 286)\n    second_number = 6 + Fraction(647, 2530)\n    third_number = 1 + Fraction(1370, 2829)\n    \n    result = first_number / second_number * third_number\n\n    return result\n\nans = solution()"
    ],
    "e02f12831853474bb8ee7052e880632b": [
        "def solution():\n    # Given dimensions of the cuboid\n    length, width, height = 6, 10, 12\n\n    # Since the cuboid is cut into 720 small equal cubes, let's find the side of each small cube\n    volume_of_cuboid = length * width * height\n    volume_of_small_cube = volume_of_cuboid / 720\n    side_of_small_cube = volume_of_small_cube ** (1/3)\n\n    # Calculate the number of small cubes along each dimension\n    cubes_along_length = length / side_of_small_cube\n    cubes_along_width = width / side_of_small_cube\n    cubes_along_height = height / side_of_small_cube\n\n    # Calculate the number of small cubes with exactly one face painted pink for each face\n    # Subtract 2*2 for each dimension to account for the corner pieces that have more than one painted face\n    top_bottom = (cubes_along_length - 2) * (cubes_along_width - 2)\n    front_back = (cubes_along_length - 2) * (cubes_along_height - 2)\n    left_right = (cubes_along_width - 2) * (cubes_along_height - 2)\n\n    # Add the cubes for each set of opposite faces\n    total_painted_cubes = 2 * (top_bottom + front_back + left_right)\n\n    return int(total_painted_cubes)\n\nans = solution()"
    ],
    "a8ad8c1da3f64db3b4d3e1134a3879a8": [
        "def solution():\n    return 1600 * 0.30\n\nans = solution()"
    ],
    "1080dc888bc1462c875ce93fbe5290ad": [
        "def solution():\n    initial_amount = 3.85  # in pounds\n    pencil_cost = 0.38  # in pounds\n    ruler_cost = 0.59  # in pounds\n\n    remaining_amount = initial_amount - (pencil_cost + ruler_cost)\n\n    return remaining_amount\n\nans = solution()"
    ],
    "ee5f7e8a908d460b8adcc1ad027e999e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anne, maria = symbols('anne maria')\n    \n    equation1 = Eq(maria, anne + 20)\n    equation2 = Eq(anne + maria, 44)\n\n    solutions = solve((equation1, equation2), (anne, maria))\n\n    return solutions[anne]\n\nans = solution()"
    ],
    "c918b81873d64b8aa1c102ce71280309": [
        "def solution():\n    from sympy import divisors\n\n    # The number of pieces in each pile must be a factor of 140.\n    # Since they all must be odd, we need to find the odd divisors of 140.\n    # Prime factorization of 140: 2^2 * 5 * 7\n    # Divisors must exclude the factor of 2.\n    odd_factors = divisors(140 // (2**2))\n\n    # Each divisor will give us the size of each pile.\n    # The number of divisors will give us the total number of ways to distribute\n    # the candies into piles of the same size such that the size is odd.\n    ans = len(odd_factors)\n    \n    return ans\n\nans = solution()"
    ],
    "6b16fdd0be384cf5a083adb6b7ddc329": [
        "def solution():\n    # Iterate through all 2-digit numbers\n    for number in range(10, 100):  # 2-digit numbers range from 10 to 99\n        if number % 9 == 5 and number % 11 == 2:\n            return number  # Return the first number that fits the criteria\n\nans = solution()"
    ],
    "b941a481a3ec4834ae3b5b86f5aec29d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let s be the work done by Star in 1 hour\n    # Let n be the work done by Nini in 1 hour\n    s, n = symbols('s n')\n    \n    # Star types for 5 hours and then Nini for 20 hours to finish the job\n    equation1 = Eq(5 * s + 20 * n, 1)\n    \n    # Star types for 20 hours and then Nini for 8 hours to finish the job\n    equation2 = Eq(20 * s + 8 * n, 1)\n    \n    # Solve the algebraic equations\n    solutions = solve((equation1, equation2), (s, n))\n    \n    # Time taken for Nini to finish the job by herself = 1 / n\n    nini_time = 1 / solutions[n]\n    \n    return nini_time\n\nans = solution()"
    ],
    "7a962b40b4df4e7da95c3f2d31a2f3ce": [
        "def solution():\n    total_students = 98\n    fraction_girls = 3/7\n    num_girls = total_students * fraction_girls\n\n    return int(num_girls)\n\nans = solution()"
    ],
    "3199cfbf2dfe4ff5b0205bf52aec9191": [
        "def solution():\n    # Since there are 20 keys and 20 classrooms,\n    # in the worst case scenario the warden will try each key with each door.\n    # So for the first door, he could potentially try all 20 keys,\n    # for the second door, he is left with 19 keys, and so on, until the last door with 1 key.\n    # This is a sum of an arithmetic series from 1 to 20.\n\n    num_keys = 20\n    sum_tries = sum(range(1, num_keys + 1))\n    \n    return sum_tries\n\nans = solution()"
    ],
    "9399d8d9f49e46a198d04e3865b85816": [
        "def solution():\n    # After Tom takes 4 stones from Stack B, the stacks are as follows:\n    # Stack A: 20 stones\n    # Stack B: 16 stones\n    # To ensure a win, Jerry should aim to leave both stacks with the same number of stones\n    # Because if both stacks are even and the same, whatever Tom takes, Jerry can mimic and take the same from the other stack\n    # thus ensuring that Jerry takes the last stone.\n\n    # Calculate the stones Jerry needs to take to make both stacks even:\n    stones_to_take = 20 - 16 \n\n    # Determine from which stack Jerry should take the stones:\n    stack_to_take_from = \"A\"  # Since Stack B was already taken from by Tom, Jerry should take from Stack A\n\n    # Return the answer in the specified format:\n    return f\"Jerry must take {stones_to_take} stone(s) from Stack {stack_to_take_from}.\"\n\nans = solution()"
    ],
    "2bf32838f785445980cc390cb6320d3d": [
        "def solution():\n    numerator = (2017 * 20182018 + 20172017 * 2018)\n    denominator = 201720172017\n\n    ans = numerator / (denominator * 2018)\n    \n    return ans\n\nans = solution()"
    ],
    "23f8aa9db7e147b3b3742048c1d3174a": [
        "def solution():\n    return 861 // 7\n\nans = solution()"
    ],
    "04b825cc67fe4b4f8a1f4497100aeb7c": [
        "def solution():\n    watermelon_to_peaches = 6\n    peaches_to_apples = 3 / 2\n    watermelon_to_apples = watermelon_to_peaches * peaches_to_apples\n    return watermelon_to_apples\n\nans = solution()"
    ],
    "7580acd98a0c4ef6bda0a71edd51c899": [
        "def solution():\n    # Each sheet of the newspaper has two pages, one on the front and one on the back.\n    # If he takes the third sheet, the pages on that sheet will be 5 and 6 (since the first sheet is pages 1 and 2).\n    # Therefore, the sum of the page numbers on the third sheet is 5 + 6.\n\n    page_sum = 5 + 6\n    return page_sum\n\nans = solution()"
    ],
    "69821dbcaf204ec39ed74a835223a3ce": [
        "def solution():\n    return (120 + 300) / 2\n\nans = solution()"
    ],
    "b79ceb9a914f43578cdb34802a537cfe": [
        "def solution():\n    ans = 100  # As the pattern nullifies every number except the first one\n    return ans\n\nans = solution()"
    ],
    "fa6c8419cbc948ed949fceaaf819f554": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "796675bc6c294ff3bcb032a3c401a43e": [
        "def solution():\n    count = 0\n    for page in range(1, 301):\n        if '3' in str(page):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "7ed76480d276434fbfc1ef6cec1b7bdd": [
        "def solution():\n    digits = 933\n    pages = 0\n    for i in range(1, 4):  # There are 1 to 3 digit numbers\n        num_start = 10**(i-1)\n        num_end = 10**i - 1\n        num_pages = num_end - num_start + 1\n        num_digits = num_pages * i\n        if digits - num_digits > 0:\n            digits -= num_digits\n            pages += num_pages\n        else:\n            pages += digits // i\n            break\n    return pages\n\nans = solution()"
    ],
    "894a1b1acc3e45f59d4643eed64472b1": [
        "def solution():\n    total_cups = 30 + 50 + 20\n    total_cost = (30 * 5) + (50 * 3) + (20 * 10)\n    average_cost = total_cost / total_cups\n    return average_cost\n\nans = solution()"
    ],
    "88e4456f85e441199253d72e1f99a80c": [
        "def solution():\n    total_digits = sum(len(str(i)) for i in range(1, 92))\n    return total_digits\n\nans = solution()"
    ],
    "7e7c1a59a5694db697ef232a76a2ffdf": [
        "def solution():\n    return 1 / 8\n\nans = solution()"
    ],
    "c9603f52f68b48fb9942c64a01b72b5b": [
        "def solution():\n    start_time_hour = 21\n    start_time_minute = 15\n    end_time_hour = 23\n    end_time_minute = 6\n\n    duration_hours = end_time_hour - start_time_hour\n    duration_minutes = end_time_minute - start_time_minute\n\n    if duration_minutes < 0:\n        duration_hours -= 1\n        duration_minutes += 60\n\n    total_minutes = (duration_hours * 60) + duration_minutes\n\n    return total_minutes\n\nans = solution()"
    ],
    "2256985532604103b84c8d43d526ad28": [
        "def solution():\n    # Initial pens in each color in box A\n    blue_a, red_a, black_a, green_a = 10, 15, 20, 25\n    # Initial pens in each color in box B\n    blue_b, red_b, black_b, green_b = 10, 15, 20, 25\n\n    # After moving 20 pens from A to B, the minimum in A becomes:\n    blue_a_min, red_a_min, black_a_min, green_a_min = 15, 15, 15, 15\n\n    # Calculate the pens needed to be returned to A for each color\n    blue_returned = max(0, blue_a_min - blue_a)\n    red_returned = max(0, red_a_min - red_a)\n    black_returned = max(0, black_a_min - black_a)\n    green_returned = max(0, green_a_min - green_a)\n\n    # Calculate the total number of pens to be returned to A\n    total_returned = blue_returned + red_returned + black_returned + green_returned\n\n    return total_returned\n\nans = solution()"
    ],
    "f93fc07de4544d5f963823aa20a6df3c": [
        "def solution():\n    boys_more_than_girls = 32\n    total_students = 0\n\n    for layer in range(100):  # Assume a sufficient number of layers\n        boys = (layer * 2 + 1) ** 2\n        girls = layer * (layer + 1) * 4\n\n        if boys - girls == boys_more_than_girls:\n            total_students = boys + girls\n            break\n\n    return total_students\n\nans = solution()"
    ],
    "81eb5a575fa2413fb713f5e997cd9be1": [
        "def solution():\n    total_chocolates = 20\n    plain_chocolates = 8\n    soft_centre_chocolates = 16\n\n    # Since there are more soft-centre chocolates (16) than milk chocolates (12),\n    # it is guaranteed that all milk chocolates have soft-centres.\n    # Therefore, some plain chocolates must also have soft-centres.\n    # The number of plain chocolates with soft-centres can be calculated by \n    # subtracting the total number of soft-centre chocolates (16) by the number\n    # of milk chocolates (since they all have soft-centres).\n    \n    plain_soft_centres = soft_centre_chocolates - (total_chocolates - plain_chocolates)\n    \n    return plain_soft_centres\n\nans = solution()"
    ],
    "b2d3da9e064d4575a7d21857a9386c15": [
        "def solution():\n    percentage_violin = 12.5 / 100\n    number_violin_pupils = 11\n    total_pupils = number_violin_pupils / percentage_violin\n\n    return int(total_pupils)\n\nans = solution()"
    ],
    "3e0ec8edcb27464fae3044b467f54920": [
        "def solution():\n    quotient = 29\n    remainder = 11\n    sum_dividend_divisor = 431\n\n    # The dividend can be expressed in terms of divisor and remainder\n    # Dividend = Divisor * Quotient + Remainder\n\n    # Let the divisor be 'd', then the dividend will be 'd*29 + 11'\n    # We know that dividend + divisor = 431\n    # (d*29 + 11) + d = 431\n    # 30d + 11 = 431\n    # 30d = 420\n    # d = 14\n\n    divisor = (sum_dividend_divisor - remainder) // (quotient + 1)\n\n    # To find the dividend:\n    dividend = divisor * quotient + remainder\n\n    # The difference between the dividend and divisor:\n    difference = dividend - divisor\n\n    return difference\n\nans = solution()"
    ],
    "766f7130bda14f6780c8a29b28b45542": [
        "def solution(n):\n    return 50 * n\n\nans = solution"
    ],
    "bd8976f4ffcd4d51b276b2ccda2e228d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of each type of coin\n    x = symbols('x')\n\n    # Equation representing the total sum in pence\n    equation = Eq(1*x + 2*x + 5*x + 10*x, 90)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    # Calculate the total number of coins\n    total_coins = solution[x] * 4  # Since there are 4 types of coins\n\n    return total_coins\n\nans = solution()"
    ],
    "55d9d0163f3a466c8356b0f2120c7887": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    apples, pears = symbols('apples pears', real=True, positive=True)\n\n    # Initial conditions\n    eq1 = Eq(apples + pears, 105)\n\n    # Conditions after selling\n    eq2 = Eq(apples - apples/3, (pears - 2*pears/5) * (5/6))\n\n    # Solve the system\n    sol = solve((eq1, eq2), (apples, pears))\n\n    apples_sold = sol[apples] / 3\n    pears_sold = 2 * sol[pears] / 5\n\n    return int(apples_sold + pears_sold)\n\nans = solution()"
    ],
    "6eeec66a73a24afc801c791a461a7aa6": [
        "def solution():\n    total_cars = 60\n    red_cars = (5/12) * total_cars\n    blue_cars = (20/100) * total_cars\n    other_cars = total_cars - red_cars - blue_cars\n    return int(other_cars)\n\nans = solution()"
    ],
    "418f309d7a1845b1a05816bed5dfb673": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    stickers, pupils = symbols('stickers pupils')\n    \n    equation1 = Eq(stickers - 13 * pupils, 190)\n    equation2 = Eq(stickers - 17 * pupils, 50)\n\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "bb42c63fe2114d219cb0459ccb14f1a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbolic variables\n    A, B, C = symbols('A B C')\n\n    # Equations based on the problem statement\n    ratio_eq = Eq(A/B, 4/5) & Eq(B/C, 5/6)  # A:B:C = 4:5:6\n    difference_eq = Eq(C - A, 10)  # C is greater than A by 10\n\n    # Solve the system of equations\n    solutions = solve((ratio_eq, difference_eq), (A, B, C))\n\n    # Calculate the sum of A, B, and C\n    A_value = solutions[A]\n    B_value = solutions[B]\n    C_value = solutions[C]\n    total_sum = A_value + B_value + C_value\n\n    return total_sum\n\nans = solution()"
    ],
    "3c78fac74fe445cdaba8f451af901d4f": [
        "from math import factorial\n\ndef solution():\n    # The group of students A, B, C, D can be considered as one entity.\n    # Thus we have 9 entities to arrange in a line: (ABCD), E, F, G, H, I, J, K, L\n    entities_to_arrange = 9\n    \n    # Each of the entities can be arranged in factorial of its count.\n    arrangements_of_entities = factorial(entities_to_arrange)\n    \n    # Students A, B, C, D can be arranged among themselves in 4! ways.\n    arrangements_within_group = factorial(4)\n    \n    # Total arrangements are the product of arrangements of entities and arrangements within the group\n    total_arrangements = arrangements_of_entities * arrangements_within_group\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "f90f17b98c3244ee80cbcf47c9a22ca7": [
        "def solution():\n    boys_to_girls_ratio = 3 / 5\n    boys = 9\n    girls_per_boy = 1 / boys_to_girls_ratio\n    girls = boys * girls_per_boy\n    return int(girls)\n\nans = solution()"
    ],
    "2fbf56cda6294a4ba514fb0676d5a24c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the original weights of bags A and B be 5x and 3x respectively\n    x = symbols('x')\n    \n    # After transferring 10 grams from A to B, A's weight is 5x - 10 and B's is 3x + 10\n    # The new ratio is 7:5, setting up the equation 5 * (5x - 10) = 7 * (3x + 10)\n    equation = Eq(5 * (5*x - 10), 7 * (3*x + 10))\n    \n    # Solve the equation for x\n    solution_x = solve(equation, x)\n    \n    # Calculate the total weight by substituting x back into the original weights\n    total_weight = 5*solution_x[0] + 3*solution_x[0]\n    \n    return total_weight\n\nans = solution()"
    ],
    "9da90a336543472fb221543495f75212": [
        "def solution():\n    # Total number of games played\n    total_games = (6 * 5) // 2  # C(6, 2)\n    # Total points if there were no ties\n    total_points = total_games * 2\n    # Total points given the points of five students\n    points_assigned = 7 + 6 + 5 + 4 + 3\n    # Points for the remaining student\n    remaining_points = total_points - points_assigned\n    \n    return remaining_points\n\nans = solution()"
    ],
    "d6a1e647460246479951e8955d7126b0": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (2, 5), (2, 7)]\n    number, _ = solve_congruence(*congruences)\n    while number <= 100:\n        number += 3 * 5 * 7\n    return number\n\nans = solution()"
    ],
    "1c808145d3a040e4899219721beca8a3": [
        "def solution():\n    num = 48 * 925 * 38 * 435\n    count = 0\n    while num % 10 == 0:\n        count += 1\n        num //= 10\n    return count\n\nans = solution()"
    ],
    "65b97cc4685a4c2285fda77b5e2dd58d": [
        "def solution():\n    # Convert all quantities to grams for comparison\n    masses = [30, 1*1000, 300, 2.5*1000, 3000, 150, 3] # 1 kg = 1000 g\n    # Find the largest mass\n    largest_mass = max(masses)\n    return largest_mass\n\nans = solution()"
    ],
    "0c806097cde44e2b993a1db7282d9731": [
        "def solution():\n    total_players = 378\n    first_line_players = 22\n    last_line_players = 62\n    \n    # Using the sum formula of arithmetic sequence: n/2 * (a_1 + a_n) = total\n    # And knowing that the sum is total_players, we want to find n and d\n    # Since we don't know n, we'll calculate it knowing that the difference between any two adjacent lines d is an integer.\n    n = 1  # we start testing from 1 line onward\n    while True:\n        if n * (first_line_players + last_line_players) == 2 * total_players:\n            break\n        n += 1\n    \n    # The difference between any two lines is then calculated as (last_line_players - first_line_players) / (n - 1)\n    d = (last_line_players - first_line_players) // (n - 1)\n    \n    return d\n\nans = solution()"
    ],
    "cbc5f810ee4d4266ac73f789efc26675": [
        "def solution():\n    total_children = 407\n    fraction_girls = 6 / 11\n    number_of_girls = total_children * fraction_girls\n    number_of_boys = total_children - number_of_girls\n    return int(number_of_boys)\n\nans = solution()"
    ],
    "859d0b8b48294702afaa6ae358e1b4b8": [
        "def solution():\n    from math import comb\n\n    total_days = 1000\n    thefts = 2\n    bark_per_week = 3\n    weeks = total_days / 7\n    total_barks = bark_per_week * weeks\n    p_bark_given_theft = 0.9\n\n    # Calculate the probability of the dog barking independently of the theft\n    p_bark = total_barks / total_days\n\n    # Calculate the probability of the dog barking during the theft using conditional probability formula\n    # P(A and B) = P(A given B) * P(B)\n    p_bark_and_theft = p_bark_given_theft * (thefts / total_days)\n\n    # P(B) = P(A and B) / P(A given B)\n    ans = p_bark_and_theft / p_bark\n\n    return ans\n\nans = solution()"
    ],
    "7522b62306804ad5ac94948668c3a1b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the different types of candies\n    apple, orange, grape, pineapple = symbols('apple orange grape pineapple')\n\n    # Set up the equations based on the given information\n    eq1 = Eq(apple, orange + 7)   # 7 more apple candies than orange candies\n    eq2 = Eq(apple, grape + 3)    # 3 more apple candies than grape candies\n    eq3 = Eq(pineapple, orange + 2)  # 2 more pineapple candies than orange candies\n    eq4 = Eq(apple + orange + grape + pineapple, 25)  # Total candies bought\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4), (apple, orange, grape, pineapple))\n\n    return solutions[apple]\n\nans = solution()"
    ],
    "cb24212b24014d99811733199a00d63c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of stickers Mr. Ya originally has, and y be the number of pupils.\n    x, y = symbols('x y')\n\n    # Setting up the equations based on the problem statement.\n    equation1 = Eq(x - 13 * y, 190)\n    equation2 = Eq(x - 17 * y, 50)\n    \n    # Solving the systems of equations for x and y.\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "a8823bcc458c444d8e7a13e610f7cd2a": [
        "def solution():\n    return (70 * 4) - (80 * 3) + (60 * 5)\n\nans = solution()"
    ],
    "514c9d0ed96a47ed9c826d6081877afc": [
        "def solution():\n    smallest_difference = float('inf')\n    \n    # Generate all possible permutations of the digits 1 to 9\n    from itertools import permutations\n    all_nine_digit_numbers = permutations('123456789')\n    \n    # Convert the tuples from permutations to integers\n    numbers = [int(''.join(num)) for num in all_nine_digit_numbers]\n    \n    # Sort the numbers to ensure they're in ascending order\n    numbers.sort()\n    \n    # Iterate through the sorted numbers and find the smallest difference\n    for i in range(1, len(numbers)):\n        if numbers[i] - numbers[i-1] < smallest_difference:\n            smallest_difference = numbers[i] - numbers[i-1]\n    \n    # The smallest difference would be between consecutive numbers\n    return smallest_difference\n\nans = solution()"
    ],
    "525efcf75fb844b7b5bfc88c0478887d": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    boys, girls = symbols('boys girls')\n    \n    # Initial condition: 65 fewer boys than girls\n    equation1 = Eq(boys, girls - 65)\n    \n    # After some leave, the number of boys and girls are equal\n    equation2 = Eq((1 - 2/5) * boys, (1 - 3/7) * girls)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    boys_left = (1 - 2/5) * solutions[boys]\n    girls_left = (1 - 3/7) * solutions[girls]\n\n    # Total number of students left in the hall\n    total_left = boys_left + girls_left\n    \n    return int(total_left)\n\nans = solution()"
    ],
    "0d96f11c50ce4d189e891f9019eef601": [
        "def solution():\n    return 2412 // 9\n\nans = solution()"
    ],
    "9238796298a4443b8f23e7932b9616d6": [
        "def solution():\n    from math import factorial\n\n    num_kids = 3\n    num_ways = factorial(num_kids)\n\n    return num_ways\n\nans = solution()"
    ],
    "d95d576c1e1d4865bb3b4aa77767da99": [
        "def solution():\n    count = 0\n    for page in range(1, 131):\n        count += str(page).count('1')\n    return count\n\nans = solution()"
    ],
    "e001594de0464ba1b21b4efea0bd0572": [
        "def solution():\n    current_sum = 22\n    required_sum = 40\n    \n    difference_in_sum = required_sum - current_sum \n    \n    # Since every year each person gets 1 year older, the sum of their ages increases by 2 each year:\n    years_to_pass = difference_in_sum // 2\n    \n    return years_to_pass\n\nans = solution()"
    ],
    "c5424cddd42c402499631a2dc29f9de6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    initial_bricks = symbols('initial_bricks')\n\n    # Equation representing the number of bricks moved in the first trip\n    first_trip = (initial_bricks / 2) - 26\n\n    # Equation representing the number of bricks after the first trip\n    remaining_after_first = initial_bricks - first_trip\n\n    # Equation representing the number of bricks moved in the second trip\n    second_trip = (remaining_after_first / 2) + 11\n\n    # Equation representing the number of bricks after the second trip\n    remaining_after_second = remaining_after_first - second_trip\n\n    # Equation representing the number of bricks after the third trip\n    remaining_after_third = remaining_after_second - 68\n\n    # Final equation representing the number of bricks unmoved\n    final_remaining = Eq(remaining_after_third, 25)\n\n    # Calculating the number of bricks there were at first\n    bricks_at_first = solve(final_remaining, initial_bricks)\n\n    return bricks_at_first[0]\n\nans = solution()"
    ],
    "e1834f400a7b4dd1aceed1e5f730d59b": [
        "def solution():\n    # Since Mike is always the 2nd in line, the square must be bigger than 1x1.\n    # We start from a 2x2 (4) square and check larger squares to see if Mike can be \n    # in the 2nd position in all directions.\n    \n    count = 2\n    while True:\n        # We check for a square by squaring the count\n        if (count - 1) * (count - 1) == count * count - count * 2:\n            # If the arrangement is correct, the class must have count^2 students.\n            return count * count\n        count += 1\n\nans = solution()"
    ],
    "157222dd22d34a94998e5528efa14ab0": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)\n    initial_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "97bb7d23bdbf4724b5bab9effbd3ac6e": [
        "def solution():\n    ans = 125 * 34 * 25 * 4 * 8\n    return ans\n\nans = solution()"
    ],
    "105a05ed86254429b49e9aa1e948fc3f": [
        "def solution():\n    def climb_ways(n):\n        if n == 0:\n            return 1\n        if n < 0:\n            return 0\n        return climb_ways(n - 2) + climb_ways(n - 3)\n    \n    ans = climb_ways(10)\n    return ans\n\nans = solution()"
    ],
    "fa96d25c74d0403cb10a17ab2f107e56": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim = symbols(\n        'girls boys girls_swim girls_not_swim boys_swim boys_not_swim')\n\n    # Equations according to the problem statement\n    equation1 = Eq(boys, girls + 90)  # 90 more boys than girls\n    equation2 = Eq(girls_swim / girls_not_swim, 31 / 49)  # Ratio of girls who can and cannot swim\n    equation3 = Eq(boys_swim, boys_not_swim - 120)  # Boys who can swim is 120 less than those who cannot\n    equation4 = Eq(girls + boys, 1690)  # Total number of students\n    equation5 = Eq(girls, girls_swim + girls_not_swim)  # Girls total split into swimmers and non-swimmers\n    equation6 = Eq(boys, boys_swim + boys_not_swim)  # Boys total split into swimmers and non-swimmers\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6),\n                      (girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim))\n\n    # Calculate the number of pupils who cannot swim\n    not_swim_total = solutions[girls_not_swim] + solutions[boys_not_swim]\n\n    return not_swim_total\n\nans = solution()"
    ],
    "a447314d1b7e47d595af58ce12a8673e": [
        "def solution():\n    for thousands in range(1, 10):  # The first digit can't be 0\n        for hundreds in range(0, 10):\n            for tens in range(0, 10):\n                for ones in range(0, 10):\n                    original_number = thousands * 1000 + hundreds * 100 + tens * 10 + ones\n                    new_number = ones * 1000 + thousands * 100 + hundreds * 10 + tens\n                    if new_number - original_number == 5877:\n                        return original_number\n\nans = solution()"
    ],
    "ef6efdf0f99e45afbcac63320b9c084a": [
        "def solution():\n    quotient = 12\n    remainder = 3\n\n    minimum_divisor = 1\n    minimum_dividend = minimum_divisor * quotient + remainder\n    \n    return minimum_dividend\n\nans = solution()"
    ],
    "b576b58e760e4608bde960e52d27390f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(bentley, david - 25)\n    equation3 = Eq(david + bentley + triston, 410)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[bentley]\n\nans = solution()"
    ],
    "1d179bb769e243588baf620c0eddb4c3": [
        "def solution():\n    pip_number = '1998'\n    n = len(pip_number)\n    while int(pip_number) % 33 != 0:\n        pip_number += '1998'\n        n += len('1998')\n    return n\n\nans = solution()"
    ],
    "37df628db6754f34a0428e73a9610822": [
        "def solution():\n    ans = 882 // 14\n    return ans\n\nans = solution()"
    ],
    "8b5b1973788f4120b9eaa557471090b6": [
        "def solution():\n    group_number = 5\n    first_number_in_group = group_number\n    second_number_in_group = first_number_in_group ** 2\n    third_number_in_group = first_number_in_group * second_number_in_group\n    \n    sum_of_numbers_in_group = first_number_in_group + second_number_in_group + third_number_in_group\n    \n    return sum_of_numbers_in_group\n\nans = solution()"
    ],
    "d888f754042d47c097e6350ffd0bf91f": [
        "def solution():\n    ans = 3000000 + 30000 + 30\n    return ans\n\nans = solution()"
    ],
    "b9ea86dfaf4448428f87deacbb7a0f5a": [
        "def solution():\n    distance_per_lap = 1/4\n    total_distance = 3.75\n\n    number_of_laps = total_distance / distance_per_lap\n    \n    return int(number_of_laps)\n\nans = solution()"
    ],
    "9a6a60ff879c4c6bbc80d88a7bee3dd1": [
        "def solution():\n    boys = 42\n    boys_to_girls_ratio = 3 / 2\n    \n    girls = (boys / 3) * 2\n\n    return girls\n\nans = solution()"
    ],
    "523cf0df494b4333b5fe0276768d0d6f": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equations = [\n        Eq(x % 5, 3),\n        Eq(x % 6, 4),\n        Eq(x % 9, 1)\n    ]\n    sol = solve(equations)\n    for s in sol:\n        if s.is_integer and s > 99 and s < 1000:\n            return s\n        \nans = solution()"
    ],
    "da2e2930096a4f6e840662dbf18b6d76": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candice, doris, elly = symbols('candice doris elly')\n\n    equation1 = Eq(elly, doris + 6)\n    equation2 = Eq(candice, 5 * elly)\n    equation3 = Eq(candice + doris + elly, 50)\n\n    solutions = solve((equation1, equation2, equation3), (candice, doris, elly))\n\n    return solutions[candice]\n\nans = solution()"
    ],
    "33ccad8b36de4799bc2bc55439667b1d": [
        "def solution():\n    return (10 * 21) / 14\n\nans = solution()"
    ],
    "3a67a40b66334eb68ffe9d005d60fa1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    andrew, kim, shaun = symbols('andrew kim shaun')\n    equation1 = Eq(shaun, 2 * kim)\n    equation2 = Eq(andrew, shaun - 24)\n    equation3 = Eq(andrew + kim + shaun, 256)\n\n    solutions = solve((equation1, equation2, equation3), (andrew, kim, shaun))\n\n    return solutions[andrew]\n\nans = solution()"
    ],
    "900857df81614ea5855ed60ccd1e3252": [
        "def solution():\n    books_about_fish = 78\n    books_about_birds = books_about_fish - 12\n    total_books = books_about_fish + books_about_birds\n    return total_books\n\nans = solution()"
    ],
    "a4ee7f4c3e13434da3c2253ab814136c": [
        "def solution():\n    for number in range(10, 100):\n        if number % 6 == 0 and number % 9 == 0 and str(number).endswith('0'):\n            return number\n\nans = solution()"
    ],
    "5adbbaf57fc64b529ecdb661df6d9c9e": [
        "def solution():\n    original_number = 5832\n    tens_to_add = 7 * 10  # '7 tens' means 7 * 10\n\n    correct_answer = original_number + tens_to_add\n\n    return correct_answer\n\nans = solution()"
    ],
    "17091d7aa5fd4380bc6e97f0a25be60b": [
        "def solution():\n    max_number = 27\n    count = 0\n    for i in range(1, max_number):\n        remaining = max_number - i\n        if remaining > i:\n            count += 1\n        else:\n            break\n    return count\n\nans = solution()"
    ],
    "957c6e2479f14a37aca09d1bc7ff195f": [
        "def solution():\n    # Initialize a variable to hold the total count of digits.\n    page_digit_count = 0\n\n    # Loop through each page number and add the length of the number to the total count.\n    for page in range(1, 21):  # The loop runs from page 1 to page 20.\n        page_digit_count += len(str(page))\n\n    return page_digit_count\n\nans = solution()"
    ],
    "08031ac64ba7489a8cb62dc6a25d5652": [
        "def solution():\n    total_length_cm = 3 * 100  # Convert meters to centimeters\n    given_pieces_cm = [147, 32.5, 67]\n\n    length_of_fourth_piece = total_length_cm - sum(given_pieces_cm)\n    return length_of_fourth_piece\n\nans = solution()"
    ],
    "e2d31838755547eba6842f1253e3ffd1": [
        "def solution():\n    ans = 308 - 197\n    return ans\n\nans = solution()"
    ],
    "741594190e264f008d30c48a942dc6ee": [
        "def solution():\n    total_papers = 18\n    insert_after = 3\n    leaves_needed = total_papers // insert_after\n\n    return leaves_needed\n\nans = solution()"
    ],
    "b4e006ff98474bd0850725353e1e101a": [
        "def solution():\n    return (101 + 234 + 567) * (234 + 567 + 89) - (101 + 234 + 567 + 89) * (234 + 567)\n\nans = solution()"
    ],
    "3cf63d0be0824f3c84d43730e223636f": [
        "from scipy.stats import binom\n\ndef solution():\n    # probabilities for A, B, and C passing the test\n    p_A = 0.5\n    p_B = 0.4\n    p_C = 0.2\n    # individually calculate the expected number of passes for each person\n    expected_passes = p_A + p_B + p_C\n    # return the rounded value to find the most likely integer number of passes\n    return round(expected_passes)\n\nans = solution()"
    ],
    "13a6697cd8dc4ffab7300721bb11888a": [
        "def solution():\n    return 31 * 56\n\nans = solution()"
    ],
    "b422fcfa507f4716856239caa8b70d72": [
        "def solution():\n    ans = 1  # since we start with 1\n    for i in range(2, 11):  # from 2 to 10\n        ans += (1/i) * i\n    return ans\n\nans = solution()"
    ],
    "b404e6302dad4073a624607030879a2e": [
        "def solution():\n    # Sam covers 5 intervals in 30 minutes from the first to the sixth house\n    time_per_interval = 30 / 5\n    \n    # To cover all ten houses, Sam needs to cover 9 intervals\n    total_time = time_per_interval * 9\n    \n    return total_time\n\nans = solution()"
    ],
    "0049786ba1f8489782eb5b1cdec203a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    watches, caps = symbols('watches caps')\n    \n    original_ratio = Eq(watches / caps, 8/11)\n    new_ratio = Eq(watches / (caps - 88), 12/11)\n    \n    solutions = solve((original_ratio, new_ratio), (watches, caps))\n    \n    return solutions[watches]\n\nans = solution()"
    ],
    "0643ad338aa0456895d017aec0d4285d": [
        "def solution():\n    miles_driven = 560\n    miles_per_gallon = 34.5\n    cost_per_litre = 1.08\n    litres_per_gallon = 4.55\n    \n    gallons_used = miles_driven / miles_per_gallon\n    litres_used = gallons_used * litres_per_gallon\n    cost = litres_used * cost_per_litre\n    \n    return cost\n\nans = solution()"
    ],
    "7ebc9c1439ea4a04bb6f8b9daa36c101": [
        "def solution():\n    for D in range(1, 10):  # first digit cannot be 0\n        A = D // 4\n        if D % 4 != 0 or A == 0:  # A must be a whole number and cannot be 0\n            continue\n        for B in range(9):  # second digit from 0 to 9\n            if B != A - 1:  # B is one less than A\n                continue\n            for C in range(9):  # third digit from 0 to 9\n                if C == A or C == B or C == D:\n                    continue\n                \n                ABCD = A * 1000 + B * 100 + C * 10 + D\n                DCBA = D * 1000 + C * 100 + B * 10 + A\n                if ABCD * 4 == DCBA:\n                    return ABCD\n\nans = solution()"
    ],
    "26535c3c7cf044319e17743d60510a51": [
        "def solution():\n    total_length_m = 1.05  # length of the ribbon in meters\n    total_length_cm = total_length_m * 100  # convert to centimeters\n    \n    # Let the shorter piece be x. Then the longer piece is 2x.\n    # According to the problem, x + 2x = total_length_cm\n    # Solving for x gives us x = total_length_cm / 3\n    shorter_piece_cm = total_length_cm / 3\n    longer_piece_cm = 2 * shorter_piece_cm  # The longer piece is twice as long\n    \n    return longer_piece_cm\n\nans = solution()"
    ],
    "c59f693d386d4a73a2d62b1ebcb6185c": [
        "def solution():\n    ans = 1200031093\n    return ans\n\nans = solution()"
    ],
    "90111a213be04afd824d36b70a321040": [
        "def solution():\n    # The pattern is ●○●○○, which has a total of 5 balls with 3 black balls and 2 white balls.\n    total_white_balls = 92\n    # Since there are 2 white balls in the repeated pattern, the number of patterns is:\n    num_patterns = total_white_balls // 2\n    # Since each pattern contains 5 balls (3 black and 2 white), the total number of balls is:\n    total_balls = num_patterns * 5\n    return total_balls\n\nans = solution()"
    ],
    "69e6ce5788b847b9b25303af2fe5a1fb": [
        "def solution():\n    # Every 12 coins represent a full cycle, so let's reduce the problem by\n    # finding the remainder when 2015 is divided by 12\n    full_cycles, remainder = divmod(2015, 12)\n\n    # Jack needs to ensure he leaves a multiple of 12 for Ken to start with\n    # Therefore, Jack should pick up the remainder at his first turn\n    # If the remainder is 0, Jack is forced to start the new cycle, and he will lose.\n    # In that case, Jack's pick doesn't matter, but let's stick with the logic.\n    jack_first_pick = remainder if remainder > 0 else 11\n\n    return jack_first_pick\n\nans = solution()"
    ],
    "be2bd70c882644a99d167bdd71a65b7e": [
        "def solution():\n    # Since the line passes through the origin, b must be 0\n    b = 0\n    \n    # Now we need to find the slope 'm' using the point (4,8)\n    x1, y1 = 0, 0  # origin\n    x2, y2 = 4, 8  # given point\n    \n    m = (y2 - y1) / (x2 - x1)  # slope formula (change in y / change in x)\n    \n    # Return the equation in the form y = mx + b\n    # Since b is 0, the equation simplifies to y = mx\n    return f\"y = {m}x\"\n\nans = solution()"
    ],
    "ad17dc3f8a494864b760b100079443f6": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            time_str = f\"{hour:02d}{minute:02d}\"  # Format time as a string with leading zeros\n            if time_str.count('4') >= 2:  # Check if there are at least two '4's in time_str\n                count += 1\n    return count\n\nans = solution()"
    ],
    "0894ed5b3d6f4b4fb5f060190e4e433a": [
        "def solution():\n    ans = 78 + 263 - 174\n    return ans\n\nans = solution()"
    ],
    "0e998f78d8e24e0db196fc058218632c": [
        "from math import gcd\n\ndef solution():\n    num1 = 16\n    num2 = 28\n    return gcd(num1, num2)\n\nans = solution()"
    ],
    "91e7591f3e904be694c0587963279359": [
        "def solution():\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n    \n    def transform_number(n):\n        # Count the number of holes in each digit\n        holes = {'0': 1, '1': 0, '2': 0, '3': 0, '4': 1, '5': 0, '6': 1,\n                 '7': 0, '8': 2, '9': 1}\n        return sum(holes[digit] for digit in str(n))\n    \n    ans = transform_number(2015)\n    return ans\n\nans = solution()"
    ],
    "cb33eae512244d56b52f675bb43136e8": [
        "def solution():\n    # To find the age of the oldest one, we first need to find the age of the youngest dwarf.\n    # We know that the ages of the youngest three dwarfs form an arithmetic sequence, with a common difference of 1.\n    # Let the age of the youngest be y, then the next two ages are y + 1 and y + 2.\n    # The sum of their ages is 42, so y + (y + 1) + (y + 2) = 42.\n    # By simplifying this equation, we get 3y + 3 = 42, which gives us y = (42 - 3) / 3 = 13.\n    youngest_age = (42 - 3) // 3\n    # The oldest is 6 years older than the youngest (since the dwarfs were born in seven consecutive years),\n    # so we add 6 to the age of the youngest to get the age of the oldest.\n    oldest_age = youngest_age + 6\n    return oldest_age\n\nans = solution()"
    ],
    "1d5d5c2cc7ed4484b0ee32dc49820fea": [
        "def solution():\n    pears = 0\n    while True:\n        pears += 1\n        if (pears - 2) % 6 == 0 and (pears + 3) % 7 == 0:\n            return pears\n\nans = solution()"
    ],
    "ab6dabced7d2420b96da9161a985e3da": [
        "def solution():\n    # Let x be the initial number of passengers on the bus\n    passengers_left_after_first_stop = 3/5\n    passengers_left_after_second_stop = 2/3\n\n    # Calculate passengers left after both stops\n    passengers_remaining = 22\n\n    # Calculate initial number of passengers\n    initial_passengers = passengers_remaining / (passengers_left_after_first_stop * passengers_left_after_second_stop)\n\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "6fbfa557708a48f88080cdee949845ca": [
        "def solution():\n    original_length_cm = 10\n    sharpened_length_mm = 4\n    sharpened_length_cm = sharpened_length_mm / 10 # converting mm to cm\n\n    new_length = original_length_cm - sharpened_length_cm\n    return new_length\n\nans = solution()"
    ],
    "e8a7cdbe9f064caa8845fdc48753ccf2": [
        "def solution():\n    distance1 = 420\n    distance2 = 620\n    distance3 = 1200 - distance1 - distance2\n    \n    speed1 = 7\n    speed2 = 5\n    speed3 = 8\n    \n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    time3 = distance3 / speed3\n    \n    total_time = time1 + time2 + time3\n    \n    return total_time\n\nans = solution()"
    ],
    "60f2bc1eec7c407c8a6d23e10fdfedbd": [
        "def solution():\n    current_tests = 4\n    current_average = 89\n    target_average = 95\n\n    current_total = current_tests * current_average\n    max_score = 100\n\n    tests_needed = 0\n    while True:\n        tests_needed += 1\n        new_total = current_total + max_score * tests_needed\n        new_average = new_total / (current_tests + tests_needed)\n        if new_average >= target_average:\n            break\n\n    return tests_needed\n\nans = solution()"
    ],
    "1a6a4bcf3e384d149434758e9e9ee954": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let sam's stickers be 7x and Peter's stickers be 5x at first\n    # Let j be John's initial number of stickers\n    sam, peter, john = symbols('sam peter john')\n\n    # Sam and Peter each gave 20% of their stickers to John\n    # John's stickers increased by 80%\n    # We create three equations based on the information given\n    # sam - 0.2 * sam + peter - 0.2 * peter = 1.8 * john\n    # sam - 20 = john (since Sam had 20 stickers more than John in the end)\n    # sam / peter = 7 / 5 (the ratio of Sam's to Peter's stickers)\n\n    equation1 = Eq(sam - 0.2 * sam + peter - 0.2 * peter, 1.8 * john)\n    equation2 = Eq(sam - 20, john)\n    equation3 = Eq(sam / peter, 7 / 5)\n\n    # Solve the equations for sam, peter, and john\n    solutions = solve((equation1, equation2, equation3), (sam, peter, john))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "53f089451f8842afb473055ab5d608e1": [
        "def solution():\n    days = 4\n    meters_per_day = 75\n    total_length = days * meters_per_day\n    return total_length\n\nans = solution()"
    ],
    "7463bf137d564fbabe4d8eb8c8c7ee34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    two_dollar_notes, ten_dollar_notes = symbols('two_dollar_notes ten_dollar_notes')\n\n    # Equation 1: Total number of notes\n    equation1 = Eq(two_dollar_notes + ten_dollar_notes, 72)\n\n    # Using the information 'he was left with twice as many $10 notes as $2 notes'\n    # After spending, number of $10 notes left: ten_dollar_notes - 0.9 * ten_dollar_notes = 0.1 * ten_dollar_notes\n    # After spending, number of $2 notes left: two_dollar_notes - 0.75 * two_dollar_notes = 0.25 * two_dollar_notes\n    # Equation 2: Number of $10 notes left is twice the number of $2 notes left\n    equation2 = Eq(0.1 * ten_dollar_notes, 2 * (0.25 * two_dollar_notes))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (two_dollar_notes, ten_dollar_notes))\n\n    # Calculate the amount spent on the gift\n    # Spent $10 notes: 0.9 * ten_dollar_notes\n    # Spent $2 notes: 0.75 * two_dollar_notes\n    spent_ten_dollar_notes = 0.9 * solutions[ten_dollar_notes]\n    spent_two_dollar_notes = 0.75 * solutions[two_dollar_notes]\n\n    gift_cost = spent_ten_dollar_notes * 10 + spent_two_dollar_notes * 2\n\n    return gift_cost\n\nans = solution()"
    ],
    "289652248f414fe9bbafc2f88b401174": [
        "def solution():\n    # Following the Pigeonhole Principle,\n    # taking one from each color, we may still not have any two markers of the same color.\n    # So we need to take at least one more to be sure that we have at least two of the same color.\n    markers_needed = 3 + 1\n\n    return markers_needed\n\nans = solution()"
    ],
    "8c1bb4f017184cbfae594c5cfaf4d059": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Rates for each hose\n    rate_a, rate_b, rate_c = symbols('rate_a rate_b rate_c')\n\n    # System of equations based on the problem\n    equation1 = Eq(rate_a + rate_b, 1 / 9)\n    equation2 = Eq(rate_a + rate_c, 1 / 12)\n    equation3 = Eq(rate_b + rate_c, 1 / 18)\n\n    # Solve for individual rates\n    solutions = solve((equation1, equation2, equation3), (rate_a, rate_b, rate_c))\n    \n    # Get the total rate when all hoses work together\n    total_rate = solutions[rate_a] + solutions[rate_b] + solutions[rate_c]\n\n    # The time it takes to fill the pool with all three hoses is the inverse of the total rate\n    time_to_fill_with_all_hoses = 1 / total_rate\n\n    return time_to_fill_with_all_hoses.evalf()\n\nans = solution()"
    ],
    "d1e1ebce0b4843ca9292e8dbdda01d4d": [
        "def solution():\n    # Calculate the common difference of the sequence\n    term7 = 105\n    term8 = 120\n    common_difference = term8 - term7\n\n    # Calculate the first term based on the 7th term\n    first_term = term7 - common_difference * (7 - 1)\n    \n    # Calculate the 100th term using the formula: nth term = a + (n - 1) * d\n    term100 = first_term + (100 - 1) * common_difference\n    \n    return term100\n\nans = solution()"
    ],
    "cc22edf7a7fd4aa79216b432dcbeac61": [
        "def solution():\n    a = (14 - 8) / 3\n    return a\n\nans = solution()"
    ],
    "fc35d0defe2942ffad92505706ccc8ee": [
        "def solution():\n    # The smallest multiple of 2 starting from 2 is 2, 4, 6, 8, ...\n    # Since we have 10 boxes, and two boxes contain the same number of marbles,\n    # we will calculate for 9 different numbers of marbles first and then add the smallest number again.\n    marbles_count = [2 * i for i in range(1, 10)]\n    marbles_count.sort()\n    smallest_number_of_marbles = sum(marbles_count) + marbles_count[0]\n\n    return smallest_number_of_marbles\n\nans = solution()"
    ],
    "e2673569a0b943b292503bf53ce7b3a2": [
        "def solution():\n    return 894 // 3\n\nans = solution()"
    ],
    "3ec3a596e66c4dfcb4ea91b63a5bf969": [
        "def solution():\n    from fractions import Fraction\n\n    # Calculate the total amount of money Cellina had initially\n    total_spent_on_cupcakes_first = Fraction(5, 9) * 187.50 / Fraction(5, 6)\n    total_money = total_spent_on_cupcakes_first / Fraction(5, 9)\n\n    # Calculate the price of one cupcake\n    price_per_cupcake = 187.50 / (36 + total_money * Fraction(1, 6) / (total_spent_on_cupcakes_first / 36))\n\n    # Calculate the price of one muffin (one third of the price of a cupcake)\n    price_per_muffin = price_per_cupcake / 3\n\n    # Calculate the total amount spent on muffins\n    total_spent_on_muffins = 32 * price_per_muffin\n\n    return total_spent_on_muffins\n\nans = solution()"
    ],
    "a7840b9a2b4b4d80bcfb1955e50dedb1": [
        "def solution():\n    ans = sum(range(1, 10)) + sum(range(4, 9))\n    return ans\n\nans = solution()"
    ],
    "b6319f96909f43389019a555f34399dc": [
        "def solution():\n    # Let's denote x as the number of $2 notes and y as the number of $5 notes\n    # We have two equations:\n    # 1) x + y = 58 (total number of notes)\n    # 2) 2x + 5y = 164 (total value of all the money)\n    \n    # We can solve these two equations using substitution or elimination\n    # Let's solve for y using substitution\n    \n    # From 1) x = 58 - y\n    # Substitute x in 2) 2(58 - y) + 5y = 164\n    # 116 - 2y + 5y = 164\n    # 3y = 164 - 116\n    # 3y = 48\n    # y = 48 / 3\n    y = 48 // 3     # Use floor division to get an integer result\n    \n    return y\n\nans = solution()"
    ],
    "4f9c4a2d52664632815cca87ff3639cd": [
        "def solution():\n    parterres = 1007\n    sprinklers = parterres - 1\n    return sprinklers\n\nans = solution()"
    ],
    "13b735246ec440b287eb3433e89d8de3": [
        "def solution():\n    papaya_mass = 2 + 1/4\n    jackfruit_mass = 3 * papaya_mass\n    total_mass = papaya_mass + jackfruit_mass\n    return total_mass\n\nans = solution()"
    ],
    "df5ddf6fab1640afbbe79fdc2c9c6b0d": [
        "def solution():\n    steps = 1991\n    while True:\n        steps += 1\n        if str(steps) == str(steps)[::-1]:\n            break\n    return steps - 1991\n\nans = solution()"
    ],
    "eab847de393a4cc89be122fdacf06c1b": [
        "def solution():\n    total_pigeons = 75\n    total_cages = 20\n    min_pigeons_in_most_caged = (total_pigeons + total_cages - 1) // total_cages\n    return min_pigeons_in_most_caged\n\nans = solution()"
    ],
    "f621eb20ae1b443e9decb28c81cacff9": [
        "def solution():\n    num1 = 387\n    num2 = 729\n    average = (num1 + num2) / 2\n\n    return average\n\nans = solution()"
    ],
    "411dbd979ec64b9198f41e36f93de415": [
        "def solution():\n    # Since we can't use the same number twice and we need to form three-digit numbers,\n    # we choose 3 numbers out of the available 3 without replacement for each digit place.\n    # For the first digit, we have 3 choices (3, 4, 5),\n    # for the second digit, we have 2 choices (remaining two),\n    # and for the third digit, we have 1 choice (the last remaining number).\n    # We multiply these choices to get the total number of different three-digit numbers.\n\n    count = 3 * 2 * 1\n    return count\n\nans = solution()"
    ],
    "dbcf24f4b4254940a364df67ea2a66dd": [
        "def solution():\n    remaining_fraction = 5/9\n    given_away = 440\n\n    original_collection = given_away / (1 - remaining_fraction)\n\n    return int(original_collection)\n\nans = solution()"
    ],
    "8f05ca5aac6947c0a578b4f78816fdeb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variable for total road length\n    total_length = symbols('total_length')\n\n    # Create equations based on the problem statement\n    equation = Eq(8 + (1/6)*total_length + 4, (5/12)*total_length)\n\n    # Solve the equation to find the total length of the road\n    solutions = solve(equation, total_length)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "a6f199354188491987e033f7760fc3d5": [
        "def solution():\n    # Total perimeter of the field\n    perimeter = 2 * (144 + 204)\n    \n    # Total number of spaces between wheat plants = Total wheat - 1\n    spaces = 116 - 1\n    \n    # Distance between each wheat plant is perimeter divided by the number of spaces\n    distance = perimeter / spaces\n\n    return distance\n\nans = solution()"
    ],
    "ee9f3d0764634811a0757f003abad19d": [
        "def solution():\n    heights = [102, 98, 120, 80]\n    average_height = sum(heights) / len(heights)\n    return average_height\n\nans = solution()"
    ],
    "3722f385e5304408b4bd51d4538ed104": [
        "def solution():\n    # Because the number ends with '35', we can start checking from 100*35.\n    # This is because 100*35 = 3500, which ends with '35'\n    multiple = 100\n    while True:\n        candidate = 35 * multiple\n        # The sum of the digits of the candidate must be 35.\n        if sum(int(digit) for digit in str(candidate)) == 35:\n            ans = candidate\n            break\n        multiple += 1\n    return ans\n\nans = solution()"
    ],
    "7b38d775bba24657ba681d25822af411": [
        "def solution():\n    # Let x be the initial number of stickers Alexis had\n    # Then Mary had 7/5 * x stickers initially\n    # After giving 20%, they are left with 80% of their stickers\n    # Mary is left with 0.8 * (7/5 * x) stickers and Alexis with 0.8 * x stickers\n    # Charlotte initially had y stickers and after receiving 20% from each,\n    # she increased her stickers by 80%, i.e., she now has 1.8 * y stickers\n    # The increase in Charlotte's stickers is 0.2 * (7/5 * x) + 0.2 * x\n    # This increase should be equal to y * 80%, i.e., 0.8 * y\n    # Hence, 0.2 * (7/5 * x) + 0.2 * x = 0.8 * y\n    # Also, after giving away stickers, Mary has 20 more than Charlotte\n    # 0.8 * (7/5 * x) = 1.8 * y + 20\n\n    # We will solve the two equations:\n    # (7/5)x * 0.2 + x * 0.2 = y * 0.8\n    # (7/5)x * 0.8 = y * 1.8 + 20\n\n    # Solve for x and y\n    from sympy.solvers import solve\n    from sympy import Symbol\n\n    x = Symbol('x')\n    y = Symbol('y')\n\n    # Equation 1 from the explanations above: 0.2 * (7/5 * x) + 0.2 * x = 0.8 * y\n    equation1 = 0.2 * (7/5 * x) + 0.2 * x - 0.8 * y\n    # Equation 2 from the explanations above: (7/5 * x) * 0.8 = y * 1.8 + 20\n    equation2 = (7/5 * x) * 0.8 - y * 1.8 - 20\n\n    # Use the solve function to solve for x and y\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Extract the value of x, which is the initial number of stickers Alexis had\n    alexis_initial_stickers = solutions[x]\n\n    # Return the number of stickers as an integer\n    return int(alexis_initial_stickers)\n\nans = solution()"
    ],
    "2c1659a425074c80b8d88dda965c59d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Create symbols for the number of sunny and rainy days\n    sunny_days, rainy_days = symbols('sunny_days rainy_days')\n    \n    # One equation for the total number of days\n    equation1 = Eq(sunny_days + rainy_days, 8)\n    # Another equation for the total number of pine nuts collected\n    equation2 = Eq(20*sunny_days + 12*rainy_days, 112)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sunny_days, rainy_days))\n    \n    return solutions[rainy_days]\n\nans = solution()"
    ],
    "c53620b9ca634a889e36b3bf16163ca2": [
        "def solution():\n    # Prices in pence for better accuracy while computing\n    price_single = 15\n    price_pair = 28\n    price_pack = 60\n\n    # Maximum number of packs, pairs, and singles Ben can buy\n    max_packs = 17 // 5\n    min_cost = float('inf')\n    \n    for packs in range(max_packs + 1):\n        for pairs in range((17 - (5 * packs)) // 2 + 1):\n            singles = 17 - (5 * packs) - (2 * pairs)\n            cost = (price_pack * packs) + (price_pair * pairs) + (price_single * singles)\n            min_cost = min(min_cost, cost)\n    \n    # Convert pence to pounds\n    return min_cost / 100\n\nans = solution()"
    ],
    "f994d8dfd7f44217b9637c5e8ba447d8": [
        "def solution():\n    first_question_correct = 10\n    second_question_correct = 15\n    both_questions_correct = 7\n\n    only_one_question_correct = (first_question_correct - both_questions_correct) + (second_question_correct - both_questions_correct)\n\n    return only_one_question_correct\n\nans = solution()"
    ],
    "daccc8a42fc0479db52cec10235601e6": [
        "from datetime import datetime\n\ndef solution():\n    start_date = datetime.strptime('4/4/2023', '%d/%m/%Y')\n    end_date = datetime.strptime('18/5/2023', '%d/%m/%Y')\n    days_off = (end_date - start_date).days + 1\n    return days_off\n\nans = solution()"
    ],
    "a0d71a6e29644023a0cc17a608bc01dc": [
        "def solution():\n    # In a knockout tournament, each match eliminates one player.\n    # With four players, the minimum number of rounds needed\n    # to determine a winner is the number of rounds \n    # needed to eliminate three players (since the last one standing is the winner).\n    \n    # In each round, the number of players decreases by half (assuming no ties).\n    # So the number of rounds needed is simply the log base 2 of the number of players.\n    \n    # Since we have 4 players, log2(4) is 2. Therefore, it will take 2 rounds.\n    \n    return 2\n\nans = solution()"
    ],
    "3059ea77d08247578ee3a70a3f475405": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq((rachel - 8) / 3, alice - 8)\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    total_candy = solutions[rachel] + solutions[alice]\n\n    return total_candy\n\nans = solution()"
    ],
    "4f3b48792a094028b1bc267e22a30835": [
        "def solution():\n    speed = 42 # Speed of train in m/s\n    time = 5 # Time in seconds\n\n    length_of_train = speed * time # Distance = Speed * Time\n\n    return length_of_train\n\nans = solution()"
    ],
    "47562186606a4d038d9527452b08ffc2": [
        "def solution():\n    fib = [1, 1]  # Starting the Fibonacci sequence with the given terms.\n    while len(fib) < 8:  # Since we already have two terms, we need six more to make it eight.\n        # The new term is the sum of the last two terms in the sequence.\n        fib.append(fib[-1] + fib[-2])\n    # The next number in the Fibonacci series after the 8th term is calculated in the same way.\n    ans = fib[-1] + fib[-2]\n    return ans\n\nans = solution()"
    ],
    "5907fd55c3fc43edb065e669513c11e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    first_hour, second_hour = symbols('first_hour second_hour')\n    \n    equation1 = Eq(first_hour + second_hour, 40)\n    equation2 = Eq(first_hour + 26, second_hour)\n    \n    solutions = solve((equation1, equation2), (first_hour, second_hour))\n    \n    return solutions[second_hour]\n\nans = solution()"
    ],
    "5e3f58e8aa7b463281a06313c58c9dfc": [
        "def solution():\n    for num_brushes in range(4):  # Bud spends less than £10 on brushes so she can't buy more than 3 brushes.\n        money_spent_on_brushes = num_brushes * 3\n        remaining_money = 59 - money_spent_on_brushes\n        if remaining_money % 10 == 0:  # If remaining money is a multiple of £10, it's possible to buy towels.\n            return num_brushes\n            \nans = solution()"
    ],
    "bfacb76c25624bfc8d5d2c06215023ad": [
        "def solution():\n    expressions = [\n        '285+15/5-2',  # No brackets\n        '(285+15)/5-2',  # One pair around 285+15\n        '285+(15/5)-2',  # One pair around 15/5\n        '285+15/(5-2)',  # One pair around 5-2\n        '(285+15)/(5-2)',  # One pair around 285+15 and one pair around 5-2\n        '((285+15)/5)-2',  # One pair around 285+15 and another around (285+15)/5\n        '285+(15/(5-2))',  # Nested brackets around 5-2 first and then around 15/(5-2)\n        '(285+(15/5))-2'  # One pair around 285+(15/5) and none around 5-2\n    ]\n\n    distinct_results = set()\n    for expr in expressions:\n        result = eval(expr)\n        distinct_results.add(result)\n\n    return len(distinct_results)\n\nans = solution()"
    ],
    "2a082a4e041f4b3e973245a4c33b3b27": [
        "def solution():\n    from fractions import Fraction\n    ans = Fraction(0.49).limit_denominator()\n    return ans\n\nans = solution()"
    ],
    "1f65bc2d548c462284458547726c98be": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7 * x + 8, 71)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a329051d839b463a826c9d78e15a0b08": [
        "def solution():\n    pink = 9\n    grey = 7\n    blue = 11\n\n    # To ensure a blue marble is drawn, draw all pink and grey marbles first.\n    non_blue = pink + grey\n    # Now draw one more, which must be blue.\n    marbles_to_draw = non_blue + 1\n\n    return marbles_to_draw\n\nans = solution()"
    ],
    "2032d412937a4167a615ecb8aa60b3ea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rick, morty = symbols('rick morty')\n\n    equation1 = Eq(rick - 70, morty + 70 + 20)\n    equation2 = Eq(rick, 9 * morty)\n\n    solutions = solve((equation1, equation2), (rick, morty))\n\n    return solutions[rick]\n\nans = solution()"
    ],
    "c762956fba3241bd967d57b33577e2de": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['0', '1', '8']\n    perms = permutations(digits, 3)\n    count = 0\n    for p in perms:\n        if p[0] != '0':  # Exclude numbers that start with 0 as they aren't three-digit.\n            count += 1\n    return count\n\nans = solution()"
    ],
    "66a11fd054514f65b3baf9ede59874a5": [
        "def solution():\n    ans = 262 + 8\n    return ans\n\nans = solution()"
    ],
    "f60e137f7250477d8b286d3f212c854b": [
        "def solution():\n    total_days = 5\n    total_bears = 35\n    increment_per_day = 2\n\n    # Let the number of teddy bears made on the first day be x.\n    # Then, the total number of teddy bears made over 5 days is:\n    # x + (x + 2) + (x + 4) + (x + 6) + (x + 8)\n    # The sum of an arithmetic sequence is given by:\n    # (number of terms / 2) * (first term + last term)\n    # Total teddy bears is 35, so we set up the equation and solve for x:\n    # (5 / 2) * (2x + 8) = 35\n    # Simplify and solve for x:\n    # 5x + 20 = 35 * 2\n    # 5x = 70 - 20\n    # x = (70 - 20) / 5\n    first_day_bears = (total_bears * 2 - total_days * increment_per_day) / total_days\n\n    # Teddy bears made on the fifth day is:\n    # x + 4 * increment_per_day\n    fifth_day_bears = first_day_bears + 4 * increment_per_day\n\n    return int(fifth_day_bears)\n\nans = solution()"
    ],
    "49922fe7ff9a40c38d907ed0e51522ca": [
        "def solution():\n    miles_per_day = 23\n    number_of_days = 14  # two weeks\n\n    total_miles = miles_per_day * number_of_days\n\n    return total_miles\n\nans = solution()"
    ],
    "f9992ec9b0a34d969a70763f33c68a29": [
        "def solution():\n    tax_rate = 7.5 / 100\n    tax_paid = 30\n\n    price_of_computer = tax_paid / tax_rate\n\n    return price_of_computer\n\nans = solution()"
    ],
    "aa18065f01ed471dbddb2b83716b2ed7": [
        "def solution():\n    part = 3/10\n    whole = 6/7\n    percentage = (part / whole) * 100\n    return percentage\n\nans = solution()"
    ],
    "39ac38c32dc74df58ea6b0d18c06ad13": [
        "from itertools import permutations\nfrom math import gcd\n\ndef solution():\n    count = 0\n\n    # Check all permutations of numbers 1 to 8\n    for perm in permutations(range(1, 9)):\n        # Check if each adjacent pair is coprime\n        if all(gcd(perm[i], perm[i+1]) == 1 for i in range(len(perm) - 1)):\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "7c10a4083da5483c963882fa31bda8ad": [
        "def solution():\n    return 300 - 9 - 19 - 29 - 39 - 49 - 59\n\nans = solution()"
    ],
    "1db0cce1e16144579673d8e8a9fc0654": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(girls, boys + 30)\n    equation2 = Eq((3/5)*boys, (5/8)*girls)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "d17c4969cf134fab95adbf60e4d9650c": [
        "def solution():\n    amy = 26\n    john = 8\n    s = (amy - john) // 2  # Divide the difference by 2 to equalize their numbers\n\n    return s\n\nans = solution()"
    ],
    "e7ddf473a2ae4816b3668ad9956ebcfa": [
        "def solution():\n    for i in range(24):\n        if (24 - i) / 4 == 4:\n            ans = i\n            break\n    return ans\n\nans = solution()"
    ],
    "304401f32f204704929d05f5f2f6f8b4": [
        "def solution():\n    # Let x be the number of dragonflies at the beginning\n    # Since there are 9 more frogs than dragonflies at the beginning,\n    # The number of frogs will be x + 9\n\n    # After the magic show, there are 11 frogs and 10 dragonflies\n    # We know that the number of frogs and dragonflies before and after must be conserved\n    # Since the sum of frogs and dragonflies after the show is 21, it should be the same before\n    # So we can say that at the beginning, the total number of frogs and dragonflies is also 21\n\n    # Now we can set up the equation:\n    # x (dragonflies) + (x + 9) (frogs) = 21 (total)\n    # 2x + 9 = 21\n    # 2x = 21 - 9\n    # x = 12 / 2\n    # x = 6 dragonflies at the beginning\n\n    # Therefore, there were x + 9 = 6 + 9 = 15 frogs at the beginning\n    frogs_at_beginning = 6 + 9\n\n    return frogs_at_beginning\n\nans = solution()"
    ],
    "3e007fd230a249ff8d05a19fcfe583ba": [
        "def solution():\n    # Original expression without brackets\n    original = 285 + 15 / 5 - 2\n    \n    # Possible ways to insert brackets in the expression:\n    # (1) Around addition/subtraction and division\n    a1 = (285 + 15) / 5 - 2\n    a2 = 285 + (15 / 5 - 2)\n    \n    # (2) Around the whole addition and the division\n    b1 = (285 + 15) / (5 - 2)\n    \n    # (3) Around the last two operations\n    c1 = 285 + (15 / (5 - 2))\n    \n    # Calculating unique results\n    results = {original, a1, a2, b1, c1}\n    \n    return len(results)\n\nans = solution()"
    ],
    "d188d39b891542928d1912e7274a2caa": [
        "def solution():\n    total_sum = 0\n    sign = 1\n    for i in range(100, 0, -1):\n        total_sum += i * sign\n        sign *= -1\n    return total_sum\n\nans = solution()"
    ],
    "eb34430f7cb249a8a572783eee511d5a": [
        "def solution():\n    jack_cards = 42\n    tom_cards = 38\n    james_cards = 3 * (jack_cards + tom_cards)\n    return james_cards\n\nans = solution()"
    ],
    "d7ded10e6b6742babab86ac9a55feb15": [
        "def solution():\n    ans = 11.38 / 100\n    return ans\n\nans = solution()"
    ],
    "c475b1643de744428b44276a9212a842": [
        "def solution():\n    A_B_rate = 1/3\n    B_C_rate = 1/4\n    A_C_rate = 1/8\n\n    # Add all rates together (A + B + C) = A_B_rate + B_C_rate + A_C_rate - (B_rate twice added)\n    A_plus_B_plus_C = A_B_rate + B_C_rate + A_C_rate - (1/4)\n\n    # Calculate how long it takes for A, B, and C to complete the job together\n    time_for_ABC_together = 1 / A_plus_B_plus_C\n\n    return time_for_ABC_together\n\nans = solution()"
    ],
    "142a0e7cf7264398809cd19740d822d4": [
        "def solution():\n    ans = 9678 * 8\n    return ans\n\nans = solution()"
    ],
    "7b23b760c2484da8af4bc6eead1035fc": [
        "def solution():\n    boys = 42\n    boy_to_girl_ratio = 3 / 2\n    girls = boys / boy_to_girl_ratio\n    return int(girls)\n\nans = solution()"
    ],
    "5474f73e5ab6431890df2e54e821b742": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variable for the amount of 15% sugar water needed\n    x = symbols('x')\n    \n    # Equation based on the concentration of sugar\n    equation = Eq(0.45 * 2 + 0.15 * x, 0.25 * (2 + x))\n    \n    # Solve the equation\n    amount_15_percent_sugar_water = solve(equation, x)\n\n    return amount_15_percent_sugar_water[0]\n\nans = solution()"
    ],
    "063df5600f0440a196ad7fccf9a7bf8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the number of coins each person has\n    johnson, vicky = symbols('johnson vicky')\n\n    # Equation for the total number of coins\n    total_coins_eq = Eq(johnson + vicky, 48)\n    \n    # Equation representing the scenario where Johnson gives Vicky 8 coins\n    # Vicky will have 2 fewer coins than Johnson afterwards\n    vicky_gets_8_eq = Eq(vicky + 8, johnson - 8 - 2)\n    \n    # Solve the system of equations\n    solutions = solve((total_coins_eq, vicky_gets_8_eq), (johnson, vicky))\n\n    # Johnson's coins\n    return solutions[johnson]\n\nans = solution()"
    ],
    "300d9dec8c7842cfa4010c28ded862c2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candies, kids = symbols('candies kids')\n\n    equation1 = Eq(kids*18 + 12, candies)\n    equation2 = Eq((kids + 2)*15, candies)\n\n    solutions = solve((equation1, equation2), (candies, kids))\n\n    return solutions[candies]\n\nans = solution()"
    ],
    "0774e88f23d347fc960a7df67aa5cea5": [
        "def solution():\n    # Initialize the total sum S to zero.\n    S = 0\n    \n    # Calculate the sum of the series where each term is the previous term\n    # plus 2 * 10 to the power of the number of digit-2s already added.\n    for i in range(2017):\n        S += int('2' * (i + 1))\n        \n    # Convert the sum to a string to easily get the last five digits.\n    S_str = str(S)\n    \n    # Slice the last five digits. If there are fewer than five digits,\n    # the last digits string will contain all the digits.\n    last_five_digits = S_str[-5:]\n    \n    # Convert the last five digits to an integer and return the sum.\n    ans = sum([int(digit) for digit in last_five_digits])\n    \n    return ans\n\nans = solution()"
    ],
    "7e9903ea9c5d4ad4b4d9e47668802818": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, eugene = symbols('david eugene')\n\n    equation1 = Eq(david, 3 * eugene)\n    equation2 = Eq(david, eugene + 14)\n\n    solutions = solve((equation1, equation2), (david, eugene))\n\n    total_cupcakes = solutions[david] + solutions[eugene]\n\n    return total_cupcakes\n\nans = solution()"
    ],
    "f1a2fc61d2954912aabcdce67bec8fd1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, tim = symbols('sam tim')\n    # After eating and buying, Sam has sam - sam/4 and Tim has tim + tim/5\n    equation1 = Eq(sam - sam / 4 + tim + tim / 5, 1170)\n    # Sam has 663 fewer cookies than Tim after the changes\n    equation2 = Eq(sam - sam / 4, tim + tim / 5 - 663)\n\n    # Solve the system of equations for sam and tim\n    solutions = solve((equation1, equation2), (sam, tim))\n\n    # Calculate the amount Sam ate\n    sam_ate = solutions[sam] / 4\n\n    return sam_ate\n\nans = solution()"
    ],
    "699981dcd6d84d42b6e018723ba6a619": [
        "def solution():\n    return 297 + 196 + 388 + 199\n\nans = solution()"
    ],
    "0cfb180ff80343978b552cedc1149839": [
        "def solution():\n    # Sara's final answer was 77\n    final_answer = 77\n    \n    # The operation before getting the answer was multiplication by 7\n    # So to find the number after she added 6, we divide the final answer by 7\n    after_adding_6 = final_answer / 7\n    \n    # The operation before adding 6 was that she thought of a number\n    # So to find the original number, we subtract 6 from the number after adding 6\n    original_number = after_adding_6 - 6\n    \n    return original_number\n\nans = solution()"
    ],
    "3d69ea36244c47f49f012029d94f587c": [
        "def solution():\n    beef_weight = 0.6\n    total_cost = 11.4\n\n    cost_per_kg = total_cost / beef_weight\n\n    return cost_per_kg\n\nans = solution()"
    ],
    "b4f91c464064460aa19ddf1c6a62ab91": [
        "def solution():\n    daily_pick = 24 / 6\n    total_pick = daily_pick * 8\n    return total_pick\n\nans = solution()"
    ],
    "5bd506abd39a478abeb0aa9d9fdb559b": [
        "def solution():\n    # initial number of stamps\n    sally_stamps = 40\n    ting_stamps = 32\n\n    # Let x be the number of stamps Sally gives to Ting\n    # After giving the stamps, Sally has (40 - x) stamps\n    # Ting has (32 + x) stamps\n    # The ratio of Sally's stamps to Ting's stamps is 1:2\n    # Therefore (40 - x) / (32 + x) = 1/2\n    # Solving for x gives x = (2 * 40 - 32) / 3\n\n    x = (2 * sally_stamps - ting_stamps) / 3\n\n    # Ting's final number of stamps is 32 + x\n\n    ting_final_stamps = ting_stamps + x\n\n    return int(ting_final_stamps)\n\nans = solution()"
    ],
    "7082213a798d483d975ec38c9264a87a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let t be the time (in minutes) David walks at the increased speed\n    t = symbols('t')\n    \n    # David walks for 10 minutes at 150 m/min and then t minutes at (150+50)m/min\n    # Total distance is the sum of the two parts: 150*10 + (150+50)*t = 3700\n    equation = Eq(150 * 10 + (150 + 50) * t, 3700)\n    \n    # Solve for t\n    time_at_increased_speed = solve(equation, t)[0]\n    \n    # Total time spent walking in the park is the initial 10 minutes \n    # plus the time at the increased speed\n    total_time = 10 + time_at_increased_speed\n\n    return total_time\n\nans = solution()"
    ],
    "e308e1fd22e34cdb9709c55c86942efe": [
        "def solution():\n    sissy_candy = 9\n    lily_candy = 7\n    total_candy = sissy_candy + lily_candy\n    return total_candy\n\nans = solution()"
    ],
    "c9845a2160b54fd095573f962d57e562": [
        "def solution():\n    combined_rate = 1 / 6  # The rate at which Tom and Jerry together can finish the job (jobs per hour)\n    jerry_rate = 1 / 18  # The rate at which Jerry alone can finish the job (jobs per hour)\n    \n    # Let tom_rate be the rate at which Tom alone can finish the job (jobs per hour)\n    # Then we have the equation:\n    # tom_rate + jerry_rate = combined_rate\n    \n    tom_rate = combined_rate - jerry_rate  # Solving for tom_rate\n    \n    # The time taken by Tom to finish the job is the reciprocal of his rate\n    tom_time = 1 / tom_rate\n    \n    return tom_time\n\nans = solution()"
    ],
    "3626f191924141a1b2eafb54a9e067f3": [
        "def solution():\n    total_money = 20\n    price_per_packet = 4\n    sweets_per_packet = 8\n    free_sweets_condition = 2  # One free sweet for every two packets\n\n    # Find out how many packets can be bought with $20\n    packets_bought = total_money // price_per_packet\n\n    # Calculate the total sweets from bought packets\n    sweets_from_packets = packets_bought * sweets_per_packet\n\n    # Calculate the number of free sweets\n    free_sweets = packets_bought // free_sweets_condition\n\n    # Maximum number of sweets is the sum of sweets from packets and free sweets\n    max_sweets = sweets_from_packets + free_sweets\n\n    return max_sweets\n\nans = solution()"
    ],
    "a02bf655141845c2bd2c46d349316684": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Since the number leaves a remainder of 1 when divided by 2, 3, 4, or 6,\n    # We can write the following congruences:\n    # number % 2 = 1, number % 3 = 1, number % 4 = 1, number % 6 = 1\n    # And also the number is divisible by 7, so number % 7 = 0  \n    # To simplify, we notice that the condition for 4 and 6 implies the condition for 2,\n    # so we only need to consider the congruences for 3, 4, 6, and 7.\n    # We can use the Chinese Remainder Theorem to solve these congruences.\n    \n    congruences = [(1, 3), (1, 4), (1, 6), (0, 7)]\n    number, _ = solve_congruence(*congruences)\n    \n    # Now we find the smallest number that satisfies the above congruences and is between 200 and 300\n    while number < 200:\n        number += 3*4*6*7 # increase by the product of the moduli to maintain the congruence\n\n    return number\n\nans = solution()"
    ],
    "6ff1aeeafc744e33a64e02e90286d5c2": [
        "def solution():\n    decimal_value = 0.4 - 1/4\n    return decimal_value\n\nans = solution()"
    ],
    "24fc3628e5b54a6b862cebd30089e10d": [
        "def solution():\n    # assume the child who gets the most gets x pieces,\n    # then we have 7 children left and we need to distribute\n    # (88 - x) candies such that no two children get the same number of pieces\n    # and each gets at least one piece.\n    # The minimum sum for 1 to 7 natural numbers is the sum of the first seven natural numbers.\n    \n    # calculate the sum of the first seven natural numbers\n    min_sum = sum(range(1, 8))\n    \n    # calculate the number of candies remaining after giving out the minimum number of candies to the 7 children\n    candies_remaining = 88 - min_sum\n    \n    # The child with the most pieces will receive the remaining candies\n    # after the others have received their minimum amount (1 to 7 respectively)\n    max_pieces = candies_remaining\n\n    return max_pieces\n\nans = solution()"
    ],
    "3afd6466bf0841adb2f6d6bd84bf3bad": [
        "def solution():\n    from math import factorial\n\n    def find_trailing_zeros(num):\n        count = 0\n        while num % 10 == 0:\n            count += 1\n            num //= 10\n        return count\n\n    fact_16 = factorial(16)\n    ans = find_trailing_zeros(fact_16)\n    return ans\n\nans = solution()"
    ],
    "e7f93b20fa1949a5b96d163190fe511f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    \n    # Equation representing the initial condition (40% more boys than girls)\n    equation1 = Eq(boys, girls + 0.4 * girls)\n    \n    # Equation representing the condition after 24 boys and 24 girls left\n    equation2 = Eq(boys - 24, 1.5 * (girls - 24))\n    \n    # Solving the equations\n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    return int(solutions[boys])\n\nans = solution()"
    ],
    "02ae9d804ee04428807ccf0347735e1f": [
        "def solution():\n    # Initial number of pink counters\n    pink = 5\n    # Total number of counters initially\n    total = 5 + 7 + 8\n\n    # Probability of picking a pink counter initially\n    initial_probability = pink / total\n\n    # We want to double this probability\n    desired_probability = initial_probability * 2\n\n    # Let x be the number of extra pink counters to add\n    # New probability with x extra pink counters:\n    # (pink + x) / (total + x)\n    # Set this equal to the desired probability and solve for x\n    # (pink + x) / (total + x) = desired_probability\n    # (pink + x) = desired_probability * (total + x)\n    # pink + x = desired_probability * total + desired_probability * x\n    # x - desired_probability * x = desired_probability * total - pink\n    # x * (1 - desired_probability) = desired_probability * total - pink\n    # x = (desired_probability * total - pink) / (1 - desired_probability)\n\n    x = (desired_probability * total - pink) / (1 - desired_probability)\n\n    # We'll round up since we can't add a fraction of a counter\n    from math import ceil\n    return ceil(x)\n\nans = solution()"
    ],
    "424f5f08f14e449d86908c4063ea4d54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(5 * x + 7, 47)\n    \n    sol = solve(equation, x)\n    return sol[0]\n\nans = solution()"
    ],
    "09a7409bcc7b41bab933d472b6cf9c72": [
        "def solution():\n    # We want at least two pairs of the same color, which means three pairs in total.\n    # If Cindy picks up one pair (two socks) of each color, she will have three pairs, but not two pairs of the same color.\n    # After that, any additional sock she picks will guarantee a second pair of the same color.\n    # So, the calculation is as follows:\n    # 2 (black) + 2 (grey) + 2 (red) = 6 (one pair of each color)\n    # One more sock guarantees at least two pairs of the same color: 6 + 1 = 7\n    return 7\n\nans = solution()"
    ],
    "460949f85e3c4effbfebde69b6a70325": [
        "def solution():\n    ans = 278 + 127\n    return ans\n\nans = solution()"
    ],
    "ec10bd49f8c6457cb449008b7df6d3b1": [
        "def solution():\n    # Let the original number of cupcakes and muffins be x\n    # After selling, muffins left: x - 12\n    # After selling, cupcakes left: x - 60\n    # According to the condition, muffins left is twice the cupcakes left:\n    # x - 12 = 2 * (x - 60)\n    \n    # Solving the equation\n    x = symbols('x')\n    equation = Eq(x - 12, 2 * (x - 60))\n    original_number = solve(equation, x)\n    \n    # The total number at first is twice the original number of cupcakes or muffins\n    total = original_number[0] * 2\n    \n    return total\n\nans = solution()"
    ],
    "d27388e49bb147658b5c5f6726146dbd": [
        "def solution():\n    shanghai_to_los_angeles = 12.25\n    los_angeles_to_shanghai = 12.25 + 1.5\n    round_trip_time = shanghai_to_los_angeles + los_angeles_to_shanghai\n    return round_trip_time\n\nans = solution()"
    ],
    "28ed05faea8a41e59403eb56b72c9a55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the pocket money Helen receives each day\n    helen_daily, george_daily = symbols('helen_daily george_daily')\n\n    # George receives $3 more pocket money than Helen every day\n    equation1 = Eq(george_daily, helen_daily + 3)\n\n    # Each of them spends $5 a day\n    helen_saving_daily = helen_daily - 5\n    george_saving_daily = george_daily - 5\n\n    # When Helen saves $60 in total, George would have saved $90 more than Helen\n    # Let's find the number of days it takes for Helen to save $60\n    # Helen_saving_daily * number_of_days = $60\n    # And for the same number of days, George's savings would be:\n    # George_saving_daily * number_of_days = Helen's savings + $90\n    # So the equation would be:\n    # George_saving_daily * number_of_days = $60 + $90\n    equation2 = Eq(george_saving_daily * (60 / helen_saving_daily), 60 + 90)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (helen_daily, george_daily))\n\n    return solutions[helen_daily]\n\nans = solution()"
    ],
    "76b97ba68b034e2aabd4b14679196416": [
        "def solution():\n    series_sum = sum(range(1, 31))  # Sum of 1 to 30\n    series_sum += sum(range(1, 30))  # Sum of 1 to 29\n    return series_sum\n\nans = solution()"
    ],
    "68de1a3c2c7a42e5878f6678167e988b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eddi, wiya = symbols('eddi wiya')\n    # Initial ratio\n    equation1 = Eq(eddi/wiya, 3/2)\n    # New ratio after Lisa gives Eddi $4\n    equation2 = Eq((eddi + 4)/wiya, 8/5)\n\n    solutions = solve((equation1, equation2), (eddi, wiya))\n\n    return solutions[wiya]\n\nans = solution()"
    ],
    "47b5be5fc2a54717be3e247384b899b4": [
        "def solution():\n    total_students = 37\n    sport_class = 18\n    reading_class = 22\n\n    both_classes = sport_class + reading_class - total_students\n\n    return both_classes\n\nans = solution()"
    ],
    "4432e80fba244f3683780a9b58ec36db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the arithmetic progression\n    a, d = symbols('a d')  # a is the first term, d is the common difference\n\n    # Given the 9th term is 18 larger than the 15th term\n    equation1 = Eq(a + 8*d, (a + 14*d) + 18)\n\n    # The sum of the 20th term and the 12th term is 88\n    equation2 = Eq((a + 19*d) + (a + 11*d), 88)\n\n    # Solve the equations to find a and d\n    solutions = solve((equation1, equation2), (a, d))\n\n    # Find the 32nd term based on a and d\n    a_val = solutions[a]\n    d_val = solutions[d]\n    nth_term = a_val + 31*d_val\n\n    return nth_term\n\nans = solution()"
    ],
    "f1b52139fff84b708e70c8798718411d": [
        "def solution():\n    total_penpals = 11\n    total_pages = 38\n    for three_page_letters in range(total_penpals + 1):\n        four_page_letters = total_penpals - three_page_letters\n        if 3 * three_page_letters + 4 * four_page_letters == total_pages:\n            return three_page_letters\n\nans = solution()"
    ],
    "3934fba87a6f49588fd973f95f1b42fa": [
        "def solution():\n    minutes = 180\n    hours = minutes / 60\n    return hours\n\nans = solution()"
    ],
    "51d10a94ff2b458f8e10c3ad1c546dd9": [
        "def solution():\n    # Distance covered in the first 2 hours\n    initial_distance = 2 * 40  # speed * time\n\n    # Remaining distance\n    remaining_distance = 280\n\n    # Time taken for the remaining distance\n    remaining_time = remaining_distance / 70  # distance / speed\n\n    # Total distance covered\n    total_distance = initial_distance + remaining_distance\n\n    # Total time taken\n    total_time = 2 + remaining_time\n\n    # Average speed\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "8270a7ab11474b5c9b8d4b50e94ccec5": [
        "def solution():\n    number = 768354\n    digit_str = str(number)\n    position = digit_str.index('8')\n    value_of_8 = 10 ** (len(digit_str) - position - 1)\n    return value_of_8\n\nans = solution()"
    ],
    "18d62414fcc14256a14001acd25ead4d": [
        "def solution():\n    from math import lcm\n    \n    packet_25_cycle = 25\n    packet_20_cycle = 20\n    \n    days_until_sync = lcm(packet_25_cycle, packet_20_cycle)\n    \n    return days_until_sync\n\nans = solution()"
    ],
    "f765b179fd664d7283eb3748010a8192": [
        "def solution():\n    total = 0\n    \n    # Case 1: The number has exactly two sevens\n    # Position of the non-seven in the three-digit number (index 0, 1, 2)\n    for pos in range(3):\n        # Non-seven digit is not at the first position (can't be 0)\n        if pos == 0:\n            total += 9 # 1 to 9\n        # Non-seven digit is at first position, can be 0 too\n        else:\n            total += 10 # 0 to 9\n    \n    # Case 2: The number has three sevens\n    # Only one three-digit number with all digits as seven\n    total += 1\n    \n    # Case 3: Subtract the count of invalid numbers with no sevens or one seven at first position\n    # Numbers with no sevens in three-digit format\n    non_sevens = (9 * 9 * 9) # Options for each digit (excluding 7)\n\n    # Numbers with one seven at the first position in a three-digit number\n    one_seven_first = 9 * 9 # Options for the remaining two digits (excluding 7)\n    \n    # Subtract the invalid numbers from the total count\n    total -= (non_sevens + one_seven_first)\n    \n    return total\n\nans = solution()"
    ],
    "205d168df66c45e39d3bf4f711e8f6fc": [
        "from fractions import Fraction\n\ndef solution():\n    # Given A = 1\n    A = Fraction(1)\n\n    # A Δ ai for i from 1 to 6\n    delta_values = [\n        Fraction(1, 2), Fraction(2, 3), Fraction(7, 8), \n        Fraction(29, 30), Fraction(139, 144), Fraction(839, 840)\n    ]\n\n    # Calculate ai using the operation A Δ ai = A - ai\n    # which implies ai = A - (A Δ ai)\n    a_values = [A - delta for delta in delta_values]\n\n    # Since A = a0 + a1 + a2 + a3 + a4 + a5 + a6 = 1\n    # We can calculate a0 as A - sum(a_values[1:6])\n    a0 = A - sum(a_values)\n\n    # Simplify and find m/n for a0\n    a0 = a0.limit_denominator()  # Ensure a0 is in simplest form\n    m = a0.numerator\n    n = a0.denominator\n    \n    return m + n\n\nans = solution()"
    ],
    "467efc939dfd4170ba4658e1f6f2cb7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original number Aiden should have multiplied by 4\n    x = symbols('x')\n    \n    # Equation representing Aiden's mistake (dividing by 4 instead of multiplying, \n    # and subtracting 25 instead of adding)\n    # mistake = (x / 4) - 25\n    # correct = (4 * x) + 25\n    # According to the question, mistake = 2021\n    mistake_eq = Eq((x / 4) - 25, 2021)\n\n    # Solve the equation for x\n    mistaken_value = solve(mistake_eq, x)[0]\n    \n    # Calculate the correct answer using the value of x\n    correct_answer = (4 * mistaken_value) + 25\n\n    return correct_answer\n\nans = solution()"
    ],
    "91a7b96128014a318c03b1434e2ae770": [
        "def solution():\n    # Let the number of books Donna has be x.\n    # According to the problem, Chloe has 4 times as many books as Donna,\n    # so Chloe has 4x books.\n    # It's also given that Donna has 816 fewer books than Chloe: 4x - x = 816\n    # Simplify the equation: 3x = 816\n    # Divide both sides by 3 to find x.\n    x = 816 / 3\n    \n    # Now we have the number of books Donna has.\n    return int(x)\n\nans = solution()"
    ],
    "aeba54327d714c2483bb9b0bcf5e84a1": [
        "def solution():\n    from sympy import factorint\n\n    # Prime factorize each number\n    product = 75 * 56 * 12 * 105\n    factors = factorint(product)\n\n    # Count the number of 2's and 5's in the prime factors\n    num_twos = factors.get(2, 0)\n    num_fives = factors.get(5, 0)\n\n    # The number of zeros at the end is the minimum of the number of 2's and 5's\n    num_zeros = min(num_twos, num_fives)\n\n    return num_zeros\n\nans = solution()"
    ],
    "7ed12a6fbb2b477488bf0f46e7aa015e": [
        "from math import factorial as fact\n\ndef solution():\n    # We will count the number of permutations of singing performances (S)\n    # with \"slots\" in between them where dancing performances (D) can be placed.\n    # For 4 Ds to fit in without 2 Ds being consecutive, we need at least 3 Ss,\n    # creating 4 slots in this pattern: S D S D S D S (remaining Ss can be anywhere)\n    \n    # First, we start with 3 Ss to create initial 4 slots: _ S _ S _ S _\n    # We have 6 Ss, so we actually have 3 more Ss that can be inserted into 7 slots:\n    # (start, between each of the 3 Ss, and the end), which gives us C(7,3) choices.\n    \n    singing_slots = 7  # Initial 4 + 3 additional slots for remaining Ss\n    remaining_singings = 3  # 6 total Ss - 3 initial Ss used to create slots\n    choices_for_remaining_singings = fact(singing_slots) // (fact(remaining_singings) * fact(singing_slots - remaining_singings))\n    \n    # Each arrangement creates 4 slots for Ds (before the first S, between the Ss, and after the last S)\n    # Since all Ds are distinct, there are P(4,4) = 4! ways to arrange Ds in the 4 slots.\n    \n    ways_to_arrange_dancings = fact(4)\n    \n    # The number of different ways to arrange these performances is the product of\n    # arrangements of remaining Ss and arrangements of Ds.\n    \n    ans = choices_for_remaining_singings * ways_to_arrange_dancings\n    return ans\n\nans = solution()"
    ],
    "8e0b24a6852b4ad99f69ab3e1d9f46fa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the variable in the equation\n    x = symbols('x')\n\n    # Define the equation according to the question\n    equation = Eq((x + 4) / 8, 3)\n\n    # Solve the equation for x\n    solution_dict = solve(equation, x)\n\n    return solution_dict[x]\n\nans = solution()"
    ],
    "88e7bc9feb964b91bb3e5ab4e020c19d": [
        "def solution():\n    possible_digits = set(range(10))\n\n    guess1_digits = set([8, 7, 6, 5])\n    guess2_digits = set([1, 0, 2, 3])\n    guess3_digits = {8: 0, 6: 1, 4: 2, 2: 3}\n    \n    # From guess 4, none are correct, remove these digits from possible set.\n    possible_digits -= set([5, 4, 3, 0])\n    \n    # From guess 3, two digits are correct and in correct positions.\n    # This means 8 and 6 must be correct and in correct positions.\n    # Get the positions where 8 and 6 should be and remove other positions\n    # Also, remove 4 and 2 from possibilities as we know their positions are incorrect. \n    correct_digits = {index: digit for digit, index in guess3_digits.items() if digit in possible_digits}\n    \n    # After removing 4 and 2 from guess 3, we now know that the digits not in correct position in guess 1 and guess 2 cannot be 4, 2 or already determined correct digits (8 and 6)\n    possible_switched_digits = (guess1_digits | guess2_digits) - set(correct_digits.values()) - set([4, 2])\n    \n    # Now construct the number from known digits and those that were switched.\n    ans = [None]*4\n    \n    # Place the correct digits first\n    for pos, digit in correct_digits.items():\n        ans[pos] = str(digit)\n        \n    # The remaining two spots in the number are from possible_switched_digits.\n    # We know 3 and 0 are not in the number (from guess 4), so we cannot use 1023,\n    # so the correct number must use digits from 8765 excluding 8 and 6. It only leaves us 7 and 5.\n    remaining_digits = [str(digit) for digit in possible_switched_digits if digit not in [8, 6]]\n    for i in range(4):\n        if ans[i] is None:\n            ans[i] = remaining_digits.pop()\n\n    return ''.join(ans)\n\nans = solution()"
    ],
    "8b43d11a50194a5c8d37dc13e3e6af0d": [
        "def solution():\n    # Iterate through possible values of a and b\n    for a in range(1, 10):\n        for b in range(10):\n            ab = 10 * a + b\n            a0b = 100 * a + b\n            if ab * 7 == a0b:\n                return ab\n\nans = solution()"
    ],
    "cbe6883d9f0a4c368c4018abfcc1fd6b": [
        "def solution():\n    # The ones digit of a number n^m cycles through a pattern. 999 ends in 9, so we only need to consider the pattern of 9^m.\n    # The ones digit of powers of 9 cycles through a pattern: 9, 1, 9, 1, ...\n    # Since 99 is odd, the ones digit of 999^99 will be the same as the ones digit of 9^1, which is 9.\n    return 9\n\nans = solution()"
    ],
    "b5c92f2132ac4326b5a389ac237c0de3": [
        "from sympy import isprime, primerange\n\ndef solution():\n    for a in primerange(1, 193//3):\n        if (193 - 3 * a) % 11 == 0:\n            b = (193 - 3 * a) // 11\n            if isprime(b):\n                return a + b\n\nans = solution()"
    ],
    "a7a7be210f714db38b6463860e92ad08": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    adults, children, boys, girls = symbols('adults children boys girls')\n    equation1 = Eq(adults, 3 * children)\n    equation2 = Eq(boys, 2 * girls)\n    equation3 = Eq(adults, girls + 176)\n\n    # Since there are twice as many boys as girls, the total number of children (boys + girls) can be represented as 3 * girls\n    # Therefore, the equation for adults (which is three times the number of children) is 9 * girls\n    equation1 = Eq(adults, 9 * girls)\n\n    solutions = solve((equation1, equation2, equation3), (adults, children, boys, girls))\n\n    total_people = solutions[adults] + solutions[children] + solutions[boys] + solutions[girls]\n    return total_people\n\nans = solution()"
    ],
    "e9e75300f0b1494ead9f2af2a39646a1": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 4), (2, 5), (4, 7)]\n    lcm, reminder = solve_congruence(*congruences)\n\n    return reminder\n\nans = solution()"
    ],
    "c4e92a647c2e4f7cafbf405c8fd96b68": [
        "def solution():\n    workers_initial = 3\n    houses_built_initial = 14\n    days_initial = 4\n\n    workers_final = 9\n    days_final = 2\n\n    # Calculate houses built per worker per day\n    houses_per_worker_per_day = houses_built_initial / (workers_initial * days_initial)\n\n    # Calculate how many houses can be built by 9 workers in 2 days using the unitary method\n    houses_built_final = houses_per_worker_per_day * workers_final * days_final\n    \n    return houses_built_final\n\nans = solution()"
    ],
    "bafdbe5ffa744970a2060ec88389886a": [
        "from math import gcd\n\ndef solution():\n    num1 = 12\n    num2 = 15\n    num3 = 60\n\n    # Calculate the GCD of the first two numbers\n    ans = gcd(num1, num2)\n    # Calculate the GCD of the result with the third number\n    ans = gcd(ans, num3)\n    \n    return ans\n\nans = solution()"
    ],
    "f1a22796821b429bbf0ea5a8dc834049": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the price of banana and apple\n    banana, apple = symbols('banana apple')\n\n    # Ellie's payment equation\n    equation1 = Eq(2*banana + 3*apple, 1.50)\n\n    # Beth's payment equation\n    equation2 = Eq(3*banana + 2*apple, 1.45)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (banana, apple))\n\n    # Calculate the cost for 1 banana and 1 apple\n    cost_for_annabella = solutions[banana] + solutions[apple]\n\n    return cost_for_annabella\n\nans = solution()"
    ],
    "955addf2cd5343a2baa0cdc99bc64d70": [
        "def solution():\n    min_product = float('inf')\n    for bob in range(1, 28):\n        for rex in range(1, 28):\n            for fido in range(1, 28):\n                if fido == bob - 10 and bob != rex != fido and bob + rex + fido == 28:\n                    product = bob * rex * fido\n                    min_product = min(min_product, product)\n    return min_product\n\nans = solution()"
    ],
    "205b5f4fe40f4dc39f4c13a431c6c24e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total = symbols('total')\n    children = 2 / 5 * total\n    women = 1 / 4 * total\n    men = total - children - women\n\n    equation = Eq(children, men + 20)\n\n    sol = solve((equation, total), total)\n\n    return sol[total]\n\nans = solution()"
    ],
    "7920f0e04e1c4bb58bdd059b9a8054a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    money, price_per_ball = symbols('money price_per_ball')\n\n    equation1 = Eq(money - 5 * price_per_ball, 15)\n    equation2 = Eq(money - 8 * price_per_ball, -12)\n\n    solutions = solve((equation1, equation2), (money, price_per_ball))\n\n    return solutions[price_per_ball]\n\nans = solution()"
    ],
    "e572f57537f244f3960d8f1978f65baa": [
        "def solution():\n    max_sum = 0\n    \n    # iterate over all possible 3-digit numbers with at least one digit being a multiple of 25\n    for A in range(100, 1000):\n        # check if A has a factor of 75\n        if A % 75 == 0:\n            for B in range(100, A):\n                if B % 75 == 0 and A != B:\n                    A_digits = set(str(A))\n                    B_digits = set(str(B))\n                    common_digits = A_digits.intersection(B_digits)\n                    if len(common_digits) >= 1:\n                        max_sum = max(max_sum, A + B)\n    \n    return max_sum\n\nans = solution()"
    ],
    "9caf24529ff449c5bd52234a7d53d0f4": [
        "def solution():\n    ans = (1/30 + 1/6) / (2/25) + (2 - 2/3) / (8/3)\n    return ans\n\nans = solution()"
    ],
    "bb6949f9da5a4b318164ce5a0275f45c": [
        "def solution():\n    third_bounce_height = 9  # height after the second bounce\n    initial_height = third_bounce_height * (3 ** 2)  # calculate the initial height\n\n    return initial_height\n\nans = solution()"
    ],
    "f8d4595ae1c84386a2cdab88d9bf6c10": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Define the congruences as tuples (remainder, modulo)\n    congruences = [(2, 3), (4, 7), (7, 8)]\n\n    # Use the Chinese Remainder Theorem to find a solution\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "dd4d3217f6ad466eb4b512fa290b4fab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    xuanxuan, lingling, jay = symbols('xuanxuan lingling jay')\n    \n    equation1 = Eq(xuanxuan + lingling, 120.5)\n    equation2 = Eq(xuanxuan + jay, 105.25)\n    equation3 = Eq(lingling, 2 * jay)\n    \n    solutions = solve((equation1, equation2, equation3), (xuanxuan, lingling, jay))\n    \n    return solutions[xuanxuan]\n\nans = solution()"
    ],
    "c69301f007a447459a2f26b32add259c": [
        "def solution():\n    # Calculate the sum of the denominators\n    sum_of_denominators = (1/(2007 * 2008)) + (1/(2008 * 2009)) + (1/2009)\n    \n    # Find the value of the complex fraction\n    ans = 1 / sum_of_denominators\n    \n    return ans\n\nans = solution()"
    ],
    "84471787dba0421d8ae2f1995580d453": [
        "def solution():\n    # Let L be the time it takes for Lee to finish the job by herself\n    # Let N be the time it takes for Nancy to finish the job by herself\n    \n    # From the problem we have two equations:\n    # 1/L + 1/N = 1/10 and 6/L + 20/N = 1\n    \n    # Since we need to find N, let's express L in terms of N from the first equation\n    # L = 10N/(N - 10)\n    \n    # Now we substitute L in the second equation with the expression above\n    # and solve for N\n    from sympy import symbols, solve\n\n    N = symbols('N')\n    L = 10*N/(N - 10)\n    equation = 6/L + 20/N - 1\n    \n    # Solve the equation\n    solutions = solve(equation, N)\n    \n    # We expect two solutions for N in our equation, only one of them will be the correct, positive time value\n    for sol in solutions:\n        if sol > 0:\n            return sol\n\nans = solution()"
    ],
    "d268cf0ab65245d3958844e7297250a7": [
        "def solution():\n    total_students = 40 + 30\n    combined_average = 90\n\n    # Total marks for both classes\n    total_marks = combined_average * total_students\n\n    # Let x be the average score of Class A\n    # Average score of Class B is x + 7\n    # Total marks for Class A is 40 * x\n    # Total marks for Class B is 30 * (x + 7)\n    # Equation: 40 * x + 30 * (x + 7) = total_marks\n\n    x = (total_marks - 30 * 7) / (40 + 30)\n\n    # Average score of Class B\n    average_score_B = x + 7\n\n    return average_score_B\n\nans = solution()"
    ],
    "73e16b4d6b4148cd8d14bdc6e7150eb3": [
        "def solution():\n    students = 40\n    boat_capacity = 7\n\n    num_boats, remainder = divmod(students, boat_capacity)\n    if remainder > 0:\n        num_boats += 1\n\n    return num_boats\n\nans = solution()"
    ],
    "5a540f16cc654e8dadce8dec2e692dc0": [
        "def solution():\n    ans = 11 - 2 + 7 - 4 + 2\n    return ans\n\nans = solution()"
    ],
    "994aeb7c561a42fe8347e558ec900f32": [
        "def solution():\n    a = 250250\n    ans = (a ** 2) - (a - 1) * (a + 1)\n    return ans\n\nans = solution()"
    ],
    "736d1bb4aa004960971db73d59909663": [
        "def solution():\n    ways = 0\n    for i in range(6):  # he could use from 0 to 5 ten-pence coins\n        for j in range(4):  # he could use from 0 to 3 twenty-pence coins\n            for k in range(2):  # he could use 0 or 1 fifty-pence coins\n                if i * 10 + j * 20 + k * 50 == 70:\n                    ways += 1\n    return ways\n\nans = solution()"
    ],
    "bf82b1b89b484ee5960960a7d950ca09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    aaron, becky, chris = symbols('aaron becky chris')\n    \n    equation1 = Eq(aaron - becky, becky - chris)\n    equation2 = Eq(aaron + becky + chris, 60)\n\n    solutions = solve((equation1, equation2), (aaron, becky, chris))\n\n    return solutions[becky]\n\nans = solution()"
    ],
    "d446c52e4dbb4e51aceaff4c60dc5ab8": [
        "def solution():\n    people_behind_mark = 16\n    total_people = 30\n\n    people_in_front_of_mark = total_people - people_behind_mark - 1  # Subtracting 1 because we don't count Mark himself\n\n    return people_in_front_of_mark\n\nans = solution()"
    ],
    "ac1c2a9c6937485ea8ffba2f93c05b4f": [
        "def solution():\n    # Calculate the total number of digits for numbers from 1 to 200\n    ans = 0\n    for i in range(1, 201):\n        ans += len(str(i))\n    return ans\n\nans = solution()"
    ],
    "7194d8ece9df4cd49ccf1b51dff55042": [
        "def solution():\n    for j in range(10):\n        if int(f\"125{j}6\") % 4 == 0:\n            return j\n\nans = solution()"
    ],
    "252455d7397e4190b4b727c54849c01e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n\n    equation1 = Eq(5 * table + 12 * chair, 720)\n    equation2 = Eq(table - chair, 25)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "9ad04db2b944413e9b7b20c98134596f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, peach = symbols('apple peach')\n\n    equation1 = Eq(4 * apple + 3 * peach, 10)\n    equation2 = Eq(4 * apple + 6 * peach, 16)\n\n    solutions = solve((equation1, equation2), (apple, peach))\n\n    return solutions[peach]\n\nans = solution()"
    ],
    "a38e52eeb9e34e54a87285df19594d9a": [
        "def solution():\n    final_number = 66\n    added_number = 7\n    multiplier = 6\n\n    original_number = (final_number / multiplier) - added_number\n\n    return original_number\n\nans = solution()"
    ],
    "d8016a78f9724496a543874862c8f889": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "ba1cf976efc14128bab1463d61d8172d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*9 - 2*x, 33)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b06bcf32c5ce4534aa9ae601dd737c7a": [
        "def solution():\n    sum_squares = sum(i**2 for i in range(1, 25))\n    sum_cubes = sum(i**3 for i in range(1, 24))\n    ans = sum_squares - sum_cubes\n    return ans\n\nans = solution()"
    ],
    "28dce32aa4a84544ae4a2373b615edc0": [
        "def solution():\n    ans = 36 + 17 + 18 + 24 + 33\n    return ans\n\nans = solution()"
    ],
    "6414fa3c36c949d8bc8d4375490aad90": [
        "def solution():\n    dividend = 476\n    divisor = 17\n    ans = dividend // divisor\n    return ans\n\nans = solution()"
    ],
    "05109018bc434fdfa8dff3bea6fe10cd": [
        "def solution():\n    return 11\n\nans = solution()"
    ],
    "3c4b0bb759df46ac8dc162978d7d83b6": [
        "def solution():\n    future_age = 24\n    years_until_future = 6\n    years_ago = 9\n\n    current_age = future_age - years_until_future\n    age_years_ago = current_age - years_ago\n\n    return age_years_ago\n\nans = solution()"
    ],
    "8421a5213cd640929f9873c905812c37": [
        "def solution():\n    from math import lcm\n\n    days_for_tablet1 = 25\n    days_for_tablet2 = 20\n\n    days_until_restart = lcm(days_for_tablet1, days_for_tablet2)\n\n    ans = days_until_restart\n    return ans\n\nans = solution()"
    ],
    "644a44bb704f4384a83cf940f7f6970c": [
        "def solution():\n    total_time = 360  # total time in minutes\n    ratio_up_to_down = 5 / 4\n    \n    # time spent going up the hill\n    time_up = (total_time * ratio_up_to_down) / (1 + ratio_up_to_down)\n    \n    # time spent going down the hill\n    time_down = total_time - time_up\n    \n    # speed ratio\n    # let the speed going down the hill be x m/min\n    # then the speed going up the hill is (x - 10) m/min\n    # distance up the hill = speed up * time up\n    # distance down the hill = speed down * time down\n    # because the distance up and down the hill is the same:\n    # (x - 10) * time_up = x * time_down\n    # solving for x gives us the speed going down the hill\n    # then we can find the total distance by multiplying the speed going down by the time spent going down\n    x = 10 * time_up / (time_down - time_up)\n    \n    distance_down = x * time_down  # or distance_down = (x - 10) * time_up\n\n    # total distance is the sum of distance up and down, but since they are the same, we can just multiply by 2\n    total_distance = 2 * distance_down\n    \n    return total_distance\n\nans = solution()"
    ],
    "a5706681d10c49489b9cbe928880bbdb": [
        "def solution():\n    for a in range(10):\n        number = int(f'9{a}8{a}')\n        if number % 15 == 0:\n            return a\n\nans = solution()"
    ],
    "f2a79e337470459580999ca824060e81": [
        "def solution():\n    num_friends = 6\n    cards_sent_each = num_friends - 1\n    total_cards_sent = num_friends * cards_sent_each\n\n    return total_cards_sent\n\nans = solution()"
    ],
    "863f091493be404bbbf1a3b6b11108a9": [
        "def solution():\n    return 3.6 * 100\n\nans = solution()"
    ],
    "04443e386f27447897840ea2ceacf48e": [
        "def solution():\n    watermelons = 94\n    pineapples = 138\n    watermelons_per_day = 9\n    pineapples_per_day = 9\n    \n    days = symbols('days')\n    \n    remaining_watermelons = watermelons - watermelons_per_day * days\n    remaining_pineapples = pineapples - pineapples_per_day * days\n    \n    equation = Eq(remaining_pineapples, 3 * remaining_watermelons)\n    \n    ans = solve(equation, days)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "9852339c36f84963a115452803677de2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((x + 2)/3, 1 + (x - 1)/4)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "c7d09eee09884180b22647b680abde83": [
        "def solution():\n    fruits_per_car = 24.2 / 4\n    fruits_per_truck = 410 / 50\n\n    difference = fruits_per_truck - fruits_per_car\n\n    return difference\n\nans = solution()"
    ],
    "53ec9e4b9d804cd3a26e23b2cb281a3a": [
        "def solution():\n    # Convert the bus interval and Aiden's arrival time to minutes\n    bus_interval = 35\n    aiden_arrival_time = (9 * 60) + 22  # Convert 9:22 to minutes (9 hours * 60 minutes + 22 minutes)\n    \n    # Find the time the 9:15 bus leaves in minutes\n    bus_time = (9 * 60) + 15  # Convert 9:15 to minutes\n    \n    # Calculate the number of minutes until the next bus\n    minutes_since_last_bus = aiden_arrival_time - bus_time\n    wait_time = bus_interval - (minutes_since_last_bus % bus_interval)\n    \n    return wait_time\n\nans = solution()"
    ],
    "594446f092204f07a8f1c0cebe891b21": [
        "def solution():\n    days_until_birthday = 329\n    days_in_week = 7\n    weeks_until_birthday = days_until_birthday // days_in_week\n    return weeks_until_birthday\n\nans = solution()"
    ],
    "7b68f177602a4cc584823135bed89664": [
        "def solution():\n    ans = 252 - (62 - 58) * 13\n    return ans\n\nans = solution()"
    ],
    "2fcfa373d34340dda08f178934a5be32": [
        "def solution():\n    # Eddie and his brother meet after 5 minutes.\n    # Eddie's speed is 62 metres per minute.\n    # The brother's speed is 70 metres per minute.\n    \n    # Total distance covered by both in 5 minutes\n    total_distance = 5 * (62 + 70)\n    \n    # Distance of the mall from their house is the distance Eddie walked in 5 minutes\n    distance_from_house = 62 * 5\n    \n    return distance_from_house\n\nans = solution()"
    ],
    "d05b2b87366644bea5ba5fa990a4796c": [
        "def solution():\n    ans = (5/9) * 243\n    return ans\n\nans = solution()"
    ],
    "d6baa433c44047ebbc0a9cea630f8afa": [
        "def solution():\n    return 161 / 46\n\nans = solution()"
    ],
    "7ecb434f5d8b4685a1bf09ae7bb7ba8e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for current ages of Tom and Jerry\n    tom, jerry = symbols('tom jerry')\n\n    # Create the equations based on the problem statement\n    # Tom will be twice his age in 4 years\n    equation1 = Eq(tom + 4, 2 * tom)\n\n    # Three years ago, the sum of Tom's and Jerry's ages was 10\n    equation2 = Eq((tom - 3) + (jerry - 3), 10)\n\n    # Solve the system of equations for Tom and Jerry's current ages\n    solutions = solve((equation1, equation2), (tom, jerry))\n\n    # Now, let's find out in how many years Jerry's age will be doubled\n    jerry_current_age = solutions[jerry]\n    years_until_doubled = symbols('years_until_doubled')\n\n    # Equation where in 'years_until_doubled' years from now Jerry's age will be twice\n    equation3 = Eq(jerry + years_until_doubled, 2 * jerry)\n\n    # Solve for 'years_until_doubled'\n    solution_years = solve(equation3, years_until_doubled)\n\n    return solution_years[0]\n\nans = solution()"
    ],
    "c72580c4f08e4db9b41e5dae34b5ba80": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(39 - (3 * x - 4), 34)\n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "98919fdedf144aaf9b373ecd9d790e80": [
        "from sympy import isprime\n\ndef solution():\n    current_year = 2017\n    ages = [7, 5, 29, 31]\n    found_year = False\n\n    while not found_year:\n        current_year += 1\n        ages = [age + 1 for age in ages]\n        if all(isprime(age) for age in ages):\n            found_year = True\n    \n    return current_year\n\nans = solution()"
    ],
    "0284805b100e4942a4c70e5c0bda46ec": [
        "def solution():\n    original_price = 800\n    discount = 0.15\n    increase = 0.15\n\n    # Calculate the price after discount\n    discounted_price = original_price * (1 - discount)\n    \n    # Calculate the final price after increasing the discounted price\n    final_price = discounted_price * (1 + increase)\n\n    return final_price\n\nans = solution()"
    ],
    "41a3c03d8eb44fc899606653983540eb": [
        "def solution():\n    ans = sum([(-1)**(i+1) * i**2 for i in range(3, 52)])\n    return ans\n\nans = solution()"
    ],
    "706569a3dca842c19c29d93aa3f7c891": [
        "def solution():\n    ans = 0.2 * 4 + 1.4 + 0.3\n    return ans\n\nans = solution()"
    ],
    "330ae3eaf06f40fc836f52dc7ad73cd3": [
        "def solution():\n    return 9321 - 899\n\nans = solution()"
    ],
    "8206be1ec41b408abd4e771355c66b57": [
        "def solution():\n    n = 7\n    ans = 1 + n + (n*(n-1))//2 + (n*(n-1)*(n-2)*(n-3))//24\n    return ans\n\nans = solution()"
    ],
    "fb9f310cf3714558a4a5507c2790883c": [
        "def solution():\n    total_books = 279\n    books_given = 15 * 8\n    remaining_books = total_books - books_given\n    return remaining_books\n\nans = solution()"
    ],
    "2a5bc09f9e2444d0ad16b16b429e0669": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lora, mother = symbols('lora mother')\n\n    equation1 = Eq(mother, 3 * lora)\n    equation2 = Eq(lora + mother, 44)\n\n    solutions = solve((equation1, equation2), (lora, mother))\n\n    return solutions[lora]\n\nans = solution()"
    ],
    "4ba068e7720f40409cd5ae73716e4408": [
        "def solution():\n    # The number of lamps can be calculated from the number of flowers and the relation given.\n    # Since Jamie plants 3 flowers between every 2 lamp posts, for every 3 flowers there are 2 lamp posts.\n    # If there are 30 flowers, the pairs of lamp posts can be calculated as follows:\n    # The number of pairs of lamp posts is equal to the total number of flowers divided by 3.\n    \n    num_flowers = 30\n    flowers_between_lamps = 3\n    num_pairs_of_lamps = num_flowers // flowers_between_lamps\n\n    # When considering pairs of lamp posts, we must add one more to get the total count of lamp posts,\n    # because n pairs of lamp posts implies n + 1 lamp posts.\n    # (E.g., for 2 pairs of posts, you actually have 3 posts: |--|--|).\n    total_lamp_posts = num_pairs_of_lamps + 1\n    \n    # Knowing the total number of lamp posts and the entire length of the road, we can calculate the distance between two lamp posts.\n    # Distance between lamp posts = Total length of the road / (Total number of lamp posts - 1)\n    road_length = 50  # in meters\n    distance_between_lamps = road_length / (total_lamp_posts - 1)\n    \n    return distance_between_lamps\n\nans = solution()"
    ],
    "8b707c3e74aa4ca6aa566cfafbe81d3f": [
        "def solution():\n    base_unit_digit = 4\n    cycle = [base_unit_digit]\n\n    for _ in range(3):  # Since 4^1 has unit digit 4, check the next three powers\n        next_digit = (cycle[-1] * base_unit_digit) % 10\n        if next_digit == base_unit_digit:  # Cycle detected\n            break\n        cycle.append(next_digit)\n\n    position = 2008 % len(cycle)  # Position in the cycle for 4^2008\n    ans = cycle[position - 1] if position != 0 else cycle[-1]\n\n    return ans\n\nans = solution()"
    ],
    "e4a263cc4f734491a94e2dda982f4f21": [
        "def solution():\n    return int(\"ninety thousand and nine\".replace(\"ninety thousand and nine\", \"90009\"))\n\nans = solution()"
    ],
    "b157ac35c09c46d1a0f9228b2a98a0c9": [
        "def solution():\n    total_adults = 40\n    fraction_male = 3/5\n\n    number_of_males = total_adults * fraction_male\n\n    return int(number_of_males)\n\nans = solution()"
    ],
    "25c64c726c244d3aaeaa551352e609a3": [
        "def solution():\n    ben_sweets = 17\n    bob_sweets = 10\n    total_sweets = ben_sweets + bob_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "acf3c89a437f4533b94fbc004a77b124": [
        "def solution():\n    adam_ben = 102\n    ben_carl = 97\n    adam_carl = 93\n\n    total_weight = (adam_ben + ben_carl + adam_carl) / 2\n\n    return total_weight\n\nans = solution()"
    ],
    "26e8404f1e6e4ecdb0c65de9d6a345a6": [
        "def solution():\n    # Paths from home to intermediate points\n    home_to_audio = 6\n    home_to_book = 4\n    home_to_chapel = 5\n\n    # Paths from intermediate points to school\n    audio_to_school = 2\n    book_to_school = 2\n    chapel_to_school = 3\n\n    # Total paths from home to school\n    total_paths = (home_to_audio * audio_to_school) + \\\n                  (home_to_book * book_to_school) + \\\n                  (home_to_chapel * chapel_to_school)\n    \n    return total_paths\n\nans = solution()"
    ],
    "c15d8300682f4868979f9fe7293cdddd": [
        "def solution():\n    return 76 * 9\n\nans = solution()"
    ],
    "5c9b212318c240b4a74ad8f4e844ef5b": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime('12:40 PM', '%I:%M %p')\n    duration = timedelta(hours=2, minutes=40)\n    departure_time = arrival_time + duration\n    ans = departure_time.strftime('%I:%M %p').lstrip('0')\n    return ans\n\nans = solution()"
    ],
    "2c92522309c445228b27f336d60a049f": [
        "def solution():\n    total_coins = 495\n    one_pound_coins = total_coins / 3\n    fiftyp_coins = 124\n    twentyp_coins = total_coins - one_pound_coins - fiftyp_coins\n\n    total_value = (one_pound_coins * 1) + (fiftyp_coins * 0.50) + (twentyp_coins * 0.20)\n    return total_value\n\nans = solution()"
    ],
    "517bec3444474e42bb9cb8c495766694": [
        "def solution():\n    ans = 14.8 - 5.67\n    return ans\n\nans = solution()"
    ],
    "556f6176dffb4d75900eef7a7bd1baa6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    belle = 49\n    belle_given = 11\n    eddie = symbols('eddie')\n    \n    equation = Eq(belle + belle_given, eddie - belle_given)\n\n    solution = solve(equation, eddie)\n\n    return solution[eddie]\n\nans = solution()"
    ],
    "007cfb31882a43b8a576d0a1be81a6b1": [
        "def solution():\n    ans = 198 + 298 + 398 + 498\n    return ans\n\nans = solution()"
    ],
    "cc59b7c9a7804769b430b15dea0b2243": [
        "def solution():\n    glasgow_temp = -7\n    difference = 12\n    exeter_temp = glasgow_temp + difference\n    return exeter_temp\n\nans = solution()"
    ],
    "a2fe9cf5c86e468186050a214e5271c5": [
        "def solution():\n    num_lamp_posts = 50\n    distance_between_posts = 2\n    \n    # Total length is distance between each consecutive pair times the number of intervals\n    # Since there are 50 lamp posts, there will be 49 intervals of 2m\n    total_length = (num_lamp_posts - 1) * distance_between_posts\n    \n    return total_length\n\nans = solution()"
    ],
    "42059b08dbed41ce877ac6d4245af7e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    benson, clive = symbols('benson clive')\n\n    # Benson had benson dollars and spent 34\n    benson_left = benson - 34\n\n    # Clive had clive dollars and spent 63\n    clive_left = clive - 63\n\n    # They had the same amount after buying\n    equation1 = Eq(benson_left, clive_left)\n\n    # They had a total of $705 before buying\n    equation2 = Eq(benson + clive, 705)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (benson, clive))\n\n    return solutions[clive]\n\nans = solution()"
    ],
    "29173022662a4326b363f95bb7111d39": [
        "def solution():\n    ans = (5/11 + 2/27) * 11 + 5/27\n    return ans\n\nans = solution()"
    ],
    "d10e094ae6b64c01873f9605961d4568": [
        "def solution():\n    return 11 + 8 - 4 + 2\n\nans = solution()"
    ],
    "f2d1624bd6914f419871977e97929aae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, brian = symbols('chelsia brian')\n\n    equation1 = Eq(3/4 * chelsia, 5/6 * brian)\n    equation2 = Eq(chelsia, brian + 24)\n\n    solutions = solve((equation1, equation2), (chelsia, brian))\n\n    total_money = solutions[chelsia] + solutions[brian]\n\n    return total_money\n\nans = solution()"
    ],
    "f3a732dd8b134a0d8668f613c0e04366": [
        "def solution():\n    weight_per_box = 1.3\n    number_of_boxes = 6\n\n    total_weight = weight_per_box * number_of_boxes\n    \n    return total_weight\n\nans = solution()"
    ],
    "2de358aca892457597c6b256327bbab7": [
        "def solution():\n    total_tea = 983 + 179\n    tea_each = total_tea // 2\n    tea_to_give = 983 - tea_each\n    \n    return tea_to_give\n\nans = solution()"
    ],
    "76eab0f31f2c401ea284400880158c26": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, kofi = symbols('john kofi')\n\n    equation1 = Eq(john + kofi, 25)\n    equation2 = Eq(kofi + 4, john - 4 - 3)\n\n    solutions = solve((equation1, equation2), (john, kofi))\n\n    return solutions[john]\n\nans = solution()"
    ],
    "c47a6f5f7feb44a1a708cd7ee24c6d4f": [
        "import itertools\n\ndef solution():\n    digits = [2, 4, 6]\n    all_combinations = []\n\n    # Generating all permutations for 1, 2, and 3 digit numbers\n    for i in range(1, len(digits) + 1):\n        all_combinations += list(itertools.permutations(digits, i))\n\n    # Each permutation is a unique number\n    ans = len(all_combinations)\n    return ans\n\nans = solution()"
    ],
    "94caf5aef0e34fb6850eae1e6f450368": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    normal_rabbits, special_rabbits = symbols('normal_rabbits special_rabbits')\n\n    # equations based on heads and feet\n    heads_eq = Eq(normal_rabbits + 3 * special_rabbits, 53)\n    feet_eq = Eq(4 * normal_rabbits + 2 * special_rabbits, 102)\n\n    # solving the equations\n    solutions = solve((heads_eq, feet_eq), (normal_rabbits, special_rabbits))\n\n    return solutions[normal_rabbits], solutions[special_rabbits]\n\nans = solution()"
    ],
    "c2d38aa135914d7cbc85eacbe4abc34c": [
        "def solution():\n    cost_per_banana = 98 / 7\n    total_cost = 13 * cost_per_banana\n    change = (10 * 100) - total_cost  # Convert £10 to pence\n    return change\n\nans = solution()"
    ],
    "b9dc1e7c14884af2affa4cacaa7fb5a9": [
        "def solution():\n    return -16 - (18 + 2)\n\nans = solution()"
    ],
    "1e359fb023094a249a7e06543302f43c": [
        "def solution():\n    ans = sum([(-1)**(i+1) * i for i in range(1, 101)])\n    return ans\n\nans = solution()"
    ],
    "82376facf64846dea0f32cd7690fcb86": [
        "def solution():\n    remainder = 10\n    for i in range(1, 500):\n        remainder = (remainder % 70) * 10\n    ans = remainder // 70\n    return ans\n\nans = solution()"
    ],
    "c0d39545ea18469395ac00e338169f45": [
        "from fractions import Fraction\n\ndef solution():\n    result = Fraction(3) / Fraction(1, 3)\n    return result\n\nans = solution()"
    ],
    "635bb79136ff42d8a188a0bd46337917": [
        "def solution():\n    neelesh_left = 4  # Neelesh has 4 sweets left after eating one\n    neelesh_before_eating = neelesh_left + 1  # Number of sweets Neelesh received before eating one\n    total_sweets = neelesh_before_eating * 6  # Total number of sweets (inverse of 1/6)\n    ayesha_left = total_sweets - neelesh_before_eating  # Sweets Ayesha has left\n    return ayesha_left\n\nans = solution()"
    ],
    "b49aa6ce18de4e7e95ea0c909ef9340d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    copper_weight, iron_weight = symbols('copper_weight iron_weight')\n\n    equation1 = Eq(8 * copper_weight + 9 * iron_weight, 135)\n    equation2 = Eq(6 * copper_weight + 3 * iron_weight, 75)\n\n    solutions = solve((equation1, equation2), (copper_weight, iron_weight))\n\n    return solutions[copper_weight]\n\nans = solution()"
    ],
    "fb81c39a4a004c44a04415b1127e4172": [
        "def solution():\n    ans = 5 * 8 * 37 * 2 * 3\n    return ans\n\nans = solution()"
    ],
    "6f08803f689f4c72bcdea50d636ea987": [
        "def solution():\n    numerator_sum = sum(1 / (i * (i + 1)) for i in range(1, 20, 2))\n    denominator_sum = sum(1 / ((20 - i) * (i + 11)) for i in range(0, 5))\n\n    ans = numerator_sum / denominator_sum\n    return ans\n\nans = solution()"
    ],
    "ff3ca477695c441ca3e802ed3aff2147": [
        "from math import gcd\n\ndef solution():\n    count = 0\n    for a in range(1, 425):\n        b = 425 - a\n        if a < b and gcd(a, b) == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "3879585254c84c84980eeddc57632689": [
        "def solution():\n    n = 4.5 / 5\n    return n\n\nans = solution()"
    ],
    "1d7ff38273c84d93a9260643964e7030": [
        "def solution():\n    david_weight_stones = 15\n    andrew_weight_pounds = 275\n    pounds_per_stone = 14\n    \n    david_weight_pounds = david_weight_stones * pounds_per_stone\n    weight_difference = abs(david_weight_pounds - andrew_weight_pounds)\n    \n    return weight_difference\n\nans = solution()"
    ],
    "8cf4df806e1a4f38b2163bf0c0f80fb2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of marbles in boxes B and C\n    B, C = symbols('B C')\n\n    # Given conditions\n    A = 80  # Number of marbles in box A\n    total_marbles = 560  # Total number of marbles\n\n    # Equations based on the problem statement\n    equation1 = Eq(B, 2 * C)  # Box B has twice as many marbles as Box C\n    equation2 = Eq(A + B + C, total_marbles)  # Total number of marbles is the sum of marbles in all boxes\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (B, C))\n\n    return solutions[C]\n\nans = solution()"
    ],
    "4b71e5c9920b435b9041ce4896dba538": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total gummy bears and y be the total lollipops initially\n    x, y = symbols('x y')\n    \n    # Initial ratio:\n    # gummy bears to lollipops is 5:7\n    eq1 = Eq(x / y, 5 / 7)\n    \n    # When 120 pieces are added to each pile, the new ratio becomes 4:5\n    eq2 = Eq((x + 120) / (y + 120), 4/5)\n    \n    # Solve the system of equations\n    solution = solve((eq1, eq2), (x, y))\n    \n    # Number of gummy bears and lollipops originally (x and y)\n    gummy_bears, lollipops = solution[x], solution[y]\n    \n    # New total pieces of candy after adding 120 to each pile\n    total_candy = gummy_bears + lollipops + 2 * 120\n    \n    return total_candy\n\nans = solution()"
    ],
    "582d4b5a26c541bc8d1fb60d2121ed94": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(24*x - 5*(3 + x), 4)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "ab2b45088a334801819c6e6a9d94fab4": [
        "def solution():\n    nums = [5, 15, 17, 23]\n    total_sum = sum(nums) * 3\n    return total_sum\n\nans = solution()"
    ],
    "fc1e6d4f69b04d27a7517c0eb6c4e22f": [
        "def solution():\n    numbers = [31, 42, 53, 64, 75, 86, 97]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "f7687594899c4a84936c2dc5acc1a17b": [
        "def solution():\n    # Since the last number shown is the 10th term, we can use the formula for the nth term of an arithmetic sequence:\n    # An = A1 + (n - 1) * d\n    # Where An is the nth term, A1 is the first term, n is the term number, and d is the common difference.\n\n    # We know the 10th term is 31\n    nth_term = 31\n\n    # The term number for the last number shown\n    n = 10\n\n    # We can find the common difference by subtracting the preceding term from the last term shown\n    d = 28 - 25  # This is the difference between any two consecutive terms\n\n    # Now we can rearrange the nth term formula to find the first term A1:\n    # A1 = An - (n - 1) * d\n    first_term = nth_term - (n - 1) * d\n\n    return first_term\n\nans = solution()"
    ],
    "a7abc8be2a334d6eaec3ea33bebffa38": [
        "def solution():\n    return 0.50 * 0.50 * 3.20\n\nans = solution()"
    ],
    "b9e41291c02c4031a7bcdcb38cb3cafe": [
        "def solution():\n    return 58 * 60\n\nans = solution()"
    ],
    "e83aa38155204c758ec3f3c943621ee1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andy, bella, carl = symbols('andy bella carl')\n\n    equation1 = Eq(andy, 3 * carl - 5)\n    equation2 = Eq(bella, 5 * carl + 6)\n    equation3 = Eq(andy + bella + carl, 82)\n\n    solutions = solve((equation1, equation2, equation3), (andy, bella, carl))\n\n    return solutions[bella]\n\nans = solution()"
    ],
    "9dbeb15b0ccc44199b320299a1531c7e": [
        "def solution():\n    # Converting the numbers from base 3 to base 10\n    num1_base10 = int('12101', 3)\n    num2_base10 = int('2210', 3)\n\n    # Subtracting the numbers in base 10\n    result_base10 = num1_base10 - num2_base10\n\n    # Converting the result back to base 3\n    ans = ''\n    while result_base10 > 0:\n        ans = str(result_base10 % 3) + ans\n        result_base10 //= 3\n    \n    return ans\n\nans = solution()"
    ],
    "3d7dd83d87f844e58d9e560870e4d190": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cake, biscuit = symbols('cake biscuit')\n\n    # equations based on the problem statement\n    equation1 = Eq(cake + 2 * biscuit, 450)\n    equation2 = Eq(2 * cake + 3 * biscuit, 800)\n\n    # solving the equations\n    solutions = solve((equation1, equation2), (cake, biscuit))\n\n    return solutions[biscuit]\n\nans = solution()"
    ],
    "40f23dfb4c6944d6827e112692a2f4af": [
        "def solution():\n    correct_answers = 6\n    wrong_answers = 2\n    correct_mark = 12\n    wrong_mark = 0\n\n    total_marks = (correct_answers * correct_mark) + (wrong_answers * wrong_mark)\n    total_questions = correct_answers + wrong_answers\n\n    average_mark = total_marks / total_questions\n\n    return average_mark\n\nans = solution()"
    ],
    "12eba26cbba04c40831d8de0d613bdcb": [
        "def solution():\n    # To avoid two numbers differing by 5, we cannot pick both from any consecutive group of 5 numbers.\n    # We try to maximize n by choosing the largest possible numbers of groups of 5 from the first 20 numbers.\n    \n    # We start with the maximum number from each group of 5\n    # 20, 15, 10, 5 - Taking the largest numbers in reverse\n    # Now, we need to choose the rest without breaking the difference condition.\n    # Next, we can take 19, 14, 9, 4 from each group\n    # If we continue this pattern, we avoid the difference of 5 condition.\n    \n    # We can take 3 numbers from each group (20, 19, 18), (15, 14, 13), (10, 9, 8), (5, 4, 3)\n    # This gives us 4 groups times 3 numbers each = 12\n    # We can also add 1 and 2 since they don't have any numbers before them to have a difference of 5 with\n    # So 12 + 2 = 14 is the largest value of n.\n    \n    return 14\n\nans = solution()"
    ],
    "cf212f0a8ebe4fcbb9183e471f844eb7": [
        "def solution():\n    for b in range(1, 10):\n        for t in range(10):\n            pencils_total = int(f\"{b}{t}{b}\")\n            if pencils_total % 44 == 0:\n                pencils_each = pencils_total // 44\n                return pencils_each\n\nans = solution()"
    ],
    "457ec627f0894b55bd6bbb19ec3216ed": [
        "def solution():\n    # Convert mixed numbers to improper fractions\n    numerator1 = 2017 + 7/8\n    multiplier1 = 3 + 2/3\n    numerator2 = 2016.875 * (11/3)\n    \n    denominator1 = (2017 + 1/3) - 2016.875\n    denominator2 = 17\n    \n    multiplier2 = 3 + 23/32\n    \n    # Perform calculations\n    num = (numerator1 * multiplier1) - numerator2\n    den = denominator1 * denominator2\n    \n    fraction = num / den\n    result = fraction * multiplier2\n    \n    return result\n\nans = solution()"
    ],
    "5290a7a4297b46f79f02b35ba7b86bba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sara, kevin, james = symbols('sara kevin james')\n\n    equation1 = Eq(kevin, sara + 30)\n    equation2 = Eq(james, sara + 40)\n    equation3 = Eq(sara + kevin + james, 160)\n\n    solutions = solve((equation1, equation2, equation3), (sara, kevin, james))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "c21adc6d12784b558ba6313332b0f960": [
        "from math import lcm\n\ndef solution():\n    return lcm(4, 6, 7)\n\nans = solution()"
    ],
    "87af33f1b5884c4ea69e49e33d0a8d54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for John's current age (j) and his mother's current age (m)\n    j, m = symbols('j m')\n\n    # Equation 1: John's age in 8 years is the same as his mother's age 20 years ago\n    equation1 = Eq(j + 8, m - 20)\n\n    # Equation 2: At some point, his mother was 5 times as old as John\n    # Let x be the number of years ago when this happened\n    # So, mother's age x years ago is m - x\n    # And John's age x years ago is j - x\n    # We know that m - x = 5 * (j - x)\n    x = symbols('x')\n    equation2 = Eq(m - x, 5 * (j - x))\n\n    # Since the difference in their ages remains constant,\n    # we can express the difference in ages based on equation1\n    age_difference = solve(equation1, m - j)[0]\n\n    # Now substitute the age difference into equation2\n    equation2 = equation2.subs(m - j, age_difference)\n\n    # Solve the set of equations to find the values of j and x\n    solutions = solve(equation2, (j, x))\n\n    # Find John's age (j) when his mother was 5 times his age (which is j-x years ago)\n    john_age_when_mother_5_times = solutions[j] - solutions[x]\n\n    return john_age_when_mother_5_times\n\nans = solution()"
    ],
    "9eed42cf78144b53839062fc748a2a6b": [
        "def solution():\n    apples = 37\n    container_capacity = 4\n\n    num_containers = -(-apples // container_capacity)  # Ceiling division\n    \n    return num_containers\n\nans = solution()"
    ],
    "40292969e8e14e9cbeb87311d97671dc": [
        "def solution():\n    M = 1\n    while True:\n        remainders = set()\n\n        # Check division with each divisor\n        for divisor in range(2, 11):\n            remainder = M % divisor\n            if remainder == 0 or remainder in remainders:\n                break\n            remainders.add(remainder)\n        else:  # If the loop wasn't broken, we found the solution\n            return M\n\n        M += 1\n\nans = solution()"
    ],
    "8e019855e907491ab5c9eee5d32827fc": [
        "def solution():\n    # Calculate least common multiple (LCM) of Tom and William's lap times\n    from math import lcm\n    tom_time = 24\n    william_time = 8\n\n    # The first time they meet will be the LCM of their lap times\n    meeting_time = lcm(tom_time, william_time)\n\n    return meeting_time\n\nans = solution()"
    ],
    "976d0ed32bf84f5083e1272cd57f3a72": [
        "def solution():\n    books_about_fish = 78\n    books_about_birds = books_about_fish - 12\n    total_books = books_about_fish + books_about_birds\n    return total_books\n\nans = solution()"
    ],
    "071a1796963f4c3b964229a2d8a43b31": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for Romily and Reema\n    romily, reema = symbols('romily reema')\n    \n    # Define the equation Romily = Reema + 10\n    equation = Eq(romily, reema + 10)\n    \n    # Since Romily and Reema together collect 120 and Romily collects 10 more than Reema\n    # We can form another equation: Romily + Reema = 120\n    total_equation = Eq(romily + reema, 120)\n    \n    # Solve the system of equations\n    solutions = solve((equation, total_equation), (romily, reema))\n    \n    # Return how much Reema collected\n    return solutions[reema]\n\nans = solution()"
    ],
    "4bc3c98e818346f4be4d3e3f73cdd332": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n\n    both_competitions = math_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "ac392742b1ee4f6d953d5d00c6d023b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    allison, ben, eunice = symbols('allison ben eunice')\n    \n    equation1 = Eq(allison, ben - 6)\n    equation2 = Eq(eunice, 3 * ben)\n    equation3 = Eq(allison + ben + eunice, 74)\n    \n    solutions = solve((equation1, equation2, equation3), (allison, ben, eunice))\n    \n    return solutions[eunice]\n\nans = solution()"
    ],
    "762ea7c4f43b426abdae8d0c00523b6d": [
        "def solution():\n    field_length = 480\n    post_interval = 4\n\n    num_posts = field_length // post_interval + 1\n\n    return num_posts\n\nans = solution()"
    ],
    "1daaad84df24455faa123c07aa34efd8": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(10):\n            if 8 * (10 * a + b) == 3 * (10 * b + a):\n                return 10 * a + b\n\nans = solution()"
    ],
    "fe1ec268421740a592e27756f3a3f6ed": [
        "def solution():\n    import math\n    \n    num = 28\n    # Initialize the smallest number to 1 (multiplicative identity), which if necessary,\n    # will be updated with the product of prime factors that are required in pairs\n    # to make the number under consideration a perfect square\n    smallest_num = 1\n    \n    for i in range(2, num + 1):\n        # Check if i is a prime factor of num\n        if num % i == 0:\n            count = 0\n            # Count the power of prime factor i\n            while num % i == 0:\n                num //= i\n                count += 1\n            # If count of prime factor i is odd, multiply it to smallest_num\n            if count % 2 != 0:\n                smallest_num *= i\n            \n    return smallest_num\n\nans = solution()"
    ],
    "d9d2b528c7a443f89a86e5b624e1ee62": [
        "def solution():\n    return (612 // 34) * 25\n\nans = solution()"
    ],
    "c49dc118c0ec4d2aa50863db0c43cc31": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, louise = symbols('andrew louise')\n\n    equation1 = Eq(andrew, 3 * louise)\n    equation2 = Eq(andrew + louise, 84)\n\n    solutions = solve((equation1, equation2), (andrew, louise))\n\n    return solutions[louise]\n\nans = solution()"
    ],
    "5e82be0f6fa64850ad780e72281f7277": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Time when lunch finished\n    lunch_finished = datetime.strptime('14:50', '%H:%M')\n    \n    # Total time spent before lunch\n    total_time_before_lunch = timedelta(minutes=(10 + 20 + 20))\n    \n    # Calculate the time Benson reached home\n    time_reached_home = lunch_finished - total_time_before_lunch\n    \n    # Format the time in hours and minutes\n    return time_reached_home.strftime('%H:%M')\n\nans = solution()"
    ],
    "7ada23a33bc94088ae1ae8186b32007c": [
        "import math\n\ndef solution():\n    # A and B can be considered as one unit AB or BA, so we have 5 units now.\n    # These 5 units can be arranged in 5! ways.\n    unit_permutations = math.factorial(5)\n    \n    # Now A and B within their unit can also be arranged in 2! ways since they can switch places.\n    ab_arrangements = math.factorial(2)\n    \n    # Total arrangements is the product of the arrangements of units and arrangements of A and B.\n    total_arrangements = unit_permutations * ab_arrangements\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "9cd4bf4428bf41138128774d0ccd221a": [
        "def solution():\n    positive_numbers = [10, 20, 30, 50, 60, 70]\n    negative_numbers = [6, 16, 26, 46, 56, 66]\n    ans = sum(positive_numbers) - sum(negative_numbers)\n    return ans\n\nans = solution()"
    ],
    "d6fa863308bf4180b14d7c87b45ff7fe": [
        "def solution():\n    initial_rabbits = 64\n    years = 5\n\n    for _ in range(years):\n        initial_rabbits = 5 * initial_rabbits // 2\n\n    return initial_rabbits\n\nans = solution()"
    ],
    "1463a32cbb5c44b19f250a84a1236899": [
        "def solution():\n    fare_per_mile = 6\n    y, x = symbols('y x')\n    equation = Eq(y, fare_per_mile * x)\n    return equation\n\nans = solution()"
    ],
    "dcab993860a143ab9ab270b31a317e8a": [
        "def solution():\n    for number in range(99, 9, -1):\n        if number % 4 == 3 and number % 5 == 3:\n            return number\n\nans = solution()"
    ],
    "6d5c4a1d978545239a3df4d8d35da342": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "dabcd77349ae4d299a61e7caf4c19962": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, green, purple = symbols('red green purple')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(red, green / 4)\n    equation2 = Eq(red, (3/5) * purple)\n    equation3 = Eq(4 * red + 5 * green + 7 * purple, 642)\n\n    # Solve the system of equations for red, green, and purple\n    solutions = solve((equation1, equation2, equation3), (red, green, purple))\n\n    return solutions[purple]\n\nans = solution()"
    ],
    "c530bf9072b44544be96e328b31dddec": [
        "def solution():\n    total_sweets = 138\n    min_sweets_per_student = 5\n    class_size = total_sweets // min_sweets_per_student\n    return class_size\n\nans = solution()"
    ],
    "c632ecf0b70c4dc68f095f11d53a2c48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of steps of the escalator as 'e'\n    # and the escalator's speed as 's' (in steps per second)\n    e, s = symbols('e s')\n\n    # When Peter walks 1 step per second, it takes him 10 seconds to reach the top\n    # So the escalator moves 's * 10' steps in the same time\n    equation1 = Eq(e, 10 + s * 10)\n\n    # When Peter walks 2 steps per second, it takes him 8 seconds to reach the top\n    # So the escalator moves 's * 8' steps in the same time\n    equation2 = Eq(e, 16 + s * 8)\n\n    # Solve the two equations simultaneously to find the value of 'e'\n    solutions = solve((equation1, equation2), (e, s))\n\n    return solutions[e]\n\nans = solution()"
    ],
    "dd6f7bdd1929429eadda217510a131e9": [
        "def solution():\n    road_length = 500\n    interval = 5\n\n    num_trees = (road_length // interval) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "5dd30416f315499b8a0dbde91c6c41cf": [
        "def solution():\n    # Since 248 is 2 more than 246, we can multiply 135 by 2 and then add to the result of 246*135\n    precalculated_result = 33210\n    increment = 135 * 2\n    \n    return precalculated_result + increment\n\nans = solution()"
    ],
    "8bb5257fccb34dadb3f706c8afa40ab1": [
        "def solution():\n    tens = 3 * 10\n    hundredths = 33 * 0.01\n    thousandths = 300 * 0.001\n\n    sum_value = tens + hundredths + thousandths\n\n    return sum_value\n\nans = solution()"
    ],
    "63b0962a80a14f52b0f59716321e5cc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(34 - 3 * (2*x - 2), 16)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "728ef59836434ae1bf3a1b1506cf0b69": [
        "def solution():\n    percentage = 25\n    total = 1200\n\n    ans = (percentage / 100) * total\n\n    return ans\n\nans = solution()"
    ],
    "a270f073fd714e96b31da30d7e7b2333": [
        "def solution():\n    james_height = 120\n    difference = 30\n    mark_height = james_height + difference\n    return mark_height\n\nans = solution()"
    ],
    "fc6ca0edb0d64b2c9a19de7afec2cf87": [
        "def solution():\n    total_stickers = 243\n    stickers_per_child = 6\n    remaining_stickers = 3\n\n    num_children = (total_stickers - remaining_stickers) // stickers_per_child\n\n    return num_children\n\nans = solution()"
    ],
    "296f5e0875b34350bfa03c591217b39e": [
        "def solution():\n    ben_blocks = 20\n    given_blocks = ben_blocks / 4\n    remaining_blocks = ben_blocks - given_blocks\n    return remaining_blocks\n\nans = solution()"
    ],
    "f24a947247034c0d9d80524cd5787f66": [
        "def solution():\n    ans = 7268 + 94 + 567\n    return ans\n\nans = solution()"
    ],
    "0f2e5c37cda24be7a26aca5a0cef0e9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jon, miguel = symbols('jon miguel')\n    equation1 = Eq(jon, miguel + 0.30 * miguel)\n    equation2 = Eq(jon + miguel, 46)\n\n    solutions = solve((equation1, equation2), (jon, miguel))\n\n    return solutions[jon]\n\nans = solution()"
    ],
    "52c6df5f73ca41218bfc3137351d2ab7": [
        "def solution():\n    for h in range(1, 5):  # Hundreds digit must be 2, 4, 6, 8 and even\n        for t in range(0, 10, 2):  # Tens digit must be even\n            for o in range(0, 10, 2):  # Ones digit must be even\n                if h != t and h != o and t != o and o == 2 * h and h < t:\n                    number = 100 * h + 10 * t + o\n                    if number % 2 == 0 and number % 9 == 0:\n                        return number\n\nans = solution()"
    ],
    "1e972793be384a17b12b0af5d4176a57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencil, notebook = symbols('pencil notebook')\n\n    equation1 = Eq(5 * pencil + 6 * notebook, 17)\n    equation2 = Eq(8 * pencil + 6 * notebook, 20)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (pencil, notebook))\n\n    # Getting the total cost of 1 pencil and 1 notebook\n    total_cost = solutions[pencil] + solutions[notebook]\n\n    return total_cost\n\nans = solution()"
    ],
    "a3a5c767bd45427d82afb83f82fc1001": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sally, ken = symbols('sally ken')\n    \n    # sally and ken originally had chocolates in the ratio 5:7\n    original_ratio = Eq(sally / ken, 5/7)\n    \n    # ken gives sally 24 chocolates\n    after_giving = Eq(sally + 24, ken - 24)\n    \n    # after giving, sally has twice as many chocolates as ken\n    final_ratio = Eq(sally + 24, 2 * (ken - 24))\n    \n    # solve the system of equations\n    solutions = solve((original_ratio, after_giving, final_ratio), (sally, ken))\n    \n    return solutions[ken]\n\nans = solution()"
    ],
    "51079614a5ec47b0b15c1b5488ae900f": [
        "def solution():\n    ans = 478 - 189\n    return ans\n\nans = solution()"
    ],
    "5efa232175da4ea8aef5abb6b0a6ab63": [
        "def solution():\n    bill = 82\n    free_hours = 40\n    hours = free_hours\n    extra_bill = bill\n\n    # Calculate hours parked based on the bill\n    if extra_bill > 0:\n        # Calculate for the $5 per hour rate\n        if extra_bill <= 10 * 5:\n            hours += extra_bill / 5\n            extra_bill = 0\n        else:\n            hours += 10\n            extra_bill -= 10 * 5\n\n    if extra_bill > 0:\n        # Calculate for the $8 per hour rate\n        if extra_bill <= 10 * 8:\n            hours += extra_bill / 8\n            extra_bill = 0\n        else:\n            hours += 10\n            extra_bill -= 10 * 8\n    \n    if extra_bill > 0:\n        # Calculate for the $15 per hour rate\n        hours += extra_bill / 15\n\n    return hours\n\nans = solution()"
    ],
    "89a89120ab754c9caf6049809ce30d70": [
        "def solution():\n    bill = 55\n    tip_percent = 0.20\n    tax_percent = 0.10\n\n    tip = bill * tip_percent\n    tax = bill * tax_percent\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "8696d8e4602b473aa501ef6f73193bfa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    raju, vijay, patrick = symbols('raju vijay patrick')\n    \n    equation1 = Eq(raju, 3 * vijay)\n    equation2 = Eq(raju, patrick + 152)\n    equation3 = Eq((raju + vijay + patrick) / 3, 507)\n    \n    solutions = solve((equation1, equation2, equation3), (raju, vijay, patrick))\n    \n    return solutions[vijay]\n\nans = solution()"
    ],
    "c57f27a1e67c4f79802030c3561c11d4": [
        "def solution():\n    square_sides = 4\n    triangle_sides = 3\n\n    thought_number = (square_sides * 2) - triangle_sides\n\n    return thought_number\n\nans = solution()"
    ],
    "02949cc66116485ca8bed41784c54430": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "c38be742ce424260a3f93e4e8335becf": [
        "def solution():\n    original_pay_per_hour = 7.50\n    increase_percentage = 12 / 100  # converting percentage to a decimal\n\n    new_pay_per_hour = original_pay_per_hour + (original_pay_per_hour * increase_percentage)\n    return new_pay_per_hour\n\nans = solution()"
    ],
    "8fddb6866a0c42b6905b4afb3024b9c9": [
        "def solution():\n    return 89 * 19\n\nans = solution()"
    ],
    "60f1559c0b6c431ebd109f40541ca33e": [
        "def solution():\n    return 96 * 8\n\nans = solution()"
    ],
    "6b90c037d1be47a69b827f642dbed228": [
        "def solution():\n    digits = 1014\n    total_pages = 0\n    pages_with_n_digits = 9\n\n    for n in range(1, 12):  # Assuming we won't have a book with more than 1 trillion pages\n        if digits > n * pages_with_n_digits:\n            digits -= n * pages_with_n_digits\n            total_pages += pages_with_n_digits\n            pages_with_n_digits *= 10\n        else:\n            total_pages += -(-digits // n)  # Ceiling division to get the full pages\n            break\n\n    return total_pages\n\nans = solution()"
    ],
    "27fb27320fd24c98af0e5d6caa596fae": [
        "def solution():\n    # Joanna's pocket money per week\n    joanna_money_per_week = 5.00\n    # Amy's pocket money per week\n    amy_money_per_week = 3.50\n    # The amount Amy spends on stickers per week\n    amy_spent_per_week = 0.75\n    # Number of weeks\n    weeks = 5\n    \n    # Joanna's total savings\n    joanna_total = joanna_money_per_week * weeks\n    # Amy's total savings - total spent on stickers\n    amy_total = (amy_money_per_week * weeks) - (amy_spent_per_week * weeks)\n    \n    # Difference between Joanna's savings and Amy's savings\n    difference = joanna_total - amy_total\n\n    return difference\n\nans = solution()"
    ],
    "b4eefed42dc74e7e8e95f0ff3ff68f36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Create a symbol for the original number\n    original_number = symbols('original_number')\n    \n    # Equation based on problem statement\n    equation = Eq(3 * original_number + 6, original_number + 16)\n    \n    # Solve the equation for the original number\n    solution = solve(equation, original_number)\n    \n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "fc089fb6a2704dc6baf4797d3c3c45b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n\n    # Equation: 57 + magic_number = 4 * (9 + magic_number)\n    equation = Eq(57 + magic_number, 4 * (9 + magic_number))\n\n    magic_number_value = solve(equation, magic_number)\n\n    return magic_number_value[0]\n\nans = solution()"
    ],
    "0f2da0528c2f48f5870753bbc07cdc39": [
        "from math import comb\n\ndef solution():\n    total_teachers = 2\n    total_male_students = 7\n    total_female_students = 6\n\n    # Total ways to form a committee with 1 teacher and 4 students\n    total_ways = total_teachers * comb(total_male_students + total_female_students, 4)\n\n    # Total ways to form a committee with all male students\n    all_male_ways = total_teachers * comb(total_male_students, 4)\n\n    # Subtract the all male committee from the total to get at least one female\n    at_least_one_female_ways = total_ways - all_male_ways\n\n    return at_least_one_female_ways\n\nans = solution()"
    ],
    "151555f881df4432befb850114db3fff": [
        "def solution():\n    monthly_salary = 3.248\n    debt = 1.6\n\n    months_needed = debt / monthly_salary\n\n    return months_needed\n\nans = solution()"
    ],
    "874bf5bc08b84870965ca710d514ca6c": [
        "def solution():\n    ans = (10 - 6) + (20 - 16) + (30 - 26) + (40 - 36) + (50 - 46) + (60 - 56) + (70 - 66) + 2021\n    return ans\n\nans = solution()"
    ],
    "7cd83847e1cb45e8af9499a2ccb9d6d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    alice, sister = symbols('alice sister')\n    \n    # Alice is twice as old as her sister now\n    equation1 = Eq(alice, 2 * sister)\n    # In 10 years, their total age is 53\n    equation2 = Eq(alice + sister + 2*10, 53)\n\n    solutions = solve((equation1, equation2), (alice, sister))\n    \n    return solutions[alice]\n\nans = solution()"
    ],
    "96fe43257ccf486992d5d460d0a71d9a": [
        "def solution():\n    # Given values\n    nth_term_10 = 23\n    nth_term_15 = 38\n    position_10 = 10\n    position_15 = 15\n\n    # Find the common difference\n    common_difference = (nth_term_15 - nth_term_10) / (position_15 - position_10)\n\n    # Find the 12th term using the common difference and the 10th term\n    nth_term_12 = nth_term_10 + common_difference * (12 - position_10)\n\n    return int(nth_term_12)\n\nans = solution()"
    ],
    "1c0ea42cfd6a4ccbbe8d53d2ca3efe95": [
        "def solution():\n    # In a monomial, the degree is the sum of the exponents of all its variables.\n    # The given monomial is -x^3 * y^(2n) and its degree is 5.\n    # Degree of monomial = Degree of x + Degree of y\n    # 3 (from x^3) + 2n (from y^(2n)) = 5\n    # Solving for n: 2n = 5 - 3\n\n    n = (5 - 3) / 2\n    return n\n\nans = solution()"
    ],
    "6a672f1831e34d92bcdd43e39b7f6729": [
        "def solution():\n    milk_per_cup = 2 / 3\n    tea_per_cup = 3 / 5\n    cups = 45\n\n    total_milk = milk_per_cup * cups\n    total_tea = tea_per_cup * cups\n\n    total_liters = total_milk + total_tea\n\n    return total_liters\n\nans = solution()"
    ],
    "bce90c0bc27243dbbf3b460013299a73": [
        "def solution():\n    return (17 / 20) * 100\n\nans = solution()"
    ],
    "a0351e748b1c43eea23b3f8711946c24": [
        "def solution():\n    term = 5 * 10\n    return term\n\nans = solution()"
    ],
    "4971d043e24c45eea658bd168d78c5f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book_price, pencil_price = symbols('book_price pencil_price')\n    pencil_price = 0.40  # pencil cost is 40p which is £0.40\n    sarah_total = 8 * book_price + 3 * pencil_price\n    rebecca_total = 3 * book_price + 8 * pencil_price\n    equation = Eq(sarah_total, rebecca_total + 1)  # Sarah paid £1 more than Rebecca\n\n    book_price_solution = solve(equation, book_price)\n\n    return book_price_solution[0]\n\nans = solution()"
    ],
    "f51ebd85ffb142399f8aa45e108f8c7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    angela, bernice, candice = symbols('angela bernice candice')\n    \n    # Conversion rate from pence to pounds: 1 pound = 100 pence\n    conversion_rate = 1/100\n    \n    # Angela = Bernice + 2\n    equation1 = Eq(angela, bernice + 2)\n    \n    # Bernice = Candice + 8\n    equation2 = Eq(bernice, candice + 8)\n    \n    # Total cost in pounds\n    total_cost = 3.42\n    \n    # The total cost is the sum of the gummy bears bought by Angela, Bernice, and Candice\n    # multiplied by the cost of each gummy bear in pounds\n    equation3 = Eq((angela + bernice + candice) * 6 * conversion_rate, total_cost)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (angela, bernice, candice))\n    \n    return solutions[angela]\n\nans = solution()"
    ],
    "175f3134588c438fbd11afdc6d088ab3": [
        "def solution():\n    # Given that the median is 20, we can conclude that n+8 must be the median value.\n    median_index = 5  # Since there are 10 numbers, the median is the average of the 5th and 6th numbers\n    n_plus_8 = 20  # median value\n\n    # Now we solve for n\n    n = n_plus_8 - 8\n\n    # Calculate the mean value of the list by summing all terms and dividing by the number of terms\n    numbers = [\n        n, n + 2, n + 3, n + 5, n + 7, n + 8, n + 11, n + 14, n + 16, n + 19\n    ]\n    mean = sum(numbers) / len(numbers)\n\n    return mean\n\nans = solution()"
    ],
    "c73139012b3a4617bcdf34be499ab519": [
        "def solution():\n    n = 100\n    sum_n = n * (n + 1) // 2\n    return sum_n\n\nans = solution()"
    ],
    "93002079121d48f6aea4f803b68b139d": [
        "def solution():\n    # Let the first number be x\n    # Then the consecutive numbers are x + 1, and x + 2\n    # The sum of these numbers is x + (x + 1) + (x + 2) = 60\n    # Simplifying, 3x + 3 = 60\n    # Solving for x, 3x = 57\n    # x = 19 (the first number)\n    # So the largest number is x + 2\n    largest_number = 19 + 2\n    return largest_number\n\nans = solution()"
    ],
    "f63a917efc384a819f65597f5c2cdf8e": [
        "def solution():\n    total_juice = 10  # litres\n    per_container = 2  # litres per container\n\n    num_containers = total_juice / per_container\n\n    return int(num_containers)\n\nans = solution()"
    ],
    "f64bb6d575274f2eb7aed9c54b618daf": [
        "def solution():\n    # Let the weights of the three apples be a, b, and c, and without loss of generality\n    # assume that a < b < c (a is the lightest, and c is the heaviest)\n    \n    # According to the problem, the mean weight of the remaining two apples after eating the largest (c) is 70 grams,\n    # so we have: (a + b) / 2 = 70 => a + b = 140\n    \n    # If Tim eats the lightest one (a), the mean weight of the remaining two apples (b and c) is 105 grams\n    # so we have: (b + c) / 2 = 105 => b + c = 210\n    \n    # The total weight of the three apples is the sum of the first two equations\n    # a + b + c = 140 (from the first equation) + 210 (from the second equation)\n    total_weight = 140 + 210\n    \n    # Now we need to find out the difference between the heaviest (c) and the lightest (a)\n    # We know that (a + b + c) = total_weight and also (a + b) = 140.\n    # So we can find out c as c = total_weight - 140\n    \n    c = total_weight - 140\n    \n    # Similarly, we can find out a as a = total_weight - 210\n    a = total_weight - 210\n    \n    # Now the difference between the heaviest and the lightest apple\n    difference = c - a\n    \n    return difference\n\nans = solution()"
    ],
    "0d1b0c5f7803452da1653f98e4626d11": [
        "def solution():\n    return 427 // 7\n\nans = solution()"
    ],
    "b502e3de36614cb6b890c32cf02729c5": [
        "def solution():\n    for A in range(10):\n        if (A + (10 * A + A) + (100 * A + 10 * A + A)) == 222:\n            return A\n\nans = solution()"
    ],
    "384f0b70b2a44ba7beb5d3d58e5f61b3": [
        "def solution():\n    total_members = 17\n    handshakes_excluded_members = 4\n    \n    # Total possible handshakes for n people: n * (n - 1) / 2\n    total_handshakes = total_members * (total_members - 1) // 2\n    \n    # Excluded handshakes among the 4 members who didn't shake hands:\n    # 4 members not shaking hands with each of other 3 members means\n    # no handshakes occur among those 4 members.\n    excluded_handshakes = handshakes_excluded_members * (handshakes_excluded_members - 1) // 2\n    \n    # Subtract handshakes that didn't occur from total possible handshakes\n    handshakes_that_happened = total_handshakes - excluded_handshakes\n\n    return handshakes_that_happened\n\nans = solution()"
    ],
    "8aa228a35f9341e2ba3ad7168a64568b": [
        "def solution():\n    for num in range(1, 10):  # Since we're dealing with a single digit, the range is 1 to 9\n        if int(str(num) + '0') == num + 27:\n            return num\n\nans = solution()"
    ],
    "7be31461e97f4911bea77bc2fc190e08": [
        "def solution():\n    first_term = 2\n    difference = 4\n    nth_term = 11\n\n    nth_term_value = first_term + (nth_term - 1) * difference\n\n    return nth_term_value\n\nans = solution()"
    ],
    "888de29c136b4d85b33e27c600d1d94a": [
        "def solution():\n    nate_age = 11\n    sister_age = nate_age + 2\n    return sister_age\n\nans = solution()"
    ],
    "a45e4fa740df4a7baa653312b07f2227": [
        "def solution():\n    # Distance covered by 41 plum trees\n    total_distance = (41 - 1) * 4  # trees at both ends so we subtract 1 from the count\n\n    # Number of pine trees\n    pine_trees = (total_distance // 5) + 1 # since trees are at both ends, we add 1 to the count\n\n    return pine_trees\n\nans = solution()"
    ],
    "ae79c827ac84468cbfe680efa5f4322f": [
        "def solution():\n    # If Bob is always the 3rd in line no matter which way he counts, \n    # this means there are 2 animals before and 2 animals after him in both directions.\n    # Therefore, there must be a total of 5 animals in both the row and the column he is in.\n    # Since it's an array (rectangle), we multiply the number of animals in one row \n    # by the number in one column to get the total number of animals.\n    \n    animals_in_row = 5\n    animals_in_column = 5\n    total_animals = animals_in_row * animals_in_column\n    \n    return total_animals\n\nans = solution()"
    ],
    "6fd47ac3b3fb42dca4192701b2a036bb": [
        "def solution():\n    ans = 245 // 5\n    return ans\n\nans = solution()"
    ],
    "4f74241972d3482ca774dea7319f446e": [
        "def solution():\n    smallest_multiple = 11 * ((100 // 11) + 1)\n    largest_multiple = 11 * (300 // 11)\n    return smallest_multiple + largest_multiple\n\nans = solution()"
    ],
    "a5d9770a94fa4709a356e767867213ac": [
        "def solution():\n    incorrect_total_salary = 4000 * 12\n    correct_total_salary = incorrect_total_salary - 2800 + 3040\n    correct_average_salary = correct_total_salary / 12\n    return correct_average_salary\n\nans = solution()"
    ],
    "dae17711b2cd4d8882ad91e169803384": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    durian, honeydew = symbols('durian honeydew')\n    equation1 = Eq(2 * durian + 3 * honeydew, 77)\n    equation2 = Eq(durian, 2 * honeydew)\n    \n    solutions = solve((equation1, equation2), (durian, honeydew))\n\n    return solutions[durian]\n\nans = solution()"
    ],
    "004ab338da1a4dada61e061cc3b9f844": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x represent the number of coins in each stack.\n    # Let a, b, c represent the number of one-cent, two-cent, and five-cent coin stacks, respectively.\n    a, b, c, x = symbols('a b c x')\n\n    # Based on the relationships given in the problem, we have:\n    equation1 = Eq(6 * a, 5 * b)  # The relationship between one-cent and two-cent coins.\n    equation2 = Eq(4 * a, 3 * c)  # The relationship between one-cent and five-cent coins.\n\n    # Sam uses the total of 124 coins, distributed into 3 stacks of equal heights, we get:\n    equation3 = Eq(a + b + c, 124)  # The total number of coins.\n    equation4 = Eq(a * x, b * x * 2)  # Total height of one-cent coins vs two-cent coins.\n    equation5 = Eq(a * x, c * x * 5)  # Total height of one-cent coins vs five-cent coins.\n\n    # We also know that because each stack is the same height, the number of each type of coin is a multiple of x.\n    # Therefore, a, b, and c must be divisible by x, but this information doesn't provide us with an additional equation.\n\n    # We now solve the set of equations for a, b and c.\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n\n    # We have solutions for a, b, and c.\n    a_val = solutions[a]\n    b_val = solutions[b]\n    c_val = solutions[c]\n\n    # Now we need to find x such that a, b, c are all integers, and the total value is minimum.\n    for x_val in range(1, 125):\n        if all(isinstance(val.subs(x, x_val), int) for val in (a_val, b_val, c_val)):\n            total_value = a_val.subs(x, x_val) + 2 * b_val.subs(x, x_val) + 5 * c_val.subs(x, x_val)\n            break\n\n    return total_value\n\nans = solution()"
    ],
    "9bdf1b39c69d40c192cf8573177c7066": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(17*x - 3*(6+x), 9*x + 32)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "25c62dcd851e4ad1b5f7189dcfb4ed2b": [
        "def solution():\n    total_money = 200\n    spent_on_books = total_money * 0.25\n    money_left = total_money - spent_on_books\n    spent_on_dvd = money_left * 0.20\n    remaining_money = money_left - spent_on_dvd\n    return remaining_money\n\nans = solution()"
    ],
    "0eb5531c437b4567aef0bba6c28958a4": [
        "def solution(m):\n    return m // 12\n\nm = symbols('m')  # m is the total components produced last year\nans = solution(m)"
    ],
    "ed97e5e57d5b40ec8113dcb104438e54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the amount of water in Container B be x mL\n    # Then the amount of water in Container A originally is x + 350 mL\n    A, B = symbols('A B')\n\n    # After spilling, A has (A - 500) mL\n    # B has twice the water in A after spilling\n    equation = Eq(B, 2 * (A - 500))\n\n    # Given that A has 350mL more than B at the start\n    equation2 = Eq(A, B + 350)\n\n    # Solving the equations\n    solutions = solve((equation, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "a3c32223f3b045ae854ecf8d286778e6": [
        "def solution():\n    max_red_pens = 0\n    for green_pens in range(1, 100):\n        blue_pens = (2 / 5) * green_pens\n        red_pens = (1 / 4) * green_pens\n        total_pens = blue_pens + green_pens + red_pens\n\n        if total_pens < 100 and blue_pens.is_integer() and red_pens.is_integer():\n            max_red_pens = max(max_red_pens, red_pens)\n            \n    return int(max_red_pens)\n\nans = solution()"
    ],
    "e8a29ad030a44c90b8487dcc6ab6265a": [
        "def solution():\n    for num in range(999999, 100000, -1):\n        if str(num) == str(num)[::-1] and num % 6 == 0:\n            return num\n\nans = solution()"
    ],
    "3f99ba9a016d4255a61b7cc828b2284d": [
        "def solution():\n    initial_boys = 216\n    initial_girls = 153\n    children_joined = 37\n\n    total_children_after_hour = initial_boys + initial_girls + children_joined\n\n    return total_children_after_hour\n\nans = solution()"
    ],
    "e990e7f85afe4ec8b4a88f34ca128f91": [
        "def solution():\n    cans_per_day = 42 / 6\n    cans_in_9_days = cans_per_day * 9\n    return cans_in_9_days\n\nans = solution()"
    ],
    "3d026487768a4329970e9623128a6980": [
        "def solution():\n    ans = 56 + 78 + 44 + 22\n    return ans\n\nans = solution()"
    ],
    "3bd10f66a047470cb619292f83def4bd": [
        "def solution():\n    total_pins_needles = 2540\n    sold_pins = 1820\n    needles_left_fraction = 1 - (4 / 5)\n    \n    # Total items left\n    total_left = total_pins_needles - sold_pins\n    \n    # Needles left\n    needles_left = total_left * needles_left_fraction\n    \n    return int(needles_left)\n\nans = solution()"
    ],
    "b0e8486e84644676b58c927c2f5c98ee": [
        "def solution():\n    desired_length_m = 1.83  # desired length in meters\n    too_short_cm = 10        # too short length in centimeters\n    too_short_m = too_short_cm / 100  # converting centimeters to meters\n    \n    garage_piece_m = desired_length_m - too_short_m  # length of piece in the garage in meters\n    \n    return garage_piece_m\n\nans = solution()"
    ],
    "5ed239080ded493396d3231a4454902f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the initial number of marbles that Wei Yan had\n    x = symbols('x')\n\n    # Create the equation according to the problem statement\n    equation = Eq(x + 408, 2 * x * (1 - 3/8) * (1 - 5/7))\n\n    # Solve the equation for x\n    num_marbles = solve(equation, x)\n\n    return num_marbles[0]\n\nans = solution()"
    ],
    "5a0d6b60b12e4a5fa3381f303b4ec98e": [
        "def solution():\n    return (2/7) * 315\n\nans = solution()"
    ],
    "4e932e68be27467ea297053d9901fc5e": [
        "def solution():\n    pattern = [8, 8, 3, 3, 2, 5]  # Define the repeating pattern.\n    sum_of_pattern = sum(pattern)  # Sum of one complete pattern.\n    pattern_length = len(pattern)  # Length of the pattern.\n    \n    # Calculate how many full patterns fit within 41 numbers.\n    full_patterns = 41 // pattern_length\n    \n    # Calculate the sum for all full patterns.\n    full_pattern_sum = full_patterns * sum_of_pattern\n    \n    # Calculate how many numbers are left after full patterns.\n    remaining_numbers = 41 % pattern_length\n    \n    # Take the sum of the remaining numbers in the pattern.\n    remaining_sum = sum(pattern[:remaining_numbers])\n    \n    # The total sum is the sum of all complete patterns and the remaining numbers.\n    total_sum = full_pattern_sum + remaining_sum\n    \n    return total_sum\n\nans = solution()"
    ],
    "c7a29e2ef9654a2a957ff7a2cb12c3aa": [
        "def solution():\n    ways = 0\n    total_pence = 47\n    for two_p_coins in range(total_pence // 2 + 1):\n        for five_p_coins in range(total_pence // 5 + 1):\n            if (two_p_coins * 2 + five_p_coins * 5) == total_pence:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "ce5f19623c5a44689e7c49754192cf5a": [
        "def solution():\n    numerator = (9 + 10 + 11) / 8 - (10 + 11 + 12) / 9 + (11 + 12 + 13) / 10 - (12 + 13 + 14) / 11\n    denominator = 1 / 8 - 1 / 9 + 1 / 10 - 1 / 11\n    \n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "591840ca7c7b45a5bd7b76b65a763eeb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq(52 - (4*x - 3), 47)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "7a275792c5364908a3e7b3c7c4d8f6af": [
        "def solution():\n    num1 = round(654876, -2)\n    num2 = round(279745, -2)\n    ans = num1 - num2\n    return ans\n\nans = solution()"
    ],
    "98c9966f7fd249d7beb63974bfe3742c": [
        "def solution():\n    # Birth years of Brian and his father\n    brian_birth_year = 14\n    father_birth_year = 41\n    \n    # Age difference between Brian and his father\n    age_difference = father_birth_year - brian_birth_year\n    \n    # Loop over the possible ages until the reverse condition is met again\n    for age in range(brian_birth_year + 1, father_birth_year * 2):\n        father_age = age + age_difference\n        if str(age) == str(father_age)[::-1]:\n            return age\n\nans = solution()"
    ],
    "9aae6b402ba548c6930873d942339f30": [
        "def solution():\n    time = 16  # time in seconds\n    length_of_train = 480  # length in meters\n\n    # speed = distance / time\n    speed = length_of_train / time\n    \n    # Converting m/s to km/h by multiplying with 3.6 (1 m/s = 3.6 km/h)\n    speed_kmh = speed * 3.6\n\n    return speed_kmh\n\nans = solution()"
    ],
    "58b3af9d6c964137b1edfb53c29428ea": [
        "def solution():\n    return sum(range(1, 6)) + sum(range(4, 0, -1))\n\nans = solution()"
    ],
    "4b78873d37fb432ca3d3cbcd97a41dd1": [
        "def solution():\n    count = 0\n    for i in range(1, 8):\n        count += 1  # We can always split the number into i and 8-i\n    return count\n\nans = solution()"
    ],
    "ef45cb41c0684c548c0b00944deb7b6e": [
        "def solution():\n    count = 0\n    # Since we need to divide apples into 3 piles and we can't have 0 apples in a pile,\n    # we start from 1 apple in each pile. x1, x2, and x3 represent the piles.\n    for x1 in range(1, 11):\n        for x2 in range(1, 11):\n            x3 = 11 - x1 - x2\n            # We check if x3 is a plausible number of apples (above 0) and we must also ensure\n            # that the rest of the piles should be different, hence checking if x1, x2, and x3\n            # are unique.\n            if x3 > 0 and len(set([x1, x2, x3])) == 3:\n                count += 1\n\n    # Each combination is counted 3! = 6 times because there are 3! ways to arrange 3 piles,\n    # so we divide the count by 6 to get the number of distinct ways.\n    return count // 6\n\nans = solution()"
    ],
    "80a6303359124d99934818dd22810e2e": [
        "def solution():\n    ans = 49 + 83\n    return ans\n\nans = solution()"
    ],
    "fbf2d88569644819af3dd38084210d8b": [
        "def solution():\n    cost_per_kg = 3.60 / 2.5\n    cost_for_3_5_kg = cost_per_kg * 3.5\n    return cost_for_3_5_kg\n\nans = solution()"
    ],
    "20e6b2c641d34326ba0e011da65e2397": [
        "def solution():\n    ans = 20.6 + 5.2 + 1.4 + 4.8\n    return ans\n\nans = solution()"
    ],
    "2fb1bc8c622247da958854a407c487b9": [
        "def solution():\n    return (2/5) * 30\n\nans = solution()"
    ],
    "6b573c8aa446405c9ce58ca024a8db57": [
        "def solution():\n    return (5/8) * 4000\n\nans = solution()"
    ],
    "3b599d1537964d4d8232681ee0808bca": [
        "def solution():\n    number_of_lampposts = 113\n    distance_between_lampposts = 8\n\n    road_length = (number_of_lampposts - 1) * distance_between_lampposts\n\n    return road_length\n\nans = solution()"
    ],
    "67f220877e984c29ad61b7f41c214535": [
        "def solution():\n    return (10**5) / (5**5)\n\nans = solution()"
    ],
    "48554051f2e24553a7af8d7920ec5816": [
        "def solution():\n    total_pupils = 40\n    failed_pupils = 14\n    \n    failed_percentage = (failed_pupils / total_pupils) * 100\n    \n    return failed_percentage\n\nans = solution()"
    ],
    "5f04cbde7c154926a18bd9d4d73e17bf": [
        "def solution():\n    erased_sum = sum(i for i in range(1, 51) if '3' in str(i))\n    return erased_sum\n\nans = solution()"
    ],
    "66221e9a8b3746c485f75a9f4a5d0ddb": [
        "def solution():\n    pastas = 4\n    sauces = 3\n    toppings = 3\n\n    combinations = pastas * sauces * toppings\n    \n    return combinations\n\nans = solution()"
    ],
    "a54ae46dec7f42e29795d23b9ef90715": [
        "def solution():\n    nums = [0.89, 0.9, 0.17, 0.72, 0.73]\n    largest = max(nums)\n    smallest = min(nums)\n    difference = largest - smallest\n    return difference\n\nans = solution()"
    ],
    "5ffbee4470f04187ad886c281d595cc1": [
        "def solution():\n    total_guests = 153\n    poppers_per_bag = 12\n\n    full_bags = total_guests // poppers_per_bag\n    remaining_poppers = total_guests % poppers_per_bag\n    poppers_left_in_last_bag = poppers_per_bag - remaining_poppers\n\n    return poppers_left_in_last_bag\n\nans = solution()"
    ],
    "8523b28be59d40be8d747baa32fe31b2": [
        "def solution():\n    return (7 ** 2023) % 10\n\nans = solution()"
    ],
    "7ef36b5f0f06421e85d5adcf3d61a56c": [
        "def solution():\n    # Since each key needs to be matched with a classroom, \n    # and we only know we've found the right key when there's \n    # just one key and one classroom left, we need to take into \n    # account the worst-case scenario where each key is tested.\n    # For each classroom, you could potentially have to try each key.\n    # So for the first classroom, you try up to 10 keys,\n    # then for the second one you try up to 9 keys, and so on.\n    num_classrooms = 10\n    attempts = sum(range(1, num_classrooms + 1))\n\n    return attempts\n\nans = solution()"
    ],
    "66eeed32cf3f4adc8bdbd45de1710156": [
        "def solution():\n    from decimal import Decimal, getcontext\n    from sympy import root, Rational\n\n    getcontext().prec = 6  # Setting precision to ensure accuracy\n\n    # Calculating the repeated decimal for -13.3 repeating\n    neg_thirteen_repeating = Decimal(-40) / Decimal(3)\n\n    # Calculating the square of 4.09 repeating\n    four_zero_nine_repeating = Decimal('4.1') - Decimal(1) / Decimal(99)\n    four_zero_nine_repeating_square = four_zero_nine_repeating ** 2\n\n    # Calculating the square root of 11.1 repeating\n    eleven_one_repeating = Decimal(10) + Decimal(1) / Decimal(9)\n    eleven_one_repeating_sqrt = eleven_one_repeating.sqrt()\n\n    # Calculating the final expression\n    numerator = root(neg_thirteen_repeating, 3) * four_zero_nine_repeating_square\n    denominator = Decimal('59.24') - eleven_one_repeating_sqrt\n    result = numerator / denominator\n\n    # Rounding off to the nearest 3 decimal places\n    ans = round(result, 3)\n\n    return ans\n\nans = solution()"
    ],
    "5e5e594f0cb646f382c3348317a05dec": [
        "def solution():\n    for num in range(999, 99, -1):\n        if num % 5 == 3 and num % 6 == 2 and num % 7 == 1:\n            return num\n\nans = solution()"
    ],
    "e47aa6dbf96a4f8f919752049304b476": [
        "def solution():\n    least_5_digit_palindrome = 10001\n    greatest_6_digit_palindrome = 999999\n    \n    difference = greatest_6_digit_palindrome - least_5_digit_palindrome\n    \n    return difference\n\nans = solution()"
    ],
    "dd388341dc404def898b956143854ae5": [
        "from math import comb\n\ndef solution():\n    total_children = 10\n    children_to_pick = 2\n    \n    number_of_combinations = comb(total_children, children_to_pick)\n    return number_of_combinations\n\nans = solution()"
    ],
    "f189c3cfa2ce4635aec8a32b63b8d264": [
        "def solution():\n    # Let the total number of members in the club be t\n    # Then the number of girls is 3/4 of total, which is (3/4) * t\n    # The number of boys is 20, which is t - (3/4) * t = (1/4) * t\n    # Since the number of boys is given as 20, we have (1/4) * t = 20\n    # Solving for t, we get t = 20 * 4 = 80 (total members in the club)\n    total_members = 20 * 4\n    \n    # The number of girls is 3/4 of total members\n    number_of_girls = (3/4) * total_members\n    \n    return int(number_of_girls)\n\nans = solution()"
    ],
    "4f5cb4eaf89140bd9217b1719727dd6c": [
        "def solution():\n    return (32 - 15) - 12\n\nans = solution()"
    ],
    "adb16ed119df40bda080aaed7ef8ac1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the price of a banana and an apple\n    banana, apple = symbols('banana apple')\n    \n    # Ellie's and Beth's equations\n    equation1 = Eq(2 * banana + 3 * apple, 1.50)\n    equation2 = Eq(3 * banana + 2 * apple, 1.45)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (banana, apple))\n\n    # Calculate the price for 1 banana and 1 apple\n    price = solutions[banana] + solutions[apple]\n\n    return price\n\nans = solution()"
    ],
    "d6c0469e3c2e4cf7ada3a095234ebb1c": [
        "def solution():\n    # Since we want to remove 46 digits to get the smallest possible number,\n    # we should remove digits starting from the left (the most significant digits),\n    # and leave the smallest digits possible from the right (the least significant digits).\n\n    # The number is constructed by stringing together all the numbers from 1 to 30.\n    # We don't want to remove digits from the numbers 1-9, as they are the smallest possible digits.\n    # We'll start by removing digits from the numbers 10-29, which each contribute two digits to the string.\n    # We can completely remove 23 of these two-digit numbers (23*2 = 46 digits removed).\n    \n    # That would leave us with the string \"1234567893030\" as the number.\n    # However, we want the smallest number, so we should aim to get \"1\" to be the most significant digit.\n    # We can remove the \"30\" at the end of the string and instead remove two of the digits \"10\" from the beginning,\n    # making the string \"123456789\".\n\n    # Now we count the remaining digits. Originally, we had 9 one-digit numbers and 21 two-digit numbers.\n    # After removing two \"10\"s and a \"30\", we're left with 9 one-digit numbers, 19 two-digit numbers,\n    # and 1 as the reduced two-digit number (30 -> 0, so it does not count).\n    total_digits = 9 + (2 * 19) + 1  # 1 for the reduced '0' which doesn't count\n    digits_to_remove = 46\n    digits_remaining = total_digits - digits_to_remove\n    \n    if digits_remaining <= 0:\n        # If we've removed all the digits, return 0\n        return 0\n    else:\n        # Otherwise return the constructed minimum number\n        return int('123456789')\n    \nans = solution()"
    ],
    "889138baccd24c1b9eb080bdb667f596": [
        "def solution():\n    sara_age = 8\n    lucy_age = 36\n    years = 0\n    while sara_age + lucy_age != 60:\n        sara_age += 1\n        lucy_age += 1\n        years += 1\n    return years\n\nans = solution()"
    ],
    "e097362981d0409885ba18d30b163d07": [
        "def solution():\n    ans = 11 + 17 + 9 - 7 + 12 + 8\n    return ans\n\nans = solution()"
    ],
    "540be23e94244c70aad6ecd37c304418": [
        "def solution():\n    two_seater_benches = 6\n    three_seater_benches = 9\n\n    capacity = (two_seater_benches * 2) + (three_seater_benches * 3)\n\n    return capacity\n\nans = solution()"
    ],
    "468559e91e614d4bae2de59111f672af": [
        "def solution():\n    book_cost = 15.49\n    paid_amount = 16 # minimum £1 coins to cover the cost without going under\n    change = paid_amount - book_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "ac29be7b853c4812bccecb19739c2026": [
        "def solution():\n    ans = sum([i if i % 4 == 3 else -i for i in range(99, 120, 2)])\n    return ans\n\nans = solution()"
    ],
    "216cb1366d314b5dbd12758607304eb7": [
        "def solution():\n    # Convert mixed fraction to improper fraction\n    mixed_number = 201 + 1/7\n    # Perform the division\n    result = mixed_number / 8\n    # Subtract 1/7 to find the value A\n    A = result - 1/7\n    return A\n\nans = solution()"
    ],
    "04c5b12aa7f042fabd03ff53cb7e08e1": [
        "def solution():\n    marshmallows_per_minute = 5\n    minutes = 5\n    total_marshmallows = marshmallows_per_minute * minutes\n    return total_marshmallows\n\nans = solution()"
    ],
    "7e57b2275ee24957a6f27d1a194a17fe": [
        "def solution():\n    # Rona should take out one glove from each color first\n    gloves_each_color = 1\n    \n    # Add one more glove to guarantee a pair\n    gloves_to_ensure_pair = 1\n    \n    # 5 colors in total, so 5 times for each color and one more to guarantee a pair\n    min_gloves_needed = gloves_each_color * 5 + gloves_to_ensure_pair\n    \n    return min_gloves_needed\n\nans = solution()"
    ],
    "680ddbe0ce3c49ce854bcd2f1ea66237": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of footballs (f) and basketballs (b)\n    f, b = symbols('f b')\n\n    # Initial relation: there were 2/5 as many footballs as basketballs\n    equation1 = Eq(f, 2/5 * b)\n\n    # After selling 16 basketballs, the store had 2/3 as many footballs as basketballs\n    equation2 = Eq(f, 2/3 * (b - 16))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (f, b))\n\n    # Calculate the total number of footballs and basketballs originally\n    total = solutions[f] + solutions[b]\n\n    return total\n\nans = solution()"
    ],
    "01951c851f4d440aa5d5a49d736fb69d": [
        "def solution():\n    start = 30\n    end = 82\n    multiple_of = 8\n\n    first_multiple = (start // multiple_of) + (1 if start % multiple_of != 0 else 0)\n    last_multiple = end // multiple_of\n\n    return last_multiple - first_multiple + 1\n\nans = solution()"
    ],
    "ce3e27f032134ea699180a318687918c": [
        "def solution():\n    # Let x be the current age of the older brother and y be the current age of the younger brother.\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    # When the older brother was y years old, the younger brother was 12.\n    equation1 = Eq(x - (y - 12), y)\n    # When the younger brother will be x years old, the older brother will be 27.\n    equation2 = Eq(y + (x - y), 27)\n\n    # Solve the two equations for x and y\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "32eb233b7b8648fc98ae6c8e1000cce8": [
        "def solution():\n    lines = 13\n    max_junctions = lines * (lines - 1) // 2\n    return max_junctions\n\nans = solution()"
    ],
    "3127ad21500549f99d1530b6020f645c": [
        "def solution():\n    original_price = 120\n    spring_festival_increase = original_price * 0.10\n    spring_festival_price = original_price + spring_festival_increase\n    lantern_festival_decrease = spring_festival_price * 0.10\n    lantern_festival_price = spring_festival_price - lantern_festival_decrease\n    \n    return lantern_festival_price\n\nans = solution()"
    ],
    "5a2adc2e38cb4df2b6461fbcb699d0a0": [
        "def solution():\n    # Convert 7.2 minutes to hours, as the speed is in km/h\n    total_time = 7.2 / 60\n    \n    # Speed of students is 8 km/h and speed of teacher is 12 km/h\n    students_speed = 8\n    teacher_speed = 12\n\n    # Let x be the length of the line\n    # Time taken by the teacher to reach the head of the line is x / (teacher_speed - students_speed)\n    # Time taken by the teacher to return to the end is x / (teacher_speed + students_speed)\n    # Total time is the sum of both times, which equals to the total_time of 7.2 minutes\n    # x / (teacher_speed - students_speed) + x / (teacher_speed + students_speed) = total_time\n\n    # Solve for x\n    x = (total_time * (teacher_speed**2 - students_speed**2)) / 2\n\n    return x\n\nans = solution()"
    ],
    "c6d0a3426bdd48c09f8e5ed6be864293": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let p represent the number of stickers Peter originally had\n    p = symbols('p')\n\n    # Sam originally had 40 more stickers than Peter\n    s = p + 40\n\n    # Sam gave 20% of his stickers to Peter\n    peter_after_sam_gives = p + 0.20 * s\n    sam_after_giving = s - 0.20 * s\n\n    # Peter gave 25% of his new total to Sam\n    peter_after_giving = peter_after_sam_gives - 0.25 * peter_after_sam_gives\n    sam_after_peter_gives = sam_after_giving + 0.25 * peter_after_sam_gives\n\n    # Equation where Sam has 96 more stickers than Peter after the exchange\n    equation = Eq(sam_after_peter_gives - peter_after_giving, 96)\n\n    # Solve the equation\n    solution = solve(equation, p)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3117c2400ae549259f555f986ce29058": [
        "def solution():\n    # Number of games in round-robin for 4 participants\n    # Each participant plays every other participant once\n    # So for n participants, there are C(n, 2) games in a round-robin tournament\n    # Where C(n, k) is the combination of n items taken k at a time\n    def round_robin_games(n):\n        return (n * (n - 1)) // 2\n    \n    # There are 4 groups, each containing 4 players\n    # Each group plays a round-robin tournament\n    group_games = 4 * round_robin_games(4)\n    \n    # The knockout stage consists of 8 participants\n    # This has 7 games in total: 4 in the quarterfinals, 2 in the semifinals,\n    # and 1 final.\n    # The third place match makes the total number of knockout games to 8.\n    knockout_games = 7 + 1  # Finals, semifinals, quarterfinals, and third-place match\n    \n    # Total number of games is the sum of the group stage games and the knockout stage games\n    total_games = group_games + knockout_games\n    \n    return total_games\n\nans = solution()"
    ],
    "83eeb3967efd4f44ae944aeda3665452": [
        "def solution():\n    return 1.3 + 2.87 + 3.7\n\nans = solution()"
    ],
    "e72ae7b5041949c2b5780adfc4f7a4d6": [
        "def solution():\n    flora_age_now = 5\n    flora_age_2_years_ago = flora_age_now - 2\n    father_age_2_years_ago = 9 * flora_age_2_years_ago\n    father_age_now = father_age_2_years_ago + 2\n\n    return father_age_now\n\nans = solution()"
    ],
    "a10dc724d9ee4196877466390813cdbe": [
        "def solution():\n    sweets = []\n    for i in range(31, 40):\n        if i % 4 == 0 and i % 6 == 0:\n            sweets.append(i)\n    ans = sweets[0]\n    return ans\n\nans = solution()"
    ],
    "3e2cfeed3b034453a6cd4c890991cff6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bugcat, pusheen, doggo = symbols('bugcat pusheen doggo')\n\n    equation1 = Eq(bugcat, 5 * pusheen)\n    equation2 = Eq(bugcat, doggo + 53)\n    equation3 = Eq(bugcat + pusheen + doggo, 189)\n\n    solutions = solve((equation1, equation2, equation3), (bugcat, pusheen, doggo))\n\n    return solutions[doggo]\n\nans = solution()"
    ],
    "f324ee4f900c4965905630c53b282ca4": [
        "def solution():\n    ans = 122.55 + 9.45 + 13.21 - 3.21\n    return ans\n\nans = solution()"
    ],
    "1191b2497aca4e478f89acd3913baa4b": [
        "def solution():\n    ans = 1.1 * (1.2 + 1.3) * 2\n    return ans\n\nans = solution()"
    ],
    "ccee253cade74bf4b980a1d6da9300b1": [
        "def solution():\n    return 902 - 387\n\nans = solution()"
    ],
    "8adc9a67754d493090774f606c1387c2": [
        "def solution():\n    total_count = 0\n    for number in range(8, 86):\n        total_count += str(number).count('3')\n    return total_count\n\nans = solution()"
    ],
    "7c0a8adbe97047ac8c3d2545bed65331": [
        "def solution():\n    count = 0\n    for number in range(1, 26):  # Helen is writing the first 25 even numbers\n        even_number = number * 2\n        count += str(even_number).count('3')\n    return count\n\nans = solution()"
    ],
    "fd011cee8c7149b08bd7a235ce74b4b0": [
        "def solution():\n    pounds_to_pence = 1 * 1.25 * 100\n    return pounds_to_pence\n\nans = solution()"
    ],
    "7f5de3640130476b8479c8c57c6cceab": [
        "def solution():\n    ramen_price = 8\n    juice_price = ramen_price - 5\n    duck_price = 6 * ramen_price\n    total_price = ramen_price + juice_price + duck_price\n    \n    return total_price\n\nans = solution()"
    ],
    "92b6d681156647e98a2b8f515678090b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the distance from Mike's home to the office as d.\n    # Speed at 4 km/h, he is 20 min late.\n    # Speed at 6 km/h, he is 10 min early.\n    d = symbols('d')\n\n    # The time taken to travel at 4 km/h is d/4 hours.\n    # The time taken to travel at 6 km/h is d/6 hours.\n    # Mike is 20 min (1/3 hour) late when travelling at 4 km/h, therefore\n    # the actual time to travel should be d/4 - 1/3.\n    # Similarly, Mike is 10 min (1/6 hour) early when travelling at 6 km/h,\n    # therefore the actual time to travel should be d/6 + 1/6.\n    # Since both expressions equal the actual time, we set them equal to each other.\n\n    equation = Eq(d/4 - 1/3, d/6 + 1/6)\n\n    # Solve the equation for d.\n    solution = solve(equation, d)\n    distance = solution[0]\n\n    return distance\n\nans = solution()"
    ],
    "e4bf62e1d6374c7db8fdd451a0891d39": [
        "def solution():\n    total_climbed = 0\n    days = 6\n\n    total_climbed += (days - 1) * 7  # Climbing for first 5 days\n    total_climbed += 3  # Climbing 3 meters on the 6th day\n\n    # After the snail climbed on the 6th day, it reached the top\n    # so it wouldn't slide down. We need to find the slide distance\n    # by how much the snail climbed in total minus the depth of the burrow.\n    slide_down = total_climbed - 18\n\n    return slide_down\n\nans = solution()"
    ],
    "d2ad7065c3964fdb85960dd64b7389fe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    roses, tulips, sunflowers = symbols('roses tulips sunflowers')\n\n    equation1 = Eq(tulips, 3 * roses)\n    equation2 = Eq(sunflowers, roses + 40)\n    equation3 = Eq(roses + tulips + sunflowers, 590)\n\n    solutions = solve((equation1, equation2, equation3), (roses, tulips, sunflowers))\n\n    return solutions[roses]\n\nans = solution()"
    ],
    "aea05f0dcdd04e4c903d863ad3465317": [
        "def solution():\n    from math import factorial\n    total_letters = factorial(4)   # Total number of arrangements for four letters\n    repeat_letters = factorial(2)  # Adjustment for two repeated Z's\n    num_ways = total_letters // repeat_letters\n    return num_ways\n\nans = solution()"
    ],
    "5f10a8b2ef2a4f548faa94902d80cc0f": [
        "def solution():\n    # Let x be the number of candies at the beginning\n    # Eddie took (1/2)x + 1 candies\n    # Ivy took (1/2)(x - ((1/2)x + 1)) - 2 candies\n    # Nini took (1/2)(x - ((1/2)x + 1) - ((1/2)(x - ((1/2)x + 1)) - 2)) + 3 candies\n    # Ken took (1/2)(x - ((1/2)x + 1) - ((1/2)(x - ((1/2)x + 1)) - 2) - ((1/2)(x - ((1/2)x + 1) - ((1/2)(x - ((1/2)x + 1)) - 2)) + 3)) - 1 candies\n    # 3 pieces of candy are left at the end\n    \n    # We will perform the inverse operations, starting with the last action and reversing the process:\n    remaining_candy = 3\n    \n    # Before Ken took his share:\n    ken_shared = 2 * (remaining_candy + 1)\n    remaining_candy += ken_shared\n    \n    # Before Nini took her share:\n    nini_shared = 2 * (remaining_candy - 3)\n    remaining_candy += nini_shared\n    \n    # Before Ivy took her share:\n    ivy_shared = 2 * (remaining_candy + 2)\n    remaining_candy += ivy_shared\n    \n    # Before Eddie took his share:\n    eddie_shared = 2 * (remaining_candy - 1)\n    remaining_candy += eddie_shared\n    \n    return remaining_candy\n\nans = solution()"
    ],
    "c03d7d32adb849f8813c089f2f3caaaa": [
        "def solution():\n    ans = 24 * 25 * 31\n    return ans\n\nans = solution()"
    ],
    "c49b5ae0746f481e9831c9c0d1d6f386": [
        "def solution():\n    # Convert all heights to centimeters\n    height_meters_in_cm = 5 * 100  # 5m in cm\n    height_cm = 120  # already in cm\n    height_mm_in_cm = 50 / 10  # 50mm in cm\n    height_feet_in_cm = 8 * 30.48  # 8 feet in cm, 1 foot is 30.48cm\n\n    reasonable_height_range = (100, 200)  # typical human height range in cm\n\n    height_estimations = [\n        height_meters_in_cm,\n        height_cm,\n        height_mm_in_cm,\n        height_feet_in_cm\n    ]\n\n    for height in height_estimations:\n        if reasonable_height_range[0] <= height <= reasonable_height_range[1]:\n            return height\n\nans = solution()"
    ],
    "26234260bf8544e8be9832159593b76c": [
        "def solution():\n    for boys in range(1, 99):\n        girls = 3 * boys\n        total_paintbrushes = girls * 2 + boys * 3\n        if total_paintbrushes == 99:\n            return girls\n\nans = solution()"
    ],
    "f4a5d0f84ea8406fbac7ecee01ee432d": [
        "def solution():\n    from math import gcd\n    \n    class_a = 12\n    class_b = 16\n    class_c = 20\n    \n    gcd_ab = gcd(class_a, class_b)\n    gcd_abc = gcd(gcd_ab, class_c)\n    \n    return gcd_abc\n\nans = solution()"
    ],
    "f5e0a986e3934f67ba17ff2b35ad8068": [
        "def solution():\n    m = 12**2\n    n = 3**2 * 2**3\n    sum_of_m_and_n = m + n\n    return sum_of_m_and_n\n\nans = solution()"
    ],
    "2c231e6d73964ddb90cae67a6e2c06ca": [
        "def solution():\n    total_boys = 18\n    total_girls = 12\n    avg_boys = 74\n    total_participants = total_boys + total_girls\n    avg_all = 82\n\n    total_score_all = avg_all * total_participants\n    total_score_boys = avg_boys * total_boys\n    total_score_girls = total_score_all - total_score_boys\n\n    avg_girls = total_score_girls / total_girls\n\n    return avg_girls\n\nans = solution()"
    ],
    "1f89b3dca16b41f3af194d672af50912": [
        "def solution():\n    from math import lcm\n    return lcm(2, 3, 5)\n\nans = solution()"
    ],
    "a6e45aae06f442f6a7eb0e90e00a24ed": [
        "def solution():\n    first_term = 124\n    common_difference = 121 - 124\n    n = 15\n\n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "6c12066021f245adb5fffd4e97a9c889": [
        "def solution():\n    marked_fish = 25\n    caught_fish_second_time = 200\n    total_marked_fish = 100\n\n    proportion_marked = marked_fish / caught_fish_second_time\n\n    estimated_total_fish = total_marked_fish / proportion_marked\n\n    return estimated_total_fish\n\nans = solution()"
    ],
    "9cd0dd31a2934eacb9090d85b490b36e": [
        "def solution():\n    total_food = 12 * 15  # Total food is enough for 12 rabbits for 15 days\n    days_for_20_rabbits = total_food / 20  # Find out for how many days it would last for 20 rabbits\n    return days_for_20_rabbits\n\nans = solution()"
    ],
    "40402588d4b04fcc949d1665e6d2b545": [
        "def solution():\n    # Let's denote the number of trees planted by boys as x.\n    # According to the problem, girls planted x + 12 trees.\n    # The total number of trees planted is 100.\n    # Therefore, we can write the equation:\n    # x + (x + 12) = 100\n\n    from sympy import symbols, Eq, solve\n\n    # Create a symbol for the number of trees boys planted\n    x = symbols('x')\n    \n    # Equation representing the relationship between the number of trees planted by boys and girls\n    equation = Eq(x + (x + 12), 100)\n\n    # Solve for x using the sympy's solve function\n    solution = solve(equation, x)\n\n    # solution will contain the number of trees planted by boys\n    return solution[0]\n\nans = solution()"
    ],
    "a31cc8dad19349aebe0414ae78e4bc33": [
        "def solution():\n    susan_money = 10\n    mother_contribution = 22\n    dress_cost = 56\n\n    total_money = susan_money + mother_contribution\n    additional_money_needed = dress_cost - total_money\n\n    return additional_money_needed\n\nans = solution()"
    ],
    "71033e51e28146eea6ced67678e21748": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    wakeup_time = datetime.strptime('07:40', '%H:%M')\n    breakfast_start_time = wakeup_time + timedelta(minutes=25)\n    breakfast_end_time = breakfast_start_time + timedelta(minutes=10)\n    school_arrival_time = breakfast_end_time + timedelta(minutes=35)\n\n    registration_time = school_arrival_time - timedelta(minutes=5)\n    \n    return registration_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "1e148bc64be04bd6b16fe0c8028ec408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    chloe, maggie, lily, george = symbols('chloe maggie lily george')\n    \n    equation1 = Eq(chloe + maggie + lily, 187)\n    equation2 = Eq(maggie + lily + george, 327)\n    equation3 = Eq(george, 5 * chloe)\n    \n    solutions = solve((equation1, equation2, equation3), (chloe, maggie, lily, george))\n    \n    total_sweets = solutions[chloe] + solutions[maggie] + solutions[lily] + solutions[george]\n\n    return total_sweets\n\nans = solution()"
    ],
    "bedd8521f63647f2a0a12a31cd344069": [
        "def solution():\n    mass_per_packet = 0.23\n    packets = 6\n    total_mass = mass_per_packet * packets\n    return total_mass\n\nans = solution()"
    ],
    "932b8a20d21b4686a582828ee98ca875": [
        "def solution():\n    return 952 + 139\n\nans = solution()"
    ],
    "9ff9e65c65be4e54bb20e233432fc9bb": [
        "def solution():\n    ways = 0\n    for two_gram_weights in range(0, 39):  # Since 39*2 = 78, which is the closest to 77 without going over\n        for three_gram_weights in range(0, 26):  # Since 25*3 = 75, again the closest to 77 without going over\n            if 2 * two_gram_weights + 3 * three_gram_weights == 77:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "3133bc72d66445bb9b6aa55994df350f": [
        "def solution():\n    total_amount = 2 + 1/2\n    quarters_in_one_dollar = 4\n    ans = total_amount * quarters_in_one_dollar\n    return ans\n\nans = solution()"
    ],
    "ebd7e33ee05545079118ad813f66ccf7": [
        "def solution():\n    total_scores_for_4_assignments = 96 + 85 + 89 + 92\n    total_scores_for_5_assignments = 90 * 5\n\n    score_for_5th_assignment = total_scores_for_5_assignments - total_scores_for_4_assignments\n\n    return score_for_5th_assignment\n\nans = solution()"
    ],
    "fc9b83fecfb44012b1232f0149dad1f8": [
        "def solution():\n    # Calculate the sum of cubes from 1 to 20 using the given formula\n    n_20 = 20\n    sum_1_to_20 = (n_20 * (n_20 + 1) // 2) ** 2\n    sum_cubes_1_to_20 = sum_1_to_20\n\n    # Calculate the sum of cubes from 1 to 9 using the given formula\n    n_9 = 9\n    sum_1_to_9 = (n_9 * (n_9 + 1) // 2) ** 2\n    sum_cubes_1_to_9 = sum_1_to_9\n\n    # Subtract the sum of cubes from 1 to 9 from the sum of cubes from 1 to 20\n    ans = sum_cubes_1_to_20 - sum_cubes_1_to_9\n\n    return ans\n\nans = solution()"
    ],
    "5caaa9b1c72e4cf7b0f5d589bbf27d1a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equations = [\n        Eq((x % 4), 3),\n        Eq((x % 5), 4),\n        Eq((x % 7), 6)\n    ]\n    sol = solve(equations)\n\n    # Get the smallest positive solution\n    ans = min([s for s in sol if s > 0])\n\n    return ans\n\nans = solution()"
    ],
    "09d73c26d27144a79753ab402d8e3506": [
        "def solution():\n    total_pupils = 200\n    pupils_per_coach = 34\n\n    num_coaches = -(-total_pupils // pupils_per_coach)  # ceil division\n\n    return num_coaches\n\nans = solution()"
    ],
    "95d8e98043834da0a4c0071a63f5ea23": [
        "def solution():\n    # We need to ensure at least 5 different colors with at least 10 pencils of each color.\n    # To ensure the worst-case scenario we assume that we might pick the maximum number \n    # of pencils of 4 colors first, which would be 74 pencils for each color (since 75th \n    # would guarantee a 5th color). After that, we would need to pick 10 pencils of the \n    # 5th color to meet the condition.\n\n    # 4 colors with maximum picks before getting a new color\n    max_picks_same_color = 74\n    num_colors_to_max_out = 4\n    # Then pick 10 of the fifth color\n    picks_fifth_color = 10\n\n    # Total number of pencils to guarantee the condition\n    total_pencils = (max_picks_same_color * num_colors_to_max_out) + picks_fifth_color\n\n    return total_pencils\n\nans = solution()"
    ],
    "3477e87e292f48ec8ee3fc913b1a71ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let pip_sweets be the initial number of sweets Pip had,\n    # and bud_sweets be the initial number of sweets Bud had.\n    pip_sweets, bud_sweets = symbols('pip_sweets bud_sweets')\n    \n    # Initial ratio\n    initial_ratio = Eq(pip_sweets / bud_sweets, 4/7)\n    \n    # Ratio after Bud received 5 more sweets\n    new_ratio = Eq(pip_sweets / (bud_sweets + 5), 8/15)\n    \n    # Solve the system of equations\n    solutions = solve((initial_ratio, new_ratio), (pip_sweets, bud_sweets))\n    pip_initial = solutions[pip_sweets]\n\n    return pip_initial\n\nans = solution()"
    ],
    "c7e71280a8ab4500a65a6e96a34fd78a": [
        "def solution():\n    perimeter = 2 * (144 + 204)\n    number_of_gaps = 116 - 4  # subtracting the corners\n    distance = perimeter / number_of_gaps\n\n    return distance\n\nans = solution()"
    ],
    "dfae10a6a701443a9ac7f6922b150321": [
        "def solution():\n    total_pupils = 1690\n    girls_ratio_swim = 31\n    girls_ratio_not_swim = 49\n    boy_swim_less = 120\n    boys_more_than_girls = 90\n\n    # Total ratio of girls\n    total_girls_ratio = girls_ratio_swim + girls_ratio_not_swim\n    # Let the common ratio for girls be x\n    # Total number of girls is (total_girls_ratio) * x\n    # Total number of boys is (total_girls_ratio) * x + boys_more_than_girls\n\n    # Now, set up the equations\n    x = symbols('x')\n    total_girls = total_girls_ratio * x\n    total_boys = total_girls_ratio * x + boys_more_than_girls\n\n    # The total number of pupils is the sum of boys and girls\n    equation = Eq(total_girls + total_boys, total_pupils)\n\n    # Solve for x\n    solution_x = solve(equation, x)\n    x_value = solution_x[0]\n\n    # Now we can calculate the actual number of girls and boys\n    girls = total_girls_ratio * x_value\n    boys = girls + boys_more_than_girls\n\n    # Number of girls that can swim and not swim\n    girls_swim = girls_ratio_swim * x_value\n    girls_not_swim = girls_ratio_not_swim * x_value\n\n    # Number of boys that can't swim\n    # boy_swim = boy_not_swim - boy_swim_less\n\n    # But since we have total boys, we can set up a proportion to find the boys that can't swim\n    boys_not_swim = symbols('boys_not_swim')\n    equation_boys = Eq(boys_not_swim / (boys_not_swim - boy_swim_less), (boys_not_swim + (boys_not_swim - boy_swim_less))/boys)\n    boys_not_swim_value = solve(equation_boys, boys_not_swim)[0]\n\n    # Total pupils that can not swim is the sum of girls and boys who cannot swim\n    total_not_swim = girls_not_swim + boys_not_swim_value\n\n    return int(total_not_swim)\n\nans = solution()"
    ],
    "4be8de9c0cc14f33b367a9c501a90089": [
        "def solution():\n    from math import gcd\n\n    cloth1_length = 39\n    cloth2_length = 52\n\n    ans = gcd(cloth1_length, cloth2_length)\n\n    return ans\n\nans = solution()"
    ],
    "cda998982a894cdb8077bdfb4a0b2764": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'a' represent the score of an A grade and 'b' represent the score of a B grade\n    a, b = symbols('a b')\n\n    # Equation based on Simon's scores\n    equation1 = Eq(4*a + 4*b, 36)\n\n    # Equation based on Peter's scores\n    equation2 = Eq(2*a + 3*b, 22)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, b))\n\n    # Calculate the score for someone with three A grades and five B grades\n    score = 3*solutions[a] + 5*solutions[b]\n\n    return score\n\nans = solution()"
    ],
    "19a6283fdef941a5aa103bd8c0a0d755": [
        "def solution():\n    last_digit_5 = 5 ** 20 % 10\n    last_digit_7 = 7 ** 30 % 10\n    ans = (last_digit_5 * last_digit_7) % 10\n    return ans\n\nans = solution()"
    ],
    "fc68f114d75f4d00a000bd9a959d7bb8": [
        "def solution():\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n\n    for A in primes:\n        for B in primes:\n            for C in primes:\n                # Filtering the same primes, as each student knows different prime\n                if A == B or B == C or A == C:\n                    continue\n                \n                # Check if no addition pair forms a prime\n                if A + B in primes or A + C in primes or B + C in primes:\n                    continue\n                \n                # Check B's condition, B must be 8 or 16 (prime - 1 = 7)\n                if B - 1 != 7:\n                    continue\n                \n                # Now check if 2C can form an equation, it should be A + B or B + A\n                if 2 * C == A + B:\n                    return A + B + C\n\n    return None\n\nans = solution()"
    ],
    "99d7b27d46844be596baf37965890e96": [
        "def solution():\n    # Joe decides to share the chocolate bar with his friend.\n    # Since no specific division ratio is given, we assume they share it equally.\n    # The chocolate bar has 16 squares.\n  \n    total_squares = 16\n    # Number of people is Joe and his friend, which is 2.\n    num_people = 2\n\n    # Dividing the squares equally among Joe and his friend.\n    joe_squares = total_squares // num_people\n  \n    return joe_squares\n\nans = solution()"
    ],
    "73b357f92b7e40399f2271567c50156d": [
        "def solution():\n    half_of_999 = 999 / 2\n    return half_of_999\n\nans = solution()"
    ],
    "536fb0bff4d04a49a0e59a954dc6348a": [
        "def solution():\n    laura_position = 4\n    amanda_from_end = 7\n    children_between = 2\n\n    total_children = laura_position + children_between + amanda_from_end\n\n    return total_children\n\nans = solution()"
    ],
    "4741132a2a6e4fd9b62cc955675da60c": [
        "def solution():\n    count = 0\n    for i in range(1, 121):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "7217243413c449e2bad76755d71dd583": [
        "def solution():\n    people_got_off = 42\n    people_got_on = 60\n    people_on_train_after = 322\n\n    people_on_train_before = people_on_train_after - people_got_on + people_got_off\n    \n    return people_on_train_before\n\nans = solution()"
    ],
    "8d2b72129fea4fe2bed54b1710b74200": [
        "def solution():\n    # Define each letter based on the conditions given.\n    A = 2  # A is the smallest prime number.\n    B = 4  # B is the smallest composite number.\n    C = 1  # C is neither prime number nor composite number or zero.\n    D = 0  # D is 2 less than the smallest prime number (i.e., 2 - 2).\n    E = 9  # E is the largest composite number up to 10.\n    F = 5  # F only has factors 1 and 5.\n    G = 4  # G is the greatest factor of 8.\n    H = 6  # H is the lowest multiple of 6.\n    \n    # Combine digits to form the phone number.\n    phone_number = int(f\"{A}{B}{C}{D}{E}{F}{G}{H}\")\n    \n    return phone_number\n\nans = solution()"
    ],
    "104714b036e84a2696f951000c89ff03": [
        "def solution():\n    seconds_in_a_day = 24 * 60 * 60\n    fraction_of_day = 1/4 * 1/6 * 1/8\n    seconds = seconds_in_a_day * fraction_of_day\n    return int(seconds)\n\nans = solution()"
    ],
    "39ff6ce753bc44909a9a09937c88d468": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of stickers they originally had\n    marry_stickers, alexis_stickers, charlotte_stickers = symbols('marry_stickers alexis_stickers charlotte_stickers')\n    \n    # Marry and Alexis had stickers in the ratio 7 : 5\n    equation1 = Eq(marry_stickers / alexis_stickers, 7 / 5)\n\n    # Marry and Alexis each gave 20% of their stickers to Charlotte\n    equation2 = Eq(marry_stickers - 0.2 * marry_stickers, charlotte_stickers + 0.2 * marry_stickers)\n    equation3 = Eq(alexis_stickers - 0.2 * alexis_stickers, charlotte_stickers + 0.2 * alexis_stickers)\n\n    # Charlotte's stickers increased by 80%\n    equation4 = Eq(1.8 * charlotte_stickers, charlotte_stickers + 0.2 * (marry_stickers + alexis_stickers))\n\n    # Mary had 20 stickers more than Charlotte in the end\n    equation5 = Eq(marry_stickers - 0.2 * marry_stickers - 20, charlotte_stickers)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (marry_stickers, alexis_stickers, charlotte_stickers))\n\n    return solutions[alexis_stickers]\n\nans = solution()"
    ],
    "2583cc3e3e5749a5bdc1a87f0ef8ed05": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq(4 + 8 * (50 - 3 * x), 92)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "78b02b5b75964068adef771a062c712c": [
        "from math import factorial\n\ndef solution():\n    # Assume Eddie and his mom and dad as one unit, and there are (n-2) other people\n    # They can be arranged in (n-2)! ways\n    # Eddie and his mom and dad can stand together in 3! ways (Eddie, Mom, Dad)\n    # Total number of ways = (n-2)! * 3!\n    n = 5 # Total number of family members including Eddie, Mom and Dad\n    ways_without_family = factorial(n-3)\n    family_arrangement = factorial(3)\n    total_ways = ways_without_family * family_arrangement\n    return total_ways\n\nans = solution()"
    ],
    "c08789bee10c46c2902b114a45c0d0a6": [
        "def solution():\n    ans = 34 * 100\n    return ans\n\nans = solution()"
    ],
    "0756d6f5711a4c54986ef915e57a0ccd": [
        "from math import factorial\n\ndef solution():\n    total_digits = 5  # Total number of digits (3 twos and 2 threes)\n    twos = 3  # Number of twos\n    threes = 2  # Number of threes\n\n    # The number of ways to arrange these digits is given by the multinomial coefficient\n    # which is the total factorial divided by the factorial of each type of digit\n    arrangements = factorial(total_digits) // (factorial(twos) * factorial(threes))\n\n    # However, since we want to form four-digit numbers, we exclude the cases where a number starts with zero\n    # Since we don't have zero in our digits, we need to calculate the numbers starting with two and with three separately.\n    # Starting with two (3 possible positions for the first two): 3 * arrangements of the remaining 4 digits\n    # Starting with three (2 possible positions for the first three): 2 * arrangements of the remaining 4 digits\n    four_digit_arrangements = 3 * (factorial(total_digits - 1) // (factorial(twos - 1) * factorial(threes))) + \\\n                              2 * (factorial(total_digits - 1) // (factorial(twos) * factorial(threes - 1)))\n\n    return four_digit_arrangements\n\nans = solution()"
    ],
    "d4071be0f0c7425fb8d8e725d1b67417": [
        "def solution():\n    for th in range(1, 10):  # thousands and units digits cannot be 0 for a four-digit number\n        for tens in range(10):\n            for hundreds in range(10):\n                pip_num = th * 1000 + hundreds * 100 + tens * 10 + th\n                bud_num = th * 10 + tens * 1000 + hundreds * 10 + th\n                if pip_num + bud_num == 5510:\n                    return pip_num\n\nans = solution()"
    ],
    "c1c6e64207724fd1a56270ce126df35a": [
        "def solution():\n    # Let's denote the total amount of grass as G (which is a constant).\n    # Let C be the number of cows and D be the number of days.\n    # According to the problem, we have two equations:\n    # G = 25 * 10 = 250 (cow-days, this is a unit of grass that can feed one cow for one day)\n    # G = 15 * 20 = 300 (cow-days)\n    # Since G is a constant, we can set the two expressions equal to each other and get:\n    # 25 * 10 = 15 * 20 => G = 250 cow-days or 300 cow-days (since both expressions must equal the same G)\n    # Now we want to find the number of cows (let this number be X) that can be fed for 50 days\n    # So we set up the equation: X * 50 = G\n    # We can use either value of G from above (250 or 300), as they should be equal.\n    # Solving for X, we use G = 250 cow-days (it does not matter if we use 300 cow-days, as they represent the same amount of grass)\n    X = 250 / 50\n\n    return X\n\nans = solution()"
    ],
    "007602e598e6490ea3de0467b56b3e6a": [
        "def solution():\n    n = 1\n    while n * (n + 1) / 2 <= 95:\n        n += 1\n    return n - 1\n\nans = solution()"
    ],
    "a8439e99e6a1477cac347feb553247d6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges, lemons = symbols('oranges lemons')\n    initial_ratio = Eq(oranges/lemons, 3/5)\n    after_selling_ratio = Eq((oranges - 48)/lemons, 1/2)\n\n    solutions = solve((initial_ratio, after_selling_ratio), (oranges, lemons))\n\n    return solutions[lemons]\n\nans = solution()"
    ],
    "2ab0503d127a4c73a785328ae9680841": [
        "def solution():\n    incorrect_minuend = 116\n    incorrect_difference = 81\n\n    correct_minuend = 166\n    correct_difference = correct_minuend - (incorrect_minuend - incorrect_difference)\n\n    return correct_difference\n\nans = solution()"
    ],
    "fee3950a7d754643a6574d07b8b3cb97": [
        "def solution():\n    # Let the number of watermelons sold on the second day be x.\n    # Then, according to the question:\n    # The number of watermelons sold on the first day is (1/3) * x = 20.\n    # Solve for x:\n    x = 20 * 3\n\n    # The number of watermelons sold on the third day is (5/3) * x.\n    third_day_sales = (5/3) * x\n\n    # The total number of watermelons sold is the sum of sales on all three days.\n    total_sales = 20 + x + third_day_sales\n\n    return total_sales\n\nans = solution()"
    ],
    "835aacd2f1bc42c084af969d3791ac9a": [
        "def solution():\n    from math import factorial as fact\n    \n    # There are 3 groups of books: 1 for maths books, 1 for English books, 1 for the other books.\n    # Additionally, these 3 groups can be arranged among themselves in 3! ways.\n    groups_arrangement = fact(3)\n    \n    # The maths books can be arranged among themselves in 3! ways.\n    maths_books_arrangement = fact(3)\n    \n    # The English books can be arranged among themselves in 2! ways.\n    english_books_arrangement = fact(2)\n    \n    # The other books can be arranged in 3! ways.\n    other_books_arrangement = fact(3)\n    \n    # Calculate the total number of ways these books can be arranged.\n    total_arrangements = groups_arrangement * maths_books_arrangement * english_books_arrangement * other_books_arrangement\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "c4ecbada09354d1ab1f0f9e6e7430943": [
        "def solution():\n    initial_price = 2000\n    discount_percent = 30\n    additional_discount = 100\n    tax_percent = 10\n\n    discounted_price = initial_price * (1 - (discount_percent / 100))\n    price_after_additional_discount = discounted_price - additional_discount\n    final_price = price_after_additional_discount * (1 + (tax_percent / 100))\n\n    return final_price\n\nans = solution()"
    ],
    "319659d1f9494d8da86df50b138ccfd5": [
        "def solution():\n    people_in_front = 7\n    people_behind = 3\n    judy = 1\n\n    total_people = people_in_front + judy + people_behind\n\n    return total_people\n\nans = solution()"
    ],
    "f733db5ae9be4fc19b2772e1336899bf": [
        "def solution():\n    flour_for_12_cakes = 200\n    flour_available = 250\n    cakes_possible = (flour_available / flour_for_12_cakes) * 12\n    return int(cakes_possible)\n\nans = solution()"
    ],
    "69a10a7a8381484b8df4c3813750ce0c": [
        "def solution():\n    # Ivy's work rate\n    ivy_rate = 1/24\n    # Kevin's work rate\n    kevin_rate = 1/20\n    # Total days to finish the job\n    total_days = 12\n    \n    # Equation for the total work done: Ivy's work for 12 days + Kevin's work for k days = 1 job\n    for k in range(total_days + 1):\n        if ivy_rate * total_days + kevin_rate * k >= 1:\n            return total_days - k\n\nans = solution()"
    ],
    "91b1fa437ec640b6a726e2f243fbcdc6": [
        "def solution():\n    return (32 * 8) // 20\n\nans = solution()"
    ],
    "a6d2722285fe41fc82cfbf38df970e88": [
        "def solution():\n    kilograms = 0.0025\n    grams = kilograms * 1000\n    return grams\n\nans = solution()"
    ],
    "62e6f0c8e4844cf5913cc68756ec307e": [
        "def solution():\n    total_students = 44\n    maths_competition = 30\n    art_competition = 26\n    both_competitions = maths_competition + art_competition - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "52f7ec2008844b4b96f3e14ec5bc08c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ophelia, penelope = symbols('ophelia penelope')\n    \n    # Before Penelope bought more diamonds\n    equation1 = Eq(ophelia, 4 * penelope)\n    \n    # After Penelope bought 21 more diamonds\n    equation2 = Eq(penelope + 21, (5/8) * ophelia)\n    \n    solutions = solve((equation1, equation2), (ophelia, penelope))\n    \n    return solutions[ophelia]\n\nans = solution()"
    ],
    "0fe10f3434414681820fd105b8e64e1a": [
        "def solution():\n    dividend = 379\n    divisor = 6\n    remainder = dividend % divisor\n    \n    return remainder\n\nans = solution()"
    ],
    "1951c1ebe48e4ad0a4cd072379459f1d": [
        "def solution():\n    count = 0\n    for page in range(1, 201):\n        count += str(page).count('1')\n    return count\n\nans = solution()"
    ],
    "3be019225e774908af2f46af704db571": [
        "def solution():\n    # Worst case scenario considering pigeonhole principle:\n    # Cindy takes out all 4 black socks without getting a pair of red socks.\n    # The next sock she takes out must then be a red sock, which will ensure\n    # she has at least one pair of the same colour.\n    # Technically, she could also take out all 4 red socks and then a black sock.\n    # Either way, after taking out 5 socks, she is guaranteed to have at least one pair.\n    \n    socks_to_ensure_pair = 5\n    return socks_to_ensure_pair\n\nans = solution()"
    ],
    "59f40a74a46b4f6a92446fb1fe6d3f5b": [
        "from math import factorial\n\ndef solution():\n    # Calculate the permutations of choosing 4 out of 9 statues\n    permutations = factorial(9) // factorial(9 - 4)\n    return permutations\n\nans = solution()"
    ],
    "2809b71b8eb74287a05d0ce2c1647a67": [
        "def solution():\n    original_price = 10 / 100  # Converting pence to pounds\n    new_price = 1.00\n    increase_amount = new_price - original_price\n\n    percentage_increase = (increase_amount / original_price) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "0faafc65dcc940c68dac95ff81fd8bbe": [
        "def solution():\n    price_before_tax = 80\n    gst_rate = 0.08\n    total_cost = price_before_tax * (1 + gst_rate)\n    \n    return total_cost\n\nans = solution()"
    ],
    "ceb94cece3814f3ba7dbce87461af7eb": [
        "def solution():\n    total_cycles = 300\n    wheels_difference = 180\n    # Assume all are bicycles (2 wheels), if one is converted to tricycle (1 extra wheel)\n    # The difference in wheels will reduce by 1 for each such conversion\n    num_bicycles = (total_cycles * 2 - wheels_difference) / 1\n\n    return int(num_bicycles)\n\nans = solution()"
    ],
    "0fa7fc81f75c4a438c7e27101422e437": [
        "def solution():\n    future_value = 2360\n    interest_rate = 0.06\n    years = 3\n    \n    present_value = future_value / ((1 + interest_rate) ** years)\n    \n    return present_value\n\nans = solution()"
    ],
    "19695e62163a49de8f347a78fa0034ec": [
        "def solution():\n    # The pattern is 1 black, 2 white, 2 grey.\n    # Let us denote the number of pattern repeats as 'n'.\n    # Since there are 14 grey rabbits and 2 grey rabbits per pattern,\n    # we can find 'n' by dividing 14 by 2.\n    n = 14 // 2\n    \n    # For each pattern repeat, there is 1 black, 2 white, and 2 grey.\n    # So we can calculate the total number of rabbits up to n repeats.\n    total_rabbits = n * (1 + 2 + 2)\n    \n    # However, there could be a partial pattern.\n    # Since the pattern starts with a black rabbit and the count of grey is the determinant,\n    # the maximum rabbits would include an additional black and two whites before adding any greys.\n    # This is because after 'n' full patterns, the next colors in the sequence, without completing another full pattern, would be black and white.\n    partial_rabbits = 1 + 2  # Possible extra black and white rabbits.\n    \n    # The maximum number of rabbits is therefore:\n    max_rabbits = total_rabbits + partial_rabbits\n    \n    return max_rabbits\n\nans = solution()"
    ],
    "02085f3402f64823bda6f851884cad43": [
        "def solution():\n    initial_value = 120\n    depreciation_rate = 0.04\n    years = 5\n    final_value = initial_value * (1 - depreciation_rate) ** years\n    return round(final_value, 4)\n\nans = solution()"
    ],
    "e234c915fb16462f9526941f4556b996": [
        "def solution():\n    quotient = 27\n    remainder = 9\n    divisor = quotient + 1  # because the remainder must be less than divisor.\n\n    dividend = divisor * quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "912427a474264adaaabc2ae198e4adde": [
        "def solution():\n    number = 9 + 6\n    return number\n\nans = solution()"
    ],
    "0d77e82eea214976a5d8bf3ab4e08b0b": [
        "def solution():\n    ans = (2015 * 2015) - (2016 * 2014)\n    return ans\n\nans = solution()"
    ],
    "aba2e0d130f344469e4cfa2b6010392a": [
        "def solution():\n    ans = (3.5 * 0.8) + (5.5 * 0.8) + (4/5)\n    return ans\n\nans = solution()"
    ],
    "aa34af4f0c0d4f1193c0c13f4ef71431": [
        "def solution():\n    number = 4 + 0.6 + 0.07 + 0.009\n    rounded_number = round(number, 1)\n    return rounded_number\n\nans = solution()"
    ],
    "d6f47c7d14794cf0882cbdded57195ef": [
        "def solution():\n    total_biscuits = 36\n    foil_wrapped = 20\n    chocolate_foil_wrapped = 15\n    non_chocolate_non_foil = 9\n\n    # Using inclusion-exclusion principle\n    # Total = Foil Wrapped + Chocolate - Chocolate with Foil Wrapper + Non Chocolate Non Foil\n    chocolate = total_biscuits - (foil_wrapped - chocolate_foil_wrapped + non_chocolate_non_foil)\n\n    return chocolate\n\nans = solution()"
    ],
    "81fcb6311cba411b82d413bf90689157": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let v be the original speed of the cyclist in meters per minute\n    # Let t be the original time taken by the cyclist in minutes\n    v, t = symbols('v t')\n    \n    # If the cyclist increases his speed by 25%, the new speed is 1.25v\n    # The new time taken will be 0.8t (since it decreases by 20%)\n    # The distance covered, which remains the same, can be calculated by v*t\n    # Hence, we have the equation: v*t = 1.25v*0.8t\n    equation1 = Eq(v * t, 1.25 * v * 0.8 * t)\n\n    # When he decreases his speed by 45 m/min, the new speed is v - 45\n    # The new time taken will be 1.75t (since it increases by 75%)\n    # Using the same distance, we have another equation: v*t = (v - 45)*1.75t\n    equation2 = Eq(v * t, (v - 45) * 1.75 * t)\n\n    # Solving equation1 and equation2 for v and t\n    solutions = solve((equation1, equation2), (v, t))\n\n    # Since we only want the distance v*t is our final answer\n    distance = solutions[v] * solutions[t]\n    return distance\n\nans = solution()"
    ],
    "8ee5b1b4a0b744aea869489b01233c34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_crystals = symbols('initial_crystals')\n    \n    # Jason sells 10 more than half of his initial number of crystals to Yvonne\n    sold_to_yvonne = (initial_crystals / 2) + 10\n    \n    # Jason then mines 20 more crystals\n    after_mining = initial_crystals - sold_to_yvonne + 20\n    \n    # He sells 14 crystals to Cherlyn\n    final_crystals = after_mining - 14\n    \n    # He has 35 crystals in the end\n    equation = Eq(final_crystals, 35)\n\n    # Solve for the number of crystals Jason originally had\n    solution = solve(equation, initial_crystals)\n\n    return solution[0]\n\nans = solution()"
    ],
    "bddd9a07ce1b4cd89fa99ccb14a387de": [
        "def solution():\n    # Number of 5s\n    num_fives = 15\n    # Number of 2s\n    num_twos = 10\n\n    # When determining the number of trailing zeros in the product A,\n    # we need both prime factors 2 and 5 (because 10 = 2 * 5)\n    # The number of zeros is determined by the limiting prime factor\n    num_zeros = min(num_fives, num_twos)  \n\n    return num_zeros\n\nans = solution()"
    ],
    "061ad10a381246f0b22fbd4f813aa403": [
        "def solution():\n    total_amount = 398\n    quarter = total_amount / 4\n    return quarter\n\nans = solution()"
    ],
    "c735dd28ea2240689abbbd4d577fd596": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1568'\n    perms = permutations(digits)\n    count = 0\n    for perm in perms:\n        for index in range(1, len(perm)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b411b6a9f50c4eeb9ad77ea2bf97d4c4": [
        "def solution():\n    return 257 * 37\n\nans = solution()"
    ],
    "f780445f7b1e4a9083acc80c65867dd2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    olaf, anna = symbols('olaf anna')\n\n    equation1 = Eq(olaf, 3 * anna)\n    equation2 = Eq(anna + 335, 2 * (olaf - 335))\n\n    solutions = solve((equation1, equation2), (olaf, anna))\n\n    return solutions[anna]\n\nans = solution()"
    ],
    "017ca40d1bbb43fa95bea8515f5a0087": [
        "def solution():\n    people_in_front_of_ali = 14\n    people_behind_bala = 10\n    ali_and_bala = 2\n\n    total_people = people_in_front_of_ali + ali_and_bala + people_behind_bala\n\n    return total_people\n\nans = solution()"
    ],
    "d3694a86bdbf4f47b69dd4f491c85b50": [
        "def solution():\n    richard_age = 18\n    adam_age = richard_age / 2\n    will_age = (2/3) * adam_age\n    total_age = richard_age + adam_age + will_age\n    return total_age\n\nans = solution()"
    ],
    "46dbc4d8085d4f6983e54168bf69207b": [
        "def solution():\n    return 397 + 784 + 86\n\nans = solution()"
    ],
    "7bb6052160e54c4c996c2b4554bc7d90": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq(4*(x-3) + 6*x, 28)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "522f9a97b72e4157b05087fe25269f68": [
        "def solution():\n    plant_cost_pence = 85\n    budget_pounds = 30\n    budget_pence = budget_pounds * 100  # Convert to pence\n    num_plants = budget_pence // plant_cost_pence  # Use floor division to get whole number of plants\n    return num_plants\n\nans = solution()"
    ],
    "0ed2fd09143045b3bdb6bd4e5af3258f": [
        "def solution():\n    total_cars = 60\n    black_dodges = 25\n    blue_cars = 18\n    fords = 25\n    \n    # Since all cars are either black or blue and fords or dodges, we can use logical deductions.\n    # The number of black cars can be calculated by subtracting the number of blue cars from the total number of cars.\n    black_cars = total_cars - blue_cars\n    \n    # The number of black fords can be calculated by subtracting the number of black dodges from the total number of black cars.\n    black_fords = black_cars - black_dodges\n    \n    # The total number of dodges can be calculated by subtracting the number of fords from the total number of cars. \n    dodges = total_cars - fords\n    \n    # The number of blue dodges can be calculated by subtracting the number of black dodges from the total number of dodges.\n    blue_dodges = dodges - black_dodges\n    \n    # The number of blue fords is the difference between the total number of blue cars and the number of blue dodges.\n    blue_fords = blue_cars - blue_dodges\n    \n    return blue_fords\n\nans = solution()"
    ],
    "f521fd6cd0bd42ab975826d346f3d148": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    \n    # Equation for the sum\n    equation1 = Eq(x + y, 80)\n    \n    # Equation for the difference\n    equation2 = Eq(x - y, 40)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Returning the smaller number\n    return min(solutions[x], solutions[y])\n\nans = solution()"
    ],
    "0e0d80b219274c0faaf2195165716eec": [
        "def solution():\n    return 7.73 - 7.53\n\nans = solution()"
    ],
    "4d85f6fe7d5845cfa81cf1f042e09c59": [
        "def solution():\n    for num in range(1, 11 * 7):\n        if num % 11 == 5 and num % 7 == 1:\n            return num\n\nans = solution()"
    ],
    "55d8d326e1d84f5591afabea1baed475": [
        "def solution():\n    A = 4 * 5  # First consecutive composite number after 4 (since 2 and 3 are primes)\n    while True:\n        B = A + 1\n        C = A + 2\n        D = A + 3\n        # Check for next three numbers to be composites.\n        if all(len([i for i in range(2, n//2+1) if n % i == 0]) > 0 for n in [B, C, D]):\n            return A + B + C + D\n        A += 1  # Increment A looking for next valid composite sequence\n\nans = solution()"
    ],
    "408a76137cb74fe6b5a4628ffe8dd9fc": [
        "def solution():\n    # According to the Pigeonhole Principle, in the worst-case scenario, the magician could pick\n    # all balls of the same color before getting a ball of a different color.\n    # To guarantee getting one of each color, the magician needs to pick all but one of each color,\n    # then one more to ensure the last color is picked.\n\n    # The maximum number of balls without getting all three colors:\n    max_balls_without_all_colors = (8 - 1) + (10 - 1) + (13 - 1)\n\n    # To ensure the last color, pick one more ball:\n    min_balls_to_pick_all_colors = max_balls_without_all_colors + 1\n\n    return min_balls_to_pick_all_colors\n\nans = solution()"
    ],
    "5cfc215c78a9472a8a18a9ba927900bd": [
        "def solution():\n    average_daily_earnings = 120\n    number_of_working_days = 5\n    total_earnings = average_daily_earnings * number_of_working_days\n    return total_earnings\n\nans = solution()"
    ],
    "b8255d96c133471bb6e3c22310b41adf": [
        "def solution():\n    total_questions = 50\n    correct_points = 3\n    wrong_points = -2\n    total_score = 125\n\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        if correct_answers * correct_points + wrong_answers * wrong_points == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "199c56ed665e423c91ceb0507bd0ab53": [
        "def solution():\n    return (3/8) * 960\n\nans = solution()"
    ],
    "bb4e43f4f3bd41c086968d751b91561e": [
        "def solution():\n    from math import comb\n\n    num_teams = 6\n    num_games = comb(num_teams, 2)\n\n    return num_games\n\nans = solution()"
    ],
    "4405728c929e4c69acaa6a473aab8e49": [
        "def solution():\n    total_apples = 50\n    children = 8\n    # If each child gets at least one apple, at least 7 apples are distributed\n    min_apples_distributed = children - 1\n    # Remaining apples after each child has received one\n    remaining_apples = total_apples - min_apples_distributed\n    # The kid with the most apples gets the least number when the remaining are evenly distributed\n    # So, divide the remaining apples by the number of children\n    least_most_apples = remaining_apples // children\n    # Add one because we are looking for the least most, not the average number per child\n    least_most_apples += 1\n\n    return least_most_apples\n\nans = solution()"
    ],
    "f2e8931a123545f7956d58a111edc936": [
        "def solution():\n    a = 31\n    b = 29\n    ans = (a + b) * (a - b)\n    return ans\n\nans = solution()"
    ],
    "9a69c834b77544398d9efb56ebcabb0a": [
        "def solution():\n    import math\n    ans = math.gcd(math.gcd(60, 72), 84)\n    return ans\n\nans = solution()"
    ],
    "202cfc0fd1a34d84987c51e10238c07e": [
        "def solution():\n    ans = 7001 - 360\n    return ans\n\nans = solution()"
    ],
    "e9da788ec1b54b65a18fecebd1daa615": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"296{digit}12\")\n        if number % 9 == 0:\n            return digit\n\nans = solution()"
    ],
    "46421c119de14d79b2cc3d333a42ca8c": [
        "def solution():\n    two_thirds_of_number = 24\n    # Since two-thirds of the number is 24, the whole number is (3/2) * 24\n    whole_number = (3/2) * two_thirds_of_number\n    # Now we need to find three-quarters of the whole number\n    three_quarters_of_number = (3/4) * whole_number\n    return three_quarters_of_number\n\nans = solution()"
    ],
    "a48ac2327a494c02bf02f51c7a25087f": [
        "def solution():\n    # There are 12 numbers, hence every complete cycle Eddie counts through 12 numbers\n    cycle_length = 12\n    # Eddie stops at 10 o'clock after counting to 30\n    final_position = 10\n    total_count = 30\n    \n    # Calculate the starting position using the modulus operator\n    # The position Eddie starts from is equal to where he ends minus the counts he made, \n    # wrapping around every 12 counts (hence % cycle_length), plus the cycle_length to ensure it's positive\n    start_position = (final_position - (total_count % cycle_length) + cycle_length) % cycle_length \n    \n    # If start_position is 0, it means Eddie started from 12 o'clock\n    start_position = cycle_length if start_position == 0 else start_position\n    \n    return start_position\n\nans = solution()"
    ],
    "a4fa99021c374f29b4110f2783cfd291": [
        "def solution():\n    # Start with the given sequence\n    seq = [2, 2]\n\n    # Generate terms until the sequence pattern is identified\n    while len(seq) < 2011:\n        # Add the last two numbers and take the last digit of the sum\n        next_num = (seq[-1] + seq[-2]) % 10\n        seq.append(next_num)\n        \n        # If a cycle is detected, break out of the loop\n        if seq[-2:] == [2, 2]:\n            break\n\n    # Remove the initial [2, 2] as this is the start of the cycle\n    seq = seq[:-2]\n\n    # The length of the repeating cycle\n    cycle_length = len(seq)\n\n    # Calculate the index within the cycle for the 2011th number\n    index_in_cycle = (2011 - 1) % cycle_length\n\n    # Return the corresponding number in the cycle\n    return seq[index_in_cycle]\n\nans = solution()"
    ],
    "2832c695b129428eb3f7330133ef2d33": [
        "def solution():\n    remainder_423 = 423 % 4\n    remainder_326 = 326 % 4\n\n    product_remainder = (remainder_423 * remainder_326) % 4\n\n    return product_remainder\n\nans = solution()"
    ],
    "b2a8300be95d4862a99c0a044007743d": [
        "def solution():\n    # Total distance driven in the first 2 hours\n    distance_first_part = 2 * 40\n    \n    # Total distance driven in the second part\n    distance_second_part = 280\n    \n    # Total distance driven\n    total_distance = distance_first_part + distance_second_part\n    \n    # Time taken to drive the second part\n    time_second_part = distance_second_part / 70\n    \n    # Total time taken for the whole trip\n    total_time = 2 + time_second_part\n    \n    # Average speed for the whole trip\n    average_speed = total_distance / total_time\n    \n    return average_speed\n\nans = solution()"
    ],
    "bb2d33406c1e486b9da0c4789678c8e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Create symbols for Alan's and Bob's number of cards\n    alan, bob = symbols('alan bob')\n    \n    # Equation 1: Bob has $15 more Match Dfex cards than Alan.\n    eq1 = Eq(bob, alan + 15)\n    \n    # Equation 2: Bob now has 3 times as many as Alan after receiving 25 cards.\n    eq2 = Eq(bob + 25, 3 * alan)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (alan, bob))\n    \n    # Extract Alan's card number from the solutions\n    return solutions[alan]\n\nans = solution()"
    ],
    "14656e3844dc4d66b7a39d88a9afb8f9": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Define the symbols\n    k, m = symbols('k m', integer=True)\n\n    # The given odd numbers form an arithmetic sequence, starting from 23,\n    # with a common difference of 2. The sequence ends with (2k-1).\n    # The sum of this arithmetic sequence equals m^2.\n    # Number of terms in the sequence is (2k-1 - 23)/2 + 1 = k - 11\n    # Sum of an arithmetic series: n/2 * (first_term + last_term)\n    # Here, n = k - 11, first_term = 23, last_term = 2k - 1\n\n    expression = ((k - 11) / 2) * (23 + (2 * k - 1)) - m**2\n\n    # Since k > 30, we add this condition\n    conditions = [expression, k > 30]\n\n    # Find the values of k and m that satisfy the conditions\n    sol = solve(conditions)\n\n    return [s[m] for s in sol if s[m].is_integer and s[m] > 0][0]\n\nans = solution()"
    ],
    "5513ff312a12411eae4858bfd699527a": [
        "def solution():\n    original_amount = 20\n    daily_savings = 1\n    days_saved = 7\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    current_amount = original_amount + (daily_savings * days_saved) - lent_to_brother - spent_on_snacks\n    return current_amount\n\nans = solution()"
    ],
    "146248a0d3d64afe8918234f3da5b527": [
        "def solution():\n    num_cows = 5\n    num_days = 3\n    grass_per_cow_per_day = 1\n    \n    total_grass = num_cows * num_days * grass_per_cow_per_day\n\n    return total_grass\n\nans = solution()"
    ],
    "54048b9f40ed41f0805db2d51102d2f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sold = symbols('sold')\n    equation = Eq((89 - sold) / (45 - sold), 12)\n\n    solved = solve(equation, sold)\n\n    return solved[0]\n\nans = solution()"
    ],
    "824799b919f548949a8702760dbeaab5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Defining the symbols for the cost of one banana and one apple\n    banana, apple = symbols('banana apple')\n    \n    # Ellie's purchase\n    equation1 = Eq(2 * banana + 3 * apple, 3)\n    # Beth's purchase\n    equation2 = Eq(3 * banana + 2 * apple, 4)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (banana, apple))\n    \n    # Annabella's purchase\n    total_cost = 10 * solutions[banana] + 10 * solutions[apple]\n    \n    return total_cost\n\nans = solution()"
    ],
    "f8b86822291f4eeb9da03b7a91347c42": [
        "def solution():\n    return 6.6 + 13.5\n\nans = solution()"
    ],
    "a69f37c117db4732b832f08fb22c082e": [
        "def solution():\n    prob_to_work_late = 0.7\n    prob_to_home_late = 0.4\n    prob_both_on_time = (1 - prob_to_work_late) * (1 - prob_to_home_late)\n    prob_at_least_one_late = 1 - prob_both_on_time\n    \n    return prob_at_least_one_late\n\nans = solution()"
    ],
    "729c668804d14fd39ae12b3b213c23b9": [
        "def solution():\n    lena_initial = 86\n    given_away = 29\n    final_count = 100\n\n    strawberries_received = final_count - (lena_initial - given_away)\n    \n    return strawberries_received\n\nans = solution()"
    ],
    "9413da5a29d94f68bda0bca4fa184194": [
        "def solution():\n    total_two_digit_numbers = 90  # 10 to 99\n    without_six = 64  # 8 options for each digit excluding six (10-59, 70-99)\n\n    with_at_least_one_six = total_two_digit_numbers - without_six\n    return with_at_least_one_six\n\nans = solution()"
    ],
    "102f809f85cc4c64bd406383329e958e": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime(\"1/4/2023\", \"%d/%m/%Y\")\n    end_date = datetime.strptime(\"18/5/2023\", \"%d/%m/%Y\")\n    delta = end_date - start_date\n\n    return delta.days + 1\n\nans = solution()"
    ],
    "f54684d1af9a4195b08d5e9f85769b4d": [
        "def solution():\n    from math import floor, ceil\n\n    return floor(2017) - ceil(201.7) + floor(20.17) - ceil(2.017)\n\nans = solution()"
    ],
    "0224d77dd22a452996b6417887c3bc74": [
        "def solution():\n    return sum(range(1, 31))\n\nans = solution()"
    ],
    "9b4e50b2cce74bd080a154bda1547248": [
        "def solution():\n    count = 0\n    for i in range(1, 2023):\n        if i % 7 != 0 and i % 17 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a543d8cd5bcf46c784fc4a1226cbbd55": [
        "def solution():\n    # Total percentage for men\n    men_percentage = 37\n\n    # Percentage for women and children\n    women_children_percentage = 100 - men_percentage\n\n    # Since men are 12 more than children, let's denote children as x and men as x + 12\n    # The percentage for children and men should be the same as the ratio 4 : 5 for women to children.\n    # Therefore, women percentage is 4/5 of children's, and men percentage is 5/5 of children's, which is equal to children's.\n\n    # Establish the ratio in terms of x\n    men = x + 12\n    children = x\n    women = (4 / 5) * children\n\n    # Relate the percentages to the ratio\n    # The fraction of men to the total should be equal to the fraction of 'men' in our ratio expression to the sum of all.\n    # men / total = (x + 12) / (x + (4/5)x + (x + 12))\n    # Knowing men is 37% of the total, we can replace 'men' with 37 and 'total' with 100\n    # 37 = 100 * (x + 12) / (9/5 * x + 12)\n    # Solving this for x gives us the number of children, from which we can calculate the number of women.\n\n    # Calculate the number of children (x)\n    x = (37 * (9 / 5)) / (100 - 37)\n\n    # Calculate the number of women\n    women_count = (4 / 5) * x\n\n    return int(women_count)\n\nans = solution()"
    ],
    "6d1da4e249844060b1007899c512c4fc": [
        "def solution():\n    last_digit_2023_squared = (2023 ** 2) % 10\n    last_digit_2_power_2023 = pow(2, 2023, 10)\n    \n    sum_last_digit = (last_digit_2023_squared + last_digit_2_power_2023) % 10\n    last_digit_result = (sum_last_digit ** 3) % 10\n    \n    return last_digit_result\n\nans = solution()"
    ],
    "164afcec5f87405ab3a28c1284c5b89b": [
        "from math import comb\n\ndef solution():\n    return comb(13, 2)\n\nans = solution()"
    ],
    "2ff1001e219d4b0ebd3a3f0f80ec684b": [
        "def solution():\n    return 9744 // 7\n\nans = solution()"
    ],
    "87405c2a8850443ebcf2f68413e180c6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the fruit prices\n    mango, orange, pear = symbols('mango orange pear')\n\n    # Equations based on the given information\n    eq1 = Eq(mango + orange, 3.80)\n    eq2 = Eq(mango + pear, 3.40)\n    eq3 = Eq(4 * mango + 2 * pear + orange, 13.20)\n\n    # Solve the system of equations\n    prices = solve((eq1, eq2, eq3), (mango, orange, pear))\n\n    return prices[mango]\n\nans = solution()"
    ],
    "ea0d74bbb60148689b29e204ee0a434f": [
        "def solution():\n    distance = 360\n    speed_a = 48\n    speed_b = 72\n\n    relative_speed = speed_a + speed_b\n    \n    time_to_meet = distance / relative_speed\n\n    return time_to_meet\n\nans = solution()"
    ],
    "8da214e5bceb4927bd7edbb025a80cf8": [
        "def solution():\n    last_digit_5s = 5 ** 20 % 10\n    last_digit_7s = 7 ** 20 % 10\n    \n    ans = (last_digit_5s * last_digit_7s) % 10\n    \n    return ans\n\nans = solution()"
    ],
    "23d9ec7fa57f4172838349ff3d74acd6": [
        "def solution():\n    return 2.99 + 12.99 + 22.99\n\nans = solution()"
    ],
    "fc18d60c6efd483aba5f6e0938c4d924": [
        "def solution():\n    pi = 22/7\n    radius_semicircle = 14 / 2\n    perimeter_semicircle = 2 * pi * radius_semicircle / 2  # Half the circumference\n    perimeter_quadrant = pi * radius_semicircle  # Quadrant is half of the semicircle\n    total_perimeter = (2 * perimeter_semicircle) + (2 * perimeter_quadrant)\n    return total_perimeter\n\nans = solution()"
    ],
    "c369770b6e0847c7b9bea03be1874741": [
        "def solution():\n    from math import gcd\n\n    pencils = 28\n    pens = 63\n\n    max_students = gcd(pencils, pens)\n\n    return max_students\n\nans = solution()"
    ],
    "936bbd100b83467b8e8f7ca63b277148": [
        "def solution():\n    remaining = 48\n    # Let's denote x as the original number of watermelons\n    # After the first day she sold 1/3, so she has 2/3 left\n    # After the second day, she sold 3/5 of the remaining, so she has 2/5 left\n    # This makes 2/5 of 2/3 of x equals to the 48 watermelons remaining.\n    # Therefore, we have the equation: 2/5 * 2/3 * x = 48\n    # Solving for x, we find the original number of watermelons\n    x = 48 * 5/2 * 3/2\n    return int(x)\n\nans = solution()"
    ],
    "1169fdf1689a45368fbfa500b29b4d4a": [
        "from math import comb\n\ndef solution():\n    ways = comb(10, 6)\n    return ways\n\nans = solution()"
    ],
    "93cf1ceee35c46ea82413427f66b961c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ahmad, sam, jim = symbols('ahmad sam jim')\n    \n    equation1 = Eq(sam, ahmad + 6)\n    equation2 = Eq(jim, 2 * ahmad)\n    equation3 = Eq(ahmad + sam + jim, 334)\n    \n    solutions = solve((equation1, equation2, equation3), (ahmad, sam, jim))\n    \n    return solutions[jim]\n\nans = solution()"
    ],
    "48e659b717794dd1b47e78672c0d2e01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the cost of a packet of rice\n    cost_rice = symbols('cost_rice')\n\n    # The cost of 6 packets of pasta\n    cost_pasta_per_packet = 95  # in pence\n    total_cost_pasta = 6 * cost_pasta_per_packet\n\n    # Equation representing total cost\n    total_spent = 1170  # in pence (£11.70)\n    equation = Eq(5 * cost_rice + total_cost_pasta, total_spent)\n\n    # Solve for the cost of a packet of rice\n    solution = solve(equation, cost_rice)\n\n    # Get the result in pence\n    return solution[0]\n\nans = solution()"
    ],
    "18f570e74c21419eb70c8ce179cc02dc": [
        "def solution():\n    lcm = 3 * 5 * 7  # Calculate least common multiple\n    for num in range(lcm, 1000, lcm):  # Check numbers from lcm to 999\n        if str(num).startswith('6'):  # If it starts with '6'\n            return num  # Found the number\n\nans = solution()"
    ],
    "64e22caf8eac4296b018f35f51dcffe6": [
        "def solution():\n    result = (3/4) * (2/5) * 1\n    return result\n\nans = solution()"
    ],
    "9e39cc7574e64c79abd7435129d58354": [
        "def solution():\n    ans = 336 // 6\n    return ans\n\nans = solution()"
    ],
    "a59f135bac214a5da575b9ce4f066823": [
        "def solution():\n    result = 0.30 * (2 / 3) * 45\n    return result\n\nans = solution()"
    ],
    "8cbab745f9da4de496aff3862df03057": [
        "def solution():\n    num_cakes = 195\n    cost_per_cake = 46\n    \n    total_cost = num_cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "b6b08041a7514720a1278986419ff0cb": [
        "def solution():\n    B = (3 * 9 + 5 * 9) / 8\n    return B\n\nans = solution()"
    ],
    "ea69a9598ef948f590dc1d10f048d2a0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of days it takes for the lazy decorator to paint the house alone\n    x = symbols('x')\n\n    # Work rate of the energetic decorator: 1/20 (the house per day)\n    # Work rate of the lazy decorator: 1/x (the house per day)\n\n    # The combined work rate of both decorators is 1/12 (the house per day)\n    # Thus, the equation is 1/20 + 1/x = 1/12\n    equation = Eq(1/20 + 1/x, 1/12)\n\n    # Solving for x gives us the number of days it would take the lazy decorator\n    solution = solve(equation, x)\n\n    # Since the equation can be solved exactly, there will be only one solution.\n    return solution[0]\n\nans = solution()"
    ],
    "da6271db0c0242c5935ddca8b62ae82b": [
        "def solution():\n    num_pies = 1\n    while True:\n        if num_pies % 4 == 0 and num_pies % 6 == 0:\n            return num_pies\n        num_pies += 1\n\nans = solution()"
    ],
    "c11a8651ce514fa998ed30b3b9b53658": [
        "def solution():\n    count_4 = 0\n    for page in range(1, 201):\n        count_4 += str(page).count('4')\n    return count_4\n\nans = solution()"
    ],
    "e5c0ab18d1ae4d8d82cff69be28b3579": [
        "def solution():\n    boys = 42\n    boys_to_girls_ratio = 3 / 2\n\n    girls = (boys / 3) * 2\n\n    return int(girls)\n\nans = solution()"
    ],
    "bbda3a80787243eab22a64bb52857096": [
        "def solution():\n    # Let n be the smallest number in the consecutive sequence.\n    # Since there are 15 consecutive numbers, then the largest number will be n + 14.\n    # We know the average (mean) of these 15 numbers will be total_sum / number_of_terms = 1650 / 15.\n    \n    average = 1650 / 15\n    \n    # The average of a sequence of consecutive numbers is the middle number.\n    # Since our sequence has an odd number of terms (15), the middle number is the 8th term.\n    # So the middle number is the average, hence middle = n + 7.\n    \n    middle = average\n    \n    # Now we can find the smallest number:\n    # middle = n + 7 => n = middle - 7\n    # And the largest number:\n    # largest = n + 14\n    \n    smallest = middle - 7\n    largest = smallest + 14\n    \n    # Sum of the largest and smallest number:\n    sum_of_largest_and_smallest = smallest + largest\n    \n    return int(sum_of_largest_and_smallest)\n\nans = solution()"
    ],
    "64339b5e0ff14488a7a7915e85f7baad": [
        "def solution():\n    # Start with the fraction and use the knowledge that the outer structure is 1 + 1/(something)\n    # Given the fraction 13/10, we can find the \"something\" by subtracting 1 (which is 10/10 in this case)\n    # This leaves us with 3/10\n\n    # The structure now looks like 1 + 1/(a + 1/(b + 1/c)), where a + 1/(b + 1/c) = 10/3\n    # Rearrange it to get that a = (10/3 - 1/(b+1/c))\n    # a is a whole number, so b + 1/c must be of the form 1/n to make (10/3 - 1/n) a whole number\n    # For 10/3 - 1/n to be an integer, n must be a divisor of 3 (since 10/3 is just over 3)\n    # The divisors of 3 are 1 and 3. Let's choose 3 for n, since 1 would give a very large a\n    # This results in b + 1/c = 1/3\n    # Rearrange to get b = (1/3 - 1/c)\n    # For 1/3 - 1/c to be an integer, c must be a divisor of 3\n    # The only positive divisors of 3 are 1 and 3. If we choose c = 1, b becomes negative which isn't allowed as b is a whole number\n    # So we choose c = 3, which gives us: b = (1/3 - 1/3) = 0\n    # And a = (10/3 - 3) = 1\n    # The question asks for a + 2b + 3c. So we have to calculate 1 + 2(0) + 3(3)\n\n    a, b, c = 1, 0, 3\n    ans = a + 2 * b + 3 * c\n    return ans\n\nans = solution()"
    ],
    "b678890a19374c38ad59d1486f4db916": [
        "def solution():\n    # For a, the remainder when divided by 8 is 6\n    remainder_a = 6\n    # For b, the remainder when divided by 8 is 7\n    remainder_b = 7\n\n    # The remainder of their sum, when divided by 8\n    remainder_sum = (remainder_a + remainder_b) % 8\n\n    return remainder_sum\n\nans = solution()"
    ],
    "c465c0e7f9a94f92b6df9d60a786dffa": [
        "def solution():\n    oddtastic_count = 0\n    for number in range(1, 1000):\n        if all(int(digit) % 2 != 0 for digit in str(number)): \n            oddtastic_count += 1\n    return oddtastic_count\n\nans = solution()"
    ],
    "14a5a44068684024a8f1f67d00758fe4": [
        "def solution():\n    return 2189 - 1056\n\nans = solution()"
    ],
    "439bd1eb78b4450ebb4e7f6c4c72416e": [
        "网络故障，请重试"
    ],
    "d54fa4b78c5640dab674ce3faf979b3b": [
        "def solution():\n    num_of_digits = 0\n    current_number = 1\n\n    # Loop through the numbers, adding their length to the counter,\n    # until the number of digits exceeds 2019.\n    while num_of_digits < 2019:\n        num_of_digits += len(str(current_number))\n        if num_of_digits < 2019:\n            current_number += 1\n\n    # Calculate which digit of the number (current_number) is the 2019th digit.\n    digit_position = len(str(current_number)) - (num_of_digits - 2019) - 1\n\n    return int(str(current_number)[digit_position])\n\nans = solution()"
    ],
    "d4e1d8676a734ecc80b7b6a843595692": [
        "def solution():\n    score = 84\n    total = 120\n\n    percentage = (score / total) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "0de428143ddc41079e76fd4ffbe23365": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    n, _ = solve_congruence(*congruences)\n    return n\n\nans = solution()"
    ],
    "b764a882e0bc414689dc39fd81aaa3f1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, bernice, cindy = symbols('alice bernice cindy')\n\n    equation1 = Eq(bernice, alice + 240)\n    equation2 = Eq(cindy, bernice + 100)\n    equation3 = Eq(alice + bernice + cindy, 1792)\n\n    solutions = solve((equation1, equation2, equation3), (alice, bernice, cindy))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "752e5759eb7140ecb85296bce9368f6d": [
        "def solution():\n    sum_numbers = 3009\n    greater_number = 1722\n    smaller_number = sum_numbers - greater_number\n    difference = greater_number - smaller_number\n    return difference\n\nans = solution()"
    ],
    "2d35f2e1d3d34ffbb28a8cebae92c23e": [
        "def solution():\n    # Starting with the first key, each key has an opportunity to be tested in a lock.\n    # This will go on until the last key which will have no choice but to fit the last lock.\n    # So for the first key, there are 11 possibilities, for the second there are 10, and so on...\n    # This is similar to calculating the factorial of the number of keys.\n    \n    # Initialize the count as 0, since he has not started trying the keys.\n    count = 0\n    \n    # Initialize the number of keys\n    keys = 11\n    \n    # Loop through each key to see how many attempts we need to make\n    for i in range(keys, 0, -1):\n        count += i\n    \n    # Return the total count\n    return count\n\nans = solution()"
    ],
    "c3e11e75704c400fa620bd26e3fb5ccc": [
        "def solution():\n    ans = 412 / 1000\n    return ans\n\nans = solution()"
    ],
    "8b508f3a63af42fc89337bb741587d2a": [
        "def solution():\n    total_cost = 33 + 20.40\n    num_people = 6\n    cost_per_person = total_cost / num_people\n    return cost_per_person\n\nans = solution()"
    ],
    "9b1cb8dd1d064db29dc7e2d464d99ce8": [
        "def solution():\n    total_mass_kg = 6.5\n    basket_mass_kg = 500 / 1000  # converting grams to kilograms\n    kitten_mass_kg = 0.6\n    num_kittens = 4\n\n    cat_mass_kg = total_mass_kg - (basket_mass_kg + num_kittens * kitten_mass_kg)\n\n    return cat_mass_kg\n\nans = solution()"
    ],
    "70c25992de344a84b58dad3b24775a9b": [
        "from math import factorial\n\ndef solution():\n    total_digits = 5  # total number of digits available (three 2s and two 3s)\n    duplicate_2 = 3   # number of 2s available\n    duplicate_3 = 2   # number of 3s available\n\n    # Total permutations of digits divided by the permutations of duplicate digits.\n    ans = factorial(total_digits) // (factorial(duplicate_2) * factorial(duplicate_3))\n\n    # Since it's a 4-digit number, we need to subtract the permutations where 2 is the first digit (because that would make it a 3-digit number)\n    first_digit_2_permutations = factorial(total_digits - 1) // (factorial(duplicate_2 - 1) * factorial(duplicate_3))\n    ans -= first_digit_2_permutations\n\n    return ans\n\nans = solution()"
    ],
    "4787ee3647b6493ebaa57cbbe430a914": [
        "def solution():\n    original_price = 4\n    increase_percentage = 0.20\n    new_price = original_price + original_price * increase_percentage\n\n    return new_price\n\nans = solution()"
    ],
    "01fcd86ba34343e3abb3f7ccb88315bf": [
        "def solution():\n    siblings = 3 + 4  # brothers + sisters\n    # Including Mary, there are siblings + 1 people\n    # Each person buys an egg for each of the other siblings (not for themselves)\n    eggs_bought = siblings * (siblings + 1)\n    return eggs_bought\n\nans = solution()"
    ],
    "59b6fc93c0364f6fab328fca8f96a25e": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "ff9990049fcc49a0a8417652c96375b8": [
        "def solution():\n    from datetime import datetime\n\n    format = \"%H:%M\"  # Hours and minutes format\n    time_of_leaving = datetime.strptime(\"7:50\", format)\n    time_of_arrival = datetime.strptime(\"8:40\", format)\n    \n    # Calculate the difference in time\n    journey_duration = time_of_arrival - time_of_leaving\n    \n    ans = journey_duration.seconds // 60  # Convert the time duration to minutes\n    return ans\n\nans = solution()"
    ],
    "e56f53a819d843a4ac3977912faff7e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for apples and bananas\n    apples, banana = symbols('apples banana')\n\n    # Create equations based on the given information\n    equation1 = Eq(3 * apples + banana, 32)\n    equation2 = Eq(6 * apples + banana, 53)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apples, banana))\n\n    # Return the cost of one banana\n    return solutions[banana]\n\nans = solution()"
    ],
    "cc4d6508bfc94140bc674ed22aab0fb3": [
        "def solution():\n    # The sequence follows a pattern where each term increases by an increment\n    # that itself increases by 1 each time (second-order arithmetic sequence)\n    # Starting from 3, the differences are 3, 4, 5, ...\n    # So the fifth term's difference is 3 + (5 - 1) = 3 + 4 = 7\n    # The fourth term is 15, so the fifth term is 15 + 7 = 22\n    missing_number = 15 + 7\n    return missing_number\n\nans = solution()"
    ],
    "4c14bb3f346248288c5863e88eba5a22": [
        "def solution():\n    remaining_money_after_bag = 80 / (1 - 3/5)\n    initial_money = remaining_money_after_bag / (1 - 1/5)\n    return initial_money\n\nans = solution()"
    ],
    "ffe4e2fccc06432695daf3045845a872": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Samuel's initial amount of money\n    initial_money = symbols('initial_money')\n\n    # Spent 1/6 and additional $5\n    after_dvd = initial_money - (initial_money / 6 + 5)\n\n    # Spent 2/5 of the remaining money and an additional $12\n    after_magazines = after_dvd - (2/5 * after_dvd + 12)\n\n    # Remaining money is $24\n    equation = Eq(after_magazines, 24)\n\n    # Solve the equation to find the initial amount\n    solution_dict = solve(equation, initial_money)\n\n    return solution_dict[0]\n\nans = solution()"
    ],
    "374ef3bc7e0a42419bf59b665a1e8df4": [
        "def solution():\n    total_oil = 47\n    oil_poured_out = 5\n    number_of_tanks = 6\n\n    oil_left = total_oil - oil_poured_out\n    oil_per_tank = oil_left / number_of_tanks\n\n    return oil_per_tank\n\nans = solution()"
    ],
    "9fec34e2fa3e48e3b534a4a88195f5ba": [
        "def solution():\n    pip_position_from_front = 8\n    bud_position_from_end = 10\n    children_between = 4\n    \n    total_children = pip_position_from_front + children_between + bud_position_from_end\n    \n    return total_children\n\nans = solution()"
    ],
    "293a4c45646547c38aa5f707c907ac82": [
        "def solution():\n    # Define ages of Johnny and his grandpa\n    johnny_age = 8\n    grandpa_age = 72\n\n    # Define number of years in the future as a variable\n    years_in_future = symbols('years_in_future')\n\n    # Create the equation where grandpa's age will be 5 times Johnny's age\n    equation = Eq(grandpa_age + years_in_future, 5 * (johnny_age + years_in_future))\n\n    # Solve the equation for the number of years in the future\n    solution = solve(equation, years_in_future)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e757d8a583d44579823d7d3329dd4962": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Alan's and Bob's number of cards\n    alan, bob = symbols('alan bob')\n\n    # Equation 1: Bob has 15 more cards than Alan (before Colin gives cards)\n    equation1 = Eq(bob, alan + 15)\n\n    # Equation 2: After receiving 25 cards from Colin, Bob now has 3 times as\n    # many cards as Alan\n    equation2 = Eq(bob + 25, 3 * alan)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (alan, bob))\n\n    return solutions[alan]\n\nans = solution()"
    ],
    "8c7b9411bbb04086ab07eacadf5afd5e": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "2557fa802eef44bc834d1a8106a622e5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Declare symbol for the unknown interest rate\n    r = symbols('r')\n\n    # Create an equation based on the compound interest formula\n    equation = Eq(2000 * (1 + r)**3, 2519.42)\n\n    # Solve for the interest rate\n    interest_rate = solve(equation, r)\n\n    # Get the rate as a percentage and round to the nearest tenth of a percent\n    interest_rate_percent = round(interest_rate[0] * 100, 1)\n\n    return interest_rate_percent\n\nans = solution()"
    ],
    "b70ebf97614545e8a65cd9169021bb74": [
        "def solution():\n    # Calculate sum of all odd numbers from 1 to 50\n    sum_odd = sum(range(1, 51, 2))\n    \n    # Calculate sum of all even numbers from 1 to 50\n    sum_even = sum(range(2, 51, 2))\n    \n    # Calculate the difference\n    difference = sum_even - sum_odd\n    \n    return difference\n\nans = solution()"
    ],
    "bc4291892b8945d4b66ab1f2b66dcee3": [
        "def solution():\n    # Given that x~Δ~9 = 37, this equates to 5x + 3*9 = 37 based on the given operation definition.\n    # 5x + 27 = 37\n    # 5x = 37 - 27\n    # 5x = 10\n    # x = 10 / 5\n    # x = 2\n    x = (37 - 3*9) / 5\n    return x\n\nans = solution()"
    ],
    "1dc5079dba0a4447af8a598e73c3cbd8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time_str = \"11:15 AM\"\n    duration_str = \"3:50\"\n\n    arrival_time = datetime.strptime(arrival_time_str, \"%I:%M %p\")\n    duration = datetime.strptime(duration_str, \"%H:%M\")\n    departure_time = arrival_time - timedelta(hours=duration.hour, minutes=duration.minute)\n\n    return departure_time.strftime(\"%I:%M %p\").lstrip(\"0\").replace(\" 0\", \" \")\n\nans = solution()"
    ],
    "215e1d378ffe437ba1c9ccb1e8aee393": [
        "def solution():\n    # If Janice gave 20 oranges for each elderly, then 10 elderly would not receive any\n    # This means total number of elderly is E\n    \n    # If she gave 16 oranges to each elderly, she would have 25 boxes of 24 oranges\n    total_oranges_with_16_per_elderly = 25 * 24\n    # Which means after giving away oranges, the remaining oranges are enough for 25 boxes\n    # Hence, total_oranges = total_oranges_with_16_per_elderly + (16 * E)\n    \n    # The difference in oranges per elderly is 20 - 16 = 4\n    # The difference in the number of elderly who got oranges in these two situations is E - (E - 10) = 10\n    # So E * 4 = 10 * 20, find out E\n    E = (10 * 20) // 4\n    \n    # Therefore, total number of oranges Janice has is:\n    total_oranges = total_oranges_with_16_per_elderly + (16 * E)\n    \n    # Since everyone has to get the same number of oranges, and all oranges are to be distributed\n    # Total number of elderly is E + 10 (including those who didn't get oranges when distributed 20 each)\n    total_elderly = E + 10\n    \n    # Number of oranges each should get so that there are no oranges left\n    oranges_per_elderly = total_oranges // total_elderly\n    \n    return oranges_per_elderly\n\nans = solution()"
    ],
    "ad306d1a04ac4d08a086e821e61e24be": [
        "def solution():\n    # Calculate the worst-case scenario:\n    # To make sure to get 4 balls of the same color, we take the following steps:\n    # Take 3 blue balls max (since taking 4 ensures 4 of the same color)\n    # Then take 3 orange balls max (if we take one more of any color we must have 4 of the same)\n    # Finally, take 2 yellow balls max (since there are only 2 yellow balls)\n    # So the next ball Sheila takes out, no matter the color, will ensure that she has 4 balls of the same color.\n    \n    blue_balls = 3\n    orange_balls = 3\n    yellow_balls = 2\n    \n    # The next ball will be the one ensuring we have 4 of the same color\n    next_ball = 1\n    \n    total_balls = blue_balls + orange_balls + yellow_balls + next_ball\n    \n    return total_balls\n\nans = solution()"
    ],
    "7a7da228cc224c7b93f5a155d88b34d8": [
        "def solution():\n    full_weight = 31\n    removed_soil_fraction = 1/5\n    remaining_weight = 27\n    \n    soil_removed_weight = full_weight * removed_soil_fraction\n    empty_wheel_barrow_weight = full_weight - soil_removed_weight - (full_weight - remaining_weight)\n    \n    return empty_wheel_barrow_weight\n\nans = solution()"
    ],
    "f1389cbcaf72480d9657232ad57f5bec": [
        "def solution():\n    total_marks = 214\n    scored_marks = 136\n\n    missed_marks = total_marks - scored_marks\n\n    return missed_marks\n\nans = solution()"
    ],
    "2f184eae91df42e18de5b645882a1cc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Tim and Tyler's cookies\n    tim_cookies, tyler_cookies = symbols('tim_cookies tyler_cookies')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(tim_cookies / 6, tyler_cookies * 3 / 8)\n    equation2 = Eq(tim_cookies, 9 * (tyler_cookies - 96))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (tim_cookies, tyler_cookies))\n\n    # Calculate the total number of cookies at first\n    total_cookies_at_first = solutions[tim_cookies] + solutions[tyler_cookies]\n    \n    return total_cookies_at_first\n\nans = solution()"
    ],
    "b32f8f344d984bb382e4fb73887230ab": [
        "from math import lcm\n\ndef solution():\n    # Least common multiple (LCM) of the trains' leaving times will give us the first time they both leave together.\n    # LCM of 24 and 30 minutes\n    minutes_until_next = lcm(24, 30)\n\n    # 9:00 a.m. is the initial time\n    initial_hour = 9\n    initial_minute = 0\n\n    # Convert initial time to minutes\n    total_initial_minutes = initial_hour * 60 + initial_minute\n    \n    # Calculate the time when both trains leave together next\n    total_minutes_when_trains_leave_together = total_initial_minutes + minutes_until_next\n    \n    # Convert total minutes back to hours and minutes\n    final_hour = total_minutes_when_trains_leave_together // 60\n    final_minute = total_minutes_when_trains_leave_together % 60\n    \n    # Final answer in hours and minutes\n    ans = f\"{final_hour % 24}:{str(final_minute).zfill(2)}\"\n    return ans\n\nans = solution()"
    ],
    "4c5e47c0c616449c92a2b06408c58928": [
        "def solution():\n    partial_capacity = 24\n    fraction_filled = 3/4\n\n    full_capacity = partial_capacity / fraction_filled\n\n    return full_capacity\n\nans = solution()"
    ],
    "f4a9a527d7144792b53639888c6da554": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    choc, van, blue = symbols('choc van blue')\n    \n    # Expressing the other cupcakes in terms of vanilla cupcakes\n    equation1 = Eq(choc, van + 72)\n    equation2 = Eq(blue, van - 36)\n    \n    # Sally sells some of each type of cupcake\n    sold_choc = 1/6 * choc\n    sold_van = 2/3 * van\n    sold_blue = 7/9 * blue\n    \n    # Sally is left with a total of 427 cupcakes\n    equation3 = Eq(choc - sold_choc + van - sold_van + blue - sold_blue, 427)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (choc, van, blue))\n\n    # Calculate how many chocolate cupcakes did Sally sell\n    choc_sold = sold_choc.subs(solutions)\n\n    return int(choc_sold)\n\nans = solution()"
    ],
    "87c44b7f86fe43459f5e47d26f57a64a": [
        "def solution():\n    remainder_a = 6\n    remainder_b = 7\n\n    sum_remainders = (remainder_a + remainder_b) % 8\n\n    return sum_remainders\n\nans = solution()"
    ],
    "6d2040f88fa04f798b4a1705445cb70b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mark, david = symbols('mark david')\n    equation1 = Eq(mark, david + 3)\n    equation2 = Eq(mark + david, 89)\n\n    solutions = solve((equation1, equation2), (mark, david))\n\n    return solutions[mark]\n\nans = solution()"
    ],
    "a558f6a1623e42cca6fbc286a7fa522e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anu, benu, chris, dave = symbols('anu benu chris dave')\n    \n    # Anu is 3 years younger than Chris: anu = chris - 3\n    equation1 = Eq(anu, chris - 3)\n    # Dave is 5 years older than Chris: dave = chris + 5\n    equation2 = Eq(dave, chris + 5)\n    # Dave is 3 years older than Benu: dave = benu + 3\n    equation3 = Eq(dave, benu + 3)\n    # Sum of the ages is 20: anu + benu + chris + dave = 20\n    equation4 = Eq(anu + benu + chris + dave, 20)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (anu, benu, chris, dave))\n\n    return solutions[anu]\n\nans = solution()"
    ],
    "85bee46ebede4627b0afc4c7e6181e1d": [
        "def solution():\n    count = 0\n    for i in range(2, 57):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "620fcfd4b5dc4851a21f52802f067616": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r be the original number of red marbles and w be the original number of white marbles\n    r, w, pip, bud = symbols('r w pip bud')\n\n    # Original ratio of red to white marbles is 3:2\n    equation1 = Eq(r/w, 3/2)\n\n    # After Pip adds red marbles, the ratio becomes 5:3\n    equation2 = Eq((r + pip)/w, 5/3)\n\n    # After Bud adds white marbles, the ratio becomes 5:4\n    equation3 = Eq((r + pip)/(w + bud), 5/4)\n\n    # Bud adds 100 more marbles than Pip\n    equation4 = Eq(bud, pip + 100)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (r, w, pip, bud))\n\n    # Return the original number of white marbles\n    return solutions[w]\n\nans = solution()"
    ],
    "7a743410e3e345b999a0951be98a6199": [
        "def solution():\n    desks_in_front_of_jessica = 5\n    desks_behind_judy = 7\n\n    # Since Jessica sits in front of Judy, add 1 for Jessica's own desk\n    # and another 1 for Judy's own desk.\n    total_desks = desks_in_front_of_jessica + 1 + 1 + desks_behind_judy\n\n    return total_desks\n\nans = solution()"
    ],
    "92dd78baf86e411d93098d70392d8777": [
        "def solution():\n    return 2.507 + 13.49\n\nans = solution()"
    ],
    "22842fb942f54d6e8ba1e02bb2901a77": [
        "def solution():\n    red_balloons = 57\n    yellow_balloons = red_balloons // 3\n    return yellow_balloons\n\nans = solution()"
    ],
    "4afd36119b724be1826c3ac3454d6dba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    avg_before = symbols('avg_before')\n    people_before = symbols('people_before')\n\n    # Aaron joins the group\n    equation1 = Eq(avg_before * people_before + 45, 61 * (people_before + 1))\n\n    # Ben joins the group\n    equation2 = Eq(61 * (people_before + 1) + 71, 62 * (people_before + 2))\n\n    # Solve the two equations to find the average weight before anyone joined\n    solutions = solve((equation1, equation2), (avg_before, people_before))\n\n    return float(solutions[avg_before])\n\nans = solution()"
    ],
    "8f0cf923121b43fb96d737a8fba5bd2f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    agnes, george, jack = symbols('agnes george jack')\n\n    equation1 = Eq(agnes, george - 5)\n    equation2 = Eq(jack, 3 * george)\n    equation3 = Eq(agnes + george + jack, 55)\n\n    solutions = solve((equation1, equation2, equation3), (agnes, george, jack))\n\n    return solutions[jack]\n\nans = solution()"
    ],
    "3ae41e17112a464fa38fa87aa1753aeb": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations('0123456789', 2):\n        x, y = p\n        product = int('4{}{}3'.format(x, y)) * 4\n        if str(product) == '1{}{}72'.format(x, y):\n            return product\n\nans = solution()"
    ],
    "1cae0bc768934c11a33a33e0df128753": [
        "def solution():\n    ans = 428 - 244\n    return ans\n\nans = solution()"
    ],
    "46bcd0c64033467eaa6a8102289e0a41": [
        "def solution():\n    number_of_cakes = 195\n    cost_per_cake = 46\n\n    total_cost = number_of_cakes * cost_per_cake\n\n    return total_cost\n\nans = solution()"
    ],
    "c2f74cd9163744c0b6071601b66266d4": [
        "def solution():\n    people_initial = 6\n    hours_initial = 15\n    hours_required = 2\n    work_rate = people_initial * hours_initial  # total amount of person-hours to build the bridge\n\n    people_required = work_rate / hours_required\n\n    return people_required\n\nans = solution()"
    ],
    "79e15e6ed353495ba1c745aa3360ff9c": [
        "def solution():\n    n = 40\n    sum_n = n * (n + 1) // 2\n    return sum_n\n\nans = solution()"
    ],
    "08705e45e80047af971fb071b94f2dd8": [
        "def solution():\n    n = 2.1 * 100  # converting meters to centimeters\n    return n\n\nans = solution()"
    ],
    "fcd9ab9940e142e0b0a968d0d5e14a94": [
        "def solution():\n    white_balls = 1991\n    black_balls = 1000\n    total_balls_taken = 2989\n\n    while total_balls_taken > 0:\n        # Ming takes two balls out\n        total_balls_taken -= 2\n\n        # Scenario 1: both balls are white or both are black\n        if white_balls % 2 == 0 or black_balls % 2 == 0:\n            # Adds one black ball back to bag if two balls are the same.\n            black_balls += 1\n        # Scenario 2: one white and one black ball\n        else:\n            # Only the white ball is put back.\n            white_balls += 1\n        \n        # One black ball is always taken out\n        black_balls -= 1\n    \n    # Number of balls left in bag A\n    balls_left = white_balls + black_balls\n    \n    # Color of the balls left\n    if white_balls > 0:\n        color = 'white'\n    else:\n        color = 'black'\n\n    return balls_left, color\n\nans = solution()"
    ],
    "ce902dc0e38d427eb9cd68b799e3bcaf": [
        "def solution():\n    initial_amount = 30\n    sweets_cost = 3.99\n    magazine_cost = 2.50\n    stickers_cost = 0.70\n    pizza_cost = 10.99\n    orange_juice_cost = 1.50 * 4\n    \n    total_spent = sweets_cost + magazine_cost + stickers_cost + pizza_cost + orange_juice_cost\n    change_left = initial_amount - total_spent\n    \n    return round(change_left, 2)\n\nans = solution()"
    ],
    "dd3337cf8b074877bdba86538785b68b": [
        "def solution():\n    count = 0\n    for x1 in range(1, 5):\n        for x2 in range(1, 5):\n            if x1 + x2 == 5:\n                count += 1\n    # We need to divide by 2 because (1,4) and (4,1) are considered the same division.\n    return count // 2\n\nans = solution()"
    ],
    "d7edf824287e4a788997a750d1c998c7": [
        "def solution():\n    count = 0\n    for hundred in range(1, 10): # hundreds digit must be between 1 and 9\n        for unit in range(0, 10): # units digit must be between 0 and 9\n            if hundred == (unit - 2): # hundreds digit is two less than the units digit\n                for ten in range(0, 10): # tens digit can be any digit from 0 to 9\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "044e10e45e8f4f60ae3f9ce39d3f3cf8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    mr_han, daughter = symbols('mr_han daughter')\n    \n    equation1 = Eq(mr_han, 3 * daughter)\n    equation2 = Eq(mr_han + daughter, 91.2)\n    \n    solutions = solve((equation1, equation2), (mr_han, daughter))\n    \n    return solutions[mr_han]\n\nans = solution()"
    ],
    "cc66cd3f11294d1984b5cf049794398d": [
        "def solution():\n    remaining_after_students = 108 / (1 - 2/5)\n    initial_chocolates = remaining_after_students / (1 - 80/100)\n    return int(initial_chocolates)\n\nans = solution()"
    ],
    "f74c213339b0455a9cf262e2e789bcee": [
        "def solution():\n    ans = 0\n    for i in range(1, 101):\n        ans += (2 * i - 1)\n    return ans\n\nans = solution()"
    ],
    "7dfb05a6c32a4880b5ff66c479e32727": [
        "def solution():\n    ans = 2 + 3 * (3 + 2)\n    return ans\n\nans = solution()"
    ],
    "2aa1e0027a284c64a861b8e60942d889": [
        "def solution():\n    count = 0\n    for page_number in range(1, 131):  # range(1, 131) to include page 130\n        count += str(page_number).count('1')\n    return count\n\nans = solution()"
    ],
    "250e63b1521b424d9f6cf44f8f79623b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 * x + 7, 5 * (x + 1))\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "4a61def62aa04793872f134a2ee581fc": [
        "def solution():\n    # Assume Samantha has x votes, and there are 25 votes in total.\n    # To ensure Samantha has more votes than anyone else, the other two students should have\n    # a maximum of x-1 votes each.\n    # The total votes can be represented as:\n    # x + (x-1) + (x-1) = 25\n    # 3x - 2 = 25\n    # 3x = 27\n    # x = 9\n    # So, Samantha must have at least 9 votes to have more than anyone else.\n    \n    samantha_votes = 9\n    return samantha_votes\n\nans = solution()"
    ],
    "3973a8cd4ae64cb8a964980f72c023df": [
        "def solution():\n    coin_values = [1, 2, 5]\n    different_totals = set()\n\n    for coin1 in coin_values:\n        for coin2 in coin_values:\n            for coin3 in coin_values:\n                total = coin1 + coin2 + coin3\n                different_totals.add(total)\n\n    ans = len(different_totals)\n    return ans\n\nans = solution()"
    ],
    "71a5e420be854536b851bfc6431ef442": [
        "def solution():\n    fraction = 13 / 25\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "1e18650a928a4a8aaa9433e3d4f8bdbf": [
        "def solution():\n    kg_to_g = 2.4 * 1000\n    return kg_to_g\n\nans = solution()"
    ],
    "c7536ec02a28451588a7654fe8fdcb94": [
        "def solution():\n    pages = 0\n    digits_used = 0\n\n    # Calculate the range of pages for 1-digit, 2-digit, and 3-digit numbers\n    while True:\n        if digits_used + (pages + 1) * len(str(pages + 1)) > 291:\n            break\n        pages += 1\n        digits_used += len(str(pages))\n\n    return pages\n\nans = solution()"
    ],
    "54ed486695084b83bc52e1acf3621c39": [
        "def solution():\n    total_money_spent = 1500\n    money_spent_on_chairs = 360\n\n    percent_spent_on_chairs = (money_spent_on_chairs / total_money_spent) * 100\n\n    return percent_spent_on_chairs\n\nans = solution()"
    ],
    "2c1618650feb43ee829f8c60f37d6d85": [
        "import sympy as sp\n\ndef solution():\n    # The formula for compound interest is A = P * (1 + r/n) ** (n*t)\n    # where A is the amount of money accumulated after n years, including interest.\n    # P is the principal amount (the initial amount of money)\n    # r is the annual interest rate (decimal)\n    # n is the number of times that interest is compounded per year\n    # t is the time the money is invested for, in years.\n\n    P = 6000  # Principal amount\n    A = 8029.35  # Amount after 5 years\n    t = 5  # Time in years\n    n = 1  # Interest compounded once per year\n\n    # We are trying to solve for r, the annual interest rate\n    r = sp.symbols('r')\n    \n    # Equation derived from the compound interest formula\n    equation = P * (1 + r/n) ** (n*t) - A\n\n    # Solve for r using sympy\n    solution_r = sp.solve(equation, r)\n\n    # Convert r from decimal to percentage (multiply by 100)\n    x = solution_r[0] * 100\n    return round(x.evalf(), 2)\n\nans = solution()"
    ],
    "58827db30bfe41e3aa8887dbbf840403": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    read, total_pages = symbols('read total_pages')\n\n    # Given ratio of pages read to pages not read is 1:5\n    equation1 = Eq(read, total_pages / 6)\n\n    # If she reads another 80 pages, she would have read 70% of the magazine\n    equation2 = Eq(read + 80, 0.7 * total_pages)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (read, total_pages))\n\n    return solutions[total_pages]\n\nans = solution()"
    ],
    "86483a83b8a641b3802d1bcfe3db3b99": [
        "def solution():\n    girls_rooms = 45 // 5\n    teachers_rooms = 3\n    total_rooms = girls_rooms + teachers_rooms\n    return total_rooms\n\nans = solution()"
    ],
    "96bead80155a4a23ba5e189d220a2750": [
        "def solution():\n    flour_for_15_people = 650\n    people_increase = 18\n    flour_for_18_people = (flour_for_15_people * people_increase) / 15\n    return flour_for_18_people\n\nans = solution()"
    ],
    "71c301ca64c3481fa3c4d9fbd27b071f": [
        "def solution():\n    adult_ticket_price = 6.34\n    child_ticket_price = 4.75\n    num_adults = 2\n    num_children = 3\n    total_cost = (adult_ticket_price * num_adults) + (child_ticket_price * num_children)\n    return total_cost\n\nans = solution()"
    ],
    "d6a8e2b1fe0b4d46b18689b12ef527f6": [
        "def solution():\n    # Let's denote the cost of 1 book as 'b' and the cost of 1 magazine as 'm'.\n    # Based on the question, we have two equations:\n    # 2*b + 3*m = 24.90 ... (1)\n    # b + m = 10.00      ... (2)\n\n    # We can solve these equations to find the cost of one magazine 'm'.\n    # From equation (2), we can express 'b' in terms of 'm': \n    # b = 10 - m\n\n    # Now, substitute the value of 'b' from equation (2) into equation (1):\n    # 2*(10 - m) + 3*m = 24.90\n    # 20 - 2*m + 3*m = 24.90\n    # m = 24.90 - 20\n\n    m = 24.90 - 20\n\n    # Now we have the cost of one magazine.\n    return m\n\nans = solution()"
    ],
    "c113a7ebab824fa5aff9432d5ba4e66a": [
        "def solution():\n    # Let x be the number of correct answers by CC\n    # Vivi's points: 10 points for each correct answer, hence if CC got x correct, Vivi got 10-x correct.\n    # CC's points = 10*x - 5*(10-x)\n    # Vivi's points = 10*(10-x) - 5*x\n    # Together they got 95 points: CC's points + Vivi's points = 95\n    # Vivi has 15 more points than CC: Vivi's points - CC's points = 15\n    \n    # Solving the two equations:\n    # 10x - 5(10-x) + 10(10-x) - 5x = 95\n    # 10(10-x) - 5x - (10x - 5(10-x)) = 15\n    \n    # Simplify the equations:\n    # Equation 1: 5x + 50 = 95\n    # Equation 2: 100 - 15x - 5x = 15\n    \n    # Solve the first equation for x:\n    x = (95 - 50) // 5\n    \n    # Now verify the second equation:\n    if (100 - 15*x - 5*x == 15):\n        return x\n    else:\n        # If the second equation does not hold, adjust x accordingly\n        for x in range(11):\n            if (10*x - 5*(10-x)) + (10*(10-x) - 5*x) == 95 and (10*(10-x) - 5*x) - (10*x - 5*(10-x)) == 15:\n                return x\n\nans = solution()"
    ],
    "5286b8a162984ebd83b4dc18a0895e9d": [
        "def solution():\n    mm_to_m_conversion_factor = 1000\n    ans = 7000000 / mm_to_m_conversion_factor\n    return ans\n\nans = solution()"
    ],
    "8d63b90682ef4e86a52c8d41e221e99e": [
        "def solution():\n    num_str = \"2581953752\"\n    min_sum = float('inf')  # Set initial minimum sum to infinity\n\n    # Since there are two cuts and 10 digits, there are 9 choose 2 possible ways to cut the number.\n    # Loop through all the possible places to make the first cut\n    for i in range(1, len(num_str) - 1):\n        # Loop through all the possible places to make the second cut, which is after the first cut\n        for j in range(i + 1, len(num_str)):\n            # Cut the string into three parts\n            part1 = int(num_str[:i])\n            part2 = int(num_str[i:j])\n            part3 = int(num_str[j:])\n            # Calculate the sum of the three parts\n            current_sum = part1 + part2 + part3\n            # Check if the current sum is less than the minimum sum found so far\n            if current_sum < min_sum:\n                min_sum = current_sum  # Update the minimum sum\n\n    return min_sum\n\nans = solution()"
    ],
    "982b7c2099ae4cbbbf15acf185975676": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the number of members in each club\n    science, literature, math = symbols('science literature math')\n\n    # Set up the equations based on the given ratios\n    equation1 = Eq(science / literature, 9 / 10)\n    equation2 = Eq(literature / math, 5 / 7)\n\n    # The total number of members in all clubs is 99\n    equation3 = Eq(science + literature + math, 99)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (science, literature, math))\n\n    # Calculate the difference in the number of members between math and literature clubs\n    difference = solutions[math] - solutions[literature]\n\n    return difference\n\nans = solution()"
    ],
    "41e9b6cd168c41fd92de334d68528b9e": [
        "def solution():\n    # Let's denote the two original numbers as x and y.\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n\n    # According to the problem statement, we have two equations:\n    # Equation 1: Sum of the two original numbers is 11.63.\n    equation1 = Eq(x + y, 11.63)\n\n    # Equation 2: By shifting the decimal point in one number (y as an example),\n    #              Oliver's sum is 5.87.\n    equation2 = Eq(x + y/10, 5.87)\n\n    # Solve the system of equations for x and y.\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Calculate the difference between the two numbers.\n    difference = solutions[x] - solutions[y]\n\n    # Return the difference multiplied by 100.\n    return 100 * difference\n\nans = solution()"
    ],
    "2428c63651de4a9cb4a9fd440dd72a13": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    divisor = 1\n\n    dividend = divisor * quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "e429d1f710e0443ca3e34ebd54ce1999": [
        "def solution():\n    # Number of blue, yellow, and red marbles\n    blue = 4\n    yellow = 3\n    red = 1\n\n    # Using pigeonhole principle, to guarantee 3 marbles of the same color:\n    # We can take all marbles but 2 of each color other than the one we're trying to guarantee.\n    # This would be the worst case before getting 3 marbles of the same color.\n    # Take (blue-2) + (yellow-2) because (red-2) would result in negative.\n    marbles_taken = (blue - 2) + (yellow - 2) + 1 # +1 is for the next marble which ensures 3 of the same color\n\n    return marbles_taken\n\nans = solution()"
    ],
    "a01e320335ab4dd5a4d3902f2010b2ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Melissa's current age and her mother's current age\n    melissa_now, mother_now = symbols('melissa_now mother_now')\n\n    # Given situation when Melissa was 8 years old\n    melissa_then = 8\n    mother_then = 32\n\n    # Age difference between Melissa and her mother remains constant\n    age_difference = mother_then - melissa_then\n\n    # Equation 1: Mother's age is now three times Melissa's age\n    equation1 = Eq(mother_now, 3 * melissa_now)\n    # Equation 2: Mother's current age is Melissa's current age plus the age difference\n    equation2 = Eq(mother_now, melissa_now + age_difference)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (melissa_now, mother_now))\n\n    return solutions[melissa_now]\n\nans = solution()"
    ],
    "60cc013cce3f4dc3889d6f7f58af72a5": [
        "def solution():\n    # Each side has 6 flowers, so without the corners,\n    # there are 6 - 2 = 4 flowers on each side that are not at the corners\n    flowers_per_side_excluding_corners = 6 - 2\n    \n    # Since there are 4 sides, multiply by 4\n    total_flowers_excluding_corners = flowers_per_side_excluding_corners * 4\n    \n    # Plus the 4 corner flowers\n    total_flowers = total_flowers_excluding_corners + 4\n    \n    return total_flowers\n\nans = solution()"
    ],
    "d67e4c58bf394611abfd4c9f92360478": [
        "def solution():\n    n = 48\n    factors = [i for i in range(1, n+1) if n % i == 0]\n    even_factors_count = sum(1 for factor in factors if factor % 2 == 0)\n    return even_factors_count\n\nans = solution()"
    ],
    "27557b6401534a719cdf0923343a5978": [
        "def solution():\n    original_length = 10\n    cut_lengths = [4.8, 2.73]\n\n    # Compute the length of the remaining piece\n    remaining_length = original_length - sum(cut_lengths)\n\n    # Find the longest and shortest pieces\n    longest_piece = max(cut_lengths + [remaining_length])\n    shortest_piece = min(cut_lengths + [remaining_length])\n\n    # Calculate the difference in length\n    length_difference = longest_piece - shortest_piece\n\n    return length_difference\n\nans = solution()"
    ],
    "0ee683d386944878b9a97b21d30b9512": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the price of a basketball and volleyball\n    basketball, volleyball = symbols('basketball volleyball')\n\n    # Create equations based on the problem statement\n    # 5 basketballs and 6 volleyballs cost $325\n    equation1 = Eq(5 * basketball + 6 * volleyball, 325)\n    # A basketball costs $10 more than a volleyball\n    equation2 = Eq(basketball, volleyball + 10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (basketball, volleyball))\n\n    # Return the price of a basketball\n    return solutions[basketball]\n\nans = solution()"
    ],
    "f1695ae843b54e2e815cd446c64a29f4": [
        "def solution():\n    cost_per_bottle = 2.52 / 6\n    total_cost = cost_per_bottle * 9\n    return total_cost\n\nans = solution()"
    ],
    "fa6f1ecf65574a4f92806a9db2ff7aa4": [
        "def solution():\n    total_cost = 132\n    # Since half of the remainder (1 - 1/3 = 2/3) is spent on the bag,\n    # it means the bag costs 1/2 * 2/3 = 1/3 of the original amount\n    # and the book also costs 1/3 of the original amount,\n    # so together they cost 2/3 of the original amount\n    # Let's denote the original amount of money Li Yan had as 'original_amount'\n\n    # total_cost represents 2/3 of the original amount\n    # Therefore, 1/3 of the original amount is total_cost / 2\n    one_third_of_original = total_cost / 2\n\n    # Hence, the original amount is 3 times one_third_of_original\n    original_amount = one_third_of_original * 3\n\n    return original_amount\n\nans = solution()"
    ],
    "0d0aa1e9d4534f37bbbcb05df00921eb": [
        "def solution():\n    repeated_sequence = \"1234\"\n    length_of_pattern = len(repeated_sequence)\n    \n    # Determine the complete repetitions of the sequence within the 47 digits\n    full_repetitions = 47 // length_of_pattern\n    \n    # Find the sum of the digits in the repeated sequence\n    sum_of_sequence = sum(int(digit) for digit in repeated_sequence)\n    \n    # Multiply the sum of the full sequence by the number of complete repetitions\n    total_sum = sum_of_sequence * full_repetitions\n    \n    # Handle the remaining digits\n    remaining_digits = 47 % length_of_pattern\n    for i in range(remaining_digits):\n        total_sum += int(repeated_sequence[i])\n    \n    return total_sum\n\nans = solution()"
    ],
    "e886e230e9a14129ab9efc5f51fc6eeb": [
        "def solution():\n    for correct_jack in range(26):\n        incorrect_jack = 25 - correct_jack\n        score_jack = 4 * correct_jack - 1 * incorrect_jack\n        for correct_johnson in range(correct_jack):\n            incorrect_johnson = 25 - correct_johnson\n            non_answered_johnson = incorrect_jack - incorrect_johnson\n            score_johnson = 4 * correct_johnson + 0 * non_answered_johnson - 1 * (incorrect_johnson)\n            if score_jack == 61 and score_johnson == 61:\n                return incorrect_jack\n\nans = solution()"
    ],
    "cb28d5923791411abd5c48b4c2e56055": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(10):\n            ab = 10 * a + b\n            ba = 10 * b + a\n            if 8 * ab == 3 * ba:\n                return ab\n\nans = solution()"
    ],
    "70a735430d5b4777a79bbddaf2823ef0": [
        "def solution():\n    import math\n\n    def calculate_cost(cupcakes):\n        if cupcakes <= 20:\n            return 4.50 * cupcakes + 12\n        else:\n            return (4.50 * 20 + 12) + (4.50 * 0.80 * (cupcakes - 20))\n\n    for cupcakes in range(1, 100):  # Reasonably assuming she won't order more than 100 cupcakes\n        if math.isclose(calculate_cost(cupcakes), 120, rel_tol=1e-9):\n            return cupcakes\n\nans = solution()"
    ],
    "d042bcbac05b43a89ee5aae713200f24": [
        "def solution():\n    total_pupils = 40\n    avg_all = 35\n    avg_boys = 20\n    avg_girls = 60\n\n    # Let the number of boys be x\n    # Then, the number of girls will be (total_pupils - x)\n    # The total number of pencils for boys will be avg_boys * x\n    # The total number of pencils for girls will be avg_girls * (total_pupils - x)\n    # According to the problem, average pencils owned by all the pupils is avg_all\n\n    # Setting up the equation:\n    # (avg_boys * x + avg_girls * (total_pupils - x)) / total_pupils = avg_all\n\n    # Solving for x (number of boys)\n    x = (avg_all * total_pupils - avg_girls * total_pupils) / (avg_boys - avg_girls)\n\n    return int(x)\n\nans = solution()"
    ],
    "e42cc648c3f649cf90ee902c4be9e740": [
        "def solution():\n    # Given the equation 15/□ = 1/3, we can solve for the box (denoted here as \"box\")\n    # by cross-multiplication:\n    box = 15 * 3\n    return box\n\nans = solution()"
    ],
    "2760fd70b00d4bc1bbb33c4a1176ce49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the price of one pig and one goat\n    pig, goat = symbols('pig goat')\n\n    # We have two equations based on the given information\n    equation1 = Eq(3 * pig + 1 * goat, 440)\n    equation2 = Eq(1 * pig + 2 * goats, 280)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (pig, goat))\n\n    # Calculate the cost for 5 pigs and 5 goats\n    total_cost = 5 * solutions[pig] + 5 * solutions[goat]\n\n    return total_cost\n\nans = solution()"
    ],
    "8d9f841035384ec78cd71c7adbc51cf2": [
        "def solution():\n    total_pounds = 1.28\n    total_pence = 57\n\n    # Since there are 100 pence in a pound, we convert 57 pence to pounds and add it to 1.28 pounds\n    total = total_pounds + (total_pence / 100)\n    \n    return total\n\nans = solution()"
    ],
    "1f17462588b24d4d87e7ac26ce8e297e": [
        "def solution():\n    for i in range(10000, 100000):\n        if int(str(i) + '1') == 3 * int('1' + str(i)):\n            return i\n\nans = solution()"
    ],
    "f29bca0ca85649a0aa278151d40c1060": [
        "def solution():\n    people_in_front = 9\n    position_from_back = 12\n    total_people = people_in_front + position_from_back - 1  # subtract 1 because Rose is counted twice\n    return total_people\n\nans = solution()"
    ],
    "5b2be8c5931d445e95f69e4a169b6320": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A = symbols('A')\n    eq = Eq(2 + 1 / (2 + 1 / (1 + 1 / (2 + 1 / A))), 64/27)\n    sol = solve(eq, A)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "ad987dbb1afa406d877032905dfd4b9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lazy_time = symbols('lazy_time')\n\n    # Energetic one's rate\n    energetic_rate = 1/10\n\n    # Combined rate for both decorators\n    combined_rate = 1/6\n\n    # Equation for the lazy one's rate\n    equation = Eq(1/lazy_time + energetic_rate, combined_rate)\n\n    # Solving for the lazy one's time\n    lazy_time_solution = solve(equation, lazy_time)\n\n    return lazy_time_solution[0]\n\nans = solution()"
    ],
    "c2a4472f1dcc4adaa002fb9b0cdbc480": [
        "def solution():\n    john_age_now = 8\n    grandmother_age_now = john_age_now + 42\n    total_age_in_2_years = (john_age_now + 2) + (grandmother_age_now + 2)\n    return total_age_in_2_years\n\nans = solution()"
    ],
    "af15f396b0a9452e90cd92024ee3655d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    # Defining the symbol for the unknown number\n    x = symbols('x')\n\n    # John thought of a number (x), added forty-five and then divided by three\n    left_side = (x + 45) / 3\n\n    # The result was the same as when multiplying the original number by two\n    right_side = 2 * x\n\n    # Creating the equation\n    equation = Eq(left_side, right_side)\n\n    # Solving the equation for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c873b5b5ac9541dcb53c627cbe9f99fb": [
        "def solution():\n    result = 52\n    doubled_number = result - 10\n    original_number = doubled_number / 2\n    return original_number\n\nans = solution()"
    ],
    "164b7924a0ed4adebd005bf7b479d61e": [
        "def solution():\n    num_terms = 50\n    first_term = 1\n    last_term = 50\n\n    ans = (num_terms * (first_term + last_term)) // 2\n\n    return ans\n\nans = solution()"
    ],
    "d2baf801099b456eb142be13a3d0ee04": [
        "def solution():\n    ans = -2 + 9\n    return ans\n\nans = solution()"
    ],
    "6563b1695a224e99b4db826a159ebb3f": [
        "def solution():\n    pages_first_day = 40\n    fraction_of_whole = 1 / 5\n\n    total_pages = pages_first_day / fraction_of_whole\n\n    return int(total_pages)\n\nans = solution()"
    ],
    "1b6c26ceb8bb4bedb8eb52f798a8d704": [
        "def solution():\n    # In the worst case scenario, we might draw all marbles of one color before getting a marble of a different color.\n    # That would be 12 red marbles.\n    # Then we might draw all marbles of another color before getting a different one.\n    # That would be 9 blue marbles. At this point we have only two colors.\n    # Then we draw all marbles of the third color to make sure we have three different colors.\n    # That would be 8 yellow marbles.\n    # Now, no matter which color of marble we draw, we will have the fourth color.\n    # So we only need to draw one more marble to ensure we have all four colors.\n    ans = 12 + 9 + 8 + 1\n    return ans\n\nans = solution()"
    ],
    "48f2b82e698b40afaaebc96c59f848cf": [
        "def solution():\n    count = 0\n    # Since each brother must have at least two books, we subtract 6 from the total \n    # (giving 2 books to each beforehand) and distribute the remaining 4 books.\n    remaining_books = 10 - 2 * 3\n    \n    # Now we will distribute the remaining 4 books among the 3 brothers.\n    for x1 in range(remaining_books + 1):     # First brother can get from 0 to 4 books.\n        for x2 in range(remaining_books - x1 + 1): # Second brother can get from 0 to remaining books after first brother's share.\n            x3 = remaining_books - x1 - x2     # Third brother gets the rest.\n            if x1 >= 0 and x2 >= 0 and x3 >= 0: # Each brother has at least two books is already ensured.\n                count += 1\n    \n    return count\n\nans = solution()"
    ],
    "c07d7632fe45424588ee9b8ac2d2fccf": [
        "def solution():\n    return 131 - (31 - 10)\n\nans = solution()"
    ],
    "5c64c7efc74e45c9b22395c64f0188f1": [
        "def solution():\n    for hundreds in range(1, 10): # Since it's a 3-digit number, hundreds place can't be 0\n        for ones in range(10):   # ones place can be anything from 0 to 9\n            tens = 2 * hundreds  # tens is twice the hundreds\n            if tens > 9:         # tens place can't be more than 9\n                continue\n            if (hundreds + tens + ones == 15) and (hundreds == ones + 1):\n                return hundreds * 100 + tens * 10 + ones\n\nans = solution()"
    ],
    "7607c9c8b07e482d9e79d3a708db918f": [
        "def solution():\n    # The two-digit numbers with unit digit 6 start from 16 and end at 96\n    first_number_with_unit_6 = 16\n    last_number_with_unit_6 = 96\n\n    # All numbers that have unit digit 6 are 10 units apart (e.g., 16, 26, 36, ...)\n    step = 10\n\n    # Calculate the number of two-digit numbers with unit digit 6\n    ans = (last_number_with_unit_6 - first_number_with_unit_6) // step + 1\n\n    return ans\n\nans = solution()"
    ],
    "2dfebe97055d446791ecaff5fcc836bf": [
        "def solution():\n    last_purchase = 105.6 - 14.4\n    total_spent = 105.6 + last_purchase\n    return total_spent\n\nans = solution()"
    ],
    "fcb8fb796c2e414aa7381ebb608de85a": [
        "def solution():\n    return 73 * 42\n\nans = solution()"
    ],
    "902e4b7c9173456ebdf391276d04a873": [
        "def solution():\n    # Since there are 19 occurrences of digit '5' followed by one digit (the square) and then followed by 19 occurrences of digit '9', \n    # we can think of this number as (5 * 10^21 + 9) * (10^19-1) / (10-1) + x * 10^19 where x is the digit in the square\n    # Simplifying this we get 5 * (10^21) + 9 * (10^19-1)/(10-1) + x * 10^19\n    # Finding this modulo 7, we are looking for the value of x that makes the entire expression divisible by 7\n    \n    # 10^21 mod 7 can be reduced using Fermat's little theorem, where 10^6 is congruent to 1 mod 7, therefore\n    # (10^6)^3 * 10^3 is congruent to 10^3 mod 7 which is -1 mod 7 since 1000 mod 7 is -1\n    # Similarly, 10^19 is congruent to (10^6)^3 * 10^1 which is 10 mod 7.\n  \n    sum_5s = (-1 * 5) % 7\n    sum_9s = (9 * (10 - 1)) % 7\n    sum_without_square = (sum_5s + sum_9s) % 7\n    \n    # Trying each digit for the square to see which one makes the number divisible by 7\n    for x in range(10):\n        if (sum_without_square + (x * (10 % 7))) % 7 == 0:\n            return x\n            \n    return None  # If the digit is not found (should not happen with correct logic)\n\nans = solution()"
    ],
    "f7ea1bce2ab643be811669ebb19981e8": [
        "def solution():\n    a, b = 3, 10\n    for _ in range(2021):\n        a, b = b, a + b\n    ans = b % 3\n    return ans\n\nans = solution()"
    ],
    "0d39e6b35f684ae79df0144ef9a461d4": [
        "def solution():\n    ans = 0.7 / 100\n    return ans\n\nans = solution()"
    ],
    "3d72ae69fbf944028dbf7faeb677cf3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n\n    first_number = 208 - magic_number\n    second_number = 136 - magic_number\n\n    equation = Eq(first_number, 9 * second_number)\n\n    magic_number_value = solve(equation, magic_number)\n\n    return magic_number_value[0]\n\nans = solution()"
    ],
    "39dc0e644ff04e4b8de2705b050243b2": [
        "def solution():\n    jason_books_initially = 30\n    books_given_to_anthea = 4\n    \n    jason_books_after_giving = jason_books_initially - books_given_to_anthea\n    anthea_books_after_receiving = jason_books_after_giving\n    \n    anthea_books_initially = anthea_books_after_receiving - books_given_to_anthea\n    difference_between_jason_and_anthea_initially = jason_books_initially - anthea_books_initially\n    \n    return difference_between_jason_and_anthea_initially\n\nans = solution()"
    ],
    "b6d78733f8874f2bbfe35bd591c415ac": [
        "def solution():\n    from sympy import divisors\n    ans = len(divisors(840))\n    return ans\n\nans = solution()"
    ],
    "b0b3f16fb74d472d8584aeb80b4a4f84": [
        "def solution():\n    # Using equations to solve the problem:\n    # Let x be the number of students, and y be the total number of gifts.\n    # If each student is given 5 gifts, there will be 3 left: y = 5x + 3\n    # If each student is given 4 gifts, there will be 9 left: y = 4x + 9\n    # Hence, 5x + 3 = 4x + 9 => x = 9 - 3 = 6 (number of students)\n    return 6\n\nans = solution()"
    ],
    "4abc9fccc13742938eb625a6b470a258": [
        "def solution():\n    ans = 349 * 7\n    return ans\n\nans = solution()"
    ],
    "9778a46322434ec1b4d042645d3fe72c": [
        "def solution():\n    box_of_chocolates = 7.85\n    bar_of_chocolate_with_hazelnut = 1.83\n    total_cost = box_of_chocolates + 2 * bar_of_chocolate_with_hazelnut\n    amount_paid = 20\n\n    change = amount_paid - total_cost\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "008ec416ca584514bc4c64610a10f70c": [
        "def solution():\n    from math import factorial\n\n    # Lily and her mother's positions are fixed at the ends, so we're only arranging the other three family members\n    num_people_to_arrange = 3\n    \n    # Number of different ways to arrange n different items is n factorial (n!)\n    ans = factorial(num_people_to_arrange)\n    \n    return ans\n\nans = solution()"
    ],
    "d920f123f70448728a0dafe2a25fdf8d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the amounts each person has\n    alan, bella, chloe = symbols('alan bella chloe')\n\n    # Equation based on the ratio of Alan and Bella's money\n    equation1 = Eq(alan / bella, 4 / 3)\n\n    # Equation based on the information that Alan has £20 more than Chloe\n    equation2 = Eq(alan, chloe + 20)\n\n    # Equation based on the total money they have together\n    equation3 = Eq(alan + bella + chloe, 200)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (alan, bella, chloe))\n\n    # Extract the solution for Chloe's amount\n    return solutions[chloe]\n\nans = solution()"
    ],
    "56e3afa3b21b4b4d94f49f7e28b2d801": [
        "def solution():\n    first_term = 7\n    last_term = 99\n    common_difference = 4\n\n    # Calculate number of terms in the sequence\n    num_terms = ((last_term - first_term) // common_difference) + 1\n\n    # Calculate sum of the arithmetic sequence\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "d648707a7707454fba27679a28405452": [
        "def solution():\n    for i in range(10, 100):\n        if i % 5 == 4 and i % 7 == 4:\n            return i\n\nans = solution()"
    ],
    "d56f06764b62432b87f7f6c8d24937fd": [
        "def solution():\n    return 1.28 - 0.57\n\nans = solution()"
    ],
    "9c5b7505e33a431cbdc19a2c3eb56463": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_visitors = symbols('total_visitors')\n\n    children = (3/5) * total_visitors\n    remaining = total_visitors - children\n    men = (1/2) * remaining\n    equation = Eq(children, men + 140)\n\n    visitors_count = solve(equation, total_visitors)\n\n    return visitors_count[0]\n\nans = solution()"
    ],
    "e681c565553246ed822a81c5b707ec85": [
        "from itertools import permutations\n\ndef solution():\n    digits = set(range(1, 9)) # Digits 1 to 8\n    answers = []\n\n    for perm in permutations(digits, 2):\n        x, y = perm\n        if x * 2 == y:  # Ones digit is twice the tens digit (smallest number)\n            answers.append((x, y))\n\n    for perm in permutations(digits - set(answers[0]), 2):\n        x, y = perm\n        if x + y == 9:  # Sum of digits is 9 (largest number)\n            answers.append((x, y))\n\n    for perm in permutations(digits - set(answers[0]) - set(answers[1]), 2):\n        x, y = perm\n        if x - y == 5:  # Tens is 5 more than ones (second largest number)\n            answers.append((x, y))\n\n    odd_count = 0\n    for perm in permutations(digits - set(answers[0]) - set(answers[1]) - set(answers[2]), 2):\n        x, y = perm\n        if (x * 10 + y) % 2 == 1:  # Only one odd number among the four\n            odd_count += 1\n            if odd_count == 1:\n                answers.append((x, y))\n\n    answers.sort(key=lambda x: (x[0], x[1]))  # Sort to find the second smallest\n    second_smallest = answers[1][0] * 10 + answers[1][1]\n\n    return second_smallest\n\nans = solution()"
    ],
    "355c1761cec84abd8c37e4d0cef83961": [
        "def solution():\n    # The total of the first three numbers\n    total_three_numbers = 120 * 3\n    # The total of the four numbers\n    total_four_numbers = 150 * 4\n    # The fourth number\n    fourth_number = total_four_numbers - total_three_numbers\n    return fourth_number\n\nans = solution()"
    ],
    "e2a5a025a0174c48a9cbcfecee7eec99": [
        "def solution():\n    n = 15\n    start = 5\n    sum_of_squares = sum(i**2 for i in range(start, n+1))\n    \n    return sum_of_squares\n\nans = solution()"
    ],
    "bab761c62984431592b8726b89f2c00c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, peter = symbols('sam peter')\n\n    # Sam had 40 stickers more than Peter originally\n    original_condition = Eq(sam, peter + 40)\n\n    # Sam gives 20% of his stickers to Peter\n    sam_gives = sam - (sam * 20 / 100)\n    peter_receives = peter + (sam * 20 / 100)\n\n    # Peter gives 25% of his new total to Sam\n    peter_gives = peter_receives - (peter_receives * 25 / 100)\n    sam_receives = sam_gives + (peter_receives * 25 / 100)\n\n    # In the end, Sam has 96 stickers more than Peter\n    final_condition = Eq(sam_receives, peter_gives + 96)\n\n    # Solve the system of equations\n    solutions = solve((original_condition, final_condition), (sam, peter))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "a377ef0412d7428190675053dcb17b39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_money = symbols('total_money')\n    money_after_highlighters = (6/11) * total_money - 5\n    money_after_pens = (3/10) * (total_money - money_after_highlighters) - 12\n    equation = Eq(money_after_pens, 30)\n    \n    initial_money = solve(equation, total_money)\n    \n    return initial_money[0]\n\nans = solution()"
    ],
    "e03fffbc9560433d92099ac8fe50d88b": [
        "def solution():\n    ans = 543 * 6\n    return ans\n\nans = solution()"
    ],
    "98eef6de38874e70b51aaed908dca418": [
        "def solution():\n    ans = (26 + (12 + 6) * 3) / 4\n    return ans\n\nans = solution()"
    ],
    "c49ccde6fc4248779aaf8093faa8ad18": [
        "def solution():\n    # Let x be the number of correct answers and y be the number of wrong answers.\n    # Since there are 20 questions in total, x + y = 20\n    # For each correct answer, Olivia gets 5 points, for each wrong answer she loses 2 points\n    # The total points are 5x - 2y = 51\n\n    # Importing sympy library to use its equation solving functionality\n    from sympy import symbols, Eq, solve\n\n    # Defining symbols for the two unknowns\n    x, y = symbols('x y')\n\n    # Setting up the two equations based on the problem statement\n    equation1 = Eq(x + y, 20)\n    equation2 = Eq(5 * x - 2 * y, 51)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "7b32265def7a4762b0e99a9bf7936e79": [
        "def solution():\n    count = 0\n    for i in range(1, 41):\n        if i % 3 == 0 and i % 4 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a1d04f9a8f8d4d059eb87e3597859b60": [
        "def solution():\n    hook_time = 20\n    lily_time = hook_time - 5\n    return lily_time\n\nans = solution()"
    ],
    "f15fa89c42d94b389e9ef9de02718b7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for Sally's and Gillian's ages\n    sally, gillian = symbols('sally gillian')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(sally/gillian, 2/7)\n    equation2 = Eq((sally + 15)/(gillian + 15), 1/2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sally, gillian))\n\n    return solutions[sally]\n\nans = solution()"
    ],
    "2c7e97e51b1c44f49d2f4e7c79fde704": [
        "def solution():\n    incorrect_subtrahend = 70\n    incorrect_result = 30\n    actual_subtrahend = 75\n\n    # She originally subtracted 70 to get 30: minuend - 70 = 30\n    # Thus, the minuend is 30 + 70:\n    minuend = incorrect_result + incorrect_subtrahend\n\n    # The correct result is the minuend subtracting the actual subtrahend (75):\n    correct_result = minuend - actual_subtrahend\n\n    return correct_result\n\nans = solution()"
    ],
    "3061e5b8281f449bae77026f2740418a": [
        "def solution():\n    apples_per_kg = 9\n    apples_used_per_cake = 4\n    total_kg_of_apples = 8\n    total_apples_used = total_kg_of_apples * apples_per_kg\n    number_of_cakes = total_apples_used // apples_used_per_cake\n    return number_of_cakes\n\nans = solution()"
    ],
    "d7682b78c94a49209da98614f89b4b03": [
        "def solution():\n    result = (35 / 45) * 9\n    return int(result)\n\nans = solution()"
    ],
    "a91b6b3ee1ba49258ef75384834b6006": [
        "def solution():\n    result = (3/8) * 32\n    return result\n\nans = solution()"
    ],
    "48863edbbbd648d296639b0ac7b6a0a5": [
        "def solution():\n    ans = 198 + 67 - 25\n    return ans\n\nans = solution()"
    ],
    "681b53f5f3ca46d192bdc4d5538dc3f9": [
        "def solution():\n    distance_apart = 1.5\n    number_of_seeds = 12\n\n    # The distance between 12 seeds planted along the circumference\n    # is equal to 11 intervals (since it's a circular garden)\n    intervals = number_of_seeds - 1\n\n    # To find the total length of the intervals\n    total_length = distance_apart * intervals\n\n    # Since the 12th seed completes the circle, we add one more interval\n    circumference = total_length + distance_apart\n\n    return circumference\n\nans = solution()"
    ],
    "e3c684818e824d38b568f73a39a2e8a3": [
        "def solution():\n    # Initial number of pieces\n    initial_pieces = 10\n    # Final number of pieces\n    final_pieces = 16\n\n    # Number of pieces of paper cut into three parts\n    # Each cut paper adds 2 more pieces (3-1 = 2)\n    pieces_cut = (final_pieces - initial_pieces) // 2\n\n    return pieces_cut\n\nans = solution()"
    ],
    "51f55ad6ea4b438da0c7c862bf88d5ca": [
        "def solution():\n    total_boys = 12\n    total_girls = 8\n    average_boys = 10\n    average_all = 14\n\n    total_score_all = (total_boys + total_girls) * average_all\n    total_score_boys = total_boys * average_boys\n    total_score_girls = total_score_all - total_score_boys\n    \n    average_girls = total_score_girls / total_girls\n    return average_girls\n\nans = solution()"
    ],
    "13a8b45061f4450e89e1c253f4020c18": [
        "def solution():\n    # Let's denote the side of the smaller square as n\n    # Therefore, the number of students in the smaller square is n^2\n    # And the number of students in the larger square is (n+1)^2\n    # According to the problem, we have the following two equations:\n    # n^2 + 9 = the number of students in the smaller square array\n    # (n+1)^2 = n^2 + 2n + 1 = the number of students in the larger square array + 16\n    # By setting up these equalities:\n    # n^2 + 2n + 1 = n^2 + 9 + 16\n    # We can solve for n:\n    \n    n = 1\n    while True:\n        if (n+1)**2 == n**2 + 9 + 16:\n            break\n        n += 1\n    \n    # The number of students in Year 3 is the number of students in the smaller\n    # square plus the surplus.\n    num_students = n**2 + 9\n    return num_students\n\nans = solution()"
    ],
    "18a91f2a3e4b4cc6a04adbcfd3069472": [
        "def solution():\n    # Since each of the 5 envelopes were divided equally, each contains 50/5 postcards\n    postcards_per_envelope_initially = 50 / 5\n\n    # Let the number of new postcards given be n\n    # Now there are two more envelopes, so we have a total of 5 + 2 = 7 envelopes\n    envelopes_total = 7\n\n    # Since every envelope must contain the same number of postcards\n    # Total number of postcards after receiving new ones is n + 50\n    # And each of the 7 envelopes should contain (n + 50) / 7 postcards\n    # postcards_per_envelope_initially must be equal to the new distribution\n    postcards_per_envelope_after = (50 + 50) / 7\n\n    # So we have postcards_per_envelope_initially equals postcards_per_envelope_after\n    n = envelopes_total * postcards_per_envelope_initially - 50\n\n    # Therefore, the total number of postcards is the initial 50 plus n\n    total_postcards = 50 + n\n\n    return int(total_postcards)\n\nans = solution()"
    ],
    "d7759b0612fe43e8a7e3a06d59283855": [
        "def solution():\n    cost_per_100g = 0.80\n    weight_needed = 250\n    cost_per_gram = cost_per_100g / 100\n    total_cost = cost_per_gram * weight_needed\n    return total_cost / 100  # Convert pence to pounds\n\nans = solution()"
    ],
    "3443aaa6a82a4aa1acae9f85d2a28ffe": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Let x be the total number of cookies baked by Jolie\n    x = symbols('x')\n\n    # According to the problem\n    # The number of cookies thrown away: 3/5 * x\n    # The number of cookies remaining: 2/5 * x\n    # The number of cookies sold: 3/4 * 2/5 * x = 3/10 * x\n    # The problem states that the number of cookies burned is 42 more than the number sold:\n    # 3/5 * x = 3/10 * x + 42\n\n    # Equation derived from the problem statement\n    equation = (3/5) * x - ((3/10) * x + 42)\n\n    # Solve the equation for x\n    solution_dict = solve(equation, x)\n    \n    return solution_dict[0]\n\nans = solution()"
    ],
    "c0dd58bb208c4720a65f8a3da63ebc53": [
        "def solution():\n    # Since the coins are in pairs and the total change is £2.50,\n    # the possibilities are limited to combinations of pairs \n    # that add up to £2.50. In the UK, common coins are \n    # 1p, 2p, 5p, 10p, 20p, 50p, £1 and £2.\n    # We will look for the smallest value coin, so we start with the smallest denominations.\n\n    coins = [200, 100, 50, 20, 10, 5, 2, 1]  # coin values in pence\n\n    for coin in coins:\n        # Since we have pairs of each coin, the amount for each denomination\n        # must be divisible by 2.\n        if (250 - 2 * coin) % (2 * coin) == 0:\n            return coin / 100  # Convert pence back to pounds\n\nans = solution()"
    ],
    "8cf2ad99816645c8ba0e8566d2059b61": [
        "def solution():\n    numerator1 = (-3.2) - (0.2)**2\n    denominator1 = -1.8\n    numerator2 = 41.08 - (-2/5)**2\n    denominator2 = 3 + (-2)**3\n\n    term1 = numerator1 / denominator1\n    term2 = numerator2 / denominator2\n\n    ans = term1 - term2\n    return ans\n\nans = solution()"
    ],
    "d6d6b3b23b51458482c4922539d3c5df": [
        "def solution():\n    ans = 50 - 21 - 19\n    return ans\n\nans = solution()"
    ],
    "5477bd06248540239e46216795757a4a": [
        "def solution():\n    score = 14\n    total = 20\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "2324e551139441b59d8da8e39e7bf259": [
        "def solution():\n    for y in range(10):\n        if (1070 + y) % 6 == 0:\n            return y\n\nans = solution()"
    ],
    "03ff37f2d8384e4285c23e9e15eec692": [
        "def solution():\n    total_apples = 27\n    capacity = 4\n\n    num_containers = -(-total_apples // capacity)\n\n    return num_containers\n\nans = solution()"
    ],
    "7b61fa01ec374c2b83c5f8a39d04e91c": [
        "def solution():\n    for num in range(10, 100):\n        if num % 4 == 1 and num % 7 == 1:\n            return num\n\nans = solution()"
    ],
    "a5661c18fea04c948a12554694325f0d": [
        "def solution():\n    # Iterate over possible special numbers\n    for num in range(10, 100000): # Assume a reasonable upper limit for the special number\n        if str(num)[-1] == '9':  # Check if the last digit is 9\n            new_num = int(str(num)[-1] + str(num)[:-1])  # Move last digit to front\n            if new_num == 4 * num:  # Check if the new number is four times the original number\n                return num  # Return the special number\n\nans = solution()"
    ],
    "90c447fcc0de4e5a9b771920095757aa": [
        "def solution():\n    sugar = 70\n    water = 490\n    total_solution = sugar + water\n    concentration = (sugar / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "b5485eaf0ddf46c89dd4082df078ffbf": [
        "def solution():\n    n = (36 / 3) / 4\n    return n\n\nans = solution()"
    ],
    "93e28acfc00d445394efdabe5a2da3c8": [
        "def solution():\n    from math import factorial\n\n    # There are 6 students in total.\n    # Laura must stand in the front, so there are 5! ways to arrange the remaining 5 students.\n    ways_without_considering_rita = factorial(5)\n\n    # Rita cannot stand at the end, so there are 5 possible positions for her (not counting the last one).\n    # After placing Rita, the remaining 4 students can be arranged in 4! ways.\n    ways_for_rita = 4 * factorial(4)\n\n    # The total number of ways is the number of ways without considering Rita's restriction\n    # multiplied by the number of ways to place Rita with her restriction.\n    ans = ways_without_considering_rita * ways_for_rita\n\n    return ans\n\nans = solution()"
    ],
    "2bf4015e0be3437da65611461a6f01c5": [
        "def solution():\n    a = 4\n    b = 7\n    result = (a + b) * a\n    return result\n\nans = solution()"
    ],
    "c8ffb29e933649f1a14001292da6814e": [
        "def solution():\n    return 53 * 9\n\nans = solution()"
    ],
    "3d94d3aa90b542049e493d4ab7538dea": [
        "def solution():\n    # Given information\n    number_of_apples_sold = 88\n    fraction_sold = 4 / 7\n\n    # Calculate the total number of apples brought today\n    total_apples_brought = number_of_apples_sold / fraction_sold\n\n    return int(total_apples_brought)\n\nans = solution()"
    ],
    "0f16879a0bec4f9fb882203fb6a75cef": [
        "def solution():\n    regular_price = 120\n    discount_percentage = 50\n    additional_discount_percentage = 20\n    number_of_items = 8\n    \n    # Apply the initial discount\n    discounted_price = (100 - discount_percentage) / 100 * regular_price\n    \n    # Check if Mr. Tan is eligible for the additional discount\n    if number_of_items >= 5:\n        # Apply the additional discount\n        final_price = (100 - additional_discount_percentage) / 100 * discounted_price\n    else:\n        final_price = discounted_price\n        \n    return final_price\n\nans = solution()"
    ],
    "799dbcfeda0a40a3a052a9aed029df33": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "90d9980aee5c463cad10072163e15658": [
        "def solution():\n    # Let d be the total distance between town A and town B\n    # If Jerry has traveled three-sevenths of the distance, then Kevin has traveled four-sevenths of it\n    # Speed of Kevin = 80 mph\n    # In each hour, Jerry travels 2/5 of the distance that Kevin travels\n    # This means that Jerry's speed is 2/5 of Kevin's speed, which is 2/5 * 80 = 32 mph\n    # Since they meet when Jerry has traveled three-sevenths of the distance,\n    # the ratio of the speeds of Jerry and Kevin must be equal to the inverse ratio of the distances\n    # they covered when they met, i.e., Jerry_speed/Kevin_speed = Kevin_distance/Jerry_distance\n    # Thus 32/80 = (4/7)d / (3/7)d\n    # 32/80 = 4/3\n    # d = 80 * 3/4 * 7/3\n    # Simplifying the equation to find d\n\n    d = 80 * (3/4) * (7/3)\n\n    return d\n\nans = solution()"
    ],
    "bac4be7824ee43909d38294e95af5558": [
        "def solution():\n    ans = 42 / 10\n    return ans\n\nans = solution()"
    ],
    "695197b7d2474faba84b6999f62c3332": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    singapore_departure = datetime(2023, 8, 24, 5, 0)\n    london_arrival = datetime(2023, 8, 24, 11, 0)\n    time_difference = timedelta(hours=7)\n\n    singapore_arrival = london_arrival + time_difference\n    flight_duration = singapore_arrival - singapore_departure\n\n    return flight_duration.total_seconds() / 3600\n\nans = solution()"
    ],
    "ca71d8deb6874a48b997dfa4946cf66c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys = symbols('boys')\n    girls = 40 - boys\n    \n    total_pencils_avg = 35\n    boys_avg = 20\n    girls_avg = 60\n    \n    total_pencils = total_pencils_avg * 40\n    total_pencils_by_boys = boys * boys_avg\n    total_pencils_by_girls = girls * girls_avg\n\n    equation = Eq(total_pencils, total_pencils_by_boys + total_pencils_by_girls)\n    \n    solutions = solve(equation, boys)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "e15d4768dc4c4072857f5a57de71a7fd": [
        "def solution():\n    # The probability Sally wins one game and loses the other\n    # P(Win first game and lose second game) + P(Lose first game and win second game)\n    \n    # Probability of winning the first game and losing the second game\n    win_lose = 0.3 * (1 - 0.3 - 0.1)\n\n    # Probability of losing the first game and winning the second game\n    lose_win = (1 - 0.3 - 0.1) * 0.3\n\n    # Adding the two probabilities gives us the final answer\n    ans = win_lose + lose_win\n    \n    return ans\n\nans = solution()"
    ],
    "1704b8a5c6f542c3a689bc27fdeec9dd": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "6a26a1f4961b42cda05e71749b6db36e": [
        "def solution():\n    lollipops_4 = 32  # Leftover lollipops when putting 4 in each box\n    lollipops_7_last_box = 3  # Lollipops in the last box when putting 7 in each box\n\n    # Since we don't know the exact number of lollipops, we'll start checking from a number that's divisible by 7 and gives 3 as remainder\n    # We also know that it should give 32 as a remainder when divided by 4\n    # We will keep adding 7 to this number until we find a match for both conditions\n    lollipops = lollipops_7_last_box\n    while True:\n        if lollipops % 4 == lollipops_4:\n            break\n        lollipops += 7\n\n    ans = lollipops\n    return ans\n\nans = solution()"
    ],
    "f23477aaae354680a318e24f3cc005a7": [
        "def solution():\n    decimal = str(1 / 13)[2:]  # convert 1/13 to decimal and remove '0.'\n    period = len(decimal)  # period length of the recurring cycle\n    digit_index = (2012 - 1) % period  # get the index of the 2012th digit in the cycle\n    return int(decimal[digit_index])  # return the digit at the computed index\n\nans = solution()"
    ],
    "23f30d5016a749f989d2709b4e2a66a8": [
        "def solution():\n    count = 0\n    for i in range(10, 100):  # All 2-digit numbers\n        if (i // 10 + i % 10) % 5 == 0:  # Sum of digits is a multiple of 5\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a6f1656bdca94cb5bb2e8feecf11199a": [
        "def solution():\n    # The problem states that all three numbers give the same remainder when divided by D.\n    # Therefore, the differences between the numbers must be multiples of D.\n    diff1 = 2377 - 2010\n    diff2 = 3111 - 2377\n    diff3 = 3111 - 2010\n\n    # To find the largest possible D, we need to find the greatest common divisor (GCD) of these differences.\n    from math import gcd\n    gcd1 = gcd(diff1, diff2)\n    gcd_final = gcd(gcd1, diff3)\n\n    # The largest possible value of D is gcd_final, and since they all give the same remainder R when divided by D, \n    # we can find R by computing the remainder of one of the numbers divided by gcd_final.\n    R = 2010 % gcd_final\n    # The largest possible value of D + R is the sum of gcd_final and R.\n    return gcd_final + R\n\nans = solution()"
    ],
    "86efdba907a74bacbc9b69da4825ce61": [
        "def solution():\n    a = 4\n    b = 7\n    ans = a * 3 + b * 4\n    return ans\n\nans = solution()"
    ],
    "770c05d97a024fdbaf944f8e7f240d9f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2 * x - 2), 30 - 3 * x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5500f21bc74e4e09974c72edd6ba504d": [
        "def solution():\n    blue_marbles = 72\n    red_marbles = (5 / 6) * blue_marbles\n    green_marbles = red_marbles / 2\n    total_marbles = blue_marbles + red_marbles + green_marbles\n    return int(total_marbles)\n\nans = solution()"
    ],
    "2ad497194d6f450abccaef3b55d6f58f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eddi, wiya = symbols('eddi wiya')\n\n    # Before Eddi gave 4 cards to Wiya\n    equation1 = Eq(eddi/wiya, 8/7)\n    \n    # After Eddi gave 4 cards to Wiya\n    equation2 = Eq((eddi-4)/(wiya+4), 18/17)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (eddi, wiya))\n\n    return solutions[eddi]\n\nans = solution()"
    ],
    "8a86b5d67c0c44e89925084668201394": [
        "from fractions import Fraction\nfrom decimal import Decimal\n\ndef solution():\n    # Define the numbers as Fractions and Decimals\n    num1 = Fraction(2017) + Fraction(7, 8)\n    num2 = Fraction(3) + Fraction(2, 3)\n    num3 = Decimal('2016.875')\n    num4 = Fraction(11, 3)\n    num5 = Fraction(2017) + Fraction(1, 3)\n    num6 = Decimal('2016.875')\n    num7 = 17\n    num8 = Fraction(3) + Fraction(23, 32)\n\n    # Perform the calculations step-by-step\n    numerator = (num1 * num2) - (num3 * num4)\n    denominator = (num5 - num6) * num7\n    \n    # Calculate the result of the complex fraction\n    complex_fraction_result = numerator / denominator\n    \n    # Multiply the result by num8\n    ans = complex_fraction_result * num8\n    \n    # Convert to a float for the final result\n    return float(ans)\n\nans = solution()"
    ],
    "2c92243cffd64756b422d36fd5a66424": [
        "def solution():\n    total_length = 13.2\n    piece1 = 5.3\n    piece2 = 3.8\n    piece3 = total_length - (piece1 + piece2)\n    return piece3\n\nans = solution()"
    ],
    "61eccb915ca741c7b21a213b89915b76": [
        "def solution():\n    # Upper bound for A, B and C based on their sum\n    max_value = 31\n    max_product = 0\n    \n    # Iterate through all possible combinations of A, B and C\n    for A in range(1, max_value):\n        for B in range(1, max_value - A):\n            C = max_value - A - B\n            # Calculate the product of A, B and C\n            product = A * B * C\n            # Update max_product if current product is greater\n            if product > max_product:\n                max_product = product\n    \n    return max_product\n\nans = solution()"
    ],
    "cf1c9e5f45354fe48f3b0685d1e60dbe": [
        "def solution():\n    return 5.221 + 5.8\n\nans = solution()"
    ],
    "1bf11d4ba9fe405c8767bb70997fd945": [
        "def solution():\n    rabbit_speed = 330  # m/min\n    turtle_speed = 30   # m/min\n    race_distance = 6990  # total race distance in meters\n    \n    # After 10 minutes of running\n    rabbit_distance_initial = rabbit_speed * 10 \n    turtle_distance_initial = turtle_speed * 10 \n    \n    # Rabbit sleeps for 215 minutes\n    rabbit_sleep_time = 215 # minutes\n    \n    # Turtle's distance when rabbit wakes up\n    turtle_distance_after_sleep = turtle_distance_initial + turtle_speed * rabbit_sleep_time\n    \n    # Time left for rabbit to finish after waking up\n    rabbit_time_to_finish = (race_distance - rabbit_distance_initial) / rabbit_speed\n    \n    # Time left for turtle to finish after rabbit wakes up\n    turtle_time_to_finish = (race_distance - turtle_distance_after_sleep) / turtle_speed\n    \n    # Who reaches the finish line first\n    if rabbit_time_to_finish < turtle_time_to_finish:\n        winner = \"rabbit\"\n        time_difference = turtle_time_to_finish - rabbit_time_to_finish\n        distance_difference = turtle_speed * time_difference\n    else:\n        winner = \"turtle\"\n        time_difference = rabbit_time_to_finish - turtle_time_to_finish\n        distance_difference = rabbit_sleep_time * rabbit_speed + rabbit_speed * time_difference - turtle_distance_after_sleep\n    \n    return winner, distance_difference\n\nans = solution()"
    ],
    "c4e305df8e864689a3ba869bd34de689": [
        "def solution():\n    footballs_per_basket = 5\n    number_of_baskets = 7\n    total_footballs = footballs_per_basket * number_of_baskets\n    return total_footballs\n\nans = solution()"
    ],
    "ab941a0743bd48f0a1e26a2e34ebdae5": [
        "def solution():\n    cost_price = 25000\n    selling_price = cost_price * 120 / 100\n    return selling_price\n\nans = solution()"
    ],
    "79d7374a63ab4894b0eb632021d19346": [
        "def solution():\n    # Let x be the number of students that need to be moved from Class A to Class B.\n    # Let B be the number of students in Class B.\n    # Then, Class A initially has B + 47 students.\n    # After moving x students, Class A will have (B + 47 - x) students.\n    # After moving x students, Class B will have (B + x) students.\n\n    # According to the condition, Class A will have 9 more students than Class B.\n    # Therefore, we get the equation: (B + 47 - x) = (B + x) + 9\n\n    # Simplifying the equation by combining like terms:\n    # B + 47 - x = B + x + 9\n    # 47 - x = x + 9\n    # 47 - 9 = x + x\n    # 38 = 2x\n    # x = 19\n    \n    # So, 19 students need to be moved from Class A to Class B.\n    x = 19\n    return x\n\nans = solution()"
    ],
    "bfa83b401aa849afa830d6bedd007504": [
        "def solution():\n    count = 0\n    for num in range(1, 1000):\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "93fe50f0358b4d2ea6a521e9ea3ed0a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    \n    equation1 = Eq(x - y, 57)\n    equation2 = Eq(x + y, 77)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    smaller_number = min(solutions[x], solutions[y])\n\n    return smaller_number\n\nans = solution()"
    ],
    "f50c5960070d4a3fb0b23a7198ed14e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls, adults = symbols('boys girls adults')\n    \n    equation1 = Eq(adults, 2 * boys)\n    equation2 = Eq(girls, 3 * boys)\n    equation3 = Eq(boys + girls + adults, 480)\n    \n    solutions = solve((equation1, equation2, equation3), (boys, girls, adults))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "a750e73a350c42c59e6e88752789f517": [
        "def solution():\n    total_pairs = 16\n    total_cost_pounds = 24\n    total_cost_pence = total_cost_pounds * 100\n    cost_per_avocado_pence = total_cost_pence / (total_pairs * 2)  # Each pair contains 2 avocados.\n    \n    return cost_per_avocado_pence\n\nans = solution()"
    ],
    "3e8c59f7bce94540b723e7c4f74ae108": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 5):  # hundreds digit has to be >= 1 to make it a 3-digit number\n        for tens in range(0, 6-hundreds):  # tens digit can range from 0 to (5-hundreds)\n            ones = 5 - (hundreds + tens)\n            if ones % 2 != 0:  # ones digit has to be odd\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e06dbcf7684f4efe9b8aa8167604d9eb": [
        "def solution():\n    from collections import Counter\n\n    possibilities = [i+j for i in range(1, 7) for j in range(1, 7)]\n    frequency = Counter(possibilities)\n    most_likely_score = frequency.most_common(1)[0][0]\n\n    return most_likely_score\n\nans = solution()"
    ],
    "3489712bf419469fb79ab41aed184413": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n    total_students = 36\n    total_average = 89\n    girls_average = 88\n    boys_average = 91\n\n    # Equation for total students\n    equation1 = Eq(girls + boys, total_students)\n    # Equation for total average score\n    equation2 = Eq((girls_average * girls + boys_average * boys), total_students * total_average)\n\n    solutions = solve((equation1, equation2), (girls, boys))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "bb069229eb994a6685105c9e4771780d": [
        "def solution():\n    people_per_square_table = 12\n    square_tables = 8\n    shared_sides = square_tables - 1\n    \n    total_people = (people_per_square_table * square_tables) - (2 * shared_sides)\n    \n    return total_people\n\nans = solution()"
    ],
    "938d7287364b480e824843004f4aebab": [
        "def solution():\n    return 9786 // 7, 9786 % 7\n\nans = solution()"
    ],
    "393a5918d6354e808621ec682f62ddae": [
        "def solution():\n    heads = 28\n    legs = 88\n    # Let r be the number of rhinos, d be the number of deer, and o be the number of ostriches.\n    # According to the problem, we have r = d.\n    # Since each rhino and each deer has 4 legs and each ostrich has 2 legs, we have:\n    # 4r (rhino legs) + 4d (deer legs) + 2o (ostrich legs) = 88\n    # Also, since the total number of heads is the sum of all animals we have:\n    # r + d + o = 28\n    # Using r = d, we can replace d with r in our equations.\n    for r in range(heads + 1):  # Possible to be all rhinos so +1\n        o = heads - 2 * r  # Replace d with r and calculate o\n        if 4 * r + 2 * o == legs:  # Check if the legs match\n            return r  # r is the number of rhinos\n\nans = solution()"
    ],
    "590b2a37fdc343dfa343951f96523662": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    arrival_time = datetime.strptime(\"11:15\", \"%H:%M\")\n    duration = timedelta(hours=3, minutes=50)\n    departure_time = arrival_time - duration\n\n    return departure_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "b9cafccb9f7942af839da92a0784cef0": [
        "def solution():\n    ones_digit_32 = pow(32, 33, 10)\n    ones_digit_22 = pow(22, 29, 10)\n    ans = (ones_digit_32 - ones_digit_22) % 10\n    return ans\n\nans = solution()"
    ],
    "b6cf5eeb7a434c4697c9588add4acbec": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, boris, jeffery, xavier = symbols('andrew boris jeffery xavier')\n    equation1 = Eq(andrew, (boris + jeffery + xavier)/3 - 30)\n    equation2 = Eq(xavier, 3 * andrew)\n\n    # We don't have enough information for a unique solution for each of the individuals,\n    # but we can find the sum of Jeffery and Boris's marbles which does not depend on the unique values\n    # Express Jeffery and Boris in terms of Andrew and solve for Andrew\n    solutions = solve((equation1, equation2), (andrew, boris, jeffery, xavier))\n\n    # Now calculate the sum of Boris and Jeffery's marbles using the solved value of Andrew\n    jeffery_boris_sum = solutions[boris] + solutions[jeffery]\n\n    return jeffery_boris_sum\n\nans = solution()"
    ],
    "40b2f9c840514df0bcbdb734e998e84c": [
        "网络故障，请重试"
    ],
    "def24a48cf8144e2845215066bcd4239": [
        "def solution():\n    max_difference = 0\n    for A in range(10, 100):  # A must be a 2-digit number\n        for B in range(1000, 10000):  # B must be a 4-digit number\n            if (A + B) % 7 == 0 and (A**2 + B**2) % 7 == 0:\n                max_difference = max(max_difference, B - A)\n    return max_difference\n\nans = solution()"
    ],
    "ce29edf6f9f549f8b1c3ce33cbd9bf94": [
        "from math import comb\n\ndef solution():\n    total_players = 12\n    players_to_choose = 6\n\n    num_ways = comb(total_players, players_to_choose)\n\n    return num_ways\n\nans = solution()"
    ],
    "31ea77f39d7d403bbbe15a0f51d288e2": [
        "def solution():\n    for n in range(1, 52):  # the total layers will not exceed the difference\n        students = (2*n + 1)**2  # outer layers (odd layers)\n        teachers = (2*n)**2 - (2*(n-1))**2  # inner layers (even layers) minus center if n > 1\n        if students - teachers == 52:\n            total_people = students + teachers  # sum of students and teachers\n            return total_people\n    return None\n\nans = solution()"
    ],
    "4c1d54551ef14b4a8f6fff1699ee1017": [
        "def solution():\n    ans = 10 ** 2\n    return ans\n\nans = solution()"
    ],
    "45a3a595ab6f4318985335abde87fad4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    equation1 = Eq(apples, 5/7 * oranges)\n    equation2 = Eq(apples, 2/3 * (oranges + 12))\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions[apples]\n\nans = solution()"
    ],
    "629056fd8d3d4d1ea0babc83d1b81d2e": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Defining the symbols\n    x, y, z = symbols('x y z', integer=True)\n\n    # Equating the given fraction to the desired form\n    equation = Eq(2014/37, 54 + 1/(x + 1/(y + 1/z)))\n\n    # Solve the equation for x, y, and z\n    solutions = solve(equation, (x, y, z))\n\n    # Since x, y, z must be distinct, we filter out non-distinct solutions\n    valid_solutions = [s for s in solutions if len(set(s)) == 3]\n\n    # Assuming there is at least one valid solution\n    if valid_solutions:\n        x, y, z = valid_solutions[0]\n\n    return x + y + z\n\nans = solution()"
    ],
    "3c819166640d4aecbdf6943fefaf19ae": [
        "def solution():\n    numbers = [200, 198, 196, 194, 24]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "303eb712b613463aa24269578fcdc93c": [
        "def solution():\n    end_number = 10  # He stops at the 10 o'clock position\n    total_count = 30  # He counts to 30\n\n    # Since there are 12 numbers on the clock, the counting is periodic with a period of 12\n    period = 12\n\n    # To find the starting number, we subtract the total count from the end number mod 12\n    start_number = (end_number - (total_count % period)) % period\n\n    # If start_number is 0, we adjust it to 12 because the clock numbers go from 1 to 12\n    if start_number == 0:\n        start_number = 12\n\n    return start_number\n\nans = solution()"
    ],
    "98d19dcddff5420181c5cbae730d43e1": [
        "def solution():\n    avril_apples = 15\n    eddie_apples = avril_apples - 3\n    return eddie_apples\n\nans = solution()"
    ],
    "f98fcfbad2e34f8b8786c6f68bb63d64": [
        "def solution():\n    from sympy import divisors, primerange\n\n    count = 0\n    \n    # Since 15 is 3*5, any multiple of 15 must at least have the prime factors 3 and 5\n    # So we start with 3^1 * 5^1 and look for other factors that can give us a total of 15 factors\n    \n    # Number of divisors function: d(n) = (a1+1)(a2+1)...(ak+1) where n = p1^a1 * p2^a2 * ... * pk^ak\n    # We need to find numbers such that their divisors function d(n) = 15\n    # 15 = 3*5, which means we need to find other prime factors such that their powers + 1 product is 15\n    # This means we can have primes raised to powers 2 and 4 (since (2+1)(4+1)=15)\n    # or a prime raised to the power of 14 (since 14+1=15), but in this case it won't work as 15 itself\n    # must be a factor, so the minimum exponent for 3 and 5 is 1.\n\n    # We need to find the numbers n = 3^x * 5^y * p^z, p is a prime, not equal to 3 or 5\n    # Such that (x+1)(y+1)(z+1) = 15, where x and y are at least 1\n    \n    # We only need to check primes under 15 because if p > 15, p^2 will be greater than 15^2\n    # and we only want the numbers within the range that are multiples of 15\n    for p in primerange(1, 15):\n        if p not in [3, 5]:  # Exclude 3 and 5 since they are already counted\n            # Check combination (1+1)*(1+1)*(z+1) = 15 => z can only be 2 or 4\n            for z in [2, 4]:\n                if (2)*(2)*(z+1) == 15:\n                    # Construct the number\n                    number = (3**1) * (5**1) * (p**z)\n                    # Check for factors and multiples of 15\n                    if len(divisors(number)) == 15:\n                        count += 1\n\n    return count\n\nans = solution()"
    ],
    "82d6cd07eb9b4742a9b4276838f20555": [
        "def solution():\n    snake_hibernation = 180\n    bear_hibernation = (2/3) * snake_hibernation\n    frog_hibernation = (5/4) * bear_hibernation\n    return frog_hibernation\n\nans = solution()"
    ],
    "e0433d6820a94cd280f26a0265506784": [
        "def solution():\n    jackpot = 131112\n    winners = 9\n\n    amount_per_person = jackpot // winners\n\n    return amount_per_person\n\nans = solution()"
    ],
    "20b44a4c32af41ef9142b775909cfdb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the symbols we need for the quantity of oil sold from each bucket.\n    oil_sold = symbols('oil_sold')\n\n    # We know that after selling the same amount of oil, the big bucket is left with 12 times the oil in the small bucket.\n    # Initial weight of big bucket - oil_sold = 12 * (Initial weight of small bucket - oil_sold)\n    # 89 - oil_sold = 12 * (45 - oil_sold)\n    equation = Eq(89 - oil_sold, 12 * (45 - oil_sold))\n\n    # Solve the equation for oil_sold\n    solutions = solve(equation, oil_sold)\n\n    # The solution will give us the amount of oil sold from each bucket\n    return solutions[0]\n\nans = solution()"
    ],
    "23acb98496a1431485725ca44356cb95": [
        "def solution():\n    number = 100\n    while True:\n        if number % 5 == 1 and number % 6 == 1 and number % 7 == 1:\n            return number\n        number += 1\n\nans = solution()"
    ],
    "7b8f27df031046e09fbf9d6b69396f37": [
        "def solution():\n    aliens_count = 1 + 5  # Himself and his 5 brothers\n    \n    # Since one alien has five legs, each alien needs 5 shoes and 5/2 pairs of socks\n    shoes_per_alien = 5\n    socks_per_alien = 5 / 2\n\n    # Each shoe pack contains 5 shoes, and each sock pair contains 2 socks\n    shoes_pack_price = 78\n    socks_pair_price = 12\n\n    # Total shoes required for all aliens\n    total_shoes_needed = aliens_count * shoes_per_alien\n    # Since shoes are sold in packs of 5, rounding up to nearest pack\n    total_shoes_packs_needed = -(-total_shoes_needed // 5)\n\n    # Total socks pairs needed for all aliens\n    total_socks_pairs_needed = aliens_count * socks_per_alien\n\n    # Total cost for shoes and socks\n    total_cost = (total_shoes_packs_needed * shoes_pack_price) + (total_socks_pairs_needed * socks_pair_price)\n    \n    return total_cost\n\nans = solution()"
    ],
    "992b03b260e0423f8ae1b4a971e95d16": [
        "def solution():\n    return sum(range(1, 31))\n\nans = solution()"
    ],
    "6aabcae871ce46f8ad05bfca32697274": [
        "def solution():\n    # Equations derived from the question:\n    # a = b - 5 = c - 11\n    # Therefore, a + 5 = b and a + 11 = c\n\n    # As a, b, and c are prime numbers, search through the prime numbers to find the solution\n    from sympy import primerange\n\n    # Create list of primes less than 31 to check\n    primes = list(primerange(1, 31))\n\n    # Iterate over the primes to find a, b, c that satisfy the condition\n    for a in primes:\n        b = a + 5\n        c = a + 11\n        if b in primes and c in primes:\n            return a * b * c\n\nans = solution()"
    ],
    "21ec0c0ec1814ca58f0852a04fb021ce": [
        "def solution():\n    # Total time in hours, since speeds are given in km/h\n    total_time_hours = 54 / 60\n\n    # Let's denote the distance between her home and the park as 'd' km.\n    # Time taken to go to the park = distance/speed = d/5\n    # Time taken to return = distance/speed = d/4\n    \n    # According to the problem, the sum of the times for both trips is the total time taken:\n    # d/5 + d/4 = total_time_hours\n    # To solve for d, multiply through by 20 (LCM of 4 and 5) to clear the denominators:\n    # 4d + 5d = 20 * total_time_hours\n    # 9d = 20 * total_time_hours\n    # d = (20 * total_time_hours) / 9\n\n    d = (20 * total_time_hours) / 9\n    return d\n\nans = solution()"
    ],
    "5fdb9bf232c24130acb67d6989c9f36f": [
        "def solution():\n    total_students = 35\n    both_x = symbols('x')\n\n    apples = 3 * both_x\n    bananas = 5 * both_x\n\n    equation = Eq(apples + bananas - both_x, total_students)\n\n    x_value = solve(equation, both_x)\n    return x_value[0]\n\nans = solution()"
    ],
    "d43c72e5a6ae4f8db05bca5a0b40f880": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rennie, joleen = symbols('rennie joleen')\n    equation = Eq((3/4) * rennie, (2/3) * joleen)\n    joleen_pies = rennie + 5\n\n    # substitute joleen by rennie + 5\n    solutions = solve((equation.subs(joleen, rennie + 5),), (rennie,))\n\n    rennie_pies = solutions[rennie]\n    joleen_pies = rennie_pies + 5\n\n    total_pies = rennie_pies + joleen_pies\n\n    return total_pies\n\nans = solution()"
    ],
    "04f441aa03884165973a65e941e979f6": [
        "def solution():\n    # Let the number of boys be x.\n    # Then, the number of girls is x + 8.\n    # The total number of pupils is x + (x + 8) = 26.\n    \n    # So, 2x + 8 = 26.\n    # Solving for x gives us the number of boys.\n    x = (26 - 8) // 2\n    \n    # The number of girls is x + 8.\n    girls = x + 8\n    \n    return girls\n\nans = solution()"
    ],
    "7bb16c6234cc4815b0e5460af5d3bcde": [
        "def solution():\n    initial_weight_kg = 3.5\n    pie_weight_kg = 550 / 1000\n    juice_weight_kg = 1050 / 1000\n\n    remaining_weight_kg = initial_weight_kg - (pie_weight_kg + juice_weight_kg)\n\n    return remaining_weight_kg\n\nans = solution()"
    ],
    "cfc90e2bd8784f839af8df92030da2cc": [
        "def solution():\n    price_per_computer = 380\n    number_of_students = 600\n    total_cost = price_per_computer * number_of_students\n    return total_cost\n\nans = solution()"
    ],
    "5836c32ab92349858d64ea01519ff950": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the rate of work done by Lee be L (portion/hour) and by Nancy be N (portion/hour)\n    L, N = symbols('L N')\n\n    # Equation based on both working together\n    equation1 = Eq(1, 10 * (L + N))\n\n    # Equation based on Nancy working for 20 hours and Lee for 6 hours\n    equation2 = Eq(1, 20 * N + 6 * L)\n\n    # Solve the system of equations for L and N\n    solutions = solve((equation1, equation2), (L, N))\n\n    # Time taken for Nancy to finish the job by herself is the reciprocal of N\n    time_for_nancy = 1 / solutions[N]\n\n    return time_for_nancy\n\nans = solution()"
    ],
    "5279176e8bb34e36a3a0b92d193ca529": [
        "def solution():\n    count = 0\n    for i in range(1, 416):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "82fb8614fc1f452fa0c62237c0880ab5": [
        "def solution():\n    percentage = (15 / 300) * 100\n    return percentage\n\nans = solution()"
    ],
    "6c0af911bf3441ceb0aa84e3591c07ce": [
        "def solution():\n    first_day_chairs = 15\n    difference = 3\n    total_days = 5\n    chairs_made = sum(first_day_chairs + difference * i for i in range(total_days))\n    return chairs_made\n\nans = solution()"
    ],
    "c6a998a4a44742708de70bf568712c7e": [
        "def solution():\n    return 111111111 * 99999999\n\nans = solution()"
    ],
    "967ece94a30248298d61d641cb4adf93": [
        "def solution():\n    fraction = 12 / 25\n    percent = fraction * 100\n    return percent\n\nans = solution()"
    ],
    "72920f692e1f4bc5a9ad132468b2ba55": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n\n    choose_pencil_ruler = pencils * rulers\n    choose_pencil_pen = pencils * pens\n    choose_ruler_pen = rulers * pens\n\n    ans = choose_pencil_ruler + choose_pencil_pen + choose_ruler_pen\n\n    return ans\n\nans = solution()"
    ],
    "5c2114692687459380bfd372aebfde19": [
        "def solution():\n    for children in range(100, 191):\n        if children % 4 == 3 and children % 13 == 12:\n            return children\n\nans = solution()"
    ],
    "3794af6cfad9436889422b80da641626": [
        "def solution():\n    # Benny has 4 blue, 3 yellow, and 1 red marble.\n    # To ensure he gets 3 marbles of the same color, we consider the worst-case scenario.\n\n    # He takes out 2 blue, 2 yellow, and 1 red in the worst case without having 3 of any.\n    # The next marble he takes out must give him 3 of one color regardless of the color.\n    # Total marbles taken out at this point: 2 + 2 + 1 = 5\n    # One more marble guarantees 3 of the same color, so the answer is 5 + 1 = 6\n\n    # Return the least number of marbles that must be taken out to have 3 of the same color.\n    return 6\n\nans = solution()"
    ],
    "88717234762b4482bb4b328d802d0085": [
        "def solution():\n    numbers = [98, -87, 76, -65, 54, -43, 32, -21, 10]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "b712f3023cd74d2a97af516420fec795": [
        "def solution():\n    ans = 312 // 6\n    return ans\n\nans = solution()"
    ],
    "c24b40236ebf4569ab4996b428c1ea27": [
        "def solution():\n    book_price = 8.15\n    t_shirt_price = 24.55\n    pen_price = 0.85\n\n    total_spent = book_price + t_shirt_price + pen_price\n\n    return total_spent\n\nans = solution()"
    ],
    "626a9662882f4dc4a1ba95cb02ab64da": [
        "def solution():\n    y = -10 + 3\n    return y\n\nans = solution()"
    ],
    "67ecb5e143af40a489aca335acd8434a": [
        "def solution():\n    total_cost = 7 * 14  # total cost in pence\n    amount_paid = 100  # amount paid in pence (£1 = 100p)\n    change = amount_paid - total_cost\n    return change\n\nans = solution()"
    ],
    "2d4bb268d17840b4a2af67c13b75b9e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let g represent Garrett's current age and s represent Sebastian's current age.\n    g, s = symbols('g s')\n    \n    # Garrett is 24 years older than Sebastian.\n    equation1 = Eq(g, s + 24)\n    \n    # In 10 years, Garrett will be thrice as old as Sebastian.\n    equation2 = Eq(g + 10, 3 * (s + 10))\n    \n    # Solve the system of equations for g and s.\n    solutions = solve((equation1, equation2), (g, s))\n    \n    # We return the value of Garrett's current age.\n    return solutions[g]\n\nans = solution()"
    ],
    "34bf57dff6004159b9678570286b3a45": [
        "def solution():\n    sales_tax_rate = 0.06\n    sales_tax_paid = 90\n    original_price = sales_tax_paid / sales_tax_rate\n\n    return original_price\n\nans = solution()"
    ],
    "28b3283e4adb46b1981d2f77bbce5dc3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    original_ratio = Eq(boys, girls - 65)\n    after_recess = Eq(boys * (3/5), girls * (4/7))\n\n    solutions = solve((original_ratio, after_recess), (boys, girls))\n\n    boys_remaining = solutions[boys] * (3/5)\n    girls_remaining = solutions[girls] * (4/7)\n\n    total_remaining = boys_remaining + girls_remaining\n\n    return total_remaining\n\nans = solution()"
    ],
    "45df453d65d8460098e8bd6f64aa6e8d": [
        "def solution():\n    # From the given equation B = 25 + 6A, we have:\n    #   200x + 20y = 25 + 6(10x + y)\n    # Simplifying, we get:\n    #   200x + 20y = 25 + 60x + 6y\n    #   140x + 14y = 25\n    # Since x and y are digits, the above equation is incorrect as 140x and 14y implies both x and y are not integers\n    \n    # Thus, John is wrong. Let's find the correct value of A:\n    # 200x + 20y = 25 + 6(10x + y)\n    # 200x + 20y = 60x + 6y + 25\n    # 200x - 60x + 20y - 6y = 25\n    # 140x + 14y = 25\n\n    # Dividing both sides by 14 gives us:\n    # 10x + y = 25/14 (which is not a whole number) and therefore isn't possible\n    # John's mistake is in the multiplication. The correct equation should be:\n    # 200x + 20y = 25 + 6 * (10x + y)\n    # 200x + 20y = 25 + 60x + 6y\n    # 200x - 60x + 20y - 6y = 25\n    # 140x + 14y = 25\n    # Dividing both sides by 14 gives us the correct equation:\n    # 10x + y = 25/14\n\n    # We see that it's not possible if we assume x and y are digits between 0 and 9\n    # The correct process is to compare the left and right hand side coefficients of x and y:\n    #   200x + 20y = 60x + 6y + 25\n    # Rearrange and group x and y terms:\n    #   200x - 60x = 6y - 20y + 25\n    # Which simplifies to:\n    #   140x = -14y + 25\n    # Since the smallest value of y is 0 and the largest value of x is 9, we can find a solution\n    # where the equation holds true. Hence, let's calculate possible values for x and y:\n    current_min_diff = float('inf')\n    for x in range(10):\n        for y in range(10):\n            left_side = 140 * x\n            right_side = 25 - 14 * y\n            if left_side == right_side:\n                A = 10 * x + y\n                return A  # Since we need to find just one correct pair (x, y) that satisfies our equation.\n    return None  # In case there are no such pairs, though we expect to find one based on problem constraints.\n\nans = solution()"
    ],
    "21c0c469254846459707b10aa5368b1e": [
        "def solution():\n    march_earnings = 1354\n    april_earnings = 1672\n    total_earnings = march_earnings + april_earnings\n    return total_earnings\n\nans = solution()"
    ],
    "c28d501a4f3c490c9058face33142635": [
        "def solution():\n    first_term = 2\n    common_difference = 3\n    n = 20\n\n    nth_term = first_term + (n - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "2f2d4651795c439599a60c5b9bd40011": [
        "def solution():\n    travel_cost_per_person = 150\n    hotel_cost_per_day_per_person = 50\n    spending_money_per_person = 250\n\n    total_travel_cost = travel_cost_per_person * 4\n    total_hotel_cost = hotel_cost_per_day_per_person * 4 * 7\n    total_spending_money = spending_money_per_person * 4\n\n    total_cost = total_travel_cost + total_hotel_cost + total_spending_money\n\n    return total_cost\n\nans = solution()"
    ],
    "2d130e3c0e3945b685446c7cfb272294": [
        "from math import factorial\n\ndef solution():\n    total_count = factorial(7) # Total ways to rearrange 7 letters\n    # Ways to place the 3 vowels together treated as a single entity\n    vowels_together_count = factorial(3) * factorial(5)\n    \n    ans = total_count - vowels_together_count\n    return ans\n\nans = solution()"
    ],
    "00cb26f4bf1b4dea92d43d8871529e21": [
        "def solution():\n    number = 70_017_007\n    return number\n\nans = solution()"
    ],
    "9ad4425b3ae341e383eaf5a81b5fea27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges, bananas = symbols('apples oranges bananas')\n\n    equation1 = Eq(apples, oranges + 150)\n    equation2 = Eq(bananas, oranges + 50)\n    equation3 = Eq(apples + oranges + bananas, 1400)\n\n    solutions = solve((equation1, equation2, equation3), (apples, oranges, bananas))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "4e7d8e9e8c70434db387985ffc3ced9d": [
        "def solution():\n    height_metres = 8850\n    metres_to_kilometres = 1000\n    height_kilometres = height_metres / metres_to_kilometres\n    return height_kilometres\n\nans = solution()"
    ],
    "d103fb7881a84891a1e2f0db57a5cdff": [
        "from math import factorial\n\ndef solution():\n    # Total number of groups: math, chemistry, physics, and 1 biology book\n    num_groups = 4\n    \n    # Number of ways to arrange the groups\n    group_arrangements = factorial(num_groups)\n    \n    # Number of ways to arrange books within their own subjects\n    math_arrangements = factorial(4)\n    chemistry_arrangements = factorial(3)\n    physics_arrangements = factorial(2)\n    \n    # Total arrangements\n    ans = group_arrangements * math_arrangements * chemistry_arrangements * physics_arrangements\n    return ans\n\nans = solution()"
    ],
    "ef906b4f53fd45d79377d690c9653778": [
        "def solution():\n    category_1 = 30\n    category_2 = 40\n    category_3 = 45\n    \n    ways = category_1 * category_2 * category_3\n    \n    return ways\n\nans = solution()"
    ],
    "8033f9bd063140b6985e12301e7828e5": [
        "def solution():\n    current_sum_ages = 45\n    increment = 5 * 2  # Both Mary and her son will be 5 years older\n    future_sum_ages = current_sum_ages + increment\n    return future_sum_ages\n\nans = solution()"
    ],
    "a2e75549c690497cad6e854a67bb9ca0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for stickers Eugene, Melvin and David originally had\n    eugene, melvin, david = symbols('eugene melvin david')\n    \n    # Total sticker count equation\n    total_stickers_eq = Eq(eugene + melvin + david, 260)\n    \n    # After Eugene gave Melvin twice as many stickers as Melvin had\n    eugene -= 2 * melvin\n    melvin += 2 * melvin\n    \n    # After Melvin gave David as many stickers as David had\n    melvin -= david\n    david += david\n\n    # After David gave Eugene as many stickers as Eugene had left\n    david -= eugene\n    eugene += eugene\n\n    # Final ratio equation\n    final_ratio_eq = Eq(eugene/melvin, 46/12) & Eq(melvin/david, 12/7) & Eq(david/eugene, 7/46)\n    \n    # Solve the system of equations\n    solutions = solve((total_stickers_eq, final_ratio_eq), (eugene, melvin, david))\n\n    # Return the number of stickers Eugene had at first\n    return solutions[eugene]\n\nans = solution()"
    ],
    "b00136397bfb4af8943135704801f794": [
        "def solution():\n    for a in range(2, 32):\n        for b in range(2, 27):\n            for c in range(2, 21):\n                # Checking if a, b, c are prime\n                if all(a % i != 0 for i in range(2, a)) and \\\n                   all(b % i != 0 for i in range(2, b)) and \\\n                   all(c % i != 0 for i in range(2, c)):\n                    # Checking the given equalities\n                    if 31 + a == 26 + b == 20 + c:\n                        return a * b * c\n    return None\n\nans = solution()"
    ],
    "7ba8140ad05947758fcf5701002a8435": [
        "def solution():\n    return 525 + 75\n\nans = solution()"
    ],
    "0c03095444bb44a4b57d684dd17a77c7": [
        "def solution():\n    from math import factorial\n\n    num_people = 6\n    num_seats = 8\n\n    # For circular arrangements, (n-1)! is used instead of n!\n    ans = factorial(num_people - 1)\n\n    return ans\n\nans = solution()"
    ],
    "89c2e46a330f4c809acc4ee66605274d": [
        "def solution():\n    count = 0\n    # For an isosceles triangle with sides a, a, b (or a, b, b), where a is the repeated side length,\n    # and b is the base or the non-repeated side, the perimeter is a + a + b (or a + b + b).\n    # We need to find all possible integer combinations of a and b where 2a + b = 12 or a + 2b = 12,\n    # subject to the triangle inequality theorem: a + b > a (or b > a - b) and 2a > b (or b < 2a)\n    # Note: a, b must be positive integers.\n\n    for a in range(1, 12//2+1):  # a < perimeter/2 to satisfy triangle inequality\n        b = 12 - 2 * a  # since perimeter is 12, find b for each a\n        if b >= a:  # b has to be at least as big as a (triangle inequality b < 2a)\n            count += 1  # we have found a valid combination\n\n    for b in range(1, 12//3+1):  # b < perimeter/3 to satisfy triangle inequality (also avoids repetition)\n        a = (12 - b) / 2  # since perimeter is 12, find a for each b (isosceles side must be an integer)\n        if a.is_integer() and a >= b:  # make sure a is an integer and it's at least as big as b\n            count += 1  # we have found a valid combination\n\n    return count\n\nans = solution()"
    ],
    "7904921931804014a07b69845bab7b59": [
        "def solution():\n    # Initial matches in both piles\n    pile_A = 35\n    pile_B = 24\n\n    # Subtract the smaller number from the larger number\n    diff = pile_A - pile_B\n\n    # Check if the difference is a multiple of the smaller number plus one\n    if diff % (pile_B + 1) == 0:\n        winner = \"Wei'er\"\n    else:\n        winner = \"Eddie\"\n\n    # Calculate the winning strategy when Eddie has the winning strategy\n    if winner == \"Eddie\":\n        to_take = diff % (pile_B + 1)\n        if to_take == 0:\n            to_take = pile_B + 1\n    else:\n        to_take = 0  # Eddie cannot win if he takes any number of matches.\n\n    return winner, to_take\n\nans = solution()"
    ],
    "9613eedf0f0948dcb5413f496404e450": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b represent the initial number of boys (which is also the initial number of girls)\n    b = symbols('b')\n\n    # After 12 more boys came and 8 girls left\n    boys_after = b + 12\n    girls_after = b - 8\n\n    # The final equation representing twice as many boys as girls\n    equation = Eq(boys_after, 2 * girls_after)\n\n    # Solve the equation\n    initial_boys = solve(equation, b)[0]\n\n    # Since the initial number of boys equals the initial number of girls\n    initial_students = 2 * initial_boys\n\n    return initial_students\n\nans = solution()"
    ],
    "bff8b9eeb1c245eb8fd44124619a0ff8": [
        "def solution():\n    first_term = 31\n    last_term = 41\n    num_terms = (last_term - first_term + 1)\n\n    sum_seq = (num_terms * (first_term + last_term)) // 2\n\n    return sum_seq\n\nans = solution()"
    ],
    "acbee96ed2cb4a61be352fee44d29870": [
        "def solution():\n    ans = 21 * (2/7)\n    return ans\n\nans = solution()"
    ],
    "912de4f90ddb4216bf505fc2ea36050f": [
        "def solution():\n    sum = 0\n    for i in range(80, 55, -4):\n        sum += i - (i - 2)\n    return sum\n\nans = solution()"
    ],
    "fb64702818de4244b242b01464507459": [
        "def solution():\n    digits = [3, 5, 7]\n    count = 0\n\n    for i in digits:\n        for j in digits:\n            for k in digits:\n                if i != j and j != k and i != k:\n                    count += 1\n\n    return count\n\nans = solution()"
    ],
    "097a0efcc6c64ff08677a4704bcd76bb": [
        "def solution():\n    import math\n    length_1 = 15\n    length_2 = 45\n\n    largest_piece_length = math.gcd(length_1, length_2)\n\n    return largest_piece_length\n\nans = solution()"
    ],
    "931f7e125e804e0bbab5078c31bf920e": [
        "from sympy import isprime\n\ndef solution():\n    for prime1 in range(2, 25):\n        prime2 = 25 - prime1\n        if isprime(prime1) and isprime(prime2):\n            return prime1 * prime2\n\nans = solution()"
    ],
    "a223ddccd2724fcfad6b70a5cedd679d": [
        "def solution():\n    return 150 - 12 * 12\n\nans = solution()"
    ],
    "df1629274fe246d5b09f00b408d237a3": [
        "def solution():\n    distance1 = 280\n    distance2 = 400\n    distance3 = 800 - distance1 - distance2\n\n    speed1 = 7\n    speed2 = 5\n    speed3 = 8\n\n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    time3 = distance3 / speed3\n\n    total_time = time1 + time2 + time3\n\n    return total_time\n\nans = solution()"
    ],
    "dcda2529e50e438892b5fe26db544d87": [
        "def solution():\n    return 168 * 91\n\nans = solution()"
    ],
    "71633ecd388b4b3fb18cf8470f3168fa": [
        "def solution():\n    start_time_hour = 6\n    start_time_minute = 52\n    end_time_hour = 8\n    end_time_minute = 24\n\n    # Calculate the total time spent in minutes\n    start_time_total_minutes = start_time_hour * 60 + start_time_minute\n    end_time_total_minutes = end_time_hour * 60 + end_time_minute\n\n    time_spent = end_time_total_minutes - start_time_total_minutes\n\n    return time_spent\n\nans = solution()"
    ],
    "c6c18c591cee4de090f23b01cc195845": [
        "def solution():\n    num_lamp_posts = 50\n    distance_between = 2\n    \n    road_length = (num_lamp_posts - 1) * distance_between\n    \n    return road_length\n\nans = solution()"
    ],
    "54d68cc151df4bfb9d1b20b9d2fb2aa3": [
        "def solution():\n    ans = 48 + 84\n    return ans\n\nans = solution()"
    ],
    "bd901fb2c6284efb98073eaa14689640": [
        "def solution():\n    return (18 + 52) / 2\n\nans = solution()"
    ],
    "d459013620f445ba980f5db75d210d9b": [
        "def solution():\n    return 40 - 15 + 1\n\nans = solution()"
    ],
    "74c598a697fa4036ba52acb5c3dae9a8": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define the symbols for the number of cupcakes\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n\n    # Using the given information to build equations\n    equation1 = Eq(chocolate, vanilla + 72)\n    equation2 = Eq(blueberry, vanilla - 36)\n    \n    # After selling the cupcakes\n    equation3 = Eq((chocolate - chocolate/6) + (vanilla - 2*vanilla/3) + (blueberry - 7*blueberry/9), 427)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (chocolate, vanilla, blueberry))\n\n    # Extract the solution for the number of chocolate cupcakes\n    num_chocolate = solutions[chocolate]\n\n    # Calculate how many chocolate cupcakes were sold\n    chocolate_sold = num_chocolate/6\n\n    return chocolate_sold\n\nans = solution()"
    ],
    "587b3b02dde341268ada10eb1e31a729": [
        "def solution():\n    total_peaches = 47\n    total_students = 6\n    \n    # According to the Pigeonhole Principle, to find out the minimum number of peaches\n    # the student with the most peaches can have, we divide total_peaches by total_students\n    # and take the ceiling of that number since we cannot have a fraction of a peach.\n    # Since we need to guarantee that there is at least one student with more peaches than the others,\n    # we add an additional peach to the result of the division.\n    \n    peaches_per_student = (total_peaches // total_students) + 1\n\n    return peaches_per_student\n\nans = solution()"
    ],
    "5620dc4830cf4177b81a1d252a13bdf6": [
        "def solution():\n    return (2/9) * 36\n\nans = solution()"
    ],
    "03abc0f287024f5d96ba76d95640a07b": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (1, 7), (3, 9)]\n    _, least_num_children = solve_congruence(*congruences)\n\n    return least_num_children\n\nans = solution()"
    ],
    "47de481b43de4ea9bc2a81e973f8542c": [
        "def solution():\n    # Let the first term of the arithmetic sequence be x\n    # Then the seven consecutive numbers are x, x+1, x+2, x+3, x+4, x+5, x+6\n    # According to the property of arithmetic sequence sum formula S=n/2*(a1+an)\n    # where S is the sum of the sequence, n is the number of terms, a1 is the first term, and an is the last term\n    # We have S = 7/2 * (2x + 6) = 140\n    # Solve this equation for x to find the smallest number in the sequence\n    \n    # sum of the sequence\n    S = 140\n    \n    # number of terms\n    n = 7\n    \n    # Calculate the first term (smallest number)\n    x = (S - (n/2)*6) / (n/2)\n    \n    return int(x)\n\nans = solution()"
    ],
    "9a9953295d5740bc87f3c1edd90b8b54": [
        "def solution():\n    total_cost = (10 * 45 + 10 * 27) / 100  # Convert pence to pounds\n    change = 10 - total_cost  # Change from a 10 pound note\n    return change\n\nans = solution()"
    ],
    "77c1430ed23f41599ca28024f5d0c1b6": [
        "def solution():\n    smallest_mass = 7.35\n    return smallest_mass\n\nans = solution()"
    ],
    "270c294ed2df4203a13160fdf772f5be": [
        "def solution():\n    # There are 3 seats left for Chantel, Tony, and Cale.\n    # Since Claire's seat is fixed, we need to consider ways to arrange the other three around the table.\n    # First choose a seat for Tony, which can't be directly opposite Claire (2 choices)\n    # Then place Chantel and Cale in the remaining seats (2! ways)\n    # Total ways = choices for Tony * arrangement of the remaining two.\n    \n    total_ways = 2 * (2)\n    \n    return total_ways\n\nans = solution()"
    ],
    "e22e61e5355d4cf286d0a863eac51562": [
        "def solution():\n    # Frank produces 180 tables in 10 days\n    # Ryan produces 180 tables in 15 days\n\n    # Calculate daily production for each\n    frank_daily = 180 / 10\n    ryan_daily = 180 / 15\n\n    # Difference in daily production\n    daily_difference = frank_daily - ryan_daily\n\n    return daily_difference\n\nans = solution()"
    ],
    "d3c48a9697fa4a4eb28b56062dbe1df1": [
        "def solution():\n    total_questions = 20\n    marks_correct = 5\n    marks_wrong = -2\n\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        total_marks = correct_answers * marks_correct + wrong_answers * marks_wrong\n        if total_marks == 79:\n            return correct_answers\n\nans = solution()"
    ],
    "3393096c6a844b2dadae6b5e08940ba8": [
        "def solution():\n    total_money_raised = 165  # in pounds\n    price_per_cake = 0.75  # in pounds\n\n    num_cakes_sold = total_money_raised / price_per_cake\n\n    return int(num_cakes_sold)\n\nans = solution()"
    ],
    "6d33b364eee54bfcb1f7cf59f055a829": [
        "def solution():\n    # Since the numbers are consecutive, \n    # we can represent them as x, x+1, x+2, x+3, x+4\n    # where x is a 2-digit number, hence 10 <= x <= 95\n\n    # Check each possible value for x\n    for x in range(10, 96):\n        # Check if any three consecutive sums are divisible by 37 and 60\n        # Sum of three numbers would be 3*x + 3, 3*x + 6, 3*x + 9 (as they are consecutive)\n        # For divisibility by 37\n        if (3 * x + 3) % 37 == 0 or (3 * x + 6) % 37 == 0 or (3 * x + 9) % 37 == 0:\n            # For divisibility by 60\n            if (3 * x + 6) % 60 == 0 or (3 * x + 9) % 60 == 0 or (3 * x + 12) % 60 == 0:\n                # If both conditions are met, the largest number is x+4\n                return x + 4\n\nans = solution()"
    ],
    "18cee48b4d67429daae6f6a7b4da9f6c": [
        "def solution():\n    initial_amount = 1440\n    spent_at_restaurant = (3 / 7) * initial_amount\n    remaining_after_restaurant = initial_amount - spent_at_restaurant\n    spent_on_fees = (2 / 9) * remaining_after_restaurant\n    remaining_after_fees = remaining_after_restaurant - spent_on_fees\n    \n    return remaining_after_fees\n\nans = solution()"
    ],
    "30f8a7925ff34166983d3831a3dd1927": [
        "def solution():\n    amy = 24\n    emma = 10\n    total = amy + emma\n    candies_to_give = (amy - (total // 2))\n\n    return candies_to_give\n\nans = solution()"
    ],
    "b85b80d96c214b3f9767320633e9d1e4": [
        "def solution(x, y):\n    cost = 5 * x + 1 * y\n    return cost\n\nans = solution(5, 1)"
    ],
    "68c228ef01e64096ae6ea0c0c72ce5ad": [
        "def solution():\n    # Let x be the total number of questions to mark.\n    # Let t be the time she has to mark all questions on time.\n    # If she marks 4 questions per minute, then she takes x/4 minutes\n    # If she marks 6 questions per minute, then she takes x/6 minutes\n    # According to the problem, marking 4 questions per minute would mean she takes 5 minutes more than on time: x/4 = t + 5\n    # And marking 6 questions per minute means she finishes 5 minutes earlier than on time: x/6 = t - 5\n    # We can set up a system of equations:\n    # x/4 = t + 5  -->(1)\n    # x/6 = t - 5  -->(2)\n    # Now, let's solve for x and t. Multiply the first equation by 6 and the second by 4 and equate them:\n    # 6*(x/4) = 6*(t + 5)  --> (3)\n    # 4*(x/6) = 4*(t - 5)  --> (4)\n    # So:\n    # (3): 3x/2 = 6t + 30\n    # (4): 2x/3 = 4t - 20\n    # Now multiply all terms of equation (4) by 3/2 to equal the denominator with (3)\n    # (4): 3x/2 = 6t - 30\n    # Now subtract equation (4) from (3):\n    # 0 = 6t + 30 - (6t - 30)\n    # 0 = 60\n    # So the difference in time for marking 4 or 6 questions per minute equals 10 minutes.\n    # Therefore, the difference in the number of questions marked in those 10 minutes is:\n    # At 4 questions per minute: 10 minutes * 4 questions/minute = 40 questions\n    # At 6 questions per minute: 10 minutes * 6 questions/minute = 60 questions\n    # The difference is 60 - 40 = 20 questions.\n    # The time difference is created by the 20 extra questions marked at the faster rate.\n    # So if we take that she would need 5 minutes to mark these at the slower rate:\n    # 5 minutes * 4 questions/minute = 20 questions\n    # Hence, the total number of questions she has to mark to leave on time is the number she marks at 4 questions per minute (the slower rate) during the On Time time t.\n    # If t is the on-time leave minutes, then:\n    # t = x/4 - 5\n    # t = 5 minutes (the difference in 20 questions between rates) + 5 minutes early leave\n    # x/4 = 10 \n    # x = 40\n    # Therefore, she marked 40 questions before she left the school.\n\n    return 40\n\nans = solution()"
    ],
    "08a35d75e3c6466b94f233066ea49537": [
        "def solution():\n    # Convert metres to centimetres\n    meters_in_cm = 3.2 * 100\n    # Difference in centimetres\n    difference_in_cm = meters_in_cm - 30\n    return difference_in_cm\n\nans = solution()"
    ],
    "25ecfb7fac334e73b6113226048393ed": [
        "def solution():\n    # Time taken between chimes is constant, so we only need to calculate the intervals.\n    # For 3 chimes, there are 2 intervals.\n    intervals_for_3_chimes = 2\n    total_time_for_3_pm = 6  # in seconds\n    \n    # Calculate the time per interval\n    time_per_interval = total_time_for_3_pm / intervals_for_3_chimes\n    \n    # For 6 chimes, there are 5 intervals.\n    intervals_for_6_chimes = 6 - 1\n    \n    # Total time for 6 pm is the time per interval times the number of intervals.\n    total_time_for_6_pm = time_per_interval * intervals_for_6_chimes\n    \n    return total_time_for_6_pm\n\nans = solution()"
    ],
    "6d6b64c92ea64a01b75ed338a1814766": [
        "def solution():\n    # P's work rate per hour\n    p_rate_per_hour = 1 / (12 * 8)\n    # Q's work rate per hour\n    q_rate_per_hour = 1 / (8 * 10)\n    \n    # Combined work rate of P and Q per hour working together\n    combined_rate_per_hour = p_rate_per_hour + q_rate_per_hour\n    \n    # Total hours required to complete the job working together\n    total_hours_together = 1 / combined_rate_per_hour\n    \n    # Total days required to complete the job by working 8 hours each day\n    total_days_together = total_hours_together / 8\n    \n    # As we need whole days, we take the ceiling of the total days\n    from math import ceil\n    return ceil(total_days_together)\n\nans = solution()"
    ],
    "38f0f6e2b17a49f9901e5abd3924ce28": [
        "def solution():\n    total_sum = 3 * 10 * (10 + 1) * (2 * 10 + 1) // 6\n    return total_sum\n\nans = solution()"
    ],
    "fd9804acb7e544a69a055503fd3def6a": [
        "def solution():\n    ans = 15 * 1.98\n    return ans\n\nans = solution()"
    ],
    "787da3f18e5e412287bbd42e447a76ef": [
        "def solution():\n    n = 120\n    factors_count = 1\n    i = 2\n    while n > 1:\n        power = 0\n        while n % i == 0:\n            power += 1\n            n //= i\n        factors_count *= (power + 1)\n        i += 1\n    return factors_count\n\nans = solution()"
    ],
    "73d546a2c1f0431cbfd7415491f84730": [
        "def solution():\n    total_digits = 0\n    for i in range(1, 41):  # Iterate from page 1 through page 40\n        total_digits += len(str(i))  # Count the digits in each page number and add to total\n    return total_digits\n\nans = solution()"
    ],
    "9527ef42da6941e7be57a1270b76ceb3": [
        "def solution():\n    cost_per_kg = 56 / 100  # convert p to pounds\n    total_cost = 5 * cost_per_kg\n    total_paid = 10\n\n    change = total_paid - total_cost\n    return change\n\nans = solution()"
    ],
    "106593b9b5bb443c9285898752bf5849": [
        "def solution():\n    import math\n\n    product = 180\n    sqrt_product = math.isqrt(product)\n\n    for i in range(sqrt_product, 0, -1):\n        if product % i == 0:\n            other_factor = product // i\n            diff = abs(other_factor - i)\n            return diff\n\nans = solution()"
    ],
    "bbfed58ca2f642f482fdc598bc7882b5": [
        "def solution():\n    midnight_temperature = -8\n    midday_temperature = 13\n    overall_change = midday_temperature - midnight_temperature\n    return overall_change\n\nans = solution()"
    ],
    "cc27afdc4fa642d99b8a96c299e48d50": [
        "def solution():\n    for num in range(5, 16):\n        if num % 3 == 0 and 27 % num == 0:\n            return num\n\nans = solution()"
    ],
    "b3c63472965f4875854399b30b013a75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let t be the time taken by Max in minutes\n    t = symbols('t')\n\n    # Since ratio of their speeds is 2:3, then the ratio of their times is 3:2\n    # So Luca takes 3/2 times the duration that Max takes, which is also 10 minutes more than Max\n    equation = Eq((3/2) * t, t + 10)\n\n    # Solve for t\n    max_time = solve(equation, t)[0]\n\n    # Luca's usual time will be 3/2 of Max's time\n    luca_usual_time = (3/2) * max_time\n\n    # If Luca walked at double his speed, the time taken will be half\n    luca_double_speed_time = luca_usual_time / 2\n\n    return luca_double_speed_time\n\nans = solution()"
    ],
    "ebe796d82e734546a5d8d043ba66fb08": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "9a83c293667c44a394743b502e08ad48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12*x - 2*(5 + x), 20)\n\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "31b84522628b463e9e35f8337da9486d": [
        "def solution():\n    total_weight_durian = 3 * 2.6\n    total_weight_watermelon = 5 * 9.24\n    total_fruits = 3 + 5\n    total_weight = total_weight_durian + total_weight_watermelon\n    average_weight = total_weight / total_fruits\n    return average_weight\n\nans = solution()"
    ],
    "2112c6328fbd45fe9356d8c4b6c92b4e": [
        "def solution():\n    people = 85\n    price_per_person = 1.30\n    total_money_collected = people * price_per_person\n    return total_money_collected\n\nans = solution()"
    ],
    "fb0704ef09444ba29e79685e326dd2b9": [
        "def solution():\n    number = 42008\n    one_million = 1000000\n    difference = one_million - number\n    return difference\n\nans = solution()"
    ],
    "c29aa8875cbd4e7d9da3314c1b9a63d0": [
        "def solution():\n    # Calculate the total time spent jogging and walking\n    jogging_time = 1       # from 6:30 AM to 7:30 AM is 1 hour\n    walking_time = 2       # from 7:30 AM to 9:30 AM is 2 hours\n\n    # Speeds\n    jogging_speed = 6.5    # in miles per hour\n    walking_speed = 4.5    # in miles per hour\n\n    # Total distance traveled\n    total_distance = (jogging_speed * jogging_time) + (walking_speed * walking_time)\n\n    return total_distance\n\nans = solution()"
    ],
    "d9b578012565439f986a633f66f05484": [
        "def solution():\n    # Given values\n    total_questions = 40\n    score_for_correct_answer = 2\n    score_for_wrong_answer = -1\n    total_score = 71\n    \n    # Calculation based on the assumption that all answers were correct\n    correct_answers_by_assumption = total_questions\n    total_score_by_assumption = correct_answers_by_assumption * score_for_correct_answer\n    \n    # The actual difference in the total score\n    score_difference = total_score_by_assumption - total_score\n    \n    # Using the correct values for score deduction for wrong answers\n    wrong_answers = score_difference // (score_for_correct_answer - abs(score_for_wrong_answer))\n    \n    return wrong_answers\n\nans = solution()"
    ],
    "eca10a43dea24e5b8f40734daf3f5e9e": [
        "def solution():\n    # There are 4 patterns, each with 1 'A' card, thus 4 'A's in total in the deck.\n    # To ensure getting at least 1 'A', we must consider the worst case scenario:\n    # drawing all cards except 'A's (13*4 - 4 in total since there are 4 patterns).\n    # Therefore, we must draw one more card to guarantee an 'A'.\n\n    worst_case_without_A = 13 * 4 - 4\n    draws_to_ensure_A = worst_case_without_A + 1\n\n    return draws_to_ensure_A\n\nans = solution()"
    ],
    "5ff26caf1d8641c3b74748b9efd22500": [
        "def solution():\n    pens = pencils = 1  # Start with 1 pen and 1 pencil\n    \n    while True:\n        if 2 * (pencils - 5) == pens:\n            break  # Found the solution where pens are twice the pencils after giving 5 away\n        pens += 1\n        pencils += 1  # Increment pens and pencils since she bought the same number\n    \n    pens += 18  # She then bought another 18 pens\n    return pens\n\nans = solution()"
    ],
    "5a05da475bdf4d4f9c26b86b5ca7c335": [
        "def solution():\n    count = 0\n    for i in range(1, 319):\n        count += str(i).count('3')\n    return count\n\nans = solution()"
    ],
    "7a2fec9d9f2a4cacbf558f6ae3813319": [
        "def solution():\n    speed_in_still_water = 33\n    speed_of_current = 7\n    distance = 320\n\n    speed_downstream = speed_in_still_water + speed_of_current\n    time = distance / speed_downstream\n\n    return time\n\nans = solution()"
    ],
    "ec60860f433c4d77837f8b9b847882cc": [
        "def solution():\n    ben_sweets = 17\n    bob_sweets = 14\n    total_sweets = ben_sweets + bob_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "dc98d04066844b33b74e3117952005e5": [
        "def solution():\n    count = 0\n    for i in range(1, 100):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "e7da9c665b464c9ca102d23b33677067": [
        "def solution():\n    count = 0\n    for i in range(1, 226):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "f6df262ec3d8481f8a51b4a2492214da": [
        "def solution():\n    total_books = 70\n    piles = 10\n    books_per_pile = total_books // piles\n    return books_per_pile\n\nans = solution()"
    ],
    "14254cf94d7540a7a332d80102aa8f38": [
        "def solution():\n    ans = 6081 - 5076\n    return ans\n\nans = solution()"
    ],
    "1b632632619c4c03a2a49fc43f39ccb8": [
        "def solution():\n    left_handed_tennis_players = 16\n    fraction_of_left_handed_tennis_players = 1 / 10\n    fraction_of_left_handed = 0.25\n\n    # Calculate the number of left-handed students\n    left_handed_students = left_handed_tennis_players / fraction_of_left_handed_tennis_players\n\n    # Calculate the total number of students\n    total_students = left_handed_students / fraction_of_left_handed\n\n    return int(total_students)\n\nans = solution()"
    ],
    "3badf3ad5d7e4d65997e7dba4984ed0d": [
        "def solution():\n    cookies_per_gram = 80 / 20  # The number of cookies one can make per gram of butter\n    butter_needed = 100 / cookies_per_gram  # The grams of butter needed for 100 cookies\n    return butter_needed\n\nans = solution()"
    ],
    "d524ba10be4e42d287da738c4dd0f9f7": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    departure_time = \"10:35 AM\"\n    travel_time = timedelta(hours=3, minutes=35)\n\n    departure_time_object = datetime.strptime(departure_time, \"%I:%M %p\")\n    arrival_time_object = departure_time_object + travel_time\n\n    return arrival_time_object.strftime(\"%I:%M %p\").lstrip('0')\n\nans = solution()"
    ],
    "67cd26c1867b4d648638a34d32fad1b9": [
        "def solution():\n    initial_length = 240\n    cut_length = 45 * 2  # Peter cuts two 45cm lengths\n\n    remaining_length = initial_length - cut_length\n    size_of_each_cut = 40\n\n    number_of_40cm_lengths = remaining_length // size_of_each_cut\n\n    return number_of_40cm_lengths\n\nans = solution()"
    ],
    "c95c7f2647524a1b84a553fdaf384550": [
        "def solution():\n    count, number, zeros = 0, 0, 0\n    while zeros < 100:\n        number += 1\n        count += str(number).count('0')\n        if count >= 100:\n            additional_zeros = count - 100\n            zeros_in_this_number = str(number).count('0')\n            # Subtract the additional zeros that exceed 100 to find the exact number\n            if additional_zeros > 0:\n                number -= 1\n                break\n            else:\n                break\n    return number\n\nans = solution()"
    ],
    "361af5c7444d4a77a809bd5fb28f128e": [
        "def solution():\n    juice_per_carton = 3\n    total_cartons = 8\n    juice_consumed = 9\n    \n    total_juice = juice_per_carton * total_cartons\n    juice_left = total_juice - juice_consumed\n    \n    return juice_left\n\nans = solution()"
    ],
    "57c249281b304080a78e5214cc07daa6": [
        "def solution():\n    principal = 3600\n    rate = 0.02\n    time = 10\n\n    interest = principal * rate * time\n\n    return interest\n\nans = solution()"
    ],
    "6e3e5239895349b08896dfe4a2f9817a": [
        "def solution():\n    # Each of the three places can be filled with any of the three digits\n    # So we have 3 choices for each place: hundreds, tens, and ones.\n    ways = 3 * 3 * 3\n    return ways\n\nans = solution()"
    ],
    "eda84d19ef334353a874d1471a677058": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2 * x - 2), 30 - 3 * x)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "b7fd46892ef74e929cb5d1f4d54a7f75": [
        "def solution():\n    speed_fast = 180\n    time_fast = 6\n    speed_slow = 120\n    time_slow = 8\n\n    distance = (speed_fast * time_fast) + (speed_slow * time_slow)\n\n    return distance\n\nans = solution()"
    ],
    "b592cb34a1374b25a352ce50080da48d": [
        "def solution():\n    total_cars = 60\n    red_cars = (5/12) * total_cars\n    blue_cars = (20/100) * total_cars\n    neither_cars = total_cars - red_cars - blue_cars\n    return int(neither_cars)\n\nans = solution()"
    ],
    "56c90f1a30374a13b09ffe20646206b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bud, pip, tom = symbols('bud pip tom')\n\n    equation1 = Eq(bud, 3 * pip)\n    equation2 = Eq(tom, 2 * bud)\n    equation3 = Eq(bud + pip + tom, 50)\n\n    solutions = solve((equation1, equation2, equation3), (bud, pip, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "e084829c18924d79acacaf75a980d4f9": [
        "def solution():\n    people_in_front_of_elias = 25\n    danya_position_from_back = 14\n\n    total_people = people_in_front_of_elias + danya_position_from_back + 1 # Add Elias\n\n    return total_people\n\nans = solution()"
    ],
    "8e1c584bb43949dc93fc621494c3073f": [
        "def solution():\n    # Let the first term of the arithmetic sequence be x.\n    # Then the terms are x, x+1, x+2, ..., x+7 because they are consecutive whole numbers.\n    \n    # The sum of an arithmetic sequence with n terms, first term a1 and last term an is: S = n*(a1 + an)/2\n    # Here, n = 8 (eight consecutive numbers), S = 2012 (given sum)\n    \n    # Let's solve for x using the formula for the sum of the first n terms of an arithmetic sequence.\n    # 2012 = 8*(x + (x+7))/2\n    # 2012 = 4*(2*x + 7)\n    # 2012 = 8*x + 28\n    # 8*x = 1984\n    # x = 1984 / 8\n    # x = 248\n    \n    # But we need to find the largest number, which is x+7\n    largest_number = 248 + 7\n    \n    return largest_number\n\nans = solution()"
    ],
    "90a6c5c7e28a4bc489bb3ef6acd51b15": [
        "def solution():\n    sachin_rate = 1 / 3\n    peter_rate = 1 / 6\n\n    combined_rate = sachin_rate + peter_rate\n    time_together = 1 / combined_rate\n\n    return time_together\n\nans = solution()"
    ],
    "d15e0e53fbde4c1aa79efca6f630157d": [
        "def solution():\n    percentage = (42 / 35) * 100\n    return percentage\n\nans = solution()"
    ],
    "65df19ad9a52462f88ad9585d2e88ca8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a = symbols('a')\n    equation = Eq(3*a + 8, 14)\n    solutions = solve(equation, a)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "1f3250a1ab714b5a93c359bb33407829": [
        "def solution():\n    ans = 24.4 * 1000\n    return ans\n\nans = solution()"
    ],
    "015418b57d46449a8b2161571801303b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbols for the number of students in class A and class B\n    A, B = symbols('A B')\n\n    # Equations based on the problem statement\n    equation1 = Eq(A, 5/7 * B)  # A is 5/7 of B\n    equation2 = Eq(A + 3, 4/5 * (B - 3))  # After transferring 3 students, A is 4/5 of B\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "7991c8c9adaf4cbb9a682e09102844fc": [
        "def solution():\n    ans = 52248 // 12\n    return ans\n\nans = solution()"
    ],
    "6fd5f6f4f4764d0a976b09a87613282b": [
        "def solution():\n    # Let the side of the square formed by the boys be x.\n    # The total number of boys would then be x^2.\n    # After adding the girls, the new side of the square becomes x + 1.\n    # The total number of students after adding the girls would be (x + 1)^2.\n    # There are 17 girls, so the difference between the two squares is 17.\n    # Setting up the equation: (x + 1)^2 - x^2 = 17\n\n    # Find the value of x by solving the equation\n    x = 0\n    while (x + 1) ** 2 - x ** 2 != 17:\n        x += 1\n\n    # The total number of boys is x^2\n    num_boys = x ** 2\n\n    return num_boys\n\nans = solution()"
    ],
    "12524a06278546ab8e9e8b16a0f5e800": [
        "def solution():\n    # Let's denote x as the number of bottles Faye has at first.\n    # Based on the problem, Faye swapped 5 times. At each swap, she uses 3 bottles\n    # to get 1 new bottle. We also know she managed to exchange for 4 new bottles\n    # but got 1 more than expected. This means without the extra 1 bottle, she would\n    # have been able to exchange for 3 new bottles. So, she had 3*3 + 1 = 10 bottles after 5 swaps.\n    # Since she swapped 5 times, she used 3*5 = 15 bottles for the swaps.\n    # Thus, initially, Faye had 10 bottles + 15 bottles used for swapping.\n  \n    initial_bottles = 10 + 15\n    return initial_bottles\n\nans = solution()"
    ],
    "76ba583e46624ad6ad49e0fa892660ad": [
        "def solution():\n    total_litres = 40\n    flow_rate_ml_per_sec = 125\n    total_ml = total_litres * 1000  # Convert litres to millilitres\n    time_seconds = total_ml / flow_rate_ml_per_sec\n\n    return time_seconds\n\nans = solution()"
    ],
    "355ee489190e440a97b10b0e4a181b2c": [
        "def solution():\n    pages = 0\n    total_digits = 0\n    \n    while total_digits < 237:\n        pages += 1\n        total_digits += len(str(pages))\n\n    return pages if total_digits == 237 else pages - 1\n\nans = solution()"
    ],
    "6424a92c08be44a48125b4a91cdf0541": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Define variables\n    d = symbols('d')  # distance in kilometers\n\n    # If she leaves at 1pm and arrives at 7pm, it takes 6 hours\n    original_time = 6  # hours\n    new_time = original_time - 1  # 1 hour earlier\n\n    # Create two equations based on the information provided\n    # First equation for original speed\n    original_speed = d / original_time  # d = speed * time\n    # Second equation for the new speed with conditions\n    new_speed = d / new_time  # d = (original_speed + 2) * (original_time - 1)\n\n    # Set up the equation according to the problem conditions\n    eq = Eq(original_speed + 2, new_speed)\n\n    # Solve for the distance\n    distance = solve(eq, d)[0]\n\n    return distance\n\nans = solution()"
    ],
    "4cc013248faa4925b3066d0d0269c175": [
        "def solution():\n    incorrect_total = 1468  # the incorrect average savings\n    correct_total = 1462    # the actual average savings\n    \n    difference_in_savings = incorrect_total - correct_total\n    \n    incorrect_day_savings = 1268\n    actual_day_savings = 1082\n    \n    difference_in_day = incorrect_day_savings - actual_day_savings\n    \n    days_count = difference_in_day / difference_in_savings\n    \n    return int(days_count)\n\nans = solution()"
    ],
    "3f0badddf0e84f4285bbd3a1d9b4b2e7": [
        "def solution():\n    # Cutting into 4 pieces means making 3 cuts.\n    minutes_per_cut = 12 / 3\n    \n    # To cut into 12 pieces, we need 11 cuts.\n    minutes_to_cut_12_pieces = minutes_per_cut * 11\n    \n    return minutes_to_cut_12_pieces\n\nans = solution()"
    ],
    "c5b38e5e2199435c95eb989e88e91cc9": [
        "def solution():\n    year_of_birth = 1940 - 80\n    current_year = 2011\n    age_of_oak_tree = current_year - year_of_birth\n    return age_of_oak_tree\n\nans = solution()"
    ],
    "7215e81d77604964bf294178622f8fee": [
        "def solution():\n    nth_term = 10\n    nth_value = 31\n    common_difference = 28 - 25\n\n    first_term = nth_value - (nth_term - 1) * common_difference\n    return first_term\n\nans = solution()"
    ],
    "75742fbf8de24d479bd0cd4b5397eb2d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, d = symbols('a d')  # 'a' represents the first term, and 'd' represents the common difference\n\n    # The nth term of an arithmetic sequence is given by a_n = a + (n-1)*d\n    # Here we set up our equations based on the given information:\n    eq1 = Eq(a + 8*d, a + 14*d + 18)  # 9th term is 18 more than 15th term\n    eq2 = Eq((a + 19*d) + (a + 11*d), 88)  # sum of 20th and 12th terms is 88\n\n    # Solve the system of equations\n    solution = solve((eq1, eq2), (a, d))\n\n    # Now we use the solution to find the 32nd term\n    a32nd_term = solution[a] + 31 * solution[d]\n\n    return a32nd_term\n\nans = solution()"
    ],
    "baabee468b9f46dd9d3a226e53fabfd7": [
        "def solution():\n    from sympy import symbols\n    \n    x = symbols('x')\n    lhs = (8*x + 8) / 2 - 3 * (x + 6)\n    correction = lhs.simplify()\n\n    return correction\n\nans = solution()"
    ],
    "0dd2e9d562984533a486b18296484a81": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(22 + 3 * (6 - 2 * x), 8 + 10 * x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a7861f09bf0047a1abbdf01cf43d20db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for their ages\n    lily, marry, carol = symbols('lily marry carol')\n    \n    # Define the equations based on the problem statement\n    equation1 = Eq(4 * lily * marry * carol, 2240)\n    equation2 = Eq(carol, marry + 2)\n    equation3 = Eq(marry, lily + 1)\n    \n    # Solve the system of equations for the ages\n    solutions = solve((equation1, equation2, equation3), (lily, marry, carol))\n\n    # Return Carol's age\n    return solutions[carol]\n\nans = solution()"
    ],
    "ca0a4ee804934a22b8a061da9f276028": [
        "def solution():\n    total_flowers = 200\n    red_flowers = total_flowers * 2 // 5\n    purple_flowers = total_flowers * 1 // 8\n    return red_flowers + purple_flowers\n\nans = solution()"
    ],
    "539f23e975a649d497568948c5e3f459": [
        "def solution():\n    number = 38942\n    remainder = number % 9\n    ans = remainder if remainder == 0 else 9 - remainder\n    return ans\n\nans = solution()"
    ],
    "a7676438a1a847d8ab70d7998ed51f7a": [
        "def solution():\n    # Since we can't have zero marbles in a pile, the smallest number in any pile should be 1.\n    # If we choose the number of marbles for the first pile, the number of marbles for the second pile is determined.\n    # Therefore, for 10 marbles, the first pile can have any number from 1 to 9,\n    # which directly determines the count for the second pile.\n    # This gives us 9 possibilities directly.\n    # Thus, the number of different ways to distribute 10 marbles into 2 piles is 9.\n\n    return 9\n\nans = solution()"
    ],
    "f0ea959eec6b41118011cbb0ba3f17c6": [
        "def solution():\n    ans = 6444 // 18\n    return ans\n\nans = solution()"
    ],
    "503dcced126a4cae9f67e60f2048cded": [
        "def solution():\n    # unit conversion: 1 liter is approximately 1.05669 quarts\n    coke_liters = 2.5\n    cup_quarts = 0.5\n    coke_quarts = coke_liters * 1.05669  # convert liters to quarts\n    num_cups = coke_quarts / cup_quarts  # calculate number of cups\n\n    return round(num_cups)\n\nans = solution()"
    ],
    "a4c428257cff4445a4d9df7423135eaf": [
        "def solution():\n    # To ensure getting 3 toy cars of the same colour, Jeremy needs to consider the worst-case scenario:\n    # Picking the maximum number of cars without getting 3 of the same color, which is:\n    # Picking 2 red, 2 blue, and 2 white,\n    # Since after this, the next car he picks must be the third car of one of these colors.\n\n    # Picking 2 red, 2 blue, and 2 white\n    picks = 2 + 2 + 2\n\n    # The next pick will ensure 3 of the same color\n    picks += 1\n    \n    return picks\n\nans = solution()"
    ],
    "31cea5404a28497fa58c3d4ac14250bf": [
        "def solution():\n    # Convert lengths to metres\n    wood1 = 85 / 100\n    wood2 = 2\n    wood3 = 147 / 100\n    \n    # Calculate total length in metres\n    total_length = wood1 + wood2 + wood3\n    \n    return total_length\n\nans = solution()"
    ],
    "02cec2fdec424ee0a518fe03ccd11faa": [
        "def solution():\n    integer_part = 2\n    decimal_part = 34 / 100\n    ans = integer_part + decimal_part\n    return ans\n\nans = solution()"
    ],
    "89245e2c38cd4e249921977cacaefb32": [
        "def solution():\n    max_ants = 0\n    for spiders in range(65):\n        legs = spiders * 8\n        ants = (64 - legs) // 6\n        if legs + ants * 6 == 64 and ants >= max_ants:\n            max_ants = ants\n    return max_ants\n\nans = solution()"
    ],
    "521225eba88d499087ca7a728e7babaa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin = symbols('justin')\n    vivian = 5 * justin + 8\n\n    equation = Eq(vivian, justin + 48)\n\n    solution = solve(equation, justin)\n\n    vivian_coins = solution[justin] * 5 + 8\n\n    return vivian_coins\n\nans = solution()"
    ],
    "e4b841a897a04191927b64bfe38ff722": [
        "def solution():\n    stamps_left = 34\n    stamps_after_giving = stamps_left + 2  # Adding the 2 stamps used to send the letter\n    stamps_after_buying = stamps_after_giving - 11  # Subtracting the 11 stamps bought\n    initial_stamps = stamps_after_buying + 14  # Adding the 14 stamps given to her sister\n  \n    return initial_stamps\n\nans = solution()"
    ],
    "c7d9e6a152bf4aac8eb62a0c004333d5": [
        "def solution():\n    litres_to_millilitres = 7.5 * 1000\n    return litres_to_millilitres\n\nans = solution()"
    ],
    "730d6fe3d6a34ed4b170b749c262e84f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variable for the number we are looking for\n    x = symbols('x')\n    \n    # Perform the operations in reverse order, since we know the result is 6\n    # Start by multiplying by 6\n    step1 = 6 * 6\n    \n    # Subtract 6\n    step2 = step1 - 6\n    \n    # Divide by 6\n    step3 = step2 / 6\n    \n    # Add 6 to complete the reversal of operations\n    final_expression = step3 + 6\n    \n    # Create the equation based on the operations\n    equation = Eq(final_expression, x)\n    \n    # Solve the equation\n    solution = solve(equation, x)\n    \n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "6e99e1ccf3764b41b183ed57f3093159": [
        "def solution():\n    # Let h be the height from which the ball was dropped initially\n    # After first bounce, it reaches 3h\n    # After second bounce, it reaches 3 * 3h = 9h\n    # After third bounce, it reaches 1/2 * 9h = 9h/2\n    # After fourth bounce, it reaches 1/2 * (9h/2) = 9h/4\n    # We are given that 9h/4 = 36, let's solve for h\n    \n    height_after_fourth_bounce = 36\n    # Calculating the original height\n    h = (4 / 9) * height_after_fourth_bounce\n    \n    return h\n\nans = solution()"
    ],
    "71c5dafbfe4e49e48f3ff2ba324fa816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x and y be the two original numbers\n    x, y = symbols('x y')\n\n    # Equation 1: the sum of two numbers is 11.63\n    eq1 = Eq(x + y, 11.63)\n    \n    # Equation 2: Oliver got an answer of 5.87 incorrectly by shifting the decimal\n    # If he shifted the decimal of y, the incorrect sum would be x + y/10\n    # If he shifted the decimal of x, the incorrect sum would be x/10 + y\n    # Since we don't know which number got shifted, we can check both cases\n    # However, we only need to solve one, as the difference will be the same\n    \n    eq2 = Eq(x + y/10, 5.87)\n\n    # Solving the system of equations\n    solutions = solve((eq1, eq2), (x, y))\n\n    # Calculating 100 times the difference between the two numbers\n    difference = abs(solutions[x] - solutions[y]) * 100\n\n    return difference\n\nans = solution()"
    ],
    "c847b4e44f3b41f4925f34fe099d474a": [
        "def solution():\n    ans = 2 * 9 + 200 + 9\n    return ans\n\nans = solution()"
    ],
    "c0478d9244ba49339b683a82526b16a9": [
        "def solution():\n    initial_amount = 32\n    spent = initial_amount / 2\n    remaining = initial_amount - spent\n    return remaining\n\nans = solution()"
    ],
    "945736381b124f10ad0d4586420a9666": [
        "def solution():\n    for number in range(30, 41):\n        if number % 3 == 0 and number % 4 == 0:\n            return number\n\nans = solution()"
    ],
    "2826012497a04a32b3544b4cbd378949": [
        "def solution():\n    eggs_per_tray = 16\n    total_trays = 40\n    total_eggs = eggs_per_tray * total_trays\n    return total_eggs\n\nans = solution()"
    ],
    "e6b3da9856474849a7c73d75f573f103": [
        "def solution():\n    for a in range(10):\n        for b in range(10):\n            for c in range(10):\n                for d in range(10):\n                    for e in range(10):\n                        number = 8 * 100000 + a * 10000 + b * 1000 + c * 100 + d * 10 + e\n                        all_digits = {8, a, b, c, d, e}\n                        if len(all_digits) == 6 and number % 3 == 0 and number % 4 == 0 and number % 5 == 0:\n                            return number\n    return None\n\nans = solution()"
    ],
    "9074f61b08b34feb83fb6026f085b5f2": [
        "def solution():\n    single_track_cost_p = 99\n    total_tracks = 12\n    whole_cd_cost_p = 899  # 8.99 pounds in pence\n\n    cost_individual_tracks = single_track_cost_p * total_tracks\n    savings = cost_individual_tracks - whole_cd_cost_p\n\n    # Convert savings back to pounds\n    savings_pounds = savings / 100\n\n    return savings_pounds\n\nans = solution()"
    ],
    "e1c6641aa30549ec93c747f03b8fde94": [
        "def solution():\n    total_paid = 20  # in pounds\n    biscuits = 1.69  # in pounds\n    milk = 0.82  # in pounds\n    teabags = 2.99  # in pounds\n\n    total_spent = biscuits + milk + teabags\n    change = total_paid - total_spent\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "f20519cbe24047f480f153f89d45c8f9": [
        "def solution():\n    answers = set()\n    for i in range(10, 100):  # loop over all 2-digit numbers\n        original = i\n        reversed_num = int(str(original)[::-1])  # reverse the digits\n        difference = abs(original - reversed_num)  # find the absolute difference\n        answers.add(difference)\n    # After observation, we find that the answers are multiples of 9\n    ans = all(diff % 9 == 0 for diff in answers)\n    return ans\n\nans = solution()"
    ],
    "022ef21b0ed847d68df150adecb637ea": [
        "def solution():\n    digits = [1, 2, 3]\n    two_digit_numbers = set()\n\n    for d1 in digits:\n        for d2 in digits:\n            if d1 != d2:\n                number = d1 * 10 + d2\n                two_digit_numbers.add(number)\n\n    return len(two_digit_numbers)\n\nans = solution()"
    ],
    "4b2c1678e7f14496a3b8d08653cd8693": [
        "def solution():\n    smallest = \"\".join(map(str, sorted(range(10))[:5]))\n    largest = \"\".join(map(str, sorted(range(10), reverse=True)[:5]))\n    difference = int(largest) - int(smallest)\n    return difference\n\nans = solution()"
    ],
    "7123aa7bbad1493684f0f3f2ffa7852a": [
        "def solution():\n    for N in range(10):\n        if (300 + 10 * N + 3) % 9 == 1:\n            return N\n\nans = solution()"
    ],
    "40503ef3b45647cda8ec8ab5a12a3568": [
        "def solution():\n    ans = 19 + 27 - 9 - 7 + 8\n    return ans\n\nans = solution()"
    ],
    "cc3b876c55ae46299e40246b9eafb3d1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    peter, sam = symbols('peter sam')\n\n    # Sam Sam had 40 stickers more than Peter.\n    equation1 = Eq(sam, peter + 40)\n    # Sam gave 20% of his stickers to Peter.\n    equation2 = Eq(sam - 0.20 * sam, sam - (sam - peter) / 5)\n    # Peter gave 25% of his stickers to Sam.\n    equation3 = Eq(peter + 0.20 * sam - (peter + 0.20 * sam) / 4, peter + (sam - peter) / 5)\n    # In the end, Sam had 96 stickers more than Peter.\n    equation4 = Eq(sam - 0.20 * sam + (peter + 0.20 * sam) / 4, peter + 0.20 * sam - (sam - peter) / 5 + 96)\n\n    # Now solve the equations\n    solutions = solve((equation1, equation2, equation3, equation4), (peter, sam))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "bff9eb9a097b4c9fbe698fb9361765b1": [
        "import math\n\ndef solution():\n    return math.factorial(10)\n\nans = solution()"
    ],
    "73d622eab89d4aeab04694fa52f525db": [
        "def solution():\n    A = (3 * 13 + 5 * 13) / 8\n    return A\n\nans = solution()"
    ],
    "9dd11761e2f946e1aaa0f232e5513538": [
        "def solution():\n    length_of_train = 450  # in meters\n    time_to_pass_tree = 15  # in seconds\n    \n    # Speed is distance divided by time\n    speed_of_train = length_of_train / time_to_pass_tree\n    \n    return speed_of_train\n\nans = solution()"
    ],
    "64d9c0d96e8b4b6a9b2af8e53a386877": [
        "def solution():\n    salt = 8\n    water = 32\n    total_solution = salt + water\n\n    concentration = (salt / total_solution) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "8fdba5860ae8459494f40b54d38548a9": [
        "def solution():\n    ans = 70 * 40 / 100\n    return ans\n\nans = solution()"
    ],
    "3fc4b3f3cb89424db751f420508a1d40": [
        "def solution():\n    pencil_cost = 2\n    pen_cost = 4\n\n    pencils_per_pen = pen_cost // pencil_cost\n\n    return pencils_per_pen\n\nans = solution()"
    ],
    "a1f84fb286e24074ba7396201d611eff": [
        "def solution():\n    people_in_front_of_Ali = 14\n    Bala_behind_Ali = 1\n    people_behind_Bala = 10\n\n    total_people = people_in_front_of_Ali + Bala_behind_Ali + people_behind_Bala + 1  # +1 for Ali\n\n    return total_people\n\nans = solution()"
    ],
    "30fd86b9d9a641a881e71dc018c583f4": [
        "def solution():\n    friends = 4\n    # Each friend sends a card to each of the other friends, so we have to subtract 1 from the number of friends\n    cards_per_friend = friends - 1\n    # Total cards is then each friend times the number of cards each friend sends\n    total_cards = friends * cards_per_friend\n\n    return total_cards\n\nans = solution()"
    ],
    "d47c10d6ed9c4e61976326927d0db6ac": [
        "def solution():\n    ans = (18 - 17) + (16 - 15) + (14 - 13)\n    return ans\n\nans = solution()"
    ],
    "7fb2dd15b44a432ebf16f80ff0ac18d8": [
        "def solution():\n    count = 0\n    for i in range(1, 829):\n        count += str(i).count('9')\n    return count\n\nans = solution()"
    ],
    "06005d7a51944fbcab3a4f5650bb5d66": [
        "def solution():\n    from math import lcm\n    ans = lcm(1, 2, 3, 4, 5, 6)\n    return ans\n\nans = solution()"
    ],
    "29f757912336498e89b265d7c3dc2c68": [
        "def solution():\n    total_sum = sum(i * (i + 1) for i in range(1, 102))\n    return total_sum\n\nans = solution()"
    ],
    "9a0b6021c3bf41b6bfe3ce63e893970b": [
        "def solution():\n    initial_water = 2\n    jug_capacity = 7\n    jugs_added = 4\n\n    total_water = initial_water + jug_capacity * jugs_added\n\n    return total_water\n\nans = solution()"
    ],
    "4d874eded9f6441287acd8ba0029f6bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for each person\n    alan, bilal, chloe, david, emily = symbols('alan bilal chloe david emily')\n\n    # Set up the equations based on the information given\n    equation1 = Eq(alan, 74)\n    equation2 = Eq(bilal, 86)\n    equation3 = Eq(chloe, 2 * david)\n    equation4 = Eq(david, 3 * emily)\n    equation5 = Eq(alan + bilal + chloe + david + emily, 400)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "4916026562cd47e283b98f0d0cd4bf19": [
        "def solution():\n    total_days = 3 + 2 + 2\n    total_cookies = (9 * 3) + (15 * 2) + (10 * 2)\n    average_cookies = total_cookies / total_days\n    return average_cookies\n\nans = solution()"
    ],
    "51560f6fe7b14fcdb4bd060c96dbc1a9": [
        "def solution():\n    # Candy's work rate per day\n    candy_rate = 1 / 20\n    # David's work rate per day\n    david_rate = 1 / 25\n    \n    # We will use a for loop to test every possible day David could take off\n    # David can take a break from day 1 up to day 11 (not day 12 because that's when the job is finished)\n    for days_off in range(1, 12):\n        # Total work done by Candy\n        work_candy = candy_rate * 12\n        # Total work done by David\n        work_david = david_rate * (12 - days_off)\n        # If the sum of the work done by both is equal to 1, then that's the solution\n        if work_candy + work_david >= 1:\n            return days_off\n            \n    # If we went through the loop without returning, it means David didn't take a day off\n    return 0\n\nans = solution()"
    ],
    "aa1ba812762546cd8c78bc85ae3a25cc": [
        "def solution(y):\n    return y - 3\n\nans = solution(y)"
    ],
    "7a2a20573729484498268bb992ca72c1": [
        "def solution():\n    # The force exerted by the table on the book is equal in magnitude and opposite in direction to the force of gravity on the book.\n    # Since the mass of the book is 20N (which already accounts for the acceleration due to gravity), the force exerted by the table must also be 20N.\n    force_by_table = 20\n    return force_by_table\n\nans = solution()"
    ],
    "8ef2118cd0cb45d3a3940b6138d4e8da": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    total_income = 140000\n    first_50k_tax = 0.05 * 50000\n    remaining_tax = 15100 - first_50k_tax\n    remaining_income = total_income - 50000\n\n    # Equation for the tax on the income above $50,000\n    equation = Eq(remaining_tax, remaining_income * ((8 + T) / 100))\n\n    # Solve for T\n    T_value = solve(equation, T)\n\n    return T_value[0]\n\nans = solution()"
    ],
    "0f96314625f240a7a0bac5d0d7506fa0": [
        "def solution():\n    # We want to find out the worst case scenario in which Lily can get 6 balls of the same type.\n    # This can be achieved by assuming she takes out the other types of balls first.\n    \n    # First, she could take out all 5 basketballs and 5 volleyballs without getting 6 of the same type.\n    not_enough_basketballs = 5\n    not_enough_volleyballs = 5\n    \n    # After this, if she then takes out another ball, it will have to be either a football, a basketball or a volleyball.\n    # Since she has taken 5 of each of the other types, the next ball will give her 6 of that type.\n    \n    # Therefore, she must take out the previous 10 balls plus one more to guarantee 6 of the same type.\n    balls_needed = not_enough_basketballs + not_enough_volleyballs + 1\n    \n    return balls_needed\n\nans = solution()"
    ],
    "4a6392aa73ad47e08098f73769dc697c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let total_fruits be the total number of fruits in the box at first\n    # apples represent the number of apples in the box at first\n    total_fruits, apples = symbols('total_fruits apples')\n\n    # Equation based on the problem statement\n    equation1 = Eq(apples, 4/5 * total_fruits)  # 4/5 of the fruits were apples\n    # After 3/4 of the fruits are removed, 1/4 of the fruits are left\n    # From this 1/8 of the apples and 30 pears are left, so the remaining apples are apples/8\n    # apples - apples/8 represents the apples that were removed\n    equation2 = Eq(3/4 * total_fruits, apples - apples/8 + 30)\n\n    # Solve the equations for total_fruits and apples\n    solutions = solve((equation1, equation2), (total_fruits, apples))\n\n    return solutions[total_fruits]\n\nans = solution()"
    ],
    "0abf82b202384e50a18c63eb91160283": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols.\n    v = symbols('v')\n    g = 9.81  # acceleration due to gravity in m/s^2\n    h = 5.0  # height in meters from which the ball is dropped\n    m = 2.0  # mass of the ball in kg\n\n    # Using the equation for kinetic energy at the bottom: (1/2) * m * v^2\n    # Equate it to the potential energy at the top: m * g * h\n    # Note that mass 'm' cancels out from both sides of the equation.\n    # (1/2) * m * v^2 = m * g * h\n\n    equation = Eq(1/2 * m * v**2, m * g * h)\n\n    # Now we solve for 'v'.\n    solutions = solve(equation, v)\n\n    # We are interested in the positive value for speed.\n    speed = max(solutions)\n\n    return speed\n\nans = solution()"
    ],
    "936e8db367764ee7ad52e4eed4333f1b": [
        "def solution():\n    time_for_six_cakes = 36\n    cakes_made = 6\n    cakes_needed = 10\n\n    time_per_cake = time_for_six_cakes / cakes_made\n    total_time_for_ten_cakes = time_per_cake * cakes_needed\n\n    return total_time_for_ten_cakes\n\nans = solution()"
    ],
    "a4968c4a62914361ad7a1d205bb1e5b4": [
        "def solution():\n    bill = 40\n    tip_percentage = 0.15\n    tax_percentage = 0.08\n\n    tip = bill * tip_percentage\n    tax = bill * tax_percentage\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "58ee44d10dd9468d827490e2aa404506": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n\n    equation1 = Eq(stickers - 13*pupils, 190)\n    equation2 = Eq(stickers - 17*pupils, 50)\n\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "aaaca6fa5ad944f5b9d50ad2726de809": [
        "import math\n\ndef solution():\n    g = 9.81  # acceleration due to gravity in m/s^2\n    v0 = 5  # initial velocity in m/s\n    theta = 45  # angle in degrees\n    h = 30  # height in meters\n\n    theta_rad = math.radians(theta)  # convert angle to radians\n    v0x = v0 * math.cos(theta_rad)  # horizontal component of velocity\n    v0y = v0 * math.sin(theta_rad)  # vertical component of velocity\n\n    # Using kinematic equation to find time t when arrow hits the ground:\n    # 0 = h + (v0y * t) - (1/2 * g * t^2)\n    # This is a quadratic equation in the form of at^2 + bt + c = 0, where:\n    # a = -1/2 * g, b = v0y, and c = h\n    a = -0.5 * g\n    b = v0y\n    c = h\n    # We use the quadratic formula to solve for t: t = (-b +/- sqrt(b^2 - 4ac)) / (2a)\n    # We only take the positive root because time cannot be negative\n    t = (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\n\n    # Final velocity in y direction when arrow hits the ground (vfy = v0y - g*t)\n    vfy = v0y - (g * t)\n\n    # The final velocity (v) is the vector sum of v0x and vfy\n    v = math.sqrt(v0x**2 + vfy**2)\n\n    return v\n\nans = solution()"
    ],
    "f4b67240ff2e4eea856a54877b0f510d": [
        "def solution():\n    from math import factorial\n\n    # function to calculate combinations, nCr\n    def nCr(n, r):\n        return factorial(n) // (factorial(r) * factorial(n - r))\n\n    # Since each kid gets at least one orange, we distribute one to each first\n    oranges_to_distribute = 13 - 3  # because we've given each one orange already\n\n    # The problem now reduces to distributing 10 oranges to 3 kids without any restrictions,\n    # which can be solved using the \"stars and bars\" method (n+k-1)Cr(k-1) where n is the number of items to distribute\n    # and k is the number of containers (kids)\n\n    # There are n+k-1 slots, and we want to choose k-1 of them to place dividers\n    ans = nCr(oranges_to_distribute + 3 - 1, 3 - 1)\n\n    return ans\n\nans = solution()"
    ],
    "93268f61447f4bc89f03ed35d94d32d2": [
        "def solution():\n    food_options = 2          # sandwiches, burgers\n    drink_options = 3         # coffee, milk, tea\n    dessert_options = 4       # cake, pudding, ice-cream, pie\n\n    total_ways = food_options * drink_options * dessert_options\n\n    return total_ways\n\nans = solution()"
    ],
    "7d5b9285020f4096b89f646f6ac6914e": [
        "def solution():\n    ans = 78.16 * 1.45 + 3.14 * 21.84 + 169 * 0.7816\n    return ans\n\nans = solution()"
    ],
    "47ab709ca45c4de2874c7ae5d6b26888": [
        "def solution():\n    # we start by finding the smallest number with a digit sum of 20\n    # initialize smallest_num to start from the smallest number with digit sum of 20\n    smallest_num = 1e16\n    for i in range(1, 1e7):\n        # Convert the number to a string and sum its digits\n        if sum(int(digit) for digit in str(i)) == 20:\n            # Check if the number is divisible by 11\n            if i % 11 == 0:\n                smallest_num = min(smallest_num, i)\n    return smallest_num\n\nans = solution()"
    ],
    "a36914e472964629805f90180ee32817": [
        "def solution():\n    # We will iterate through all possible combinations of digits for each letter.\n    for S in range(1, 10): # S cannot be zero because it's the first digit of a 5-digit number.\n        for A in range(10):\n            for M in range(10):\n                for O in range(10):\n                    for G in range(10):\n                        if len({S, A, M, O, G}) == 5: # Ensuring all digits are different.\n                            SASMO = int(f\"{S}{A}{S}{M}{O}\")\n                            OGAMS = int(f\"{O}{G}{A}{M}{S}\")\n                            if SASMO * 4 == OGAMS:\n                                return SASMO\n\nans = solution()"
    ],
    "18e751b89c0f4f688755003c0becbb1a": [
        "def solution():\n    total_water = 48 + 28\n    equal_volume = total_water / 2\n    transfer_volume = equal_volume - 28\n\n    return transfer_volume\n\nans = solution()"
    ],
    "616e7eb6274e4b9f80158e3a237118cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for animals\n    elephant, cow, horse, pig = symbols('elephant cow horse pig')\n\n    # Given equations\n    equation1 = Eq(2 * elephant, 5 * cow)\n    equation2 = Eq(4 * cow, 3 * horse)\n    equation3 = Eq(3 * horse, 5 * pig)\n\n    # Calculate the ratio of one pig to one elephant\n    solutions = solve((equation1, equation2, equation3), (elephant, cow, horse, pig))\n\n    # Find out how many pigs weigh as much as 8 elephants\n    pigs_for_8_elephants = 8 * solutions[elephant] / solutions[pig]\n\n    return pigs_for_8_elephants\n\nans = solution()"
    ],
    "6f7fe67009984428871104da0134627c": [
        "def solution():\n    principal = 2000\n    amount_after_3_years = 2519.42\n    n = 3  # 3 years\n\n    # Compound interest formula: A = P * (1 + r/n)^(nt)\n    # where A is the amount, P is the principal, r is the annual interest rate, n is the number of times interest is compounded per year\n    # Since the interest according to the problem is compounded annually, n = 1\n    # We are looking for r. We have A and P.\n\n    # Rearrange the formula to solve for r:\n    # r = (A/P)^(1/n) - 1\n    r = (amount_after_3_years / principal) ** (1/n) - 1\n\n    return round(r * 100, 2)  # Convert to percentage and round to 2 decimal places\n\nans = solution()"
    ],
    "43ef6239d7c44a0183051685a5117a3a": [
        "def solution():\n    # Total amount given to cashier\n    total_given = (2 * 10) + (4 * 2) + (8 * 0.50)\n    \n    # Total cost of cups (after subtracting change received)\n    total_cost = total_given - 0.40\n    \n    # Cost per cup\n    cost_per_cup = total_cost / 4\n\n    return cost_per_cup\n\nans = solution()"
    ],
    "e47957966fd14e6a9af6de7b6554166e": [
        "def solution():\n    percent = 60 / 100\n    fraction = 2 / 5\n    number = 75\n\n    ans = percent * fraction * number\n\n    return ans\n\nans = solution()"
    ],
    "802ac638436e4b4fa6a0b74f166a9968": [
        "def solution():\n    bill = 50\n    tip_percentage = 0.18\n    tax_percentage = 0.10\n\n    tip = bill * tip_percentage\n    tax = bill * tax_percentage\n\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "a7860a3460d6490f888b36cb3f9823b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mango_price, lychee_price = symbols('mango_price lychee_price')\n    equation1 = Eq(24 * mango_price + 20 * lychee_price, 1160)\n    equation2 = Eq(lychee_price, 2 * mango_price - 6)\n\n    solutions = solve((equation1, equation2), (mango_price, lychee_price))\n\n    return solutions[lychee_price]\n\nans = solution()"
    ],
    "995ae0debbe74e3ca36d61e2bc8db3d4": [
        "def solution():\n    total_weight_5_boxes = 350\n    weight_per_box = total_weight_5_boxes / 5\n    total_weight_3_boxes = weight_per_box * 3\n    return total_weight_3_boxes\n\nans = solution()"
    ],
    "58a07f22b6ae4e54bc49c3b1f8bc18b8": [
        "def solution():\n    ans = 2.4 * 7 - (6.8 - 7 / 10)\n    return ans\n\nans = solution()"
    ],
    "f73e444fccf74dffa657783361eaec4a": [
        "from math import factorial\n\ndef solution():\n    # Factorial function for permutations calculation\n    def perm(n):\n        return factorial(n)\n    \n    # Calculate arrangements with comics together as one unit and fictions together as one unit\n    arrangement_options = perm(2)  # Two units: comics as one unit and fictions as one unit\n\n    # Calculate permutations within each comic books and fiction books\n    comic_permutations = perm(4)\n    fiction_permutations = perm(6)\n\n    # Multiply permutations within units by the arrangement options of the two units\n    total_permutations = arrangement_options * comic_permutations * fiction_permutations\n    \n    return total_permutations\n\nans = solution()"
    ],
    "7ead04e31502472f99c0ca926b39ba6f": [
        "from math import factorial\n\ndef solution():\n    # To satisfy the condition of at least one singing performance between every two dancing performances,\n    # we can initially arrange the 6 singing performances and then insert the dancing performances in between.\n    # After arranging the 6 singing performances, there are 7 slots (6 - 1) between them and one slot before\n    # the first and after the last singing performance where we could possibly insert a dancing performance.\n    # In total, that's 7 + 1 + 1 = 9 slots for the 4 dancing performances.\n    \n    # Calculate the number of ways to choose 4 slots from the 9 available slots for the dancing performances.\n    slots_for_dance = factorial(9) // (factorial(4) * factorial(9 - 4))\n    \n    # Since the dancing and singing performances are indistinguishable among themselves, we further multiply\n    # the number of ways to arrange the singing performances (which is just 1 way, as they are indistinguishable)\n    # by the number of ways to arrange the dancing performances (again, 1 way).\n    # So, the total number of ways is just the number of ways to distribute the dance performances into the slots.\n\n    ans = slots_for_dance\n    return ans\n\nans = solution()"
    ],
    "e09e01d9f1ee46fd9759c4157d7cb3cd": [
        "def solution():\n    # Let x be the average number of candies sold by each group in Class B\n    # Total candies sold by 3 groups in Class A = 3 * 12\n    # Total candies sold by 3 groups in Class A and 4 groups in Class B = 7 * 8\n\n    # Equation:\n    # (Total candies in A) + (Total candies in B) = (Total candies in A and B)\n    # 3 * 12 + 4 * x = 7 * 8\n\n    # Solve for x\n    x = (7 * 8 - 3 * 12) / 4\n\n    return x\n\nans = solution()"
    ],
    "325dbb02dff7405f9292450c4e4cc0df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of correct answers Dora gave\n    # Let y be the number of correct answers Justin gave\n    x, y = symbols('x y')\n\n    # Each person answered 10 questions\n    # Total points equation: 10*(correct) - 5*(incorrect) = total points\n    # Justin got 15 more points than Dora\n    equation1 = Eq(10*x - 5*(10-x), 10*y - 5*(10-y) - 15)\n    # Together they got 155 points\n    equation2 = Eq(10*x - 5*(10-x) + 10*y - 5*(10-y), 155)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "2636ac2e0f8a4fe4b34c78f1070efed0": [
        "def solution():\n    total_string_length = 250  # Total length of string in cm\n    used_string_length = 180   # Length of string used for parcel in cm\n    num_pieces = 10            # Number of shorter pieces to be cut\n\n    remaining_string_length = total_string_length - used_string_length\n    length_per_piece = remaining_string_length / num_pieces\n\n    return length_per_piece\n\nans = solution()"
    ],
    "03472dc686454fea90ff512c5ee5c03f": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    coffee_liters = 6\n\n    total_ratio = coffee_ratio + milk_ratio\n    latte_liters = (coffee_liters / coffee_ratio) * total_ratio\n\n    return latte_liters\n\nans = solution()"
    ],
    "558947a4413a469d810b676273f6d771": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (4, 5)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "edcff11e678a491588a876c850626fd8": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)  # Calculate the remaining passengers after the second stop\n    original_passengers = remaining_after_first_stop / (1 - 2/5)  # Calculate the original number of passengers before the first stop\n\n    return int(original_passengers)\n\nans = solution()"
    ],
    "b46ebbe765bd4ec282a9d4cddc1aaae1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let L be the time it takes for Lee to finish the job by herself\n    # Let N be the time it takes for Nancy to finish the job by herself\n    L, N = symbols('L N')\n    \n    # If they work together, they finish the job in 10 hours\n    # Their combined work rate is 1 job per 10 hours, i.e., 1/10 job/hour\n    equation1 = Eq(1/L + 1/N, 1/10)\n    \n    # Lee works for 6 hours and Nancy works for 20 hours to complete the job\n    # Their combined work is 1 job, i.e., Lee does 6/L of the job and Nancy does 20/N of the job\n    equation2 = Eq(6/L + 20/N, 1)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (L, N))\n    \n    # We want to know how long it takes Nancy to finish the job by herself\n    return solutions[N]\n\nans = solution()"
    ],
    "3eb0547b332f4b4cbda72d04972e652b": [
        "def solution():\n    return 45 / 100 * 80\n\nans = solution()"
    ],
    "bb50e26a7c3b4ac39e82395f0fbd0d95": [
        "from math import gcd\n\ndef solution():\n    numbers = (6, 9, 18)\n    return gcd(gcd(numbers[0], numbers[1]), numbers[2])\n\nans = solution()"
    ],
    "6bf07e1e42d0448f94f431aced05a8af": [
        "from math import comb\n\ndef solution():\n    num_people = 10\n    handshakes = comb(num_people, 2)\n    return handshakes\n\nans = solution()"
    ],
    "938d2bcb3f644872a707547c2058d4a7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_students = symbols('total_students')\n\n    equation = Eq((total_students / 4) + 3 + ((total_students - (total_students / 4) - 3) / 3) - 3 + 25, total_students)\n\n    solutions = solve(equation, total_students)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "c6adf9f4ee8d4ab6b37166fa2ee565c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    white, milk, dark = symbols('white milk dark')\n    \n    # The ratio given for white:milk:dark is 3:7:5\n    equation1 = Eq(white * 7, milk * 3)\n    equation2 = Eq(white * 5, dark * 3)\n    \n    # There are 8 more dark chocolates than white chocolates\n    equation3 = Eq(dark - white, 8)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (white, milk, dark))\n    \n    return solutions[milk]\n\nans = solution()"
    ],
    "fd6b3a86acd14b529b51cdd518e9a4a8": [
        "def solution():\n    big_square_side = 6\n    small_square_side = 3\n    ans = (big_square_side // small_square_side) ** 2\n    return ans\n\nans = solution()"
    ],
    "2c9bb3658d544a4ab8fdb08d93091cca": [
        "def solution():\n    # Let x be the number of red balls to be added.\n    # Total number of balls after adding x red balls will be 5 + x (red balls) + 10 (green balls).\n    # Probability of getting a green ball will be 10 / (15 + x).\n    # We want this probability to be 1/3. So, we have the equation 10 / (15 + x) = 1/3.\n    # Cross multiply to solve for x.\n    x = symbols('x')\n    equation = Eq(10 / (15 + x), 1/3)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e8b01adb4f7d4d8cbff0e3c9d3bc098f": [
        "def solution():\n    meters = 70.24\n    cm_per_meter = 100\n    cm = meters * cm_per_meter\n    return cm\n\nans = solution()"
    ],
    "271b87d6fd084f7eaa3b6cae9b7ba2b5": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "44b8a79ef3104647b9810c583a5a4c21": [
        "def solution():\n    # Since 5p is one quarter of her money, then the total money Avril had is 4 times 5p.\n    total_money = 5 * 4  # 5p is a quarter, so multiply by 4 to get the whole.\n    return total_money\n\nans = solution()"
    ],
    "5371e511c53e4a5f8747fe8e3a5e87ad": [
        "def solution():\n    return 12 * 3 * 50\n\nans = solution()"
    ],
    "a9ff37e5065046b585071011b2edb0c3": [
        "def solution():\n    total_cost = 25 + 10\n    change = 50 - total_cost\n    return change\n\nans = solution()"
    ],
    "c969df7dcbf546bcbc2a769e7568a5df": [
        "def solution():\n    # Calculate the ones digit of each term separately\n    ones_digit_32_33 = pow(32, 33, 10)  # 32^33 mod 10 gives the ones digit\n    ones_digit_22_29 = pow(22, 29, 10)  # 22^29 mod 10 gives the ones digit\n\n    # The subtraction of the ones digits will give the final ones digit\n    ones_digit_result = (ones_digit_32_33 - ones_digit_22_29) % 10\n\n    return ones_digit_result\n\nans = solution()"
    ],
    "6657a223a619480aabc4ab2e4d50e627": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols, Sam's and Peter's original number of stickers\n    sam, peter = symbols('sam peter')\n\n    # Given that Sam had 40 more stickers than Peter initially\n    equation1 = Eq(sam, peter + 40)\n\n    # Sam gives 20% of his stickers to Peter\n    sam_gave = sam * 0.20\n    # Peter then gives 25% of his stickers back to Sam\n    # Peter's sticker count after receiving from Sam\n    peter_after_sam_gives = peter + sam_gave\n    peter_gave = peter_after_sam_gives * 0.25\n    \n    # The final counts for Sam and Peter\n    sam_final = sam - sam_gave + peter_gave\n    peter_final = peter_after_sam_gives - peter_gave\n    \n    # In the end, Sam had 96 stickers more than Peter\n    equation2 = Eq(sam_final, peter_final + 96)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sam, peter))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "3020fb600b944914a5d9fcd520cae6fd": [
        "def count_sixes(n):\n    count = 0\n    for i in range(1, n + 1):\n        count += str(i).count('6')\n    return count\n\ndef solution():\n    pages = 1\n    while True:\n        if count_sixes(pages) == 18:\n            break\n        pages += 1\n    return pages\n\nans = solution()"
    ],
    "b24dd75457e8421e98afe8366bd50107": [
        "def solution():\n    count = 0\n    for die1 in range(1, 7):  # Possible rolls for the first die\n        for die2 in range(1, 7):  # Possible rolls for the second die\n            for die3 in range(1, 7):  # Possible rolls for the third die\n                if die1 != die2 and die2 != die3 and die1 != die3:\n                    if die1 + die2 + die3 == 12:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "5fe02e26ce5e42fc93b9699b286adec3": [
        "def solution():\n    fruits = 2\n    vegetables = 3\n    combinations = fruits * vegetables\n    return combinations\n\nans = solution()"
    ],
    "524308c13c044993b5bf5bba992cdbb7": [
        "def solution():\n    ans = 4619 + 457 + 88\n    return ans\n\nans = solution()"
    ],
    "3d6760aa4d044cbc825d82a834e51780": [
        "def solution():\n    height = 40\n    jump_up = 5\n    slide_down = 3\n    jumps_needed = 0\n\n    while height > 0:\n        jumps_needed += 1\n        height -= jump_up\n\n        if height <= 0:\n            break\n\n        if jumps_needed % 2 == 0:\n            height += slide_down\n\n    return jumps_needed\n\nans = solution()"
    ],
    "22e56c50744347a3be314d81fcaa4a39": [
        "def solution():\n    sum_ = 0\n    for n in range(1, 2013):\n        term = (n**3) / (n * (n + 1) * (n + 2))\n        sum_ += term\n    \n    sum_ += (1 / 4026)\n    return sum_\n\nans = solution()"
    ],
    "b5f0243f080b48f7ba4d7a62e9120e41": [
        "def solution():\n    # Using the property that ratios are equivalent\n    # If a:b = c:d, then a*d = b*c\n    # Here, we have ? : 81 = 4 : 9\n    # Let's denote the missing number as x\n    # So, x : 81 = 4 : 9\n    # x * 9 = 81 * 4\n    x = (81 * 4) / 9\n    return x\n\nans = solution()"
    ],
    "73eb429b39444b6784a10591bacf3800": [
        "from itertools import combinations\n\ndef solution():\n    flavors = 7\n    amount_wanted = 2\n    \n    possible_combinations = list(combinations(range(flavors), amount_wanted))\n    ans = len(possible_combinations)\n    \n    return ans\n\nans = solution()"
    ],
    "7492b9e26fc448699eab170daa00a7e4": [
        "def solution():\n    ans = None\n    for num in range(1, 100):\n        if num < 100 and num**0.5 == int(num**0.5) and (num + 1) % 5 == 0 and num % 16 == 0:\n            ans = num\n            break\n    return ans\n\nans = solution()"
    ],
    "f68d71c9bc684cafa24d741e381775bb": [
        "def solution():\n    first_term = 15\n    difference = 6\n    term_number = 6  # We want the 6th term because 5 are already given.\n\n    next_term = first_term + (term_number - 1) * difference\n\n    return next_term\n\nans = solution()"
    ],
    "79173ac47d4446a7a4b25de9f562a87c": [
        "def solution():\n    cans_per_day = 42 / 6\n    cans_in_9_days = cans_per_day * 9\n    return cans_in_9_days\n\nans = solution()"
    ],
    "6ba4e21d59274d4aab0481cae22611d3": [
        "from math import factorial\n\ndef solution():\n    total_letters = len(\"RAINBOW\")\n    total_vowels = len(\"AI\")\n    total_consonants = total_letters - total_vowels\n    \n    total_arrangement = factorial(total_letters)  # Total ways to arrange all letters.\n    vowels_arrangement = factorial(total_vowels)* factorial(total_consonants + 1)   # Total ways to arrange vowels together.\n    \n    ans = total_arrangement - vowels_arrangement\n    return ans\n\nans = solution()"
    ],
    "3fe260109d4545118d6fa5fb6542ba93": [
        "def solution():\n    total_questions = 80\n    total_marks = 152\n    correct_mark = 4\n    wrong_mark = -2\n\n    # Let x be the number of correct answers\n    # Then (total_questions - x) will be number of wrong answers\n    # We can set up the equation: x*correct_mark + (total_questions - x)*wrong_mark = total_marks\n    # By solving this equation, we find the value of x\n\n    x = symbols('x')\n    equation = Eq(x * correct_mark + (total_questions - x) * wrong_mark, total_marks)\n    correct_answers = solve(equation, x)\n\n    return correct_answers[0]\n\nans = solution()"
    ],
    "7b4fffccc9d443f6bae39d698e210c9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wendy, vivien = symbols('wendy vivien')\n\n    equation1 = Eq(wendy, 2 * vivien)\n    equation2 = Eq(vivien - 10, (wendy - 10) / 4)\n\n    solutions = solve((equation1, equation2), (wendy, vivien))\n\n    wendys_age_in_5_years = solutions[wendy] + 5\n\n    return wendys_age_in_5_years\n\nans = solution()"
    ],
    "c58f946556534129afb051e96256c03c": [
        "def solution():\n    # To share 16 sausages equally among 24 people\n    # each person should get 16/24 of a sausage\n    # Simplify the fraction 16/24 to its simplest form to find the minimum number of pieces\n    from fractions import Fraction\n    fraction = Fraction(16, 24).denominator\n    \n    # Since we need to cut all the sausages into pieces of size 1/fraction,\n    # The number of cuts for each sausage will be fraction - 1 (since each cut creates one additional piece)\n    # Total cuts needed will be 16 * (fraction - 1)\n    cuts_per_sausage = fraction - 1\n    total_cuts = 16 * cuts_per_sausage\n    \n    # But since every cut can go through multiple sausages if aligned properly,\n    # we only need fraction - 1 cuts in total to get pieces of size 1/fraction from all sausages\n    return fraction - 1\n\nans = solution()"
    ],
    "26af7f86bc8d46ac94cf787333d3fd91": [
        "def solution():\n    from math import gcd\n    # Differences between the numbers\n    diff1 = 51 - 39\n    diff2 = 147 - 51\n    diff3 = 147 - 39\n\n    # greatest common divisor will give the largest possible integer\n    ans = gcd(gcd(diff1, diff2), diff3)\n\n    return ans\n\nans = solution()"
    ],
    "13c1aaafec5c4eb2a546b2823b7c9da0": [
        "def solution():\n    ans = 3 / 8\n    return ans\n\nans = solution()"
    ],
    "b399219fb06d458cbe46dd2b1df7cb15": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    # After 500 mL of water was spilled out of Container A, B had twice as much water as A\n    equation1 = Eq(B, 2 * (A - 500))\n    \n    # A contained 350 mL more water than B\n    # Therefore, A = B + 350\n    equation2 = Eq(A, B + 350)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (A, B))\n    \n    return solutions[A]\n\nans = solution()"
    ],
    "46cef24404be44039ae2dc1b54fadeb2": [
        "def solution():\n    first_week = 2140\n    second_week = first_week - 320\n    third_week = second_week - 210\n    \n    total_tickets = first_week + second_week + third_week\n    return total_tickets\n\nans = solution()"
    ],
    "fa07d0a580554d999b6611baedc3f30f": [
        "def solution():\n    # Initialize the result variable\n    total_digits = 0\n\n    # Loop through ranges covering 1-9, 10-99, and 100-325\n    # 1-9: single digit, 10-99: double digits, 100-325: triple digits\n    for i in range(1, 10):\n        total_digits += 1\n    for i in range(10, 100):\n        total_digits += 2\n    for i in range(100, 326):   # 326 is exclusive, so up to 325 pages\n        total_digits += 3\n\n    return total_digits\n\nans = solution()"
    ],
    "fc84e91f2444473ea06eee0510e38067": [
        "def solution():\n    # Let x be the total number of team members.\n    # Lovelle and 5 other members spoke to each other. This forms 6 * 3 = 18 unique sentences.\n    # Since every sentence is said by one member to another, the total number of sentences is doubled:\n    sentences_spoken = 18 * 2\n\n    # 12 members did not speak to Lovelle, so they could have spoken to every other team member except for Lovelle.\n    # This means that each of these 12 members spoke 3 sentences to each of the x - 1 (excluding Lovelle) members.\n    # Sentences by 12 members not speaking to Lovelle:\n    sentences_not_spoken_to_lovelle = 12 * 3 * (x - 1)\n\n    # Since every team member including Lovelle said 3 sentences to each other, the total sentences are:\n    total_sentences = x * 3 * (x - 1)\n\n    # The total number of sentences said in the team is the sum of sentences spoken and not spoken to Lovelle:\n    # total_sentences = sentences_spoken + sentences_not_spoken_to_lovelle\n    # x * 3 * (x - 1) = 18 * 2 + 12 * 3 * (x - 1)\n    # Simplify the equation and solve for x:\n    x = (sentences_spoken + sentences_not_spoken_to_lovelle) // (3 * (x - 1))\n\n    # We start from x = 13 since 12 members did not speak to Lovelle, and we increment x until the equation matches.\n    x = 13\n    while True:\n        total_calculated_sentences = x * 3 * (x - 1)\n        if total_calculated_sentences == sentences_spoken + 12 * 3 * (x - 1):\n            return x\n        x += 1\n\nans = solution()"
    ],
    "cf5ba5b483a144138738a1737ed5a419": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    word = \"STATISTIC\"\n    count = 0\n    total_permutations = set(permutations(word))\n\n    for p in total_permutations:\n        if 'TT' not in ''.join(p):\n            count += 1\n    \n    return count // factorial(word.count('T'))\n\nans = solution()"
    ],
    "0d3504aeda6446b2821326f127f1ec2d": [
        "def solution():\n    ans = 81 + 81 / 9 + 110\n    return ans\n\nans = solution()"
    ],
    "fdb8c2ece83d4d068bfb7949b80be75f": [
        "def solution():\n    ans = 58 + 127\n    return ans\n\nans = solution()"
    ],
    "3330453138ae4958abd914a2a7448912": [
        "def solution():\n    total_pieces = 450\n    average_rate = 50  # pieces per hour\n\n    time_needed = total_pieces / average_rate  # time in hours\n\n    return time_needed\n\nans = solution()"
    ],
    "81087fa894824da4b6c11846677ddcec": [
        "def solution():\n    number = 418\n    rounding_base = 10\n    ans = round(number / rounding_base) * rounding_base\n    return ans\n\nans = solution()"
    ],
    "7aa2c65cbce244dcaa12d38ff857c220": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sarah, mark = symbols('sarah mark')\n\n    equation1 = Eq(sarah, mark + 20)\n    equation2 = Eq(sarah + 16, 3 * mark)\n\n    solutions = solve((equation1, equation2), (sarah, mark))\n\n    return solutions[sarah]\n\nans = solution()"
    ],
    "308a277543c04ae090ebdf3f5bdc0324": [
        "def solution():\n    ans = (2018 - 20 + 18) // 8\n    return ans\n\nans = solution()"
    ],
    "36b223a5a83d47b19a34d4a0c5a1649d": [
        "def solution():\n    ans = 17 + 18 + 29 + 6\n    return ans\n\nans = solution()"
    ],
    "6f69d6a468eb423cb027c930d2635209": [
        "def solution():\n    ans = 527 * 8\n    return ans\n\nans = solution()"
    ],
    "6e38f6f4ee8843d096766411ae11499d": [
        "def solution():\n    return 2.98 * 23\n\nans = solution()"
    ],
    "ab88cfc915d14fbb80689295c573dfcb": [
        "def solution():\n    for total_gums in range(1, 1000):  # Assuming a reasonable upper limit for the packet size\n        remaining_gums = total_gums - 2  # Ate 2 in Music lesson\n        shared_gums = remaining_gums // 3  # Shared a third with friends\n        if remaining_gums % 3 == 0:  # Must be divisible by 3 to share equally\n            final_gums = remaining_gums - shared_gums  # Remaining after sharing\n            if final_gums % 4 == 0:  # Must be divisible by 4 to eat equally in 4 lessons\n                return total_gums  # This is the smallest number satisfying the condition\n\nans = solution()"
    ],
    "51e3e0dca7794d3eaec40de5cb8e99fa": [
        "def solution():\n    sum_squares = sum([i**2 for i in range(1, 26, 2)])\n    return sum_squares\n\nans = solution()"
    ],
    "ab508b1e2f9a4215994ac2d9ef293ffd": [
        "def solution():\n    # Analyze the pattern by finding the differences between the numbers\n    differences = [3445 - 2945, 3245 - 3445, 3745 - 3245]\n    \n    # Detect the pattern in the differences\n    pattern_diff = differences[2] - differences[0]\n    \n    # Apply the pattern to find the missing number\n    missing_diff = differences[1] - pattern_diff\n    previous_number = 3745\n    missing_number = previous_number + missing_diff\n    \n    return missing_number\n\nans = solution()"
    ],
    "17b66351b21c4cb391ca2267e3a54abf": [
        "def solution():\n    for i in range(99, 9, -1):\n        if i % 3 == 0 and i % 5 == 0:\n            return i\n\nans = solution()"
    ],
    "c96e5aeffc5c4914b430832baafb7a02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    h = symbols('h')\n    equation = Eq(2 * h, 25 + h)\n    h_value = solve(equation, h)\n\n    return h_value[0]\n\nans = solution()"
    ],
    "8f01d238435847a7a31b2925c68c14ab": [
        "def solution():\n    # The worst case scenario is when the last key the explorer tries is the one that opens the first chest, \n    # the second last key for the second chest, and so on\n    # Therefore, for the first chest, the explorer might need to try all 9 keys\n    # For the second chest, since one key is ruled out, it might take 8 tries\n    # For the third chest, it might take 7 tries, and for the last chest, it might take 6 tries\n    # Thus, the total number of attempts in the worst case is 9 + 8 + 7 + 6\n    attempts = 9 + 8 + 7 + 6\n    return attempts\n\nans = solution()"
    ],
    "9691b4fae60c4d1e9e827ad0a388037a": [
        "def solution():\n    numerator = 15\n    denominator = 1/7\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "36eb6fb5682347a586edc281a6c0df91": [
        "def solution():\n    initial_value = 20000\n    depreciation_rate = 0.1\n    years = 6\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n    return final_value\n\nans = solution()"
    ],
    "28ab82b7bb864d0cae94f2ab3cd7c918": [
        "网络故障，请重试"
    ],
    "fb6a59597d654291bed01b4df12ecc2a": [
        "def solution():\n    # Number of gaps between the coins is one less than the number of coins\n    num_gaps_between_coins = 11 - 1\n    # Diameter of each coin\n    diameter_of_coin = 1.85  # in cm\n    \n    # Total length equals the total diameters of the coins plus the length of the gaps between coins\n    # Since the coins are touching, gaps are filled by part of the diameter of the adjacent coins, thus we don't add extra length for the gaps\n    total_length = diameter_of_coin * 11 + num_gaps_between_coins * 0\n    \n    return total_length\n\nans = solution()"
    ],
    "8abec5f9b93a4a2eb3f0ab042e5a2ec4": [
        "def solution():\n    # Let's denote x as the number of mushrooms gathered in the first hour.\n    # Then the number of mushrooms gathered in the second hour will be 40 - x.\n    # According to the problem, if 26 more mushrooms were gathered in the first hour,\n    # then the number gathered in the first hour would be equal to that in the second hour.\n    # So we have the equation: x + 26 = 40 - x\n    # Solving for x:\n    x = (40 - 26) / 2\n\n    # Once we have x, we can find the number of mushrooms gathered in the second hour.\n    second_hour_mushrooms = 40 - x\n\n    return int(second_hour_mushrooms)\n\nans = solution()"
    ],
    "870378fe08e54c25879633bc63dcfb58": [
        "def solution():\n    first_term = 5\n    common_difference = 3\n    number_of_terms = 14\n\n    last_term = first_term + (number_of_terms - 1) * common_difference\n    sum_of_sequence = (number_of_terms * (first_term + last_term)) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "a98be4f6b8d9491eb39649d9e6370466": [
        "def solution():\n    number_to_round = 5345\n    rounded_number = round(number_to_round / 100) * 100\n    return rounded_number\n\nans = solution()"
    ],
    "935623bcdc6a4872838561b5773ef917": [
        "def solution():\n    num = 3 * 20 / 12\n    return int(num)\n\nans = solution()"
    ],
    "888087113ad04b5893f98edb9c00188d": [
        "def solution():\n    ans = 12 * (15 - 9) + 24 // (10 - 6)\n    return ans\n\nans = solution()"
    ],
    "0e58b9cb1b3b4b438f3c51f0ee11f3f3": [
        "def solution():\n    participants = 10\n    handshakes = (participants * (participants - 1)) // 2\n    return handshakes\n\nans = solution()"
    ],
    "ccf6b106f5b54dbc953e3d9d6e9d4019": [
        "def solution():\n    morning_temp = -5\n    night_temp = 10\n    return abs(morning_temp - night_temp)\n\nans = solution()"
    ],
    "46fe46fdf5be405f973b8d4e6c7447ae": [
        "def solution():\n    from math import factorial\n\n    # There are (n-1)! ways for n people to sit around a circular table.\n    # This is because we can fix one person's position and arrange the remaining (n-1) people.\n\n    num_people = 8\n    ans = factorial(num_people - 1)\n\n    return ans\n\nans = solution()"
    ],
    "c3ccc050c32c44daa5991bb6f2a6ba89": [
        "def solution():\n    ans = 25 * 123 * 0.4\n    return ans\n\nans = solution()"
    ],
    "15bb7f3dbdea4fa191d64a8c757e2591": [
        "def solution():\n    sandra_age_now = 8\n    mother_age_now = sandra_age_now + 33\n    sandra_age_2_years_ago = sandra_age_now - 2\n    mother_age_2_years_ago = mother_age_now - 2\n    difference_in_age_2_years_ago = mother_age_2_years_ago - sandra_age_2_years_ago\n    return difference_in_age_2_years_ago\n\nans = solution()"
    ],
    "adf1208d41db4a14bf12a4808bccc462": [
        "def solution():\n    return 6342 // 7\n\nans = solution()"
    ],
    "9223b2da325349b8b26286bfe0d69c61": [
        "def solution():\n    # Last digit of powers of 2 cycle every 4 powers: 2, 4, 8, 6\n    # 2017 % 4 = 1, so the last digit of 2^2017 is the same as the last digit of 2^1, which is 2.\n    \n    # Last digit of powers of 3 cycle every 4 powers: 3, 9, 7, 1\n    # 2017 % 4 = 1, so the last digit of 3^2017 is the same as the last digit of 3^1, which is 3.\n    \n    # The product of the last digits is 2 * 3 = 6.\n    last_digit_of_product = (2 * 3) % 10\n    \n    return last_digit_of_product\n\nans = solution()"
    ],
    "3ff6ebc4090643778a1addb47fc34433": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'ants_initial' be the number of ants in Jerome's kitchen at first.\n    ants_initial = symbols('ants_initial')\n\n    # Jerome swept 3/4 of the ants into his neighbour's house.\n    ants_after_sweeping = ants_initial * (1 - 3/4)\n\n    # 2/5 of the remaining ants ran out of the kitchen in fear.\n    ants_after_running = ants_after_sweeping * (1 - 2/5)\n\n    # 185 hungry ants crawled into the kitchen afterwards.\n    ants_final = ants_after_running + 185\n\n    # In the end, the number of ants was twice the initial number of ants.\n    equation = Eq(ants_final, 2 * ants_initial)\n\n    # Solve the equation.\n    solutions = solve(equation, ants_initial)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "218eba99b87c41d18d1865559215bc59": [
        "def solution():\n    book_cost = 13\n    books_day1 = 89\n    books_day2 = 11\n    \n    total_spent = (books_day1 + books_day2) * book_cost\n\n    return total_spent\n\nans = solution()"
    ],
    "ec254d781c2b43cfab681f9a4da37327": [
        "def solution():\n    pens_per_friend = 23\n    number_of_friends = 42\n    total_pens = pens_per_friend * number_of_friends\n    return total_pens\n\nans = solution()"
    ],
    "a59e62d9c9954410934bd68af788363b": [
        "def solution():\n    def next_number(n):\n        return (n * 2 + 4) % 100\n    \n    number = 1\n    for _ in range(2022 - 1):\n        number = next_number(number)\n        \n    return number\n\nans = solution()"
    ],
    "4ad9c8bc9fdb42738d2d58bfbd0f8c29": [
        "def solution():\n    # Since the given sequence is a series of square numbers (1^2, 2^2, 3^2, ..., n^2),\n    # the next number in the sequence is the square of (n+1), where n is the last\n    # given number in the sequence.\n\n    # The last given number is 49, which is 7^2.\n    # Thus, the next number is (7+1)^2 = 8^2.\n    next_num = (7 + 1) ** 2\n\n    return next_num\n\nans = solution()"
    ],
    "7dd4045d492549698d37a5863045d780": [
        "def solution():\n    return 312 + 9\n\nans = solution()"
    ],
    "cf24e8570c5f445681de61cc8e392341": [
        "def solution():\n    # Find the least common multiple of the flashing rates\n    from math import lcm\n    red_flash_rate = 4\n    green_flash_rate = 6\n    \n    time_between_simultaneous_flashes = lcm(red_flash_rate, green_flash_rate)\n    \n    # Since both lights flash simultaneously at t=0, we need to consider this as well\n    simultaneous_flashes_per_minute = (60 // time_between_simultaneous_flashes) + 1\n    \n    # Calculate the total number of simultaneous flashes in an hour\n    total_simultaneous_flashes = simultaneous_flashes_per_minute * 60\n    \n    return total_simultaneous_flashes\n\nans = solution()"
    ],
    "4e46f2beb27349e6aa3f6d1b29e68cab": [
        "def solution():\n    num1 = 4.5\n    num2 = 10.3\n    halfway = (num1 + num2) / 2\n    return halfway\n\nans = solution()"
    ],
    "1307cafce9d24303b397ab789e178e8a": [
        "def solution():\n    # Let's denote the first term as 'a' and the common difference as 'd'.\n    # The sum of an arithmetic progression is given by the formula:\n    # S_n = n/2 * (2a + (n-1)d) where S_n is the sum of the first n terms.\n    # According to the problem the sum of the first four terms is 32 less than the sum of the last four terms.\n    # This can be written as:\n    # S_4 = S_8 - S_4 - 32\n    # Where S_4 = 4/2 * (2a + (4-1)d) = 2 * (2a + 3d)\n    # and S_8 = 8/2 * (2a + (8-1)d) = 4 * (2a + 7d)\n    # Plugging these in we get:\n    # 2 * (2a + 3d) = 4 * (2a + 7d) - 2 * (2a + 3d) - 32\n    # 4a + 6d = 8a + 28d - 4a - 6d - 32\n    # 0 = 4a + 22d - 32\n    # Since 4a cancels out and does not affect 'd', we can ignore it.\n    # We end up with:\n    # 22d = 32\n    # So the common difference 'd' is:\n    d = 32 / 22\n\n    return d\n\nans = solution()"
    ],
    "a2b3614814354adfabe59be257d8e75b": [
        "def solution():\n    from sympy import isprime\n\n    for a in range(2, 42):\n        if isprime(a):\n            b = (41 - 3*a) / 7\n            if b.is_integer() and isprime(b):\n                return int(a + b)\n\nans = solution()"
    ],
    "2dca95dfad284b9387bbcee7d41b7a7d": [
        "def solution():\n    n = 32 / (1/2)\n    return n\n\nans = solution()"
    ],
    "ea94212bd8754f72b8001d195d361ee0": [
        "def solution():\n    kg_to_grams = 1000\n    n = 8.2 * kg_to_grams\n    return n\n\nans = solution()"
    ],
    "0ddb927d100f4ec0b3038de3ef7a76be": [
        "def solution():\n    sale_price = 6500\n    profit_percentage = 30\n\n    # Calculate original cost of the sofa\n    cost_price = sale_price / (1 + (profit_percentage / 100))\n\n    # Calculate new profit percentage if the profit is $5000\n    new_profit_percentage = (5000 / cost_price) * 100\n\n    return new_profit_percentage\n\nans = solution()"
    ],
    "51adf37d19ad431c8fff66b81f840b33": [
        "from math import factorial\n\ndef solution():\n    letters = \"EARTH\"\n    n = len(letters)\n    ans = factorial(n)\n    return ans\n\nans = solution()"
    ],
    "1e29620d8c1546499923e5051d3708fa": [
        "def solution():\n    total_fraction_water = 3 / 5\n    one_bottle_volume = 120 / (1 - total_fraction_water)\n    water_per_bottle = one_bottle_volume * total_fraction_water\n    total_water_for_six_bottles = water_per_bottle * 6\n    return total_water_for_six_bottles\n\nans = solution()"
    ],
    "fc9c893a6de2407d928994eaaedf78a9": [
        "def solution():\n    return 4 * 18 * 25\n\nans = solution()"
    ],
    "f0f847c95e5f466d90b8e462be6ed071": [
        "def solution():\n    distance_simon_walks = 150 * 10\n    distance_friend_walks = 200 * 10\n    total_distance_apart = distance_simon_walks + distance_friend_walks\n    time_simon_takes_to_run_back = distance_simon_walks / (2 * 150)\n    distance_friend_walks_while_simon_runs_back = 200 * time_simon_takes_to_run_back\n    distance_between_simon_and_friend = total_distance_apart + distance_friend_walks_while_simon_runs_back\n    return distance_between_simon_and_friend\n\nans = solution()"
    ],
    "3bd51f5982c940ddbbde362e9af86b8e": [
        "from itertools import permutations\n\ndef solution():\n    # Loop through all permutations of the numbers 0-9 to find the necessary digits.\n    for p in permutations(range(10), 7):\n        s, e, n, d, m, o, r = p\n        # Ensure that M and S are non-zero as they are the first digits.\n        if m == 0 or s == 0:\n            continue\n        \n        send = 1000 * s + 100 * e + 10 * n + d\n        more = 1000 * m + 100 * o + 10 * r + e\n        money = 10000 * m + 1000 * o + 100 * n + 10 * e + y\n        \n        if send + more == money:\n            return money\n\nans = solution()"
    ],
    "32cddd410fc54087979e0acde6f71066": [
        "from math import factorial\n\ndef solution():\n    total_bells_stars_balls = 2 + 2 + 2  # Total count of identical items (bells, stars, red balls)\n    total_items = total_bells_stars_balls + 1  # Including the green ball\n\n    # Calculate permutations accounting for identical items\n    permutations = factorial(total_items)\n    permutations //= factorial(2) ** 3  # Divide by factorial of the count of each set of identical items\n\n    return permutations\n\nans = solution()"
    ],
    "1664d9ce104d45fd8be662f12fc279a0": [
        "def solution():\n    # Define the times it takes for each person to cross the bridge\n    times = [1, 2, 5, 10]\n\n    # Start with the two slowest crossing together, since they determine the overall speed\n    total_time = times[2] + times[3]\n\n    # Now we have two on the other side, we need to send one person back with the flashlight.\n    # It's best to send the quickest (first one in the list) so we don't add much to the total time\n    total_time += times[0]\n\n    # Now the two fastest cross the bridge. They determine the crossing time again.\n    total_time += times[1]\n\n    # And again, we need to send someone back with the flashlight. This time it should be the\n    # second quickest (since the quickest is already across the bridge)\n    total_time += times[0]\n\n    # Finally, the last two cross the bridge together.\n    total_time += times[1]\n    \n    return total_time\n\nans = solution()"
    ],
    "fa00622124e242f3b8c0fe92c2d39c73": [
        "def solution():\n    def count_derangements(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            return (n - 1) * (count_derangements(n - 1) + count_derangements(n - 2))\n    ans = count_derangements(7)\n    return ans\n\nans = solution()"
    ],
    "6433bb0ce3b84294a9f9739ddd7a9ca5": [
        "def solution():\n    for digit1 in range(10):  # loop from 0 to 9 for the first square\n        for digit2 in range(10):  # loop from 0 to 9 for the second square\n            number = int(f\"2{digit1}{digit2}335\")  # construct the whole number\n            if number % 99 == 0:  # check if it's divisible by 99\n                return number\n\nans = solution()"
    ],
    "02456ecae03a47dab61beed2cc4c0b15": [
        "def solution():\n    n = 100\n    while n % 7 != 0:\n        n -= 1\n    return n - 7\n\nans = solution()"
    ],
    "2a228cd17f4e409e9bc77a0ccc4c9809": [
        "def solution():\n    initial_volume = 5  # In litres\n    container_size_ratio = 0.25  # The ratio of the container size to the dispenser size\n    cup_volume_ml = 150  # Volume of water in one cup in milliliters\n    number_of_cups = 14  # Number of cups to be filled\n\n    # Volume of the container in litres (since 1 litre = 1000 milliliters)\n    container_volume = initial_volume * container_size_ratio\n\n    # Total volume for the cups in litres\n    cups_total_volume = (cup_volume_ml / 1000) * number_of_cups\n\n    # Water left in the dispenser in litres\n    water_left = initial_volume - container_volume - cups_total_volume\n\n    return water_left\n\nans = solution()"
    ],
    "bd690baeb49d4336869943efade96813": [
        "def solution():\n    result = 5 / (1/4)\n    return result\n\nans = solution()"
    ],
    "244f808ad1cc4d13a675289a3ecd9a1a": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "3adf2f6e8afc4a6ca82c84688afc78b5": [
        "def solution():\n    harry_time = 24\n    harry_speed_ratio = 3\n    ginny_speed_ratio = 4\n    \n    ginny_time = (harry_time / harry_speed_ratio) * ginny_speed_ratio\n    return ginny_time\n\nans = solution()"
    ],
    "0555563c570c465e86a95b3ddf408f78": [
        "def solution():\n    ans = 828 // 9\n    return ans\n\nans = solution()"
    ],
    "c6905843d5c84d1896ee600c07cec573": [
        "def solution():\n    # Pip's rate of baking\n    pip_rate = 5 / 20  # loaves per minute\n    \n    # Bud's rate of baking\n    bud_rate = 3 / 15  # loaves per minute\n    \n    # Time worked by Pip and Bud\n    time_worked = 40  # minutes\n    \n    # Total loaves baked by Pip and Bud in 40 minutes\n    total_loaves = (pip_rate + bud_rate) * time_worked\n    \n    return int(total_loaves)\n\nans = solution()"
    ],
    "5fa23afcf49349ac9cd5d88b0ce77585": [
        "def solution():\n    # Let 'x' be the number of pages she writes originally each day.\n    # If she writes 'x' pages per day, she finishes in 8 days, so total pages is 8*x.\n    # If she writes 'x+2' pages per day, she finishes in 6 days, so total pages is 6*(x+2).\n\n    # 8*x = 6*(x+2), solving for 'x' we get the number of pages she writes originally each day.\n    # We can calculate the total number of pages by multiplying 'x' with the number of days (8).\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(8*x, 6*(x+2))\n\n    # Solve for 'x'\n    pages_per_day = solve(equation, x)[0]\n\n    # Calculate total pages by multiplying pages per day by number of days\n    total_pages = 8 * pages_per_day\n\n    return total_pages\n\nans = solution()"
    ],
    "09b093e35e3d45d0b688e30cc6a0ba76": [
        "def solution():\n    # The value after the first year is £11,000\n    value_after_first_year = 11000\n\n    # Calculate the original value before the 10% increase\n    original_value = value_after_first_year / 1.1\n\n    # Calculate the value after the 10% decrease in the second year\n    value_after_second_year = original_value * 0.9\n\n    # Calculate the profit or loss by subtracting the original value from the value after the second year\n    profit_or_loss = value_after_second_year - original_value\n\n    return profit_or_loss\n\nans = solution()"
    ],
    "fc738668235447c79203dcca2ce2a678": [
        "def solution():\n    d = symbols('d')\n    expression = (6 * d) + (5 * d) - d\n\n    return expression.simplify()\n\nans = solution()"
    ],
    "b5a825d4f853436bb277e7f3866639d2": [
        "def solution():\n    a = 1  # 'a' can be any number, and since we want to simplify, we can just pick 1 for simplicity.\n    ans = (12 * a) / 4 + (2 * a) * 5\n    return ans\n\nans = solution()"
    ],
    "ceff5d5955364eabbd46a62f98797a05": [
        "def solution():\n    sequence = []\n    numbers_count_before_first_10 = 0\n    for i in range(1, 10):\n        numbers_count_before_first_10 += i + 2\n        sequence.extend([i] * (i + 2))\n    median_index = (numbers_count_before_first_10 + 1) // 2\n    median = sequence[median_index - 1]  # Index offset by 1 due to 0-based indexing\n    return median\n\nans = solution()"
    ],
    "bf44fa7967fe492d97b8a311fafdfaee": [
        "def solution():\n    # Assuming Yohan takes out red and black socks, in the worst case,\n    # he has to remove all 10 red and 10 black socks before getting to white socks.\n    # Therefore, he must take one more after 20 to ensure he gets a pair of white socks.\n\n    red_socks = 10\n    black_socks = 10\n    # To ensure a pair of white socks, take out all red and black socks (worst case)\n    # and then one white sock to get at least one pair of white socks.\n    socks_needed = red_socks + black_socks + 1\n\n    return socks_needed\n\nans = solution()"
    ],
    "084167b934b34115b89c8d9ae9a3b4a2": [
        "def solution():\n    # Let 'x' be the number of cookies Richard had at first\n    # According to the problem, he ate 3/8 of the cookies in the morning\n    # and 1/6 of the cookies in the afternoon, leaving him with 33 cookies.\n    # The equation representing the situation is:\n    # x - (3/8)*x - (1/6)*x = 33\n    \n    # Find the common denominator.\n    common_denominator = 8 * 6\n    \n    # Convert the fractions to have the common denominator\n    morning_cookies = 3 * (common_denominator // 8)\n    afternoon_cookies = 1 * (common_denominator // 6)\n    \n    # Convert the total Richard had at first to the same denominator\n    total_cookies_with_common_denominator = common_denominator\n    \n    # Now we have an equation in the form of:\n    # (total_cookies_with_common_denominator)x - morning_cookies*x - afternoon_cookies*x = 33 * common_denominator\n    # Simplifying the equation gives us:\n    # (total_cookies_with_common_denominator - morning_cookies - afternoon_cookies)x = 33 * common_denominator\n    \n    # Let's calculate the remaining part of x\n    remaining_x_part = total_cookies_with_common_denominator - morning_cookies - afternoon_cookies\n    \n    # Now we solve for x\n    x = (33 * common_denominator) // remaining_x_part\n    \n    return x\n\nans = solution()"
    ],
    "b90de1565c844c2d97a4ccdcf12c2aac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol representing Jemma's number\n    jemma_number = symbols('jemma_number')\n\n    # Define the equation based on the problem statement\n    equation = Eq((jemma_number + 3) * 5, 35)\n\n    # Solve the equation for Jemma's number\n    solution = solve(equation, jemma_number)\n\n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "d6e7284ab38c41e8ade59a5718682ded": [
        "def solution():\n    total_litres = 120\n    bucket_capacity = 8\n\n    num_buckets = total_litres // bucket_capacity\n\n    return num_buckets\n\nans = solution()"
    ],
    "d782b43878bb4cf1bafe5b83f82438e2": [
        "def solution():\n    total_pupils = 20\n    left_handed = total_pupils / 4\n    not_left_handed = total_pupils - left_handed\n    return int(not_left_handed)\n\nans = solution()"
    ],
    "12bef96eae3c41e78b2c7c959b7cb247": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime.strptime('5 May 2023', '%d %B %Y')\n    end_date = datetime.strptime('7 June 2023', '%d %B %Y')\n\n    sundays_count = 0\n    current_date = start_date\n\n    while current_date <= end_date:\n        if current_date.weekday() == 6:  # 6 corresponds to Sunday\n            sundays_count += 1\n        current_date += timedelta(days=1)\n\n    return sundays_count\n\nans = solution()"
    ],
    "06cae666e4524e0780eed7ff941bb6a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the initial number of red marbles be 3x and white marbles be 2x\n    # Let the number of red marbles added by Pip be p\n    # Bud adds 100+p white marbles\n    x, p = symbols('x p')\n\n    # The new ratio after Pip adds red marbles (3x + p)/(2x) = 5/3\n    equation1 = Eq((3 * x + p) / (2 * x), 5 / 3)\n\n    # The ratio after Bud adds white marbles (3x + p)/(2x + p + 100) = 5/4\n    equation2 = Eq((3 * x + p) / (2 * x + p + 100), 5 / 4)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, p))\n\n    # The number of initial white marbles is 2x\n    initial_white_marbles = 2 * solutions[x]\n\n    return initial_white_marbles\n\nans = solution()"
    ],
    "9034744a6a62443fa56a651ca2584ee4": [
        "def solution():\n    total_flour = 40  # kg\n    packets = 25\n    flour_per_packet = total_flour / packets\n    return flour_per_packet\n\nans = solution()"
    ],
    "02ba9287f10746898f97cec009cbf38a": [
        "def solution():\n    initial_purchase = 10\n    first_sale = 20\n    second_purchase = 30\n    final_sale = 40\n\n    total_profit = (first_sale - initial_purchase) + (final_sale - second_purchase)\n\n    return total_profit\n\nans = solution()"
    ],
    "a63989af68494194bfb53a854e3665ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Defining symbols for cookies (c) and brownies (b)\n    c, b = symbols('c b')\n\n    # Equations based on the problem statement\n    # Original ratio of cookies to brownies -> 4:3\n    equation1 = Eq(4*b, 3*c)\n\n    # After giving away 6 brownies, ratio becomes 12:7\n    equation2 = Eq(12*(b - 6), 7*c)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (c, b))\n\n    # Calculating the total number of cookies and brownies\n    total = solutions[c] + solutions[b]\n\n    return total\n\nans = solution()"
    ],
    "f4fc1897652e40b78918728180071644": [
        "def solution():\n    # The rate at which 4 construction companies build\n    companies_rate = 900 / 5\n\n    # The total work is proportional to the length of the expressway\n    total_work = 5400\n\n    # The daily rate of work for 6 companies\n    daily_rate = (6/4) * companies_rate\n\n    # The number of days needed for 6 companies to complete the work\n    days_needed = total_work / daily_rate\n    \n    return days_needed\n\nans = solution()"
    ],
    "ac5436a25e0442f2a16bce013c5fb452": [
        "def solution():\n    adam_spent = 93\n    adam_tickets = 6\n    claire_spent = 124\n    \n    price_per_ticket = adam_spent / adam_tickets\n    \n    claire_tickets = claire_spent / price_per_ticket\n    \n    return int(claire_tickets)\n\nans = solution()"
    ],
    "1a3522fba8a14fd7bb05a7ed2ce9622e": [
        "def solution():\n    # According to the divisibility rule for 3, the sum of the digits must be divisible by 3.\n    # Since 5 + 2 + 7 = 14, and K will appear twice, we need 2K to be a multiple of 3 to make the whole sum\n    # divisible by 3. The smallest multiple of 3 that, when added to 14, results in a multiple of 3 is 3.\n    # Therefore, 2K could be 3, 6, 9, 12, ...\n    # But we also need to satisfy divisibility by 4.\n    # The divisibility rule for 4 is that if the last two digits of the number form a number that is divisible by 4,\n    # then the whole number is divisible by 4. Because we have 7K as the last two digits, K must be either 2 or 6\n    # for 7K to be divisible by 4 (since 72 and 76 are the possible divisible numbers).\n\n    # Now we just need to find the value of K that is common in the sequences.\n    # As we said above, 2K = 3, 6, 9, 12, ..., and possible values for K satisfying divisibility by 4 are 2 or 6.\n    # 6 is the only number that satisfies both conditions (6 is a multiple of 3, and 7K with K=6 is divisible by 4).\n    # Hence the value of K must be 6.\n    \n    K = 6\n    return K\n\nans = solution()"
    ],
    "3ed7b46e44cc4f75b5c4f2b2c79caf4e": [
        "def solution():\n    nth_term = 10\n    term_value = 25\n    common_difference = 28 - 25\n\n    first_term = term_value - (nth_term - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "f3712fb16f9f469bab602738d8fc9cc5": [
        "def solution():\n    # Since the cards are from 1 to 8, sum up all the cards\n    total_sum = sum(range(1, 9))\n    # Player One's cards sum to 23, so find out Player Two's cards sum\n    player_two_sum = total_sum - 23\n    # To maximize Player Two's highest card, give them the 1, 2 and 3 cards\n    player_two_remaining_sum = player_two_sum - (1 + 2 + 3)\n    # The remaining sum should be the highest card Player Two could have\n    return player_two_remaining_sum\n\nans = solution()"
    ],
    "a978c7f92cdf44f1942f967781ad3207": [
        "def solution():\n    ans = sum(sum(i**2 for i in range(1, j+1)) for j in range(1, 21))\n    return ans\n\nans = solution()"
    ],
    "a77bd217c8b244528cdb996bbf73a46b": [
        "def solution():\n    total_cookies = 118\n    cookies_per_packet = 7\n\n    packets_needed = (total_cookies + cookies_per_packet - 1) // cookies_per_packet\n\n    return packets_needed\n\nans = solution()"
    ],
    "7039740729c84c8b8342e7002a2ca25f": [
        "def solution():\n    numerator = 2019 + 2018 * 2020\n    denominator = 2019 * 2020 - 1\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "49021dd3aa7f4c03a9353bfc19e4a911": [
        "def solution():\n    total_shoes = 9 * 2  # 9 pairs of shoes, so 18 shoes total\n    time_per_shoe = 2  # minutes to clean one shoe\n    cobblers = 2  # number of cobblers\n    \n    # Each cobbler works independently, so the total time taken is the time\n    # to clean all shoes divided by the number of cobblers.\n    total_time = (total_shoes * time_per_shoe) / cobblers\n    \n    return total_time\n\nans = solution()"
    ],
    "83a40f2b75d945d99e8db96a35ed071c": [
        "from math import comb\n\ndef solution():\n    num_players = 6\n    num_handshakes = comb(num_players, 2)\n    return num_handshakes\n\nans = solution()"
    ],
    "77bd08c2a453492a87c56b21199104f7": [
        "def solution():\n    luna_dumplings = 17\n    lucy_dumplings = 11\n    dumplings_to_give = (luna_dumplings - lucy_dumplings) // 2\n\n    return dumplings_to_give\n\nans = solution()"
    ],
    "54675caae3be46bdbb99950ef3e25cf4": [
        "def solution():\n    total_questions = 50\n    unanswered_questions = 3\n    correct_mark = 4\n    wrong_mark = -1\n    total_score = 168\n    \n    # Let x be the number of questions answered correctly\n    # Then, the number of questions answered incorrectly is (47 - x)\n    # The equation for total score is:\n    # 4x + (-1)(47 - x) = 168\n    # Simplify to solve for x\n    x = symbols('x')\n    equation = Eq(4*x + (-1)*(total_questions - unanswered_questions - x), total_score)\n    solutions = solve(equation)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "e99a2fad50b8447bb1d94893b6d71077": [
        "def solution():\n    return sum([i for i in range(21) if i % 2 == 1])\n\nans = solution()"
    ],
    "2963cf233b46447fb5c825b6196c2767": [
        "def solution():\n    ans = 14 * 7 * 2\n    return ans\n\nans = solution()"
    ],
    "2b1da842ccca44b1832de397d53e2758": [
        "def solution():\n    two_thirds_of_number = 24\n    number = (two_thirds_of_number * 3) / 2\n    three_quarters_of_number = (number * 3) / 4\n    return three_quarters_of_number\n\nans = solution()"
    ],
    "b8daef005cc44c47badd2aa9cc85b532": [
        "def solution():\n    ans = 543 - 284\n    return ans\n\nans = solution()"
    ],
    "79ee6ea187d04728affd0de95d4a7018": [
        "def solution():\n    from itertools import permutations\n\n    for perm in permutations(range(10), 4):\n        B, D, E, C = perm\n        if B == 0:  # B can't be zero as it's the first digit in a 4-digit number\n            continue\n        CBCD = 1000 * C + 100 * B + 10 * C + D\n        CDBC = 1000 * C + 100 * D + 10 * B + C\n        BDEC = 1000 * B + 100 * D + 10 * E + C\n\n        if CBCD + CDBC == BDEC:\n            return BDEC\n\nans = solution()"
    ],
    "fa8616efa25d4f8299991f1f8407ebf5": [
        "def solution():\n    # Find the Least Common Multiple (LCM) of the pack sizes\n    from math import lcm\n    pack_sizes = [6, 8, 9, 15]\n\n    # Calculate LCM of all pack sizes\n    least_common_pack_size = lcm(*pack_sizes)\n\n    # Calculate the minimum number of markers needed\n    min_markers = least_common_pack_size\n    while min_markers < 1000:\n        min_markers += least_common_pack_size\n\n    return min_markers\n\nans = solution()"
    ],
    "eeede3cca47a4853803fb6e1834b3f28": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "0f973003177e403a90be16bda5983322": [
        "from math import factorial\n\ndef solution():\n    # Total letters in \"CHALLENGE\" are 10, but since vowels AEE must be together, treat them as a single unit AEEx.\n    # So now we have \"CHLLNG\" + \"AEEx\" = 7 units to arrange.\n    unit_factorial = factorial(7)\n\n    # AEEx has 3 permutations (AEE, EAE, EEA).\n    vowel_permutations = factorial(3) // factorial(2) # Division by factorial(2) is to account for the repetition of 'E'.\n\n    # Each arrangement of the 7 units allows for the 3 internal vowel permutations.\n    total_arrangements = unit_factorial * vowel_permutations\n\n    # Finally, the remaining letters C, H, L, L, N, G have to account for the repetition of 'L'\n    # So we divide by the factorial of the number of 'L's which is 2.\n    ans = total_arrangements // factorial(2)\n\n    return ans\n\nans = solution()"
    ],
    "69645c35c8a9498f96d6bd29db22e3cd": [
        "def solution():\n    dresses_per_day_per_seamstress = 2\n    number_of_seamstresses = 2\n    days = 9\n\n    total_dresses = dresses_per_day_per_seamstress * number_of_seamstresses * days\n\n    return total_dresses\n\nans = solution()"
    ],
    "ddadda8c0ee24b048475b1ed01e97866": [
        "def solution():\n    ans = 77.5 * (52 / 100) + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "f87d0f3c9c544ecc84257dfd2c08ff82": [
        "def solution():\n    jan_to_mar = 450 * 3\n    apr_to_jul = 350 * 4\n    aug_to_oct = 1250\n    nov_to_dec = 400 * 2\n\n    total_spent = jan_to_mar + apr_to_jul + aug_to_oct + nov_to_dec\n    average_per_month = total_spent / 12\n\n    return average_per_month\n\nans = solution()"
    ],
    "ab2b472b178c42e1be0cb06a1e3c1731": [
        "def solution():\n    n = 13\n    while n <= 50:\n        n += 13\n    return n\n\nans = solution()"
    ],
    "5382dfa2d3874f6fb2d80352fe7491cf": [
        "def solution():\n    total_carrot_cake_price = 4 * 5\n    total_cheesecake_price = 1 * 10\n    total_chocolate_cake_price = 5 * 12\n\n    total_cakes = 4 + 1 + 5\n    total_price = total_carrot_cake_price + total_cheesecake_price + total_chocolate_cake_price\n\n    average_price = total_price / total_cakes\n\n    return average_price\n\nans = solution()"
    ],
    "7d6b5eb612604e62842cf23e7effa510": [
        "def solution():\n    total_cost = 104.10\n    people = 6\n    cost_per_person = total_cost / people\n    return cost_per_person\n\nans = solution()"
    ],
    "08152a7dda6848a09cff15a407c5e8c7": [
        "def solution():\n    remainder = 7\n    # Start with the smallest possible divisor and quotient which is 8\n    # because the remainder is 7, so the divisor has to be greater than 7.\n    divisor = remainder + 1\n    quotient = divisor\n    # Calculate the dividend using the relation: dividend = divisor * quotient + remainder\n    dividend = divisor * quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "cd83fc2a714c467082ec8c0821d5ca86": [
        "def solution():\n    ans = 2 * 25 * 123\n    return ans\n\nans = solution()"
    ],
    "b2352f675fd94fd2aa06d2b9fd4f2ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cars, bikes, lorries = symbols('cars bikes lorries')\n\n    equation1 = Eq(cars, 4 / 3 * bikes)\n    equation2 = Eq(bikes, lorries + 1 / 4 * lorries)\n    equation3 = Eq(cars + bikes + lorries % 2, 0)\n    \n    solutions = []\n    for total_number in range(2, 100, 2):  # iterate through even numbers only\n        equation4 = Eq(cars + bikes + lorries, total_number)\n        temp_solutions = solve((equation1, equation2, equation4), (cars, bikes, lorries))\n        if all(val.is_integer and val >= 0 for val in temp_solutions.values()):  # cars, bikes, lorries have to be integers and non-negative\n            solutions.append(temp_solutions)\n\n    if len(solutions) == 1:  # checking if only one solution exists\n        return solutions[0]\n\nans = solution()"
    ],
    "9addac3e46e44e54a72dccaf472b32a3": [
        "def solution():\n    first_term = 10\n    difference = 2\n    n = 12\n\n    twelfth_row_seats = first_term + (n - 1) * difference\n\n    return twelfth_row_seats\n\nans = solution()"
    ],
    "45d5eb20e04045f59025c5f269819d6d": [
        "def solution():\n    initial_value = 50000\n    depreciation_rate = 0.15\n    years = 2\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n    return final_value\n\nans = solution()"
    ],
    "172e8369614e4791ae4f2791ae3d9b80": [
        "def solution():\n    return 143 + 22 + 157\n\nans = solution()"
    ],
    "bd1ac5cdb71d4b9895407f5f400fb9e6": [
        "def solution():\n    cube_roots = [i**3 for i in range(1, int((245)**(1/3))+1)]\n    for cube in cube_roots:\n        if 245 * cube == cube**3:\n            return cube // 245\n\nans = solution()"
    ],
    "6e011ddf528c41a2841e18229bc4ef7a": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "74584a19c48347f89526c8b68de4bad8": [
        "def solution():\n    total_pages = 600\n    pages_per_day = 20\n\n    days_spent_reading = total_pages / pages_per_day\n\n    return int(days_spent_reading) if days_spent_reading.is_integer() else int(days_spent_reading) + 1\n\nans = solution()"
    ],
    "64fc79ccfc074918a3acf3065f946315": [
        "def solution():\n    visitors_per_minute = 10\n    entrance_rate = 25\n    wait_time_one_entrance = 16\n\n    total_visitors = visitors_per_minute * wait_time_one_entrance\n    entrance_rate_two_entrances = 2 * entrance_rate\n\n    wait_time_two_entrances = total_visitors / entrance_rate_two_entrances\n\n    return wait_time_two_entrances\n\nans = solution()"
    ],
    "825ebd9e4b2e4171951ba63f6748b0ed": [
        "def solution():\n    ans = 6**2 - 4**2\n    return ans\n\nans = solution()"
    ],
    "d6ee9c6fc34d4dcc804163dd5f791636": [
        "def solution():\n    ans = 2014 + 998\n    return ans\n\nans = solution()"
    ],
    "73720d8a53844a81a014f335f06e561a": [
        "def solution():\n    initial_amount = 100\n    book_cost = initial_amount * 0.10\n    remaining_after_book = initial_amount - book_cost\n    dvd_cost = remaining_after_book * 0.20\n    remaining_after_dvd = remaining_after_book - dvd_cost\n    \n    return remaining_after_dvd\n\nans = solution()"
    ],
    "9b8fa831793640388f99903b6da9cfa0": [
        "def solution():\n    shermaine_rulers = 142\n    elvis_rulers = shermaine_rulers + 157\n    claudia_rulers = elvis_rulers + 202\n    total_rulers = claudia_rulers + elvis_rulers + shermaine_rulers\n\n    return total_rulers\n\nans = solution()"
    ],
    "9223e7ed5d434394b8c1269d1e768459": [
        "def solution():\n    final_number = 34\n    added_number = 12\n\n    after_doubling = final_number - added_number\n    original_number = after_doubling / 2\n\n    return original_number\n\nans = solution()"
    ],
    "e76a8423b47d4b808a5aeadbbdc02127": [
        "def solution():\n    # 1 divided by 3 results in a recurring decimal of 0.3333...\n    # The sum of the first 1000 digits in the decimal part would be:\n    # 3 + 3 + 3 + ... + 3, 1000 times\n    \n    digit_to_sum = 3\n    num_of_digits = 1000\n    \n    # Calculate the sum of the first 1000 digits (which are all 3)\n    sum_of_digits = digit_to_sum * num_of_digits\n    \n    return sum_of_digits\n\nans = solution()"
    ],
    "fd64eed080d74099adc2ffa22714239d": [
        "def solution():\n    ans = 8102 - 2018\n    return ans\n\nans = solution()"
    ],
    "babb3e967e7b4903b754afff7e3ac9af": [
        "def solution():\n    total_distance = 16\n    daily_climb = 5\n    nightly_slide = 3\n    net_progress = daily_climb - nightly_slide\n    days = 0\n    distance_climbed = 0\n\n    while distance_climbed < total_distance:\n        days += 1\n        distance_climbed += daily_climb\n        if distance_climbed >= total_distance:\n            break\n        distance_climbed -= nightly_slide\n\n    return days\n\nans = solution()"
    ],
    "1488e869ebdf483eb9bb096cb73b1708": [
        "def solution():\n    scores = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "2d4a6c8599b4492b9b95d9d9b87446d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges, lemons = symbols('oranges lemons')\n\n    # Original ratio\n    equation1 = Eq(oranges / lemons, 3 / 5)\n\n    # New ratio after selling oranges\n    equation2 = Eq((oranges - 48) / lemons, 1 / 2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (oranges, lemons))\n\n    return solutions[lemons]\n\nans = solution()"
    ],
    "5731ad5e696643829195d329db479a6b": [
        "def solution():\n    initial_price = 80\n    discount_percentage = 10\n    discount_amount = initial_price * (discount_percentage / 100)\n    final_price = initial_price - discount_amount\n\n    return final_price\n\nans = solution()"
    ],
    "dcae38ac969c4a158f8f8806395f093f": [
        "def solution():\n    burgers = 2\n    sides = 3\n    drinks = 5\n\n    combos = burgers * sides * drinks\n\n    return combos\n\nans = solution()"
    ],
    "d6816432b29549ef83897c88e2df4bca": [
        "def solution():\n    spent_money = 10  # in pence\n    total_money = spent_money * 4\n\n    return total_money\n\nans = solution()"
    ],
    "4e9945e556e74ffe91cb3030ad37baae": [
        "def solution():\n    # There are three types of fruits: apple, pear, and cherry.\n    # Each student can choose 1 fruit, 2 different fruits, or all 3 fruits.\n    # This results in the following combinations:\n    # 1 fruit: 3 possibilities (apple, pear, cherry)\n    # 2 fruits: 3 choose 2 possibilities = 3 (apple-pear, pear-cherry, cherry-apple)\n    # 3 fruits: 1 possibility (apple-pear-cherry)\n\n    total_combinations = 3 + 3 + 1\n\n    # By the Pigeonhole Principle, if we have one more student than the total number of combinations,\n    # we are guaranteed to have at least two students who choose the same combination.\n\n    num_students_needed = total_combinations + 1\n\n    return num_students_needed\n\nans = solution()"
    ],
    "74abfc1f309c4e35ab04f1a1d6695900": [
        "def solution():\n    return 818 - 271 - 18 + 64 - 29 + 36\n\nans = solution()"
    ],
    "6af40f0ef07e4f66810e88983de37cf0": [
        "def solution():\n    # assuming x is the number of cats\n    # ducks have 2 legs each, parrots have 2, rabbits have 4 and cats have 4\n    # total_legs = 2 * ducks + 2 * parrots + 4 * rabbits + 4 * cats\n    # total_legs = 2 * 3 + 2 * 2 + 4 * 1 + 4 * x = 32\n    # 6 + 4 + 4 + 4x = 32\n    # 14 + 4x = 32\n    # 4x = 18\n    # x = 18 / 4\n    cats = (32 - (2*3 + 2*2 + 4*1)) / 4\n    return int(cats)\n\nans = solution()"
    ],
    "d6c279a7a7694686a1864a5bf68f39e6": [
        "def solution():\n    from math import comb\n    num_teams = 11\n    num_matches = comb(num_teams, 2)\n    return num_matches\n\nans = solution()"
    ],
    "5512327e08b64371a00550b6d22306bd": [
        "def solution():\n    from math import gcd\n    \n    # Number of students in each class\n    class_a = 45\n    class_b = 75\n    class_c = 210\n    \n    # Calculate the greatest common divisor (GCD) for the three numbers\n    gcd_ab = gcd(class_a, class_b)\n    gcd_abc = gcd(gcd_ab, class_c)\n    \n    return gcd_abc\n\nans = solution()"
    ],
    "ca8974b0e2b446cfbbdf59c9fa10f48f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    judy_age, father_age, years_ago = symbols('judy_age father_age years_ago')\n\n    equation1 = Eq(father_age, judy_age + 33)\n    equation2 = Eq(judy_age + father_age, 63)\n    equation3 = Eq(father_age - years_ago, 4 * (judy_age - years_ago))\n\n    solutions = solve((equation1, equation2, equation3), (judy_age, father_age, years_ago))\n\n    return solutions[years_ago]\n\nans = solution()"
    ],
    "30a048071a8e4db6b6628b18c39b3e8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (x - 1), 9 - 2 * (x + 1))\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "7ae0fef8de6c493cb2eee6482338c688": [
        "def solution():\n    def phi(a, b):\n        if a < 7:\n            return a + b * b\n        else:\n            return a - b\n\n    return phi(4, phi(8, 3))\n\nans = solution()"
    ],
    "10e0e482b8824984872affe8ce1e0490": [
        "def solution():\n    from math import lcm\n\n    # Least Common Multiple of 6, 8, 9, and 15\n    markers_lcm = lcm(6, 8, 9, 15)\n\n    # Finding the minimum multiple of lcm that is greater than or equal to 1000\n    min_markers = markers_lcm\n    while min_markers < 1000:\n        min_markers += markers_lcm\n\n    return min_markers\n\nans = solution()"
    ],
    "16b3c8aa2d704da6a537f88f6fec0816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rooms = symbols('rooms')\n    \n    equation1 = Eq(4*rooms - 40, 6*rooms - 24)\n    \n    solutions = solve(equation1, rooms)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "dad5d4611c204567a94ca9e6e9e3d5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    equation1 = Eq(A, B + 25)\n    equation2 = Eq(A + 35, 6 * B)\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "8822cb428e1f404e8f4004bb9e245353": [
        "def solution():\n    eaten_fraction = 3 / 5\n    sweets_eaten = 18\n    total_sweets = sweets_eaten / eaten_fraction\n    sweets_left_over = total_sweets - sweets_eaten\n\n    return int(sweets_left_over)\n\nans = solution()"
    ],
    "d21328403ccc4ef1888fbbd2ff71269e": [
        "def solution():\n    jane_current_age = 9\n    john_current_age = 5\n    jane_future_age = 15\n\n    age_difference = jane_current_age - john_current_age\n    john_future_age = jane_future_age - age_difference\n\n    return john_future_age\n\nans = solution()"
    ],
    "f7bdbfc9be95446a8cb7289c066d92b3": [
        "def solution():\n    # Let the current age of the younger brother be y and the older brother be o.\n    # When the older brother was y, the younger brother was 12.\n    # When the younger brother will be o, the older brother will be 27.\n\n    # From the first condition, the age difference between brothers is o - y.\n    # From the second condition, the age difference will also be 27 - o.\n    # Therefore, o - y = 27 - o.\n\n    # We have two equations now:\n    # 1) o - y = o - 12\n    # 2) o - y = 27 - o\n\n    # Combine the two equations as they are equal to each other (transitive relation):\n    # o - 12 = 27 - o\n    # 2o = 27 + 12\n    # 2o = 39\n    # o = 39 / 2\n    o = 39 // 2 # Integer division because age is in whole years.\n\n    return o\n\nans = solution()"
    ],
    "3f4b5d68e6a34a558a6a5627f763bf86": [
        "def solution():\n    n_10 = 23\n    n_15 = 38\n    position_diff = 15 - 10\n    n_diff = n_15 - n_10\n\n    common_difference = n_diff / position_diff\n    n_1 = n_10 - (10 - 1) * common_difference\n\n    n_102 = n_1 + (102 - 1) * common_difference\n    return int(n_102)\n\nans = solution()"
    ],
    "70e335db4e004110b36ede05612ac93b": [
        "def solution():\n    for num in range(10, 21):\n        if num % 4 == 0 and 36 % num == 0:\n            return num\n\nans = solution()"
    ],
    "bcd8fb20c8b744e99ffa82607c24bb9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((13 - x)**2, 25)\n\n    solutions = solve(equation, x)\n    ans = solutions[0] if 13-solutions[0] >= 0 else solutions[1]\n\n    return ans\n\nans = solution()"
    ],
    "21b6aec5564b47a2b3f38fad58c06438": [
        "def solution():\n    ans = 9678 * 8\n    return ans\n\nans = solution()"
    ],
    "c4f58a5f4ee74d11a1ceefa03d4b0989": [
        "def solution():\n    ans = ((7 + 3) * 11) - (7 + (3 * 11))\n    return ans\n\nans = solution()"
    ],
    "e6fb8dbc811842a5bd4fa6371e5e2187": [
        "def solution():\n    like_apples = 20\n    like_strawberries = 30\n    like_both = 10\n    like_neither = 5\n\n    total_students = (like_apples + like_strawberries - like_both) + like_neither\n    \n    return total_students\n\nans = solution()"
    ],
    "f9501133c3614a48a8b6a1577fb1a1db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let's denote the cost price as CP\n    CP = symbols('CP')\n\n    # The product was marked at 20% above the cost price\n    marked_price = CP * 1.20\n\n    # It was sold at 80% of the marked price\n    selling_price = marked_price * 0.80\n\n    # The loss was $40, so selling price is CP - 40\n    loss = Eq(selling_price, CP - 40)\n\n    # Solve the equation to find the cost price\n    cost_price = solve(loss, CP)\n\n    return cost_price[0]\n\nans = solution()"
    ],
    "9c5276fb1c214521afb9cff714698795": [
        "def solution():\n    # Total time when both taps are turned on\n    total_time_xy = 6\n    \n    # Time taken for tap X to fill the tank alone\n    time_x = 10\n    \n    # Using the inclusion-exclusion principle to find the rate of filling the tank\n    # Rate of X + Rate of Y = Rate of X and Y together\n    rate_x = 1 / time_x\n    rate_xy = 1 / total_time_xy\n    rate_y = rate_xy - rate_x\n    \n    # Time taken for tap Y to fill the tank alone\n    # Time is inverse of the rate\n    time_y = 1 / rate_y\n    \n    return time_y\n\nans = solution()"
    ],
    "19f6f50448bf4f7a813675df0afe5ff5": [
        "def solution():\n    original_price = 1050\n    discount = 0.12  # 12%\n    discounted_price = original_price * (1 - discount)\n    \n    return discounted_price\n\nans = solution()"
    ],
    "7617a8045f5b4ff5b5324982a66889ea": [
        "def solution():\n    ans = 62 + 48 + 18 + 32\n    return ans\n\nans = solution()"
    ],
    "4052fcf1d3c045db91150181ba09abd4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    xuanrui, yaokuan = symbols('xuanrui yaokuan')\n    \n    # Initial combined number of markers\n    equation1 = Eq(xuanrui + yaokuan, 708)\n    \n    # After transactions, they have an equal number of markers.\n    equation2 = Eq(xuanrui - 532, yaokuan - (3/7) * yaokuan)\n    \n    # Solving the system of equations.\n    solutions = solve((equation1, equation2), (xuanrui, yaokuan))\n    \n    return solutions[xuanrui]\n\nans = solution()"
    ],
    "bf4013af9d5b45968ef5e11b2c7e33c2": [
        "def solution():\n    factorial_sum = 0\n    factorial = 1\n    for i in range(1, 9):\n        factorial *= i\n        factorial_sum += factorial\n    ans = factorial_sum % 100  # Get the last two digits\n    return ans\n\nans = solution()"
    ],
    "e34d46213408429baafffc5193541fcb": [
        "def solution():\n    total_questions = 10\n    correct_points = 6\n    wrong_points = -2\n    total_score = 44\n    \n    # Let x be the number of correct answers\n    # Let y be the number of incorrect answers\n    # x + y = total_questions (since Eddie answered all questions)\n    # correct_points * x + wrong_points * y = total_score\n    \n    # From the first equation: y = total_questions - x\n    # Substituting y in the second equation:\n    # correct_points * x + wrong_points * (total_questions - x) = total_score\n    # correct_points * x - wrong_points * x = total_score - wrong_points * total_questions\n    # x(correct_points - wrong_points) = total_score - wrong_points * total_questions\n    # x = (total_score - wrong_points * total_questions) / (correct_points - wrong_points)\n    \n    x = (total_score - wrong_points * total_questions) / (correct_points - wrong_points)\n    return int(x)\n\nans = solution()"
    ],
    "1e1427d5ceba4320aee5afcaccc52125": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ahmad, ryan = symbols('ahmad ryan')\n    \n    total_marbles = 1442\n    ratio = 6\n    \n    equation1 = Eq(ahmad + ryan, total_marbles)\n    equation2 = Eq(ahmad, ratio * ryan)\n    \n    solutions = solve((equation1, equation2), (ahmad, ryan))\n    \n    ahmad_marbles = solutions[ahmad]\n    ryan_marbles = solutions[ryan]\n    \n    marbles_to_give = (ahmad_marbles - ryan_marbles) / 2\n    \n    return marbles_to_give\n\nans = solution()"
    ],
    "44a59b6d17564f77996536b4fa6617a7": [
        "def solution():\n    ans = 3/10 + 1/100 + 7/1000\n    return ans\n\nans = solution()"
    ],
    "f97121683f7348f08e4de57f11abcaed": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "11ea9bd45a5646b0b52b444e218c2de9": [
        "def solution():\n    exchange_rate = 2.5\n    dollars = 1000\n    pounds = dollars / exchange_rate\n    return pounds\n\nans = solution()"
    ],
    "22d57fd8aceb477a89a51700a52e11c5": [
        "def solution():\n    # Define the volumes (mL) and concentrations of sugar water in each cup\n    volume_a = 300.0\n    sugar_concentration_a = 20.0 # in percent\n\n    volume_b = 300.0\n    sugar_concentration_b = 30.0 # in percent\n\n    # Calculate the total volume of the mixed sugar water\n    total_volume = volume_a + volume_b\n\n    # Calculate the total amount of sugar in each of the cups\n    sugar_amount_a = (sugar_concentration_a / 100.0) * volume_a\n    sugar_amount_b = (sugar_concentration_b / 100.0) * volume_b\n\n    # Sum the sugar amounts to get the total sugar amount\n    total_sugar_amount = sugar_amount_a + sugar_amount_b\n\n    # Calculate the sugar concentration in the mixture\n    sugar_concentration_mixture = (total_sugar_amount / total_volume) * 100.0\n\n    return sugar_concentration_mixture\n\nans = solution()"
    ],
    "9e6ca5b654384e328bb7c1dbb3561114": [
        "def solution():\n    total_length = 540\n    head_length = 10\n    carriage_length = 27\n    space_between = 1\n\n    # Calculate the length without spaces:\n    length_without_spaces = total_length - head_length\n    \n    # Calculate the number of carriages (subtract one for the head of the train)\n    num_carriages = (length_without_spaces + space_between) // (carriage_length + space_between)\n\n    # Add one for the head of the train\n    total_carriages = num_carriages + 1\n\n    return total_carriages\n\nans = solution()"
    ],
    "278b3ce4e6b040338ce029d381e86ebf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n\n    equation1 = Eq(triangle + triangle, square)\n    equation2 = Eq(square + triangle, circle)\n    equation3 = Eq(diamond, circle + square + triangle)\n\n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n\n    return solutions[triangle]\n\nans = solution()"
    ],
    "bd978d750b6e4729980ff669042abeea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pen, pencil = symbols('pen pencil')\n    \n    # Let's create two equations based on the problem statement\n    equation1 = Eq(pen + pencil, 2.90)\n    equation2 = Eq(pen, pencil + 0.60)\n    \n    # Solve the system of equations for pen and pencil\n    solutions = solve((equation1, equation2), (pen, pencil))\n    \n    # Return the cost of the pen\n    return solutions[pen]\n\nans = solution()"
    ],
    "90718dbaf0fd4ed89a5a4d96ad666df5": [
        "def solution():\n    count_ones = 0\n    count_tens = 0\n    count_hundreds = 0\n    \n    # Count occurrence of 8 in the ones place\n    for i in range(1, 289):\n        if i % 10 == 8:\n            count_ones += 1\n    \n    # Count occurrence of 8 in the tens place\n    for i in range(10, 289, 10):\n        if i // 10 % 10 == 8:\n            count_tens += 10\n        elif i + 8 < 289: # For edge case where adding 8 exceeds the page count (like 280-288)\n            count_tens += 1 # For numbers 281-287, where 8 is still in tens place\n    \n    # Count occurrence of 8 in the hundreds place (not possible because max page number is 288)\n    \n    ans = count_ones + count_tens + count_hundreds\n    return ans\n\nans = solution()"
    ],
    "a9f0d9027e26479ba10780496a0c4d24": [
        "def solution():\n    x, smallest_x = 0, float('inf')\n    \n    while True:\n        if (24 * x - 8) % 25 == 0:\n            y = (24 * x - 8) // 25\n            if y >= 0:\n                smallest_x = min(smallest_x, x)\n                break\n        x += 1\n    \n    return smallest_x\n\nans = solution()"
    ],
    "866545814d6e4615b2af1cbb207b8c44": [
        "def solution():\n    total_points = 82\n    total_questions = 50\n    correct_answer_points = 2\n    wrong_answer_points = -1\n\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        score = correct_answers * correct_answer_points + wrong_answers * wrong_answer_points\n        if score == total_points:\n            return correct_answers\n\nans = solution()"
    ],
    "01dd3259609c4a6da4fd5831e9936f4d": [
        "def solution():\n    original_price = 800\n    discount_rate = 0.15\n    increase_rate = 0.15\n\n    discounted_price = original_price * (1 - discount_rate)\n    final_price = discounted_price * (1 + increase_rate)\n\n    return final_price\n\nans = solution()"
    ],
    "35d6ac2bebfe44ffa37211e279b87749": [
        "def solution():\n    # Assume xy to be a two digit number where x is the tens digit and y is the ones digit\n    # Therefore, A = 10x + y and B = 20x + 2y\n    # Given B is 25 more than six times A: B = 6 * A + 25\n    # Substituting the values of A and B we get: 20x + 2y = 6 * (10x + y) + 25\n\n    # Let's solve this equation to find the values for x and y\n    for x in range(1, 10):  # x can be any digit from 1 to 9 for a two digit number\n        for y in range(10): # y can be any digit from 0 to 9\n            A = 10 * x + y\n            B = 20 * x + 2 * y\n            if B == 6 * A + 25:\n                return A\n\nans = solution()"
    ],
    "a59668f1e93b4825ba207bf6e1c4f492": [
        "def solution():\n    # Calculate the price per kg for the first bag\n    price_per_kg_bag1 = 5 / 2.5\n    # Calculate the price per kg for the second bag\n    price_per_kg_bag2 = 7.70 / 4\n\n    # Compare the price per kg to find out which is better value\n    return '2.5kg £5' if price_per_kg_bag1 < price_per_kg_bag2 else '4kg £7.70'\n\nans = solution()"
    ],
    "8fb6994898db4fa78cffadd0bf6a1ec7": [
        "def solution():\n    S_inverse = 0\n    for i in range(2001, 2011):\n        S_inverse += 1/i\n    S = 1 / S_inverse\n    return int(S)\n\nans = solution()"
    ],
    "e7527c6eca0e41f7b5a274121821fab1": [
        "def solution():\n    return 521 - 173 - 127\n\nans = solution()"
    ],
    "dac6db12c85f45c99ab167826c4098d6": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 4), (2, 5), (8, 9)]\n    _, ans = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "ddf47a1b5bb549f3a5068ab88ce95d61": [
        "def solution():\n    ans = (3/4) * (2/5) * 1\n    return ans\n\nans = solution()"
    ],
    "d39880770cf44cc1b8953e1fa9f1233b": [
        "def solution():\n    price_per_book = 4.50\n    number_of_books = 5\n    total_cost = price_per_book * number_of_books\n    return total_cost\n\nans = solution()"
    ],
    "547dd66262ab4fd8b89a202921fdd75e": [
        "def solution():\n    pages_monday = 280\n    pages_tuesday = pages_monday - 28\n    total_pages = pages_monday + pages_tuesday\n\n    return total_pages\n\nans = solution()"
    ],
    "a2e32a8bfee74449ac3c05a82c14f783": [
        "def solution():\n    return 365 - (19 + 65)\n\nans = solution()"
    ],
    "f321e52bafc84cfeaf82fee608fc2c47": [
        "def solution():\n    mass_quarter_full = 250\n    mass_three_quarters_full = 350\n\n    mass_half_full = (mass_three_quarters_full - mass_quarter_full) / 2\n    mass_empty_jar = mass_quarter_full - mass_half_full\n\n    return mass_empty_jar\n\nans = solution()"
    ],
    "cfb3940b70b44b77b4051f6425ca4116": [
        "def solution():\n    total_notes = 95\n    final_twos = 175\n\n    # Let x be the number of original $2-notes, and (total_notes - x) be the number of $10-notes.\n    # After exchanging $10-notes, she will have x + 5 * (total_notes - x) $2-notes.\n    # We can thus set up the equation: x + 5 * (total_notes - x) = final_twos\n    \n    # Solving for x\n    x = (5 * total_notes - final_twos) / 4\n\n    return int(x)\n\nans = solution()"
    ],
    "6ba06bbd86ed47918a1f1d77269cfed8": [
        "def solution():\n    from math import lcm\n    return lcm(5, 10, 12)\n\nans = solution()"
    ],
    "4bb30a08bef844b295fc45cdd2506df9": [
        "def solution():\n    num_buses = 7\n    length_per_bus = 5\n    distance_between_buses = 2\n\n    total_length = (num_buses * length_per_bus) + (distance_between_buses * (num_buses - 1))\n\n    return total_length\n\nans = solution()"
    ],
    "94bd0c0ea38e484483c3d392ca25d206": [
        "def solution():\n    road_length = 60\n    interval = 10\n\n    # Each side gets a tree at the 0-meter mark and then every 10 meters\n    # So, for one side: 60 / 10 + 1 = 7\n    # Since there are two sides, we double the number of trees for one side\n    trees_per_side = road_length // interval + 1\n    total_trees = trees_per_side * 2\n\n    return total_trees\n\nans = solution()"
    ],
    "166102618f9a4ea0b545a8ba6b224baa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    mistaken_result_eq = Eq(x / 4 - 25, 2021)\n    mistaken_number = solve(mistaken_result_eq, x)[0]\n\n    correct_result = mistaken_number * 4 + 25\n\n    return correct_result\n\nans = solution()"
    ],
    "3b8e61c8ea8e4ba78d0aca808cf223c9": [
        "def solution():\n    height_of_28_blocks = 182\n    height_per_block = height_of_28_blocks / 28\n    height_of_42_blocks = height_per_block * 42\n    return height_of_42_blocks\n\nans = solution()"
    ],
    "78a5cb5509884246bd419bba61d02340": [
        "def solution():\n    return 45 * 7\n\nans = solution()"
    ],
    "a92d9eb66c3b4acd8f2839b36fdd0e14": [
        "def solution():\n    return 4.8 * 5\n\nans = solution()"
    ],
    "5979a7958e5a49019259104db32617ae": [
        "def solution():\n    first_term = 106\n    last_term = 2019\n    difference = 1\n    num_terms = (last_term - first_term) // difference + 1\n    sum_seq = (first_term + last_term) * num_terms // 2\n    return sum_seq\n\nans = solution()"
    ],
    "fe3ec539b5a04bb7a24f12c0750720eb": [
        "def solution():\n    for E in range(10):\n        num = int(f\"2{E}3{E}2\")\n        if num % 9 == 0:\n            return E\n\nans = solution()"
    ],
    "1be249dc19cb422a809047b2d7a80f6a": [
        "def solution():\n    # Given x:5 = y:3, this implies that x/y = 5/3\n    # This is a direct proportional relationship.\n    \n    # When x = 5, substitute into the proportion x/y = 5/3 to find y\n    x = 5\n    proportion = 5 / 3\n    y = x / proportion\n    \n    return y\n\nans = solution()"
    ],
    "1046c694c10a415381a568db27604763": [
        "def solution():\n    cost_price = 200\n    selling_price = cost_price * 1.5  # 50% above cost\n    discounted_price = selling_price * 0.9  # 10% Christmas discount\n\n    profit = discounted_price - cost_price\n    return profit\n\nans = solution()"
    ],
    "5a88150fabe34769918ee4dd88293fca": [
        "def solution():\n    m = 0\n    while True:\n        original_students = m**2 + 5\n        new_students = original_students + 18\n        n = int(new_students**0.5)\n        if n**2 == new_students:\n            break\n        m += 1\n    ans = original_students\n    return ans\n\nans = solution()"
    ],
    "d54cf1582b9840d2832c444ed488a72a": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "6ddf66ac448548e690721ecb2b5f565e": [
        "def solution():\n    for num in range(99, 9, -1):\n        if num % 3 == 0 and num % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "dd6d097a63594cca959d1e71d2d3ebea": [
        "def solution():\n    numbers = [9, 11, 8, 12, 7, 13, 6, 14, 5, 14]\n    return sum(numbers)\n\nans = solution()"
    ],
    "d346e6a28b64479882e6e011bb7a6f19": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    equation = Eq((2*x + 3)/4 + (6 + 4*x)/3, (7*x + 22)/8)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "0ff7cfe71371476695329b23de3069ac": [
        "def solution():\n    # Initialize an empty list for the sequence\n    sequence = [None] * 7  # We need seven numbers, index from 0 to 6\n    \n    # We know the fourth (index 3) and the sixth (index 5) numbers\n    sequence[3] = 6\n    sequence[5] = 15\n    \n    # Calculate the fifth (index 4) using the sixth (index 5) and the fourth (index 3)\n    sequence[4] = sequence[5] - sequence[3]\n    \n    # Now calculate the third (index 2) and the second (index 1)\n    sequence[2] = sequence[3] - sequence[4]\n    \n    # Since each number is the sum of the previous two numbers, the first (index 0)\n    # can be calculated by subtracting the third (index 2) from the second (index 1)\n    sequence[1] = sequence[2] - sequence[0]\n    \n    # The value at index 4 (i.e., the fifth number) is already known and is used to\n    # calculate the number at index 0 (i.e., the first number)\n    sequence[0] = sequence[3] - sequence[4] - sequence[2]\n    \n    # And finally, calculate the seventh number (index 6)\n    sequence[6] = sequence[4] + sequence[5]\n    \n    # Return the seventh number in the sequence\n    return sequence[6]\n\nans = solution()"
    ],
    "03105f423b1347369d8ed85d1f00d475": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_time = datetime.strptime('17:00', '%H:%M')\n    play_badminton = timedelta(minutes=45)\n    jogging = timedelta(minutes=30)\n    end_time = start_time + play_badminton + jogging\n    return end_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "9e9d512190c84daf805cb3e49be050a6": [
        "def solution():\n    from math import gcd\n\n    # number of students in classes A, B, and C\n    students_A = 12\n    students_B = 15\n    students_C = 18\n    \n    # calculate gcd of A and B\n    gcd_AB = gcd(students_A, students_B)\n    # calculate gcd of (gcd of A and B) and C\n    gcd_ABC = gcd(gcd_AB, students_C)\n    \n    return gcd_ABC\n\nans = solution()"
    ],
    "ecd9405da0514df5b2a0f1179131079e": [
        "def solution():\n    original_average = 25\n    new_average = 22\n    total_original = original_average * 3\n    total_new = new_average * 3\n    difference = total_original - total_new\n    altered_number = 16\n    original_number = altered_number + difference\n    return original_number\n\nans = solution()"
    ],
    "34d25cf24d7949d780640e0194156dfe": [
        "def solution():\n    total_students = 36\n    overall_avg = 89\n    girls_avg = 88\n    boys_avg = 91\n    \n    boys = (overall_avg * total_students - girls_avg * total_students) / (boys_avg - girls_avg)\n    girls = total_students - boys\n    \n    return int(girls)\n\nans = solution()"
    ],
    "f4a44d5718564604b3aba4fefda53416": [
        "def solution():\n    i = 1\n    while True:\n        if i % 5 == 3 and i % 6 == 5:\n            return i\n        i += 1\n\nans = solution()"
    ],
    "57f1a73a3e564db985c24fecdf759cd6": [
        "def solution():\n    ans = (2 + 3)**2 + 4 * 5\n    return ans\n\nans = solution()"
    ],
    "17d3038b31954df3beaf2a17eef6f2f2": [
        "def solution():\n    ans = 715 - 364\n    return ans\n\nans = solution()"
    ],
    "32cc18556b6c45a9b298776fc2cefc3a": [
        "def solution():\n    total_questions = 24  # Rex answered all but one of the 25 questions\n    score_for_correct = 4\n    score_for_incorrect = -2\n    rex_score = 66\n\n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        if correct_answers * score_for_correct + incorrect_answers * score_for_incorrect == rex_score:\n            return correct_answers\n\n    return None\n\nans = solution()"
    ],
    "8dd4cfbce09b4b4ebc7f9f1a6f86de7d": [
        "def solution():\n    # Mass of the sugar in each solution\n    sugar_david = 800 * 0.05\n    sugar_eugene = 200 * 0.30\n    sugar_felix = 300 * 0.10\n\n    # Total mass of the sugar\n    total_sugar = sugar_david + sugar_eugene + sugar_felix\n\n    # Total mass of the solution\n    total_solution = 800 + 200 + 300\n\n    # Concentration of the resulting solution\n    concentration = (total_sugar / total_solution) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "4a3bcfd145bb4a24aefa5c3766f7cbaa": [
        "def solution():\n    # The knowledge points indicate the question may have something to do with Graph Theory in combinatorics.\n    # As the question is not well-specified and lacks context, providing a direct answer related to 3D shapes\n    # and Graph Theory is difficult. However, a typical problem that combines 3D shapes and Graph Theory\n    # involves finding Euler's characteristic (V - E + F = 2 for convex polyhedra), where V is the number of\n    # vertices, E is the number of edges, and F is the number of faces.\n    # Without the exact context, the following general solution checks for Euler's characteristic in a 3D shape.\n    \n    # Assuming a 3D shape is a convex polyhedron:\n    V = 0  # number of vertices\n    E = 0  # number of edges\n    F = 0  # number of faces\n\n    # Euler's characteristic formula for a convex polyhedron\n    ans = V - E + F\n\n    # Assuming ans=2 because the question didn't specify details about the 3D shape\n    ans = 2\n    \n    return ans\n\nans = solution()"
    ],
    "b4c07ba5dcbe471282f64123c9e4bd81": [
        "def solution():\n    black_pens = 9\n    blue_pens = 4 * black_pens\n    green_pens = 2 * black_pens\n    total_pens = black_pens + blue_pens + green_pens\n    return total_pens\n\nans = solution()"
    ],
    "f5a6c0d6715945a695ecf6dfbb64f92e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, gill = symbols('andrew gill')\n    equation1 = Eq(gill, andrew + 18)\n    equation2 = Eq(andrew + gill, 62)\n\n    solutions = solve((equation1, equation2), (andrew, gill))\n\n    return solutions[gill]\n\nans = solution()"
    ],
    "9e3c2c6854d3426e92fab24e9a0b03a3": [
        "def solution():\n    from math import comb\n    num_people = 4\n    num_handshakes = comb(num_people, 2)\n    return num_handshakes\n\nans = solution()"
    ],
    "f6df3f11753e4cdc80268ae5f06e3ade": [
        "def solution():\n    volume1 = 20  # litres\n    concentration1 = 35  # percent\n\n    volume2 = 30  # litres\n    concentration2 = 60  # percent\n\n    total_volume = volume1 + volume2\n    total_fruit_juice = (volume1 * (concentration1 / 100)) + (volume2 * (concentration2 / 100))\n    \n    concentration_new_mixture = (total_fruit_juice / total_volume) * 100\n\n    return concentration_new_mixture\n\nans = solution()"
    ],
    "718e8dda7ebd4d5fb3b2c9ce80ba10e6": [
        "def solution():\n    ans = 58 + 74\n    return ans\n\nans = solution()"
    ],
    "d01d33f6697441ebb3567f6b25f6068c": [
        "def solution():\n    ans = 3.8 + 59.6 - 12\n    return ans\n\nans = solution()"
    ],
    "cecb4b4d838e4a73937b529a2db06ceb": [
        "def solution():\n    cookies = 148\n    box_capacity = 9\n    boxes_needed = (cookies + box_capacity - 1) // box_capacity\n    return boxes_needed\n\nans = solution()"
    ],
    "bae752593a0041d5ad09bba75d528d91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of badges made at first\n    x = symbols('x')\n\n    # She sold 5/7 of the badges on the first day\n    first_day_sold = (5/7) * x\n\n    # Remaining badges after first day\n    remaining_after_first_day = x - first_day_sold\n\n    # She sold 1/3 of the remaining badges on the second day\n    second_day_sold = (1/3) * remaining_after_first_day\n\n    # Remaining badges after the second day\n    remaining_after_second_day = remaining_after_first_day - second_day_sold\n\n    # After making an additional 354 badges\n    final_count = remaining_after_second_day + 354\n\n    # She had 3 times as many badges as she made at first\n    equation = Eq(final_count, 3 * x)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "423cce1700d94adeb333d25876d65a23": [
        "def solution():\n    # A knockout tournament means one person is eliminated in each game.\n    # With four people, the minimum number of games required is as follows:\n    # First round: Two games to determine two winners (4 players -> 2 players)\n    # Second round: One game between the two winners to determine the final winner (2 players -> 1 winner)\n    # Total number of games: 2 (first round) + 1 (second round) = 3 games\n    \n    num_games = 3\n    return num_games\n\nans = solution()"
    ],
    "107b6a756a8e456194025d4361f2a118": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "d6ed026fb584429b8dc2a4b41d3885fe": [
        "def solution():\n    total_exhibits = 498\n    not_produced_by_A = 266\n    not_produced_by_B = 178\n\n    produced_by_both = (not_produced_by_A + not_produced_by_B) - total_exhibits\n\n    return produced_by_both\n\nans = solution()"
    ],
    "82bde9d1e9404bf391015eb87b176f5d": [
        "def solution():\n    min_value = float('inf')\n    \n    # Since one of the digits is 7, the other digits can only be 3, 4, 5, 6, 7, 8, and 11\n    # Iterate over all combinations to find the smallest three-digit number\n    for i in range(3, 12):\n        for j in range(3, 12):\n            # Ensure that the difference between digits is not more than 4\n            if abs(i - 7) <= 4 and abs(j - 7) <= 4 and i != j:\n                # Check if a combination of i, 7, and j is the smallest number found so far\n                # also check i or j is not greater than 9 because it's a digit.\n                if i < 10 and j < 10:\n                    number = int(str(min(i, 7, j)) + '7' + str(max(i, 7, j)))\n                    min_value = min(min_value, number)\n    \n    return min_value\n\nans = solution()"
    ],
    "10a4f68009184b2f9611a45a014abd56": [
        "def solution():\n    noon_temp = 4\n    drop_temp = 10\n    midnight_temp = noon_temp - drop_temp\n    return midnight_temp\n\nans = solution()"
    ],
    "868f76b6c8934a7885d5e14c1c5de743": [
        "def solution():\n    # To guarantee one ball of each color, he needs to pick all balls of one color plus one.\n    # Since we're trying to minimize the number of balls, we'll assume he picks the color with the fewest balls first.\n    # Thus, he picks all 8 blue balls.\n    # Then, he picks all 10 red balls. At this point, he's guaranteed to have at least one red and one blue.\n    # The next ball he picks will then guarantee a ball of the third color, which is green.\n    # So, he needs to pick all blue and reds, and 1 green to guarantee all three colors.\n\n    balls_needed = 8 + 10 + 1  # All blue, all red, and one green.\n    return balls_needed\n\nans = solution()"
    ],
    "1ebfe4d3586444b28bbdf27520a1abab": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 6), (3, 7), (5, 11)]\n    ans, _ = solve_congruence(*congruences)\n    while ans < 200 or ans > 300:\n        ans += 6*7*11  # LCM of the moduli since the solution will repeat every LCM steps\n    return ans\n\nans = solution()"
    ],
    "27181cdb9b38443f964d9820ad8f0b75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    skirt, blouse = symbols('skirt blouse')\n    \n    # Equation for total cost\n    equation1 = Eq(3*skirt + 2*blouse, 317)\n    \n    # Equation for cost difference\n    equation2 = Eq(skirt, blouse + 14)\n    \n    # Solve the equations\n    solutions  = solve((equation1, equation2), (skirt, blouse))\n    \n    return solutions[blouse]\n\nans = solution()"
    ],
    "82a919f9eba447aab7c5e2b20dd75061": [
        "def solution():\n    for A in range(2, 100):  # we assume A is less than 100 for the sake of finding a solution\n        if all(A % i != 0 for i in range(2, A)):  # checking if A is prime\n            for B in range(2, 100):  # similarly, assume B is less than 100\n                if all(B % i != 0 for i in range(2, B)):  # checking if B is prime\n                    if (8 * A - 3 * B) % 3 == 0:  # checking if 8A-3B is a multiple of 3\n                        return A  # we found the value for A\n\nans = solution()"
    ],
    "6ca3b864aba0479d81b5e2d80e516196": [
        "def solution():\n    final_value_after_increase = 110000\n    percentage_increase = 10\n    percentage_decrease = 10\n\n    original_value = final_value_after_increase / ((100 + percentage_increase) / 100)\n    value_after_decrease = final_value_after_increase * ((100 - percentage_decrease) / 100)\n\n    profit_or_loss = value_after_decrease - original_value\n\n    return profit_or_loss\n\nans = solution()"
    ],
    "e9e57ebfab514d86a5ed141c3c353815": [
        "from math import factorial\n\ndef solution():\n    # Number of ways to arrange the groups of flowers themselves (3 groups in total).\n    groups_arrangement = factorial(3)\n    \n    # Number of ways to arrange roses within their group (3 different colors).\n    roses_arrangement = factorial(3)\n    \n    # Number of ways to arrange jasmines within their group (4 different colors).\n    jasmines_arrangement = factorial(4)\n    \n    # Daisy has only 1 way to stay as it is a single flower.\n    daisy_arrangement = 1\n    \n    # Total arrangements is the product of all individual arrangements.\n    total_arrangements = groups_arrangement * roses_arrangement * jasmines_arrangement * daisy_arrangement\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "d7e151832f704caeb06c6674341c5d53": [
        "def solution():\n    total_pupils = 235 + 567\n    pupils_each_room = total_pupils // 2\n\n    return pupils_each_room\n\nans = solution()"
    ],
    "ea25f69560044c42a5dc8b686d83b90f": [
        "from math import gcd\n\ndef solution():\n    num1 = 1*2*3*4*5*6\n    num2 = 1*2*3*4*5*6*7*8\n    \n    multiple_of_num1 = set()\n    for i in range(1, num2+1):\n        if num1 % i == 0:\n            multiple_of_num1.add(i)\n    \n    factor_of_num2 = set()\n    for i in range(1, num2+1):\n        if num2 % i == 0:\n            factor_of_num2.add(i)\n            \n    common_values = multiple_of_num1.intersection(factor_of_num2)\n    return len(common_values)\n\nans = solution()"
    ],
    "a37a54e4fb8445b4bc0772fa3a12e2ff": [
        "def solution():\n    original_price = 125\n    discount_rate = 0.20\n    discounted_amount = original_price * discount_rate\n    new_price = original_price - discounted_amount\n    return new_price\n\nans = solution()"
    ],
    "3ad5f155b2244cbcb39a2d0959b08316": [
        "def solution():\n    # To find the maximum number of different positive integers that sum up to 60,\n    # we need to start with the smallest positive integers and keep adding the next integer\n    # until we reach or exceed the target sum.\n\n    target_sum = 60\n    current_sum = 0\n    current_number = 1\n    count = 0\n\n    # Keep adding numbers until the sum reaches or exceeds the target.\n    while current_sum < target_sum:\n        current_sum += current_number\n        current_number += 1\n        count += 1\n\n        # If we have exceeded the target, subtract the last number added.\n        if current_sum > target_sum:\n            count -= 1\n            break\n\n    return count\n\nans = solution()"
    ],
    "46df85e92a924b12ac1d505c93cd885c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of friends be f and the number of pies be p\n    f, p = symbols('f p')\n\n    # Two equations based on the given conditions\n    equation1 = Eq(p - 5*f, 3)\n    equation2 = Eq(6*f - p, 2)\n\n    # Solve the equations for f and p\n    solutions = solve((equation1, equation2), (f, p))\n\n    return solutions[p]\n\nans = solution()"
    ],
    "8b18733b1be0419dba54b2eb00a90c19": [
        "def solution():\n    ans = 12321 / 9\n    return ans\n\nans = solution()"
    ],
    "2b8380c480924871bff4133ed7e6b4db": [
        "def solution():\n    leak_rate_per_minute = 20  # ml per minute\n    minutes_in_hour = 60  # because 1 hour = 60 minutes\n    leak_per_hour = leak_rate_per_minute * minutes_in_hour  # total ml leaked in an hour\n    \n    # Convert ml to litres [1 litre = 1000ml]\n    leak_per_hour_litres = leak_per_hour / 1000\n    \n    return leak_per_hour_litres\n\nans = solution()"
    ],
    "3a8d9debec2f4fc3a575d0ea16005083": [
        "from itertools import permutations\n\ndef solution():\n    angel_num = '0141705021'\n    devil_num = '4005220912'\n\n    # Generate all unique permutations of 'angel_num'.\n    perm = set([''.join(p) for p in permutations(angel_num)])\n\n    # Check if 'devil_num' is a permutation of 'angel_num'.\n    if devil_num in perm:\n        # If yes, return that Andy can unlock the treasure chest.\n        return \"Yes\"\n    else:\n        # If no, return the correct password.\n        # Select any one permutation as the correct one since all are equivalent.\n        return \"No\", list(perm)[0]\n\nans = solution()"
    ],
    "07de75394b5841918be5feca68429eb9": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations('0123456789', 3):\n        s, e, n = p\n        if s != '0':\n            see = int(s+e+e)\n            nee = int(n+e+e)\n            tens = see + nee\n            if str(tens)[1:] == e+e:\n                return see\n\nans = solution()"
    ],
    "9161eca90a924c55a4b89f523ab076ad": [
        "def solution():\n    age = 1\n    while True:\n        if all(age % x == 1 for x in [2, 3, 4, 6]) and age % 7 == 0:\n            return age\n        age += 1\n\nans = solution()"
    ],
    "7c7eeadfbdca4d60ababafecea8a2a6a": [
        "def solution():\n    james_height = 120  # cm\n    difference = 30     # cm, James is shorter than Mark by this value\n\n    mark_height = james_height + difference\n    return mark_height\n\nans = solution()"
    ],
    "681ad7cd00094b8b958f2990dc828dc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, honeydew = symbols('watermelon honeydew')\n    equation1 = Eq(2*watermelon + 3*honeydew, 48)\n    equation2 = Eq(honeydew, 2*watermelon)\n\n    solutions = solve((equation1, equation2), (watermelon, honeydew))\n\n    return solutions[watermelon]\n\nans = solution()"
    ],
    "5a18e751149d448d874661947903bc87": [
        "def solution():\n    # Since there are 3 colors, by the pigeonhole principle, to guarantee at least a pair of the same color,\n    # we need to pick one more than 3 times the number of colors.\n    # So, for 3 colors, we need to pick 3 * 3 + 1 socks.\n    return 3 * 3 + 1\n\nans = solution()"
    ],
    "08b4fb633ec84894aa5ff3a4608e3b6b": [
        "def solution():\n    for x in range(11):\n        if (10 - x) + (x * 3) == 16:\n            return x\n\nans = solution()"
    ],
    "0b55e6a4e6c14d308cec4f22d3a63d1a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    dominic, hannah, abdul = symbols('dominic hannah abdul')\n    \n    equation1 = Eq(dominic, 2 * hannah)\n    equation2 = Eq(abdul, 3 * dominic)\n    equation3 = Eq(dominic + hannah + abdul, 63)\n    \n    solutions = solve((equation1, equation2, equation3), (dominic, hannah, abdul))\n    \n    return solutions[abdul]\n\nans = solution()"
    ],
    "4bcc90775cce4036a6d6e2de902d15a1": [
        "def solution():\n    scores = [7, 8, 10, 9, 8, 8, 10, 7, 8, 9]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "fb238c080afd420c908c028ca9054101": [
        "def solution():\n    # Take 1 red apple\n    # Take 1 green apple\n    # At this point we have one of each color\n    # The next apple we take must either be red or green, giving us two of the same color.\n\n    # Therefore, we must take 3 apples to ensure we have 2 of the same color.\n    return 3\n\nans = solution()"
    ],
    "d5f9287c340749138bbce5897de4eb98": [
        "def solution():\n    number = 20000\n    ans = number - 20\n    return ans\n\nans = solution()"
    ],
    "ff03e3e004084b4592ed56380ac4b86f": [
        "def solution():\n    ans = 6.3 + 8.7 + 9.6 - 2.6\n    return ans\n\nans = solution()"
    ],
    "4cd5315568c9436fb37d857619aade0b": [
        "def solution():\n    pails_filled = 4\n    liters_per_pail = 4\n    liters_left = 7\n\n    original_volume = (pails_filled * liters_per_pail) + liters_left\n\n    return original_volume\n\nans = solution()"
    ],
    "3eea1e7f99c34f13ba952490fd0e0223": [
        "def solution():\n    ans = sum(i if i % 2 == 0 else -i for i in range(1, 47))\n    return ans\n\nans = solution()"
    ],
    "e712313031b94278a2ec2b83580cf2ff": [
        "def solution():\n    richard_age = 12\n    adam_age = 2 * richard_age\n    will_age = (2 / 3) * adam_age\n    total_age = richard_age + adam_age + will_age\n    return total_age\n\nans = solution()"
    ],
    "21dff506ecab4714a6d9d8ea21b7f020": [
        "def solution():\n    from sympy import symbols, solve\n    \n    c = symbols('c')\n    equation = 5 * (6 * c - 1) + 35\n    \n    ans = solve(equation, c)[0]\n    \n    return ans\n\nans = solution()"
    ],
    "899f31b2d9c747e09ae28a17d893d246": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    book, pencil_box = symbols('book pencil_box')\n    \n    equation1 = Eq(2 * book + 3 * pencil_box, 42)\n    equation2 = Eq(2 * book + 6 * pencil_box, 60)\n    \n    solutions = solve((equation1, equation2), (book, pencil_box))\n    \n    return solutions[pencil_box]\n\nans = solution()"
    ],
    "6db678cd280949ad907c4ce941d65604": [
        "def solution():\n    product = 1\n    for i in range(1, 2011):\n        product *= i\n        # Removing the trailing zeroes\n        while product % 10 == 0:\n            product //= 10\n        # Keep only the last digit if the number is non-zero\n        product %= 10**5\n    # Extract the last non-zero digit\n    return product % 10\n\nans = solution()"
    ],
    "f38a4b59c2e540cf9e41096b829c82b2": [
        "from math import comb\n\ndef solution():\n    participants = 10\n    handshakes = comb(participants, 2)\n    return handshakes\n\nans = solution()"
    ],
    "b2e6579890a9418cb8be3cdb1db7fdab": [
        "def solution():\n    total_height_of_six = 6 * 150\n    average_height_of_four = 150 - 2\n    total_height_of_four = 4 * average_height_of_four\n    total_height_of_other_two = total_height_of_six - total_height_of_four\n    average_height_of_other_two = total_height_of_other_two / 2\n    return average_height_of_other_two\n\nans = solution()"
    ],
    "0496270f31e94bba8f1297dbcc51925c": [
        "def solution():\n    # Initialize values to count the total numbers and track the numbers written\n    total_numbers = 0\n    numbers = []\n    \n    # Loop to write the numbers according to the given pattern\n    for i in range(1, 9):\n        total_numbers += i\n        numbers.extend([i] * (i + 1))\n    \n    # Sort the numbers array\n    numbers.sort()\n    \n    # Calculate the median\n    n = len(numbers)\n    if n % 2 == 0:\n        median = (numbers[n // 2 - 1] + numbers[n // 2]) / 2\n    else:\n        median = numbers[n // 2]\n    \n    return median\n\nans = solution()"
    ],
    "eda44d14e12244e89aedc633ee8617cf": [
        "def solution():\n    # Given x^20 * y^15 * z^5 = 243\n    # We want to find the value of x^8 * y^6 * z^2\n\n    # 243 is 3^5\n    # Therefore, we assume that the x, y, and z are all some power of 3.\n    # Let's find the exponents for x^20, y^15, and z^5 such that their product gives us 3^5.\n\n    # Let's denote e_x, e_y, and e_z as the exponents of 3 for x, y, and z respectively.\n    # Then we have:\n    # (3^e_x)^20 * (3^e_y)^15 * (3^e_z)^5 = 3^5\n    # Simplifying it further:\n    # 3^(20*e_x + 15*e_y + 5*e_z) = 3^5\n    # Therefore:\n    # 20*e_x + 15*e_y + 5*e_z = 5\n    # We can divide through by 5 to simplify further:\n    # 4*e_x + 3*e_y + e_z = 1\n\n    # Since we need a whole number power for x, y, and z, the simplest approach is to assume that e_z = 1 (since e_z is multiplied by the smallest factor),\n    # which automatically gives us e_x = 0 and e_y = -1 (to satisfy 4*e_x + 3*e_y + e_z = 1).\n\n    # Now with our assumption:\n    # x = 3^0 = 1, y = 3^(-1), z = 3^1 = 3\n\n    # Finally, we can find the desired value:\n    # (x^8 * y^6 * z^2)\n    # (1^8 * (3^(-1))^6 * 3^2)\n    # (1 * 3^(-6) * 9)  # Since 3^2 = 9\n    # Now, 3^(-6) is the reciprocal of 3^6, which is 1/729\n    # Thus, the value of the given expression is:\n    # 1 * (1/729) * 9 = 9/729\n\n    ans = 9 / 729\n    return ans\n\nans = solution()"
    ],
    "367be73f540346348ec1e229247db265": [
        "def solution():\n    # Find x such that 42 * x = 42^2\n    x = 42\n\n    # Find y such that all prime factors of 42 * y have exponent 1\n    # Prime factors of 42 are 2, 3, and 7, so y must be a product of these primes, without repetition. Thus y = 2 * 3 * 7 = 42\n    y = 42\n\n    # The sum of x and y\n    return x + y\n\nans = solution()"
    ],
    "a8613b9533934b1dade8db288f570450": [
        "def solution():\n    dog_to_rabbit_weight_ratio = 8\n    rabbit_to_chicken_weight_ratio = 2\n\n    # Since 1 dog = 8 rabbits and 1 rabbit = 2 chickens,\n    # 1 dog = 8 * 2 chickens\n    dog_to_chicken_weight_ratio = dog_to_rabbit_weight_ratio * rabbit_to_chicken_weight_ratio\n    return dog_to_chicken_weight_ratio\n\nans = solution()"
    ],
    "6c0112d5b52d43b7b55287abd3ead152": [
        "网络故障，请重试"
    ],
    "69408e55202e417bbe0a5c4b1edfebd4": [
        "def solution():\n    cattle = 8\n    days = 4\n    fodder_per_day_per_cattle = 10\n    \n    total_fodder = cattle * days * fodder_per_day_per_cattle\n    \n    return total_fodder\n\nans = solution()"
    ],
    "d893d7be89fe4ab18afad5ace001607b": [
        "def solution():\n    from sympy import symbols, solve\n    \n    larry_original = symbols('larry_original')\n    equation = larry_original - (5/12)*larry_original - 30 - 26 - 35\n    \n    larry_initial = solve(equation, larry_original)\n    \n    return larry_initial[0]\n\nans = solution()"
    ],
    "62ddaa1b93c44e7f85b309208c5f28e6": [
        "def solution():\n    total_sum = 0\n    for number in range(1, 100):\n        digits = [int(digit) for digit in str(number)]\n        total_sum += sum(digits)\n    return total_sum\n\nans = solution()"
    ],
    "8fa4370c176d41b39b6866f139a48dde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jess, jill = symbols('jess jill')\n\n    equation1 = Eq(jill, 6/5 * jess)\n    equation2 = Eq(jill - 8, 4/7 * (jess + 8))\n\n    solutions = solve((equation1, equation2), (jess, jill))\n\n    total_sweets = solutions[jess] + solutions[jill]\n\n    return total_sweets\n\nans = solution()"
    ],
    "9a8296da36564b8aa1d283b8fa70dd00": [
        "def solution():\n    total_weight = 600\n    concentration = 0.22\n\n    sugar_weight = total_weight * concentration\n\n    return sugar_weight\n\nans = solution()"
    ],
    "dbf1101a135f495c9943bc0f68400a5b": [
        "def solution():\n    total_money = 4.44\n    portion_given = 1 / 4\n    money_given = total_money * portion_given\n    return money_given\n\nans = solution()"
    ],
    "547a49466468412f8777a85ec725c904": [
        "def solution():\n    original_length = 12.6\n    piece_cut = 3.75\n    remaining_length = original_length - piece_cut\n    return remaining_length\n\nans = solution()"
    ],
    "4779c64adc47418a896e55784a17e2cb": [
        "def solution():\n    for number in range(10000, 100000):  # 5-digit numbers range\n        if int(\"1\" + str(number)) * 3 == int(str(number) + \"1\"):\n            return number\n\nans = solution()"
    ],
    "ee0aa5d3849d485c9f2f52e25183c07d": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    today = datetime.now()\n    years_ago = 38\n    months_ago = 6\n    birth_month = today.month - months_ago + 12 * (today.month - months_ago < 0)\n    birth_year = today.year - years_ago - (today.month - months_ago < 0)\n    return birth_year\n\nans = solution()"
    ],
    "448302e8cd5b46e0b31999de01e48592": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables\n    pies_sold, cakes_sold = symbols('pies_sold cakes_sold')\n    \n    # Given ratios\n    money_ratio_pies_to_cakes = 15 / 7\n    sold_ratio_pies_to_cakes = 4 / 1\n    \n    # Given cost difference\n    cost_difference = 13\n    \n    # Total money collected\n    total_money = 1848\n    \n    # Equations based on the given ratios and total money\n    equation1 = Eq((money_ratio_pies_to_cakes) * cakes_sold * (cost_difference + 13), 15 * total_money / 22)\n    equation2 = Eq(pies_sold, 4 * cakes_sold)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (pies_sold, cakes_sold))\n    \n    # Return the number of cakes sold\n    return solutions[cakes_sold]\n\nans = solution()"
    ],
    "532079a764c14bf09bd373b4c7fc5f7c": [
        "def solution():\n    ans = sum(i**4 for i in range(1, 20))\n    return ans\n\nans = solution()"
    ],
    "9498ad8ff09a450b88310639f2e5e3b4": [
        "def solution():\n    beads = []\n    for num_beads in range(40, 81):\n        if num_beads % 4 == 0 and num_beads % 7 == 0:\n            beads.append(num_beads)\n    return beads\n\nans = solution()"
    ],
    "6e73517ab45147c1aa9d1e79e8150821": [
        "def solution():\n    return 345 * 76\n\nans = solution()"
    ],
    "750dbb830f534f51927d1d1d3c9f04f8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the original amount of money Hanson had\n    original_amount = symbols('original_amount')\n\n    # After spending 1/4 of his money and additional $3, the remaining money is (3/4)*original_amount - 3\n    remaining_after_cds = (3/4) * original_amount - 3\n\n    # After spending 3/5 of the remaining money on batteries and additional $6, he is left with $24\n    # The remaining money after buying batteries is (2/5) * remaining_after_cds - 6\n    remaining_after_batteries = (2/5) * remaining_after_cds - 6\n\n    # The equation representing the situation\n    equation = Eq(remaining_after_batteries, 24)\n\n    # Solve the equation to find the original amount of money\n    solution = solve(equation, original_amount)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7862ebf4ebee413a94b72306448a771f": [
        "def solution():\n    from itertools import permutations\n    \n    digits = ['0', '1', '3', '6', '8', '9']\n    even_digits = ['0', '6', '8']\n    count = 0\n    \n    # Create all permutations of the four digits\n    for perm in permutations(digits, 4):\n        # If the last digit is even, it is an even number\n        if perm[-1] in even_digits:\n            # Check if '0' is not the first digit\n            if perm[0] != '0':\n                count += 1\n    \n    return count\n\nans = solution()"
    ],
    "20b70bb054c14b73a8185f937a535c5e": [
        "def solution():\n    # Calculate the unit digits for 9^2015 and 9^2016\n    unit_digit_9_2015 = (9 ** 2015) % 10\n    unit_digit_9_2016 = (9 ** 2016) % 10\n    \n    # Add the unit digits\n    total_unit_digit = (unit_digit_9_2015 + unit_digit_9_2016) % 10\n    \n    return total_unit_digit\n\nans = solution()"
    ],
    "16b50c758e404b52b2f26d63ad9b63f4": [
        "from math import factorial\n\ndef solution():\n    # Calculate the ways to arrange 5 men\n    men_ways = factorial(5)\n    # Calculate the possible positions for 3 women among the 6 possible slots\n    # between and on the sides of the men\n    women_positions = factorial(6) // factorial(6 - 3)\n    # Calculate total ways to arrange 3 women\n    women_ways = factorial(3)\n    # Multiply the arrangements of men, positions for women, and arrangements of women\n    total_ways = men_ways * women_positions * women_ways\n    return total_ways\n\nans = solution()"
    ],
    "e33cf79397014b3fbccf3f13532fa8db": [
        "def solution():\n    n = 525 // 25\n    return n\n\nans = solution()"
    ],
    "546dbea8b6cf4aeb804964a448179516": [
        "def solution():\n    from math import gcd\n\n    # lengths of the two ropes\n    rope1_length = 45\n    rope2_length = 30\n\n    # find the greatest common divisor\n    longest_piece_length = gcd(rope1_length, rope2_length)\n    \n    # check if Candy's answer is correct\n    is_candy_correct = (longest_piece_length == 180)\n\n    return longest_piece_length, is_candy_correct\n\nans = solution()"
    ],
    "07ad8fe80a0748e18cb311667f70b91b": [
        "def solution():\n    qiqi_speed = 60  # m/min\n    weiling_speed = 72  # m/min\n\n    # Weiling leaves 2 minutes after Qiqi and arrives 4 minutes before Qiqi\n    time_difference = 2 + 4  # minutes\n\n    # Let's assume Qiqi's travel time is t minutes\n    # Hence, Qiqi travels a distance of 60 * t\n    # Weiling travels the same distance in (t - 6) minutes\n    # Weiling's distance = 72 * (t - 6)\n\n    # Since they both travel the same distance, we can set their distances equal:\n    # 60 * t = 72 * (t - 6)\n    # Solving for t gives us Qiqi's travel time, and we can then calculate the distance\n\n    t = (72 * 6) / (72 - 60)  # simplified equation to find t\n    distance = qiqi_speed * t\n\n    return int(distance)\n\nans = solution()"
    ],
    "6fe28da5b56043b6b8b677c81b5c9f70": [
        "def solution():\n    percentage = 45\n    total_amount = 540\n\n    ans = (percentage / 100) * total_amount\n\n    return ans\n\nans = solution()"
    ],
    "da2ec31a074d412a8b7a5644870d32d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    h = symbols('h')\n    equation = Eq(2 * h, 25 + h)\n    solution = solve(equation, h)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c69955d7ca0b48e1af24e735819ad11b": [
        "def solution():\n    # Marc's watch time in minutes (11:50 am)\n    marc_time = (11 * 60) + 50\n    \n    # Correcting Marc's time by adding the 15 minutes it is slow\n    correct_time = marc_time + 15\n    \n    # Adding half an hour's time in minutes to the corrected time\n    corrected_time_half_hour_later = correct_time + 30\n    \n    # George's watch is 7 minutes fast, so we need to subtract 7 minutes \n    # from the correct time to get George's watch time\n    george_time_half_hour_later = corrected_time_half_hour_later - 7\n    \n    # Converting back to hours and minutes\n    hours = george_time_half_hour_later // 60\n    minutes = george_time_half_hour_later % 60\n    \n    # If the hour is >= 12, we need to convert it to 12-hour format\n    if hours >= 12:\n        hours -= 12\n    \n    # Final time on George's watch\n    ans = f\"{hours}:{str(minutes).zfill(2)}\"  # Using zfill to add leading 0 if necessary\n    return ans\n\nans = solution()"
    ],
    "9ac39bfb7cbf4ddfb0db66bd11dcd812": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    correct, wrong = symbols('correct wrong')\n    equation1 = Eq(5 * correct - wrong, 90)\n    equation2 = Eq(correct + wrong, 30)\n\n    solutions = solve((equation1, equation2), (correct, wrong))\n\n    return solutions[correct]\n\nans = solution()"
    ],
    "ac8d3bc867394370882a34f8da7d69b5": [
        "def solution():\n    ans = 20.14 * 4.4\n    return ans\n\nans = solution()"
    ],
    "1c1ae09ff91145d8a4f35ba808809f50": [
        "def solution():\n    # A's work rate per hour\n    rate_a = 1 / 10\n    # B's work rate per hour\n    rate_b = 1 / 15\n    \n    # Combined work rate per hour\n    combined_rate = rate_a + rate_b\n    \n    # Time taken when working together\n    time_together = 1 / combined_rate\n    \n    return time_together\n\nans = solution()"
    ],
    "76e017050d7b464cbea52dfef7557a80": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    income = symbols('income')\n\n    # Calculate tax for the first $30000\n    tax_for_first_30000 = T / 100 * 30000\n\n    # Calculate tax for the amount above $30000\n    tax_for_above_30000 = (T / 100 + 0.03) * (income - 30000)\n\n    # Total tax paid\n    total_tax = tax_for_first_30000 + tax_for_above_30000\n\n    # Solve the equation where total tax equals (T+1)% of the annual income\n    equation = Eq(total_tax, (T / 100 + 0.01) * income)\n\n    # We have two unknowns (T and income) and one equation, so we set income to > 30000\n    # and solve for T, then use T to solve for the income.\n    solution_T = solve(equation.subs(income, 30000 + 1), T)\n\n    if solution_T:\n        # Once the value of T is found, plug it back to find the income\n        solution_income = solve(equation.subs(T, solution_T[0]), income)\n\n        return solution_income[0]\n    else:\n        return \"No solution found\"\n\nans = solution()"
    ],
    "1c892f5e4d484f6c8248b19f022e669c": [
        "def solution():\n    total_distance = 31\n    jump_up = 3\n    fall_down = 2\n    effective_jump = jump_up * 3 - fall_down * 2  # jumps in three cycles\n    num_jumps = 0\n    \n    while total_distance > 0:\n        total_distance -= effective_jump\n        num_jumps += 3\n        if total_distance <= jump_up * 2:  # Checking if squirrel can reach in the next two jumps\n            num_jumps += (total_distance + (jump_up - 1)) // jump_up  # ceiling division for jumps\n            break\n\n    return num_jumps\n\nans = solution()"
    ],
    "353773f473b443be8571fddf31056166": [
        "def solution():\n    # Iterate through multiples of 3 and 7 (which is multiples of 21) within the range.\n    for i in range(0, 101, 21): \n        if (i - 2) % 8 == 0:  # Check if the number minus two is a multiple of 8\n            return i\n    return None\n\nans = solution()"
    ],
    "d1d60aa85e194b498d447ca654276627": [
        "def solution():\n    # Gigi's age in 2002\n    gigi_age_2002 = 45\n    # Jenny's age in 1995\n    jenny_age_1995 = 22\n\n    # Calculate the year when Gigi was born\n    gigi_birth_year = 2002 - gigi_age_2002\n\n    # Calculate the year when Jenny was born\n    jenny_birth_year = 1995 - jenny_age_1995\n\n    # Calculate Gigi's age when Jenny was born\n    gigi_age_when_jenny_born = jenny_birth_year - gigi_birth_year\n\n    # Calculate Jenny's age when Gigi was 22\n    jenny_age_when_gigi_22 = 22 - gigi_age_when_jenny_born\n\n    return jenny_age_when_gigi_22\n\nans = solution()"
    ],
    "de02c9bb61484cb9a5967b90fb5f9477": [
        "def solution():\n    first_term = 50\n    difference = 46 - 50  # common difference\n    term = first_term\n    count = 0\n\n    while term > 0:\n        count += 1\n        term += difference\n\n    return count\n\nans = solution()"
    ],
    "ae8336c2fd0e4359a933990f040a86cb": [
        "def solution():\n    # We want to ensure 4 marbles of different colors.\n    # In the worst case scenario, we would pick the same color until we're forced to pick another.\n    # Since there are only 3 red marbles, we can draw them all.\n\n    # After drawing 3 red marbles, we have 12 - 3 = 9 red marbles left,\n    # the same as the number of blue marbles, which is the second-largest amount.\n    # Now, we could draw 8 yellow marbles and still not have 4 different colors.\n\n    # Until this point, we have drawn 3 (red) + 8 (yellow) = 11 marbles.\n    # To ensure a fourth color, we'd have to draw one more marble after this,\n    # since we would have either red or blue marbles left.\n\n    # So, we need 3 (for red) + 8 (for yellow) + 1 (to ensure a fourth color) = 12 marbles.\n    ans = 3 + 8 + 1\n    return ans\n\nans = solution()"
    ],
    "a42c9894b8224a81a0f9cfb0f1077f4c": [
        "def solution():\n    ans = 1.29 * 1000\n    return ans\n\nans = solution()"
    ],
    "e8dbdad37fe840819b36a79b108b7bcc": [
        "def solution():\n    digits_sum = sum([int(digit) for digit in \"20190406\"])\n    remainder = digits_sum % 9\n    if remainder == 0:\n        A = 0\n    else:\n        A = 9 - remainder\n    return A\n\nans = solution()"
    ],
    "c8cbb563970b472ca93e23b6fef1e7dc": [
        "def solution():\n    ans = 2.5 * 7 * 4\n    return ans\n\nans = solution()"
    ],
    "9be7c60631db43ffa0e913650c7d7c6b": [
        "def solution():\n    num = 0\n    i = 1\n    while True:\n        mul_of_3_and_8 = 24 * i  # The least common multiple of 3 and 8\n        if str(mul_of_3_and_8)[-1] == '2':  # Check if the last digit is 2\n            num = mul_of_3_and_8\n            break\n        i += 1\n    return num\n\nans = solution()"
    ],
    "853aa802a45a48ae9162dda36b40c38c": [
        "def solution():\n    for last_digit in range(10):\n        code_number = int(\"451\" + str(last_digit))\n        if code_number % 3 == 0 and code_number % 5 != 0 and code_number % 9 != 0:\n            return last_digit\n\nans = solution()"
    ],
    "35ecce2854094a7ab058c59fade67c60": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime(2023, 5, 15)\n    duration = timedelta(weeks=3)\n    end_date = start_date + duration\n    return end_date.strftime('%d %B')\n\nans = solution()"
    ],
    "5caa8c8d8485429793ce2c81b896b975": [
        "def solution():\n    total_apples = 12\n    count = 0\n    for group1 in range(1, total_apples):\n        group2 = total_apples - group1\n        if group1 < group2:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "78ede9ed721a48f2b277058be8293b71": [
        "def solution():\n    from math import sqrt, pow\n    \n    numerator = -6.94 - pow(9.604, 1/3)\n    denominator = sqrt(44.541/67) - (-377/6 * 5/3)\n    \n    ans = round(numerator/denominator, 3)\n    \n    return ans\n\nans = solution()"
    ],
    "b9f0a0188fd34cb597620588c14138ba": [
        "def solution():\n    speed_ship_still = 25\n    speed_current = 3\n    total_speed_downstream = speed_ship_still + speed_current\n    distance = 140\n\n    time_downstream = distance / total_speed_downstream\n\n    return time_downstream\n\nans = solution()"
    ],
    "7c20e08dc4ee4e90b36a5ebc67c30bf0": [
        "def solution():\n    original_price = 30\n    discount_percentage = 15\n    sale_price = original_price * (1 - discount_percentage / 100)\n    return sale_price\n\nans = solution()"
    ],
    "742450894fd54f4eb51a1b84280864eb": [
        "def solution():\n    bracelet_price = 0.99\n    card_price = 1.98\n    total_cost = (bracelet_price * 5) + (card_price * 2)\n    return total_cost\n\nans = solution()"
    ],
    "66967fd57a7c491592192fe52883de6a": [
        "def solution():\n    total_cost = 12.15\n    cupcake_cost_each = 3.25\n    total_cupcake_cost = 3 * cupcake_cost_each\n    total_drink_cost = total_cost - total_cupcake_cost\n    cost_per_can = total_drink_cost / 2\n    return cost_per_can\n\nans = solution()"
    ],
    "c48000b870b0411c9680bd0939cc2c12": [
        "def solution():\n    sequence = [8, 20, 31, 41, 50]\n    differences = [sequence[i] - sequence[i - 1] for i in range(1, len(sequence))]\n    second_differences = [differences[i] - differences[i - 1] for i in range(1, len(differences))]\n\n    next_difference = differences[-1] + second_differences[-1]\n    next_number = sequence[-1] + next_difference\n\n    return next_number\n\nans = solution()"
    ],
    "2a035f2d1ebc482193f41e5de7e3022d": [
        "def solution():\n    # Let x be the number of questions Olivia answered correctly\n    # Let y be the number of questions Olivia answered incorrectly\n    # We have two equations:\n    # x + y = 20 (since there are 20 questions in total)\n    # 5x - 2y = 51 (since each correct answer gives her 5 points, and each incorrect one loses her 2 points)\n    \n    # Solving the system of equations using substitution or any method:\n    # y = 20 - x\n    # 5x - 2(20 - x) = 51\n    # 5x - 40 + 2x = 51\n    # 7x = 91\n    # x = 91 / 7\n    x = 91 // 7\n\n    return x\n\nans = solution()"
    ],
    "b811cf9ea3a34145953b30f3ef9f811c": [
        "from math import gcd\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\ndef solution():\n    # Convert times to seconds\n    first_light = 30  # 30 seconds\n    second_light = 45  # 0.75 minutes\n\n    # Since the first two lights and the third light turn green together every 9 minutes\n    # the LCM of the three lights should be 9 minutes (540 seconds)\n    nine_minutes_in_seconds = 9 * 60\n    \n    # We found the least common multiple of the first two lights\n    lcm_first_two_lights = lcm(first_light, second_light)\n    \n    # We need to find the time interval for third light\n    # so that the LCM of all three intervals is 540 seconds\n    # The possible interval for the third light must divide 540 entirely\n    for third_light in range(30, nine_minutes_in_seconds + 1):\n        if lcm(lcm_first_two_lights, third_light) == nine_minutes_in_seconds:\n            return third_light\n\nans = solution()"
    ],
    "d8bd98baadc745c5867262a1f291c0c0": [
        "def solution():\n    # Assuming x to be the number of members in group A, and y to be the number of members in group B\n    from sympy import symbols, solve\n\n    x, y = symbols('x y')\n    \n    # Based on the problem statement, 11 members from group A and the remaining members from group B fill a bus (36 seats)\n    # Hence, 11 + (y - (36 - 11)) = 36\n    equation1 = 11 + y - 25\n    \n    # Each member of tour group A took a picture with every member of group B\n    # If we have a rolls of film, we need to find the remainder of pictures (ax = 36y, where x is the number of rolls needed)\n    equation2 = (x * y) % 36\n\n    # Now, solve the system of equations\n    solutions = solve((equation1 - 36, equation2), (x, y))\n\n    # The remaining number of pictures in the last roll of film after all have taken the photograph is 36 - the remainder\n    remaining_pictures = 36 - solutions[1][1] % 36\n\n    return remaining_pictures\n\nans = solution()"
    ],
    "933caaafe98a48ce8e5379db15d6d8f0": [
        "def solution():\n    mean_value = 5\n    numbers = [9, 1, 7, 4, 3, 6, 8]\n    total_numbers = 8\n    total_sum = mean_value * total_numbers\n    missing_number = total_sum - sum(numbers)\n    return missing_number\n\nans = solution()"
    ],
    "734f5828407148b5a9e8d2668afc7458": [
        "def solution():\n    for num in range(60, 71):\n        if num % 7 == 0 and num % 9 == 0:\n            return num\n\nans = solution()"
    ],
    "26bb5c0bcd0e4e05994c3b21387ff92f": [
        "def solution():\n    weight_per_paper_g = 25\n    number_of_girls = 250\n    total_weight_g = weight_per_paper_g * number_of_girls\n    total_weight_kg = total_weight_g / 1000  # converting grams to kilograms\n\n    return total_weight_kg\n\nans = solution()"
    ],
    "976b95e20676470a955c0924996ff02d": [
        "from itertools import permutations\n\ndef solution():\n    players = ['B', 'C', 'D']  # excluding 'A' since 'A' starts with the ball\n    pass_sequences = list(permutations(players, 3))  # permutations of 3 passes\n    count = 0\n\n    for sequence in pass_sequences:\n        if sequence[0] != 'A' and sequence[-1] != 'A':  # the first and last receiver cannot be 'A'\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "30b87370b94246ef86d748c09d9b63b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for Daniel and Ming's current ages\n    daniel, ming = symbols('daniel ming')\n\n    # Equation representing the relationship of their ages this year\n    equation1 = Eq(daniel, 4 * ming)\n\n    # Equation representing the sum of their ages in 6 years\n    equation2 = Eq(daniel + 6 + ming + 6, 62)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (daniel, ming))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "21e75f5992e7425ab944a24b2a56d916": [
        "from itertools import permutations\n\ndef solution():\n    cards = [1, 2, 8, 9]\n    max_product = 0\n    \n    for perm in permutations(cards):\n        num1 = perm[0] * 10 + perm[1]\n        num2 = perm[2] * 10 + perm[3]\n        product = num1 * num2\n        max_product = max(max_product, product)\n\n    return max_product\n\nans = solution()"
    ],
    "5127cf4b12c348eeaec2b82e72f95ae5": [
        "def solution():\n    sum_squares = 0\n    for i in range(2, 1001, 4):\n        sum_squares += i**2 - (i-2)**2\n    return sum_squares\n\nans = solution()"
    ],
    "d33e99d3f1614fde81acb0bcf2ddf29a": [
        "def solution():\n    people_on_left = 11\n    people_on_right = 7\n    crystal = 1\n    rows = 2\n    \n    total_people_in_one_row = people_on_left + people_on_right + crystal\n    total_people_in_class = total_people_in_one_row * rows\n\n    return total_people_in_class\n\nans = solution()"
    ],
    "ac7f27e33493434bb1574b2c4a2d01c2": [
        "def solution():\n    import math\n\n    product = 2688\n    # Since the numbers are consecutive even numbers, let's denote the smallest one as x.\n    # Then the numbers are x, x+2, x+4 and their product is x*(x+2)*(x+4) = 2688.\n    # We need to find the largest number x+4.\n    # Start with the cube root of 2688, since product of three numbers is 2688,\n    # and approximate the smallest even number to start with.\n    cube_root = int(math.ceil(product ** (1/3)))\n\n    # Adjust the starting point to the nearest even number less than cube_root\n    if cube_root % 2 != 0:\n        cube_root -= 1\n\n    # Search downwards for the correct consecutive even numbers,\n    # since if we overshoot, the product will only become larger.\n    for x in range(cube_root, 0, -2):\n        if x * (x + 2) * (x + 4) == product:\n            return x + 4\n    return None\n\nans = solution()"
    ],
    "8ac10a7ccfe44215b75cf06a67533c06": [
        "def solution():\n    start_time = (11 * 60) + 55  # Convert 11.55 am to minutes\n    end_time = (13 * 60) + 40    # Convert 1.40 pm to minutes (13:40 in 24h format)\n\n    total_play_time = end_time - start_time\n\n    return total_play_time\n\nans = solution()"
    ],
    "75d9330dae2941ad9484a74e2379bd60": [
        "def solution():\n    # Time taken to cross both bridges entirely\n    time_first_bridge = 8  # seconds\n    time_second_bridge = 10  # seconds\n\n    # Length of the first bridge\n    length_first_bridge = 9  # meters\n\n    # Length of the people line\n    length_people_line = 3  # meters\n\n    # Speed of the people line is the same for both bridges\n    # Therefore, the difference in time taken is due to the difference in lengths of the bridges\n    # Time taken to cross the length of the people line at both bridges should be the same\n    # So, we subtract this time to find the time it takes to cross the lengths of the bridges alone\n\n    time_to_cross_people_line = time_first_bridge - (length_people_line / length_first_bridge * time_first_bridge)\n    length_second_bridge = (time_second_bridge - time_to_cross_people_line) * (length_first_bridge / time_first_bridge)\n\n    return length_second_bridge\n\nans = solution()"
    ],
    "699943037ddb46d287bd76abad9b6da4": [
        "def solution():\n    for number in range(100, 1000):\n        if number % 3 == 0 and number % 11 == 0:\n            if (number - 1) % 2 == 0 and (number - 1) % 7 == 0:\n                return number\n\nans = solution()"
    ],
    "fc44184a4b6a4decbe05a477d57fc9ed": [
        "def solution():\n    total_cupcakes = 10\n    count = sum(1 for i in range(1, total_cupcakes) if total_cupcakes - i != i)\n    return count // 2  # Divide by 2 because order doesn't matter\n\nans = solution()"
    ],
    "35cc2d1e692e433a9edb2ca57099c016": [
        "def solution():\n    from sympy import factorint\n\n    n = 224\n    factors_dict = factorint(n)\n    number_of_factors = 1\n    for prime in factors_dict:\n        number_of_factors *= (factors_dict[prime] + 1)\n\n    return number_of_factors\n\nans = solution()"
    ],
    "e6b14f6552294cf9bfe42605e064c5f3": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    school_start_time = datetime.strptime('8:30', '%H:%M')\n    lesson_duration = timedelta(minutes=45)\n    moving_period_duration = timedelta(minutes=5)\n\n    break_start_time = school_start_time + (3 * lesson_duration) + (2 * moving_period_duration)\n\n    return break_start_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "566f34b38ba04e8f88aa14c24a1773e4": [
        "def solution():\n    from math import gcd\n\n    num1 = 28\n    num2 = 84\n    num3 = 126\n\n    return gcd(gcd(num1, num2), num3)\n\nans = solution()"
    ],
    "c81f5752a9034395af391ec11de7b293": [
        "def solution():\n    total_eggs = 65\n    eggs_per_box = 6\n\n    complete_boxes = total_eggs // eggs_per_box\n    \n    return complete_boxes\n\nans = solution()"
    ],
    "889a39026ec84d3e84f3871155b05e7a": [
        "def solution():\n    for a in range(1, 10):  # hundreds digit must be between 1 and 9 (it can't be 0)\n        for b in range(0, 10):  # tens digit can be between 0 and 9\n            for c in range(0, 10):  # ones digit can also be between 0 and 9\n                if b == a + 5 and c == b - 2 and (a + b + c) / 2 == b:\n                    return (100 * a) + (10 * b) + c\n\nans = solution()"
    ],
    "dc51c8ed80f14b4fb5ff275cbe1ab05c": [
        "def solution():\n    neha_won = 12018\n    jasmine_won = 309\n    total_won = neha_won + jasmine_won\n    return total_won\n\nans = solution()"
    ],
    "d44b505766094322ba1d157aa0c69927": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wands, cards = symbols('wands cards')\n\n    equation1 = Eq(wands, cards + 17)\n    equation2 = Eq(wands + cards, 69)\n\n    solutions = solve((equation1, equation2), (wands, cards))\n\n    return solutions[wands]\n\nans = solution()"
    ],
    "ea7852a3c82f44b998bc40a543ec62cd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of $10 notes, y be the number of $5 notes.\n    x, y = symbols('x y')\n\n    # Total amount in notes before purchase\n    equation1 = Eq(10 * x + 5 * y, 57)\n\n    # Amount spent from $10 notes: 60% of x\n    spent_from_10_notes = 0.6 * 10 * x\n\n    # Amount spent from $5 notes: 25% of y\n    spent_from_5_notes = 0.25 * 5 * y\n\n    # Remaining $10 notes: 40% of x\n    remaining_10_notes = 0.4 * x\n\n    # Remaining $5 notes: 75% of y\n    remaining_5_notes = 0.75 * y\n\n    # After spending, twice as many $10 notes as $5 notes.\n    equation2 = Eq(remaining_10_notes, 2 * remaining_5_notes)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Cost of the bag is the amount spent from both $10 notes and $5 notes.\n    cost_of_bag = spent_from_10_notes.subs(x, solutions[x]) + spent_from_5_notes.subs(y, solutions[y])\n\n    return cost_of_bag.evalf()\n\nans = solution()"
    ],
    "84ff7543ed7e4cf78a5bf1c71f95827d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of coins\n    troy, adam = symbols('troy adam')\n\n    # Equation 1: Troy has 5 times as many coins as Adam\n    equation1 = Eq(troy, 5 * adam)\n\n    # Equation 2: After taking 24 more coins, Adam has 1/3 as many coins as Troy\n    equation2 = Eq(adam + 24, troy / 3)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (troy, adam))\n\n    # Calculate the total number of coins they had at first\n    total_coins_at_first = solutions[troy] + solutions[adam]\n\n    return total_coins_at_first\n\nans = solution()"
    ],
    "a7318cfeb5c6465bbe4c97e1828d60ef": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    money = symbols('money')\n    cds = (1/4)*money + 3\n    remaining_after_cds = money - cds\n    batteries = (3/5)*remaining_after_cds + 6\n    remaining_after_batteries = remaining_after_cds - batteries\n    equation = Eq(remaining_after_batteries, 24)\n    result = solve(equation, money)\n    return result[0]\n\nans = solution()"
    ],
    "8fc6e7b3c33b401c8a75af3f7886a7a5": [
        "def solution():\n    count = 0\n    for num in range(1000, 10000):\n        digits_product = 1\n        for digit in str(num):\n            digits_product *= int(digit)\n        if digits_product == 8:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "4f279967112d4e8291b26b30696f3212": [
        "def solution():\n    ans = (18 / 16) * (16 * 15) / (5 * 3)\n    return ans\n\nans = solution()"
    ],
    "a3b714dd4cfa4127838d98a3fa713af3": [
        "from itertools import permutations\n\ndef solution():\n    digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    even_digits = [0, 2, 4, 6, 8]\n    \n    valid_combinations = 0\n    for perm in permutations(digits, 3):\n        if sum(perm) == 8 and perm[2] in even_digits and perm[0] != 0:\n            valid_combinations += 1\n            \n    ans = valid_combinations\n    return ans\n\nans = solution()"
    ],
    "2ccb49f86adf445b9ee2629356df536a": [
        "def solution():\n    for num in range(6, 55):\n        if num % 5 == 0 and (num + 1) % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "57bbf7c2710645ddb501b125a1011400": [
        "def solution():\n    one_fourth_of_16 = 1/4 * 16\n    half_of_missing_number = one_fourth_of_16\n    missing_number = half_of_missing_number * 2\n    return missing_number\n\nans = solution()"
    ],
    "486b933d7136464ebf2a797cb5af1ae2": [
        "def solution():\n    # Assume the worst case scenario where Darrell draws all of the other colored beads first.\n    # To ensure he gets 5 green beads, he may have to draw all the blue and white beads first.\n    blue_beads = 5\n    white_beads = 6\n    green_beads_needed = 5\n\n    # Worst case scenario requires drawing all blue and white beads plus 5 green beads.\n    beads_to_draw = blue_beads + white_beads + green_beads_needed\n\n    return beads_to_draw\n\nans = solution()"
    ],
    "a671b7c0ccab40f5bd855f933009765d": [
        "def solution():\n    # Group stage: single round-robin tournament in each group\n    # Each group has 4 people and they will each play with every other person once\n    # For each group, the number of games is Comb(4, 2) = 4 * 3 / 2 = 6\n    group_games_per_group = 6\n    num_groups = 4\n    total_group_games = group_games_per_group * num_groups\n\n    # Knockout stage games, starting with the top 8 contestants\n    top8_games = 4  # 8/2 as they get eliminated each round\n    top4_games = 2  # 4/2\n    top2_games = 1  # 2/2, the final\n\n    # There will be an additional game for third place between the losers of the top 4\n    third_place_game = 1\n\n    # Summing all games played throughout the contest\n    total_games = total_group_games + top8_games + top4_games + top2_games + third_place_game\n\n    return total_games\n\nans = solution()"
    ],
    "81791dec21a04fdeb351302cab2f3155": [
        "def solution():\n    first_term = 2\n    last_term = 58\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "84324bf350214be1afe8ddd33f8aafd5": [
        "def solution():\n    num = 1\n    while True:\n        if num % 5 == 1 and num % 6 == 1 and num % 11 == 0:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "88fc6c95b74d4d2fac199a6028657150": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    days_a, days_b = symbols('days_a days_b')\n    equation1 = Eq(days_a, days_b - 12)\n    work_per_day_a = 1 / days_a\n    work_per_day_b = 1 / days_b\n\n    # A is twice as efficient as B\n    equation2 = Eq(work_per_day_a, 2 * work_per_day_b)\n\n    # Solve equations for days_a and days_b\n    solutions = solve((equation1, equation2), (days_a, days_b))\n\n    # Combined work per day when A and B work together\n    combined_work = solutions[1/work_per_day_a] + solutions[1/work_per_day_b]\n\n    # Total days to complete the job working together\n    total_days_working_together = 1 / combined_work\n\n    return total_days_working_together\n\nans = solution()"
    ],
    "7196414549e64d5ca1eabc28ed2a8caa": [
        "from math import factorial\n\ndef solution():\n    n = 9  # total number of potted plants\n    r = 4  # number of potted plants to arrange\n    # formula for permutations: P(n, r) = n! / (n - r)!\n    ans = factorial(n) // factorial(n - r)\n    return ans\n\nans = solution()"
    ],
    "e103c3656a5446f89488050c094e88fb": [
        "def solution():\n    total_people = 25\n    like_bananas = 18\n    like_apples = 12\n\n    # Inclusion-Exclusion Principle\n    like_both = like_bananas + like_apples - total_people\n\n    return like_both\n\nans = solution()"
    ],
    "b69502e313be4bbcab0a850bb20d73b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rachel, alice = symbols('rachel alice')\n\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    total_candies = solutions[rachel] + solutions[alice]\n    \n    return total_candies\n\nans = solution()"
    ],
    "ba7ace62e80a46f8982696e6de196708": [
        "def solution():\n    return 158 * 23\n\nans = solution()"
    ],
    "bf578d94e713400d83f878025fcbf395": [
        "def solution():\n    stickers_end = 489\n    stickers_given_away = 76\n    stickers_bought = 65\n\n    stickers_start = stickers_end - stickers_bought + stickers_given_away\n\n    return stickers_start\n\nans = solution()"
    ],
    "33fa644455fd44ab8c76126614f2a54f": [
        "def solution():\n    return 520 + (180 - 320)\n\nans = solution()"
    ],
    "2174c9eb7abb4f71acfc17373e2a150d": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Create the congruences based on the problem statement\n    # The tuples are (remainder, modulus)\n    congruences = [(2, 3), (2, 4), (2, 5), (0, 7)]\n\n    # Solve the system of congruences to find the smallest such whole number\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "68623df2f94648e0b20904cbcc43ed94": [
        "def solution():\n    belinda_tomatoes = 36\n    tomatoes_given = 7\n\n    matthew_tomatoes = belinda_tomatoes - tomatoes_given - ((belinda_tomatoes - tomatoes_given) / 2)\n\n    return int(matthew_tomatoes)\n\nans = solution()"
    ],
    "91805eebef62437a8beff8b33e922e50": [
        "def solution():\n    from math import gcd\n    \n    # lcm of factors is equal to the integer\n    lcm = (15 * 21) // gcd(15, 21)\n    \n    # The product of the pair of factors is equal to the integer.\n    # Since we already have 4 factors (1, 15, 21, lcm), there must be another pair\n    # that multiplies to lcm, not including the product of 1 and lcm.\n    \n    # Find all the factors of the integer\n    factors = set()\n    for i in range(1, int(lcm**0.5) + 1):\n        if lcm % i == 0:\n            factors.add(i)\n            factors.add(lcm//i)\n    \n    # Return the sum of all the factors\n    return sum(factors)\n\nans = solution()"
    ],
    "f0fc9e28a3cd44f985074b04f9b45f45": [
        "from itertools import permutations\n\ndef solution():\n    # Since the leftmost digit is 8\n    for digits in permutations('0123456789'):\n        if digits[0] != '8':  # Enforcing the leftmost digit to be 8\n            continue\n        valid = True\n        for i in range(1, 10):\n            num = int(''.join(digits[:i + 1]))\n            if num % (i + 1) != 0:  # Checking divisibility condition\n                valid = False\n                break\n        if valid:\n            return int(''.join(digits))  # Return the whole number formed by the digits\n\nans = solution()"
    ],
    "5e0d1fe1598b4b41acce8ca7d7a1255b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the weight of a pineapple and apple\n    pineapple, apple = symbols('pineapple apple')\n\n    # Equation 1: A pineapple weighs 650g more than an apple\n    equation1 = Eq(pineapple, apple + 650)\n\n    # Equation 2: 3 pineapples and 4 apples weigh 5450g altogether\n    equation2 = Eq(3 * pineapple + 4 * apple, 5450)\n\n    # Solve the system of equations\n    solution = solve((equation1, equation2), (pineapple, apple))\n\n    return solution[pineapple]\n\nans = solution()"
    ],
    "ac5194c88a70467cad49c435e839d329": [
        "def solution():\n    original_rate = 10\n    efficiency_increase = 0.5\n    new_rate = original_rate * (1 + efficiency_increase)\n    return new_rate\n\nans = solution()"
    ],
    "c199e1915ab2422a868443394b9ff1a6": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The congruences are x ≡ 1 (mod 5), x ≡ 1 (mod 6), x ≡ 1 (mod 7)\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    x, _ = solve_congruence(*congruences)\n    \n    return x\n\nans = solution()"
    ],
    "cd2c86b449f14cc58b97e4c02a818e7c": [
        "def solution():\n    from math import gcd\n    \n    A = 2012\n    B = 1274\n    difference = A - B\n    \n    # Greatest Common Divisor of the difference and A (or B) will be D\n    D = gcd(difference, A)\n    \n    # Calculate R using the formula A = D * k + R\n    R = A % D\n    \n    return D - R\n\nans = solution()"
    ],
    "d912f4012f844228bafad624ceda9c23": [
        "def solution():\n    # Let's denote the number of rabbits as r and the number of ducks as d.\n    # According to the problem we have two equations:\n    # 1. r + d = 7 (the total number of animals)\n    # 2. 4r + 2d = 20 (the total number of legs, rabbits have 4 legs and ducks have 2)\n    # We will solve these equations to find the number of rabbits (r).\n    \n    for r in range(8):\n        d = 7 - r\n        if 4*r + 2*d == 20:\n            return r\n\nans = solution()"
    ],
    "85f18b88abb847d2ac8ed05a32300b15": [
        "def solution():\n    ways = 0\n    total_weight = 63\n\n    for two_gram_weights in range(total_weight // 2 + 1):\n        for five_gram_weights in range(total_weight // 5 + 1):\n            if 2 * two_gram_weights + 5 * five_gram_weights == total_weight:\n                ways += 1\n\n    return ways\n\nans = solution()"
    ],
    "9005f1b685f54bf5852f34fd3b024fd5": [
        "def solution():\n    initial_amount = 630\n    given_to_grace = (5 / 7) * initial_amount\n    remaining_after_grace = initial_amount - given_to_grace\n    given_to_evelyn = (1 / 9) * remaining_after_grace\n    remaining_after_evelyn = remaining_after_grace - given_to_evelyn\n    \n    return remaining_after_evelyn\n\nans = solution()"
    ],
    "836113e2b5c3443e9bf7aa438b3388f2": [
        "def solution():\n    # Let's define a winning position as a state where a player can force a win no matter what the opponent does.\n    # And a losing position as a state where the opponent can force a win.\n\n    # If the number of numbers left is a multiple of 5\n    # (1+4, 3+2, or 6-1), then any move a player makes will result in a number that is not a multiple of 5,\n    # and their opponent can then make a move that will return to a multiple of 5.\n\n    # Therefore, we can treat each multiple of 5 as a losing position (where the current player has no winning strategy).\n    # Then the player who faces a multiple of 5 is destined to lose.\n    # Thus, if the first player starts with the board having a number that is a multiple of 5 (such as 50, which is 5*10),\n    # then the first player is in a losing position.\n\n    # As 52 is not a multiple of 5, the first player (Betty) should aim to leave a multiple of 5 for Abby.\n    # She can do this by writing 2 (52-50) or 7 numbers (52-45) in the first turn.\n    # If she writes 2 numbers, the remaining number is 50, a multiple of 5.\n    # If she writes 7 numbers, the remaining number is 45, also a multiple of 5.\n\n    # Therefore, Betty should go first. To employ the winning strategy, she should:\n    # 1. Write 2 numbers on the first move.\n    # 2. Then ensure that the total number of numbers written after each round (by both players) is 5.\n\n    # Implement the check for multiples of 5\n    def winning_strategy(remaining):\n        return remaining % 5 == 0\n    \n    # Implement steps for strategy\n    if not winning_strategy(52):\n        betty_turn = 2 if not winning_strategy(52 - 1) else 7\n    else:\n        betty_turn = None\n        \n    ans = (1, betty_turn) # Return tuple with Betty going first and her first turn move\n    return ans\n\nans = solution()"
    ],
    "64fc86fe03b44fa5a15210295474c594": [
        "def solution():\n    # The last digit of a number raised to a power is determined by the last digit of its powers cycle\n    # For base 4, the powers cycle for the last digit is: 4, 6, 4, 6, ... (since 4^2 = 16)\n    # For base 6, the powers cycle is: 6, 6, 6, 6, ... (since 6^1 = 6, 6^2 = 36, etc.)\n    \n    # 2009 is odd, so the last digit of 4^2009 is the same as the last digit of 4^1, which is 4\n    last_digit_of_4_power = 4\n    \n    # 2010 is even, so the last digit of 6^2010 is the same as the last digit of 6^0 or 6^2, which is 6\n    last_digit_of_6_power = 6\n    \n    # Add the last digits together and get the last digit of the result\n    last_digit = (last_digit_of_4_power + last_digit_of_6_power) % 10\n\n    return last_digit\n\nans = solution()"
    ],
    "62087bcec6884796a1c5b9acd6d5f3a0": [
        "def solution():\n    # Total height of six players\n    total_height_six_players = 6 * 150\n    \n    # Average height of four players is 2 cm lower than the average height of the team\n    avg_height_four_players = 150 - 2\n    \n    # Total height of four players\n    total_height_four_players = 4 * avg_height_four_players\n    \n    # Total height of other two players\n    total_height_other_two_players = total_height_six_players - total_height_four_players\n    \n    # Average height of the other two players\n    avg_height_other_two_players = total_height_other_two_players / 2\n    \n    return avg_height_other_two_players\n\nans = solution()"
    ],
    "bf508186ac3b4867b029488d3fe8ef88": [
        "def solution():\n    first_8_sum = 32\n    first_22_sum = 44\n    terms_8 = 8\n    terms_22 = 22\n    sum_diff = first_22_sum - first_8_sum\n    terms_diff = terms_22 - terms_8\n    \n    # Difference in the sum between terms can be used to find the common difference\n    common_difference = sum_diff / terms_diff\n    \n    # To find the sum of the first 15 terms, use the formula of the sum of an arithmetic sequence:\n    # S_n = n/2 * (2 * a1 + (n - 1) * d)\n    # where n is the number of terms, a1 is the first term, and d is the common difference.\n    # We already have the sum of first 8 terms, so we need to calculate the sum from the 9th term to\n    # the 15th term and add it to the sum of the first 8 terms.\n    \n    terms_15 = 15  # The number of terms to find the sum for\n    sum_first_15_terms = first_8_sum + \\\n                         (terms_15 - terms_8) / 2 * \\\n                         (2 * (first_8_sum / terms_8 + common_difference) + \\\n                         (terms_15 - terms_8 - 1) * common_difference)\n    \n    return sum_first_15_terms\n\nans = solution()"
    ],
    "ace93f555d35415e8fd4bad294887d9e": [
        "def solution():\n    sum_to_20 = sum(range(1, 21))\n    sum_to_19 = sum(range(1, 20))\n    ans = sum_to_20 + sum_to_19\n    return ans\n\nans = solution()"
    ],
    "3ad80911c83e482091540057163573aa": [
        "def solution():\n    from itertools import permutations\n    colors = ['red', 'yellow', 'blue', 'green', 'purple']\n    # As we need to have all four letters colored differently,\n    # we get all possible permutations of 4 colors taken from the 5.\n    all_color_permutations = list(permutations(colors, 4))\n    return len(all_color_permutations)\n\nans = solution()"
    ],
    "5be13676699942f49a395268e1f5d8e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for water flow rates of A, B, and C\n    A, B, C = symbols('A B C')\n\n    # If only A and C are turned on, the pool is filled and 18 tons are from A\n    # So the total capacity of the pool is A + C and A = 18 tons\n    equation1 = Eq(A + C, A + 18)\n\n    # If only B and C are turned on, the pool is filled and 27 tons are from B\n    # So the total capacity of the pool is B + C and B = 27 tons\n    equation2 = Eq(B + C, B + 27)\n\n    # Given that the flow rate of B is twice that of A\n    equation3 = Eq(B, 2 * A)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    # Calculate the capacity of the pool which is A + C\n    pool_capacity = solutions[A] + solutions[C]\n\n    return pool_capacity\n\nans = solution()"
    ],
    "4fbbbe33f9d643a79e9eec4d1694212f": [
        "def solution():\n    total_questions = 25\n    correct_points = 4\n    incorrect_points = -2\n    rex_score = 66\n    questions_answered = total_questions - 1\n\n    # Start with the hypothesis that all answered questions were correct.\n    max_score = questions_answered * correct_points\n    # Calculate how much the score decreases for every correct turned incorrect.\n    score_decrease_per_incorrect = correct_points - incorrect_points\n\n    # The difference between the maximum score and Rex's score must be a multiple of the score decrease.\n    diff = max_score - rex_score\n\n    # Divide the difference by score decrease per incorrect to find the number of incorrect answers.\n    incorrect_answers = diff // score_decrease_per_incorrect\n\n    # Subtract the number of incorrect from the questions answered to get correct answers.\n    correct_answers = questions_answered - incorrect_answers\n\n    return correct_answers\n\nans = solution()"
    ],
    "08e324d694994846a1553d5b65da495f": [
        "def solution():\n    for age in range(10, 100):  # Alberta's age has two digits\n        reversed_age = int(str(age)[::-1]) + 1  # Digits are interchanged and 1 is added\n        if age == reversed_age * 2:  # The answer is half of Alberta's present age\n            return age\n\nans = solution()"
    ],
    "c52c9bc9f59d4cbf824806accfda1f41": [
        "def solution():\n    remaining_after_day2 = 23 * 2 + 5\n    total_after_day1 = (remaining_after_day2 + 7) * 2\n    return total_after_day1\n\nans = solution()"
    ],
    "42372c8fe434451ba8bf5bb0da429399": [
        "def solution():\n    meatballs_left_initially = 20\n    meatballs_left_after = 10\n    meatballs_difference = meatballs_left_initially - meatballs_left_after\n\n    # Since the difference in the meatballs left is due to one extra student being served,\n    # the number of meatballs each student gets is the same as the difference.\n    number_of_meatballs_per_student = meatballs_difference\n\n    return number_of_meatballs_per_student\n\nans = solution()"
    ],
    "4ee96f3c14a241f197933544bbe8db53": [
        "def solution():\n    original_amount = 9.32\n    increase_fraction = 1 / 10\n    ans = original_amount + original_amount * increase_fraction\n    return ans\n\nans = solution()"
    ],
    "a8688d554c69475692b7b0ed84cdf3c9": [
        "def solution():\n    fraction = 4 / 25\n    decimal = 0.17\n\n    ans = \"4/25\" if fraction > decimal else \"0.17\" if decimal > fraction else \"equal\"\n    \n    return ans\n\nans = solution()"
    ],
    "9eca731a85d34c5c84ce4315a5438484": [
        "def solution():\n    initial_volume = 1000  # milliliters (since 1 litre is 1000 ml)\n    cup_volume = 200       # milliliters\n    num_cups = 3\n\n    water_used = cup_volume * num_cups\n    remaining_water = initial_volume - water_used\n\n    return remaining_water\n\nans = solution()"
    ],
    "680347d9be334298803934506acbea08": [
        "def solution():\n    ans = 221 * 8\n    return ans\n\nans = solution()"
    ],
    "8a82b904fe8845d7ace8f6031f51ff8b": [
        "def solution():\n    # Number of lamps that will be on are those which are toggled an odd number of times.\n    # This will only happen for lamps which have an odd number of divisors.\n    # Only perfect squares have an odd number of divisors.\n    # Hence, we need to find the number of perfect squares <= 250\n\n    # As square root of 250 is approximately 15.81, the last perfect square <= 250 is 15^2.\n    # Thus, there are 15 perfect squares (and hence 15 lamps on) up to 250.\n\n    return 15\n\nans = solution()"
    ],
    "c419ce5358864ba09eea0ae91783b76f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables\n    roses_orig, daisies_orig, roses_added, daisies_added, months = symbols('roses_orig daisies_orig roses_added daisies_added months', integer=True)\n    \n    # Given equations\n    total_flowers_orig = Eq(roses_orig + daisies_orig, 300)  # originally there are 300 flowers in total\n    total_roses_future = Eq(roses_orig + months * roses_added, 280)  # there will be 280 roses in the future\n    total_daisies_future = Eq(daisies_orig + months * daisies_added, 180) # there will be 180 daisies in the future\n    roses_daisies_added_equal = Eq(roses_added, daisies_added)  # the same number of roses and daisies are added each month\n    \n    # Solve the system of equations\n    solutions = solve((total_flowers_orig, total_roses_future, total_daisies_future, roses_daisies_added_equal),\n                      (roses_orig, daisies_orig, roses_added, daisies_added, months))\n\n    # Since we have multiple solutions, we need to find the correct one by applying more constraints\n    for sol in solutions:\n        if all(value.is_integer and value >= 0 for value in sol) and sol[roses_orig] + sol[daisies_orig] == 300:\n            return sol[roses_orig]\n\nans = solution()"
    ],
    "3e243b1122134f85813f8fa4e13d7976": [
        "def solution():\n    tenth_number = 23\n    fifteenth_number = 38\n    position_diff = 15 - 10\n    \n    common_difference = (fifteenth_number - tenth_number) / position_diff\n    nth_number = tenth_number + common_difference * (12 - 10)\n\n    return nth_number\n\nans = solution()"
    ],
    "2556a70133494b14a2fdfa3f1d8a534d": [
        "def solution():\n    # Calculate total correct answers from each test\n    correct_test1 = 0.20 * 10\n    correct_test2 = 0.80 * 20\n    correct_test3 = 0.90 * 30\n    \n    # Calculate total number of problems\n    total_problems = 10 + 20 + 30\n    \n    # Calculate total number of correct answers\n    total_correct = correct_test1 + correct_test2 + correct_test3\n    \n    # Calculate overall percentage score\n    overall_percentage = (total_correct / total_problems) * 100\n    \n    return overall_percentage\n\nans = solution()"
    ],
    "937225b6b7ac470ab01b68f8a4389aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    water, fruit = symbols('water fruit')\n\n    equation1 = Eq(2 * water + 3 * fruit, 2.55)\n    equation2 = Eq(water, fruit + 0.15)\n\n    solutions = solve((equation1, equation2), (water, fruit))\n\n    return solutions[fruit]\n\nans = solution()"
    ],
    "77bc73140f934ab28b377454635f30a4": [
        "def solution():\n    ans = 7 + 8 * 3\n    return ans\n\nans = solution()"
    ],
    "9f7d5af3fb5845e58bbb24c28e44207b": [
        "def solution():\n    brick_size_large_dm2 = 6**2 # size in decimeter^2 of the large brick\n    brick_size_small_cm2 = 64   # size in centimeter^2 of the small brick\n    \n    # Since 1 dm^2 = 100 cm^2, convert large brick size to cm^2\n    brick_size_large_cm2 = brick_size_large_dm2 * 100 \n    \n    # Total area covered by 80 large bricks in cm^2\n    total_area_cm2 = brick_size_large_cm2 * 80 \n    \n    # Number of small bricks needed\n    num_small_bricks = total_area_cm2 / brick_size_small_cm2\n    \n    return num_small_bricks\n\nans = solution()"
    ],
    "8da16cb231e141899db831c841592f4e": [
        "def solution():\n    n = 91\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False  # 91 is not prime because it is divisible by i\n    return True  # 91 would be prime if it wasn't divisible by any i\n\nans = solution()"
    ],
    "9c96976b9a0644528200db1a240ce22f": [
        "def solution():\n    from itertools import permutations\n\n    # Generate all permutations of the given digits\n    perms = permutations([1, 3, 4, 5, 7, 8])\n\n    # Initialize the greatest number\n    greatest_number = 0\n\n    # Iterating through all permutations to find the greatest number\n    for perm in perms:\n        # Convert the permutation tuple to an integer\n        num = int(''.join(map(str, perm)))\n        \n        # Check if the number is a multiple of 11\n        if num % 11 == 0:\n            # Update the greatest number if a larger multiple of 11 is found\n            greatest_number = max(greatest_number, num)\n\n    return greatest_number\n\nans = solution()"
    ],
    "00bedbbff96a4c41a6d2dc74e09c2bbc": [
        "def solution():\n    from math import log10\n    # Calculate the number of digits of each part\n    A_4 = 2018 * log10(4)\n    A_25 = 2018 * log10(25)\n    # The number of digits is the floor of the sum of the logs, plus 1\n    total_digits = int(A_4 + A_25) + 1\n    return total_digits\n\nans = solution()"
    ],
    "bf9c9c142f014e25baff17cc266a571a": [
        "def solution():\n    total_diff = 31\n    boys, girls, total_students = 0, 0, 0\n    layer = 0\n    \n    while True:\n        # Boys occupy the even layers (including the 0th layer)\n        boys += (layer * 4 + 1)**2 if layer % 2 == 0 else 0\n        # Girls occupy the odd layers\n        girls += (layer * 4 + 1)**2 if layer % 2 == 1 else 0\n        \n        if boys - girls == total_diff:\n            total_students = boys + girls\n            break\n        else:\n            layer += 1\n            \n    return total_students\n\nans = solution()"
    ],
    "8ee614cba3ae409b923c2260cf36ff3e": [
        "def solution():\n    pupils_total = 500\n    # Let the number of boys be b and the number of girls be b + 30\n    # We know that the number of boys plus the number of girls equals the total number of pupils\n    # Therefore, b + (b + 30) = 500\n    # This equation simplifies to 2b + 30 = 500\n    # Subtract 30 from both sides to find 2b = 470\n    # Finally, divide both sides by 2 to find b = 235\n    # This is the number of boys, and we need to find the number of girls, which is b + 30\n    boys = (pupils_total - 30) // 2\n    girls = boys + 30\n    return girls\n\nans = solution()"
    ],
    "5b4ba0d6146248b28e891e03399c5b95": [
        "def solution():\n    length_A = 10\n    length_B = 5 * length_A\n    total_length = length_A + length_B\n    return total_length\n\nans = solution()"
    ],
    "209362616733426d8b75bc739a42bd1c": [
        "from math import comb\n\ndef solution():\n    total_players = 5\n    team_size = 3\n    return comb(total_players, team_size)\n\nans = solution()"
    ],
    "2046f9901ec645f3b15da0905103e4b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the original number of apples\n    total_apples = symbols('total_apples')\n\n    # Define the equation based on the problem statement\n    equation = Eq((total_apples / 5) + 80, total_apples - (total_apples * 30 / 100))\n\n    # Solve the equation\n    solutions = solve(equation, total_apples)\n\n    # Calculate the number of apples left in the end\n    apples_left = total_apples * 30 / 100\n    apples_left_value = apples_left.subs(total_apples, solutions[0])\n\n    return int(apples_left_value)\n\nans = solution()"
    ],
    "928d90a169904ea2a45144f88db5fc41": [
        "def solution():\n    count = 0\n    # Since each pile has at least 1 ball, we start from 1 and go up to 10 - 2 (since we need to leave at least 1 ball for the other two piles)\n    for x1 in range(1, 10 - 1):\n        for x2 in range(1, 10 - x1):\n            x3 = 10 - x1 - x2  # The last pile must contain the remaining balls\n            if x1 != x2 and x1 != x3 and x2 != x3:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "1b6cda7ee5184882bed20314b0c55e5b": [
        "def solution():\n    count = 0\n    for x1 in range(1, 14):\n        for x2 in range(x1+1, 14):\n            x3 = 14 - (x1 + x2)\n            if x3 > x2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e66987ea1869420495aacf4803e1a0e6": [
        "def solution():\n    selling_price = 6500\n    profit = 30 / 100 * selling_price\n    cost_price = selling_price - profit\n\n    desired_profit = 5000\n    new_selling_price = cost_price + desired_profit\n    new_profit_percentage = (desired_profit / cost_price) * 100\n\n    return new_profit_percentage\n\nans = solution()"
    ],
    "fd400a9b34ea45bab56f191197ce87a7": [
        "def solution():\n    length_of_wood = 52\n    number_of_pieces = 2\n    length_per_piece = length_of_wood / number_of_pieces\n    return length_per_piece\n\nans = solution()"
    ],
    "cab8adbf9a644688a8392376fee0a725": [
        "def solution():\n    total_cookies = 200\n\n    morning_cookies = total_cookies * (1/5)\n    remainder_cookies = total_cookies - morning_cookies\n\n    afternoon_cookies = remainder_cookies * (3/4)\n\n    return int(afternoon_cookies)\n\nans = solution()"
    ],
    "4ae3195333ce44baae2440d899e42e7b": [
        "def solution():\n    people_between = 1  # Emily is directly behind Danny\n    people_in_front_of_emily = 25\n    people_behind_danny = 16\n    danny_and_emily = 2  # Counting Danny and Emily themselves\n\n    total_people = people_in_front_of_emily + danny_and_emily + people_behind_danny\n    \n    return total_people\n    \nans = solution()"
    ],
    "d4cf12e04703450586eb3ad6f4fbf86b": [
        "def solution():\n    # Let the first term be x.\n    # The seven consecutive even numbers are then: x, x+2, x+4, x+6, x+8, x+10, x+12.\n    # According to the problem statement, the fourth number (x+6) \n    # is greater than one-third of the sum of the first and seventh numbers by 6.\n    # Therefore, we have the equation: (x+6) = (1/3)*(x + x+12) + 6\n\n    # Simplifying the equation\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 6), (1 / 3) * (x + x + 12) + 6)\n\n    # Solving for x\n    sol = solve(equation, x)\n    first_term = sol[0]\n\n    # Now we can calculate the sum of the seven numbers\n    sum_seven_numbers = sum([first_term + (2 * i) for i in range(7)])\n    \n    return sum_seven_numbers\n\nans = solution()"
    ],
    "ea3cc6d4b3a84e5bafa81bda550dd59c": [
        "def solution():\n    kilometers = 1.5\n    meters_per_kilometer = 1000\n    meters = kilometers * meters_per_kilometer\n    return meters\n\nans = solution()"
    ],
    "40e27d47a03d4eed83ff6c5ccbbd0c12": [
        "def solution():\n    highway_length = 45\n    interval = 9\n    \n    num_trees_one_side = (highway_length // interval) + 1\n    total_trees = num_trees_one_side * 2\n    \n    return total_trees\n\nans = solution()"
    ],
    "95cc2a35844f4793bec67feb3c34b55a": [
        "def solution():\n    total_sum = 9 * 140  # Total sum of 9 numbers\n    sum_remaining = total_sum - 180  # Sum of remaining 8 numbers after removing one number, 180\n    average_remaining = sum_remaining / 8  # Average of the remaining 8 numbers\n    \n    return average_remaining\n\nans = solution()"
    ],
    "a69442f9714442b29511db3b6b5cef94": [
        "def solution():\n    blue_markers = 80\n    red_markers = 2 * blue_markers\n    green_markers = blue_markers + 45\n    total_markers = blue_markers + red_markers + green_markers\n    return total_markers\n\nans = solution()"
    ],
    "c95e959b4299436693470a7a54149f3c": [
        "def solution():\n    return 2 * 20 - 1\n\nans = solution()"
    ],
    "6a792aa33daf4ec4a06273453da47af8": [
        "def solution():\n    # If the Ferrari driver finished in second place and overtook 5 cars,\n    # it means there were originally 6 cars ahead of him.\n    ans = 6 + 1  # plus the Ferrari driver itself to get the total number of cars\n    return ans\n\nans = solution()"
    ],
    "1fc13706bdfd4125b1f46f271923f69c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    purple, yellow, white, red = symbols('purple yellow white red')\n    total_red_and_white = 38\n    total_red = 28\n\n    # Given relations\n    equation1 = Eq(purple, 2 * yellow)\n    equation2 = Eq(yellow, 3 * white)\n    equation3 = Eq(white + red, total_red_and_white)\n    equation4 = Eq(red, total_red)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (purple, yellow, white, red))\n\n    # Calculating the total number of orchids\n    total_orchids = solutions[purple] + solutions[yellow] + solutions[white] + solutions[red]\n\n    return total_orchids\n\nans = solution()"
    ],
    "6ddb6579408f43569d88970148692882": [
        "def solution():\n    johnny_rings = 194\n    amber_rings = 5 * johnny_rings\n    remaining_rings = 65\n\n    total_rings = johnny_rings + amber_rings + remaining_rings\n\n    return total_rings\n\nans = solution()"
    ],
    "fe2f6c6e96c74d368dbe56b437d7dbc0": [
        "def solution():\n    lily_book_price = 15.99\n    amy_book_price = lily_book_price + 8.01\n    total_price = lily_book_price + amy_book_price\n\n    return total_price\n\nans = solution()"
    ],
    "8773123676b246e1b04d41c383be9480": [
        "def solution():\n    sides = 9\n    total_interior_angles = (sides - 2) * 180\n    interior_angle = total_interior_angles / sides\n    return interior_angle\n\nans = solution()"
    ],
    "8e8f9986b2ec4a658422dc4b646e598a": [
        "def solution():\n    total = sum(int('5' * i) for i in range(1, 21))\n    ans = total % 10000  # to get the last 4 digits\n    return ans\n\nans = solution()"
    ],
    "ad1785cf47534eb79f57a2988c26b792": [
        "def solution():\n    # The age difference between Eddie and Mike will remain constant.\n    age_difference = 48 - 8\n    \n    # When Eddie is 18 years old, Mike's age will be Eddie's age + age difference.\n    eddie_age_future = 18\n    mikes_age_future = eddie_age_future + age_difference\n    \n    return mikes_age_future\n\nans = solution()"
    ],
    "bacacf9e4d6344c08c919cdfcd0dd171": [
        "def solution():\n    total_people = 200\n    percent_men = 25 / 100\n    fraction_women = 1 / 5\n\n    men = total_people * percent_men\n    women = total_people * fraction_women\n    \n    children = total_people - (men + women)\n    \n    return int(children)\n\nans = solution()"
    ],
    "2aa5fb221cec4c6f9ef10acc189afca8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    white, checked = symbols('white checked')\n    equation = Eq(white, 7 * checked)\n    total_shirts = Eq(white + checked, 72)\n\n    solutions = solve((equation, total_shirts), (white, checked))\n\n    return solutions[white]\n\nans = solution()"
    ],
    "3df0c3dde5e243a9ab9d9c0623518d14": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (3, 4), (4, 5)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "b985fa2059844dd9846e790e911a7a78": [
        "def solution():\n    # Calculate work rate of 1 man in 1 day\n    work_rate_per_man_per_day = 1 / (2 * 3) # since 2 men take 3 days to build 1 wall\n\n    # Define the function that calculates time for y men to build x walls\n    def time_to_build(x, y):\n        total_work = work_rate_per_man_per_day * y\n        time_needed = x / total_work\n        return time_needed\n\n    # The values of x and y are not specified in the problem\n    # Return the function itself\n    return time_to_build\n\n# Assuming we need to provide the values for x and y, for example:\n# Let x be the number of walls, here considered as 1 for example purpose\n# Let y be the number of men, here considered as 1 for example purpose\n# You can replace these with actual values as needed\n\nx = 1 # Number of walls to build\ny = 1 # Number of men to build the walls\n# Call the function with values for x and y\nans = solution()(x, y)"
    ],
    "60493d0a930546ecbdb78a1d7c6e8fc5": [
        "def solution():\n    pages_per_day = 16 / 2\n    total_pages = pages_per_day * 9\n    return total_pages\n\nans = solution()"
    ],
    "d95ed3ffcb4c4e158e87923bbb18dbc2": [
        "def solution():\n    ans = 72 + 60 + 48 + 36 + 24 + 12\n    return ans\n\nans = solution()"
    ],
    "124505e7801f407bbb2c337fd03e40c0": [
        "def solution():\n    # Without the actual pattern or the pictorial representation, it's impossible\n    # to provide a solution. The Python code for solving the pattern problem needs\n    # the details of the pattern to proceed with finding the value.\n\n    # Since the pattern is not provided, we return None.\n    return None\n\nans = solution()"
    ],
    "0b0e2b60afe9443a983a2f0c179e8cb6": [
        "def solution():\n    # We'll search for numbers starting from the greatest 3-digit number,\n    # 999 and decrement by 18 (since it should be divisible by 9 and odd)\n    for number in range(999, 100, -18):\n        # the number is already confirmed to be divisible by 9 and odd, \n        # now we just need to check that the tens digit is divisible by 4\n        tens_digit = (number // 10) % 10\n        if tens_digit % 4 == 0:\n            # if all conditions are met, we've found our number\n            return number\n\nans = solution()"
    ],
    "36b9783bc7c540cd8a6f80ea8164926c": [
        "def solution():\n    ans = 42 // 6\n    return ans\n\nans = solution()"
    ],
    "a768a55edb6b4c729273848fbd84119b": [
        "def solution():\n    # Due to the pigeonhole principle, to ensure getting at least 2 balls of the same colour,\n    # consider the worst-case scenario. This would mean drawing one of each colour first.\n    white = 8\n    red = 7\n    green = 5\n    # Draw one of each (white, red, green)\n    draws = 1 + 1 + 1\n    # Next draw will ensure at least 2 balls of the same colour\n    return draws + 1\n\nans = solution()"
    ],
    "ae2892dc2b454550bff74338556e93c8": [
        "def solution():\n    for num in range(6, 55):  # Check numbers between 6 and 54\n        if num % 5 == 0 and (num + 1) % 7 == 0:  # Check conditions\n            return num  # Return the first number that satisfies the conditions\n\nans = solution()"
    ],
    "f18dbb07c7d948eb81cecdc6adc6657e": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.12\n    years = 8\n    \n    value_after_years = initial_value * ((1 - depreciation_rate) ** years)\n    \n    return round(value_after_years, 2)\n\nans = solution()"
    ],
    "99d84eff6ac64f09ab3bcfb4983bcdfc": [
        "def sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))\n\ndef solution():\n    m = 1\n    while True:\n        if sum_of_digits(m) == 5 * sum_of_digits(m + 1):\n            return m\n        m += 1\n\nans = solution()"
    ],
    "3bf359500b04447eb133eb82ac3cdcd6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n    total_children = 390\n\n    # One-third of the girls equals one-half of the boys\n    equation1 = Eq(girls / 3, boys / 2)\n\n    # Total number of children is the sum of boys and girls\n    equation2 = Eq(girls + boys, total_children)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (girls, boys))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "39baf06fc25b46b29d10b9191c1761d0": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (4, 5), (5, 6)]\n    number = solve_congruence(*congruences)\n\n    return number[0]\n\nans = solution()"
    ],
    "1f292e7a93ed4fffaa057286ebde0e3e": [
        "def solution():\n    number = (24 / (3/4))\n    return number\n\nans = solution()"
    ],
    "c53e746b357140a38e789d2b4661f42f": [
        "def solution():\n    average_jan_to_apr = 300\n    average_may_to_jul = 250\n    total_aug_to_sep = 750\n    average_oct_to_dec = 300\n    \n    months_jan_to_apr = 4\n    months_may_to_jul = 3\n    months_aug_to_sep = 2\n    months_oct_to_dec = 3\n    \n    total_spent_jan_to_apr = average_jan_to_apr * months_jan_to_apr\n    total_spent_may_to_jul = average_may_to_jul * months_may_to_jul\n    total_spent_oct_to_dec = average_oct_to_dec * months_oct_to_dec\n    \n    total_spent_year = (total_spent_jan_to_apr +\n                        total_spent_may_to_jul +\n                        total_aug_to_sep +\n                        total_spent_oct_to_dec)\n    \n    average_per_month = total_spent_year / 12\n    \n    return average_per_month\n\nans = solution()"
    ],
    "13972553585945499780bd1f9de3edbb": [
        "def solution():\n    k = (100 - 2) / 100\n    return k\n\nans = solution()"
    ],
    "e6c4ff2e43db4f879b08144db3336f68": [
        "def solution():\n    temperature_bottom = 17\n    temperature_top = -2\n    drop_in_temperature = temperature_bottom - temperature_top\n    return drop_in_temperature\n\nans = solution()"
    ],
    "978a2a1cb0b648789d46ea37337fec80": [
        "def solution():\n    father_age_when_tom_reaches_father_age = 70\n    tom_current_age = 10\n    years_until_tom_reaches_fathers_age = father_age_when_tom_reaches_father_age - tom_current_age\n    father_current_age = tom_current_age + years_until_tom_reaches_fathers_age\n\n    return father_current_age\n\nans = solution()"
    ],
    "0ac355b21f2a426fa5a12babd8ae8f58": [
        "def solution():\n    daily_pick = 24 / 5\n    total_pick = daily_pick * 8.5\n    return total_pick\n\nans = solution()"
    ],
    "895c80e1252f488aa0bcc6bfe68a22ba": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    departure_time = datetime.strptime(\"0735\", \"%H%M\")\n    journey_duration = timedelta(hours=1, minutes=35)\n    walk_duration = timedelta(minutes=40)\n\n    arrival_time_at_work = departure_time + journey_duration + walk_duration\n    return arrival_time_at_work.strftime(\"%H%M\")\n\nans = solution()"
    ],
    "67e73a7f1c6c4c4e9ba62435f2be80d4": [
        "def solution():\n    total_passengers = 400\n    men_ratio = 9 / 20\n    women_percentage = 30 / 100\n\n    men_count = total_passengers * men_ratio\n    women_count = total_passengers * women_percentage\n    children_count = total_passengers - (men_count + women_count)\n\n    return int(children_count)\n\nans = solution()"
    ],
    "f0a5dbe6de374eba85a44510eb9aa5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jordan, evie, emily = symbols('jordan evie emily')\n    \n    equation1 = Eq(jordan, 3 * emily)\n    equation2 = Eq(evie, jordan - 20)\n    equation3 = Eq(jordan + evie + emily, 400)\n\n    solutions = solve((equation1, equation2, equation3), (jordan, evie, emily))\n\n    return solutions[evie]\n\nans = solution()"
    ],
    "5b740c87653c43258c0586d8f12663d4": [
        "def solution():\n    possible_values = []\n    # Iterate over the range of natural numbers less than 200\n    for N in range(200):\n        # Get the representations of N in base 4, 6, and 8\n        base4 = sum(int(digit) for digit in format(N, 'b4'))\n        base6 = sum(int(digit) for digit in format(N, 'b6'))\n        base8 = sum(int(digit) for digit in format(N, 'b8'))\n  \n        # Check the conditions for the sum of the digits\n        if base4 == 5 and base6 == 8 and base8 == 9:\n            possible_values.append(N)\n    \n    return possible_values\n\nans = solution()"
    ],
    "f5736677dc6940b8a6a9e5d768b339cf": [
        "def solution():\n    cost_per_six = 1.10\n    cost_per_twelve = cost_per_six * (12 / 6)\n    return cost_per_twelve\n\nans = solution()"
    ],
    "b85bc56d0f9b4a388b112f1d1c98b5ac": [
        "def solution():\n    cost_per_bag_in_p = 16\n    total_money_in_p = 200  # since £2 is equal to 200p\n\n    num_bags = total_money_in_p // cost_per_bag_in_p\n\n    return num_bags\n\nans = solution()"
    ],
    "c3b73f89dc164b2c8290804ecfee10f2": [
        "def solution():\n    return 8.3 * 40\n\nans = solution()"
    ],
    "afcd43f8aadd48d3b3b70d1cd4402d8c": [
        "def solution():\n    # There are 3 choices for the first digit (2, 3, or 0 but 0 is not allowed for three-digit numbers)\n    first_digit_choices = 2\n\n    # There are 3 choices for the second digit, since repetition is allowed\n    second_digit_choices = 3\n\n    # There are 3 choices for the third digit, since repetition is allowed\n    third_digit_choices = 3\n\n    # The total number of different three-digit numbers is the product of the choices\n    total_numbers = first_digit_choices * second_digit_choices * third_digit_choices\n\n    return total_numbers\n\nans = solution()"
    ],
    "2ff378394a154043a3ef7f34cd20ed7b": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"63{digit}25\")\n        if number % 45 == 0:\n            return digit\n\nans = solution()"
    ],
    "98497b9ada5a4cf096e251a78f90e4f5": [
        "def solution():\n    red_eggs = 8\n    yellow_eggs = red_eggs + 7\n    total_eggs = red_eggs + yellow_eggs\n    return total_eggs\n\nans = solution()"
    ],
    "3a737e87377f45d6b533c3df64a44d83": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    chip, dale = symbols('chip dale')\n    \n    # Equation representing the situation after Chip gave 14 acorns to Dale\n    equation1 = Eq(chip - 14, dale + 14) \n    # Equation representing the total acorns they had initially\n    equation2 = Eq(chip + dale, 124) \n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (chip, dale))\n\n    return solutions[chip]\n\nans = solution()"
    ],
    "64f1d8eb28744f888d7b31370fa44497": [
        "def solution():\n    for i in range(1, 100):\n        if i % 2 == 0 and i % 4 == 0 and i % 3 == 0 and (i ** 0.5).is_integer():\n            return i\n\nans = solution()"
    ],
    "fd972a8b8be9487fa73a04079ced2d12": [
        "from math import factorial\n\ndef solution():\n    total_books = 6 + 2\n    fiction_books = 6\n    comic_books = 2\n\n    # The number of ways to arrange the books is given by the formula for permutations of indistinguishable objects:\n    # total_permutations = total_books! / (fiction_books! * comic_books!)\n    total_permutations = factorial(total_books) // (factorial(fiction_books) * factorial(comic_books))\n    \n    return total_permutations\n\nans = solution()"
    ],
    "e8a6833cb7f04cedbeaf3a2156064cdf": [
        "def solution():\n    ans = 85 // 5\n    return ans\n\nans = solution()"
    ],
    "005dea19a47e4533b68eed3a0f0b497c": [
        "def solution():\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n    s = 51\n    count = 0\n    \n    for prime in reversed(primes):\n        while s >= prime:\n            s -= prime\n            count += 1\n        if s == 0:\n            break\n    \n    return count\n\nans = solution()"
    ],
    "ff3f13e0f5834b50bd1c146b2310996b": [
        "def solution():\n    for num in range(10, 100):  # Search through all 2-digit numbers\n        if num % 4 == 2 and num % 5 == 2:  # Check the division remainders\n            return num  # Return the first number that fits the criteria\n\nans = solution()"
    ],
    "40c82361e0c74a8ea2b45cd4b91a81ca": [
        "def solution():\n    total_cost = 8 * 'x'  # Replace 'x' with a symbolic representation\n    return total_cost\n\nans = solution()"
    ],
    "18e2a859640043989d18f5185f01a455": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((2/3) * (x-1) - (1/4) * (3*x + 1), 1/6)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "18ba329683b9437a99bb36874be11b6d": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            if '5' in str(hour) or '5' in str(minute):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "6108bfa174894485b78d31f295206c3f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    science_books, novels = symbols('science_books novels')\n\n    equation1 = Eq(science_books, 6 * novels - 14)\n    equation2 = Eq(novels, science_books - 106)\n\n    solutions = solve((equation1, equation2), (science_books, novels))\n\n    return solutions[science_books]\n\nans = solution()"
    ],
    "528a56a810f04995a3393b4a5b5c2aff": [
        "def solution():\n    eggs_per_tray = 26\n    number_of_trays = 4\n\n    total_eggs = eggs_per_tray * number_of_trays\n\n    return total_eggs\n\nans = solution()"
    ],
    "9b180ed71aad4dea867c316124171dcc": [
        "def solution():\n    # Each pair's subtraction (e.g., 40 - 39, 38 - 37, ...) always equals to 1.\n    # Since the sequence starts from 40 and ends at 1, we have 20 pairs.\n    pairs = 20\n    # Since every pair equals 1 after subtraction, we simply multiply the number of pairs by 1 to get the total.\n    ans = pairs * 1\n    return ans\n\nans = solution()"
    ],
    "8b7e921fc69e446a84cae8a24f0dd127": [
        "def solution():\n    initial_amount = 3600\n    interest_rate = 0.02\n    \n    interest = initial_amount * interest_rate\n\n    return interest\n\nans = solution()"
    ],
    "2a58888942e444b482b08c681e223aac": [
        "def solution():\n    total_penpals = 11\n    total_pages = 38\n\n    for three_page_letters in range(total_penpals + 1):\n        four_page_letters = total_penpals - three_page_letters\n        if 3 * three_page_letters + 4 * four_page_letters == total_pages:\n            return three_page_letters\n\nans = solution()"
    ],
    "8890e33ef31b4ccc99ae9b0385739828": [
        "def solution():\n    for i in range(100, 1000):\n        if i % 24 == 0 and i // 24 == 36:\n            return i\n\nans = solution()"
    ],
    "508d839986774182b702b7f8bea45c05": [
        "def solution():\n    initial_kg = 2.5\n    pie_kg = 750 / 1000\n    juice_kg = 1025 / 1000\n    \n    remaining_kg = initial_kg - (pie_kg + juice_kg)\n    \n    return remaining_kg\n\nans = solution()"
    ],
    "65be0a62238c44a1a81f3a149de3c3e7": [
        "def solution():\n    people_in_front = 9\n    position_from_back = 15\n    amy_position = 1\n    total_people = people_in_front + amy_position + position_from_back - amy_position\n    return total_people\n\nans = solution()"
    ],
    "f7301d7cd70d47c88eb5997a858caf0c": [
        "def solution():\n    ans = 7 - (-4)\n    return ans\n\nans = solution()"
    ],
    "626a60e2bb934c6c9efb5ecfc8cc7b07": [
        "def solution():\n    right_of_favorite = 6\n    position_from_left = 14\n\n    total_books = position_from_left + right_of_favorite\n\n    return total_books\n\nans = solution()"
    ],
    "d9b549ad5efb489b9e021f1fff6fe259": [
        "def solution():\n    initial_height = 17  # Initial height of the plant in cm\n    final_height = 65    # Final height of the plant after 4 weeks in cm\n    weeks = 4            # Number of weeks the plant grew\n\n    growth = final_height - initial_height  # Total growth in cm\n    growth_per_week = growth / weeks        # Growth per week in cm\n\n    return growth_per_week\n\nans = solution()"
    ],
    "cff268a0ab3d4d4689a53ee2d5eab94a": [
        "def solution():\n    # Draw all 5 balls of one color (worst case for that color), plus all 5 of another color (worst case for second color)\n    # Then the next ball drawn will be the third color for sure.\n    balls_drawn = 5 + 5 + 1  # All balls of two colors plus one more to ensure the third color\n    return balls_drawn\n\nans = solution()"
    ],
    "432a2792a8fd48ab90470670028065e3": [
        "def solution():\n    original_volume = 1200  # The box is fully filled with 1200 grams\n    new_volume = original_volume * (1/2)**3  # Each dimension is halved, so the volume is scaled down by 1/8\n    return new_volume\n\nans = solution()"
    ],
    "db88854e5b9e4689aa2540cd3230716e": [
        "def solution():\n    ans = 694 * 27\n    return ans\n\nans = solution()"
    ],
    "34aba952c92541a880a60157ce1f2a2a": [
        "from sympy import primerange\n\ndef solution():\n    total_cards = 20\n    prime_cards = list(primerange(1, total_cards + 1))\n    non_prime_cards = total_cards - len(prime_cards)\n    return non_prime_cards\n\nans = solution()"
    ],
    "5f2651543daf486c9b5689378dd5d200": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the length of the shorter piece of ribbon as 'x'.\n    # So the longer one will be '2x'.\n    x = symbols('x')\n    \n    # We know that the sum of both pieces is 12.75 m:\n    # x + 2x = 12.75\n    equation = Eq(x + 2*x, 12.75)\n    \n    # Solve the equation to find the length of the shorter piece.\n    length_shorter_piece = solve(equation, x)[0]\n    \n    # The length of the longer piece is twice that of the shorter piece.\n    length_longer_piece = 2 * length_shorter_piece\n    \n    return length_longer_piece\n\nans = solution()"
    ],
    "763158cf5ddc46bda0149e66cd6e5891": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    gigi, lily, coins_gain = symbols('gigi lily coins_gain')\n\n    equation1 = Eq(gigi + coins_gain, 3 * (lily + coins_gain))\n    equation2 = Eq(gigi, 120)\n    equation3 = Eq(lily, 24)\n\n    solutions = solve((equation1, equation2, equation3), (gigi, lily, coins_gain))\n\n    return solutions[coins_gain]\n\nans = solution()"
    ],
    "4a59132b51dd42b3907574fc7508b606": [
        "def solution():\n    ans = 8386 // 14\n    return ans\n\nans = solution()"
    ],
    "03ff8fd61a1e4e12875cd66e409c1908": [
        "def solution():\n    for brian_age in range(14, 100):\n        father_age = 41 + (brian_age - 14)\n        if str(brian_age).zfill(2) == str(father_age).zfill(2)[::-1]:\n            return brian_age\n\nans = solution()"
    ],
    "f52723613c644fc7a8654b9875518c28": [
        "def solution():\n    num_students = 35\n    cabin_capacity = 6\n    min_cabins = (num_students + cabin_capacity - 1) // cabin_capacity\n    return min_cabins\n\nans = solution()"
    ],
    "8246bb5345f84017abee88e67f605f55": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if i % 2 != 0 and sum(map(int, str(i))) == 11:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ac3db56fed3b4b9dadaddbafb7210b8d": [
        "def solution():\n    # Since it's possible to boil all eggs at the same time, \n    # the least amount of time it takes to boil 3 eggs is the same\n    # as the time it takes to boil one egg.\n    time_to_boil_one_egg = 5\n    return time_to_boil_one_egg\n\nans = solution()"
    ],
    "b2ce68cf7f1747dfb2b3a9656328089f": [
        "def solution():\n    dan_calories_yesterday = 1000\n    # Let x be the calories Dan takes in today\n    # The inequality representing Dan taking less calories today is x < dan_calories_yesterday\n    return f\"x < {dan_calories_yesterday}\"\n\nans = solution()"
    ],
    "6ae16204dd0c432f9b2b3b1d7e3657bc": [
        "def solution():\n    initial_dough_kg = 11.16\n    dough_per_cookie_g = 45\n    dough_per_brownie_g = 150\n    num_cookies = 240\n    num_brownies = 2\n    \n    initial_dough_g = initial_dough_kg * 1000\n    used_dough_g = (dough_per_cookie_g * num_cookies) + (dough_per_brownie_g * num_brownies)\n    remaining_dough_g = initial_dough_g - used_dough_g\n    remaining_dough_kg = remaining_dough_g / 1000\n    \n    return round(remaining_dough_kg, 2)\n\nans = solution()"
    ],
    "7863fd485a6b400695c4ed78bf2cec89": [
        "def solution():\n    period_gain = 5 - 8  # daily deposit minus spending in a two-day period\n    period_days = 2\n    periods_in_15_days = 15 // period_days\n    remainder_days = 15 % period_days\n    money_after_periods = periods_in_15_days * period_gain\n    \n    # Calculate remaining balance for extra days beyond complete periods\n    remaining_balance = 0\n    for i in range(1, remainder_days + 1):\n        if i % 2 == 1:\n            remaining_balance += 5  # Deposit\n        else:\n            remaining_balance -= 8  # Spend\n\n    total_money = 100 + money_after_periods + remaining_balance\n    return total_money\n\nans = solution()"
    ],
    "e350ae84124b4fc6989aada9939cc84a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the first term be a and the common difference be d\n    a, d, n = symbols('a d n')\n\n    # Sum of first 4 numbers of an arithmetic sequence: 4/2 * (2a + 3d) = 124\n    equation1 = Eq(2 * a + 3 * d, 124 * 2 / 4)\n\n    # Sum of last 4 numbers: 4/2 * [2a + (n-1)d + 3d] = 156\n    equation2 = Eq(2 * a + (n - 1 + 3) * d, 156 * 2 / 4)\n\n    # Sum of all numbers in the sequence: n/2 * (2a + (n-1)d) = 210\n    equation3 = Eq((2 * a + (n - 1) * d) * n / 2, 210)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (a, d, n))\n\n    # Extract the answer for n\n    return abs(solutions[n])\n\nans = solution()"
    ],
    "612ec442ad6443f4a359e99c3e7de273": [
        "def solution():\n    remaining_biscuits = 10\n\n    # Inverse of eating half of the remaining and 2 less\n    day_two = (remaining_biscuits + 2) * 2\n\n    # Inverse of eating half of all the biscuits and 4 more\n    initial_biscuits = (day_two + 4) * 2\n\n    return initial_biscuits\n\nans = solution()"
    ],
    "93c3881ba71b4288b0c393273f475ffb": [
        "def solution():\n    pattern = [70, 71, 72, 71, 70]\n    pattern_length = len(pattern)\n    index = (1004 - 1) % pattern_length\n    return pattern[index]\n\nans = solution()"
    ],
    "eee379a91f664722bc128506d5cbe9a3": [
        "def solution():\n    total_wine_gums = 20\n    children = 5\n    wine_gums_per_child = total_wine_gums / children\n    return wine_gums_per_child\n\nans = solution()"
    ],
    "eb7626e5b04249ad8fe88c3ada4dac42": [
        "def solution():\n    first_term = 10\n    last_term = 298\n    difference = 3\n    \n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_sequence\n\nans = solution()"
    ],
    "a0a094786a444fc89f05eba94b8e1741": [
        "def solution():\n    ans = (436 + 821) - (263 + 581)\n    return ans\n\nans = solution()"
    ],
    "01b66abf11cc46dbbbfb8fc1cacabe78": [
        "def solution():\n    ans = 25 * 24\n    return ans\n\nans = solution()"
    ],
    "0a3f07dfc88447c4904fa68658a039cc": [
        "def solution():\n    ans = 84.8 / 400\n    return ans\n\nans = solution()"
    ],
    "00797547355649a7aeaa0ba63a6da114": [
        "def solution():\n    ans = 5992 // 7\n    return ans\n\nans = solution()"
    ],
    "b2b289d532544e649564ecfd97481da8": [
        "def solution():\n    total_money = 200\n    money_spent_on_book = total_money * 0.15\n    money_left_after_book = total_money - money_spent_on_book\n    money_spent_on_dvd = money_left_after_book * 0.30\n    money_left = money_left_after_book - money_spent_on_dvd\n    return money_left\n\nans = solution()"
    ],
    "c9055cb54a8e4238a45292b86630682e": [
        "def is_perfect_square(n):\n    return int(n**0.5)**2 == n\n\ndef sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))\n\ndef solution():\n    for number in range(100, 1000):  # 3-digit numbers range from 100 to 999\n        conditions = [\n            number % 27 == 0,  # Statement A\n            number % 7 == 0,   # Statement B\n            sum_of_digits(number) == 17,  # Statement C\n            is_perfect_square(number),  # Statement D\n            89100 % number == 0  # Statement E\n        ]\n        if sum(conditions) == 3:\n            return number\n\nans = solution()"
    ],
    "242aa8419d55484d8e58d0da5659df75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    friends, total_chocolates = symbols('friends total_chocolates')\n    \n    # Equation when giving each friend 18 chocolates\n    equation1 = Eq(total_chocolates, 18 * friends + 41)\n    # Equation when giving each friend 23 chocolates\n    equation2 = Eq(total_chocolates, 23 * friends - 34)\n    \n    # Solve the system of equations for the number of friends and total chocolates\n    solutions = solve((equation1, equation2), (friends, total_chocolates))\n    \n    # Calculate the number of chocolates Natalia will be left with if she gives each friend 20 chocolates\n    remaining_chocolates = solutions[total_chocolates] - 20 * solutions[friends]\n    \n    return remaining_chocolates\n\nans = solution()"
    ],
    "a3164e1c9a684eb6985ada44124f8660": [
        "def solution():\n    ans = 3 * 27.6\n    return ans\n\nans = solution()"
    ],
    "ba5d90894baa46bfb336f5a957cccabb": [
        "def solution():\n    # This variable represents the number of push-ups Mulan can do, where \"best_boy_pushups\" is 50.\n    # The inequality that represents more than can be described by '>' in Python, and\n    # since Mulan can beat even the best boy soldier, we must use strict inequality.\n    best_boy_pushups = 50\n    mulan_pushups = '>' + str(best_boy_pushups)\n    return mulan_pushups\n\nans = solution()"
    ],
    "f2ee218e18d746598a977b19436df816": [
        "def solution():\n    total_balloons_needed = 40\n    balloons_blown = 22\n    balloons_burst = 3\n\n    balloons_remaining = total_balloons_needed - (balloons_blown - balloons_burst)\n    \n    return balloons_remaining\n\nans = solution()"
    ],
    "8379e6cdd21b409f88bd041595e96f86": [
        "def solution():\n    teams = 32\n    total_games = teams - 1\n    games_played = 24\n    remaining_games = total_games - games_played\n    return remaining_games\n\nans = solution()"
    ],
    "297630efead3458f83114baea5177aa8": [
        "def solution():\n    candies = 88\n    children = 8\n\n    # Assign the minimum number of candies (1) to each child first\n    candies -= children  # Remaining candies after giving each child one piece\n\n    # The minimum number for the child who gets the most, is when the distribution \n    # is as even as possible. Hence, we allocate the remaining candies starting \n    # from the least number incrementing by one until we run out.\n    # This will ensure that the child with the most candies gets the least possible amount.\n\n    # We start with children-1 because one child will get the most.\n    min_candies_for_most = children - 1  \n    while candies > 0:\n        for i in range(children):\n            if candies > 0:\n                min_candies_for_most += 1\n                candies -= 1\n    \n    return min_candies_for_most\n\nans = solution()"
    ],
    "4d1afc03690e4059a20150252e9aa14a": [
        "def solution():\n    # As per the game's rules, to ensure a win, Jerry must make sure that after his turn,\n    # the number of stones in both stacks are equal.\n    # This is because whenever the number of stones in both stacks are equal,\n    # the player who plays next can always mimic the opponent's move and eventually win.\n    # Since Tom took 4 stones from Stack B, Stack A has 20 stones and Stack B has 16 stones.\n    # Therefore, Jerry should take 4 stones from Stack A to make the stacks equal.\n    # So, Jerry must take 4 stones from Stack A.\n    stones_to_take = 4\n    stack_to_take_from = 'A'\n\n    return stones_to_take, stack_to_take_from\n\nans = solution()"
    ],
    "4d68899272944beeb370dd566bd82e48": [
        "def solution():\n    number1 = 15\n    number2 = 37\n\n    halfway_number = (number1 + number2) / 2\n\n    return halfway_number\n\nans = solution()"
    ],
    "4883a159ef4841db869cc5b99c3cb8e9": [
        "def solution():\n    pails_filled = 4\n    liters_per_pail = 4\n    liters_left = 7\n\n    original_volume = (pails_filled * liters_per_pail) + liters_left\n\n    return original_volume\n\nans = solution()"
    ],
    "70882e282f9e400e9ee36f2422f02038": [
        "def solution():\n    # Let the number of girls be 7x and the number of boys be 9x, where x is a positive integer\n    # According to the problem, there are 16 more boys than girls:\n    # 9x - 7x = 16\n    # Solve for x\n    x = 16 // 2\n    \n    # Total number of pupils in class 1A is the sum of girls and boys\n    total_pupils = 7 * x + 9 * x\n    return total_pupils\n\nans = solution()"
    ],
    "1f11408ee01e48db98990edeed513497": [
        "def solution():\n    correct_sum = sum(1 + 3 * i for i in range(37))\n    difference = correct_sum - 2011\n    # Since the mistake was subtracting instead of adding, the difference is twice the number that should have been added\n    mistake_number = difference // 2\n    # Find the position by dividing the mistaken number by 3\n    position = (mistake_number - 1) // 3\n    return position + 1  # add 1 because position is 0-indexed\n\nans = solution()"
    ],
    "61ae1572690948d28178f82d9d76d770": [
        "def solution():\n    circumference = 840\n    interval = 14\n    num_trees = circumference // interval\n    return num_trees\n\nans = solution()"
    ],
    "c5d3aa356bb54af391702fd40639b5a9": [
        "def solution():\n    milk_per_shortcake = 10 / 12\n    shortcakes_made = 25 / milk_per_shortcake\n    return int(shortcakes_made)\n\nans = solution()"
    ],
    "2cd006f14c7e4d62957c102b37ad3764": [
        "def solution():\n    for digit_hundred in range(1, 10):\n        for digit_ones in range(10):\n            M = digit_hundred * 100 + digit_ones\n            S = digit_hundred + digit_ones\n            if M == 67 * S:\n                reversed_M = int(str(M)[::-1])\n                ans = reversed_M // S\n                return ans\n\nans = solution()"
    ],
    "c616e250bb3a4ea28dc67bcaf6e13e3c": [
        "def solution():\n    stick_length_cm = 200  # 2 meters converted to centimeters\n    piece_length_cm = 6\n\n    num_pieces = stick_length_cm // piece_length_cm\n\n    return num_pieces\n\nans = solution()"
    ],
    "ddd57f21e2e3415fb85f06496019817a": [
        "def solution():\n    return 2.7 + 5.31 - 0.08\n\nans = solution()"
    ],
    "9f102133c2f64e46b998d847ff6646d4": [
        "def solution():\n    # Let's denote the smallest number of balls among the 5 students as 'n'.\n    # Then the balls owned by the students will be n, n+1, n+2, n+3, and n+4\n    # Since their sum is 160, we can set up the following equation:\n    # n + (n+1) + (n+2) + (n+3) + (n+4) = 160\n    # This simplifies to 5n + 10 = 160\n    # Solving for n:\n    n = (160 - 10) // 5\n\n    # The student with the most balls has n+4 balls\n    most_balls = n + 4\n\n    return most_balls\n\nans = solution()"
    ],
    "ba849ade4b5b4888ba3f01dfb7156e06": [
        "from math import comb\n\ndef solution():\n    total_balls = 10\n    balls_to_select = 7\n    \n    ans = comb(total_balls, balls_to_select)\n    \n    return ans\n\nans = solution()"
    ],
    "13881a97e1fa4780b71be7965da96d93": [
        "def solution():\n    # We will find the ones digit of the powers of 8,\n    # which repeat every 4 powers: 8, 4, 2, 6, ...\n    # 8^1 = 8 -> ones digit is 8\n    # 8^2 = 64 -> ones digit is 4\n    # 8^3 = 512 -> ones digit is 2\n    # 8^4 = 4096 -> ones digit is 6\n    # And then the cycle repeats every 4.\n    \n    # Since 8^30 is (8^4)^7 * 8^2, it has the same ones digit as 8^2\n    # The ones digit of 8^2 is 4\n    ones_digit = 4\n    return ones_digit\n\nans = solution()"
    ],
    "1f7ecb3b2fa446d9a36c3db0462423d0": [
        "def solution():\n    total_pages = 400\n    pages_per_day = 40\n\n    days_to_read = total_pages / pages_per_day\n\n    return int(days_to_read)\n\nans = solution()"
    ],
    "3e2e9cfc559f4b45bfa32bae4770f18e": [
        "def solution():\n    points_for_correct = 5\n    points_for_incorrect = -3\n    \n    total_questions = 20\n    total_points = 52\n    \n    for correct in range(total_questions + 1):\n        incorrect = total_questions - correct\n        if (correct * points_for_correct + incorrect * points_for_incorrect) == total_points:\n            return correct\n            \nans = solution()"
    ],
    "dfcd76d3d08844e4b30d258dfaddff6c": [
        "def solution():\n    first_term = 10\n    last_term = 155\n    difference = 5\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_sequence\n\nans = solution()"
    ],
    "9ea706f25a51493ca9cf1548e9f7723b": [
        "def solution():\n    left_side = 0.3 * 100\n    right_side = 150\n    \n    ans = right_side / left_side\n    return ans\n\nans = solution()"
    ],
    "67e5ac39390942c8a80324b810ad995a": [
        "def solution():\n    # Transform 13/10 into the given format:\n    # Subtract 1 to get the fraction part\n    fraction_part = 13 / 10 - 1  # 3/10\n\n    # Take the reciprocal to find a\n    a = 1 / fraction_part  # 10/3\n    a_int = int(a)  # Whole number part of a\n\n    # Find the remaining fraction part to get b\n    fraction_part = a - a_int  # (10/3 - 3/1) = 1/3\n\n    # Take the reciprocal to find b\n    b = 1 / fraction_part  # 3\n    b_int = int(b)  # Whole number part of b\n\n    # Find the remaining fraction part to get c\n    fraction_part = b - b_int  # (3 - 3) = 0\n    c_int = 0 if fraction_part == 0 else int(1 / fraction_part)\n\n    # Since the fraction part is now 0, c is irrelevant in this case. However, for the sake of completeness:\n    c_int = 0\n\n    # Calculate a + 2b + 3c\n    ans = a_int + 2 * b_int + 3 * c_int\n    return ans\n\nans = solution()"
    ],
    "739a7e30c1464e608503a893832d84ca": [
        "def solution():\n    # Initialize the number of peaches and the maximum days\n    peaches = 100\n    max_days = 0\n    \n    # Starting with 1 peach on the first day, calculate the maximum days\n    # by using the formula for the sum of the first n natural numbers\n    # until the sum exceeds the number of peaches.\n    while peaches > 0:\n        max_days += 1\n        peaches -= max_days\n    \n    # Adjust the number of days if we exceeded the number of peaches\n    if peaches < 0:\n        max_days -= 1\n    \n    return max_days\n\nans = solution()"
    ],
    "8d827b1dc9424f36a3d0f0d1b0364775": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    equation1 = Eq(girls - boys, 12)\n    equation2 = Eq(boys + girls, 100)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "22edd0e9c1bc4f6b9f43fac11a14a0ea": [
        "def solution():\n    total_sum = 0\n    for number in range(1, 21):\n        if number % 6 == 1:\n            total_sum += number\n    return total_sum\n\nans = solution()"
    ],
    "1e7aa3e2ce774fb09345a5574b3c93ae": [
        "def solution():\n    total_solution_weight = 600\n    sugar_percentage = 0.48\n\n    sugar_weight = total_solution_weight * sugar_percentage\n    water_weight = total_solution_weight - sugar_weight\n\n    return water_weight\n\nans = solution()"
    ],
    "77e366a8747b42c7b9ef3a9f1734ce77": [
        "def solution():\n    return 53.4 - 2.5\n\nans = solution()"
    ],
    "01afed4a053f422f832876b1f67b28f4": [
        "def solution():\n    number_of_additions = 9\n    to_add = 5\n    result = to_add * number_of_additions\n    return result\n\nans = solution()"
    ],
    "8ece565c32b34b0a85e297903d183180": [
        "def solution():\n    for N in range(5):\n        if (1 + 2 + N + 4) % 3 == 0:\n            return N\n\nans = solution()"
    ],
    "2cfc7d4447c340039a6f001c399114d9": [
        "def solution():\n    for a in range(1, 10):          # a cannot be 0 since it's the thousands place in abcd\n        for b in range(0, 10):\n            for c in range(0, 10):\n                for d in range(0, 10):\n                    if 1000*a + 100*b + 10*c + d + 100*a + 10*b + c + 10*a + b + a == 1370:\n                        return 1000*a + 100*b + 10*c + d\n\nans = solution()"
    ],
    "fbfcdbbeb2dd460580732e2456668e09": [
        "def solution():\n    scores = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "bc4d4257932a4e18a0a6054b2ad402a3": [
        "def solution():\n    fraction_sum = 4/5 * 5  # Since 4/5 is repeated 5 times, we multiply by 5\n    whole_numbers = 19 + 199 + 1999 + 19999 + 199999  # Sum of the whole numbers\n    ans = whole_numbers + fraction_sum  # Add the sum of whole numbers and fraction\n    return ans\n\nans = solution()"
    ],
    "06a5dba2a3c2483782a5e76f0725f304": [
        "def solution():\n    amount_in_pence = 408\n    fraction = 5 / 8\n\n    result = amount_in_pence * fraction\n\n    return result\n\nans = solution()"
    ],
    "75889ef5d68c4e27a3f50900db827671": [
        "def solution():\n    # Janice's current age\n    janice_age = 11\n    # Janice's sister's current age\n    sister_age = janice_age + 5\n    \n    # Define a variable for the number of years to add\n    years = symbols('years')\n    \n    # Equation for the sum of their ages in `years` time being 35\n    equation = Eq(janice_age + years + sister_age + years, 35)\n    \n    # Solve the equation for `years`\n    solution = solve(equation, years)\n    \n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "ee3ee1e00e154afca5040ce397cbbfac": [
        "def solution():\n    # Let the age of the youngest dwarf be x. Then, the ages of the youngest three will be x, x+1, x+2\n    # Their sum is given to be 42.\n    # x + (x+1) + (x+2) = 42\n    # Simplifying leads to: 3x + 3 = 42 => 3x = 39 => x = 13\n\n    youngest_age = 42 // 3\n    # The youngest three's ages: 13, 14, 15\n    # The middle one's age is 15+1 = 16, according to the theorem of the middle term\n    \n    # The oldest three's ages will be two years more than the youngest three, since there are 3 dwarfs in between.\n    # 16+1, 16+2, 16+3\n    # Their sum is 17 + 18 + 19\n\n    oldest_sum = (youngest_age + 4) + (youngest_age + 5) + (youngest_age + 6)\n    return oldest_sum\n\nans = solution()"
    ],
    "0be90630e25149ab81224adc5eed02eb": [
        "def solution():\n    total_marks_for_3_tests = 75 * 3\n    marks_in_first_two_tests = 172\n    marks_in_last_test = total_marks_for_3_tests - marks_in_first_two_tests\n    return marks_in_last_test\n\nans = solution()"
    ],
    "374399623a6247989f8e869566efbabe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dad_current, son_current = symbols('dad_current son_current')\n    \n    # Six years ago, dad's age was five times that of his son\n    eq1 = Eq((dad_current - 6), 5 * (son_current - 6))\n    \n    # The sum of the current ages of the dad and his son is 78\n    eq2 = Eq(dad_current + son_current, 78)\n\n    # Solving the equations to find dad's current age\n    solutions = solve((eq1, eq2), (dad_current, son_current))\n    \n    # Return dad's age\n    return solutions[dad_current]\n\nans = solution()"
    ],
    "009d4994f44241d6adfaf6cd25586a33": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 9):\n        total_sum += sum([j / i for j in range(1, i+1)])\n        if i != 1:\n            total_sum += sum([(i - j) / i for j in range(1, i)])\n    return total_sum\n\nans = solution()"
    ],
    "6e7c5cd2038a4a78b493c785f03022af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    gerald, terry = symbols('gerald terry')\n    equation1 = Eq(gerald - terry, 57)\n    equation2 = Eq(gerald + terry, 777)\n\n    solutions = solve((equation1, equation2), (gerald, terry))\n\n    return solutions[gerald]\n\nans = solution()"
    ],
    "96a62c49fc964fc58960e404634765ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the price of one football (f) and one volleyball (v)\n    f, v = symbols('f v')\n\n    # Set up the equations based on the problem description\n    equation1 = Eq(f + 2*v, 60)   # Buying 1 football and 2 volleyballs costs $60\n    equation2 = Eq(2*f - 16, 60)  # Buying 2 footballs and getting $16 back also costs $60\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (f, v))\n\n    # Get the price of one volleyball\n    return solutions[v]\n\nans = solution()"
    ],
    "aa07dd133e5a418397ba560c1b9b4019": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the ages of the students be a, b, c, d, e where a <= b <= c <= d <= e\n    # Since we know the mode is 7, at least two students are 7 years old\n    a, b, c, d, e = symbols('a b c d e', integer=True)\n    \n    # Equations based on problem statement\n    average_eq = Eq((a + b + c + d + e) / 5, 9)\n    median_eq = Eq(c, 8)\n    range_eq = Eq(e - a, 6)\n    \n    # Since mode is 7, and it is the most frequent value, and at least two are 7 years old\n    # either a and b are 7, or b and c are 7 (but not c and d, as that would make median 7)\n    solutions = solve((average_eq, median_eq, range_eq, a-7, b-7), (a, b, c, d, e))\n    \n    # The second oldest is 'd'\n    second_oldest = solutions[d]\n    \n    return second_oldest\n\nans = solution()"
    ],
    "97a3f06ac00743faa22d113268079816": [
        "def solution():\n    # Number of fruit drops\n    fruit_drops = 6\n    # Fraction of milk chocolates compared to fruit drops (2/7)\n    # So total milk chocolates is fruit_drops * (7/2)\n    milk_chocolates = fruit_drops * (7/2)\n\n    # Fraction of total sweets compared to milk chocolates (3/4)\n    # So total sweets is milk_chocolates * (4/3)\n    total_sweets = milk_chocolates * (4/3)\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "c5979856964d41d596b0d0d097b051db": [
        "def solution():\n    number = 1000 - 630\n    return number\n\nans = solution()"
    ],
    "925f4e025c564ed28a953715c34c7dc2": [
        "def solution():\n    ans = 57 + 8\n    return ans\n\nans = solution()"
    ],
    "0f51237988594921863438cf9edfab1c": [
        "def solution():\n    n = 20\n    sum_to_n = (n * (n + 1) // 2) ** 2\n    return sum_to_n\n\nans = solution()"
    ],
    "ae6e80cdd9bc412b91d8c35ca30a7537": [
        "def solution():\n    from math import factorial\n\n    num_books = 3  # number of books\n    arrangements = factorial(num_books)\n\n    return arrangements\n\nans = solution()"
    ],
    "3158da53b8bf4a7584a950b66fcdd9c7": [
        "def solution():\n    # All digits are different\n    # First Guess: 1703 - Two digits and positions are correct\n    # Second Guess: 2745 - Two digits are correct but all in wrong positions (none of the digits can be 1, 7, 0, or 3)\n    # Third Guess: 3541 - All digits are correct but all in wrong positions\n\n    # From the first and third guess we know that 1, 3, 4, 5 are the digits\n    # From the second guess, the third digit can't be 3 (because 3 is in the same position in the first guess)\n    # and the last digit can't be 1 (because the last digit is 1 in the first guess)\n    # Therefore, the second digit must be 3 and the third digit must be 1\n    \n    # From the third guess, since the 1 is in the second place, it cannot be in the third place\n    # Therefore, the 1 in the third guess must correspond to the fourth digit of the solution.\n\n    # Therefore, the first digit can't be 3 or 1 (since they are the second and fourth digits of the solution)\n    # It also can't be 4 (since the fourth digit of the guess corresponds to the second digit of the answer)\n    # And it can't be 5 (since the first digit of the guess corresponds to the third digit of the answer)\n    # The only remaining position for the 5 is the first digit of the answer.\n    \n    # Following the logic, 4 must be the third digit and 5 must be first, with 1 as the last digit.\n    # Therefore, the solution is 5314.\n\n    return 5314\n\nans = solution()"
    ],
    "ca3f6a5eb48f4f8e8b5fa5ab8277b925": [
        "def solution():\n    count = 0\n    # A can stand in one of the 3 middle positions\n    # A has 3 choices, the remaining 4 people can be arranged in 4! ways\n    count = 3 * factorial(4)\n    return count\n\nfrom math import factorial\n\nans = solution()"
    ],
    "047b5f556fb5469db5a0dd878deb688b": [
        "def solution():\n    first_term = 1\n    last_term = 49\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "ecec780bcb244e6abbe08afdb7f88ba2": [
        "def solution():\n    import math\n    num_players = 16\n    num_rounds = math.ceil(math.log(num_players, 2))\n\n    return num_rounds\n\nans = solution()"
    ],
    "df15059d1f2245d7a0ebad02edda73c2": [
        "def solution():\n    # Given quantities\n    pink_flowers = 3\n\n    # From the problem statement, let's denote yellow_flowers as 'y'\n    # We know that pink_flowers = yellow_flowers - 7\n    # So, we can find the number of yellow flowers as:\n    yellow_flowers = pink_flowers + 7\n\n    # We also know that red_flowers = 3 * yellow_flowers\n    red_flowers = 3 * yellow_flowers\n\n    # Find the total number of red and yellow flowers\n    total_red_yellow_flowers = red_flowers + yellow_flowers\n\n    return total_red_yellow_flowers\n\nans = solution()"
    ],
    "f74936f4fb2743fa9280b53676ad92ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(6*x + 3*x + 2, 38 + 5*x - 8*x)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "8485b1846a4246249bff0e15b2a80830": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    boys, girls = symbols('boys girls')\n\n    # Initial ratio condition, boys = 1.5 * girls\n    equation1 = Eq(boys, 1.5 * girls)\n    \n    # After adding the children, 12 boys and 12 girls\n    # The ratio of the number of boys to the number of girls became 19 : 14.\n    equation2 = Eq((boys + 12) / (girls + 12), 19 / 14)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    # Total number of children in the afternoon, we add 24 (12 boys and 12 girls)\n    total_children_afternoon = solutions[boys] + solutions[girls] + 24\n\n    return total_children_afternoon\n\nans = solution()"
    ],
    "18ce5581f91b49fc8dc1bb6048706547": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    scheduled_time = datetime.strptime('17:30', '%H:%M')\n    delay = timedelta(minutes=30)\n    actual_arrival_time = scheduled_time + delay\n    return actual_arrival_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "257cbb8e43a84bf4bc33363d090d12f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    # Original ratio equation: apples / oranges = 3 / 8\n    equation1 = Eq(apples * 8, oranges * 3)\n\n    # New ratio after removing one apple: (apples - 1) / oranges = 1 / 3\n    equation2 = Eq((apples - 1) * 3, oranges)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "3f961fb2104d4e9e893a8f97f5406880": [
        "def solution():\n    count = 0\n    # Loop through possible hundreds digits (1-9)\n    for hundreds in range(1, 10):\n        # Loop through possible ones digits (0-9)\n        for ones in range(10):\n            # The tens digit must be lower than both hundreds and ones\n            # Loop through possible tens digits (0-9)\n            for tens in range(10):\n                if tens < hundreds and tens < ones:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "c66ee3588fd642e996d89671f5c4c45a": [
        "def solution():\n    def subfactorial(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n-1) * (subfactorial(n-1) + subfactorial(n-2))\n\n    ans = subfactorial(6)\n    return ans\n\nans = solution()"
    ],
    "30b9c89f50a64d548b5206fecab5e49e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n\n    equation1 = Eq(table, 2 * chair)\n    equation2 = Eq(2 * table + 3 * chair, 280)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "53091b38428546359c01b3a68ba14617": [
        "def solution():\n    notebooks_cost = 3\n    pencils_cost = 9\n    total_cost = 48\n    max_pencils = total_cost // pencils_cost\n\n    for pencils in range(max_pencils + 1):\n        notebooks = 10 - pencils\n        if notebooks_cost * notebooks + pencils_cost * pencils == total_cost:\n            return pencils\n\nans = solution()"
    ],
    "f2f7e251a30f4cec8d22cfa15118db43": [
        "def solution():\n    total_students = 500\n    first_floor_rows = 9\n    seats_per_row = 36\n\n    first_floor_capacity = first_floor_rows * seats_per_row\n    second_floor_students = total_students - first_floor_capacity\n\n    return second_floor_students\n\nans = solution()"
    ],
    "fad26d9436534871b7a08dd833fbbf68": [
        "def solution():\n    first_term = 7\n    ratio = 2\n    # Assume the position of the next number in sequence is 4 because the sequence starts with index 1\n    next_term_position = 4\n    \n    next_term = first_term * (ratio ** next_term_position)\n    \n    return next_term\n\nans = solution()"
    ],
    "ed79c0ee5e45459ca9d0eef32c921bcc": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 32, 2):\n        total_sum += i\n        total_sum -= (i-1)\n    return total_sum\n\nans = solution()"
    ],
    "952275a830de41e986a33a873accdb47": [
        "def solution():\n    ans = 385 // 7\n    return ans\n\nans = solution()"
    ],
    "28db2d3d5a60452a9e31b2965f649f7d": [
        "def solution():\n    n = 50\n    count_5 = 0\n    count_2 = 0\n    for i in range(1, n+1):\n        while i % 5 == 0:\n            i = i / 5\n            count_5 += 1\n        while i % 2 == 0:\n            i = i / 2\n            count_2 += 1\n    ans = min(count_5, count_2)\n    return ans\n\nans = solution()"
    ],
    "01993ccb07d9483683f5755975ca0a3a": [
        "def solution():\n    count = 0\n    for i in range(3, 48):\n        count += str(i).count('7')\n    ans = count\n    return ans\n\nans = solution()"
    ],
    "814dfc7a21bc47f6afecf3149a685506": [
        "def solution():\n    # The sum of the six consecutive even numbers is 510\n    total_sum = 510\n    # The mean of the 6 numbers is total_sum divided by 6\n    mean = total_sum / 6\n    # To find the median, we need to determine the 3rd and 4th numbers. Since they are consecutive even numbers,\n    # they will be 2 apart, so their average is the median.\n    # We will let the 1st number be x. Then the 2nd is x+2, the 3rd is x+4, the 4th is x+6,\n    # the 5th is x+8 and the 6th is x+10. Their sum is 6x + 30 = 510.\n    \n    # We solve for x\n    x = (total_sum - 30) / 6\n    \n    # The 3rd number is x + 4, and the 4th number is x + 6.\n    median = (x + 4 + x + 6) / 2\n    # The difference between the mean and the median is\n    difference = mean - median\n\n    return abs(difference)\n\nans = solution()"
    ],
    "2a2937f5b7644f15afc477aa03c1c930": [
        "def solution():\n    total_weight = 250\n    sugar_concentration = 0.65\n\n    sugar_weight = total_weight * sugar_concentration\n\n    return sugar_weight\n\nans = solution()"
    ],
    "c71ea8f69b6c45d38f496733e04f53c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of cards given by Oliver to Helen\n    x = symbols('x')\n\n    # Helen originally had 18 cards, and now has 18 + x cards.\n    # Oliver originally had 22 cards, and now has 22 - x cards.\n    # The difference between Helen's and Oliver's cards now is 10.\n    equation = Eq((18 + x) - (22 - x), 10)\n\n    # Solve the equation for x\n    x_value = solve(equation, x)\n\n    # Helen's current number of cards is her original number plus x\n    helen_cards = 18 + x_value[0]\n\n    return helen_cards\n\nans = solution()"
    ],
    "78dd9ae80fbc4599b9a1de7b271c3242": [
        "def solution():\n    A = 40\n    B = A / 2\n    C = B / 2\n\n    total_value = A + B + C\n\n    return total_value\n\nans = solution()"
    ],
    "f18ab428f55e4e0181b741b70951b391": [
        "def solution():\n    initial_height = 12\n    climb_up_1 = 23\n    climb_down = 31\n    climb_up_2 = 17\n    \n    final_height = initial_height + climb_up_1 - climb_down + climb_up_2\n    \n    return final_height\n\nans = solution()"
    ],
    "e686a0dd4b2744f6bfffc71fb37c57ec": [
        "def solution():\n    ans = 94 * 38\n    return ans\n\nans = solution()"
    ],
    "09b505251b1a41e4bcb506573632dfd0": [
        "import math\n\ndef solution():\n    N = 5 ** 100\n    num_digits = int(math.log10(N)) + 1\n    return num_digits\n\nans = solution()"
    ],
    "25b3374bcbaf4146b57baab9709569a8": [
        "def solution():\n    ans = 25 * 71\n    return ans\n\nans = solution()"
    ],
    "cd13264eaaab461380200e36148f3029": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the mass of mangoes at first as 'm' and of strawberries as 's'\n    m, s = symbols('m s')\n\n    # We are given that there were 448g more mangoes than strawberries.\n    equation1 = Eq(m, s + 448)\n\n    # After giving away 900g of mangoes, the mass of strawberries was twice the mass of mangoes.\n    equation2 = Eq(s, 2 * (m - 900))\n\n    # Solving the system of equations for 's' which is the mass of strawberries at first.\n    solutions = solve((equation1, equation2), (m, s))\n\n    return solutions[s]\n\nans = solution()"
    ],
    "59db59b0e0a842ca9b1e81136fe98f84": [
        "def solution():\n    # Let the 5 consecutive numbers be x, x+1, x+2, x+3, x+4\n    # The sum of these numbers is 5x + 10 (sum of the series: x + (x+1) + (x+2) + (x+3) + (x+4))\n    # According to the problem, the sum is 40\n    # So we have the equation 5x + 10 = 40\n    # Solving for x gives us the value of the smallest number\n    x = (40 - 10) / 5\n    return x\n\nans = solution()"
    ],
    "057fbde681f548c7a8497fef0220ea57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * x - 8, 4)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "6345c9979983478692f42a218f423f1a": [
        "def solution():\n    total_numbers = 99\n    prime_numbers = 25\n    # 1 is neither prime nor composite, so we subtract it from the total\n    composite_numbers = total_numbers - prime_numbers - 1\n    return composite_numbers\n\nans = solution()"
    ],
    "96b01291e9d14c7c96848c68852976a8": [
        "def solution():\n    ans = 2 * 13 * 3.5\n    return ans\n\nans = solution()"
    ],
    "6b83b3fc0cf6400a82301aaa18e28565": [
        "def solution():\n    total_sweets = 33\n    given_away = 8\n    left_sweets = total_sweets - given_away\n    return left_sweets\n\nans = solution()"
    ],
    "a295b79b82d040ba90888d02ac50c7b7": [
        "def solution():\n    count = 0\n    for year in range(1900, 2001):\n        if sum(int(digit) for digit in str(year)) == 21:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "3814b49678af4c93bb25cc8fb167d647": [
        "def solution():\n    fourth_term = 39\n    twelfth_term = 57\n    common_difference = (twelfth_term - fourth_term) / (12 - 4)\n    \n    first_term = fourth_term - (3 * common_difference)\n    return first_term\n\nans = solution()"
    ],
    "2069f2cb20514f5e86df254f2165bc03": [
        "from itertools import permutations\n\ndef solution():\n    digits = [0, 1, 3, 4, 6, 8, 9]\n    five_digit_numbers = [int(\"\".join(map(str, num))) for num in permutations(digits, 5) if num[0] != 0]\n\n    # Filter only numbers which are multiples of 9\n    multiples_of_9 = [num for num in five_digit_numbers if num % 9 == 0]\n    \n    # Sort the list to find the max and min\n    multiples_of_9.sort()\n\n    # Find the largest possible value of (M - N) / 9\n    M = multiples_of_9[-1]\n    N = multiples_of_9[0]\n\n    max_diff_div_9 = (M - N) // 9\n\n    return max_diff_div_9\n\nans = solution()"
    ],
    "0cdc1772d765463a83d6d817314f35cb": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['1', '3', '5', '2']\n    largest_number = max(int(''.join(p)) for p in permutations(digits))\n    return largest_number\n\nans = solution()"
    ],
    "e5d4d19b2a0b404d86003d303b4bd386": [
        "def solution():\n    number = \"four million four hundred and four\"\n    num_dict = {\n        'four million': 4000000,\n        'four hundred': 400,\n        'and': 0,\n        'four': 4\n    }\n    \n    parts = number.split()\n    ans = 0\n    \n    current = \"\"\n    for part in parts:\n        current += part + \" \"\n        current = current.strip()\n        if current in num_dict:\n            ans += num_dict[current]\n            current = \"\"\n\n    return ans\n\nans = solution()"
    ],
    "2f4cada72bf546d2845330b0771d17c9": [
        "def solution():\n    # Calcualting the total amount of pure salt\n    salt_30g = 30 * 0.30\n    salt_20g = 20 * 0.20\n    total_salt = salt_30g + salt_20g\n    \n    # Calculating the total weight of the solution\n    total_weight = 30 + 20  # initial weight of both solutions\n    \n    # Let x be the grams of water to be added\n    # The equation for 10% concentration: (total_salt) / (total_weight + x) = 0.10\n    # Solving for x\n    x = total_salt / 0.10 - total_weight\n    \n    return x\n\nans = solution()"
    ],
    "58710cbbe23c42eca9ad3e2a797617c4": [
        "def solution():\n    incorrect_sum = 987\n    incorrect_addend = 540\n    correct_addend = 450\n    difference_in_addends = incorrect_addend - correct_addend\n    correct_sum = incorrect_sum - difference_in_addends\n    return correct_sum\n\nans = solution()"
    ],
    "a72010a49704494c91001e683893ccc5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    number = symbols('number')\n\n    equation = Eq(number * number + number, 380)\n\n    solutions = solve(equation, number)\n\n    # Find the integer solution\n    for sol in solutions:\n        if sol.is_integer:\n            return sol\n\nans = solution()"
    ],
    "ed6d6de30c0a478ab65c8423f336ce88": [
        "def solution():\n    johnson_speed = 600  # m/min\n    vicky_speed = 250    # m/min\n    race_distance = 3000 # m\n\n    johnson_time = race_distance / johnson_speed  # time taken by Johnson\n    vicky_time = race_distance / vicky_speed      # time taken by Vicky\n\n    time_difference = vicky_time - johnson_time   # difference in time\n\n    return time_difference\n\nans = solution()"
    ],
    "0533c1ce2f634bc79e510f81aa3623bc": [
        "def solution():\n    # Worst case scenario: we draw 2 cards from each number without getting 3 of a kind.\n    # Since there are 13 different numbers, we can draw 2 cards from each, resulting in 26 cards.\n    # The next card we draw must guarantee we have 3 of the same number due to the Pigeonhole Principle.\n    cards_drawn = 2 * 13 + 1\n    return cards_drawn\n\nans = solution()"
    ],
    "f13a082b45f944e2a679050f7cab968c": [
        "def solution():\n    from sympy import primerange\n\n    primes = list(primerange(1, 21))\n    total_cards = 20\n    prime_cards = len(primes)\n\n    proportion = prime_cards / total_cards\n\n    return proportion\n\nans = solution()"
    ],
    "1e7ec51916d44aea846598bf1fabbce4": [
        "def solution():\n    return (3.2 + 5.6) / 2\n\nans = solution()"
    ],
    "5a5711bd536c40dd88759a0c885cbbdf": [
        "def solution():\n    # To make sure we get 29 balls of one color, 28 balls of another color,\n    # and 10 balls of the last color, we should consider the worst-case scenario.\n\n    # If we are trying to avoid getting 29 balls of the same color for as long as possible,\n    # we should pick 28 blue balls, then 28 red balls (since red balls are next in quantity),\n    # and then 28 white balls.\n\n    # At this stage, we have 28 blue, 28 red, and 28 white balls.\n    # The next ball we pick, regardless of the color, will ensure that we have at least 29 balls of one color.\n\n    # However, to make sure we also have 28 balls of another color and 10 of the last color,\n    # we need to continue picking balls assuming the worst sequence.\n\n    # We picked one more ball, and we now have 29 of one color.\n    # Next, to avoid getting 28 of another color, we should pick the remaining 12 white balls.\n    # After picking all the white balls, the next ball we pick will ensure at least 28 balls of another color.\n\n    # Now we have at least 29 of one color (could be blue or red) and at least 28 of another color (whichever wasn't the first).\n    # To get 10 of the third color (which would be white if the first two were blue and red), we need to pick 9 more balls\n    # (since we already have 28 white balls).\n\n    # Summing all these up: 28 (blue) + 28 (red) + 28 (white) + 1 + 12 (remaining white) + 9 (to get 10 of the third color)\n    num_balls = 28 + 28 + 28 + 1 + 12 + 9\n\n    return num_balls\n\nans = solution()"
    ],
    "cd7eb0808ff5495d92aa81f731c5f0a9": [
        "def solution():\n    n = 7 - 12\n    return n\n\nans = solution()"
    ],
    "216ce3bfa9344644a2c44241a09784d3": [
        "def solution():\n    numbers = [12, 4, 6, 4, 2, 9, 7]\n    mean_value = 8\n    total_numbers = 8\n    total_sum = mean_value * total_numbers\n    missing_number = total_sum - sum(numbers)\n    return missing_number\n\nans = solution()"
    ],
    "3a777a84d1174b55af384cb43e211812": [
        "def solution():\n    sum_first_50 = 1275\n    sum_2_to_51 = sum_first_50 - 1 + 51\n    return sum_2_to_51\n\nans = solution()"
    ],
    "31df8f23c61440d0a0f22ef9a6d1d9f1": [
        "def solution():\n    notebooks = [5, 6, 8]\n    calendars = [7, 9]\n    prices = set()\n\n    for notebook in notebooks:\n        for calendar in calendars:\n            total_price = notebook + calendar\n            prices.add(total_price)\n\n    return len(prices)\n\nans = solution()"
    ],
    "050789f6f9e949ee9482ca9c43230bc9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')  # x is the volume of lime solution transferred\n\n    # After transferring, the volume of solutions in bottles A and B remains the same.\n    # Bottle A: (5 litres * 10% concentration - x * 10% concentration + x * 20% concentration)\n    # Bottle B: (3 litres * 20% concentration - x * 20% concentration + x * 10% concentration)\n\n    # Set up the equations representing the concentrations after transferring\n    # The concentration in both bottles will be the same, so set them equal to each other.\n    \n    equation = Eq((5*0.10 - x*0.10 + x*0.20), (3*0.20 - x*0.20 + x*0.10))\n\n    # Solve the equation for x.\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b0463272ddb246178e49ce0075bfc9a7": [
        "def solution():\n    ans = 546 - 287\n    return ans\n\nans = solution()"
    ],
    "4de8d3bd10bb44b382de57b1cba1fb5f": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    \n    # Iterate through all possible permutations of 8 students 'ABCDEFGH'\n    for perm in permutations('ABCDEFGH'):\n        perm = ''.join(perm)\n        # Check if C is between A and B, not necessarily next to each other\n        if perm.index('C') > perm.index('A') and perm.index('C') < perm.index('B') or \\\n           perm.index('C') < perm.index('A') and perm.index('C') > perm.index('B'):\n            # Check if D and E, F and G are next to each other\n            if 'DE' in perm or 'ED' in perm:\n                if 'FG' in perm or 'GF' in perm:\n                    count += 1\n                    \n    return count\n\nans = solution()"
    ],
    "661ce7b23d5040428b44b729610f90df": [
        "def solution():\n    students = 31\n    tables_per_row = 5\n    rows_needed = (students + tables_per_row - 1) // tables_per_row\n    return rows_needed\n\nans = solution()"
    ],
    "0031ea04d15446af809c52112342ff37": [
        "def solution():\n    s = \"123\"\n    total_sum = 0\n\n    # Build each term incrementally and add to the sum\n    for i in range(1, 124):  # since the last term is 123 repeated 123 times\n        term = int(s * i)\n        total_sum += term\n\n    # Convert to string to find the hundreds digit\n    total_str = str(total_sum)\n    hundreds_digit = int(total_str[-3]) if len(total_str) >= 3 else 0\n\n    return hundreds_digit\n\nans = solution()"
    ],
    "f39a2ffc63b2451faaf10086c439a64c": [
        "def solution():\n    # Original length and ratio\n    original_length = 90\n    ratio_length_to_breadth = 5 / 2\n\n    # New length is 70.5 cm smaller\n    new_length = original_length - 70.5\n\n    # Calculate the breadth of the lego using the ratio (Proportion is same)\n    new_breadth = (new_length * 2) / 5\n\n    # Since lego size has to be an integer (can't have a fraction of a lego brick), take the floor of the breadth.\n    max_breadth = int(new_breadth)\n\n    return max_breadth\n\nans = solution()"
    ],
    "c85383c567de4d2c87d36c00bdee31a8": [
        "def solution():\n    total = 50 + 20 + 10 + 5\n    coins = [50, 20, 10, 5]\n    \n    for coin in coins:\n        if (total - coin) == 2 * (total - (total - coin)):\n            lost_coin = coin\n    \n    return lost_coin\n\nans = solution()"
    ],
    "e1f6ce757e814cc98dd8bb318f3ce87e": [
        "def solution():\n    total_people = 25\n    like_bananas = 18\n    like_apples = 12\n\n    # Using inclusion-exclusion principle for two sets\n    both = like_bananas + like_apples - total_people\n\n    return both\n\nans = solution()"
    ],
    "6ffd313df5c84cbea917dab85c602eb9": [
        "def solution():\n    jaan_time = 200 / 8  # time taken by Jaan to finish the race\n    kane_distance = 200 - 12.5  # distance covered by Kane when Jaan finished\n    kane_speed = kane_distance / jaan_time  # speed of Kane\n    \n    return kane_speed\n\nans = solution()"
    ],
    "b2195314d6904c97819e32043f734644": [
        "def solution():\n    cake_price = 5.50\n    milk_price = 3.75\n    voucher = 110 / 100  # converting pence to pounds\n\n    total_price = cake_price + milk_price\n    price_to_pay = total_price - voucher\n\n    return price_to_pay\n\nans = solution()"
    ],
    "d4d4df7fd96047a69ce80699a26c4864": [
        "def solution():\n    ans = 111 - 87\n    return ans\n\nans = solution()"
    ],
    "2c4866d958f643a58cb054fe6c157f1e": [
        "def solution():\n    return 35 / 100 * 60\n\nans = solution()"
    ],
    "7516bd8e3a554c9e8a9888a667a1aa56": [
        "def solution():\n    normal_rate = 12\n    overtime_multiplier = 1 + 1/4\n    overtime_rate = normal_rate * overtime_multiplier\n    normal_hours = 8\n    total_hours = 10\n    overtime_hours = total_hours - normal_hours\n\n    total_pay = (normal_hours * normal_rate) + (overtime_hours * overtime_rate)\n\n    return total_pay\n\nans = solution()"
    ],
    "1cb912909e124af1a7949a343cef8e13": [
        "def solution():\n    for num in range(10, 100):\n        if num % 5 == 3 and num % 7 == 3:\n            return num\n\nans = solution()"
    ],
    "aa03416c5455441d81c098442d3c2d35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote e and y as the current ages of the elder and younger brothers respectively\n    e, y = symbols('e y')\n    # The sum of their current ages is 42\n    equation1 = Eq(e + y, 42)\n    # A few years ago, elder brother's age was y and younger brother was half the elder's current age\n    # Let's say 'a' years ago where 'a' is the age difference between the two brothers\n    equation2 = Eq(y - (e - y), e / 2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (e, y))\n\n    # Return the age of the elder brother\n    return solutions[e]\n\nans = solution()"
    ],
    "dc92fc8ba3454847b1dd2c2308d30548": [
        "def solution():\n    # Calculate the pattern's length\n    pattern = \"928\"\n    pattern_length = len(pattern)\n\n    # A 99-digit number implies the pattern repeats 33 times (99 / 3)\n    repetitions = 99 // pattern_length\n\n    # Our number is composed of '928' repeated 33 times, so we look at the sum of digits in one '928'\n    sum_of_digits = sum(int(digit) for digit in pattern)\n\n    # Multiply the sum of digits by the number of repetitions\n    total_sum = sum_of_digits * repetitions\n\n    # Find the remainder when the total sum is divided by 9\n    remainder = total_sum % 9\n    \n    return remainder\n\nans = solution()"
    ],
    "9416b780ce1141bb848907b83016fcce": [
        "def solution():\n    # To guarantee 3 balls of the same color, we consider the worst case scenario:\n    # We take out all balls of other colors without getting 3 of the same.\n    # So we take 2 white, 2 blue, 2 green, and 2 orange.\n    # Any next ball we take will be the third of some color.\n\n    balls_needed = (2 * 4) + 1  # 2 each of white, blue, green, orange, and 1 more to guarantee the third of a color\n\n    return balls_needed\n\nans = solution()"
    ],
    "d896015adbd04599a2cc26daea95baf7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(1/(1 + 1/(2 + 1/(3 + 1/x))), 30/43)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c9d8078e6b1f44b7ae76553201933a68": [
        "def solution():\n    num = 1\n    while not (num % 5 == 1 and num % 6 == 1 and num % 7 == 1):\n        num += 1\n    return num\n\nans = solution()"
    ],
    "4f4fb0feeaea4c15b84a9162a5ffbd55": [
        "def solution():\n    for tens in range(1, 10):\n        for units in range(0, 10):\n            original_number = 10 * tens + units\n            swapped_number = 10 * units + tens\n            if swapped_number == (original_number // 3) + 3:\n                return original_number\n\nans = solution()"
    ],
    "440aa36a121f47c7b484c8c1f4367f6f": [
        "def solution():\n    apples_per_box = 14 / 4\n    boxes_needed = 66.5 / apples_per_box\n    return int(boxes_needed)\n\nans = solution()"
    ],
    "57e9c2f24664499ba1b930195f008ac3": [
        "def solution():\n    # Use the formula for the number of matches in a double round-robin tournament: n(n-1) = 2 * total_matches\n    # where n is the number of teams, and total_matches is given as 30 matches\n    \n    # We are solving for n(n-1) = 60.\n    \n    n = 1\n    while n*(n - 1) != 60:\n        n += 1\n\n    return n\n\nans = solution()"
    ],
    "b79a007b43284d9e9fd0dbf5e85e2911": [
        "def solution():\n    countries = 11\n    participants_per_country_to_ensure = 5\n    # Using the Pigeonhole Principle, add one more participant to ensure at least one country has 5 people\n    min_participants = (countries - 1) * (participants_per_country_to_ensure - 1) + 1\n    return min_participants\n\nans = solution()"
    ],
    "56dd9ea0cff247b9b36fe15ff5d91c1b": [
        "def solution():\n    # Let the length of the rope be x meters\n    # Let the circumference of the tree be y meters\n\n    # From the problem statement:\n    # 10y - x = 3  -> Equation (1)\n    # 12y - x = -3 -> Equation (2)\n\n    # We will solve these two equations to find y\n\n    # Subtracting Equation (2) from Equation (1) gives us:\n    # (10y - x) - (12y - x) = 3 - (-3)\n    # -2y = 6\n    # y = -6 / -2\n    y = 6 / 2\n\n    # Now, we substitute the value of y into Equation (1) to find x:\n    # 10y - x = 3\n    # x = 10y - 3\n    x = 10 * y - 3\n\n    # We want to find out how many meters of rope is left after 8 turns\n    # 8 turns means the rope wraps around the tree 8 times\n    # 8y - x = ?\n    # Substitute the values we found for y and x into this new equation\n    leftover = 8 * y - x\n\n    return leftover\n\nans = solution()"
    ],
    "3419bae73fb749eeb7ef999b0bb66f8f": [
        "def solution():\n    # Let x be the number of years later. We have:\n    # (George's current age + x) + (Sister's current age + x) = 40\n    # Given that George's current age + Sister's current age = 34,\n    # we can substitute this into the above equation to get:\n    # 34 + 2x = 40\n    # Solving for x gives:\n    x = (40 - 34) / 2\n    return int(x)\n\nans = solution()"
    ],
    "5bf4daf22b5a40a9887f31566b2d48fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y, z = symbols('x y z')\n    equation1 = Eq(x + y, 9)\n    equation2 = Eq(y + z, 15)\n    equation3 = Eq(z + x, 12)\n\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n    total = solutions[x] + solutions[y] + solutions[z]\n\n    return total\n\nans = solution()"
    ],
    "eb26143450c84a16921ed5a98f9de962": [
        "def solution():\n    students = 31\n    tables_per_row = 5\n\n    rows_needed = -(-students // tables_per_row)\n\n    return rows_needed\n\nans = solution()"
    ],
    "20914560eb4c46a087218709875442de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbols for the rates of John (j), Raj (r), and Pete (p)\n    j, r, p = symbols('j r p')\n\n    # Creating equations based on the given data:\n    # Together they finish the job in 60 minutes, so their combined rate is 1 job per 60 minutes\n    eq_together = Eq(j + r + p, 1/60)\n\n    # John and Raj take 72 minutes to finish the job, so their combined rate is 1 job per 72 minutes\n    eq_john_raj = Eq(j + r, 1/72)\n\n    # Raj and Pete take 90 minutes to finish the job, so their combined rate is 1 job per 90 minutes\n    eq_raj_pete = Eq(r + p, 1/90)\n\n    # Solve the system of equations\n    solutions = solve((eq_together, eq_john_raj, eq_raj_pete), (j, r, p))\n\n    # Raj's rate\n    raj_rate = solutions[r]\n\n    # Calculate how long Raj takes by himself\n    time_raj = 1 / raj_rate  # time = 1 / rate\n\n    # Return the time in minutes\n    return time_raj.evalf() * 60  # Convert hours to minutes\n\nans = solution()"
    ],
    "0a280d66b3c54260bc3e5e5b92675682": [
        "def solution():\n    # List of numbers to add\n    numbers = [73, 28, 37, 82]\n    # Summing up all the numbers\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "c155a8080b684c068448baa4beb540fd": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 4):\n        A, B, C, D = p\n        AB = A * 10 + B\n        CD = C * 10 + D\n        ABC = A * 100 + B * 10 + C\n        if AB + CD == 99 and ABC + 99 == A + B * 100 + C * 10 + D:\n            return A + B + C + D\n    return None\n\nans = solution()"
    ],
    "a239a2f7efec479d8b6dec2e19b56410": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kitty, nora = symbols('kitty nora')\n\n    equation1 = Eq(kitty + nora, 11)\n    equation2 = Eq(kitty, nora + 3)\n\n    solutions = solve((equation1, equation2), (kitty, nora))\n\n    return solutions[kitty]\n\nans = solution()"
    ],
    "93017999421c4dfb8d3245edf5e78291": [
        "def solution():\n    total_numbers = 1000\n    numbers_greater_than_1499 = 1999 - 1499\n\n    probability = numbers_greater_than_1499 / total_numbers\n\n    return probability\n\nans = solution()"
    ],
    "c35ec43fb3f648c2add882035b734b41": [
        "def solution():\n    catherine = 54\n    ben = catherine - 5\n    ash = 3 * ben\n    return ash\n\nans = solution()"
    ],
    "48e3194ccba043bc8a5dc6cec126652f": [
        "def solution():\n    return 92 * 503\n\nans = solution()"
    ],
    "61c1df4ae6dc4b04b1f7294d3a316b5c": [
        "def solution():\n    result = 28\n    original_number = (result - 6) / 2\n    return original_number\n\nans = solution()"
    ],
    "d85b8dc81daa4cff9e229ed18013f421": [
        "def solution():\n    value = 111\n    for i in range(1, 8):\n        value -= i\n    return value\n\nans = solution()"
    ],
    "740c2ea1db4846958c463409a773c7f3": [
        "def solution():\n    return 2018 * 17\n\nans = solution()"
    ],
    "a12f50c13e3547a0ae15f90b1739b8cc": [
        "def solution():\n    # If the youngest dwarf is x years old, then the ages of the youngest three are\n    # x, x+1, x+2. The total of these three ages is 3x + 3.\n\n    # Given that the sum of their ages is 42, we have:\n    # 3x + 3 = 42 which leads to x = (42 - 3) / 3\n\n    x = (42 - 3) // 3\n\n    # The ages of the oldest three will then be x+4, x+5, x+6\n    # The sum of the ages of the oldest three is 3x + 15\n\n    sum_oldest_three = 3 * x + 15\n\n    return sum_oldest_three\n\nans = solution()"
    ],
    "467bd772358e49a68cedca5e2cd63eb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total amount of money Mary had initially.\n    x = symbols('x')\n\n    # Mary spent 3/7 of her money on a bag.\n    spent = 3/7 * x\n\n    # The amount not used is 4/7 (since 1 - 3/7 = 4/7).\n    not_spent = 4/7 * x\n\n    # The difference between the amount spent and not used was £12.\n    equation = Eq(spent - not_spent, 12)\n\n    # Solve the equation to find the total amount of money x.\n    solution = solve(equation, x)\n\n    # Mary spent 3/7 of the total amount of money on the bag.\n    amount_spent_on_bag = 3/7 * solution[0]\n\n    return amount_spent_on_bag\n\nans = solution()"
    ],
    "d111890eecfe4763af42bdbdd75ef647": [
        "def solution():\n    # Using the formula for the sum of squares: 1² + 2² + 3² + ... + n² = 1/6 * n * (n + 1) * (n + 2)\n    n = 100 // 5  # Here n is the number of terms, with each term being 5 times an integer\n    sum_squares = (1/6) * n * (n + 1) * (2 * n + 1) * (5**2)  # multiplying (5**2) because each term is 5 times an integer\n    return int(sum_squares)\n\nans = solution()"
    ],
    "c5c71659203f4ee49a62c35017eeabf9": [
        "def solution():\n    monthly_salary = 1.4\n    debt = 5.04\n\n    months_needed = debt / monthly_salary\n\n    return months_needed\n\nans = solution()"
    ],
    "6f0e1348bfdc4d1ea3352d71e2692834": [
        "def solution():\n    total_toys = 659\n    ab_toys = 447\n    bc_toys = 335\n\n    a_toys = ab_toys + bc_toys - total_toys\n\n    b_toys = ab_toys - a_toys\n    \n    return b_toys\n\nans = solution()"
    ],
    "308d0a3f39044f29afa6faf36c5ef1d5": [
        "def solution():\n    num = 72\n    factors = set()\n    for i in range(1, int(num**0.5) + 1):\n        if num % i == 0:\n            factors.add(i)\n            factors.add(num // i)\n    ans = sum(factors)\n    return ans\n\nans = solution()"
    ],
    "676023bee5544241be8dd837eee97422": [
        "def solution():\n    numbers = [11, 13, 15, 17]\n    average = sum(numbers) / len(numbers)\n    return average\n\nans = solution()"
    ],
    "bb1ead10049c43daa3e195435cc53a8d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define a symbol for the number of stickers Mr. Ya has\n    stickers = symbols('stickers')\n    \n    # Create equations based on the problem statement\n    equation1 = Eq((stickers - 190) % 13, 0)\n    equation2 = Eq((stickers - 50) % 17, 0)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (stickers))\n\n    # Since solutions will be a dictionary, we will extract the value of stickers\n    return solutions[stickers][0]\n\nans = solution()"
    ],
    "a65f0fe64967475ba4b828d09b4f6362": [
        "def solution():\n    ans = 1.99 + 2.99 + 3.99 + 4.99\n    return ans\n\nans = solution()"
    ],
    "02b793a0cdc04afdb8f93895a893bda8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the price of one file and one storybook\n    file, storybook = symbols('file storybook')\n\n    # Set up the equations based on the given information\n    equation1 = Eq(7 * file + 4 * storybook, 108)\n    equation2 = Eq(5 * file + 3 * storybook, 80)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (file, storybook))\n\n    # Find the total cost of 1 file and 1 storybook\n    total_cost = solutions[file] + solutions[storybook]\n\n    return total_cost\n\nans = solution()"
    ],
    "a4e98db3396e4882871511a7668317b7": [
        "def solution():\n    initial_trays = 7\n    initial_mean = 13\n    additional_tray = 1\n    additional_sausages = 21\n\n    total_sausages = initial_trays * initial_mean + additional_sausages\n    total_trays = initial_trays + additional_tray\n\n    new_mean = total_sausages / total_trays\n\n    return new_mean\n\nans = solution()"
    ],
    "c01ed3d066de41f4b0dc3b432983e51a": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for ones in range(0, 10):\n                if hundreds > tens and ones > tens:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "2acae01fc5ad425b87d9eeb0cca3489d": [
        "def solution():\n    ans = (3 + 1/2) / (1/4)\n    return ans\n\nans = solution()"
    ],
    "f5b829df546b43c1a2a3f325813d409e": [
        "def solution():\n    # Let the number of boys be b and the number of girls be g.\n    # According to the problem, we have:\n    # g = b + 30 (since there are 30 more girls than boys)\n    # Also, the sum of boys and girls is the total number of pupils:\n    # b + g = 500\n    \n    # We can substitute g from the first equation into the second to find the value of b.\n    # b + (b + 30) = 500\n    # 2 * b + 30 = 500\n    # 2 * b = 500 - 30\n    # 2 * b = 470\n    # b = 470 / 2\n    b = 470 // 2\n    \n    # Now we can find the number of girls using the first equation.\n    # g = b + 30\n    g = b + 30\n    \n    return g\n\nans = solution()"
    ],
    "c7c1666cff0e4299806585caa2a77a6d": [
        "def solution():\n    rani_money = 456\n    brenda_money = 528\n    total_money = rani_money + brenda_money\n    equal_amount = total_money / 2\n    amount_to_give = brenda_money - equal_amount\n    return amount_to_give\n\nans = solution()"
    ],
    "a5ba7c5275b6482395f95a17e5b4bb62": [
        "def solution():\n    return 8.8 + 5.6\n\nans = solution()"
    ],
    "b0700754dfa7464eb071ad2a5f2c576a": [
        "def solution():\n    return 2014 * 40\n\nans = solution()"
    ],
    "879a251dabb24df9ab8ee19fc30fa517": [
        "def solution():\n    numerator = 2022 + 4567 * 7890\n    denominator = 4568 * 7890 - 5778\n    \n    ans = numerator / denominator\n    \n    return ans\n\nans = solution()"
    ],
    "cd598ad9ace144b2bfb79abe93cbc606": [
        "def solution():\n    # Let blue balls be b and red balls be r\n    from sympy import symbols, Eq, solve\n\n    b, r = symbols('b r')\n    total_balls = Eq(b + r, 125)\n    ball_ratio = Eq((2/5) * b, (3/5) * r)\n\n    solutions = solve((total_balls,ball_ratio), (b, r))\n\n    return solutions[b] - solutions[r]\n\nans = solution()"
    ],
    "3c947304032d4050bb2c1007cb1ba227": [
        "def solution():\n    # The total distance covered when crossing the first bridge\n    # is the length of the train plus the length of the bridge\n    total_distance_first_bridge = 137 + 263\n    \n    # The speed of the train can be calculated since it covers\n    # the total distance of the first bridge in 20 seconds\n    speed = total_distance_first_bridge / 20\n    \n    # The second bridge total crossing time is given as 27 seconds,\n    # so we can calculate the total distance covered by the train\n    # when crossing it, which is speed * time\n    total_distance_second_bridge = speed * 27\n    \n    # The length of the second bridge is the total distance covered\n    # minus the length of the train\n    length_of_second_bridge = total_distance_second_bridge - 137\n    \n    return length_of_second_bridge\n\nans = solution()"
    ],
    "894f8948c65e423aafef61f63e598f12": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # symbols for the price of one watch and one handbag\n    watch, handbag = symbols('watch handbag')\n\n    # equations based on the given problem\n    equation1 = Eq(3 * watch + 5 * handbag, 915)\n    equation2 = Eq(4 * watch + 2 * handbag, 632)\n\n    # solving the two equations\n    solutions = solve((equation1, equation2), (watch, handbag))\n\n    # calculating the cost of 2 watches and 2 handbags\n    total_cost = 2 * solutions[watch] + 2 * solutions[handbag]\n\n    return total_cost\n\nans = solution()"
    ],
    "ab227cc9f73a4cb5a765a8c55e9d31b4": [
        "def solution():\n    original_price = 80 + 20\n    discount = 20\n    discount_percent = (discount / original_price) * 100\n    return discount_percent\n\nans = solution()"
    ],
    "b12b9f5178d140e682c64da6f1cf80e5": [
        "def solution():\n    # The least number the child with the most candy can get is\n    # when the distribution is as close as possible to each other\n    # while still giving each child a different amount.\n    # We start from 1 piece and assign each child one more piece than the previous one.\n    \n    # sum of first n natural numbers\n    def sum_of_n(n):\n        return n * (n + 1) // 2\n\n    # we start with 7 children, because the 8th one will have the most\n    # and we need to find the minimum number of candies for him.\n    candies_left = 88\n    for i in range(1, 8):\n        candies_left -= i  # subtract the number of candies for each of the first 7 children\n    \n    # The remaining candies for the 8th child will be the answer\n    return candies_left\n\nans = solution()"
    ],
    "ca443bd6f6ae418ea84d9a56e57912a5": [
        "from math import factorial\n\ndef solution():\n    # Each student must get at least one book. There are three students.\n    # After giving each student one book, we have 7 - 3 = 4 books left to distribute.\n    \n    # We can distribute these 4 books in C(4 + 3 - 1, 4), where C is a combination function.\n    # This is due to the formula for combinations with repetitions: C(n + k - 1, k).\n    # In this case, n is the number of books left to distribute (4) and k is the number of students (3).\n    comb = factorial(4 + 3 - 1) // (factorial(4) * factorial(3 - 1))\n    \n    # However, the books are distinct, and the above calculation assumes identical books.\n    # So, we also need to take into account the permutations of the 7 books themselves.\n    # That is 7! (factorial of 7) to account for the ordering of the books.\n    permutations_of_books = factorial(7)\n    \n    total_ways = comb * permutations_of_books\n    return total_ways\n\nans = solution()"
    ],
    "33f0af890b564ab1aa7a516852f730ee": [
        "def solution():\n    ans = 56 - 7 * 4 // (5 - 3)\n    return ans\n\nans = solution()"
    ],
    "904f0cdae54f4d4a9375c041f3a5ebf8": [
        "def solution():\n    # There are 3 other individuals, let's call them B, C, and D.\n    # After A makes the first pass, there are 3 choices of who to pass it to (B, C, or D).\n    # Whichever person receives the ball first will then have 2 choices of who to pass it to,\n    # as they cannot pass it back to A immediately.\n    # The final person will only have one choice: pass it back to A.\n    # Thus, the total number of ways the ball can be passed is 3 (first pass) * 2 (second pass) * 1 (third pass)\n\n    count = 3 * 2 * 1\n    return count\n\nans = solution()"
    ],
    "9d9d88531760402f8ece6a4b9d1e5fd4": [
        "def solution():\n    # Grandmother's age on 1st December 2008\n    grandmother_age_2008 = 80\n    \n    # Daughter's age on 1st December 1996\n    daughter_age_1996 = 40\n    \n    # The difference in years between 2008 and 1996\n    years_difference = 2008 - 1996\n    \n    # Daughter's age in 2008\n    daughter_age_2008 = daughter_age_1996 + years_difference\n    \n    # Grandmother's age when her daughter was born \n    # is the difference between their ages in 2008\n    grandmother_age_when_daughter_born = grandmother_age_2008 - daughter_age_2008\n    \n    return grandmother_age_when_daughter_born\n\nans = solution()"
    ],
    "870e50a685df4a29a8af253e6fc7e1bc": [
        "def solution():\n    ans = 3.5 * 0.8 + 5.5 * 0.8 + (4/5) * 1\n    return ans\n\nans = solution()"
    ],
    "53e2a3f3ec9744be90c9f22a4ed5982f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nicole, eddy = symbols('nicole eddy')\n    # Nicole had thrice as many tokens as Eddy\n    equation1 = Eq(nicole, 3 * eddy)\n    # After using tokens, they had 24 tokens left altogether\n    equation2 = Eq(nicole - 130 + eddy - 38, 24)\n\n    solutions = solve((equation1, equation2), (nicole, eddy))\n\n    return solutions[nicole]\n\nans = solution()"
    ],
    "9b9cfe3c11e145838950ed7277589f2e": [
        "def solution():\n    leroy_salt = 200 * 0.35\n    lenny_salt = 300 * 0.50\n    total_salt = leroy_salt + lenny_salt\n    total_solution = 200 + 300\n    concentration = total_salt / total_solution\n    return concentration\n\nans = solution()"
    ],
    "ecc3b3f2bec24a058e7c38b24394b25f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mike_candy, valeria_candy = symbols('mike_candy valeria_candy')\n\n    equation1 = Eq(mike_candy - valeria_candy, 6 - 22)\n    equation2 = Eq(mike_candy + valeria_candy, 36)\n\n    solutions = solve((equation1, equation2), (mike_candy, valeria_candy))\n\n    return solutions[valeria_candy]\n\nans = solution()"
    ],
    "363fad5f614943dfb0cf3e05c47b60d2": [
        "def solution():\n    total_weight = 300  # Total weight of the solution in grams\n    sugar_concentration = 0.35  # The concentration of sugar in the solution\n\n    # Calculate the weight of the sugar in the solution\n    sugar_weight = total_weight * sugar_concentration\n\n    # Calculate the weight of the water by subtracting the weight of the sugar from the total weight of the solution\n    water_weight = total_weight - sugar_weight\n\n    return water_weight\n\nans = solution()"
    ],
    "e191879db45c48ff90d30488b861c796": [
        "def solution():\n    from math import factorial\n    \n    # Treat A and B as one person since they have to stand next to each other\n    # So we have 7 \"people\" to arrange\n    arrangements_with_AB_together = factorial(7)\n    \n    # For each of these arrangements, A and B can switch order, so multiply by 2\n    arrangements_with_AB_together *= 2\n    \n    # Compute total number of arrangements without any restrictions (8 people)\n    total_arrangements = factorial(8)\n    \n    # Compute the number of arrangements where C and D are together\n    # Treat C and D as one person, so we have 7 \"people\" to arrange\n    arrangements_with_CD_together = factorial(7)\n    \n    # For each of these arrangements, C and D can switch order, so multiply by 2\n    arrangements_with_CD_together *= 2\n    \n    # Subtract the unwanted arrangements (where C and D are together) from the total\n    valid_arrangements = total_arrangements - arrangements_with_CD_together\n    \n    # Now subtract the cases where A and B are together AND C and D are not together\n    ans = valid_arrangements - (arrangements_with_AB_together - arrangements_with_CD_together)\n    \n    return ans\n\nans = solution()"
    ],
    "9a2001545cec4ccaa9dd40221c502641": [
        "def solution():\n    power_50 = 12**50\n    power_75_k = lambda k: k**75\n    k = 1\n    while power_75_k(k) < power_50:\n        k += 1\n    return k - 1\n\nans = solution()"
    ],
    "86d05dc47dc744c0ac39d1fd344f31fb": [
        "def solution():\n    # Number of oranges after throwing away rotten ones and before buying new ones:\n    oranges_after_throwing = 133 - 25\n    # Number of oranges she had at first before throwing away:\n    oranges_at_first = oranges_after_throwing + 34\n    return oranges_at_first\n\nans = solution()"
    ],
    "c67845741aaf419ca66672bdfdbdb918": [
        "def Psi_operation(a, b):\n    if a < b:\n        return a * b + 2\n    else:\n        return a - b + 2\n\ndef solution():\n    result = Psi_operation(14, 13)\n    ans = Psi_operation(result, 12)\n    return ans\n\nans = solution()"
    ],
    "525762f2f6e042f985a9eb27b6ebb6fd": [
        "def solution():\n    # Initialize the counter for the number of digits\n    num_digits = 0\n    \n    # Loop through the sequence from 1 to 19\n    for i in range(1, 20):\n        # Add the length of the current number to the count of digits\n        num_digits += len(str(i))\n    \n    return num_digits\n\nans = solution()"
    ],
    "3718c228fa6540b487cde297c66ba680": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    girls = symbols('girls')  # Let 'girls' be the variable for the number of girls in the class\n    boys = 36 - girls  # The number of boys is the total number minus the number of girls\n\n    # Equation based on average score\n    eq = Eq(88 * girls + 91 * boys, 89 * 36)\n    \n    # Solve the equation\n    solution = solve(eq, girls)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "ad5c7faae0734a86b7fadb1303a9f16e": [
        "def solution():\n    # Number of legs each animal has\n    legs_per_cat = 4\n    legs_per_dog = 4\n    legs_per_rabbit = 4\n    legs_per_bird = 2\n\n    # Total number of legs for cats, dogs, and the rabbit\n    legs_from_cats_dogs_rabbit = (2 * legs_per_cat) + (2 * legs_per_dog) + (1 * legs_per_rabbit)\n\n    # Remaining legs are for the birds\n    remaining_legs_for_birds = 28 - legs_from_cats_dogs_rabbit\n\n    # Number of birds based on their leg count\n    num_birds = remaining_legs_for_birds // legs_per_bird\n\n    return num_birds\n\nans = solution()"
    ],
    "88d1b67e1ad54227ad1e912db7853b6a": [
        "def solution():\n    return 694 + 888\n\nans = solution()"
    ],
    "c3d38fc4ca7d4aab8188ce6862d374c4": [
        "def solution():\n    minutes_per_walk = 12\n    total_minutes = 30\n    flights_walked_in_12_minutes = 4\n    flights_in_30_minutes = (total_minutes / minutes_per_walk) * flights_walked_in_12_minutes\n    return flights_in_30_minutes\n\nans = solution()"
    ],
    "a36703deada040f4bfd94e22b7d1fa9b": [
        "def solution():\n    ans = 80 * 30\n    return ans\n\nans = solution()"
    ],
    "26344c38e9c448e8b356d146763a48a2": [
        "def solution():\n    # Total work done by 5 people in 6 hours\n    total_work = 5 * 6\n    \n    # The neighbour's fence is twice as long, which means double the work\n    neighbour_work = total_work * 2\n\n    # The work needs to be completed in less than 5 hours, so we check for 4 hours\n    hours_needed = 4\n\n    # Find the minimum number of people required to complete the neighbour_work in hours_needed\n    # Since we are looking for full people we take the ceil of the division result\n    from math import ceil\n    people_needed = ceil(neighbour_work / hours_needed)\n\n    return people_needed\n\nans = solution()"
    ],
    "cbdb7ff490c04e3a92b3782d84c28e6a": [
        "def solution():\n    cookies_per_gram = 50 / 8\n    cookies_for_216_grams = cookies_per_gram * 21.6\n    return cookies_for_216_grams\n\nans = solution()"
    ],
    "d620d54398de4f13a1c45f2bf4327f65": [
        "def solution():\n    ans = 96 // 3\n    return ans\n\nans = solution()"
    ],
    "e377472a9c68458e9891ee67442a2346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    handbag, wallet, belt = symbols('handbag wallet belt')\n\n    equation1 = Eq(handbag, wallet + 300)\n    equation2 = Eq(wallet, belt + 54)\n    equation3 = Eq(handbag + wallet + belt, 840)\n\n    solutions = solve((equation1, equation2, equation3), (handbag, wallet, belt))\n\n    return solutions[belt]\n\nans = solution()"
    ],
    "2d92ec4620534efbbcc9c406a5deeb1f": [
        "def solution():\n    ans = 513 - 236\n    return ans\n\nans = solution()"
    ],
    "0416bb6956e54f29ba4f1c69d845e321": [
        "def solution():\n    # Convert octal (base 8) number to decimal (base 10)\n    N_octal = '12345654321'\n    N_decimal = int(N_octal, 8)\n    \n    # Calculate the remainders\n    remainder_7 = N_decimal % 7\n    remainder_9 = N_decimal % 9\n    \n    # Add the remainders together\n    sum_of_remainders = remainder_7 + remainder_9\n    \n    return sum_of_remainders\n\nans = solution()"
    ],
    "4aedbf6d92b44b4dad2e2eed5fdfabf3": [
        "def solution():\n    combined_age_three_years_ago = 7\n    # Each cat ages 3 years from three years ago to the present, \n    # and they will age another 4 years four years from now.\n    # In total, each cat ages 3 + 4 = 7 years from three years ago\n    # to four years from now.\n    age_increase_per_cat = 3 + 4\n    \n    # Since there are two cats, we multiply the age increase per cat by 2.\n    total_age_increase = age_increase_per_cat * 2\n    \n    # Their combined age in four years will be their combined age three\n    # years ago plus the total age increase.\n    combined_age_in_four_years = combined_age_three_years_ago + total_age_increase\n    return combined_age_in_four_years\n\nans = solution()"
    ],
    "bc7bc5a7f5724db3ab52e783cbad387f": [
        "def solution():\n    ans = 637 - 473\n    return ans\n\nans = solution()"
    ],
    "38aa9d3b89004c14ad2ed83c80367f5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, magazine = symbols('book magazine')\n    equation1 = Eq(2 * book + 3 * magazine, 24.90)\n    equation2 = Eq(book + magazine, 10)\n\n    solutions = solve((equation1, equation2), (book, magazine))\n\n    return solutions[magazine]\n\nans = solution()"
    ],
    "284741c33dc2463f995c4965d27e5abb": [
        "def solution():\n    n = 99\n    sum_squares = (n * (n + 1) * (2*n + 1)) / 6\n    sum_n = (n * (n + 1)) / 2\n    ans = sum_squares + sum_n\n    return int(ans)\n\nans = solution()"
    ],
    "3e20cfd987aa4c41955c78eb36cd75ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7*x - 3*x + 2, 22)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "33aab4041f0f402a8174696b588641a1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let b represent the capacity of a big pail and s represent the capacity of a small pail\n    b, s = symbols('b s')\n\n    # First statement: 3 big pails and 4 small pails hold 68 liters\n    equation1 = Eq(3*b + 4*s, 68)\n\n    # Second statement: 4 big pails and 2 small pails hold 64 liters\n    equation2 = Eq(4*b + 2*s, 64)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (b, s))\n\n    # We want to find the capacity of a big pail\n    return solutions[b]\n\nans = solution()"
    ],
    "6bb84ead0f0149a69267c203c7dcf79f": [
        "def solution():\n    from math import sqrt\n\n    # Prime factorization of 2016 = 2^5 * 3^2 * 7\n    # For a divisor to be a perfect square, all exponents in its prime factorization must be even.\n    # Therefore, the exponent of 2 can be either 0, 2, or 4 (3 possibilities)\n    # The exponent of 3 can be either 0 or 2 (2 possibilities)\n    # The exponent of 7 must be 0 because 2 is even and 1 is not (only 1 possibility)\n    # Compute the number of perfect square divisors\n    ans = (5 // 2 + 1) * (2 // 2 + 1) * (1 // 2 + 1)\n\n    return ans\n\nans = solution()"
    ],
    "006b556a40774bb786928b5e8628397b": [
        "def solution():\n    # Since they are consecutive numbers, they can be expressed as n, n+1, n+2\n    # And their sum is given as n + (n + 1) + (n + 2) = 60\n    # Simplifying, we get 3n + 3 = 60\n    # Solving for n, we get n = (60 - 3) / 3\n    n = (60 - 3) / 3\n    # The largest number will be n + 2\n    ans = n + 2\n    return int(ans)\n\nans = solution()"
    ],
    "7fadce2ae96f472cb7d9703a5f808b47": [
        "def solution():\n    from itertools import permutations\n\n    for perm in permutations(range(10), 4):\n        A, B, C, D = perm\n        if A != 0 and C != 0:\n            num1 = 100 * A + 10 * B + A\n            num2 = 100 * C + 10 * D + C\n            if num1 + num2 == 726:\n                return A + B + C + D\n\nans = solution()"
    ],
    "f5bcf94ffda8467a907da5740aab11b5": [
        "def solution():\n    # Calculate the worst case scenario where Annabella does not get a yellow shirt\n    # by picking all the shirts that are not yellow.\n    non_yellow_shirts = 6 + 4 + 12  # orange + pink + brown\n\n    # To ensure she gets at least one yellow shirt, \n    # she must take out all non-yellow shirts plus one more shirt.\n    ans = non_yellow_shirts + 1\n    \n    return ans\n\nans = solution()"
    ],
    "ebd40fb218054510aeb86c96dfced3fc": [
        "def solution():\n    total_pens_needed = 70 * 3\n    packs_needed = total_pens_needed / 8\n\n    # We need to buy whole packs, so if there's a remainder we need one more pack.\n    if total_pens_needed % 8 != 0:\n        packs_needed += 1\n\n    return int(packs_needed)\n\nans = solution()"
    ],
    "96a1c9809ffd4f579596d44d35b5896c": [
        "def solution():\n    return 249 * 31\n\nans = solution()"
    ],
    "dd56e7a3afe744abb3a668a3d42ef994": [
        "def solution():\n    return 3.2 + 6.41 + 0.207\n\nans = solution()"
    ],
    "bfc090949ff6429496bb1b10076bb3dd": [
        "def solution():\n    result = 9.8 + 99.8 + 199.8 + 2999.8 + 39999.8 + 1\n    return result\n\nans = solution()"
    ],
    "7e6235a5f2e34ffeb942f81fedd76b05": [
        "def solution():\n    sugar_weight = 30\n    water_weight = 170\n    total_weight = sugar_weight + water_weight\n\n    concentration = (sugar_weight / total_weight) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "d24262d1d37a487682fd61310661cfd5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x, 2 - (3*x -16))\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d1da302670c445868750665ea9e1e53d": [
        "def solution():\n    for age in range(1, 58):\n        if age % 7 == 0 and (age + 1) % 9 == 0:\n            return age\n\nans = solution()"
    ],
    "f569465348234fb386433e1f3c49b08a": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Define the congruences based on the problem statement\n    congruences = [(1, 2), (1, 3), (1, 4), (1, 6), (0, 7)]\n    \n    # Use the Chinese Remainder Theorem to find a solution\n    age, _ = solve_congruence(*congruences)\n    return age\n\nans = solution()"
    ],
    "2908d71fd0ef401ab05cc4649db1ec58": [
        "def solution():\n    # Observing the sequence: 94, __, 80, 73, 66\n    # We try to find the differences between the known numbers.\n    differences = []\n    differences.append(80 - 73)  # Difference between 80 and 73\n    differences.append(73 - 66)  # Difference between 73 and 66\n    \n    # Assuming the differences decrease by the same amount.\n    difference_decrease = differences[0] - differences[1]\n    \n    # Calculate the missing difference using the second difference minus the decrease.\n    missing_difference = differences[1] + difference_decrease\n    \n    # Now calculate the missing number using 94 minus the missing difference.\n    missing_number = 94 - missing_difference\n    \n    return missing_number\n\nans = solution()"
    ],
    "7b9872c76da143f7914b38327c9d1581": [
        "def solution():\n    total_people = 15\n    position_from_front = 9\n\n    position_from_end = total_people - position_from_front + 1\n\n    return position_from_end\n\nans = solution()"
    ],
    "b496ffab1ef6486791ac9a2562ae6998": [
        "def solution():\n    wine_glass_ml = 100\n    tumbler_ml = 200\n    wine_glasses_sold = 25\n    tumblers_sold = 12\n    carton_volume_ml = 1000\n\n    total_ml_sold = (wine_glass_ml * wine_glasses_sold) + (tumbler_ml * tumblers_sold)\n    cartons_needed = total_ml_sold / carton_volume_ml\n\n    return int(cartons_needed) if cartons_needed == int(cartons_needed) else int(cartons_needed) + 1\n\nans = solution()"
    ],
    "f17a871c84cc4e1fb96fb91b864f0695": [
        "def solution():\n    n = 620 // 20\n    return n\n\nans = solution()"
    ],
    "68464cb7965d42e2974a5374db0adaf7": [
        "def solution():\n    return 125 * 32 * 25 * 7\n\nans = solution()"
    ],
    "9aee79585275499c8017c3e2e4499346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for the initial amounts of fruits\n    a, p, l = symbols('a p l')\n\n    # Set up the initial ratios of avocados, peaches, and lemons\n    initial_ratio_avocado_peach = Eq(a / p, 2 / 9)\n    initial_ratio_peach_lemon = Eq(p / l, 9 / 8)\n\n    # Set up the ratio of peaches to lemons after selling some fruits\n    final_ratio_peach_lemon = Eq((p - 12) / (l - 60), 6 / 5)\n\n    # Solve the system of equations for the amounts of each fruit\n    solutions = solve((initial_ratio_avocado_peach, initial_ratio_peach_lemon, final_ratio_peach_lemon), (a, p, l))\n\n    # Get the total number of leftover fruits\n    avocados_left = solutions[a] - 52\n    peaches_left = solutions[p] - 12\n    lemons_left = solutions[l] - 60\n    total_left = avocados_left + peaches_left + lemons_left\n\n    return total_left\n\nans = solution()"
    ],
    "ac493b6b7d0a401888bc24c649523bc1": [
        "def solution():\n    n = (36 / 3) / 4\n    return n\n\nans = solution()"
    ],
    "c7265fcca4564dfbbed3794cc4c26974": [
        "def solution():\n    students_facing_teacher = 60\n    for i in range(1, 61):\n        # Multiples of 3 or multiples of 5 will turn around an odd number of times\n        if (i % 3 == 0) ^ (i % 5 == 0):  # XOR operation to find numbers which are multiples of only one of them\n            students_facing_teacher -= 1\n\n    return students_facing_teacher\n\nans = solution()"
    ],
    "368db30ced514aa0a4c14fd84ae26f51": [
        "def solution():\n    from sympy import lcm, symbols, Eq, solve\n\n    # Calculate LCM of 2, 4, and 6\n    least_common_multiple = lcm([2, 4, 6])\n\n    # Search for the number that fits all conditions\n    # Start with the LCM and add it each time until the number also satisfies the condition for division by 7\n    age = symbols('age')\n    equation = Eq(age % 7, 5)\n    \n    for multiple in range(least_common_multiple + 1, least_common_multiple * 7, least_common_multiple):\n        if solve(Eq(multiple % 7, 5), age):\n            return multiple\n\nans = solution()"
    ],
    "a04cac85a9884a9187a1ad6d908f193b": [
        "def solution():\n    # Exponentiation of any integer repeats its last digit in a cycle of 4 when taken to increasing powers of that integer.\n    # For 2^n, the cycle of the last digit is: 2, 4, 8, 6.\n    # Since we want to find the last digit of 2 raised to the power of 859433, \n    # we can find the remainder of 859433 when divided by 4 to determine the position in the cycle.\n\n    power_cycle = [2, 4, 8, 6]\n    position = 859433 % len(power_cycle)\n    \n    # Since the cycle starts with index 0, we need to subtract 1 to get the correct index\n    last_digit = power_cycle[position - 1] if position > 0 else power_cycle[-1]\n\n    return last_digit\n\nans = solution()"
    ],
    "43dfa2d812fc44359cbc9ed198dfed87": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of sweets Jess and Jill initially have\n    jess, jill = symbols('jess jill')\n\n    # Equation based on the condition before sweets are given\n    equation1 = Eq(jill, 6/5 * jess)\n\n    # Equation based on the condition after sweets are given\n    equation2 = Eq(jill - 8, 4/7 * (jess + 8))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jess, jill))\n\n    # Calculate the total number of sweets\n    total_sweets = solutions[jess] + solutions[jill]\n\n    return total_sweets\n\nans = solution()"
    ],
    "8d91d54e4c4b4bc6b73c53b8dd7ea30a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(52 - (4*x - 3), 47)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "7c0b46427c0c48029b6941ed62bf32c8": [
        "def solution():\n    for num in range(10, 100):  # Start from 10 as it's the smallest two-digit number to 99\n        if num % 3 == 2 and num % 11 == 2:\n            return num\n\nans = solution()"
    ],
    "e3b5e72653f44428b98d1a54dd056bca": [
        "def solution():\n    # Let the weights of Adam, Ben, and Carl be A, B, and C respectively.\n    # According to the problem, we have the following equations:\n    # A + B = 102\n    # B + C = 97\n    # A + C = 93\n\n    # To solve for the total weight A + B + C, we add all three equations:\n    # (A + B) + (B + C) + (A + C) = 102 + 97 + 93\n    # This sums up to 2*(A + B + C) because each weight is counted twice:\n    # 2*(A + B + C) = 292\n    # Dividing both sides by 2 gives us the total weight:\n    # A + B + C = 292 / 2\n\n    total_weight = (102 + 97 + 93) / 2\n    return int(total_weight)\n\nans = solution()"
    ],
    "76aa21da5d384dccb38483d763fd552d": [
        "def solution():\n    from itertools import permutations\n    \n    # Create a descending list of digits, since we need the largest number possible\n    digits = [7, 6, 5, 4, 3, 2, 1]\n    \n    # Starting from the largest combination of digits and checking their permutations\n    for i in range(len(digits), 0, -1):\n        # Generate permutations of the current size i\n        for perm in permutations(digits, i):\n            number = int(''.join(map(str, perm)))\n            \n            # Check divisibility by all digits used, using all() for brevity\n            if all(number % d == 0 for d in perm):\n                return number\n\nans = solution()"
    ],
    "9bbae54e3737448abd3501177769689d": [
        "def solution():\n    # Initialize maximum length (number of terms) to 0\n    max_length = 0\n\n    # 900 can be expressed as the sum of at least 1 and at most 30 consecutive odd numbers (since 30^2 > 900)\n    for length in range(1, 31):\n        # Sum of an arithmetic sequence: n/2 * (2a1 + (n - 1)d), here a1 is the first term, n is the number of terms, d is the common difference\n        # For odd numbers, d=2. We need to find a1, such that the sum equals 900.\n        # 900 = length/2 * (2a1 + (length - 1) * 2)\n        # 900 = length * (a1 + (length - 1))\n        # a1 = (900/length) - (length - 1)\n        a1 = (900 / length) - (length - 1)\n\n        # a1 should be a positive odd number\n        if a1 > 0 and a1 % 2 != 0:\n            max_length = max(max_length, length)\n    \n    return max_length\n\nans = solution()"
    ],
    "0de8f8f3eac5485fa0fae9f57ecc6d21": [
        "def solution():\n    return 46 * 37\n\nans = solution()"
    ],
    "c5cba4277873402db4efd1be60e4e847": [
        "def solution():\n    width = 4.5\n    height = 6.2\n\n    perimeter = 2 * (width + height)\n\n    return perimeter\n\nans = solution()"
    ],
    "6ffedd49a405465ab88697b2f7d7ae79": [
        "def solution():\n    numbers = [8.05, 8.50, 8.505, 8.055]\n    smallest = min(numbers)\n    return smallest\n\nans = solution()"
    ],
    "531f65fc27864e3a881f25dddace2c6a": [
        "def solution():\n    divisor = 53\n    remainder = 2\n    number = 120\n\n    while True:\n        number += 1\n        if number % divisor == remainder:\n            break\n\n    return number\n\nans = solution()"
    ],
    "1743bb23aed04ec2b7a7f8fec1d14118": [
        "def solution():\n    meters = 2\n    centimeters = 2\n    height_in_meters = meters + (centimeters / 100.0)\n    return height_in_meters\n\nans = solution()"
    ],
    "4348474e45be4c4784a60dab18304844": [
        "def solution():\n    first_test = 60\n    second_test = first_test * 1.25\n    third_test = second_test * 0.80\n\n    total_score = first_test + second_test + third_test\n\n    return int(total_score)\n\nans = solution()"
    ],
    "481bd4bd37034fc8a43530a5477069e1": [
        "def solution():\n    principal = 5000\n    rate = 0.03\n    time = 2\n    \n    amount = principal * ((1 + rate) ** time)\n    \n    return amount\n\nans = solution()"
    ],
    "b8670c2b439149d7a72fcf4fe146bf96": [
        "def solution():\n    january_saving = 13\n    february_saving = 18\n    march_saving = 5\n    total_saving = january_saving + february_saving + march_saving\n    mean_saving = total_saving / 3\n    return mean_saving\n\nans = solution()"
    ],
    "1634653b15164af9958af85781121677": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bookmarks, pupils = symbols('bookmarks pupils')\n\n    equation1 = Eq(bookmarks - 4 * pupils, 8)\n    equation2 = Eq(bookmarks - 6 * pupils, -10)\n\n    solutions = solve((equation1, equation2), (bookmarks, pupils))\n\n    return solutions[bookmarks]\n\nans = solution()"
    ],
    "f4f08eaaa1b64a658de25585dad20e40": [
        "def solution():\n    ans = sum([(7 * i) ** 2 for i in range(1, 16)])\n    return ans\n\nans = solution()"
    ],
    "26527b2a0a2c4e4d877500b4ff8a3656": [
        "def solution():\n    count = 0\n    for hour in range(0, 24):  # Loop through all hours\n        for minute in range(0, 60):  # Loop through all minutes\n            # Convert hour and minute to string with leading 0 if necessary to easily count the fours\n            time_str = f\"{hour:02d}{minute:02d}\"\n            # Count how many times '4' appears in the time string\n            if time_str.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "ba6364de23e74495bec276c83b164e14": [
        "def solution():\n    total_sum = 4.22 + 31.49 + 0.76\n    return total_sum\n\nans = solution()"
    ],
    "6c7e9b74e26440e9abed54180422f05b": [
        "def solution():\n    from sympy import primerange\n\n    primes = list(primerange(130, 151))  # 151 is exclusive\n    return len(primes)\n\nans = solution()"
    ],
    "ffc16ac75f7f47fcb1d3eb07fae6db1e": [
        "def solution():\n    return 233 in {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233}\n\nans = solution()"
    ],
    "7e8a739ac409498b80dc7f1731900ebb": [
        "def solution():\n    for num in range(1, 100):\n        if num % 3 == 2 and num % 4 == 3 and num % 5 == 4:\n            return num\n\nans = solution()"
    ],
    "bfadf094fc4b4d4f952061bbaeb8b5d0": [
        "def solution():\n    # Define the start and end values\n    start = 56\n    end = 92\n    multiple_of = 4\n\n    # Calculate the number of multiples of 4 from 1 to 56 (inclusive)\n    multiples_to_start = (start - 1) // multiple_of\n\n    # Calculate the number of multiples of 4 from 1 to 92 (inclusive)\n    multiples_to_end = end // multiple_of\n\n    # Calculate the number of multiples of 4 from 56 to 92\n    answer = multiples_to_end - multiples_to_start\n\n    # Check if Sam's answer is correct\n    is_correct = (answer == 9)\n\n    return (is_correct, answer)\n\nans = solution()"
    ],
    "d8643be2681f41c897691ad4ae4d10ab": [
        "def solution():\n    from math import comb\n    ans = comb(15, 2)\n    return ans\n\nans = solution()"
    ],
    "f29917f11bd644f2a9c8e57a6f612d23": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the speed of the stream\n    x = symbols('x')\n\n    # Distance = Speed * Time\n    # downstream_speed = still_water_speed + stream_speed\n    # upstream_speed = still_water_speed - stream_speed\n    \n    distance = 144  # distance between Magic Town and Super Town\n    still_water_speed = 15  # Speed of ship in still water\n    downstream_time = 8  # Time taken to travel downstream\n\n    # Calculate the speed of the stream\n    downstream_speed = distance / downstream_time\n    equation = Eq(still_water_speed + x, downstream_speed)\n    stream_speed = solve(equation, x)[0]\n\n    # Calculate upstream speed\n    upstream_speed = still_water_speed - stream_speed\n\n    # Calculate time taken to return upstream from Super Town to Magic Town\n    upstream_time = distance / upstream_speed\n\n    return upstream_time\n\nans = solution()"
    ],
    "c4f94facc9b340b4a2a6145ef66bc8af": [
        "def solution():\n    jenny = 6\n    qiqi = jenny + 5\n    return qiqi\n\nans = solution()"
    ],
    "94c97ffe57a2432ba8c0eeaa3ce36a92": [
        "def solution():\n    wait_time_h = 1\n    wait_time_m = 25\n    john_time_h = 15\n    john_time_m = 15\n\n    meet_time_h = john_time_h + wait_time_h\n    meet_time_m = john_time_m + wait_time_m\n\n    if meet_time_m >= 60:\n        meet_time_h += meet_time_m // 60\n        meet_time_m %= 60\n\n    ans = (meet_time_h, meet_time_m)\n    return ans\n\nans = solution()"
    ],
    "fc103906e8e44feea1ebe0162fb169f5": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]\n    ans = solve_congruence(*congruences)[0]\n\n    return ans\n\nans = solution()"
    ],
    "c2b06e8dbe5c4834b11b9e8c5471c680": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    h, k = symbols('h k')  # h for hippo food, k for kangaroo food\n\n    # Equation setup\n    # h = k + 45  # hippocampus eats 45kg more than the kangaroo\n    # 20h = 10 * 20k  # after 20 days, hippo has eaten 10 times the kangaroo's total\n    equation1 = Eq(h, k + 45)\n    equation2 = Eq(20 * h, 10 * 20 * k)\n\n    # Solving the system of equation\n    solutions = solve((equation1, equation2), (h, k))\n\n    # The problem asks for the amount of food the hippo has consumed in 20 days\n    hippo_food_20_days = solutions[h] * 20\n\n    return hippo_food_20_days\n\nans = solution()"
    ],
    "25336ea78ab34494bb296b208a1d61f0": [
        "def solution():\n    return (10 * 12) + 1\n\nans = solution()"
    ],
    "5c85b6e4f6b74768adaad620ef94842e": [
        "def solution():\n    # Work rate of worker A per day\n    a_rate = 1 / 15\n    # Work rate of worker B per day\n    b_rate = 1 / 20\n    \n    # Total work done by A and B together in 2 days\n    work_done = 2 * (a_rate + b_rate)\n    \n    # Remaining work to be done by A alone\n    remaining_work = 1 - work_done\n    \n    # Days for A to finish the remaining work\n    days_for_a = remaining_work / a_rate\n    \n    return days_for_a\n\nans = solution()"
    ],
    "a9ada9a471c14c9089a859c1a81f4727": [
        "def solution():\n    # You will always end up picking two balls of the same color by the time you pick\n    # 1 green ball and 1 blue ball (in the worst case of alternating colors) \n    # and then the next ball you pick (3rd ball) will certainly match one of the 2 previously picked balls.\n    # Therefore, the number of balls you need to pick to guarantee at least two balls of the same color is 3.\n    return 3\n\nans = solution()"
    ],
    "23289d4f9e054a8bb7c18484e70642db": [
        "def solution():\n    ans = sum(1/i for j in range(1, 20) for i in range(j + 1, 21))\n    return ans\n\nans = solution()"
    ],
    "ffeb5f99fef6492788aecdd5191a6fbc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')  # Define the symbol for variable x\n    equation = Eq(3 * x + 5, 20)  # Create the equation 3x + 5 = 20\n\n    sol = solve(equation, x)  # Solve the equation for x\n\n    return sol[0]  # Return the solution\n\nans = solution()"
    ],
    "934f5ca54cb7439aa6d799d5d2c44dcb": [
        "def solution():\n    total_candies = 35\n    total_children = 9\n    first_child = 3\n    \n    last_child = (first_child + total_candies - 1) % total_children\n    # If last_child is 0, that means the last candy goes to the 9th child\n    last_child = last_child if last_child else total_children\n\n    return last_child\n\nans = solution()"
    ],
    "f24bfda99f1c4bb2bd7903af23a66829": [
        "def solution():\n    first_term = 4\n    difference = 3\n    num_terms = 60\n\n    # Formula for the sum of an arithmetic sequence: n/2 * (2a + (n-1)d)\n    sum_of_sequence = num_terms / 2 * (2 * first_term + (num_terms - 1) * difference)\n    \n    return int(sum_of_sequence)\n\nans = solution()"
    ],
    "699c77bb441b4ebda83105b6f2f13d9b": [
        "def solution():\n    # There are 3 color of balls in the bag; Yellow, White, and Black.\n    # The worst case scenario is that Ada picks balls in the pattern that delays getting 10 of the same color as much as possible.\n    # Therefore, she could pick 9 yellow and 9 white balls without having 10 of the same color.\n    # To guarantee 10 of the same color, she would need to pick all remaining balls, which are black.\n    # So, she has to first pick 9 yellow and 9 white, which gives us 18 balls.\n    # After this, any ball she picks will result in 10 balls of the same color.\n    # Since black balls are the majority, she will need to pick them to reach 10 of the same color.\n\n    # Calculate the least number of balls she has to take out to be sure of getting 10 balls of the same color.\n    worst_case_yellow_and_white = 9 + 9\n    balls_needed_to_have_10_blacks = 10\n    least_number_of_balls = worst_case_yellow_and_white + balls_needed_to_have_10_blacks\n\n    return least_number_of_balls\n\nans = solution()"
    ],
    "bf15675f14f14212bf6c9e9d10c58225": [
        "def solution():\n    from itertools import permutations\n\n    total_count = 0\n    \n    # Iterate through all permutations of students\n    for perm in permutations('ABCDEFG'):\n        perm = ''.join(perm)\n        \n        # Condition 1: Student A must stand between B and C\n        if 'B' in perm[:perm.index('A')] and 'C' in perm[perm.index('A'):] \\\n           or 'C' in perm[:perm.index('A')] and 'B' in perm[perm.index('A'):]:\n            \n            # Condition 2: D and E must stand together\n            if 'DE' in perm or 'ED' in perm:\n                \n                # Condition 3: F and G must not be adjacent\n                if 'FG' not in perm and 'GF' not in perm:\n                    total_count += 1\n\n    return total_count\n\nans = solution()"
    ],
    "9b63ec4f71094b1d885ce1afa323969f": [
        "def solution():\n    from math import lcm  # least common multiple\n\n    # Days between eating spaghetti and apple pie\n    spaghetti_days = 7\n    apple_pie_days = 3\n\n    # Find least common multiple to know when both events coincide\n    days_until_both = lcm(spaghetti_days, apple_pie_days)\n\n    return days_until_both\n\nans = solution()"
    ],
    "e23be947b2694a46ae2d582a9c3ce1d5": [
        "def solution():\n    ans = -12 - 5\n    return ans\n\nans = solution()"
    ],
    "30dedaf91b7c41adbc5ee0f51c1d61cc": [
        "def solution():\n    data = [12, 145, 32, 77, 62]\n    data_range = max(data) - min(data)\n    return data_range\n\nans = solution()"
    ],
    "e576332748d74067a92a264b25cf6bf6": [
        "def solution():\n    total_children = 30\n    children_with_dogs = 19\n    children_with_cats = 18\n    max_without_both = total_children - max(children_with_dogs, children_with_cats)\n    both_cats_and_dogs = max(children_with_dogs + children_with_cats - total_children, max_without_both)\n    return both_cats_and_dogs\n\nans = solution()"
    ],
    "dc7690a8acef47d2b8179414454362dd": [
        "def solution():\n    monthly_saving = 12\n    months = 3\n    total_saving = monthly_saving * months\n    return total_saving\n\nans = solution()"
    ],
    "332cdb55e65a4055a7b3f28234f15541": [
        "def solution():\n    # In an arithmetic sequence, the sum of the sequence is calculated by\n    # sum = (n/2) * (first_term + last_term)\n    # where n is the number of terms, first_term is the first number of the sequence,\n    # and last_term is the last number of the sequence.\n\n    # Since this is a table of an arithmetic sequence, we need to determine the first and\n    # last terms of the sequence, as well as the count of terms.\n\n    # If the table mentioned is missing, an assumption needs to be made about the pattern.\n    # For example, let's assume we have a table that starts with 1, ends with 10 and has a step of 1:\n    first_term = 1\n    last_term = 10\n    difference = 1  # This is the step between the terms in the sequence.\n\n    # Calculate the number of terms.\n    num_terms = ((last_term - first_term) / difference) + 1\n\n    # Calculate the sum.\n    total_sum = (num_terms / 2) * (first_term + last_term)\n\n    return int(total_sum)\n\nans = solution()"
    ],
    "c0fbd9fc6c0349318ed02805c0f14bb0": [
        "def solution():\n    material_length = 100\n    material_width = 80\n    cloak_length = 5\n    cloak_width = 4\n\n    cloaks_from_length = material_length // cloak_length\n    cloaks_from_width = material_width // cloak_width\n\n    total_cloaks = cloaks_from_length * cloaks_from_width\n\n    return total_cloaks\n\nans = solution()"
    ],
    "fea775d35ddc44779758a9feca2b1e44": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of shirts and skirts\n    shirts, skirts = symbols('shirts skirts')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(shirts, skirts - 36)  # shirts are 36 less than skirts\n    equation2 = Eq(2/3 * shirts + 5/6 * skirts, 72)  # shirts and skirts left after selling\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (shirts, skirts))\n\n    # We are interested in the number of skirts originally\n    return solutions[skirts]\n\nans = solution()"
    ],
    "4fd1c9c268424dcd9c1930cdbe826408": [
        "def solution():\n    # Distance to travel one way\n    distance = 120\n    \n    # Speed for the first half of the journey\n    speed_going = 20\n    \n    # The time taken to travel to the place 120 miles away\n    time_going = distance / speed_going\n    \n    # Average speed for the entire trip\n    average_speed = 30\n    \n    # Total time for the round trip at the average speed\n    total_time = (2 * distance) / average_speed\n    \n    # Time to return\n    time_returning = total_time - time_going\n    \n    # Speed required when returning\n    speed_returning = distance / time_returning\n    \n    return speed_returning\n\nans = solution()"
    ],
    "4d94cc32d7e645e3ae2c634cbeddd095": [
        "def solution():\n    nell_ratio = 4\n    joe_ratio = 5\n    nell_sweets = 24\n    total_ratio = nell_ratio + joe_ratio\n    total_sweets = nell_sweets * (total_ratio/nell_ratio)\n    return total_sweets\n\nans = solution()"
    ],
    "b6548625db5443beaaee6fa94d6e0200": [
        "def solution():\n    # Calculate the total number of digits used in the numbers from 1 to 34\n    total_digits = 0\n    for number in range(1, 35):\n        total_digits += len(str(number))\n    return total_digits\n\nans = solution()"
    ],
    "501ad0e046c84d61b8cd854a0e3231d0": [
        "def solution():\n    sequence = [55, 62, 80, 36, 18, 29, 76, 92]\n    average = sum(sequence) / len(sequence)\n    return average\n\nans = solution()"
    ],
    "0a765ef7e14c440981d6c2d7b04dabd7": [
        "def solution():\n    return 46 * 37\n\nans = solution()"
    ],
    "5ee23347e0d74d3baa1160988c797db8": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Defining the given congruences\n    congruences = [(1, 5), (2, 6), (7, 11)]\n\n    # Using the Chinese Remainder Theorem to find the smallest number that satisfies the given congruences\n    # We also need to make sure the number is between 400 and 800\n    result, _ = solve_congruence(*congruences)\n    while result < 400:\n        result += 5 * 6 * 11\n\n    return result\n\nans = solution()"
    ],
    "7f69be54279d4eb282c98cde135e73cd": [
        "def solution():\n    # It takes 2 minutes to make 1 cut to divide the rod into two pieces.\n    # To divide the rod into 5 pieces, we require 4 cuts in total.\n    # Each cut takes 2 minutes, so the total time is 4 cuts times 2 minutes per cut.\n    return 4 * 2\n\nans = solution()"
    ],
    "a796ea09fb744741a25cd47d0f76b732": [
        "def solution():\n    return 31.6 * 7\n\nans = solution()"
    ],
    "c16f42441097422a80a4fc1b82640502": [
        "def solution():\n    total_feed_days = 12 * 15\n    days_for_20_horses = total_feed_days / 20\n    return days_for_20_horses\n\nans = solution()"
    ],
    "6fc0618e43e242b49bfdaeb256945ca5": [
        "def solution():\n    current_average = 120\n    new_average = 110\n    \n    total_of_three_numbers = current_average * 3\n    total_of_four_numbers = new_average * 4\n    \n    number_to_be_added = total_of_four_numbers - total_of_three_numbers\n    \n    return number_to_be_added\n\nans = solution()"
    ],
    "1cb1f7199ce14218a8ee265ccbe06c7e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # define symbols for the number of marbles\n    sean, jovan, heman = symbols('sean jovan heman')\n\n    # set up equations based on given information\n    equation1 = Eq(jovan, 2 * sean)\n    equation2 = Eq(heman, 3 * jovan)\n    equation3 = Eq(jovan, heman - 240)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (sean, jovan, heman))\n\n    # total number of marbles\n    total_marbles = sum(solutions.values())\n\n    return total_marbles\n\nans = solution()"
    ],
    "90966aea3ce94728843a0f98acc20314": [
        "def solution():\n    m = symbols('m')\n    \n    equation = Eq(140 + m, 8 * (10 + m) - 3)\n    solution = solve(equation, m)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "34140a9862a3448881425579d24734b9": [
        "def solution():\n    first_term = 5\n    last_term = 65\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "e68039658fe340f98db91346e8adc898": [
        "def solution():\n    x = -11\n    T = 7 + 7 * x\n    return T\n\nans = solution()"
    ],
    "ad7cb903a931476bafc590cff0bdcd26": [
        "def solution():\n    ans = 10.25 + 9.2 - 7\n    return ans\n\nans = solution()"
    ],
    "f01af5cab78a49d192ad10c608f1a18a": [
        "def solution():\n    ans = 301 + 303 + 305 - 9\n    return ans\n\nans = solution()"
    ],
    "b7218901ffc24d00b3c7f10efa784bfe": [
        "from math import gcd\n\ndef solution():\n    # Find the greatest common factor of 6 and 9\n    gcf_6_9 = gcd(6, 9)\n    \n    # Then find the greatest common factor of the result above and 12\n    gcf_final = gcd(gcf_6_9, 12)\n    \n    return gcf_final\n\nans = solution()"
    ],
    "51f1eccaaa5844a897f213dcf2f3e11a": [
        "def solution():\n    total_length = 900\n    total_days = 5\n    total_companies = 4\n    length_per_company_per_day = total_length / (total_days * total_companies)\n\n    return length_per_company_per_day\n\nans = solution()"
    ],
    "da5873ba4dcd43299bae1be0e6fd21e6": [
        "def solution():\n    shoe_set_price = 78\n    sock_pair_price = 12\n    aliens = 6\n    legs_per_alien = 5\n    total_legs = aliens * legs_per_alien\n    total_shoe_sets = total_legs\n    total_sock_pairs = total_legs // 2  # Each pair contains 2 socks\n\n    total_cost = (shoe_set_price * total_shoe_sets) + (sock_pair_price * total_sock_pairs)\n\n    return total_cost\n\nans = solution()"
    ],
    "2c3ac058e2204cb087e20661a4ad713a": [
        "def solution():\n    from statistics import mean, median\n\n    data = [3, 2, 3, 5, 2, 4, 4, 1]\n    data_mean = mean(data)\n    absolute_deviation = [abs(x - data_mean) for x in data]\n    mad = mean(absolute_deviation)\n    \n    return mad\n\nans = solution()"
    ],
    "99005a2c071040f195c27f37d05344df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the masses of John, Andy, and Charles\n    john, andy, charles = symbols('john andy charles')\n\n    # Given equations\n    equation1 = Eq(john + andy, 105)    # Total mass of John and Andy\n    equation2 = Eq(charles + john, 67)  # Total mass of Charles and John\n    equation3 = Eq(andy, 3 * charles)   # Andy's mass is 3 times Charles' mass\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (john, andy, charles))\n\n    # Calculate the total mass of the three boys\n    total_mass = solutions[john] + solutions[andy] + solutions[charles]\n\n    return total_mass\n\nans = solution()"
    ],
    "2dafccaefb9c4371a9aa0d6a0927b08b": [
        "def solution():\n    total_oranges = 13\n    # +3 because we consider the scenario when some kids get zero oranges.\n    # We are distributing n+k-1 oranges to k kids which is (n+k-1) C (k-1), where n is total oranges and k is total kids.\n    different_ways = (total_oranges + 3 - 1) // 3\n    \n    # Calculate the combinations using binomial coefficient formula\n    # C(n, k) = n! / (k! * (n - k)!)\n    ans = math.comb(different_ways, 3 - 1)\n    \n    return ans\n\nans = solution()"
    ],
    "5f22389e9a6a48338414d0443e5b1107": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bud, pip, tom = symbols('bud pip tom')\n\n    equation1 = Eq(bud, 3 * pip)\n    equation2 = Eq(tom, 2 * bud)\n    equation3 = Eq(bud + pip + tom, 50)\n\n    solutions = solve((equation1, equation2, equation3), (bud, pip, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "43c595f7d6ef46c0be98290684686cf6": [
        "def solution():\n    # Iterate through all possible 4-digit combinations\n    for number in range(1000, 10000):\n        # Convert the number to a string to manipulate digits\n        str_num = str(number)\n        # Rearrange the digits by moving the last one to the front\n        new_num = int(str_num[-1] + str_num[:-1])\n        # Check if the new number is greater than the original number by 5877\n        if new_num - number == 5877:\n            return number\n\nans = solution()"
    ],
    "7e7e0d58634e4a7b912975d7485e5197": [
        "def solution():\n    book_totals = [49, 80, 32, 66, 8, 58]\n    valid_totals = [total for total in book_totals if (total - 4) % 7 == 0]\n    return valid_totals[0] if valid_totals else None\n\nans = solution()"
    ],
    "f5d42ab6bc434fe48dcbb4d9b9e637ea": [
        "def solution():\n    distance_between_first_fifth = 20  # distance between the first and fifth tree\n    distance_per_interval = distance_between_first_fifth / 4  # distance between each tree\n    whole_road_length = 200  # total length of the road\n\n    # Number of trees is (total length / distance between trees) + 1 (for the first tree):\n    num_trees = (whole_road_length / distance_per_interval) + 1\n\n    return int(num_trees)\n\nans = solution()"
    ],
    "b791fcccc3654f3db33c3a0ec7363553": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of $0.50 cookies David had\n    # Let y be the number of $0.10 cookies Jeremy had\n    # David's cookies are worth 3 times as much as Jeremy's\n    # Which means: 0.50x = 3*(0.10y)\n    # Jeremy has 3/5 as many $0.50 cookies as $0.10 cookies\n    # Which means: number of $0.50 cookies = 3/5 * y\n    # There were 60 fewer $0.10 cookies than $0.50 cookies\n    # Which means: y = (3/5 * y) + 60\n    x, y = symbols('x y')\n    \n    eq1 = Eq(0.50 * x, 3 * (0.10 * y))\n    eq2 = Eq(y, (3/5 * y) + 60)\n    \n    solution = solve((eq1, eq2), (x, y))\n    \n    # Jeremy's cookies are the number of $0.10 cookies times their value\n    Jeremy_cookies_worth = 0.10 * solution[y]\n    \n    return Jeremy_cookies_worth\n\nans = solution()"
    ],
    "360ae3551215452fb3d04ffde3f78d2c": [
        "def solution():\n    from itertools import combinations\n    \n    numbers = [6, 12, 35, 175, 245, 300]\n    \n    # Generate all combinations of products for 2 and 3 cards\n    products_2_cards = {a * b for a, b in combinations(numbers, 2)}\n    products_3_cards = {a * b * c for a, b, c in combinations(numbers, 3)}\n    \n    # Find common products where both Candy and Candice can have equal products\n    common_products = products_2_cards.intersection(products_3_cards)\n    \n    # For each common product, find which cards could be used to make that product\n    for product in common_products:\n        for combo_2 in combinations(numbers, 2):\n            if product == combo_2[0] * combo_2[1]:\n                for combo_3 in combinations(numbers, 3):\n                    if product == combo_3[0] * combo_3[1] * combo_3[2]:\n                        all_used_numbers = set(combo_2 + combo_3)\n                        # Find which number was not picked\n                        for number in numbers:\n                            if number not in all_used_numbers:\n                                return number\n\nans = solution()"
    ],
    "6cab8d77da3e4447922fdcd2d2b21d24": [
        "def solution():\n    return 4392 // 6\n\nans = solution()"
    ],
    "e40ae4418f8f44cebd8f9882aa3ca6b1": [
        "def solution():\n    total_fruit = 48\n    fraction_apples = 5 / 8\n    apples = total_fruit * fraction_apples\n    pears = total_fruit - apples\n    return int(pears)\n\nans = solution()"
    ],
    "d8ec2b2972f74f84955c8f0a68f3ad73": [
        "def solution():\n    rate_A = 1 / 12  # Tap A takes 12 minutes to fill the tank, so it fills 1/12 of the tank per minute\n    rate_B = 1 / 8   # Tap B takes 8 minutes to fill the tank, so it fills 1/8 of the tank per minute\n\n    combined_rate = rate_A + rate_B  # The combined rate per minute when both taps are open\n    time_to_fill_half = 0.5 / combined_rate  # The time to fill half the tank at the combined rate\n\n    return time_to_fill_half\n\nans = solution()"
    ],
    "4a6ce2ef677140aebc108d44cab3b1ca": [
        "def solution():\n    # Given mathematical expression\n    # (36 * 21) / (6 * 7) = 36 * 21 / 6 * 7\n    # Let's evaluate step by step\n    original_expression = (36 * 21) / (6 * 7)\n    step1 = 36 * 21 / 6\n    step2 = step1 * 7\n    \n    # Check if the final answer is equal to the provided answer 882\n    correct_answer = step2\n    is_correct = correct_answer == 882\n    \n    # if is_correct is False, then Jason made a mistake\n    # we will return the correct answer\n    return correct_answer if not is_correct else True\n\nans = solution()"
    ],
    "57725168bfb44ed79b6561aad62288cd": [
        "def solution():\n    jane_age = 12\n    cousin_age = 2 * jane_age\n    cousin_future_age = cousin_age + 8\n    \n    return cousin_future_age\n\nans = solution()"
    ],
    "35c4e495a24542e1b20ed3ff479cced6": [
        "def solution():\n    ans = 148 + 73\n    return ans\n\nans = solution()"
    ],
    "c4a1d3b65f70441c8f162b68482444ed": [
        "def solution():\n    ann_position = 8\n    people_between = 3\n    second_last_position = ann_position + people_between + 1\n\n    total_people = second_last_position + 1\n\n    return total_people\n\nans = solution()"
    ],
    "c6bfa3d0de504912b6200f3d457f6a73": [
        "def solution():\n    first_number = 157\n    second_number = first_number - 98\n    total_sum = 555\n\n    third_number = total_sum - (first_number + second_number)\n\n    return third_number\n\nans = solution()"
    ],
    "995d99072a7246aa89a178ecfa7b3be9": [
        "def solution():\n    return (9 * 8) // 12\n\nans = solution()"
    ],
    "cf2c548f0cae420c9a89c81143562fc1": [
        "def solution():\n    # Number of girls in the added row and column (not including the corner)\n    # If there are n boys in each side of the square, then there will be \n    # n girls in the row and n girls in the column, but the corner will\n    # be counted twice, so 17 = n + n - 1\n    girls_in_row_column = 17 + 1 # The corner girl is counted twice\n    side_with_girls = girls_in_row_column // 2  # Girls equally split between row and column\n\n    # The side length of the original square array is one less than the array with girls\n    side_of_boys = side_with_girls - 1\n\n    # The total number of boys is the square of the side's length\n    total_boys = side_of_boys ** 2\n\n    return total_boys\n\nans = solution()"
    ],
    "d744cc75e3ab4185ad0c2604e81b69c3": [
        "def solution():\n    # Initialize count of '8's and pages\n    count_8, pages = 0, 0\n\n    while count_8 < 22:\n        pages += 1\n        count_8 += str(pages).count('8')\n        \n    return pages\n\nans = solution()"
    ],
    "35f3ac45fb9a416cab9f6a6f3d80fc88": [
        "def solution():\n    return -7 + -3\n\nans = solution()"
    ],
    "9138c2779a554688a69ae241821b9044": [
        "def solution():\n    ans = 3280 / 1000\n    return ans\n\nans = solution()"
    ],
    "64953fb1208e4686b70662072858e299": [
        "def solution():\n    principal = 800\n    rate = 0.08\n    time = 3\n\n    simple_interest = principal * rate * time\n\n    return simple_interest\n\nans = solution()"
    ],
    "c1a30ce92e014b75b30b4b0d41e23b10": [
        "def solution():\n    day_climb = 3\n    night_slide = 1\n    distance_to_climb = 9\n    total_climbed = 0\n    day = 0\n\n    while total_climbed < distance_to_climb:\n        day += 1\n        total_climbed += day_climb\n        if total_climbed >= distance_to_climb:\n            break\n        total_climbed -= night_slide\n    return day\n\nans = solution()"
    ],
    "91aac3f6cd314824a5ff7ae8d57ba16f": [
        "def solution():\n    total_students = 44\n    math_competition = 30\n    art_competition = 26\n\n    # Using the inclusion-exclusion principle\n    both_competitions = math_competition + art_competition - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "0222cefe72d14af08beade5cd8d39234": [
        "def solution():\n    lucy_sleep = 8\n    mary_sleep = lucy_sleep + 2\n    return mary_sleep\n\nans = solution()"
    ],
    "6ba693d3debc40ffbe091f4a2e915e1a": [
        "def solution():\n    # To ensure getting 29 balls of one color and 28 balls of another, in the worst case,\n    # one has to pick out all balls of the third color plus the required amount of the other two\n    # Subtract 1 from 29 and 28 because the last picked ball will complete the count to 29 or 28.\n    total_balls_needed = 30 + (29 - 1) + (28 - 1)\n\n    return total_balls_needed\n\nans = solution()"
    ],
    "d4270b64c9444e9bae6186f03a8dd3cf": [
        "def solution():\n    height_england_mountain = 978\n    height_world_highest_mountain = 8848\n    \n    difference = height_world_highest_mountain - height_england_mountain\n    \n    return difference\n\nans = solution()"
    ],
    "c159c9b51b5641cb9fe4bd410317a6b6": [
        "def solution():\n    from sympy import isprime\n\n    for number in range(10, 50):\n        if number % 3 == 2 and isprime(number) and (number - 2) % 5 == 0:\n            return number\n\nans = solution()"
    ],
    "7fccc27dfac64e26ac8313027c062718": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(6 * 1.5 + 4 * x, 19)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "2234f3644e4744e1abe7c224874b8458": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(2 * (x + 3), 30)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ba39e5d277a84ab58e881af5d3bc8aa5": [
        "def solution():\n    product = 2*2*3*8*5*5*5\n    count_zeros = 0\n    \n    while product % 10 == 0:\n        count_zeros += 1\n        product = product // 10\n    \n    return count_zeros\n\nans = solution()"
    ],
    "1fef03e615784d6ab50b1a8664c3bed8": [
        "def solution():\n    # Any factorial greater than or equal to 10! will end in a 0\n    # since it will include the factors 2 and 5 (which make up 10).\n    # Therefore, the last digit of 2014! will be 0.\n    return 0\n\nans = solution()"
    ],
    "20985347da3c477badaed88276511692": [
        "def solution():\n    ans = 0.64 * 10\n    return ans\n\nans = solution()"
    ],
    "873d86ac5c8b42ebb89adf32077600aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables in terms of the amount of money each person started with\n    alicia, beth, casey = symbols('alicia beth casey')\n\n    # Creating equations based on the problem statement\n    equation1 = Eq(alicia / 2 + beth - 60 + 3 * (alicia / 2), 900)  # Total money after spending\n    equation2 = Eq(alicia - alicia / 2, beth - 60)                    # Alicia has same amount as Beth left\n    equation3 = Eq(alicia - alicia / 2, casey - 3 * (alicia / 2))     # Alicia has same amount as Casey left\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (alicia, beth, casey))\n\n    return solutions[alicia]\n\nans = solution()"
    ],
    "06b709845181421a902cea1ac8c94213": [
        "def solution():\n    # Find the number that 30 must be divided by to get the same value as 6/20.\n    ans = (30 * 20) / 6\n    return int(ans)\n\nans = solution()"
    ],
    "788387594b6e4c5eba7e277ec7c07b6e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the number we're looking for\n    x = symbols('x')\n    \n    # Translate the word problem into an equation, working backwards\n    # Starting from the final answer which is 1\n    equation = Eq((((x + 6) * 3) / 8) - 8, 1)\n\n    # Solving the equation for x\n    solution = solve(equation, x)\n\n    # Returning the solution\n    return solution[0]\n\nans = solution()"
    ],
    "1406508f604a4d8b99426de2592c46fd": [
        "def solution():\n    original_number = symbols('original_number')\n    new_number = 10 * original_number\n    equation = Eq(original_number + new_number, 253)\n    solution = solve(equation, original_number)\n    return solution[0]\n\nans = solution()"
    ],
    "c8ac5b12c5ef4250bf78a994cef11a8c": [
        "def solution():\n    initial_seashells = 380\n    given_to_sister = 35\n    given_to_friend = 23\n    picked_seashells = 70\n    boxes = 8\n\n    remaining_seashells = initial_seashells - given_to_sister - given_to_friend + picked_seashells\n    seashells_per_box = remaining_seashells // boxes\n\n    return seashells_per_box\n\nans = solution()"
    ],
    "1f1415e1ba0e473686320bc1228072ad": [
        "def solution():\n    result = 18 / 100 * 250\n    return result\n\nans = solution()"
    ],
    "ef204ac96744497b958e9e43d91d62c7": [
        "def solution():\n    for num in range(1, 90):\n        if (num % 9 == 0) and ((num - 1) in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89]) and ((num + 1) % 5 == 0):\n            return num\n\nans = solution()"
    ],
    "1cc6abdd4aa14ca3ba0c0f221bc83033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cayden, sicheng, yixuan = symbols('cayden sicheng yixuan')\n\n    equation1 = Eq(cayden, sicheng + 6)\n    equation2 = Eq(yixuan, 2 * cayden)\n    equation3 = Eq(yixuan, sicheng + 22)\n    \n    solutions = solve((equation1, equation2, equation3), (cayden, sicheng, yixuan))\n\n    total_questions = solutions[cayden] + solutions[sicheng] + solutions[yixuan]\n\n    return total_questions\n\nans = solution()"
    ],
    "fbb644a513c74c369072437e70b25c4b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(56 - 4 * (20 - 6 * x), 48)\n    solution = solve(equation)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ac96959c816f40b994c3095a95678430": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of cookies he ate on the first day\n    x = symbols('x')\n\n    # The total number of cookies eaten over 5 days is the sum of an arithmetic series\n    # The nth term of the sequence can be expressed as x + (n-1)*difference, where difference is 6\n    # The sum of the arithmetic series is (n/2) * (first_term + last_term)\n    \n    first_term = x\n    last_term = x + (5-1)*6  # Last day\n    n = 5  # Number of terms\n\n    # The arithmetic sum formula S_n = n/2 * (a_1 + a_n)\n    total_sum = (n / 2) * (first_term + last_term)\n\n    # Equation for the total number of cookies eaten\n    equation = Eq(total_sum, 100)\n\n    # Solve the equation for x, the number of cookies eaten on the first day\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "84593b3ba13b4e8a80ff8451f501055f": [
        "def solution():\n    count = 0\n    for i in range(1, 481):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "5d03707100c24bec944429cac593007c": [
        "def solution():\n    from math import factorial\n    # There are 4 men and 4 women\n    men_ways = factorial(4)  # 4 men can be arranged in 4! ways\n    women_ways = factorial(4)  # 4 women can be arranged in 4! ways\n    # Men and women will alternate and there are 2 ways to choose who starts (man or woman)\n    starting_options = 2\n    # Multiply all the possibilities\n    total_ways = men_ways * women_ways * starting_options\n    return total_ways\n\nans = solution()"
    ],
    "e93a2e8d34fe4c5d88042e9cb1dc1359": [
        "from math import factorial\n\ndef solution():\n    total_letters = len(\"HAPPY\")\n    repeat_p = 2  # The letter 'P' repeats twice\n\n    arrangements = factorial(total_letters) // factorial(repeat_p)\n    return arrangements\n\nans = solution()"
    ],
    "c872f5bf2c784f41bccb9e92a97425cc": [
        "def solution():\n    n = 96\n    factors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors += 1\n    return factors\n\nans = solution()"
    ],
    "f447d86af6a24aefb4ec7afe8f748ab6": [
        "def solution():\n    cost_per_roll_ali = 2.40 / 8\n    cost_per_roll_mya = 2 * cost_per_roll_ali\n    cost_for_three_rolls_mya = 3 * cost_per_roll_mya\n    return cost_for_three_rolls_mya\n\nans = solution()"
    ],
    "e041fe632ffb4b6c9323daa6940df30a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ashley, crystal, justin = symbols('ashley crystal justin')\n\n    equation1 = Eq(crystal, 2 * ashley)\n    equation2 = Eq(justin, 10 * ashley)\n    equation3 = Eq(justin, crystal + 72)\n\n    solutions = solve((equation1, equation2, equation3), (ashley, crystal, justin))\n\n    total_pages = solutions[ashley] + solutions[crystal] + solutions[justin]\n\n    return total_pages\n\nans = solution()"
    ],
    "6a2c78cfdb9a4d7fb383272b52cd59ee": [
        "def solution():\n    # Number of girls in the class\n    girls = 12\n\n    # Since 2/5 of the class are boys, the remaining (1 - 2/5) are girls\n    fraction_of_girls = 1 - (2 / 5)\n\n    # Total number of students in the class\n    total_students = girls / fraction_of_girls\n\n    # Therefore, the number of boys is 2/5 of the total number of students\n    boys = (2 / 5) * total_students\n\n    return int(boys)\n\nans = solution()"
    ],
    "64993852492147cc8482c078cd34b38e": [
        "def solution():\n    return 0.60 * 0.10 * 900\n\nans = solution()"
    ],
    "c8a3ce14a35a4261ab029e2433bd676a": [
        "def solution():\n    people_in_front_of_peter = 9\n    people_behind_john = 10\n    # Since Peter is in front of John, there is no gap between them.\n    # So, the total people is people in front of Peter, Peter himself, John, and people behind John.\n    total_people = people_in_front_of_peter + 1 + 1 + people_behind_john\n    \n    return total_people\n\nans = solution()"
    ],
    "1beeabbc07d5419182360e392e6e8167": [
        "def solution():\n    future_value = 870\n    annual_interest_rate = 0.09\n    years = 5\n\n    present_value = future_value / ((1 + annual_interest_rate) ** years)\n    return present_value\n\nans = solution()"
    ],
    "d83742ad1ef8454dbe6712dd724e0f28": [
        "def solution():\n    ans = 0\n    for i in range(50, 31, -2):\n        ans += i - (i-2)\n    return ans\n\nans = solution()"
    ],
    "f53340cd1b0242cc909e54dbf5f9c740": [
        "from itertools import permutations\n\ndef solution():\n    # Since O is a digit in a two-digit number NO, it can't be 0.\n    # N is a digit in the tens place, so it can't be 0 either.\n    for N, O in permutations(range(1, 10), 2):\n        NO = int(f'{N}{O}')\n        ON = int(f'{O}{N}')\n        if (NO + ON) == 121:\n            return NO\n\nans = solution()"
    ],
    "89b6ad1ba96b49799186cb97be8ced41": [
        "def solution():\n    departure_time = 12  # Noon in 12-hour format\n    flight_duration = 4  # Hours\n    time_difference = 3  # Hours ahead from England to St Petersburg\n\n    arrival_time = departure_time + flight_duration + time_difference\n    if arrival_time >= 24:\n        arrival_time -= 24  # Convert to 24-hour format if it exceeds 24 hours\n\n    return arrival_time % 24\n\nans = solution()"
    ],
    "9080a0bc912a4dbd8b2d995a6f90476f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1,2), (2,3), (3,4), (4,5)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "d03ade3a4dd74e8080364bf4014a629f": [
        "def solution():\n    # Number of socks for each color\n    num_colors = 3\n    \n    # Maximum socks to pick without guaranteed pair can be picking one of each color\n    max_without_pair = num_colors\n\n    # One more pick ensures at least one pair of the same color by pigeonhole principle\n    socks_to_pick_for_pair = max_without_pair + 1\n\n    return socks_to_pick_for_pair\n\nans = solution()"
    ],
    "fddfd48467ab4e0fb6a8660a9290dacd": [
        "def solution():\n    kg_to_g = 1000  # 1 kg = 1000 g\n    ans = 2.5 * kg_to_g\n    return ans\n\nans = solution()"
    ],
    "819144d05ae94a409b2ad0fa501b330e": [
        "def solution():\n    ans = 2 / 0.1\n    return ans\n\nans = solution()"
    ],
    "19e25948a6f64404bdc6be96b3c341cf": [
        "def solution():\n    product = 1\n    for i in range(2, 51):\n        product *= (1/i - 1/(51-i))\n    return product\n\nans = solution()"
    ],
    "a5de38fa67a44419bc522d068fd7f25f": [
        "def solution():\n    scale_ratio_cm_to_km = 5 / 1  # 5 cm represents 1 km\n    distance_on_map_cm = 12\n\n    # Calculate the distance on the ground by using the scale ratio\n    distance_on_ground_km = (distance_on_map_cm / scale_ratio_cm_to_km)\n  \n    return distance_on_ground_km\n\nans = solution()"
    ],
    "662c78fcaea44e82bcb9bf7c3df9c9b4": [
        "def solution():\n    total_sweets = 360\n    fraction_boys = 3 / 8\n    sweets_per_boy = 4\n    sweets_per_girl = 12\n    \n    # Number of boys = fraction_boys * total_children\n    # Number of girls = total_children - Number of boys\n    # Total sweets = sweets_per_boy * Number of boys + sweets_per_girl * Number of girls\n    # We combine the above equations to solve for Number of girls:\n    \n    # Let's denote total_children as x\n    # sweets_per_boy * fraction_boys * x + sweets_per_girl * (x - fraction_boys * x) = total_sweets\n    # We solve for x to find total_children, and then calculate Number of girls\n    \n    x = total_sweets / (sweets_per_boy * fraction_boys + sweets_per_girl * (1 - fraction_boys))\n    num_girls = x - fraction_boys * x\n    return int(num_girls)\n\nans = solution()"
    ],
    "8162588281f2442aaf05ae898f61facb": [
        "def solution():\n    speed_kph = 7.2\n    time_seconds = 24\n\n    speed_mps = (speed_kph * 1000) / 3600\n    distance_meters = speed_mps * time_seconds\n\n    return distance_meters\n\nans = solution()"
    ],
    "69e401d76eff4dc0a2cbc3608563a312": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack, jimmy, tommy = symbols('jack jimmy tommy')\n\n    equation1 = Eq(jimmy, jack + 7)\n    equation2 = Eq(tommy, 3 * jimmy)\n    equation3 = Eq(jack + jimmy + tommy, 43)\n\n    solutions = solve((equation1, equation2, equation3), (jack, jimmy, tommy))\n\n    return solutions[tommy]\n\nans = solution()"
    ],
    "3d8744d18dd54cbea1b1412a084ed5ef": [
        "def solution():\n    # 1 is a positive integer but it is neither prime nor composite\n    # Therefore, Pip's statement is not entirely correct.\n    # A composite number is a positive integer greater than 1 that is not prime.\n    \n    pip_is_correct = False\n    return pip_is_correct\n\nans = solution()"
    ],
    "0ecf6bcd64b5409797eb1c22fd967682": [
        "def solution():\n    total_students = 93\n    students_math = 70\n    students_foreign_language = 54\n\n    # Using the Inclusion-Exclusion Principle to find students taking both classes\n    both_classes = (students_math + students_foreign_language) - total_students\n\n    # Finding students taking only a math class\n    only_math = students_math - both_classes\n\n    return only_math\n\nans = solution()"
    ],
    "0e5f8af3ee36434c8fc6f0d54e0b0332": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number be 'n'\n    n = symbols('n')\n\n    # The system of congruences can be written as:\n    # n % 7 == 5\n    # n % 8 == 6\n    # n % 10 == 6\n\n    # Convert the congruences into equations\n    eq1 = Eq(n % 7, 5)\n    eq2 = Eq(n % 8, 6)\n    eq3 = Eq(n % 10, 6)\n\n    # We also know that the sum of the quotients is 265\n    # Which implies (n//6) + (n//7) + (n//8) = 265\n    eq4 = Eq(n//6 + n//7 + n//8, 265)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4), n)\n\n    # Return the solution that is a positive integer, since n must be a positive number\n    for sol in solutions:\n        if sol.is_integer and sol > 0:\n            return sol\n\nans = solution()"
    ],
    "fcaab3458b0540ffaf17a8b8e46d47e3": [
        "def solution():\n    # Initialize the result as 1 (multiplicative identity)\n    result = 1\n    \n    # Multiply the terms from 1 1/2 to 1 1/9\n    for denominator in range(2, 10):\n        # Convert mixed fraction to improper fraction and multiply\n        result *= (1 + 1/denominator)\n        \n    return result\n\nans = solution()"
    ],
    "c0b29d7381404f04ba70d03ba52e2056": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(((1/3) - 0.25) * x, 36)\n\n    sol = solve(equation, x)\n\n    return sol[x]\n\nans = solution()"
    ],
    "97f9b3cd0d1f4ef49d372ccb5e9623ef": [
        "def solution():\n    kasia_keeps = 13\n    sweets_to_share = 42 - kasia_keeps\n    sweets_per_friend = sweets_to_share // 2\n    lucie_gives_to_joan = sweets_per_friend * (2/7)\n    lucie_keeps = sweets_per_friend - lucie_gives_to_joan\n    return int(lucie_keeps)\n\nans = solution()"
    ],
    "fc12020bb86948df82cb6bfbc58da724": [
        "def solution():\n    additional_number = 0\n    while True:\n        additional_number += 1\n        if str(additional_number + 40309) == str(additional_number + 40309)[::-1]:\n            break\n    return additional_number\n\nans = solution()"
    ],
    "5acf29084a144a8c9e6e54ea27130ca2": [
        "from itertools import combinations\n\ndef solution():\n    # the total number of balloons is 12, and we are to divide them into\n    # 4 distinct groups. An efficient way to do this is to first generate all\n    # the combinations of 3 positive integers that sum up to 12,\n    # since the 4th number can be determined by subtracting the sum of the three\n    # from 12.\n\n    # The groups need to contain different numbers of balloons, so 0 is not allowed.\n    # Start from 1 because each of the 4 piles needs to have at least one balloon\n    # and go up to 12 - 3 = 9 since we need to leave at least 1 balloon for each of the\n    # remaining 3 groups.\n\n    possible_combinations = combinations(range(1, 10), 3)\n    \n    count = 0\n    for combination in possible_combinations:\n        if sum(combination) < 12:  # Check if the total balloons is less than 12\n            count += 1\n    \n    return count\n\nans = solution()"
    ],
    "36cde50d7411407280da3e197b3728f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 + 2 * (9 - x), 4 * (x - 5) + 5)\n    \n    ans = solve(equation, x)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "8f11aa1d0d264d7fbdcc09d8264a8c74": [
        "def solution():\n    boys_excess = 52\n    total_students = 0\n\n    # Start guessing the total number of layers (which will be even for more boys)\n    layer = 1  # Start with one boy layer\n    while True:\n        boys = ((layer * 2) + 1) ** 2  # Total boys for the current layer count\n        girls = ((layer * 2) - 1) ** 2  # Total girls for the current layer count\n        boys_diff = boys - girls\n        if boys_diff == boys_excess:\n            total_students = boys + girls\n            break\n        layer += 1\n\n    return total_students\n\nans = solution()"
    ],
    "0239fb4bde9f47c69180ca8669502d62": [
        "def solution():\n    ans = 42768 / 120\n    return ans\n\nans = solution()"
    ],
    "0c7a535a8f1e4491b32b1e1b1639b03a": [
        "def solution():\n    # Let X be the number of litres the tank can hold\n    # Using 5-litre pail, X + 4 (overflow) is divisible by 5\n    # Using 3-litre pail, X - 4 (4 more pails needed) is divisible by 3\n\n    for x in range(1, 1000):  # Assuming the fish tank is not extremely large\n        if (x + 4) % 5 == 0 and (x - 4) % 3 == 0:\n            return x\n\nans = solution()"
    ],
    "6326923a95f047bdabd68344659c4d65": [
        "def solution():\n    # Total number of people on the bus\n    total_people = 20\n    # Ratio of adults to children\n    ratio_adults_to_children = 1 / 4\n    # Calculate the number of adults\n    number_of_adults = total_people / (1 + 4)\n    return int(number_of_adults)\n\nans = solution()"
    ],
    "ff1dd3113eea4badb05fc22604f4f410": [
        "def solution():\n    # Let's denote the total pension as 'p'.\n    # On Friday, granddad spends 1/4 of his weekly pension, so he spends p/4.\n    # The remaining pension after Friday is p - p/4 = (3/4)p.\n    # On Saturday, he spends 1/3 of the remaining pension, which is (1/3)*(3/4)p = (1/4)p.\n    # The pension left after Saturday is the remaining pension after Friday minus the amount spent on Saturday,\n    # which is (3/4)p - (1/4)p = (2/4)p = (1/2)p.\n    # This is the fraction of his pension granddad has left for the rest of the week.\n\n    return 1/2\n\nans = solution()"
    ],
    "e7cedcf4f50346fda3609ffc82271bcb": [
        "def solution():\n    num_school_bags = 3\n    num_pencil_boxes = 4\n    \n    total_combinations = num_school_bags * num_pencil_boxes\n    \n    return total_combinations\n\nans = solution()"
    ],
    "ca97262fc9e040ea9a7f04b576f910a7": [
        "def solution():\n    ginkgo_trees = 30\n    willow_trees_needed = ginkgo_trees - 1\n    return willow_trees_needed\n\nans = solution()"
    ],
    "b7159096815a4a038b3ffdc419ce649d": [
        "def solution():\n    recurring_sequence = \"6129043\"\n    sequence_sum = sum(int(digit) for digit in recurring_sequence)\n    full_cycles = 212 // len(recurring_sequence)  # How many full cycles of the recurring sequence\n    partial_cycle_digits = 212 % len(recurring_sequence)  # Digits in the incomplete cycle at the end\n\n    # Sum of digits in all full cycles plus the sum of digits in the last partial cycle\n    total_sum = full_cycles * sequence_sum + sum(int(recurring_sequence[i]) for i in range(partial_cycle_digits))\n\n    return total_sum\n\nans = solution()"
    ],
    "00fd88a6512946ba898e3274c1c81239": [
        "def solution():\n    for n in range(1, 100):  # a reasonable range to check for\n        if (n + 1) * (n + 1) == n * n + 31:\n            return (n + 1) * (n + 1)\n\nans = solution()"
    ],
    "8e60fa08b0204229a54c896f7f2968fa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let a be the number of apples, and p be the number of pears initially\n    a, p = symbols('a p')\n\n    # The ratio of apples to pears is 3:4\n    equation1 = Eq(a/p, 3/4)\n\n    # After replacing 36 pears with 36 apples, the number of apples becomes 1.5 of number of pears\n    # New number of apples is a + 36\n    # New number of pears is p - 36\n    # New ratio is (a + 36):(p - 36) = 1.5:1\n    equation2 = Eq((a + 36)/(p - 36), 1.5)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (a, p))\n\n    return solutions[a]\n\nans = solution()"
    ],
    "1aa4173baac54897a1633d0cb7b950ea": [
        "def solution():\n    percentage = 36\n    value = 50\n    result = (percentage / 100) * value\n    return result\n\nans = solution()"
    ],
    "fbf9b992307b444eb938a67abf0f79d0": [
        "def solution():\n    result = (2/3) * 729\n    return result\n\nans = solution()"
    ],
    "8f5505c28f074abd9d90140697874060": [
        "def solution():\n    people = 12\n    handshakes = people * (people - 1) // 2\n    return handshakes\n\nans = solution()"
    ],
    "c54762ddbeef45b193a20da66e6829f5": [
        "def solution():\n    # The condition that the product of n whole numbers has twenty eight consecutive zeros at the end\n    # means that we have 28 factors of 10 within the product. Since 10 = 2 * 5, the number\n    # of zeros is determined by the number of pairs of 2's and 5's factors.\n    # There are always more 2's than 5's in a factorial, so we just need to count the number of 5's.\n    \n    n = 1\n    count_fives = 0\n    \n    # We find the largest number of n such that the factorial n! has at least 28 factors of 5\n    while count_fives < 28:\n        n += 1\n        # We check the current n for factors of 5\n        temp = n\n        while temp % 5 == 0:\n            count_fives += 1\n            temp //= 5\n    \n    return n\n\nans = solution()"
    ],
    "e45422d20b09414ca93da798ae6e4103": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam = symbols('sam')  # Define the symbol for Sam's current age\n    equation = Eq(sam + 4, 2 * (sam - 4))  # Create the equation based on the problem statement\n    \n    # Solve the equation for Sam's current age\n    sam_age = solve(equation, sam)\n    \n    # Return Sam's age as an integer (since age is a whole number)\n    return int(sam_age[0])\n\nans = solution()"
    ],
    "43bd21f970c34177be1554432de294ca": [
        "def solution():\n    total_lemonade_cost = 5 * 1.09\n    total_chocolate_cost = 6 * 0.55\n    total_cost = total_lemonade_cost + total_chocolate_cost\n    change = 10 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "3b9a5ab85be34057a1a3e3b571572c35": [
        "def solution():\n    # To guarantee two pairs of matching socks with the same colour, we \n    # must consider the worst case scenario using the pigeonhole principle.\n\n    # If Daniel picks one of each color first, he gets:\n    # 9 yellow (Y), 7 green (G), 4 white (W), 2 red (R), 1 black (B)\n    # Worst case picks for each color to not get a pair: Y + G + W + R + B = 1 + 1 + 1 + 1 + 1 = 5\n\n    # After that, no matter what color he picks, he will have a pair, so add 1 more pick (sixth pick)\n    # But we need two pairs of the same color.\n\n    # Since red and black have fewer socks, he can pick them without getting two pairs of the same color,\n    # So include all red and black: R + B = 2 + 1 = 3\n\n    # Now add the sixth pick which guarantees at least one pair:\n    # Y + G + W + R + B + 1 (Sixth pick for one pair of any color) = 5 + 1 = 6\n\n    # Finally, for the next pick, he can again pick from yellow, green, or white, which guarantees \n    # two pairs of the same color (since one pair is already there). So add 1 more pick (seventh pick).\n    # Total picks = previous total + 1 (Seventh pick for second pair) = 6 + 1 = 7\n\n    # Thus, the smallest number of socks Daniel must pick to be sure he has two pairs of matching \n    # socks with the same colour is 7.\n\n    return 7\n\nans = solution()"
    ],
    "11a8c054bda64d72bdfd6571d70646f1": [
        "from itertools import permutations\n\ndef solution():\n    # Generate all permutations of the digits\n    digits = ['3', '7', '2', '8']\n    permutes = [''.join(p) for p in permutations(digits)]\n    \n    # Filter out even numbers and convert to integers\n    odd_numbers = [int(p) for p in permutes if int(p) % 2 != 0]\n    \n    # Find the smallest odd number\n    smallest_odd = min(odd_numbers)\n    \n    return smallest_odd\n\nans = solution()"
    ],
    "de33ae344c7942fbb4e480c5ae79a90e": [
        "def solution():\n    return 492.9 + 73.521 + 32.12\n\nans = solution()"
    ],
    "1b74b0ce31ca43179e9aa5db9f92ec32": [
        "from math import factorial\n\ndef solution():\n    total_letters = 7  # Total letters in \"RAINBOW\"\n    vowel_count = 3    # Number of vowels in \"RAINBOW\": A, I, O\n    consonant_count = total_letters - vowel_count  # Number of consonants\n\n    # Total ways to arrange the consonants R, N, B, W\n    consonant_arrangements = factorial(consonant_count)\n\n    # Total places where vowels can be put = consonants + 1\n    vowel_places = consonant_count + 1\n\n    # Total ways to arrange the vowels in the given places\n    # Since vowels can't be together, subtract the ways in which vowels are together from the total\n    total_vowel_arrangements = factorial(vowel_count)\n    ways_vowels_together = factorial(vowel_places - 1) * factorial(vowel_count)\n\n    # Total number of arrangements\n    total_arrangements = consonant_arrangements * (total_vowel_arrangements - ways_vowels_together)\n\n    return total_arrangements\n\nans = solution()"
    ],
    "0143483f1edf4af3a803bb1221bcb8e1": [
        "def solution():\n    for num in range(10, 21):\n        if num % 4 == 0 and 36 % num == 0:\n            return num\n\nans = solution()"
    ],
    "43d937a1a1ef47ef8b56b4494d1b2a22": [
        "def solution():\n    ans = 3.462 / 0.3\n    return ans\n\nans = solution()"
    ],
    "3fb10b4abb524d58afc63043c1689553": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    x = symbols('x')\n\n    # Create the equation according to the problem\n    equation = Eq(0.15 * x - 0.25 * (1000 - x), -50)\n    \n    # Solve the equation\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ed6e120cf0bc499d8e4a9bf4a9c4fd73": [
        "def solution():\n    n1 = 10\n    sum_n1 = 20\n    n2 = 30\n    sum_n2 = 90\n\n    # Using the sum of arithmetic progression formula: sum_n = n/2 * (2a + (n - 1)d)\n    # where sum_n is the sum of first n terms, a is the first term, and d is the common difference\n    # We have two equations and two unknowns (a and d)\n    # sum_n1_10 = n1/2 * (2a + (n1 - 1)d)\n    # sum_n2_30 = n2/2 * (2a + (n2 - 1)d)\n\n    # Let's first solve these equations in terms of d\n    # sum_n1 = n1/2 * (2a + (n1 - 1)d) => 2 * sum_n1 / n1 = 2a + (n1 - 1)d\n    # sum_n2 = n2/2 * (2a + (n2 - 1)d) => 2 * sum_n2 / n2 = 2a + (n2 - 1)d\n\n    # Subtract the two equations to eliminate a:\n    # (2 * sum_n2 / n2) - (2 * sum_n1 / n1) = ((n2 - 1)d - (n1 - 1)d)\n    # d * ((n2 - n1) + (1 - 1)) = (2 * sum_n2 / n2) - (2 * sum_n1 / n1)\n    # d = ((2 * sum_n2 / n2) - (2 * sum_n1 / n1)) / (n2 - n1)\n\n    d = ((2 * sum_n2 / n2) - (2 * sum_n1 / n1)) / (n2 - n1)\n\n    return d\n\nans = solution()"
    ],
    "dab22ef1b9474ab2b0ebf64fe8f912d5": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (3, 5), (4, 7)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "c0f56c7d52444d1a9b65ef7a1513a044": [
        "def solution():\n    ans = 128 - 54\n    return ans\n\nans = solution()"
    ],
    "1b32f8e585fc46068085a2478636e072": [
        "def solution():\n    jess_time = 18\n    jo_time = jess_time - 6\n    mary_time = jo_time + 4\n\n    return mary_time\n\nans = solution()"
    ],
    "d900be8e099f4d49838cded0aec8d0e8": [
        "def solution():\n    total_stickers = 117\n    ratio_amy = 5\n    ratio_penny = 4\n    total_ratio = ratio_amy + ratio_penny\n    stickers_penny = (total_stickers * ratio_penny) / total_ratio\n    return int(stickers_penny)\n\nans = solution()"
    ],
    "35c1ed41867c49dfb5f6c880fb136ac2": [
        "def solution():\n    count = 0\n    for i in range(1, 151):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "36e844fd0400420f989f1166d3df56c7": [
        "def solution():\n    words_per_minute = 125\n    minutes = 9\n    days = 6\n\n    words_in_9_minutes = words_per_minute * minutes\n    words_in_6_days = words_in_9_minutes * days\n\n    return words_in_6_days\n\nans = solution()"
    ],
    "921b2f01420749da85075867e970dacb": [
        "def solution():\n    speed_kph = 3.6  # speed in kilometers per hour\n    time_seconds = 300  # time in seconds\n    # Convert speed to meters per second (1 kilometer = 1000 meters; 1 hour = 3600 seconds)\n    speed_mps = speed_kph * (1000 / 3600)\n    # Calculate the distance walked in meters\n    distance_meters = speed_mps * time_seconds\n    return distance_meters\n\nans = solution()"
    ],
    "104a46795ca64208939686b66fb9a82e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of chickens, goats, and cows.\n    chickens, goats, cows = symbols('chickens goats cows')\n\n    # Define the equations based on the problem statement.\n    equation1 = Eq(chickens + goats, 40)  # chickens + goats = 40\n    equation2 = Eq(3 * chickens, 5 * cows)  # 3 times chickens = 5 times cows\n    equation3 = Eq(2 * goats, 10 * cows)  # 2 times goats = 10 times cows\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2, equation3), (chickens, goats, cows))\n\n    # Calculate the total number of feet.\n    # Chickens have 2 feet, goats have 4 feet, and cows have 4 feet.\n    total_feet = 2 * solutions[chickens] + 4 * solutions[goats] + 4 * solutions[cows]\n\n    return total_feet\n\nans = solution()"
    ],
    "b370814add5e431bb51f7d7dac8d3ba5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_apples = symbols('total_apples')\n    \n    equation = Eq(40 / (4/7), total_apples / 2)\n\n    solutions = solve(equation, total_apples)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "6028933632e54b1a828b0f6d3598c001": [
        "def solution():\n    return 200 + 202 + 204 + 206 + 208\n\nans = solution()"
    ],
    "653842c3dbaa4a70846409866d45815a": [
        "def solution():\n    lines = 10\n    parts = 1 + (lines * (lines + 1)) // 2\n    return parts\n\nans = solution()"
    ],
    "44d68779a7c0423eb6e762338b582fca": [
        "def solution():\n    # Let the numbers be a, b, c, d\n    # Given average of a and b\n    average_ab = 10\n    sum_ab = 2 * average_ab\n    \n    # Given average of c and d\n    average_cd = 22\n    sum_cd = 2 * average_cd\n    \n    # Given average of a and d\n    average_ad = 14\n    sum_ad = 2 * average_ad\n    \n    # Since sum_ab + sum_cd = sum_ad + sum_bc (where b and c are the middle numbers)\n    # And we need to find the average of b and c, we have sum_bc\n    sum_bc = sum_ab + sum_cd - sum_ad\n    \n    # Average of b and c\n    average_bc = sum_bc / 2\n    \n    return average_bc\n\nans = solution()"
    ],
    "a754f6b5ebcb4917afb374104733b09e": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['9', '0', '2', '3']\n    closest_num = None\n    closest_diff = float('inf')\n\n    for perm in permutations(digits):\n        num = int(''.join(perm))\n        diff = abs(2978 - num)\n        if diff < closest_diff:\n            closest_diff = diff\n            closest_num = num\n\n    return closest_num\n\nans = solution()"
    ],
    "8da4fb1e422544f0a8b82f886050843b": [
        "def solution():\n    count = 0\n    for number in range(200, 501):\n        if '3' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "5ecddfaa220c43cf8e47b0f83763a84d": [
        "def solution():\n    first_term = 48\n    common_difference = 4\n    \n    # Calculate the number of rows using the formula for the nth term of an arithmetic sequence\n    # last_term = first_term + (num_rows - 1) * common_difference\n    num_rows = ((80 - first_term) / common_difference) + 1\n    \n    # Calculate the sum of an arithmetic series using the formula\n    # sum = (num_rows / 2) * (first_term + last_term)\n    total_seats = (num_rows / 2) * (first_term + 80)\n    \n    return int(total_seats)\n\nans = solution()"
    ],
    "40a9e9bead5546a4a0e08b6e1af8f008": [
        "def solution():\n    result = 50\n    multiplied_by_2 = result + 10\n    original_number = multiplied_by_2 / 2\n    return original_number\n\nans = solution()"
    ],
    "668003c3b4ee4430939bf7445ffe574b": [
        "def solution():\n    factors = [7, 11, 13, 7]  # Prime factors of 7007\n    for i in range(len(factors)):\n        for j in range(i + 1, len(factors)):\n            num1, num2 = 1, 1\n            for k, factor in enumerate(factors):\n                if k == i or k == j:\n                    num1 *= factor\n                else:\n                    num2 *= factor\n            if 10 <= num1 < 100 and 10 <= num2 < 100:\n                return num1 + num2\n\nans = solution()"
    ],
    "fbd5c2b741d540409dda4ac6ae1eefe3": [
        "def solution():\n    A_and_B_average = 22\n    C = 19\n\n    # Since the average of A and B is 22, the sum of A and B is 22 * 2.\n    A_plus_B = A_and_B_average * 2\n\n    # Now we find the total sum of A, B, and C.\n    total_sum = A_plus_B + C\n\n    # The average of A, B, and C would be the total sum divided by 3.\n    average_ABC = total_sum / 3\n\n    return average_ABC\n\nans = solution()"
    ],
    "6b5f28a0da7644bf91c51262467f22af": [
        "def solution():\n    total_coins = 37\n    children = 5\n    remainder = total_coins % children\n    return remainder\n\nans = solution()"
    ],
    "28594ee0096c4c27b6982e846d9415e3": [
        "def solution():\n    from datetime import datetime\n\n    birth_date = datetime(1533, 9, 7)\n    death_date = datetime(1603, 3, 24)\n\n    age = death_date.year - birth_date.year\n    if death_date.month < birth_date.month or \\\n       (death_date.month == birth_date.month and death_date.day < birth_date.day):\n        age -= 1\n\n    return age\n\nans = solution()"
    ],
    "f83aeb54a6454c92abe4a6bb1cd131df": [
        "def solution():\n    for side_length in range(int(23**0.5), 0, -1):\n        if 23 % side_length == 0:\n            return 23 - side_length\n\nans = solution()"
    ],
    "830b4822d207437b89a3a6ce5de16c84": [
        "def solution():\n    expression1 = (21 + 1) * 7\n    expression2 = 20 + (1 * 7)\n    ans = expression1 - expression2\n    return ans\n\nans = solution()"
    ],
    "5532a59da23d4cbea467c1a0cabeb494": [
        "def solution():\n    total_cakes = 50\n    total_layers = 9\n    \n    # Using the Pigeonhole Principle, we divide the cakes over the layers and find the minimum number in the layer with the most cakes\n    cakes_in_most_layer = (total_cakes + total_layers - 1) // total_layers\n    \n    return cakes_in_most_layer\n\nans = solution()"
    ],
    "3fa5ea265a5d4c0297ecf03b1cb17e9d": [
        "def solution():\n    ans = sum((2018 + i) / 5 - ((2018 + i) // 5) for i in range(1, 2019))\n    return ans\n\nans = solution()"
    ],
    "6d5b83fe42184fb9bc959fdc4861c9b3": [
        "def solution():\n    # Let the ages of Chinese, English, and Mathematics teachers be C, E, and M respectively.\n    \n    # From the given information, we have the following equations:\n    # (C + E) / 2 = 34 => C + E = 68\n    # (E + M) / 2 = 36 => E + M = 72\n    # (C + M) / 2 = 44 => C + M = 88\n    \n    # Adding all the equations, we get:\n    # (C + E) + (E + M) + (C + M) = 68 + 72 + 88\n    # 2C + 2E + 2M = 228\n    \n    # Dividing by 2 to find the sum of ages of all three teachers.\n    # C + E + M = 114\n    \n    # The average age of the three teachers together is the sum of their ages divided by 3:\n    avg_age = 114 / 3\n    \n    return avg_age\n\nans = solution()"
    ],
    "01afb46f9dd94497ab3c9968556ca7a1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the difference between the number of cookies in two adjacent boxes be d\n    d = symbols('d')\n    \n    # The number of cookies in the last box (10th box) can be expressed as:\n    # 11 + 9 * d (since there are 9 differences between box 1 and box 10)\n    last_box = 11 + 9 * d\n    \n    # The sum of an arithmetic sequence can be calculated using the formula:\n    # sum = n/2 * (first_term + last_term)\n    # where n is the number of terms\n    n = 10  # because there are 10 boxes\n    \n    # The sum of the sequence is known to be 425:\n    total_sum = 425\n    \n    # Create the equation based on the sum of arithmetic sequence\n    equation = Eq(n/2 * (11 + last_box), total_sum)\n\n    # Solve for d\n    solution = solve(equation, d)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f2e7d75d544640ef95f39ae11d58e429": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, benson = symbols('chelsia benson')\n\n    equation1 = Eq(3/4 * chelsia, 2/3 * benson)\n    equation2 = Eq(benson - chelsia, 18)\n\n    solutions = solve((equation1, equation2), (chelsia, benson))\n\n    total_sum = solutions[chelsia] + solutions[benson]\n\n    return total_sum\n\nans = solution()"
    ],
    "7de9bf80e9294c29a99d27418f478a8e": [
        "from math import factorial\n\ndef solution():\n    total_count = factorial(5)  # total permutations of 5 elements\n    duplicate_count_1 = factorial(2)  # permutations of the two 1s\n    ans = total_count // duplicate_count_1\n    return ans\n\nans = solution()"
    ],
    "65457d2cc6de489f9eda50d81a2a99cd": [
        "def solution():\n    return 12 * 1.99\n\nans = solution()"
    ],
    "a38e073e5c4f4c3f94fc8c0ac26838a1": [
        "def solution():\n    # Let the first number be x, then the rest can be represented\n    # as x+2, x+4, ..., x+12 because these are consecutive odd numbers\n    # The sum of an arithmetic series is n/2 * (first + last)\n    # Here n = 7 because there are 7 terms, and we solve for the first number x\n    # 7/2 * (x + (x + 12)) = 357\n    # 7x + 42 = 357\n    # 7x = 315\n    # x = 45\n    # Thus, the smallest of these numbers is 45\n    \n    total_sum = 357\n    num_terms = 7\n    last_term = total_sum // num_terms * 2 - 12\n    \n    return last_term\n\nans = solution()"
    ],
    "854a818f3b564ec2936328e1204553fa": [
        "def solution():\n    A = 1 / sum(1 / i for i in range(1995, 2009))\n    ans = int(A)\n    return ans\n\nans = solution()"
    ],
    "53f7ab0a979c47e9875a6745078c1158": [
        "def solution():\n    total_students = 300\n    year_5_students = total_students * 3 // 10\n    year_5_girls = year_5_students * 3 // 5\n    return year_5_girls\n\nans = solution()"
    ],
    "d5fb71d8282e4dad9d6f8b784f5145e7": [
        "def solution():\n    for num in range(200, 401):\n        if all(num % d == r for d, r in [(3, 2), (4, 2), (5, 2), (7, 5)]):\n            return num\n\nans = solution()"
    ],
    "3c4de249075d4f07b0fc0c817ff3c58b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for table and chair prices\n    table, chair = symbols('table chair')\n    \n    # Equation 1: 5 tables + 12 chairs = 720\n    equation1 = Eq(5 * table + 12 * chair, 720)\n    \n    # Equation 2: Each table costs $25 more than each chair\n    equation2 = Eq(table, chair + 25)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (table, chair))\n    \n    return solutions[table]\n\nans = solution()"
    ],
    "a6f219bbae8a4dde8e0a10e161120049": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Carter's speed as 'c' and Martin's speed as 'm'\n    c = symbols('c')\n    m = c + 20  # Martin's speed is 20 meters/per minute faster than Carter\n\n    # Since time is inversely proportional to speed, their speeds ratio will be the inverse of time ratio\n    # Time ratio given is Martin:Carter = 9:13, so speed ratio will be Carter:Martin = 13:9\n    equation = Eq(c / m, 13 / 9)\n\n    # Solving the equation to find Carter's speed\n    solution = solve(equation, c)\n\n    return solution[0]\n\nans = solution()"
    ],
    "4b3d2f8a295c449eb0b933dd026b4cf9": [
        "def solution():\n    count = 0\n    for x1 in range(1, 13):\n        for x2 in range(1, 13):\n            for x3 in range(1, 13):\n                if x1 + x2 + x3 == 13:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "985a10206885415abe07e67ad7c806da": [
        "def solution():\n    return 2  # 2 is the only even prime number\n\nans = solution()"
    ],
    "eb64f29a539744afa20fabe47cf4247f": [
        "def solution():\n    # Start with the smallest possible number that satisfies one of the conditions\n    number = 1\n    # Loop until we find a number that satisfies all three conditions\n    while True:\n        if number % 5 == 1 and number % 6 == 1 and number % 7 == 1:\n            return number\n        number += 1\n\nans = solution()"
    ],
    "39314ee04d5249c699fbe6a90a08ea57": [
        "def solution(x):\n    total_cloth = 18\n    cloth_left = total_cloth - x\n    return cloth_left\n\nans = solution(x) # x should be defined with the specific amount used for the dress"
    ],
    "5b0fce7f22474da9ace32b857c116492": [
        "from fractions import Fraction\n\ndef solution():\n    result = Fraction(3) / Fraction(1, 3)\n    return result\n\nans = solution()"
    ],
    "033e1d824bce41289651265703300be3": [
        "def solution():\n    ans = 12636 // 54\n    return ans\n\nans = solution()"
    ],
    "e7dc5d1f98e34b2b9e1ae130e2a988c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    fred = 1 / 9  # Fred's work rate\n    fred_george = 1 / 6  # Combined work rate\n\n    george = symbols('george')\n    equation = Eq(fred + 1 / george, fred_george)\n\n    george_time = solve(equation, george)[0]\n    return george_time\n\nans = solution()"
    ],
    "281326e2a0e3497ca68a17bd591efba8": [
        "def solution():\n    return 543 + 284\n\nans = solution()"
    ],
    "c0b11362a9114743b4f269d706e86245": [
        "def solution():\n    # Worst case: taking out as many apples as possible without getting two of the same color\n    # Take out all the red apples and one yellow apple\n    # As soon as we take one more apple, it has to be either red or yellow, ensuring two of the same color\n\n    apples_taken = 14 + 1  # All red apples and one yellow apple\n    return apples_taken\n\nans = solution()"
    ],
    "0c22c9cf700b49a797234271b1f29ce6": [
        "def solution():\n    return (132 + 68) * (520 - 506)\n\nans = solution()"
    ],
    "90366a7b3e114b0782979eb7a1e2fcf7": [
        "def solution():\n    ways = 5 ** 4\n    return ways\n\nans = solution()"
    ],
    "75543c0d8a344cd8a2e2dae02cbf92b8": [
        "def solution():\n    ans = 2.42 * 1.6\n    return ans\n\nans = solution()"
    ],
    "8af761818c504f10a3169d69baf02a4b": [
        "def solution():\n    # Number of legs for each type of pet\n    legs_per_cat = 4\n    legs_per_dog = 4\n    legs_per_rabbit = 4\n    legs_per_bird = 2\n\n    # Number of each type of pet (except birds)\n    num_cats = 2\n    num_dogs = 2\n    num_rabbits = 1\n\n    # Total number of legs excluding birds\n    total_legs_excluding_birds = (legs_per_cat * num_cats +\n                                  legs_per_dog * num_dogs +\n                                  legs_per_rabbit * num_rabbits)\n\n    # Since total number of legs is 28, calculate legs for birds\n    legs_for_birds = 28 - total_legs_excluding_birds\n\n    # Divide legs by number of legs per bird to find number of birds\n    num_birds = legs_for_birds // legs_per_bird\n\n    return num_birds\n\nans = solution()"
    ],
    "d7922e5e4a59420081b76bfba68dfc63": [
        "def solution():\n    # Let x be the number of red pens sold\n    # Initial ratio of red pens to black pens is 3 : 7\n    # Let the initial number of red pens be 3y and black pens be 7y\n    \n    # After selling x red pens and x black pens, the remaining are:\n    # Red pens: 3y - x\n    # Black pens: 7y - x\n    \n    # The final ratio of red pens to black pens is 5 : 13, so we have\n    # (3y - x) / (7y - x) = 5 / 13\n    \n    # There were 20 red pens in the end, so:\n    # 3y - x = 20\n    \n    # Solving the two equations, we get:\n    # 13(3y - x) = 5(7y - x)\n    # 39y - 13x = 35y - 5x\n    # 39y - 35y = 13x - 5x\n    # 4y = 8x\n    # y = 2x\n    \n    # Replacing y with 2x in the equation 3y - x = 20:\n    # 3(2x) - x = 20\n    # 6x - x = 20\n    # 5x = 20\n    # x = 4\n\n    # The number of red pens sold is 4\n    return 4\n\nans = solution()"
    ],
    "2bbb1e71338f41f6b5859b75e2be3aa2": [
        "def solution():\n    count_5 = 200 // 5\n    count_7 = 200 // 7\n    count_5_and_7 = 200 // (5*7)\n\n    ans = count_5 + count_7 - count_5_and_7\n    return ans\n\nans = solution()"
    ],
    "b3c36c7c2db9474583eeb898917fa090": [
        "def solution():\n    return 27 * 3\n\nans = solution()"
    ],
    "30f6b3c01a03478b9d6e70cbb8b7a3d4": [
        "def solution():\n    # Given that the value was £10,500 after a 5% increase in the first year\n    value_after_first_increase = 10500\n\n    # The original value can be calculated by dividing the increased value by 1.05 (representing a 5% increase)\n    original_value = value_after_first_increase / 1.05\n\n    # After the second year, the house loses 5% of its value\n    # Therefore its value decreases to 95% of the value after the first year\n    value_after_second_decrease = value_after_first_increase * 0.95\n\n    # The amount of profit or loss is the final value minus the original value\n    profit_or_loss = value_after_second_decrease - original_value\n\n    return profit_or_loss\n\nans = solution()"
    ],
    "3eeca15404314eae896ffb6e5ded37b1": [
        "def solution():\n    factors_of_42 = [i for i in range(1, 43) if 42 % i == 0]\n    for factor in factors_of_42:\n        if 10 < factor < 20:\n            return factor\n\nans = solution()"
    ],
    "8abbe2b1899a4c2e80f9586a6a4dca94": [
        "def solution():\n    total_numbers = 4  # There are four numbers including the unknown one\n    known_numbers_sum = 8 + 3 + 9  # The sum of the known numbers\n    average = 6  # Given average of all numbers\n\n    # To find the total sum of all four numbers we multiply the average by the number of numbers\n    total_sum = average * total_numbers\n\n    # The unknown number is the total sum less the sum of the known numbers\n    unknown_number = total_sum - known_numbers_sum\n\n    return unknown_number\n\nans = solution()"
    ],
    "465d94564aeb464d90ec7faaf9940c3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pen_price, ruler_price = symbols('pen_price ruler_price')\n\n    # 2 rulers and 9 pens for $21.60\n    equation1 = Eq(2 * ruler_price + 9 * pen_price, 21.60)\n    # A ruler costs $0.90 more than a pen\n    equation2 = Eq(ruler_price, pen_price + 0.90)\n\n    solutions = solve((equation1, equation2), (pen_price, ruler_price))\n\n    return solutions[ruler_price]\n\nans = solution()"
    ],
    "3e5011dfff4a4b9b81f4caef853a49dc": [
        "def solution():\n    total_weight = 300\n    bag_weight = 12\n    \n    bags_needed = total_weight / bag_weight\n    \n    if not bags_needed.is_integer():\n        bags_needed = int(bags_needed) + 1\n    else:\n        bags_needed = int(bags_needed)\n    \n    return bags_needed\n\nans = solution()"
    ],
    "e85ba3fcd99f4dd3a67b9b4bdac33f3c": [
        "def solution():\n    from sympy import isprime\n\n    for num in range(1, 50):\n        if num % 3 == 2 and isprime(num) and (num - 2) % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "f5b4975343a544e0a0162174eaf7d4af": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1356789'\n    for p in permutations(digits):\n        first_num = int(''.join(p[:3]))\n        second_num = int(''.join(p[3:5]))\n        third_num = int(''.join(p[5:]))\n        if second_num == 2 * first_num and third_num == 4 * first_num:\n            return third_num\n\nans = solution()"
    ],
    "52bf46560c164e7bb42b6bd92f0f48a8": [
        "def solution():\n    result = 1126\n    final_step = result + 50\n    day_of_birth = final_step % 5\n    month_of_birth_times_100 = (final_step - day_of_birth) // 5\n    subtract_twenty = month_of_birth_times_100 + 20\n    after_multiply_by_5 = subtract_twenty // 5\n    after_add_6 = after_multiply_by_5 - 6\n    month_of_birth = after_add_6 // 4\n    return (month_of_birth, day_of_birth)\n\nans = solution()"
    ],
    "f9135cf12fe94650a246bc80d424cf81": [
        "def solution():\n    ans = 24 * 7\n    return ans\n\nans = solution()"
    ],
    "cab2106c28234f39ae49d4baa681fd8d": [
        "def solution():\n    first_term = 4\n    last_term = 400\n    difference = 4\n\n    # Number of terms in one half of the series\n    num_terms_half = ((last_term - first_term) // difference) + 1\n\n    # Sum of one half of the series\n    sum_half = (first_term + last_term) * num_terms_half // 2\n\n    # Total sum of the series (both halves)\n    total_sum = sum_half * 2 - last_term  # subtract last term as it is counted twice\n\n    return total_sum\n\nans = solution()"
    ],
    "3f1a8e5b057c47568af8eaa8c8a7ce10": [
        "def solution():\n    return 729 // 9\n\nans = solution()"
    ],
    "8c8c3f8464b24d8c81c07c35b9ea6792": [
        "def solution():\n    cup_price = 5\n    refill_price = 1\n    total_money = 10\n\n    if total_money < cup_price:\n        return 0  # Cannot even buy one cup\n    \n    # Buy first cup\n    total_money -= cup_price\n    # Count how many refills he can afford with the remaining money\n    num_refills = total_money // refill_price\n\n    # Total number of cups of coke is initial cup + number of refills\n    total_cups = 1 + num_refills\n\n    return total_cups\n\nans = solution()"
    ],
    "ee339de70e1e49448ce55adaeae5eaa7": [
        "def solution():\n    # Calculate the number of peaches one monkey eats per day\n    peaches_per_day_per_monkey = 96 / (3 * 2)\n    \n    # Calculate the total number of peaches 5 monkeys will eat in 4 days\n    total_peaches_5_monkeys_4_days = peaches_per_day_per_monkey * 5 * 4\n    \n    return int(total_peaches_5_monkeys_4_days)\n\nans = solution()"
    ],
    "9e46398b6b5e425abaa591db8be0c422": [
        "from math import factorial\n\ndef solution():\n    story_books = 2\n    comic_books = 3\n    science_books = 4\n    \n    # Calculate permutations for each type of books\n    story_books_perm = factorial(story_books)\n    comic_books_perm = factorial(comic_books)\n    science_books_perm = factorial(science_books)\n    \n    # Calculate permutations for arranging the types of books themselves (3 types)\n    type_arrangements_perm = factorial(3)\n    \n    # Total number of permutations\n    total_permutations = story_books_perm * comic_books_perm * science_books_perm * type_arrangements_perm\n    \n    return total_permutations\n\nans = solution()"
    ],
    "8b8ec14b7a8644c29978ed2f26e00750": [
        "def solution():\n    return 345 * 5\n\nans = solution()"
    ],
    "14c24a868f9148719c30a1b91c427e21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    T = symbols('T')\n    income = 120000\n    tax_paid = 10000\n    # First 50,000 taxed at 6%\n    tax_on_first_50000 = 0.06 * 50000\n    # Remaining amount taxed at 6 + T%\n    remaining_income = income - 50000\n    tax_on_remaining = remaining_income * (0.06 + T/100)\n    \n    # Total tax paid equation\n    equation = Eq(tax_on_first_50000 + tax_on_remaining, tax_paid)\n    \n    # Solve for T\n    T_value = solve(equation, T)[0]\n    return T_value\n\nans = solution()"
    ],
    "3681f2592b314f8ab3a72fc47b8f90bb": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define the symbols for each friend\n    z, x, s = symbols('z x s')\n\n    # Create the equation representing the distribution of ice-creams\n    eq = Eq(z + x + s, 5)\n    \n    # Initialize the count for the number of distributions\n    count = 0\n\n    # Loop through each possible value for Zyan, ensuring at least 1 ice-cream\n    for zyan in range(1, 5):\n        # Loop through each possible value for Xuan Ying, ensuring at least 1 ice-cream\n        for xuan_ying in range(1, 5):\n            # Calculate how many ice-creams SiCheng would get\n            sicheng = 5 - zyan - xuan_ying\n            \n            # Check if SiCheng gets at least 1 ice-cream\n            if sicheng >= 1:\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "8b91281c082e4e1e8991287413079e54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((3.5 / (3*x + 2)) + (2 / (1.5*x + 1)), (4.5 / (5 - 6*x)) - (3 / (2.5 - 3*x)))\n\n    solutions = solve(equation, x)\n\n    return solutions\n\nans = solution()"
    ],
    "e01c74553e6347a3b1a064b18bd7140d": [
        "def solution():\n    # Average spend from Jan to Mar: $450 per month for 3 months\n    jan_to_mar = 450 * 3\n\n    # Average spend from Apr to Jul: $350 per month for 4 months\n    apr_to_jul = 350 * 4\n\n    # Total spend from Aug to Oct: $1250\n    aug_to_oct = 1250\n\n    # Average spend from Nov to Dec: $400 per month for 2 months\n    nov_to_dec = 400 * 2\n\n    # Total spend for the year\n    total_spend = jan_to_mar + apr_to_jul + aug_to_oct + nov_to_dec\n\n    # Total number of months\n    total_months = 12\n\n    # Average spend per month from January to December\n    average_per_month = total_spend / total_months\n\n    return average_per_month\n\nans = solution()"
    ],
    "27b3555bfced4c3fa57ebd84801ad9e9": [
        "def solution():\n    # Let's denote the distance to the library as d (one way).\n    # Therefore, the total distance for the round trip is 2 * d.\n\n    # Given speeds\n    walking_speed = 40  # in meters per minute\n    cycling_speed = 60  # in meters per minute\n\n    # Time taken to walk to the library\n    time_walk = 1 / walking_speed  # in minutes per meter (d being the distance)\n\n    # Time taken to cycle back from the library\n    time_cycle = 1 / cycling_speed  # in minutes per meter (d being the distance)\n\n    # Total time for the round trip for a distance d\n    total_time = time_walk * d + time_cycle * d  # in minutes\n\n    # Since distance = speed * time, we rearrange the average speed formula:\n    # average_speed = total_distance / total_time\n\n    # Total distance covered is 2d (to the library and back)\n    # Total time taken is time_walk * d + time_cycle * d\n    # We substitute d = 1 because the distance cancels out in the equation for average speed\n    # average_speed = 2 / (time_walk + time_cycle)\n\n    time_walk = 1 / walking_speed\n    time_cycle = 1 / cycling_speed\n\n    # Compute average speed\n    average_speed = 2 / (time_walk + time_cycle)\n\n    return average_speed\n\nans = solution()"
    ],
    "bcade51c8974433b902c06454320d2d6": [
        "def solution():\n    for M in range(10):\n        total_sweets = int('127' + str(M))\n        if total_sweets % 25 == 0:\n            return total_sweets // 25\n\nans = solution()"
    ],
    "462088e1598d4df6ad551447b191e0c2": [
        "def solution():\n    # Let x be the cost of one serving of ice cream\n    # Sophie originally wanted to buy 5 servings but was short $2.30, so:\n    # 5x = amount given + 2.30\n    # When she bought 3 servings, she had $0.30 left, so:\n    # 3x = amount given - 0.30\n    # Now we can subtract the second equation from the first to find x\n    # (5x - 3x) = (amount given + 2.30) - (amount given - 0.30)\n    # 2x = 2.60\n    # x = 1.30\n    # Now we can substitute x back into the second equation to find the amount given\n    # 3 * 1.30 = amount given - 0.30\n    # 3.90 + 0.30 = amount given\n    # amount given = 4.20\n\n    ice_cream_cost = 1.30\n    amount_given = (3 * ice_cream_cost) + 0.30\n    return amount_given\n\nans = solution()"
    ],
    "1d0c88113962459d9a867535f00b7776": [
        "def solution():\n    ans = 391 // 17\n    return ans\n\nans = solution()"
    ],
    "e9b595c255074a5b964141db77e7289a": [
        "def solution():\n    # We know that 9:x = y:2\n    # This is a case of inverse proportionality since 9*y = 2*x\n    \n    # Let's find the proportionality constant (k) when x=3\n    x = 3\n    # k = 9 * y\n    # y = k / 9\n    # k = 2 * x\n    k = 2 * x\n\n    # To find y when x=3\n    y = k / 9\n\n    return y\n\nans = solution()"
    ],
    "54499dc98e4442c5aaa04120c1769fbe": [
        "def solution():\n    # You need to take one more than the number of all the different colors to ensure\n    # you have at least two balls of the same color.\n    # Since there are only 2 colors, taking one of each color guarantees\n    # the next one will be the same color as one of the ones you have already taken.\n    num_colors = 2\n    ans = num_colors + 1\n    return ans\n\nans = solution()"
    ],
    "51ad76377c2d44b9bc497caa5e86cd99": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['2', '3', '5', '6']\n    all_permutations = [''.join(p) for p in permutations(digits)]\n    odd_numbers = [int(p) for p in all_permutations if int(p) % 2 != 0]\n    n = min(odd_numbers)\n    return n\n\nans = solution()"
    ],
    "a58850681f6c454b93664a02ebcf4745": [
        "def solution():\n    ans = 299 + 199 + 99 + 5\n    return ans\n\nans = solution()"
    ],
    "931e1d2a335c4a7daca31b92b6d6c0ee": [
        "def solution():\n    from math import sqrt, pow\n    numerator = -6.94 - pow(9.604, 1/3)\n    denominator = sqrt(44.541 / 67) - (-377 / 6 * 5 / 3)\n    ans = round(numerator / denominator, 3)\n    return ans\n\nans = solution()"
    ],
    "09b871767fd046788bf00397a1526767": [
        "def solution():\n    # Let's assume the number we thought of is 'x'\n    # Following the steps one by one:\n    \n    # 1. Think of a number (x)\n    # 2. Add 3 (x + 3)\n    # 3. Multiply by 2 (2 * (x + 3))\n    # 4. Take away 2 (2 * (x + 3) - 2)\n    # 5. Add 10 (2 * (x + 3) - 2 + 10)\n    # 6. Divide by 2 ((2 * (x + 3) - 2 + 10) / 2)\n    # 7. Take away the number you started with ((2 * (x + 3) - 2 + 10) / 2 - x)\n    \n    # Simplifying the expression:\n    # =[2*(x + 3) - 2 + 10] / 2 - x\n    # =[2x + 6 - 2 + 10] / 2 - x\n    # =[2x + 14] / 2 - x\n    # =x + 7 - x\n    # =7\n    \n    # Regardless of the number we start with, the final result is always 7.\n    \n    return 7\n\nans = solution()"
    ],
    "618cd3abae4a408c89cdfe804dd7861f": [
        "def solution():\n    total_books = 50\n    total_cost = 20 * 4 + 10 * 5 + 20 * 6\n    average_cost = total_cost / total_books\n    return average_cost\n\nans = solution()"
    ],
    "7025bfa134974b12917661070ac0ccfc": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(50, 100))\n    return len(primes)\n\nans = solution()"
    ],
    "a9e6ee1f892d4e91b4af844be4862a94": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    felicia_start, felicia_end, janice_end = symbols('felicia_start felicia_end janice_end')\n    \n    # Felicia sells 3/5 of her bracelets\n    felicia_sold = 3 / 5 * felicia_start\n    # Janice buys 2/5 of the bracelets Felicia sold\n    janice_bought = 2 / 5 * felicia_sold\n    # Janice had 96 bracelets at first\n    janice_start = 96\n    # Felicia's end quantity and Janice's end quantity after the transaction\n    felicia_end = felicia_start - felicia_sold\n    janice_end = janice_start + janice_bought\n    # The ratio of Felicia's to Janice's bracelets became 5:7 after the transaction\n    ratio_equation = Eq(felicia_end / janice_end, 5 / 7)\n\n    # Solving the system of equations\n    solution = solve((ratio_equation, Eq(janice_end, janice_start + janice_bought)), (felicia_start, felicia_end, janice_end))\n    \n    return solution[janice_bought]\n\nans = solution()"
    ],
    "21b53a84fa7744b799aa83b063cea3d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack, kyle = symbols('jack kyle')\n    \n    # Original amounts\n    equation1 = Eq(jack, 5 * kyle)\n\n    # After losing money\n    equation2 = Eq(kyle, (2 / 7) * (jack - 72))\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (jack, kyle))\n\n    return solutions[kyle]\n\nans = solution()"
    ],
    "f0b55e6d454f4ee0b6b7bab29ab5fcde": [
        "def solution():\n    total_shirts = 6 + 10 + 4 + 12  # Total number of shirts\n    non_yellow_shirts = total_shirts - 10  # Total non-yellow shirts\n\n    # To ensure getting 1 yellow shirt, Annabella must take out all non-yellow shirts plus 1\n    shirts_to_take_out = non_yellow_shirts + 1\n\n    return shirts_to_take_out\n\nans = solution()"
    ],
    "0015db147ca4414ca1e9736f722c0a81": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10  # Because the first digit can't be 0\n    no_sevens = 8 * 9 * 9  # The first digit can't be 0 or 7, and the others can't be 7\n    one_seven = (8 * 9 * 1) + (8 * 1 * 9) + (1 * 9 * 9)  # Cases with exactly one seven\n\n    at_least_two_sevens = total_three_digit_numbers - no_sevens - one_seven\n    return at_least_two_sevens\n\nans = solution()"
    ],
    "81c24559e88e4ed8bcd27664fdc09676": [
        "def solution():\n    from math import lcm\n\n    ans = lcm(9, 10, 15)\n    \n    return ans\n\nans = solution()"
    ],
    "839a183a0d534ab08d061613682d208e": [
        "def solution():\n    multipack_price = 3.90\n    individual_price = 0.35\n    savings = (individual_price * 15) - multipack_price\n    return savings\n\nans = solution()"
    ],
    "7e911c176e49479e9ed116f42644288d": [
        "def solution():\n    principal = 20000\n    interest_rate = 0.05\n    years = 11\n\n    total_amount = principal * (1 + interest_rate * years)\n\n    return total_amount\n\nans = solution()"
    ],
    "f12b69acb17a43e28c14160e54423ddd": [
        "def solution():\n    # We have 3/4 added together three times, which is the same as multiplying 3/4 by 3\n    sum_of_fractions = (3/4) * 3\n    \n    # We want to find the number that, when multiplied by 1/4, plus 1 equals the sum above\n    missing_number = (sum_of_fractions - 1) * 4\n    \n    return int(missing_number)\n\nans = solution()"
    ],
    "fe146e5b026340f9924ffd3736d5162b": [
        "def solution():\n    # number of terms n=20\n    # sum S=560\n    # common difference d=2\n    # S = n/2 * (2*a + (n-1)*d)\n    # smallest term a = ?\n    \n    n = 20\n    S = 560\n    d = 2\n\n    # Using the formula for the sum of an arithmetic progression:\n    # S = n/2 * (2*a + (n - 1) * d)\n    # We need to find 'a', so we rearrange the equation to solve for 'a':\n    a = (S - n/2 * (n - 1) * d) / (n/2)\n\n    return a\n\nans = solution()"
    ],
    "4b5a108e7b29463283a0121b8eff4ee7": [
        "def solution():\n    depth = 8\n    climb = 3\n    slip = 2\n    progress_per_day = climb - slip\n    current_depth = 0\n    day = 0\n    \n    # Keep looping until the worm climbs out\n    while current_depth < depth:\n        day += 1\n        current_depth += climb  # Climb during the day\n        \n        # If the worm reaches the surface, break the loop\n        if current_depth >= depth:\n            break\n        \n        current_depth -= slip  # Slip during the night\n    \n    return day\n\nans = solution()"
    ],
    "ecd90328d44a498ab3c19fbbded322fc": [
        "def solution():\n    chocolate_cookies = 54\n    strawberry_cookies = chocolate_cookies + 12\n    vanilla_cookies = 3 * chocolate_cookies\n\n    total_cookies = chocolate_cookies + strawberry_cookies + vanilla_cookies\n\n    return total_cookies\n\nans = solution()"
    ],
    "50bfc99c8d774fb4a0ecaeddfbae7daf": [
        "def solution():\n    birds_A = 14\n    birds_B = birds_A + 7\n    total_birds = birds_A + birds_B\n    return total_birds\n\nans = solution()"
    ],
    "24494b59b3a84f199458f505e96beab3": [
        "def solution():\n    # Calculate the total number of pages read in the first four days\n    pages_first_four_days = 25 * 4\n    \n    # Calculate the total number of pages read in the following six days\n    pages_next_six_days = 40 * 6\n    \n    # Total pages read in the last five days\n    pages_last_five_days = 80\n    \n    # Calculate the total number of pages\n    total_pages = pages_first_four_days + pages_next_six_days + pages_last_five_days\n    \n    # Calculate the total number of days\n    total_days = 4 + 6 + 5\n    \n    # Calculate the average number of pages per day\n    average_pages_per_day = total_pages / total_days\n    \n    return average_pages_per_day\n\nans = solution()"
    ],
    "3dcbd6c48bb44952b98d8cdbb7804567": [
        "def solution():\n    # Let x represent the original number of toys her brother had.\n    # Penny originally had x + 10 toys.\n    # After giving away some toys, Penny has 14 toys left\n    # and her brother has 12 toys now.\n    # This means Penny gave away (x + 10 - 14) toys to her brother.\n    # So the equation is: x + (x + 10 - 14) = 12\n    \n    x = symbols('x')\n    equation = Eq(x + (x + 10 - 14), 12)\n    \n    original_toys_brother = solve(equation, x)\n\n    return original_toys_brother[0]\n\nans = solution()"
    ],
    "18e49347b54c42d49dfd7851649db755": [
        "def solution():\n    result = 123 * 321\n    return result\n\nans = solution()"
    ],
    "b61f2c67d5474cefa523298e7944c309": [
        "def solution():\n    for age in range(10, 100):  # Alberta's age is a two-digit number\n        reversed_age = int(str(age)[::-1])  # Interchange digits\n        if reversed_age + 1 == age // 2:\n            return age\n\nans = solution()"
    ],
    "3b73a77f7c8e486d98024f7782b84098": [
        "def solution():\n    n = 50\n    sum_of_series = n * (n + 1) // 2\n    return sum_of_series\n\nans = solution()"
    ],
    "6c8cdbe801664deaa9cc1f055549ee16": [
        "def solution():\n    ans = 3588 // 13\n    return ans\n\nans = solution()"
    ],
    "4a2049898e2f4dcb959012b7515613ac": [
        "def solution():\n    ans = 26 + 9 + 14 + 21\n    return ans\n\nans = solution()"
    ],
    "590987a303104728994dd0da7fd3edb0": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # The system of congruences can be described by the following equations:\n    # x ≡ 3 (mod 4)\n    # x ≡ 3 (mod 5)\n    # x ≡ 5 (mod 7)\n    # x ≡ 9 (mod 11)\n    \n    # The solve_congruence function expects each congruence as a tuple (remainder, modulus)\n    congruences = [(3, 4), (3, 5), (5, 7), (9, 11)]\n\n    # Solving the Chinese Remainder Theorem with the given congruences\n    ans = solve_congruence(*congruences)\n    \n    return ans[0]  # Return the smallest non-negative solution\n\nans = solution()"
    ],
    "4ada2fc5ea7044e8883b8b41373103ba": [
        "def solution():\n    sold_percentage = 0.60\n    unsold_tickets = 28\n    total_tickets = unsold_tickets / (1 - sold_percentage)\n    return int(total_tickets)\n\nans = solution()"
    ],
    "a4df0cfdb4324df6bf44b5accd085d76": [
        "def solution():\n    # Maximum number of cards drawn without getting 4 cards of the same suit is\n    # 3 cards from each of the 4 suits, which is 3 * 4 = 12 cards\n    # The next card drawn will ensure 4 cards of the same suit\n    num_cards_to_draw = (3 * 4) + 1\n    \n    return num_cards_to_draw\n\nans = solution()"
    ],
    "1404b37a858c4a309f7a557d011e187e": [
        "def solution():\n    one_quarter = 15\n    full_number = one_quarter * 4\n    two_thirds = (2/3) * full_number\n    return two_thirds\n\nans = solution()"
    ],
    "a4dc96d97cbd45ada42d2e9d64c14fe0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the total number of children\n    children = symbols('children')\n\n    # Since 5/8 of the children are girls, and there are 45 girls:\n    equation = Eq((5/8) * children, 45)\n\n    # Solve the equation to find the total number of children\n    total_children = solve(equation, children)[0]\n\n    # Since 3/7 of the people are adults, and 4/7 of the people are children:\n    total_people = (7/4) * total_children\n\n    return int(total_people)\n\nans = solution()"
    ],
    "22ad17f448d649e0b1fe57f02fb19f28": [
        "def solution():\n    # Jim's initial calculation\n    initial_two_dollar_notes = 5 * 2  # $10 from two-dollar notes\n    initial_fifty_cent_coins = 7 * 0.50  # $3.50 from fifty-cent coins\n    initial_total = initial_two_dollar_notes + initial_fifty_cent_coins  # $13.50 total initially\n    \n    # Cost of the file\n    file_cost = 11.95\n    \n    # Calculate remaining money\n    remaining_money = initial_total - file_cost\n    \n    return remaining_money\n\nans = solution()"
    ],
    "2eb3b3989afb45418447f85937aa1224": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    spent = symbols('spent')\n    hayden_initial = 1420\n    mitchell_initial = 505\n\n    # Hayden's amount after spending\n    hayden_final = hayden_initial - spent\n    # Mitchell's amount after spending\n    mitchell_final = mitchell_initial - spent\n    # Hayden has 4 times Mitchell's final amount\n    equation = Eq(hayden_final, 4 * mitchell_final)\n\n    # Solve the equation\n    spent_amount = solve(equation, spent)\n\n    return spent_amount[0]\n\nans = solution()"
    ],
    "f2d20571c7e14687b51b0f2273c1a1e6": [
        "def solution():\n    n = 100\n    ans = n * (n + 1) // 2\n    return ans\n\nans = solution()"
    ],
    "f8a9831c64444874a7a022c43dcf9b19": [
        "def solution():\n    saturday_sales = 2200\n    sunday_sales = saturday_sales - 435\n    total_sales = saturday_sales + sunday_sales\n    return total_sales\n\nans = solution()"
    ],
    "7d59e89e4b054b118a94d4c74670905c": [
        "def solution():\n    from math import factorial\n\n    n = 18  # total number of pupils\n    r = 3   # number of pupils to be seated in a row\n\n    # Calculating permutation since the order of seating matters\n    ans = factorial(n) // factorial(n - r)\n\n    return ans\n\nans = solution()"
    ],
    "01cf6f9c69e4458a8b94a0b745d2cc7d": [
        "def solution():\n    ginkgo_trees = 30\n    willow_trees = (ginkgo_trees - 1) * 2\n    return willow_trees\n\nans = solution()"
    ],
    "186459d1a5bc465cae1639d4f60e5ff7": [
        "def solution():\n    ans = 10 - 2\n    return ans\n\nans = solution()"
    ],
    "305c7d5b598d4dd28cdaf101e7ead5d7": [
        "def solution():\n    total_distance = 11\n    climb_per_day = 3\n    slide_per_night = 1\n    effective_climb = climb_per_day - slide_per_night\n    days = 0\n    distance_climbed = 0\n\n    while True:\n        days += 1\n        distance_climbed += climb_per_day\n        if distance_climbed >= total_distance:\n            break\n        distance_climbed -= slide_per_night\n\n    return days\n\nans = solution()"
    ],
    "eec2a2b1d8c14700926c3b02af68e739": [
        "def solution():\n    speed_in_still_water = 28\n    speed_of_current = 3\n    distance_upstream = 150\n\n    speed_upstream = speed_in_still_water - speed_of_current\n    time_upstream = distance_upstream / speed_upstream\n    \n    return time_upstream\n\nans = solution()"
    ],
    "3bb33463238344c0b0c5e15f79be1c35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, brian, christopher = symbols('andrew brian christopher')\n\n    equation1 = Eq(andrew + brian, 40)\n    equation2 = Eq(andrew + christopher, 37)\n    equation3 = Eq(christopher + brian, 25)\n\n    solutions = solve((equation1, equation2, equation3), (andrew, brian, christopher))\n\n    total_money = sum(solutions.values())\n\n    return total_money\n\nans = solution()"
    ],
    "b25a759f5a124329b59f7caa09995681": [
        "def solution():\n    # Let a, b, c represent Adam's, Ben's, and Carl's weights respectively.\n    # We have the following equations:\n    # a + b = 102\n    # b + c = 97\n    # a + c = 93\n\n    # Sum all equations:\n    # 2*(a + b + c) = 102 + 97 + 93\n    total_double = 102 + 97 + 93\n    total_weight = total_double / 2\n\n    return total_weight\n\nans = solution()"
    ],
    "cb41cb4b2a104da19631ca6cf97368fb": [
        "def solution():\n    return (26 + 4) // 5\n\nans = solution()"
    ],
    "d26417287aa54f1a81818d3f38ddf3b7": [
        "def solution():\n    ramen_cost = 8\n    pineapple_juice_cost = ramen_cost - 5\n    roasted_duck_cost = ramen_cost * 6\n    total_cost = ramen_cost + pineapple_juice_cost + roasted_duck_cost\n    return total_cost\n\nans = solution()"
    ],
    "a85551b5ada240de8c9dda1f7da71caa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bilal, chloe, david, emily = symbols('alan bilal chloe david emily')\n    alan_value = 74\n    bilal_value = 86\n\n    equation1 = Eq(chloe, 2 * david)\n    equation2 = Eq(david, 3 * emily)\n    equation3 = Eq(alan + bilal + chloe + david + emily, 400)\n    equation4 = Eq(alan, alan_value)\n    equation5 = Eq(bilal, bilal_value)\n\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "c41f84fd63394a0391698bc5498037eb": [
        "def solution():\n    cheese_weight_g = 500\n    cheese_price_per_kg = 7.48\n    apple_price = 12\n    apple_quantity = 8\n    yoghurt_price = 46\n    yoghurt_quantity = 2\n    note_value = 10\n    pound_to_pence = 100\n\n    cheese_cost = (cheese_weight_g / 1000) * cheese_price_per_kg\n    apples_cost = (apple_price * apple_quantity) / pound_to_pence\n    yoghurts_cost = (yoghurt_price * yoghurt_quantity) / pound_to_pence\n    total_cost = cheese_cost + apples_cost + yoghurts_cost\n\n    change = note_value - total_cost\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "c21db49e2ec24c00ad1e61412de8a8da": [
        "def solution():\n    total_aircrafts = 1200\n    zack_rate = 150\n    total_hours_together = 6\n\n    # Zack's work done in 6 hours\n    zack_work = zack_rate * total_hours_together\n    \n    # Remaining work to be done by Andy\n    andy_work = total_aircrafts - zack_work\n    \n    # Since Andy and Zack together finish the total work in 6 hours,\n    # We can find the rate at which they work together\n    together_rate = total_aircrafts / total_hours_together\n    \n    # Andy's rate per hour would be\n    andy_rate = together_rate - zack_rate\n    \n    # Time taken by Andy to sell all aircrafts by himself would be\n    time_by_andy = total_aircrafts / andy_rate\n    \n    return time_by_andy\n\nans = solution()"
    ],
    "1a2675c93fa74d79bf17aa463233e418": [
        "def solution():\n    # Start with a variable for the side length of the square\n    # Assume side length to be n, then n//2 layers of students and n//2 layers of teachers\n    n = 1\n    while True:\n        # Number of students is the sum of squares of all odd layers from 1 to n, if n is odd\n        # or from 1 to n-1, if n is even\n        # Number of teachers is the sum of squares of all even layers from 2 to n-1, if n is odd\n        # or from 2 to n, if n is even\n        students = sum((2*i + 1) ** 2 for i in range(n // 2))  # Students occupy the odd layers\n        teachers = sum((2*i) ** 2 for i in range(1, (n+1) // 2))  # Teachers occupy the even layers\n\n        # Check if there are 80 more students than teachers\n        if students - teachers == 80:\n            # If the condition is met, calculate the total number of people\n            ans = students + teachers\n            return ans\n\n        # Increase the side length for the next iteration\n        n += 1\n\nans = solution()"
    ],
    "97d454b709c64e6daff1a08bdaaa2036": [
        "def solution():\n    total_volume = 300\n    ratio_sum = 2 + 7 + 6\n    orange_ratio = 7\n\n    orange_volume = (orange_ratio / ratio_sum) * total_volume\n\n    return orange_volume\n\nans = solution()"
    ],
    "ea932493a6be4bd8a55c3012ca3eed55": [
        "def solution():\n    initial_money = 20\n    saved_money = 1 * 7  # $1 everyday for one week\n    lent_money = 5\n    spent_money = 3\n\n    total_money = initial_money + saved_money - lent_money - spent_money\n    \n    return total_money\n\nans = solution()"
    ],
    "e9ac6545c3a143c28291a6d293def281": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the smaller number and y be the bigger number\n    x, y = symbols('x y')\n\n    # Given equations\n    equation1 = Eq(x + y, 528)\n    equation2 = Eq(y, 3 * x)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "adba7c277cb842899408b324ea11a443": [
        "def solution():\n    total_money = 28.74\n    repaid_mum = 10.50\n    remaining_after_repayment = total_money - repaid_mum\n    spent_on_magazines = remaining_after_repayment / 2\n    money_left = remaining_after_repayment - spent_on_magazines\n\n    return money_left\n\nans = solution()"
    ],
    "b3ed35bbe5ce4935bcc062b5653f1a11": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 44000 to get its prime factors and their exponents\n    factors = factorint(44000)\n\n    # Find q such that 44000/q is a cube\n    q = 1\n    for prime, exponent in factors.items():\n        # The exponent of the prime factor in 44000/q must be a multiple of 3 for it to be a cube\n        if exponent % 3 != 0:\n            q *= prime**(3 - (exponent % 3))\n    \n    return q\n\nans = solution()"
    ],
    "dfcfac4be0e0482cbfbe73e3f8f36b37": [
        "def solution():\n    return sum(81 % i == 0 for i in range(1, 82))\n\nans = solution()"
    ],
    "e000ebdd6454463d874a0f9f4b5453da": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Let the amount of money Steve, Mark, and Ryan originally had be s, m, and r respectively\n    s, m, r = symbols('s m r', real=True, positive=True)\n    \n    # Let x be the cost of the meal\n    x = symbols('x', real=True, positive=True)\n\n    # According to the problem, we have three sets of ratio equations\n\n    # If Steve paid for the meal, the ratios are:\n    eq1 = (s-x)/3 - m/8\n    eq2 = (s-x)/3 - r/9\n\n    # If Ryan paid for the meal, the ratios are:\n    eq3 = s/5 - m/4\n    eq4 = s/5 - (r-x)/1\n\n    # If Mark paid for the meal, the ratios are:\n    eq5 = s/10 - (m-x)/1\n    eq6 = s/10 - r/9\n\n    # Steve had ＄40 more than Mark\n    eq7 = s - m - 40\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4, eq5, eq6, eq7), (s, m, r, x))\n\n    # We are interested in the value of x\n    return solutions[x]\n\nans = solution()"
    ],
    "be66bf7835674a479413fc1019bf6408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    l, w = symbols('l w')  # l for length, w for width\n    equation1 = Eq(l, 2 * w)  # length is twice width\n    equation2 = Eq(2 * l + 2 * w, 72)  # perimeter is 72 meters\n\n    solutions = solve((equation1, equation2), (l, w))\n\n    return solutions[l]\n\nans = solution()"
    ],
    "de537ba1fad747e38db67229241b78f3": [
        "def solution():\n    mass = 100  # mass of the crate in kg\n    static_friction_coefficient = 0.4  # coefficient of static friction\n    force_applied = 250  # force applied in N\n\n    # Calculate the maximum static friction force before the crate begins to slide\n    weight = mass * 9.81  # gravitational acceleration in m/s^2\n    max_static_friction_force = static_friction_coefficient * weight\n\n    # The actual force of static friction equals the applied force if it is less than the max static friction force\n    if force_applied < max_static_friction_force:\n        force_of_static_friction = force_applied\n    else:\n        force_of_static_friction = max_static_friction_force\n\n    return force_of_static_friction\n\nans = solution()"
    ],
    "be0c4394f54542bfb8c9b196143e27a7": [
        "def solution():\n    term_3 = 23\n    term_15 = 155\n    common_difference = (term_15 - term_3) / (15 - 3)\n    \n    return common_difference\n\nans = solution()"
    ],
    "cc1ad36629654bae97b8c5a7fac65f55": [
        "def solution():\n    # Calculate the amount of salt in each solution\n    nick_salt = 300 * 0.12\n    nicole_salt = 500 * 0.28\n    \n    # Calculate the total amount of salt and the total weight of the solution\n    total_salt = nick_salt + nicole_salt\n    total_weight = 300 + 500\n    \n    # Calculate the concentration of the resulting solution\n    concentration = total_salt / total_weight\n\n    return concentration\n\nans = solution()"
    ],
    "d9b27069b97d43039159301e52324136": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    equation1 = Eq(B, A - 50)\n    equation2 = Eq(A + 25, 5 * (B - 25))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "05b3b86ca32248e090e1eb71f8a1857e": [
        "def solution():\n    i = 1\n    while True:\n        cube = i**3\n        square = cube + 1\n        \n        if int(square**0.5)**2 == square:\n            ans = square\n            break\n        i += 1\n        \n    return ans\n\nans = solution()"
    ],
    "63961e2f7dee44ca9a4d89a4d4de6c02": [
        "def solution():\n    for nina in range(1, 24):\n        james = 24 - nina\n        if nina - 6 == james + 6:\n            return nina\n\nans = solution()"
    ],
    "100c6fbfe37a4df59970ef7b87bb2fb2": [
        "def solution():\n    ans = ((11/30) - (9/20) + (7/12) - (1/3)) * 6 * (7/13) * 9.1\n    return ans\n\nans = solution()"
    ],
    "154e009409a0475f899012d13bba6fbe": [
        "def solution():\n    total_workers = 3\n    total_parts = 90\n    total_hours = 5\n\n    parts_per_worker_per_hour = total_parts / (total_workers * total_hours)\n\n    return parts_per_worker_per_hour\n\nans = solution()"
    ],
    "9b06a89d59134d6786d0f3304363e49b": [
        "def solution():\n    day_climb = 5\n    night_slide = 3\n    net_gain_per_day = day_climb - night_slide\n    burrow_depth = 16\n    \n    days = 0\n    total_climbed = 0\n    \n    while total_climbed < burrow_depth:\n        days += 1\n        total_climbed += day_climb\n        \n        if total_climbed >= burrow_depth:\n            break\n            \n        total_climbed -= night_slide\n        \n    return days\n\nans = solution()"
    ],
    "bee004ffbd0d4ae48f167a59c6b0eba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n    \n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(bentley, david - 25)\n    equation3 = Eq(david + bentley + triston, 410)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[bentley]\n\nans = solution()"
    ],
    "e382d288fd514311b12b870b6e188cb0": [
        "def solution():\n    y = 0.5 * x + 1.5\n    return y\n\n# Since we cannot assign a value to x without more information, the function\n# just returns the equation relating x to y.\nans = solution  # In this context, ans refers to the function itself."
    ],
    "cf5c903f7a704e0e9edc0dcebf1c25a4": [
        "def solution():\n    fraction_value = 8 / 100\n    decimal_value = 0.7\n\n    ans = fraction_value if fraction_value > decimal_value else decimal_value\n\n    return ans\n\nans = solution()"
    ],
    "9518ce77f5dc46ba89558b1a438ed818": [
        "from fractions import Fraction\n\ndef solution():\n    result = 3 * Fraction(4, 5) * Fraction(10, 9) * Fraction(11, 2) * Fraction(3, 11)\n    return result\n\nans = solution()"
    ],
    "3f7c7e2ec1a24832be797aa888a40a2e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Create the congruences based on the problem statement\n    # coin_count % 4 = 3\n    # coin_count % 5 = 3\n    # coin_count % 7 = 3\n    # coin_count % 9 = 0\n    congruences = [(3, 4), (3, 5), (3, 7), (0, 9)]\n    \n    # Use the Chinese Remainder Theorem to solve the congruences\n    coin_count, _ = solve_congruence(*congruences)\n    \n    return coin_count\n\nans = solution()"
    ],
    "5b1c49d670024781873d3ae0efb0c655": [
        "def solution():\n    # Relationship between dog and rabbit weight\n    dog_to_rabbit = 8\n    # Relationship between rabbit and chicken weight\n    rabbit_to_chicken = 2\n\n    # Calculating how many chickens weigh as much as 1 dog\n    chickens_per_dog = dog_to_rabbit * rabbit_to_chicken\n\n    return chickens_per_dog\n\nans = solution()"
    ],
    "16022d017d8d4b2a93df59ec9de8de8d": [
        "def solution():\n    product = 1\n    for i in range(2, 51):\n        product *= (1/i - 1/(51-i))\n    return product\n\nans = solution()"
    ],
    "d023e16d6b0442258dbdd634f6f230cd": [
        "def solution():\n    flat_fee = 30\n    cost_per_day_initial = 25\n    cost_per_day_additional = 20\n    total_cost = 275\n    \n    max_initial_days = 5\n    initial_cost_limit = flat_fee + (cost_per_day_initial * max_initial_days)\n    \n    if total_cost <= initial_cost_limit:\n        days = (total_cost - flat_fee) / cost_per_day_initial\n    else:\n        days = max_initial_days + (total_cost - initial_cost_limit) / cost_per_day_additional\n    \n    return int(days)\n\nans = solution()"
    ],
    "a6d0ec4cdc6d41c1bee18c4428510978": [
        "def solution():\n    race_distance = 3000\n    \n    buck_speed = 600  # meters per minute\n    elephant_speed = 250  # meters per minute\n    \n    buck_time = race_distance / buck_speed\n    elephant_time = race_distance / elephant_speed\n    \n    time_difference = elephant_time - buck_time\n    \n    return time_difference\n\nans = solution()"
    ],
    "eae7f41ff90f44e7a99eb2dc09729a1c": [
        "def solution():\n    initial_height = 270  # The height from which the ball is dropped\n    rebound_ratio = 0.10  # The ratio of the height of the rebound to the previous height\n    \n    # The distance travelled by the ball before coming to rest is the sum of\n    # the distances fallen and then the distances bounced back up.\n    total_distance = initial_height  # Initial drop distance\n    current_height = initial_height\n\n    while current_height > 0:\n        current_height *= rebound_ratio  # The height of the rebound\n        total_distance += 2 * current_height  # Both upwards and downwards for each bounce\n\n    return total_distance\n\nans = solution()"
    ],
    "42cc9c30d7da46e1b85c814f51f4cb50": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    green, yellow = symbols('green yellow')\n\n    equation1 = Eq(green, yellow)\n    equation2 = Eq(yellow - 14, 3 * (green - 60))\n\n    solutions = solve((equation1, equation2), (green, yellow))\n\n    final_green = solutions[green] - 60\n\n    return final_green\n\nans = solution()"
    ],
    "821bbb7b160a4641959ffcfcc87a1881": [
        "def solution():\n    total_apples = 200\n    bad_apples_percentage = 15\n    bad_apples = (bad_apples_percentage / 100) * total_apples\n    return int(bad_apples)\n\nans = solution()"
    ],
    "f5f9f6e369044a1b83219aa9a9159ae4": [
        "def solution():\n    n = 400 // 4  # number of terms in one half of the sequence\n    # sum of arithmetic sequence S = n/2 * (first term + last term)\n    sum_one_half = n / 2 * (4 + 400)\n    # The sequence is symmetrical, so the total sum is twice the sum of one half\n    total_sum = 2 * sum_one_half\n    return int(total_sum)\n\nans = solution()"
    ],
    "901ccb4591ae4fc0b5dc46e406c89367": [
        "def solution():\n    ans = 123 - 67\n    return ans\n\nans = solution()"
    ],
    "6f13e1fc1b49403ea8b1930c4936f41a": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Given data\n    simon_speed_km_per_hr = 80\n    wife_speed_km_per_hr = 60\n    distance_between_offices_km = 15\n\n    # Speed difference\n    speed_difference_km_per_hr = simon_speed_km_per_hr - wife_speed_km_per_hr\n\n    # Time taken for Simon to cover the distance between the offices\n    time_to_cover_distance_hr = distance_between_offices_km / speed_difference_km_per_hr\n\n    # Convert time to cover distance from hours to minutes\n    time_to_cover_distance_min = time_to_cover_distance_hr * 60\n\n    # Starting time (6:10 pm)\n    starting_time = datetime.strptime(\"18:10\", \"%H:%M\")\n\n    # Calculate the time when Simon overtakes his wife\n    overtaking_time = starting_time + timedelta(minutes=time_to_cover_distance_min)\n\n    # Format the time in 24-hour format\n    overtaking_time_str = overtaking_time.strftime(\"%H:%M\")\n\n    return overtaking_time_str\n\nans = solution()"
    ],
    "da055c1b89524c48bc32bc19a92de881": [
        "def solution():\n    # Cost of 12 pencils\n    cost_12_pencils = 1.80\n    \n    # Cost of one pencil\n    cost_1_pencil = cost_12_pencils / 12\n    \n    # Ratio of cost of a pen to the cost of a pencil is 7:3\n    # So, Cost of one pen is 7/3 times the cost of one pencil\n    cost_1_pen = (7/3) * cost_1_pencil\n    \n    # Cost of 5 pens\n    cost_5_pens = 5 * cost_1_pen\n\n    return cost_5_pens\n\nans = solution()"
    ],
    "3aaf82004b014041bf215ad6f6fcea70": [
        "def solution():\n    first_term = 2\n    last_term = 80\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "fbc9c3861d2d486da8e9c21841d42bfa": [
        "def solution():\n    # Since the booklet is folded in half, there must be an even number of pages,\n    # which means the sum of the numbers on the front and back of a sheet must be even.\n\n    # The sum of numbers on both sides of a sheet is sequential and increases progressively\n    # Let n be the number of sheets, hence there are 2n pages\n\n    # The smallest number in the fold is x\n    # So, the numbers on the two pages are x and x + 1\n    # The numbers on the other side are 2n - (x - 1) and 2n - x, since the numbering is in order\n    # Hence, sum of the four page numbers is x + (x + 1) + (2n - (x - 1)) + (2n - x) = 58\n    # Simplifying gives us 2x + 2n + 1 = 58 => 2(x + n) = 57\n    # Since the left side is even (multiplication of 2), the right side must also be even\n    # But 57 is odd, which means our equation is impossible; we must have made an incorrect assumption\n\n    # We need to adjust the equation considering that the pages on the opposite sides are not exactly consecutive\n    # The correct numbers would be x + 1 and x + 2 on the front of the sheet\n    # Thus, the equation should be: x + (x + 1) + (x + 2) + (2n - x) = 58\n    # Simplifying this gives us 4x + 2n + 3 = 58 => 2(2x + n) = 55 => 2x + n = 55 / 2\n\n    # As we know 2x + n must be an integer (since both x and n are integers), there's a contradiction\n    # Thus the sum of page numbers across a fold will actually be symmetric and include x, (2n - x + 1), (x + 1), (2n - x)\n    # That implies 2x + 2 + 2n - x + 2n - x + 1 = 58\n\n    # Simplifying, we get: 3x + 4n + 3 = 58 => 3x + 4n = 55\n    # For the smallest x (which is 1), we can solve for n\n    # 3(1) + 4n = 55 => 4n = 52 => n = 13\n\n    # There are n sheets\n    return 13\n\nans = solution()"
    ],
    "3e45de8cb94745a28ca3cae049c63279": [
        "def solution():\n    # Number of choices for one drink (coffee, milk)\n    num_drinks = 2\n    # Number of choices for one food item (hamburger, burrito, bagel)\n    num_foods = 3\n    # Calculate the number of different combinations using the principle of multiplication\n    num_combinations = num_drinks * num_foods\n    return num_combinations\n\nans = solution()"
    ],
    "40bc621de9c14774a192faa5c08aa4c1": [
        "def solution():\n    time_taken_for_2_pancakes = 3  # minutes\n    pancakes_in_12_minutes = (12 / time_taken_for_2_pancakes) * 2\n\n    return int(pancakes_in_12_minutes)\n\nans = solution()"
    ],
    "14775f177c0c4183a67b4ef46483248b": [
        "def solution():\n    # Fastest people (Jason and Chi Yew) cross first: takes 5 minutes (total 5 minutes)\n    # One of them returns: takes 5 minutes (total 10 minutes)\n    # Two slowest (Wei Jie and Michael) cross: takes 9 minutes (Wei Jie's time, since it's longer than Michael's)\n    # Fastest person (Jason or Chi Yew) returns: takes 5 minutes (total 24 minutes)\n    # Both fastest people (Jason and Chi Yew) cross again: takes 5 minutes (total 29 minutes)\n    \n    return 29\n\nans = solution()"
    ],
    "fbd1909b07244f4b8fef27cb83be59f2": [
        "def solution():\n    # Initialize the lockers status as all unlocked\n    lockers = [False] * 100  # False represents unlocked, True represents locked\n\n    # Process for divisibility by 3\n    for i in range(1, 101):\n        if i % 3 == 0:\n            lockers[i - 1] = True  # Lock the lockers divisible by 3 (index i-1 since lockers are 1-indexed)\n\n    # Process for divisibility by 5\n    for i in range(1, 101):\n        if i % 5 == 0:\n            lockers[i - 1] = not lockers[i - 1]  # Toggle the lockers divisible by 5\n\n    # Count the number of unlocked lockers\n    unlocked_lockers = lockers.count(False)\n\n    return unlocked_lockers\n\nans = solution()"
    ],
    "6ed4b3f4d3984ba0b27b5278f3c00efa": [
        "def solution():\n    def count_ways(steps):\n        if steps <= 1:\n            return 1\n        ways = [0] * (steps+1)\n        ways[0], ways[1] = 1, 1\n        for i in range(2, steps+1):\n            ways[i] = ways[i-1] + ways[i-2]\n        return ways[steps]\n\n    # Total ways to reach the 5th step\n    ways_to_5 = count_ways(4)\n\n    # Total ways to reach the 10th step from the 5th step\n    ways_from_5_to_10 = count_ways(10 - 5)\n\n    # Total different ways to reach the 10th step is \n    # the product of ways_to_5 and ways_from_5_to_10\n    ans = ways_to_5 * ways_from_5_to_10\n    \n    return ans\n\nans = solution()"
    ],
    "e861bb32b7d547039e6ce80de36833a5": [
        "def solution():\n    sale_price = 48\n    reduction_fraction = 1 / 5\n    original_price = sale_price / (1 - reduction_fraction)\n    return original_price\n\nans = solution()"
    ],
    "42d848249dd041fd9a59aba42cf09b4e": [
        "def solution():\n    total_road_length = 500  # total road length in meters\n    total_days = 5  # total days to pave the road\n\n    meters_per_day = total_road_length / total_days\n\n    return meters_per_day\n\nans = solution()"
    ],
    "d4be2c4b031f4b75b58c52a082b67c92": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A = symbols('A')\n    equation = Eq(88 / A, 22)  # Sandra's incorrect calculation\n    A_value = solve(equation, A)[0]\n\n    correct_answer = 98 / A_value  # correct calculation using found A value\n\n    return A_value, correct_answer\n\nans = solution()"
    ],
    "17c7cc140d594f18884947838501f76d": [
        "def solution():\n    price_per_calculator = 32 / 4\n    cost_for_twelve = price_per_calculator * 12\n    return cost_for_twelve\n\nans = solution()"
    ],
    "04f3463bdfd44e64844f13c3d9c4e55e": [
        "def solution():\n    # With 18 countries and 8 people from each, we cannot ensure 9 people from the same country\n    max_participants_per_country_without_nine = 8\n    # If we add one more participant, we ensure that at least one country has 9 people\n    min_participants_for_nine = max_participants_per_country_without_nine * 18 + 1\n    \n    return min_participants_for_nine\n\nans = solution()"
    ],
    "374b823fc9994ac6839b73f73220b2fc": [
        "def solution():\n    # sum of an arithmetic sequence: S = n/2 * (first_term + last_term)\n    # given sum S: 2014, and number of terms n: 53\n    n = 53\n    S = 2014\n    first_term = symbols('first_term')\n    \n    # From the sum of an arithmetic sequence formula, solve for first_term\n    equation = Eq(n/2 * (first_term + (first_term + n - 1)), S)\n    first_term_solution = solve(equation, first_term)\n    \n    # get the first term from the solved equation\n    first_term_value = first_term_solution[0]\n    \n    # calculate the last term\n    last_term = first_term_value + n - 1\n    \n    return last_term\n\nans = solution()"
    ],
    "6e28fbe858694127965a423b5827545f": [
        "def solution():\n    # If $1670 is rounded to the nearest $10,\n    # the greatest amount Rachel could have saved is $1670 + $4 (one dollar less than the next ten)\n    greatest_amount = 1670 + 4\n    return greatest_amount\n\nans = solution()"
    ],
    "08f295cae61b452781fe8880031bedb9": [
        "def solution():\n    return 956 * 78\n\nans = solution()"
    ],
    "42304a89be8248ce998d0790579451c5": [
        "def solution():\n    ans = 345 * 6\n    return ans\n\nans = solution()"
    ],
    "a50d4aad678545d8ad403f9ee6aef9cb": [
        "def solution():\n    # Lucas's speed is 5 laps per 6 minutes\n    lucas_laps_per_minute = 5 / 6\n    # Miller's speed is 5 laps per 10 minutes\n    miller_laps_per_minute = 5 / 10\n    \n    # Relative speed of Lucas with respect to Miller\n    relative_speed = lucas_laps_per_minute - miller_laps_per_minute\n    \n    # Time taken for Lucas to overtake Miller once is the time taken to complete 1 lap\n    # at their relative speed\n    time_for_one_overtake = 1 / relative_speed\n    \n    return time_for_one_overtake\n\nans = solution()"
    ],
    "97e34217530f47f198915d7380bfbd2d": [
        "def solution():\n    number = 5217\n    divisor = 13\n    remainder = number % divisor\n    return remainder\n\nans = solution()"
    ],
    "62bcd683923a4c13a327d9e35f3b2302": [
        "def solution():\n    hours = 2 + 1/2\n    minutes_per_hour = 60\n\n    minutes = hours * minutes_per_hour\n\n    return int(minutes)\n\nans = solution()"
    ],
    "cd9aa54c79074ee2aa4aad035a1be624": [
        "def solution():\n    tim_age = 8\n    future_mom_age = 54\n    # Let mom_age be the current age of Tim's mother\n    # We are looking for mom_age such that when Tim is mom_age years old,\n    # his mother will be future_mom_age years old.\n    # That means the difference in age will remain the same\n    \n    difference_in_age = future_mom_age - tim_age\n    # Thus, the current age of Tim's mother is:\n    mom_age = tim_age + difference_in_age\n    \n    return mom_age\n\nans = solution()"
    ],
    "41b46512b7bf48eebc8468c2eb001314": [
        "def solution():\n    orange_length_m = 5.52  # Orange string length in meters\n    purple_length_m = orange_length_m / 9.2  # Purple string length in meters, found by dividing the orange string length by the ratio\n\n    green_length_m = purple_length_m + 24.9 / 100  # Green string length in meters, 24.9 cm converted to meters\n\n    return green_length_m\n\nans = solution()"
    ],
    "87766ec0f15a4f82a63df69a587cfef4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    visitors = symbols('visitors')\n\n    # fraction of visitors that are children\n    children_fraction = 3 / 5\n    # fraction of visitors that are men (among the non-children)\n    men_fraction = 1 / 4\n\n    # equation representing the total number of visitors\n    # based on the given fractions and their relationship\n    equation = Eq(children_fraction * visitors + 120, men_fraction * (1 - children_fraction) * visitors)\n\n    # solving for the total number of visitors\n    solution = solve(equation, visitors)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b8e19c913d8d4ff69e6cd9698f1eb368": [
        "def solution():\n    base_cost = 80  # Cost of the call up to 15 minutes in cents\n    additional_cost = 5  # Cost of each additional minute in cents\n    total_cost = 140  # Total cost of the call in cents\n\n    # Calculate the cost of additional minutes above the 15-minute base\n    additional_minutes_cost = total_cost - base_cost\n\n    # Calculate the number of additional minutes\n    additional_minutes = additional_minutes_cost // additional_cost\n\n    # Total number of minutes is the base 15 plus any additional minutes\n    total_minutes = 15 + additional_minutes\n\n    return total_minutes\n\nans = solution()"
    ],
    "c1962524dabf4b3da31b4f37827a030a": [
        "def solution():\n    count = 0\n    for i in range(1, 100):\n        if i % 2 == 0 and i % 5 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "4b76c5a5fefd4d379198d89518cf1797": [
        "def solution():\n    total_work = 1\n    ivy_rate = 1 / 24\n    kevin_rate = 1 / 20\n    days_together = 18 / 2  # they work half the time together\n\n    # Work done by both when working together\n    work_together = (ivy_rate + kevin_rate) * days_together\n\n    # Remaining work to be done by Ivy alone since Kevin took days off\n    remaining_work = total_work - work_together\n\n    # Days Ivy needs to finish the remaining work alone\n    ivy_days_alone = remaining_work / ivy_rate\n\n    # Total days Kevin took off\n    kevin_days_off = 18 - ivy_days_alone\n\n    return kevin_days_off\n\nans = solution()"
    ],
    "184683893a1a450fb55ccb18cf570233": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 49.5)\n    equation2 = Eq(x, 5 * y)\n\n    solutions = solve((equation1, equation2), (x, y))\n    longer_piece = float(solutions[x])\n\n    return round(longer_piece, 1)\n\nans = solution()"
    ],
    "c513a3033f3749eebdae943a22fb537a": [
        "def solution():\n    # Assuming the question refers to a number puzzle where 'A' is a digit in a vertical form\n    # As there's no specific puzzle provided, we'll solve a common type of number puzzle where A is the missing digit\n    # in a sum of two numbers that results in a third number, all aligned vertically. For example:\n    #   AB\n    #  +AC\n    #  ----\n    #  BBC\n    #\n    # We have to find the value of A such that the sum is correct.\n    #\n    # This puzzle can have multiple solutions, so we assume that A, B, and C are unique digits.\n    # The maximum value for A in this case is 9 and we iterate from 1 to 9 to find a solution.\n\n    for A in range(1, 10):\n        for B in range(0, 10):\n            for C in range(0, 10):\n                if A != B and B != C and A != C:\n                    # Build the numbers from the digits\n                    AB = 10 * A + B\n                    AC = 10 * A + C\n                    BBC = 100 * B + 10 * B + C\n\n                    # Check if the sum is equal to the third number\n                    if AB + AC == BBC:\n                        return A\n\n    # No solution found\n    return None\n\nans = solution()"
    ],
    "f88e8811450e4f85937e81e850e2d300": [
        "def solution():\n    money_from_mum_per_day = 60\n    money_from_dad_per_day = 40\n    days = 3  # Monday, Tuesday, Wednesday\n\n    total_money = (money_from_mum_per_day + money_from_dad_per_day) * days\n    \n    return total_money\n\nans = solution()"
    ],
    "aefe4b1d258c455f852061413286ec4b": [
        "def solution():\n    total_ratio = 4 + 5\n    total_litres = 36\n    apple_juice_ratio = 4\n\n    apple_juice_litres = (apple_juice_ratio / total_ratio) * total_litres\n\n    return apple_juice_litres\n\nans = solution()"
    ],
    "e4d3c043d1fb45078d416e3b70973037": [
        "def solution():\n    total_height = 25\n    climb_per_day = 4\n    slide_per_night = 1\n    net_progress_per_day = climb_per_day - slide_per_night\n    \n    days = 0\n    height_after_last_day = total_height - climb_per_day  # After reaching or exceeding this height, the snail will leave the well on the next day without sliding back\n    \n    while True:\n        days += 1\n        if net_progress_per_day * days > height_after_last_day:\n            break\n\n    return days\n\nans = solution()"
    ],
    "4a9d0a7ecc6a4d7b8a4bf5f49ac3f034": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote t as the time taken by Tim to complete the book by himself\n    nancy = 1/6       # Nancy's work rate per day (fraction of the book she can write in a day)\n    nancy_tim = 1/4   # Combined work rate of Nancy and Tim per day\n    tim = symbols('tim')\n    \n    # Define equation based on the work rates\n    equation = Eq(nancy + 1/tim, nancy_tim)\n\n    # Solve for Tim's rate\n    tim_solution = solve(equation, tim)\n\n    return tim_solution[0]\n\nans = solution()"
    ],
    "04cf5bf4ba704663af7e01b1fc0bebfa": [
        "def solution():\n    total_days = 15\n    balance = 100  # Initial amount of pocket money\n    for day in range(1, total_days + 1):\n        if day % 2 == 1:  # Odd day, deposit £5\n            balance += 5\n        else:  # Even day, spend £8\n            balance -= 8\n\n    return balance\n\nans = solution()"
    ],
    "6ea9279809514a5d9fa706e9c64edc86": [
        "def solution():\n    jump_up = 3\n    slip_down = 2\n    tree_height = 31\n    current_height = 0\n    jumps = 0\n\n    while current_height < tree_height:\n        jumps += 1\n        current_height += jump_up\n        if current_height >= tree_height:\n            break\n        current_height -= slip_down\n\n    return jumps\n\nans = solution()"
    ],
    "a9c71626af834229920858670d8deb58": [
        "def solution():\n    return 32.4 * 20\n\nans = solution()"
    ],
    "4dedeb8bed9343319dda8177873725fd": [
        "def solution():\n    # Let x be the total number of pupils normally at school.\n    # 20% of x are Year 7 pupils.\n    # After some Year 7 girls miss school, 10% of 400 are Year 7 pupils.\n\n    # Let y be the number of Year 7 pupils who miss school.\n    # The total number of Year 7 pupils before the girls missed school is 20% of x.\n    # The total number of Year 7 pupils after the girls missed school is 10% of 400.\n    \n    # We can write two equations:\n    # Equation 1: x - y = 400 (The total number of pupils left at school is 400)\n    # Equation 2: 0.2 * x - y = 0.1 * 400 (The Year 7 pupils left at school is 10% of 400)\n\n    # From Equation 2 we can express y in terms of x:\n    # y = 0.2 * x - 40 \n    \n    # Now we substitute y in Equation 1 with the expression from Equation 2:\n    # x - (0.2 * x - 40) = 400\n    # x - 0.2 * x + 40 = 400\n    # 0.8 * x = 400 - 40\n    # 0.8 * x = 360\n    # Therefore\n    # x = 360 / 0.8\n    # x = 450\n\n    # The total number of pupils normally at school in total is 450.\n    return 450\n\nans = solution()"
    ],
    "0a38ebf245ee4048babeb982de7ed428": [
        "def solution():\n    number_str = '3' * 12\n    number = int(number_str)\n    remainder = number % 7\n    \n    return remainder\n\nans = solution()"
    ],
    "c4e5b60db727448e994c386475bbe6ac": [
        "def solution():\n    terms = [1/(1*2), 2/(2*4), 3/(4*7), 4/(7*11), 5/(11*16), 6/(16*22), 1/22]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "8b3d2426e47742fb80de5edfc5c95b39": [
        "def solution():\n    money_left_after_dress = 40 / (2/5)\n    initial_money = money_left_after_dress / (2/3)\n    return initial_money\n\nans = solution()"
    ],
    "c837716e3d8d4f158df0c801a3ba58fc": [
        "def solution():\n    from math import factorial\n\n    def count_trailing_zeros(n):\n        count = 0\n        i = 5\n        while n // i >= 1:\n            count += n // i\n            i *= 5\n        return count\n\n    num_zeros = count_trailing_zeros(factorial(999)) - count_trailing_zeros(factorial(300))\n    \n    return num_zeros\n\nans = solution()"
    ],
    "bb8f428d14394c4988e5515d435ac635": [
        "def solution():\n    ans = 198 + 298 + 398 + 498\n    return ans\n\nans = solution()"
    ],
    "608b695eba534dd0b83d2b27d7e435ab": [
        "def solution():\n    a = 10\n    b = 9\n    ans = 4 * a + 0.6 * b\n    return ans\n\nans = solution()"
    ],
    "05662ab12b7a42d08cb4ed68f2868599": [
        "def solution():\n    # Given 60 students on the outermost layer forming a square,\n    # This means we have 60 students forming each side of the square.\n    # Since the square is formed layer by layer, we need to calculate\n    # the number of students in each layer and sum them up.\n    \n    # Calculate the total number of layers in the square\n    # Each layer reduces the side of the square by 2 (1 student from each side)\n    total_layers = 60 // 2 + 1  # +1 for the innermost single student\n\n    # Initialize the count of students\n    total_students = 0\n    \n    # Loop through each layer\n    for layer in range(total_layers):\n        # Calculate the students in the current layer\n        # The first and last layer have 'side' students,\n        # and the layers in between have 'side-2' students on top and bottom\n        # and 'side-4' students on left and right without the corners.\n        if layer == 0 or layer == total_layers - 1:\n            students_in_layer = 4 * (60 - 2 * layer)\n        else:\n            students_in_layer = (60 - 2 * layer) * 2 + (58 - 2 * layer) * 2\n        \n        # Add the current layer's students to the total\n        total_students += students_in_layer\n    \n    # Subtracting the overlapping corners once for each layer except the first\n    total_students -= 4 * (total_layers - 1)\n    \n    return total_students\n\nans = solution()"
    ],
    "5a93f9e1eb9e4c528f6c8a07e299ea6a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the original number of buttons in box B be x\n    # Thus, the original number of buttons in box A is x + 64\n    A, B = symbols('A B')\n    \n    # Ken added y buttons to box A and removed 2y buttons from box B\n    y = symbols('y')\n    \n    # After the changes, box B has x - 2y buttons, which are 28 fewer than before\n    # So, x - 2y = x - 28\n    equation1 = Eq(B - 2 * y, B - 28)\n    \n    # The final total number of buttons is (x + 64 + y) + (x - 2y)\n    # The ratio of total buttons to buttons in box B is 4:1\n    # Therefore, (x + 64 + y) + (x - 2y) / (x - 2y) = 4/1\n    equation2 = Eq((A + y) + (B - 2 * y), 4 * (B - 2 * y))\n    \n    # Solve the systems of equations\n    solutions = solve((equation1, equation2), (A, B, y))\n    \n    # Return the solution for the number of buttons in box A at first\n    return solutions[A]\n\nans = solution()"
    ],
    "b3775d03019b4cdcb4930d45861d8841": [
        "def solution():\n    from sympy import symbols, Eq, solve, divisors\n\n    cars, bikes, lorries = symbols('cars bikes lorries')\n\n    # cars is one third more than bikes\n    equation1 = Eq(cars, bikes + bikes / 3)\n    # bikes is one quarter more than lorries\n    equation2 = Eq(bikes, lorries + lorries / 4)\n    # The total number is even and less than 100, we will use these conditions later\n\n    # Substitute equation2 into equation1 to express cars in terms of lorries\n    # cars = (4/3) * (5/4) * lorries = (5/3) * lorries\n    equation1 = equation1.subs(bikes, lorries + lorries / 4)\n    equation3 = Eq(cars, (5/3) * lorries)\n\n    for total_vehicles in range(2, 100, 2):  # total is even, so step by 2\n        # total = cars + bikes + lorries\n        possible_solution = solve((equation3, Eq(cars + bikes + lorries, total_vehicles)), (cars, bikes, lorries))\n        if possible_solution[lorries].is_integer and possible_solution[lorries] > 0 and \\\n           possible_solution[bikes].is_integer and possible_solution[bikes] > 0 and \\\n           possible_solution[cars].is_integer and possible_solution[cars] > 0:\n            return (int(possible_solution[cars]), int(possible_solution[bikes]), int(possible_solution[lorries]))\n\nans = solution()"
    ],
    "b7dd6767772245f2a0cb23c299ebb8cc": [
        "def solution():\n    ans = (18 * 20132013) - (2013 * 180018)\n    return ans\n\nans = solution()"
    ],
    "f5cbd8c2b99c4ff8b9a9ff2d867ac03e": [
        "def solution():\n    return 764 * 7\n\nans = solution()"
    ],
    "564dba708ca745b9b0b4d8a734001762": [
        "def solution():\n    first_term = 2\n    last_term = 42\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "2c22df9d95b44b4db50520cf03c17839": [
        "def solution():\n    total_tiles = 400\n    layer = 0\n    red_tiles = green_tiles = 0\n\n    while total_tiles > 0:\n        layer += 1\n        tiles_in_layer = (2 * layer - 1) ** 2\n        \n        if total_tiles - tiles_in_layer < 0:\n            tiles_in_layer = total_tiles\n        \n        if layer % 2 == 1:\n            red_tiles += tiles_in_layer\n        else:\n            green_tiles += tiles_in_layer\n        \n        total_tiles -= tiles_in_layer\n\n    color = 'red' if red_tiles > green_tiles else 'green'\n    difference = abs(red_tiles - green_tiles)\n\n    return (color, difference)\n\nans = solution()"
    ],
    "4cf1f3c8353c42d48e99e5d8f388a57b": [
        "def solution():\n    total_length = 300\n    interval = 10\n    # One bin at the start and one at the end plus those in between at intervals of 10 meters\n    num_bins = (total_length // interval) + 1\n    return num_bins\n\nans = solution()"
    ],
    "5d7205c22e4740dd84e7bc08f1cd9a65": [
        "def solution():\n    total_won_cards = 24\n    cards_won_per_win = 4\n    cards_lost_per_loss = 2\n    total_rounds = 12\n\n    # Let w be the number of rounds Hana won and l be the number of rounds Hana lost.\n    # We have two equations:\n    # w + l = total_rounds\n    # cards_won_per_win * w - cards_lost_per_loss * l = total_won_cards\n    \n    # From the first equation, we can express w in terms of l: w = total_rounds - l\n    # Substituting w in the second equation, we get:\n    # cards_won_per_win * (total_rounds - l) - cards_lost_per_loss * l = total_won_cards\n    # Solving for l:\n    l = (cards_won_per_win * total_rounds - total_won_cards) / (cards_won_per_win + cards_lost_per_loss)\n\n    return int(l)\n\nans = solution()"
    ],
    "9dfbbfcf5edf458aa1a6122065492810": [
        "def solution():\n    number = \"\"\n    n = 0\n    while True:\n        number = f\"26{2011 * n}7\"\n        if int(number) % 33 == 0:\n            break\n        n += 1\n    return n\n\nans = solution()"
    ],
    "9f759ca5b84e4722b43ef86e4d6a402e": [
        "def solution():\n    flour_per_cake = 326\n    num_cakes = 112\n    total_flour = flour_per_cake * num_cakes\n    return total_flour\n\nans = solution()"
    ],
    "292d7aaf42294c3a913c5cd11bf66c14": [
        "def solution():\n    x, y, z = 20, 19, 18\n    rounds = 0\n    while all(v > 0 for v in [x, y, z]):  # Check that no player has run out of coins\n        # Find the player with the most coins\n        if x >= max(y, z):\n            x -= 2\n            y += 1\n            z += 1\n        elif y >= max(x, z):\n            y -= 2\n            x += 1\n            z += 1\n        elif z >= max(x, y):\n            z -= 2\n            x += 1\n            y += 1\n        rounds += 1\n\n    return rounds\n\nans = solution()"
    ],
    "241c2dd43db940409e5ad15ed39d57aa": [
        "def solution():\n    # This is a problem of splitting n identical items into r identical groups.\n    # It is known as the \"stars and bars\" problem in combinatorics (Theorem Two).\n    # The formula for calculations is: (n + r - 1) choose r - 1\n    # Where (a choose b) is a function that calculates combinations.\n    from math import comb\n    \n    n = 7  # number of lollipops\n    r = 3  # number of plates\n    \n    # Applying the formula:\n    ans = comb(n + r - 1, r - 1)\n    \n    return ans\n\nans = solution()"
    ],
    "3795aecee78f4af494bcf5420bcf0bb2": [
        "def solution():\n    # It takes 3 minutes to make 3 cuts to get 4 pieces\n    # This means that each cut takes 1 minute\n    # To get 8 pieces, Bob needs to make 7 cuts\n    # Therefore, it will take 7 minutes to make 7 cuts\n    time_per_cut = 3 / 3\n    cuts_needed_for_8_pieces = 8 - 1\n    total_time = time_per_cut * cuts_needed_for_8_pieces\n    return total_time\n\nans = solution()"
    ],
    "f22dbe753e484186ac547d34fa2ff25b": [
        "def solution():\n    return 2.7 * 3.9\n\nans = solution()"
    ],
    "94aea93a419044dfa74eed60bd70bafa": [
        "def solution():\n    initial_cards = 236\n    duplicates = 57\n    new_cards = 34\n\n    remaining_cards = (initial_cards - duplicates) + new_cards\n\n    return remaining_cards\n\nans = solution()"
    ],
    "9151e126e4304a27988564dbee6d682a": [
        "def solution():\n    from math import factorial\n\n    # Treat Amy and Judy as a single entity, so we have 7 entities to arrange (6 individuals + 1 pair)\n    arrange_7_entities = factorial(7)\n\n    # Amy and Judy can switch places, so we need to consider 2 permutations for them\n    switch_places = 2\n\n    # The total number of different orders is the product of the two\n    total_orders = arrange_7_entities * switch_places\n\n    # Since the table is circular, we divide by 7 to account for rotations being considered the same\n    total_orders /= 7\n\n    return int(total_orders)\n\nans = solution()"
    ],
    "2a6e8406868b4590b821325ac25f87f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andy_initial, ben_initial = symbols('andy_initial ben_initial')\n\n    equation1 = Eq(andy_initial, ben_initial - 84)\n    equation2 = Eq(andy_initial + andy_initial / 3, (ben_initial + ben_initial / 5) / 3)\n\n    solutions = solve((equation1, equation2), (andy_initial, ben_initial))\n\n    andy_end = solutions[andy_initial] + solutions[andy_initial] / 3\n\n    return andy_end\n\nans = solution()"
    ],
    "b13b087d91c3418cab75e734f729a72f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n\n    # Equations based on the problem statement\n    equation1 = Eq(chai_seng, rasidah + 48)\n    equation2 = Eq(chai_seng * (1 - 6/7), rasidah * (1 - 3/5) / 2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rasidah, chai_seng))\n\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "4f4e10b41d3540d6a2739c9860f76327": [
        "def solution():\n    total_sum = sum(1/i for i in range(1, 8))\n    return int(total_sum)\n\nans = solution()"
    ],
    "237973530d60417cbab4c373e76cf50a": [
        "def solution():\n    from math import gcd\n    \n    pencils = 56\n    pens = 60\n    max_students = gcd(pencils, pens)\n    \n    return max_students\n\nans = solution()"
    ],
    "057332102b164fd582fffc07825bb51c": [
        "def solution():\n    numbers = [0.7, 0.04, 1.006]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "c59949dfd8964b7c95155bd81b7b9c07": [
        "def solution():\n    principal = 35000\n    final_amount = 37100\n    interest_rate = 0.015\n\n    # Calculate the number of years using the compound interest formula:\n    # final_amount = principal * (1 + interest_rate)^years\n    # (1 + interest_rate)^years = final_amount / principal\n    # years = log(final_amount / principal) / log(1 + interest_rate)\n    \n    from math import log\n\n    years = log(final_amount / principal) / log(1 + interest_rate)\n\n    if round(years) == 5:\n        # Bella is correct\n        return 5\n    else:\n        # Bella is wrong, round to the nearest whole number\n        return round(years)\n\nans = solution()"
    ],
    "f4a501507e754c76bc20c97fd6f8faa9": [
        "def solution():\n    current = 18\n    is_positive = True\n    while True:\n        # Alternate between adding and subtracting 1 and 2 appropriately\n        if is_positive:\n            current += 1\n        else:\n            current -= 2\n        is_positive = not is_positive\n        # if current reaches 20th term we break the loop\n        if current in (20, -17):\n            break\n            \n    # Apply the pattern one more time to find the next number\n    if is_positive:\n        current += 1\n    else:\n        current -= 2\n\n    return current\n\nans = solution()"
    ],
    "73d5e9762ad24f7fa6f2d7569f186b42": [
        "def solution():\n    # Since Tom raised his hand in both rounds, he knows his number is divisible by the unknown number and by 24\n    # Therefore, the unknown number must be a factor of 24. \n    # The factors of 24 are 1, 2, 3, 4, 6, 8, 12, and 24.\n    # Since 4 students raised their hands, the unknown number can't be 1 or 2 because then everyone would know their hats are either divisible or not.\n    # Hence, possible unknown numbers are 3, 4, 6, 8, 12, and 24.\n    \n    # Students who raised their hands for the unknown number either have a hat number that is divisible by the unknown number\n    # or they see all other numbers being divisible by the unknown number, thus knowing their own cannot be.\n    # The same logic applies in the case of 24. The numbers on the hats must allow for 6 students to deduce their own number's divisibility.\n    \n    # To find the sum of the 8 numbers, we need two complementary sets of four numbers each \n    # (one set for the unknown number and the other for 24) that are all unique, two-digit, and can be observed by Tom.\n    \n    # Given the constraints, let's try the smallest possible unknown number from the possible list, which is 3.\n    # If the unknown number was 3, the four students who raised their hands could have numbers that are: not divisible by 3\n    # and considering that Tom's number is divisible by 24 (hence by 3), he must see at least one number not divisible by 3.\n    \n    # Additionally, the 6 unique numbers for 24's case could be composed of the numbers not divisible by 24\n    # and they should overlap with the 4 numbers from the 3's case, having Tom's number divisible by 24, in both groups.\n    \n    # Let's assume the numbers that are not divisible by 3 are the smallest 2-digit numbers available:\n    # 10, 11, 13, 14 (Tom sees these numbers in the first round, and one of them is divisible by 24)\n    # for 24, Tom must see numbers divisible by 24 and numbers not divisible by it\n    # since 24 is not a 2-digit number, the smallest 2-digit number Tom can see that is divisible by 24 is 48\n    # the larger numbers Tom could see that are divisible by 24 (and not his own) are: 72, 96 (the next divisible by 24 is 120 which is not 2-digit)\n    # So the remaining two numbers Tom sees in the second round (and are not divisible by 24) are 10 and 11\n    # Therefore, the numbers Tom sees in total are: 10, 11, 13, 14, 48, 72, 96\n    # these seven numbers are unique and two-digit, fulfilling all the constraints\n    # the sum of these numbers is what we seek\n    \n    sum_of_numbers = sum([10, 11, 13, 14, 48, 72, 96])\n    return sum_of_numbers\n\nans = solution()"
    ],
    "e3bab1d410dc404dbc75f29bc60577f7": [
        "def solution():\n    original_numerator = 6\n    original_denominator = 20\n    new_numerator = 12\n\n    new_denominator = (new_numerator * original_denominator) / original_numerator\n    return int(new_denominator)\n\nans = solution()"
    ],
    "f037a02a789f4f3a9d9393741e8484d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the four distinct positive whole numbers be a, b, c, and d (a > b > c > d)\n    a, b, c, d = symbols('a b c d', integer=True, positive=True)\n    \n    # The smallest number is d, and the average of the other three is (a + b + c) / 3\n    equation1 = Eq(d + (a + b + c) / 3, 39)\n    \n    # The largest number is a, and the average of the other three is (b + c + d) / 3\n    equation2 = Eq(a + (b + c + d) / 3, 51)\n    \n    # Solve the equations to get expressions for a and d\n    solutions = solve((equation1, equation2), (a, d))\n    \n    # Since a is the largest number and we want the largest possible value of the largest number,\n    # substitute the expressions of a in terms of b and c into the inequalities a > b, a > c, a > d\n    # We also know that the numbers are distinct positive whole numbers.\n    b, c = symbols('b c', integer=True, positive=True)\n    max_a = 0\n    for b_val in range(1, 100):  # limit the search to avoid an infinite loop, in practice the range can be determined\n        for c_val in range(1, b_val):\n            d_val = solutions[d].subs({b: b_val, c: c_val})\n            a_val = solutions[a].subs({b: b_val, c: c_val, d: d_val})\n            if d_val.is_integer and a_val.is_integer and a_val > b_val and a_val > c_val and d_val > 0 and a_val > d_val:\n                max_a = max(max_a, a_val)\n    \n    return max_a\n\nans = solution()"
    ],
    "d19c1cad2e934abcb96adf33ea0fad9b": [
        "def solution():\n    # let's assume the distance between the school and their home is d meters\n    # Ahmad's speed is 80 m/min and his brother's speed is 50 m/min\n    # Ahmad met his brother 210 meters from school implies that Ahmad traveled d + (d - 210) meters\n    # His brother traveled (d - 210) meters at this time\n    # We can set up the equation based on the time they spent walking as:\n    # Time = Distance / Speed\n    # Time is the same for both until they meet, \n    # so (d + (d - 210)) / 80 = (d - 210) / 50\n    # Solving the equation for d gives us the distance from home to school\n    \n    # Speeds\n    speed_ahmad = 80\n    speed_brother = 50\n    \n    # meeting distance from school\n    meet_distance = 210\n    \n    # Calculating the distance using the equation above\n    # (d + (d - meet_distance)) / speed_ahmad = (d - meet_distance) / speed_brother\n    # Simplify to get d\n    d = meet_distance / (1/speed_brother - 1/speed_ahmad)\n    \n    return d\n\nans = solution()"
    ],
    "303367dad74a4dfb9a731577b950143b": [
        "def solution():\n    # Since the pens are identical, this is a problem of partitioning an integer\n    # We want to partition the number 6 into 3 parts, and each part must be at least 1\n    # Since each pencil case cannot be empty, we start by putting one pen in each case\n    pens = 6 - 3\n\n    # Now we have 3 pens left to distribute in 3 pencil cases\n    # For each pencil case, we have 3 options: \n    # 1. Give all remaining pens to one pencil case\n    # 2. Give 1 pen to one case and 2 pens to another\n    # 3. Give 1 pen to each case\n    # These are the permutations with repetition of 3 elements from the picks of 0, 1, and 2 pens\n    # However, since the cases are distinguishable, we can calculate this as:\n    # (pens + cases - 1) choose (cases - 1) which is equivalent to (3+3-1) choose (3-1)\n    from math import comb\n    total_ways = comb(pens + 3 - 1, 3 - 1)\n\n    return total_ways\n\nans = solution()"
    ],
    "2c1f33a3652843e18c61ed4042aa9d84": [
        "def solution():\n    total_passed_at_least_one = 43\n    total_math = 30\n    total_science = 28\n    total_english = 25\n\n    # Using Inclusion-Exclusion Principle for 3 sets:\n    # |A ∪ B ∪ C| = |A| + |B| + |C| - |A ∩ B| - |A ∩ C| - |B ∩ C| + |A ∩ B ∩ C|\n    # The maximum number of students passing all three tests is:\n    # |A ∩ B ∩ C| = |A| + |B| + |C| - |A ∪ B ∪ C| for the minimum of |A ∩ B|,\n    # |A ∩ C|, and |B ∩ C| which is 0 (since we want the maximum |A ∩ B ∩ C|).\n\n    max_all_three_tests = total_math + total_science + total_english - total_passed_at_least_one\n\n    # |A ∩ B ∩ C| cannot be negative, so we make sure to return at least 0\n    max_all_three_tests = max(0, max_all_three_tests)\n\n    return max_all_three_tests\n\nans = solution()"
    ],
    "70234dd3b3ad4df4976b94f3fc2b43b6": [
        "def solution():\n    from fractions import Fraction\n\n    # Calculate the first complex fraction\n    numerator_1 = Fraction(1, 30) + Fraction(1, 6)\n    denominator_1 = Fraction(2, 25)\n    complex_fraction_1 = numerator_1 / denominator_1\n\n    # Calculate the second complex fraction\n    numerator_2 = 2 - Fraction(2, 3)\n    denominator_2 = Fraction(8, 3)\n    complex_fraction_2 = numerator_2 / denominator_2\n\n    # Add the two complex fractions together\n    ans = complex_fraction_1 + complex_fraction_2\n\n    return float(ans)  # Convert the fraction to a float for the final result\n\nans = solution()"
    ],
    "f5859830704a437f8da45cb32fad686c": [
        "def solution():\n    number = 8844\n    higher_place_value = 8 * 1000  # The leftmost 8\n    lower_place_value = 8 * 10     # The second 8 from the left\n    difference = higher_place_value - lower_place_value\n    return difference\n\nans = solution()"
    ],
    "a1813c83d15f4f918bb921475c77ae6b": [
        "def solution():\n    largest_palindrome = 0\n    smallest_palindrome = 99999\n    for i in range(999, 99, -1):\n        pal = int(str(i) + str(i)[-2::-1])  # create the palindromic number\n        if pal % 45 == 0:  # check if it's a multiple of 45\n            largest_palindrome = max(largest_palindrome, pal)\n            smallest_palindrome = min(smallest_palindrome, pal)\n    return largest_palindrome - smallest_palindrome\n\nans = solution()"
    ],
    "a8da05a870cb4d889d878067168a25f3": [
        "def solution():\n    # A number is divisible by 4 if its last two digits form a number divisible by 4.\n    # A number is divisible by 5 if its last digit is either 0 or 5.\n    \n    # Since the number is divisible by 5, A must be 0 or 5.\n    for A in [0, 5]:\n        num = int('572' + str(A))\n        if num % 4 == 0:\n            return A\n\nans = solution()"
    ],
    "8730c5dc402e4057a7e7d6856f461142": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Step 1: Write the congruences based on the problem\n    congruences = [(1, 5), (2, 6), (7, 11)]\n\n    # Step 2: Find the common supplement (the common remainder) by applying Chinese Remainder Theorem\n    common_supplement, lcm_divisors = solve_congruence(*congruences)\n\n    # Step 3: The unknown is the common supplement\n    unknown = common_supplement\n\n    return unknown\n\nans = solution()"
    ],
    "5f74a8aa962b42f9a008f301d384a07d": [
        "def solution():\n    num = 40309\n    while True:\n        num += 1\n        if str(num) == str(num)[::-1]:\n            break\n    return num - 40309\n\nans = solution()"
    ],
    "00ada5e7f99244a19a9c65f66bf12fe4": [
        "def solution():\n    import math\n    \n    length_ribbon_1 = 16\n    length_ribbon_2 = 24\n\n    longest_piece_length = math.gcd(length_ribbon_1, length_ribbon_2)\n\n    return longest_piece_length\n\nans = solution()"
    ],
    "27f205a241de4c258f0bfe079d7d85e0": [
        "def solution():\n    luna_position = 7\n    sheep_behind = 4\n    total_sheep = luna_position + sheep_behind\n    return total_sheep\n\nans = solution()"
    ],
    "c5f435f6f01d47f984563502e879e7c1": [
        "def solution():\n    hourly_wage = 18\n    desired_earnings = 270\n\n    hours_needed = desired_earnings / hourly_wage\n\n    return hours_needed\n\nans = solution()"
    ],
    "6fd3dee61dd1454aba4ca3fdcb068b42": [
        "def solution():\n    ans = (36 + 8 * 4 - 8) / 10\n    return ans\n\nans = solution()"
    ],
    "15a26c7f348e44f0984ed5433abaeb4a": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for year in range(1000, 2023):\n        digits = set(str(year))\n        if len(digits) == 4:\n            all_perms = set(permutations(str(year)))\n            for perm in all_perms:\n                perm_int = int(''.join(perm))\n                if perm_int >= 1000:\n                    sequence = sorted([int(d) for d in perm])\n                    if sequence == list(range(min(sequence), max(sequence)+1)):\n                        count += 1\n                        break\n    return count\n\nans = solution()"
    ],
    "692dd4bd8aad469b93929bfd3c53cde1": [
        "from itertools import combinations\n\ndef solution():\n    bags = [19, 21, 27, 32, 37, 40]\n    red_marbles = 0\n    \n    for combo in combinations(bags, 3):\n        # Jaslin's bags\n        jaslin = sum(combo)\n        # George's bags\n        george = sum(bags) - jaslin - red_marbles\n        \n        if jaslin == 2 * george:\n            red_bags = [bag for bag in bags if bag not in combo]\n            red_marbles = sum(red_bags) - george\n            break\n    \n    return red_marbles\n\nans = solution()"
    ],
    "306362839da448f6af25c3777e0f4fb8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the mean score of all 10 students\n    x = symbols('x')\n\n    # Equation for the mean score of the top 3 students\n    mean_top_3 = 92\n\n    # Equation for the mean score of the last 7 students\n    mean_last_7 = x - 6\n\n    # Since the mean is the sum of scores divided by the number of scores,\n    # we can set up the following equation:\n    total_score_top_3 = 3 * mean_top_3\n    total_score_last_7 = 7 * mean_last_7\n    total_score_all_students = 10 * x\n\n    # Set the total score of all students equal to the sum of total scores of top 3 and last 7\n    equation = Eq(total_score_top_3 + total_score_last_7, total_score_all_students)\n\n    # Solve for x\n    mean_score_all_students = solve(equation, x)\n\n    return mean_score_all_students[0]\n\nans = solution()"
    ],
    "31ae45e446194415af930b6a32732592": [
        "def solution():\n    # Let the smallest even number be x\n    # then the five consecutive even numbers are x, x+2, x+4, x+6, x+8\n    # Their sum is 5x + 20 and that is given to be 100\n    # 5x + 20 = 100 => 5x = 80 => x = 16\n\n    # Therefore, the smallest of these five numbers is 16\n    return 16\n\nans = solution()"
    ],
    "96bf00410c5d499991e067f6eac1c2fb": [
        "def solution():\n    speed = 550 / 5  # speed in km/h\n    distance = speed * 3  # distance traveled in 3 hours\n    return distance\n\nans = solution()"
    ],
    "932e3588f77946a58e948ab41abb1c9f": [
        "def solution():\n    remaining_apples = 150\n    fraction_sold = 2/5\n    total_apples = remaining_apples / (1 - fraction_sold)\n    return total_apples\n\nans = solution()"
    ],
    "123966a82052442699a9217c1798213b": [
        "def solution():\n    distance_per_jump = 3\n    total_jumps = 15 - 1  # Jumps needed to go from the 1st post to the 15th post\n    total_distance = distance_per_jump * total_jumps\n    return total_distance\n\nans = solution()"
    ],
    "102565a663954649adc3478cad3c899d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andre, beth = symbols('andre beth')\n\n    # Andre and Beth have a total of 24 sweets initially\n    equation1 = Eq(andre + beth, 24)\n    # After receiving 4 sweets each, Andre now has 6 more sweets than Beth\n    equation2 = Eq(andre + 4 - (beth + 4), 6)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (andre, beth))\n\n    # Return the number of sweets Beth has after receiving 4 sweets\n    return solutions[beth] + 4\n\nans = solution()"
    ],
    "dd7ef81126644ff58215f822282cae06": [
        "def solution():\n    from math import lcm\n    return lcm(1, 2, 3, 4, 5)\n\nans = solution()"
    ],
    "7c976da5c8314e559893fed4d2545dcc": [
        "def solution():\n    ans = 342 - (85 - 78) * 15\n    return ans\n\nans = solution()"
    ],
    "30fcda504e8d40b4aeaac401d2df58e4": [
        "def solution():\n    total_fruits = 18 + 30 + 36  # Total fruits are pears, strawberries, and apples\n    friends = 6\n    \n    fruits_per_friend = total_fruits // friends\n    \n    return fruits_per_friend\n\nans = solution()"
    ],
    "4e5a3868c9c2434595c65034ace0b292": [
        "def solution():\n    from math import factorial as f\n    from fractions import Fraction\n\n    # Total number of arrangements for the blocks is 12!/(2!)^6\n    total_arrangements = f(12) // f(2)**6\n\n    # Number of favorable cases calculated by case analysis.\n    # By considering 6 blocks as 3 pairs (RR, GG, BB, OO, YY, PP), we have to\n    # arrange these 6 \"single\" blocks. This can be done in 6!/2^3 ways because\n    # each pair is indistinguishable and for each pair, the odd block can be \n    # in position 1 or 3, giving a factor of 2 for each.\n    # Then, we place the remaining block of each color in one of the 7 places\n    # which results in 7^6 arrangements.\n\n    # However, if for a given pair, both balls are together like RR, we have to\n    # subtract the arrangements where this happens, which is 6!/2^2 for the 5 pairs\n    # arrangement and then 6 * 6^5 for placing the remaining blocks (6 choices for\n    # the double block and 6^5 for the others)\n\n    # Favorable arrangements calculation\n    favorable_cases = (f(6) // f(2)**3) * 7**6 - (5 * (f(6) // f(2)**2)) * 6**5\n\n    # Probability\n    probability = Fraction(favorable_cases, total_arrangements)\n    probability = probability.limit_denominator()\n\n    # The answer is the sum of the numerator and the denominator of the simplified fraction\n    return probability.numerator + probability.denominator\n\nans = solution()"
    ],
    "e71f218803924703bffc15e15224ba0b": [
        "def solution():\n    # Alan and Bob together rate\n    rate_together = 1 / 4\n    \n    # Bob's rate\n    rate_bob = 1 / 6\n    \n    # Alan's rate\n    rate_alan = rate_together - rate_bob\n    \n    # Time taken by Alan alone\n    time_alan = 1 / rate_alan\n\n    return time_alan\n\nans = solution()"
    ],
    "cd38959f92fb4e319b79a21e7b76d58f": [
        "def solution():\n    prob_rain_saturday = 0.7\n    prob_rain_sunday = 0.5\n    prob_no_rain_saturday = 1 - prob_rain_saturday\n    prob_no_rain_sunday = 1 - prob_rain_sunday\n\n    prob_rain_at_least_one_day = 1 - (prob_no_rain_saturday * prob_no_rain_sunday)\n    \n    return prob_rain_at_least_one_day\n\nans = solution()"
    ],
    "2876f7ddaab14397976d9a29249f7fe2": [
        "def solution():\n    a_rate = 1/36\n    b_rate = 1/48\n    filled = 0\n    time = 0\n\n    while filled < 1:\n        time += 1\n        filled += a_rate  # Inlet A for 1 minute\n        if filled >= 1:\n            break\n            \n        time += 2\n        filled += 2 * b_rate  # Inlet B for 2 minutes\n        if filled >= 1:\n            break\n            \n        time += 2\n        filled += 2 * a_rate  # Inlet A for 2 minutes\n        if filled >= 1:\n            break\n            \n        time += 1\n        filled += b_rate  # Inlet B for 1 minute\n        if filled >= 1:\n            break\n\n    return round(time)\n\nans = solution()"
    ],
    "58c65fe8c729419faa7ab40e34ec522c": [
        "def solution():\n    matthew_pencils = 31\n    samantha_pencils = matthew_pencils - 6\n    return samantha_pencils\n\nans = solution()"
    ],
    "79f67407094f46b5b519e683dcaa47b1": [
        "def solution():\n    ans = (46 + 7*3 - 7) / 20\n    return ans\n\nans = solution()"
    ],
    "a95c5e315cdc4b218288615a503b9e17": [
        "def solution():\n    # Let x be the number of correctly answered questions\n    # Then, (10 - x) will be the number of incorrectly answered questions (since there are 10 questions in total)\n    for x in range(0, 11):\n        if (x * 10) - ((10 - x) * 3) == 48:\n            return 10 - x\n\nans = solution()"
    ],
    "8a6cf5778ac04779aa35bd346944e9ea": [
        "def solution():\n    n = 1\n    zeros = 0\n    while zeros < 28:\n        n += 1\n        temp = n\n        while temp % 5 == 0:\n            temp //= 5\n            zeros += 1\n    return n - 1\n\nans = solution()"
    ],
    "0d15eca36ec748eeb767eb2dd214bad3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    henry, fred, richard = symbols('henry fred richard')\n    \n    equation1 = Eq(richard, henry - 3.24)\n    equation2 = Eq(fred, richard + 5.6)\n    equation3 = Eq(henry + fred + richard, 204.56)\n    \n    solutions = solve((equation1, equation2, equation3), (henry, fred, richard))\n    \n    return float(solutions[fred])\n\nans = solution()"
    ],
    "a3fdcafb566f460b979225e8d39c3503": [
        "def solution():\n    # Lucas initially has 10 empty bottles from the mineral water he bought\n    empty_bottles = 10\n\n    # The shop owner lends him 1 empty bottle\n    empty_bottles += 1\n\n    # Number of bottles Lucas can drink\n    total_bottles_drunk = 10\n\n    while empty_bottles >= 2:\n        # Exchange the empty bottles for new full bottles\n        new_bottles = empty_bottles // 2\n        total_bottles_drunk += new_bottles\n\n        # Calculate the remaining empty bottles\n        empty_bottles = empty_bottles % 2 + new_bottles\n\n    # Return the final number of bottles Lucas can drink\n    return total_bottles_drunk\n\nans = solution()"
    ],
    "b69896aa9f7e46fe9132abed6a7e3e0e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the time passed as 't' minutes.\n    t = symbols('t')\n    \n    # Let \"full\" be the total water height in the pools when full\n    # Since the speeds are inversely proportional to the time,\n    # A drains 1/10 of full per minute, and B drains 1/6 of full per minute.\n    \n    # The remaining height of A's water after time 't' is full - (1/10)*full*t\n    # The remaining height of B's water after time 't' is full - (1/6)*full*t\n    # According to the problem, the height of A's water should be 3 times that of B's\n    # so we can set up the following equation:\n    equation = Eq((1 - (1/10)*t), 3*(1 - (1/6)*t))\n    \n    # Solve the equation for 't' to find the time\n    result = solve(equation, t)\n    \n    # We only need the positive, real solution for time\n    return result[0]\n\nans = solution()"
    ],
    "e5f11fb592e84030a40404b984c70a41": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(51 - 3 * (2 * x - 2), 21)\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "5f4e105849d24adda1343493fbfdba1e": [
        "def solution():\n    total_children = 18\n    vanessa_pos_from_front = 10\n    andrea_pos_from_end = 12\n\n    andrea_pos_from_front = total_children - andrea_pos_from_end + 1\n    children_between = andrea_pos_from_front - vanessa_pos_from_front - 1\n\n    return children_between\n\nans = solution()"
    ],
    "8447879252624d80abee2367655025a7": [
        "def solution():\n    sweets_initial = 320\n    sweets_per_week = 30\n    sweets_final = 348\n    weeks = 7\n\n    sweets_eaten_per_week = (sweets_initial + sweets_per_week * weeks - sweets_final) // weeks\n\n    return sweets_eaten_per_week\n    \nans = solution()"
    ],
    "aef19b3423ea4e4db4e653899791075e": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"281{digit}\")\n        if number % 6 == 0:\n            return digit\n\nans = solution()"
    ],
    "7c9f36ec8f484e11986b79be63c2965e": [
        "def solution():\n    total_path = 5 / 6\n    fenced_path = 2 / 3\n    unfenced_path = total_path - fenced_path\n    \n    return unfenced_path\n    \nans = solution()"
    ],
    "33b87e7146da47bfaf494ee09b2a87fc": [
        "def solution():\n    louise_time = 4\n    sally_time = 3 * louise_time\n    return sally_time\n\nans = solution()"
    ],
    "eac1ed2db4cd4aeba3d60c1847748394": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((10*x - 8) - (12 - 10*x), 2)\n\n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "a9cffd9f20194c40af59a76b9109b46e": [
        "def solution():\n    import math\n    ans = math.gcd(16, 36)\n    return ans\n\nans = solution()"
    ],
    "298e42b0f337482ab1dc2d26faaf6521": [
        "import itertools\n\ndef solution():\n    # Since there are no details on the time problem and \"overseas competition\" does not provide much context,\n    # I am making an assumption. Let's assume the time problem involves arranging the digits in \"1\" which is trivial.\n    # There's only one way to arrange the single digit \"1\".\n\n    # Hence, the answer.\n    ans = 1\n    return ans\n\nans = solution()"
    ],
    "101213693c2745c385e01db607de76dc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the distance be 'd' kilometers\n    d = symbols('d')\n\n    # Speed at 3 km/h, time is t + 12/60 hours (12 minutes late)\n    # Speed at 7 km/h, time is t - 8/60 hours (8 minutes early)\n\n    # Equation for the first case (12 min late)\n    equation1 = Eq(d/3, d/7 + 20/60)  # Converted 12 + 8 = 20 minutes to hours\n\n    # Solve for d\n    distance = solve(equation1, d)\n\n    return distance[0]\n\nans = solution()"
    ],
    "7e5f8417567e4906a4369f99123b1772": [
        "def solution():\n    # Let x be the original number of sweets Yue Ying has\n    # Then, Chenxi has x + 5 sweets\n    # Chenxi gives Yue Ying 10 sweets, which means Chenxi will have (x + 5) - 10 sweets and\n    # Yue Ying will have x + 10 sweets after the exchange\n    # The new difference will be the absolute value of their sweets after the exchange\n    # new_difference = |(x + 5 - 10) - (x + 10)|\n    # Simplify the above expression to get the final answer\n    new_difference = abs((x + 5 - 10) - (x + 10))\n    \n    # Plugging in values, we get new_difference = |(x - 5) - (x + 10)| = |-15|\n    new_difference = 15\n    \n    return new_difference\n\nans = solution()"
    ],
    "b97c96624e2c48adabfda458ee48cae5": [
        "def solution():\n    percentage = 35\n    amount = 200\n    result = (percentage / 100) * amount\n    return result\n\nans = solution()"
    ],
    "192fafc0d2ce44eb94ff567dea0bb271": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 70))\n    for prime in primes:\n        if 69 - prime in primes:\n            return abs(69 - 2*prime)\n\nans = solution()"
    ],
    "cc0957dc16a0487dbd25e08d32dfd716": [
        "def solution():\n    goats = 6\n    lambs = 4 * goats - 4\n    return lambs\n\nans = solution()"
    ],
    "90d3eecee3cc4363a4700ae0f6ac9f45": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let A be the number of students in school A originally\n    # Let B be the number of students in school B originally\n    A, B = symbols('A B')\n\n    # Equation 1: Total students before transfer\n    equation1 = Eq(A + B, 1050)\n\n    # Equation 2: After transfer, A - 20 is still 10 more than B + 20\n    equation2 = Eq(A - 20, (B + 20) + 10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "94a7862baa614940812b4e4e2f3f9368": [
        "def solution():\n    return 254 * 6\n\nans = solution()"
    ],
    "a0395fcbfd2d439aa13dcc4f5226aeb1": [
        "def solution():\n    total_questions = 10\n    possible_scores = [10 * x - 5 * (total_questions - x) for x in range(total_questions + 1)]\n    correct_answers = possible_scores.index(70)\n    return correct_answers\n\nans = solution()"
    ],
    "369c0cce832f4bee85b43ed04d21f9c1": [
        "def solution():\n    total_students = 35\n    math_students = 20\n    both_classes = 11\n    neither_class = 10\n\n    # Using the Inclusion-Exclusion Principle to find number of students in writing class only\n    writing_only = total_students - (math_students + neither_class - both_classes)\n    \n    return writing_only\n\nans = solution()"
    ],
    "8b5d0f2f1fc844cfbe9a313fbf4b0b31": [
        "from sympy import *\n\ndef solution():\n    # Original expression\n    expr = '15+5*5+15-6+7'\n\n    # Generating all possible pairs of positions to insert brackets\n    positions = [(i, j, k, l) for i in range(len(expr)) for j in range(i+2, len(expr))\n                 for k in range(j+2, len(expr)) for l in range(k+2, len(expr))]\n\n    max_value = -float('inf')\n    for p in positions:\n        # Inserting brackets into the expression string\n        new_expr = expr[:p[0]] + '(' + expr[p[0]:p[1]] + ')' + expr[p[1]:p[2]] + '(' + expr[p[2]:p[3]] + ')' + expr[p[3]:]\n        \n        # Evaluating the new expression\n        evaluated_expr = eval(new_expr)\n        \n        # Updating the maximum value and the best expression\n        if evaluated_expr > max_value:\n            max_value = evaluated_expr\n            best_expr = new_expr\n\n    return max_value, best_expr  # Return the largest result and the expression that achieves it\n\nans = solution()"
    ],
    "067c82adbd46460b82300b0fbc1bcc13": [
        "from sympy import isprime\n\ndef solution():\n    digits = '08072003'  # Judy's birthday digits\n    primes = set()\n\n    # Check all possible combinations of the digits for prime numbers < 50\n    for i in range(1, len(digits) + 1):\n        for j in range(10**(i-1), 10**i):\n            str_num = str(j)\n            if sorted(str_num) <= sorted(digits) and isprime(j) and j < 50:\n                primes.add(j)\n    return max(primes)\n\nans = solution()"
    ],
    "f90a5e4a189b415caad9310b12a991d9": [
        "def solution():\n    total_average = 54\n    first_two_average = 48\n    total_numbers = 5\n    first_two_numbers = 2\n\n    total_sum = total_average * total_numbers\n    first_two_sum = first_two_average * first_two_numbers\n    last_three_sum = total_sum - first_two_sum\n    last_three_average = last_three_sum / (total_numbers - first_two_numbers)\n\n    return last_three_average\n\nans = solution()"
    ],
    "4822c5372e3f4b81b32d47e02e9fb76a": [
        "def solution():\n    sum_odds = sum(range(1, 18 + 1, 2))\n    return sum_odds\n\nans = solution()"
    ],
    "ff96cbe022d54ccd8c38734e0820996b": [
        "def solution():\n    # Each cut can increase the maximum number of pieces by the number of pieces it crosses.\n    # The first cut creates 2 pieces.\n    # The second cut crosses 1 existing piece, creating 2 more pieces, for a total of 4.\n    # The third cut can cross 2 existing pieces, creating 3 more pieces, for a total of 7.\n    # The fourth cut can cross 3 existing pieces, creating 4 more pieces, for a total of 11.\n    # The formula for the maximum number of pieces with n cuts is (n^2 + n + 2) / 2.\n    # For 4 cuts, the maximum number of pieces is (4^2 + 4 + 2) / 2 = (16 + 4 + 2) / 2 = 22 / 2 = 11.\n\n    cuts = 4\n    max_pieces = (cuts**2 + cuts + 2) // 2\n    return max_pieces\n\nans = solution()"
    ],
    "86c522861eca4579aee63cfe6a2ed4f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    teddy, father = symbols('teddy father')\n\n    # When Teddy was 5, his father was 7 times his age\n    age_difference = father - 7 * teddy\n\n    # When Teddy's father is 40, their age difference remains the same\n    teddy_future_age = symbols('teddy_future_age')\n    equation = Eq(father + (40 - 7*5), teddy_future_age + 40)\n\n    # Solve for Teddy's age when his father will be 40\n    teddy_future_age = solve(equation.subs(father, 7*5), teddy_future_age)\n\n    return teddy_future_age[0]\n\nans = solution()"
    ],
    "de1d2a07c3e741a88e3e8a8c740433f4": [
        "def solution():\n    total_toys = 40\n    elephant_position = 10\n    toys_between = 5\n\n    rabbit_position_from_left = elephant_position + toys_between\n    rabbit_position_from_right = total_toys - rabbit_position_from_left + 1\n\n    return rabbit_position_from_right\n\nans = solution()"
    ],
    "218aeeff17964c29855e70445931229c": [
        "def solution():\n    # Since the number of adults is given as 2/7 of the total, and 4/5 of the remaining is boys\n    # we can denote the total number of people as 'total'.\n    # According to Adriana's workings, the fraction of girls is incorrect.\n    # The fraction of the remaining audience after adults is 5/7 (since 1 - 2/7 = 5/7).\n    # The fraction of the boys from the remaining audience is 4/5 * 5/7 = 4/7.\n    # Therefore, the actual fraction for girls is 1 - 4/7 = 3/7 of the remaining audience.\n    # The fraction of girls from the total audience is then 3/7 * 5/7 = 15/49.\n    # The fraction of adults from the total audience is 2/7 as given.\n    # The difference between adults and girls in fraction form is 2/7 - 15/49 which simplifies to  9/49.\n    # Since the difference is 80 people in numbers, we can equate 9/49 of the total to 80 to find the total number of people.\n    \n    # difference = (adults - girls) / total\n    # 9/49 = 80 / total\n    # total = 80 * 49 / 9\n    total = (80 * 49) // 9\n    \n    return total\n\nans = solution()"
    ],
    "6d776ddacbf9461eb585ab73856e3bc6": [
        "def solution():\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    total_sum = sum(sum_of_digits(page) for page in range(1, 110))\n\n    return total_sum\n\nans = solution()"
    ],
    "fc10a17cccd04e8a8b4ba3e7393837eb": [
        "def solution():\n    base = 9\n    area = 54\n    # Area of a triangle is 0.5 * base * height\n    # To find height, rearrange the formula: height = (2 * area) / base\n    height = (2 * area) / base\n    return height\n\nans = solution()"
    ],
    "a0a9b4817586473ab82958503266de20": [
        "def solution():\n    ans = 82 + 5135 + 109\n    return ans\n\nans = solution()"
    ],
    "7e59f3d16bb944d0af7260fa7a6a1a05": [
        "def solution():\n    ans = sum(i**2 for i in range(2, 33, 3))\n    return ans\n\nans = solution()"
    ],
    "0625264c9a9d4b1e9c10ef4590d1be1c": [
        "def solution():\n    # Let p be the number of pink dolphins\n    # Since the number of gray dolphins is 11 times the number of pink dolphins, we can represent the number of gray dolphins as 11p\n    # According to the problem, the total number of dolphins (pink + gray) is 48\n    # So, the equation will be: p + 11p = 48\n\n    # Solve for p\n    p = 48 / (1 + 11)\n\n    return int(p)\n\nans = solution()"
    ],
    "0d83a44b34bd44cba27a54d4aa0c0f8b": [
        "def solution():\n    numerator = 2**2019\n    denominator = 4**982 - 2**1963\n\n    # Simplify denominator using properties of exponents\n    # Notice that 4^982 is the same as (2^2)^982 = 2^(2*982) = 2^1964\n    denominator_simplified = 2**1964 - 2**1963\n\n    # Factor out 2^1963 from denominator\n    # We get 2^1963 * (2 - 1) = 2^1963\n    denominator_factored = 2**1963\n\n    # Now the expression is equivalent to 2^2019 / 2^1963\n    # Dividing same base numbers with exponents subtracts the exponents: 2^(2019-1963)\n    remainder_term = 2**(2019 - 1963)\n\n    # Calculate remainder divided by 5\n    remainder = remainder_term % 5\n\n    return remainder\n\nans = solution()"
    ],
    "62900d76501a411095425c90066b6baa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    tables, chairs = symbols('tables chairs')\n    \n    # Original condition, equal number of tables and chairs\n    original_condition = Eq(tables, chairs)\n    \n    # After transaction condition\n    after_transaction = Eq(chairs + 24, 4 * (tables - 42))\n    \n    # Solve the system of equations\n    solutions = solve((original_condition, after_transaction), (tables, chairs))\n    \n    return solutions[chairs]\n\nans = solution()"
    ],
    "501f99ad661542b685b7602cc769d419": [
        "def solution():\n    ans = 0.35 * 700\n    return ans\n\nans = solution()"
    ],
    "1f92ac5fcbf346a58c902a4e56d63b9f": [
        "def solution():\n    cabinets_left_of_candy = 4\n    cabinets_right_of_candy = 7\n    cabinets_with_candy = 1  # Including Candy's cabinet\n\n    total_cabinets = cabinets_left_of_candy + cabinets_with_candy + cabinets_right_of_candy\n\n    return total_cabinets\n\nans = solution()"
    ],
    "d0df4689449e49dbaa0b915c5b1e0d16": [
        "def solution():\n    dividend = 1914\n    divisor = 6\n    ans = dividend // divisor\n    return ans\n\nans = solution()"
    ],
    "72e9171f682743098c4b8fec888c8a50": [
        "def solution():\n    books_first_day = 455\n    books_second_day = 198\n    total_books = books_first_day + books_second_day\n    return total_books\n\nans = solution()"
    ],
    "1a265e25f6874c5db75962c369ac17bc": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if i % 2 == 0 and sum(map(int, str(i))) == 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "71839d8b337447be8093660f325bbed7": [
        "def solution():\n    for y in range(10):\n        if (1060 + y) % 18 == 0:\n            return y\n\nans = solution()"
    ],
    "b5bf6927be4b4a3087a39281607f3658": [
        "def solution():\n    initial_cookies = 15\n    eaten_cookies = 6\n\n    remaining_cookies = initial_cookies - eaten_cookies\n\n    return remaining_cookies\n\nans = solution()"
    ],
    "b61bf81e98dd4cc3b300767de6effa6e": [
        "def solution():\n    for num in range(99, -1, -1):\n        full_number = int(f\"49{num:02d}\")\n        if full_number % 2 == 0 and full_number % 3 == 0 and full_number % 5 == 0:\n            return full_number\n\nans = solution()"
    ],
    "4950b20e3ff347308b65c01922e1ecd1": [
        "def solution():\n    n = 100\n    sum_of_cubes = (n ** 2 * (n + 1) ** 2) // 4\n    sum_of_numbers = n * (n + 1) // 2\n    ans = sum_of_cubes / sum_of_numbers\n    return ans\n\nans = solution()"
    ],
    "d75c9444af574fdf91925c609d2dc5d8": [
        "def solution():\n    boxes_per_class = 8\n    num_classes = 5\n    total_boxes = boxes_per_class * num_classes\n    return total_boxes\n\nans = solution()"
    ],
    "0c07d3cceff140638bcc02cfd4b815c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote motorcycles as m, cars as c, and lorries as l\n    m, c, l = symbols('m c l')\n\n    # We have three equations based on the problem statement\n    # Total number of vehicles\n    eq1 = Eq(m + c + l, 27)\n    # Total number of wheels\n    eq2 = Eq(2*m + 4*c + 6*l, 96)\n    # Number of cars is equal to the number of lorries\n    eq3 = Eq(c - l, 0)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (m, c, l))\n\n    return solutions[c]\n\nans = solution()"
    ],
    "7c6943752cfb4c10ba5d271cbd98b7f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ana, olaf, kristoff = symbols('ana olaf kristoff')\n\n    equation1 = Eq(ana - olaf, 116)  # Ana is 116cm taller than Olaf\n    equation2 = Eq(kristoff, 5.5 * olaf)  # Kristoff is five and a half times the height of Olaf\n    equation3 = Eq(ana, 150)  # Ana is 150cm\n\n    solutions = solve((equation1, equation2, equation3), (ana, olaf, kristoff))\n\n    kristoff_ana_difference = solutions[kristoff] - solutions[ana]\n\n    return kristoff_ana_difference\n\nans = solution()"
    ],
    "825b09d6a8a7435181cbe8f03a8719e8": [
        "def solution():\n    ans = 113 - 29\n    return ans\n\nans = solution()"
    ],
    "67726d4c5f1c43f99ab8c34d4c1d1255": [
        "def solution():\n    total_mass = 700  # total mass of the sugar solution\n    concentration = 0.32  # 32% concentration\n    mass_sugar = total_mass * concentration  # mass of sugar in the solution\n    mass_water = total_mass - mass_sugar  # mass of water in the solution\n    \n    return mass_water\n\nans = solution()"
    ],
    "ccf4b3c1375049a0a9b0d364cd87dedb": [
        "def solution():\n    result = 3.05 - 1/10\n    return result\n\nans = solution()"
    ],
    "ca40261e554e488db8f2110589404752": [
        "def solution():\n    total_length = 800\n    trees = 21\n    intervals = trees - 1\n    distance = total_length / intervals\n\n    return distance\n\nans = solution()"
    ],
    "41cb580f803a4484aa9de2340f620cd5": [
        "def solution():\n    return 132 // 11\n\nans = solution()"
    ],
    "64edc5874141435dbc97c986f5c8c721": [
        "def solution():\n    # Let x be the mass of each chocolate and y be the mass of the jar.\n    # Based on the information given:\n    # 5x + y = 185  (1)\n    # 17x + y = 317 (2)\n    \n    # We can solve the two equations to find the values of x and y:\n    # Subtract equation (1) from equation (2):\n    # (17x + y) - (5x + y) = 317 - 185\n    # 12x = 132\n    # x = 132 / 12\n    x = 132 / 12\n    \n    # Now substitute x back into equation (1) to find y:\n    # 5x + y = 185\n    y = 185 - (5 * x)\n    \n    # Finally, we calculate the mass of the jar with 10 chocolates:\n    # 10x + y\n    mass_with_10_chocolates = (10 * x) + y\n    \n    return mass_with_10_chocolates\n\nans = solution()"
    ],
    "9e5d33c0a5ac43408701c0c051cab6e9": [
        "def solution():\n    divisible_by_2 = lambda x: x % 2 == 0\n    divisible_by_3 = lambda x: sum(int(d) for d in str(x)) % 3 == 0\n    divisible_by_5 = lambda x: x % 5 == 0\n    divisible_by_11 = lambda sum_1, sum_2: abs(sum_1 - sum_2) % 11 == 0\n\n    smallest_number = float('inf')\n    \n    # Since the number ends with 5, it is divisible by 5.\n    # The second last digit should be even for the number to be divisible by 2.\n    for digit_2 in range(0, 10, 2): # iterate over possible even digits\n        for digit_1 in range(0, 10):\n            for digit_0 in range(0, 10, 5): # iterate over last digit, can only be 0 or 5\n                current_number = int(f\"1992{digit_1}{digit_2}{digit_0}\")\n                if divisible_by_2(current_number) and divisible_by_3(current_number) and divisible_by_5(current_number):\n                    # To apply divisibility by 11 rule:\n                    # Alternate sum of digits must be divisible by 11, i.e., | (1+9+9+2) - (digit_1+digit_2+digit_0) | % 11 == 0\n                    sum_1, sum_2 = (1+9+9+2), (digit_1+digit_2+digit_0)\n                    if divisible_by_11(sum_1, sum_2):\n                        smallest_number = min(smallest_number, current_number)\n    \n    return smallest_number\n\nans = solution()"
    ],
    "b5e2b7a8198347d0b928d1181cc5ab24": [
        "def solution():\n    total_first_half = 366\n    average_second_half_per_month = 65\n    months_in_half_year = 6\n\n    total_second_half = average_second_half_per_month * months_in_half_year\n    total_saved = total_first_half + total_second_half\n    months_in_year = 12\n\n    average_per_month = total_saved / months_in_year\n\n    return average_per_month\n\nans = solution()"
    ],
    "5f82ecd1f2614283b498976475a87d7c": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    apples_cost_per = 0.60\n    total_cost = 150\n    \n    # Defining the variables for the number of fruits\n    apples, pears, mangoes = symbols('apples pears mangoes', positive=True, integer=True)\n    \n    # John bought 4/5 as many pears as apples\n    eq1 = Eq(pears, 4/5 * apples)\n    \n    # John bought 2/5 as many mangoes as apples\n    eq2 = Eq(mangoes, 2/5 * apples)\n    \n    # The ratio of the cost of apples to pears is 3:2, given the cost per apple\n    # Therefore, total cost of apples is 3/2 times the cost of pears\n    # cost_apples = 3/2 * cost_pears\n    eq3 = Eq(apples * 0.60, 3/2 * pears * (total_cost / (3*apples + 2*pears + mangoes)))\n    \n    # The ratio of the cost of pears to mangoes is 1:5\n    # cost_pears = 1/5 * cost_mangoes\n    eq4 = Eq(pears * (total_cost / (3*apples + 2*pears + mangoes)), 1/5 * mangoes * (total_cost / (3*apples + 2*pears + mangoes)))\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4), (apples, pears, mangoes))\n\n    # Calculate the total number of fruits\n    total_fruits = solutions[apples] + solutions[pears] + solutions[mangoes]\n\n    return total_fruits\n\nans = solution()"
    ],
    "e20396c1126c4c378303deff5dbb8965": [
        "from math import factorial\n\ndef solution():\n    word = 'ELEMENT'\n    letter_frequencies = {letter: word.count(letter) for letter in set(word)}\n    \n    total_letters = len(word)\n    denominator = 1\n    for freq in letter_frequencies.values():\n        denominator *= factorial(freq)\n    \n    ans = factorial(total_letters) // denominator\n    return ans\n\nans = solution()"
    ],
    "bee2bb31e9cc4bfd97c140eb2cd7ca84": [
        "def solution():\n    # Hazel's age in three years\n    hazel_age_in_three_years = 9\n    # Hazel's current age\n    hazel_current_age = hazel_age_in_three_years - 3\n\n    # Jessica's current age\n    jessica_current_age = hazel_current_age - 3\n\n    # Their total age next year\n    total_age_next_year = (hazel_current_age + 1) + (jessica_current_age + 1)\n\n    return total_age_next_year\n\nans = solution()"
    ],
    "d09c9b0c4c064e1d91b4be6e28603df8": [
        "def solution():\n    first_term = 4\n    last_term = 11\n    num_terms = (last_term - first_term) + 1\n    sum_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_sequence\n\nans = solution()"
    ],
    "2f7331548e4c4ead9882750734e9dcb3": [
        "def solution():\n    def gcd(a, b):\n        while b != 0:\n            a, b = b, a % b\n        return a\n\n    ans = gcd(4811, 1981)\n    return ans\n\nans = solution()"
    ],
    "56e4e8204ffd46788f19f0fb559476b9": [
        "def solution():\n    average_six = 92\n    average_five = 94\n    total_six = average_six * 6\n    total_five = average_five * 5\n    score_sixth = total_six - total_five\n    return score_sixth\n\nans = solution()"
    ],
    "60a921961e274ba6b7944a53c0a16d35": [
        "def solution():\n    cost_price = 65\n    selling_price = 74\n    remaining_pairs = 5\n    total_profit = 440\n\n    # profit per pair of shoes\n    profit_per_pair = selling_price - cost_price\n\n    # number of pairs of shoes sold to make the total profit\n    number_sold_pairs = total_profit // profit_per_pair\n\n    # total number of pairs of shoes purchased initially\n    total_pairs_purchased = number_sold_pairs + remaining_pairs\n\n    return total_pairs_purchased\n\nans = solution()"
    ],
    "c3537d94f9474c1681dd753250a4e937": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    halfway_time = datetime.strptime(\"5:30 PM\", \"%I:%M %p\")\n    end_time = datetime.strptime(\"7:15 PM\", \"%I:%M %p\")\n    \n    duration = end_time - halfway_time\n    start_time = halfway_time - duration\n    \n    return start_time.strftime(\"%I:%M %p\").lstrip(\"0\")\n\nans = solution()"
    ],
    "bf8d648694e046798009b3bcb8b11a51": [
        "def solution():\n    cars_now = 30\n    cars_entered = 8\n    cars_exited = 10\n\n    cars_initial = cars_now - cars_entered + cars_exited\n\n    return cars_initial\n\nans = solution()"
    ],
    "f0661ff980b543b2890c0b2cd9ed594d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    equation = Eq(((2 * x / 4) ** 2 - 4) / 10, 6)\n\n    ans = solve(equation, x)\n\n    return ans[0]\n\nans = solution()"
    ],
    "91f1dc30074b4cc5ba3de816f8ebe024": [
        "def solution():\n    total_liter = 59\n    fill_rate = 10\n    leak_rate = 3\n    current_liter = 3\n    days = 1\n    while current_liter < total_liter:\n        current_liter += fill_rate\n        if current_liter >= total_liter:\n            break\n        current_liter -= leak_rate\n        days += 1\n    return days\n\nans = solution()"
    ],
    "ea2b0754dbd44371b1caf18c22c52d19": [
        "def solution():\n    ans = 1234 - 566\n    return ans\n\nans = solution()"
    ],
    "33baf7cac5884fbc952fe20bd5c8b056": [
        "def solution():\n    toys_per_minute = 27 / 5\n    toys_in_20_minutes = toys_per_minute * 20\n    return int(toys_in_20_minutes)\n\nans = solution()"
    ],
    "9921f066d3b9491bb6209aef0e315efb": [
        "def solution():\n    from math import gcd\n\n    # Days between each visit\n    amy_days = 24\n    ginny_days = 36\n\n    # Calculate least common multiple\n    lcm = (amy_days * ginny_days) // gcd(amy_days, ginny_days)\n\n    return lcm\n\nans = solution()"
    ],
    "c71b3187758541f2a9be1885e9788daf": [
        "def solution():\n    amounts = [\n        (1/2) * 30,\n        (1/3) * 36,\n        (1/4) * 40,\n        (1/5) * 60,\n        (1/6) * 96\n    ]\n\n    smallest = min(amounts)\n    largest = max(amounts)\n\n    ans = largest - smallest\n\n    return ans\n\nans = solution()"
    ],
    "2d3e8ce232944b0da4446730b18adc15": [
        "def solution():\n    seconds_in_half_hour = 30 * 60\n    digits_written = 0\n    current_number = 0\n\n    while digits_written < seconds_in_half_hour:\n        current_number += 1\n        digits_written += len(str(current_number))\n\n    if digits_written == seconds_in_half_hour:\n        return current_number  # The exact number has just been finished\n    else:\n        return current_number - 1  # Since we surpassed the time limit with the last number\n\nans = solution()"
    ],
    "63ccfd7c8f7948138140e37b2a8721c9": [
        "def solution():\n    from math import comb\n    teams = 20\n    matches = comb(teams, 2)\n    return matches\n\nans = solution()"
    ],
    "2526a9251202448c82ca74dc1af18fd8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    end_time = datetime.strptime('11:20 PM', '%I:%20 %p')\n    start_time = end_time - timedelta(minutes=225)\n    start_time_formatted = start_time.strftime('%I:%M %p')\n    return start_time_formatted.strip('0')\n\nans = solution()"
    ],
    "4b4550a7fb5a4da1879ab82345527afa": [
        "def solution():\n    # Worst case scenario assuming Darrell does not pick any green marble\n    # would be if he picks all blue, white, and black marbles first\n    blue = 5\n    white = 9\n    black = 2\n\n    # First green marble would be the one following all the other color marbles\n    num_draws_for_first_green = blue + white + black + 1\n\n    return num_draws_for_first_green\n\nans = solution()"
    ],
    "d325179a1a7c406b95abe95c9433bf65": [
        "def solution():\n    toys_per_minute = 27 / 3\n    return toys_per_minute\n\nans = solution()"
    ],
    "32e0c31f837f484dbc8307ce7ebbf9f6": [
        "def solution():\n    initial_rabbits = 32\n    years = 3\n\n    for year in range(years):\n        initial_rabbits = (3 * initial_rabbits) // 2  # Triple the population then halve it\n\n    return initial_rabbits\n\nans = solution()"
    ],
    "1a9163a8cb424cb9a9accd781412b79a": [
        "def solution():\n    total_distance = 20\n    daily_climb = 6\n    seventh_day_climb = 2\n    \n    # Calculate the total distance climbed after 6 days.\n    six_day_distance = daily_climb * 6\n    \n    # On the 7th day, the snail climbs an additional 2 meters.\n    # We need to find the nighttime sliding distance such that the snail\n    # will climb out on the 7th day after sliding back the previous night.\n    # So, after sliding back on the 6th night, the snail should be at a distance\n    # such that 2 meters more will get it out of the well.\n    \n    # Height reached before sliding back on the 6th night\n    height_before_sliding_sixth_night = total_distance - seventh_day_climb\n    \n    # Nightly slide distance is the extra distance the snail climbed in the first 6 days\n    # that it should not have surpassed before climbing the last 2 meters on the 7th day.\n    nightly_slide = six_day_distance - height_before_sliding_sixth_night\n    \n    return nightly_slide\n\nans = solution()"
    ],
    "7a85e45de1cf4eefac785ffc876e2419": [
        "def solution():\n    puffs_per_hour = 24 / 2\n    hours_for_120_puffs = 120 / puffs_per_hour\n    return hours_for_120_puffs\n\nans = solution()"
    ],
    "e45c3400530944688f0b7c15612c3f65": [
        "def solution():\n    # Let's denote Candy's walking speed in meters per minute as c.\n    # Then Ivy's walking speed would be c + 20 meters per minute.\n    \n    # The total time Ivy walked is 6 (the head start) + 12 minutes = 18 minutes.\n    # The total time Candy walked is 12 minutes.\n\n    # The distance Ivy walked is (c + 20) * 18.\n    # The distance Candy walked is c * 12.\n\n    # The sum of the distances walked should be equal to 1200 meters.\n    # So, we have the equation: (c + 20) * 18 + c * 12 = 1200\n\n    # Now we solve this equation for c.\n    from sympy import symbols, solve\n\n    c = symbols('c')\n    equation = (c + 20) * 18 + c * 12 - 1200\n\n    candy_speed = solve(equation, c)[0]\n\n    return candy_speed\n\nans = solution()"
    ],
    "00b3826fde0d4426bbae01c933f41959": [
        "def solution():\n    # In a single round-robin tournament with 8 players, each player plays against every other player once.\n    # Therefore, each player plays 7 games since there are 7 opponents.\n    # The number of wins should be unique for each player to record a different number of wins.\n    # Since we have a single champion, the champion must be the one with the maximum number of wins.\n    # This means the champion cannot tie with anyone else in terms of the number of wins.\n    # The possible number of wins for each players could be from 0 to 7 (inclusive), covering 8 unique values.\n    # The champion, having the most number of wins, should have 7 wins, which is the maximum in a 7-game tournament.\n\n    return 7 # The champion has 7 wins.\n\nans = solution()"
    ],
    "17b260645d6a414ab42dd5105d17a7a0": [
        "from itertools import combinations_with_replacement\nfrom math import prod\n\ndef solution():\n    numbers = range(1, 14)\n    max_product = 0\n    for combination in combinations_with_replacement(numbers, 4):\n        if sum(combination) == 13:\n            max_product = max(max_product, prod(combination))\n    return max_product\n\nans = solution()"
    ],
    "9931681699674c94a55cbd91e9fef93d": [
        "def solution():\n    scale_ratio = 6  # 1 cm represents 6 m in real life\n    playground_length_plan = 5  # The playground is 5 cm on the plan\n\n    real_playground_length = scale_ratio * playground_length_plan\n    return real_playground_length\n\nans = solution()"
    ],
    "407e3d4abdd84948b11417cc857b3a6f": [
        "def solution():\n    weight1 = 6  # weight of first metal in mg\n    nickel1 = 0.45  # nickel concentration in first metal (45%)\n    \n    weight2 = 14  # weight of second metal in mg\n    nickel2 = 0.60  # nickel concentration in second metal (60%)\n    \n    total_weight = weight1 + weight2\n    total_nickel = (weight1 * nickel1) + (weight2 * nickel2)\n    \n    percent_nickel_concentration = (total_nickel / total_weight) * 100\n    \n    return percent_nickel_concentration\n\nans = solution()"
    ],
    "a3f71bfa7bda47abb06c88dc5fe9c667": [
        "def solution():\n    for number in range(10, 100):\n        if number % 3 == 1 and number % 5 == 1:\n            return number\n\nans = solution()"
    ],
    "0b323f74ff2440bd99945e7df07c7d9e": [
        "def solution():\n    # Let's denote the number of years in which Edward's mother will be three times as old as Edward by n.\n    # Edward's age after n years will be 8 + n\n    # His mother's age after n years will be 32 + n\n    # We are looking for a value of n where 32 + n = 3 * (8 + n)\n    \n    # Rearrange the equation: 32 + n = 3 * (8 + n)\n    # 32 + n = 24 + 3n\n    # n = (32 - 24) / (3 - 1)\n    n = (32 - 24) // 2\n\n    return n\n\nans = solution()"
    ],
    "844dc49550ce457b94476fbbf9b26070": [
        "def solution():\n    return (3/5) * 35\n\nans = solution()"
    ],
    "7fc9064a1aa5469aa93c3e1bbde4bbee": [
        "def solution():\n    cost_per_box = 6\n    total_money = 250\n\n    boxes_bought = total_money // cost_per_box\n\n    return boxes_bought\n\nans = solution()"
    ],
    "dc7f0a68b9f24779bc4219332172235f": [
        "def solution():\n    missing_number = 4060800 - 4000000 - 800\n    return missing_number\n\nans = solution()"
    ],
    "f824d5ccf33349d2ab0f1608091dea39": [
        "def solution():\n    for n in range(1, 1000):  # Assuming the number of students is less than 1000\n        if (n**2 + 11) == ((n + 1)**2 - 12):\n            return n**2 + 11\n\nans = solution()"
    ],
    "75141a0eda0b4ee188fda622dacab4d8": [
        "def solution():\n    tank_a = 673\n    tank_b = tank_a + 56\n    return tank_b\n\nans = solution()"
    ],
    "82a289b59d824994b394d0497a34059a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys = 15\n    boys_apples = boys * 30\n    avg_apples = 26\n\n    girls = symbols('girls')\n    total_apples = boys_apples + 20 * girls\n    total_people = boys + girls\n\n    average_equation = Eq(total_apples / total_people, avg_apples)\n\n    solutions = solve(average_equation, girls)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "ba3fa896136240449736cb46b7e3fc42": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pen, pencil = symbols('pen pencil')\n\n    equation1 = Eq(pencil, pen - 0.5)\n    equation2 = Eq(pen + pencil, 4.5)\n\n    solutions = solve((equation1, equation2), (pen, pencil))\n\n    return solutions[pen]\n\nans = solution()"
    ],
    "e5322713de5247778392f797381187c3": [
        "def solution():\n    total_cost = 340\n    total_balls = 12\n    cost_basketball = 30\n    cost_volleyball = 25\n\n    for basketballs in range(total_balls + 1):\n        volleyballs = total_balls - basketballs\n        if (basketballs * cost_basketball + volleyballs * cost_volleyball) == total_cost:\n            return basketballs\n\nans = solution()"
    ],
    "12650053179d4354abc37f8acdc2f5cc": [
        "def solution():\n    total_wealth = 15000000\n    richie_share = total_wealth * 1 / 3\n    remaining_after_richie = total_wealth - richie_share\n    thrifty_share = remaining_after_richie * 1 / 2\n    remaining_after_thrifty = remaining_after_richie - thrifty_share\n    bounty_share = remaining_after_thrifty * 2 / 5\n    archie_share = remaining_after_thrifty - bounty_share\n\n    return archie_share\n    \nans = solution()"
    ],
    "78ccf674710b4fe69a75eac5a5e851fe": [
        "def solution():\n    cost_of_8_books = 32\n    cost_of_1_book = cost_of_8_books / 8\n    cost_of_12_books = cost_of_1_book * 12\n    return cost_of_12_books\n\nans = solution()"
    ],
    "548479b1b79a4bb28ce823621c5abeeb": [
        "def solution():\n    initial_candy = 36\n    candy_given_to_lily = (3 / 4) * initial_candy\n    remaining_candy_after_lily = initial_candy - candy_given_to_lily\n    candy_given_to_brother = (1 / 3) * remaining_candy_after_lily\n    remaining_candy = remaining_candy_after_lily - candy_given_to_brother\n    return remaining_candy\n\nans = solution()"
    ],
    "033994c93a6b45b089e9faa4e06774ed": [
        "def solution():\n    ans = sum(sum(1/i for i in range(1, 61)) - 1)\n    return ans\n\nans = solution()"
    ],
    "ba33391702c54eddadac0a6dea3e8f20": [
        "def solution():\n    x = (16 - 1) / 5\n    return x\n\nans = solution()"
    ],
    "e41fa665820a4926b055fb0c8e503a19": [
        "def solution():\n    ans = 427 // 7\n    return ans\n\nans = solution()"
    ],
    "fdb38dfc8f624402a53c64aee38c936c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables for the amounts Roy and Dennis start with.\n    roy, dennis = symbols('roy dennis')\n    \n    # Original sum of their money equals $340\n    equation1 = Eq(roy + dennis, 340)\n    # After spending, Dennis has twice as much as Roy\n    equation2 = Eq((1 - 1/4) * dennis, 2 * (1 - 2/3) * roy)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (roy, dennis))\n    \n    # Calculate Dennis' remaining money after spending 1/4 of it.\n    dennis_end = solutions[dennis] * (3/4)\n    \n    return dennis_end\n\nans = solution()"
    ],
    "5084bbc7b89c41b5bf2edb1303aac223": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    friday = symbols('friday')\n    \n    saturday = friday + 27\n    sunday = friday - 14\n    total_puffs = friday + saturday + sunday\n\n    equation = Eq(total_puffs, 475)\n    solution = solve(equation, friday)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "6a7f195d4df34990a4361a1279619703": [
        "def solution():\n    used_digits = 300\n    digits = 0\n    page = 0\n    \n    while digits < used_digits:\n        page += 1\n        digits += len(str(page))\n    \n    if digits > used_digits:\n        page -= 1\n    \n    return page\n\nans = solution()"
    ],
    "5c220b4fa8654c3a8555329850f8525d": [
        "def solution():\n    return 675 // 25\n\nans = solution()"
    ],
    "29250105e9c04c48bd1439676ca2782d": [
        "def solution():\n    total_cost = 235.60\n    number_of_balls = 8\n    ball_cost = 20.45\n    number_of_hula_hoops = 6\n    \n    total_ball_cost = number_of_balls * ball_cost\n    total_hula_hoop_cost = total_cost - total_ball_cost\n    cost_per_hula_hoop = total_hula_hoop_cost / number_of_hula_hoops\n    \n    return cost_per_hula_hoop\n\nans = solution()"
    ],
    "49f01b25ab6d4b69801d88a94adc488b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the mass of each type of candies in one container\n    strawberry, chocolate, mint = symbols('strawberry chocolate mint')\n\n    # Define variables for the total mass of each container\n    total_mass1, total_mass2, total_mass3 = symbols('total_mass1 total_mass2 total_mass3')\n\n    # Equations based on the fraction of strawberry candies and total masses relationship\n    equation1 = Eq(strawberry, 2/5 * total_mass1)\n    equation2 = Eq(strawberry, 2/7 * total_mass2)\n    equation3 = Eq(strawberry, 2/9 * total_mass3)\n\n    # Equation based on the fact that the amount of mint candies always stayed the same in every container\n    equation4 = Eq(mint, total_mass1 - strawberry - chocolate)\n    equation5 = Eq(mint, total_mass2 - strawberry - chocolate)\n    equation6 = Eq(mint, total_mass3 - strawberry - chocolate)\n\n    # Equation based on the total mass of all 3 containers\n    equation7 = Eq(total_mass1 + total_mass2 + total_mass3, 1371)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6, equation7), \n                     (strawberry, chocolate, mint, total_mass1, total_mass2, total_mass3))\n\n    # Sum up the mass of strawberry candies from all three containers\n    strawberry_mass_total = solutions[strawberry] * (2/5 + 2/7 + 2/9)\n\n    return strawberry_mass_total\n\nans = solution()"
    ],
    "52d042e76d354b68ac3284571d64fe18": [
        "def solution():\n    return -12 - 5\n\nans = solution()"
    ],
    "93cbd8cff1724a0288df495bf1bf1129": [
        "from sympy import factorint\n\ndef solution():\n    factors = factorint(693)\n    # To make a perfect square, each prime factor's exponent in the prime\n    # factorization must be even. If it's odd, we need to multiply it by that prime once more.\n\n    product = 1\n    for prime, exponent in factors.items():\n        if exponent % 2 != 0:\n            product *= prime\n\n    return product\n\nans = solution()"
    ],
    "efc1886d8b6e41288f275b25df4f1970": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A = symbols('A')\n    equation = Eq(2 + 1/(2 + 1/(1 + 1/(2 + 1/A))), 64/27)\n\n    solutions = solve(equation, A)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "f92015fcf25b4f6b8a4c6c33740e86b0": [
        "def solution():\n    total_cartons = 8\n    juice_per_carton = 3\n    juice_consumed = 9\n    container_volume = 5\n    \n    total_juice = total_cartons * juice_per_carton\n    remaining_juice = total_juice - juice_consumed\n    containers_needed = -(-remaining_juice // container_volume)  # Ceiling division\n\n    return containers_needed\n\nans = solution()"
    ],
    "2294a90b377245e5a243e024c10b9e33": [
        "def solution():\n    # Calculate the unit digit of 13**242\n    unit_digit_13 = pow(13, 242, 10)\n    \n    # Calculate the unit digit of 17**379\n    unit_digit_17 = pow(17, 379, 10)\n    \n    # Calculate the unit digit of 4**2012\n    unit_digit_4 = pow(4, 2012, 10)\n    \n    # Calculate the unit digit of the entire expression\n    ans = (unit_digit_13 + (unit_digit_17 * unit_digit_4)) % 10\n    \n    return ans\n\nans = solution()"
    ],
    "298f22aae19b448d8ed281fe1ffd1c6a": [
        "def solution():\n    total_people = 22\n    position_from_front = 12\n    position_from_end = total_people - position_from_front + 1\n    return position_from_end\n\nans = solution()"
    ],
    "73173ea4753941c1aebae06530689d79": [
        "def solution():\n    return 498 + 349\n\nans = solution()"
    ],
    "d56e2d0f4d3c49c09a9d9d2fae148065": [
        "def solution():\n    steak_weight = 3 + 1 / 2\n    cost_per_kg = 7.50\n    note_value = 20\n\n    total_cost = steak_weight * cost_per_kg\n    money_needed = total_cost - note_value\n\n    return money_needed if money_needed > 0 else 0\n\nans = solution()"
    ],
    "615a06562ee54cbf883a97926cfa289a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    marry, alexis, charlotte_initial, charlotte_final = symbols('marry alexis charlotte_initial charlotte_final')\n    \n    # Marry has 7/5 as many stickers as Alexis\n    equation1 = Eq(marry, (7/5) * alexis)\n    \n    # Marry and Alexis each gave 20% of their stickers to Charlotte\n    equation2 = Eq(charlotte_final, charlotte_initial + 0.2 * marry + 0.2 * alexis)\n    \n    # Charlotte's stickers increased by 80%\n    equation3 = Eq(charlotte_final, charlotte_initial * 1.8)\n    \n    # Mary had 20 stickers more than Charlotte in the end\n    equation4 = Eq(marry, charlotte_final + 20)\n    \n    solutions = solve((equation1, equation2, equation3, equation4), (marry, alexis, charlotte_initial, charlotte_final))\n    \n    return solutions[alexis]\n\nans = solution()"
    ],
    "099b78e49bc4404ba303b17fc521c8a1": [
        "def solution():\n    return 6.5 + 2.55\n\nans = solution()"
    ],
    "f1a8a109f87844d5bb0f0d3f4dd4d789": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    light, heavy = symbols('light heavy')\n    \n    # heavy ball is twice the mass of a light one\n    equation1 = Eq(heavy, 2 * light)\n    \n    # total mass of bowling balls\n    equation2 = Eq(6 * light + 6 * heavy, 65.7)\n\n    solutions = solve((equation1, equation2), (light, heavy))\n\n    return round(solutions[light])\n\nans = solution()"
    ],
    "07cef45a5cd34546b160beb5d63ff929": [
        "def solution():\n    scores = [8, 14, 11, 9, 12, 9]\n    average_score = sum(scores) / len(scores)\n    return average_score\n\nans = solution()"
    ],
    "866c8e678e0948b59e1d7291359716df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    benson, clive = symbols('benson clive')\n    total_money = 705\n    cost_calculator = 34\n    cost_racket = 63\n    \n    # Benson had benson - cost_calculator left after buying the calculator\n    # Clive had clive - cost_racket left after buying the racket\n    # They then had the same amount of money left\n    equation1 = Eq(benson - cost_calculator, clive - cost_racket)\n    # The total amount of money they originally had\n    equation2 = Eq(benson + clive, total_money)\n    \n    solutions = solve((equation1, equation2), (benson, clive))\n    \n    return solutions[clive]\n\nans = solution()"
    ],
    "a3b2b317382c413b950d13170728af7c": [
        "def solution():\n    count = 0\n    for i in range(1, 10):  # The first digit must be 1-9\n        for j in range(10):  # The second digit can be 0-9\n            # The third and fourth digits will mirror the first and second\n            palindromic_number = int(f'{i}{j}{j}{i}')\n            if 1000 <= palindromic_number <= 9999:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "1c2eb2be878c46f9abd8fe0eebfe90e0": [
        "def solution():\n    sweets_A = 42\n    sweets_B = 4 * sweets_A\n    sweets_C = 2 * sweets_B\n\n    return sweets_C\n\nans = solution()"
    ],
    "d9fe69458a16475bb892b329f85a2176": [
        "def solution():\n    # Let's denote avg_x_y as the average of x and y.\n    avg_a_b = 50\n    avg_b_c = 43\n    avg_a_c = 45\n\n    # Calculate the sum of A and B (s_a_b), sum of B and C (s_b_c), and sum of A and C (s_a_c)\n    s_a_b = avg_a_b * 2\n    s_b_c = avg_b_c * 2\n    s_a_c = avg_a_c * 2\n\n    # Using the fact that s_a_b + s_b_c + s_a_c = 2*(A + B + C)\n    s_a_b_c = (s_a_b + s_b_c + s_a_c) / 2\n\n    # Now we find the average of A, B, and C.\n    avg_a_b_c = s_a_b_c / 3\n\n    return avg_a_b_c\n\nans = solution()"
    ],
    "a81399939c8c430caa4f5477791e6872": [
        "def solution():\n    ans = 3192 // 7\n    return ans\n\nans = solution()"
    ],
    "0463082fb7794b94ba6e248f5672f584": [
        "def solution():\n    total_pens = 126\n    # Let x be the number of pens Denise has.\n    # Then Jay has 6x pens.\n    # x + 6x = total_pens\n    # 7x = total_pens\n    # x = total_pens / 7\n    denise_pens = total_pens // 7\n    return denise_pens\n\nans = solution()"
    ],
    "1f147f03ccef4ae3a50a01ccda70772f": [
        "def solution():\n    ans = 18 - 4 * 2 + 3\n    return ans\n\nans = solution()"
    ],
    "0e1222f712bc4ffca972c05b2effd15b": [
        "def solution():\n    chocolate_bar_price = 1.26\n    total_cost_chocolate = 5 * chocolate_bar_price\n    cost_per_cookie = total_cost_chocolate / 6\n    money_initially = 9.05\n    cost_of_cookies_bought = 4 * cost_per_cookie\n    money_left = money_initially - cost_of_cookies_bought\n    \n    return round(money_left, 2)\n\nans = solution()"
    ],
    "040686faef95411e8585542ead1f8966": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    \n    # equation for total children\n    equation1 = Eq(boys + girls, 650)\n    \n    # equation for total balls\n    equation2 = Eq(boys/3 + girls/2, 250)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    return solutions[girls]\n\nans = solution()"
    ],
    "d9c3ed810a164a26992ebd764b6a4339": [
        "def solution():\n    for number in range(1, 100):\n        if 8 * 11 == number * 9 + 34:\n            return number\n\nans = solution()"
    ],
    "a36e566f98e442f5842ab9407dee385e": [
        "def solution():\n    count = 0\n    \n    for i in range(100, 1000):\n        if i % 2 == 0:  # Check if the number is even\n            digits = [int(d) for d in str(i)]\n            if sum(digits) == 8:  # Check if the digits add up to 8\n                count += 1\n                \n    return count\n\nans = solution()"
    ],
    "b623a87ccea1499fb63634242cab4656": [
        "def solution():\n    midday_temp = 8\n    decrease = 12\n\n    midnight_temp = midday_temp - decrease\n\n    return midnight_temp\n\nans = solution()"
    ],
    "adcc0ea38c5c483abfaedf299c74cb3f": [
        "def solution():\n    # Let's denote the number of 10-cent coins as 8x and 50-cent coins as 3x\n    # Then the total amount of money in cents is 10 * 8x + 50 * 3x\n    # We know that the total amount is $75.90 or 7590 cents\n    # So, the equation will be 10 * 8x + 50 * 3x = 7590\n\n    # Solving for x, first we combine like terms\n    # 80x + 150x = 7590\n    # 230x = 7590\n\n    # Now, solving for x\n    x = 7590 / 230\n\n    # Now we find the total value of the 50-cent coins\n    # There are 3x 50-cent coins\n    # So, the total value in cents is 50 * 3x\n    total_value_50_cent = 50 * 3 * x\n\n    # Convert cents to dollars for the final answer\n    return total_value_50_cent / 100\n\nans = solution()"
    ],
    "b488441291104e42b32567c3545040a8": [
        "def solution():\n    original_price = 6400 / 0.20  # Calculate the original price before the discount\n    savings = original_price - 6400  # Calculate how much money was saved\n    return savings\n\nans = solution()"
    ],
    "05b194fb5bbb4281aed3fa88a9af81f6": [
        "def solution():\n    outer_volume = 320\n    base_side_length = 7\n    hole_side_length = 3\n    hole_volume = hole_side_length ** 2 * base_side_length\n    filled_volume = outer_volume + hole_volume\n    height = filled_volume / (base_side_length ** 2)\n    return height\n\nans = solution()"
    ],
    "d48e695fe4c940b2acce011d716fb7cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n\n    # After 25 girls went outside, girls became 2/3 of boys\n    eq1 = Eq(girls - 25, 2/3 * boys)\n    \n    # After 15 boys went to play, the number became equal\n    eq2 = Eq(boys - 15, girls - 25)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (girls, boys))\n\n    # Calculate the total number of students at first\n    total_students = solutions[girls] + solutions[boys]\n\n    return total_students\n\nans = solution()"
    ],
    "f21d41597e6646d3be1d07eaad6c595f": [
        "def solution():\n    cuts = 0\n    pieces = 1\n    while pieces < 46:\n        pieces += cuts\n        cuts += 1\n    return cuts\n\nans = solution()"
    ],
    "e31b6f292ecc4753a2d83469dc4590f1": [
        "def solution():\n    from math import factorial\n    # Treat Amy and Judy as one person\n    # There are now 7 \"people\" to arrange in a circle: (7 - 1)!\n    arrangements_without_rotation = factorial(7 - 1)\n    \n    # However, Amy and Judy can swap places, so there are 2! arrangements for them\n    arrangements_for_amy_judy = factorial(2)\n    \n    # Total arrangements is the product of the two above\n    total_arrangements = arrangements_without_rotation * arrangements_for_amy_judy\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "871597fa52dc4a36a7d42eaa6aca7343": [
        "def solution():\n    total_numbers = 0\n    current_group = 1\n\n    while total_numbers < 2008:\n        total_numbers += current_group\n        if total_numbers >= 2008:\n            return current_group - (total_numbers - 2008)\n        current_group += 1\n\nans = solution()"
    ],
    "3893320e66ba431cbd94be3d97bd7bad": [
        "def solution():\n    return 35 * 24\n\nans = solution()"
    ],
    "c3a6b54c36ae43b689f9746376889267": [
        "def solution():\n    sequence = range(6, 27, 4)\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "102d1f62f1754310866b41a5ade5f3d8": [
        "def solution():\n    tomatoes = 27\n    cucumbers = (tomatoes - 3) // 3\n    return cucumbers\n\nans = solution()"
    ],
    "449ef10f90444f13893b5ba270bc69ce": [
        "def solution():\n    weight_of_one_x = 1.5  # g\n    number_of_xs = 3\n    number_of_ys = 10\n\n    # Let weight_of_one_y be the weight of one y we want to find\n    # According to the balance equation: (number_of_xs * weight_of_one_x) = (number_of_ys * weight_of_one_y)\n    weight_of_one_y = (number_of_xs * weight_of_one_x) / number_of_ys\n\n    return weight_of_one_y\n\nans = solution()"
    ],
    "1772deb848c44e73a5983aef50ac6df7": [
        "from itertools import permutations\n\ndef solution():\n    digits = [3, 5, 9]\n    perm = permutations(digits, 3)\n    return len(list(perm))\n\nans = solution()"
    ],
    "d18ff02cbbaf44fa82bc520bd52cd64e": [
        "def solution():\n    count = 0\n    for i in range(1, 10):  # hundreds digit, from 1 to 9\n        for j in range(10):  # tens digit, from 0 to 9\n            for k in range(10):  # ones digit, from 0 to 9\n                if i + j + k == 5:  # sum of digits equals 5\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "2f72bb76e3534c5eb2dc23ed6c53c0ad": [
        "def solution():\n    total_sum = 0\n    for number in range(1, 101):\n        if number % 5 == 2:\n            total_sum += number\n    return total_sum\n\nans = solution()"
    ],
    "a669b2ca57f844deb0cba08516ef70d7": [
        "def solution():\n    total_bags = 15\n    given_away = total_bags // 3\n    remaining = total_bags - given_away\n    return remaining\n\nans = solution()"
    ],
    "36f6ee82d6634a45b07c1a4564134d1c": [
        "def solution():\n    # Number of nights\n    n = 31\n    # Mosquitoes eaten on the 16th night\n    a16 = 100\n    # Common difference (eats 6 more each night)\n    d = 6\n    # To find the first term a1, we use the fact that a16 is the 16th term of the arithmetic sequence\n    # a16 = a1 + (16 - 1) * d\n    # Solving for a1 gives us:\n    a1 = a16 - (16 - 1) * d\n\n    # The sum of n terms of an arithmetic series is given by:\n    # Sum = n/2 * (2*a1 + (n-1)*d)\n    Sum = n / 2 * (2 * a1 + (n - 1) * d)\n\n    return int(Sum)\n\nans = solution()"
    ],
    "8fc9c10f7d7b46d7b2146cde6378f1ae": [
        "def solution():\n    # If Chris wants to ensure victory, he must leave a multiple of 3 matches after his first move.\n    # By doing this, Chris will always be able to leave a multiple of 3 matches for Dylan\n    # by subtracting the complement of what Dylan takes to reach the next multiple of 3.\n    # As there are 7 matches, the closest smaller multiple of 3 is 6. Therefore, to leave 6 matches,\n    # Chris must take 1 match.\n    \n    total_matches = 7\n    matches_to_ensure_victory = (total_matches % 3)\n    return matches_to_ensure_victory\n\nans = solution()"
    ],
    "e9072c6898d44fc28e315a6cd5657cfa": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 3):\n        A, B, C = perm\n        if A != 0:  # since A is the first digit, it cannot be 0\n            return A * 100 + B * 10 + C\n\nans = solution()"
    ],
    "fb0a5cc20da34586a21b00309dee0247": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 5):\n        A, B, C, D, E = p\n        ABAC = A * 1001 + B * 10 + C\n        DBEC = D * 1000 + B * 100 + E * 10 + C\n        ACEDC = A * 10000 + C * 1000 + E * 100 + D * 10 + C\n\n        if ABAC + DBEC == ACEDC and A != 0 and D != 0:\n            return DBEC\n\nans = solution()"
    ],
    "c2a0bced20654e69a37a8243f7a0a817": [
        "def solution():\n    ans = 1.6 + 2.3 + 3.4 + 12.2 + 5.7 - 2.2\n    return ans\n\nans = solution()"
    ],
    "9391ddf6c35a4fde8892b40958afa033": [
        "def solution():\n    # Using the Difference of Two Squares formula: a^2 - b^2 = (a + b)(a - b)\n    a = 64\n    b = 36\n    ans = (a + b) * (a - b)\n    return ans\n\nans = solution()"
    ],
    "d32e98ac3f874eebacbd202b7baa856f": [
        "def solution():\n    morning_time = 9 * 60 + 23  # Convert 9.23am to minutes\n    afternoon_time = 13 * 60 + 6  # Convert 1.06pm to minutes\n\n    diff_minutes = afternoon_time - morning_time\n\n    return diff_minutes\n\nans = solution()"
    ],
    "d4673ee1fc2f411f9eea5d8fc0e540a6": [
        "def solution():\n    ans = (53 - 50) + (47 - 44) + (41 - 38) + (35 - 32) + (29 - 26) + 23\n    return ans\n\nans = solution()"
    ],
    "8321d60a92fb4651bd00bbee4c13a137": [
        "def solution():\n    # For simplicity, assume Kevin has n choices for restaurants.\n    # Since the question does not specify the number of restaurant options available, \n    # the number of choices is essentially the number of restaurants.\n    # Kevin has 1 choice for each restaurant, hence the number of different choices is n.\n    \n    # However, with no given 'n', we cannot compute an actual number.\n    # If this is a hypothetical scenario where 'n' should be provided or assumed,\n    # we could set 'n' to a specific value. But as per the question, no such detail is provided.\n    \n    # For the sake of this question, we can only return a representation of the solution\n    # as a function of n (number of restaurants). In real cases, this function should return an integer.\n    \n    n = symbols('n')\n    \n    # The number of different choices is the same as the number of available restaurants\n    return n\n\nans = solution()"
    ],
    "14fb2dfc36d7462d9626934b2a9875a3": [
        "def solution():\n    # Calculate the sum of 1 to 9\n    sum_1_to_9 = sum(range(1, 10))\n    # Calculate the sum of 1 to 8 (as 9 is not repeated)\n    sum_1_to_8 = sum(range(1, 9))\n    # The total sum is twice the sum from 1 to 8 (since 1 to 8 are repeated) plus 9\n    total_sum = 2 * sum_1_to_8 + 9\n    \n    return total_sum\n\nans = solution()"
    ],
    "067406b4f4a04fa6a7916a17ca92b1ad": [
        "def solution():\n    ans = 6.6 * 30\n    return ans\n\nans = solution()"
    ],
    "7da62cc10f93447ebd5250a89d0612a9": [
        "def solution():\n    distance = 48\n    speed = 8\n    \n    time_taken = distance / speed\n    return time_taken\n\nans = solution()"
    ],
    "3947062555df4a428b3e6b98a885d729": [
        "def solution():\n    # Let n be the cost of one notebook.\n    # Let p be the cost of one pencil case.\n    # Let e be the cost of one eraser.\n    from sympy import symbols, solve\n\n    n, p, e = symbols('n p e')\n\n    # The cost of 3 notebooks, 4 pencil cases, and 5 erasers is $50.\n    total_cost_eq = 3*n + 4*p + 5*e - 50\n\n    # The cost of a notebook and a pencil case is $6.\n    notebook_pencil_case_eq = n + p - 6\n\n    # The cost of a pencil case and an eraser is $8.\n    pencil_case_eraser_eq = p + e - 8\n\n    # Solving the system of equations\n    solutions = solve((total_cost_eq, notebook_pencil_case_eq, pencil_case_eraser_eq), (n, p, e))\n\n    return solutions[p]\n\nans = solution()"
    ],
    "85353e1815e64de9b01672fd4faa3880": [
        "def solution():\n    # Total age of Lucy's family\n    total_age = 4 * 25\n    # Ages of Harry, Harry's mom, and Harry's sister\n    ages_sum = 14 + 36 + 10\n    # Age of Harry's dad\n    dads_age = total_age - ages_sum\n\n    return dads_age\n\nans = solution()"
    ],
    "467fa0f0921245c98f8470b073242438": [
        "def solution():\n    ans = 16.4 / 20\n    return ans\n\nans = solution()"
    ],
    "c17044f418d74fb09f393b68cc8342fd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, E = symbols('A E')\n    \n    # Since A is the most significant digit, it cannot be 0.\n    possible_values = range(1, 10)\n    solutions = []\n\n    for A_val in possible_values:\n        for E_val in set(possible_values) - {A_val}:\n            if Eq(1111 * A_val + 110 * E_val, 1111 * A_val + 110 * E_val) == True:\n                solution = (A_val, E_val)\n                solutions.append(solution)\n    \n    # The value of AEEA (which is 1000*A + 100*E + 10*E + A) can be calculated directly\n    ans = solutions[0][0] * 1000 + solutions[0][1] * 110 + solutions[0][0]\n    return ans\n\nans = solution()"
    ],
    "30df93da324249439f56623ab48606d3": [
        "def solution():\n    ans = 6.48 / 6\n    return ans\n\nans = solution()"
    ],
    "006b398886584c478594347960619995": [
        "def solution():\n    # Define the height of a classroom door in centimeters (standard door height around 200 cm)\n    # Convert meters to centimeters by multiplying by 100\n    door_height_meters = 200\n\n    # Now we will compare it with the given measurements converted to centimeters\n    options_cm = [8300, 200, 8, 50] # Converted options to cm (1m = 100cm, 1/2m = 50cm)\n    \n    # Find the option that is closest to the classroom door height\n    closest_height = min(options_cm, key=lambda x: abs(x - door_height_meters))\n    \n    return closest_height\n\nans = solution()"
    ],
    "d795930cfe064a999cc8e819cdf13cda": [
        "def solution():\n    digits_used = 450\n    pages = 0\n    total_digits = 0\n\n    # pages with 1 digit: 1-9 (9 pages), 2 digits: 10-99 (90 pages), 3 digits: 100-999 (900 pages) etc.\n    for digits_per_page in range(1, digits_used + 1):\n        pages_with_current_digit_count = 9 * (10 ** (digits_per_page - 1))\n        if total_digits + (digits_per_page * pages_with_current_digit_count) > digits_used:\n            remaining_digits = digits_used - total_digits\n            pages += remaining_digits // digits_per_page\n            break\n        total_digits += digits_per_page * pages_with_current_digit_count\n        pages += pages_with_current_digit_count\n\n    return pages\n\nans = solution()"
    ],
    "c0bcad55039843688a280266a75e3093": [
        "def solution():\n    total_digits = 0\n    pages = 0\n    while total_digits < 1524:\n        pages += 1\n        total_digits += len(str(pages))\n    return pages\n\nans = solution()"
    ],
    "9df2844209ab4b48bb9e7656aff7a72a": [
        "def solution():\n    total_games = (5 * 4) // 2  # Each player plays 4 opponents, divided by 2 because each game involves 2 players\n    games_won = 2 + 1 + 4 + 3  # Sum of the games won by the four players\n    gina_won = total_games - games_won  # Total games minus the sum of games won by 4 players will give Gina's wins\n\n    return gina_won\n\nans = solution()"
    ],
    "2132f99db9344be4a83936b1da90a005": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_money = symbols('initial_money')\n\n    equation = Eq((5/12) * initial_money + (2/7) * (1 - (5/12)) * initial_money + 45, initial_money)\n\n    ans = solve(equation, initial_money)\n\n    return ans[0]\n\nans = solution()"
    ],
    "d94b3c942f214ed29b7cb5c2b4f59231": [
        "def solution():\n    numbers = [12, 6, 9, 21, 7, 23]\n    largest = max(numbers)\n    smallest = min(numbers)\n    ans = 2 * (largest - smallest)\n    return ans\n\nans = solution()"
    ],
    "6045ecc17a8240cf847e28c4ca7327a7": [
        "def solution():\n    men_rate = 1 / (6 * 5) # rate at which one man can complete the job per day\n    women_rate = 1 / (5 * 6) # rate at which one woman can complete the job per day\n\n    combined_rate = 10 * men_rate + 5 * women_rate # rate at which 10 men and 5 women can complete the job per day\n\n    days_to_complete = 1 / combined_rate\n\n    return days_to_complete\n\nans = solution()"
    ],
    "39ac13b16ca64d7da0d126da55ae389f": [
        "def solution():\n    # Prices\n    shirt_price = 5\n    bag_price = 10\n\n    # Total spent\n    total_spent = 300\n\n    # Number of shirts per group (4 shirts for 1 bag)\n    shirts_per_group = 4\n\n    # Calculate the price per group (4 shirts and 1 bag)\n    group_price = shirts_per_group * shirt_price + bag_price\n\n    # Calculate the number of groups\n    num_groups = total_spent // group_price\n\n    # Calculate the number of shirts\n    shirts_bought = num_groups * shirts_per_group\n\n    # Marcus' calculation error: He multiplied the number of groups by the number of bags instead of shirts.\n    # Return the correct number of shirts bought\n    return shirts_bought\n\nans = solution()"
    ],
    "18b4e19a2a474b58a2286cdb4391548c": [
        "def solution():\n    total_points = 155\n    point_difference = 15\n    \n    # Let x be the number of questions Avril answered correctly\n    # Then Eddie answered x + (point_difference / 10) questions correctly\n    \n    # Since they each answered 10 questions, the remaining questions were answered incorrectly\n    # Calculate total points as the sum of points from correct answers and deductions from incorrect answers\n    \n    for x in range(11):  # Avril can answer from 0 to 10 questions correctly\n        avril_correct = x\n        avril_wrong = 10 - x\n        eddie_correct = x + point_difference // 10\n        eddie_wrong = 10 - eddie_correct\n        total = (avril_correct - avril_wrong / 2) * 10 + (eddie_correct - eddie_wrong / 2) * 10\n        \n        if total == total_points:\n            return avril_correct\n\nans = solution()"
    ],
    "3028ecd60fde4f939707e80ce57d6888": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys_initial, girls_initial = symbols('boys_initial girls_initial')\n    \n    # Thrice as many boys as girls initially\n    equation1 = Eq(boys_initial, 3 * girls_initial)\n    # After 12 boys left and 20 girls joined, the numbers are equal\n    equation2 = Eq(boys_initial - 12, girls_initial + 20)\n\n    solutions = solve((equation1, equation2), (boys_initial, girls_initial))\n\n    return solutions[boys_initial]\n\nans = solution()"
    ],
    "9a8905e262ef43708efc95e6c13e0dd2": [
        "from math import gcd\n\ndef solution():\n    A = 56\n    B = 96\n    C = 120\n\n    # Calculate the greatest common divisor of A, B, and C\n    greatest_mass = gcd(gcd(A, B), C)\n\n    return greatest_mass\n\nans = solution()"
    ],
    "3e2ad7353ee34db7941ef7f4ec470ad8": [
        "def solution():\n    n = 35\n    sum_of_factors = sum([i for i in range(1, n + 1) if n % i == 0])\n    return sum_of_factors\n\nans = solution()"
    ],
    "104e0f1c1be44d5eb09a1de0f61c9249": [
        "def solution():\n    import math\n    \n    # Constants\n    theta = math.radians(20)  # incline angle in radians\n    d = 400  # distance in meters\n    mu = 0.2  # coefficient of kinetic friction\n    g = 9.81  # acceleration due to gravity in m/s^2\n\n    # Components of acceleration\n    # Parallel component of gravitational acceleration (a_par)\n    a_par = g * math.sin(theta)\n    # Frictional acceleration (a_fric)\n    a_fric = mu * g * math.cos(theta)\n    \n    # Net acceleration along the slope\n    a_net = a_par - a_fric\n    \n    # Using kinematic equation: v^2 = u^2 + 2as (initial velocity u = 0)\n    v_final = math.sqrt(2 * a_net * d)\n    \n    return v_final\n\nans = solution()"
    ],
    "eeb7e226b5c04108bc05a1e3a95a4b52": [
        "def solution():\n    anna_age = 8\n    mother_age = 44\n    years = 0\n    \n    while True:\n        years += 1\n        if (mother_age + years) == 3 * (anna_age + years):\n            break\n\n    return years\n\nans = solution()"
    ],
    "16622798daa848ff8e9a99b6b623c518": [
        "from math import ceil\n\ndef solution():\n    total_apples = 30\n    children = 6\n    min_apples_for_max = ceil(total_apples / children)\n  \n    while True:\n        remaining_apples = total_apples - min_apples_for_max\n        ways_to_distribute = remaining_apples - (children - 2)\n        if ways_to_distribute < min_apples_for_max:\n            break\n        min_apples_for_max += 1\n\n    return min_apples_for_max\n\nans = solution()"
    ],
    "70660cca1f444b77bd1bdaba3f54255b": [
        "def solution():\n    sugar_weight = 55\n    water_weight = 220\n    total_weight = sugar_weight + water_weight\n    concentration = (sugar_weight / total_weight) * 100\n    return concentration\n\nans = solution()"
    ],
    "f8678d8e2b9d4dccb1911a70b2606122": [
        "def solution():\n    total_animals = 12\n    total_legs = 34\n    \n    # Assuming all animals are chickens (with 2 legs each)\n    chickens = total_animals\n    rabbits = 0\n    legs_now = chickens * 2\n    \n    # Replace chickens with rabbits until we reach the correct number of legs\n    while legs_now != total_legs:\n        chickens -= 1\n        rabbits += 1\n        legs_now = chickens * 2 + rabbits * 4\n    \n    return rabbits\n\nans = solution()"
    ],
    "12f08cb98de1436099e711b0564dfc03": [
        "def solution():\n    # Let the number of apples Alex uses be x.\n    # Then the number of bananas will be 2x (since she uses 2 bananas for 1 apple),\n    # and the number of oranges will be 3x (since she uses 3 oranges for 1 apple).\n\n    # The total number of fruits used is the sum of the number of apples, bananas, and oranges.\n    # apples + bananas + oranges = 24\n    # x + 2x + 3x = 24\n    # 6x = 24\n    # x = 24 / 6\n    x = 24 / 6\n\n    # The number of bananas is 2 times the number of apples.\n    bananas = 2 * x\n\n    return bananas\n\nans = solution()"
    ],
    "673c1a85dd1346948a16344e5724859d": [
        "def solution():\n    ans = (2.4 * 52 / 100) + (7.6 * 52 / 100)\n    return ans\n\nans = solution()"
    ],
    "12caf8fca32e42febe42dd8469b710c0": [
        "def solution():\n    return 345 * 67\n\nans = solution()"
    ],
    "0c6f163b77d54e46bc6a8eadb82bfd9d": [
        "def solution():\n    max_number = 99\n    while max_number > 0:\n        if (max_number - 3) % 4 == 0 and (max_number - 3) % 5 == 0:\n            return max_number\n        max_number -= 1\n\nans = solution()"
    ],
    "c2b040f49df54d38991df78d71cf954e": [
        "def solution():\n    total_ratio = 3 + 1\n    liters_needed = 1  # 1 litre of 'Purple Fire' paint\n\n    red_ratio = 3\n    red_paint = (liters_needed * red_ratio) / total_ratio\n\n    return red_paint\n\nans = solution()"
    ],
    "5a83ea2badba4c79826ff79d1735c1b3": [
        "def solution():\n    # May's ribbons consist of short ribbons only, so the total length of her ribbons\n    # is 7 (pieces) * 40 (cm per piece) = 280 cm\n    may_ribbons_length_cm = 7 * 40\n    \n    # Nancy's ribbons are all long, so their length in cm is unknown\n    # Let x be the number of long ribbons May has\n    # The total length of May's ribbons would then be 280 cm (from short ribbons)\n    # plus 70 cm per each long ribbon she has \n    # May's length minus Nancy's length is 2.4 m, which is 240 cm\n    # So, we have the equation: \n    # 280 + 70x - (18 * 70) = 240\n    \n    # Solving for x gives us how many pieces of long ribbon May has\n    x = (240 + (18 * 70) - 280) / 70\n    \n    # May has a total number of ribbons equal to 7 short ribbons plus the x long ribbons\n    total_ribbons_may = 7 + x\n    \n    return int(total_ribbons_may)\n\nans = solution()"
    ],
    "48066947c0b143dfbd61973b59fefc94": [
        "def solution():\n    total_money = 68\n    quarter_money = total_money / 4\n    remaining_money = total_money - quarter_money\n    return remaining_money\n\nans = solution()"
    ],
    "e3a1d4b27da044ddad1173a844dfb144": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    blue, red = symbols('blue red')\n    equation1 = Eq(blue, 2 * red)\n    equation2 = Eq(blue + red, 18)\n\n    solutions = solve((equation1, equation2), (blue, red))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "a73aefc56ebe4450b1c222659aca3dbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    equation1 = Eq(A - 40, B + 40)\n    equation2 = Eq(A + 40, 3 * (B - 40))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "cacebdbc3369444fbebd09e2767b8146": [
        "def solution():\n    return 53 * 84\n\nans = solution()"
    ],
    "db9996863bc84afb88970ac5c70f87dc": [
        "def solution():\n    # Calculate daily grass consumption for each cow and total amount of grass\n    # If 8 cows can be fed for 10 days, total grass = 8 cows * 10 days\n    total_grass = 8 * 10\n    # If 4 cows can be fed for 15 days, each cow eats 1/15 of the pasture per day\n    # So, total grass = 4 cows * 15 days\n    total_grass_check = 4 * 15\n    \n    # Since the total amount of grass should be the same,\n    # it is not really necessary to check it, but let's ensure our assumption is correct\n    assert total_grass == total_grass_check\n    \n    # Now we can calculate how many cows it can feed for 5 days\n    # The amount of grass consumed by each cow per day is the total grass divided by the number of cows and days\n    # grass_per_cow_per_day = total_grass / (cows * days), simplifying, cows = total_grass / (grass_per_cow_per_day * days)\n    cows_for_5_days = total_grass / (5)\n\n    return cows_for_5_days\n\nans = solution()"
    ],
    "9f599323c52a4223810c1c60a307e07c": [
        "def solution():\n    total_mass_of_12 = 1.02  # mass of 12 packets in kg\n    mass_of_one_packet = total_mass_of_12 / 12  # mass of 1 packet\n    mass_of_4_packets = mass_of_one_packet * 4  # mass of 4 packets\n    return mass_of_4_packets\n\nans = solution()"
    ],
    "b86990b313b04b95b9eb607238d03c25": [
        "def solution():\n    numbers = [9, 7, 5, 8, 4, 1, 8]\n    mean_of_numbers = 6\n    total_numbers = 8\n\n    sum_of_numbers = mean_of_numbers * total_numbers\n    missing_number = sum_of_numbers - sum(numbers)\n\n    return missing_number\n\nans = solution()"
    ],
    "7886d22ab5aa4161949641294c6c9ba5": [
        "def solution():\n    total_cost = 83\n    tape_cost = 9\n    number_of_tapes = 3\n    number_of_cds = 4\n\n    total_tape_cost = tape_cost * number_of_tapes\n    total_cd_cost = total_cost - total_tape_cost\n    cost_per_cd = total_cd_cost / number_of_cds\n\n    return cost_per_cd\n\nans = solution()"
    ],
    "857fbe5325ea47fa86a2d4c017f4e01b": [
        "def solution():\n    incorrect_result = 99.396\n    divisor_without_decimal = 122\n    divisor_with_decimal = 1.22\n\n    true_result = incorrect_result * divisor_without_decimal / divisor_with_decimal\n\n    return true_result\n\nans = solution()"
    ],
    "a6e717d16ac04cf9b2916acf56c1b7e0": [
        "def solution():\n    # We will assign apples to each child ensuring the next child gets more apples\n    # We will start by giving each child one apple, and then deal with remaining 42 apples\n    apples = 50\n    children = 8\n    # Giving 1 apple to each child initially\n    apples -= children\n    # Setting up initial configurations where each child has at least one apple\n    distribution = [1] * children\n    \n    # We can define a Helper function to distribute the remaining apples\n    def distribute_apples(i, remaining):\n        if i == children - 1:\n            distribution[i] = remaining + 1  # the last child gets all remaining apples\n            return distribution[i]  # the apples count for the child with the most apples\n        \n        # Distribute remaining apples to the next child ensuring it's always one more than previous\n        for x in range(1, remaining - (children - i - 1)):\n            distribution[i] += x\n            max_apples = distribute_apples(i + 1, remaining - x)\n            distribution[i] -= x  # backtrack to try next configuration\n            if max_apples >= distribution[i]:\n                # Since we are looking for least possible apples for the child with most,\n                # We return as soon as we find a valid configuration\n                return max_apples\n        \n        return remaining + 1  # If we didn't find a configuration where\n                              # the last child doesn't get the most, then last child gets most\n\n    answer = distribute_apples(0, apples)\n    return answer\n\nans = solution()"
    ],
    "8c47f81c09cb40598f99de91467025a0": [
        "def solution():\n    from math import gcd\n\n    boys = 28\n    girls = 32\n\n    greatest_common_divisor = gcd(boys, girls)\n\n    return greatest_common_divisor\n\nans = solution()"
    ],
    "dc7c1534320d4d5cbcc1d4abeb592b2c": [
        "def solution():\n    final_number = 35\n    number_after_multiplication = final_number - 8\n    original_number = number_after_multiplication / 3\n    return original_number\n\nans = solution()"
    ],
    "83961d28b4bb455eb81f2d3b79db70dc": [
        "def solution():\n    n = 1.7 * 1000  # One litre is 1000 millilitres\n    return n\n\nans = solution()"
    ],
    "0b7e4617d9c047468385d1998eb2f78f": [
        "def solution():\n    ans = 36 * (sum([1/(5*i*(5*i+5)) for i in range(7)]))\n    return ans\n\nans = solution()"
    ],
    "ff48944eb4344d26a3b5d1bf2e5d6209": [
        "def solution():\n    # Total number of cards\n    total_cards = 876\n    # Since Melissa has twice as many cards as Hisham, let's assume Hisham has h cards.\n    # Melissa will then have 2h cards.\n    # The total is 3h (h for Hisham, 2h for Melissa) and it equals total_cards.\n    # We can find the number of cards Hisham originally has by dividing the total by 3.\n    \n    hisham_cards = total_cards // 3   # Use integer division since we can't have a fraction of a card\n    # Calculate the number of cards Melissa originally had\n    melissa_cards = total_cards - hisham_cards\n    \n    # To have the same number of cards, Melissa should give some cards to Hisham.\n    # After giving the cards, they will both have (total_cards / 2) cards.\n    \n    cards_to_give = melissa_cards - total_cards // 2\n    return cards_to_give\n\nans = solution()"
    ],
    "b4d1c1eb568e4c288faeed345d1531ee": [
        "def solution():\n    count = 0\n    for number in range(41):\n        if '2' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "57c4f3985bb74c62b7740a2f0c3435eb": [
        "from itertools import permutations\n\ndef solution():\n    digits = [4, 7, 5, 8, 3]\n    permuts = permutations(digits)\n    \n    smallest_odd = None\n    for p in permuts:\n        if p[0] != 0 and p[-1] % 2 != 0:\n            num = int(''.join(map(str, p)))\n            if smallest_odd is None or num < smallest_odd:\n                smallest_odd = num\n    \n    return smallest_odd\n\nans = solution()"
    ],
    "040b8caf172f41a7bcb2b377bf7ecd95": [
        "def solution():\n    # Let's denote the sequence numbers as a1, a2, a3, ..., a7\n    # Given: a4 = 6, a6 = 15\n    # a3 + a4 = a5 => a3 + 6 = a5\n    # a4 + a5 = a6 => 6 + a5 = 15 => a5 = 9\n    # a5 + a6 = a7 => 9 + 15 = a7 => a7 = 24\n    # Now, we need to find a1 and a2 using the same logic.\n    # Because a3 + 6 (a4) = 9 (a5), we have a3 = 3\n    # Now we use a3 = a2 + a1 and a4 = a3 + a2 to solve for a1 and a2.\n    # 3 = a2 + a1 and 6 = 3 + a2\n    # From the second equation, we find a2 = 3\n    # Substituting a2 in the first equation: 3 = 3 + a1 => a1 = 0\n\n    # We have found that a1 = 0, a2 = 3, thus the sequence is 0, 3, 3, 6, 9, 15\n    # And the seventh number a7 is the sum of the fifth and sixth numbers: 9 + 15 = 24\n\n    return 24\n\nans = solution()"
    ],
    "4c3f6d76550f4f3089cbf74b0f3d3fa9": [
        "def solution():\n    # Let the total work be W\n\n    # If 24 men can complete the work in 16 days, then 1 man can complete the work in 24 * 16 days\n    work_per_man_day = 1 / (24 * 16)\n\n    # Similarly, if 16 women can complete the work in 24 days, then 1 woman can complete the work in 16 * 24 days\n    work_per_woman_day = 1 / (16 * 24)\n\n    # Work done by 10 men and 6 women in a day\n    work_per_day = 10 * work_per_man_day + 6 * work_per_woman_day\n\n    # Total days needed for 10 men and 6 women to complete the work\n    days_needed = 1 / work_per_day\n\n    return days_needed\n\nans = solution()"
    ],
    "bfde09b81d63442bb7d2bdc77be0b501": [
        "def solution():\n    n = 4\n    ans = n ** 2 + n + 1\n    return ans\n\nans = solution()"
    ],
    "5da353b85f0d48589f3c7704501b8d05": [
        "def solution():\n    bill_coins = 20\n    jim_coins = 4 * bill_coins\n    return jim_coins\n\nans = solution()"
    ],
    "5c7b9ce1905d45469426790e5ddb9e0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    julie = symbols('julie')\n    marion = 2 * julie\n    ethan = 5 * julie\n    equation = Eq(marion - ethan, -168)\n\n    julie_pay = solve(equation, julie)[0]\n    marion_pay = 2 * julie_pay\n    ethan_pay = 5 * julie_pay\n\n    total_pay = julie_pay + marion_pay + ethan_pay\n\n    return total_pay\n\nans = solution()"
    ],
    "17f689a51b1e456cbd853cbb42f52f25": [
        "def solution():\n    from math import factorial\n\n    total_people = 5  # Eddie, dad, mom, grandpa, grandma\n\n    # Total permutations without restriction\n    total_permutations = factorial(total_people)\n    \n    # Permutations with Eddie in the middle (4 options for the middle and factorial(4) for the rest)\n    eddie_middle_permutations = 1 * factorial(total_people - 1)\n    \n    # Subtract permutations with Eddie in the middle from total permutations\n    valid_permutations = total_permutations - eddie_middle_permutations\n\n    return valid_permutations\n\nans = solution()"
    ],
    "3581c52ad5c34fea8de834f138a507fc": [
        "def solution():\n    # We can solve this by identifying the common ratio of the geometric sequence.\n    # We know that in a geometric sequence each term after the first is found by multiplying the previous one by a fixed, non-zero number called the common ratio.\n    \n    # Based on the sequence provided, we can find the common ratio by dividing the third term by the fourth term:\n    # 24 / 12 = 2\n    # Now we use this ratio to find the missing term by dividing the first term by the common ratio:\n    # n = 96 / common_ratio\n\n    common_ratio = 24 / 12\n    missing_number = 96 / common_ratio\n\n    return missing_number\n\nans = solution()"
    ],
    "6567f6570a0b4d6caced46d83395da96": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let 'x' be the total sum of money Hamid had initially\n    x = symbols('x')\n    \n    # Equation based on the problem statement\n    equation = Eq(x/3 + 56, 3/8 * x)\n    \n    # Solve the equation for 'x'\n    total_money = solve(equation, x)[0]\n    \n    # Calculate the total amount spent, which is 1/3 of the original amount plus $56 for the tie\n    total_spent = total_money / 3 + 56\n    \n    return total_spent\n\nans = solution()"
    ],
    "805758debabb4563927203c5d2eba2d2": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 5), (2, 7), (3, 9)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "934469ea45974c6ba8322d85bcd538d4": [
        "def solution():\n    eddie_speed = 3  # m/s\n    train_speed = 57  # m/s\n    time_to_pass = 10  # seconds\n\n    # Relative speed of train with respect to Eddie\n    relative_speed = train_speed + eddie_speed  # m/s\n\n    # Length of the train is relative speed times time taken to pass\n    train_length = relative_speed * time_to_pass  # m\n\n    return train_length\n\nans = solution()"
    ],
    "e97cf0638a05496c87c776dfee4ba7b6": [
        "def solution():\n    total_marks = 63\n    correct_mark = 8\n    incorrect_mark = -3\n    total_questions = 12\n    \n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        if correct_answers * correct_mark + incorrect_answers * incorrect_mark == total_marks:\n            return correct_answers\n\nans = solution()"
    ],
    "7d867d91c93842129d709466df2f1adc": [
        "def solution():\n    from itertools import product\n\n    # Create a list of all possible combinations of '+' and '*' for the three squares\n    operations = list(product(['+', '*'], repeat=3))\n\n    max_value = 0  # Initialize the maximum value\n\n    # Iterate through all combinations of operations\n    for ops in operations:\n        # Construct the expression string\n        expression = f\"1{ops[0]}2{ops[1]}3{ops[2]}4\"\n        # Evaluate the expression and update the maximum value if this is larger\n        max_value = max(max_value, eval(expression))\n\n    return max_value\n\nans = solution()"
    ],
    "9ea5b71855a94cfe9466fe43ab256389": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(1, 10)):\n        number = int(''.join(map(str, perm)))\n        if number % 11 == 0:\n            return number\n\nans = solution()"
    ],
    "4543b18126fb4fdb9c0d73c1c80f65f8": [
        "def solution():\n    # Total distance the train needs to cross to completely clear the bridge\n    total_distance = 700 + 900  # the length of the train plus the length of the bridge\n\n    # Speed of the train (meters per minute)\n    speed = 400  # train speed in meters per minute\n\n    # Time taken to cross the bridge completely (distance divided by speed)\n    time = total_distance / speed  # time in minutes\n\n    return time\n\nans = solution()"
    ],
    "d57fcf981d694db99854d4d2d0775618": [
        "def solution():\n    a, b = 3, 10\n\n    # Since we are looking for the remainder when divided by 3\n    # we only need to track the remainder of each term in the sequence\n    a %= 3\n    b %= 3\n\n    for _ in range(1997 - 2):\n        a, b = b, (a + b) % 3\n\n    return a  # The remainder of the last term when divided by 3\n\nans = solution()"
    ],
    "001ad7f411fa4eb8b4910ab06fd33b1c": [
        "def solution():\n    # Given values\n    num_terms = 60\n    sum_first_5 = 10\n    sum_last_5 = 120\n\n    # Calculate average of first 5 and last 5 terms\n    avg_first_5 = sum_first_5 / 5\n    avg_last_5 = sum_last_5 / 5\n    \n    # Calculate the common difference 'd' using the averages of the first and last 5 terms\n    d = (avg_last_5 - avg_first_5) / (num_terms - 5)\n    \n    # Calculate the first term 'a1'\n    a1 = avg_first_5 - 2 * d\n    \n    # Calculate the last term 'an'\n    an = avg_last_5 + 2 * d\n    \n    # Calculate the sum of all 60 numbers using the formula for the sum of an arithmetic series\n    sum_all_terms = (num_terms / 2) * (a1 + an)\n    \n    return sum_all_terms\n\nans = solution()"
    ],
    "e6c04a41ffe547dfa735b74e506279e7": [
        "def solution():\n    peter_age = 45\n    pip_age = 7\n    pit_age = 14\n\n    while peter_age != pip_age + pit_age:\n        peter_age += 1\n        pip_age += 1\n        pit_age += 1\n\n    return peter_age\n\nans = solution()"
    ],
    "3147e744aa374d87a759f9e0a3b9f01c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, peter = symbols('sam peter')\n\n    # Original amounts\n    equation1 = Eq(sam, peter + 40)\n\n    # After exchanges\n    sam_after = sam - 0.20 * sam + 0.25 * peter\n    peter_after = peter + 0.20 * sam - 0.25 * peter\n    equation2 = Eq(sam_after - peter_after, 96)\n\n    solutions = solve((equation1, equation2), (sam, peter))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "8b46eeb4c87f4598815e931b7d5d7fb1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hazel_current, mom_current = symbols('hazel_current mom_current')\n    \n    # Hazel will be three times her current age in 12 years\n    equation1 = Eq(hazel_current * 3, hazel_current + 12)\n    \n    # On Hazel’s 18th birthday, her mom will be three times her age then\n    equation2 = Eq(mom_current + (18 - hazel_current), 3 * 18)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (hazel_current, mom_current))\n\n    # Extracting Hazel's mom current age from the solutions\n    return solutions[mom_current]\n\nans = solution()"
    ],
    "2379196da153459db255aa3aea3155e9": [
        "def solution():\n    return 1.25 * 47 * 8\n\nans = solution()"
    ],
    "14a74e5e758a457ebd877eab88a12538": [
        "def solution():\n    n = 10\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    return sum_of_cubes\n\nans = solution()"
    ],
    "ffa814576b094530af15324d4a55a06c": [
        "def solution():\n    ans = 2616 // 6\n    return ans\n\nans = solution()"
    ],
    "a85b2a0fbaee403bbf3d553375241db9": [
        "def solution():\n    return 296 // 8\n\nans = solution()"
    ],
    "31bc6cd2e2a24459b4a65c724b877090": [
        "def solution():\n    # There are 13 possible consecutive pairs (1-2, 2-3, ..., 12-13)\n    # If we draw one card from each non-consecutive pair, we can draw up to 12 cards\n    # without guaranteeing a consecutive pair.\n    # Drawing one more card than this number will ensure at least one consecutive pair.\n    return 12 + 1\n\nans = solution()"
    ],
    "9a89f94e62844db2ae26ce1b67de616f": [
        "def solution():\n    # Every sheet of paper has 4 page numbers, two on the front and two on the back\n    # The fifth sheet will therefore have the 17th, 18th, 19th, and 20th page numbers\n    # Since the last page is 36, we can calculate the first page on the fifth sheet as:\n    first_page_fifth_sheet = 36 - (5-1)*4\n\n    # The sum of the page numbers on the fifth sheet can be calculated\n    # by adding the first page number with 1, 2, and 3 (as they are consecutive numbers)\n    sum_of_pages = sum(range(first_page_fifth_sheet, first_page_fifth_sheet + 4))\n    \n    return sum_of_pages\n\nans = solution()"
    ],
    "b6f89cabc4bd43e4a1af6187963a0b9f": [
        "def solution():\n    ans = (124 + 231) / 5\n    return ans\n\nans = solution()"
    ],
    "fac549e40da243d680e79d593cff89f9": [
        "def solution():\n    halved_number = 10\n    original_number = halved_number * 2\n    return original_number\n\nans = solution()"
    ],
    "a547b3e6bb76410c9882a46dc1128679": [
        "def solution():\n    # Calculate digits for 1-9 (1 digit each), 10-99 (2 digits each), and 100-129 (3 digits each)\n    \n    one_digit_numbers = 9\n    two_digit_numbers = 99 - 9\n    three_digit_numbers = 129 - 99\n\n    total_digits = (one_digit_numbers * 1) + (two_digit_numbers * 2) + (three_digit_numbers * 3)\n\n    return total_digits\n\nans = solution()"
    ],
    "d4152b88afa849ccbb7f225bbecbf032": [
        "def solution():\n    for a in range(1, 29):  # We loop through possible values of 'a' which should be less than 28\n        for r in range(1, min(7, 9, a, 28)):  # We loop through possible remainders\n            # Check for an arithmetic sequence in remainders\n            if (r % 7 == r) and ((r + r) % 9 == r) and ((r + 2*r) % a == r) and ((r + 3*r) % 28 == r):\n                # Calculate M using LCM of 7, 9, a, 28 and subtracting the common difference to get the first term\n                M = r * (7 * 9 * a * 28) // (7 * 9 * a * 28) - r\n                return M\n\nans = solution()"
    ],
    "9af4e0d14e574f1690bfcf5bfb24c584": [
        "def solution():\n    first_term = 48\n    last_term = 80\n    difference = 4\n\n    num_rows = int((last_term - first_term) / difference + 1)\n    total_seats = num_rows * (first_term + last_term) // 2\n\n    return total_seats\n\nans = solution()"
    ],
    "dafcea06104b4591957d341d8390c6b3": [
        "def solution():\n    sugar = 80\n    water = 420\n    total_solution = sugar + water\n    concentration = (sugar / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "de19699381254d53a19e09b250810369": [
        "def solution():\n    boy_diff = 36\n    total_students = 0\n    side_length = 1  # Start with a single student and increase to form square layers\n\n    # Loop until the difference between the boys and girls matches the given condition\n    while True:\n        boys = side_length * 4 - 4 if side_length > 1 else 1\n        girls = (side_length - 2) * 4 if side_length > 2 else 0\n        diff = boys - girls\n\n        if diff == boy_diff:\n            total_students = side_length ** 2\n            break\n        else:\n            side_length += 2  # Increase the length of the side to add a new layer\n\n    return total_students\n\nans = solution()"
    ],
    "e0d4db42f51a486ebc92cb7153896228": [
        "def solution():\n    # Calculate the work done by one man in one day\n    one_man_work_per_day = 120 / (3 * 2)\n    \n    # Calculate how many man-days are required to dig 880 metres\n    total_man_days = 880 / one_man_work_per_day\n    \n    # Calculate how long it would take for four men to complete the work\n    time_for_four_men = total_man_days / 4\n    \n    return time_for_four_men\n\nans = solution()"
    ],
    "4fe05ec372ae4fd388877825449c2f71": [
        "def solution():\n    grams = 1756\n    kilograms = grams / 1000\n    return kilograms\n\nans = solution()"
    ],
    "5065cc90f1ca4fd59386ac472c8bfc71": [
        "def solution():\n    num = (2 / 5) * 15\n    return num\n\nans = solution()"
    ],
    "14976163f7ed48a59ba08230a3a9fbbe": [
        "def solution():\n    total_people = 400\n    ellie_rate = 60 / 1  # Ellie's rate per week\n\n    # If Ellie and Gloria together finish in 4 weeks, their combined rate is:\n    combined_rate = total_people / 4\n    \n    # Gloria's rate per week\n    gloria_rate = combined_rate - ellie_rate\n\n    # Time for Gloria to finish interviewing everyone by herself\n    time_gloria = total_people / gloria_rate\n\n    return time_gloria\n\nans = solution()"
    ],
    "aee6713edde34c8cb3f3aae969752a2a": [
        "def solution():\n    # Let's denote x as the number of books moved from the first shelf to the second shelf.\n    # After moving x books, the first shelf will have 18 - x books,\n    # and the second shelf will have 24 + x books.\n    # According to the problem, we want the second shelf to have twice as many books\n    # as the first shelf. So we can set up the equation 24 + x = 2 * (18 - x)\n\n    # Solve for x\n    x = symbols('x')\n    equation = Eq(24 + x, 2 * (18 - x))\n    x_value = solve(equation, x)[0]\n    \n    return x_value\n\nans = solution()"
    ],
    "9b43946bb50b4a52b1278ce86046276a": [
        "def solution():\n    time = 20  # time taken in seconds\n    distance = 300  # distance in meters\n\n    speed = distance / time  # speed in meters per second\n\n    return speed\n\nans = solution()"
    ],
    "d1f0df83d1604882a3431fe789a7a764": [
        "def solution():\n    # Let's denote x as the original number of laptops James bought\n    # Let p be the original profit per laptop, which is the selling price minus the cost price per laptop\n    # Therefore, the total profit is x * p = 60000\n    # When the cost of each laptop decreases by 1/5 of the original cost, the new cost is 4/5 of the original cost\n    # The new profit per laptop will be the selling price (2000) - 4/5 of the original cost (the cost price we labelled as c)\n    # New total profit is this new profit per laptop times x, which is said to be a 30% increase over the original profit\n    # Therefore, the new total profit = 1.3 * old total profit = 1.3 * 60000\n    # Since we know the increase in profit comes from saving on the cost, we can write:\n    # New total profit = Old total profit + x * (1/5) * c (savings from the decrease in cost per laptop)\n\n    # From the last equation:\n    # 1.3 * 60000 = 60000 + x * (1/5) * c\n    # We can also express the original profit per laptop as p = 2000 - c\n    \n    # Hence, x * p = 60000 implies x * (2000 - c) = 60000 (equation 1)\n    # p is 60000/x\n    \n    # And from the new profit situation we got two equations:\n    # x * (2000 - (4/5) * c) = 1.3 * 60000 (equation 2)\n    # Rearranging equation 1:\n    # x * 2000 - x * c = 60000\n    # x * c = x * 2000 - 60000\n    # c = (x * 2000 - 60000) / x\n    # Then we substitute c into equation 2:\n    # x * (2000 - (4/5) * ((x * 2000 - 60000) / x)) = 1.3 * 60000\n    # Solving this equation gives us x, the number of laptops\n\n    # import solve function from sympy\n    from sympy import Symbol, Eq, solve\n    \n    x = Symbol('x')  # number of laptops\n    original_profit = 60000\n    \n    # equation construction\n    eq = Eq(x * (2000 - (4/5) * ((x * 2000 - original_profit) / x)), 1.3 * original_profit)\n    \n    # solving the equation\n    solutions = solve(eq, x)\n    \n    # The answer is an integer number of laptops so we select the first positive integer solution\n    ans = [sol for sol in solutions if sol.is_integer and sol > 0]\n    return ans[0]\n\nans = solution()"
    ],
    "ee3f24407cd74ec0b0589c27b4bb2f13": [
        "def solution():\n    # First, we convert the mixed fractions to improper fractions:\n    #   285 and 6/7 to an improper fraction: 285 * 7/7 + 6/7 = 1995/7\n    #   181 and 10/11 to an improper fraction: 181 * 11/11 + 10/11 = 1991/11\n    #   153 and 12/13 to an improper fraction: 153 * 13/13 + 12/13 = 2001/13\n    fraction1 = 285 * 7 + 6\n    fraction2 = 181 * 11 + 10\n    fraction3 = 153 * 13 + 12\n\n    # Now we find the numerator of the sum of the three fractions\n    numerator_sum = (fraction1 / 7) + (fraction2 / 11) + (fraction3 / 13)\n\n    # Now we find the denominator of the sum of the reciprocals\n    denominator_sum = (1 / 7) + (1 / 11) + (1 / 13)\n\n    # Finally, we divide the two results to get the answer\n    ans = numerator_sum / denominator_sum\n\n    return ans\n\nans = solution()"
    ],
    "7896d35343b54b5c86ea275d9e4da9f6": [
        "def solution():\n    # Let the total number of pupils in the class be x.\n    # According to the problem, 5 pupils are in the band.\n    # So the remaining pupils are x - 5.\n    # Fraction of remaining pupils in the choir is 3/4, so 3/4 * (x - 5) are in the choir.\n    # Fraction of class not in band or choir is 2/9, so (2/9) * x are neither in band nor choir.\n\n    # Setting up the equation according to the problem:\n    # Number in band + Number in choir + Number neither = Total number of pupils\n    # 5 + (3/4) * (x - 5) + (2/9) * x = x\n\n    # Solving the equation for x:\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq(5 + (3/4) * (x - 5) + (2/9) * x, x)\n\n    # Solving for x gives us the total number of pupils in the class.\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "817e9b740c9f4606b0221520b9045134": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(28 - 3 * (24 - 5 * x), 1)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f407d2ea5de540a9874f5a1d203b573e": [
        "def solution():\n    total_balls = 47\n    long_tube_capacity = 8\n    short_tube_capacity = 5\n\n    # since we need to find out the number of long tubes,\n    # let's assume the maximum number of long tubes that can be used\n    max_long_tubes = total_balls // long_tube_capacity\n\n    # Loop to find the valid number of long tubes\n    for long_tubes in range(max_long_tubes + 1):\n        # Calculate remaining balls after using long tubes\n        remaining_balls = total_balls - (long_tube_capacity * long_tubes)\n        \n        # Check if the remaining balls can be exactly filled in short tubes\n        if remaining_balls % short_tube_capacity == 0:\n            return long_tubes\n\n    # If no solution is found, raise an exception\n    raise ValueError(\"No solution found\")\n\nans = solution()"
    ],
    "d51becf0516a4eeaa5484909769ed784": [
        "def solution():\n    third_term = 8\n    ninth_term = 26\n\n    # Calculate the common difference, d\n    common_difference = (ninth_term - third_term) / (9 - 3)\n\n    # Calculate the 11th term using the formula: a_n = a_1 + (n - 1) * d\n    # where a_n is the nth term, a_1 is the first term, and d is the common difference.\n    # We need to find a_1 first to then find the 11th term:\n    # a_3 = a_1 + (3 - 1) * d => a_1 = a_3 - (3 - 1) * d\n    first_term = third_term - (3 - 1) * common_difference\n\n    eleventh_term = first_term + (11 - 1) * common_difference\n\n    return eleventh_term\n\nans = solution()"
    ],
    "d7a25a03a50d4d6f870a401ce650e9a1": [
        "def solution():\n    leftovers_4 = 32\n    leftovers_7 = 3\n    num_lollipops = None\n\n    # Since the last box had only 3 lollipops when Jonathan put 7 lollipops into each box,\n    # we know the total number of lollipops is 3 more than a multiple of 7. We can start\n    # checking from 3 + 7k, where k = 0, 1, 2, ... until we find a number that leaves a \n    # remainder of 32 when divided by 4.\n    k = 0\n    while True:\n        num_lollipops = 7 * k + leftovers_7\n        if num_lollipops % 4 == leftovers_4 % 4:\n            break\n        k += 1\n\n    # num_lollipops is now the total number of lollipops\n    return num_lollipops + leftovers_4  # Add leftovers from when put in boxes of 4\n\nans = solution()"
    ],
    "acf798e814284f3da1ec80f45daf1b22": [
        "def solution():\n    # list of numbers whose cubes are to be summed\n    numbers = [1, 2, 4, 5, 7, 8, 10, 11, 13, 14]\n\n    # calculate the sum of cubes using list comprehension\n    ans = sum(x**3 for x in numbers)\n\n    return ans\n\nans = solution()"
    ],
    "bbbdd4f32eff450382ddff68d9210fd4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let F be the initial number of Felicia's bracelets\n    F, J = symbols('F J')\n    J = 96  # Janice initially had 96 bracelets\n    \n    # Felicia sold 3/5 of her bracelets\n    felicia_sold = 3/5 * F \n    \n    # Janice bought 2/5 of the bracelets Felicia sold\n    janice_bought = 2/5 * felicia_sold \n    \n    # The remaining bracelets for Felicia\n    felicia_remaining = F - felicia_sold\n\n    # After Janice bought some of Felicia's bracelets, she now has\n    janice_after_buying = J + janice_bought\n    \n    # The ratio of Felicia's to Janice's bracelets is now 5:7\n    equation = Eq(felicia_remaining / janice_after_buying, 5/7)\n\n    # Solve the equation\n    solved_F = solve(equation, F)\n\n    # Calculate number of bracelets Janice bought\n    janice_bought = 2/5 * (3/5) * solved_F[0]\n    \n    return int(janice_bought)\n\nans = solution()"
    ],
    "71858362e80c462a97a1d69a789cf304": [
        "def solution():\n    original_price = 18.60\n    discount_percentage = 15 / 100\n    discount_amount = original_price * discount_percentage\n    sale_price = original_price - discount_amount\n    return sale_price\n\nans = solution()"
    ],
    "cb369155904d41d3bbbbf4c1966b3f44": [
        "def solution():\n    ans = 9 + 99 + 999 + 9999\n    return ans\n\nans = solution()"
    ],
    "31d498c8de6444af9466c0b067804d9a": [
        "def solution():\n    # The difference between the incorrect and correct result is 2138.4\n    difference = 2138.4\n\n    # Without the decimal point the number Will used is 432\n    # With the decimal it's 4.32\n    # If we divide the difference by the amount we are off by (432 - 4.32 = 427.68),\n    # we get the other number Will was trying to multiply with\n    multiplier = difference / (432 - 4.32)\n\n    # Now we multiply the correct number 4.32 with the multiplier\n    # to get the true result\n    true_result = 4.32 * multiplier\n\n    return true_result\n\nans = solution()"
    ],
    "5a55a211033946a2b4c35af17fa8dfc6": [
        "def solution():\n    ans = 5 + 4 * 2\n    return ans\n\nans = solution()"
    ],
    "87557efca8df42a1b34010678b9a23bf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    \n    # Each boy gets 5 candies and each girl gets 3 candies\n    equation1 = Eq(5 * boys + 3 * girls, 448)\n    # There are 8 more girls than boys\n    equation2 = Eq(girls, boys + 8)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    # Calculate the total number of children\n    total_children = solutions[boys] + solutions[girls]\n    \n    return total_children\n\nans = solution()"
    ],
    "708d8a95115e435f83a7c21859083e21": [
        "def solution():\n    ans = 15 - 8.36\n    return ans\n\nans = solution()"
    ],
    "119dc81932594423a821eb0e3835d800": [
        "def solution():\n    from sympy import symbols, solve\n\n    milk, fruit = symbols('milk fruit')\n\n    initial_ratio = milk / fruit - 7/9\n    final_ratio = (milk - 8) / fruit - 2/3\n\n    solutions = solve((initial_ratio, final_ratio), (milk, fruit))\n\n    return solutions[milk]\n\nans = solution()"
    ],
    "40f1f703a3914f699ce57ea08f21df7e": [
        "def solution():\n    B = 0\n    while True:\n        B += 1\n        if B % 3 == 1 and B % 5 == 2:\n            return B\n\nans = solution()"
    ],
    "dcce40d2c5394a368e9835c3bd85ebaf": [
        "def solution():\n    count = 0\n    for number in range(4, 52):\n        count += str(number).count('3')\n        if '3' in str(number):\n            if str(number)[-1] == '3':\n                ans = count\n    return ans\n\nans = solution()"
    ],
    "bd44c92e7ad64e179de147924944ccae": [
        "def solution():\n    # We are looking for a number A which when divides the three given numbers,\n    # leaves the same remainder. This means the differences between the numbers\n    # will be divisible by A.\n    num1 = 2017\n    num2 = 2758\n    num3 = 3670\n\n    # Find the differences between the numbers\n    diff1 = num2 - num1\n    diff2 = num3 - num2\n    diff3 = num3 - num1\n\n    # We need to find the greatest common divisor (gcd) of the differences,\n    # which will give us the possible values for A, as A will divide all differences.\n    from math import gcd\n    gcd_diff = gcd(gcd(diff1, diff2), diff3)\n\n    # A cannot be 1 because the question implies there should be a non-trivial divisor.\n    # Now, find all the possible values of A, which are the divisors of gcd_diff,\n    # and calculate their sum leaving out 1.\n    possible_As = [i for i in range(2, gcd_diff + 1) if gcd_diff % i == 0]\n\n    # Return the sum of the possible values of A\n    ans = sum(possible_As)\n    return ans\n\nans = solution()"
    ],
    "8370d497cc534bd1b69b748b4f2e7acf": [
        "def solution():\n    # Calculate the age difference between grandmother and mum\n    # in 1996 when mum was 40 years old\n    age_difference = 80 - (2008 - 1996)\n    \n    # Calculate grandmother's age when mum was born (mum was 0 years old)\n    grandmothers_age_when_mum_born = age_difference - 40\n    \n    return grandmothers_age_when_mum_born\n\nans = solution()"
    ],
    "513eb21b2999465f94c54ad7c1660b36": [
        "def solution():\n    # Initially, each friend gets 4 apples\n    initial_apples_per_friend = 4\n    \n    # Find out how many friends there are by dividing the total number of apples by the initial number of apples each friend gets\n    total_apples_initially = 60\n    number_of_friends = total_apples_initially // initial_apples_per_friend\n    \n    # If each friend asks for one more apple, each would get 5 apples now\n    apples_after_request = initial_apples_per_friend + 1\n    \n    # Calculate the total number of apples needed after every friend asks for one more apple\n    total_apples_needed = number_of_friends * apples_after_request\n    \n    return total_apples_needed\n\nans = solution()"
    ],
    "3bce0db903cb4b46828346019eae5cb1": [
        "def solution():\n    return 546 + 287\n\nans = solution()"
    ],
    "7c8ab5ff603c4374855b52023ed9bc79": [
        "def solution():\n    marks = [15, 19, 13, 18, 20]\n    mean_mark = sum(marks) / len(marks)\n    return mean_mark\n\nans = solution()"
    ],
    "f7fe37c32c4d45b2971f9a684a87178f": [
        "def solution():\n    # Worst case for not getting a pair of white socks is to pick all black and red socks\n    max_black_socks = 10  # max number of black socks he can take before getting a white one\n    max_red_socks = 10    # max number of red socks he can take before getting a white one\n    # After taking all black and red socks, the next two socks will definitely be a pair of white\n    pair_of_white_socks = 2  # we need two white socks to make a pair\n\n    # Calculate the total socks he must take to guarantee a pair of white socks\n    max_socks = max_black_socks + max_red_socks + pair_of_white_socks\n\n    return max_socks\n\nans = solution()"
    ],
    "eedf0a2b13c7480981b6f0ae90e36208": [
        "def solution():\n    # Initialize variables\n    income = 2012\n    price_lemonade = 4\n    price_plus = 7\n    total_bottles = 350\n\n    # Maximum number of lemonade bottles that can be sold within income\n    max_lemonade_bottles = income // price_lemonade\n\n    # Initialize minimum number of \"1000 Plus\" bottles to the total number\n    min_plus_bottles = total_bottles\n\n    # Iterate over the number of lemonade bottles from 0 to the maximum possible\n    for lemonade_bottles in range(max_lemonade_bottles + 1):\n        # Calculate the remaining income after selling lemonade bottles\n        remaining_income = income - lemonade_bottles * price_lemonade\n        \n        # Check if the remaining income is divisible by the price of \"1000 Plus\"\n        if remaining_income % price_plus == 0:\n            # Calculate the number of \"1000 Plus\" bottles sold\n            plus_bottles = remaining_income // price_plus\n            \n            # Check if total bottles constraint is respected\n            if lemonade_bottles + plus_bottles <= total_bottles:\n                # Update the minimum number of \"1000 Plus\" bottles\n                min_plus_bottles = min(min_plus_bottles, plus_bottles)\n                \n    # Return the minimum number of \"1000 Plus\" bottles sold\n    return min_plus_bottles\n\nans = solution()"
    ],
    "2766d440a8354c518fb5b8de557b59a9": [
        "def solution():\n    meters = 0.52\n    centimeters = meters * 100\n    return centimeters\n\nans = solution()"
    ],
    "6d772586b0a84788980ab24fb3d29532": [
        "def solution():\n    for groups_of_6 in range(25):\n        groups_of_4 = 24 - groups_of_6\n        total_students = groups_of_6 * 6 + groups_of_4 * 4\n        if total_students == 112:\n            return groups_of_6\n\nans = solution()"
    ],
    "a04e2fb1ed1c471b8449b601924beb05": [
        "def solution():\n    average_initial = 60\n    numbers_count_initial = 3\n\n    sum_initial = average_initial * numbers_count_initial\n    \n    average_final = 90\n    numbers_count_final = 4\n    \n    sum_final = average_final * numbers_count_final\n    \n    fourth_number = sum_final - sum_initial\n    \n    return fourth_number\n\nans = solution()"
    ],
    "f16f67a593394039a3ef72a2e5b5e457": [
        "def solution():\n    total_cost = (3 * 1.60) + (2 * 0.62) + 4.50\n    change = 20 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "e63cc75a785d4d938794d1691bdf1f91": [
        "def solution():\n    # Ratio of fish to rabbits is 3:2\n    # Ratio of rabbits to packs of wheat is 3:4\n    # Therefore, the ratio of fish to packs of wheat is (3/2) * (3/4) = 9/8\n    # For 8 packs of wheat, Owen needs to give Dennis 9 fish for each pack of wheat.\n    # So for 8 packs, it will be 8 * 9 = 72 fish\n    fish_per_pack_of_wheat = (3 * 3) / (2 * 4)\n    fish_for_eight_packs_of_wheat = fish_per_pack_of_wheat * 8\n    return int(fish_for_eight_packs_of_wheat)\n\nans = solution()"
    ],
    "0395b9449a6542edbdcf5b5c06f47904": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 3):\n        A, B, C = p\n        if A != 0 and ((A*100 + B*10 + C) == (A*10 + B) + (B*10 + C)):\n            return A*100 + B*10 + C\n\nans = solution()"
    ],
    "fdf018bb61cc4677813a36cc14cfe619": [
        "def solution():\n    return 65 + 88\n\nans = solution()"
    ],
    "833b1df560b94f9e8b69c9356f27b429": [
        "def solution():\n    n = 25\n    count = 0\n    for i in range(2, n + 1):\n        while i % 5 == 0:\n            count += 1\n            i /= 5\n    return count\n\nans = solution()"
    ],
    "67da5f022f834e8d9713e38fb01fce1b": [
        "def solution():\n    times_per_week = 2\n    weeks = 2\n    total_times = times_per_week * weeks\n    return total_times\n\nans = solution()"
    ],
    "732cda7ed4134de8b845829f981525ea": [
        "def solution():\n    # The recurring part of the decimal is A2, which repeats every 2 digits\n    # There are 20 digits, so this sequence repeats 10 times.\n    # The sum of the digits in one repeat of the recurring part is A + 2\n    # The sum of the 20 digits is 80, which is 10 times the sum of one repeat of A2\n\n    # Equation: 10 * (A + 2) = 80\n    # Solving the equation for A gives us:\n    A = (80 // 10) - 2\n\n    return A\n\nans = solution()"
    ],
    "59cc2f9a46c248fd832ddb6e4cb5db84": [
        "def solution():\n    well_height = 25\n    climb_up = 4\n    slide_down = 1\n    progress_per_day = climb_up - slide_down\n    day = 0\n    total_climbed = 0\n    \n    while total_climbed < well_height:\n        day += 1\n        total_climbed += climb_up\n        if total_climbed >= well_height:\n            break\n        total_climbed -= slide_down\n\n    return day\n\nans = solution()"
    ],
    "5b21a1a7d2744fbfa57fbc46e69a365c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let p be the original price of the purse\n    p = symbols('p')\n    \n    # Equation for the handbag discount\n    handbag_discount = 428 * (20/100)  # 20% discount on the handbag\n    \n    # Equation for the purse discount\n    purse_discount = p * (28/100)  # 28% discount on the purse\n    \n    # Equation for the total discount\n    total_discount_eq = Eq(handbag_discount + purse_discount, 121)\n    \n    # Solve for the price of the purse before the discount \n    original_purse_price = solve(total_discount_eq, p)\n    \n    return original_purse_price[0]\n\nans = solution()"
    ],
    "e2f0ace2f5554ef4a4b96194cf69005f": [
        "def solution():\n    ans = 398 / 4\n    return ans\n\nans = solution()"
    ],
    "8dfe115ec4fe4aa881b30f336c891785": [
        "def solution():\n    from math import gcd\n\n    count = 0\n    for numerator in range(1, 2012):\n        denominator = numerator + 5\n        if gcd(numerator, denominator) == 1:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "d54e6eab7a2b49a8afcd367d2c88a350": [
        "def solution():\n    for original_amount in range(1, 10000):\n        spent_on_chair = 120\n        remainder_after_chair = original_amount - spent_on_chair\n        spent_on_jacket = 0.4 * remainder_after_chair\n        remainder_after_shopping = original_amount - spent_on_chair - spent_on_jacket\n        if remainder_after_shopping == original_amount * 0.3:\n            return original_amount\n\nans = solution()"
    ],
    "104457856ee04bf79d6b2d936f9025bb": [
        "def solution():\n    # Time spent jogging in hours (from 6:30am to 7:00am)\n    time_jogging = 0.5\n    \n    # Time spent walking in hours (from 7:00am to 8:00am)\n    time_walking = 1\n    \n    # Speed of jogging in miles per hour\n    speed_jogging = 6\n    \n    # Speed of walking in miles per hour\n    speed_walking = 5\n    \n    # Distance covered while jogging\n    distance_jogging = time_jogging * speed_jogging\n    \n    # Distance covered while walking\n    distance_walking = time_walking * speed_walking\n\n    # Total distance traveled in miles\n    total_distance = distance_jogging + distance_walking\n\n    return total_distance\n\nans = solution()"
    ],
    "a900a568f02d4a159d7b0f8c62c4e745": [
        "def solution():\n    from math import lcm\n    return lcm(6, 10)\n\nans = solution()"
    ],
    "1aaf2aac3d134b9e8804dd390e239bda": [
        "def solution():\n    total_books = 35\n    layers = 4\n    # Applying Pigeonhole Principle: n = (m - 1) * k + 1 => m = ceil(n / k)\n    min_books_in_top_layer = (total_books + layers - 1) // layers\n    return min_books_in_top_layer\n\nans = solution()"
    ],
    "4f73e090c9d24ebf8913ba71fddf7af3": [
        "def solution():\n    numbers = [0, 1, 2, 3]\n    count = 0\n    for hundreds in numbers[1:]:  # Hundreds place cannot have 0\n        for tens in numbers:\n            for ones in numbers:\n                if hundreds != tens and hundreds != ones and tens != ones:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "79aaa41810464d378e8d61b04cee59b9": [
        "def solution():\n    return 129.35 - 0.47\n\nans = solution()"
    ],
    "f1d3495298e84267bc30b1547d7319b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of books Ahmad bought initially\n    x = symbols('x')\n    \n    # The total price of the initial books\n    total_price_initial_books = 3.5 * x\n    \n    # The total price of the additional books\n    total_price_additional_books = 6 * 2\n    \n    # The total price of all the books\n    total_price_all_books = total_price_initial_books + total_price_additional_books\n    \n    # The new average price after buying additional books\n    new_average_price = 4\n    \n    # The total number of books\n    total_number_of_books = x + 2\n    \n    # Equation based on the definition of average\n    equation = Eq(total_price_all_books / total_number_of_books, new_average_price)\n    \n    # Solve for x\n    solution = solve(equation, x)\n\n    # Number of books bought initially plus the 2 additional books\n    return solution[0] + 2\n\nans = solution()"
    ],
    "483d2059d96645c8a1cd0eaef152a05a": [
        "from sympy import symbols, solve\n\ndef solution():\n    a, b, c = symbols('a b c', integer=True)\n    \n    # Define our constraints\n    constraints = [\n        a + b + c - 31,\n        a > 0,\n        b > 0,\n        c > 0\n    ]\n    \n    # Use `solve` to find the values of a, b, and c that meet the constraints\n    max_product = 0\n    solutions = solve(constraints, (a, b, c))\n    for sol in solutions:\n        product = sol[0] * sol[1] * sol[2]\n        if product > max_product:\n            max_product = product\n    \n    return max_product\n\nans = solution()"
    ],
    "7673b69c12a4478ba10dd72c7cba39cc": [
        "def solution():\n    total_weight_kg = 1.2\n    piece_weight_g = 30\n    total_weight_g = total_weight_kg * 1000\n    num_pieces = total_weight_g / piece_weight_g\n    return int(num_pieces)\n\nans = solution()"
    ],
    "cd0cb1ffbdd74527b73e0b27a88458ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let r be the number of candies Rachel originally has\n    # Let a be the number of candies Alice originally has\n    r, a = symbols('r a')\n\n    # If Rachel gives Alice 10 pieces, then they would have the same number\n    eq1 = Eq(r - 10, a + 10)\n    \n    # If they both eat 8 pieces, Rachel has 3 times as many as Alice\n    eq2 = Eq((r - 8) / 3, a - 8)\n\n    # Solving the system of equations to find the original number of candies\n    solutions = solve((eq1, eq2), (r, a))\n    total_candies = solutions[r] + solutions[a]\n\n    return total_candies\n\nans = solution()"
    ],
    "6d6e8256edb347ee9e3d4d5dfa3a712c": [
        "def solution():\n    ans = 748 - 189\n    return ans\n\nans = solution()"
    ],
    "844bb71707b14ba9b438958cdcf143a8": [
        "def solution():\n    first_term = 50\n    common_difference = -4  # since the sequence is decreasing\n\n    # An arithmetic sequence is negative when a_n < 0.\n    # a_n = a_1 + (n-1)d < 0\n    # 50 + (n-1)(-4) < 0\n    # (n-1) > 50/4\n    # (n-1) > 12.5\n    # n > 13.5\n    # Since n has to be an integer n should be 14\n    # But we are looking for the term before it becomes negative, hence n-1\n    \n    num_terms = 13  # The term before the 14th term (which is the first negative)\n\n    return num_terms\n\nans = solution()"
    ],
    "4ecf79f778ae40b686861b81b759f60e": [
        "def solution():\n    liters_to_quarts = 2.5 * 1.05669  # 1 liter is approximately 1.05669 quarts\n    cups = liters_to_quarts / 0.5      # Determine the number of 0.5-quart cups\n    return round(cups)                 # Round the result to the nearest integer\n\nans = solution()"
    ],
    "4845459ce472463eab28814467f9c4ae": [
        "def solution():\n    return 12.3 + 4.9\n\nans = solution()"
    ],
    "3a7e7f1ca5674fc894e02d029b5853cd": [
        "def solution():\n    ans = 18 // 3\n    return ans\n\nans = solution()"
    ],
    "c6c173915a8044e697dc662694645197": [
        "def solution():\n    squares = 45\n    circles = squares // 3\n    triangles = squares * 2\n    \n    total_shapes = squares + circles + triangles\n    \n    return total_shapes\n\nans = solution()"
    ],
    "f9418bd52e404cb0ba8323619f7e16d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angel, belle = symbols('angel belle')\n    \n    # Angel had 5/6 as many sweet wrappers as Belle.\n    original_condition = Eq(angel, belle * 5/6)\n    \n    # After Angel threw away 58 sweet wrappers, she had 75% as many sweet wrappers as Belle.\n    new_condition = Eq(angel - 58, belle * 75/100)\n\n    # Solve the system of equations\n    solutions = solve((original_condition, new_condition), (angel, belle))\n\n    return solutions[belle]\n\nans = solution()"
    ],
    "bd4a58a9e1f346c2a02141211d17aad3": [
        "def solution():\n    # Star jogs for 1 hour from 6:30 AM to 7:30 AM at 6 mph\n    jogging_distance = 6 * 1\n    \n    # Star walks for 2 hours from 7:30 AM to 9:30 AM at 5 mph\n    walking_distance = 5 * 2\n    \n    # Total distance travelled is the sum of jogging and walking distances\n    total_distance = jogging_distance + walking_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "37a3bced5a4e423d82496aac9bccd711": [
        "def solution():\n    ans = (4/9) * 36\n    return ans\n\nans = solution()"
    ],
    "1806328c303e465aae52d08571416744": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dad, son = symbols('dad son')\n\n    equation1 = Eq(dad - 6, 5 * (son - 6))\n    equation2 = Eq(dad + son, 78)\n\n    solution_dict = solve((equation1, equation2), (dad, son))\n\n    return solution_dict[dad]\n\nans = solution()"
    ],
    "a9881864fa194fbdb56c0ce044f7e9a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables\n    children = symbols('children')\n    \n    # Create the equations based on the problem\n    equation1 = Eq(children * 70, 20 + children * (70 - 20))\n    equation2 = Eq(children * 60 + 210, children * 70)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (children))\n    \n    # Return the number of children\n    return solutions[children]\n\nans = solution()"
    ],
    "b83cbcd4901c48eabd1bebc1c3bd0eab": [
        "def solution():\n    salary = 3500\n    remit_rate = 0.20\n    bank_charge_rate = 0.005\n\n    remit_amount = salary * remit_rate\n    bank_charge = remit_amount * bank_charge_rate\n\n    return bank_charge\n\nans = solution()"
    ],
    "0208115272b747ed9f455438107597e9": [
        "def solution():\n    account_balance = -76.20\n    payment_received = 120.75\n    new_balance = account_balance + payment_received\n    return new_balance\n\nans = solution()"
    ],
    "f6c1628be8644402bd9f85c22ea356d8": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime('2/3/2023', '%d/%m/%Y')\n    end_date = datetime.strptime('15/4/2023', '%d/%m/%Y')\n    \n    duration = end_date - start_date\n    return duration.days + 1\n\nans = solution()"
    ],
    "eeacd0848f0c4bb8b1df25d1292193a6": [
        "def solution():\n    count = 0\n    for vase1 in range(1, 10):\n        for vase2 in range(1, 10):\n            for vase3 in range(1, 10):\n                if vase1 + vase2 + vase3 == 10 and len(set([vase1, vase2, vase3])) == 3:\n                    count += 1\n    return count // 6  # division by 6 due to the permutations of vases\n\nans = solution()"
    ],
    "a3975ec5c3e042a19cc5b99120625ee9": [
        "def solution():\n    # Since B=2 and D=0, the given equation becomes 5 × ABC20EF = 6 × EF20BC\n    # The fact that ABC20EF is divisible by 5 implies that F must be 0 or 5.\n    # Since D and F cannot be the same, F must be 5.\n    # Now, rewrite the equation: 5 × ABC205 = 6 × 520ABC\n    # Divide both sides by 5: ABC205 = 6/5 × 520ABC\n    # Integer solutions will only exist when the last digit of 6/5 × 520ABC is zero, which means 520ABC must end in a 5.\n    # Now, rewrite the equation, with C taking the value of 5 to ensure the last digit is 0 when multiplied by 6.\n    # The equation is now 5 × AB5205 = 6 × 5205AB\n    # Split it into the whole number and the decimal part: 5 × AB520 = 6 × 520AB and 5 × 5 = 6 × B, where B is 2\n    # Divide the first equation by 10 to simplify: 5 × AB52 = 6 × 520A\n    # Now, solve for A:\n    # Any valid A should satisfy: when multiplied by 520 gives the last digit 2, only A=8 satisfies this condition.\n    A = 8\n    # The equation becomes: 5 × 8B52 = 6 × 5208\n    # To get the last digit for B to be 2 when multiplied by 5, B should be 4, but we know B is 2, which is already given.\n    B = 2\n    # Now we know A=8 and B=2, the only digit left is E.\n    # The equation becomes: 5 × 8252 = 6 × 5208\n    # Divide this equation to find E:\n    ABC205 = 5 * (80000 + 2000 + 200 + 5)\n    EF20BC = 6 * (50000 + 200 + 8)\n    # Calculate ABC205 and EF20BC and compare them to find E\n    ABC205_val = ABC205\n    EF20BC_val = EF20BC\n    for i in range(10):\n        if (EF20BC_val + i * 1000) % 100000 == ABC205_val % 100000:\n            E = i\n            break\n    # We have found all the digits, now return the four-digit number FACE\n    FACE = int(f\"{A}{2}{E}{5}\")\n    return FACE\n\nans = solution()"
    ],
    "29b56d3088d1435786656e1ffbb6008d": [
        "def solution():\n    for num in range(1000, 10000):  # assuming the special number has 4 digits\n        if str(num)[-1] == '9':\n            new_num = int('9' + str(num)[:-1])\n            if new_num == 4 * num:\n                return num\n\nans = solution()"
    ],
    "3693bdc4f96c495abe74ef6590148d91": [
        "def solution():\n    base_price = 200\n    increase_percentage = 0.45\n    increased_price = base_price + (base_price * increase_percentage)\n    \n    return increased_price\n\nans = solution()"
    ],
    "ec35840ccd1248e5a6d29e1104245ccc": [
        "def solution():\n    import math\n    # There are 7 students, but Eddie is fixed at one end, and Avril is fixed next to Eddie.\n    # So we are essentially arranging the remaining 5 students in the other 5 positions.\n    # This is a permutation problem because the order of the remaining students matters.\n    remaining_students = 5  # Total 7 - 2 (Eddie and Avril)\n    \n    # Calculate the number of permutations for 5 students in 5 positions.\n    ans = math.factorial(remaining_students)\n    \n    return ans\n\nans = solution()"
    ],
    "eb53e414158c466caeef1968156633e7": [
        "def solution():\n    # gloves configuration\n    left_blue = 1\n    left_green = 2\n    right_blue = 3\n    right_green = 4\n\n    # Since Dilly can't differentiate between left and right, we consider colors only.\n    # The worst-case scenario is picking one by one each glove that is not part of a matching color pair.\n    # Pick one left-blue, then one left-green, two right-blue, and three right-green.\n    gloves_picked = left_blue + left_green + right_blue + right_green\n\n    # After picking these gloves, the next glove picked must complete a pair.\n    gloves_picked += 1\n\n    return gloves_picked\n\nans = solution()"
    ],
    "a7dc9f6214394b39a9a7494116ffb8e3": [
        "def solution():\n    numbers = [9, 7, 5, 4, 1, 8, 8]  # Given numbers without the missing number.\n    mean_value = 6  # Given mean of all numbers.\n\n    # Calculate total sum required for mean of 6 with 8 numbers.\n    total_sum_required = mean_value * 8\n\n    # Calculate current sum of given numbers.\n    current_sum = sum(numbers)\n\n    # Find the missing number by subtracting current sum from required total sum.\n    missing_number = total_sum_required - current_sum\n\n    return missing_number\n\nans = solution()"
    ],
    "dac30729f20b435e955d54823c225c8a": [
        "def solution():\n    # Calculate the number of holes initially (with 3m intervals)\n    initial_interval = 3\n    circumference = 300\n    initial_holes = circumference // initial_interval  # Use floor division\n\n    # Number of holes already dug\n    holes_dug = 30\n\n    # Calculate the new number of holes (with 5m intervals)\n    new_interval = 5\n    new_total_holes = circumference // new_interval  # Use floor division\n\n    # Calculate how many more holes need to be dug\n    additional_holes_needed = new_total_holes - holes_dug\n\n    return additional_holes_needed\n\nans = solution()"
    ],
    "969bbc016ec64147ba5857f77302bf8c": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    rachel, alice = symbols('rachel alice')\n\n    eq1 = Eq(rachel - 10, alice + 10)\n    eq2 = Eq((rachel - 8) / 3, alice - 8)\n\n    solutions = solve((eq1, eq2), (rachel, alice))\n\n    total_sweets = solutions[rachel] + solutions[alice]\n\n    return total_sweets\n\nans = solution()"
    ],
    "752173f5003b4bd6abe560d6fd64f3ea": [
        "def solution():\n    num_pasta = 2\n    num_sauces = 3\n    num_toppings = 2\n\n    combinations = num_pasta * num_sauces * num_toppings\n    return combinations\n\nans = solution()"
    ],
    "55e306d2ed6b464bba4d3a62d5c153a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 3) / 4, 12)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a9d1e1b3a6ff495da1992840b560d4ec": [
        "def solution():\n    cache = {} # A cache to store known results of the fibonacci sequence\n\n    def fibonacci(n):\n        # Base cases for the fibonacci sequence\n        if n == 0: return 0\n        elif n == 1: return 1\n        \n        # Check if the result is already in the cache\n        if n in cache:\n            return cache[n]\n\n        # Compute the fibonacci number and store it in the cache\n        cache[n] = fibonacci(n - 1) + fibonacci(n - 2)\n        return cache[n]\n\n    # First, count the ways to reach the 5th step\n    ways_to_step_5 = fibonacci(5)\n    \n    # Then, count the ways to reach the 10th step from the 5th step\n    ways_from_5_to_10 = fibonacci(6) # Since it's like starting from step 0 to step 5\n    \n    # The total ways will be the product of both counts\n    ans = ways_to_step_5 * ways_from_5_to_10\n\n    return ans\n\nans = solution()"
    ],
    "25a9b81e1f254a22ba8254c18f4094b6": [
        "def solution():\n    ans = sum(i * (16 - i) for i in range(1, 16))\n    return ans\n\nans = solution()"
    ],
    "2553265bfbbf4a7aaae766e5e726bdde": [
        "def solution():\n    ans = 38 + (56 / 7) * 4\n    return ans\n\nans = solution()"
    ],
    "5fe9f334c8c54820a5b563a6ccd139b0": [
        "def solution():\n    erased_numbers = []\n\n    for number in range(1, 51):\n        if '3' in str(number):\n            erased_numbers.append(number)\n\n    ans = sum(erased_numbers)\n    return ans\n\nans = solution()"
    ],
    "d53e348d27d24f5f894e4c70ba210f90": [
        "def solution():\n    for cookies in range(1, 1000):  # Assuming the number of cookies is under 1000 for the sake of the problem\n        if (cookies % 3 == 1) and (cookies % 4 == 3) and (cookies % 5 == 4):\n            return cookies\n\nans = solution()"
    ],
    "50d48bd4a4534e6794fdff42085da5c9": [
        "def solution():\n    total_length = 305\n    pipe_length = 5\n    num_pipes = total_length // pipe_length\n\n    return num_pipes if total_length % pipe_length == 0 else num_pipes + 1\n\nans = solution()"
    ],
    "7a4bff3e5801439598b5006a37f9e671": [
        "from itertools import permutations\n\ndef solution():\n    max_val = float('-inf')\n    numbers = [15, 5, 25, 15, -6, 7]\n    ops = ['+', '*', '+', '-', '+']\n    brackets = [(0, 2), (1, 3), (2, 4), (3, 5)]\n    for comb in permutations(brackets, 2):\n        if comb[0][1] < comb[1][0]:\n            expression = numbers[:]\n            for i, op in enumerate(ops):\n                if i == comb[0][0]:\n                    expression[i] = f'({expression[i]} {op} {expression[i + 1]}'\n                    expression[i + 1] = ''\n                elif i == comb[0][1]:\n                    expression[i] = f'{expression[i]})'\n                elif i == comb[1][0]:\n                    expression[i] = f'({expression[i]} {op} {expression[i + 1]}'\n                    expression[i + 1] = ''\n                elif i == comb[1][1]:\n                    expression[i] = f'{expression[i]})'\n                else:\n                    expression[i] = f'{expression[i]} {op} {expression[i + 1]}'\n                    expression[i + 1] = ''\n            expression = ''.join(map(str, expression))\n            max_val = max(max_val, eval(expression))\n    return max_val\n\nans = solution()"
    ],
    "a8c6a94a28e9428ab4b13cce74354488": [
        "def solution():\n    ivan_average = 80\n    billy_average_before = 89\n    billy_target_average = ivan_average + 10\n    \n    # Ivan's total score for 5 assignments\n    ivan_total = ivan_average * 5\n    \n    # Billy's total score for 4 assignments\n    billy_total_before = billy_average_before * 4\n    \n    # Billy's total score needed for 5 assignments to reach the target average\n    billy_target_total = billy_target_average * 5\n    \n    # Billy's score needed in the fifth assignment\n    billy_score_in_fifth = billy_target_total - billy_total_before\n    \n    return billy_score_in_fifth\n\nans = solution()"
    ],
    "6580c0b5f26f44f8b40aa50046f59348": [
        "def solution():\n    # The problem is equivalent to finding pairs (x, 1000-x) where x is a whole number.\n    # Since x can range from 1 to 999, there are 999 such pairs.\n    # However, since the order doesn't matter in this context (i.e., (x, 1000-x) is the same as (1000-x, x)),\n    # we should divide this number by 2 to avoid double counting. But we need to account for the middle term (500, 500), \n    # which can only occur once. Hence we add 1 back after the division.\n\n    num_ways = 999 // 2 + 1\n    return num_ways\n\nans = solution()"
    ],
    "9ec6921203444761a39b2c67e85f0e88": [
        "网络故障，请重试"
    ],
    "649064d7c05f4454a41370190bf8d34e": [
        "def solution():\n    difference = 44 - 39  # The common difference between terms\n    first_term = 39 - (6 * difference)  # Calculate the first term using the 7th value (39) and going back 6 steps\n\n    nth_term = first_term + (100 - 1) * difference  # Calculate the 100th term using the first term and the common difference\n\n    return nth_term\n\nans = solution()"
    ],
    "689c63a78be543f190535ba4297790fc": [
        "def solution():\n    peaches = 45\n    apples = 5 + (2 * peaches)\n    return apples\n\nans = solution()"
    ],
    "8690a8a142c04f6691c64b0d4fb396ae": [
        "def solution():\n    for i in range(1, 28):\n        if (i % 4 == 3) and (i % 7 == 3):\n            return i % 28\n\nans = solution()"
    ],
    "a1e89dc194cd4d63832576ee3cf6e989": [
        "def solution():\n    from sympy import factorint\n    \n    factors = factorint(1260)\n    m = 1\n    for p, exp in factors.items():\n        if exp % 2 != 0:\n            m *= p\n    \n    return m\n\nans = solution()"
    ],
    "c736e99075ea4aa78054fd8167197424": [
        "def solution():\n    lcm = 8 * 11  # Least common multiple of 8 and 11\n    for number in range(10, 100):  # Loop over two-digit numbers\n        if number % 8 == 6 and number % 11 == 6:\n            return number\n\nans = solution()"
    ],
    "ada1b1b89cec47f8849cd2d017a8b183": [
        "def solution():\n    students = 40\n    boat_capacity = 7\n    boats_needed = (students + boat_capacity - 1) // boat_capacity\n    return boats_needed\n\nans = solution()"
    ],
    "3accd80c3de74ff4b09605882d0d3036": [
        "def solution():\n    table_price = 151.25\n    chair_price = 24.15\n    total_spent = table_price + chair_price\n    \n    return total_spent\n\nans = solution()"
    ],
    "b61ef7925dd94c3fb08a4830a036e4a4": [
        "def solution():\n    base = 9\n    ones_digit_of_base = base % 10\n    power = 99\n\n    # Since we're interested in the ones digit, calculate the ones digit in a cycle\n    ones_digit_cycle = [ones_digit_of_base]\n    for _ in range(1, 10):  # We only need to check up to the length of the cycle, which is at most 10 for base 10\n        next_ones_digit = (ones_digit_cycle[-1] * ones_digit_of_base) % 10\n        if next_ones_digit in ones_digit_cycle:\n            # If there's repetition, then the cycle is determined\n            break\n        ones_digit_cycle.append(next_ones_digit)\n\n    # Now find the position in the cycle that corresponds to 999^99's ones digit\n    position_in_cycle = (power - 1) % len(ones_digit_cycle)\n    ans = ones_digit_cycle[position_in_cycle]\n\n    return ans\n\nans = solution()"
    ],
    "dff026a0fb2549369d7be7c6aa7adf6b": [
        "def solution():\n    for month in range(1, 13):  # There are 12 months in a year\n        for day in range(1, 32):  # Assuming up to 31 days in a month\n            result = (((month * 4) + 1) * 50) + (day * 2) - 50\n            if result == 1234:\n                return (month, day)\n\nans = solution()"
    ],
    "20db318a830540dea5738356c974b264": [
        "def solution():\n    animal_stickers = 38\n    fruit_stickers = 14\n    given_away = 9\n\n    total_left = (animal_stickers + fruit_stickers) - given_away\n\n    return total_left\n\nans = solution()"
    ],
    "5c4cd1d2ec4b44978363bea24ebfa91c": [
        "def solution():\n    remainder = 2**2015 % 3\n    return remainder\n\nans = solution()"
    ],
    "789c72c81c1f4343a6331f9136346c34": [
        "def solution():\n    ans = 64 * 42\n    return ans\n\nans = solution()"
    ],
    "9521e8915fce4c6990100988ef474bdb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total value of the five other ponies\n    x = symbols('x')\n\n    # Average value of ponies in each stable before Rein Beau moves\n    avg_before = x / 5\n\n    # Average value of ponies in the small stable after Rein Beau moves\n    avg_small_after = (x + 250000) / 4\n\n    # Average value of ponies in the large stable after Rein Beau moves\n    avg_large_after = x / 2\n\n    # The average value of the ponies in each stable rises by £10,000\n    # when Rein Beau moves to the large stable\n    equation = Eq(avg_small_after - avg_before, 10000)\n\n    # Solve for x\n    total_value_other_ponies = solve(equation, x)[0]\n\n    # Calculate the total value of all six ponies\n    total_value_all_ponies = total_value_other_ponies + 250000\n\n    return total_value_all_ponies\n\nans = solution()"
    ],
    "3baa88503f344e83b1afe7aee1dc88ea": [
        "def solution():\n    from math import factorial\n\n    # Four pupils standing together can be treated as a single entity.\n    # So we have 5 entities to arrange: (4 pupils as a group) + 4 individual pupils.\n    # There are 5! ways to arrange these 5 entities.\n    entity_arrangements = factorial(5)\n\n    # Now, the 4 pupils inside the single group entity can be arranged among themselves.\n    # There are 4! ways to do this.\n    group_arrangements = factorial(4)\n    \n    # Total arrangements are the product of entity arrangements and group arrangements.\n    total_arrangements = entity_arrangements * group_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "3a2cd4abff9642379247f914750ea56d": [
        "def solution():\n    sugar = 7\n    water = 21\n    mixture = sugar + water\n    concentration = (sugar / mixture) * 100\n    return concentration\n\nans = solution()"
    ],
    "8161131c45e24fd3b0153fe5037c7c3d": [
        "def solution():\n    # Let the middle number be x, then:\n    # Consecutive numbers will be (x-1), x, (x+1)\n    # Their sum will be (x-1) + x + (x+1) = 3x\n    # Given that their sum is 60, we can set the equation 3x = 60\n    # Solving for x, we get x = 60 / 3\n    \n    middle_number = 60 // 3\n    largest_number = middle_number + 1\n    return largest_number\n\nans = solution()"
    ],
    "a78fc203de2e495b9c3e288ffa2f20f2": [
        "def solution():\n    for gold_medals in range(81):\n        silver_medals = 80 - gold_medals\n        if 5 * gold_medals + 4 * silver_medals == 331:\n            return gold_medals\n\nans = solution()"
    ],
    "5bd73885b66a40709b62ae02cee893ef": [
        "def solution():\n    return 176 / 8\n\nans = solution()"
    ],
    "ffc0cb9420c84ae1a80072d5874cfa79": [
        "def solution():\n    cost_of_lamb = 8.70\n    cost_of_beef = 9.40\n    \n    total_cost = (7 * cost_of_lamb) + (30 * cost_of_beef)\n    \n    return total_cost\n\nans = solution()"
    ],
    "f51701360c30428284abf7311cea43d8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let m be the work done by one master in one day\n    # Let a be the work done by one apprentice in one day\n    m, a = symbols('m a')\n\n    # 1 master + 3 apprentices for 4 days\n    equation1 = Eq(4 * (1 * m + 3 * a), 1)\n\n    # 2 masters + 1 apprentice for 3 days\n    equation2 = Eq(3 * (2 * m + 1 * a), 1)\n\n    # Solve the system of equations to find m and a\n    solutions = solve((equation1, equation2), (m, a))\n\n    # Calculate the time for 1 apprentice to complete the task\n    time_for_one_apprentice = 1 / solutions[a]\n\n    return time_for_one_apprentice\n\nans = solution()"
    ],
    "01d43a1f75294754a6d7791646d4bb6e": [
        "def solution():\n    # From the provided results, we can infer the definition of the new operation ★\n    # If the second number is smaller or equal to half of the first number, the result seems to be the sum of the two numbers.\n    # Otherwise, it seems to be the first number multiplied by the second number.\n\n    # Define the function for the new operation based on the pattern observed\n    def star_operation(a, b):\n        if b <= a / 2:\n            return a + b\n        else:\n            return a * b\n    \n    # Using the inferred definition, calculate 11★10\n    ans = star_operation(11, 10)\n    return ans\n\nans = solution()"
    ],
    "d02d6991f9044e2cac9926170d76efbe": [
        "def solution():\n    women = 80\n    # Let total_spectators be the total number of spectators\n    # 1 - 1/3 = 2/3 of the spectators were not children (men + women)\n    # Out of these 2/3 of the total, 5/8 were men\n    # Hence, women made up (1 - 5/8) of the (2/3) of the spectators\n    # Which means (3/8) of (2/3) = (3/8) * (2/3) = (3 * 2) / (8 * 3) = 2/8 = 1/4 of the total are women\n    # Therefore, women = total_spectators / 4\n    # So total_spectators = women * 4\n    total_spectators = women * 4\n\n    return total_spectators\n\nans = solution()"
    ],
    "05e806ec585f447fac70a1de0f7fafd7": [
        "def solution():\n    position_elephant_from_left = 10\n    position_rabbit_from_right = 9\n    dolls_between = 5\n\n    total_dolls = position_elephant_from_left + position_rabbit_from_right + dolls_between - 1\n    return total_dolls\n\nans = solution()"
    ],
    "533391b7910c4d72b88782719e955c60": [
        "def solution():\n    result = 0.4 * (11 / 52 / (2 + 3/4) * (4.3 - 1.8)) * 26\n    return result\n\nans = solution()"
    ],
    "a37239e1c2af4896b905775df4d04faf": [
        "def solution():\n    ans = 234 + 578\n    return ans\n\nans = solution()"
    ],
    "4e8d72ffdc694d47a6676b0e8d8108c7": [
        "from sympy import primerange\n\ndef solution():\n    primes_sum = sum(primerange(50, 61))  # 61 is exclusive\n    return primes_sum\n\nans = solution()"
    ],
    "8c65dcb55d104655a4964ef2003670c8": [
        "def solution():\n    boys_more = 32\n    for total_layers in range(1, 100):\n        if total_layers % 2 == 0:\n            boys = (total_layers // 2) * (total_layers + 1)\n            girls = boys - boys_more\n        else:\n            boys = ((total_layers + 1) // 2) ** 2\n            girls = boys - boys_more\n\n        if boys - girls == boys_more:\n            total_students = boys + girls\n            return total_students\n\nans = solution()"
    ],
    "e35edf1fb63a4e5880945617f5b1aa9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_roses, original_daisies, months = symbols('original_roses original_daisies months')\n    equation1 = Eq(original_roses + original_daisies, 300)\n    equation2 = Eq(original_roses + months, 280)\n    equation3 = Eq(original_daisies + months, 180)\n\n    solutions = solve((equation1, equation2, equation3), (original_roses, original_daisies, months))\n\n    return solutions[original_roses]\n\nans = solution()"
    ],
    "16e66be3bead4705bfdef4b05bca2651": [
        "def solution():\n    total_books = 3358\n    english_books = 2047\n    non_english_books = total_books - english_books\n    comics = non_english_books / 3\n    return int(comics)\n\nans = solution()"
    ],
    "a01cc16fe4b240daacb5d33d3e822ab6": [
        "def solution():\n    return 8.002 + 10.421\n\nans = solution()"
    ],
    "be6d4037b22d46cb906e9ec47cc6b7e7": [
        "def solution():\n    nth_term_10 = 23\n    nth_term_15 = 38\n    position_10 = 10\n    position_15 = 15\n    position_102 = 102\n\n    # Find the common difference\n    common_difference = (nth_term_15 - nth_term_10) / (position_15 - position_10)\n\n    # Find the first term using the 10th term\n    first_term = nth_term_10 - (position_10 - 1) * common_difference\n\n    # Find the 102nd term\n    nth_term_102 = first_term + (position_102 - 1) * common_difference\n\n    return nth_term_102\n\nans = solution()"
    ],
    "ba03d5e5fb8f453c9e98a6881e4d689b": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    coffee_litres = 6\n\n    total_ratio = coffee_ratio + milk_ratio\n    total_litres = (coffee_litres / coffee_ratio) * total_ratio\n\n    return total_litres\n\nans = solution()"
    ],
    "70d30636843c42d0a9438f05f8dc9d7c": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('0')\n    return count\n\nans = solution()"
    ],
    "9bb2eab82c5d477485d34c73db23335d": [
        "def solution():\n    num1 = (1 / 30 + 1 / 6) / (2 / 25)\n    num2 = (2 - 2 / 3) / (8 / 3)\n    \n    ans = num1 + num2\n    \n    return ans\n\nans = solution()"
    ],
    "8945cbc7b9b04405ae4a89f7f6240bbe": [
        "def solution():\n    accurate_shots = 6\n    missed_shots = 4\n    score_per_accurate_shot = 5\n    total_score = accurate_shots * score_per_accurate_shot\n    total_shots = accurate_shots + missed_shots\n    average_score = total_score / total_shots\n    return average_score\n\nans = solution()"
    ],
    "25875cdc332046b7b367fa4d85e5897d": [
        "def solution():\n    total_cost = 11.4\n    total_kg = 0.6\n    cost_per_kg = total_cost / total_kg\n    \n    return cost_per_kg\n\nans = solution()"
    ],
    "8e22c76c78f342539459fe92d4c4cf17": [
        "def solution():\n    total_eggs = 158\n    eggs_per_box = 12\n\n    num_boxes = -(-total_eggs // eggs_per_box)  # ceiling division\n\n    return num_boxes\n\nans = solution()"
    ],
    "12c9cf652a084a0780859470b77f7abb": [
        "def solution():\n    count = 0\n    for a in range(1, 8):\n        for b in range(1, 8):\n            if a + b == 8 and len(set([a, b])) == len([a, b]):\n                count += 1\n    return count // 2  # Divided by 2 to correct for overcounting each pair twice\n\nans = solution()"
    ],
    "d3338ec2774341618a2a54e2dd8271c5": [
        "def solution():\n    # Start from 1 apple for the child getting the least, and increase\n    # the number of apples for each subsequent child while ensuring they\n    # all get a different amount and the total is 50.\n    # Since the problem only asks for the least number of apples for the child\n    # getting the most, we want to minimize their apples by maximizing the others.\n\n    for most_apples in range(1, 50):  # The most apples one child can get\n        # Try distributing the remaining apples in a strictly increasing manner\n        total_apples = most_apples\n        for i in range(1, 8):  # There are 7 more children\n            total_apples += most_apples - i\n        \n        # If the total is 50, we've found the least number of apples for the kid \n        # who gets the most, with everyone getting a different amount.\n        if total_apples == 50:\n            return most_apples\n\nans = solution()"
    ],
    "25880b2e8da54b31803560072e23ded7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, orange = symbols('apple orange')\n    equation1 = Eq(3 * apple + 5 * orange, 270)\n    equation2 = Eq(3 * apple + 7 * orange, 342)\n\n    solutions = solve((equation1, equation2), (apple, orange))\n\n    return solutions[orange]\n\nans = solution()"
    ],
    "f1b1106045274f7da63ef3c891f87c34": [
        "def solution():\n    train_length = 253\n    tunnel_length = 669\n    speed = 104\n    \n    # Time taken for the entire train to pass through the tunnel\n    # is the time taken for the train to cover its own length plus the length of the tunnel\n    total_distance = train_length + tunnel_length\n    time = total_distance / speed\n    \n    return time\n\nans = solution()"
    ],
    "adb62673a17442e2b006b7f5afbcd666": [
        "def solution():\n    return -7 - 4\n\nans = solution()"
    ],
    "457957b559d5468b8aeb74e2ef585f75": [
        "def solution():\n    base_amount = 350\n    percentage_1 = 20 / 100\n    percentage_2 = 50 / 100\n\n    result = base_amount * percentage_1 * percentage_2\n\n    return result\n\nans = solution()"
    ],
    "397ebb0d5b224df59aad1f5b774838fd": [
        "def solution():\n    total_men = 40\n    bow_ties = 18\n    spectacles = 23\n\n    # The greatest number that do not wear bow ties nor spectacles is the total\n    # minus the ones wearing bow ties or spectacles at the very least.\n    # As per the inclusion-exclusion principle, if we simply subtract bow_ties and spectacles\n    # from total_men, we might be subtracting those who wear both more than once.\n    # So we add the overlap (minimum of bow_ties and spectacles) once to adjust\n    min_wearing_both = min(bow_ties, spectacles)\n    not_wearing_either = total_men - (bow_ties + spectacles - min_wearing_both)\n    \n    return not_wearing_either\n\nans = solution()"
    ],
    "d23d120cfeb64135ab69663205810fbe": [
        "def solution():\n    return (1 / 3) * 414\n\nans = solution()"
    ],
    "96b12e33af8a4a438cc3968e7b3f70d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue = symbols('blue')\n    red = blue + 25\n    green = red + 32\n\n    equation = Eq(blue + red + green, 112)\n\n    solutions = solve(equation, blue)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "bac3e6b470ff4843842320df6d600e95": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "6bd2a5cd9d044be0ba73d47aa5238bbd": [
        "from math import factorial\n\ndef solution():\n    # Treat Ali and Bala as one entity since they must stand together.\n    # Total entities = 4 (Ali&Bala, Charles, Dan, Ella)\n\n    # 1. Calculate the number of ways to arrange these 4 entities\n    # Dan is fixed at the furthest left, we have 3 more entities to arrange\n    arrangements_entities = factorial(3)\n\n    # 2. Calculate number of ways to arrange Ali and Bala within their entity\n    arrangements_ali_bala = factorial(2)\n\n    # Multiply both counts to get the total different arrangements\n    return arrangements_entities * arrangements_ali_bala\n\nans = solution()"
    ],
    "13ec2dec449b48e5b1f5949021f5319a": [
        "def solution():\n    # First define the ratios of trades:\n    # Owen's fish to Oscar's rabbit trade: 3 fish for 2 rabbits => 1.5 fish per rabbit\n    fish_per_rabbit = 1.5\n\n    # Oscar's rabbit to Dennis's wheat trade: 3 rabbits for 4 wheat packs => 4/3 wheat pack per rabbit\n    wheat_per_rabbit = 4 / 3\n\n    # To get the wheat per fish ratio, we divide for wheat_per_rabbit by fish_per_rabbit\n    wheat_per_fish = wheat_per_rabbit / fish_per_rabbit  # (4/3) / 1.5\n\n    # Owen needs 8 packs of wheat, so we calculate the number of fishes for 8 packs\n    # by dividing the desired wheat packs by wheat_per_fish ratio\n    fishes_for_8_wheat = 8 / wheat_per_fish\n\n    return fishes_for_8_wheat\n\nans = solution()"
    ],
    "7604f69468c6421ebdd1ba850cd8b42d": [
        "def solution():\n    # Total apples\n    total_apples = 19\n    # Total children\n    total_children = 5\n    \n    # Sort children by the number of apples they get, child with most apples is last\n    # Assume the smallest number of apples each of the remaining children can get is 1, 2, 3, 4 respectively\n    # This is the minimum fair distribution before giving the remaining apples to the last child\n    min_distribution = [1, 2, 3, 4]\n    # Calculate the apples remaining after minimum distribution\n    remaining_apples = total_apples - sum(min_distribution)\n    \n    # The last child gets all the remaining apples\n    max_apples_to_last_child = remaining_apples\n    \n    return max_apples_to_last_child\n\nans = solution()"
    ],
    "fb1c97df146541bebe3162f2e72c1cc0": [
        "def solution():\n    total_digits = 0\n    # 1-9: 9 pages with 1 digit\n    total_digits += 1 * 9\n    # 10-99: 90 pages with 2 digits\n    total_digits += 2 * 90\n    # 100-140: 41 pages with 3 digits\n    total_digits += 3 * (140 - 99)\n\n    return total_digits\n\nans = solution()"
    ],
    "9b13d74bafa4466eb645ffa554df735b": [
        "def solution():\n    total_students = 32 + 28 + 23 + 17\n    number_of_classes = 4\n    \n    average = total_students / number_of_classes\n    return average\n\nans = solution()"
    ],
    "b3e5cbab90804708bce6148613126f16": [
        "def solution():\n    # If we draw 15 red, then we have to guarantee getting the other colors,\n    # so we draw all 9 white next, which still does not guarantee a yellow.\n    # Therefore, we need to draw one more ball, which will be yellow.\n    # So the total is 15 (red) + 9 (white) + 1 (yellow) = 25\n    balls_needed = 15 + 9 + 1\n    \n    return balls_needed\n\nans = solution()"
    ],
    "4f366210af224a9f9f43bbc93ae4f875": [
        "def solution():\n    sequence = [2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35]\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "9939fb896f824a2881087102f27ab8c3": [
        "def solution():\n    total_length = 11.7\n    used_for_fences = 3.2\n    used_for_woods = 6.5\n    \n    left_over = total_length - (used_for_fences + used_for_woods)\n    \n    return left_over\n\nans = solution()"
    ],
    "6b79f6ee87a44493b182c62048b92e66": [
        "def solution():\n    # Let the correct tens place be x and ones place be y, forming the number (10x + y)\n    # The mistaken subtrahend is thus 53\n\n    # With the mistake, the resulting difference is 36\n    # Therefore, the mistaken minuend is 53 + 36 = 89\n\n    # Now the correct subtrahend will have tens place 3 (instead of 5)\n    # and ones place 2 (instead of 3)\n    # correct subtrahend is 32\n\n    # Therefore, the correct difference is\n    correct_difference = 89 - 32\n\n    return correct_difference\n\nans = solution()"
    ],
    "bb27ebca96a14753b3a39b73a2462099": [
        "from itertools import permutations\n\ndef solution():\n    digits = [2, 7, 8]\n    all_permutations = permutations(digits, 3)\n    count = len(list(all_permutations))\n    \n    return count\n\nans = solution()"
    ],
    "ee5084c8c8d24c4bbeb5d061801cc169": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ellen, lenny = symbols('ellen lenny')\n\n    # If Ellen gives away 12 sweets, she has 13/24 of the total\n    equation1 = Eq(ellen - 12, (13/24) * (ellen + lenny))\n\n    # If Lenny gives away 12 sweets, he has 3/8 of the total\n    equation2 = Eq(lenny - 12, (3/8) * (ellen + lenny))\n\n    solutions = solve((equation1, equation2), (ellen, lenny))\n\n    return sum(solutions.values())\n\nans = solution()"
    ],
    "eadf933fa489425a8e7934fbc30dfdf8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    tax_on_first_50k = 0.06 * 50000\n    tax_on_remaining = (0.06 + T) * (120000 - 50000)\n    total_tax = tax_on_first_50k + tax_on_remaining\n\n    tax_paid_equation = Eq(total_tax, 10000)\n\n    T_value = solve(tax_paid_equation, T)\n\n    return T_value[0]\n\nans = solution()"
    ],
    "1482dca47e9c40c88fa457ae47419d81": [
        "def solution():\n    # Assign the largest digits to the larger number's least significant digits\n    # and the smallest digits to the smaller number's least significant digits.\n    # This means we are effectively sorting the digits in descending order\n    # for the larger number and ascending order for the smaller number.\n\n    # Create two lists of digits, one in ascending order and one in descending order\n    ascending_digits = [0, 1, 2, 3, 4]\n    descending_digits = [9, 8, 7, 6, 5]\n\n    # Convert both lists of digits to numbers\n    smaller_number = int(''.join(map(str, ascending_digits)))\n    larger_number = int(''.join(map(str, descending_digits)))\n\n    # Return the difference\n    return larger_number - smaller_number\n\nans = solution()"
    ],
    "764c50d4619f44199a22a6b9f383ed24": [
        "def solution():\n    cost_per_pound = 49  # cost in pence\n    pounds_bought = 2\n    total_cost = cost_per_pound * pounds_bought\n\n    money_given = 100  # 1 pound = 100 pence\n    change = money_given - total_cost\n\n    return change\n\nans = solution()"
    ],
    "97138baaf4754087a327cc1e83d8fd4f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "14c07a0f9d734b5088fba3845ed8db4d": [
        "from sympy import isprime, primerange\n\ndef solution():\n    for n in primerange(1, 10**6):\n        if all(isprime(n + d) for d in [4, 6, 132, 250]):\n            return n\n\nans = solution()"
    ],
    "05e460cdfe874f2fbb3c0d1f81ffbec5": [
        "def solution():\n    train_length = 200  # length of train in meters\n    tunnel_length = 500  # length of tunnel in meters\n    speed = 10  # speed of train in meters per second\n    \n    total_distance = train_length + tunnel_length  # total distance the train needs to cover to pass the tunnel completely\n    duration = total_distance / speed  # time taken to cover the total distance at the given speed\n    \n    return duration\n\nans = solution()"
    ],
    "f018488d15f94b99915f6422728512b7": [
        "def solution():\n    ans = 374 * 36\n    return ans\n\nans = solution()"
    ],
    "1695f1a256a845c4b26912c5783eb123": [
        "def solution():\n    total_solution_weight = 200  # in grams\n    sugar_concentration = 0.15  # 15%\n\n    sugar_weight = total_solution_weight * sugar_concentration\n\n    return sugar_weight\n\nans = solution()"
    ],
    "c9a79ce675034b2489e740af3c031037": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    first_rabbit, second_rabbit, third_rabbit = symbols('first_rabbit second_rabbit third_rabbit')\n    \n    total_cost = 19.70\n    cost_difference1 = 2  # pound more for the second rabbit\n    cost_difference2 = 0.8  # 80p less for the third rabbit\n    \n    equation1 = Eq(second_rabbit, first_rabbit + cost_difference1)\n    equation2 = Eq(third_rabbit, second_rabbit - cost_difference2)\n    equation3 = Eq(first_rabbit + second_rabbit + third_rabbit, total_cost)\n    \n    solutions = solve((equation1, equation2, equation3), (first_rabbit, second_rabbit, third_rabbit))\n    \n    return solutions[first_rabbit]\n\nans = solution()"
    ],
    "60b84c6fa7f240ffafb43217e82d66db": [
        "from math import factorial\n\ndef solution():\n    # Number of presents not including toy car or the puzzle or the calculator\n    remaining_presents = 4\n\n    # Calculate combinations for the remaining presents\n    # Given to 3 children out of 5 (since Richard and Kevin are excluded for these presents)\n    combinations_for_remaining = factorial(remaining_presents) // factorial(remaining_presents - 3)\n\n    # Calculate combinations when Richard gets a toy car or a puzzle (2 options)\n    # and Kevin does not get the remaining option (toy car or puzzle)\n    # and there are 2 presents left for 3 remaining children\n    \n    # Case 1: Richard gets the toy car and Kevin gets the calculator\n    # we have 4 children (excluding Richard) and 5 remaining presents left to distribute\n    case_1 = factorial(5) // factorial(5 - 4)\n\n    # Case 2: Richard gets the puzzle and Kevin does not get the toy car\n    # Kevin can get one of the remaining 4 presents\n    # We have 4 children (excluding Kevin) and 4 remaining presents left to distribute\n    case_2 = remaining_presents * (factorial(4) // factorial(4 - 3))\n\n    # Add the counts from the two cases and multiply by combinations for remaining presents\n    total_ways = combinations_for_remaining * (case_1 + case_2)\n\n    return total_ways\n\nans = solution()"
    ],
    "23a1e04ca6614f4d99436ccdd578cd9c": [
        "def solution():\n    ans = sum((4*i**2 - 4*(i-1)**2) for i in range(1, 1016))\n    return ans\n\nans = solution()"
    ],
    "56bd9145d93e48f49139ec624dac2068": [
        "def solution():\n    jack_speed = 15  # Jack's speed in km/h\n    rose_speed = 10  # Rose's speed in km/h\n    time = 10  # time elapsed in hours\n    \n    # Relative speed is the difference in their speeds\n    relative_speed = jack_speed - rose_speed\n    \n    # They meet after 10 hours, so the distance between A and B is\n    # the relative speed times the time they've been traveling\n    distance_AB = relative_speed * time\n    \n    return distance_AB\n\nans = solution()"
    ],
    "2e878688541b46f5b7d0726609b2d7ef": [
        "def solution():\n    ans = 42.3 + 10.5 + 2.7 - 4.5\n    return ans\n\nans = solution()"
    ],
    "44ecc4dcdaa54831860666d510b464ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4.6 * x - 0.35, 0.57)\n\n    ans = solve(equation, x)\n\n    return ans[0]\n\nans = solution()"
    ],
    "b4fbda1fc3454970a479018d78ecff7c": [
        "def solution():\n    number = 48739\n    remainder = number % 3\n    ans = (3 - remainder) % 3\n    return ans\n\nans = solution()"
    ],
    "54c307c65d4942e3a14a0c97e9c6453b": [
        "def solution():\n    total_pupils = 467\n    girls = 333\n    teachers = 36\n\n    boys = total_pupils - girls\n    more_boys_than_teachers = boys - teachers\n    \n    return more_boys_than_teachers\n\nans = solution()"
    ],
    "6bf760b6b8a740cda324d6bb831f42b3": [
        "def solution():\n    # Calculate multiples of 7\n    multiples_of_7 = 5000 // 7\n\n    # Calculate multiples of 13\n    multiples_of_13 = 5000 // 13\n\n    # Calculate multiples of both 7 and 13 (which is multiples of 7*13=91)\n    multiples_of_both = 5000 // (7 * 13)\n\n    # Apply the Inclusion-Exclusion Principle\n    ans = multiples_of_7 + multiples_of_13 - multiples_of_both\n\n    return ans\n\nans = solution()"
    ],
    "c40a0a6c89c3412b86d23bb5ec098bae": [
        "def solution():\n    t_shirts_bought = 138\n    money_left = 56\n    t_shirts_total = 145\n\n    # Total money spent on t-shirts bought\n    money_spent = (t_shirts_total - t_shirts_bought) * money_left\n\n    # Total money Josephine had at first\n    total_money = money_spent + money_left\n    return total_money\n\nans = solution()"
    ],
    "7a791003812544b6bac377d65f16cb90": [
        "def solution():\n    n = 100\n    sum_of_cubes = (n ** 2 * (n + 1) ** 2) / 4\n    sum_of_integers = n * (n + 1) / 2\n    ans = sum_of_cubes / sum_of_integers\n\n    return int(ans)\n\nans = solution()"
    ],
    "70c643f015a64e749fe17245d8f47ced": [
        "def solution():\n    # Number of days David can complete the journal working alone per day\n    david_rate = 1/10\n    # Number of days Emma can complete the journal working alone per day\n    emma_rate = 1/18\n    \n    for david_days in range(15):\n        emma_days = 14 - david_days\n        # Total work done by David and Emma\n        if (david_days * david_rate) + (emma_days * emma_rate) == 1:\n            return emma_days\n\nans = solution()"
    ],
    "d5259f3a5c6e4402838e70389234367f": [
        "def solution():\n    for a in range(10):\n        number = int(f'1{a}2{a}3{a}4{a}5{a}')\n        if number % 11 == 0:\n            return a\n\nans = solution()"
    ],
    "75a7726543e04bea836b118cb451097f": [
        "def solution():\n    tallest_height = 132\n    shortest_height = 124\n    difference = tallest_height - shortest_height + 1  # possible heights\n    \n    # At least 4 students are of the same height (Pigeonhole Principle)\n    # In the worst case, the first 3 students of each height would be of different heights\n    # The 4th student of each height would match, so the smallest class size is when the 4th student fills the last height slot\n    \n    class_size = 3 * difference + 1  # 3 of each for difference in height and 1 for the guarantee\n    return class_size\n\nans = solution()"
    ],
    "a65121c2cf9a4a3f88d13765512d893a": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    # Total number of arrangements without restriction (7 letters: SSSUCCES)\n    total_ways = factorial(7)\n\n    # Number of ways in which S's are together\n    # Treat \"SSS\" as one unit, so we have five units (SSS, U, C, C, E)\n    # There are 5! ways to arrange these units.\n    s_together = factorial(5)\n\n    # Within the \"SSS\" unit, the three S's can arrange in 1 way as they are the same.\n    # So, multiply by the number of ways to arrange the 'C' letters (2! because there are 2 Cs).\n    s_together *= factorial(2)\n\n    # Subtract ways where S's are together from total ways\n    valid_ways = total_ways - s_together\n    \n    # The number of valid arrangements must be divided by the repetitions of 'C' and 'S'\n    # Since there are 2 'C's, 3 'S's and 1 each of 'U' and 'E', we divide to get unique permutations.\n    valid_ways //= (factorial(2) * factorial(3))\n\n    return valid_ways\n\nans = solution()"
    ],
    "51ad861e00ec431192e04a5eb59b3380": [
        "def solution():\n    original_pay_per_hour = 6.50\n    increase_percentage = 0.12\n\n    new_pay_per_hour = original_pay_per_hour * (1 + increase_percentage)\n\n    return new_pay_per_hour\n\nans = solution()"
    ],
    "d2e88cea338f4ce69692532138d94fcb": [
        "def solution():\n    # The sum of an arithmetic series is the average times the number of terms\n    # Since the average is given and the number of terms is known, we can calculate the sum of the series\n    average = 119\n    num_terms = 14\n    total_sum = average * num_terms\n    \n    # The first term in the arithmetic series can be calculated by taking the sum \n    # and subtracting (num_terms - 1) terms considering the common difference is 2 (since they are even numbers).\n    # sum = first_term + (first_term + 2) + ... + (first_term + 2*(num_terms - 1))\n    # sum = num_terms * first_term + 2*(1 + 2 + ... + (num_terms - 1))\n    # sum = num_terms * first_term + num_terms * (num_terms - 1)\n    # first_term = (sum - num_terms * (num_terms - 1)) / num_terms\n    first_term = (total_sum - num_terms * (num_terms - 1)) // num_terms\n    \n    return first_term\n\nans = solution()"
    ],
    "473dae367faa457db6245d50b030a2d2": [
        "def solution():\n    # Calculate 3^n for the last digit pattern, since it repeats every 4.\n    last_digits = [3**i % 10 for i in range(4)]\n\n    # The exponent 2009 mod 4 will give us the position in the cycle\n    position = 2009 % 4\n\n    # Return the corresponding last digit from the pattern\n    return last_digits[position]\n\nans = solution()"
    ],
    "cba5a4b77fcc4b47a485159e97c6c596": [
        "def solution():\n    total_amount_pence = 126 * 100  # Convert pounds to pence\n    for num_coins_each in range(1, total_amount_pence):\n        if (2 * num_coins_each + 5 * num_coins_each) == total_amount_pence:\n            return num_coins_each * 2  # Total number of coins is twice the number of each type\n\nans = solution()"
    ],
    "074c52d7c8884541a53bd81c8516e4ae": [
        "def solution():\n    n = 2 * 5  # Smallest even multiple of 5\n    while True:\n        if (n**0.5).is_integer():\n            return n\n        n += 2 * 5  # Increment by the least common multiple of 2 and 5 to maintain evenness and being a multiple of 5\n\nans = solution()"
    ],
    "f1d598e9e6754a5fb544e02dd210fd8f": [
        "def solution():\n    # If it takes 12 minutes to make 5 sections, that means there is one initial cut plus 4 additional cuts.\n    initial_sections = 4\n    total_time = 12\n    # Calculate the time taken for one cut\n    time_per_cut = total_time / initial_sections\n    \n    # For cutting the wood 5 times, we only need 5 cuts.\n    cuts_needed = 5\n    # Calculate the total time for 5 cuts.\n    total_time_needed = time_per_cut * cuts_needed\n    \n    return total_time_needed\n\nans = solution()"
    ],
    "76292cab066c4804960c0eb334442333": [
        "def solution():\n    child_discount = 0.25\n    child_ticket_cost = 30\n    adult_ticket_cost = child_ticket_cost / (1 - child_discount)\n\n    senior_discount = 0.20\n    senior_ticket_cost = adult_ticket_cost * (1 - senior_discount)\n\n    return senior_ticket_cost\n\nans = solution()"
    ],
    "acc5ff5f2838429d9de00e4ee08fb1fa": [
        "def solution():\n    # Let's say the total number of people at the party is 'p'\n    girls = 36  # given number of girls\n    # Remaining people after adults are (1 - 2/5)p = (3/5)p\n    # Since 5/9 of these remaining people are boys, 4/9 of these are girls.\n    # So the number of girls is (4/9) * (3/5) * p\n    # (4/9) * (3/5) * p = 36\n    # Now we solve for p\n    p = 36 * (9/4) * (5/3)\n    return p\n\nans = solution()"
    ],
    "35fcb930a0bc41a894f13b4d2d264e48": [
        "def solution():\n    men_days = 3 * 30\n    days_for_2_people = men_days / 2\n    return days_for_2_people\n\nans = solution()"
    ],
    "ceda71c2bab34d10981c8cc631f857e6": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "f3b9f2f5f0a543b39b7bca6031d203f9": [
        "from itertools import combinations_with_replacement\n\ndef solution():\n    # Since the children can get zero books, we model this problem as partitioning 20 books among 4 children with repetition\n    # The -1 accounts for the decrement done to fit the problem's condition where a child can get 0 books\n    number_of_books = 20 + 4 - 1\n    children = 4 - 1\n\n    # The number of combinations of 20 books given to 4 children, where a child can receive 0 books,\n    # is equivalent to the number of combinations with replacement of 'children' taken from a set of 'number_of_books' elements.\n    ways = comb(number_of_books, children)\n\n    return ways\n\n# Since we are using combinations_with_replacement, we need to define our own function to calculate combinations\ndef comb(n, k):\n    return factorial(n) // (factorial(k) * factorial(n - k))\n\n# factorial function\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nans = solution()"
    ],
    "203d878b270d4d88a12ed23389c40a46": [
        "def solution():\n    first_term = 1\n    last_term = 97\n    difference = 2\n\n    num_terms = int((last_term - first_term) / difference) + 1\n    sum_of_series = num_terms * (first_term + last_term) / 2\n\n    return sum_of_series\n\nans = solution()"
    ],
    "ac50d3117292453c911bc6e43ec859a8": [
        "def solution():\n    # Number of ways to choose a train, car, or boat\n    trains = 3\n    cars = 4\n    boats = 2\n\n    # Calculate the total number of different ways to go from A to B\n    total_ways = trains + cars + boats\n\n    return total_ways\n\nans = solution()"
    ],
    "b7384c3ef6ce4e10accddb590b454709": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    will_now = symbols('will_now')\n\n    equation = Eq(will_now + 8, 4 * (will_now - 4))\n\n    solution = solve(equation, will_now)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f15729b8c3bf42758bf674b97e695b4a": [
        "def solution():\n    total_pages = 981\n    pages_per_day = 25\n    \n    days_needed = total_pages / pages_per_day\n    \n    return int(days_needed) if total_pages % pages_per_day == 0 else int(days_needed) + 1\n\nans = solution()"
    ],
    "a6292732361347fa8c864895f6e10ae3": [
        "def solution():\n    return 6846 * 8\n\nans = solution()"
    ],
    "06e06b65731b4ae182bc34f8bdf78ad2": [
        "def solution():\n    principal = 1000\n    rate = 0.06\n    time = 2\n\n    balance = principal * ((1 + rate) ** time)\n\n    return balance\n\nans = solution()"
    ],
    "e8ac97a4703d48e3a8d90b8986df72d1": [
        "from math import comb\n\ndef solution():\n    # Subtract the minimum guaranteed books (2 books per kid = 10 total) to distribute the rest\n    remaining_books = 30 - 2*5\n    \n    # Now we need to calculate the number of distinct ways to distribute the remaining books among the kids\n    # This is a problem of distributing 'remaining_books' indistinct items into 5 distinct groups\n    # Which is equivalent to the number of solutions to x1 + x2 + x3 + x4 + x5 = remaining_books in non-negative integers\n    # The formula for this is Combinations(remaining_books + 5 - 1, 5 - 1)\n    \n    ans = comb(remaining_books + 5 - 1, 5 - 1)\n    \n    return ans\n\nans = solution()"
    ],
    "65c188bedd614322a61cdc7a8fd0c01b": [
        "def solution():\n    total_girls = 28\n    like_one_direction = 20\n    like_the_vamps = 17\n    like_both = 15\n\n    like_neither = total_girls - (like_one_direction + like_the_vamps - like_both)\n\n    return like_neither\n\nans = solution()"
    ],
    "7988af13cd9a4c19b46db9fc0c0bb229": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of soup Mike had\n    mike, mason, chewy = symbols('mike mason chewy')\n\n    # Mason's portion is 2/3 of Chewy's\n    equation1 = Eq(mason, 2/3 * chewy)\n    # Chewy's portion is 40% (or 2/5) of Mike's\n    equation2 = Eq(chewy, 2/5 * mike)\n    # Mason's portion is 550ml less than Mike's\n    equation3 = Eq(mason, mike - 550)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (mike, mason, chewy))\n\n    # Calculate the total soup amount in litres\n    total_soup_ml = solutions[mike] + solutions[mason] + solutions[chewy]\n    total_soup_litres = total_soup_ml / 1000\n\n    return total_soup_litres\n\nans = solution()"
    ],
    "d634317608b54dbcb954484f4a8c548c": [
        "def solution():\n    road_length = 500\n    interval = 5\n    \n    num_trees = (road_length // interval) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "1bee107571854f2d87bb88f1fc9b38c1": [
        "from itertools import permutations\nfrom fractions import Fraction\n\ndef solution():\n    numbers = (Fraction(1,2), Fraction(1,9), Fraction(1,3), Fraction(1,8), Fraction(1,4), Fraction(1,7), Fraction(1,5), Fraction(1,6))\n    operators = permutations(['+', '-', '*', '/'])\n    \n    max_sum = 0\n    for ops in operators:\n        expr1 = eval(f\"numbers[0] {ops[0]} numbers[1]\")\n        expr2 = eval(f\"numbers[2] {ops[1]} numbers[3]\")\n        expr3 = eval(f\"numbers[4] {ops[2]} numbers[5]\")\n        expr4 = eval(f\"numbers[6] {ops[3]} numbers[7]\")\n        \n        curr_sum = expr1 + expr2 + expr3 + expr4\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            sorted_terms = sorted([expr1, expr2, expr3, expr4], reverse=True)\n    \n    second_largest = sorted_terms[1]\n    A, B = second_largest.numerator, second_largest.denominator\n    return A + B\n\nans = solution()"
    ],
    "7c988a58a14c48c19fd7ebda71673015": [
        "def solution():\n    classrooms = 27\n    chairs_per_classroom = 28\n    total_chairs = classrooms * chairs_per_classroom\n    return total_chairs\n\nans = solution()"
    ],
    "f3ea48411a6c498184b21b3604aa2db8": [
        "def solution():\n    # Define the common UK coin denominations in pence\n    coin_values = [200, 100, 50, 20, 10, 5, 2, 1]\n    \n    # Susan's bus fare\n    fare = 44\n    \n    # Start with the largest coin denomination\n    coin_count = 0\n    \n    # Give change for a 1 pound coin, as it's the smallest note\n    amount_to_give = 100 - fare\n    \n    for coin in coin_values:\n        # Use as many of each coin as possible\n        while amount_to_give >= coin:\n            amount_to_give -= coin\n            coin_count += 1\n            \n    # Add the one coin Susan used to pay\n    coin_count += 1\n    \n    return coin_count\n\nans = solution()"
    ],
    "240bc3106e614b409ed75b112d8a5572": [
        "def solution():\n    ans = sum(range(2, 89, 4))\n    return ans\n\nans = solution()"
    ],
    "2b895d9f585d4c72b559deecf56f1079": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # define the symbols for the cost of one jug and one cup\n    jug, cup = symbols('jug cup')\n\n    # set up the equations based on the problem statement\n    equation1 = Eq(4 * jug + 5 * cup, 85)\n    equation2 = Eq(2 * jug + 2 * cup, 40)\n\n    # solve the equations for the cost of one jug and one cup\n    solutions = solve((equation1, equation2), (jug, cup))\n\n    # return the cost of one cup\n    return solutions[cup]\n\nans = solution()"
    ],
    "ce2a11f3530044e69f0f940d2177c842": [
        "def solution():\n    from sympy import symbols, solve, Rational\n\n    x = symbols('x')\n    \n    inequality = ((x + 3) / (2 * x + 5)) > Rational(505, 1000)\n    solution_set = solve(inequality, x)\n\n    largest_whole_number_wins = int(solution_set[0]) - 1  # We subtract 1 because x < 47.5\n    \n    return largest_whole_number_wins\n\nans = solution()"
    ],
    "faaa8deed0db48a0b6707146113de1c2": [
        "def solution():\n    ans = 818 - 271 - 18 + 64 - 29 + 36\n    return ans\n\nans = solution()"
    ],
    "27bdd20547f24d8985bedec355b3bcb2": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "982d68ff78fb4d07914cf20c9a917bb2": [
        "def solution():\n    room_a = 235\n    room_b = 567\n    total_pupils = room_a + room_b\n\n    # Divide by 2 to find the new number of pupils in each room\n    pupils_each_room = total_pupils // 2\n    return pupils_each_room\n\nans = solution()"
    ],
    "b0db81c8fe684031982ca97bbbbe4f6c": [
        "def solution():\n    money_spent = 89.65\n    money_left = 20.35\n    initial_money = money_spent + money_left\n    return initial_money\n\nans = solution()"
    ],
    "1b578ba89dc64a0497a494ff8c376cf1": [
        "def solution():\n    from math import gcd\n\n    class_a = 24\n    class_b = 36\n    class_c = 42\n\n    # finding the greatest common divisor of the three class sizes\n    gcd_ab = gcd(class_a, class_b)\n    gcd_abc = gcd(gcd_ab, class_c)\n\n    return gcd_abc\n\nans = solution()"
    ],
    "fe9555e52b6940b58bc0240731da3d6c": [
        "def solution():\n    tenth_number = 23\n    fifteenth_number = 38\n    positions_diff = 15 - 10\n\n    # Find the common difference\n    common_diff = (fifteenth_number - tenth_number) / positions_diff\n\n    # Calculate the 12th number by using the common difference (the 10th is our reference)\n    twelfth_number = tenth_number + (2 * common_diff)\n    \n    return int(twelfth_number)\n\nans = solution()"
    ],
    "e25bc60d63ca444999ac89d8eb2ef5f4": [
        "def solution():\n    terms = [\n        (1, 1, 2), (2, 2, 4), (3, 4, 7), (4, 7, 11), (5, 11, 16), \n        (6, 16, 22), (7, 22, 29), (1, 29, 1)\n    ]\n    ans = sum(n / (a * b) for n, a, b in terms if b != 1)\n    ans += 1 / terms[-1][1]  # adding the last term separately as it has b = 1\n    return ans\n\nans = solution()"
    ],
    "bfc856ed693948c5bc8692af12953e1d": [
        "def solution():\n    # For a right-angled triangle to form, it is necessary that the hypotenuse is the diameter of the circle.\n    # There are 12 points on the circle, and choosing 2 points to form the diameter gives us 12/2 = 6 diameters.\n    \n    # For each diameter, we can choose the 3rd point of the triangle from the remaining 10 points (excluding the 2 points of the diameter).\n    # So, for each diameter, we have 10 choices for the 3rd point.\n\n    # Since we have 6 diameters, we multiply this number by 10 to get the total number of right-angled triangles.\n    # Every three distinct points on the circumference of the circle, without repetition, can only form one right-angled triangle.\n    \n    ans = 6 * 10\n\n    return ans\n\nans = solution()"
    ],
    "f920596541b54c59bae5257c1fa6effd": [
        "def solution():\n    students = 200\n    daily_lunch_cost = 4.36\n    days = 5\n    \n    total_cost = students * daily_lunch_cost * days\n    \n    return total_cost\n\nans = solution()"
    ],
    "caef56015c2546c787649e8de4983b71": [
        "def solution():\n    ans = sum((-1) ** ((i // 2) % 2) * i for i in range(1, 201))\n    return ans\n\nans = solution()"
    ],
    "c502fd8bef51420684df77fd33225144": [
        "def solution():\n    fraction = 3 / 8\n    total_kg = 16\n    result = fraction * total_kg\n    return result\n\nans = solution()"
    ],
    "513db53d54374f00afb65d6d0f973de3": [
        "def solution():\n    total_questions = 20\n    correct_points = 5\n    incorrect_points = -3\n    total_points = 76\n  \n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        if correct_answers * correct_points + incorrect_answers * incorrect_points == total_points:\n            return correct_answers\n\nans = solution()"
    ],
    "8e0574e136cb4a76abf5378d8154a43a": [
        "def solution():\n    cost_per_person = 27.60\n    number_of_people = 38\n\n    total_cost = cost_per_person * number_of_people\n\n    return total_cost\n\nans = solution()"
    ],
    "fc6d0ef4b64c44a4900d03d68cbc4621": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'cp' be the cost price\n    cp = symbols('cp')\n\n    # Marked price is 20% above the cost price\n    marked_price = cp * 1.20\n\n    # Selling price is 90% of the marked price\n    selling_price = marked_price * 0.90\n\n    # Profit is the selling price minus the cost price\n    profit = Eq(selling_price - cp, 120)\n\n    # Solve for the cost price\n    cost_price = solve(profit, cp)\n\n    return cost_price[0]\n\nans = solution()"
    ],
    "e9e3eafe8b3e48d3b2a71156f1fe9aae": [
        "def solution():\n    balls_in_5_boxes = 25\n    balls_per_box = balls_in_5_boxes / 5\n    balls_in_6_boxes = balls_per_box * 6\n    return balls_in_6_boxes\n\nans = solution()"
    ],
    "63250d13de624f798109236462057294": [
        "def solution():\n    return (13.8 + 18.6) / 2\n\nans = solution()"
    ],
    "e45242e744df43f9909a012add8cd759": [
        "def solution():\n    total_sheep = 128\n    black_sheep_fraction = 5 / 8\n    white_sheep_fraction = 1 / 4\n\n    black_sheep = total_sheep * black_sheep_fraction\n    white_sheep = total_sheep * white_sheep_fraction\n\n    brown_sheep = total_sheep - black_sheep - white_sheep\n\n    return int(brown_sheep)\n\nans = solution()"
    ],
    "b84b9d049f3944a6a3fec6f34b08dcdd": [
        "def solution():\n    from sympy import symbols, Eq, solve, Abs\n\n    x = symbols('x')\n    equation = Eq(Abs(x + 1), 2 * x + 5)\n\n    solutions = solve(equation, x)\n\n    return [sol.evalf() for sol in solutions]\n\nans = solution()"
    ],
    "1f71711a37ba41f19b391be626ee7d84": [
        "from math import factorial\n\ndef solution():\n    # For 4 different colored socks\n    ways_with_4_diff_socks = factorial(4)  # 4!\n    \n    # For 2 different colored pairs of socks\n    ways_with_2_pairs = factorial(4) // (factorial(2) * factorial(2))  # 4! / (2! * 2!)\n    \n    return (ways_with_4_diff_socks, ways_with_2_pairs)\n\nans = solution()"
    ],
    "3d56a142b7734cae80fcd6db270a1a50": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    a, b = symbols('a b')\n    equation = Eq(10 * a + b + 10 * b + a + b, 100 * a + 10 * a + b)\n    \n    solutions = solve(equation, (a, b))\n    \n    return sum(solutions[a, b])\n\nans = solution()"
    ],
    "cc66abc29793482fb9eb2797063a599e": [
        "def solution():\n    ans = 7 * 4 * 37\n    return ans\n\nans = solution()"
    ],
    "2a26499da5b34ec8944d958d53314106": [
        "def solution():\n    return 9 * 59\n\nans = solution()"
    ],
    "273702e9fdfb4478a973714e3892e8a8": [
        "def solution():\n    people = 4\n    handshakes = (people * (people - 1)) // 2\n    return handshakes\n\nans = solution()"
    ],
    "336b55c1b98a494a8fcdec5a76129b58": [
        "from math import comb\n\ndef solution():\n    num_points = 10\n    points_needed = 3\n\n    ans = comb(num_points, points_needed)\n    \n    return ans\n\nans = solution()"
    ],
    "b6b88edeb93e4d9cb9b8b1211d07bf53": [
        "def solution():\n    result = 246 * 507\n    return result\n\nans = solution()"
    ],
    "ebaac819520a41bea5853ed02b80e219": [
        "def solution():\n    first_term = 4\n    last_term = 121\n    difference = 3\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "a3e7cbd795a9409dbf490a20013698fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andre, beth = symbols('andre beth')\n\n    # Total sweets both had initially before the teacher gave them more.\n    equation1 = Eq(andre + beth, 24)\n\n    # After receiving sweets from the teacher, Andre has 6 more sweets than Beth.\n    equation2 = Eq(andre + 4 - (beth + 4), 6)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (andre, beth))\n\n    # Beth's number of sweets after receiving the additional ones.\n    beth_sweets_after = solutions[beth] + 4\n\n    return beth_sweets_after\n\nans = solution()"
    ],
    "fa9cbee13c99485d8303b1f5e6225e5c": [
        "def solution():\n    total_taller_than_180 = 4500\n    taller_than_190 = 750\n    between_180_and_190 = total_taller_than_180 - taller_than_190\n    return between_180_and_190\n\nans = solution()"
    ],
    "b9605682663c4e549e208dbbe926ff31": [
        "def solution():\n    # The strategy to win is to always leave a multiple of 4 apples for the opponent.\n    # Since there are 18 apples, Anthea should remove 2 apples. Then:\n    # 18 - 2 = 16, which is a multiple of 4.\n    # Whatever Ben takes (1, 2, or 3), Anthea can take the remainder to make up 4.\n    # For example, if Ben takes 1, Anthea takes 3.\n    # This strategy ensures Anthea can always leave a multiple of 4 to Ben and\n    # eventually win the game by taking the last apple.\n    return 2  # Anthea should take 2 apples in the first turn\n\nans = solution()"
    ],
    "27eb9e5bd22f43eba7fb2e1a0973e1ba": [
        "from math import factorial\n\ndef solution():\n    total_friends = 5\n    ways_for_judy = 2  # Judy can stand on either end\n    ways_for_rest = factorial(total_friends)  # Permutations for the rest of the friends\n\n    return ways_for_judy * ways_for_rest\n\nans = solution()"
    ],
    "de94f3e9046049bda163af8199fad009": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chair_mass = symbols('chair_mass')\n    table_mass = chair_mass + 2\n\n    # 3 tables' mass is the same as 4 chairs' mass\n    equation = Eq(3 * table_mass, 4 * chair_mass)\n\n    solved = solve(equation, chair_mass)\n\n    table_mass_value = solved[0] + 2\n\n    return table_mass_value\n\nans = solution()"
    ],
    "af2115488bfc4cbfbf5f5ebb0bff2bef": [
        "def solution():\n    cost_per_bar = 3.18 / 6\n    cost_for_five_bars = cost_per_bar * 5\n    return cost_for_five_bars\n\nans = solution()"
    ],
    "e4f74093db054f9a9afeb2f53b05b7d1": [
        "def solution():\n    numbers = [9, 12, 17, 18, 21, 23]\n    return sum(numbers)\n\nans = solution()"
    ],
    "6e7fd510bdaa4c41b99c4531bc548e9a": [
        "def solution():\n    overtakes = 5\n    final_position = 2\n    total_cars = final_position + overtakes\n    return total_cars\n\nans = solution()"
    ],
    "015af54f56854424960c5b919f820761": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'a' be the sweets Andre has and 'b' be the sweets Beth has\n    a, b = symbols('a b')\n\n    # Their total sweets before the addition is 24\n    equation1 = Eq(a + b, 24)\n\n    # After receiving 4 sweets each, Andre has 6 more sweets than Beth\n    equation2 = Eq(a + 4 - (b + 4), 6)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, b))\n\n    # Beth's sweets now, after receiving 4 more\n    beth_sweets_now = solutions[b] + 4\n\n    return beth_sweets_now\n\nans = solution()"
    ],
    "c1faa5b5faaf44929efa78451a63ff75": [
        "def solution():\n    # Using the inverse operations to find the original number\n    result = 2\n    number_after_subtraction = result * 12\n    original_number = number_after_subtraction + 6\n    \n    return original_number\n\nans = solution()"
    ],
    "539a3a5cc52d4011bfeede240f8dd840": [
        "def is_palindrome(number):\n    return str(number) == str(number)[::-1]\n\ndef solution():\n    count = 0\n    for number in range(1000, 10000):\n        if is_palindrome(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6dc506c916024720a5dab28d29fdcb33": [
        "def solution():\n    # Total sum of the four numbers\n    total_sum = 130 * 4\n    \n    # Total sum of the remaining three numbers\n    sum_of_three = 110 * 3\n    \n    # The number that is removed\n    removed_number = total_sum - sum_of_three\n    \n    return removed_number\n\nans = solution()"
    ],
    "ab627271938f40748d9acac110c92172": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    elder_maths, elder_english, younger_maths, younger_english = symbols('elder_maths elder_english younger_maths younger_english')\n\n    # Elder sister spent 10 minutes more on maths than the younger sister\n    equation1 = Eq(elder_maths, younger_maths + 10)\n    \n    # Younger sister spent 4 minutes more on English\n    equation2 = Eq(younger_english, elder_english + 4)\n\n    # Elder sister spent a total of 88 minutes\n    equation3 = Eq(elder_maths + elder_english, 88)\n\n    # Younger sister spent 12 minutes less on her maths homework than on her English homework\n    equation4 = Eq(younger_maths, younger_english - 12)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (elder_maths, elder_english, younger_maths, younger_english))\n\n    return solutions[younger_english]\n\nans = solution()"
    ],
    "bbd5dd551d4b4d7abc9f239251339ad1": [
        "def solution():\n    # Let the value of 1 gold ring be x\n    # Then the value of 1 silver spoon will be (3/4 * 6 * x) / 12\n    # Now we need to find out how many silver spoons equal 3 * x (the value of 3 gold rings)\n\n    # Value of 1 gold ring in terms of silver spoons\n    value_of_one_gold_ring = (3/4 * 6) / 12  # This is also the value of 1 silver spoon\n    \n    # The number of silver spoons that equals the value of 3 gold rings\n    number_of_silver_spoons = 3 / value_of_one_gold_ring\n    \n    return int(number_of_silver_spoons)\n\nans = solution()"
    ],
    "f8f8aec9479848be90565270cd0b38f4": [
        "def solution():\n    from math import lcm\n    \n    # The least common multiple of 1 minute (60 seconds) and 1.5 minutes (90 seconds)\n    lcm_two_lights = lcm(60, 90)\n    \n    # The third traffic light needs to change lights in a way that it can sync up with the other two every 9 minutes (540 seconds)\n    lcm_all_lights = lcm_two_lights * 540\n    \n    # Finding the shortest time the third traffic light has to change by\n    # Since it has to be 30 seconds or longer, we will find the divisors of lcm_all_lights\n    # starting from 30 seconds upward\n    for time in range(30, lcm_all_lights + 1):\n        if lcm_all_lights % time == 0:\n            return time\n\nans = solution()"
    ],
    "43c61058429c4fe489d7c947a01763c2": [
        "def solution():\n    # Base strategy to ensure victory is to always keep the number of apples in\n    # a position that is a multiple of 3 after Leo's turn. Mia will be forced\n    # to pick 1 or 2 apples, and Leo can always return to a multiple of 3.\n\n    total_apples = 14\n    # Ideal positions for Leo to win: 12, 9, 6, 3 (all multiples of 3)\n\n    # Leo needs to subtract a certain number to bring the total to a multiple of 3.\n    # If Leo can remove 1 apple, then 13 remains, which is not a multiple of 3.\n    # If Leo removes 2 apples, then 12 remains, which is a multiple of 3, and Leo can win.\n\n    # To find the amount Leo needs to take, we can use modulo operation\n    apples_to_take = total_apples % 3\n    if apples_to_take == 0:\n        # If it's already a multiple of 3, Leo has to disrupt the multiple and can take 1.\n        apples_to_take = 1\n    # Return the number of apples Leo must take away in the first turn to ensure victory\n    return apples_to_take\n\nans = solution()"
    ],
    "a7eb63b14ee740bca350f5e3f57ea487": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for pencils and markers\n    pencils, markers = symbols('pencils markers')\n    \n    # Set up the equations based on the given information\n    equation1 = Eq(3 * pencils + 2 * markers, 13)\n    equation2 = Eq(2 * pencils + 3 * markers, 12)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (pencils, markers))\n    \n    # Calculate the total cost for 7 pencils and 7 markers\n    total_cost = 7 * solutions[pencils] + 7 * solutions[markers]\n    \n    return total_cost\n\nans = solution()"
    ],
    "0a147c77462a47acad9d599e3c92987b": [
        "def solution():\n    return 527 - 382\n\nans = solution()"
    ],
    "dca6b59a57004164891b83c2be747227": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    markers, brushes = symbols('markers brushes')\n    equation1 = Eq(3 * markers + 1 * brushes, 28)\n    equation2 = Eq(markers + brushes, 12)\n\n    solutions = solve((equation1, equation2), (markers, brushes))\n\n    return solutions[markers]\n\nans = solution()"
    ],
    "a29766e9a35b4cf986fe192653492fb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the number of female teachers be 'f'\n    f = symbols('f')\n    \n    # The total weight of male teachers\n    total_male_weight = 3 * 75\n    \n    # The total weight of all teachers (assuming there are 'f' female teachers)\n    total_weight = 65 * (3 + f)\n    \n    # The total weight of female teachers\n    total_female_weight = 60 * f\n    \n    # Writing the equation total_male_weight + total_female_weight = total_weight\n    equation = Eq(total_male_weight + total_female_weight, total_weight)\n    \n    # Solving the equation to find the number of female teachers\n    num_female_teachers = solve(equation, f)\n    \n    return num_female_teachers[0]\n\nans = solution()"
    ],
    "9c9e21c3a7444569afbadf1e30e09b81": [
        "def solution():\n    boys_excess = 55\n    \n    # Start from 1, which is the smallest possible square side length\n    side_length = 1 \n    while True:\n        # Determine the number of boys and girls based on the current side length\n        if side_length % 2 == 0: # even\n            boys = (side_length * side_length + side_length) // 2\n            girls = boys - side_length\n        else: # odd\n            boys = ((side_length + 1) * (side_length + 1)) // 4\n            girls = boys - (side_length + 1) // 2\n        \n        # If the excess matches, break the loop\n        if boys - girls == boys_excess:\n            break\n        \n        # Increment the side length to check the next square size\n        side_length += 1\n    \n    # The total number of students is the sum of boys and girls\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "cf55459e46844705ab8a79455735ac26": [
        "def solution():\n    # Calculate the total number of rows and columns based on Cora's position\n    # Cora is 5th from the front and 7th from the back\n    rows = 5 + 7 - 1  # Subtract 1 because Cora is counted in both from the front and from the back\n    # Cora is 2nd from the left and 4th from the right\n    columns = 2 + 4 - 1  # Subtract 1 because Cora is counted in both from the left and from the right\n    # Calculate the total number of students (rows * columns)\n    total_students = rows * columns\n\n    return total_students\n\nans = solution()"
    ],
    "58c3353b6ce0476d96bec02a41fe9aa6": [
        "def solution():\n    return 40 * 700\n\nans = solution()"
    ],
    "a40fe8c3642a46819ca618c1a9afcf63": [
        "def solution():\n    # We can subtract the minimum number of candies (2) from each plate\n    # to simplify the problem to distributing 2 candies among 3 plates\n    remaining_candies = 8 - 2 * 3\n\n    # With identical candies and distinct plates, this becomes a problem\n    # of partitioning the remaining candies with no restrictions.\n    # We will use stars and bars method where the number of partitions is (n+k-1 choose k-1)\n    # where n is the remaining candies, and k is the number of plates.\n    from math import comb\n    return comb(remaining_candies + 3 - 1, 3 - 1)\n\nans = solution()"
    ],
    "e357740e701e49a8ac92bfcd275f4557": [
        "def solution():\n    from sympy import factorint\n\n    # Factorizing the given numbers to get their prime factors\n    factors_33 = factorint(33)\n    factors_55 = factorint(55)\n\n    # Combining the factors of 33 and 55 to see which primes we have\n    combined_factors = {**factors_33, **factors_55}\n\n    for prime in factors_33:\n        if prime in factors_55:\n            combined_factors[prime] += factors_55[prime]\n\n    # To make the product a square number, the power of every prime factor should be even.\n    m = 1  # Start as 1, multiply by any prime factor that is not even.\n    for prime, power in combined_factors.items():\n        if power % 2 != 0:\n            m *= prime\n\n    return m\n\nans = solution()"
    ],
    "f6a6b8973f3d4d1ca73c2a8e344b2022": [
        "from math import factorial\n\ndef solution():\n    # Since Star must be the first runner, there are 4 remaining positions to be filled.\n    # The number of ways the remaining teammates can arrange themselves is the permutation of 4 elements. \n    # This is given by 4!, which is the factorial of 4.\n    num_ways = factorial(4)\n    return num_ways\n\nans = solution()"
    ],
    "9e57bb3e87064594be7261beeaf4f749": [
        "def solution():\n    # Time taken to make one cut is (total_time / (number_of_segments - 1))\n    time_per_cut = 60 / (31 - 1)\n    # To find out time for 50 segments, we calculate time for 49 cuts\n    time_for_50_segments = time_per_cut * (50 - 1)\n\n    return time_for_50_segments\n\nans = solution()"
    ],
    "307081f49a1647b9bb92dfaffe694842": [
        "def solution():\n    # Iterate over all possible 4-digit numbers with digits increasing from left to right\n    for i in range(1, 10):\n        for j in range(i + 1, 10):\n            for k in range(j + 1, 10):\n                for l in range(k + 1, 10):\n                    number1 = 1000*i + 100*j + 10*k + l\n                    number2 = 1000*l + 100*k + 10*j + i\n                    # The third number must use the same digits but cannot be a permutation\n                    # of the first two numbers, since the digits must not be in order\n                    # so it can be the sum minus the first two numbers\n                    number3 = 26352 - number1 - number2\n                    digits = sorted(str(number3))\n                    # Check if the third number has exactly the same digits\n                    if digits == [str(i), str(j), str(k), str(l)]:\n                        return min(number1, number2, number3)\n\nans = solution()"
    ],
    "384faa4ecc0e47d79e49dfce00412c19": [
        "def solution():\n    # We can try to figure out the pattern based on the given examples.\n    # From 2 × 4 = 8 and 2 ⊗ 4 = 44, it appears that the result is 4 times the second number plus 4 times the first number.\n    # Similarly, for 5 × 7 = 35 and 5 ⊗ 7 = 104, if we multiply the second number by 7 and add 5 times the first number, we get 104.\n    # Continuing this pattern for the other examples, we can write a formula as:\n    # a ⊗ b = b * (a + 1) + a * (b - 1)\n    # Therefore, we can calculate 6 ⊗ 12 using the above formula.\n    \n    a = 6\n    b = 12\n    \n    result = b * (a + 1) + a * (b - 1)\n    return result\n\nans = solution()"
    ],
    "8fc55209039645f08e1579f51727eae8": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 3), (3, 5), (5, 7)]\n    num, _ = solve_congruence(*congruences)\n\n    while num < 100:\n        num += 3 * 5 * 7  # LCM of 3, 5, 7\n\n    if num > 200:\n        return None\n    \n    return num\n\nans = solution()"
    ],
    "dba8f63335da404e874ce5fc77d842f3": [
        "def solution():\n    return 123 - 41\n\nans = solution()"
    ],
    "55fb13e55caf41cc8779e7ea0146667d": [
        "def solution():\n    year = 2003\n    while str(year) != str(year)[::-1]:\n        year += 1\n    return year - 2002\n\nans = solution()"
    ],
    "a2bde406a8da4970a219afa0022bd89d": [
        "from math import factorial\n\ndef solution():\n    word = 'ARRANGE'\n    letter_counts = {i: word.count(i) for i in set(word)}\n\n    ways = factorial(len(word))\n    for count in letter_counts.values():\n        ways //= factorial(count)\n        \n    return ways\n\nans = solution()"
    ],
    "cbeeb3a46e374ddca0fda082575458fb": [
        "def solution():\n    # Let the number be x\n    # According to the problem statement, x - 0.3 * x = 210\n    # So, we have 0.7x = 210\n    # Hence, x = 210 / 0.7\n    x = 210 / 0.7\n    return x\n\nans = solution()"
    ],
    "b686e2f0e98042d783104bb0e8f6ac9a": [
        "def solution():\n    initial_price = 200\n    percentage_increase = 45\n    price_increase = initial_price * (percentage_increase / 100)\n\n    final_price = initial_price + price_increase\n\n    return final_price\n\nans = solution()"
    ],
    "ac8cb9cc0d5443de91ca6e628f69e729": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of flowers Candy gave to Nancy be x\n    candy, nancy, x = symbols('candy nancy x')\n\n    # Initial number of flowers\n    initial_candy = 11\n    initial_nancy = 9\n\n    # After giving x flowers\n    final_candy = initial_candy - x\n    final_nancy = initial_nancy + x\n\n    # Nancy has 8 more flowers than Candy after the exchange\n    equation = Eq(final_nancy, final_candy + 8)\n\n    # Solve the equation\n    solution = solve((equation), (x))\n    \n    # Calculate the final number of flowers Candy has\n    final_candy_flowers = initial_candy - solution[x]\n\n    return final_candy_flowers\n\nans = solution()"
    ],
    "3737e4a9ac8f48808137f02833fa17bc": [
        "def solution():\n    for number in range(100, 1000):\n        if number % 24 == 0 and number // 24 == 36:\n            return number\n\nans = solution()"
    ],
    "4d111600431f40ce98fbddc8a64d1e36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(60 - 8*(2*x - 5), 4)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3dcee099b86f42178f5a693ab97c5bce": [
        "def solution():\n    temperature_midnight_friday = -5\n    temperature_midday_saturday = 17\n    \n    overall_change = temperature_midday_saturday - temperature_midnight_friday\n    \n    return overall_change\n\nans = solution()"
    ],
    "98be2cb5dcce45168975297b4f076410": [
        "def solution():\n    money_from_mum = 60  # in pence\n    money_from_dad = 40  # in pence\n    days = 3  # Monday, Tuesday, Wednesday\n    \n    total_money = (money_from_mum + money_from_dad) * days\n    return total_money\n\nans = solution()"
    ],
    "1b443edab3c147249e25ac875c4f6ab7": [
        "def solution():\n    term = 1\n    increment = 1\n    \n    while term <= 50:\n        increment += 1\n        term += increment\n    \n    return term\n\nans = solution()"
    ],
    "87e1f465cdbb4df7b961ae79f361a0c3": [
        "def solution():\n    people_in_front = 10\n    position_from_back = 14\n\n    total_people = people_in_front + position_from_back - 1\n\n    return total_people\n\nans = solution()"
    ],
    "55a229942e9e41f3a62e0880d02b5241": [
        "def solution():\n    ans = 10 + (10 * 10) - (10 / 10)\n    return int(ans)\n\nans = solution()"
    ],
    "f8c6ec11093d496198cb0de06c6908ee": [
        "def solution():\n    # As of my knowledge cutoff in 2023, the population of St. Petersburg, Russia is approximately 5.3 million.\n    # However, this number should be confirmed with the latest data as it might have changed.\n    population = 5300000  # Replace with the current population if needed\n    return population\n\nans = solution()"
    ],
    "5c90212721354a48a4e81ec2a43c81bc": [
        "def solution():\n    pen_price = 43  # price of one pen in pence\n    booklet_price = 185  # price of one booklet in pence\n    total_money = 1000  # total money in pence (£10 = 1000p)\n\n    # Calculate total cost of pens and booklets in pence\n    total_cost = (3 * pen_price) + (4 * booklet_price)\n\n    # Convert pence to pounds (£) for the total cost and calculate the change\n    change = total_money - total_cost\n\n    return change / 100  # convert change back to pounds (£)\n\nans = solution()"
    ],
    "a24bbb90466f45bb817f8a9fa98063a4": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):  # Loop through all 3-digit numbers\n        str_num = str(i)\n        # Check if the adjacent digits differ by at least 7\n        if abs(int(str_num[0]) - int(str_num[1])) >= 7 and abs(int(str_num[1]) - int(str_num[2])) >= 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "16105156e2914d5a8990c9b24f0b9981": [
        "def solution():\n    from sympy import primerange\n\n    primes = list(primerange(1, 12))  # 12 is arbitrary; we only need the first 3 primes\n    third_prime = primes[2]           # Indexing starts from 0, so the third prime is at index 2\n\n    return third_prime\n\nans = solution()"
    ],
    "a736c91b54064c40a00c4a922d2dc285": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 7) / 9, 9)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "054c2ee09a60448ebda4bd6602806b2b": [
        "def solution():\n    count = 0\n    for n in range(5000, 10000):\n        str_n = str(n)\n        d1 = int(str_n[0])\n        d2 = int(str_n[1])\n        d3 = int(str_n[2])\n        d4 = int(str_n[3])\n        \n        # Avoid dividing by 0 and check divisibility\n        if d2 != 0 and d3 != 0 and d4 != 0 and d1 % d2 == 0 and d1 % d3 == 0 and d1 % d4 == 0:\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "392cb5c0bb804c05baec15996d6881df": [
        "def solution():\n    # If the 4th child is opposite the 22nd child, it means they are separated by half the number of children in the circle\n    # Therefore, the distance between them in terms of child indexes is equal to half the total number of children in the circle\n    # The distance between the 4th child and the 22nd child can be calculated as follows:\n    distance = 22 - 4\n\n    # Since they are opposite, we double the distance to find the total number of children in the circle\n    total_children = distance * 2\n\n    return total_children\n\nans = solution()"
    ],
    "4d1598c9ff7f4502a10cb35d69667abd": [
        "def solution():\n    possible_digits = [set(range(10)) for _ in range(4)]\n\n    # After trying 1258, all the digits are wrong\n    for i, digit in enumerate('1258'):\n        possible_digits[i].discard(int(digit))\n\n    # Other tries give us two correct and two wrong digits\n    tries = ['5648', '3628', '3147', '5629']\n    for try_num in tries:\n        wrong_count = 0\n        for i, digit in enumerate(try_num):\n            if int(digit) not in possible_digits[i]:\n                wrong_count += 1\n        # If exactly two are wrong, the other two must be part of the set\n        if wrong_count == 2:\n            for i, digit in enumerate(try_num):\n                if int(digit) in possible_digits[i]:\n                    possible_digits[i] = {int(digit)}\n\n    # Find the correct combination\n    ans = ''.join(str(list(digit_set)[0]) for digit_set in possible_digits)\n\n    return ans\n\nans = solution()"
    ],
    "f3b1467c46654ba18779b73ec862809e": [
        "def solution():\n    lily_dresses = 24\n    gina_dresses = lily_dresses // 2\n    fiona_dresses = gina_dresses // 4\n    total_dresses = gina_dresses + fiona_dresses\n    return total_dresses\n\nans = solution()"
    ],
    "c8f6e26082ce4b84bed3069a498d5034": [
        "def solution():\n    return 0.8 * 3 * 10\n\nans = solution()"
    ],
    "27de9be9ab0d46f5a9881ef33bd601fa": [
        "def solution():\n    first_term = 10\n    common_difference = 4\n    number_of_terms = 10\n    \n    # Sum of an arithmetic series formula: S_n = n/2 * (2a + (n - 1) * d)\n    total_coins = (number_of_terms / 2) * (2 * first_term + (number_of_terms - 1) * common_difference)\n    return int(total_coins)\n\nans = solution()"
    ],
    "ad676d9c940642cbac148da8b2a9a501": [
        "def solution():\n    principal = 35000\n    interest_rate = 0.015\n    final_amount = 37100\n    \n    years = (final_amount / principal - 1) / interest_rate\n    \n    return int(years)\n\nans = solution()"
    ],
    "bcb4d3a73bdd461db258bc9c024573c1": [
        "def solution():\n    three_quarters_full_mass = 350\n    one_quarter_full_mass = 250\n    two_quarters_full_mass = three_quarters_full_mass - one_quarter_full_mass\n    \n    empty_jar_mass = one_quarter_full_mass - two_quarters_full_mass\n\n    return empty_jar_mass\n\nans = solution()"
    ],
    "5072d7c5f2434099ac2734046be03e0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let father's current age be f and son's current age be s\n    f, s = symbols('f s')\n\n    # Equation representing the relationship 6 years ago\n    equation1 = Eq(f - 6, 5 * (s - 6))\n\n    # Equation representing the sum of their ages this year\n    equation2 = Eq(f + s, 78)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (f, s))\n\n    return solutions[f]\n\nans = solution()"
    ],
    "f95f09c885d34503865d05cffe9b4ae0": [
        "def solution():\n    total_soda_litres = 13.15\n    # Convert the capacity of the bottle to liters\n    part_bottle_litres = (1/7) * 9.1\n    # Convert the capacity of the cups from milliliters to liters\n    cup_capacity_litres = 350 * 0.001\n    # Calculate the total soda used to fill the cups\n    total_cups_litres = 4 * cup_capacity_litres\n    # Calculate the remaining soda\n    remaining_soda_litres = total_soda_litres - part_bottle_litres - total_cups_litres\n\n    return remaining_soda_litres\n\nans = solution()"
    ],
    "52696ab5f8494de9be7eed46df374cc7": [
        "def solution():\n    total_average_weight = 65\n    male_teachers = 3\n    male_average_weight = 75\n    female_average_weight = 60\n    \n    # Calculate total weight of male teachers\n    total_male_weight = male_teachers * male_average_weight\n\n    # Let the number of female teachers be x\n    # Total weight of teachers = weight of male teachers + weight of female teachers\n    # Total weight of teachers = total average weight * (male_teachers + x)\n    # weight of female teachers = female_average_weight * x\n\n    # Now we can set up the equation:\n    # total_male_weight + (female_average_weight * x) = total_average_weight * (male_teachers + x)\n    # solve for x\n    x = (total_average_weight * male_teachers - total_male_weight) / (female_average_weight - total_average_weight)\n\n    return int(x)\n\nans = solution()"
    ],
    "375112c34e0a4163ad8adac5448587c5": [
        "def solution():\n    a = 2023 ** 0.5\n    b = -a\n    ans = a + b - a * b\n    return ans\n\nans = solution()"
    ],
    "e3c3e3c1805842db862f14a943f7260b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    A, B, C, D, E = symbols('A B C D E')\n    \n    # Average of A, B, and C is 95\n    equation1 = Eq((A + B + C) / 3, 95)\n    \n    # Average of B, C, and D is 94\n    equation2 = Eq((B + C + D) / 3, 94)\n    \n    # E's score is the second highest, and E scores 96\n    equation3 = Eq(E, 96)\n    \n    # A has the highest mark\n    # Note: Since the scores are above 91, E's score (96) cannot be the highest. \n    # Therefore, A's score must be greater than 96\n    equation4 = Eq(A, E + 1)\n    \n    # B and D have the same score\n    equation5 = Eq(B, D)\n    \n    # Scores are above 91\n    constraints = (A > 91, B > 91, C > 91, D > 91, E > 91)\n    \n    # Solve the equations with constraints\n    solutions = solve((equation1, equation2, equation3, equation4, equation5) + constraints, (A, B, C, D, E))\n    \n    # Solution for D's score\n    return solutions[D]\n\nans = solution()"
    ],
    "3be5a913fea7494c80e0bfe6a08910b7": [
        "def solution():\n    import math\n\n    m = 2.0  # mass in kg\n    k = 500  # spring constant in N/m\n    A = 0.08  # amplitude in meters (8.0 cm)\n    x = 0.04  # position from equilibrium in meters (4.0 cm)\n\n    # Total energy (E) of the oscillator is given by E = 1/2 * k * A^2\n    total_energy = 0.5 * k * A**2\n\n    # The speed (v) of the block when it's x meters from equilibrium can be calculated using conservation of energy\n    # E = 1/2 * k * A^2 = 1/2 * m * v^2 + 1/2 * k * x^2\n    # Rearrange the equation to solve for v:\n    # v = sqrt((k * (A^2 - x^2)) / m)\n    v = math.sqrt((k * (A**2 - x**2)) / m)\n\n    return (total_energy, v)\n\nans = solution()"
    ],
    "a4e26b2a8caa4a18ae49cec55472c63f": [
        "def solution():\n    return 245 - 182\n\nans = solution()"
    ],
    "c4ccfd8cb6b248a38a4fda147bef55ce": [
        "def solution():\n    total_pounds = 45\n    value_per_coin = 0.05\n    \n    num_coins = total_pounds / value_per_coin\n    \n    return int(num_coins)\n\nans = solution()"
    ],
    "32ad0f6a736244e3a4c5dda6e2a4ca47": [
        "def solution():\n    return -7 + -3\n\nans = solution()"
    ],
    "79ed6bec48e84620b031b1f6fe00dc58": [
        "def solution():\n    # Rose can always ensure victory by leaving a number of marbles after her turn\n    # which is a multiple of 3 (since both players can only take either 1 or 2 marbles).\n    # This forces Kylie into a situation where she can never leave a multiple of 3\n    # to Rose, eventually leaving a multiple of 3 (or fewer) marbles to Rose when\n    # it's her turn, allowing Rose to win.\n    \n    # To find how many marbles Rose must take away,\n    # we figure out the nearest multiple of 3 less than 14.\n    # This would be 12, because 15 is not an option since it's more than 14.\n    # Thus, Rose should leave 12 marbles after her turn.\n    # To leave 12 marbles, Rose must take away:\n    marbles_first_turn = 14 - 12\n    \n    return marbles_first_turn\n\nans = solution()"
    ],
    "7d2942aa92ed44e29a1be000b1aaf0c2": [
        "def solution():\n    total_distance = 540\n    total_time = 3\n    extra_distance_per_minute = 20\n\n    # Let the distance Bud runs each minute be x meters.\n    # Then Pip runs (x + extra_distance_per_minute) meters each minute.\n    # Together in one minute, they run (x + x + extra_distance_per_minute) meters.\n    # And in 3 minutes, they run 3 * (x + x + extra_distance_per_minute) = total_distance meters.\n\n    # From the equation below we can solve for x (distance Bud runs each minute):\n    # 3 * (2 * x + extra_distance_per_minute) = total_distance\n\n    # Solve for x\n    bud_distance_per_minute = (total_distance - (total_time * extra_distance_per_minute)) // (total_time * 2)\n\n    # Pip runs 20 meters more than Bud each minute.\n    pip_distance_per_minute = bud_distance_per_minute + extra_distance_per_minute\n\n    # Pip's total distance is:\n    pip_total_distance = pip_distance_per_minute * total_time\n\n    return pip_total_distance\n\nans = solution()"
    ],
    "2ec86cfd46db49fb8f7a59bc5ac2195f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of coins in each box\n    coins_A, coins_B, coins_C = symbols('coins_A coins_B coins_C')\n\n    # Create linear equations based on the problem description\n    # Box A contains four times as many coins as Box B\n    equation1 = Eq(coins_A, 4 * coins_B)\n\n    # 6% of the coins in Box A were removed, so 94% remains, same for Box B with 80%\n    # The transferred coins to C made the total in C 1220\n    # That is 22% more than the original number, so C_original represents original 100%\n    equation2 = Eq(0.94 * coins_A + 0.80 * coins_B + coins_C, 1220)\n\n    # Now we setup the equation for the 22% increment\n    # 1220 is 122% of the original amount, therefore C_original * 122% = 1220\n    equation3 = Eq(coins_C * 1.22, 1220)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (coins_A, coins_B, coins_C))\n\n    # Return the number of coins in box A at the beginning\n    return solutions[coins_A]\n\nans = solution()"
    ],
    "8d4919986f144ffeae4055000acfbb47": [
        "def solution():\n    # Before Sally bought more bottles of tea,\n    # let's assume she had 100 bottles in total for simplicity.\n    \n    # Initially, 60% were coffee, so (100 * 0.60) = 60 bottles of coffee.\n    initial_coffee = 100 * 0.60\n    \n    # Since we assumed 100 bottles in total initially, the number of tea bottles was:\n    # (100 - initial_coffee) = (100 - 60) = 40 bottles of tea.\n    initial_tea = 100 - initial_coffee\n    \n    # At the end, 40% were coffee,\n    # Since the number of coffee bottles didn't change, it stays at 60.\n    # We need to find the new total number of bottles that makes 60 bottles 40% of the total.\n    \n    # Let's define the new total as 'new_total' then,\n    # 60 / new_total = 40/100\n    # new_total = 60 / (40/100)\n    new_total = 60 / 0.40\n    \n    # Now we can find the new number of tea bottles,\n    # new_tea = new_total - initial_coffee\n    new_tea = new_total - initial_coffee\n    \n    # Finally, we calculate the percentage increase in the number of tea bottles:\n    # percentage_increase = ((new_tea - initial_tea) / initial_tea) * 100\n    percentage_increase = ((new_tea - initial_tea) / initial_tea) * 100\n    \n    return percentage_increase\n\nans = solution()"
    ],
    "d1ec5589c16045a8a24ef55131c530f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2 * x + 1), 75)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "94913f61e8cf4fe8822180b9025e8717": [
        "def solution():\n    count = 0\n    for i in range(1, 501):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "afedf1aa53604878984ef0e2e15b9e62": [
        "def solution():\n    return 25 / 100 * 30 / 100 * 40 / 100 * 300\n\nans = solution()"
    ],
    "bcb80e6312784336a54c7308af6263cb": [
        "def solution():\n    # Convert the hexadecimal numbers to decimal\n    decimal_2A3 = int('2A3', 16)  # Convert \"2A3\" hex to decimal\n    decimal_17B = int('17B', 16)  # Convert \"17B\" hex to decimal\n    \n    # Perform the addition in decimal\n    decimal_sum = decimal_2A3 + decimal_17B \n    \n    # Convert the sum back to hexadecimal\n    hex_sum = hex(decimal_sum)[2:].upper()  # Convert decimal to hex and remove the '0x' prefix\n    return hex_sum\n\nans = solution()"
    ],
    "f17c963ecb1a4e4ea278edc6215a3efb": [
        "def solution():\n    ans = 152 + 45 - 52 + 16\n    return ans\n\nans = solution()"
    ],
    "2eb9b96314cb4e659c476a8f2b9a7a6e": [
        "def solution():\n    # Add all the minimum times required for each task\n    total_time = 1 + 3 + 4 + 1 \n    return total_time\n\nans = solution()"
    ],
    "7811a75321754070a2499adf8af1bec1": [
        "def solution():\n    lewis_money_pence = 60\n    james_money_pounds = 1.10\n    james_money_pence = james_money_pounds * 100\n\n    total_money_pence = lewis_money_pence + james_money_pence\n    ans = total_money_pence / 100  # Convert total to pounds\n\n    return ans\n\nans = solution()"
    ],
    "1b3d94be63ab433dbec37b999532440f": [
        "def solution():\n    total_red_price = 5 * 2\n    total_green_price = 2 * 5\n    total_white_price = 3 * 10\n    total_price = total_red_price + total_green_price + total_white_price\n    total_flowers = 5 + 2 + 3\n    average_price = total_price / total_flowers\n    return average_price\n\nans = solution()"
    ],
    "5260e448b7bd48408f279f75b3bc994b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tricycles, cars = symbols('tricycles cars')\n    \n    # Equation for the total number of vehicles\n    equation1 = Eq(tricycles + cars, 24)\n    \n    # Equation for the total number of wheels\n    equation2 = Eq(3 * tricycles + 4 * cars, 86)\n    \n    solutions = solve((equation1, equation2), (tricycles, cars))\n\n    return solutions[tricycles]\n\nans = solution()"
    ],
    "5ef1c9a0438447ba9288b3fd84a1e5ea": [
        "from math import factorial\n\ndef solution():\n    word = 'WINNING'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    \n    total_ways = factorial(len(word))\n    \n    for count in letter_counts.values():\n        total_ways //= factorial(count)\n\n    return total_ways\n\nans = solution()"
    ],
    "484ad20b23084a80a71997e86aafbbee": [
        "def solution():\n    ans = 7 * 0.4\n    return ans\n\nans = solution()"
    ],
    "d500548212784181ae868f27144944a3": [
        "def solution():\n    count = 0\n    for x1 in range(3, 13):\n        for x2 in range(3, 13):\n            x3 = 13 - x1 - x2\n            if x3 >= 3 and x1 + x2 + x3 == 13:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "cc8c61240c93470c82d6885fe1441a98": [
        "def solution():\n    from math import factorial\n    from sympy import symbols, Eq, solve\n\n    # total number of permutations for 6 papers\n    total_perm = factorial(6)\n    \n    # Using inclusion-exclusion principle for derangement problem (no student gets their own paper)\n    # Applying the permutations with no fixed points (derangements)\n\n    # D_n = n! * (1 - 1/1! + 1/2! - 1/3! + ... + (-1)^n/n!)\n    ans = factorial(6)\n    for i in range(1, 7):\n        ans += (-1)**i * factorial(6) // factorial(i)\n    \n    return ans\n\nans = solution()"
    ],
    "4fdb62c377d747f98107b2670277dd88": [
        "def solution():\n    # Let x be the number of lemonade bottles sold at $4 each\n    # Let y be the number of 1000 Plus bottles sold at $7 each\n    # We have two equations:\n    # 4x + 7y = 2012 (total income)\n    # x + y <= 350 (total available bottles)\n    # We want to minimize y while still satisfying the first equation\n    \n    for y in range(350+1):\n        x = 350 - y  # Assuming all bottles were used, finding x\n        if 4*x + 7*y == 2012:  # Income equation\n            return y  # Return the minimum y if the equation is satisfied\n\nans = solution()"
    ],
    "35f28b203ccb40b1b46923de84a56ccb": [
        "def solution():\n    mass = 2  # kg\n    final_velocity = 8  # m/s\n    time = 4  # s\n    acceleration = final_velocity / time  # a = Δv / t\n    force = mass * acceleration  # F = m * a\n    return force\n\nans = solution()"
    ],
    "f0db0aaf0c984695962fd98c327d2267": [
        "def solution():\n    for i in range(0, 101):\n        if i % 4 == 0 and i % 7 == 6 and i % 5 == 0:\n            return i\n\nans = solution()"
    ],
    "4f1a75cb742a439caf72488bf6da4ab6": [
        "def solution():\n    # The largest number that cannot be purchased exactly can be found\n    # by the Frobenius coin problem, using (a*b) - a - b formula,\n    # where a and b are the two denominations of the boxes.\n    a = 3\n    b = 7\n    \n    ans = (a * b) - a - b\n    return ans\n\nans = solution()"
    ],
    "f881913e5ff54d8ea9433a89abb125b9": [
        "def solution():\n    # Initial ratio of blue to red pens is 3:5\n    ratio_blue = 3\n    ratio_red = 5\n    total_ratio = ratio_blue + ratio_red\n    \n    # Total number of pens initially is 96\n    total_pens_initial = 96\n    # Number of blue pens initially\n    blue_pens_initial = (ratio_blue / total_ratio) * total_pens_initial\n    # Number of red pens initially\n    red_pens_initial = total_pens_initial - blue_pens_initial\n\n    # 60 red pens are added\n    red_pens_after = red_pens_initial + 60\n    # The total number of pens after adding red pens\n    total_pens_after_red_added = blue_pens_initial + red_pens_after\n\n    # Let x be the number of blue pens added\n    # After adding x blue pens, 40% of the pens are blue\n    # Set up the equation: (blue_pens_initial + x) / (total_pens_after_red_added + x) = 0.4\n    \n    # Solve for x\n    x = symbols('x')\n    equation = Eq((blue_pens_initial + x) / (total_pens_after_red_added + x), 0.4)\n\n    # Solve the equation\n    blue_pens_added = solve(equation, x)[0]\n    \n    return blue_pens_added\n\nans = solution()"
    ],
    "94f9a30088f14e23ad5d292b0a21a0e4": [
        "def solution():\n    dividend = 20172017\n    divisor = 2017\n    ans = dividend // divisor\n    return ans\n\nans = solution()"
    ],
    "eb8fb6f94cc1474ca839b50b4b0ce425": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    correct, incorrect = symbols('correct incorrect')\n\n    equation1 = Eq(correct, 3 * incorrect + 12)\n    equation2 = Eq(5 * correct - 2 * incorrect, 151)\n\n    solutions = solve((equation1, equation2), (correct, incorrect))\n\n    return solutions[correct]\n\nans = solution()"
    ],
    "31547fbcddfa44d195f62ee2a144d7f9": [
        "def solution():\n    cost_per_km = 2.42\n    journey_km = 32\n    num_friends = 11\n    total_cost = cost_per_km * journey_km\n    cost_per_person = total_cost / num_friends\n    return cost_per_person\n\nans = solution()"
    ],
    "cbc6325d9c534f4b9977c61b302c8d0c": [
        "def solution():\n    total_children = 30\n    glasses = 8\n    watches = 12\n    both = 7\n\n    neither = total_children - (glasses + watches - both)\n    return neither\n\nans = solution()"
    ],
    "e4dd70bfb9454c2286a8726ee86d101c": [
        "from itertools import combinations\n\ndef solution():\n    # Find all prime numbers from 1 to 13 inclusive\n    prime_numbers = [2, 3, 5, 7, 11, 13]\n    \n    # Find all possible combinations of the numbers from 1 to 13 that could be the ones not picked\n    possible_combinations = list(combinations(range(1, 14), 4))\n    \n    # Define a function to count the number of factors of a number\n    def count_factors(n):\n        return sum(n % i == 0 for i in range(1, n + 1))\n    \n    # Iterate through all combinations and check if there are exactly two numbers with a unique number of factors\n    valid_combinations = []\n    for combo in possible_combinations:\n        factor_counts = [count_factors(n) for n in combo]\n        if factor_counts.count(factor_counts[0]) == 1 and factor_counts.count(factor_counts[1]) == 1:\n            valid_combinations.append(combo)\n            \n    # Remove combinations where the difference between two numbers is not found\n    valid_combinations = [combo for combo in valid_combinations if any(\n        x + 2 in combo and x + 3 in combo for x in combo)]\n    \n    # Since there is the condition that Alice knows hers is an odd number\n    # and the combination must contain her number, May's number, and Mark's number,\n    # we need to ensure that for any x (which could be Alice's number), x - 2 and x - 1\n    # (which could be May's and Mark's numbers) are in the combination, and all are odd.\n    valid_combinations = [combo for combo in valid_combinations if any(\n        x in prime_numbers and x - 2 in combo and x - 1 in combo and x % 2 != 0 for x in combo)]\n    \n    # Since there's only supposed to be a single valid combination, we will take the product of that combination\n    if len(valid_combinations) == 1:\n        return valid_combinations[0][0] * valid_combinations[0][1] * \\\n               valid_combinations[0][2] * valid_combinations[0][3]\n    else:\n        return None  # In case no valid combination was found or there's an error in our assumptions.\n\nans = solution()"
    ],
    "392b16f9a6ac48cca42c471b49e63670": [
        "def solution():\n    num1 = int('45', 7)  # Convert string \"45\" from base 7 to an integer\n    num2 = int('66', 7)  # Convert string \"66\" from base 7 to an integer\n\n    sum_base10 = num1 + num2  # Sum the numbers in base 10\n    ans = ''\n    \n    # Convert the sum back to base 7\n    while sum_base10 > 0:\n        ans = str(sum_base10 % 7) + ans\n        sum_base10 //= 7\n    \n    return ans\n\nans = solution()"
    ],
    "a4b725f5709b47a982b182d038fac1ef": [
        "def solution():\n    return 628 * 5\n\nans = solution()"
    ],
    "8b67176726654523a82d12a0a53e5a72": [
        "def solution():\n    # In a round-robin chess match, each player plays every other player once.\n    # There are 7 players, which means each player should play 6 matches in total.\n    # The total number of matches is 7 * 6 / 2, as each match is counted twice.\n    total_matches = 7 * 6 // 2\n    \n    # Subtract the known matches played by A, B, C, D, E, and G to find the matches F has played.\n    matches_played_by_f = total_matches - (4 + 6 + 2 + 1 + 3 + 5)\n    \n    return matches_played_by_f\n\nans = solution()"
    ],
    "15d3db4f4eda491babda7b41a87df4bd": [
        "def solution():\n    from math import gcd, lcm\n\n    # Try all possible pairs of consecutive numbers in the range 1 to 20\n    for i in range(1, 20):\n        divisors = list(range(1, 21))\n        # Remove a pair of consecutive numbers\n        divisors.remove(i)\n        divisors.remove(i+1)\n\n        # Calculate the least common multiple of remaining 18 numbers\n        lcm_val = 1\n        for num in divisors:\n            lcm_val = lcm(lcm_val, num)\n\n        # The lcm of remaining numbers should be divisible by all except the removed pair\n        divisibility_check = True\n        for j in range(1, 21):\n            if j not in divisors and lcm_val % j == 0:\n                divisibility_check = False\n                break\n        \n        # If check passed, then we have found our two consecutive numbers\n        if divisibility_check:\n            return i + (i + 1)\n\nans = solution()"
    ],
    "066d9987dbaf460b8056b1fcc71dd3f4": [
        "def solution():\n    ans = 67 * 23\n    return ans\n\nans = solution()"
    ],
    "f19f57dc40604eba86f9d7b2bb0b2c70": [
        "def solution():\n    ratio_sum = 5 + 3\n    difference = 18\n    natasha_stamps = difference / (5 - 3)\n    total_stamps = natasha_stamps * ratio_sum\n\n    return int(total_stamps)\n\nans = solution()"
    ],
    "11d22bb6c3c14854bb9338e27e427226": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Cici and Linda's ages\n    linda_current, cici_birth = symbols('linda_current cici_birth')\n\n    # Equation 1: When Cici was born, Linda was 11 years old\n    equation1 = Eq(cici_birth, linda_current - 11)\n\n    # Equation 2: The sum of their ages 4 years later will be 37\n    equation2 = Eq((linda_current + 4) + (cici_birth + 4), 37)\n\n    # Find the solutions for the system of equations\n    solutions = solve((equation1, equation2), (linda_current, cici_birth))\n\n    # Calculate Linda's age 3 years later\n    linda_age_3_years_later = solutions[linda_current] + 3\n\n    return linda_age_3_years_later\n\nans = solution()"
    ],
    "ba994c84bc354e9ebb8e56f799001f32": [
        "def solution():\n    ans = sum(n for n in range(161, 15*15) if n % 15 == n // 15)\n    return ans\n\nans = solution()"
    ],
    "95171e30845347a5a0bcbd146bae2a00": [
        "def solution():\n    # Since we want the least possible sum,\n    # We take the smallest value for the first number and the second number\n    first_number = 5\n    second_number = 2\n\n    # Calculate the sum of the smallest possible values\n    least_sum = first_number + second_number\n\n    return least_sum\n\nans = solution()"
    ],
    "bc39719692424efd97a67922f5478c31": [
        "def solution():\n    distance_one_way = 300\n    speed_uphill = 10 \n    speed_downhill = 30 \n\n    time_uphill = distance_one_way / speed_uphill\n    time_downhill = distance_one_way / speed_downhill\n\n    total_distance = 2 * distance_one_way\n    total_time = time_uphill + time_downhill\n\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "bdd45d02da3a4de3baed4b719bcf043f": [
        "def solution():\n    ans = 15.2 - 5.7\n    return ans\n\nans = solution()"
    ],
    "8e079aa33fac45e2933fe8f9f57347fe": [
        "def solution():\n    first_term = 5\n    last_term = 85\n    difference = 4\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n    return sum_of_sequence\n\nans = solution()"
    ],
    "e3abc3aab67f4f7b981e00c65dd7ce44": [
        "def solution():\n    ways_for_each_person = 5\n    total_ways = ways_for_each_person ** 4  # Since each person can choose any of the 5 independently\n    return total_ways\n\nans = solution()"
    ],
    "adb3d1fd535a48be8776775afaca3c49": [
        "def solution():\n    total_peaches = 18\n    peaches_per_bag = 2\n\n    num_bags = total_peaches // peaches_per_bag\n\n    return num_bags\n\nans = solution()"
    ],
    "8f4e94438ebd4f19ae675530ee3c1dd8": [
        "def solution():\n    from math import gcd\n\n    apples = 226\n    pears = 352\n    oranges = 157\n\n    # Calculate the number of fruits that can be distributed evenly\n    distributable_apples = apples - 10\n    distributable_pears = pears - 28\n    distributable_oranges = oranges - 13\n\n    # Find the gcd of the distributable fruits\n    gcd_ap = gcd(distributable_apples, distributable_pears)\n    gcd_final = gcd(gcd_ap, distributable_oranges)\n\n    return gcd_final\n\nans = solution()"
    ],
    "f03076a28d8c4de9b99cc80f1669e699": [
        "def solution():\n    from math import factorial\n\n    # Judy has 2 choices: first place or last place\n    judy_options = 2\n\n    # The remaining 5 friends can be arranged in any order\n    friends_permutations = factorial(5)\n\n    # The total ways Judy and her friends can form the line\n    total_ways = judy_options * friends_permutations\n\n    return total_ways\n\nans = solution()"
    ],
    "9f777ba0c7da4ecd859df39dac23c0ff": [
        "def solution():\n    number = 6\n    lcm = 12\n    \n    for i in range(1, lcm + 1):\n        if (lcm % i == 0) and (number % i == 0) and (i == 1 or i == 2):\n            other_number = lcm // number\n            return other_number\n\nans = solution()"
    ],
    "2f084b925d5c4e3c8e7edcf07200e325": [
        "def solution():\n    number_of_digits = 0\n    current_number = 1\n\n    while True:\n        digits_in_current_number = len(str(current_number))\n\n        if number_of_digits + digits_in_current_number >= 200:\n            return int(str(current_number)[200 - number_of_digits - 1])\n\n        number_of_digits += digits_in_current_number\n        current_number += 1\n\nans = solution()"
    ],
    "b0092c2c2ecd4457baa2ed73067b8fd5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cost = symbols('cost')\n    price = cost + 40\n    selling_price = price * 0.8\n    profit = selling_price - cost\n    \n    equation = Eq(profit, 12)\n    cost_value = solve(equation, cost)\n\n    return cost_value[0]\n\nans = solution()"
    ],
    "452e139840314890bf5003e2f7071e6c": [
        "def solution():\n    ans = 6.25 * 8.27 * 16 + 1.25 * 0.827 * 8\n    return ans\n\nans = solution()"
    ],
    "20029a5838a5496b81ff40af3d12651e": [
        "def solution():\n    total_days = 4\n    total_production = 500 * total_days\n    total_points = 9931\n    lost_points_per_unqualified = 18\n    gained_points_per_qualified = 5\n    \n    # Hypothesis: All products are qualified\n    all_qualified_points = total_production * gained_points_per_qualified\n    \n    # Calculate the deficit in points due to unqualified products\n    points_deficit = all_qualified_points - total_points\n    \n    # Calculate the number of unqualified products\n    unqualified_products = points_deficit / (gained_points_per_qualified + lost_points_per_unqualified)\n    \n    # Calculate the number of qualified products\n    qualified_products = total_production - unqualified_products\n\n    return int(qualified_products)\n\nans = solution()"
    ],
    "8646401fa22043b3be02e989c5192b0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hens, roosters = symbols('hens roosters')\n    equation1 = Eq(hens, 6 * roosters)\n    equation2 = Eq(hens + 60, 4 * (roosters + 60))\n    \n    solutions = solve((equation1, equation2), (hens, roosters))\n    \n    return solutions[hens] + solutions[roosters]\n\nans = solution()"
    ],
    "b7b52b9389844c4ca62d9f3110155373": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Daniel's age and his daughter's age\n    daniel, daughter = symbols('daniel daughter')\n\n    # Equation 1: Two years ago, Daniel's age was 6 times his daughter's age\n    equation1 = Eq(daniel - 2, 6 * (daughter - 2))\n\n    # Equation 2: Two years from now, Daniel's age will be 4 times his daughter's age\n    equation2 = Eq(daniel + 2, 4 * (daughter + 2))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (daniel, daughter))\n\n    # Return Daniel's current age\n    return solutions[daniel]\n\nans = solution()"
    ],
    "5018d5ab300649cebcf5c45010bddd83": [
        "def solution():\n    mean_initial = 12\n    mean_final = 11\n    num_numbers_initial = 7\n\n    total_initial = mean_initial * num_numbers_initial\n    total_final = mean_final * (num_numbers_initial + 1)\n\n    eighth_number = total_final - total_initial\n\n    return eighth_number\n\nans = solution()"
    ],
    "9ed2edaef1a74aa7ab2da7a4c1e1e5ba": [
        "def solution():\n        # Let's denote the distance from P to the meeting point as x.\n        # Hence, the distance from Q to the meeting point is 1800 - x.\n        # Let d be the distance April has to cover to get back to P from the meeting point.\n        # When April meets Baye, April has covered a distance x, and Baye has covered a distance 1800 - 800 = 1000 meters.\n        # Since they meet at 800m from Q, x = 1800 - 800 = 1000 meters.\n        # According to the problem, April runs back to P at 4 times her original speed.\n        # This means by the time April covers distance d back to P, Baye covers d/4 distance towards Q.\n        # We're asked for the distance between Baye and Q when April reaches P.\n        # To get to P, April runs 1000 meters. At the same time, Baye covers 1000 / 4 = 250 meters.\n        # Thus, Baye's distance from Q when April reaches P is 1800 - (1000 + 250) = 550 meters.\n    \n        return 550\n\nans = solution()"
    ],
    "a4a8d66b728347868536b3995b8fc695": [
        "def solution():\n    # Calculate the sum of the sequence up to 8\n    sum_up_to_8 = sum(range(1, 9))\n\n    # Calculate the sum of the sequence from 7 back down to 1\n    sum_down_to_1 = sum(range(1, 8))\n\n    # The final number in the sequence is 2, adding it separately\n    final_number = 2\n\n    # Total sum of the sequence\n    total_sum = sum_up_to_8 + sum_down_to_1 + final_number\n\n    return total_sum\n\nans = solution()"
    ],
    "d9216e847ffd4805a2ca577a27228cc1": [
        "def solution():\n    repeating_sequence = \"538462\"\n    sequence_length = len(repeating_sequence)\n    position = 2021\n    index_in_sequence = (position - 1) % sequence_length\n\n    ans = int(repeating_sequence[index_in_sequence])\n    return ans\n\nans = solution()"
    ],
    "216f3c5f6bd1448286cfaa40eb464d6f": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        count += str(i).count('9')\n    return count\n\nans = solution()"
    ],
    "8f3600a93e7c46e28e43d9b4b9104ddc": [
        "def solution():\n    return 8000 * 0.7\n\nans = solution()"
    ],
    "69c45c2ab19846ef90c4ca25ad543301": [
        "def solution():\n    # Since all permutations of '375' are given, they will all have the same sum for each digit place (100s, 10s, 1s)\n    # There are 6 permutations, and the sum of the digits is (3+7+5).\n    sum_of_digits = 3 + 7 + 5\n    total_sum = sum_of_digits * (100 + 10 + 1) * 6\n    \n    return total_sum\n\nans = solution()"
    ],
    "dfbce185a0d1406bb45782f37f1adb2b": [
        "def solution():\n    count = 0\n    # For two-digit palindromic numbers\n    for i in range(1, 10):\n        count += 1  # Only 10 possibilities: 11, 22, ..., 99\n\n    # For three-digit palindromic numbers\n    for i in range(1, 10):  # There're 9 possibilities for the first digit (1-9)\n        for j in range(0, 10):  # There're 10 possibilities for the second (0-9)\n            # The third digit must be equal to the first digit\n            count += 1  # This gives us 90 possibilities (101, 111, ..., 191, 202, ... 292, ... 909, 919, 929, 939, ..., 999)\n\n    return count\n\nans = solution()"
    ],
    "47d4d71ebd964d418d18b5348710fb9b": [
        "def solution():\n    sequence = [2, 3, 1, 4]\n    index = (100 - 1) % len(sequence)\n    ans = sequence[index]\n    return ans\n\nans = solution()"
    ],
    "e2ea592e99324a6b86bbb07ba971a430": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    money = symbols('money')\n    book = (1/3) * money\n    bag = (2/5) * money\n    total_cost = Eq(book + bag, 132)\n\n    initial_money = solve(total_cost, money)\n\n    return initial_money[0]\n\nans = solution()"
    ],
    "dbc4269e2e99475794fddbd7d1e826c6": [
        "def solution():\n    part1 = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.45)\n    part2 = (1 + 0.23 + 0.34 + 0.45) * (0.23 + 0.34)\n    ans = part1 - part2\n    return ans\n\nans = solution()"
    ],
    "1ccbabdc7f034326be8b94b02ccbf7ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the masses of parcels A, B, and C\n    A, B, C = symbols('A B C')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(A, 5 * B)           # A is 5 times B\n    equation2 = Eq(C, B - 75)          # C is 75g less than B\n    equation3 = Eq(A + B + C, 835)     # Sum of A, B, and C is 835g\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "c249f8e6939148b99f296ae70f7cf7e8": [
        "def solution():\n    return 4125 - 837\n\nans = solution()"
    ],
    "101e7c9b793b4e26ac47357202b6291d": [
        "def solution():\n    divisible_by_5 = 105 // 5\n    divisible_by_7 = 105 // 7\n    divisible_by_5_and_7 = 105 // (5 * 7)\n    \n    ans = divisible_by_5 + divisible_by_7 - divisible_by_5_and_7\n    return ans\n\nans = solution()"
    ],
    "2b1f58b0e57c45099538b16cb3f3c104": [
        "def solution():\n    total_digits = 0\n    \n    for i in range(1, 216):\n        total_digits += len(str(i))\n        \n    return total_digits\n\nans = solution()"
    ],
    "eca2b23e39bc4c299b30d3fbc9b3d73d": [
        "def solution():\n    for num in range(10000, 100000):\n        if int('1' + str(num)) * 3 == int(str(num) + '1'):\n            return num\n\nans = solution()"
    ],
    "a93778b948054d42ad167593922df9c6": [
        "def solution():\n    # Darrell may pick all the blue and white beads first,\n    # so we need to count those too.\n    # After picking all the beads that are not green,\n    # we need to pick 5 green beads to ensure we have 5 green.\n\n    blue_beads = 5\n    white_beads = 6\n    beads_to_get_five_green = 5\n\n    # Calculate the minimum number of beads Darrell must draw\n    min_draws = blue_beads + white_beads + beads_to_get_five_green\n\n    return min_draws\n\nans = solution()"
    ],
    "b45003629b394ccebb1e2b405d724add": [
        "def solution():\n    total_digits = 0\n    for i in range(1, 82):\n        total_digits += len(str(i))\n    return total_digits\n\nans = solution()"
    ],
    "1222cdddea1c4817bb25740ae257c8cd": [
        "def solution():\n    time_to_forth_floor = 12  # minutes from first to fourth floor\n    floors_walked = 4 - 1  # from the first to fourth floor\n\n    # Given that speed is constant, time taken is directly proportional to the distance (number of floors).\n    time_to_eighth_floor = time_to_forth_floor * ((8 - 1) / floors_walked)\n\n    return time_to_eighth_floor\n\nans = solution()"
    ],
    "40d0f5e5a3d04db08f0040c8220611b9": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Let x1, x2, and x3 represent the number of apples in each of the 3 baskets.\n    x1, x2, x3 = symbols('x1 x2 x3')\n\n    # Equation representing the sum of apples in all baskets\n    equation = x1 + x2 + x3 - 6\n\n    # We will solve for the counts of apples in each basket\n    # such that x1>=x2>=x3 and x1+x2+x3 = 6.\n    # Consider all baskets as identical, we need to consider only non-decreasing sequences of numbers.\n    \n    # The following transformation is used because of the \"stars and bars\" technique (Combinatorics):\n    # From a sequence of x1 stars, x2 stars, and x3 stars, we can find the number of non-negative\n    # solutions for x1, x2, x3 considering our conditions by using two \"bars\" or dividers among the stars.\n    # In this way, we are considering all possible distributions of 6 indistinguishable items into 3 distinguishable boxes.\n    \n    solutions = 0\n    for x1_count in range(7):\n        for x2_count in range(x1_count + 1):  # Since x2 cannot be greater than x1\n            solutions += 1  # Each valid (x1, x2) pair is a solution\n\n    return solutions\n\nans = solution()"
    ],
    "979c9332296e4b05927d9ad6ccb64f02": [
        "def solution():\n    initial_birds_to_squirrels_ratio = 8 / 5\n    squirrel_increase_percent = 0.20\n\n    # Initial number of squirrels (assuming a base number without loss of generality)\n    initial_squirrels = 5\n    # Calculation using the initial ratio to find the initial number of birds\n    initial_birds = initial_squirrels * initial_birds_to_squirrels_ratio\n\n    # Calculate the new number of squirrels after the 20% increase\n    new_squirrels = initial_squirrels * (1 + squirrel_increase_percent)\n    # Total number of animals remains the same\n    total_animals = initial_birds + initial_squirrels\n\n    # The new number of birds is the total minus the new number of squirrels\n    new_birds = total_animals - new_squirrels\n\n    # Calculate the percentage of birds that flew away\n    birds_flew_away_percent = ((initial_birds - new_birds) / initial_birds) * 100\n    \n    return birds_flew_away_percent\n\nans = solution()"
    ],
    "0591335fbeb544698580a0e98be03d2a": [
        "def solution():\n    a, b = 6, 2\n    ans = 5*a - 2*b\n    return ans\n\nans = solution()"
    ],
    "9c0a5f1ed9254394ae35f6dd067361f9": [
        "def solution():\n    average_pizzas_per_month = 15\n    number_of_months = 5  # March to July\n\n    total_pizzas = average_pizzas_per_month * number_of_months\n\n    return total_pizzas\n\nans = solution()"
    ],
    "14d6fb53ee054b819a454314775c99b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    fiona, gary, harold = symbols('fiona gary harold')\n\n    equation1 = Eq(fiona + gary, 973)\n    equation2 = Eq(fiona + harold, 1823)\n    equation3 = Eq(harold, 6 * gary)\n\n    solutions = solve((equation1, equation2, equation3), (fiona, gary, harold))\n\n    return solutions[fiona]\n\nans = solution()"
    ],
    "6fec75e44860480685b5445a5272826d": [
        "def solution():\n    first_day_pages = 30\n    last_day_pages = 70\n    difference = 4\n\n    days = ((last_day_pages - first_day_pages) // difference) + 1\n\n    return days\n\nans = solution()"
    ],
    "1b2e33b69c4341748d743ea3c35f44bd": [
        "def solution():\n    remainder = 3\n    possible_values = set()\n\n    for divisor in range(1, 40 - remainder):\n        for quotient in range(1, (40 - remainder - divisor)):\n            dividend = divisor * quotient + remainder\n            if divisor + dividend + quotient + remainder == 40:\n                possible_values.add(dividend / quotient)\n\n    ans = len(possible_values)\n    return ans\n\nans = solution()"
    ],
    "1804adbd1c694fbf927bc62b4de481a7": [
        "def solution():\n    return 32 * 2.99\n\nans = solution()"
    ],
    "5b2b9a10bf9b44c1988bdcc8f01d4a18": [
        "def solution():\n    def new_operation(a, b):\n        return (a % 10) + (b % 30) - 2\n\n    ans = new_operation(9, 20)\n    return ans\n\nans = solution()"
    ],
    "21f2e786c44e43fd8fbda4a44480bfbf": [
        "def solution():\n    total_juice = 8 * 3\n    juice_consumed = 9\n    remaining_juice = total_juice - juice_consumed\n    container_size = 5\n\n    num_containers = -(-remaining_juice // container_size)  # ceil division\n\n    return num_containers\n\nans = solution()"
    ],
    "edb6ff670e7a48e9aef3d4e832e24086": [
        "def solution():\n    difference = 15 - 7\n    last_term = 31\n    next_term = last_term + difference\n    return next_term\n\nans = solution()"
    ],
    "1abbedb2f71c4dbab5df55bde5e26a5d": [
        "def solution():\n    n = 50\n    ans = n * (n + 1) // 2\n    return ans\n\nans = solution()"
    ],
    "7bb759a90ae748649b4ddfa82640d631": [
        "def solution():\n    ans = 782 - 9 * 52 // 2\n    return ans\n\nans = solution()"
    ],
    "9cd1a6eac3734a348b37444a5f4ed5e0": [
        "def solution():\n    ans = 7 * 8\n    return ans\n\nans = solution()"
    ],
    "1b458ff9afcc4e6694b4762bc4c0b43d": [
        "def solution():\n    count = 0\n    for A in range(1, 100):  # We limit the range for practical reasons\n        if 5/9 < 9/A < 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "83fd4800ad634c9cb2b8e8bbefea460b": [
        "def solution():\n    flour_per_loaf = 4 / 7  # cups of flour needed for one loaf\n    loafs_needed = 35\n    cups_needed = flour_per_loaf * loafs_needed\n    return cups_needed\n\nans = solution()"
    ],
    "de32a278ca184c9c9f171ce6754bd1c9": [
        "def solution():\n    from itertools import permutations\n\n    possible_values = range(1, 10)\n    for perm in permutations(possible_values, 4):\n        D, A, R, T = perm\n        if D + A + R + T == 11 and T + A + R + T == 12 and A + R + T + perm[2] == 13:\n            return A + R + T\n\nans = solution()"
    ],
    "1af542041fcd45c9a176b5924756243f": [
        "def solution():\n    members_left_of_Tanya = 3\n    members_right_of_Tanya = 5\n    Tanya_herself = 1\n\n    total_members = members_left_of_Tanya + Tanya_herself + members_right_of_Tanya\n\n    return total_members\n\nans = solution()"
    ],
    "42831d4ef6484891b15f159d0746344e": [
        "def solution():\n    ans = 52 / (2 / 3)\n    return ans\n\nans = solution()"
    ],
    "71733d004c514cf2bf9b3a3ddaab0766": [
        "def solution():\n    friends = 4\n    # Each friend sends a card to every other friend, so for each friend:\n    # (total number of friends - 1) cards are sent.\n    cards_sent_per_friend = friends - 1\n    # But each card is counted twice (once for the sender, once for the receiver)\n    # so we only need half of the total calculated.\n    total_cards_sent = (friends * cards_sent_per_friend) // 2\n\n    return total_cards_sent\n\nans = solution()"
    ],
    "33a1b183569242aa916ecbe40586c0c7": [
        "from sympy import isprime\n\ndef solution():\n    for number in range(9999, 999, -1):\n        if 87878 % number == 0 and isprime(number):\n            return number\n\nans = solution()"
    ],
    "8d22899bdd964169a2e962c83bfbcbd5": [
        "def solution():\n    crate_weight = 5\n    max_load_per_van = 12\n    total_crates = 24\n\n    total_weight = crate_weight * total_crates\n    vans_needed = -(-total_weight // max_load_per_van)  # Ceiling division\n\n    return vans_needed\n\nans = solution()"
    ],
    "d0dd7735401a440189d8289ae8ab1028": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    daniel, patrick = symbols('daniel patrick')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(patrick - 10, daniel + 24) # Patrick had 10 more stickers than Daniel after Daniel gave away 24\n    equation2 = Eq(patrick, 2 * (daniel - 24)) # In the end, Patrick had twice as many stickers as Daniel\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (daniel, patrick))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "c8f89b66009449e3865d5474344519ce": [
        "def solution():\n    # Jack's running speeds\n    speed_1 = 7  # in metres per second for the first 280 metres\n    speed_2 = 5  # in metres per second for the middle 400 metres\n    speed_3 = 8  # in metres per second for the final stage\n\n    # Distances covered in each stage\n    distance_1 = 280\n    distance_2 = 400\n    # The total distance is 800 metres, so we subtract the other two distances\n    # to find the distance covered in the final stage.\n    distance_3 = 800 - (distance_1 + distance_2)\n\n    # Time taken for each stage\n    time_1 = distance_1 / speed_1\n    time_2 = distance_2 / speed_2\n    time_3 = distance_3 / speed_3\n\n    # Total time taken\n    total_time = time_1 + time_2 + time_3\n\n    return int(total_time)\n\nans = solution()"
    ],
    "3cac306af46048b1913124fd77518e07": [
        "def solution():\n    ans = (128 - (24 + 16) // 5) * 2\n    return ans\n\nans = solution()"
    ],
    "f701b731918b424b845fa7f5be85cca5": [
        "def solution():\n    for i in range(10, 100):\n        if i % 3 == 0 and i % 7 == 0:\n            return i\n\nans = solution()"
    ],
    "b9cbfde4746d478da4ea66e77bc853b0": [
        "def solution():\n    henry_situps = 17\n    jack_situps = 10 + 3 * henry_situps\n    return jack_situps\n\nans = solution()"
    ],
    "82b6a8beca7d4600a963dd45eccccf7d": [
        "def solution():\n    def partitions(n, max_value=None):\n        \"\"\"Recursively find the partitions of integer n.\"\"\"\n        if max_value is None:\n            max_value = n\n        if n == 0:\n            return 1\n        if n < 0 or max_value == 0:\n            return 0\n        # Count the partitions including at least one max_value and those that don't\n        return partitions(n-max_value, max_value) + partitions(n, max_value-1)\n    \n    ans = partitions(5)\n    return ans\n\nans = solution()"
    ],
    "069dc14c48254481a3bc04db18550ed3": [
        "def solution():\n    whale_depth = 82\n    plane_height = 569\n    \n    vertical_distance = whale_depth + plane_height\n    \n    return vertical_distance\n\nans = solution()"
    ],
    "ce865959d3344e57a3aaf073ee2bb3fb": [
        "def solution():\n    # Total number of pupils\n    total_pupils = 30\n    \n    # Number of pupils who are right-handed\n    right_handed_pupils = 21\n    \n    # Number of girls in the class\n    total_girls = 16\n    \n    # To minimize the number of right-handed girls, maximize the number of left-handed boys.\n    # Maximum number of left-handed boys is total boys minus left-handed girls (since not all girls are right-handed).\n    left_handed_boys = total_pupils - total_girls - (total_pupils - right_handed_pupils)\n    \n    # Minimum number of right-handed girls is total right-handed minus left-handed boys.\n    right_handed_girls_min = right_handed_pupils - left_handed_boys\n    \n    return right_handed_girls_min\n\nans = solution()"
    ],
    "466b36af3a8446caafde7a548b3f78e0": [
        "def solution():\n    # To minimize the difference, we must minimize the larger number and maximize the smaller number\n    # while complying with the no-repetition condition. Therefore, we should start the smaller number\n    # with 1 and the larger number with 9, and then arrange the digits in ascending order for the \n    # smaller number and in descending order for the larger number to ensure the smallest difference.\n\n    # The smallest 9-digit number using the digits 1 through 9 is 123456789.\n    smallest_number = int(''.join(map(str, range(1, 10))))\n    \n    # The largest 9-digit number using the digits 1 through 9 is 987654321.\n    largest_number = int(''.join(map(str, range(9, 0, -1))))\n    \n    # The difference between the largest and smallest such numbers would be the smallest possible.\n    difference = largest_number - smallest_number\n    \n    return difference\n\nans = solution()"
    ],
    "d7f813e5b15745bbaf0c9127836fa459": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_fruits = symbols('total_fruits')\n    # apples = 2/3 of total, bananas = 1/9 of total, lemons = 1 - 2/3- 1/9 of total\n    apples_fraction = 2/3\n    bananas_fraction = 1/9\n    lemons_fraction = 1 - apples_fraction - bananas_fraction\n\n    # apples = lemons + 12\n    equation = Eq(apples_fraction * total_fruits, lemons_fraction * total_fruits + 12)\n    total_fruits_solution = solve(equation, total_fruits)\n\n    lemons = lemons_fraction * total_fruits_solution[0]\n\n    return lemons\n\nans = solution()"
    ],
    "ec878d4f92a64aa1ab12f86c3fa8a94b": [
        "def solution():\n    days = 9\n    skirts_per_worker = 6\n    total_skirts = sum([(skirts_per_worker * day) for day in range(1, days + 1)])\n    return total_skirts\n\nans = solution()"
    ],
    "fffb4e32f90b489bbe7949d334d8186e": [
        "def solution():\n    result = 234000 // 520\n    return result\n\nans = solution()"
    ],
    "2d6aea4ba7814aac9c2750870ec89264": [
        "def solution():\n    jenny_eats = 6\n    qiqi_eats = jenny_eats + 5\n    return qiqi_eats\n\nans = solution()"
    ],
    "87b40651078348b78ccc888ac86bf65e": [
        "def solution():\n    probability_A_over_20 = 0.6\n    probability_A_over_25_given_over_20 = 0.3\n    probability_A_over_25 = probability_A_over_25_given_over_20 / probability_A_over_20\n\n    return probability_A_over_25\n\nans = solution()"
    ],
    "630d3f51949a4ab29f59d2121794d3d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    total_students = 39\n\n    equation1 = Eq(boys + girls, total_students)  # Total number of students\n    equation2 = Eq(boys / 4, girls * 2 / 5)       # Relation between number of boys and girls\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys] - solutions[girls]\n\nans = solution()"
    ],
    "35851918f9924fceb5a562dd5d192675": [
        "def solution():\n    # If 5 taps take 2 minutes to fill a 1 litre jug,\n    # then 1 tap would take 5 times longer to fill the same jug.\n    time_for_one_tap_one_litre = 5 * 2  # 5 taps * 2 minutes\n\n    # Since we are only filling a 500ml jug, which is half the size of a 1 litre jug,\n    # it would take half the time for one tap to fill it.\n    time_for_one_tap_half_litre = time_for_one_tap_one_litre / 2  # half the size, so half the time\n\n    return time_for_one_tap_half_litre\n\nans = solution()"
    ],
    "4c87648eb039475abd9708a1ed7cecfa": [
        "def solution():\n    numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 29]\n    return sum(numbers)\n\nans = solution()"
    ],
    "e099576e4e594256ae673a9a633c5f85": [
        "def solution():\n    a = 1\n    while True:\n        result = a * a + a + a\n        if result == 399:\n            return a\n        a += 1\n\nans = solution()"
    ],
    "de4ad58a954b4989ae634d7131538ded": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of erasers John and his brother have\n    john_erasers, brother_erasers = symbols('john_erasers brother_erasers')\n\n    # Equation representing the total erasers they have\n    equation1 = Eq(john_erasers + brother_erasers, 246)\n    # John has 32 more erasers than his brother\n    equation2 = Eq(john_erasers, brother_erasers + 32)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (john_erasers, brother_erasers))\n    \n    # The solution for the brother's erasers\n    return solutions[brother_erasers]\n\nans = solution()"
    ],
    "f5c4e7bc746541e9b6316434d0ceb4b9": [
        "def solution():\n    ben_height = 110  # Ben's height in cm\n    difference = 20   # The difference in height between Ben and Sally in cm\n\n    sally_height = ben_height + difference  # Sally's height in cm\n\n    return sally_height\n\nans = solution()"
    ],
    "4ca9bdd241ae40399356da6f218dbb41": [
        "def solution():\n    result = 360 / (70 - 4 * 16)\n    return result\n\nans = solution()"
    ],
    "7a70eb04e5694b2f959619353709df11": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_visitors = symbols('total_visitors')\n\n    children = (3/5) * total_visitors\n    remaining_visitors = total_visitors - children\n    men = (1/2) * remaining_visitors\n    equation = Eq(children - men, 140)\n\n    solved = solve(equation, total_visitors)\n\n    return solved[0]\n\nans = solution()"
    ],
    "1b35f91f96ce4f3c9d7ed9202f8cdf3f": [
        "def solution():\n    total_volume_ml = 2000  # 2 Litres converted to millilitres\n    volume_drank_ml = 350   # Volume drank in millilitres\n    \n    volume_left_ml = total_volume_ml - volume_drank_ml\n    \n    return volume_left_ml\n\nans = solution()"
    ],
    "6f30ded079154369a2666ef1c735c804": [
        "def solution():\n    percentage = 40\n    total_amount = 3280\n\n    result = (percentage / 100) * total_amount\n\n    return result\n\nans = solution()"
    ],
    "a59a1a5e7bb041eeba8b3ee3076a0168": [
        "def solution():\n    digits = [8, 7, 6, 4, 3, 1]  # Provide list in descending order to get max sum\n    number1_combinations = [digits[0]*100 + digits[3]*10 + digits[-1],\n                            digits[0]*100 + digits[4]*10 + digits[-2],\n                            digits[0]*100 + digits[5]*10 + digits[-3]]\n    number2_combinations = [digits[1]*100 + digits[2]*10 + digits[-1],\n                            digits[1]*100 + digits[2]*10 + digits[-2],\n                            digits[1]*100 + digits[2]*10 + digits[-3]]\n    # Compute all possible sums\n    possible_sums = [num1 + num2 for num1 in number1_combinations for num2 in number2_combinations]\n    return max(possible_sums)  # Return the maximum possible sum\n\nans = solution()"
    ],
    "faea17ac401e48f69feca7264a676aa1": [
        "def solution():\n    # Define the rules based on the provided sequence\n    # Rule 1 (applied to the 2nd, 4th, 6th, ... numbers): +7\n    # Rule 2 (applied to the 3rd, 5th, 7th, ... numbers): double the previous number\n    \n    # Last observed number in the sequence adhering to Rule 1\n    last_plus_7 = 53  \n    # Next number following Rule 2\n    next_number = last_plus_7 * 2\n\n    return next_number\n\nans = solution()"
    ],
    "15d47923017f46819afb2823ad09cc4f": [
        "def solution():\n    ans = 125 * 33 * 8\n    return ans\n\nans = solution()"
    ],
    "e069b4976d444e998bace1344680903f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C, total = symbols('A B C total')\n    \n    # Equation 1: A + C = total, and A contributes 18 tons\n    equation1 = Eq(18 + C, total)\n    \n    # Equation 2: B + C = total, and B contributes 27 tons\n    equation2 = Eq(27 + C, total)\n    \n    # Given: Flow rate of B is twice A, B = 2 * A\n    equation3 = Eq(B, 2 * 18)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C, total))\n\n    return solutions[total]\n\nans = solution()"
    ],
    "8521e58090644e50b36a4c1538e31de9": [
        "def solution():\n    total_weight = 8  # total kilograms of oranges\n    total_cost = 26.8  # total cost of oranges in dollars\n\n    cost_per_kilogram = total_cost / total_weight\n\n    return cost_per_kilogram\n\nans = solution()"
    ],
    "77d56c10f2874a70a787b5301834ff74": [
        "def solution():\n    pay_per_match = 500\n    pay_per_goal = 100\n    number_of_matches = 20\n    average_goals_per_game = 2\n\n    total_earnings = (pay_per_match * number_of_matches) + (pay_per_goal * average_goals_per_game * number_of_matches)\n\n    return total_earnings\n\nans = solution()"
    ],
    "92c3ddc959274727b4fd914c29d362cb": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 4):\n        M, A, T, H = p\n        if M == 0 or H == 0:  # Avoid leading zeroes\n            continue\n        MATH = M*1000 + A*100 + T*10 + H\n        HTAM = H*1000 + T*100 + A*10 + M\n        if MATH + HTAM == 12221:\n            return A + M + T + H\n\nans = solution()"
    ],
    "8ede2732f5484360930b19455debcec8": [
        "def solution():\n    first_term = 1\n    num_terms = 10\n    total = sum(2*i + first_term for i in range(num_terms))\n    return total\n\nans = solution()"
    ],
    "45f8a5a1f53f4bff9dace272c0ede1d7": [
        "def solution():\n    return 10 - 5 + 1\n\nans = solution()"
    ],
    "519388df35614f98adbf4fccf30c1f5e": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if str(i).count('7') >= 2:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ec0dc6144d204d6c943bc67a1de14ef9": [
        "def solution():\n    total_cost = 19.20\n    number_of_balls = 16\n    cost_per_ball = total_cost / number_of_balls\n    return cost_per_ball\n\nans = solution()"
    ],
    "db79add64b5e4e55bd1c4d7204bfe7d4": [
        "def solution():\n    total_sweets = 60\n    bill_eats = total_sweets / 2\n    remaining_sweets = total_sweets - bill_eats\n    given_away = remaining_sweets / 3\n    bill_left = remaining_sweets - given_away\n    return bill_left\n\nans = solution()"
    ],
    "ba1ea0471abe4147b19a80a73dee7d82": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of 2-dollar notes be x and 5-dollar notes be y\n    x, y = symbols('x y')\n\n    # Initial condition equation: x + y = 55\n    initial_condition = Eq(x + y, 55)\n\n    # She spent 1/3 of the $2 notes\n    x_spent = x - (x / 3)\n\n    # She received another 8 pieces of $5 notes\n    y_received = y + 8\n\n    # After that, the number of $5 notes she had was 3/7 of the remaining number of notes\n    final_condition = Eq(y_received, 3/7 * (x_spent + y_received))\n\n    # Solving the equations\n    solutions = solve((initial_condition, final_condition), (x, y))\n\n    # Amount of money initially\n    money_initially = solutions[x] * 2 + solutions[y] * 5\n\n    return money_initially\n\nans = solution()"
    ],
    "efd4072c0059428488794f72455b87a4": [
        "def solution():\n    number1 = 1.9\n    number2 = 1.99\n    halfway_number = (number1 + number2) / 2\n    return halfway_number\n\nans = solution()"
    ],
    "120862b4815543c8aca7421dc70a00e8": [
        "def solution():\n    total_questions = 6\n    correct_score = 5\n    wrong_score = -2\n    total_score = 23\n    \n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        if correct_score * correct + wrong_score * wrong == total_score:\n            return correct\n\nans = solution()"
    ],
    "56ce2f46479443bfaa5b050d2e0cbbe4": [
        "from math import factorial\n\ndef solution():\n    # Mr Spencer (S) must sit between his two children (C), so treat them as a block (SCS)\n    # There are 3 other people (P), so the arrangement is [SCS, P, P, P]\n    \n    # Calculate the permutations of 4 entities (SCS block and 3 Ps)\n    permutations_block_PPP = factorial(4)\n    \n    # Calculate the permutations within the SCS block (S can be in the middle in only one way, but children can swap)\n    permutations_SCS = factorial(2)\n    \n    # Total number of arrangements is the product of both permutations\n    total_arrangements = permutations_block_PPP * permutations_SCS\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "2baa1f80095e4ef99463beca11920717": [
        "def solution():\n    # Let's assume the total amount of grass is G units,\n    # and the daily growth of grass is g units/day.\n\n    # From the given information:\n    # 20 horses can eat all grass in 12 days,\n    # so the daily amount of grass 20 horses eat is G/12 units/day.\n    # 1 horse eats (G/12) / 20 = G/240 units/day.\n\n    # Similarly, 60 sheep can eat all grass in 24 days,\n    # so the daily amount of grass 60 sheep eat is G/24 units/day.\n    # 1 sheep eats (G/24) / 60 = G/1440 units/day.\n\n    # We know that the amount of grass that a horse eats per day\n    # is equal to that 4 sheep eat per day, so we can set up the equation:\n    # G/240 = 4 * (G/1440)\n    # simplifying gives us 1 horse = 4 sheep.\n\n    # Now we have 12 horses and 88 sheep,\n    # in terms of horse equivalents, we have:\n    # 12 horses + 88 sheep * (1 horse / 4 sheep) = 12 + 22 = 34 horses\n\n    # Now we can set up an equation to find out how many days (d) it will take\n    # for 34 horses to eat all the grass if the grass grows g units/day:\n    # 34 horses * (G/240 units/day) * d + g * d = G\n    # Since 20 horses can eat all the grass in 12 days, including the growth,\n    # we can find g:\n    # 20 * (G/240) * 12 + g * 12 = G\n    # Simplifying this gives us g = G/240 units/day\n\n    # Now we have everything we need to solve for d:\n    # 34 * (G/240) * d + (G/240) * d = G\n    # (34 + 1) * (G/240) * d = G\n    # 35 * (G/240) * d = G\n    # 35 * (1/240) * d = 1\n    # d = 240 / 35\n\n    d = 240 / 35\n    \n    return int(d)  # The result should be an integer number of days\n\nans = solution()"
    ],
    "c58c161a2a7e4104a3d8b34ae6e39802": [
        "def solution():\n    distance = 56  # in meters\n    speed = 7  # in meters per minute\n\n    time = distance / speed  # time in minutes\n\n    return time\n\nans = solution()"
    ],
    "1d9a3128b1db4b549effea458b3678b2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(4 * (x - 3) + 6 * x, 28)\n    \n    solution_ = solve(equation, x)\n    \n    return solution_[0]\n\nans = solution()"
    ],
    "f5c39fd451224811bc9f3fa976367ff8": [
        "def solution():\n    result = 18\n    original_number = (result - 7) * 3\n    return original_number\n\nans = solution()"
    ],
    "87f2dc4599dd46e7b4da2d0d59bb29b2": [
        "def solution():\n    # Initialize the smallest possible sum to a large number\n    smallest_sum = float('inf')\n\n    # Factor pairs of 24 and 52\n    factors_24 = [(i, 24 // i) for i in range(1, 25) if 24 % i == 0]\n    factors_52 = [(i, 52 // i) for i in range(1, 53) if 52 % i == 0]\n\n    # Loop through each pair of factors to find common 'B'\n    for a, b1 in factors_24:\n        for b2, c in factors_52:\n            if b1 == b2:  # If common 'B' found\n                current_sum = a + c\n                if current_sum < smallest_sum:\n                    smallest_sum = current_sum\n\n    return smallest_sum\n\nans = solution()"
    ],
    "7b25a6fdbf764009abb3fe46b1451b1f": [
        "def solution():\n    return 1 + (20 - 1) * 2\n\nans = solution()"
    ],
    "1713227e7a80417398659b991525285c": [
        "from math import factorial\n\ndef solution():\n    # Treat A, B, C as one unit and E, F as another unit.\n    # There are 6 units in total which can be arranged in 6! ways.\n\n    # A, B, C can be arranged among themselves in 3! ways.\n    ab_permutations = factorial(3)\n\n    # E, F can be arranged in 2! ways.\n    ef_permutations = factorial(2)\n\n    # The rest of the students (6 - 2 units) can be arranged in 4! ways.\n    other_permutations = factorial(4)\n\n    # Considering that the E and F unit can also switch places with any of the other 4 units:\n    total_permutations = factorial(6) * ab_permutations * ef_permutations\n\n    ans = total_permutations\n    return ans\n\nans = solution()"
    ],
    "c6731b7250a84dddb40920297aeac159": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of scarfs produced each day by Diana, and y be the total number of scarfs she needs to produce.\n    x, y = symbols('x y')\n    \n    # Original plan: 6 days of work, y scarfs\n    equation1 = Eq(6 * x, y)\n    \n    # New plan: \"24 more scarfs per day\", and \"finish 2 days earlier\"\n    equation2 = Eq((6 - 2) * (x + 24), y)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[y]\n\nans = solution()"
    ],
    "53a8834a683e42428e72d56e59ccf186": [
        "def solution():\n    series_sum = sum(range(2, 15, 2))\n    return series_sum\n\nans = solution()"
    ],
    "454de52781254b73adf45135eef41054": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    \n    # initial ratio\n    equation1 = Eq(boys / girls, 5 / 3)\n    # ratio after 15 boys left\n    equation2 = Eq((boys - 15) / girls, 5 / 6)\n    \n    # solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    total_pupils_initially = solutions[boys] + solutions[girls]\n    \n    return total_pupils_initially\n\nans = solution()"
    ],
    "3c337534e32542a2a1408abf3137fc73": [
        "def solution():\n    count = 0\n    for x1 in range(1, 15):\n        for x2 in range(x1 + 1, 15): # x2 is more than x1 to ensure difference\n            for x3 in range(x2 + 1, 15): # x3 is more than x2 to ensure difference\n                if x1 + x2 + x3 == 15:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "08d6f2da7cab499fa7f725364cce9c85": [
        "def solution():\n    sale_price = 114\n    discount_fraction = 1/3\n    original_price = sale_price / (1 - discount_fraction)\n    return original_price\n\nans = solution()"
    ],
    "d709aa3b4d544c198afcabe95e0a6f53": [
        "def solution():\n    # Let x be the number of students\n    # If he gives 6 sweets per student, he falls short by 26, which means:\n    # 6x + 26 = total number of sweets (equation 1)\n    # If he gives 5 sweets per student, he falls short by 5, which means:\n    # 5x + 5 = total number of sweets (equation 2)\n\n    # Both equations are equal to the total number of sweets, so:\n    # 6x + 26 = 5x + 5\n    # Simplify to find x:\n    # x = 5 - 26 = -21\n    # Since the number of students can't be negative, there must be a mistake.\n    # Correct equation should be:\n    # 6x - 26 = total number of sweets\n    # 5x - 5 = total number of sweets\n\n    # Now we can solve for x:\n    # 6x - 26 = 5x - 5\n    x = 26 - 5\n\n    # Now we need to find the total number of sweets, we can use either equation.\n    # Let's use equation 2:\n    # 5x + 5 = total number of sweets\n    total_sweets = 5 * x + 5\n\n    return total_sweets\n\nans = solution()"
    ],
    "1ed9cf1688a143ad9c551e4a3800d10f": [
        "def solution():\n    return 10 * 20 * 30 * 40\n\nans = solution()"
    ],
    "39d04fb6c8704dc88d3f67c6f0d16d16": [
        "def solution():\n    # Shelby's age 5 years ago\n    shelby_age_5_years_ago = 65 - 5\n    # Josh's age 5 years ago\n    josh_age_5_years_ago = (3/5) * shelby_age_5_years_ago\n    # Josh's current age\n    josh_current_age = josh_age_5_years_ago + 5\n    return josh_current_age\n\nans = solution()"
    ],
    "2bf9d0f65e0c410a9060c2958cf95896": [
        "def solution():\n    from sympy import factorint, sqrt\n\n    # Factorize 675 into its prime factors\n    factors = factorint(675)\n    \n    # To make the product a square, each prime factor's exponent must be even.\n    # If a factor's exponent is already even, it's fine;\n    # if it's odd, we multiply by the prime factor to make it even.\n\n    b = 1\n    for prime, exponent in factors.items():\n        if exponent % 2 != 0:\n            b *= prime\n\n    return b\n\nans = solution()"
    ],
    "b50cc1f20ca94e10b645d2097f488894": [
        "def solution():\n    amount = 21.40\n    quarter_amount = amount / 4\n    return quarter_amount\n\nans = solution()"
    ],
    "33ef6b53bcae4073868c3823af12b33b": [
        "def solution():\n    multipack_price = 6.95  # in pounds\n    single_can_price = 65  # in pence\n    total_single_price = 12 * single_can_price  # total price if bought individually, in pence\n    \n    # Since multipack_price is in pounds, convert it to pence by multiplying by 100\n    multipack_price_pence = multipack_price * 100\n    \n    # Calculate the difference in price\n    price_difference = total_single_price - multipack_price_pence\n    \n    return price_difference\n\nans = solution()"
    ],
    "f51139da1a3a4082be80548a0b4d3748": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n\n    equation1 = Eq(3 * apple + banana, 32)\n    equation2 = Eq(6 * apple + banana, 53)\n\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "087f0c0cb6054a9ba715f2fad278b021": [
        "def solution():\n    # Let's denote Adam's weight as A, Ben's as B and Carl's as C.\n    # We have the following three equations:\n    # A + B = 102\n    # B + C = 97\n    # A + C = 93\n    \n    # Let's sum up all three equations:\n    # 2A + 2B + 2C = 102 + 97 + 93\n    total_double = 102 + 97 + 93\n    \n    # Now let's divide the total sum by 2 to get the total weight of Adam, Ben and Carl\n    total_weight = total_double // 2\n\n    return total_weight\n\nans = solution()"
    ],
    "19fe1b137a4c47e4a70b3c03766f0a82": [
        "def solution():\n    return 55 * 80 / 100\n\nans = solution()"
    ],
    "2f235f0788fb43ae81e1809f99c806ca": [
        "def solution():\n    total_stamps = 310\n    singapore_stamps = 172\n    malaysia_stamps = total_stamps - singapore_stamps\n\n    ans = singapore_stamps - malaysia_stamps\n    \n    return ans\n\nans = solution()"
    ],
    "47f9d71bbd1347aea812d6674ed1a0d8": [
        "def solution():\n    # let a be the time Alan would take to paint the room on his own\n    # let b be the time Bob takes to paint the room on his own, which is given as 6 hours\n    # 1/a + 1/b = 1/4 -> the combined rate of Alan and Bob painting the room is 1/4 room per hour\n    # plug in the value of b and solve for a\n\n    b = 6\n    combined_rate = 1/4\n\n    # From the equation 1/a + 1/b = 1/combined_rate, we get:\n    # 1/a = 1/combined_rate - 1/b\n    # So,\n    # a = 1 / (1/combined_rate - 1/b)\n\n    a = 1 / (1/combined_rate - 1/b)\n\n    return a\n\nans = solution()"
    ],
    "536f036013ab4469bca6f5ad12ae6efc": [
        "def solution():\n    count = 0\n    # Check for four digit numbers starting with 3\n    for d1 in range(2, 6): # 3267 to 3999, second digit can be 2, 3, 4, 5\n        for d2 in range(0, 6): # Exclude the digit used in d1\n            for d3 in range(0, 6): # Exclude digits used in d1 and d2\n                # Make sure all digits are unique\n                if len({d1, d2, d3, 3}) == 4:\n                    count += 1\n\n    # Check for four digit numbers starting with 4 and 5\n    for first_digit in [4, 5]:\n        for d1 in range(0, 6): # First digit is known, so we start choosing from 0 to 5\n            for d2 in range(0, 6): # Exclude the digit used in d1\n                for d3 in range(0, 6): # Exclude digits used in d1 and d2\n                    # Make sure all digits are unique\n                    if len({first_digit, d1, d2, d3}) == 4:\n                        count += 1\n\n    # Exclude numbers less than 3267\n    count -= 5 * 4 * 3 # Count numbers between 3200 to 3266\n\n    # Include numbers from 5100 to 5120\n    for d1 in [0, 1, 2]: # Second digit can be 0, 1, or 2\n        for d2 in range(0, 6):\n            if len({5, 1, d1, d2}) == 4: # Make sure all digits are unique\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "6bc35ca24e8a477a8721a3ee646bc624": [
        "def solution():\n    num1 = 10000 + 24\n    num2 = 3000 + 968\n    return num1 + num2\n\nans = solution()"
    ],
    "533857ee1add4235b4509835e79455c4": [
        "def solution():\n    from math import gcd\n    return gcd(84, 108)\n\nans = solution()"
    ],
    "db4169b4944e4cbfbcf68f063aba4c5f": [
        "def solution():\n    principal = 500\n    rate = 0.08\n    time = 10\n\n    # Compound Interest formula A = P(1 + r/n)^(nt)\n    # Since it's compounded yearly, n (the number of times interest applied per time period) is 1.\n    amount = principal * (1 + rate) ** time\n\n    return amount\n\nans = solution()"
    ],
    "098dd57d750645208b9a88bebb06ae3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kim, shaun = symbols('kim shaun')\n    andrew = shaun - 24\n    equation1 = Eq(shaun, 2 * kim)\n    equation2 = Eq(kim + shaun + andrew, 256)\n\n    solutions = solve((equation1, equation2), (kim, shaun))\n\n    return int(solutions[shaun] - 24)\n\nans = solution()"
    ],
    "119cdd759a7d4ca9845f3cc8718b8443": [
        "def solution():\n    weekly_food = 15\n    num_weeks = 26\n\n    total_food = weekly_food * num_weeks\n\n    return total_food\n\nans = solution()"
    ],
    "8ae98f07396b40058f13ac11affb9784": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_score = symbols('original_score')\n    equation = Eq(original_score - 30, (original_score / 2) + 10)\n    solution = solve(equation, original_score)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d5155e4d5ad84669b50a6dc5c2a99d1c": [
        "def solution():\n    for sweets in range(1, 30):\n        if sweets % 3 == 0 and sweets % 2 == 1 and sweets % 4 == 1 and sweets % 5 == 1:\n            return sweets\n\nans = solution()"
    ],
    "d1b3edb622a94a938bdd4deb2c79349e": [
        "def solution():\n    initial_value = 250\n    subtractions = 6 * 6 + 8 * 6\n    ans = initial_value - subtractions\n    return ans\n\nans = solution()"
    ],
    "508b9d97347440a0b80cafeabef4a947": [
        "def solution():\n    total_votes = 120\n    peter_votes = 35\n    other_votes = 22 + 27  # Mark's and Nicole's votes combined\n\n    # To be elected without fail, Peter would need more than half of the total votes\n    votes_needed = (total_votes // 2) + 1\n\n    # If Peter already has more than half of the votes, he needs no more votes\n    # If not, subtract Peter's current votes from the votes needed\n    additional_votes = max(0, votes_needed - peter_votes)\n\n    return additional_votes\n\nans = solution()"
    ],
    "0c1b04af51f742999f2ca9765aedb50d": [
        "def solution():\n    initial_flour = 600\n    flour_left = 21\n    flour_used = initial_flour - flour_left\n    return flour_used\n\nans = solution()"
    ],
    "6195126bb5a54128ab0d4b1902877f4f": [
        "def solution():\n    ans = 12.35 + 8.65 + 9.8 - 2.8\n    return ans\n\nans = solution()"
    ],
    "eea021c591d7400d80e856a767d07752": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial amount of money Alex and Nicholas each have\n    x = symbols('x')\n    \n    # After spending, Alex has x - 58 and Nicholas has x - 13\n    # Nicholas has 6 times the amount of money Alex has\n    equation = Eq(x - 13, 6 * (x - 58))\n    \n    # Solve for x\n    solved_x = solve(equation, x)\n    \n    # Multiply by 2 because both Alex and Nicholas have the same amount\n    return 2 * solved_x[0]\n\nans = solution()"
    ],
    "b57cda394d944362b1e48088868e9f0c": [
        "def solution():\n    days_in_week = 7\n    days_later = 28\n\n    current_day_code = 1  # Since today is Monday\n    days_passed = days_later % days_in_week\n\n    future_day_code = (current_day_code + days_passed) % days_in_week\n\n    # Mapping day codes to the required format\n    days_code_mapping = {\n        0: \"0001\",  # Sunday\n        1: \"0002\",  # Monday\n        2: \"0003\",  # Tuesday\n        3: \"0004\",  # Wednesday\n        4: \"0005\",  # Thursday\n        5: \"0006\",  # Friday\n        6: \"0007\",  # Saturday\n    }\n\n    return days_code_mapping[future_day_code]\n\nans = solution()"
    ],
    "a6b80ec179af453daf8021b9dc7907b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    a = symbols('a')\n    equation = Eq(a**(2/3), 9)\n\n    solutions = solve(equation, a)\n\n    # Since we need a real solution (assuming from the context)\n    ans = max(solutions)\n    \n    return ans\n\nans = solution()"
    ],
    "f475d2f1e6f34559b3da9ca1ce9d31ff": [
        "def solution():\n    result = 52 / (2/3)\n    return result\n\nans = solution()"
    ],
    "507ce61646b54d9d972812acdf557e23": [
        "def solution():\n    road_length = 240\n    interval = 12\n    \n    # Calculate the number of poles based on the intervals excluding the ends\n    num_poles = (road_length - interval) // interval\n    \n    return num_poles\n\nans = solution()"
    ],
    "3c1879332bf54abaa9acb25e23c4e762": [
        "def solution():\n    total_items = 52\n    diff_pencils_rulers = 10\n\n    # Let x be the number of rulers Alison has, therefore:\n    # x + (x + diff_pencils_rulers) = total_items\n    # 2x + diff_pencils_rulers = total_items\n    # 2x = total_items - diff_pencils_rulers\n    # x = (total_items - diff_pencils_rulers) / 2\n    num_rulers = (total_items - diff_pencils_rulers) / 2\n\n    return int(num_rulers)\n\nans = solution()"
    ],
    "9d83d1281e9a4e2db5186517aa7ae8eb": [
        "def solution():\n    # Assuming x is the missing number\n    numbers = [11, 13, 17, 12]\n    total_sum_existing_numbers = sum(numbers)\n    number_of_terms = len(numbers) + 1  # Including x\n    mean_value = 11\n\n    # total_sum = mean_value * number_of_terms\n    # x = total_sum - total_sum_existing_numbers\n    total_sum = mean_value * number_of_terms\n    x = total_sum - total_sum_existing_numbers\n\n    return x\n\nans = solution()"
    ],
    "8f9071448b334615b680eae78ad6d93f": [
        "def solution():\n    cost_per_person = 253 / 11\n    total_cost_for_12 = cost_per_person * 12\n    return total_cost_for_12\n\nans = solution()"
    ],
    "cc51dc96be8d4cb99c8479ff14df80ea": [
        "def solution():\n    # The first 7 is in the thousands place, which means it has a value of 7 * 10^3 = 7000\n    value_first_7 = 7 * 10**3\n\n    # The second 7 is in the tens place, which means it has a value of 7 * 10^1 = 70\n    value_second_7 = 7 * 10**1\n\n    # The difference between the values is 7000 - 70 = 6930\n    ans = value_first_7 - value_second_7\n\n    return ans\n\nans = solution()"
    ],
    "eb0f5add450e4a9ab6a265d98bae439c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Declare symbols for the prices of each dress\n    blue, red, yellow = symbols('blue red yellow')\n\n    # Create the equations based on the given problem\n    equation1 = Eq(blue, 2 * red)                  # Blue dress costs two times as much as red dress\n    equation2 = Eq(yellow, blue + 2.40)            # Yellow dress costs $2.40 more than blue dress\n    equation3 = Eq(blue + red + yellow, 65.40)     # Total cost of all dresses\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (blue, red, yellow))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "a97ee845f64d4f25b71479ba9826754d": [
        "def solution():\n    # Take out all marbles of two colors that do not have 4 marbles.\n    # This ensures the worst case scenario where you still don't have 4 of the same color,\n    # because if you don't have 4 of the same color after taking out 3 yellow and 3 blue,\n    # the next marble must be the 4th of one color (either red, yellow, or blue).\n    \n    red = 13\n    yellow = 10\n    blue = 15\n\n    # Number of marbles to take to ensure 3 of each color is picked (worst case)\n    marbles_needed = (yellow - 1) + (blue - 1) + 1  # minus 1 from yellow and blue, plus 1 for the next pick\n\n    return marbles_needed\n\nans = solution()"
    ],
    "11e835ed8a2649f0b446fa81c9cd3d23": [
        "def solution():\n    boys = 200\n    ratio_boys = 5\n    ratio_girls = 6\n\n    total_ratio = ratio_boys + ratio_girls\n    girls = (ratio_girls / total_ratio) * boys * (total_ratio / ratio_boys)\n\n    return int(girls)\n\nans = solution()"
    ],
    "1f3fc787b72e4079adc614b98529d7df": [
        "def solution():\n    percentage = 15\n    amount = 29\n    ans = (percentage / 100) * amount\n    return ans\n\nans = solution()"
    ],
    "0aa9f0da78114b919761155b61de3f58": [
        "def solution():\n    # Since the decimal expansion of 1/3 is 0.3333... (repeating 3s),\n    # the sum of the first 1000 digits from the right of the decimal\n    # point will be 1000 times the digit 3.\n    digit_sum = 1000 * 3\n    return digit_sum\n\nans = solution()"
    ],
    "ab6dca5c40ee402e956dc70279823b4c": [
        "def solution():\n    cost_of_8_books = 32\n    cost_of_1_book = cost_of_8_books / 8\n    cost_of_12_books = cost_of_1_book * 12\n    return cost_of_12_books\n\nans = solution()"
    ],
    "06a3c4c2e5804a44ace159113da6ba05": [
        "def solution():\n    # Start counting at 2, end at 100, and we are counting by twos\n    start = 2\n    end = 100\n    step = 2\n    \n    # The number of multiples of 2 from 2 to 100 is simply (end - start) / step + 1\n    # We add 1 because we include both the start and end number in our count\n    num_multiples = (end - start) // step + 1\n    \n    return num_multiples\n\nans = solution()"
    ],
    "0b6bdeab9546405d978d1812c7201565": [
        "def solution():\n    return (55 + 13) // 4\n\nans = solution()"
    ],
    "027e7a3d49eb4325a8b4a3460e1cc172": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original concentration in percentage.\n    x = symbols('x')\n    \n    # The concentration of solution after it is added to container A.\n    a_concentration = (10 * x) / (30 + 10)\n    \n    # The concentration of solution after 10 grams are moved to container B.\n    b_concentration = (10 * a_concentration) / (40 + 10)\n    \n    # The concentration of solution after 10 grams are moved to container C.\n    c_concentration = (10 * b_concentration) / (50 + 10)\n    \n    # Equation for the concentration in container C.\n    equation = Eq(c_concentration, 0.5)\n\n    # Solve the equation for x.\n    solution_x = solve(equation, x)\n\n    return round(solution_x[0], 2)\n\nans = solution()"
    ],
    "ec87e304fc2740f28c9d1e303434b7bd": [
        "def solution():\n    fraction = 2 / 5\n    percentage = 35 / 100\n    decimal = 0.604\n\n    ans = fraction + percentage + decimal\n    return ans\n\nans = solution()"
    ],
    "e514e8bc1f604e7584c55c9dca3b2fed": [
        "def solution():\n    total_first_three_days = 33\n    average_last_four_days = 18\n    total_last_four_days = average_last_four_days * 4\n    total_week = total_first_three_days + total_last_four_days\n    average_per_day = total_week / 7\n    return average_per_day\n\nans = solution()"
    ],
    "0297a10276ed45e1aa82953f7cfb5934": [
        "def solution():\n    six_value = 6 * 0.001\n    return six_value\n\nans = solution()"
    ],
    "3af1e296b55d48b081f32a1a006667ef": [
        "def solution():\n    import math\n    \n    # Calculate ways to arrange 4 entities (3 individual people + 1 pair)\n    arrangements_with_pair = math.factorial(4)\n    \n    # Calculate ways to arrange the pair itself (2 people)\n    pair_arrangements = math.factorial(2)\n    \n    # Total arrangements is the product of the two\n    total_arrangements = arrangements_with_pair * pair_arrangements\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "de0d981643f2427f8f190ba70891f0a6": [
        "def solution():\n    midpoint = (-3 + 8) / 2\n    return midpoint\n\nans = solution()"
    ],
    "31aa53351e2b49aab72bde2d7ea3c1a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(9 - (x + 3), 1)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "144a37458618498d8c19e53cf5ec0049": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize the age products of both years\n    factors_2016 = factorint(2016)\n    factors_1377 = factorint(1377)\n\n    # Find common factors and calculate the individual ages\n    ages = []\n    for prime in factors_1377:\n        count_in_2016 = factors_2016.get(prime, 0)\n        count_in_1377 = factors_1377[prime]\n        age = prime ** min(count_in_2016, count_in_1377)\n        if age > 1:  # We sort the ages out to find each cousins' age correctly\n            ages.append(age)\n\n    ages.sort()\n    youngest_age = ages[0] - 2  # Subtract 2 years for 2 years ago\n    middle_age = ages[1] - 2\n    oldest_age = ages[2] - 2\n\n    # Calculate the product of ages from two years ago\n    two_years_ago_product = youngest_age * middle_age * oldest_age\n\n    return two_years_ago_product\n\nans = solution()"
    ],
    "4ecf6dfe09074d81b2c8e57fe42c031f": [
        "def solution():\n    weight_metal1 = 12\n    nickel_percentage1 = 40\n    weight_metal2 = 13\n    nickel_percentage2 = 60\n\n    total_nickel = (weight_metal1 * nickel_percentage1 / 100) + (weight_metal2 * nickel_percentage2 / 100)\n    total_weight = weight_metal1 + weight_metal2\n\n    nickel_concentration = (total_nickel / total_weight) * 100\n\n    return nickel_concentration\n\nans = solution()"
    ],
    "ffb4fa57b0eb47ffb07fa2c7f49ef9f4": [
        "def solution():\n    return 15 * 7\n\nans = solution()"
    ],
    "f8b94a6a82c7406a83b47ec788b92ca2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original number of chickens in each pen\n    # Let y be the total number of chickens\n    x, y = symbols('x y')\n\n    # Original situation: y = 24 * x\n    # New situation: y = (24 + 6) * (x - 6)\n    equation1 = Eq(y, 24 * x)\n    equation2 = Eq(y, (24 + 6) * (x - 6))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "be0945399c6b4d0dba2ad2baaabb31ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol n, which represents the last number in the sequence\n    n = symbols('n', integer=True, positive=True)\n\n    # The correct sum of an arithmetic sequence from 1 to n is given by the formula n(n+1)/2\n    correct_sum = n*(n+1)/2\n\n    # Set up an equation where the correct sum plus the duplicated number equals 3405\n    equation = Eq(correct_sum + n, 3405)\n\n    # Solve for n\n    duplicated_number = solve(equation, n)\n\n    # We want the positive solution since we're dealing with a sum of natural numbers\n    ans = [num for num in duplicated_number if num.is_real and num > 0][0]\n    \n    return ans\n\nans = solution()"
    ],
    "221781af3d4444f881f99b112ffa3aa3": [
        "def solution():\n    remainder = 3\n    possible_values = set()\n    \n    for divisor in range(1, 40):\n        for quotient in range(1, 40):\n            dividend = divisor * quotient + remainder\n            if divisor + dividend + quotient + remainder == 40:\n                possible_values.add(dividend / quotient)\n    \n    ans = len(possible_values)\n    return ans\n\nans = solution()"
    ],
    "13aecb4038e84ceeb7586defdcee7f3d": [
        "def solution():\n    total_math_club = 146 + 94\n    history_to_math_ratio = 7 / 8\n    total_history_club = total_math_club * history_to_math_ratio\n    return int(total_history_club)\n\nans = solution()"
    ],
    "5fd6b39e9b3a49549d8336ce20856f59": [
        "def solution():\n    # Given sum of the first 6 terms (S6) is 64 and sum of the first 12 terms (S12) is 156\n    S6 = 64\n    S12 = 156\n    \n    # The nth sum of an arithmetic sequence can be calculated by: S_n = n/2 * (a1 + an),\n    # where a1 is the first term and an is the nth term.\n    # Now, we have two equations based on the given sums:\n    # S_6 = 6/2 * (a1 + a6)  -> (1)\n    # S_12 = 12/2 * (a1 + a12)  -> (2)\n    \n    # From equation (1), we can extract a6:\n    # a6 = (S6 / 3) - a1  -> (3)\n    \n    # And from equation (2), we can extract a12:\n    # a12 = (S12 / 6) - a1  -> (4)\n    \n    # We know that a12 is a6 plus 6*d, where d is the common difference.\n    # So, a12 = a6 + 6*d  -> (5)\n    \n    # Substitute a12 from equation (5) to (4):\n    # a6 + 6*d = (S12 / 6) - a1  -> (6)\n    \n    # Substitute a6 from (3) to (6):\n    # (S6 / 3) - a1 + 6*d = (S12 / 6) - a1\n    # 6*d = (S12 / 6) - (S6 / 3)\n    \n    # Solve for the common difference (d):\n    d = ((S12 / 6) - (S6 / 3)) / 6\n    \n    # Now, we need to find the first term (a1).\n    # Substitute d back into (3):\n    # a6 = (S6 / 3) - a1\n    a1 = (S6 / 3) - d\n    \n    # Finally, we can find the sum of the first 18 terms (S18):\n    # S18 = 18/2 * (a1 + a18)\n    # a18 is a1 plus 17*d\n    a18 = a1 + 17 * d\n    S18 = 9 * (a1 + a18)\n    \n    return S18\n\nans = solution()"
    ],
    "758d557365b6402ba3525678e7c085b7": [
        "def solution():\n    # reversing the digits of the numbers\n    # 729 becomes 927 and 26 becomes 62\n    # perform the subtraction\n    answer = 927 - 62\n    \n    # reverse Pluto's answer to get it in Zog's format\n    reversed_answer = int(str(answer)[::-1])\n    \n    # return the answer in Zog's format\n    return reversed_answer\n\nans = solution()"
    ],
    "0f19ecaf9e6a4a268a28394ccf10d38e": [
        "def solution():\n    return 312 + 9\n\nans = solution()"
    ],
    "cbad92babc7144ffa95f44fbcc74faa1": [
        "网络故障，请重试"
    ],
    "4c066587422f44769fef6ac62ea2a629": [
        "def solution():\n    ashley_age = 10\n    years_ago = 3\n    ashley_past_age = ashley_age - years_ago\n    brother_past_age = ashley_past_age - 2\n    \n    brother_current_age = brother_past_age + years_ago\n    return brother_current_age\n\nans = solution()"
    ],
    "ddbda2b526d94447986b592f33c0b725": [
        "def solution():\n    train_length = 160\n    time_to_pass = 30\n    train_speed = 20\n\n    # Distance travelled by the train to completely pass the bridge\n    distance_travelled = train_speed * time_to_pass\n\n    # Length of the bridge\n    bridge_length = distance_travelled - train_length\n\n    return bridge_length\n\nans = solution()"
    ],
    "4f44a87fc2ed45138614656e0d4cdc2e": [
        "def solution():\n    emily_score = 30\n    hebe_percentage = 60\n    total_marks = 60\n    hebe_score = (hebe_percentage / 100) * total_marks\n    difference = hebe_score - emily_score\n    return difference\n\nans = solution()"
    ],
    "e7b83b9b5e1e45ebbe58b8753935aa52": [
        "def solution():\n    ans = 0.23 + 1.9 + 0.083\n    return ans\n\nans = solution()"
    ],
    "92633a5c2d4045258377b67eb7914f16": [
        "def solution():\n    # Calculate the jogging distance\n    jogging_time = 0.5 # Time from 6:30 to 7:00 is 0.5 hours\n    jogging_speed = 9 # Jogging speed in km per hour\n    jogging_distance = jogging_speed * jogging_time\n\n    # Calculate the walking distance\n    walking_time = 1 # Time from 7:00 to 8:00 is 1 hour\n    walking_speed = 7.5 # Walking speed in km per hour\n    walking_distance = walking_speed * walking_time\n\n    # Sum the total distance\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "c17e0a2b113d46b781b7f26e782fd14f": [
        "def solution():\n    # In a single round-robin tournament, each player plays against every other player exactly once.\n    # Since there are 8 players, each player plays 7 games.\n    # Because everyone scores a different number of wins, and there are no ties,\n    # the possible number of wins are distinct integers from 0 to 7.\n    # Since we are looking for the number of wins of the champion, it will be the maximum number of wins,\n    # which is 7 in this case.\n    return 7\n\nans = solution()"
    ],
    "c3bbf6f074774feb9ff7aa22e47b31ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wins, losses = symbols('wins losses')\n\n    equation1 = Eq(wins, 2 * losses)\n    equation2 = Eq(wins + losses, 63)\n\n    solutions = solve((equation1, equation2), (wins, losses))\n\n    return solutions[losses]\n\nans = solution()"
    ],
    "54dfc5bdf157460ba47b99d87cd73558": [
        "def solution():\n    common_factor = 13\n    difference = 55 - 44\n    ans = common_factor * difference\n    return ans\n\nans = solution()"
    ],
    "9bba3d6fb8a24e63b64427cf2f150104": [
        "def solution():\n    # For a three-digit number, the first place can be occupied by either 3 or 4 (2 options),\n    # because it cannot be 0 (which would make it a two-digit number)\n    # The second and the third place can be occupied by 0, 3, or 4 (3 options each)\n    first_digit_options = 2\n    second_digit_options = 3\n    third_digit_options = 3\n    \n    # The total number of different numbers is the product of the options for each digit\n    total_numbers = first_digit_options * second_digit_options * third_digit_options\n    \n    return total_numbers\n\nans = solution()"
    ],
    "bdce3fe10c474df4a19293921b1f972c": [
        "def solution():\n    return 3647 // 7\n\nans = solution()"
    ],
    "56e620f09fd54f8c8dc2fe4e97e4c388": [
        "def solution():\n    ans = 9 - 8 + 7 - 6 + 5 - 4 + 3 - 2 + 1\n    return ans\n\nans = solution()"
    ],
    "6791440725654626ab51c36b9e94af1d": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 7 == 4 and num % 8 == 4 and num % 9 == 4:\n            return num\n\nans = solution()"
    ],
    "a9d8b165410c4c1bb74c1c179cf2b128": [
        "def solution():\n    # Area of a equilateral triangle = (sqrt(3) / 4) * (side length)^2\n    from math import sqrt\n    \n    # Calculate the area of Triangle X\n    area_X = (sqrt(3) / 4) * (3 ** 2)\n    \n    # Calculate the area of Triangle Y\n    area_Y = (sqrt(3) / 4) * (9 ** 2)\n    \n    # Calculate how many times Triangle X fits into Triangle Y\n    times_fits = area_Y / area_X\n    \n    return int(times_fits)\n\nans = solution()"
    ],
    "d32cc1f9d4b249a0a64ad0610aee08f4": [
        "def solution():\n    from sympy import solve, symbols\n\n    x = symbols('x')\n    total_spent = 5 * x * 12 + 3 * x * 5\n\n    expr = total_spent - 120\n    value_of_x = solve(expr, x)\n\n    return value_of_x[0]\n\nans = solution()"
    ],
    "3a1e525fd69d41e8bdcd18e39e142f01": [
        "def solution():\n    from math import factorial\n\n    # Calculate the possible positions for the girls as a single unit\n    # We have (3 teachers + 1 group of girls + 4 spaces to place 3 boys) positions for the girls\n    # Which is equivalent to 8 positions\n    pos_girls = factorial(8)\n\n    # Calculate permutations within the group of girls\n    perm_girls = factorial(3)\n\n    # The boys cannot stand next to each other, so in between the teachers and/or the girls\n    # there are 4 spaces for the 3 boys, so we use permutations of placement as well\n    pos_boys = factorial(4) // factorial(4 - 3)\n\n    # Calculate the permutations of the teachers, as they can be in any order\n    perm_teachers = factorial(3)\n\n    # The final count is the product of all the possibilities\n    return pos_girls * perm_girls * pos_boys * perm_teachers\n\nans = solution()"
    ],
    "0877713fe19e4645ba3e7db233f47117": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's use c for the number of cows and g for the number of goats\n    c, g = symbols('c g')\n\n    # If 65% of the animals were cows, then (100 - 65%) are goats\n    equation1 = Eq(c, 0.65 * (c + g))\n\n    # When 240 more animals were added, the number of goats doubled\n    equation2 = Eq(g * 2, g + 240)\n\n    # The percentage of cows increased by 20% (from 65% to 85%), meaning there were 85% cows after the addition\n    equation3 = Eq(c + 240, 0.85 * (c + g + 240))\n\n    # Now solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (c, g))\n\n    # We want the initial number of goats, so we return g\n    return solutions[g]\n\nans = solution()"
    ],
    "78fdc8747f5a4d3aabce52d5e041f78f": [
        "from math import comb\n\ndef solution():\n    total_students = 5\n    students_to_choose = 2\n\n    ans = comb(total_students, students_to_choose)\n\n    return ans\n\nans = solution()"
    ],
    "1e0501ed2b454e8abdc227085d3243e5": [
        "def solution():\n    larger_number = 8 * 9 * 10\n    smaller_number = 1 * 2 * 3\n    ans = larger_number - smaller_number\n    return ans\n\nans = solution()"
    ],
    "22bdbf51eef54f7ab3652064b38ab235": [
        "def solution():\n    bouquets = 30\n    roses_per_bouquet = 9\n    total_roses = bouquets * roses_per_bouquet\n    return total_roses\n\nans = solution()"
    ],
    "960bdf3b8c724781b3eb3607d3f03609": [
        "def solution():\n    appetisers = 2\n    main_courses = 3\n    soup = 2  # 1 soup + 1 option to not choose the soup\n    desserts = 3  # 2 desserts + 1 option to not choose the dessert\n\n    combinations = appetisers * main_courses * soup * desserts\n\n    return combinations\n\nans = solution()"
    ],
    "cfe05c3227c9427eadd085e9de47f044": [
        "def solution():\n    first_term = 6\n    difference = 5\n    last_term = 41\n    \n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n    \n    return sum_of_terms\n\nans = solution()"
    ],
    "65fe506e0c914a8c89a3851368d52567": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Using the Chinese Remainder Theorem for the system of congruences:\n    # x ≡ -3 (mod 8)\n    # x ≡ -1 (mod 9)\n    # The above is equivalent to:\n    # x ≡ 5 (mod 8)\n    # x ≡ 8 (mod 9)\n    \n    # We can use the given knowledge point routes to solve this problem with these equations\n    \n    congruences = ((5, 8), (8, 9))\n    x = solve_congruence(*congruences)\n    \n    # Now, find the number of children within the given range (100 to 200)\n    num_children = next(filter(lambda n: 100 <= n < 200, map(lambda i: x[0] + i*x[1], range(100 // x[1] + 1))))\n    \n    return num_children\n\nans = solution()"
    ],
    "9bb456e92cbe4dd58a5b0ef6f7f77fc4": [
        "def solution():\n    from sympy import Symbol, Eq, solve\n\n    # x is the number of blue balls\n    x = Symbol('x', integer=True, positive=True)\n    \n    # There are 4 red balls, the probability of drawing 2 red balls without replacement is 2/7\n    # This probability is equal to drawing the first red ball times the probability of drawing the second red ball\n    # 4/total * 3/(total - 1) = 2/7\n    total_balls = x + 4\n    probability = (4/total_balls) * (3/(total_balls - 1))\n\n    # Solve for x where the probability is equal to 2/7\n    equation = Eq(probability, 2/7)\n    blue_balls = solve(equation, x)\n\n    return blue_balls[0]  # only one positive integer solution is expected\n\nans = solution()"
    ],
    "08a17429c2dc42c9b5df787d8fb4954e": [
        "def solution():\n    # fractions_left represent the fraction of cake left after giving away 2 slices and having 4 slices left\n    fractions_left = 2 + 4\n    # total_fraction represents the total fraction of the cake that was not eaten, including the slices given away and left\n    total_fraction = (2 / 3) * 5\n    # initial_slices represents the original total number of slices\n    initial_slices = fractions_left / (total_fraction / 5)\n    \n    return initial_slices\n\nans = solution()"
    ],
    "3aa12de14bc74a3ba901fd2b6e1a45e0": [
        "def solution():\n    from math import factorial\n\n    # 2^27 can be represented by nine 2s and three 3s.\n    # There are a total of 12 digits to arrange in 10 places, with repetition of 2s and 3s.\n    # Calculate the possible arrangements using the multinomial coefficient formula.\n    total_digits = 9 + 3  # total number of 2s and 3s\n    count_2s = 9  # number of 2s\n    count_3s = 3  # number of 3s\n    \n    # Using the formula for multinomial coefficients: total! / (count_2s! * count_3s!)\n    arrangements = factorial(total_digits) // (factorial(count_2s) * factorial(count_3s))\n    \n    return arrangements\n\nans = solution()"
    ],
    "2c300804986d4690a8ea13da0f77fd40": [
        "def solution():\n    rabbit_weight = 2  # since 1 rabbit is equal to 2 chickens\n    dog_weight = 8  # since 1 dog is equal to 8 rabbits\n\n    # The weight of the dog in terms of chickens\n    dog_in_chickens = dog_weight * rabbit_weight\n    return dog_in_chickens\n\nans = solution()"
    ],
    "7e303a81959f4dd3a8821c03daae5549": [
        "def solution():\n    result = 51 + 50 - 45 + 40 - 35 + 30 - 25 + 20 - 15\n    return result\n\nans = solution()"
    ],
    "6a7086b44acb47afbeb35af00a141b68": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mike, danny = symbols('mike danny')\n\n    # Mike and Danny working together\n    equation1 = Eq(1/mike + 1/danny, 1/10)\n\n    # Mike works for 8 hours then Danny for 13 hours\n    equation2 = Eq(8/mike + 13/danny, 1)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (mike, danny))\n\n    # Return the time it takes for Danny to finish the job by himself\n    return solutions[danny]\n\nans = solution()"
    ],
    "807f47199e524c889e2cda11d4b6aedd": [
        "def solution():\n    pencils = 7\n    pencil_cases = 2\n    min_pencils_in_one_case = (pencils + pencil_cases - 1) // pencil_cases\n    return min_pencils_in_one_case\n\nans = solution()"
    ],
    "346ccc5e74434ee687f8c2396be87095": [
        "def solution():\n    place_value_1 = 3 * 10**2  # 3 in the hundreds place\n    place_value_2 = 3 * 10**5  # 3 in the hundred-thousands place\n    difference = abs(place_value_2 - place_value_1)\n    return difference\n\nans = solution()"
    ],
    "5a9cac73f017480d9c49cfcbd2b7a15a": [
        "def solution():\n    def custom_op(a, b):\n        return sum(a + i for i in range(b + 1))\n\n    for m in range(66):\n        if custom_op(m, 10) == 66:\n            return m\n\nans = solution()"
    ],
    "5f8547cf000a40589c011a253c103568": [
        "def solution():\n    side_length = 54\n    spacing = 3\n    # Since chess pieces are placed on the corners, we subtract the spacing once from each side to prevent overcounting.\n    # The number of chess pieces on one side is the side length divided by the spacing, plus one for the corner.\n    pieces_per_side = (side_length - spacing) // spacing + 1\n    # There are four sides, but we need to subtract the four corners to prevent overcounting\n    # as they are included in the count for two sides.\n    total_pieces = 4 * pieces_per_side - 4\n    return total_pieces\n\nans = solution()"
    ],
    "84c34602d0aa4900966c5a8ceeee71d3": [
        "def solution():\n    initial_money = 10\n    spent_money = 2.89\n    father_gave = 4/5\n\n    remaining_money = initial_money - spent_money + father_gave\n    return remaining_money\n\nans = solution()"
    ],
    "a19b145685704a7fb1edf952d6f61f0d": [
        "def solution():\n    for i in range(100):\n        num = int(f\"{i:02d}\" * 2)\n        if (num**0.5).is_integer():\n            return num\n\nans = solution()"
    ],
    "507fbe69eeb341c4a1e466db8bc07b00": [
        "def solution():\n    first_term = 50\n    common_difference = -4\n    \n    # The formula for the nth term of an arithmetic sequence is: \n    # a_n = a_1 + (n - 1) * d\n    # We want to find n such that a_n < 0\n    # 0 > 50 + (n - 1) * (-4)\n    # (n - 1) * 4 > 50\n    # n - 1 > 12.5\n    # n > 13.5\n    # Since n must be an integer, the smallest integer greater than 13.5 is 14\n    \n    return 14\n\nans = solution()"
    ],
    "a6143a5df73447d390e4a2025ba6b232": [
        "from itertools import combinations_with_replacement\n\ndef solution():\n    min_red_squares = float('inf')  # Placeholder for the minimum red squares\n\n    # Iterate over the combinations with replacement for 10 digits\n    for combination in combinations_with_replacement(range(10), 100):\n        red_count = sum(1 for digit in set(combination) if combination.count(digit) >= 5)\n        min_red_squares = min(min_red_squares, red_count * 5)\n\n    return min_red_squares\n\nans = solution()"
    ],
    "03819e32406b409c97adc853ab0849b7": [
        "def solution():\n    m = 7\n    result = (3 * m) - 1 + m\n    return result\n\nans = solution()"
    ],
    "b00453f28a704896a9c2914acfc85c84": [
        "def solution():\n    factor_2 = 0\n    factor_5 = 0\n    n = 1\n    \n    while True:\n        # Count the factors of 2 and 5 in n\n        temp = n\n        while temp % 2 == 0:\n            factor_2 += 1\n            temp //= 2\n        while temp % 5 == 0:\n            factor_5 += 1\n            temp //= 5\n        \n        # The number of zeros is determined by the minimum of factor_2 and factor_5\n        # because 10 = 2 * 5\n        if min(factor_2, factor_5) >= 28:\n            break\n        n += 1\n    \n    # The largest value of n when the product has at least twenty-eight consecutive zeros\n    ans = n\n    return ans\n\nans = solution()"
    ],
    "87f0754be1e1426ea4912fd9aa134e2f": [
        "def solution():\n    return 6 - (-4.226)\n\nans = solution()"
    ],
    "622d8f504b0b4e3c833da2860ca06ea3": [
        "def solution():\n    total_distance = 780\n    remaining_distance = 130\n    tim_speed = 56\n    bob_speed = 74\n\n    # They are moving towards each other so their relative speed is the sum of their speeds\n    relative_speed = tim_speed + bob_speed\n\n    # The distance they covered until they are 130 km apart\n    distance_covered = total_distance - remaining_distance\n\n    # The time it took to cover the distance at their relative speed\n    time_driven = distance_covered / relative_speed\n\n    return time_driven\n\nans = solution()"
    ],
    "97280eb5e85b48fa922958bc7829aeeb": [
        "def solution():\n    total_distance = 11\n    climb_per_day = 3\n    slide_per_night = 1\n    net_distance_per_day = climb_per_day - slide_per_night\n    distance_before_final_day = total_distance - climb_per_day\n    days = (distance_before_final_day + net_distance_per_day - 1) // net_distance_per_day\n    return days + 1\n\nans = solution()"
    ],
    "2c9ba88b14dd492eae6b7ec023369d1e": [
        "def solution():\n    mean_of_numbers = 5\n    total_sum = mean_of_numbers * 5  # total sum of 5 numbers with mean 5\n\n    sum_of_four_numbers = 3 + 4 + 6 + 10\n    fifth_number = total_sum - sum_of_four_numbers\n\n    return fifth_number\n\nans = solution()"
    ],
    "3602d25562874d41ab24c4341b12f630": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n    \n    ans = tens + tenths + hundredths\n    \n    return ans\n\nans = solution()"
    ],
    "42a62ad1ebd04b199cb34ac6b189a7bb": [
        "def solution():\n    from math import lcm\n    # Least number of days it will take all three of them to meet again\n    return lcm(4, 7, 8)\n\nans = solution()"
    ],
    "cf4b67b2b09544679e877f2476cc1898": [
        "def solution():\n    from itertools import permutations\n\n    lucky_years = 0\n    for year in range(1000, 2023):\n        digits = set(str(year))\n        if len(digits) == 4:\n            if all(int(d2) - int(d1) == 1 for d1, d2 in zip(sorted(digits), sorted(digits)[1:])):\n                lucky_years += len(set(permutations(digits, 4)))\n    return lucky_years\n\nans = solution()"
    ],
    "711c6d212b6b410f988c3dbe25973b9f": [
        "def solution():\n    # The sequence of digits in the decimal part repeats every 3 digits, which is 835.\n    sequence = '8354'\n    sequence_sum = sum(int(digit) for digit in sequence)\n    \n    # Calculate how many complete sequences of 4 digits are there in 84 digits\n    complete_sequences = 84 // len(sequence)\n    \n    # Calculate the remainder digits that doesn't complete a sequence\n    remaining_digits = 84 % len(sequence)\n    \n    # Calculate the sum for complete sequences\n    complete_sum = complete_sequences * sequence_sum\n    \n    # Calculate the sum for the remaining digits\n    remaining_sum = sum(int(sequence[i]) for i in range(remaining_digits))\n    \n    # The total sum is the sum of complete sequences plus the remaining sum\n    total_sum = complete_sum + remaining_sum\n    \n    return total_sum\n\nans = solution()"
    ],
    "5c06e51a661b48fe8fa86f66e6eee9fa": [
        "def solution():\n    return 56 * 23\n\nans = solution()"
    ],
    "9aaa074a8d0943d59386b629100a1142": [
        "def solution():\n    total_distance = 15 + 10 + 8\n    number_of_people = 3\n    average_distance = total_distance / number_of_people\n    return average_distance\n\nans = solution()"
    ],
    "e3e88b3c7611487d98b4ad69c6e41428": [
        "def solution():\n    total_cost = 104.10\n    num_people = 6\n\n    cost_per_person = total_cost / num_people\n\n    return cost_per_person\n\nans = solution()"
    ],
    "b7bc6562b2cd42848b4c261eea8d443b": [
        "def solution():\n    # time for each interval between strikes\n    interval_time = (43 - 6 * 3) / (6 - 1)\n    # total time for 12 strikes\n    total_time = 12 * 3 + interval_time * (12 - 1)\n    return total_time\n\nans = solution()"
    ],
    "a6ad322655a94a94b6a34e6b8951731a": [
        "def solution():\n    ans = 53 * 58\n    return ans\n\nans = solution()"
    ],
    "0786a0cfe2bd43a9ac1c176d78e73a19": [
        "def solution():\n    total_hours = 15\n    total_people = 6\n    target_hours = 2\n\n    work_rate = total_people / total_hours\n    required_people = work_rate * target_hours\n\n    return int(required_people)\n\nans = solution()"
    ],
    "3ba3be708b874b10bc32437342966dfb": [
        "from math import factorial\n\ndef solution():\n    def nCr(n, r):\n        return factorial(n) // (factorial(r) * factorial(n - r))\n    \n    # We use the \"Stars and Bars\" theorem. We have 20 - 1 stars (pens) and 6 - 1 bars (divisions) to place.\n    # This is because we give 1 pen to each kid beforehand, ensuring each gets at least one.\n    # Now we have 19 stars and 5 bars. The number of ways to arrange these is (19 + 5) choose 5.\n    ans = nCr(19 + 5, 5)\n    return ans\n\nans = solution()"
    ],
    "02858fb0c1d7495998f805b27ff5ac13": [
        "def solution():\n    # Time taken for one quiz\n    time_per_quiz_minutes = 30\n    # Number of quizzes\n    quizzes = 4\n    # Total time for 4 quizzes in minutes\n    total_time_minutes = time_per_quiz_minutes * quizzes\n    # Convert total time from minutes to hours\n    total_time_hours = total_time_minutes / 60\n    return total_time_hours\n\nans = solution()"
    ],
    "91978558dacc4505ac4e35d145f8108b": [
        "def solution():\n    # We are looking for m and n such that m*m + 5 and (m*m + 5) + 18 are both perfect squares.\n    # We will repeatedly increase m (starting from 1), and check if the above conditions are satisfied.\n    m = 1\n    while True:\n        original_group = m**2 + 5  # Original number of students\n        new_group = original_group + 18  # Number of students after adding 18\n        if (original_group**0.5).is_integer() and (new_group**0.5).is_integer():\n            return original_group - 5  # Subtract 5 to get the initial number of students before forming the m*m square\n        m += 1\n\nans = solution()"
    ],
    "ec04407fbdb64de19ace6733c3919a43": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10  # Numbers from 100 to 999 (leading digit can't be zero)\n    non_zero_three_digit_numbers = 9 * 9 * 8  # No zero in any position (9 options for the first digit, then 9 and 8 for the second and third, respectively)\n    \n    numbers_with_at_least_one_zero = total_three_digit_numbers - non_zero_three_digit_numbers\n    \n    return numbers_with_at_least_one_zero\n\nans = solution()"
    ],
    "bb26e8a364284f6d9f8d709ca1f345a8": [
        "def solution():\n    for number in range(100, 201):\n        if all([number % 3 == 1, number % 4 == 1, number % 5 == 1, number % 7 == 2]):\n            return number\n\nans = solution()"
    ],
    "612916c7c6464d37b5bdb4a7f7365e62": [
        "def solution():\n    red_marbles = 45\n    blue_marbles = 4 * red_marbles\n    \n    total_marbles = red_marbles + blue_marbles\n    \n    return total_marbles\n\nans = solution()"
    ],
    "86f2b7935f1d47b099995c9ad98cd1d0": [
        "def solution():\n    mass = 0.10  # mass of the ball in kilograms\n    speed = 30  # speed of the ball in meters per second\n    \n    # The formula for kinetic energy is KE = 1/2 * mass * speed^2\n    kinetic_energy = 0.5 * mass * speed**2\n    \n    return kinetic_energy\n\nans = solution()"
    ],
    "4398b5072c214118a4d7e606b9c7f7dd": [
        "def solution():\n    first_term = 58\n    common_difference = 51 - 58\n    n = 7\n    nth_term = first_term + (n - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "1efc8331490f402c8a2dc98af0eb69e8": [
        "def solution():\n    for x in range(100, 300):\n        if x % 5 == 2 and x % 6 == 2 and x % 7 == 2:\n            return x\n\nans = solution()"
    ],
    "57bf99419fd84ddf891e49e75324f73f": [
        "def solution():\n    total_length = 99\n    cuts = 8\n    pieces = cuts + 1  # One more piece than the number of cuts\n    length_per_piece = total_length / pieces\n\n    return length_per_piece\n\nans = solution()"
    ],
    "163aa773f4d845c8a2f2ed208a8950fb": [
        "def solution():\n    total_distance = 225\n    kevin_to_jerry_speed_ratio = 1.5\n    jerry_speed_ratio = 1 / (1 + kevin_to_jerry_speed_ratio)\n\n    jerry_distance = total_distance * jerry_speed_ratio\n\n    return jerry_distance\n\nans = solution()"
    ],
    "2b3f02a0fa7248d58cf401ab102a597d": [
        "def solution():\n    wall_width = 4800\n    picture_width = 210\n    number_of_pictures = 10\n    space_between_pictures = (wall_width - number_of_pictures * picture_width) / (number_of_pictures - 1)\n    distance_from_center = (1.5 * picture_width) + (space_between_pictures / 2)\n    return distance_from_center\n\nans = solution()"
    ],
    "8164105a2885459cbe6f0149d5f46883": [
        "def solution():\n    initial_height = 1  # We can assume any initial height, using 1 for simplicity\n    bounce_height = initial_height * 0.75\n    count_bounces = 0\n\n    while bounce_height >= initial_height * 0.25:\n        count_bounces += 1\n        bounce_height *= 0.75\n    \n    return count_bounces\n\nans = solution()"
    ],
    "e8ce7a71a9c94b3d8ba599db217353fb": [
        "def solution():\n    # The smallest 4-digit number is 1000, \n    # so we start with the thousand's place as 1\n\n    # The greatest odd number for the one's place is 9\n    ones = 9\n\n    # The hundreds and tens place digits must add up to 13\n    # To minimize the number, we should make the hundreds place as small as possible\n    # The smallest number we can pick is 1, since the thousands place already has a 1\n    # But they must be different, so we choose 2\n    # Then the ten's place would be 13 - 2 = 11\n    # But 11 is not a valid digit, therefore we try with the next smallest number for hundred's place\n    for hundreds in range(1, 10):  # The loop starts from 1 since 0 cannot be in hundred's place\n        tens = 13 - hundreds\n        if tens < 10 and tens != ones and tens != hundreds and hundreds != ones:  # Check for valid digit (under 10) and not equal to ones, checks hundred's not equal to ones\n            break\n\n    # The digit in the thousand's place is 1, which is already unique and smallest possible\n    thousands = 1\n\n    # Join all digits to form the number\n    ans = int(f\"{thousands}{hundreds}{tens}{ones}\")\n    \n    return ans\n\nans = solution()"
    ],
    "46cd8353df274c078e2fd68b250e0da1": [
        "def solution():\n    sequence = [5, 8, 11, 14, 17, 20]\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "00f1d5cbd249489fa41dae6e52599fbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(2*x + 3*x + 2, 30 + 6*x - 8*x)\n\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "14006e4edc6c498b925dff66addea986": [
        "def solution():\n    return 597 * 63\n\nans = solution()"
    ],
    "b909d93696cf47d0b8ed0c83e74aa63a": [
        "def solution():\n    doris_age = 10\n    uncle_age_future = 40\n    doris_future_age = uncle_age_future\n    age_difference = doris_future_age - doris_age\n    uncle_age = age_difference + doris_age\n\n    return uncle_age\n\nans = solution()"
    ],
    "0483752c6a204f15aacda3ff94327d0f": [
        "def solution():\n    interest = 225\n    interest_rate = 2.25 / 100\n\n    principal = interest / interest_rate\n\n    return principal\n\nans = solution()"
    ],
    "798223ee8f80484e91a8451484c51727": [
        "def solution():\n    return (20 - 5) - 1\n\nans = solution()"
    ],
    "ca1376e41d4341c39abc294ee9b4d9bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for price of a banana and an apple\n    banana, apple = symbols('banana apple')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(2 * banana + 3 * apple, 1.50)\n    equation2 = Eq(3 * banana + 2 * apple, 1.45)\n    \n    # Solve the system of equations\n    solution_prices = solve((equation1, equation2), (banana, apple))\n    \n    # Find the price paid by Annabella for 1 banana and 1 apple\n    annabella_paid = solution_prices[banana] + solution_prices[apple]\n    \n    return float(annabella_paid)\n\nans = solution()"
    ],
    "501cf0e0bdee491db50baa99ff69b1b7": [
        "def solution():\n    for number in range(1, 16):\n        if 5 + number < 8 and 8 + (5 + number - 8) == 15:\n            return number\n    return -1  # If no valid number found, which should not happen given the problem statement\n\nans = solution()"
    ],
    "88e0c7d77835428bbe187450a89fd57e": [
        "def solution():\n    ans = 1348 - 234 - 76 + 2234 - 48 - 24\n    return ans\n\nans = solution()"
    ],
    "622e2b8da7ee4f1fb4f317c991b75767": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    amanda, belinda, lisa = symbols('amanda belinda lisa')\n    \n    equation1 = Eq(amanda, 4 * belinda)\n    equation2 = Eq(lisa, amanda - 11)\n    equation3 = Eq(amanda + belinda + lisa, 43)\n    \n    solutions = solve((equation1, equation2, equation3), (amanda, belinda, lisa))\n    \n    return solutions[lisa]\n\nans = solution()"
    ],
    "91c7b4be08964d77b4b67e46cd1f734b": [
        "def solution():\n    from math import factorial\n\n    # Treat Tom and Harry as a single entity, plus the other 4 students and Ronda\n    # There are now 5 entities (Tom&Harry, Ronda, and 3 other students) to arrange\n    arrangements_of_entities = factorial(5)\n\n    # Tom and Harry can switch places within their single entity\n    tom_harry_permutations = factorial(2)\n\n    # Ronda must be at the furthest right, so only the other entities are arranged\n    total_arrangements = arrangements_of_entities * tom_harry_permutations\n\n    return total_arrangements\n\nans = solution()"
    ],
    "cac726123b6048d88b1d9136486d8aec": [
        "def solution():\n    initial_investment = 5000\n    first_interest_rate = 0.05\n    second_interest_rate = 0.08\n    first_duration = 3\n    second_duration = 2\n\n    # Calculate the amount after the first three years\n    amount_after_first_period = initial_investment * ((1 + first_interest_rate) ** first_duration)\n\n    # Calculate the final amount after the last two years\n    final_amount = amount_after_first_period * ((1 + second_interest_rate) ** second_duration)\n\n    # Round to the nearest tenth\n    ans = round(final_amount, 1)\n\n    return ans\n\nans = solution()"
    ],
    "ce620993d78944209d67e832a4f6c350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original amount of money Jerry had\n    x = symbols('x')\n    watch_cost = 200\n    shirt_fraction = 2/7\n    remaining_fraction = 1/3\n\n    # After spending $200 on a watch\n    remaining_after_watch = x - watch_cost\n\n    # Spending 2/7 of his remaining money on a shirt\n    shirt_cost = shirt_fraction * remaining_after_watch\n    remaining_after_shirt = remaining_after_watch - shirt_cost\n\n    # He had 1/3 of the original amount of money left\n    equation = Eq(remaining_after_shirt, x * remaining_fraction)\n\n    # Solve for x\n    original_amount = solve(equation, x)\n    return original_amount[0]\n\nans = solution()"
    ],
    "2d575e9d3dcb4bb3a35bda8638540b40": [
        "def solution():\n    rounded_price = 125000\n    lowest_possible = (rounded_price - 50) + 1  # Subtract 50 to find the lower boundary, and add 1\n    return lowest_possible\n\nans = solution()"
    ],
    "cc5debb2fb484837bd9e20117b66253d": [
        "def solution():\n    current_total_score = 4 * 89  # Total score from 4 tests\n    target_average_score = 95\n    additional_tests = 0  # Initialize the number of additional tests needed\n\n    # Keep adding tests with a score of 100 until the target average is reached\n    while True:\n        new_total_tests = 4 + additional_tests\n        minimum_score_needed = target_average_score * new_total_tests\n        if current_total_score + (additional_tests * 100) >= minimum_score_needed:\n            break\n        additional_tests += 1\n\n    return additional_tests\n\nans = solution()"
    ],
    "01ebc2d721814d4db11a4f6271fd146a": [
        "def solution():\n    # Define the distances for each part of the race\n    distance_part1 = 540\n    distance_part2 = 300\n    distance_part3 = 1000 - (distance_part1 + distance_part2)\n\n    # Define the speeds for each part of the race\n    speed_part1 = 9  # in meters per second\n    speed_part2 = 6  # in meters per second\n    speed_part3 = 10 # in meters per second\n\n    # Calculate the time taken for each part of the race\n    time_part1 = distance_part1 / speed_part1\n    time_part2 = distance_part2 / speed_part2\n    time_part3 = distance_part3 / speed_part3\n\n    # Total time taken\n    total_time = time_part1 + time_part2 + time_part3\n\n    return total_time\n\nans = solution()"
    ],
    "b33352ddaff94fdf9bca43b11dd51548": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    doris_age = 10\n    uncle = symbols('uncle')\n\n    # When Doris is the same age as her uncle is now, her uncle will be 40 years old.\n    equation = Eq(doris_age + (uncle - doris_age), 40)\n\n    solution = solve(equation, uncle)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ccc1e15016544ef18eb8d6fbfa342f6b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the variables\n    original_speed = symbols('original_speed')\n    time = symbols('time')\n    distance = symbols('distance')\n\n    # Equation based on first scenario\n    equation1 = Eq(distance, original_speed * time)\n\n    # Equation for when speed increased by 20%\n    equation2 = Eq(distance, (original_speed * 1.20) * (time - 1))\n\n    # Solve equation 1 and 2 for original speed and time\n    original_speed_and_time = solve((equation1, equation2), (original_speed, time))\n\n    original_speed_value = original_speed_and_time[original_speed]\n    time_value = original_speed_and_time[time]\n\n    # Equation for when the first 200 km is at usual speed\n    equation3 = Eq(200, original_speed_value * (200 / original_speed_value))\n\n    # Remaining distance to travel\n    remaining_distance = distance - 200\n\n    # Time to travel remaining distance at increased speed of 25%\n    increased_speed_time = remaining_distance / (1.25 * original_speed_value)\n\n    # Time to travel the whole distance directly at the increased speed (after traveling 200 km at original speed)\n    overall_time = (200 / original_speed_value) + increased_speed_time\n\n    # Equation when reaching 12 minutes earlier\n    equation4 = Eq(overall_time, time_value - 12/60)\n\n    # Solve for distance\n    solutions = solve((equation4, equation1), (distance, time))\n\n    return solutions[distance]\n\nans = solution()"
    ],
    "46688ef5acdc4df49717f3ab80f36c17": [
        "def solution():\n    total_classes = 18\n    extra_performances = 2  # Lia and Liz each prepare an extra performance\n\n    total_performances = total_classes + extra_performances\n\n    return total_performances\n\nans = solution()"
    ],
    "1f3d5b49f91c4771addbb17609528cde": [
        "def solution():\n    train_length = 250\n    bridge_length = 260\n    speed = 30  # speed in m/s\n\n    # The total distance the train needs to cover to completely cross the bridge\n    total_distance = train_length + bridge_length\n    # Time = Distance / Speed\n    time_to_cross = total_distance / speed\n\n    return time_to_cross\n\nans = solution()"
    ],
    "56b1265849bc4172b9283606e061da30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sheep, cows = symbols('sheep cows')\n\n    equation1 = Eq(sheep, (5/7) * cows)\n    equation2 = Eq(cows - 7, (3/4) * (sheep + 21))\n\n    solutions = solve((equation1, equation2), (sheep, cows))\n\n    return solutions[sheep]\n\nans = solution()"
    ],
    "c476669828e74aee81ba796c38aab4b8": [
        "def solution():\n    chloe_stamps = 176\n    polly_stamps = 4 * chloe_stamps\n    more_stamps = polly_stamps - chloe_stamps\n    return more_stamps\n\nans = solution()"
    ],
    "42047954e98a4b1098845e2ff791180b": [
        "def solution():\n    start_time = (8 * 60) + 30  # Convert 08:30 to minutes\n    end_time = (9 * 60) + 25    # Convert 09:25 to minutes\n    n = end_time - start_time    # Calculate the difference in minutes\n    return n\n\nans = solution()"
    ],
    "a549cf3800294c169634bf21d56759b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b represent the cost of one book and p represent the cost of one pencil box.\n    b, p = symbols('b p')\n\n    # Create equations based on the given information.\n    equation1 = Eq(2 * b + 3 * p, 42)\n    equation2 = Eq(2 * b + 6 * p, 60)\n\n    # Solve the system of equations for the variables b and p.\n    solutions = solve((equation1, equation2), (b, p))\n\n    # Return the cost of each pencil box.\n    return solutions[p]\n\nans = solution()"
    ],
    "4f9fc9c45bc74b13945e3b6e4a79c3ef": [
        "def solution():\n    monthly_salary = 7.65\n    debt = 2.5\n\n    months_needed = debt / monthly_salary\n\n    return months_needed\n\nans = solution()"
    ],
    "98fa02662c3f496dbfbd82e145244c2d": [
        "def solution():\n    # A's efficiency\n    a_efficiency = 1 / 6\n    # B's efficiency is half of A's\n    b_efficiency = a_efficiency / 2\n\n    # Combined efficiency of A and B\n    combined_efficiency = a_efficiency + b_efficiency\n\n    # Total days required for A and B to complete the job together\n    total_days = 1 / combined_efficiency\n    return total_days\n\nans = solution()"
    ],
    "dc7dede26ff941569676a4c0dc370ff2": [
        "def solution():\n    # Let x be the number of years it takes for the sum of their ages to be 30\n    # Since their current combined age is 22, and each year both of them get 1 year older,\n    # x years later their combined age would be: 22 + x + x = 22 + 2x\n    # We need to find x for when 22 + 2x = 30\n\n    x = (30 - 22) / 2\n\n    return int(x)\n\nans = solution()"
    ],
    "672eac0e95a14d3f9ead29a67b3f22d2": [
        "def solution():\n    haribo_cost = 0.50\n    mamee_cost = haribo_cost - 0.30\n    jelly_cost = 6 * mamee_cost\n    return jelly_cost\n\nans = solution()"
    ],
    "e804f82f48cb432f87a500257865625a": [
        "def solution():\n    return 15.41 + 0.023\n\nans = solution()"
    ],
    "dc703045b2df402dbdfe5981fc60d341": [
        "def solution():\n    num = 18 * 32 // 36\n    return num\n\nans = solution()"
    ],
    "a69ea7bbe98046abb05ec657125e9e2a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_candies = symbols('total_candies')\n    \n    anna = 3/8 * total_candies\n    belle = 1/4 * total_candies\n    cathy_and_dawn = total_candies - anna - belle\n    \n    equation = Eq(anna + belle, cathy_and_dawn + 90)\n    \n    solution = solve(equation, total_candies)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "365d1f5c27234c98810406b6e4bcded0": [
        "def solution():\n    remaining_plants = 4\n    # Joel removes 2 less than half of the remaining plants\n    before_joel = (remaining_plants + 2) * 2\n\n    # Valerie removes 3 less than half of the remaining plants\n    before_valerie = (before_joel + 3) * 2\n\n    # Ethan first removes 1 less than half of the plants\n    initial_plants = (before_valerie + 1) * 2\n\n    return initial_plants\n\nans = solution()"
    ],
    "810b29e808374893b25143dad8014c66": [
        "def solution():\n    ans = 0.23 * 200\n    return ans\n\nans = solution()"
    ],
    "b43e05329caa4f1a984bd70f841acdce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')  # Define the symbol x to be used in the equation\n    equation = Eq(37 - 3 * (x + 7), 5 * x)  # Construct the equation\n    solutions = solve(equation, x)  # Solve the equation for x\n\n    return solutions[0]  # Return the solution for x\n\nans = solution()"
    ],
    "11ce6a9abf8e477b9581c4ee7316be07": [
        "def solution():\n    chris_books = 12\n    beck_books = chris_books + 8\n    books_to_give = (beck_books - chris_books) // 2\n    return books_to_give\n\nans = solution()"
    ],
    "2214d6869bd045e2afc03dba93bcda5e": [
        "def solution():\n    ans = (5/8) * 92 + 7 * 0.625 + 62.5 * 0.01\n    return ans\n\nans = solution()"
    ],
    "9d5c3d4446b7434aaaa6846a334f2ea1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of fish balls made at first be x\n    x = symbols('x')\n\n    # Sold 3/4 in the morning, so he has 1/4 left\n    morning_left = x * (1 - 3/4)\n\n    # Sold 1/3 of the remaining in the afternoon, so he has 2/3 of the morning's left\n    afternoon_left = morning_left * (1 - 1/3)\n\n    # Made another 506 fish balls, so total is afternoon_left + 506\n    total_afternoon = afternoon_left + 506\n\n    # At the end he had twice the number of fish balls he made at first, so 2*x\n    equation = Eq(total_afternoon, 2 * x)\n\n    # Solve for x\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "1e328cd92fa04425b72e9c28f440ba39": [
        "def solution():\n    boys = 14\n    ratio_boys = 2\n    ratio_girls = 7\n    \n    total_students = boys * (ratio_boys + ratio_girls) / ratio_boys\n\n    return int(total_students)\n\nans = solution()"
    ],
    "a0d429ec9b9241fbafa343fefd207ff9": [
        "def solution():\n    strawberry_cake_price = 3\n    marble_cake_price = strawberry_cake_price + 2\n    cheese_cake_price = 3 * marble_cake_price\n\n    price_for_two_cheese_cakes = 2 * cheese_cake_price\n\n    return price_for_two_cheese_cakes\n\nans = solution()"
    ],
    "1c415c8f98ba481e86c80c0113bb20a1": [
        "def solution():\n    # Equation: circle * 3 + 17 = 6 * 6 + 2\n    # Simplify the right side of the equation\n    right_side = 6 * 6 + 2\n    # Subtract 17 from both sides\n    left_side = right_side - 17\n    # Since the left side is 3 times the circle, divide by 3 to find the circle's value\n    circle = left_side / 3\n    return circle\n\nans = solution()"
    ],
    "70ed86d3effe4cc5bd724d34f5219fb8": [
        "def solution():\n    for num in range(400, 501):\n        if num % 3 == 1 and num % 5 == 3 and num % 7 == 5:\n            ans = num\n            return ans\n\nans = solution()"
    ],
    "37ba30f7b64a46d380cae5ff5558dd59": [
        "def solution():\n    # Let the number of vanilla cupcakes be x\n    # Then chocolate cupcakes will be x + 72\n    # And blueberry cupcakes will be x - 36\n    # After selling, she will have the following cupcakes left:\n    # Chocolate left: (x + 72) - (x + 72) / 6 = (5/6) * (x + 72)\n    # Vanilla left: x - 2x / 3 = (1/3) * x\n    # Blueberry left: (x - 36) - 7(x - 36) / 9 = (2/9) * (x - 36)\n\n    # Total left cupcakes: (5/6) * (x + 72) + (1/3) * x + (2/9) * (x - 36) = 427\n\n    # Multiplying both sides by 18 (LCM of 6, 3, 9) to clear the denominators we get:\n    # 15(x + 72) + 6x + 4(x - 36) = 18 * 427\n\n    # Now we can solve the linear equation\n    from sympy import symbols, solve\n    x = symbols('x')\n    equation = 15 * (x + 72) + 6 * x + 4 * (x - 36) - 18 * 427\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    # Vanilla cupcakes\n    vanilla_cupcakes = solution[0]\n    # Chocolate cupcakes\n    chocolate_cupcakes = vanilla_cupcakes + 72\n    # Chocolate cupcakes sold\n    chocolate_sold = chocolate_cupcakes - (5 / 6) * chocolate_cupcakes\n\n    return int(chocolate_sold)\n\nans = solution()"
    ],
    "e495bb663c3f4e3fb7b4594b7b6e3ce0": [
        "def solution():\n    total_seeds = 20\n    seeds_died = total_seeds / 4\n    sunflowers_grown = total_seeds - seeds_died\n\n    return int(sunflowers_grown)\n\nans = solution()"
    ],
    "5d87e59fcef54f0d8cbf90a06ad4361a": [
        "def solution():\n    number = 36\n    factors = set()\n\n    for i in range(1, int(number ** 0.5) + 1):\n        if number % i == 0:\n            factors.add(i)\n            factors.add(number // i)\n\n    return len(factors)\n\nans = solution()"
    ],
    "cba96ea4079d4147a8e7a1bba76598b4": [
        "def solution():\n    total_pigs = 8\n    green_apples_per_pig = 1\n    red_apples_per_two_pigs = 1 / 2\n\n    total_green_apples = total_pigs * green_apples_per_pig\n    total_red_apples = total_pigs * red_apples_per_two_pigs\n\n    ans = total_green_apples + total_red_apples\n    return int(ans)\n\nans = solution()"
    ],
    "0a6b3f52433742509667f3e14550f591": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 5), (4, 7), (5, 9)]\n    ans = solve_congruence(*congruences)[0]\n\n    return ans\n\nans = solution()"
    ],
    "892e6ad962394876990f5b04addfae37": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the price of a shirt (s) and a pair of pants (p)\n    s, p = symbols('s p')\n\n    # Set up the two equations based on the information given\n    equation1 = Eq(3 * s + 2 * p, 81)\n    equation2 = Eq(5 * s + 4 * p, 147)\n\n    # Solve the system of equations for the price of a shirt and a pair of pants\n    solutions = solve((equation1, equation2), (s, p))\n\n    # Get the total price of 1 shirt and 1 pair of pants\n    total_price = solutions[s] + solutions[p]\n\n    return total_price\n\nans = solution()"
    ],
    "99ec89df21bc47e580283576006ce753": [
        "def solution():\n    days = 15\n    initial_amount = 100\n    deposit = 10\n    spend = 8\n    net_change = deposit - spend \n\n    complete_cycles = days // 2\n    remaining_days = days % 2\n    total_savings = initial_amount + (net_change * complete_cycles)\n\n    if remaining_days > 0:\n        total_savings += deposit\n\n    return total_savings\n\nans = solution()"
    ],
    "0cdfa66a263441afa78bab0d33bc8b54": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    ans, _ = solve_congruence(*congruences)\n\n    return ans\n\nans = solution()"
    ],
    "e1e9d7528bbf401cbf3607c4c9d25245": [
        "def solution():\n    total_apples = 42 + 41 + 30 + 29 + 38\n    num_students = 5\n    \n    average_apples = total_apples / num_students\n    return average_apples\n\nans = solution()"
    ],
    "0e91657d43d34effa4d1a8ca9067f554": [
        "def solution():\n    total_durians = 90\n    sold_fraction = 4/6\n    sold_durians = total_durians * sold_fraction\n    remaining_durians = total_durians - sold_durians\n    \n    return int(remaining_durians)\n\nans = solution()"
    ],
    "adce1fe036694ef68f2fd4cdac3f0be4": [
        "def solution():\n    total_ways = 4!  # Calculate the total number of arrangements without restrictions\n    restricted_ways = 2! * 2!  # Calculate the number of ways Claire and Tony sit across each other\n    return total_ways - restricted_ways\n\nans = solution()"
    ],
    "5a342d4cec7f4c4886694b8cade4fa53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number Michael thinks of.\n    x = symbols('x')\n    \n    # Create the equation based on the problem statement\n    equation = Eq(((x * 2) + 178) / 4, 54)\n    \n    # Solve for x\n    solved = solve(equation, x)\n    \n    # Get the solution for x\n    answer = solved[0]\n    \n    return answer\n\nans = solution()"
    ],
    "1cfd9ab02afc40268d415154a39502bb": [
        "def solution():\n    ans = 32 * 47\n    return ans\n\nans = solution()"
    ],
    "1d5142c64ec641dc8bbd86895e5a3579": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Assigning symbols to the unknowns\n    original_speed = symbols('original_speed')\n\n    # Equation - distance = original speed * original time\n    original_time = 8  # in hours\n    original_distance = original_speed * original_time\n\n    # Equation - distance = (original speed + 5) * (original time - 1)\n    new_speed = original_speed + 5\n    new_time = original_time - 1\n    new_distance = new_speed * new_time\n\n    # Since the distance is the same in both cases, we can equate them and solve\n    equation = Eq(original_distance, new_distance)\n\n    # Solve the equation for the original speed\n    original_speed_solution = solve(equation, original_speed)\n\n    # Calculate the distance using the original speed\n    distance = original_speed_solution[0] * original_time\n\n    return distance\n\nans = solution()"
    ],
    "599d7ab82508440d8bc57c2a45cc2bb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the cost of one banana and one pear\n    banana, pear = symbols('banana pear')\n    \n    # Create equations based on the given information\n    equation1 = Eq(banana + 2 * pear, 94)\n    equation2 = Eq(banana + pear, 62)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (banana, pear))\n    \n    return solutions[banana]\n\nans = solution()"
    ],
    "7455d596a9584c91a9f5f01d9ac7dda1": [
        "from itertools import permutations\n\ndef solution():\n    digits = '359'\n    all_combinations = sorted([''.join(p) for p in permutations(digits)])\n    fifth_number = all_combinations[4]\n    return int(fifth_number)\n\nans = solution()"
    ],
    "f238021737bb4ddf866f1e344662e725": [
        "def solution():\n    test_tubes = 1\n    while 2**test_tubes < 1000:\n        test_tubes += 1\n    return test_tubes\n\nans = solution()"
    ],
    "6070f6baef3345f49dc764aaf67f2145": [
        "def solution():\n    n = 7**2 - 6**2\n    return n\n\nans = solution()"
    ],
    "4bbb81d1111b4e3cbec6b7862f30f6d7": [
        "def solution():\n    # Assume that initially Charlotte has c stickers\n    # Mary and Alexis had stickers in the ratio 7:5, let's say initially they had 7m and 5m stickers respectively\n    # Mary gave 20% of her stickers to Charlotte: 0.20 * 7m\n    # Alexis gave 20% of her stickers to Charlotte: 0.20 * 5m\n    # Total stickers given to Charlotte would be: 0.20 * 7m + 0.20 * 5m = 1.4m + 1m = 2.4m\n    # 80% increase for Charlotte: Charlotte's final stickers = c + 0.80c = 1.80c\n    # Therefore 2.4m = 1.80c -> m = (1.80/2.4) * c -> m = 0.75c\n    # Mary's final amount of stickers would be 7m - 0.20 * 7m = 0.80 * 7m = 5.6m\n    # Charlotte's final amount of stickers would be c + 2.4m = c + 2.4 * (0.75c) = c + 1.8c = 2.8c\n    # Mary has 20 stickers more than Charlotte in the end: 5.6m = 2.8c + 20\n    # Therefore m = (2.8c + 20) / 5.6 -> m = 0.5c + (20/5.6) -> m = 0.5c + 3.5714\n    # Comparing equations for m we get: 0.75c = 0.5c + 3.5714 -> c = 3.5714 / 0.25 -> c = 14.2857\n    # However, since the number of stickers must be an integer, and given the initial ratio and percentages used,\n    # we adjust the value of c to the nearest integer that makes m an integer as well\n    # In this case, since 7m/5m = 7/5, both m and c must be divisible by 5\n    # The closest such c is 15 (since 2.8*15 + 20 is a whole number and maintains the ratio)\n    # Thus, Charlotte initially had 15 stickers\n    c = 15\n    m = (2.8 * c + 20) / 5.6  # Find m from the relation we established between c and m\n    alexis_initial = 5 * m  # Alexis had 5m stickers initially\n    return alexis_initial\n\nans = solution()"
    ],
    "ec5a902e3059436a93f54bdff89b1b64": [
        "def solution():\n    count = 0\n    for x1 in range(2, 10):  # Assign at least 2 books to the first brother\n        for x2 in range(2, 10 - x1):  # Assign at least 2 books to the second brother\n            x3 = 10 - x1 - x2  # The rest go to the third brother\n            if x3 >= 2:  # Check that the third brother has at least 2 books\n                count += 1\n    return count\n\nans = solution()"
    ],
    "19d73820d6d94870a69075b50604e9ea": [
        "def solution():\n    total_chairs = 10\n    total_distance = 36\n    chairs_removed = 3\n    remaining_chairs = total_chairs - chairs_removed\n    distance_between_chairs_with_all = total_distance / (total_chairs - 1)\n    new_total_distance = distance_between_chairs_with_all * (remaining_chairs - 1)\n    distance_between_chairs_with_some_removed = new_total_distance / (remaining_chairs - 1)\n    return distance_between_chairs_with_some_removed\n\nans = solution()"
    ],
    "a7c840e7a73042529289e2f30f4cce0a": [
        "def solution():\n    ans = 46 / (3 * 4) * (7 / 8) / (2 / 3) * (4 * 8) / (9 - 2)\n    return ans\n\nans = solution()"
    ],
    "18e7c7d882fd4965a7d2ddada6edb9ba": [
        "def solution():\n    n = (55 - 3) // 4\n    return n\n\nans = solution()"
    ],
    "87be82c9d7de44ca9010e74b7b93822e": [
        "def solution():\n    ans = 768 // 3\n    return ans\n\nans = solution()"
    ],
    "002d73bb7e164b1cbeeebeeb6b1b8c36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the four angles of quadrilateral\n    angle1, angle2, angle3, angle4 = symbols('angle1 angle2 angle3 angle4')\n    \n    # We know two of the angles are right angles, so they are 90 degrees\n    equation1 = Eq(angle1, 90)\n    equation2 = Eq(angle2, 90)\n    \n    # One of the others (angle3) is five times larger than the fourth (angle4)\n    equation3 = Eq(angle3, 5 * angle4)\n    \n    # The sum of angles in any quadrilateral is 360 degrees\n    equation4 = Eq(angle1 + angle2 + angle3 + angle4, 360)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (angle1, angle2, angle3, angle4))\n\n    # The largest angle is angle3\n    return solutions[angle3]\n\nans = solution()"
    ],
    "a0bb16508a094a2b923d767cc547f24e": [
        "def solution():\n    factors = []\n    for i in range(10, 100):  # Loop through all 2-digit numbers\n        if 7007 % i == 0:  # Check if i is a factor of 7007\n            other_factor = 7007 // i\n            if 10 <= other_factor < 100 and i % 7 == 0 and other_factor % 7 == 0:  # Both factors are 2-digit multiples of 7\n                factors.append((i, other_factor))\n                break  # We only need one pair since the factors are unique\n    return sum(factors[0])\n\nans = solution()"
    ],
    "d552a67eab8b49baa8a9ba818269f589": [
        "def solution():\n    min_boxes = float('inf')\n    for small_boxes in range(54 // 5 + 1):\n        for medium_boxes in range(54 // 7 + 1):\n            for large_boxes in range(54 // 10 + 1):\n                if 5 * small_boxes + 7 * medium_boxes + 10 * large_boxes == 54:\n                    min_boxes = min(min_boxes, small_boxes + medium_boxes + large_boxes)\n    return min_boxes\n\nans = solution()"
    ],
    "08b558c3faa347dab4cf75659be5e9ba": [
        "def solution():\n    def count_ways(n):\n        if n <= 1:\n            return 1\n        elif n == 2:\n            return 2\n        else:\n            return count_ways(n - 1) + count_ways(n - 2) + count_ways(n - 3)\n    \n    # Calculate ways to reach the 4th step\n    ways_to_fourth = count_ways(4)\n    \n    # Calculate ways to reach the 10th step from the 4th avoiding the 5th. \n    # We start from 6th step, since we can reach it from the 3rd and 4th step directly.\n    ways_to_tenth_from_sixth = count_ways(10 - 6)\n    \n    # Total ways is ways to reach 4th step times ways to reach 10th step from 6th step.\n    total_ways = ways_to_fourth * ways_to_tenth_from_sixth\n    \n    return total_ways\n\nans = solution()"
    ],
    "7f2800865ae74b51aea6bb7d879f748d": [
        "def solution():\n    # The equation is: (x + 6) / 3 = 5\n    # To find x, we can multiply both sides by 3 and then subtract 6:\n    x = 5 * 3 - 6\n    return x\n\nans = solution()"
    ],
    "65d0a4bf0dd4421d8f7a7ae61320a871": [
        "def solution():\n    cans_in_6_days = 42\n    days = 9\n\n    cans_per_day = cans_in_6_days / 6\n    cans_in_9_days = cans_per_day * days\n\n    return cans_in_9_days\n\nans = solution()"
    ],
    "8c9a2bd605ed4c729cd446a9f7aa73b2": [
        "def solution():\n    ans = (6/7) * 42\n    return ans\n\nans = solution()"
    ],
    "026d98e841e64cdd89aad40de45ad4b6": [
        "def solution():\n    visitors_per_minute = 10\n    check_in_per_entrance = 25\n    minutes_with_one_entrance = 16\n\n    # Total number of visitors after 16 minutes with one entrance\n    total_visitors = visitors_per_minute * minutes_with_one_entrance\n    # Total check-in capacity per minute with two entrances\n    total_capacity_with_two_entrances = check_in_per_entrance * 2\n\n    # The time it takes for two entrances to clear the visitors\n    time_with_two_entrances = total_visitors / total_capacity_with_two_entrances\n\n    return time_with_two_entrances\n\nans = solution()"
    ],
    "43e9733a82014d8eabf755557196a178": [
        "def solution():\n    carrots_per_week = 14\n    weeks = 30\n    total_carrots = carrots_per_week * weeks\n\n    return total_carrots\n\nans = solution()"
    ],
    "5dd5b133aea24401a5002b33b8907b40": [
        "def solution():\n    speed_mph = 65\n    time_hours = 15 / 60\n    distance_miles = speed_mph * time_hours\n    miles_to_km_conversion_factor = 1.60934\n    distance_km = distance_miles * miles_to_km_conversion_factor\n    \n    return distance_km\n\nans = solution()"
    ],
    "81d722c81c1f48a79aedfcad65400bc2": [
        "def solution():\n    day_distance = 5\n    night_distance = 3\n    net_distance = day_distance - night_distance\n    burrow_depth = 16\n    days = 0\n    total_distance = 0\n\n    while total_distance < burrow_depth:\n        days += 1\n        total_distance += day_distance\n        if total_distance >= burrow_depth:\n            break\n        total_distance -= night_distance\n        \n    return days\n\nans = solution()"
    ],
    "da128269ec8a4b78bcc13ee12e8d271e": [
        "def solution():\n    total_cookies = 40\n    cookies_given_away = 8\n    cookies_per_bottle = 4\n\n    remaining_cookies = total_cookies - cookies_given_away\n    number_of_bottles = remaining_cookies // cookies_per_bottle\n\n    return number_of_bottles\n\nans = solution()"
    ],
    "b295ec92694641e88fe8ece9db989418": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    frogs_beginning, dragonflies_beginning = symbols('frogs_beginning dragonflies_beginning')\n\n    equation1 = Eq(frogs_beginning - dragonflies_beginning, 9)  # Frogs are 9 more than dragonflies initially\n    equation2 = Eq(frogs_beginning - (11-10), 11)              # The number of frogs after the show is 11\n    equation3 = Eq(dragonflies_beginning + (11-10), 10)        # The number of dragonflies after the show is 10\n\n    solutions = solve((equation1, equation2, equation3), (frogs_beginning, dragonflies_beginning))\n\n    return solutions[frogs_beginning]\n\nans = solution()"
    ],
    "6bf09e258c0344d980831d0a2582021b": [
        "def solution():\n    # The greatest 3-digit number is 999\n    # We will find the greatest multiple of 25 that is less than or equal to 999\n    for num in range(999, 99, -1):\n        if num % 25 == 0:\n            return num\n\nans = solution()"
    ],
    "f330e5185f564b4f8439985f154a4ab2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies, muffins = symbols('cookies muffins')\n\n    equation1 = Eq(cookies, muffins + 24)\n    equation2 = Eq(3/4 * muffins + 5/8 * cookies, 74)\n\n    solution_dict = solve((equation1, equation2), (cookies, muffins))\n\n    return solution_dict[cookies]\n\nans = solution()"
    ],
    "0d784e5849d84e58ad27c2767fae5a52": [
        "def solution():\n    for A in range(10):\n        number = int(f\"123{A}456{A}789{A}0\")  # The last digit is 0 to make it even\n        if number % 9 == 0 and number % 5 != 0:\n            return A\n\nans = solution()"
    ],
    "16f45879a4ca4545b12ade2f472ea304": [
        "def solution():\n    sum_of_cubes = sum([i**3 for i in range(2, 13)])\n    return sum_of_cubes\n\nans = solution()"
    ],
    "f0b47802cada49d286687ff9e3a7086d": [
        "def solution():\n    addends = [48, -47, 46, -45, 44, -43, 42, -41, 40]\n    ans = sum(addends)\n    return ans\n\nans = solution()"
    ],
    "82befdbc19124ec4a29b8a7200da5f5f": [
        "def solution():\n    total_cost = 4 * 24 + 5 * 81 + 7 * 20\n    return total_cost\n\nans = solution()"
    ],
    "15e2a7686f9044aeaf931e87b0693cae": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Define the variables\n    richard_money = 40\n    friends = symbols('friends')\n\n    # Define the costs (assume all costs are given in the problem statement)\n    metro_ticket_price = symbols('metro_ticket_price')  # Price for one round trip\n    coffee_price = symbols('coffee_price')  # Price for one coffee\n    entry_fee = symbols('entry_fee')  # Entry fee price for one person\n\n    # Set up the equation based on the problem statement\n    # Richard's expenses = metro tickets + coffee + entry fee for himself and his friends\n    total_expenses = Eq((friends + 1) * (2 * metro_ticket_price + coffee_price + entry_fee), richard_money)\n\n    # Assume some values as the problem does not specify costs\n    # Substitute these values into the equation to solve for the number of friends\n    costs = {\n        metro_ticket_price: 2, # Assume metro ticket cost for a round trip is $2\n        coffee_price: 3,  # Assume coffee price is $3\n        entry_fee: 10  # Assume entry fee for the match is $10\n    }\n\n    equation_with_values = total_expenses.subs(costs)\n\n    # Find the maximum number of friends Richard can invite\n    result = solve(equation_with_values, friends)\n\n    # The result will be a set of solutions, we need the maximum integer number of friends\n    num_friends = max([sol for sol in result if sol.is_integer and sol >= 0])\n\n    return num_friends\n\nans = solution()"
    ],
    "adee1a24c7024765a006ff883559d59a": [
        "def solution():\n    sequence = []\n    for i in range(1, 10):\n        sequence.extend([i] * i)\n    \n    median_index = len(sequence) // 2\n    ans = sequence[median_index]\n    \n    return ans\n\nans = solution()"
    ],
    "e1f9970642f64e64b790ec29f85e494f": [
        "def solution():\n    # speed ratio of the driver to the cyclist\n    speed_ratio = 13 / 2\n    # extra time the cyclist takes (in hours)\n    extra_time_cyclist = 143 / 60\n    \n    # Let the time taken by the driver be x hours\n    # Since distance = speed * time, and the distance is the same for both,\n    # we will have (driver's speed) * x = (cyclist's speed) * (x + extra_time_cyclist)\n    # But we have the driver's speed to cyclist's speed is 13:2 which means driver's speed = 13k and cyclist's speed = 2k (k is a constant)\n    # So, we have 13kx = 2k(x + extra_time_cyclist)\n    # We can solve this equation to find the value of x\n    # k will be cancelled out from both sides, hence:\n    # 13x = 2(x + extra_time_cyclist)\n    \n    # calculate the time taken by the driver by solving the equation\n    x = (2 * extra_time_cyclist) / (13 - 2)\n    \n    # convert hours to minutes\n    return int(x * 60)\n\nans = solution()"
    ],
    "509e74e27ec949a4bd04c96689bc27b8": [
        "def solution():\n    trains = 4\n    cars = 3\n    flights = 2\n\n    ways = trains + cars + flights\n\n    return ways\n\nans = solution()"
    ],
    "2fd2c2cf5b0e4e77ade10ea6e459326d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variable for the total number of coins\n    total_coins = symbols('total_coins')\n    \n    # The equation represents the scenario described in the question\n    equation = Eq((1/4)*total_coins + 2, (1/3)*total_coins)\n    \n    # Solve the equation\n    num_coins_solution = solve(equation, total_coins)\n    \n    # Extract the solution\n    ans = num_coins_solution[0]\n    return ans\n\nans = solution()"
    ],
    "b92bb1c34016428e8b1539c16095a291": [
        "from math import factorial\n\ndef solution():\n    total_shows = 5 + 3  # total number of shows\n    # Since comedy shows cannot be performed consecutively, we place them among singing shows.\n    # Singing shows act as a barrier, and there are 5 + 1 = 6 positions to insert comedy shows.\n    positions_for_comedy = 6\n\n    # Choosing 3 positions out of 6 for comedy shows\n    ways_to_place_comedy = factorial(positions_for_comedy) // (factorial(3) * factorial(positions_for_comedy - 3))\n\n    # After placing comedy shows, the remaining shows are all singing shows, which can be in any order.\n    # In this case, since all singing shows are identical, we don't need to consider their order.\n\n    # Therefore, the total number of ways is simply the ways to place the comedy shows.\n    return ways_to_place_comedy\n\nans = solution()"
    ],
    "ab295a6189f54b16ad73515c7acb0dc0": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "0ae254e064134f188c9be40779165325": [
        "def solution():\n    # Analyzing statement by statement:\n    # If statement 1 is true, then statement 2, 3, and 4 must also be true, which contradicts the premise that only one statement is correct.\n    # If statement 2 is true, it implies that all other statements including itself are incorrect, which is a contradiction.\n    # If statement 3 is true, then either statement 1 or 2 must be true, which again is a contradiction.\n    # If statement 4 is true, then statements 1, 2, and 3 must also be true, which contradicts the premise that only one statement is correct.\n    # If statement 5 is true, it means all the statements above it are incorrect, which satisfies the condition that only one statement is correct.\n\n    # Therefore, the correct statement is 5\n    ans = 5\n    return ans\n\nans = solution()"
    ],
    "85093fa878264795a7751d28ce2631a2": [
        "def solution():\n    total_road = 500\n    total_days = 5\n\n    meters_per_day = total_road / total_days\n\n    return meters_per_day\n\nans = solution()"
    ],
    "805c2d490543494daae962252fa53bed": [
        "def solution():\n    result_after_operations = 12\n    original_number = (result_after_operations + 9) * 2\n    return original_number\n\nans = solution()"
    ],
    "ad97ccd1f3f147778a05bec0c8d4686c": [
        "def solution():\n    # Convert all fractions to decimals\n    decimals = [2/5, 1/4, 0.45, 0.35, 7/20]\n    # Sort the list\n    decimals.sort()\n    # Find the middle value (since there are 5 numbers, the middle one is the 3rd one after sorting)\n    middle_value = decimals[2]\n    \n    return middle_value\n\nans = solution()"
    ],
    "ad40132c81d646cca930b7085fe9b999": [
        "def solution():\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = (5 * x + 7) / 4 - 8\n\n    original_number = solve(equation, x)\n\n    return original_number[0]\n\nans = solution()"
    ],
    "03a77a22a7ee441d83180f51247c76d2": [
        "def solution():\n    ans = 2018 - 314\n    return ans\n\nans = solution()"
    ],
    "d6f4e33c53824be9b1e66bbf1d27bf6a": [
        "def solution():\n    for choco_count in range(41, 60):\n        if choco_count % 4 == 2 and choco_count % 6 == 2:\n            return choco_count\n\nans = solution()"
    ],
    "f93efda9bc144ea8ad3f28fa5d961c5e": [
        "from math import factorial\n\ndef solution():\n    n_people = 6\n    n_seats = 8\n    \n    # This is a problem of circular permutations without repetitions for n people,\n    # and with (n_seats - n_people) empty seats. The empty seats don't matter since \n    # they don't change the relative ordering of the people.\n    # The formula for circular permutation is (n-1)! for n people.\n    # So, there are (n_people - 1)! different orders.\n    \n    ans = factorial(n_people - 1)\n    return ans\n\nans = solution()"
    ],
    "ac69d28e01274b9cb6dba2d848512b1e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(55 - 6 * (7 - x), 37)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "4a1f30f8a5d9460a9ca929a63a2af4ef": [
        "from itertools import permutations\n\ndef solution():\n    digits = [4, 5, 7, 9]\n    even_digits = [d for d in digits if d % 2 == 0]  # Filter only even numbers for the last digit\n\n    smallest_even_number = float('inf')\n    for perm in permutations(digits, 4):\n        if perm[-1] in even_digits:  # Check if last digit is even\n            number = int(''.join(map(str, perm)))\n            if number < smallest_even_number:\n                smallest_even_number = number\n\n    return smallest_even_number\n\nans = solution()"
    ],
    "41faa1f0b1cc4a408ca39ea9588f7c41": [
        "def solution():\n    total_dollars = 3.5\n    quarters_per_dollar = 4\n    \n    num_quarters = total_dollars * quarters_per_dollar\n    return int(num_quarters)\n\nans = solution()"
    ],
    "a93e649ea04246e29d39e3abf1c9cbf4": [
        "def solution():\n    # The pattern of digits after the decimal point starts with \"2\" and then has increasing sequences of digits\n    # starting from 3, then 4, and so on. Each sequence has one more zero than the previous one.\n    # The pattern repeats every 18 digits:\n    # 2, 3, 04, 0005, 000006, 00000007, 0000000008, 000000000009, 000000000000010, 000000000000000011, \n    # 00000000000000000012, and then it starts from 3 again.\n    \n    # Since we are only interested in the sum of the first 2100 digits after the decimal point, we only need\n    # to focus on the first 2100 digits of the pattern.\n    \n    # Initialize the sum and index for the current digit in the pattern\n    total_sum = 0\n    index = 0\n    \n    # Digits will start with 2, then 3, and increase by 1 after an increasing number of zeros\n    digit = 2\n\n    # Repeat the pattern until we reach 2100 digits\n    while index < 2100:\n        if digit == 2:\n            # Always add 2 for the first digit in the pattern\n            total_sum += 2\n            index += 1\n            digit += 1\n        else:\n            # Calculate how many digits of the current digit we can add before reaching 2100\n            num_of_digits = min(2100 - index, digit - 1)\n            # Add the current digit the appropriate number of times to the sum\n            total_sum += digit * num_of_digits\n            # Update the index and digit for the next iteration\n            index += num_of_digits\n            if index < 2100:\n                digit += 1\n    \n    return total_sum\n\nans = solution()"
    ],
    "0372e783670b4989a40bb288d0a50b49": [
        "def solution():\n    from math import lcm\n    ans = lcm(3, 4, 10)\n    return ans\n\nans = solution()"
    ],
    "8356de756f6c4a9296f2986d44679ee5": [
        "def solution():\n    # Let x be the total number of steps of the escalator\n    # Rate of escalator = (x - 10) steps in 10 seconds = (x - 10) / 10 steps per second\n    # When Peter walks 2 steps per second, it takes him 16 steps to reach the top\n    # So, 2 steps per second - (x - 10) / 10 steps per second = 16 steps / time it takes when walking at 2 steps per second\n    # Thus, the total time for 16 steps at 2 steps per second is 16 / 2 = 8 seconds\n    # We can set up the equation: x / ((x - 10) / 10 + 2) = 8\n    # Simplifying the equation: x = 8 * ((x - 10) / 10 + 2)\n    # x = 8 * (x/10 - 1 + 2)\n    # x = 8 * (x/10 + 1)\n    # x = 8x/10 + 8\n    # x - 8x/10 = 8\n    # x * (1 - 8/10) = 8\n    # x * (2/10) = 8\n    # x = 8 / (2/10)\n    # x = 8 * (10/2)\n    # x = 8 * 5\n    # x = 40\n    # Therefore, the number of steps of the escalator is 40\n    return 40\n\nans = solution()"
    ],
    "ef3c1e2ecc29478cae0e4c67e21cfd31": [
        "def solution():\n    chocolate_bar = 72\n    change_received = 388\n    note_given = 1000\n    \n    money_spent = note_given - change_received\n    money_on_balloons = money_spent - chocolate_bar\n    \n    cost_per_balloon = 20\n    number_of_balloons = money_on_balloons // cost_per_balloon\n    \n    return number_of_balloons\n\nans = solution()"
    ],
    "c3bed35ee49449b1b1c173972bfbdc16": [
        "def solution():\n    percentage = 45 / 100\n    total_length = 2000\n    return percentage * total_length\n\nans = solution()"
    ],
    "47daaf2e351c41baa45e0b8bebe5a912": [
        "def solution():\n    from sympy import sqrt, solve, symbols\n\n    a = 4 * sqrt(3)\n    x = symbols('x')\n\n    equation = 3 * a - sqrt(3 * x)\n\n    solved_x = solve(equation, x)\n\n    return solved_x[0]\n\nans = solution()"
    ],
    "9836746f750849eab60f6f4814df73ae": [
        "def solution():\n    result = (4 + 2) * 13 - (4 + (2 * 13))\n    return result\n\nans = solution()"
    ],
    "1fb58eeac24a49a9a387cd050b737f10": [
        "def solution():\n    students = 17\n    capacity = 4\n    kayaks_required = -(-students // capacity)  # Ceiling division\n\n    return kayaks_required\n\nans = solution()"
    ],
    "ed3efc4e403348c68b8110b921b8dbda": [
        "def solution():\n    return 861 // 7\n\nans = solution()"
    ],
    "efa72e12128b4d01a799c7adc89fd0e4": [
        "def solution():\n    total_money = 243\n    spent_portion = 2 / 9\n    money_spent = total_money * spent_portion\n    remaining_money = total_money - money_spent\n\n    # Let price of each cupcake be c and slice of pizza be p\n    # 5c + 6p = money_spent\n    # 3p = 2c or c = 3p/2\n    # Replacing c in the previous equation gives us:\n    # (15p/2) + 6p = money_spent\n    # Solving for p we get:\n    p = (2 * money_spent) / (15 + 12)\n    c = (3 * p) / 2\n\n    # Now we calculate the greatest number of cupcakes\n    max_cupcakes = remaining_money // c\n    return int(max_cupcakes)\n\nans = solution()"
    ],
    "95c22bdbc98241c5a13eb5bfac9fdeef": [
        "def solution():\n    count = 0\n    for number in range(74, 200):\n        if len(set(str(number))) == len(str(number)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ea690ce1e8584d07923ee3bc953befdb": [
        "def solution():\n    first_term = 15\n    last_term = 213\n    difference = 24 - 15\n\n    num_months = ((last_term - first_term) // difference) + 1\n\n    return int(num_months)\n\nans = solution()"
    ],
    "206f12ce0af144238e17dafffb955002": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "83872d0eef7a43dfb1188835aa5cf9cf": [
        "def solution():\n    # Let the youngest dwarf's age be y, then the ages form an arithmetic sequence\n    # y, y+1, y+2, ..., y+6\n    # The sum of the ages of three youngest dwarfs is (y) + (y + 1) + (y + 2) = 42\n    # This simplifies to 3y + 3 = 42\n    # Solving for y gives us the age of the youngest dwarf\n    y = (42 - 3) // 3\n    \n    # Now we need to find the sum of the ages of the three oldest dwarfs\n    # which are y+4, y+5, y+6\n    sum_oldest_three = (y + 4) + (y + 5) + (y + 6)\n    \n    return sum_oldest_three\n\nans = solution()"
    ],
    "997a64284e3544e7a7e0c6fe94460913": [
        "def solution():\n    from itertools import permutations\n    \n    digits = [2, 3, 5]\n    perm = permutations(digits, 3) # Generate all permutations of three digits\n    count = len(list(perm)) # Count the number of permutations\n\n    return count\n\nans = solution()"
    ],
    "2e6b4015f6284de4a0c0669daaa24807": [
        "def solution():\n    import math\n\n    count = 0\n    for i in range(1, 6):\n        num = int(\"2\" + \"5\" * i)\n        if math.isqrt(num) ** 2 == num:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "af0382a8cc5e48a18bb7e42fd763f480": [
        "def solution():\n    initial_pieces = 10\n    final_pieces = 16\n    # Each piece that is cut into three parts results in two additional pieces.\n    additional_pieces_per_cut = 2\n    # Number of pieces that were cut is equal to the increase in pieces divided by additional pieces per cut.\n    pieces_cut = (final_pieces - initial_pieces) // additional_pieces_per_cut\n\n    return pieces_cut\n\nans = solution()"
    ],
    "e495cca42c1345a4b15b14b27a2a00c5": [
        "def solution():\n    original_value = 98\n    new_value = 44.1\n    change = new_value - original_value\n    percent_change = (change / original_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "d9b42c64ab424ba98dbea5766a9ecc3c": [
        "def solution():\n    # Number of workers in the first scenario\n    workers_1 = 6\n    # Number of parts produced in the first scenario\n    parts_1 = 120\n    # Time taken in the first scenario (in minutes)\n    time_1 = 4\n\n    # Number of workers in the second scenario\n    workers_2 = 3\n    # Parts produced in the second scenario is unknown, so we call it parts_2\n    # Time taken in the second scenario (in minutes)\n    time_2 = 10\n\n    # Using unitary method to find the parts produced by 1 worker in 1 minute (work rate)\n    # Work rate is parts produced divided by (number of workers times time in minutes)\n    work_rate_1 = parts_1 / (workers_1 * time_1)\n\n    # Now we find the total parts produced by 3 workers in 10 minutes using the work rate\n    parts_2 = work_rate_1 * workers_2 * time_2\n\n    return int(parts_2)\n\nans = solution()"
    ],
    "9b500db0f33f4fa7a395fa0b079d3de4": [
        "def solution():\n    total_apples = 8 * 10\n    rotten_apples = total_apples * 1/4\n    non_rotten_apples = total_apples - rotten_apples\n    return int(non_rotten_apples)\n\nans = solution()"
    ],
    "fa375130b4804eb2ac24de6cdb33ba36": [
        "def solution():\n    from sympy import divisors\n\n    possible_n_values = divisors(2240)\n    ans = None\n    \n    for n in possible_n_values:\n        if (2240 // n) ** 0.5 % 1 == 0:\n            ans = n\n            break\n    return ans\n\nans = solution()"
    ],
    "ed6460b42a0146b59f0890c10edd817c": [
        "def solution():\n    ans = 14 * 7 * 2\n    return ans\n\nans = solution()"
    ],
    "8df7c69637724afeb40a650136d884cc": [
        "def solution():\n    original_value = 160\n    new_value = 168\n    increase = new_value - original_value\n    percentage_increase = (increase / original_value) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "b746b9baab8c4a33bd87af0d6945be01": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq(5 * (6 * x + 1) - 2 * x, 89)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "e27aaf5d541a4c6dac0a50ca457f87ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sack_of_rice, packet_of_oatmeal = symbols('sack_of_rice packet_of_oatmeal')\n\n    equation1 = Eq(3 * sack_of_rice + 3 * packet_of_oatmeal, 36)\n    equation2 = Eq(sack_of_rice, 2 * packet_of_oatmeal)\n\n    solutions = solve((equation1, equation2), (sack_of_rice, packet_of_oatmeal))\n\n    return solutions[sack_of_rice]\n\nans = solution()"
    ],
    "0b88d57e68004f1f83f1f05147aba9ae": [
        "def solution():\n    total_pupils = 380\n    swimming_pupils = total_pupils * 70 // 100\n    swimming_girls = 200\n    \n    # All the non-swimming pupils are girls\n    non_swimming_pupils = total_pupils - swimming_pupils\n    non_swimming_boys = total_pupils * 40 // 100\n    \n    # The non-swimming girls will be non-swimming pupils - non-swimming boys\n    non_swimming_girls = non_swimming_pupils - non_swimming_boys\n    \n    # Total girls is the sum of swimming girls and non-swimming girls\n    total_girls = swimming_girls + non_swimming_girls\n\n    return total_girls\n\nans = solution()"
    ],
    "b423b47f8b544d03af8cc3a8a122e9ab": [
        "def solution():\n    n = 12\n    sum_n = (n * (n + 1) // 2) ** 2  # Formula for 1³+2³+3³+......+n³\n    return sum_n\n\nans = solution()"
    ],
    "a8239f9e0ecd49818a91f1dd8da80bf9": [
        "def solution():\n    num_ways = 0\n    number = 200\n    \n    # Iterate through all possible numbers of parts\n    for parts in range(2, number):\n        if number % parts == 0:\n            num_ways += 1\n\n    return num_ways\n\nans = solution()"
    ],
    "b9c7443e6d2446d1880d97e9932a5033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the amount of 10% sugar water needed\n    x = symbols('x')\n    \n    # Equation based on the total amount of sugar before and after mixing\n    # 4*0.30 (sugar from 30%) + x*0.10 (sugar from 10%) = (4+x)*0.26 (sugar in the final mixture)\n    equation = Eq(4 * 0.30 + x * 0.10, (4 + x) * 0.26)\n    \n    # Solve the equation for x\n    amount_of_water = solve(equation, x)\n\n    # Return the amount of 10% sugar water needed\n    return amount_of_water[0]\n\nans = solution()"
    ],
    "5bb77e251c3740d5aab8750dc2aef4ff": [
        "def solution():\n    original_price_with_discount = 32\n    further_discount = 4\n    sale_price = original_price_with_discount - further_discount\n    discount_percentage = 20\n    \n    # Calculate the original price without any discount\n    original_price = original_price_with_discount / ((100 - discount_percentage) / 100)\n    \n    # Calculate total discount in dollars\n    total_discount = original_price - sale_price\n    \n    # Calculate total discount percentage\n    total_discount_percentage = (total_discount / original_price) * 100\n    \n    return total_discount_percentage\n\nans = solution()"
    ],
    "94f427d14d9b4d18afe48096055372d1": [
        "def solution():\n    # Let j be the mass of the empty jar and c be the mass of one chocolate\n    j, c = symbols('j c')\n\n    # We have two equations based on the problem statement\n    equation1 = Eq(j + 5 * c, 185)\n    equation2 = Eq(j + 17 * c, 317)\n\n    # Solve the system of equations for j and c\n    solutions = solve((equation1, equation2), (j, c))\n\n    # Find the mass of the jar with 10 chocolates\n    mass_with_10_chocolates = solutions[j] + 10 * solutions[c]\n\n    return mass_with_10_chocolates\n\nans = solution()"
    ],
    "bbe36118c29249729aad8891551bb3d7": [
        "def solution():\n    def custom_operation(a, b):\n        return a * b - a - b + 1\n\n    # compute 2⊗3\n    first_step = custom_operation(2, 3)\n    # compute (2⊗3)⊗4\n    ans = custom_operation(first_step, 4)\n\n    return ans\n\nans = solution()"
    ],
    "f88ff061bff143cb95b6f618e6e1efd8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lana, mark = symbols('lana mark')\n\n    # Lana gave away 1/3 of her sweets, and then they have the same number\n    eq1 = Eq(lana - lana/3, mark - 34)\n\n    # Lana's and Mark's sweets sum up to 674\n    eq2 = Eq(lana + mark, 674)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (lana, mark))\n\n    # How many more sweets did Lana have than Mark at first\n    difference = solutions[lana] - solutions[mark]\n\n    return difference\n\nans = solution()"
    ],
    "c316b949005a4f70998bf21b2636f3e1": [
        "def solution():\n    # Let Timmy's stickers be represented by x\n    timmy_stickers = symbols('x')\n    \n    # Dorothy has 8 times as many stickers as Timmy\n    dorothy_stickers = 8 * timmy_stickers\n    \n    # Kevin has 45 more stickers than Timmy\n    kevin_stickers = timmy_stickers + 45\n    \n    # Dorothy has $96 stickers is an equation\n    equation = Eq(dorothy_stickers, 96)\n    \n    # Solve the equation to find the number of stickers Timmy has\n    timmy_stickers_number = solve(equation, timmy_stickers)[0]\n    \n    # Calculate how many stickers Kevin has\n    kevin_stickers_number = timmy_stickers_number + 45\n    \n    return kevin_stickers_number\n\nans = solution()"
    ],
    "2d23c45ab97549b4b8ab41ad32224d76": [
        "def solution():\n    # Since the wheat is planted along the side of the rectangle,\n    # we first need to calculate the perimeter of the rectangle without counting the corners twice.\n    # Since each corner has a wheat, we can assume that the perimeter will have 116 - 4 = 112 wheats\n    # because the 4 corners are not counted as in between any two wheat.\n    \n    length = 144\n    width = 204\n    perimeter = 2 * (length + width)\n    \n    # Now we've got to think of these as 112 segments, and there's 112 - 1 gaps between them.\n    num_gaps = 116 - 4 - 1\n    \n    # The distance between every 2 wheat will be the perimeter divided by the number of gaps.\n    distance_between_wheat = perimeter / num_gaps\n    \n    return distance_between_wheat\n\nans = solution()"
    ],
    "3110b53620c0471aa2cb667c3ce65e77": [
        "def solution():\n    time_per_cat_per_fish = 10\n    num_cats = 5\n    num_fish = 5\n\n    total_time = time_per_cat_per_fish  # Time for each cat to catch one fish is constant\n    return total_time\n\nans = solution()"
    ],
    "b9c45a7f41d84579a8250cc2efdbeda0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, pineapple = symbols('watermelon pineapple')\n\n    equation1 = Eq(watermelon, 5 * pineapple)\n    equation2 = Eq(watermelon - pineapple, 5.6)\n\n    solutions = solve((equation1, equation2), (watermelon, pineapple))\n\n    return solutions[watermelon]\n\nans = solution()"
    ],
    "00bac1b894d8400c927244d5ab291236": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_days = symbols('total_days')\n    # The equation based on the problem description\n    equation = Eq((total_days / 2) / 2 - 4, 14)\n\n    # Solve the equation to find the total days in the holiday\n    solved_days = solve(equation, total_days)\n\n    # The returned solution is a list, we take the first (and only) element\n    return solved_days[0]\n\nans = solution()"
    ],
    "b3542d3cc8af443f8b242a3a4d02cd92": [
        "def solution():\n    # The total perimeter is the sum of all four sides.\n    perimeter = (144 + 204) * 2\n    \n    # The number of gaps between wheats is the total wheat minus the corners (116 total - 4 corners).\n    num_gaps = 116 - 4\n    \n    # The distance between every 2 wheat is total perimeter divided by the number of gaps.\n    distance = perimeter / num_gaps\n    \n    return distance\n\nans = solution()"
    ],
    "f2e2f998455a41098dae005947481855": [
        "def solution():\n    return (81 / 9 * 4) - 3\n\nans = solution()"
    ],
    "134e520a63fc4cd4b9d24373d85afc3a": [
        "def solution():\n    result = (3/8) * 48\n    return result\n\nans = solution()"
    ],
    "468e5ab1d23843a688c0d986c25ee3de": [
        "def solution():\n    total_bracelets = 84\n    morning_bracelets = (2/7) * total_bracelets\n    remaining_bracelets = total_bracelets - morning_bracelets\n    afternoon_bracelets = (3/5) * remaining_bracelets\n    bracelets_made = morning_bracelets + afternoon_bracelets\n    more_bracelets_needed = total_bracelets - bracelets_made\n    return int(more_bracelets_needed)\n\nans = solution()"
    ],
    "5756e8ef018e4deca17abc1cfcc3c79a": [
        "def solution():\n    # Given that B=2 and D=0, the equation becomes\n    # 5 × |A2C0EF| = 6 × |EF2A0C|\n    # Loop through all possible combinations of the digits\n    for A in range(10):\n        for C in range(10):\n            for E in range(10):\n                for F in range(10):\n                    # Ensure all digits are distinct\n                    if len({A, 2, C, 0, E, F}) == 6:\n                        num1 = 500000 + A * 10000 + 2000 + C * 100 + 0 * 10 + E * 1 + F\n                        num2 = E * 100000 + F * 10000 + 2000 + A * 100 + 0 * 10 + C\n                        # Check the equation\n                        if 5 * num1 == 6 * num2:\n                            # Found the number ABCDEF, return FACE\n                            return F * 1000 + A * 100 + C * 10 + E\n\nans = solution()"
    ],
    "05453f6e54854903b245e1b9f7315d91": [
        "def solution():\n    total_weight = 15 + 60\n    total_rice = 15 * 0.40 + 60 * x  # x is the percentage of rice in dogfood B\n    mixture_rice_percent = 0.28\n    \n    # Equation: total rice in mixture / total weight of mixture = mixture rice percentage\n    # (15 * 0.40 + 60 * x ) / (15 + 60) = 0.28\n    # Solve for x\n    x = (mixture_rice_percent * total_weight - 15 * 0.40) / 60\n    \n    # Convert the decimal to a percentage\n    percent_of_rice_in_B = x * 100\n    \n    return percent_of_rice_in_B\n\nans = solution()"
    ],
    "89088a26e0bf4129b3d5aac6042e949e": [
        "def solution():\n    for largest in range(100, 0, -1):\n        for second in range(largest-1, 0, -1):\n            for third in range(second-1, 0, -1):\n                for smallest in range(third-1, 0, -1):\n                    if (smallest + (largest + second + third) / 3 == 39) and (largest + (smallest + second + third) / 3 == 51):\n                        return largest\n\nans = solution()"
    ],
    "82e49ff36eba45e5b80fed7508aed40a": [
        "def solution():\n    # Total people to interview\n    total_people = 200\n    \n    # Ellie's rate of interviewing people per week\n    ellie_rate = 40\n    \n    # Time taken by Ellie and Gloria together to finish interviewing\n    together_time = 4\n    \n    # Calculate total work done by Ellie and Gloria together in terms of 'work units'\n    # Here, unit work is interviewing 1 person, both do 4 weeks of work interviewing 200 people\n    total_work_units = together_time * (ellie_rate + (total_people / together_time))\n    \n    # Gloria's rate of interviewing people (total work units minus Ellie's work for 4 weeks)\n    gloria_rate = total_work_units / together_time - ellie_rate\n    \n    # The time Gloria would take to interview all people by herself\n    gloria_time = total_people / gloria_rate\n    \n    return gloria_time\n\nans = solution()"
    ],
    "9fbe57cb0ac6418ab2240792282591b7": [
        "def solution():\n    leak_rate_per_minute = 15  # in milliliters per minute\n    minutes_in_two_hours = 2 * 60  # total minutes in two hours\n    total_leak_in_milliliters = leak_rate_per_minute * minutes_in_two_hours\n\n    # Convert milliliters to liters, 1 liter = 1000 milliliters\n    total_leak_in_liters = total_leak_in_milliliters / 1000\n\n    return total_leak_in_liters\n\nans = solution()"
    ],
    "f2e50e32110b4bbdac14c61d13824286": [
        "def solution():\n    road_length = 150\n    tree_interval = 10\n\n    num_trees = (road_length // tree_interval) + 1 # +1 for the tree at the very beginning\n    \n    return num_trees\n\nans = solution()"
    ],
    "e7bd4bc8283741eb831b62ff36519ac8": [
        "def solution():\n    # Speed difference\n    speed_difference = 60 - 45  # metres per minute\n    \n    # The distance Catherine still has to go when Barbara reaches\n    remaining_distance = 60  # metres\n    \n    # Time taken for the speed difference to result in a 60 metre lead for Barbara\n    time_to_lead = remaining_distance / speed_difference  # minutes\n    \n    # Total distance Barbara walked, which is the distance to the shopping mall\n    distance_to_mall = time_to_lead * 60  # metres\n    \n    return distance_to_mall\n\nans = solution()"
    ],
    "794649fd064842be800fcd3dd6a2517e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, pen = symbols('book pen')\n\n    equation1 = Eq(2*book + 1*pen, 12)\n    equation2 = Eq(1*book + 2*pen, 9)\n\n    solutions = solve((equation1, equation2), (book, pen))\n\n    return solutions[pen]\n\nans = solution()"
    ],
    "17d03f9197534de4bc9abd09472af81f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation = Eq(3*x + y + 21, 2 * (0.5*y + x))\n    solution = solve(equation, x)\n\n    return solution[x]\n\nans = solution()"
    ],
    "e082319eb56d42f888747eb43934b281": [
        "def solution():\n    # Calculate the total amount Jennifer received as change\n    change_received = (2 * 10) + (5 * 5) + (4 * 0.20)\n    \n    # Calculate the amount Jennifer spent\n    amount_spent = 100 - change_received\n    \n    return amount_spent\n\nans = solution()"
    ],
    "3ba5f4eac4774daf9c2b513499cd343e": [
        "def solution():\n    time_to_fry_one_plate = 3\n    total_time_available = 18\n\n    number_of_plates = total_time_available // time_to_fry_one_plate\n\n    return number_of_plates\n\nans = solution()"
    ],
    "59eb954ff993443c9285d88a012ec8bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nini, dad = symbols('nini dad')\n\n    equation1 = Eq(dad, nini + 25)\n    equation2 = Eq(dad + 5, 2 * (nini + 5) - 8)\n\n    solutions = solve((equation1, equation2), (nini, dad))\n\n    return solutions[nini]\n\nans = solution()"
    ],
    "e3bed45262264696ba3ef5c430fcbf22": [
        "def solution():\n    count = 0\n    for i in range(1, 51):\n        if not (i % 4 == 0 or i % 6 == 0):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "58dc414946bf46c0ba652c5866ea789b": [
        "def solution():\n    numerator = 471471471471\n    denominator = 157157157157\n    ans = numerator // denominator\n    return ans\n\nans = solution()"
    ],
    "6951136ac6a143cc8a66d6e046b9c312": [
        "def solution():\n    return 2536 // 4\n\nans = solution()"
    ],
    "410b895710664b55b1f42904c7fe0a39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables\n    A, B, C = symbols('A B C')\n    \n    # Equation based on the given ratio A:B = 4:3\n    equation1 = Eq(A/B, 4/3)\n    \n    # Equation based on the total amount\n    equation2 = Eq(A + B + C, 200)\n    \n    # Equation based on A having £20 more than C\n    equation3 = Eq(A, C + 20)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    # Return the amount for C\n    return solutions[C]\n\nans = solution()"
    ],
    "ab914c10068e40aabb127e29805bd56b": [
        "def solution():\n    total_pears = 300\n    pears_sold_first_day = (2 / 5) * total_pears\n    remaining_pears = total_pears - pears_sold_first_day\n    pears_sold_second_day = (7 / 9) * remaining_pears\n\n    return int(pears_sold_second_day)\n\nans = solution()"
    ],
    "f266887d9734495ab9b3e624af600dc7": [
        "def solution():\n    result = (3/4) * (30/100) * 120\n    return result\n\nans = solution()"
    ],
    "7dac345168e24b7f9f57312741709d28": [
        "def solution():\n    boys = 3\n    girls = 4\n\n    ways_to_pick = boys * girls\n\n    return ways_to_pick\n\nans = solution()"
    ],
    "c49b566d28914d98a6c34de5890ff196": [
        "from sympy import isprime\n\ndef solution():\n    count = 0\n    for num in range(10, 100):\n        if isprime(num):\n            reverse_num = int(str(num)[::-1])\n            if num != reverse_num and isprime(reverse_num):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "1f597349b6ec4f37bf0ad940a0226974": [
        "def solution():\n    ans = 462 + 268\n    return ans\n\nans = solution()"
    ],
    "a3540f1e7dc5422e96cb21be5f76dd9b": [
        "def solution():\n    apples = 29\n    min_apples_to_one_student = 3\n\n    # Since one student gets at least 3 apples, we subtract those from the total,\n    # and then distribute the remaining apples to the students, with each student\n    # getting at least 1 apple.\n    remaining_apples = apples - min_apples_to_one_student\n\n    # Using the Pigeonhole Principle, if we have n students (pigeonholes) and\n    # m remaining apples (pigeons), then m+1 apples can be divided among the students\n    # such that there are at max n-1 students with 1 apple and 1 student with at least 2 apples.\n    # Therefore, the number of students in the class is m+1 (remaining_apples + 1).\n    class_size = remaining_apples + 1\n\n    return class_size\n\nans = solution()"
    ],
    "f3ad4296cd634e83b25be5b77004a4b0": [
        "def solution():\n    ans = 36 - 18 / 2 + 4 * 6 / 3\n    return ans\n\nans = solution()"
    ],
    "8acc0b244fed4d689a5ee6fdff28233e": [
        "def solution():\n    initial_value = 140\n    final_value = 87.5\n    percent_change = ((final_value - initial_value) / initial_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "603221d8eb7e48509c5ac61d65305758": [
        "def solution():\n    # Since the alcoholic is not at two of the bars, they must be at the third bar.\n    # Hence the probability is 100% or 1 as there is no other option left.\n    return 1\n\nans = solution()"
    ],
    "efb9468b904144138bdc171c8b89d9b7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    green, blue = symbols('green blue')  # Create symbols for green and blue balls\n\n    # After blue * 2/5 and 28 green balls were removed, there are equal numbers left\n    equation1 = Eq(blue - (2/5) * blue, green - 28)\n\n    # There were a total of 140 green and blue balls at first\n    equation2 = Eq(green + blue, 140)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (green, blue))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "9125492975b445d4b6f48807e27c1382": [
        "def solution():\n    return (387 + 729) // 2\n\nans = solution()"
    ],
    "6d6b160ceaa74bed9f0745675ca7130e": [
        "def solution():\n    ans = 5183 - 594\n    return ans\n\nans = solution()"
    ],
    "2afab9fc169e49b190d537d496fbae66": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eliot_age_now, cousin_age_now = symbols('eliot_age_now cousin_age_now')\n\n    equation1 = Eq(eliot_age_now, 2 * cousin_age_now)\n    equation2 = Eq(eliot_age_now + 4, 16)\n\n    solutions = solve((equation1, equation2), (eliot_age_now, cousin_age_now))\n\n    cousin_age_in_4_years = solutions[cousin_age_now] + 4\n\n    return cousin_age_in_4_years\n\nans = solution()"
    ],
    "07e354462e5749c7b35205d8675ad8be": [
        "def solution():\n    return 324 + 132\n\nans = solution()"
    ],
    "26d6e3f96e9245abb8672de6d4d25383": [
        "def solution():\n    elaine_current_age = 6\n    mandy_current_age = 35\n    age_difference = mandy_current_age - elaine_current_age\n    \n    elaine_future_age = 12\n    mandy_future_age = elaine_future_age + age_difference\n    \n    return mandy_future_age\n\nans = solution()"
    ],
    "61e7999f8b924716a703e69dcd306ee4": [
        "def solution():\n    # Number of fish marked in the first catch\n    marked_fish_first_catch = 100\n    # Number of fish caught in the second catch\n    total_fish_second_catch = 100\n    # Number of fish marked that were recaptured\n    marked_fish_recaptured = 16\n\n    # Proportion of marked fish in the second catch\n    proportion_marked = marked_fish_recaptured / total_fish_second_catch\n    \n    # Estimating the total number of fish in the pond\n    # Assuming the proportion of marked fish in the second catch\n    # is representative of the proportion of the total marked to total fish in the pond\n    estimated_total_fish = marked_fish_first_catch / proportion_marked\n    \n    return int(estimated_total_fish)\n\nans = solution()"
    ],
    "549c6955bced409fbe3608247d39f37d": [
        "def solution():\n    # calculate the numerator (1 3/99 + 3 3/33 + 9 3/11)\n    numerator = (1 + 3/99) + (3 + 3/33) + (9 + 3/11)\n    \n    # calculate the denominator (1 1/99 + 3 1/33 + 9 1/11)\n    denominator = (1 + 1/99) + (3 + 1/33) + (9 + 1/11)\n    \n    # Calculate the result by dividing numerator by denominator\n    result = numerator / denominator\n    \n    return result\n\nans = solution()"
    ],
    "94fa427c30bc41b0bc1c23c2e238e7a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq(x / 9900, 201.4141414141414)\n    result = solve(equation, x)\n    return result[0]\n\nans = solution()"
    ],
    "fa1aabed26fd4a0f8865c23013775faa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ali, bronson, charlie = symbols('ali bronson charlie')\n\n    # Eq1: bronson = 2 * ali\n    equation1 = Eq(bronson, 2 * ali)\n    \n    # Eq2: ali = (bronson + charlie) / 2 - 5\n    equation2 = Eq(ali, (bronson + charlie) / 2 - 5)\n\n    solutions = solve((equation1, equation2), (ali, bronson, charlie))\n\n    return solutions[charlie]\n\nans = solution()"
    ],
    "7ed04e8e16744d3b811bde9f5ab21683": [
        "def solution():\n    # Let d be the distance between Nancy and Randy when they set off,\n    # n be the distance Nancy walks, and r be the distance Randy walks.\n    # According to the problem, we have:\n    # r / n = 3 / 2 and r = n + 10.\n    # We need to solve these two equations for n and r.\n\n    # Convert the proportion to an equation: r = (3/2) * n\n    # Substitute the value of r from the second equation: n + 10 = (3/2) * n\n    # Rearrange the equation: 10 = (3/2) * n - n \n    # Simplify by finding a common denominator: 10 = (3n - 2n)/2\n    # Multiply both sides by 2 to clear the fraction: 20 = n\n    # Use the value of n to find r: r = 20 + 10 = 30\n\n    n = 20  # Nancy's walking distance\n    r = 30  # Randy's walking distance\n\n    # The total distance is the sum of the distances Nancy and Randy walked.\n    d = n + r\n    return d\n\nans = solution()"
    ],
    "8b3e2473ae0743c19785cba9cb052741": [
        "def solution():\n    sum1 = sum(range(10, 21, 2))\n    sum2 = sum(range(9, 20, 2))\n    return sum1 - sum2\n\nans = solution()"
    ],
    "77cc490d98fc4ff0b16ec404452ab1f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, sister = symbols('alice sister')\n\n    # Alice is twice as old as her sister now\n    equation1 = Eq(alice, 2 * sister)\n    # In 10 years' time, their total age is 53 years old\n    equation2 = Eq(alice + 10 + sister + 10, 53)\n\n    solutions = solve((equation1, equation2), (alice, sister))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "5eb6f108f7f945d3b8e14b92f427c6c4": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n    count = 0\n    for combo in permutations(digits, 3):\n        if sum(combo) == 8 and combo[2] % 2 == 0 and combo[0] != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "9a8ebe1067614f2ba696f9ca243810e9": [
        "def solution():\n    for i in range(10000, 100000):\n        original_number = i * 10 + 2  # add 2 as units digit\n        new_number = int(str(2) + str(i))  # place 2 at the beginning\n        if new_number == original_number / 3:\n            return original_number\n\nans = solution()"
    ],
    "5fdcb9eaeeda4228836991b47e7cf8da": [
        "def solution():\n    total_bars = 43\n    people = 4\n    bars_left = total_bars % people\n    return bars_left\n\nans = solution()"
    ],
    "807a797d374546a7ad31ed32cc60158c": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 5), (6, 8), (7, 9)]\n    num, mod = solve_congruence(*congruences)\n\n    while num < 500:\n        num += mod\n\n    return num if num < 1000 else None\n\nans = solution()"
    ],
    "c1b3143db8aa464aab4fa542021b858a": [
        "def solution():\n    sum_per_place = a + b + c\n    sum_hundreds = sum_per_place * 100 * 2  # Each digit appears 2 times in the hundreds place\n    sum_tens = sum_per_place * 10 * 2       # Each digit appears 2 times in the tens place\n    sum_ones = sum_per_place * 2            # Each digit appears 2 times in the ones place\n    total_sum = sum_hundreds + sum_tens + sum_ones\n    return total_sum\n\nans = solution()"
    ],
    "09cfeee5f94b44469b0645a7a6453ce2": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(10):\n            ab = a * 10 + b\n            ba = b * 10 + a\n            result = ab * ba\n            if (result % 100 == 0) and (result // 100) < 100:\n                return ab\n\nans = solution()"
    ],
    "0e0926913a4c49b6b42a2bff3086a037": [
        "def solution():\n    total_students = 30\n    passed_first_exam = 25\n    failed_second_exam = 12\n\n    # Passed the second exam but failed the first\n    passed_second_failed_first = 3\n\n    # Number of students who passed both exams\n    passed_both = passed_first_exam - passed_second_failed_first\n\n    # Number of students who failed the first exam\n    failed_first_exam = total_students - passed_first_exam\n\n    # Number of students who passed the second exam\n    passed_second_exam = total_students - failed_second_exam\n\n    # Number of students who passed only the first exam\n    passed_only_first_exam = total_students - (passed_both + failed_first_exam + passed_second_failed_first)\n\n    return passed_only_first_exam\n\nans = solution()"
    ],
    "93167d80f006455787219151d56379f4": [
        "def solution():\n    pay_for_hours_worked = 78\n    hours_worked = 6.5\n    desired_pay = 300\n    \n    hourly_rate = pay_for_hours_worked / hours_worked\n    hours_needed_for_desired_pay = desired_pay / hourly_rate\n    \n    return hours_needed_for_desired_pay\n\nans = solution()"
    ],
    "3ef3e16ae5454ad18e360ceeb9eeef62": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    large_sack, small_sack = symbols('large_sack small_sack')\n    equation1 = Eq(large_sack, small_sack + small_sack * 20 / 100)\n    equation2 = Eq(large_sack + small_sack, 77)\n\n    solutions = solve((equation1, equation2), (large_sack, small_sack))\n\n    return solutions[large_sack]\n\nans = solution()"
    ],
    "f165d10b0a934af9ba1ae1c8293984e6": [
        "def solution():\n    ans = round(5 / 9, 2)\n    return ans\n\nans = solution()"
    ],
    "3569ba2a31094a19827f25ea3598dbd8": [
        "def solution():\n    # The least 5-digit palindrome is 10001 (since 00000 is not a five-digit number)\n    least_5_digit_palindrome = 10001\n    # The greatest 6-digit palindrome is 999999\n    greatest_6_digit_palindrome = 999999\n    \n    # Calculate the difference between the two palindrome numbers\n    difference = greatest_6_digit_palindrome - least_5_digit_palindrome\n    \n    return difference\n\nans = solution()"
    ],
    "19d5b1dcfa2c4b1bb5d7e097116869d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges, apples = symbols('oranges apples')\n\n    # Mrs Lee had a total of 125 oranges and apples.\n    total_fruits_eq = Eq(oranges + apples, 125)\n\n    # She sold half of the apples and 35 oranges.\n    # In the end, she had an equal number of oranges and apples left.\n    remaining_fruits_eq = Eq(oranges - 35, apples / 2)\n\n    # Solve the system of equations\n    solutions = solve((total_fruits_eq, remaining_fruits_eq), (oranges, apples))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "d77af89b3f1c41dd8496bce0d6d3ec08": [
        "def solution():\n    ans = sum(len(str(i)) for i in range(1, 59))\n    return ans\n\nans = solution()"
    ],
    "019e5a54ec7f459790a6d32439e83dfb": [
        "def solution():\n    count = 0\n    digit_sum = 0\n    i = 1200\n\n    while count < 2011:\n        str_num = str(i)\n        digit_len = len(str_num)\n        if count + digit_len >= 2011:\n            return int(str_num[-(2011 - count)])\n        count += digit_len\n        i -= 1\n\n    return -1\n\nans = solution()"
    ],
    "e0b9281bf0a54571a6295132e8b1f3b8": [
        "def solution():\n    matthew_pencils = 31\n    samantha_pencils = matthew_pencils - 6\n    return samantha_pencils\n\nans = solution()"
    ],
    "80120be608194dd2b89d6d3c9721eb31": [
        "def solution():\n    students = 35\n    capacity = 6\n    min_cabins = -(-students // capacity)  # Ceiling division to get the minimum number of cabins\n\n    return min_cabins\n\nans = solution()"
    ],
    "742b4a19edd64989a9bc0c3e3a6c14e3": [
        "def solution():\n    coins = 1\n    while True:\n        if (coins // 4) + 2 == coins // 3:\n            break\n        coins += 1\n    return coins\n\nans = solution()"
    ],
    "36e64178982945cca898597516b4d750": [
        "def solution():\n    books_to_right = 6\n    position_from_left = 14\n\n    total_books = position_from_left + books_to_right\n\n    return total_books\n\nans = solution()"
    ],
    "697722b344fb494fa3ef4ecb759d5167": [
        "def solution():\n    last_multiple = 50 // 5 * 5\n    first_multiple = 5\n    number_of_multiples = last_multiple // 5\n\n    sum_of_multiples = (number_of_multiples * (first_multiple + last_multiple)) // 2\n\n    return sum_of_multiples\n\nans = solution()"
    ],
    "bc3d8ec301fc410598e59a2ceb2b13e3": [
        "def solution():\n    speed_planet_1 = 30  # km per minute\n    speed_planet_2 = 40  # km per minute\n    time_minutes_ago = 5\n\n    # The planets are moving towards each other, so we add up their speeds\n    relative_speed = speed_planet_1 + speed_planet_2  # km per minute\n\n    # Calculate the distance covered by both planets 5 minutes ago\n    distance_apart = relative_speed * time_minutes_ago\n\n    return distance_apart\n\nans = solution()"
    ],
    "913c9cae5532421db2aefcd71661c685": [
        "def solution():\n    # There are six choices for the first digit (1 to 5, because the number is two digits long)\n    # and six choices for the second digit (0 to 5)\n    # But we cannot use 0 as the first digit because it's a two-digit number\n    first_digit_choices = 5  # 1 to 5\n    second_digit_choices = 6  # 0 to 5\n    \n    total_combinations = first_digit_choices * second_digit_choices\n    \n    return total_combinations\n\nans = solution()"
    ],
    "5c51cffb043942adb46a09a26bc746ab": [
        "def solution():\n    first_term = 26\n    last_term = 626\n    difference = 34 - 26\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "27cc97e40ad844c982dd1a9f1e766432": [
        "def solution():\n    paid_price = 64\n    discount_rate = 0.20\n    original_price = paid_price / (1 - discount_rate)\n    return original_price\n\nans = solution()"
    ],
    "d4c00e90a8ef4ae0981bbeedc1858cd9": [
        "def solution():\n    # Let the number of cars be x and the number of motorbikes be y.\n    # Each car has 4 tyres and each motorbike has 2 tyres.\n    # We have two equations:\n    # x + y = 140 (total number of vehicles)\n    # 4x + 2y = 490 (total number of tyres)\n    # To solve these equations, we can express y in terms of x from the first equation:\n    # y = 140 - x\n    # Substitute y in the second equation:\n    # 4x + 2(140 - x) = 490\n    # Simplify:\n    # 4x + 280 - 2x = 490\n    # 2x = 490 - 280\n    # 2x = 210\n    # x = 105\n    # Therefore, the number of cars (x) is 105.\n    return 105\n\nans = solution()"
    ],
    "fa4eb19fd6df49bdb4533fec025fa83a": [
        "def solution():\n    ans = 125 * (76 + 12)\n    return ans\n\nans = solution()"
    ],
    "730105f481354ec491084be98c91d6f1": [
        "def solution():\n    total_distance = 11\n    day_climb = 3\n    night_slide = 1\n    net_distance = day_climb - night_slide\n\n    days = (total_distance - day_climb) // net_distance\n    if (total_distance - day_climb) % net_distance != 0:\n        days += 1\n    days += 1  # final climb\n\n    return days\n\nans = solution()"
    ],
    "031e28e1f3ad4f9f868951764773e37c": [
        "def solution():\n    total_litres = 36\n    ratio_sum = 4 + 5\n    apple_juice_ratio = 4\n\n    apple_juice_litres = (apple_juice_ratio / ratio_sum) * total_litres\n    return apple_juice_litres\n\nans = solution()"
    ],
    "4958c2ee692b42cdaaf22c2892011be2": [
        "def solution():\n    num = 8.765\n    ans = round(num, 1)\n    return ans\n\nans = solution()"
    ],
    "aa07d321ec634d83a0c7f8d255553cff": [
        "def solution():\n    total_avocados = 960\n    per_box = 8\n\n    num_boxes = total_avocados // per_box\n\n    return num_boxes\n\nans = solution()"
    ],
    "b81938b8cf7a46a4b628bfa5a8634ad1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    number = symbols('number')\n    equation = Eq(2 * number + 12, 26)\n\n    solution = solve(equation, number)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5e3921774a0148c58a168a7d4d6a9158": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, n = symbols('a n')\n    # Create equations based on remainders given\n    eq1 = Eq(190 % n, a)\n    eq2 = Eq(137 % n, a + 4)\n    eq3 = Eq(101 % n, a + 6)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (a, n))\n\n    # Since we need the remainder when 299 is divided by n\n    for s in solutions:\n        if s[n] > 0:\n            return 299 % s[n]\n\nans = solution()"
    ],
    "de030313f1e64b389d5594c99dd4dafe": [
        "def solution():\n    return 0.2 * 5.39\n\nans = solution()"
    ],
    "abaa56505ee547838c84f84921be0ebb": [
        "def solution():\n    n = 1  # Start searching from the smallest possible integer that meets the first condition\n    while True:\n        if n % 2 == 1 and n % 13 == 1:  # Check both conditions\n            return n\n        n += 1\n\nans = solution()"
    ],
    "1cecf15afbce45239bf7e71e6a2da145": [
        "def solution():\n    ans = (9/5) * (25 / 100) + (1/4) * 2.2 - 0.25\n    return ans\n\nans = solution()"
    ],
    "c5ef0c07edfc4211afdaa999ad856197": [
        "def solution():\n    total_students = 5 * 100\n    donation_per_student = 5.78\n    total_donation = total_students * donation_per_student\n\n    return total_donation\n\nans = solution()"
    ],
    "9371af16b67240519deb5e635949e1a7": [
        "def solution():\n    max_sum = 0\n    for x in range(2, 200):\n        if all(x % i != 0 for i in range(2, x)):\n            y = 200 - x * 2\n            if y > 1 and all(y % i != 0 for i in range(2, y)) and x != y:\n                max_sum = max(max_sum, x + y)\n    return max_sum\n\nans = solution()"
    ],
    "86cd9b725006412db04f636eca50d89b": [
        "from math import factorial\n\ndef solution():\n    total_numbers = factorial(6)  # Total permutations for 6 digits\n    count_2 = factorial(2)        # Repetitions of the digit 2\n    count_3 = factorial(2)        # Repetitions of the digit 3\n    \n    # Dividing by the repetitions for 2's and 3's to handle duplicate counts\n    ans = total_numbers // (count_2 * count_3)\n    \n    return ans\n\nans = solution()"
    ],
    "33d52a12c5824537a7ab10162e240c2c": [
        "def solution():\n    spent = 2  # Amount spent in pence\n    fraction_of_total = 1 / 4  # Fraction which represents the part of the total money spent\n    total_money = spent / fraction_of_total  # Calculate the total money by dividing the spent amount by fraction\n\n    return total_money\n\nans = solution()"
    ],
    "80c9bf8ad95b4909a6d7ee77ac0d7e51": [
        "def solution():\n    teams = 8\n    total_rounds = teams * (teams - 1) // 2  # Since each match consists of 2 teams\n    return total_rounds\n\nans = solution()"
    ],
    "590a4f620ce648a89e73074cf3c6acf5": [
        "def solution():\n    a = 6\n    b = 7\n    ans = a * 3 + b - 4\n    return ans\n\nans = solution()"
    ],
    "f39a0d61562749f19a4d1e5e510dac81": [
        "def solution():\n    result = (7/9) * 27\n    return result\n\nans = solution()"
    ],
    "3d554443b1224a4da2b07f8233870170": [
        "from fractions import Fraction\n\ndef solution():\n    # Compute the left-hand-side expression (5 1/6 + 6 1/5)\n    lhs = Fraction(31, 6) + Fraction(31, 5)\n\n    # Compute the right-hand-side expression (1/6 + 1/5)\n    rhs = Fraction(1, 6) + Fraction(1, 5)\n\n    # Divide the left-hand-side by the right-hand-side\n    ans = lhs / rhs\n\n    return ans\n\nans = solution()"
    ],
    "c4bf31a44d8d46c9b19634c1115ae2a2": [
        "from itertools import permutations\n\ndef solution():\n    digits = [3, 5, 9]\n    perms = sorted([''.join(map(str, perm)) for perm in permutations(digits)])\n    fifth_number = perms[4]  # Index starts from 0, so the fifth position is index 4\n    return int(fifth_number)\n\nans = solution()"
    ],
    "6ed2905a0c1c4583b578668431fbae3f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    doc, happy, dopey = symbols('doc happy dopey')\n    sleepy = 80\n    sneezy = bashful = grumpy = dopey\n\n    eq1 = Eq(doc, happy + 10)\n    eq2 = Eq(happy, dopey + 10)\n    eq3 = Eq(doc + sleepy, dopey + sneezy)\n\n    solutions = solve((eq1, eq2, eq3), (doc, happy, dopey))\n\n    total_height = solutions[doc] + solutions[happy] + 4*solutions[dopey] + sleepy\n\n    return total_height\n\nans = solution()"
    ],
    "d1cf2646f95e48aaab2267eb79ed0eb3": [
        "def solution():\n    total_trees = 60\n    trees_per_side = total_trees // 4\n    return trees_per_side\n\nans = solution()"
    ],
    "d07b83cca75e406b9cac57296901269a": [
        "def solution():\n    distance_in_5_hours = 250\n    time_in_5_hours = 5\n    time_in_3_hours = 3\n\n    distance_in_3_hours = (distance_in_5_hours / time_in_5_hours) * time_in_3_hours\n\n    return distance_in_3_hours\n\nans = solution()"
    ],
    "f7ab8cb826c649ec85b7b2cea10e2333": [
        "def solution():\n    for number in range(10, 60):\n        if number % 8 == 3 and number % 7 == 6:\n            return number\n\nans = solution()"
    ],
    "17bc582ed1bf4564b574312e59268176": [
        "def solution():\n    highway_length_per_day = 1000 / 5\n    days_needed = 2600 / highway_length_per_day\n    return days_needed\n\nans = solution()"
    ],
    "0d15dac81380463388b2f48a1e5a4ac4": [
        "def solution():\n    # Number of gaps between trees is one less than the number of trees\n    num_gaps = 30 - 1\n    # Distance between each tree\n    distance_each_gap = 5\n    # Length of the road is the total distance covered by the gaps\n    length_road = num_gaps * distance_each_gap\n\n    return length_road\n\nans = solution()"
    ],
    "29f0c1773b854d5b946e865190eba514": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    triangle = symbols('triangle')\n\n    equation = Eq(triangle * 6 + 12, 3 * 6 + 36)\n\n    solution = solve(equation, triangle)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b5428109db6f4a889887b92377a44169": [
        "def solution():\n    first_term = 12\n    last_term = 90\n    # The sum of an arithmetic series is given by n/2 * (first_term + last_term)\n    # where n is the number of terms\n    num_terms = last_term - first_term + 1  # +1 because the sequence is inclusive\n    sum_of_series = num_terms / 2 * (first_term + last_term)\n    # Check if the sum is even or odd\n    ans = 'Even' if sum_of_series % 2 == 0 else 'Odd'\n    return ans\n\nans = solution()"
    ],
    "645960391d9a40f287074aea24d065e6": [
        "def solution():\n    product = 1\n    for i in range(2, 10):\n        product *= (1 + (1 / i))\n    return product\n\nans = solution()"
    ],
    "5ba5f881a3d44e1588df5aa8c2d9b7be": [
        "from sympy import isprime\n\ndef solution():\n    count = 0\n    for num in range(0, 20):\n        if isprime(num) and isprime(num + 6) and isprime(num - 6):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e7597a502cf74421b35bb550a54a362d": [
        "def solution():\n    return 54 * 7\n\nans = solution()"
    ],
    "5b18261bd85f4736bb866cd18fa2f7c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let q represent Qiang's hat number, r for Rory's, and s for Sophia's\n    q, r, s = symbols('q r s')\n\n    # Rory sees Qiang and Sophia's hats, therefore, r = q + s = 11\n    # Sophia sees Qiang and Rory's hats, therefore, s = q + r = 17\n    # Qiang sees Rory and Sophia's hats, therefore, q = r + s = 22\n\n    equations = (Eq(q + s, 11), Eq(q + r, 17), Eq(r + s, 22))\n    solutions = solve(equations, (q, r, s))\n    \n    # Get the largest value from solutions\n    return max(solutions[q], solutions[r], solutions[s])\n\nans = solution()"
    ],
    "76403d5e9dca4ff6b2fc3602bef45a7e": [
        "def solution():\n    total_people = 340 + 20\n    bus_capacity = 25\n    buses_needed = -(-total_people // bus_capacity)  # Ceiling division to ensure all people have a bus\n\n    return buses_needed\n\nans = solution()"
    ],
    "ec3693af136e4822b07b647b190d64ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    x = symbols('x')\n\n    # Formulate the equation\n    # Distance = Speed * Time\n    # Convert minutes to hours by dividing by 60\n    equation = Eq((x * 0.5) + ((x - 20) * 0.5) + ((x + 10) * 0.5), 70)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3bd18c4e21064eeda7d67edd78bf418c": [
        "def solution():\n    pages = 345\n    digits = 0\n    \n    # Calculate digits in ranges: 1-9, 10-99, and so on\n    if pages < 10:\n        digits = pages\n    elif pages < 100:\n        digits = (pages - 9) * 2 + 9\n    else:\n        digits = (pages - 99) * 3 + (99 - 9) * 2 + 9\n\n    return digits\n\nans = solution()"
    ],
    "7992bad8c26d42e1b736d8fab12944f1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for total prize money\n    total_prize = symbols('total_prize')\n    \n    # Define the equation based on the given information\n    equation = Eq((1/5 + 1/15) * total_prize, 360)\n    \n    # Solve the equation for the total prize money\n    total_prize_money = solve(equation, total_prize)\n    \n    # Return the total prize money\n    return total_prize_money[0]\n\nans = solution()"
    ],
    "46bce6274909462595b7cd5d528fd678": [
        "def solution():\n    from math import factorial\n\n    # Positions: 1 2 3 (Coach) 5 6 7\n    # Since the coach is fixed, we need to calculate permutations for other 6 people,\n    # and since the captain must be next to the coach, the captain has 2 choices (position 2 or 5).\n\n    # Choose the position for the captain: 2 possibilities.\n    captain_choices = 2\n\n    # Permute the remaining 5 players in the remaining 5 positions.\n    other_players_permutations = factorial(5)\n    \n    # Use the multiplication principle.\n    total_permutations = captain_choices * other_players_permutations\n\n    return total_permutations\n\nans = solution()"
    ],
    "21ac3377e3e04f7095b5e98b24de2cf5": [
        "def solution():\n    cube_root = (-0.512) ** (1/3)\n    square = (-1.2) ** 2\n    ans = cube_root + square\n    return ans\n\nans = solution()"
    ],
    "89aaad0e5929492ebd91a881ccbdcd20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b be the side length of the square with boys\n    # Let g be the side length of the square with girls (one less layer than boys)\n    b, g = symbols('b g')\n\n    # The outermost square area minus the next inner square area gives us the number of boys\n    boys = b**2 - (b - 2)**2\n\n    # The second outermost square area minus the third outermost square area gives us the number of girls\n    girls = (b - 2)**2 - (b - 4)**2\n    \n    # The difference between boys and girls is 20\n    equation1 = Eq(boys - girls, 20)\n\n    # Since b and g differ by 1 layer, b = g + 2\n    equation2 = Eq(b - g, 2)\n\n    # Solve for b and g\n    solutions = solve((equation1, equation2), (b, g))\n    b_solution = solutions[b]\n\n    # Total students is the area of the outermost square (b_solution**2)\n    total_students = b_solution**2\n\n    return total_students\n\nans = solution()"
    ],
    "45bfd7efccc8407995a20fc0424601ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create a symbol for the number of penguins\n    penguins = symbols('penguins')\n\n    # Equation for the case where each penguin gets 3 fish: total fish = 3 * penguins + 25\n    # Equation for the case where each penguin gets 6 fish, except one that gets only 1 fish:\n    # total fish = 6 * (penguins - 1) + 1\n    # Since the total amount of fish is fixed, the two expressions should be equal.\n    eq = Eq(3 * penguins + 25, 6 * (penguins - 1) + 1)\n\n    # Solve the equation for the number of penguins\n    solution = solve(eq, penguins)\n\n    return solution[0]\n\nans = solution()"
    ],
    "185585248b784d759d3d8f88fb2bb399": [
        "def solution():\n    def term(n):\n        return ((-1 + (1 + 8 * n) ** 0.5) / 2)\n    \n    n = 1\n    sum_terms = 0\n    total_terms_counted = 0\n    while total_terms_counted < 30:\n        current_term_value = int(term(n))\n        terms_to_add = min(current_term_value, 30 - total_terms_counted)\n        sum_terms += terms_to_add * n\n        total_terms_counted += terms_to_add\n        n += 1\n        \n    return sum_terms\n\nans = solution()"
    ],
    "963c4317b46e4ab89cf2305881120383": [
        "def solution():\n    result = (25 / 100) * 20 + (1 / 5) * 30 + (2 / 3) * 18\n    return result\n\nans = solution()"
    ],
    "c7fe09cca9884a74bd0f46ebfe209d6e": [
        "def solution():\n    for a in range(10):\n        number = int(f\"1{a}7731\")\n        if number % 11 == 0:\n            return a\n\nans = solution()"
    ],
    "1cdbbd42038c4d25a4e3858e94b44f02": [
        "def solution():\n    # Assuming all other students received no more than Alice votes\n    maximum_votes_for_others = 31\n    # Total votes received by Alice, Betty, and Cindy so far\n    total_current_votes = 31 + 41 + 47\n    # Total votes that haven't been cast yet\n    remaining_votes = 140 - total_current_votes\n    # To ensure Cindy's victory, she needs to have at least one more vote than\n    # the maximum votes any other student can possibly have after all votes are in.\n    cindy_needs_at_least = maximum_votes_for_others + remaining_votes + 1\n    # The additional votes Cindy needs is the difference between what she needs and what she already has\n    additional_votes_needed = cindy_needs_at_least - 47\n\n    return additional_votes_needed\n\nans = solution()"
    ],
    "0f27bf9162ed4fbba2f119e08ed1cf48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for Chelsia and Brian's money\n    chelsia, brian = symbols('chelsia brian')\n\n    # Define the two equations based on the problem\n    equation1 = Eq(3/4 * chelsia, 5/6 * brian)\n    equation2 = Eq(chelsia, brian + 24)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (chelsia, brian))\n\n    # Calculate the total amount of money Chelsia and Brian have together\n    total_money = solutions[chelsia] + solutions[brian]\n\n    return total_money\n\nans = solution()"
    ],
    "477f4016e7a14d6cb1f6561d4b2f7cbc": [
        "def solution():\n    # Gina's age at a specific year\n    gina_age_on_2005 = 50\n    # James's age at a specific year\n    james_age_on_1997 = 20\n    \n    # Years in question\n    year_2005 = 2005\n    year_1997 = 1997\n    \n    # Calculate James's birth year\n    james_birth_year = year_1997 - james_age_on_1997\n    \n    # Calculate Gina's age when James was born\n    gina_age_when_james_born = gina_age_on_2005 - (year_2005 - james_birth_year)\n    \n    return gina_age_when_james_born\n\nans = solution()"
    ],
    "9e011e38eb9e41da9b82d8e1b79479a9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sales = symbols('sales')\n    \n    # Define the piecewise commission function based on sales\n    commission = (\n        0.02 * sales if sales <= 25000 else\n        0.02 * 25000 + 0.05 * (sales - 25000)\n    )\n    \n    # Total salary equation\n    salary = 2500 + commission\n    \n    # Salary for July is $3300\n    salary_july = Eq(salary, 3300)\n    \n    # Solve for sales\n    sales_for_july = solve(salary_july, sales)\n    \n    return sales_for_july[0]\n\nans = solution()"
    ],
    "14374f60574642deb9cb3cb4947ba4d5": [
        "def solution():\n    # 7 / -3.3 recurring is -21 / 10\n    numerator1 = -21 / 10\n    # cube root of -0.027 is -0.3\n    denominator1 = -0.3\n\n    # 2^3 / 4^2 = 8 / 16 = 1 / 2\n    numerator2 = 1 / 2\n    # 0.125 is 1/8, and [1.8-(0.2*7)] simplifies to [1.8-1.4]=0.4\n    denominator2 = (1 / 8) * 0.4\n    \n    # 0.1 / 0.1(42857) recurring is 1 / (1 + 1/7)\n    term1 = 1 / (1 + 1/7)\n    \n    # 2 * 0.3 = 0.6\n    term2 = 2 * 0.3\n\n    # The expression then simplifies as follows:\n    ans = (numerator1 / denominator1) + (numerator2 / denominator2) - (term1 + term2)\n    return ans\n\nans = solution()"
    ],
    "02c0f5596e944b52b450f57444a52432": [
        "def solution():\n    # Let's introduce variables to represent the initial number of marbles\n    # Let r be the number of marbles Ryan had originally\n    # Let a be the number of marbles Audrey had originally\n    \n    # From the problem statement, we have the following two equations:\n    # r / a = 2 / 7  =>  7r = 2a  =>  a = 7r / 2\n    # (r + 20) / (a - 80) = 1 / 3  =>  3*(r + 20) = a - 80\n    \n    # Substitute the value of a from the first equation into the second equation\n    # 3*(r + 20) = (7r / 2) - 80\n    \n    # Solving the equation for r\n    r = symbols('r')\n    equation = Eq(3 * (r + 20), (7 * r / 2) - 80)\n    r_value = solve(equation, r)[0]\n    \n    # Using the value of r to find the initial number of marbles Audrey had\n    a_value = 7 * r_value / 2\n    \n    return a_value\n\nans = solution()"
    ],
    "e491c5ac6e9343c7ba3274532283f9c9": [
        "def solution():\n    total_height_six_players = 6 * 150\n    average_height_four_players = 150 - 2\n    total_height_four_players = 4 * average_height_four_players\n\n    total_height_two_players = total_height_six_players - total_height_four_players\n    average_height_two_players = total_height_two_players / 2\n \n    return average_height_two_players\n\nans = solution()"
    ],
    "bfde156ecaa4455aabd96e9c177c7723": [
        "def solution():\n    # Probability of passing on the first attempt\n    p_first = 0.4\n    # Probability of failing the first attempt but passing on the second\n    p_second = (1 - p_first) * 0.5\n    # Probability of failing the first and second attempts but passing on the third\n    p_third = (1 - p_first) * (1 - 0.5) * 0.3\n\n    # Total probability of passing before the fourth attempt\n    total_probability = p_first + p_second + p_third\n    \n    return total_probability\n\nans = solution()"
    ],
    "e928057276ba4f80816203d0efad0161": [
        "def solution():\n    digits = 0\n    thickness = 0\n    while digits < 1014:\n        thickness += 1\n        if thickness < 10:\n            digits += 1\n        elif thickness < 100:\n            digits += 2\n        elif thickness < 1000:\n            digits += 3\n        else:\n            digits += 4\n    return thickness\n\nans = solution()"
    ],
    "4e41a656965248ecb27c18b15b949af4": [
        "def solution():\n    types_of_fruits = 3\n    kinds_of_vegetables = 4\n\n    combinations = types_of_fruits * kinds_of_vegetables\n\n    return combinations\n\nans = solution()"
    ],
    "601f7cda15454bc985fa1ee54ba442cd": [
        "def solution():\n    routes_A_to_B = 2\n    routes_B_to_C = 3\n    total_routes = routes_A_to_B * routes_B_to_C\n    return total_routes\n\nans = solution()"
    ],
    "9dd71278e1224d6aae7ee3729d3d4491": [
        "def solution():\n    total_pieces = 450\n    pieces_per_hour = 50\n\n    hours_needed = total_pieces / pieces_per_hour\n\n    return hours_needed\n\nans = solution()"
    ],
    "9f1e95f7b0c743fc8509bf8504dcf8e6": [
        "def solution():\n    from math import factorial\n    n = factorial(15)\n    count = 0\n    while n % 10 == 0:\n        count += 1\n        n //= 10\n    return count\n\nans = solution()"
    ],
    "7dfcb604b94540d68268987c685cf44e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    age = symbols('age')\n\n    equation = Eq(age / 4 + 32, age - 22)\n\n    solution = solve(equation, age)\n\n    return solution[0]\n\nans = solution()"
    ],
    "25f54cb721264bd5a88945dcae9a35da": [
        "def solution():\n    n = 30  # Number of terms\n    a1 = 50 # First term\n    an = 50 - (n - 1) # 30th term\n    sum_n = (n * (a1 + an)) // 2 # Sum of the first n terms of an arithmetic sequence\n\n    return sum_n\n\nans = solution()"
    ],
    "1c335261c4c74c9da70e62d9e80c84f7": [
        "def solution():\n    for n in range(1, 100): # An upper limit is set since we're looking for a reasonable size of a square array\n        boys = (2*n+1)**2 - (2*n)**2\n        girls = (2*n)**2 - (2*n-1)**2\n        if boys - girls == 44:\n            total_students = (2*n+1)**2\n            return total_students\n\nans = solution()"
    ],
    "170205b36dfc4146a66fb3af25081782": [
        "def solution():\n    max_apples_for_second = 0\n    for first in range(1, 48):\n        for second in range(first + 1, 48):\n            for third in range(second + 1, 48):\n                fourth = 48 - first - second - third\n                if fourth > third and fourth < 48:\n                    max_apples_for_second = max(max_apples_for_second, second)\n    return max_apples_for_second\n\nans = solution()"
    ],
    "949b4d4e3965458786c3c12e4175a6f5": [
        "def solution():\n    total_distance = 18\n    daily_climb = 7\n    special_day_climb = 3\n    total_climbed_after_5_days = daily_climb * 5\n    total_climbed_after_6_days = total_climbed_after_5_days + special_day_climb\n    if total_climbed_after_6_days < total_distance:\n        slide_down_at_night = total_climbed_after_5_days - (total_distance - special_day_climb)\n    else:\n        slide_down_at_night = daily_climb - (total_climbed_after_6_days - total_distance)\n    return slide_down_at_night\n\nans = solution()"
    ],
    "e0acffb17f4e422ab27995621048da00": [
        "def solution():\n    ans = 641 + 283\n    return ans\n\nans = solution()"
    ],
    "0d196763e09c414685c93b6925e1fabd": [
        "def solution():\n    times = [1, 2, 5, 10]  # Time taken by Eddie, Jack, Rose, and Mary in minutes.\n    \n    # When sending two people to the other side, one person must return with the boat.\n    # Efficient strategy is to send the two slowest together, and bring the fastest back.\n    # Next, send the two fastest to the other side and bring the second fastest back.\n    min_time = times[0] + 2 * times[1] + times[3]\n    \n    return min_time\n\nans = solution()"
    ],
    "70a8c903a8c54590bc01cc6b20324389": [
        "def solution():\n    # Assume original length and width to be l and w\n    # New length after increase is l + 12\n    # Perimeter of new rectangle is 38cm\n    # Perimeter formula: P = 2(l + w)\n    \n    # Equation for new perimeter: 2(l + 12 + w) = 38\n    # Simplify to get original length and width in terms of original perimeter: 2l + 2w + 24 = 38\n    # Therefore, original perimeter (2l + 2w) is 38 - 24\n    \n    original_perimeter = 38 - 24\n    return original_perimeter\n\nans = solution()"
    ],
    "a395940e0e844a3e82a13464bbacb552": [
        "def solution():\n    total = 0\n    for i in range(1, 90, 2):\n        total += i**2 - (i+1)**2\n    return total\n\nans = solution()"
    ],
    "f059162501fb4a40bea57cfdd90f953a": [
        "def solution():\n    num = 2**19 - 1\n    remainder = num % 5\n    return remainder\n\nans = solution()"
    ],
    "0a442caa186a4d35a9cda613970fe659": [
        "def solution():\n    for num in range(30, 41):\n        if num % 3 == 1 and num % 4 == 1:\n            return num\n\nans = solution()"
    ],
    "cc80ec556420466ca6feeb07d774bc7f": [
        "def solution():\n    from math import factorial\n\n    # There are 4 students\n    num_students = 4\n\n    # The number of ways to arrange n students is n!\n    num_ways = factorial(num_students)\n\n    return num_ways\n\nans = solution()"
    ],
    "20d9cd46576c4f6b873a928db5bdaa21": [
        "def solution():\n    # Possible foods Jenny can eat over three days\n    # Let C represent Chocolate, P represent Peaches, and S represent Strawberries\n    options = ['C', 'P', 'S']\n\n    # Start with chocolate on the first day\n    first_day = 'C'\n    \n    # Initialize counter for ways to eat\n    count = 0\n\n    # Second Day (Jenny can eat either Peaches or Strawberries)\n    for second_day in options[1:]:\n        # Third Day (Jenny can eat either of the two remaining options)\n        for third_day in options:\n            if third_day != second_day:\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "31bc73a765324ee2aad5b0ab3902429e": [
        "from math import factorial\n\ndef solution():\n    # Since rotating the table results in the same order,\n    # we fix one person and arrange the remaining 6.\n    # This is a circular permutation problem.\n    num_people = 7\n    fixed_seats = num_people - 1  # Fix one seat to avoid counting rotations.\n\n    # The number of arrangements for the remaining seats.\n    arrangements = factorial(fixed_seats)  # (n-1)!\n\n    return arrangements\n\nans = solution()"
    ],
    "9aeb348fb18f40a0a779246f193ec03e": [
        "def solution():\n    return 50 / (5 / 3)\n\nans = solution()"
    ],
    "d7af08f16a30475cbed750f87127cc91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for current ages of John and Emma\n    john, emma = symbols('john emma')\n\n    # Equation 1: Sum of John's and Emma's age in 3 years\n    equation1 = Eq(john + 3 + emma + 3, 27)\n\n    # Equation 2: Emma's age is the difference between her and John's ages\n    equation2 = Eq(emma, john - emma)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (john, emma))\n\n    return solutions[emma]\n\nans = solution()"
    ],
    "870fd125d6e84d51833e19966e6235aa": [
        "def solution():\n    average_daily_earnings = 70\n    number_of_working_days = 6\n    total_earnings = average_daily_earnings * number_of_working_days\n    return total_earnings\n\nans = solution()"
    ],
    "91f9ed36f52f4c4d90e9a09c340e6eda": [
        "def solution():\n    # The sum of two positive numbers a and b that equals to 8 can be written as:\n    # 8 = a + b, where a and b can be any positive integer and a > b\n    # This means we can start from a = 1 and b = 7 and go until a = 7 and b = 1\n    # However, since the order doesn't matter (a+b is the same as b+a), we count only half of the cases.\n    # Therefore, we can count the ways by just iterating from 1 to 8//2.\n\n    count = 0\n    for a in range(1, 8 // 2 + 1):\n        count += 1  # For each value of a, there is exactly one value of b that satisfies the equation.\n\n    return count\n\nans = solution()"
    ],
    "e247134ebc8e4290ab2c3cd47fbdb2bb": [
        "def solution():\n    # Let's denote Almaz's salary as x\n    # She spent 5/9 of her salary on a television, so she spent (5/9)*x on TV\n    # Remainder of the salary after buying television is x - (5/9)*x = (4/9)*x\n    # She then spent 3/4 of this remainder on a table\n    # Hence, the money spent on the table is (3/4) * ((4/9)*x)\n    # After buying the table, she has $160 left\n    # Therefore, the equation will be (4/9)*x - (3/4) * ((4/9)*x) = 160\n    # Let's solve this equation for x to find the full salary.\n\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    \n    # Write down the equation based on the problem statement\n    equation = Eq((4/9)*x - (3/4) * ((4/9)*x), 160)\n    # Solving the equation\n    full_salary = solve(equation, x)[0]\n    # The cost of the television is (5/9) of the full salary\n    cost_of_television = (5/9) * full_salary\n    \n    return cost_of_television\n\nans = solution()"
    ],
    "cdebf51b4d2f4676b84de41b5f4dfe1d": [
        "from math import comb\n\ndef solution():\n    # Choose 3 points out of 15 for forming a triangle\n    num_triangles = comb(15, 3)\n    return num_triangles\n\nans = solution()"
    ],
    "ce3ae2eb22604f669d81413a11524dfe": [
        "def solution():\n    sheets_per_quire = 24\n    quires_per_ream = 20\n    reams = 2\n\n    total_sheets = sheets_per_quire * quires_per_ream * reams\n\n    return total_sheets\n\nans = solution()"
    ],
    "d052b96519684cd689b26d905e6932f3": [
        "def solution():\n    # Tom's speed is 48 km/hour.\n    tom_speed = 48\n    # Jack's speed is 50 km/hour.\n    jack_speed = 50\n    \n    # Jack starts 3 hours later than Tom.\n    time_difference = 3\n    \n    # After another 5 hours, they are 15 km apart.\n    driving_time = 5\n    \n    # Calculate the distance Tom has traveled by the time Jack starts.\n    tom_distance_start = tom_speed * time_difference\n    \n    # Calculate the total distance both would have traveled until they are 15 km apart.\n    total_distance = tom_distance_start + (tom_speed + jack_speed) * driving_time + 15\n    \n    return total_distance\n\nans = solution()"
    ],
    "adc18060457c42cd841d26c05a300d86": [
        "def solution():\n    # Percentage of people choosing water based on the degrees on the pie chart\n    water_percentage = (36 / 360) * 100\n\n    # Total percentage based on given data\n    total_percentage = 25 + 30 + water_percentage  # tea (25%) + cola (30%) + water\n\n    # Percentage of people choosing coffee (100% - all other percentages)\n    coffee_percentage = 100 - total_percentage\n\n    # Find the total number of people by calculating how many percent seven people represent\n    total_people = 7 * (100 / coffee_percentage)\n\n    return int(total_people)\n\nans = solution()"
    ],
    "209df8fae20d4538a1d8ebbf630188c1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    children, dogs = symbols('children dogs')\n    \n    # Each child has 2 legs, each dog has 4 legs\n    equation1 = Eq(children * 2 + dogs * 4, 56)\n    \n    # There are 3 times as many dogs as children\n    equation2 = Eq(dogs, 3 * children)\n\n    solutions = solve((equation1, equation2), (children, dogs))\n\n    return solutions[children]\n\nans = solution()"
    ],
    "7df5d75f0cda456abe35ca8b128ad0bc": [
        "def solution():\n    x = (26 + 4) / 5\n    return x\n\nans = solution()"
    ],
    "48f752c3fb124d0eaef83bcc708662cc": [
        "def solution():\n    ans = (10**5) / (5**5)\n    return ans\n\nans = solution()"
    ],
    "6bfc77576d4c4d8e990e203ed5df4a98": [
        "def solution():\n    return 5.2 + 6.7 + 4.8\n\nans = solution()"
    ],
    "85433448087948ff8792d3be336da4ba": [
        "def solution():\n    # Let total number of pupils in the class be x\n    # Two fifths are absent, so three fifths are present\n    # According to the problem, three fifths of the total is 18\n    # (3/5) * x = 18\n    # Rearrange the equation to solve for x:\n    # x = 18 * (5/3)\n    x = 18 * (5/3)\n    return int(x)\n\nans = solution()"
    ],
    "11d9dfcd97f84a2b98dac9636f2ac079": [
        "def solution():\n    Z = (4 + 5)\n    return Z\n\nans = solution()"
    ],
    "71a881110b784d499125ce0c2aeceff4": [
        "def solution():\n    height_meters = 1.36\n    height_centimeters = height_meters * 100\n    return height_centimeters\n\nans = solution()"
    ],
    "1e0626005a234d7b9e16d436c68f0a46": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    saturday, sunday = symbols('saturday sunday')\n\n    equation1 = Eq(saturday, 4 * sunday - 5)\n    equation2 = Eq(saturday - sunday, 43)\n\n    solutions = solve((equation1, equation2), (saturday, sunday))\n\n    return solutions[saturday]\n\nans = solution()"
    ],
    "9838ab9595bb4b7698360b2187706163": [
        "def solution():\n    length = 50\n    width = 30\n    distance = 2\n\n    # Number of trees on the length side (subtracting the corner tree)\n    trees_on_length = (length // distance) - 1\n    # Number of trees on the width side (subtracting the corner tree)\n    trees_on_width = (width // distance) - 1\n    \n    # Total number of trees (adding the corner tree back four times for each corner)\n    total_trees = (trees_on_length + trees_on_width) * 2 + 4\n\n    return total_trees\n\nans = solution()"
    ],
    "0dd96e7150034b49b6e5114888b623ed": [
        "def solution():\n    total_sweets = 15\n    people = 3\n    sweets_per_person = total_sweets // people\n    return sweets_per_person\n\nans = solution()"
    ],
    "f22a2d40173242e9be3791a584a6bb8a": [
        "def solution():\n    initial_income = 500\n    income_tax_rate = 0.03\n    tax_amount = initial_income * income_tax_rate\n    final_income = initial_income - tax_amount\n\n    return final_income\n\nans = solution()"
    ],
    "79f81b8195b2409d9329430d172825a5": [
        "def solution():\n    result = (180 / (0.6 * 100))\n    return result\n\nans = solution()"
    ],
    "285cd6c94bbe4f0097e4b2365352fffc": [
        "def solution():\n    # Loop through all possible numbers with a 9 in the units place\n    for i in range(1, 10000):  # Assuming the number isn't too large\n        original_number = i * 10 + 9\n        new_number = int(str(9) + str(i))\n        if new_number == 4 * original_number:\n            return original_number\n\nans = solution()"
    ],
    "dc011b9713364f7faace482d69733c6e": [
        "def solution():\n    total_charge = 110\n    adult_price = 20\n    child_price = 15\n\n    count = 0\n    # Since we need at least two adults, we start with 2 adults and calculate the remaining amount for children\n    for adults in range(2, total_charge // adult_price + 1):\n        remaining = total_charge - (adults * adult_price)\n        if remaining % child_price == 0:\n            count = remaining // child_price\n            break\n            \n    return count\n\nans = solution()"
    ],
    "7a18842efc724f239e5f1cad37485c40": [
        "def solution():\n    total_squash = 750  # in millilitres\n    ratio_squash_to_water = 1 / 9\n    total_volume = total_squash * (1 + ratio_squash_to_water)  # total volume of the drink\n    bottle_volume = 1000  # 1 litre = 1000 millilitres\n\n    num_bottles = total_volume // bottle_volume  # Floor division to get the full bottles\n\n    return int(num_bottles)\n\nans = solution()"
    ],
    "5387ecceeb914413b67de510e2841de5": [
        "def solution():\n    base = 221\n    exponent = 2020\n    mod = 7\n\n    remainder = pow(base, exponent, mod)\n\n    return remainder\n\nans = solution()"
    ],
    "70e0934ac8904f528788ed9903ea3d65": [
        "def solution():\n    book_fraction = 1/3\n    bag_fraction = 1/2\n\n    # Calculate the remaining fraction of money after buying the book\n    remaining_after_book = 1 - book_fraction\n    \n    # Calculate the fraction spent on the bag from the remaining money\n    effective_bag_fraction = bag_fraction * remaining_after_book\n\n    # Cost of the book and the bag altogether\n    total_cost = 132\n\n    # Calculate initial amount of money\n    # Let X be the initial amount of money\n    # X * (book_fraction + effective_bag_fraction) = total_cost\n    initial_money = total_cost / (book_fraction + effective_bag_fraction)\n\n    return initial_money\n\nans = solution()"
    ],
    "dfcff5e4c31f43209c5c33c350232425": [
        "def solution():\n    ans = 736 + 4588\n    return ans\n\nans = solution()"
    ],
    "6e22fcfa859a4c8fbb3d505818fcf090": [
        "def solution():\n    # We are looking for a number A such that:\n    # A % 6 = 4 (if A puts 6 cookies into each box, she will have 4 cookies left)\n    # (A + 5) % 7 = 0 (if A puts 7 cookies into each box, she'll be short of 5 cookies)\n    # We also know that A must be fewer than 90 cookies.\n    \n    for A in range(1, 90):\n        if A % 6 == 4 and (A + 5) % 7 == 0:\n            return A\n\nans = solution()"
    ],
    "a977a5a877be459285ad29a00ee13491": [
        "def solution():\n    from sympy import divisors\n\n    for i in range(8, 1000):  # an arbitrary range to search for the number\n        if len(divisors(i)) == 8:\n            d = divisors(i)\n            if set([1, 2, 4, 7, 8]).issubset(d):\n                return i\n\nans = solution()"
    ],
    "526ef305508f433093616886e3aa2760": [
        "def solution():\n    # The last two digits of a number are its remainder when divided by 100\n    last_two_digits = (6**2015 + (2015 * 6) + 2015**6) % 100\n    return last_two_digits\n\nans = solution()"
    ],
    "629aa303c06d45f7aa5cf8fa6f9fed98": [
        "def solution():\n    # Save the details of the original equation for reference:\n    # 5 * ABCDEF = 6 * EFABCD\n    # Known: B = 2, D = 0\n    # We need to find FACE\n    \n    # Brute force all possible combinations of digits for A, C, E, and F\n    for A in range(10):\n        for C in range(10):\n            for E in range(10):\n                for F in range(10):\n                    # Making sure all digits are unique and conform to the constraints of being different\n                    if len({A, 2, C, 0, E, F}) == 6:\n                        ABCDEF = int(f\"{A}20{C}0{E}\")\n                        EFABCD = int(f\"{E}{F}A2BC\")\n                        # Calculate the values according to the formula given\n                        if 5 * ABCDEF == 6 * EFABCD:\n                            # If the condition satisfies, we found our number FACE\n                            return int(f\"{F}{A}{C}{E}\")\n\nans = solution()"
    ],
    "997806d0555f4e0b9f0c37e93f8a847d": [
        "def solution():\n    ans = 8234 - 909\n    return ans\n\nans = solution()"
    ],
    "cdd44981698d4cf1892f1b87d1ff7e7e": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n    ans = tens + tenths + hundredths\n    return ans\n\nans = solution()"
    ],
    "06a399e8df5e48ef97ce40b3d0ef5589": [
        "def solution():\n    original_price = 10\n    discount_rate = 0.10\n    discount_amount = original_price * discount_rate\n    sale_price = original_price - discount_amount\n    return sale_price\n\nans = solution()"
    ],
    "b76888b795364a3a97fa604d5a2de050": [
        "def solution():\n    jolene_position = 6\n    amy_position = 8\n    children_in_queue = jolene_position + amy_position - 1\n    return children_in_queue\n\nans = solution()"
    ],
    "48809ae2c3da43959ae3c238acb60f7f": [
        "def solution():\n    return 78.2 - 31.45 + 5.24 - 2.3\n\nans = solution()"
    ],
    "0b49d7a40bee40d08e1b699772470e6f": [
        "def solution():\n    height = 40\n    jump_up = 5\n    slide_down = 3\n    jumps = 0\n    current_height = 0\n\n    while current_height < height:\n        jumps += 1\n        current_height += jump_up\n        if current_height >= height:\n            break\n        if jumps % 2 == 0:\n            current_height -= slide_down\n\n    return jumps\n\nans = solution()"
    ],
    "f7fe017b34bc4119bfc266aeef3024e6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let c be the initial number of cows, and g be the initial number of goats.\n    c, g = symbols('c g')\n\n    # Initial condition: 65% of the animals in the farm were cows.\n    equation1 = Eq(c, 0.65 * (c + g))\n\n    # Updated conditions:\n    # 1. 240 more cows and goats were added, so the total is now c + g + 240.\n    # 2. Cows are now 85% (65% + 20%) of the total number of animals.\n    equation2 = Eq(c + 240, 0.85 * (c + g + 240))\n\n    # 3. The number of goats has doubled: 2g.\n    equation3 = Eq(g * 2, g + 240)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2, equation3), (c, g))\n\n    return solutions[g]\n\nans = solution()"
    ],
    "2b33ed6a37234a7f8cfa9077a2c039ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_cookies = symbols('total_cookies')\n    \n    # James sold 1680 cookies from the box in the first month and kept some\n    kept_first_month = total_cookies - 1680\n    \n    # In the second month, James sold 7/20 more than the first month and kept some\n    sold_second_month = 1680 + (7/20) * 1680\n    kept_second_month = total_cookies - sold_second_month\n    \n    # The number of cookies James kept decreased by 3/20\n    equation = Eq(kept_first_month - kept_second_month, (3/20) * total_cookies)\n    solution = solve(equation, total_cookies)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d8a87667da5c4baebedd2e3f7026d5e2": [
        "def solution():\n    i = 1\n    while True:\n        if i % 5 == 1 and i % 6 == 2 and i % 11 == 9:\n            return i\n        i += 1\n\nans = solution()"
    ],
    "d9935bb2a60f4b2a850a8a82e921285b": [
        "def solution():\n    return 253 * 160\n\nans = solution()"
    ],
    "22fbfe3347ba45c18a5ef712714e7ba8": [
        "def solution():\n    stamp_cost_pence = 46\n    pounds_to_pence = 300  # £3 = 300p\n\n    num_stamps = pounds_to_pence // stamp_cost_pence\n\n    return num_stamps\n\nans = solution()"
    ],
    "5a602b75179642109bb3448633b148be": [
        "def solution():\n    # Total perimeter of the pentagon\n    total_perimeter = 5 * 432\n    \n    # Since a sunflower is planted on each corner, we subtract 5 to account for these\n    # and divide the remaining length by 4 to find how many sunflowers are planted along the sides\n    sunflowers_along_sides = (total_perimeter - 5) // 4\n    \n    # Adding the 5 sunflowers planted on the corners\n    total_sunflowers = sunflowers_along_sides + 5\n    \n    return total_sunflowers\n\nans = solution()"
    ],
    "0c9feee3629744129e6cf814a2834df3": [
        "def solution():\n    return 58 * 36\n\nans = solution()"
    ],
    "68fd1201ef784aef8db355b79934af59": [
        "def solution():\n    return 100 * 99\n\nans = solution()"
    ],
    "225309bd862241c69715705eee0b6ecb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    t = symbols('t')  # t is the time Ryan drives at his usual speed\n    \n    # Create equations based on the problem statement\n    # Distance is the same in both cases, so the equations equate the two distances\n    # Distance at usual speed = 45 * t\n    # Distance at reduced speed = 30 * (t + 2)\n    \n    equation = Eq(45 * t, 30 * (t + 2))\n\n    # Solve for t\n    solution = solve(equation, t)\n\n    return solution[0]\n\nans = solution()"
    ],
    "abaffb07b2a34ab0ae3decd35f783b15": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"976{digit}3\")\n        if number % 3 == 0:\n            return digit\n\nans = solution()"
    ],
    "c710249ff4704f1da8138f0e161fa751": [
        "def solution():\n    total_people = 39\n    boat_capacity = 7\n    trip_time = 2\n    \n    # Calculate the number of full boat trips needed (every trip includes a return except the last)\n    full_trips = total_people // boat_capacity\n    # Every full trip involves going and coming back, so it takes twice the time, except the last trip\n    time_for_full_trips = (full_trips - 1) * trip_time * 2\n    \n    # Calculate if there are any remaining people after full trips\n    remaining_people = total_people % boat_capacity\n    # If there are remaining people, they will take one more trip to cross and no return is needed\n    time_for_remaining = trip_time if remaining_people > 0 else 0\n    \n    # Total time is the time for the full trips plus the time for remaining people\n    total_time = time_for_full_trips + time_for_remaining\n    \n    return total_time\n\nans = solution()"
    ],
    "17a4a261e09e46b188ed0705441570df": [
        "def solution():\n    a, b = 3, 10\n    for _ in range(1995):\n        a, b = b, (a + b) % 3\n    return a\n\nans = solution()"
    ],
    "8080bf206efd47819bdd2a2adb6b5fd5": [
        "def solution():\n    def count_partitions(n, m):\n        if n == 0:\n            return 1\n        if n < 0 or m == 0:\n            return 0\n        return count_partitions(n, m - 1) + count_partitions(n - m, m)\n\n    return count_partitions(5, 5) - 1  # subtract 1 to exclude the number itself as a whole\n\nans = solution()"
    ],
    "ae54342caaed4120ac02a509fa3bcd4b": [
        "def solution():\n    numerator = (4.219**2) / (14/3 + 38/59)\n    denominator = 2.501**3\n    result = numerator / denominator\n    return round(result, 3)\n\nans = solution()"
    ],
    "d5ed58dcfd4f432cbd326fe91855c743": [
        "def solution():\n    # Sum of first series from 3 to 10\n    n1 = 10 - 3 + 1\n    sum1 = n1 * (3 + 10) // 2\n\n    # Sum of second series from 6 to 3\n    n2 = 6 - 3 + 1\n    sum2 = n2 * (3 + 6) // 2\n\n    # Total sum is the sum of both series minus the overlapping part (6 + 5 + 4 + 3)\n    overlapping_sum = 6 + 5 + 4 + 3\n    total_sum = sum1 + sum2 - overlapping_sum\n\n    return total_sum\n\nans = solution()"
    ],
    "f96fd22abee24d948addde2c9760bc8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of students be 's' and the number of sweets be 'c'\n    s, c = symbols('s c')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(6 * s - c, -26)  # If he gives each student 6 sweets, he will be short of 26 sweets\n    equation2 = Eq(5 * s - c, -5)   # If he gives each student 5 sweets, he will be short of 5 sweets\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (s, c))\n\n    return solutions[c]\n\nans = solution()"
    ],
    "e69cb84fa1d949ac908e9ed3436bc342": [
        "def solution():\n    amin_cookies = 329\n    jessica_cookies = amin_cookies + 97\n    mary_cookies = jessica_cookies - 58\n\n    return mary_cookies\n\nans = solution()"
    ],
    "22e39fcf09374deb821fcf3cbc39e4ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    white_shirts, blue_shirts = symbols('white_shirts blue_shirts')\n\n    equation = Eq(white_shirts, 6 * blue_shirts)\n    shirts_sold = Eq(white_shirts + blue_shirts, 63)\n\n    solutions = solve((equation, shirts_sold), (white_shirts, blue_shirts))\n\n    return solutions[white_shirts]\n\nans = solution()"
    ],
    "9676e5c5b2c94dcb884bf421cb85baac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blouse, dress = symbols('blouse dress')\n\n    # Equation 1: blouse + dress = 41\n    equation1 = Eq(blouse + dress, 41)\n\n    # Equation 2: 4*blouse + 3*dress = 140\n    equation2 = Eq(4*blouse + 3*dress, 140)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (blouse, dress))\n\n    return solutions[blouse]\n\nans = solution()"
    ],
    "3d6aad1e230e440c976aa9835888e9af": [
        "def solution():\n    from math import factorial\n\n    def permutations(n, r):\n        return factorial(n) // factorial(n - r)\n\n    # Possible slots for dancing performances in between singing performances (5 slots)\n    # S _ S _ S _ S, where S represents singing and _ represents possible slots for dancing\n    # Choose 3 slots for the 3 dancing performances\n    slots_for_dance = permutations(5, 3)\n\n    # Permutations of singing performances (4!)\n    sing_perm = factorial(4)\n\n    # Permutations of dancing performances (3!)\n    dance_perm = factorial(3)\n\n    # Total permutations\n    total_permutations = slots_for_dance * sing_perm * dance_perm\n\n    return total_permutations\n\nans = solution()"
    ],
    "f9cc7112db0e48c1af2b41cc821ce516": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Leo's current age and the son's current age\n    leo, son = symbols('leo son')\n\n    # Set up the equations based on the problem statement\n    # When Leo was the son's current age, the son was 4 years old\n    equation1 = Eq(leo - son, 4)\n    # When the son reaches Leo's current age, Leo will be 70 years old\n    equation2 = Eq(leo + (leo - son), 70)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (leo, son))\n\n    # Return Leo's current age\n    return solutions[leo]\n\nans = solution()"
    ],
    "e1a30b1c30584a4ea62ce04ddf2a119b": [
        "def solution():\n    words_per_minute = 48 / 6\n    words_in_9_minutes = words_per_minute * 9\n    return words_in_9_minutes\n\nans = solution()"
    ],
    "3334f8ae569c45baaf836319780cb315": [
        "def solution():\n    # If it is possible for the sum of the number of fruits on 8 trees to be 225\n    # and the difference between neighbouring trees is always 1, then we can\n    # try to find if there's a set of 8 numbers with this property.\n  \n    # To get the sum of an arithmetic sequence (which the number of fruits would form),\n    # we can use the formula: sum = n/2 * (first_term + last_term), where n is the number of terms.\n    # Since the difference is 1, the terms are consecutive numbers.\n  \n    # If we consider middle value of sequence x, the other terms will be x-3, x-2, x-1, x, x+1, x+2, x+3\n    # The sum of such a sequence of n terms will be n*x, because the negative and positive offsets cancel each other out.\n  \n    # We can then write the equation as:\n    # 8 * x = 225\n    # Solving for x gives us x = 225 / 8\n    sum_of_fruits = 225\n    num_trees = 8\n    if sum_of_fruits % num_trees == 0:\n        x = sum_of_fruits // num_trees\n        # If x is an integer, the sequence is possible, and we can find out the values of the trees\n        # However, since x should be the middle value in the sequence, it should be an integer value.\n        # And because 225 is not divisible by 8, the middle value (x) is not an integer,\n        # hence it is not possible to find such a sequence\n        return False, \"It is not possible to have 8 trees with the given sum and properties.\"\n    else:\n        # If sum_of_fruits cannot be divided evenly by num_trees, we cannot form the sequence anyways\n        return False, \"It is not possible to have 8 trees with the given sum and properties.\"\n\nans = solution()"
    ],
    "2ec36757265f4822937a114644d2af76": [
        "def solution():\n    return 554 + 479\n\nans = solution()"
    ],
    "c89438cf2e854b8b8d9e6b61f27fb988": [
        "def solution():\n    heidi_age_now = 8\n    dad_age_now = 50\n    \n    years_later = symbols('years_later')\n    equation = Eq(dad_age_now + years_later, 4 * (heidi_age_now + years_later))\n    \n    ans = solve(equation, years_later)\n\n    return ans[0]\n\nans = solution()"
    ],
    "85f65609913d484fa252445d1bb3a6eb": [
        "from math import factorial\n\ndef solution():\n    count = 0\n    num = factorial(60)\n    while num % 10 == 0:\n        count += 1\n        num //= 10\n    return count\n\nans = solution()"
    ],
    "062ee4a4b00f4be6ab03b9ae62d86a14": [
        "def solution():\n    rhs = 11 * 14 + 26\n    ans = rhs / 15\n    return ans\n\nans = solution()"
    ],
    "d8532843d2c7486ea637674a0198cac2": [
        "def solution():\n    y = 4 * 10.5\n    return y\n\nans = solution()"
    ],
    "ae68a40584044249b59fcd754b0a9ab9": [
        "def solution():\n    # Initial average calculation\n    initial_average = 120\n    new_average = 150\n\n    # The sum of the initial three numbers\n    sum_of_initial_three = initial_average * 3\n\n    # The sum of the four numbers\n    sum_of_four = new_average * 4\n\n    # The fourth number\n    fourth_number = sum_of_four - sum_of_initial_three\n\n    return fourth_number\n\nans = solution()"
    ],
    "27766b651a1f4d2aae49cf67f35c42d8": [
        "def solution():\n    ans = (3/13) * 52\n    return ans\n\nans = solution()"
    ],
    "250bdd97084e4457a18b42026735d9a3": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    r = symbols('r')\n    equation = Eq(216 * r, r**2)\n    solutions = solve(equation, r)\n\n    # We need to find the r that makes 216*r a perfect square\n    # r should be a positive integer and the square root of a perfect square\n    perfect_square_r = [sol for sol in solutions if sol.is_integer and sol > 0]\n\n    # There should be only one positive integer solution for r\n    return perfect_square_r[0]\n\nans = solution()"
    ],
    "971a39bdec6540cb9d485a6ec1047a5a": [
        "def solution():\n    original_price = 18.60\n    discount_percentage = 15\n    discount_amount = (discount_percentage / 100) * original_price\n    discounted_price = original_price - discount_amount\n    return discounted_price\n\nans = solution()"
    ],
    "f44b5a2d15354af582ad35749d438ad3": [
        "def solution():\n    ans = 20 + 519\n    return ans\n\nans = solution()"
    ],
    "f4c9a4282e1345c9bbca6c475b472737": [
        "def solution():\n    # The snail climb 8-3=5 m net distance every day, except the last day.\n    net_distance_per_day = 8 - 3\n    # On the last 9th day, the snail climbs out of the well, meaning it doesn't slide down.\n    # We need to calculate the net distance it has covered in the 8 days before.\n    days_before_last = 9 - 1\n    net_distance_before_last_day = net_distance_per_day * days_before_last\n    # On the 9th day it climbs the remaining part of the well and gets out; this is the full 8 m.\n    # This must be added to the distance calculated for the first 8 days to get the total depth of the well.\n    total_well_depth = net_distance_before_last_day + 8\n\n    return total_well_depth\n\nans = solution()"
    ],
    "75754b6444eb4ac999eea02d4c15c1ae": [
        "def solution():\n    return 285 // 3\n\nans = solution()"
    ],
    "cb198c5105554691b5c2769bc9702902": [
        "def solution():\n    total_teachers = 100\n    french_teachers = 75\n    japanese_teachers = 45\n    both_languages = french_teachers + japanese_teachers - total_teachers\n    only_french = french_teachers - both_languages\n    return only_french\n\nans = solution()"
    ],
    "3f9379f05667462b83ddc4ad0c015e2a": [
        "def solution():\n    # Since we know the quotient and the remainder, \n    # dividend = divisor * quotient + remainder\n    # The smallest possible divisor is 1 (since dividing by zero is undefined)\n    # thus the smallest possible dividend for quotient = 15 and remainder = 6 would be when divisor = 1\n    quotient = 15\n    remainder = 6\n    divisor = 1\n    dividend = divisor * quotient + remainder\n    \n    return dividend\n\nans = solution()"
    ],
    "09e133cd62e94b3a83040c4a18ba31d0": [
        "def solution():\n    from math import factorial\n\n    total_ways = factorial(6)\n    ways_with_teddy_leftmost = factorial(5)\n\n    ways_teddy_not_leftmost = total_ways - ways_with_teddy_leftmost\n\n    return ways_teddy_not_leftmost\n\nans = solution()"
    ],
    "a408d24a473b41c1b69fdd5572d7b292": [
        "def solution():\n    ans = 16.4 / 20\n    return ans\n\nans = solution()"
    ],
    "3299707a36e74108be6c90e585878b40": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bag_of_sweets, can_of_drink = symbols('bag_of_sweets can_of_drink')\n\n    equation1 = Eq(3 * bag_of_sweets + 5 * can_of_drink, 4.90)\n    equation2 = Eq(bag_of_sweets + 3 * can_of_drink, 2.70)\n\n    solutions = solve((equation1, equation2), (bag_of_sweets, can_of_drink))\n\n    return solutions[bag_of_sweets]\n\nans = solution()"
    ],
    "86c640d251b04743a791ed72e6ef1406": [
        "def solution():\n    total_pence = 963\n    fraction = 4 / 9\n\n    result = total_pence * fraction\n\n    return int(result)\n\nans = solution()"
    ],
    "3121bf5cbc854fd786bb1b4d2885b8ee": [
        "def solution():\n    first_term = 50\n    difference = -4\n    term = first_term\n    num_terms = 0\n    \n    while term > 0:\n        num_terms += 1\n        term += difference\n        \n    return num_terms\n\nans = solution()"
    ],
    "12bb2874238a47da87ffaed7ea879f56": [
        "def solution():\n    count = 0\n    for i in range(10, 100):\n        if (i // 10 + i % 10) % 7 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0b8f50cdd3c44951b15c9241a332716f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(david, 2 * bentley)\n    equation3 = Eq(david + bentley + triston, 408)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[triston]\n\nans = solution()"
    ],
    "0e485f9ad3f7447285e70845caf1d116": [
        "def solution():\n    for i in range(280):\n        if 7*i + 21 == 280:\n            return i + 6\n\nans = solution()"
    ],
    "4ebd96f87e564c70a9f67b3e4a10d85d": [
        "def solution():\n    # Using the difference of squares formula: a^2 - b^2 = (a+b)(a-b)\n    \n    def diff_of_squares(a, b):\n        return (a + b) * (a - b)\n    \n    ans = (diff_of_squares(1000, 990) + \n           diff_of_squares(980, 970) + \n           diff_of_squares(20, 10))\n    \n    return ans\n\nans = solution()"
    ],
    "e288e678bbb249bcaab6d53963001d88": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n\n    equation1 = Eq(x + y, 49)\n    equation2 = Eq(x - y, 9)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "b654f11047ce401a8e2731b60cbe351b": [
        "def solution():\n    ans = sum(range(1, 10))\n    return ans\n\nans = solution()"
    ],
    "ae782a917c0e49dd8aa4c9143b7f6498": [
        "def solution():\n    total = 0\n    sign = 1  # Start with positive sign for addition\n    \n    for i in range(20, 1, -2):\n        total += sign * i\n        sign *= -1  # Flip the sign for next operation\n\n    return total\n\nans = solution()"
    ],
    "d2cd4a56ec964afaadc7c52c40a6299e": [
        "def solution():\n    highest_factor = 75\n    largest_sum = 0\n\n    # Generate all possible 3-digit numbers that are multiples of 75\n    for A in range(100, 1000, highest_factor):\n        A_str = str(A)\n        # Check if A has at least two equal digits\n        if len(set(A_str)) < 3:\n            for B in range(A + highest_factor, 1000, highest_factor):\n                B_str = str(B)\n                # Check if B has at least two equal digits and A and B are distinct\n                if len(set(B_str)) < 3 and A != B:\n                    # Update largest possible sum\n                    largest_sum = max(largest_sum, A + B)\n\n    return largest_sum\n\nans = solution()"
    ],
    "5bad72a578f940cf8c6627f29fcbdfde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angel, yiyang, kayla = symbols('angel yiyang kayla')\n\n    equation1 = Eq(angel + yiyang, 92.20)\n    equation2 = Eq(angel + kayla, 28.20)\n    equation3 = Eq(yiyang, 5 * kayla)\n\n    solutions = solve((equation1, equation2, equation3), (angel, yiyang, kayla))\n\n    return solutions[angel]\n\nans = solution()"
    ],
    "48223bc38999457a8ca5cb8944280073": [
        "def solution():\n    # From the given knowledge point route: 1²+2²+3²+......+n²=1/6n(n+1)(n+2),\n    # We can notice that the series given in the question is not directly the sum of\n    # squares of natural numbers. However, it can be seen that the numbers in the series\n    # are of the form (2n)³ - (2n)² for n = 2 to 10 inclusive.\n\n    ans = 0\n    for n in range(2, 10):\n        ans += (2*n)**3 - (2*n)**2\n\n    return ans\n\nans = solution()"
    ],
    "e7473cbabe36456fb728cd45b22d0cc7": [
        "def solution():\n    throws = [5, 5, 3, 6, 2, 6, 1, 4]\n    position = 0\n    skip_next = False\n    \n    for throw in throws:\n        if skip_next:\n            position -= throw\n            skip_next = False\n        elif throw == 6:\n            skip_next = True\n        else:\n            position += throw\n\n    return position\n\nans = solution()"
    ],
    "dc0379c31de248fd8d41c231a4b7bbe8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    alex, brayden = symbols('alex brayden')\n    \n    # Original total amount\n    equation1 = Eq(alex + brayden, 756)\n    \n    # After Alex gives $65 to Brayden\n    equation2 = Eq(alex - 65, 3 * (brayden + 65))\n    \n    solutions = solve((equation1, equation2), (alex, brayden))\n\n    return solutions[brayden]\n\nans = solution()"
    ],
    "73662c89c90340368f0f31dbbb793bcb": [
        "from math import factorial\n\ndef solution():\n    # place 5 magazines (M) with 4 gaps in between and one on each end:\n    # M _ M _ M _ M _ M\n    # We need to place 5 storybooks (S) in these 6 gaps.\n    # Think of it as 5 S's to be placed in 6 bins (gaps).\n    # The number of ways to place them is given by number of\n    # multisets of S's, which is C(5+6-1, 5) = C(10, 5).\n\n    # Once placed, consider magazines and storybooks as individual distinct items.\n    # There are 5 magazines and 5 storybooks, so a total of 10 books to arrange.\n    # Hence, there are 10! ways to arrange these books.\n\n    # However, since within magazines and storybooks the individual items are not distinct,\n    # we need to divide by the permutations of the magazines (5!) and by the permutations\n    # of the storybooks (5!) to get the distinct arrangements.\n\n    ways_to_place = factorial(10) // factorial(5)\n    total_arrangements = factorial(10)\n    distinct_arrangements = total_arrangements // (factorial(5) * factorial(5))\n\n    ans = ways_to_place * distinct_arrangements\n    return ans\n\nans = solution()"
    ],
    "26fc18a2aa384355aa0db444268680d3": [
        "def solution():\n    x = 1\n    while True:\n        total = x\n\n        # Ate 2 in music lesson\n        total -= 2\n        \n        # Shared one third with friends\n        total -= total / 3\n\n        # Check if it can be evenly divided over the next four lessons\n        if total % 4 == 0:\n            return x\n        x += 1\n\nans = solution()"
    ],
    "e5cbd5d784b64b1e90f8c8affb745d94": [
        "def solution():\n    kate = 13\n    james = 28\n    amount_given = (james - kate) / 2\n    return amount_given\n\nans = solution()"
    ],
    "d67cc9413a3540dda3185a84e88494ff": [
        "def solution():\n    return 17.1 / 10\n\nans = solution()"
    ],
    "54a4368e09b64fa4ae17d9fafb1cc1f0": [
        "def solution():\n    for A in range(10):\n        for B in range(10):\n            number = int(f'42{A}28{B}')\n            if number % 99 == 0:\n                return int(f'{A}{B}')\n\nans = solution()"
    ],
    "d2d70b19b95d4c2980b65eaa5b33a64f": [
        "def solution():\n    total_sum_initial = 10 * 10\n    total_sum_remaining = 9 * 9\n    removed_number = total_sum_initial - total_sum_remaining\n    return removed_number\n\nans = solution()"
    ],
    "0910afd7c9174c95a8df8508d6e7179e": [
        "def solution():\n    speed_kmph = 3.6    # Speed in kilometers per hour\n    time_sec = 300       # Time in seconds\n\n    # Convert speed to meters per second (1 km/h = 0.277778 m/s)\n    speed_mps = speed_kmph * (1000 / 3600)\n\n    # Calculate distance in meters\n    distance_meters = speed_mps * time_sec\n\n    return distance_meters\n\nans = solution()"
    ],
    "7ed06d70e33c42a59176b296814f9641": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount each sibling received when all four shared equally\n    x = symbols('x')\n\n    # When three brothers shared the money, they each received x+20\n    # With sister included, there are 4 people sharing\n    # Without sister included, there are 3 people sharing\n    # The total amount of money is the same in both scenarios\n\n    # Equation representing the sum when 4 people shared equally:\n    # 4x [amount each sibling gets] = total sum\n    # Equation representing the sum when only 3 brothers shared:\n    # 3(x+20) [amount each brother gets without sister] = total sum\n\n    # Since the total sum remains constant, both scenarios are equal:\n    # 4x = 3(x+20)\n    \n    equation = Eq(4 * x, 3 * (x + 20))\n\n    # Solve the equation to find the value of x\n    solution = solve(equation, x)\n    original_sum = 4 * solution[0]  # The original sum is 4 times what each person got when all shared\n\n    return original_sum\n\nans = solution()"
    ],
    "c4239409e9834407bcd7d853669b16fc": [
        "def solution():\n    return 25 * 4 * 13\n\nans = solution()"
    ],
    "fd1df5442cc54af194c050069058433f": [
        "def solution():\n    # Calculate the sum of the series: 1 + 3 + 5 + ... + 21\n    n = (21 - 1) // 2 + 1  # number of odd terms\n    sum_of_series = sum(range(1, 22, 2))\n    \n    # Use the formula for the sum of the cubes of the first n natural numbers\n    ans = sum_of_series ** 2\n    return ans\n\nans = solution()"
    ],
    "63fc0ee320d54f81933be0988ed9fb3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    red, green, blue = symbols('red green blue')\n    \n    total_beads_left = 350\n    blue_beads_given_away = 112\n    red_twice_green = Eq(red, 2 * green)\n    blue_50_less_red = Eq(blue, red - 50)\n\n    # Since Lauren had the same number of beads of each color at first\n    # and gave away 112 blue beads:\n    equation_total_beads = Eq(red + green + blue, total_beads_left)\n    \n    # Substitute blue with (red - 50) and solve for red and green\n    equations = (red_twice_green, blue_50_less_red, equation_total_beads)\n    solutions = solve(equations, (red, green, blue))\n    \n    # Calculate the initial number of blue beads\n    initial_blue = solutions[blue] + blue_beads_given_away\n\n    return initial_blue\n\nans = solution()"
    ],
    "5fa816e5b446405587309db43ab19e8d": [
        "def solution():\n    # Calculate total sums of each subset of 4 numbers by multiplying the average by 4.\n    total_sums = [36 * 4, 38 * 4, 39 * 4, 45 * 4, 49 * 4]\n    \n    # The largest total sum is the sum when the smallest number is missing.\n    # So we add all total sums and subtract 4 times the smallest total sum\n    # to find the largest number.\n    largest_total_sum = sum(total_sums) - min(total_sums) * 4\n    \n    return largest_total_sum\n\nans = solution()"
    ],
    "7b33b3e40e114514bc857beeadd0ef2e": [
        "def solution():\n    return 32 * 20 * 300\n\nans = solution()"
    ],
    "f396c06eee044d4c857925759f17b15d": [
        "def solution():\n    # Let x be the number of science books\n    # (1/3) of art books is (4/5) times the number of science books\n    # (1/3) * 360 = (4/5) * x\n    # x = (1/3) * 360 * (5/4)\n    \n    x = (1/3) * 360 * (5/4)\n    \n    return int(x)\n\nans = solution()"
    ],
    "41f505bb491242358551d509d2bc0f53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    katelyn, jared = symbols('katelyn jared')\n\n    equation1 = Eq(jared, katelyn + 60)\n    equation2 = Eq(katelyn / jared, 2 / 5)\n\n    solutions = solve((equation1, equation2), (katelyn, jared))\n\n    return solutions[katelyn] + solutions[jared]\n\nans = solution()"
    ],
    "1aa1093f65fa4076aac242c4103891b2": [
        "def solution():\n    numbers = [870, 165, 448, 425, 3562]\n    rounded_numbers = [round(num, -2) for num in numbers]\n    total = sum(rounded_numbers)\n    return total\n\nans = solution()"
    ],
    "8e13d12e420d4c5ebcc4af6c803994d9": [
        "def solution():\n    initial_investment = 10000\n    first_interest_rate = 1.05 ** 3\n    second_interest_rate = 1.10 ** 2\n    final_amount = initial_investment * first_interest_rate * second_interest_rate\n    return round(final_amount, 1)\n\nans = solution()"
    ],
    "7f47c8080f134d369478c048481bf15f": [
        "def solution():\n    from math import gcd\n    \n    textbooks_chinese = 42\n    textbooks_math = 63\n    textbooks_nature = 28\n    \n    gcd_val = gcd(gcd(textbooks_chinese, textbooks_math), textbooks_nature)\n    \n    return gcd_val\n\nans = solution()"
    ],
    "0589562cb3d8409e9ec3a0bb065f706f": [
        "def solution():\n    # If you want to share 16 sausages among 24 people equally,\n    # each person should get 16 / 24 parts of a sausage.\n    # To achieve this, we need to cut each sausage into 24 / gcd(16, 24) pieces\n    # where gcd is the greatest common divisor.\n    # Then we can distribute these pieces to each person one by one.\n    # Since we have 16 sausages, the total number of cuts will be:\n    # (number of pieces per sausage - 1) * total number of sausages\n    from math import gcd\n    \n    # Calculate the gcd of 16 and 24\n    common_divisor = gcd(16, 24)\n    \n    # Calculate number of pieces each sausage needs to be cut into\n    pieces_per_sausage = 24 // common_divisor\n    \n    # Total number of cuts is one less than the number of pieces per sausage\n    # multiplied by the total number of sausages\n    cuts = (pieces_per_sausage - 1) * 16\n    \n    return cuts\n\nans = solution()"
    ],
    "3cb997a578814bb191020afbf8ceb5f8": [
        "def solution():\n    # If 4 companies can build 900 m in 5 days,\n    # 1 company can build 900 m in 5 * 4 = 20 days\n    days_for_900m = 5 * 4\n\n    # If 1 company can build 900 m in 20 days,\n    # it can build 2700 m in 20 * 3 = 60 days\n    days_for_2700m = days_for_900m * 3\n\n    return days_for_2700m\n\nans = solution()"
    ],
    "cf6a17fe82d4429d901a3cb109ff35af": [
        "def solution():\n    # Let's denote the distance between the library and the school as D (in meters).\n    # Qiqi's speed is 60 m/min and Weiling's speed is 72 m/min.\n\n    # If Weiling starts 2 minutes after Qiqi and arrives 4 minutes before her,\n    # then Weiling travels for (the time Qiqi travels) - 2 (start delay) - 4 (early arrival) minutes.\n\n    # Let t be the time Qiqi travels. Then Weiling travels for t - 6 minutes.\n\n    # Since they both cover the same distance D, we can set up the equations:\n    # 60 * t = D (distance Qiqi covers)\n    # 72 * (t - 6) = D (distance Weiling covers)\n\n    # Equality of distances gives us the equation:\n    # 60 * t = 72 * (t - 6)\n\n    # Solving for t:\n    t = (72 * 6) / (72 - 60)\n\n    # Now we can find D by plugging the value of t back into either of the distance equations:\n    D = 60 * t\n\n    return D\n\nans = solution()"
    ],
    "68813ca3c24c42149ea862902169e0c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    star_rate, nini_rate = symbols('star_rate nini_rate')\n\n    # Star typing for 5 hours then Nini typing for 20 hours complete the job\n    equation1 = Eq(5 * star_rate + 20 * nini_rate, 1)\n\n    # Star typing for 20 hours then Nini typing for 8 hours complete the job\n    equation2 = Eq(20 * star_rate + 8 * nini_rate, 1)\n\n    # Solve the equations to find each one's typing rate\n    solutions = solve((equation1, equation2), (star_rate, nini_rate))\n\n    # Nini's time to finish the job alone is the inverse of her typing rate\n    nini_time = 1 / solutions[nini_rate]\n    \n    return nini_time\n\nans = solution()"
    ],
    "d2ea6172a82640c28eb896db6bd6ed62": [
        "def solution():\n    from datetime import timedelta, datetime\n\n    # Assuming the flight duration is provided\n    flight_duration_hours = 3  # Placeholder value, please replace with actual duration\n\n    # Assuming St Petersburg time is ahead of Manchester time \n    # Placeholder value for how much St Petersburg time is ahead, please replace with actual info\n    time_difference_hours = 3  \n\n    # Richard meets the plane at 12 noon St Petersburg time\n    richard_meet_time = datetime.strptime('12:00', '%H:%M')\n\n    # Calculate the departure time from St Petersburg time\n    departure_time = richard_meet_time - timedelta(hours=flight_duration_hours + time_difference_hours)\n\n    return departure_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "81af17d8de7a46a788695ca8365b15ae": [
        "def solution():\n    kg_to_lbs_conversion_factor = 2.2\n    kg = 5\n    lbs = kg * kg_to_lbs_conversion_factor\n    return lbs\n\nans = solution()"
    ],
    "486b088e81d74803b137ad63cc4007e3": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 8 == 2 and num % 11 == 2:\n            return num\n\nans = solution()"
    ],
    "b7ec49fc670841a1b3ed283d59481312": [
        "def solution():\n    jane_height = 130\n    difference = 45\n\n    ben_height = jane_height - difference\n\n    return ben_height\n\nans = solution()"
    ],
    "d252da6964f34cafb15841fcb98f9545": [
        "def solution():\n    ben_position_from_front = 6\n    frank_position_from_back = 9\n    people_between = 10\n    \n    total_people = (ben_position_from_front - 1) + people_between + (frank_position_from_back - 1) + 1  # +1 for Ben himself being counted from both ends\n    is_correct = total_people == 27\n\n    return (is_correct, total_people)\n\nans = solution()"
    ],
    "31bceb787e4e47be97073d7d8a8b3778": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    coffee_liters = 6\n\n    total_ratio = coffee_ratio + milk_ratio\n    latte_liters = (coffee_liters * total_ratio) / coffee_ratio\n\n    return latte_liters\n\nans = solution()"
    ],
    "6f0ec90fdeac4893aaf890122d46e374": [
        "def solution():\n    sum = 0\n    sign = 1\n    for n in range(2, 33, 2):\n        sum += sign * n\n        sign *= -1\n    return sum\n\nans = solution()"
    ],
    "717137e7208846a585af9fb90e9f65a3": [
        "def solution():\n    result = 72 / 100 * 140\n    return result\n\nans = solution()"
    ],
    "16bb2f8b73aa4a2f87ca69fbf8cc577c": [
        "def solution():\n    ans = 19 + 18 + 17 + 16 + 10\n    return ans\n\nans = solution()"
    ],
    "456be3e7a4b1442f849f8976ad331a08": [
        "def solution():\n    remainder = (42663 ** 2) % 9\n    return remainder\n\nans = solution()"
    ],
    "52ca3ae0b2e14097bf693e3c00c7fd95": [
        "def solution():\n    # Let the total number of marbles be x\n    red_fraction = 2/5\n    green_fraction = 1/3\n    yellow_count = 96\n\n    # Equation: red_fraction*x + green_fraction*x + yellow_count = x\n    x = symbols('x')\n    equation = Eq(red_fraction*x + green_fraction*x + yellow_count, x)\n\n    # Solving for x\n    total_marbles = solve(equation, x)[0]\n\n    return total_marbles\n\nans = solution()"
    ],
    "9418da19a88b4ab6ad37f24482a17de8": [
        "def solution():\n    last_digits = 0\n    current_number = 0\n    \n    for i in range(2015):\n        current_number = current_number * 10 + 1\n        last_digits = (last_digits + current_number) % 10000\n        \n    return last_digits\n\nans = solution()"
    ],
    "9b2f93ae65ff4b8cb762302908c1e9e9": [
        "def solution():\n    ans = 1 / 20\n    return ans\n\nans = solution()"
    ],
    "f4ac3e3adf8e48cd9836ded820e5f0cf": [
        "def solution():\n    final_amount = 870\n    annual_interest_rate = 0.09\n    number_of_years = 5\n\n    # Using the compound interest formula to find the principal\n    # A = P(1 + r/n)^(nt), where A is the final amount, P is the principal, \n    # r is the annual interest rate, n is the number of times interest applied per time period, \n    # t is the number of time periods elapsed.\n    # Since interest is compounded annually, n = 1.\n    # Rearranging the formula to solve for P gives P = A / (1 + r/n)^(nt)\n    \n    principal = final_amount / ((1 + annual_interest_rate)**number_of_years)\n\n    return principal\n\nans = solution()"
    ],
    "49451447b0b84c1aa576ca9cf57eb570": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):   # Hundreds digit must be between 1 and 9.\n        for tens in range(10):      # Tens digit must be between 0 and 9.\n            for ones in range(10):  # Ones digit must be between 0 and 9.\n                if hundreds + tens + ones == 8 and (hundreds * 100 + tens * 10 + ones) % 2 == 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "0b6fb29ca6e9447ca855d69db2282654": [
        "def solution():\n    # Since there are 2 blue and 2 yellow marbles,\n    # in the worst case scenario, we would pick one of each color first,\n    # which means after picking 3 marbles, we will surely have 2 of the same color.\n    return 3\n\nans = solution()"
    ],
    "23708dd0135542c9a0397bac3cf7df9e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 4), (3, 5), (3, 11)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "2f5f5ef83c574d589866d40947993237": [
        "def solution():\n    first_term = 11\n    common_difference = -3\n    term_number = 7\n\n    seventh_term = first_term + (term_number - 1) * common_difference\n\n    return seventh_term\n\nans = solution()"
    ],
    "d378edcf9ef64254a7f97387b00ae18b": [
        "def solution():\n    for john_age in range(1, 100):\n        mary_age = john_age - 1\n        for child1_age in range(1, 100):\n            child2_age = child1_age + 2\n            child3_age = child2_age + 2\n            # Check if this year's products are less than 2019\n            if (john_age * mary_age < 2019) and (child1_age * child2_age * child3_age < 2019):\n                # Check if next year's products are greater than 2020\n                if ((john_age + 1) * (mary_age + 1) > 2020) and ((child1_age + 1) * (child2_age + 1) * (child3_age + 1) > 2020):\n                    # If both conditions are satisfied, return the sum of ages\n                    return john_age + mary_age + child1_age + child2_age + child3_age\n    return None\n\nans = solution()"
    ],
    "104db66ae297441bbca8c76f5ce475ec": [
        "def solution():\n    # Let the original sum of money be x.\n    # According to the problem, the following equation should hold true:\n    # x - 36 - (3/4)*(x - 36) = (1/6)*x\n    # Simplify this equation to solve for x.\n\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(x - 36 - (3/4)*(x - 36), (1/6)*x)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "d605a3d05bcc43148562bbdb79db1c71": [
        "def solution():\n    # Calculate the unit digit of each part\n    unit_digit_13 = 3 ** (242 % 4)  # 3 to the power of the cycle of 4 for unit digit\n    unit_digit_17 = 7 ** (379 % 4)  # 7 to the power of the cycle of 4 for unit digit\n    unit_digit_4 = 4 ** (2012 % 2)  # 4 to the power of the cycle of 2 for unit digit\n\n    if unit_digit_13 == 3 ** 0: # If power is divisible by 4\n        unit_digit_13 = 1\n    if unit_digit_17 == 7 ** 0: # If power is divisible by 4\n        unit_digit_17 = 1\n\n    # Simplify unit digits calculation with respect to multiplication and addition\n    unit_digit = (unit_digit_13 + (unit_digit_17 * unit_digit_4)) % 10\n\n    return unit_digit\n\nans = solution()"
    ],
    "51b8bb60af70468585594276c4549d5f": [
        "def solution():\n    time_per_mile_minutes = 2 + 30/60   # Convert 30 seconds to 0.5 minutes\n    time_per_hour_minutes = 60          # 1 hour has 60 minutes\n    \n    miles_per_hour = time_per_hour_minutes / time_per_mile_minutes\n    return miles_per_hour\n\nans = solution()"
    ],
    "f1ec42c9727d45019312260e63e8481e": [
        "def solution():\n    from itertools import permutations\n\n    max_sum = 0\n    # Generate all possible permutations of the digits 1 to 9\n    for perm in permutations(range(1, 10)):\n        # Convert the tuple to a string of digits for each permutation\n        num_str = ''.join(map(str, perm))\n        # Calculate the sum for the current permutation\n        current_sum = sum(int(num_str[i:i+3]) for i in range(0, 7))\n        # Update max_sum if the current sum is larger\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum\n\nans = solution()"
    ],
    "5112b404eb824dc0b71fd51b06757616": [
        "def solution():\n    result = 25 / 100 * 80\n    return result\n\nans = solution()"
    ],
    "5c608f9e5216463fa42df2bcdf873d46": [
        "def solution():\n    ans = sum(i**2 for i in range(2, 21, 2))\n    return ans\n\nans = solution()"
    ],
    "5919c5ed904d4b1eb75ba4e56ab0daba": [
        "def solution():\n    count = 0  # Initialize a count for the position in the sequence\n    current = 8  # Start from the first number with leftmost digit 8\n\n    # Loop until the count reaches 2012\n    while count < 2012:\n        if str(current)[0] == '8':  # If the leftmost digit is 8\n            count += 1  # Increment the count\n        if count == 2012:  # If we've reached the 2012th number\n            return current  # Return that number\n        current += 1  # Continue to the next number\n\nans = solution()"
    ],
    "14e76068ade649c18d46e10500185a77": [
        "def solution():\n    # Since the numbers are consecutive, we can express them as:\n    # x, x+1, x+2, x+3, x+4. The total is 160.\n    # Therefore, 5x + 10 = 160\n    # Solving for x gives us the number of balls the first student has.\n    # The student with the most balls will have x+4.\n    \n    x = (160 - 10) // 5\n    most_balls = x + 4\n    return most_balls\n\nans = solution()"
    ],
    "fb2929103b234c36a83b16152d639699": [
        "from sympy import symbols, solve\n\ndef solution():\n    x, y, z = symbols('x y z', integer=True)\n    expr = x + y + z - (15 - 2 - 4 - 3) # Subtract minimum required envelopes for A, B, and C\n    solutions = solve(expr)\n\n    # Considering at least 2 envelopes in A, at least 4 in B, and at least 3 in C,\n    # we will find all nonnegative integer solutions for x, y, z\n    # Each solution corresponds to a way of distributing the remaining envelopes \n    # (15 - 2 - 4 - 3 = 6) among the 3 boxes (A has 2 already, B has 4 and C has 3).\n    \n    # Number of nonnegative solutions for equation of the type x + y + z = n is given by:\n    # C(n+k-1, k-1), where C is combination, n is the right-hand side number,\n    # and k is the number of variables (in this case, 3). That becomes C(6+3-1, 3-1) = C(8, 2)\n    \n    ans = math.comb(8, 2)\n    return ans\n\nans = solution()"
    ],
    "16719701a44b4e74b780b8ee086863a6": [
        "def solution():\n    return 1.4 * 1/10\n\nans = solution()"
    ],
    "2f102fdf5c8944f590e2fe08c5776b62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, honeydew = symbols('watermelon honeydew')\n\n    equation1 = Eq(2 * watermelon + 3 * honeydew, 48)\n    equation2 = Eq(honeydew, 2 * watermelon)\n\n    solutions = solve((equation1, equation2), (watermelon, honeydew))\n\n    return solutions[honeydew]\n\nans = solution()"
    ],
    "2def08a06682438abd603dfb441bdcac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    income = symbols('income')\n    # Income part which is taxed at 15%\n    tax1 = 0.15 * 20000\n    # Income part which is taxed at 20%, which is \"income - 20000\"\n    tax2 = 0.20 * (income - 20000)\n    \n    equation = Eq(tax1 + tax2, 7000)\n    solution = solve(equation, income)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "d304c371fad640039cf2aef0608bc6cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(47 - 2 * (x + 3), 1)\n\n    ans = solve(equation, x)[0]\n\n    return ans\n\nans = solution()"
    ],
    "8b62ceaf1c8a475fb638fefb9ee9fe23": [
        "def solution():\n    decimal_str = str(Fraction(1, 13))[2:]\n    period = len(decimal_str)\n    index = (2022 % period) - 1\n    return int(decimal_str[index]) if index != -1 else int(decimal_str[-1])\n\nans = solution()"
    ],
    "d5d6a40303714f8a8ac28fac5100d265": [
        "def solution():\n    from math import gcd\n\n    length1 = 28\n    length2 = 14\n    length3 = 56\n\n    ans = gcd(gcd(length1, length2), length3)\n\n    return ans\n\nans = solution()"
    ],
    "a0ed7f5e8007463db822ca4a6d5c38ad": [
        "def solution():\n    for chickens in range(41):\n        rabbits = 40 - chickens\n        if 2 * chickens + 4 * rabbits == 100:\n            return chickens\n\nans = solution()"
    ],
    "e88ad0d7f3f54f3cad6c71dd96553567": [
        "def solution():\n    sets_made_in_5_days = 720\n    total_sets_needed = 3600\n    days_for_720_sets = 5\n    rate_per_day = sets_made_in_5_days / days_for_720_sets\n    total_days_needed = total_sets_needed / rate_per_day\n    return total_days_needed\n\nans = solution()"
    ],
    "e6d3e99bc50e4197ba980e76f8a3861f": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n\n    # Let x be the initial number of packs in each store\n    x = Symbol('x')\n\n    # After A sold 290 packs, it has x - 290 packs\n    # Store B has 3 times as many packs as store A now, so it has 3 * (x - 290) packs\n\n    # Equation based on the problem statement\n    equation = (x - 290) - (3 * (x - 290)) / 3\n\n    # Solve for x\n    initial_packs_each_store = solve(equation, x)[0]\n\n    # Total number of packs = packs in A + packs in B\n    total_packs = initial_packs_each_store + initial_packs_each_store\n\n    return total_packs\n\nans = solution()"
    ],
    "a805e5e4aa104df697703c2b687e1b6d": [
        "def solution():\n    number = 36\n    factors = set()\n    for i in range(1, int(number ** 0.5) + 1):\n        if number % i == 0:\n            factors.add(i)\n            factors.add(number // i)\n    ans = len(factors)\n    return ans\n\nans = solution()"
    ],
    "842182ab896748b7a10d330f85ae87d8": [
        "def solution():\n    last_divisible = 96  # Largest number < 100 divisible by 12\n    first_divisible = 12  # Smallest non-zero number divisible by 12\n    common_difference = 12\n\n    num_terms = ((last_divisible - first_divisible) // common_difference) + 1\n    \n    return num_terms\n\nans = solution()"
    ],
    "5dc3d08683054ae99151ce2641524c51": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10*(x+1) - 5*(x+1) - 28, 2)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "469c613e4b42431083b62ce75d2ba64f": [
        "def solution():\n    total_students = 30\n    total_boys = 17\n    packed_lunch_boys = 4\n    school_lunch_girls = 7\n    home_lunch_boys = 3\n    home_lunch_total = 5\n    \n    # The total number of girls is the difference between total students and total boys\n    total_girls = total_students - total_boys\n    \n    # The total number of girls who went home for lunch is the difference between \n    # the total number of students who went home for lunch and the boys who went home\n    home_lunch_girls = home_lunch_total - home_lunch_boys\n    \n    # Subtracting the girls who had a school lunch and who went home, we get the girls having a packed lunch\n    packed_lunch_girls = total_girls - school_lunch_girls - home_lunch_girls\n\n    # The total number of students who had a packed lunch is the sum of boys and girls with packed lunch\n    total_packed_lunch = packed_lunch_boys + packed_lunch_girls\n\n    return total_packed_lunch\n\nans = solution()"
    ],
    "9781a5cc0b814b1bb88b4c3ef4a62e10": [
        "def solution():\n    speed = 53  # speed of the train in m/s\n    time = 19   # time taken to pass the tree in seconds\n    \n    # The length of the train is equal to the distance it covers in 19 seconds\n    length_of_train = speed * time\n    \n    return length_of_train\n\nans = solution()"
    ],
    "005fc5ec14e04dcba10b71edf3c8e322": [
        "def solution():\n    total_items = 18 + 30 + 18\n    friends = 6\n    fruits_per_friend = total_items // friends\n    return fruits_per_friend\n\nans = solution()"
    ],
    "8e3dbd5080e34453a64a1a23ca30111e": [
        "def solution():\n    result = 2017\n    for i in range(2, 2018):\n        result *= (1 - 1 / i)\n    ans = int(result)\n    return ans\n\nans = solution()"
    ],
    "2697c4034ea94601bb0fe5639660557d": [
        "def solution():\n    # The man finishes the barrel in 15 days, so his drinking rate is 1/15 barrel per day\n    man_rate = 1 / 15\n\n    # Together, they finish the barrel in 12 days, so their combined drinking rate is 1/12 barrel per day\n    combined_rate = 1 / 12\n\n    # The wife's drinking rate is the combined rate minus the man's rate\n    wife_rate = combined_rate - man_rate\n\n    # The number of days it takes the wife to finish the barrel is the reciprocal of her drinking rate\n    wife_days = 1 / wife_rate\n\n    return wife_days\n\nans = solution()"
    ],
    "c15b927172434ffa9a24c1dbeb5e27c2": [
        "def solution():\n    wheels_per_tricycle = 3\n    num_tricycles = 6\n    total_wheels = wheels_per_tricycle * num_tricycles\n    \n    return total_wheels\n\nans = solution()"
    ],
    "6067f08c4e394300937f039a6579403e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sam_number = symbols('sam_number')\n    equation = Eq(2 * sam_number + 6, 3 * sam_number - 3)\n    \n    sam_number_solution = solve(equation, sam_number)\n    \n    return sam_number_solution[0]\n\nans = solution()"
    ],
    "aa0bf7ef0d1143f9b795235a58ca1591": [
        "def solution():\n    price_per_book = 16\n    offer_books_required = 3\n    books_wanted = 5\n\n    # Calculate how many free books Subhan gets\n    free_books = books_wanted // (offer_books_required + 1)\n    \n    # Calculate how many books Subhan has to pay for\n    books_to_pay_for = books_wanted - free_books\n\n    # Calculate total cost\n    total_cost = books_to_pay_for * price_per_book\n\n    return total_cost\n\nans = solution()"
    ],
    "3731755de37e48238b28194f092ad465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of children, men, and women\n    children, men, women, total = symbols('children men women total')\n\n    # Given equations\n    equation1 = Eq(women, 2 / 5 * total)\n    equation2 = Eq(men, 3 * children)\n    equation3 = Eq(women, children + 190)\n\n    # Substitute women from equation1 into equation3\n    equation3_subs = equation3.subs(women, 2 / 5 * total)\n\n    # Express children in terms of total\n    children_expr = solve(equation3_subs, children)[0]\n\n    # Substitute children into equation2\n    equation2_subs = equation2.subs(children, children_expr)\n\n    # Now we have two equations with two unknowns (total and men)\n    # Solve for total\n    solution_total = solve((equation1, equation2_subs), (total, men))[total]\n\n    return solution_total\n\nans = solution()"
    ],
    "3ba68d061ee44b82b9ca4db170f3bec5": [
        "def solution():\n    turpan_depression_base = -154  # Below sea level\n    mount_fuji_tip = 3776  # Above sea level\n\n    distance = mount_fuji_tip - turpan_depression_base\n\n    return distance\n\nans = solution()"
    ],
    "9a74773c879b4522a6185e9816be51da": [
        "def solution():\n    remainder = 7059 % 4\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = 4 - remainder\n    return ans\n\nans = solution()"
    ],
    "0f8960c766754ad7976ce474a09accd8": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "21d247063caa480aa4fd164855aaf8d6": [
        "def solution():\n    total_dark_chocolate = 20 * 6\n    total_milk_chocolate = 20 * 5\n    total_strawberry_chocolate = 20 * 4\n    \n    total_cost = total_dark_chocolate + total_milk_chocolate + total_strawberry_chocolate\n    total_chocolates = 20 + 20 + 20\n    \n    average_cost = total_cost / total_chocolates\n    \n    return average_cost\n\nans = solution()"
    ],
    "34a8b75acf004a629ab022c2cfb11cd3": [
        "def solution():\n    total = 0\n    num = 1\n    for _ in range(50):\n        total += num\n        num = num * 10 + 1\n    return total % 100\n\nans = solution()"
    ],
    "f2cae285f0b84b47ade17c9a18ab319b": [
        "def solution():\n    # Total number of pencils in the class\n    total_pencils = 35 * 40\n    \n    # Let the number of boys be 'b' and the number of girls 'g'\n    # Then, b + g = 40 (since there are 40 pupils in total)\n    # And, 20*b + 60*g = total_pencils (total pencils are the sum of boys' and girls' pencils)\n    # We want to find 'b', which is the number of boys in the class.\n    \n    # We can rearrange the equations:\n    # b = 40 - g\n    # Replace b in the total pencils equation with (40 - g):\n    # 20 * (40 - g) + 60 * g = total_pencils\n\n    # Solve for 'g':\n    g = (total_pencils - (20 * 40)) // 40\n    # Now we find 'b':\n    b = 40 - g\n    \n    return b\n\nans = solution()"
    ],
    "03505bb4be72488c85f4a43b911b69fb": [
        "def solution():\n    num_coding_only = 36 - 20  # Students in coding but not in math\n    num_math_only = 21 - 20  # Students in math but not in coding\n    num_both = 20  # Students in both competitions\n    \n    # Total number of students is the sum of students in coding only, math only and both.\n    total_students = num_coding_only + num_math_only + num_both\n    \n    return total_students\n\nans = solution()"
    ],
    "2addb83d9ec14899ae26c229580cd24c": [
        "def solution():\n    # Let the cost of one apple be 'a' and the cost of one banana be 'b'.\n    # From the problem we have the following system of equations:\n    # 6a + 7b = 8a + 4b  => Option with no change (1)\n    \n    # We rearrange the terms to have apples on one side and bananas on the other\n    # 6a - 8a = 4b - 7b => -2a = -3b\n    # simplifying we get: a = 1.5 * b\n    \n    # Now we substitute the value of 'a' back into either equation (we choose equation 1).\n    # 6(1.5 * b) + 7b = 8(1.5 * b) + 4b\n    # 9b + 7b = 12b + 4b => 16b = 16b (this is consistent and true for any value of b)\n    # Thus, we know Einstein has the amount of money equal to 12b (cost of 8 apples)\n\n    # If he were to buy only bananas, he could afford\n    # Total_money = bananas_cost * number_of_bananas\n    # number_of_bananas = Total_money / bananas_cost\n    # number_of_bananas = 12b / b = 12\n\n    return 12\n\nans = solution()"
    ],
    "3be71ea95b604423b0c4053a0bdc5fc8": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n    \n    both_competitions = math_students + art_students - total_students\n    \n    return both_competitions\n\nans = solution()"
    ],
    "3a6ea0bb1dac4585a29c21ba5dadca5d": [
        "def solution():\n    seconds_per_minute = 60\n    minutes_per_hour = 60\n    hours_per_day = 24\n    days_per_week = 7\n    \n    ans = seconds_per_minute * minutes_per_hour * hours_per_day * days_per_week\n    return ans\n\nans = solution()"
    ],
    "8897310e705d4b0996136ec5d1345eb8": [
        "def solution():\n    from itertools import combinations_with_replacement\n    \n    # Assign minimum envelopes to A, B, and C as per the condition\n    min_envelopes_A = 2\n    min_envelopes_B = 4\n    min_envelopes_C = 3\n    remaining_envelopes = 15 - (min_envelopes_A + min_envelopes_B + min_envelopes_C)\n    \n    # Use combinations_with_replacement to find all combinations of distributing the remaining envelopes\n    # adding 1 to each part of the combination because at least 1 envelope can be added over the minimum\n    comb = combinations_with_replacement(range(1, remaining_envelopes + 1), 4)\n    \n    # Filter combinations to only those that add up to the remaining envelopes\n    valid_combinations = [c for c in comb if sum(c) == remaining_envelopes]\n    \n    # Considering the minimum required envelopes the number of ways will be equal to the number of valid combinations\n    return len(valid_combinations)\n\nans = solution()"
    ],
    "ffec8472e27a457186b91c2a9b4876f7": [
        "def solution():\n    from sympy import Symbol, Eq, solve\n\n    # Let the dividend (the number being divided) be x\n    dividend = Symbol('x')\n    \n    # The incorrect division (without the decimal point in the divisor)\n    incorrect_division = dividend / 211\n    \n    # The correct division (with the decimal point in the divisor)\n    correct_division = dividend / 2.11\n    \n    # The result is 98.01 less than the true result\n    equation = Eq(incorrect_division + 98.01, correct_division)\n    \n    # Solve for the value of the dividend x\n    dividend_value = solve(equation, dividend)\n    \n    # Using the value of dividend to find the true result\n    true_result = dividend_value[0] / 2.11\n    \n    return true_result\n\nans = solution()"
    ],
    "da34c13acd4f4312a4166e9435990496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the initial amount of money that John and Choon Mui have as 'x'.\n    x = symbols('x')\n\n    # John's remaining money is x - 30.\n    # Choon Mui's remaining money is x - 150.\n    # According to the problem, John's remaining money (x - 30) is four times Choon Mui's remaining money (x - 150).\n    equation = Eq(x - 30, 4 * (x - 150))\n\n    # Solve the equation to find the value of 'x'.\n    solution = solve(equation, x)\n    x_value = solution[0]\n\n    # Calculate how much money John had left after spending $30.\n    john_left = x_value - 30\n\n    return john_left\n\nans = solution()"
    ],
    "88e8074a774845edbbc61fbfd06e2d2f": [
        "def solution():\n    miles_per_hour = 65\n    minutes = 15\n    hours = minutes / 60\n    miles = miles_per_hour * hours\n    kilometers = miles * 1.60934\n    \n    return kilometers\n\nans = solution()"
    ],
    "b5f4586abff348538a08b5773026326b": [
        "def solution():\n    original_amount = 200\n    percentage_increase = 10 / 100\n    increased_amount = original_amount * (1 + percentage_increase)\n    \n    return increased_amount\n\nans = solution()"
    ],
    "8d5bc66e7f26483e93a8178a57870366": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let f represent the number of female visitors on the first day\n    # Let m represent the number of male visitors on the first day\n    f, m = symbols('f m')\n\n    # m = f + 450 (the number of male visitors was 450 more than the number of female visitors on the first day)\n    equation1 = Eq(m, f + 450)\n\n    # On the second day:\n    # the number of female visitors increased by 15%\n    # the number of male visitors decreased by 18%\n    # The total number of visitors for the second day was 1354\n    equation2 = Eq(f * 1.15 + m * 0.82, 1354)\n\n    # Solve the system of equations for f and m\n    solutions = solve((equation1, equation2), (f, m))\n    \n    # The solution for m is the number of male visitors on the first day\n    return solutions[m]\n\nans = solution()"
    ],
    "db8434167bdb42b494e99767df043336": [
        "def solution():\n    remaining_eggs = 15\n    # Let the initial number of eggs be x.\n    # After the first sale, there are (x/2 - 5) eggs left.\n    # After the second sale, he sells 4 fewer than half of the remaining, leaving him with 15.\n    # So, the remaining after the second sale is (x/2 - 5)/2 - 4 = 15.\n    # Simplifying:\n    # (x/2 - 5)/2 - 4 = 15\n    # (x/2 - 5)/2 = 15 + 4\n    # x/2 - 5 = 38 * 2\n    # x/2 = 38 * 2 + 5\n    # x = (38 * 2 + 5) * 2\n    initial_eggs = (38 * 2 + 5) * 2\n\n    return initial_eggs\n\nans = solution()"
    ],
    "953c0cd469784f418a1e4b46c24aa581": [
        "def solution():\n    original_length_m = 8  # Original length of the yacht in meters\n    scale_ratio = 1 / 20  # Scale ratio is 1:20\n\n    # Calculate the model length in meters by dividing the original length by the scale ratio\n    model_length_m = original_length_m * scale_ratio\n\n    # Convert the model length from meters to centimeters\n    model_length_cm = model_length_m * 100\n\n    return model_length_cm\n\nans = solution()"
    ],
    "026cc253a39b4f7a8ff32127b4f5f99c": [
        "def solution():\n    total_girls = 28\n    like_one_direction = 20\n    like_the_vamps = 17\n    like_both = 15\n\n    like_neither = total_girls - (like_one_direction + like_the_vamps - like_both)\n\n    return like_neither\n\nans = solution()"
    ],
    "61fc4738f46a4c1da0407128ad60defd": [
        "def solution():\n    return 617 * 6\n\nans = solution()"
    ],
    "5bf8127164644eda8c073097bd158315": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "7d6f9d84e0f64b73964b90b16040c92d": [
        "def solution():\n    total_balloons = 175\n    pupils = 7\n    \n    balloons_per_pupil = total_balloons // pupils\n    \n    return balloons_per_pupil\n\nans = solution()"
    ],
    "4af723c7f6a341b197db0f858a97435c": [
        "def solution():\n    count = 0\n    ways = []\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            if die1 + die2 == 8:\n                ways.append((die1, die2))\n                count += 1\n    return count, ways\n\nans = solution()"
    ],
    "af71ae92175c47c2bbfef7d6d4226104": [
        "def solution():\n    principal = 12000\n    rate = 0.10\n    time = 2\n\n    # Compound interest formula: A = P * (1 + r/n)^(nt)\n    # In this case, n (number of times interest applied per time period) is 1 for yearly compounding\n    amount = principal * ((1 + rate) ** time)\n\n    return amount\n\nans = solution()"
    ],
    "372a0dd4bdd148518598bd5418fd17af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(95/100*x - 2/5*x, 55)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "362010cacc1c428e87e8f76968f8b0d1": [
        "def solution():\n    daily_climb = 3\n    nightly_slide = 1\n    height = 10  # 11 - 1, because on the last day the snail will climb out before sliding down\n    net_progress_per_day = daily_climb - nightly_slide\n    full_days = height // net_progress_per_day\n    remaining_distance = height % net_progress_per_day\n    \n    if remaining_distance > 0:\n        full_days += 1  # Snail will climb out on the next day\n    \n    # Adding an extra day because we start counting from the first full day-night cycle\n    ans = full_days + 1\n    return ans\n\nans = solution()"
    ],
    "ff891cbe817f4502a65021a59cdc3af5": [
        "def solution():\n    # This is a classic problem of derangement or permutation where no element appears in its original place\n    # The number of derangements of n objects is sometimes called the subfactorial of n\n    # and is denoted by !n or D(n). The formula for subfactorial is:\n    # !n = n! * (1 - 1/1! + 1/2! - 1/3! + ... + (-1)^n/n!)\n    \n    from math import factorial\n\n    def subfactorial(n):\n        derangement = 0\n        for i in range(n + 1):\n            derangement += ((-1) ** i) / factorial(i)\n        return int(factorial(n) * derangement)\n\n    ans = subfactorial(4)\n    return ans\n\nans = solution()"
    ],
    "d4d78225836642e3a6857447ae177c76": [
        "def solution():\n    ans = 2.4 * (3.7 + 1.3) / 2\n    return ans\n\nans = solution()"
    ],
    "bb7980b8187641c693b65724c3bf2545": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 7), (2, 13)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "546aa08753494a909833d0621b194317": [
        "def solution():\n    air_ticket = 800\n    train_ticket = 378\n    difference = air_ticket - train_ticket\n    return difference\n\nans = solution()"
    ],
    "932cd151b950413daad721128c59b65f": [
        "def solution():\n    hourly_rate = 78 / 6.5\n    weekly_earnings = hourly_rate * 8 * 7\n    shortfall = 700 - weekly_earnings\n    \n    return shortfall\n\nans = solution()"
    ],
    "1a52a8a55f6a4622afbe5b311556da89": [
        "def solution():\n    return 53 * 627\n\nans = solution()"
    ],
    "fea0f54b7aae43d2aa3a63d63126d66b": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    end_time = datetime.strptime(\"20:30\", \"%H:%M\")\n    work_duration_hours = 8\n    work_duration_minutes = 45\n    work_duration = timedelta(hours=work_duration_hours, minutes=work_duration_minutes)\n\n    start_time = end_time - work_duration\n    start_time_formatted = start_time.strftime('%I:%M %p')\n    \n    return start_time_formatted\n\nans = solution()"
    ],
    "c569206e3d8e45da9a5fd08bd75dd481": [
        "def solution():\n    number = 14575\n    # Round to nearest 100\n    ans = round(number, -2)\n    return ans\n\nans = solution()"
    ],
    "18d69d8447c241eba858de2a934b9dd6": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        digits = str(i)\n        if digits.count('0') == 1 and digits[0] != '0':\n            count += 1\n    return count\n\nans = solution()"
    ],
    "40fa5f91d7774c719164c67d4befac6e": [
        "def solution():\n    # Since the question seems constructed, this could be a common 9-digit number puzzle\n    # where the specific sequence A = 98765432(1), such that subtracting 1 results in 98765432.\n    # The hint suggests a famous math trick where A = 123456789 minus 123456788.\n    # Therefore, A should be equal to 1.\n    A = 1\n    return A\n\nans = solution()"
    ],
    "0420376192d448b6b35d8dbb1e3ba394": [
        "from math import lcm\n\ndef solution():\n    arjun_period = 14  # Arjun gets a haircut every 14 days (2 weeks)\n    yahya_period = 10  # Yahya gets a haircut every 10 days\n    \n    # Find the least common multiple (LCM) of their haircut periods\n    days_until_next_haircut = lcm(arjun_period, yahya_period)\n    \n    return days_until_next_haircut\n\nans = solution()"
    ],
    "f0fbdd43508d4b8bac3f15715fcfe710": [
        "def solution():\n    # Calculate the time for each part of the race\n    time_first_part = 280 / 7  # Time = Distance / Speed\n    time_middle_part = 400 / 5\n    time_final_part = (800 - 280 - 400) / 8  # Total distance - the distance of the first and middle parts\n\n    # Sum up the time for each part to get the total time\n    total_time = time_first_part + time_middle_part + time_final_part\n\n    return total_time\n\nans = solution()"
    ],
    "3a8af64305054e408ce6703563a42e67": [
        "def solution():\n    total_length = 42\n    space_between_trees = 7\n\n    num_trees = (total_length - space_between_trees) // space_between_trees\n\n    return num_trees\n\nans = solution()"
    ],
    "a50c5ac06f154c1ab40822b47b13e86a": [
        "def solution():\n    initial_stamps = 34 + 2 - 11 + 14\n    return initial_stamps\n\nans = solution()"
    ],
    "063e43565ec941b8b309de1ea64f2a4d": [
        "def solution():\n    cost_of_shoes = 30\n    fake_note_value = 50\n    loss = cost_of_shoes + fake_note_value\n    return loss\n\nans = solution()"
    ],
    "0ea8d4a5251c4d73939b3f7e26abc354": [
        "def solution():\n    total_sum = 0\n    for digit1 in range(10):   # Loop over all possible digits for the first square (0 to 9)\n        for digit2 in range(10):  # Loop over all possible digits for the second square (0 to 9)\n            number = int(f\"2{digit1}9{digit2}\")  # Create the number with the current digits\n            if number % 3 == 0 and number % 5 == 0:  # Check divisibility by 3 and 5\n                total_sum += number  # If conditions are met, add it to the sum\n    return total_sum\n\nans = solution()"
    ],
    "51012ecffd1f47a19d29d548fccb4460": [
        "def solution():\n    first_term = 21\n    last_term = 99\n    num_terms = (last_term - first_term) // 1 + 1\n\n    # Sum of arithmetic sequence formula: (n/2)*(first_term + last_term)\n    ans = (num_terms / 2) * (first_term + last_term)\n    \n    return int(ans)\n\nans = solution()"
    ],
    "8a5fc0b3c5f6473db327f5603655842e": [
        "def solution():\n    from math import factorial\n\n    # Consider A, B and C as one single unit as they have to be always together.\n    # So we have now 8 units (single unit ABC + remaining 7 students).\n    ways_to_arrange_8_units = factorial(8)\n\n    # A, B and C can be arranged among themselves in 3! ways.\n    ways_to_arrange_ABC = factorial(3)\n\n    # Multiplying both the possible arrangements gives the total arrangements.\n    total_arrangements = ways_to_arrange_8_units * ways_to_arrange_ABC\n\n    return total_arrangements\n\nans = solution()"
    ],
    "cb7070ea663b4e43bd0e3c4a4ae168ef": [
        "def solution():\n    return 6 * 9 * 12\n\nans = solution()"
    ],
    "79102f1901d94f8aaf6295c7c0b16f08": [
        "from math import comb\n\ndef solution():\n    return comb(15, 4)\n\nans = solution()"
    ],
    "b94280bff5ab40d6a0f1f51b73c6b796": [
        "def solution():\n    # To guarantee that you get a white ball, you could theoretically take out all blue balls first.\n    blue_balls = 6\n    # You will need to take one more ball after the blue ones to ensure you get a white ball\n    return blue_balls + 1\n\nans = solution()"
    ],
    "b50b389683c44f05a3574ad0a3a8b04f": [
        "def solution():\n    part1 = sum(range(1, 5))  # Calculate the sum of 1+2+3+4\n    part2 = sum(range(2018, 2021)) * 0  # Calculate (2020+2019+2018) times 0\n\n    ans = part1 * 1 - part2  # Perform the combined calculation according to the expression\n\n    return ans\n\nans = solution()"
    ],
    "b96c9f2ccbdd4053bb3e1c306d2c7cbe": [
        "网络故障，请重试"
    ],
    "c5940c9b3ba945a795c1c8d4bf2dc024": [
        "def solution():\n    # There are three rulers and two overlaps\n    total_length = 3 * 20  # the length of three rulers without overlap\n    overlap_length = 2 * 3  # the total length of overlap between rulers\n    bundle_length = total_length - overlap_length  # subtract the overlap\n\n    return bundle_length\n\nans = solution()"
    ],
    "d3fe3513b7b8439ca80784b696227f81": [
        "def solution():\n    total_used_cups = 721\n    cups_needed_for_new = 7\n    new_cups = 0\n\n    while total_used_cups >= cups_needed_for_new:\n        new, remainder = divmod(total_used_cups, cups_needed_for_new)\n        new_cups += new\n        total_used_cups = new + remainder\n\n    return new_cups\n\nans = solution()"
    ],
    "38bb0a271e854cfb911c418384137f41": [
        "def solution():\n    # Time spent jogging: 1 hour from 6:30 am to 7:30 am\n    jogging_speed = 6 # miles per hour\n    jogging_distance = jogging_speed * 1 # miles\n\n    # Time spent walking: 2 hours from 7:30 am to 9:30 am\n    walking_speed = 5 # miles per hour\n    walking_distance = walking_speed * 2 # miles\n\n    # Total distance traveled\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "1dc8d2d4657c44f2aa1053854785aaa4": [
        "def solution():\n    number = 2000 - 222\n    return number\n\nans = solution()"
    ],
    "c12d1d0039a7413aa3e069eb8b681b38": [
        "def solution():\n    total_pages = (14 * 3) + (9 * 2) + 12\n    total_days = 6\n    average_pages_per_day = total_pages / total_days\n\n    return average_pages_per_day\n\nans = solution()"
    ],
    "de53e5290acf446d8f9e2d2cf711b150": [
        "def solution():\n    plot_length_cm = 23 * 100  # Convert plot length to cm\n    spacing_cm = 15\n    first_cauliflower_offset_cm = 20\n    cauliflower_width_cm = 45\n\n    # Calculate the total space being used by each cauliflower including the space after it before the next one\n    usable_space_per_cauliflower_cm = spacing_cm + cauliflower_width_cm\n\n    # Calculate available planting space by subtracting the initial offset from the total plot length\n    available_planting_space_cm = plot_length_cm - first_cauliflower_offset_cm \n\n    # Calculate the number of cauliflowers that can be planted by dividing the available space by the space needed per cauliflower\n    num_cauliflowers = available_planting_space_cm // usable_space_per_cauliflower_cm\n    \n    return int(num_cauliflowers)\n\nans = solution()"
    ],
    "9929cc1f915941dd90453af8a8ff6e9d": [
        "def solution():\n    return (5 / 7) * 112\n\nans = solution()"
    ],
    "5af9d49786184344b4cc613f0a935eb9": [
        "def solution():\n    original_number = ''.join(str(i) for i in range(1, 31))\n    smallest_number = original_number.replace('0', '', 46)\n\n    return int(smallest_number)\n\nans = solution()"
    ],
    "d433f6c9238447089a529b20f6d55cfc": [
        "def solution():\n    ans = (20**2 - 18**2) + (19**2 - 17**2)\n    return ans\n\nans = solution()"
    ],
    "140462dc7e4c435c900bfaf90640d4f4": [
        "from math import gcd\n\ndef solution():\n    # Number of students in each class\n    students_class_A = 8 \n    students_class_B = 12 \n    students_class_C = 20 \n\n    # Calculate the Greatest Common Divisor (GCD) for class A and B\n    gcd_AB = gcd(students_class_A, students_class_B)\n\n    # Calculate the GCD for class AB and C (which will be the final answer for group size)\n    gcd_ABC = gcd(gcd_AB, students_class_C)\n\n    return gcd_ABC\n\nans = solution()"
    ],
    "2f9549d4e4cd4be0a3da0b27a9aeb039": [
        "def solution():\n    speed_of_sound = 3.4 * 10**2 # meters per second\n    distance = 1.5 * 10**3 # meters\n    time = distance / speed_of_sound # seconds\n    return time\n\nans = solution()"
    ],
    "59dd5e71c11a413fac9da29a37a1201b": [
        "def solution():\n    return 100\n\nans = solution()"
    ],
    "89588201f7f94ac8a1d4119cac4fc1e5": [
        "def solution():\n    n = 4.5 / 5\n    return n\n\nans = solution()"
    ],
    "f136e2a0e618480e99a0044f35156610": [
        "def solution():\n    n = 72\n    factors = set()\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    ans = len(factors)\n    return ans\n\nans = solution()"
    ],
    "abce3e56fd794c2e9db7fff1d57bab61": [
        "def solution():\n    # Given whole numbers\n    number1 = 1234\n    number2 = 678\n    \n    # Calculate the difference\n    difference = number1 - number2\n    \n    # Return the difference\n    return difference\n\nans = solution()"
    ],
    "19ee53ef309b4ac1b03a0754f950fa53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let b represent the number of members in the Bowling Club initially\n    # Let B represent the number of members in the Badminton Club initially\n    b, B = symbols('b B')\n    \n    # Based on the information given, we have the following equations:\n    # B = 3 * b (Badminton Club had thrice as many members as the Bowling Club)\n    # B - 36 = b - 4 (after 36 members left the Badminton Club and 4 members left the Bowling Club, they had same members)\n    eq1 = Eq(B, 3 * b)\n    eq2 = Eq(B - 36, b - 4)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (b, B))\n    \n    # Calculate the number of members each club had in the end after the given members left\n    members_end = solutions[b] - 4  # or solutions[B] - 36\n    \n    return members_end\n\nans = solution()"
    ],
    "caa371df0a494602a41234dce6604f84": [
        "def solution():\n    num_zeros = 0\n    two_count = 0\n    five_count = 0\n\n    for number in range(301, 1000):\n        while number % 2 == 0:\n            two_count += 1\n            number /= 2\n        while number % 5 == 0:\n            five_count += 1\n            number /= 5\n    \n    num_zeros = min(two_count, five_count)\n\n    return num_zeros\n\nans = solution()"
    ],
    "6d85c136dca14c8fb76cfaff88586b4f": [
        "def solution():\n    ans = 5.2 / 10\n    return ans\n\nans = solution()"
    ],
    "cc28359065b040f0baac3572436155d0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    wendy, vivien = symbols('wendy vivien')\n    equation1 = Eq(wendy, 2 * vivien)\n    equation2 = Eq(vivien - 10, (wendy - 10) / 4)\n    solutions = solve((equation1, equation2), (wendy, vivien))\n    \n    wendy_in_5_years = solutions[wendy] + 5\n    \n    return wendy_in_5_years\n\nans = solution()"
    ],
    "90378da3a7ee431ca10e34550d2fde15": [
        "def solution():\n    ans = sum(1/i for i in range(10, 20))\n    return int(ans)\n\nans = solution()"
    ],
    "dc773bc479574ee4a35fac2c1bab3b74": [
        "def solution():\n    # Total value of the numbers printed on cards is 504.\n    total_value = 504\n    # The average value of all the numbers is 126.\n    average_value = 126\n    # There are total_value / average_value number of cards.\n    num_cards = total_value / average_value\n    # The difference between the greatest and smallest number is 6.\n    # Since the numbers are consecutive odd numbers, there are (num_cards - 1) * 2 difference between largest and smallest\n    difference = 6\n    # Smallest number is the average value - (number of cards - 1) differences\n    smallest_number = average_value - (num_cards - 1) * difference / 2\n\n    return int(smallest_number)\n\nans = solution()"
    ],
    "bc0c739adc5f403fb13b64dab9bc2e64": [
        "def solution():\n    x = (5 + 3) / 1\n    return x\n\nans = solution()"
    ],
    "e37f0736fbf94dbbadaa812272966e1b": [
        "def solution():\n    return 617 - 385\n\nans = solution()"
    ],
    "23fdb74183d9468b86a9a1e7485a3ab9": [
        "def solution():\n    for number in range(10, 100):\n        if number % 6 == 0 and (number - 1) % 13 == 0:\n            return number\n\nans = solution()"
    ],
    "57b28975ea284c60b94b10c37a4a685a": [
        "def solution():\n    english_classes = 20\n    math_classes = 35\n    both_classes = 15\n    total_students = english_classes + math_classes - both_classes\n    return total_students\n\nans = solution()"
    ],
    "25a45bd50b6544e0923661f3f0222503": [
        "def solution():\n    # Speeds\n    rabbit_speed = 330  # in m/min\n    turtle_speed = 30   # in m/min\n\n    # Time before rabbit sleeps\n    time_before_sleep = 10  # in minutes\n\n    # Rabbit position before sleep\n    rabbit_pos_before_sleep = rabbit_speed * time_before_sleep\n\n    # Total time rabbit slept\n    rabbit_sleep_time = 215  # in minutes\n\n    # Turtle's position when rabbit wakes up\n    turtle_pos_after_rabbit_wakes = turtle_speed * (time_before_sleep + rabbit_sleep_time)\n\n    # Time left for turtle to finish after rabbit wakes up\n    time_left_for_turtle = (6990 - turtle_pos_after_rabbit_wakes) / turtle_speed\n\n    # Distance rabbit can cover in the time left for the turtle\n    rabbit_distance_after_sleep = rabbit_speed * time_left_for_turtle\n\n    # Position where rabbit will be if it runs while turtle finishes\n    rabbit_final_pos = rabbit_pos_before_sleep + rabbit_distance_after_sleep\n\n    # Check who reaches the finish line first and the distance between them\n    if rabbit_final_pos >= 6990 and turtle_pos_after_rabbit_wakes < 6990:\n        winner = \"rabbit\"\n        distance_between = rabbit_final_pos - 6990\n    else:\n        winner = \"turtle\"\n        distance_between = 6990 - turtle_pos_after_rabbit_wakes\n\n    return winner, distance_between\n\nans = solution()"
    ],
    "f04bf8b6007544d3b9bb2fd42578dd8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bolt, boris = symbols('bolt boris')\n    \n    equation1 = Eq(bolt, boris + 1656)\n    equation2 = Eq(bolt, 5 * boris + 280)\n\n    solutions = solve((equation1, equation2), (bolt, boris))\n\n    total_distance = solutions[bolt] + solutions[boris]\n    return total_distance\n\nans = solution()"
    ],
    "d40336763f3641a1be634dae96636feb": [
        "def solution():\n    ans = 4*(2+7) - 2*(5+3)\n    return ans\n\nans = solution()"
    ],
    "5e7272ec96dc4c028e0cf9d07c5a405f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g = the number of girls, b = the number of boys\n    g, b = symbols('g b')\n\n    # g + b = 1690 (total number of pupils)\n    # b - g = 90 (90 more boys than girls)\n    equation1 = Eq(g + b, 1690)\n    equation2 = Eq(b - g, 90)\n\n    # Solving the equations for g and b\n    pupils = solve((equation1, equation2), (g, b))\n    girls = pupils[g]\n    boys = pupils[b]\n\n    # Ratio of girls who can swim to those who cannot\n    # Let gs = girls who can swim, gns = girls who cannot swim\n    # gs/gns = 31/49 implies gs = 31k, gns = 49k where k is a constant\n    gs_ratio, gns_ratio = 31, 49\n    k = symbols('k')\n    gs = gs_ratio * k\n    gns = gns_ratio * k\n\n    # The total number of girls is the sum of girls who can and cannot swim\n    equation3 = Eq(gs + gns, girls)\n\n    # Solving the equation for k\n    girls_swim_constant = solve(equation3, k)\n    gs = gs * girls_swim_constant[0]\n    gns = gns * girls_swim_constant[0]\n\n    # Boys who can swim is 120 less than boys who cannot swim\n    # Let bs = boys who can swim, bns = boys who cannot swim\n    # bns = bs + 120\n    bs, bns = symbols('bs bns')\n    equation4 = Eq(bs + 120, bns)\n\n    # The total number of boys is the sum of boys who can and cannot swim\n    equation5 = Eq(bs + bns, boys)\n\n    # Solving the equations for bs and bns\n    boys_swim = solve((equation4, equation5), (bs, bns))\n    bs = boys_swim[bs]\n    bns = boys_swim[bns]\n\n    # Number of pupils who cannot swim is sum of girls and boys who cannot swim\n    cannot_swim = gns + bns\n\n    return cannot_swim\n\nans = solution()"
    ],
    "a989d97e5a634181a65ac6343582a44d": [
        "def solution():\n    final_amount = 484\n    increase_rate = 1.10  # 10% increase each year\n\n    # Reverse the process of increasing the pocket money to find the original amount\n    original_amount = final_amount / (increase_rate**3)  # For three years from 2018 to 2020\n\n    return original_amount\n\nans = solution()"
    ],
    "0e3fbb38811f4247902fb227b710e62e": [
        "def solution():\n    boys = 12\n    boys_to_girls_ratio = 1 / 2\n    girls = boys / boys_to_girls_ratio\n    total_students = boys + girls\n    return int(total_students)\n\nans = solution()"
    ],
    "4d62c7befaad4eceb13cc1cd164eebe3": [
        "def solution():\n    zeros = 0\n    i = 5\n    # Since zeros in a factorial come from pairs of 5 and 2, we count the number of 5's\n    while 789 // i >= 1:\n        zeros += 789 // i\n        i *= 5\n    return zeros\n\nans = solution()"
    ],
    "20418f7933e340978dd3bd82bcc92a3e": [
        "def solution():\n    from math import factorial\n\n    # Total number of ways to arrange 7 people\n    total_ways = factorial(7)\n\n    # Number of ways to arrange the 3 people who don't want to stand next to each other\n    # We treat these 3 people as a unit, so we have 5 units to arrange (4 individuals + 1 unit)\n    arrangement_with_unit = factorial(5)\n\n    # Within this unit, the 3 people can be arranged in 3! ways\n    arrangement_within_unit = factorial(3)\n\n    # These 3 people can be together in a row in 5 different position sets\n    # (Slots: 1-2-3, 2-3-4, 3-4-5, 4-5-6, 5-6-7)\n    positions_for_unit = 5\n\n    # Calculate the ways in which the 3 people are together\n    ways_together = arrangement_with_unit * arrangement_within_unit * positions_for_unit\n\n    # Subtract the ways the 3 people are together from the total number of ways to get the final answer\n    return total_ways - ways_together\n\nans = solution()"
    ],
    "12e5a736389f435683bb5c8e50d61e2b": [
        "def solution():\n    first_term = 10\n    fourth_term = 25\n    num_rows = 25\n    # Calculate the common difference of the arithmetic sequence\n    common_difference = (fourth_term - first_term) / (4 - 1)\n    # Calculate the last term using the formula of the nth term in an arithmetic sequence\n    last_term = first_term + (num_rows - 1) * common_difference\n    # Calculate the sum of the arithmetic sequence using the formula\n    total_athletes = (num_rows / 2) * (first_term + last_term)\n\n    return int(total_athletes)\n\nans = solution()"
    ],
    "d1bd5b0281c14603821cd856c0814f93": [
        "def solution():\n    first_term = 10\n    last_term = 20\n    num_terms = last_term - first_term + 1\n    \n    # Sum of an arithmetic series formula: S_n = n/2 * (first_term + last_term)\n    sum_of_series = num_terms / 2 * (first_term + last_term)\n    \n    return int(sum_of_series)\n\nans = solution()"
    ],
    "bddc0899c1ca45f1a66f449e0e844404": [
        "def solution():\n    ans = 23 * 76\n    return ans\n\nans = solution()"
    ],
    "bef9ea98d3814300913ad8631dcc87c7": [
        "def solution():\n    total_participants = 100\n    min_participants_in_max_school = 4\n    \n    max_schools = total_participants // min_participants_in_max_school\n    \n    return max_schools\n\nans = solution()"
    ],
    "49744fee4f6447fcb89a783113d3f0c0": [
        "def solution():\n    # Total score for Team A\n    total_score_a = 76 * 20\n    \n    # Total score for Team A and Team B combined, assuming x students in Team B\n    # Average score for both teams * total number of students (20 + x)\n    x = symbols('x')\n    equation = Eq((total_score_a + 67 * x) / (20 + x), 70)\n\n    # Solve for x, number of students in team B\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "cde4477099f04ff785b49a2072d18f0b": [
        "def solution():\n    num_cakes = 195\n    cost_per_cake = 46\n    \n    total_cost = num_cakes * cost_per_cake\n    \n    return total_cost\n\nans = solution()"
    ],
    "6f4e289e9e9942129769e8733efea31f": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            time_str = f\"{hour:02d}{minute:02d}\"\n            if time_str.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "3bda0dbde94744968aa0181ba1cc0bac": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 2, 3, 7, 8, 9]\n    perms = permutations(digits, 6)\n    min_product = float('inf')\n\n    for perm in perms:\n        num1 = perm[0] * 100 + perm[1] * 10 + perm[2]\n        num2 = perm[3] * 100 + perm[4] * 10 + perm[5]\n        product = num1 * num2\n        if product < min_product:\n            min_product = product\n\n    return min_product\n\nans = solution()"
    ],
    "cd817843175e41e8b65030d600357b18": [
        "from itertools import permutations\n\ndef solution():\n    max_product = 0\n    min_product = float('inf')\n\n    # Loop through all permutations of 1 to 9, taking the first 4 digits as the first number\n    # and the next 3 digits as the second number\n    for p in permutations(range(1, 10)):\n        ABCD = p[0]*1000 + p[1]*100 + p[2]*10 + p[3]\n        EFG = p[4]*100 + p[5]*10 + p[6]\n        \n        if ABCD + EFG == 1993:\n            product = ABCD * EFG\n            max_product = max(max_product, product)\n            min_product = min(min_product, product)\n    \n    return max_product - min_product\n\nans = solution()"
    ],
    "e9c5342a82354465b6f16c78f081eeab": [
        "def solution():\n    min_steps = 25 - 1  # The number of steps Sam has to take from the 1st position to reach the 25th position\n    max_roll = 6        # The maximum number he can roll on a regular dice\n\n    # Calculate the minimum number of times Sam needs to roll the dice\n    # by dividing the minimum steps needed by the maximum roll value\n    # and rounding up because you cannot have a fraction of a roll\n    from math import ceil\n    min_rolls = ceil(min_steps / max_roll)\n\n    return min_rolls\n\nans = solution()"
    ],
    "e17d88a82a53495296ec5959ab199254": [
        "def solution():\n    ans = 4.5 * 14\n    return ans\n\nans = solution()"
    ],
    "018443a51fa1436b9ab0ca6c0c37b98f": [
        "def solution():\n    # Start with smallest possible tens digit, which is 1 for a 2-digit number.\n    for tens in range(1, 10):\n        # Calculate the ones digit by subtracting the tens digit from the total sum of digits.\n        ones = 15 - tens\n        # Check if the ones digit is less than 10, as it's a 2-digit number.\n        if ones < 10:\n            # Return the smallest 2-digit number by combining the tens and ones.\n            return tens * 10 + ones\n\nans = solution()"
    ],
    "2edcaf59ada74114ad5ad084b9daa534": [
        "def solution():\n    ans = 2 - (-2 - 2) - (-2 - (-2 - 2))\n    return ans\n\nans = solution()"
    ],
    "c46f174aa4ca4269bd208d1d522bca03": [
        "def solution():\n    return 43 - 5.2 + 1.03\n\nans = solution()"
    ],
    "a51bd65e7b8041c29809ddac356ad0cd": [
        "def solution():\n    # This is an arithmetic sequence where the first term a1 = 2019\n    # and the common difference d = -50. We want to find the last term 'an'\n    # that is greater or equal to 19 and compute the sum.\n    \n    first_term = 2019\n    common_difference = -50\n    last_term_condition = 19\n\n    # Calculate the number of terms using the formula: an = a1 + (n-1)*d >= last_term_condition\n    # Rearrange to find n: n = (an - a1) / d + 1\n    # Since terms need to be integer, we use floor division\n    \n    n = (first_term - last_term_condition) // abs(common_difference) + 1\n\n    # Sum of an arithmetic sequence: S = n/2 * (a1 + an) [where 'an' is the last term]\n    last_term = first_term + (n - 1) * common_difference\n    sum_arithmetic_sequence = n / 2 * (first_term + last_term)\n\n    return int(sum_arithmetic_sequence)\n\nans = solution()"
    ],
    "d77bee6b305846ecbd5dff987f4e42d6": [
        "def solution():\n    ans = 0.45 + 1.02 + 3.003\n    return ans\n\nans = solution()"
    ],
    "ccee4c3a5a784522aa2ab0b3f57c382d": [
        "def solution():\n    ans = 20.23 * 321 + 202.3 * 45.6 + 2.023 * 2230\n    return ans\n\nans = solution()"
    ],
    "a05a23198be14a49b4fffef79e084b27": [
        "def solution():\n    depth = 220\n    climb_rate = 40\n    slip_back = 10\n    net_distance_per_hour = climb_rate - slip_back\n    hours = 0\n\n    while depth > 0:\n        depth -= climb_rate\n        hours += 1\n        if depth <= 0:\n            break\n        depth += slip_back\n\n    return hours\n\nans = solution()"
    ],
    "6cdbe58e9a9f4186995fe83503eec2d2": [
        "from sympy import isprime\n\ndef solution():\n    max_prime = None\n    for number in range(29, 0, -1):  # We start from 29 as it is the largest number less than 30\n        if all(digit in '0123456789' for digit in str(number)) and isprime(number):\n            max_prime = number\n            break\n    return max_prime\n\nans = solution()"
    ],
    "6114bae2343b4198a428d3afa112c960": [
        "def solution():\n    total = 3989\n    known_sum = 3000 + 80 + 9\n    missing_number = total - known_sum\n    \n    return missing_number\n\nans = solution()"
    ],
    "aacb3756717d41cc8276dc87aede4f8c": [
        "def solution():\n    # Price of one cabbage\n    price_per_cabbage = 0.96\n    # Total price for 8 cabbages\n    total_price = 8 * price_per_cabbage\n    # Calculate price per lettuce, given the total price can buy 6 lettuces\n    price_per_lettuce = total_price / 6\n    \n    return price_per_lettuce\n\nans = solution()"
    ],
    "019ec282bc4a45b8a08add1000a1c483": [
        "def solution():\n    total_money = 388\n    spent_money = 97\n    saved_money = total_money - spent_money\n    return saved_money\n\nans = solution()"
    ],
    "c10ff9a910b5472fa4b29fef9b93fe4f": [
        "def solution():\n    start_time = 13 * 60 + 52  # Convert start time to minutes after midnight\n    end_time = 14 * 60 + 5  # Convert end time to minutes after midnight\n    \n    duration_in_minutes = end_time - start_time\n    \n    cost_per_minute = 14\n    total_cost = duration_in_minutes * cost_per_minute\n\n    return total_cost\n\nans = solution()"
    ],
    "8cf914f63b224541b0dbbd628dc0d76f": [
        "def solution():\n    from sympy import divisors\n\n    ans = sum(divisors(20))\n    return ans\n\nans = solution()"
    ],
    "5111af6f7b234a2a86f4a95d7fe4e3aa": [
        "def solution():\n    total_distance = 30\n    original_num_plants = 11\n    plants_removed = 8\n    remaining_plants = original_num_plants - plants_removed\n    \n    # Calculate the number of intervals for the original arrangement\n    original_intervals = original_num_plants - 1\n    # Calculate the distance for one interval in the original arrangement\n    original_interval_distance = total_distance / original_intervals\n    \n    # Calculate the new number of intervals after removing the plants\n    new_intervals = remaining_plants - 1\n    # The new interval distance will be the original interval distance \n    # times the original number of intervals divided by the new number of intervals\n    new_interval_distance = original_interval_distance * original_intervals / new_intervals\n    \n    return new_interval_distance\n\nans = solution()"
    ],
    "90f6519f131740598ed9fbc1b29e3f94": [
        "def solution():\n    original_typists = 5\n    sick_typists = 2\n    healthy_typists = original_typists - sick_typists\n    original_work = 6000  # words\n    original_time = 20    # minutes\n    target_work = 9000    # words\n    \n    # Calculate words per minute for the original group of typists\n    words_per_minute_original = original_work / original_time\n    \n    # Calculate the work rate for each individual typist\n    work_rate_per_typist = words_per_minute_original / original_typists\n    \n    # Calculate the new work rate with the healthy typists\n    words_per_minute_current = work_rate_per_typist * healthy_typists\n    \n    # Calculate the time needed to type out 9000 words with the remaining typists\n    time_needed = target_work / words_per_minute_current\n    \n    return time_needed\n\nans = solution()"
    ],
    "df2923c88c0f4ff3b1ecc189c2f6e24f": [
        "def solution():\n    return 0.4 * 320\n\nans = solution()"
    ],
    "7b410b23a38b498c940b646f7eb41bbc": [
        "def solution():\n    pen_price = 5.50\n    ruler_price = 7.60\n    total_price = pen_price + ruler_price\n    return total_price\n\nans = solution()"
    ],
    "3d380dd79fda442a8c27fd6f0f572e5b": [
        "def solution():\n    return 251 * 27\n\nans = solution()"
    ],
    "e3710402e52e4b1a92a506cba8e00a66": [
        "def solution():\n    # There are three positions in a three-digit number: hundreds, tens, and units.\n    # Each position can be either 2 or 3, but we need at least one of each.\n    \n    # We count all possibilities for three positions with only 2s and 3s\n    total_pos = 2 * 2 * 2  # 2 possibilities for each of the 3 positions\n\n    # We subtract the cases where all digits are the same\n    # (i.e., all 2s or all 3s, which are not allowed as we need at least one of each).\n    same_digit_cases = 2  # (222 and 333)\n\n    # The final answer is the total possible combinations minus the invalid ones\n    ans = total_pos - same_digit_cases\n\n    return ans\n\nans = solution()"
    ],
    "1969baf23afa40a7baf0654943977371": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime(2023, 10, 17)  # assuming the year is 2023\n    end_date = datetime(2023, 12, 20)\n    sunday_count = 0\n    current_date = start_date\n\n    while current_date <= end_date:\n        if current_date.weekday() == 6:  # Sunday\n            sunday_count += 1\n        current_date += timedelta(days=1)\n\n    return sunday_count\n\nans = solution()"
    ],
    "293fd7b7273c4a2985a35719002a4df3": [
        "def solution():\n    ans = 43 * 16\n    return ans\n\nans = solution()"
    ],
    "5d4cb1405ca241f99a0798ad88be93f8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, peach = symbols('apple peach')\n    \n    equation1 = Eq(4*apple + 3*peach, 10)\n    equation2 = Eq(2*apple + 2*peach, 6)\n    \n    solutions = solve((equation1, equation2), (apple, peach))\n    \n    return solutions[apple]\n\nans = solution()"
    ],
    "89f3344c7d3f4ec385941566d34f211b": [
        "from sympy import lcm\n\ndef solution():\n    # Convert minutes to seconds for uniformity\n    first_light = 30  # 0.5 minutes = 30 seconds\n    second_light = 45  # 0.75 minutes = 45 seconds\n    total_time = 9 * 60  # 9 minutes = 540 seconds\n\n    # Find the least common multiple of the two lights\n    lcm_two_lights = lcm(first_light, second_light)\n\n    # Calculate possible times for the third light\n    third_light = lcm_two_lights\n    while third_light <= total_time:\n        if total_time % third_light == 0:\n            return third_light\n        third_light += lcm_two_lights\n    return None\n\nans = solution()"
    ],
    "bb8774542eff44078c1080ee1b832fa5": [
        "def solution():\n    from math import factorial\n\n    # There are 5 skiboards and 5 people, so it's simply a permutation problem\n    # where we need to find out the number of ways to arrange 5 skiboards among 5 people.\n    # This is equal to 5!, because each person has a distinct choice of skiboards.\n\n    num_ways = factorial(5)\n    return num_ways\n\nans = solution()"
    ],
    "faa1d07aa4874b9ba6f33ab3636209e1": [
        "def solution():\n    original_price = 7.20\n    new_price = 8.10\n    price_increase = new_price - original_price\n    percentage_increase = (price_increase / original_price) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "675eadedaada48a9974ff5a0fa4e1f98": [
        "def solution():\n    total_children = 26\n    henry_position = 18\n    tony_reverse_position = 17\n\n    # Find Tony's position counting from left to right\n    tony_position = total_children - tony_reverse_position + 1\n\n    # Calculate the number of children between Henry and Tony inclusive\n    children_between = abs(tony_position - henry_position) + 1\n\n    return children_between\n\nans = solution()"
    ],
    "88eda4595d1348ee82e97a6c5620dcdc": [
        "def solution():\n    millimetres_per_metre = 1000\n    metres = 2\n    ans = metres * millimetres_per_metre\n    return ans\n\nans = solution()"
    ],
    "d5a7ecbc1d6a47828162d5c281243895": [
        "def solution():\n    total_spent = 40\n    price_difference = 0.40\n\n    # Let the cost of one apple tart be x dollars.\n    # Then the cost of one strawberry tart is x + 0.40 dollars.\n    # She bought 2y apple tarts and y strawberry tarts.\n\n    # The total cost for apple tarts is 2y*x and for strawberry tarts is y*(x+0.40).\n    # According to the problem, 2y*x = y*(x+0.40) and the total is 3y*x + 0.40y = 40\n\n    # From 2y*x = y*(x+0.40), we get 2x = x + 0.40, which simplifies to x = 0.40\n\n    # Substituting the values in 3y*x + 0.40y = 40, we get 3y*0.40 + 0.40y = 40\n    # Simplify to get 1.20y + 0.40y = 40, which simplifies further to 1.60y = 40\n\n    y = 40 / 1.60\n\n    # She bought 2y apple tarts and y strawberry tarts.\n    total_tarts = 2 * y + y\n\n    return int(total_tarts)\n\nans = solution()"
    ],
    "8f0c9f7a6b3b4934bbef8a5ff5370595": [
        "def solution():\n    total_numbers = 100\n    multiples_of_ten = total_numbers // 10\n    not_multiples_of_ten = total_numbers - multiples_of_ten\n    percentage = (not_multiples_of_ten / total_numbers) * 100\n    return percentage\n\nans = solution()"
    ],
    "eccd3a25ed1441c68e1a0cbcad3fe748": [
        "def solution():\n    initial_loan = 4\n    paid_back = initial_loan * 0.30\n    still_owed = initial_loan - paid_back\n    \n    return still_owed\n\nans = solution()"
    ],
    "35f8d27cbb554601999e2b7fe17736e9": [
        "def solution():\n    from sympy import Eq, solve, symbols\n    \n    total_pieces = symbols('total_pieces')\n    \n    # On the first day 20% of the pieces were fitted\n    first_day_fitted = 0.20 * total_pieces\n    \n    # On the second day, 60 more pieces were fitted\n    second_day_fitted = first_day_fitted + 60\n    \n    # After the second day, the ratio of fitted pieces to unfitted pieces is 2:5\n    # Let 'fitted' be x and 'unfitted' be y\n    # We have x/y = 2/5 and x + y = total_pieces - second_day_fitted\n    # Therefore, x = 2/7 * (total_pieces - second_day_fitted)\n    # And y = 5/7 * (total_pieces - second_day_fitted)\n    \n    fitted = 2/7 * (total_pieces - second_day_fitted)\n    unfitted = 5/7 * (total_pieces - second_day_fitted)\n    \n    # Setting up the equation fitted/unfitted = 2/5\n    equation = Eq(fitted/unfitted, 2/5)\n    \n    # Solving the equation\n    ans = solve(equation, total_pieces)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "d74f00b435ac4576a44ffbd313804476": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(12 * (x - 1), 36)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "6f694af3c9bd48f386b3503a12b5964d": [
        "def solution():\n    # Each cat has 4 legs, each dog has 4 legs, a rabbit has 4 legs, and birds have 2 legs.\n    legs_per_cat = 4\n    legs_per_dog = 4\n    legs_per_rabbit = 4\n    legs_per_bird = 2\n    \n    # Total number of legs of cats, dogs, and the rabbit\n    legs_of_cats_dogs_rabbit = 2 * legs_per_cat + 2 * legs_per_dog + 1 * legs_per_rabbit\n    \n    # Subtract the known legs from the total to find the number of legs birds have\n    legs_of_birds = 28 - legs_of_cats_dogs_rabbit\n    \n    # Since each bird has 2 legs, dividing the bird leg count by 2 gives the number of birds\n    num_birds = legs_of_birds // legs_per_bird\n    \n    return num_birds\n\nans = solution()"
    ],
    "4d9b648aa31444f0a8961689da036596": [
        "def solution():\n    jack_speed = 15 # km per hour\n    rose_speed = 10 # km per hour\n    meeting_time = 10 # hours\n\n    distance = (jack_speed + rose_speed) * meeting_time\n    \n    return distance\n\nans = solution()"
    ],
    "75a97b3cb75d416aaa38e4b494bb534c": [
        "def solution():\n    n = 0\n    for i in range(1, 25, 2):  # Loop through odd numbers from 1 to 24\n        if 24 % i == 0:  # Check if i is a factor of 24\n            n += i  # Add the factor to the sum\n    return n\n\nans = solution()"
    ],
    "6c4a0c8fddc0483ca389ad988e693de1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original total number of cards\n    x = symbols('x')\n\n    # Melvin's original number of cards\n    melvin_original = 40\n\n    # Nelson gave Melvin cards\n    melvin_after_nelson = melvin_original + (5/8) * melvin_original\n\n    # Melvin and Nelson each lost cards to Oliver\n    melvin_after_losing = melvin_after_nelson - (1/4) * melvin_original\n    nelson_after_losing = (x - melvin_original) - (1/4) * melvin_original  # Nelson originally had (x - 40)\n\n    # Melvin gained cards from Nelson\n    melvin_final = melvin_after_losing + (1/8) * melvin_original\n    nelson_final = nelson_after_losing - (1/8) * melvin_original\n\n    # Oliver's final amount\n    oliver_final = 40 / 4 + 40 / 4  # from both Melvin and Nelson\n\n    # All have the same number of cards after final round\n    equation = Eq(melvin_final, nelson_final)\n    equation = Eq(melvin_final, oliver_final)\n\n    solutions = solve((equation, ), (x, ))\n\n    return solutions[0]\n\nans = solution()"
    ],
    "d41691029c33461e96ef95148a5eba13": [
        "def solution():\n    # Define the variables for the ages of the children and Polly\n    # Polly's current age is represented as x\n    # Her children's ages would be (x-20), (x-22) and (x-24) respectively\n    # Set up the equation for the problem: Polly's age = sum of children's ages\n    # x = (x - 20) + (x - 22) + (x - 24)\n    # Solve the equation for x\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    \n    # Create the equation based on the problem statement\n    equation = Eq(x, (x - 20) + (x - 22) + (x - 24))\n    \n    # Solve the equation for x\n    solution = solve(equation)\n\n    # Return the solution[0] which is the age of Polly\n    return solution[0]\n\nans = solution()"
    ],
    "b7eac049934747d7b62bda3fbaa5bc8d": [
        "def solution():\n    from math import prod\n    from itertools import combinations\n\n    # List of card numbers\n    cards = [6, 12, 35, 175, 245, 300]\n\n    # Find all possible product combinations of two and three cards\n    product_2_cards = {prod(comb) for comb in combinations(cards, 2)}\n    product_3_cards = {prod(comb) for comb in combinations(cards, 3)}\n\n    # Find the common product\n    common_product = product_2_cards.intersection(product_3_cards)\n    common_product = list(common_product)[0]\n\n    # Find which numbers from the cards are involved in making up the common product\n    for comb in combinations(cards, 5):\n        if prod(comb) // common_product in cards:\n            # Every number except the leftover is included, so return the leftover\n            return list(set(cards) - set(comb))[0]\n\nans = solution()"
    ],
    "e3e8c1bb5e4a47f285f57b642b489dbf": [
        "def solution():\n    first_term = 2\n    last_term = 100\n    difference = 2\n    \n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_sequence = num_terms * (first_term + last_term) // 2\n    \n    return sum_sequence\n\nans = solution()"
    ],
    "2c263a2cb715471786756a60d709dd70": [
        "def solution():\n    part1 = (2 * 5) + (1 * 5)\n    part2 = (2 + 1) * 5\n    ans = [part1, part2]\n    return ans\n\nans = solution()"
    ],
    "59093ee3ace74e00af6550aaa30da949": [
        "def solution():\n    adeline_sweets = 12\n    sister_gives = 7\n    total_sweets = adeline_sweets + sister_gives\n    return total_sweets\n\nans = solution()"
    ],
    "2f7745024468479cbef4990d93752c41": [
        "def solution():\n    for big_boxes in range(10):\n        small_boxes = (50 - 6 * big_boxes) / 4\n        if small_boxes.is_integer() and small_boxes >= 0 and small_boxes + big_boxes < 10:\n            return big_boxes\n\nans = solution()"
    ],
    "14c4144f0869404aa3f5ee8c1fd30121": [
        "def solution():\n    total_weight = 20\n    multiplier = 5\n\n    suitcase_weight = total_weight / (multiplier - 1)\n\n    return suitcase_weight\n\nans = solution()"
    ],
    "1a06f46e2821453599d11045a0a00ca2": [
        "def solution():\n    ans = 5 * 4 + 6 * 8\n    return ans\n\nans = solution()"
    ],
    "9119ad36d763494589f8442ace3a3ec0": [
        "def solution():\n    # Given:\n    # Combined age of 2 dogs 4 years ago -> 10 years\n    # Age increase for each dog after 4 years -> 4 years each\n    # Age increase for each dog in the next 2 years -> 2 years each\n    # Total age increase for both dogs in 6 years -> (4 + 2) * 2 = 12 years\n\n    increase_in_age = (4 + 2) * 2\n    combined_age_in_2_years = 10 + increase_in_age\n    \n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "daa74d1025eb4e84bac18f7f987c4c5b": [
        "def solution():\n    richard = 12\n    adam = 2 * richard\n    will = (2/3) * adam\n    total_age = richard + adam + will\n\n    return total_age\n\nans = solution()"
    ],
    "50c1187bcefc42f782b81876db5c9b43": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    m = symbols('m')\n    equation = Eq(14*m, 8*(1*m) - 3)\n    solution = solve(equation, m)\n    \n    return solution[m]\n\nans = solution()"
    ],
    "0220f39d28a1457ab882171d36b85267": [
        "def solution(x, y):\n    passengers_after_stop = x - 12 + y\n    return passengers_after_stop\n\nans = solution(x, y) # Replace x, y with actual numbers when calling the function"
    ],
    "d0dda40eb81841348c13c9c91a33a12b": [
        "def solution():\n    percentage = 15\n    total_amount = 340\n\n    ans = (percentage / 100) * total_amount\n\n    return ans\n\nans = solution()"
    ],
    "f0344902bde148c3ab13297920aace4a": [
        "def solution():\n    # Let the smaller number be x\n    # Let the larger number be y\n    # The difference y - x = 39 (Equation 1)\n    # The sum x + y = 59 (Equation 2)\n    # Solve the two equations to find x\n\n    # From Equation 1, we can express y as y = x + 39\n    # Substitute the value of y in Equation 2\n    # x + (x + 39) = 59\n    # 2x + 39 = 59\n    # 2x = 59 - 39\n    # 2x = 20\n    # x = 20 / 2\n    # x = 10\n\n    x = (59 - 39) / 2\n    return x\n\nans = solution()"
    ],
    "53956386ba3c4b4c950b6dca01045afc": [
        "def solution():\n    return 10*9*8*7*6*5*4*3*2*1\n\nans = solution()"
    ],
    "af73e4b5208646ebada742ac2fe92ee4": [
        "def solution():\n    justin_current_age = 8\n    mother_current_age = 32\n    \n    years = symbols('years')\n    equation = Eq(mother_current_age + years, 3 * (justin_current_age + years))\n    \n    ans = solve(equation, years)[0]\n    \n    return ans\n\nans = solution()"
    ],
    "b2f4e1c67fb348e19f5fc8792ed237cb": [
        "def solution():\n    for a in range(10):\n        for b in range(10):\n            for c in range(10):\n                if (100 * a + 10 * b + c) * (a + b + c) == 1926:\n                    return a + b + c\n\nans = solution()"
    ],
    "201413f1d95843569dc578e3191479b4": [
        "def solution():\n    # Given equations\n    A_times_B = 30\n    B_times_C = 35\n    C_times_A = 42\n\n    # Prime factorize the products\n    # Prime factors of A_times_B = 30 are 2, 3, and 5\n    # Prime factors of B_times_C = 35 are 5 and 7\n    # Prime factors of C_times_A = 42 are 2, 3, and 7\n\n    # from 30 and 35 we get that B = 5\n    B = 5\n    # from 30/5 and 42/5 we get A = 6 and C = 7\n    A = A_times_B // B\n    C = B_times_C // B\n\n    # Calculate A + B + C\n    ans = A + B + C\n    return ans\n\nans = solution()"
    ],
    "6ce557a6c8f5454c8bfd60bf19896563": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cora, qingle = symbols('cora qingle')\n    \n    # After Cora gives Qingle 8 sweets, Qingle will have 4 more sweets than Cora\n    equation = Eq(cora - 8 - (qingle + 8), -4)\n    \n    # Solve the equation\n    difference = solve(equation, (cora - qingle))\n    \n    # The difference in the number of sweets they have at first\n    return difference[0]\n\nans = solution()"
    ],
    "8687c8d26bc84869836e90d4f5fc68a9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jane, eric = symbols('jane eric')\n\n    initial_ratio = Eq(jane, 5/7 * eric)\n    new_ratio = Eq((jane + 6) / (eric - 6), 11/13)\n\n    solutions = solve((initial_ratio, new_ratio), (jane, eric))\n\n    total_seashells = solutions[jane] + solutions[eric]\n    return total_seashells\n\nans = solution()"
    ],
    "b4a6a6d3563d489c96fe7593170152df": [
        "def solution():\n    largest_number = 0\n    current_number = 0\n    warren_add = 20\n    naida_subtract = 1\n\n    # Loop through the sequence\n    while True:\n        # Warren adds\n        current_number += warren_add\n        largest_number = max(largest_number, current_number)\n        # Naida subtracts\n        current_number -= naida_subtract\n        # Check for the end of the sequence\n        if warren_add == 1 and naida_subtract == 20:\n            break\n        # Decrease Warren's addition and increase Naida's subtraction for next turn\n        warren_add -= 1\n        naida_subtract += 1\n\n    return largest_number\n\nans = solution()"
    ],
    "a46723e46cfb4bedb4d7b603e4267646": [
        "def solution():\n    # Time taken by the first faucet to fill the pool\n    first_faucet_time = 20\n    # Since the other faucets are 3 times faster, their time to fill the pool\n    other_faucet_time = first_faucet_time / 3\n\n    # Rate of filling by the first faucet\n    first_faucet_rate = 1 / first_faucet_time\n    # Rate of filling by the other three faucets\n    other_faucet_rate = 3 * (1 / other_faucet_time)\n\n    # Combined rate of filling the pool with all faucets\n    combined_rate = first_faucet_rate + other_faucet_rate\n\n    # Time to fill the pool with all faucets opened\n    time_to_fill = 1 / combined_rate\n    \n    return time_to_fill\n\nans = solution()"
    ],
    "18a547d69f104e56ae2814a05d14aaec": [
        "def solution():\n    # Since the line passes through the origin (0, 0), we have b = 0\n    b = 0\n    \n    # The slope (m) of the line can be calculated by using the coordinates of the origin and point (4, 8)\n    # m = (y2 - y1) / (x2 - x1)\n    # Here (x1, y1) are the coordinates of the origin (0, 0) and (x2, y2) are the coordinates of the point (4, 8)\n    m = (8 - 0) / (4 - 0)\n    \n    # We can now write down the equation: y = mx + b (b is 0)\n    # y = mx\n    equation = f\"y = {m:.1f}x\"\n    return equation\n\nans = solution()"
    ],
    "ef6a6b59f128499ab1b4a2073ffa3a22": [
        "def solution():\n    total_pupils = 180\n    piano_pupils = 52\n    violin_pupils = 38\n\n    piano_and_violin = piano_pupils / 4\n\n    piano_only = piano_pupils - piano_and_violin\n    violin_only = violin_pupils - piano_and_violin\n\n    neither = total_pupils - (piano_only + violin_only + piano_and_violin)\n\n    return int(neither)\n\nans = solution()"
    ],
    "4d4d648041e64f4f8fbcae12529f4d91": [
        "def solution():\n    principal = 20000\n    interest_rate = 0.05\n    time_years = 11\n\n    total_amount = principal * (1 + interest_rate * time_years)\n\n    return total_amount\n\nans = solution()"
    ],
    "9494b45a03aa47d3b840f6416268ac67": [
        "from itertools import permutations\n\ndef solution():\n    digits = [5, 3, 9, 4, 8]\n    perm = permutations(digits)\n\n    smallest_even = float('inf')\n    for num in perm:\n        if num[-1] % 2 == 0:  # Make sure the last digit is even to ensure the whole number is even\n            value = int(''.join(map(str, num)))\n            if value < smallest_even and value >= 10000:  # Make sure it is a 5-digit number\n                smallest_even = value\n\n    return smallest_even\n\nans = solution()"
    ],
    "326c55e1dbe34a55b42d8f2355c0d688": [
        "def solution():\n    return 7\n\nans = solution()"
    ],
    "b38ea6a5211742ffb6b17515774d525f": [
        "def solution():\n    remaining_after_second_stop = 22\n\n    remaining_after_first_stop = remaining_after_second_stop / (1 - 1/3)\n\n    original_passengers = remaining_after_first_stop / (1 - 2/5)\n\n    return int(original_passengers)\n\nans = solution()"
    ],
    "2ef6d5e475ed4057b993f02bafa8ea83": [
        "def solution():\n    prime_factors = []\n    numbers = [48, 925, 38, 435]\n    for num in numbers:\n        factor_2, factor_5 = 0, 0\n        while num % 2 == 0:\n            factor_2 += 1\n            num //= 2\n        while num % 5 == 0:\n            factor_5 += 1\n            num //= 5\n        prime_factors.append((factor_2, factor_5))\n    \n    total_2s = sum(factor[0] for factor in prime_factors)\n    total_5s = sum(factor[1] for factor in prime_factors)\n    \n    ans = min(total_2s, total_5s)\n    return ans\n\nans = solution()"
    ],
    "4c36fb915f3b494faaabab2d3b6937ff": [
        "def solution():\n    import scipy.integrate as spi\n    \n    # Equations of the sides of the isosceles right triangle\n    # y = 0 (x-axis), x = 2 (y-axis) and y = 2 - x (diagonal)\n\n    # Function to integrate\n    def integrand(x):\n        return 1 - (x - 1)**2\n    \n    # Integral limits from 1 to 2 for x, where the distance from the right-angle vertex is less than 1\n    area, _ = spi.quad(integrand, 1, 2)\n    \n    # Area of the isosceles right triangle\n    triangle_area = 2 * 2 / 2\n    \n    # Probability that the selected point is less than 1 unit from the right-angle vertex\n    prob = area / triangle_area\n\n    return prob\n\nans = solution()"
    ],
    "a0bc9ddd90c8400ea4cf8347a9020791": [
        "def solution():\n    for A in range(1, 10):\n        for D in range(1, 10):\n            if A == (D / 4):\n                for B in range(1, 10):\n                    if B == A - 1:\n                        for C in range(1, 10):\n                            if A != B and A != C and A != D and B != C and B != D and C != D:\n                                ABCD = A * 1000 + B * 100 + C * 10 + D\n                                DCBA = D * 1000 + C * 100 + B * 10 + A\n                                if ABCD * 4 == DCBA:\n                                    return ABCD\n\nans = solution()"
    ],
    "5787ee72c4d04dc79a6fef83e42a30f8": [
        "def solution():\n    A_math = 10\n    A_english = 15\n    A_both = 2\n\n    A_either = A_math + A_english - A_both\n\n    return A_either\n\nans = solution()"
    ],
    "6dc2dadd3a6147068fc0bfdae746ed45": [
        "def solution():\n    count = 0\n    for num in range(100, 201):\n        if str(num) == str(num)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "730f25d6c1bc4e37a31dd815615af70b": [
        "def solution():\n    result = 25\n    initial_number = (result - 10) * 3\n    return initial_number\n\nans = solution()"
    ],
    "1dbda155390140e09242722fa7ec4c1f": [
        "def solution():\n    n = 8  # Last term of the sequence\n    sum_of_sequence = n * (n + 1) // 2  # Sum of the first n natural numbers\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "61d2be77a64146af8827b79a42a801d8": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Time when Hannah left school\n    leave_school = datetime.strptime(\"15:22\", \"%H:%M\")\n    # Time when Hannah caught the bus\n    catch_bus = datetime.strptime(\"16:01\", \"%H:%M\")\n    # Time bus trip took\n    bus_trip_duration = timedelta(minutes=18)\n    # Time Hannah got home\n    get_home = datetime.strptime(\"16:35\", \"%H:%M\")\n\n    # Calculate walking time from leaving school to catching the bus\n    walking_time_to_bus = (catch_bus - leave_school).total_seconds() / 60\n    # Time Hannah arrived at the bus drop off point\n    drop_off_time = catch_bus + bus_trip_duration\n    # Calculate walking time from bus drop off to getting home\n    walking_time_to_home = (get_home - drop_off_time).total_seconds() / 60\n    \n    # Total walking time\n    total_walking_time = walking_time_to_bus + walking_time_to_home\n\n    return int(total_walking_time)\n\nans = solution()"
    ],
    "6877d33364b24d4982c45c4a93293a57": [
        "def solution():\n    numbers = [2, 3, 8, 4, 7, 6]\n    mean_value = 5\n    total_numbers = len(numbers) + 1  # Including 'a'\n    total_sum = mean_value * total_numbers\n    sum_without_a = sum(numbers)\n    a = total_sum - sum_without_a\n    return a\n\nans = solution()"
    ],
    "2d27041da5e747b9b4c4949e40cd5d6a": [
        "def solution():\n    total = 2030452\n    part = total - 30000 - 452\n    missing_number = part // 2\n    return missing_number\n\nans = solution()"
    ],
    "586e5da41dc343e286f5bdb9a9aab06c": [
        "def solution():\n    return 0.20 * 8880\n\nans = solution()"
    ],
    "d992065f5fdb49bdb385a59fc97cf3bb": [
        "def solution():\n    total_length_cm = 150\n    piece_length_m = (total_length_cm / 2) / 100\n    return piece_length_m\n\nans = solution()"
    ],
    "3ef61299b7c4476884b4646603c76fc5": [
        "def solution():\n    n = 72 // (3 * 6)\n    return n\n\nans = solution()"
    ],
    "94696a1a3ade4f6a85f0aaa9c64215ae": [
        "def solution():\n    pupils_in_row = 6 + 1 + 7  # Including Victoria\n    rows = 1 + 1 + 8  # Including Victoria's row\n    total_pupils = pupils_in_row * rows\n    return total_pupils\n\nans = solution()"
    ],
    "8b5b06b976f0457fb05ae92796e950c6": [
        "def solution():\n    average_score = 75\n    total_tests = 3\n    known_total = 172\n    total_for_all_tests = average_score * total_tests\n    score_for_remaining_test = total_for_all_tests - known_total\n    return score_for_remaining_test\n\nans = solution()"
    ],
    "5ea6d9da123442c4a8d28b5ba3fe74e5": [
        "def solution():\n    # Worst case scenario: the first three socks Lina picks consist of one of each color,\n    # which doesn't form a pair. To ensure a pair, she must pick one more.\n\n    # Counting socks by colors\n    # White: 5, Grey: 5, Black: 5\n    \n    # Using Pigeonhole Principle, Lina needs to take out 1 more sock after having 1 of each:\n    min_socks = 1 + 1 + 1 + 1\n\n    return min_socks\n\nans = solution()"
    ],
    "6246bd4ec6524aff80623b6953875e8b": [
        "def solution():\n    principal = 400000\n    rate = 1.2 / 100\n    time = 1\n\n    interest = principal * rate * time\n\n    return interest\n\nans = solution()"
    ],
    "743969de5e9d4dda93e740107239e799": [
        "def solution():\n    ans = 452 - 191\n    return ans\n\nans = solution()"
    ],
    "3378ca3dc79a44d9b8d60a873b97d5c7": [
        "def solution():\n    numerator_sum = sum(1/(i*(i+1)) for i in range(1, 20, 2))\n    denominator_sum = sum(1/((20 - i)*(i+1)) for i in range(11, 16))\n\n    ans = numerator_sum / denominator_sum\n    return ans\n\nans = solution()"
    ],
    "34a7fe65f21049408fe7d74314f392a8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for the unknown number\n    x = symbols('x')\n    \n    # Construct the equation based on the problem statement\n    equation = Eq((x + 3) / 4 * 9, 81)\n    \n    # Solve the equation for x\n    solution = solve(equation, x)\n    \n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "eb5c3a8d80624ac095e1421ab5bf8025": [
        "def solution():\n    return (17 - 2) / 5\n\nans = solution()"
    ],
    "64b7530c3fcd4d98840ab7e499004ae8": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    distance_initial = 6300  # distance at 8:00\n    distance_830 = 1800      # distance at 8:30\n    \n    # Distance traveled in 30 minutes (1800 seconds), thus his speed in meters per second\n    speed = (distance_initial - distance_830) / (30 * 60)  \n\n    # Time in seconds to travel the remaining distance at the calculated speed\n    time_to_reach = distance_830 / speed  \n\n    # convert time to reach from seconds to hours and minutes\n    hours = int(time_to_reach // 3600)\n    minutes = int((time_to_reach % 3600) // 60)\n    seconds = time_to_reach % 60\n\n    # Since the journey started at 8:00 am, we add the time elapsed since then\n    arrival_time_hour = 8 + hours\n    arrival_time_minutes = 30 + minutes  # account for the 30 mins already spent till 8:30 am\n    if arrival_time_minutes >= 60:\n        arrival_time_hour += 1\n        arrival_time_minutes -= 60\n\n    # Finally, return the time as a formatted string 'hh:mm:ss'\n    arrival_time = f\"{arrival_time_hour:02d}:{arrival_time_minutes:02d}:{int(seconds):02d}\"\n\n    return arrival_time\n\nans = solution()"
    ],
    "5521675555dc4d9a8af13086a54334e6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    # Mr. Smith's sugar total\n    mr_smith_sugar = 300 * 0.50 + 600 * 0.20\n    # Mr. Smith's total volume\n    mr_smith_total_volume = 300 + 600\n    # Mr. Smith's sugar concentration\n    mr_smith_sugar_concentration = mr_smith_sugar / mr_smith_total_volume\n\n    # Mrs. Smith's sugar total (without knowing x)\n    mrs_smith_sugar = 700 * 0.10 + 300 * (x / 100)\n    # Mrs. Smith's total volume\n    mrs_smith_total_volume = 700 + 300\n    # Mrs. Smith's sugar concentration (without knowing x)\n    mrs_smith_sugar_concentration = mrs_smith_sugar / mrs_smith_total_volume\n\n    # Equation for equal sugar concentration\n    equation = Eq(mr_smith_sugar_concentration, mrs_smith_sugar_concentration)\n\n    # Solve the equation\n    solution = solve(equation, x)\n    # Get the solution and round it to two decimal places\n    x_value = round(solution[0], 2)\n    \n    return x_value\n\nans = solution()"
    ],
    "207d21f7872b44c39bcd6ee8534d8b32": [
        "def solution():\n    total_candy = 36\n    candy_to_lily = (3 / 4) * total_candy\n    remaining_candy = total_candy - candy_to_lily\n    candy_to_brother = (1 / 3) * remaining_candy\n    candy_left = remaining_candy - candy_to_brother\n\n    return int(candy_left)\n\nans = solution()"
    ],
    "49c2deec1cbb44739a83382de18766c5": [
        "def solution():\n    pancakes_per_minute = 2\n    minutes = 12\n    total_pancakes = pancakes_per_minute * minutes\n    return total_pancakes\n\nans = solution()"
    ],
    "fa946bf107f84b9d9749b1c8b96288fb": [
        "def solution():\n    may_age = 7\n    age_difference_kenny_may = 10 - may_age\n    # When May is 10 years old\n    may_age_future = 10\n    three_times_may_age_future = 3 * may_age_future\n    # Kenny is 2 years older than his brother\n    kenny_age_future = three_times_may_age_future / 2\n    brother_age_future = kenny_age_future - 2\n    # Age difference between Kenny and May this year\n    kenny_age_now = kenny_age_future - age_difference_kenny_may\n    age_difference_kenny_may_now = kenny_age_now - may_age\n\n    return int(age_difference_kenny_may_now)\n\nans = solution()"
    ],
    "02842e44d6784d8ea8f173ee23a5edf6": [
        "def solution():\n    # Let's denote the total money Amy had originally as m.\n    # She spent m/2 on donuts and m/2 on muffins.\n    # The number of donuts she can buy with m/2 money is 7*(m/2)/10 = 7m/20.\n    # The number of muffins she can buy with m/2 money is 3*(m/2)/6 = m/4.\n    # We are given that she bought 54 more donuts than muffins:\n    # 7m/20 - m/4 = 54\n    # To solve for m, we first find a common denominator and get a single fraction on the left side:\n    # (14m - 5m) / 40 = 54\n    # 9m / 40 = 54\n    # Now we solve for m:\n    # 9m = 54 * 40\n    m = (54 * 40) / 9\n    return m\n\nans = solution()"
    ],
    "46e11702823f49719758ac932f77acbe": [
        "def solution():\n    cost_price = 10  # in pounds\n    selling_price_per_bag = 0.65  # in pounds, since 65p is 0.65 pounds\n    weight_per_bag = 0.25  # in kg, since 250 g is 0.25 kg\n    total_weight = 5  # in kg\n\n    number_of_bags = total_weight / weight_per_bag\n    total_selling_price = number_of_bags * selling_price_per_bag\n    profit = total_selling_price - cost_price\n\n    percentage_profit = (profit / cost_price) * 100\n\n    return percentage_profit\n\nans = solution()"
    ],
    "98264c90c4f44945a18baa5c270fa929": [
        "def solution():\n    total_apples = 14\n    total_children = 5\n\n    # At least one apple per child\n    min_apples_per_child = 1\n    remaining_apples = total_apples - (min_apples_per_child * total_children)\n\n    # Distribute remaining apples to the child who gets the most\n    most_apples = remaining_apples + min_apples_per_child\n\n    return most_apples\n\nans = solution()"
    ],
    "d8d809f89a7b4ed380c0e0f2a53b344a": [
        "def solution():\n    total = 46563 + 9785 + 859\n    return total\n\nans = solution()"
    ],
    "e97c46c875534340a3de7f73e01112a9": [
        "def solution():\n    # The distance between the 4th and 9th teeth is equal to the distance of 5 gaps\n    # as counting from 4th to 9th goes as follows: 4th gap, 5th gap, 6th gap, 7th gap, 8th gap.\n    num_gaps_between = 9 - 4\n    \n    # Total number of gaps is the number of teeth minus 1\n    total_gaps = 100 - 1\n\n    # The distance between 4th and 9th teeth (5 gaps) is 30mm, so each gap is 30/5 mm\n    gap_length_mm = 30 / num_gaps_between\n    \n    # The total length of the comb is the length of all gaps in mm\n    total_length_mm = gap_length_mm * total_gaps\n\n    # Convert the length from mm to cm\n    total_length_cm = total_length_mm / 10\n\n    return total_length_cm\n\nans = solution()"
    ],
    "9473695aa8e7449bb892566a91379acd": [
        "def solution():\n    # Grandmother's age on 1st December 2008\n    grandmother_age_2008 = 80\n    \n    # Mum's age on 1st December 1996\n    mum_age_1996 = 40\n    \n    # Calculate the difference in years between 2008 and 1996\n    year_difference = 2008 - 1996\n    \n    # Calculate grandmother's age in 1996\n    grandmother_age_1996 = grandmother_age_2008 - year_difference\n    \n    # Mum's age when she was 25\n    mum_age_when_25 = 25\n    \n    # Calculate the difference between mum's age in 1996 and when she was 25\n    age_difference = mum_age_1996 - mum_age_when_25\n    \n    # Calculate grandmother's age when mum was 25\n    grandmother_age_when_mum_25 = grandmother_age_1996 - age_difference\n    \n    return grandmother_age_when_mum_25\n\nans = solution()"
    ],
    "93c6119a0fb64233a3a47cabdebb6ab5": [
        "def solution():\n    total_ways = math.factorial(5)\n    together_ways = math.factorial(4) * 2  # 4 factorial for four slots and 2 for the arrangement of the two who refuse\n    ans = total_ways - together_ways\n    return ans\n\nimport math\nans = solution()"
    ],
    "56e4adc68056477b9e25d947d40d0245": [
        "def solution():\n    total_vegetables = 60\n    monday_sales = total_vegetables * 2 / 3\n    tuesday_sales = (total_vegetables - monday_sales) * 2 / 5\n    total_sales = monday_sales + tuesday_sales\n\n    return int(monday_sales), int(tuesday_sales), int(total_sales)\n\nans = solution()"
    ],
    "565d75f4184c40158e38b62f8b7a8e56": [
        "def solution():\n    ans = 26.1 / 10000\n    return ans\n\nans = solution()"
    ],
    "8c2140926a504b439da436bc045ac3fb": [
        "def solution():\n    sum_positive = sum(range(5, 856, 10))\n    sum_negative = sum(range(10, 851, 10))\n    return sum_positive - sum_negative\n\nans = solution()"
    ],
    "91f7c2d158094aecab623a3dd7d51aae": [
        "def solution():\n    # Since we want to ensure 16 balls of one color and 13 of another,\n    # we could end up picking all but one from each of the first four\n    # color categories without getting 16 of any. Then we must take\n    # an additional 16 from a single category to guarantee 16 of one color.\n    \n    # For 13 of another color, after ensuring the 16 of one color,\n    # we might pick one of each of the remaining colors, so we need 13\n    # additional picks from a single category to ensure this.\n\n    # Sum of the maximum picks from each category without getting 16 or 13 of one\n    max_picks_without_16 = (16 - 1) + (26 - 1) + (34 - 1) + (24 - 1)\n    \n    # Now we need to add the guaranteed picks to get 16 of one and 13 of another\n    guaranteed_picks_for_16_and_13 = 16 + 13\n    \n    # Total minimum number of picks required\n    minimum_picks = max_picks_without_16 + guaranteed_picks_for_16_and_13\n\n    return minimum_picks\n\nans = solution()"
    ],
    "3acaa5a4f1c749c2a12dac032c35167c": [
        "def solution():\n    from math import factorial as f\n\n    # Since each friend gets at least 1 ice-cream cone, we give 1 to each friend first.\n    # Now we have 2 ice-cream cones left to distribute to 3 friends.\n    # This is stars and bars problem where 2 indistinguishable items are to be placed into 3 different bins.\n    # Number of ways to distribute these is given by combination C(n+k-1, k), where \n    # n is the number of items to distribute and k is the number of bins.\n    \n    # Here n=2 (remaining ice-creams) and k=3 (friends), so we calculate C(2+3-1, 2) => C(4, 2)\n\n    remaining_cones = 2\n    friends = 3\n\n    ways = f(remaining_cones + friends - 1) // (f(remaining_cones) * f(friends - 1))\n\n    return ways\n\nans = solution()"
    ],
    "fd6c4c01349c419f8b677eaff8345ce3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    P, Q = symbols('P Q')\n    equation1 = Eq(P, 4 * Q)\n    equation2 = Eq(P - Q, 2700)\n\n    solutions = solve((equation1, equation2), (P, Q))\n\n    return solutions[Q]\n\nans = solution()"
    ],
    "f959c9aa94cb4444a05fed72622f9203": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table_price, chair_price = symbols('table_price chair_price')\n\n    equation1 = Eq(2 * table_price + 5 * chair_price, 220)\n    equation2 = Eq(table_price, 3 * chair_price)\n\n    solutions = solve((equation1, equation2), (table_price, chair_price))\n\n    return solutions[table_price]\n\nans = solution()"
    ],
    "2b2a2e587ee14b41a501ab4265950264": [
        "def solution():\n    total_biscuits = 12\n    given_to_sister = total_biscuits / 4\n    left_for_freddie = total_biscuits - given_to_sister\n    return int(left_for_freddie)\n\nans = solution()"
    ],
    "1b10af37f10e4e378350822821ccd0e2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    A, B, C = symbols('A B C')\n    \n    # Equations according to the problem\n    equation1 = Eq(C + B, 18)\n    equation2 = Eq(B, A + A + A)\n    equation3 = Eq(C + A, 10)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    return solutions[B]\n\nans = solution()"
    ],
    "fdf01e833d7c4f0a82c64b43a8d356df": [
        "def solution():\n    numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 29]\n    return sum(numbers)\n\nans = solution()"
    ],
    "23deca2dec7341899b3bd1e49078449d": [
        "def solution():\n    spent_total = 1.55 + 2.25\n    left_fraction = 4 / 5\n\n    original_amount = spent_total / (1 - left_fraction)\n\n    return original_amount\n\nans = solution()"
    ],
    "cf14830fc6664a70a173fbe0ffbab834": [
        "def solution():\n    principal = 4000\n    rate = 3.81 / 100\n    time = 5\n\n    amount = principal * (1 + rate * time)\n\n    return amount\n\nans = solution()"
    ],
    "fba9a6dc71794e82967fc086a3bcc09b": [
        "def solution():\n    ans = 40 / 100 * 75\n    return ans\n\nans = solution()"
    ],
    "f83284a837da4e2fb26549abab697c91": [
        "def solution():\n    hook_time = 20\n    lily_time = hook_time - 5\n    return lily_time\n\nans = solution()"
    ],
    "ffd358a18901488c82211c659492c7a0": [
        "def solution():\n    return (125 + 75) * (630 - 616)\n\nans = solution()"
    ],
    "608176c2f8294c308bc2eb16e490831d": [
        "def solution():\n    joann_coins = 3\n    sana_coins = 6\n    nancy_coins = 8\n    total_coins = joann_coins + sana_coins + nancy_coins\n    return total_coins\n\nans = solution()"
    ],
    "43898b2ed2594f919d1a1e91a9899bc8": [
        "def solution():\n    original_distance = 20\n    remaining_distance = 4\n    lucas_speed_ratio = 3\n    mother_speed_ratio = 5\n    total_speed_ratio = lucas_speed_ratio + mother_speed_ratio\n\n    distance_covered = original_distance - remaining_distance\n    lucas_distance = (distance_covered * lucas_speed_ratio) / total_speed_ratio\n    \n    return lucas_distance\n\nans = solution()"
    ],
    "9554ef69c62a485194537701b7cbafe1": [
        "def solution():\n    first_term = 50\n    common_difference = -1\n    number_of_terms = 30\n\n    last_term = first_term + (number_of_terms - 1) * common_difference\n    sum_of_terms = (number_of_terms * (first_term + last_term)) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "59500938d9aa429c963148ba7e8054ea": [
        "def solution():\n    people_initial = 30\n    pizzas_initial = 12\n    people_final = 35\n    \n    # Find unit rate (pizzas per person)\n    unit_rate = pizzas_initial / people_initial\n    \n    # Calculate the number of pizzas needed for 35 people\n    pizzas_needed = unit_rate * people_final\n    \n    return int(pizzas_needed) if pizzas_needed.is_integer() else round(pizzas_needed)\n\nans = solution()"
    ],
    "c28579adfb0e4c66af894392fda2aa03": [
        "def solution():\n    # Initialize the count of teams and rounds\n    num_teams = 16\n    num_rounds = 0\n    \n    # While there are at least 2 teams, keep playing rounds\n    while num_teams > 1:\n        # After each round, the number of teams is halved\n        num_teams //= 2\n        # Increase the round count\n        num_rounds += 1\n        \n    return num_rounds\n\nans = solution()"
    ],
    "501a0a55ecd341dc996261f472d570c8": [
        "def solution():\n    return 21 * 5\n\nans = solution()"
    ],
    "16eb3c5479c84e7488205bd06c552370": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    julie = symbols('julie')\n    marion = 2 * julie\n    ethan = 5 * julie\n    equation = Eq(marion - ethan, -168)\n\n    julie_salary = solve(equation, julie)[0]\n    marion_salary = 2 * julie_salary\n    ethan_salary = 5 * julie_salary\n\n    total_salary = julie_salary + marion_salary + ethan_salary\n\n    return total_salary\n\nans = solution()"
    ],
    "496c9d2a7f38418389c85a6060857948": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    big_class, small_class = symbols('big_class small_class')\n\n    # 2 apples per big class student and 2 apples per small class student\n    equation1 = Eq(2 * big_class + 2 * small_class, 48)\n\n    # 3 oranges per big class student and 2 oranges per small class student\n    equation2 = Eq(3 * big_class + 2 * small_class, 55)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (big_class, small_class))\n\n    return solutions[small_class]\n\nans = solution()"
    ],
    "98fccede682543abb0a7e6ce6c0a6e69": [
        "def solution():\n    import math\n\n    count = 0\n    limit = 2016\n\n    for num in range(1, limit + 1):\n        if math.isqrt(num * 72) ** 2 == num * 72:\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "3fc92a68dae34f66b6cd792e86640204": [
        "def solution():\n    cost_per_lollipop = 5\n    number_of_lollipops = 10\n\n    total_cost = cost_per_lollipop * number_of_lollipops\n\n    return total_cost\n\nans = solution()"
    ],
    "665b5255c92349eb9ddeb5d93d37b49d": [
        "def solution():\n    original = 160\n    new = 40\n    change = new - original\n    percent_change = (change / original) * 100\n    return percent_change\n\nans = solution()"
    ],
    "aebe8c69595b46bf9a87e30c9324afe4": [
        "def solution():\n    # Let's assume the number of cards is x, then the number of wands is x + 17.\n    # According to the problem statement, the sum of the wands and cards is 69.\n    # Therefore, we can set up the following equation: x + (x + 17) = 69.\n\n    # Solving the equation:\n    # 2x + 17 = 69\n    # 2x = 69 - 17\n    # 2x = 52\n    # x = 26, which is the number of cards.\n\n    # Now calculate the number of wands:\n    wands = 26 + 17\n\n    return wands\n\nans = solution()"
    ],
    "71f696cfd5a84b80996ceb9957f484a3": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n    \n    # Given the following system of congruences:\n    # x ≡ 0 (mod 5) -> x is a multiple of 5\n    # x ≡ 6 (mod 7) -> when divided by 7 gives a remainder of 6 (one sitting out)\n    # x ≡ 7 (mod 8) -> when divided by 8 gives a remainder of 7 (one sitting out)\n    congruences = [(0, 5), (6, 7), (7, 8)]\n    \n    # Use the Chinese Remainder Theorem to find the least such number x\n    ans = solve_congruence(*congruences)[0]\n    return ans\n\nans = solution()"
    ],
    "29030dd68348449a8312e00b2527cb9e": [
        "def solution():\n    return 427 * 100\n\nans = solution()"
    ],
    "f44c4462b0f64bab846629402568bf16": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for the number of years in the future\n    years_future = symbols('years_future')\n\n    # Since Efron is 30 years younger than Danny, let Danny's current age be x.\n    # Then Efron's current age will be x - 30\n    # The ratio of their current ages is 8 (Danny) : 3 (Efron)\n\n    # We have the system of equations:\n    # 8/3 = (x) / (x - 30)\n    # Solving this equation gives us Danny's current age (x)\n    danny_current = symbols('danny_current')\n    equation_current_ratio = Eq((8/3), (danny_current / (danny_current - 30)))\n    danny_current_age = solve(equation_current_ratio, danny_current)[0]\n\n    # Now we use the information about the future ratio\n    # In years_future time, the ratio of Danny's age to Efron's age will be 5 (Danny) : 3 (Efron)\n    # The new ages will be: Danny's age = (x + years_future), Efron's age = (x - 30 + years_future)\n    # The ratio is:\n    # 5/3 = (x + years_future) / (x - 30 + years_future)\n    equation_future_ratio = Eq((5/3), ((danny_current_age + years_future) / (danny_current_age - 30 + years_future)))\n\n    # Solve for the number of years in the future\n    years_future_solution = solve(equation_future_ratio, years_future)\n\n    return years_future_solution[0]\n\nans = solution()"
    ],
    "830a6979358f4071bfa17925dbf71666": [
        "def solution():\n    marks = [27, 28, 26, 24, 20]\n    mean_mark = sum(marks) / len(marks)\n    return mean_mark\n\nans = solution()"
    ],
    "6718d58202814857b7fb4876e51e86b3": [
        "def solution():\n    count = 0\n    for number in range(1, 405):\n        count += str(number).count('4')\n    \n    return count\n\nans = solution()"
    ],
    "70c940fee10b465a84d7c757aa018a9e": [
        "def solution():\n    cookies_initial = 100\n    butter_initial = 40\n    cookies_target = 150\n\n    butter_needed = (butter_initial / cookies_initial) * cookies_target\n\n    return butter_needed\n\nans = solution()"
    ],
    "418a9a3d03a942a4a2c621e1a1688350": [
        "def solution():\n    sophie_shirts = 13\n    sister_shirts = sophie_shirts - 5\n    return sister_shirts\n\nans = solution()"
    ],
    "46ab1acc8aff4e4fa30eb837311aab05": [
        "def solution():\n    pencils = 15  # Number of pencil colours\n    rulers = 20   # Number of ruler colours\n    pens = 10     # Number of pen colours\n\n    # Calculate combinations\n    pencil_ruler_combinations = pencils * rulers\n    pencil_pen_combinations = pencils * pens\n    ruler_pen_combinations = rulers * pens\n\n    # The total number of ways to choose two items of different kinds\n    total_combinations = pencil_ruler_combinations + pencil_pen_combinations + ruler_pen_combinations\n\n    return total_combinations\n\nans = solution()"
    ],
    "d9a90dd46e1b4f7b8ea8abbd0d0cda50": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ball, racket = symbols('ball racket')\n    \n    equation1 = Eq(racket, ball + 28)\n    equation2 = Eq(ball + racket, 30)\n    \n    solutions = solve((equation1, equation2), (ball, racket))\n    \n    return solutions[ball]\n\nans = solution()"
    ],
    "7f68a155e73c4da8811ddfc74a0de5bb": [
        "def solution():\n    ans = False\n    return ans\n\nans = solution()"
    ],
    "eaa3534db535408eb1b161cbafa4af7a": [
        "def solution():\n    count = 0\n    for second_digit in range(1, 10):\n        first_digit = 1 + 2 * second_digit\n        if first_digit >= 10:\n            continue\n        for third_digit in range(10):\n            if 10 <= first_digit + second_digit + third_digit < 14:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "67d603b406954580bb312d236cca3026": [
        "def solution():\n    matches = 15\n    n = 1\n    while n * (n - 1) / 2 < matches:\n        n += 1\n    return n\n\nans = solution()"
    ],
    "4700822a4e3e41d3bd6cf4dda57b3084": [
        "from math import comb\n\ndef solution():\n    # Group Stage: 4 teams per group, each team plays 3 matches\n    matches_per_group = comb(4, 2) # Each team plays every other team once\n    total_group_matches = matches_per_group * 8 # There are 8 groups\n\n    # Knockout Stage: Round of 16, quarterfinals, semifinals, third place and final\n    round_of_16 = 8  # 16 teams, 8 matches\n    quarterfinals = 4 # 8 teams, 4 matches\n    semifinals = 2    # 4 teams, 2 matches\n    third_place = 1   # 1 match for third place\n    final = 1         # The final match\n\n    total_knockout_matches = round_of_16 + quarterfinals + semifinals + third_place + final\n\n    return total_group_matches + total_knockout_matches\n\nans = solution()"
    ],
    "90d54cf3746b403a998b30644e14ed6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    return solutions[banana] * 5\n\nans = solution()"
    ],
    "c7dac16768af42858204c39c3827fc02": [
        "def solution():\n    return 210 / 0.7\n\nans = solution()"
    ],
    "49cdd6b806674d4aaf0cef8780f8f8cb": [
        "def solution():\n    pencil_colours = 15\n    ruler_colours = 20\n    pen_colours = 10\n\n    ways = pencil_colours * ruler_colours * pen_colours\n\n    return ways\n\nans = solution()"
    ],
    "0c56c61f84034ba086b7ccfeb89c1dd8": [
        "def solution():\n    n = 224\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "661c4eed4a32448abe382838199f26bb": [
        "def solution():\n    ans = 599999 + 59999 + 5999 + 599 + 59 + 5\n    return ans\n\nans = solution()"
    ],
    "f7d16bba0eef40749220aeee30f11c1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    shorts, tshirts = symbols('shorts tshirts')\n    \n    equation1 = Eq(2 * shorts + 3 * tshirts, 26)\n    equation2 = Eq(2 * shorts + 5 * tshirts, 40)\n\n    solutions = solve((equation1, equation2), (shorts, tshirts))\n\n    return solutions[tshirts]\n\nans = solution()"
    ],
    "f55b7420a598495d8cb743d46cebb8de": [
        "def solution():\n    total_questions = 10\n    correct_points = 6\n    incorrect_points = -2\n    total_score = 44\n\n    for correct in range(total_questions + 1):\n        incorrect = total_questions - correct\n        if correct * correct_points + incorrect * incorrect_points == total_score:\n            return correct\n\nans = solution()"
    ],
    "39341763d576440d9bf2d603ec9d0a28": [
        "def solution():\n    first_term = 0.3\n    second_term = 0.8\n    difference = second_term - first_term\n\n    third_term = second_term + difference\n\n    return third_term\n\nans = solution()"
    ],
    "129b35bd2e4c40649186f5cfd5e08f55": [
        "def solution():\n    sides_of_pentagons = 2 * 5\n    sides_of_triangles_and_quadrilaterals = 394 - sides_of_pentagons\n    \n    # Let's assume the number of triangles is t.\n    # Then the number of quadrilaterals is t + 82.\n    # Therefore, 3*t (sides of triangles) + 4*(t + 82) (sides of quadrilaterals) = sides_of_triangles_and_quadrilaterals.\n    # Solve the equation: 3*t + 4*(t + 82) = sides_of_triangles_and_quadrilaterals\n    \n    t = symbols('t')\n    equation = Eq(3*t + 4*(t + 82), sides_of_triangles_and_quadrilaterals)\n    num_triangles = solve(equation, t)[0]\n    num_quadrilaterals = num_triangles + 82\n    \n    return num_quadrilaterals\n\nans = solution()"
    ],
    "32b965ddd9334985a59c4e74953701c5": [
        "def solution():\n    count = 0\n    for tens in range(1, 10):  # tens can be from 1 to 9\n        ones = tens - 3  # ones is less by 3 than tens\n        if 0 <= ones < 10:  # ones must be a single digit non-negative number\n            count += 1\n    return count\n\nans = solution()"
    ],
    "184cf0c663e945deb8bdb09f3954a920": [
        "def solution():\n    lcm = 3 * 5 * 7  # Least common multiple of 3, 5, and 7\n    for i in range(10):\n        for j in range(10):\n            num = int(f\"6{i}{j}\")\n            if num % lcm == 0:\n                return num\n\nans = solution()"
    ],
    "73f073ef77d3485a9e2db22b74b4d99c": [
        "def solution():\n    distance_per_interval = 25\n    num_intervals = 3  # There are 3 intervals between 4 lamp posts\n\n    total_distance = distance_per_interval * num_intervals\n    return total_distance\n\nans = solution()"
    ],
    "842908b1fc5d4a659cac34d9f6c84d6b": [
        "def solution():\n    # Let x be the number of all-girl teams\n    # Then 2x is the number of all-boy teams\n    # Total teams with only 1 boy + teams with 2 or more boys = teams with at least 1 boy\n    # Therefore, 15 (teams with 1 boy) + 27 (teams with 2 or more boys) = 15 + 2x (all-boy teams) + x (all-girl teams)\n    # Solving for x, we get:\n    # 15 + 27 = 15 + 3x\n    # 42 = 15 + 3x\n    # 27 = 3x\n    # x = 9\n    \n    # Now we have 9 all-girl teams.\n    # The total number of students in all-girl teams is 9 * 3\n    num_girls = 9 * 3\n    \n    return num_girls\n\nans = solution()"
    ],
    "cfc59e7dc0614196bfb7795914dacdef": [
        "def solution():\n    ans = 63 - (55 - 27)\n    return ans\n\nans = solution()"
    ],
    "0568330ddd524498892da0859a5ec187": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for quantities of sweets\n    rachel, alice = symbols('rachel alice')\n    \n    # Equation 1: Rachel gives Alice 10 sweets -> they have the same amount\n    equation1 = Eq(rachel - 10, alice + 10)\n    \n    # Equation 2: Both eat 8 sweets -> Rachel has 3 times as many as Alice\n    equation2 = Eq(rachel - 8, 3 * (alice - 8))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (rachel, alice))\n    \n    # Calculate the total number of sweets originally\n    total_sweets = solutions[rachel] + solutions[alice]\n\n    return total_sweets\n\nans = solution()"
    ],
    "ae1a09d2d17649718463491e636b12d1": [
        "def solution():\n    score = 36\n    total = 40\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "519312ec2beb41659919be97138e6ba6": [
        "def solution():\n    product = 2*5*7*2*5*7*2*5\n    sum_of_digits = sum(int(digit) for digit in str(product))\n    return sum_of_digits\n\nans = solution()"
    ],
    "bab688e90abc4ad7a664334dbd742c1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, peaches, pears = symbols('apples peaches pears')\n\n    equation1 = Eq(apples, 5 + 6 * pears)\n    equation2 = Eq(peaches, 3 * pears - 2)\n    equation3 = Eq(apples + peaches + pears, 73)\n\n    solutions = solve((equation1, equation2, equation3), (apples, peaches, pears))\n\n    return solutions[apples]\n\nans = solution()"
    ],
    "5bd7e5a5661d47afb0bef048489bb3fe": [
        "def solution():\n    # Convert the numbers from base 7 to base 10\n    num1_base10 = int(str(61), 7)\n    num2_base10 = int(str(34), 7)\n\n    # Perform the subtraction in base 10\n    result_base10 = num1_base10 - num2_base10\n\n    # Convert the result back to base 7\n    ans = ''\n    while result_base10 > 0:\n        ans = str(result_base10 % 7) + ans\n        result_base10 //= 7\n\n    return int(ans) if ans else '0'  # Handle the case where result_base10 is 0\n\nans = solution()"
    ],
    "00c7ec21843b40aba2d39a75810ffc85": [
        "def solution():\n    # Let the distance from Town A to Town B be d in kilometers\n    # At 10 km/h to arrive at 10 am, Ben must start at a certain time, which we'll call t hours\n    # d = 10 * t\n    \n    # At 15 km/h to arrive at 8 am, Ben must start two hours before t (t - 2) hours\n    # d = 15 * (t - 2)\n    \n    # Setting both distance equations equal to each other, we solve for t:\n    # 10t = 15(t - 2)\n    # 10t = 15t - 30\n    # 5t = 30\n    t = 30 / 5  # t is the number of hours it takes at 10 km/h starting from the time Ben would start to arrive at 10 am\n\n    # d = 10 * t\n    d = 10 * t  # Now, we calculate the distance using the value of t\n\n    # Now we need to find the speed for Ben to arrive at 9 am. That is one hour less than the time at 10 km/h\n    # So he needs to cover the distance d in (t - 1) hours. The speed is hence d / (t - 1)\n    # Speed = d / (time to arrive at 9 am which is one hour less than t)\n    speed = d / (t - 1)\n\n    return speed\n\nans = solution()"
    ],
    "c5e1085504df4fe38872ff3a46620cd6": [
        "def solution():\n    # 1 dog = 8 rabbits\n    # 1 rabbit = 2 chickens\n    # Therefore, 1 dog = 8 * 2 chickens\n\n    num_chickens = 8 * 2\n\n    return num_chickens\n\nans = solution()"
    ],
    "00d539f1b4db48d3b3494c0f120062fd": [
        "def solution():\n    total_candies = 5 * 12  # Initial total candies\n    students = 5 + 1         # Total students after one more joins\n    candies_per_student = total_candies // students  # Redivided candies per student\n    \n    return candies_per_student\n\nans = solution()"
    ],
    "80aa447385fb495cb5bf06d8c7b0fdda": [
        "def solution():\n    raj_height = 138\n    david_height = 170\n\n    jacob_height = (raj_height + david_height) / 2\n\n    return jacob_height\n\nans = solution()"
    ],
    "233efeea19724a82bb0152f79a9c9ee1": [
        "def solution():\n    # there are 4 left-hand gloves and 7 right-hand gloves\n    # to ensure a matching pair, Dilly must take all gloves of one side plus one of the other side\n    # because then she will have at least one left-hand and one right-hand glove of the same color\n    left_hand_gloves = 1 + 2\n    right_hand_gloves = 3 + 4\n\n    # Dilly should bring all left-hand gloves and one right-hand glove to ensure a matching pair\n    ans = left_hand_gloves + 1\n\n    return ans\n\nans = solution()"
    ],
    "dec3fb034aea47b1b73c5397fa7a6777": [
        "def solution():\n    cards = 1\n    while True:\n        if (cards % 4 == 3) and (cards % 5 == 4) and (cards % 7 == 6):\n            return cards\n        cards += 1\n\nans = solution()"
    ],
    "815b73a9e29e4090bfd993eec9cfa5f8": [
        "def solution():\n    initial_value = 120\n    depreciation_rate = 0.04\n    years = 5\n    future_value = initial_value * ((1 - depreciation_rate) ** years)\n    return round(future_value, 4)  # using the given approximation\n\nans = solution()"
    ],
    "453da806d0d44938b0462fc02a292532": [
        "def solution():\n    total_students = 0\n    for girls_layer in range(100):  # assuming a reasonable upper bound\n        boys = (girls_layer * 2 + 1) ** 2\n        girls = ((girls_layer * 2) ** 2) if girls_layer > 0 else 0\n        if boys - girls == 52:\n            total_students = boys + girls\n            break\n    return total_students\n\nans = solution()"
    ],
    "db9048b0a36740abaf853e98897fbb20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of pins Eugene and Yuna have\n    eugene_original, yuna_original = symbols('eugene_original yuna_original')\n\n    # Equation representing the initial condition\n    equation1 = Eq(eugene_original, 3 * yuna_original)\n\n    # Equation after Yuna buys 76 pins and the ratio between them\n    equation2 = Eq((yuna_original + 76) * 9, eugene_original * 7)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (eugene_original, yuna_original))\n\n    # Eugene's original number of pins\n    return solutions[eugene_original]\n\nans = solution()"
    ],
    "11200de7f462445fbdc06bbefca57a99": [
        "from math import factorial\n\ndef solution():\n    word = \"REVISE\"\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    total_ways = factorial(len(word))\n    for count in letter_counts.values():\n        total_ways //= factorial(count)\n    return total_ways\n\nans = solution()"
    ],
    "4873bec7d2b148f0b1a8ce80aa0a60fa": [
        "def solution():\n    # To be divisible by 9, the sum of the digits must be divisible by 9.\n    # Given number is 12345A, so we have 1 + 2 + 3 + 4 + 5 + A = 15 + A\n    # Find A such that 15 + A is divisible by 9\n    for A in range(10):\n        if (15 + A) % 9 == 0:\n            break\n\n    # A six-digit number's remainder when divided by 4 only depends on the last two digits.\n    # Since the last two digits are 5A, we need to check 50 through 59 for divisibility by 4.\n    remainder_when_divided_by_4 = (50 + A) % 4\n\n    return remainder_when_divided_by_4\n\nans = solution()"
    ],
    "31d6392f86454fcfabd63010d5f7ac45": [
        "def solution():\n    ones = 5\n    hundreds = 2\n    tens = 8\n    number = hundreds * 100 + tens * 10 + ones\n    return number\n\nans = solution()"
    ],
    "c347c951d6764ecabf96c472825de32c": [
        "def solution():\n    original_price = 480\n    discount_percentage = 35\n    discount_amount = (discount_percentage / 100) * original_price\n    sale_price = original_price - discount_amount\n    return sale_price\n\nans = solution()"
    ],
    "b381663c286a41b4b2c212c8d9fa625f": [
        "def solution():\n    return 7.257 - 3.47\n\nans = solution()"
    ],
    "c79974cfe3544139952b7aa20868fe35": [
        "def solution():\n    n = 15\n    ans = (1 / 6) * n * (n + 1) * (n + 2)\n    return int(ans)\n\nans = solution()"
    ],
    "fcdca3fe5e6e44a3aaa6b8fc55320938": [
        "def solution():\n    import math\n    num_kids = 3\n    ans = math.factorial(num_kids)\n    return ans\n\nans = solution()"
    ],
    "d7960525f20d4a85b2d07f16b77a89de": [
        "def solution():\n    from fractions import Fraction\n\n    # Convert mixed numbers to improper fractions\n    num_1 = 5 + Fraction(1, 7)\n    num_2 = 3 + Fraction(3, 11)\n    num_3 = 1 + Fraction(13, 23)\n    \n    denom_1 = 3 + Fraction(3, 7)\n    denom_2 = 2 + Fraction(2, 11)\n    denom_3 = 1 + Fraction(1, 23)\n    \n    # Calculate the sum of numerators and denominators\n    numerator_sum = num_1 + num_2 + num_3\n    denominator_sum = denom_1 + denom_2 + denom_3\n    \n    # Calculate the division of sums\n    ans = numerator_sum / denominator_sum\n\n    return ans\n\nans = solution()"
    ],
    "790337bbc4c640c2ba17ccfd95719755": [
        "def solution():\n    # Let the total number of flowers be x\n    # Half of the flowers are red, so there are x/2 red flowers\n    # Remaining flowers would be x - (x/2) = x/2\n    # 4/7 of the remaining flowers are pink, so there are (4/7)*(x/2) pink flowers\n    # There are 6 more red flowers than pink flowers, so (x/2) - (4/7)*(x/2) = 6\n    # Now, we solve the equation for x\n\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq((x/2) - (4/7)*(x/2), 6)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "354d850fc3c644989668ea964029af35": [
        "def solution():\n    for cars in range(28):\n        motorcycles = 27 - cars\n        total_wheels = 4 * cars + 2 * motorcycles\n        if total_wheels == 78:\n            return cars\n\nans = solution()"
    ],
    "1edfbfb983cc4026861711aed39ec50b": [
        "def solution():\n    # Assuming both players play optimally,\n    # Kelly needs to make sure that at the end she leaves Dan in a position\n    # where the number of matches is not in the form 3n (since Dan can then force a win).\n    # To ensure this, Kelly must take a number of matches such that (11 - matches_taken) is a multiple of 3,\n    # so that Dan's moves always result in another multiple of 3, until less than 3 matches are left\n    # and Kelly can then take the last match.\n\n    # Initial number of matches\n    initial_matches = 11\n    \n    # Kelly wants to leave a multiple of 3 for Dan\n    # Try taking away 1 match\n    if (initial_matches - 1) % 3 != 0:\n        return 1\n    # Try taking away 2 matches\n    if (initial_matches - 2) % 3 != 0:\n        return 2\n    \n    # If neither taking 1 or 2 matches results in a non-3n number for Dan, \n    # This implies an error in the strategy as this game is solvable.\n    # However, given the puzzle's rules, either 1 or 2 should work for Kelly to ensure victory.\n    return -1\n\nans = solution()"
    ],
    "06bf4f7c67004f1dbe9f03b5dc14516d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    jason, nicole = symbols('jason nicole')\n    \n    # Jason's final number of stickers\n    jason_final = jason + 18\n    # Nicole's final number of stickers\n    nicole_final = nicole - 18\n    \n    # Jason had 5 fewer stickers than Nicole after the exchange\n    equation1 = Eq(jason_final + 5, nicole_final)\n    # Jason initially had 20 stickers\n    equation2 = Eq(jason, 20)\n    \n    solutions = solve((equation1, equation2), (jason, nicole))\n    \n    return solutions[nicole]\n\nans = solution()"
    ],
    "9bf9b1c2a24e4de3a5ed1f6932581844": [
        "def solution():\n    # Original values are 100%, so the new sizes are:\n    new_length_percentage = 110  # increased length by 10%\n    new_breadth_percentage = 80  # reduced breadth to 4/5 of the original\n    new_height_percentage = 110  # ratio of new height to old is 11:10\n\n    # Calculate the new volume as percentage of the original volume\n    new_volume_percentage = (new_length_percentage * new_breadth_percentage * new_height_percentage) / 10000\n\n    return new_volume_percentage\n\nans = solution()"
    ],
    "3e876b88a82f4fabb94444319efac888": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    square = symbols('square')\n    \n    equation = Eq(4 * square - 3, 65)\n    solution_square = solve(equation, square)\n\n    return solution_square[0]\n\nans = solution()"
    ],
    "8d09ac1d8970471dbd6ed0727980bd24": [
        "def solution():\n    ways = 0\n    for two_gram_weights in range(39):\n        for three_gram_weights in range(26):\n            if 2 * two_gram_weights + 3 * three_gram_weights == 77:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "3825adc1e7f941ebb2ac15ca5828613b": [
        "def solution():\n    total_distance_km = 5\n    total_distance_m = total_distance_km * 1000\n    num_intervals = 9 + 1\n\n    distance_between_two_marshals = total_distance_m / num_intervals\n\n    return distance_between_two_marshals\n\nans = solution()"
    ],
    "52895a5f9c584889b60e514eea4cb012": [
        "def solution():\n    incorrect_total = 74 * 7\n    correct_total = incorrect_total - (81 - 18)\n    correct_average = correct_total / 7\n    return correct_average\n\nans = solution()"
    ],
    "33681430650f48419421a99318bdaf3d": [
        "def solution():\n    speed1 = 180\n    time1 = 6\n    speed2 = 120\n    time2 = 8\n\n    distance1 = speed1 * time1\n    distance2 = speed2 * time2\n\n    total_distance = distance1 + distance2\n\n    return total_distance\n\nans = solution()"
    ],
    "e4b6fc33fb6044dbbf98541fd73229a3": [
        "def solution():\n    principal = 6000\n    rate = 0.03\n    # First year interest\n    first_year_interest = principal * rate\n    # Second year interest (Interest on principal + Interest on first year interest)\n    second_year_interest = (principal + first_year_interest) * rate\n    return second_year_interest\n\nans = solution()"
    ],
    "27def3f9c6524488aff45fe308ba3df3": [
        "def solution():\n    time_per_picture = 10  # minutes\n    total_time = 80  # one hour and twenty minutes in minutes\n\n    num_pictures = total_time / time_per_picture\n    return int(num_pictures)\n\nans = solution()"
    ],
    "c471960bec8946e69cab7ac7cb6411c3": [
        "def solution():\n    # Initialize the number of red and green tiles\n    red_tiles = green_tiles = 0\n    # Since there are 400 tiles, the wall is a square of 20 by 20 tiles\n    for layer in range(1, 21):\n        if layer % 2 == 1:\n            # If the layer is odd, it's red tiles\n            red_tiles += (20 - (layer - 1) * 2) ** 2\n        else:\n            # If the layer is even, it's green tiles\n            green_tiles += (20 - (layer - 1) * 2) ** 2\n\n    # Check which colour has more tiles\n    if red_tiles > green_tiles:\n        dominant_colour = 'red'\n        dominant_tiles = red_tiles\n        difference = red_tiles - green_tiles\n    else:\n        dominant_colour = 'green'\n        dominant_tiles = green_tiles\n        difference = green_tiles - red_tiles\n\n    return dominant_colour, difference\n\nans = solution()"
    ],
    "2d748e0d6f544f23b0cf14359ab45b8f": [
        "def solution():\n    boys = 176\n    girls = boys - 50\n    total_students = boys + girls\n\n    return total_students\n\nans = solution()"
    ],
    "0f41145869544b529481d63e5b99081f": [
        "def solution():\n    decimal_number = 1 + 4/7\n    return round(decimal_number, 1)\n\nans = solution()"
    ],
    "4d04c9aca7b14fc0b67361f6a0e0bb64": [
        "def solution():\n    recurring_sequence = \"428571\"\n    sequence_length = len(recurring_sequence)\n    target_index = 69 - 1  # Adjust for zero-based index\n    \n    # Find the corresponding digit in the repeating sequence\n    digit = recurring_sequence[target_index % sequence_length]\n    \n    # Convert to integer\n    ans = int(digit)\n    return ans\n\nans = solution()"
    ],
    "a48c37c796244f69b5dd70e1b55e15d4": [
        "def solution():\n    planned_profit = 0.50\n    actual_profit = 0.82 * planned_profit\n    first_day_profit = 0.50 * 0.70\n    second_day_profit = actual_profit - first_day_profit\n\n    second_day_sales_ratio = 0.30\n    second_day_discount_rate = (1 - (second_day_profit / second_day_sales_ratio)) * 100\n    \n    return second_day_discount_rate\n\nans = solution()"
    ],
    "b5d689e03b7a4370a956fabc41aa5767": [
        "def solution():\n    dylan_salt = 300 * 0.35\n    daisy_salt = 200 * 0.50\n    total_salt = dylan_salt + daisy_salt\n    total_solution = 300 + 200\n    concentration = total_salt / total_solution\n    return concentration\n\nans = solution()"
    ],
    "c0156725df024018aed39df49f106ef3": [
        "def solution():\n    # Let x be the number of widgets Megacorp sold in 2014\n    # Vastco sold 68% more than Megacorp in 2014, so Vastco sold 1.68x widgets in 2014\n    # Vastco's sales increased by 32% in 2015, so they sold 1.32 * 1.68x in 2015\n    # In 2015, Vastco sold 44% more than Megacorp, so Vastco sold 1.44y widgets in 2015,\n    # where y is the number of widgets Megacorp sold in 2015\n\n    # Therefore, we have the equation 1.32 * 1.68x = 1.44y\n    \n    # Solve for y in terms of x:\n    # y = (1.32 * 1.68x) / 1.44\n\n    # The percentage increase for Megacorp is (y - x) / x * 100%\n    # Substitute the expression for y in terms of x into the percentage increase formula\n\n    megacorp_increase_percentage = ((1.32 * 1.68 - 1.44) / 1.44) * 100\n\n    return megacorp_increase_percentage\n\nans = solution()"
    ],
    "53974104b6a9479d95d1207ebbf1bf13": [
        "def solution(y):\n    return y / 2\n\nans = solution(y)  # Replace y with the actual number if known, or keep it as a symbol if not."
    ],
    "ffba176a010a4d0187358ab3db7ff0b7": [
        "def solution():\n    jen_beads = 438\n    lily_beads = jen_beads + 195\n    total_beads = jen_beads + lily_beads\n    return total_beads\n\nans = solution()"
    ],
    "4ed24c6d67bb4a53beeb3f3413937be2": [
        "def solution():\n    bought_bottles = 48\n    total_bottles = bought_bottles\n    empty_bottles = bought_bottles\n    \n    while empty_bottles >= 4:\n        new_bottles, remaining_empty = divmod(empty_bottles, 4)\n        total_bottles += new_bottles\n        empty_bottles = new_bottles + remaining_empty\n        \n        # Customers can borrow 1 empty bottle\n        if empty_bottles == 3:\n            total_bottles += 1\n            empty_bottles = 0\n        \n    return total_bottles\n\nans = solution()"
    ],
    "5b136def7b58491b81995c72b9ad067a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    older_son, younger_son, older_daughter, younger_daughter = symbols('older_son younger_son older_daughter younger_daughter')\n    \n    # Equations based on the problem statement\n    equation1 = Eq(older_son + younger_son + older_daughter + younger_daughter, 55)\n    equation2 = Eq(younger_son - older_son, 3)\n    equation3 = Eq(older_daughter - younger_daughter, 2)\n    equation4 = Eq(younger_son, 2 * older_daughter)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (older_son, younger_son, older_daughter, younger_daughter))\n\n    # The youngest child could be the younger daughter or the younger son,\n    # but the younger son is twice the age of the older daughter, so the younger daughter has to be the youngest.\n    youngest_child_age = solutions[younger_daughter]\n\n    return youngest_child_age\n\nans = solution()"
    ],
    "7519f32e6df34b519be6057181658e4e": [
        "def solution():\n    # Number of 1-digit numbers: from 1 to 9 there are 9 numbers (each has 1 digit)\n    one_digit_numbers = 9 * 1\n    \n    # Number of 2-digit numbers: from 10 to 99 there are 90 numbers (each has 2 digit)\n    two_digit_numbers = 90 * 2\n    \n    # Number of 3-digit numbers: from 100 to 113 there are 14 numbers (each has 3 digits)\n    three_digit_numbers = 14 * 3\n    \n    # Total number of digits written\n    total_digits = one_digit_numbers + two_digit_numbers + three_digit_numbers\n    \n    return total_digits\n\nans = solution()"
    ],
    "c34210e64f26416da03013fc4f6aef91": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    pearls = symbols('pearls')\n    equation = Eq((1/2)*pearls + (1/4)*pearls + (1/6)*pearls + 3, pearls)\n    total_pearls = solve(equation, pearls)\n    return total_pearls[0]\n\nans = solution()"
    ],
    "d7ccf6eb76b340b0a3ccd8caf9bcbfda": [
        "def solution():\n    workers = 3\n    days = 3\n    # One wall requires 3 workers * 3 days of work\n    work_for_one_wall = workers * days\n    # If 1 worker were to build the same wall, they would take all of the work onto themselves\n    days_for_one_worker = work_for_one_wall / 1\n\n    return days_for_one_worker\n\nans = solution()"
    ],
    "8bbc403c2d8f461cbbb29a4b072980aa": [
        "def solution():\n    ans = 548 - 45 + 23 - 107\n    return ans\n\nans = solution()"
    ],
    "7f30a1e297f84571b00d9e89bbef9c69": [
        "def solution():\n    ans = 124 - 76\n    return ans\n\nans = solution()"
    ],
    "067a0a4f635849c888d2b3821c72eb84": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    black, white, grey = symbols('black white grey')\n\n    equation1 = Eq(black, white + 14)\n    equation2 = Eq(grey, white - 2)\n    equation3 = Eq(black + white + grey, 84)\n\n    solutions = solve((equation1, equation2, equation3), (black, white, grey))\n\n    return solutions[white]\n\nans = solution()"
    ],
    "477830e358774ebc992553d65daa5aed": [
        "def solution():\n    for num in range(60, 81):\n        if num % 3 == 0 and num % 8 == 0:\n            ans = num\n            break\n    return ans\n\nans = solution()"
    ],
    "698be5f0089b4737bfda189fa3acbd25": [
        "def solution():\n    from itertools import permutations\n    \n    # Create a list representing the four people\n    people = ['Len', 'Joe', 'Angle', 'Jack']\n    \n    # A function to check if each entrance is used at least once in the permutation\n    def check_entrance_usage(permutation):\n        return len(set(permutation)) == 3\n    \n    # Create all possible permutations of people\n    perm = permutations(people, 3)\n    \n    # Count valid permutations where each entrance is used at least once\n    count = sum(1 for p in perm if check_entrance_usage(p))\n    \n    # Multiply by 3 to account for each permutation being able to start at any entrance\n    return count * 3\n\nans = solution()"
    ],
    "0205b2b75de94213a048023d3039d864": [
        "def solution():\n    # Let x be Mayank's initial number\n    # According to the problem, we have the equation 2x + 4 = 40\n\n    # Perform inverse operations to solve for x\n    result = (40 - 4) / 2\n\n    # Return the original number\n    return result\n\nans = solution()"
    ],
    "0ab634c3b8454930935d8d7eeae75287": [
        "def solution():\n    total_glasses = 100\n    earnings = 92\n    # If Peter didn't break any glasses, he would earn $100.\n    # Each broken glass reduces the profit by 2 dollars (1 not earned + 1 for the penalty).\n    # Let's calculate how much money he lost compared to the perfect scenario.\n    loss = total_glasses - earnings\n    # Now find how many glasses were broken: since each broken glass counts as $2 loss.\n    broken_glasses = loss // 2\n\n    return broken_glasses\n\nans = solution()"
    ],
    "bc13cb301fa84f25ab114f928effbff4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for John and his brother's erasers\n    john_erasers, brother_erasers = symbols('john_erasers brother_erasers')\n\n    # Equation 1: Sum of the erasers\n    equation1 = Eq(john_erasers + brother_erasers, 246)\n\n    # Equation 2: John has 32 more erasers than his brother\n    equation2 = Eq(john_erasers, brother_erasers + 32)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (john_erasers, brother_erasers))\n\n    return solutions[brother_erasers]\n\nans = solution()"
    ],
    "55d1c0e624b04989949990c12957fded": [
        "def solution():\n    # Total number of rounds is given by the formula for a round-robin tournament:\n    # rounds = n * (n - 1) / 2\n    # where n is the number of teams and each team plays every other team once\n    # we need to find n such that n * (n - 1) / 2 = 45\n    # Rearranging the formula: n^2 - n - 2 * 45 = 0\n    # This is a quadratic equation of the form a*n^2 + b*n + c = 0\n    # where a = 1, b = -1, and c = -90\n    # We can use the quadratic formula to solve for n: n = (-b +/- sqrt(b^2 - 4ac)) / (2a)\n    from math import sqrt\n    \n    a = 1\n    b = -1\n    c = -90 * 2  # Multiply by 2 to remove division in the formula\n\n    # Calculate the discriminant (part under the square root)\n    discriminant = b**2 - 4*a*c\n\n    # There are two potential solutions, but we only want the positive one since number of teams can't be negative\n    n1 = (-b + sqrt(discriminant)) / (2*a)\n    n2 = (-b - sqrt(discriminant)) / (2*a)\n\n    # We only consider the positive result, as the number of teams cannot be negative\n    if n1 > 0:\n        num_teams = int(n1)\n    else:\n        num_teams = int(n2)\n    \n    return num_teams\n\nans = solution()"
    ],
    "e17967bd47d74eefa35caffacc4df30e": [
        "def solution():\n    ans = 17 - 8 / (-2) + 4 * (-3)\n    return ans\n\nans = solution()"
    ],
    "5fa94c02c76e4dfcaadc3cece8a6370b": [
        "def solution():\n    cost_per_banana = 98 / 7\n    total_cost = 15 * cost_per_banana\n    change = 1200 - total_cost\n    return change\n\nans = solution()"
    ],
    "32ddbe1c6e04445387ccdb65a7acb10d": [
        "def solution():\n    for i in range(1, 57, 2):\n        if i + (i + 2) + (i + 4) == 57:\n            return i\n\nans = solution()"
    ],
    "64205cfac54a493583dddaf95648be2c": [
        "def solution():\n    # Let x be the number of people and y be the original number of boats\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x, y * 9 - 9)  # if the number of boats reduce 1\n    equation2 = Eq(x, (y + 1) * 6)  # if the number of boats add 1\n\n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "24f3890540474354abf2b6aab5320a8e": [
        "def solution():\n    count = 0\n    for x in range(3, 16):\n        for y in range(3, 16):\n            for z in range(3, 16):\n                if x + y + z == 15:\n                    count += 1\n    return count // 6  # Dividing by 6 for each permutation of 3 numbers\n\nans = solution()"
    ],
    "e4302d8e3fe6443f86fb2f2192888ff3": [
        "def solution():\n    ans = 37 * 4 * 5\n    return ans\n\nans = solution()"
    ],
    "f73c33519c0241a3819521391ab37f99": [
        "def solution():\n    return 495 // 9\n\nans = solution()"
    ],
    "71354bd305fb422b983b708a2e55f7c0": [
        "def solution():\n    # Given the division equation x ÷ 3 = 2, where x is the number we need to find\n    x = 3 * 2\n\n    # Since the result is a whole number and x is in the given numbers list,\n    # the number we are looking for must be among the given options [2, 6, 1, 10, 5, 3].\n    # We'll pick the one that satisfies the condition.\n    numbers = [2, 6, 1, 10, 5, 3]\n    \n    # Check if the calculated x is in the numbers list, then return it, otherwise return None\n    if x in numbers:\n        return x\n    else:\n        return None\n\nans = solution()"
    ],
    "749c7cdc53e24203887314d85737cdc8": [
        "def solution():\n    for i in range(5, 16):\n        if i % 4 == 0 and 36 % i == 0:\n            return i\n\nans = solution()"
    ],
    "f0c276e8ed7d4821a196335de4288bc4": [
        "def solution():\n    from math import gcd\n    pencils = 32\n    pens = 40\n    max_students = gcd(pencils, pens)\n    return max_students\n\nans = solution()"
    ],
    "2b306992899a447c8bce44df9392630c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of cookies John had at first as J and Peter as P.\n    J, P = symbols('J P')\n\n    # According to the question, John had 180 more cookies than Peter.\n    equation1 = Eq(J, P + 180)\n\n    # After John sold 4/5 of her cookies, she had 1/5 of her cookies left.\n    # After Peter sold 3/10 of his cookies, he had 7/10 of his cookies left.\n    # John then had 1/2 as many cookies as Peter left.\n    equation2 = Eq((1/5)*J, (1/2)*(7/10)*P)\n\n    # Now we solve the system of equations.\n    solutions = solve((equation1, equation2), (J, P))\n\n    # We want the number of cookies John had at first.\n    return solutions[J]\n\nans = solution()"
    ],
    "e9ac9bbd3734447f886684d6a291bb73": [
        "def solution():\n    previous_total = 4 * 60\n    new_score = 70\n    new_total = previous_total + new_score\n    new_average = new_total / 5\n    return new_average\n\nans = solution()"
    ],
    "35b813cb449f448997d243f1033f3d44": [
        "def solution():\n    from itertools import permutations\n\n    # Generate all permutations of the four digits\n    perms = permutations([1, 3, 4, 7], 4)\n\n    # Initialize a variable to store the minimum sum\n    min_sum = float('inf')\n\n    # Loop through all permutations and calculate the sum of the two numbers\n    for perm in perms:\n        number1 = perm[0] * 10 + perm[1]  # First two digits form the first number\n        number2 = perm[2] * 10 + perm[3]  # Last two digits form the second number\n        current_sum = number1 + number2\n        if current_sum < min_sum:\n            min_sum = current_sum\n\n    return min_sum\n\nans = solution()"
    ],
    "794ee5871b124fb5a74edc519e0ba668": [
        "def solution():\n    horses = 6\n    pigs = 12\n    rabbits = 12\n\n    horses_apple = horses * 20\n    pigs_apple = pigs * 15\n    rabbits_apple = rabbits * 5\n\n    total_apples = horses_apple + pigs_apple + rabbits_apple\n    total_animals = horses + pigs + rabbits\n\n    average_apples = total_apples / total_animals\n\n    return average_apples\n\nans = solution()"
    ],
    "f37924ba75cc416ea7c7bd48e7b219c5": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10):\n        for x2 in range(0, 10):\n            if (x1 + x2) < 10:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "762265e33a1846639ea872d9802d0788": [
        "def solution():\n    number = 3172\n    rounded_number = round(number, -2)\n    return rounded_number\n\nans = solution()"
    ],
    "ced80c2b218f4935873bd032dc151175": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of students in Class B, then x + 3 is the number of students in Class A\n    # Let p be the number of peaches Eddie gets\n    x, p = symbols('x p')\n\n    # Equation based on Class A\n    equation1 = Eq((x + 3) * 5 + 10, p)\n    # Equation based on Class B\n    equation2 = Eq(x * 8, p - 2)\n\n    solutions = solve((equation1, equation2), (x, p))\n\n    return solutions[p]\n\nans = solution()"
    ],
    "a0efd19a57614ce1b7d082746b893c41": [
        "def solution():\n    full_price_per_cup = 4\n    num_cups = 6\n\n    # The first 2 cups are 25% off\n    first_discount = 0.25 * full_price_per_cup\n    price_first_2_cups = 2 * (full_price_per_cup - first_discount)\n\n    # The next 2 cups are 50% off\n    second_discount = 0.50 * full_price_per_cup\n    price_next_2_cups = 2 * (full_price_per_cup - second_discount)\n\n    # The last 2 cups, Pip only needs to pay for 1 cup\n    price_last_2_cups = full_price_per_cup\n\n    # Calculate the total price\n    total_price = price_first_2_cups + price_next_2_cups + price_last_2_cups\n\n    return total_price\n\nans = solution()"
    ],
    "8e18ac8eb4bf4eb1aa2ab441e1aa8f37": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 7), (3, 9), (4, 11)]\n    ans = solve_congruence(*congruences)[0]\n\n    return ans\n\nans = solution()"
    ],
    "359bfb2629704d10a8dd53892a5dc3f6": [
        "def solution():\n    # Calculate S by concatenating '2's and summing them up\n    S = sum(int('2' * i) for i in range(1, 2018))\n    \n    # Get the last 5 digits of S\n    last_5_digits = str(S)[-5:]\n    \n    # Sum the last 5 digits\n    ans = sum(int(digit) for digit in last_5_digits)\n    \n    return ans\n\nans = solution()"
    ],
    "296fcbb0011f488f90d6fbcdc37797a7": [
        "def solution():\n    total_orange_drink = 12\n    fraction_water = 3 / 4\n    water_in_drink = total_orange_drink * fraction_water\n    return water_in_drink\n\nans = solution()"
    ],
    "af2c741435fd4a9c86c69499b4f20b42": [
        "def solution():\n    ans = 145 + 37\n    return ans\n\nans = solution()"
    ],
    "09786a51b6224d4080e5d4e9523b4288": [
        "def solution():\n    product = 547 * 479\n    n = product % 10\n    return n\n\nans = solution()"
    ],
    "7a1ae541cfea449eb61ea2f963babc55": [
        "def solution():\n    # Let x be the amount Jayden had left.\n    # Then the amount Benson had left would be 3x.\n    # Benson spent $74, so he initially had 74 + 3x.\n    # Jayden spent $120, so he initially had 120 + x.\n    # Combined, they had $590, so (74 + 3x) + (120 + x) = 590.\n    # Simplifying the equation, we get 4x + 194 = 590.\n    # Now solve for x to find out how much money Jayden had left.\n    x = (590 - 194) // 4\n\n    return x\n\nans = solution()"
    ],
    "fd1283ec4ba7444fabc638211f9fb2c9": [
        "def solution():\n    metres = 212.4\n    centimetres_per_metre = 100\n    centimetres = metres * centimetres_per_metre\n    return centimetres\n\nans = solution()"
    ],
    "40405459ec9349f392fa92d748ff0ae5": [
        "def solution():\n    return 32068 - 1774\n\nans = solution()"
    ],
    "b2f8f67236184468a93d906237dd6e44": [
        "def solution():\n    for number in range(1, 380):\n        if number * number + number == 380:\n            return number\n\nans = solution()"
    ],
    "98327552e4884c52bb882152f3999d49": [
        "def solution():\n    total_pet_owners = 143\n    dog_owners = 100\n    goldfish_owners = 14\n    both_owners = 9\n\n    neither = total_pet_owners - (dog_owners + goldfish_owners - both_owners)\n\n    return neither\n\nans = solution()"
    ],
    "8012fb86c41b408f81b73e1a65e6726b": [
        "def solution():\n    return 314 - 159\n\nans = solution()"
    ],
    "459d851ac5cd4dcd8da1397633b3b589": [
        "def solution():\n    total_parts = 1 + 2 + 3\n    raspberry_part = 1\n    total_volume = 300\n\n    raspberry_volume = (raspberry_part / total_parts) * total_volume\n\n    return raspberry_volume\n\nans = solution()"
    ],
    "1893b64c811b4996a464e737aadc6c57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the time Kevin has walked when Betty arrives at the store\n    # Let s_b be the speed of Betty in metres per minute\n    # Let s_k be the speed of Kevin in metres per minute\n\n    x, s_b, s_k = symbols('x s_b s_k')\n\n    # Equation 1: Betty arrives at the grocery store after walking for 6 minutes\n    eq1 = Eq(s_b * 6, s_k * x + 150)\n\n    # Equation 2: After both walking for 3 more minutes, Kevin arrives at the store and\n    # Betty is 900 metres away from the cinema\n    eq2 = Eq(s_k * (x + 3), s_b * 6)\n    eq3 = Eq(s_b * (6 + 3), 900)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (x, s_b, s_k))\n\n    # Calculate the number of minutes earlier Betty leaves than Kevin does\n    minutes_earlier = solutions[x]\n\n    return minutes_earlier\n\nans = solution()"
    ]
}