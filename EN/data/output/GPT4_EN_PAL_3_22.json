{
    "3ae45bd14e7f417c9f717caaa1c8e5f6": [
        "def solution():\n    total_bones = 206\n    hand_bone_ratio = 27 / 103\n    finger_bone_ratio_in_hand = 14 / 27\n\n    total_hand_bones = total_bones * hand_bone_ratio\n    total_finger_bones = total_hand_bones * finger_bone_ratio_in_hand\n\n    return int(total_finger_bones)\n\nans = solution()"
    ],
    "b59c5c8afae1475392bc408efcd4db9b": [
        "def solution():\n    start_time = 9  \n    end_time = 10  \n    class_duration = end_time - start_time\n    return class_duration\n\nans = solution()"
    ],
    "559135fce0cc43d09bcdb784b6b68b16": [
        "def solution():\n    # Applying the formula for the sum of squares from 1^2 to n^2 which is (1/6)n(n+1)(n+2)\n    n = 15\n    sum_to_n = (1/6) * n * (n + 1) * (n + 2)\n    \n    # We need to subtract the sum of squares from 1^2 to 4^2 since our sum starts from 5^2\n    m = 4\n    sum_to_m = (1/6) * m * (m + 1) * (m + 2)\n    \n    # The result is the difference between the two sums\n    ans = sum_to_n - sum_to_m\n    return int(ans)\n\nans = solution()"
    ],
    "04ba6a8bbd934c9fb2c34951b1c5e1b9": [
        "def solution():\n    for students in range(1, 1000):  # Estimate upper bound for students\n        if ((students + 5) ** 0.5).is_integer():\n            if ((((students + 5) ** 0.5) + 1) ** 2) - students == 26:\n                return students\n    return None\n\nans = solution()"
    ],
    "5c4e76cbed394941b52264c055387694": [
        "def solution():\n    remaining_money = 90\n    fraction_spent_on_skirt = 0.4\n    fraction_remaining_after_bag = 1 - 0.2  # 100% - 20% spent on bag\n\n    initial_money = remaining_money / (fraction_remaining_after_bag * (1 - fraction_spent_on_skirt))\n    return initial_money\n\nans = solution()"
    ],
    "f0976cf87d42410886ef671aee576759": [
        "def solution():\n    ans = 167 - 43\n    return ans\n\nans = solution()"
    ],
    "7598dc1e2b3942f987670ac551b91e44": [
        "def solution():\n    total_students = 36\n    physics_students = total_students * (1/6)\n    biology_students = total_students * (2/9)\n    chemistry_students = total_students - physics_students - biology_students\n\n    return int(chemistry_students)\n\nans = solution()"
    ],
    "743c478b487e4e84b54812fd75dcf6e2": [
        "from math import factorial\n\ndef solution():\n    number_of_plants = 9\n    plants_to_arrange = 4\n\n    # Calculate permutations (number of ways to arrange 'plants_to_arrange' out of 'number_of_plants')\n    permutations = factorial(number_of_plants) // factorial(number_of_plants - plants_to_arrange)\n    \n    return permutations\n\nans = solution()"
    ],
    "55d37813feb54cc0939c8d521cc804ed": [
        "def solution():\n    # let x be the number of apples Amy gives to John\n    amy = 37\n    john = 15\n    x = symbols('x')\n    # After giving x apples, Amy will have 37 - x apples\n    # John will have 15 + x apples\n    # We want Amy to have 4 more apples than John\n    equation = Eq((amy - x) - (john + x), 4)\n    # Solve the equation for x\n    x_value = solve(equation, x)\n    # Return the solution\n    return x_value[0]\n\nans = solution()"
    ],
    "b741d2a40c624148991fcce3147038d7": [
        "def solution():\n    jane_saved = 13\n    ali_saved = 5 + 3 * jane_saved\n    return ali_saved\n\nans = solution()"
    ],
    "6145df4ce0824a5cb58e397de57d33fd": [
        "def solution():\n    # To ensure Fred wins, he needs to leave 4n + 1 oranges to George.\n    # This way, no matter if George takes 1, 2, or 3 oranges, Fred can always leave\n    # 4(multiple) + 1 oranges after his turn, until there's 1 left for Fred's win.\n    total_oranges = 15\n    # Possible wins for Fred would be leaving (15 - 1, 15 - 2, 15 - 3) to George\n    for first_move in range(1, 4):\n        if (total_oranges - first_move) % 4 == 1:\n            return first_move\n\nans = solution()"
    ],
    "e17f0eb85a0a4e86a5fdc51debd2ae80": [
        "def solution():\n    sale_price = 99000  # Sale price of each terraced house\n\n    # Let original_cost_profit be the original cost of the house that was sold for profit\n    original_cost_profit = sale_price / 1.1  # because profit = sale_price - original_cost_profit and profit/original_cost_profit = 10%\n\n    # Let original_cost_loss be the original cost of the house that was sold for loss\n    original_cost_loss = sale_price / 0.9  # because loss = original_cost_loss - sale_price and loss/original_cost_loss = 10%\n\n    total_original_cost = original_cost_profit + original_cost_loss  # combined original cost of both houses\n    total_sale_price = 2 * sale_price  # total sale price of both houses\n\n    profit_or_loss_amount = total_sale_price - total_original_cost\n\n    return profit_or_loss_amount\n\nans = solution()"
    ],
    "f61b518525e8497db5343129a17e8632": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    tom_age = symbols('tom_age')\n    equation = Eq(4 * tom_age - 5, 43)\n    tom_solution = solve(equation, tom_age)\n    return tom_solution[0]\n\nans = solution()"
    ],
    "50918482ad34489a9d43a8fee8182902": [
        "def solution():\n    common_factor = 17\n    sum_of_coefficients = 2 + 3 + 5\n    ans = common_factor * sum_of_coefficients\n    return ans\n\nans = solution()"
    ],
    "865d61c08ae7439db106bc956f814d22": [
        "def solution():\n    ans = 66666 * 66666\n    return ans\n\nans = solution()"
    ],
    "7c040f8b099e47f7b0e8c01b1cc4ecfb": [
        "def solution():\n    shirts = 3\n    pants = 2\n    dresses = 3\n    shoes = 4\n    heels = 2\n    \n    # Combinations when wearing shirts with pants and shoes\n    combos_shirt_pants_shoes = shirts * pants * shoes\n    \n    # Combinations when wearing a dress with shoes or heels\n    combos_dress_shoes = dresses * shoes\n    combos_dress_heels = dresses * heels\n    \n    # Total combinations\n    total_combinations = combos_shirt_pants_shoes + combos_dress_shoes + combos_dress_heels\n  \n    return total_combinations\n\nans = solution()"
    ],
    "a6f2ff602bea44d790a48701447b7788": [
        "def solution():\n    return 816 // 17\n\nans = solution()"
    ],
    "68e2259a732c46c8abe672bceb53dfa2": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for perm in permutations('ABCDE'):\n        if perm.index('A') > perm.index('B') and perm.index('A') < perm.index('C'):\n            count += 1\n        elif perm.index('A') < perm.index('B') and perm.index('A') > perm.index('C'):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "538a2dfa1040448b8789e3db2bc69bf4": [
        "def solution():\n    cupcakes = 90\n    eggs_per_cupcakes = 3 / 15\n    total_eggs = cupcakes * eggs_per_cupcakes\n\n    return int(total_eggs)\n\nans = solution()"
    ],
    "087f11a4dea84aec80d825a39e619ea1": [
        "def solution():\n    total_skipping = 40\n    total_long_jump = 31\n    both_events = 21\n\n    only_one_event = total_skipping + total_long_jump - 2 * both_events\n\n    return only_one_event\n\nans = solution()"
    ],
    "d8b69834edec4cabaf8b61b1c0041fa7": [
        "def solution():\n    fraction_value = 3 / 20\n    decimal_value = 0.16\n\n    ans = '3/20' if fraction_value > decimal_value else '0.16'\n    return ans\n    \nans = solution()"
    ],
    "05b887b14c214e5085156b2107ca9318": [
        "def solution():\n    return 74 * 15 * 8 * 250\n\nans = solution()"
    ],
    "f945574dc9954c9b93f6e0ecf99884de": [
        "def solution():\n    for notes_count in range(1, 280 // (5 + 10 + 20) + 1):\n        if (5 * notes_count) + (10 * notes_count) + (20 * notes_count) == 280:\n            return 3 * notes_count  # Total number of notes (3 types of notes)\n\nans = solution()"
    ],
    "fba5e5ffd4b2401fb75dcd70694a4470": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "39130411ca2f46d8be16d6a43fbef29b": [
        "def solution():\n    # Calculate the distance Sara jogged from 6.30am to 8.30am\n    jogging_time = 2 # hours\n    jogging_speed = 8 # km per hour\n    jogging_distance = jogging_speed * jogging_time\n\n    # Calculate the distance Sara walked from 8.30am to 9.30am\n    walking_time = 1 # hour\n    walking_speed = jogging_speed / 2 # half her jogging speed\n    walking_distance = walking_speed * walking_time\n\n    # Calculate the total distance travelled\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "49c26db5eaf641e1a5d1fedde5e7be96": [
        "def solution():\n    last_digit_2s = (2 ** 100) % 10\n    last_digit_7s = (7 ** 100) % 10\n    last_digit_9s = (9 ** 100) % 10\n\n    ans = (last_digit_2s * last_digit_7s * last_digit_9s) % 10\n    return ans\n\nans = solution()"
    ],
    "f5367d282a3a43acbe086861a0f6d129": [
        "def solution():\n    def diamond(M, N):\n        return M * N + N + 1\n\n    def square(M, N):\n        return 8 * M - N * N\n\n    ans = square(diamond(7, 6), 9)\n    \n    return ans\n\nans = solution()"
    ],
    "14305f680d27486a905dd8dc12e89924": [
        "def solution():\n    from sympy import isprime\n\n    p = 2\n    while True:\n        if isprime(p) and isprime(p + 107):\n            return p\n        p += 1\n\nans = solution()"
    ],
    "16569fabb3364f8488579e555b7c2701": [
        "def solution():\n    A = 1 * 60 + 30 + 20 + 15 + 12\n    return A\n\nans = solution()"
    ],
    "9e090b3df83a42eebe23be5e23c2fa04": [
        "def solution():\n    n = (19 // 2) + 1\n    sum_sq_odd = (1/3) * n * (2*n - 1) * (2*n + 1)\n    return int(sum_sq_odd)\n\nans = solution()"
    ],
    "6136c35f10c146b6933727bbeae9cc0f": [
        "def solution():\n    # Since the piles must have different numbers of marbles and there are 4 piles,\n    # we can start by assuming the smallest pile has 1 marble, the next smallest has 2,\n    # and so on. We then find the smallest number for the biggest pile.\n\n    # Let's assume the smallest number of marbles in the first pile is 1\n    # then we increase the pile sizes by at least one for each subsequent pile\n    # i.e., piles with 1, 2, 3 marbles respectively, and calculate the remainder for the last.\n    for i in range(1, 16):\n        for j in range(i+1, 16):\n            for k in range(j+1, 16):\n                l = 16 - (i + j + k)  # the remainder for the last pile\n                if l > k:  # since l has to be the largest and different from i, j, k\n                    return l\n\nans = solution()"
    ],
    "1efe483e70024fb2ab2678147636e373": [
        "def solution():\n    students = 92\n    capacity = 6\n    ans = (students + capacity - 1) // capacity\n    return ans\n\nans = solution()"
    ],
    "ddc124ebdf394e27ba7e0a2f7f5a5377": [
        "def solution():\n    sum = 0\n    for i in range(1, 2008):\n        sum += (i**2 + (i+1)**2) / (i * (i+1))\n    ans = round(sum)\n    return ans\n\nans = solution()"
    ],
    "d10979d095f949d99d2f66996f58a6b3": [
        "def solution():\n    return 24 * 25 / 100\n\nans = solution()"
    ],
    "9cf8631bfbee42e5855a61e09bcd4e80": [
        "def solution():\n    # 3 intervals: (1st to 2nd), (2nd to 3rd), (3rd to 4th)\n    # All intervals are assumed to be of equal duration\n    # Total time is for 3 intervals\n\n    total_time_for_3_intervals = 12  # given in the problem\n    time_per_interval = total_time_for_3_intervals / 3  # equal time for each interval\n\n    return time_per_interval\n\nans = solution()"
    ],
    "ea6e646ea13c4df596eb009a1fcb24c6": [
        "def solution():\n    result = 123456789 * 987654321\n    return result\n\nans = solution()"
    ],
    "28743e9e9f164cf594fa43bdd40cccc5": [
        "def solution():\n    # Let n be the number of girls\n    # The correct total height sum is n * 163\n    # The incorrect total height sum is n * 159 + (126 - 162)\n    \n    # The difference between the correct and incorrect sums is due to the wrong input, which is 162 - 126 = 36 cm\n    # Therefore, n * 163 - (n * 159 + 36) = n * 163 - n * 159 - 36 = 0\n    # Thus, n * (163 - 159) = 36\n    # Simplify to find n\n    \n    n = 36 / (163 - 159)\n    \n    return int(n)\n\nans = solution()"
    ],
    "9787f436650643b8bcdc8f3423f5efd0": [
        "def solution():\n    ans = 1  # Initialize with the result of 1 # 2\n    for i in range(2, 201):  # Loop through 2 to 200\n        ans = i * ans - 2 * i + 4  # Perform the operation as defined\n    return ans\n\nans = solution()"
    ],
    "24dce9b709594b28a5a36bcec14da54f": [
        "def solution():\n    product = 1\n    for n in range(2, 10):\n        product *= (1 + 1/n)\n    return product\n\nans = solution()"
    ],
    "473c8349035b4eefb0b4f9931022b96c": [
        "def solution():\n    def sum_of_cubes(n):\n        return ((n * (n + 1)) // 2) ** 2\n\n    ans = sum_of_cubes(7)  # Since we add cubes of odds from 1 to 13, which are 7 terms (1,3,5,7,9,11,13)\n    return ans\n\nans = solution()"
    ],
    "262f4235c15a48d8867e110f1ec25448": [
        "def solution():\n    apples = 37\n    container_capacity = 4\n    num_containers = -(-apples // container_capacity)  # Ceiling division    \n    \n    return num_containers\n\nans = solution()"
    ],
    "c464a13a5fa84a98b5f96b4da026c8ac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    beth = symbols('beth')\n    ken = beth + 75\n    equation = Eq(4/5 * beth, 2/5 * ken)\n\n    solution_beth = solve(equation, beth)[0]\n\n    total_seashells = solution_beth + solution_beth + 75\n\n    return total_seashells\n\nans = solution()"
    ],
    "15dbd49938d249928c98f4f1fcb84fee": [
        "def solution():\n    number = 9876543\n    ans = number + 10000\n    return ans\n\nans = solution()"
    ],
    "a1026833d23d4e0d9b3d3b7fc72eed9b": [
        "def solution():\n    from math import gcd\n    \n    ribbon1 = 56\n    ribbon2 = 42\n    ribbon3 = 84\n\n    # Calculate the greatest common divisor (GCD) of the lengths\n    greatest_length = gcd(gcd(ribbon1, ribbon2), ribbon3)\n\n    return greatest_length\n\nans = solution()"
    ],
    "8ffc9bb3b9b14815bbbef4f710602d07": [
        "def solution():\n    # iterate through square numbers less than 50\n    for i in range(1, 8):  # 7^2 is 49, which is the largest square number less than 50\n        square = i**2\n        cube_root = round((square + 2)**(1/3), 8)\n        if cube_root.is_integer():\n            return square\n\nans = solution()"
    ],
    "83bd57b5f2044e249a35cf1dc299b27f": [
        "def solution():\n    mark_money = 26\n    sue_money = mark_money / 2\n    total_money = mark_money + sue_money\n    return total_money\n\nans = solution()"
    ],
    "24e6a79cbcf3471baf6993ecdd2917eb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of $10 notes and y be the number of $2 notes.\n    x, y = symbols('x y')\n\n    # Equation 1: Total number of notes is 40.\n    eq1 = Eq(x + y, 40)\n\n    # Equation 2: After spending, he has 4/5 as many $10 notes as $2 notes.\n    # x - 0.4x = (4/5)*(y - 0.25y)\n    eq2 = Eq((1 - 0.4) * x, (4/5) * (1 - 0.25) * y)\n\n    # Solve the system of equations.\n    solutions = solve((eq1, eq2), (x, y))\n    x_val = solutions[x]\n    y_val = solutions[y]\n\n    # Calculate the amount spent on the gift.\n    amount_spent_10 = 0.4 * x_val * 10  # 40% of the $10 notes\n    amount_spent_2 = 0.25 * y_val * 2   # 25% of the $2 notes\n\n    # Total cost of the gift.\n    gift_cost = amount_spent_10 + amount_spent_2\n\n    return gift_cost\n\nans = solution()"
    ],
    "9fad48b32dd54f7d8f6c57a2e1c1c739": [
        "from itertools import combinations\n\ndef solution():\n    count = 0\n    oranges = 13 - 2 * 3  # Subtracting the minimum two oranges each kid should get\n    # We need to partition oranges into 3 parts, simulate the partitions using 2 dividers in (oranges - 1) positions\n    for combo in combinations(range(1, oranges), 2):\n        count += 1\n    return count\n\nans = solution()"
    ],
    "e889a2076f404fb8b48259549449cd54": [
        "def solution():\n    ans = sum(range(1, 10)) + 7  # Calculate the sum from 1 to 9 and add 7 once more\n    return ans\n\nans = solution()"
    ],
    "249ff97ab0a04659a46ad1e415926b19": [
        "def solution():\n    return (7/8) * 32\n\nans = solution()"
    ],
    "48f99615d7554b569d6065aa09ad29fe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the two original numbers\n    x, y = symbols('x y')\n    \n    # Equation based on sum of the two numbers\n    equation1 = Eq(x + y, 11.63)\n    \n    # Equation based on inaccurate sum due to shifting decimal point\n    equation2 = Eq(x + 0.1 * y, 5.87)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Calculate one hundred times the difference between the two original numbers\n    diff = abs(solutions[x] - solutions[y]) * 100\n    \n    return diff\n\nans = solution()"
    ],
    "6c29f3b41d5a4f7889347840102cd90e": [
        "def solution():\n    return 342 // 6\n\nans = solution()"
    ],
    "97c6599317ae40c0a130a7c36adb4b0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bill, son, father = symbols('bill son father')\n\n    # Bill is twice as old as his son.\n    equation1 = Eq(bill, 2 * son)\n\n    # The son is 50 years younger than Bill's father.\n    equation2 = Eq(son, father - 50)\n\n    # The total of their ages is 142.\n    equation3 = Eq(bill + son + father, 142)\n\n    # Solving the system of equations.\n    solutions = solve((equation1, equation2, equation3), (bill, son, father))\n\n    return solutions[bill]\n\nans = solution()"
    ],
    "7902f1d486d74393bc7de12711dcb3ff": [
        "def solution():\n    # According to the pattern in the given expression \n    # Look at how each term cancels out the previous term's denominator\n    # Every term has a factor of (1 + 1/2^n) where n is a power of 2 \n    # which will cancel with the fraction of the subsequent term (1 - 1/2^(2^n))\n    # Each term is structured to cancel out the fraction part left by the previous term\n    # This means that the pattern will continue until the fraction part is 1/2^(2^2009)\n    # until we are left with (1 - 1/2^(2^2009)) after the final term\n    # This final fraction part should be the same as in the equation provided 2*(1 - 1/2^(2^n))\n\n    # Hence, the n that remains and does not get canceled out is 2^2009\n\n    # So the answer is just 2009 since 2^n = 2^2009 => n = 2009\n\n    return 2009\n\nans = solution()"
    ],
    "fc2dc1ff01c442ee8bac9a42520f29e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for Sally and John's current ages\n    sally, john = symbols('sally john')\n    \n    # Define the equations based on the problem statement\n    equation1 = Eq(sally + 3, 6 * (john + 3))\n    equation2 = Eq(sally + john, 50)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sally, john))\n    \n    # Return Sally's current age\n    return solutions[sally]\n\nans = solution()"
    ],
    "80475a976f7b497ab82f076e94c1eb50": [
        "def solution():\n    for n in range(100, 1000):\n        if n % 7 == 1 and n % 9 == 5:\n            return n\n\nans = solution()"
    ],
    "06973ad362db4d66ba9d6b002e663ba0": [
        "from itertools import permutations\n\ndef solution():\n    for p, a, s, o in permutations(range(10), 4):\n        if p == 0:  # A number cannot start with 0.\n            continue\n\n        paso = 1000 * p + 100 * a + 10 * s + o\n        opas = 1000 * o + 100 * p + 10 * a + s\n\n        if paso - opas == 3087:\n            return paso\n\nans = solution()"
    ],
    "c1ee40d11fbd48de808886c4e3c9346a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    licia, krisnam, imran = symbols('licia krisnam imran')\n    \n    equation1 = Eq(licia, 3 * krisnam)\n    equation2 = Eq(imran, licia + 138)\n    equation3 = Eq(licia + krisnam + imran, 2238)\n\n    solutions = solve((equation1, equation2, equation3), (licia, krisnam, imran))\n\n    return solutions[imran]\n\nans = solution()"
    ],
    "37ff6eaa86e84fce88804835c34d1857": [
        "def solution():\n    man_rate = 1 / 15\n    together_rate = 1 / 12\n    wife_rate = together_rate - man_rate\n    wife_days = 1 / wife_rate\n    return wife_days\n\nans = solution()"
    ],
    "a509801c05d046ddbb0f80cbc8f2de96": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    harry, liam = symbols('harry liam')\n    \n    # Initial total amount of water\n    equation1 = Eq(harry + liam, 640)\n    \n    # Situation after transferring 90ml from Liam to Harry\n    equation2 = Eq(harry + 90, 3 * (liam - 90))\n    \n    # Solving the equations\n    solutions = solve((equation1, equation2), (harry, liam))\n\n    return solutions[harry]\n\nans = solution()"
    ],
    "9402dca5a2494aaa90174d3dcc2b38f6": [
        "def solution():\n    ans = 7.55 + 6.32 + 6.45 - 5.32\n    return ans\n\nans = solution()"
    ],
    "2168499404134fc2adf349c4200b2d1b": [
        "from math import comb\n\ndef solution():\n    count = 0\n    # Remaining white balls: 3 to 8\n    for white_left in range(3, 9):\n        # Remaining red balls: 2 to 5\n        for red_left in range(2, 6):\n            # Remaining black balls: 0 to 3\n            for black_left in range(0, 4):\n                if white_left + red_left + black_left == 10:\n                    white_picked = 9 - white_left\n                    red_picked = 5 - red_left\n                    black_picked = 6 - black_left\n                    count += comb(9, white_picked) * comb(5, red_picked) * comb(6, black_picked)\n    return count\n\nans = solution()"
    ],
    "de889839b5114b1296f34ad36b21626e": [
        "def solution():\n    count = 0\n    for h in range(1, 10):  # hundreds place (1-9)\n        for t in range(10):  # tens place (0-9)\n            for u in range(10):  # units place (0-9)\n                if h + t + u == 6:  # the sum of the digits should be equal to 6\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "5538dcae57d5405daf57ad4e6cbaefbe": [
        "def solution():\n    # Number of beans peeled from 9 to 10, 10 to 11, and 11 to 12\n    beans_9_to_10 = 20\n    beans_10_to_11 = 28\n    beans_11_to_12 = 36\n\n    # Calculate the common difference of the arithmetic sequence\n    common_difference = beans_10_to_11 - beans_9_to_10\n\n    # Calculate the number of beans peeled in the first hour\n    beans_7_to_8 = beans_9_to_10 - 2 * common_difference\n\n    return beans_7_to_8\n\nans = solution()"
    ],
    "eaa3bd18a64e40968b71f7429893a5f4": [
        "def solution():\n    # Start with the initial conditions\n    first_day_questions = 3  # questions Pip did on Monday\n    daily_increment = 3      # everyday Pip did 3 more questions than the previous day\n    days = 7                 # total days from Monday to Sunday\n\n    # Use the formula for the sum of the first n terms of an arithmetic sequence\n    # S_n = n/2 * (a_1 + a_n)\n    # where:\n    # S_n is the sum of the first n terms\n    # n is the number of terms\n    # a_1 is the first term\n    # a_n is the last term\n    \n    # In our case, we already know a_1 (3 questions on Monday)\n    # We need to find a_n, which is the number of questions on Sunday\n    # which can be found by the formula of the nth term of an arithmetic sequence:\n    # a_n = a_1 + (n - 1) * d\n    # where:\n    # a_n is the nth term\n    # a_1 is the first term\n    # n is the term number (in this case, day number from Monday)\n    # d is the common difference (daily_increment)\n\n    # Calculate the last term (a_n) for the 7th day (Sunday)\n    last_day_questions = first_day_questions + (days - 1) * daily_increment\n\n    # Calculate the sum of the arithmetic sequence from Monday to Sunday\n    total_questions = days / 2 * (first_day_questions + last_day_questions)\n    \n    # Return the result\n    return int(total_questions)\n\nans = solution()"
    ],
    "ef3f3f94225949a58df726e58eb69b6c": [
        "def solution():\n    ans = 77.5 * (52 / 100) + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "6cb9a183b95a46fb81d725bba4fbd059": [
        "def solution():\n    remainder = (2**10) % 3\n    return remainder\n\nans = solution()"
    ],
    "bf0d9139a15044e2ba9ab0bab0208c0f": [
        "def solution():\n    insect_length_cm = 5\n    snake_length_m = 1\n    snake_length_cm = snake_length_m * 100  # Convert snake length to centimeters\n    times_smaller = snake_length_cm / insect_length_cm\n    return times_smaller\n\nans = solution()"
    ],
    "395df03e3da54196a51c7ff3b7a39d90": [
        "def solution():\n    mean_three_numbers = 120\n    mean_four_numbers = 150\n    total_three_numbers = mean_three_numbers * 3\n    total_four_numbers = mean_four_numbers * 4\n    fourth_number = total_four_numbers - total_three_numbers\n    return fourth_number\n\nans = solution()"
    ],
    "89ff81f6b03f4a6eb38de4755a3e7b7a": [
        "def solution():\n    term = 1  # Initialize the first term of the sequence\n    diff = 2   # Initialize the common difference increment\n    while True:\n        next_term = term + diff  # Calculate the next term\n        if next_term >= 100:  # If the next term is a three-digit number, break out of the loop\n            break\n        term = next_term  # Update the current term with the next term\n        diff += 2  # Increase the common difference\n    return term  # Return the largest two-digit term\n\nans = solution()"
    ],
    "53089c6bd249446b8b0196fbb0b9703a": [
        "def solution():\n    return 372 * 6\n\nans = solution()"
    ],
    "33e3182a110545e4aac441cab30efd1b": [
        "def solution():\n    initial_mass = 2.3\n    given_away = 0.76\n\n    remaining_mass = initial_mass - given_away\n    return round(remaining_mass, 1)\n\nans = solution()"
    ],
    "3fa1ccdaf7494491b72d7cb7bb7823d5": [
        "def solution():\n    full_weight = 80\n    half_full_weight = 60\n    mangoes_weight_when_half_full = half_full_weight * 2 - full_weight\n    empty_basket_weight = full_weight - mangoes_weight_when_half_full\n    return empty_basket_weight\n\nans = solution()"
    ],
    "cd7290c100ba4294b7ef33d6d31bec83": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 5), (4, 6), (1, 7)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "b9d47fcf7dbb40338318bab5201d44a1": [
        "def solution():\n    # Let's denote the total number of pearls as x.\n    # According to the question:\n    # Half of the pearls fell onto the floor: x/2\n    # A fourth rolled under a chair: x/4\n    # A sixth fell into her lap: x/6\n    # Three pearls remained on the strand.\n    # The equation is: x/2 + x/4 + x/6 + 3 = x\n\n    # To solve the equation, let's find a common denominator for the fractions\n    common_denominator = 2*4*6  # Least common multiple of 2, 4, and 6\n\n    # Convert all terms to have the common denominator\n    # We multiply each term by (common_denominator/divisor of the fraction)\n    equation = (common_denominator//2)*(1/2) + \\\n               (common_denominator//4)*(1/4) + \\\n               (common_denominator//6)*(1/6) + \\\n               3 * common_denominator\n\n    # The sum of these should be equal to x times the common denominator\n    # So we have an equation:\n    # (common_denominator/2) + (common_denominator/4) + (common_denominator/6) + 3 * common_denominator = common_denominator * x\n\n    # Now let's simplify the equation\n    equation_simplified = equation - common_denominator\n\n    # Now we find x\n    x = equation_simplified / (common_denominator - (common_denominator//2 + common_denominator//4 + common_denominator//6))\n\n    return int(x)\n\nans = solution()"
    ],
    "4d3f432b490949d3925832026d9e4a66": [
        "def solution():\n    # Pip is 6th from the front, Bud is 6th from the end\n    # There are 5 children between Pip and Bud (not including Pip and Bud)\n    # Therefore, the total number of children in the queue is:\n    # Number of children before Pip + Pip + children between Pip and Bud + Bud + children after Bud\n\n    before_pip = 6 - 1  # Pip is 6th, so 5 children are before Pip\n    between_pip_bud = 5  # Given in question\n    after_bud = 6 - 1  # Bud is 6th from the end, so 5 children are after Bud\n\n    total_children = before_pip + 1 + between_pip_bud + 1 + after_bud\n    return total_children\n\nans = solution()"
    ],
    "d398f7f40bb64d5fb8ef87ec0477dcf5": [
        "def solution():\n    total_family_age = 29 * 6\n    total_parent_age = total_family_age - 64\n    average_parent_age_now = total_parent_age / 2\n    average_parent_age_3_years_ago = average_parent_age_now - 3\n    \n    return average_parent_age_3_years_ago\n\nans = solution()"
    ],
    "257342f894034d4f8d8102d254731724": [
        "def solution():\n    total_paintings_done = 35\n    days_taken = 5\n    total_paintings_required = 56\n\n    paintings_per_day = total_paintings_done / days_taken\n    remaining_paintings = total_paintings_required - total_paintings_done\n    extra_days_needed = remaining_paintings / paintings_per_day\n    \n    return int(extra_days_needed)\n\nans = solution()"
    ],
    "cc6e6ddc9099471392da17b986cd942e": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # The Chinese Remainder Theorem states that a solution exists for the given congruences\n    # because the moduli are pairwise coprime.\n    # We want to find the smallest positive solution for the system:\n    # x ≡ 0 (mod 7)\n    # x + 2 ≡ 0 (mod 8)\n    # x + 4 ≡ 0 (mod 9)\n    # We can rewrite the system as:\n    # x ≡ 0 (mod 7)\n    # x ≡ 6 (mod 8)\n    # x ≡ 5 (mod 9)\n    # Now, we can use the solve_congruence function from the sympy library to find 'x'.\n\n    congruences = [(0, 7), (6, 8), (5, 9)]\n    x, _ = solve_congruence(*congruences)\n    \n    # The smallest sum of the three numbers requires us to find the smallest positive solution for 'x'.\n    # The three consecutive even numbers will be x, x+2, x+4 respectively.\n\n    smallest_sum = x + (x + 2) + (x + 4)\n    return smallest_sum\n\nans = solution()"
    ],
    "14ae67b1d73847249fcea1dbc5eda7df": [
        "def solution():\n    first_term = 10\n    fourth_term = 25\n    total_rows = 25\n    \n    # The common difference of the arithmetic sequence\n    common_difference = (fourth_term - first_term) / (4 - 1)\n    \n    # Using the formula for the sum of an arithmetic sequence: n/2 * (2a + (n-1)d)\n    total_athletes = total_rows / 2 * (2 * first_term + (total_rows - 1) * common_difference)\n    \n    return int(total_athletes)\n\nans = solution()"
    ],
    "524b8c04c5894f029a0397c7af386fd8": [
        "def solution():\n    ans = (3 + 3 + 3 + 3 + 3 + 3 + 3 + 3) // 3\n    return ans\n\nans = solution()"
    ],
    "63e2e26e1682446aac1d93fad30b5007": [
        "def solution():\n    total_papers = 18\n    interval = 3\n    leaves = total_papers // interval\n    return leaves\n\nans = solution()"
    ],
    "dc8c93a375a54464922a54b1b49ff957": [
        "def solution():\n    term_5 = 8\n    term_12 = 50\n    term_diff = term_12 - term_5\n    common_difference = term_diff / (12 - 5)\n    \n    return common_difference\n\nans = solution()"
    ],
    "155a2124ddcf40f9b74dff87ab3c4f69": [
        "def solution():\n    # Applying the distributive law (factor out 95)\n    ans = 95 * (37 + 42 + 21)\n    return ans\n\nans = solution()"
    ],
    "e4deea45600b48659f31a194ff56e172": [
        "def solution():\n    return 35 * 24\n\nans = solution()"
    ],
    "f16ba08240ad425e89f61fc8df41e78f": [
        "def solution():\n    first_term = 2\n    common_difference = 3\n\n    count = 0\n    while first_term + 2 * common_difference <= 242:\n        sum_of_three_terms = first_term + (first_term + common_difference) + (first_term + 2 * common_difference)\n        first_term += 3 * common_difference\n        count += 1\n    \n    second_term = first_term + common_difference\n    return second_term\n\nans = solution()"
    ],
    "e9e6206bf20f4a548fb5ea4a8b0d40b5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud, bob = symbols('pip bud bob')\n\n    equation1 = Eq((pip + bud) / 2, 30)\n    equation2 = Eq((pip + bob) / 2, 33)\n    equation3 = Eq((bud + bob) / 2, 36)\n\n    solutions = solve((equation1, equation2, equation3), (pip, bud, bob))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "b2a960366a1e4206865a6d0760704900": [
        "def solution():\n    numbers = [0.01, 0.08, 0.13, 0.2, 0.9]\n    target = 0.1\n\n    closest_number = min(numbers, key=lambda x: abs(x - target))\n\n    return closest_number\n\nans = solution()"
    ],
    "54fd381d66a4495b81ec629060372915": [
        "from itertools import combinations\n\ndef solution():\n    times = [7, 9, 4, 10]  # Individual times taken by the four people\n    min_time = float('inf')  # Initialize with infinity\n\n    # Generate all possible pairs of people to row the boat together\n    for pair in combinations(times, 2):\n        temp_times = times.copy()  # Temporary list of times to manipulate\n        time_taken = 0  # Time taken for current arrangement of crossings\n        while len(temp_times) > 3:  # More than 3 people on the initial side\n            # Two fastest on the initial side row across\n            time_taken += max(pair)\n            # Fastest rows back\n            time_taken += min(pair)\n\n            # Remove the two who have crossed from temp_times\n            temp_times.remove(pair[0])\n            temp_times.remove(pair[1])\n\n            # Two slowest on the initial side row across\n            time_taken += max(temp_times)\n            # Fastest (from original pair) rows back\n            time_taken += min(pair)\n            # Both from original pair are now across\n\n        # Only three people left; two on the initial side and one across\n        # Two on the initial side row across\n        time_taken += max(temp_times)\n        # No more rowing back needed; all four have crossed\n\n        # Update minimum time if the current time is less\n        if time_taken < min_time:\n            min_time = time_taken\n\n    return min_time\n\nans = solution()"
    ],
    "21925b1973084732a0bda763e78de8cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2*x + 3*x + 2, 30 + 6*x - 8*x)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "7a9b9029d5734b7c90666cccb4699070": [
        "def solution():\n    numbers = [29, 37, 76, 63, 24, 45, 61, 55]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "f3c93367205a456ea52d0000fc85cdec": [
        "def solution():\n    num_sisters = 4\n    num_brothers = 3\n    jacob = 1\n\n    total_children = num_sisters + num_brothers + jacob\n\n    return total_children\n\nans = solution()"
    ],
    "80ae2580a9e14b43aeb41aca80397bf8": [
        "def solution():\n    initial_people = 5\n    initial_days = 15\n    target_days = 7\n\n    work_done = initial_people * initial_days\n    people_needed = work_done / target_days\n    additional_people = people_needed - initial_people\n\n    return int(additional_people)\n\nans = solution()"
    ],
    "4df4bcfe8431481b82ea6620cf995bdb": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.07\n    years = 5\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n    return final_value\n\nans = solution()"
    ],
    "23b6320496c74802b1ab8fa3492896ab": [
        "def solution():\n    ans = 1.25 * 88\n    return ans\n\nans = solution()"
    ],
    "0447196e6c6246baa9661487a6cbd4c6": [
        "def solution():\n    ans = 672 // 8\n    return ans\n\nans = solution()"
    ],
    "7e73704f04d44c6bb2d64ca0206cc145": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be initial speed in metres per minute,\n    # Let d be the total distance,\n    # Let t be the time before rain starts (in minutes).\n    x, d, t = symbols('x d t')\n    \n    # Equation 1: Maria covers the journey at usual speed in 30 minutes\n    equation1 = Eq(x * 30, d)\n    \n    # Equation 2: Time taken after reducing speed by 20% for 2400 metres\n    equation2 = Eq((x * 0.8) * (t - 30 + 5), 2400)\n    \n    # Equation 3: Total journey time is 5 minutes more than usual\n    equation3 = Eq(x * t, d)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (x, d, t))\n\n    return solutions[d]\n\nans = solution()"
    ],
    "caaa1eddd8e44bef93f25acbc57b8371": [
        "def solution():\n    return 12321 // 37\n\nans = solution()"
    ],
    "8ddb5880b1e64f2d96621c773f4f7ace": [
        "def solution():\n    initial_temp = -3 # temperature at 5:00 am\n    rate_of_increase = 2 # degrees per hour\n    time_elapsed = 5.5 # hours from 5:00 am to 10:30 am\n\n    final_temp = initial_temp + rate_of_increase * time_elapsed\n\n    return final_temp\n\nans = solution()"
    ],
    "ea291fdb39c04d6bb392ebad4dae8604": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for the number of students in each school\n    a, b = symbols('a b')\n    \n    # Two equations based on the problem statement\n    equation1 = Eq(a + b, 1050)                          # Total students is 1050\n    equation2 = Eq(a - 20, b + 10)                       # School A has 10 more students than school B after transferring 20 students\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, b))\n    \n    # We need the original number of students at school A\n    return solutions[a]\n\nans = solution()"
    ],
    "1cfc58120fbc40b6bf8247588930f7c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the amount of money Mrs Chan had at first.\n    x = symbols('x')\n    \n    # After shop A, she had (1/2)x - 1.\n    # After shop B, she had ((1/2)x - 1)/2 - 2.\n    # After shop C, she had ((1/2)((1/2)x - 1) - 2)(2/3) - 3 = 49.\n    equation = Eq((((x/2) - 1)/2 - 2)*2/3 - 3, 49)\n    \n    # Solve for x.\n    solutions = solve(equation, x)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "bb1f1a78e8b14c55b2e4ca48c347db8c": [
        "def solution():\n    total_students = 32\n    fraction_boys = 3 / 4\n    number_boys = total_students * fraction_boys\n    number_girls = total_students - number_boys\n    return int(number_girls)\n\nans = solution()"
    ],
    "28774179acd44fbdaf5d40e780523af5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the number of books on the top shelf be x\n    x = symbols('x')\n    \n    # The number of books on each shelf forms an arithmetic sequence with a common difference of -3.\n    # The sum of an arithmetic sequence is given by n/2 * (first_term + last_term)\n    # Here n (the number of terms) is 7, and the last term will be x + 6*(-3)\n    total_books_eq = Eq((7/2) * (x + (x + 6*(-3))), 280)\n    \n    # Solving for x\n    top_shelf_books = solve(total_books_eq, x)\n\n    return top_shelf_books[0]\n\nans = solution()"
    ],
    "38bf844b32b44c12972bb035ec388106": [
        "def solution():\n    # Darrell could draw all blue and white pencils before getting a green one for sure\n    max_non_green_pencils = 3 + 3  # Total blue and white pencils\n    # So, to ensure he gets at least 1 green pencil, he has to draw one more after that\n    ans = max_non_green_pencils + 1\n    return ans\n\nans = solution()"
    ],
    "6650434a14d84648b471103d681433eb": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 2240 and get its prime factors and their exponents\n    factors = factorint(2240)\n    \n    # To make 2240/n a square number, each prime factor's exponent must be even\n    # So n should be the product of prime factors raised to the power of their exponents,\n    # minus one if they are odd to make them even.\n    n = 1\n    for prime, exponent in factors.items():\n        if exponent % 2 != 0:\n            n *= prime\n    \n    return n\n\nans = solution()"
    ],
    "02bc5b84f38e437d928aa61c776bd24c": [
        "def solution():\n    from math import lcm\n    sweep = 3\n    mope = 5\n    cook = 9\n    clean = 3 * 7  # 3 weeks\n\n    ans = lcm(sweep, mope, cook, clean)\n    return ans\n\nans = solution()"
    ],
    "0e28012c7afd408599dee757d5a607e6": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 311):\n        total_sum += sum(int(digit) for digit in str(i))\n    return total_sum\n\nans = solution()"
    ],
    "8b07fa55294340ce938279e09cfc9c8c": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n\n    both_competitions = math_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "a3f51789234d477fb06391f3a221a5f8": [
        "def solution():\n    ans = 22 * 125 * 8\n    return ans\n\nans = solution()"
    ],
    "e351511a62494ba0991dc2cdd9255710": [
        "def solution():\n    avril_age = 8\n    dad_age = 5 * avril_age\n    age_difference = dad_age - avril_age\n\n    age_difference_2_years_ago = age_difference - 2 * 2  # Subtract 2 years from both ages\n\n    return age_difference_2_years_ago\n\nans = solution()"
    ],
    "2a7407914fcd4db5b094cbb7fb4b2b91": [
        "def solution():\n    cost_per_item = 6.30 / 9\n    cost_for_eleven_items = cost_per_item * 11\n    return cost_for_eleven_items\n\nans = solution()"
    ],
    "3610afbddbce47998aebfb515c853f57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of candies (c) and number of kids (k)\n    c, k = symbols('c k')\n\n    # If each kid eats 18 candies, they need 12 more\n    # So the total candies required for each kid to have 18 is k*18 + 12\n    equation1 = Eq(k * 18 + 12, c)\n\n    # If each kid eats 15 candies, there are enough candies for 2 additional kids\n    # So the total number of candies is enough for k+2 kids to have 15 candies each\n    equation2 = Eq((k + 2) * 15, c)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (c, k))\n\n    # We are interested in the number of candies\n    return solutions[c]\n\nans = solution()"
    ],
    "12630e7ba91647e9a662b2150bd08918": [
        "def solution():\n    from sympy import root, Rational\n\n    expression = 16.7 - root(((-4.56)**2 - (8.1)**3) / (7.2)**3 / (-root(27/4, 2) - (-30.15)), 3)\n    ans = round(expression, 3)\n    return ans\n\nans = solution()"
    ],
    "f3a192a1a028460aa34b249e7e3af6b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Mr. Lim's and Mrs. Lim's current ages\n    mr_age, mrs_age = symbols('mr_age mrs_age')\n\n    # Equation for the age ratio 7 years ago\n    equation1 = Eq((mr_age - 7) / (mrs_age - 7), 6 / 5)\n\n    # Equation for the sum of their current ages\n    equation2 = Eq(mr_age + mrs_age, 69)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (mr_age, mrs_age))\n\n    # Mr. Lim's current age\n    return solutions[mr_age]\n\nans = solution()"
    ],
    "dea0d88a56c14c18bf792f9e1d676070": [
        "def solution():\n    oliver_age_now = 20\n    lin_age_now = 26\n    sum_of_ages_future = 48\n\n    # Let's denote the number of years later as \"years_later\".\n    # After \"years_later\" years, their ages will be (oliver_age_now + years_later) and (lin_age_now + years_later).\n    # So, the equation will be: (oliver_age_now + years_later) + (lin_age_now + years_later) = sum_of_ages_future.\n    # Simplifying the equation gives us: 2 * years_later + oliver_age_now + lin_age_now = sum_of_ages_future.\n    # Therefore: years_later = (sum_of_ages_future - oliver_age_now - lin_age_now) / 2.\n    \n    years_later = (sum_of_ages_future - (oliver_age_now + lin_age_now)) // 2\n    return years_later\n\nans = solution()"
    ],
    "7f06cc0235094faaa81a0a2fb9cab606": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, peter, john_initial, john_final = symbols('sam peter john_initial john_final')\n    \n    # Sam gives 20% of his stickers to John\n    sam_to_john = sam * 20 / 100\n\n    # Peter gives 20% of his stickers to John\n    peter_to_john = peter * 20 / 100\n    \n    # John's stickers increase by 80%\n    equation1 = Eq(john_final, john_initial + sam_to_john + peter_to_john)\n    equation2 = Eq(john_final, john_initial * 180 / 100)\n\n    # Introduce the ratio between Sam and Peter\n    equation3 = Eq(sam, peter * 7 / 5)\n\n    # Sam has 20 stickers more than John in the end\n    equation4 = Eq(sam, john_final + 20)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3, equation4), (sam, peter, john_initial, john_final))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "914f071ea10440cebf9dbe8becbdbc9d": [
        "def solution():\n    ans = 58 + 63 + 59 + 62 + 63 + 56 + 61\n    return ans\n\nans = solution()"
    ],
    "2ef9562fe8a044c3af3451bfe10a4c3b": [
        "def solution():\n    # mean of 5 students is 87\n    total_score_for_5 = 87 * 5\n    # mean of 6 students including Jim is 88\n    total_score_for_6 = 88 * 6\n    # Jim's score is the total for 6 minus the total for 5\n    jims_score = total_score_for_6 - total_score_for_5\n    return jims_score\n\nans = solution()"
    ],
    "4a241f99a7b844b08c465d23e0993893": [
        "def solution():\n    one_fifth_length = 6\n    full_length = one_fifth_length * 5\n    one_third_length = full_length / 3\n    return one_third_length\n\nans = solution()"
    ],
    "b4b4e5c5437f4235a2a175fc8db815dd": [
        "def solution():\n    initial_price = 4200\n    first_discount = 0.10\n    second_discount = 0.20\n\n    price_after_first_discount = initial_price * (1 - first_discount)\n    final_price = price_after_first_discount * (1 - second_discount)\n\n    return final_price\n\nans = solution()"
    ],
    "457a726196e141089b3e12d90241956e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    raja, kumar = symbols('raja kumar')\n    \n    # After spending, Kumar has 4 times the money Raja has\n    equation1 = Eq(kumar - 109, 4 * (raja - 286))\n    # Initially, Raja and Kumar had the same amount of money\n    equation2 = Eq(raja, kumar)\n    \n    solutions = solve((equation1, equation2), (raja, kumar))\n    \n    return solutions[raja]\n\nans = solution()"
    ],
    "34ba1fe6c4914c9988860c36d1caf4a3": [
        "def solution():\n    total_boys = 47\n    minibus_capacity = 6\n    \n    minibusses_needed = (total_boys + minibus_capacity - 1) // minibus_capacity\n    \n    return minibusses_needed\n\nans = solution()"
    ],
    "e61ecccd8d4e46a5bae3436df379fd8e": [
        "def solution():\n    # Since their speed ratio is 7:4, we can assume Jayden walks 7k m/s and Carter walks 4k m/s\n    # Let's calculate the time they meet for the first time\n    # At that time, the total distance they both covered is 440m, so:\n    # 7k*t + 4k*t = 440\n    # 11k*t = 440\n    # t = 440 / (11k)\n    # Since we are looking for ratio, we do not care about the actual speed, so let's just assume k=1 for simplicity\n    t = 440 / 11\n    \n    # Now Jayden has walked for time t and covered a distance of 7k*t = 7*t\n    # Jayden's distance from point A at the time of the first meeting is:\n    distance_jayden = 7 * t\n\n    # After the meeting, Jayden turns back and moves towards A again.\n    # Let's calculate the time it takes for Carter to reach the meeting point after the first meeting:\n    # That time will be the remaining distance to point B divided by Carter's speed, which is distance_carter / 4k\n    # distance_carter = 440 - distance_jayden, which is the distance Carter has to travel to meet Jayden.\n    distance_carter = 440 - distance_jayden\n    additional_time_carter = distance_carter / 4   # since we assumed k=1\n\n    # In the same additional_time_carter, Jayden walks back towards A:\n    additional_distance_jayden = additional_time_carter * 7   # since Jayden's speed is 7k, assumed k=1\n\n    # The meeting point from A after Jayden turns back is:\n    meeting_point_from_a = distance_jayden - additional_distance_jayden\n    \n    return meeting_point_from_a\n\nans = solution()"
    ],
    "f42746b63c97449b9bd8019271c9ec21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of baseball bats the shop purchased initially.\n    x = symbols('x')\n    # The initial total cost price for the baseball bats.\n    total_cost = 135 * x\n    # The total revenue when the shop is left with 3 bats.\n    total_revenue = 185 * (x - 3)\n    # The profit is given as $2945.\n    profit = 2945\n\n    # Equation: total_revenue = total_cost + profit\n    equation = Eq(total_revenue, total_cost + profit)\n\n    # Solve for x.\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "9da061efc392431dbe6794c1c302e8e3": [
        "def solution():\n    return 879 + 268\n\nans = solution()"
    ],
    "5b0b415f20824bf48a8768e9f5d5ec26": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the shapes\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n\n    # Equations based on the given information\n    equation1 = Eq(triangle + triangle, square)\n    equation2 = Eq(square + triangle, circle)\n    equation3 = Eq(diamond, circle + square + triangle)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n\n    # How many triangles are equal to diamond?\n    ans = solutions[diamond]/solutions[triangle]\n\n    return ans\n\nans = solution()"
    ],
    "3518cc99e1f044c886a532f40ac85ca4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chair_price = symbols('chair_price')\n    table_price = chair_price + 160\n    total_price = table_price + 5 * chair_price\n\n    equation = Eq(total_price, 328)\n    solutions = solve(equation, chair_price)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "bc4b9a02e5f940dead7da75f6c772177": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the rate of filling the bath be 1 bath/hour for simplification\n    # Let x be the time it takes for the hot tap to fill the bath alone\n    # The cold tap fills the bath at twice the rate, so it would take x/2 hours alone\n    # Together, they fill the bath in 10 minutes (1/6 hours)\n\n    x = symbols('x')\n    equation = Eq(1/x + 2/x, 1/(1/6))\n\n    time_for_cold_tap_alone = solve(equation, x)[0]/2\n\n    return time_for_cold_tap_alone\n\nans = solution()"
    ],
    "0851ade8e456416a88c4d9132c4034de": [
        "def solution():\n    pip_money_p = 60            # Pip's money in pence\n    bud_money_pounds = 1.10     # Bud's money in pounds\n    bud_money_p = bud_money_pounds * 100  # Convert Bud's money to pence\n    total_money_p = pip_money_p + bud_money_p  # Add both sums in pence\n    total_money_pounds = total_money_p / 100   # Convert total money back to pounds\n    return total_money_pounds\n\nans = solution()"
    ],
    "b36b7952db0b4b93a6507a61d91c0d4d": [
        "def solution():\n    # Let x be the mean of the last 6 numbers\n    x = symbols('x')\n\n    # Total sum of the 10 numbers is 10 times the mean\n    total_sum = 10 * 1111\n\n    # The sum of the first 4 numbers is 4 times (mean of the last 6 numbers - 240)\n    sum_first_4 = 4 * (x - 240)\n\n    # The sum of the last 6 numbers is 6 times the mean of the last 6 numbers\n    sum_last_6 = 6 * x\n\n    # The total sum is the sum of the first 4 and last 6 numbers\n    equation = Eq(sum_first_4 + sum_last_6, total_sum)\n\n    # Solve for x\n    mean_last_6 = solve(equation, x)\n\n    return mean_last_6[0]\n\nans = solution()"
    ],
    "6cd294ca2ca74856bd3764d49417e29b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    # If Rachel gives Alice 10 pieces of candy, they have the same number of candy.\n    equation1 = Eq(rachel - 10, alice + 10)\n\n    # If Alice gives Rachel 10 pieces of candy, \n    # Rachel will have 4 more than 3 times that of candy Alice has.\n    equation2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    # Calculate the total number of candies they had originally.\n    total_candies = solutions[rachel] + solutions[alice]\n\n    return total_candies\n\nans = solution()"
    ],
    "779ed1e319ae4389b632ed4de525a437": [
        "def solution():\n    for P in range(1, 10):\n        for I in range(10):\n            if P != I:\n                IS = int(f\"{I}{P}\")\n                PI = int(f\"{P}{I}\")\n                if IS * 4 == PI:\n                    return PI\n    return None\n\nans = solution()"
    ],
    "0f0e737c506a401d8cff81ef9c2365a6": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.88\n    years = 8\n\n    final_value = initial_value * (depreciation_rate ** years)\n    ans = round(final_value, 1)\n\n    return ans\n\nans = solution()"
    ],
    "de8e499d6ea74617b2a986394b5a5443": [
        "def solution():\n    lori_speed = 2\n    jocye_to_lori_ratio = 3 / 2\n    jocye_speed = lori_speed * jocye_to_lori_ratio\n    time_in_seconds = 10\n\n    distance_jocye_runs = jocye_speed * time_in_seconds\n\n    return distance_jocye_runs\n\nans = solution()"
    ],
    "e7ebfcda9f0740958ddcaf89fb51bd23": [
        "def solution():\n    ans = 727 + 482\n    return ans\n\nans = solution()"
    ],
    "1f8c8ba64a594dd29927d99fdf51836d": [
        "def solution():\n    # Jack's speed in the first segment of the race (in meters per second)\n    speed_first_segment = 7\n    \n    # Jack's speed in the second segment of the race (in meters per second)\n    speed_second_segment = 5\n    \n    # Jack's speed in the final sprint stage of the race (in meters per second)\n    speed_sprint_stage = 8\n\n    # Distance covered in the first segment of the race (in meters)\n    distance_first_segment = 280\n    \n    # Distance covered in the second segment of the race (in meters)\n    distance_second_segment = 400\n    \n    # Distance covered in the final sprint stage of the race (in meters)\n    # Total distance is 800 meters, so we subtract the first two segments distances to find the sprint stage distance\n    distance_sprint_stage = 800 - distance_first_segment - distance_second_segment\n\n    # Time (in seconds) Jack spends on each segment of the race\n    time_first_segment = distance_first_segment / speed_first_segment\n    time_second_segment = distance_second_segment / speed_second_segment\n    time_sprint_stage = distance_sprint_stage / speed_sprint_stage\n\n    # Total time (in seconds) Jack spends on the entire race\n    total_time = time_first_segment + time_second_segment + time_sprint_stage\n\n    return total_time\n\nans = solution()"
    ],
    "399c54f13ae4483e856b4165e9f0062f": [
        "def solution():\n    probability_A_20 = 0.6\n    probability_A_25_given_20 = 0.3\n    \n    # To find the probability of it living over 25 years old given that it is already 20,\n    # we use conditional probability. Assuming independence, we have:\n    # P(A_25 | A_20) = P(A_25) / P(A_20)\n    # The question already provides P(A_25 | A_20) which is the probability of living over 25\n    # given that it is already 20, so we only need to return this value as the answer.\n\n    return probability_A_25_given_20\n\nans = solution()"
    ],
    "270f382989f44eca81a1f3f8761a46cb": [
        "def solution():\n    # distance Don walks\n    distance_don = 360\n    # distance Danny walks\n    distance_danny = 780 - distance_don\n    # Don's speed\n    speed_don = 60\n    \n    # Since they start at the same time and meet at the same time, their travel times are the same\n    # Calculate travel time for Don\n    time = distance_don / speed_don\n    \n    # Calculate Danny's speed\n    speed_danny = distance_danny / time\n    \n    return speed_danny\n\nans = solution()"
    ],
    "c2a559c3b6124e8a9ad447bce30b9d43": [
        "def solution():\n    from math import comb\n    # There are 5 teams, and each team plays every other team once.\n    # This is a combination problem where we're choosing 2 teams to play from 5.\n    # This is because a game involves 2 teams playing each other.\n    num_teams = 5\n    games_played = comb(num_teams, 2)\n    return games_played\n\nans = solution()"
    ],
    "1302114e84374d8f8d8fde77c6f270af": [
        "def solution():\n    digits = 792\n    total_pages = 0\n    current_length = 1\n    \n    while digits > 0:\n        pages_with_current_length = 9 * 10**(current_length - 1) * current_length\n        if digits > pages_with_current_length:\n            digits -= pages_with_current_length\n            total_pages += 9 * 10**(current_length - 1)\n        else:\n            total_pages += digits // current_length\n            break\n        current_length += 1\n\n    return total_pages\n\nans = solution()"
    ],
    "2266bba4c5654df6ac5b7df6d9d4e424": [
        "def solution():\n    total_rope_skipping = 40\n    total_long_jump = 31\n    both_events = 21\n\n    only_one_event = total_rope_skipping + total_long_jump - (2 * both_events)\n\n    return only_one_event\n\nans = solution()"
    ],
    "1ea732c5a49c4c82bed4097a4a8a3cc3": [
        "def solution():\n    # Convert all weights to grams\n    flour = 1000 + 500\n    sugar = 1000 + 200\n    butter = 900\n\n    # Calculate the total mixture in grams\n    total_mixture = flour + sugar + butter\n\n    # Divide the total mixture into 8 cake tins\n    mixture_per_tin = total_mixture / 8\n\n    return mixture_per_tin\n\nans = solution()"
    ],
    "9af3526725c54d168b001b25839f37fd": [
        "def solution():\n    ans = sum(j/i for i in range(2, 11) for j in range(1, i))\n    return ans\n\nans = solution()"
    ],
    "e7c5db2d941e4d1f9962ca19c545eb0e": [
        "def solution():\n    cross_multiply = 20 * 27\n    ans = cross_multiply / 30\n    return ans\n\nans = solution()"
    ],
    "42bf42bdc05245e899b8ef7be48f6759": [
        "def solution():\n    # A and B can stand in 2 positions: far right or far left\n    positions_for_AB = 2  # Because AB or BA\n\n    # Once A and B are placed, C and D can only be arranged in one way, as CD or DC\n    positions_for_CD = 2  # CD or DC\n\n    # Calculate total ways to line up for C and D for each AB position\n    total_ways = positions_for_AB * positions_for_CD\n\n    return total_ways\n\nans = solution()"
    ],
    "bed68fc453f94368b47e0f9de6b2c0bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(51 - (15 - 2*x), 11*x)\n    solutions = solve(equation, x)\n    return solutions[0]\n\nans = solution()"
    ],
    "57bb5b4044d043d7ab2ed365ec7917fa": [
        "def solution():\n    from itertools import permutations\n\n    digits = [1, 2, 3]\n    two_digit_permutations = permutations(digits, 2)\n    unique_numbers = set()\n\n    for perm in two_digit_permutations:\n        num = int(''.join(map(str, perm)))\n        unique_numbers.add(num)\n\n    return len(unique_numbers)\n\nans = solution()"
    ],
    "1a41fe933c714f5dbf0d2b6b1a44c69f": [
        "def solution():\n    for num in range(99, 9, -1):\n        if num % 7 == 5 and num % 13 == 11:\n            return num\n\nans = solution()"
    ],
    "cb99f14cb28547ce8a12013d9b435b2b": [
        "def solution():\n    # Janice must take out 3 red marbles and may take out only 3 marbles, one of each of the other colors.\n    # To ensure she gets at least 4 marbles of the same color, she must take out 3 more marbles (3 previous + 3)\n    # But these 3 could again be one of each color.\n    # So she must take one more marble to ensure she has 4 of the same color.\n    # That's 3 (worst case for red) + 3 (possible situation) + 1 (to ensure the fourth marble is the same color)\n    ans = 3 + 3 + 1\n    return ans\n\nans = solution()"
    ],
    "c781c988a20442c8b61fad38f74231ea": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['4', '5', '7', '9']\n    even_digits = ['4', '0', '2', '6', '8']  # Since the number should be even\n    smallest_even = float('inf')\n\n    for perm in permutations(digits):\n        if perm[-1] in even_digits:  # The last digit of an even number must be even\n            num = int(''.join(perm))\n            smallest_even = min(smallest_even, num)\n\n    return smallest_even\n\nans = solution()"
    ],
    "514cdf8bac23435c8c06bbdf81e64567": [
        "def solution():\n    # Number of workers is inversely proportional to the number of days to build the wall\n    # If 3 workers take 3 days, then 1 worker will take 3 times as many days\n    days_for_one_worker = 3 * 3\n    return days_for_one_worker\n\nans = solution()"
    ],
    "bc2eaa05c2644d01acc25bd3b154dd7d": [
        "def solution():\n    total_pupils = 39\n    rows = 3\n    pupils_per_row = total_pupils // rows\n    return pupils_per_row\n\nans = solution()"
    ],
    "307ab345fabd4b8aaff4b7d5917794fd": [
        "def solution():\n    for x in range(1, 10):  # x cannot be 0 as it is the first digit\n        for y in range(10):  # y can be 0-9\n            A = 10 * x + y\n            B = 20 * x + y\n            if B == 6 * A + 25:\n                return A  # Return A if the condition is met\n\nans = solution()"
    ],
    "41c7afc767ed40daaa39d2def9f0bda4": [
        "def solution():\n    unlocked_lockers = 0\n    for i in range(1, 101):\n        if i % 3 == 0:\n            # Locker is locked if divisible by 3. Then check for divisibility by 5.\n            if i % 5 == 0:\n                # If it's also divisible by 5, the locker's state is toggled, so it remains unlocked.\n                unlocked_lockers += 1\n        else:\n            # If it's not divisible by 3, it remains unlocked.\n            unlocked_lockers += 1\n    return unlocked_lockers\n\nans = solution()"
    ],
    "c27708a444de416daece772484d27182": [
        "def solution():\n    from itertools import permutations\n\n    count = 0\n\n    for perm in permutations('ABCDEFG'):\n        if 'DE' not in ''.join(perm) and 'ED' not in ''.join(perm):\n            if 'FG' in ''.join(perm) or 'GF' in ''.join(perm):\n                pos_a = perm.index('A')\n                pos_b = perm.index('B')\n                pos_c = perm.index('C')\n                if pos_b < pos_a < pos_c or pos_c < pos_a < pos_b:\n                    count += 1\n\n    return count\n\nans = solution()"
    ],
    "f3cda231135d443db7dbdf86f98d01dd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols used in the equations\n    a, b = symbols('a b')\n\n    # Define the two equations given in the problem\n    equation1 = Eq(a + 12, 16)\n    equation2 = Eq(2 * a + b, 18)\n\n    # Solve the system of equations for variables a and b\n    solutions = solve((equation1, equation2), (a, b))\n\n    # Extract the value of b from the solutions\n    return solutions[b]\n\nans = solution()"
    ],
    "b6d01c501c18487f9e4f3f79d7526cce": [
        "def solution():\n    nicolas_start = 1\n    yiding_start = 1\n    \n    nicolas_end = 4\n    yiding_end = 3\n    \n    nicolas_total_stairs = 16 - nicolas_start\n    ratio = (yiding_end - yiding_start) / (nicolas_end - nicolas_start)\n    \n    yiding_at_nicolas_16 = 1 + ratio * nicolas_total_stairs\n    \n    return int(yiding_at_nicolas_16)\n\nans = solution()"
    ],
    "4a96b08695f1451ab05c1c722f12a959": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cake_cost, borrowed = symbols('cake_cost borrowed')\n    \n    # When she buys 10 cakes \n    equation1 = Eq(10 * cake_cost - borrowed, -11)  # Since she borrows 11 dollars\n    \n    # When she buys 13 cakes\n    equation2 = Eq(13 * cake_cost - borrowed, -26)  # Since she borrows 26 dollars\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (cake_cost, borrowed))\n\n    return solutions[cake_cost]\n\nans = solution()"
    ],
    "c9848b7f2bdb4b02b6a8315b987132c2": [
        "def solution():\n    total_mass_boys = 4 * 50\n    total_mass_girls = 6 * 40\n    total_children = 4 + 6\n    total_mass = total_mass_boys + total_mass_girls\n    average_mass = total_mass / total_children\n    return average_mass\n\nans = solution()"
    ],
    "c98d52b67705466d8ba4e69027df1a56": [
        "def solution():\n    # Define the operation as a lambda function for simplification\n    operations = [\n        lambda: 285 + 15 / 5 - 2,           # Original\n        lambda: (285 + 15) / 5 - 2,         # (285 + 15) / 5 - 2\n        lambda: 285 + (15 / 5) - 2,         # 285 + (15 / 5) - 2, same as original\n        lambda: 285 + 15 / (5 - 2),         # 285 + 15 / (5 - 2)\n        lambda: (285 + 15) / (5 - 2),       # (285 + 15) / (5 - 2)\n        lambda: (285 + 15 / 5) - 2,         # (285 + 15 / 5) - 2, same as original\n        lambda: 285 + (15 / (5 - 2)),       # 285 + (15 / (5 - 2)), same as 285 + 15 / (5 - 2)\n        lambda: ((285 + 15) / 5) - 2,       # ((285 + 15) / 5) - 2, same as (285 + 15) / 5 - 2\n        lambda: 285 + 15 / 5 - (2),         # 285 + 15 / 5 - 2, same as original\n        lambda: 285 + ((15 / 5) - 2),       # 285 + ((15 / 5) - 2), same as 285 + (15 / 5) - 2\n        lambda: (285 + (15 / 5)) - 2,       # 285 + (15 / 5) - 2, same as original\n        lambda: 285 + (15 / (5 - 2)),       # 285 + (15 / (5 - 2)), same as original\n        lambda: 285 + 15 / (5 - (2)),       # 285 + 15 / (5 - 2), same as original\n        lambda: (285 + (15 / 5)) - (2),     # (285 + (15 / 5)) - 2, same as original\n        lambda: ((285 + 15) / (5 - 2)),     # ((285 + 15) / (5 - 2)), same as (285 + 15) / (5 - 2)\n        lambda: ((285 + 15) / 5) - (2),     # ((285 + 15) / 5) - 2, same as original\n    ]\n\n    # Calculate results and get unique values\n    results = set(f() for f in operations)\n    \n    # Return count of unique results\n    return len(results)\n\nans = solution()"
    ],
    "cc9a4ae09bbb496aaa4271ae07c4779f": [
        "def solution():\n    divisor = 12\n    quotient = 11\n    remainder = 5\n\n    number = divisor * quotient + remainder\n\n    return number\n\nans = solution()"
    ],
    "418d9f95c94b4bab93c8e3700c845d5e": [
        "def solution():\n    ans = (1 / (2 - 3)) - (4 / (5 - 6)) - (7 / (8 - 9))\n    return ans\n\nans = solution()"
    ],
    "abaab11ba949453489f49e64542f6792": [
        "def solution():\n    number1 = 4.6\n    number2 = 13.8\n    halfway_number = (number1 + number2) / 2\n    return halfway_number\n\nans = solution()"
    ],
    "938ae204da174d739962f4162d4b20e8": [
        "def solution():\n    return 4336 // 8\n\nans = solution()"
    ],
    "f1c6632cac7d493a881d8e10eab95ae1": [
        "def solution():\n    total_matches = 5\n    mean_score = 40\n    total_score = mean_score * total_matches\n    \n    known_scores = [37, 53, 29, 41]\n    known_score_sum = sum(known_scores)\n    \n    x = total_score - known_score_sum\n    return x\n\nans = solution()"
    ],
    "52dedf9ce05e4ea3a7d65ae01e1338d3": [
        "def solution():\n    count = 0\n    for i in range(1, 10):  # The first digit (thousands) must be from 1 to 9\n        for j in range(0, 10):  # The second digit (hundreds) can be from 0 to 9\n            # The third digit (tens) must be the same as second, and the fourth (ones) as first for palindrome\n            count += 1  # Increment for each palindrome found\n    return count\n\nans = solution()"
    ],
    "06ccb550f9c94b6e88edf78ee248277b": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10  # Numbers from 100 to 999\n    no_sevens = 8 * 9 * 9  # Choices for hundred, ten and unit place without the digit 7\n    at_least_two_sevens = total_three_digit_numbers - no_sevens\n\n    return at_least_two_sevens\n\nans = solution()"
    ],
    "e00d2baa889045a6810756a5f6ded27b": [
        "from math import factorial\n\ndef solution():\n    word = \"CHEESE\"\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n\n    total_permutations = factorial(len(word))\n    for count in letter_counts.values():\n        total_permutations //= factorial(count)\n        \n    return total_permutations\n\nans = solution()"
    ],
    "7c5a2dda1a89437a812dee6e6d3c8006": [
        "def solution():\n    for i in range(10000, 100000):\n        original_number = i * 10 + 9\n        new_number = int(str(9) + str(i))\n        if new_number == 4 * original_number:\n            return original_number\n\nans = solution()"
    ],
    "8f0a469087a3468e9dd6d097faa4382a": [
        "def solution():\n    quotient = 12\n    remainder = 3\n\n    # The smallest possible divisor is 1\n    divisor = 1\n\n    # The minimum dividend is (divisor * quotient) + remainder\n    dividend = (divisor * quotient) + remainder\n    return dividend\n\nans = solution()"
    ],
    "85287eb8abe94dc69ff3f32348aa3828": [
        "def solution():\n    alice_work_rate = 1 / 40\n    bob_work_rate = 1 / 60\n    total_days = 27\n\n    # x represents the number of days Alice takes off\n    # (total_days - x) is the number of days Alice actually works\n    # total_days is the number of days Bob works, since he does not take any days off\n    # Equation: (total_days - x) * alice_work_rate + total_days * bob_work_rate = 1 (the whole job)\n    x = symbols('x')\n    equation = Eq((total_days - x) * alice_work_rate + total_days * bob_work_rate, 1)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "9e16012db73740a0b2623e56b90ddb02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    abigail, jonathan = symbols('abigail jonathan')\n    \n    equation1 = Eq(abigail, jonathan + 6)\n    equation2 = Eq(abigail - 6, 2 * (jonathan - 6))\n    \n    solutions = solve((equation1, equation2), (abigail, jonathan))\n    \n    return solutions[jonathan]\n\nans = solution()"
    ],
    "1079de7a7656466a8e5c71823b1f57b3": [
        "def solution():\n    a = 4\n    b = 3\n    c = 4\n    d = 3\n    otimes_ab = a * b + a - b\n    otimes_cd = c * d + c - d\n    ans = otimes_ab - otimes_cd\n    return ans\n\nans = solution()"
    ],
    "219697dc832b445ca3d9d8288e536ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n    equation1 = Eq(pip + bud, 10)\n    equation2 = Eq(pip, bud + 2)\n\n    solutions = solve((equation1, equation2), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "707f06cacc044e1d85aef697dea2c32f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let c be the original number of cows and g be the original number of goats.\n    c, g = symbols('c g')\n\n    # Set up the equations based on the problem statement\n    # 65% of the animals were cows, so 35% were goats.\n    original_goats_eq = Eq(g, 0.35 * (c + g))\n    \n    # When 240 more animals are added, cows make up 85% of the total.\n    new_cows_eq = Eq(0.85 * (c + g + 240), c + 240)\n    \n    # The number of goats has doubled after adding 240 animals.\n    new_goats_eq = Eq(2 * g, g + 240 - (c + 240 - c))\n\n    # Solve the system of equations\n    solutions = solve((original_goats_eq, new_cows_eq, new_goats_eq), (c, g))\n\n    return solutions[g]\n\nans = solution()"
    ],
    "f67eff9f23014ecb8eded92248463a7b": [
        "def solution():\n    from itertools import permutations\n\n    for perm in permutations(range(10), 4):\n        A, B, C, D = perm\n        # Since A and C can't be zero as they are the first digit of a three-digit number\n        if A == 0 or C == 0:\n            continue\n        number1 = A * 101 + B * 10\n        number2 = C * 101 + D * 10\n        if number1 + number2 == 726:\n            return A + B + C + D\n            \nans = solution()"
    ],
    "11e8ba58465f4c138c8725a020c95ec7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n\n    # Equations based on the given problem\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    # Cost of 5 bananas\n    cost_5_bananas = 5 * solutions[banana]\n\n    return cost_5_bananas\n\nans = solution()"
    ],
    "66dcd5cada06407ba1e9153afc26043f": [
        "def solution():\n    initial_amount = 200\n    final_amount = 250\n    increase = final_amount - initial_amount\n    percentage_increase = (increase / initial_amount) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "b9373bcf833d4821b3f8fcb64de110d4": [
        "def solution():\n    for number in range(30, 41):\n        if number % 3 == 0 and number % 4 == 0:\n            return number\n\nans = solution()"
    ],
    "a4663920546242aeb50c5eaeaf379262": [
        "def solution():\n    ans = (36 * 37 * 38 * 39 * 40 * 41) % 7\n    return ans\n\nans = solution()"
    ],
    "caad5339582b4857888fcff1cca8c78e": [
        "def solution():\n    ans = 126 / 2\n    return ans\n\nans = solution()"
    ],
    "ccbbcf445df24e4ba0699d6f1e37b90a": [
        "def solution():\n    ans = (1000 + 2000 + 2100) / 17\n    return ans\n\nans = solution()"
    ],
    "070c04e9775b4292869eedb678f57b8f": [
        "def solution():\n    apples_per_box = 5\n    number_of_boxes = 6\n    total_apples = apples_per_box * number_of_boxes\n    return total_apples\n\nans = solution()"
    ],
    "1848190c71c645c0997874fe8ca76815": [
        "def solution():\n    # Setup the system of equations based on the given information.\n    from sympy import symbols, Eq, solve\n\n    # Let d be the deadline in days, and p be the total number of pages in the book.\n    d, p = symbols('d p')\n\n    # Equation 1: If Vanessa reads 30 pages a day, she will finish in (d + 2) days.\n    eq1 = Eq(p, 30 * (d + 2))\n\n    # Equation 2: If Vanessa reads 39 pages a day, she will finish in (d - 4) days.\n    eq2 = Eq(p, 39 * (d - 4))\n\n    # Solve the system of equations for d and p.\n    solutions = solve((eq1, eq2), (d, p))\n\n    # The deadline in days and the total number of pages in the book.\n    deadline_days = solutions[d]\n    total_pages = solutions[p]\n\n    return deadline_days, total_pages\n\nans = solution()"
    ],
    "5262af77457a47089064b6dc77839b82": [
        "def solution():\n    sequence = '2020202020220202020'  # One cycle of the repeating pattern\n    cycle_length = len(sequence)      # The length of one cycle\n    count_2_in_cycle = sequence.count('2')  # Count of '2's in one cycle\n\n    # The number of complete cycles in 535 digits\n    complete_cycles = 535 // cycle_length\n    \n    # The remaining digits after the last complete cycle\n    remaining_digits = 535 % cycle_length\n\n    # Count of '2's in the remaining digits\n    count_2_in_remaining = sequence[:remaining_digits].count('2')\n    \n    # Total count of '2's\n    total_count_2 = (complete_cycles * count_2_in_cycle) + count_2_in_remaining\n    \n    return total_count_2\n\nans = solution()"
    ],
    "bf206205208a4e6aaa3f21b6175f11a0": [
        "def solution():\n    return 3102 // 6\n\nans = solution()"
    ],
    "ff8eaf85f9494a4bb58b4c2de7f7a467": [
        "def solution():\n    morning_cookies = 85\n    afternoon_cookies = 135\n    cookies_given_away = 55\n\n    cookies_left = (morning_cookies + afternoon_cookies) - cookies_given_away\n\n    return cookies_left\n\nans = solution()"
    ],
    "11fb94abf2634f198729473920061c7d": [
        "def solution():\n    total_passengers = 863\n    men = 354\n    children = 165\n\n    women = total_passengers - men - children\n\n    return women\n\nans = solution()"
    ],
    "b152c6eb52ea4a47bee276fd7fdc5526": [
        "def solution():\n    # given equations\n    # a Δ b = a^2 - b\n    # we can observe the following pattern from given equations:\n    # 4 Δ 1 = 4^2 - 1 = 16 - 1 = 15 + 2 = 17\n    # 5 Δ 4 = 5^2 - 4 = 25 - 4 = 21 + 8 = 29\n    # 8 Δ 16 = 8^2 - 16 = 64 - 16 = 48 + 32 = 80\n    # the pattern is: a Δ b = a^2 - b + (2*b)\n    # now we can calculate 10 Δ 9 using the identified pattern\n\n    a = 10\n    b = 9\n    result = a**2 - b + (2*b)\n    \n    return result\n\nans = solution()"
    ],
    "c3879ebf82934b73a62fb270f35eee17": [
        "def solution():\n    for adults in range(20):\n        children = 19 - adults\n        total = 5 * adults + 3 * children\n        if total == 75:\n            return adults\n\nans = solution()"
    ],
    "277ff5ac1d264964a4d29eb33ba74058": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    belt, dress, shirt = symbols('belt dress shirt')\n    \n    equation1 = Eq(dress, 3 * belt)\n    equation2 = Eq(shirt, 2 * dress)\n    equation3 = Eq(shirt - belt, 155)\n\n    solutions = solve((equation1, equation2, equation3), (belt, dress, shirt))\n\n    difference_dress_shirt = solutions[dress] - solutions[shirt]\n\n    return difference_dress_shirt\n\nans = solution()"
    ],
    "56a6e5f6729f412081b2719e7253346e": [
        "def solution():\n    andy_daily_saving = 7\n    brenda_daily_saving = 6\n    andy_total_saving = 378\n\n    brenda_total_saving = (brenda_daily_saving * andy_total_saving) // andy_daily_saving\n\n    return brenda_total_saving\n\nans = solution()"
    ],
    "d4ec077973ca41e3a9584a6faecfcac3": [
        "def solution():\n    for correct_answers in range(11):\n        incorrect_answers = 10 - correct_answers\n        points = correct_answers * 6 + incorrect_answers * (-2)\n        if points == 44:\n            return correct_answers\n\nans = solution()"
    ],
    "4bdb0a33fd034a4a9f038d5763df3bfc": [
        "def solution():\n    return 52 / (2/3)\n\nans = solution()"
    ],
    "9060af40a1724e5887ca3ecd529e790f": [
        "def solution():\n    original_length = 1\n    original_breadth = 1\n    original_height = 1\n\n    new_length = original_length * 1.10\n    new_breadth = original_breadth * (4/5)\n    new_height = original_height * (11/10)\n\n    original_volume = original_length * original_breadth * original_height\n    new_volume = new_length * new_breadth * new_height\n\n    volume_percentage = (new_volume / original_volume) * 100\n\n    return volume_percentage\n\nans = solution()"
    ],
    "db664e372bde470cad3851d48f1d711a": [
        "def solution():\n    ans = 52836 // 7\n    return ans\n\nans = solution()"
    ],
    "539ace63a9a84f38adf540a759c0f768": [
        "def solution():\n    # Let the original number of fifty-cent coins be f and number of one-dollar coins be o.\n    # Then the original number of coins Owen had is f + o.\n    # From the question, we know that 2/7 of the coins are fifty-cent coins, so we can say that:\n    # f = 2/7 * (f + o) ... (1)\n    \n    # His mother gave him 10 one-dollar coins and 5 dollars worth of fifty-cent coins,\n    # which is equal to 5/0.5 = 10 fifty-cent coins. So now he has:\n    # f + 10 fifty-cent coins and o + 10 one-dollar coins\n    \n    # After his mother gave him the coins, he had twice as many one-dollar coins as fifty-cent coins:\n    # o + 10 = 2 * (f + 10) ... (2)\n    # Now we need to combine equations (1) and (2) to find f and o.\n\n    # Rearrange equation (1):\n    # f = 2/7 * (f + o)\n    # f = 2/7 * f + 2/7 * o\n    # 7f = 2 * f + 2 * o\n    # 5f = 2o\n    # o = (5/2) * f ... (3)\n\n    # Substitute o from (3) into (2):\n    # (5/2) * f + 10 = 2 * (f + 10)\n    # 5/2 * f + 10 = 2f + 20\n    # 5/2 * f - 2f = 20 - 10\n    # (5/2 - 2) * f = 10\n    # (1/2) * f = 10\n    # f = 10 * 2\n    f = 20\n\n    # Use f to find o using equation (3):\n    # o = (5/2) * f\n    o = (5/2) * f\n    \n    # The original number of coins is f + o\n    ans = f + o\n    return int(ans)\n\nans = solution()"
    ],
    "d9a025512c6941b6b97c54521e40115c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let a, b, c be the final number of marbles Anna, Betsy, and Charlene have, respectively.\n    a, b, c = symbols('a b c')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(a + b + c, 168)  # Total number of marbles\n    equation2 = Eq(a/b, 2/5)        # Ratio of Anna's marbles to Betsy's\n    equation3 = Eq(a/c, 2/7)        # Ratio of Anna's marbles to Charlene's\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n\n    # Calculate the initial number of marbles Betsy had\n    betsy_initial = solutions[b] - 15 + 8\n\n    return betsy_initial\n\nans = solution()"
    ],
    "0fc0dda3957d4f01b0dccedf0adc5e89": [
        "from math import comb\n\ndef solution():\n    points = 10\n    # Combination of choosing 3 points out of 10 to form a triangle\n    num_triangles = comb(points, 3)\n    return num_triangles\n\nans = solution()"
    ],
    "c58c5d01acfc430494432756a46333bc": [
        "def solution():\n    sequence = [30, 40, 50] * 3\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "218af0df4ee747b79d4247767d1fee5a": [
        "def solution():\n    from math import factorial\n\n    n = 8\n    r = 3\n    # Calculate the number of ways to award the prizes\n    # This is a permutation since the order of the winners matters\n    num_ways = factorial(n) // factorial(n - r)\n\n    return num_ways\n\nans = solution()"
    ],
    "74c9ac42df4148feacf2613537771942": [
        "def solution():\n    remaining_work_percentage = 100 - 60\n    total_masks = (360 * 100) / remaining_work_percentage\n    return int(total_masks)\n\nans = solution()"
    ],
    "975e68a88e6347caa844fbf5ca68107e": [
        "def solution():\n    # The largest number Noa can solve is when the other four classmates solve the least amount of questions.\n    # We will assign 1 question to the first student, 2 to the second, 3 to the third, and 4 to the fourth,\n    # which sums up to 1 + 2 + 3 + 4 = 10 questions.\n    # The remaining questions can be solved by Noa.\n    remaining_questions = 40 - (1 + 2 + 3 + 4)\n    return remaining_questions\n\nans = solution()"
    ],
    "411faed309f74656b50d4010f9f71511": [
        "def solution():\n    num = 278\n    ans = round(num, -1)\n    return ans\n\nans = solution()"
    ],
    "cf37fa4d8197426aa1fcab8a861e06d2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    first_hour, second_hour = symbols('first_hour second_hour')\n\n    # Total mushrooms gathered in both hours\n    total_mushrooms = Eq(first_hour + second_hour, 40)\n\n    # If 26 more mushrooms were gathered in the first hour, it would equal the second hour\n    equal_gathering = Eq(first_hour + 26, second_hour)\n\n    # Solve the equations\n    solutions = solve((total_mushrooms, equal_gathering), (first_hour, second_hour))\n\n    return solutions[second_hour]\n\nans = solution()"
    ],
    "6adbd55fec9e4553850968c3abf80ddd": [
        "def solution():\n    return 52.8 * 7\n\nans = solution()"
    ],
    "a20ccf64b8a1484aa5b1280c574930fa": [
        "def solution():\n    coldest = -89\n    hottest = 58\n    difference = hottest - coldest\n    return difference\n\nans = solution()"
    ],
    "16943328c1ba4a80883339e370325f73": [
        "def solution():\n    number = 4321\n    ans = round(number, -3)\n    return ans\n\nans = solution()"
    ],
    "2f6aeacb6c0049d8990d1ffd7bffdc5d": [
        "def solution():\n    metres = 9\n    centimetres_per_metre = 100\n    ans = metres * centimetres_per_metre\n    return ans\n\nans = solution()"
    ],
    "c1041fa9a5bf437993ae13aa3e37085f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Scan and Ted's current ages.\n    scan, ted = symbols('scan ted')\n\n    # Create the equations based on the given ratios\n    equation1 = Eq(scan / ted, 1 / 4)\n    equation4_future = Eq((scan + 4) / (ted + 4), 1 / 3)\n\n    # Solve the system of equations for the current ages of Scan and Ted.\n    current_ages = solve((equation1, equation4_future), (scan, ted))\n\n    # Extract Scan and Ted's current ages.\n    scan_age_current = current_ages[scan]\n    ted_age_current = current_ages[ted]\n\n    # Calculate the age ratio 1:9 and find \"y\" years ago.\n    y = symbols('y')\n    equation_age_past = Eq((scan - y) / (ted - y), 1 / 9)\n\n    # Solve the equation for y - the number of years ago when the age ratio was 1:9.\n    years_ago = solve(equation_age_past.subs({scan: scan_age_current, ted: ted_age_current}), y)\n\n    # Since years_ago could be a list with a possible negative value, we filter out the positive value.\n    ans = [y for y in years_ago if y > 0][0]\n\n    return ans\n\nans = solution()"
    ],
    "4fc438b08e484934a9e0729ceb008c74": [
        "def solution():\n    # Jogging time in hours from 6:30 am to 7:30 am is 1 hour\n    jogging_time = 1\n    jogging_speed = 6.5  # speed in miles per hour\n    # Distance covered during jogging\n    jogging_distance = jogging_time * jogging_speed\n\n    # Walking time in hours from 7:30 am to 9:30 am is 2 hours\n    walking_time = 2\n    walking_speed = 4.5  # speed in miles per hour\n    # Distance covered during walking\n    walking_distance = walking_time * walking_speed\n\n    # Total distance covered\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "ec690aff1f1e4750a9a76a1e9427e744": [
        "def solution():\n    ans = 200 * 30 * 60\n    return ans\n\nans = solution()"
    ],
    "1e39295f7be440f19c866b2c67eb6233": [
        "def solution():\n    scale_ratio = 2 / 300  # Convert 3 meters to cm\n    real_tree_height_cm = 12 * 100  # Convert meters to cm\n    model_tree_height = real_tree_height_cm * scale_ratio\n    return model_tree_height\n\nans = solution()"
    ],
    "ca0885fd429b47b29cbca128a13934e5": [
        "def solution():\n    height_climbed = 0\n    day = 0\n    while height_climbed < 45:\n        day += 1\n        height_climbed += 10  # Snail climbs 10 meters every day\n        if height_climbed >= 45:  # If the snail reaches or exceeds the top, break the loop\n            break\n        height_climbed -= day  # Snail slides down \"day\" meters every night\n    return day\n\nans = solution()"
    ],
    "f4da090f08704285bf99c48d28b8f30e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    foldable, non_foldable = symbols('foldable non_foldable')\n\n    total_bikes = 476\n    bikes_sold = 208\n\n    equation1 = Eq(foldable + non_foldable, total_bikes)\n    equation2 = Eq(non_foldable - (5/9)*non_foldable + foldable - (4/7)*foldable, bikes_sold)\n\n    solutions = solve((equation1, equation2), (foldable, non_foldable))\n\n    foldable_sold = solutions[foldable] - (4/7)*solutions[foldable]\n\n    return foldable_sold\n\nans = solution()"
    ],
    "ef539f6c79ef45e6a787351ed4759e6b": [
        "def solution():\n    # m = number of mollies\n    # g = number of goldfish\n    # u = number of guppies\n    # From the problem, we have the following equations:\n    # m = 2 * g\n    # g = 2 * u\n    # m = 276\n\n    m = 276\n    g = m // 2\n    u = g // 2\n\n    return m - u\n\nans = solution()"
    ],
    "db83e40568bc4ed1abb293d337e3b898": [
        "def solution():\n    students = 20\n    min_candies_per_student = 3 - 1  # At least 3 candies means 2 candies per student isn't enough\n    min_candies = students * min_candies_per_student + 1  # Pigeonhole principle\n\n    return min_candies\n\nans = solution()"
    ],
    "0b6455df8e764e0297e3e34a90919102": [
        "def solution():\n    return 5 * 34\n\nans = solution()"
    ],
    "0f326466fded430f8bb9c80424cf6fb4": [
        "def solution():\n    from sympy import divisors\n\n    return sum(divisors(20))\n\nans = solution()"
    ],
    "98bea305d2724084a1300cba10c4995b": [
        "def solution():\n    total_questions = 20\n    correct_marks = 8\n    wrong_deduction = -4\n    total_score = 100\n    \n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        score = (correct * correct_marks) + (wrong * wrong_deduction)\n        if score == total_score:\n            return correct\n\nans = solution()"
    ],
    "dfd006a02012410fbbb4bcbd7a08eeda": [
        "def solution():\n    remaining_flour = 6000\n    used_flour_fraction = 5/8\n    original_flour = remaining_flour / (1 - used_flour_fraction)\n    return original_flour\n\nans = solution()"
    ],
    "0f98369691cc4fa8828f869e61430e64": [
        "def solution():\n    return 0.60 * 765\n\nans = solution()"
    ],
    "b7f55925dab84b38804fc61f246c5093": [
        "def solution():\n    # Take 10 red and 10 black socks to ensure no white are taken yet\n    red_socks = 10\n    black_socks = 10\n\n    # Now take one more which will certainly be a white because we already took all red and black\n    white_socks = 1\n\n    # Total socks taken to guarantee a pair of white socks\n    # We take all red and all black socks out and one white sock to guarantee the next is a white pair\n    total_socks = red_socks + black_socks + white_socks\n\n    return total_socks\n\nans = solution()"
    ],
    "318cb203ec2b4e69af03513f0f5f7db2": [
        "def solution():\n    return 1741 - 968\n\nans = solution()"
    ],
    "61b231b8c15b475c917f5d10487169ba": [
        "def solution():\n    total_flowers = 30\n    flowers_between_posts = 3\n\n    # Since there are 3 flowers between every 2 lamp posts\n    # The total number of intervals between lamp posts is total_flowers / flowers_between_posts\n    number_of_intervals = total_flowers / flowers_between_posts\n\n    # An additional interval needs to be considered because there is one more lamp post than there are intervals\n    number_of_lamp_posts = number_of_intervals + 1\n\n    # The distance between every 2 lamp posts is the road length divided by number of intervals\n    road_length = 50\n    distance_between_posts = road_length / number_of_intervals\n\n    return distance_between_posts\n\nans = solution()"
    ],
    "a1e43bc939ea4c6fb34a34753a72751b": [
        "def solution():\n    ans = sum(range(1, 20, 2))\n    return ans\n\nans = solution()"
    ],
    "4341f23ecb084909afaca690c7016fd3": [
        "def solution():\n    return 3 * 126\n\nans = solution()"
    ],
    "54d9517c5a7c4afaa953d1464774e445": [
        "def solution():\n    books_on_left = 6\n    position_from_right = 14\n\n    total_books = books_on_left + position_from_right\n\n    return total_books\n\nans = solution()"
    ],
    "13404c9d8a0144d0a8d6ce4d8a80834c": [
        "def solution():\n    temperature_difference = 17\n    initial_temperature = 8\n    final_temperature = initial_temperature - temperature_difference\n\n    return final_temperature\n\nans = solution()"
    ],
    "de8f312c348043bca42e8c7aa90f7a69": [
        "def solution():\n    road_length = 150\n    distance_between_trees = 10\n\n    # Calculate the number of trees planted, including the trees at both ends\n    num_trees = (road_length // distance_between_trees) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "a4bab2ddc00f4d6db863991f6cc9b894": [
        "def solution():\n    return 48 * (5/4)\n\nans = solution()"
    ],
    "1f2fa42e73c245739af9883dfb728d2f": [
        "def solution():\n    first_number = 160000\n    ratio = 1 / 4\n    nth_number = first_number * (ratio ** (5 - 1))\n    return nth_number\n\nans = solution()"
    ],
    "f712d845b49943c78aeaa70968af1f15": [
        "def solution():\n    ans = (13.8 * 10**7) * (5.4 * 10**(-12))\n    return ans\n\nans = solution()"
    ],
    "7c68f55d51744cc39eaac03dbd0615e5": [
        "def solution():\n    total_sweets = 30\n    sweets_for_sister = 6\n    friends = 6\n\n    sweets_per_friend = (total_sweets - sweets_for_sister) // friends\n\n    return sweets_per_friend\n\nans = solution()"
    ],
    "7cd63e4421874b14aac53b57251e8230": [
        "def solution():\n    # Since there are 19 apples and 5 children, with each getting a unique number of apples\n    # and at least one apple, we start by giving 1 apple to the first four children.\n    # This leaves us with 19 - 4 = 15 apples to distribute to 5 children uniquely.\n    \n    # The distribution will now look like 1, 2, 3, 4, and the rest to the last child\n    # At this stage, to give the maximum to the last child, we would use the minimum for the first four\n    # The maximum for the last child would then be the total left after distributing the minimum possible to others\n    \n    # Minimum distribution to the first four children 1 + 2 + 3 + 4 = 10\n    # Maximum to the last one is then:\n    max_apples = 19 - 10\n    \n    return max_apples\n\nans = solution()"
    ],
    "1fd121a0e4224cf5a769dd8b70d3cb9b": [
        "def solution():\n    lawn_side = 12\n    edge_distance = 1.5\n    bush_distance = 3\n\n    effective_side_length = lawn_side - 2 * edge_distance\n    number_of_bushes = effective_side_length // bush_distance\n\n    # Calculating number of bushes for each side and then total\n    total_bushes = 4 * number_of_bushes\n\n    return int(total_bushes)\n\nans = solution()"
    ],
    "f1f0d797b7874b22a4002f5247bb2471": [
        "def solution():\n    speed_fast_van = 132\n    speed_slow_van = 78\n    time = 8  # hours\n\n    distance_apart = (speed_fast_van + speed_slow_van) * time\n\n    return distance_apart\n\nans = solution()"
    ],
    "75b8e7d0476046b699f4dc0ad1ac6abd": [
        "def solution():\n    result = (2 - 1.8) / (1/2) * (5/2)\n    return result\n\nans = solution()"
    ],
    "537950035403436781a4ec53ef771d8c": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq((2/3)*(x-1) - (1/4)*(3*x+1), 1/6)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "696c23fc06e14b05a2c046255119fd33": [
        "def solution():\n    remaining_work = 360\n    completed_work_percentage = 60\n    total_work = (remaining_work * 100) / (100 - completed_work_percentage)\n    return int(total_work)\n\nans = solution()"
    ],
    "19d110feae03410cb8fbd2510aacfe2a": [
        "def solution():\n    # Work done by P in one day\n    work_p = 1/12\n    # Hours P works in one day\n    hours_p = 8\n\n    # Work done by Q in one day\n    work_q = 1/8\n    # Hours Q works in one day\n    hours_q = 10\n\n    # Daily work rate of P working 8 hours\n    daily_work_p = work_p * (hours_p / 8)\n    # Daily work rate of Q working 8 hours (adjusting the rate as Q works 10 hours a day)\n    daily_work_q = work_q * (8 / hours_q)\n\n    # Combined daily work rate of P and Q working 8 hours each\n    combined_daily_work = daily_work_p + daily_work_q\n\n    # Time required to complete the job when P and Q work together\n    time_required = 1 / combined_daily_work\n\n    return time_required\n\nans = solution()"
    ],
    "a17df35105e1488fb14099c56b437550": [
        "def solution():\n    numbers = [12, 16, 20, 24, 28]\n    average = sum(numbers) / len(numbers)\n    return average\n\nans = solution()"
    ],
    "aa00ee47d18541ea8553ef86e27f0748": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for Pinkie's original score\n    original_score = symbols('original_score')\n\n    # Write the equation according to the problem description\n    equation = Eq(original_score - 30, (original_score / 2) + 10)\n\n    # Solve the equation\n    score_solution = solve(equation, original_score)\n\n    # Return the solution\n    return score_solution[0]\n\nans = solution()"
    ],
    "a6f93d90cbad41798ee50c1162ac774e": [
        "def solution():\n    # We are interested in the number of divisors of 78 that are even.\n    num_apples = 78\n    even_divisors = 0\n    \n    # Iterate through potential divisors and check if they are even and divide 78 with no remainder\n    for potential_divisor in range(1, num_apples + 1):\n        if (num_apples % potential_divisor == 0) and (potential_divisor % 2 == 0):\n            even_divisors += 1\n\n    return even_divisors\n\nans = solution()"
    ],
    "68df60021a694c14829fcbe8cf5ae9a5": [
        "def solution():\n    # Given relations:\n    # 9 rabbits -> 3 goats\n    # 2 goats -> 4 cows\n    # We need to find rabbits -> 2 cows\n    \n    # First, we find the equivalent of 1 goat in terms of rabbits.\n    rabbits_per_goat = 9 / 3  # because 9 rabbits -> 3 goats\n    \n    # Now, we find the number of goats equivalent to 2 cows.\n    goats_per_cow = 2 / 4    # because 2 goats -> 4 cows\n    goats_for_2_cows = goats_per_cow * 2\n    \n    # Now, find the number of rabbits equivalent to the goats for 2 cows.\n    rabbits_for_2_cows = rabbits_per_goat * goats_for_2_cows\n    \n    return rabbits_for_2_cows\n\nans = solution()"
    ],
    "c49938cd48584dd7af3a734aee5be731": [
        "def solution():\n    total_questions = 50\n    score_per_correct = 4\n    penalty_per_wrong = 1\n    non_attempts = 3\n    total_score = 168\n\n    for correct in range(total_questions - non_attempts + 1):\n        wrong = total_questions - non_attempts - correct\n        if correct * score_per_correct - wrong * penalty_per_wrong == total_score:\n            return correct\n\nans = solution()"
    ],
    "e07c7a8fcd134268ba390e93dbde6058": [
        "def solution():\n    first_term = 30\n    difference = 4\n    num_rows = 10\n    \n    # Using the sum formula for an arithmetic series: n/2 * (2a + (n-1)d)\n    total_seats = num_rows / 2 * (2 * first_term + (num_rows - 1) * difference)\n\n    return int(total_seats)\n\nans = solution()"
    ],
    "36b7c8ca803942679b913576ffc1164b": [
        "def solution():\n    girls_percentage = 100 - 40\n    girls = 72\n    \n    total_children = (girls * 100) // girls_percentage\n    \n    return total_children\n\nans = solution()"
    ],
    "4657d3f1b0d749a7899c0ce49a8d740d": [
        "def solution():\n    def custom_operation(a, b):\n        return a*b - 5*a + 8\n\n    result = custom_operation(10, 9)\n    result = custom_operation(result, 8)\n    result = custom_operation(result, 7)\n    result = custom_operation(result, 6)\n    result = custom_operation(result, 5)\n    result = custom_operation(result, 4)\n\n    return result\n\nans = solution()"
    ],
    "06be771ddff04930b7a9da426c7d1667": [
        "def solution():\n    initial_strawberries = 96\n    strawberries_eaten = 73\n    strawberries_bought = 52\n\n    remaining_strawberries = initial_strawberries - strawberries_eaten + strawberries_bought\n\n    return remaining_strawberries\n\nans = solution()"
    ],
    "a3c6321b718247e1a8c87ed13d6bfa40": [
        "def solution():\n    # Let x be the number of pens originally, then 4/5 * x = number of pencils\n    # After taking out one pen and adding one pencil: (4/5x + 1)/(x - 1) = 7/8\n    # Solving for xWe thus have two equations:\n    # 4/5 * x = pencils\n    # (4/5 * x + 1) / (x - 1) = 7/8\n\n    # Solving the equation (4x + 5) / (5x - 5) = 7/8 for x\n    # Cross multiply to get rid of the denominators: 8 * (4x + 5) = 7 * (5x - 5)\n    # 32x + 40 = 35x - 35\n    # 3x = 75\n    # x = 25\n    # Number of pencils is 4/5 of the original number of pens:\n    # pencils = 4/5 * 25 = 20\n    # Original total = pencils + pens = 20 + 25 = 45\n    # After the switch, the total number doesn't change = 45\n\n    # Thus 45 is the total number of pencils and pens in the desk\n    return 45\n\nans = solution()"
    ],
    "c51419313ddf46ada3ba30f9e095d92c": [
        "def solution():\n    ans = 8**2 + 27\n    return ans\n\nans = solution()"
    ],
    "cc24fe62d17a41c2b8ef24f004c5e021": [
        "def solution():\n    first_missing_page = 14 + 1\n    last_missing_page = 35 - 1\n    \n    if first_missing_page % 2 == 0:\n        missing_sheets = (last_missing_page - first_missing_page) // 2 + 1\n    else:\n        missing_sheets = (last_missing_page - first_missing_page + 1) // 2\n\n    return missing_sheets\n\nans = solution()"
    ],
    "6f9eda7abbf146b88413ef8871a3770e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Assume Mike bought the books for a total cost of 100 units (for easier calculation)\n    total_cost = 100\n    expected_profit = total_cost * 0.60  # Expected profit is 60% of cost\n    expected_final_revenue = total_cost + expected_profit  # Expected revenue after selling all books\n\n    day1_books_sold = total_cost * 0.70  # 70% of the books are sold on the first day\n    day1_revenue = day1_books_sold * 1.60  # Revenue from first day with 60% profit\n\n    # On the second day, Mike made only 80% of the expected profit in total\n    total_actual_profit = expected_profit * 0.80\n    remaining_profit_needed = total_actual_profit - (day1_revenue - day1_books_sold)\n\n    day2_books_remaining = total_cost - day1_books_sold\n    # Revenue needed from the second day to make up the remaining profit\n    day2_revenue_needed = day2_books_remaining + remaining_profit_needed\n\n    # Let's denote x as the discount rate on the second day\n    discount_rate = symbols('discount_rate')\n    # Equation to calculate the revenue from the remaining books considering the discount_rate\n    equation = Eq(day2_books_remaining * (1 - discount_rate), day2_revenue_needed)\n\n    # Solve for discount_rate\n    solution = solve(equation, discount_rate)\n\n    # There should be only one solution to this equation\n    return round(solution[0] * 100, 2)  # Convert to percentage and round to two decimal places\n\nans = solution()"
    ],
    "fdfe690a562d4d6bbf61eceb229efec5": [
        "def solution():\n    for num in range(1, 500):\n        if num % 5 == 1 and num % 8 == 4 and num % 9 == 5:\n            return num\n\nans = solution()"
    ],
    "3a37961dddb1493592a78ae3db74b6e6": [
        "def solution():\n    ans = (4 * 8) + (4 * 17)\n    return ans\n\nans = solution()"
    ],
    "1501e7c8fa1943abaaf5e0674516ab89": [
        "def solution():\n    digits = [0, 1, 2, 3, 6, 8]\n    count = 0\n    \n    for tens_place in digits:\n        for ones_place in digits:\n            if tens_place != ones_place:\n                number = tens_place * 10 + ones_place\n                if number % 2 != 0:\n                    count += 1\n                    \n    return count\n\nans = solution()"
    ],
    "d1dd44a77a9344ba8d2e79cc83171fae": [
        "def solution():\n    return (25 - 10) + 1\n\nans = solution()"
    ],
    "8b11a69372f04c60a5ae352fe25c67d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote x as the cost of a tuna puff and y as the cost of a curry puff\n    x, y = symbols('x y')\n\n    # Given that each curry puff costs $0.20 less than a tuna puff\n    equation1 = Eq(y, x - 0.20)\n\n    # Jenna bought 12 tuna puffs and 19 curry puffs for $39.60\n    equation2 = Eq(12*x + 19*y, 39.60)\n\n    # Now we solve the system of equations for x and y\n    solutions = solve((equation1, equation2), (x, y))\n\n    # We want to find the cost of each tuna puff which is represented by x\n    return solutions[x]\n\nans = solution()"
    ],
    "143d2e71979c46a0a813017c419c172c": [
        "def solution():\n    speed_m_per_min = 36\n    sec_per_min = 60\n    time_sec = 200\n\n    distance = (speed_m_per_min / sec_per_min) * time_sec\n\n    return distance\n\nans = solution()"
    ],
    "bc66529b008c4e1590163de5bfb2e7d7": [
        "def solution():\n    # Let's denote the number of boys as x.\n    # Then the number of girls will be (38 - x).\n    # Each boy receives 2 balloons, so the boys receive a total of 2 * x balloons.\n    # Each girl receives 4 balloons, so the girls receive a total of 4 * (38 - x) balloons.\n    # According to the problem, the total number of balloons is 126.\n    # So, we have the equation: 2 * x + 4 * (38 - x) = 126\n\n    # Let's solve for x.\n    x = symbols('x')\n    equation = Eq(2 * x + 4 * (38 - x), 126)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "1d23a4cf5cd24aa78d4522ee259f6ea9": [
        "def solution():\n    # Converting each mixed fraction to an improper fraction and multiplying directly\n    product = 1  # Start with product as 1 (neutral element for multiplication)\n    for i in range(3, 20, 2):  # Start from 3, end at 19, step by 2\n        fraction = (i + 2) / i  # Convert mixed fraction to improper fraction\n        product *= fraction  # Multiply the product by the current fraction\n    return product\n\nans = solution()"
    ],
    "d4b69388447b40c1b49c9da3070b537d": [
        "def solution():\n    n = (55 - 3) / 4\n    return int(n)\n\nans = solution()"
    ],
    "ae1399c1d3834a26a096bf6302870872": [
        "def solution():\n    string_length_cm = 85\n    roll_length_m = 20\n    roll_length_cm = roll_length_m * 100  # convert meters to centimeters\n    total_string_length = 400 * string_length_cm  # total length in centimeters\n    rolls_needed = total_string_length / roll_length_cm  # calculate the number of rolls needed\n    return int(rolls_needed) if rolls_needed.is_integer() else int(rolls_needed) + 1  # round up to the next whole number\n\nans = solution()"
    ],
    "250641e98bbf4da6a3ad1c67bad85305": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let c be the initial number of cows and g be the initial number of goats.\n    c, g = symbols('c g', positive=True, integer=True)\n    \n    # 65% of the animals were cows at first\n    equation1 = Eq(c, 0.65 * (c + g))\n    \n    # After adding 240 animals, the number of cows is c + 240. The goats have doubled, so 2g.\n    # The percentages of cows then increased by 20%, so it becomes 85% of the total.\n    equation2 = Eq(c + 240, 0.85 * (c + g + 240))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (c, g))\n    \n    return solutions[g]\n\nans = solution()"
    ],
    "53bc7d0205304d2f983aa90502860e23": [
        "def solution():\n    return 863 * 37\n\nans = solution()"
    ],
    "af4a495ebf5c4ddcacec30bac10e45e8": [
        "def solution():\n    for cookies in range(1, 40):\n        if cookies % 6 == 5 and (-cookies) % 5 == 3:\n            return cookies\n\nans = solution()"
    ],
    "e850469f35b74929a1cad1745166a939": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for John and Emma's current ages\n    john_age, emma_age = symbols('john_age emma_age')\n\n    # John is 7 years older than Emma\n    equation1 = Eq(john_age, emma_age + 7)\n\n    # In 3 years' time, the sum of their ages will be 27\n    equation2 = Eq(john_age + 3 + emma_age + 3, 27)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (john_age, emma_age))\n\n    # Emma's current age is what we want to find\n    return solutions[emma_age]\n\nans = solution()"
    ],
    "22889dd8c0654312a1905b6415cc2e99": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    salary = symbols('salary')\n    donation = salary / 4\n    remainder = salary - donation\n    food_expense = (5 / 6) * remainder\n    savings = remainder - food_expense\n\n    # food expense is greater than donation by 78\n    equation = Eq(food_expense, donation + 78)\n    \n    solution = solve(equation, salary)\n\n    return solution[0]\n\nans = solution()"
    ],
    "cc03092bb36e4ec3a7e2bb8f320c115b": [
        "def solution():\n    term7 = 57\n    term15 = 89\n    difference = (term15 - term7) / (15 - 7)\n    return difference\n\nans = solution()"
    ],
    "de288ae7d0a442c4a9c046e0eed208ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the time spent walking at initial speed be t (in minutes)\n    t = symbols('t')\n    \n    # After t minutes, he walks for (t - 10) minutes at the increased speed\n    # Total distance covered at first speed = 150m/min * t\n    # Total distance covered at increased speed = (150m/min + 50m/min) * (t - 10)\n    equation = Eq(150 * t + (150 + 50) * (t - 10), 3700)\n\n    # Solve for t\n    t_solution = solve(equation, t)\n\n    # Total time is the time he spent at initial speed plus the increased speed time\n    total_time = t_solution[0] + (t_solution[0] - 10)\n\n    return total_time\n\nans = solution()"
    ],
    "1ecdd14157fe4525aa6c08b14b9eb1dc": [
        "def solution():\n    # The last digit of a number only depends on the last digit of the factors being multiplied.\n    # Last digit of powers of 2 cycle every 4: 2, 4, 8, 6 and repeat.\n    # 2017 % 4 = 1, so the last digit of underbrace section with 2s is 2.\n    last_digit_2 = 2 \n\n    # Last digit of powers of 3 cycle every 4: 3, 9, 7, 1 and repeat.\n    # 2017 % 4 = 1, so the last digit of underbrace section with 3s is 3.\n    last_digit_3 = 3 \n\n    # Multiplying the last digits of both underbrace sections\n    last_digit = (last_digit_2 * last_digit_3) % 10\n\n    return last_digit\n\nans = solution()"
    ],
    "05796f765d214621bf4c7e2a5b70ed1e": [
        "def solution():\n    sweets_left = 240\n    sweets_per_week = 45 - 60\n\n    weeks = (150 - sweets_left) / sweets_per_week\n\n    return abs(int(weeks))\n\nans = solution()"
    ],
    "41c46720b9f14be894784705391637b0": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Create the congruences based on the problem\n    congruences = [(1, 2), (2, 3), (4, 5), (6, 7)]\n\n    # Solve the system of congruences\n    num, _ = solve_congruence(*congruences)\n\n    # Find the smallest number greater than 0 and less than 400\n    while num <= 400:\n        if num > 0:\n            break\n        num += 2 * 3 * 5 * 7\n\n    return num\n\nans = solution()"
    ],
    "0806f05076574fdcaf845a2224dc162a": [
        "def solution():\n    for A in range(10):\n        for B in range(10):\n            for C in range(10):\n                # Make sure all digits are different\n                if len(set('47' + str(A) + '1' + str(B) + '9' + str(C))) == 7:\n                    number = int(f'47{A}1{B}9{C}')\n                    if number % 9 == 0:\n                        return A + B + C, number\n\nans = solution()"
    ],
    "e4f1396967f949e8aac075d260a9e904": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote apple as 'a' and orange as 'o'\n    a, o = symbols('a o')\n\n    # Jessie buys 2 apples and 1 orange for 40p\n    equation1 = Eq(2 * a + o, 40)\n    # Bella buys 1 apple and 2 oranges for 35p\n    equation2 = Eq(a + 2 * o, 35)\n\n    # Solve the system of equations for the price of apple and orange\n    solutions = solve((equation1, equation2), (a, o))\n    \n    # Carrie buys 1 apple and 1 orange, calculate the cost\n    cost_carrie = solutions[a] + solutions[o]\n    \n    return cost_carrie\n\nans = solution()"
    ],
    "833677d869d1418d96be1acc39cb4ff5": [
        "def solution():\n    total_students = 37\n    sport_class = 18\n    reading_class = 22\n\n    both_classes = sport_class + reading_class - total_students\n\n    return both_classes\n\nans = solution()"
    ],
    "252e549ce3e84c9fa92978ffc5919293": [
        "def solution():\n    num_digits = 3\n    options_per_digit = 3  # since we can choose 5, 6, or 7 for each digit\n\n    # Since each digit can be used more than once,\n    # the total number of combinations is simply the number of options\n    # raised to the power of the number of digits.\n    num_combinations = options_per_digit ** num_digits\n\n    return num_combinations\n\nans = solution()"
    ],
    "84f7de20cdd542549b782f41e1b21e72": [
        "def solution():\n    for sweets in range(1, 10000):  # Sufficiently large number for brute force\n        if (sweets - 2) % 3 == 0 and (sweets - 2) % 4 == 0 and \\\n           (sweets - 2) % 5 == 0 and (sweets - 2) % 6 == 0:\n            return sweets\n\nans = solution()"
    ],
    "4d679466d49c48a5ba8bd1230747a070": [
        "def solution():\n    racket_price = 49\n    ball_price = 1.5\n    total_amount = 140\n    total_racket_price = 2 * racket_price\n    remaining_amount = total_amount - total_racket_price\n    number_of_balls = remaining_amount // ball_price\n    return int(number_of_balls)\n\nans = solution()"
    ],
    "6b3303365ecc41dab11b7954d4116eb6": [
        "def solution():\n    ans = 581 - 229\n    return ans\n\nans = solution()"
    ],
    "adce279592f04e808385106fbc96b9c7": [
        "def solution():\n    # You can draw all 4 balls of one color, and all 4 of another color,\n    # before you are guaranteed to have 3 different colored balls.\n    # That would be a total of 4 + 4 + 1 (the next ball must be of the third color)\n    return 4 + 4 + 1\n\nans = solution()"
    ],
    "8e151c79d73b44098fb3999b3b61196d": [
        "def solution():\n    heinz_chocolates = 87\n    jed_chocolates = 137\n    heinz_rate = 4\n    jed_rate = -6\n\n    week = 0\n    while heinz_chocolates != jed_chocolates:\n        heinz_chocolates += heinz_rate\n        jed_chocolates += jed_rate\n        week += 1\n\n    return week\n\nans = solution()"
    ],
    "3d4453f48b85485db44a73fe0e83a81c": [
        "def solution():\n    total_durians = 90\n    sold_fraction = 4/6\n    sold_durians = total_durians * sold_fraction\n    durians_left = total_durians - sold_durians\n    \n    return durians_left\n\nans = solution()"
    ],
    "70f1a5fb307c4820a64c6b9c7a3e8ba6": [
        "def solution():\n    total_donuts = 6 * 6  # 6 boxes of 6 donuts each\n    eaten_donuts = 3      # 3 donuts eaten\n    donuts_left = total_donuts - eaten_donuts\n    return donuts_left\n\nans = solution()"
    ],
    "ee76cce07a1c443dab8df84aab143d24": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    c = symbols('c')\n    equation = Eq(5 * (6 * c - 1), -35)\n    \n    solution = solve(equation, c)\n    \n    return solution[0]\n    \nans = solution()"
    ],
    "57221fd378d74100a636076027c2568d": [
        "def solution():\n    # There are 12 points, and we need to form right angled triangles.\n    # The hypotenuse of such a triangle will span across an arc made by five consecutive points (since 360/12 = 30, and a right angle in a circle spans 90 degrees, so 90/30 = 3 points for one leg,\n    # 90/30 = 3 points for another leg, and thus 12/4= 3 arcs for the hypotenuse, meaning 3 * 5 = 15 points in total)\n    # For each right-angled triangle, there are two points that can be the right angle, since the hypotenuse defines the location of the right angle.\n    # So, there are 12 locations for the hypotenuse and 2 locations for a right angle for each hypotenuse.\n    \n    hypotenuse_locations = 12\n    right_angle_locations_per_hypotenuse = 2\n    \n    # The total number of right angled triangles is the product of both.\n    total_right_angled_triangles = hypotenuse_locations * right_angle_locations_per_hypotenuse\n    \n    return total_right_angled_triangles\n\nans = solution()"
    ],
    "deeb116148504ace9de18dfb01c2ab56": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    racket, shuttlecock = symbols('racket shuttlecock')\n\n    # Equation derived from the first condition:\n    # 1 racket + 5 shuttlecocks = 205g\n    equation1 = Eq(racket + 5 * shuttlecock, 205)\n\n    # Equation derived from the second condition:\n    # 2 rackets + 15 shuttlecocks = 515g\n    equation2 = Eq(2 * racket + 15 * shuttlecock, 515)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (racket, shuttlecock))\n\n    return solutions[racket]\n\nans = solution()"
    ],
    "ca43287494e7451e9a31849cb5bdfb51": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the weights of a box of apples and a box of oranges\n    box_of_apples, box_of_oranges = symbols('box_of_apples box_of_oranges')\n\n    # Create the equations based on the given problem\n    equation1 = Eq(3 * box_of_apples + 5 * box_of_oranges, 270)\n    equation2 = Eq(3 * box_of_apples + 7 * box_of_oranges, 342)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (box_of_apples, box_of_oranges))\n\n    # Get the solutions for the box of apples and the box of oranges\n    return solutions\n\nans = solution()"
    ],
    "de0a19ac15d54fe88a6e870b218a8ac6": [
        "def solution():\n    monthly_salary = 1.2\n    debt = 2.6\n\n    months_needed = debt / monthly_salary\n\n    return months_needed\n\nans = solution()"
    ],
    "aedfdb2e53834d18b4dd9b71091562bf": [
        "def solution():\n    # The tiger is in the middle and is also the 11th animal\n    # Therefore, there must be 10 animals in front and 10 animals behind\n    total_animals = 10 + 1 + 10  # 10 in front, the tiger itself, and 10 behind\n    return total_animals\n\nans = solution()"
    ],
    "f232bcc26c5b4a5f9cf2fd8102e72acd": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 4:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "3590a4b33e5c474cba9961cce5263a4b": [
        "def solution():\n    roses_in_each_vase_after_mother = 24 // 3\n    total_vases = 3 + 4\n    total_roses = roses_in_each_vase_after_mother * total_vases\n    \n    return total_roses\n\nans = solution()"
    ],
    "a6b4f6eda2dd4c1086279d0e363ac3fb": [
        "def solution():\n    part1 = (1 / 3) * 24\n    part2 = (2 / 5) * 30\n    part3 = (1 / 3) * 15\n\n    ans = part1 + part2 + part3\n    return ans\n\nans = solution()"
    ],
    "b2590928a5354962820ebf5c75fbea46": [
        "def solution():\n    return 100 - (33 + 34)\n\nans = solution()"
    ],
    "4ebbc0a9bb1e42cd8e77949e6447a0d2": [
        "def solution():\n    return 36.42 * 1000\n\nans = solution()"
    ],
    "5843cc2900624024adfb41c64f5bdf23": [
        "def solution():\n    # Given that a packet of Haribo costs 50 cents\n    haribo_cost = 50\n\n    # A packet of Mamee costs 30 cents less than a packet of Haribo\n    mamee_cost = haribo_cost - 30\n\n    # A big packet of jelly costs 6 times as much as a packet of Mamee\n    jelly_cost = 6 * mamee_cost\n\n    # Convert the cost from cents to dollars\n    jelly_cost_in_dollars = jelly_cost / 100\n\n    return jelly_cost_in_dollars\n\nans = solution()"
    ],
    "a0808fb3383548829621ede423be79eb": [
        "def solution():\n    for num in range(1, 100):\n        if num % 3 == 2 and num % 4 == 3 and num % 5 == 4:\n            return num\n\nans = solution()"
    ],
    "0760b73c607e495a97b0a547a70d5af8": [
        "def solution():\n    return (-18 + -2) / 2\n\nans = solution()"
    ],
    "ffcd2dd5014240228dc1917324db1930": [
        "def solution():\n    lemon_candy = 2\n    cherry_candy = 7\n    mint_candy = 1\n\n    if mint_candy > 0:\n        # Since Will hates to eat mint candies, we skip them\n        mint_candy = 0\n\n    total_candy_will_can_eat = lemon_candy + cherry_candy + mint_candy\n    return total_candy_will_can_eat\n\nans = solution()"
    ],
    "f253907f9bdf4de3a6151819ae43b291": [
        "def solution():\n    strawberry_cake_price = 3\n    marble_cake_price = strawberry_cake_price + 2\n    cheese_cake_price = 3 * marble_cake_price\n    price_for_two_cheese_cakes = 2 * cheese_cake_price\n    return price_for_two_cheese_cakes\n\nans = solution()"
    ],
    "a3e35c4319ef4a119310524b050ec78f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n\n    ans, _ = solve_congruence(*congruences)\n    \n    while ans < 80:\n        return ans\n        ans += 2*3*4*5  # LCM of divisors is 60\n\nans = solution()"
    ],
    "5c92d8264b89439e9a8efcb1cde156d8": [
        "def solution():\n    ans = 10.256 + 9.2 - 7.51\n    return ans\n\nans = solution()"
    ],
    "76c82b772019406399e1152b52afe3a5": [
        "def solution():\n    # Iterate over all 4-digit numbers\n    for A in range(1, 10):\n        for B in range(10):\n            for C in range(10):\n                for D in range(10):\n                    # Different letters represent different positive digits\n                    if len({A, B, C, D}) != 4:\n                        continue\n\n                    # AB is divisible by 2\n                    if (10 * A + B) % 2 != 0:\n                        continue\n\n                    # BC is divisible by 3\n                    if (10 * B + C) % 3 != 0:\n                        continue\n\n                    # CD is divisible by 5\n                    if D != 0 and D != 5:\n                        continue\n\n                    # ABC is divisible by 9\n                    if (100 * A + 10 * B + C) % 9 != 0:\n                        continue\n\n                    # BCD is divisible by 11\n                    if (100 * B + 10 * C + D) % 11 != 0:\n                        continue\n\n                    # If all conditions are satisfied, return the number\n                    return 1000 * A + 100 * B + 10 * C + D\n\n# Obtain the answer\nans = solution()"
    ],
    "0b1fff26446748ceb6d70df2d4c59f1f": [
        "def solution():\n    num_teachers = 16\n    games_played = num_teachers - 1  # In single elimination, the number of games is one less than the number of participants\n    \n    return games_played\n\nans = solution()"
    ],
    "aa8b7ff7b5d044b3b3060a29be5c6a9b": [
        "def solution():\n    number_sum = 2405 + 1827\n    number_words = {\n        0: 'zero', 1: 'one', 2: 'two', 3: 'three', 4: 'four', 5: 'five',\n        6: 'six', 7: 'seven', 8: 'eight', 9: 'nine', 10: 'ten',\n        11: 'eleven', 12: 'twelve', 13: 'thirteen', 14: 'fourteen',\n        15: 'fifteen', 16: 'sixteen', 17: 'seventeen', 18: 'eighteen',\n        19: 'nineteen', 20: 'twenty',\n        30: 'thirty', 40: 'forty', 50: 'fifty', 60: 'sixty', 70: 'seventy',\n        80: 'eighty', 90: 'ninety'\n    }\n    \n    def in_words(n):\n        if n < 20:\n            return number_words[n]\n        elif n < 100:\n            if n % 10 == 0:\n                return number_words[n]\n            else:\n                return number_words[n // 10 * 10] + '-' + number_words[n % 10]\n        elif n < 1000:\n            if n % 100 == 0:\n                return number_words[n // 100] + ' hundred'\n            else:\n                return number_words[n // 100] + ' hundred and ' + in_words(n % 100)\n        else:\n            if n % 1000 == 0:\n                return in_words(n // 1000) + ' thousand'\n            else:\n                return in_words(n // 1000) + ' thousand, ' + in_words(n % 1000)\n    \n    return in_words(number_sum)\n\nans = solution()"
    ],
    "776031bcc4e54790a7e85880c7273093": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3*x + 6, x + 16)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c7821793dd724577866140431e80753a": [
        "def solution():\n    # Given height and width ratio 3:4\n    height_ratio = 3\n    width_ratio = 4\n    \n    # Given height of television screen\n    height = 21\n    \n    # Calculate width using the ratio\n    width = (width_ratio / height_ratio) * height\n    \n    # Calculate perimeter of the screen\n    perimeter = 2 * (height + width)\n    \n    return perimeter\n\nans = solution()"
    ],
    "031f3635142c4421b05d4b2b576e071a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the ages of the sons as s1 and s2 (s1 is older)\n    # Let the ages of the daughters be d1 and d2 (d1 is older)\n    s1, s2, d1, d2 = symbols('s1 s2 d1 d2')\n    \n    # Four given conditions:\n    condition1 = Eq(s1 + s2 + d1 + d2, 55)\n    condition2 = Eq(s1 - s2, 3)   # The two sons were born three years apart\n    condition3 = Eq(d1 - d2, 2)   # The two daughters were born two years apart\n    condition4 = Eq(s2, 2 * d1)   # The younger son is twice the age of the older daughter\n    \n    # Solving the system of equations\n    solutions = solve((condition1, condition2, condition3, condition4), (s1, s2, d1, d2))\n    \n    # Ordering the ages to find the youngest child\n    ages = [solutions[s1], solutions[s2], solutions[d1], solutions[d2]]\n    youngest_age = min(ages)\n    \n    return youngest_age\n\nans = solution()"
    ],
    "07cca6d9086647059f61d49c4cc9e778": [
        "def solution():\n    ans = (20 + 19 + 18 + 17 + 16) - (15 + 14 + 13 + 12 + 11)\n    return ans\n\nans = solution()"
    ],
    "3dff81f53f23452495bb29a705bf520f": [
        "def solution():\n    repeating_sequence = \"428571\"  # The digits in the repeating sequence of 3/7.\n    total_sum = 0\n\n    for i in range(58):\n        total_sum += int(repeating_sequence[i % len(repeating_sequence)])\n\n    return total_sum\n\nans = solution()"
    ],
    "a2c8013f67c740bb813e2cff828c7cc3": [
        "def solution():\n    total_distance = 15 + 10 + 8\n    num_people = 3\n    average_distance = total_distance / num_people\n    return average_distance\n\nans = solution()"
    ],
    "e3e500d971604e29aa0a14edf78c74f7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for wallet and watch\n    wallet, watch = symbols('wallet watch')\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(2 * wallet + 3 * watch, 433)\n    equation2 = Eq(5 * wallet + 4 * watch, 701)\n\n    # Solve the system of equations for wallet and watch\n    solutions = solve((equation1, equation2), (wallet, watch))\n\n    return solutions[wallet]\n\nans = solution()"
    ],
    "b6a2b577b4e5470188401b67b822af20": [
        "from math import factorial\n\ndef solution():\n    total_books = 3 + 4 + 2 + 2  # Total number of books\n    books_of_each_type = [3, 4, 2, 2]  # Number of books of each type\n\n    # Calculate the total number of permutations without considering identical books\n    total_permutations = factorial(total_books)\n\n    # Divide by the factorial of the number of each type of book to account for indistinguishable arrangements\n    for books in books_of_each_type:\n        total_permutations //= factorial(books)\n\n    return total_permutations\n\nans = solution()"
    ],
    "e81380a3834146729a81c2bca69516e4": [
        "def solution():\n    toms_string = 13\n    difference_in_length = 25\n    nicks_string = toms_string + difference_in_length\n    \n    return difference_in_length\n\nans = solution()"
    ],
    "1a4d0a08fad44f9ebb6ae96dbaae9f12": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "8589e072708949c4a1c18f959b68d739": [
        "def solution():\n    ans = 0.2 * 0.3\n    return ans\n\nans = solution()"
    ],
    "7b9c62b20e00466b99795e4987d051bd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of solution to be exchanged between the two bottles\n    x = symbols('x')\n    \n    # After exchanging x grams of solutions, the total concentration of sugar in each bottle should be equal.\n    # For bottle A: (50 * 11% + x * 47%) / (50 + x)\n    # For bottle B: (50 * 47% - x * 47%) / (50 - x)\n    # Set these two equal to each other to find x\n    equation = Eq((50 * 0.11 + x * 0.47) / (50 + x), (50 * 0.47 - x * 0.47) / (50 - x))\n\n    # solve for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ee22231baefc4e1bace6954a18c6dfd1": [
        "def solution():\n    students_choosing_chicken_tenders = 18\n    total_students = 50\n\n    percent_choosing_chicken_tenders = (students_choosing_chicken_tenders / total_students) * 100\n\n    return percent_choosing_chicken_tenders\n\nans = solution()"
    ],
    "8a1f5a78534245b78c14a7d808df202e": [
        "def solution():\n    plot_length_cm = 20 * 100  # converting metres to centimetres\n    spacing_cm = 40\n    first_plant_offset_cm = 20\n    # Subtract the first offset from the length, then divide by the spacing to find the number of spaces between plants.\n    # Finally, add 1 to account for the first plant.\n    num_cauliflowers = ((plot_length_cm - first_plant_offset_cm) // spacing_cm) + 1\n    return num_cauliflowers\n\nans = solution()"
    ],
    "8d16df72513e48ce9cf5c5768ac94b3b": [
        "def solution():\n    digits = [1, 3, 6]\n    ans = len(digits) ** 3  # Each place can have any of the three digits\n    return ans\n\nans = solution()"
    ],
    "b00dd9facbe04160a2ed274649dd7571": [
        "def solution():\n    return (75 - 3) // 8\n\nans = solution()"
    ],
    "dd2b5176641b47188cb8bc10cc18c3dc": [
        "def solution():\n    from itertools import combinations\n    \n    candies = 15\n    piles = 4\n    ways = set()\n    \n    for combo in combinations(range(1, candies), piles - 1):\n        if sum(combo) < candies:\n            ways.add(tuple(sorted(combo + (candies - sum(combo),))))\n    \n    return len(ways)\n\nans = solution()"
    ],
    "003a17cf90624266bdfa006deb29cd68": [
        "from sympy import isprime\n\ndef solution():\n    found_primes = []\n    for num in range(1, 51):\n        if isprime(num) and isprime(num + 6) and isprime(num - 6):\n            found_primes.append(num)\n    ans = len(found_primes)\n    return ans, found_primes\n\nans = solution()"
    ],
    "d45dd29337134aa9b9314275c5f2b31a": [
        "def solution():\n    percentage = 30 / 100\n    total = 250\n    ans = percentage * total\n    return ans\n\nans = solution()"
    ],
    "c87b5329b55a4badb42841d47bba1a1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lucy, peter, edmund, susan = symbols('lucy peter edmund susan')\n\n    equation1 = Eq(edmund, 2 * susan)\n    equation2 = Eq(peter, 3 * edmund)\n    equation3 = Eq(lucy, peter / 2)\n    equation4 = Eq(lucy + peter + edmund + susan, 120)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (lucy, peter, edmund, susan))\n\n    return solutions[lucy]\n\nans = solution()"
    ],
    "148b423200fd4f4f9cc3cfed406293e0": [
        "def solution():\n    total_meters = 3.7 + 64 / 100  # Convert cm to meters and add to 3.7 meters\n    meters_to_subtract = 2 + 7 / 100  # Convert cm to meters and add to 2 meters\n    result = total_meters - meters_to_subtract  # Subtract the meters\n    return result\n\nans = solution()"
    ],
    "0b1752605b164c48b0814af3beffe291": [
        "def solution():\n    ans = 19 + 23 + 19 + 22 + 20\n    return ans\n\nans = solution()"
    ],
    "45d85cbefb344a0a875c5e59df47d4f3": [
        "def solution():\n    # A function to return n-th term of Fibonacci sequence\n    def fib(n):\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        else:\n            return fib(n-1) + fib(n-2)\n    \n    # Next number in the sequence is the 8th term\n    ans = fib(8)\n    return ans\n\nans = solution()"
    ],
    "8ae8aebcd931414896cbbb9d92a27fa1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the price of banana and pear\n    banana, pear = symbols('banana pear')\n\n    # Define the equations based on the problem statement\n    equation1 = Eq(banana + 2*pear, 94)  # Max's purchase\n    equation2 = Eq(banana + pear, 62)     # Emily's purchase\n\n    # Solve the equations for banana and pear\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "560f55b2062d4bb393b7c4c68779398a": [
        "def solution():\n    total_fruit = 48\n    fraction_apples = 5 / 8\n    num_apples = total_fruit * fraction_apples\n    num_pears = total_fruit - num_apples\n\n    return int(num_pears)\n\nans = solution()"
    ],
    "ce41ebada23a4f4d8a127ded83c184fd": [
        "def solution():\n    # Calculate the 20th number in the sequence\n    number_20th = 2 ** (20 - 1)  # the sequence represents 2^(n-1)\n\n    # Calculate the 17th number in the sequence\n    number_17th = 2 ** (17 - 1)  # the sequence represents 2^(n-1)\n\n    # Divide the 20th number by the 17th number\n    ans = number_20th / number_17th\n\n    return ans\n\nans = solution()"
    ],
    "0807a5b8035f428595efa3d05b37f60b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    black, white, grey = symbols('black white grey')\n\n    equation1 = Eq(black + white + grey, 59)\n    equation2 = Eq(black + white, grey + 11)\n    equation3 = Eq(black, white - 9)\n\n    solutions = solve((equation1, equation2, equation3), (black, white, grey))\n\n    return solutions[white]\n\nans = solution()"
    ],
    "dc79304d4b074af798fdc304b00f1fe2": [
        "def solution():\n    minutes = 4.6\n    seconds_per_minute = 60\n    ans = minutes * seconds_per_minute\n    return ans\n\nans = solution()"
    ],
    "4de7bc9127b844c8845810ad2db2dd1b": [
        "def solution():\n    # The sum of two numbers is fixed at 35,\n    # To maximize the product of two numbers with a fixed sum,\n    # they should be as close to each other as possible.\n    # Thus, we can take one number to be 35 // 2 = 17 (since we are dealing with integers, we take the floor of the division)\n    # and the other to be 35 - 17 = 18\n    num1 = 35 // 2\n    num2 = 35 - num1\n    # Return the product of these two numbers\n    return num1 * num2\n\nans = solution()"
    ],
    "bdfb73d963c14ec7bac25b679d5d5735": [
        "def solution():\n    daily_earnings = 70\n    days_worked = 6\n    total_earnings = daily_earnings * days_worked\n    return total_earnings\n\nans = solution()"
    ],
    "32f413ff728d481fb33f3ff50b93c6ce": [
        "def solution():\n    # Initial average and number of people\n    initial_average = 60\n    initial_people = 3\n    \n    # Final average and number of people after including Dennis\n    final_average = initial_average + 10\n    final_people = initial_people + 1\n    \n    # Calculate total books before and after including Dennis\n    total_books_initially = initial_average * initial_people\n    total_books_finally = final_average * final_people\n    \n    # Calculate the number of books Dennis has\n    books_dennis = total_books_finally - total_books_initially\n    \n    return books_dennis\n\nans = solution()"
    ],
    "9eefa1dbad6349a090e42d50a09d87fd": [
        "def solution():\n    # Smallest two-digit prime number is 11\n    smallest_prime = 11\n    # Largest two-digit square number is 81 (9^2)\n    largest_square = 81\n\n    return smallest_prime * largest_square\n\nans = solution()"
    ],
    "c852142aceb043f5b55cd004438cf7a6": [
        "def solution():\n    total_beads = 700\n    beads_per_necklace = 27\n\n    full_necklaces = total_beads // beads_per_necklace\n\n    return full_necklaces\n\nans = solution()"
    ],
    "53411c78458748e1ab1aa5ff7a2ef692": [
        "def solution():\n    john_height = 19.6\n    ratio_john = 2\n    ratio_mike = 3\n\n    mike_height = (john_height / ratio_john) * ratio_mike\n\n    return mike_height\n\nans = solution()"
    ],
    "515f9b66abd142d0bd65c4a91de0a79a": [
        "def solution():\n    distance_1_to_4 = 9\n    # Since the flags are placed at consistent distances, the distance between\n    # each flag is 1/3 of the distance between the 1st and 4th flag.\n    distance_between_flags = distance_1_to_4 / 3\n\n    # The distance between the 1st and 9th flag is the distance between flags\n    # times the number of intervals between these flags, which is 8 intervals (9-1).\n    distance_1_to_9 = distance_between_flags * 8\n\n    return distance_1_to_9\n\nans = solution()"
    ],
    "873caeb39b18425fa3cf21cb40505ac6": [
        "def solution():\n    total_distance = 16\n    climb_per_day = 5\n    slide_per_night = 3\n    net_distance_per_day = climb_per_day - slide_per_night\n    # Adjust total distance since on the last day it climbs out without sliding back\n    adjusted_distance = total_distance - climb_per_day\n    days_to_reach_last_day = adjusted_distance // net_distance_per_day\n\n    # Check if there's a remaining distance to cover on the last day\n    if adjusted_distance % net_distance_per_day != 0:\n        days_to_reach_last_day += 1\n\n    # Adding one more day to account for the final climb\n    total_days = days_to_reach_last_day + 1\n    return total_days\n\nans = solution()"
    ],
    "00d0ef22036440bfba46cf90f1e51a5a": [
        "def solution():\n    is_prime = True\n    for i in range(2, 233):\n        if 233 % i == 0:\n            is_prime = False\n            break\n    return is_prime\n\nans = solution()"
    ],
    "6927ac3bb6f64f89b5830b5fccd79ae6": [
        "def solution():\n    # Constructing the number from the given information\n    hundredths_place = 7 * 0.01\n    tenths_place = 6 * 0.1\n    ones_place = 4 * 1\n\n    # Combining the individual place values to form the entire number\n    number = ones_place + tenths_place + hundredths_place\n\n    # Returning the constructed number\n    return number\n\nans = solution()"
    ],
    "cf4d33bf77d24115a787173fb7fe030e": [
        "def solution():\n    ship_speed_still_water = 22\n    current_speed = 3\n    downstream_speed = ship_speed_still_water + current_speed\n    distance = 200\n\n    time = distance / downstream_speed\n\n    return time\n\nans = solution()"
    ],
    "56d8daf28c984740b59bdb2fd77882d7": [
        "def solution():\n    nums = [19, 6, 12, 13, 21, 4, 8, 17]\n    ans = sum(nums)\n    return ans\n\nans = solution()"
    ],
    "6a0c0299b8e74741b435eee435724ca3": [
        "def solution():\n    pencil_cost = 2\n    pen_cost = 4\n    \n    pencils_per_pen = pen_cost // pencil_cost\n    \n    return pencils_per_pen\n\nans = solution()"
    ],
    "6801a3acc18c476f8557f9869fe2dd0a": [
        "def solution():\n    # Let's use the sympy library to solve the equations\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the number of students in class A and B and the number of peaches\n    A_students, B_students, peaches = symbols('A_students B_students peaches')\n\n    # Equations based on the problem statement\n    equation1 = Eq(peaches, 5 * A_students + 10)\n    equation2 = Eq(peaches, 8 * B_students - 2)\n    equation3 = Eq(A_students, B_students + 3)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A_students, B_students, peaches))\n\n    return solutions[peaches]\n\nans = solution()"
    ],
    "3e88caa587c24fdea4f8a57b8dbd78f8": [
        "def solution():\n    ans = 9.95 - 2.6 - 3.412\n    return ans\n\nans = solution()"
    ],
    "63233813070f46b2ac40a6c1b5bc9b6c": [
        "def solution():\n    total_points = 36\n    correct_points = 6\n    wrong_points = -2\n    total_questions = 10\n    \n    # Let x be the number of questions answered correctly,\n    # Then total_questions - x will be the number of questions answered wrongly.\n    # Formulate the equation based on the given conditions:\n    # correct_points * x + wrong_points * (total_questions - x) = total_points\n    \n    # We can simplify the above equation to:\n    # (correct_points - wrong_points) * x = total_points - wrong_points * total_questions\n    \n    # Solve for x:\n    x = (total_points - wrong_points * total_questions) / (correct_points - wrong_points)\n    return int(x)\n\nans = solution()"
    ],
    "c824a5b0a4384dcc938f65073d4a8794": [
        "def solution():\n    # Number of ways to go by each transportation method\n    trains = 4\n    buses = 3\n    flights = 2\n\n    # Total number of ways to choose the transportation\n    total_ways = trains + buses + flights\n\n    return total_ways\n\nans = solution()"
    ],
    "30ec79644d524ec291def656fb45df08": [
        "def solution():\n    product = 888 * 999\n    last_two_digits = product % 100\n    return last_two_digits\n\nans = solution()"
    ],
    "d3732a99f6ef4521b3a6328c710459fd": [
        "def solution():\n    ans = 78.2 - 31.45 + 5.245 - 2.3\n    return ans\n\nans = solution()"
    ],
    "20389c4707d0488a9cd27afb2d7c45ed": [
        "def solution():\n    h = 1\n    while True:\n        if (28512 / h) ** (1/3) % 1 == 0:\n            return h\n        h += 1\n\nans = solution()"
    ],
    "d8669bc3a70344f58225403abd0196e9": [
        "def solution():\n    # Since we want to guarantee two different colors, take the worst-case scenario:\n    # If Bart takes all chips of one color before moving to the next,\n    # he would take all 3 red chips and then only need to take 1 more chip to guarantee \n    # a different color since the next one could either be yellow or brown.\n    \n    # Total number of chips taken would thus be all red chips plus one more:\n    chips_to_take = 3 + 1\n    \n    return chips_to_take\n\nans = solution()"
    ],
    "688bd3546a274323aedfd728fc91d0e1": [
        "def solution():\n    families = 10\n    # Each father shakes hands with fathers, mothers and children from other families (3 people per family)\n    fathers_handshakes = (families - 1) * families * 3\n    \n    # Each mother shakes hands with all the fathers and children (but not other mothers) from other families (2 people per family)\n    mothers_handshakes = (families - 1) * families * 2\n    \n    # Each child shakes hands with all the fathers and mothers (but not other children) from other families (2 people per family)\n    children_handshakes = (families - 1) * families * 2\n    \n    # Total handshakes are the sum of all handshakes between fathers, mothers, and children\n    total_handshakes = fathers_handshakes + mothers_handshakes + children_handshakes\n    \n    return total_handshakes\n\nans = solution()"
    ],
    "980c93de91ea458b9c9e8248ad74e8b5": [
        "def solution():\n    a = 31415926\n    b = a - 1\n    ans = a**2 - a * b\n    return ans\n\nans = solution()"
    ],
    "a5e7e019fb4d4c0080d3bb8fee16309b": [
        "def solution():\n    # This problem is a variation of the derangement problem or subfactorial\n    # which counts the number of permutations where no element appears in its original position\n    \n    # The number of derangements of n is often denoted by !n\n    def subfactorial(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (subfactorial(n - 1) + subfactorial(n - 2))\n\n    ans = subfactorial(7)\n    return ans\n\nans = solution()"
    ],
    "1fd49a79b84a47ae801b6ede661a42f2": [
        "from math import factorial\n\ndef solution():\n    # We need to insert 1 dancing performance between every 2 playing a sketch performances.\n    # There are 2 spaces between 3 playing a sketch performances, so we need at least 2 dancing performances for that.\n    # This leaves us with 5 dancing performances to arrange freely.\n    \n    # First, arrange the 5 remaining dancing performances between 3+1=4 slots around playing a sketch performances (including edges).\n    # This is a stars and bars problem, which can be solved using combinations: C(n+k-1, k-1) where n=5, k=4.\n    free_dance_combinations = factorial(5+4-1) // (factorial(5) * factorial(4-1))\n\n    # Now, we have to arrange the 3 playing a sketch and the fixed 2 dancing performances, which are treated as a single group.\n    # That makes 3 + 2 = 5 'groups' to arrange in total.\n    # The arrangements of these 'groups' are simply 5!.\n    fixed_performance_arrangements = factorial(5)\n\n    # Multiply the combinations of freely arranged dancing performances and the fixed 'group' arrangements.\n    number_of_ways = free_dance_combinations * fixed_performance_arrangements\n\n    return number_of_ways\n\nans = solution()"
    ],
    "e7684856f58240ceb07efec4b2d70e70": [
        "def solution():\n    mark_position = 8\n    helen_position_from_end = 9\n    children_between = 6\n\n    total_children = mark_position + children_between + helen_position_from_end\n\n    return total_children\n\nans = solution()"
    ],
    "6601fcfffa994bc9b56b9f035024b14a": [
        "def solution():\n    # the digits that repeat in the recurring decimal\n    recurring_sequence = \"85274\"\n\n    # since Python indices start from 0, we adjust the position by subtracting 1\n    position = 79 - 1\n    \n    # find the index within the repeating sequence\n    index_in_sequence = position % len(recurring_sequence)\n    \n    # get the corresponding digit in the repeating sequence\n    digit = int(recurring_sequence[index_in_sequence])\n    return digit\n\nans = solution()"
    ],
    "b4bdf164e10c4b1b9d4e3c8fbc8fb268": [
        "def solution():\n    odd_digits_count = len([i for i in range(10) if i % 2 != 0])  # There are 5 odd digits (1, 3, 5, 7, 9)\n    \n    # The first digit cannot be 0 and must be odd, so there are 5 choices for each digit location\n    # Since there are 3 digits, and all of them must be odd, the number of different 3-digit numbers is 5^3\n    return odd_digits_count ** 3\n\nans = solution()"
    ],
    "af4a763c71d14bfc86469b27fffda5d7": [
        "def solution():\n    # Initialize the largest three-digit number.\n    largest_number = 999\n    # Since the number needs to be divisible by both 17 and 19, it needs to be divisible by their LCM.\n    lcm = 17 * 19  # LCM of 17 and 19.\n    # Decrease the largest_number until it satisfies the condition.\n    while (largest_number + 2009) % lcm != 0:\n        largest_number -= 1\n    return largest_number\n\nans = solution()"
    ],
    "700ddae7c261440e8dfef14d11e42592": [
        "def solution():\n    sum_to_62 = (62 * (62 + 1)) // 2\n    missing_page = sum_to_62 - 1939\n    return missing_page\n\nans = solution()"
    ],
    "18a332d1534047ebbe0fc807217bdfa9": [
        "def solution():\n    for i in range(1000):\n        next_ticket_number = i + 1\n        if i + next_ticket_number == 777:\n            return next_ticket_number\n\nans = solution()"
    ],
    "a082a5ee490e4087b147b853ed2e0705": [
        "def solution():\n    # Define the cost and the accumulated hours at each segment\n    cost = 82\n    free_hours = 40\n    first_segment_hours = 50 - free_hours\n    second_segment_hours = 60 - 50\n    first_segment_rate = 5\n    second_segment_rate = 8\n    third_segment_rate = 15\n\n    # Calculate the cost for the first segment (up to 50 hours)\n    first_segment_cost = first_segment_hours * first_segment_rate\n\n    # Check if the cost is in the first segment\n    if cost <= first_segment_cost:\n        # Calculate the number of hours parked using the first segment rate\n        hours_parked = free_hours + (cost / first_segment_rate)\n    else:\n        # Subtract the first segment cost from the total cost\n        cost -= first_segment_cost\n\n        # Calculate the cost for the second segment (up to 60 hours)\n        second_segment_cost = second_segment_hours * second_segment_rate\n\n        # Check if the cost is in the second segment\n        if cost <= second_segment_cost:\n            # Calculate the number of hours parked using the second segment rate\n            hours_parked = 50 + (cost / second_segment_rate)\n        else:\n            # Subtract the second segment cost from the total cost\n            cost -= second_segment_cost\n            # Calculate the number of hours parked using the third segment rate\n            hours_parked = 60 + (cost / third_segment_rate)\n\n    return hours_parked\n\nans = solution()"
    ],
    "87f7b53af1c7449bb3a1c8c021923671": [
        "def solution():\n    # Count of red, green, blue, and orange marbles\n    red = 4\n    green = 7\n    blue = 6\n    orange = 2\n\n    # To ensure 4 different colored marbles, we consider the worst case scenario \n    # using the pigeonhole principle where we might take all but one from the\n    # largest collections first before getting the unique fourth color.\n\n    # Worst case scenario without the orange marbles\n    worst_case_without_orange = (green - 1) + (blue - 1) + (red - 1)\n\n    # Adding one for the orange (or any other color we're missing to complete the 4 colors)\n    total = worst_case_without_orange + 1\n\n    return total\n\nans = solution()"
    ],
    "8b84d4c8e6d6433bb169eac92ff0c74c": [
        "def solution():\n    return 5 / 16\n\nans = solution()"
    ],
    "031cd0de1ee64e169848ce69d7f5b3ca": [
        "def solution():\n    length = 5\n    width = 3\n    perimeter = 2 * (length + width)\n    return perimeter\n\nans = solution()"
    ],
    "1b42b4b26b2a4a84918723d849472aa1": [
        "def solution():\n    initial_value = 20000\n    depreciation_rate = 0.9\n    years = 5\n    \n    final_value = initial_value * (depreciation_rate ** years)\n\n    return final_value\n\nans = solution()"
    ],
    "71b17521447249e196a0f8b18fb89aa3": [
        "def solution():\n    average_daily_earnings = 60\n    number_of_days = 7  # Monday to Sunday\n    total_earnings = average_daily_earnings * number_of_days\n    return total_earnings\n\nans = solution()"
    ],
    "5fdb62b3b2ec43a38c6fad9527ab2e7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x - 2*x + 7, 6*x + 4*x - 14)\n\n    sol = solve(equation, x)\n\n    return sol[x]\n\nans = solution()"
    ],
    "d756434ccb6b454cbe50d5d2de90751a": [
        "def solution():\n    num = 3016\n    ans = num - 100\n    return ans\n\nans = solution()"
    ],
    "d767cbc2899b42849970436783d686bb": [
        "def solution():\n    ans = 23.2 - 14.7\n    return ans\n\nans = solution()"
    ],
    "fcad283a7a1f427793d6d2d9b3d1a441": [
        "def solution():\n    max_value = 0\n    for a in range(1, 85, 2):\n        for b in range(a+2, 85, 2):\n            for c in range(b+2, 85, 2):\n                for d in range(c+2, 85, 2):\n                    for e in range(d+2, 85, 2):\n                        if a + b + c + d + e == 85:\n                            max_value = max(max_value, e)\n    return max_value\n\nans = solution()"
    ],
    "fec0efe56cd043f2ae93914883589ff6": [
        "def solution():\n    numbers = [0.993, 1.006, 1.1, 0.94, 0.99]\n    closest_number = min(numbers, key=lambda x: abs(x - 1))\n    return closest_number\n\nans = solution()"
    ],
    "40d0f97fc5af4ba79f1e1007a926a66b": [
        "def solution():\n    minutes_to_seconds = 2.5 * 60\n    return int(minutes_to_seconds)\n\nans = solution()"
    ],
    "e8e9b50054f946dcb1b7e07440b9d29f": [
        "def solution():\n    speed_still_water = 88\n    speed_current = 12\n    distance = 500\n\n    speed_downstream = speed_still_water + speed_current\n    time_taken = distance / speed_downstream\n\n    return time_taken\n\nans = solution()"
    ],
    "c73a9fe2a1a84b32b28f07fc9fc2e630": [
        "def solution():\n    # Define a recursive function for calculating ways to climb n steps\n    def ways_to_climb(n):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n        return ways_to_climb(n - 1) + ways_to_climb(n - 2) + ways_to_climb(n - 3)\n\n    # We calculate the ways to reach step 4 and step 5\n    ways_to_step_4 = ways_to_climb(4)\n    # Since step 5 is muddy, the ways to reach step 5 would be the same as step 4\n    ways_to_step_5 = ways_to_step_4\n\n    # Now we find the ways to climb from step 5 to 10\n    ways_to_climb_remaining = ways_to_climb(5)\n\n    # Total ways to climb up 10 steps without stepping on 5 is the product\n    # of ways to reach step 4 and the ways to climb from step 5 to 10.\n    total_ways = ways_to_step_5 * ways_to_climb_remaining\n\n    return total_ways\n\nans = solution()"
    ],
    "e23c6ff29b964509baa268af08cccfb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    twenty_cent, fifty_cent = symbols('twenty_cent fifty_cent')\n    \n    # Equation for the number of coins\n    equation1 = Eq(twenty_cent + fifty_cent, 21)\n    # Equation for the total value of coins\n    equation2 = Eq(20*twenty_cent + 50*fifty_cent, 630)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (twenty_cent, fifty_cent))\n    \n    return solutions[fifty_cent]\n\nans = solution()"
    ],
    "a04912e5c32e426a9c96bc96e65c469c": [
        "def solution():\n    total_coins = 213\n    children = 5\n    remainder = total_coins % children\n    return remainder\n\nans = solution()"
    ],
    "16aa6cb964434e138d37f5f5467ea1c6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the speed of Alan be 'a' meters per minute\n    # Phillip walks 'a + 15' meters per minute\n    phillip_time = 12  # Phillip's time in minutes\n    alan_time = phillip_time + 3  # Alan's time in minutes\n    a = symbols('a')\n\n    # Phillip's distance = Phillip's speed * Phillip's time\n    # Alan's distance = Alan's speed * Alan's time\n    # According to the question, both Alan and Phillip walk the same distance.\n    equation = Eq((a + 15) * phillip_time, a * alan_time)\n\n    # Solve for 'a'\n    alan_speed = solve(equation, a)[0]\n\n    # Now calculate the distance between A and B (which is Phillip's distance)\n    distance_AB = (alan_speed + 15) * phillip_time\n\n    return distance_AB\n\nans = solution()"
    ],
    "a7ab5e95b20b449aae26b7bc5ce0f53b": [
        "from math import comb\n\ndef solution():\n    ways_to_pick_girls = comb(8, 4)  # Choose 4 out of 8 girls\n    ways_to_pick_boys = comb(12, 3)  # Choose 3 out of 12 boys\n    total_ways = ways_to_pick_girls * ways_to_pick_boys\n    return total_ways\n\nans = solution()"
    ],
    "f3b90fc112134c11bf16c053ec5b9bb5": [
        "import math\n\ndef solution():\n    count = 0\n    num = 2\n    while True:\n        num_str = \"2\" + \"5\" * count  # Generate the next number in the sequence.\n        num = int(num_str)\n        if math.sqrt(num) == int(math.sqrt(num)):  # Check the perfect square.\n            count += 1\n        else:\n            break\n    return count\n\nans = solution()"
    ],
    "0dcc886d48d14da3a0ba1c786f23c05c": [
        "def solution():\n    tom_money = 68.10\n    alice_spent = 36\n    alice_less = 25.40\n\n    alice_money = tom_money + alice_spent - alice_less\n\n    return alice_money\n\nans = solution()"
    ],
    "e4cf51421424479896c2cc37d2e05235": [
        "def solution():\n    total_five_numbers = 5 * 28\n    total_twelve_numbers = 12 * 11\n    total_seventeen_numbers = total_five_numbers + total_twelve_numbers\n    mean_seventeen_numbers = total_seventeen_numbers / (5 + 12)\n\n    return mean_seventeen_numbers\n\nans = solution()"
    ],
    "1dc393d01ecf4792b3b72098c4cdff99": [
        "def solution():\n    original_price = 15.40\n    discount = 0.20\n    discounted_price = original_price * (1 - discount)\n    return discounted_price\n\nans = solution()"
    ],
    "d3a5ba15a4034a49afce92beb5409bf9": [
        "def solution():\n    total_distance = 74\n    num_benches = 9\n    distance_between_benches = 7\n    total_bench_length = total_distance - (num_benches - 1) * distance_between_benches\n    bench_length = total_bench_length / num_benches\n    return bench_length\n\nans = solution()"
    ],
    "9bb5ada2b3c4496bbf433bd138e2e0ae": [
        "def solution():\n    original_arms = 0\n    cut_arms = 21\n    while cut_arms > 0:\n        if original_arms > 0:\n            cut_arms -= 5  # Peter cuts 5 arms\n            original_arms -= 4  # One arm grows back\n        else:\n            cut_arms -= 5  # Peter cuts 5 arms\n            original_arms = 5  # As the first cutting happens, initially there were 5 more arms\n    return original_arms\n\nans = solution()"
    ],
    "a16e80d24e034bddb8280d950f5a08b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of students in class B\n    # Then the number of students in class A is 2x\n    # c represents the total candies Miss Jenny has\n\n    x, c = symbols('x c')\n    # Equation for class A: 4 * (2x) + 20 = c\n    equation1 = Eq(4 * (2 * x) + 20, c)\n    # Equation for class B: c - 6 * x = 16\n    equation2 = Eq(c - 6 * x, 16)\n\n    solutions = solve((equation1, equation2), (x, c))\n\n    return solutions[c]\n\nans = solution()"
    ],
    "0f7063d1e1484313ab5cf6b5f0420c06": [
        "def solution():\n    total_sum = 2021\n    third_greatest_number = 246\n    remaining_sum_after_third = total_sum - third_greatest_number\n    \n    # The 9 smallest numbers must be at least 1\n    min_sum_of_nine = 9\n    \n    # The 4th greatest number is then the remaining sum minus the minimum sum of the smallest nine numbers\n    fourth_greatest_number = remaining_sum_after_third - min_sum_of_nine\n    \n    return fourth_greatest_number\n\nans = solution()"
    ],
    "c8155e9c63f74065a3befe7a41ec8e68": [
        "def solution():\n    # Since there is an equal number of gold and silver coins,\n    # the worst case scenario is if we take out all coins of one color first.\n    # Therefore, we need to take out all 6 coins of one color plus one more to ensure we have a different colored coin.\n    # So, the answer is 6 + 1 = 7.\n    return 7\n\nans = solution()"
    ],
    "4b28c12170034843abf93f81771140af": [
        "def solution():\n    # Since the distance from the 1st to the 5th tree is 20 cm,\n    # this spans across 4 intervals (5 - 1).\n    # Dividing 20 cm by 4 intervals gives us the distance per interval.\n    distance_per_interval = 20 / 4\n\n    # The distance from the 8th to the 14th tree will span across 6 intervals (14 - 8).\n    # To find the distance, multiply the number of intervals by the distance per interval.\n    distance_8_to_14 = 6 * distance_per_interval\n\n    return distance_8_to_14\n\nans = solution()"
    ],
    "ea360eacf521407f98ff8b5280ab0671": [
        "def solution():\n    count = 0\n    for i in range(1, 511):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "c4a0044218d4459486aeded38095d16e": [
        "def solution():\n    # Since mutually exclusive means they have no common factors other than 1,\n    # we'll select numbers such that each number is coprime with its neighbors.\n    from math import gcd\n\n    nums = list(range(1, 25))  # numbers from 1 to 24\n\n    def is_coprime(a, b):\n        return gcd(a, b) == 1\n\n    # Try to form a circle by making sure each pair of adjacent numbers are coprime\n    # We have to skip the ones that are not coprime with both neighbours\n    circle = [nums[0]]  # start with the first number\n\n    for i in range(1, len(nums)):\n        if is_coprime(circle[-1], nums[i]) and is_coprime(nums[i], nums[(i + 1) % len(nums)]):\n            circle.append(nums[i])\n\n    # Now we have to make sure the start and end of the circle are also coprime\n    if not is_coprime(circle[0], circle[-1]):\n        circle.pop()\n\n    return len(circle)\n\nans = solution()"
    ],
    "b2c8b37b16bc4b09830fda1738de61da": [
        "def solution():\n    ans = (38 * 32) + (37 * 33) + (36 * 34)\n    return ans\n\nans = solution()"
    ],
    "2d070af2dcd74f2ca39de8161148fb7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T, income = symbols('T income')\n    \n    # Tax for first $30,000\n    tax_for_first_30000 = Eq(0.01 * T * 30000, 0.01 * T * 30000)\n    \n    # Tax for the amount above $30,000\n    tax_for_rest = Eq(0.01 * (T + 3) * (income - 30000), 0.01 * (T + 3) * (income - 30000))\n    \n    # Total tax\n    total_tax = tax_for_first_30000.lhs + tax_for_rest.lhs\n    \n    # Total tax is (T + 1)% of his annual income\n    total_tax_eq = Eq(total_tax, 0.01 * (T + 1) * income)\n    \n    # Solve the equations\n    solutions = solve((total_tax_eq, tax_for_first_30000, tax_for_rest), (T, income))\n    \n    # Filter positive income solutions as negative income does not make sense\n    valid_solutions = [sol[income] for sol in solutions if sol[income] > 0]\n    \n    return valid_solutions[0] if valid_solutions else None\n\nans = solution()"
    ],
    "a7d31aaf346e44cc80aea145f699fb6c": [
        "def solution():\n    # Pip's sweets\n    sweets_pip = 7\n    # Kevin's sweets (three times Pip's)\n    sweets_kevin = 3 * sweets_pip\n    # Qing Qing's sweets (6 more than Kevin's)\n    sweets_qingqing = sweets_kevin + 6\n    # Total sweets\n    total_sweets = sweets_pip + sweets_kevin + sweets_qingqing\n    return total_sweets\n\nans = solution()"
    ],
    "ceb847740b284e4291e28c8612c7623e": [
        "def solution():\n    speed_per_minute = 60  # meters per minute\n    time_in_seconds = 150\n    time_in_minutes = time_in_seconds / 60  # convert seconds to minutes\n\n    distance = speed_per_minute * time_in_minutes\n    return distance\n\nans = solution()"
    ],
    "81817e35e8504d14a4853709b3f0f4bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    devi, jerry = symbols('devi jerry')\n    \n    # Devi is 8 years older than Jerry\n    equation1 = Eq(devi, jerry + 8)\n    \n    # In 4 years, the ratio of their age will be 5:7\n    equation2 = Eq((devi + 4) / (jerry + 4), 5 / 7)\n  \n    solutions = solve((equation1, equation2), (devi, jerry))\n    \n    return solutions[jerry]\n\nans = solution()"
    ],
    "e147bf0d408e4c8a9fccf6228377aabc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    grey_age, father_age, father_birth_age = symbols('grey_age father_age father_birth_age')\n    \n    equation1 = Eq(father_birth_age, 30)\n    equation2 = Eq(father_age, 3 * grey_age)\n    equation3 = Eq(father_age - grey_age, father_birth_age)\n\n    solutions = solve((equation1, equation2, equation3), (grey_age, father_age, father_birth_age))\n\n    return solutions[father_age]\n\nans = solution()"
    ],
    "2ee25cfde76549e8a74f4b49a19e6576": [
        "def solution():\n    numerator = 2998 + 2999 + 3000\n    denominator = 2997 + 2998 + 2999 + 3000 + 3001\n    ans = 10 * (numerator / denominator)\n    return ans\n\nans = solution()"
    ],
    "31840b7e162d44dcaffb4626ba30ea1a": [
        "def solution():\n    # Since we do not actually \"draw\" in Python, we will represent the \"parts\" graph \n    # in a way that reflects the relationship between the number of apples Pip and Bud have.\n\n    # Let's assign a variable for the number of parts that represent Bud's apples\n    bud_parts = 1\n    pip_parts = 5 * bud_parts\n\n    # We can create a string representation of \"bars\" where each bar represents a part\n    bud_graph = 'Bud:  ' + '|' * bud_parts\n    pip_graph = 'Pip:  ' + '|' * pip_parts\n\n    # Return the strings that represent the \"parts\" graph\n    return bud_graph, pip_graph\n\nans = solution()"
    ],
    "a9ce794d4d724087ae8161cbe09c09a1": [
        "from itertools import permutations\n\ndef solution():\n    digits = [3, 6, 9]\n    all_permutations = permutations(digits, 3)\n    count = len(list(all_permutations))\n    return count\n\nans = solution()"
    ],
    "5e6155d2b3e346cbbc38976ee85ef798": [
        "def solution():\n    total_books = 35\n    layers = 4\n    # Using the Pigeonhole Principle, we divide the total number of books by the number of layers\n    # and then round up to the nearest whole number to find the minimum number of books in the fullest layer.\n    min_books_most_layer = (total_books + layers - 1) // layers\n    return min_books_most_layer\n\nans = solution()"
    ],
    "0875b88ce12741689decc2618d2990ae": [
        "def solution():\n    first_term = 48\n    last_term = 80\n    difference = 4\n\n    # Calculate number of terms in the arithmetic sequence\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    # Calculate the sum of the arithmetic sequence\n    sum_seats = (num_terms * (first_term + last_term)) // 2\n\n    return sum_seats\n\nans = solution()"
    ],
    "2dd0df0b47f04bfb8660c7f9d1f7eab6": [
        "def solution():\n    ans = 0.12 + 0.345 + 0.6789\n    return ans\n\nans = solution()"
    ],
    "3a9016a2cfba4bf48567281430e8ea9b": [
        "def solution():\n    ans = 3 * 37 * 9\n    return ans\n\nans = solution()"
    ],
    "bd2b901e7ebe48c895db12c5cefe8864": [
        "def solution():\n    cows = 523\n    pigs = 172\n    difference = cows - pigs\n    return difference\n\nans = solution()"
    ],
    "32f99dc7770c48f891cc519a0e993603": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 3), (3, 5), (5, 7)]\n    ans = solve_congruence(*congruences)\n\n    # Since we want the number between 100 and 200, we find the correct multiple\n    possible_values = [n for n in range(ans[0], 200, ans[1]) if 100 <= n <= 200]\n\n    return possible_values[0] if possible_values else None\n\nans = solution()"
    ],
    "2f7c543f936b44159eb43f58e41436ea": [
        "def solution():\n    divisor = 12\n    remainder = 3\n    quotient = 12\n\n    dividend = quotient * divisor + remainder\n\n    return dividend\n\nans = solution()"
    ],
    "ed453aff15e04b3fbad1957ab9fac783": [
        "def solution():\n    hundreds_place_options = 2  # can only be 1 or 2, not 0\n    tens_place_options = 3  # can be 0, 1, or 2 but not the same as the hundred's place\n    ones_place_options = 2  # can be the remaining number not used in hundred's or ten's place\n\n    total_combinations = hundreds_place_options * tens_place_options * ones_place_options\n    return total_combinations\n\nans = solution()"
    ],
    "473f107b34bc4eb98a8c18b2d5a71597": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    betty, veron, eliza = symbols('betty veron eliza')\n    \n    equation1 = Eq(eliza, 2 * veron)\n    equation2 = Eq(betty, eliza - 185)\n    equation3 = Eq(betty + veron + eliza, 855)\n    \n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n    \n    return solutions[betty]\n\nans = solution()"
    ],
    "d3a62f3a2a154a3d9ba934079c4f679d": [
        "def solution():\n    # Convert all measurements to centimeters\n    section1 = 30  # already in cm\n    section2 = 1.5 * 100  # 1.5m to cm\n    section3 = 150 / 10  # 150mm to cm\n    \n    # Calculate the total width\n    total_width_cm = section1 + section2 + section3\n    \n    return total_width_cm\n\nans = solution()"
    ],
    "58b2b0f298394a909fc6d284a735e599": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for Melanie's age (melanie) and her uncle's age (uncle)\n    melanie, uncle = symbols('melanie uncle')\n    \n    # Define the equation based on the problem statement\n    # When Melanie is uncle's age, the difference in their ages will still be the same\n    equation = Eq(uncle - melanie, 38 - uncle)\n    \n    # Solve the equation, given that Melanie's current age is 8\n    solutions = solve((equation, Eq(melanie, 8)), (melanie, uncle))\n    \n    return solutions[uncle]\n\nans = solution()"
    ],
    "72bf22ed00544452be7c9b7e3e3c9ea5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for Hazel's current age and Jessica's current age\n    hazel_now, jessica_now = symbols('hazel_now jessica_now')\n    \n    # Let y be the Hazel's age 3 years from now\n    y = symbols('y')\n    \n    # Equation representing Hazel's age 3 years from now\n    equation1 = Eq(hazel_now + 3, y)\n    \n    # Jessica is 3 years younger than Hazel\n    equation2 = Eq(jessica_now, hazel_now - 3)\n    \n    # Solve equations to find current age of Hazel and Jessica\n    solutions = solve((equation1, equation2), (hazel_now, jessica_now))\n    \n    # Calculate total age next year\n    total_age_next_year = (solutions[hazel_now] + 1) + (solutions[jessica_now] + 1)\n    \n    return total_age_next_year\n\nans = solution()"
    ],
    "2927ab094a1741819a4e2a25ebabc6e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let c represent the original number of cows and g represent the original number of goats\n    c, g = symbols('c g')\n\n    # 65% of the animals in a farm were cows, hence 35% were goats\n    # So, we have 0.65*(c+g) = c and 0.35*(c+g) = g as our first set of equations\n    equation1 = Eq(c, 0.65 * (c + g))\n    equation2 = Eq(g, 0.35 * (c + g))\n\n    # When 240 more cows and goats were added, cows become 85% of total\n    # Total animals become c+g+240, new cows become 0.85*(c+g+240)\n    # The number of goats doubled, hence new goats become 2*g\n    equation3 = Eq(0.85 * (c + g + 240), c + 240)\n    equation4 = Eq(2*g, g + 240)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (c, g))\n\n    return solutions[g]\n\nans = solution()"
    ],
    "93d27a37cf174f6c9e8a2ff60b9bbf22": [
        "def solution():\n    pence = 15\n    pounds = 3.00\n    total_pence = pounds * 100\n    percentage = (pence / total_pence) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "4e0dc5edbf7d4e40b8ac2e3de13c21a2": [
        "def solution():\n    count = 0\n    for i in range(1, 51):\n        if (i % 4 == 0) == (i % 6 == 0):  # if turning is same for both multiples, student ends up facing teacher\n            count += 1\n    return count\n\nans = solution()"
    ],
    "9c12fef929b2434bab748c05a0ff93fd": [
        "from datetime import timedelta, datetime\n\ndef solution():\n    start_time = datetime.strptime('15:25', '%H:%M')\n    duration = timedelta(minutes=108)\n    end_time = start_time + duration\n    return end_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "8aad4836c0734930b7d215cbb6b09d6c": [
        "def solution():\n    ans = 18 + 3 - 8 + 17\n    return ans\n\nans = solution()"
    ],
    "2f1be30621994420880174e39997c979": [
        "from fractions import Fraction\n\ndef solution():\n    result = Fraction(19, 8) + Fraction(81, 12) + Fraction(30, 16)\n    return result\n\nans = solution()"
    ],
    "1b593b3bdeb34c18b0cff4c24a506258": [
        "def solution():\n    amy_age_now = 15\n    amy_age_5_years_ago = amy_age_now - 5\n    sisters_age_3_years_later = amy_age_5_years_ago\n    sisters_age_now = sisters_age_3_years_later - 3\n\n    return sisters_age_now\n\nans = solution()"
    ],
    "baeaa1b74d3542bbabb148cbdd2cc14c": [
        "def solution():\n    # The degree of the monomial is the sum of the exponents of all its variables.\n    # Given the monomial -x^3 * y^(2n), its degree is 3 + 2n.\n    # We are told that the degree of the monomial is 5, so:\n    # 3 + 2n = 5\n    # 2n = 5 - 3\n    # 2n = 2\n    # n = 2 / 2\n    # n = 1\n    n = 1\n    return n\n\nans = solution()"
    ],
    "eef4ade5677a43a4ae0df6aeeb38fe6e": [
        "def solution():\n    # There are 13 different cards in terms of numbers and letters.\n    # According to the pigeonhole principle, to ensure that we have at least two cards of the same number or letter,\n    # we have to draw one more card than the number of possibilities.\n    \n    num_different_cards = 13\n    # We have 4 suits, so to ensure we get at least one pair, we draw one card from each suit plus one.\n    cards_to_draw = 4 * num_different_cards + 1\n    \n    return cards_to_draw\n\nans = solution()"
    ],
    "01b407a825884d83acf6b91beaf5d407": [
        "def solution():\n    smallest_number = None\n    for number in range(100, 1000, 2):  # Start from 100, end at 999, step by 2 for even numbers\n        if sum(int(digit) for digit in str(number)) == 21:\n            smallest_number = number\n            break\n    return smallest_number\n\nans = solution()"
    ],
    "d853853301cf40d6a725ec4ab3774957": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 20):\n        for j in range(i + 1, 21):\n            total_sum += i / j\n    return total_sum\n\nans = solution()"
    ],
    "25040bd355be4585bf5a273889285a78": [
        "def solution():\n    part_of_sum = 18  # 3/5 of the whole sum\n    fraction = 3 / 5\n    whole_sum = part_of_sum / fraction\n\n    return whole_sum\n\nans = solution()"
    ],
    "f58db1d3f54446688138665d57db026d": [
        "def solution():\n    ans = 423 * 72\n    return ans\n\nans = solution()"
    ],
    "52a86fa066cb48858c6bc524eece5782": [
        "def solution():\n    x = (20 - 5) / 3\n    return x\n\nans = solution()"
    ],
    "44f2ee1889614bbfb19535bdd92da120": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "3502c215c1be4b7fb69703f1b13e625d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book_price = symbols('book_price')\n    pencil_price = 40 / 100  # convert pence to pounds\n\n    sarah_expense = Eq(8 * book_price + 3 * pencil_price)\n    rebecca_expense = Eq(3 * book_price + 8 * pencil_price)\n\n    equation = Eq(sarah_expense - rebecca_expense, 1.00)\n\n    solved = solve(equation, book_price)\n    \n    return float(solved[0])\n\nans = solution()"
    ],
    "5fa3410a0ede4f5c874b9848f3d5326f": [
        "def solution():\n    even_squares = sum([(2*i)**2 for i in range(1, 11)])\n    odd_squares = sum([(2*i-1)**2 for i in range(1, 11)])\n    ans = even_squares - odd_squares\n    return ans\n\nans = solution()"
    ],
    "d7bced643fdd4eb6bdc74acb29830ef9": [
        "def solution():\n    total_water = 17\n    water_poured_out = 2 * 6\n    remaining_water = total_water - water_poured_out\n    return remaining_water\n\nans = solution()"
    ],
    "017473f68ce348d49eb42bb8dbb458a6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the number of cacti be c and the number of sunflowers be s\n    c, s = symbols('c s')\n    \n    # The cost for cacti is $2 per cactus and the cost for sunflowers is $7 per sunflower\n    cost_cacti = 2 * c\n    cost_sunflowers = 7 * s\n    \n    # Lavi bought 6 more cacti than sunflowers\n    eq1 = Eq(c, s + 6)\n    \n    # The total cost for the cacti and sunflowers is $156\n    eq2 = Eq(cost_cacti + cost_sunflowers, 156)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (c, s))\n    \n    # Get the number of cacti\n    num_cacti = solutions[c]\n    \n    return num_cacti\n\nans = solution()"
    ],
    "0be151f2fbc745f7a608fa9e0444c3fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lfc_initial, mufc_initial = symbols('lfc_initial mufc_initial')\n\n    equation1 = Eq(lfc_initial - mufc_initial, 1000)\n    equation2 = Eq(mufc_initial + 4836, 3 * (lfc_initial + 472))\n\n    solutions = solve((equation1, equation2), (lfc_initial, mufc_initial))\n\n    return solutions[lfc_initial]\n\nans = solution()"
    ],
    "4fed3bbe2a4c479fb032cdfa43d46b2d": [
        "def solution():\n    return 12.5 * 32\n\nans = solution()"
    ],
    "72bb560fb6bc4884bb7499eb0d199c5c": [
        "def solution():\n    andrew_points = 20\n    jack_more_points = 18\n\n    jack_points = andrew_points + jack_more_points\n\n    return jack_points\n\nans = solution()"
    ],
    "da5a959c72974b06be19c4288fbc217c": [
        "from math import comb\n\ndef solution():\n    num_players = 12\n    players_needed = 6\n    ans = comb(num_players, players_needed)\n    return ans\n\nans = solution()"
    ],
    "c5410d85775f48bd93e84ab31405739b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book_price = symbols('book_price')\n    \n    # Sarah's total cost\n    sarah_total = 8 * book_price + 3 * 0.40\n    # Rebecca's total cost\n    rebecca_total = 3 * book_price + 8 * 0.40\n    \n    # The equation for the difference in cost\n    equation = Eq(sarah_total - rebecca_total, 1.00)\n\n    book_cost = solve(equation, book_price)\n\n    return book_cost[0]\n\nans = solution()"
    ],
    "859405caaa7e4a0b9fa498591ea6d75b": [
        "def solution():\n    return 4867 + 285\n\nans = solution()"
    ],
    "15cab5ac2a464bd49b38abf530497521": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(7*x + 3*(x + 5), 45)\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "c23d5f0deb8a4bc7a5a92b52a64b5653": [
        "def solution():\n    # Let's reverse the situation\n    # She had $3 after giving Mike $2, so before that she had $3 + $2.\n    remaining_after_mike = 3 + 2\n\n    # She had twice the amount before giving half to Nini\n    remaining_after_nini = remaining_after_mike * 2\n\n    # Again, she had twice the amount before giving half to Bob\n    remaining_after_bob = remaining_after_nini * 2\n\n    # Lastly, she had twice the amount before giving half to her mother\n    original_amount = remaining_after_bob * 2\n\n    return original_amount\n\nans = solution()"
    ],
    "8cecf1b760794f42ac5164ddf2ddd1b9": [
        "def solution():\n    i = 1\n    digits = ''\n    while len(digits) < 2023:\n        digits += str(i)\n        i += 1\n    return int(digits[2022])\n\nans = solution()"
    ],
    "d564d279579b4412beee324ea716c5ac": [
        "def solution():\n    first_number = 178\n    second_number = first_number - 69\n    sum_of_numbers = 450\n\n    third_number = sum_of_numbers - (first_number + second_number)\n\n    return third_number\n\nans = solution()"
    ],
    "6e612604c8ff4d42b99013c98deabfdd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # sA - number of students in Class A\n    # sB - number of students in Class B\n    # p - total number of peaches\n    sA, sB, p = symbols('sA sB p')\n\n    # Creating equations based on the problem statement\n    equation1 = Eq(p, 5 * sA + 10)\n    equation2 = Eq(p + 2, 8 * sB)\n    equation3 = Eq(sA, sB + 3)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (sA, sB, p))\n\n    # The number of peaches Eddie gets\n    return solutions[p]\n\nans = solution()"
    ],
    "50cd7efd01b841d298218aea08ed2f91": [
        "def solution():\n    today_year = 98\n    future_year = 1\n    age_on_birthday = 11\n\n    # Calculate the difference in years, but since we are crossing a century (from '98 to '01),\n    # the future year is actually 101\n    year_difference = (100 - today_year) + future_year\n\n    # Calculate the age on 31/12/01 by adding the difference of the years to the current age\n    age_on_future_date = age_on_birthday + year_difference\n\n    return age_on_future_date\n\nans = solution()"
    ],
    "68189bcaa99d4e9f9c3e3ce95e7937fd": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['4', '6', '2', '5']\n    all_combinations = [''.join(p) for p in permutations(digits)]\n    odd_numbers = [int(num) for num in all_combinations if int(num) % 2 != 0]\n    return min(odd_numbers)\n\nans = solution()"
    ],
    "76be802a2529408ebd6445587693be90": [
        "def solution():\n    ans = 9.95 - 2.6 - 3.42\n    return ans\n\nans = solution()"
    ],
    "81a3546d49f540918fa6687b12bf0b34": [
        "def solution():\n    total_students = 40\n    per_boat = 6\n    \n    trips = (total_students + per_boat - 1) // per_boat\n\n    return trips\n\nans = solution()"
    ],
    "c1de6601e4b04d30ad771a324ae51e3c": [
        "def solution():\n    first_term = 2\n    common_difference = 2\n    nth_term = 36\n    n = (nth_term - first_term) / common_difference + 1\n    return int(n)\n\nans = solution()"
    ],
    "1d72b15c9167478a811748cdd734865e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    t, c = symbols('t c')  # t for t-shirts, c for caps\n\n    # Since the ratio of t-shirts to caps is 8:5, we can write this relationship as t/c = 8/5\n    equation1 = Eq(t/c, 8/5)\n\n    # Siti sold 1/4 of the T-shirts and 1/5 of the caps\n    # 1/4 of t-shirts at $3 each and 1/5 of caps at $5 each equals $132\n    equation2 = Eq((1/4) * t * 3 + (1/5) * c * 5, 132)\n\n    # Solve the system of equations for t and c\n    solutions = solve((equation1, equation2), (t, c))\n\n    # Since we only want to find the number of T-shirts (t), return that value\n    return solutions[t]\n\nans = solution()"
    ],
    "0cddcd3bc30743f58a6fa95ed48ba314": [
        "def solution():\n    # Let the number of game cards Eric initially has be x.\n    # Then Joe has 7*x game cards.\n    # Joe gives some cards to Eric, both end up with 168 cards.\n    # Equation: 7*x - (168 - x) = 168\n    # Solve for x to find the number of cards Joe gives to Eric.\n\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7*x - (168 - x), 168)\n    x_value = solve(equation, x)\n\n    # Calculate the number of game cards Joe gives to Eric.\n    cards_given = 168 - x_value[0]\n    return cards_given\n\nans = solution()"
    ],
    "085c8151173f4b7d90be8a69b00d7f5d": [
        "def solution():\n    from sympy import isprime\n\n    count = 0\n    for tens_digit in (2, 3, 5, 7):\n        for ones_digit in (2, 3, 5, 7):\n            N = 10 * tens_digit + ones_digit\n            if isprime(N):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e2695aa79cb340d99906881fc1d6a0c6": [
        "def solution():\n    initial_catch = 8\n    run_away = 5\n    library_catch = 9\n\n    final_catch = initial_catch - run_away + library_catch\n\n    return final_catch\n\nans = solution()"
    ],
    "f0328bec52924f7ea69d1ae80d116453": [
        "def solution():\n    time_for_one_picture = 10  # minutes\n    total_time_available = 80  # minutes (1 hour and 20 minutes)\n\n    num_pictures = total_time_available / time_for_one_picture\n\n    return int(num_pictures)\n\nans = solution()"
    ],
    "7b92cabf616c4f65bb3f245acc3311d5": [
        "def solution():\n    ways = 0\n    for group1 in range(1, 10):\n        group2 = 10 - group1\n        if group1 != group2:\n            ways += 1\n    # Every division is counted twice (e.g., (1,9) and (9,1)), so we halve the result.\n    return ways // 2\n\nans = solution()"
    ],
    "6520b25ec5ca47c28184d097d5c1d50f": [
        "def solution():\n    from math import factorial\n    num_students = 5\n    num_ways = factorial(num_students)\n    return num_ways\n\nans = solution()"
    ],
    "b2064a45faa94ab689a5ee8b42de5b1c": [
        "def solution():\n    # In a circle, if number 6 is directly opposite to 19, the circle is divided into two equal parts by them.\n    # The difference between the numbers is the half-circle.\n    half_circle_count = 19 - 6\n\n    # The total number of people is twice the half-circle count (to make a full circle).\n    total_people = 2 * half_circle_count\n\n    return total_people\n\nans = solution()"
    ],
    "6a68efce3a3843c488c04405fe0ad806": [
        "def solution():\n    amy_swimming = 14\n    joanne_swimming = 5\n    more_times = amy_swimming - joanne_swimming\n    return more_times\n\nans = solution()"
    ],
    "292666d407aa47a1b8822e94b934f869": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    a, b, c, d = symbols('a b c d', integer=True)\n    eq = Eq(a*1000 + b*100 + c*10 + d + a*100 + b*10 + c + a*10 + b + a, 1370)\n    sol = solve(eq)\n    abcd_value = sol[a]*1000 + sol[b]*100 + sol[c]*10 + sol[d]\n    return abcd_value\n\nans = solution()"
    ],
    "4464e412391748539179d461f02021f4": [
        "def solution():\n    total_pears = 38\n    \n    for anne_pears in range(1, total_pears):\n        charlie_pears = total_pears - anne_pears\n        if anne_pears - 6 == charlie_pears + 6:\n            return anne_pears\n\nans = solution()"
    ],
    "5f4b4e56afb34cf5a1144d2bc36161da": [
        "def solution():\n    # Sachin's rate of cleaning per hour\n    sachin_rate = 1 / 3\n    # Peter's rate of cleaning per hour\n    peter_rate = 1 / 6\n    # Combined rate of cleaning per hour\n    combined_rate = sachin_rate + peter_rate\n\n    # Total time taken if they work together\n    time_combined = 1 / combined_rate\n\n    return time_combined\n\nans = solution()"
    ],
    "cc9705da6c674505ab7de37d248f4508": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    isaac, joseph = symbols('isaac joseph')\n    \n    # Initial situation: Isaac had 5 times as many stamps as Joseph\n    initial_condition = Eq(isaac, 5 * joseph)\n\n    # After receiving stamps: Joseph had 9/10 as many stamps as Isaac\n    after_condition = Eq(joseph + 154, 9/10 * isaac)\n    \n    # Solving the system of equations\n    solutions = solve((initial_condition, after_condition), (isaac, joseph))\n    \n    return solutions[isaac]\n\nans = solution()"
    ],
    "899b1a4b796c49099d270e74392468e4": [
        "def solution():\n    from math import factorial\n\n    # Calculate factorial of 29\n    n = factorial(29)\n    \n    count = 0\n    # Count trailing zeroes by dividing by 10 repeatedly\n    while n % 10 == 0:\n        count += 1\n        n //= 10\n\n    return count\n\nans = solution()"
    ],
    "d98f7fbf1401483cbb8a9febb9b267a5": [
        "def solution():\n    N = int('12345654321', 8)\n    remainder_7 = N % 7\n    remainder_9 = N % 9\n    return remainder_7 + remainder_9\n\nans = solution()"
    ],
    "1bb4ac60011c4f049e418cf89d7b6aca": [
        "def solution():\n    # Linda's speed ratio is 3, Ted's is 4. Their relative speed ratio is 3+4 = 7\n    # When Linda has jogged 1200m, she has covered 3 parts of the relative speed.\n    # We now find the distance for each part.\n    part_distance = 1200 / 3\n\n    # The whole path is 7 parts (Linda's 3 parts + Ted's 4 parts).\n    path_length = part_distance * 7\n\n    return path_length\n\nans = solution()"
    ],
    "13bdfa0cc0bf4ec8b5035a9b4a3cba96": [
        "def solution():\n    count = 0\n    for year in range(2018, 2109):\n        if sum(map(int, str(year))) == 18:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "f4d8b1a7fd8f46d0a9ef67f2bee482c1": [
        "def solution():\n    # A 5-digit number is divisible by 9 if the sum of its digits is divisible by 9.\n    # For the number 2018A, the sum of its digits is 2 + 0 + 1 + 8 + A\n    # We are trying to find a value for A such that the sum is divisible by 9.\n    # The sum without A is 11, so the possible values for A which make the sum a multiple of 9 can be obtained by (9 - (11 % 9)) % 9\n\n    digit_sum_without_A = 11\n    A = (9 - (digit_sum_without_A % 9)) % 9\n\n    # Now that we have A, we want to find the remainder when the number 2018A is divided by 8.\n    # We only need to consider the last 3 digits (18A), since the remainder of a number when divided by 8 only depends on the last 3 digits.\n\n    last_three_digits = 180 + A\n\n    remainder = last_three_digits % 8\n\n    return remainder\n\nans = solution()"
    ],
    "7634476c9aa54ec59121ed35be37a90a": [
        "def solution():\n    # Squirrel Ryan is in front of Squirrel Elvis with 1 squirrel between them\n    # Ryan has 5 squirrels in front of him\n    # Meaning when counting Ryan, the squirrel between them, and Elvis,\n    # There are additionally 7 squirrels behind Elvis\n    # Therefore, the total number of squirrels is:\n    \n    total_squirrels = 5 + 1 + 1 + 1 + 7  # Ryan + 1 squirrel between + Elvis + 7 squirrels behind\n    return total_squirrels\n\nans = solution()"
    ],
    "ccda4529057344dfb3239b232b55def3": [
        "def solution():\n    x = symbols('x')\n\n    equation = Eq(6*x + 3*x + 2, 38 + 5*x - 8*x)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3372b3b3a25d471db3a7b9b84e20d407": [
        "def solution():\n    numerator = 2019 + 2018 * 2020\n    denominator = 2019 * 2020 - 1\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "de7d03220ef44866b5c5a28b228aa86c": [
        "def solution():\n    workers = 3\n    days = 3\n    work_done_by_all = workers * days\n    days_needed_by_one = work_done_by_all / 1  # Since we want to know for 1 worker\n\n    return days_needed_by_one\n\nans = solution()"
    ],
    "be80ef03c92f4f92945f77d21a554dbf": [
        "def solution():\n    # This problem is essentially asking for the number of derangements, also known as subfactorials or !n\n    # where n is the number of items. For 6 items this is often denoted as !6.\n    # The formula for derangement is !n = (n - 1) * (!(n - 1) + !(n - 2))\n\n    def subfactorial(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n - 1) * (subfactorial(n - 1) + subfactorial(n - 2))\n\n    ans = subfactorial(6)\n    return ans\n\nans = solution()"
    ],
    "260e6647f054406db07646bdfcd45cc2": [
        "def solution():\n    principal = 3600\n    interest_rate = 0.02\n    interest = principal * interest_rate\n    return interest\n\nans = solution()"
    ],
    "c76e6054330d410d8964478169646a8e": [
        "def solution():\n    percentage = 25\n    total_weight = 64\n\n    ans = (percentage / 100) * total_weight\n    return ans\n\nans = solution()"
    ],
    "f5dda3a779a843e88e20668719067b5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((3*x + 3)/6, (5*x - 2)/8)\n    \n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "15a6e721c67f4f68bcb7869cb424dc30": [
        "def solution():\n    return 45 * 0.30\n\nans = solution()"
    ],
    "c41136a149b7455588eedcd3638a6d6e": [
        "def solution():\n    sum_odd_numbers = sum(range(1, 20, 2))\n    return sum_odd_numbers\n\nans = solution()"
    ],
    "ba12d160c6704062bce29f06d2df0413": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack_current_age = symbols('jack_current_age')\n\n    equation = Eq(jack_current_age - 5, (jack_current_age + 8) / 2)\n\n    solutions = solve(equation, jack_current_age)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "4127bb2d659e42e7b67a826610a830ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    p, q = symbols('p q')  # p is the number of pupils in School P, q is the number of pupils in School Q initially\n    \n    # Initial ratio equation: p/q = 2/3\n    equation1 = Eq(p/q, 2/3)\n    \n    # New ratio after 240 pupils were admitted to each school: (p+240)/(q+240) = 3/4\n    equation2 = Eq((p + 240) / (q + 240), 3/4)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (p, q))\n    \n    return solutions[p]\n\nans = solution()"
    ],
    "d1ef65d2af0d48fca0d26f7460c255c2": [
        "def solution():\n    # Nora spent 70% of her money on a bag\n    percentage_spent_on_bag = 70\n\n    # The remainder after buying the bag\n    remainder = 100 - percentage_spent_on_bag\n\n    # Nora spent 3/8 of the remainder on a purse\n    fraction_spent_on_purse = 3 / 8\n\n    # Percentage of the original amount spent on the purse\n    percentage_spent_on_purse = (remainder * fraction_spent_on_purse)\n\n    return percentage_spent_on_purse\n\nans = solution()"
    ],
    "ad7c476fa787456a984de908cbf3274a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    kenny, timmy, ron = symbols('kenny timmy ron')\n    \n    equation1 = Eq(timmy, kenny - 12)\n    equation2 = Eq(ron, kenny + 20)\n    equation3 = Eq(kenny + timmy + ron, 284)\n    \n    solutions = solve((equation1, equation2, equation3), (kenny, timmy, ron))\n\n    return solutions[ron]\n\nans = solution()"
    ],
    "e6126aee30d340e584a91ebb8121b3b4": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    total_letters = len(\"EDUCATION\")\n    total_vowels = len(\"EUAIO\")\n    \n    # Number of ways to arrange all the letters\n    total_arrangements = factorial(total_letters)\n    \n    # Number of ways to arrange the vowels\n    vowel_arrangements = factorial(total_vowels)\n    \n    # Number of ways to arrange the letters treating all vowels as a single letter\n    arrangements_vowels_together = factorial(total_letters - total_vowels + 1) * vowel_arrangements\n    \n    # Subtract the number of arrangements where vowels are together \n    # from the total number of arrangements\n    arrangements_vowels_apart = total_arrangements - arrangements_vowels_together\n    \n    return arrangements_vowels_apart\n\nans = solution()"
    ],
    "f045ccc90cd4400c86e6a51f2a370f28": [
        "def solution():\n    return 86.3 + 7\n\nans = solution()"
    ],
    "cda98aa296634bf2a385a6527a02e9c2": [
        "def solution():\n    total_candies = 5 * 12  # original total candies\n    new_total_students = 5 + 1  # one more student joins\n    candies_each_student = total_candies // new_total_students  # redivide candies\n\n    return candies_each_student\n\nans = solution()"
    ],
    "1d9d7ae4443a4d1a8f150b0ff35e0812": [
        "def solution():\n    # Since BP and CP bisect the angles ABC and ACB respectively,\n    # Let's denote m∠ABP = m∠PBC = x and m∠ACP = m∠PCB = y.\n    # Then we have:\n    # m∠ABC = 2 * x and m∠ACB = 2 * y\n    # In a triangle, the sum of the angles is 180 degrees.\n    # So, m∠BAC + m∠ABC + m∠ACB = 180\n    # 50 + 2 * x + 2 * y = 180\n    # x + y = 65 since (180 - 50) / 2 = 65\n    # m∠BPC is an exterior angle to ∆ABP and ∆APC, so it is equal to x + y\n    # Thus m∠BPC = 65 degrees.\n    \n    angle_BPC = 65\n    return angle_BPC\n\nans = solution()"
    ],
    "d68ae3a33d98427494ecd3ac34702711": [
        "def solution():\n    def equation(x):\n        return 0.3 * x + 0.7 * (20 - x) - 20 * 0.54\n\n    from scipy.optimize import fsolve\n    x = fsolve(equation, 0)[0]\n    return x\n\nans = solution()"
    ],
    "a5723a387628481d828499d1c34bdcfc": [
        "def solution():\n    total_sweets = 11  # She can buy 11 sweets initially\n    wrappers = 11      # She gets 11 wrappers from those sweets\n\n    # Exchange wrappers for more sweets as long as she has enough wrappers\n    while wrappers >= 3:\n        exchange_sweets = wrappers // 3\n        total_sweets += exchange_sweets  # Add the new sweets to the total\n        wrappers = wrappers % 3 + exchange_sweets  # Update the number of wrappers\n\n    return total_sweets\n\nans = solution()"
    ],
    "44bd36d5b38b44949074bb84feb11ca3": [
        "def solution():\n    arrival_hour = 11\n    arrival_minute = 40\n    stay_hours = 4\n    stay_minutes = 50\n\n    departure_hour = arrival_hour + stay_hours\n    departure_minute = arrival_minute + stay_minutes\n\n    if departure_minute >= 60:\n        departure_hour += 1\n        departure_minute -= 60\n\n    if departure_hour >= 24:\n        departure_hour -= 24\n\n    return f\"{departure_hour}:{departure_minute:02d}\"\n\nans = solution()"
    ],
    "cf273ad7cc974df890c0f43328a5de3e": [
        "def solution():\n    for num in range(10, 100):\n        if num % 5 == 4 and num % 7 == 4:\n            return num\n\nans = solution()"
    ],
    "60143fac73a641d4afc2cffe6b15a9e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for each bird type\n    two_tailed, three_tailed, six_tailed, eight_tailed = symbols('two_tailed three_tailed six_tailed eight_tailed')\n\n    # Number of heads for each bird type\n    heads_two_tailed = two_tailed\n    heads_three_tailed = three_tailed\n    heads_six_tailed = six_tailed\n    heads_eight_tailed = 2 * eight_tailed\n\n    # Number of tails for each bird type\n    tails_two_tailed = 2 * two_tailed\n    tails_three_tailed = 3 * three_tailed\n    tails_six_tailed = 6 * six_tailed\n    tails_eight_tailed = 8 * eight_tailed\n\n    # Equations based on the problem statements\n    equation1 = Eq(two_tailed, 5 + 2 * eight_tailed)\n    equation2 = Eq(three_tailed, 2 + six_tailed / 2)\n    total_heads = heads_two_tailed + heads_three_tailed + heads_six_tailed + heads_eight_tailed\n    total_tails = tails_two_tailed + tails_three_tailed + tails_six_tailed + tails_eight_tailed\n    equation3 = Eq(total_tails, 4 * total_heads - 2)\n    equation4 = Eq(total_heads - total_tails, 241)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (two_tailed, three_tailed, six_tailed, eight_tailed))\n\n    return solutions[three_tailed]\n\nans = solution()"
    ],
    "c8bc4498b3bb47adb5838b21d3e0bd8b": [
        "def solution():\n    ans = sum(range(1, 11))\n    return ans\n\nans = solution()"
    ],
    "c756926469794615a094702ab4e29ea3": [
        "def solution():\n    return 421 * 11\n\nans = solution()"
    ],
    "34e244879a6646619b79a8414c6a5f70": [
        "def solution():\n    # Calculate the total weight of sweets in grams\n    total_weight_grams = 5 * 1000  # Convert kg to grams\n    \n    # Calculate the total number of bags\n    weight_per_bag = 250  # weight in grams for each bag\n    total_bags = total_weight_grams / weight_per_bag\n    \n    # Calculate the total revenue from selling all bags\n    price_per_bag = 0.65  # price in pounds for each bag\n    total_revenue = total_bags * price_per_bag\n    \n    # Calculate the total cost\n    cost = 10  # cost in pounds for all sweets\n    \n    # Calculate profit\n    profit = total_revenue - cost\n    \n    # Calculate percentage profit\n    percentage_profit = (profit / cost) * 100\n    \n    return percentage_profit\n\nans = solution()"
    ],
    "4683962764924f4684ed92eb7591a368": [
        "def solution():\n    # Number of roads between Ayton to Beeton (A-B)\n    A_B = 4\n    # Number of roads between Beeton to Ceeton (B-C)\n    B_C = 5\n    # Number of roads between Ceeton to Deeton (C-D)\n    C_D = 6\n    # Number of direct roads between Ayton to Deeton (A-D)\n    A_D = 3\n    \n    # Ways to travel from Ayton to Deeton through Beeton and Ceeton \n    A_BCD = A_B * B_C * C_D\n    \n    # Total different ways \n    total_ways = A_BCD + A_D\n\n    return total_ways\n\nans = solution()"
    ],
    "1eb4f3669f2a43a5ba508ec8beae550e": [
        "def solution():\n    numerator = 15\n    denominator = 20\n    ratio = numerator / denominator\n    missing_value = 3 / ratio\n\n    return missing_value\n\nans = solution()"
    ],
    "37136a98a87e4ccc8a809b51309fdb50": [
        "def solution():\n    # 10th term is 23, 15th term is 38\n    # The difference between two consecutive terms is the same (common difference)\n    # Find the common difference\n    common_difference = (38 - 23) / (15 - 10)\n\n    # Now find the 12th term using the 10th term\n    # nth term = a + (n - 1) * d\n    tenth_term = 23\n    twelfth_term = tenth_term + (12 - 10) * common_difference\n\n    return twelfth_term\n\nans = solution()"
    ],
    "29a1fb0ba439450d99b96fff93b44d3a": [
        "def solution():\n    num_list = [1003.67, 108.98, 9.08, 102.33, 32.02, -3.08]\n    ans = sum(num_list)\n    return ans\n\nans = solution()"
    ],
    "5faf0bb3bd074227a53f6f2ca2666324": [
        "def solution():\n    count = 0\n    for number in range(1, 2017):\n        factors = [2, 3, 4]\n        underline_count = sum(1 for factor in factors if number % factor == 0)\n        if underline_count == 2:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "4241ca142c384e5db8c27de3f5d5df25": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the amount Joe had at first as 'joe'\n    joe = symbols('joe')\n\n    # Equation: (Sally's initial amount - 2.50) + (Joe's initial amount - 2.50) = Remaining total\n    equation = Eq((3.75 - 2.50) + (joe - 2.50), 5.00)\n\n    # Solve for 'joe'\n    solution = solve(equation, joe)\n\n    return solution[joe]\n\nans = solution()"
    ],
    "0a0f38ce5c7546d5abe2f8fcc81598f0": [
        "def solution():\n    # Average number of trees planted in the first 3 days\n    avg_first_3_days = 135\n    # Average number of trees planted in the last 5 days\n    avg_last_5_days = 151\n\n    # Total number of trees planted in the first 3 days\n    total_first_3_days = avg_first_3_days * 3\n    # Total number of trees planted in the last 5 days\n    total_last_5_days = avg_last_5_days * 5\n\n    # Total number of trees planted\n    total_trees = total_first_3_days + total_last_5_days\n\n    # Total days\n    total_days = 8\n\n    # Average number of trees planted per day\n    avg_per_day = total_trees / total_days\n\n    return avg_per_day\n\nans = solution()"
    ],
    "72e107fe7fc142fd8ecabcbd205ebd7a": [
        "def solution():\n    return 876 * 3\n\nans = solution()"
    ],
    "bb982f52c6d041079ae774e83f7e8a99": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the magic number as a symbol\n    magic_number = symbols('magic_number')\n\n    # Set up the equation according to the problem statement\n    equation = Eq(149 + magic_number, 5 * (21 + magic_number))\n\n    # Solve the equation for the magic number\n    solution = solve(equation, magic_number)\n\n    # Extract the solution from the result\n    return solution[0]\n\nans = solution()"
    ],
    "66db5c6e664741e08931a2b39f1d7db8": [
        "def solution():\n    # Initialize the count to 0\n    count = 0\n    \n    # Loop from 100 to 998 (the range of 3-digit even numbers)\n    for number in range(100, 1000, 2):\n        # Check the sum of the digits\n        if sum(map(int, str(number))) == 7:\n            count += 1\n    \n    return count\n\nans = solution()"
    ],
    "06968ea362d247569a9767c8f284e0e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n    first_number = 202 + magic_number\n    second_number = 22 + magic_number\n    \n    equation = Eq(first_number, 6 * second_number)\n\n    solution = solve(equation, magic_number)\n\n    return solution[magic_number]\n\nans = solution()"
    ],
    "caaf98f1ce924c36986670403ceffbf8": [
        "def solution():\n    total_diff = 32\n    for girls_per_side in range(1, 100):\n        boys_per_side = girls_per_side + 2\n        boys = boys_per_side * boys_per_side\n        girls = (boys_per_side - 2) * (boys_per_side - 2)\n        if boys - girls == total_diff:\n            total_students = boys + girls\n            return total_students\n\nans = solution()"
    ],
    "064b4c0781ad453690eeb8941886a949": [
        "from math import comb\n\ndef solution():\n    total_salads = 15\n    total_soups = 20\n    total_vegetables = 12\n    total_sandwiches = 6\n\n    # Calculate the number of ways to combine two different meal options.\n    salads_soups = comb(total_salads, 1) * comb(total_soups, 1)\n    salads_vegetables = comb(total_salads, 1) * comb(total_vegetables, 1)\n    salads_sandwiches = comb(total_salads, 1) * comb(total_sandwiches, 1)\n    soups_vegetables = comb(total_soups, 1) * comb(total_vegetables, 1)\n    soups_sandwiches = comb(total_soups, 1) * comb(total_sandwiches, 1)\n    vegetables_sandwiches = comb(total_vegetables, 1) * comb(total_sandwiches, 1)\n\n    # Add all the different combinations.\n    ans = (\n        salads_soups +\n        salads_vegetables +\n        salads_sandwiches +\n        soups_vegetables +\n        soups_sandwiches +\n        vegetables_sandwiches\n    )\n\n    return ans\n\nans = solution()"
    ],
    "bb7fbef0b6c04ccc86f554baf2f4420e": [
        "def solution():\n    from sympy import isprime\n    \n    n = 3  # Start with the first prime number that, when added to 2, results in another prime (5).\n    while True:\n        # Check if all the numbers are prime\n        if isprime(n) and isprime(n + 2) and isprime(n + 4) and isprime(n + 106) and isprime(n + 308):\n            return n\n        n += 2  # Increment by 2, as even numbers greater than 2 cannot be prime\n\nans = solution()"
    ],
    "fcc29a22bd5b45e4abf794b10c54e303": [
        "def solution():\n    return 6.2 - 3.7\n\nans = solution()"
    ],
    "6fc14f87857d4b2ab8bc4618b7d72da4": [
        "def solution():\n    total_plasters = 12 * 30\n    plasters_per_day = 20\n    days_last = total_plasters / plasters_per_day\n    return days_last\n\nans = solution()"
    ],
    "4d30cc9b8bd246a78b9505752672ee09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    mangoes, strawberries = symbols('mangoes strawberries')\n\n    # mangoes is 448g more than strawberries\n    equation1 = Eq(mangoes, strawberries + 448)\n    # after giving away 900g, strawberries is twice the mass of mangoes\n    equation2 = Eq(strawberries, 2 * (mangoes - 900))\n\n    solution_dict = solve((equation1, equation2), (mangoes, strawberries))\n    return solution_dict[strawberries]\n\nans = solution()"
    ],
    "5bb673202e8c4412b7bf28637be9a334": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the total number of items Rena bought\n    x = symbols('x')\n    \n    # Number of apples is 2/3 of total items\n    apples = 2/3 * x\n    \n    # Number of bananas is 1/9 of total items\n    bananas = 1/9 * x\n    \n    # Lemons are the remaining items\n    lemons = x - (apples + bananas)\n    \n    # Rena bought 12 more apples than lemons\n    equation = Eq(apples - lemons, 12)\n\n    # Solve for x\n    total_items = solve(equation, x)\n    \n    # Calculate the number of lemons\n    num_lemons = total_items[0] - (2/3 * total_items[0] + 1/9 * total_items[0])\n    \n    return int(num_lemons)\n\nans = solution()"
    ],
    "598caa8f690845ce82ae845429eed710": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let m represent the original amount of money Max had\n    # Let a represent the original amount of money Anthony had\n    m, a = symbols('m a')\n\n    # If Max bought the chocolates, the remaining ratio of money between Max and Anthony is 2:5\n    equation1 = Eq((m - 12) / a, 2/5)\n\n    # If Anthony bought the chocolates, the remaining ratio of money between Max and Anthony is 8:13\n    equation2 = Eq(m / (a - 12), 8/13)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (m, a))\n\n    return solutions[m]\n\nans = solution()"
    ],
    "5b2783f2b2b94d62984318ff167ab65d": [
        "def solution():\n    # Let's assume Liz initially had 12 red and 12 blue stickers which is a\n    # common multiple of 3 and 4 to simplify the calculations\n    initial_stickers_each_color = 12\n    total_initial_stickers = 2 * initial_stickers_each_color  # total stickers\n    \n    # She gave away 2/3 of red stickers, so she is left with 1/3 red stickers\n    red_left = (1 - 2/3) * initial_stickers_each_color\n    \n    # She is left with 1/4 of all of her stickers\n    total_left = total_initial_stickers / 4\n    \n    # Since we know the amount of red stickers left, we can find the blue stickers left\n    blue_left = total_left - red_left\n    \n    # Find the initial amount of blue stickers\n    initial_blue = initial_stickers_each_color\n    \n    # Calculate the fraction of blue stickers she gave away\n    blue_given_away_fraction = (initial_blue - blue_left) / initial_blue\n    \n    return blue_given_away_fraction\n\nans = solution()"
    ],
    "2df9daedfb014f1a9790c3fcebc2c6cc": [
        "from math import factorial\n\ndef solution():\n    # To ensure each child gets at least one pen, we distribute 6 pens first\n    remaining_pens = 20 - 6\n    \n    # Since we are distributing remaining pens to 6 kids, this is equivalent\n    # to placing 'remaining_pens' indistinguishable objects into '6' distinguishable boxes,\n    # which is a problem of combinations with repetition:\n    # The formula for combinations with repetition is C(n + r - 1, r),\n    # where n is the number of types of items and r is the number of items to choose.\n    # Here, n = remaining_pens + 1 (for the 6 kids) and r = 6 (the number of kids).\n\n    n = remaining_pens + 1\n    r = 6 - 1 # subtract 1 because the formula uses 'boxes' which is one less than the number of kids\n\n    # Calculate combinations with repetition\n    ans = factorial(n + r - 1) // (factorial(r) * factorial(n - 1))\n\n    return ans\n\nans = solution()"
    ],
    "774b551f44f642d4ad38d30236c3d19d": [
        "def solution():\n    last_digit_of_base = 4\n    \n    # Powers of 4 repeat their last digit in cycles of 2: 4, 6, 4, 6, ...\n    cycle_length = 2\n    \n    # Since we only need the last digit, we can use the remainder when divided by the cycle length\n    power_remainder = 2022 % cycle_length\n    \n    if power_remainder == 0:\n        last_digit = 6\n    else:\n        last_digit = 4\n\n    ans = last_digit\n    return ans\n\nans = solution()"
    ],
    "934a4d14b18e49949c6ef24167ffb74e": [
        "def solution():\n    for largest in range(1, 17):\n        for a in range(1, largest):\n            for b in range(1, a):\n                for c in range(1, b):\n                    if a + b + c + largest == 16:\n                        return largest\n\nans = solution()"
    ],
    "3c6d061b54774cefa8ae106251ed9e95": [
        "def solution():\n    first_term = 30\n    last_term = 70\n    difference = 4\n    num_terms = ((last_term - first_term) // difference) + 1\n    total_pages = (num_terms / 2) * (first_term + last_term)\n\n    return int(total_pages)\n\nans = solution()"
    ],
    "189eefe9efb74acf9b1ba115d8e2b1cc": [
        "def solution():\n    largest_5_digit = 99999\n    smallest_6_digit = 100000\n    difference = smallest_6_digit - largest_5_digit\n    return difference\n\nans = solution()"
    ],
    "22169485afe346008751bdb1b79de0ac": [
        "def solution():\n    odd_digits = [1, 3, 5]  # Odd digits for the ones place\n    count = 0\n\n    # Loop over possible hundreds place digits\n    for hundreds in range(1, 7):\n        # Loop over possible tens place digits\n        for tens in range(1, 7):\n            # Loop over possible ones place digits (only odd digits)\n            for ones in odd_digits:\n                if (hundreds != tens) and (hundreds != ones) and (tens != ones):\n                    count += 1\n\n    return count\n\nans = solution()"
    ],
    "efedc63bacb049028c7f9d9de27653a3": [
        "def solution():\n    # Define the length in meters for comparison\n    lengths_in_meters = [\n        10 / 1000,       # 10 millimetres in meters\n        100 / 100,       # 100 centimetres in meters\n        10,              # 10 meters\n        2 * 1000,        # 2 kilometres in meters\n        2800 / 100,      # 2800 centimetres in meters\n        2500,            # 2500 meters\n        100 / 1000,      # 100 millimetres in meters\n        100              # 100 meters\n    ]\n    \n    # Find the index of the smallest length\n    min_length_index = lengths_in_meters.index(min(lengths_in_meters))\n    \n    # Return the smallest length string based on the index\n    length_labels = [\n        \"10 millimetres\",\n        \"100 centimetres\",\n        \"10 metres\",\n        \"2 kilometres\",\n        \"2800 centimetres\",\n        \"2500 metres\",\n        \"100 millimetres\",\n        \"100 metres\"\n    ]\n    return length_labels[min_length_index]\n\nans = solution()"
    ],
    "875c9cac1ffb4452aabd90fa4729b651": [
        "def solution():\n    swim_only = 20 - 10\n    basketball_only = 25 - 10\n    both = 10\n    neither = 9\n\n    total_students = swim_only + basketball_only + both + neither\n\n    return total_students\n\nans = solution()"
    ],
    "e8d4c70e0af44824834deba59032af0c": [
        "def solution():\n    terms = [3, 7, 11, 15, 19]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "61cfc0ac0f1449fa967d6076176b1137": [
        "def solution():\n    return 324 * 24\n\nans = solution()"
    ],
    "2a20ffa4a69c4484999bb958ab96dc80": [
        "def solution():\n    current_steps = 1991\n    while True:\n        current_steps += 1\n        if str(current_steps) == str(current_steps)[::-1]:\n            return current_steps - 1991\n\nans = solution()"
    ],
    "e2f136c1d0e3438fb5a5222737d65150": [
        "def solution():\n    ans = 34.2 + 2.96 + 0.0364\n    return ans\n\nans = solution()"
    ],
    "a51a939a7af045ed9ba206d87ac10cdc": [
        "def solution():\n    count = 0\n    for year in range(2018, 2109):\n        if sum(map(int, str(year))) == 18:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "afe76018408f45b5a643b041061c21be": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "18b56edf99804cd18f944ac9024bf259": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B, C = symbols('A B C')\n    \n    equation1 = Eq(A, 2/3 * B)\n    equation2 = Eq(B, 4/5 * C)\n    equation3 = Eq(C, A + 21)\n    \n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    \n    return solutions[A]\n\nans = solution()"
    ],
    "b36c82106098479eb7454b8150d50947": [
        "def solution():\n    return 608 * 56\n\nans = solution()"
    ],
    "bf559d9d7adc46e5928853ca81300c0d": [
        "def solution():\n    # Let the number of ducks be d and the number of cows be c\n    # Since cows have 4 legs and ducks have 2 legs, we can set up the following equations:\n    # c + d = 25 (total number of animals)\n    # 4c + 2d = 68 (total number of legs)\n    # We can solve these equations to find the number of ducks (d)\n\n    # From the first equation: c = 25 - d\n    # Substitute c in the second equation:\n    # 4(25 - d) + 2d = 68\n    # 100 - 4d + 2d = 68\n    # -2d = 68 - 100\n    # -2d = -32\n    # d = 16 (number of ducks)\n\n    return 16\n\nans = solution()"
    ],
    "fe1dad1b4cf74ae287ebf8d0b28bb3b4": [
        "def solution():\n    # This problem can be solved inductively, thinking about each triangle added and how it can intersect.\n    # Maximum parts formed by triangle n = Maximum parts formed by triangle n-1 + n\n    \n    triangles = 5\n    parts = 1  # Starting with one single part without any triangle\n    for n in range(1, triangles + 1):\n        parts += n\n    \n    return parts\n\nans = solution()"
    ],
    "28e62637c4fc4eadb594a6d0da417836": [
        "def solution():\n    ans = 602 // 7\n    return ans\n\nans = solution()"
    ],
    "fc746990a19a47ab9601f133eccf8da2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    avg_height_groups = 122.5\n    total_children = 11 + 5\n    girls_count = 11\n    boys_count = 5\n    girls_avg_height = symbols('girls_avg_height')\n\n    boys_avg_height = girls_avg_height - 3.2\n    total_height = avg_height_groups * total_children\n    equation = Eq(girls_avg_height * girls_count + boys_avg_height * boys_count, total_height)\n\n    result = solve(equation, girls_avg_height)\n\n    return result[0]\n\nans = solution()"
    ],
    "c9fc66837ed74b1eb8a4707c4398b6d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bookmarks, pupils = symbols('bookmarks pupils')  # Define symbols for the number of bookmarks and pupils\n\n    # Equation 1: If giving 4 bookmarks to each pupil, 8 bookmarks will be left\n    equation1 = Eq(bookmarks - 4 * pupils, 8)\n\n    # Equation 2: If giving 6 bookmarks to each pupil, he will be short of 10 bookmarks\n    equation2 = Eq(bookmarks - 6 * pupils, -10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (bookmarks, pupils))\n\n    # Return the number of bookmarks\n    return solutions[bookmarks]\n\nans = solution()"
    ],
    "ea4169e9382046cda7491251be10687b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n\n    # Equations based on problem statement\n    equation1 = Eq(girls + boys, 70)  # The total number of students\n    equation2 = Eq(70*girls + 63*boys, 70*66)  # The total marks\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (girls, boys))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "ed7781ecfa264cb686cd6671df26577b": [
        "def solution():\n    n1, a_n1 = 32, 157\n    n2, a_n2 = 108, 537\n    \n    difference = (a_n2 - a_n1) / (n2 - n1)\n    first_term = a_n1 - (n1 - 1) * difference\n    \n    return int(first_term)\n\nans = solution()"
    ],
    "398f40d1810d4daf96c3048cfc41ed7c": [
        "def solution():\n    kate_remaining = 42\n    kate_ate_fraction = 1/4\n\n    # Since Kate had 42 left after eating 1/4, she had 56 before eating\n    jane_total = kate_remaining / (1 - kate_ate_fraction)\n\n    jane_ate_fraction = 1/3\n    jane_ate_number = 4\n\n    # Jane had (56 + 4) before eating 1/3 + 4 of the candies\n    donna_remaining = (jane_total + jane_ate_number) / (1 - jane_ate_fraction)\n\n    donna_kept_fraction = 1/2\n    donna_kept_number = 3\n\n    # Donna had remaining candies before giving to Jane\n    # Let's denote the starting candies Donna had as x\n    # Then, x = (donna_remaining - 3) * 2\n    donna_starting = (donna_remaining - donna_kept_number) / donna_kept_fraction\n\n    return donna_starting\n\nans = solution()"
    ],
    "1e6694bd51114d55895dbe80e548b123": [
        "def solution():\n    # Here we consider the number of passes as steps in permutations\n    # for the three passes, since A cannot receive the ball back immediately,\n    # thus for the first pass, there are 3 choices (B, C, or D).\n    # For the second pass, the person who got the ball from A can either\n    # pass it to the two remaining people (excluding A and self), which would again\n    # be 2 choices.\n    # For the third pass, the person who got the ball second can now pass it either\n    # back to A or to the remaining one person, i.e., 2 choices again.\n\n    # Number of ways for the first pass\n    first_pass = 3\n    # Number of ways for the second pass\n    second_pass = 2\n    # Number of ways for the third pass (to bring the ball back to A)\n    third_pass = 2\n\n    # The total number of different methods is the product of the choices\n    total_methods = first_pass * second_pass * third_pass\n\n    return total_methods\n\nans = solution()"
    ],
    "cafcc058aa184b18aab818d577427a22": [
        "def solution():\n    # Number of terms in the sequence\n    n = 9\n    # Sum of terms in the sequence\n    total_sum = 1503\n    # Since they are consecutive odd numbers, they form an arithmetic sequence.\n    # The sum of an arithmetic sequence can be calculated as: S = n/2 * (first_term + last_term)\n    # We also know that the difference (d) between terms is 2\n    # If we call the first term \"a\", we can express the last term as \"a + 2*(n-1)\"\n    # Now we can rewrite the sum formula as: S = n/2 * (2a + 2*(n-1))\n    # Simplifying gives S = n * (a + (n-1))\n    \n    # Solving for the first term \"a\" gives us: a = (S/n) - (n-1)\n    a = (total_sum/n) - (n-1)\n    \n    return int(a)\n\nans = solution()"
    ],
    "c6c7e58ef9c24768a4622a112505b93d": [
        "def solution():\n    cost_per_day = 5  # cost of a bag of crisps in pence\n    days = 5  # number of days\n    total_cost = cost_per_day * days  # total cost over 5 days\n    \n    return total_cost\n\nans = solution()"
    ],
    "046de3a2a2bc40f1bb251c3bf9fae045": [
        "def solution():\n    return (55 - 3) // 4\n\nans = solution()"
    ],
    "cc823defea034e0fbb575cefdc9584df": [
        "def solution():\n    return 342 + 469\n\nans = solution()"
    ],
    "61be272e45f5417780499f0cb4d747d2": [
        "def solution():\n    ans = (36 * 21) / (6 * 7)\n    return ans\n\nans = solution()"
    ],
    "d0be78861f1d41c8bd8c7de01241ca3a": [
        "def solution():\n    for Q in range(1, 10):  # Q can be any digit from 1 to 9\n        for P in range(10):  # P can be any digit from 0 to 9\n            if len(set(str(Q) + str(P))) == 2:  # Ensure Q and P are different\n                QP = int(f'{Q}{P}')\n                return QP  # Return the two-digit number QP\n\nans = solution()"
    ],
    "88aebab1fdb9459da60e672b70e23921": [
        "def solution():\n    # Let x be the number of storybooks Anthea originally has.\n    # According to the problem, after giving 4 storybooks to Anthea,\n    # Jason and Anthea will have the same number of storybooks.\n    # This can be expressed as:\n    # Jason's_final_storybooks = Anthea's_final_storybooks\n    # (Jason's_original_storybooks - 4) = (Anthea's_original_storybooks + 4)\n    # 30 - 4 = x + 4\n    # Solve for x to find the number of storybooks Anthea originally has.\n    x = (30 - 4) - 4\n\n    # The difference in the number of storybooks originally is:\n    # Jason's_original_storybooks - Anthea's_original_storybooks\n    # 30 - x\n    difference = 30 - x\n    return difference\n\nans = solution()"
    ],
    "8c7bad2823b64ce9bd000eca653f9f98": [
        "def solution():\n    lcm = None\n    for i in range(1, 41):  # We only need to check up to the least common multiple of 4 and 10\n        if i % 4 == 0 and i % 10 == 0:\n            lcm = i\n            break\n    return lcm\n\nans = solution()"
    ],
    "7e40ac2cb8734521aa2bcc3baf6d6cd1": [
        "def solution():\n    ans = sum(range(27, 34))\n    return ans\n\nans = solution()"
    ],
    "42175aff49384f8fb2e1b8e87cd5d6dc": [
        "def solution():\n    ans = 0.98 + 1.98 + 2.98 + 3.98\n    return ans\n\nans = solution()"
    ],
    "dfc638bbb6ae4aabb28cb4b9417fc631": [
        "def solution():\n    speed = 2  # William's speed in metres per second\n    time_in_minutes = 12  # Time in minutes\n    time_in_seconds = time_in_minutes * 60  # Convert time to seconds\n    distance = speed * time_in_seconds  # Distance formula: speed * time\n\n    return distance\n\nans = solution()"
    ],
    "090de4dbbc22403c821128cff3d594be": [
        "def solution():\n    ans = (2020 * 68) + (505 * 128)\n    return ans\n\nans = solution()"
    ],
    "abbaed0cf4b24b7a96c8d6bc432d9ddb": [
        "def solution():\n    xavier_sugar = 100 * 0.25\n    yelena_sugar = 500 * 0.55\n    carol_sugar = 400 * 0.35\n    total_sugar = xavier_sugar + yelena_sugar + carol_sugar\n    total_solution = 100 + 500 + 400\n    concentration = total_sugar / total_solution\n    return concentration\n\nans = solution()"
    ],
    "e6223ed171b341058c807c2c490548d2": [
        "def solution():\n   A_efficiency = 2\n   B_efficiency = 1\n   B_days = symbols('B_days')\n   A_days = B_days - 12\n   equation = Eq(1/A_days + 1/B_days, 1)\n\n   solutions = solve(equation, B_days)\n   B_days_solution = solutions[0]\n   A_days_solution = 2 * B_days_solution - 12\n\n   total_efficiency = A_efficiency/A_days_solution + B_efficiency/B_days_solution\n   days_together = 1 / total_efficiency\n\n   return days_together\n\nans = solution()"
    ],
    "aef98a3088f64f3c987d8e8cad49eb89": [
        "def solution():\n    total_paid = 10\n    change_received = 4.83\n    newspaper_cost = 2.20\n\n    tissues_cost = total_paid - change_received - newspaper_cost\n\n    return tissues_cost\n\nans = solution()"
    ],
    "ab364c81a2864910ac73de45139fb81c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b represent the initial number of boys (which is also the initial number of girls)\n    b = symbols('b')\n\n    # Construct the equation according to the problem statement\n    equation = Eq(b - (3/5) * b - (b - 42), 12)\n\n    # Solve the equation\n    num_students = solve(equation, b)\n\n    # The total number of students at first is twice the number of boys (since boys = girls)\n    return 2 * num_students[0]\n\nans = solution()"
    ],
    "c34811dd64254c04b657b905af68cf0f": [
        "def solution():\n    return 111111111 * 99999999\n\nans = solution()"
    ],
    "9a23b61c00aa4f4f9ce7d319f75b093d": [
        "def solution():\n    baskets_of_tomatoes = 27\n    baskets_of_cucumbers = 3 + (3 * baskets_of_tomatoes)\n    return baskets_of_cucumbers\n\nans = solution()"
    ],
    "c44b7e0f636c4a559b50166c1518c540": [
        "def solution():\n    # Convert minutes to hours\n    late_time_hours = 12 / 60\n    early_time_hours = 4 / 60\n\n    # Let the distance from his home to office be 'd' km\n    # Speed * Time = Distance\n    # When late, time taken = (d / 3) hours\n    # When early, time taken = (d / 5) hours\n    \n    # We have two equations based on the information given:\n    # (distance / slow_speed) - actual_time = late_time\n    # (distance / fast_speed) - actual_time = -early_time\n    \n    # Using proportion and inverse proportion, we get the equation:\n    # (d / slow_speed) - (d / fast_speed) = late_time + early_time\n    # (d / 3) - (d / 5) = late_time_hours + early_time_hours\n    \n    # Solve for d:\n    d = (3 * 5 * (late_time_hours + early_time_hours)) / (5 - 3)\n    \n    return d\n\nans = solution()"
    ],
    "5f9a3caf3a844c859338c8ee6c84403c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let rachel's candy be r and alice's candy be a\n    rachel, alice = symbols('rachel alice')\n    \n    # If Rachel gives Alice 10 pieces, they will have the same number of candies\n    eq1 = Eq(rachel - 10, alice + 10)\n    \n    # If Alice gives Rachel 10 pieces, Rachel will have 4 more than 3 times Alice's candies\n    eq2 = Eq(rachel + 10, 3 * (alice - 10) + 4)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (rachel, alice))\n    \n    # Calculate the total number of candies they originally had\n    total_candies = solutions[rachel] + solutions[alice]\n    \n    return total_candies\n\nans = solution()"
    ],
    "c7ddd97daf6145ed96ee9ebd4abbe31a": [
        "from math import factorial\n\ndef solution():\n    digits = 3  # Number of digits to choose from (1, 2, 3)\n\n    # 1-digit numbers\n    one_digit = digits\n\n    # 2-digit numbers\n    two_digit = factorial(digits) // factorial(digits - 2)\n\n    # 3-digit numbers (use all digits)\n    three_digit = factorial(digits)\n\n    total_numbers = one_digit + two_digit + three_digit\n    return total_numbers\n\nans = solution()"
    ],
    "a914eab1c1f143d09f08b68c60165f8a": [
        "def solution():\n    cost_per_case = 6.25\n    total_cost_for_12_cases = cost_per_case * 12\n    return total_cost_for_12_cases\n\nans = solution()"
    ],
    "de26875a56ac47ad9dcf5dcc75dde7cf": [
        "def solution():\n    return 13 - (-8)\n\nans = solution()"
    ],
    "c60c26e3a9984f1fb74edb0acff647db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    original_ratio = Eq(boys / girls, 3 / 2)\n    new_ratio = Eq((boys + 12) / (girls + 12), 19 / 14)\n\n    solutions = solve((original_ratio, new_ratio), (boys, girls))\n    \n    total_children_afternoon = solutions[boys] + solutions[girls] + 12 + 12\n\n    return total_children_afternoon\n\nans = solution()"
    ],
    "b3d11c4825554079b29f7c4d34b2ed81": [
        "def solution():\n    value_A = 40\n    value_B = value_A / 2\n    value_C = value_B / 2\n\n    total_value = value_A + value_B + value_C\n\n    return total_value\n\nans = solution()"
    ],
    "5baea30fbec6495a8b6283b09656e48a": [
        "def solution():\n    total_pupils = 112 + 1098\n    pupils_each_room = total_pupils // 2\n    return pupils_each_room\n\nans = solution()"
    ],
    "5bd1eec767354db6b84f9b6d57d59263": [
        "from math import factorial\n\ndef solution():\n    # For four different colored socks\n    num_ways_4_diff_socks = factorial(4)\n    \n    # For two different colored pairs of socks (since the pairs are identical, we divide by factorial(2) twice)\n    num_ways_2_pairs_socks = factorial(4) // (factorial(2) * factorial(2))\n    \n    ans = (num_ways_4_diff_socks, num_ways_2_pairs_socks)\n    return ans\n\nans = solution()"
    ],
    "b24c8d3c218c4aacac0618f7c854fd25": [
        "def solution():\n    red_tiles = 0\n    green_tiles = 0\n    n = 1  # Start with the outermost layer\n\n    while n ** 2 <= 400:\n        layer_tiles = (n ** 2) - ((n - 2) ** 2 if (n - 2) > 0 else 0)\n\n        if n % 2 == 1:\n            red_tiles += layer_tiles\n        else:\n            green_tiles += layer_tiles\n        \n        n += 1\n    \n    dominant_color = 'red' if red_tiles > green_tiles else 'green'\n    tiles_more = abs(red_tiles - green_tiles)\n\n    return (dominant_color, tiles_more)\n\nans = solution()"
    ],
    "b13f6c28aaeb458aaa713c2e08380709": [
        "def solution():\n    length_iron_bar1 = 23\n    length_iron_bar2 = 37\n    length_welded_part = 3\n\n    full_length = length_iron_bar1 + length_iron_bar2 - length_welded_part\n\n    return full_length\n\nans = solution()"
    ],
    "504138d5ab434544b07d09526512e8d0": [
        "def solution():\n    from math import sqrt\n    \n    # Given: Period on Earth (T_earth) and gravitational acceleration on Earth (g_earth)\n    T_earth = 1  # in seconds\n    g_earth = 9.81  # in m/s^2, approximate value\n\n    # The period of a simple pendulum T is given by the formula T = 2 * pi * sqrt(L/g)\n    # where L is the length of the pendulum and g is the gravitational acceleration\n\n    # If the period on Earth is 1 s, we can find the length L of the pendulum using the formula\n    # Rearranging the formula for the period, we get L = g_earth * (T_earth / (2 * pi))**2\n\n    # Calculate the length of the pendulum (L) using the given Earth period\n    L = g_earth * (T_earth / (2 * 3.141592653589793))**2\n\n    # The gravitational acceleration on the Moon (g_moon) is one-sixth of its value on Earth\n    g_moon = g_earth / 6\n\n    # Now we calculate the period on the Moon (T_moon) using the same formula, with g_moon\n    T_moon = 2 * 3.141592653589793 * sqrt(L / g_moon)\n\n    return T_moon\n\nans = solution()"
    ],
    "10f23d6da9944476ae1f44b6fd44944d": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime('1/03/2023', '%d/%m/%Y')\n    end_date = datetime.strptime('15/04/2023', '%d/%m/%Y')\n    \n    return (end_date - start_date).days + 1\n\nans = solution()"
    ],
    "c3766f132f16414bb326ea29c9942ad7": [
        "def solution():\n    x_squared = 7\n    x_fourth = x_squared ** 2\n    return x_fourth\n\nans = solution()"
    ],
    "1d5693592dcd4d74af7216902ea3469a": [
        "def solution():\n    work_per_day_A = 1 / 15\n    work_per_day_B = 1 / 10\n    work_done_in_3_days = 3 * (work_per_day_A + work_per_day_B)\n    remaining_work = 1 - work_done_in_3_days\n    days_for_B_to_finish = remaining_work / work_per_day_B\n    return days_for_B_to_finish\n\nans = solution()"
    ],
    "fe9c604c26c54da584f4631fb51fabca": [
        "def solution():\n    return 265 * 30\n\nans = solution()"
    ],
    "8fbd1f3154514d90b348d98dc9937be2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of right and wrong questions for Justin and William\n    justin_right, william_right = symbols('justin_right william_right', integer=True)\n    \n    # Justin's score is the number of right answers multiplied by 6 minus wrong answers multiplied by 2\n    justin_score = 6 * justin_right - 2 * (10 - justin_right)\n    \n    # William's score is the number of right answers multiplied by 6 minus wrong answers multiplied by 2\n    william_score = 6 * william_right - 2 * (10 - william_right)\n    \n    # Equation1: Justin's score is 24 points more than William's score\n    equation1 = Eq(justin_score, william_score + 24)\n    \n    # Equation2: Combined, they scored 96 points\n    equation2 = Eq(justin_score + william_score, 96)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (justin_right, william_right))\n    \n    return solutions[william_right]\n\nans = solution()"
    ],
    "8d3535d489694c9ab72858ec3e09c1ee": [
        "def solution():\n    side_length = 10  # Because 100 people are standing in a square array, the side length of the square is the square root of 100\n    outer_people = 4 * (side_length - 1)  # Each side contributes side_length-1 people, excluding the corners counted multiple times\n    return outer_people\n\nans = solution()"
    ],
    "6aff689afc7c437db64fc2e27c02833a": [
        "def solution():\n    first_term = 50\n    difference = -4  # The sequence is decreasing\n\n    # In an arithmetic sequence the nth term can be found by:\n    # nth_term = first_term + (n - 1) * difference\n    # We have to find n such that nth_term < 0\n    # Therefore, first_term + (n - 1) * difference < 0\n    # n - 1 > first_term / -difference\n    # n > (first_term / -difference) + 1\n\n    n = (first_term / -difference) + 1\n\n    return int(n)\n\nans = solution()"
    ],
    "0f1117672a63416cbd3434112e8ffbdd": [
        "def solution():\n    # Given the following clues:\n    # 1. A is a five-digit number.\n    # 2. The ten thousands digit is the sum of the other four digits.\n    # 3. The thousands digit is twice as much as the hundreds digit.\n    # 4. The tens digit is half the thousands digit.\n    # 5. The sum of the thousands and tens digits is 11.\n    # 6. The units digit is twice the tens digit.\n\n    # Since the sum of the thousands and tens digits is 11 and the thousands digit is twice as much as the tens digit,\n    # then the only pairs that work are (8, 3) and (6, 5)\n    # But considering the thousands digit is twice as much as the hundreds digit, it cannot be 3, thus it is 6.\n    # This makes the tens digit 5.\n\n    # Now, let's find the hundreds digit.\n    hundreds_digit = 6 // 2  # The thousands digit is twice as much as the hundreds digit, so we divide by 2.\n\n    # The tens digit is 5 and units digit is twice that, so it's 10 but since it's a digit, it must be 0.\n    units_digit = 5 * 2\n    if units_digit == 10:\n        units_digit = 0\n\n    # Finally, we calculate the ten thousands digit using the sum of the other four digits.\n    ten_thousands_digit = hundreds_digit + 6 + 5 + units_digit\n\n    # Concatenate the digits to form the number A.\n    A = int(f\"{ten_thousands_digit}{6}{hundreds_digit}{5}{units_digit}\")\n\n    return A\n\nans = solution()"
    ],
    "6564fd0ca13b4e9b8f99f3ea28add3e9": [
        "def solution():\n    remaining_after_sister = 280 / (1 - 1/8) # Calculate how much he had after giving his sister and before giving his mum\n    original_amount = remaining_after_sister / (1 - 3/7) # Calculate original amount before giving his sister\n    return original_amount\n\nans = solution()"
    ],
    "e77e2351b78345d6962d155aaf8c5efa": [
        "def solution():\n    loafs_per_cups = 6 / 5\n    desired_loafs = 24\n    cups_needed = desired_loafs / loafs_per_cups\n    return cups_needed\n\nans = solution()"
    ],
    "10195dd0d1d04543a0ade2917338e294": [
        "def solution():\n    # Since the piles are not of equal number of cards, the winning strategy involves maintaining a \n    # situation where the number of cards in A is double the number in B after Jane's turn.\n    # Therefore, Tom should start by making the number of cards in A double the number in B.\n    a_cards = 88\n    b_cards = 52\n    \n    # Calculate the difference needed to make A's cards double the amount of B's cards.\n    target_diff = b_cards * 2 - a_cards\n    \n    # Tom should take this difference from pile A in his first turn.\n    a_cards -= target_diff\n\n    # After this, Tom should always double whatever Jane takes from either pile in the following rounds.\n    ans = target_diff\n    return ans\n\nans = solution()"
    ],
    "ad2a343c34cb44ac88504dd245fdcc8b": [
        "def solution():\n    # Since at least one student gets at least 3 apples,\n    # We can 'reserve' the 3 apples for that student first,\n    # and distribute the remaining apples.\n    remaining_apples = 80 - 3\n\n    # Since every student gets at least 1 apple, we can subtract\n    # the total remaining apples from 80 to find the maximum class size.\n    # This is because if we give each student 1 apple, then count how many\n    # students we can give another one to, it would be the same as the number of\n    # remaining apples after reserving the initial 3.\n    max_class_size = 80 - remaining_apples\n\n    return max_class_size\n\nans = solution()"
    ],
    "5dbed78cb0054ac8b310230d17f9c26e": [
        "def solution():\n    temperatures = [-10, 16, 9, 2]\n    max_temp = max(temperatures)\n    min_temp = min(temperatures)\n    difference = max_temp - min_temp\n    return difference\n\nans = solution()"
    ],
    "1848fbe1d98944c9b1f806488a4b51a7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, white, black = symbols('red white black')\n\n    equation1 = Eq(red / white, 1 / 2)\n    equation2 = Eq(white / black, 3 / 4)\n\n    total_balls = Eq(red + white + black, 34)\n  \n    solutions = solve((equation1, equation2, total_balls), (red, white, black))\n\n    return solutions[red]\n\nans = solution()"
    ],
    "a54b55467ea147c6b9f5372a54243a74": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cheesecake, logcake = symbols('cheesecake logcake')\n    \n    equation1 = Eq(6 * cheesecake + 7 * logcake, 1426)\n    equation2 = Eq(4 * cheesecake, 3 * logcake)\n\n    solutions = solve((equation1, equation2), (cheesecake, logcake))\n\n    cost = 10 * solutions[cheesecake] + 10 * solutions[logcake]\n    \n    return cost\n\nans = solution()"
    ],
    "9563da65f57444518660d7e7ae11fc79": [
        "def solution():\n    total_amount = 51.20\n    people = 8\n    per_person = total_amount / people\n    return per_person\n\nans = solution()"
    ],
    "c913d4e63fce41d2aaca6a3e2a3cf6f4": [
        "def solution():\n    # Because we know that the last digit of the factorial of any number greater than or equal to 5 is zero\n    # (since 5 * 2 = 10 gives a zero at the end, and all numbers above 5! will have at least one 5 and even number),\n    # we can confidently say that the last digit of 2014! is zero.\n    ans = 0\n    return ans\n\nans = solution()"
    ],
    "7b4cba3fe33741189ed2ca4a5ed157f2": [
        "def solution():\n    return (4 / 50) * 100\n\nans = solution()"
    ],
    "82fc1a902d704c95a9aa6a164228805e": [
        "def solution():\n    base_area = 5 * 5\n    hole_area = 1 * 1\n    effective_base_area = base_area - hole_area\n    height = 480 / effective_base_area\n\n    return height\n\nans = solution()"
    ],
    "80d14d6dace648ab9a745e93b255b8c9": [
        "def solution():\n    total = 0\n    for i in range(1, 11):\n        total += i * (2 * i - 1)\n    return total\n\nans = solution()"
    ],
    "4d8068dd3c0d45ac9d058b56e9ab8e71": [
        "def solution():\n    pencil_cost = 5\n    pen_cost = 15\n    \n    pencils_per_pen = pen_cost // pencil_cost\n    \n    return pencils_per_pen\n\nans = solution()"
    ],
    "d3e59c50fe3a4e3c8c9fc840de30fe66": [
        "def solution():\n    # Given series: 1-2+3-4+5-...-1000+1001\n    # It's made up of pairs like 1-2, 3-4, ..., 999-1000 where each pair sums to -1.\n    # The series is a sequence of 1001 numbers.\n\n    # Since we have 1001 numbers, 1000 will be part of the pairs and 1 will be left out.\n    num_pairs = 1000 // 2\n\n    # Each pair contributes a value of -1 to the sum.\n    sum_pairs = num_pairs * -1\n\n    # adding the contribution of the last unpaired number (1001)\n    total_sum = sum_pairs + 1001\n\n    return total_sum\n\nans = solution()"
    ],
    "9572661330c44c6fa75e2c4321ce76ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let y represent the initial number of yellow beads\n    # Let g represent the initial number of green beads\n    y, g = symbols('y g')\n\n    # Initial ratio of yellow to green beads is 3:2\n    initial_ratio = Eq(y/g, 3/2)\n\n    # After adding 5 yellow beads and 20 green beads, the ratio of green to yellow is 3:2\n    new_ratio = Eq((g + 20)/(y + 5), 3/2)\n\n    # Solving the system of equations to find the initial numbers of y and g\n    solution = solve((initial_ratio, new_ratio), (y, g))\n\n    # Total number of beads at first is the sum of initial yellow and green beads\n    total_beads_at_first = solution[y] + solution[g]\n\n    return total_beads_at_first\n\nans = solution()"
    ],
    "f9c8b3de0b744d5bb1ceeff64db1f6f8": [
        "def solution():\n    ans = 12 + 102 + 1002 + 10002\n    return ans\n\nans = solution()"
    ],
    "d4f12453aa6f49b4880fbca48045adeb": [
        "def solution():\n    count = 0\n    for x in range(1, 13):\n        for y in range(1, 13):\n            for z in range(1, 13):\n                if x + y + z == 13:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "b4cb09af0f6e4f17bdbc0e57212c2ab5": [
        "def solution():\n    marbles_given_to_brother = 26\n    marbles_given_to_sisters = 13 * 2\n    marbles_left = 16\n\n    initial_marbles = marbles_given_to_brother + marbles_given_to_sisters + marbles_left\n    return initial_marbles\n\nans = solution()"
    ],
    "d66ce8f472054e71aa236e8e613a5157": [
        "def solution():\n    count = 0\n    # Single and double-digit palindromes (11-99)\n    for num in range(1, 10):\n        count += 1  # Single digit palindromes\n        count += 1  # Double-digit palindromes\n    \n    # Triple-digit palindromes (101-999)\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            count += 1  # Formed by the pattern \"aba\"\n\n    return count\n\nans = solution()"
    ],
    "84fb655f45e54baa81690c12194c4cfb": [
        "def solution():\n    ans = sum(2 * i - 1 for i in range(1, 21))\n    return ans\n\nans = solution()"
    ],
    "71c8465f7f6740fb84c60f24c0fa5b05": [
        "def solution():\n    return 617 + 385\n\nans = solution()"
    ],
    "8ac3b604d92f4e359866a78b06048dfd": [
        "def solution():\n    return 2570 / 10000\n\nans = solution()"
    ],
    "a5cd848f2ed5457aa4de5ac1376a568b": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['0', '1', '3', '6', '8', '9']\n    even_digits = ['0', '6', '8']\n    \n    count = 0\n    for perm in permutations(digits, 4):\n        if perm[-1] in even_digits and perm[0] != '0':\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a2686828e0aa405aab8754b3f12eaf64": [
        "def solution():\n    # Amy's speed in miles per hour\n    speed_amy = 60\n    # Christen's speed in miles per hour\n    speed_christen = 40\n    # They meet after 4 hours\n    time_meeting = 4\n    \n    # The distance covered by Amy in 4 hours\n    distance_amy = speed_amy * time_meeting\n    # The distance covered by Christen in 4 hours\n    distance_christen = speed_christen * time_meeting\n    # The total distance between the starting points is the sum of the distances covered\n    total_distance = distance_amy + distance_christen\n\n    # Time for Christen to reach Amy's starting point is the total distance divided by Christen's speed\n    time_for_christen_to_reach_amy = total_distance / speed_christen\n\n    return time_for_christen_to_reach_amy\n\nans = solution()"
    ],
    "cecaf4be2c7445afbef79df483f09fe6": [
        "def solution():\n    total_questions = 50\n    correct_mark = 4\n    wrong_mark = -1\n    total_marks = 110\n\n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        if correct * correct_mark + wrong * wrong_mark == total_marks:\n            return correct\n\nans = solution()"
    ],
    "b8eda4ea253243a6bc4591a500731f57": [
        "def solution():\n    total_cakes = 420\n    vanilla_cakes = (2 / 7) * total_cakes\n    banana_cakes = (35 / 100) * total_cakes\n    lemon_and_chocolate_cakes = total_cakes - vanilla_cakes - banana_cakes\n\n    # The ratio of lemon to chocolate cakes is 4:5, so for every 9 parts, 4 are lemon cakes and 5 are chocolate cakes\n    ratio_total_part = 4 + 5\n    # Finding the number of parts that represent lemon cakes\n    lemon_cakes_part = 4\n    lemon_cakes = (lemon_cakes_part / ratio_total_part) * lemon_and_chocolate_cakes\n\n    return int(lemon_cakes)\n\nans = solution()"
    ],
    "8a1fa4f39e19492fb5019958052fc68b": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):  # iterate through all three-digit numbers\n        str_num = str(i)\n        \n        # Check if the number has exactly two different digits\n        if len(set(str_num)) == 2: \n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "ae83fe9ef869429482fffd4b5f259176": [
        "def solution():\n    from math import lcm\n    return lcm(2, 3, 4, 5, 6)\n\nans = solution()"
    ],
    "37eda3d2a7f44391ba89ab6bf862df70": [
        "def solution():\n    average_first_four = 89\n    total_first_four = average_first_four * 4\n    fifth_assignment_score = 94\n    total_five_assignments = total_first_four + fifth_assignment_score\n    average_five_assignments = total_five_assignments / 5\n    \n    return average_five_assignments\n\nans = solution()"
    ],
    "a8d1ad2b149e49638120daa2fb4f7e50": [
        "def solution():\n    # There are 3 people: Cici, Lily, April\n    # Lily has to pass to either Cici or April first, then two options here.\n    # Whomever receives the ball first has to pass to the third person, again two options.\n    # So there are a total of 2*2 = 4 possible passing ways.\n    \n    passing_ways = 2 * 2\n    return passing_ways\n\nans = solution()"
    ],
    "1f9f29d4bf5649379a9cfd3c9d5fcb04": [
        "def solution():\n    wibble_arms = 6\n    wibbles = 11\n    total_arms = 81\n    wobble_arms = 5\n\n    total_wibble_arms = wibble_arms * wibbles\n    remaining_arms = total_arms - total_wibble_arms\n\n    wobbles = remaining_arms / wobble_arms\n    \n    return int(wobbles)\n\nans = solution()"
    ],
    "0e57c290f8c748f5a8c86e2a3bf96219": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of books Lily sends to Judy\n    x = symbols('x')\n    # Let l be the number of books Lily has\n    l = symbols('l')\n    # Let j be the number of books Judy has\n    j = symbols('j')\n    \n    # If Lily sends x books to Judy, both will have the same amount\n    # So, Lily will have l - x books and Judy will have j + x books\n    # and both amounts will be equal\n    equation1 = Eq(l - x, j + x)\n    \n    # The difference between the number of books Lily and Judy have is also x\n    equation2 = Eq(l - j, x)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (l, j, x))\n\n    # The answer is the difference l - j which is the same as x \n    ans = solutions[x]\n    return ans\n\nans = solution()"
    ],
    "59de4a78f41748248348566692dedf92": [
        "from sympy import primerange, isprime\n\ndef solution():\n    for a in primerange(1, 179):\n        for b in primerange(1, 179):\n            if 7 * a + 9 * b == 179:\n                if isprime(a) and isprime(b):\n                    return a + b\n\nans = solution()"
    ],
    "0cc3cd452b624c9498a48d64322243b8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bilal, chloe, david, emily = symbols('alan bilal chloe david emily')\n    alan_amount = 74\n    bilal_amount = 86\n\n    # Chloe collects twice as much as David\n    equation1 = Eq(chloe, 2 * david)\n    # David raises three times as much as Emily\n    equation2 = Eq(david, 3 * emily)\n    # Sum of all the collections\n    equation3 = Eq(alan + bilal + chloe + david + emily, 400)\n    # Substitute Alan and Bilal's amounts\n    equation4 = Eq(alan, alan_amount)\n    equation5 = Eq(bilal, bilal_amount)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "c214cce759fc4604b8bd4aac04f2f467": [
        "def solution():\n    boys = 18\n    girls = 2 * boys\n    return girls\n\nans = solution()"
    ],
    "1933faa02cf240199d07d7e6c69c3b86": [
        "def solution():\n    return 0.15 * 420\n\nans = solution()"
    ],
    "0833ee006bff4737af597938f80a6679": [
        "def solution():\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for ones in range(0, 10):\n                if (hundreds + tens + ones == 15) and (tens == 2 * hundreds) and (hundreds == ones + 1):\n                    return 100 * hundreds + 10 * tens + ones\n\nans = solution()"
    ],
    "84bcfd2527634a87ba73c95b75479cb4": [
        "def solution():\n    total_minutes = 32 * (1/8) * (1/6) * (1/4)\n    total_seconds = total_minutes * 60\n    return total_seconds\n\nans = solution()"
    ],
    "939569b8df414ce2859c11258d03bfc9": [
        "def solution():\n    return (113 - 5) / 9\n\nans = solution()"
    ],
    "e7d9f592443542ef9f580c770df2ce1a": [
        "def solution():\n    # Initial value of the operation on the first two numbers.\n    a = 2016\n    b = 2015\n\n    # Compute the first operation.\n    ans = a + b - (a * b) / 910\n\n    # Apply the defined operation from 2014 to 1.\n    for n in range(2014, 0, -1):\n        ans = ans + n - (ans * n) / 910\n\n    return ans\n\nans = solution()"
    ],
    "ef69916912d64c749a2c5414ca933b35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    t = symbols('t')  # Time in hours\n\n    # Given speeds in km/h\n    speed_maverick = 15\n    speed_kelvin = 10\n    # Kelvin starts 10 km ahead\n    start_distance_kelvin = 10\n    # Maverick’s estimated catch up time in hours (24 min = 0.4 hours)\n    estimated_time_maverick = 24 / 60\n\n    # Set up the equation based on distance\n    # Maverick's distance = Kelvin's distance + 10 km\n    equation = Eq(speed_maverick * t, speed_kelvin * t + start_distance_kelvin)\n\n    # Solve the equation\n    actual_time = solve(equation, t)\n\n    # Get the actual time (in hours) and convert to minutes\n    actual_time_minutes = actual_time[0] * 60\n\n    # Comparing the times\n    if actual_time_minutes > 24:\n        return actual_time_minutes  # Kelvin was correct\n    else:\n        return 24  # Maverick was correct\n\nans = solution()"
    ],
    "7d33980148da4ca2a7359bd7f16eac27": [
        "def solution():\n    boys = 3\n    girls = 4\n\n    # The correct way is to use the multiplication principle, not addition.\n    ways_to_pick_lead_singers = boys * girls\n\n    return ways_to_pick_lead_singers\n\nans = solution()"
    ],
    "cc2d217fd9294779a151ac26e6edcda8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Declare symbols for the two unknown numbers\n    x, y = symbols('x y')\n\n    # Define the equations based on the problem statement\n    equation1 = Eq(x + y, 80)\n    equation2 = Eq(x - y, 40)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return min(solutions[x], solutions[y])\n\nans = solution()"
    ],
    "4b1aed0b9dfb4774968b86622359a2d5": [
        "def solution():\n    total_questions = 6\n    correct_mark = 5\n    incorrect_deduction = -2\n    total_score = 23\n    \n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        if correct_answers * correct_mark + incorrect_answers * incorrect_deduction == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "51add92ad60b41bd8d0e28c5401b2bae": [
        "def solution():\n    from math import factorial\n\n    # We will use the stars and bars theorem\n    # Number of ways to distribute n identical items to r bins = C(n - 1, r - 1)\n    # Here n = 6 erasers to be distributed and r = 3 kids, but each must get at least one eraser\n    # So we distribute one eraser to each kid first, leaving n = 3 erasers to be distributed\n    \n    # Calculate combination C(3 + 3 - 1, 3 - 1) using the factorial formula\n    n = 6 - 3  # 3 erasers left after giving 1 to each kid\n    r = 3 - 1  # 2 partitions among kids\n    ways = factorial(n + r) // (factorial(n) * factorial(r))\n\n    return ways\n\nans = solution()"
    ],
    "35a2e016d6e741289d85bfd98cae8549": [
        "def solution():\n    plum_tree_distance = 4\n    pine_tree_distance = 5\n\n    # Distance between first and last plum trees: (total number of trees - 1) * distance between each\n    total_distance = (41 - 1) * plum_tree_distance\n\n    # Number of pine trees: (total distance / distance between each) + 1\n    num_pine_trees = (total_distance // pine_tree_distance) + 1\n\n    return int(num_pine_trees)\n\nans = solution()"
    ],
    "19e648dd36f74957bbf3ab2e377bf993": [
        "def solution():\n    younger, older = symbols('younger older')\n    \n    # \"When I was your age\": older - younger\n    # \"you were only 4 years old\": older - (older - younger) = 4\n    \n    # \"When I am your age\": younger - (older - younger)\n    # \"you will be 61\": younger + (younger - older) = 61 \n    \n    equation1 = Eq(older - (older - younger), 4)\n    equation2 = Eq(younger + (younger - older), 61)\n\n    solutions = solve((equation1, equation2), (younger, older))\n\n    return solutions[younger]\n\nans = solution()"
    ],
    "cd978bde655c4eeab7c4cd5b3e79f234": [
        "def solution():\n    ans = sum(range(1, 7))\n    return ans\n\nans = solution()"
    ],
    "960af76a998542a6bf58bd1a0539e775": [
        "def solution():\n    initial_people = 10\n    initial_hours = 9\n    target_hours = 3\n\n    # Calculate the work done by one person\n    work_done = initial_people * initial_hours\n\n    # Calculate the number of people required to do the same work in target_hours\n    required_people = work_done / target_hours\n\n    return required_people\n\nans = solution()"
    ],
    "c7ea8a8261394a278c052e1d963f6832": [
        "def solution():\n    bag_cost = 120\n    remaining_money = bag_cost / (2/5)\n    total_money = remaining_money / (2/3)\n\n    return total_money\n\nans = solution()"
    ],
    "9ccb508c829548d7abb565af2518a286": [
        "def solution():\n    weeks = [27, 25, 30]\n    ans = sum(weeks)\n    return ans\n\nans = solution()"
    ],
    "e9c6ea8b3c7942a7b584df1117ea9972": [
        "def solution():\n    candy_weight = 30\n    nancy_weight = candy_weight - 4\n    return nancy_weight\n\nans = solution()"
    ],
    "b95ce34c4904482cb93b8929a241db81": [
        "def solution():\n    final_remaining = 48\n    percent_second_day = 0.6\n    fraction_first_day = 1/3\n    \n    remaining_after_first_day = final_remaining / (1 - percent_second_day)\n    total_watermelons = remaining_after_first_day / (1 - fraction_first_day)\n\n    return int(total_watermelons)\n\nans = solution()"
    ],
    "28e8d3b2c27742f3ace084be157d24aa": [
        "def solution():\n    n = 15\n    first_term = 5\n    sum_of_squares = (n*(n+1)*(2*n+1))//6 - ((first_term-1)*first_term*(2*(first_term-1)+1))//6\n    return sum_of_squares\n\nans = solution()"
    ],
    "6d4657e0a9824b57b531a1b2c5afa9eb": [
        "def solution():\n    count = 0\n    for x1 in range(1, 9):\n        for x2 in range(1, 9):\n            for x3 in range(1, 9):\n                if x1 < x2 < x3 and x1 + x2 + x3 == 13:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ecab41bccb924851abd1f915401a0eda": [
        "def solution():\n    jessica_front = 5\n    judy_behind = 7\n    in_between = 1  # since Jessica sits in front of Judy, there is one desk between them\n    ans = jessica_front + in_between + judy_behind + 1  # +1 for Jessica's own desk\n    return ans\n\nans = solution()"
    ],
    "d0d1460243fb491a970711148da8bdbd": [
        "def solution():\n    ans = 125 * 8 * 49\n    return ans\n\nans = solution()"
    ],
    "afeb51e7b2d34fa88856173d28928c5d": [
        "def solution():\n    total_students = 152\n    for boys in range(total_students):\n        girls = total_students - boys\n        if boys - boys / 11 == girls - 5:\n            return boys\n\nans = solution()"
    ],
    "2b2fae5ea687426e9dedde667bf69e55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(0.75 * x - 5, 2.5)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b4ef0f615e074408b4de5de14d0436b3": [
        "def solution():\n    product = 888 * 999\n    last_two_digits = str(product)[-2:]\n    return int(last_two_digits)\n\nans = solution()"
    ],
    "19b4042ba2f8433493147e1a596bf779": [
        "def solution():\n    ans = 9 - 8 + 7 - 6 + 5 - 4 + 3 - 2 + 1\n    return ans\n\nans = solution()"
    ],
    "3f2537244e194218846046e4e72a93db": [
        "def solution():\n    start = 1000\n    subtract = 11\n\n    # Find how many times we subtract 11 before reaching a negative number\n    n = 0\n    while start - n * subtract >= 0:\n        n += 1\n\n    # Compute the first negative number\n    first_negative = start - n * subtract\n    return first_negative\n\nans = solution()"
    ],
    "1e5a18b4b8724826840fb986aacf25d5": [
        "def solution():\n    total_sweets = 486\n    classmates_plus_sarah = 17 + 1  # Including Sarah\n    sweets_per_person = total_sweets // classmates_plus_sarah\n\n    return sweets_per_person\n\nans = solution()"
    ],
    "b09251df1d4e43b491aaaabfee97a699": [
        "def solution():\n    chocolates = 72\n    toffees_per_chocolates = 7 / 12\n\n    toffees = chocolates * toffees_per_chocolates\n    return int(toffees)\n\nans = solution()"
    ],
    "5a7e2d52cd5643888c27fcb6f06badc1": [
        "def solution():\n    number_given = 0.11\n    halfway_point = 0.126\n    difference = halfway_point - number_given\n    other_number = halfway_point + difference\n\n    return other_number\n\nans = solution()"
    ],
    "d6aec573cb244941b3aefa06caa06e7a": [
        "def solution():\n    for num in range(28, 41):\n        if num % 4 == 0 and 9 in set(factor for factor in range(1, num + 1) if num % factor == 0):\n            return num\n\nans = solution()"
    ],
    "7a3a4893dd26417fb58c5b88ebbabd36": [
        "def solution():\n    ans = 21 + 27 + 19 - 17 + 22 + 18\n    return ans\n\nans = solution()"
    ],
    "1d935725dd9f4e3fa1aed495190dc424": [
        "def solution():\n    coin_values = [1, 2, 5]\n    totals = set()\n\n    for i in coin_values:\n        for j in coin_values:\n            for k in coin_values:\n                totals.add(i + j + k)\n\n    return len(totals)\n\nans = solution()"
    ],
    "c42ce6475895428ab114a1af2385cd70": [
        "from math import comb\n\ndef solution():\n    num_teams = 6\n    num_games = comb(num_teams, 2)\n    return num_games\n\nans = solution()"
    ],
    "e486c9dd773145848b5f37d0c04bbf06": [
        "def solution():\n    mangoes_price_per_box = 56\n    total_cost = 2826\n    total_mangoes_boxes = 24\n\n    # Cost of all mangoes boxes\n    mangoes_cost = mangoes_price_per_box * total_mangoes_boxes\n\n    # Cost of all lychees boxes\n    lychees_cost = total_cost - mangoes_cost\n\n    # Number of lychees boxes\n    total_lychees_boxes = 19\n\n    # Cost per box of lychees\n    lychees_price_per_box = lychees_cost / total_lychees_boxes\n\n    return lychees_price_per_box\n\nans = solution()"
    ],
    "66c85837504345c58750cdb4cd50976c": [
        "def solution():\n    principal = 10000\n    interest_rate = 0.05\n    years = 3\n\n    final_amount = principal * ((1 + interest_rate) ** years)\n\n    return final_amount\n\nans = solution()"
    ],
    "0195214807ca4ebb8735a37f3bd0f396": [
        "def solution():\n    for A in range(10):\n        for B in range(10):\n            for C in range(10):\n                if int(f\"{A}3{B}\") * 4 == int(f\"1{C}2\"):\n                    return A + B + C\n\nans = solution()"
    ],
    "f8128d9e28164d24aec427b96c538dec": [
        "def solution():\n    percentage = 65 / 100\n    decimal = 0.507\n    fraction = 1 / 4\n\n    total = percentage + decimal + fraction\n    \n    return round(total, 3)  # rounding to 3 decimal places for precision\n\nans = solution()"
    ],
    "d3475d6b771245278e01398bd5f12797": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(24*x - 5*(3 + x), 4)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "7e4fe708d5fe47a8b3e7945e164570cb": [
        "from itertools import permutations\n\ndef solution():\n    cards = '1122'\n    unique_numbers = set()\n    \n    for perm in permutations(cards, 3):\n        # Ignore numbers with a leading zero\n        if perm[0] != '0':\n            unique_numbers.add(''.join(perm))\n\n    return len(unique_numbers)\n\nans = solution()"
    ],
    "6db54abfbef4439db3f32fb63eccef7f": [
        "def solution():\n    # Initialize possible values for P, Q, R\n    for P in range(10):\n        for Q in range(10):\n            for R in range(10):\n                # Multiply 4-digit number by R (units place)\n                if (4000 + 300 * P + 20 * Q + R) * R % 100 == R:\n                    # Multiply 4-digit number by Q (tens place)\n                    if (4000 + 300 * P + 20 * Q + R) * Q % 1000 == Q * 100:\n                        # Multiply 4-digit number by P (hundreds place)\n                        if (4000 + 300 * P + 20 * Q + R) * P % 10000 == P * 1000:\n                            # If all conditions are met, return sum of P, Q, and R\n                            return P + Q + R\n\nans = solution()"
    ],
    "32cdb025d7b6487e8f23c740bc73c7a7": [
        "def solution():\n    # Susan starts jogging at 7:30 AM and jogs for 1 hour at 5 mph.\n    jogging_distance = 5 * 1\n\n    # After jogging, at 8:30 AM, she starts walking.\n    # She walks for 2 hours until 10:30 AM at 3 mph.\n    walking_distance = 3 * 2\n\n    # Total distance is the sum of jogging and walking distances.\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "5e7920b1469e44e9b17a7f258f840f18": [
        "def solution():\n    # Let the first term be x, so we have x, x+1, x+2, x+3, and x+4\n    # The sum of an arithmetic sequence is given by the average of the first\n    # and last term times the number of terms:\n    # (x + (x + 4)) / 2 * 5 = 100\n    # Solving for x gives us the smallest number\n    num_terms = 5\n    total_sum = 100\n    average = total_sum / num_terms\n\n    # The middle term (third term) is the average, so:\n    # x + 2 = average \n    # x = average - 2\n    smallest_number = average - 2\n\n    return int(smallest_number)\n\nans = solution()"
    ],
    "aaa5c754fa8b4afba08b7370dcadfd5c": [
        "def solution():\n    # Let x be the number of children who paid for shirts without names\n    # Let y be the number of children who paid for shirts with names\n    # We know that there are 50 children in total, so x + y = 50\n    # The cost without names is £10 and with names is £15\n    # Total amount paid is £555, so 10x + 15y = 555\n    # Now we have a system of two equations:\n    # x + y = 50\n    # 10x + 15y = 555\n    # We can solve for y, the number of children who paid for shirts with names\n    \n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 50)\n    equation2 = Eq(10*x + 15*y, 555)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "6e0d33aabe9c4bcab5d514bcef0a008a": [
        "def solution():\n    total_balls = 27\n    balls_per_bag = 5\n    bags_used = (total_balls - 2) // balls_per_bag\n    return bags_used\n\nans = solution()"
    ],
    "181bc921ffe648fdb943b55640a83626": [
        "def solution():\n    q = 1\n    for potential_q in range(1, 44001):\n        if 44000 % potential_q == 0:\n            cube_root = round((44000 / potential_q) ** (1/3))\n            if cube_root ** 3 == 44000 / potential_q:\n                q = max(q, potential_q)\n    return q\n\nans = solution()"
    ],
    "29d7bb7ee42147cb9da0d2f87542dc6c": [
        "def solution():\n    total_oranges = 75\n    oranges_in_10_boxes = 10 * 3\n    oranges_in_5_boxes = 5 * 7\n    oranges_left = total_oranges - (oranges_in_10_boxes + oranges_in_5_boxes)\n    return oranges_left\n\nans = solution()"
    ],
    "4884fdf18c7a4806a27e23695f55df93": [
        "def solution():\n    max_different_numbers = (3 - 1) * 4  # (3 same cards - 1) times number of suits\n    draws_to_guarantee = max_different_numbers + 1  # Adding 1 ensures at least 3 cards have the same number\n    return draws_to_guarantee\n\nans = solution()"
    ],
    "68ce89970a8a42d0af6104403b9d3ddf": [
        "def solution():\n    total_length = 800\n    num_trees = 21\n\n    interval_distance = total_length / (num_trees - 1)\n\n    return interval_distance\n\nans = solution()"
    ],
    "23f3e87699854b52b46eb378c40700f3": [
        "def solution():\n    ans = 32 * 125 * 49\n    return ans\n\nans = solution()"
    ],
    "de1a1dea86fa48258e157a13cfd72cc0": [
        "def solution():\n    ans = (3/4) * 28\n    return ans\n\nans = solution()"
    ],
    "febedf25f5b741c99cfb8b948352ac30": [
        "def solution():\n    andy_notebooks = 149\n    andy_gives = 38\n    # Correct calculation:\n    # Let s be the number of notebooks Andy's sister has at first.\n    # Andy has 149 notebooks and he gives 38 notebooks to his sister,\n    # they will have the same number after that, so:\n    # 149 - 38 = s + 38\n    # 111 = s + 38\n    # s = 111 - 38\n    sister_notebooks = andy_notebooks - andy_gives - andy_gives\n\n    return sister_notebooks\n\nans = solution()"
    ],
    "0aeb025cc8c240e8b251019f1650c9d2": [
        "def solution():\n    distance_between_buildings = 90\n    number_of_gaps = 9 + 1  # The number of gaps is one more than the number of trees\n\n    distance_between_each_tree = distance_between_buildings / number_of_gaps\n\n    return distance_between_each_tree\n\nans = solution()"
    ],
    "64a0b45c920043ea9de7368f87d76a34": [
        "def solution():\n    # Let the smaller number be x\n    # Then the larger number will be 2x\n    # Their sum is 72, so we have the equation x + 2x = 72\n\n    # Solving the equation:\n    x = 72 / 3\n\n    return x\n\nans = solution()"
    ],
    "4d7449c37dc04e2caef48c2973cae23f": [
        "def solution():\n    possible_cards = {\n        'Spades': ['A', 'J', 'K'],\n        'Hearts': ['3', '5', 'K'],\n        'Diamonds': ['2', '7', 'J'],\n        'Clubs': ['A', '7'],\n    }\n\n    # Eddie and Avril initially don't know the card\n    # Avril then knows the card after Eddie says he doesn't know.\n    # Thus, the card cannot be a King because that would not give Avril\n    # enough information to know for sure (there are two Kings).\n\n    # Remove the Kings from consideration\n    for suit in possible_cards:\n        if 'K' in possible_cards[suit]:\n            possible_cards[suit].remove('K')\n\n    # Eddie says that after Avril responds, he also knows the card.\n    # This means that the card cannot be one with a number that appears\n    # in more than one suit.\n\n    # Counts for each card number\n    number_count = {}\n    for numbers in possible_cards.values():\n        for num in numbers:\n            number_count[num] = number_count.get(num, 0) + 1\n\n    # The card must be uniquely identifiable by number\n    unique_cards = [card for card, count in number_count.items() if count == 1]\n\n    # Find the unique card remaining\n    for suit, numbers in possible_cards.items():\n        for number in numbers:\n            if number in unique_cards:\n                ans = (suit, number)\n                return ans\n\nans = solution()"
    ],
    "f6face9fc7c7465783d957d20e60eabe": [
        "from sympy import isprime\n\ndef solution():\n    base_number = \"200\"\n    primes_count = 0\n\n    # Iterate over each position where the digit will be changed\n    for i in range(len(base_number)):\n        # For each position, try all digits from 0 to 9\n        for digit in '0123456789':\n            # Skip if the digit is the same as the original\n            if base_number[i] == digit:\n                continue\n\n            # Form the new number by replacing the digit at the i-th position\n            new_number = int(base_number[:i] + digit + base_number[i+1:])\n\n            # Check if the new number is prime and not the same as the original\n            if new_number != int(base_number) and isprime(new_number):\n                primes_count += 1\n\n    return primes_count\n\nans = solution()"
    ],
    "eaee4c5f914f464893c6c617cd8da980": [
        "def solution():\n    mean_value = 5\n    total_numbers = 5\n    total_sum = mean_value * total_numbers  # Total sum of all numbers\n    \n    known_numbers = [3, 4, 6, 10]\n    known_sum = sum(known_numbers)  # Sum of known numbers\n    fifth_number = total_sum - known_sum  # The fifth number\n    \n    return fifth_number\n\nans = solution()"
    ],
    "8b959182183d418eb25cefb9bf8dc219": [
        "def solution():\n    emily_position_from_front = 25 + 1  # Emily is behind Danny, so Danny is 1 step ahead of Emily\n    danny_position_from_back = 14\n    # Counting from the back, there are 13 people behind Danny\n    people_behind_danny = danny_position_from_back - 1\n    \n    total_people = emily_position_from_front + people_behind_danny\n    return total_people\n\nans = solution()"
    ],
    "98e96ab2a5464c2f8b55cc5355c56197": [
        "def solution():\n    count = 0\n    page = 1\n\n    while count < 30:\n        if '5' in str(page):\n            count += str(page).count('5')\n        page += 1\n\n    return page - 1\n\nans = solution()"
    ],
    "967f79ab6d244b729f644537a06bdcc3": [
        "def solution():\n    total_cost = 13.23\n    num_cups = 9\n    cost_per_cup = total_cost / num_cups\n    return cost_per_cup\n\nans = solution()"
    ],
    "8ddc7b2bdd5b4d1a82dc0c65276359f0": [
        "def solution():\n    # Emma takes 12 minutes to cut a piece of wood into 4 sections\n    # This means she makes 3 cuts, because 1 cut makes 2 sections, 2 cuts make 3 sections and so on.\n    # So if she needs to cut the wood 5 times, it means making 5 cuts.\n    # The time it takes for each cut is therefore 12 minutes divided by 3 cuts which is 4 minutes per cut.\n    # So for 5 cuts, she will need 5 cuts times 4 minutes per cut.\n    time_per_cut = 12 / 3\n    total_time = time_per_cut * 5\n    return total_time\n\nans = solution()"
    ],
    "d71cc09281d5402dbf1e61d96fc56855": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_days, total_pages = symbols('total_days total_pages')\n    \n    # Vanessa reads 30 pages a day, finishes 2 days after deadline\n    equation1 = Eq(30 * (total_days + 2), total_pages)\n    \n    # Vanessa reads 39 pages a day, finishes 4 days before deadline\n    equation2 = Eq(39 * (total_days - 4), total_pages)\n    \n    solutions = solve((equation1, equation2), (total_days, total_pages))\n    \n    return solutions[total_days], solutions[total_pages]\n\nans = solution()"
    ],
    "b603c5461f8548a3b4cec3a87b533133": [
        "def solution():\n    return 7.298 / 0.2\n\nans = solution()"
    ],
    "0a9790cb77334c198e6f33340f5f941c": [
        "def solution():\n    rooms_per_day_per_worker = 2\n    total_rooms = 4\n    workers = 2\n\n    days = total_rooms / (rooms_per_day_per_worker * workers)\n\n    return days\n\nans = solution()"
    ],
    "19c7948c5c3b458f98616eed8bb06cfc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(13 - 2 * (2 * x - 3), 5 - (x - 2))\n    \n    solution = solve(equation, x)\n    \n    error_in_calculation = solution != 4/3\n    \n    if error_in_calculation:\n        return solution[0].evalf()\n    else:\n        return 4/3\n\nans = solution()"
    ],
    "bb066669a1d043539b0f78f992d232f1": [
        "def solution():\n    return (10 + 9 + 8 + 7 + 6) - (5 + 4 + 3 + 2 + 1)\n\nans = solution()"
    ],
    "ef8fc9f97c334d85b494fffa1bd0577b": [
        "def solution():\n    pages_per_hour = 30 / (3/4)\n    seconds_per_page = 3600 / pages_per_hour\n    return seconds_per_page\n\nans = solution()"
    ],
    "317ce9d0b92e4e9b82f5bce5d48051a3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the cost of an apple as 'a' and the cost of an orange as 'o'.\n    a, o = symbols('a o')\n\n    # Construct equations based on the given information.\n    # Kate buys 1 apple and 2 oranges for 48p.\n    equation1 = Eq(a + 2*o, 48)\n    # Jade buys 1 apple and 1 orange for 31p.\n    equation2 = Eq(a + o, 31)\n\n    # Solve the set of equations for 'a' and 'o'.\n    solutions = solve((equation1, equation2), (a, o))\n\n    # Extract the cost of 1 orange.\n    orange_cost = solutions[o]\n\n    return orange_cost\n\nans = solution()"
    ],
    "a68fba20646a499593183aa13dfc3f51": [
        "def solution():\n    total_badges = 24\n    given_away = total_badges * (3/8)\n    remaining_badges = total_badges - given_away\n    return remaining_badges\n\nans = solution()"
    ],
    "7ab2e2f436264488b6a85e26de20ed20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    pocket_money = symbols('pocket_money')\n    price_per_ball = symbols('price_per_ball')\n\n    # First week: 4 balls and 27p left\n    eq1 = Eq(4 * price_per_ball + 0.27, pocket_money)\n    # Second week: 2 balls and £1.51 left\n    eq2 = Eq(2 * price_per_ball + 1.51, pocket_money)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (pocket_money, price_per_ball))\n\n    return solutions[pocket_money]\n\nans = solution()"
    ],
    "a1b6d3dc280e4ab498a45c02841bbb75": [
        "def solution():\n    count = 0\n    for num in range(100, 1000):\n        str_num = str(num)\n        if str_num.count('0') == 1 and len(set(str_num)) == 3:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "29b13d5b92d24153bb5eab0c0a6b79b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jason, will, tom = symbols('jason will tom')\n\n    equation1 = Eq(jason, 3 * will)\n    equation2 = Eq(tom, will - 15)\n    equation3 = Eq(jason + will + tom, 225)\n\n    solutions = solve((equation1, equation2, equation3), (jason, will, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "5ed3ede08de4405abf392b2e764a8a3a": [
        "def solution():\n    steps_per_staircase = 12\n    total_staircases = 3\n\n    total_steps = steps_per_staircase * total_staircases\n\n    return total_steps\n\nans = solution()"
    ],
    "163d5569c8794822827aa5f3fb2a9e54": [
        "def solution():\n    total_people = 23\n    people_behind = 14\n\n    people_in_front = total_people - people_behind - 1  # Subtract 1 for Louis himself\n\n    return people_in_front\n\nans = solution()"
    ],
    "b2e74fd3787345abaed2bffc05eda905": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    elias, aileen = symbols('elias aileen')\n\n    equation1 = Eq(elias - 88, aileen - 8)\n    equation2 = Eq(elias, 5 * aileen)\n\n    solutions = solve((equation1, equation2), (elias, aileen))\n\n    return solutions[elias] - 88, solutions[aileen] - 8\n\nans = solution()"
    ],
    "350b297b009e49fa80ba80c3b2e816be": [
        "def solution():\n    numbers = range(11, 32, 2)\n    return sum(numbers)\n\nans = solution()"
    ],
    "192ed864378f46f0992b02857290262e": [
        "def solution():\n    return sum(range(2, 9))\n\nans = solution()"
    ],
    "99153d571f7b47888d63eeb16f4101aa": [
        "def solution():\n    ans = 730 / 1000\n    return ans\n\nans = solution()"
    ],
    "0c86c445fc0a4c6da74c3a666872027f": [
        "def solution():\n    n = 5 * (4 ** 2)\n    return n\n\nans = solution()"
    ],
    "cb7de8383bda423f846c2a0d41099259": [
        "def solution():\n    # Let Gerald's portion be represented by the variable g\n    # Thomas eats 5 pieces for every 3 that Gerald eats.\n    # Total pieces eaten by both is 104.\n    \n    # Gerald's cheese pieces + Thomas's cheese pieces = Total cheese pieces\n    # g + (5/3) * g = 104\n    # (3/3 + 5/3) * g = 104\n    # (8/3) * g = 104\n    # g = 104 * (3/8)\n    gerald_cheese = 104 * (3/8)\n    \n    # Thomas's cheese pieces\n    thomas_cheese = (5/3) * gerald_cheese\n    \n    # The number of pieces of cheese Thomas ate more than Gerald is:\n    # thomas_cheese - gerald_cheese\n    more_cheese = thomas_cheese - gerald_cheese\n    \n    return int(more_cheese)\n\nans = solution()"
    ],
    "d70de15ac2b64e119755895c7c1775b0": [
        "def solution():\n    # Given values\n    cookies_per_20g = 25\n    butter_for_48g = 48\n\n    # Calculate cookies per gram of butter\n    cookies_per_gram = cookies_per_20g / 20\n\n    # Calculate number of cookies with 48 grams of butter\n    cookies_with_48g = cookies_per_gram * butter_for_48g\n\n    return cookies_with_48g\n\nans = solution()"
    ],
    "ab65eb6366424791bc96225b7748674a": [
        "def solution():\n    result = (8/11) * 1.54\n    return result\n\nans = solution()"
    ],
    "91e8c0f537a24098854e3e9ad367ef40": [
        "def solution():\n    # Convert the numbers from base 8 to base 10, perform the addition and convert back to base 8\n    num1_base10 = int('25', 8)\n    num2_base10 = int('37', 8)\n    sum_base10 = num1_base10 + num2_base10\n    ans = oct(sum_base10)[2:]  # [2:] is used to remove the '0o' prefix\n    return ans\n\nans = solution()"
    ],
    "7580babfb6664341b878371c05f2522f": [
        "def solution():\n    return 3597 // 11\n\nans = solution()"
    ],
    "15cc7b6d484d4ffcad21a4bb4923bca1": [
        "def solution():\n    return 5987 + 67 + 983\n\nans = solution()"
    ],
    "7bf99922eaaf4266b6882b0fd9059ea0": [
        "def solution():\n    total_people = symbols('total_people')\n    boys = 2 / 7 * (total_people - total_people / (1 + 2/3 + 2/7))\n    adults = 2 / 3 * (total_people / (1 + 2/3 + 2/7))\n    equation = Eq(adults - boys, 1228)\n    ans = solve(equation, total_people)\n    return ans[0]\n\nans = solution()"
    ],
    "5a8b109d6748455c802ec8c38135b025": [
        "def solution():\n    ans = 12.4 / 40\n    return ans\n\nans = solution()"
    ],
    "eb3a8e66576f4d9f9023ccfe7b7b53c5": [
        "def solution():\n    # Let x be the number of tennis rackets purchased at first.\n    # Initial total cost price = 150 * x\n    # Selling price of each racket = 175\n    # Rackets sold = x - 8\n    # Total sales = (x - 8) * 175\n    # Profit = Total sales - Initial total cost price = 525\n    # Equation: (x - 8) * 175 = 150 * x + 525\n    # Solve for x\n    \n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = (x - 8) * 175 - (150 * x + 525)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3900795ab2d94196ad395c7483e5c648": [
        "def solution():\n    return 813 * 72\n\nans = solution()"
    ],
    "33e79ce7d01446d9a282b54a045a5e8e": [
        "def solution():\n    n = 10\n    ans = 1 + n + (n * (n - 1) // 2) + (n * (n - 1) * (n - 2) // 6)\n    return ans\n\nans = solution()"
    ],
    "c96b47bede684b9f8ba38d50dd4e1086": [
        "def solution():\n    bags = 8\n    pens_per_bag = 4\n    total_pens = bags * pens_per_bag\n    return total_pens\n\nans = solution()"
    ],
    "888e7a05c66a49078a06713b83ca6ce1": [
        "def solution():\n    # Let the initial amount of money for both Chloe and Gordon be x\n    # Chloe's remaining amount: x - 20n = 157\n    # Gordon's remaining amount: x - 25n = 82\n    # where n is the number of days they spent money\n    # Since both had equal amounts initially and the remaining amount differs:\n    # Chloe's spent amount (20n) + 157 = Gordon's spent amount (25n) + 82\n\n    # The difference in their spendings is: 157 - 82\n    spending_difference = 157 - 82\n    # The difference in their daily spending is: 25 - 20\n    daily_difference = 25 - 20\n    \n    # The number of days they spent money can be calculated by\n    # dividing the total difference in spendings by the daily difference\n    n = spending_difference / daily_difference\n\n    # Calculate Gordon's initial amount by adding the spent amount to his remaining amount\n    gordon_initial_amount = (25 * n) + 82\n\n    return gordon_initial_amount\n\nans = solution()"
    ],
    "ed32aedbb2a34499a71cf190747aeb19": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables for Students A and B's scores\n    score_a, score_b = symbols('score_a score_b')\n\n    # Equation 1: B + 24 = A - 2\n    equation1 = Eq(score_b + 24, score_a - 2)\n\n    # Equation 2: A + 25 = 5 * (B - 25)\n    equation2 = Eq(score_a + 25, 5 * (score_b - 25))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (score_a, score_b))\n\n    # Return the score of Student A\n    return solutions[score_a]\n\nans = solution()"
    ],
    "0b8067aa5d3f4321a2018a93d46b6c9e": [
        "def solution():\n    count = 0\n    for x1 in range(1, 14):\n        for x2 in range(x1+1, 14):\n            x3 = 14 - x1 - x2\n            if x3 > x2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "678881c9e47f44f59d88da4a1055e2af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(10 - 2 * (x - 9), 2 * x - 4 * (5 - x))\n    \n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "27c967821aaa4f3f9ac178e7c395b919": [
        "def solution():\n    factorial = 1\n    for i in range(1, 11):\n        factorial *= i\n        \n    count_zeros = 0\n    while factorial % 10 == 0:\n        factorial //= 10\n        count_zeros += 1\n        \n    return count_zeros\n\nans = solution()"
    ],
    "a5905a83aea54ed7b0165353ec295c7e": [
        "def solution():\n    total_melons = 20\n    cost_price = 15\n    bad_melons = total_melons / 5\n    melons_sold = total_melons - bad_melons\n    selling_price_per_melon = 1.50\n    revenue = melons_sold * selling_price_per_melon\n    profit = revenue - cost_price\n    \n    return profit\n\nans = solution()"
    ],
    "7ce4a67e0ab846d8bd1eb78dffb57e9e": [
        "def solution():\n    oranges = 150\n    apples = 100\n    remainder_oranges = 17\n    remainder_apples = 5\n\n    # Distributable oranges and apples\n    distributable_oranges = oranges - remainder_oranges\n    distributable_apples = apples - remainder_apples\n\n    # Find the greatest common divisor of distributable oranges and apples\n    from math import gcd\n    neighbours = gcd(distributable_oranges, distributable_apples)\n\n    return neighbours\n\nans = solution()"
    ],
    "9ed7da1b104344da81a0dc411168159e": [
        "def solution():\n    return 6.23 - 5.72\n\nans = solution()"
    ],
    "a2a533fc1c424f969f5fae611daad3e8": [
        "def solution():\n    line_length = 10  # Length of the line in centimeters\n    cross_interval = 1  # Interval between crosses in centimeters\n    \n    # Add 1 since a cross is drawn at both the beginning and end of the line\n    crosses = (line_length // cross_interval) + 1\n    \n    return crosses\n\nans = solution()"
    ],
    "52bacc6ef48b44b8bc4d02992a7b6173": [
        "def solution():\n    return 8.7 * 3.4\n\nans = solution()"
    ],
    "57ff93a0b8da463fa5f80c4c21a775ee": [
        "def solution():\n    # Let x be the total value of the jewels in box P\n    # Let y be the total value of the jewels in box Q\n    # Initially, the average value of the jewels in box P is x/3\n    # and the average value of the jewels in box Q is y/3\n    # After transferring a jewel worth £5000 from P to Q:\n    # the new average value of the jewels in box P is (x - 5000)/2\n    # and the new average value of the jewels in box Q is (y + 5000)/4\n    \n    # According to the problem, this transfer increases the average\n    # value of the jewels in each box by £1000, so we can set up two\n    # equations:\n    # (x - 5000)/2 = x/3 + 1000\n    # (y + 5000)/4 = y/3 + 1000\n    \n    # we multiply each equation by the common denominator, which is 12, to avoid fractions:\n    # 6*(x - 5000) = 4*x + 12000\n    # 3*(y + 5000) = 4*y + 12000\n    \n    # Now solve the equations:\n    # 6x - 30000 = 4x + 12000 => 2x = 42000 => x = 21000\n    # 3y + 15000 = 4y + 12000 => y = 3000\n    \n    # The total value of all 6 jewels is the sum of x and y\n    x = 21000\n    y = 3000\n    total_value = x + y\n    \n    return total_value\n\nans = solution()"
    ],
    "ee0568f16c2b4ce48ef303d392601ff8": [
        "def solution():\n    # The pattern is \"red, red, green, yellow, yellow, green\" which has a length of 6.\n    pattern_length = 6\n    # Within one complete pattern, there are 2 green balloons.\n    greens_per_pattern = 2\n\n    # Compute how many complete patterns we have.\n    complete_patterns = 75 // pattern_length\n    # Compute the number of green balloons in the complete patterns.\n    total_greens = complete_patterns * greens_per_pattern\n\n    # Now handle the remaining balloons after the last complete pattern.\n    remaining_balloons = 75 % pattern_length\n    \n    # Iterate through the remaining balloons and count the greens.\n    for i in range(remaining_balloons):\n        # The 3rd and 6th balloons in the pattern are green.\n        if i in [2, 5]:\n            total_greens += 1\n\n    return total_greens\n\nans = solution()"
    ],
    "684f885693764340afae67d6e64e96ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    sandra, jessica = symbols('sandra jessica')\n    \n    # Equation after giving 13 marbles\n    equation1 = Eq(sandra - 13, jessica + 13 - 6)\n    \n    # Sandra had more marbles than Jessica at first\n    equation2 = Eq(sandra, jessica)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sandra, jessica))\n\n    # Calculate how many more marbles Sandra had than Jessica in the beginning\n    sandra_start = solutions[sandra]\n    jessica_start = solutions[jessica]\n    diff_start = sandra_start - jessica_start\n\n    return diff_start\n\nans = solution()"
    ],
    "07c7c85bda4847ceafa321fc737bd219": [
        "def solution():\n    distance_between_1st_and_6th = 60\n    number_of_intervals_between_1st_and_6th = 6 - 1  # The intervals are one less than the number of lamp posts\n    distance_per_interval = distance_between_1st_and_6th / number_of_intervals_between_1st_and_6th\n\n    number_of_intervals_between_1st_and_9th = 9 - 1\n    distance_between_1st_and_9th = distance_per_interval * number_of_intervals_between_1st_and_9th\n\n    return distance_between_1st_and_9th\n\nans = solution()"
    ],
    "ce622d4ae66d44e1bcc0df82fbe961fc": [
        "def solution():\n    num_teams = 3\n    matches = num_teams * (num_teams - 1) // 2\n    return matches\n\nans = solution()"
    ],
    "e29e4f297900441f9110516bd6b642d0": [
        "def solution():\n    total_strawberries = 15 + 27 + 19\n    remaining_strawberries = total_strawberries % 8\n    return remaining_strawberries\n\nans = solution()"
    ],
    "0edc4483e1764691b7f15e9bedcc4156": [
        "def solution():\n    ones_count = 0\n    twos_count = 0\n    number = 1\n\n    while True:\n        ones_count += str(number).count('1')\n        twos_count += str(number).count('2')\n\n        if ones_count == 15 and twos_count == 14:\n            break\n\n        number += 1\n\n    return number\n\nans = solution()"
    ],
    "66aa3aec53fa48d1aa6897cfab540921": [
        "def solution():\n    ans = 8 * (3/2)\n    return ans\n\nans = solution()"
    ],
    "14e3978e40d049dbad0dcf4a4cf738df": [
        "def solution():\n    andy_floor = 9\n    bob_floor = 5\n    top_floor = 25\n\n    # Since both Andy and Bob climb at a constant speed, the ratio of floors they reach is constant.\n    rate_ratio = bob_floor / andy_floor\n\n    # When Andy reaches the top floor, we calculate the floor Bob will reach at the same rate.\n    bob_at_top = rate_ratio * top_floor\n\n    return int(bob_at_top)\n\nans = solution()"
    ],
    "0f48eb78665e4e5ba3b372be6f2eab93": [
        "def solution():\n    for m in range(10):\n        if (12 * 10 + m) == 9 * (10 + m) - 2:\n            return m\n\nans = solution()"
    ],
    "33e6fe50af554266b27e4c2074a6a3f9": [
        "def solution():\n    # Each friend received 26 pieces\n    candy_per_friend = 26\n    \n    # Number of friends\n    number_of_friends = 7\n    \n    # Calculate total candy shared at school\n    total_candy_shared = candy_per_friend * number_of_friends\n    \n    # Candy left with Kate\n    candy_left_with_kate = 22\n    \n    # Total candy brought to school (shared + left with Kate)\n    total_candy_at_school = total_candy_shared + candy_left_with_kate\n    \n    # Total initial candy (multiplied by 3 because 2/3 was brought to school, which is total_candy_at_school)\n    total_initial_candy = total_candy_at_school * 3\n    \n    return total_initial_candy\n\nans = solution()"
    ],
    "25e5a7db39a14e5080bf1594f85931a6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let w be the total number of words James needs to type\n    # Let r be the original speed (words per minute)\n    w, r = symbols('w r')\n    \n    # Original time is 3 minutes, so the original work done is r * 3\n    original_work = r * 3\n    \n    # Increased speed is r + 30 words per minute, finish time is 2 minutes (1 minute earlier)\n    increased_work = (r + 30) * 2\n    \n    # Since it is the same work done, we have the equation\n    equation = Eq(original_work, increased_work)\n    \n    # Solve for r\n    speed = solve(equation, r)\n    \n    # Total words typed is then the product of r and the original time\n    total_words = speed[0] * 3\n    \n    return total_words\n\nans = solution()"
    ],
    "fc7f764e9d664c45bf77553a3e6315b8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables for the amounts in pails A and B\n    a, b = symbols('a b')\n    \n    # Equation based on the first condition\n    equation1 = Eq(a, 2/3 * b)\n    \n    # Equation based on the second condition after transferring 4 liters\n    equation2 = Eq(a + 4, 7/8 * (b - 4))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, b))\n    \n    # Calculate the total amount of water\n    total_water = solutions[a] + solutions[b]\n    \n    return total_water\n\nans = solution()"
    ],
    "eefc87844ecc4f2285ce5feedafa6913": [
        "def solution():\n    depth = 8\n    climb_up = 3\n    slip_down = 2\n    climbed_distance = 0\n    days = 0\n    \n    while True:\n        days += 1\n        climbed_distance += climb_up\n        if climbed_distance >= depth:\n            break\n        climbed_distance -= slip_down\n        \n    return days\n\nans = solution()"
    ],
    "593a8f96d20c408d86fda58e89c71746": [
        "def solution():\n    lights = [False] * 10  # Initially all lights are off (False).\n\n    # Ms. Lily presses every other light switch starting from 1\n    for i in range(0, 10, 2):\n        lights[i] = not lights[i]\n\n    # Sam presses each even-numbered switch 7 times\n    for i in range(1, 10, 2):\n        for _ in range(7):\n            lights[i] = not lights[i]\n\n    # Count how many lights are on\n    ans = sum(lights)\n    \n    return ans\n\nans = solution()"
    ],
    "841da503f5384dbabdbc92f2a781fe22": [
        "def solution():\n    dresses_per_day_per_seamstress = 2\n    seamstresses = 2\n    days = 9\n\n    total_dresses = dresses_per_day_per_seamstress * seamstresses * days\n\n    return total_dresses\n\nans = solution()"
    ],
    "2891d5c6bf714aaaaf484ccacdcf4660": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    \n    # Equation for the relation between table and chair.\n    equation1 = Eq(table, 2 * chair)\n    \n    # Equation for the total cost of 2 tables and 3 chairs.\n    equation2 = Eq(2 * table + 3 * chair, 280)\n    \n    # Solving the system of equations.\n    solutions = solve((equation1, equation2), (table, chair))\n    \n    return solutions[table]\n\nans = solution()"
    ],
    "b18d474df71d462c9b1d16e929a17ca3": [
        "def solution():\n    cost_per_bar = 50\n    num_bars = 4\n    total_cost = cost_per_bar * num_bars\n    return total_cost\n\nans = solution()"
    ],
    "957e833104764c96b1f4eea0f026e06f": [
        "def solution():\n    # Eddy's calculation\n    parts_per_hour = 20 / 2  # speed of production 10 parts per hour\n    total_time_needed = 100 / parts_per_hour  # total time needed for 100 parts\n\n    # The remaining parts to produce\n    remaining_parts = 100 - 20\n\n    # Correct calculation for remaining time needed\n    remaining_time_needed = remaining_parts / parts_per_hour\n\n    # Return the correct remaining time needed\n    return remaining_time_needed\n\nans = solution()"
    ],
    "0442d07405364ff5bc82f86bcabbc881": [
        "def solution():\n    initial_volume = 900  # in ml\n    initial_sugar_percentage = 0.06\n    desired_sugar_percentage = 0.10\n\n    initial_sugar_content = initial_volume * initial_sugar_percentage\n    final_volume = initial_volume  # This remains the same because we are adding sugar, not liquid.\n    \n    # Let x be the amount of sugar to be added to reach the new sugar concentration\n    # The new total amount of sugar will be initial_sugar_content + x\n    # The new concentration is represented by (initial_sugar_content + x) / final_volume\n    \n    # We set up the equation: (initial_sugar_content + x) / final_volume = desired_sugar_percentage\n    # And solve for x\n    \n    x = final_volume * desired_sugar_percentage - initial_sugar_content\n\n    return x\n\nans = solution()"
    ],
    "a9df9fef73994fa0adfd6c7233026811": [
        "def solution():\n    # Take the worst-case scenario for each color:\n    # Drawing all 5 balls of one color, and then all 5 balls of a second color\n    # This ensures that the next ball drawn will be of the third color\n    # So, 5 red + 5 white + 1 guaranteed yellow = 11\n    # Or 5 red + 5 yellow + 1 guaranteed white = 11\n    # Or 5 white + 5 yellow + 1 guaranteed red = 11\n    # The answer will be the same in all these scenarios\n    return 5 + 5 + 1\n\nans = solution()"
    ],
    "53629bc84abc46a99608abaf3f651c5c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    grade4, grade5, grade6 = symbols('grade4 grade5 grade6')\n\n    equation1 = Eq(grade5, 2 * grade4 + 4)\n    equation2 = Eq(grade6, 3 * grade4 + 8)\n    equation3 = Eq(grade4 + grade5 + grade6, 720)\n\n    solutions = solve((equation1, equation2, equation3), (grade4, grade5, grade6))\n\n    return solutions[grade6]\n\nans = solution()"
    ],
    "94b2228e40b74d7c81c5e89a014088b7": [
        "from math import comb\n\ndef solution():\n    # Calculating the possible combinations of taking 2 glass balls of different colors\n    colors = 5\n    # Calculate combinations for each color taken with each other color (5C2)\n    combinations_of_balls = comb(colors, 2)\n    \n    # The possible ways to take out 2 glass balls with the same color\n    same_color_pairs = colors\n    total_combinations = combinations_of_balls + same_color_pairs\n    \n    # There must be at least one more person than the total number of combinations to ensure a match.\n    # This is based on the Pigeonhole Principle.\n    people = total_combinations + 1\n    \n    return people\n\nans = solution()"
    ],
    "cfb59b638eb341b18ad204a7ce303359": [
        "def solution():\n    ans = 20504 // 8\n    return ans\n\nans = solution()"
    ],
    "0370e917ba5444c99e91df970a15bb74": [
        "def solution():\n    total_length_cm = 2 * 100 + 20  # Convert meters to cm and add cm\n    each_piece_length = total_length_cm / 2\n    return each_piece_length\n\nans = solution()"
    ],
    "6a23c9856a834221b62e63996c06f972": [
        "def solution():\n    first_term = 5\n    third_term = 19\n\n    common_difference = (third_term - first_term) / (3 - 1)\n\n    return common_difference\n\nans = solution()"
    ],
    "d432ce5fae8d408da28df3d9a18e9baf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hisham, melissa = symbols('hisham melissa')\n    total_cards = 876\n\n    # Melissa has twice as many cards as Hisham.\n    equation1 = Eq(melissa, 2 * hisham)\n\n    # The total number of cards they have together.\n    equation2 = Eq(hisham + melissa, total_cards)\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (hisham, melissa))\n\n    # Calculate the number of cards Melissa should give to Hisham.\n    cards_to_give = (solutions[melissa] - solutions[hisham]) / 2\n\n    return cards_to_give\n\nans = solution()"
    ],
    "028b46b0fbd045fa90a02a752e75494c": [
        "def solution():\n    # There are three types of integers with respect to divisibility by 4:\n    # 1. Divisible by 4\n    # 2. Odd numbers (not divisible by 2, and therefore not by 4)\n    # 3. Even but not divisible by 4 (remainder 2 when divided by 4)\n    \n    # The maximum number of odd numbers in the range 10 to 41 is 16 (all the odd numbers).\n    # After choosing 16 odd numbers, the next number chosen must be even.\n    # Among the even numbers, we could have at most 15 numbers that leave remainder 2 when divided by 4.\n    # So, upon choosing the 17th number, we are guaranteed that it is either:\n    # a) Divisible by 4 => The product with any other even number we picked will be divisible by 4.\n    # b) Leaves remainder 2 when divided by 4, while we have already picked another number that leaves remainder 2.\n    # In either case, the product of the two will be divisible by 4.\n    # Therefore, to ensure we have two numbers whose product is divisible by 4, we need to draw:\n    # 16 (maximum odd numbers count) + 1 = 17 numbers.\n    \n    return 17\n\nans = solution()"
    ],
    "555f0cafaf514767b0fe800156cb0727": [
        "def solution():\n    cakes = 195\n    cost_per_cake = 46\n    total_cost = cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "284c25d3574441a78eaf010240003c8c": [
        "def solution():\n    result = 0\n    for i in range(46, 51):\n        result += i * (100 - i)\n    return result\n\nans = solution()"
    ],
    "4a1f680de9ae4c519ea93c401f8702e6": [
        "def solution():\n    term1 = (1 + 0.23 + 0.34) * (0.23 + 0.34 + 0.45)\n    term2 = (1 + 0.23 + 0.34 + 0.45) * (0.23 + 0.34)\n    ans = term1 - term2\n    return ans\n\nans = solution()"
    ],
    "aa9463208898426a81ae9e66616bff47": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(40/(x + 5), 5)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "6c18ef58e8b240a0b1d815b125d4e754": [
        "def solution():\n    ans = 9 / 0.2\n    return ans\n\nans = solution()"
    ],
    "6196c646546f4ef5bf8c9473472fe841": [
        "def solution():\n    from sympy import primerange, isprime\n\n    # Find the smallest two-digit prime number\n    two_digit_primes = list(primerange(10, 100))\n    smallest_two_digit_prime = two_digit_primes[0]\n\n    # Find the largest two-digit square number\n    largest_two_digit_square = 0\n    for i in range(1, 10):\n        square = (10 - i) ** 2\n        if square < 100:\n            largest_two_digit_square = square\n            break\n\n    # Calculate the product\n    product = smallest_two_digit_prime * largest_two_digit_square\n    return product\n\nans = solution()"
    ],
    "7a03810f71064f1b8a00a0c741b7d68e": [
        "def solution():\n    age_diff = 41 - 14\n    # Since Brian will be older and his age will still be the reverse of his father's,\n    # we can assume that their ages will be (x + age_diff) and x, where x is Brian's age.\n    # Brian's age must be two digits, and the tens place must be at least 2 since his father's ones place is at least 2.\n    for x in range(20, 100):\n        father_age = x + age_diff\n        # To form the reversed age for his father, switch the digits of Brian's age.\n        reversed_age = int(str(x)[::-1])\n        if father_age == reversed_age:\n            return x\n\nans = solution()"
    ],
    "0249d770955143e49182729ffbddfa3d": [
        "def solution():\n    euro_to_usd_rate = 1 / 0.96\n    coffee_cost_euros = 4.8\n\n    coffee_cost_usd = coffee_cost_euros * euro_to_usd_rate\n\n    return coffee_cost_usd\n\nans = solution()"
    ],
    "7f0edbf8e5cb484f87961218f9db99d0": [
        "from itertools import permutations\n\ndef evaluate_expression(a, b, c, d, e, f, g, h, j):\n    return a + (b / c) + ((d / e) * f) - (g + (h / j))\n\ndef solution():\n    max_value = float('-inf')\n    for perm in permutations(range(1, 10)):\n        a, b, c, d, e, f, g, h, j = perm\n        value = evaluate_expression(a, b, c, d, e, f, g, h, j)\n        if value.is_integer():\n            max_value = max(max_value, value)\n    return int(max_value)\n\nans = solution()"
    ],
    "105d3ea760424235a98e71c0d8ca6303": [
        "def solution():\n    max_product = 0\n    for A in range(1, 20):\n        for B in range(1, 20 - A):\n            C = 19 - A - B\n            product = A * B * C\n            if product > max_product:\n                max_product = product\n    return max_product\n\nans = solution()"
    ],
    "6a75c42493d548a6833f83188863c29b": [
        "def solution():\n    from math import lcm\n    return lcm(12, 56)\n\nans = solution()"
    ],
    "020a47d927424600b54866be0f9e7377": [
        "def solution():\n    total_books = 3900\n    new_books = 510\n\n    ratio_chinese = 4\n    ratio_malay = 3\n    ratio_english = 6\n    total_ratio = ratio_chinese + ratio_malay + ratio_english\n    \n    chinese_books = (ratio_chinese / total_ratio) * total_books\n    malay_books = (ratio_malay / total_ratio) * total_books\n    english_books = (ratio_english / total_ratio) * total_books\n\n    new_chinese_books = chinese_books * 1.20\n    new_malay_books = malay_books * 1.10\n\n    increase_chinese_malay = new_chinese_books + new_malay_books - (chinese_books + malay_books)\n    increase_english_books = new_books - increase_chinese_malay\n\n    percentage_increase_english = (increase_english_books / english_books) * 100\n\n    return percentage_increase_english\n\nans = solution()"
    ],
    "062deceefd35411f997b29c901129f1c": [
        "def solution():\n    rounded_number = 9700\n    smallest_possible_value = rounded_number - 50\n    return smallest_possible_value\n\nans = solution()"
    ],
    "51c43a6b56234d0e83f79c035496cdfc": [
        "def solution():\n    juniors_count = 12\n    seniors_count = 8\n    total_participants = juniors_count + seniors_count\n    \n    avg_score_juniors = 10\n    avg_score_total = 14\n\n    total_score_juniors = avg_score_juniors * juniors_count\n    total_score_all = avg_score_total * total_participants\n    total_score_seniors = total_score_all - total_score_juniors\n\n    avg_score_seniors = total_score_seniors / seniors_count\n\n    return avg_score_seniors\n\nans = solution()"
    ],
    "0c10d6b8653d43ff821582cda7ac2c32": [
        "def solution():\n    # Four years ago the combined age of the 2 dogs was 10 years old\n    combined_age_four_years_ago = 10\n    \n    # Each dog ages 4 years to the present, and 2 more years into the future\n    # This totals a 4 (from past to present) + 2 (from present to future) = 6 years per dog\n    years_passed_per_dog = 4 + 2\n    \n    # Since there are 2 dogs, the combined age increase is years_passed_per_dog * 2.\n    combined_age_increase = years_passed_per_dog * 2\n    \n    # The combined age in 2 years will be the age four years ago plus the age increase.\n    combined_age_in_two_years = combined_age_four_years_ago + combined_age_increase\n    \n    return combined_age_in_two_years\n\nans = solution()"
    ],
    "ad17dd64f37241d8a7ec221ca69a178b": [
        "def solution():\n    numerator = 1058 * (10 ** -2022)\n    denominator = 92 * (10 ** -2023)\n\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "158af0779d9e4980a24fe0fec884683c": [
        "def solution():\n    cookies_made = 160\n    butter_used = 50\n    desired_cookies = 300\n\n    butter_needed = (butter_used * desired_cookies) / cookies_made\n\n    return butter_needed\n\nans = solution()"
    ],
    "7e469a60ae594c1eb1c906000dd9e1b3": [
        "def solution():\n    total_questions = 25\n    rex_answered = total_questions - 1\n    \n    # Let x be the number of correct answers\n    # rex_answered - x is the number of incorrect answers\n    # 4x is the score from correct answers\n    # -2 * (rex_answered - x) is the score subtracted from incorrect answers\n    # The total score is the sum of those two\n    # Therefore, the equation we want to solve is:\n    # 4x - 2 * (rex_answered - x) = 66\n    # You can solve this equation in any way, but I'll do it directly as it's simple.\n    \n    # Simplify the equation:\n    # 4x - 2 * rex_answered + 2x = 66\n    # 6x - 2 * rex_answered = 66\n    # 6x = 66 + 2 * rex_answered\n    # x = (66 + 2 * rex_answered) / 6\n    \n    x = (66 + 2 * rex_answered) // 6\n    \n    return x\n\nans = solution()"
    ],
    "85cb1cd4dcbe4dca96112c2906555a7c": [
        "def solution():\n    result = 15.9 * 2\n    return result\n\nans = solution()"
    ],
    "61ca6c49f97240f88a3d539f152d6ee5": [
        "def solution():\n    containers = 10\n    # To guarantee at least 2 apples in one container, we need (containers - 1) containers to have at least 1 apple,\n    # and the last container to have at least 2 apples. This is a direct application of the Pigeonhole Principle.\n    # Since the question seeks the least number of apples, we minimize the number in every other container.\n    # So, (containers - 1) containers will have 1 apple each, and 1 container will have 2 apples.\n    \n    apples_in_other_containers = (containers - 1) * 1 \n    apples_in_last_container = 2\n    \n    # Total apples\n    total_apples = apples_in_other_containers + apples_in_last_container\n    return total_apples\n\nans = solution()"
    ],
    "38dff589122e45f682f4fbac9629ef22": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of questions answered correctly\n    x = symbols('x')\n\n    # Mochi answered 60% of the 90 questions, so 0.6 * 90\n    total_answered = 0.6 * 90\n\n    # Mochi did not answer 40% of the questions, so 0.4 * 90\n    total_unanswered = 0.4 * 90\n\n    # The marks for correct answers are 5 times the number of correct answers\n    # The marks deducted for wrong answers are 2 times the number of wrong answers\n    # The number of wrong answers is the total answered minus the correct ones\n    # The marks for unanswered questions is equal to the total number of unanswered questions\n\n    # Creating the equation based on the above calculations\n    # 5x - 2(total_answered - x) + total_unanswered = 264\n    equation = Eq(5*x - 2*(total_answered - x) + total_unanswered, 264)\n    \n    # Solve the equation for x\n    solved = solve(equation, x)\n\n    return solved[0]  # Return the number of questions answered correctly\n\nans = solution()"
    ],
    "33c000792028428a9334d9f3595c547f": [
        "def solution():\n    return (19 + 2) // 3\n\nans = solution()"
    ],
    "f4f1fe067a974d22bfe3b0f49a7ee798": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dedra, timm = symbols('dedra timm')\n\n    # Dedra had 4 times as much money as Timm at first.\n    equation1 = Eq(dedra, 4 * timm)\n\n    # Both received $72 each.\n    # Now, Dedra has twice as much money as Timm.\n    equation2 = Eq(dedra + 72, 2 * (timm + 72))\n\n    solutions = solve((equation1, equation2), (dedra, timm))\n\n    return solutions[dedra]\n\nans = solution()"
    ],
    "748996495b98460c9ede4e3d079565a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jane, jack = symbols('jane jack')\n    equation1 = Eq(jane - jack, 5)\n    equation2 = Eq(jane + jack, 33)\n\n    solutions = solve((equation1, equation2), (jane, jack))\n\n    return solutions[jane]\n\nans = solution()"
    ],
    "eb93ba1f7aac42b6a7670ab7c76772c4": [
        "def solution():\n    N = 1\n    number_of_digits = 0\n\n    # Keep appending numbers to N until we reach 1000 digits\n    while number_of_digits < 1000:\n        N_str = str(N)\n        number_of_digits += len(N_str)\n\n        # If we exceeded the number of digits, undo the last addition,\n        # and find out the digit at the 1000th position\n        if number_of_digits >= 1000:\n            idx = 1000 - (number_of_digits - len(N_str)) - 1\n            ans = int(N_str[idx])\n            return ans\n        else:\n            N += 1\n\nans = solution()"
    ],
    "390c6b384a7c47feba87ecb9961bf4c4": [
        "def solution():\n    ans = 6.91 - 0.13\n    return ans\n\nans = solution()"
    ],
    "26973dde1699489cb5a3ca2bb878350e": [
        "def solution():\n    total_people = 23\n    behind_louis = 14\n    in_front_of_louis = total_people - behind_louis - 1 # Subtract 1 for Louis himself\n    return in_front_of_louis\n\nans = solution()"
    ],
    "6a9590e4dc124affafcabb1bb2c4dbf3": [
        "def solution():\n    return 257.36 / 0.4\n\nans = solution()"
    ],
    "6c63bbe1764848a7a7edbe24ddc026e9": [
        "def solution():\n    A_only = 62 - 48 - 36 + 25  # Vitamin A only, removing those with A&C, A&E, and adding those with A&C&E\n    C_only = 90 - 48 - 50 + 25  # Vitamin C only\n    E_only = 68 - 36 - 50 + 25  # Vitamin E only\n    A_and_C_only = 48 - 25       # Vitamin A and C only, not E\n    A_and_E_only = 36 - 25       # Vitamin A and E only, not C\n    C_and_E_only = 50 - 25       # Vitamin C and E only, not A\n    A_and_C_and_E = 25           # All three\n\n    total_fruits = (\n        A_only +\n        C_only +\n        E_only +\n        A_and_C_only +\n        A_and_E_only +\n        C_and_E_only +\n        A_and_C_and_E\n    )\n\n    return total_fruits\n\nans = solution()"
    ],
    "bfaf5aa76fe74c98aade35dd2f53d568": [
        "def solution():\n    from math import factorial\n\n    def permutations(n, r):\n        return factorial(n) // factorial(n-r)\n    \n    ans = permutations(18, 3)\n    return ans\n\nans = solution()"
    ],
    "9561236e6a034115a599777cf75dad5c": [
        "def solution():\n    ans = 6.31 - 3.2\n    return ans\n\nans = solution()"
    ],
    "9874ade3ca974e3a9cbed1309bdbedc8": [
        "def solution():\n    salary_per_month = 1.4\n    total_debt = 5.04\n    months_needed = total_debt / salary_per_month\n    return months_needed\n    \nans = solution()"
    ],
    "b999190a8cc2489a92311c186296685f": [
        "def solution():\n    veronica = 9\n    jonathan = 3 * veronica\n    rachel = jonathan + 48\n    return rachel\n\nans = solution()"
    ],
    "6a64f533a5b44e0a81122bb8514d9b21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jake, john = symbols('jake john')\n    equation1 = Eq(jake + john, 44)\n    equation2 = Eq(jake + 14, 2 * (john + 14))\n\n    solutions = solve((equation1, equation2), (jake, john))\n\n    john_future_age = solutions[john] + 14\n\n    return john_future_age\n\nans = solution()"
    ],
    "4d93eb426c534eb2b0fcd1e85de53d1d": [
        "def solution():\n    final_amount = 2360\n    interest_rate = 0.06\n    years = 3\n\n    initial_deposit = final_amount / ((1 + interest_rate) ** years)\n\n    return initial_deposit\n\nans = solution()"
    ],
    "1cf4ab67a6aa43e2b4e76978de4840ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    erasers, friends = symbols('erasers friends')\n    equation1 = Eq(erasers - 3, friends * 5)\n    equation2 = Eq(erasers + 2, friends * 6)\n    \n    solutions = solve((equation1, equation2), (erasers, friends))\n    \n    return solutions[erasers]\n\nans = solution()"
    ],
    "c65b1dcd5d9542dc8301c97e47a9f794": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the age of the youngest child\n    youngest = symbols('youngest')\n\n    # Define the age of the oldest child\n    oldest = youngest + 8 * 15 / 12  # since there are 15 months intervals\n\n    # Equation representing the age relationship\n    equation = Eq(oldest, 6 * youngest)\n\n    # Solve for the age of the youngest child\n    solution = solve(equation, youngest)\n\n    return solution[0]\n\nans = solution()"
    ],
    "db674de270ac4711b415cc34c37f9aff": [
        "def solution():\n    ans = 2018 - 786\n    return ans\n\nans = solution()"
    ],
    "d60abe09efb64d48bd30a37956fbb0c9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for each person's age\n    jack, jason, bruce, willie = symbols('jack jason bruce willie')\n\n    # Given conditions\n    jack_age = 4  # Jack is 4 years old\n    total_age = 19  # Total age of the 4 children\n\n    # Equations based on the problem statement\n    equation1 = Eq(jack, jack_age)\n    equation2 = Eq(jason - jack, 1)  # Jason is older than Jack\n    equation3 = Eq(bruce - jason, 0)  # Bruce is the same age as Jason\n    equation4 = Eq(willie - jason, 0)  # Willie is the same age as Jason\n    equation5 = Eq(jack + jason + bruce + willie, total_age)  # Total age equation\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (jack, jason, bruce, willie))\n\n    # Return the age of Jason\n    return solutions[jason]\n\nans = solution()"
    ],
    "2763d0dc70154f8c927352d51849cbe4": [
        "def solution():\n    for i in range(1000, 10000):\n        new_number = int(str(i % 10) + str(i // 10))\n        if new_number - i == 5877:\n            return i\n\nans = solution()"
    ],
    "d1a297dde50e43a99002f159a8a8b64a": [
        "def solution():\n    ans = sum((n**2 + (n+1)**2) / (n * (n+1)) for n in range(1, 2008))\n    return round(ans)\n\nans = solution()"
    ],
    "57e7b37a36d64b3ea1c8eaf24798521c": [
        "def solution():\n    # The goal is to minimize the result of the equation.\n    # Brackets can change the order of operations.\n    # To minimize the result, we aim to:\n    # 1. Increase the effect of subtraction by subtracting a large number.\n    # 2. Decrease the effect of addition by adding smaller numbers.\n    # 3. Place brackets around multiplication so it's not affected by addition or subtraction.\n    \n    # Original equation: 15+5*5+15-6+7\n    # To minimize:\n    # - Maximize the subtraction: Subtract the result of (15+5*5) from 15\n    # - Minimize the addtion effect: Add the smallest numbers 6 and 7 first\n    \n    # Modified equation with brackets to minimize result: 15 - ((15 + (5 * 5)) + (6 + 7))\n    result = 15 - ((15 + (5 * 5)) + (6 + 7))\n    return result\n\nans = solution()"
    ],
    "fd0626678d7e40de84c59fc2f0b662e1": [
        "def solution():\n    ans = 2.5 * 7.7 + 0.25 * 23\n    return ans\n\nans = solution()"
    ],
    "1ebf8cccb54b4188b3cdecb0ff9b3e1b": [
        "def solution():\n    ans = 75 * 0.29 + 75 * 0.01 * 74 - 0.3 / (2/15)\n    return ans\n\nans = solution()"
    ],
    "28b3d4a0798e4f5d952dbe5322188194": [
        "def solution():\n    first_multiple = (50 // 11) * 11\n    if first_multiple < 50:\n        first_multiple += 11\n    last_multiple = (150 // 11) * 11\n    if last_multiple > 150:\n        last_multiple -= 11\n    num_multiples = ((last_multiple - first_multiple) // 11) + 1\n    return num_multiples\n\nans = solution()"
    ],
    "e1cf756e61684775af46c3970f3ab17f": [
        "def solution():\n    train_length = 200\n    bridge_length = 220\n    speed = 60\n    \n    # Total distance traveled by the end of the train to cross the bridge\n    total_distance = train_length + bridge_length\n\n    # Time = Distance / Speed\n    time_taken = total_distance / speed\n\n    return time_taken\n\nans = solution()"
    ],
    "342cd5472a69472ab392495beba4ee8b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cayden, jiaxiang = symbols('cayden jiaxiang')\n    \n    # Cayden has 5 more sweets than Jiaxiang\n    equation = Eq(cayden, jiaxiang + 5)\n    # Cayden gives Jiaxiang 10 sweets\n    new_cayden = cayden - 10\n    new_jiaxiang = jiaxiang + 10\n    # Find the difference after the exchange\n    difference = new_cayden - new_jiaxiang\n\n    # Solve for cayden and jiaxiang\n    solutions = solve(equation)\n\n    # Calculate the difference with the values obtained\n    difference_value = difference.subs(solutions)\n\n    return difference_value\n\nans = solution()"
    ],
    "3a0b88faf37e4067b5a697aa6c171c8d": [
        "def solution():\n    # Total score obtained by 5 pupils is 5 * average_score\n    total_score_5_pupils = 5 * 72\n\n    # Mary takes the test and the new average is for 6 pupils now\n    new_average = 75\n\n    # Total score for 6 pupils after including Mary's score\n    total_score_6_pupils = 6 * new_average\n\n    # Mary's score is the difference between the total scores\n    marys_score = total_score_6_pupils - total_score_5_pupils\n\n    return marys_score\n\nans = solution()"
    ],
    "176806bd2d38491fb95d4bb561a6bcc2": [
        "def solution():\n    total_cookies = 200\n    morning_cookies = total_cookies * (1 / 5)\n    remainder = total_cookies - morning_cookies\n    afternoon_cookies = remainder * (3 / 4)\n    return afternoon_cookies\n\nans = solution()"
    ],
    "2610ab8c39aa47039e5d5e3e44e751e3": [
        "def solution():\n    distance_to_market = 48\n    walking_speed = 8\n    minutes_taken = distance_to_market / walking_speed\n    return int(minutes_taken)\n\nans = solution()"
    ],
    "439376d5d90d4b149b7e06233ef1f948": [
        "def solution():\n    greatest_number = 0\n    for num in range(999, 100, -1):\n        if num % 2 != 0 and num % 9 == 0:\n            tens_digit = (num // 10) % 10\n            if tens_digit % 4 == 0:\n                greatest_number = num\n                break\n    return greatest_number\n\nans = solution()"
    ],
    "850576e4f94e42508fc4e975ba331970": [
        "def solution():\n    # Maximum number of draws without getting all 4 colors is when she\n    # draws all but one of three colors. The next draw guarantees the fourth color.\n    # Since she could draw all 4 red, all 7 green, and all 6 blue before getting an orange,\n    # she needs 4 (red) + 7 (green) + 6 (blue) + 1 for the guaranteed different color (orange).\n    draws = 4 + 7 + 6 + 1\n    return draws\n\nans = solution()"
    ],
    "16953792ef8c48809eac37a4caf5d3f5": [
        "def solution():\n    ans = 0.2 * 7\n    return ans\n\nans = solution()"
    ],
    "a9f9d09538154b1e94723a8e9651f18f": [
        "def solution():\n    from math import comb\n    # There must be at least 1 doughnut per student. We subtract 4 to account for that.\n    # Then we have to distribute the remaining 7 doughnuts to 4 students.\n    # This is equivalent to placing 3 dividers among the 7 doughnuts to separate them into 4 groups.\n    # This is a classic \"stars and bars\" combinatorial problem.\n    # The number of ways to distribute n identical items into k different bins is comb(n + k - 1, k - 1).\n    ans = comb(7 + 4 - 1, 4 - 1)\n    return ans\n\nans = solution()"
    ],
    "e81257a894bf49f182de3109989a386e": [
        "def solution():\n    midday_temp = 4\n    temp_drop = 11\n    midnight_temp = midday_temp - temp_drop\n    return midnight_temp\n\nans = solution()"
    ],
    "e3d851587fc14bcdbe8c7bfda9cd6200": [
        "def solution():\n    # 5 pound note is 500 pence\n    five_pound_note = 500\n    # Possible coins in pence: 5, 10, 20, 50, 100, 200 (all multiples of 5)\n    coins = [5, 10, 20, 50, 100, 200]\n    # Find all possible combinations of 5 different coins\n    for i in range(len(coins)):\n        for j in range(i + 1, len(coins)):\n            for k in range(j + 1, len(coins)):\n                for l in range(k + 1, len(coins)):\n                    for m in range(l + 1, len(coins)):\n                        if five_pound_note - (coins[i] + coins[j] + coins[k] + coins[l] + coins[m]) >= 0:\n                            spent = five_pound_note - (coins[i] + coins[j] + coins[k] + coins[l] + coins[m])\n                            return spent\n\nans = solution()"
    ],
    "3d7b8c3bc3f54a2dbce551c74529dd16": [
        "def solution():\n    for num_10_notes in range(38 + 1):\n        num_2_notes = 38 - num_10_notes\n        spent_10_notes = 0.8 * num_10_notes\n        spent_2_notes = 0.75 * num_2_notes\n        remaining_10_notes = num_10_notes - spent_10_notes\n        remaining_2_notes = num_2_notes - spent_2_notes\n        \n        if remaining_10_notes == 3 * remaining_2_notes:\n            cost_of_fan = spent_10_notes * 10 + spent_2_notes * 2\n            return cost_of_fan\n\nans = solution()"
    ],
    "04e3e33129dc4f65bfae11d6c879f614": [
        "def solution():\n    initial_hives = 5\n    initial_production = 50  # production in kg for initial_hives\n    desired_production = 90  # desired production in kg\n\n    # Calculate production per hive\n    production_per_hive = initial_production / initial_hives\n\n    # Calculate the total number of hives needed for desired production\n    total_hives_needed = desired_production / production_per_hive\n\n    # Calculate the additional hives needed\n    additional_hives_needed = total_hives_needed - initial_hives\n\n    return int(additional_hives_needed)\n\nans = solution()"
    ],
    "c5a32fbb6fcb46b48f3e67ce27fcc7b2": [
        "def solution():\n    first_term = 4\n    difference = 3\n    student_number = 23\n\n    nth_term = first_term + (student_number - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "b7e31907e86c496e848fa4239fbfcc8e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the initial amounts of erasers for Ali and Kumar be 7x and 5x respectively\n    x = symbols('x')\n    # Ali gives Kumar 10 erasers, so Ali will have 7x - 10 and Kumar will have 5x + 10\n    # The ratio becomes 1:5\n    equation = Eq((7 * x - 10) / (5 * x + 10), 1 / 5)\n    x_value = solve(equation, x)[0]\n\n    # Now calculate the total amount of erasers they had originally\n    total_erasers = 7 * x_value + 5 * x_value\n\n    return total_erasers\n\nans = solution()"
    ],
    "30f09344ca4a4013b33fc28adc31ff05": [
        "def solution():\n    total_time_in_minutes = 8 * 60 + 20  # Convert 8 hours and 20 minutes to minutes\n    activity_with_break = 45 + 20  # The total time for each activity including the break\n\n    # Since the last activity does not have a break after it, we subtract one break from the total time\n    total_time_in_minutes -= 20\n\n    # Calculate the number of activities by dividing the total time by the time for each activity with break\n    number_of_activities = total_time_in_minutes // activity_with_break\n\n    return number_of_activities\n\nans = solution()"
    ],
    "7866c751419b4d9097fee74972b01d9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the price of one banana and one pear\n    banana, pear = symbols('banana pear')\n\n    # Create equations based on the information given\n    equation1 = Eq(banana + 3 * pear, 84)\n    equation2 = Eq(banana + pear, 48)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (banana, pear))\n\n    return solutions[banana]\n\nans = solution()"
    ],
    "69bc4bec9bee483683d61a26cbefa4ac": [
        "def solution():\n    # Let's denote Adam's weight as A, Ben's weight as B, and Carl's weight as C.\n    # According to the problem, we have the following three sums:\n    # A + B = 102\n    # B + C = 97\n    # A + C = 92\n\n    # To find the total weight of Adam, Ben, and Carl, we need to sum A + B + C.\n    # We simply add all three given sums and then divide by 2 to correct for the doubling of weights:\n    total_double_weight = 102 + 97 + 92\n    total_weight = total_double_weight / 2\n\n    return total_weight\n\nans = solution()"
    ],
    "999d1345ce434bc0b7648892d297c82e": [
        "def solution():\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = Eq(2 + 3 * (x - 26), 52 - (x - 40))\n\n    ans = solve(equation, x)[0]\n\n    return ans\n\nans = solution()"
    ],
    "b5e98b7ca17e48e9aceb47ddcd12fb5e": [
        "from itertools import permutations\n\ndef solution():\n    cards = ['0', '3', '5', '8']\n    count = 0\n    for perm in permutations(cards, 4):\n        number = int(''.join(perm))\n        if number > 5000:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "5993b277c13b4ff38cb800c6c4a33a65": [
        "def solution():\n    marks = [16, 15, 16, 10]\n    mean_score = sum(marks) / len(marks)\n    return mean_score\n\nans = solution()"
    ],
    "ec93c9b0e33b4132b916d18ebb789c94": [
        "def solution():\n    result = (3/5) * 35\n    return result\n\nans = solution()"
    ],
    "46cd8c8fc22a4192a04253ceaca842cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    # A's efficiency is twice B's\n    equation1 = Eq(A, 2 * B)\n    # A finishes in 5 days less than B\n    equation2 = Eq(1/A + 5, 1/B)\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    # B's time to finish the job\n    B_time = 1 / solutions[B]\n\n    return B_time\n\nans = solution()"
    ],
    "f015194282af429a8af72aaa964f578e": [
        "def solution():\n    import math\n    # First leg of the trip: East 15 km, then North 3 km\n    # Second leg of the trip: West 9 km (so effectively East 6 km from the starting point), finally North 5 km\n    # The shortest distance will be a straight line from A to B, which forms a right triangle\n\n    # The total east-west distance is 15 km east - 9 km west = 6 km to the east\n    east_west_dist = 15 - 9\n\n    # The total north-south distance is 3 km + 5 km = 8 km to the north\n    north_south_dist = 3 + 5\n\n    # The shortest distance is the hypotenuse of the right triangle formed\n    shortest_dist = math.sqrt(east_west_dist ** 2 + north_south_dist ** 2)\n\n    return shortest_dist\n\nans = solution()"
    ],
    "899bd98193b34e558ea4353df664f200": [
        "def solution():\n    num_str = '123456'\n    odd_sum = sum(int(num_str[i]) for i in range(0, len(num_str), 2))\n    even_sum = sum(int(num_str[i]) for i in range(1, len(num_str), 2))\n    diff = abs(odd_sum - even_sum)\n    is_divisible = diff % 11 == 0\n    remainder = diff % 11\n\n    # George is not correct if the remainder is not 1.\n    correct = (remainder == 1)\n    return (correct, remainder)\n\nans = solution()"
    ],
    "2fe30b6237e0498f8b46e088fbbc4301": [
        "def solution():\n    total_bulbs = 40\n    crocus_bulbs = 0.25 * total_bulbs  # 25%\n    tulip_bulbs = 1/5 * total_bulbs    # 1/5 or 20%\n    \n    daffodil_bulbs = total_bulbs - crocus_bulbs - tulip_bulbs\n    return int(daffodil_bulbs)\n\nans = solution()"
    ],
    "9f293803776049bca507bf11f748846b": [
        "def solution():\n    initial_length_m = 2.06  # initial length in meters\n    final_length_m = 78 / 100  # final length in meters (converted from cm)\n    \n    melted_length_m = initial_length_m - final_length_m\n    \n    return melted_length_m\n\nans = solution()"
    ],
    "66c27502b84244db8f72fb311fd7f115": [
        "def solution():\n    percentage = 40 / 100\n    total_grams = 650\n    \n    ans = percentage * total_grams\n    return ans\n\nans = solution()"
    ],
    "aa84ae289f2b4586bef8164084d18865": [
        "def solution():\n    def ways(n):\n        if n == 1:\n            return 1\n        elif n < 1:\n            return 0\n        elif n == 4:\n            return 2  # He can take four 1-step moves or one 4-step move\n        else:\n            return ways(n-1) + ways(n-4)\n\n    ans = ways(9)\n    return ans\n\nans = solution()"
    ],
    "ee942986e3444be99926258561b6aba7": [
        "def solution():\n    dividend = 3549\n    divisor = 7\n    result = dividend // divisor\n    return result\n\nans = solution()"
    ],
    "b417154f43274315bf9c280cf406e937": [
        "def solution():\n    planes_in_12_minutes = 17\n    minutes = 36\n    planes_in_36_minutes = (planes_in_12_minutes * minutes) / 12\n\n    return planes_in_36_minutes\n\nans = solution()"
    ],
    "2d139d10c0eb4247b231356fa4fdf082": [
        "def solution():\n    estimate = 35\n    interval = 5\n    lower_bound = estimate - (interval / 2)\n    return lower_bound\n\nans = solution()"
    ],
    "f50bfa91cfc94371b13058e0e79935a3": [
        "def solution():\n    initial_passengers = 35\n    after_first_stop = initial_passengers - (2 * initial_passengers // 5) + 7\n    after_second_stop = after_first_stop - (after_first_stop // 4) + 13\n    return after_second_stop\n\nans = solution()"
    ],
    "7f37d7d7b9fc4673a77900f514ce7751": [
        "def solution():\n    count = 0\n    for school1 in range(98, 103):\n        for school2 in range(98, 103):\n            school3 = 300 - school1 - school2\n            if 98 <= school3 <= 102:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "985600d1f0d24b41a9d3607140bd9878": [
        "def solution():\n    total_toys = 40\n    elephant_position = 10\n    toys_between = 5\n\n    rabbit_position_from_left = elephant_position - toys_between - 1\n    rabbit_position_from_right = total_toys - rabbit_position_from_left\n\n    return rabbit_position_from_right\n\nans = solution()"
    ],
    "96f6824d7c5c43528d8840695801e0fa": [
        "def solution():\n    # Series formula for the sum of the first n cubes\n    # S_n = (1^3 + 2^3 + 3^3 + ... + n^3) = (1 + 2 + 3 + ... + n)^2\n\n    # Calculate the sum of the sequence 0.5, 1, 1.5, ..., 10\n    # Each term is 0.5 more than the previous term, so we scale the series\n    scale_factor = 0.5\n    n = int(10 / scale_factor)  # Find the number of terms\n\n    # Calculate the sum of the first n integers\n    sum_of_integers = 0.5 * n * (n + 1) * scale_factor\n\n    # Using the series formula, square the sum to find the sum of the cubes\n    sum_of_cubes = sum_of_integers ** 2\n\n    return sum_of_cubes\n\nans = solution()"
    ],
    "bb41ee852bed4cf5adccccc9b1c77534": [
        "def solution():\n    total_biscuits = 12\n    people = 1 + 3  # Ewan and his 3 sisters\n    biscuits_per_person = total_biscuits / people\n    return biscuits_per_person\n\nans = solution()"
    ],
    "ff86d855c39d4764a5ffb262848abdd0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the work to do as 1 (writing the book)\n    work = 1\n    \n    # Nancy completes in 6 days\n    nancy_rate = work / 6\n    \n    # Together they complete in 4 days\n    together_rate = work / 4\n    \n    # Let tim_rate be the rate at which Tim works\n    tim = symbols('tim')\n    tim_rate = work / tim\n    \n    # The equation representing combined work rates of Nancy and Tim\n    equation = Eq(nancy_rate + tim_rate, together_rate)\n    \n    # Solving for tim\n    solution = solve(equation, tim)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "7a500b5489884af9ad95dc1143f1643a": [
        "def solution():\n    pencils = 1\n    while True:\n        if (pencils % 2 == 1 and\n            pencils % 3 == 2 and\n            pencils % 4 == 3 and\n            pencils % 5 == 4):\n            return pencils\n        pencils += 1\n\nans = solution()"
    ],
    "111b0f86493b40b19e61144527ced67f": [
        "def solution():\n    result = (3 / 7) * 385\n    return result\n\nans = solution()"
    ],
    "40a2c5266dff4ef9b884738049f2b326": [
        "def solution():\n    # Let x be the number of years it will take for the sum of their ages to be 40\n    # Current sum of their ages is 22\n    # In x years, Geoff's age will be Geoff's current age + x\n    # Similarly, sister's age will be sister's current age + x\n    \n    # Therefore, the equation for the sum of their ages in x years is:\n    # (Geoff's current age + x) + (sister's current age + x) = 40\n    # We know that Geoff's current age + sister's current age = 22\n    # Let's call Geoff's current age G and his sister's current age S\n    \n    # G + S = 22 (current sum of ages)\n    # (G + x) + (S + x) = 40 (sum of ages in x years)\n    \n    # By substitution, we have:\n    # (22 + 2x) = 40 (since G + S = 22)\n    # 2x = 40 - 22\n    # 2x = 18\n    # x = 18 / 2\n    # x = 9\n    \n    # So it will take 9 years for the sum of their ages to be 40\n    x = (40 - 22) / 2\n    return int(x)\n\nans = solution()"
    ],
    "f3c6461dee114615a71a938306942695": [
        "def solution():\n    numbers = [8, 14, 6, 9, 13, 12]\n    mean_value = 12\n    total_sum = mean_value * (len(numbers) + 1)\n    sum_of_known_numbers = sum(numbers)\n    a = total_sum - sum_of_known_numbers\n    return a\n\nans = solution()"
    ],
    "c9a78261a27b44b1bdd0c3d2ee5a8794": [
        "def solution():\n    pink_ribbon = 2.5 * 100  # convert to centimeters\n    blue_ribbon = 220\n    orange_ribbon = 30.5\n\n    longest_ribbon_length = max(pink_ribbon, blue_ribbon, orange_ribbon)\n    \n    if longest_ribbon_length == pink_ribbon:\n        return \"pink\"\n    elif longest_ribbon_length == blue_ribbon:\n        return \"blue\"\n    else:\n        return \"orange\"\n\nans = solution()"
    ],
    "e78f15baf14349d3a74406de623335fc": [
        "def solution():\n    from math import lcm\n\n    # Convert minutes to seconds for consistency\n    light1_cycle = 1 * 60  # in seconds\n    light2_cycle = 1.5 * 60  # in seconds\n\n    # Calculate the least common multiple (lcm) of the first two lights\n    lcm_two_lights = lcm(light1_cycle, light2_cycle)\n\n    # Since all three lights turn green every 9 minutes, convert that to seconds\n    all_lights_cycle = 9 * 60  # in seconds\n\n    # The third light's cycle must divide the lcm of all three lights\n    # Start checking from 30 seconds (since it has to be at least 30 seconds or longer)\n    for third_light_cycle in range(30, all_lights_cycle + 1):\n        if lcm(lcm_two_lights, third_light_cycle) == all_lights_cycle:\n            return third_light_cycle  # return the shortest possible cycle in seconds\n\nans = solution()"
    ],
    "c694691621a9431ea4bca6bc4ce553d4": [
        "def solution():\n    total_mass_in_g = 172 * 1000  # convert kg to g\n\n    # The weights of individual packets\n    weight_p = 300\n    weight_q = 400\n    weight_r = 500\n\n    # Ratio of the packets\n    ratio_p = 7\n    ratio_q = 3\n    ratio_r = 2\n    ratio_sum = ratio_p + ratio_q + ratio_r\n\n    # Total mass contributed by each ingredient\n    mass_p = ratio_p * weight_p\n    mass_q = ratio_q * weight_q\n    mass_r = ratio_r * weight_r\n    total_mass_per_set = mass_p + mass_q + mass_r\n\n    # Number of sets used to make the sauce\n    sets = total_mass_in_g // total_mass_per_set\n\n    # Total number of packets used\n    total_packets = sets * ratio_sum\n\n    return total_packets\n\nans = solution()"
    ],
    "4c802ea687a8492b9acb91c335e6d58b": [
        "def solution():\n    sale_price = 75\n    discount_rate = 50 / 100\n    original_price = sale_price / (1 - discount_rate)\n    return original_price\n\nans = solution()"
    ],
    "dab2cf7eb1d44c0eba4e7832b4ff92e8": [
        "def solution():\n    prep_time = 10\n    baking_time = 15\n    washing_time = 5\n    eating_time = 15\n\n    total_time = prep_time + baking_time + washing_time + eating_time\n\n    return total_time\n\nans = solution()"
    ],
    "3ac7118d01c14ab5a18f0c5846d9e605": [
        "def solution():\n    # Rachel's speed is 84 km/h\n    rachel_speed = 84\n    # Rachel is 39 km away from City F after Eleanor takes 4 hours\n\n    # Eleanor takes 1.5 hrs more\n    # Rachel's distance from City G when Eleanor arrives is:\n    rachel_distance_to_g = (4 + 1.5) * rachel_speed\n    # Eleanor's distance from F to G\n    eleanor_distance_to_g = rachel_distance_to_g + 39\n    \n    return eleanor_distance_to_g\n\nans = solution()"
    ],
    "75592f9b267643f6ad1600fe6fa8b090": [
        "def solution():\n    total_students = 25\n    number_of_boys = 5\n\n    percent_of_boys = (number_of_boys / total_students) * 100\n    \n    return percent_of_boys\n\nans = solution()"
    ],
    "758c762d7161444799a78a19de32398f": [
        "def solution():\n    # Number of each color car\n    red_cars = 3\n    blue_cars = 12\n    green_cars = 15\n    \n    # People each car can carry\n    red_car_capacity = 10\n    blue_car_capacity = 15\n    green_car_capacity = 20\n    \n    # Total people each color car can carry\n    total_red = red_cars * red_car_capacity\n    total_blue = blue_cars * blue_car_capacity\n    total_green = green_cars * green_car_capacity\n    \n    # Total number of cars\n    total_cars = red_cars + blue_cars + green_cars\n    \n    # Total people all cars can carry\n    total_people = total_red + total_blue + total_green\n    \n    # Average amount of people per car\n    average_people = total_people / total_cars\n    \n    return average_people\n\nans = solution()"
    ],
    "c6530b57d5304a398df4e406019afc9f": [
        "def solution():\n    canadian_dollars = 64\n    exchange_rate = 1.25\n    us_dollars = canadian_dollars / exchange_rate\n    return us_dollars\n\nans = solution()"
    ],
    "c4b23a034eb54649b787eefdf2846d0a": [
        "def solution():\n    # The new operation ⊙ is defined as adding the first number concatenated\n    # with itself a number of times equal to the second number.\n    # For 4 ⊙ 3, it should be 4 + 44 + 444\n\n    # Initialize the sum for the operation\n    result_sum = 0\n    # The first number to be operated on\n    first_number = 4\n    # How many times to concatenate the first number\n    num_times = 3\n    # String representation of the first number to aid in concatenation\n    str_num = str(first_number)\n\n    # Perform the operation\n    for i in range(1, num_times + 1):\n        # Concatenate the string representation of first_number i times\n        term = int(str_num * i)\n        # Add the concatenated number to the result sum\n        result_sum += term\n\n    return result_sum\n\nans = solution()"
    ],
    "1f5b327371834bc891e8992a355a3c02": [
        "def solution():\n    return 8 + 10 - 1\n\nans = solution()"
    ],
    "8af91674f16f411fb99260d559566771": [
        "def solution():\n    numbers = [4, 11, 8, 2, 7, 13]\n    largest_number = max(numbers)\n    smallest_number = min(numbers)\n    \n    result = (2 * largest_number) - (3 * smallest_number)\n    return result\n\nans = solution()"
    ],
    "ce900c6f009e458cad1bdac095599872": [
        "def solution():\n    ans = 4.6 - 3.55\n    return ans\n\nans = solution()"
    ],
    "eb710dc184384ed3b2e9731301601159": [
        "def solution():\n    total_score = 5 * 90  # Total score for the group to achieve the average\n    \n    # Now we find the smallest number that when we subtract from the total score,\n    # and then divide the remaining score by 4 (remaining students),\n    # we get a possible lowest number for the 4 remaining students.\n    min_score = 0\n    while True:\n        remaining = total_score - min_score\n        if remaining % 4 == 0 and remaining // 4 - 1 > min_score:\n            break\n        min_score += 1\n\n    return min_score\n\nans = solution()"
    ],
    "4b26a9102a274ba0b8e309640745063b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b, c = symbols('a b c')  # Let a, b, c be the lengths of ropes A, B, and C respectively\n\n    equation1 = Eq(a, 3 * b)    # Rope A is 3 times as long as Rope B\n    equation2 = Eq(c, b + 56)   # Rope C is 56 cm longer than Rope B\n    equation3 = Eq(a, c + 130)  # Rope A is 1 m 30 cm (which is 130 cm) longer than Rope C\n\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n\n    # Total length in cm\n    total_length = solutions[a] + solutions[b] + solutions[c]\n\n    return total_length\n\nans = solution()"
    ],
    "07ed7dd4a7c04b8aaf4b1c03f590920c": [
        "from itertools import combinations\n\ndef solution():\n    total = list(combinations('ABCDE', 3))\n    fav = [i for i in total if 'A' in i and 'B' in i]\n    probability = len(fav) / len(total)\n    return probability\n\nans = solution()"
    ],
    "b2b5b4f81d8448afaba3be6d10769542": [
        "def solution():\n    total_volume = 200 + 300\n    total_fruit_juice = (200 * 0.35) + (300 * 0.50)\n    concentration = (total_fruit_juice / total_volume) * 100\n    return concentration\n\nans = solution()"
    ],
    "3c6c375d11374de1b3101dfbfc2c9524": [
        "def solution():\n    x = 3 * 48 / 4\n    return x\n\nans = solution()"
    ],
    "5c67d22d929c48579cb3027189617400": [
        "def solution():\n    return 1212 // 6\n\nans = solution()"
    ],
    "4287149f96d446cfa12f1fd21889e61b": [
        "def solution():\n    total_members = 50 + 70\n    student_males = 0.16 * 50\n    student_females = 0.10 * 70\n    total_students = student_males + student_females\n    percentage_students = (total_students / total_members) * 100\n    return percentage_students\n\nans = solution()"
    ],
    "c18565e80cc44b0cb72b59076a383b6d": [
        "def solution():\n    amy_apples = 37\n    john_apples = 15\n\n    # If Amy has to have 4 more apples than John after giving him some,\n    # let's denote the number of apples Amy gives to John as x.\n    # Then Amy will have (amy_apples - x) apples,\n    # and John will have (john_apples + x) apples.\n    # We need to find the value of x for which (amy_apples - x) - (john_apples + x) = 4.\n    # Simplifying the above equation gives us 2x = (amy_apples - john_apples) - 4\n\n    x = (amy_apples - john_apples - 4) // 2\n    return x\n\nans = solution()"
    ],
    "ae4e6b1dfa8a49a5b3241156334f3bed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    betty, veron, eliza = symbols('betty veron eliza')\n    \n    equation1 = Eq(eliza, 2 * veron)\n    equation2 = Eq(betty, eliza - 185)\n    equation3 = Eq(betty + veron + eliza, 855)\n\n    solutions = solve((equation1, equation2, equation3), (betty, veron, eliza))\n\n    return solutions[betty]\n\nans = solution()"
    ],
    "ff63e777962f41f4899b17ad9e14deeb": [
        "def solution():\n    first_term = 1\n    last_term = 159\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_terms\n\nans = solution()"
    ],
    "622956fd3ac44f62a123456124a4a8b9": [
        "def solution():\n    total_markers = 32\n    markers_given_away = 7\n    markers_left = total_markers - markers_given_away\n    bags_packed = markers_left // 5\n\n    return bags_packed\n\nans = solution()"
    ],
    "bc597e322c194058a175f92bfbfd92e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the total number of papers\n    x = symbols('x')\n\n    # Original rate of marking papers (papers per hour)\n    original_rate = x / 5\n    \n    # After an hour, effective remaining time is 4 hours\n    # New rate to finish on time after 1 hour: (papers per hour)\n    increased_rate = (x - original_rate) / 4\n    \n    # If she marks 10 more papers per hour than the increased rate, she can finish in 3 hours\n    # New rate to finish an hour earlier: (papers per hour)\n    faster_rate = (x - original_rate) / 3\n    \n    # Setting up the equations based on the above conditions\n    equation1 = Eq(increased_rate, original_rate + 6)\n    equation2 = Eq(faster_rate, original_rate + 10)\n\n    # Solving the system of equations for x\n    solutions = solve((equation1, equation2), (x))\n\n    return int(solutions[0])  # since x should be a positive integer\n\nans = solution()"
    ],
    "b75379f387c44ded9da89ecef088d85d": [
        "def solution():\n    bill = 55\n    tip_percentage = 0.20\n    tax_percentage = 0.10\n\n    tip = bill * tip_percentage\n    tax = bill * tax_percentage\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "dd320540af104d229ba61a14357af45a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jug, cup = symbols('jug cup')\n\n    equation1 = Eq(4 * jug + 5 * cup, 85)\n    equation2 = Eq(2 * jug + 2 * cup, 40)\n\n    solutions = solve((equation1, equation2), (jug, cup))\n\n    return solutions[cup]\n\nans = solution()"
    ],
    "70deaa04761b4956a63e868e9ffc6d99": [
        "def solution():\n    # Number of chicken, vegetable, and fruit pies\n    chicken_pies = 40\n    vegetable_pies = 20\n    fruit_pies = 30\n    \n    # (1) Fraction of the chicken pies more than vegetable pies\n    more_chicken_than_vegetable = chicken_pies - vegetable_pies\n    fraction_more_chicken = more_chicken_than_vegetable / chicken_pies\n    \n    # (2) Fraction of the vegetable pies less than fruit pies\n    less_vegetable_than_fruit = fruit_pies - vegetable_pies\n    fraction_less_vegetable = less_vegetable_than_fruit / vegetable_pies\n    \n    return (fraction_more_chicken, fraction_less_vegetable)\n\nans = solution()"
    ],
    "939e258bc3ae4686add9892e1a88d211": [
        "def solution():\n    for a in range(1, 10):  # 'a' must be non-zero to make 'ab' a 2-digit number\n        for b in range(10):  # 'b' can be zero\n            ab = 10 * a + b\n            ba = 10 * b + a\n            if 8 * ab == 3 * ba:\n                return ab\n\nans = solution()"
    ],
    "52eea861c20540a8873541169102d6b1": [
        "def solution():\n    greatest_1_digit_even = 8\n    smallest_2_digit_odd = 11\n    sum_numbers = greatest_1_digit_even + smallest_2_digit_odd\n    return sum_numbers\n\nans = solution()"
    ],
    "433eb146729b4478bbfd89939dc13d1d": [
        "def solution():\n    designs_made = 24\n    fraction_made = 3/4\n\n    total_designs = designs_made / fraction_made\n\n    return int(total_designs)\n\nans = solution()"
    ],
    "9d40cceb3a7043b58f824a777d1db3e8": [
        "def solution():\n    count = 0\n    for i in range(1, 1000):\n        if sum(map(int, str(i))) == 4 and 100 <= i <= 999:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "9b15cde54f244f2688f75ecf97188c89": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        if sum(map(int, str(i))) == 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "85d27affc1b445c88f9b4a5e100c1bd9": [
        "def solution():\n    sum_of_digits = 0\n    for page in range(1, 208):\n        for digit in str(page):\n            sum_of_digits += int(digit)\n    return sum_of_digits\n\nans = solution()"
    ],
    "b9a7c7092370400a8a6b8c58ae2510c9": [
        "def solution():\n    return 5.4 + 3.7\n\nans = solution()"
    ],
    "bacdd0107009480e90e10957f1ab6f1c": [
        "def solution():\n    # Since we have 13 different numbers and we want to ensure 4 consecutive numbers,\n    # we consider the worst case using the pigeonhole principle.\n    # The worst case occurs when we have at least one card from each of the non-consecutive\n    # numbers. To ensure we have 4 consecutive numbers, we need to draw one more \n    # than 13 (which is the total number of different numbers that are not consecutive)\n    \n    # Thus, we need to draw at least 14 cards to ensure 4 consecutive numbers.\n    return 14\n\nans = solution()"
    ],
    "0e7224d495f743d994a3285524f8f2a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    total_money, cap_cost, wristband_cost = symbols('total_money cap_cost wristband_cost')\n    \n    # Write the equations based on the given problem\n    # Caleb spent 2/5 of his money on 4 caps and 6 wristbands.\n    equation1 = Eq((2/5) * total_money, 4 * cap_cost +  6 * wristband_cost)\n    # The cost of each cap is 3 times the cost of each wristband.\n    equation2 = Eq(cap_cost, 3 * wristband_cost)\n    # He bought some more caps with 1/3 of his remaining money.\n    # Remaining money is total_money - 2/5 * total_money = 3/5 * total_money\n    # Money spent on more caps is 1/3 of the remaining money, which is 1/3 * 3/5 * total_money = 1/5 * total_money\n    equation3 = Eq((1/5) * total_money, cap_cost * symbols('additional_caps'))\n    \n    # Solve the equations to get the cap_cost and wristband_cost.\n    solutions = solve((equation1, equation2), (cap_cost, wristband_cost))\n    \n    # Calculate the number of additional caps bought with 1/3 of remaining money\n    additional_caps = solve(equation3.subs(cap_cost, solutions[cap_cost]), symbols('additional_caps'))[0]\n    \n    # Calculate the total caps bought: 4 initial caps + additional caps bought later\n    total_caps = 4 + additional_caps\n    \n    return total_caps\n\nans = solution()"
    ],
    "8a063eb7bf3f4613bbd55a6c63048295": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Constants based on the physical problem\n    g = 9.81  # Acceleration due to gravity in m/s^2\n\n    # Define symbols for the velocities at start (v1) and at 2000m (v2)\n    v1, v2 = symbols('v1 v2')\n\n    # At initial jump, the velocity is 0 (v1=0)\n    equation1 = Eq(v1, 0)\n\n    # Use energy conservation: Initial potential energy = Final kinetic energy + Final potential energy\n    # m * g * h_initial = 0.5 * m * v2^2 + m * g * h_final\n    # Here, we can ignore m (mass of the skydiver) as it will cancel out\n    # h_initial is 3000m, h_final is 2000m, so Δh = 1000m\n    delta_h = 3000 - 2000\n\n    # Initial potential energy (m * g * h) is transformed into kinetic energy (0.5 * m * v^2)\n    # We are ignoring air resistance, so all potential energy is converted into kinetic\n    # Hence, m * g * delta_h = 0.5 * m * v2^2\n    # Solving for v2, we will obtain the velocity at 2000m altitude\n    equation2 = Eq(g * delta_h, 0.5 * v2**2)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (v1, v2))\n\n    # Return the absolute value of velocity as we only want the magnitude\n    return abs(solutions[v2])\n\nans = solution()"
    ],
    "aa716df8b445405ab6cdebdb3ae4adf9": [
        "def solution():\n    ashley_age = 10\n    brother_age = (ashley_age - 3) - 2\n    return brother_age\n\nans = solution()"
    ],
    "9c2c49e5d3134ddeb8fb6b3c0c42f5cd": [
        "def solution():\n    total_pages = 89\n    actual_page_number = 0\n    for _ in range(total_pages):\n        actual_page_number += 1\n        if actual_page_number % 3 == 0:\n            actual_page_number += 1\n    return actual_page_number\n\nans = solution()"
    ],
    "8a66caf6aaba494f95bca104943cb7c4": [
        "def solution():\n    ans = 459 + 3762\n    return ans\n\nans = solution()"
    ],
    "6e9234dea3b64376a232e45d14effce4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    adults, children = symbols('adults children')\n    \n    # Equation representing the total number of tickets sold\n    equation1 = Eq(adults + children, 19)\n    # Equation representing the total amount for the sale of tickets\n    equation2 = Eq(5 * adults + 3 * children, 75)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (adults, children))\n\n    return solutions[adults]\n\nans = solution()"
    ],
    "5cb5ef0814c74ded81cb8b6ce6f1bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3*x - (2*x + 3), 5)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "f8495fe245f34edeb912b66b7ea8ce5c": [
        "def solution():\n    ans = 123 + 468\n    return ans\n\nans = solution()"
    ],
    "66edf568e9a74a2aa97d9e92b05d94e2": [
        "def solution():\n    tom_current_age = 10\n    tom_future_age = 20\n    grandma_future_age = 60\n    age_difference = grandma_future_age - tom_future_age\n    grandma_current_age = tom_current_age + age_difference\n    return grandma_current_age\n\nans = solution()"
    ],
    "0bced7bb4af84506acecdc385274abfd": [
        "def solution():\n    # Define the inclusive range\n    min_val = 1\n    max_val = 600\n\n    # Calculate number of multiples for 3 and 5 within the range\n    multiples_of_3 = (max_val // 3) - (min_val - 1) // 3\n    multiples_of_5 = (max_val // 5) - (min_val - 1) // 5\n\n    # Calculate number of multiples for 15 (3 * 5) to avoid double counting\n    multiples_of_15 = (max_val // 15) - (min_val - 1) // 15\n\n    # Apply the Inclusion-Exclusion Principle\n    ans = multiples_of_3 + multiples_of_5 - multiples_of_15\n\n    return ans\n\nans = solution()"
    ],
    "a43767a35548410b91388a97d31bf269": [
        "from itertools import permutations\n\ndef solution():\n    digits = '0123456789'\n    # Since A=3, C=1, G=7 and the ten-digit number must end with a 0 due to divisibility by 10\n    # we remove these digits and permute the rest\n    remaining_digits = '0245689'\n\n    for perm in permutations(remaining_digits):\n        A, C, G, J = '3', '1', '7', '0'  # A, C, G are given and J must be 0 (divisible by 10)\n        # Build the permutation based on known values and perm index positions\n        B, D, E, F, H, I = perm[0], perm[1], perm[2], perm[3], perm[4], perm[5]\n        \n        # Form the numbers ABCDEFGHIJ\n        number = A+B+C+D+E+F+G+H+I+J\n\n        # Checking divisibility for each condition\n        if int(number[0]) % 1 == 0 \\\n                and int(number[:2]) % 2 == 0 \\\n                and int(number[:3]) % 3 == 0 \\\n                and int(number[:4]) % 4 == 0 \\\n                and int(number[:5]) % 5 == 0 \\\n                and int(number[:6]) % 6 == 0 \\\n                and int(number[:7]) % 7 == 0 \\\n                and int(number[:8]) % 8 == 0 \\\n                and int(number[:9]) % 9 == 0 \\\n                and int(number[:10]) % 10 == 0:\n            # Fulfilling all divisibility conditions\n            return {'A': A, 'B': B, 'C': C, 'D': D, 'E': E, 'F': F, 'G': G, 'H': H, 'I': I, 'J': J}\n\nans = solution()"
    ],
    "ecaddfdc1ad84d24a6e9ae0e8904ebc2": [
        "def solution():\n    # Applying Pigeonhole Principle\n    \n    # Assuming the worst case scenario, we pick one of each color to start (3 picks),\n    # since we want to be sure to pick 2 of the same color, we must pick one more,\n    # which ensures we have two of at least one of the colors.\n\n    # 3 initial picks + 1 additional pick for the worst case guarantee\n    picks = 3 + 1\n\n    return picks\n\nans = solution()"
    ],
    "24f3b610c11745edb5ef8e3bb5e6b77b": [
        "def solution():\n    # Worst case scenario to not get 4 balls of the same color:\n    # She takes all 4 orange balls + 3 (not 4 to avoid having 4 of the same color) of the blue balls\n    # and 1 (not 2 to avoid having 2 of the yellow) yellow ball. \n    # After that, the very next ball she takes out has to be the 4th of either blue or yellow.\n    # So, we sum up the balls taken before getting 4 of one color:\n    balls_needed = 4 + 3 + 1 + 1\n    return balls_needed\n\nans = solution()"
    ],
    "94bb6ae56dbd4a98a0fbeaa59c7d8691": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let a be the number of students in class A and b be the number of students in class B.\n    # Let c be the total number of candies Miss Jenny has.\n    a, b, c = symbols('a b c')\n\n    # If each student in class A gets 4 candies, 20 more candies are needed.\n    # The equation for class A: 4a = c + 20\n    equation1 = Eq(4 * a, c + 20)\n\n    # If each student in class B can get 6 candies, there will be 16 candies left.\n    # The equation for class B: 6b = c - 16\n    equation2 = Eq(6 * b, c - 16)\n\n    # The number of students in class A is twice of class B: a = 2b\n    equation3 = Eq(a, 2 * b)\n\n    # Solve the system of equations for candies c\n    solutions = solve((equation1, equation2, equation3), (a, b, c))\n\n    # Return the total number of candies\n    return solutions[c]\n\nans = solution()"
    ],
    "dd8d8a23d4864feb861a8645d06813fa": [
        "import math\n\ndef solution():\n    num_teams = 5\n    num_matches = math.comb(num_teams, 2)\n\n    return num_matches\n\nans = solution()"
    ],
    "9bfff3c25a624f939fbe758d02cada7b": [
        "def solution():\n    # Count the number of ways Jeremy can pay for the file using his coins\n    count = 0\n\n    # Possible ways to pay using ten-pence coins (from 0 to 5, as there are 5 coins available)\n    for ten_pence in range(6):\n        # Possible ways to pay using twenty-pence coins (from 0 to 3, as there are 3 coins available)\n        for twenty_pence in range(4):\n            # Possible ways to pay using the single fifty-pence coin (0 or 1)\n            for fifty_pence in range(2):\n                # Calculate the total value of the chosen coins\n                total_pence = ten_pence * 10 + twenty_pence * 20 + fifty_pence * 50\n\n                # If the total is exactly 70 pence, a valid solution is found\n                if total_pence == 70:\n                    count += 1\n\n    return count\n\nans = solution()"
    ],
    "9435fd70b9e341539b05792950bee0ca": [
        "def solution():\n    # Ducklings have 2 legs each, baby geese have 2 legs each, lambs have 4 legs each.\n    # The total number of legs from ducklings and baby geese:\n    total_legs_ducklings = 4 * 2  # 4 ducklings with 2 legs each\n    total_legs_baby_geese = 2 * 2  # 2 baby geese with 2 legs each\n    # The remaining number of legs must belong to the lambs\n    remaining_legs_for_lambs = 36 - (total_legs_ducklings + total_legs_baby_geese)\n    # Each lamb has 4 legs, so divide the remaining legs by 4 to find the number of lambs\n    number_of_lambs = remaining_legs_for_lambs // 4\n    \n    return number_of_lambs\n\nans = solution()"
    ],
    "7f4c057f9edc486381868b2cb62f8eb3": [
        "def solution():\n    digits = ['3', '1', '9', '2']\n    max_num = int(''.join(sorted(digits, reverse=True)))\n    min_num = int(''.join(sorted(digits)))\n    return max_num - min_num\n\nans = solution()"
    ],
    "0dbb0cc68b7945019907f84cebf4487e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    total_sweets = 570\n\n    equation1 = Eq(boys, 3 * girls)\n    equation2 = Eq(2 * boys + 4 * girls, total_sweets)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "5395374ab911412c892a95bcb1538a6c": [
        "def solution():\n    # Layer 1 (top layer) has 1 box\n    # Layer 2 has 1+2=3 boxes\n    # Layer 3 has 1+2+3=6 boxes\n    # Total number of boxes is the sum of these layers: 1 + 3 + 6\n    ans = 1 + 3 + 6\n    return ans\n\nans = solution()"
    ],
    "9882354a7f8745e7818f5641ce7c7354": [
        "def solution():\n    return 8.7 * 3.4\n\nans = solution()"
    ],
    "6c31ab9c5c724ce1b5dd8e18d56c817d": [
        "def solution():\n    total_cost = 2.35 + 0.78 + 0.65\n    change = 5 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "a53c706f0348463594c82aefd860177b": [
        "def solution():\n    term1 = 1.2 + 1.23 + 1\n    term2 = term1 - 1.2 - 1.23\n    \n    ans = term1 * term2\n    return ans\n\nans = solution()"
    ],
    "ffae2b155c6e4e12a0dd3224c209353d": [
        "def solution():\n    count = 0\n    for number in range(100, 201):\n        if str(number) == str(number)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "dfc1f111c9384999a8ce3a20bc2cffc5": [
        "def solution():\n    good_copies_needed_A = 600 * (3/5)\n    good_copies_needed_B = 600 * (2/5)\n\n    total_copies_A = good_copies_needed_A * (5/4)\n    total_copies_B = good_copies_needed_B * (6/5)\n\n    ans = total_copies_A + total_copies_B\n    return int(ans)\n\nans = solution()"
    ],
    "765a3cf2104c412c90dfa3e660a67e11": [
        "def solution():\n    side_length = int(40**0.5)\n    return side_length\n\nans = solution()"
    ],
    "b7345c517ee645059ca6864ac5589ef4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let s represent the time the son takes to harvest the crops alone\n    s = symbols('s')\n\n    # Equation based on work done: (1/farmer's work time) + (1/son's work time) = 1/total work time together\n    equation = Eq((16 / 24) + (16 / s), 1)\n\n    # Solve the equation for s\n    son_time = solve(equation, s)[0]\n\n    return son_time\n\nans = solution()"
    ],
    "53c10c1a3da34ac99c165981e9123c15": [
        "def solution():\n    smiles_per_day = 47\n    days_in_january = 31\n    total_smiles_in_january = smiles_per_day * days_in_january\n    return total_smiles_in_january\n\nans = solution()"
    ],
    "8ce469dd3f78455bbe361dfbac65ec35": [
        "def solution():\n    initial_height = 10  # initial drop height in meters\n    bounce_height = initial_height / 2  # height after first bounce in meters\n    total_distance = initial_height + 2 * bounce_height  # total distance traveled\n    return total_distance\n\nans = solution()"
    ],
    "0fca214bb995431dbbfd8125bbcbb3a8": [
        "def solution():\n    # Amount of sugar in Annie's solution\n    sugar_annie = 300 * 0.15\n    \n    # Amount of sugar in Becky's solution\n    sugar_becky = 400 * 0.25\n    \n    # Amount of sugar in Carol's solution\n    sugar_carol = 300 * 0.35\n    \n    # Total amount of sugar\n    total_sugar = sugar_annie + sugar_becky + sugar_carol\n    \n    # Total mass of the solution\n    total_mass = 300 + 400 + 300\n    \n    # Concentration of the resulting sugar solution\n    concentration = (total_sugar / total_mass) * 100\n    \n    return concentration\n\nans = solution()"
    ],
    "5d35989e2b284f488fb943b1ec405028": [
        "def solution():\n    total_rolls = 30\n    probability_of_5 = 1 / 6\n    expected_times = total_rolls * probability_of_5\n    return expected_times\n\nans = solution()"
    ],
    "2b60051b00824874b4fa3beaf2110c81": [
        "def solution():\n    for num in range(999, 99, -1):\n        if num % 36 == 0:\n            return num\n\nans = solution()"
    ],
    "61c631f4351c4f37b2e5a67ac813bbb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dorothy, timmy, kevin = symbols('dorothy timmy kevin')\n    \n    equation1 = Eq(dorothy, 9 * timmy - 3)\n    equation2 = Eq(kevin, timmy + 45)\n    equation3 = Eq(dorothy, 96)\n\n    solutions = solve((equation1, equation2, equation3), (dorothy, timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "98777c411fcc4cb6af9079ff424408ba": [
        "def solution():\n    ans = 10 - 1 + 1\n    return ans\n\nans = solution()"
    ],
    "3a2ed089aaaf41639e7c8cf3a2c8a734": [
        "from itertools import permutations\n\ndef solution():\n    children = ['Hugh', 'Louise', 'Richard', 'Child3', 'Child4']\n    count = 0\n    for perm in permutations(children):\n        h_index = perm.index('Hugh')\n        l_index = perm.index('Louise')\n        r_index = perm.index('Richard')\n        if not (l_index < h_index < r_index) and not (r_index < h_index < l_index):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "87ae32b6102741f1b5918d4117319755": [
        "def solution():\n    sum = 0\n    for i in range(1, 21):\n        if i % 2 == 1:\n            sum += (2 * i)\n        else:\n            sum -= (2 * i)\n    return sum\n\nans = solution()"
    ],
    "b7a661c038da48b0a38328c3af3f8724": [
        "def solution():\n    sophie_tshirts = 13\n    sister_tshirts = sophie_tshirts - 5\n    return sister_tshirts\n\nans = solution()"
    ],
    "c76c8db1463743adbd53ed8b96efcbd5": [
        "def solution():\n    total_cost_chocolate = 4 * 75\n    total_cost_pens = 3 * 95\n    total_cost = total_cost_chocolate + total_cost_pens\n    \n    # Convert pence to pounds (£10 note is 1000p)\n    change = 1000 - total_cost\n    \n    return change\n\nans = solution()"
    ],
    "ce53d4f8e44943daa525defbe2c3fe07": [
        "def solution():\n    # Lost 10 matches\n    losses = 10\n\n    # Considering the total matches to be 1, won matches = 2/5 of total matches\n    total_matches = losses * (1 / (1 - (2/5 + 7/20)))\n\n    # Won matches\n    won_matches = (2/5) * total_matches\n\n    # Drawn matches\n    drawn_matches = (7/20) * total_matches\n\n    # Points calculation\n    points_won = 3 * won_matches\n    points_drawn = 1 * drawn_matches\n\n    # Total points is the sum of points from won and drawn matches\n    total_points = points_won + points_drawn\n\n    return int(total_points)\n\nans = solution()"
    ],
    "5cbbe117fdc24fd7b9a7955d77adea5e": [
        "def solution():\n    # Johnny's initial computation is not correct.\n    # For a division with remainder of the form: dividend ÷ divisor = quotient R remainder\n    # The relationship between dividend, divisor, quotient, and remainder is:\n    # dividend = divisor * quotient + remainder\n    # Let's compute the correct dividend using the given divisor, quotient, and remainder.\n    \n    divisor = 4\n    quotient = 9\n    remainder = 2\n    \n    # Correct calculation of dividend\n    dividend = divisor * quotient + remainder\n    \n    return dividend\n\nans = solution()"
    ],
    "cf531f6537954b0c9eb9ebd7c0cea500": [
        "def solution():\n    max_number = 100\n    step = 2\n    count = max_number // step\n    return count\n\nans = solution()"
    ],
    "162b4dfb6c85480ab3fa57a6c7291de2": [
        "def solution():\n    initial_price = 4200\n    first_discount = 0.10\n    second_discount = 0.20\n\n    after_first_discount = initial_price * (1 - first_discount)\n    final_price = after_first_discount * (1 - second_discount)\n\n    return final_price\n\nans = solution()"
    ],
    "0eb584e3f8a14f75a374964af3070d71": [
        "def solution():\n    total_sum_of_8_numbers = 8 * 555\n    mean_first_3 = (total_sum_of_8_numbers / 8) - 296\n    sum_first_3 = 3 * mean_first_3\n    sum_last_5 = total_sum_of_8_numbers - sum_first_3\n    mean_last_5 = sum_last_5 / 5\n\n    return mean_last_5\n\nans = solution()"
    ],
    "fbdb47198fdf4306a9847b12bf333226": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    vicky, timmy, kevin = symbols('vicky timmy kevin')\n\n    equation1 = Eq(vicky, 6 * timmy - 3)\n    equation2 = Eq(vicky, 99)\n    equation3 = Eq(kevin, timmy + 32)\n\n    solutions = solve((equation1, equation2, equation3), (vicky, timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "70f5ff9ddd8c4370b2cfb94de5a970ab": [
        "def solution():\n    footballs_per_basket = 5\n    total_baskets = 7\n    total_footballs = footballs_per_basket * total_baskets\n    return total_footballs\n\nans = solution()"
    ],
    "7f70404ac5f74504a1cfebab700ec8a5": [
        "def solution():\n    days_needed_by_5_people = 15\n    days_needed_with_x_people = 5\n\n    # Calculate work rate of 5 people\n    work_rate_5_people = 1 / days_needed_by_5_people\n\n    # Work rate needed to finish the bridge in 5 days\n    work_rate_needed = 1 / days_needed_with_x_people\n\n    # Calculate how many times more people are needed based on the work rates\n    times_more_people = work_rate_needed / work_rate_5_people\n\n    # Number of people needed for the work rate needed\n    people_needed = 5 * times_more_people\n\n    # Number of extra people needed\n    extra_people_needed = people_needed - 5\n\n    return int(extra_people_needed)\n\nans = solution()"
    ],
    "b88c740d29b747828949ce062283a33f": [
        "def solution():\n    total_children = 20\n    pip_position_from_front = 3\n    children_between_pip_bud = 5\n\n    bud_position_from_front = pip_position_from_front + children_between_pip_bud + 1\n    bud_position_from_end = total_children - bud_position_from_front + 1\n\n    return bud_position_from_end\n\nans = solution()"
    ],
    "21b6e23a4408430bbf4acc393c601243": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 4), (3, 5), (6, 9)]\n    grandma_age, _ = solve_congruence(*congruences)\n\n    return grandma_age\n\nans = solution()"
    ],
    "df16de37f8d64768a0f4c9b79d33d31e": [
        "def solution():\n    pounds = 154\n    pounds_per_kilogram = 2.2\n    kilograms = pounds / pounds_per_kilogram\n    return round(kilograms, 2)\n\nans = solution()"
    ],
    "ecbf3f006c6147d3aaf09f392d5a387e": [
        "def solution():\n    def custom_op(a, b):\n        total = sum(range(a, b)) - b\n        return total\n\n    return custom_op(5, 10) - custom_op(4, 9)\n\nans = solution()"
    ],
    "cd9d85bed1d74e6cb214e001f0a094e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r be the initial amount of money Rasidah had\n    # Let c be the initial amount of money Chai Seng had\n    r, c = symbols('r c')\n\n    # Chai Seng had $48 more than Rasidah\n    equation1 = Eq(c, r + 48)\n    # Rasidah spent 3/5 of her money, giving the expression for money left with Rasidah\n    # Chai Seng spent 6/7 of his money, giving the expression for money left with Chai Seng\n    # Chai Seng had half as much money left as Rasidah\n    equation2 = Eq(c - (6/7)*c, (1/2)*(r - (3/5)*r))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (r, c))\n\n    return solutions[r]\n\nans = solution()"
    ],
    "35167ef06b9844828843e2c87be8c949": [
        "def solution():\n    ans = 35 + 18 + 26 + 22 - 16 + 25\n    return ans\n\nans = solution()"
    ],
    "1754095281684c188e6216f11d4caff3": [
        "def solution():\n    from itertools import permutations\n\n    digits = '123'\n    perm = permutations(digits, 3)\n    count = len(list(perm))\n\n    return count\n\nans = solution()"
    ],
    "312d3c547d294d18b1e263e554e02de1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    years_ago = symbols('years_ago')\n\n    # Isaac's current age\n    isaac_age_now = 53\n    # Mother's current age\n    mother_age_now = 81\n\n    # Equation representing the problem\n    # (Isaac's age - years ago) = 1/3 * (Mother's age - years ago)\n    equation = Eq(isaac_age_now - years_ago, 1/3 * (mother_age_now - years_ago))\n\n    # Solve the equation\n    years_ago_solution = solve(equation, years_ago)\n\n    # Return the solution which is the number of years ago\n    return years_ago_solution[0]\n\nans = solution()"
    ],
    "83dbbf7b91904b22b7e2f875718cafe1": [
        "def solution():\n    from sympy import isprime\n\n    prime_count = 0\n    for num in range(1, 21):\n        if isprime(num) and isprime(num + 6) and isprime(num - 6):\n            prime_count += 1\n\n    return prime_count\n\nans = solution()"
    ],
    "791c504e967a47a3a7621807a53b47c8": [
        "def solution():\n    elena_speed = 8    # Elena's speed in m/s\n    cat_speed = 3      # Cat's speed in m/s\n    distance = 500     # Initial distance between Elena and her cat in meters\n\n    # Calculate the relative speed of Elena with respect to her cat\n    relative_speed = elena_speed - cat_speed\n\n    # Calculate the time it takes Elena to catch up with her cat\n    time_to_catch_up = distance / relative_speed\n\n    return time_to_catch_up\n\nans = solution()"
    ],
    "6a3017d012a04a6c9f0ed680b9bf9a09": [
        "def solution():\n    sequence = [8, 20, 31, 41, 50]\n    differences = [sequence[i] - sequence[i-1] for i in range(1, len(sequence))]\n    next_diff = differences[-1] - 1\n    next_number = sequence[-1] + next_diff\n    return next_number\n\nans = solution()"
    ],
    "3c78e8e403284c9486c1fe552fdb5004": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(58 - (6*x + 2), 20)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b3a3839d65e84a9eb609756270102de4": [
        "def solution():\n    for tens_digit in range(1, 10):\n        for ones_digit in range(10):\n            if tens_digit + ones_digit == 15:\n                return tens_digit * 10 + ones_digit\n\nans = solution()"
    ],
    "71a76491c3df48ae9b18543d4e5cc354": [
        "def solution():\n    total_weight_before = 8 * 50\n    total_weight_after = 9 * 52\n    weight_of_extra_apple = total_weight_after - total_weight_before\n    \n    return weight_of_extra_apple\n\nans = solution()"
    ],
    "9f5fc79092f442618d0ed912989d3195": [
        "def solution():\n    from math import factorial as fact\n    \n    # The first four places can have any of the 4 remaining numbers\n    # after choosing an even number for the last place (to ensure the number is even)\n    even_digits = [2, 4]\n    last_place_variants = len(even_digits)\n    \n    # For an even number, the last digit has to be either 2 or 4\n    first_four_places_variants = fact(4) # 4! since no repetition is allowed\n    \n    # Total arrangements are the product of the variants for the first four places \n    # and the variants for the last place\n    total_ways = first_four_places_variants * last_place_variants\n\n    return total_ways\n\nans = solution()"
    ],
    "dd2fcc192d2f4c3dbf232e72bcb19fa6": [
        "def solution():\n    x = -4**2\n    return x\n\nans = solution()"
    ],
    "287a2d46ffa247fc9ad946e5c0911c54": [
        "def solution():\n    return sum(range(96, 100))\n\nans = solution()"
    ],
    "0ba3b59c0bfb4c87ae2d34a874d2d690": [
        "def solution():\n    # Only perfect squares have an odd number of factors\n    # and will end up being 'on' after all individuals have entered the room\n    # For example, light number 4 will be toggled by person 1, 2, and 4.\n\n    # Count the number of perfect squares up to 250\n    ans = len([i for i in range(1, 251) if (i**0.5).is_integer()])\n    \n    return ans\n\nans = solution()"
    ],
    "2bb2908692c1496e83c9da8633b98269": [
        "def solution():\n    first_term = 6\n    difference = 4\n    n = 30\n\n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "966d6206a5444394a2096b3a802b79a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pages = symbols('pages')\n\n    original_rate = 50  # pages per minute\n    increased_rate = 70  # pages per minute after speed up\n\n    original_time = pages / original_rate\n    decreased_time = pages / increased_rate\n\n    time_difference = original_time - decreased_time\n\n    # time is 2 minutes less after speed up\n    equation = Eq(time_difference, 2)\n\n    num_pages = solve(equation, pages)\n\n    return num_pages[0]\n\nans = solution()"
    ],
    "f4b2a4d95a2f4145b73f56fb9ae21969": [
        "def solution():\n    first_term = 1\n    last_term = 199\n    difference = 2\n    num_terms = ((last_term - first_term)//difference) + 1\n    average = (first_term + last_term) / 2\n    return average\n\nans = solution()"
    ],
    "939f1ef2920640e18e6791035bfe7f8a": [
        "def solution():\n    return 5842 + 351\n\nans = solution()"
    ],
    "84e25013e5fb4deda35beda9f5782685": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n    equation1 = Eq(oranges, apples + 194)\n    equation2 = Eq(oranges, 6 * apples + 4)\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "446707881fde4e908bf63228a9dc7ee5": [
        "def solution():\n    for divisor in range(1, 1000):  # We assume divisor is less than 1000 for practical search space\n        dividend = divisor * 8 + 7  # Since the quotient is 8 with remainder 7, we can reverse calculate the dividend\n        if dividend % divisor == 7:  # Check for the least pair that satisfies the remainder condition\n            return (dividend, divisor)\n\nans = solution()"
    ],
    "9adda98665dc499994e24f43869d3eea": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Start date is January 28, 2013, which is a Monday\n    start_date = datetime(2013, 1, 28)\n\n    # A non-leap year has 365 days. As 365 % 7 = 1, the day of the week advances by one day every non-leap year.\n    # A leap year has 366 days. As 366 % 7 = 2, the day of the week advances by two days every leap year.\n\n    # We will add non-leap year days by one and leap years by two.\n    # This way, we can find the next date where January 28th falls on a Monday.\n    current_year = start_date.year\n    while True:\n        current_year += 1\n        # If current year is a leap year: Feb 29 days will be in the year, else not\n        is_leap_year = (current_year % 4 == 0 and current_year % 100 != 0) or (current_year % 400 == 0)\n        # Add 1 day for a common year, 2 days for a leap year to the weekday count\n        start_date += timedelta(days=366 if is_leap_year else 365)\n        # if the resulting weekday is Monday and January 28th,\n        # we have found the next occurrence\n        if start_date.weekday() == 0 and start_date.day == 28:\n            break\n\n    return start_date.year\n\nans = solution()"
    ],
    "f94d81e4add44bbdb22df230a08a082f": [
        "def solution():\n    original_amount = 20\n    saved_per_day = 1\n    days_saved = 7\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    money_left = original_amount + (saved_per_day * days_saved) - lent_to_brother - spent_on_snacks\n\n    return money_left\n\nans = solution()"
    ],
    "c2cbf1f7958e4d09ae575ec083bddec8": [
        "def solution():\n    for age in range(20, 36):\n        if age % 3 == 0 and (age + 1) % 5 == 0:\n            return age\n\nans = solution()"
    ],
    "c6742159f800490eb0db04916361e0a1": [
        "def solution():\n    total_meters = 900\n    companies = 4\n    days = 5\n\n    meters_per_company_per_day = (total_meters / companies) / days\n\n    return meters_per_company_per_day\n\nans = solution()"
    ],
    "8488dbe7c4e548e79cc11b66f832cb46": [
        "def solution():\n    # Star jogs for 1 hour at a speed of 6 miles per hour\n    jogging_distance = 6 * 1\n\n    # Then, Star walks for 2 hours at a speed of 5 miles per hour\n    walking_distance = 5 * 2\n\n    # Total distance is the sum of jogging and walking distances\n    total_distance = jogging_distance + walking_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "196a119f90d9439aaddd24ed22d849f3": [
        "def solution():\n    normal_cost = 400\n    discount = 0.1\n    members = 30\n\n    discounted_cost = normal_cost * (1 - discount)\n    cost_per_member = discounted_cost / members\n\n    return cost_per_member\n\nans = solution()"
    ],
    "b2659c11d02e40ed86b49d179fd937b1": [
        "def solution():\n    def custom_operation(a, b):\n        return a + b - (a % b)\n\n    ans = custom_operation(9, 20)\n    return ans\n\nans = solution()"
    ],
    "4e262975314040ab820a9ec130db1cb3": [
        "def solution():\n    base_rate = 80  # cost in cents for the first 15 minutes\n    additional_rate = 5  # cost in cents for each additional minute\n    total_cost = 140  # total cost in cents\n\n    # Calculate the cost of the additional minutes\n    additional_cost = total_cost - base_rate\n\n    # Calculate the number of additional minutes\n    additional_minutes = additional_cost / additional_rate\n\n    # Calculate the total minutes\n    total_minutes = 15 + additional_minutes\n\n    return int(total_minutes)\n\nans = solution()"
    ],
    "f53f2f8694b148fdbea2cbce2274ad5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(4 * x - 13, 55)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "e50577a37b7c4a59a13a3b048ce98118": [
        "def solution():\n    boys = 255\n    girls = 234\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "ffcf1702672046df8e86e7270234c92d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(((x - 4) / 2) + 11, 37)\n    \n    original_number = solve(equation, x)\n    \n    return original_number[0]\n\nans = solution()"
    ],
    "9cbab768b996487fafdce66ceab5b47e": [
        "def solution():\n    # The last digit of a number raised to any power only depends on the last digit\n    # of the base and the last digit of the power. Since we have a power of 2017 which is odd,\n    # we are only interested in the last digit of 2^2017 and 3^2017.\n    # The pattern for last digits of powers of 2 repeats every 4: 2, 4, 8, 6, 2, ...\n    # The pattern for last digits of powers of 3 repeats every 4: 3, 9, 7, 1, 3, ...\n    # We take the last digit directly before the cycle starts again.\n    last_digit_of_2 = 8\n    last_digit_of_3 = 7\n\n    # The last digit of the final expression is the product of the last digits of\n    # 2^2017 and 3^2017, mod 10.\n    last_digit = (last_digit_of_2 * last_digit_of_3) % 10\n    \n    return last_digit\n\nans = solution()"
    ],
    "2c68e4214ff54f85956ee7cc54457f0e": [
        "def solution():\n    first_multiple = (56 // 5) + 1 if 56 % 5 != 0 else 56 // 5\n    last_multiple = 120 // 5\n    count_multiples = last_multiple - first_multiple + 1\n    return count_multiples\n\nans = solution()"
    ],
    "03cf341346924ba7a563f01f54c2a13f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10 - 2*x + 7*x, 35)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "77ab09536f3247d9bbce6ad4688ccf88": [
        "def solution():\n    # Calculate Gina's birth year\n    gina_birth_year = 2005 - 50\n\n    # Calculate the year when Gina was 35\n    year_when_gina_35 = gina_birth_year + 35\n\n    # Calculate James's birth year\n    james_birth_year = 1997 - 20\n\n    # Calculate how old was James when Gina was 35\n    james_age_when_gina_35 = year_when_gina_35 - james_birth_year\n\n    return james_age_when_gina_35\n\nans = solution()"
    ],
    "701a44d04fe2471b8b3b4a02034c3aed": [
        "def solution():\n    ans = 10034\n    return ans\n\nans = solution()"
    ],
    "ae56d2e7b43c4bd68b65a028a92a6651": [
        "def solution():\n    total_amount = 2 + 1/2\n    num_quarters = total_amount / (1/4)\n    return int(num_quarters)\n\nans = solution()"
    ],
    "8aad358e912f47108a9715343902ea04": [
        "def solution():\n    lucy_position = 5\n    eddie_position_from_back = 9\n    people_between = 2\n\n    total_people = lucy_position + people_between + eddie_position_from_back\n\n    return total_people\n\nans = solution()"
    ],
    "59d86540e8a94f73833a04f93b4465f1": [
        "def solution():\n    for B in range(10):\n        num = int(f\"26{B}789\")\n        if num % 13 == 0:\n            return B\n\nans = solution()"
    ],
    "47825c0910a244f4bdcd974186bcaefe": [
        "def solution():\n    result = 35\n    inverse_subtract = result + 21\n    inverse_multiply = inverse_subtract / 7\n    original_number = inverse_multiply - 4\n    return original_number\n\nans = solution()"
    ],
    "f0cc63d487f641d6828e61eaf1fc53c8": [
        "def solution():\n    from sympy import isprime\n\n    # Start from the smallest prime number, which is 2.\n    # Check if the remainders are distinct prime numbers when divided by 3, 5, 7 and 8.\n    smallest_number = 2\n    while True:\n        prime_remainders = set()\n        for divisor in [3, 5, 7, 8]:\n            remainder = smallest_number % divisor\n            if isprime(remainder):\n                prime_remainders.add(remainder)\n            else:\n                break\n\n        # If we have four different prime remainders, we have found the smallest number.\n        if len(prime_remainders) == 4:\n            return smallest_number\n        else:\n            smallest_number += 1\n\nans = solution()"
    ],
    "fe803c1367d64b149801be4344758226": [
        "def solution():\n    total_length_cm = 11 * 100 + 74   # convert meters to centimeters\n    dress_length_cm = 5 * 100 + 8     # convert meters to centimeters\n    remaining_length_cm = total_length_cm - dress_length_cm\n    stripe_length_cm = remaining_length_cm / 9\n    stripe_length_m = stripe_length_cm // 100 # convert centimeters to meters\n    stripe_length_cm_left = stripe_length_cm % 100 # remaining centimeters\n    \n    return stripe_length_m * 100 + stripe_length_cm_left  # convert the length back to centimeters\n\nans = solution()"
    ],
    "a56cc128d0da4c10987a8d45533419d8": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n    # The smallest number of girls who are right-handed is when the maximum\n    # number of right-handed pupils are boys.\n    # This occurs when all non-right-handed pupils are girls.\n    non_right_handed = total_pupils - right_handed\n    min_right_handed_girls = girls - non_right_handed\n    \n    return min_right_handed_girls\n\nans = solution()"
    ],
    "4fbf262896eb43f0886f401236b6a692": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n    equation1 = Eq(A + B, 130)\n    equation2 = Eq(A, 5 * B + 4)\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "2a6b8ddd03b04d6ca675e0515ac48c3f": [
        "def solution():\n    ans = 20.23 * 39 + 202.3 * 4.1 + 4 * 101.15\n    return ans\n\nans = solution()"
    ],
    "58e3a2db56754c6f9d5e40fe1b58ffe7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    orchids, tulips, roses = symbols('orchids tulips roses')\n    \n    # Total flowers initially\n    equation1 = Eq(orchids + tulips + roses, 3616)\n    \n    # Ratio of orchids to tulips is 3:5\n    equation2 = Eq(5 * orchids, 3 * tulips)\n    \n    # Flowers left after selling some\n    equation3 = Eq((1 - 0.4) * orchids + (1 - 1/5) * tulips + (1 - 0.25) * roses, 2644)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (orchids, tulips, roses))\n    \n    return solutions[orchids]\n\nans = solution()"
    ],
    "488360b26f1144849d4bb784a270ca57": [
        "def solution():\n    for chickens in range(11):\n        rabbits = 10 - chickens\n        if (chickens * 2) + (rabbits * 4) == 34:\n            return chickens\n\nans = solution()"
    ],
    "bdc6e2ddbb4c4c19b2b90c3c89e0ae05": [
        "def solution():\n    ans = 0.012 + 2.03 + 0.1456\n    return ans\n\nans = solution()"
    ],
    "76f0b59b2fe34356a29cea5b4f171d3b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    books, files = symbols('books files')\n    total_cost = Eq(12 * books + 9 * files, 336)  # Total cost of books and files\n    book_file_relation = Eq(books, files + 14)  # She bought 14 more books than files\n\n    solutions = solve((total_cost, book_file_relation), (books, files))\n\n    return solutions[books]\n\nans = solution()"
    ],
    "8a42b93556ef4bcebb38b2ba338a9e1d": [
        "def solution():\n    ans = 60.2 / 7\n    return ans\n\nans = solution()"
    ],
    "49714794b0f94aada1cf3dfbf03a6990": [
        "def solution():\n    def last_digit_of_power(base, exponent):\n        last_digit = base % 10\n        return pow(last_digit, exponent, 10)\n\n    total_last_digit = sum(last_digit_of_power(i, 2013) for i in range(1, 10))\n    return total_last_digit % 10\n\nans = solution()"
    ],
    "a7d1fbe2679e40b58d6660db0ed3287b": [
        "def solution():\n    for age in range(30, 121):\n        if age % 6 == 2 and age % 7 == 5:\n            return age\n\nans = solution()"
    ],
    "4073b71163494881a2c9c5629d8b16a5": [
        "def solution():\n    # Worst case scenario:\n    # Peter takes one of each color first, without getting a matching pair.\n    num_socks_to_take = 1 + 1 + 1\n    \n    # Add one more to guarantee a matching pair (the pigeonhole principle).\n    num_socks_to_take += 1\n    \n    return num_socks_to_take\n\nans = solution()"
    ],
    "c2819474faa94700a66e972f6de65651": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    square, triangle, diamond = symbols('square triangle diamond')\n\n    equation1 = Eq(square + triangle, 10)\n    equation2 = Eq(triangle + diamond, 16)\n    equation3 = Eq(square + triangle + diamond, 22)\n\n    solutions = solve((equation1, equation2, equation3), (square, triangle, diamond))\n\n    diamond_plus_square = solutions[square] + solutions[diamond]\n\n    return diamond_plus_square\n\nans = solution()"
    ],
    "29659ea8c8ba40fcbfd094b963998970": [
        "def solution():\n    total_digits = 0\n    for i in range(1, 132):  # The range goes from 1 to 131 inclusive.\n        total_digits += len(str(i))\n\n    return total_digits\n\nans = solution()"
    ],
    "6a58abe1371844c497a2ad82064a0ebd": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    # Given departure and arrival times in local time zones\n    departure_time_japan = datetime.strptime('2 July, 20:00', '%d %B, %H:%M')\n    arrival_time_france = datetime.strptime('3 July, 01:00', '%d %B, %H:%M')\n\n    # Adjust France time to Japan time by adding the time difference\n    arrival_time_japan = arrival_time_france + timedelta(hours=7)\n\n    # Calculate the flight duration\n    flight_duration = arrival_time_japan - departure_time_japan\n\n    return flight_duration.seconds // 3600  # Convert from seconds to hours\n\nans = solution()"
    ],
    "6fc358af07bb4fb290d8b7b95d0d4815": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    necklace, earring = symbols('necklace earring')\n\n    equation1 = Eq(9 * necklace + 5 * earring, 1440)\n    equation2 = Eq(2 * necklace + 3 * earring, 439)\n\n    solutions = solve((equation1, equation2), (necklace, earring))\n\n    return solutions[necklace] + solutions[earring]\n\nans = solution()"
    ],
    "b89eb8f48467425ca5d1e6474cae3be8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    eugene, sid = symbols('eugene sid')\n    equation1 = Eq(eugene, 5 * sid)\n    equation2 = Eq(eugene - 71 + sid - 16, 51)\n\n    solutions = solve((equation1, equation2), (eugene, sid))\n\n    return solutions[eugene]\n\nans = solution()"
    ],
    "adae7d5f0cb94d7e81c361caadeeff21": [
        "def solution():\n    total_questions = 50\n    skipped_questions = 3\n    answered_questions = total_questions - skipped_questions\n    score = 168\n\n    # Assume Amna answered all questions correctly\n    max_score = 4 * answered_questions\n\n    # The difference between the actual score and the maximum score\n    score_difference = max_score - score\n\n    # Since she loses 5 marks for each incorrect answer instead of gaining 4 (4 for correct - 1 for wrong),\n    # divide the difference by 5 to get the number of wrong answers\n    wrong_answers = score_difference / 5\n\n    # Subtract the number of wrong answers from the total number of answered questions\n    # to get the number of correct answers\n    correct_answers = answered_questions - wrong_answers\n\n    return int(correct_answers)\n\nans = solution()"
    ],
    "b658611043604a84904809a513eca7b0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 71)\n    equation2 = Eq(x - y, 9)\n    \n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "9638aa4f9615400687f09c8801020eb6": [
        "def solution():\n    return 391 * 7\n\nans = solution()"
    ],
    "d8d8fba2232a4e928731d18f9af5290b": [
        "def solution():\n    # The first digit can be either 1 or 2 (0 is not allowed for two-digit numbers), so there are 2 options.\n    first_digit_options = 2\n    \n    # The second digit can be 0, 1, or 2, so there are 3 options.\n    second_digit_options = 3\n    \n    # By the multiplication principle, the total number of combinations is the product of the options for each digit.\n    total_combinations = first_digit_options * second_digit_options\n    \n    return total_combinations\n\nans = solution()"
    ],
    "a137655c79064ec7a5bd8abbf2cc059d": [
        "def solution():\n    result = 0\n    numerator = 100\n    denominator = 97\n    for i in range(4):\n        result += numerator / denominator\n        numerator *= (99 - i)\n        denominator *= (96 - i)\n    return result\n\nans = solution()"
    ],
    "b99e232169f64053801fd886d5ce3984": [
        "def solution():\n    # Let the smallest even number be x. The consecutive even numbers will be x, x+2, x+4, x+6, and x+8\n    # Their sum is given by x + (x+2) + (x+4) + (x+6) + (x+8) = 200\n    # 5x + 20 = 200\n    # 5x = 180\n    # x = 36\n    # Hence, the smallest even number is 36.\n    x = (200 - 20) // 5\n    return x\n\nans = solution()"
    ],
    "8dea568bfc0f47a88a18a150964ebdd8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the transfer volume as a symbol\n    x = symbols('x')\n\n    # Initial amount of sugar in each container\n    sugar_A = 50 * 0.1\n    sugar_B = 30 * 0.2\n\n    # Total water in each container after transfer\n    water_A = 50 - x\n    water_B = 30 - x\n\n    # Total sugar in each container after transfer\n    sugar_A_after = sugar_A - (0.1 * x) + (0.2 * x)\n    sugar_B_after = sugar_B - (0.2 * x) + (0.1 * x)\n\n    # Concentration after transfer\n    concentration_A = sugar_A_after / water_A\n    concentration_B = sugar_B_after / water_B\n\n    # Equation representing the equal concentration\n    equation = Eq(concentration_A, concentration_B)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    # Return the first solution which is positive and makes sense in context\n    return solution[0]\n\nans = solution()"
    ],
    "5e71c6a0c7254d3ab8b549338d61acff": [
        "def solution():\n    sections_for_5_cuts = 5\n    time_for_5_cuts = 8  # minutes\n    sections_for_6_cuts = 6\n\n    # Cutting each section takes the same time, find time per section\n    time_per_section = time_for_5_cuts / (sections_for_5_cuts - 1)\n\n    # Calculate time for 6 cuts (which creates 7 sections)\n    time_for_6_cuts = time_per_section * (sections_for_6_cuts - 1)\n\n    return time_for_6_cuts\n\nans = solution()"
    ],
    "f22bedb58be24a40a4d182dd0dbc7ffc": [
        "def solution():\n    total_votes = 120\n    mark_votes = 22\n    nicole_votes = 27\n    peter_votes = 35\n    \n    votes_remaining = total_votes - (mark_votes + nicole_votes + peter_votes)\n    \n    # Peter must have more votes than the total possible votes for the other two\n    # Remember that one more vote is needed to win over half of the total votes\n    peter_needed_votes = (total_votes // 2 + 1) - peter_votes\n    \n    if peter_needed_votes <= votes_remaining:\n        return peter_needed_votes\n    else:\n        return -1  # Indicating that it's not possible for Peter to win\n\nans = solution()"
    ],
    "3aa75c8b30a54c67a6563a2056fe6973": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(girls, boys - 7)\n    equation2 = Eq(boys + girls, 995)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "92a0e5f9500b4853819d540562be1a80": [
        "def solution():\n    return 87 * 23\n\nans = solution()"
    ],
    "2084c341f98040dbb7686adc74b457f7": [
        "def solution():\n    number_1 = 31\n    number_2 = 32\n    ans = max(number_1 % 10, number_2 % 10)\n    return ans\n\nans = solution()"
    ],
    "590bcb8900904fe88f3fadadb68feb11": [
        "def solution():\n    original_price = 540\n    reduction = 189\n    percentage_reduction = (reduction / original_price) * 100\n\n    return percentage_reduction\n\nans = solution()"
    ],
    "4517703a55ee4695b02b8505817748b1": [
        "def solution():\n    # Let's assume there are n coins of each denomination.\n    # Total value of 5p coins is 5n, 10p coins is 10n and 20p coins is 20n. \n    # The total value in pence is: 5n + 10n + 20n = 35n.\n    # We need to convert ￡4.90 to pence, which is 490 pence.\n    # So we have the equation: 35n = 490\n    # Solving for n gives us the number of coins of each type, and we can then multiply by 3 to get the total number of coins.\n\n    n = 490 // 35  # The number of coins of each type\n    total_coins = 3 * n  # Total number of coins\n\n    return total_coins\n\nans = solution()"
    ],
    "27fec67c0edf42efbd46038d592d002b": [
        "def solution():\n    initial_amount = 100\n    spent_on_book = initial_amount * 0.10\n    remaining_after_book = initial_amount - spent_on_book\n    spent_on_dvd = remaining_after_book * 0.20\n    remaining_after_dvd = remaining_after_book - spent_on_dvd\n    \n    return remaining_after_dvd\n\nans = solution()"
    ],
    "8f16804135244d3d952f4f7aa96aea99": [
        "def solution():\n    principal = 1000\n    rate = 0.06\n    time = 5\n\n    balance = principal * ((1 + rate) ** time)\n\n    return balance\n\nans = solution()"
    ],
    "892ff0f234ae4e3cb7a7bf750eb3a01d": [
        "def solution():\n    total_money = 28  # in dollars\n    cost_of_gift = 20  # in dollars\n\n    money_left_in_dollars = total_money - cost_of_gift\n    money_left_in_cents = money_left_in_dollars * 100  # convert dollars to cents\n\n    return money_left_in_cents\n\nans = solution()"
    ],
    "038a870a64fa4b908242c675e09c8860": [
        "def solution():\n    # Total number of sweets eaten over 9 days = 135\n    # Number of days = 9\n    # The difference (common difference in arithmetic sequence) = 3\n    # Let's assume the number of sweets eaten on the first day = x\n    # Total sweets = x + (x + 3) + (x + 6) + ... 9 terms\n    # Sum of an arithmetic sequence S_n = n/2 * (a_1 + a_n)\n    # 135 = 9/2 * (x + x + 3*(9 - 1))\n    # Solve for x to find the first term, then find the last term a_9 = x + 3*(9 - 1)\n\n    # n = 9 (number of terms)\n    n = 9\n    # total_sum = 135\n    total_sum = 135\n    # sum of an arithmetic series formula: S = n/2 (2a + (n - 1)d)\n    # 2a = 2x (twice the first term)\n    # d = 3 (difference between terms)\n    # using the above formula we can find 2x:\n    # 135 = 9/2 * (2x + 8*3)\n    # 2x = (135 * 2 / 9) - 8*3\n\n    two_x = (total_sum * 2 / n) - 8 * 3\n    first_term = two_x / 2\n    # now use the first term to find the last term\n    last_term = first_term + 3 * (n - 1)\n\n    return last_term\n\nans = solution()"
    ],
    "749213142ff9426e8ef90f3f3aa7daa5": [
        "def solution():\n    annual_salary = 24000\n    pay_rise_percent = 10\n    monthly_salary = annual_salary / 12\n    \n    pay_rise = (pay_rise_percent / 100) * annual_salary\n    new_annual_salary = annual_salary + pay_rise\n    new_monthly_salary = new_annual_salary / 12\n    \n    return new_monthly_salary\n\nans = solution()"
    ],
    "27c26de10eb14930ae9cdf02279d1e58": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10 - 3 * (x - 2), 4 * x - 5 * (4 - x))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3da2630a7c3042408936061a5d0172c6": [
        "def solution():\n    ans = 7842 - 998\n    return ans\n\nans = solution()"
    ],
    "fa6e880afc1b420b858420333e657e2c": [
        "def solution():\n    pages = 185\n\n    # 1-9 use 1 digit each, so 9 pages total\n    # 10-99 use 2 digits each, so 90 pages total (i.e., 10 to 99 inclusive)\n    \n    # first count digits for 1-9\n    total_digits = 9\n    \n    # then count digits for 10-99\n    total_digits += 2 * 90\n    \n    # finally count digits for 100-185\n    total_digits += 3 * (pages - 99)\n\n    return total_digits\n\nans = solution()"
    ],
    "a8fa71f1af7245808f0ae42a4ff273b0": [
        "def solution():\n    ans = 704 - 457\n    return ans\n\nans = solution()"
    ],
    "a12c2b2900394c9999c189d1a33af5a3": [
        "def solution():\n    ans = 123 - (23 + 56)\n    return ans\n\nans = solution()"
    ],
    "e6f07695c3c44ceda16250795d0df505": [
        "def solution():\n    for month in range(1, 13):  # As there are 12 months\n        for day in range(1, 32):  # Assuming all months have a maximum of 31 days\n            if (month * 31) + (day * 12) == 376:\n                return f\"{day:02d}{month:02d}\"\n\nans = solution()"
    ],
    "0581d122126f4a8aa0564b99c14fdde4": [
        "def solution():\n    missing_number = (4.08 * 20) - (1.08 * 20)\n    missing_number /= 20  # Since we want to find the number that when multiplied by 20 gives us the missing_number\n    return missing_number\n\nans = solution()"
    ],
    "7501b55360b14603a4f3cd0fec5e5c2e": [
        "def solution():\n    return 158 * 23\n\nans = solution()"
    ],
    "2596b3b0a45a4d33bab961b1ab804010": [
        "def solution():\n    total_number = 2022\n    count = 0\n    for i in range(1, total_number + 1):\n        if i % 7 != 0 and i % 17 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "39fc04a75d5b4b149928dc45f62d257c": [
        "def solution():\n    price_per_cooker = 350\n    number_of_cookers = 16\n    total_cost = price_per_cooker * number_of_cookers\n    return total_cost\n\nans = solution()"
    ],
    "50997193003b42a5b1b612a65004742c": [
        "def solution():\n    # Initialize the sum variable with the first value\n    sum_result = 119\n    # Initialize a sign for adding or subtracting\n    sign = -1\n\n    # Use a for loop to add the sequence of numbers\n    for i in range(117, 98, -2):  # Start from 117, end at 99, decrement by 2\n        sum_result += sign * i\n        sign *= -1  # Flip the sign\n\n    return sum_result\n\nans = solution()"
    ],
    "6aa8b0892ddb472f98ad315fc9309ec6": [
        "def solution():\n    flour_ratio = 40\n    milk_ratio = 80\n    tom_flour = 25\n\n    tom_milk = (milk_ratio * tom_flour) / flour_ratio\n    \n    return tom_milk\n\nans = solution()"
    ],
    "b0936b75d5ce4b94ae9381888ed227ad": [
        "def solution():\n    sweets_left = 38\n    sweets_taken = 5\n    total_sweets = sweets_left + sweets_taken\n    return total_sweets\n\nans = solution()"
    ],
    "18b18182a46e40b88627f1ccea5b3d8e": [
        "def solution():\n    calculator_original_price = 6  # in pounds\n    protractor_original_price = 0.3  # 30p in pounds\n\n    # Calculate the reduced prices\n    calculator_sale_price = calculator_original_price * (1 - 1/4)\n    protractor_sale_price = protractor_original_price * (1 - 1/2)\n\n    # Calculate the total cost\n    total_cost = (8 * calculator_sale_price) + (20 * protractor_sale_price)\n\n    return total_cost\n\nans = solution()"
    ],
    "3912f4432e58498cbda173e79f990a37": [
        "def solution():\n    numerator = 1\n    denominator = 2015**3 - 2014 * (2015**2 + 2016)\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "d32e56919f284c4db3acbe24232d6fd9": [
        "def solution():\n    tonnes = 1.194\n    two_thirds = 2 / 3\n    kilograms = tonnes * two_thirds * 1000  # 1 tonne is 1000 kilograms\n    return kilograms\n\nans = solution()"
    ],
    "cbb06928b2ac4d109928a77853509743": [
        "def solution():\n    # Let's denote the total amount of grass as G, and the grass-eating rate of one ox per week as r.\n    # Then for 27 oxen to finish eating the grass in 6 weeks, we have:\n    # 27 oxen * 6 weeks * r = G\n    # Similarly, for 23 oxen to finish eating the grass in 9 weeks, we have:\n    # 23 oxen * 9 weeks * r = G\n    \n    # Equating the two expressions, since they both equal G, we get:\n    # 27 * 6 * r = 23 * 9 * r\n    # r is not zero, so we can divide both sides by r to get:\n    # 27 * 6 = 23 * 9\n    \n    # Now let's denote w as the number of weeks it will take for 21 oxen to finish eating the grass.\n    # We know that:\n    # 21 oxen * w weeks * r = G\n    # But since G = 27 * 6 * r, we can substitute and get:\n    # 21 * w * r = 27 * 6 * r\n    # Dividing both sides by (21 * r), we get:\n    # w = (27 * 6) / 21\n    \n    # Now we calculate w\n    w = (27 * 6) / 21\n    \n    return w\n\nans = solution()"
    ],
    "060047cfbee741bb986e84b4387b64bc": [
        "def solution():\n    # Ellen spends 1 hour biking to the train station at a speed of 10 miles per hour.\n    biking_distance = 10 * 1\n    \n    # Ellen spends 2 hours on the train at a speed of 50 miles per hour.\n    train_distance = 50 * 2\n    \n    # Total distance traveled every Saturday.\n    total_distance = biking_distance + train_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "a1e7310c3dd84d7a9231e38d0f9f7452": [
        "def solution():\n    # Let y be the number of years it will take for the younger elephant to reach \n    # the current age of the older elephant\n    # Let x be the current age of the older elephant\n    # After y years, the younger elephant will be x years old\n    # After y years, the older elephant will be x + y years old\n\n    # Create a variable for the younger elephant's current age\n    younger_age_now = 18\n\n    # The older elephant will be 62 years old when the younger elephant is the same age\n    # as the older elephant's current age. So we get:\n    # younger_age_now + y = x (1st equation)\n    # x + y = 62 (2nd equation)\n    \n    # Let's solve these two equations:\n    # From 1st equation, we get y = x - younger_age_now\n    # Substituting y into the 2nd equation:\n    # x + (x - younger_age_now) = 62\n    # 2 * x - younger_age_now = 62\n    # 2 * x = 62 + younger_age_now\n    # 2 * x = 62 + 18\n    # 2 * x = 80\n    # x = 80 / 2\n    # x = 40\n\n    # The age of the older elephant this year is x which is 40 years.\n    return 40\n\nans = solution()"
    ],
    "3747f6795b484a8d933bdeff1799037e": [
        "def solution():\n    ans = (0.02) ** 2\n    return ans\n\nans = solution()"
    ],
    "de37bee61aca42a6b5dabc0d16ba4df1": [
        "def solution():\n    ans = 1440 // 24\n    return ans\n\nans = solution()"
    ],
    "ff9e28ea21aa4addbaf6b47561b79b63": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue = symbols('blue')\n    red = blue + 25\n    green = red + 32\n\n    equation = Eq(blue + red + green, 112)\n\n    solutions = solve(equation, blue)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "356c71d6a146447aa7e01a575a71da98": [
        "def solution():\n    from math import comb\n\n    num_balls = 5\n    num_boxes = 3\n\n    # Using the stars and bars method to find the number of ways to distribute n identical objects into r boxes\n    # where boxes can be empty is given by the combination (n + r - 1, r - 1)\n    ans = comb(num_balls + num_boxes - 1, num_boxes - 1)\n\n    return ans\n\nans = solution()"
    ],
    "51579396b1d94a949192647f00104857": [
        "from math import factorial\n\ndef solution():\n    word = \"TEENAGE\"\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n\n    total_permutations = factorial(len(word))\n\n    for count in letter_counts.values():\n        total_permutations //= factorial(count)\n\n    return total_permutations\n\nans = solution()"
    ],
    "be8ef166256a4fb4a86c6d0fcd933a8b": [
        "def solution():\n    students_front_back = 3 + 2 - 1  # Since Lucas is 3rd from front and 2nd from back, there is one overlap (Lucas himself)\n    students_left_right = 4 + 3 - 1  # Similar reasoning for left to right\n\n    total_students = students_front_back * students_left_right  # Total students is the product of the two dimensions\n\n    return total_students\n\nans = solution()"
    ],
    "216fe3f443544e68a0aed48da56449e1": [
        "def solution():\n    sale_price = 60\n    discount = 0.25\n    original_price = sale_price / (1 - discount)\n    return original_price\n\nans = solution()"
    ],
    "2d46f0af47944add838f9674e67c820b": [
        "def solution():\n    num = 217\n    while sum(int(digit) for digit in str(num)) != 9:\n        num += 1\n    return num\n\nans = solution()"
    ],
    "d361ce8aec3d498eba6093a4def8859a": [
        "def solution():\n    ans = 284 + 69 - 271\n    return ans\n\nans = solution()"
    ],
    "b02ecddb14a14da0b461c2caa96532c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the amounts of money Ema and Keng Wee have\n    ema, keng_wee = symbols('ema keng_wee')\n    \n    # Set up the equations based on the problem statement\n    equation1 = Eq(ema, keng_wee - 360)  # Ema had $360 less than Keng Wee\n    equation2 = Eq(ema - ema/4, keng_wee - 4*keng_wee/7)  # They have the same amount after spending\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (ema, keng_wee))\n    \n    # Get the amount of money Keng Wee had at first\n    return solutions[keng_wee]\n\nans = solution()"
    ],
    "4527a361966a43bfb89e355298a7a037": [
        "def solution():\n    one_fourth_of_36 = 36 / 4\n    one_tenth_of_square = one_fourth_of_36 * 10\n\n    return one_tenth_of_square\n\nans = solution()"
    ],
    "d92a77c7952a48ab83c4fa481451ad5c": [
        "def solution():\n    ans = 6.4 * 2.7\n    return ans\n\nans = solution()"
    ],
    "cefb89968d41422986f6e937e4276320": [
        "def solution():\n    # Lucas is 3rd from front and 2nd from back in a column: total in column = 3 + 2 - 1\n    total_rows = 3 + 2 - 1\n\n    # Lucas is 4th from left and 3rd from right in a row: total in row = 4 + 3 - 1\n    total_columns = 4 + 3 - 1\n\n    # Total students = total in a row * total in a column\n    total_students = total_rows * total_columns\n    \n    return total_students\n\nans = solution()"
    ],
    "a1693ad113aa4c239ad89d235418724c": [
        "def solution():\n    numerator = 5\n    denominator = 1/4\n\n    ans = numerator / denominator\n\n    return ans\n\nans = solution()"
    ],
    "ef243e4e071b44f7aa95098500cc59c4": [
        "def solution():\n    return 37 + 38 + 40 + 43 + 42 + 41\n\nans = solution()"
    ],
    "a98a706222f448d38a755e2d7c5165fc": [
        "def solution():\n    return 418 * 7\n\nans = solution()"
    ],
    "584f43df1fd1456fb6a9ff29d820ce08": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let g be the initial number of girls, and b the initial number of boys.\n    g, b = symbols('g b')\n    \n    # Before 2 girls are transferred in, the number of girls was 9/11 of that of boys.\n    initial_eq = Eq(g, (9/11) * b)\n    \n    # After 2 girls are transferred in, the number of girls becomes 10/11 of that of boys.\n    # The number of girls is now g + 2.\n    final_eq = Eq(g + 2, (10/11) * b)\n    \n    # Solving the system of equations for g and b.\n    solutions = solve((initial_eq, final_eq), (g, b))\n    \n    # Total number of students after 2 girls are transferred in is g + 2 + b.\n    total_students = solutions[g] + 2 + solutions[b]\n    \n    return total_students\n\nans = solution()"
    ],
    "67b7658f12214846a53f685f44cedc06": [
        "def solution():\n    return 77.5 * 52 / 100 + 5.2 * 2.25\n\nans = solution()"
    ],
    "439b192b6f9344e0b4321e87c7abf0c6": [
        "def solution():\n    ans = 1  # Initial term outside of the pattern\n    for denom in range(2, 11):  # Denominator ranges from 2 to 10\n        series_sum = (1/denom) * (denom * (denom + 1) / 2)  # Sum of 1/n + 2/n + ... + n/n\n        ans += 2 * series_sum - denom/denom  # Multiply the sum by 2 and subtract the middle term (n/n)\n    return ans\n\nans = solution()"
    ],
    "302d0208f5dc4303b27c7d3b793b9b4a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    equation = Eq(2*(3*x - y), 2*x + 4)\n    sol = solve(equation, (x, y))\n    \n    x_val = sol[x]\n    y_val = sol[y]\n    \n    ans = 2 * x_val - y_val\n    \n    return ans\n\nans = solution()"
    ],
    "a4fcfa11aee9487fa89fc3ae9b909d04": [
        "def solution():\n    total_paid = 5 * 100  # Convert £5 to pence\n    cost_milk = 3 * 31    # 3 litres of milk at 31p per litre\n    cost_crisps = 2 * 17  # 2 packets of crisps at 17p each\n    cost_bread = 78       # 1 large loaf of bread at 78p\n    cost_magazine = 105   # 1 magazine costing £1.05 (convert to pence)\n    \n    total_cost = cost_milk + cost_crisps + cost_bread + cost_magazine\n    change = total_paid - total_cost\n    \n    return change / 100    # Convert change back to pounds\n\nans = solution()"
    ],
    "dc5e7ba6ef7e4f3aa7342a10e0e8ce72": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    trevor, siobhan = symbols('trevor siobhan')\n    \n    equation1 = Eq(trevor, 5 * siobhan)\n    equation2 = Eq(siobhan, trevor - 24)\n    \n    solutions = solve((equation1, equation2), (trevor, siobhan))\n    \n    return solutions[trevor]\n\nans = solution()"
    ],
    "a33234abdd534b3cb07a4fa3e75ec899": [
        "def solution():\n    # Let x be the number of tiles Mr Tan has. Then Mr Lim has 5 * x tiles.\n    # The total is their sum: x + 5 * x = 390\n    x = 390 // 6\n\n    # Mr Lim has 5 times as many tiles as Mr Tan\n    mr_lims_tiles = 5 * x\n    mr_tans_tiles = x\n\n    # The difference in the number of tiles they have\n    difference = mr_lims_tiles - mr_tans_tiles\n\n    return difference\n\nans = solution()"
    ],
    "67e8fb8a09154285b3afecd086511f32": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define Zehan's current age as a symbol\n    zehan = symbols('zehan')\n    \n    # Define the equation based on the problem statement\n    equation = Eq(zehan + 12, 3 * zehan)\n    \n    # Solve the equation for Zehan's current age\n    solution = solve(equation, zehan)\n    \n    # Return Zehan's current age\n    return solution[0]\n\nans = solution()"
    ],
    "a19e02dd5cf546089c95a5d1d0b6a300": [
        "def solution():\n    from math import comb as combination\n\n    # Choose exactly one of A, B, or C\n    ways_to_choose_one = 3\n\n    # Choose remaining 4 players from the remaining 12 (excluding A, B, C)\n    ways_to_choose_rest = combination(12, 4)\n\n    # Total ways\n    total_ways = ways_to_choose_one * ways_to_choose_rest\n\n    return total_ways\n\nans = solution()"
    ],
    "281573f15ba24a4186a9388a1bf098cb": [
        "def solution():\n    total_cost = 58.10\n    number_of_tickets = 7\n    cost_per_ticket = total_cost / number_of_tickets\n    return round(cost_per_ticket, 2)\n\nans = solution()"
    ],
    "6001dc976c8f4e57b213b0ec00f81c8d": [
        "def solution():\n    return 0.36 * 100\n\nans = solution()"
    ],
    "f316dc29ab1c42f6856c88cdf434b9d6": [
        "def solution():\n    ans = 536 - 11\n    return ans\n\nans = solution()"
    ],
    "30a3509e42044edda1c9958aff442893": [
        "def solution():\n    v = 3 * 6\n    return v\n\nans = solution()"
    ],
    "f8d4c7f0881341e782609d8014e213f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lemon_juice_initial, water = symbols('lemon_juice_initial water')\n\n    # Original ratio is 2:3\n    equation1 = Eq(lemon_juice_initial / water, 2/3)\n    \n    # After adding 80 ml of lemon juice, the new ratio is 6:5\n    equation2 = Eq((lemon_juice_initial + 80) / water, 6/5)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (lemon_juice_initial, water))\n\n    return solutions[lemon_juice_initial]\n\nans = solution()"
    ],
    "2f04dfbbee9d429aa18f6c6b7716eaad": [
        "def solution():\n    total_teachers = 100\n    french_teachers = 75\n    japanese_teachers = 45\n    \n    # Since every teacher knows either French or Japanese\n    both_languages = french_teachers + japanese_teachers - total_teachers\n    only_french = french_teachers - both_languages\n    \n    return only_french\n\nans = solution()"
    ],
    "23588cfeb453402e8f12679dd2cc4b4d": [
        "def solution():\n    # Shaila's ratio is 6, and she received 36 sweets.\n    # Therefore, each ratio unit corresponds to 36 sweets / 6 = 6 sweets.\n    sweets_per_ratio = 36 / 6\n    \n    # Savannah's ratio is 5, so she would have received 5 * sweets_per_ratio sweets.\n    savannah_sweets = 5 * sweets_per_ratio\n    \n    # Total sweets is the sum of sweets received by Savannah and Shaila.\n    total_sweets = savannah_sweets + 36\n\n    return total_sweets\n\nans = solution()"
    ],
    "183382b70cca478d82e7b2a617f4c3a7": [
        "def solution():\n    usual_speed = 60\n    increased_speed = usual_speed * 1.30\n    time_saved_per_hour = usual_speed - (usual_speed / increased_speed) * usual_speed\n    time_late = 9 / 60\n    distance = time_saved_per_hour * time_late\n\n    return distance\n\nans = solution()"
    ],
    "0cbee9a5a4dd4fbe91884d23889738ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total savings Kim originally had\n    x = symbols('x')\n\n    # Kim gave 1/3 of her savings to her mother\n    given_to_mother = x / 3\n\n    # She then bought dresses for 177 pounds and earrings for 129 pounds\n    spent_on_dresses = 177\n    spent_on_earrings = 129\n\n    # The remaining amount is 50% of what she gave to her mother\n    # Which means the remaining amount is also 1/2 of what she gave to her mother\n    remaining_amount = given_to_mother / 2\n\n    # Total amount spent on dresses and earrings\n    total_spent = spent_on_dresses + spent_on_earrings\n\n    # Equation representing the total expenditures and remaining amount\n    equation = Eq(x - given_to_mother - total_spent, remaining_amount)\n\n    # Solve for x\n    savings = solve(equation, x)\n\n    return savings[0]\n\nans = solution()"
    ],
    "93c95414fb804348a0d0b204e11a3791": [
        "def solution():\n    # Let x be the number we are looking for\n    # According to the problem, starting with the final result and reversing the operations:\n    # (x + 8) * 8 - 8 = 80 * 8\n    # We multiply 80 by 8 to reverse the last division\n    result_after_division = 80 * 8\n    # Then add 8 to reverse the subtraction:\n    result_after_subtraction = result_after_division + 8\n    # Finally, we divide by 8 to reverse the multiplication and subtract 8 to find the original number x\n    x = (result_after_subtraction / 8) - 8\n    return x\n\nans = solution()"
    ],
    "271cac95894d444cb0e4c7e109f430e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(37 - 3 * (x + 7), 5 * x)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8539d96612824e36b81b50c2b2658def": [
        "def solution():\n    total_skipping = 40\n    total_long_jump = 31\n    both_events = 21\n    \n    only_one_event = (total_skipping - both_events) + (total_long_jump - both_events)\n    \n    return only_one_event\n\nans = solution()"
    ],
    "1f23a8cd28504dc283d3311874eb1b31": [
        "def solution():\n    total_ropes = 10\n    total_length = 26\n    red_rope_length = 2\n    blue_rope_length = 3\n    \n    # Since we can have at most total_ropes number of red ropes, we iterate through all possibilities\n    for red_ropes in range(total_ropes+1):\n        blue_ropes = total_ropes - red_ropes\n        if red_ropes * red_rope_length + blue_ropes * blue_rope_length == total_length:\n            return red_ropes\n\nans = solution()"
    ],
    "c51f49dc3f6c442eb3ffb2f4d9696fa4": [
        "def solution():\n    P = (21 * 100) / 30\n    return P\n\nans = solution()"
    ],
    "dfd8ad42f8c24fbab602cc7800828a8d": [
        "def solution():\n    total_first_half = 366\n    average_second_half = 65\n    months_in_half_year = 6\n\n    total_second_half = average_second_half * months_in_half_year\n    total_year = total_first_half + total_second_half\n    average_per_month = total_year / (months_in_half_year * 2)  # total months in a year\n\n    return average_per_month\n\nans = solution()"
    ],
    "4189a90109e9484e9780addd6b35f9fb": [
        "def solution():\n    for i in range(1, 9*7):  # Smallest number must be less than LCM of 7 and 9\n        if i % 7 == 0 and i % 9 == 2:\n            return i\n\nans = solution()"
    ],
    "c5cf05af833245899166a02b3570e548": [
        "def solution():\n    ways = 0\n    for i in range(1, 22 // 2 + 1):\n        if i != 22 - i:\n            ways += 1\n    return ways\n\nans = solution()"
    ],
    "6f8781d116474d85b94e06547f7d5416": [
        "from fractions import Fraction\n\ndef solution():\n    brownies = Fraction(1, 7)\n    cookies = Fraction(1, 14)\n    muffins = Fraction(1, 2)\n    \n    total_used = brownies + cookies + muffins\n    total_used_simplified = total_used.simplify()\n\n    return total_used_simplified\n\nans = solution()"
    ],
    "f4c49e9a21c542c0922cf3476b6075cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    original_speed = symbols('original_speed')\n    distance = symbols('distance')\n    original_time = symbols('original_time')\n\n    # If cyclist increases speed by 25%, time decreases by 20 minutes\n    # Speed = Distance / Time => Time = Distance / Speed\n    # original_time = distance / original_speed\n    # new_speed = original_speed * 1.25\n    # new_time = original_time - 20/60 hours (converted minutes to hours)\n    # new_time = distance / new_speed -> distance / (original_speed * 1.25)\n    equation1 = Eq(original_time - (1/3), distance / (original_speed * 1.25))\n\n    # If cyclist decreases speed by 45 m/min, time increases by 75%\n    # decreased_speed = original_speed - 45\n    # increased_time = original_time * 1.75\n    # increased_time = distance / decreased_speed -> distance / (original_speed - 45)\n    equation2 = Eq(original_time * 1.75, distance / (original_speed - 45))\n\n    # Both equations are equal to the original time\n    # original_time = distance / original_speed\n    equation3 = Eq(original_time, distance / original_speed)\n\n    # We have 3 equations with 3 unknowns (original_speed, distance, original_time)\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (original_speed, distance, original_time))\n\n    # We want the distance which is a positive value\n    for sol in solutions:\n        if sol[distance] > 0:\n            return sol[distance]\n\nans = solution()"
    ],
    "21c19bf30c9e484da5b4f34fb1840b5e": [
        "def solution():\n    for i in range(2, 42):\n        if 41 % i == 0:\n            factor = 41 // i + 1\n            A = i * factor\n            break\n    seventh_multiple = A * 7\n    return seventh_multiple\n\nans = solution()"
    ],
    "def5b3612da3468e9d98c7cc1995d2cd": [
        "def solution():\n    # Given ratio of height to width and the height\n    ratio_height = 3\n    ratio_width = 4\n    height = 21\n    \n    # Find the width using the proportional ratio\n    width = (ratio_width / ratio_height) * height\n    \n    # Calculate perimeter\n    perimeter = 2 * (height + width)\n    \n    return perimeter\n\nans = solution()"
    ],
    "d8025a94b93345f1902df99a144007ac": [
        "def solution():\n    result = 1\n    for i in range(2, 12):\n        result *= (1 + 1/i)\n    return result\n\nans = solution()"
    ],
    "04961b35b9584c548a6854262aa9304c": [
        "def solution():\n    ans = 98 // 7\n    return ans\n\nans = solution()"
    ],
    "e7414af263794113add74774679c9252": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nathan, rosephine, sheena = symbols('nathan rosephine sheena')\n\n    equation1 = Eq(1/2 * nathan, 1/5 * rosephine)\n    equation2 = Eq(1/5 * rosephine, 3/5 * sheena)\n    equation3 = Eq(nathan + rosephine + sheena, 780)\n\n    solutions = solve((equation1, equation2, equation3), (nathan, rosephine, sheena))\n\n    return solutions[sheena]\n\nans = solution()"
    ],
    "b648815bab0d43cd9b3f91f1c29fe90c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n    return solutions[buzz]\n\nans = solution()"
    ],
    "7f1e36d85a1d4a2f9ceb00407fbaa1e4": [
        "def solution():\n    # Let's denote the smaller number as 'x'\n    # And the bigger number as 'y'\n    # According to the problem, y - x = 36 and x + y = 98\n    \n    # We can re-arrange the equations to find the value of x\n    # x + y = 98 -> x = 98 - y\n    # substituting the value of x in the first equation\n    # y - (98 - y) = 36 -> 2y - 98 = 36 -> 2y = 134 -> y = 67\n    \n    # Using the value of y to get x\n    x = 98 - 67\n    \n    return x\n\nans = solution()"
    ],
    "a6427ff471f34eac98798cb1ab5da071": [
        "def solution():\n    number = int(\"3\" * 12)\n    remainder = number % 7\n    return remainder\n\nans = solution()"
    ],
    "6e24543c83134c5590295ad8804d20c1": [
        "def solution():\n    bags = 8\n    pens_per_bag = 4\n    total_pens = bags * pens_per_bag\n    return total_pens\n\nans = solution()"
    ],
    "4e8cab6040bd40b7893c300856c19b6b": [
        "def solution():\n    first_term = 2\n    last_term = 160\n    difference = 2\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_terms = num_terms * (first_term + last_term) / 2\n    return int(sum_of_terms)\n\nans = solution()"
    ],
    "562c0f78f4174d73bb44a0cce09887c7": [
        "def solution():\n    last_digit_4 = (4 ** 100) % 10\n    last_digit_7 = (7 ** 100) % 10\n    last_digit_9 = (9 ** 100) % 10\n    last_digit_11 = (11 ** 100) % 10\n    \n    ans = (last_digit_4 * last_digit_7 * last_digit_9 * last_digit_11) % 10\n    return ans\n\nans = solution()"
    ],
    "f0b605621a9e488c833ca38ce574f364": [
        "def solution():\n    ans = 18 + 17 - 16 - 15 + 14 + 13 - 12 - 11\n    return ans\n\nans = solution()"
    ],
    "348877530d8f4f2dbe709fa72001f569": [
        "def solution():\n    # Given cost for 6 files and 10 rulers\n    cost_6_files_10_rulers = 40\n    # Calculate unit costs for 1 file and 1 ruler, assuming the ratio remains constant\n    cost_1_file = cost_6_files_10_rulers / (6 + (10 * 6 / 10))\n    cost_1_ruler = cost_1_file * 6 / 10\n    # Calculate the cost for 9 files and 15 rulers based on unit costs\n    total_cost_9_files_15_rulers = 9 * cost_1_file + 15 * cost_1_ruler\n    \n    return total_cost_9_files_15_rulers\n\nans = solution()"
    ],
    "1abc42cdc116468cb9f0339bff2e3acc": [
        "def solution():\n    total_questions = 60\n    correct_percentage = 0.7\n    correct_marks = 3\n    incorrect_marks = -1\n    total_score = 78\n\n    correct_answers = int(total_questions * correct_percentage)\n    incorrect_answers = total_questions - correct_answers\n\n    # Since some questions might be unanswered, we need to consider the possibility that not all the incorrect_answers are really wrong.\n    # We set up an equation based on the total marks scored by considering correct, incorrect and unanswered questions.\n    # Let 'x' be the number of questions that were actually answered wrong, then 'incorrect_answers - x' are unanswered\n    # total_score = (correct_answers * correct_marks) + (incorrect_answers - x) * incorrect_marks + x * 0 \n\n    # Rearrange the equation in terms of 'x'\n    # total_score = (correct_answers * correct_marks) + incorrect_answers * incorrect_marks + x * (0 - incorrect_marks)\n    # x = (total_score - (correct_answers * correct_marks) - incorrect_answers * incorrect_marks) / (0 - incorrect_marks)\n\n    x = (total_score - (correct_answers * correct_marks) - (incorrect_answers * incorrect_marks)) / (0 - incorrect_marks)\n    \n    # The actual number of questions answered correctly is the sum of the correctly answered questions and the ones that were not wrong\n    correct_questions = correct_answers - int(x)\n\n    return correct_questions\n\nans = solution()"
    ],
    "c94ef69eb1ea40b382fada9c92ec874e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, jessie = symbols('john jessie')\n    \n    # Equation 1: John initially has 5/13 of Jessie's money\n    equation1 = Eq(john, (5/13) * jessie)\n    \n    # Equation 2: Jessie gives John $600, and then John has half of Jessie's money\n    equation2 = Eq(john + 600, (1/2) * (jessie - 600))\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (john, jessie))\n\n    # Total amount of money is the sum of John's and Jessie's money\n    total_money = solutions[john] + solutions[jessie]\n\n    return total_money\n\nans = solution()"
    ],
    "399a22bd96244c04ab9eff62cbee5b68": [
        "def solution():\n    # Start with the fact that 1 appears fifteen times and 2 appears fourteen times.\n    # Count occurrences of 1s and 2s in numbers from 1 to N\n\n    # We initialize occurrences of 1s and 2s to 0\n    ones_count = 0\n    twos_count = 0\n    i = 0\n    \n    # We keep iterating until we have fifteen 1s and fourteen 2s.\n    while ones_count < 15 or twos_count < 14:\n        i += 1  # Increment our current number\n        str_i = str(i)\n        ones_count += str_i.count('1')  # Count the number of 1s in this number\n        twos_count += str_i.count('2')  # Count the number of 2s in this number\n\n    return i  # N will be the last number checked\n\nans = solution()"
    ],
    "a848bdfd5ea34a9ebb4eb13e5c8f9d6f": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    time_format = \"%H:%M\"\n    start_time = datetime.strptime(\"10:30\", time_format)\n    end_time = datetime.strptime(\"11:00\", time_format)\n    \n    baking_duration = end_time - start_time\n    \n    # If needed, baking_duration could further be turned into minutes as follows:\n    # baking_duration_in_minutes = baking_duration.total_seconds() / 60\n    \n    # But since we want the result in a time duration format (HH:MM),\n    # we can return it directly as a string\n    return baking_duration\n\nans = solution()"
    ],
    "a6ce7d2ec26147f4873239aa9574bc39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of T-shirts and caps\n    tshirts, caps = symbols('tshirts caps')\n\n    # Equation based on the ratio 8:5\n    equation1 = Eq(tshirts / caps, 8 / 5)\n\n    # Equation based on the amount collected from selling T-shirts and caps\n    # Siti sold 1/4 of T-shirts and 1/5 of Caps\n    # Price of T-shirt = $3 price of cap = $5\n    # Total amount collected = $132\n    equation2 = Eq(((1 / 4) * tshirts * 3) + ((1 / 5) * caps * 5), 132)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (tshirts, caps))\n\n    # Return the number of T-shirts Siti had at first\n    return solutions[tshirts]\n\nans = solution()"
    ],
    "a31cae71b18e4581ac44ea1064373892": [
        "def solution():\n    total_cost = 3 * 12 + 5 * 11  # in pence\n    total_paid = 200  # converting £2 to pence\n    change = total_paid - total_cost  # in pence\n\n    pounds = change // 100  # converting pence to pounds\n    pence = change % 100\n\n    ans = (pounds, pence)  # the answer should be in pounds and pence\n    return ans\n\nans = solution()"
    ],
    "6c88703393b945c0b0bfae7254353841": [
        "def solution():\n    youngest_age = 7\n    age_difference = 2\n    number_of_children = 7\n\n    # Harvir is the oldest, so he/she is the seventh child\n    # The age difference between each child is 2 years, so we use the formula for the nth term of an arithmetic sequence:\n    # nth_term = first_term + (n - 1) * difference\n    harvir_age = youngest_age + (number_of_children - 1) * age_difference\n    \n    return harvir_age\n\nans = solution()"
    ],
    "a4d1fe51e51644a68d34267f1c2f5275": [
        "def solution():\n    calendar_price = 6.97\n    ball_price = 2.99\n\n    total_spent = calendar_price + ball_price\n\n    return total_spent\n\nans = solution()"
    ],
    "e44878f3a4c142f6a0f13947c2b24159": [
        "def solution():\n    flour_left_kg = 360 / 1000  # Converting flour left from grams to kilograms\n    flour_used_kg = (1/5) + (1/2)  # Sum of flour used for muffins and cookies in kilograms\n\n    initial_flour_kg = flour_used_kg + flour_left_kg  # Total initial flour is the sum of flour used plus flour left\n\n    return initial_flour_kg\n\nans = solution()"
    ],
    "cd2ade63fdb943c2be635c4890f7b39f": [
        "from math import factorial\n\ndef solution():\n    # There are four people to arrange around the table\n    num_people = 4\n\n    # Since the table is circular, we fix one person's position and arrange the remaining (n-1)!\n    num_ways = factorial(num_people - 1)\n\n    return num_ways\n\nans = solution()"
    ],
    "e63df9e57c014a358e54d2a32b1e30ef": [
        "def solution():\n    def delta(a, b):\n        return 3 * a + 2 * b\n    \n    def star(a, b):\n        return 3 * a - 2 * b\n    \n    part1 = delta(3, 4)\n    part2 = star(part1, 5)\n    ans = delta(part2, 6)\n    \n    return ans\n\nans = solution()"
    ],
    "c578c0aa1c3c4f668b3e35402f2a9536": [
        "def solution():\n    # The total value Gordon spent in pence\n    total_spent = 500  # 1 pound = 100 pence\n\n    # Price of each orange and lemon in pence\n    price_orange = 26\n    price_lemon = 30\n\n    # Initialize the total number of oranges and lemons\n    total_fruits = 0\n\n    # Iterate over possible amount of oranges\n    for num_oranges in range(total_spent // price_orange + 1):\n        # Calculate the remaining money after buying these many oranges\n        remaining = total_spent - (num_oranges * price_orange)\n        \n        # Check if the remaining money can be spent on lemons exactly\n        if remaining % price_lemon == 0:\n            # Calculate the number of lemons that can be bought\n            num_lemons = remaining // price_lemon\n            \n            # We found a valid combination\n            total_fruits = num_oranges + num_lemons\n            break  # No need to check further as we have the solution\n\n    return total_fruits\n\nans = solution()"
    ],
    "297ef73642eb4bb7bc9c876f32b727e7": [
        "def solution():\n    count = 0\n    for page_number in range(1, 441):\n        count += str(page_number).count('5')\n    return count\n\nans = solution()"
    ],
    "0bc58aa125af4c5da502baffb301c81e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the number of original eggs and the final amount\n    original = symbols('original')\n    \n    # Equation representing the relationship between original and final number of eggs\n    equation = Eq(original + 24, 3 * original)\n    \n    # Solve the equation\n    sol = solve(equation, original)\n    \n    # Get the solution which is the number of original eggs\n    return sol[0]\n\nans = solution()"
    ],
    "f96223372da84682a7c29924dbb659bb": [
        "def solution():\n    cookies = 298\n    box_capacity = 8\n    boxes_needed = (cookies + box_capacity - 1) // box_capacity\n    return boxes_needed\n\nans = solution()"
    ],
    "36563a3f9be64d47a2d4bd411b572cae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let 'f' represent the number of female visitors on the first day\n    # let 'm' represent the number of male visitors on the first day\n    f, m = symbols('f m')\n\n    # On the first day, the number of male visitors was 450 more than the number of female visitors\n    equation1 = Eq(m, f + 450)\n\n    # On the second day, the number of female visitors increased by 15%\n    # and the number of male visitors decreased by 18%\n    # The total number of visitors for the second day was 1354\n    equation2 = Eq(f * 1.15 + m * 0.82, 1354)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (f, m))\n\n    # The total number of visitors on the first day\n    total_visitors_first_day = solutions[f] + solutions[m]\n\n    return total_visitors_first_day\n\nans = solution()"
    ],
    "5ee47aa9d6ab43b487b000bf91697924": [
        "def solution():\n    n = (10 - 5) / 2\n    return n\n\nans = solution()"
    ],
    "74eeba4eef5b4ec989b3c5c3a572e887": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    leo, jason = symbols('leo jason')\n    \n    # Leo had $220 more than Jason initially\n    equation1 = Eq(leo, jason + 220)\n    \n    # Leo got an extra $180, and Jason got an extra $1100\n    equation2 = Eq(leo + 180, jason + 1100)\n    \n    # Now, Jason has 2 times as much money as Leo\n    equation3 = Eq(jason, 2 * (leo + 180))\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (leo, jason))\n    \n    return solutions[jason]\n\nans = solution()"
    ],
    "21668aad8ae540c3af86ad2cada5fa45": [
        "def solution():\n    from math import factorial\n\n    # Calculate the factorial of total number of books\n    total_books = factorial(3+4+2+2) \n\n    # Since the books are not unique, we divide by the factorials of the number of identical items (3 biographies, 4 science fictions, 2 magazines, and 2 schoolbooks).\n    identical_biographies = factorial(3)\n    identical_science_fictions = factorial(4)\n    identical_magazines = factorial(2)\n    identical_schoolbooks = factorial(2)\n\n    # Total number of ways to arrange the books\n    ways = total_books // (identical_biographies * identical_science_fictions * identical_magazines * identical_schoolbooks)\n\n    return ways\n\nans = solution()"
    ],
    "302fe51df29b42d5b5c26676941903eb": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 5):\n        A, B, C, D, E = perm\n        if A == 0 or C == 0:  # A and C can't be 0 since they're leading digits\n            continue\n        abc = A * 100 + B * 10 + C\n        efc = E * 100 + C * 10 + B\n        if abc * 4 == efc:  # Check the condition A*BC * 4 = E*CB\n            return E * 10000 + F * 1000 + C * 100 + B * 10 + H  # Construct the number EFCBH\n\nans = solution()"
    ],
    "2cbac0435d3842e0a32ebcb7823538b7": [
        "def solution():\n    robots_per_day = 347\n    days_in_week = 7\n    return robots_per_day * days_in_week\n\nans = solution()"
    ],
    "f005eeb563694763b1cfdaeee89b1c28": [
        "def solution():\n    starting_number = 345\n    decrement = 9\n    while starting_number >= decrement:\n        starting_number -= decrement\n        \n    return starting_number\n\nans = solution()"
    ],
    "0dba6392fb4849a0b274002c4f736054": [
        "def solution():\n    total_cost = 3_000_000  # Total cost of mansion in pounds\n    number_of_friends = 5   # Number of friends sharing the cost\n\n    cost_per_person = total_cost / number_of_friends\n\n    return cost_per_person\n\nans = solution()"
    ],
    "6c0f20194f4d43c694fdc3e29818292c": [
        "def solution():\n    # We are solving a problem of partitioning 7 indistinguishable items into 3 indistinguishable groups.\n    # This is a problem of partitioning an integer into a sum of integers, which is well-known in combinatorics.\n    \n    # We use stars and bars theorem, which in this case is simpler because we can just list out all possible ways.\n    # Since the pencil cases are identical, order doesn't matter.\n    # Therefore, we just list possible ways that 3 identical sums can add up to 7.\n    # (7, 0, 0), (6, 1, 0), (5, 2, 0), (5, 1, 1), (4, 3, 0), (4, 2, 1), (3, 3, 1), (3, 2, 2)\n    # So there are 8 different ways.\n    \n    count = 8\n    return count\n\nans = solution()"
    ],
    "9322b5fd8c0f4ef49dbb6806c5d58465": [
        "def solution():\n    total_children = 50\n    price_without_name = 10\n    price_with_name = 15\n    total_amount_paid = 555\n    \n    for with_name in range(total_children + 1):\n        without_name = total_children - with_name\n        if (with_name * price_with_name + without_name * price_without_name) == total_amount_paid:\n            return with_name\n\nans = solution()"
    ],
    "4b392afd5d974f1c924defced1ff9b83": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the time spent in minutes at the increased speed\n    x = symbols('x')\n\n    # Distance covered in first 10 minutes at 150 m/min\n    distance_initial = 10 * 150\n\n    # Distance covered after speed increase at 200 m/min (150+50 m/min)\n    distance_after_increase = x * 200\n\n    # Equation for total distance\n    equation = Eq(distance_initial + distance_after_increase, 3700)\n\n    # Solve for x\n    time_at_increased_speed = solve(equation, x)[0]\n\n    # Total time is the 10 minutes at initial speed plus the time at increased speed\n    total_time = 10 + time_at_increased_speed\n\n    return total_time\n\nans = solution()"
    ],
    "fa72055fad084ab58ad10b1fda0c68de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    male_first_day, female_first_day = symbols('male_first_day female_first_day')\n    \n    # male visitors is 450 more than female\n    equation1 = Eq(male_first_day, female_first_day + 450)\n    \n    # male visitors decrease by 18% and female increase by 15% on the second day\n    # total visitors on the second day is 1354\n    equation2 = Eq((male_first_day - 0.18 * male_first_day) + (female_first_day + 0.15 * female_first_day), 1354)\n    \n    # solve the equations\n    solutions = solve((equation1, equation2), (male_first_day, female_first_day))\n\n    return solutions[male_first_day]\n\nans = solution()"
    ],
    "a20cb097c8264920ad40461d2d3be9bd": [
        "def solution():\n    return 2 ** (len(bin(40)) - 3)\n\nans = solution()"
    ],
    "47a4f2843f6546ecafe1fb93a795ff45": [
        "from math import factorial\n\ndef solution():\n    total_cards = 4 + 3 + 7\n    ways = factorial(total_cards) // (factorial(4) * factorial(3) * factorial(7))\n    return ways\n\nans = solution()"
    ],
    "b2512ca447d44ce79e7439b887e4b561": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jon, miguel = symbols('jon miguel')\n    \n    equation1 = Eq(jon, miguel + 0.3 * miguel)\n    equation2 = Eq(jon + miguel, 46)\n\n    solutions = solve((equation1, equation2), (jon, miguel))\n\n    return solutions[jon]\n\nans = solution()"
    ],
    "2cf10171726c4ba39f1ef12370d42497": [
        "def solution():\n    # Singapore time is 7 hours ahead of London.\n    # If the plane took off from Singapore at 05:00, it would be (05:00 - 7 hours) 22:00 of the previous day in London.\n    # When it landed in London, the local time was 11:00.\n\n    # Convert both times to minutes for easier calculation:\n    takeoff_time_london_minutes = (22 * 60)  # 22:00 the previous day\n    landing_time_london_minutes = (11 * 60)  # 11:00\n\n    # Since the landing time is on the next day, we need to add 24 hours worth of minutes.\n    total_minutes_in_a_day = 24 * 60\n    flight_duration_minutes = (landing_time_london_minutes + total_minutes_in_a_day) - takeoff_time_london_minutes\n\n    # Convert the flight duration back to hours.\n    flight_duration_hours = flight_duration_minutes / 60\n\n    return flight_duration_hours\n\nans = solution()"
    ],
    "bb60d9d026a3416baa2d8cced7ed7efa": [
        "def solution():\n    pages_first_day = 20\n    daily_increase = 5\n    pages_last_day = 80\n\n    total_days = 1  # Start counting from the first day\n    total_pages = pages_first_day\n\n    # Loop to sum up pages read each day until the sum just exceeds the 80 pages of the last day\n    while total_pages + (pages_first_day + total_days * daily_increase) <= pages_last_day:\n        total_pages += (pages_first_day + total_days * daily_increase)\n        total_days += 1\n\n    # Add the pages read on the last day\n    total_pages += pages_last_day\n\n    return total_pages\n\nans = solution()"
    ],
    "2cf16071a494408aa27882168fe6226a": [
        "def solution():\n    # Determine each digit based on the description\n    first_digit = 5           # smallest multiple of 5\n    second_digit = 1          # smallest odd number among the natural numbers\n    third_digit = 9           # largest single-digit odd number\n    fourth_digit = 2          # smallest even number in nature\n    fifth_digit = 8           # largest single-digit even number\n    sixth_digit = 3           # smallest odd number greater than 1 in nature\n    seventh_digit = 0         # unknown, but a multiple of 2 and 5\n\n    # Combine digits to form the phone number\n    phone_number = (first_digit * 10**6 +\n                    second_digit * 10**5 +\n                    third_digit * 10**4 +\n                    fourth_digit * 10**3 +\n                    fifth_digit * 10**2 +\n                    sixth_digit * 10 +\n                    seventh_digit)\n\n    return phone_number\n\nans = solution()"
    ],
    "2089b724a45c4ed988606f4860fbeb30": [
        "def solution():\n    almonds = 4/9\n    cashew_nuts = 1/3\n    difference = almonds - cashew_nuts\n    \n    return difference\n\nans = solution()"
    ],
    "0dc187974a4f4bdc885566505c9ca033": [
        "def solution():\n    quotient = 9\n    remainder = 2\n    divisor = 4\n\n    incorrect_product = quotient * remainder\n    incorrect_sum = incorrect_product + divisor\n\n    # Check if Johnny's method is correct\n    if incorrect_sum != (quotient * divisor + remainder):\n        # Find correct dividend\n        correct_dividend = quotient * divisor + remainder\n        return correct_dividend\n    else:\n        return incorrect_sum  # This means Johnny's answer is correct\n\nans = solution()"
    ],
    "05e8386eec1a4686bcceefeeec0da532": [
        "def solution():\n    sum_positive = sum(range(4, 55, 4))\n    sum_negative = sum(range(2, 55, 4))\n    ans = sum_positive - sum_negative\n    return ans\n\nans = solution()"
    ],
    "33806102632247718f0ca6cc3c4ae3cd": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 6), (4, 7), (1, 8)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "97ff1c826b9449ebba306715644e00d7": [
        "def solution():\n    from itertools import permutations\n    \n    for perm in permutations(range(10), 5):\n        S, A, M, O, G = perm\n        if S == 0 or G == 0:  # Skipping if S or G is 0 since they're the first digit\n            continue\n        SASMO = S*10000 + A*1000 + S*100 + M*10 + O\n        OGAMS = O*10000 + G*1000 + A*100 + M*10 + S\n        if SASMO * 4 == OGAMS:\n            return SASMO\n\nans = solution()"
    ],
    "5f83a7f525c2424e93dbfaca3c6f9265": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys = symbols('boys')\n    girls = 40 - boys\n\n    equation = Eq(4 * boys - 3 * girls, 62)\n\n    num_boys = solve(equation, boys)\n\n    return num_boys[0]\n\nans = solution()"
    ],
    "d8f72795c5214d67bdae537f6f2294cc": [
        "def solution():\n    # Calculate the total number of elements before the first 11 appears\n    # Each integer n appears n times. So sum the series 1+2+3+...+10.\n    total_elements = sum(range(1, 11))\n\n    # The median position of the sequence\n    median_pos = (total_elements + 1) // 2\n\n    n = 1\n    while median_pos > n:\n        median_pos -= n\n        n += 1\n\n    # Return the value at the median position; which is 'n' at this point.\n    return n\n\nans = solution()"
    ],
    "9764b7f8732540ffab94bb9e73235bfc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    cut = symbols('cut')\n\n    # Rope A after cutting is 3 times Rope B after cutting\n    equation = Eq(65 - cut, 3 * (29 - cut))\n\n    # Solve the equation\n    solution = solve(equation, cut)\n\n    return solution[0]\n\nans = solution()"
    ],
    "58b52e2f938546e89e5a64e5f2bf4334": [
        "def solution():\n    total_rolls = 30\n    probability_of_5 = 1/6\n\n    expected_value = total_rolls * probability_of_5\n\n    return expected_value\n\nans = solution()"
    ],
    "645b71623d4d4b11a64007d32b21db61": [
        "def solution():\n    return 345 * 4\n\nans = solution()"
    ],
    "627fc9344fb748cca98e15cf87d2083a": [
        "def solution():\n    return 15 / 0.05\n\nans = solution()"
    ],
    "4f46c32b143a401aafbf4d6ead565a65": [
        "def solution():\n    return (12 / 18) * 6\n\nans = solution()"
    ],
    "8cc478711c8f4086b30df7455059147a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B, C = symbols('A B C')\n    ratio_AB = Eq(A/B, 2/3)\n    ratio_BC = Eq(B/C, 6/5)\n    average_ABC = Eq((A + B + C)/3, 45)\n    \n    solutions = solve((ratio_AB, ratio_BC, average_ABC), (A, B, C))\n    \n    return solutions[B]\n\nans = solution()"
    ],
    "8cf1dcd99c234fe3bed14598d82e6dbf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    total_cost = Eq(6 * (7 * x) + 3 * 35, 441)\n    dress_cost = solve(total_cost, x)\n    \n    return dress_cost[0]\n\nans = solution()"
    ],
    "a9763e974eea446e92026fb8477bfbd4": [
        "def solution():\n    # There are five odd digits: 1, 3, 5, 7, and 9\n    odd_digits = 5\n    \n    # Each of the three positions in a 3-digit number can be filled with any of the five odd digits\n    # Using the multiplication principle, we multiply the number of choices for each position\n    total_numbers = odd_digits * odd_digits * odd_digits\n\n    return total_numbers\n\nans = solution()"
    ],
    "60f6f205ec4c40bb89204475765d9532": [
        "def solution():\n    return 5 * 7 * 8\n\nans = solution()"
    ],
    "aa5f85b2df7440f382a1edca655a0195": [
        "def solution():\n    k = 2011\n    return k\n\nans = solution()"
    ],
    "7d339ab0e49d487d82f990bb57b18e62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lazy, energetic = symbols('lazy energetic')\n    \n    # The energetic decorator paints the whole house in 12 days\n    # Hence, the energetic decorator's one day work is 1/12\n    energetic_work_per_day = 1/12\n    \n    # Both decorators (lazy and energetic) together paint the whole house in 8 days\n    # Hence, both decorators work together is 1/8 of the house per day\n    combined_work_per_day = 1/8\n    \n    # Let 1/lazy be the one day work of the lazy decorator\n    equation = Eq(combined_work_per_day, 1/lazy + energetic_work_per_day)\n    \n    days_lazy = solve(equation, lazy)\n\n    return days_lazy[0]\n\nans = solution()"
    ],
    "bc1425cad1954c489bb66ff166a40ad5": [
        "def solution():\n    remainder_sum = 0\n    for i in range(1, 1000, 2):\n        remainder_sum += (i ** 2) % 3\n    ans = remainder_sum % 3\n    return ans\n\nans = solution()"
    ],
    "d1aea7f5923c41419c0a7f013a821868": [
        "def solution():\n    # Given increase in length of the rectangle is 12cm\n    # Given new perimeter after increasing the length is 38cm\n    \n    # Let the length of the original rectangle be L cm\n    # Let the width of the original rectangle be W cm\n\n    # The perimeter of a rectangle is given by 2*(L + W)\n    # The new perimeter after increasing the length is 2*(L + 12cm + W) = 38cm\n\n    # From the equation 2*(L + 12 + W) = 38, solve for L + W\n    # (L + 12 + W) = 19\n    # L + W = 19 - 12\n    L_plus_W = 19 - 12\n\n    # Original perimeter is 2*(L + W)\n    original_perimeter = 2 * L_plus_W\n\n    return original_perimeter\n\nans = solution()"
    ],
    "b3933f96a6f64df2937f9504f73d4f93": [
        "def solution():\n    nell_ratio = 4\n    joe_ratio = 5\n    nell_sweets = 24\n\n    total_sweets = nell_sweets * (nell_ratio + joe_ratio) // nell_ratio\n    return total_sweets\n\nans = solution()"
    ],
    "46886e982cd848a7abf837e5973c5ae7": [
        "def solution():\n    baby_chickens = 270\n    hens = (8 / 9) * baby_chickens\n    roosters = (1 / 4) * hens\n    return int(roosters)\n\nans = solution()"
    ],
    "5c4786655fca473fb242916467fa9779": [
        "def solution():\n    first_term = 2\n    difference = 4\n    n = 11\n    nth_term = first_term + (n - 1) * difference\n    return nth_term\n\nans = solution()"
    ],
    "1af1519ce39648a5a5a614d850ea16ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create two symbols for the number of stamps Jamie-Anne and Natasha have\n    J, N = symbols('J N')\n    \n    # Equation based on the ratio of the number of stamps\n    equation1 = Eq(J, 5 * N / 3)\n    \n    # Equation based on the difference in the number of stamps\n    equation2 = Eq(J - N, 18)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (J, N))\n    \n    # Calculate the total number of stamps\n    total_stamps = solutions[J] + solutions[N]\n    \n    return total_stamps\n\nans = solution()"
    ],
    "7fafcabd4a364cf7a536efe02bf4be6e": [
        "def solution():\n    for a in range(1, 10):  # since a is the first digit it can't be 0\n        for b in range(10):  # b can be any digit from 0-9\n            ab = int(f\"{a}{b}\")\n            ba = int(f\"{b}{a}\")\n            aab = int(f\"{a}{a}{b}\")\n            if ab + ba + b == aab:\n                return a + b\n\nans = solution()"
    ],
    "563e040a6b604c99be6f021744a72867": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sana, mina = symbols('sana mina')\n    \n    # Sana had 8 times as many coins as Mina.\n    equation1 = Eq(sana, 8 * mina)\n    \n    # Sana and Mina had 234 coins in total at first.\n    equation2 = Eq(sana + mina, 234)\n    \n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (sana, mina))\n    \n    # Calculate how many coins Mina had left after giving away 12.\n    mina_left = solutions[mina] - 12\n    \n    return mina_left\n\nans = solution()"
    ],
    "61a8f774aec24308b2fbbb6d4c4052db": [
        "def solution():\n    total_grapes = 210\n    sold_monday = total_grapes * (3/7)\n    remaining_after_monday = total_grapes - sold_monday\n    sold_tuesday = remaining_after_monday * (3/8)\n    remaining_after_tuesday = remaining_after_monday - sold_tuesday\n    grapes_per_bag = 3/4\n\n    num_bags = remaining_after_tuesday / grapes_per_bag\n\n    return int(num_bags)\n\nans = solution()"
    ],
    "6c63ea0de1a8415980442a6c8569fc9d": [
        "def solution():\n    flour_per_student = 142\n    total_students = 123\n\n    total_flour = flour_per_student * total_students\n\n    return total_flour\n\nans = solution()"
    ],
    "2f8eea7d70d643d9a9a6d7959dcc5596": [
        "def solution():\n    first_term = 81\n    common_difference = 75 - 81\n    n = 11\n\n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "e01a60afedfc47728af6bf6cd42afab2": [
        "def solution():\n    percentage = (15 / 300) * 100\n    return percentage\n\nans = solution()"
    ],
    "a2b6115aec834dc68138160027844aaa": [
        "def solution():\n    count = 0\n    for i in range(1, 121):\n        count += str(i).count('7')\n    return count\n\nans = solution()"
    ],
    "53cbd8fd0f77499fb24e88ab3dcaacba": [
        "def solution():\n    # Uncle Sam cycles from the first lamp post to the eleventh lamp post in 50 seconds\n    # This means he passes 10 intervals between the lamp posts in 50 seconds\n    # Therefore, each interval takes 50 / 10 = 5 seconds to cycle past\n\n    # 80 seconds / 5 seconds per interval gives us the number of intervals Uncle Sam can cycle past in 80 seconds\n    intervals = 80 // 5\n\n    # To find the number of lamp posts, we add 1 to the intervals (since the starting point is a lamp post)\n    lamp_posts = intervals + 1\n\n    return lamp_posts\n\nans = solution()"
    ],
    "8626a5ac5cd849a99b266ae11eb763c0": [
        "def solution():\n    # Calculate flowers on each side without the corner ones\n    flowers_per_side = 6 - 2  # Subtracting the corners as they are shared\n    # Total flowers is flowers_per_side times 4 plus the 4 corner flowers\n    total_flowers = (flowers_per_side * 4) + 4\n    return total_flowers\n\nans = solution()"
    ],
    "89b9c39288374835a4dd1f8d8af530fd": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    total_items = symbols('total_items')\n    \n    # equations based on the problem description\n    apples = (2/3) * total_items\n    bananas = (1/9) * total_items\n    lemons = total_items - apples - bananas\n    equation = Eq(apples - lemons, 12)\n\n    # solving the equation for the total number of items\n    total_items_solution = solve(equation, total_items)\n\n    # calculate the number of lemons\n    num_lemons = lemons.subs(total_items, total_items_solution[0])\n\n    return num_lemons\n\nans = solution()"
    ],
    "7cec8a1b08d943669b99d263f87e4fa6": [
        "def solution():\n    original_price = 80 + 20\n    discount_amount = 20\n    discount_percent = (discount_amount / original_price) * 100\n    return discount_percent\n\nans = solution()"
    ],
    "2b8a88ca5fe7429ea82c73c3b8990e1b": [
        "def solution():\n    digit_hundreds = 8\n    digit_thousands = digit_hundreds + 1\n    factors_of_4 = [1, 2, 4]\n    digit_ones = sum(factors_of_4)\n    digit_tens = digit_hundreds - digit_ones\n    digit_tens_thousands = 4\n\n    result = (digit_tens_thousands * 10000 + digit_thousands * 1000 + \n              digit_hundreds * 100 + digit_tens * 10 + digit_ones)\n    return result\n\nans = solution()"
    ],
    "44e8dcc102494f3192e7ebf223ca7d90": [
        "def solution():\n    ans = 6 - 18\n    return ans\n\nans = solution()"
    ],
    "9eb437e49efd42d88c006e74f9099f07": [
        "def solution():\n    basketball_court_length = 25\n    football_field_extra_length = 56\n    football_field_length = basketball_court_length + football_field_extra_length\n    return football_field_length\n\nans = solution()"
    ],
    "7c04260dcb0743288f345e79968829c7": [
        "def solution():\n    rina_price = 60\n    ana_price = 67.50\n    original_price = rina_price / (1 - 0.20)  # Rina's price after 20% discount\n    ana_discount = (original_price - ana_price) / original_price\n\n    return ana_discount * 100  # Convert to percentage\n\nans = solution()"
    ],
    "3fe7176a573649c389081f702880fe81": [
        "from fractions import Fraction\n\ndef solution():\n    left_limit = Fraction(3, 10)\n    right_limit = Fraction(5, 16)\n    \n    s = 1\n    while True:\n        r = s * left_limit\n        if r.denominator == s and left_limit < r < right_limit:\n            break\n        s += 1\n    return s\n\nans = solution()"
    ],
    "f21830983a5f48e28095fe2ece3c5a85": [
        "def solution():\n    first_day_steering_wheels = 300\n    second_day_steering_wheels = 250\n    first_two_days_total = first_day_steering_wheels + second_day_steering_wheels\n    total_steering_wheels = first_two_days_total / (5/6)\n    \n    return int(total_steering_wheels)\n\nans = solution()"
    ],
    "aa03a281d4d94018a0064e56c41ee496": [
        "def solution():\n    ans = 1.3 - 0.02\n    return ans\n\nans = solution()"
    ],
    "278081b797fb4ba488225b7671c17347": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    \n    equation = Eq(12*x - (7*x + 9), 1)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "439fae9a23bb4288adfdb67093fcdb41": [
        "def solution():\n    total_seats = 40  # Seats when full of children\n    occupied_by_children = 15\n    remaining_seats_for_children = total_seats - occupied_by_children\n    # Calculating the equivalent number of adult seats occupied by remaining children seats\n    adults_per_child_seat = 24 / 40\n    equivalent_adult_seats_occupied = remaining_seats_for_children * adults_per_child_seat\n    return int(equivalent_adult_seats_occupied)\n\nans = solution()"
    ],
    "485363fa5d114e10aa5193dda256cebb": [
        "def solution():\n    from math import gcd\n\n    # Find the prime factorization of 28\n    prime_factors = [2, 2, 7]  # 28 = 2^2 * 7\n\n    # We need to make square of all prime factors.\n    # The smallest number would just be the remaining prime factors to make them square.\n    # Here it's 7, because we don't have a pair for it.\n    \n    smallest_number = 7\n\n    return smallest_number\n\nans = solution()"
    ],
    "15ed9cc3ded941faafa1ff286a405f77": [
        "def solution():\n    pancakes_per_3_minutes = 2\n    minutes = 12\n    pancakes_in_12_minutes = (pancakes_per_3_minutes / 3) * minutes\n\n    return int(pancakes_in_12_minutes)\n\nans = solution()"
    ],
    "9b046c316f30464f8998d4a3f5a6db6b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 - x, 5 * x - 8)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "64da3536e459433ea4a1e1ffe0974428": [
        "def solution():\n    students = 35\n    uniform_sizes = 3\n    ans = (students // uniform_sizes) + 1\n    return ans\n\nans = solution()"
    ],
    "f7fa4272e23e482598b3fd2264f07a29": [
        "def solution():\n    triangle_operation = lambda a, b: (a + 2) / b\n    return triangle_operation(8, triangle_operation(6, 4))\n\nans = solution()"
    ],
    "d0e55b24b2d94a99a067394ed0971714": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    salary = symbols('salary')\n\n    # Define the equation based on the problem statement\n    equation = Eq(salary - 740 - (3/4) * (salary - 740), (1/5) * salary)\n    \n    # Solve the equation\n    solved_salary = solve(equation, salary)\n\n    return solved_salary[0]\n\nans = solution()"
    ],
    "78cc1f0029db4e2baf026af900879af7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    russell = symbols('russell')\n\n    equation = Eq(russell + 32, 4 * (russell - 16))\n\n    age_now = solve(equation, russell)\n\n    return age_now[0]\n\nans = solution()"
    ],
    "bdd4de642a694795bd55c992b23b3398": [
        "def solution():\n    percentage = 40\n    total = 120\n\n    ans = (percentage / 100) * total\n\n    return ans\n\nans = solution()"
    ],
    "18b8daa61603447d8022fd9b8bc02b69": [
        "def solution():\n    person1 = 1\n    person2 = 6\n    opposite_person = 19\n\n    people = (opposite_person - person2) * 2\n    return people\n\nans = solution()"
    ],
    "f7751c2233f24b7d9dbfbe6d168ddef9": [
        "def solution():\n    # Iterate through all the possibilities where A and C are from 0 to 9\n    for A in range(10):\n        for C in range(10):\n            # Build Pip's number with the formula ABCA\n            pip_number = int(f\"{A}{C}{C}{A}\")\n            # Build Bud's number by reversing the tens and units digits of Pip's number\n            bud_number = int(f\"{A}{A}{C}{C}\")\n            # Check if the sum of Pip's and Bud's numbers equal to 5510\n            if pip_number + bud_number == 5510:\n                return pip_number\n\nans = solution()"
    ],
    "311137556c874d4bb13b99f9b5117222": [
        "def solution():\n    # It takes 2 minutes to make 1 cut, which results in 2 pieces.\n    # To get 5 pieces, he needs to make 4 cuts since each cut adds one additional piece.\n    # So the total time is 4 cuts * 2 minutes per cut\n    \n    total_cuts_needed = 5 - 1\n    time_per_cut = 2\n    total_time = total_cuts_needed * time_per_cut\n    \n    return total_time\n\nans = solution()"
    ],
    "0574b4ea3bce459692a79ced3c88cee6": [
        "def solution():\n    spelling_books_per_shelf = 9\n    total_spelling_books = 72\n    total_shelves = 15\n\n    # Find out how many shelves are filled with spelling books\n    shelves_with_spelling_books = total_spelling_books // spelling_books_per_shelf\n\n    # Rest of the shelves must have math books\n    shelves_with_math_books = total_shelves - shelves_with_spelling_books\n\n    # Each shelf with math books contains 4 math books\n    math_books_per_shelf = 4\n    total_math_books = shelves_with_math_books * math_books_per_shelf\n\n    return total_math_books\n\nans = solution()"
    ],
    "fd624218613f48f49c62fe0c615eab9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the original number of students in Class 6A\n    # Then, the original number of students in Class 6B is 9/4 * x\n    x = symbols('x')\n\n    # After the reshuffling:\n    # Class 6A: x - 3 (left) + 18 (joined) = x + 15\n    # Class 6B: 9/4 * x + 3 (joined) - 18 (left) = 9/4 * x - 15\n    \n    # Since both classes are now equal in number, we set them equal to each other:\n    equation = Eq(x + 15, 9/4 * x - 15)\n\n    # Solve the equation for x\n    original_6A = solve(equation, x)[0]\n\n    return original_6A\n\nans = solution()"
    ],
    "ec4f8ef8e4e24394bc6bbee281e961db": [
        "def solution():\n    biscuit_ratio = 100\n    chocolate_ratio = 40\n    available_biscuits = 75\n\n    chocolate_to_use = (available_biscuits * chocolate_ratio) / biscuit_ratio\n\n    return chocolate_to_use\n\nans = solution()"
    ],
    "965c2ac5dad34d4fa1d38ad774207e9a": [
        "def solution():\n    ans = 3 + 2 * 5\n    return ans\n\nans = solution()"
    ],
    "295414faedcc466dba1a6853455af3c4": [
        "def solution():\n    # Interval from first to fourth floor is 3 intervals (1st to 2nd, 2nd to 3rd, 3rd to 4th)\n    intervals_for_fourth_floor = 3\n\n    # Jeffrey takes 6 minutes for these intervals, so 1 interval takes 6 / 3 = 2 minutes\n    minutes_per_interval = 6 / intervals_for_fourth_floor\n\n    # Interval from first to tenth floor is 9 intervals (1st to 2nd, ..., 9th to 10th)\n    intervals_for_tenth_floor = 9\n\n    # Total time required is intervals times minutes per interval\n    total_time = intervals_for_tenth_floor * minutes_per_interval\n\n    return total_time\n\nans = solution()"
    ],
    "ca4820ab45754f35b7d59a04967d1276": [
        "def solution():\n    daily_earnings = 90\n    days_in_week = 7\n    total_earnings = daily_earnings * days_in_week\n    return total_earnings\n\nans = solution()"
    ],
    "f5f0fa861ee84ff5baf0932a2cdd79df": [
        "def solution():\n    luna_flowers = 15\n    difference = 3\n    harry_flowers = luna_flowers - difference\n    return harry_flowers\n\nans = solution()"
    ],
    "065ea362f1f84acd909b64af10328dd1": [
        "def solution():\n    pasta_options = 2\n    sauce_options = 3\n    topping_options = 2\n\n    total_combinations = pasta_options * sauce_options * topping_options\n\n    return total_combinations\n\nans = solution()"
    ],
    "1bee8ef3713140f195baa78f51579340": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    n = symbols('n')\n    equation = Eq(32 / n, n / 2)\n    solutions = solve(equation, n)\n\n    return solutions[0]  # assuming you want the first (real) solution\n\nans = solution()"
    ],
    "ed4d903eb27d49279a669eb29f697081": [
        "def solution():\n    # The 8th student is directly opposite the 16th student, which implies\n    # there are 16 - 8 = 8 students between them, and since they are opposite,\n    # the circle must have 8 * 2 = 16 students in total initially.\n\n    # After more students join, the total number of students must continue to\n    # allow the 8th student to be opposite the 22nd student.\n    # To find the new total number of students, we take the difference between\n    # positions 22 and 8, which is 14, and then double it to account for being\n    # opposite sides of the circle: 14 * 2 = 28 students in total now.\n\n    initial_students = 16\n    new_total_students = 28\n\n    # The number of new students who joined is the new total minus the initial\n    new_students = new_total_students - initial_students\n\n    return new_students\n\nans = solution()"
    ],
    "b096b994b81c439089e43a5964dae9ae": [
        "def solution():\n    distance1 = 280\n    distance2 = 400\n    distance3 = 800 - (distance1 + distance2)\n    \n    speed1 = 7\n    speed2 = 5\n    speed3 = 8\n    \n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    time3 = distance3 / speed3\n    \n    total_time = time1 + time2 + time3\n    \n    return total_time\n\nans = solution()"
    ],
    "1ec6272d9b5f4fb681677cca4ba5a3ef": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Anna, Betsy and Charlene's marbles as A, B, C at first respectively,\n    # and A', B', C' after the given transactions.\n    A, B, C, A1, B1, C1 = symbols('A B C A1 B1 C1')\n\n    # Charlene gave 15 marbles to Betsy\n    equation1 = Eq(C1, C - 15)\n    equation2 = Eq(B1, B + 15)\n\n    # Betsy gave 8 marbles to Anna\n    equation3 = Eq(B1 - 8, B)\n    equation4 = Eq(A1 + 8, A)\n\n    # Ratios after transactions: A':B':C' = 2:5:7\n    equation5 = Eq(A1 * 5, B1 * 2)\n    equation6 = Eq(B1 * 7, C1 * 5)\n\n    # Total marbles\n    equation7 = Eq(A + B + C, 168)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6, equation7), (A, B, C, A1, B1, C1))\n    B_initial = solutions[B]\n\n    return B_initial\n\nans = solution()"
    ],
    "ea4fdc5ca1cf4568b300810db0eaa9e2": [
        "def solution():\n    ans = 180 - (9 * 6) - (7 * 6)\n    return ans\n\nans = solution()"
    ],
    "4ceaa57063624f489d2a91560349d225": [
        "from math import factorial\n\ndef solution():\n    total_cards = 4 + 3 + 7  # Total number of cards\n    yellow_cards = 4  # Number of yellow cards\n    red_cards = 3    # Number of red cards\n    green_cards = 7  # Number of green cards\n    \n    # The total number of permutations with repetitions\n    total_permutations = factorial(total_cards) \\\n        // (factorial(yellow_cards) * factorial(red_cards) * factorial(green_cards))\n        \n    return total_permutations\n\nans = solution()"
    ],
    "111ec186a6084484b7572731bc3bcb77": [
        "def solution():\n    count = 0\n    # 1-9 have one digit each\n    count += 9 * 1\n    # 10-99 have two digits each\n    count += (99 - 10 + 1) * 2\n    # 100-268 have three digits each\n    count += (268 - 100 + 1) * 3\n\n    return count\n\nans = solution()"
    ],
    "6dff7252335c45c0a2fdec728a95565a": [
        "def solution():\n    from math import gcd\n    \n    width = 136  # Width in cm\n    height = 80  # Height in cm\n    \n    # Calculate the greatest common divisor of width and height\n    square_side = gcd(width, height)\n    \n    # Calculate how many squares we can cut\n    number_of_squares = (width // square_side) * (height // square_side)\n    \n    return number_of_squares\n\nans = solution()"
    ],
    "006665a313c24b1a92752af5e31bc16a": [
        "def solution():\n    count = 0\n    for i in [4, 5, 7]:\n        for j in [4, 5, 7]:\n            for k in [4, 5, 7]:\n                if (i * 100 + j * 10 + k) % 2 != 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "a49805b294c44372af6c664415044e6a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the initial amount of lollipops as L and gum drops as G\n    L, G = symbols('L G')\n\n    # The initial ratio of lollipops to gum drops is 5:7\n    equation1 = Eq(L/G, 5/7)\n    \n    # After adding 120 pieces to both,\n    # the new ratio of lollipops to gum drops is 4:5\n    equation2 = Eq((L + 120)/(G + 120), 4/5)\n\n    # Solve for L and G\n    solutions = solve((equation1, equation2), (L, G))\n\n    # Calculate the total number of candies now, which is the sum\n    # of the new amounts of lollipops and gum drops.\n    total_candies_now = solutions[L] + 120 + solutions[G] + 120\n\n    return total_candies_now\n\nans = solution()"
    ],
    "b8665b34ac3a4d59aa8061f1eb6eec07": [
        "def solution():\n    ans = 854 * 100\n    return ans\n\nans = solution()"
    ],
    "22718af89a8243c19613574db590d256": [
        "def solution():\n    count_div_5 = (201-1) // 5\n    count_div_7 = (201-1) // 7\n    count_div_5_and_7 = (201-1) // (5*7)\n\n    ans = count_div_5 + count_div_7 - count_div_5_and_7\n    return ans\n\nans = solution()"
    ],
    "5cd17b7047fd44e184eb28205a77c263": [
        "def solution():\n    from math import factorial\n    from sympy import symbols, Eq, solve\n\n    # Let n be the number of teams\n    n = symbols('n')\n\n    # Each team plays n - 1 other teams twice, and each match involves 2 teams\n    equation = Eq(n * (n - 1), 30 * 2)\n\n    # Solve for number of teams\n    teams = solve(equation, n)\n\n    # Since the number of teams cannot be negative, we take the positive solution\n    ans = [t for t in teams if t > 0]\n\n    return ans[0]\n\nans = solution()"
    ],
    "4ea645a34f3a435db4d0fc57a7f2a099": [
        "def solution():\n    ans = sum([i if i % 2 == 0 else -i for i in range(1, 101)])\n    return ans\n\nans = solution()"
    ],
    "092c73eab03d47ef9afdbfaf1c46b4ee": [
        "def solution():\n    for i in range(1, 1000):\n        if i - (i * 10) == -135:\n            return i\n\nans = solution()"
    ],
    "88c5dedae77f46f589b56a149633c09c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote d, p, and w as the costs of a durian, a pineapple, and a watermelon respectively.\n    d, p, w = symbols('d p w')\n\n    # Chris's purchase: 1 durian, 2 pineapples, 3 watermelons = $440\n    # Dylan's purchase: 4 durians, 6 pineapples, 9 watermelons = $1625\n\n    # Writing the equations based on the purchases:\n    # Chris -> d + 2p + 3w = 440\n    # Dylan -> 4d + 6p + 9w = 1625\n\n    # These would give us two equations:\n    equation1 = Eq(d + 2*p + 3*w, 440)\n    equation2 = Eq(4*d + 6*p + 9*w, 1625)\n\n    # Now we can use the solve function to solve these two linear equations\n    solutions = solve((equation1, equation2), (d, p, w))\n\n    # We return the cost of one durian\n    return solutions[d]\n\nans = solution()"
    ],
    "f5082b520e464b9a9b6f7696942bc7de": [
        "def solution():\n    result = (10 + 1/20 + (3 - 0.85) / (5/6)) / 505.2\n    return result\n\nans = solution()"
    ],
    "859adbbe512546a0b75ae0bf0e8f181d": [
        "def solution():\n    students = 37\n    capacity = 5\n\n    if students % capacity == 0:\n        trips = students // capacity\n    else:\n        trips = (students // capacity) + 1\n\n    # Each trip requires a return trip, except the last one.\n    # Each return trip subtracts one, since the boat does not return empty.\n    trips += (trips - 1)\n\n    return trips\n\nans = solution()"
    ],
    "77ba726662b34445bc8b3b0c966cb3ac": [
        "def solution():\n    return (49 * 57) + 7\n\nans = solution()"
    ],
    "5b9cd44e2a8d46b2b9f5c8533ec96089": [
        "def solution():\n    A_percentage = 0.80   # 80% chose Grade A Math\n    B_percentage = 0.35   # 35% chose Grade B Math\n    neither_percentage = 0.10   # 10% chose neither\n    both_count = 75   # 75 students chose both Grade A and B Math\n\n    # Use the Inclusion-Exclusion Principle\n    # Total = A + B - Both + Neither\n    # Let the total number of students be x\n    # x = A_percentage*x + B_percentage*x - both_count + neither_percentage*x\n    # x - A_percentage*x - B_percentage*x - neither_percentage*x = both_count\n    # x * (1 - A_percentage - B_percentage - neither_percentage) = both_count\n    \n    total_students = both_count / (1 - A_percentage - B_percentage - neither_percentage)\n    return int(total_students)\n\nans = solution()"
    ],
    "77c2ba769a7047048ada0b99188fd52a": [
        "def solution():\n    return 3 * 100 + 2 * 10 + 7\n\nans = solution()"
    ],
    "3afaef15c6e14038b0ae9b8cc73f4661": [
        "def solution():\n    return -7 + -3\n\nans = solution()"
    ],
    "5a33774640ef42fbb9d5c0f6fadf05ae": [
        "from math import factorial\n\ndef solution():\n    num = factorial(100)\n    denom = factorial(99) + factorial(98)\n    \n    ans = num / denom\n    return ans\n\nans = solution()"
    ],
    "b17c4c6265e04390be67da9c493fc323": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    frank, alex, paul = symbols('frank alex paul')\n\n    equation1 = Eq(frank - alex, alex - paul)  # Frank is older than Alex by the same number of years that Alex is older than Paul\n    equation2 = Eq(frank + alex + paul, 99)  # The sum of their ages is 99\n\n    # Solving the equations simultaneously to find the value of Alex's age.\n    solutions = solve((equation1, equation2), (frank, alex, paul))\n\n    return solutions[alex]\n\nans = solution()"
    ],
    "998af0079c4247a1989e0807c81a7b0b": [
        "def solution():\n    from itertools import combinations, permutations\n\n    # Generate all possible combinations of 9 numbers from 1 to 13\n    all_combinations = combinations(range(1, 14), 9)\n\n    # Function to calculate the number of distinct factors of a number\n    def num_factors(n):\n        return sum(n % i == 0 for i in range(1, n + 1))\n\n    # Iterate over each combination to find the one that satisfies the conditions\n    for combination in all_combinations:\n        # Sort the chosen numbers to easily find the adjacent values (May's conditions)\n        sorted_combination = sorted(combination)\n        # Find all permutations of the sorted numbers to check each student's perspective\n        for perm in permutations(sorted_combination):\n            # Find the factors for each number\n            factors_count = [num_factors(n) for n in perm]\n            # Check the condition: Two students know the count of their number's factors\n            if factors_count.count(factors_count[0]) == 1:\n                # The two students with unique factor counts are the ones raising hands\n                idx_hand_raise = [i for i, count in enumerate(factors_count) if factors_count.count(count) == 1]\n                # If the difference in counts is 1 and their numbers are consecutive, it means Alice can speak\n                for i, idx in enumerate(idx_hand_raise):\n                    alice_index = idx_hand_raise[i]\n                    oth_index = idx_hand_raise[1 - i]\n                    if (perm[alice_index] % 2 == 1  # Alice knows her number is odd\n                        and abs(factors_count[alice_index] - factors_count[oth_index]) == 1  # Unique factor counts\n                        and (perm[oth_index] == perm[alice_index] - 2  # May's number is Alice's - 2\n                            or perm[oth_index] == perm[alice_index] + 2)):  # or Alice's number is May's - 2\n                        # Find the four numbers that were not picked\n                        unpicked_numbers = set(range(1, 14)) - set(combination)\n                        # Return the product of the unpicked numbers\n                        return eval('*'.join(str(num) for num in unpicked_numbers))\n\nans = solution()"
    ],
    "8a24c57fe2014f94b5b8a95629a79a2d": [
        "def solution():\n    from itertools import permutations\n    \n    all_numbers = list(permutations([1, 4, 6, 9]))\n    sum_numbers = sum(int(''.join(map(str, num))) for num in all_numbers)\n    average = sum_numbers / len(all_numbers)\n\n    return average\n\nans = solution()"
    ],
    "1820577397204c509b1907b2ea4c2a5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(boys - 60, 2 * (girls - 12))\n    equation2 = Eq(boys, girls)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "4a286a0dcf7a4ca5a4d61c7e63b2cb90": [
        "def solution():\n    for tens in range(10):\n        for ones in range(10):\n            if tens + ones == 15 and tens != ones and tens != 9 and ones != 9 and ones % 2 == 0:\n                return 900 + tens * 10 + ones\n\nans = solution()"
    ],
    "6a4c9fce03a84201b80dea6e9a6cd7cf": [
        "def solution():\n    bowls_per_jug = 3\n    jugs_per_pail = 2\n\n    bowls_per_pail = bowls_per_jug * jugs_per_pail\n\n    return bowls_per_pail\n\nans = solution()"
    ],
    "39bfd666abde40ed9ef0dbeb23faa055": [
        "def solution():\n    short_rope = 20\n    long_rope = 5 * short_rope\n    total_length = short_rope + long_rope\n    return total_length\n\nans = solution()"
    ],
    "959efbb55d9940c8a07132d59f0420ff": [
        "def solution():\n    van_speed = 80 # km/h\n    car_speed = 120 # km/h\n    start_difference = van_speed * 3 # van has a 3 hour lead\n\n    relative_speed = car_speed - van_speed\n    time_to_catch_up = start_difference / relative_speed\n\n    return time_to_catch_up\n\nans = solution()"
    ],
    "eba97ef5f84146c19418485d0ecbe151": [
        "from itertools import combinations\n\ndef solution():\n    hat_options = [0] + list(combinations(range(4), 1)) + list(combinations(range(4), 2)) + \\\n                   list(combinations(range(4), 3)) + list(combinations(range(4), 4))\n    # Each shirt, pair of pants, and the skirt must be included: 3 shirts, 2 pairs of pants, 1 skirt\n    # so just multiply the hat options by the total count of shirts, pants, and skirts\n    return len(hat_options) * 3 * 2 * 1\n\nans = solution()"
    ],
    "93563e24dcde4ff39e2fadedcde819a3": [
        "def solution():\n    from fractions import Fraction\n\n    # 0.010101... in fraction form can be represented as 1/99\n    num1 = Fraction(1, 99)\n    \n    # Squaring this number gives the product of two recurring decimals\n    product = num1 ** 2\n    \n    # Calculate the repetend of the product\n    repetend = product.denominator\n\n    # Count the number of digits in one repetend\n    ans = len(str(repetend)) - 2  # Subtract 2 to account for '99' prefix in denominator\n\n    return ans\n\nans = solution()"
    ],
    "689ae8da46554adf826beb1a55700c76": [
        "def solution():\n    # Printer A's rate per minute\n    rate_A = 300 / 12\n    # Printer B's rate per minute\n    rate_B = 300 / 10\n    # Combined rate per minute\n    combined_rate = rate_A + rate_B\n    # Total time in minutes (0.5 hour * 60 minutes/hour)\n    time_minutes = 0.5 * 60\n    # Pages printed by both printers in the given time\n    pages_printed = combined_rate * time_minutes\n    return int(pages_printed)\n\nans = solution()"
    ],
    "d559f399083a49ba9b8396e4af839356": [
        "def solution():\n    return 72 * 43\n\nans = solution()"
    ],
    "993780e2460e4c75a69e44c4d42adb9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_items = symbols('total_items')\n    # Based on the problem statement\n    apples = 2/3 * total_items\n    bananas = 1/9 * total_items\n    lemons = total_items - apples - bananas\n    # Apples are 12 more than lemons\n    equation = Eq(apples - lemons, 12)\n\n    total_items_solution = solve(equation, total_items)\n    lemons_count = lemons.subs(total_items, total_items_solution[0])\n\n    return lemons_count\n\nans = solution()"
    ],
    "2a4b4cb16018411e860c36a08fa77b24": [
        "def solution():\n    count = 0\n    for month in range(1, 13):\n        for day in range(1, 32):\n            if month == 2 and day > 28:\n                continue\n            if month in [4, 6, 9, 11] and day > 30:\n                continue\n            date = f'{day:02d}/{month:02d}/2019'\n            count += date.count('3')\n    return count\n\nans = solution()"
    ],
    "adc0111f2b2c4d378ae08bcd6ee30b74": [
        "def solution():\n    ans = 33033\n    return ans\n\nans = solution()"
    ],
    "de32aa63739340c1b48d956920574cde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of durian, chocolate and strawberry puffs\n    durian, chocolate, strawberry = symbols('durian chocolate strawberry') \n\n    # Set up the equations based on the problem statement\n    # Ratio equation: 3 durian = 4 chocolate = 2 strawberry\n    equation1 = Eq(durian/3, chocolate/4)\n    equation2 = Eq(chocolate/4, strawberry/2)\n\n    # Price equation: 5*durian + 3*chocolate + 4*strawberry = 560\n    equation3 = Eq(5*durian + 3*chocolate + 4*strawberry, 560)\n\n    # Use sympy's solve function to find the number of durian, chocolate, and strawberry puffs\n    solutions = solve((equation1, equation2, equation3), (durian, chocolate, strawberry))\n\n    # Amount collected from the sale of durian puffs is the number of durian puffs multiplied by its price\n    amount_from_durian = solutions[durian] * 5\n\n    return amount_from_durian\n\nans = solution()"
    ],
    "bbf5395114fa4ebba02cabdc25eef45a": [
        "def solution():\n    # Since the cuboid is cut into 490 small cubes of equal size,\n    # and the dimensions of the cuboid are 7x5x14, each small cube's size\n    # must be 1x1x1 (since 7*5*14 = 490).\n\n    # The small cubes with exactly three faces painted are the ones\n    # at the eight vertices of the original cuboid.\n    # There is only one cube at each vertex with three painted faces.\n\n    # Therefore, there are 8 cubes with exactly three faces painted.\n\n    return 8\n\nans = solution()"
    ],
    "92b5600f34c745cc9d5dd15bf5842acc": [
        "def solution():\n    # Iterate through all two digit numbers\n    for original in range(10, 100):\n        # Swap the digits\n        swapped = int(str(original)[1] + str(original)[0])\n        # Check if the condition is met\n        if swapped == (original // 3) + 3:\n            return original\n\nans = solution()"
    ],
    "64b747db943b470e8d5bcc4cd037f8bc": [
        "def solution():\n    initial_investment = 10000\n    first_rate = 1.191\n    second_rate = 1.166\n\n    final_amount = initial_investment * first_rate * second_rate\n    return round(final_amount, 2)\n\nans = solution()"
    ],
    "9ec93e5371534d979ad30c4708659ad9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the levels of the apartments where A, B, C, D, Zachary, Yvonne, Xavier, Waylon stay as a, b, c, d, z, y, x, w respectively\n    a, b, c, d, z, y, x, w = symbols('a b c d z y x w')\n\n    # Given conditions\n    # (1) A stays in an unit that is located higher than C, but lower than D\n    con1 = Eq(a > c, True) & Eq(a < d, True)\n\n    # (2) B stays in an unit that is lower than Xavier's unit\n    con2 = Eq(b < x, True)\n\n    # (3) D stays in an unit that is 5 times Yvonne's unit\n    con3 = Eq(d, 5 * y)\n\n    # (4) If Zachary moves to two level above his unit, the difference in level between his unit and Xavier's unit\n    # is equal to the difference of his unit with Waylon's unit.\n    con4 = Eq(z + 2 - x, z + 2 - w)\n\n    # (5) The level that Zachary stays is the sum of the level Yvonne and Xavier stay.\n    con5 = Eq(z, y + x)\n\n    # Let's not forget the levels are within the range of the building\n    con_range = (a > 0) & (a <= 18) & (b > 0) & (b <= 18) & (c > 0) & (c <= 18) & (d > 0) & (d <= 18) & \\\n                (z > 0) & (z <= 18) & (y > 0) & (y <= 18) & (x > 0) & (x <= 18) & (w > 0) & (w <= 18)\n\n    # Solving the system of equations and inequalities\n    res = solve((con1, con2, con3, con4, con5, con_range), (a, b, c, d, z, y, x, w), dict=True)\n\n    # Filter the solutions to find the suitable one (integer levels only)\n    for sol in res:\n        if all(sol[val] > 0 and sol[val] <= 18 and sol[val].is_integer for val in [a, b, c, d]):\n            return sol[a]\n\nans = solution()"
    ],
    "97e7c5c45535473c925714e02efb350b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of a raisin roll and a donut\n    raisin_roll, donut = symbols('raisin_roll donut')\n\n    # Create the equations based on the problem statement\n    # 5 raisin rolls + 6 donuts = 14.70\n    equation1 = Eq(5 * raisin_roll + 6 * donut, 14.70)\n    # Each raisin roll costs 3 times as much as each donut\n    equation2 = Eq(raisin_roll, 3 * donut)\n\n    # Solve the system of equations for the cost of raisin_roll and donut\n    solutions = solve((equation1, equation2), (raisin_roll, donut))\n\n    # Return the cost of a raisin roll\n    return solutions[raisin_roll]\n\nans = solution()"
    ],
    "a72c43c3bde841a3810fb516a1d277f4": [
        "def solution():\n    from math import gcd\n\n    # Given numbers of students from each school\n    students_school_1 = 24\n    students_school_2 = 36\n    students_school_3 = 42\n\n    # Computing the greatest common divisor of the three numbers\n    gcd_pair = gcd(students_school_1, students_school_2)\n    greatest_common_divisor = gcd(gcd_pair, students_school_3)\n    \n    return greatest_common_divisor\n\nans = solution()"
    ],
    "beed278a1bed4c50a92eafa931245d88": [
        "def solution():\n    ans = 200 - 100 / 5 + 200\n    return ans\n\nans = solution()"
    ],
    "c0de10f834e9467fb65b332409f0b795": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n\n    # Given equations\n    equation1 = Eq(3*notebook + 4*pencil_case + 5*eraser, 50)\n    equation2 = Eq(notebook + pencil_case, 6)\n    equation3 = Eq(pencil_case + eraser, 9)\n\n    # Solve equations\n    solutions = solve((equation1, equation2, equation3), (notebook, pencil_case, eraser))\n\n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "d16475774e2d40e298ca4d00de004671": [
        "def solution():\n    # The sum of an arithmetic sequence S_n = n/2 * (2a + (n - 1)d)\n    # Where S_n is the sum of first n terms, a is the first term, d is the common difference and n is the number of terms\n    # We have S_9 = 99 and S_27 = 540\n    # Being S_9 = 9/2 * (2a + (9 - 1)d) = 99 and\n    # S_27 = 27/2 * (2a + (27 - 1)d) = 540, we can solve for a and d\n    \n    from sympy import symbols, Eq, solve\n    \n    a, d = symbols('a d')  # a is the first term and d is the common difference\n    \n    # Create two equations based on the given sum information\n    equation1 = Eq(9/2 * (2*a + 8*d), 99)\n    equation2 = Eq(27/2 * (2*a + 26*d), 540)\n    \n    # Solve the system of equations for a and d\n    solutions = solve((equation1, equation2), (a, d))\n    \n    a_val = solutions[a]\n    d_val = solutions[d]\n    \n    # Now, calculate the sum of the first 16 terms\n    S_16 = 16/2 * (2*a_val + (16 - 1)*d_val)\n    \n    return S_16\n\nans = solution()"
    ],
    "907abf99743b45bcb21f5e10053628da": [
        "def solution():\n    count = 0\n    for hundreds in range(1,10):\n        for tens in range(1,10):\n            for units in range(1,10):\n                if hundreds % tens == 0 and hundreds % units == 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "f026bb192f0f4088a86ad13d7cc26d86": [
        "from itertools import permutations\n\ndef solution():\n    digits = '458'\n    perms = permutations(digits)\n    return len(list(perms))\n\nans = solution()"
    ],
    "9626ae3648b54685b675bed33b248975": [
        "def solution():\n    loafs_per_cup = 6 / 5\n    required_loafs = 24\n    cups_needed = required_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "2989d3782ec842dcb36b4a949d8588db": [
        "def solution():\n    total_people = 216\n    teachers = 139\n    children = total_people - teachers\n    return children\n\nans = solution()"
    ],
    "d26a5497d6514135ba9d0ea0f54b8bb4": [
        "def solution():\n    digits = 0\n    for number in range(7, 41):\n        digits += len(str(number))\n    return digits\n\nans = solution()"
    ],
    "26c05d1067be4f228420a8d03d60d1f1": [
        "def solution():\n    time_in_minutes = 60\n    \n    # Calculate the Least Common Multiple (LCM) of the two frequencies\n    red_light_frequency = 4\n    green_light_frequency = 6\n    \n    lcm = (red_light_frequency * green_light_frequency) // math.gcd(red_light_frequency, green_light_frequency)\n    \n    # Calculate how many times they flash at the same instant per minute\n    flashes_per_minute = lcm // red_light_frequency\n    \n    # Calculate the total number of same flashes in one hour\n    same_flashes_in_one_hour = flashes_per_minute * time_in_minutes\n    \n    return same_flashes_in_one_hour\n\nimport math\nans = solution()"
    ],
    "bd83c15a08c149f196a2f6caf1bec626": [
        "def solution():\n    # Let x be the number that you're thinking of\n    # According to the problem statement: 3 * x + 1 = 22\n    # We solve for x by performing the inverse operations\n    x = (22 - 1) / 3\n    return int(x)\n\nans = solution()"
    ],
    "d495a6229050459d9704caa6c86a306f": [
        "def solution():\n    # Group stage games: C(4, 2) combinations for each of the 8 groups\n    group_games = 8 * 6  # each group has 4 teams, 6 matches in round-robin\n\n    # Knockout stage games: the round of 16, quarter-finals, semi-finals, third place, and final\n    knockout_games = 16 // 2 + 8 // 2 + 4 // 2 + 2 // 2 + 1  # from top 16 to the final\n\n    total_games = group_games + knockout_games\n\n    return total_games\n\nans = solution()"
    ],
    "e70904d7218642df8d9ac82e9cbb1818": [
        "def solution():\n    total_numbers = 12 * 12  # Total numbers when she finishes writing all the 12's\n\n    # find the exact position of the median (m1 for first if it's odd, m1 and m2 if the count is even)\n    m1, m2 = (total_numbers // 2, total_numbers // 2 + 1) if total_numbers % 2 == 0 else (total_numbers // 2 + 1, total_numbers // 2 + 1)\n    \n    count = 0\n    median = 0\n\n    # iterate through the sequence by incrementing each number as many times as its value\n    for i in range(1, 13):  # from 1 to 12\n        count += i\n        if m1 <= count:\n            median = i\n            break\n    \n    return median\n\nans = solution()"
    ],
    "8a316589158f4d3da421f3970c3ae486": [
        "def solution():\n    total_volume = 60 + 780  # Rose syrup volume + water volume\n    max_volume_per_glass = total_volume // 9  # Find greatest integer volume that can be poured into each glass equally\n\n    return max_volume_per_glass\n\nans = solution()"
    ],
    "b89d2244ef89497f80cc165487752747": [
        "def solution():\n    total_paintings = 120\n    landscapes = int(total_paintings * 0.4)\n    french_landscapes = 25\n    french_paintings = 40\n    still_lifes = total_paintings - landscapes\n    non_french_paintings = total_paintings - french_paintings\n    non_french_still_lifes = still_lifes - (french_paintings - french_landscapes)\n\n    return non_french_still_lifes\n\nans = solution()"
    ],
    "c347b5871cff46138c8d8bcabd9edb4d": [
        "def solution():\n    speed_m_per_min = 24\n    time_seconds = 300\n    time_minutes = time_seconds / 60\n    distance = speed_m_per_min * time_minutes\n    return distance\n\nans = solution()"
    ],
    "93719c34b1574999936ad00f94cad2e8": [
        "def solution():\n    ans = 30.03 - 3.3\n    return ans\n\nans = solution()"
    ],
    "e847f4218f9d4d7db291515e8c3a7f1e": [
        "def solution():\n    total_hay_units = 12 * 15  # total number of horse-days the pile of hay lasts\n    days_for_20_horses = total_hay_units / 20\n\n    return days_for_20_horses\n\nans = solution()"
    ],
    "dc48d7be2274447aa61b412cef4e1d7b": [
        "def solution():\n    rice_in_first_mix = 100 * 0.50\n    rice_in_second_mix = 400 * 0.80\n    total_rice = rice_in_first_mix + rice_in_second_mix\n    total_dogfood = 100 + 400\n    concentration_of_rice = total_rice / total_dogfood\n    return round(concentration_of_rice * 100, 2)\n\nans = solution()"
    ],
    "25e1b3f1ea544f5fb040500722f553f5": [
        "def solution():\n    # The sum S can be represented by\n    # S = 2 + 22 + 222 + 2222 + ... + 222...222 (2017 twos)\n    # We can calculate the last 5 digits of each term and sum them\n    # Since we are only interested in the last 5 digits, we can mod each term by 100000\n    \n    mod_value = 100000\n    current_number = 0\n    total_sum = 0\n    \n    for i in range(2017):\n        current_number = (current_number * 10 + 2) % mod_value\n        total_sum = (total_sum + current_number) % mod_value\n    \n    return total_sum\n\nans = solution()"
    ],
    "8f71ad4877d946aca5623bd2c5a1ffd9": [
        "def solution():\n    for d1 in range(1, 10):  # first digit cannot be 0\n        for d2 in range(0, 10):\n            for d3 in range(0, 10):\n                for d4 in range(0, 10):\n                    house_number = d1*1000 + d2*100 + d3*10 + d4\n                    new_number = d2*1000 + d3*100 + d4*10 + d1\n                    if new_number - house_number == 4707:\n                        return house_number\n\nans = solution()"
    ],
    "4c625760244c484b9b010ff513d7aacb": [
        "def solution():\n    ans = 6.67 + 5.93\n    return ans\n\nans = solution()"
    ],
    "e8ea378d2e224df88c51e8df519dd96a": [
        "def solution():\n    numbers = [0.0099, 0.81, 1.2, 0.087, 1.21]\n    closest_number = min(numbers, key=lambda x: abs(x-1))\n    return closest_number\n\nans = solution()"
    ],
    "7181abe12a9441efa29c9b6450170e13": [
        "def solution():\n    # Let x be the number of years later\n    # Oliver's age x years later will be 20 + x\n    # Lin's age x years later will be 26 + x\n    # The sum of their ages will be (20 + x) + (26 + x)\n\n    # We have the equation (20 + x) + (26 + x) = 48\n    # Simplifying, we get 2x + 46 = 48\n    # Solving for x, we obtain 2x = 48 - 46\n    # So x = 2 / 2\n    x = (48 - 46) // 2\n\n    return x\n\nans = solution()"
    ],
    "41c299f84c8e465ab37555ce3abe8dbd": [
        "def solution():\n    sandra_age_now = 8\n    mother_age_now = 4 * sandra_age_now\n    \n    sandra_age_2_years_ago = sandra_age_now - 2\n    mother_age_2_years_ago = mother_age_now - 2\n\n    age_difference = mother_age_2_years_ago - sandra_age_2_years_ago\n\n    return age_difference\n\nans = solution()"
    ],
    "44be0754c9694d719af9a93c29de6a7f": [
        "from itertools import product\n\ndef solution():\n    other_digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n    # Find all combinations of other digits that sum up to 35 minus the sum of the digits in '35'.\n    possible_combinations = product(other_digits, repeat=6)\n    valid_combinations = [comb for comb in possible_combinations if sum(comb) == 35 - 8]\n\n    for comb in valid_combinations:\n        possible_number = int(\"\".join(map(str, comb)) + \"35\")\n        if possible_number % 35 == 0:\n            return possible_number\n\nans = solution()"
    ],
    "af1991b7f84d4f62aaf6b6878cddfe02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    y = symbols('y')\n    total_money = 8 * y\n    watch_price = 4 * y\n    handbag_price = 20\n    child_money = 2 * (y - 5)\n\n    # Equation representing total spending and distribution of money\n    equation = Eq(watch_price + handbag_price + child_money, total_money)\n\n    # Solve for y\n    solution = solve(equation, y)\n\n    return solution[0]\n\nans = solution()"
    ],
    "42c5c84cc6f5475fbadec4fb054ea542": [
        "def solution():\n    total_days = 0\n    leap_years = 0\n\n    for year in range(1901, 2000):\n        if (year % 4 == 0):\n            leap_years += 1\n\n    total_days = (99 - leap_years) * 365 + leap_years * 366\n\n    # Including the last day, 1st January 2000\n    total_days += 1\n\n    return total_days\n\nans = solution()"
    ],
    "99f53a3e706d464e97e730165f364f49": [
        "def solution():\n    total_days = 15\n    initial_amount = 100\n    deposit_amount = 10\n    spend_amount = 8\n    cycle_days = 2  # deposit on one day, spend on the next\n\n    # Calculate complete cycles\n    complete_cycles = total_days // cycle_days\n    remaining_days = total_days % cycle_days\n\n    # Compute the net amount after complete cycles\n    net_amount_per_cycle = deposit_amount - spend_amount\n    net_after_cycles = net_amount_per_cycle * complete_cycles\n\n    # Compute the amount for the remaining days\n    remaining_amount = 0\n    if remaining_days > 0:\n        remaining_amount = deposit_amount\n\n    # Total amount after 15 days\n    total_amount = initial_amount + net_after_cycles + remaining_amount\n\n    return total_amount\n\nans = solution()"
    ],
    "d079d30d875545e8b201477ce3c16428": [
        "def solution():\n    total_numbers = 99  # We only consider numbers less than 100\n    divisible_by_3 = total_numbers // 3\n    divisible_by_7 = total_numbers // 7\n    divisible_by_both = total_numbers // (3 * 7)\n\n    # Using Inclusion-Exclusion Principle\n    cannot_be_divided = total_numbers - (divisible_by_3 + divisible_by_7 - divisible_by_both)\n    return cannot_be_divided\n\nans = solution()"
    ],
    "f0ef1fefe9e4405cb773c5fc47ab6e50": [
        "def solution():\n    return 5.6 * 2.4\n\nans = solution()"
    ],
    "c4423db7405342c1aecbf4c4b4097957": [
        "def solution():\n    from math import gcd\n\n    ans = gcd(16, 28)\n\n    return ans\n\nans = solution()"
    ],
    "0ddcfdef95d9497987f43afbe170f9f1": [
        "def solution():\n    n = 12\n    sum_strikes = n * (n + 1) // 2\n    return sum_strikes\n\nans = solution()"
    ],
    "83396f638262415bb8e62a96478ffa20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the cost of each fruit\n    mango, pear, apple = symbols('mango pear apple')\n    \n    # Given equations based on the problem statement\n    equation1 = Eq(mango + pear, 3.40)\n    equation2 = Eq(mango + apple, 3.80)\n    equation3 = Eq(4*mango + 2*pear + apple, 13.20)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (mango, pear, apple))\n    \n    return solutions[mango]\n\nans = solution()"
    ],
    "fc18df7e18e04a7ba182dc1493c19ef1": [
        "def solution():\n    total_questions = 6\n    score_for_correct = 5\n    score_for_wrong = -2\n    total_score = 23\n\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        if correct_answers * score_for_correct + wrong_answers * score_for_wrong == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "b92d0cd587064c7195d1d5818981c69c": [
        "def solution():\n    weight_per_coin = 2.5  # weight of one ten-pence coin in grams\n    total_value = 40  # total value of the coins in pence\n    value_per_coin = 10  # value of one ten-pence coin in pence\n\n    number_of_coins = total_value / value_per_coin  # number of ten-pence coins\n\n    total_weight = number_of_coins * weight_per_coin  # total weight of the coins\n\n    return total_weight\n\nans = solution()"
    ],
    "2035192c81ab4e4ca4f6708f47f4638d": [
        "def solution():\n    total_people = 20\n    ratio_adults = 1\n    ratio_children = 4\n    ratio_sum = ratio_adults + ratio_children\n    num_adults = (ratio_adults / ratio_sum) * total_people\n    return int(num_adults)\n\nans = solution()"
    ],
    "2628cccb1cfe4903b268f7641a4ef75c": [
        "def solution():\n    total_candies = 35\n    total_children = 9\n    first_candy_seat = 3\n\n    last_candy_seat = (first_candy_seat + total_candies - 1) % total_children\n    if last_candy_seat == 0:\n        last_candy_seat = total_children\n\n    return last_candy_seat\n\nans = solution()"
    ],
    "21305df1a3f34c78b15a5895829b6b0e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    racket, ball = symbols('racket ball')\n    equation1 = Eq(racket + 3 * ball, 536)\n    equation2 = Eq(2 * racket + 3 * ball, 904)\n\n    solutions = solve((equation1, equation2), (racket, ball))\n\n    return solutions[racket]\n\nans = solution()"
    ],
    "13b8f82b60e940e09ee1f5cec6149d01": [
        "def solution():\n    numbers = [9, 12, 17, 18, 21, 23]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "e884adb0e6b040cdb2a34a42819fab4c": [
        "def solution():\n    ans = 30 + 30 * 30 + 30 * 30 * 30\n    return ans\n\nans = solution()"
    ],
    "f83ac99f77f44f1eb0edef1268dfc574": [
        "import math\n\ndef solution():\n    # Given values\n    initial_speed = 10  # in m/s\n    angle_degrees = 37  # angle in degrees\n    g = 9.81  # acceleration due to gravity in m/s^2\n\n    # Convert angle to radians for calculation\n    angle_radians = math.radians(angle_degrees)\n\n    # Using kinematic equation: h = v^2 * sin^2(θ) / (2 * g)\n    # where h is the height, v is the initial speed, θ is the angle, g is acceleration due to gravity\n    # Since the ramp is frictionless, we only consider the vertical component of the velocity\n    vertical_speed = initial_speed * math.sin(angle_radians)\n    \n    # Calculate the height (maximum height reached by the box)\n    height = (vertical_speed ** 2) / (2 * g)\n\n    # Calculate the distance along the ramp using the relationship between height and the sine of the angle\n    # distance = height / sin(θ)\n    distance = height / math.sin(angle_radians)\n\n    return height, distance\n\nans = solution()"
    ],
    "0dbf1ccfd2fc4007a533a919605fe57f": [
        "def solution():\n    players = 64\n    players_per_match = 4\n    \n    matches = 0\n    while players > 1:\n        matches += players // players_per_match\n        players = players // players_per_match\n        \n    return matches\n\nans = solution()"
    ],
    "8570bae0d8974f76bc97044f422b89b5": [
        "def solution():\n    # In the worst case scenario, Sheila could take out all the balls of the other two colors\n    # before getting 4 balls of the same color. So she might take out all 5 blue and all 4 orange\n    # before she starts getting yellow. So after 9 draws she is guaranteed to have 4 of a kind (yellow).\n    \n    # Then, she has 2 yellow and 1 blue left in the bag. To guarantee a next group of 4 of a kind,\n    # she needs to take the remaining 2 yellow balls and the last blue ball. That's 3 more draws.\n    # After that, she will start picking all orange balls, and after 4 total picks, she'll have\n    # 4 orange balls.\n    \n    # So the total is 9 (previous worst case) + 3 (to guarantee getting 2 yellow and 1 blue out)\n    # + 1 (to start getting the second group of orange balls) = 13.\n    return 13\n\nans = solution()"
    ],
    "2473e761fb61498e9259082d612f70e0": [
        "def solution():\n    ans = 2.5 * 24\n    return ans\n\nans = solution()"
    ],
    "17e5719cf1f44333aa04f4722862715a": [
        "def solution():\n    ans = 782 - 9 * 24 // 2\n    return ans\n\nans = solution()"
    ],
    "ae73ec11506148a9bdc9da9a59f4f805": [
        "def solution():\n    return sum([1, 3, 5, 95, 97, 99])\n\nans = solution()"
    ],
    "328cb846f149403d8585071dd7244539": [
        "def solution():\n    total_weight = 22\n    cheese_weight = 6\n    num_bags = 4\n\n    flour_weight = (total_weight - cheese_weight) / num_bags\n\n    return flour_weight\n\nans = solution()"
    ],
    "4109885176844bd28d5df4cb978b2199": [
        "def solution():\n    for d1 in range(1, 10):  # First digit can't be zero\n        for d2 in range(0, 10):  # Middle digits could be anything from 0-9\n            for d3 in range(0, 10):\n                for d4 in range(0, 10):\n                    original_number = d1 * 1000 + d2 * 100 + d3 * 10 + d4\n                    new_number = d4 * 1000 + d1 * 100 + d2 * 10 + d3\n                    if new_number - original_number == 4707:\n                        return original_number\n    return None\n\nans = solution()"
    ],
    "3ae9a5c1a17b4f1095105ce89b2df771": [
        "def solution():\n    # Assume the exchange rate is not given and is a fixed value defined within the function.\n    # For the purpose of this example, let's use a hypothetical exchange rate of:\n    # 1 British Pound (£) = 1.2 Euro (€) [This rate is fictional]\n    \n    # Price of one CD in pounds\n    price_in_pounds = 14\n    \n    # Exchange rate (Pounds to Euros)\n    exchange_rate = 1.2\n    \n    # Convert the price of one CD to Euros\n    price_in_euros = price_in_pounds * exchange_rate\n    \n    # Richard spends the same amount in Euros as the cost of a CD in Pounds\n    amount_in_euros = price_in_pounds * exchange_rate\n    \n    # Calculate the number of CDs Richard can buy in St Petersburg with his Euros\n    cds_bought = amount_in_euros // price_in_euros\n    \n    return int(cds_bought)\n\nans = solution()"
    ],
    "e8608d6fe45347b7a5f73ee97e718fe9": [
        "def solution():\n    return 168 * 91\n\nans = solution()"
    ],
    "50bc0ad9cea747f5b927172f53d8747a": [
        "def solution():\n    from sympy import isprime, primerange\n\n    # Possible ages check\n    possible_ages = [28, 39, 52, 84]\n\n    for age in possible_ages:\n        # Check if age - 3 is a perfect square\n        if (age - 3)**0.5 != int((age - 3)**0.5):\n            continue\n        \n        # Check if age + 1 is a prime number\n        if not isprime(age + 1):\n            continue\n        \n        # Check if age + 12 is a perfect cube\n        if round((age + 12)**(1/3))**3 != (age + 12):\n            continue\n\n        return age\n\nans = solution()"
    ],
    "0e1b4fc3bb9a4b798f86eca17838ecba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    james, nina = symbols('james nina')\n\n    # Total number of buttons\n    equation1 = Eq(james + nina, 22)\n\n    # After Nina gives James 4 buttons, they have the same number\n    equation2 = Eq(nina - 4, james + 4)\n\n    solutions = solve((equation1, equation2), (james, nina))\n\n    return solutions[nina]\n\nans = solution()"
    ],
    "34b8599fcad846d6b22ce1cb7e0d67e3": [
        "def solution():\n    # To guarantee two M&Ms of different colors,\n    # Bart must take at least one more than the number of M&Ms of the most plentiful color.\n    # In this case, there are 5 brown M&Ms, the most of any color.\n    # Therefore, Bart must take 5 (all brown) + 1 (to guarantee a non-brown M&M) = 6 M&Ms.\n    \n    num_MMs_needed = 5 + 1  # 5 is the number of brown M&Ms, the most plentiful\n    \n    return num_MMs_needed\n\nans = solution()"
    ],
    "a3f26b4b45934be08cf8676828e7ba57": [
        "def solution():\n    # The sum of an arithmetic sequence can be calculated using the formula:\n    # S_n = n/2 * (a_1 + a_n)\n    # where S_n is the sum of the first n terms, a_1 is the first term, and a_n is the nth term.\n    # We can also use the formula for the nth term of an arithmetic sequence:\n    # a_n = a_1 + (n - 1) * d\n    # where d is the common difference.\n    # Given S_9 = 72 and S_23 = 736, we have two equations:\n    # 72 = 9/2 * (2a_1 + 8d) and 736 = 23/2 * (2a_1 + 22d)\n    # simplifying, we get 16 = 2a_1 + 8d and 64 = 2a_1 + 22d\n    # Now we need to solve these two equations to find a_1 and d.\n\n    # Let's solve the equations:\n    # from the first equation: 8d = 16 - 2a_1\n    # from the second equation: 22d = 64 - 2a_1\n    # We can subtract the first equation from the second one to find d:\n    # 22d - 8d = (64 - 2a_1) - (16 - 2a_1)\n    # 14d = 48\n    # d = 48 / 14\n    d = 48 / 14\n    \n    # Now that we have d, we can use the first equation to find a_1:\n    # 8d = 16 - 2a_1\n    # 2a_1 = 16 - 8d\n    # a_1 = (16 - 8d) / 2\n    a_1 = (16 - 8 * d) / 2\n\n    # Now that we have a_1 and d, we can find the sum of the first 16 terms using the sum formula for an arithmetic series:\n    # S_16 = 16/2 * (a_1 + a_16)\n    # where a_16 = a_1 + (16 - 1) * d\n    a_16 = a_1 + (16 - 1) * d\n    S_16 = 16 / 2 * (a_1 + a_16)\n\n    return S_16\n\nans = solution()"
    ],
    "bc530cd877f2428bb79ffc956252f9b3": [
        "def solution():\n    # Ratio of speeds between Andrew and Bernice\n    andrew_to_bernice = 5 / 3\n    # Ratio of speeds between Bernice and Cassandra\n    bernice_to_cassandra = 6 / 10\n\n    # When Bernice reaches level 6, Andrew will be at level 6 * andrew_to_bernice\n    level_andrew = 6 * andrew_to_bernice\n\n    # When Cassandra is at level 10, Bernice is at level 6\n    # So, ratio of speeds between Andrew and Cassandra\n    andrew_to_cassandra = level_andrew / 10\n\n    # When Cassandra reaches level 19, Andrew will be at level 19 * andrew_to_cassandra\n    level_andrew_final = 19 * andrew_to_cassandra\n\n    return int(level_andrew_final)\n\nans = solution()"
    ],
    "ee25df77dbc84b5194bfbcc0c0bd215c": [
        "def solution():\n    def new_operation(a, b):\n        return a * b + a + b\n\n    # We have 2 'vee' (x 'vee' 4) = 59\n    # To find x, we need to solve the equation for x\n    # Let's denote x 'vee' 4 as y, so 2 'vee' y = 59\n    # Then, y = (59 - 2) / (2 + 1)\n    y = (59 - 2) // (2 + 1)\n\n    # Now, we need to solve for x given that x 'vee' 4 = y\n    # x * 4 + x + 4 = y\n    # x * 4 + x = y - 4\n    # x = (y - 4) / (4 + 1)\n    x = (y - 4) // (4 + 1)\n\n    return x\n\nans = solution()"
    ],
    "a7221d21ffb140cf886d39364cd7c81f": [
        "def solution():\n    ans = 43242 / 100\n    return ans\n\nans = solution()"
    ],
    "751fb35fe9d44a4db9f500a8a4b466c9": [
        "def solution():\n    pattern = \"234523452345\"\n    pattern_length = len(pattern)\n    total_length = 43\n    \n    # Compute sum of digits in one full pattern\n    sum_of_pattern = sum(int(digit) for digit in pattern)\n    \n    # Compute how many full patterns fit in the number\n    full_patterns = total_length // pattern_length\n    \n    # Compute the sum of digits in the full patterns\n    full_pattern_sum = sum_of_pattern * full_patterns\n    \n    # Compute the remaining digits that do not complete a full pattern\n    remaining_digits_sum = sum(int(pattern[i]) for i in range(total_length % pattern_length))\n    \n    # Total sum of all digits\n    total_sum = full_pattern_sum + remaining_digits_sum\n    return total_sum\n\nans = solution()"
    ],
    "0ace0cd817cf47d78db91f0ee0283a12": [
        "def solution():\n    kilometers = 4.7\n    centimeters_in_one_kilometer = 100000\n    centimeters = kilometers * centimeters_in_one_kilometer\n    return centimeters\n\nans = solution()"
    ],
    "43310de103274061a3f319f61ec706e8": [
        "def solution():\n    time_per_quiz_minutes = 30\n    total_quizzes = 4\n    total_time_minutes = time_per_quiz_minutes * total_quizzes\n    total_time_hours = total_time_minutes / 60\n    return total_time_hours\n\nans = solution()"
    ],
    "a44dbd04ca324e2dade754b21d81088b": [
        "def solution():\n    grandpa_age = 61\n    grandsons_ages = [4, 7, 12]\n    years = 0\n\n    while sum(grandsons_ages) != grandpa_age:\n        years += 1\n        grandpa_age += 1\n        grandsons_ages = [age + 1 for age in grandsons_ages]\n\n    return years\n\nans = solution()"
    ],
    "8e72117b5da04fdfb91ab3f9a9aab2cd": [
        ""
    ],
    "260fe91f8f7f438498be6c9fceaafc9b": [
        "def solution():\n    ways = 0\n    for five_p in range(0, 41, 5):\n        for ten_p in range(0, 41, 10):\n            if five_p + ten_p == 40:\n                ways += 1\n    return ways\n\nans = solution()"
    ],
    "b30c16550e45492986ba4327f062d606": [
        "def solution():\n    first_term = 50\n    common_difference = 46 - 50  # From the sequence provided, we can determine the common difference\n    term = first_term\n    number_of_terms = 0\n\n    while term > 0:\n        number_of_terms += 1\n        term += common_difference\n\n    return number_of_terms\n\nans = solution()"
    ],
    "84c4b5d7849c464193a6bad9277ea2b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the cost of one chair as 'c'\n    c = symbols('c')\n    \n    # Equation based on the problem statement\n    # 4 * (cost of a table) + 9 * (cost of a chair) = 504\n    # Cost of a table is equal to the cost of 3 chairs\n    equation = Eq(4 * (3 * c) + 9 * c, 504)\n\n    # Solving the equation for the cost of a chair\n    solutions = solve(equation, c)\n\n    # Returning the cost of each chair\n    return solutions[0]\n\nans = solution()"
    ],
    "95bcebc21d174c318350f0c2fd3955a3": [
        "def solution():\n    ans = 100 / 40\n    return ans\n\nans = solution()"
    ],
    "212dddf2d58c488f92051cac02b24a4d": [
        "def solution():\n    for num in range(100, 1000):\n        digits = [int(d) for d in str(num)]\n        product = 1\n        for d in digits:\n            product *= d\n        if 100 <= product <= 999:\n            return num\n\nans = solution()"
    ],
    "740a0eb88157475a86714273b6c58967": [
        "def solution():\n    flowers_count = 68\n    vase_capacity = 9\n    vases_needed = -(-flowers_count // vase_capacity)  # Ceiling division\n\n    return vases_needed\n\nans = solution()"
    ],
    "6a83a12baea34666bb5d5db02ee98315": [
        "def solution():\n    morning_fruit = 416\n    afternoon_fruit = 248\n    difference = morning_fruit - afternoon_fruit\n    return difference\n\nans = solution()"
    ],
    "ef74f31cad3e47e99a0e8f28fe1357b7": [
        "def solution():\n    first_multiple = (38 // 3) * 3\n    if first_multiple < 38:\n        first_multiple += 3\n    \n    last_multiple = (81 // 3) * 3\n    if last_multiple > 81:\n        last_multiple -= 3\n    \n    num_multiples = ((last_multiple - first_multiple) // 3) + 1\n\n    return num_multiples\n\nans = solution()"
    ],
    "dda1e4bf25b443da8efc70aaf2624bc4": [
        "def solution():\n    from math import lcm\n    return lcm(12, 15)\n\nans = solution()"
    ],
    "8eceffc0fa6b407998bd0ae271a1ef01": [
        "def solution():\n    # Calculate the sum of the increasing sequence\n    increasing_sum = sum(range(3, 11))\n    \n    # Calculate the sum of the decreasing sequence\n    decreasing_sum = sum(range(3, 7))\n    \n    # The decreasing part is counted twice: once in increasing and once in decreasing part\n    # So, we need to subtract it from the total sum\n    repeated_sum = decreasing_sum\n    \n    # The total sum would be the sum of the increasing sequence plus \n    # the sum of the decreasing sequence minus the repeated part\n    total_sum = increasing_sum + decreasing_sum - repeated_sum\n    \n    return total_sum\n\nans = solution()"
    ],
    "b216c4dcef5246b1a1032e1ce7b59830": [
        "def solution():\n    # Calculate each part of the expression separately\n\n    # First expression: 7 / -3.333... divided by cube root of -0.027\n    num1 = 7 / -3.3333333333333333\n    den1 = (-0.027) ** (1/3)\n    expr1 = num1 / den1\n\n    # Second expression: (2^3 / 4^2) divided by (0.125 * (1.8 - (0.2 * 7)))\n    num2 = (2**3) / (4**2)\n    den2 = 0.125 * (1.8 - (0.2 * 7))\n    expr2 = num2 / den2\n\n    # Third expression: 0.1 / 0.142857 (repeating) + (2 * 0.3)\n    num3 = 0.1 / 0.142857\n    expr3 = num3 + (2 * 0.3)\n\n    # Sum up all expressions\n    ans = expr1 + expr2 - expr3\n\n    return ans\n\nans = solution()"
    ],
    "7b05e8856130431fa24c3121679e2bb7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n    equation1 = Eq(pip, bud + 50)\n    equation2 = Eq((pip - 0.8 * pip) / (bud - 0.75 * bud), 6/5)\n\n    solutions = solve((equation1, equation2), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "0f28dcf2c6ad4abeb816c16558e621eb": [
        "def solution():\n    # Let x be the total number of mobile phones the shop had at first.\n    # After January, the number of phones left is x/2 - 22.\n    # After February, the number of phones left is (x/2 - 22)/2 - 13.\n    # 78 phones are left after February.\n    # Equation: ((x/2 - 22)/2 - 13) = 78\n    \n    # Let's solve for x.\n    x = (78 + 13) * 2 + 22 * 2\n    \n    return x\n\nans = solution()"
    ],
    "8601fccdea1547d8bdbea5b58f76c291": [
        "def solution():\n    three_sevenths_of_number = 18\n    number = (three_sevenths_of_number * 7) / 3\n    five_sixths_of_number = (number * 5) / 6\n    return five_sixths_of_number\n\nans = solution()"
    ],
    "3a1798bad2d541fcb5c6a144f4ce03cd": [
        "def solution():\n    players = 5\n    games_played = players - 1  # In a knockout tournament, each game eliminates one player\n\n    return games_played\n\nans = solution()"
    ],
    "eeedd7f61d3f499e91214241749f7193": [
        "def solution():\n    apples_initially = 5 * 9\n    apples_received = 16\n    total_apples = apples_initially + apples_received\n    return total_apples\n\nans = solution()"
    ],
    "4d8c3d77b070434f8e98c669130876ad": [
        "def solution():\n    red_packet_amount = 70\n    total_red_packets = 4\n    shortfall = 15\n\n    total_money = (red_packet_amount * total_red_packets) - shortfall\n\n    return total_money\n\nans = solution()"
    ],
    "297e8fe4a3fd48839219bc3a9649f928": [
        "def solution():\n    total_items = 438\n    difference = 50\n\n    # Let the number of pencils be x\n    # Then the number of pens will be x + difference\n    # And the total is x + (x + difference)\n\n    # To find x, we can write the equation as:\n    # 2x + difference = total_items\n    # Then solve for x:\n    pencils = (total_items - difference) // 2\n\n    return pencils\n\nans = solution()"
    ],
    "9d2c6f4e1357450eaed4a31c6237f2d2": [
        "def solution():\n    # Calculate the spending for each time period\n    jan_to_april = 500 * 4\n    may_to_july = 300 * 3\n    aug_to_sept = 400\n    oct_to_dec = 300 * 3\n    \n    # Total spending for the year\n    total_spending = jan_to_april + may_to_july + aug_to_sept + oct_to_dec\n    \n    # Total number of months in the year\n    total_months = 12\n    \n    # Calculate the average spending per month over the year\n    average_per_month = total_spending / total_months\n    \n    return average_per_month\n\nans = solution()"
    ],
    "252c59d9b9aa4aa9b64d371d39a82574": [
        "def solution():\n    # In a knockout tournament, each game played results in one player being eliminated\n    # until a winner is determined. With 5 people, the number of games needed will be\n    # one less than the number of people, since each game eliminates one participant.\n    \n    num_people = 5\n    games_played = num_people - 1\n\n    return games_played\n\nans = solution()"
    ],
    "51a7705457af49c88147499591a76612": [
        "def solution():\n    numbers = [19, 6, 12, 13, 21, 4, 8, 17]\n    return sum(numbers)\n\nans = solution()"
    ],
    "24ae47ec3af142b6a27136a41410c388": [
        "def solution():\n    count = 0\n    for i in range(4, 52):\n        count += str(i).count('3')\n        if i == 23:\n            ans = count\n    return ans\n\nans = solution()"
    ],
    "1383ca4e525041c99d8fa68660917e37": [
        "def solution():\n    position_from_front = 8\n    position_from_back = 10\n\n    total_shelves = position_from_front + position_from_back - 1\n\n    return total_shelves\n\nans = solution()"
    ],
    "1576b6692de34a408952ede9da9ad5ba": [
        "def solution():\n    from the_front = 7\n    from_the_back = 4\n    from_the_left = 3\n    from_the_right = 7\n    \n    total_rows = from_the_front + from_the_back - 1\n    total_columns = from_the_left + from_the_right - 1\n    \n    total_students = total_rows * total_columns\n    \n    return total_students\n\nans = solution()"
    ],
    "22303a6e166b42b9a7f52651f42185f7": [
        "def solution():\n    # Combined age 4 years ago\n    combined_age_4_years_ago = 10\n\n    # Each year the combined age of the dogs increases by 2 (1 year for each dog)\n    # 4 years ago + 4 years to now + 2 years into the future = 4 + 4 + 2 = 10 years difference\n\n    age_difference = 10\n    \n    # Calculate the combined age in 2 years\n    combined_age_in_2_years = combined_age_4_years_ago + age_difference * 2\n    \n    return combined_age_in_2_years\n\nans = solution()"
    ],
    "33067bcb25344c1d903a52e71d15db47": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of marbles each person originally had\n    anna, betsy, charlene = symbols('anna betsy charlene')\n\n    # Original total number of marbles\n    total_marbles = anna + betsy + charlene\n\n    # The situation after Charlene gave 15 marbles to Betsy\n    betsy_after_charlene = betsy + 15\n    charlene_after_charlene = charlene - 15\n\n    # The situation after Betsy gave 8 marbles to Anna\n    anna_final = anna + 8\n    betsy_final = betsy_after_charlene - 8\n\n    # The final ratio equation\n    ratio_eq = Eq(anna_final / betsy_final, 2/5) & Eq(anna_final / charlene_after_charlene, 2/7)\n\n    # The equation representing the original total number of marbles\n    total_eq = Eq(total_marbles, 168)\n\n    # Solve the system of equations\n    solutions = solve((total_eq, ratio_eq), (anna, betsy, charlene))\n\n    # Return the number of marbles Betsy had at first\n    return solutions[betsy]\n\nans = solution()"
    ],
    "06699a3607d9471db8f9ba87968896ad": [
        "def solution():\n    result = 3.5 * (4/5) + 5.5 * (80/100) + 0.8\n    return result\n\nans = solution()"
    ],
    "9ee836eb0a204a248346cf0a5a814237": [
        "def solution():\n    first_term = 8\n    nth_term = 140\n    n = 12\n    common_difference = (nth_term - first_term) / (n - 1)\n    return common_difference\n\nans = solution()"
    ],
    "399908c2f1ad4ee9a7c420afd356fe12": [
        "def solution():\n    from sympy import factorint\n\n    # Find the prime factorization of 2016\n    factors = factorint(2016)\n    \n    # Since the ages are all under 10, we must consider the factors of 2016 that are single digits\n    # These factors must be used to form the ages of four children with the product equal to 2016\n    # We will use a list of tuples to store the possible age combinations as (age1, age2, age3, age4)\n    possible_ages = []\n\n    # Iterate through selections of up to 3 factors at a time since the minimum possible age is 1\n    for f1 in factors:\n        for f2 in factors:\n            if f1 == f2:  # We need different ages, so skip if f1 and f2 are the same\n                continue\n            for f3 in factors:\n                if f3 in (f1, f2):  # Different ages, continue if f3 is the same as f1 or f2\n                    continue\n                child_1 = f1\n                child_2 = f2\n                child_3 = f3\n                child_4_product = 2016 // (child_1 * child_2 * child_3)\n                \n                # Check if child_4_product is an integer under 10\n                if 1 <= child_4_product < 10:\n                    current_ages = sorted([child_1, child_2, child_3, child_4_product])\n                    # Ensure children's ages are different using a set\n                    if len(set(current_ages)) == 4:\n                        possible_ages.append(tuple(current_ages))\n\n    # Filter out duplicates in the `possible_ages` list\n    unique_ages = set(possible_ages)\n\n    # Calculate the sum of ages for each unique combination\n    possible_sums = [sum(ages) for ages in unique_ages]\n    \n    # As the ages are different and unique, the sum will be the same for all the combinations.\n    # Hence, return the first sum from the list of possible sums.\n    ans = possible_sums[0]\n    \n    return ans\n\nans = solution()"
    ],
    "f58334bfc17f4a5ba758430811171cb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ten_pence = symbols('ten_pence')\n    twenty_pence = 2 * ten_pence\n    five_pence = ten_pence / 2\n    total_value = Eq(5 * five_pence + 10 * ten_pence + 20 * twenty_pence, 1575)  # value in pence\n\n    ten_pence_solution = solve(total_value, ten_pence)\n    \n    return twenty_pence.subs(ten_pence, ten_pence_solution[0])\n\nans = solution()"
    ],
    "98507f7a1ab04ff5987283dcfdf7b586": [
        "def solution():\n    # Let x be the original mass of the chocolate bar\n    x = 60 / (1 - 3/5)\n    return x\n\nans = solution()"
    ],
    "3c267ac100df422598b3c04374b84cda": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    equation1 = Eq(boys - 1, girls)  # each boy has as many sisters as brothers\n    equation2 = Eq(girls - 1, (boys / 2))  # each girl has half as many sisters as brothers\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return sum(solutions.values())\n\nans = solution()"
    ],
    "645e2eb6b0834d9c99a6e7716f19be7a": [
        "def solution():\n    ans = 29 + 6 * (40 - 28) / (34 - 22)\n    return ans\n\nans = solution()"
    ],
    "fffededa84664c688f626145cc4d0859": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    distance_first_30 = (x / 2)  # as distance = speed * time and time is 0.5 hours (30 minutes)\n    distance_second_30 = ((x - 20) / 2)\n    distance_third_30 = ((x + 10) / 2)\n\n    equation = Eq(distance_first_30 + distance_second_30 + distance_third_30, 70)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "2c96bab18bda4f58822aca3d954a2306": [
        "def solution():\n    first_term = 5\n    last_term = 131\n    difference = 11 - 5\n\n    num_students = ((last_term - first_term) // difference) + 1\n\n    return num_students\n\nans = solution()"
    ],
    "db4d028578d9467fa3efdfc0289ceb82": [
        "def solution():\n    sally = 8\n    kelvin = sally + 12\n    ivan = 2 * kelvin\n    return ivan\n\nans = solution()"
    ],
    "c92aa76e3e324a49ad94e03580521716": [
        "def solution():\n    base_10_number = 96\n    base_6_number = ''\n    \n    while base_10_number > 0:\n        base_6_number = str(base_10_number % 6) + base_6_number\n        base_10_number //= 6\n\n    ans = base_6_number\n    return ans\n\nans = solution()"
    ],
    "c7ffcb7a1eca4535a488e6da6a9364f7": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime.strptime(\"15/05/2023\", \"%d/%m/%Y\")\n    end_date = start_date + timedelta(weeks=3)\n    \n    return end_date.strftime(\"%d/%m/%Y\")\n\nans = solution()"
    ],
    "ae40978145f94c6f9996c9e966b8c97d": [
        "def solution():\n    total_cost = 6 * 5.50\n    tip = total_cost * 0.10\n    total_paid = total_cost + tip\n    change = 50 - total_paid\n    \n    return round(change, 2)\n\nans = solution()"
    ],
    "f8ccc3d1db7a464b831820a4451322ff": [
        "def solution():\n    seconds_per_minute = 60\n    return seconds_per_minute\n\nans = solution()"
    ],
    "29a8a89ddd5447e8affdeb65b7d6869b": [
        "def solution():\n    total = 0\n    n = 1\n    while True:\n        total += 5 * n\n        if total % 2013 == 0:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "a64f47165f93431bb686e430ed75deeb": [
        "def solution():\n    total_distance = 10\n    daily_climb = 4\n    nightly_slide = 2\n    distance_climbed = 0\n    day = 0\n\n    while distance_climbed < total_distance:\n        day += 1\n        distance_climbed += daily_climb\n        if distance_climbed >= total_distance:\n            break\n        distance_climbed -= nightly_slide\n\n    return day\n\nans = solution()"
    ],
    "54efb1f9d0924e1d8fa4596005959b2a": [
        "def solution():\n    return (6/7) * 42\n\nans = solution()"
    ],
    "caf23672c0554b8295549b932bf0889a": [
        "def solution():\n    ans = 953 + 1065\n    return ans\n\nans = solution()"
    ],
    "93da49e2550546f48b47327ef5577cd1": [
        "def solution():\n    # In order to have the maximum number of apples for the kid who gets the most be minimal,\n    # we should aim to distribute the apples as evenly as possible,\n    # but since each child must get a different number of apples, start by giving\n    # 1 apple to the first child, then 2 to the second, and so forth.\n    # So, the distribution starts off like: 1, 2, 3, 4, 5, ... and so on.\n    \n    # Calculate the total number of apples distributed in the initial even sequence\n    initial_apples = sum(range(1, 6))  # This is 1 + 2 + 3 + 4 + 5\n    \n    # Calculate the remaining apples after the initial distribution\n    remaining_apples = 27 - initial_apples\n    \n    # The remaining apples will be distributed starting from the kid with the most apples\n    # Since we have to give each child a different number of apples,\n    # we keep increasing the largest pile until we run out of remaining apples.\n    # The largest pile starts at 5 apples (for the 5th child)\n    \n    largest_pile = 5\n    \n    while remaining_apples > 0:\n        # Move on to the next pile\n        largest_pile += 1\n        # Decrease the count of remaining_apples\n        remaining_apples -= 1\n        \n        # If after giving an apple to the kid with the most,\n        # the remaining apples need to be distributed to the rest of the kids.\n        # We keep doing that in increasing order until we have no more remaining apples.\n        # Since the number has to be distinct, the smallest next increment is 1, \n        # so we repeat the end of the loop largest_pile - 4 times for each of the other kids,\n        # and keep decreasing remaining_apples each time.\n        for i in range(4):\n            if remaining_apples > 0:\n                remaining_apples -= 1\n    \n    return largest_pile\n\nans = solution()"
    ],
    "0588ff4a3789420685f1bed8b5f2e9be": [
        "def solution():\n    # For Jason to ensure victory, he needs to manipulate the game so that \n    # Belinda must take the last marble. To do this, he must reach a situation \n    # where 4 marbles are left right before Belinda's turn. \n\n    # If there are 4 marbles before Jason's turn, no matter how many marbles he takes \n    # (1, 2, or 3), Belinda can always take the remaining and avoid losing.\n\n    # The winning strategy for Jason is to always leave a multiple of 4 marbles to Belinda.\n    # Since 26 is not a multiple of 4, Jason should take a certain number of marbles such that\n    # the remaining count is a multiple of 4.\n\n    # To find this number, we can take the total number of marbles modulo 4, and then \n    # subtract the result from 4 (if Jason should take 4 marbles, it means he can take either 1, 2, or 3)\n\n    marbles_to_take = 26 % 4\n    if marbles_to_take == 0:\n        marbles_to_take = 1\n    return marbles_to_take\n\nans = solution()"
    ],
    "cd9ad5be90634b298514a198bfb61625": [
        "from itertools import combinations\n\ndef solution():\n    total_sum = 25\n    number_of_numbers = 7\n    all_combinations = []\n    \n    for combo in combinations(range(1, total_sum), number_of_numbers - 1):\n        if sum(combo) < total_sum:\n            sorted_combo = sorted(list(combo) + [total_sum - sum(combo)])\n            if len(set(sorted_combo)) == len(sorted_combo):\n                all_combinations.append(sorted_combo)\n    \n    return all_combinations\n\nans = solution()"
    ],
    "8e243ca0416749c4ab65f908ade8388d": [
        "def solution():\n    # Given that 3/7 of the number is 18\n    # Find the full number first\n    full_number = (18 * 7) / 3\n    # Now find 5/6 of the found full number\n    result = (full_number * 5) / 6\n    \n    return result\n\nans = solution()"
    ],
    "633dae2f3a3e45cb9daaa00438a515d7": [
        "def solution():\n    # The probability that the alcoholic is not at the first bar is 1/3,\n    # since there are three bars to choose from and he is at one of them.\n    prob_not_at_first_bar = 1 - 1/3\n\n    # Similarly, the probability that the alcoholic is not at the second bar is also 1/3.\n    prob_not_at_second_bar = 1 - 1/3\n\n    # Since the events of not being at the first bar and not being at the second bar\n    # are independent, we can multiply their probabilities to find the probability\n    # that the alcoholic is not at the first two bars.\n    prob_not_at_first_two_bars = prob_not_at_first_bar * prob_not_at_second_bar\n    \n    # If the alcoholic is not at the first two bars, he must be at the third bar.\n    prob_at_third_bar = prob_not_at_first_two_bars\n    \n    return prob_at_third_bar\n\nans = solution()"
    ],
    "efa05afe196f4afa960648690f074c1f": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Let's denote the following variables:\n    # G - the amount of grass in the pasture initially\n    # r - the rate at which the grass grows every week\n    # c - the number of cows the pasture can sustain for 6 weeks\n\n    G, r, c = symbols('G r c')\n\n    # 120 cows eat up the grass in 12 weeks\n    # Equation 1: 120 * 12 = G + 12 * r\n    eq1 = Eq(120 * 12, G + 12 * r)\n\n    # 150 cows eat up the grass in 8 weeks\n    # Equation 2: 150 * 8 = G + 8 * r\n    eq2 = Eq(150 * 8, G + 8 * r)\n\n    # Solve the system of equations to find G and r\n    solutions = solve((eq1, eq2), (G, r))\n    G_solution = solutions[G]\n    r_solution = solutions[r]\n\n    # Use G and r to form the equation for c cows for 6 weeks\n    # Equation 3: c * 6 = G + 6 * r\n    eq3 = Eq(c * 6, G_solution + 6 * r_solution)\n\n    # Solve the equation to find the number of cows\n    c_solution = solve(eq3, c)\n\n    return c_solution[0]\n\nans = solution()"
    ],
    "32f18491c74041d8817a310362816c55": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime.strptime('15/05/2023', '%d/%m/%Y')\n    duration = timedelta(weeks=3)\n    end_date = start_date + duration\n    return end_date.strftime('%d/%m/%Y')\n\nans = solution()"
    ],
    "09a3a1d022104884aa725a719c560f60": [
        "def solution():\n    volunteer = 1\n    while True:\n        trees = 4 * volunteer + 5\n        if (trees - 1) % 7 == 0:\n            num_volunteers = volunteer\n            total_trees = trees\n            break\n        volunteer += 1\n    return num_volunteers, total_trees\n\nans = solution()"
    ],
    "e86fd8332fe14c18baddfef75e03ff27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pencil, marker = symbols('pencil marker')\n    equation1 = Eq(3 * pencil + 2 * marker, 13)\n    equation2 = Eq(2 * pencil + 3 * marker, 12)\n\n    solutions = solve((equation1, equation2), (pencil, marker))\n    \n    total_cost = 7 * solutions[pencil] + 7 * solutions[marker]\n\n    return total_cost\n\nans = solution()"
    ],
    "b3dcd19bf9ef49f6abe5c02758449b1a": [
        "def solution():\n    ans = 98 + 6\n    return ans\n\nans = solution()"
    ],
    "662004bd60264ac5b02db70eebf6c2af": [
        "def solution():\n    return 3200 - 1476\n\nans = solution()"
    ],
    "6681c9a39b3645079a46a6daf29a4854": [
        "def solution():\n    return 10 * 21 // 14\n\nans = solution()"
    ],
    "5b97b704f01a431fbcd061cfe8853201": [
        "def solution():\n    common_difference = 11 - 5\n    last_term = 41\n    next_term = last_term + common_difference\n\n    return next_term\n\nans = solution()"
    ],
    "aecd8ddb67d4485295695f4d5b6f8788": [
        "def solution():\n    # Let x be the initial number of stickers in Bag A\n    # Let y be the initial number of stickers in Bag B\n    # We have x + y = 270 (1) and (y + 56) / (x - 56) = 3/2\n    # Cross multiplying the second equation gives us 2(y + 56) = 3(x - 56) (2)\n\n    # Solve the equations (1) and (2)\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 270)\n    equation2 = Eq(2*(y + 56), 3*(x - 56))\n\n    solution = solve((equation1, equation2), (x, y))\n\n    # Since we want the initial number of stickers in Bag A\n    return solution[x]\n\nans = solution()"
    ],
    "54e546b3285e46baa909a946531986b5": [
        "def solution():\n    children = 74\n    bars_per_packet = 8\n    \n    packets_needed = -(-children // bars_per_packet) # Ceiling division to get the least number of full packets\n\n    return packets_needed\n\nans = solution()"
    ],
    "aa2c433bd04243828094f4f0da449459": [
        "def solution():\n    # To find the total number of students when there are 55 more boys than girls\n    # We're looking for two squares (one for boys and one for girls), such that the difference in their areas is 55.\n    # Since it's a square array, the side lengths must be whole numbers.\n    # Initialize a boys_side to be one greater than the girls_side since the outer layer is all boys\n    # Increase both boys_side and girls_side until the difference between their squares matches 55\n    boys_side = 1\n    while True:\n        girls_side = boys_side - 2  # Subtract 2 since one layer of boys surrounds the girls on each side\n        if girls_side <= 0:  # There cannot be negative or zero girls.\n            break\n        # Calculate the total number of boys and girls\n        boys = boys_side * boys_side\n        girls = girls_side * girls_side\n        if boys - girls == 55:  # Check if the difference in their totals is 55\n            # Return the total number of students which is sum of the boys and girls\n            return boys + girls\n        boys_side += 2  # Increase boy's side length for the next iteration, which must be even\n\nans = solution()"
    ],
    "7d4469e90d7e44938c44082c04573041": [
        "def solution():\n    return 0.05 * 180\n\nans = solution()"
    ],
    "2d6942e7e2a049b0875a5daaa2d8662f": [
        "def solution():\n    ans = 30 - 28 + 26 - 24 + 22 - 20 + 18 - 16 + 14\n    return ans\n\nans = solution()"
    ],
    "31d560632aeb4f189ed15394a994b8ea": [
        "def solution():\n    tenth_term = 31\n    common_difference = 28 - 25  # The sequence changes by 3 each time\n\n    # Since we know the 10th term, we calculate the first term by subtracting 9 times the common difference\n    first_term = tenth_term - (9 * common_difference)\n    \n    return first_term\n\nans = solution()"
    ],
    "6fa5dd836ec04fd1867acfcafb149b3b": [
        "def solution():\n    total_cakes = 80\n    cakes_per_box = 5\n    num_boxes = total_cakes // cakes_per_box + (1 if total_cakes % cakes_per_box else 0)\n    return num_boxes\n\nans = solution()"
    ],
    "517f83e2071941a890e20a4e3126cc19": [
        "def solution():\n    def sum_of_factors(n):\n        return sum([i for i in range(1, n) if n % i == 0])\n    \n    num = 2\n    while True:\n        if sum_of_factors(num) == num:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "09f6f0f9df4e4407bb6d0d93d12f86f3": [
        "def solution():\n    total_sweets = 30\n    sweets_for_sister = 6\n    number_of_friends = 6\n    \n    sweets_left = total_sweets - sweets_for_sister\n    sweets_per_friend = sweets_left // number_of_friends\n\n    return sweets_per_friend\n\nans = solution()"
    ],
    "d0aafdcf41bd41af9f7703e35d618f89": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lovelle, makayla = symbols('lovelle makayla')\n    total_muffins = 3998\n\n    # Lovelle sold 462 muffins\n    lovelle_sold = 462\n\n    # Makayla sold 2/5 of her muffins\n    makayla_sold_fraction = 2 / 5\n\n    # Equation 1: The initial total number of muffins\n    equation1 = Eq(lovelle + makayla, total_muffins)\n\n    # Equation 2: After selling, Lovelle and Makayla have the same number of muffins\n    equation2 = Eq(lovelle - lovelle_sold, makayla - (makayla * makayla_sold_fraction))\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (lovelle, makayla))\n\n    return int(solutions[lovelle])\n\nans = solution()"
    ],
    "48c4af399af1492c8496fdcbe4b79ce4": [
        "def solution():\n    # Number of cards of colors: 4, 8, 12, 16\n    # To make sure there isn't 10 cards of the same color, we can pick at most\n    # 9 cards from each of the 3 colors with the most cards (9 from 16, 9 from 12, 9 from 8)\n    # If we pick one more card, it has to be of the same color as one we already have\n    # thus completing at least 10 of that color.\n    cards_needed = (9 + 9 + 9 + 1)\n    return cards_needed\n\nans = solution()"
    ],
    "199f98404707430a8c113444383853f4": [
        "def solution():\n    # The maximum number of different positive integers that add up to 30\n    # can be determined by the concept that for each positive integer added,\n    # the sum has to reduce by at least a value of the next consecutive integer.\n    # Starting with 1, we keep adding consecutive numbers till the sum exceeds 30,\n    # and count the number of integers used in this process.\n\n    sum = 0\n    count = 0\n    next_integer = 1\n    \n    while sum + next_integer <= 30:\n        sum += next_integer\n        count += 1\n        next_integer += 1\n\n    return count\n\nans = solution()"
    ],
    "e2768d76048543a996b33863b0237436": [
        "def solution():\n    ribbon_length = 87\n    pieces = 30\n    length_per_piece = ribbon_length / pieces\n    return length_per_piece\n\nans = solution()"
    ],
    "7334697b756d4565a7eb61beac61cfb8": [
        "def solution():\n    num_daffodils = 8\n    gap_between_daffodils = 1.1\n\n    total_length = (num_daffodils - 1) * gap_between_daffodils\n\n    return total_length\n\nans = solution()"
    ],
    "e139050ca60c4fb8ae683ddbe39fd88c": [
        "def solution():\n    num_boxes = 1450\n    books_per_box = 258\n    total_books = num_boxes * books_per_box\n    return total_books\n\nans = solution()"
    ],
    "e79fe3bad58843cb9ba29a747eecfe37": [
        "from sympy.utilities.iterables import partitions\n\ndef solution():\n    # Generate all integer partitions of 9 with exactly 3 parts.\n    parts = partitions(9, m=3, k=3)\n    count = 0\n    for p in parts:\n        # Skip partitions that have duplicate parts, since boxes are identical\n        if len(set(p)) == 3:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "e9d1fadd4f7340399f406e12d58bc690": [
        "def solution():\n    total_juice = 150\n    jane_drink = total_juice / (1 + 1.5)\n    alex_drink = 1.5 * jane_drink\n    return alex_drink\n\nans = solution()"
    ],
    "61cacff2e135446188147ef9331416bf": [
        "def solution():\n    # total_cost represents the sum of the cost of the book and the bag.\n    total_cost = 225\n    \n    # Let x be the total money Irene had initially.\n    # She spent 1/4 of her money on a book, which can be represented as x/4\n    # She spent 2/7 of her money on a bag, which can be represented as 2x/7\n    # Together, the cost of the book and bag is $225, so we get the equation:\n    # x/4 + 2x/7 = 225\n    \n    # To solve for x, we need to find the common denominator and solve the equation.\n    # The common denominator of 4 and 7 is 28.\n    \n    # Multiplying both sides of the equation by 28 to eliminate the fractions, we get:\n    # 7x + 8x = 225 * 28\n    # 15x = 225 * 28\n    \n    # Now, we divide both sides of the equation by 15 to solve for x:\n    # x = (225 * 28) / 15\n    \n    # Calculating the right-hand side of the equation gives us the value of x:\n    x = (225 * 28) // 15\n    return x\n\nans = solution()"
    ],
    "f3c45f5f9fe141138b4274ad08514257": [
        "def solution():\n    distance = 48\n    speed = 8\n\n    time = distance / speed\n\n    return int(time)\n\nans = solution()"
    ],
    "81ab24eed7cd4f2296d627d76b1e2ec2": [
        "def solution():\n    one_fourth_of_16 = 1/4 * 16\n    missing_number = one_fourth_of_16 * 2\n    return missing_number\n\nans = solution()"
    ],
    "d349a45227c5469c8d98a746d07c5555": [
        "def solution():\n    total_pears = 18\n    total_strawberries = 30\n    total_chocolates = 18\n    friends = 6\n\n    pears_per_friend = total_pears // friends\n    strawberries_per_friend = total_strawberries // friends\n    chocolates_per_friend = total_chocolates // friends\n\n    fruits_per_friend = pears_per_friend + strawberries_per_friend\n\n    return fruits_per_friend\n\nans = solution()"
    ],
    "5d2b6883175743eda687b1bb058d4c89": [
        "from math import comb\n\ndef solution():\n    total_ways = comb(12, 4)\n    ways_with_no_boys = comb(5, 4)\n    ways_with_at_least_one_boy = total_ways - ways_with_no_boys\n    return ways_with_at_least_one_boy\n\nans = solution()"
    ],
    "b50f8ca3f787492f9f27c716da3258de": [
        "def solution():\n    x = (15 * 5) / 3\n    return x\n\nans = solution()"
    ],
    "30aa83b2ee3f4ead83de91a226189785": [
        "def solution():\n    x = 5 ** 2\n    y = 6\n    return x * y\n\nans = solution()"
    ],
    "0116cb5ffe3f43828ce4925528badb2e": [
        "def solution():\n    # Let the initial amount of money Bud had be x.\n    # She spent 1/4 of it on a book, so she had 3/4x left.\n    # Then she spent 2/5 of the remaining money on a bag, which cost £60.\n    # So, we have (2/5) * (3/4) * x = £60.\n    # To find the original amount x, we solve for x.\n    \n    # (2/5)*(3/4)*x = 60\n    # x = 60 / ((2/5)*(3/4))\n    \n    x = 60 / ((2/5) * (3/4))\n    return x\n\nans = solution()"
    ],
    "3ef9ddcfb78d4c79b8835fcd29559ed7": [
        "def solution():\n    digits = 0\n    page = 0\n    while digits < 157:\n        page += 1\n        digits += len(str(page))\n        \n    return page\n\nans = solution()"
    ],
    "ef48001475784ca48f23a6a14697b062": [
        "def solution():\n    for num in range(201, 241, 2):  # iterate over odd numbers between 200 and 241\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "6cc6f9f62af04d3f8eb7d700d44ac715": [
        "def solution():\n    ans = (70 / 7 - 7) * 13\n    return ans\n\nans = solution()"
    ],
    "b1362edc59474e289cdb2ea885cdd477": [
        "def solution():\n    for i in range(10):\n        for j in range(10):\n            total_price = int(f\"{i}679{j}\")\n            if total_price % 72 == 0:\n                unit_price = total_price // 72\n                return unit_price\n\nans = solution()"
    ],
    "501bce5f0d5c41eb96c1a803d85678b4": [
        "def solution():\n    train_length = 360  # in meters\n    speed = 40  # in meters per second\n\n    time_to_pass = train_length / speed\n\n    return time_to_pass\n\nans = solution()"
    ],
    "41e25daefa484ddabc8596daad89dee5": [
        "def solution():\n    # Number of intervals between peach trees is one less than the number of trees\n    num_intervals = 41 - 1\n    \n    # Length of the stretch of road calculated by the number of intervals between trees times the distance between trees\n    length_of_road = num_intervals * 3\n    \n    # The number of intervals between lamp posts is determined by dividing the length of the road by the distance between lamp posts\n    # Since a lamp post is placed at each end, we add one more to the number of lamp posts\n    num_lamp_posts = (length_of_road // 8) + 1\n\n    return num_lamp_posts\n\nans = solution()"
    ],
    "1ddfd41822fc4ff5909fb0c086a9e1cc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    candies, students_B = symbols('candies students_B')\n    \n    # Class A has twice as many students as class B\n    students_A = 2 * students_B\n\n    # Equations based on given information\n    equation1 = Eq(4 * students_A - candies, 20)  # 20 more candies needed for class A\n    equation2 = Eq(candies - 6 * students_B, 16)  # 16 candies left after distributing to class B\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (candies, students_B))\n\n    # We want the number of candies\n    return solutions[candies]\n\nans = solution()"
    ],
    "79002f093bcc4697a0f9a3929ef1d7a5": [
        "def solution():\n    return 208 // 8\n\nans = solution()"
    ],
    "600b0d1413ee4c7f9c8323852cd824de": [
        "def solution():\n    intervals = 21\n    plants = intervals + 1\n    return plants\n\nans = solution()"
    ],
    "65c1681a1cc943ca8fed37eafd2809bd": [
        "def solution():\n    count = 0\n    for i in range(10, 100):\n        if (i // 10 + i % 10) % 5 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "44295cc103b24b67af16130f5db0f090": [
        "def solution():\n    total_money = 24\n    dvd_cost = total_money / 3\n    remaining_money = total_money - dvd_cost\n    book_cost = remaining_money * 25 / 100\n    money_left = remaining_money - book_cost\n    return money_left\n\nans = solution()"
    ],
    "a3995edc2a1a43daa636491bd11f901f": [
        "def solution():\n    amount_per_wash = 1.40\n    target_amount = 12\n    num_washes = (target_amount // amount_per_wash) + 1\n    return int(num_washes)\n\nans = solution()"
    ],
    "2450c7184dc1494db29badfda3df6350": [
        "def solution():\n    count = 0\n    for number in range(41):\n        if '2' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "eb83c6f6832f41feaed4f34edd98a1ca": [
        "def solution():\n    # Speeds given\n    speed1 = 60\n    speed2 = 30\n    \n    # Total distance traveled\n    total_distance = 1 + 1  # in miles\n    \n    # Time taken to travel each distance at respective speeds\n    time1 = 1 / speed1  # time = distance / speed\n    time2 = 1 / speed2\n    \n    # Total time taken for the entire trip\n    total_time = time1 + time2  # in hours\n    \n    # Average speed formula: total distance divided by total time\n    average_speed = total_distance / total_time\n    \n    return average_speed\n\nans = solution()"
    ],
    "64dfb01da35643c0b9de911c9ea05789": [
        "def solution():\n    return 2 ** 4\n\nans = solution()"
    ],
    "34416f7c5b99456f877168a0fd62da99": [
        "def solution():\n    for num in range(121, 136):\n        if num % 4 == 0 and num % 6 == 0:\n            return num\n\nans = solution()"
    ],
    "875569394f454c87ba59b92ec3568007": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a = symbols('a')\n    equations = [\n        Eq(290 % a, a),\n        Eq(235 % a, a + 2),\n        Eq(200 % a, a + 5)\n    ]\n\n    result = solve(equations)\n    natural_number = 290 - result[a]\n\n    return natural_number\n\nans = solution()"
    ],
    "01a700f22d8440ff98528ae95438b080": [
        "def solution():\n    return 901 - 582\n\nans = solution()"
    ],
    "7a629088064049ac9991a8c0a6a39bc2": [
        "def solution():\n    average_daily_earnings = 70\n    number_of_working_days = 6  # From Monday to Saturday\n\n    total_earnings = average_daily_earnings * number_of_working_days\n    return total_earnings\n\nans = solution()"
    ],
    "05067bad937e48738bea7614f9cc4676": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the smaller of the two unknown angles.\n    x = symbols('x')\n\n    # The other angle is twice the smaller one.\n    y = 2 * x\n\n    # The sum of the angles in a triangle is 180 degrees.\n    # Since one of the angles is a right angle (90 degrees), we set up the equation like so:\n    equation = Eq(x + y + 90, 180)\n\n    # Solve for x (smaller angle).\n    solution = solve(equation, x)\n\n    # The larger angle y is twice the smaller angle x.\n    largest_angle = 2 * solution[0]\n\n    return largest_angle\n\nans = solution()"
    ],
    "2a9c4ac0af274c21b3b543fdc562d57c": [
        "def solution():\n    for P in range(1, 10):\n        for I in range(10):\n            for S in range(10):\n                if P != I and P != S and I != S:  # Different digits\n                    IS = int(f\"{I}{S}\")\n                    PI = int(f\"{P}{I}\")\n                    if 4 * IS == PI:\n                        return PI\n\nans = solution()"
    ],
    "d93d643e886d4754abfa2f90328da9f1": [
        "def solution():\n    # Number of members\n    num_elderly = 9\n    \n    # Sum of their ages\n    total_age = 765\n    \n    # Since the ages are consecutive numbers, the middle number is the average\n    average_age = total_age // num_elderly\n    \n    # The middle age is the average age\n    middle_age = average_age\n    \n    return middle_age\n\nans = solution()"
    ],
    "5e8d313c1541406a95c53bcb9f149496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the cost of one necklace and one earring\n    necklace, earring = symbols('necklace earring')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(9 * necklace + 5 * earring, 1440)\n    equation2 = Eq(3 * necklace + 1 * earring, 438)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (necklace, earring))\n\n    # Find the total cost of one necklace and one earring\n    total_cost = solutions[necklace] + solutions[earring]\n\n    return total_cost\n\nans = solution()"
    ],
    "91a598b887f6483a86d977ea27f5c731": [
        "def solution():\n    # The total amount of sunshine from Monday to Saturday\n    total_six_days = 6 * 3\n    \n    # Adding Sunday's sunshine hours\n    total_seven_days = total_six_days + 10\n    \n    # Calculating the average over the whole week (7 days)\n    average_sunshine = total_seven_days / 7\n    \n    return average_sunshine\n\nans = solution()"
    ],
    "1edc3edaab9048beaf044a5eee61b184": [
        "def solution():\n    walking_speed = 75  # m/min\n    running_speed = walking_speed * 2\n\n    walking_time_to_school = 24  # min\n    distance_to_school = walking_time_to_school * walking_speed\n\n    half_distance = distance_to_school / 2\n    half_walking_time = half_distance / walking_speed\n    half_running_time = half_distance / running_speed\n\n    total_time = half_walking_time + half_running_time\n\n    return total_time\n\nans = solution()"
    ],
    "13d1dc22063b44a6bfd3c253184381b8": [
        "def solution():\n    total_length = 320  # total length of the road in meters\n    trees = 79  # total number of trees\n\n    # The trees are planted in between the spaces, so there are trees + 1 spaces\n    spaces = trees + 1\n\n    # The distance between each tree is the total length divided by the number of spaces\n    distance_between_trees = total_length / spaces\n\n    return distance_between_trees\n\nans = solution()"
    ],
    "d02e694f3a564aafaf5019cd2b7a9a4d": [
        "def solution():\n    boys = 120\n    girls = 80\n\n    boys_who_saw_movie = boys * 0.5\n    girls_who_saw_movie = girls * 0.6\n\n    total_who_saw_movie = int(boys_who_saw_movie + girls_who_saw_movie)\n\n    return total_who_saw_movie\n\nans = solution()"
    ],
    "f1b82ff9340a4655b4cf7000c847b825": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    savings = symbols('savings')\n    \n    third_savings = savings / 3\n    half_of_given_to_mother = third_savings / 2\n\n    equation = Eq(savings - third_savings - 177 - 129, half_of_given_to_mother)\n    \n    ans = solve(equation, savings)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "909e9ffd178a4a82a7e2ba972d438c99": [
        "def solution():\n    total_length = 385\n    cut_length = 15\n    remainder = total_length % cut_length\n    return remainder\n\nans = solution()"
    ],
    "4af0a33072c147caa27c6f6519d84e3f": [
        "def solution():\n    mixed_number = 1 + 3/100\n    return mixed_number\n\nans = solution()"
    ],
    "3f5d80aa10384e98a458b98fad0305a2": [
        "def solution():\n    count = 0\n    for x in range(7):  # Possible numbers of apples in basket 1, range is 0 to 6\n        for y in range(7 - x):  # Possible numbers of apples in basket 2, range is 0 to 6 minus apples in basket 1\n            # No need to iterate for the third basket, as it will contain the remaining apples\n            # Because the baskets are identical, we don't need to worry about different permutations of the same combination\n            count += 1\n    return count\n\nans = solution()"
    ],
    "3676c87ead1a489f9e921d0d75aa36ef": [
        "def solution():\n    num_teams = 8\n    matches = (num_teams * (num_teams - 1)) // 2\n    return matches\n\nans = solution()"
    ],
    "fcb6d1b5111d48d9a3ae25817b7ba302": [
        "def solution():\n    sum_N = sum(n for n in range(1, 2018) if 2018 % n == 11)\n    return sum_N\n\nans = solution()"
    ],
    "a22a990372e6459ab93701b27bbe1333": [
        "def solution():\n    initial_rabbits = 32\n    year_count = 3  # Calculate for 3 years\n\n    for _ in range(year_count):\n        # Rabbits multiply by 3 times\n        initial_rabbits *= 3\n        # Wolves eat half the rabbits\n        initial_rabbits /= 2\n\n    return int(initial_rabbits)\n\nans = solution()"
    ],
    "1a428efca7154d45b9f95d2f7093cbe7": [
        "def solution():\n    skirts_per_day = 6\n    total_skirts = 0\n    for day in range(1, 10):  # From day 1 to day 9\n        total_skirts += day * skirts_per_day\n    return total_skirts\n\nans = solution()"
    ],
    "494681f041b745a591be1d725abc3a02": [
        "def solution():\n    for chickens in range(9):\n        cows = 8 - chickens\n        if 2 * chickens + 4 * cows == 26:\n            return chickens\n\nans = solution()"
    ],
    "715019fd42ea4f559b0924cbe53893bc": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "0a9deb608fe24aa6b6430859835ac8d7": [
        "def solution():\n    first_term = 11\n    common_difference = 3\n    \n    sequence_numbers = {first_term + n * common_difference for n in range(50)}  # We generate more than needed.\n    \n    # We check which numbers in the given range are in the sequence.\n    return [number for number in range(30, 61) if number in sequence_numbers]\n\nans = solution()"
    ],
    "9e5271cce46840fc8756f7236f3fd9b2": [
        "def solution():\n    cost_per_person = 253 / 11\n    total_cost_for_12_people = cost_per_person * 12\n    return total_cost_for_12_people\n\nans = solution()"
    ],
    "f1c6e0272fae419183c3fb080070f9ad": [
        "def solution():\n    digit_count = 0\n    number = 1\n\n    while True:\n        num_digits = len(str(number))\n        digit_count += num_digits\n        if digit_count >= 2023:\n            return int(str(number)[num_digits - (digit_count - 2023) - 1])\n        number += 1\n\nans = solution()"
    ],
    "6885b2a6b6b54f2d8315a175fa94e91a": [
        "def solution():\n    sweets = 138\n\n    # Since each student gets at least 5 sweets, let's start with 5 and check for every possible class size if the sweets can be distributed evenly.\n    for class_size in range(5, sweets + 1):\n        if sweets % class_size == 0:\n            return class_size\n\nans = solution()"
    ],
    "13dd71975a16405c87357c875ed6c03c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    cost_of_5_bananas = 5 * solutions[banana]\n\n    return cost_of_5_bananas\n\nans = solution()"
    ],
    "6d1e50acecb5443699ff1409bbab9ab1": [
        "def solution():\n    total_questions = 25\n    total_answered = total_questions - 1\n    correct_points = 4\n    incorrect_points = -2\n    total_score = 66\n\n    for correct_answers in range(total_answered + 1):\n        incorrect_answers = total_answered - correct_answers\n        score = correct_answers * correct_points + incorrect_answers * incorrect_points\n        if score == total_score:\n            return correct_answers\n\nans = solution()"
    ],
    "ae271ee454574a6f9c07ffcb062507f5": [
        "def solution():\n    n = 66 // (3 * 11)\n    return n\n\nans = solution()"
    ],
    "c098a360c7f6486099fd66b709ca7e5a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n\n    # Equation based on the tax problem description\n    tax_equation = Eq(0.08 * 50000 + (150000 - 50000) * (0.08 + T / 100), 15000)\n\n    # Solve for T\n    T_value = solve(tax_equation, T)\n\n    return T_value[0]\n\nans = solution()"
    ],
    "a024f762eee54f819b5a5c703275d15c": [
        "def solution():\n    total_boys = 432\n    days_in_january = 31\n    # Applying the Pigeonhole Principle\n    max_births_per_day = (total_boys // days_in_january) + (total_boys % days_in_january > 0)\n    return max_births_per_day\n\nans = solution()"
    ],
    "eaa36f2338ce478c9ef3805f3e5db384": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the original amounts\n    Rachel, Alice = symbols('Rachel Alice')\n\n    # Equation after Rachel gives Alice 10 pieces\n    equation1 = Eq(Rachel - 10, Alice + 10)\n\n    # Equation after they both eat 8 pieces, Rachel has 3 times Alice's amount\n    equation2 = Eq(Rachel - 8, 3 * (Alice - 8))\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (Rachel, Alice))\n\n    # Calculate the total amount of candy they originally had\n    total_candy = solutions[Rachel] + solutions[Alice]\n\n    return total_candy\n\nans = solution()"
    ],
    "8bebcb024a134af6bd81b9505fe32657": [
        "def solution():\n    first_car_length = 6\n    other_cars_length = 4 * (31 - 1)\n    total_distance_between_cars = 5 * 32\n    total_length = first_car_length + other_cars_length + total_distance_between_cars\n    return total_length\n\nans = solution()"
    ],
    "5810f2c593d14c5d83787fff4babe6f3": [
        "def solution():\n    # Since we are forming three-digit numbers,\n    # the hundreds place cannot have the digit 0.\n    # There are 2 choices for the hundreds place (2 or 3).\n\n    # The tens and the units place can have any of the 3 digits (0, 2, 3),\n    # but a digit cannot be repeated because it can only appear once in the number.\n    \n    # Once the hundreds place is chosen, we have 2 choices for the tens,\n    # And then only 1 choice left for the units place.\n    \n    numbers_count = 2 * 2 * 1\n    \n    return numbers_count\n\nans = solution()"
    ],
    "e1990839b31d461db3729e71325eabbd": [
        "def solution():\n    total_chocolates = 5 * 10\n    chocolates_given_away = 23\n\n    chocolates_left = total_chocolates - chocolates_given_away\n\n    return chocolates_left\n\nans = solution()"
    ],
    "d1a178f9942d41d9a82ed3706f2e8f56": [
        "from itertools import permutations\n\ndef solution():\n    cards = ['0', '3', '5', '8']\n    count = 0\n\n    for perm in permutations(cards):\n        if perm[0] != '0' and int(''.join(perm)) > 5000:\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "5635691adc5141a8867ba1ea8124d38e": [
        "def solution():\n    # Given values in the sequence\n    seventh_term = 105\n    eighth_term = 120\n    ninth_term = 135\n\n    # The difference between consecutive terms\n    difference = eighth_term - seventh_term\n\n    # The first term, using the 8th term (because the index is 1 less than the term number)\n    first_term = eighth_term - difference * (8 - 1)\n\n    # The 100th term in the sequence\n    hundredth_term = first_term + difference * (100 - 1)\n\n    return hundredth_term\n\nans = solution()"
    ],
    "eb2770c6e3204216b75646ea3e20a071": [
        "def solution():\n    return 5272 // 4\n\nans = solution()"
    ],
    "6e587e1396e4469da9fb76d1a63500a8": [
        "def solution():\n    # Sarah received 12 sweets, which corresponds to 3 parts in the ratio.\n    # So each part is equal to 12 sweets divided by 3\n    each_part = 12 / 3\n    \n    # The total ratio's sum is 2 + 3 + 5 = 10 parts\n    total_parts = 2 + 3 + 5\n    \n    # The total number of sweets is the number of parts multiplied by sweets per part\n    total_sweets = total_parts * each_part\n\n    return total_sweets\n\nans = solution()"
    ],
    "4ff16f5b62234dcaa6dfb47ec0b97611": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for perm in permutations(\"ABCDEFG\"):\n        perm = ''.join(perm)\n        a_index = perm.index('A')\n        b_index = perm.index('B')\n        c_index = perm.index('C')\n        d_index = perm.index('D')\n        e_index = perm.index('E')\n        \n        # A should be in the middle of B and C (Not necessarily next to each other)\n        if abs(b_index - a_index) != 1 and abs(c_index - a_index) != 1 and \\\n        (a_index > b_index and a_index < c_index) or (a_index < b_index and a_index > c_index):\n            # D and E should be next to each other\n            if abs(d_index - e_index) == 1:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "5526c23ffd024f3697e30d23a595af55": [
        "def solution():\n    current_length = 30\n    growth_rate = 1 / 5\n    initial_length = current_length / (1 + growth_rate)\n    return initial_length\n\nans = solution()"
    ],
    "66db04ea675e442a808a4648e3bb0e13": [
        "def solution():\n    week1 = 27\n    week2 = 25\n    week3 = 30\n\n    total_petrol = week1 + week2 + week3\n\n    return total_petrol\n\nans = solution()"
    ],
    "0ff88920dd05452c8edcdf168d81d61a": [
        "def solution():\n    biscuits_price = 73 * 7    # pence\n    cakes_price = 113 * 9      # pence, converted from £ to p\n\n    total_price_pence = biscuits_price + cakes_price\n    total_price_pounds = total_price_pence / 100  # convert pence to pounds\n\n    change = 20 - total_price_pounds  # £20 note - total price in pounds\n\n    return round(change, 2)\n\nans = solution()"
    ],
    "64578896b85247a5bc8033060abe3385": [
        "def solution():\n    return 734 * 58\n\nans = solution()"
    ],
    "8b535506c66e4092b2c7ac1a8fd5a43f": [
        "def solution():\n    piles = 6\n    apples_per_pile = 8\n    total_apples = piles * apples_per_pile\n    return total_apples\n\nans = solution()"
    ],
    "0e99723387294b9f9f858dfe311b994f": [
        "def solution():\n    ans = 1.8 - 0.57\n    return ans\n\nans = solution()"
    ],
    "a520cd6b98004192bc4c2d780f54359e": [
        "def solution():\n    tops = 4\n    bottoms = 5\n    combinations = tops * bottoms\n    return combinations\n\nans = solution()"
    ],
    "973a7aa6ad0b475ca38055bf318f176b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for their original number of stickers\n    sam, peter = symbols('sam peter')\n\n    # Sam had 40 stickers more than Peter\n    equation1 = Eq(sam, peter + 40)\n\n    # Sam gave 20% of his to Peter, and Peter gave 25% of his to Sam\n    sam_after = sam - 0.20 * sam + 0.25 * peter\n    peter_after = peter + 0.20 * sam - 0.25 * peter\n\n    # In the end, Sam had 96 stickers more than Peter\n    equation2 = Eq(sam_after - peter_after, 96)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sam, peter))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "d995898eb3f8495b80d5b29890be42a1": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    lunch_end_time = datetime.strptime('14:50', '%H:%M')\n    total_time_before_lunch = timedelta(minutes=(10 + 20 + 20))\n    home_arrival_time = lunch_end_time - total_time_before_lunch\n    return home_arrival_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "f6c67f2f93b44bc79f64e534dcd8fb1b": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (3, 5), (3, 6), (3, 9)]\n    ans = solve_congruence(*congruences)[0]\n\n    return ans\n\nans = solution()"
    ],
    "e4365323b3f24240b896655358cb30ad": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"12:40\", \"%H:%M\")\n    duration = timedelta(hours=2, minutes=40)\n    leave_time = arrival_time + duration\n    return leave_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "9008be14593f40169be1110ccfe7e329": [
        "def solution():\n    number = 1  # Start with the smallest possible whole number\n    while True:\n        if (number % 3 == 2) and (number % 4 == 2) and (number % 5 == 2) and (number % 7 == 1):\n            return number\n        number += 1\n\nans = solution()"
    ],
    "b7b9b80dff99475f987ad65337577b2b": [
        "from itertools import permutations\n\ndef solution():\n    # Calculate the number of 3-digit permutations from 4 different digits\n    # (2017 has unique digits)\n    # We exclude permutations beginning with '0' to ensure it's a 3-digit number\n    three_digit_numbers = set(permutations('2017', 3)) - set(permutations('2017', 3, )[0] == '0')\n    \n    # Calculate the number of 4-digit permutations from 4 different digits\n    four_digit_numbers = set(permutations('2017', 4))\n    \n    ans = len(three_digit_numbers) + len(four_digit_numbers)\n    return ans\n\nans = solution()"
    ],
    "d47ef27ff4d24d97b0950971a5d0ebae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (x - 5) - 3, 6)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9fcfa23fda9646908ef7e4baafdfbb8e": [
        "def solution():\n    ans = 6.5 / (1/2)\n    return ans\n\nans = solution()"
    ],
    "9fc589a666df49d2893ceb77b7ad8793": [
        "def solution():\n    return 887 + 96\n\nans = solution()"
    ],
    "238dd80b8a46477eaafb237f243e1492": [
        "def solution():\n    first_term = 5\n    common_difference = 3\n    number_of_terms = 14\n\n    last_term = first_term + (number_of_terms - 1) * common_difference\n    sum_of_terms = number_of_terms * (first_term + last_term) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "de62c39c82f94cadada80699ccead608": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Let x be the number of crystals Jason had at first\n    x = symbols('x') \n    \n    # Create the equation based on the problem statement\n    equation = (x / 2) + 10 + 20 - 14 == 35 + (x / 2)\n\n    # Solve the equation for x\n    initial_crystals = solve(equation, x)\n\n    return initial_crystals[0]\n\nans = solution()"
    ],
    "b89dd263e0b74d39b39fc4d3fdbfb49e": [
        "def solution():\n    def count_9s(n):\n        count, factor = 0, 1\n        while factor <= n:\n            digit = (n // factor) % 10\n            high = n // (factor * 10)\n            low = n - (n // factor) * factor\n            if digit < 9:\n                count += high * factor\n            elif digit == 9:\n                count += high * factor + low + 1\n            else:\n                count += (high + 1) * factor\n            factor *= 10\n        return count\n\n    left, right = 0, 100000\n    while left < right:\n        mid = (left + right) // 2\n        if count_9s(mid) < 181:\n            left = mid + 1\n        else:\n            right = mid\n            \n    return left\n\nans = solution()"
    ],
    "249b1679bd9a4e0cab73014b4563c817": [
        "def solution():\n    import math\n    A, B, C = 12, 15, 18\n    ans = math.gcd(math.gcd(A, B), C)\n    return ans\n\nans = solution()"
    ],
    "74259b5e9ab14d9f87fc462cc2c9c9c4": [
        "from itertools import permutations\n\ndef solution():\n    digits = [0, 1, 5, 8]\n    all_three_digit_numbers = [''.join(p) for p in permutations(map(str, digits), 3) if p[0] != '0']\n    min_number = int(min(all_three_digit_numbers))\n    max_number = int(max(all_three_digit_numbers))\n    return max_number - min_number\n\nans = solution()"
    ],
    "b00aab6ff6404d4c8fdb343288b6e0d9": [
        "def solution():\n    return 37 * 27\n\nans = solution()"
    ],
    "bc434e7f2cc44029adcb3a3799e67e66": [
        "def solution():\n    # Since the pattern is 1 black, 2 white, 2 grey,\n    # and there are 14 grey rabbits, we find the number of full patterns\n    # Each full pattern has 2 grey rabbits.\n    grey_per_pattern = 2\n    num_patterns = 14 / grey_per_pattern\n    \n    # Each pattern consists of 5 rabbits (1 black, 2 white, 2 grey).\n    rabbits_per_pattern = 5\n    total_rabbits = num_patterns * rabbits_per_pattern\n\n    # Because the number of full patterns must be an integer (since you can't\n    # have a fraction of a pattern), we need to check if we really have an integer \n    # number of patterns.\n    # If it's not an integer, round up to the nearest whole pattern to ensure the minimum number of rabbits.\n    if not total_rabbits.is_integer():\n        total_rabbits = (int(num_patterns) + 1) * rabbits_per_pattern\n\n    return int(total_rabbits)\n\nans = solution()"
    ],
    "19787e6cd66e47d59c4f1aa7b622367f": [
        "def solution():\n    num = 180\n    factors_of_9 = [i for i in range(1, num+1) if num % i == 0 and i % 9 == 0]\n    return len(factors_of_9)\n\nans = solution()"
    ],
    "a2724e23a1a2486ba4b16942479338fe": [
        "from itertools import permutations\n\ndef solution():\n    # All permutations of the digits 1, 2, 3, 4\n    all_perms = permutations('1234')\n    \n    # Filtering out those permutations which end with an odd digit\n    even_perms = [perm for perm in all_perms if perm[-1] in '24']\n    \n    # The number of even permutations is the number of ways\n    count = len(even_perms)\n    \n    return count\n\nans = solution()"
    ],
    "780536f26cf94aaead22cb26adb13a45": [
        "def solution():\n    sarah_age = 24\n    peter_age = sarah_age / 2\n    mike_age = (2/3) * peter_age\n    total_age = sarah_age + peter_age + mike_age\n    return total_age\n\nans = solution()"
    ],
    "ac06ad0afb9a4d7289d8a8d0c7948dbb": [
        "def solution():\n    ans = 25 * 6\n    return ans\n\nans = solution()"
    ],
    "2fca64d5949f47de80b3591fd9ab16fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    u = symbols('u')\n    equation = Eq(340 - 2*u, 5*u - 220)\n    solutions = solve(equation, u)\n    return solutions[0]\n\nans = solution()"
    ],
    "45c4e765f9d9484cb09882339459ff20": [
        "def solution():\n    # For a number to be divisible by 9, the sum of its digits must also be divisible by 9\n    digits_sum = 2 + 6 + 5 + 3 + 9  # Sum of the given digits excluding 'a'\n    for a in range(10):  # Possible values for 'a' are 0 through 9\n        if (digits_sum + a) % 9 == 0:\n            return a  # Return the value of 'a' for which the sum is divisible by 9\n\nans = solution()"
    ],
    "cb7a55fac46240dfb8afe8d50e4bb828": [
        "def solution():\n    principal = 10000\n    rate = 0.05\n    time = 3\n\n    amount = principal * ((1 + rate) ** time)\n\n    return amount\n\nans = solution()"
    ],
    "eff977d9b7e24c4898ee8a2de20024aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    yi_yen, kyra = symbols('yi_yen kyra')\n\n    equation1 = Eq(yi_yen, 4 * kyra)\n    equation2 = Eq(yi_yen + kyra, 100)\n\n    solutions = solve((equation1, equation2), (yi_yen, kyra))\n\n    return solutions[yi_yen]\n\nans = solution()"
    ],
    "48194ec32ba347e09ddad0af6959c376": [
        "def solution():\n    price_per_box = 2.89\n    number_of_boxes = 12\n    total_cost = price_per_box * number_of_boxes\n    return total_cost\n\nans = solution()"
    ],
    "5dfa1ffa102441ac98eb20610ee9be00": [
        "def solution():\n    # Total pence Roma has\n    total_pence = 200\n\n    # Cost of one sweet in pence\n    cost_per_sweet = 12\n\n    # Cost of three sweets in pence (deal price)\n    cost_for_three = 30\n\n    # Maximum number of sweets Roma can buy with the deal\n    sweets_with_deal = (total_pence // cost_for_three) * 3\n\n    # Remaining pence after buying sweets with the deal\n    remaining_pence = total_pence % cost_for_three\n\n    # Additional sweets Roma can buy with the remaining pence\n    additional_sweets = remaining_pence // cost_per_sweet\n\n    # Total sweets Roma can buy\n    max_sweets = sweets_with_deal + additional_sweets\n\n    return max_sweets\n\nans = solution()"
    ],
    "bc11b31a4a6140a59472be824b99ccf9": [
        "def solution():\n    # The person who starts second has the winning strategy if the total\n    # number of candies is a multiple of 3. This is because they can always play\n    # to ensure the remaining candies are a multiple of 3 after the first player has eaten.\n    # However, as 10 is not a multiple of 3, the first person has the winning strategy.\n\n    total_candies = 10\n    if total_candies % 3 == 0:\n        ans = \"Second\"\n    else:\n        ans = \"First\"\n\n    # The strategy for the first person (Felix) to win is to eat candies in such a way\n    # that after his turn, the remaining candies are a multiple of 3.\n    # The second person (John) is then forced into a losing state.\n\n    return ans\n\nans = solution()"
    ],
    "f9e42807c5be4058858957db5e1c9c1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    may_age_when_10 = 10\n    kenny_age_diff = 2\n    \n    # Symbols for Kenny's age and his brother's age when May is 10\n    k_age, kb_age = symbols('k_age kb_age')\n    \n    # The sum of the ages of Kenny and his brother will be 3 times May's age when she is 10\n    equation1 = Eq(k_age + kb_age, 3 * may_age_when_10)\n    \n    # Kenny is 2 years older than his brother\n    equation2 = Eq(k_age, kb_age + kenny_age_diff)\n    \n    # Solve the equations\n    ages = solve((equation1, equation2), (k_age, kb_age))\n    \n    # Calculate how much older Kenny is than May this year\n    # May is currently 7, and we know Kenny's age when May is 10\n    # We subtract 3 from Kenny's age when May is 10 to find his current age\n    kenny_current_age = ages[k_age] - 3\n    \n    # Kenny's age difference with May\n    kenny_may_age_diff = kenny_current_age - 7\n    \n    return kenny_may_age_diff\n\nans = solution()"
    ],
    "45a248898f1c4807b784e259bea7cd69": [
        "from math import comb\n\ndef solution():\n    # Since each box must contain at least one ball, let's first distribute\n    # 1 ball to each box. This leaves us with 10 - 7 = 3 balls to distribute freely.\n    remaining_balls = 10 - 7\n    boxes = 7 - 1  # we use 7 - 1 because this is a problem of combinations with repetition\n\n    # Now we distribute the remaining balls into the boxes with repetitions.\n    # The formula for combinations with repetition is: comb(n + r - 1, r)\n    # where n is the number of types (boxes) and r is the number of repetitions (remaining_balls)\n    ways_to_distribute = comb(boxes + remaining_balls, remaining_balls)\n\n    return ways_to_distribute\n\nans = solution()"
    ],
    "49251eb5b4424b0f98bd1041d8e0da15": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (x + 3), 50 - x + 3)\n    \n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "31e292cd70e349bb90992c388528e37a": [
        "def solution():\n    # Let x be the number of litres needed to fill the fish tank.\n    # If a 5-litre pail is used and 4 litres overflow, the tank's capacity is x litres, such that:\n    # x + 4 = 5-litre pail\n\n    # If a 3-litre pail is used and 4 more pails of 3 litres each are needed, then:\n    # x = 3-litre pail * (number of 3-litre pails + 4)\n    # Simplifying, we have:\n    # x = 3 * (n + 4), where n is the number of 3-litre pails actually used to fill the tank.\n\n    # Equate both expressions for x:\n    # 5n = x - 4\n    # 3n + 12 = x\n    \n    # Solve for n:\n    # 5n = 3n + 12 - 4\n    # 2n = 8\n    # n = 4\n\n    # Now, calculate the total amount of water to fill the tank using the 5-litre pail expression:\n    # x = 5n - 4\n    # x = 5 * 4 - 4\n    water_needed = 5 * 4 - 4\n\n    return water_needed\n\nans = solution()"
    ],
    "00ac4d063d6648e78bb7009c03d426bf": [
        "def solution():\n    total_length = 305\n    pipe_length = 5\n\n    num_pipes = total_length / pipe_length\n\n    return int(num_pipes) if total_length % pipe_length == 0 else int(num_pipes) + 1\n\nans = solution()"
    ],
    "850134f061fd402ea63d73775d0910fc": [
        "def solution():\n    ans = (38 + 8 * 9 - 15) / 5\n    return ans\n\nans = solution()"
    ],
    "4e3792c14b8148b28eb1c6fbd6164292": [
        "def solution():\n    total = 50 + 20 + 10 + 5\n    brother_total = total // 2\n    \n    for coin in [50, 20, 10, 5]:\n        if total - coin == brother_total * 2:\n            return coin\n\nans = solution()"
    ],
    "89fd0157409641fc9cb98637c2461cfa": [
        "def solution():\n    def count_3s(n):\n        count = 0\n        for i in range(n+1):\n            count += str(i).count('3')\n        return count\n    \n    # Start from 1 since there's no page with number 0\n    page = 1\n    while count_3s(page) != 28:\n        page += 1\n    return page\n\nans = solution()"
    ],
    "697ff89b7a8e49d59bb66c994a87d7b9": [
        "from math import comb\n\ndef solution():\n    ways_for_girls = comb(8, 4) # Number of ways to choose 4 girls out of 8\n    ways_for_boys = comb(12, 3) # Number of ways to choose 3 boys out of 12\n    \n    total_ways = ways_for_girls * ways_for_boys\n    return total_ways\n\nans = solution()"
    ],
    "de21fb1f2c5c4002bd75f2837252b916": [
        "def solution():\n    ans = 456 - (170 - 144)\n    return ans\n\nans = solution()"
    ],
    "b4734a26463d4091ba7a023c1ba461ca": [
        "def solution():\n    total_numbers = 2016\n    multiples_of_two = set(range(2, total_numbers + 1, 2))\n    multiples_of_three = set(range(3, total_numbers + 1, 3))\n    multiples_of_four = set(range(4, total_numbers + 1, 4))\n\n    # Find numbers that are multiples of both two and three (red and blue)\n    red_and_blue = multiples_of_two.intersection(multiples_of_three)\n    \n    # Find numbers that are multiples of both two and four (red and green), but this is a subset of multiples_of_four\n    # and since all multiples of four are multiples of two, this doesn't give us new numbers that are underlined exactly twice.\n    # red_and_green = multiples_of_two.intersection(multiples_of_four) is unnecessary\n\n    # Subtract the multiples of four from the red and blue set since multiples of 4 would be underlined three times.\n    exactly_twice = red_and_blue - multiples_of_four\n\n    return len(exactly_twice)\n\nans = solution()"
    ],
    "0f831cd802e74004acc53b99817c46c5": [
        "def solution():\n    first_bus_time = 15 * 60 + 55  # convert 15.55 to minutes\n    second_bus_time = 16 * 60 + 35  # convert 16.35 to minutes\n    time_missed_first_bus = first_bus_time + 4\n    \n    wait_time_for_second_bus = second_bus_time - time_missed_first_bus\n    \n    return wait_time_for_second_bus\n\nans = solution()"
    ],
    "09a97d605e2e4cabb643032c99b282ed": [
        "def solution():\n    sums = [36 * 4, 38 * 4, 39 * 4, 45 * 4, 49 * 4]  # Sums of 4 out of 5 numbers\n    total_sum = sum(sums)  # Sum of the sums of 4 numbers for all 5 cases\n    # Since we are summing 4 out of 5 numbers five times, we have added one extra total of five numbers.\n    # So we subtract the sum of the four smallest numbers once to get actual total sum of five numbers.\n    actual_total_sum = total_sum - min(sums)\n    \n    # Now we find the largest number by subtracting the sum of the four smallest numbers from the total sum\n    largest_number = actual_total_sum - (total_sum - max(sums))\n\n    return largest_number\n\nans = solution()"
    ],
    "804f12c690c0453fbb8f0a21ecaea5b2": [
        "def solution():\n    total_students = 152\n    for boys in range(total_students + 1):\n        girls = total_students - boys\n        if boys - boys / 11 == girls - 5:\n            return boys\n\nans = solution()"
    ],
    "6161662a5ed44368b8a03f001cc375ea": [
        "def solution():\n    road_length = 40\n    distance_between_trees = 5\n\n    num_trees = (road_length // distance_between_trees) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "aba1fa935b644d9ab044d095de69983d": [
        "def solution():\n    workers = 70\n    lorry_capacity = 8\n    num_lorries = -(-workers // lorry_capacity)  # Ceiling division\n    return num_lorries\n\nans = solution()"
    ],
    "02d7ef47aaab4c4bbec478d089387344": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    men, women = symbols('men women')\n\n    equation1 = Eq(women, 4 * men)\n    equation2 = Eq(women, men + 126)\n    \n    solutions = solve((equation1, equation2), (men, women))\n   \n    total_people = solutions[men] + solutions[women]\n    \n    return total_people\n\nans = solution()"
    ],
    "c78925a177374d8b82f3a67f599df2e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, louise = symbols('andrew louise')\n    equation1 = Eq(andrew, 3 * louise)\n    equation2 = Eq(andrew + louise, 84)\n\n    solutions = solve((equation1, equation2), (andrew, louise))\n\n    return solutions[louise]\n\nans = solution()"
    ],
    "43b3978e200e47a993909c47ecd3ded2": [
        "def solution():\n    # assuming that the `average` mentioned is computed only over the \"next four days\".\n    first_three_days = 40\n    average_next_four_days = 20\n    last_two_days = 60\n    \n    # Calculate total pages for the next four days using the average\n    total_next_four_days = average_next_four_days * 4\n    \n    # Total number of pages in the book is the sum of all three parts\n    total_pages = first_three_days + total_next_four_days + last_two_days\n    \n    return total_pages\n\nans = solution()"
    ],
    "8389523689d7482abe8ecaa9a5b6b9ca": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    students, rooms = symbols('students rooms')\n    \n    # If 4 students live in one room, there will be 6 students with no room to live\n    equation1 = Eq(4*rooms + 6, students)\n    # If 5 students live in one room, there will be 1 room without students\n    equation2 = Eq(5*(rooms - 1), students)\n\n    result = solve((equation1, equation2), (students, rooms))\n    \n    return result[students]\n\nans = solution()"
    ],
    "a1289345588b4eea9e075413d1d189c7": [
        "def solution():\n    count = 0\n    for d1 in range(1, 7):\n        for d2 in range(1, 7):\n            for d3 in range(1, 7):\n                if d1 != d2 and d1 != d3 and d2 != d3:\n                    if d1 + d2 + d3 == 12:\n                        count += 1\n    return count\n\nans = solution()"
    ],
    "06964238b9a24ef7b303a09d9b1c85c7": [
        "def solution():\n    bill_age = 70\n    grandsons_ages = [6, 12, 18]\n    while True:\n        bill_age += 1\n        grandsons_ages = [age + 1 for age in grandsons_ages]\n        if bill_age == sum(grandsons_ages):\n            break\n    return bill_age\n\nans = solution()"
    ],
    "324ea1c40561423abe7bda23ae7ac925": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # The congruences are x ≡ 3 (mod 4), x ≡ 3 (mod 5), and x ≡ 3 (mod 9)\n    congruences = [(3, 4), (3, 5), (3, 9)]\n\n    # Using the Chinese Remainder Theorem to solve the system of congruences\n    x, _ = solve_congruence(*congruences)\n\n    # The CRT solution will start at the smallest positive integer that satisfies all congruences\n    # We need to find a number less than 200, thus, if x is more than or equal to 200 we subtract multiples of lcm(4, 5, 9) until it's less\n    lcm = 4 * 5 * 9  # Since 4, 5, 9 are coprime, their LCM is just their product\n\n    while x >= 200:\n        x -= lcm\n\n    return x\n\nans = solution()"
    ],
    "28537d9f7465445e968eb0b26a4a451c": [
        "def solution():\n    sugar_weight_kg = 1\n    pasta_weight_g = 50\n    spaghetti_handful_g = 15\n\n    total_weight_g = (sugar_weight_kg * 1000) + pasta_weight_g + spaghetti_handful_g\n\n    return total_weight_g\n\nans = solution()"
    ],
    "1774a1190e9c46c2aacaa2e8fc28e2da": [
        "def solution():\n    original_total = 7 * 9\n    new_total = 6 * 10\n    removed_number = original_total - new_total\n    return removed_number\n\nans = solution()"
    ],
    "2758e86259aa42e29a0318d2bdb3a711": [
        "def solution():\n    total_people = 120\n    people_left = total_people * (1/3)\n    people_remaining = total_people - people_left\n    return int(people_remaining)\n\nans = solution()"
    ],
    "fd395dd46af44c2fba9a202703ad88e8": [
        "def solution():\n    x = (16 - 1) / 5\n    return x\n\nans = solution()"
    ],
    "314a52b81cf948798c3eb0b23a09fb4e": [
        "def solution():\n    total_questions = 20\n    correct_mark = 5\n    wrong_mark = -2\n    total_marks = 79\n    \n    for correct_answers in range(total_questions + 1):\n        if correct_answers * correct_mark + (total_questions - correct_answers) * wrong_mark == total_marks:\n            return correct_answers\n\nans = solution()"
    ],
    "9562aafe97384f7ea95275fcb79e1da2": [
        "def solution():\n    from math import lcm\n\n    interval_aytown = 15\n    interval_beeville = 12\n    interval_ceeford = 8\n\n    # Calculate least common multiple of the three intervals\n    lcm_interval = lcm(interval_aytown, interval_beeville, interval_ceeford)\n\n    # Convert minutes to hours\n    hours = lcm_interval // 60\n    minutes = lcm_interval % 60\n\n    # The start time is 10:00 am\n    start_hours = 10\n    start_minutes = 0\n\n    # Calculate the next time\n    next_time_hours = start_hours + hours\n    next_time_minutes = start_minutes + minutes\n    \n    # Adjust for any extra hours from minutes and format the time\n    if next_time_minutes >= 60:\n        next_time_hours += next_time_minutes // 60\n        next_time_minutes %= 60\n\n    return f\"{next_time_hours:02d}:{next_time_minutes:02d}\"\n\nans = solution()"
    ],
    "770aa7f2ec2448dfb419dc832282a417": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(56 - 4 * (20 - 6 * x), 48)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "98f594e37f074962982921040758a2f4": [
        "def solution():\n    count = 0\n    for page in range(1, 106):\n        count += str(page).count('0')\n    return count\n\nans = solution()"
    ],
    "7a6352d69d43478d857666ac24c5efac": [
        "def solution():\n    value = (3999 * 2014.2014 + 3999.3999 * 2014) / 12.0012\n    ans = value\n    return ans\n\nans = solution()"
    ],
    "8d509648485641b48c77ecbbb044bdcf": [
        "def solution():\n    piles = 6\n    apples_per_pile = 8\n    total_apples = piles * apples_per_pile\n    return total_apples\n\nans = solution()"
    ],
    "12599cd086b74a6dbee49affc2b9da94": [
        "def solution():\n    time_to_pass = 30  # time to pass the tree in seconds\n    train_length = 360  # length of the train in meters\n\n    # Speed is distance divided by time\n    speed = train_length / time_to_pass\n\n    return speed  # speed in meters per second\n\nans = solution()"
    ],
    "499aa61be1124476bb26bc1e720b0c26": [
        "def solution():\n    daily_progress = 3 - 1\n    height_to_climb = 11 - 3  # Subtract the last day's progress when it escapes\n    days = height_to_climb // daily_progress\n    if height_to_climb % daily_progress != 0:\n        days += 1\n    return days + 1  # Add the last day when it climbs out\n\nans = solution()"
    ],
    "a8c99058f45b4a2a8e447d1b68ae74bc": [
        "def solution():\n    # Eddie can choose from Chinese, Mexican or Fast Food restaurants\n    chinese_restaurants = 8\n    mexican_restaurants = 6\n    fast_food_restaurants = 4\n    \n    # Total different choices Eddie has\n    total_choices = chinese_restaurants + mexican_restaurants + fast_food_restaurants\n    \n    return total_choices\n\nans = solution()"
    ],
    "06b1e5f9947e4439b6bdd18c70668419": [
        "def solution():\n    # Take all marbles of the most abundant color (12 red marbles), \n    # then take all marbles of the second most abundant color (9 blue marbles),\n    # and then take all marbles of the third most abundant color (8 yellow marbles).\n    # This ensures that we have 3 colors. To ensure the fourth color,\n    # we need to take at least 1 more marble (any of the remaining 3 red marbles).\n    # So the total number of marbles drawn to ensure 4 different colors is:\n    most_abundant_three_colors = 12 + 9 + 8\n    at_least_one_more = 1\n    return most_abundant_three_colors + at_least_one_more\n\nans = solution()"
    ],
    "6c11b151fed94fb483ea9f5b76290855": [
        "def solution():\n    for i in range(1, 100):\n        if (24 - 10) % i == 0 and (24 - 10) // i == i // 2:\n            return i * 2\n\nans = solution()"
    ],
    "a033d32f04c4454c8b6d34df01854889": [
        "def solution():\n    return 7.72 - 7.54\n\nans = solution()"
    ],
    "60370cf36b164039b0b08b75d45daf26": [
        "def solution():\n    total_students = 52\n    swimmers = 30\n    cyclists = 35\n    table_tennis_players = 42\n\n    # Applying the Inclusion-Exclusion Principle for three sets\n    # |A ∪ B ∪ C| = |A| + |B| + |C| - |A ∩ B| - |A ∩ C| - |B ∩ C| + |A ∩ B ∩ C|\n    # We need to find the minimum |A ∩ B ∩ C|, let's denote it as all_three\n    # To find the minimum all_three, we will assume that the intersection of\n    # any two sets is at its maximum, i.e., the number of students in the\n    # smaller set.\n    # Let's assume |A ∩ B| = |B| (since |B| <= |A|), |A ∩ C| = |C|,\n    # |B ∩ C| = |C|\n    # And we know |A ∪ B ∪ C| <= total_students\n\n    both_swim_cycle = cyclists  # assuming all cyclists are swimmers\n    both_swim_tennis = table_tennis_players  # assuming all table tennis players are swimmers\n    both_cycle_tennis = table_tennis_players  # assuming all table tennis players are cyclists\n\n    # The number of students who play all three sports would be\n    all_three = (swimmers + cyclists + table_tennis_players) - \\\n        (both_swim_cycle + both_swim_tennis + both_cycle_tennis)\n\n    while all_three > total_students:\n        both_swim_cycle -= 1\n        both_swim_tennis -= 1\n        both_cycle_tennis -= 1\n        all_three = (swimmers + cyclists + table_tennis_players) - \\\n            (both_swim_cycle + both_swim_tennis + both_cycle_tennis)\n\n    return all_three\n\nans = solution()"
    ],
    "1a58479ac34b4689bdb3e7c074f88212": [
        "def solution():\n    total_money = 80\n    books_percent = 20\n    books_spending = (books_percent / 100) * total_money\n\n    # Let transport cost be x\n    # Then food cost is 3x\n    # Savings is 3x - 6\n    # Total spending = 3x + x + (3x - 6) + books_spending = 80\n    # 7x - 6 + books_spending = 80\n    # 7x = 80 - books_spending + 6\n    # 7x = 80 - (20/100)*80 + 6\n\n    total_without_books = total_money - books_spending\n\n    x = (total_without_books + 6) / 7\n    savings = 3 * x - 6\n\n    savings_percent = (savings / total_money) * 100\n\n    return savings_percent\n\nans = solution()"
    ],
    "541674da97474788b63ff77b2d0287bb": [
        "def solution():\n    from math import lcm\n    \n    robot_A_interval = 24\n    robot_B_interval = 64\n    \n    ans = lcm(robot_A_interval, robot_B_interval)\n    \n    return ans\n\nans = solution()"
    ],
    "6829f51b13a0426fb1a619b064401568": [
        "def solution():\n    factors_of_75 = [i for i in range(1, 76) if 75 % i == 0]\n    for number in factors_of_75:\n        if 10 <= number <= 99 and number % 6 == 3:\n            return number\n\nans = solution()"
    ],
    "bf31842e59b84f869bdd3a0411e455df": [
        "def solution():\n    # Correcting the mistake: actual subtrahend is 14\n    # Let's denote the minuend (the number being subtracted from) as x.\n    # According to Little Miss Careless's mistake: x - 41 = 50\n    # Therefore, x = 50 + 41\n    careless_minuend = 50 + 41\n    \n    # Now, using the correct subtrahend (14), we calculate the correct difference.\n    # Correct difference: x - 14\n    correct_difference = careless_minuend - 14\n    \n    return correct_difference\n\nans = solution()"
    ],
    "93403cabcded4b63968e13348f241754": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(34 - 3 * (2*x - 2), 16)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "a778b5cfeeed482b83f37aa61c3b6eb5": [
        "def solution():\n    sum = 0\n    sign = 1\n    for i in range(40, 21, -2):\n        sum += sign * i\n        sign *= -1  # Flip the sign\n    return sum\n\nans = solution()"
    ],
    "86d0f1125cdd46ac9604c4d192220e10": [
        "def solution():\n    return 45.36 + 1.25 + 2.75 + 4.64\n\nans = solution()"
    ],
    "5384b43a54f049ec9c65ebb35ee718c1": [
        "def solution():\n    justin_ate = 4\n    sisters_ate = 4 * 5\n    apples_left = 20\n\n    total_apples_before = justin_ate + sisters_ate + apples_left\n\n    return total_apples_before\n\nans = solution()"
    ],
    "3daa406fe23b4025ab00fffd6760fde8": [
        "def solution():\n    total = 0\n    # Count for numbers with 4 digits\n    for thousands in range(3, 6):  # Because the number is between 3267 and 5120\n        for hundreds in range(0, 6):  # Any digit from 0 to 5 but adjusted in the loop for valid numbers\n            if hundreds == thousands:\n                continue\n            for tens in range(0, 6):\n                if tens == thousands or tens == hundreds:\n                    continue\n                for ones in range(0, 6):\n                    if ones == thousands or ones == hundreds or ones == tens:\n                        continue\n                    num = 1000 * thousands + 100 * hundreds + 10 * tens + ones\n                    if 3267 <= num <= 5120:\n                        total += 1\n                        \n    # Count for numbers with three digits (as leading zeros are not counted in typical integer representations)\n    for hundreds in [4, 5]:  # Because the number is between 3267 and 5120, it starts only with 4 and 5\n        for tens in range(0, 6):\n            if tens == hundreds:\n                continue\n            for ones in range(0, 6):\n                if ones == tens or ones == hundreds:\n                    continue\n                # Since we are dealing with 3 digit numbers, we start from 100's place\n                num = 100 * hundreds + 10 * tens + ones\n                if 3267 <= num <= 5120:\n                    total += 1\n\n    return total\n\nans = solution()"
    ],
    "ae3921e4e39849ffbe3f0c238b81b81b": [
        "def solution():\n    principal = 5000\n    final_amount = 7320.5\n    years = 4\n\n    rate = (final_amount / principal) ** (1 / years) - 1\n\n    return round(rate, 4)\n\nans = solution()"
    ],
    "3b5e11ff28904b30b8919884597986b5": [
        "def solution():\n    return 888 // 24\n\nans = solution()"
    ],
    "d9ed06f56ae74dfcb2fd97b178c32dea": [
        "def solution():\n    factors_of_66 = [i for i in range(1, 67) if 66 % i == 0]\n    possible_ages = [age for age in factors_of_66 if (age - 4) % 6 == 0]\n\n    return possible_ages[-1]\n\nans = solution()"
    ],
    "c3b93f4ccd0047d9b0123beb59667db6": [
        "def solution():\n    return 56 / 21\n\nans = solution()"
    ],
    "f43eb58f48b14c988c4e389d78a71faa": [
        "def solution():\n    total_saved = 4410\n    january_saved = 2450\n    march_saved = 855\n    february_saved = total_saved - january_saved - march_saved\n    return february_saved\n\nans = solution()"
    ],
    "df97cfc5a9874cc7aac262f019e950a2": [
        "def solution():\n    import sympy as sp\n\n    n = sp.symbols('n', integer=True, positive=True)\n    \n    # Original square has n^2 soldiers\n    # After 31 soldiers joined, the square has (n+1)^2 soldiers\n    # The change in soldiers is therefore (n+1)^2 - n^2 = 31\n    equation = sp.Eq((n + 1)**2 - n**2, 31)\n\n    # Solve for n\n    n_solution = sp.solve(equation, n)[0]\n\n    # Find the total number of soldiers after the new row and column are added\n    total_soldiers = (n_solution + 1)**2\n\n    return total_soldiers\n\nans = solution()"
    ],
    "a7e6156c711b427a80b6ffdd8bebbce8": [
        "def solution():\n    initial_value = 176\n    final_value = 88\n    percent_change = ((final_value - initial_value) / initial_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "3009ddde568d44929af80990edfca6a6": [
        "def solution():\n    a = 3.2\n    b = 6.77\n    c = 8.88\n    d = 6.3\n    \n    ans = ((a + b + c) * (b + c + d) - (a + b + c + d) * (b + c))\n    return ans\n\nans = solution()"
    ],
    "644892f23d5d42ca9787cd008215de03": [
        "def solution():\n    time_per_picture = 10  # minutes\n    total_time = 80  # one hour and twenty minutes in minutes\n\n    num_pictures = total_time / time_per_picture\n\n    return int(num_pictures)\n\nans = solution()"
    ],
    "5f662e9aa4db4fbfbf1a266b8558e2a8": [
        "def solution():\n    seconds_per_minute = 60\n    minutes = 8\n    total_seconds = seconds_per_minute * minutes\n    return total_seconds\n\nans = solution()"
    ],
    "bf846dec93ce477ab47a02ca859245e6": [
        "def solution():\n    final_amount = 924\n    interest_rate = 0.08\n    number_of_years = 4\n\n    initial_deposit = final_amount / ((1 + interest_rate) ** number_of_years)\n\n    return initial_deposit\n\nans = solution()"
    ],
    "e199247a5e3f4630aa1a02b225d3db54": [
        "def solution():\n    ans = 7.3 - 2.64\n    return ans\n\nans = solution()"
    ],
    "26b43a4d19504cc39391c90f265a8e59": [
        "def solution():\n    # Total number of apples\n    total_apples = 30\n    # Number of other children\n    other_children = 5\n    # Each child gets at least one apple, so we subtract this minimum part\n    minimum_apples_for_others = other_children\n    # Calculate the maximum possible apples for Ann\n    max_apples_for_ann = total_apples - minimum_apples_for_others\n\n    return max_apples_for_ann\n\nans = solution()"
    ],
    "36a3b0319aa94ac78912a13a30272f8d": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('1356789'):\n        first_number = int(''.join(perm[:3]))\n        second_number = int(''.join(perm[3:5]))  # second number uses two digits\n        third_number = int(''.join(perm[5:]))  # third number uses two digits\n        if second_number == 2 * first_number and third_number == 4 * first_number:\n            return third_number\n\nans = solution()"
    ],
    "e8548c7b8d69402e81f35205050bd98d": [
        "def solution():\n    shirts = 3\n    pants = 2\n    dresses = 3\n    shoes = 4\n    heels = 2\n\n    # Combinations with pants and shoes\n    pants_shoes_combinations = shirts * pants * shoes\n\n    # Combinations with dress and shoes or heels\n    dress_shoes_combinations = dresses * (shoes + heels)\n\n    # Total combinations\n    total_combinations = pants_shoes_combinations + dress_shoes_combinations\n\n    return total_combinations\n\nans = solution()"
    ],
    "182737e9117d46c389cc27f2a8aad6c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the objects\n    A, B, C = symbols('A B C')\n\n    # Create equations based on the problem statements\n    equation1 = Eq(A + B, 13)  # Object A and Object B weigh 13 kg together\n    equation2 = Eq(A + C, 25)  # Object A and Object C weigh 25 kg together\n    equation3 = Eq(C, 3 * B)   # Object C weighs 3 times as much as Object B\n\n    # Solve the system of equations\n    solution = solve((equation1, equation2, equation3), (A, B, C))\n\n    # Fetch the solution for the mass of Object A\n    return solution[A]\n\nans = solution()"
    ],
    "cf31bb404b754d18bd83978a61ac8d0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, teddy_bear = symbols('book teddy_bear')\n\n    equation1 = Eq(4 * book + 8 * teddy_bear, 164)\n    equation2 = Eq(2 * book + 3 * teddy_bear, 67)\n\n    solutions = solve((equation1, equation2), (book, teddy_bear))\n\n    return solutions[book]\n\nans = solution()"
    ],
    "8813aaf9e8434f92984ad99a90e18eb9": [
        "def solution():\n    # Since the highest common factor (HCF) is 75 which is 3^1 * 5^2\n    # We will try to find all other factors of M and N filling in powers of 3 and 5\n    primes = [3, 5]\n    # Since M has 12 = 2 * 2 * 3 (3 being prime) factors, then this limits M to be in the form 3^a * 5^b where b = 2 (because of HCF)\n    # Similarly, N with 10 = 2 * 5 factors limits N to be in the form 3^c * 5^d where d = 2 (because of HCF)\n    # Therefore, to get a number of factors as M and N we need the exponent of 3 to be one less since we already have 2 for the exponent of 5 (from HCF)\n    # So M has 3^(3) * 5^2 (since 3 * 4 = 12 factors) and N has 3^(1) * 5^4 (since 2 * 5 = 10 factors)\n    # Maximum power for 3 for M is (3 - 1) because we have 2 for the power of 5. Similarly, maximum power for 3 for N is (5 - 1)\n    \n    M = primes[0]**(3) * primes[1]**2\n    N = primes[0] * primes[1]**4\n    \n    return M + N\n\nans = solution()"
    ],
    "a38308f19b794b3b96e4cb5fede094c4": [
        "def solution():\n    total_mass_kg = 9\n    total_mass_g = 5\n    soil_mass_kg = 4\n    soil_mass_g = 50\n\n    # Convert total mass to grams\n    total_mass_g += total_mass_kg * 1000\n    # Convert soil mass to grams\n    soil_mass_g += soil_mass_kg * 1000\n\n    # Calculate the mass of the pack of sand in grams\n    sand_mass_g = total_mass_g - soil_mass_g\n\n    # Find the difference between the soil and sand masses\n    difference = abs(soil_mass_g - sand_mass_g)\n\n    # Convert the difference back to kilograms and grams\n    difference_kg = difference // 1000\n    difference_g = difference % 1000\n\n    # Since we are looking for the difference in the same unit, no need to convert, just return the difference in grams\n    return difference_g\n\nans = solution()"
    ],
    "1530f45644534ab9a97cbe5b7104abc7": [
        "def solution():\n    ans = 1\n    for i in range(2, 101):\n        for j in range(1, i):\n            ans += j / i\n    return ans\n\nans = solution()"
    ],
    "6c6e0d85d93f4c04993e70d48958151d": [
        "def solution():\n    for correct_answers in range(11):\n        incorrect_answers = 10 - correct_answers\n        if 4 * correct_answers - 2 * incorrect_answers == 29:\n            return correct_answers\n\nans = solution()"
    ],
    "1bf59a6dc1ea4ff38f6849f658bfb007": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    james, nina = symbols('james nina')\n\n    # Equation 1: Total number of buttons James and Nina have\n    equation1 = Eq(james + nina, 22)\n\n    # Equation 2: After Nina gives 4 buttons to James, they have the same number of buttons\n    equation2 = Eq(james + 4, nina - 4)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (james, nina))\n\n    # Number of buttons Nina has originally\n    return solutions[nina]\n\nans = solution()"
    ],
    "217f4abc2ab44264affad60373305d47": [
        "def solution():\n    total_trees = 79\n    total_distance = 320\n    # Subtract one from the total trees as the intervals are between the trees\n    intervals = total_trees - 1\n    # Find the distance for each interval\n    distance_between_each_tree = total_distance / intervals\n    return distance_between_each_tree\n\nans = solution()"
    ],
    "0072c8403a1845a5b093725c5bb5aeaf": [
        "def solution():\n    pattern_length = 5\n    total_length = 52\n    full_patterns = total_length // pattern_length\n    remaining_digits = total_length % pattern_length\n    \n    sum_full_patterns = (1 + 2 + 3 + 4 + 5) * full_patterns\n    sum_remaining_digits = sum(range(1, remaining_digits + 1))\n    \n    ans = sum_full_patterns + sum_remaining_digits\n    return ans\n\nans = solution()"
    ],
    "6d8bf3a7fce3414a9c67c4a3fa1f7c48": [
        "def solution():\n    paper_per_kite = 0.36\n    total_paper = 4.8\n\n    num_kites = total_paper // paper_per_kite\n\n    return int(num_kites)\n\nans = solution()"
    ],
    "b65a5554264043bb99d0c4476d46daa7": [
        "from fractions import Fraction\n\ndef solution():\n    total_length = 10 + Fraction(4, 5)\n    short_rod_length = Fraction(3, 10)\n    number_of_short_rods = total_length // short_rod_length\n    return number_of_short_rods\n\nans = solution()"
    ],
    "2d9fc3817dca46ac92eaa73adac8ada7": [
        "def solution():\n    # Owen trades 10 fish for 4 rabbits: the ratio of fish to rabbits is 10:4 or 5:2\n    # Oscar trades 5 rabbits for 6 packs of wheat: the ratio of rabbits to packs of wheat is 5:6\n    \n    # Calculate ratio of fish to packs of wheat by multiplying the two ratios\n    # (fish to rabbits) * (rabbits to packs of wheat) = (fish to packs of wheat)\n    # (5 fish / 2 rabbits) * (5 rabbits / 6 packs of wheat) = (25 fish / 12 packs of wheat)\n\n    # Simplify the ratio by multiplying both the numerator and the denominator by 2\n    # This is because Owen wants to receive 12 packs of wheat, which is the denominator we want to reach.\n    fish_for_12_wheat = (25 * 2) / (12 * 2) / 6 * 12\n\n    return fish_for_12_wheat\n\nans = solution()"
    ],
    "6422450ba3314b00956e086caa019113": [
        "def solution():\n    original_price = 125\n    discount_percentage = 35\n    discount_amount = (discount_percentage / 100) * original_price\n    final_price = original_price - discount_amount\n    return final_price\n\nans = solution()"
    ],
    "604b32ec4594413a9da6ea7f419a86e6": [
        "def solution():\n    single_price = 149.99\n    deal_price_total = 2800\n    deal_price_per_unit = deal_price_total / 30\n\n    cost_without_deal = 20 * single_price\n    cost_with_deal = 20 * deal_price_per_unit\n\n    savings = cost_without_deal - cost_with_deal\n\n    return savings\n\nans = solution()"
    ],
    "6d6c627dff57484693f832331a8fed28": [
        "from math import factorial as fact\n\ndef solution():\n    # Calculate the number of ways to arrange dancing performances with space between them\n    # there are 5 slots to insert dancing performance between singing performance (including start and end)\n    # 4 dancing performance can be put in these 5 slots following the rule as C(5, 4)\n    dancing_ways = fact(5) // (fact(4) * fact(5 - 4))\n\n    # Calculate the number of ways to arrange the singing performances\n    singing_ways = fact(6)\n\n    # The total number of ways is the product of the two\n    total_ways = singing_ways * dancing_ways\n    return total_ways\n\nans = solution()"
    ],
    "558a4fe5c5fe460f838fa7deae63c54b": [
        "def solution():\n    hourly_rate = 5.12\n    hours_worked = 8\n    earnings = hourly_rate * hours_worked\n    return earnings\n\nans = solution()"
    ],
    "01b4b64e032345db96ca5a028d2343db": [
        "def solution():\n    incorrect_result = -14\n    subtracted_instead_of_adding = 26\n    original_number = incorrect_result + subtracted_instead_of_adding\n    correct_result = original_number + 2 * subtracted_instead_of_adding\n    return correct_result\n\nans = solution()"
    ],
    "6d6721335237466b8bf898c20f70285f": [
        "def solution():\n    fish_left_when_3 = 5\n    fish_short_when_4 = 15\n\n    # Let the number of fish be F, and the number of penguins be P\n    # When giving 3 fish to each penguin: F = 3P + 5\n    # When giving 4 fish to each penguin: F = 4P - 15\n    # Equating both we get: 3P + 5 = 4P - 15\n    \n    # Solving for P:\n    P = fish_left_when_3 + fish_short_when_4\n    \n    # Assign the answer to the variable 'ans'\n    ans = P\n    return ans\n\nans = solution()"
    ],
    "0dd1e1e4796044aeb251dbf0652d6b52": [
        "def solution():\n    ans = 322 - (95 - 87) * 16\n    return ans\n\nans = solution()"
    ],
    "25b73873a475424bb2c3460ea7370ffc": [
        "def solution():\n    matthew_height = 120\n    ratio_matthew = 4\n    ratio_kelly = 5\n\n    kelly_height = (matthew_height / ratio_matthew) * ratio_kelly\n    return kelly_height\n\nans = solution()"
    ],
    "6dead3e618154fcda9ed1a944c4d862e": [
        "def solution():\n    percentage = 35 / 100\n    number = 80\n    ans = percentage * number\n    return ans\n\nans = solution()"
    ],
    "c408c811fcb041b3aa27099ad68703f4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for x\n    x = symbols('x')\n\n    # Define the equation\n    equation = Eq(28 - 3 * (24 - 5 * x), 1)\n\n    # Solve the equation\n    solution = solve(equation, x)\n\n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "056eb54e02ef4e86834ab49cf3cc01b4": [
        "def solution():\n    return 689 // 13\n\nans = solution()"
    ],
    "61bb0063c0734b36a1996af254e6fb90": [
        "def solution():\n    original_cards = 56\n    lost_fraction = 3/8\n    lost_cards = original_cards * lost_fraction\n\n    return int(lost_cards)\n\nans = solution()"
    ],
    "ada569f0735e44a5b658b942af33e959": [
        "def solution():\n    # Initialize the count of half time scores\n    count = 0\n\n    # Full-time score is 3-2, either team could have the 3 points.\n    # To get half-time scores, we must consider that the second half cannot have\n    # more goals than the full-time score for either team.\n  \n    for team1_half in range(4):  # team1 can score 0, 1, 2, or 3 goals by half-time\n        for team2_half in range(3):  # team2 can score 0, 1, or 2 goals by half-time\n            # Now we need to check if it's possible to reach the full-time score from this half-time score\n            # The first team must score less than or equal to 3 goals in the first half\n            # The second team must score less than or equal to 2 goals\n\n            # Calculate the remaining goals that need to be scored in the second half\n            team1_second_half_goals = 3 - team1_half\n            team2_second_half_goals = 2 - team2_half\n\n            # If both teams can score these goals in the second half then this is a valid half-time score\n            if team1_second_half_goals >= 0 and team2_second_half_goals >= 0:\n                count += 1\n\n    return count\n\nans = solution()"
    ],
    "d3a2000bbe0d4458a84669bc22de18a2": [
        "from math import comb\n\ndef solution():\n    num_students = 6\n    num_monitors = 2\n    return comb(num_students, num_monitors)\n\nans = solution()"
    ],
    "02bd6a91ac214217ad925716b17c6508": [
        "def solution():\n    for a in range(1, 10):  # a cannot be 0 because then it wouldn't be a two-digit number\n        for b in range(10):\n            if (a * 10 + b) + (b * 10 + a) + b == (a * 100 + a * 10 + b):\n                return a + b\n\nans = solution()"
    ],
    "2789484c36cf4e54b28be43d05009e13": [
        "def solution():\n    total_cookies = 1002\n    # Let the number of cookies baked by Emma be x.\n    # According to the problem, Clara baked 5 times the cookies Emma did, so Clara baked 5x cookies.\n    # Together, they baked a total of 1002 cookies, so x + 5x = 1002.\n    x = symbols('x')\n    equation = Eq(x + 5 * x, total_cookies)\n    cookies_emma = solve(equation, x)\n\n    return cookies_emma[x]\n\nans = solution()"
    ],
    "879e5feaeecc4a8ea542b447bc7e8fce": [
        "def solution():\n    full_weight = 80\n    half_full_weight = 60\n    half_mangoes_weight = full_weight - half_full_weight\n    empty_basket_weight = half_full_weight - half_mangoes_weight\n\n    return empty_basket_weight\n\nans = solution()"
    ],
    "b6d07c1739e540859bca83cddbe021fd": [
        "def solution():\n    percentage = 85 / 100\n    total_amount = 400\n    amount = percentage * total_amount\n    return amount\n\nans = solution()"
    ],
    "31f14949d8114ab8a17cdccc2df7d350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the total number of boys (b) and girls (g) in the class.\n    b, g = symbols('b g')\n\n    # Define the equations based on the problem statement.\n    # Since there's an equal number of boys and girls who cannot swim, we can directly write the equation as follows:\n    equation1 = Eq((3/8) * g + (3/5) * b, g + b - 20)  # The total number minus those who cannot swim.\n    equation2 = Eq((5/8) * g, (2/5) * b)  # The same number of boys and girls cannot swim.\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (b, g))\n\n    # The total number of pupils in the class is the sum of boys and girls.\n    total_pupils = solutions[b] + solutions[g]\n\n    return total_pupils\n\nans = solution()"
    ],
    "e59a69364151431da70cfdb7b285eac6": [
        "def solution():\n    return 32 * 125 * 23\n\nans = solution()"
    ],
    "c322675f6c904cb28fcb4d8fcdeea6df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(8.5 - 4*(x - 1.5) + 3.2*(x - 2), 2.5*x + 3*(2.5 - x))\n    ans = solve(equation, x)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "42e36157dca7436e992427566b464adc": [
        "def solution():\n    bud_left = 16\n    pip_ate_fraction = 3/5\n\n    total_sweets = bud_left / (1 - pip_ate_fraction)\n\n    return int(total_sweets)\n\nans = solution()"
    ],
    "d40f5cb1f6a24d038e89fe06cd993eb4": [
        "def solution():\n    result = 6 * 5\n    number_in_box = (result / 40) * 100\n    return number_in_box\n\nans = solution()"
    ],
    "cd20ea5fd0f64dad8fea2ee8adb41891": [
        "def solution():\n    # Since the arrangement is a perfect rectangular array and Mike is always 2nd no matter how counted,\n    # It implies Mike's seat position is at (row-2, column-2), where row and column are the numbers of\n    # rows and columns in the array respectively\n    # And since it is a perfect rectangle, the total number of students is row*column\n    students = 0\n    # Loop through all possible combinations where (row-2)*(column-2) is Mike's position\n    for row in range(3, 100):      # Start with 3 because Mike is the second so there must be at least 3 rows\n        for column in range(3, 100):  # Same with columns, as there must be at least 3\n            if (row-2) * (column-2) == 1:  # Mike's position yields 1 way to count him as 2nd\n                students = row * column\n                break\n        if students != 0:\n            break\n    return students\n\nans = solution()"
    ],
    "813f3075f35d4821a1a7fc16e2f6d52b": [
        "def solution():\n    ans = 5 * 57 * 4\n    return ans\n\nans = solution()"
    ],
    "103d552fb6da4c0783be7a342f20b8bc": [
        "def solution():\n    cost_per_cup = 30 / 3\n    total_cost_for_5_cups = cost_per_cup * 5\n    return total_cost_for_5_cups\n\nans = solution()"
    ],
    "43a325f2110643bc915bdc94e8f7b758": [
        "def solution():\n    total_rabbits = 38\n    big_houses = 5\n    small_houses = 9\n    big_house_capacity = 4\n\n    big_house_total_capacity = big_houses * big_house_capacity\n    remaining_rabbits = total_rabbits - big_house_total_capacity\n    small_house_capacity = remaining_rabbits / small_houses\n\n    return small_house_capacity\n\nans = solution()"
    ],
    "308e0096e80b4f19bf3d9b5c553a195d": [
        "def solution():\n    average_earnings_per_day = 60\n    number_of_days = 7  # From Monday to Sunday\n\n    total_earnings = average_earnings_per_day * number_of_days\n\n    return total_earnings\n\nans = solution()"
    ],
    "65f6b4e0577647579449a1aa4cc3fa40": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 9):\n        if i % 2 == 0:\n            total_sum += (i+1)**2 - i**2\n        else:\n            total_sum -= (i+1)**2 - i**2\n    return total_sum\n\nans = solution()"
    ],
    "b1efeaefd31345e39a5a87a2bb5673a9": [
        "def solution():\n    total_children = 234\n    absent_children = 75\n    present_children = total_children - absent_children\n    return present_children\n\nans = solution()"
    ],
    "9d723089837f477db7a98fc0d0033d94": [
        "def solution():\n    ans = 5 - 1.02\n    return ans\n\nans = solution()"
    ],
    "4b507d02ac2f4e03895bd099fa8097c8": [
        "def solution():\n    average_pizzas_per_month = 15\n    number_of_months = 5  # From March to July is 5 months\n\n    total_pizzas = average_pizzas_per_month * number_of_months\n\n    return total_pizzas\n\nans = solution()"
    ],
    "8aa18ff22f444b93b44cb12fdcc6688e": [
        "def solution():\n    dp = [0]*(6+1) # Create an array to store the number of ways to reach each step\n    dp[0] = 1 # Base case: there is one way to stay on the ground (0 steps)\n\n    for i in range(1, 7):\n        dp[i] += dp[i - 1] if i - 1 >= 0 else 0\n        dp[i] += dp[i - 2] if i - 2 >= 0 else 0\n        dp[i] += dp[i - 3] if i - 3 >= 0 else 0\n\n    return dp[6]\n    \nans = solution()"
    ],
    "340fa54260fb43788db3cac05726737c": [
        "def solution():\n    total_sum = 21 + 22 + 23\n    product = 2 * 3\n    ans = total_sum // product\n    return ans\n\nans = solution()"
    ],
    "5206643ac0d74672bd7f51f36c05b327": [
        "def solution():\n    ans = 21 + 27 + 19 - 17\n    return ans\n\nans = solution()"
    ],
    "6a0715adbecf4e6d977379c6d8e8b693": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    abigail, ryan = symbols('abigail ryan')\n\n    equation1 = Eq(abigail, 3 * ryan)\n    equation2 = Eq(abigail + 6, 42)\n\n    solutions = solve((equation1, equation2), (abigail, ryan))\n\n    ryan_age_in_2_years = solutions[ryan] + 2\n\n    return ryan_age_in_2_years\n\nans = solution()"
    ],
    "a63c3f97f6f747fb8f6167272df4d9e0": [
        "def solution():\n    ans = 20.2 * 3.83 + 2.02 * 143.7 + 18.2 * 79.8\n    return ans\n\nans = solution()"
    ],
    "db1980b14fff4be98f10937c9ad2d0bb": [
        "def solution():\n    speed_still_water = 33\n    speed_current = 3\n    distance = 150\n\n    # Calculate upstream speed\n    speed_upstream = speed_still_water - speed_current\n\n    # Calculate travel time\n    time = distance / speed_upstream\n\n    return time\n\nans = solution()"
    ],
    "61e1de37a14f48a6991bab9a2d3a4694": [
        "def solution():\n    for num in range(1, 100):\n        if num % 3 == 2 and num % 4 == 3 and num % 5 == 4:\n            return num\n\nans = solution()"
    ],
    "7b0029bc1a5e4ae98eb2f317f91d9e07": [
        "def solution():\n    return (3.5 + 6.9) / 2\n\nans = solution()"
    ],
    "6e6e70f8c762461081d8768c9cd5d599": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    drink, popcorn = symbols('drink popcorn')\n\n    # 90p is written as 0.9 in pounds, since £1 = 100p\n    equation1 = Eq(drink + popcorn, 0.90)\n    # £1.45 is written directly as 1.45 in pounds\n    equation2 = Eq(2 * drink + popcorn, 1.45)\n\n    solutions = solve((equation1, equation2), (drink, popcorn))\n\n    return solutions[popcorn]\n\nans = solution()"
    ],
    "2ef08403147440cebc886fef6d923504": [
        "def solution():\n    first_multiple = -(-56 // 4) * 4  # Using ceiling division to find the first multiple of 4 >= 56\n    last_multiple = 92 // 4 * 4  # Using floor division to find the last multiple of 4 <= 92\n    \n    num_multiples = (last_multiple - first_multiple) // 4 + 1\n\n    return num_multiples\n\nans = solution()"
    ],
    "ff21b342853b4526901990586afdd9a1": [
        "def solution():\n    ans = 0\n    sign = 1  # start with positive sign\n    for i in range(60, 0, -1):\n        ans += i * sign\n        if i % 4 == 3:  # change sign after every two numbers\n            sign *= -1\n    return ans\n\nans = solution()"
    ],
    "938865d708b54013bdffe7745f3c071e": [
        "def solution():\n    first_term = 2\n    last_term = 50\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_series\n\nans = solution()"
    ],
    "9566235419c644bda8f4a29fbdf4e32d": [
        "def solution():\n    ans = 80 * 125 * 63\n    return ans\n\nans = solution()"
    ],
    "2dc1cabb496241cf9e53891c8379b8e2": [
        "def solution():\n    return 526 * 4\n\nans = solution()"
    ],
    "243b6cce4d9f45acafd03f1040ae77c4": [
        "def solution():\n    # Since we are interested only in the ones digit,\n    # we can observe the pattern of the ones digit for powers of 9.\n    # The pattern is: 9, 1, 9, 1, ... (i.e., 9^1=9, 9^2=81, 9^3=729, 9^4=6561, and so on)\n    # So the ones digit for 9^(odd number) is 9 and for 9^(even number) is 1.\n\n    # Since 99 is an odd number, the ones digit for 9^99 is the same as for 9^1, which is 9.\n    ones_digit = 9\n\n    return ones_digit\n\nans = solution()"
    ],
    "d40d9028269a40b1a074fb83c6e6f359": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Claire's current age as `claire`.\n    claire = symbols('claire')\n\n    # Create the equation based on the problem statement.\n    # In 6 years, Claire will be three times her current age.\n    equation = Eq(claire + 6, 3 * claire)\n\n    # Solve the equation to find Claire's current age.\n    claire_current_age = solve(equation, claire)[0]\n\n    # Calculate what Claire's age will be two years from now.\n    claire_age_in_2_years = claire_current_age + 2\n\n    return claire_age_in_2_years\n\nans = solution()"
    ],
    "e488c808a03c473b9671ebeb77e0b942": [
        "def solution():\n    ans = (4/15) - (7/10) + (11/15) - (3/10)\n    return ans\n\nans = solution()"
    ],
    "494ec1b29a6b4fa3a72a5c3c403e4f01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for the standard journey time\n    standard_time = symbols('standard_time')\n    \n    # Equation for the journey considering the delays and the fraction of the time it took\n    equation = Eq((11/12) * standard_time + 15 - 5, standard_time)\n    \n    # Solve the equation to find the standard journey time\n    solved_time = solve(equation, standard_time)\n    \n    # Extract the solution (as a float, since we are likely dealing with minutes)\n    journey_time = float(solved_time[0])\n    \n    return journey_time\n\nans = solution()"
    ],
    "4674fd3d4c514026b6edb3199c9264fa": [
        "def solution():\n    year = 2022\n    while True:\n        year += 1\n        if set(str(year)) <= {'0', '2'}:\n            return year - 2022\n\nans = solution()"
    ],
    "51057b69aa2149679627b1da24beca2b": [
        "def solution():\n    total_product = 5.42 * 25\n    known_product = 5.42 * 5\n    missing_number = (total_product - known_product) / 5.42\n    \n    return missing_number\n\nans = solution()"
    ],
    "977dd4a7f9a847319b7cce1778764124": [
        "def solution():\n    total_sweets = 420\n    people = 17\n\n    sweets_per_person = total_sweets // people\n\n    return sweets_per_person\n\nans = solution()"
    ],
    "b2d9b3a92e1e4767a2f8078a10ceb071": [
        "def solution():\n    # assuming UK currency coins of 1p, 2p, 5p, 10p, 20p, 50p, £1 (100p) and £2 (200p)\n    coins = [200, 100, 50, 20, 10, 5, 2, 1]\n    fare = 44\n    # start with a £2 coin as payment to cover any fare and find minimum coins exchanged\n    payment = 200\n    change = payment - fare\n    num_coins = 1  # 1 coin given\n\n    for coin in coins:\n        while change >= coin:\n            change -= coin\n            num_coins += 1  # 1 coin received as change\n\n    return num_coins\n\nans = solution()"
    ],
    "fa054be2367d41a5a66f84ddf604783c": [
        "def solution():\n    return 18 - 12\n\nans = solution()"
    ],
    "b5d10eac540a45de8714ae1313e250a8": [
        "def solution():\n    # To guarantee she gets 4 different colored marbles,\n    # Jane must take all from the most abundant color, plus 3 more marbles\n    # (1 from each of the other colors, worst case scenario).\n    most_abundant = max(4, 7, 6, 2)\n    # Since she takes all from the most abundant (green in this case, which is 7)\n    # and then one from each of the three remaining colors, it adds up to 3 more.\n    must_draw = most_abundant + 3\n    return must_draw\n\nans = solution()"
    ],
    "e77d21bed25146b6a602d491b8b1dd35": [
        "def solution():\n    legs_per_chicken = 8 / 4\n    total_chickens = 9\n    total_legs = legs_per_chicken * total_chickens\n    return int(total_legs)\n\nans = solution()"
    ],
    "fcc1c6b6be6b4c52b0c513c00e208621": [
        "def solution():\n    total_distance = 9\n    day_distance = 3\n    night_distance = 1\n    effective_distance = day_distance - night_distance\n\n    day = 0\n    accumulated_distance = 0\n\n    while True:\n        day += 1\n        accumulated_distance += day_distance\n        if accumulated_distance >= total_distance:\n            break\n        accumulated_distance -= night_distance\n\n    return day\n\nans = solution()"
    ],
    "2718b4f1a9754ccaa68760b5effe4800": [
        "def solution():\n    ans = 7052 + 832 - 523\n    return ans\n\nans = solution()"
    ],
    "930f7e9ace4f4e9abfa6c69bf0acf8ba": [
        "def solution():\n    current_term = 2\n    difference = 1\n    while current_term < 100:\n        difference += 1\n        current_term += difference\n\n    return current_term\n\nans = solution()"
    ],
    "4dbef50f0cc443289ac166137fd5b410": [
        "from math import factorial\n\ndef solution():\n    # Since each kid needs to get at least one book, we can distribute one book to each kid first.\n    remaining_books = 19 - 4\n    \n    # Now we need to find the combinations of distributing remaining books to 4 kids.\n    # This is a problem of distributing n indistinguishable items to r distinguishable boxes,\n    # which is equivalent to the problem of partitioning n items with (r-1) dividers.\n    # The formula for this is: combinations(n + r - 1, r - 1)\n    # We apply this formula to our remaining_books and number of kids (which is 4 - considering as boxes).\n    \n    num_ways = factorial(remaining_books + 4 - 1) // (factorial(remaining_books) * factorial(4 - 1))\n    \n    return num_ways\n\nans = solution()"
    ],
    "71cf4cae85d941ca996a445c85a2b4af": [
        "def solution():\n    ans = (72 - 4) * 6 // 3\n    return ans\n\nans = solution()"
    ],
    "27cc7102419c4252a0693643e0aafd5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C, D = symbols('A B C D')\n    \n    # Given conditions\n    eq1 = Eq(A, 5 * B)\n    eq2 = Eq(B, C + 5)\n    eq3 = Eq(C + D, A)\n    eq4 = Eq(D, 41)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4), (A, B, C, D))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "48433bd7096b4db2b8a0bc0666b48b61": [
        "def solution():\n    from math import comb\n\n    # There are initially 6 pens and 3 pencil cases.\n    # Since each pencil case cannot be empty, we place 1 pen in each case\n    # This leaves us with 6 - 3 = 3 pens to distribute.\n    pens_left = 6 - 3\n    \n    # We have 2 partitions (to separate the pens into 3 pencil cases) \n    # and 3 pens to distribute. This is equivalent to the problem of \n    # distributing indistinguishable objects into distinguishable boxes.\n    # We use the formula: comb(n+k-1, k-1)\n    # where n is the number of items to distribute and k is the number of boxes.\n    ways = comb(pens_left + 3 - 1, 3 - 1)\n\n    return ways\n\nans = solution()"
    ],
    "d23bc459c7eb40fca3869160d4d63e83": [
        "def solution():\n    ans = sum((4 * i + 2)**2 - (4 * i)**2 for i in range(10))\n    return ans\n\nans = solution()"
    ],
    "0e7fb5a8438d409db8fc8721b6c9b013": [
        "def solution():\n    milk_for_six_cups = 1  # Gallon of milk for 6 cups\n    cups_needed = 30  # Number of cups required\n    milk_needed = (milk_for_six_cups / 6) * cups_needed  # Calculate the gallons of milk needed for 30 cups\n    return milk_needed\n\nans = solution()"
    ],
    "0ad7378f865243469246236c3c58c016": [
        "def solution():\n    people_in_front_of_pip = 9\n    people_behind_bud = 10\n    pip_and_bud = 2\n    total_people = people_in_front_of_pip + people_behind_bud + pip_and_bud\n    return total_people\n\nans = solution()"
    ],
    "32f6acf1aa344c2bbe62ce981053863f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's use x, y, z to represent the number of motorbikes, tricycles, and vans respectively.\n    motorbikes, tricycles, vans = symbols('motorbikes tricycles vans')\n\n    # Given that motorbikes and vans have 35 more wheels than tricycles:\n    # 2*motorbikes + 4*vans = 3*tricycles + 35, because motorbikes have 2 wheels and vans have 4 wheels.\n    equation1 = Eq(2 * motorbikes + 4 * vans, 3 * tricycles + 35)\n\n    # Given that tricycles and vans have 13 more wheels than motorbikes:\n    # 3*tricycles + 4*vans = 2*motorbikes + 13, because tricycles have 3 wheels.\n    equation2 = Eq(3 * tricycles + 4 * vans, 2 * motorbikes + 13)\n\n    # Furthermore, we know there are a total of 101 wheels:\n    # 2*motorbikes + 3*tricycles + 4*vans = 101\n    equation3 = Eq(2 * motorbikes + 3 * tricycles + 4 * vans, 101)\n\n    # Solve the equations for the number of motorbikes, tricycles, and vans.\n    solutions = solve((equation1, equation2, equation3), (motorbikes, tricycles, vans))\n\n    # The question asks for the difference between the motorbikes and vans.\n    motorbikes_count = solutions[motorbikes]\n    vans_count = solutions[vans]\n    return motorbikes_count - vans_count\n\nans = solution()"
    ],
    "104d6bb537274c5aad38cc4c6f3475dc": [
        "def solution():\n    ans = 68 + 75\n    return ans\n\nans = solution()"
    ],
    "d57aa24f90f445c5abf13b469d1984b6": [
        "def solution():\n    first_term = 4\n    common_difference = 3\n    nth_term = 298\n\n    # Using the formula for nth term of an arithmetic sequence: a_n = a_1 + (n-1)d\n    # To find n, we rearrange the formula: n = ((a_n - a_1) / d) + 1\n    n = ((nth_term - first_term) / common_difference) + 1\n\n    return int(n)\n\nans = solution()"
    ],
    "b36c4f44ee6d4d5f8f83c706b3da11e7": [
        "def solution():\n    # Let x be the number of students who like both sports\n    x = symbols('x')\n\n    # According to the problem, the number of students who like football is 3x\n    # And the number of students who like basketball is 4x\n    # There are 36 students in total, so 3x + 4x - x (since students who like both sports are counted twice) = 36\n    equation = Eq(3*x + 4*x - x, 36)\n\n    # Solve for x\n    sol = solve(equation)\n\n    return sol[0]\n\nans = solution()"
    ],
    "96ce69b25ffc4f6ba38c21545d6733a1": [
        "def solution():\n    numbers = [4, 5, 6, 9, 3, 9]\n    target_avg = 6\n    target_diff = 6\n\n    # Calculate the sum of the first 6 numbers.\n    sum_numbers = sum(numbers)\n\n    # Calculate the total sum required for the 8 numbers to have an average of 6.\n    total_sum_required = 8 * target_avg\n\n    # Calculate the sum left for p and q.\n    sum_pq = total_sum_required - sum_numbers\n\n    # Initialize q to be the highest possible value satisfying sum_pq = p + q.\n    q = sum_pq - 1  # Start with the largest possible value for q.\n    \n    # Find the lowest possible value of q given p < q and max number - min number = target_diff.\n    while q > 0:\n        p = sum_pq - q\n        if p < q and max(numbers + [p, q]) - min(numbers + [p, q]) == target_diff:\n            break\n        q -= 1\n\n    return q\n\nans = solution()"
    ],
    "df09ff6de9a24b87ad2cf9a7a605db3d": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The system of congruences will be\n    # x ≡ 3 (mod 7)\n    # x ≡ 7 (mod 11)\n    # x ≡ 9 (mod 13)\n    congruences = [(3, 7), (7, 11), (9, 13)]\n    \n    # Find the least solution for the system of congruences\n    least_solution, _ = solve_congruence(*congruences)\n    \n    # The smallest possible five-digit number\n    x = least_solution\n    while x < 10000:\n        x += 7 * 11 * 13\n\n    return x\n\nans = solution()"
    ],
    "d558457c695c422cb8038f4d788d1b1d": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    # Create a set to avoid counting duplicates\n    valid_dates = set()\n    \n    # Generate all possible permutations of 2014 with two 0's, two 1's, and two 2's\n    for perm in permutations(\"2014001122\"):\n        year = \"\".join(perm[:4])\n        month = \"\".join(perm[4:6])\n        day = \"\".join(perm[6:])\n        \n        # Validate the date\n        # Year must be 2014\n        if year != \"2014\":\n            continue\n        \n        # Month must be between 01 and 12\n        if not (1 <= int(month) <= 12):\n            continue\n        \n        # Day must be between 01 and the last day of the corresponding month\n        if month in {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"}:\n            if not (1 <= int(day) <= 31):\n                continue\n        elif month == \"02\":\n            # 2014 is not a leap year; February has 28 days\n            if not (1 <= int(day) <= 28):\n                continue\n        else:\n            if not (1 <= int(day) <= 30):\n                continue\n        \n        # Add valid date to the set\n        valid_dates.add(perm)\n    \n    # Count the number of unique valid dates\n    count = len(valid_dates)\n    \n    return count\n\nans = solution()"
    ],
    "750fd66718534733b8ee051343e835e2": [
        "def solution():\n    first_term = 2\n    common_difference = 5\n    n = 21\n\n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "eabcf3964b4a496a8ef64c1ebb4291fb": [
        "def custom_operation(a, b):\n    return ((a * b + 16) / (a + b)) ** 2\n\ndef solution():\n    result = custom_operation(custom_operation(custom_operation(1, 2), 3), 4)\n    final_result = custom_operation(result, 5)\n    return int(final_result)\n\nans = solution()"
    ],
    "36c0726e53b4423887ba038a9a8b7de4": [
        "def solution():\n    # Speed of Adam and Jacob\n    speed_adam = 60  # in km/h\n    speed_jacob = 80  # in km/h\n\n    # Time taken by Jacob to reach home\n    time_jacob = 3  # in hours\n\n    # Time taken by Adam to reach home\n    time_adam = 3.5  # 3 hours + 30 minutes\n\n    # Distance traveled by Adam before reaching home\n    distance_adam = speed_adam * time_adam\n\n    # Distance traveled by Jacob before reaching home\n    distance_jacob = speed_jacob * time_jacob\n\n    # Total distance between their homes\n    total_distance = distance_adam + distance_jacob\n\n    return total_distance\n\nans = solution()"
    ],
    "779097010de347adac3173e788b818b1": [
        "def solution():\n    total_cakes = 50\n    layers = 9\n    # Applying the Pigeonhole Principle\n    max_cakes = (total_cakes + layers - 1) // layers\n    return max_cakes\n\nans = solution()"
    ],
    "cf8db366b2f64605b21b99daa35db369": [
        "def solution():\n    gst_rate = 0.07\n    total_paid = 0.91\n    pre_gst_cost = total_paid / gst_rate\n\n    return pre_gst_cost\n\nans = solution()"
    ],
    "2b16d73352954ba2b572f2ae9c2c1fd1": [
        "def solution():\n    factors_36 = [1, 2, 3, 4, 6, 9, 12, 18, 36]\n    factors_7 = [1, 7]\n    \n    # Combine the factors of 36 and 7, accounting for all the different combinations\n    factors_252 = set()\n    \n    for factor_36 in factors_36:\n        for factor_7 in factors_7:\n            factors_252.add(factor_36 * factor_7)\n    \n    ans = len(factors_252)\n    return ans\n\nans = solution()"
    ],
    "c587b2c5f5344744bff9a00aad6cea06": [
        "def solution():\n    total_grams = 2.49 * 1000 + 670 + (3 * 1000 + 80)\n    return total_grams\n\nans = solution()"
    ],
    "f2cc6bf5eb964e03b4744beef89de39f": [
        "def solution():\n    # To guarantee 2 marbles of the same color, Lucy must take out marbles\n    # accounting for the worst-case scenario using the Pigeonhole Principle.\n    \n    # Worst case scenario: Lucy takes all marbles of one color (2 marbles)\n    # and then one marble of the other color.\n    # If she takes one more marble (the 4th one), it will be guaranteed to\n    # be of the same color as one of the previously taken marbles.\n    \n    # So, in total, Lucy needs to take at least 4 marbles to guarantee 2 of\n    # the same color.\n    ans = 4\n    return ans\n\nans = solution()"
    ],
    "ec2f787ddc4f496c8e1670044fcde021": [
        "def solution():\n    total_time_minutes = 60  # Total time in minutes\n    cycling_fraction = 1 / 3\n    jogging_time_minutes = total_time_minutes * (1 - cycling_fraction)\n\n    return jogging_time_minutes\n\nans = solution()"
    ],
    "67374cb1f2b44b8594ce58b7c2757c30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin = symbols('justin')\n\n    equation = Eq(justin + 18, 4 * (justin - 6))\n\n    result = solve(equation, justin)\n\n    return result[0]\n\nans = solution()"
    ],
    "0d3f4384ce58444a89f0b0451c47a86a": [
        "from math import lcm\n\ndef solution():\n    ashley_time = 56\n    ben_time = 80\n    charlie_time = 105\n\n    # Find the least common multiple of the three times\n    meeting_time_seconds = lcm(ashley_time, ben_time, charlie_time)\n\n    # Calculate the hours and minutes past 10.00 a.m.\n    hours_past, seconds_remainder = divmod(meeting_time_seconds, 3600)\n    minutes_past, seconds_past = divmod(seconds_remainder, 60)\n\n    # Since they start at 10.00 a.m., add the hours and minutes past to this time\n    hour_of_meeting = 10 + hours_past\n    minute_of_meeting = 0 + minutes_past\n\n    # Adjust for 24-hour time format if necessary\n    if hour_of_meeting >= 24:\n        hour_of_meeting -= 24\n    \n    return f\"{hour_of_meeting:02d}:{minute_of_meeting:02d}\"\n\nans = solution()"
    ],
    "af56a6fc059e429192ef55675e57c67c": [
        "def solution():\n    # since the difference between consecutive terms is -4\n    difference = -4\n    # the last number given in the sequence is 2\n    last_number = 2\n    # calculating the next number\n    next_number = last_number + difference\n    return next_number\n\nans = solution()"
    ],
    "340b86ff5e0b464289776aeb6627ceff": [
        "def solution():\n    # Calculate the smallest possible number of apples the other 5 children can get.\n    # They must get a different number of apples each, starting from 1 as the minimum.\n    min_apples_other_children = sum(range(1, 6))\n    \n    # Subtract the minimum number of apples distributed to the other children from the total\n    max_apples_for_one_child = 30 - min_apples_other_children\n\n    return max_apples_for_one_child\n\nans = solution()"
    ],
    "a4af03b27daa4f28856b42ba428afc2d": [
        "def solution():\n    # If Bart takes one M&M from each color, he is guaranteed to have 2 chips of different colors.\n    # Since we have 3 colors, taking at least one of each will ensure the condition is met.\n    # Thus, the smallest number of M&Ms he needs to take out is the number of colors present.\n    num_colors = 3\n    return num_colors\n\nans = solution()"
    ],
    "e24a897f0dea4a47950e3faa1cdaf6d1": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "f475cb94110941b287259508a63a9ff8": [
        "def solution():\n    return 3017 + 4962\n\nans = solution()"
    ],
    "f2faa17dbd4546fe9f05e0ca1b14be52": [
        "def solution():\n    distance = 273\n    sam_miles_per_gallon = 72.8\n    tom_additional_gallons = 6 + 3/4\n\n    sam_gallons_used = distance / sam_miles_per_gallon\n    tom_gallons_used = sam_gallons_used + tom_additional_gallons\n    tom_miles_per_gallon = distance / tom_gallons_used\n\n    return round(tom_miles_per_gallon, 2)\n\nans = solution()"
    ],
    "333aed92d083437e97962341c0e3e05c": [
        "def solution():\n    for i in range(10):\n        number = int(f\"24572{i}\")\n        if number % 7 == 0:\n            return number\n\nans = solution()"
    ],
    "a11a7f4df40f40c8820fc6e6e0c78560": [
        "def solution():\n    return 9039 + 93\n\nans = solution()"
    ],
    "9ed706ba39e2411fba6e6de96d5ecfd7": [
        "def solution():\n    ans = sum((2 * i + 1) ** 2 for i in range(10))\n    return ans\n\nans = solution()"
    ],
    "41fb6eaf263648dd86dc9ac6a43a72f3": [
        "def solution():\n    shirts = 2\n    skirts = 2\n    \n    ans = shirts * skirts\n    return ans\n\nans = solution()"
    ],
    "b4ccb4b4d7b14da0aad36bfe517a8484": [
        "def solution():\n    count_six = 0\n    for i in range(1, 101):\n        count_six += str(i).count(\"6\")\n    return count_six\n\nans = solution()"
    ],
    "f297a90915044281a14d6377f0457a4f": [
        "def solution():\n    return 3**2  # Each term is 3 raised to the power of its 1-based index (1, 2, 3, ...)\n\nans = solution()"
    ],
    "5b6e52b88b774ca78d70e6c94d7bdc3f": [
        "def solution():\n    num1 = int('45', 7)\n    num2 = int('66', 7)\n    sum_base10 = num1 + num2\n    ans = ''\n    \n    while sum_base10 > 0:\n        ans = str(sum_base10 % 7) + ans\n        sum_base10 //= 7\n    \n    return ans or '0'\n\nans = solution()"
    ],
    "dd9b6244a4c4445bb632f0876b616353": [
        "def solution():\n    chinese_restaurants = 9\n    mexican_restaurants = 3\n    fast_food_restaurants = 2\n\n    total_choices = chinese_restaurants + mexican_restaurants + fast_food_restaurants\n\n    return total_choices\n\nans = solution()"
    ],
    "e94db5c96fbd44048da7eae72591635d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12 - (3*x - 4), x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "940e042aba2b4f56a60da84000fece0e": [
        "def solution():\n    carrots_per_day_per_rabbit = 4\n    rabbits = 8\n    days = 5\n    \n    total_carrots = carrots_per_day_per_rabbit * rabbits * days\n    return total_carrots\n\nans = solution()"
    ],
    "a50a55a4409a4341b2950b27e6d39826": [
        "def solution():\n    # Calculate how much of a bale each animal eats per day\n    horse_rate = 1 / 2\n    cow_rate = 1 / 3\n    sheep_rate = 1 / 12\n    \n    # Calculate the total consumption rate per day\n    total_rate = horse_rate + cow_rate + sheep_rate\n    \n    # Calculate how many days the 22 bales will last\n    days = 22 / total_rate\n    \n    return days\n\nans = solution()"
    ],
    "b768e69a54ce422c9bdc0bc62ce7f112": [
        "def solution():\n    # Given that 105, 120, and 135 are the 7th, 8th, 9th terms of the sequence respectively,\n    # We can determine the common difference of the arithmetic sequence.\n    common_difference = 120 - 105  # or 135 - 120\n\n    # Now, we need to find the first term of the sequence.\n    # First term (a) = 8th term (120) - common_difference * (8 - 1)\n    first_term = 120 - common_difference * (8 - 1)\n\n    # To find the 100th term, we use the formula: nth_term = a + (n-1) * d\n    # Where n is the term number, a is the first term, and d is the common difference.\n    # 100th term = first_term + (100-1) * common_difference\n    nth_term = first_term + (100 - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "c41373fcf732485caf9d92171e911149": [
        "def solution():\n    ans = (5/8) * 160\n    return ans\n\nans = solution()"
    ],
    "996413eb0e084c8fad4262d2e563cbe1": [
        "def solution():\n    return 146 * 37\n\nans = solution()"
    ],
    "025a48e3ac854ca98f6c3b39cdf5562f": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "601ad6e41047493c8d8f3dea2a05469a": [
        "def solution():\n    # Letting x = the original number of oranges and y = the original number of lemons\n    # We have two ratios\n    # (x - 48) / y = 1 / 2 (After selling 48 oranges)\n    # x / y = 3 / 5 (Original ratio)\n\n    # Cross multiplying gives us two equations:\n    # 2*(x - 48) = y ....(1)\n    # 5x = 3y ....(2)\n\n    # Multiply equation (1) by 3 and equation (2) by 2 to eliminate y\n    # 3*2*(x - 48) = 3y ....(3)\n    # 2*5x = 2*3y ....(4)\n\n    # Subtract equation (3) from equation (4)\n    # 2*5x - 3*2*(x - 48) = 0\n    # 10x - 6x + 288 = 0\n    # 4x = 288\n    # x = 288 / 4\n    x = 288 // 4\n\n    # Now, substitute x back into one of the original equations to find y\n    # Using equation (2):\n    # 5x = 3y\n    # y = 5x / 3\n    y = (5 * x) // 3\n\n    return y\n\nans = solution()"
    ],
    "7ed96bead1224f409f2317f83bd45b09": [
        "def solution():\n    # Let 'm' be the mother's current age and 'd' be the daughter's current age.\n    # According to the first statement: \n    # when daughter reaches mother's age, the difference in their ages will stay the same\n    # so the mother will be 75 years old\n    # m - d = 75 - d  ...(1), where m - mother's age when daughter is 75\n    \n    # According to the second statement: \n    # when the mother was the daughter's current age, the daughter was 3\n    # This happened (m - d) years ago.\n    # d - 3 = m - d  ...(2)\n    # Simplify equation (2) to find the relation between mother's and daughter's ages:\n    # 2d - m = 3\n\n    from sympy import symbols, Eq, solve\n\n    m, d = symbols('m d')\n    equation1 = Eq(m - d, 75 - d)\n    equation2 = Eq(2 * d - m, 3)\n\n    # Solve the two equations\n    solutions = solve((equation1, equation2), (m, d))\n\n    # extract the mother's current age from the solution.\n    return solutions[m]\n\nans = solution()"
    ],
    "c350a05252414b3db3a1131ee3b9e465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7 * (x + 2), 51 + 2 * (x - 1))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "c5d002031015489ba21101105aaa559a": [
        "def solution():\n    # To ensure getting 3 red apples, Isabella should take all the green and yellow apples first.\n    # Number of green apples:\n    green_apples = 11\n    # Number of yellow apples:\n    yellow_apples = 7\n    # Now, taking all green and yellow apples will not guarantee a single red apple,\n    # so she needs to take two more apples which will ensure that at least 3 are red.\n    red_needed = 3\n    additional_apples = red_needed - 1\n\n    # Therefore, the smallest number of apples to take is the sum of green, yellow,\n    # and additional red apples.\n    apples_to_take = green_apples + yellow_apples + additional_apples\n\n    return apples_to_take\n\nans = solution()"
    ],
    "27762b79cb644368b2a5457a17f92ee7": [
        "def solution():\n    initial_value = 200\n    final_value = 204\n    percentage_change = ((final_value - initial_value) / initial_value) * 100\n    return percentage_change\n\nans = solution()"
    ],
    "3509ed6613a44f60bb123d2ebb9a5094": [
        "def solution():\n    ans = (20 - 19) + (18 - 17) + (16 - 15) + (14 - 13)\n    return ans\n\nans = solution()"
    ],
    "7a09b099857143ed8e06a64d34c8813c": [
        "def solution():\n    total_spent = 6400\n    discount_percent = 80\n\n    # Calculate the original total cost before discount\n    original_cost = total_spent / (1 - discount_percent / 100)\n    \n    # Calculate how much money was saved\n    money_saved = original_cost - total_spent\n\n    return money_saved\n\nans = solution()"
    ],
    "597ad4cf18ea4c63bf6c95cd675bf196": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    total_girls = 16\n\n    # The smallest number of right-handed girls would be when all left-handed students are girls.\n    left_handed = total_pupils - right_handed\n    right_handed_girls = total_girls - left_handed\n\n    # But it's not possible to have negative right-handed girls, so we set a minimum of 0\n    right_handed_girls = max(right_handed_girls, 0)\n\n    return right_handed_girls\n\nans = solution()"
    ],
    "892a76fc652846adbcd762365971437f": [
        "def solution():\n    children = 45\n    minibus_capacity = 8\n    minibuses_needed = -(-children // minibus_capacity)\n    return minibuses_needed\n\nans = solution()"
    ],
    "a62c00fc50db459e9f0fdc6cdac1102e": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    # Since we are looking for equal amounts of 0, 1, and 2\n    # There are 2 options for each digit and we need 2 of each 0, 1, and 2\n    # The rest of the two digits can only be 3, 4, ..., 9\n    for perm in permutations('0011223456789', 8):\n        if perm[0] != '0' and perm[4] in '01':  # year cannot start with 0 and month cannot be greater than 1\n            if perm[4] == '0' and perm[5] in '123456789':  # If month starts with 0, it can only be 01-09\n                if perm[6] == '0':\n                    if perm[7] in '123456789':  # day cannot be '00'\n                        count += 1\n                elif perm[6] == '1' and perm[7] in '0123456789': # day can be from 01 to 19\n                    count += 1\n                elif perm[6] == '2' and perm[7] in '0123': # day can be from 20 to 23\n                    count += 1\n                elif perm[6] == '3' and perm[7] in '01': # day can be 30 or 31\n                    count += 1\n            elif perm[4] == '1' and perm[5] in '012':  # If month starts with 1, it can be 10, 11, or 12\n                if perm[6] == '0':\n                    if perm[7] in '123456789':  # day cannot be '00'\n                        count += 1\n                elif perm[6] == '1' and perm[7] in '0123456789':  # day can be from 01 to 19\n                    count += 1\n                elif perm[6] == '2' and perm[5] != '2' and perm[7] in '0123':  # day can be from 20 to 23, except Feb has 28 or 29 days\n                    count += 1\n                elif perm[6] == '3' and perm[5] != '2' and perm[7] in '01': # day can be 30 or 31, except Feb\n                    count += 1\n                elif perm[6] == '2' and perm[5] == '2' and perm[7] in '012345678': # Feb can only be from 20 to 28 in 2014\n                    count += 1\n    return count // 2  # Since permutations will count each pair twice like (0,1) and (1,0)\n\nans = solution()"
    ],
    "3393c5c42ebe4894a4440ce64fee1a72": [
        "def solution():\n    ans = 101 + 97 + 102 + 99 + 98 + 103 - 100\n    return ans\n\nans = solution()"
    ],
    "c616f997861742469b08bfc319528f5b": [
        "def solution():\n    # Since Jane wants to get 4 different coloured marbles,\n    # in the worst case, she has to draw all marbles of one color,\n    # then all marbles of another color, then all marbles of a third color.\n    # Only after this, the next marble she draws is guaranteed to be of the fourth color.\n    \n    # We calculate the sum of the marbles of the three most numerous colors:\n    # red (4), green (7), blue (6)\n    # and add 1 to guarantee that the next marble is of the fourth color\n    \n    # Sum of the three most numerous colors\n    total = 4 + 7 + 6\n    # Add 1 to get a marble of the fourth color\n    total += 1\n\n    return total\n\nans = solution()"
    ],
    "8b599766a2704c0eb0e8c0f696e62f06": [
        "def solution():\n    for num in range(1, 101):\n        if num % 2 == 0 and num % 3 == 0 and num % 5 == 0 and num % 7 == 6:\n            return num\n\nans = solution()"
    ],
    "2f9ea1c8c72f424db4c1a4c24536bbb0": [
        "def solution():\n    # In a single round-robin, each team plays every other team exactly once.\n    # Number of teams is 6, so each team plays 6 - 1 = 5 games in total.\n    games_per_team = 5\n\n    # For each game, there are 3 potential outcomes:\n    # - One team wins (2 points), the other team loses (0 points)\n    # - Both teams tie (1 + 1 = 2 points)\n    # Regardless of outcome, 2 points in total are distributed per game.\n\n    # Total points distributed in all games is therefore the total games\n    # multiplied by 2 points per game. With n teams, there are n*(n-1)/2 total games.\n    total_teams = 6\n    total_games = total_teams * (total_teams - 1) // 2\n\n    # Total points is then:\n    total_points = total_games * 2\n\n    return total_points\n\nans = solution()"
    ],
    "9f8109ce906145b3a3bb3b7938082e99": [
        "def solution():\n    n = 1\n    number_of_zeros = 0\n    while number_of_zeros < 28:\n        n += 1\n        temp_n = n\n        while temp_n % 5 == 0:\n            number_of_zeros += 1\n            temp_n //= 5\n            if number_of_zeros == 28:\n                break\n    return n\n\nans = solution()"
    ],
    "7af09b472cda4e49ba756b79f79625b3": [
        "def solution():\n    return 789 * 6\n\nans = solution()"
    ],
    "e594932553e149d89309f852797d5586": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define Symbols\n    girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim = symbols(\n        'girls boys girls_swim girls_not_swim boys_swim boys_not_swim')\n\n    # Equations based on the problem statement\n    equation1 = Eq(boys, girls + 90)  # There are 90 more boys than girls\n    equation2 = Eq(girls_swim / girls_not_swim, 31 / 49)  # Ratio of girls who can swim to those who cannot\n    equation3 = Eq(boys_swim, boys_not_swim - 120)  # The number of boys who can swim is 120 less than those who cannot\n    equation4 = Eq(girls_swim + girls_not_swim, girls)  # Total girls is the sum of girls who can swim and cannot\n    equation5 = Eq(boys_swim + boys_not_swim, boys)  # Total boys is the sum of boys who can swim and cannot\n    equation6 = Eq(girls + boys, 1690)  # The total number of pupils in the school\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6),\n                      (girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim))\n\n    # Extract the solution\n    girls_not_swim = solutions[girls_not_swim]\n    boys_not_swim = solutions[boys_not_swim]\n\n    # Calculate the total number of students who cannot swim\n    total_not_swim = girls_not_swim + boys_not_swim\n\n    return total_not_swim\n\nans = solution()"
    ],
    "ac6b5f6822aa44afb8423aeef1df7f92": [
        "def solution():\n    # there are 6*6 = 36 possible outcomes when two dice are thrown\n    total_outcomes = 6 * 6\n\n    # Outcomes where the sum is greater than 10: (5, 6), (6, 5), (6, 6)\n    favorable_outcomes = 3\n\n    # Probability of getting a sum greater than 10\n    probability = favorable_outcomes / total_outcomes\n\n    # Expected payout when winning\n    payout = 10\n\n    # The cost to play the game\n    cost_per_game = 1\n\n    # Expected value for one game is payout times probability minus the cost per game\n    expected_value_per_game = (payout * probability) - cost_per_game\n\n    # Expected value over 60 games\n    expected_total_value = expected_value_per_game * 60\n\n    # Since we want the expected loss, we take the negative of the expected value\n    return -expected_total_value\n\nans = solution()"
    ],
    "ee58fa876fa247d58050d060bebe1078": [
        "def solution():\n    from sympy import isprime\n\n    for a in range(2, 14): # 41 - 7b has to be positive and a prime; so 7b < 41, b < 5.8, b can only be 2,3,5.\n        for b in range(2, 6):\n            if isprime(a) and isprime(b):\n                if 3*a + 7*b == 41:\n                    return a + b\n\nans = solution()"
    ],
    "fd889752fd27457fbe03dc85570eec17": [
        "def solution():\n    # Calculate the price per piece for 4pc tenders\n    price_per_piece_4pc = 7 / 4\n\n    # Calculate the price per piece for 6pc tenders\n    price_per_piece_6pc = 8.5 / 6\n\n    # Compare the prices\n    if price_per_piece_4pc < price_per_piece_6pc:\n        ans = '4pc is a better buy'\n    elif price_per_piece_4pc > price_per_piece_6pc:\n        ans = '6pc is a better buy'\n    else:\n        ans = 'Both are equally good'\n\n    return ans\n\nans = solution()"
    ],
    "e49cf16bbb284f1fbfb9c440134d58be": [
        "def solution():\n    ans = 1.83 + 0.2\n    return ans\n\nans = solution()"
    ],
    "e3aa5800105743d5b2435db12b158401": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    salary = symbols('salary')\n    spent_on_phone = 740\n    remaining = salary - spent_on_phone\n    spent_on_rent = (3/4) * remaining\n    left = (1/5) * salary\n\n    equation = Eq(spent_on_phone + spent_on_rent + left, salary)\n\n    ans = solve(equation, salary)[0]\n\n    return ans\n\nans = solution()"
    ],
    "d13312f8d069494cab8f69737daed0b0": [
        "def solution():\n    total_weight_with_5_apples = 580\n    remaining_weight_with_2_apples = 280\n    weight_of_3_apples = total_weight_with_5_apples - remaining_weight_with_2_apples\n    weight_of_basket = remaining_weight_with_2_apples - weight_of_3_apples\n    return weight_of_basket\n\nans = solution()"
    ],
    "02a402ada62746cca4a7c0600dfc8a9b": [
        "import itertools\n\ndef solution():\n    digits = ['2', '3', '4']\n    numbers = set()\n    \n    # Create all permutations for each possible length (1 to len(digits))\n    for i in range(1, len(digits) + 1):\n        for permutation in itertools.permutations(digits, i):\n            number = int(''.join(permutation))\n            numbers.add(number)\n    \n    return len(numbers)\n\nans = solution()"
    ],
    "bdfc511086b14c2a828a8ce71b43f330": [
        "def solution():\n    current_hour = 2\n    current_minute = 31\n    while True:\n        current_minute += 1\n        if current_minute == 60:\n            current_minute = 0\n            current_hour += 1\n            if current_hour == 24:\n                current_hour = 0\n        time_str = f\"{current_hour:02d}{current_minute:02d}\"\n        if all(digit in time_str for digit in \"0123\"):\n            break\n            \n    return (current_hour - 2) * 60 + current_minute - 31\n\nans = solution()"
    ],
    "19fa00d48659426b9b8f9c7cc44133aa": [
        "def solution():\n    after_class = 150 + 100  # ml left after drinking 100ml\n    original = after_class * 2  # because drank half before class\n    return original\n\nans = solution()"
    ],
    "6008ef744a284692b526a28fd0e8a695": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define x as the number of mushrooms gathered in the second hour\n    # Therefore, x - 26 will be the mushrooms gathered in the first hour.\n    x = symbols('x')\n\n    # Equation representing the total mushrooms gathered in two hours\n    equation = Eq(x + (x - 26), 40)\n\n    # Solving for x\n    mushrooms_second_hour = solve(equation, x)[0]\n\n    return mushrooms_second_hour\n\nans = solution()"
    ],
    "fa119130b0764e8fa4d0f0a2fa2f19fd": [
        "def solution():\n    def diamond(A, B):\n        return A * A - 3 * B\n    \n    def triangle(A, B):\n        return 5 * A - B * B\n    \n    result_diamond = diamond(4, 2)\n    ans = triangle(result_diamond, 6)\n    return ans\n\nans = solution()"
    ],
    "5a50e00932e34a2eae95e3e9228b6993": [
        "def solution():\n    unsold_tickets = 28\n    unsold_percentage = 1 - 0.6 # 100% - 60% sold = 40% unsold\n\n    total_capacity = unsold_tickets / unsold_percentage\n\n    return int(total_capacity)\n\nans = solution()"
    ],
    "66c31d7e12eb4ffb8ad1f1e8bb55f199": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    lynn_left, mary_left, initial_amount = symbols('lynn_left mary_left initial_amount')\n    \n    equation1 = Eq(lynn_left, initial_amount - 160)\n    equation2 = Eq(mary_left, initial_amount - 58)\n    equation3 = Eq(mary_left, 3 * lynn_left)\n    \n    solutions = solve((equation1, equation2, equation3), (lynn_left, mary_left, initial_amount))\n\n    return solutions[lynn_left]\n\nans = solution()"
    ],
    "1e1a13a0a844402da455fc7eb9d39755": [
        "def solution():\n    fifth_grade_students = 6 * 36\n    sixth_grade_students = 3 * 38\n    total_students = fifth_grade_students + sixth_grade_students\n    return total_students\n\nans = solution()"
    ],
    "e4bab25ee48f4b6185a11c389207eebf": [
        "def solution():\n    total_grapes = 210\n\n    grapes_sold_monday = total_grapes * (3/7)\n    remaining_after_monday = total_grapes - grapes_sold_monday\n\n    grapes_sold_tuesday = remaining_after_monday * (3/8)\n    remaining_after_tuesday = remaining_after_monday - grapes_sold_tuesday\n\n    weight_per_bag = 3/4\n    number_of_bags = remaining_after_tuesday / weight_per_bag\n\n    return int(number_of_bags)\n\nans = solution()"
    ],
    "a098761e7204471dbfd3c5f04017e952": [
        "def solution():\n    quotient = 27\n    remainder = 9\n    divisor = remainder + 1 # The minimum divisor is one more than the remainder to satisfy the problem condition.\n    dividend = quotient * divisor + remainder\n    return dividend\n\nans = solution()"
    ],
    "9e459979ca2e4f8e84e5da348f9dba5d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    devi, jerry = symbols('devi jerry')\n    \n    equation1 = Eq(devi, jerry + 8)\n    equation2 = Eq((devi + 4) / (jerry + 4), 5 / 7)\n\n    solutions = solve((equation1, equation2), (devi, jerry))\n\n    return solutions[jerry]\n\nans = solution()"
    ],
    "36398085891449859c0c35083ebfdaad": [
        "def solution():\n    ans = sum([64, 60, 56, 52, 48, 44]) - sum([62, 58, 54, 50, 46])\n    return ans\n\nans = solution()"
    ],
    "a9b59929e341406986d4962db964c9ec": [
        "def solution():\n    total_ml = 7 * 195\n    jug_capacity = 250\n\n    num_jugs = -(-total_ml // jug_capacity)\n\n    return num_jugs\n\nans = solution()"
    ],
    "41284b5312574903a6aad669cbd6ab65": [
        "def solution():\n    # Considering the numbers as (10a + b) - (10c + d) = difference\n    # Let's systematically trial all possible values for a and b (the digits of the minuend)\n    # given the constraints for c and d (the digits of the subtrahend)\n    for a in range(1, 10):\n        for b in range(10):\n            # Serene thought c was 5 instead of 3 and d was 3 instead of 2\n            mistaken_diff = (10 * a + b) - (10 * 5 + 3)\n            if mistaken_diff == 36:\n                # Now calculate the correct difference with c being 3 and d being 2\n                correct_diff = (10 * a + b) - (10 * 3 + 2)\n                return correct_diff\n\nans = solution()"
    ],
    "56303c0854a843e68eb523ba25963b8f": [
        "def solution():\n    # Let's call the number Phoebe thought of x\n    # According to the problem, 5x - 4 = 41\n    # We can rearrange the equation to find x by adding 4 to both sides and then dividing by 5\n    # x = (41 + 4) / 5\n    x = (41 + 4) / 5\n    return x\n\nans = solution()"
    ],
    "757e6ca91df84091a26bd18fc1b7fa2a": [
        "def solution():\n    ans = 0\n    numerator = 100\n    for denominator in range(97, 0, -1):\n        ans += numerator / denominator\n        numerator *= (denominator - 3)\n    return ans\n\nans = solution()"
    ],
    "3444a75f07964bfca7021f8d0f95217f": [
        "def solution():\n    total_balls = 49 + 1  # Total number of balls initially\n    blue_ball = 1  # Number of blue ball\n\n    # Let's denote the number of red balls to be removed as 'x'.\n    # We want the remaining balls to be 90% red balls.\n    # So, (49 - x) / (total_balls - x) = 90/100\n    # Solving for x:\n    x = (49 - 0.9 * total_balls) / (1 - 0.9)\n    \n    return int(x)\n\nans = solution()"
    ],
    "e9f7473a32874d5c820cadf0a1870a0b": [
        "def solution():\n    total_weight_with_matches = 45  # grams\n    empty_box_weight = 12  # grams\n    number_of_matches = 220\n\n    weight_of_matches = total_weight_with_matches - empty_box_weight\n    weight_per_match = weight_of_matches / number_of_matches\n\n    return weight_per_match\n\nans = solution()"
    ],
    "d6c3aebbe67749778e84875f4bfe6ebf": [
        "def solution():\n    total_animals = 1300\n    total_legs = 3440\n    # Let's assume all animals were birds (with 2 legs each)\n    total_bird_legs = total_animals * 2\n    # Now, let's find the shortage of legs, if we assumed all were birds\n    shortage = total_legs - total_bird_legs\n    # Every cow has 2 extra legs compared to a bird, so we divide the shortage by 2 to find the number of cows\n    num_of_cows = shortage // 2\n    return num_of_cows\n\nans = solution()"
    ],
    "8a9992f6a3c04fea9afe2ab07209e489": [
        "def solution():\n    number = 96\n    factors = {i for i in range(1, number + 1) if number % i == 0}\n    return len(factors)\n\nans = solution()"
    ],
    "20346fdc304242a383a7ac635afbb0e0": [
        "def solution():\n    max_number = 0\n    for n in range(100, 1000):\n        if n % 9 == 0 and n % 2 != 0:  # Divisible by 9 and odd\n            tens_digit = (n // 10) % 10\n            if tens_digit % 4 == 0:  # Tens place divisible by 4\n                max_number = max(max_number, n)\n    return max_number\n\nans = solution()"
    ],
    "0f159b78762443838fac481eb0a7bed3": [
        "def solution():\n    ans = (18 - 17) + (16 - 15) + (14 - 13)\n    return ans\n\nans = solution()"
    ],
    "00e7cd11eefb4db19a4650a5e8cf1454": [
        "def solution():\n    jenny_pens = 83\n    pens_given_to_ben = 28\n\n    # After giving Ben 28 pens, Jenny has 83 - 28 pens\n    jenny_pens_after_giving = jenny_pens - pens_given_to_ben\n\n    # They have the same number of pens after the exchange\n    ben_pens_initially = jenny_pens_after_giving\n\n    return ben_pens_initially\n\nans = solution()"
    ],
    "f58f700fac024611a683956a1768c0ec": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbols for the velocity components of the combined mass\n    vx, vy = symbols('vx vy')\n\n    # Conservation of momentum in the x and y components\n    # Mass1 * velocity1 + Mass2 * velocity2 = (Mass1 + Mass2) * velocity_final\n    # In x direction, m1v1x + m2v2x = (m1 + m2) * v_final_x, where m1v1x = 0 (car 1 is moving north, no x component)\n    equation_x = Eq(0 + 500 * -30, 1000 * vx)\n\n    # In y direction, m1v1y + m2v2y = (m1 + m2) * v_final_y, where m2v2y = 0 (car 2 is moving west, no y component)\n    equation_y = Eq(500 * 20 + 0, 1000 * vy)\n\n    # Solve the system of equations to find the final velocity components vx and vy\n    solutions = solve((equation_x, equation_y), (vx, vy))\n\n    # Use Pythagoras to find the magnitude of the final velocity\n    velocity_magnitude = (solutions[vx]**2 + solutions[vy]**2)**0.5\n\n    return velocity_magnitude\n\nans = solution()"
    ],
    "4f45df48b0844cadb68195e413cce783": [
        "def solution():\n    books_per_week = 6 / 3\n    total_books = books_per_week * 8\n    return total_books\n\nans = solution()"
    ],
    "237e4009b4c54725a1fe587507e1513b": [
        "def solution():\n    # The distance between the first and the last tree\n    distance = 2 * (21 - 1)\n    \n    # Since lamp posts are placed at intervals of 10m, add another 10 for the lamp post at the last end\n    distance += 10\n    \n    # Number of lamp posts required\n    num_lamp_posts = (distance // 10) + 1\n    \n    return int(num_lamp_posts)\n\nans = solution()"
    ],
    "4585a53e3fbb44e9b8554c9841fc9066": [
        "def solution():\n    ans = 15.05 - 14.84\n    return ans\n\nans = solution()"
    ],
    "32f4232fd0304fc781fcf26ecbab7e3e": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    laptop, dvd_player = symbols('laptop dvd_player')\n\n    eq1 = Eq(5 * laptop + 4 * dvd_player, 14438)\n    eq2 = Eq(laptop + dvd_player, 2960)\n\n    solved_values = solve((eq1, eq2), (laptop, dvd_player))\n\n    return solved_values[dvd_player]\n\nans = solution()"
    ],
    "cb9e84648a164fd796bda214bd912eed": [
        "def solution():\n    sizes = 3  # S, M, L\n    colors = 5  # black, white, red, yellow, purple\n\n    # Each size can have any of the 5 colors, therefore we multiply the number of sizes by the number of colors.\n    ans = sizes * colors\n\n    return ans\n\nans = solution()"
    ],
    "e6aad1cc98b64cac96958775db869e00": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial average weight and y be the number of people before Aaron joined\n    x, y = symbols('x y')\n    # Equation after Aaron joins\n    equation1 = Eq(((x * y) + 45) / (y + 1), 61)\n    # Equation after Ben joins\n    equation2 = Eq(((61 * (y + 1)) + 71) / (y + 2), 62)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # x is the initial average we want to find\n    return solutions[x]\n\nans = solution()"
    ],
    "0bd951281c1c44b48652968acdb95351": [
        "def solution():\n    from itertools import permutations\n    \n    for p in permutations(range(10), 3):\n        if p[0] != 0:  # ensuring that the triangle is not a leading zero\n            square = p[0] * 10 + p[1]\n            circle = p[1] * 10 + p[2]\n            triangle = p[2]\n            if 2 * square == circle:\n                return triangle\n\nans = solution()"
    ],
    "f743e1d8460a4eb08dd3685920fb9466": [
        "def solution():\n    counts = [0] * 5  # Tracks counts of numbers with remainders [0, 1, 2, 3, 4] when divided by 5\n    for i in range(1, 101):\n        remainder = i % 5\n        counts[remainder] += 1\n\n    # Pairs that sum up to a multiple of 5 are formed by numbers where one has a remainder r\n    # and the other has a remainder 5 - r (except for when both have a remainder of 0 or both have remainder of 5/2).\n    ans = (counts[0] * (counts[0] - 1) // 2) + (counts[1] * counts[4]) + (counts[2] * counts[3])\n    return ans\n\nans = solution()"
    ],
    "74f45194f12f4ae7be245fca2332fd63": [
        "def solution():\n    pattern = \"12345\"\n    pattern_sum = sum(int(digit) for digit in pattern)\n    full_patterns, remaining_digits = divmod(2000, len(pattern))\n    partial_sum = sum(int(pattern[i]) for i in range(remaining_digits))\n    total_sum = full_patterns * pattern_sum + partial_sum\n    return total_sum\n\nans = solution()"
    ],
    "702bd47461974ab69465dea85d588eab": [
        "def solution():\n    for hours_passed in range(1, 12):\n        hours_remaining = 12 - hours_passed\n        if hours_passed == 2 * hours_remaining:\n            return hours_passed\n\nans = solution()"
    ],
    "639b8a35b20848139819ed0f716ed926": [
        "def solution():\n    ans = 2.3 + 9.7 + 5.2 - 2.2\n    return ans\n\nans = solution()"
    ],
    "473e918a9fd74e4aaf831efa01b71026": [
        "def solution():\n    total_cost_pence = 515  # £5.15 in pence\n    coffee_cost_pence = 369  # £3.69 in pence\n    milk_cost_pence = 89  # 89p\n\n    sugar_cost_pence = total_cost_pence - (coffee_cost_pence + milk_cost_pence)\n    sugar_cost_pounds = sugar_cost_pence / 100  # converting the cost back to pounds\n\n    return sugar_cost_pounds\n\nans = solution()"
    ],
    "b591b0d58af5497096019cf0b220ebb3": [
        "def solution():\n    ans = 2 + 12 * (8 - 3) // 4\n    return ans\n\nans = solution()"
    ],
    "a98ea86c6ab94572a37ea72e70fc26dd": [
        "def solution():\n    # We use the Pigeonhole Principle to determine the worst case scenario.\n    # Since the most balls Sheila can take out without having 4 of the same color is:\n    # 3 balls of blue (not 4, to prevent the fourth of the same color),\n    # 3 balls of orange (same reason), and\n    # 2 balls of yellow (all yellow balls).\n    # Any ball Sheila takes out after this must result in 4 balls of the same color.\n    max_blue = 3\n    max_orange = 3\n    max_yellow = 2\n    # Total balls taken out without having 4 of the same color.\n    balls_without_four_same = max_blue + max_orange + max_yellow\n    # Next ball she takes must result in 4 of the same color (worst case scenario).\n    balls_to_take_out = balls_without_four_same + 1\n    \n    return balls_to_take_out\n\nans = solution()"
    ],
    "bfd53c31223f4d469ed9eef0d582baeb": [
        "def solution():\n    ans = (45 / 9) * (100 / 10) + (23 - 19)\n    return ans\n\nans = solution()"
    ],
    "230b8cfda67a440eb974960188adca8c": [
        "def solution():\n    return 4825 + 1754\n\nans = solution()"
    ],
    "5eab24fc6ea24611818fe89f4277708d": [
        "def solution():\n    price_oranges_per_kg = 1.5\n    price_mangoes_per_kg = 2.3\n    weight_oranges_kg = 4.1\n    weight_mangoes_kg = 2\n\n    total_cost = (price_oranges_per_kg * weight_oranges_kg) + (price_mangoes_per_kg * weight_mangoes_kg)\n\n    return total_cost\n\nans = solution()"
    ],
    "6ac549d7fd244d5c97410534859cd40b": [
        "def solution():\n    # Work rate of A per day\n    work_rate_A = 1 / 15\n    # Work rate of B per day\n    work_rate_B = 1 / 10\n    # Total work done by A and B in 4 days\n    work_done = 4 * (work_rate_A + work_rate_B)\n    # Remaining work to be done\n    remaining_work = 1 - work_done\n    # Days B needs to finish the remaining work\n    days_needed_for_B = remaining_work / work_rate_B\n    \n    return days_needed_for_B\n\nans = solution()"
    ],
    "1e698072c71546a1a63ac8be1c0891fe": [
        "def solution():\n    numbers = [2, 3, 8, 4, 7, 6]  # List of known numbers\n    known_sum = sum(numbers)  # Sum of known numbers\n    total_numbers = len(numbers) + 1  # Total count of numbers including a\n    mean_value = 5  # Given mean of all numbers\n\n    # Calculate the sum of all numbers including a\n    total_sum = mean_value * total_numbers\n    # Calculate the value of a\n    a = total_sum - known_sum\n\n    return a\n\nans = solution()"
    ],
    "292095048e3e4e1983e4b66c7cd45d35": [
        "def solution():\n    # Calculate the sum of the first sequence\n    first_half = sum(range(1, 14))\n    # Calculate the sum of the second sequence\n    second_half = sum(range(1, 13))\n    # Combine both sums, since the second sequence is missing the 13, add it twice\n    total_sum = first_half + second_half + 13\n    return total_sum\n\nans = solution()"
    ],
    "45ba73cc1b1e4ca6b099a7a996e9c3b4": [
        "def solution():\n    original_price = 650\n    reduced_price = 455\n    reduction_amount = original_price - reduced_price\n    percentage_reduction = (reduction_amount / original_price) * 100\n\n    return percentage_reduction\n\nans = solution()"
    ],
    "f380084cf36b45bbbda0a1c8d0634812": [
        "def solution():\n    test_tubes = 0\n    while 2 ** test_tubes < 1000:\n        test_tubes += 1\n    return test_tubes\n\nans = solution()"
    ],
    "28c2da8de504408d83cd9b973e4a5df2": [
        "def solution():\n    number = 100\n    while True:\n        if (number % 5 == 1) and (number % 6 == 1) and (number % 7 == 1):\n            return number\n        number += 1\n\nans = solution()"
    ],
    "3c35813541b2403abf942fa5547821b4": [
        "def solution():\n    # Ducklings have 2 legs each, baby geese have 2 legs each, lambs have 4 legs each\n    ducklings_legs = 4 * 2\n    baby_geese_legs = 2 * 2\n    remaining_legs = 36 - (ducklings_legs + baby_geese_legs)  # Legs left for lambs\n    lambs = remaining_legs // 4  # Each lamb has 4 legs\n\n    return lambs\n\nans = solution()"
    ],
    "2e1b20f5fdfd4bc595117f252b7bcea6": [
        "def solution():\n    # Start with the difference between boys and girls, which is given as 52\n    diff = 52\n\n    # Initialize total students count\n    total_students = 0\n\n    # Iterate over possible square side lengths starting from 3 (minimum 2 layers)\n    # The side length increases by 2 to maintain alternating layers\n    side_length = 3\n    while True:\n        # Boys are on the outermost and alternate layers, girls on the other layers\n        # Calculate boys for a square with current side length\n        boys = (side_length * 4 - 4) + ((side_length - 2) * 4 - 4) * (side_length // 2 - 1)\n        \n        # Girls fill the layers between the boys' layers\n        girls = ((side_length - 2) ** 2) - (((side_length - 2) // 2) * 4 - 4) * ((side_length - 2) // 2)\n        \n        # if the current difference equals to the given difference, break the loop\n        if boys - girls == diff:\n            # Calculate total students\n            total_students = boys + girls\n            break\n        \n        # Increase side_length by 2 for the next iteration (to maintain alternating pattern)\n        side_length += 2\n\n    return total_students\n\nans = solution()"
    ],
    "d5bc2d04c57440d0a114ebf980abe4d0": [
        "def solution():\n    n = 2.5 * 1000  # Convert litres to millilitres (1 litre = 1000 millilitres)\n    return n\n\nans = solution()"
    ],
    "754c4e4720274d728d76669caba145eb": [
        "def solution():\n    remaining_sweets = 6\n    # reverse calculation for the fourth day, from the remaining to the initial number of that day\n    initial_fourth_day = remaining_sweets / (1 - 1/4)\n    # reverse calculation for the third day\n    initial_third_day = initial_fourth_day / (1 - 1/5)\n    # reverse calculation for the second day\n    initial_second_day = initial_third_day / (1 - 1/6)\n    # reverse calculation for the first day to find the initial number of sweets\n    initial_sweets = initial_second_day / (1 - 1/7)\n\n    return initial_sweets\n\nans = solution()"
    ],
    "40435e2c684944fdbc3ffece625e8a3a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of cookies Charlene baked\n    x = symbols('x')\n\n    # Cookies left after Charlene kept half plus 8\n    remaining_after_charlene = x - (x / 2 + 8)\n\n    # Cookies left after Emerald ate a third plus 4\n    remaining_after_emerald = remaining_after_charlene - (remaining_after_charlene / 3 + 4)\n\n    # Cookies left after Hebe ate a quarter\n    remaining_after_hebe = remaining_after_emerald - (remaining_after_emerald / 4)\n\n    # Hebe had 42 cookies left\n    equation = Eq(remaining_after_hebe, 42)\n\n    # Solve the equation\n    total_cookies = solve(equation, x)\n\n    return total_cookies[0]\n\nans = solution()"
    ],
    "3aad0d27a09d4acabf6d7f99f57fe23b": [
        "def solution():\n    first_term = 17\n    last_term = 150\n    difference = 7\n    \n    num_kids = ((last_term - first_term) // difference) + 1\n    \n    return num_kids\n\nans = solution()"
    ],
    "dfa6543288d54c429575cda96cbfdc86": [
        "def solution():\n    from math import sqrt\n\n    # Total matches = n * (n - 1)\n    # Since each match is played twice, consider half the total matches\n    half_matches = 30 / 2\n\n    # Solve the quadratic equation n^2 - n - 2 * half_matches = 0\n    # to find the number of teams (n)\n    n = (1 + sqrt(1 + 8 * half_matches)) / 2\n\n    return int(n)\n\nans = solution()"
    ],
    "03409dc9701540c6a419d3a46178c3c1": [
        "def solution():\n    ans = 528 + 30\n    return ans\n\nans = solution()"
    ],
    "adf81947d41b4b1e99112db71d0a03fa": [
        "def solution():\n    total_sets = 3600\n    sets_per_5_days = 720\n    total_days_needed = (total_sets / sets_per_5_days) * 5\n    return total_days_needed\n\nans = solution()"
    ],
    "1f6bb23ddb7b4674a491542df7d83ca5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the three numbers\n    first, second, third = symbols('first second third')\n\n    # Define the equations based on the given relationships\n    equation1 = Eq(first + second + third, 7656)\n    equation2 = Eq(first, second + 1099)\n    equation3 = Eq(third, second - 877)\n\n    # Solve the system of equations for the three numbers\n    solutions = solve((equation1, equation2, equation3), (first, second, third))\n\n    # Return the value of the second number\n    return solutions[second]\n\nans = solution()"
    ],
    "6b0695abb6df4ba593213d47fe31343a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = 45\n    boys = symbols('boys')\n\n    equation = Eq(girls, 3 * boys - 21)\n\n    num_boys = solve(equation, boys)\n\n    return num_boys[0]\n\nans = solution()"
    ],
    "e72460d64b534a3298ee1f886015ab98": [
        "def solution():\n    prime_factors_2 = 3 # Since 2 * 2 * 2 * 8 gives us 2^4 which is 2 * 2 * 2 * 2 but we just need to count 2 three times\n    prime_factors_5 = 3 # Since 5 * 5 * 25 gives us 5^4 which is 5 * 5 * 5 * 5 but we just need to count 5 three times\n\n    # The number of zeros at the end of the product is determined by the number of (2,5) pairs\n    # Since each pair gives us one trailing zero.\n    num_zeros = min(prime_factors_2, prime_factors_5)\n\n    return num_zeros\n\nans = solution()"
    ],
    "8211d1479b8042baafb1f9c517bfcb00": [
        "def solution():\n    # Create a dictionary to hold the number of ways to reach each step\n    ways_to_step = {0: 1, 1: 1}  # Base cases: 1 way to stand on the ground, 1 way to step on the first step\n    \n    # Calculate the number of ways to get to each step without the restriction of stepping on the fifth step\n    for step in range(2, 10 + 1):\n        ways_to_step[step] = ways_to_step[step - 1] + ways_to_step[step - 2]\n\n    # To include the restriction of stepping on the fifth step, we calculate the number of ways to get to the fifth step\n    # and then from the fifth step to the tenth step.\n    ans = ways_to_step[4] * ways_to_step[5]\n\n    return ans\n\nans = solution()"
    ],
    "928e94ae89fa44c5874fa56b5f7f9faa": [
        "def solution():\n    for n in range(40, 51):\n        if (n ** 0.5).is_integer():\n            return n\n\nans = solution()"
    ],
    "4d1826d9ba0f4ebbb85234e705eb930d": [
        "def solution():\n    ans = 5.824 / 0.4\n    return ans\n\nans = solution()"
    ],
    "b791f9f3418348b2b25b747708582ba4": [
        "def solution():\n    initial_water = 150\n    water_per_cup = 40\n    number_of_cups = 3\n\n    water_used = water_per_cup * number_of_cups\n    water_left = initial_water - water_used\n\n    return water_left\n\nans = solution()"
    ],
    "70fdf0a16e48489da5ef6d613c075f2a": [
        "def solution():\n    return (0.7 + 5.1) / 2\n\nans = solution()"
    ],
    "dcd09d0a6e93478eb3e9e8bd7ce45d74": [
        "def solution():\n    ans = 936 / 54\n    return int(ans)\n\nans = solution()"
    ],
    "01024c395010440bb3461f6a74c2772d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    notebook, pencil_case, eraser = symbols('notebook pencil_case eraser')\n    \n    total_cost = Eq(3*notebook + 4*pencil_case + 5*eraser, 50)\n    notebook_pencil_case_cost = Eq(notebook + pencil_case, 6)\n    pencil_case_eraser_cost = Eq(pencil_case + eraser, 8)\n    \n    solutions = solve((total_cost, notebook_pencil_case_cost, pencil_case_eraser_cost), (notebook, pencil_case, eraser))\n    \n    return solutions[pencil_case]\n\nans = solution()"
    ],
    "2cbe94dcc30b432db9e9911ee6b53171": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Defining the symbols for Alice and her sister's current ages\n    alice, sister = symbols('alice sister')\n    \n    # Constructing the equations based on the problem statement\n    equation1 = Eq(alice, 2 * sister)  # Alice is twice as old as her sister\n    equation2 = Eq(alice + sister + 20, 53)  # In 10 years, their total age will be 53\n    \n    # Using sympy's solve to find the solution to the system of equations\n    solutions = solve((equation1, equation2), (alice, sister))\n    \n    return solutions[alice]\n\nans = solution()"
    ],
    "46c81f732f2f457ea8198cbda5de4904": [
        "def solution():\n    n = 1\n    while True:\n        if n * (n + 1) * (n + 2) * (n + 3) == 3024:\n            return n + 3\n        n += 1\n\nans = solution()"
    ],
    "f347b0c1866d4183abf11ae869f9ba55": [
        "def solution():\n    return 527 - 9\n\nans = solution()"
    ],
    "3efa9649b4a9475fad4ee03677e8ceed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bob = symbols('alan bob')\n    \n    # Bob has 15 more Match Dfex cards than Alan\n    equation1 = Eq(bob, alan + 15)\n    \n    # Colin gives Bob 25 cards - Bob now has 3 times as many as Alan\n    equation2 = Eq(bob + 25, 3 * alan)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (alan, bob))\n    \n    return solutions[alan]\n\nans = solution()"
    ],
    "648fd5bbe5184a74a37d66b24481008b": [
        "def solution():\n    from math import lcm\n\n    # Calculate LCM (Lowest Common Multiple) of the pack sizes\n    pack_lcm = lcm(6, 8, 9, 15)\n\n    # Find the smallest multiple of the LCM that is greater than or equal to 1000\n    markers = pack_lcm\n    while markers < 1000:\n        markers += pack_lcm\n\n    # Calculate the least number of packs needed\n    packs_needed = markers // pack_lcm * 4  # Multiply by 4 because we need equal packs of each size\n\n    return packs_needed\n\nans = solution()"
    ],
    "5563bcc54cdc46f8b6be436624c0097b": [
        "def solution():\n    n_students = 10\n    handshakes_per_student = n_students - 1  # Each student shakes hands with n-1 others.\n    total_handshakes = handshakes_per_student * n_students // 2 # Divide by 2 to avoid double counting.\n    return total_handshakes\n\nans = solution()"
    ],
    "2efad079da624ca689f0016c3dcf7602": [
        "def solution():\n    ans = 34 * 19\n    return ans\n\nans = solution()"
    ],
    "4e17d0e9e030497eb049f15de9682760": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anne, maria = symbols('anne maria')\n    equation1 = Eq(maria, anne + 20)\n    equation2 = Eq(anne + maria, 44)\n\n    solutions = solve((equation1, equation2), (anne, maria))\n\n    return solutions[anne]\n\nans = solution()"
    ],
    "f66a33367339488285ad5b4dd84375df": [
        "def solution():\n    # Given numbers\n    numbers = [678, 6798, 6879, 9876, 6987]\n    target = 6789\n\n    # Initialize variables to keep track of closest number and its difference from target\n    closest_number = None\n    smallest_difference = None\n\n    # Iterate over given numbers to find the closest one to target\n    for number in numbers:\n        # Calculate the absolute difference between the current number and the target\n        difference = abs(target - number)\n\n        # Update closest number and smallest difference if this number is closer\n        if smallest_difference is None or difference < smallest_difference:\n            closest_number = number\n            smallest_difference = difference\n\n    return closest_number\n\nans = solution()"
    ],
    "74956c812140447db809a56e7b348996": [
        "def solution():\n    return abs((20 / 100) * 90 - (90 / 100) * 20)\n\nans = solution()"
    ],
    "a8b915f14aa548d4a3dd9ab3e68ccce6": [
        "def solution():\n    def convert_recurring_to_fraction(recurring_part, non_recurring_part):\n        n = len(non_recurring_part)\n        m = len(recurring_part)\n        non_rec = int(non_recurring_part) if non_recurring_part else 0 \n        rec = int(recurring_part)\n        fraction = (rec + non_rec * (10**m - 1)) / (10**n * (10**m - 1))\n        return fraction\n    \n    # Convert the first recurring decimal to a fraction\n    first_fraction = convert_recurring_to_fraction(\"17\", \"0119925\")\n    \n    # Convert the second recurring decimal to a fraction\n    second_fraction = convert_recurring_to_fraction(\"37\", \"023456\")\n\n    # Start from n = 1 and increment to find the first same nth decimal digit\n    n = 1\n    while True:\n        if int(first_fraction * 10**n) % 10 == int(second_fraction * 10**n) % 10 == 7:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "8863cd48f2b44608bc940bde6c45c8fd": [
        "def solution():\n    morning_fruit = 416\n    afternoon_fruit = 248\n    more_fruit_morning = morning_fruit - afternoon_fruit\n    return more_fruit_morning\n\nans = solution()"
    ],
    "efe5d1d421074320ad4c3900d67cbf17": [
        "def solution():\n    orange_ratio = 2\n    water_ratio = 25\n    orange_weight = 10  # grams\n\n    water_weight = (orange_weight / orange_ratio) * water_ratio\n\n    return water_weight\n\nans = solution()"
    ],
    "5750692f9864439ba5afe8796b229fda": [
        "def solution():\n    scores = [7.9, 8.3, 8.8, 8.6]\n    target_average = 8.5\n    total_scores_so_far = sum(scores)\n    required_total = target_average * (len(scores) + 1)\n    score_needed = required_total - total_scores_so_far\n    return score_needed\n\nans = solution()"
    ],
    "3cb49c7c36f6450c8a64796070308cdc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(60 - 8 * (2 * x - 5), 4)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7fa90f34a95a47b59d3a3839cc104395": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r be the interest rate per year\n    r = symbols('r')\n    \n    # The interest earned at the end of the first year\n    first_year_interest = 10000 * r\n    \n    # The interest earned at the end of the second year, with the interest added to the principal\n    second_year_interest = (10000 + first_year_interest) * r\n    \n    # The total interest over the two years\n    total_interest = first_year_interest + second_year_interest\n\n    # Set up the equation to solve for the interest rate\n    equation = Eq(total_interest, 816)\n\n    # Solve the equation for r (interest rate)\n    solution = solve(equation, r)\n\n    # Assuming the interest rate is the positive value\n    annual_interest_rate = solution[1]*100  # Convert the decimal to a percentage\n\n    return annual_interest_rate\n\nans = solution()"
    ],
    "e2aa604a164645d08fcb78a7d4b2edac": [
        "def solution():\n    dividend_marker = '~\\uline{~~~~~~~~~~}~'\n    divisor = 4\n    quotient = 9\n    remainder = 2\n    \n    reconstituted_dividend = quotient * divisor + remainder\n    \n    if (len(dividend_marker) // 2) == reconstituted_dividend:\n        return reconstituted_dividend\n    else:\n        correct_quotient = (len(dividend_marker) // 2) // divisor\n        correct_remainder = (len(dividend_marker) // 2) % divisor\n        correct_solution = correct_quotient * divisor + correct_remainder\n        return correct_solution\n\nans = solution()"
    ],
    "dede4ea0d33d4f38a225a8f17f3bc881": [
        "def solution():\n    result = (43 - 7) / 2\n    return result\n\nans = solution()"
    ],
    "27bc5028c63b41e1a9f9d0def88902ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    peter_speed, hannah_speed = symbols('peter_speed hannah_speed')\n    equation1 = Eq(peter_speed / hannah_speed, 3 / 4)\n    equation2 = Eq(peter_speed, hannah_speed + 15)\n\n    solutions = solve((equation1, equation2), (peter_speed, hannah_speed))\n    return solutions[hannah_speed]\n\nans = solution()"
    ],
    "0e1fad8ec8d14086ac428eca327ba26b": [
        "def solution():\n    total_pages = 550\n    first_day_pages = 30\n    last_day_pages = 70\n\n    # Let the number of days be 'n' and the common difference be 'd'.\n    # Sum of an arithmetic series: n/2 * (2a + (n - 1)d) = total_pages\n    # Also, last_day_pages = first_day_pages + (n - 1)d\n    # We have to solve these two equations to find 'd'.\n    \n    # From the second equation, we can express n in terms of d\n    # n = (last_day_pages - first_day_pages) / d + 1\n    # Substitute the expression for n into the sum of arithmetic series equation\n    # Solve for d\n\n    # Implement algebra manually since the progression should have:\n    # a common difference (d), total pages read (S = 550),\n    # pages read on first day (a = 30),\n    # and pages read on last day (l = 70)\n    # Also, we can calculate the number of days (n)\n\n    # The sum of arithmetic progression S = n/2 * (a + l)\n    # and l = a + (n - 1)d, then we can solve for n: n = (l - a)/d + 1\n    # We plug the expression of n into the sum of arithmetic progression formula:\n    # S = ((l - a)/d + 1)/2 * (a + l)\n    # 2S = (l - a + d) * (a + l)/d\n    # 2Sd = (a^2 - l^2) + d(a + l)\n    # 0 = a^2 - l^2 + d(a + l) - 2Sd <- This is a quadratic equation in terms of d\n\n    from sympy import symbols, Eq, solve\n\n    d = symbols('d')\n    equation = Eq(first_day_pages**2 - last_day_pages**2 + d * (first_day_pages + last_day_pages) - 2 * total_pages * d, 0)\n    d_value = solve(equation, d)\n\n    # Since 'd' must be positive, we pick the positive solution\n    for val in d_value:\n        if val > 0:\n            return val\n\nans = solution()"
    ],
    "b9075265d1ee4df3938f4e17c31577cb": [
        "def solution():\n    ans = 3.7 + 5.7\n    return ans\n\nans = solution()"
    ],
    "1098f69ccd5544cc85bda00f27b8a033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    mango, pear, apple = symbols('mango pear apple')\n    \n    equation1 = Eq(mango + pear, 3.40)\n    equation2 = Eq(mango + apple, 3.80)\n    equation3 = Eq(4 * mango + 2 * pear + apple, 13.20)\n    \n    solutions = solve((equation1, equation2, equation3), (mango, pear, apple))\n    \n    return solutions[mango]\n\nans = solution()"
    ],
    "6422fe3aeecf483ba766cbd4e64ac26a": [
        "def solution():\n    total_time = 90\n    time_spent_mcq = 23\n    time_spent_fill_blank = 35\n\n    time_left_for_short_answers = total_time - (time_spent_mcq + time_spent_fill_blank)\n\n    return time_left_for_short_answers\n\nans = solution()"
    ],
    "3082b2d8519e44a1ad584e668793812a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    emily, victor, victoria = symbols('emily victor victoria')\n    \n    equation1 = Eq(emily, 3 * victor)\n    equation2 = Eq(victoria, emily + 68)\n    equation3 = Eq(emily + victor + victoria, 320)\n    \n    solutions = solve((equation1, equation2, equation3), (emily, victor, victoria))\n    \n    return solutions[victoria]\n\nans = solution()"
    ],
    "dd7483c3437a49a9a145debe3fa29718": [
        "def solution():\n    train_speed_per_second = 30  # meters per second\n    time_to_cross = 45  # seconds\n    \n    # Distance covered by the train in the given time\n    distance_covered = train_speed_per_second * time_to_cross\n    \n    # Length of the train is given by 850 m\n    train_length = 850\n    \n    # The distance covered includes the length of the train plus the length of the tunnel\n    # Therefore, length of the tunnel is the total distance covered minus the length of the train\n    tunnel_length = distance_covered - train_length\n    \n    return tunnel_length\n\nans = solution()"
    ],
    "dd3e36501a5c492dab63fa293539b326": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    f, o = symbols('f o')  # f for fifty-cent coins, o for one-dollar coins\n    \n    # Original relations\n    original_eq = Eq(f, 2/7 * (f + o))\n    \n    # After receiving more coins from his mother\n    # Received 10 one-dollar coins and 5-dollars' worth of fifty-cent: 5 / 0.50 = 10 fifty-cent coins\n    updated_eq = Eq(2 * (f + 10), o + 10)\n    \n    # Solve the system of equations\n    solutions = solve((original_eq, updated_eq), (f, o))\n    \n    # Total coins at first is the sum of fifty-cent and one-dollar coins\n    total_coins_at_first = solutions[f] + solutions[o]\n\n    return total_coins_at_first\n\nans = solution()"
    ],
    "3b1b4add028148159a147e645f93b19a": [
        "def solution():\n    circles = 5\n    line = 1\n    \n    # Every circle adds n+1 new regions, with n being the number of existing circles\n    circle_parts = sum(range(1, circles + 1))\n    \n    # Every line doubles the number of regions\n    total_parts = (circle_parts + 1) * 2 ** line\n\n    return total_parts\n\nans = solution()"
    ],
    "582a93bd201d467584951df06919257a": [
        "def solution():\n    H = (45 * 7 + 13 * 7) / 7\n    return H\n\nans = solution()"
    ],
    "88a249b7e2d34dfe98ded5f27cc37e47": [
        "def solution():\n    total_money = 55\n    saved_money = 32.5\n    spent_money = total_money - saved_money\n\n    # Let x be the money spent on transportation\n    # Therefore, money spent on food is 2x\n    # And the total spent money is x + 2x = 3x\n    # We solve for x first\n    money_spent_on_transportation = spent_money / 3\n    money_spent_on_food = 2 * money_spent_on_transportation\n\n    return money_spent_on_food\n\nans = solution()"
    ],
    "424ae64f8f474576a4106f853829077b": [
        "def solution():\n    # Calculate the costs for the first 3 tons\n    first_3_tons_cost = 4 * 3\n    # Including the fixed service fee\n    fixed_service_fee = 4\n    # Calculate the remaining money after fixed costs\n    remaining_money = 109 - (first_3_tons_cost + fixed_service_fee)\n    # Calculate additional tons she can use with the remaining money\n    additional_tons = remaining_money // 3\n    # Total tons of water used is the first 3 tons plus the additional tons\n    total_tons = 3 + additional_tons\n    \n    return total_tons\n\nans = solution()"
    ],
    "adde032b1234481e91098235d742001a": [
        "def solution():\n    # 4 choices for Joe to enter\n    joe_options = 4\n    # 3 choices for Mike because he cannot enter the same as Joe\n    mike_options = 3\n    # 3 choices for Tina, because Tina can enter any door, independent of Joe's or Mike's choices\n    tina_options = 3\n\n    # Multiply the number of choices for each person\n    total_ways = joe_options * mike_options * tina_options\n    \n    # Now consider the order in which they enter. There are 3 people, so 3! ways to order them.\n    orderings = 3 * 2 * 1\n\n    # Multiply the options by the number of orderings\n    ans = total_ways * orderings\n\n    return ans\n\nans = solution()"
    ],
    "e80abf22da4c4703bbd3c8b8cb247517": [
        "def solution():\n    return 3258 // 9\n\nans = solution()"
    ],
    "5d63dffe5e5b4c6195a4e20ccdebb0f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amelia, bala, carl, daniel = symbols('amelia bala carl daniel')\n\n    equation1 = Eq(bala, amelia + 320)\n    equation2 = Eq(bala, (amelia + carl + daniel) / 2)\n    equation3 = Eq(carl, (amelia + bala + daniel) * 3 / 4)\n    equation4 = Eq(amelia + bala + carl + daniel, 6230)\n    equation5 = Eq(amelia, 160)\n\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (amelia, bala, carl, daniel))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "19e51d8fef124cbcb849c81b5dde55d3": [
        "def solution():\n    # Quotient of the division\n    quotient = 15\n    # Remainder of the division\n    remainder = 6\n\n    # Smallest possible divisor is always 1 more than the remainder\n    smallest_divisor = remainder + 1\n    \n    # To find the dividend: (divisor * quotient) + remainder\n    smallest_dividend = (smallest_divisor * quotient) + remainder\n\n    return smallest_dividend\n\nans = solution()"
    ],
    "ba3935cd34094e49a8cea4e788c25c2f": [
        "def solution():\n    # Let x be the time it takes for the lazy gardener to mow the lawn alone.\n    # Quick gardener's work rate is 1/12 lawn/hour.\n    # Lazy gardener's work rate is 1/x lawn/hour.\n    # Together, their work rate is 1/8 lawn/hour.\n    \n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((1/12 + 1/x), 1/8)\n\n    # Solving for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5d728c04569e4acda389027dab33f9d6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of apples and oranges\n    apples, oranges = symbols('apples oranges')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(oranges, apples + 32)\n    equation2 = Eq((apples - apples/3) + (oranges - oranges/2), 100)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    # Calculate the total number of fruits at first\n    total_fruits = solutions[apples] + solutions[oranges]\n\n    return total_fruits\n\nans = solution()"
    ],
    "e94e14d7daec44d3928cf6249572099e": [
        "def solution():\n    total_candy = 12 + 9 + 0  # Total candy brought by Eve, Alice, and Irene\n    number_of_girls = 3       # Total number of girls to share the candy\n    candy_per_girl = total_candy // number_of_girls  # Candy each girl gets equally\n\n    return candy_per_girl\n\nans = solution()"
    ],
    "d21ed197c3554a4494dc5ae572154e6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    noah, pete, howard = symbols('noah pete howard')\n    \n    equation1 = Eq(noah + pete, 75)\n    equation2 = Eq(noah + howard, 145)\n    equation3 = Eq(howard, 3 * pete)\n    \n    solutions = solve((equation1, equation2, equation3), (noah, pete, howard))\n    \n    return solutions[noah]\n\nans = solution()"
    ],
    "ab8b76c78fba49bba15b8e9295c78803": [
        "def solution():\n    belinda_tomatoes = 36\n    tomatoes_given = 7\n    matthew_tomatoes = belinda_tomatoes - tomatoes_given\n\n    return matthew_tomatoes - tomatoes_given\n\nans = solution()"
    ],
    "ef768e372ece4b9c863d8281a92c382f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    initial_amount = 182\n    dresses_cost = 5 * x\n    skirts_cost = 3 * x\n    remaining_money = 5 * x\n\n    # Equation: initial_amount = dresses_cost + skirts_cost + remaining_money\n    equation = Eq(initial_amount, dresses_cost + skirts_cost + remaining_money)\n\n    value_of_x = solve(equation, x)\n\n    return value_of_x[0]\n\nans = solution()"
    ],
    "b4d71da68bcc434e8354987810259e88": [
        "def solution():\n    from math import floor, ceil\n\n    ans = floor(2017) - ceil(201.7) + floor(20.17) - ceil(2.017)\n    return ans\n\nans = solution()"
    ],
    "b2aea1c47ffd41fb983fc289346c687f": [
        "def solution():\n    green_line_interval = 5\n    red_line_interval = 6\n    \n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    \n    # Find the least common multiple (LCM) of the two trains' intervals\n    minutes_until_sync = lcm(green_line_interval, red_line_interval)\n    \n    # Convert minutes to hours and minutes\n    hours, minutes = divmod(minutes_until_sync, 60)\n    \n    # Starting time is at 5:00 am, so add the hours to this base time\n    sync_hour = 5 + hours\n    sync_minutes = minutes\n    \n    # Adjust for 24-hour time format if needed\n    sync_hour = sync_hour % 24\n    \n    return f\"{sync_hour:02d}:{sync_minutes:02d}\"\n\nans = solution()"
    ],
    "d1701c8b237c4c5181c58dcde299fe9b": [
        "def solution():\n    ans = 2\n    product = 1\n    for i in range(3, 15, 2):\n        product *= i\n        ans += product\n    return ans\n\nans = solution()"
    ],
    "a5d947afabb14059a86977035b7e71e6": [
        "def solution():\n    jug_capacity = 990  # in mL\n    half_jug = jug_capacity / 2\n    capacity_per_cup = half_jug / 3\n    return capacity_per_cup\n\nans = solution()"
    ],
    "cd28c0514392451480947377c812fcb5": [
        "def solution():\n    ans = (77.5 * (52 / 100)) + (5.2 * 2.25)\n    return ans\n\nans = solution()"
    ],
    "65e148bb5a774c4b8538009506ae4475": [
        "def solution():\n    total_cars = 15\n    position_from_front = 8\n\n    position_from_back = total_cars - position_from_front + 1\n\n    return position_from_back\n\nans = solution()"
    ],
    "aec33ac892404f198dfd2e4806f460f4": [
        "def solution():\n    # Distance between each tree\n    distance_per_tree = 3\n\n    # Total distance Olivia walks from the first to the 101th tree\n    distance_walked = (101 - 1) * distance_per_tree\n\n    # Time taken to walk between 100 trees (in minutes)\n    time_to_walk_100_trees = 3\n\n    # Olivia's walking speed in meters per minute\n    walking_speed = distance_walked / time_to_walk_100_trees\n\n    # Total distance from school to home\n    total_distance = 4000\n\n    # Time taken to travel to school at the same speed\n    time_to_school = total_distance / walking_speed\n\n    return time_to_school\n\nans = solution()"
    ],
    "258f6418c7a44634b786fa4d69d806ec": [
        "def solution():\n    number = 29381\n    nearest_thousand = 1000\n    ans = round(number / nearest_thousand) * nearest_thousand\n    return ans\n\nans = solution()"
    ],
    "7d415985d40749aeae60fb6233cfafce": [
        "def solution():\n    cost_per_gram = 80 / 100\n    cost_for_250_grams = cost_per_gram * 250\n    return cost_for_250_grams\n\nans = solution()"
    ],
    "4274973e4812443fb90e78a925599481": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n    # equations based on given problem\n    equation_1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation_2 = Eq(apple + banana, 0.48)\n\n    # solving the equations\n    solutions = solve((equation_1, equation_2), (apple, banana))\n\n    cost_of_5_bananas = 5 * solutions[banana]\n\n    return cost_of_5_bananas\n\nans = solution()"
    ],
    "f24d6740b95540bf84759a2c0479e327": [
        "def solution():\n    total = 0\n    for i in range(6, 52, 5):\n        total += i**2\n    return total\n\nans = solution()"
    ],
    "5fcdd3004ac646839223368cdc7d8517": [
        "def solution():\n    return 2017 + 597\n\nans = solution()"
    ],
    "80479df10d714924af0698610d81b4e7": [
        "def solution():\n    # Owen traded 5 fish for 2 rabbits: 1 rabbit = 5/2 fish\n    rabbit_fish_ratio = 5 / 2\n\n    # Oscar traded 4 rabbits for 7 packs of wheat: 1 pack of wheat = 4 rabbits / 7\n    wheat_rabbit_ratio = 4 / 7\n\n    # Simplify the continued ratio to find how many fish equal 1 pack of wheat\n    fish_wheat_ratio = rabbit_fish_ratio / wheat_rabbit_ratio\n\n    # Now we want to find how many fish should Owen give Dennis for 14 packs of wheat\n    fish_for_14_wheat = fish_wheat_ratio * 14\n\n    return fish_for_14_wheat\n\nans = solution()"
    ],
    "e9f47ee528114383ba4f6be4529ce4b8": [
        "def solution():\n    # The sequence is an arithmetic sequence with a common difference of 4\n    # The formula for the sum of squares of an arithmetic series is:\n    # \\sum_{k=1}^{n} (ak+b)^2 = [2n(2n+1)(2n+2)a^3 + 3n(n+1)(2n+1)a^2b + 3n(n+1)(n-1)ab^2 + nb^3] / 6\n    # for the sequence 4^2, 8^2, 12^2, ..., 124^2\n    # a = 4 (common difference)\n    # b = 0 (since it's a multiple of the common difference)\n    # n is the number of terms, which we can find as follows:\n    \n    first_term = 4\n    last_term = 124\n    common_difference = 4\n    n = (last_term // common_difference)  # This is the term number of the last term\n    \n    # Calculate the sum using the derived formula for arithmetic series\n    a = common_difference\n    b = 0\n    sum_of_squares = (2*n*(2*n+1)*(2*n+2)*a**3 + 3*n*(n+1)*(2*n+1)*a**2*b + 3*n*(n+1)*(n-1)*a*b**2 + n*b**3) // 6\n\n    return sum_of_squares\n\nans = solution()"
    ],
    "9a284d31007d42739f51042d9bcfbb75": [
        "from itertools import permutations\n\ndef solution():\n    entrances = ['A', 'B', 'C']\n    people = ['Len', 'Joe', 'Angle', 'Jack']\n\n    all_permutations = set(permutations(people + entrances * 3, 4))\n    \n    valid_permutations = [p for p in all_permutations if len(set(p) & set(entrances)) >= 1]\n    ans = len(valid_permutations)\n    \n    return ans\n\nans = solution()"
    ],
    "739abceeaa8940b49a1de4e16f2e066f": [
        "def solution():\n    total_marks = 23\n    marks_per_correct = 5\n    marks_per_wrong = -2\n    total_questions = 6\n\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        if correct_answers * marks_per_correct + wrong_answers * marks_per_wrong == total_marks:\n            return correct_answers\n\nans = solution()"
    ],
    "210032ce53ff4939827463e6a45cdfea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'c' be the number of cows and 'g' the number of goats initially.\n    c, g = symbols('c g')\n\n    # 65% of the animals were cows, so the rest (35%) were goats.\n    equation1 = Eq(c, 0.65 * (c + g))\n    equation2 = Eq(g, 0.35 * (c + g))\n\n    # After adding 240 animals, cows became 85% of all animals.\n    # The number of goats doubled.\n    equation3 = Eq(0.85 * (c + g + 240), c + 240)\n    equation4 = Eq(2 * g, g + 240)\n\n    # Solving the system of equations.\n    solutions = solve((equation1, equation2, equation3, equation4), (c, g))\n\n    return solutions[g]\n\nans = solution()"
    ],
    "854b6e25b0df409b8d09ffcf3c018a12": [
        "def solution():\n    numbers = [4, 6, 12, 18]\n    mean = sum(numbers) / len(numbers)\n    return mean\n\nans = solution()"
    ],
    "1f3d2852ba334ae381d67ba4685feefc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin = symbols('justin')\n\n    equation = Eq(justin + 18, 4 * (justin - 6))\n\n    solutions = solve(equation, justin)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "d1030adb2d044db580ef9ccb90cd0ce2": [
        "def solution():\n    time_per_drawing = 124\n    total_drawings = 111\n    \n    total_time = time_per_drawing * total_drawings\n    \n    return total_time\n\nans = solution()"
    ],
    "e705de293fcb400b9a1dfb656dfa1166": [
        "def solution():\n    cookies = 1\n    while True:\n        if cookies % 8 == 0 and cookies % 9 == 1:\n            return cookies\n        cookies += 1\n        \nans = solution()"
    ],
    "fd98368e011c40af9c0a16f0fe8c92a9": [
        "def solution():\n    ans = 378 - 196\n    return ans\n\nans = solution()"
    ],
    "cb887c2f2c5545b7a05451b8ef325c36": [
        "def solution():\n    return (2.6 + 4.8) / 2\n\nans = solution()"
    ],
    "fb6bdead23d74b31a9f612a923a7e6d0": [
        "def solution():\n    ans = 828 + 191\n    return ans\n\nans = solution()"
    ],
    "6689bf51afe64009a81b09cd69008faf": [
        "def solution():\n    books_per_case = 10 // 2\n    total_books_in_six_cases = books_per_case * 6\n    return total_books_in_six_cases\n\nans = solution()"
    ],
    "99f042a00a454b7493149ecaa15aeaae": [
        "def solution():\n    total_cost = 62\n    if total_cost >= 50:\n        discount = 15\n    elif total_cost >= 20:\n        discount = 4\n    else:\n        discount = 0\n    \n    final_payment = total_cost - discount\n    return final_payment\n\nans = solution()"
    ],
    "4bc1254a6fe041a991a7100f650c67ac": [
        "def solution():\n    from math import factorial as fact\n    \n    # Number of ways to arrange two boys at the ends is 2! (since we can swap their places)\n    boys_permutations = fact(2)\n    \n    # Number of ways to arrange three girls in the middle is 3! \n    girls_permutations = fact(3)\n\n    # Apply the multiplication principle\n    total_permutations = boys_permutations * girls_permutations\n    \n    return total_permutations\n\nans = solution()"
    ],
    "ceadf2b1ae6f4d6885ecfbb1cd6a855f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n    \n    # Chinese Remainder Theorem: solve_congruence((remainder1, modulus1), (remainder2, modulus2), ...)\n    # Bud's number divided by 4, 5, 6 gives remainder 1, 2, 3 respectively\n    cong = solve_congruence((1, 4), (2, 5), (3, 6))\n    \n    # Since it's less than 100, we need to find the smallest positive solution\n    num, modulo = cong\n    while num >= 100:\n        num -= modulo\n    \n    return num\n\nans = solution()"
    ],
    "ccebb61c3253490ca4582aebc55574a0": [
        "def solution():\n    num_str = '2023'\n    i = 1\n    while True:\n        if int(num_str) % 11 == 0:\n            return len(num_str)\n        num_str += '2023'\n        i += 1\n\nans = solution()"
    ],
    "60b666d3655c439dae65e37097947530": [
        "def solution():\n    ans = 224 - 75\n    return ans\n\nans = solution()"
    ],
    "86e9c26ad82341cfa9a20b2d32bf56b0": [
        "def solution():\n    # Given ages of the siblings\n    possible_ages = [6, 9, 10]\n\n    # We know:\n    # Tom's age is a multiple of 3 (so he can be 9 or 6)\n    # Jason is younger than Tom (so Tom cannot be 6, thus Tom is 9)\n    # The remaining age that is not taken by Tom or Jason is Adam's age.\n    # Since Jason has to be younger than Tom, Jason is 6 (the only age left that's less than Tom's age)\n\n    # Adam's age is then the one that is left, which is 10.\n    adam_age = 10\n\n    return adam_age\n\nans = solution()"
    ],
    "07a423a429ad445dae3180bf686780f7": [
        "def solution():\n    # Worst case scenarios for picking same two colors: Red and White, Red and Yellow, White and Yellow\n    # Since there are 5 balls each, we can draw 5 from one color and 5 from another color\n    # In worst case, we will have all balls of only two colors after drawing 10 balls\n    # To ensure we get the third color, we need to draw one more ball\n    # So, the minimum number of balls we need to draw to definitely get 3 different colors is 10 + 1\n    return 5 + 5 + 1  # Worst case red and white, plus one more to get yellow\n\nans = solution()"
    ],
    "84dcdcd96c1048d69413739dad19be6d": [
        "def solution():\n    b = (7 + 9) / 4\n    return b\n\nans = solution()"
    ],
    "07da074b86d84faabb12f53c21c42e0c": [
        "def solution():\n    ans = 80040\n    return ans\n\nans = solution()"
    ],
    "72e7f1101ae74488b35a8eb2c990d03b": [
        "def solution():\n    return 483 // 21\n\nans = solution()"
    ],
    "218136d2d92e439d904e0302f6af8a72": [
        "def solution():\n    # Since the numbers must be distinct and each of six people must get at least one apple,\n    # Assign the smallest number of apples to the other five children first, which are 1, 2, 3, 4, and 5 apples.\n    min_apples_others = sum(range(1, 6))  \n\n    # Subtract the total number of apples given to other children from the total available apples\n    # to find the maximum number Avril could get.\n    max_apples_avril = 28 - min_apples_others\n\n    return max_apples_avril\n\nans = solution()"
    ],
    "7c9de8ac84804f9ba2fe6b73d259b89d": [
        "def solution():\n    count = 0\n    for number in range(1, 401):\n        count += str(number).count('3')\n    return count\n\nans = solution()"
    ],
    "21a782c4b45c43f9b4ecbc9c1de7c46b": [
        "def solution():\n    total_money = 984\n    laptop_cost = (5/8) * total_money\n    return laptop_cost\n\nans = solution()"
    ],
    "e9497c826db341cda1c37f184c32773e": [
        "def solution():\n    # Ratio of Joyce's speed to Lori's speed is 3:2\n    joyce_to_lori_ratio = 3 / 2\n    \n    # Lori's speed is 2 meters per second\n    lori_speed_m_per_s = 2\n    \n    # Calculate Joyce's speed\n    joyce_speed_m_per_s = joyce_to_lori_ratio * lori_speed_m_per_s\n    \n    # Calculate how far Joyce can run in 10 seconds\n    time_seconds = 10\n    joyce_distance = joyce_speed_m_per_s * time_seconds\n    \n    return joyce_distance\n\nans = solution()"
    ],
    "50398a9afcad4e3e91e6a646e9abe499": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n    \n    # The given equations\n    equation1 = Eq(2 * triangle, square)\n    equation2 = Eq(square + triangle, circle)\n    equation3 = Eq(diamond, circle + square + triangle)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (triangle, square, circle, diamond))\n    \n    # Find how many triangles are equal to diamond\n    num_triangles = solutions[diamond] / solutions[triangle]\n\n    return num_triangles\n\nans = solution()"
    ],
    "e1599fd308ba411f82f7fa4febd782fe": [
        "def solution():\n    initial_avg = 60\n    new_avg = 70\n    initial_sum = initial_avg * 2  # since there are initially two numbers\n    new_sum = new_avg * 3  # after adding the third number\n\n    # The newly added number is the difference between the new sum and the initial sum\n    new_number = new_sum - initial_sum\n    return new_number\n\nans = solution()"
    ],
    "b93faf4325af43f9b9ddf824cb85bb6d": [
        "def solution():\n    first_term = 16\n    difference = 23 - 16\n    last_term = 79\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "ea15746d343648b5b1905e6b6b3058e1": [
        "def solution():\n    trophies = sum(range(1, 6)) + sum(range(4, 0, -1))\n    return trophies\n\nans = solution()"
    ],
    "40c1e8a02c9845be9b54d604dedcbd90": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Define the times using the datetime module\n    time_left_school = datetime.strptime('15:22', '%H:%M')\n    time_caught_bus = datetime.strptime('16:01', '%H:%M')\n    bus_trip_duration = timedelta(minutes=18)\n    time_got_home = datetime.strptime('16:35', '%H:%M')\n\n    # Calculate walking time before the bus\n    walk_to_bus_stop = time_caught_bus - time_left_school\n\n    # Calculate walking time after the bus\n    drop_off_time = time_caught_bus + bus_trip_duration\n    walk_home = time_got_home - drop_off_time\n\n    # Total walking time\n    total_walking_time = walk_to_bus_stop + walk_home\n\n    return total_walking_time.seconds // 60  # convert to minutes\n\nans = solution()"
    ],
    "46c88bd515d4485ea196f2cb3df07861": [
        "def solution():\n    boys = 290\n    girls = boys - 80\n    total_children = boys + girls\n    percentage_boys = (boys / total_children) * 100\n    return percentage_boys\n\nans = solution()"
    ],
    "2a34cf02f3524187ba971bb585f0ff12": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ken_initial, lisa_initial, amount_given = symbols('ken_initial lisa_initial amount_given')\n    \n    # Ken had $15 more than Lisa at first\n    equation1 = Eq(ken_initial, lisa_initial + 15)\n    \n    # After giving money to Lisa, Ken has $21 less than Lisa\n    equation2 = Eq(ken_initial - amount_given, lisa_initial + amount_given - 21)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (ken_initial, lisa_initial, amount_given))\n    \n    return solutions[amount_given]\n\nans = solution()"
    ],
    "3836f8199279464492fa9ffeb517630a": [
        "def solution():\n    # Create the sequence\n    sequence = []\n    for i in range(1, 9):\n        sequence.extend([i] * (i+1))\n    \n    # Sort the sequence and find its length\n    sequence.sort()\n    n = len(sequence)\n\n    # Calculate the median\n    if n % 2 == 0:\n        median = (sequence[n//2 - 1] + sequence[n//2]) / 2\n    else:\n        median = sequence[n//2]\n    \n    return median\n\nans = solution()"
    ],
    "e91231eaf4d8439faaede60ec5091276": [
        "def solution():\n    total_blue = 18\n    total_red = 6\n    total_orange = 8\n\n    # To ensure getting 2 red marbles, consider the worst case scenario:\n    # picking all blue, then all orange, and finally red.\n    # Since we want to ensure 2 red marbles, we need to pick one less than the total red,\n    # then all from other colors.\n\n    marbles_to_pick = total_blue + total_orange + (total_red - 1) + 1\n\n    return marbles_to_pick\n\nans = solution()"
    ],
    "34f44583a8cd45e19c113454790dece8": [
        "def solution():\n    digits = [3, 1, 9, 2]\n    largest = int(''.join(map(str, sorted(digits, reverse=True))))\n    smallest = int(''.join(map(str, sorted(digits))))\n    \n    return largest - smallest\n\nans = solution()"
    ],
    "9f8ac2e29e8241a1b702cf02e3cc8591": [
        "def solution():\n    # Let x be the number of cookies eaten on the first day.\n    # Then each subsequent day has 6 more cookies than the previous day.\n    # Therefore, the sequence of cookies eaten each day forms an arithmetic sequence:\n    # x, x+6, x+12, x+18, x+24\n    # We know the sum of this sequence is 100 cookies over 5 days.\n    # The sum of an arithmetic sequence is given by the formula:\n    # Sum = (number of terms / 2) * (first term + last term)\n    # In this case, Sum = 100, number of terms = 5\n    # So, 100 = (5/2) * (x + (x + 24))\n    # Simplifying the equation: 100 = (5/2) * (2x + 24)\n    # 100 = 5x + 60\n    # 5x = 40\n    # x = 8\n    first_day_cookies = (100 - (6 * 4 * 5) / 2) / 5\n    return int(first_day_cookies)\n\nans = solution()"
    ],
    "372d3979dd3241aa8a0f262aeedf3e12": [
        "def solution():\n    # initialize the number of students facing the teacher\n    facing_teacher = 0\n    \n    # iterate through each student's number\n    for num in range(1, 31):\n        # use inclusion-exclusion principle to determine if a student ends up facing the teacher\n        # a student will end up facing the teacher if they turn for an odd number of times\n        turns = (num % 2 == 0) + (num % 3 == 0)\n        if turns % 2 == 0:\n            facing_teacher += 1\n            \n    return facing_teacher\n\nans = solution()"
    ],
    "bf2cd12d57fa4f7bb8bebd58e44e01a3": [
        "def solution():\n    ans = 3267 - 745\n    return ans\n\nans = solution()"
    ],
    "89e2769fb2db4433a5c129d85a787ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve, sqrt\n\n    x = symbols('x')\n    equation = Eq(sqrt(x) + sqrt(36), sqrt(81))\n    \n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "3814e1d67d1e4e95aa0ff2ddfffc3251": [
        "def solution():\n    return 2184 // 7\n\nans = solution()"
    ],
    "6f725efbd53047b3a646809b5162d3a0": [
        "def solution():\n    ans = 221 * 4\n    return ans\n\nans = solution()"
    ],
    "7670470dcd1f4c8c96ea9a2887dfc3bc": [
        "def solution():\n    first_term = 10\n    nth_term = 25\n    total_rows = 25\n    nth_row = 4\n    \n    common_difference = (nth_term - first_term) // (nth_row - 1)\n    total_athletes = (total_rows / 2) * (2 * first_term + (total_rows - 1) * common_difference)\n    \n    return int(total_athletes)\n\nans = solution()"
    ],
    "8dc109b953614926bb4b8a13ca7104a0": [
        "def solution():\n    # Choosing gate 2 increases the probability of winning the car.\n    # This is a well-known problem called the Monty Hall problem.\n    # Initially, the probability of selecting the car is 1/3.\n    # After a gate with a goat is revealed, switching to the other gate\n    # makes the probability of winning the car 2/3.\n    \n    # So we should choose gate 2.\n    # You can compute this with Bayes' theorem or simulate this problem\n    # but since you've asked for a simple solution, we will just return\n    # the gate number with higher probability of winning.\n    \n    return 2  # Switch to gate 2\n\nans = solution()"
    ],
    "29fb2769be344578a23b172da388fb1e": [
        "def solution():\n    first_term = 1\n    last_term = 49\n    difference = 2\n\n    # Number of terms in arithmetic sequence\n    num_terms = ((last_term - first_term) // difference) + 1\n    \n    # Sum of arithmetic sequence\n    sum_sequence = (num_terms * (first_term + last_term)) // 2\n    \n    return sum_sequence\n\nans = solution()"
    ],
    "708c9e7ed608441c98ea48c7bbc04858": [
        "def solution():\n    dividend = 468\n    divisor = 9\n    ans = dividend // divisor\n    return ans\n\nans = solution()"
    ],
    "dfba4fdc8eb54b0c962f907a4edf3d42": [
        "def solution():\n    number = 0\n    while True:\n        number += 1\n        if number % 4 == 2 and number % 3 == 2 and number % 7 == 1:\n            return number\n\nans = solution()"
    ],
    "33f5c3de051f4cdebf9fe82fa4041ef2": [
        "def solution():\n    num_visits = 6\n    cost_per_visit = 'x'\n    \n    total_spent = num_visits * cost_per_visit\n\n    return total_spent\n\nans = solution()"
    ],
    "c34160a26e5c402eae8db3c3bc42f9b9": [
        "def solution():\n    s = sum(i * (i + 1) for i in range(1, 32))\n    return s\n\nans = solution()"
    ],
    "0c251d28e5f34b3790b5b39adc9a140b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable representing the original sum of money David had\n    original_sum = symbols('original_sum')\n\n    # Since he spent 3/4th of his money on CDs, the remaining is 1/4th\n    remaining_after_cds = original_sum * 1/4\n\n    # He spent 1/4th of the remaining sum on batteries\n    remaining_after_batteries = remaining_after_cds * (3/4)\n\n    # He was left with 1/3 of the original sum after buying batteries\n    remaining_final = original_sum / 3\n\n    # Set up the equation based on the problem statement\n    equation = Eq(remaining_after_batteries, remaining_final)\n\n    # Solve for the original sum\n    solution = solve(equation, original_sum)\n\n    return solution[0]\n\nans = solution()"
    ],
    "60431e14fe314b0dbc9334280d889c13": [
        "def solution():\n    trainers_to_pokemon = 7 / 7  # Each trainer can catch 1 pokemon in 7 minutes\n    total_pokemon_in_49_minutes = 49\n    \n    # Since time is also scaled by 7, the number of trainers remains constant\n    trainers_needed = total_pokemon_in_49_minutes / trainers_to_pokemon\n    \n    return trainers_needed\n\nans = solution()"
    ],
    "6e103a2ef68043989f0694b5cb663d85": [
        "def solution():\n    from math import factorial as fact\n    \n    # Calculate the number of permutations for choosing 3 books out of 7 to lend\n    permutations = fact(7) // fact(7 - 3)\n    \n    # Divide by the number of ways to arrange the 3 books among the 3 students to get combination\n    combinations = permutations // fact(3)\n\n    return combinations\n\nans = solution()"
    ],
    "9193db4182e34c75be3ffc7a426aad35": [
        "def solution():\n    number_of_friends = 12\n    tommy = 1  # Including Tommy\n    minutes_spent_each = 142\n\n    total_minutes = (number_of_friends + tommy) * minutes_spent_each\n\n    return total_minutes\n\nans = solution()"
    ],
    "a6a193e0597a44869d654226d5c6024e": [
        "def solution():\n    num_99_digit = '928' * 33  # Repeat the sequence to get the 99 digits number\n    num_99_digit = int(num_99_digit)  # Convert the string to an integer\n    remainder = num_99_digit % 9  # Find the remainder when divided by 9\n\n    return remainder\n\nans = solution()"
    ],
    "aad63064de384c75967ad2fe1ab5fc65": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oplus = symbols('oplus')\n    equation = Eq(oplus * 9 + 47 - oplus, 84 + 27)\n    \n    solution = solve(equation, oplus)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "d8e38e05e8d54b2da8f23e0d88ae7907": [
        "def solution():\n    total_people = 5000\n    incorrect_answers = 1500\n\n    percentage_incorrect = (incorrect_answers / total_people) * 100\n\n    return percentage_incorrect\n\nans = solution()"
    ],
    "077a03a4ff1146cf942d5c075e60786b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the three numbers\n    smallest, middle, largest = symbols('smallest middle largest')\n    \n    # Equations based on the given information\n    equation1 = Eq(smallest + middle + largest, 56)\n    equation2 = Eq((smallest + middle)/2, 14)\n    equation3 = Eq((middle + largest)/2, 22)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (smallest, middle, largest))\n    \n    # Return the median number\n    return solutions[middle]\n\nans = solution()"
    ],
    "2a141bb7917247d0940bb1bec7dc53e1": [
        "def solution():\n    target = 2.5\n    numbers = [3, 2.1, 2.494, 2.449, 2.51]\n    closest = min(numbers, key=lambda num: abs(num - target))\n    return closest\n\nans = solution()"
    ],
    "e771bc7cbc15407692c34b8827ae5c9c": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 0, 2, 3]\n    even_numbers = []\n    \n    for perm in permutations(digits):\n        if perm[-1] % 2 == 0 and perm[0] != 0:  # the number is even and does not start with 0\n            even_numbers.append(int(''.join(map(str, perm))))\n    \n    return min(even_numbers)\n\nans = solution()"
    ],
    "2a41554ff61e4bf3b29916349e9d7f23": [
        "def solution():\n    total_juice = 10  # litres of orange juice\n    per_container = 2  # litres per container\n\n    num_containers = total_juice / per_container\n\n    return int(num_containers)\n\nans = solution()"
    ],
    "308dc425a3d44c09abe3d9fd91e8ec30": [
        "def solution():\n    count = 0\n    for number in range(1, 41):\n        if '2' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0fbd2843bdcc4f0a895c0a1773ac180c": [
        "def solution():\n    for bars in range(1, 100):\n        eliot_cost = 12 * bars\n        maya_cost = 17 * bars\n\n        eliot_change = (3 * 100) - eliot_cost\n        maya_change = (4 * 100) - maya_cost\n        \n        if eliot_change == maya_change and eliot_change > 0:\n            return bars\n\nans = solution()"
    ],
    "026a3697b867401aa50c1eed67be23fe": [
        "def solution():\n    equation1 = 66 * 2 + 66 * 3\n    equation2 = 66 * 5\n    return equation1 == equation2\n\nans = solution()"
    ],
    "b7fea9e98bef46af9acd40209ffe5387": [
        "def solution():\n    ans = 297 + 198 + 204 + 99\n    return ans\n\nans = solution()"
    ],
    "c42ce86645884bed8f12c68ae8245158": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define the symbols for Jackson's and Chloe's current ages.\n    jackson, chloe = symbols('jackson chloe')\n\n    # We are given 2 equations:\n    # 1. The sum of their ages is 54.\n    equation1 = Eq(jackson + chloe, 54)\n    \n    # 2. In 3 years' time, Jackson will be 5 times as old as Chloe.\n    equation2 = Eq(jackson + 3, 5*(chloe + 3))\n\n    # Solving the system of equations.\n    solutions = solve((equation1, equation2), (jackson, chloe))\n\n    # Jackson's age 3 years later.\n    jackson_age_later = solutions[jackson] + 3\n\n    return jackson_age_later\n\nans = solution()"
    ],
    "1feb10160f034a898eb973a9aac889c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the price of one pork dumpling and one bun\n    pork_dumpling, bun = symbols('pork_dumpling bun')\n\n    # Define the equations based on the given problem\n    equation1 = Eq(6 * pork_dumpling + 4 * bun, 92)\n    equation2 = Eq(3 * pork_dumpling + bun, 41)\n\n    # Solve the equations for the price of one pork dumpling and one bun\n    solutions = solve((equation1, equation2), (pork_dumpling, bun))\n\n    # Return the price of one pork dumpling\n    return solutions[pork_dumpling]\n\nans = solution()"
    ],
    "f7e855eea0fd468da4854a78b1524831": [
        "def solution():\n    for i in range(1, 50):\n        if i % 5 == 0 and i % 6 == 3 and i % 8 == 5:\n            return i\n\nans = solution()"
    ],
    "ada253044cf143859091a35ddb998f0b": [
        "def solution():\n    base_fare = 2.5\n    additional_fare = 1.2\n    total_cost = 8.5\n    base_distance = 1.8\n\n    # Calculate the cost of additional distance\n    additional_cost = total_cost - base_fare\n    \n    # Calculate the additional distance traveled\n    additional_distance = additional_cost / additional_fare\n    \n    # Calculate the total distance traveled\n    total_distance = base_distance + additional_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "c25c01f5db07454fba0a46c84f70815c": [
        "def solution():\n    # If at least one student gets at least 3 apples,\n    # and there are 80 apples to distribute,\n    # then in the worst-case scenario where all other students get 2 apples,\n    # we can calculate the maximum number of students (class size) by considering:\n    # 3 apples to 1 student and 2 apples to each of the remaining students.\n    # Let s be the number of students, then we have the inequality:\n    # 3 + 2*(s-1) <= 80\n    \n    # We need to find the largest s that satisfies the inequality\n    # Rearrange the inequality:\n    # 2s - 2 <= 77\n    # 2s <= 79\n    # s <= 39.5\n    # Since s must be an integer, s must be at most 39.\n    # Therefore, the largest possible class size is 39.\n    return 39\n\nans = solution()"
    ],
    "dfa5352c28124e0ebb6a359a752ef95f": [
        "def solution():\n    return 648 * 5\n\nans = solution()"
    ],
    "186bc13df3b24db5a2d94b621966fdd7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, yellow, blue = symbols('red yellow blue')\n\n    equation1 = Eq(red, 2 * yellow)\n    equation2 = Eq(blue, 3 * yellow)\n    equation3 = Eq(red + yellow + blue, 150)\n\n    solutions = solve((equation1, equation2, equation3), (red, yellow, blue))\n\n    return solutions[red]\n\nans = solution()"
    ],
    "7a0515a38a4e44bc9248081a392748cd": [
        "def solution():\n    received_chocolate = 8\n    original_chocolates = received_chocolate * 2  # Mom gave half, so multiply by 2 to get original number\n    return original_chocolates\n\nans = solution()"
    ],
    "36675ac7266944a1a8727f6fe3dbe742": [
        "def solution():\n    boys = 36\n    girls = 12\n    boys_per_big_car = 4\n    girls_per_small_car = 2\n\n    total_big_cars = boys // boys_per_big_car\n    total_small_cars = girls // girls_per_small_car\n\n    total_cars = total_big_cars + total_small_cars\n\n    return total_cars\n\nans = solution()"
    ],
    "8f2c8b866334452790965d39bbf73bfd": [
        "def solution():\n    julia_age = 7\n    mother_age = 36\n    father_age = 42\n    total_current_age = julia_age + mother_age + father_age\n    \n    years = 0\n    while total_current_age + 3 * years < 100:\n        years += 1\n\n    return years\n\nans = solution()"
    ],
    "900f814eac484c948ddfe9ef92667f08": [
        "def solution():\n    ounces_per_pound = 16\n    pounds_per_kg = 2.2\n    weight_ounces = 56\n\n    weight_pounds = weight_ounces / ounces_per_pound\n    weight_kg = weight_pounds / pounds_per_kg\n\n    return round(weight_kg, 1)\n\nans = solution()"
    ],
    "a1c19e0170ab4067a75561de9f31246c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(x + 0.25*x, 200)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "d4f51ce9d1594b9dae05c831a2fa12b0": [
        "def solution():\n    # Calculate the sum from 5 to 80\n    sum_to_80 = sum(range(5, 81))\n    # Calculate the sum from 5 to 78 (since 79 and 80 are only counted once)\n    sum_to_78 = sum(range(5, 79))\n    # The total sum is twice the sum from 5 to 78, plus 79 and 80\n    total_sum = 2 * sum_to_78 + 79 + 80\n    return total_sum\n\nans = solution()"
    ],
    "5eb0c6d54ccd4e5192f0639fa9e61712": [
        "def solution():\n    ans = 342 * 24\n    return ans\n\nans = solution()"
    ],
    "639d9d79e69d4eb784e27de0551d879d": [
        "def solution():\n    ans = sum(2019 / (i * (i + 7)) for i in range(3, 2013, 7))\n    return ans\n\nans = solution()"
    ],
    "f2784483b59048f78ecec37c0cf104ea": [
        "def solution():\n    original_price = 32 / (1 - 0.20)\n    final_price = 32 - 4\n    total_discount = original_price - final_price\n    total_percentage_discount = (total_discount / original_price) * 100\n\n    return total_percentage_discount\n\nans = solution()"
    ],
    "79716db040e342488b8e0ca3c513ff69": [
        "from math import factorial\n\ndef solution():\n    # Since A wants to stand to the left of B, and B to the left of C,\n    # we fix their relative positions as A, B, C.\n    # There are 2 remaining positions where D and E can stand.\n\n    # We count permutations of A, B, C as one entity and D, E as another two.\n    # So, we first arrange the ABC group and DE group in the 3 available slots.\n    ways_to_arrange_ABC_DE = factorial(3)\n\n    # We then arrange D and E in the 2 remaining slots.\n    ways_to_arrange_D_E = factorial(2)\n\n    # The total number of ways is the product of the two.\n    total_ways = ways_to_arrange_ABC_DE * ways_to_arrange_D_E\n\n    return total_ways\n\nans = solution()"
    ],
    "fdf926a10e994a328cedd41a2dba9645": [
        "def solution():\n    first_term = 21\n    last_term = 159\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "3cfe944baa5b44af9f73a9a9804766df": [
        "from itertools import permutations\n\ndef solution():\n    max_sum = 0\n    for p in permutations(range(1, 10)):\n        sum_A = (100*p[0] + 10*p[1] + p[2]) + \\\n                (100*p[1] + 10*p[2] + p[3]) + \\\n                (100*p[2] + 10*p[3] + p[4]) + \\\n                (100*p[3] + 10*p[4] + p[5]) + \\\n                (100*p[4] + 10*p[5] + p[6]) + \\\n                (100*p[5] + 10*p[6] + p[7]) + \\\n                (100*p[6] + 10*p[7] + p[8])\n        if sum_A > max_sum:\n            max_sum = sum_A\n    return max_sum\n\nans = solution()"
    ],
    "59c88edfb7be49da8035991eac68ecce": [
        "from itertools import permutations\n\ndef solution():\n    digits = '012345'\n    permuted_numbers = sorted([''.join(p) for p in permutations(digits)])\n    return permuted_numbers[504]  # 505th number is at index 504\n\nans = solution()"
    ],
    "4336ad7957714455a5e676bfde71730b": [
        "def solution():\n    # The pattern seems to be related to finding the difference between the \n    # square of the number and the number itself\n    # Let's try to find the formula by analyzing given examples:\n    # 10*10 = 100, and 100 -10 = 90 => 9 without the last digit is 9 which is the result\n    # 11*11 = 121, and 121 - 11 = 110 => 11 without the last digit is 1 which is the result\n    # Hence, the pattern could be (number*number - number) without the last digit\n    # Now let's apply this pattern to 55*55\n\n    number = 55\n    result = (number * number) - number\n    # Remove the last digit from the result\n    ans = result // 10\n    return ans\n\nans = solution()"
    ],
    "8fa1eaa5b7fa4b98874b9e1f39b2e808": [
        "def solution():\n    digits = [0, 2, 3]\n    count = 0\n    \n    for i in digits:\n        for j in digits:\n            for k in digits:\n                if i != 0 and i != j and j != k and k != i:\n                    count += 1\n    \n    return count\n\nans = solution()"
    ],
    "f81850060b9546ac8c3d3601b6fcbdba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls = symbols('girls')\n    boys = 36 - girls\n\n    total_score = 36 * 89\n    girls_score = girls * 88\n    boys_score = boys * 91\n\n    equation = Eq(girls_score + boys_score, total_score)\n    girls_number = solve(equation, girls)\n\n    return girls_number[0]\n\nans = solution()"
    ],
    "eea0bc5267ed47068ae3e77ef2b698e5": [
        "def solution():\n    return 546 * 4\n\nans = solution()"
    ],
    "7ee4e5c971f5489dada98a446c456e7d": [
        "def solution():\n    multiples = []\n    for i in range(21, 50):\n        if i % 6 == 0 and i % 9 == 0:\n            multiples.append(i)\n    return multiples\n\nans = solution()"
    ],
    "6bef5aece1a847a6937f986da3d23922": [
        "def solution():\n    # Alice's work rate per day\n    alice_work_rate = 1 / 40\n    # Bob's work rate per day\n    bob_work_rate = 1 / 60\n    # Total amount of work done\n    work_done = 1\n\n    # Total work rate per day if both are working\n    combined_work_rate = alice_work_rate + bob_work_rate\n\n    # 27 days of Bob working alone\n    bob_work_done = 27 * bob_work_rate\n\n    # Now, we find the days Alice actually worked by subtracting the amount of work Bob did alone\n    # from the total work required, then divide by Alice's work rate\n    alice_actual_work_days = (work_done - bob_work_done) / alice_work_rate\n\n    # The number of days Alice took off will be the total days minus the number of days Alice actually worked\n    alice_days_off = 27 - alice_actual_work_days\n\n    return alice_days_off\n\nans = solution()"
    ],
    "b8879dc8433645f393f3d14ce8b21788": [
        "def solution():\n    from fractions import Fraction\n    \n    # Calculate the fraction of each color in the simplest form\n    # If red:white = 1:2 and white:black = 3:4\n    # Then red:white:black = 3:6:8, because 1*3:2*3 = 3:6 and 3:4 can stay the same for white:black\n    total_ratio = 3 + 6 + 8\n\n    # Calculate the number of red balls\n    red_balls = Fraction(3, total_ratio) * 136\n    \n    return red_balls.numerator\n\nans = solution()"
    ],
    "730403a00f674fff868250a995376cb4": [
        "def solution():\n    # Since 105, 120, 135 are the 7th, 8th, and 9th terms respectively,\n    # the common difference of the arithmetic sequence can be determined.\n    common_difference = 120 - 105  # or 135 - 120\n\n    # To find the first term (a1), we utilize the 7th term and backtrack 6 steps (since 7 - 1 = 6)\n    first_term = 105 - (6 * common_difference)\n\n    # Now we want to find the 100th term.\n    # nth term of an arithmetic sequence is given by: a_n = a1 + (n-1) * d\n    nth_term = first_term + (100 - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "640eb5c54e4c4b87a5a40a1c3e55b996": [
        "def solution():\n    eleventh_square = 11 ** 2\n    return eleventh_square\n\nans = solution()"
    ],
    "371b5fe21e2e4a93b42f86daca04f7cf": [
        "def solution():\n    ans = 5297 + 7345\n    return ans\n\nans = solution()"
    ],
    "703de86e768447d88b6ebb7aeb638e8e": [
        "def solution():\n    # Combined age four years ago\n    combined_age_four_years_ago = 24\n    \n    # Since four years have passed, each of the 3 dogs is 4 years older now\n    age_now = combined_age_four_years_ago + 3 * 4\n    \n    # In two years' time, each dog will be 2 years older\n    combined_age_in_two_years = age_now + 3 * 2\n\n    return combined_age_in_two_years\n\nans = solution()"
    ],
    "606a8457449743e08d9df3044b63e356": [
        "def solution():\n    # Considering the worst-case scenario using the pigeonhole principle,\n    # if we want to guarantee at least one matching pair, we take out socks as follows:\n    # Take one red sock, and at this point, we can't be sure we have a pair.\n    # Take one blue sock, and we still can't be sure.\n    # Continue taking socks alternatively until we get a pair.\n    # The worst case is that we have picked all socks of one color without a match.\n    # Therefore, after taking 4 socks of one color, the next sock we take,\n    # no matter the color, will definitely form a pair.\n    # That's the 5th sock, which guarantees us to have at least one matching pair.\n\n    min_socks_to_take = 5\n    return min_socks_to_take\n\nans = solution()"
    ],
    "c7d0858edd084447b5408a6df5a80275": [
        "def solution():\n    n = (4 ** 2) / 2\n    return n\n\nans = solution()"
    ],
    "fe37a41678a645a88ee9bdcc3da1b86a": [
        "def solution():\n    piano_only = 30 - 15\n    violin_only = 41 - 15\n    both = 15  \n    total_students = piano_only + violin_only + both\n    return total_students\n\nans = solution()"
    ],
    "7db195e18e37456ca8f6e7f6ef27321c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ryan, audrey = symbols('ryan audrey')\n    \n    # original ratio\n    equation1 = Eq(ryan / audrey, 2/7)\n    # new ratio after Ryan bought 20 more and Audrey gave away 80\n    equation2 = Eq((ryan + 20) / (audrey - 80), 1/3)\n    \n    # solving the system of equations\n    solution = solve((equation1, equation2), (ryan, audrey))\n    \n    return solution[audrey]\n\nans = solution()"
    ],
    "cff9675f0a924539ac2ac9ce83a0a08d": [
        "def solution():\n    hour = 8\n    minute = 30\n    # Angle gained by minute hand per minute\n    minute_angle = 360 / 60\n    # Angle gained by hour hand per minute\n    hour_angle = 360 / (12 * 60)\n    # Total angle covered by minute hand from 12\n    total_minute_angle = minute * minute_angle\n    # Total angle covered by hour hand from 12\n    total_hour_angle = (hour % 12) * 60 * hour_angle + minute * hour_angle\n    # Difference between the two angles\n    angle_diff = abs(total_hour_angle - total_minute_angle)\n    # Smallest angle between the hands\n    ans = min(angle_diff, 360 - angle_diff)\n    return ans\n\nans = solution()"
    ],
    "c530af2f48304f898bbec512de1ee00a": [
        "def solution():\n    justin_eaten = 4\n    sisters_eaten = 4 * 5\n    apples_left = 20\n    \n    total_apples = justin_eaten + sisters_eaten + apples_left\n    \n    return total_apples\n\nans = solution()"
    ],
    "efb92f40c4c44473bfcc2623df15f364": [
        "def solution():\n    ans = sum([i if (i // 2) % 2 == 1 else -i for i in range(1, 61)])\n    return ans\n\nans = solution()"
    ],
    "153332ac79b349408ebeb32bb8a75f24": [
        "def solution():\n    return 489 + 375 + 92\n\nans = solution()"
    ],
    "f4489da9f1884801a10bcedceb12a47f": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Define the total time needed to get ready and travel\n    total_minutes = 13 + 23 + 8 + 27\n\n    # Time the student is required to arrive at school\n    school_arrival_time = datetime.strptime('7:45 AM', '%I:%M %p')\n\n    # Calculate the wake up time by subtracting the required prep time from the school arrival time\n    wake_up_time = school_arrival_time - timedelta(minutes=total_minutes)\n\n    # Format the time as required\n    formatted_wake_up_time = wake_up_time.strftime('%I:%M %p')\n\n    return formatted_wake_up_time\n\nans = solution()"
    ],
    "7730e0dc2bae4994a062e0e494e4b937": [
        "def solution():\n    for chickens in range(52):\n        ducks = chickens  # same number of ducks as chickens\n        cows = 51 - chickens - ducks\n        if chickens * 2 + ducks * 2 + cows * 4 == 160:\n            return chickens\n\nans = solution()"
    ],
    "8d5b99e07c77482abfe53cb919364656": [
        "def solution():\n    ans = 4.2 + 7.8 + 7.5 - 2.5\n    return ans\n\nans = solution()"
    ],
    "a97028adbf254284ad53a804e526f05e": [
        "def solution():\n    total_beads = 65\n    pattern_length = 3 + 2 + 2  # number of beads in one full pattern (black, white, red)\n    full_patterns = total_beads // pattern_length\n    remaining_beads = total_beads % pattern_length\n\n    black_beads_in_full_pattern = 3 # number of black beads in one full pattern\n    total_black_beads = full_patterns * black_beads_in_full_pattern\n\n    if remaining_beads > 3:  # If there are more remaining beads than a black beads sequence\n        total_black_beads += black_beads_in_full_pattern\n    else:\n        total_black_beads += remaining_beads\n\n    return total_black_beads\n\nans = solution()"
    ],
    "43077c3455b94d59a72275e377e21a52": [
        "def solution():\n    initial_amount = 750\n    drank_rebekah = initial_amount * (1/5)\n    drank_abigail = 200\n    drank_anna = 120\n\n    remaining_amount = initial_amount - drank_rebekah - drank_abigail - drank_anna\n\n    return remaining_amount\n\nans = solution()"
    ],
    "ef5c87ebb60d47efb47ffb24ab3fdaa4": [
        "def solution():\n    percentage = 75 / 100\n    quantity = 90\n    return percentage * quantity\n\nans = solution()"
    ],
    "11f6f29725ad4c4dacb24f94de454b8a": [
        "def solution():\n    coins = [1, 2, 5]\n    totals = set()\n    for c1 in coins:\n        for c2 in coins:\n            for c3 in coins:\n                totals.add(c1 + c2 + c3)\n    return len(totals)\n\nans = solution()"
    ],
    "b440fab9ebc4484292e18843c0eaa0f9": [
        "from math import factorial\n\ndef solution():\n    # First, choose an entrance for Tina, she has 4 options.\n    tina_choices = 4\n\n    # Joe can then choose from the remaining 3 entrances.\n    joe_choices = 3\n\n    # Mike cannot join the same entrance as Joe, so he has 2 options left.\n    mike_choices = 2\n\n    # The order of entrance for these three people is uncertain. So we must\n    # consider the different permutations for the order they can enter.\n    # There are 3 people, so 3! (3 factorial) permutations.\n    order_permutations = factorial(3)\n\n    # Multiply these together to find the total number of different ways.\n    total_ways = tina_choices * joe_choices * mike_choices * order_permutations\n\n    return total_ways\n\nans = solution()"
    ],
    "0046d00874954b5eb9373fa247e7d3bb": [
        "def solution():\n    ans = 8.4 - 4.7 + 2.6 - 3.3\n    return ans\n\nans = solution()"
    ],
    "acfd2df07c9d4b9e8c8d0fd768515606": [
        "def solution():\n    return 2136 // 8\n\nans = solution()"
    ],
    "71354999b1864945830241cc90cefcff": [
        "def solution():\n    total_distance = 3000  # in nautical miles\n    time_days = 13\n    time_hours = 22\n    total_time_hours = time_days * 24 + time_hours  # convert days to hours and add the extra hours\n    average_speed = total_distance / total_time_hours  # calculate average speed\n    return round(average_speed)  # round to nearest integer\n\nans = solution()"
    ],
    "1d807b2a160d43e5ab284c4f23b30f90": [
        "def solution():\n    volume1 = 2  # in liters\n    concentration1 = 0.40  # 40%\n\n    volume2 = 3  # in liters\n    concentration2 = 0.70  # 70%\n\n    total_volume = volume1 + volume2\n    total_juice = (volume1 * concentration1) + (volume2 * concentration2)\n\n    new_concentration = total_juice / total_volume\n\n    return new_concentration\n\nans = solution()"
    ],
    "0153bfa01ade41859016fa9a0b48eb8d": [
        "def solution():\n    min_multiple = (50 // 11) + 1 if 50 % 11 != 0 else 50 // 11\n    max_multiple = 150 // 11\n    return max_multiple - min_multiple + 1\n\nans = solution()"
    ],
    "a5a5bc9b5a914f54b5a59cc324c4e470": [
        "def solution():\n    numbers = [17, 21, 36, 23, 4, 49, 10]\n    sum_of_numbers = sum(numbers)\n    return sum_of_numbers\n\nans = solution()"
    ],
    "4d4ad28089e14625a3c978c761454507": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for unknowns\n    men, women = symbols('men women')\n\n    # When the first bus arrived, 36 women boarded it and left\n    # After that, the number of women became 3/5 of the number of men\n    equation1 = Eq(women - 36, 3/5 * men)\n\n    # Then, the second bus arrived and 48 men boarded it\n    # After that, there is an equal number of men and women\n    equation2 = Eq(men - 48, women - 36)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (men, women))\n\n    # Calculate the total number of people initially at the bus stop\n    total_people_initially = solutions[men] + solutions[women]\n\n    return total_people_initially\n\nans = solution()"
    ],
    "600418fdb9fd41ac90e4ae2ed38c4317": [
        "def solution():\n    initial_stamps = 1347\n    given_to_sister = 339\n    bought_stamps = 455\n    given_away_again = 777\n    \n    remaining_stamps = initial_stamps - given_to_sister + bought_stamps - given_away_again\n    \n    return remaining_stamps\n\nans = solution()"
    ],
    "e8307197fd5741a1bab5b7ce9faff12e": [
        "def solution():\n    people_in_front_of_Bella = 15\n    people_behind_Albert = 12\n    Albert_and_Bella = 2\n    total_people = people_in_front_of_Bella + Albert_and_Bella + people_behind_Albert\n    return total_people\n\nans = solution()"
    ],
    "ca6721b4076a459bbe0a58a7d219708a": [
        "def solution():\n    from sympy import primerange\n\n    primes_list = list(primerange(20, 30))\n\n    return primes_list[0]\n\nans = solution()"
    ],
    "4828afb807854856954b4952a48e470e": [
        "def solution():\n    return 36 * 24\n\nans = solution()"
    ],
    "f826de035ab748bbbf391b6f382601be": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    age = symbols('age')\n\n    equation = Eq(age + 2, 2 * (age - 5))\n\n    solution = solve(equation, age)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5d81fd5bcb6d489fbca8914a372910a6": [
        "def solution():\n    solutions = []\n    for x in range(1, 14):\n        for y in range(1, 14):\n            for z in range(1, 14):\n                if x + y + z == 14 and len(set([x, y, z])) == 3:\n                    solutions.append(sorted([x, y, z]))\n    unique_solutions = []\n    for s in solutions:\n        if s not in unique_solutions:\n            unique_solutions.append(s)\n    ans = len(unique_solutions)\n    return ans, unique_solutions\n\nans, solution_set = solution()"
    ],
    "5990abeaf2ef44129f8a7714654dd1c8": [
        "def solution():\n    numerator = 1 * 3 * 8 + 2 * 6 * 16 + 3 * 9 * 24\n    denominator = 1 * 2 * 4 + 2 * 4 * 8 + 3 * 6 * 12\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "f84e58b96fc548a9b8a2cc0247ee0d82": [
        "def solution():\n    total_cost = 3 * 0.50  # cost of three pens\n    amount_paid = 5  # amount jennifer paid\n\n    change = amount_paid - total_cost  # calculate the change\n    return change\n\nans = solution()"
    ],
    "e9d3605185b84231858a4ef516053885": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(8.5 - 4*(x - 1.5), 2.5*x + 3*(2.5 - x))\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "15264635822b439b919be7d215630609": [
        "def solution():\n    total_books = 3154\n    english_books = 1849\n    chinese_books = total_books - english_books\n    difference = english_books - chinese_books\n    return difference\n\nans = solution()"
    ],
    "646fcc0d8aca45c2b2efbaed5048a912": [
        "def solution():\n    height_diff = 132 - 124 + 1  # There are height_diff distinct potential heights\n    # At least 4 students are of the same height\n    # Using the pigeonhole principle, we need to find the smallest class size such that,\n    # when distributed among the distinct heights, at least 4 students will have the same height\n    \n    # To find the minimum class size, calculate the maximum number of students to avoid 4 students of the same height\n    max_students_without_repeat = (4 - 1) * height_diff  # 3 students for each height\n\n    # Add 1 student to ensure at least 4 students have the same height\n    class_size = max_students_without_repeat + 1\n\n    return class_size\n\nans = solution()"
    ],
    "0760ea6011714945925169546bfe0c97": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    ready_time = datetime.strptime('19:15', '%H:%M')\n    cook_duration = timedelta(hours=1, minutes=25)\n    start_time = ready_time - cook_duration\n    return start_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "8a63aa9572bb4412ae53e5439a7865ac": [
        "def solution():\n    current_sum = 20 + 26\n    years_needed = (48 - current_sum) // 2\n    return years_needed\n\nans = solution()"
    ],
    "db91ac44fa344822983552e996da323b": [
        "def solution():\n    # Since the optimal strategy is to make the remaining number of oranges \n    # a multiple of 4 after each of Fred's turns (so that no matter what George does, \n    # he can't win), Fred should take 1 orange. \n    # This way, 14 oranges are left, which is a multiple of 4, which will allow him to \n    # always reach a multiple of 4 until only 2 or 3 oranges remain,\n    # forcing George to leave at least 1 orange for Fred to win in the next round.\n\n    # Fred takes 1 orange to leave 14 oranges on the table.\n    initial_oranges = 15\n    ideal_remaining = 14 # which is a multiple of 4 minus 2\n    oranges_to_take = initial_oranges - ideal_remaining \n    return oranges_to_take\n\nans = solution()"
    ],
    "c09507e96cc44da8898b1879faefbf61": [
        "def solution():\n    number_of_tickets = 16\n    cost_per_ticket = 112\n    total_cost = number_of_tickets * cost_per_ticket\n    return total_cost\n\nans = solution()"
    ],
    "d87d77e43dab4026a154e8ec2beda138": [
        "def solution():\n    # Number of students who participated in individual categories\n    go = 42\n    checkers = 55\n    chess = 33\n\n    # Number of students who participated in two categories\n    go_checkers = 18\n    go_chess = 10\n    checkers_chess = 9\n\n    # Number of students who participated in all three categories\n    all_three = 5\n\n    # Using the Inclusion-Exclusion Principle for three sets\n    total_students = go + checkers + chess - go_checkers - go_chess - checkers_chess + all_three\n\n    return total_students\n\nans = solution()"
    ],
    "a2090f2b75c044cb932b529d4f6c76ed": [
        "def solution():\n    num_poles = 40\n    distance_between_poles = 3\n\n    total_distance = (num_poles - 1) * distance_between_poles\n\n    return total_distance\n\nans = solution()"
    ],
    "9be9f04df4aa4fad90e2c592b50495cd": [
        "def solution():\n    return 736 / 100\n\nans = solution()"
    ],
    "77fd9afe874840219f53431a52a3a55f": [
        "def solution():\n    ans = (64 - 62) + (60 - 58) + (56 - 54) + (52 - 50) + (48 - 46)\n    return ans\n\nans = solution()"
    ],
    "61c8e4b651014f6abc20d2bf4138cdcb": [
        "def solution():\n    from sympy import factorint\n\n    # Factorize 245\n    factors = factorint(245)\n\n    # To make 245p a cube, each prime factor's power must be a multiple of 3\n    p = 1\n    for factor, power in factors.items():\n        # Calculate the additional power needed to make the power of this prime a multiple of 3\n        additional_power = (3 - power % 3) % 3\n        # Multiply p by this factor enough times to make its total power a multiple of 3\n        p *= factor ** additional_power\n\n    return p\n\nans = solution()"
    ],
    "25a47ea57b4647599987b84251fd1281": [
        "def solution():\n    from itertools import permutations\n\n    for p in permutations('1234567890', 5):\n        e, s, a, m, o = p\n        if e != '0' and s != '0':  # Avoid leading zeroes\n            esse = int(e + s + s + e)\n            sasmo = int(s + a + s + m + o)\n            if esse + 2018 == sasmo:\n                return sum(map(int, s + a + s + m + o))\n\nans = solution()"
    ],
    "22c136c471c246b1b3392b99cb5d2dfb": [
        "def solution():\n    current_year_production = 36000\n    last_year_production_minimum = current_year_production * (1/4)\n    return last_year_production_minimum + 1\n\nans = solution()"
    ],
    "47dff524f26242ad9fa5ff839557debe": [
        "def solution():\n    total_students = 48\n    absent_students = 2  # one sick and one personal leave\n    present_students = total_students - absent_students\n\n    attendance_rate = (present_students / total_students) * 100\n\n    return attendance_rate\n\nans = solution()"
    ],
    "c49f4ad1d6e74285a471cae0a0494b8c": [
        "def solution():\n    numerator = 8\n    denominator_1 = 15\n    numerator_1 = 5\n\n    denominator_2 = (numerator * denominator_1) / numerator_1\n\n    return int(denominator_2)\n\nans = solution()"
    ],
    "4e4e510238974caa86256923e2e038c2": [
        "def solution():\n    first_term = 22\n    last_term = 98\n    difference = 26 - 22  # Difference between terms\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "08f15646d5be4ac6a59a45c45853c225": [
        "def solution():\n    summation = 0\n    for n in range(2, 2018):\n        for k in range(1, n):\n            summation += k / n\n    return summation\n\nans = solution()"
    ],
    "8a10d5adbcea4531970b60dfa42fd819": [
        "def solution():\n    percentage = 30 / 100\n    amount = 270\n    result = percentage * amount\n    return result\n\nans = solution()"
    ],
    "43672fb4dbf24b02bb90359769d8f568": [
        "def solution():\n    numbers = [199, 99.9, 100.2, 100.029, 98.999]\n    closest = min(numbers, key=lambda x: abs(100 - x))\n    return closest\n\nans = solution()"
    ],
    "f784396939674fa89af27d5359f38965": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n    ratio_original = Eq(apples/oranges, 3/8)\n    ratio_after = Eq((apples - 1)/oranges, 1/3)\n    \n    solutions = solve((ratio_original, ratio_after), (apples, oranges))\n    \n    return solutions[oranges]\n\nans = solution()"
    ],
    "1f546f2cbdd947219d887b2aa75e71f6": [
        "def solution():\n    return 25 * 4 * 27\n\nans = solution()"
    ],
    "488c8f884bea4ca59a65a31e0e04aa9d": [
        "def solution():\n    total_savings = 150\n    daily_saving = 2.4\n    days_in_week = 7\n\n    total_days = total_savings / daily_saving\n    total_weeks = total_days / days_in_week\n\n    return int(total_weeks) if total_weeks.is_integer() else int(total_weeks) + 1\n\nans = solution()"
    ],
    "b4e4441c3f0440be8e09da643628b41d": [
        "def solution():\n    # if Tim is the 4th from the front and 3rd from the back, there must be 4 - 1 + 3 members in the vertical line (accounting for Tim being counted twice)\n    vertical_members = 4 + 3 - 1\n    \n    # Similarly, if Tim is the 1st from the left and 4th from the right, there must be 4 - 1 + 1 members in the horizontal line (accounting for Tim being counted twice)\n    horizontal_members = 1 + 4 - 1\n    \n    # Total members is the product of vertical and horizontal members\n    total_members = vertical_members * horizontal_members\n    return total_members\n\nans = solution()"
    ],
    "410cabc838ed44f48fb660b0a2c3782d": [
        "def solution():\n    return 9 + 88\n\nans = solution()"
    ],
    "a9ec2d33adf8474197070ba71da55c04": [
        "def solution():\n    result = (6 + 1/2) / (1/4)\n    return result\n\nans = solution()"
    ],
    "bb3a1671c17647d78e01b43d8630223f": [
        "def solution():\n    # The sum of the first 14 consecutive natural numbers\n    sum_14 = sum(range(1, 15))\n    \n    # Adding 2019 to sum_14\n    target_sum = sum_14 + 2019\n    \n    # Iterate through possible starts of the 8 consecutive numbers\n    for i in range(1, target_sum // 8):\n        # Calculate the sum of these 8 numbers\n        temp_sum = sum(range(i, i + 8))\n        # Compare the sum to our target\n        if temp_sum == target_sum:\n            # Found the starting number\n            return i\n    # If no solution is found (though there should be one), return None\n    return None\n\nans = solution()"
    ],
    "12396eda43e54937ba9c6bd015a43e54": [
        "def solution():\n    first_term = 2\n    last_term = 100\n    difference = 2\n    \n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n    \n    return sum_of_sequence\n\nans = solution()"
    ],
    "02a4bfa1cce24886a09dd6a0ebf0cfc6": [
        "def solution():\n    # Let c be the weight of one chicken and k be the weight of one kangaroo.\n    # According to the problem:\n    # 2 rabbits = 6 chickens => 1 rabbit = 3 chickens\n    # 3 kangaroos = 4 rabbits => 3 kangaroos = 4 * (3 chickens) = 12 chickens\n    # Therefore, 1 kangaroo = 4 chickens\n\n    # kangaroo in terms of chickens\n    kangaroo_in_chickens = 12 / 3\n\n    return int(kangaroo_in_chickens)\n\nans = solution()"
    ],
    "15b65d4a82f249f0b83939ac418a1d25": [
        "def solution():\n    common_factor = 3428\n    sum_of_multipliers = 836 + 162 + 2\n    ans = common_factor * sum_of_multipliers\n    return ans\n\nans = solution()"
    ],
    "a666c2ea1fef4b64a986908460e91640": [
        "from math import factorial\n\ndef solution():\n    word = 'STATISTICS'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n    total_permutations = factorial(len(word))\n    \n    for count in letter_counts.values():\n        total_permutations //= factorial(count)\n    \n    return total_permutations\n\nans = solution()"
    ],
    "28bfcc3c31154a39a652d06135594627": [
        "def solution():\n    total_amount = 1000\n    note_value = 5\n\n    num_notes = total_amount / note_value\n\n    return int(num_notes)\n\nans = solution()"
    ],
    "a1ec4f1847ce4822947204953d74de5b": [
        "def solution():\n    return 342 + 576\n\nans = solution()"
    ],
    "48ff1e7865214bdc975558caeae2d50b": [
        "def solution():\n    ashley_current_age = 10\n    ashley_age_three_years_ago = ashley_current_age - 3\n    brother_age_three_years_ago = ashley_age_three_years_ago - 2\n\n    brother_current_age = brother_age_three_years_ago + 3\n\n    return brother_current_age\n\nans = solution()"
    ],
    "7d88ede971b64fd9827de58a37434916": [
        "def solution():\n    # Given equation: 9*5 + 15*5 = Y * 5\n    \n    # Find the value of Y by dividing the sum by 5\n    Y = (9 + 15)\n    \n    # Return the value of Y\n    return Y\n\nans = solution()"
    ],
    "6fda0ead943b49128df85bf6b5849e36": [
        "def solution():\n    tasks = {\n        'cut_wood': 3,\n        'weave_rope': 1,\n        'dry_wood': 5,\n        'mow_grass': 1,\n        'prepare_food': 1,\n        'soak_grass': 1,\n        'choose_wood': 1\n    }\n\n    # Some tasks can be done simultaneously\n    # Dry wood (5 days) can be done while performing weave grass (1 day), soak grass (1 day), and choose wood (1 day)\n    # So the task soaking grass, weave grass and choose wood can be completed in the days taken for drying wood.\n\n    # The longest set of non-overlapping tasks is: cut wood (3) + dry wood (5) + prepare food (1)\n    max_time = tasks['cut_wood'] + tasks['dry_wood'] + tasks['prepare_food']\n\n    return max_time\n\nans = solution()"
    ],
    "65a3698a450943d3ab1dbc4023a956a8": [
        "def solution():\n    sum_fractions = 0\n    for i in range(1, 2019):\n        fractional_part = ((2018 + i) / 5) - ((2018 + i) // 5)\n        sum_fractions += fractional_part\n    return sum_fractions\n\nans = solution()"
    ],
    "b2264aba67854c45bb17ca0a45c40d21": [
        "def solution():\n    # Snow White is in the exact middle of the line and also the 7th from the front\n    # This means there are 6 people in front of her\n    # Since she is in the middle, there should be 6 people behind her as well\n    # Hence, the total number of dwarves is 6 (in front) + 6 (behind) + 1 (Snow White herself)\n    total_dwarves = 6 + 6 + 1\n    \n    return total_dwarves\n\nans = solution()"
    ],
    "03c5885919f34314bb4b44bfe248420c": [
        "def solution():\n    # Assume there are 'n' schools.\n    # In the worst-case scenario, to prevent any school from having 4 participants,\n    # each of the n-1 schools would have 3 participants, leaving the last school with the remainder.\n    # This is because having 4 participants from a school would mean the need for fewer schools.\n\n    # participants in the competition\n    participants = 100\n\n    # starting from 1, check how many schools are needed so that no school has 4 participants or more\n    for n in range(1, participants + 1):\n        # (n - 1) schools with 3 participants each\n        if (n - 1) * 3 >= participants:\n            # The nth school has the remaining participants, all others have 3 or fewer\n            return n\n\n    return None\n\nans = solution()"
    ],
    "33956c5d5c43463196c5619abf1d36ca": [
        "def solution():\n    for i in range(1000, 10000):\n        product = i * 6\n        quotient = i / 6\n        \n        # Check if the product is a perfect cube and quotient is a perfect square\n        if round(product ** (1/3)) ** 3 == product and round(quotient ** 0.5) ** 2 == quotient:\n            return i\n\nans = solution()"
    ],
    "ace1245119464470b5cdb95b2c3595e4": [
        "from fractions import Fraction\n\ndef solution():\n    result = Fraction(3, 1) + Fraction(5, 9) + Fraction(6, 1) + Fraction(4, 9)\n    return result\n\nans = solution()"
    ],
    "06dde9f26aa64d8c91f787c1c4d71389": [
        "def solution():\n    first_term = 7\n    difference = 3\n    # We use the formula for the last term in an arithmetic sequence: last_term = first_term + (n-1)*difference\n    # Solving for n we get: n = (last_term - first_term) / difference + 1\n    # We know that first_term + (n-1)*difference = 52, because 52 is the last term\n    # Solving for n we get: n = (52 - 7) / 3 + 1 = 16\n    n = (52 - first_term) / difference + 1\n    # Now we can use the formula for the sum of an arithmetic series: sum = n/2 * (first_term + last_term)\n    sum_series = n / 2 * (first_term + 52)\n    \n    return int(sum_series)\n\nans = solution()"
    ],
    "125fbe1405c64507b8d833c4d1798f63": [
        "def solution():\n    # Speed of the faster train\n    v_fast = 48\n    # Speed of the slower train\n    v_slow = 36\n    # Distance difference when they pass each other\n    dist_diff = 70\n\n    # Time taken for the trains to meet\n    # Since they meet at the same time, times are equal: time_fast = time_slow\n    # Therefore, distance_fast / v_fast = distance_slow / v_slow\n    # distance_fast = distance_slow + dist_diff\n    # (distance_slow + dist_diff) / v_fast = distance_slow / v_slow\n    # Solving for distance_slow:\n    distance_slow = (dist_diff * v_slow) / (v_fast - v_slow)\n\n    # Total distance between the stations is the sum of both distances\n    total_distance = distance_slow + (distance_slow + dist_diff)\n\n    return total_distance\n\nans = solution()"
    ],
    "528f30d146454d9fbd940a06520bb850": [
        "from math import lcm\n\ndef solution():\n    return lcm(2, 3, 8)\n\nans = solution()"
    ],
    "8587852257524191ae8a0cf973cb3197": [
        "def solution():\n    # Tim stands 4th from front and 3rd from back, means there are 3 - 1 people in front of him\n    # and 4 - 1 people behind him, making the total length of the line as 4 + (3 - 1).\n    rows = 4 + (3 - 1)\n    \n    # Tim stands 4th from left and 7th from right, means there are 4 - 1 people to his left\n    # and 7 - 1 people to his right, making the total width of the array as 4 + (7 - 1).\n    columns = 4 + (7 - 1)\n    \n    # The total number of band members is rows multiplied by columns.\n    total_band_members = rows * columns\n    \n    return total_band_members\n\nans = solution()"
    ],
    "64d0d52e2bf64e88b638cf7cc846261f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    lily, gigi = symbols('lily gigi')\n    \n    equation1 = Eq(lily - 36, gigi + 36 + 26)\n    equation2 = Eq(lily, 8 * gigi)\n    \n    solutions = solve((equation1, equation2), (lily, gigi))\n    \n    return solutions[lily]\n\nans = solution()"
    ],
    "9d7ec4d7b1464bba9277da3aadbff391": [
        "def solution():\n    total_value = 50 + 20 + 10 + 5\n    brother_value = total_value // 2\n\n    coins = [50, 20, 10, 5]\n    for coin in coins:\n        if total_value - coin == brother_value * 2:\n            return coin\n\nans = solution()"
    ],
    "e56936fac25c4b8e9ff669e07797ab6c": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [\n        (3, 4), # remainder 3 when divided by 4\n        (1, 7), # remainder 1 when divided by 7\n        (5, 9)  # remainder 5 when divided by 9\n    ]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "3a5a01fd9a9844408f2c7062b63270b0": [
        "def solution():\n    result = 48 / (1 + 1/3) / (6/7)\n    return result\n\nans = solution()"
    ],
    "39977f0e34da4e1489169692316de3da": [
        "def solution():\n    count_pairs = 0\n    for num1 in range(1, 101):\n        for num2 in range(num1 + 1, 101):\n            if (num1 + num2) % 5 == 0:\n                count_pairs += 1\n    return count_pairs\n\nans = solution()"
    ],
    "e45decf2b87f4c4ba7f9717cc4a6fb05": [
        "def solution():\n    for boats in range(1, 100):  # Reasonable range for the number of boats\n        for students in range(1, 1000):  # Reasonable range for the number of students\n            # If adding one boat yields 6 students per boat\n            if (students % (boats + 1)) == 0 and (students // (boats + 1)) == 6:\n                # If subtracting one boat yields 9 students per boat\n                if (students % (boats - 1)) == 0 and (students // (boats - 1)) == 9:\n                    return students\n\nans = solution()"
    ],
    "718f81285ce94030bea31c3cbb679ab7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of friends Natalia has\n    # Let y be the total number of chocolates Natalia has\n    x, y = symbols('x y')\n\n    # Setting up equations based on the problem statement\n    equation1 = Eq(y - 18 * x, 41)\n    equation2 = Eq(23 * x - y, 34)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Calculating the number of chocolates left after giving each friend 20 pieces\n    chocolates_left = solutions[y] - 20 * solutions[x]\n\n    return chocolates_left\n\nans = solution()"
    ],
    "0aa90dabe6d64f0285ceda7e7598b164": [
        "def solution():\n    total = 599999 + 59999 + 5999 + 599 + 59 + 5\n    return total\n\nans = solution()"
    ],
    "e5c1b794ac8648ec850e93b55dab48de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'r' be the money Rasidah had initially and 'c' be the money Chai Seng had initially.\n    r, c = symbols('r c')\n\n    # According to the problem, c = r + 48\n    equation1 = Eq(c, r + 48)\n\n    # Rasidah spent 3/5 of her money, so she has 2/5 left.\n    # Chai Seng spent 6/7 of his money, so he has 1/7 left.\n    # In the end, Chai Seng had 1/2 as much money left as Rasidah.\n    equation2 = Eq(1/7 * c, 1/2 * (2/5 * r))\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (r, c))\n\n    return solutions[r]\n\nans = solution()"
    ],
    "5d4699cf5231465b949cc5c32e601170": [
        "def solution():\n    ans = 371 + (24 + 19) * 3\n    return ans\n\nans = solution()"
    ],
    "3dd0e028b2e0476fb27782b124909bdf": [
        "def solution():\n    ans = (0.007) ** 2\n    return ans\n\nans = solution()"
    ],
    "2fc75a01535c4ae98dffb54b5bcd459f": [
        "def solution():\n    digit_list = ['0', '2', '4']\n    two_digit_numbers = set()\n    \n    for first_digit in digit_list[1:]:  # Ensure the first digit is not '0'\n        for second_digit in digit_list:\n            if first_digit != second_digit:  # Different digits for each place\n                two_digit_number = first_digit + second_digit\n                two_digit_numbers.add(two_digit_number)\n    \n    return len(two_digit_numbers)\n\nans = solution()"
    ],
    "d09cf908f3aa4485b244c8b396d7753b": [
        "def solution():\n    # Iterate over all possible combinations of 4 distinct digits\n    for thousands in range(1, 10):  # Thousands digit can't be 0\n        for hundreds in range(0, 10):\n            for tens in range(0, 10):\n                for ones in range(0, 10):\n                    # Check the digits are in increasing order\n                    if thousands < hundreds < tens < ones:\n                        # Check if the tens digit is the sum of the hundreds and thousands\n                        # and the ones digit is the sum of the thousands, hundreds, and tens digit\n                        # and all digits sum up to 16\n                        if tens == (hundreds + thousands) and ones == (thousands + hundreds + tens) and \\\n                           (thousands + hundreds + tens + ones) == 16:\n                            # Return the ones digit since that's what we're looking for\n                            return ones\n\nans = solution()"
    ],
    "4d8046b8a53d442a9ac1c228e0ce0ab7": [
        "from itertools import permutations\n\ndef solution():\n    max_number = 0\n    for perm in permutations([2, 4, 6, 8], 4):\n        num = int(''.join(map(str, perm)))\n        if num % 4 == 0 and num > max_number:\n            max_number = num\n    return max_number\n\nans = solution()"
    ],
    "58650bb89c1441479147f7d4f580c378": [
        "def solution():\n    seven_divided_by_box = 63 / 54\n    box = 7 * seven_divided_by_box\n    return box\n\nans = solution()"
    ],
    "f0bee63f873d497b96407169a7e2db47": [
        "def solution():\n    # constants\n    initial_rate = 2\n    additional_rate = 1\n    service_fee = 3\n    total_money = 63\n\n    # initial usage cost\n    initial_usage_cost = 5 * initial_rate\n    # subtracting the initial usage cost and service fee from total money\n    remaining_money = total_money - initial_usage_cost - service_fee\n\n    # additional usage\n    additional_usage = remaining_money / additional_rate\n\n    # total usage is the sum of the first 5 kolowatt-hour and additional usage\n    total_usage = 5 + additional_usage\n    \n    return total_usage\n\nans = solution()"
    ],
    "11e0382a85804608b378e0d0257999a1": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.1\n    num_years = 5\n\n    final_value = initial_value * (1 - depreciation_rate) ** num_years\n    ans = round(final_value, 1)\n\n    return ans\n\nans = solution()"
    ],
    "01a32f2cf14e462c9b61d1fcd77574f4": [
        "def solution():\n    # Distance covered uphill\n    distance_uphill = 3 * 5  # time * speed\n    \n    # Distance covered downhill\n    distance_downhill = 2 * 10  # time * speed\n\n    # Total distance covered\n    total_distance = distance_uphill + distance_downhill\n\n    # Total time taken\n    total_time = 3 + 2\n\n    # Average speed for whole trip\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "cc135b9291974bc8a3f809cc912e685e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 3), (6, 7), (10, 11)]\n    ans = solve_congruence(*congruences)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "a6fe92eccb9540d7bace6c4b67cdf3d2": [
        "def solution():\n    return -8 - (-19)\n\nans = solution()"
    ],
    "de23539233a540d8a78444b87207ab4f": [
        "def solution():\n    total_big_boxes = 9\n    cookies_per_big_box = 660\n    cookies_per_small_box = 600\n    \n    total_cookies = total_big_boxes * cookies_per_big_box\n    small_boxes_needed = total_cookies // cookies_per_small_box\n\n    # Check if there are any leftover cookies that would require an additional box\n    if total_cookies % cookies_per_small_box != 0:\n        small_boxes_needed += 1\n    \n    return small_boxes_needed\n\nans = solution()"
    ],
    "7134e7994980408d978447b2fb2d3866": [
        "def solution():\n    for x in range(1, 10):  # x cannot be 0, as it is the first digit of the two-digit number\n        for y in range(10):  # y can be 0-9, as it is the second digit of the two-digit number\n            A = 10 * x + y\n            B = 400 + 10 * x + y  # equivalent to the number 4xy\n            if B == 10 + 7 * A:\n                return A\n\nans = solution()"
    ],
    "b59168ae6b464ccaa42cf8065c6eb4ae": [
        "def solution():\n    from sympy import factorint\n\n    number = 4320\n    # Factor the number 4320\n    factors = factorint(number)\n    \n    # Since we're multiplying by (3/2)^n, we need to consider powers of 2 and 3\n    # Present in the prime factorization of 4320.\n    prime_factors_power = {2: factors[2], 3: factors[3]}\n\n    # The expression can only be an integer for powers of (3/2) that\n    # do not reduce the power of 2 below zero.\n    # Hence, the maximum value for n is the power of 2 in the factorization\n    # of 4320, since each (3/2) multiplies another 3 and divides a 2.\n    max_n = prime_factors_power[2]\n\n    return max_n\n\nans = solution()"
    ],
    "0a85a3267e0d4f238d507e043b936277": [
        "def solution():\n    total_students = 43\n    math_pass = 30\n    science_pass = 28\n    english_pass = 25\n\n    max_all_three = math_pass + science_pass + english_pass - total_students\n\n    return max_all_three\n\nans = solution()"
    ],
    "18183ed9b54a424c9c391e8cb804cfc6": [
        "def solution():\n    total_weight = 20 + 30\n    fruit_juice_first = 20 * 0.35\n    fruit_juice_second = 30 * 0.60\n    total_fruit_juice = fruit_juice_first + fruit_juice_second\n\n    concentration = (total_fruit_juice / total_weight) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "f0b18311921842e38deebe821472b76e": [
        "def solution():\n    cookies = 76\n    per_box = 6\n\n    boxes_needed = -(-cookies // per_box) # Ceiling division\n\n    return boxes_needed\n\nans = solution()"
    ],
    "f17963c6412147f8a3c618b9ffa4db12": [
        "def solution():\n    primes = [29, 31, 37, 41, 43]  # Known prime numbers in the sequence\n    for prime in primes:\n        if prime not in [29, 31, 41, 43]:\n            return prime\n\nans = solution()"
    ],
    "048da12bce8148d3a40134a2b3b09a86": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b be the original amount in warehouse B\n    b = symbols('b')\n\n    # According to the statement, warehouse A now has 50 + 12\n    # and warehouse B now has b - 16, and the amount in A is 2 times B now\n    # So the equation is: 50 + 12 = 2 * (b - 16)\n    equation = Eq(50 + 12, 2 * (b - 16))\n\n    # Solve the equation\n    solution = solve(equation, b)\n\n    return solution[0]\n\nans = solution()"
    ],
    "4dbb6a3e89004483bd9aad06124dacee": [
        "def solution():\n    return 0.50 * 0.20 * 6000\n\nans = solution()"
    ],
    "719dc7a052524541afb0f37592e3b324": [
        "def solution():\n    from math import factorial\n\n    total_letters = len('COLLEGE')  # Total number of letters\n    c_count = 1\n    o_count = 1\n    l_count = 2\n    e_count = 2\n    g_count = 1\n\n    # Total number of permutations of the string\n    total_permutations = factorial(total_letters)\n\n    # Since some letters are repeated, we have to divide by the factorial\n    # of the number of times each letter is repeated\n    division_factor = factorial(c_count) * factorial(o_count) * factorial(l_count) * factorial(e_count) * factorial(g_count)\n\n    # Final number of distinct arrangements\n    distinct_arrangements = total_permutations // division_factor\n\n    return distinct_arrangements\n\nans = solution()"
    ],
    "21a6577206bb4af599c66a03599918a9": [
        "def solution():\n    # Owen to Oscar: 3 fishes for 1 rabbit\n    # Oscar to Dennis: 2 rabbits for 3 packs of wheat\n\n    # Find the number of fishes per pack of wheat\n    fishes_per_rabbit = 3 / 1\n    rabbits_per_pack_of_wheat = 2 / 3\n\n    # Calculate fishes per pack of wheat by multiplying the two ratios\n    fishes_per_pack_of_wheat = fishes_per_rabbit * rabbits_per_pack_of_wheat\n\n    return fishes_per_pack_of_wheat\n\nans = solution()"
    ],
    "5b64a9ba57014e80a0eadd05b75a22b7": [
        "def solution():\n    total_cost = 120\n    booking_fee = 30\n    cost_per_hour = 10\n\n    hours_hired = (total_cost - booking_fee) / cost_per_hour\n\n    return hours_hired\n\nans = solution()"
    ],
    "89ba0ac50c0947d59e7ffc2bb24819cb": [
        "def solution():\n    count = 0\n    for x1 in range(10):\n        for x2 in range(10):\n            x3 = 9 - x1 - x2\n            if x3 >= 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "97138569fa3945528991305d98ea59a6": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Setting up the system of congruences based on the problem\n    congruences = [(1, 4), (2, 5), (4, 7)]\n    \n    # Using the Chinese Remainder Theorem to solve the system of congruences\n    pencils, mod = solve_congruence(*congruences)\n    \n    # Find the minimum value that is greater than or equal to 400\n    while pencils < 400:\n        pencils += mod\n    \n    # Check if the solution is between 400 and 500\n    if 400 <= pencils < 500:\n        return pencils\n    else:\n        return \"No solution in the given range\"\n\nans = solution()"
    ],
    "2f137b3f948e48c59657d647ceea7f64": [
        "def solution():\n    # Let the number of people be p and the number of benches be b. \n    # If 3 people sit on one bench, 7 people will have no seat, we get the equation: 3b + 7 = p\n    # If 7 people sit on one bench, there will be 3 extra benches, we get the equation: (b - 3) * 7 = p\n    # We need to solve these two equations to find the number of people p.\n\n    for p in range(1, 1000): # Reasonable upper bound for number of people\n        for b in range(1, p): # Number of benches cannot be more than the number of people\n            if 3 * b + 7 == p and (b - 3) * 7 == p:\n                return p\n\nans = solution()"
    ],
    "283f1a2c7c5141a6b01dc50aa7df541c": [
        "def solution():\n    ans = 21 - 11\n    return ans\n\nans = solution()"
    ],
    "2d05e2c2cd5947adb306583d6211d765": [
        "def solution():\n    total_amount = 21.50\n    ratio_sum = 2 + 3\n    bigger_share = (total_amount / ratio_sum) * 3\n    return bigger_share\n\nans = solution()"
    ],
    "0b6a5290a25f41a7a77aba2e0b7f5322": [
        "def solution():\n    # Given that Dell had twice as many stickers as Ginnie\n    # Let G be the number of stickers Ginnie had\n    # and Dell had 32 stickers.\n    # Dell = 2 * Ginnie\n    # 32 = 2 * G\n    # So, G = 32 / 2\n    ginnie_stickers = 32 // 2\n\n    # Given that Ginnie had 4 times as many stickers as Lyn\n    # Let L be the number of stickers Lyn had\n    # Ginnie = 4 * Lyn\n    # G = 4 * L\n    # So, L = G / 4\n    lyn_stickers = ginnie_stickers // 4\n\n    # The total number of stickers Ginnie and Lyn had altogether is\n    # Ginnie + Lyn\n    total_stickers = ginnie_stickers + lyn_stickers\n\n    return total_stickers\n\nans = solution()"
    ],
    "731fa504bf944a3997349eeb999781ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for Lisa's favourite number\n    fav_number = symbols('fav_number')\n\n    # Define the equation based on the problem statement\n    equation = Eq(fav_number * 2 - 3, 19)\n\n    # Solve for Lisa's favourite number\n    solutions = solve(equation, fav_number)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "209f59bf096047a6b42adec3650f0b2f": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10): # 100's digit must be from 1-9 for a valid 3-digit number\n        for tens in range(10): # 10's digit can be 0-9\n            for ones in range(1, 10, 2): # 1's digit must be odd, hence from 1-9 stepping by 2\n                if hundreds + tens + ones == 5:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "f5c4e560546f4d75baff7ccc4901ab4f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    empty_mass, juice_mass = symbols('empty_mass juice_mass')\n\n    equation1 = Eq((5/6) * juice_mass + empty_mass, 4.6)\n    equation2 = Eq((2/3) * juice_mass + empty_mass, 4.45)\n\n    solutions = solve((equation1, equation2), (empty_mass, juice_mass))\n\n    empty_bottle_mass_kg = solutions[empty_mass]\n    empty_bottle_mass_g = empty_bottle_mass_kg * 1000  # Convert kg to grams\n    \n    return empty_bottle_mass_g\n\nans = solution()"
    ],
    "3243a4ef0c884def972ed158010ea3b4": [
        "def solution():\n    total_digits = 1101\n    pages_count = 0\n    digits_count = 0\n    current_page_number = 1\n\n    while digits_count < total_digits:\n        pages_count += 1\n        digits_count += len(str(current_page_number))\n        current_page_number += 1\n\n    return pages_count\n\nans = solution()"
    ],
    "c0f11f95efb245dcb3a0840d374c7f26": [
        "def solution():\n    return 13 * 17\n\nans = solution()"
    ],
    "6cf21aa3ccf54551ba52bdfff6859b56": [
        "def solution():\n    total_pupils = 235 + 567\n    pupils_each_room = total_pupils // 2\n    return pupils_each_room\n\nans = solution()"
    ],
    "e2b7c0b669b44057aa36a3500e3c6605": [
        "def solution():\n    ans = sum(-1 if i % 2 == 0 else i for i in range(1, 21))\n    return ans\n\nans = solution()"
    ],
    "a97a50db173b4947a7cbbd35408c0568": [
        "def solution():\n    num = 1\n    diff = 2\n    while num < 100:\n        prev_num = num\n        num += diff\n        diff += 2\n    return prev_num\n\nans = solution()"
    ],
    "e9095a6ced1247bda89ad65c13639eb7": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "3b935033a325415c8ec95174a48b4a4e": [
        "def solution():\n    andy_notebooks = 149\n    andy_gives = 38\n    sister_notebooks = andy_notebooks - andy_gives * 2  # Sister will have 38 less after Andy gives her notebooks\n    return sister_notebooks\n\nans = solution()"
    ],
    "403660592ec0470dbd38b7b878ae0a19": [
        "def solution():\n    total_cost = 23\n    book_cost = 3.40\n    magazine_cost = 1.60\n    \n    max_books = total_cost // book_cost\n    for books in range(int(max_books) + 1):\n        cost_books = books * book_cost\n        remaining_cost = total_cost - cost_books\n        if remaining_cost % magazine_cost == 0:\n            magazines = remaining_cost // magazine_cost\n            return int(magazines)\n\nans = solution()"
    ],
    "0fbbc6b96cb740ebbd61af7fbae24d80": [
        "def solution():\n    n = 50\n    sum_of_sequence = n * (n + 1) // 2\n    return sum_of_sequence\n\nans = solution()"
    ],
    "ce60eab1409d4f9baf6240c550f9de18": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    justin, crystal, ashley = symbols('justin crystal ashley')\n\n    # Define the equations based on the problem statement\n    equation1 = Eq(justin, crystal + 64)\n    equation2 = Eq(crystal, 2 * ashley)\n    equation3 = Eq(justin, 10 * ashley)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (justin, crystal, ashley))\n\n    # Calculate the total number of pages read\n    total_pages = solutions[justin] + solutions[crystal] + solutions[ashley]\n\n    return total_pages\n\nans = solution()"
    ],
    "ae03ca6fe3fa45aebbb01c97d1cb54b7": [
        "def solution():\n    # Let A, B, and C represent the weights of Adam, Ben, and Carl respectively.\n\n    # We have the following equations based on the problem statement:\n    # A + B = 102\n    # B + C = 97\n    # A + C = 93\n\n    # We need to find the total weight which is A + B + C.\n    # To do this we add the three equations:\n    # (A + B) + (B + C) + (A + C) = 102 + 97 + 93\n\n    # Simplifying gives us:\n    # 2 * (A + B + C) = 292\n    # Therefore, A + B + C = 292 / 2\n\n    total_weight = (102 + 97 + 93) // 2\n    return total_weight\n\nans = solution()"
    ],
    "1b7cc025e9e347ce80741fb93834ea0c": [
        "def solution():\n    for age in range(1, 100):  # Assuming Mr. Lv's age is below 100\n        base10_age_with_0 = int(str(age) + \"0\")\n        base3_age = int(str(age), 3)\n        if base10_age_with_0 == base3_age:\n            return age\n\nans = solution()"
    ],
    "9b62350128b847c5b5201460ac1d06f0": [
        "def solution():\n    result = (5/8 + 1/17) * 8 + 9/17\n    return result\n\nans = solution()"
    ],
    "250872667abf4b0b871368e870726b7f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    orchids, tulips, roses = symbols('orchids tulips roses')\n    total_flowers = orchids + tulips + roses\n\n    # Original ratios and total flowers equation\n    ratio_eq = Eq(orchids / tulips, 3/5)\n    total_eq = Eq(total_flowers, 3616)\n\n    # After selling flowers\n    flowers_sold_eq = Eq(0.6 * orchids + 0.8 * tulips + 0.75 * roses, 2644)\n\n    # Solve the system of equations\n    solutions = solve((ratio_eq, total_eq, flowers_sold_eq), (orchids, tulips, roses))\n\n    return solutions[orchids]\n\nans = solution()"
    ],
    "6e8c76be7aa54ee7b128dba952c8fee0": [
        "def solution():\n    factors = []\n    for i in range(10, 100):\n        if 7007 % i == 0 and i % 7 == 0:\n            factors.append(i)\n            if len(factors) == 2:\n                break\n    \n    ans = sum(factors)\n    return ans\n\nans = solution()"
    ],
    "0cc063c19a444034a295d8438baf0c4b": [
        "def solution():\n    from math import factorial\n\n    # Since one seat is always empty, fix that seat as a reference\n    # Now we have a fixed position with 7 people to arrange around the table\n    # This is a permutation of 7 people, but since rotation is considered the same,\n    # we treat it as arranging 6 people in a line (since one person's position is fixed)\n\n    people = 7\n    ans = factorial(people - 1)\n\n    return ans\n\nans = solution()"
    ],
    "507deaa25b1c45fcad9434c45d9ba929": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10):\n        for x2 in range(1, 10):\n            x3 = 10 - x1 - x2\n            if x3 > 0 and x1 <= x2 <= x3:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "d156836fbd9444f5a5ba15bda04a829e": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 56))\n    for i in primes:\n        if 55 - i in primes:\n            return i * (55 - i)\n\nans = solution()"
    ],
    "6d336ec6da534a848cc3b89b64fee021": [
        "def solution():\n    ans = 379 * 0.00038 + 159 * 0.00621 + 3.79 * 0.121\n    return ans\n\nans = solution()"
    ],
    "1a9174d419fc4350b792c473f6c385d3": [
        "def solution():\n    # cost of 1 cookie\n    cost_cookie = 9\n    # cost of 3 cheesecake (3 cheesecake = 5 cookies)\n    cost_3_cheesecake = 5 * cost_cookie\n    # cost of 1 cheesecake\n    cost_cheesecake = cost_3_cheesecake / 3\n    # cost of 3 chocolate cake (3 chocolate cake = 2 cheesecake)\n    cost_3_chocolate_cake = 2 * cost_cheesecake\n    # cost of 1 chocolate cake\n    cost_chocolate_cake = cost_3_chocolate_cake / 3\n\n    return cost_chocolate_cake\n\nans = solution()"
    ],
    "9b198ae160ae44c2a23ed12656fc56ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # define variables for the cost of a basketball and a volleyball\n    basketball, volleyball = symbols('basketball volleyball')\n    \n    # create equations based on the given information\n    equation1 = Eq(2 * basketball + 3 * volleyball, 195)\n    equation2 = Eq(4 * basketball + 5 * volleyball, 355)\n    \n    # solve the system of equations\n    solution = solve((equation1, equation2), (basketball, volleyball))\n    \n    # extract the cost of one volleyball\n    cost_volleyball = solution[volleyball]\n    \n    return cost_volleyball\n\nans = solution()"
    ],
    "ab73159fcaf54202a082d7e06f5b5b05": [
        "def solution():\n    for A in range(10):\n        for M in range(10):\n            for C in range(10):\n                if len({2, 0, A, M, C, 1, 9}) == 7 and (20 * 10**4 + A * 10**3 + M * 10**2 + C * 10 + 19) % 9 == 0:\n                    return A + M + C\n\nans = solution()"
    ],
    "0ee15c78437e4441b6fab59b505f4f07": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(C + B, 18)\n    equation2 = Eq(B, A + A + A)\n    equation3 = Eq(C + A, 10)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "3a0c96637f8f4963be5154dec26041d4": [
        "def solution():\n    part_read_in_a_day = 1/4 / 3\n    total_days_to_read = 1 / part_read_in_a_day\n    return total_days_to_read\n\nans = solution()"
    ],
    "813e51f849b44a6fa9381c1e0c4e0ab4": [
        "def solution():\n    return 237 * 3\n\nans = solution()"
    ],
    "16a3dc8e16654eba8f42e5628ae6b0d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mike_candies, valeria_candies = symbols('mike_candies valeria_candies')\n    \n    total_candies = Eq(mike_candies + valeria_candies, 36)\n    candies_after_eating = Eq(valeria_candies - mike_candies, 22 - 6)\n    \n    solutions = solve((total_candies, candies_after_eating), (mike_candies, valeria_candies))\n    return solutions[valeria_candies]\n\nans = solution()"
    ],
    "21362a16887e4938b66f90a3b86538ec": [
        "def solution():\n    n = 42 // (2 * 7)\n    return n\n\nans = solution()"
    ],
    "0451666ed3a54fca8dd2a6d9767c0524": [
        "def solution():\n    recurring_part = '857142'  # This is the recurring pattern in the decimal part of 6/7\n    sum_of_digits = 0\n    for i in range(58):\n        sum_of_digits += int(recurring_part[i % len(recurring_part)])\n    return sum_of_digits\n\nans = solution()"
    ],
    "69441d55da344f318ced84a6b17a5d9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Create symbols for Melissa and her mother's age now\n    melissa, mother = symbols('melissa mother')\n    \n    # Equation 1: The difference in age\n    equation1 = Eq(mother - melissa, 32 - 8)\n    \n    # Equation 2: Mother's age is three times Melissa's age now\n    equation2 = Eq(mother, 3 * melissa)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (melissa, mother))\n    \n    return solutions[melissa]\n\nans = solution()"
    ],
    "d60380a226c84add9f82f10ca29d840d": [
        "def solution():\n    remaining_plants = 4\n    joel_removed = remaining_plants * 2 + 2\n    remaining_plants_after_joel = remaining_plants + joel_removed\n    valerie_removed = remaining_plants_after_joel * 2 + 3\n    remaining_plants_after_valerie = remaining_plants_after_joel + valerie_removed\n    ethan_removed = remaining_plants_after_valerie * 2 + 1\n    initial_plants = remaining_plants_after_valerie + ethan_removed\n\n    return initial_plants\n\nans = solution()"
    ],
    "475ca97d0299476480ca43202424b241": [
        "def solution():\n    from fractions import Fraction\n\n    recurring_decimal = 4 + Fraction(73, 99)  # Recurring decimal 4.7373...\n    non_recurring_decimal = 4.73  # Non-recurring decimal\n    two_sevens = 4.77  # Repeating 7's in decimal part\n    three_decimal_places = 4.737  # Decimal with three decimal places\n\n    decimals = [recurring_decimal, non_recurring_decimal, two_sevens, three_decimal_places]\n    smallest_decimal = min(decimals)\n\n    return smallest_decimal\n\nans = solution()"
    ],
    "4043641cbe8e48579335b4edc83806ab": [
        "def solution():\n    ans = 33 + 29 + 34 + 28 + 27 +30\n    return ans\n\nans = solution()"
    ],
    "67336d9158cc4e12887f9dc78bf7e50d": [
        "def solution():\n    remaining_eggs = 18\n    sold_eggs_second = (remaining_eggs * 2) + 7\n    total_eggs_after_first_sale = remaining_eggs + sold_eggs_second\n    sold_eggs_first = (total_eggs_after_first_sale * 2) - 16\n    initial_eggs = total_eggs_after_first_sale + sold_eggs_first\n    \n    return initial_eggs\n\nans = solution()"
    ],
    "8d86bdb1a0a24c279d87fda22507fcf9": [
        "def solution():\n    final_price = 21\n    increase_percentage = 0.40\n    \n    original_price = final_price / (1 + increase_percentage)\n    \n    return original_price\n\nans = solution()"
    ],
    "9cf67e307d96451eae198324e79cdb76": [
        "def solution():\n    train_length = 128  # The length of the train in meters\n    tunnel_length = 544  # The length of the tunnel in meters\n    train_speed = 52     # The speed of the train in meters per second\n\n    # The total distance to be covered for the train to completely pass through the tunnel\n    total_distance = train_length + tunnel_length\n\n    # The time taken for the train to pass through the tunnel completely is the total distance\n    # divided by the speed\n    time_taken = total_distance / train_speed\n\n    return time_taken\n\nans = solution()"
    ],
    "cb8c28b4153d467c8903c0e71a0a22d4": [
        "def solution():\n    # There are two possible outcomes for each toss: heads or tails.\n    # Since the coin is tossed twice, the total number of outcomes is the product\n    # of the number of outcomes of each toss.\n    outcomes_per_toss = 2\n    total_outcomes = outcomes_per_toss ** 2\n    return total_outcomes\n\nans = solution()"
    ],
    "1234c16c22404bc6a76790494da1a78e": [
        "def solution():\n    num_teams = 5\n    matches = (num_teams * (num_teams - 1)) // 2\n    return matches\n\nans = solution()"
    ],
    "634f64a64d30499f9f880472d43a7055": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for P1 and P6 students\n    P1, P6 = symbols('P1 P6')\n    \n    # Equation 1: The total number of students\n    equation1 = Eq(P1 + P6, 120)\n    \n    # Equation 2: The total number of buckets carried by the students\n    # Note that each P6 carries 2 buckets, and two P1 students carry 1 bucket together,\n    # so for every P1, they effectively carry 1/2 bucket each.\n    equation2 = Eq(2*P6 + 0.5*P1, 180)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (P1, P6))\n    \n    return solutions[P1]\n\nans = solution()"
    ],
    "692b53f35cbd484ba885d86fdf51f30f": [
        "def solution():\n    ans = 7 / (1/3)\n    return ans\n\nans = solution()"
    ],
    "5da1575e00d448078124140f108f6b1b": [
        "def solution():\n    from sympy.solvers import solve\n    from sympy import Symbol\n\n    # Let x be the edge of the cube, so diagonal AG is x * sqrt(3)\n    # P is the point outside of the cube, and PA is what we need to find\n    x = Symbol('x')\n\n    # PB is the diagonal of one face of the cube, so PB is x * sqrt(2)\n    PB = 60 * (10 ** 0.5)\n\n    # PC is the edge of the cube, so PC is x\n    PC = 60 * (5 ** 0.5)\n\n    # PD is the edge of the cube, so PD is x\n    PD = 120 * (2 ** 0.5)\n\n    # PG is the space diagonal through the center of the cube, so PG is x * sqrt(3)\n    PG = 36 * (7 ** 0.5)\n\n    # Since PB, PC, PD are edges of a right triangular prism, we have PB^2 + PC^2 + PD^2 = PG^2\n    equations = [(x * (2 ** 0.5))**2 + x**2 + (x * (2 ** 0.5))**2 - (x * (3 ** 0.5))**2]\n\n    # Solve the equation for x (the edge of the cube)\n    x_val = solve(equations, x)\n\n    # Positive value of x is the edge of the cube\n    x_val = [val.evalf() for val in x_val if val.is_real and val > 0]\n\n    if not x_val:  # if no valid solution found\n        return None\n\n    x_val = x_val[0]\n\n    # PA is the space diagonal of the cube\n    PA = x_val * (3 ** 0.5)\n    return PA\n\nans = solution()"
    ],
    "726917a5243142e79bae60dd034dcbc5": [
        "def solution():\n    from math import gcd\n\n    pencils = 55\n    pens = 143\n    max_students = gcd(pencils, pens)\n\n    return max_students\n\nans = solution()"
    ],
    "53f82e136dfc4d0697c253feec246f5e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for the cost of each basketball and volleyball\n    B, V = symbols('B V') \n\n    # Create the equations based on the given information\n    equation1 = Eq(2 * B + 3 * V, 195)\n    equation2 = Eq(4 * B + 5 * V, 355)\n\n    # Solve the system of equations\n    solution = solve((equation1, equation2), (B, V))\n\n    # Extract the cost of each volleyball from the solutions\n    volleyball_cost = solution[V]\n\n    return volleyball_cost\n\nans = solution()"
    ],
    "4ba6c7d9ff624ec59381cbce9385be36": [
        "def solution():\n    # Owen the fisher's rate: 3 fish for 1 rabbit\n    # Oscar the hunter's rate: 2 rabbits for 3 packs of wheat\n    # To determine how many fish Owen should give Dennis for 1 pack of wheat,\n    # we need to combine these rates.\n\n    # Find the rate of fish to rabbit to wheat\n    fish_to_rabbit = 3  # 3 fish per 1 rabbit\n    rabbit_to_wheat = 2 / 3  # 2 rabbits per 3 packs of wheat\n\n    # Therefore, for 1 pack of wheat, how many fish should Owen give?\n    fish_per_wheat = fish_to_rabbit / rabbit_to_wheat  # Number of fish for one pack of wheat\n\n    return fish_per_wheat\n\nans = solution()"
    ],
    "55734b338e6d4ee0aa4775fc46af08dd": [
        "def solution():\n    boxes_for_14kg = 4\n    apples_per_box = 14 / boxes_for_14kg\n    total_apples = 66.5\n    total_boxes_needed = total_apples / apples_per_box\n    return int(total_boxes_needed)\n\nans = solution()"
    ],
    "363d10eef0ea4189a47ee75921956b9a": [
        "def solution():\n    quotient = 9\n    remainder = 2\n    divisor = 4\n\n    # Johnny's incorrect solution:\n    # wrong_product = quotient * remainder\n    # incorrect_answer = wrong_product + divisor\n\n    # Correct calculation using the relation:\n    # Dividend = Divisor * Quotient + Remainder\n    dividend = divisor * quotient + remainder\n\n    # Check if Johnny's answer is the same as the correct dividend\n    is_correct = dividend == (18 + 4)  # Johnny's final calculation\n\n    return dividend if not is_correct else None\n\nans = solution()"
    ],
    "95169f59fb1e45c8aaf5a970e8290d37": [
        "def solution():\n    count = 0\n    ways = []\n    \n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            if die1 + die2 == 8:\n                ways.append((die1, die2))\n                count += 1\n                \n    return ways, count\n\nans = solution()"
    ],
    "e6f7522a2ae041debd897088b6275751": [
        "def solution():\n    age_difference = 48 - 8\n    eddie_future_age = 18\n    mike_future_age = eddie_future_age + age_difference\n    return mike_future_age\n\nans = solution()"
    ],
    "7cef41fa4f8244ccbd2620d682e9d2d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g be the number of girls, and t be the total number of students initially\n    g, t = symbols('g t')\n\n    # Initial condition: 40% of the students are boys\n    eq1 = Eq(0.4 * t, t - g)\n\n    # After the changes: 16 boys leave and 16 girls enter\n    # The boys now make up 2/15 of the students\n    eq2 = Eq((0.4 * t - 16) / (t - 16 + 16), 2 / 15)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (g, t))\n\n    # Number of girls now is initial girls plus 16 new girls\n    girls_now = solutions[g] + 16\n\n    return girls_now\n\nans = solution()"
    ],
    "67e5f1006ba14b7ba20f1a63cf93e70c": [
        "from itertools import permutations\nfrom sympy import isprime\n\ndef solution():\n    digits = '279'\n    primes = set()\n    \n    for i in range(1, len(digits) + 1):\n        for perm in permutations(digits, i): \n            num = int(''.join(perm))\n            if isprime(num) and num < 100:\n                primes.add(num)\n                \n    return len(primes)\n\nans = solution()"
    ],
    "83d292a05ff04677a8c5ed5ab8c0c835": [
        "from fractions import Fraction\n\ndef solution():\n    numerator = ((3 + Fraction(1, 3)) * 1.9 + 19.5 / (4 + Fraction(1, 2)))\n    denominator = (Fraction(62, 75) - 0.16)\n    part1 = numerator / denominator\n    \n    numerator_2 = (3.5 + 4 + Fraction(2, 3) + 2 + Fraction(2, 15))\n    denominator_2 = (0.5 * (1 + Fraction(1, 20) + 4.1))\n    part2 = numerator_2 / denominator_2\n    \n    ans = part1 / part2\n    \n    return float(ans)\n\nans = solution()"
    ],
    "c24f600dece04c93bb09e2b54f50d1af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    necklace, bracelet, ring = symbols('necklace bracelet ring')\n\n    equation1 = Eq(necklace, 2 * bracelet)\n    equation2 = Eq(ring, bracelet - 10)\n    equation3 = Eq(necklace + bracelet + ring, 350)\n\n    solutions = solve((equation1, equation2, equation3), (necklace, bracelet, ring))\n\n    return solutions[bracelet]\n\nans = solution()"
    ],
    "2770667d43574021b710d6ea74fb5929": [
        "def solution():\n    # Iterating through all four digit numbers\n    for N in range(1000, 10000):\n        str_N = str(N)\n        # Iterate through all possible positions\n        for i in range(4):\n            # Removing one digit\n            M = int(str_N[:i] + str_N[i+1:])\n            # Checking if the difference is 2021\n            if N - M == 2021:\n                return N\n\nans = solution()"
    ],
    "e6b0f44cc53249e1aaf86a515c4628c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    banana, pear = symbols('banana pear')\n    \n    # Max's equation: 1 banana + 2 pears = 94p\n    equation1 = Eq(banana + 2 * pear, 94)\n    \n    # Emily's equation: 1 banana + 1 pear = 62p\n    equation2 = Eq(banana + pear, 62)\n    \n    solutions = solve((equation1, equation2), (banana, pear))\n    \n    return solutions[banana]\n\nans = solution()"
    ],
    "e55659b67fec48ffadc5d661886b3f84": [
        "def solution():\n    total_students = 200\n    swimming = 0.82 * total_students\n    jogging = 0.54 * total_students\n    neither = 0.16 * total_students\n\n    both = swimming + jogging - (total_students - neither)\n\n    return int(both)\n\nans = solution()"
    ],
    "df34fda134ee46a8ac94860f5ae12f9f": [
        "def solution():\n    # A's work rate per day\n    rate_a = 1 / 15\n    # B's work rate per day\n    rate_b = 1 / 10\n    \n    # Total work done by A and B in 4 days\n    work_done = 4 * (rate_a + rate_b)\n    \n    # Remaining work to be done\n    remaining_work = 1 - work_done\n    \n    # Days B needs to finish the remaining job\n    days_b = remaining_work / rate_b\n    \n    return days_b\n\nans = solution()"
    ],
    "4265848eb5144e06beaccae813bc11b5": [
        "def solution():\n    num_tickets = 16\n    cost_per_ticket = 112\n    total_cost = num_tickets * cost_per_ticket\n    return total_cost\n\nans = solution()"
    ],
    "1b84c5b40beb49b39b7f4106f6ee146a": [
        "def solution():\n    road_length = 150\n    tree_interval = 10\n\n    # +1 because trees are planted at both ends of the road\n    num_trees = (road_length // tree_interval) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "2fdb4d6852a34749900c0604b0418b95": [
        "def solution():\n    part1 = (1 + 0.23 + 0.34)\n    part2 = (0.23 + 0.34 + 0.65)\n    part3 = (1 + 0.23 + 0.34 + 0.65)\n    part4 = (0.23 + 0.34)\n\n    ans = (part1 * part2) - (part3 * part4)\n    return ans\n\nans = solution()"
    ],
    "3997afa5717b4b90979f5a94f367106a": [
        "def solution():\n    from math import gcd\n    return gcd(16, 28)\n\nans = solution()"
    ],
    "a36a520966aa451d95a300b07e198fe4": [
        "def solution():\n    linda_rate = 1 / 5          # Linda's rate is one problem per 5 minutes\n    cici_rate = 1 / 6           # Cici's rate is one problem per 6 minutes\n    combined_rate = linda_rate + cici_rate  # Their combined rate per minute\n\n    total_time = 2 * 60         # Total working time in minutes (2 hours)\n\n    total_problems = combined_rate * total_time\n\n    return int(total_problems)\n\nans = solution()"
    ],
    "c1d55208f4314facb8dcb7a0c1f51107": [
        "def solution():\n    alice_stickers = 245\n    janet_stickers = alice_stickers + 125\n    total_stickers = alice_stickers + janet_stickers\n    return total_stickers\n\nans = solution()"
    ],
    "073d74f386764ceba3da553d97018f98": [
        "def solution():\n    # Initial number of apples that Amy and John have\n    amy_apples = 37\n    john_apples = 15\n    \n    # Amy wants to have 4 more apples than John\n    amy_final = john_apples + 4\n    \n    # The apples Amy has to give to John is the difference between her initial amount and final amount\n    apples_to_give = amy_apples - amy_final\n    \n    return apples_to_give\n\nans = solution()"
    ],
    "a17b0ae95a20483eb0160f780a8e055e": [
        "def solution():\n    ans = 15  # 15 is the odd number between 13 and 17\n    return ans\n\nans = solution()"
    ],
    "6325f3cd4acc410e9a72d43acf9b5e4a": [
        "def solution():\n    late_time = 18\n    bus_interval = 45\n\n    wait_time = bus_interval - (late_time % bus_interval)\n\n    return wait_time\n\nans = solution()"
    ],
    "4de96797dadc44f48c4b27b71845270c": [
        "def solution():\n    ans = 273 // 7\n    return ans\n\nans = solution()"
    ],
    "75af17ec850b4308b6ad72a935dd048e": [
        "def solution():\n    numbers_with_missing = [12, 25, 27, 6, 16, 14, 13, 7, 21]\n    total_sum_with_missing = 37 * 10\n    current_sum = sum(numbers_with_missing)\n    missing_number = total_sum_with_missing - current_sum\n    return missing_number\n\nans = solution()"
    ],
    "8a7b6a6417544e3db14b40a2435e0338": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y, z = symbols('x y z')\n\n    equation1 = Eq(x, y + 83)\n    equation2 = Eq(z, x + 24)\n    equation3 = Eq(x + y + z, 283)\n\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "3c6d41e0ffa34ee694abb711aabe5956": [
        "def solution():\n    cost_per_person = 216\n    number_of_people = 67\n    total_cost = cost_per_person * number_of_people\n    return total_cost\n\nans = solution()"
    ],
    "d7b4feae676a418c84a780e950e5d4ea": [
        "def solution():\n    total_cost_for_nine_books = 38.79\n    cost_per_book = total_cost_for_nine_books / 9\n    cost_for_seven_books = cost_per_book * 7\n    return cost_for_seven_books\n\nans = solution()"
    ],
    "24686bdbc8614ff88d9dba695c5c1775": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n\n    total = tens + tenths + hundredths\n    \n    return total\n\nans = solution()"
    ],
    "5b5d9ce674b5461e84d5e7eef6e47575": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    chan, toh = symbols('chan toh')\n    \n    equation1 = Eq(chan / 4 - toh / 3, 33)\n    equation2 = Eq(chan + toh, 1000)\n    \n    solutions = solve((equation1, equation2), (chan, toh))\n    \n    return solutions[toh]\n\nans = solution()"
    ],
    "d36c559112ec475d90ba54b5fb925432": [
        "def solution():\n    height = 45\n    climb = 10\n    day = 1\n    current_height = 0\n\n    while True:\n        current_height += climb\n        if current_height >= height:\n            break\n        current_height -= day\n        day += 1\n\n    return day\n\nans = solution()"
    ],
    "0961229b4dfe45bdaf586d80da5a6a93": [
        "def solution():\n    # Assuming G is the amount of grass required for one goat for one day\n    # and R is the amount of grass required for one rabbit for one day, we have\n    # G = 4R\n    # A piece of pasture can feed:\n    # 14 goats for 15 days (14G * 15 = total amount of grass)\n    # 70 rabbits for 8 days (70R * 8 = total amount of grass)\n    # Equating the two gives us the total amount of grass in the pasture\n    # 14G * 15 = 70R * 8\n    # Since G = 4R, we can simplify the equation to:\n    # 14 * 4R * 15 = 70R * 8\n    # Solving for R:\n    R = (14 * 4 * 15) / (70 * 8)\n    \n    # Now we can calculate the total amount of grass available\n    total_grass = 14 * 4 * R * 15\n    \n    # Daily grass consumption by the 17 goats and 20 rabbits would be:\n    # (17 goats * G) + (20 rabbits * R)\n    # Replacing G by 4R, we have:\n    daily_grass_consumption = (17 * 4 * R) + (20 * R)\n    \n    # To find for how many days the pasture can feed the animals:\n    days = total_grass / daily_grass_consumption\n    \n    return days\n\nans = solution()"
    ],
    "605b7166959c4309ba377c841f125c8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5*x + 3*(19 - x), 65)\n\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "274626bb25f24193b540a837c430a2c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sandra, tasha, riley = symbols('sandra tasha riley')\n\n    equation1 = Eq(sandra, tasha / 3)\n    equation2 = Eq(riley, 3 * sandra / 5)\n    equation3 = Eq(tasha - riley, 60)\n\n    solutions = solve((equation1, equation2, equation3), (sandra, tasha, riley))\n\n    return solutions[riley]\n\nans = solution()"
    ],
    "0bed7f7889ec46ae8c8a1d9b3ffad093": [
        "def solution():\n    triangle_operation = lambda a, b: sum(a * 10**i for i in range(b))\n    ans = triangle_operation(4, 3)\n    return ans\n\nans = solution()"
    ],
    "6e66da49abf64b81a126cd036c206db2": [
        "def solution():\n    savings = [13, 18, 5]\n    total_savings = sum(savings)\n    mean_savings = total_savings / len(savings)\n    return mean_savings\n\nans = solution()"
    ],
    "af0e6eebf4764c91a8984e3324ae0c84": [
        "def solution():\n    x = (9 ** 2) - 7\n    return x\n\nans = solution()"
    ],
    "708686c18792498ca280531b38305bd6": [
        "def solution():\n    from sympy import symbols, sqrt, simplify\n\n    a = symbols('a', real=True, positive=True)\n    x = sqrt(a) - 2 / sqrt(a)\n\n    expr = sqrt(x**2 + 8 * x)\n    simplified_expr = simplify(expr)\n\n    return simplified_expr\n\nans = solution()"
    ],
    "aa65bb86d41443cba1628a0551144ba9": [
        "def solution():\n    angel = \"0141705021\"\n    devil = \"4005220912\"\n\n    angel_dict = {char: str(angel.count(char)) for char in set(angel)}\n    devil_dict = {char: str(devil.count(char)) for char in set(devil)}\n\n    can_unlock = all(angel_dict[char] == devil_dict[char] for char in angel_dict)\n    \n    if can_unlock:\n        return True\n    else:\n        correct_password = \"\".join(sorted(devil, key=lambda x: angel.index(x)))\n        return correct_password\n\nans = solution()"
    ],
    "857ab67cbb1247aea950633a74d6701b": [
        "def solution():\n    # Total number of ways to split the number 6 using at least two positive integers\n    count = 0\n    # Loop through all possible splits using two or more numbers\n    for x1 in range(1, 6):\n        for x2 in range(1, 6 - x1 + 1):\n            if x1 + x2 == 6:\n                count += 1  # Count the pair (x1, x2)\n            for x3 in range(1, 6 - x1 - x2 + 1):\n                if x1 + x2 + x3 == 6:\n                    count += 1  # Count the triple (x1, x2, x3)\n                for x4 in range(1, 6 - x1 - x2 - x3 + 1):\n                    if x1 + x2 + x3 + x4 == 6:\n                        count += 1  # Count the quadruple (x1, x2, x3, x4)\n                    for x5 in range(1, 6 - x1 - x2 - x3 - x4 + 1):\n                        if x1 + x2 + x3 + x4 + x5 == 6:\n                            count += 1  # Count the quintuple (x1, x2, x3, x4, x5)\n\n    return count\n\nans = solution()"
    ],
    "3df1ffb0a3aa4d07b3bd3acc1b128b78": [
        "def solution():\n    # Convert each recurring decimal to a fraction\n    num1 = 1 / 90      # 0.0(1) = 1/90\n    num2 = 12 / 90     # 0.1(2) = 12/90\n    num3 = 23 / 90     # 0.2(3) = 23/90\n    num4 = 34 / 90     # 0.3(4) = 34/90\n    num5 = 45 / 90     # 0.4(5) = 45/90\n    num6 = 54 / 90     # 0.5(4) = 54/90\n    num7 = 78 / 90     # 0.7(8) = 78/90\n\n    # Add all the fractions together\n    total = num1 + num2 + num3 + num4 + num5 + num6 + num7\n\n    # Reduce the result to its simplest form if required\n    return total\n\nans = solution()"
    ],
    "0f13e96f9aaa4d28997b667b9c11593b": [
        "def solution():\n    total_sheep = 23\n    total_pens = 11\n\n    # Applying the Pigeonhole Principle\n    max_sheep_in_a_pen = (total_sheep + total_pens - 1) // total_pens\n\n    return max_sheep_in_a_pen\n\nans = solution()"
    ],
    "a30b46882b6149eb828e015d814c6a7b": [
        "def solution():\n    for num in range(300, 401):\n        if (num % 3 == 2 and\n            num % 4 == 2 and\n            num % 5 == 2 and\n            num % 7 == 5):\n            return num\n\nans = solution()"
    ],
    "b1ec96325b0e48bbb89d9c37f1f20bfa": [
        "def solution():\n    total_boys = 18\n    mean_age_boys = 16.2\n    total_girls = 27\n    mean_age_girls = 16.7\n    total_choir = total_boys + total_girls\n\n    total_age_boys = total_boys * mean_age_boys\n    total_age_girls = total_girls * mean_age_girls\n    total_age_choir = total_age_boys + total_age_girls\n\n    mean_age_choir = total_age_choir / total_choir\n\n    return mean_age_choir\n\nans = solution()"
    ],
    "1158d90d7f994c008185739c0f7b4c3e": [
        "def solution():\n    angel = \"0141705021\"\n    devil = \"4005220912\"\n    \n    # The logic is to compare if the character frequency is the same\n    # since the password seems to be a permutation of \"Angel\".\n    angel_freq = [angel.count(str(i)) for i in range(10)]\n    devil_freq = [devil.count(str(i)) for i in range(10)]\n    \n    if angel_freq == devil_freq:\n        return True, \"The character frequency of both passwords is the same.\"\n    else:\n        return False, \"The character frequency is different. Andy cannot unlock the treasure chest.\"\n\nans = solution()"
    ],
    "a8a21f84ab5f44019c3f7690709b84e5": [
        "def solution():\n    for num in range(200, 301):\n        if num % 6 == 1 and num % 13 == 8:\n            return num\n\nans = solution()"
    ],
    "e4135525c98945d49a3e9731dcae7f35": [
        "def solution():\n    # Sara could take out all balls of the first two colors and still not have 5 of the same color.\n    # Therefore, we add 5 to ensure she gets 5 of the same color.\n    worst_case = (7 - 1) + (5 - 1) + 1\n\n    return worst_case\n\nans = solution()"
    ],
    "ca038012d8394203b0afe2e0b7b9c6ab": [
        "from math import lcm\n\ndef solution():\n    raye_cycle = 6\n    simon_cycle = 12\n    taylor_cycle = 16\n\n    ans = lcm(raye_cycle, simon_cycle, taylor_cycle)\n\n    return ans\n\nans = solution()"
    ],
    "9da771602ee246a181dd1962904ef124": [
        "def solution():\n    nth_term = 31\n    n = 10\n    common_difference = 3\n\n    first_term = nth_term - (n - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "31eaf65804d54a3b8c6e51af4e58623c": [
        "def solution():\n    a, b = divmod(89, 10)\n    c, d = divmod(75, 10)\n    ans = a * b + c * d\n    return ans\n\nans = solution()"
    ],
    "727dbcf473414fbc9939bfee97cb4aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # let 't' be the mass of a table and 'c' be the mass of a chair\n    t, c = symbols('t c')\n    \n    # Create two equations based on the given information\n    equation1 = Eq(3*t, 4*c)          # the total mass of 3 tables is equal to the total mass of 4 chairs\n    equation2 = Eq(t, c + 2)          # a table is 2kg heavier than a chair\n    \n    # Solve the system of equations for 't' and 'c'\n    solutions = solve((equation1, equation2), (t, c))\n    \n    # The solution will contain the mass of a table\n    table_mass = solutions[t]\n    \n    return table_mass\n\nans = solution()"
    ],
    "b70b59bf48324644a782454f2b7ea13d": [
        "def solution():\n    pool_length = 30\n    sam_speed = 1  # in meters per second\n    ben_speed = 0.6  # in meters per second\n    \n    # Convert 10 minutes to seconds\n    time_swimming = 10 * 60  # 10 minutes in seconds\n    \n    # Calculate the relative speed as if one person is stationary\n    relative_speed = sam_speed + ben_speed\n    \n    # Distance covered by both swimmers together in the given time\n    total_distance = relative_speed * time_swimming\n    \n    # The number of times they meet is the total distance divided by the pool length\n    # We can take the floor of this value because they can't meet a fractional number of times\n    meet_count = total_distance // pool_length\n    \n    return int(meet_count)\n\nans = solution()"
    ],
    "40eb290a88af4052901031e1476213be": [
        "def solution():\n    count = 0\n    # Each number gives a different remainder when divided by 4, i.e., 0, 1, 2, or 3\n    remainder_counts = [0, 0, 0, 0]  # This list will hold counts for each remainder type\n\n    for number in range(2017, 2036):\n        remainder = number % 4\n        remainder_counts[remainder] += 1\n\n    # We need to find the number of ways to pick numbers so that \n    # their sum is divisible by 4.\n    \n    # Case 1: All three numbers leave the same remainder. \n    # Choose any three from the numbers which leave remainder 0, any three from the ones which leave remainder 1 and so on.\n    for r in range(4):\n        count += remainder_counts[r] * (remainder_counts[r] - 1) * (remainder_counts[r] - 2) // 6  # nC3 for each remainder\n    \n    # Case 2: The three numbers leave remainders a, b, c such that (a+b+c) % 4 = 0\n    # Using the fact that 1 + 2 + 1 = 0 (mod 4) and 2 + 2 + 0 = 0 (mod 4)\n    count += remainder_counts[0] * remainder_counts[1] * remainder_counts[2]  # a=0, b=1, c=2\n    count += remainder_counts[1] * remainder_counts[2] * remainder_counts[3]  # a=1, b=2, c=3\n    count += remainder_counts[2] * remainder_counts[3] * remainder_counts[0]  # a=2, b=3, c=0\n    count += remainder_counts[3] * remainder_counts[0] * remainder_counts[1]  # a=3, b=0, c=1\n    count += remainder_counts[0] * remainder_counts[2] * (remainder_counts[2] - 1) // 2  # a=0, b=2, c=2 -> nC2 for 2nd remainder (2)\n    count += remainder_counts[1] * remainder_counts[3] * (remainder_counts[3] - 1) // 2  # a=1, b=3, c=3 -> nC2 for 2nd remainder (3)\n\n    return count\n\nans = solution()"
    ],
    "3f49f548bea24803a2293b65735a1967": [
        "def solution():\n    ans = 5928 * 13\n    return ans\n\nans = solution()"
    ],
    "94e0c1d7e2e64c55bf498ab0da425bf2": [
        "def solution():\n    temperatures = [-11, 17, 8, -3, -6]\n    hottest = max(temperatures)\n    coldest = min(temperatures)\n    difference = hottest - coldest\n    return difference\n\nans = solution()"
    ],
    "b789c34055e44469a46db4918988572a": [
        "def solution():\n    katherine = 24\n    tom = 2 * katherine\n    gareth = 4 * tom\n    return gareth\n\nans = solution()"
    ],
    "0d85bf8110034401aca552b3cdbd023f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    destin, nephew = symbols('destin nephew')\n\n    equation1 = Eq(destin + 6, 2 * (nephew + 6))\n    equation2 = Eq((destin - 6) / (nephew - 6), 5)\n\n    solutions = solve((equation1, equation2), (destin, nephew))\n\n    sum_ages_in_10_years = solutions[destin] + 10 + solutions[nephew] + 10\n\n    return sum_ages_in_10_years\n\nans = solution()"
    ],
    "4052d15f214249809613fa6de2242cc9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys = symbols('boys')\n    girls = 40 - boys\n\n    total_pencils = 35 * 40\n    boys_pencils = 20 * boys\n    girls_pencils = 60 * girls\n\n    equation = Eq(boys_pencils + girls_pencils, total_pencils)\n\n    num_boys = solve(equation, boys)[0]\n\n    return num_boys\n\nans = solution()"
    ],
    "4296e2f3a8b241e3a8477feb371d9f40": [
        "def solution():\n    # Average height of Bob and Cindy\n    average_bob_cindy = 120\n    \n    # Height of Doris\n    height_doris = 126\n    \n    # Since the average height of Bob and Cindy is 120, the total height for both is 120 * 2\n    total_height_bob_cindy = average_bob_cindy * 2\n    \n    # Calculate the total height of all three children\n    total_height_three_children = total_height_bob_cindy + height_doris\n    \n    # Calculate the average height of the three children\n    average_height_three_children = total_height_three_children / 3\n    \n    return average_height_three_children\n\nans = solution()"
    ],
    "24bf5eb8b2e54ae8a85ca04786fa6736": [
        "def solution():\n    return 9.97 + 9.98 + 9.99\n\nans = solution()"
    ],
    "3a046196146143df8c11a228fe1ea8e9": [
        "def solution():\n    from itertools import permutations\n\n    digits = [1, 3, 5]\n    perm = permutations(digits)\n    \n    count = 0\n    for _ in perm:\n        count += 1\n    \n    return count\n\nans = solution()"
    ],
    "e86bfb04d39a44d2a53da86f38d8841d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of pies each had initially.\n    x = symbols('x')\n\n    # After Mrs Tan bought 12 more pies and Mrs Lim gave away 4 pies\n    # Mrs Tan would have x+12 pies and Mrs Lim would have x-4 pies\n\n    # Now, Mrs Tan has twice as many pies as Mrs Lim\n    equation = Eq(x + 12, 2 * (x - 4))\n\n    # Solve for x\n    initial_pies = solve(equation, x)\n\n    return initial_pies[0]\n\nans = solution()"
    ],
    "46a38674ac06447aab8309abe41f63ee": [
        "def solution():\n    ans = 3 / (3 / 5) / (5 / 7) / (7 / 9) / (9 / 13) / (13 / 15)\n    return ans\n\nans = solution()"
    ],
    "aa5a70d5b23d4d83a688ce6c80ff9fbb": [
        "def solution():\n    from datetime import datetime\n\n    departure_time = datetime.strptime(\"06:35\", \"%H:%M\")\n    arrival_time = datetime.strptime(\"10:22\", \"%H:%M\")\n\n    time_difference = arrival_time - departure_time\n    minutes_taken = time_difference.total_seconds() / 60\n\n    return int(minutes_taken)\n\nans = solution()"
    ],
    "c8c3777bba9244539cc9e012e79c700e": [
        "def solution():\n    pattern = \"34563456\"  # Given pattern\n    pattern_length = len(pattern)\n    total_length = 50\n    \n    # Calculate how many full patterns are there in 50 digits\n    full_patterns = total_length // pattern_length\n    \n    # Calculate the remaining digits after full patterns\n    remaining_digits = total_length % pattern_length\n    \n    # Calculate the sum of digits in one full pattern\n    pattern_sum = sum(int(digit) for digit in pattern)\n    \n    # Calculate the sum of remaining digits\n    remaining_sum = sum(int(pattern[i]) for i in range(remaining_digits))\n    \n    # Total sum is sum of full patterns plus sum of remaining digits\n    total_sum = full_patterns * pattern_sum + remaining_sum\n    \n    return total_sum\n\nans = solution()"
    ],
    "531ec5e5d7a54e7eb5aad13441f2d557": [
        "def solution():\n    ans = 3.88 - 1.111\n    return ans\n\nans = solution()"
    ],
    "02013d24983948fe8e37ccb917ba805e": [
        "def solution():\n    tom_age = 10\n    father_future_age = 70\n    father_current_age = father_future_age - (father_future_age - tom_age)\n    return father_current_age\n\nans = solution()"
    ],
    "7a453395152a41388d5f4386067df058": [
        "def solution():\n    result = (3/10) * 54 + 0.3 * 45 + (30 / 100)\n    return result\n\nans = solution()"
    ],
    "2d58f4f006e243febdaf5acbd7d6781f": [
        "def solution():\n    from sympy import primefactors\n\n    # Define the list of numbers on the cards.\n    numbers = [6, 12, 35, 175, 245, 300]\n\n    # Create a list of tuples containing the prime factors of each number\n    prime_factors_list = [(number, primefactors(number)) for number in numbers]\n\n    # Iterate through combinations of picking 2 cards for Candy and 3 for Candice\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            candy_product = numbers[i] * numbers[j]  # Candy's product\n            \n            for k in range(len(numbers)):\n                for l in range(k + 1, len(numbers)):\n                    for m in range(l + 1, len(numbers)):\n                        # Making sure none of the indices are repeated\n                        if len(set([i, j, k, l, m])) == 5:\n                            candice_product = numbers[k] * numbers[l] * numbers[m]  # Candice's product\n                            # Check if products are equal and we have found the answer\n                            if candy_product == candice_product:\n                                # Find out which one was not picked by neither.\n                                unpicked = set(numbers) - set([numbers[i], numbers[j], numbers[k], numbers[l], numbers[m]])\n                                return next(iter(unpicked))  # Return the number not picked\n\nans = solution()"
    ],
    "b3fa535df8954c9aac674b856db4f258": [
        "def solution():\n    return (17 + 35) // 2\n\nans = solution()"
    ],
    "66bbfb9d35fd4c258976e0e26f366bba": [
        "def solution():\n    total_sweets = 220\n    fraction_first_group = 3/5\n    sweets_first_group = 6\n    fraction_second_group = 1/4\n\n    sweets_second_group = 4\n    sweets_third_group = 5\n\n    # Calculate number of sweets given to the first group\n    sweets_to_first_group = fraction_first_group * total_sweets\n    \n    # Calculate number of students in the first group\n    students_first_group = sweets_to_first_group / sweets_first_group\n\n    # Calculate remaining sweets after first group has been given sweets\n    remaining_sweets = total_sweets - sweets_to_first_group\n    \n    # Calculate number of sweets given to the second group\n    sweets_to_second_group = fraction_second_group * remaining_sweets\n    \n    # Calculate number of students in the second group\n    students_second_group = sweets_to_second_group / sweets_second_group\n    \n    # Calculate remaining sweets after second group has been given sweets\n    sweets_remaining_final_group = remaining_sweets - sweets_to_second_group\n    \n    # Calculate number of students in the third group\n    students_third_group = sweets_remaining_final_group / sweets_third_group\n\n    # Calculate total number of students\n    total_students = students_first_group + students_second_group + students_third_group\n\n    return int(total_students)\n\nans = solution()"
    ],
    "b7d81cc61e59452e8e10e55be3614c12": [
        "def solution():\n    from math import lcm\n\n    packet_A = 25\n    packet_B = 20\n\n    least_common_multiple = lcm(packet_A, packet_B)\n\n    days_in_month = [31, (28 + 1), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    days_passed = 0\n    for i, days in enumerate(days_in_month):\n        days_passed += days\n        if days_passed >= least_common_multiple:\n            days_passed -= least_common_multiple\n            next_month = i + 1\n            next_day = days_passed + 1\n            break\n\n    return (next_day, next_month)\n\nans = solution()"
    ],
    "0d471b7547134c0f9e37864e9573cf56": [
        "def solution():\n    def is_composite(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return True\n        return False\n\n    def can_be_split_into_composites(n):\n        for i in range(4, n - 7):\n            if is_composite(i):\n                for j in range(i + 1, n - 4):\n                    if is_composite(j) and is_composite(n - i - j):\n                        return True\n        return False\n\n    largest_odd = 0\n    n = 4\n    while True:\n        odd_number = 2 * n + 1\n        if not can_be_split_into_composites(odd_number):\n            largest_odd = odd_number\n            break\n        n += 1\n\n    return largest_odd\n\nans = solution()"
    ],
    "6349c95e066c4ac9a6e978154b7e5cc5": [
        "def solution():\n    # Convert both mixed numbers to improper fractions\n    # 3 1/4 is equal to (3*4 + 1) / 4 = 13/4\n    first_number = 13/4\n    # 1 3/4 is equal to (1*4 + 3) / 4 = 7/4\n    second_number = 7/4\n\n    # Calculate the difference and convert the result into decimal\n    difference = first_number - second_number\n\n    return float(difference)\n\nans = solution()"
    ],
    "6f2e36dcb2704f26b44a0dbfa435da24": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define 'b' as the number of boys and 'g' as the number of girls.\n    b, g = symbols('b g')\n\n    # We know that each boy gets $8, each girl gets $5, and the total prize money is $580.\n    # We also know there are three times as many boys as girls.\n    equation1 = Eq(8 * b + 5 * g, 580)\n    equation2 = Eq(b, 3 * g)\n\n    # We solve the system of equations.\n    solutions = solve((equation1, equation2), (b, g))\n\n    # Since we want to find the number of boys, we return 'b'.\n    return solutions[b]\n\nans = solution()"
    ],
    "f3c61e8fd40d43f0a6b6887470b4299d": [
        "def solution():\n    count = 0\n    for a in range(1, 12//2+1):  # Side 'a' - two sides in the isosceles triangle will be equal\n        for b in range(1, 12//2+1):  # Side 'b' - the base of the isosceles triangle\n            if a + 2*b == 12 and a > b:  # Perimeter condition and isosceles triangle condition\n                count += 1\n    return count\n\nans = solution()"
    ],
    "8345ff1d37344640b2384652635b2dd7": [
        "def solution():\n    bill = 45\n    tip_percent = 15\n    tax_percent = 8\n\n    tip = bill * (tip_percent / 100)\n    tax = bill * (tax_percent / 100)\n    \n    total_cost = bill + tip + tax\n    \n    return total_cost\n\nans = solution()"
    ],
    "3d8d87b5a55b42d89c08579dd89354fb": [
        "def solution():\n    first_term = 3  # The first number in the sequence with a remainder of 3 when divided by 4 is 3.\n    common_difference = 4  # The common difference between consecutive terms of the sequence is 4.\n    \n    # We find the last term under 100 with a remainder of 3 after dividing by 4.\n    # The largest multiple of 4 less than 100 is 96, so the last term is 96 + 3 = 99.\n    last_term = 99\n\n    # Calculate the number of terms in the sequence using the formula for the nth term of an arithmetic sequence:\n    # last_term = first_term + (n - 1) * common_difference\n    n = ((last_term - first_term) // common_difference) + 1\n\n    # Sum of an arithmetic sequence: n/2 * (first_term + last_term)\n    sum_of_terms = n * (first_term + last_term) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "566472f9b1624140a8d419487a79d50c": [
        "def solution():\n    total_students = 42\n    sports_team = 30\n    art_team = 25\n    \n    both_teams = sports_team + art_team - total_students\n    \n    return both_teams\n\nans = solution()"
    ],
    "79ebfd585db2407482e7cf14b77e035d": [
        "def solution():\n    ans = 104 // 4\n    return ans\n\nans = solution()"
    ],
    "13f3cf43be684a8c8f1075a13f8131ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    elder, younger = symbols('elder younger')\n\n    equation1 = Eq(elder + younger, 42)  # Their current ages add up to 42\n    # A few years ago, elder brother's age at that time (elder - younger) was equal to younger brother's current age (younger)\n    # And the younger brother was exactly half the elder brother's current age (younger = elder / 2)\n    equation2 = Eq(elder - younger, younger / 2)\n\n    solutions = solve((equation1, equation2), (elder, younger))\n\n    return solutions[elder]\n\nans = solution()"
    ],
    "014509f53414409198e8302211988bc5": [
        "def solution():\n    lena_had_initially = 86\n    lena_gave_away = 29\n    lena_had_finally = 100\n\n    strawberries_from_mother = lena_had_finally - (lena_had_initially - lena_gave_away)\n    \n    return strawberries_from_mother\n\nans = solution()"
    ],
    "63f544191af94265b786a75669858d3b": [
        "def solution():\n    from math import gcd\n    \n    num_students_A = 8\n    num_students_B = 12\n    num_students_C = 20\n    \n    # Calculate the greatest common divisor (GCD) for the number of students in class A, B, and C\n    gcd_AB = gcd(num_students_A, num_students_B)\n    gcd_ABC = gcd(gcd_AB, num_students_C)\n    \n    # The gcd_ABC represents the greatest number of students that can be in each group\n    return gcd_ABC\n\nans = solution()"
    ],
    "f7dc723fc9c0444bb72711cfa044db6f": [
        "def solution():\n    # Number of routes from A to D directly\n    direct_AD = 6\n    \n    # Number of routes from A to B to C to D\n    ABCD = 7 * 5 * 2\n    \n    # Number of routes from A to C to D\n    ACD = 4 * 2\n    \n    # Total number of ways from A to D\n    total_ways = direct_AD + ABCD + ACD\n    \n    return total_ways\n\nans = solution()"
    ],
    "71d8dd44935a4d74ab3f2f038bd63e9b": [
        "def solution():\n    total_students = 30\n    pass_first_exam = 25\n    fail_second_exam = 12\n    pass_second_fail_first = 3\n\n    # Using inclusion-exclusion principle to calculate\n    # Number of students who passed both exams equals to:\n    # Number of students who passed the first exam minus the number of students who\n    # passed the second but failed the first exam\n    pass_both_exams = pass_first_exam - pass_second_fail_first\n    \n    # Number of students who passed only the first exam equals to:\n    # Total number of students minus the number of students who failed the second exam\n    # minus the number of students who passed both exams\n    pass_only_first_exam = total_students - fail_second_exam - pass_both_exams\n\n    return pass_only_first_exam\n\nans = solution()"
    ],
    "1972b3d726cb4c91b08b5636358089e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the price of one pen\n    price_pen = symbols('price_pen')\n    \n    # Given values\n    price_pencil = 2  # Each pencil costs £2\n    \n    # Equation representing the total cost of pens and pencils\n    equation = Eq(2 * price_pen + 3 * price_pencil, 20)\n    \n    # Solve for the price of one pen\n    solution = solve(equation, price_pen)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "ac54c8b609c94030b92316d569da1836": [
        "def solution():\n    total_hay = 300  # total kilograms of hay\n    cattle_count = 5  # number of cattle\n    days = 10  # number of days\n\n    # Calculate the hay each cattle eats per day\n    hay_per_cattle_per_day = total_hay / (cattle_count * days)\n\n    return hay_per_cattle_per_day\n\nans = solution()"
    ],
    "60783bc25b9749de9150f2006634255c": [
        "def solution():\n    # The prime factors of 210 are 2, 3, 5, and 7.\n    # We need to find three numbers whose product is 210 and all are under 10.\n    for a in range(1, 10):\n        for b in range(a + 1, 10):  # b > a to ensure different ages\n            for c in range(b + 1, 10):  # c > b to ensure different ages\n                if a * b * c == 210:\n                    return a  # Since a < b < c, a is the youngest child's age.\n\nans = solution()"
    ],
    "934c22a63d3149ffb43b1d24593d0c01": [
        "def solution():\n    # Let x be the number of chocolate cupcakes and y be the number of cheese cupcakes.\n    # According to the problem, we have the following equations:\n    # x + y = 255 (Total number of cupcakes)\n    # 0.6x = 0.25y (Number of cupcakes left after selling)\n    \n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    \n    equation1 = Eq(x + y, 255)\n    equation2 = Eq(0.6 * x, 0.25 * y)\n    \n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Solutions for x and y gives us the initial number of chocolate and cheese cupcakes.\n    # The number of cupcakes left after selling is 0.6x and 0.25y respectively.\n    chocolate_left = 0.6 * solutions[x]\n    cheese_left = 0.25 * solutions[y]\n    \n    # Since the problem states an equal number of cheese and chocolate cupcakes are left,\n    # we return one of the values as both should be the same.\n    return chocolate_left\n\nans = solution()"
    ],
    "ef208d09ffee4f59ad9b66d3ea949934": [
        "def solution():\n    total_avocados = 960\n    per_box_capacity = 8\n\n    num_boxes = total_avocados // per_box_capacity\n    \n    return num_boxes\n\nans = solution()"
    ],
    "3ac0f16eac8647b8b591701993aa5623": [
        "def solution():\n    total_seedlings = 296\n    fraction_killed_by_frost = 3 / 8\n    seedlings_killed = total_seedlings * fraction_killed_by_frost\n    seedlings_survive = total_seedlings - seedlings_killed\n    return int(seedlings_survive)\n\nans = solution()"
    ],
    "fb1f2e79dcf341bf81ac3f2db4f131ec": [
        "def solution():\n    total_locusts = 100\n    locusts_per_day = 12\n\n    full_days = total_locusts // locusts_per_day\n    remaining_locusts_after_full_days = total_locusts - full_days * locusts_per_day\n\n    return remaining_locusts_after_full_days if remaining_locusts_after_full_days != 0 else locusts_per_day\n\nans = solution()"
    ],
    "34b006c5adeb493dbdbe598de9425edd": [
        "def solution():\n    result = 77.5 * 0.52 + 5.2 * 2.25\n    return result\n\nans = solution()"
    ],
    "9d5fcd691dcd4877acf240f16e7063cb": [
        "def solution():\n    # Let b be the number of boys and g be the number of girls\n    # Given that (1/4)b = (2/5)g and b + g = 39.\n    # We need to find b - g.\n\n    # Factorize the denominators, 4 and 5 have no common factors.\n    # We can find a least common multiple (LCM) to eliminate the fractions.\n    LCM = 4 * 5  # LCM of 4 and 5\n    \n    # Express the conditions using the LCM:\n    # (LCM / 4)b = (LCM / 5)g   and   b + g = 39\n    # (LCM)b = (4/5)(LCM)g      and   b + g = 39\n    # (LCM)b = (5/4)(LCM)g      and   b + g = 39\n\n    # Substitute (LCM)b from the first equation into the second\n    mult_g = (4/5) * LCM\n    mult_b = (5/4) * LCM\n    \n    # Let mult_g be the multiplier for g and mult_b for b, we have:\n    # mult_b * b = mult_g * g\n    # b + g = 39\n    # Solve for b and g using the system of equations:\n    for b in range(40):\n        g = 39 - b\n        if mult_b * b == mult_g * g:\n            return b - g\n\nans = solution()"
    ],
    "70c9f09a81b741faab4149e0ce3c2e08": [
        "def solution():\n    first_term = 2\n    last_term = 240\n    difference = 2\n\n    num_terms = ((last_term - first_term) / difference) + 1\n\n    return int(num_terms)\n\nans = solution()"
    ],
    "79b3d22b017c4dc5bc3455a8f8bca3ed": [
        "def solution():\n    return (12 * 92) + (22 * 82) + (32 * 72)\n\nans = solution()"
    ],
    "f11cc314015c4356be0ae68d5c3ced7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    don, ben = symbols('don ben')\n\n    # Original ratio equation\n    equation1 = Eq(don/ben, 2/3)\n    # New ratio equation after changes\n    equation2 = Eq((don+10)/(ben-5), 6/7)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (don, ben))\n\n    return solutions[don]\n\nans = solution()"
    ],
    "e750a026daa342fc915455072a011aba": [
        "def solution():\n    return 60 * 20\n\nans = solution()"
    ],
    "8f82a9fa21664af9b7af5284e8c4493f": [
        "def solution():\n    value = 726 * 8\n    return round(value, 1)\n\nans = solution()"
    ],
    "cb610f1994f441c5aa75e99c47dc7c49": [
        "def solution():\n    remainder = 4293 % 25\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = remainder\n\n    return ans\n\nans = solution()"
    ],
    "f8f2a1e9445b4dcda537fd994f74f84b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of $10 notes and y be the number of $5 notes.\n    x, y = symbols('x y')\n\n    # The total number of notes is 116\n    equation1 = Eq(x + y, 116)\n\n    # After spending, Jeremy has (1 - 0.60)*x $10 notes and (1 - 0.25)*y $5 notes.\n    # The remaining $10 notes is 4/7 of the remaining $5 notes\n    equation2 = Eq((1 - 0.60)*x, (4/7)*(1 - 0.25)*y)\n\n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Calculate the amount spent based on the proportions of notes spent.\n    # He spent 60% of the $10 notes and 25% of the $5 notes on the bag.\n    amount_spent = 0.60 * solutions[x] * 10 + 0.25 * solutions[y] * 5\n\n    return amount_spent\n\nans = solution()"
    ],
    "aca847f6240f4ca38811b767301a74f8": [
        "def solution():\n    amy_toys = 50\n    sally_toys = 26\n    # Calculate the difference in the number of toys\n    difference = amy_toys - sally_toys\n    # Amy has to give Sally half of the difference to make their toys equal\n    toys_to_give = difference // 2\n\n    return toys_to_give\n\nans = solution()"
    ],
    "f4a02eb509224062b7d4a7b00e982d44": [
        "def solution():\n    sum_positive = sum(range(2, 2017, 4))  # Sum of positive numbers\n    sum_negative = sum(range(3, 2016, 4))  # Sum of negative numbers\n    ans = sum_positive - sum_negative\n    return ans\n\nans = solution()"
    ],
    "4240bfa02e564792b745d971a51cf6aa": [
        "def solution():\n    baby_chickens = 3600\n    hens = (8/9) * baby_chickens\n    roosters = (1/16) * hens\n    return int(roosters)\n\nans = solution()"
    ],
    "45c579ce75cb41d3bab3bcda32699a25": [
        "def solution():\n    cecilia_money = 80\n    kenny_money = cecilia_money / 4\n    total_money = cecilia_money + kenny_money\n    return total_money\n\nans = solution()"
    ],
    "7716f1cb1ca14992ae86bd9c52735efd": [
        "def solution():\n    a = 1\n    b = 1\n    c = 31 - a - b\n    max_product = 0\n    \n    for a in range(1, 31):\n        for b in range(1, 31-a):\n            c = 31 - a - b\n            product = a * b * c\n            if product > max_product:\n                max_product = product\n                \n    return max_product\n\nans = solution()"
    ],
    "de5bc649b5e64036b73efabb4e608b1b": [
        "def solution():\n    # Define the amount Heather saved\n    heather_saved = 12.15\n    \n    # Zach saved 3 times as much as Heather\n    zach_saved = 3 * heather_saved\n    \n    # Serena saved $24.50 more than Zach\n    serena_saved = zach_saved + 24.50\n    \n    # Serena saved 5 times as much as Jason\n    jason_saved = serena_saved / 5\n    \n    # Jason saved $1.54 more than William\n    william_saved = jason_saved - 1.54\n    \n    return william_saved\n\nans = solution()"
    ],
    "e6664d91f4d5422a9967575f83a6dcba": [
        "def solution():\n    road_length = 150\n    distance_between_trees = 10\n\n    num_trees = (road_length // distance_between_trees) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "90f3a7cdbae348efb794b15c5519e1e1": [
        "def solution():\n    cups_per_gallon = 6\n    order_cups = 30\n    milk_needed = order_cups / cups_per_gallon\n    return milk_needed\n\nans = solution()"
    ],
    "305f09b3cd4e439eb8bd23de400c08f3": [
        "def solution():\n    # The given pattern is that every term is an odd number times the next odd number.\n    # We will calculate the sum by recognizing that this is the sum of squares of consecutive numbers\n    # with subtraction between adjacent square terms: (n * (n+2)) = n^2 + 2n\n    # We can use the given sum of squares formula for the first 20 numbers.\n\n    # Given sum of first 20 squares is 2870\n    sum_of_squares = 2870\n    \n    # We need to subtract the even squares (2^2, 4^2, ..., 20^2)\n    # The even squares are simply 4 times the sum of squares 1^2, 2^2, ..., 10^2\n    sum_even_squares = 4 * sum(i**2 for i in range(1, 11))\n    \n    # The sum of the sequence in question is then the total sum of squares minus sum of even squares\n    sum_sequence = sum_of_squares - sum_even_squares\n\n    return sum_sequence\n\nans = solution()"
    ],
    "7d02cb0ab8354e44968e796de4cb54d3": [
        "def solution():\n    for i in range(10):\n        for j in range(10):\n            number = int(f'21{i}{j}35')\n            if number % 99 == 0:\n                return number\n\nans = solution()"
    ],
    "c49e92d63d14477a969fe081cfe53304": [
        "def solution():\n    from math import factorial\n    \n    # Calculate the number of ways to arrange the three girls as a unit.\n    arrangements_of_girls = factorial(3)\n\n    # Calculate the number of ways to arrange the remaining entities (4 entities: 3 boys + 1 unit of girls)\n    arrangements_of_entities = factorial(4)\n\n    # Calculate the number of ways to arrange the twin brothers with the restriction that they can't be next to each other.\n    total_ways_for_twin_brothers = factorial(5)  # total ways if they could stand next to each other\n    ways_for_twin_brothers_together = factorial(4)  # ways for them to stand next to each other\n    arrangements_of_twin_brothers = total_ways_for_twin_brothers - ways_for_twin_brothers_together\n\n    # Multiply the arrangements of the girls as a unit, the entities, and the twin brothers.\n    total_arrangements = arrangements_of_girls * arrangements_of_entities * arrangements_of_twin_brothers\n\n    return total_arrangements\n\nans = solution()"
    ],
    "7c8f1a20bc9749f7b59b0f1ad124a82f": [
        "def solution():\n    total_students = 320\n    days_in_week = 7\n\n    # Applying the pigeonhole principle\n    least_number_in_most_populated_week = (total_students // days_in_week) + 1\n\n    return least_number_in_most_populated_week\n\nans = solution()"
    ],
    "b781fc8f3a7c4ac5b3c263cd0ed580ef": [
        "def solution():\n    return 3 / (1 - 1/2)\n\nans = solution()"
    ],
    "5d1664b6531d452198dbf2ebb51359c0": [
        "def solution():\n    total_girls = 25\n    percentage_wearing_glasses = 20\n\n    girls_wearing_glasses = (percentage_wearing_glasses / 100) * total_girls\n\n    return int(girls_wearing_glasses)\n\nans = solution()"
    ],
    "f2b7d72bc0e0413388bba2a9429b9e63": [
        "def solution():\n    # Assume summer vacation starts on a Friday\n    max_fridays_if_start_friday = 55 // 7 + 1\n\n    # Check if the extra days can make another Friday, depending on the start day\n    # There are 6 possibilities for the start day before Friday (Saturday to Thursday),\n    # and if summer vacation starts on any of these days, we can't have more Fridays\n    # than if it starts on a Friday. Therefore, the maximum Fridays possible is the same\n    # irrespective of the starting day of the week.\n    \n    return max_fridays_if_start_friday\n\nans = solution()"
    ],
    "20a734ca64ba4070bb73709f8775c1bb": [
        "def solution():\n    pencil_cost = 2\n    pen_cost = 4\n\n    pencils_for_one_pen = pen_cost // pencil_cost\n\n    return pencils_for_one_pen\n\nans = solution()"
    ],
    "89c07102e40b408485bed168ad9751a2": [
        "def solution():\n    ans = 53 * 47\n    return ans\n\nans = solution()"
    ],
    "955c179e463143d28ade540096508f5f": [
        "def solution():\n    from math import lcm\n    divisible_by = lcm(2, 3, 4, 5, 6, 8, 9)\n    N = divisible_by\n    while N % 7 != 5:\n        N += divisible_by\n    return N\n\nans = solution()"
    ],
    "92911ac8b9144f938149832f7b7402c6": [
        "def solution():\n    return 8386 // 14\n\nans = solution()"
    ],
    "9b6fc41b0a9a49fea3924bc898749d7d": [
        "def solution():\n    total_pupils = 560\n    pupils_away = total_pupils * (1/5)\n    pupils_going_to_cathedral = total_pupils - pupils_away\n    return pupils_going_to_cathedral\n\nans = solution()"
    ],
    "6b4e0702e3de4173981781093a35339e": [
        "def solution():\n    time_per_song = 3\n    num_songs = 2\n    num_children = 50\n    total_time = time_per_song * num_songs * num_children\n    return total_time\n\nans = solution()"
    ],
    "08ead4044f5c4e0cb7f564479dcbb641": [
        "def solution():\n    cost_per_mug = 3.50 / 5\n    cost_per_pen = 6.80 / 8\n    total_cost = cost_per_mug * 7 + cost_per_pen * 5\n    change = 10 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "33059b4275c842cfbe5060e8e558c094": [
        "def solution():\n    return max(25 / 100, 0.3)\n\nans = solution()"
    ],
    "9d2dc78991904963a971fcd7d4ca960c": [
        "def solution():\n    return 1  # Equation 1 has only one term, which is itself.\n\nans = solution()"
    ],
    "ac385e53c24d4641950c3bc12d00cf65": [
        "def solution():\n    total_weight_with_apples = 580\n    weight_with_3_apples_out = 280\n\n    # Calculate the weight of 2 apples\n    weight_of_2_apples = total_weight_with_apples - weight_with_3_apples_out\n\n    # Since those are 2 apples, the weight of each apple is half of the total weight of 2 apples\n    weight_of_each_apple = weight_of_2_apples / 2\n\n    # Calculate the weight of all apples when the basket contained 5 apples\n    weight_of_all_apples = 5 * weight_of_each_apple\n\n    # Subtract the weight of all 5 apples from the total weight (with the apples) to find the weight of the basket\n    weight_of_basket = total_weight_with_apples - weight_of_all_apples\n\n    return weight_of_basket\n\nans = solution()"
    ],
    "824b5f4234db4e34ba3320198b6e527a": [
        "def solution():\n    total_donuts = 6 * 6  # 6 boxes times 6 donuts each\n    eaten_donuts = 3\n    remaining_donuts = total_donuts - eaten_donuts\n    return remaining_donuts\n\nans = solution()"
    ],
    "2b391dae225f4f358dfa8a02cfaea5f6": [
        "def solution():\n    loafs_per_cup = 7 / 4\n    desired_loafs = 35\n    cups_needed = desired_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "e80e460c0afe49d7918f9c4c9e99d36a": [
        "def solution():\n    lcm = 3 * 7  # Least common multiple of 3 and 7\n    # Find the smallest number that is a multiple of lcm and ends with 2\n    num = lcm\n    while True:\n        if str(num)[-1] == '2':\n            return num\n        num += lcm\n\nans = solution()"
    ],
    "4b619e6f83fb4fcb8bd134e22add52a2": [
        "def solution():\n    initial_amount = 35000\n    final_amount = 37100\n    interest_rate = 1.5 / 100\n    years_claimed = 5\n\n    # Calculate the amount using compound interest formula for each year\n    # until it exceeds or equals the final amount to determine the actual years\n    current_amount = initial_amount\n    actual_years = 0\n    \n    while current_amount < final_amount:\n        current_amount += current_amount * interest_rate\n        actual_years += 1\n\n    is_she_right = (actual_years == years_claimed)\n\n    return (is_she_right, actual_years) if not is_she_right else is_she_right\n\nans = solution()"
    ],
    "c847b39a398345608e4e416f46045845": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies, cakes = symbols('cookies cakes')\n\n    equation1 = Eq(cookies, 3 * cakes)\n    equation2 = Eq(cookies - 39 + cakes - 17, 48)\n\n    solutions = solve((equation1, equation2), (cookies, cakes))\n\n    cookies_left = solutions[cookies] - 39\n\n    return cookies_left\n\nans = solution()"
    ],
    "e33f554d8b1644c19022b4fa4594db6b": [
        "def solution():\n    days_in_a_week = 7\n    number_of_weeks = 2\n    ans = days_in_a_week * number_of_weeks\n    return ans\n\nans = solution()"
    ],
    "926c0d38b66140b8900e8ac92ba84f48": [
        "def solution():\n    value_first_3 = 3 * 10**2  # The value of 3 in the hundreds place\n    value_second_3 = 3 * 10**5 # The value of 3 in the hundred thousands place\n    \n    difference = abs(value_second_3 - value_first_3)\n    \n    return difference\n\nans = solution()"
    ],
    "246eea2b254546f6a06a17c8c5da0778": [
        "def solution():\n    return 2**17 % 10\n\nans = solution()"
    ],
    "15d29f8eed604f4faf1e5161667d0a8e": [
        "def solution():\n    total_pages = sum(i for i in range(1, 21))\n    return total_pages\n\nans = solution()"
    ],
    "0521571bcf6e46beb68e012434205a1a": [
        "def solution():\n    coin1 = 4\n    coin2 = 5\n    max_value = (coin1 - 1) * (coin2 - 1) - 1\n    return max_value\n\nans = solution()"
    ],
    "be94a430bb8b4fcaa11c93b71957d202": [
        "def solution():\n    sum_of_numbers = 1001\n    max_d = sum_of_numbers  # Start with the sum itself, and decrement to find the actual max d\n\n    while max_d > 0:\n        if sum_of_numbers % max_d == 0:\n            return max_d\n        max_d -= 1\n\nans = solution()"
    ],
    "576faec091114697b4cc7ea7ab748d0c": [
        "def solution():\n    # Combined age of Claire and Daniel 5 years ago\n    combined_age_5_years_ago = 14\n    \n    # Since 5 years have passed, we add 5 years to each person's age\n    current_combined_age = combined_age_5_years_ago + 5 * 2\n    \n    # Calculate the combined age in 3 years\n    combined_age_in_3_years = current_combined_age + 3 * 2\n    \n    return combined_age_in_3_years\n\nans = solution()"
    ],
    "043842622d23468b98edf5cef7ed85bf": [
        "def solution():\n    from math import gcd\n    \n    length1 = 45\n    length2 = 30\n    \n    longest_piece_length = gcd(length1, length2)\n    \n    return longest_piece_length\n\nans = solution()"
    ],
    "1eee00688a104ff986a31b1fee446322": [
        "def solution():\n    count = 0\n    # A number is divisible by 12 if and only if it is divisible by both 3 and 4.\n    # For divisibility by 3, the sum of the digits must be a multiple of 3.\n    # For divisibility by 4, the last two digits must form a number that is a multiple of 4.\n\n    # Fix the first four digits to 1082 and iterate over the last two digits 'ab'.\n    for a in range(10):\n        for b in range(10):\n            number = 108200 + a * 10 + b\n            # Check divisibility by 3 and 4\n            if (number % 3 == 0) and (number % 4 == 0):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "13ecc517842a4e27b0943158564ba2f9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the productivity of John, Jonah and Angus as J, Jo, and A respectively.\n    # We know that 1/J + 1/Jo + 1/A = 1/27 (the rate at which they build the wall together)\n    # and 1/Jo + 1/A = 1/36 (the rate at which Jonah and Angus build the wall together)\n    J, Jo, A = symbols('J Jonah Angus')\n    \n    # Equation representing the three of them working together\n    equation1 = Eq(1/J + 1/Jo + 1/A, 1/27)\n    # Equation representing Jonah and Angus working together\n    equation2 = Eq(1/Jo + 1/A, 1/36)\n    \n    # We solve the system of equations to find J (John's productivity)\n    # Since we have 2 equations and 3 unknowns, we cannot find a unique solution for each individual.\n    # However, we can express J in terms of either Jo or A, and solve for J since we want the time John would take.\n    # We can first find Jo in terms of A (or vice versa) from the second equation, and then substitute in the first one.\n    Jo_in_terms_of_A = solve(equation2, Jo)[0]\n\n    # Substitute Jo in the first equation\n    substituted_equation1 = equation1.subs(Jo, Jo_in_terms_of_A)\n\n    # Now we solve for J\n    solution_J = solve(substituted_equation1, J)\n\n    return solution_J[0]\n\nans = solution()"
    ],
    "099cc2e5ff734ad197d27fee09bc11fb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apple, pear = symbols('apple pear')\n    \n    equation1 = Eq(3*apple + 4*pear, 1.81)\n    equation2 = Eq(5*apple + 2*pear, 1.71)\n    \n    solutions = solve((equation1, equation2), (apple, pear))\n    \n    weight = 4*solutions[apple] + 4*solutions[pear]\n    \n    return weight\n\nans = solution()"
    ],
    "93147f6eb5f740a294872bacc776ddb6": [
        "def solution():\n    num1 = 475\n    num2 = 138\n    return num1 + num2\n\nans = solution()"
    ],
    "7f1aa4e059a14f339db6b2ca01c5fcab": [
        "def solution():\n    num = 1\n    while True:\n        if num % 5 == 1 and num % 12 == 3:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "be1d59d57baf4467ac4f9b6959b15354": [
        "def solution():\n    # Addition of whole numbers in horizontal form\n    ans = 42 + 21 + 16 + 44 + 37\n    return ans\n\nans = solution()"
    ],
    "a33b75b9ed48463ca3eeddc40ed2b3d3": [
        "def solution():\n    total_students = 152\n    # Let x be the original number of boys\n    # Then the original number of girls is (total_students - x)\n    # After removing 1/11 of the boys and 5 girls, we get:\n    # x - (1/11)x = (total_students - x) - 5\n    # Simplifying the equation, we get:\n    # x - (1/11)x + x = total_students - 5\n    # (21/11)x = total_students - 5\n    # x = (total_students - 5) * 11 / 21\n    x = (total_students - 5) * 11 / 21\n    return int(x)\n\nans = solution()"
    ],
    "5703bb8ce16a4381b41f8d825e3b1d53": [
        "def solution():\n    total_pencils = 128\n    pencils_per_box = 16\n    \n    num_boxes = total_pencils // pencils_per_box\n    \n    return num_boxes\n\nans = solution()"
    ],
    "675d0644ed364630886e6ad4d9107e49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amanda, bernie, cathy = symbols('amanda bernie cathy')\n\n    equation1 = Eq(cathy, 3 * amanda)\n    equation2 = Eq(amanda, 2 * bernie)\n    equation3 = Eq(amanda + bernie + cathy, 378)\n\n    solutions = solve((equation1, equation2, equation3), (amanda, bernie, cathy))\n\n    return solutions[amanda] + solutions[cathy]\n\nans = solution()"
    ],
    "2775c0cd96fc41549c1710e81e205e35": [
        "def solution():\n    ans = 386 + 99\n    return ans\n\nans = solution()"
    ],
    "1661939d67544a83807ef71d048c5ebf": [
        "def solution():\n    # Given the equation (24 - x) / 3 = 7\n    # We need to solve for x\n    x = 24 - (7 * 3)\n    return x\n\nans = solution()"
    ],
    "0842c79b27de450fa5cfe122f9bcadc6": [
        "def solution():\n    french = 15\n    japanese = 12\n    italian = 13\n    french_japanese = 5\n    french_italian = 3\n    japanese_italian = 2\n    all_three = 1\n\n    # Applying the inclusion-exclusion principle\n    total = (french + japanese + italian \n             - french_japanese - french_italian - japanese_italian \n             + all_three)\n\n    return total\n\nans = solution()"
    ],
    "f9fc8eb9b14d4cc9a262fcb37c90fda7": [
        "def solution():\n    total_orange_drink = 12\n    fraction_water = 3 / 4\n    water_in_orange_drink = total_orange_drink * fraction_water\n    return water_in_orange_drink\n\nans = solution()"
    ],
    "ab9fcefd7c4e479ea261d1c0846c27b6": [
        "def solution():\n    # Initial number of adult fleas Ermintrude can produce per day.\n    eggs_per_day = 50\n    \n    # It takes 30 days for an egg to become an adult.\n    days_to_adult = 30 \n    \n    # The query is about the situation in 40 days.\n    total_days = 40\n    \n    # Calculate the number of days in which new eggs can turn into adult fleas.\n    # Since it takes 30 days for an egg to become an adult, we discard the last 30 days.\n    days_of_laying_eggs = total_days - days_to_adult\n\n    # Number of new adult fleas after 40 days.\n    # Only the eggs laid in the first 10 days will become adults within 40 days.\n    new_adult_fleas = days_of_laying_eggs * eggs_per_day \n\n    return new_adult_fleas\n\nans = solution()"
    ],
    "2055cce1efcf44bea37be19436b9bcf2": [
        "def solution():\n    first_term = 3\n    difference = 3\n    num_rows = 22\n    last_term = first_term + (num_rows - 1) * difference\n    \n    total_students = (first_term + last_term) * num_rows // 2\n\n    return total_students\n\nans = solution()"
    ],
    "4e21bd2101d34265aef926bc9e12fa2a": [
        "def solution():\n    story_books = 75\n    magazines = 12 + 3 * story_books\n    total_books = story_books + magazines\n    return total_books\n\nans = solution()"
    ],
    "487795a712ca4df799ee2cbe1e449bfa": [
        "def solution():\n    for abcd in range(1000, 10000):\n        M = int(\"5\" + str(abcd))\n        N = int(str(abcd) + \"5\")\n        if M - N == 22122:\n            return abcd\n\nans = solution()"
    ],
    "c095aeb90ada41a7b2026c6d00a0a9a5": [
        "from sympy import Rational\n\ndef solution():\n    a = 21 + Rational(21, 286)\n    b = 6 + Rational(647, 2530)\n    c = 1 + Rational(1370, 2829)\n\n    ans = a / b * c\n\n    return ans\n\nans = solution()"
    ],
    "a8ad8c1da3f64db3b4d3e1134a3879a8": [
        "def solution():\n    ans = 30 / 100 * 1600\n    return ans\n\nans = solution()"
    ],
    "1080dc888bc1462c875ce93fbe5290ad": [
        "def solution():\n    total_money = 3.85  # total money in pounds\n    pencil_cost = 0.38  # pencil cost in pounds\n    ruler_cost = 0.59   # ruler cost in pounds\n\n    remaining_money = total_money - (pencil_cost + ruler_cost)\n\n    return remaining_money\n\nans = solution()"
    ],
    "e02f12831853474bb8ee7052e880632b": [
        "def solution():\n    # Calculate the dimensions of the small cubes\n    # Since the volume of the cuboid is 6*10*12 and it is divided into 720 cubes, each small cube is 1x1x1\n    small_cuboid_edge_length = 6*10*12 // 720\n    \n    # Calculate the number of cubes along each dimension\n    cubes_along_length = 6 // small_cuboid_edge_length\n    cubes_along_width = 10 // small_cuboid_edge_length\n    cubes_along_height = 12 // small_cuboid_edge_length\n    \n    # Calculate the number of small cubes at the faces without the edges and corners:\n    # For each face, there are (length - 2) * (width - 2) small cubes with exactly one face painted\n    # Multiply by 2 for parallel faces\n    one_face_painted = 2 * ((cubes_along_length - 2) * (cubes_along_width - 2)) + \\\n                       2 * ((cubes_along_length - 2) * (cubes_along_height - 2)) + \\\n                       2 * ((cubes_along_width - 2) * (cubes_along_height - 2))\n    \n    return one_face_painted\n\nans = solution()"
    ],
    "ee5f7e8a908d460b8adcc1ad027e999e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anne = symbols('anne')\n    maria = anne + 20\n    total_apples = Eq(anne + maria, 44)\n    \n    solutions = solve(total_apples, anne)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "b941a481a3ec4834ae3b5b86f5aec29d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the rates of work per hour for Star and Nini\n    rate_star, rate_nini = symbols('rate_star rate_nini')\n    \n    # Since Star types for 5 hours and Nini for 20 hours to finish the job, the sum of their work equals 1 job\n    equation1 = Eq(rate_star * 5 + rate_nini * 20, 1)\n    \n    # If Star types for 20 hours and Nini for 8 hours to finish the job, the sum of their work also equals 1 job\n    equation2 = Eq(rate_star * 20 + rate_nini * 8, 1)\n    \n    # Solve the two equations to find the rates of work for Star and Nini\n    solutions = solve((equation1, equation2), (rate_star, rate_nini))\n    \n    # Time for Nini to finish the job by herself (1/job rate of Nini)\n    nini_time = 1 / solutions[rate_nini]\n\n    return nini_time\n\nans = solution()"
    ],
    "6b16fdd0be384cf5a083adb6b7ddc329": [
        "def solution():\n    for num in range(10, 100):\n        if num % 9 == 5 and num % 11 == 2:\n            return num\n\nans = solution()"
    ],
    "3199cfbf2dfe4ff5b0205bf52aec9191": [
        "def solution():\n    # In the worst-case scenario, the warden would always pick the wrong key for each classroom until the last key.\n    # For the first classroom, he could potentially try all 20 keys.\n    # For the second classroom, he could try the remaining 19 keys, and so on, until for the last classroom there is only 1 key left.\n    # So, the total number of attempts in the worst case would be the sum of the first 20 natural numbers minus 1 (because the last key will be the correct one without needing to try).\n    \n    total_tries = sum(range(1, 21)) - 1\n\n    return total_tries\n\nans = solution()"
    ],
    "c918b81873d64b8aa1c102ce71280309": [
        "def solution():\n    # Prime factorize 140.\n    # Since we know that each pile must contain an odd number of candies,\n    # we are only interested in the odd prime factors because even numbers\n    # cannot generate odd numbers of candies per pile.\n    # Factorize 140 = 2^2 * 5 * 7\n\n    # For each odd prime factor, consider the exponents plus one.\n    # (Reason: if p is a prime factor of n with exponent e, there are e+1 ways to distribute\n    # the power of p, including the possibility of not choosing it.)\n    # For 140, we have the prime factors 5^1 and 7^1, so the counts are 1+1=2 and 1+1=2,\n    # respectively.\n\n    # Multiply the possibilities of distributing each prime factor to get the total number\n    # of distributions, not considering 2 as all piles must be odd.\n    ways_to_distribute = (1 + 1) * (1 + 1)\n\n    return ways_to_distribute\n\nans = solution()"
    ],
    "9399d8d9f49e46a198d04e3865b85816": [
        "def solution():\n    # Tom takes 4 stones from Stack B first. So, the number of stones in Stack A and Stack B are:\n    # Stack A: 20, Stack B: 16\n    # To ensure Jerry wins, he needs to make both stacks contain the same amount of stones.\n    # Thus, he takes stones from stack A.\n    # This will force Tom to take from one stack and Jerry can mirror his moves and win.\n    \n    # Stones that Jerry must take from Stack A to make both stacks even.\n    stones_to_take = 20 - 16\n    \n    # Stack from which Jerry must take stones.\n    stack = 'A'\n    \n    return (stones_to_take, stack)\n\nans = solution()"
    ],
    "7580acd98a0c4ef6bda0a71edd51c899": [
        "def solution():\n    # Assuming the first page is page number 1, each sheet in the newspaper contains 4 pages,\n    # with the left page being an odd number and the right page being an even number.\n\n    # When the 3rd sheet is taken out,\n    # the left side has the 5th and 6th pages,\n    # and the right side has the 7th and 8th pages,\n    # since the pages are numbered consecutively.\n\n    # Calculate the sum of the four page numbers on the 3rd sheet.\n    sum_of_pages = 5 + 6 + 7 + 8\n\n    return sum_of_pages\n\nans = solution()"
    ],
    "7a962b40b4df4e7da95c3f2d31a2f3ce": [
        "def solution():\n    total_students = 98\n    fraction_girls = 3 / 7\n    number_of_girls = total_students * fraction_girls\n\n    return int(number_of_girls)\n\nans = solution()"
    ],
    "2bf32838f785445980cc390cb6320d3d": [
        "def solution():\n    numerator = (2017 / 2018) + (20172017 / 20182018)\n    denominator = 201720172017 / 201820182018\n\n    ans = numerator / denominator\n\n    return ans\n\nans = solution()"
    ],
    "23f8aa9db7e147b3b3742048c1d3174a": [
        "def solution():\n    return 861 // 7\n\nans = solution()"
    ],
    "04b825cc67fe4b4f8a1f4497100aeb7c": [
        "def solution():\n    watermelon_to_peaches = 6\n    peaches_to_apples = 3 / 2\n\n    watermelon_to_apples = watermelon_to_peaches * peaches_to_apples\n\n    return watermelon_to_apples\n\nans = solution()"
    ],
    "7ed76480d276434fbfc1ef6cec1b7bdd": [
        "def solution():\n    digits_used = 933\n    pages = 0\n    total_digits = 0\n    \n    while total_digits < digits_used:\n        pages += 1\n        total_digits += len(str(pages))\n    \n    return pages\n\nans = solution()"
    ],
    "69821dbcaf204ec39ed74a835223a3ce": [
        "def solution():\n    return (120 + 300) / 2\n\nans = solution()"
    ],
    "b79ceb9a914f43578cdb34802a537cfe": [
        "def solution():\n    # Even terms cancel each other out as they appear in pairs (positive and negative).\n    # Hence, only the first term remains.\n    ans = 100\n    return ans\n\nans = solution()"
    ],
    "fa6c8419cbc948ed949fceaaf819f554": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "894a1b1acc3e45f59d4643eed64472b1": [
        "def solution():\n    total_apple_juice_cost = 30 * 5\n    total_orange_juice_cost = 50 * 3\n    total_peach_juice_cost = 20 * 10\n\n    total_cost = total_apple_juice_cost + total_orange_juice_cost + total_peach_juice_cost\n    total_cups = 30 + 50 + 20\n\n    average_cost_per_cup = total_cost / total_cups\n\n    return average_cost_per_cup\n\nans = solution()"
    ],
    "796675bc6c294ff3bcb032a3c401a43e": [
        "def solution():\n    count = 0\n    for page in range(1, 301):\n        if '3' in str(page):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "88e4456f85e441199253d72e1f99a80c": [
        "def solution():\n    total_digits = sum(len(str(i)) for i in range(1, 92))\n    return total_digits\n\nans = solution()"
    ],
    "c9603f52f68b48fb9942c64a01b72b5b": [
        "def solution():\n    start_time = (9 * 60) + 15\n    end_time = (11 * 60) + 6\n\n    duration_minutes = end_time - start_time\n    \n    return duration_minutes\n\nans = solution()"
    ],
    "2256985532604103b84c8d43d526ad28": [
        "def solution():\n    pens_to_return = 0\n\n    # Initial number of pens of each color in Box A after 20 pens are removed\n    box_a_blue = 10 - 20\n    box_a_red = 15 - 20\n    box_a_black = 20 - 20\n    box_a_green = 25 - 20\n\n    # If any of the pens count goes below 15, return pens until count is 15\n    if box_a_blue < 15: \n        pens_to_return += 15 - box_a_blue\n        box_a_blue = 15\n    if box_a_red < 15:\n        pens_to_return += 15 - box_a_red\n        box_a_red = 15\n    if box_a_black < 15:\n        pens_to_return += 15 - box_a_black\n        box_a_black = 15\n    if box_a_green < 15:\n        pens_to_return += 15 - box_a_green\n        box_a_green = 15\n \n    return pens_to_return\n\nans = solution()"
    ],
    "7e7c1a59a5694db697ef232a76a2ffdf": [
        "def solution():\n    ans = 1 / 8\n    return ans\n\nans = solution()"
    ],
    "f93fc07de4544d5f963823aa20a6df3c": [
        "def solution():\n    diff = 32\n    total_students = 0\n\n    for side_length in range(1, 100, 2):  # Start with a single center student and increase by layer\n        boys = side_length * 4 - 4  # boys are always on the outer layer of each square\n        if side_length == 1:\n            girls = 1  # if there's only one student, it's a girl\n        else:\n            girls = (side_length - 2) * 4  # inner square without the corners\n\n        if (boys - girls) == diff:\n            total_students = (side_length ** 2) + ((side_length - 2) ** 2)\n            break\n\n    return total_students\n\nans = solution()"
    ],
    "3e0ec8edcb27464fae3044b467f54920": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dividend, divisor = symbols('dividend divisor')\n    quotient = 29\n    remainder = 11\n    sum_of_numbers = 431\n\n    # dividend = divisor * quotient + remainder\n    equation1 = Eq(dividend, divisor * quotient + remainder)\n    # dividend + divisor = sum_of_numbers\n    equation2 = Eq(dividend + divisor, sum_of_numbers)\n\n    solutions = solve((equation1, equation2), (dividend, divisor))\n\n    difference = solutions[dividend] - solutions[divisor]\n\n    return difference\n\nans = solution()"
    ],
    "b2d3da9e064d4575a7d21857a9386c15": [
        "def solution():\n    violin_percent = 12.5\n    violin_players = 11\n    total_pupils = (violin_players * 100) / violin_percent\n    return int(total_pupils)\n\nans = solution()"
    ],
    "81eb5a575fa2413fb713f5e997cd9be1": [
        "def solution():\n    total_chocolates = 20\n    plain_chocolates = 8\n    milk_chocolates = 12\n    soft_centres = 16\n\n    # Since there are more soft-centred chocolates than milk chocolates,\n    # some of the plain chocolates must also be soft-centred.\n    # We know that all milk chocolates have soft-centres (since 12 < 16).\n    # Therefore, we can calculate the minimum number of plain chocolates\n    # that have soft-centres by subtracting the number of milk chocolates\n    # from the total number of soft-centred chocolates.\n    \n    plain_soft_centres = soft_centres - milk_chocolates\n    return plain_soft_centres\n\nans = solution()"
    ],
    "766f7130bda14f6780c8a29b28b45542": [
        "def solution(n):\n    price_per_bar = 50\n    C = n * price_per_bar\n    return C\n\nans = solution(n)  # Replace `n` with the actual number of chocolate bars when calling the function."
    ],
    "bd8976f4ffcd4d51b276b2ccda2e228d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of each type of coin\n    x = symbols('x') \n    \n    # Equations based on the value of the coins\n    equation = Eq(1*x + 2*x + 5*x + 10*x, 90)\n    \n    # Solve the equation\n    solution = solve(equation, x)\n    \n    # Calculate the total number of coins\n    total_coins = 4 * solution[0]  # There are 4 types of coins\n    \n    return total_coins\n\nans = solution()"
    ],
    "418f309d7a1845b1a05816bed5dfb673": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n    equation1 = Eq(stickers - 13 * pupils, 190)\n    equation2 = Eq(stickers - 17 * pupils, 50)\n\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "6eeec66a73a24afc801c791a461a7aa6": [
        "def solution():\n    total_cars = 60\n    red_cars = (5 / 12) * total_cars\n    blue_cars = (20 / 100) * total_cars\n    neither_red_nor_blue_cars = total_cars - (red_cars + blue_cars)\n    return int(neither_red_nor_blue_cars)\n\nans = solution()"
    ],
    "bb42c63fe2114d219cb0459ccb14f1a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    \n    equation1 = Eq(A/B, 4/5)\n    equation2 = Eq(B/C, 5/6)\n    equation3 = Eq(C - A, 10)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return sum(solutions.values())\n\nans = solution()"
    ],
    "55d9d0163f3a466c8356b0f2120c7887": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apples, pears = symbols('apples pears')\n\n    # Begin with the equation that the total is 105\n    total_fruits = Eq(apples + pears, 105)\n    \n    # After selling fruits, both the apples and pears are decreased\n    after_apples_sold = apples - apples / 3\n    after_pears_sold = pears - 2 * pears / 5\n    \n    # After selling, the relationship between the remaining apples and pears\n    remaining_fruits = Eq(after_apples_sold, 5/6 * after_pears_sold)\n    \n    # Solve for apples and pears\n    solutions = solve((total_fruits, remaining_fruits), (apples, pears))\n    \n    # Calculate the total number of apples and pears sold\n    apples_sold = solutions[apples] / 3\n    pears_sold = 2 * solutions[pears] / 5\n    \n    total_sold = apples_sold + pears_sold\n    \n    return int(total_sold)\n\nans = solution()"
    ],
    "3c78fac74fe445cdaba8f451af901d4f": [
        "from math import factorial\n\ndef solution():\n    # Treat students A, B, C, D as a single entity since they must be next to each other\n    # Thus there are 9 entities to arrange (8 individual students + 1 group)\n    entities_to_arrange = factorial(9)\n\n    # Students A, B, C, D can be arranged among themselves in 4! ways\n    group_arrangements = factorial(4)\n    \n    # Multiply the two possibilities to get the total arrangements\n    total_arrangements = entities_to_arrange * group_arrangements\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "9da90a336543472fb221543495f75212": [
        "def solution():\n    # Total number of games played\n    total_games = (6 * 5) // 2  # Each student plays 5 others\n    total_points = total_games * 2  # 2 points per game\n\n    # Sum of points for the five known students\n    known_points = 7 + 6 + 5 + 4 + 3\n    # Points for the remaining student\n    remaining_student_points = total_points - known_points\n\n    return remaining_student_points\n\nans = solution()"
    ],
    "2fbf56cda6294a4ba514fb0676d5a24c": [
        "def solution():\n    # Let a be the weight of bag A and b be the weight of bag B.\n    from sympy import symbols, Eq, solve\n    \n    a, b = symbols('a b')\n\n    # Original ratio of weights for A and B: 5a = 3b => a/b = 5/3\n    original_ratio = Eq(5 * b, 3 * a)\n\n    # New ratio after transfer: (a - 10)/(b + 10) = 7/5\n    new_ratio = Eq(7 * (b + 10), 5 * (a - 10))\n    \n    # Solve the system of equations for a and b\n    solutions = solve((original_ratio, new_ratio), (a, b))\n    \n    # Total weight of both bags\n    total_weight = solutions[a] + solutions[b]\n\n    return total_weight\n\nans = solution()"
    ],
    "f90f17b98c3244ee80cbcf47c9a22ca7": [
        "def solution():\n    boys_to_girls_ratio = 3/5\n    number_of_boys = 9\n    # Find the unit rate for 1 boy\n    unit_rate_for_one_boy = 1 / boys_to_girls_ratio\n    # Calculate the number of girls\n    number_of_girls = number_of_boys * unit_rate_for_one_boy\n    return int(number_of_girls)\n\nans = solution()"
    ],
    "0c806097cde44e2b993a1db7282d9731": [
        "def solution():\n    total_players = 378\n    first_line_players = 22\n    last_line_players = 62\n\n    # Let the difference be d and the number of terms be n\n    # Using the sum formula for arithmetic progression, we get\n    # Sn = n/2 * (2a + (n-1)d) where a is the first term\n    # 378 = n/2 * (2*22 + (n-1)*d)\n    # Since the last term \"l\" is also given by a + (n-1)d\n    # We also have l = 62 = 22 + (n-1)d\n    \n    # We can solve these two equations for d\n    n = (2 * total_players) / (first_line_players + last_line_players)\n    difference = (last_line_players - first_line_players) / (n - 1)\n    \n    return int(difference)\n\nans = solution()"
    ],
    "d6a1e647460246479951e8955d7126b0": [
        "def solution():\n    for num in range(100, 201):\n        if all(num % div == 2 for div in [3, 5, 7]):\n            return num\n\nans = solution()"
    ],
    "1c808145d3a040e4899219721beca8a3": [
        "def solution():\n    # Calculate the product\n    product = 48 * 925 * 38 * 435\n    \n    # Convert the product to string to count trailing zeros\n    product_str = str(product)\n    \n    # Count the trailing zeros\n    count_zeros = len(product_str) - len(product_str.rstrip('0'))\n    \n    return count_zeros\n\nans = solution()"
    ],
    "65b97cc4685a4c2285fda77b5e2dd58d": [
        "def solution():\n    masses = [30, 1000, 300, 2500, 3000, 150, 3]\n    largest_mass = max(masses)\n    return largest_mass\n\nans = solution()"
    ],
    "859d0b8b48294702afaa6ae358e1b4b8": [
        "def solution():\n    from sympy import Rational\n\n    P_bark_given_theft = Rational(9, 10)  # Probability of the dog barking given the theft occurred\n    thefts = 2  # Total thefts\n    barks = 3 * (1000 / 7)  # Total barks in 1000 days\n\n    P_theft = Rational(thefts, barks)  # Probability of any given bark being due to a theft\n    P_bark_and_theft = P_bark_given_theft * P_theft  # Probability of both theft and barking\n\n    return P_bark_and_theft\n\nans = solution()"
    ],
    "7522b62306804ad5ac94948668c3a1b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables\n    orange, apple, grape, pineapple = symbols('orange apple grape pineapple')\n    \n    # Create the equations based on the problem statement\n    equation1 = Eq(apple, orange + 7)\n    equation2 = Eq(apple, grape + 3)\n    equation3 = Eq(pineapple, orange + 2)\n    equation4 = Eq(orange + apple + grape + pineapple, 25)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (orange, apple, grape, pineapple))\n    \n    # Return the number of apple candies\n    return solutions[apple]\n\nans = solution()"
    ],
    "cbc5f810ee4d4266ac73f789efc26675": [
        "def solution():\n    total_children = 407\n    girls_ratio = 6 / 11\n    girls_count = total_children * girls_ratio\n    boys_count = total_children - girls_count\n    return int(boys_count)\n\nans = solution()"
    ],
    "cb24212b24014d99811733199a00d63c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n\n    equation1 = Eq(stickers - 13*pupils, 190)\n    equation2 = Eq(stickers - 17*pupils, 50)\n\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "a8823bcc458c444d8e7a13e610f7cd2a": [
        "def solution():\n    ans = (70*4) - (80*3) + (60*5)\n    return ans\n\nans = solution()"
    ],
    "514c9d0ed96a47ed9c826d6081877afc": [
        "def solution():\n    min_diff = float('inf')  # starts with a very large number\n    all_nums = itertools.permutations('123456789')  # all permutations of the numbers\n    for num_tuple in all_nums:\n        num1 = int(''.join(num_tuple))  # join the digits to make the number\n        for num_tuple2 in all_nums:\n            num2 = int(''.join(num_tuple2))\n            if num1 != num2:\n                diff = abs(num1 - num2)  # absolute difference between the numbers\n                if diff < min_diff:\n                    min_diff = diff  # assign the new minimum difference\n                    if min_diff == 1:  # if the minimum difference is 1, we can't get any smaller, so we break\n                        return min_diff\n    return min_diff\n\nans = solution()"
    ],
    "525efcf75fb844b7b5bfc88c0478887d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    g = symbols('g')  # Let us represent the number of girls with g\n    b = g - 65        # Number of boys, 65 fewer than girls\n\n    # After a fraction of boys and girls left, they become equal\n    # Fraction remaining of boys: 1 - 2/5\n    # Fraction remaining of girls: 1 - 3/7\n\n    boys_left = b * (1 - 2/5)\n    girls_left = g * (1 - 3/7)\n\n    # Equation representing they have equal number left in the hall after some left for recess\n    equation = Eq(boys_left, girls_left)\n\n    # Solve for g\n    girls_number = solve(equation, g)[0]\n    boys_number = girls_number - 65\n\n    # Total number left in the hall\n    total_left = boys_left.subs(g, girls_number) + girls_left.subs(g, girls_number)\n\n    return int(total_left)\n\nans = solution()"
    ],
    "c5424cddd42c402499631a2dc29f9de6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's define a symbol for the number of bricks at first\n    total_bricks = symbols('total_bricks')\n    \n    # Equation for the first trip: moved bricks = half the number of bricks - 26\n    first_trip = Eq((total_bricks / 2) - 26, total_bricks - (total_bricks / 2))\n    \n    # Equation for the second trip: remaining bricks after the first trip / 2 + 11\n    second_trip = Eq((total_bricks - (total_bricks / 2) - (total_bricks / 2) + 26) / 2 + 11, (total_bricks - (total_bricks / 2) + 26) - 68 - 25)\n    \n    # Solve the system of equations\n    solutions = solve((first_trip, second_trip), total_bricks)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "0d96f11c50ce4d189e891f9019eef601": [
        "def solution():\n    return 2412 // 9\n\nans = solution()"
    ],
    "d95d576c1e1d4865bb3b4aa77767da99": [
        "def solution():\n    count = 0\n    for page in range(1, 131):\n        count += str(page).count('1')\n    return count\n\nans = solution()"
    ],
    "9238796298a4443b8f23e7932b9616d6": [
        "def solution():\n    import math\n    return math.factorial(3)\n\nans = solution()"
    ],
    "e1834f400a7b4dd1aceed1e5f730d59b": [
        "def solution():\n    # Mike can only be in the second position if the array is of size 3x3\n    # Since that is the smallest square array where 2nd position from all sides is possible\n    # Any larger square array would not satisfy the condition\n    return 3 * 3\n\nans = solution()"
    ],
    "e001594de0464ba1b21b4efea0bd0572": [
        "def solution():\n    current_sum = 22\n    desired_sum = 40\n    years_until_desired_sum = desired_sum - current_sum\n    return years_until_desired_sum\n\nans = solution()"
    ],
    "fa96d25c74d0403cb10a17ab2f107e56": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let g be the number of girls and b be the number of boys\n    g, b = symbols('g b')\n    # Total number of students is the sum of boys and girls\n    total_students_eq = Eq(g + b, 1690)\n    # There are 90 more boys than girls\n    more_boys_eq = Eq(b - g, 90)\n\n    # Solve for g and b\n    girls_and_boys = solve((total_students_eq, more_boys_eq), (g, b))\n    g = girls_and_boys[g]\n    b = girls_and_boys[b]\n\n    # Ratio of girls who can swim to those who cannot\n    girls_swim = 31 / (31 + 49) * g\n    girls_cannot_swim = 49 / (31 + 49) * g\n\n    # Number of boys who can swim is 120 less than those who cannot\n    # Let bs be the number of boys who can swim and bns be those who cannot\n    bs, bns = symbols('bs bns')\n    boys_swim_eq = Eq(bs, bns - 120)\n    total_boys_eq = Eq(bs + bns, b)\n\n    # Solve for bs and bns\n    boys_swim_and_cannot = solve((boys_swim_eq, total_boys_eq), (bs, bns))\n    bs = boys_swim_and_cannot[bs]\n    bns = boys_swim_and_cannot[bns]\n\n    # The total number of students who cannot swim is the sum of girls and boys who cannot swim\n    cannot_swim_total = girls_cannot_swim + bns\n\n    return int(cannot_swim_total)\n\nans = solution()"
    ],
    "157222dd22d34a94998e5528efa14ab0": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)\n    initial_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "957c6e2479f14a37aca09d1bc7ff195f": [
        "def solution():\n    count = 0\n    for i in range(1, 21):\n        count += len(str(i))\n    return count\n\nans = solution()"
    ],
    "97bb7d23bdbf4724b5bab9effbd3ac6e": [
        "def solution():\n    ans = 125 * 34 * 25 * 4 * 8\n    return ans\n\nans = solution()"
    ],
    "a447314d1b7e47d595af58ce12a8673e": [
        "def solution():\n    for i in range(1000, 10000):\n        original = str(i)\n        swapped = original[-1] + original[1:-1] + original[0]\n        if int(swapped) - int(original) == 5877:\n            return int(original)\n\nans = solution()"
    ],
    "ef6efdf0f99e45afbcac63320b9c084a": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    divisor = 1  # minimum possible divisor\n    dividend = divisor * quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "105a05ed86254429b49e9aa1e948fc3f": [
        "def solution():\n    # dp[i] will hold the number of ways to reach the i-th step.\n    dp = [0] * 11\n    # Base case: there's 1 way to start at the 0th step (do nothing).\n    dp[0] = 1\n    \n    # Start filling the dp table up to the 10th step.\n    for i in range(1, 11):\n        # If Peter can jump 2 steps and we are at step 2 or further,\n        # add the number of ways to reach current step from two steps before.\n        if i-2 >= 0:\n            dp[i] += dp[i-2]\n        # If Peter can jump 3 steps and we are at step 3 or further,\n        # add the number of ways to reach current step from three steps before.\n        if i-3 >= 0:\n            dp[i] += dp[i-3]\n    \n    # The answer is the number of ways to reach the 10th step.\n    return dp[10]\n\nans = solution()"
    ],
    "1d179bb769e243588baf620c0eddb4c3": [
        "def solution():\n    number_str = \"1998\"\n    while True:\n        # Check if the current string is divisible by 33\n        if int(number_str) % 33 == 0:\n            return len(number_str)\n        number_str += \"1998\"\n\nans = solution()"
    ],
    "b576b58e760e4608bde960e52d27390f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(bentley, david - 25)\n    equation3 = Eq(david + bentley + triston, 410)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[bentley]\n\nans = solution()"
    ],
    "37df628db6754f34a0428e73a9610822": [
        "def solution():\n    ans = 882 // 14\n    return ans\n\nans = solution()"
    ],
    "b9ea86dfaf4448428f87deacbb7a0f5a": [
        "def solution():\n    total_miles = 3.75\n    miles_per_round = 1/4\n\n    num_rounds = total_miles / miles_per_round\n\n    return int(num_rounds)\n\nans = solution()"
    ],
    "8b5b1973788f4120b9eaa557471090b6": [
        "def solution():\n    # Each group in the pattern seems to follow a rule based on following observation:\n    # (n, n^2, n^3) - where n is the position of the group (starting with 1)\n\n    # Therefore, we can directly calculate the sum for the 5th group by applying the rule\n    n = 5\n    sum_of_group = n + n**2 + n**3\n\n    return sum_of_group\n\nans = solution()"
    ],
    "d888f754042d47c097e6350ffd0bf91f": [
        "def solution():\n    ans = 3000000 + 30000 + 30\n    return ans\n\nans = solution()"
    ],
    "9a6a60ff879c4c6bbc80d88a7bee3dd1": [
        "def solution():\n    boys_in_line = 3\n    girls_in_line = 2\n    total_boys = 42\n\n    # Ratio of boys to girls\n    boy_girl_ratio = boys_in_line / girls_in_line\n\n    # Based on the ratio calculate number of girls\n    total_girls = total_boys / boy_girl_ratio\n\n    return int(total_girls)\n\nans = solution()"
    ],
    "523cf0df494b4333b5fe0276768d0d6f": [
        "def solution():\n    for number in range(100, 1000):\n        if (number % 5 == 3) and (number % 6 == 4) and (number % 9 == 1):\n            return number\n\nans = solution()"
    ],
    "3a67a40b66334eb68ffe9d005d60fa1f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    andrew, kim, shaun = symbols('andrew kim shaun')\n    equation1 = Eq(shaun, 2 * kim)\n    equation2 = Eq(andrew, shaun - 24)\n    equation3 = Eq(andrew + kim + shaun, 256)\n    \n    solutions = solve((equation1, equation2, equation3), (andrew, kim, shaun))\n    \n    return solutions[andrew]\n\nans = solution()"
    ],
    "33ccad8b36de4799bc2bc55439667b1d": [
        "def solution():\n    # Ratio given 10:x = 14:21\n    # Let's find the value of x using the property of proportions (cross-multiplication)\n    x = (10 * 21) / 14\n    return x\n\nans = solution()"
    ],
    "900857df81614ea5855ed60ccd1e3252": [
        "def solution():\n    books_about_fish = 78\n    books_about_birds = books_about_fish - 12\n    total_books = books_about_fish + books_about_birds\n    return total_books\n\nans = solution()"
    ],
    "da2e2930096a4f6e840662dbf18b6d76": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    candice, doris, elly = symbols('candice doris elly')\n    equation1 = Eq(elly, doris + 6)\n    equation2 = Eq(candice, 5 * elly)\n    equation3 = Eq(candice + doris + elly, 50)\n    \n    solutions = solve((equation1, equation2, equation3), (candice, doris, elly))\n    \n    return solutions[candice]\n\nans = solution()"
    ],
    "5adbbaf57fc64b529ecdb661df6d9c9e": [
        "def solution():\n    johnnys_answer = 5839\n    correct_answer = 5832 + (7 * 10)\n    return correct_answer if correct_answer != johnnys_answer else johnnys_answer\n\nans = solution()"
    ],
    "17091d7aa5fd4380bc6e97f0a25be60b": [
        "def solution():\n    return 27 // 2 + 1\n\nans = solution()"
    ],
    "a4ee7f4c3e13434da3c2253ab814136c": [
        "def solution():\n    for num in range(10, 100, 6):  # Increment by 6 as it's the smallest multiple\n        if num % 9 == 0 and str(num).endswith('0'):\n            return num\n\nans = solution()"
    ],
    "08031ac64ba7489a8cb62dc6a25d5652": [
        "def solution():\n    total_length_cm = 300  # total length in cm\n    pieces_sum_cm = 147 + 32.5 + 67  # sum of the known pieces in cm\n    fourth_piece_length_cm = total_length_cm - pieces_sum_cm  # calculate the fourth piece\n\n    return fourth_piece_length_cm\n\nans = solution()"
    ],
    "3cf63d0be0824f3c84d43730e223636f": [
        "from itertools import product\n\ndef solution():\n    probabilities = [0.5, 0.4, 0.2]\n    pass_counts = [sum(pass_outcomes) for pass_outcomes in product(*[(0, 1) for p in probabilities])]\n    most_likely_pass_count = max(set(pass_counts), key=pass_counts.count)\n    return most_likely_pass_count\n\nans = solution()"
    ],
    "e2d31838755547eba6842f1253e3ffd1": [
        "def solution():\n    return 308 - 197\n\nans = solution()"
    ],
    "741594190e264f008d30c48a942dc6ee": [
        "def solution():\n    pieces_of_paper = 18\n    interval = 3\n    leaves_needed = (pieces_of_paper - 1) // interval\n    return leaves_needed\n\nans = solution()"
    ],
    "b422fcfa507f4716856239caa8b70d72": [
        "def solution():\n    ans = sum(1/i for i in range(1, 11) for j in range(i))\n    return ans\n\nans = solution()"
    ],
    "b4e006ff98474bd0850725353e1e101a": [
        "def solution():\n    # breaking the expression into parts using distributive law\n    part1 = (101 + 234 + 567)\n    part2 = (234 + 567 + 89)\n    part3 = (101 + 234 + 567 + 89)\n    part4 = (234 + 567)\n\n    # performing the calculations\n    ans = (part1 * part2) - (part3 * part4)\n    return ans\n\nans = solution()"
    ],
    "13a6697cd8dc4ffab7300721bb11888a": [
        "def solution():\n    ans = 31 * 56\n    return ans\n\nans = solution()"
    ],
    "0049786ba1f8489782eb5b1cdec203a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the original number of watches be 8x and caps be 11x\n    watches, caps = symbols('watches caps')\n\n    # Based on the first ratio\n    equation1 = Eq(watches /caps, 8/11)\n\n    # After selling 88 caps, the new ratio is given as\n    equation2 = Eq(watches / (caps - 88), 12/11)\n\n    # Solve the system of equations to find the values of watches and caps\n    solutions = solve((equation1, equation2), (watches, caps))\n\n    return solutions[watches]\n\nans = solution()"
    ],
    "b404e6302dad4073a624607030879a2e": [
        "def solution():\n    time_for_five_intervals = 30  # Time from 1st to 6th house is for 5 intervals\n    intervals_total = 9  # Total intervals for 10 houses\n\n    time_per_interval = time_for_five_intervals / 5\n    total_time = time_per_interval * intervals_total\n\n    return total_time\n\nans = solution()"
    ],
    "26535c3c7cf044319e17743d60510a51": [
        "def solution():\n    # Total length of the ribbon in cm\n    total_length_cm = 1.05 * 100\n\n    # Let the length of the shorter piece be x cm, then the longer piece is 2x cm\n    # Since they add up to the total length, we have x + 2x = total_length_cm\n    # Solving for x gives us x = total_length_cm / 3\n    shorter_piece_length_cm = total_length_cm / 3\n\n    # The longer piece is twice the shorter one\n    longer_piece_length_cm = 2 * shorter_piece_length_cm\n\n    return longer_piece_length_cm\n\nans = solution()"
    ],
    "0643ad338aa0456895d017aec0d4285d": [
        "def solution():\n    miles_driven = 560\n    miles_per_gallon = 34.5\n    petrol_cost_per_litre = 1.08\n    litres_per_gallon = 4.55\n\n    gallons_used = miles_driven / miles_per_gallon\n    litres_used = gallons_used * litres_per_gallon\n    total_cost = litres_used * petrol_cost_per_litre\n\n    return total_cost\n\nans = solution()"
    ],
    "7ebc9c1439ea4a04bb6f8b9daa36c101": [
        "def solution():\n    # Loop through all possible combinations of the digits A, B, C, and D\n    for A in range(1, 10):  # A cannot be 0 as it is the first digit of a four-digit number\n        for D in range(1, 10):  # D cannot be 0 as it is a multiple of 4\n            if A == 1/4 * D:  # The first digit is 1/4 of its last digit\n                for B in range(1, 10):  # B cannot be 0 as it is a digit in a four-digit number\n                    if B == A - 1:  # The second digit is 1 less than its first digit\n                        for C in range(1, 10):  # C cannot be 0 as it is a digit in a four-digit number\n                            if len(set([A, B, C, D])) == 4:  # All digits must be different\n                                ABCD = A*1000 + B*100 + C*10 + D\n                                DCBA = D*1000 + C*100 + B*10 + A\n                                if ABCD * 4 == DCBA:\n                                    return ABCD\nans = solution()"
    ],
    "be2bd70c882644a99d167bdd71a65b7e": [
        "def solution():\n    m = 8 / 4  # slope m is calculated as (y2-y1)/(x2-x1) => (8-0)/(4-0)\n    b = 0  # Since the line passes through the origin, y-intercept b is 0\n    return (m, b)\n\nm, b = solution()\nans = f\"y={m}x+{b}\""
    ],
    "c59f693d386d4a73a2d62b1ebcb6185c": [
        "def solution():\n    ans = 1200031093\n    return ans\n\nans = solution()"
    ],
    "69e6ce5788b847b9b25303af2fe5a1fb": [
        "def solution():\n    for first_pick in range(1, 12):\n        # Find the remaining coins after Jack's first pick\n        remaining_coins = 2015 - first_pick\n        # Check if the remaining coins can be divided by 12 (1+11) without remainder\n        if remaining_coins % 12 == 0:\n            return first_pick\n    return None  # If no solution found, return None\n\nans = solution()"
    ],
    "91e7591f3e904be694c0587963279359": [
        "def solution():\n    def calculate_pattern(n):\n        return str(n).count('0') + str(n).count('6') + str(n).count('8')*2 + str(n).count('9')*2\n\n    ans = calculate_pattern(2015)\n    return ans\n\nans = solution()"
    ],
    "ad17dc3f8a494864b760b100079443f6": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            time_str = f\"{hour:02d}{minute:02d}\"\n            if time_str.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "0894ed5b3d6f4b4fb5f060190e4e433a": [
        "def solution():\n    ans = 78 + 263 - 174\n    return ans\n\nans = solution()"
    ],
    "cb33eae512244d56b52f675bb43136e8": [
        "def solution():\n    # Let x be the age of the youngest dwarf\n    # Then the ages of the youngest three would be x, x+1, x+2\n    # Their sum is 3x + 3 = 42\n    # Solving for x gives us the age of the youngest dwarf\n    x = (42 - 3) / 3\n\n    # The age of the oldest one is x + 6 (since there are 7 dwarfs with consecutive ages)\n    age_of_oldest = x + 6\n\n    return age_of_oldest\n\nans = solution()"
    ],
    "90111a213be04afd824d36b70a321040": [
        "def solution():\n    # Each period consists of 2 black balls (●) and 3 white balls (○)\n    period_white_balls = 3\n    white_balls = 92\n    \n    # Calculate full periods completed using the number of white balls\n    full_periods = white_balls // period_white_balls\n    \n    # If white balls don't divide exactly into periods, it means there's a partial period\n    partial_period = white_balls % period_white_balls\n    \n    # In each full period, there are 5 balls (2 black + 3 white)\n    total_balls_full_periods = full_periods * (2 + period_white_balls)\n    \n    # In a partial period, for each white ball, there will be one black ball before it (since they alternate)\n    total_balls_partial_period = 0\n    if partial_period > 0:\n        total_balls_partial_period = partial_period + 1  # Partial periods always start with a black ball\n    \n    # Total balls arranged is sum of balls in full periods and balls in the partial period\n    total_balls = total_balls_full_periods + total_balls_partial_period\n    \n    return total_balls\n\nans = solution()"
    ],
    "0e998f78d8e24e0db196fc058218632c": [
        "def solution():\n    from math import gcd\n\n    ans = gcd(16, 28)\n    return ans\n\nans = solution()"
    ],
    "1d5d5c2cc7ed4484b0ee32dc49820fea": [
        "def solution():\n    pears = 0\n    while True:\n        pears += 1\n        if pears % 6 == 2 and (pears + 3) % 7 == 0:\n            break\n    return pears\n\nans = solution()"
    ],
    "ab6dabced7d2420b96da9161a985e3da": [
        "def solution():\n    remaining_after_first_stop = 22 / (1 - 1/3)\n    initial_passengers = remaining_after_first_stop / (1 - 2/5)\n    return int(initial_passengers)\n\nans = solution()"
    ],
    "6fbfa557708a48f88080cdee949845ca": [
        "def solution():\n    original_length_cm = 10\n    sharpened_shorter_mm = 4\n    shortened_length_cm = original_length_cm - (sharpened_shorter_mm / 10.0)\n    \n    return shortened_length_cm\n\nans = solution()"
    ],
    "1a6a4bcf3e384d149434758e9e9ee954": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    sam, peter, john = symbols('sam peter john')\n\n    # Sam and Peter ratio\n    eq1 = Eq(sam, 7/5 * peter)\n\n    # After giving 20% of stickers to John\n    eq2 = Eq(sam - 0.20 * sam, john + 0.80 * (john + 0.20 * (sam + peter)))\n    \n    # Sam had 20 stickers more than John in the end\n    eq3 = Eq(sam - 0.20 * sam, john + 20)\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (sam, peter, john))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "e8a7cdbe9f064caa8845fdc48753ccf2": [
        "def solution():\n    speed1 = 7  # speed for the first 420 meters in meters per second\n    distance1 = 420  # distance for the first part of the race in meters\n    time1 = distance1 / speed1  # time for the first part in seconds\n    \n    speed2 = 5  # speed for the middle 620 meters in meters per second\n    distance2 = 620  # distance for the middle part of the race in meters\n    time2 = distance2 / speed2  # time for the middle part in seconds\n    \n    # The last distance can be calculated by subtracting the first two distances from the total distance\n    distance3 = 1200 - (distance1 + distance2)  # the remaining distance for the sprint stage\n    speed3 = 8  # speed for the last part of the race in meters per second\n    time3 = distance3 / speed3  # time for the last part in seconds\n    \n    # Total time is the sum of times for all three parts\n    total_time = time1 + time2 + time3\n    \n    return total_time\n\nans = solution()"
    ],
    "60f2bc1eec7c407c8a6d23e10fdfedbd": [
        "def solution():\n    current_total = 4 * 89\n    target_average = 95\n    additional_test = 0\n    \n    while True:\n        additional_test += 1\n        total_tests = 4 + additional_test\n        new_total = current_total + 100 * additional_test\n        new_average = new_total / total_tests\n        if new_average >= target_average:\n            break\n            \n    return additional_test\n\nans = solution()"
    ],
    "53f089451f8842afb473055ab5d608e1": [
        "def solution():\n    days = 4\n    meters_per_day = 75\n    total_length = days * meters_per_day\n    return total_length\n\nans = solution()"
    ],
    "289652248f414fe9bbafc2f88b401174": [
        "def solution():\n    # There are 3 colors, so if we take out 1 from each color, we have 3 markers.\n    # If we take out one more, it is guaranteed to be the same color as one we already took out.\n    markers_needed = 3 + 1\n    \n    return markers_needed\n\nans = solution()"
    ],
    "d1e1ebce0b4843ca9292e8dbdda01d4d": [
        "def solution():\n    a7 = 105  # 7th term\n    a8 = 120  # 8th term\n    a9 = 135  # 9th term\n\n    # Calculate the common difference\n    d = a8 - a7\n\n    # Calculate the n-th term of the arithmetic sequence\n    a100 = a7 + (100 - 7) * d  # a_n = a_1 + (n - 1) * d\n    return a100\n\nans = solution()"
    ],
    "7463bf137d564fbabe4d8eb8c8c7ee34": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of $10 notes and y be the number of $2 notes\n    x, y = symbols('x y')\n\n    # Total number of notes\n    equation1 = Eq(x + y, 72)\n\n    # Number of notes left after spending\n    # David spent 90% of $10 notes and 75% of $2 notes\n    # He is left with 10% of $10 notes and 25% of $2 notes\n    # He has twice as many $10 notes as $2 notes left\n    equation2 = Eq(0.1 * x, 2 * 0.25 * y)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Calculate how much was spent (total sum of the notes - the sum of the remaining notes)\n    spent_tens = solutions[x] * 10 * 0.9\n    spent_twos = solutions[y] * 2 * 0.75\n    gift_cost = spent_tens + spent_twos\n\n    return gift_cost\n\nans = solution()"
    ],
    "8c1bb4f017184cbfae594c5cfaf4d059": [
        "def solution():\n    # 1/A is the work rate of hose A\n    # 1/B is the work rate of hose B\n    # 1/C is the work rate of hose C\n    # The sum of their rates is the rate at which they fill the pool together.\n\n    # Let's find the individual work rates:\n    # 1/A + 1/B = 1/9\n    # 1/A + 1/C = 1/12\n    # 1/B + 1/C = 1/18\n\n    # We can solve the system of equations for 1/A, 1/B, and 1/C:\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq(1/A + 1/B, 1/9)\n    equation2 = Eq(1/A + 1/C, 1/12)\n    equation3 = Eq(1/B + 1/C, 1/18)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    # Rate when all three hoses are turned on\n    rate_all_hoses = 1 / solutions[A][0] + 1 / solutions[B][0] + 1 / solutions[C][0]\n\n    # Time taken to fill the pool when all three hoses are turned on\n    time_to_fill = 1 / rate_all_hoses\n\n    return time_to_fill\n\nans = solution()"
    ],
    "b6319f96909f43389019a555f34399dc": [
        "def solution():\n    # Let x be the number of $2 notes and y be the number of $5 notes.\n    # We have two equations:\n    # x + y = 58 (since there are 58 notes in total)\n    # 2x + 5y = 164 (since the total value of the notes is $164)\n    \n    # We will use algebra to solve the system of equations.\n    # From the first equation, we can express x in terms of y: x = 58 - y.\n    # Substitute x in the second equation:\n    # 2(58 - y) + 5y = 164\n    # 116 - 2y + 5y = 164\n    # 3y = 164 - 116\n    # 3y = 48\n    # y = 48 / 3\n    y = 48 // 3  # Use integer division since we can't have a fraction of a note.\n\n    return y\n\nans = solution()"
    ],
    "fc35d0defe2942ffad92505706ccc8ee": [
        "def solution():\n    # Start with 2 marbles in one box\n    # Since 10 boxes must have at least 2 marbles and two boxes have the same number,\n    # we start counting from 2 for 9 boxes and then repeat the count for one of the boxes.\n    # Since the number of marbles must be even (multiple of 2), we use even numbers.\n    marbles = [2 * i for i in range(1, 10)]\n    # Add the smallest number (2 marbles) again for the 10th box which has the same amount\n    marbles.append(2)\n    # Calculate the sum of all marbles\n    total_marbles = sum(marbles)\n    return total_marbles\n\nans = solution()"
    ],
    "cc22edf7a7fd4aa79216b432dcbeac61": [
        "def solution():\n    a = (14 - 8) / 3\n    return a\n\nans = solution()"
    ],
    "e2673569a0b943b292503bf53ce7b3a2": [
        "def solution():\n    ans = 894 // 3\n    return ans\n\nans = solution()"
    ],
    "3ec3a596e66c4dfcb4ea91b63a5bf969": [
        "def solution():\n    # Total money spent on cupcakes: $187.50\n    # Money spent on the first batch of cupcakes: 5/9 of total expenditure\n    # Fraction of money spent on additional cupcakes: 1/6 of total expenditure\n    # Let's find the total expenditure first.\n    total_money = 187.50 / (5/9 + 1/6)\n\n    # Now, considering the first batch (5/9 of her money):\n    # Price for 36 cupcakes + price for 32 muffins = 5/9 of the total money\n    # Let cupcake price be 3x and muffin price be x.\n    # Then, 36 * 3x + 32 * x = 5/9 * Total amount.\n    # After finding x, we'll find the expenditure on muffins: 32 * x.\n    # Solve for x:\n    money_spent_initially = (5/9) * total_money  # Money spent initially on both cupcakes and muffins\n    x = money_spent_initially / ((36 * 3) + 32)\n    money_spent_on_muffins = 32 * x\n\n    return money_spent_on_muffins\n\nans = solution()"
    ],
    "a7840b9a2b4b4d80bcfb1955e50dedb1": [
        "def solution():\n    # Generate the sequence as per the question\n    sequence = list(range(1, 10)) + list(range(8, 3, -1))\n    \n    # Calculate the sum of the sequence\n    ans = sum(sequence)\n    \n    return ans\n\nans = solution()"
    ],
    "eab847de393a4cc89be122fdacf06c1b": [
        "def solution():\n    total_pigeons = 75\n    total_cages = 20\n\n    # Simple Pigeonhole Principle states that at least one cage must have\n    # ceil(total_pigeons / total_cages) pigeons\n    pigeons_in_most_populated_cage = (total_pigeons + total_cages - 1) // total_cages\n\n    return pigeons_in_most_populated_cage\n\nans = solution()"
    ],
    "4f9c4a2d52664632815cca87ff3639cd": [
        "def solution():\n    # Number of sprinklers is always one less than the number of parterres\n    parterres = 1007\n    sprinklers = parterres - 1\n    return sprinklers\n\nans = solution()"
    ],
    "13b735246ec440b287eb3433e89d8de3": [
        "def solution():\n    papaya_mass = 2 + 1/4\n    jackfruit_mass = 3 * papaya_mass\n    total_mass = papaya_mass + jackfruit_mass\n    \n    return total_mass\n\nans = solution()"
    ],
    "df5ddf6fab1640afbbe79fdc2c9c6b0d": [
        "def solution():\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    current_steps = 1991\n    \n    while True:\n        current_steps += 1\n        if is_palindrome(current_steps):\n            return current_steps - 1991\n\nans = solution()"
    ],
    "f621eb20ae1b443e9decb28c81cacff9": [
        "def solution():\n    return (387 + 729) // 2\n\nans = solution()"
    ],
    "8f05ca5aac6947c0a578b4f78816fdeb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_length = symbols('total_length')\n    first_day = 8\n    second_day = total_length / 6 + 4\n\n    eq = Eq(first_day + second_day, total_length * 5 / 12)\n    ans = solve(eq, total_length)\n\n    return ans[0]\n\nans = solution()"
    ],
    "411dbd979ec64b9198f41e36f93de415": [
        "from itertools import permutations\n\ndef solution():\n    digits = [3, 4, 5]\n    perm = permutations(digits, 3)  # Generate all permutations of the given digits\n    count = len(list(perm))  # Count the number of unique permutations\n    return count\n\nans = solution()"
    ],
    "dbcf24f4b4254940a364df67ea2a66dd": [
        "def solution():\n    fraction_left = 5/9\n    bottle_caps_given = 440\n\n    bottle_caps_initial = bottle_caps_given / (1 - fraction_left)\n\n    return int(bottle_caps_initial)\n\nans = solution()"
    ],
    "7b38d775bba24657ba681d25822af411": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the unknowns\n    marry_initial, alexis_initial, charlotte_initial = symbols('marry_initial alexis_initial charlotte_initial')\n    \n    # Marry had 7/5 times the number of stickers Alexis had initially\n    eq1 = Eq(marry_initial, (7/5) * alexis_initial)\n    \n    # Marry and Alexis each gave 20% of their stickers to Charlotte\n    marry_gave = 0.20 * marry_initial\n    alexis_gave = 0.20 * alexis_initial\n    \n    # Charlotte's stickers increased by 80%\n    charlotte_final = charlotte_initial + marry_gave + alexis_gave\n    eq2 = Eq(charlotte_final, charlotte_initial + 0.80 * charlotte_initial)\n\n    # Mary had 20 stickers more than Charlotte in the end\n    eq3 = Eq(marry_initial - marry_gave, charlotte_final + 20)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (marry_initial, alexis_initial, charlotte_initial))\n    \n    return solutions[alexis_initial]\n\nans = solution()"
    ],
    "a6f199354188491987e033f7760fc3d5": [
        "def solution():\n    # Total perimeter of the field\n    perimeter = 2 * (144 + 204)\n    \n    # The number of intervals is 4 less than the number of wheat because each corner has a wheat\n    # Four corners mean we subtract 4 wheat to get the intervals\n    intervals = 116 - 4\n    \n    # Distance between every 2 wheat is the perimeter divided by the number of intervals\n    distance = perimeter / intervals\n    \n    return distance\n\nans = solution()"
    ],
    "3722f385e5304408b4bd51d4538ed104": [
        "def solution():\n    i = 1\n    while True:\n        number = 35 * i\n        if str(number).endswith('35') and sum(int(digit) for digit in str(number)) == 35:\n            return number\n        i += 1\n\nans = solution()"
    ],
    "ee9f3d0764634811a0757f003abad19d": [
        "def solution():\n    heights = [102, 98, 120, 80]\n    average_height = sum(heights) / len(heights)\n    return average_height\n\nans = solution()"
    ],
    "2c1659a425074c80b8d88dda965c59d5": [
        "def solution():\n    total_pine_nuts = 112\n    total_days = 8\n\n    # Let rainy_days be the number of rainy days\n    # Then sunny_days will be total_days - rainy_days\n    for rainy_days in range(total_days + 1):\n        sunny_days = total_days - rainy_days\n        if (sunny_days * 20 + rainy_days * 12) == total_pine_nuts:\n            return rainy_days\n\nans = solution()"
    ],
    "c53620b9ca634a889e36b3bf16163ca2": [
        "def solution():\n    # Define the costs in pence\n    cost_1_bottle = 15\n    cost_2_bottles = 28\n    cost_5_bottles = 60\n\n    # Calculate the minimum amount of money spent for 17 bottles\n    # Since packs of 5 are the cheapest per bottle, buy as many as possible, then packs of 2, then single bottles\n    num_packs_of_5 = 17 // 5\n    remaining_bottles = 17 % 5\n    num_packs_of_2 = remaining_bottles // 2\n    remaining_bottles = remaining_bottles % 2\n    num_single_bottles = remaining_bottles\n\n    # Calculate total cost\n    total_cost_pence = (num_packs_of_5 * cost_5_bottles) + (num_packs_of_2 * cost_2_bottles) + (num_single_bottles * cost_1_bottle)\n    \n    # Convert the total cost to pounds\n    total_cost_pounds = total_cost_pence / 100\n\n    return total_cost_pounds\n\nans = solution()"
    ],
    "a0d71a6e29644023a0cc17a608bc01dc": [
        "def solution():\n    # In a knockout tournament, each round eliminates half of the players.\n    # With 4 people, it would take two rounds to determine a winner:\n    # - In the first round, 4 players play 2 games, resulting in 2 winners.\n    # - In the second round, the 2 winners from the first round play 1 game to determine the overall winner.\n    return 2\n\nans = solution()"
    ],
    "f994d8dfd7f44217b9637c5e8ba447d8": [
        "def solution():\n    first_question_correct = 10\n    second_question_correct = 15\n    both_questions_correct = 7\n\n    # To find those who can only answer one question correctly, subtract those who\n    # answered both correctly from the individual totals, then add those two results together.\n    only_one_correct = (first_question_correct - both_questions_correct) + (second_question_correct - both_questions_correct)\n    \n    return only_one_correct\n\nans = solution()"
    ],
    "daccc8a42fc0479db52cec10235601e6": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime(\"4/4/2023\", \"%d/%m/%Y\")\n    end_date = datetime.strptime(\"18/5/2023\", \"%d/%m/%Y\")\n    \n    days_off = (end_date - start_date).days + 1  # Including both start and end dates\n\n    return days_off\n\nans = solution()"
    ],
    "3059ea77d08247578ee3a70a3f475405": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r be the number of candies Rachel has and a be the number of candies Alice has\n    r, a = symbols('r a')\n\n    # If Rachel gives Alice 10 pieces, they have the same amount: r - 10 = a + 10\n    equation1 = Eq(r - 10, a + 10)\n\n    # If they eat 8 pieces each, Rachel has 3 times more than Alice: (r - 8) = 3 * (a - 8)\n    equation2 = Eq(r - 8, 3 * (a - 8))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (r, a))\n\n    # Calculate the total sum of candies they originally had\n    total = solutions[r] + solutions[a]\n\n    return total\n\nans = solution()"
    ],
    "4f3b48792a094028b1bc267e22a30835": [
        "def solution():\n    speed = 42  # speed of the train in m/s\n    time = 5    # time in seconds to pass the tree\n\n    length_of_train = speed * time  # distance = speed * time\n    \n    return length_of_train\n\nans = solution()"
    ],
    "47562186606a4d038d9527452b08ffc2": [
        "def solution():\n    fib_sequence = [1, 1]\n    while len(fib_sequence) < 8:\n        next_fib = fib_sequence[-1] + fib_sequence[-2]\n        fib_sequence.append(next_fib)\n    return fib_sequence[-1]\n\nans = solution()"
    ],
    "bfacb76c25624bfc8d5d2c06215023ad": [
        "def solution():\n    # Define the basic operation without any brackets\n    def calculate():\n        return 285 + 15 / 5 - 2\n\n    # Collect all unique results in a set to avoid duplicates\n    results = set()\n\n    # Insert one pair of brackets in various positions\n    results.add((285 + 15) / 5 - 2)\n    results.add(285 + (15 / 5 - 2))\n    results.add(285 + 15 / (5 - 2))\n\n    # Insert two pairs of brackets in various positions\n    # Since we only have three operation signs, and one of the operations is division,\n    # there's only one way to insert two pairs of brackets that makes sense for different result\n    results.add((285 + 15) / (5 - 2))\n\n    return len(results)\n\nans = solution()"
    ],
    "5907fd55c3fc43edb065e669513c11e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    first_hour, second_hour = symbols('first_hour second_hour')\n    total_mushrooms = 40\n    extra_mushrooms_first_hour = 26\n\n    # Equations\n    equation1 = Eq(first_hour + second_hour, total_mushrooms)\n    equation2 = Eq(first_hour + extra_mushrooms_first_hour, second_hour)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (first_hour, second_hour))\n\n    return solutions[second_hour]\n\nans = solution()"
    ],
    "5e3f58e8aa7b463281a06313c58c9dfc": [
        "def solution():\n    towel_price = 10\n    brush_price = 3\n    total_spent = 59\n    brushes = 0\n\n    while brush_price * brushes < 10:\n        if (total_spent - brush_price * brushes) % towel_price == 0:\n            return brushes\n        brushes += 1\n\nans = solution()"
    ],
    "1f65bc2d548c462284458547726c98be": [
        "def solution():\n    final_number = 71\n    multiplier = 7\n    addition = 8\n\n    original_number = (final_number - addition) / multiplier\n\n    return original_number\n\nans = solution()"
    ],
    "2a082a4e041f4b3e973245a4c33b3b27": [
        "from fractions import Fraction\n\ndef solution():\n    return Fraction('0.49').limit_denominator()\n\nans = solution()"
    ],
    "2032d412937a4167a615ecb8aa60b3ea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rick, morty = symbols('rick morty')\n\n    equation1 = Eq(rick - 70, morty + 70 + 20)\n    equation2 = Eq(rick, 9 * morty)\n\n    solutions = solve((equation1, equation2), (rick, morty))\n\n    return solutions[rick]\n\nans = solution()"
    ],
    "f60e137f7250477d8b286d3f212c854b": [
        "def solution():\n    total_days = 5\n    total_bears = 35\n    # Using formula for arithmetic sequence sum: n/2 * (2a + (n-1)d) = total_bears\n    # where n is the number of terms (days), a is the first term, and d is the common difference (2 bears per day)\n    # We have to find a and the last term.\n    \n    # Because we know total_bears and total_days, and the difference (2 more bears each day), we can find the first term.\n    # Let's denote the first day's bears number as 'a'.\n    # n/2 * (2a + (n-1)d) = total_bears\n    # 5/2 * (2a + (5-1)*2) = 35\n    # Simplify to solve for 'a':\n    # 5 * (a + 2*2) = 35\n    # 5a + 20 = 35 => 5a = 15 => a = 3\n    first_day_bears = (total_bears - total_days * (total_days - 1)) // total_days\n    # The number of bears she made on the fifth (last) day is:\n    fifth_day_bears = first_day_bears + (total_days - 1) * 2\n    return fifth_day_bears\n\nans = solution()"
    ],
    "66a11fd054514f65b3baf9ede59874a5": [
        "def solution():\n    ans = 262 + 8\n    return ans\n\nans = solution()"
    ],
    "49922fe7ff9a40c38d907ed0e51522ca": [
        "def solution():\n    miles_per_day = 23\n    days_in_two_weeks = 14\n    total_miles = miles_per_day * days_in_two_weeks\n    return total_miles\n\nans = solution()"
    ],
    "c762956fba3241bd967d57b33577e2de": [
        "def solution():\n    count = 0\n    for hundred in [1, 8]:  # Hundred's place cannot be 0\n        for ten in [0, 1, 8]:\n            if ten == hundred:  # Ten's place must be different from hundred's place\n                continue\n            for one in [0, 1, 8]:\n                if one == hundred or one == ten:  # One's place must be different from the other two\n                    continue\n                count += 1  # If unique, increment count\n    return count\n\nans = solution()"
    ],
    "a329051d839b463a826c9d78e15a0b08": [
        "def solution():\n    pink = 9\n    grey = 7\n    # To ensure a blue marble, we need to consider worst-case situations for the other colors.\n    # We can draw all pink and grey marbles without getting a blue one.\n    # So, one more draw after that will ensure that we get a blue one.\n    draws_without_blue = pink + grey\n    # The next draw must be a blue marble if all previous ones were not.\n    ans = draws_without_blue + 1\n    return ans\n\nans = solution()"
    ],
    "f9992ec9b0a34d969a70763f33c68a29": [
        "def solution():\n    sales_tax_rate = 7.5 / 100\n    sales_tax_paid = 30\n\n    price_of_computer = sales_tax_paid / sales_tax_rate\n\n    return price_of_computer\n\nans = solution()"
    ],
    "39ac38c32dc74df58ea6b0d18c06ad13": [
        "from math import gcd\nfrom itertools import permutations\n\ndef solution():\n    count = 0\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8]\n    for perm in permutations(numbers):\n        coprime_adjacent = all(gcd(perm[i], perm[i+1]) == 1 for i in range(len(perm)-1))\n        if coprime_adjacent:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "aa18065f01ed471dbddb2b83716b2ed7": [
        "def solution():\n    part = 3/10\n    whole = 6/7\n    percentage = (part / whole) * 100\n    return percentage\n\nans = solution()"
    ],
    "7c10a4083da5483c963882fa31bda8ad": [
        "def solution():\n    ans = 300 - 9 - 19 - 29 - 39 - 49 - 59\n    return ans\n\nans = solution()"
    ],
    "1db0cce1e16144579673d8e8a9fc0654": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    \n    # boys = girls - 30\n    equation1 = Eq(boys, girls - 30)\n    # (3/5)boys left, so (2/5)boys remained\n    # (5/8)girls left, so (3/8)girls remained\n    # (2/5)boys = (3/8)girls\n    equation2 = Eq(2/5 * boys, 3/8 * girls)\n    \n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    return solutions[boys]\n\nans = solution()"
    ],
    "304401f32f204704929d05f5f2f6f8b4": [
        "def solution():\n    # Define original number of frogs and dragonflies\n    original_frogs, original_dragonflies = symbols('original_frogs original_dragonflies')\n    \n    # Equation representing the initial condition\n    equation1 = Eq(original_frogs, original_dragonflies + 9)\n    # Equation representing the final condition\n    equation2 = Eq(original_frogs - (11-10), original_dragonflies + (11-10))\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (original_frogs, original_dragonflies))\n    \n    return solutions[original_frogs]\n\nans = solution()"
    ],
    "3e007fd230a249ff8d05a19fcfe583ba": [
        "def solution():\n    expressions = [\n        '285+(15/5)-2',\n        '(285+15)/5-2',\n        '(285+15/(5-2))',\n        '285+(15/(5-2))',\n        '285+15/(5-2)',\n        '(285+15/5)-2',\n        '285/15+5-2',\n        '(285/15+5)-2',\n        '285/(15+5)-2',\n        '285/(15+(5-2))',\n        '285/15+(5-2)',\n        '285/15+(5)-2',\n        '(285/15+5)-2',\n        '285/(15+5)-2',\n        '(285/15)+(5-2)',\n        '(285/15+5)-2',\n        '285/(15+5-2)'\n    ]\n    \n    results = set()\n    for expr in expressions:\n        try:\n            result = eval(expr)\n            results.add(result)\n        except ZeroDivisionError:\n            pass  # Ignore divisions by zero\n    \n    return len(results)\n\nans = solution()"
    ],
    "e7ddf473a2ae4816b3668ad9956ebcfa": [
        "def solution():\n    for i in range(0, 25):\n        if (24 - i) // 4 == 4:\n            return i\n\nans = solution()"
    ],
    "d17c4969cf134fab95adbf60e4d9650c": [
        "def solution():\n    amy_apples = 26\n    john_apples = 8\n    apples_to_give = (amy_apples - john_apples) // 2\n    return apples_to_give\n\nans = solution()"
    ],
    "d188d39b891542928d1912e7274a2caa": [
        "def solution():\n    # Initialize the result to 0\n    result = 0\n\n    # Iterate over the range 1 to 100 with step size of 2\n    for i in range(1, 101, 2):\n        # Add the even number and subtract the odd number\n        result += (i+1) - i\n\n    return result\n\nans = solution()"
    ],
    "eb34430f7cb249a8a572783eee511d5a": [
        "def solution():\n    jack_cards = 42\n    tom_cards = 38\n    james_cards = 3 * (jack_cards + tom_cards)\n    \n    return james_cards\n\nans = solution()"
    ],
    "d7ded10e6b6742babab86ac9a55feb15": [
        "def solution():\n    return 11.38 / 100\n\nans = solution()"
    ],
    "142a0e7cf7264398809cd19740d822d4": [
        "def solution():\n    ans = 9678 * 8\n    return ans\n\nans = solution()"
    ],
    "c475b1643de744428b44276a9212a842": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let A, B, C represent the work rate (job/hour) of worker A, B, and C, respectively\n    A, B, C = symbols('A B C')\n\n    # Equation 1: A and B together finish the job in 3 hours -> (A+B)*3 = 1 job\n    equation1 = Eq((A + B) * 3, 1)\n\n    # Equation 2: B and C together finish the job in 4 hours -> (B+C)*4 = 1 job\n    equation2 = Eq((B + C) * 4, 1)\n\n    # Equation 3: A and C together finish the job in 8 hours -> (A+C)*8 = 1 job\n    equation3 = Eq((A + C) * 8, 1)\n\n    # Solve equations to find individual work rates of A, B and C\n    rates = solve((equation1, equation2, equation3), (A, B, C))\n\n    # Calculate total rate when A, B and C work together: A + B + C\n    total_rate = rates[A] + rates[B] + rates[C]\n\n    # Time taken when all three work together is the reciprocal of the total rate\n    total_time = 1 / total_rate\n\n    return total_time.evalf()\n\nans = solution()"
    ],
    "063df5600f0440a196ad7fccf9a7bf8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    johnson, vicky = symbols('johnson vicky')\n    equation1 = Eq(johnson + vicky, 48)\n    equation2 = Eq(vicky + 8, johnson - 2)\n\n    solutions = solve((equation1, equation2), (johnson, vicky))\n\n    return solutions[johnson]\n\nans = solution()"
    ],
    "5474f73e5ab6431890df2e54e821b742": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for the amount of 15% sugar water (in kg)\n    x = symbols('x')\n\n    # Equation representing the total sugar from both solutions, set equal to sugar in final mixture\n    equation = Eq((2 * 0.45) + (x * 0.15), (2 + x) * 0.25)\n\n    # Solve for x\n    amount = solve(equation, x)\n\n    return amount[0]\n\nans = solution()"
    ],
    "7b23b760c2484da8af4bc6eead1035fc": [
        "def solution():\n    boys = 42\n    boys_to_girls_ratio = 3 / 2\n    girls = boys / boys_to_girls_ratio\n    return girls\n\nans = solution()"
    ],
    "300d9dec8c7842cfa4010c28ded862c2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote x as the number of kids and y as the number of candies.\n    x, y = symbols('x y')\n    \n    # Equation 1: If each kid eats 18 candies, we need 12 more to distribute, so: 18x + 12 = y\n    equation1 = Eq(18 * x + 12, y)\n    \n    # Equation 2: If each kid eats 15 candies, then it is just enough for x + 2 kids, so: 15(x + 2) = y\n    equation2 = Eq(15 * (x + 2), y)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[y]\n\nans = solution()"
    ],
    "0cfb180ff80343978b552cedc1149839": [
        "def solution():\n    # Since we know the sequence of operations performed on the number,\n    # we can reverse the operations to find the original number.\n    \n    # We start by reversing the multiplication by 7\n    result_after_addition = 77 // 7\n    \n    # Then we reverse the addition of 6\n    original_number = result_after_addition - 6\n    \n    return original_number\n\nans = solution()"
    ],
    "0774e88f23d347fc960a7df67aa5cea5": [
        "def solution():\n    # Calculating each number in the series and summing them up\n    total_sum = 0\n    for i in range(1, 2018):\n        total_sum += int('2' * i)\n\n    # Converting the sum to a string and getting the last 5 characters\n    last_5_digits = str(total_sum)[-5:]\n\n    # Converting the last 5 characters to integer and returning the sum of those digits\n    ans = sum(map(int, last_5_digits))\n    return ans\n\nans = solution()"
    ],
    "699981dcd6d84d42b6e018723ba6a619": [
        "def solution():\n    ans = 297 + 196 + 388 + 199\n    return ans\n\nans = solution()"
    ],
    "7e9903ea9c5d4ad4b4d9e47668802818": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, eugene = symbols('david eugene')\n    equation1 = Eq(david, 3 * eugene)\n    equation2 = Eq(david, eugene + 14)\n\n    solutions = solve((equation1, equation2), (david, eugene))\n\n    return sum(solutions.values())\n\nans = solution()"
    ],
    "3d69ea36244c47f49f012029d94f587c": [
        "def solution():\n    total_cost = 11.4\n    total_weight = 0.6\n    cost_per_kilogram = total_cost / total_weight\n    return cost_per_kilogram\n\nans = solution()"
    ],
    "f1a2fc61d2954912aabcdce67bec8fd1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sam, tim = symbols('sam tim')\n\n    # Sam and Tim had 1170 cookies.\n    equation1 = Eq(sam + tim, 1170)\n    # After Sam ate 1/4 of her cookies\n    sam_after_eating = sam - sam/4\n    # Tim bought 1/5 more cookies\n    tim_after_buying = tim + tim/5\n    # Sam had 663 fewer cookies than Tim\n    equation2 = Eq(sam_after_eating, tim_after_buying - 663)\n\n    solutions = solve((equation1, equation2), (sam, tim))\n\n    # Number of cookies Sam ate is 1/4 of what she initially had\n    cookies_eaten_sam = solutions[sam] / 4\n\n    return cookies_eaten_sam\n\nans = solution()"
    ],
    "b4f91c464064460aa19ddf1c6a62ab91": [
        "def solution():\n    kilograms_per_six_days = 24\n    days_to_calculate = 8\n\n    kilograms_per_day = kilograms_per_six_days / 6\n    total_kilograms = kilograms_per_day * days_to_calculate\n\n    return total_kilograms\n\nans = solution()"
    ],
    "a02bf655141845c2bd2c46d349316684": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 2), (1, 3), (1, 4), (1, 6), (0, 7)]\n    solution, _ = solve_congruence(*congruences)\n    # As the number has to be between 200 and 300, we add multiples of the LCM of 2,3,4,6 until we are in this range\n    lcm = 2 * 3 * 4 * 6 // 2  # LCM by prime factorization = 2*3*4 (2 is common in 4 and 6)\n    while solution < 200:\n        solution += lcm\n    return solution\n\nans = solution()"
    ],
    "5bd506abd39a478abeb0aa9d9fdb559b": [
        "def solution():\n    # Let x be the number of stamps Sally gave to Ting\n    # After giving x stamps, Sally has (40 - x) stamps\n    # After receiving x stamps, Ting has (32 + x) stamps\n    # The ratio of Sally's stamps to Ting's stamps is 1:2\n    # (40 - x) / (32 + x) = 1 / 2\n    # Solving for x will give us the number of stamps Sally gave to Ting\n    # Once we get x, we can then calculate how many stamps Ting had in the end\n    \n    # Solve for x: (40 - x) = 1/2 * (32 + x)\n    # Multiply both sides by 2 to clear the fraction:\n    # 2 * (40 - x) = 32 + x\n    # 80 - 2x = 32 + x\n    # Bring like terms together:\n    # 80 - 32 = 2x + x\n    # 48 = 3x\n    # Divide both sides by 3 to get the value of x:\n    # x = 48 / 3\n    # x = 16\n    \n    x = 48 / 3\n\n    # Now we can calculate the number of stamps Ting has in the end\n    final_stamps_ting = 32 + x\n    \n    return final_stamps_ting\n\nans = solution()"
    ],
    "c9845a2160b54fd095573f962d57e562": [
        "def solution():\n    # Jerry's rate of work (envelopes per hour)\n    jerry_rate = 1 / 18\n    \n    # Tom and Jerry's combined rate of work\n    combined_rate = 1 / 6\n    \n    # Tom's rate of work\n    tom_rate = combined_rate - jerry_rate\n    \n    # Time it takes for Tom to do the job by himself\n    tom_time = 1 / tom_rate\n    \n    return tom_time\n\nans = solution()"
    ],
    "e308e1fd22e34cdb9709c55c86942efe": [
        "def solution():\n    sissy_candy = 9\n    lily_candy = 7\n    total_candy = sissy_candy + lily_candy\n    return total_candy\n\nans = solution()"
    ],
    "3626f191924141a1b2eafb54a9e067f3": [
        "def solution():\n    # Calculate the maximum number of packets that can be bought with $20.\n    # Since each packet costs $4, $20 can buy 20//4 = 5 packets.\n    packets = 20 // 4\n    \n    # For every two packets bought, one sweet is given free.\n    # Calculate the number of free sweets.\n    free_sweets = packets // 2\n    \n    # Calculate the total number of sweets that can be obtained, \n    # which is 8 sweets per packet plus the free sweets.\n    total_sweets = (packets * 8) + free_sweets\n    \n    return total_sweets\n\nans = solution()"
    ],
    "24fc3628e5b54a6b862cebd30089e10d": [
        "def solution():\n    # The least possible number a child can get is 1 piece of candy\n    # Hence, to minimize the number for the child who gets the most,\n    # we should distribute the candies in a strictly increasing fashion\n    # starting from 1. This means the distribution should be like this:\n    # 1, 2, 3, ..., n where n is the number of candies for the child who\n    # gets the most\n\n    # To find the minimum n, we keep distributing candies in the above\n    # pattern until we run out of candies to distribute\n\n    candies = 88\n    children = 8\n    allocated_candies = 0\n    for i in range(1, children):\n        allocated_candies += i\n    # Now the remaining candies are for the last child\n    most_candies = candies - allocated_candies\n    return most_candies\n\nans = solution()"
    ],
    "7082213a798d483d975ec38c9264a87a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # time spent walking at the initial speed (in minutes)\n    t1 = symbols('t1')\n    # time spent walking at the increased speed (in minutes)\n    t2 = symbols('t2')\n\n    # first 10 minutes walking at a speed of 150m/min\n    distance1 = 10 * 150\n    # distance covered at initial speed (excluding the first 10 minutes)\n    distance_initial_speed = 150 * (t1 - 10)\n    # distance covered at increased speed\n    distance_increased_speed = (150 + 50) * t2\n\n    # total distance\n    total_distance = Eq(distance1 + distance_initial_speed + distance_increased_speed, 3700)\n    # total time spent walking (excluding the first 10 minutes)\n    total_time = Eq(t1 + t2, t1 + t2)\n\n    # solving the equations\n    solutions = solve((total_distance, total_time), (t1, t2))\n\n    # total time walked in the park is the sum of the times spent at both speeds plus the first 10 minutes\n    total_time_walked = solutions[t1] + solutions[t2] + 10\n\n    return total_time_walked\n\nans = solution()"
    ],
    "6ff1aeeafc744e33a64e02e90286d5c2": [
        "def solution():\n    decimal_number = 0.4 - 1/4\n    return decimal_number\n\nans = solution()"
    ],
    "e7f93b20fa1949a5b96d163190fe511f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    b, g = symbols('b g')  # b for boys and g for girls\n\n    equation1 = Eq(b, 1.4 * g)                   # 40% more boys than girls\n    equation2 = Eq(b - 24, 1.5 * (g - 24))       # 50% more boys than girls after 24 of each left\n\n    solutions = solve((equation1, equation2), (b, g))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "3afd6466bf0841adb2f6d6bd84bf3bad": [
        "def solution():\n    from math import factorial\n\n    fact = factorial(16)\n    fact_str = str(fact)\n\n    count = 0\n    for digit in reversed(fact_str):\n        if digit == '0':\n            count += 1\n        else:\n            break\n\n    return count\n\nans = solution()"
    ],
    "09a7409bcc7b41bab933d472b6cf9c72": [
        "def solution():\n    # We are looking for the worst-case scenario.\n    # We can consider the worst case when Cindy takes out one sock of each color, so:\n    # - After taking out 3 socks there would be no pair,\n    # - After taking out 6 socks (3 more), there will be at least 1 pair,\n    # - We must ensure we take a pair of a second color, since we can already have a pair from the first.\n    # Taking one more of each of the remaining two colors (2 socks),\n    # she will have taken out 8 socks in the worst case scenario.\n    # If she takes one more (the 9th sock), then she must have 2 pairs of at least one color.\n    ans = 9\n    return ans\n\nans = solution()"
    ],
    "ec10bd49f8c6457cb449008b7df6d3b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cupcakes, muffins = symbols('cupcakes muffins')\n\n    # At first, the number of cupcakes is the same as the number of muffins\n    initial_condition = Eq(cupcakes, muffins)\n\n    # 60 cupcakes and 12 muffins were sold\n    sold_condition = Eq(muffins - 12, 2 * (cupcakes - 60))\n\n    # Solve the system of equations\n    solutions = solve((initial_condition, sold_condition), (cupcakes, muffins))\n\n    # The total number at first is the sum cupcakes and muffins\n    total_initial = solutions[cupcakes] + solutions[muffins]\n\n    return total_initial\n\nans = solution()"
    ],
    "424f5f08f14e449d86908c4063ea4d54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(5 * x + 7, 47)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "02ae9d804ee04428807ccf0347735e1f": [
        "def solution():\n    # original number of counters\n    pink = 5\n    purple = 7\n    orange = 8\n    \n    # original total counters\n    total_counters = pink + purple + orange\n    \n    # original probability of pink\n    original_probability = pink / total_counters\n    \n    # target probability of pink, which is double the original probability\n    target_probability = 2 * original_probability\n    \n    # using the target probability\n    # let x be the number of extra pink counters needed\n    # (pink + x) / (total_counters + x) = target_probability\n    # to understand how many extra counters should she add we can solve for x:\n    # (pink + x) = target_probability * (total_counters + x)\n    # pink + x = 2 * pink / total_counters * (total_counters + x)\n    # pink + x = (2 * pink + 2 * pink * x / total_counters)\n    # x - (2 * pink * x / total_counters) = pink\n    # x * (1 - 2 * pink / total_counters) = pink\n    # x = pink / (1 - 2 * pink / total_counters)\n    \n    x = pink / (1 - target_probability)\n    \n    return int(x)\n\nans = solution()"
    ],
    "d27388e49bb147658b5c5f6726146dbd": [
        "def solution():\n    shanghai_to_los_angels_time = 12.25  # hours\n    additional_time = 90 / 60  # 90 minutes to hours\n    los_angels_to_shanghai_time = shanghai_to_los_angels_time + additional_time\n\n    round_trip_time = shanghai_to_los_angels_time + los_angels_to_shanghai_time\n\n    return round_trip_time\n\nans = solution()"
    ],
    "460949f85e3c4effbfebde69b6a70325": [
        "def solution():\n    ans = 278 + 127\n    return ans\n\nans = solution()"
    ],
    "28ed05faea8a41e59403eb56b72c9a55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote Helen's pocket money as 'h' and George's as 'g'\n    # George receives $3 more pocket money than Helen every day\n    h, g = symbols('h g')\n    equation1 = Eq(g, h + 3)\n\n    # Each of them spends $5 a day\n    # So, daily savings are 'h-5' for Helen and 'g-5' for George\n\n    # Helen saves $60 in total\n    # Let's say 't' is the time it takes for Helen to save $60\n    t = symbols('t')\n    equation2 = Eq((h - 5) * t, 60)\n\n    # When Helen saves $60, George saves $90 more than Helen\n    equation3 = Eq((g - 5) * t, 60 + 90)\n\n    # Now we solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (h, g, t))\n\n    return solutions[h]\n\nans = solution()"
    ],
    "76b97ba68b034e2aabd4b14679196416": [
        "def solution():\n    ans = sum(range(1, 31)) + sum(range(1, 30))\n    return ans\n\nans = solution()"
    ],
    "68de1a3c2c7a42e5878f6678167e988b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    eddi, wiya = symbols('eddi wiya')\n    \n    # Initial ratio condition\n    equation1 = Eq(eddi/wiya, 3/2)\n    \n    # New ratio condition after Eddi receives $4 from Lisa\n    equation2 = Eq((eddi+4)/wiya, 8/5)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (eddi, wiya))\n    \n    return solutions[wiya]\n\nans = solution()"
    ],
    "47b5be5fc2a54717be3e247384b899b4": [
        "def solution():\n    total_students = 37\n    sport_class_students = 18\n    reading_class_students = 22\n    \n    # Applying the inclusion-exclusion principle\n    both_classes_students = sport_class_students + reading_class_students - total_students\n    \n    return both_classes_students\n\nans = solution()"
    ],
    "4432e80fba244f3683780a9b58ec36db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, d = symbols('a d')  # a is the first term, and d is the common difference\n\n    # Relation between 9th term and 15th term\n    equation1 = Eq(a + 8 * d, (a + 14 * d) + 18)\n\n    # Relation between sum of 20th and 12th terms\n    equation2 = Eq((a + 19 * d) + (a + 11 * d), 88)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (a, d))\n\n    # Find the 32nd term using the derived value of a and d\n    term_32 = solutions[a] + 31 * solutions[d]\n\n    return term_32\n\nans = solution()"
    ],
    "51d10a94ff2b458f8e10c3ad1c546dd9": [
        "def solution():\n    # Distance driven in the first 2 hours at 40 km/h\n    distance_first_part = 2 * 40\n\n    # Remaining distance\n    distance_second_part = 280\n\n    # Total distance driven\n    total_distance = distance_first_part + distance_second_part\n\n    # Time taken to drive the remaining distance at 70 km/h\n    time_second_part = distance_second_part / 70\n\n    # Total time taken for the whole trip\n    total_time = 2 + time_second_part\n\n    # Average speed for the entire trip\n    average_speed = total_distance / total_time\n\n    return average_speed\n\nans = solution()"
    ],
    "f765b179fd664d7283eb3748010a8192": [
        "def solution():\n    count = 0\n    # Count numbers with exactly two sevens\n    for digit in range(10):\n        if digit != 7:\n            # Positions of the two sevens: (7, 7, digit)\n            count += 1\n            # Positions of the two sevens: (7, digit, 7)\n            count += 1\n            # Positions of the two sevens: (digit, 7, 7)\n            if digit != 0:\n                count += 1\n    # Count numbers with all sevens: (7, 7, 7)\n    count += 1\n\n    return count\n\nans = solution()"
    ],
    "f1b52139fff84b708e70c8798718411d": [
        "def solution():\n    total_penpals = 11\n    total_pages = 38\n    pages_4_count = 0\n    \n    for i in range(total_penpals + 1):\n        pages_3_count = total_penpals - i\n        if 4 * i + 3 * pages_3_count == total_pages:\n            return pages_3_count\n\nans = solution()"
    ],
    "3934fba87a6f49588fd973f95f1b42fa": [
        "def solution():\n    minutes = 180\n    hours = minutes / 60\n    return hours\n\nans = solution()"
    ],
    "8270a7ab11474b5c9b8d4b50e94ccec5": [
        "def solution():\n    number = 768354\n    place_value = 8 * 10**2\n    \n    return place_value\n\nans = solution()"
    ],
    "18d62414fcc14256a14001acd25ead4d": [
        "from math import lcm\n\ndef solution():\n    packet_A = 25\n    packet_B = 20\n\n    # Find least common multiple\n    lcm_days = lcm(packet_A, packet_B)\n\n    # Assuming March has 31 days\n    start_month = 3\n    start_day = 1\n\n    # Calculate the month and day she will start new packets of both\n    # We are not accounting for leap years, as we are not given a year\n    # Not all Marchs will have 31 days in the future, but assuming consistency for simplicity\n    days_in_months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    current_day = start_day\n    current_month = start_month\n    while lcm_days > 0:\n        days_in_current_month = days_in_months[current_month - 1]\n        if lcm_days > days_in_current_month - current_day + 1:\n            lcm_days -= (days_in_current_month - current_day + 1)\n            current_month = (current_month % 12) + 1\n            current_day = 1\n        else:\n            current_day += lcm_days\n            lcm_days = 0\n\n    # Format day and month\n    next_start_day = current_day\n    next_start_month = current_month\n\n    return f\"{next_start_day}/{next_start_month}\"\n\nans = solution()"
    ],
    "7ed12a6fbb2b477488bf0f46e7aa015e": [
        "def solution():  \n    from math import factorial\n\n    # calculate number of ways to arrange the 6 singing performances\n    arrangements_singing = factorial(6)    \n\n    # calculate number of slots where dancing performances can be placed\n    # one slot is already between each of two singing performances, \n    # and one additional slot at each end\n    slots_for_dancing = 6 + 1\n\n    # choose 4 slots for the dancing performances out of the available slots\n    arrangements_dancing_slots = factorial(slots_for_dancing) // (factorial(4) * factorial(slots_for_dancing - 4))\n\n    # calculate number of ways to arrange the 4 dancing performances among themselves\n    arrangements_dancing = factorial(4)\n\n    # the total arrangements is the product of the individual arrangements\n    total_arrangements = arrangements_singing * arrangements_dancing_slots * arrangements_dancing\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "205d168df66c45e39d3bf4f711e8f6fc": [
        "from fractions import Fraction\n\ndef solution():\n    # Given A = a0 + a1 + a2 + a3 + a4 + a5 + a6 = 1 and the operation A Δ ai\n    A = Fraction(1, 1)\n    \n    # A Δ ai = A - ai = specific fraction provided in the question\n    a1 = A - Fraction(1, 2)\n    a2 = A - Fraction(2, 3)\n    a3 = A - Fraction(7, 8)\n    a4 = A - Fraction(29, 30)\n    a5 = A - Fraction(139, 144)\n    a6 = A - Fraction(839, 840)\n\n    # Now we know all ai except a0, we can find a0 by subtracting the other ai from A\n    a0 = A - (a1 + a2 + a3 + a4 + a5 + a6)\n\n    # a0 = m/n, find m + n\n    m = a0.numerator\n    n = a0.denominator\n\n    return m + n\n\nans = solution()"
    ],
    "467efc939dfd4170ba4658e1f6f2cb7d": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Let the number be x\n    x = symbols('x')\n    # Define the equation based on the mistake\n    mistake_eq = (x / 4) - 25 - 2021\n    # Solve the equation to find the value of x\n    correct_value = solve(mistake_eq, x)[0]\n    # Assuming Aiden should have multiplied by 4 and added 25 to the product.\n    correct_answer = correct_value * 4 + 25\n\n    return correct_answer\n\nans = solution()"
    ],
    "aeba54327d714c2483bb9b0bcf5e84a1": [
        "def solution():\n    factors_2 = 0\n    factors_5 = 0\n    numbers = [75, 56, 12, 105]\n\n    for number in numbers:\n        while number % 2 == 0:\n            factors_2 += 1\n            number //= 2\n        while number % 5 == 0:\n            factors_5 += 1\n            number //= 5\n\n    ans = min(factors_2, factors_5)\n    return ans\n\nans = solution()"
    ],
    "91a7b96128014a318c03b1434e2ae770": [
        "def solution():\n    # Let Donna's number of books be represented by d\n    # According to the problem, Chloe has 4 times as many books as Donna\n    # And also, Donna has 816 fewer books than Chloe\n    # So, we can write the equation: 4d - d = 816\n    # Simplifying the equation gives us: 3d = 816\n    # Now we solve for d (Donna's number of books)\n    d = 816 // 3\n    \n    return d\n\nans = solution()"
    ],
    "88e7bc9feb964b91bb3e5ab4e020c19d": [
        "def solution():\n    # Define the guesses and responses\n    guesses = [\"8765\", \"1023\", \"8642\", \"5430\"]\n    responses = [\n        (2, False),  # Two correct digits, wrong positions\n        (2, False),  # Two correct digits, wrong positions\n        (2, True),   # Two correct digits, correct positions\n        (0, False)   # No correct digits\n    ]\n    \n    # Iterate through all possible four-digit numbers\n    for num in range(1000, 10000):\n        str_num = str(num)\n        is_possible = True\n        \n        # Check against all guesses and responses\n        for guess, response in zip(guesses, responses):\n            correct_digits, correct_positions = response\n            common_digits = sum(1 for g, n in zip(guess, str_num) if g == n)\n            common_positions = sum(1 for g, n in zip(guess, str_num) if g == n)\n            \n            # Check if the guess satisfies the conditions provided by the teacher\n            if correct_positions:  # Correct digits and positions\n                if common_digits != correct_digits or common_positions != correct_digits:\n                    is_possible = False\n                    break\n            else:  # Correct digits, but wrong positions\n                if common_digits != correct_digits or common_positions > 0:\n                    is_possible = False\n                    break\n        \n        # When we find a number that satisfies all the conditions\n        if is_possible:\n            return str_num\n\n    return None\n\nans = solution()"
    ],
    "8e0b24a6852b4ad99f69ab3e1d9f46fa": [
        "def solution():\n    # The equation given is: (~ ~ ~ ~ ~ + 4) / 8 = 3\n    # Multiplying both sides by 8 to get rid of the denominator\n    # We get: ~ ~ ~ ~ ~ + 4 = 24\n    # Subtracting 4 from both sides to isolate the tildes\n    # We get: ~ ~ ~ ~ ~ = 20\n    # Each tilde represents a digit, so we replace each tilde with the digit 4 (because 4 * 5 = 20)\n    # Thus, the original number made of tildes is 44444\n    ans = 44444\n    return ans\n\nans = solution()"
    ],
    "a7a7be210f714db38b6463860e92ad08": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    adults, children, boys, girls = symbols('adults children boys girls')\n\n    equation1 = Eq(adults, 3 * children)\n    equation2 = Eq(boys, 2 * girls)\n    equation3 = Eq(adults - girls, 176)\n\n    # We also know that children are made up of boys and girls\n    equation4 = Eq(children, boys + girls)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (adults, children, boys, girls))\n\n    # Calculate the total number of people at the concert\n    total_people = solutions[adults] + solutions[children]\n\n    return total_people\n\nans = solution()"
    ],
    "b5c92f2132ac4326b5a389ac237c0de3": [
        "def solution():\n    from sympy import primerange\n    \n    primes_list = list(primerange(1, 193))  # Generate a list of prime numbers up to 193\n    ans = None\n    \n    for a in primes_list:\n        for b in primes_list:\n            if 3*a + 11*b == 193:\n                ans = a + b\n                return ans\n\nans = solution()"
    ],
    "8b43d11a50194a5c8d37dc13e3e6af0d": [
        "def solution():\n    for a in range(1, 10):  # Because 'a' cannot be zero in a two-digit number\n        for b in range(0, 10):\n            if 7 * (10 * a + b) == (100 * a + b):\n                return 10 * a + b\n\nans = solution()"
    ],
    "e9e75300f0b1494ead9f2af2a39646a1": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Represent the problem as congruences\n    congruences = [(1, 4), (2, 5), (4, 7)]\n\n    # Find least solution to the system of congruences using Chinese Remainder Theorem\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "cbe6883d9f0a4c368c4018abfcc1fd6b": [
        "def solution():\n    # The ones digit of a number raised to an exponent repeats in cycles.\n    # For 9, the cycle is 4 long: 9, 1, 9, 1, ...\n    # 999 has the same ones digit as 9, to find the ones digit of 999^99,\n    # we find the ones digit of 9^99.\n    cycle_length = 4\n    # Since we are only interested in the ones place, we take the exponent modulo the cycle length.\n    # 99 modulo 4 is 3, meaning we need the third number in the ones place cycle (9, 1, 9, 1).\n    exponent_mod_cycle = 99 % cycle_length\n\n    # We start with an initial ones place digit of 9.\n    ones_digit = 9\n    # Calculate the ones digit by repeatedly multiplying by 9 and taking modulo 10.\n    for _ in range(1, exponent_mod_cycle):\n        ones_digit = (ones_digit * 9) % 10\n\n    return ones_digit\n\nans = solution()"
    ],
    "c4e92a647c2e4f7cafbf405c8fd96b68": [
        "def solution():\n    workers_original = 3\n    houses_original = 14\n    days_original = 4\n\n    workers_new = 9\n    days_new = 2\n\n    # Calculating houses per worker per day in the original scenario\n    houses_per_worker_per_day = houses_original / (workers_original * days_original)\n\n    # Calculating the total number of houses built by the new number of workers in the specified number of days\n    houses_new = workers_new * days_new * houses_per_worker_per_day\n\n    return houses_new\n\nans = solution()"
    ],
    "bafdbe5ffa744970a2060ec88389886a": [
        "from math import gcd\n\ndef solution():\n    # Using the math.gcd function to compute the greatest common divisor\n    ans = gcd(gcd(12, 15), 60)\n    return ans\n\nans = solution()"
    ],
    "f1a22796821b429bbf0ea5a8dc834049": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let b represent the cost of banana and a represent the cost of apple\n    b, a = symbols('b a')\n\n    # Ellie's purchase: 2 bananas + 3 apples = £1.50\n    equation1 = Eq(2*b + 3*a, 1.50)\n\n    # Beth's purchase: 3 bananas + 2 apples = £1.45\n    equation2 = Eq(3*b + 2*a, 1.45)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (b, a))\n\n    # Calculating how much Annabella pays for 1 banana and 1 apple\n    annabella_cost = solutions[b] + solutions[a]\n\n    return annabella_cost\n\nans = solution()"
    ],
    "205b5f4fe40f4dc39f4c13a431c6c24e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_people = symbols('total_people')\n    \n    children = 2/5 * total_people\n    women = 1/4 * total_people\n    men = total_people - children - women\n    \n    equation = Eq(children, men + 20)\n    \n    solution = solve((equation), (total_people))\n    \n    return solution[0]\n\nans = solution()"
    ],
    "7920f0e04e1c4bb58bdd059b9a8054a5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    money, price_per_ball = symbols('money price_per_ball')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(money - 5 * price_per_ball, 15)\n    equation2 = Eq(money - 8 * price_per_ball, -12)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (money, price_per_ball))\n\n    return solutions[price_per_ball]\n\nans = solution()"
    ],
    "955addf2cd5343a2baa0cdc99bc64d70": [
        "def solution():\n    from itertools import permutations\n\n    smallest_product = float('inf')  # Initialize with infinity\n    for ages in permutations(range(1, 29), 3):  # Generate all possible age combinations\n        if ages[0] != ages[1] and ages[1] != ages[2] and ages[0] != ages[2]:\n            if sum(ages) == 28 and ages[2] == ages[0] - 10:\n                product = ages[0] * ages[1] * ages[2]\n                if product < smallest_product:\n                    smallest_product = product\n\n    return smallest_product\n\nans = solution()"
    ],
    "bb6949f9da5a4b318164ce5a0275f45c": [
        "def solution():\n    height_after_second_bounce = 9\n    bounce_factor = 1/3\n    \n    # Calculate the height after the first bounce\n    height_after_first_bounce = height_after_second_bounce / bounce_factor\n\n    # Calculate the initial height\n    initial_height = height_after_first_bounce / bounce_factor\n    \n    return initial_height\n\nans = solution()"
    ],
    "f8d4595ae1c84386a2cdab88d9bf6c10": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 3), (4, 7), (7, 8)]\n    ans, _ = solve_congruence(*congruences)\n\n    return ans\n\nans = solution()"
    ],
    "e572f57537f244f3960d8f1978f65baa": [
        "def solution():\n    max_sum = 0\n    \n    for digit1 in range(1, 10):  # First digit can't be 0 in a 3-digit number\n        for digit2 in range(0, 10):\n            for digit3 in range(0, 10):\n                number = digit1 * 100 + digit2 * 10 + digit3  # Form the 3-digit number\n                \n                # Check if number is divisible by 75 and has two equal digits\n                if number % 75 == 0 and (digit1 == digit2 or digit2 == digit3 or digit1 == digit3):\n                    # If true, iterate through all possible pairs to find max sum\n                    for other_digit1 in range(1, 10):\n                        for other_digit2 in range(0, 10):\n                            for other_digit3 in range(0, 10):\n                                other_number = other_digit1 * 100 + other_digit2 * 10 + other_digit3\n                                \n                                if other_number % 75 == 0 and other_number != number and (other_digit1 == other_digit2 or other_digit2 == other_digit3 or other_digit1 == other_digit3):\n                                    # Check that A and B have HCF 75\n                                    if gcd(number, other_number) == 75:\n                                        max_sum = max(max_sum, number + other_number)\n    \n    return max_sum\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nans = solution()"
    ],
    "dd4d3217f6ad466eb4b512fa290b4fab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    xuanxuan, lingling, jay = symbols('xuanxuan lingling jay')\n    \n    equation1 = Eq(xuanxuan + lingling, 120.5)\n    equation2 = Eq(xuanxuan + jay, 105.25)\n    equation3 = Eq(lingling, 2 * jay)\n    \n    solutions = solve((equation1, equation2, equation3), (xuanxuan, lingling, jay))\n    \n    return solutions[xuanxuan]\n\nans = solution()"
    ],
    "84471787dba0421d8ae2f1995580d453": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let L be the rate at which Lee works and N be the rate at which Nancy works\n    L, N = symbols('L N')\n    \n    # They finish the job together in 10 hours\n    equation1 = Eq(10 * (L + N), 1)\n    \n    # Lee works for 6 hours and Nancy works for 20 hours to finish the job\n    equation2 = Eq(6 * L + 20 * N, 1)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (L, N))\n    \n    # Calculate time for Nancy to finish the work alone\n    nancy_time = 1 / solutions[N]\n\n    return nancy_time\n\nans = solution()"
    ],
    "9caf24529ff449c5bd52234a7d53d0f4": [
        "def solution():\n    # Calculating the numerator of the first complex fraction\n    numerator1 = (1/30) + (1/6)\n    # Calculating the denominator of the first complex fraction\n    denominator1 = 2/25\n    # Calculating the value of the first complex fraction\n    complex_fraction1 = numerator1 / denominator1\n\n    # Calculating the numerator of the second complex fraction\n    numerator2 = 2 - (2/3)\n    # Calculating the denominator of the second complex fraction\n    denominator2 = 8/3\n    # Calculating the value of the second complex fraction\n    complex_fraction2 = numerator2 / denominator2\n\n    # Adding the two complex fractions to get the answer\n    ans = complex_fraction1 + complex_fraction2\n\n    return ans\n\nans = solution()"
    ],
    "d268cf0ab65245d3958844e7297250a7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_pupils = 40 + 30\n    total_avg_score = 90\n    total_marks = total_pupils * total_avg_score\n\n    average_B = symbols('average_B')\n    average_A = average_B - 7\n\n    # Total marks for class A + Total marks for class B = total_marks\n    equation = Eq(40 * average_A + 30 * average_B, total_marks)\n    solutions = solve(equation, average_B)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "c69301f007a447459a2f26b32add259c": [
        "def solution():\n    # Using fractions to avoid floating point arithmetic issues\n    from fractions import Fraction \n\n    # Calculating the sum of fractions in the denominator\n    sum_fractions = Fraction(1, 2007 * 2008) + Fraction(1, 2008 * 2009) + Fraction(1, 2009)\n\n    # Taking the reciprocal of the sum to find the final answer\n    ans = 1 / sum_fractions\n\n    # Converting the result into an integer as the result will be a whole number\n    return ans.numerator\n\nans = solution()"
    ],
    "736d1bb4aa004960971db73d59909663": [
        "def solution():\n    count = 0\n    for fifty_pence in range(2):\n        for twenty_pence in range(4):\n            for ten_pence in range(8):\n                if fifty_pence * 50 + twenty_pence * 20 + ten_pence * 10 == 70:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "73e16b4d6b4148cd8d14bdc6e7150eb3": [
        "def solution():\n    students = 40\n    boat_capacity = 7\n    \n    boats_needed = (students + boat_capacity - 1) // boat_capacity\n    \n    return boats_needed\n\nans = solution()"
    ],
    "5a540f16cc654e8dadce8dec2e692dc0": [
        "def solution():\n    ans = 11 - 2 + 7 - 4 + 2\n    return ans\n\nans = solution()"
    ],
    "994aeb7c561a42fe8347e558ec900f32": [
        "def solution():\n    return (250250**2) - (250249 * 250251)\n\nans = solution()"
    ],
    "bf82b1b89b484ee5960960a7d950ca09": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for each person's age\n    Aaron, Becky, Caris = symbols('Aaron Becky Caris')\n\n    # Define equations based on the problem statement\n    equation1 = Eq(Aaron - Becky, Becky - Caris)\n    equation2 = Eq(Aaron + Becky + Caris, 60)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (Aaron, Becky, Caris))\n\n    # We want to find Becky's age\n    return solutions[Becky]\n\nans = solution()"
    ],
    "d446c52e4dbb4e51aceaff4c60dc5ab8": [
        "def solution():\n    people_behind_mark = 16\n    total_people = 30\n\n    people_in_front_of_mark = total_people - people_behind_mark - 1\n\n    return people_in_front_of_mark\n\nans = solution()"
    ],
    "ac1c2a9c6937485ea8ffba2f93c05b4f": [
        "def solution():\n    # 1-9: 9 numbers with 1 digit each\n    one_digit_numbers = 9 * 1\n    \n    # 10-99: 90 numbers with 2 digits each\n    two_digit_numbers = 90 * 2\n    \n    # 100-199: 100 numbers with 3 digits each\n    three_digit_numbers = (200 - 100) * 3\n    \n    # Add up the number of digits from each range.\n    total_digits = one_digit_numbers + two_digit_numbers + three_digit_numbers\n    return total_digits\n\nans = solution()"
    ],
    "a5706681d10c49489b9cbe928880bbdb": [
        "def solution():\n    for a in range(10):\n        number = int(f'9{a}8{a}')\n        if number % 15 == 0:\n            return a\n\nans = solution()"
    ],
    "9852339c36f84963a115452803677de2": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq((x + 2)/3, 1 + (x - 1)/4)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "7194d8ece9df4cd49ccf1b51dff55042": [
        "def solution():\n    # A number is divisible by 4 if the number formed by its last two digits\n    # is divisible by 4. Given the number 125J6, we need to find J such that\n    # (10*J + 6) is divisible by 4.\n    for J in range(10):\n        if (10 * J + 6) % 4 == 0:\n            return J\n\nans = solution()"
    ],
    "252455d7397e4190b4b727c54849c01e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    equations = (Eq(5 * table + 12 * chair, 720), Eq(table, chair + 25))\n\n    solutions = solve(equations, (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "9ad04db2b944413e9b7b20c98134596f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, peach = symbols('apple peach')\n\n    equation1 = Eq(4 * apple + 3 * peach, 10)\n    equation2 = Eq(4 * apple + 6 * peach, 16)\n\n    solutions = solve((equation1, equation2), (apple, peach))\n\n    return solutions[peach]\n\nans = solution()"
    ],
    "a38e52eeb9e34e54a87285df19594d9a": [
        "def solution():\n    result = (66 / 6) - 7\n    return result\n\nans = solution()"
    ],
    "d8016a78f9724496a543874862c8f889": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "ba1cf976efc14128bab1463d61d8172d": [
        "def solution():\n    a = 9\n    b = symbols('x')\n    new_op_eq = Eq(5*a - 2*b, 33)\n    solution = solve(new_op_eq, b)\n    return solution[0]\n\nans = solution()"
    ],
    "b06bcf32c5ce4534aa9ae601dd737c7a": [
        "def solution():\n    n = 24\n    sum_of_squares = (n * (n + 1) * (2 * n + 1)) // 6\n    sum_cubes = ((n * (n + 1)) // 2) ** 2\n    ans = sum_cubes - sum_of_squares\n    return ans\n\nans = solution()"
    ],
    "28dce32aa4a84544ae4a2373b615edc0": [
        "def solution():\n    ans = 36 + 17 + 18 + 24 + 33\n    return ans\n\nans = solution()"
    ],
    "6414fa3c36c949d8bc8d4375490aad90": [
        "def solution():\n    ans = 476 // 17\n    return ans\n\nans = solution()"
    ],
    "05109018bc434fdfa8dff3bea6fe10cd": [
        "def solution():\n    return 11\n\nans = solution()"
    ],
    "3c4b0bb759df46ac8dc162978d7d83b6": [
        "def solution():\n    age_in_6_years = 24\n    current_age = age_in_6_years - 6\n    age_9_years_ago = current_age - 9\n    return age_9_years_ago\n\nans = solution()"
    ],
    "8421a5213cd640929f9873c905812c37": [
        "def solution():\n    from math import lcm\n    \n    # lcm of 25 and 20 is the day Granny starts new packets of both\n    days_to_new_packets = lcm(25, 20)\n    \n    # 1st March plus the lcm gives the next starting day\n    day = 1\n    month = 3  # March is the 3rd month\n    \n    # Since no month has more than 31 days, find out if next month is needed\n    if day + days_to_new_packets > 31:\n        month += 1\n        day = (day + days_to_new_packets) % 31\n    else:\n        day += days_to_new_packets\n        \n    return (day, month)\n\nans = solution()"
    ],
    "644a44bb704f4384a83cf940f7f6970c": [
        "def solution():\n    # Total time spent is 360 minutes\n    total_time = 360  # in minutes\n    \n    # Ratio of times going up to going down the hill\n    ratio_up = 5\n    ratio_down = 4\n\n    # Calculate the individual times using the ratio\n    time_up = (ratio_up / (ratio_up + ratio_down)) * total_time  # Time going up the hill\n    time_down = (ratio_down / (ratio_up + ratio_down)) * total_time  # Time going down the hill\n\n    # Speed difference between going up and down\n    speed_diff = 10  # in meters per minute\n\n    # Let the speed going down be x (then speed going up will be x - 10)\n    # Since the distances up and down are the same, we have:\n    # (x - 10) * time_up = x * time_down\n    # Solve for x using the equation\n    x = (speed_diff * time_up) / (time_down - time_up)\n\n    # Calculate the speed going up the hill\n    speed_up = x - speed_diff\n\n    # Distance is speed multiplied by time\n    distance_up = speed_up * time_up\n    distance_down = x * time_down\n\n    # Total distance cycled is the sum of the distances up and down the hill\n    total_distance = distance_up + distance_down\n\n    return total_distance\n\nans = solution()"
    ],
    "04443e386f27447897840ea2ceacf48e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    days = symbols('days')\n\n    # initial quantities\n    initial_watermelons = 94\n    initial_pineapples = 138\n    \n    # daily consumption\n    daily_watermelons = 9\n    daily_pineapples = 9\n\n    # remaining fruits after 'days' days\n    remaining_watermelons = initial_watermelons - days * daily_watermelons\n    remaining_pineapples = initial_pineapples - days * daily_pineapples\n\n    # equation given by the problem\n    equation = Eq(remaining_pineapples, 3 * remaining_watermelons)\n\n    # solving the equation for 'days'\n    days_solution = solve(equation, days)\n\n    return days_solution[0]\n\nans = solution()"
    ],
    "f2a79e337470459580999ca824060e81": [
        "def solution():\n    friends = 6\n    cards_sent_per_friend = friends - 1 # Each friend sends a card to every other friend, except themselves.\n    total_cards_sent = friends * cards_sent_per_friend\n\n    return total_cards_sent\n\nans = solution()"
    ],
    "863f091493be404bbbf1a3b6b11108a9": [
        "def solution():\n    ans = 3.6 * 100\n    return ans\n\nans = solution()"
    ],
    "7ecb434f5d8b4685a1bf09ae7bb7ba8e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for current ages of Tom and Jerry\n    tom, jerry = symbols('tom jerry')\n\n    # Create equations based on the problem\n    equation1 = Eq(tom + 4, 2 * (tom))        # Tom will be twice his age in 4 years\n    equation2 = Eq(tom - 3 + jerry - 3, 10)   # Three years ago, the sum of their ages was 10\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (tom, jerry))\n    \n    # Extract Tom and Jerry's current age from the solutions\n    tom_age = solutions[tom]\n    jerry_age = solutions[jerry]\n\n    # Create an expression to find when Jerry's age will be doubled\n    years = symbols('years')\n    equation3 = Eq(jerry + years, 2 * jerry)\n\n    # Solve for the number of years from now when Jerry's age will be doubled\n    years_when_jerry_double = solve(equation3, years)\n\n    return years_when_jerry_double[0]\n\nans = solution()"
    ],
    "c7d09eee09884180b22647b680abde83": [
        "def solution():\n    fruits_per_car = 24.2 / 4\n    fruits_per_truck = 410 / 50\n    difference = fruits_per_truck - fruits_per_car\n\n    return difference\n\nans = solution()"
    ],
    "594446f092204f07a8f1c0cebe891b21": [
        "def solution():\n    days_until_birthday = 329\n    days_in_a_week = 7\n    weeks_until_birthday = days_until_birthday // days_in_a_week\n\n    return weeks_until_birthday\n\nans = solution()"
    ],
    "7b68f177602a4cc584823135bed89664": [
        "def solution():\n    ans = 252 - (62 - 58) * 13\n    return ans\n\nans = solution()"
    ],
    "53ec9e4b9d804cd3a26e23b2cb281a3a": [
        "def solution():\n    # Time of arrival at the bus stop in minutes since midnight\n    aiden_arrival_time_minutes = 9 * 60 + 22\n\n    # Time of the 9:15 bus in minutes since midnight\n    bus_time_minutes = 9 * 60 + 15\n\n    # If Aiden arrives after the 9:15 bus,\n    # calculate the waiting time until the next bus\n    if aiden_arrival_time_minutes > bus_time_minutes:\n        # Waiting time is the time since the last bus plus the time until the next bus\n        waiting_time = 35 - ((aiden_arrival_time_minutes - bus_time_minutes) % 35)\n    else:\n        # If Aiden arrives before the 9:15 bus,\n        # just calculate the difference\n        waiting_time = bus_time_minutes - aiden_arrival_time_minutes\n\n    return waiting_time\n\nans = solution()"
    ],
    "d05b2b87366644bea5ba5fa990a4796c": [
        "def solution():\n    ans = (5 / 9) * 243\n    return ans\n\nans = solution()"
    ],
    "d6baa433c44047ebbc0a9cea630f8afa": [
        "def solution():\n    return 161 / 46\n\nans = solution()"
    ],
    "c72580c4f08e4db9b41e5dae34b5ba80": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(39 - (3*x - 4), 34)\n    sol = solve(equation, x)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "41a3c03d8eb44fc899606653983540eb": [
        "def solution():\n    ans = sum([i**2 if i % 2 != 0 else -i**2 for i in range(3, 52)])\n    return ans\n\nans = solution()"
    ],
    "98919fdedf144aaf9b373ecd9d790e80": [
        "from sympy import isprime\n\ndef solution():\n    # Family member ages in 2017\n    ages = {\"I\": 7, \"brother\": 5, \"mother\": 29, \"father\": 31}\n\n    # Year to check\n    year = 2017\n\n    # Check subsequent years for all prime ages\n    while True:\n        year += 1\n        ages[\"I\"] += 1\n        ages[\"brother\"] += 1\n        ages[\"mother\"] += 1\n        ages[\"father\"] += 1\n\n        # Check if all ages are prime\n        if all(isprime(age) for age in ages.values()):\n            return ages[\"father\"]\n\nans = solution()"
    ],
    "0284805b100e4942a4c70e5c0bda46ec": [
        "def solution():\n    original_price = 800\n    discount_rate = 0.15\n    increase_rate = 0.15\n\n    discounted_price = original_price * (1 - discount_rate)\n    final_price = discounted_price * (1 + increase_rate)\n\n    return final_price\n\nans = solution()"
    ],
    "706569a3dca842c19c29d93aa3f7c891": [
        "def solution():\n    ans = 0.2 * 4 + 1.4 + 0.3\n    return ans\n\nans = solution()"
    ],
    "330ae3eaf06f40fc836f52dc7ad73cd3": [
        "def solution():\n    return 9321 - 899\n\nans = solution()"
    ],
    "8206be1ec41b408abd4e771355c66b57": [
        "def solution():\n    # Number of circles\n    n = 7\n\n    # Formula to calculate the maximum number of different parts\n    # created by n circles on a plane:\n    # 1 + n + nC2 + nC4 where nCk represents the binomial coefficient\n    # (combinations of n items taken k at a time).\n    ans = 1 + n + (n*(n-1))//2 + (n*(n-1)*(n-2)*(n-3))//(2*3*4)\n\n    return ans\n\nans = solution()"
    ],
    "fb9f310cf3714558a4a5507c2790883c": [
        "def solution():\n    total_books = 279\n    books_given_away = 15 * 8\n    books_packed = total_books - books_given_away\n    return books_packed\n\nans = solution()"
    ],
    "4ba068e7720f40409cd5ae73716e4408": [
        "def solution():\n    total_flowers = 30\n    flowers_between_posts = 3\n    distance_of_road = 50\n    \n    # Calculate the number of intervals between lamp posts\n    # Since 3 flowers are planted between every 2 lamp posts, \n    # we calculate the number of pairs of lamp posts by dividing \n    # the total number of flowers by flowers per interval\n    number_of_pairs = total_flowers / flowers_between_posts\n    \n    # Since each interval has one lamp post at each end except the ends of the road\n    # The total number of intervals is number_of_pairs + 1\n    number_of_intervals = number_of_pairs + 1\n    \n    # The distance between each pair of lamp posts is the total distance\n    # divided by the number of intervals\n    distance_between_posts = distance_of_road / number_of_intervals\n    \n    return distance_between_posts\n\nans = solution()"
    ],
    "e4a263cc4f734491a94e2dda982f4f21": [
        "def solution():\n    return int(\"ninety thousand and nine\".replace(\"ninety thousand and nine\", \"90009\"))\n\nans = solution()"
    ],
    "2a5bc09f9e2444d0ad16b16b429e0669": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for Lora's and her mother's age\n    lora_age, mother_age = symbols('lora_age mother_age')\n    \n    # Create two equations based on the given information\n    equation1 = Eq(lora_age + mother_age, 44)\n    equation2 = Eq(mother_age, 3 * lora_age)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (lora_age, mother_age))\n    \n    # Return Lora's age\n    return solutions[lora_age]\n\nans = solution()"
    ],
    "b157ac35c09c46d1a0f9228b2a98a0c9": [
        "def solution():\n    total_adults = 40\n    fraction_male = 3 / 5\n    number_of_males = total_adults * fraction_male\n    return int(number_of_males)\n\nans = solution()"
    ],
    "25c64c726c244d3aaeaa551352e609a3": [
        "def solution():\n    ben_sweets = 17\n    bob_sweets = 10\n    total_sweets = ben_sweets + bob_sweets\n\n    return total_sweets\n\nans = solution()"
    ],
    "8b707c3e74aa4ca6aa566cfafbe81d3f": [
        "def solution():\n    base_unit_digit = 4\n    unit_digit_cycle = [base_unit_digit]\n\n    # Given that the last digit of powers of 4 follow a cycle: 4, 6, 4, 6, ...\n    # We only need to find which step we are in the cycle\n    while True:\n        next_unit_digit = (unit_digit_cycle[-1] * base_unit_digit) % 10\n        if next_unit_digit == base_unit_digit:\n            break\n        unit_digit_cycle.append(next_unit_digit)\n\n    cycle_length = len(unit_digit_cycle)\n    power_mod_cycle_length = 2008 % cycle_length\n\n    ans = unit_digit_cycle[power_mod_cycle_length - 1]  # index -1 because of 0-indexing\n    return ans\n\nans = solution()"
    ],
    "acf3c89a437f4533b94fbc004a77b124": [
        "def solution():\n    adam_ben = 102\n    ben_carl = 97\n    adam_carl = 93\n\n    total_weight = (adam_ben + ben_carl + adam_carl) / 2\n\n    return total_weight\n\nans = solution()"
    ],
    "5c9b212318c240b4a74ad8f4e844ef5b": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime('12:40', '%H:%M')\n    duration = timedelta(hours=2, minutes=40)\n    departure_time = arrival_time + duration\n    return departure_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "26e8404f1e6e4ecdb0c65de9d6a345a6": [
        "def solution():\n    # Paths from home to shops\n    paths_to_audio = 6\n    paths_to_book = 4\n    paths_to_chapel = 5\n    \n    # Paths from shops to school\n    paths_audio_to_school = 2\n    paths_book_to_school = 2\n    paths_chapel_to_school = 3\n    \n    # Total paths from home to school\n    total_paths = (paths_to_audio * paths_audio_to_school +\n                   paths_to_book * paths_book_to_school +\n                   paths_to_chapel * paths_chapel_to_school)\n    \n    return total_paths\n\nans = solution()"
    ],
    "c15d8300682f4868979f9fe7293cdddd": [
        "def solution():\n    return 76 * 9\n\nans = solution()"
    ],
    "2fcfa373d34340dda08f178934a5be32": [
        "def solution():\n    speed_eddie = 62\n    speed_brother = 70\n    meet_time = 5\n    \n    distance = (speed_eddie + speed_brother) * meet_time\n    return distance\n\nans = solution()"
    ],
    "2c92522309c445228b27f336d60a049f": [
        "def solution():\n    total_coins = 495\n    one_pound_coins = total_coins // 3\n    fifty_pence_coins = 124\n    twenty_pence_coins = total_coins - one_pound_coins - fifty_pence_coins\n\n    total_value = (one_pound_coins * 1) + (fifty_pence_coins * 0.50) + (twenty_pence_coins * 0.20)\n\n    return total_value\n\nans = solution()"
    ],
    "517bec3444474e42bb9cb8c495766694": [
        "def solution():\n    return 14.8 - 5.67\n\nans = solution()"
    ],
    "556f6176dffb4d75900eef7a7bd1baa6": [
        "def solution():\n    belle_sticks = 49\n    eddie_gave = 11\n    \n    belle_current = belle_sticks + eddie_gave\n    eddie_initial = belle_current\n    \n    return eddie_initial\n\nans = solution()"
    ],
    "a2fe9cf5c86e468186050a214e5271c5": [
        "def solution():\n    num_lamp_posts = 50\n    distance_between = 2\n    \n    total_distance = (num_lamp_posts - 1) * distance_between\n    \n    return total_distance\n\nans = solution()"
    ],
    "007cfb31882a43b8a576d0a1be81a6b1": [
        "def solution():\n    return 198 + 298 + 398 + 498\n\nans = solution()"
    ],
    "cc59b7c9a7804769b430b15dea0b2243": [
        "def solution():\n    temperature_glasgow = -7\n    warmer_degree = 12\n\n    temperature_exeter = temperature_glasgow + warmer_degree\n\n    return temperature_exeter\n\nans = solution()"
    ],
    "42059b08dbed41ce877ac6d4245af7e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    benson, clive = symbols('benson clive')\n\n    # Benson and Clive had a total of 705 dollars\n    equation1 = Eq(benson + clive, 705)\n\n    # Benson bought a calculator for 34 dollars\n    # Clive bought a badminton racket for 63 dollars\n    # They then had the same amount of money left\n    equation2 = Eq(benson - 34, clive - 63)\n\n    solutions = solve((equation1, equation2), (benson, clive))\n\n    return solutions[clive]\n\nans = solution()"
    ],
    "f3a732dd8b134a0d8668f613c0e04366": [
        "def solution():\n    weight_per_box = 1.3\n    number_of_boxes = 6\n    total_weight = weight_per_box * number_of_boxes\n    return total_weight\n\nans = solution()"
    ],
    "d10e094ae6b64c01873f9605961d4568": [
        "def solution():\n    ans = 11 + 8 - 4 + 2\n    return ans\n\nans = solution()"
    ],
    "29173022662a4326b363f95bb7111d39": [
        "from fractions import Fraction\n\ndef solution():\n    first_term = Fraction(5, 11)\n    second_term = Fraction(2, 27)\n    third_term = Fraction(5, 27)\n\n    result = (first_term + second_term) * 11 + third_term\n    return result\n\nans = solution()"
    ],
    "f2d1624bd6914f419871977e97929aae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, brian = symbols('chelsia brian')\n\n    equation1 = Eq((3/4) * chelsia, (5/6) * brian)\n    equation2 = Eq(chelsia, brian + 24)\n\n    solutions = solve((equation1, equation2), (chelsia, brian))\n\n    total_money = solutions[chelsia] + solutions[brian]\n\n    return total_money\n\nans = solution()"
    ],
    "2de358aca892457597c6b256327bbab7": [
        "def solution():\n    total_tea = 983 + 179\n    equal_volume = total_tea / 2\n    tea_to_give = equal_volume - 179\n    return tea_to_give\n\nans = solution()"
    ],
    "c47a6f5f7feb44a1a708cd7ee24c6d4f": [
        "def solution():\n    from itertools import permutations\n    digits = [2, 4, 6]\n    all_possible_numbers = set(permutations(digits))\n    ans = len(all_possible_numbers)\n    return ans\n\nans = solution()"
    ],
    "76eab0f31f2c401ea284400880158c26": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the number of coins John and Kofi have\n    john, kofi = symbols('john kofi')\n    \n    # Equation 1: Together, they have 25 coins\n    eq1 = Eq(john + kofi, 25)\n    \n    # Equation 2: After the transaction, Kofi will have 3 fewer coins than John\n    eq2 = Eq((kofi + 4) + 3, john - 4)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (john, kofi))\n    \n    return solutions[john]\n\nans = solution()"
    ],
    "b9dc1e7c14884af2affa4cacaa7fb5a9": [
        "def solution():\n    ans = 18 + 2 + 16\n    return ans\n\nans = solution()"
    ],
    "94caf5aef0e34fb6850eae1e6f450368": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's define our variables\n    normal_rabbits, special_rabbits = symbols('normal_rabbits special_rabbits')\n    \n    # Now, we set our equations based on the problem statement:\n    # normal heads + special heads = total heads\n    equation1 = Eq(1 * normal_rabbits + 3 * special_rabbits, 53)\n    # normal feet + special feet = total feet\n    equation2 = Eq(4 * normal_rabbits + 2 * special_rabbits, 102)\n    \n    # Now let's solve the equations\n    solutions = solve((equation1, equation2), (normal_rabbits, special_rabbits))\n    \n    # Since we are interested in the total number of rabbits\n    total_rabbits = solutions[normal_rabbits] + solutions[special_rabbits]\n    return total_rabbits\n\nans = solution()"
    ],
    "1e359fb023094a249a7e06543302f43c": [
        "def solution():\n    ans = 0\n    for i in range(1, 101):\n        if i % 2 == 0:\n            ans += i\n        else:\n            ans -= i\n    return ans\n\nans = solution()"
    ],
    "c2d38aa135914d7cbc85eacbe4abc34c": [
        "def solution():\n    cost_of_one_banana = 98 / 7\n    cost_of_thirteen_bananas = cost_of_one_banana * 13\n\n    change = (10 * 100) - cost_of_thirteen_bananas  # convert £10 into pence for subtraction\n\n    return change\n\nans = solution()"
    ],
    "c0d39545ea18469395ac00e338169f45": [
        "from fractions import Fraction\n\ndef solution():\n    return Fraction(3) / Fraction(1, 3)\n\nans = solution()"
    ],
    "635bb79136ff42d8a188a0bd46337917": [
        "def solution():\n    neelesh_sweets_after_eating = 4\n    sweets_given_to_neelesh = neelesh_sweets_after_eating + 1  # He ate one\n    fraction_given = 1 / 6\n    total_sweets = sweets_given_to_neelesh * (1 / fraction_given)\n    sweets_left_with_ayesha = total_sweets - sweets_given_to_neelesh\n    return sweets_left_with_ayesha\n\nans = solution()"
    ],
    "b49aa6ce18de4e7e95ea0c909ef9340d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    copper, iron = symbols('copper iron')\n\n    equation1 = Eq(8 * copper + 9 * iron, 135)\n    equation2 = Eq(6 * copper + 3 * iron, 75)\n\n    solutions = solve((equation1, equation2), (copper, iron))\n\n    return solutions[copper]\n\nans = solution()"
    ],
    "82376facf64846dea0f32cd7690fcb86": [
        "def solution():\n    # Since the fraction 1/70 is a repeating decimal, we can find the repeating\n    # part and then get the 500th digit by finding the remainder of 500 divided\n    # by the length of the repeating sequence.\n    decimal = '0.'  # Initialize the decimal representation\n    numerator = 1\n    remainder_list = []  # To keep track of remainders to find the repeating sequence\n    \n    # Find the repeating sequence\n    while True:\n        numerator *= 10\n        remainder = numerator % 70\n        if remainder in remainder_list:\n            # Sequence starts repeating\n            break\n        remainder_list.append(remainder)\n        decimal += str(numerator // 70)\n        numerator = remainder\n    \n    # Find the length of the repeating sequence\n    repeat_start = remainder_list.index(remainder)\n    repeating_sequence = decimal[repeat_start+2:]  # excluding '0.'\n    \n    # Find the 500th digit in the sequence\n    position = (500 - 1) % len(repeating_sequence)  # subtract 1 because it's a zero-based index\n    ans = int(repeating_sequence[position])\n    \n    return ans\n\nans = solution()"
    ],
    "fb81c39a4a004c44a04415b1127e4172": [
        "def solution():\n    ans = 5 * 8 * 37 * 2 * 3\n    return ans\n\nans = solution()"
    ],
    "6f08803f689f4c72bcdea50d636ea987": [
        "def solution():\n    numerator_sum = sum(1 / (i * (i + 1)) for i in range(1, 20, 2))\n    denominator_sum = sum(1 / (i * (20 + 11 - i)) for i in range(11, 16))\n    \n    ans = numerator_sum / denominator_sum\n    return ans\n\nans = solution()"
    ],
    "3879585254c84c84980eeddc57632689": [
        "def solution():\n    # n * 5 = 4.5\n    # Divide both sides of the equation by 5 to solve for n\n    n = 4.5 / 5\n    return n\n\nans = solution()"
    ],
    "8cf4df806e1a4f38b2163bf0c0f80fb2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A = 80\n    C = symbols('C')\n    B = 2 * C\n\n    equation = Eq(A + B + C, 560)\n\n    solution = solve(equation, C)\n\n    return solution[C]\n\nans = solution()"
    ],
    "ff3ca477695c441ca3e802ed3aff2147": [
        "from math import gcd\n\ndef solution():\n    count = 0\n    for a in range(1, 425):\n        b = 425 - a\n        if a < b and gcd(a, b) == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "4b71e5c9920b435b9041ce4896dba538": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # let x be the number of gummy bears and y be the number of lollipops before adding 120 to each\n    x, y = symbols('x y')\n\n    # the initial ratio of gummy bears to lollipops is 5:7\n    original_ratio = Eq(x/y, 5/7)\n\n    # after adding 120 to each pile, the ratio becomes 4:5\n    new_ratio = Eq((x + 120)/(y + 120), 4/5)\n\n    # solve the system of equations\n    solution = solve((original_ratio, new_ratio), (x, y))\n\n    # calculate the total number of candies now by adding 120 to each type of candy\n    total_candies = solution[x] + solution[y] + 120 + 120\n\n    return total_candies\n\nans = solution()"
    ],
    "f7687594899c4a84936c2dc5acc1a17b": [
        "def solution():\n    term_number = 10\n    term_value = 31\n    difference = 3\n\n    first_term = term_value - (term_number - 1) * difference\n    return first_term\n\nans = solution()"
    ],
    "582d4b5a26c541bc8d1fb60d2121ed94": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(24*x - 5*(3 + x), 4)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "1d7ff38273c84d93a9260643964e7030": [
        "def solution():\n    david_weight_stone = 15\n    pounds_per_stone = 14\n    david_weight_pounds = david_weight_stone * pounds_per_stone\n\n    andrew_weight_pounds = 275\n    \n    weight_difference_pounds = abs(david_weight_pounds - andrew_weight_pounds)\n    \n    return weight_difference_pounds\n\nans = solution()"
    ],
    "ab2b45088a334801819c6e6a9d94fab4": [
        "def solution():\n    numbers = [5, 15, 17, 23]\n    repetitions = 3\n    total_sum = sum(numbers) * repetitions\n    return total_sum\n\nans = solution()"
    ],
    "a7abc8be2a334d6eaec3ea33bebffa38": [
        "def solution():\n    fractional_percentage = (50 / 100) * (50 / 100) * 3.20\n    return fractional_percentage\n\nans = solution()"
    ],
    "9dbeb15b0ccc44199b320299a1531c7e": [
        "def solution():\n    # Convert numbers from base 3 to base 10\n    num1 = int('12101', 3)\n    num2 = int('2210', 3)\n\n    # Subtract the base 10 numbers\n    result_base10 = num1 - num2\n\n    # Convert the result back to base 3\n    result_base3 = ''\n    while result_base10 > 0:\n        result_base3 = str(result_base10 % 3) + result_base3\n        result_base10 //= 3\n\n    return result_base3 or '0'\n\nans = solution()"
    ],
    "e83aa38155204c758ec3f3c943621ee1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andy, bella, carl = symbols('andy bella carl')\n\n    equation1 = Eq(andy, 3 * carl - 5)\n    equation2 = Eq(bella, 5 * carl + 6)\n    equation3 = Eq(andy + bella + carl, 82)\n\n    solutions = solve((equation1, equation2, equation3), (andy, bella, carl))\n\n    return solutions[bella]\n\nans = solution()"
    ],
    "b9e41291c02c4031a7bcdcb38cb3cafe": [
        "def solution():\n    return 58 * 60\n\nans = solution()"
    ],
    "fc1e6d4f69b04d27a7517c0eb6c4e22f": [
        "def solution():\n    # The given sequence is not an arithmetic sequence as given, but it consists of sums of two separate arithmetic sequences.\n    # The first sequence is 30, 40, 50, 60, 70, 80, 90.\n    # The second sequence is 1, 2, 3, 4, 5, 6, 7.\n    # We can separate the given sequence into two such sequences and sum them.\n\n    # There are 7 terms in each sequence.\n    num_terms = 7\n\n    # Sum of the first arithmetic sequence. Using the formula sum = n/2 * (first_term + last_term)\n    first_sequence_sum = num_terms/2 * (30 + 90)\n\n    # Sum of the second arithmetic sequence. Using the formula sum = n/2 * (first_term + last_term)\n    second_sequence_sum = num_terms/2 * (1 + 7)\n\n    # The sum of both sequences gives the answer.\n    total_sum = first_sequence_sum + second_sequence_sum\n    return int(total_sum)\n\nans = solution()"
    ],
    "3d7dd83d87f844e58d9e560870e4d190": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cake, biscuit = symbols('cake biscuit')\n    \n    equation1 = Eq(1 * cake + 2 * biscuit, 450)\n    equation2 = Eq(2 * cake + 3 * biscuit, 800)\n    \n    solutions = solve((equation1, equation2), (cake, biscuit))\n    \n    return solutions[biscuit]\n\nans = solution()"
    ],
    "40f23dfb4c6944d6827e112692a2f4af": [
        "def solution():\n    correct_answers = 6\n    wrong_answers = 2\n    mark_for_correct = 12\n    total_questions = correct_answers + wrong_answers\n\n    total_marks = (correct_answers * mark_for_correct) + (wrong_answers * 0)\n    average_mark = total_marks / total_questions\n\n    return average_mark\n\nans = solution()"
    ],
    "12eba26cbba04c40831d8de0d613bdcb": [
        "def solution():\n    numbers = list(range(1, 21))\n    max_length = 0\n    for i in range(1, 21):\n        chosen = {i}\n        for num in numbers:\n            if all(abs(num - c) != 5 for c in chosen):\n                chosen.add(num)\n        max_length = max(max_length, len(chosen))\n    return max_length\n\nans = solution()"
    ],
    "457ec627f0894b55bd6bbb19ec3216ed": [
        "def solution():\n    num = (2017 + 7/8) * (3 + 2/3) - 2016.875 * (11/3)\n    den = (2017 + 1/3 - 2016.875) * 17\n    fraction = num / den\n    result = fraction * (3 + 23/32)\n    return result\n\nans = solution()"
    ],
    "87af33f1b5884c4ea69e49e33d0a8d54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for John's current age and his mother's current age\n    john_age, mother_age = symbols('john_age mother_age')\n    \n    # Create equations based on the problem description\n    eq1 = Eq(john_age + 8, mother_age - 20)\n    eq2 = Eq(mother_age, 5 * john_age)\n    \n    # Solve the system of equations\n    ages = solve((eq1, eq2), (john_age, mother_age))\n    \n    # Calculate the difference in ages\n    age_difference = ages[mother_age] - ages[john_age]\n    \n    # Obtain John's age when his mother was 5 times older\n    john_age_when_5_times = age_difference / 4\n    \n    return john_age_when_5_times\n\nans = solution()"
    ],
    "cf212f0a8ebe4fcbb9183e471f844eb7": [
        "def solution():\n    # Each pupil has the same number of pencils\n    # The total number of pencils is a number in the form of B1B\n    # 44 pupils in total\n    num_pupils = 44\n\n    # B can be any digit from 1 to 9 and 1B is a two-digit number from 10 to 99\n    for B in range(1, 10):\n        total_pencils = int(str(B) + str(1) + str(B))\n        if total_pencils % num_pupils == 0:\n            pencils_each = total_pencils // num_pupils\n            return pencils_each\n\nans = solution()"
    ],
    "5290a7a4297b46f79f02b35ba7b86bba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    kevin, sara, james = symbols('kevin sara james')\n    \n    equation1 = Eq(kevin, sara + 30)\n    equation2 = Eq(james, sara + 40)\n    equation3 = Eq(kevin + sara + james, 160)\n    \n    solutions = solve((equation1, equation2, equation3), (kevin, sara, james))\n    \n    return solutions[kevin]\n\nans = solution()"
    ],
    "c21adc6d12784b558ba6313332b0f960": [
        "from math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef solution():\n    numbers = [4, 6, 7]\n    ans = lcm(numbers[0], numbers[1])\n    for number in numbers[2:]:\n        ans = lcm(ans, number)\n    return ans\n\nans = solution()"
    ],
    "40292969e8e14e9cbeb87311d97671dc": [
        "def solution():\n    M = 1\n    while True:\n        remainders = {M % i for i in range(2, 11)}\n        if len(remainders) == 9 and all(remainders):\n            return M\n        M += 1\n\nans = solution()"
    ],
    "8e019855e907491ab5c9eee5d32827fc": [
        "def solution():\n    lcm = (24 * 8) // math.gcd(24, 8)\n    return lcm\n\nimport math\nans = solution()"
    ],
    "9eed42cf78144b53839062fc748a2a6b": [
        "def solution():\n    total_apples = 37\n    apples_per_container = 4\n\n    num_containers = (total_apples + apples_per_container - 1) // apples_per_container\n\n    return num_containers\n\nans = solution()"
    ],
    "071a1796963f4c3b964229a2d8a43b31": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    romily, reema = symbols('romily reema')\n\n    equation = Eq(romily, reema + 10)\n    solution = solve(equation, reema)\n\n    return solution[reema]\n\nans = solution()"
    ],
    "976d0ed32bf84f5083e1272cd57f3a72": [
        "def solution():\n    books_fish = 78\n    books_birds = 78 - 12\n    total_books = books_fish + books_birds\n    return total_books\n\nans = solution()"
    ],
    "4bc3c98e818346f4be4d3e3f73cdd332": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n    \n    both_competitions = math_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "1daaad84df24455faa123c07aa34efd8": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(10):\n            if 8 * (10 * a + b) == 3 * (10 * b + a):\n                return 10 * a + b\n\nans = solution()"
    ],
    "fe1ec268421740a592e27756f3a3f6ed": [
        "def solution():\n    from math import gcd\n    \n    def perfect_square_factor(num):\n        factors = {}\n        for i in range(2, num + 1):\n            while num % i == 0:\n                factors[i] = factors.get(i, 0) + 1\n                num //= i\n        multiplier = 1\n        for factor, power in factors.items():\n            if power % 2 != 0:  # If the power is odd\n                multiplier *= factor\n        return multiplier\n\n    number = 28\n    ans = perfect_square_factor(number)\n    return ans\n\nans = solution()"
    ],
    "ac392742b1ee4f6d953d5d00c6d023b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    allison, ben, eunice = symbols('allison ben eunice')\n\n    equation1 = Eq(allison, ben - 6)\n    equation2 = Eq(eunice, 3 * ben)\n    equation3 = Eq(allison + ben + eunice, 74)\n\n    solutions = solve((equation1, equation2, equation3), (allison, ben, eunice))\n\n    return solutions[eunice]\n\nans = solution()"
    ],
    "762ea7c4f43b426abdae8d0c00523b6d": [
        "def solution():\n    length = 480\n    distance_between_posts = 4\n\n    # The total number of posts includes one at each end of the fence.\n    num_posts = (length / distance_between_posts) + 1\n\n    return int(num_posts)\n\nans = solution()"
    ],
    "d9d2b528c7a443f89a86e5b624e1ee62": [
        "def solution():\n    ans = (612 // 34) * 25\n    return ans\n\nans = solution()"
    ],
    "9cd4bf4428bf41138128774d0ccd221a": [
        "def solution():\n    positive_sum = sum([10, 20, 30, 50, 60, 70])\n    negative_sum = sum([6, 16, 26, 46, 56, 66])\n    ans = positive_sum - negative_sum\n    return ans\n\nans = solution()"
    ],
    "5e82be0f6fa64850ad780e72281f7277": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    lunch_end_time = datetime.strptime('14:50', '%H:%M')\n    total_time_before_lunch = timedelta(minutes=10 + 20 + 20)\n    home_arrival_time = lunch_end_time - total_time_before_lunch\n    return home_arrival_time.strftime('%H:%M')\n\nans = solution()"
    ],
    "c49dc118c0ec4d2aa50863db0c43cc31": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    andrew, louise = symbols('andrew louise')\n    \n    equation1 = Eq(andrew, 3 * louise)\n    equation2 = Eq(andrew + louise, 84)\n    \n    solutions = solve((equation1, equation2), (andrew, louise))\n    \n    return solutions[louise]\n\nans = solution()"
    ],
    "d6fa863308bf4180b14d7c87b45ff7fe": [
        "def solution():\n    initial_rabbits = 64\n    years = 5\n    rabbits = initial_rabbits * (2.5 ** years)\n    return int(rabbits)\n\nans = solution()"
    ],
    "1463a32cbb5c44b19f250a84a1236899": [
        "def solution(y, x):\n    return y == 6 * x\n\nans = solution"
    ],
    "dcab993860a143ab9ab270b31a317e8a": [
        "def solution():\n    for num in range(99, 9, -1):\n        if num % 4 == 3 and num % 5 == 3:\n            return num\n\nans = solution()"
    ],
    "7ada23a33bc94088ae1ae8186b32007c": [
        "def solution():\n    from math import factorial\n\n    # Consider A and B as a single entity.\n    # There are 5 entities to arrange (AB, C, D, E, F).\n    ways_to_arrange_5_entities = factorial(5)\n    \n    # A and B can have two arrangements AB or BA.\n    ways_to_arrange_A_and_B = factorial(2)\n\n    # Total arrangements are the product of these two possibilities.\n    total_ways = ways_to_arrange_5_entities * ways_to_arrange_A_and_B\n    \n    return total_ways\n\nans = solution()"
    ],
    "6d5c4a1d978545239a3df4d8d35da342": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n\n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "c530bf9072b44544be96e328b31dddec": [
        "def solution():\n    # Starting with the smallest class size where each student gets at least 5 sweets\n    # and increasing the class size until the sweets can't be distributed evenly.\n    class_size = 1\n    while True:\n        if 138 % class_size == 0 and 138 // class_size >= 5:\n            ans = class_size\n        if 138 // class_size < 5:\n            break\n        class_size += 1\n    return ans\n\nans = solution()"
    ],
    "5dd30416f315499b8a0dbde91c6c41cf": [
        "def solution():\n    return 246 * 135 + 2 * 135\n\nans = solution()"
    ],
    "dabcd77349ae4d299a61e7caf4c19962": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, green, purple = symbols('red green purple')\n\n    # givens\n    equation1 = Eq(red, green / 4)\n    equation2 = Eq(red, purple * 3 / 5)\n    total_mass = Eq(red * 4 + green * 5 + purple * 7, 642)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2, total_mass), (red, green, purple))\n\n    # get the number of purple balloons\n    return solutions[purple]\n\nans = solution()"
    ],
    "dd6f7bdd1929429eadda217510a131e9": [
        "def solution():\n    road_length = 500\n    interval = 5\n\n    num_trees = (road_length // interval) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "c632ecf0b70c4dc68f095f11d53a2c48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of steps of the escalator\n    x = symbols('x')\n    \n    # Escalator moves at a certain number of steps per second, we’ll call it y\n    y = symbols('y')\n\n    # When Peter walks at 1 step per second, time taken is x steps\n    # Total steps moved (by escalator and Peter) is 10 + 10*y\n    equation1 = Eq(x, 10 + 10*y)\n\n    # When Peter walks at 2 steps per second, time taken is x/2 seconds\n    # Total steps moved (by escalator and Peter) is 16 + 8*y\n    equation2 = Eq(x, 16 + 8*y)\n\n    # Solving the two equations to find the value of x\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "8bb5257fccb34dadb3f706c8afa40ab1": [
        "def solution():\n    tens = 3 * 10\n    hundredths = 33 * 0.01\n    thousandths = 300 * 0.001\n\n    return tens + hundredths + thousandths\n\nans = solution()"
    ],
    "a270f073fd714e96b31da30d7e7b2333": [
        "def solution():\n    james_height = 120\n    difference = 30\n    mark_height = james_height + difference\n    return mark_height\n\nans = solution()"
    ],
    "fc6ca0edb0d64b2c9a19de7afec2cf87": [
        "def solution():\n    total_stickers = 243\n    stickers_per_child = 6\n    remaining_stickers = 3\n\n    children = (total_stickers - remaining_stickers) // stickers_per_child\n\n    return children\n\nans = solution()"
    ],
    "728ef59836434ae1bf3a1b1506cf0b69": [
        "def solution():\n    percentage = 25\n    total = 1200\n\n    result = (percentage / 100) * total\n    return result\n\nans = solution()"
    ],
    "0f2e5c37cda24be7a26aca5a0cef0e9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jon, miguel = symbols('jon miguel')\n    \n    equation1 = Eq(jon, miguel * 1.3)\n    equation2 = Eq(jon + miguel, 46)\n    \n    solutions = solve((equation1, equation2), (jon, miguel))\n\n    return solutions[jon]\n\nans = solution()"
    ],
    "296f5e0875b34350bfa03c591217b39e": [
        "def solution():\n    total_blocks = 20\n    blocks_given = total_blocks * (1/4)\n    blocks_left = total_blocks - blocks_given\n    return blocks_left\n\nans = solution()"
    ],
    "52c6df5f73ca41218bfc3137351d2ab7": [
        "def solution():\n    for hundreds in range(2, 10, 2):  # hundreds digit must be even, smaller than 10\n        for tens in range(0, 10, 2):  # tens digit must be even\n            ones = hundreds * 2  # ones digit is twice the hundreds digit\n            if ones >= 10 or ones <= 0 or tens <= hundreds or ones == tens or hundreds == tens:\n                continue  # skip the invalid scenarios\n            number = hundreds * 100 + tens * 10 + ones\n            if number % 2 == 0 and number % 9 == 0:  # check divisibility by 2 and 9\n                return number\n\nans = solution()"
    ],
    "f24a947247034c0d9d80524cd5787f66": [
        "def solution():\n    ans = 7268 + 94 + 567\n    return ans\n\nans = solution()"
    ],
    "a3a5c767bd45427d82afb83f82fc1001": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sally, ken = symbols('sally ken')\n\n    equation1 = Eq(sally / ken, 5/7)\n    equation2 = Eq((sally + 24) / (ken - 24), 2)\n\n    solutions = solve((equation1, equation2), (sally, ken))\n\n    return solutions[ken] - 24\n\nans = solution()"
    ],
    "51079614a5ec47b0b15c1b5488ae900f": [
        "def solution():\n    ans = 478 - 189\n    return ans\n\nans = solution()"
    ],
    "1e972793be384a17b12b0af5d4176a57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of one colour pencil and one notebook\n    pencil, notebook = symbols('pencil notebook')\n    \n    # Define the equations based on the problem statements\n    equation1 = Eq(5 * pencil + 6 * notebook, 17)\n    equation2 = Eq(8 * pencil + 6 * notebook, 20)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (pencil, notebook))\n    \n    # Calculate the total cost of 1 colour pencil and 1 notebook\n    total_cost = solutions[pencil] + solutions[notebook]\n    \n    return total_cost\n\nans = solution()"
    ],
    "5efa232175da4ea8aef5abb6b0a6ab63": [
        "def solution():\n    bill = 82\n    free_hours = 40\n    additional_hours = 0\n\n    cost_40_to_50 = 5 * (50 - 40)\n    if bill <= cost_40_to_50:\n        additional_hours = bill / 5\n    else:\n        bill -= cost_40_to_50\n        additional_hours += 10\n\n        cost_50_to_60 = 8 * (60 - 50)\n        if bill <= cost_50_to_60:\n            additional_hours += bill / 8\n        else:\n            bill -= cost_50_to_60\n            additional_hours += 10\n\n            additional_hours += bill / 15\n\n    total_hours = free_hours + additional_hours\n    return total_hours\n\nans = solution()"
    ],
    "89a89120ab754c9caf6049809ce30d70": [
        "def solution():\n    bill = 55\n    tip_percent = 20 / 100\n    tax_percent = 10 / 100\n    \n    tip = bill * tip_percent\n    tax = bill * tax_percent\n    total_cost = bill + tip + tax\n    \n    return total_cost\n\nans = solution()"
    ],
    "c57f27a1e67c4f79802030c3561c11d4": [
        "def solution():\n    sides_in_square = 4\n    sides_in_triangle = 3\n    \n    number = (sides_in_square * 2) - sides_in_triangle\n    return number\n\nans = solution()"
    ],
    "c38be742ce424260a3f93e4e8335becf": [
        "def solution():\n    original_pay = 7.50\n    increase_percentage = 12\n    new_pay = original_pay * (1 + increase_percentage / 100)\n    return new_pay\n\nans = solution()"
    ],
    "8696d8e4602b473aa501ef6f73193bfa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    raju, vijay, patrick = symbols('raju vijay patrick')\n    \n    equation1 = Eq(raju, 3 * vijay)\n    equation2 = Eq(raju, patrick + 152)\n    equation3 = Eq((raju + vijay + patrick) / 3, 507)\n\n    solutions = solve((equation1, equation2, equation3), (raju, vijay, patrick))\n\n    return solutions[vijay]\n\nans = solution()"
    ],
    "02949cc66116485ca8bed41784c54430": [
        "def solution():\n    audrey_water = 177\n    jane_water = audrey_water + 32\n    \n    total_water = audrey_water + jane_water\n    return total_water\n\nans = solution()"
    ],
    "8fddb6866a0c42b6905b4afb3024b9c9": [
        "def solution():\n    ans = 89 * 19\n    return ans\n\nans = solution()"
    ],
    "60f1559c0b6c431ebd109f40541ca33e": [
        "def solution():\n    ans = 96 * 8\n    return ans\n\nans = solution()"
    ],
    "6b90c037d1be47a69b827f642dbed228": [
        "def solution():\n    digits_per_page = 9\n    total_digits = 1014\n    page_count = 0\n\n    for i in range(1, total_digits + 1):\n        if i < 10:  # 1-9\n            page_count += 1\n        elif i < 190:  # 10-99\n            page_count += 1 / 2\n        else:\n            page_count += 1 / 3\n\n    return int(page_count)\n\nans = solution()"
    ],
    "63b0962a80a14f52b0f59716321e5cc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(34 - 3 * (2 * x - 2), 16)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "fc089fb6a2704dc6baf4797d3c3c45b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n\n    # Let's denote the new numbers after adding magic_number as n1 and n2\n    n1 = 57 + magic_number\n    n2 = 9 + magic_number\n\n    # According to the question, the first new number (n1) is 4 times the second new number (n2)\n    equation = Eq(n1, 4 * n2)\n\n    # Solve for magic_number\n    solution = solve(equation, magic_number)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "0f2da0528c2f48f5870753bbc07cdc39": [
        "from math import comb\n\ndef solution():\n    total_ways = 2 * (comb(13, 4))  # total ways to choose 4 students out of 13 with 2 teachers\n    ways_without_female = 2 * (comb(7, 4))  # ways to choose 4 male students without any female\n\n    # Subtracting the ways without a female from the total ways to get the ways with \n    # at least one female\n    ans = total_ways - ways_without_female \n    return ans\n\nans = solution()"
    ],
    "b4eefed42dc74e7e8e95f0ff3ff68f36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 * x + 6, x + 16)\n    solution = solve(equation, x)\n    \n    return solution[0]\n    \nans = solution()"
    ],
    "27fb27320fd24c98af0e5d6caa596fae": [
        "def solution():\n    # Joanna gets £5.00 each week\n    joanna_weekly = 5.00\n    # Amy gets £3.50 each week\n    amy_weekly = 3.50\n    # Amy spends 75p a week on stickers\n    amy_spent_weekly = 0.75\n    # Number of weeks\n    weeks = 5\n\n    # Calculate the total amount saved by Joanna\n    joanna_total = joanna_weekly * weeks\n    # Calculate the total amount saved by Amy minus the amount she spent\n    amy_total = (amy_weekly * weeks) - (amy_spent_weekly * weeks)\n\n    # Calculate the difference\n    difference = joanna_total - amy_total\n\n    return difference\n\nans = solution()"
    ],
    "151555f881df4432befb850114db3fff": [
        "def solution():\n    monthly_salary = 3.248\n    debt = 1.6\n    months_needed = debt / monthly_salary\n    return months_needed\n\nans = solution()"
    ],
    "874bf5bc08b84870965ca710d514ca6c": [
        "def solution():\n    ans = 0\n    for i in range(1, 8):\n        ans += (10 * i) - (6 + (i - 1) * 10)\n    ans += 2021\n    return ans\n\nans = solution()"
    ],
    "7cd83847e1cb45e8af9499a2ccb9d6d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, sister = symbols('alice sister')\n    \n    equation1 = Eq(alice, 2 * sister)\n    equation2 = Eq(alice + 10 + sister + 10, 53)\n\n    solutions = solve((equation1, equation2), (alice, sister))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "6a672f1831e34d92bcdd43e39b7f6729": [
        "def solution():\n    milk_per_cup = 2/3\n    tea_per_cup = 3/5\n    cups = 45\n\n    total_milk = milk_per_cup * cups\n    total_tea = tea_per_cup * cups\n\n    total_amount = total_milk + total_tea\n\n    return total_amount\n\nans = solution()"
    ],
    "bce90c0bc27243dbbf3b460013299a73": [
        "def solution():\n    marks_scored = 17\n    total_marks = 20\n    percentage = (marks_scored / total_marks) * 100\n    return percentage\n\nans = solution()"
    ],
    "96fe43257ccf486992d5d460d0a71d9a": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n    term_difference = fifteenth_term - tenth_term\n    common_difference = term_difference // (15 - 10)\n\n    twelfth_term = tenth_term + common_difference * (12 - 10)\n    \n    return twelfth_term\n\nans = solution()"
    ],
    "a0351e748b1c43eea23b3f8711946c24": [
        "def solution():\n    n = 10\n    nth_term = 5 * n\n    return nth_term\n\nans = solution()"
    ],
    "1c0ea42cfd6a4ccbbe8d53d2ca3efe95": [
        "def solution():\n    # Degree of the monomial is the sum of the exponents of all variables\n    # Degree of -x^3y^(2n) = 3 + 2n\n    # We know the degree is 5, so we set up the equation 3 + 2n = 5\n    # Now, we solve this simple equation for n\n    \n    degree = 5\n    x_exponent = 3\n    # 3 + 2n = 5\n    n = (degree - x_exponent) / 2\n    return n\n\nans = solution()"
    ],
    "4971d043e24c45eea658bd168d78c5f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book_price, pencil_price = symbols('book_price pencil_price')\n    equation = Eq(8 * book_price + 3 * pencil_price, 3 * book_price + 8 * pencil_price + 1)\n\n    pencil_price = 40 / 100  # convert pence to pounds\n\n    book_price = solve(equation.subs('pencil_price', pencil_price), book_price)\n    \n    return float(book_price[0])\n\nans = solution()"
    ],
    "c73139012b3a4617bcdf34be499ab519": [
        "def solution():\n    n = 100\n    ans = n * (n + 1) // 2\n    return ans\n\nans = solution()"
    ],
    "f51ebd85ffb142399f8aa45e108f8c7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables for the number of gummy bears each girl buys\n    angela, bernice, candice = symbols('angela bernice candice')\n    \n    # Define the relationships and total cost\n    equation1 = Eq(angela, bernice + 2)\n    equation2 = Eq(bernice, candice + 8)\n    equation3 = Eq((angela + bernice + candice) * 6, 342)  # Total cost in pence\n    \n    # Solve for the variables\n    solutions = solve((equation1, equation2, equation3), (angela, bernice, candice))\n    \n    return solutions[angela]\n\nans = solution()"
    ],
    "f63a917efc384a819f65597f5c2cdf8e": [
        "def solution():\n    total_litres = 10\n    litres_per_container = 2\n    num_containers = total_litres / litres_per_container\n    return int(num_containers)\n\nans = solution()"
    ],
    "93002079121d48f6aea4f803b68b139d": [
        "def solution():\n    # Let the first number be x. \n    # Then the numbers are x, x+1, x+2 and their sum is 3x+3.\n    # According to the problem statement, 3x+3 = 60\n    # Solve for x to find the first number, then x+2 is the largest number.\n    \n    # Calculate the value of x\n    x = (60 - 3) // 3\n    \n    # The largest number is x+2\n    return x + 2\n\nans = solution()"
    ],
    "175f3134588c438fbd11afdc6d088ab3": [
        "def solution():\n    # Since the median of the list is 20 and the list has 10 elements (even) \n    # the median is the average of the 5th and the 6th terms\n\n    # We can write down the values of the 5th term (n + 7) and the 6th term (n + 8)\n    # The average of the 5th and 6th terms gives us the median\n    median = (20 + 20) / 2  # given\n    fifth_sixth_avg = ((n + 7) + (n + 8)) / 2\n\n    # since the median is known to be 20, set the average equal to 20 and solve for n\n    n = symbols('n')\n    equation = Eq(fifth_sixth_avg, median)\n\n    # Solve the equation for n\n    solution_n = solve(equation, n)\n\n    # Now we calculate the mean of the list using the value of n\n    mean = (n + (n + 2) + (n + 3) + (n + 5) + (n + 7) + (n + 8) + (n + 11) + (n + 14) + (n + 16) + (n + 19)) / 10\n\n    # Substitute the value of n we found into the mean formula\n    mean_value = mean.subs(n, solution_n[0])\n\n    return mean_value\n\nans = solution()"
    ],
    "f64bb6d575274f2eb7aed9c54b618daf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables for the weight of the apples\n    a, b, c = symbols('a b c')\n    \n    # Let 'a' be the weight of the largest apple, 'b' and 'c' the weight of the remaining ones\n    # Create the equations based on the given conditions\n    equation1 = Eq((b + c) / 2, 70)  # Average weight of remaining apples after eating the largest one\n    equation2 = Eq((a + c) / 2, 105)  # Average weight of remaining apples after eating the lightest one\n    \n    # We also know that 'a' is the largest and 'b' is the smallest\n    # 'c' is the remaining one, so 'a' > 'c' > 'b'\n    \n    # Since Tim had three apples to begin with, we can express 'c' in terms of 'a' and 'b'\n    equation3 = Eq((a + b + c), a + 2 * 70)\n    equation4 = Eq((a + b + c), b + 2 * 105)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (a, b, c))\n    \n    # Calculate the weight difference between the heaviest and the lightest apple\n    weight_diff = solutions[a] - solutions[b]\n    \n    return weight_diff\n    \nans = solution()"
    ],
    "0d1b0c5f7803452da1653f98e4626d11": [
        "def solution():\n    return 427 // 7\n\nans = solution()"
    ],
    "384f0b70b2a44ba7beb5d3d58e5f61b3": [
        "def solution():\n    total_members = 17\n    non_shaking_groups = 4\n\n    # Total handshakes if everyone shook hands once\n    total_handshakes = total_members * (total_members - 1) // 2\n\n    # Handshakes that didn't happen within the non-shaking group\n    non_shakes = non_shaking_groups * (non_shaking_groups - 1) // 2\n\n    # Subtract the non-shakes from the total_possible_handshakes\n    actual_handshakes = total_handshakes - non_shakes\n\n    return actual_handshakes\n\nans = solution()"
    ],
    "b502e3de36614cb6b890c32cf02729c5": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    A = symbols('A')\n    equation = Eq((A*10 + A) + (A*100 + A*10 + A), 532)\n\n    sol = solve(equation, A)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "7be31461e97f4911bea77bc2fc190e08": [
        "def solution():\n    first_term = 2\n    difference = 4\n    n = 11\n\n    # Use the formula for the nth term of an arithmetic sequence: a_n = a_1 + (n - 1) * d\n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "888de29c136b4d85b33e27c600d1d94a": [
        "def solution():\n    nate_age = 11\n    sister_age = nate_age + 2\n    return sister_age\n\nans = solution()"
    ],
    "8aa228a35f9341e2ba3ad7168a64568b": [
        "def solution():\n    # We know the new number is the original number with a '0' on the right.\n    # So the new number can be written as 10 * original_number.\n    # It is given that new number is greater than the original number by 27.\n    # This can be written as: 10 * original_number = original_number + 27\n    # Solving the equation: 10 * original_number - original_number = 27\n    # 9 * original_number = 27\n    # original_number = 27 / 9\n    original_number = 27 // 9\n    \n    return original_number\n\nans = solution()"
    ],
    "ae79c827ac84468cbfe680efa5f4322f": [
        "def solution():\n    # Bob is always the 3rd in line, no matter the direction he counts.\n    # This means the array of animals must be rectangular in shape.\n    # If Bob is always the 3rd, then there must be 2 animals before and after him in every direction.\n    # Hence, the array must be 5 animals long and 5 animals wide.\n    \n    # Calculate the total number of animals in the array.\n    total_animals = 5 * 5\n    \n    return total_animals\n\nans = solution()"
    ],
    "6fd47ac3b3fb42dca4192701b2a036bb": [
        "def solution():\n    return 245 // 5\n\nans = solution()"
    ],
    "4f74241972d3482ca774dea7319f446e": [
        "def solution():\n    smallest_multiple = (100 // 11 + 1) * 11\n    largest_multiple = (300 // 11) * 11\n    sum_of_multiples = smallest_multiple + largest_multiple\n    return sum_of_multiples\n\nans = solution()"
    ],
    "a45e4fa740df4a7baa653312b07f2227": [
        "def solution():\n    # Length of the road with plum trees\n    distance_plum = (41 - 1) * 4  # Trees at both ends; thus, 41 - 1 intervals\n\n    # Length of intervals for pine trees = 5m\n    interval_pine = 5\n\n    # Number of pine trees\n    num_pine_trees = (distance_plum // interval_pine) + 1 \n\n    return num_pine_trees\n\nans = solution()"
    ],
    "a5d9770a94fa4709a356e767867213ac": [
        "def solution():\n    incorrect_total = 4000 * 12\n    correct_total = incorrect_total - 2800 + 3040\n    correct_average = correct_total / 12\n    return correct_average\n\nans = solution()"
    ],
    "dae17711b2cd4d8882ad91e169803384": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    durian, honeydew = symbols('durian honeydew')\n\n    equation1 = Eq(2 * durian + 3 * honeydew, 77)\n    equation2 = Eq(durian, 2 * honeydew)\n\n    solutions = solve((equation1, equation2), (durian, honeydew))\n\n    return solutions[durian]\n\nans = solution()"
    ],
    "004ab338da1a4dada61e061cc3b9f844": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let h be the height of one unit of coin\n    # Let x be the number of one-cent coins, y be the two-cent coins, and z be the five-cent coins per stack\n    h, x, y, z = symbols('h x y z')\n\n    # Equations based on the problem statement\n    eq1 = Eq(6*x, 5*y)  # Stacking 6 one-cent coins = Stacking 5 two-cent coins\n    eq2 = Eq(4*x, 3*z)  # Stacking 4 one-cent coins = Stacking 3 five-cent coins\n    eq3 = Eq(x + y + z, 124)  # Total number of coins used\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (x, y, z))\n\n    # Calculate the total value of all coins\n    total_value = solutions[x] * 1 + solutions[y] * 2 + solutions[z] * 5\n\n    return total_value\n\nans = solution()"
    ],
    "9bdf1b39c69d40c192cf8573177c7066": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(17*x - 3*(6 + x), 9*x + 32)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "ed97e5e57d5b40ec8113dcb104438e54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B = symbols('A B')\n    \n    # Equation representing the fact that A has 350 mL more than B\n    equation1 = Eq(A, B + 350)\n    \n    # After spilling 500 mL, B now has twice as much water as A\n    equation2 = Eq(B, 2 * (A - 500))\n    \n    # Solve equations for A and B\n    solutions = solve((equation1, equation2), (A, B))\n    \n    return solutions[A]\n\nans = solution()"
    ],
    "0eb5531c437b4567aef0bba6c28958a4": [
        "def solution(m):\n    num_monthly_components = m / 12\n    return num_monthly_components\n\nans = solution(m)  # where m is the total number of components"
    ],
    "a3c32223f3b045ae854ecf8d286778e6": [
        "def solution():\n    max_red_pens = 0\n    for green in range(1, 100):\n        blue = (2 / 5) * green\n        red = (1 / 4) * green\n        if blue % 1 == 0 and red % 1 == 0 and blue + green + red < 100:\n            max_red_pens = max(max_red_pens, red)\n    return int(max_red_pens)\n\nans = solution()"
    ],
    "25c62dcd851e4ad1b5f7189dcfb4ed2b": [
        "def solution():\n    initial_money = 200\n    money_spent_on_books = initial_money * 0.25\n    money_left_after_books = initial_money - money_spent_on_books\n    money_spent_on_dvd = money_left_after_books * 0.20\n    money_left = money_left_after_books - money_spent_on_dvd\n    \n    return money_left\n\nans = solution()"
    ],
    "3f99ba9a016d4255a61b7cc828b2284d": [
        "def solution():\n    original_boys = 216\n    original_girls = 153\n    children_joined = 37\n    total_children_after = original_boys + original_girls + children_joined\n    return total_children_after\n\nans = solution()"
    ],
    "e990e7f85afe4ec8b4a88f34ca128f91": [
        "def solution():\n    cans_per_day = 42 / 6\n    cans_in_9_days = cans_per_day * 9\n    return cans_in_9_days\n\nans = solution()"
    ],
    "3d026487768a4329970e9623128a6980": [
        "def solution():\n    ans = 56 + 78 + 44 + 22\n    return ans\n\nans = solution()"
    ],
    "e8a29ad030a44c90b8487dcc6ab6265a": [
        "def solution():\n    # A number is divisible by 6 if it is divisible by both 2 and 3.\n    # Divisibility rule for 2: The last digit is even.\n    # Divisibility rule for 3: The sum of the digits is divisible by 3.\n\n    # Since the number is a palindrome and has six digits, it has the form: abccba\n    # To be divisible by 2, 'a' must be even.\n    # To optimize the search, we start from the largest possible even number for 'a', which is 9,\n    # but considering 'a' must be even, the largest possible value for 'a' is 8.\n    # We decrement 'a' by 2 to ensure it is always even.\n\n    for a in range(8, -1, -2):\n        for b in range(9, -1, -1):\n            for c in range(9, -1, -1):\n                # Constructing the palindrome number abccba\n                number = int(f\"{a}{b}{c}{c}{b}{a}\")\n                # Check for the divisibility by 3\n                if number % 3 == 0:\n                    return number\n    return None\n\nans = solution()"
    ],
    "b0e8486e84644676b58c927c2f5c98ee": [
        "def solution():\n    desired_length_m = 1.83  # desired length in metres\n    shortage_cm = 10         # shortage in centimetres\n\n    # Convert the shortage to metres\n    shortage_m = shortage_cm / 100\n\n    # Calculate the length of the piece in the garage in metres\n    garage_piece_length_m = desired_length_m - shortage_m\n\n    return garage_piece_length_m\n\nans = solution()"
    ],
    "4e932e68be27467ea297053d9901fc5e": [
        "def solution():\n    pattern = [8, 8, 3, 3, 2, 5, 3, 3, 2, 5]\n    pattern_length = len(pattern)\n    \n    full_patterns = 41 // pattern_length\n    remaining_numbers = 41 % pattern_length\n    \n    sum_full_patterns = sum(pattern) * full_patterns\n    sum_remaining_numbers = sum(pattern[:remaining_numbers])\n    \n    total_sum = sum_full_patterns + sum_remaining_numbers\n    \n    return total_sum\n\nans = solution()"
    ],
    "5a0d6b60b12e4a5fa3381f303b4ec98e": [
        "def solution():\n    fraction = 2/7\n    whole_number = 315\n    result = fraction * whole_number\n    return result\n\nans = solution()"
    ],
    "3bd10f66a047470cb619292f83def4bd": [
        "def solution():\n    total_pins_needles = 2540\n    sold_pins = 1820\n    remaining_pins = total_pins_needles - sold_pins\n    # Paul's claim is 4u = sold_pins, 1u = remaining_needles\n    # which would mean originally there are 5u needles.\n    pauls_claim_needles = remaining_pins\n\n    # Based on pauls claim, we calculate how many needles there should have been originally\n    pauls_original_needles = 5 * pauls_claim_needles\n    # And then deduct the sold needles (4/5 of the original needles)\n    paul_sold_needles = (4/5) * pauls_original_needles\n\n    # Find the remainder of pins based on Paul's claim\n    remaining_pins_pauls_claim = total_pins_needles - paul_sold_needles\n\n    if remaining_pins_pauls_claim == pauls_claim_needles:\n        # Paul's solution is correct\n        return pauls_claim_needles\n    else:\n        # Solve the problem with the correct method\n        remaining_needles_fraction = 4/5\n        # Let x be the original amount of needles\n        x = symbols('x')\n        # Equation based on the description:\n        equation = Eq(remaining_pins + (remaining_needles_fraction * x), x + total_pins_needles)\n        # Solve the equation\n        solution = solve(equation, x)\n        # Calculate and return the remaining needles (1 - 4/5 = 1/5 of the original needles)\n        correct_remaining_needles = (1 - remaining_needles_fraction) * solution[x]\n        return correct_remaining_needles\n\nans = solution()"
    ],
    "5ed239080ded493396d3231a4454902f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of marbles Wei Yan had at first\n    x = symbols('x')\n    \n    # Wei Yan gave 3/8 of his marbles to his friends\n    remaining_after_friends = x - (3/8) * x\n    \n    # He gave 5/7 of the remaining marbles to his brother\n    remaining_after_brother = remaining_after_friends - (5/7) * remaining_after_friends\n    \n    # His cousin gave him 408 marbles\n    final_count = remaining_after_brother + 408\n    \n    # In the end, he had twice as many marbles as he had at first\n    equation = Eq(final_count, 2 * x)\n    \n    # Solve for the number of marbles Wei Yan had at first\n    initial_marbles = solve(equation, x)\n    \n    return initial_marbles[0]\n\nans = solution()"
    ],
    "c7a29e2ef9654a2a957ff7a2cb12c3aa": [
        "def solution():\n    count = 0\n    for two_pence_coins in range(0, 47 // 2 + 1):\n        for five_pence_coins in range(0, 47 // 5 + 1):\n            if 2 * two_pence_coins + 5 * five_pence_coins == 47:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "ce5f19623c5a44689e7c49754192cf5a": [
        "def solution():\n    numerator = (9+10+11)/8 - (10+11+12)/9 + (11+12+13)/10 - (12+13+14)/11\n    denominator = 1/8 - 1/9 + 1/10 - 1/11\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "591840ca7c7b45a5bd7b76b65a763eeb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n    equation = Eq(52 - (4*x - 3), 47)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "ef45cb41c0684c548c0b00944deb7b6e": [
        "def solution():\n    count = 0\n    for x1 in range(1, 11):\n        for x2 in range(1, 11 - x1):\n            x3 = 11 - x1 - x2\n            if x3 > 0:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "7a275792c5364908a3e7b3c7c4d8f6af": [
        "def solution():\n    # Round off each number to the nearest hundred\n    num1_rounded = round(654876, -2)\n    num2_rounded = round(279745, -2)\n    \n    # Calculate the estimated difference\n    estimated_difference = num1_rounded - num2_rounded\n    \n    return estimated_difference\n\nans = solution()"
    ],
    "9aae6b402ba548c6930873d942339f30": [
        "def solution():\n    time_to_pass = 16  # seconds\n    length_of_train = 480  # meters\n    \n    speed_of_train = length_of_train / time_to_pass  # meters per second\n    speed_in_kph = speed_of_train * 3.6  # converting from m/s to km/h\n    \n    return speed_in_kph\n\nans = solution()"
    ],
    "58b3af9d6c964137b1edfb53c29428ea": [
        "def solution():\n    return sum(range(1, 6)) + sum(range(1, 5))\n\nans = solution()"
    ],
    "98c9966f7fd249d7beb63974bfe3742c": [
        "def solution():\n    # Initially, we are given the Brian's age as 14 and his father's age as 41.\n    # We also know the difference in their ages is constant over time.\n    age_diff = 41 - 14\n\n    # The next time Brian's age is the reverse of his father's age,\n    # their ages (in years) could be represented as 'ab' and 'ba' respectively,\n    # where 'a' and 'b' are digits in decimal representation.\n    # So, Brian's age could be the integer b*10 + a and his father's age a*10 + b.\n    # Since the difference in their ages is the same, we can write the following equality:\n    # (a*10 + b) - (b*10 + a) = age_diff\n    # Simplifying this, we get:\n    # 9a - 9b = age_diff -> a - b = age_diff/9\n    \n    # We look for the smallest 'a' and 'b' satisfying the reverse age condition.\n    # Let's loop over possible values of Brian's age\n    for brian_age in range(15, 100):  # Brian has to be younger than 100\n        father_age = brian_age + age_diff\n        a, b = divmod(father_age, 10) \n        if brian_age == (b * 10 + a) and a - b == age_diff // 9:\n            return brian_age\n\n    # In case there is no solution which should not happen\n    return None\n\nans = solution()"
    ],
    "80a6303359124d99934818dd22810e2e": [
        "def solution():\n    ans = 49 + 83\n    return ans\n\nans = solution()"
    ],
    "fbf2d88569644819af3dd38084210d8b": [
        "def solution():\n    cost_per_kg = 3.60 / 2.5\n    cost_for_3_5_kg = cost_per_kg * 3.5\n    return cost_for_3_5_kg\n\nans = solution()"
    ],
    "20e6b2c641d34326ba0e011da65e2397": [
        "def solution():\n    ans = 20.6 + 5.2 + 1.4 + 4.8\n    return ans\n\nans = solution()"
    ],
    "4b78873d37fb432ca3d3cbcd97a41dd1": [
        "def solution():\n    # Initialize the count of ways to 0\n    count = 0\n    \n    # Loop through all possible values for the first number\n    for x1 in range(1, 8):\n        # Loop through all possible values for the second number, such that the\n        # sum of the first and the second number doesn't exceed 8\n        for x2 in range(1, 8 - x1):\n            # Every valid (x1, x2) pair represents a way to split 8 as the sum\n            # of two non-zero natural numbers. Now check if there are more numbers.\n            remainder = 8 - (x1 + x2)\n            \n            # If the remainder is non-zero, it means it's a valid way to write\n            # 8 as the sum of more than two non-zero natural numbers.\n            if remainder > 0:\n                # We add the combinations of splitting the remainder.\n                # The number of ways to split the remainder is 2^(remainder-1) - 1.\n                # We subtract 1 to exclude the case where the remainder is not split.\n                count += (2 ** (remainder - 1)) - 1\n            else:\n                # If the remainder is zero, it means we have a valid way to split\n                # 8 as the sum of exactly two non-zero natural numbers.\n                count += 1\n    \n    return count\n\nans = solution()"
    ],
    "2fb1bc8c622247da958854a407c487b9": [
        "def solution():\n    return (2/5) * 30\n\nans = solution()"
    ],
    "6b573c8aa446405c9ce58ca024a8db57": [
        "def solution():\n    result = (5/8) * 4000\n    return result\n\nans = solution()"
    ],
    "67f220877e984c29ad61b7f41c214535": [
        "def solution():\n    value = (10 ** 5) / (5 ** 5)\n    return value\n\nans = solution()"
    ],
    "5f04cbde7c154926a18bd9d4d73e17bf": [
        "def solution():\n    erased_numbers = [i for i in range(1, 51) if '3' in str(i)]\n    sum_erased = sum(erased_numbers)\n    return sum_erased\n\nans = solution()"
    ],
    "3b599d1537964d4d8232681ee0808bca": [
        "def solution():\n    number_of_lampposts = 113\n    distance_between_lampposts = 8\n    # Subtract 1 because if there's a lamppost at the start and at the end, we need one less interval\n    length_of_road = (number_of_lampposts - 1) * distance_between_lampposts\n    \n    return length_of_road\n\nans = solution()"
    ],
    "66221e9a8b3746c485f75a9f4a5d0ddb": [
        "def solution():\n    types_of_pasta = 4\n    types_of_sauces = 3\n    types_of_toppings = 3\n\n    combinations = types_of_pasta * types_of_sauces * types_of_toppings\n\n    return combinations\n\nans = solution()"
    ],
    "48554051f2e24553a7af8d7920ec5816": [
        "def solution():\n    total_pupils = 40\n    failed_pupils = 14\n    percentage_failed = (failed_pupils / total_pupils) * 100\n    return percentage_failed\n\nans = solution()"
    ],
    "7ef36b5f0f06421e85d5adcf3d61a56c": [
        "def solution():\n    # Using the worst case scenario in line with the pigeonhole principle.\n    # For the last classroom, there will be only one key left, so no need to try it.\n    # For the second to last classroom, there may be 2 keys left, so he has to try at most 2 times, and so on.\n    # Therefore, the worst-case number of tries follows the formula for the sum of the first n natural numbers.\n    num_classrooms = 10\n    max_tries = sum(range(1, num_classrooms + 1))\n\n    return max_tries\n\nans = solution()"
    ],
    "a54ae46dec7f42e29795d23b9ef90715": [
        "def solution():\n    numbers = [0.89, 0.9, 0.17, 0.72, 0.73]\n    difference = max(numbers) - min(numbers)\n    return difference\n\nans = solution()"
    ],
    "5ffbee4470f04187ad886c281d595cc1": [
        "def solution():\n    total_guests = 153\n    bag_size = 12\n    poppers_left = total_guests % bag_size\n    return poppers_left\n\nans = solution()"
    ],
    "8523b28be59d40be8d747baa32fe31b2": [
        "def solution():\n    base = 7\n    exponent = 2023\n    ones_digit = pow(base, exponent, 10)  # Calculate the last digit only\n    return ones_digit\n\nans = solution()"
    ],
    "5e5e594f0cb646f382c3348317a05dec": [
        "def solution():\n    for number in range(999, 99, -1):\n        if (number % 5 == 3) and (number % 6 == 2) and (number % 7 == 1):\n            return number\n\nans = solution()"
    ],
    "e47aa6dbf96a4f8f919752049304b476": [
        "def solution():\n    least_5_digit_palindrome = int('10001')\n    greatest_6_digit_palindrome = int('999999')\n    difference = greatest_6_digit_palindrome - least_5_digit_palindrome\n    return difference\n\nans = solution()"
    ],
    "dd388341dc404def898b956143854ae5": [
        "from math import comb\n\ndef solution():\n    num_children = 10\n    num_picked = 2\n\n    ans = comb(num_children, num_picked)\n\n    return ans\n\nans = solution()"
    ],
    "66eeed32cf3f4adc8bdbd45de1710156": [
        "def solution():\n    from decimal import Decimal, getcontext\n\n    # Set precision for Decimal operations\n    getcontext().prec = 6\n\n    # Convert the repeating decimals to Decimal\n    neg_thirteen_dot_3 = Decimal(-40) / Decimal(3)\n    four_dot_09 = Decimal(372) / Decimal(99)\n    sqrt_eleven_dot_1 = Decimal(100) / Decimal(9)\n\n    # Calculate the values\n    cube_root = neg_thirteen_dot_3 ** (Decimal(1) / Decimal(3))\n    four_dot_09_squared = four_dot_09 ** Decimal(2)\n    sqrt_result = sqrt_eleven_dot_1.sqrt()\n    denominator = Decimal('59.24') - sqrt_result\n\n    # Final expression calculation\n    ans = ((cube_root * four_dot_09_squared) / denominator).quantize(Decimal('0.001'))\n\n    return ans\n\nans = solution()"
    ],
    "d6c0469e3c2e4cf7ada3a095234ebb1c": [
        "def solution():\n    # Create the initial string by concatenating integers from 1 to 30\n    num_str = ''.join(str(i) for i in range(1, 31))\n\n    # Sort the string to get the smallest digits in front\n    sorted_str = sorted(num_str)\n\n    # Since we need to remove 46 numbers, we keep the smallest 54-46=8 \n    smallest_number_str = ''.join(sorted_str[:8])\n\n    # Convert the string back to an integer to remove leading zeros, if any\n    smallest_number = int(smallest_number_str)\n    \n    # Return the smallest number we can get by removing 46 digits\n    return smallest_number\n\nans = solution()"
    ],
    "4f5cb4eaf89140bd9217b1719727dd6c": [
        "def solution():\n    ans = (32 - 15) - 12\n    return ans\n\nans = solution()"
    ],
    "f189c3cfa2ce4635aec8a32b63b8d264": [
        "def solution():\n    boys = 20\n    total_members = boys * 4  # Boys are 1/4 of the total, so multiply by 4 to get the total\n    girls = total_members * 3 // 4  # Three quarters are girls\n    \n    return girls\n\nans = solution()"
    ],
    "889138baccd24c1b9eb080bdb667f596": [
        "def solution():\n    sara_age = 8\n    lucy_age = 36\n    target_sum_age = 60\n\n    years_later = (target_sum_age - (sara_age + lucy_age)) / 2\n\n    return int(years_later)\n\nans = solution()"
    ],
    "e097362981d0409885ba18d30b163d07": [
        "def solution():\n    ans = 11 + 17 + 9 - 7 + 12 + 8\n    return ans\n\nans = solution()"
    ],
    "540be23e94244c70aad6ecd37c304418": [
        "def solution():\n    two_seater_benches = 6\n    three_seater_benches = 9\n\n    total_seats = (two_seater_benches * 2) + (three_seater_benches * 3)\n\n    return total_seats\n\nans = solution()"
    ],
    "468559e91e614d4bae2de59111f672af": [
        "def solution():\n    book_cost = 15.49\n    payment = 16  # since we pay with 1-pound coins and we need more than 15 pounds\n    change = payment - book_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "ac29be7b853c4812bccecb19739c2026": [
        "def solution():\n    sequence = [99, -101, 103, -105, 107, -109, 111, -113, 115, -117, 119]\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "216cb1366d314b5dbd12758607304eb7": [
        "def solution():\n    value = 201 + 1/7\n    A = value / 8 - 1/7\n    return A\n\nans = solution()"
    ],
    "adb16ed119df40bda080aaed7ef8ac1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define symbols for the cost of a banana and apple.\n    banana, apple = symbols('banana apple')\n\n    # Setting up equations based on the problem statement\n    equation1 = Eq(2 * banana + 3 * apple, 1.50)\n    equation2 = Eq(3 * banana + 2 * apple, 1.45)\n\n    # Solving the equations\n    solution = solve((equation1, equation2), (banana, apple))\n\n    # Calculating the cost for 1 banana and 1 apple\n    annabella_payment = solution[banana] + solution[apple]\n\n    return float(annabella_payment)\n\nans = solution()"
    ],
    "680ddbe0ce3c49ce854bcd2f1ea66237": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the number of footballs originally be f and the number of basketballs be b\n    f, b = symbols('f b')\n    \n    # There were 2/5 as many footballs as basketballs\n    equation1 = Eq(f, 2/5 * b)\n    \n    # After 16 basketballs were sold, the store had 2/3 as many footballs as basketballs (b - 16)\n    equation2 = Eq(f, 2/3 * (b - 16))\n    \n    # Solve the equations for f and b\n    solutions = solve((equation1, equation2), (f, b))\n    \n    # Total number of footballs and basketballs at first\n    total = solutions[f] + solutions[b]\n    \n    return total\n\nans = solution()"
    ],
    "04c5b12aa7f042fabd03ff53cb7e08e1": [
        "def solution():\n    marshmallows_per_minute = 5\n    minutes = 5\n    total_marshmallows = marshmallows_per_minute * minutes\n    return total_marshmallows\n\nans = solution()"
    ],
    "ce3e27f032134ea699180a318687918c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # let x be the current age of the older brother and y the current age of the younger brother\n    x, y = symbols('x y')\n    \n    # when the older brother was the age the younger brother is now, the younger brother was 12\n    equation1 = Eq(x - y, 12)\n    \n    # when the younger brother is as old as the older brother is now, the older brother will be 27\n    equation2 = Eq(x + (x - y), 27)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # we are interested in the older brother's age\n    return solutions[x]\n\nans = solution()"
    ],
    "01951c851f4d440aa5d5a49d736fb69d": [
        "def solution():\n    first_multiple = (30 + 7) // 8 * 8\n    last_multiple = 82 // 8 * 8\n    \n    num_multiples = (last_multiple - first_multiple) // 8 + 1\n    \n    return num_multiples\n\nans = solution()"
    ],
    "32eb233b7b8648fc98ae6c8e1000cce8": [
        "def solution():\n    lines = 13\n    max_junctions = lines * (lines - 1) // 2\n    return max_junctions\n\nans = solution()"
    ],
    "7e57b2275ee24957a6f27d1a194a17fe": [
        "def solution():\n    # To guarantee a pair of gloves of the same color, Rona must take out at least\n    # one glove more than the product of the number of colors and the number of gloves\n    # needed for a pair minus 1 (since we need one glove of a color to form a pair with\n    # the last drawn glove of the same color).\n    \n    colors = 5\n    gloves_per_pair = 2\n    \n    # Maximum number of gloves to draw without guaranteeing a pair is\n    # (colors * (gloves_per_pair - 1)), so we add 1 to ensure a pair.\n    gloves_to_draw = colors * (gloves_per_pair - 1) + 1\n    \n    return gloves_to_draw\n\nans = solution()"
    ],
    "3127ad21500549f99d1530b6020f645c": [
        "def solution():\n    original_price = 120\n    spring_festival_price_increase = original_price * 0.10\n    spring_festival_price = original_price + spring_festival_price_increase\n    lantern_festival_price_decrease = spring_festival_price * 0.10\n    lantern_festival_price = spring_festival_price - lantern_festival_price_decrease\n    \n    return lantern_festival_price\n\nans = solution()"
    ],
    "c6d0a3426bdd48c09f8e5ed6be864293": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sam, peter = symbols('sam peter')\n    \n    # Original amounts\n    original_sam = peter + 40\n    \n    # After transactions\n    sam_gives = original_sam * 0.20\n    peter_gives = (peter + sam_gives) * 0.25\n    final_sam = original_sam - sam_gives + peter_gives\n    final_peter = peter + sam_gives - peter_gives\n    \n    # Final difference\n    equation = Eq(final_sam - final_peter, 96)\n    \n    # Solve the equation to find the amount Peter had originally\n    solution = solve(equation, peter)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "83eeb3967efd4f44ae944aeda3665452": [
        "def solution():\n    ans = 1.3 + 2.87 + 3.7\n    return ans\n\nans = solution()"
    ],
    "3117c2400ae549259f555f986ce29058": [
        "def solution():\n    # number of players in each group\n    players_per_group = 16 // 4\n    \n    # games within each group, using the formula n * (n-1) / 2 for a round-robin tournament\n    games_per_group = players_per_group * (players_per_group - 1) // 2\n    \n    # total games in the group stage for all the groups\n    group_stage_games = games_per_group * 4\n    \n    # games in the knockout stage: top 8, top 4, top 2 and the final game\n    # top 8 (4 games), top 4 (2 games), top 2 (1 game), third place (1 game)\n    knockout_stage_games = 8 - 1  # 7 games for 8 players in a knockout stage\n    \n    # total games played throughout the contest\n    total_games = group_stage_games + knockout_stage_games\n    \n    return total_games\n\nans = solution()"
    ],
    "a10dc724d9ee4196877466390813cdbe": [
        "def solution():\n    for sweets in range(31, 40):\n        if sweets % 4 == 0 and sweets % 6 == 0:\n            return sweets\n\nans = solution()"
    ],
    "e72ae7b5041949c2b5780adfc4f7a4d6": [
        "def solution():\n    # Flora's current age\n    flora_age_now = 5\n    # Flora's age two years ago\n    flora_age_two_years_ago = flora_age_now - 2\n    # Father's age two years ago\n    father_age_two_years_ago = 9 * flora_age_two_years_ago\n    # Father's current age\n    father_age_now = father_age_two_years_ago + 2\n\n    return father_age_now\n\nans = solution()"
    ],
    "f324ee4f900c4965905630c53b282ca4": [
        "def solution():\n    return 122.55 + 9.45 + 13.21 - 3.21\n\nans = solution()"
    ],
    "5a2adc2e38cb4df2b6461fbcb699d0a0": [
        "def solution():\n    # Convert 7.2 minutes to hours as the speeds are in km/h\n    total_time_in_hours = 7.2 / 60\n\n    # Speed of the teacher\n    teacher_speed = 12\n\n    # Speed of the students\n    student_speed = 8\n\n    # Relative speed when the teacher is running towards the head of the line\n    relative_speed_towards = teacher_speed + student_speed\n\n    # Relative speed when the teacher is running back to the end\n    relative_speed_back = teacher_speed - student_speed\n\n    # Let the length of the line be x (km)\n    # Time taken to reach the head of the line = x / relative_speed_towards\n    # Time taken to return to the end of the line = x / relative_speed_back\n    # Total time is the sum of both times and is equal to total_time_in_hours\n    # x / relative_speed_towards + x / relative_speed_back = total_time_in_hours\n    # Solving for x gives us the length of the line\n\n    # Combine both terms over a common denominator to solve for x\n    # (x * relative_speed_back + x * relative_speed_towards) / (relative_speed_towards * relative_speed_back) = total_time_in_hours\n    # x * (relative_speed_back + relative_speed_towards) = total_time_in_hours * relative_speed_towards * relative_speed_back\n    # x = total_time_in_hours * relative_speed_towards * relative_speed_back / (relative_speed_back + relative_speed_towards)\n\n    x = total_time_in_hours * relative_speed_towards * relative_speed_back / (relative_speed_back + relative_speed_towards)\n    return x\n\nans = solution()"
    ],
    "3e2cfeed3b034453a6cd4c890991cff6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bugcat, pusheen, doggo = symbols('bugcat pusheen doggo')\n\n    equation1 = Eq(bugcat, 5 * pusheen)\n    equation2 = Eq(bugcat, doggo + 53)\n    equation3 = Eq(bugcat + pusheen + doggo, 189)\n\n    solutions = solve((equation1, equation2, equation3), (bugcat, pusheen, doggo))\n\n    return solutions[doggo]\n\nans = solution()"
    ],
    "1191b2497aca4e478f89acd3913baa4b": [
        "def solution():\n    ans = 1.1 * (1.2 + 1.3) * 2\n    return ans\n\nans = solution()"
    ],
    "92b6d681156647e98a2b8f515678090b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote 'd' as the distance from Mike's home to office,\n    # 't' as the original time he was supposed to take to reach office at 4 km/h\n    d, t = symbols('d t')\n    \n    # Equation 1: Relationship between speed, time, and distance at 4 km/h,\n    # plus being 20 min (1/3 hr) late\n    eq1 = Eq(d, 4 * (t + 1/3))\n    \n    # Equation 2: Relationship between speed, time, and distance at 6 km/h,\n    # reaching 10 min (1/6 hr) early\n    eq2 = Eq(d, 6 * (t - 1/6))\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (d, t))\n    \n    return solutions[d]\n\nans = solution()"
    ],
    "ccee253cade74bf4b980a1d6da9300b1": [
        "def solution():\n    ans = 902 - 387\n    return ans\n\nans = solution()"
    ],
    "7c0a8adbe97047ac8c3d2545bed65331": [
        "def solution():\n    count = 0\n    for i in range(1, 26):\n        number = 2 * i\n        count += str(number).count('3')\n    return count\n\nans = solution()"
    ],
    "fd011cee8c7149b08bd7a235ce74b4b0": [
        "def solution():\n    # The given value of £1 in pounds\n    value_in_pounds = 1.25\n    # Since 1 pound (£) is equal to 100 pence, we need to convert the pounds to pence\n    value_in_pence = value_in_pounds * 100\n    \n    # Returning the converted value in pence\n    return value_in_pence\n\nans = solution()"
    ],
    "7f5de3640130476b8479c8c57c6cceab": [
        "def solution():\n    ramen_cost = 8\n    juice_cost = ramen_cost - 5\n    duck_cost = 6 * ramen_cost\n    total_cost = ramen_cost + juice_cost + duck_cost\n    \n    return total_cost\n\nans = solution()"
    ],
    "8adc9a67754d493090774f606c1387c2": [
        "def solution():\n    count = 0\n    for i in range(8, 86):\n        count += str(i).count('3')\n        if '3' in str(i):\n            last_num = i\n            \n    last_position = str(last_num).index('3') + 1\n    ans = count - (2 - last_position)\n    return ans\n\nans = solution()"
    ],
    "aea05f0dcdd04e4c903d863ad3465317": [
        "from math import factorial\n\ndef solution():\n    total_letters = 4\n    repeated_z = 2\n    arrangements = factorial(total_letters) // factorial(repeated_z)\n    return arrangements\n\nans = solution()"
    ],
    "5f10a8b2ef2a4f548faa94902d80cc0f": [
        "def solution():\n    remaining = 3\n    # reverse Ken's action\n    ken_taken = (remaining + 1) * 2\n    remaining += ken_taken\n    # reverse Nini's action\n    nini_taken = (remaining - 3) * 2\n    remaining += nini_taken\n    # reverse Ivy's action\n    ivy_taken = (remaining + 2) * 2\n    remaining += ivy_taken\n    # reverse Eddie's action\n    eddie_taken = (remaining - 1) * 2\n    remaining += eddie_taken\n\n    return remaining\n\nans = solution()"
    ],
    "e4bf62e1d6374c7db8fdd451a0891d39": [
        "def solution():\n    total_distance = 18\n    daily_climb = 7\n    sixth_day_climb = 3\n    day_six_position = (6 - 1) * daily_climb - (5 - 1) * sixth_day_climb\n\n    if day_six_position < total_distance:\n        nightly_slide = day_six_position - sixth_day_climb\n\n    return nightly_slide\n\nans = solution()"
    ],
    "d2ad7065c3964fdb85960dd64b7389fe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    roses, tulips, sunflowers = symbols('roses tulips sunflowers')\n    \n    equation1 = Eq(tulips, 3 * roses)\n    equation2 = Eq(sunflowers, roses + 40)\n    equation3 = Eq(roses + tulips + sunflowers, 590)\n\n    solutions = solve((equation1, equation2, equation3), (roses, tulips, sunflowers))\n\n    return solutions[roses]\n\nans = solution()"
    ],
    "c03d7d32adb849f8813c089f2f3caaaa": [
        "def solution():\n    ans = 24 * 25 * 31\n    return ans\n\nans = solution()"
    ],
    "f4a5d0f84ea8406fbac7ecee01ee432d": [
        "def solution():\n    from math import gcd\n\n    num_students_A = 12\n    num_students_B = 16\n    num_students_C = 20\n\n    common_gcd = gcd(num_students_A, gcd(num_students_B, num_students_C))\n\n    return common_gcd\n\nans = solution()"
    ],
    "f5e0a986e3934f67ba17ff2b35ad8068": [
        "def solution():\n    m = 12 ** 2\n    n = 3 ** 2 * 2 ** 3\n    ans = m + n\n    return ans\n\nans = solution()"
    ],
    "26234260bf8544e8be9832159593b76c": [
        "def solution():\n    # g = number of girls, b = number of boys\n    # g = 3b and 2g + 3b = 99\n    # Solve for g using these equations\n    for b in range(1, 99):\n        g = 3 * b\n        if 2 * g + 3 * b == 99:\n            return g\n\nans = solution()"
    ],
    "c49b5ae0746f481e9831c9c0d1d6f386": [
        "def solution():\n    # Convert all estimates to cm for comparison\n    height_5m_in_cm = 5 * 100  # since 1 m = 100 cm\n    height_120cm = 120  # already in cm\n    height_50mm_in_cm = 50 / 10  # since 1 cm = 10 mm\n    height_8feet_in_cm = 8 * 30.48  # since 1 foot = 30.48 cm\n    \n    # Create a list of the converted height estimates\n    heights_in_cm = [height_5m_in_cm, height_120cm, height_50mm_in_cm, height_8feet_in_cm]\n    \n    # Correct height of a pupil in cm (average height of 11 year olds is roughly between 130-160 cm)\n    min_height_cm = 130\n    max_height_cm = 160\n    \n    # Find which estimates are possibly correct, within the range for 11-year-olds\n    correct_estimates = [height for height in heights_in_cm if min_height_cm <= height <= max_height_cm]\n    \n    # Return the number of possibly correct estimates\n    return len(correct_estimates)\n\nans = solution()"
    ],
    "a6e45aae06f442f6a7eb0e90e00a24ed": [
        "def solution():\n    first_term = 124\n    common_difference = 121 - 124\n    nth_term = first_term + (15 - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "2c231e6d73964ddb90cae67a6e2c06ca": [
        "def solution():\n    total_boys = 18\n    average_boys = 74\n    total_participants = 18 + 12\n    average_participants = 82\n    \n    total_score_boys = total_boys * average_boys\n    total_score_all = total_participants * average_participants\n    \n    total_score_girls = total_score_all - total_score_boys\n    average_girls = total_score_girls / 12\n    \n    return average_girls\n\nans = solution()"
    ],
    "1f89b3dca16b41f3af194d672af50912": [
        "def solution():\n    from math import lcm\n    \n    # Length of pieces for Alyson, Clara, and Joyce\n    alyson_piece = 2\n    clara_piece = 3\n    joyce_piece = 5\n    \n    # Calculate the least common multiple of the lengths\n    ans = lcm(alyson_piece, clara_piece, joyce_piece)\n    \n    return ans\n\nans = solution()"
    ],
    "6c12066021f245adb5fffd4e97a9c889": [
        "def solution():\n    # Using the capture-recapture method to estimate the total population\n    marked_fish_first_catch = 100\n    total_fish_second_catch = 200\n    marked_fish_second_catch = 25\n\n    # Estimate the total fish population\n    estimated_total_fish = (marked_fish_first_catch * total_fish_second_catch) / marked_fish_second_catch\n\n    return estimated_total_fish\n\nans = solution()"
    ],
    "9cd0dd31a2934eacb9090d85b490b36e": [
        "def solution():\n    total_food_units = 12 * 15  # Total food units is the product of rabbits and days\n    days_for_20_rabbits = total_food_units / 20  # Dividing total food units by 20 rabbits\n\n    return days_for_20_rabbits\n\nans = solution()"
    ],
    "a31cc8dad19349aebe0414ae78e4bc33": [
        "def solution():\n    susan_money = 10\n    money_given = 22\n    dress_cost = 56\n\n    total_money = susan_money + money_given\n    money_needed = dress_cost - total_money\n\n    return money_needed\n\nans = solution()"
    ],
    "71033e51e28146eea6ced67678e21748": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    wake_up_time = datetime.strptime(\"07:40\", \"%H:%M\")\n    breakfast_duration = timedelta(minutes=25 + 10)\n    journey_duration = timedelta(minutes=35)\n    late_duration = timedelta(minutes=5)\n\n    registration_time = wake_up_time + breakfast_duration + journey_duration - late_duration\n    \n    return registration_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "1e148bc64be04bd6b16fe0c8028ec408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chloe, maggie, lily, george = symbols('chloe maggie lily george')\n\n    equation1 = Eq(chloe + maggie + lily, 187)\n    equation2 = Eq(maggie + lily + george, 327)\n    equation3 = Eq(george, 5 * chloe)\n\n    solutions = solve((equation1, equation2, equation3), (chloe, maggie, lily, george))\n\n    total_sweets = sum(solutions.values())\n    return total_sweets\n\nans = solution()"
    ],
    "40402588d4b04fcc949d1665e6d2b545": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    # equation representing the total number of trees\n    equation1 = Eq(boys + girls, 100)\n    # equation representing the difference in the number of trees planted by girls and boys\n    equation2 = Eq(girls - boys, 12)\n\n    # solve the system of equations\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "bedd8521f63647f2a0a12a31cd344069": [
        "def solution():\n    salt_per_packet = 0.23\n    packets = 6\n\n    total_salt = salt_per_packet * packets\n\n    return total_salt\n\nans = solution()"
    ],
    "932b8a20d21b4686a582828ee98ca875": [
        "def solution():\n    return 952 + 139\n\nans = solution()"
    ],
    "fc9b83fecfb44012b1232f0149dad1f8": [
        "def solution():\n    sum_first_20 = (20*(20+1)//2)**2\n    sum_first_10 = (10*(10+1)//2)**2\n    ans = sum_first_20 - sum_first_10\n    return ans\n\nans = solution()"
    ],
    "3133bc72d66445bb9b6aa55994df350f": [
        "def solution():\n    total_amount = 2 + 1/2\n    quarters_in_one_dollar = 4\n    total_quarters = total_amount * quarters_in_one_dollar\n    return int(total_quarters)\n\nans = solution()"
    ],
    "ebd7e33ee05545079118ad813f66ccf7": [
        "def solution():\n    total_score_for_5_assignments = 90 * 5\n    score_so_far = 96 + 85 + 89 + 92\n    fifth_assignment_score = total_score_for_5_assignments - score_so_far\n    return fifth_assignment_score\n\nans = solution()"
    ],
    "9ff9e65c65be4e54bb20e233432fc9bb": [
        "def solution():\n    count = 0\n    for two_gram_count in range(0, 77 // 2 + 1):\n        for three_gram_count in range(0, 77 // 3 + 1):\n            if two_gram_count * 2 + three_gram_count * 3 == 77:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "5caaa9b1c72e4cf7b0f5d589bbf27d1a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of cards Jason has\n    x = symbols('x')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(x % 4, 3)\n    equation2 = Eq(x % 5, 4)\n    equation3 = Eq(x % 7, 6)\n\n    # Solve the system of congruences\n    solutions = solve((equation1, equation2, equation3), (x))\n\n    # Return the least positive solution\n    return min(solutions)\n\nans = solution()"
    ],
    "09d73c26d27144a79753ab402d8e3506": [
        "def solution():\n    total_pupils = 200\n    pupils_per_coach = 34\n    coaches_needed = (total_pupils + pupils_per_coach - 1) // pupils_per_coach\n    return coaches_needed\n\nans = solution()"
    ],
    "dfae10a6a701443a9ac7f6922b150321": [
        "def solution():\n    # Set up the equations based on the problem description\n    total_pupils = 1690\n    girls = (total_pupils - 90) / 2\n    boys = girls + 90\n    girls_can_swim = 31 / 80 * girls\n    girls_cannot_swim = 49 / 80 * girls\n    boys_cannot_swim = boys / 2 + 60\n    boys_can_swim = boys_cannot_swim - 120\n\n    # Calculate the number of pupils who cannot swim\n    cannot_swim = girls_cannot_swim + boys_cannot_swim\n\n    return int(cannot_swim)\n\nans = solution()"
    ],
    "95d8e98043834da0a4c0071a63f5ea23": [
        "def solution():\n    # To ensure we have at least 5 different colors with at least 10 pencils for each color,\n    # we need to consider the worst-case scenario where we pick the maximum number of pencils from\n    # 4 colors without reaching the fifth color. So for each of the first four colors, we could pick up\n    # to 9 (one less than 10) without satisfying the condition. For the fifth color, we will certainly\n    # satisfy the condition after picking 10 pencils. \n\n    # Pencils picked from the first four colours (worst case)\n    pencils_four_colours = 4 * 9\n    \n    # Pencils picked from the fifth colour to satisfy the condition\n    pencils_fifth_colour = 10\n\n    # Calculating the total\n    total_pencils = pencils_four_colours + pencils_fifth_colour\n\n    return total_pencils\n\nans = solution()"
    ],
    "3477e87e292f48ec8ee3fc913b1a71ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip, bud = symbols('pip bud')\n    initial_ratio = Eq(pip / bud, 4 / 7)\n    new_ratio = Eq((pip) / (bud + 5), 8 / 15)\n\n    solutions = solve((initial_ratio, new_ratio), (pip, bud))\n\n    return solutions[pip]\n\nans = solution()"
    ],
    "19a6283fdef941a5aa103bd8c0a0d755": [
        "def solution():\n    last_digit_5 = 5\n    last_digit_7 = 7 ** 30 % 10\n\n    ans = (last_digit_5 * last_digit_7) % 10\n\n    return ans\n\nans = solution()"
    ],
    "c7e71280a8ab4500a65a6e96a34fd78a": [
        "def solution():\n    length = 144\n    width = 204\n    total_wheats = 116\n\n    # Subtract the corners since they're already counted (1 wheat per corner)\n    wheats_on_sides = total_wheats - 4\n\n    # Divide the remaining wheat into two equal parts for length and width\n    # Each side will be divided equally into the number of segments equal to wheats on that side minus 1\n    # (e.g., if there are 3 wheats on a side, there are 2 segments between them)\n    wheats_on_length = (wheats_on_sides // 2) // 2 + 1  # Plus the corners\n    wheats_on_width = wheats_on_sides // 2 - wheats_on_length + 2  # Plus the corners\n\n    # Find the distance between two wheats on the length and the width of the rectangle\n    distance_length = length / (wheats_on_length - 1)\n    distance_width = width / (wheats_on_width - 1)\n\n    # Since the wheats are evenly planted, the distance should be the same along length and width\n    # We return one of the distances, whichever is computed last and correct\n    return distance_width\n\nans = solution()"
    ],
    "4be8de9c0cc14f33b367a9c501a90089": [
        "def solution():\n    from math import gcd\n\n    length1 = 39\n    length2 = 52\n\n    ans = gcd(length1, length2)\n\n    return ans\n\nans = solution()"
    ],
    "99d7b27d46844be596baf37965890e96": [
        "def solution():\n    total_squares = 16\n    num_people = 2  # Joe and his friend\n    squares_per_person = total_squares // num_people  # Integer division since squares can't be split\n    return squares_per_person\n\nans = solution()"
    ],
    "73b357f92b7e40399f2271567c50156d": [
        "def solution():\n    return 999 / 2\n\nans = solution()"
    ],
    "cda998982a894cdb8077bdfb4a0b2764": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's define symbols for the points for an A and a B\n    A, B = symbols('A B')\n    \n    # Now let's set up our equations based on the provided information\n    # Simon has 4 A's and 4 B's for a total of 36 points\n    # Peter has 2 A's and 3 B's for a total of 22 points\n    equation1 = Eq(4*A + 4*B, 36)\n    equation2 = Eq(2*A + 3*B, 22)\n    \n    # Solve the system of equations for A and B\n    solutions = solve((equation1, equation2), (A, B))\n    \n    # Calculate the score for someone with 3 A grades and 5 B grades using the obtained values for A and B\n    score = 3*solutions[A] + 5*solutions[B]\n    \n    return score\n\nans = solution()"
    ],
    "fc68f114d75f4d00a000bd9a959d7bb8": [
        "def solution():\n    # Generate a list of prime numbers less than 45\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n\n    # Iterate over all possible combinations of three different prime numbers\n    for A in primes:\n        for B in primes:\n            for C in primes:\n                if A != B and B != C and A != C:\n                    # Check if A, B, C cannot form a correct addition equation\n                    if not (A + B == C or A + C == B or B + C == A):\n                        # Check if B - 1 has a difference of 7 with A or C\n                        if abs(B - 1 - A) == 7 or abs(B - 1 - C) == 7:\n                            # Check if doubling C can allow forming a correct addition equation with A and B\n                            if A + B == 2 * C or A + 2 * C == B or B + 2 * C == A:\n                                return A + B + C\n\nans = solution()"
    ],
    "536fb0bff4d04a49a0e59a954dc6348a": [
        "def solution():\n    laura_position = 4\n    amanda_position_from_end = 7\n    children_between = 2\n\n    total_children = laura_position + children_between + amanda_position_from_end\n\n    return total_children\n\nans = solution()"
    ],
    "4741132a2a6e4fd9b62cc955675da60c": [
        "def solution():\n    count = 0\n    for i in range(1, 121):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "7217243413c449e2bad76755d71dd583": [
        "def solution():\n    people_got_off = 42\n    people_got_on = 60\n    people_after_stop = 322\n\n    people_before_stop = people_after_stop - people_got_on + people_got_off\n\n    return people_before_stop\n\nans = solution()"
    ],
    "104714b036e84a2696f951000c89ff03": [
        "def solution():\n    seconds_per_day = 24 * 60 * 60  # 24 hours in a day, 60 minutes in an hour, 60 seconds in a minute\n    fraction_of_day = (1/4) * (1/6) * (1/8)\n    seconds = seconds_per_day * fraction_of_day\n\n    return int(seconds)\n\nans = solution()"
    ],
    "2583cc3e3e5749a5bdc1a87f0ef8ed05": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 + 8 * (50 - 3 * x), 92)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8d2b72129fea4fe2bed54b1710b74200": [
        "def solution():\n    A = 2  # Smallest prime number\n    B = 4  # Smallest composite number\n    C = 1  # Neither prime nor composite nor zero\n    D = 0  # 2 less than the smallest prime number\n    E = 9  # Largest composite number up to 10\n    F = 5  # Number with factors 1 and 5\n    G = 4  # Greatest factor of 8\n    H = 6  # Lowest multiple of 6\n    \n    phone_number = f\"{A}{B}{C}{D}{E}{F}{G}{H}\"\n    return phone_number\n\nans = solution()"
    ],
    "39ff6ce753bc44909a9a09937c88d468": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the numbers of Mary, Alexis, and Charlotte's stickers\n    marry_initial, alexis_initial, charlotte_initial, charlotte_final = symbols('marry_initial alexis_initial charlotte_initial charlotte_final')\n\n    # Marry and Alexis give 20% of their stickers to Charlotte\n    marry_final = marry_initial - 0.20 * marry_initial\n    alexis_final = alexis_initial - 0.20 * alexis_initial\n\n    # Charlotte's stickers increase by 80%\n    charlotte_increase = Eq(charlotte_final, charlotte_initial + 0.80 * charlotte_initial)\n\n    # The final equation solving for the condition that Mary has 20 stickers more than Charlotte in the end\n    marry_final_condition = Eq(marry_final, charlotte_final + 20)\n\n    # Maintain the initial ratio between Mary and Alexis\n    ratio_condition = Eq(marry_initial / alexis_initial, 7 / 5)\n\n    # The total number of stickers after Charlotte received the gifts\n    total_final = marry_final + alexis_final + charlotte_final\n\n    # Solve the system of equations\n    solutions = solve((charlotte_increase, marry_final_condition, ratio_condition, total_final), (marry_initial, alexis_initial, charlotte_initial, charlotte_final))\n\n    # We want to find the initial number of stickers Alexis had\n    return solutions[alexis_initial]\n\nans = solution()"
    ],
    "c08789bee10c46c2902b114a45c0d0a6": [
        "def solution():\n    return 34 * 100\n\nans = solution()"
    ],
    "0756d6f5711a4c54986ef915e57a0ccd": [
        "from itertools import permutations\n\ndef solution():\n    digits = '22233'\n    distinct_permutations = set(permutations(digits))\n    count = sum(1 for perm in distinct_permutations if perm[0] != '0')\n    return count\n\nans = solution()"
    ],
    "78b02b5b75964068adef771a062c712c": [
        "def solution():\n    # Calculating the number of ways for Eddie and his mom and dad to line up together.\n    # There are 3 people in the family (Eddie, mom, dad), and they can line up in 3! (factorial) ways.\n    family_permutations = math.factorial(3)\n    \n    # Once considered as a single unit, we have (n-2)! ways to arrange the remaining (n - 1) people plus the family unit.\n    # Assuming \"n\" is the total number of people including Eddie and his parents.\n    \n    # Since the question does not specify the total number of people including the family,\n    # Let's assume the family units are the only ones to consider for lineup.\n    # That would mean n = 3, and we just use the family_permutations calculated.\n    \n    # Total arrangements including the family unit as one unit.\n    total_arrangements = family_permutations\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "007602e598e6490ea3de0467b56b3e6a": [
        "def solution():\n    num_pages = 95\n    max_days = 1\n    \n    while (max_days * (max_days + 1)) // 2 <= num_pages:\n        max_days += 1\n    max_days -= 1\n    \n    return max_days\n\nans = solution()"
    ],
    "d4071be0f0c7425fb8d8e725d1b67417": [
        "def solution():\n    for i in range(1, 10):  # Thousands digit (same as units digit) must be from 1 to 9\n        for j in range(10):  # Tens and hundreds digit can be from 0 to 9\n            for k in range(10):\n                pip_number = int(f\"{i}{j}{k}{i}\")  # Construct Pip's number based on the given conditions\n                bud_number = int(f\"{i}{k}{j}{i}\")  # Construct Bud's number by reversing tens and units\n                if pip_number + bud_number == 5510:  # Check if the sum matches the given total\n                    return pip_number  # Return Pip's number if condition is met\n\nans = solution()"
    ],
    "c1c6e64207724fd1a56270ce126df35a": [
        "def solution():\n    # Let's calculate the total amount of grass available as cow-days\n    grass_for_25_cows_10_days = 25 * 10\n    grass_for_15_cows_20_days = 15 * 20\n    \n    # Since both situations describe the same amount of grass available, we equate them\n    total_grass = grass_for_25_cows_10_days  # or grass_for_15_cows_20_days\n    \n    # The number of cows that can be fed for 50 days is this total grass divided by 50 days\n    cows_for_50_days = total_grass / 50\n    \n    return cows_for_50_days\n\nans = solution()"
    ],
    "2ab0503d127a4c73a785328ae9680841": [
        "def solution():\n    incorrect_minuend = 116\n    incorrect_difference = 81\n    correct_minuend = 166\n\n    correct_difference = correct_minuend - (incorrect_minuend - incorrect_difference)\n\n    return correct_difference\n\nans = solution()"
    ],
    "a8439e99e6a1477cac347feb553247d6": [
        "def solution():\n    from sympy import symbols, solve\n\n    # Define the variables for oranges and lemons\n    oranges, lemons = symbols('oranges lemons')\n\n    # Set up the initial ratio equation\n    initial_ratio = 3/5 - oranges/lemons\n\n    # Set up the ratio after selling the oranges\n    new_ratio = 1/2 - (oranges - 48)/lemons\n\n    # Solve the system of equations\n    solutions = solve((initial_ratio, new_ratio), (oranges, lemons))\n\n    return solutions[lemons]\n\nans = solution()"
    ],
    "fee3950a7d754643a6574d07b8b3cb97": [
        "def solution():\n    first_day = 20\n    second_day = first_day * 3  # since first day is 1/3 of the second day\n    third_day = second_day * (5/3)  # since third day is 5/3 of the second day\n\n    total_sold = first_day + second_day + third_day\n\n    return int(total_sold)\n\nans = solution()"
    ],
    "319659d1f9494d8da86df50b138ccfd5": [
        "def solution():\n    people_in_front = 7\n    people_behind = 3\n    judy = 1\n    total_people = people_in_front + judy + people_behind\n    return total_people\n\nans = solution()"
    ],
    "f733db5ae9be4fc19b2772e1336899bf": [
        "def solution():\n    flour_per_cake = 200 / 12\n    flour_available = 250\n    num_cakes = flour_available / flour_per_cake\n    return int(num_cakes)\n\nans = solution()"
    ],
    "835aacd2f1bc42c084af969d3791ac9a": [
        "from math import factorial\n\ndef solution():\n    # There are 3 math books, which we can arrange in 3! ways\n    math_book_arrangements = factorial(3)\n    # There are 2 English books, which we can arrange in 2! ways\n    english_book_arrangements = factorial(2)\n    # These two 'batches' are then treated as single units along with the 3 other books,\n    # giving us 5 items to arrange in total\n    total_arrangements = factorial(5)\n    # The total number of arrangements is the product of the arrangements of the batches\n    # and the overall arrangements.\n    return math_book_arrangements * english_book_arrangements * total_arrangements\n\nans = solution()"
    ],
    "c4ecbada09354d1ab1f0f9e6e7430943": [
        "def solution():\n    original_price = 2000\n    discount_rate = 0.30\n    additional_member_discount = 100\n    sales_tax_rate = 0.10\n\n    # Calculate the price after the initial discount\n    price_after_discount = original_price * (1 - discount_rate)\n    \n    # Apply the additional discount for members\n    final_price_before_tax = price_after_discount - additional_member_discount\n    \n    # Calculate the sales tax\n    tax_amount = final_price_before_tax * sales_tax_rate\n    \n    # Calculate the final price after including the tax\n    final_price = final_price_before_tax + tax_amount\n    \n    return final_price\n\nans = solution()"
    ],
    "a6d2722285fe41fc82cfbf38df970e88": [
        "def solution():\n    kilograms = 0.0025\n    grams = kilograms * 1000  # because 1 kilogram is 1000 grams\n    return grams\n\nans = solution()"
    ],
    "52f7ec2008844b4b96f3e14ec5bc08c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of diamonds Ophelia originally had be o\n    # Let the number of diamonds Penelope originally had be p\n    o, p = symbols('o p')\n\n    # Ophelia had 4 times as many diamonds as Penelope originally\n    equation1 = Eq(o, 4 * p)\n\n    # After Penelope bought 21 more diamonds, Penelope had 5/8 as many diamonds as Ophelia\n    equation2 = Eq(p + 21, 5/8 * o)\n\n    # Solve the system of equations for o and p\n    solutions = solve((equation1, equation2), (o, p))\n\n    return solutions[o]\n\nans = solution()"
    ],
    "91b1fa437ec640b6a726e2f243fbcdc6": [
        "def solution():\n    # Given ratio\n    first_ratio = 20/32\n    # Second ratio with missing number x and 8\n    second_ratio = 'x'/8\n    # Set the two ratios equal to find x\n    x = first_ratio * 8\n    return x\n\nans = solution()"
    ],
    "62e6f0c8e4844cf5913cc68756ec307e": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n    \n    # Using the Inclusion-Exclusion Principle\n    both_competitions = math_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "69a10a7a8381484b8df4c3813750ce0c": [
        "def solution():\n    ivy_rate = 1 / 24\n    kevin_rate = 1 / 20\n    total_work = 1\n\n    # Let x be the days Kevin worked\n    from sympy import symbols, Eq, solve\n    x = symbols('x')\n\n    # Equation representing the total work done by Ivy and Kevin\n    equation = Eq((ivy_rate * 12) + (kevin_rate * x), total_work)\n\n    # Solve for x\n    days_kevin_worked = solve(equation, x)\n    days_kevin_worked = days_kevin_worked[0]\n\n    # Kevin takes off the remaining days after he worked for x days\n    kevin_days_off = 12 - days_kevin_worked\n\n    return kevin_days_off\n\nans = solution()"
    ],
    "0fe10f3434414681820fd105b8e64e1a": [
        "def solution():\n    return 379 % 6\n\nans = solution()"
    ],
    "1951c1ebe48e4ad0a4cd072379459f1d": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "3be019225e774908af2f46af704db571": [
        "def solution():\n    # We can use the Pigeonhole principle to determine the minimum number of socks needed.\n    # There are two colors of socks, so after picking 3 socks, we are certain to have a pair of the same color.\n    ans = 3\n    return ans\n\nans = solution()"
    ],
    "59f40a74a46b4f6a92446fb1fe6d3f5b": [
        "from math import factorial\n\ndef solution():\n    n = 9  # total number of statues\n    r = 4  # number of statues to arrange\n    # Number of ways to arrange r statues out of n is given by nPr = n! / (n - r)!\n    arrangements = factorial(n) / factorial(n - r)\n    return int(arrangements)\n\nans = solution()"
    ],
    "2809b71b8eb74287a05d0ce2c1647a67": [
        "def solution():\n    original_price = 10  # price in pence\n    new_price = 100  # price in pence, £1.00 = 100p\n\n    increase = new_price - original_price\n    percentage_increase = (increase / original_price) * 100\n\n    return percentage_increase\n\nans = solution()"
    ],
    "0faafc65dcc940c68dac95ff81fd8bbe": [
        "def solution():\n    bracelet_cost = 80\n    gst_rate = 0.08\n    total_cost = bracelet_cost * (1 + gst_rate)\n    return total_cost\n\nans = solution()"
    ],
    "0fa7fc81f75c4a438c7e27101422e437": [
        "def solution():\n    final_amount = 2360\n    interest_rate = 0.06\n    years = 3\n\n    initial_deposit = final_amount / ((1 + interest_rate) ** years)\n\n    return initial_deposit\n\nans = solution()"
    ],
    "ceb94cece3814f3ba7dbce87461af7eb": [
        "def solution():\n    tricycles, bicycles = symbols('tricycles bicycles')\n    # Total number of vehicles\n    equation1 = Eq(tricycles + bicycles, 300)\n    \n    # Tricycle wheels are 3 per tricycle, bicycle wheels are 2 per bicycle\n    equation2 = Eq(3 * tricycles - 2 * bicycles, 180)\n    \n    # Solving the equations\n    solutions = solve((equation1, equation2), (tricycles, bicycles))\n    \n    return solutions[bicycles]\n\nans = solution()"
    ],
    "e234c915fb16462f9526941f4556b996": [
        "def solution():\n    divisor = 28    # since the remainder is 9, the divisor must be at least 9 + 1\n    quotient = 27\n    remainder = 9\n\n    dividend = (divisor * quotient) + remainder\n    return dividend\n\nans = solution()"
    ],
    "19695e62163a49de8f347a78fa0034ec": [
        "def solution():\n    grey_pattern = 2\n    total_pattern = 1 + 2 + 2  # black + white + grey\n    grey_rabbits = 14\n    full_patterns = grey_rabbits // grey_pattern\n\n    total_rabbits_full_patterns = full_patterns * total_pattern\n    \n    remaining_grey = grey_rabbits % grey_pattern\n    if remaining_grey > 0:\n        # If there are leftover grey rabbits, add 1 black and 2 white rabbits\n        total_rabbits_full_patterns += 1 + 2 + remaining_grey\n\n    return total_rabbits_full_patterns\n\nans = solution()"
    ],
    "02085f3402f64823bda6f851884cad43": [
        "def solution():\n    initial_value = 120\n    depreciation_rate = 0.04\n    years = 5\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n\n    return round(final_value, 2)\n\nans = solution()"
    ],
    "912427a474264adaaabc2ae198e4adde": [
        "def solution():\n    return 6 + 9\n\nans = solution()"
    ],
    "0d77e82eea214976a5d8bf3ab4e08b0b": [
        "def solution():\n    return 2015 * 2015 - 2016 * 2014\n\nans = solution()"
    ],
    "d6f47c7d14794cf0882cbdded57195ef": [
        "def solution():\n    total_biscuits = 36\n    foil_wrappers = 20\n    chocolate_with_foil = 15\n    neither_chocolate_nor_foil = 9\n\n    # Calculate chocolate biscuits using the inclusion-exclusion principle\n    chocolate_biscuits = chocolate_with_foil + neither_chocolate_nor_foil - (total_biscuits - foil_wrappers)\n\n    return chocolate_biscuits\n\nans = solution()"
    ],
    "aba2e0d130f344469e4cfa2b6010392a": [
        "def solution():\n    ans = 3.5 * 0.8 + 5.5 * 0.8 + (4 / 5) * 1\n    return ans\n\nans = solution()"
    ],
    "aa34af4f0c0d4f1193c0c13f4ef71431": [
        "def solution():\n    number = 4 + 0.6 + 0.07 + 0.009\n    ans = round(number, 1)\n    return ans\n\nans = solution()"
    ],
    "061ad10a381246f0b22fbd4f813aa403": [
        "def solution():\n    total = 398\n    return total / 4\n\nans = solution()"
    ],
    "81fcb6311cba411b82d413bf90689157": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be the distance, v be the original speed, and t be the original time.\n    d, v, t = symbols('d v t')\n\n    # Increased speed is 125% of original speed, which decreases time by 20 minutes\n    equation1 = Eq((v * 1.25) * (t - 20/60), d)\n\n    # Decreased speed is v - 45, which increases time by 75%\n    equation2 = Eq((v - 45) * (t * 1.75), d)\n\n    # Original speed and time yields the distance\n    equation3 = Eq(v * t, d)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (d, v, t))\n\n    return solutions[d]\n\nans = solution()"
    ],
    "bddd9a07ce1b4cd89fa99ccb14a387de": [
        "def solution():\n    # Calculate the number of 2s and 5s in the prime factorization of A\n    num_twos = 10\n    num_fives = 15\n\n    # The number of zeros at the end is determined by the pair of 2s and 5s\n    # because 10 = 2 * 5, so we take the minimum of the two counts\n    num_zeros = min(num_twos, num_fives)\n\n    return num_zeros\n\nans = solution()"
    ],
    "f780445f7b1e4a9083acc80c65867dd2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for number of carrots Olaf and Anna have\n    Olaf, Anna = symbols('Olaf Anna')\n\n    # Equation 1: Initially, Olaf had three times as many carrots as Anna\n    equation1 = Eq(Olaf, 3 * Anna)\n\n    # Equation 2: After giving away 335 carrots, Anna has twice as many as Olaf\n    equation2 = Eq(Anna, 2 * (Olaf - 335))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (Olaf, Anna))\n\n    # Return the number of carrots Anna has\n    return solutions[Anna]\n\nans = solution()"
    ],
    "8ee5b1b4a0b744aea869489b01233c34": [
        "def solution():\n    final_crystals = 35\n    sold_to_cherlyn = 14\n    mined_in_singapore = 20\n\n    # Reverse the operation\n    before_sell_to_cherlyn = final_crystals + sold_to_cherlyn\n    before_mined_in_singapore = before_sell_to_cherlyn - mined_in_singapore\n    # Before selling to Yvonne, he had half of the current crystals minus 10\n    initial_crystals = (before_mined_in_singapore + 10) * 2\n\n    return initial_crystals\n\nans = solution()"
    ],
    "c735dd28ea2240689abbbd4d577fd596": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1568'\n    total_permutations = 0\n\n    # All permutations of the digits\n    for perm in permutations(digits):\n        # Insert the decimal point in between every two digits\n        for i in range(1, len(perm)):\n            total_permutations += 1\n\n    return total_permutations\n\nans = solution()"
    ],
    "017ca40d1bbb43fa95bea8515f5a0087": [
        "def solution():\n    people_in_front_of_Ali = 14\n    people_behind_Bala = 10\n    Ali_Bala = 2  # Ali and Bala themselves\n\n    total_people = people_in_front_of_Ali + Ali_Bala + people_behind_Bala\n\n    return total_people\n\nans = solution()"
    ],
    "b411b6a9f50c4eeb9ad77ea2bf97d4c4": [
        "def solution():\n    return 257 * 37\n\nans = solution()"
    ],
    "46dbc4d8085d4f6983e54168bf69207b": [
        "def solution():\n    ans = 397 + 784 + 86\n    return ans\n\nans = solution()"
    ],
    "0ed2fd09143045b3bdb6bd4e5af3258f": [
        "def solution():\n    total_cars = 60\n    black_dodges = 25\n    blue_cars = 18\n    fords = 25\n    \n    blue_dodges = blue_cars - (total_cars - fords - black_dodges)\n    blue_fords = blue_cars - blue_dodges\n    \n    return blue_fords\n\nans = solution()"
    ],
    "d3694a86bdbf4f47b69dd4f491c85b50": [
        "def solution():\n    richard_age = 18\n    adam_age = richard_age / 2\n    will_age = (2 / 3) * adam_age\n    total_age = richard_age + adam_age + will_age\n    return total_age\n\nans = solution()"
    ],
    "522f9a97b72e4157b05087fe25269f68": [
        "def solution():\n    pounds_to_pence = 30 * 100  # Convert £30 to pence\n    cost_per_plant = 85  # cost per plant in pence\n    num_plants = pounds_to_pence // cost_per_plant  # Calculate how many plants can be bought\n    return num_plants\n\nans = solution()"
    ],
    "7bb6052160e54c4c996c2b4554bc7d90": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(4*(x-3) + 6*x, 28)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "55d8d326e1d84f5591afabea1baed475": [
        "def solution():\n    A = 4  # The smallest composite number is 4\n    while True:\n        B = A + 1\n        C = A + 2\n        D = A + 3\n        # Check if B, C, and D are composite\n        if (not all(is_prime(num) for num in [B, C, D])):\n            return A + B + C + D\n        A += 1\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nans = solution()"
    ],
    "408a76137cb74fe6b5a4628ffe8dd9fc": [
        "def solution():\n    total_colours = 3\n    # Adding the maximum quantities of balls from two colours\n    # and adding 1 to guarantee at least one from each colour.\n    blue_balls = 8\n    red_balls = 10\n    green_balls = 13\n\n    # We take the sum of the two largest amounts of balls\n    min_picks = red_balls + green_balls + 1\n    \n    return min_picks\n\nans = solution()"
    ],
    "f521fd6cd0bd42ab975826d346f3d148": [
        "def solution():\n    # Let's denote the two numbers as x and y.\n    # According to the problem, we have two equations:\n    # 1) x + y = 80\n    # 2) x - y = 40\n    \n    # From equation 2, we can express y in terms of x: y = x - 40\n    # Substituting y in equation 1, we get: x + (x - 40) = 80\n    # Simplifying the equation, we get: 2x - 40 = 80\n    # Solving for x, we get: 2x = 120\n    # Thus, x = 60\n    \n    # Now, we find y using equation 2 again: y = x - 40\n    # Since x = 60: y = 60 - 40\n    \n    x = 60\n    y = x - 40\n    \n    # Since we need to find the smaller number and y < x,\n    # the smaller number is y.\n    return y\n\nans = solution()"
    ],
    "0e0d80b219274c0faaf2195165716eec": [
        "def solution():\n    return 7.73 - 7.53\n\nans = solution()"
    ],
    "4d85f6fe7d5845cfa81cf1f042e09c59": [
        "def solution():\n    for i in range(1, 11 * 7 + 1):  # Since 11 and 7 are coprime, their LCM is 11*7\n        if i % 11 == 5 and i % 7 == 1:\n            return i\n\nans = solution()"
    ],
    "5cfc215c78a9472a8a18a9ba927900bd": [
        "def solution():\n    average_daily_earnings = 120\n    number_of_working_days = 5  # from Monday to Friday\n\n    total_weekly_earnings = average_daily_earnings * number_of_working_days\n\n    return total_weekly_earnings\n\nans = solution()"
    ],
    "b8255d96c133471bb6e3c22310b41adf": [
        "def solution():\n    total_questions = 50\n    for correct_answers in range(total_questions + 1):\n        wrong_answers = total_questions - correct_answers\n        score = 3 * correct_answers - 2 * wrong_answers\n        if score == 125:\n            return correct_answers\n\nans = solution()"
    ],
    "199c56ed665e423c91ceb0507bd0ab53": [
        "def solution():\n    result = (3/8) * 960\n    return result\n\nans = solution()"
    ],
    "bb4e43f4f3bd41c086968d751b91561e": [
        "from math import comb\n\ndef solution():\n    num_teams = 6\n    num_games = comb(num_teams, 2)\n    return num_games\n\nans = solution()"
    ],
    "f2e8931a123545f7956d58a111edc936": [
        "def solution():\n    a = 31\n    b = 29\n    ans = (a + b) * (a - b)\n    return ans\n\nans = solution()"
    ],
    "9a69c834b77544398d9efb56ebcabb0a": [
        "def solution():\n    from math import gcd\n    return gcd(gcd(60, 72), 84)\n\nans = solution()"
    ],
    "202cfc0fd1a34d84987c51e10238c07e": [
        "def solution():\n    ans = 7001 - 360\n    return ans\n\nans = solution()"
    ],
    "e9da788ec1b54b65a18fecebd1daa615": [
        "def solution():\n    for digit in range(10):\n        number = int(\"296{}12\".format(digit))\n        if number % 9 == 0:\n            return digit\n\nans = solution()"
    ],
    "a4fa99021c374f29b4110f2783cfd291": [
        "def solution():\n    a, b = 2, 2\n    for _ in range(2011 - 2):\n        a, b = b, (a + b) % 10\n    return b\n\nans = solution()"
    ],
    "4405728c929e4c69acaa6a473aab8e49": [
        "def solution():\n    total_apples = 50\n    children = 8\n    \n    # Given that each child must get at least one apple\n    # We distribute one apple to each child first\n    apples_distributed = children\n    \n    # Now we distribute the remainder among the children\n    remainder_apples = total_apples - apples_distributed\n    \n    # We want to find the minimum number of apples the kid with the most apples can get\n    # We can use the Pigeonhole Principle here. If n-1 pigeons are placed in n pigeonholes, \n    # at least one pigeonhole must be empty. Conversely, if n-1 pigeonholes are to be filled\n    # with n pigeons, at least one pigeonhole must contain at least 2 pigeons.\n    # Similarly, with the remainder_apples and children - 1 (since one has to be the maximum),\n    # if we are to minimize the maximum, we'd distribute as evenly as possible, then add the leftover to the max kid.\n    \n    # Distribute the remainder as evenly as possible\n    min_max_apples_after_even_distribution = remainder_apples // (children - 1)\n    \n    # Check if there are any leftover apples after even distribution\n    leftover_apples = remainder_apples % (children - 1)\n    \n    # If there are leftovers, they would go to the kid with the most, increasing their count\n    # The least possible number for the kid with most apples is the distribution after minimum distributed equally plus one for the initial distribution to every kid, plus any leftovers.\n    least_possible_max = min_max_apples_after_even_distribution + 1 + (1 if leftover_apples > 0 else 0)\n\n    return least_possible_max\n\nans = solution()"
    ],
    "a48ac2327a494c02bf02f51c7a25087f": [
        "def solution():\n    stop_num = 10        # The number Eddie stops at\n    total_counts = 30    # The total number of counts\n    clock_numbers = 12   # The number of numbers on the clock\n\n    # The starting number is the number Eddie ends with after subtracting the total counts\n    # then taking the modulo with clock_numbers to find the position in the clock's cycle,\n    # and adding the clock_numbers to handle negative modulo result, and finally taking\n    # modulo again to ensure the result is within clock range.\n    start_num = (stop_num - total_counts) % clock_numbers\n    start_num = (start_num + clock_numbers) % clock_numbers \n\n    # If start_num is 0, it means Eddie starts counting from 12 o'clock\n    start_num = start_num if start_num != 0 else clock_numbers\n\n    return start_num\n\nans = solution()"
    ],
    "46421c119de14d79b2cc3d333a42ca8c": [
        "def solution():\n    two_thirds_of_number = 24\n    full_number = (two_thirds_of_number * 3) / 2\n    three_quarters_of_number = (full_number * 3) / 4\n    return three_quarters_of_number\n\nans = solution()"
    ],
    "14656e3844dc4d66b7a39d88a9afb8f9": [
        "def solution():\n    # Since the sum of an odd number sequence is a perfect square (m^2),\n    # we can conclude that it's the sum of the first k odd numbers.\n    # The sum of the first k odd numbers is k^2.\n    # Start from k = 31 since k > 30 and find the corresponding m that makes m^2\n    k = 31\n    while True:\n        sum_of_odds = k**2\n        m = int(sum_of_odds**0.5)\n        # Check if m^2 equals sum_of_odds and m is a whole number\n        if m**2 == sum_of_odds and k > 30:\n            break\n        k += 1\n    \n    return m\n\nans = solution()"
    ],
    "b2a8300be95d4862a99c0a044007743d": [
        "def solution():\n    total_time_first_part = 2  # hours\n    speed_first_part = 40  # km/h\n\n    distance_first_part = total_time_first_part * speed_first_part  # km\n    distance_second_part = 280  # km\n    speed_second_part = 70  # km/h\n\n    total_time_second_part = distance_second_part / speed_second_part  # hours\n\n    total_distance = distance_first_part + distance_second_part\n    total_time = total_time_first_part + total_time_second_part\n\n    average_speed = total_distance / total_time  # km/h\n\n    return average_speed\n\nans = solution()"
    ],
    "bb2d33406c1e486b9da0c4789678c8e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan, bob = symbols('alan bob')\n\n    # According to the given conditions, we setup our equations\n    # 1. Bob has $15 more Match Dfex cards than Alan\n    equation1 = Eq(bob, alan + 15)\n    # 2. Colin gives Bob $25 cards. Bob now has $3 times as many as Alan\n    equation2 = Eq(bob + 25, 3 * alan)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (alan, bob))\n\n    return solutions[alan]\n\nans = solution()"
    ],
    "2832c695b129428eb3f7330133ef2d33": [
        "def solution():\n    return (423 * 326) % 4\n  \nans = solution()"
    ],
    "5513ff312a12411eae4858bfd699527a": [
        "def solution():\n    original_amount = 20\n    money_saved = 1 * 7  # $1 each day for one week\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    current_amount = original_amount + money_saved - lent_to_brother - spent_on_snacks\n\n    return current_amount\n\nans = solution()"
    ],
    "a543d8cd5bcf46c784fc4a1226cbbd55": [
        "def solution():\n    men_ratio = 37\n    women_to_children_ratio = 4 / 5\n\n    # 63% were women and children\n    women_plus_children = 100 - men_ratio  # which is 63%\n\n    # The total ratio for women and children is 4 + 5 = 9 parts\n    total_parts = 4 + 5  # 9 parts\n\n    # Since men are 37% and 12 more than children,\n    # the ratio of children is (63/9)*4 - 12 = men_ratio - 12\n    children = men_ratio - 12\n\n    # Calculate women based on number of men - 12 children\n    women = ((women_plus_children / total_parts) * 4 * 100) - men_ratio\n\n    return int(women)\n\nans = solution()"
    ],
    "146248a0d3d64afe8918234f3da5b527": [
        "def solution():\n    num_cows = 5\n    num_days = 3\n    grass_per_day_per_cow = 1\n    \n    total_grass = num_cows * num_days * grass_per_day_per_cow\n    \n    return total_grass\n\nans = solution()"
    ],
    "824799b919f548949a8702760dbeaab5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, apple = symbols('banana apple')\n\n    equation1 = Eq(2 * banana + 3 * apple, 3)\n    equation2 = Eq(3 * banana + 2 * apple, 4)\n\n    solutions = solve((equation1, equation2), (banana, apple))\n\n    cost_for_annabella = 10 * solutions[banana] + 10 * solutions[apple]\n\n    return cost_for_annabella\n\nans = solution()"
    ],
    "54048b9f40ed41f0805db2d51102d2f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the amount of oil sold from both buckets\n    sold = symbols('sold')\n    \n    # Define the equations based on the problem statement\n    equation1 = Eq(89 - sold, 12 * (45 - sold))\n    \n    # Solve the equations\n    solutions = solve((equation1), (sold,))\n    \n    return solutions[sold]\n\nans = solution()"
    ],
    "a69f37c117db4732b832f08fb22c082e": [
        "def solution():\n    prob_to_work_late = 0.7\n    prob_home_late = 0.4\n\n    # Probability neither train is late\n    prob_neither_late = (1 - prob_to_work_late) * (1 - prob_home_late)\n\n    # Probability at least one train is late (complement of neither being late)\n    prob_at_least_one_late = 1 - prob_neither_late\n\n    return prob_at_least_one_late\n\nans = solution()"
    ],
    "f8b86822291f4eeb9da03b7a91347c42": [
        "def solution():\n    return 6.6 + 13.5\n\nans = solution()"
    ],
    "729c668804d14fd39ae12b3b213c23b9": [
        "def solution():\n    lena_start = 86\n    given_away = 29\n    final_count = 100\n    \n    strawberries_from_mother = final_count - (lena_start - given_away)\n    \n    return strawberries_from_mother\n\nans = solution()"
    ],
    "9413da5a29d94f68bda0bca4fa184194": [
        "def solution():\n    total_two_digit_numbers = 90  # There are 90 two-digit numbers (10-99)\n    numbers_without_six = (8 * 9)  # There are 8 choices (not 6 or 0) for the first digit and 9 choices (not 6) for the second\n    numbers_with_at_least_one_six = total_two_digit_numbers - numbers_without_six\n    return numbers_with_at_least_one_six\n\nans = solution()"
    ],
    "102f809f85cc4c64bd406383329e958e": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime(\"1/4/2023\", \"%d/%m/%Y\")\n    end_date = datetime.strptime(\"18/5/2023\", \"%d/%m/%Y\")\n    day_off = (end_date - start_date).days + 1\n\n    return day_off\n\nans = solution()"
    ],
    "f54684d1af9a4195b08d5e9f85769b4d": [
        "def solution():\n    from math import floor, ceil\n\n    ans = floor(2017) - ceil(201.7) + floor(20.17) - ceil(2.017)\n\n    return ans\n\nans = solution()"
    ],
    "0224d77dd22a452996b6417887c3bc74": [
        "def solution():\n    return sum(range(1, 31))\n\nans = solution()"
    ],
    "9b4e50b2cce74bd080a154bda1547248": [
        "def solution():\n    count = 0\n    for i in range(1, 2023):\n        if i % 7 != 0 and i % 17 != 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "ea0d74bbb60148689b29e204ee0a434f": [
        "def solution():\n    distance = 360\n    speed_a = 48\n    speed_b = 72\n\n    relative_speed = speed_a + speed_b\n\n    time_to_meet = distance / relative_speed\n\n    return time_to_meet\n\nans = solution()"
    ],
    "6d1da4e249844060b1007899c512c4fc": [
        "def solution():\n    # Calculate the last digit of each part separately\n    last_digit_of_2023_sqr = (2023 ** 2) % 10\n    last_digit_of_2_power_2023 = (2 ** 2023) % 10\n    \n    # Add the last digits and calculate the last digit of the sum\n    sum_last_digit = (last_digit_of_2023_sqr + last_digit_of_2_power_2023) % 10\n    \n    # Calculate the last digit of the cube of the sum\n    ans = (sum_last_digit ** 3) % 10\n    return ans\n\nans = solution()"
    ],
    "164afcec5f87405ab3a28c1284c5b89b": [
        "def solution():\n    num_lines = 13\n    # The formula to calculate the maximum number of intersection points\n    # of n lines is: n choose 2 (since each pair of lines intersect at one point)\n    # However, this formula considers only the case where no two lines are parallel\n    # and no three lines intersect at the same point. For the general case of\n    # n lines, the answer is still n choose 2.\n    from math import comb\n    return comb(num_lines, 2)\n\nans = solution()"
    ],
    "2ff1001e219d4b0ebd3a3f0f80ec684b": [
        "def solution():\n    return 9744 // 7\n\nans = solution()"
    ],
    "87405c2a8850443ebcf2f68413e180c6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mango, orange, pear = symbols('mango orange pear')\n\n    equation1 = Eq(mango + orange, 3.80)\n    equation2 = Eq(mango + pear, 3.40)\n    equation3 = Eq(4 * mango + 2 * pear + orange, 13.20)\n\n    solutions = solve((equation1, equation2, equation3), (mango, orange, pear))\n\n    return solutions[mango]\n\nans = solution()"
    ],
    "fc18d60c6efd483aba5f6e0938c4d924": [
        "def solution():\n    pi = 22 / 7\n    # AB = CD = radius of the semicircles and quadrants\n    AB = CD = 14\n    # Perimeter of the semicircle = pi * radius\n    # Since there are 2 semicircles, the total perimeter from the semicircles will be:\n    semicircle_perimeter = 2 * pi * AB / 2\n    # The quadrants are quarter-circles (90 degree sector of a circle),\n    # thus the perimeter of one quadrant is a fourth of the circumference of a circle plus 2 radii (for AB and BC sides):\n    quadrant_perimeter = (2 * pi * AB) / 4 + 2 * AB\n\n    # Since there are 2 quadrants, we multiply by 2\n    total_quadrant_perimeter = 2 * quadrant_perimeter\n\n    # Total perimeter is the sum of the semicircle perimeters and quadrant perimeters\n    total_perimeter = semicircle_perimeter + total_quadrant_perimeter\n    return total_perimeter\n\nans = solution()"
    ],
    "c369770b6e0847c7b9bea03be1874741": [
        "def solution():\n    from math import gcd\n\n    pencils = 28\n    pens = 63\n\n    students = gcd(pencils, pens)\n\n    ans = students\n    return ans\n\nans = solution()"
    ],
    "936bbd100b83467b8e8f7ca63b277148": [
        "def solution():\n    remaining_after_first_day = 48 / (1 - 3/5)\n    total_watermelons = remaining_after_first_day / (1 - 1/3)\n    return int(total_watermelons)\n\nans = solution()"
    ],
    "8da214e5bceb4927bd7edbb025a80cf8": [
        "def solution():\n    # Since we only need the last digit of the expression we can simply use\n    # modular arithmetic (mod 10).\n    # The last digit of 5 raised to any power is always 5 (since 5 * 5 = 25, etc.).\n    # Also, the last digit of powers of 7 cycle every 4 powers: 7, 9, 3, 1, (repeats).\n    \n    # We find the last digit of 7 raised to the 20th power by looking at the cycle.\n    # Since 20 % 4 == 0, it means the cycle restarts, therefore the last digit is 1.\n    \n    # Now multiply the last digits of each expression (5 from the 5s and 1 from the 7s).\n    last_digit_5 = 5\n    last_digit_7 = 1  # Result from the cycle of 7's powers\n    \n    last_digit = (last_digit_5 * last_digit_7) % 10  # Only the last digit matters\n    \n    return last_digit\n\nans = solution()"
    ],
    "23d9ec7fa57f4172838349ff3d74acd6": [
        "def solution():\n    return 2.99 + 12.99 + 22.99\n\nans = solution()"
    ],
    "18f570e74c21419eb70c8ce179cc02dc": [
        "def solution():\n    # Calculate the least common multiple (LCM) of 3, 5, and 7\n    lcm = 3 * 5 * 7 # Since 3, 5, and 7 are prime numbers, their LCM is their product\n    \n    # Iterate over multiples of the LCM to find the number\n    for i in range(lcm, 1000, lcm):\n        if str(i).startswith('6'):\n            return i\n\nans = solution()"
    ],
    "1169fdf1689a45368fbfa500b29b4d4a": [
        "from math import comb\n\ndef solution():\n    return comb(10, 6)\n\nans = solution()"
    ],
    "93cf1ceee35c46ea82413427f66b961c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ahmad, sam, jim = symbols('ahmad sam jim')\n\n    equation1 = Eq(sam, ahmad + 6)\n    equation2 = Eq(jim, 2 * ahmad)\n    equation3 = Eq(ahmad + sam + jim, 334)\n\n    solutions = solve((equation1, equation2, equation3), (ahmad, sam, jim))\n\n    return solutions[jim]\n\nans = solution()"
    ],
    "64e22caf8eac4296b018f35f51dcffe6": [
        "def solution():\n    return (3/4) * (2/5) * 1\n\nans = solution()"
    ],
    "64339b5e0ff14488a7a7915e85f7baad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b, c = symbols('a b c', integer=True)\n\n    equation = Eq(1 + 1/(a + 1/(b + 1/c)), 13/10)\n    \n    solutions = solve(equation, (a, b, c))\n\n    for sol in solutions:\n        if all(isinstance(val, int) and val > 0 for val in sol):\n            return sol[0] + 2 * sol[1] + 3 * sol[2]\n\nans = solution()"
    ],
    "9e39cc7574e64c79abd7435129d58354": [
        "def solution():\n    return 336 // 6\n\nans = solution()"
    ],
    "48e659b717794dd1b47e78672c0d2e01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the cost of a packet of rice\n    rice_cost = symbols('rice_cost')\n\n    # Each packet of pasta costs 95 pence, hence 6 packets will cost 95 * 6 pence\n    total_pasta_cost = 95 * 6\n\n    # Total cost in pence, £11.70 is equal to 1170 pence\n    total_cost = 1170\n\n    # Formulate the equation:\n    # total cost = cost of pasta + cost of rice * number of rice packets\n    equation = Eq(total_pasta_cost + rice_cost * 5, total_cost)\n\n    # Solve the equation for the cost of a packet of rice\n    solutions = solve(equation, (rice_cost))\n\n    # Return the solution (convert pence to pounds by dividing by 100)\n    return float(solutions[0]) / 100\n\nans = solution()"
    ],
    "8cbab745f9da4de496aff3862df03057": [
        "def solution():\n    num_cakes = 195\n    cost_per_cake = 46\n\n    total_cost = num_cakes * cost_per_cake\n\n    return total_cost\n\nans = solution()"
    ],
    "ea69a9598ef948f590dc1d10f048d2a0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    energetic_rate = 1 / 20\n    lazy_rate = symbols('lazy_rate')\n\n    combined_rate = energetic_rate + lazy_rate\n    combined_time = 1 / combined_rate\n\n    equation = Eq(combined_time, 12)\n    \n    lazy_days = solve(equation, lazy_rate)[0]\n    return int(1/lazy_days)\n\n\nans = solution()"
    ],
    "a59f135bac214a5da575b9ce4f066823": [
        "def solution():\n    return 45 * (2/3) * (30/100)\n\nans = solution()"
    ],
    "b6b08041a7514720a1278986419ff0cb": [
        "def solution():\n    B = (3 * 9 + 5 * 9) / 8\n    return B\n\nans = solution()"
    ],
    "bbda3a80787243eab22a64bb52857096": [
        "def solution():\n    # Since the numbers are consecutive, the average of the numbers is the sum divided by the amount of numbers.\n    average = 1650 / 15\n    # Largest number is 7 places away from the average (since there are 15 numbers, the middle number is the eighth one)\n    largest = average + 7\n    # Smallest number is 7 places away from the average in the other direction.\n    smallest = average - 7\n    # The sum of the largest and smallest number is then:\n    return largest + smallest\n\nans = solution()"
    ],
    "da6271db0c0242c5935ddca8b62ae82b": [
        "def solution():\n    number = 1\n    while True:\n        if number % 4 == 0 and number % 6 == 0:\n            break\n        number += 1\n    return number\n\nans = solution()"
    ],
    "c11a8651ce514fa998ed30b3b9b53658": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "e5c0ab18d1ae4d8d82cff69be28b3579": [
        "def solution():\n    boys = 42\n    boy_to_girl_ratio = 3 / 2\n\n    girls = (boys / 3) * 2\n\n    return girls\n\nans = solution()"
    ],
    "c465c0e7f9a94f92b6df9d60a786dffa": [
        "def solution():\n    ans = 0\n    for number in range(1, 1000):\n        if all(int(digit) % 2 != 0 for digit in str(number)):\n            ans += 1\n    return ans\n\nans = solution()"
    ],
    "439bd1eb78b4450ebb4e7f6c4c72416e": [
        "def solution():\n    total_cloth = 45\n    cloth_per_skirt = 2.83\n    num_skirts = 8\n\n    cloth_used_for_skirts = cloth_per_skirt * num_skirts\n    remaining_cloth = total_cloth - cloth_used_for_skirts\n    \n    num_blouses = 2\n    cloth_per_blouse = round(remaining_cloth / num_blouses, 1)\n\n    return cloth_per_blouse\n\nans = solution()"
    ],
    "14a5a44068684024a8f1f67d00758fe4": [
        "def solution():\n    ans = 2189 - 1056\n    return ans\n\nans = solution()"
    ],
    "d54fa4b78c5640dab674ce3faf979b3b": [
        "def solution():\n    digit_count = 0\n    number = 1\n\n    while True:\n        number_str = str(number)\n        if digit_count + len(number_str) >= 2019:\n            return int(number_str[2019 - digit_count - 1])\n        else:\n            digit_count += len(number_str)\n            number += 1\n\nans = solution()"
    ],
    "b678890a19374c38ad59d1486f4db916": [
        "def solution():\n    # a when divided by 8 leaves a remainder of 6, which means\n    # a = 8k + 6 for some integer k\n\n    # b when divided by 8 leaves a remainder of 7, which means\n    # b = 8l + 7 for some integer l\n\n    # The sum a+b can be written as:\n    # a + b = (8k + 6) + (8l + 7)\n    # a + b = 8k + 8l + 13\n    # a + b = 8(k + l + 1) + 5\n    \n    # This shows that when a+b is divided by 8, the remainder is 5.\n\n    return 5\n\nans = solution()"
    ],
    "2d35f2e1d3d34ffbb28a8cebae92c23e": [
        "def solution():\n    # Considering the worst case scenario using the Pigeonhole Principle,\n    # the guard will find the correct key for the first room in at most 11 tries.\n    # Then for the second room, it will take at most 10 tries (since one key is now known).\n    # This pattern continues until for the last room it will take only 1 try.\n    # This is essentially the sum of the first 11 natural numbers.\n    \n    max_tries = sum(range(1, 12))\n    return max_tries\n\nans = solution()"
    ],
    "b764a882e0bc414689dc39fd81aaa3f1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alice, bernice, cindy = symbols('alice bernice cindy')\n\n    equation1 = Eq(bernice, alice + 240)\n    equation2 = Eq(cindy, bernice + 100)\n    equation3 = Eq(alice + bernice + cindy, 1792)\n\n    solutions = solve((equation1, equation2, equation3), (alice, bernice, cindy))\n\n    return solutions[alice]\n\nans = solution()"
    ],
    "0de428143ddc41079e76fd4ffbe23365": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    ans, _ = solve_congruence(*congruences)\n    return int(ans)\n\nans = solution()"
    ],
    "d4e1d8676a734ecc80b7b6a843595692": [
        "def solution():\n    score = 84\n    total = 120\n\n    percentage = (score / total) * 100\n\n    return percentage\n\nans = solution()"
    ],
    "70c25992de344a84b58dad3b24775a9b": [
        "from math import factorial\n\ndef solution():\n    total_digits = 5  # Total number of digits (2, 2, 2, 3, 3)\n    same_digit_2 = 3  # Number of 2's\n    same_digit_3 = 2  # Number of 3's\n    \n    # Calculate the number of permutations divided by the repetitions of the same digits\n    total_permutations = factorial(total_digits) // (factorial(same_digit_2) * factorial(same_digit_3))\n    \n    # Subtract the permutations that do not result in a four-digit number\n    # which occur when the leading digit is zero (but there is no zero here)\n    ans = total_permutations\n    return ans\n\nans = solution()"
    ],
    "752e5759eb7140ecb85296bce9368f6d": [
        "def solution():\n    sum_of_numbers = 3009\n    greater_number = 1722\n    smaller_number = sum_of_numbers - greater_number\n    difference = greater_number - smaller_number\n    return difference\n\nans = solution()"
    ],
    "9b1cb8dd1d064db29dc7e2d464d99ce8": [
        "def solution():\n    total_mass_kg = 6.5\n    basket_mass_kg = 500 / 1000  # converting grams to kilograms\n    kitten_mass_kg = 0.6\n    number_of_kittens = 4\n    \n    cat_mass_kg = total_mass_kg - (basket_mass_kg + number_of_kittens * kitten_mass_kg)\n    \n    return cat_mass_kg\n\nans = solution()"
    ],
    "c3e11e75704c400fa620bd26e3fb5ccc": [
        "def solution():\n    fraction = 412 / 1000\n    return fraction\n\nans = solution()"
    ],
    "8b508f3a63af42fc89337bb741587d2a": [
        "def solution():\n    total_cost = 33 + 20.40\n    num_people = 6\n    cost_per_person = total_cost / num_people\n    return cost_per_person\n\nans = solution()"
    ],
    "4787ee3647b6493ebaa57cbbe430a914": [
        "def solution():\n    original_price = 4\n    increase_percentage = 0.20\n    new_price = original_price * (1 + increase_percentage)\n    return new_price\n\nans = solution()"
    ],
    "01fcd86ba34343e3abb3f7ccb88315bf": [
        "def solution():\n    family_members = 3 + 4 + 1  # Mary + three brothers + four sisters\n    eggs_bought = (family_members - 1) * family_members\n    return eggs_bought\n\nans = solution()"
    ],
    "ff9990049fcc49a0a8417652c96375b8": [
        "from datetime import datetime\n\ndef solution():\n    format = '%H:%M'\n    time_leaving = datetime.strptime('7:50', format)\n    time_arrival = datetime.strptime('8:40', format)\n    journey_duration = time_arrival - time_leaving\n    return journey_duration.total_seconds() // 60  # convert to minutes\n\nans = solution()"
    ],
    "59b6fc93c0364f6fab328fca8f96a25e": [
        "def solution():\n    n = 72 // (3 * 6)\n    return n\n\nans = solution()"
    ],
    "e56f53a819d843a4ac3977912faff7e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of apples (a) and bananas (b)\n    a, b = symbols('a b')\n\n    # Equation: 3 apples + 1 banana = 32p\n    eq1 = Eq(3 * a + b, 32)\n\n    # Equation: 6 apples + 1 banana = 53p\n    eq2 = Eq(6 * a + b, 53)\n\n    # Solve the equations\n    solution = solve((eq1, eq2), (a, b))\n    \n    return solution[b]\n\nans = solution()"
    ],
    "cc4d6508bfc94140bc674ed22aab0fb3": [
        "def solution():\n    # sequence: 3, 6, 10, 15, ...\n    # the differences between the terms are increasing by 1 each time\n    # 6 - 3 = 3\n    # 10 - 6 = 4\n    # 15 - 10 = 5\n    # The next difference should be 6 since it is increasing by 1\n    # Therefore, the missing term is 15 + 6 = 21\n\n    last_term = 15\n    next_difference = 5 + 1\n    next_term = last_term + next_difference\n\n    return next_term\n\nans = solution()"
    ],
    "ffe4e2fccc06432695daf3045845a872": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    money = symbols('money')\n\n    spent_dvd = (1/6) * money + 5\n    remaining_after_dvd = money - spent_dvd\n    \n    spent_magazines = (2/5) * remaining_after_dvd + 12\n    remaining_after_magazines = remaining_after_dvd - spent_magazines\n    \n    # Equation for the amount remaining after all spending\n    equation = Eq(remaining_after_magazines, 24)\n    \n    solution = solve(equation, money)\n\n    return solution[0]\n\nans = solution()"
    ],
    "4c14bb3f346248288c5863e88eba5a22": [
        "def solution():\n    remaining_money = 80\n    remaining_fraction = 1 - 3/5\n\n    before_dress = remaining_money / remaining_fraction\n    original_money = before_dress / (1 - 1/5)\n\n    return original_money\n\nans = solution()"
    ],
    "374ef3bc7e0a42419bf59b665a1e8df4": [
        "def solution():\n    total_oil = 47\n    oil_in_bottle = 5\n    remaining_oil = total_oil - oil_in_bottle\n    oil_per_tank = remaining_oil / 6\n    return oil_per_tank\n\nans = solution()"
    ],
    "293a4c45646547c38aa5f707c907ac82": [
        "def solution():\n    # Let x be the number of years it will take for the grandpa's age to be 5 times Johnny's age\n    # Grandpa's current age = 72\n    # Johnny's current age = 8\n    # Grandpa's age in x years = 72 + x\n    # Johnny's age in x years = 8 + x\n    # 72 + x = 5 * (8 + x)\n    \n    # Solving the equation\n    x = symbols('x')\n    equation = Eq(72 + x, 5 * (8 + x))\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9fec34e2fa3e48e3b534a4a88195f5ba": [
        "def solution():\n    pip_position = 8\n    bud_position_from_end = 10\n    children_between = 4\n\n    total_children = pip_position + bud_position_from_end + children_between\n\n    return total_children\n\nans = solution()"
    ],
    "e757d8a583d44579823d7d3329dd4962": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan_cards, bob_cards = symbols('alan_cards bob_cards')\n\n    equation1 = Eq(bob_cards, alan_cards + 15)\n    equation2 = Eq(bob_cards + 25, 3 * alan_cards)\n\n    solutions = solve((equation1, equation2), (alan_cards, bob_cards))\n\n    return solutions[alan_cards]\n\nans = solution()"
    ],
    "2557fa802eef44bc834d1a8106a622e5": [
        "def solution():\n    principal = 2000\n    final_amount = 2519.42\n    years = 3\n\n    # We assume that final_amount = principal * (1 + rate)^years\n    # Hence, rate = ((final_amount/principal) ** (1/years)) - 1\n\n    rate = ((final_amount / principal) ** (1 / years)) - 1\n    \n    # Convert rate to percentage and round to nearest tenth of a percent\n    rate_percent = round(rate * 100, 1)\n    \n    return rate_percent\n\nans = solution()"
    ],
    "b70ebf97614545e8a65cd9169021bb74": [
        "def solution():\n    sum_odd = sum(range(1, 51, 2))\n    sum_even = sum(range(2, 51, 2))\n    ans = sum_even - sum_odd\n    return ans\n\nans = solution()"
    ],
    "8c7b9411bbb04086ab07eacadf5afd5e": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "bc4291892b8945d4b66ab1f2b66dcee3": [
        "def solution():\n    # Define the new operation \"~Delta~\"\n    def new_operation(m, n):\n        return (5 * m) + (3 * n)\n\n    # The equation x ~Delta~ 9 = 37 can be rewritten using the new operation as:\n    # 5*x + 3*9 = 37\n    \n    # Now we can solve for x\n    x = (37 - 3 * 9) / 5\n\n    return int(x)\n\nans = solution()"
    ],
    "ad306d1a04ac4d08a086e821e61e24be": [
        "def solution():\n    # The worst case is that she takes out the maximum number of balls without getting 4 of the same color.\n    # We know that if she takes out 3 blue, 3 orange, and 3 yellow, she still doesn't have 4 of any color.\n    # That's 3 + 3 + 3 = 9 balls. But the next ball she takes out must result in her having 4 of some color.\n    return 3 + 3 + 3 + 1\n\nans = solution()"
    ],
    "1dc5079dba0a4447af8a598e73c3cbd8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    arrival_time = datetime.strptime(\"11:15\", \"%H:%M\")\n    travel_duration = timedelta(hours=3, minutes=50)\n    departure_time = arrival_time - travel_duration\n    return departure_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "215e1d378ffe437ba1c9ccb1e8aee393": [
        "def solution():\n    # If Janice gives 20 oranges to each elderly, 10 elderly will not receive any oranges.\n    # This means the number of oranges Janice has is a multiple of 20, but 10 * 20 oranges short to serve an additional set of elderly.\n    # If Janice gives 16 oranges to each elderly, she has enough to pack 25 boxes of 2 dozen oranges each.\n    # This means Janice has 25 * 2 * 12 oranges in total.\n    \n    total_oranges = 25 * 2 * 12\n    shortfall = 10 * 20\n    \n    # The total number of oranges Janice originally has can then be represented as a multiple of 20 minus the shortfall.\n    # Because she needs to give out all her oranges, the number she needs to give to each elderly has\n    # to divide evenly into the total number of oranges she has.\n    \n    # To ensure she gives out all her oranges, the number of oranges given to each elderly must be a divisor\n    # of the total number of oranges.\n    \n    # We can start checking from 20 (since it's mentioned each can get 20) and downwards until we find a divisor\n    # that divides total_oranges evenly.\n    \n    oranges_per_elderly = 20\n    while total_oranges % oranges_per_elderly != 0:\n        oranges_per_elderly -= 1\n    \n    return oranges_per_elderly \n\nans = solution()"
    ],
    "7a7da228cc224c7b93f5a155d88b34d8": [
        "def solution():\n    full_weight = 31\n    removed_soil_fraction = 1/5\n    weight_after_removal = 27\n\n    weight_of_removed_soil = full_weight * removed_soil_fraction\n    empty_weight = full_weight - weight_after_removal - weight_of_removed_soil\n\n    return empty_weight\n\nans = solution()"
    ],
    "2f184eae91df42e18de5b645882a1cc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    tim, tyler = symbols('tim tyler')\n    equation1 = Eq((1/6) * tim, (3/8) * tyler)\n    equation2 = Eq(tim, 9 * (tyler - 96))\n    \n    solutions = solve((equation1, equation2), (tim, tyler))\n    \n    total_cookies = solutions[tim] + solutions[tyler]\n    return total_cookies\n\nans = solution()"
    ],
    "f1389cbcaf72480d9657232ad57f5bec": [
        "def solution():\n    total_marks = 214\n    jenny_score = 136\n\n    missed_marks = total_marks - jenny_score\n\n    return missed_marks\n\nans = solution()"
    ],
    "4c5e47c0c616449c92a2b06408c58928": [
        "def solution():\n    part_filled = 24\n    fraction_filled = 3 / 4\n\n    full_tank = part_filled / fraction_filled\n\n    return full_tank\n\nans = solution()"
    ],
    "f4a9a527d7144792b53639888c6da554": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    choco, vanil, blueb = symbols('choco vanil blueb')\n    \n    # Create equations based on the problem statement\n    eq1 = Eq(choco, vanil + 72)\n    eq2 = Eq(blueb, vanil - 36)\n    eq3 = Eq(choco * (5/6) + vanil * (1/3) + blueb * (2/9), 427)\n\n    # Solve the equations to find the values of choco, vanil, and blueb\n    solutions = solve((eq1, eq2, eq3), (choco, vanil, blueb))\n\n    # Extract the number of chocolate cupcakes before selling and calculate number sold\n    choco_before_selling = solutions[choco]\n    choco_sold = choco_before_selling - choco_before_selling * (5/6)\n\n    return choco_sold\n\nans = solution()"
    ],
    "b32f8f344d984bb382e4fb73887230ab": [
        "from math import lcm\n\ndef solution():\n    # Least common multiple will provide the next time both trains leave together\n    minutes = lcm(24, 30)\n    \n    # 9am in minutes is 9 * 60\n    time_in_minutes = 9 * 60 + minutes\n    \n    # Convert back to hours and minutes\n    hours = time_in_minutes // 60\n    minutes = time_in_minutes % 60\n\n    return f\"{hours}:{minutes:02d} a.m.\" if hours < 12 else f\"{hours-12}:{minutes:02d} p.m.\"\n\nans = solution()"
    ],
    "87c44b7f86fe43459f5e47d26f57a64a": [
        "def solution():\n    # Searching for all possible values of 'a' that leave a remainder of 6 when divided by 8\n    remainders_a = [x for x in range(100) if x % 8 == 6]\n    # Searching for all possible values of 'b' that leave a remainder of 7 when divided by 8\n    remainders_b = [x for x in range(100) if x % 8 == 7]\n\n    # Since 'a' and 'b' are not specifically defined, we can take any 'a' from remainders_a\n    # and any 'b' from remainders_b to find the remainder of (a+b) when divided by 8.\n    # We can simply take the first elements of remainders_a and remainders_b lists for this purpose.\n    a = remainders_a[0]\n    b = remainders_b[0]\n    sum_ab = a + b\n\n    # Find the remainder when 'sum_ab' is divided by 8\n    remainder_ab = sum_ab % 8\n\n    return remainder_ab\n\nans = solution()"
    ],
    "6d2040f88fa04f798b4a1705445cb70b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Mark and David's ages\n    mark, david = symbols('mark david')\n\n    # Write the equations based on the problem statement\n    equation1 = Eq(mark - david, 3)\n    equation2 = Eq(mark + david, 89)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (mark, david))\n\n    return solutions[mark]\n\nans = solution()"
    ],
    "a558f6a1623e42cca6fbc286a7fa522e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    anu, benu, chris, dave = symbols('anu benu chris dave')\n\n    # Dave is 5 years older than Chris\n    equation1 = Eq(dave, chris + 5)\n    # Dave is 3 years older than Benu\n    equation2 = Eq(dave, benu + 3)\n    # Anu is 3 years younger than Chris\n    equation3 = Eq(anu, chris - 3)\n    # Sum of their ages is 20\n    equation4 = Eq(anu + benu + chris + dave, 20)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (anu, benu, chris, dave))\n\n    return solutions[anu]\n\nans = solution()"
    ],
    "620fcfd4b5dc4851a21f52802f067616": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's define the symbols for the marbles.\n    # r - initial number of red marbles\n    # w - initial number of white marbles\n    # p - number of red marbles added by Pip\n    # b - number of white marbles added by Bud\n    r, w, p, b = symbols('r w p b', integer=True)\n    \n    # Initial ratio of red to white marbles is 3:2\n    eq1 = Eq(r/w, 3/2)\n    \n    # After adding p red balls, the ratio is 5:3\n    eq2 = Eq((r+p)/w, 5/3)\n    \n    # Bud puts b white balls and the ratio becomes 5:4\n    eq3 = Eq((r+p)/(w+b), 5/4)\n    \n    # Number of balls put by Bud is 100 more than Pip\n    eq4 = Eq(b, p + 100)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2, eq3, eq4), (r, w, p, b))\n    \n    # we need to find the initial number of white balls\n    return solutions[w]\n\nans = solution()"
    ],
    "7a743410e3e345b999a0951be98a6199": [
        "def solution():\n    # Number of desks in front of Jessica\n    desks_in_front_of_jessica = 5\n    \n    # Number of desks behind Judy\n    desks_behind_judy = 7\n    \n    # There is 1 desk where Jessica is sitting and 1 where Judy is sitting\n    # Since Jessica sits in front of Judy, there is no desk between them\n    total_desks = desks_in_front_of_jessica + desks_behind_judy + 1 + 1\n    \n    return total_desks\n\nans = solution()"
    ],
    "85bee46ebede4627b0afc4c7e6181e1d": [
        "def solution():\n    count = 0\n    for number in range(2, 57):\n        count += str(number).count('6')\n    return count\n\nans = solution()"
    ],
    "92dd78baf86e411d93098d70392d8777": [
        "def solution():\n    return 2.507 + 13.49\n\nans = solution()"
    ],
    "8f0cf923121b43fb96d737a8fba5bd2f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    agnes, george, jack = symbols('agnes george jack')\n    equation1 = Eq(agnes, george - 5)\n    equation2 = Eq(jack, 3 * george)\n    equation3 = Eq(agnes + george + jack, 55)\n\n    solutions = solve((equation1, equation2, equation3), (agnes, george, jack))\n\n    return solutions[jack]\n\nans = solution()"
    ],
    "22842fb942f54d6e8ba1e02bb2901a77": [
        "def solution():\n    red_balloons = 57\n    yellow_balloons = red_balloons // 3\n    return yellow_balloons\n\nans = solution()"
    ],
    "fcd9ab9940e142e0b0a968d0d5e14a94": [
        "def solution():\n    # Initial number of balls\n    white_balls = 1991\n    black_balls = 1000\n    \n    # Number of moves Ming makes\n    num_moves = 2989\n    \n    for _ in range(num_moves):\n        # If both balls are white or both are black\n        if white_balls % 2 == 0 or black_balls % 2 == 0:\n            if black_balls > 0:\n                black_balls -= 1  # Remove one black ball\n        # If one ball is white and the other is black\n        else:\n            white_balls -= 1  # Put back one white ball\n        \n        # Update total number of balls\n        white_balls -= 1  # Two balls are taken out every move\n    \n    # Calculate remaining balls\n    remaining_balls = white_balls + black_balls\n    if white_balls > 0:\n        color = \"white\"\n    else:\n        color = \"black\"\n    \n    return remaining_balls, color\n\nans = solution()"
    ],
    "3ae41e17112a464fa38fa87aa1753aeb": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 5):\n        a, b, c, d, e = perm\n        if a == 0 or c == 0:\n            continue\n        num1 = a * 1000 + b * 100 + c * 10 + d\n        num2 = c * 10 + e\n        product = num1 * num2\n        if len(str(product)) == 6 and str(product)[-2] == str(d):\n            return product\n\nans = solution()"
    ],
    "1cae0bc768934c11a33a33e0df128753": [
        "def solution():\n    ans = 428 - 244\n    return ans\n\nans = solution()"
    ],
    "4afd36119b724be1826c3ac3454d6dba": [
        "def solution():\n    # Let x be the average weight of the group before Aaron joined,\n    # and let n be the number of people in the group before Aaron joined.\n    # Then, the total weight of the group before Aaron joined is n * x.\n    \n    # When Aaron joined, the total weight became n * x + 45,\n    # and the average weight became 61 kg with n + 1 people.\n    # (n * x + 45) / (n + 1) = 61\n    # => n * x + 45 = 61 * (n + 1)\n    \n    # When Ben joined, the total weight became n * x + 45 + 71,\n    # and the average weight became 62 kg with n + 2 people.\n    # (n * x + 45 + 71) / (n + 2) = 62\n    # => n * x + 116 = 62 * (n + 2)\n    \n    # We now have two equations with two variables (n and x):\n    # Equation 1: n * x + 45 = 61 * (n + 1)\n    # Equation 2: n * x + 116 = 62 * (n + 2)\n    \n    # We can solve this system of equations to find x (the original average weight).\n    \n    from sympy import symbols, Eq, solve\n    \n    n, x = symbols('n x')  # define the symbols\n    # create the equations based on the above descriptions\n    equation1 = Eq(n * x + 45, 61 * (n + 1))\n    equation2 = Eq(n * x + 116, 62 * (n + 2))\n    \n    # solve the system of equations\n    solutions = solve((equation1, equation2), (n, x))\n    \n    # return the value of x, which is the original average weight\n    return solutions[x]\n\nans = solution()"
    ],
    "c2f74cd9163744c0b6071601b66266d4": [
        "def solution():\n    people_needed = (6 * 15) / 2\n    return people_needed\n\nans = solution()"
    ],
    "79e15e6ed353495ba1c745aa3360ff9c": [
        "def solution():\n    n = 40\n    sum_numbers = n * (n + 1) // 2\n    return sum_numbers\n\nans = solution()"
    ],
    "46bcd0c64033467eaa6a8102289e0a41": [
        "def solution():\n    cakes = 195\n    cost_per_cake = 46\n\n    total_cost = cakes * cost_per_cake\n\n    return total_cost\n\nans = solution()"
    ],
    "08705e45e80047af971fb071b94f2dd8": [
        "def solution():\n    n = 2.1 * 100  # Convert meters to centimeters (1 meter = 100 centimeters)\n    return n\n\nans = solution()"
    ],
    "dd3337cf8b074877bdba86538785b68b": [
        "def solution():\n    count = 0\n    for i in range(1, 5): # i is the first number\n        for j in range(1, 5): # j is the second number\n            if i + j == 5 and i != j: # Sum must be 5 and the numbers must be different\n                count += 1\n    return count // 2 # Divide by 2 because each pair is counted twice\n\nans = solution()"
    ],
    "d7edf824287e4a788997a750d1c998c7": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):  # Hundreds digit cannot be 0\n        for tens in range(0, 10):  # Tens digit can be 0-9\n            units = hundreds + 2  # Units digit is two more than hundreds\n            if units < 10:  # Units must be a single digit\n                count += 1\n    return count\n\nans = solution()"
    ],
    "044e10e45e8f4f60ae3f9ce39d3f3cf8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    han, daughter = symbols('han daughter')\n    equation1 = Eq(han, 3 * daughter)\n    equation2 = Eq(han + daughter, 91.2)\n\n    solutions = solve((equation1, equation2), (han, daughter))\n\n    return solutions[han]\n\nans = solution()"
    ],
    "ce902dc0e38d427eb9cd68b799e3bcaf": [
        "def solution():\n    birthday_money = 30\n    sweets_cost = 3.99\n    magazine_cost = 2.50\n    stickers_cost = 0.70\n    pizza_cost = 10.99\n    orange_juice_cost = 1.50 * 4\n\n    total_spent = sweets_cost + magazine_cost + stickers_cost + pizza_cost + orange_juice_cost\n    change_left = birthday_money - total_spent\n\n    return round(change_left, 2)\n\nans = solution()"
    ],
    "cc66cd3f11294d1984b5cf049794398d": [
        "def solution():\n    remaining_after_students = 108 / (2/5)\n    total_chocolates = remaining_after_students / (1 - 0.8)\n    return int(total_chocolates)\n\nans = solution()"
    ],
    "f74c213339b0455a9cf262e2e789bcee": [
        "def solution():\n    sum = 0\n    for i in range(1, 101):\n        sum += (i * i - (i - 1) * (i - 1))\n    return sum\n\nans = solution()"
    ],
    "3973a8cd4ae64cb8a964980f72c023df": [
        "def solution():\n    coin_values = [1, 2, 5]\n    unique_totals = set()\n\n    for i in coin_values:\n        for j in coin_values:\n            for k in coin_values:\n                unique_totals.add(i + j + k)\n\n    ans = len(unique_totals)\n    return ans\n\nans = solution()"
    ],
    "7dfb05a6c32a4880b5ff66c479e32727": [
        "def solution():\n    ans = 2 + 3 * (3 + 2)\n    return ans\n\nans = solution()"
    ],
    "2aa1e0027a284c64a861b8e60942d889": [
        "def solution():\n    count = 0\n    for i in range(1, 131):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "c7536ec02a28451588a7654fe8fdcb94": [
        "def solution():\n    pages = 0 \n    digits = 0\n    \n    while digits < 291:\n        pages += 1\n        digits += len(str(pages))\n        \n    return pages if digits == 291 else pages - 1\n\nans = solution()"
    ],
    "4a61def62aa04793872f134a2ee581fc": [
        "def solution():\n    # If Samantha has more than anyone else, the other two can have at most the same number of votes.\n    # Let the other two candidates have x and x votes and Samantha have y votes, where y > x.\n    # x + x + y = 25 and since Samantha has more votes than anyone else, y > (25 - y) / 2.\n    # Solve for y by plugging in the largest x value that keeps y as an integer and y > x.\n\n    # The other two candidates can have at most 12 votes together because 13+13 would exceed 25.\n    # Samantha must have at least one more vote than 12 ÷ 2, which is 6.\n    # So the next integer is 7, and therefore the minimum for Samantha would be 13.\n\n    other_two_max = (25 - 1) // 2  # 1 is the minimum Samantha needs to have the most    \n    samantha_min = other_two_max + 1\n    return samantha_min\n\nans = solution()"
    ],
    "250e63b1521b424d9f6cf44f8f79623b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4*x + 7, 5*(x + 1))\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "2c1618650feb43ee829f8c60f37d6d85": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    principal = 6000\n    total_amount = 8029.35\n    years = 5\n    \n    equation = Eq(principal * (1 + x / 100) ** years, total_amount)\n    \n    interest_rate = solve(equation, x)\n    \n    return round(interest_rate[0], 2)\n\nans = solution()"
    ],
    "71a5e420be854536b851bfc6431ef442": [
        "def solution():\n    fraction = 13 / 25\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "1e18650a928a4a8aaa9433e3d4f8bdbf": [
        "def solution():\n    weight_in_kg = 2.4\n    weight_in_g = weight_in_kg * 1000\n    return weight_in_g\n\nans = solution()"
    ],
    "54ed486695084b83bc52e1acf3621c39": [
        "def solution():\n    total_money = 1500\n    chair_money = 360\n    percent_spent_on_chairs = (chair_money / total_money) * 100\n    return percent_spent_on_chairs\n\nans = solution()"
    ],
    "58827db30bfe41e3aa8887dbbf840403": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables representing the number of pages read (r) and total pages (t)\n    r, t = symbols('r t')\n\n    # Create equations based on the given ratios and percentages\n    equation1 = Eq(r, t / 6)                     # r is 1 part, t-r (unread) is 5 parts, so r = t/6\n    equation2 = Eq(r + 80, 0.7 * t)              # After reading 80 more pages, r+80 is 70% of t\n\n    # Solve the equations for r and t\n    solutions = solve((equation1, equation2), (r, t))\n\n    # Extract the total number of pages from the solution\n    total_pages = solutions[t]\n\n    return total_pages\n\nans = solution()"
    ],
    "c113a7ebab824fa5aff9432d5ba4e66a": [
        "def solution():\n    # Assume CC answers x questions correctly, then he answers (10 - x) incorrectly.\n    # Thus, Vivi must answer (x + 3) correctly (because she got 15 more points than CC, \n    # which is equivalent to answering 3 more questions correctly), and (7 - x) incorrectly.\n    # Set up the equation for total points:\n    # (10 points * correct answers by CC) - (5 points * incorrect answers by CC)\n    # + (10 points * correct answers by Vivi) - (5 points * incorrect answers by Vivi) = 95 points\n\n    for x in range(11):  # CC can only answer between 0 and 10 questions correctly\n        total_points_cc = 10 * x - 5 * (10 - x)\n        total_points_vivi = 10 * (x + 3) - 5 * (7 - x)\n        if total_points_cc + total_points_vivi == 95:\n            return x\n\nans = solution()"
    ],
    "d6a8e2b1fe0b4d46b18689b12ef527f6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for one book and one magazine\n    book, magazine = symbols('book magazine')\n\n    # Equation representing the total cost of 2 books and 3 magazines\n    total_cost_eq = Eq(2 * book + 3 * magazine, 24.9)\n\n    # Equation representing the cost of 1 book and 1 magazine\n    individual_cost_eq = Eq(book + magazine, 10)\n\n    # Solve the system of equations\n    solutions = solve((total_cost_eq, individual_cost_eq), (book, magazine))\n\n    return solutions[magazine]\n\nans = solution()"
    ],
    "86483a83b8a641b3802d1bcfe3db3b99": [
        "def solution():\n    girls_rooms = 45 // 5\n    teachers_rooms = 6 // 3\n    total_rooms = girls_rooms + teachers_rooms\n    return total_rooms\n\nans = solution()"
    ],
    "96bead80155a4a23ba5e189d220a2750": [
        "def solution():\n    flour_per_person = 650 / 15\n    flour_needed = flour_per_person * 18\n    return flour_needed\n\nans = solution()"
    ],
    "71c301ca64c3481fa3c4d9fbd27b071f": [
        "def solution():\n    adult_price = 6.34\n    child_price = 4.75\n\n    total_cost = (2 * adult_price) + (3 * child_price)\n\n    return total_cost\n\nans = solution()"
    ],
    "41e9b6cd168c41fd92de334d68528b9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the two original numbers be x and y\n    x, y = symbols('x y')\n\n    # Original sum of the numbers\n    original_sum = Eq(x + y, 11.63)\n\n    # Oliver's mistaken sum when the decimal of y is shifted\n    mistaken_sum = Eq(x + y / 10, 5.87)\n\n    # Solving the system of equations\n    solutions = solve((original_sum, mistaken_sum), (x, y))\n\n    # Calculating one hundred times the difference between the two original numbers\n    difference = abs(solutions[x] - solutions[y]) * 100\n\n    return difference\n\nans = solution()"
    ],
    "5286b8a162984ebd83b4dc18a0895e9d": [
        "def solution():\n    mm_to_m_conversion_factor = 1000  # 1000 mm in 1 m\n    metres = 7000000 / mm_to_m_conversion_factor\n    return metres\n\nans = solution()"
    ],
    "8d63b90682ef4e86a52c8d41e221e99e": [
        "def solution():\n    number_str = '2581953752'\n    min_sum = float('inf')\n    \n    for i in range(1, len(number_str)-1):\n        for j in range(i+1, len(number_str)):\n            part1 = int(number_str[:i])\n            part2 = int(number_str[i:j])\n            part3 = int(number_str[j:])\n            \n            current_sum = part1 + part2 + part3\n            \n            if current_sum < min_sum:\n                min_sum = current_sum\n\n    return min_sum\n\nans = solution()"
    ],
    "2428c63651de4a9cb4a9fd440dd72a13": [
        "def solution():\n    quotient = 12\n    remainder = 3\n    divisor = 1\n    dividend = divisor * quotient + remainder\n    return dividend\n\nans = solution()"
    ],
    "982b7c2099ae4cbbbf15acf185975676": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of members be represented by variables\n    science, literature, math = symbols('science literature math')\n\n    # Set up the equations based on the given ratios\n    # 9x : 10x = science : literature\n    # 10y : 7y = literature : math\n    equation1 = Eq(science / literature, 9 / 10)\n    equation2 = Eq(literature / math, 5 / 7)\n\n    # Total members in all clubs is 99\n    equation3 = Eq(science + literature + math, 99)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (science, literature, math))\n\n    # Calculate the difference in members between the math and literature clubs\n    more_members = solutions[math] - solutions[literature]\n\n    return more_members\n\nans = solution()"
    ],
    "e429d1f710e0443ca3e34ebd54ce1999": [
        "def solution():\n    # To be sure to get 3 marbles of the same color,\n    # we consider the worst-case scenario using the Pigeonhole Principle.\n    # We may pick 2 blue and still not have 3 of a kind,\n    # then we may pick 2 yellow and still not have 3 of a kind,\n    # we might pick 1 red, and still not have 3 of a kind.\n    # After this, any next marble we pick must give us 3 of a kind.\n\n    marbles_picked = 2 + 2 + 1  # Worst-case for having 2 of any kind without 3 of one.\n    marbles_picked += 1  # The next marble picked guarantees 3 of one color.\n\n    return marbles_picked\n\nans = solution()"
    ],
    "d67e4c58bf394611abfd4c9f92360478": [
        "def solution():\n    num = 48\n    factors = [i for i in range(1, num + 1) if num % i == 0]\n    even_factors_count = sum(1 for factor in factors if factor % 2 == 0)\n    return even_factors_count\n\nans = solution()"
    ],
    "a01e320335ab4dd5a4d3902f2010b2ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    melissa_age_now, melissa_mother_age_now = symbols('melissa_age_now melissa_mother_age_now')\n    \n    equation1 = Eq(melissa_mother_age_now, 32 + (melissa_age_now - 8))\n    equation2 = Eq(melissa_mother_age_now, 3 * melissa_age_now)\n    \n    solutions = solve((equation1, equation2), (melissa_age_now, melissa_mother_age_now))\n    \n    return solutions[melissa_age_now]\n\nans = solution()"
    ],
    "60cc013cce3f4dc3889d6f7f58af72a5": [
        "def solution():\n    # Since the flowers at the corners are counted for two sides,\n    # we subtract the corners from the total count of each side and then add the corners back.\n    flowers_per_side = 6\n    corners = 4\n    total_flowers = 4 * (flowers_per_side - 1) + corners\n\n    return total_flowers\n\nans = solution()"
    ],
    "27557b6401534a719cdf0923343a5978": [
        "def solution():\n    original_length = 10.0\n    piece1 = 4.8\n    piece2 = 2.73\n    piece3 = original_length - (piece1 + piece2)\n\n    longest = max(piece1, piece2, piece3)\n    shortest = min(piece1, piece2, piece3)\n\n    difference = longest - shortest\n\n    return difference\n\nans = solution()"
    ],
    "0ee683d386944878b9a97b21d30b9512": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the cost of a volleyball be x\n    # Then, the cost of a basketball is x + 10\n    basketball, volleyball = symbols('basketball volleyball')\n    equation1 = Eq(5 * basketball + 6 * volleyball, 325)\n    equation2 = Eq(basketball, volleyball + 10)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (basketball, volleyball))\n\n    return solutions[basketball]\n\nans = solution()"
    ],
    "0d0aa1e9d4534f37bbbcb05df00921eb": [
        "def solution():\n    # Define the repeating pattern and the total length\n    pattern = \"1234\"\n    total_length = 47\n    \n    # Calculate how many times the pattern repeats completely\n    repeat_times = total_length // len(pattern)\n    \n    # Calculate the leftover digits after the complete patterns\n    leftover_digits = total_length % len(pattern)\n    \n    # Calculate the sum of digits in the repeating pattern\n    sum_full_pattern = sum(int(digit) for digit in pattern)\n    \n    # Calculate the sum of the leftover digits\n    sum_leftover = sum(int(pattern[i]) for i in range(leftover_digits))\n    \n    # Calculate the total sum of all digits in the 47-digit number\n    total_sum = (sum_full_pattern * repeat_times) + sum_leftover\n    \n    return total_sum\n\nans = solution()"
    ],
    "f1695ae843b54e2e815cd446c64a29f4": [
        "def solution():\n    price_per_bottle = 2.52 / 6\n    cost_for_nine = price_per_bottle * 9\n    return round(cost_for_nine, 2)\n\nans = solution()"
    ],
    "fa6f1ecf65574a4f92806a9db2ff7aa4": [
        "def solution():\n    from sympy import Rational\n\n    # cost of book and bag together\n    total_cost = 132\n\n    # Thomas's calculation: 5 units = 132\n    thomas_unit_cost = total_cost / 5\n\n    # Thomas's total money according to his calculation\n    thomas_total_money = thomas_unit_cost * 6\n\n    # Correct calculation:\n    # Let x be the total money Li Yan had at first.\n    # book_cost = (1/3) * x\n    # remaining_after_book = x - book_cost = x - (1/3) * x = (2/3) * x\n    # bag_cost = (1/2) * remaining_after_book = (1/2) * (2/3) * x = (1/3) * x\n    # So, the total cost is the sum of book_cost and bag_cost which is (1/3) * x + (1/3) * x = (2/3) * x\n    # Since the total cost is 132, we have (2/3) * x = 132\n    # Thus, x = 132 / (2/3) = 132 * (3/2)\n\n    # correct_total_money is the correct total money Li Yan had at first\n    correct_total_money = total_cost * (Rational(3, 2))\n\n    # Check if Thomas's answer is correct or not\n    ans = thomas_total_money if thomas_total_money == correct_total_money else correct_total_money\n\n    return ans\n\nans = solution()"
    ],
    "e886e230e9a14129ab9efc5f51fc6eeb": [
        "def solution():\n    for correct in range(26):\n        incorrect = 25 - correct\n        jack_points = correct * 4 - incorrect\n        if jack_points == 61:\n            return incorrect\n\nans = solution()"
    ],
    "cb28d5923791411abd5c48b4c2e56055": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(0, 10):\n            ab = 10 * a + b\n            ba = 10 * b + a\n            if 8 * ab == 3 * ba:\n                return ab\n\nans = solution()"
    ],
    "d042bcbac05b43a89ee5aae713200f24": [
        "def solution():\n    total_pupils = 40\n    total_average = 35\n    boys_average = 20\n    girls_average = 60\n    \n    # Let the number of boys be x\n    # Then, the number of girls will be total_pupils - x\n    # Total pencils for boys: boys_average * x\n    # Total pencils for girls: girls_average * (total_pupils - x)\n    # The total pencils for both boys and girls is equal to total_average * total_pupils\n    # Hence we get the equation: boys_average * x + girls_average * (total_pupils - x) = total_average * total_pupils\n\n    # Now solve for x\n    x = (total_average * total_pupils - girls_average * total_pupils) / (boys_average - girls_average)\n\n    return int(x)\n\nans = solution()"
    ],
    "2760fd70b00d4bc1bbb33c4a1176ce49": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for pigs and goats\n    pigs, goats = symbols('pigs goats')\n\n    # Create equations based on the given conditions\n    equation1 = Eq(3 * pigs + 1 * goats, 440)\n    equation2 = Eq(1 * pigs + 2 * goats, 280)\n\n    # Solve the system of equations for the price of one pig and one goat\n    solutions = solve((equation1, equation2), (pigs, goats))\n\n    # Calculate the total cost for 5 pigs and 5 goats\n    total_cost = 5 * solutions[pigs] + 5 * solutions[goats]\n\n    return total_cost\n\nans = solution()"
    ],
    "8d9f841035384ec78cd71c7adbc51cf2": [
        "def solution():\n    total_pounds = 1.28\n    total_pence = 57\n    # Convert pence to pounds and add it to the total pounds\n    total = total_pounds + (total_pence / 100)\n    return round(total, 2)\n\nans = solution()"
    ],
    "70a735430d5b4777a79bbddaf2823ef0": [
        "def solution():\n    # Cost per cupcake for the initial 20 or fewer cupcakes\n    initial_cost_per_cupcake = 4.50\n    \n    # Shipping and handling cost\n    shipping_handling = 12.00\n    \n    # Discounted cost for cupcakes above 20\n    discount = 0.20\n    discounted_cost_per_cupcake = initial_cost_per_cupcake * (1 - discount)\n    \n    # Total bill amount\n    total_bill = 120.00\n    \n    # Calculate the number of cupcakes if 20 or fewer are ordered\n    if (total_bill - shipping_handling) / initial_cost_per_cupcake <= 20:\n        cupcakes_ordered = (total_bill - shipping_handling) / initial_cost_per_cupcake\n    else:\n        # Calculate number of cupcakes if more than 20 are ordered\n        # First, subtract the cost of the initial 20 cupcakes and the shipping fee\n        remaining_bill = total_bill - (20 * initial_cost_per_cupcake) - shipping_handling\n        # Then, divide the remaining bill by the discounted cost per cupcake\n        additional_cupcakes = remaining_bill / discounted_cost_per_cupcake\n        # The total number of cupcakes is the initial 20 plus the additional discounted cupcakes\n        cupcakes_ordered = 20 + additional_cupcakes\n    \n    return int(cupcakes_ordered)\n\nans = solution()"
    ],
    "e42cc648c3f649cf90ee902c4be9e740": [
        "def solution():\n    ans = 15 / (1/3)\n    return ans\n\nans = solution()"
    ],
    "1f17462588b24d4d87e7ac26ce8e297e": [
        "def solution():\n    for num in range(10000, 100000):\n        if int('1' + str(num)) == int(str(num) + '1') // 3:\n            return num\n\nans = solution()"
    ],
    "5b2be8c5931d445e95f69e4a169b6320": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable A\n    A = symbols('A')\n  \n    # Build the equation given based on the recursive fraction structure\n    equation = Eq(2 + 1/(2 + 1/(1 + 1/(2 + 1/A))), 64/27)\n    \n    # Solve the equation for A\n    solution_A = solve(equation, A)\n    \n    # Return the solution (as the first and only solution)\n    return solution_A[0]\n\nans = solution()"
    ],
    "f29bca0ca85649a0aa278151d40c1060": [
        "def solution():\n    people_in_front = 9\n    position_from_back = 12\n    total_people = people_in_front + position_from_back - 1\n\n    return total_people\n\nans = solution()"
    ],
    "ad987dbb1afa406d877032905dfd4b9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    days_lazy = symbols('days_lazy')\n    \n    # Productivity rate for the energetic decorator per day\n    rate_energetic = 1 / 10\n    # Productivity rate for both decorators per day when working together\n    rate_together = 1 / 6\n    \n    # equation for the lazy decorator's rate\n    equation = Eq(rate_energetic + (1 / days_lazy), rate_together)\n\n    days_lazy_value = solve(equation, days_lazy)\n\n    return days_lazy_value[0]\n\nans = solution()"
    ],
    "c2a4472f1dcc4adaa002fb9b0cdbc480": [
        "def solution():\n    john_current_age = 8\n    grandmother_age_difference = 42\n\n    john_future_age = john_current_age + 2\n    grandmother_future_age = (john_current_age + grandmother_age_difference) + 2\n\n    total_future_age = john_future_age + grandmother_future_age\n\n    return total_future_age\n\nans = solution()"
    ],
    "af15f396b0a9452e90cd92024ee3655d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for the number John thought of\n    x = symbols('x')\n    \n    # Create an equation based on the problem statement\n    equation = Eq((x + 45) / 3, 2 * x)\n    \n    # Solve the equation for x\n    solution = solve(equation, x)\n    \n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "164b7924a0ed4adebd005bf7b479d61e": [
        "def solution():\n    n = 50\n    sum_n = (n*(n+1))//2\n    return sum_n\n\nans = solution()"
    ],
    "c873b5b5ac9541dcb53c627cbe9f99fb": [
        "def solution():\n    result = 52\n    thought_number = (result - 10) / 2\n    return thought_number\n\nans = solution()"
    ],
    "48f2b82e698b40afaaebc96c59f848cf": [
        "def solution():\n    # Since each brother has at least two books,\n    # we start by giving two books to each brother.\n    remaining_books = 10 - 2 * 3\n\n    # Possible distributions of the remaining 4 books among the three brothers\n    # can be represented as the solutions to the equation x1 + x2 + x3 = 4\n    # where x1, x2, and x3 are non-negative integers.\n    # This is a problem of distributing 'n' identical items into 'r' distinct groups,\n    # which is a classic stars and bars combinatorics problem.\n    # The number of ways to do this is given by the combination (n + r - 1) choose (r - 1).\n    # In this case n = remaining_books and r = 3.\n    n = remaining_books\n    r = 3\n    ways = math.comb(n + r - 1, r - 1)\n\n    return ways\n\nimport math\n\nans = solution()"
    ],
    "d2baf801099b456eb142be13a3d0ee04": [
        "def solution():\n    ans = -2 + 9\n    return ans\n\nans = solution()"
    ],
    "6563b1695a224e99b4db826a159ebb3f": [
        "def solution():\n    pages_first_day = 40\n    fraction_of_book = 1 / 5\n    total_pages = pages_first_day / fraction_of_book\n    return int(total_pages)\n\nans = solution()"
    ],
    "1b6c26ceb8bb4bedb8eb52f798a8d704": [
        "def solution():\n    # Worst case scenarios for not getting 4 marbles of different colors:\n    # Draw all marbles of one color + 1 more of any other color\n    max_same_color_marbles = max(12, 9, 8, 3)\n\n    # Ensure next draw is a different color by picking all of a second color\n    second_max_marbles = second_max(12, 9, 8, 3, max_same_color_marbles)\n\n    # Ensure next draw is a third color by picking all of a third color\n    third_max_marbles = third_max(12, 9, 8, 3, max_same_color_marbles, second_max_marbles)\n\n    # The next draw will definitely be the fourth color\n    draws_to_ensure_four_colors = max_same_color_marbles + second_max_marbles + third_max_marbles + 1\n\n    return draws_to_ensure_four_colors\n\ndef second_max(a, b, c, d, first_max):\n    # Returns the second max value, given the first max known\n    values = [a, b, c, d]\n    values.remove(first_max)\n    return max(values)\n\ndef third_max(a, b, c, d, first_max, second_max):\n    # Returns the third max value, given the first and second max known\n    values = [a, b, c, d]\n    values.remove(first_max)\n    values.remove(second_max)\n    return max(values)\n\nans = solution()"
    ],
    "902e4b7c9173456ebdf391276d04a873": [
        "def solution():\n    # The number can be represented as 5 * (10^38 + 10^37 + ... + 10^20) + d * 10^19 + 9 * (10^18 + 10^17 + ... + 10^0)\n    # Where d is the middle digit we are looking to find.\n    \n    # since 10^a mod 7 = (10 mod 7)^a mod 7, we are only interested in the remainder when 10 is divided by 7\n    # which is 3. Thus 10^a mod 7 = 3^a mod 7\n    \n    # We calculate the contribution of 5s to the number modulo 7\n    five_contrib = sum([3 ** i % 7 for i in range(20, 39)]) * 5 % 7\n    \n    # We calculate the contribution of 9s to the number modulo 7\n    nine_contrib = sum([3 ** i % 7 for i in range(0, 19)]) * 9 % 7\n    \n    # The middle digit's contribution would be d * (10^19 mod 7)\n    # which is d * (3^19 mod 7). We precalculate 3^19 mod 7\n    d_contrib_multiplier = 3 ** 19 % 7\n    \n    # We are looking for a d such that (five_contrib + d * d_contrib_multiplier + nine_contrib) % 7 == 0\n    for d in range(10):\n        if (five_contrib + d * d_contrib_multiplier + nine_contrib) % 7 == 0:\n            return d\n\nans = solution()"
    ],
    "5c64c7efc74e45c9b22395c64f0188f1": [
        "def solution():\n    for hundreds in range(1, 10):\n        for tens in range(0, 10):\n            for ones in range(0, 10):\n                if hundreds + tens + ones == 15 and tens == 2 * hundreds and hundreds == ones + 1:\n                    return hundreds * 100 + tens * 10 + ones\n\nans = solution()"
    ],
    "c07d7632fe45424588ee9b8ac2d2fccf": [
        "def solution():\n    # Since Tom stands at the 10th place, there are 9 children shorter than him.\n    # In the worst case scenario, these children are the shortest possible, \n    # meaning they start from 1cm and go up to 9cm with a difference of 1cm between each child.\n\n    # The remaining children after Tom, which are 31 - 10 = 21 children,\n    # are taller than him and they are consecutive whole number heights.\n    # The last child is 131cm tall, so in the worst case scenario,\n    # these children's heights are the smallest possible, starting just above Tom's height\n    # and going up to 131cm.\n\n    # We can find the maximum height for Tom by setting his height to be\n    # before a sequence of 21 consecutive heights ending with 131.\n\n    # Let's assume Tom's height is h.\n    # Then the next child after Tom would have a height of h+1, next would be h+2 and so on,\n    # until the last child whose height is 131, which would be h+21.\n\n    # We can set up the equation h + 21 = 131,\n    # which means Tom's height would be 131 - 21.\n\n    tom_height = 131 - 21\n    return tom_height\n\nans = solution()"
    ],
    "7607c9c8b07e482d9e79d3a708db918f": [
        "def solution():\n    # A two-digit number with 6 as the unit digit ranges from 16 to 96\n    # We increment by tens because the tens digit changes while the unit digit is always 6\n    ans = len(range(16, 97, 10))\n    return ans\n\nans = solution()"
    ],
    "2dfebe97055d446791ecaff5fcc836bf": [
        "def solution():\n    current_purchase = 105.6\n    difference = 14.4\n    last_purchase = current_purchase - difference\n    total_spent = current_purchase + last_purchase\n    return total_spent\n\nans = solution()"
    ],
    "fcb8fb796c2e414aa7381ebb608de85a": [
        "def solution():\n    return 73 * 42\n\nans = solution()"
    ],
    "f7ea1bce2ab643be811669ebb19981e8": [
        "def solution():\n    a, b = 3, 10\n    for _ in range(3, 2023):\n        a, b = b, a + b\n    return b % 3\n\nans = solution()"
    ],
    "3d72ae69fbf944028dbf7faeb677cf3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    magic_number = symbols('magic_number')\n\n    equation = Eq(208 - magic_number, 9 * (136 - magic_number))\n\n    solutions = solve(equation, magic_number)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "0d39e6b35f684ae79df0144ef9a461d4": [
        "def solution():\n    ans = 0.7 / 100\n    return ans\n\nans = solution()"
    ],
    "39dc0e644ff04e4b8de2705b050243b2": [
        "def solution():\n    # Let's assume Anthea's initial number of storybooks is A.\n    # Jason has 30 books. After giving 4 to Anthea, both have the same number.\n    # So, Jason will have 30 - 4 books left, i.e., 26 books.\n    # This means Anthea also has 26 books after receiving 4 from Jason.\n    # Thus, Anthea's initial number of storybooks was 26 - 4, which is 22.\n    # The difference between Jason and Anthea's initial number of storybooks is 30 - 22.\n    jason_books_after_giving = 30 - 4\n    anthea_books_initial = jason_books_after_giving - 4\n    difference = 30 - anthea_books_initial\n\n    return difference\n\nans = solution()"
    ],
    "b0b3f16fb74d472d8584aeb80b4a4f84": [
        "def solution():\n    # Let the number of students be x, and the total number of gifts be y.\n    # According to the problem, we have two equations:\n    # y = 5x + 3 ...(1)\n    # y = 4x + 9 ...(2)\n    \n    # From equation (1) and (2), we can eliminate y and solve for x:\n    # 5x + 3 = 4x + 9\n    # 5x - 4x = 9 - 3\n    # x = 6\n    \n    # Therefore, there are 6 students.\n    return 6\n\nans = solution()"
    ],
    "b6d78733f8874f2bbfe35bd591c415ac": [
        "def solution():\n    from sympy import factorint\n\n    num = 840\n    factors_dict = factorint(num)\n    num_factors = 1\n\n    for prime, exponent in factors_dict.items():\n        num_factors *= (exponent + 1)\n\n    return num_factors\n\nans = solution()"
    ],
    "4abc9fccc13742938eb625a6b470a258": [
        "def solution():\n    return 349 * 7\n\nans = solution()"
    ],
    "d920f123f70448728a0dafe2a25fdf8d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for amounts of money Alan, Bella, and Chloe have.\n    alan, bella, chloe = symbols('alan bella chloe')\n\n    # Create equations based on the problem description.\n    total_money_eq = Eq(alan + bella + chloe, 200)  # Total amount of money\n    ratio_eq = Eq(alan / bella, 4 / 3)  # Ratio of Alan's money to Bella's\n    more_money_eq = Eq(alan, chloe + 20)  # Alan has £20 more than Chloe\n\n    # Solve equations\n    solutions = solve((total_money_eq, ratio_eq, more_money_eq), (alan, bella, chloe))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "9778a46322434ec1b4d042645d3fe72c": [
        "def solution():\n    box_of_chocolates = 7.85\n    chocolate_bar_cost = 1.83\n    total_cost = box_of_chocolates + (2 * chocolate_bar_cost)\n    paid_amount = 20\n    change = paid_amount - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "008ec416ca584514bc4c64610a10f70c": [
        "def solution():\n    factorial = lambda x: x * factorial(x - 1) if x > 1 else 1\n    # Lily and her mother's positions are fixed\n    # So we need to arrange the remaining three family members\n    ans = factorial(3)  # 3!\n    return ans\n\nans = solution()"
    ],
    "56e3afa3b21b4b4d94f49f7e28b2d801": [
        "def solution():\n    # First row has 7 seats, and the last row has 99 seats.\n    first_term = 7\n    last_term = 99\n    # Each row has 4 more seats than the row in front of it.\n    difference = 4\n    \n    # Calculate the number of rows using the formula for the nth term of an arithmetic sequence:\n    # last_term = first_term + (n - 1) * difference\n    # n = ((last_term - first_term) / difference) + 1\n    num_rows = ((last_term - first_term) // difference) + 1\n    \n    # Calculate the sum of an arithmetic sequence using the formula:\n    # sum = (n / 2) * (first_term + last_term)\n    total_seats = (num_rows / 2) * (first_term + last_term)\n    \n    return int(total_seats)\n\nans = solution()"
    ],
    "d648707a7707454fba27679a28405452": [
        "def solution():\n    for num in range(10, 100):  # smallest two-digit number is 10, largest is 99\n        if num % 5 == 4 and num % 7 == 4:\n            return num\n\nans = solution()"
    ],
    "d56f06764b62432b87f7f6c8d24937fd": [
        "def solution():\n    return 1.28 - 0.57\n\nans = solution()"
    ],
    "e681c565553246ed822a81c5b707ec85": [
        "from itertools import permutations\n\ndef solution():\n    all_digits = [1, 2, 3, 4, 5, 6, 7, 8]\n    all_possible_numbers = set(permutations(all_digits, 2))\n    \n    # Convert the permutations to integer numbers\n    all_possible_numbers = set(a * 10 + b for a, b in all_possible_numbers)\n    \n    # Find numbers meeting the conditions\n    condition1_numbers = set(num for num in all_possible_numbers if num % 10 == (num // 10) * 2)\n    condition3_numbers = set(num for num in all_possible_numbers if (num // 10) == (num % 10) + 5)\n    \n    # The largest number with sum of digits equal 9 can only be 18, 27, 36, 45, 54, 63, 72, or 81\n    largest_numbers = {18, 27, 36, 45, 54, 63, 72, 81}\n    condition2_numbers = largest_numbers.intersection(all_possible_numbers)\n    \n    # Remove numbers that have overlapping digits\n    for num in condition1_numbers:\n        all_possible_numbers.discard(num)\n    for num in condition2_numbers:\n        all_possible_numbers.discard(num)\n    for num in condition3_numbers:\n        all_possible_numbers.discard(num)\n    \n    # Find the only odd number and also remove it from the list\n    odd_numbers = set(num for num in all_possible_numbers if num % 2 != 0)\n    if len(odd_numbers) == 1:\n        odd_number = odd_numbers.pop()\n    else:\n        odd_number = 0  # Just to initialize odd_number, this case should not happen\n    all_possible_numbers.discard(odd_number)\n    \n    numbers = sorted(list(condition1_numbers) + list(condition2_numbers) + list(condition3_numbers) + [odd_number])\n    idx_second_smallest = numbers.index(odd_number) - 1 if numbers.index(odd_number) > 0 else 1\n    second_smallest = numbers[idx_second_smallest]\n    \n    return second_smallest\n\nans = solution()"
    ],
    "9c5b7505e33a431cbdc19a2c3eb56463": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for total visitors\n    total_visitors = symbols('total_visitors')\n\n    # Equation based on given information\n    children = (3/5) * total_visitors\n    remaining = total_visitors - children\n    men = (1/2) * remaining\n    equation = Eq(children, men + 140)\n\n    # Solve the equation\n    solved = solve(equation, total_visitors)\n\n    return solved[0]\n\nans = solution()"
    ],
    "355c1761cec84abd8c37e4d0cef83961": [
        "def solution():\n    # Average of three numbers is 120\n    average_three_numbers = 120\n    sum_three_numbers = 3 * average_three_numbers\n\n    # Average of four numbers is 150\n    average_four_numbers = 150\n    sum_four_numbers = 4 * average_four_numbers\n\n    # Calculate the fourth number by getting the difference\n    fourth_number = sum_four_numbers - sum_three_numbers\n\n    return fourth_number\n\nans = solution()"
    ],
    "e2a5a025a0174c48a9cbcfecee7eec99": [
        "def solution():\n    n = 15  # upper limit of the range\n    first_term = 5  # starting term\n    sum_of_squares = (n * (n + 1) * (2 * n + 1)) // 6 - ((first_term - 1) * (first_term) * (2 * (first_term - 1) + 1)) // 6\n    return sum_of_squares\n\nans = solution()"
    ],
    "bab761c62984431592b8726b89f2c00c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let peter be the symbol for the number of stickers Peter originally had\n    peter = symbols('peter')\n\n    # Based on the problem, Sam had peter + 40 stickers initially\n    sam = peter + 40\n\n    # Sam gave 20% of his stickers to Peter: sam - 0.20 * sam\n    sam_after_giving = sam - 0.20 * sam\n\n    # Peter after receiving 20% from Sam: peter + 0.20 * sam\n    peter_after_receiving = peter + 0.20 * sam\n\n    # Peter gave 25% of his new total to Sam: peter_after_receiving - 0.25 * peter_after_receiving\n    peter_after_giving_back = peter_after_receiving - 0.25 * peter_after_receiving\n\n    # Sam after receiving 25% from Peter: sam_after_giving + 0.25 * peter_after_receiving\n    sam_after_receiving_back = sam_after_giving + 0.25 * peter_after_receiving\n\n    # The final difference between Sam's and Peter's stickers is 96\n    final_diff = sam_after_receiving_back - peter_after_giving_back\n\n    # Setting up the equation based on the final difference\n    equation = Eq(final_diff, 96)\n\n    # Solving the equation for the number of stickers Peter had initially\n    solutions = solve(equation, peter)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "a377ef0412d7428190675053dcb17b39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the initial amount of money Amy had.\n    x = symbols('x')\n\n    # She spent 6/11 of her money and an additional $5\n    money_after_highlighters = x - (6/11)*x - 5\n    \n    # She then spent 3/10 of the remainder and an additional $12\n    money_after_pens = money_after_highlighters - (3/10)*money_after_highlighters - 12\n    \n    # She has $30 left\n    equation = Eq(money_after_pens, 30)\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "e03fffbc9560433d92099ac8fe50d88b": [
        "def solution():\n    return 543 * 6\n\nans = solution()"
    ],
    "c49ccde6fc4248779aaf8093faa8ad18": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Let x be the number of questions she answered correctly\n    x = symbols('x')\n\n    # Total questions\n    total_questions = 20\n\n    # Points for each correct answer\n    correct_points = 5\n\n    # Penalty for each incorrect answer\n    incorrect_penalty = 2\n\n    # Equation based on total score\n    total_score = Eq(correct_points * x - incorrect_penalty * (total_questions - x), 51)\n\n    # Solve the equation\n    correct_answers = solve(total_score, x)[0]\n\n    return correct_answers\n\nans = solution()"
    ],
    "98eef6de38874e70b51aaed908dca418": [
        "def solution():\n    ans = (26 + (12 + 6) * 3) / 4\n    return ans\n\nans = solution()"
    ],
    "f15fa89c42d94b389e9ef9de02718b7a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sally, gillian = symbols('sally gillian')\n\n    equation1 = Eq(sally / gillian, 2 / 7)\n    equation2 = Eq((sally + 15) / (gillian + 15), 1 / 2)\n\n    solutions = solve((equation1, equation2), (sally, gillian))\n\n    return solutions[sally]\n\nans = solution()"
    ],
    "2c7e97e51b1c44f49d2f4e7c79fde704": [
        "def solution():\n    mistaken_subtrahend = 70\n    result_with_mistake = 30\n    \n    # Olivia's original minuend is calculated by adding back the mistaken subtrahend\n    original_minuend = mistaken_subtrahend + result_with_mistake\n    \n    # The correct subtrahend is 75 as given in the problem\n    correct_subtrahend = 75\n    \n    # The correct result is the original minuend minus the correct subtrahend\n    correct_result = original_minuend - correct_subtrahend\n    \n    return correct_result\n\nans = solution()"
    ],
    "7b32265def7a4762b0e99a9bf7936e79": [
        "def solution():\n    count = 0\n    for customer in range(1, 41):\n        if customer % 3 == 0 and customer % 4 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a1d04f9a8f8d4d059eb87e3597859b60": [
        "def solution():\n    hook_time = 20\n    lily_time = hook_time - 5\n    return lily_time\n\nans = solution()"
    ],
    "d7682b78c94a49209da98614f89b4b03": [
        "def solution():\n    ans = 35 * 9 / 45\n    return int(ans)\n\nans = solution()"
    ],
    "681b53f5f3ca46d192bdc4d5538dc3f9": [
        "def solution():\n    distance_between_seeds = 1.5 # in meters\n    number_of_seeds = 12\n    total_distance = distance_between_seeds * number_of_seeds\n    circumference = total_distance\n    return circumference\n\nans = solution()"
    ],
    "a91b6b3ee1ba49258ef75384834b6006": [
        "def solution():\n    ans = (3/8) * 32\n    return ans\n\nans = solution()"
    ],
    "3061e5b8281f449bae77026f2740418a": [
        "def solution():\n    # Find the mass of one apple.\n    mass_of_one_apple = 1 / 9\n    \n    # Find the total number of apples from 8 kg.\n    total_apples = 8 / mass_of_one_apple\n    \n    # Calculate the number of cakes the baker can bake with the total apples.\n    number_of_cakes = total_apples // 4\n    \n    return int(number_of_cakes)\n\nans = solution()"
    ],
    "e3c684818e824d38b568f73a39a2e8a3": [
        "def solution():\n    # let x be the number of papers cut into three parts\n    # Initially, there are 10 papers. After cutting x papers into three parts,\n    # each paper cut into three parts adds 2 additional pieces (since it is split into 3 pieces).\n    # The total number of papers after cutting is 16.\n    # Hence, the equation is: 10 - x + 2x = 16\n    # Solving for x gives us the number of papers that were cut.\n\n    for x in range(10 + 1): # Check every possible number of cut papers, from 0 to 10\n        if 10 - x + 2 * x == 16:\n            return x\n\nans = solution()"
    ],
    "48863edbbbd648d296639b0ac7b6a0a5": [
        "def solution():\n    ans = 198 + 67 - 25\n    return ans\n\nans = solution()"
    ],
    "51f55ad6ea4b438da0c7c862bf88d5ca": [
        "def solution():\n    total_boys = 12\n    total_girls = 8\n    average_boys = 10\n    average_all = 14\n\n    total_score_boys = total_boys * average_boys\n    total_score_all = (total_boys + total_girls) * average_all\n    total_score_girls = total_score_all - total_score_boys\n    average_girls = total_score_girls / total_girls\n\n    return average_girls\n\nans = solution()"
    ],
    "18a91f2a3e4b4cc6a04adbcfd3069472": [
        "def solution():\n    # There were originally 50 postcards divided evenly into 5 envelopes\n    postcards_per_envelope_initial = 50 // 5\n\n    # After a week, an unknown number of postcards are added and divided into 2 envelopes evenly\n    # Let's assume that the number of postcards added is x, which must be divisible by 2\n    # Since all envelopes should have the same number of postcards, x // 2 has to be equal to the initial postcards per envelope\n    # This makes x = 2 * postcards_per_envelope_initial\n\n    postcards_added = 2 * postcards_per_envelope_initial\n\n    # The total number of postcards after the new ones are added\n    total_postcards = 50 + postcards_added\n\n    return total_postcards\n\nans = solution()"
    ],
    "c0dd58bb208c4720a65f8a3da63ebc53": [
        "def solution():\n    # List all possible coin denominations in GBP, assuming no use of bills\n    coins = [1, 2, 5, 10, 20, 50, 100, 200] # Pence values\n\n    for smallest in coins: # loop from smallest coin to largest\n        remaining = 250 - smallest * 2 # start by taking two of the smallest coins\n        # Attempt to use pairs of coins to make up the remaining change\n        if remaining >= 0:\n            for coin in coins:\n                if remaining - coin * 2 == 0:\n                    return smallest / 100 # Convert pence to pounds for the answer\n\n# Call the function\nans = solution()"
    ],
    "13a8b45061f4450e89e1c253f4020c18": [
        "import sympy as sp\n\ndef solution():\n    x = sp.symbols('x')\n    # Original square array equation: (root + 1)**2 = root**2 + 16\n    # It implies that root + 1 is the side of the new square\n    # After solving, root should be the side of the original square\n    root = sp.solve(x**2 - (x+1)**2 + 16, x)\n    \n    # Since we're looking for a real, positive number of students\n    for r in root:\n        if r.is_real and r > 0:\n            n_students = r**2 + 9  # Number of students in the original square + surplus\n            return int(n_students)\n\nans = solution()"
    ],
    "d7759b0612fe43e8a7e3a06d59283855": [
        "def solution():\n    cost_per_100g = 0.80\n    weight_needed = 250\n    cost_per_250g = (cost_per_100g / 100) * weight_needed\n    return cost_per_250g\n\nans = solution()"
    ],
    "8cf2ad99816645c8ba0e8566d2059b61": [
        "def solution():\n    ans = ((-3.2) - (0.2)**2) / (-1.8) - (41.08 - (-(2/5))**2) / (3 + (-2)**3)\n    return ans\n\nans = solution()"
    ],
    "03ff37f2d8384e4285c23e9e15eec692": [
        "def solution():\n    total_apples = 27\n    apples_per_container = 4\n    num_containers = -(-total_apples // apples_per_container)\n\n    return num_containers\n\nans = solution()"
    ],
    "d6d6b3b23b51458482c4922539d3c5df": [
        "def solution():\n    ans = 50 - 21 - 19\n    return ans\n\nans = solution()"
    ],
    "5477bd06248540239e46216795757a4a": [
        "def solution():\n    return (14 / 20) * 100\n\nans = solution()"
    ],
    "a5661c18fea04c948a12554694325f0d": [
        "def solution():\n    for i in range(1, 10**6):  # Assuming the special number has less than 6 digits\n        original_number = i\n        units_digit = original_number % 10\n        \n        if units_digit == 9:  # Check if unit's digit is 9\n            number_without_units = original_number // 10\n            new_number = int(str(units_digit) + str(number_without_units))\n            \n            if new_number == 4 * original_number:\n                return original_number\n    return None\n\nans = solution()"
    ],
    "2324e551139441b59d8da8e39e7bf259": [
        "def solution():\n    for Y in range(10):\n        number = int(f\"107{Y}\")\n        if number % 6 == 0:\n            return Y\n\nans = solution()"
    ],
    "3443aaa6a82a4aa1acae9f85d2a28ffe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let total_cookies be the number of cookies Jolie baked originally\n    total_cookies = symbols('total_cookies')\n\n    # We know that 3/5 of the cookies were burnt\n    burnt_cookies = (3/5) * total_cookies\n\n    # She sold 75% of the remaining cookies\n    remaining_cookies = total_cookies - burnt_cookies\n    sold_cookies = 0.75 * remaining_cookies\n\n    # The number of cookies she burnt is 42 more than the number she sold\n    equation = Eq(burnt_cookies, sold_cookies + 42)\n\n    # Solve for the total number of cookies\n    solution = solve(equation, total_cookies)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7b61fa01ec374c2b83c5f8a39d04e91c": [
        "def solution():\n    for num in range(10, 100):\n        if num % 4 == 1 and num % 7 == 1:\n            return num\n\nans = solution()"
    ],
    "93e28acfc00d445394efdabe5a2da3c8": [
        "def solution():\n    from math import factorial\n\n    # Laura stands in the front, so there are 5! ways for the other five students\n    total_ways_without_restriction = factorial(5)\n\n    # Rita cannot stand at the end, so we calculate the ways when Rita stands at the end\n    ways_with_rita_at_end = factorial(4)  # since Laura is at front and Rita at end\n\n    # Subtract the restricted ways from the total ways without restriction\n    valid_ways = total_ways_without_restriction - ways_with_rita_at_end\n\n    return valid_ways\n\nans = solution()"
    ],
    "90c447fcc0de4e5a9b771920095757aa": [
        "def solution():\n    sugar_weight = 70\n    water_weight = 490\n    total_solution_weight = sugar_weight + water_weight\n    concentration = (sugar_weight / total_solution_weight) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "b5485eaf0ddf46c89dd4082df078ffbf": [
        "def solution():\n    n = (36 / 3) / 4\n    return n\n\nans = solution()"
    ],
    "2bf4015e0be3437da65611461a6f01c5": [
        "def solution():\n    a = 4\n    b = 7\n    ans = (a + b) * a\n    return ans\n\nans = solution()"
    ],
    "c8ffb29e933649f1a14001292da6814e": [
        "def solution():\n    return 53 * 9\n\nans = solution()"
    ],
    "0f16879a0bec4f9fb882203fb6a75cef": [
        "def solution():\n    regular_price = 120\n    discount = 0.50\n    additional_discount = 0.20\n\n    discounted_price = regular_price * (1 - discount)\n    final_price = discounted_price * (1 - additional_discount)\n\n    return final_price\n\nans = solution()"
    ],
    "3d94d3aa90b542049e493d4ab7538dea": [
        "def solution():\n    sold_apples = 88\n    fraction_sold = 4 / 7\n\n    total_apples = sold_apples / fraction_sold\n\n    return int(total_apples)\n\nans = solution()"
    ],
    "799dbcfeda0a40a3a052a9aed029df33": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    buzz, jessie = symbols('buzz jessie')\n    # Buzz is three times as heavy as Jessie\n    equation1 = Eq(buzz, 3 * jessie)\n    # Buzz is 450g heavier than Jessie\n    equation2 = Eq(buzz - jessie, 450)\n\n    solution = solve((equation1, equation2), (buzz, jessie))\n\n    return solution[buzz]\n\nans = solution()"
    ],
    "bac4be7824ee43909d38294e95af5558": [
        "def solution():\n    ans = 42 / 10\n    return ans\n\nans = solution()"
    ],
    "695197b7d2474faba84b6999f62c3332": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    # Define the timezone difference\n    timezone_difference = timedelta(hours=7)\n    \n    # Define the departure time in Singapore\n    singapore_departure = datetime(2023, 8, 24, 5, 0, 0)\n    \n    # Define the arrival time in London\n    london_arrival = datetime(2023, 8, 24, 11, 0, 0)\n    \n    # Adjust the arrival time to Singapore's timezone to compare\n    singapore_arrival = london_arrival + timezone_difference\n    \n    # Calculate the duration of the flight\n    duration = singapore_arrival - singapore_departure\n    \n    # Get the duration in hours\n    flight_hours = duration.total_seconds() / 3600\n    \n    return flight_hours\n\nans = solution()"
    ],
    "90d9980aee5c463cad10072163e15658": [
        "def solution():\n    # Let d be the total distance between towns A and B\n    # Jerry travels 3/7 of the distance, so Kevin travels 4/7 of the distance\n    # Jerry's speed relative to road length is 2/5 of the road length per hour\n    # Kevin's speed is 80 mph\n\n    # Since they meet at the same time, the ratio of their speeds must be equal to the inverse ratio of the distances they travel\n    # Let t be the time they travel before meeting\n    # Jerry's speed = (2/5)*d / t\n    # Kevin's speed = (4/7)*d / t\n    # We know Kevin's speed is 80 mph, so we have the following equation:\n    # (2/5)*d / t = 80\n    # (4/7)*d / t = 80\n\n    # From the above two equations, we can find the ratio of the distances:\n    # (2/5)/(3/7) = (80)/(4/7)d/t\n    \n    # Simplifying the equation, we find that:\n    # (2/5) * (7/3) = (80) * (t/d) * (7/4)\n    # (14/15) = 560 * (t/d)\n    # Hence, 560t = (14/15)d\n    # Since Jerry travels 3/7 of the road in time t, we have d = (5/2)t\n    # Replacing the value of d in the previous equation:\n    # 560t = (14/15) * (5/2) * t\n    # 560 = (14/15) * (5/2)\n    # 560 = (70/15)\n    # Finally, calculate d:\n    d = 560 * (15/70)\n    return d\n\nans = solution()"
    ],
    "e15d4768dc4c4072857f5a57de71a7fd": [
        "def solution():\n    # Probabilities for Sally winning, drawing, and losing a game\n    prob_win = 0.3\n    prob_draw = 0.1\n    prob_lose = 0.6  # 1 - (prob_win + prob_draw)\n\n    # Probability of winning 1 game and not winning the other\n    prob_win_one_and_not_the_other = (prob_win * prob_lose) + (prob_lose * prob_win)\n    \n    return prob_win_one_and_not_the_other\n\nans = solution()"
    ],
    "a6f1656bdca94cb5bb2e8feecf11199a": [
        "def solution():\n    differences = [2377 - 2010, 3111 - 2377, 3111 - 2010]\n    gcd = differences[0]\n    for diff in differences[1:]:\n        gcd = math.gcd(gcd, diff)\n    D = gcd\n    R = 2010 % D\n    return D + R\n\nimport math\nans = solution()"
    ],
    "6a26a1f4961b42cda05e71749b6db36e": [
        "def solution():\n    for lollipops in range(32, 1000, 4):  # Starting from 32, check every multiple of 4\n        if (lollipops - 3) % 7 == 0:       # Check if the remainder when divided by 7 is 3\n            return lollipops               # Return the total number of lollipops\n\nans = solution()"
    ],
    "1704b8a5c6f542c3a689bc27fdeec9dd": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "23f30d5016a749f989d2709b4e2a66a8": [
        "def solution():\n    count = 0\n    for i in range(10, 100):  # 2 digit numbers range from 10 to 99\n        if (i // 10 + i % 10) % 5 == 0:  # i // 10 is the tens digit, i % 10 is the ones digit\n            count += 1\n    return count\n\nans = solution()"
    ],
    "f23477aaae354680a318e24f3cc005a7": [
        "def solution():\n    # Since 1/13 is a recurring decimal, we find its recurring cycle first.\n    recurring_cycle = \"\"\n    remainder = 10  # We start with a remainder of 10, because we're effectively doing long division by 13\n    remainders_seen = {}\n\n    # Loop until the cycle repeats\n    while remainder not in remainders_seen:\n        remainders_seen[remainder] = len(recurring_cycle)\n        quotient, remainder = divmod(remainder, 13)\n        recurring_cycle += str(quotient)\n        remainder *= 10\n\n    # The position of the digit in the recurring cycle for the 2012th decimal place\n    cycle_length = len(recurring_cycle)\n    position_in_cycle = (2012 - 1) % cycle_length\n\n    # The digit we're interested in\n    digit = recurring_cycle[position_in_cycle]\n\n    return int(digit)\n\nans = solution()"
    ],
    "86efdba907a74bacbc9b69da4825ce61": [
        "def solution():\n    a = 4\n    b = 7\n    ans = a * 3 + b * 4\n    return ans\n\nans = solution()"
    ],
    "2ad497194d6f450abccaef3b55d6f58f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    eddi, wiya = symbols('eddi wiya')\n\n    initial_ratio = Eq(8 * wiya, 7 * eddi)\n    after_giving_ratio = Eq((eddi - 4) * 17, (wiya + 4) * 18)\n\n    solutions = solve((initial_ratio, after_giving_ratio), (eddi, wiya))\n\n    return solutions[eddi]\n\nans = solution()"
    ],
    "770c05d97a024fdbaf944f8e7f240d9f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2 * x - 2), 30 - 3 * x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8a86b5d67c0c44e89925084668201394": [
        "def solution():\n    from fractions import Fraction\n\n    numerator = (2017 + Fraction(7, 8)) * (3 + Fraction(2, 3)) - 2016.875 * Fraction(11, 3)\n    denominator = ((2017 + Fraction(1, 3)) - 2016.875) * 17\n    fraction_part = 3 + Fraction(23, 32)\n    \n    ans = numerator / denominator * fraction_part\n\n    return float(ans)\n\nans = solution()"
    ],
    "5500f21bc74e4e09974c72edd6ba504d": [
        "def solution():\n    blue_marbles = 72\n    # The ratio of red to blue marbles is 5:6, so we calculate the number of red marbles.\n    red_marbles = (5 / 6) * blue_marbles\n    # The number of red marbles is twice that of the green ones.\n    green_marbles = red_marbles / 2\n\n    # Total number of marbles is the sum of blue, red, and green marbles.\n    total_marbles = blue_marbles + red_marbles + green_marbles\n\n    return int(total_marbles)\n\nans = solution()"
    ],
    "79d7374a63ab4894b0eb632021d19346": [
        "def solution():\n    # Let x be the number of students to be moved from Class A to Class B\n    # Then after moving x students, Class A will have (A - x) students and Class B will have (B + x) students\n    # We know that initially, Class A has A students and Class B has B students, with A being 47 more than B\n    # Therefore, A = B + 47\n    # After moving x students, Class A should have 9 more students than Class B, so (A - x) = (B + x) + 9\n    # Replacing A with (B + 47) gives us: (B + 47 - x) = (B + x) + 9\n    # Now we solve the equation for x: x = (47 - 9) / 2\n    x = (47 - 9) // 2\n\n    return x\n\nans = solution()"
    ],
    "1bf11d4ba9fe405c8767bb70997fd945": [
        "def solution():\n    # initial speeds and distances\n    rabbit_speed = 330  # in meters per minute\n    turtle_speed = 30   # in meters per minute\n    race_distance = 6990  # in meters\n    rabbit_sleep_time = 215  # in minutes\n    start_delay = 10  # in minutes\n\n    # calculate the lead of rabbit after 10 minutes, before sleeping\n    rabbit_lead_before_sleep = rabbit_speed * start_delay\n\n    # calculate the distance covered by turtle during rabbit's sleep\n    turtle_distance_during_rabbit_sleep = turtle_speed * (rabbit_sleep_time + start_delay)\n\n    # calculate remaining distance for rabbit after waking up\n    remaining_distance_for_rabbit = race_distance - rabbit_lead_before_sleep\n\n    # time taken for rabbit to complete the remaining distance after sleeping\n    time_for_rabbit_to_finish = remaining_distance_for_rabbit / rabbit_speed\n\n    # total time taken for turtle to finish the race\n    total_time_for_turtle = race_distance / turtle_speed\n\n    # check who reached the finish line first and calculate the distance between them\n    if total_time_for_turtle < (time_for_rabbit_to_finish + rabbit_sleep_time + start_delay):\n        winner = \"turtle\"\n        # distance between them when the turtle finishes\n        rabbit_final_distance = (total_time_for_turtle - start_delay - rabbit_sleep_time) * rabbit_speed\n        distance_between = race_distance - rabbit_final_distance\n    else:\n        winner = \"rabbit\"\n        # distance between them when the rabbit finishes\n        turtle_final_distance = (rabbit_sleep_time + start_delay + time_for_rabbit_to_finish) * turtle_speed\n        distance_between = race_distance - turtle_final_distance\n    \n    return winner, distance_between\n\nans = solution()"
    ],
    "2c92243cffd64756b422d36fd5a66424": [
        "def solution():\n    total_length = 13.2\n    piece1 = 5.3\n    piece2 = 3.8\n    piece3 = total_length - piece1 - piece2\n    \n    return piece3\n\nans = solution()"
    ],
    "61eccb915ca741c7b21a213b89915b76": [
        "def solution():\n    max_product = 0\n    for A in range(1, 30):\n        for B in range(1, 31 - A):\n            C = 31 - A - B\n            product = A * B * C\n            if product > max_product:\n                max_product = product\n    return max_product\n\nans = solution()"
    ],
    "ca71d8deb6874a48b997dfa4946cf66c": [
        "def solution():\n    total_pupils = 40\n    total_average = 35\n\n    boys_average = 20\n    girls_average = 60\n\n    boys = symbols('boys')\n    girls = total_pupils - boys\n\n    equation = Eq(boys * boys_average + girls * girls_average, total_pupils * total_average)\n\n    boys_count = solve(equation, boys)\n\n    return boys_count[0]\n\nans = solution()"
    ],
    "cf1c9e5f45354fe48f3b0685d1e60dbe": [
        "def solution():\n    return 5.221 + 5.8\n\nans = solution()"
    ],
    "c4e305df8e864689a3ba869bd34de689": [
        "def solution():\n    footballs_per_basket = 5\n    number_of_baskets = 7\n    total_footballs = footballs_per_basket * number_of_baskets\n    return total_footballs\n\nans = solution()"
    ],
    "ab941a0743bd48f0a1e26a2e34ebdae5": [
        "def solution():\n    cost = 25000\n    selling_price = cost * 120 / 100\n    return selling_price\n\nans = solution()"
    ],
    "93fe50f0358b4d2ea6a521e9ea3ed0a2": [
        "def solution():\n    # Let's denote the smaller number as 'x' and the larger number as 'y'.\n    # According to the problem:\n    # y - x = 57 (difference between two numbers)\n    # y + x = 77 (sum of the two numbers)\n    \n    # From these two equations, we can solve for 'x' and 'y'.\n    # Adding these two equations we get:\n    # 2*y = 77 + 57\n    # 2*y = 134\n    # y = 134 / 2\n    # y = 67\n    \n    # Now we can use the value of 'y' to solve for 'x'.\n    # x = y - 57\n    # x = 67 - 57\n    x = 67 - 57\n    \n    return x\n\nans = solution()"
    ],
    "f50c5960070d4a3fb0b23a7198ed14e0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, adults, girls = symbols('boys adults girls')\n\n    equation1 = Eq(adults, 2 * boys)\n    equation2 = Eq(girls, 3 * boys)\n    equation3 = Eq(boys + adults + girls, 480)\n\n    solutions = solve((equation1, equation2, equation3), (boys, adults, girls))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "bfa83b401aa849afa830d6bedd007504": [
        "def solution():\n    count = 0\n    for number in range(1, 1000):\n        if all(int(digit) % 2 != 0 for digit in str(number)):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "3e8c59f7bce94540b723e7c4f74ae108": [
        "def solution():\n    count = 0\n    for i in range(1, 10, 2):      # Hundreds digit can be any odd digit from 1 to 9\n        for j in range(10):        # Tens digit can be any digit from 0 to 9\n            for k in range(10):    # Units digit can be any digit from 0 to 9\n                if i + j + k == 5: # Sum of digits must be 5\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "a750e73a350c42c59e6e88752789f517": [
        "def solution():\n    total_pairs = 16\n    total_cost_pounds = 24\n    total_cost_pence = total_cost_pounds * 100  # convert to pence\n    total_avocados = total_pairs * 2  # each pair consists of 2 avocados\n    cost_per_avocado = total_cost_pence / total_avocados  # cost for each avocado\n    return cost_per_avocado\n\nans = solution()"
    ],
    "e06dbcf7684f4efe9b8aa8167604d9eb": [
        "def solution():\n    roll_sums = [i + j for i in range(1, 7) for j in range(1, 7)]\n    return max(set(roll_sums), key=roll_sums.count)\n\nans = solution()"
    ],
    "3489712bf419469fb79ab41aed184413": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    number_of_girls = symbols('number_of_girls')\n    total_students = 36\n    class_average = 89\n    girls_average = 88\n    boys_average = 91\n    \n    number_of_boys = total_students - number_of_girls\n    \n    equation = Eq(number_of_girls * girls_average + number_of_boys * boys_average, total_students * class_average)\n    \n    result = solve(equation, number_of_girls)\n    \n    return result[0]\n\nans = solution()"
    ],
    "393a5918d6354e808621ec682f62ddae": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rhinos = symbols('rhinos')\n    deer = symbols('deer')\n    ostriches = symbols('ostriches')\n\n    equation1 = Eq(rhinos, deer)  # Number of rhinos is equal to the number of deer\n    equation2 = Eq(rhinos + deer + ostriches, 28)  # Total number of heads\n    equation3 = Eq(4 * rhinos + 4 * deer + 2 * ostriches, 88)  # Total number of legs\n\n    solutions = solve((equation1, equation2, equation3), (rhinos, deer, ostriches))\n\n    return solutions[rhinos]\n\nans = solution()"
    ],
    "bb069229eb994a6685105c9e4771780d": [
        "def solution():\n    # Each square table can seat one person on each side.\n    # So, a single square table can seat 4 people.\n    single_table_seats = 4\n    \n    # Since 12 people can sit evenly spaced around a square table,\n    # and 4 people can sit at one square table,\n    # there must be 3 people per side for the single table.\n    people_per_side = 12 // single_table_seats\n\n    # When eight square tables are put together in a row, \n    # the two people at the ends of the sides that are connected \n    # cannot be seated because they would otherwise overlap.\n    # So we only add the additional 2 people from the new corners\n    # for tables in the middle (7 tables, since the first and last\n    # tables do not lose these corner seats).\n    middle_tables_shared_seats = (people_per_side - 2) * 7\n\n    # The total number of seats for the long table is then:\n    # - All the seats from the individual tables (people_per_side * single_table_seats * 8)\n    # - minus the overlapping seats (middle_tables_shared_seats)\n    # - plus the four corner seats of the very first table and the very last table.\n    total_seats = people_per_side * single_table_seats * 8 - middle_tables_shared_seats + 4\n\n    return total_seats\n\nans = solution()"
    ],
    "b6cf5eeb7a434c4697c9588add4acbec": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, boris, jeffery, xavier = symbols('andrew boris jeffery xavier')\n    equation1 = Eq(andrew, (boris + jeffery + xavier) / 3 - 30)\n    equation2 = Eq(xavier, 3 * andrew)\n\n    solutions = solve((equation1, equation2), (andrew, boris, jeffery, xavier))\n\n    # We want to find the sum of Jeffery and Boris' marbles.\n    return solutions[boris] + solutions[jeffery]\n\nans = solution()"
    ],
    "938d7287364b480e824843004f4aebab": [
        "def solution():\n    dividend = 9786\n    divisor = 7\n    quotient = dividend // divisor\n    return quotient\n\nans = solution()"
    ],
    "40b2f9c840514df0bcbdb734e998e84c": [
        "def solution():\n    digits_per_page = 1  # Start with single digit pages\n    pages_with_current_digits = 9  # 1-9 for single digit\n    total_digits = 0\n\n    while total_digits + (digits_per_page * pages_with_current_digits) < 339:\n        total_digits += digits_per_page * pages_with_current_digits\n        digits_per_page += 1\n        pages_with_current_digits *= 10\n\n    remaining_digits = 339 - total_digits\n    pages = remaining_digits // digits_per_page\n\n    if remaining_digits % digits_per_page != 0:\n        pages += 1\n\n    total_pages = (pages_with_current_digits - 1) // 9 + pages\n    return total_pages\n\nans = solution()"
    ],
    "590b2a37fdc343dfa343951f96523662": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    arrival_time = datetime.strptime(\"11:15\", \"%H:%M\")\n    travel_time = timedelta(hours=3, minutes=50)\n\n    departure_time = arrival_time - travel_time\n\n    return departure_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "b9cafccb9f7942af839da92a0784cef0": [
        "def solution():\n    ones_digit_32 = pow(32, 33, 10)  # Calculate the ones digit of 32^33\n    ones_digit_22 = pow(22, 29, 10)  # Calculate the ones digit of 22^29\n    ans = (ones_digit_32 - ones_digit_22) % 10  # Find the ones digit of their difference\n    return ans\n\nans = solution()"
    ],
    "def24a48cf8144e2845215066bcd4239": [
        "def solution():\n    max_diff = 0\n    for A in range(10, 100):\n        for B in range(1000, 10000):\n            if (A + B) % 7 == 0 and (A**2 + B**2) % 7 == 0:\n                max_diff = max(max_diff, B - A)\n    return max_diff\n\nans = solution()"
    ],
    "ce29edf6f9f549f8b1c3ce33cbd9bf94": [
        "from math import comb\n\ndef solution():\n    ans = comb(12, 6)\n    return ans\n\nans = solution()"
    ],
    "31ea77f39d7d403bbbe15a0f51d288e2": [
        "def solution():\n    people_diff = 52\n    total_people = 0\n    for n in range(1, 1000, 2):  # Only odd squares will have more students\n        students = (n * n + (n - 2) * (n - 2)) // 2\n        teachers = ((n - 1) * (n - 1) + (n - 3) * (n - 3)) // 2\n        if students - teachers == people_diff:\n            total_people = n * n\n            break\n    return total_people\n\nans = solution()"
    ],
    "f98fcfbad2e34f8b8786c6f68bb63d64": [
        "def solution():\n    from sympy import divisors, primerange\n\n    # The prime factorization of 15 is 3^1 * 5^1.\n    # To have 15 divisors, the exponents in the prime\n    # factorization must satisfy (e_1 + 1)(e_2 + 1)...(e_k + 1) = 15\n    # Since 15 is a product of its prime factors 3 and 5,\n    # we only need to consider numbers that have 15 as a factor.\n    # The exponents of the prime factors of such numbers must be\n    # of the form 3^e * 5^f, where e >= 1 and f >= 1. \n    \n    # To have exactly 15 divisors, there are two scenarios for the exponents:\n    # 1. One exponent is 14 (since 14 + 1 = 15) and all others are 0.\n    # 2. The exponents are 1 and 2 (since (1 + 1)(2 + 1) = 6 * 3 = 15)\n    \n    # Since 15 has two prime factors, the numbers that are multiples of 15\n    # and have 15 divisors are of the form 3^e * 5^f, where (e, f) is either\n    # (14, 1) or (1, 4) to have a total of 15 divisors.\n    \n    # We calculate these numbers and ensure they are multiples of 15.\n    # Scenario 1: (14, 1)\n    num1 = (3 ** 14) * (5 ** 1)\n    \n    # Scenario 2: (1, 4)\n    num2 = (3 ** 1) * (5 ** 4)\n    \n    # The numbers must also be multiples of 15, which they are by construction.\n    # Now we return the count of such numbers.\n    return 2  # There are only two such numbers based on our logic above.\n\nans = solution()"
    ],
    "45a3a595ab6f4318985335abde87fad4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    equation1 = Eq(apples, (5/7) * oranges)\n    equation2 = Eq(apples, (2/3) * (oranges + 12))\n\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions[apples]\n\nans = solution()"
    ],
    "4c1d54551ef14b4a8f6fff1699ee1017": [
        "def solution():\n    ans = 10**2  # The missing term for 8 * 80 * 100 to be expressed as 8^2 times a square number\n    return ans\n\nans = solution()"
    ],
    "629056fd8d3d4d1ea0babc83d1b81d2e": [
        "def solution():\n    fraction = 2014 / 37 - 54  # Subtract the integer part\n    x = int(1 / fraction)\n    fraction = 1 / fraction - x  # Subtract x's contribution\n\n    y = int(1 / fraction)\n    fraction = 1 / fraction - y  # Subtract y's contribution\n    \n    z = int(1 / fraction)\n    \n    return x + y + z\n\nans = solution()"
    ],
    "303eb712b613463aa24269578fcdc93c": [
        "def solution():\n    final_position = 10\n    total_counts = 30\n    clock_numbers = 12\n\n    # Since counting is circular (modular), we can use modulus to find the starting position\n    start_position = (final_position - (total_counts % clock_numbers)) % clock_numbers\n\n    # If start_position is 0, it means he started at 12\n    start_position = clock_numbers if start_position == 0 else start_position\n\n    return start_position\n\nans = solution()"
    ],
    "3c819166640d4aecbdf6943fefaf19ae": [
        "def solution():\n    return 200 + 198 + 196 + 194 + 24\n\nans = solution()"
    ],
    "20b44a4c32af41ef9142b775909cfdb5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount of oil sold from each bucket\n    x = symbols('x')\n\n    # Equation representing the remaining oil in the big bucket\n    # 89 - x = 12 * (45 - x)\n    equation = Eq(89 - x, 12 * (45 - x))\n\n    # Solve the equation for x\n    sold_amount = solve(equation, x)\n\n    return sold_amount[0]\n\nans = solution()"
    ],
    "98d19dcddff5420181c5cbae730d43e1": [
        "def solution():\n    avril_apples = 15\n    eddie_apples = avril_apples - 3\n    return eddie_apples\n\nans = solution()"
    ],
    "e0433d6820a94cd280f26a0265506784": [
        "def solution():\n    jackpot = 131112\n    winners = 9\n    amount_per_person = jackpot // winners\n    return amount_per_person\n\nans = solution()"
    ],
    "82d6cd07eb9b4742a9b4276838f20555": [
        "def solution():\n    snake_hibernation = 180\n    bear_hibernation = 2/3 * snake_hibernation\n    frog_hibernation = 5/4 * bear_hibernation\n    \n    return frog_hibernation\n\nans = solution()"
    ],
    "7b8f27df031046e09fbf9d6b69396f37": [
        "def solution():\n    shoes_cost_per_alien = 78\n    socks_cost_per_pair = 12\n\n    # Each alien has 5 legs and hence needs 5/2 pairs of socks and 1 pair of shoes.\n    total_socks_cost = (5 / 2) * socks_cost_per_pair  # Cost of socks for one alien\n    total_cost_per_alien = shoes_cost_per_alien + total_socks_cost  # Total cost per alien\n\n    # Since he is buying it for himself and his 5 brothers, there are 6 aliens in total\n    total_cost = 6 * total_cost_per_alien\n\n    return total_cost\n\nans = solution()"
    ],
    "23acb98496a1431485725ca44356cb95": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    smallest_number = solve_congruence(*congruences)[0]\n    while smallest_number < 100:\n        smallest_number += 5 * 6 * 7\n    return smallest_number\n\nans = solution()"
    ],
    "6aabcae871ce46f8ad05bfca32697274": [
        "def solution():\n    a = 31 - 26\n    b = 26 - 20\n    c = 20\n\n    # Since a, b, c are prime numbers and their numerical values are determined\n    # by the given operations, we just multiply them as instructed.\n    ans = a * b * c\n    return ans\n\nans = solution()"
    ],
    "21ec0c0ec1814ca58f0852a04fb021ce": [
        "def solution():\n    total_time_hours = 54 / 60 # Convert total time from minutes to hours.\n\n    # Let d be the distance between home and park.\n    # Time taken to jog to the park at 5 km/h = d / 5\n    # Time taken to jog back home at 4 km/h = d / 4\n    # Total time is the sum of both times: d / 5 + d / 4 = total_time_hours\n    # Solving this equation for d gives us the distance.\n    # (4d + 5d) / 20 = total_time_hours\n    # 9d = 20 * total_time_hours\n    # d = (20 * total_time_hours) / 9\n\n    d = (20 * total_time_hours) / 9\n\n    return d\n\nans = solution()"
    ],
    "992b03b260e0423f8ae1b4a971e95d16": [
        "def solution():\n    return sum(range(1, 31))\n\nans = solution()"
    ],
    "d43c72e5a6ae4f8db05bca5a0b40f880": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of pies Rennie baked as r\n    # Joleen baked 5 more pies than Rennie, so she baked r + 5 pies\n    # According to the problem, 3/4 of Rennie's pies is equal to 2/3 of Joleen's pies\n    # Therefore, we have the equation: (3/4) * r = (2/3) * (r + 5)\n    r = symbols('r')\n    equation = Eq((3/4) * r, (2/3) * (r + 5))\n\n    # Solve this equation to find the value of r\n    solution_r = solve(equation, r)\n\n    # Once we have the value of r, we can find the number of pies Joleen baked by adding 5\n    joleen_pies = solution_r[0] + 5\n\n    # Total number of pies is the sum of pies baked by Rennie and Joleen\n    total_pies = solution_r[0] + joleen_pies\n\n    return total_pies\n\nans = solution()"
    ],
    "04f441aa03884165973a65e941e979f6": [
        "def solution():\n    pupils = 26\n    girls = (pupils + 8) / 2\n    return int(girls)\n\nans = solution()"
    ],
    "5fdb9bf232c24130acb67d6989c9f36f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    both, apples, bananas = symbols('both apples bananas')\n    \n    # Use the information provided to create equations\n    equation1 = Eq(apples, 3 * both)          # number of students who like apples\n    equation2 = Eq(bananas, 5 * both)         # number of students who like bananas\n    equation3 = Eq(apples + bananas - both, 35) # total number of students\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (both, apples, bananas))\n    \n    # Return the number of students who like both\n    return solutions[both]\n\nans = solution()"
    ],
    "7bb16c6234cc4815b0e5460af5d3bcde": [
        "def solution():\n    total_oranges_kg = 3.5\n    oranges_pie_kg = 550 / 1000  # converting grams to kilograms\n    oranges_juice_kg = 1050 / 1000  # converting grams to kilograms\n\n    remaining_oranges_kg = total_oranges_kg - (oranges_pie_kg + oranges_juice_kg)\n\n    return remaining_oranges_kg\n\nans = solution()"
    ],
    "cfc90e2bd8784f839af8df92030da2cc": [
        "def solution():\n    price_per_computer = 380\n    num_students = 600\n\n    total_cost = price_per_computer * num_students\n\n    return total_cost\n\nans = solution()"
    ],
    "45df453d65d8460098e8bd6f64aa6e8d": [
        "def solution():\n    for x in range(1, 10):\n        for y in range(10):\n            A = 10 * x + y\n            B = 200 + 10 * x + y\n            if B == 6 * A + 25:\n                return A\n    return None\n\nans = solution()"
    ],
    "5836c32ab92349858d64ea01519ff950": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let n be time Nancy takes to finish the job alone\n    # Let l be time Lee takes to finish the job alone\n    n, l = symbols('n l')\n\n    # Together they finish the job in 10 hours\n    # Therefore in 1 hour they do 1/10 of the job: 1/n + 1/l = 1/10\n    equation1 = Eq(1/n + 1/l, 1/10)\n\n    # Nancy and Lee can also finish the job if Nancy works for 20 hours in total\n    # while Lee works for 6 hours.\n    # In 1 hour, Nancy does 1/n of the job and Lee does 1/l of the job.\n    # Therefore, Nancy does 20/n of the job and Lee does 6/l of the job.\n    # The sum of their work is 1 (the whole job): 20/n + 6/l = 1\n    equation2 = Eq(20/n + 6/l, 1)\n\n    # Solve the system of equations for n and l\n    solutions = solve((equation1, equation2), (n, l))\n\n    return solutions[n]\n\nans = solution()"
    ],
    "6c0af911bf3441ceb0aa84e3591c07ce": [
        "def solution():\n    first_day_chairs = 15\n    daily_increase = 3\n    total_days = 5\n\n    total_chairs = sum(first_day_chairs + daily_increase * (day - 1) for day in range(total_days))\n\n    return total_chairs\n\nans = solution()"
    ],
    "5279176e8bb34e36a3a0b92d193ca529": [
        "def solution():\n    count = 0\n    for i in range(1, 416):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "82fb8614fc1f452fa0c62237c0880ab5": [
        "def solution():\n    percentage = (15 / 300) * 100\n    return percentage\n\nans = solution()"
    ],
    "c6a998a4a44742708de70bf568712c7e": [
        "def solution():\n    return 111111111 * 99999999\n\nans = solution()"
    ],
    "72920f692e1f4bc5a9ad132468b2ba55": [
        "def solution():\n    pencil_colours = 15\n    ruler_colours = 20\n    pen_colours = 10\n\n    # Choosing a pencil and a ruler\n    pencil_ruler_combinations = pencil_colours * ruler_colours\n    # Choosing a pencil and a pen\n    pencil_pen_combinations = pencil_colours * pen_colours\n    # Choosing a ruler and a pen\n    ruler_pen_combinations = ruler_colours * pen_colours\n\n    ans = pencil_ruler_combinations + pencil_pen_combinations + ruler_pen_combinations\n    return ans\n\nans = solution()"
    ],
    "967ece94a30248298d61d641cb4adf93": [
        "def solution():\n    fraction = 12 / 25\n    percent = fraction * 100\n    return percent\n\nans = solution()"
    ],
    "3794af6cfad9436889422b80da641626": [
        "def solution():\n    # Maximum number of marbles that can be taken without getting 3 of the same color:\n    # 2 blue + 2 yellow + 1 red gives us 5 marbles without 3 of a single color\n    max_without_three_of_same = (4 - 1) + (3 - 1) + (1 - 0)\n\n    # To ensure that the next marble will result in 3 of the same color,\n    # we need to take one more than the maximum number of marbles without 3 of the same color\n    marbles_to_take = max_without_three_of_same + 1\n\n    return marbles_to_take\n\nans = solution()"
    ],
    "5c2114692687459380bfd372aebfde19": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (1, 13)]\n    children_count = solve_congruence(*congruences)\n\n    if children_count[0] >= 100 and children_count[0] <= 190:\n        return children_count[0]\n    else:\n        return \"No valid number of children found.\"\n\nans = solution()"
    ],
    "c24b40236ebf4569ab4996b428c1ea27": [
        "def solution():\n    total_cost = 8.15 + 24.55 + 0.85\n    return total_cost\n\nans = solution()"
    ],
    "88717234762b4482bb4b328d802d0085": [
        "def solution():\n    numbers = [98, -87, 76, -65, 54, -43, 32, -21, 10]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "b712f3023cd74d2a97af516420fec795": [
        "def solution():\n    ans = 312 // 6\n    return ans\n\nans = solution()"
    ],
    "8033f9bd063140b6985e12301e7828e5": [
        "def solution():\n    # Current sum of Mary and her son's age\n    current_sum = 45\n\n    # In 5 years, both Mary and her son would be 5 years older\n    # So we add 5 years to each of their current ages\n    # Mary's age in 5 years = Mary's current age + 5\n    # Son's age in 5 years = Son's current age + 5\n    # Sum of their ages in 5 years = current_sum + 5 (for Mary) + 5 (for Son)\n    sum_in_5_years = current_sum + 5 + 5\n\n    return sum_in_5_years\n\nans = solution()"
    ],
    "626a9662882f4dc4a1ba95cb02ab64da": [
        "def solution():\n    y = -10 + 3\n    return y\n\nans = solution()"
    ],
    "67ecb5e143af40a489aca335acd8434a": [
        "def solution():\n    total_cost = 7 * 14  # cost in pence\n    amount_paid = 100     # convert £1 to pence\n    change = amount_paid - total_cost\n    return change\n\nans = solution()"
    ],
    "2d4bb268d17840b4a2af67c13b75b9e7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Sebastian's and Garrett's current ages\n    sebastian_age, garrett_age = symbols('sebastian_age garrett_age')\n\n    # Sebastian is 24 years younger than Garrett\n    equation1 = Eq(sebastian_age, garrett_age - 24)\n\n    # In 10 years, Garrett will be thrice as old as Sebastian\n    equation2 = Eq(garrett_age + 10, 3 * (sebastian_age + 10))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sebastian_age, garrett_age))\n\n    return solutions[garrett_age]\n\nans = solution()"
    ],
    "34bf57dff6004159b9678570286b3a45": [
        "def solution():\n    tax_rate = 0.06\n    sales_tax_paid = 90\n    price_of_sofa = sales_tax_paid / tax_rate\n    return price_of_sofa\n\nans = solution()"
    ],
    "2f2d4651795c439599a60c5b9bd40011": [
        "def solution():\n    people = 4\n    days = 7\n    travel_cost_per_person = 150\n    hotel_cost_per_day_per_person = 50\n    spending_money_per_person = 250\n\n    total_travel_cost = people * travel_cost_per_person\n    total_hotel_cost = people * days * hotel_cost_per_day_per_person\n    total_spending_money = people * spending_money_per_person\n\n    total_cost = total_travel_cost + total_hotel_cost + total_spending_money\n\n    return total_cost\n\nans = solution()"
    ],
    "21c0c469254846459707b10aa5368b1e": [
        "def solution():\n    march_earnings = 1354\n    april_earnings = 1672\n    total_earnings = march_earnings + april_earnings\n    return total_earnings\n\nans = solution()"
    ],
    "28b3283e4adb46b1981d2f77bbce5dc3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    \n    # Equation representing the initial difference in numbers.\n    equation1 = Eq(girls, boys + 65)\n    \n    # Equation representing the number of boys and girls remaining being equal.\n    equation2 = Eq((2/5) * boys, (3/7) * (boys + 65))\n    \n    # Solving the system of equations for the number of boys and girls.\n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    # Substituting the values of boys and girls to find how many remained.\n    boys_initial = solutions[boys]\n    girls_initial = solutions[girls]\n    boys_remaining = boys_initial - (2/5) * boys_initial\n    girls_remaining = girls_initial - (3/7) * girls_initial\n    \n    # Finding the total number of students remaining.\n    total_remaining = boys_remaining + girls_remaining\n    \n    return total_remaining\n\nans = solution()"
    ],
    "c28d501a4f3c490c9058face33142635": [
        "def solution():\n    first_term = 2\n    difference = 3\n    n = 20\n    nth_term = first_term + (n - 1) * difference\n    return nth_term\n\nans = solution()"
    ],
    "2d130e3c0e3945b685446c7cfb272294": [
        "from math import factorial\n\ndef solution():\n    total = factorial(7)\n    vowels = factorial(3)\n    consonants = factorial(4)\n    together = vowels * consonants\n\n    return total - together\n\nans = solution()"
    ],
    "00cb26f4bf1b4dea92d43d8871529e21": [
        "def solution():\n    number = 70_000_000 + 17_000 + 7\n    return number\n\nans = solution()"
    ],
    "d103fb7881a84891a1e2f0db57a5cdff": [
        "from math import factorial\n\ndef solution():\n    # Calculate separate permutations for Math, Chemistry, and Physics books as they have to be together\n    math_permutations = factorial(4)      # 4 math books\n    chemistry_permutations = factorial(3) # 3 chemistry books\n    physics_permutations = factorial(2)   # 2 physics books\n\n    # Treat each group of books as a single item which can be arranged in 4! ways (M, Ch, Ph, B)\n    group_permutations = factorial(4)\n\n    # Combining the permutations for each group with the permutations of the groups\n    total_permutations = math_permutations * chemistry_permutations * physics_permutations * group_permutations\n\n    return total_permutations\n\nans = solution()"
    ],
    "4e7d8e9e8c70434db387985ffc3ced9d": [
        "def solution():\n    height_metres = 8850\n    metres_to_kilometres = 1000\n\n    height_kilometres = height_metres / metres_to_kilometres\n\n    return height_kilometres\n\nans = solution()"
    ],
    "9ad4425b3ae341e383eaf5a81b5fea27": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges, bananas = symbols('apples oranges bananas')\n\n    equation1 = Eq(apples, oranges + 150)\n    equation2 = Eq(bananas, oranges + 50)\n    equation3 = Eq(apples + oranges + bananas, 1400)\n\n    solutions = solve((equation1, equation2, equation3), (apples, oranges, bananas))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "ef906b4f53fd45d79377d690c9653778": [
        "def solution():\n    category1 = 30\n    category2 = 40\n    category3 = 45\n\n    total_ways = category1 * category2 * category3\n\n    return total_ways\n\nans = solution()"
    ],
    "b00136397bfb4af8943135704801f794": [
        "def solution():\n    from sympy import Eq, solve, isprime\n    \n    # Define symbols for a, b, and c\n    a, b, c = symbols('a b c', integer=True)\n\n    # Set up the equations given the problem\n    equation1 = Eq(31 + a, 26 + b)\n    equation2 = Eq(26 + b, 20 + c)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (a, b, c))\n    \n    # Find the sets of values that are all prime\n    for a_val, b_val, c_val in solutions:\n        if isprime(a_val) and isprime(b_val) and isprime(c_val):\n            ans = a_val * b_val * c_val\n            return ans\n\nans = solution()"
    ],
    "7ba8140ad05947758fcf5701002a8435": [
        "def solution():\n    ans = 525 + 75\n    return ans\n\nans = solution()"
    ],
    "89c2e46a330f4c809acc4ee66605274d": [
        "def solution():\n    perimeter = 12\n    count = 0\n    \n    for a in range(1, perimeter // 2 + 1):  # side a ranges from 1 to half the perimeter\n        for b in range(a, perimeter // 2 + 1):  # side b ranges from a to half the perimeter\n            c = perimeter - a - b  # calculating the third side\n            if c >= b:  # to form an isosceles triangle, the third side should be no less than b \n                # Check for valid triangle (inequality theorem)\n                if (a + b > c) and (a + c > b) and (b + c > a):\n                    count += 1\n    \n    return count\n\nans = solution()"
    ],
    "0c03095444bb44a4b57d684dd17a77c7": [
        "def solution():\n    from math import factorial\n    # Since the table is circular, fixing one person and arranging the others\n    # around them will account for the rotation symmetry.\n    # So, for 6 people, we fix one and arrange the remaining 5 around the table.\n    ans = factorial(5)\n    return ans\n\nans = solution()"
    ],
    "a2e75549c690497cad6e854a67bb9ca0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let e, m, d represent the number of stickers Eugene, Melvin, and David had initially.\n    e, m, d = symbols('e m d')\n\n    # After Eugene gave Melvin twice as many stickers as Melvin had, Eugene had e-2*m stickers left.\n    e_after_giving = e - 2*m\n    # Melvin had m+2*m stickers after receiving from Eugene.\n    m_after_giving = 3*m\n    # Then Melvin gave David as many stickers as David had.\n    m_after_second_giving = m_after_giving - d\n    d_after_receiving = 2*d\n    # Finally, David gave Eugene as many stickers as Eugene had left.\n    e_final = e_after_giving + d_after_receiving\n    m_final = m_after_second_giving\n    d_final = d_after_receiving - e_after_giving\n\n    # The final ratio is given as Eugene's to Melvin's to David's stickers was 46:12:7.\n    ratio_e = 46\n    ratio_m = 12\n    ratio_d = 7\n\n    # Set up the equations based on the problem statement and the ratios\n    equation1 = Eq(e_final, ratio_e)\n    equation2 = Eq(m_final, ratio_m)\n    equation3 = Eq(d_final, ratio_d)\n    equation4 = Eq(e + m + d, 260)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (e, m, d))\n\n    return solutions[e]\n\nans = solution()"
    ],
    "912de4f90ddb4216bf505fc2ea36050f": [
        "def solution():\n    ans = sum([i if i%4==0 else -i for i in range(56, 81, 2)])\n    return ans\n\nans = solution()"
    ],
    "7904921931804014a07b69845bab7b59": [
        "def solution():\n    # To determine the winning strategy we need to analyze the position in a\n    # nim game. A position is a winning position if the nim-sum (XOR sum) is \n    # not zero at the start of the turn.\n\n    pile_A = 35\n    pile_B = 24\n\n    # Calculate the nim sum\n    nim_sum = pile_A ^ pile_B\n\n    # If nim sum is 0 then the second player has the winning strategy\n    # otherwise the first player has the winning strategy.\n    if nim_sum == 0:\n        # Wei'er has the winning strategy\n        ans = \"Wei'er\"\n    else:\n        # Eddie has the winning strategy\n        ans = \"Eddie\"\n\n    return ans\n\nans = solution()"
    ],
    "bff8b9eeb1c245eb8fd44124619a0ff8": [
        "def solution():\n    first_term = 31\n    last_term = 41\n    num_terms = (last_term - first_term) + 1\n    sum_of_terms = num_terms * (first_term + last_term) // 2\n    return sum_of_terms\n\nans = solution()"
    ],
    "9613eedf0f0948dcb5413f496404e450": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys_initial, girls_initial = symbols('boys_initial girls_initial')\n\n    # Let's create the equations based on the problem statement\n    # Initially, the number of boys equals the number of girls.\n    equation1 = Eq(boys_initial, girls_initial)\n\n    # After 12 boys came and 8 girls left, the number of boys is twice the number of girls.\n    equation2 = Eq(boys_initial + 12, 2 * (girls_initial - 8))\n\n    # Solve the system of equations.\n    solutions = solve((equation1, equation2), (boys_initial, girls_initial))\n\n    # The total number of students in the class initially is boys_initial + girls_initial.\n    total_initial_students = solutions[boys_initial] + solutions[girls_initial]\n\n    return total_initial_students\n\nans = solution()"
    ],
    "acbee96ed2cb4a61be352fee44d29870": [
        "def solution():\n    ans = 21 * (2/7)\n    return ans\n\nans = solution()"
    ],
    "fb64702818de4244b242b01464507459": [
        "def solution():\n    digits = ['3', '5', '7']\n    from itertools import permutations\n    permutations_list = list(permutations(digits, 3))\n    return len(permutations_list)\n\nans = solution()"
    ],
    "931f7e125e804e0bbab5078c31bf920e": [
        "def solution():\n    from sympy import isprime\n\n    for i in range(2, 25):\n        if isprime(i) and isprime(25 - i):\n            return i * (25 - i)\n\nans = solution()"
    ],
    "097a0efcc6c64ff08677a4704bcd76bb": [
        "def solution():\n    from math import gcd\n    return gcd(15, 45)\n\nans = solution()"
    ],
    "a223ddccd2724fcfad6b70a5cedd679d": [
        "def solution():\n    ans = 150 - 12 * 12\n    return ans\n\nans = solution()"
    ],
    "dcda2529e50e438892b5fe26db544d87": [
        "def solution():\n    ans = 168 * 91\n    return ans\n\nans = solution()"
    ],
    "71633ecd388b4b3fb18cf8470f3168fa": [
        "def solution():\n    start_hour, start_minute = 6, 52\n    end_hour, end_minute = 8, 24\n\n    start_time_in_minutes = start_hour * 60 + start_minute\n    end_time_in_minutes = end_hour * 60 + end_minute\n\n    duration_in_minutes = end_time_in_minutes - start_time_in_minutes\n\n    return duration_in_minutes\n\nans = solution()"
    ],
    "df1629274fe246d5b09f00b408d237a3": [
        "def solution():\n    # The distance of the race\n    total_distance = 800\n\n    # Jack's speeds on different parts of the race in meters per second\n    initial_speed = 7\n    middle_speed = 5\n    final_speed = 8\n\n    # The distances for each part of the race\n    initial_distance = 280\n    middle_distance = 400\n    final_distance = total_distance - (initial_distance + middle_distance)\n\n    # Time for each part of the race\n    initial_time = initial_distance / initial_speed\n    middle_time = middle_distance / middle_speed\n    final_time = final_distance / final_speed\n\n    # Total time spent on the race\n    total_time = initial_time + middle_time + final_time\n\n    return total_time\n\nans = solution()"
    ],
    "54d68cc151df4bfb9d1b20b9d2fb2aa3": [
        "def solution():\n    ans = 48 + 84\n    return ans\n\nans = solution()"
    ],
    "c6c18c591cee4de090f23b01cc195845": [
        "def solution():\n    number_of_lamps = 50\n    distance_between_lamps = 2\n    # Subtract 1 from number_of_lamps because the distance is measured between lamp posts, \n    # so there's one less distance segment than the number of lamp posts\n    length_of_road = (number_of_lamps - 1) * distance_between_lamps\n    return length_of_road\n\nans = solution()"
    ],
    "587b3b02dde341268ada10eb1e31a729": [
        "def solution():\n    total_peaches = 47\n    total_students = 6\n    # Using the Pigeonhole Principle, we divide the peaches among the students.\n    # At least one student (the one with the most peaches) will have\n    # (total_peaches // total_students) + 1 peaches, if not evenly divisible.\n    max_peaches = (total_peaches // total_students) + 1\n    return max_peaches\n\nans = solution()"
    ],
    "74c598a697fa4036ba52acb5c3dae9a8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n\n    # Defining the equations based on the problem statement\n    equation1 = Eq(chocolate - 72, vanilla)\n    equation2 = Eq(blueberry + 36, vanilla)\n    equation3 = Eq(5/6 * chocolate + 1/3 * vanilla + 2/9 * blueberry, 427)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (chocolate, vanilla, blueberry))\n    chocolate_cupcakes = solutions[chocolate]\n    \n    # Calculate the number of chocolate cupcakes Sally sold\n    chocolate_sold = chocolate_cupcakes - (5/6 * chocolate_cupcakes)\n\n    return chocolate_sold\n\nans = solution()"
    ],
    "bd901fb2c6284efb98073eaa14689640": [
        "def solution():\n    ans = (18 + 52) / 2\n    return ans\n\nans = solution()"
    ],
    "d459013620f445ba980f5db75d210d9b": [
        "def solution():\n    return 40 - 15 + 1\n\nans = solution()"
    ],
    "5620dc4830cf4177b81a1d252a13bdf6": [
        "def solution():\n    result = (2/9) * 36\n    return result\n\nans = solution()"
    ],
    "47de481b43de4ea9bc2a81e973f8542c": [
        "def solution():\n    # Since they are consecutive numbers, we can assume them to be:\n    # n, n+1, n+2, n+3, n+4, n+5, n+6\n    # Their sum is:\n    # 7n + (1+2+3+4+5+6) = 140\n    # 7n + 21 = 140\n    # 7n = 140 - 21\n    # 7n = 119\n    # n = 119 / 7\n    n = 119 // 7  # // operator to get integer division\n    return n\n\nans = solution()"
    ],
    "03abc0f287024f5d96ba76d95640a07b": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Each congruence is of the form x ≡ a (mod m)\n    # Three children sat out when divided into groups of 4: x ≡ -1 (mod 4)\n    # One child sat out when divided into groups of 7: x ≡ -1 (mod 7)\n    # Three children sat out when divided into groups of 9: x ≡ -3 (mod 9)\n\n    congruences = [(-1, 4), (-1, 7), (-3, 9)]\n    lcm, remainder = solve_congruence(*congruences)\n\n    # The least number of children is the smallest remainder that satisfies all congruences\n    return remainder\n\nans = solution()"
    ],
    "9a9953295d5740bc87f3c1edd90b8b54": [
        "def solution():\n    postcards_cost_per_unit = 45  # in pence\n    stamps_cost_per_unit = 27     # in pence\n    quantity = 10                 # quantity for both postcards and stamps\n\n    total_cost_in_pence = (postcards_cost_per_unit + stamps_cost_per_unit) * quantity\n    total_cost_in_pounds = total_cost_in_pence / 100  # convert pence to pounds\n\n    note_value = 10  # £10 note\n    change = note_value - total_cost_in_pounds\n\n    return change\n\nans = solution()"
    ],
    "270c294ed2df4203a13160fdf772f5be": [
        "def solution():\n    total_ways = 3 * 2 * 1  # Total ways to arrange Chantel, Tony, and Cale\n    ways_tony_opposite_claire = 1 * 1 * 1  # Ways when Tony is opposite Claire\n    return total_ways - ways_tony_opposite_claire\n\nans = solution()"
    ],
    "77c1430ed23f41599ca28024f5d0c1b6": [
        "def solution():\n    mass = 7.4\n    lower_bound = mass - 0.05  # Subtracting half the precision of rounding\n    return lower_bound\n\nans = solution()"
    ],
    "e22e61e5355d4cf286d0a863eac51562": [
        "def solution():\n    # Frank's rate of making tables per day\n    frank_rate = 180 / 10\n    # Ryan's rate of making tables per day\n    ryan_rate = 180 / 15\n\n    # The difference in tables made per day between Frank and Ryan\n    difference = frank_rate - ryan_rate\n\n    return difference\n\nans = solution()"
    ],
    "d3c48a9697fa4a4eb28b56062dbe1df1": [
        "def solution():\n    total_questions = 20\n    correct_marks = 5\n    wrong_marks = -2\n    total_marks = 79\n\n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        if (correct * correct_marks + wrong * wrong_marks) == total_marks:\n            return correct\n\nans = solution()"
    ],
    "3393096c6a844b2dadae6b5e08940ba8": [
        "def solution():\n    total_money_pence = 165 * 100  # Convert pounds to pence\n    cake_price = 75\n    number_of_cakes_sold = total_money_pence // cake_price\n\n    return number_of_cakes_sold\n\nans = solution()"
    ],
    "6d33b364eee54bfcb1f7cf59f055a829": [
        "def solution():\n    for i in range(10, 100):\n        n1 = i\n        n2 = i + 1\n        n3 = i + 2\n        n4 = i + 3\n        n5 = i + 4\n        \n        # Check the sum of any three consecutive numbers\n        # There are three possible sums with three numbers as they are consecutive\n        sums = [n1+n2+n3, n2+n3+n4, n3+n4+n5]\n        \n        # Any of these sums must be divisible by 37 and another by 60\n        if any(s % 37 == 0 for s in sums) and any(s % 60 == 0 for s in sums):\n            return n5  # Return the largest number\n\nans = solution()"
    ],
    "68c228ef01e64096ae6ea0c0c72ce5ad": [
        "def solution():\n    # Let q be the total number of questions Miss Atkinson had to mark\n    # Let t be the number of minutes she had to mark the questions on time\n    # Let x be the number of questions she marks per minute\n    \n    # If she marks 4 questions per minute, she takes q/4 minutes to finish\n    # If the time taken is t, then q/4 = t + 5 (since she is 5 minutes late)\n    \n    # If she marks 6 questions per minute, she takes q/6 minutes to finish\n    # If the time taken is t, then q/6 = t - 5 (since she is 5 minutes early)\n    \n    # Equating the two:\n    # q/4 - q/6 = 10\n    # Simplifying: (3q - 2q) / 12 = 10\n    # q = 10 * 12 / 1\n    q = 10 * 12\n     \n    return q\n\nans = solution()"
    ],
    "30f8a7925ff34166983d3831a3dd1927": [
        "def solution():\n    amy_candies = 24\n    emma_candies = 10\n    \n    total_candies = amy_candies + emma_candies\n    candies_each = total_candies // 2  # They should have equal number of candies\n    \n    candies_to_give = amy_candies - candies_each\n\n    return candies_to_give\n\nans = solution()"
    ],
    "b85b80d96c214b3f9767320633e9d1e4": [
        "def solution(x, y):\n    cost = 5 * x + 1 * y\n    return cost\n\n# Call the function with placeholder values for x and y\n# The actual values for x and y would be determined by the current price per pound\nans = solution(x, y)"
    ],
    "18cee48b4d67429daae6f6a7b4da9f6c": [
        "def solution():\n    total_money = 1440\n    spent_at_restaurant = (3 / 7) * total_money\n    remaining_after_restaurant = total_money - spent_at_restaurant\n    spent_on_fees = (2 / 9) * remaining_after_restaurant\n    remaining_money = remaining_after_restaurant - spent_on_fees\n    \n    return remaining_money\n\nans = solution()"
    ],
    "08a35d75e3c6466b94f233066ea49537": [
        "def solution():\n    meters_to_centimetres = 3.2 * 100\n    difference = meters_to_centimetres - 30\n    return difference\n\nans = solution()"
    ],
    "25ecfb7fac334e73b6113226048393ed": [
        "def solution():\n    # time for one chime\n    time_for_one_chime = (6 / (3 - 1))\n    \n    # time for 6 chimes at 6 pm would be\n    # (time for 5 intervals between chimes) + (time for one chime)\n    time_for_six_chimes = (time_for_one_chime * (6 - 1)) + time_for_one_chime\n    \n    return time_for_six_chimes\n\nans = solution()"
    ],
    "fd9804acb7e544a69a055503fd3def6a": [
        "def solution():\n    return 15 * 1.98\n\nans = solution()"
    ],
    "38f0f6e2b17a49f9901e5abd3924ce28": [
        "def solution():\n    n = 10\n    # Using the formula for the sum of squares of the first n natural numbers: n(n+1)(2n+1)/6\n    sum_of_squares = 3 * n * (n + 1) * (2 * n + 1) // 6\n    return sum_of_squares\n\nans = solution()"
    ],
    "6d6b64c92ea64a01b75ed338a1814766": [
        "def solution():\n    # Total work done by P in 1 hour\n    work_p_per_hour = 1 / (12 * 8)\n\n    # Total work done by Q in 1 hour\n    work_q_per_hour = 1 / (8 * 10)\n\n    # Total work done by P and Q in 1 hour when working together\n    work_together_per_hour = work_p_per_hour + work_q_per_hour\n    \n    # Total hours required for P and Q to finish the job together\n    total_hours_together = 1 / work_together_per_hour\n\n    # Since they work 8 hours a day, calculate the number of days required by dividing the total hours\n    # by 8 hours per day\n    days = total_hours_together / 8\n\n    # Taking only whole days by rounding up\n    whole_days = -(-days // 1)  # Ceiling division\n\n    return int(whole_days)\n\nans = solution()"
    ],
    "73d546a2c1f0431cbfd7415491f84730": [
        "def solution():\n    # Initialize count of digits to zero\n    digits_count = 0\n    \n    # Count digits for each page number from 1 to 40\n    for page in range(1, 41):\n        digits_count += len(str(page))\n    \n    return digits_count\n\nans = solution()"
    ],
    "106593b9b5bb443c9285898752bf5849": [
        "def solution():\n    factors = []\n    for i in range(1, int(180**0.5) + 1):\n        if 180 % i == 0:\n            factors.append((i, 180 // i))\n    differences = [abs(i - j) for i, j in factors]\n    return min(differences)\n\nans = solution()"
    ],
    "9527ef42da6941e7be57a1270b76ceb3": [
        "def solution():\n    cost_per_kg = 56 / 100  # pounds per kilogram\n    weight_kg = 5  # kilograms\n    total_cost = cost_per_kg * weight_kg\n    amount_paid = 10  # pounds\n    change = amount_paid - total_cost\n    return change\n\nans = solution()"
    ],
    "787da3f18e5e412287bbd42e447a76ef": [
        "def solution():\n    from sympy import factorint\n\n    # Prime factorization of 120\n    factors = factorint(120)\n\n    # Calculate the total number of factors\n    ans = 1\n    for power in factors.values():\n        ans *= (power + 1)\n    \n    return ans\n\nans = solution()"
    ],
    "bbfed58ca2f642f482fdc598bc7882b5": [
        "def solution():\n    midnight_temp = -8\n    midday_temp = 13\n\n    overall_change = midday_temp - midnight_temp\n\n    return overall_change\n\nans = solution()"
    ],
    "2112c6328fbd45fe9356d8c4b6c92b4e": [
        "def solution():\n    people = 85\n    price_per_person = 1.30\n\n    total_money_collected = people * price_per_person\n\n    return total_money_collected\n\nans = solution()"
    ],
    "ebe796d82e734546a5d8d043ba66fb08": [
        "def solution():\n    import math\n    ans = math.gcd(16, 36)\n    return ans\n\nans = solution()"
    ],
    "cc27afdc4fa642d99b8a96c299e48d50": [
        "def solution():\n    # We will find numbers that are multiples of 3 between 5 and 15\n    multiples_of_three = [i for i in range(6, 16, 3)]\n    \n    # We will then check which of these numbers are factors of 27\n    ans = [num for num in multiples_of_three if 27 % num == 0]\n    \n    # Since the question implies there is only one number, we extract it\n    return ans[0]\n\nans = solution()"
    ],
    "b3c63472965f4875854399b30b013a75": [
        "def solution():\n    # Given the ratio of Luca's speed to Max's speed\n    luca_speed_ratio = 2\n    max_speed_ratio = 3\n    \n    # Given that Luca takes 10 mins more than Max to cover some distance\n    # Let's assume Max takes 't' minutes to cover the distance\n    # Luca will take t+10 minutes\n    # Since distance is the same, time taken is inversely proportional to speed,\n    # We can write (luca_speed_ratio / max_speed_ratio) = (t / (t + 10))\n    \n    # Solving the equation for t\n    t = (luca_speed_ratio * 10) / (max_speed_ratio - luca_speed_ratio)\n    \n    # Luca's time to cover the distance at his usual speed would be t + 10\n    luca_time = t + 10\n    \n    # Luca's time to cover the distance at double speed would be half the usual time\n    luca_double_speed_time = luca_time / 2\n    \n    return luca_double_speed_time\n\nans = solution()"
    ],
    "9a83c293667c44a394743b502e08ad48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(12*x - 2*(5 + x), 20)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "31b84522628b463e9e35f8337da9486d": [
        "def solution():\n    total_durian_weight = 3 * 2.6\n    total_watermelon_weight = 5 * 9.24\n    total_weight = total_durian_weight + total_watermelon_weight\n    total_fruits = 3 + 5\n\n    average_weight = total_weight / total_fruits\n    return average_weight\n\nans = solution()"
    ],
    "fb0704ef09444ba29e79685e326dd2b9": [
        "def solution():\n    number = 42008\n    one_million = 1000000\n    difference = one_million - number\n\n    return difference\n\nans = solution()"
    ],
    "d9b578012565439f986a633f66f05484": [
        "def solution():\n    total_questions = 40\n    total_score = 71\n    \n    # Using system of equations to solve the problem\n    # Let x be the number of correct answers\n    # Let y be the number of wrong answers\n    # We have the following system of equations:\n    # 2x - y = total_score (Equation 1: Score calculation)\n    # x + y = total_questions (Equation 2: Total number of questions)\n    \n    # Solving the system of equations\n    for x in range(total_questions + 1):\n        # Calculate the number of wrong answers assuming x correct answers\n        y = total_questions - x\n        # Check if the score matches\n        if 2 * x - y == total_score:\n            # Return the number of wrong answers\n            return y\n\nans = solution()"
    ],
    "5ff26caf1d8641c3b74748b9efd22500": [
        "def solution():\n    # Let the number of pens and pencils initially be x\n    # After giving away 5 pencils, she has x-5 pencils left.\n    # At this point she has twice as many pens as pencils, so x = 2*(x-5)\n    # Solve this equation to get the initial number of pens and pencils (x)\n\n    x = symbols('x')\n    equation = Eq(x, 2 * (x - 5))\n    initial_amount = solve(equation, x)[0]\n\n    # After she bought another 18 pens, the final number of pens is initial_amount + 18\n    final_num_pens = initial_amount + 18\n\n    return final_num_pens\n\nans = solution()"
    ],
    "5a05da475bdf4d4f9c26b86b5ca7c335": [
        "def solution():\n    count = 0\n    for i in range(1, 319):\n        count += str(i).count('3')\n    return count\n\nans = solution()"
    ],
    "eca10a43dea24e5b8f40734daf3f5e9e": [
        "def solution():\n    # There are 4 cards labeled \"A\" in a deck of 52.\n    # To ensure we draw at least one \"A\", we have to consider the worst-case scenario\n    # where we draw all the cards except \"A\"s first. There are 13 cards of each pattern,\n    # so we might draw 12 cards from each pattern without getting an \"A\".\n    \n    # Worst case scenario without an \"A\":\n    worst_case_without_A = 12 * 4\n\n    # To then guarantee an \"A\", we have to draw one more card.\n    at_least_one_A = worst_case_without_A + 1\n\n    return at_least_one_A\n\nans = solution()"
    ],
    "7a2fec9d9f2a4cacbf558f6ae3813319": [
        "def solution():\n    speed_ship = 33\n    speed_current = 7\n    distance = 320\n\n    speed_downstream = speed_ship + speed_current\n    time_taken = distance / speed_downstream\n\n    return time_taken\n\nans = solution()"
    ],
    "c29aa8875cbd4e7d9da3314c1b9a63d0": [
        "def solution():\n    # Star jogs from 6:30am to 7:30am, for 1 hour\n    jog_time = 1  # hour\n    jog_speed = 6.5  # miles per hour\n    jog_distance = jog_speed * jog_time  # distance = speed * time\n\n    # Star walks from 7:30am to 9:30am, for 2 hours\n    walk_time = 2  # hours\n    walk_speed = 4.5  # miles per hour\n    walk_distance = walk_speed * walk_time  # distance = speed * time\n\n    # Total distance travelled is the sum of jogging and walking distances\n    total_distance = jog_distance + walk_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "ec60860f433c4d77837f8b9b847882cc": [
        "def solution():\n    ben_sweets = 17\n    bob_sweets = 14\n    total_sweets = ben_sweets + bob_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "dc98d04066844b33b74e3117952005e5": [
        "def solution():\n    count = 0\n    for i in range(1, 100):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "e7da9c665b464c9ca102d23b33677067": [
        "def solution():\n    count = 0\n    for i in range(1, 226):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "f6df262ec3d8481f8a51b4a2492214da": [
        "def solution():\n    total_books = 70\n    piles = 10\n    books_per_pile = total_books // piles\n    return books_per_pile\n\nans = solution()"
    ],
    "14254cf94d7540a7a332d80102aa8f38": [
        "def solution():\n    ans = 6081 - 5076\n    return ans\n\nans = solution()"
    ],
    "67cd26c1867b4d648638a34d32fad1b9": [
        "def solution():\n    initial_length = 240\n    cut_lengths = 2 * 45\n    remaining_length = initial_length - cut_lengths\n    pieces = remaining_length // 40\n\n    return pieces\n\nans = solution()"
    ],
    "3badf3ad5d7e4d65997e7dba4984ed0d": [
        "def solution():\n    cookies_per_gram_of_butter = 80 / 20\n    grams_of_butter_for_100_cookies = 100 / cookies_per_gram_of_butter\n    return grams_of_butter_for_100_cookies\n\nans = solution()"
    ],
    "d524ba10be4e42d287da738c4dd0f9f7": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    departure_time = datetime.strptime('10:35 AM', '%I:%M %p')\n    travel_duration = timedelta(hours=3, minutes=35)\n    arrival_time = departure_time + travel_duration\n    return arrival_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "6e3e5239895349b08896dfe4a2f9817a": [
        "def solution():\n    choices_per_position = 3  # Since each position can be either 6, 7, or 8\n\n    # A three-digit number has 3 positions where each of the digits 6, 7, or 8 can be placed.\n    total_numbers = choices_per_position ** 3\n\n    return total_numbers\n\nans = solution()"
    ],
    "1b632632619c4c03a2a49fc43f39ccb8": [
        "def solution():\n    left_handed_tennis_players = 16\n    proportion_left_handed_tennis = 1/10\n    \n    # Calculate the total number of left handed students\n    left_handed_students = left_handed_tennis_players / proportion_left_handed_tennis\n    \n    # Given 25% of girls are left handed\n    proportion_left_handed = 0.25\n    \n    # Calculate the total number of students\n    total_students = left_handed_students / proportion_left_handed\n\n    return int(total_students)\n\nans = solution()"
    ],
    "c95c7f2647524a1b84a553fdaf384550": [
        "def solution():\n    current_number = 1\n    zero_count = 0\n\n    while zero_count < 100:\n        for ch in str(current_number):  # iterate through characters of current number\n            if ch == '0':\n                zero_count += 1\n                if zero_count == 100:\n                    break\n        if zero_count < 100:\n            current_number += 1\n\n    return current_number\n\nans = solution()"
    ],
    "361af5c7444d4a77a809bd5fb28f128e": [
        "def solution():\n    total_juice = 8 * 3\n    drunk_juice = 9\n    remaining_juice = total_juice - drunk_juice\n    return remaining_juice\n\nans = solution()"
    ],
    "57c249281b304080a78e5214cc07daa6": [
        "def solution():\n    principal = 3600\n    interest_rate = 0.02\n    time_years = 10\n\n    interest = principal * interest_rate * time_years\n\n    return interest\n\nans = solution()"
    ],
    "eda84d19ef334353a874d1471a677058": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2 * x - 2), 30 - 3 * x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "56c90f1a30374a13b09ffe20646206b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bud, pip, tom = symbols('bud pip tom')\n    equation1 = Eq(bud, 3 * pip)\n    equation2 = Eq(tom, 2 * bud)\n    equation3 = Eq(bud + pip + tom, 50)\n\n    solutions = solve((equation1, equation2, equation3), (bud, pip, tom))\n    return solutions[tom]\n\nans = solution()"
    ],
    "b7fd46892ef74e929cb5d1f4d54a7f75": [
        "def solution():\n    speed_fast = 180  # meters per minute\n    speed_slow = 120  # meters per minute\n    time_fast = 6     # minutes\n    time_slow = 8     # minutes\n\n    distance_fast = speed_fast * time_fast\n    distance_slow = speed_slow * time_slow\n\n    total_distance = distance_fast + distance_slow\n    return total_distance\n\nans = solution()"
    ],
    "8e1c584bb43949dc93fc621494c3073f": [
        "def solution():\n    # if n is the first number, then the sum of eight consecutive whole numbers is\n    # n + (n+1) + (n+2) + (n+3) + (n+4) + (n+5) + (n+6) + (n+7) = 2012\n    # Simplify the equation: 8n + 28 = 2012\n    # 8n = 2012 - 28\n    # n = (2012 - 28) / 8\n    n = (2012 - 28) // 8\n    \n    # The largest number in the sequence is (n+7)\n    largest_number = n + 7\n    return largest_number\n\nans = solution()"
    ],
    "b592cb34a1374b25a352ce50080da48d": [
        "def solution():\n    total_cars = 60\n    red_cars = (5/12) * total_cars\n    blue_cars = (20/100) * total_cars\n    neither_red_nor_blue = total_cars - red_cars - blue_cars\n    return int(neither_red_nor_blue)\n\nans = solution()"
    ],
    "e084829c18924d79acacaf75a980d4f9": [
        "def solution():\n    people_in_front_of_elias = 25\n    danya_position_from_back = 14\n\n    # Total people = Elias' position from back + people in front of Elias\n    total_people = danya_position_from_back + people_in_front_of_elias\n\n    return total_people\n\nans = solution()"
    ],
    "d15e0e53fbde4c1aa79efca6f630157d": [
        "def solution():\n    fraction = 42 / 35\n    percentage = fraction * 100\n    return percentage\n\nans = solution()"
    ],
    "65df19ad9a52462f88ad9585d2e88ca8": [
        "def solution():\n    a = (14 - 8) / 3\n    return a\n\nans = solution()"
    ],
    "90a6c5c7e28a4bc489bb3ef6acd51b15": [
        "def solution():\n    sachin_rate = 1 / 3\n    peter_rate = 1 / 6\n\n    combined_rate = sachin_rate + peter_rate\n\n    time_together = 1 / combined_rate\n\n    return time_together\n\nans = solution()"
    ],
    "1f3250a1ab714b5a93c359bb33407829": [
        "def solution():\n    return 24.4 * 1000\n\nans = solution()"
    ],
    "015418b57d46449a8b2161571801303b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')  # number of students in class A and class B\n\n    # original ratio of students between class A and class B\n    equation1 = Eq(A, 5/7 * B)\n    \n    # after transferring 3 students from class B to class A\n    equation2 = Eq(A + 3, 4/5 * (B - 3))\n\n    # solve the system of equations\n    students = solve((equation1, equation2), (A, B))\n\n    return students[A]\n\nans = solution()"
    ],
    "7991c8c9adaf4cbb9a682e09102844fc": [
        "def solution():\n    return 52248 // 12\n\nans = solution()"
    ],
    "76ba583e46624ad6ad49e0fa892660ad": [
        "def solution():\n    total_millilitres = 40 * 1000  # convert litres to millilitres\n    flow_rate = 125  # millilitres per second\n\n    time_seconds = total_millilitres / flow_rate\n\n    return time_seconds\n\nans = solution()"
    ],
    "6fd5f6f4f4764d0a976b09a87613282b": [
        "def solution():\n    # Let the original number of boys be b such that b = n^2 (since the boys form a square array)\n    # Then the number of boys after adding 17 girls is b + 17 = (n + 1)^2\n    # Expanding the equation yields: n^2 + 17 = n^2 + 2n + 1\n    # Simplifying, we get: 17 = 2n + 1, so n = 8\n    # The total number of boys is then: b = n^2 = 8^2 = 64\n    n = (17 - 1) // 2\n    b = n ** 2\n    return b\n\nans = solution()"
    ],
    "12524a06278546ab8e9e8b16a0f5e800": [
        "def solution():\n    # Let x be the number of bottles Faye has at first\n    # Every exchange Faye gets 1 bottle for every 3 she gives, so she keeps a balance of -2 each time\n    # Since she exchanged 5 times she ends up with 5 more bottles than expected, which is given to be 1 more. Therefore 5 exchanges give 4 more, not 5.\n    # We can set up the equation: x - 2*5 = 4 (the number of bottles she had after 5 exchanges)\n    # Solving this for x gives us:\n    x = 4 + 2*5\n    return x\n\nans = solution()"
    ],
    "6424a92c08be44a48125b4a91cdf0541": [
        "def solution():\n    # Let the distance be d km and the original speed be v km/h.\n    # The travel time for the original speed is 6 hours (from 1 pm to 7 pm).\n    # To arrive 1 hour earlier, the travel time should be 5 hours.\n    # The new speed would then be v + 2 km/h.\n    \n    # Using the formula: distance = speed * time\n    # For the original speed: d = 6 * v\n    # For the new speed: d = 5 * (v + 2)\n    \n    # Equating the two equations:\n    # 6v = 5(v + 2)\n    # 6v = 5v + 10\n    # v = 10 km/h (original speed)\n    \n    # Now, to find the distance:\n    # d = 6 * v\n    # d = 6 * 10\n    d = 6 * 10\n    return d\n\nans = solution()"
    ],
    "355ee489190e440a97b10b0e4a181b2c": [
        "def solution():\n    pages = 0\n    digits = 0\n    while digits < 237:\n        pages += 1\n        digits += len(str(pages))\n    if digits > 237:\n        pages -= 1  # Adjust because we've gone over the number of digits\n    return pages\n\nans = solution()"
    ],
    "4cc013248faa4925b3066d0d0269c175": [
        "def solution():\n    # The difference in recording\n    wrong_recording = 1268\n    correct_recording = 1082\n    recording_diff = wrong_recording - correct_recording\n\n    # The difference in average as a result of wrong recording over n days\n    incorrect_average = 1468\n    correct_average = 1462\n    average_diff = incorrect_average - correct_average\n\n    # The number of days\n    num_days = recording_diff / average_diff\n\n    return int(num_days)\n\nans = solution()"
    ],
    "c5b38e5e2199435c95eb989e88e91cc9": [
        "def solution():\n    birth_year = 1940 - 80\n    age_in_2011 = 2011 - birth_year\n    return age_in_2011\n\nans = solution()"
    ],
    "3f0badddf0e84f4285bbd3a1d9b4b2e7": [
        "def solution():\n    time_for_one_cut = 12 / 3  # 3 cuts are needed to divide the rope into 4 equal parts\n    total_cuts_for_twelve_pieces = 11  # 11 cuts are needed to divide the rope into 12 equal parts\n    time_for_twelve_pieces = time_for_one_cut * total_cuts_for_twelve_pieces\n    return time_for_twelve_pieces\n\nans = solution()"
    ],
    "75742fbf8de24d479bd0cd4b5397eb2d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the first term of the AP as a1 and the common difference as d\n    a1, d = symbols('a1 d')\n    \n    # According to the given, the 9th term is a1 + 8d\n    # The 15th term is a1 + 14d\n    # The 20th term is a1 + 19d\n    # The 12th term is a1 + 11d\n    \n    # The 9th term is 18 more than the 15th term: a1 + 8d = a1 + 14d + 18\n    # The sum of the 20th term and 12th term is 88: (a1 + 19d) + (a1 + 11d) = 88\n    \n    # Set up the equations based on the problem statement\n    equation1 = Eq(a1 + 8*d, a1 + 14*d + 18)\n    equation2 = Eq(a1 + 19*d + a1 + 11*d, 88)\n    \n    # Solve the system of equations for a1 and d\n    solutions = solve((equation1, equation2), (a1, d))\n    \n    # Find the value of the 32nd term: a1 + 31d\n    a32 = solutions[a1] + 31*solutions[d]\n    \n    return a32\n\nans = solution()"
    ],
    "7215e81d77604964bf294178622f8fee": [
        "def solution():\n    # Given values in the question\n    nth_term = 10  # The position of the last term given in the sequence\n    last_given_term = 31  # The last term given in the sequence\n\n    # Common difference calculation from the given part of the sequence\n    common_difference = 28 - 25\n\n    # The first term calculation using the formula: an = a1 + (n - 1) * d\n    # Here, we need to find a1, hence rearranging: a1 = an - (n - 1) * d\n    first_term = last_given_term - (nth_term - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "0dd2e9d562984533a486b18296484a81": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(22 + 3 * (6 - 2 * x), 8 + 10 * x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "baabee468b9f46dd9d3a226e53fabfd7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    # Chewy's incorrect working out (for reference)\n    # chewy_equation = ((8*x + 8) / 2) - 3 * (x + 6) = 4*x + 4 - 3*x - 18\n\n    # Correcting Chewy's working out:\n    correct_equation = Eq(((8*x + 8) / 2) - 3 * (x + 6), x + 22)\n\n    ans = solve(correct_equation, x)\n\n    return ans[0]\n\nans = solution()"
    ],
    "a7861f09bf0047a1abbdf01cf43d20db": [
        "def solution():\n    # Calculate the product of the ages\n    product_of_ages = 2240 // 4\n    \n    # Check every possible age for Lily (starting from 1)\n    # to find the ages that match the product of ages\n    for lily_age in range(1, product_of_ages):\n        marry_age = lily_age + 1\n        carol_age = marry_age + 2\n        if lily_age * marry_age * carol_age == product_of_ages:\n            return carol_age\n\nans = solution()"
    ],
    "539f23e975a649d497568948c5e3f459": [
        "def solution():\n    number = 38942\n    remainder = number % 9\n    if remainder == 0:\n        return 0\n    else:\n        return remainder\n\nans = solution()"
    ],
    "ca0a4ee804934a22b8a061da9f276028": [
        "def solution():\n    total_flowers = 200\n    red_ratio = 2 / 5\n    purple_ratio = 1 / 8\n\n    red_flowers = total_flowers * red_ratio\n    purple_flowers = total_flowers * purple_ratio\n\n    return red_flowers, purple_flowers\n\nans = solution()"
    ],
    "f0ea959eec6b41118011cbb0ba3f17c6": [
        "def solution():\n    return 6444 // 18\n\nans = solution()"
    ],
    "503dcced126a4cae9f67e60f2048cded": [
        "def solution():\n    # 1 liter is approximately 1.056688 quarts\n    liters_to_quarts = 2.5 * 1.056688\n    # Capacity of cup in quarts\n    cup_capacity = 0.5\n    # Number of cups of Coke\n    cups_of_coke = liters_to_quarts / cup_capacity\n    return round(cups_of_coke)\n\nans = solution()"
    ],
    "a7676438a1a847d8ab70d7998ed51f7a": [
        "def solution():\n    # Since marbles are identical, we only care about the number of marbles in each pile.\n    # We can have 1 marble in the first pile and the rest in the second pile, or vice versa.\n    # There is only 1 possibility for each split, except when piles are equal.\n    \n    # Possible distributions: (1,9), (2,8), (3,7), ..., (9,1) and one extra (5,5)\n    # Total number of distributions = 9 (as we exclude (0,10) and (10,0) because each pile needs at least one marble) + 1 (for the equal split)\n    count = 9 + 1\n    \n    return count\n\nans = solution()"
    ],
    "31cea5404a28497fa58c3d4ac14250bf": [
        "def solution():\n    # lengths in cm\n    wood1 = 85\n    wood2 = 200  # 2m converted to cm\n    wood3 = 147\n\n    # sum of lengths in cm\n    total_length_cm = wood1 + wood2 + wood3\n\n    # convert the sum to meters\n    total_length_m = total_length_cm / 100\n\n    return total_length_m\n\nans = solution()"
    ],
    "02cec2fdec424ee0a518fe03ccd11faa": [
        "def solution():\n    whole_number = 2\n    fraction = 34 / 100\n    ans = whole_number + fraction\n    return ans\n\nans = solution()"
    ],
    "89245e2c38cd4e249921977cacaefb32": [
        "def solution():\n    max_ants = 0\n    for spiders in range(65):\n        legs = spiders * 8\n        remaining_legs = 64 - legs\n        if remaining_legs >= 0 and remaining_legs % 6 == 0:\n            ants = remaining_legs // 6\n            if ants > max_ants:\n                max_ants = ants\n    return max_ants\n\nans = solution()"
    ],
    "e4b841a897a04191927b64bfe38ff722": [
        "def solution():\n    stamps_left = 34\n    stamps_used = 2\n    stamps_bought = 11\n    stamps_given = 14\n    \n    stamps_initial = stamps_left + stamps_used - stamps_bought + stamps_given\n    \n    return stamps_initial\n\nans = solution()"
    ],
    "c7d9e6a152bf4aac8eb62a0c004333d5": [
        "def solution():\n    litres_to_millilitres = 1000\n    ans = 7.5 * litres_to_millilitres\n    return ans\n\nans = solution()"
    ],
    "521225eba88d499087ca7a728e7babaa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    justin, vivian = symbols('justin vivian')\n\n    equation1 = Eq(vivian, 5 * justin + 8)\n    equation2 = Eq(vivian, justin + 48)\n\n    solutions = solve((equation1, equation2), (justin, vivian))\n\n    return solutions[vivian]\n\nans = solution()"
    ],
    "730d6fe3d6a34ed4b170b749c262e84f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    expression = (6 - (x - 6)) / 6\n    \n    equation = Eq(expression, 6)\n    \n    ans = solve(equation, x)[0]\n    \n    return ans\n\nans = solution()"
    ],
    "a4c428257cff4445a4d9df7423135eaf": [
        "def solution():\n    # To ensure getting 3 toy cars of the same color, Jeremy should pick at least:\n    # 1 red, 1 blue, 1 white (in the worst case, one of each)\n    # + 1 more red to make sure he might have 2 reds or\n    # + 1 more blue or\n    # + 1 more white to ensure having 2 unique color pairs and 1 single\n    # And finally, 1 more pick that guarantees having 3 of the same color in the worst case.\n    # This is because if he has picked 2 of each color and still doesn't have 3 of the same color,\n    # the next pick will definitely be the third car of a color already having 2 cars.\n    \n    return (1 + 1 + 1) + (1) + 1\n\nans = solution()"
    ],
    "c0478d9244ba49339b683a82526b16a9": [
        "def solution():\n    initial_amount = 32\n    amount_spent = initial_amount / 2\n    amount_left = initial_amount - amount_spent\n    return amount_left\n\nans = solution()"
    ],
    "c847b4e44f3b41f4925f34fe099d474a": [
        "def solution():\n    return 2 * 9 + 200 + 9\n\nans = solution()"
    ],
    "6e99e1ccf3764b41b183ed57f3093159": [
        "def solution():\n    # Let's assume the height from which the ball was dropped is h.\n    # After the first bounce, it reached 3h.\n    # After the second bounce, it also reached 3h.\n    # After the third bounce, it reached 3h/2.\n    # After the fourth bounce, it reached (3h/2)/2.\n    # So, (3h/2)/2 = 36 m.\n    # Solving for h, we get h = (36 * 2 * 2) / 3.\n    \n    h = (36 * 2 * 2) / 3\n    return h\n\nans = solution()"
    ],
    "945736381b124f10ad0d4586420a9666": [
        "def solution():\n    for number in range(30, 41):\n        if number % 3 == 0 and number % 4 == 0:\n            return number\n\nans = solution()"
    ],
    "9074f61b08b34feb83fb6026f085b5f2": [
        "def solution():\n    cost_per_song = 99  # pence\n    cost_whole_cd = 899  # pence, since £8.99 is 899p\n    \n    total_cost_individual_songs = 12 * cost_per_song\n    savings = total_cost_individual_songs - cost_whole_cd\n    \n    return savings\n\nans = solution()"
    ],
    "2826012497a04a32b3544b4cbd378949": [
        "def solution():\n    eggs_per_tray = 16\n    number_of_trays = 40\n\n    total_eggs = eggs_per_tray * number_of_trays\n\n    return total_eggs\n\nans = solution()"
    ],
    "71c5dafbfe4e49e48f3ff2ba324fa816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x and y be the two original numbers\n    x, y = symbols('x y')\n\n    # Equation 1: The sum of the two original numbers\n    equation1 = Eq(x + y, 11.63)\n\n    # Equation 2: The sum when the decimal of one number is shifted\n    equation2 = Eq(x + y / 10, 5.87)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # The difference between the two original numbers scaled by a hundred\n    difference = abs(solutions[x] - solutions[y]) * 100\n\n    # Return the difference as an integer, since we want \"one hundred times\" the difference\n    return int(difference)\n\nans = solution()"
    ],
    "e6b3da9856474849a7c73d75f573f103": [
        "def solution():\n    for a in range(10):\n        for b in range(10):\n            if b == a or b == 8:\n                continue\n            for c in range(10):\n                if c in [a, b, 8]:\n                    continue\n                for d in [0, 2, 4, 6, 8]:  # Ensuring divisibility by 4\n                    if d in [a, b, c, 8]:\n                        continue\n                    for e in [0, 5]:  # Ensuring divisibility by 5\n                        if e in [a, b, c, d, 8]:\n                            continue\n                        number = int(f\"8{a}{b}{c}{d}{e}\")\n                        if number % 3 == 0:  # Ensuring divisibility by 3\n                            return number\n\nans = solution()"
    ],
    "e1c6641aa30549ec93c747f03b8fde94": [
        "def solution():\n    total_cost = 1.69 + 0.82 + 2.99\n    paid = 20.00\n    change = paid - total_cost\n    return change\n\nans = solution()"
    ],
    "022ef21b0ed847d68df150adecb637ea": [
        "from itertools import permutations\n\ndef solution():\n    digits = [\"1\", \"2\", \"3\"]\n    two_digit_numbers = set()\n    \n    for perm in permutations(digits, 2):\n        num_str = ''.join(perm)\n        two_digit_numbers.add(int(num_str))\n    \n    ans = len(two_digit_numbers)\n    return ans\n\nans = solution()"
    ],
    "f20519cbe24047f480f153f89d45c8f9": [
        "def solution():\n    results = set()\n    for i in range(10, 100):\n        larger = int(str(i)[::-1]) if int(str(i)[::-1]) > i else i\n        smaller = i if i < int(str(i)[::-1]) else int(str(i)[::-1])\n        difference = larger - smaller\n        results.add(difference)\n    return results\n\nans = solution()"
    ],
    "7123aa7bbad1493684f0f3f2ffa7852a": [
        "def solution():\n    for N in range(10):\n        if (300 + 10 * N + 3) % 9 == 1:\n            return N\n\nans = solution()"
    ],
    "40503ef3b45647cda8ec8ab5a12a3568": [
        "def solution():\n    ans = 19 + 27 - 9 - 7 + 8\n    return ans\n\nans = solution()"
    ],
    "9dd11761e2f946e1aaa0f232e5513538": [
        "def solution():\n    time = 15  # time in seconds\n    length = 450  # length in meters\n    speed = length / time  # speed in meters/second\n    \n    # To convert the speed to km/h multiply by 3.6 (1 m/s = 3.6 km/h)\n    speed_kmh = speed * 3.6\n    \n    return speed_kmh\n\nans = solution()"
    ],
    "bff9eb9a097b4c9fbe698fb9361765b1": [
        "def solution():\n    from math import factorial\n    return factorial(10)\n\nans = solution()"
    ],
    "73d622eab89d4aeab04694fa52f525db": [
        "def solution():\n    A = (3 * 13 + 5 * 13) / 8\n    return A\n\nans = solution()"
    ],
    "64d9c0d96e8b4b6a9b2af8e53a386877": [
        "def solution():\n    salt = 8\n    water = 32\n    concentration = (salt / (salt + water)) * 100\n    return concentration\n\nans = solution()"
    ],
    "cc3b876c55ae46299e40246b9eafb3d1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the number of stickers Sam and Peter originally had\n    sam, peter = symbols('sam peter')\n    \n    # Given that Sam had 40 stickers more than Peter\n    equation1 = Eq(sam, peter + 40)\n    \n    # Sam gave 20% of his to Peter and then Peter gave 25% of his stickers to Sam\n    # After the exchange, Sam's stickers = sam - 0.20*sam + 0.25*(peter + 0.20*sam)\n    # Peter's stickers = peter + 0.20*sam - 0.25*(peter + 0.20*sam)\n    # Sam had 96 stickers more than Peter after the exchange\n    equation2 = Eq(sam - 0.20*sam + 0.25*(peter + 0.20*sam) - (peter + 0.20*sam - 0.25*(peter + 0.20*sam)), 96)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sam, peter))\n    \n    return solutions[peter]\n\nans = solution()"
    ],
    "8fdba5860ae8459494f40b54d38548a9": [
        "def solution():\n    ans = 70 / 100 * 40\n    return ans\n\nans = solution()"
    ],
    "4b2c1678e7f14496a3b8d08653cd8693": [
        "def solution():\n    # To get the smallest possible difference, we should aim to make one number as small as possible\n    # and the other as large as possible without large differences in individual digit positions.\n    # Sort the digits to get the smallest and largest possible 5-digit numbers:\n    digits = sorted([str(i) for i in range(10)])\n\n    # To get the smallest difference, we spread the digits as evenly as possible between the two numbers.\n    smaller_number = int(digits[1] + digits[3] + digits[5] + digits[7] + digits[9])  # digits for the smaller number\n    larger_number = int(digits[0] + digits[2] + digits[4] + digits[6] + digits[8])  # digits for the larger number\n\n    # Calculate the difference between the two numbers\n    difference = larger_number - smaller_number\n\n    return difference\n\nans = solution()"
    ],
    "3fc4b3f3cb89424db751f420508a1d40": [
        "def solution():\n    pencil_cost = 2\n    pen_cost = 4\n    \n    pencils_for_one_pen = pen_cost // pencil_cost\n    \n    return pencils_for_one_pen\n\nans = solution()"
    ],
    "30fd86b9d9a641a881e71dc018c583f4": [
        "def solution():\n    friends = 4\n    # Each friend sends a card to all the other friends\n    cards_sent_by_each = friends - 1  \n    # Total cards are the number of friends times the number of cards each sends\n    total_cards_sent = friends * cards_sent_by_each\n    return total_cards_sent\n\nans = solution()"
    ],
    "d47c10d6ed9c4e61976326927d0db6ac": [
        "def solution():\n    ans = 18 - 17 + 16 - 15 + 14 - 13\n    return ans\n\nans = solution()"
    ],
    "7fb2dd15b44a432ebf16f80ff0ac18d8": [
        "def solution():\n    count = 0\n    for number in range(1, 829):\n        count += str(number).count('9')\n    return count\n\nans = solution()"
    ],
    "a1f84fb286e24074ba7396201d611eff": [
        "def solution():\n    people_in_front_of_ali = 14\n    people_behind_bala = 10\n    ali_and_bala = 2\n\n    total_people = people_in_front_of_ali + ali_and_bala + people_behind_bala\n    \n    return total_people\n\nans = solution()"
    ],
    "06005d7a51944fbcab3a4f5650bb5d66": [
        "def solution():\n    i = 1\n    while True:\n        if all(i % n == 0 for n in range(1, 7)):\n            return i\n        i += 1\n\nans = solution()"
    ],
    "29f757912336498e89b265d7c3dc2c68": [
        "def solution():\n    total_sum = sum(i * (i + 1) for i in range(1, 102))\n    return total_sum\n\nans = solution()"
    ],
    "9a0b6021c3bf41b6bfe3ce63e893970b": [
        "def solution():\n    initial_water_in_tank = 2  # The initial amount of water in the tank in liters\n    jug_capacity = 7  # The capacity of each jug in liters\n    number_of_jugs_added = 4  # The number of jugs of water added to the tank\n\n    # The total amount of water added to the tank in liters\n    total_water_added = jug_capacity * number_of_jugs_added\n\n    # The final amount of water in the tank\n    final_water_in_tank = initial_water_in_tank + total_water_added\n\n    return final_water_in_tank\n\nans = solution()"
    ],
    "4d874eded9f6441287acd8ba0029f6bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alan_amount = 74\n    bilal_amount = 86\n    chloe, david, emily = symbols('chloe david emily')\n\n    equation1 = Eq(chloe, 2 * david)\n    equation2 = Eq(david, 3 * emily)\n    equation3 = Eq(alan_amount + bilal_amount + chloe + david + emily, 400)\n\n    solutions = solve((equation1, equation2, equation3), (chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "4916026562cd47e283b98f0d0cd4bf19": [
        "def solution():\n    # Calculate cookies eaten on each day\n    first_days = 9 * 3\n    following_days = 15 * 2\n    last_days = 10 * 2\n    \n    # Total cookies eaten\n    total_cookies = first_days + following_days + last_days\n    \n    # Total number of days\n    total_days = 3 + 2 + 2\n    \n    # Calculate the average\n    average_cookies = total_cookies / total_days\n    \n    return average_cookies\n\nans = solution()"
    ],
    "51560f6fe7b14fcdb4bd060c96dbc1a9": [
        "def solution():\n    # Job rates\n    candy_rate = 1 / 20\n    david_rate = 1 / 25\n\n    # Solve equation (candy_rate * 12) + (david_rate * (12 - days_off)) = 1 job\n    days_off = symbols('days_off', integer=True)\n\n    # Equation representing the completion of work\n    equation = Eq((candy_rate * 12) + (david_rate * (12 - days_off)), 1)\n\n    # Solve for the days off David took\n    solution = solve(equation, days_off)\n\n    return solution[0]\n\nans = solution()"
    ],
    "7a2a20573729484498268bb992ca72c1": [
        "def solution():\n    # The force exerted by the table on the book is equal to the mass of the book\n    # due to Newton's third law of motion - action and reaction are equal and opposite.\n    force_by_table = 20  # in Newtons (N), same as the mass of the book\n\n    return force_by_table\n\nans = solution()"
    ],
    "aa1ba812762546cd8c78bc85ae3a25cc": [
        "def solution():\n    y = symbols('y')\n    guys_age = y - 3\n    return guys_age\n\nans = solution()"
    ],
    "0f96314625f240a7a0bac5d0d7506fa0": [
        "def solution():\n    # To guarantee Lily gets 6 balls of the same type, we have to consider the worst-case scenario.\n    # If she takes out 5 footballs + 5 basketballs + 5 volleyballs = 15 balls, she might end up with 5 of each.\n    # Taking one more ball (the 16th), no matter the type, will give her 6 balls of that type.\n    balls_needed = 5 + 5 + 5 + 1\n    return balls_needed\n\nans = solution()"
    ],
    "8ef2118cd0cb45d3a3940b6138d4e8da": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    income = 140000\n    tax_paid = 15100\n    first_tax_bracket = 50000\n    first_tax_rate = 0.05\n    second_tax_rate = 0.08 + T\n    \n    tax_on_first_bracket = first_tax_bracket * first_tax_rate\n    tax_on_second_bracket = (income - first_tax_bracket) * second_tax_rate\n\n    equation = Eq(tax_on_first_bracket + tax_on_second_bracket, tax_paid)\n    T_value = solve(equation, T)\n    \n    return T_value[0]\n\nans = solution()"
    ],
    "0abf82b202384e50a18c63eb91160283": [
        "def solution():\n    from math import sqrt\n\n    g = 9.81  # Acceleration due to gravity (m/s^2)\n    h = 5.0   # Height of the tabletop above the floor (m)\n    \n    # Using the formula v = sqrt(2gh) to find the final velocity\n    v = sqrt(2 * g * h)\n    \n    return v\n\nans = solution()"
    ],
    "4a6392aa73ad47e08098f73769dc697c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the total fruit as 'f'\n    f = symbols('f')\n\n    # From the problem:\n    # (4/5)*f - fruits that were apples initially\n    # f - (4/5)*f = (1/5)*f - fruits that were pears initially.\n    \n    # If 3/4 of the fruits were removed, the remaining fruits are 1/4*f:\n    # Remaining apples = (1/8) * (4/5)*f\n    # Remaining pears = 30 (Given)\n\n    # Remaining apples + remaining pears = remaining fruits:\n    equation = Eq((1/8) * (4/5)*f + 30, (1/4)*f)\n\n    # Solve for the total number of fruits:\n    solution = solve(equation, f)\n\n    return solution[0]\n\nans = solution()"
    ],
    "936e8db367764ee7ad52e4eed4333f1b": [
        "def solution():\n    time_for_6_cakes = 36\n    number_of_cakes_initial = 6\n    number_of_cakes_desired = 10\n\n    time_per_cake = time_for_6_cakes / number_of_cakes_initial\n    total_time_for_10_cakes = time_per_cake * number_of_cakes_desired\n\n    return total_time_for_10_cakes\n\nans = solution()"
    ],
    "a4968c4a62914361ad7a1d205bb1e5b4": [
        "def solution():\n    bill = 40\n    tip_percent = 0.15\n    tax_percent = 0.08\n\n    tip = bill * tip_percent\n    tax = bill * tax_percent\n    total_cost = bill + tip + tax\n\n    return total_cost\n\nans = solution()"
    ],
    "58ee44d10dd9468d827490e2aa404506": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of stickers that Mr Ya originally has.\n    # Let y be the number of pupils.\n    x, y = symbols('x y')\n\n    # Form the equations based on the given conditions\n    equation1 = Eq(x - 13*y, 190)  # If he gives 13 stickers to each pupil, he has 190 stickers left\n    equation2 = Eq(x - 17*y, 50)  # If he gives 17 stickers to each pupil, he has 50 stickers left\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]  # We want to find the total number of stickers Mr Ya has\n\nans = solution()"
    ],
    "47ab709ca45c4de2874c7ae5d6b26888": [
        "def solution():\n    # Starting from the smallest number with a digit sum of 20, which is 2000\n    # and check divisibility by 11 according to the divisibility rule for 11\n    number = 2000\n    while True:\n        # Calculate the digit sum\n        digit_sum = sum(int(digit) for digit in str(number))\n        # Check the digit sum and divisibility by 11\n        if digit_sum == 20:\n            # Check the divisibility by 11 using the alternate sum method\n            if (sum(int(str(number)[i]) for i in range(0, len(str(number)), 2)) -\n                sum(int(str(number)[i]) for i in range(1, len(str(number)), 2))) % 11 == 0:\n                return number\n        # Increment the number to check the next one\n        number += 1\n\nans = solution()"
    ],
    "aaaca6fa5ad944f5b9d50ad2726de809": [
        "import math\n\ndef solution():\n    initial_velocity = 5\n    angle = 45\n    g = 9.81  # acceleration due to gravity in m/s^2\n    h = 30  # height of the building in meters\n\n    # Horizontal component of the velocity\n    vx = initial_velocity * math.cos(math.radians(angle))\n    \n    # Vertical component of the velocity\n    vy_initial = initial_velocity * math.sin(math.radians(angle))\n    \n    # Time taken to hit the ground using the formula: t = sqrt((2 * h) / g)\n    time_to_hit_ground = math.sqrt((2 * h) / g)\n    \n    # Final vertical velocity, using the formula: vy = vy_initial - g * t\n    vy_final = vy_initial - g * time_to_hit_ground\n    \n    # Magnitude of the final velocity, using the Pythagorean theorem\n    final_velocity = math.sqrt(vx**2 + vy_final**2)\n    \n    return final_velocity\n\nans = solution()"
    ],
    "a36914e472964629805f90180ee32817": [
        "def solution():\n    from itertools import permutations\n    \n    for perm in permutations(range(10), 5):\n        S, A, M, O, G = perm\n        if S == 0 or O == 0: # A 5-digit number cannot start with 0\n            continue\n        SASMO = S*10000 + A*1000 + S*100 + M*10 + O\n        OGAMS = O*10000 + G*1000 + A*100 + M*10 + S\n        if SASMO * 4 == OGAMS:\n            return SASMO\n\nans = solution()"
    ],
    "7d5b9285020f4096b89f646f6ac6914e": [
        "def solution():\n    ans = 78.16 * 1.45 + 3.14 * 21.84 + 169 * 0.7816\n    return ans\n\nans = solution()"
    ],
    "f4b67240ff2e4eea856a54877b0f510d": [
        "from math import factorial\n\ndef solution():\n    # Basic combinations formula: C(n, k) = n! / (k! * (n - k)!)\n    # Stars and bars theorem (n stars, k-1 bars): C(n - 1, k - 1) = (n - 1)! / ((k - 1)! * (n - k)!)\n    # Here, we consider 13 oranges as stars and 2 bars (because 3 kids-1) to divide them\n\n    n = 13 - 1  # 13 oranges minus 1 because each child gets at least one orange\n    k = 3 - 1   # 3 kids, so 2 partitions (bars)\n\n    ans = factorial(n) // (factorial(k) * factorial(n - k))\n    return ans\n\nans = solution()"
    ],
    "93268f61447f4bc89f03ed35d94d32d2": [
        "def solution():\n    food_choices = 2  # sandwiches, burgers\n    drink_choices = 3  # coffee, milk, tea\n    dessert_choices = 4  # cake, pudding, ice-cream, pie\n\n    total_ways = food_choices * drink_choices * dessert_choices\n\n    return total_ways\n\nans = solution()"
    ],
    "18e751b89c0f4f688755003c0becbb1a": [
        "def solution():\n    total_water = 48 + 28\n    water_needed_for_equal_volume = total_water / 2\n    water_to_transfer_from_A_to_B = water_needed_for_equal_volume - 28\n    \n    return water_to_transfer_from_A_to_B\n\nans = solution()"
    ],
    "6f7fe67009984428871104da0134627c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    principal = 2000\n    final_amount = 2519.42\n    years = 3\n    rate = symbols('r')\n\n    # The formula to calculate compound interest amount is A = P*(1 + r/n)**(nt)\n    # Here, n is 1 because it is compounded annually\n    # t is the time period in years\n    # r is the annual interest rate\n    # P is the principal amount\n    # A is the amount after t years\n    equation = Eq(principal * (1 + rate)**years, final_amount)\n    solution = solve(equation, rate)\n\n    return solution[0]\n\nans = solution()"
    ],
    "43ef6239d7c44a0183051685a5117a3a": [
        "def solution():\n    # Total amount given by Anjali\n    total_given = (2 * 10) + (4 * 2) + (8 * 0.50)\n\n    # Total amount spent (after receiving $0.40 as change)\n    total_spent = total_given - 0.40\n\n    # Cost per cup\n    cost_per_cup = total_spent / 4\n\n    return cost_per_cup\n\nans = solution()"
    ],
    "a7860a3460d6490f888b36cb3f9823b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    price_mango, price_lychee = symbols('price_mango price_lychee')\n    \n    equation1 = Eq(price_lychee, 2 * price_mango - 6)\n    equation2 = Eq(24 * price_mango + 20 * price_lychee, 1160)\n    \n    solutions = solve((equation1, equation2), (price_mango, price_lychee))\n    \n    return solutions[price_lychee]\n\nans = solution()"
    ],
    "e47957966fd14e6a9af6de7b6554166e": [
        "def solution():\n    percentage = 60 / 100\n    fraction = 2 / 5\n    whole_number = 75\n\n    ans = percentage * fraction * whole_number\n    return ans\n\nans = solution()"
    ],
    "802ac638436e4b4fa6a0b74f166a9968": [
        "def solution():\n    bill = 50\n    tip_percent = 0.18\n    tax_percent = 0.10\n    \n    tip_amount = bill * tip_percent\n    tax_amount = bill * tax_percent\n    total_cost = bill + tip_amount + tax_amount\n    \n    return total_cost\n\nans = solution()"
    ],
    "616e7eb6274e4b9f80158e3a237118cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for weights\n    elephant, cow, horse, pig = symbols('elephant cow horse pig')\n\n    # System of equations based on the problem statement\n    equation1 = Eq(2 * elephant, 5 * cow)\n    equation2 = Eq(4 * cow, 3 * horse)\n    equation3 = Eq(3 * horse, 5 * pig)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (elephant, cow, horse, pig))\n\n    # Calculate how many pigs weigh as much as 8 elephants\n    weight_of_8_elephants = 8 * solutions[elephant]\n\n    # Since 3 horses are as heavy as 5 pigs, we can find how many pigs\n    # weigh as much as a single horse\n    pigs_per_horse = 5 / 3\n\n    # Since 4 cows weigh as much as 3 horses, we can find how many pigs\n    # weigh as much as a single cow\n    pigs_per_cow = pigs_per_horse * (3 / 4)\n\n    # Since 2 elephants weigh as much as 5 cows, we can find how many pigs\n    # weigh as much as a single elephant\n    pigs_per_elephant = pigs_per_cow * (5 / 2)\n\n    # Calculate the total number of pigs that weigh as much as 8 elephants\n    num_pigs = weight_of_8_elephants / solutions[pig]\n\n    return int(num_pigs)\n\nans = solution()"
    ],
    "995ae0debbe74e3ca36d61e2bc8db3d4": [
        "def solution():\n    total_weight_for_5_boxes = 350\n    total_weight_for_3_boxes = (total_weight_for_5_boxes / 5) * 3\n    return total_weight_for_3_boxes\n\nans = solution()"
    ],
    "58a07f22b6ae4e54bc49c3b1f8bc18b8": [
        "def solution():\n    ans = 2.4 * 7 - (6.8 - 7 / 10)\n    return ans\n\nans = solution()"
    ],
    "f73e444fccf74dffa657783361eaec4a": [
        "from math import factorial\n\ndef solution():\n    # Since the comics must be together, we treat them as a single unit.\n    # We do the same for the fictions.\n    # This means, we have 2 units to arrange on the shelf.\n    # There are 2! ways to arrange these 2 units.\n    unit_arrangements = factorial(2)\n    \n    # Within the comics unit, we have 4 comics, and they can be arranged in 4! ways.\n    comics_arrangements = factorial(4)\n    \n    # Similarly, within the fictions unit, we have 6 fictions, and they can be arranged in 6! ways.\n    fictions_arrangements = factorial(6)\n    \n    # The total number of arrangements is the product of these possibilities.\n    total_arrangements = unit_arrangements * comics_arrangements * fictions_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "7ead04e31502472f99c0ca926b39ba6f": [
        "from math import factorial as fact\n\ndef solution():\n    # Function to calculate permutations\n    def permutations(n, k):\n        return fact(n) // fact(n - k)\n\n    # 4 dancing performances splits the singing into 5 sections (DsDsDsDs), where s represents where singing performances can go\n    # Each section must contain at least one singing performance. We have 6 performances to distribute in these 5 sections.\n    sing_left = 6 - 5  # We place 1 singing performance in each section first\n\n    # Now, we distribute the remaining singing performances into the 5 sections\n    # This can be done in \"sing_left + 5 - 1 choose sing_left\" ways (stars and bars theorem)\n    # where we choose positions for the remaining singing performances\n    sing_combinations = permutations(sing_left + 5 - 1, sing_left)\n\n    # The singing performances within each section can be arranged in any order\n    singing_permutations = fact(6)\n    \n    # The 4 dancing performances can be arranged in any order amongst themselves\n    dancing_permutations = fact(4)\n    \n    # Total arrangements\n    total_arrangements = sing_combinations * singing_permutations * dancing_permutations\n\n    return total_arrangements\n\nans = solution()"
    ],
    "325dbb02dff7405f9292450c4e4cc0df": [
        "def solution():\n    points_total = 155\n    justin_advantage = 15\n\n    # Let's say Dora answered 'd' questions correctly, so she gets 10*d points from them.\n    # Dora thus gets -5*(10-d) points from the rest (10 - d) questions, which she answered incorrectly or skipped.\n    # So, Dora's total points = 10*d - 5*(10 - d).\n    # Justin got 15 points more than Dora, so his total points = (10*d - 5*(10 - d)) + 15.\n    # Together they scored 155 points, so (10*d - 5*(10 - d)) + (10*d - 5*(10 - d)) + 15 = 155.\n\n    # Now, let's solve for 'd':\n    for d in range(11):  # Dora could answer 0 to 10 questions correctly.\n        dora_points = 10 * d - 5 * (10 - d)\n        justin_points = dora_points + justin_advantage\n        if dora_points + justin_points == points_total:\n            return d\n\nans = solution()"
    ],
    "2636ac2e0f8a4fe4b34c78f1070efed0": [
        "def solution():\n    total_length = 250\n    used_length = 180\n    number_of_pieces = 10\n    \n    remaining_length = total_length - used_length\n    length_per_piece = remaining_length / number_of_pieces\n    \n    return length_per_piece\n\nans = solution()"
    ],
    "b46ebbe765bd4ec282a9d4cddc1aaae1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let L be the time Lee takes to finish the job alone\n    # Let N be the time Nancy takes to finish the job alone\n    L, N = symbols('L N')\n\n    # Lee and Nancy working together finish in 10 hours\n    equation1 = Eq((1/L + 1/N), 1/10)\n    \n    # Lee working for 6 hours and Nancy working for 20 hours finish the job\n    equation2 = Eq(6/L + 20/N, 1)\n\n    # Solve the system of equations for L and N\n    solutions = solve((equation1, equation2), (L, N))\n\n    return solutions[N]\n\nans = solution()"
    ],
    "03472dc686454fea90ff512c5ee5c03f": [
        "def solution():\n    # Given ratio of coffee to milk is 3:8\n    coffee_ratio = 3\n    milk_ratio = 8\n\n    # Given the amount of coffee used is 6 litres\n    coffee_amount = 6\n\n    # Calculate the total amount of Latte\n    # Total parts in the ratio\n    total_parts = coffee_ratio + milk_ratio\n\n    # Amount of Latte per part\n    amount_per_part = coffee_amount / coffee_ratio\n    \n    # Total amount of Latte\n    total_amount_latte = amount_per_part * total_parts\n\n    return total_amount_latte\n\nans = solution()"
    ],
    "558947a4413a469d810b676273f6d771": [
        "def solution():\n    for num in range(1, 20):\n        if num % 4 == 3 and num % 5 == 4:\n            return num\n\nans = solution()"
    ],
    "3eb0547b332f4b4cbda72d04972e652b": [
        "def solution():\n    return 45 / 100 * 80\n\nans = solution()"
    ],
    "edcff11e678a491588a876c850626fd8": [
        "def solution():\n    remaining_after_second_stop = 22\n    \n    # At the second stop, one third got off, so 2/3 were left which is 22\n    remaining_after_first_stop = (remaining_after_second_stop * 3) / 2\n\n    # At the first stop, two fifths got off, so 3/5 were left\n    original_passengers = (remaining_after_first_stop * 5) / 3\n    \n    return int(original_passengers)\n\nans = solution()"
    ],
    "73eb429b39444b6784a10591bacf3800": [
        "from math import comb\n\ndef solution():\n    num_flavours = 7\n    num_doughnuts = 2\n\n    ans = comb(num_flavours, num_doughnuts)\n\n    return ans\n\nans = solution()"
    ],
    "e09e01d9f1ee46fd9759c4157d7cb3cd": [
        "def solution():\n    # Let x be the average number of candies sold by each group in class B.\n    # Let y be the number of groups in class B.\n\n    # According to the problem statement, we have the following equations:\n    # (3 * 12 + y * x) / (3 + y) = 8\n    # To find the average candies sold by each group in class B, we solve for x:\n    # (36 + y * x) = 8 * (3 + y)\n    # 36 + y * x = 24 + 8y\n    # y * x = 24 + 8y - 36\n    # y * x = 8y - 12\n    # Since y = 4 (4 groups in class B), we substitute y to find x:\n    # 4 * x = 8 * 4 - 12\n    # 4 * x = 32 - 12\n    # 4 * x = 20\n    # x = 20 / 4\n    # x = 5\n    # Therefore, each group in Class B sold 5 candies on average.\n    \n    x = (8 * 4 - 12) / 4\n    return x\n\nans = solution()"
    ],
    "6bf07e1e42d0448f94f431aced05a8af": [
        "from math import comb\n\ndef solution():\n    return comb(10, 2)\n\nans = solution()"
    ],
    "bb50e26a7c3b4ac39e82395f0fbd0d95": [
        "def solution():\n    from math import gcd\n    return gcd(gcd(6, 9), 18)\n\nans = solution()"
    ],
    "c6adf9f4ee8d4ab6b37166fa2ee565c7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    white, milk, dark = symbols('white milk dark')\n\n    ratio_white_milk = Eq(white / milk, 3 / 7)\n    ratio_milk_dark = Eq(milk / dark, 7 / 5)\n    difference_dark_white = Eq(dark - white, 8)\n\n    solutions = solve((ratio_white_milk, ratio_milk_dark, difference_dark_white), (white, milk, dark))\n\n    return solutions[milk]\n\nans = solution()"
    ],
    "fd6b3a86acd14b529b51cdd518e9a4a8": [
        "def solution():\n    big_square_side = 6\n    small_square_side = 3\n\n    num_small_squares = (big_square_side // small_square_side) ** 2\n\n    return num_small_squares\n\nans = solution()"
    ],
    "938d2bcb3f644872a707547c2058d4a7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_students = symbols('total_students')\n    \n    equation = Eq(1/4 * total_students + 3 + (1/3 * (total_students - (1/4 * total_students + 3)) - 3), total_students - 25)\n    \n    total = solve(equation, total_students)\n    \n    return total[0]\n\nans = solution()"
    ],
    "e8b01adb4f7d4d8cbff0e3c9d3bc098f": [
        "def solution():\n    meters = 70.24\n    centimeters_per_meter = 100\n    centimeters = meters * centimeters_per_meter\n    return centimeters\n\nans = solution()"
    ],
    "271b87d6fd084f7eaa3b6cae9b7ba2b5": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 0 and num % 7 == 0:\n            return num\n\nans = solution()"
    ],
    "2c9bb3658d544a4ab8fdb08d93091cca": [
        "def solution():\n    red_balls = 5  # initial number of red balls\n    green_balls = 10  # initial number of green balls\n    target_probability = 1 / 3  # target probability for picking a green ball\n\n    # We need to find the number of red balls to add (x) such that:\n    # P(green) = green_balls / (green_balls + red_balls + x) = 1/3\n    # Solving for x gives us: x = 3 * green_balls - red_balls\n\n    x = 3 * green_balls - red_balls  # calculate the number of red balls to be added\n    return x\n\nans = solution()"
    ],
    "5371e511c53e4a5f8747fe8e3a5e87ad": [
        "def solution():\n    return 12 * 3 * 50\n\nans = solution()"
    ],
    "44b8a79ef3104647b9810c583a5a4c21": [
        "def solution():\n    # Avril spends 5p which is one-quarter of her money\n    # Let's denote the total amount of money Avril had as 'total_money'\n    # According to the problem, 1/4 of Avril's total money equals 5p,\n    # therefore total_money = 5p * 4\n\n    total_money = 5 * 4  # Multiply by 4 because 5p is one-quarter of her money\n    \n    return total_money\n\nans = solution()"
    ],
    "a9ff37e5065046b585071011b2edb0c3": [
        "def solution():\n    total_cost = 25 + 10\n    amount_paid = 50\n    change = amount_paid - total_cost\n    return change\n\nans = solution()"
    ],
    "6657a223a619480aabc4ab2e4d50e627": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sam, peter = symbols('sam peter')\n    \n    # Sam Sam had 40 stickers more than Peter\n    equation1 = Eq(sam, peter + 40)\n    \n    # Sam gave 20% of his stickers to Peter\n    # Peter's stickers after receiving 20% from Sam\n    peter_after = peter + 0.20 * sam\n    \n    # Peter gave 25% of his stickers to Sam\n    # Sam's stickers after receiving 25% of Peter's updated amount\n    sam_after = sam - 0.20 * sam + 0.25 * peter_after\n    \n    # In the end, Sam had 96 stickers more than Peter\n    equation2 = Eq(sam_after, peter_after + 96)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sam, peter))\n\n    return solutions[peter]\n\nans = solution()"
    ],
    "b24dd75457e8421e98afe8366bd50107": [
        "def solution():\n    count = 0\n    for d1 in range(1, 7):\n        for d2 in range(1, 7):\n            for d3 in range(1, 7):\n                if d1 != d2 and d2 != d3 and d1 != d3 and d1 + d2 + d3 == 12:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "c969df7dcbf546bcbc2a769e7568a5df": [
        "def solution():\n    # One's digit pattern for powers of 32: 2, 4, 8, 6 (repeats every 4)\n    # Since 33 % 4 == 1, the one's digit of 32^33 is the first in this pattern, which is 2.\n    ones_digit_32_33 = 2\n    \n    # One's digit pattern for powers of 22: 2, 4, 8, 6 (repeats every 4)\n    # Since 29 % 4 == 1, the one's digit of 22^29 is the first in this pattern, which is 2.\n    ones_digit_22_29 = 2\n    \n    # The one's digit in the final answer is the difference between the one's digits of {32^33} and {22^29}\n    ans = (ones_digit_32_33 - ones_digit_22_29) % 10  # Using modulus to ensure it's a non-negative single digit\n    \n    return ans\n\nans = solution()"
    ],
    "5fe02e26ce5e42fc93b9699b286adec3": [
        "def solution():\n    num_fruits = 2\n    num_vegetables = 3\n    num_combinations = num_fruits * num_vegetables\n    return num_combinations\n\nans = solution()"
    ],
    "3020fb600b944914a5d9fcd520cae6fd": [
        "def count_digit_6(n):\n    count = 0\n    for i in range(1, n+1):\n        count += str(i).count('6')\n    return count\n\ndef solution():\n    low = 0\n    high = 1000  # Arbitrary higher limit that is sure to contain the answer\n    while low < high:\n        mid = (low + high) // 2\n        if count_digit_6(mid) < 18:\n            low = mid + 1\n        else:\n            high = mid\n    return high if count_digit_6(high) == 18 else -1\n\nans = solution()"
    ],
    "524308c13c044993b5bf5bba992cdbb7": [
        "def solution():\n    return 4619 + 457 + 88\n\nans = solution()"
    ],
    "b5f0243f080b48f7ba4d7a62e9120e41": [
        "def solution():\n    # Cross multiply to find the missing number\n    missing_number = (4 * 81) / 9\n    return missing_number\n\nans = solution()"
    ],
    "3d6760aa4d044cbc825d82a834e51780": [
        "def solution():\n    height = 40\n    jump_up = 5\n    slide_down = 3\n    jump_count = 0\n    current_height = 0\n\n    while current_height < height:\n        jump_count += 1\n        current_height += jump_up\n        # After every 2 jumps, the monkey slides down\n        if jump_count % 2 == 0:\n            current_height -= slide_down\n\n    return jump_count\n\nans = solution()"
    ],
    "22e56c50744347a3be314d81fcaa4a39": [
        "def solution():\n    ans = sum([(2 * i) ** 3 / (2 * i * (2 * i + 1) * (2 * i + 2)) for i in range(1, 2013)])\n    ans += 1 / 4026\n    return ans\n\nans = solution()"
    ],
    "f68d71c9bc684cafa24d741e381775bb": [
        "def solution():\n    common_difference = 21 - 15\n    last_term = 39\n    next_term = last_term + common_difference\n    return next_term\n\nans = solution()"
    ],
    "7492b9e26fc448699eab170daa00a7e4": [
        "def solution():\n    ans = []\n    # Pattern: 5n - 1, where n is a natural number.\n    for i in range(1, 100):\n        candidate = 5 * i - 1\n        # Check if candidate is less than 100\n        if candidate < 100:\n            # Check if candidate is a square number and is divisible by 16\n            if int(candidate**0.5)**2 == candidate and candidate % 16 == 0:\n                ans.append(candidate)\n        else:\n            break  # No need to check numbers beyond 100\n    return ans[0] if ans else None\n\nans = solution()"
    ],
    "3fe260109d4545118d6fa5fb6542ba93": [
        "def solution():\n    total_questions = 80\n    correct_mark = 4\n    wrong_deduction = 2\n    total_score = 152\n\n    # Let x be the number of correct answers\n    # Then, (total_questions - x) will be the number of wrong/unanswered questions\n    \n    # 4x - 2(total_questions - x) = total_score\n    # 4x - 2 * 80 + 2x = 152\n    # 6x = 152 + 2 * 80\n    # x = (152 + 160) / 6\n    \n    x = (total_score + wrong_deduction * total_questions) / (correct_mark + wrong_deduction)\n    \n    return int(x)\n\nans = solution()"
    ],
    "79173ac47d4446a7a4b25de9f562a87c": [
        "def solution():\n    cans_in_6_days = 42\n    days = 9\n\n    cans_per_day = cans_in_6_days / 6\n    cans_in_9_days = cans_per_day * days\n\n    return cans_in_9_days\n\nans = solution()"
    ],
    "c58f946556534129afb051e96256c03c": [
        "def solution():\n    # Concept: Each person needs to get an equal part of the sausages.\n    # We need to divide each sausage into 24 parts for equal sharing.\n    # Instead of cutting each sausage into 24 individual parts, we arrange them in a row\n    # and make cuts that pass through all sausages at once.\n    # This means we need just one cut for each person (24 total) minus 1,\n    # because the last cut would not be necessary as it would be the end of the last sausage.\n\n    total_people = 24\n    cuts_required = total_people - 1\n\n    return cuts_required\n\nans = solution()"
    ],
    "6ba4e21d59274d4aab0481cae22611d3": [
        "from math import factorial\n\ndef solution():\n    total_letters = len(\"RAINBOW\")\n    total_vowels = len(\"AI\")\n    total_consonants = total_letters - total_vowels\n    \n    # Total permutations without any restriction\n    total_permutations = factorial(total_letters)\n    \n    # Permutations where vowels are always together\n    # Considered as a single item: V + RNBW, where V = AI\n    vowels_together = factorial(total_vowels) * factorial(total_consonants + 1)\n    \n    # Subtracting the permutations where vowels are together from the total\n    ans = total_permutations - vowels_together\n    \n    return ans\n\nans = solution()"
    ],
    "b399219fb06d458cbe46dd2b1df7cb15": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')  # Let A be the initial amount of water in container A and B in container B\n\n    # Container A had 350 mL more water than container B originally\n    equation1 = Eq(A, B + 350)\n\n    # After spilling 500 mL, container A has A - 500, and container B has twice that amount\n    equation2 = Eq(B, 2 * (A - 500))\n\n    # Solve the system of equations for A and B\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "26af7f86bc8d46ac94cf787333d3fd91": [
        "def solution():\n    from math import gcd\n\n    # Calculate the differences between the numbers\n    diff_39_51 = abs(39 - 51)\n    diff_51_147 = abs(51 - 147)\n    diff_39_147 = abs(39 - 147)\n\n    # Greatest Common Divisor of the differences will give the required integer\n    ans = gcd(gcd(diff_39_51, diff_51_147), diff_39_147)\n\n    return ans\n\nans = solution()"
    ],
    "7b4fffccc9d443f6bae39d698e210c9a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # represent Wendy's and Vivien's current ages\n    wendy, vivien = symbols('wendy vivien')\n    \n    # Wendy is twice as old as Vivien\n    equation1 = Eq(wendy, 2 * vivien)\n    \n    # Vivien was 1/4 as old as Wendy 10 years ago\n    equation2 = Eq(vivien - 10, (wendy - 10) / 4)\n    \n    # solve the equations\n    ages = solve((equation1, equation2), (wendy, vivien))\n    \n    # Wendy's age in 5 years' time\n    wendys_age_in_5_years = ages[wendy] + 5\n    \n    return wendys_age_in_5_years\n\nans = solution()"
    ],
    "13c1aaafec5c4eb2a546b2823b7c9da0": [
        "def solution():\n    ans = 3 / 8\n    return ans\n\nans = solution()"
    ],
    "fa07d0a580554d999b6611baedc3f30f": [
        "def solution():\n    pages = 325\n    if pages < 10:\n        digits = pages\n    elif pages < 100:\n        digits = (pages - 9) * 2 + 9\n    else:\n        digits = (pages - 99) * 3 + 9 * 2 + 90\n    return digits\n\nans = solution()"
    ],
    "fc84e91f2444473ea06eee0510e38067": [
        "def solution():\n    lovelle_spoke_to = 5\n    others_spoke_to_each_other = 12\n    total_interactions = lovelle_spoke_to * 3 + others_spoke_to_each_other * 3\n    lovelle_interactions = 3 * (lovelle_spoke_to + 1)  # Lovelle said 3 sentences to each of the 5 people plus herself\n    total_team_members = (total_interactions - lovelle_interactions) // 3 + 1  # Each member says 3 sentences including Lovelle\n    return total_team_members\n\nans = solution()"
    ],
    "0d3504aeda6446b2821326f127f1ec2d": [
        "def solution():\n    ans = 81 + 81 / 9 + 110\n    return ans\n\nans = solution()"
    ],
    "46cef24404be44039ae2dc1b54fadeb2": [
        "def solution():\n    first_week = 2140\n    second_week = first_week - 320\n    third_week = second_week - 210\n\n    total_tickets = first_week + second_week + third_week\n    \n    return total_tickets\n\nans = solution()"
    ],
    "fdb8c2ece83d4d068bfb7949b80be75f": [
        "def solution():\n    ans = 58 + 127\n    return ans\n\nans = solution()"
    ],
    "cf5ba5b483a144138738a1737ed5a419": [
        "from itertools import permutations\nfrom math import factorial\n\ndef solution():\n    word = \"STATISTIC\"\n    total_permutations = factorial(len(word)) // (factorial(3) * factorial(3) * factorial(2))  # Divide by factorial of identical letters\n\n    # Count permutations where T's are together.\n    t_together_count = 0\n    temp_word = word.replace('T', '') + 'TT'\n    for perm in set(permutations(temp_word)):\n        if 'TT' in ''.join(perm):\n            t_together_count += 1\n\n    # Subtract permutations with T's together from the total to get the answer.\n    ans = total_permutations - t_together_count\n    return ans\n\nans = solution()"
    ],
    "3330453138ae4958abd914a2a7448912": [
        "def solution():\n    total_pieces = 450\n    pieces_per_hour = 50\n\n    time_needed = total_pieces / pieces_per_hour\n\n    return time_needed\n\nans = solution()"
    ],
    "ab88cfc915d14fbb80689295c573dfcb": [
        "def solution():\n    for total in range(1, 1000):  # We do not know the upper bound, but we use a large number for demonstration.\n        remaining_after_music_lesson = total - 2\n        shared_at_break = remaining_after_music_lesson // 3\n        remaining_after_break = remaining_after_music_lesson - shared_at_break\n        if remaining_after_break % 4 == 0:  # Checking if the remaining can be equally divided in 4 lessons.\n            return total\n\nans = solution()"
    ],
    "81087fa894824da4b6c11846677ddcec": [
        "def solution():\n    return round(418, -1)\n\nans = solution()"
    ],
    "36b223a5a83d47b19a34d4a0c5a1649d": [
        "def solution():\n    ans = 17 + 18 + 29 + 6\n    return ans\n\nans = solution()"
    ],
    "308a277543c04ae090ebdf3f5bdc0324": [
        "def solution():\n    return (2018 - 20 + 18) // 8\n\nans = solution()"
    ],
    "6f69d6a468eb423cb027c930d2635209": [
        "def solution():\n    return 527 * 8\n\nans = solution()"
    ],
    "7aa2c65cbce244dcaa12d38ff857c220": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for Sarah and Mark's Pokemon cards\n    sarah, mark = symbols('sarah mark')\n    \n    # Equation 1: Sarah had $20 more Pokemon cards than Mark before buying new cards\n    equation1 = Eq(sarah, mark + 20)\n    \n    # Equation 2: After buying 16 extra Pokemon cards, Sarah had 3 times more Pokemon cards than Mark\n    equation2 = Eq(sarah + 16, 3 * mark)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (sarah, mark))\n    \n    # Sarah's Pokemon cards before buying new ones\n    return solutions[sarah]\n\nans = solution()"
    ],
    "6e38f6f4ee8843d096766411ae11499d": [
        "def solution():\n    return 2.98 * 23\n\nans = solution()"
    ],
    "8f01d238435847a7a31b2925c68c14ab": [
        "def solution():\n    # First chest can be opened with any of the 9 keys\n    attempts_for_1st_chest = 9\n    # Second chest can be opened with any of the remaining 8 keys\n    attempts_for_2nd_chest = 8\n    # Third chest can be opened with any of the remaining 7 keys\n    attempts_for_3rd_chest = 7\n    # Fourth chest can be opened with any of the remaining 6 keys\n    attempts_for_4th_chest = 6\n    \n    # Total attempts is the sum of the individual attempts\n    total_attempts = (attempts_for_1st_chest + \n                      attempts_for_2nd_chest + \n                      attempts_for_3rd_chest + \n                      attempts_for_4th_chest)\n    return total_attempts\n\nans = solution()"
    ],
    "51e3e0dca7794d3eaec40de5cb8e99fa": [
        "def solution():\n    ans = sum(i**2 for i in range(1, 26, 2))\n    return ans\n\nans = solution()"
    ],
    "17b66351b21c4cb391ca2267e3a54abf": [
        "def solution():\n    for number in range(99, 9, -1):\n        if number % 3 == 0 and number % 5 == 0:\n            return number\n\nans = solution()"
    ],
    "ab508b1e2f9a4215994ac2d9ef293ffd": [
        "def solution():\n    # Since the numbers change systematically, we can analyze the pattern:\n    # The difference between consecutive numbers is +500, -200, +500, ...\n    # So, the missing number should be -200 from the previous one (3745).\n    prev_number = 3745\n    difference = -200\n    missing_number = prev_number + difference\n\n    return missing_number\n\nans = solution()"
    ],
    "9691b4fae60c4d1e9e827ad0a388037a": [
        "def solution():\n    return 15 / (1/7)\n\nans = solution()"
    ],
    "c96e5aeffc5c4914b430832baafb7a02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    h = symbols('h')\n    equation = Eq(2 * h, 25 + h)\n\n    solution = solve(equation, h)\n\n    return solution[0]\n\nans = solution()"
    ],
    "36eb6fb5682347a586edc281a6c0df91": [
        "def solution():\n    initial_value = 20000\n    depreciation_rate = 0.9\n    years = 6\n\n    final_value = initial_value * (depreciation_rate ** years)\n\n    return final_value\n\nans = solution()"
    ],
    "8abec5f9b93a4a2eb3f0ab042e5a2ec4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    first_hour, second_hour = symbols('first_hour second_hour')\n    \n    total_hours = Eq(first_hour + second_hour, 40)\n    equality_condition = Eq(first_hour + 26, second_hour)\n    \n    solutions = solve((total_hours, equality_condition), (first_hour, second_hour))\n    \n    return solutions[second_hour]\n\nans = solution()"
    ],
    "28ab82b7bb864d0cae94f2ab3cd7c918": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    men, women = symbols('men women')\n    \n    # 4 times as many women as men\n    equation1 = Eq(women, 4 * men)\n    \n    # total mini cupcakes eaten\n    equation2 = Eq(2 * women + 5 * men, 182)\n    \n    # solve the system of equations\n    solutions = solve((equation1, equation2), (men, women))\n    \n    return solutions[women]\n\nans = solution()"
    ],
    "fb6a59597d654291bed01b4df12ecc2a": [
        "def solution():\n    # Each coin is 1.85 cm in diameter.\n    # Since they are placed in a row and touching each other, the total length of 11 coins\n    # will be the length of 10 gaps (since 11 coins share 10 gaps) plus the diameter of one coin.\n    diameter = 1.85\n    num_coins = 11\n    # Subtracting 1 from num_coins because we are looking for the number of gaps between coins\n    total_length = (num_coins - 1) * diameter + diameter\n    \n    return total_length\n\nans = solution()"
    ],
    "a98be4f6b8d9491eb39649d9e6370466": [
        "def solution():\n    number = 5345\n    rounded_number = round(number, -2)\n    return rounded_number\n\nans = solution()"
    ],
    "870378fe08e54c25879633bc63dcfb58": [
        "def solution():\n    n = 14\n    a1 = 5\n    d = 3\n    an = a1 + (n - 1) * d\n    sum_sequence = (n * (a1 + an)) / 2\n    return sum_sequence\n\nans = solution()"
    ],
    "935623bcdc6a4872838561b5773ef917": [
        "def solution():\n    # Cross-multiply to find the value of the unknown box (□)\n    return (3 * 20) // 12\n\nans = solution()"
    ],
    "888087113ad04b5893f98edb9c00188d": [
        "def solution():\n    return 12 * (15 - 9) + 24 // (10 - 6)\n\nans = solution()"
    ],
    "0e58b9cb1b3b4b438f3c51f0ee11f3f3": [
        "def solution():\n    participants = 10\n    handshakes = (participants * (participants - 1)) // 2\n    return handshakes\n\nans = solution()"
    ],
    "46fe46fdf5be405f973b8d4e6c7447ae": [
        "from math import factorial\n\ndef solution():\n    num_people = 8\n    # For a circular table, fix one person's position and arrange the remaining (n-1)!\n    num_ways = factorial(num_people - 1)\n    return num_ways\n\nans = solution()"
    ],
    "ccf6b106f5b54dbc953e3d9d6e9d4019": [
        "def solution():\n    morning_temp = -5\n    night_temp = 10\n    temp_difference = night_temp - morning_temp\n    return temp_difference\n\nans = solution()"
    ],
    "c3ccc050c32c44daa5991bb6f2a6ba89": [
        "def solution():\n    ans = 25 * 123 * 0.4\n    return ans\n\nans = solution()"
    ],
    "3ff6ebc4090643778a1addb47fc34433": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    initial_ants = symbols('initial_ants')\n    \n    equation = Eq(initial_ants * (1 - 3/4) * (1 - 2/5) + 185, 2 * initial_ants)\n    \n    sol = solve(equation, initial_ants)\n    \n    return sol[0]\n\nans = solution()"
    ],
    "15bb7f3dbdea4fa191d64a8c757e2591": [
        "def solution():\n    sandra_current_age = 8\n    mother_current_age = sandra_current_age + 33\n    sandra_age_2_years_ago = sandra_current_age - 2\n    mother_age_2_years_ago = mother_current_age - 2\n    \n    age_difference_2_years_ago = mother_age_2_years_ago - sandra_age_2_years_ago\n    \n    return age_difference_2_years_ago\n\nans = solution()"
    ],
    "218eba99b87c41d18d1865559215bc59": [
        "def solution():\n    book_cost = 13\n    books_day1 = 89\n    books_day2 = 11\n\n    total_cost = book_cost * (books_day1 + books_day2)\n\n    return total_cost\n\nans = solution()"
    ],
    "9223b2da325349b8b26286bfe0d69c61": [
        "def solution():\n    # The last digit of powers of 2 cycles every 4 (2 -> 4 -> 8 -> 6 -> 2)\n    # The last digit of powers of 3 cycles every 4 (3 -> 9 -> 7 -> 1 -> 3)\n    # Therefore, we need to find the last digit of the 2017th number in the cycle\n    last_digit_2 = [2, 4, 8, 6]\n    last_digit_3 = [3, 9, 7, 1]\n    \n    # Since 2017 % 4 == 1, we take the first element from both cycles\n    last_digit_2 = last_digit_2[(2017 % 4) - 1]\n    last_digit_3 = last_digit_3[(2017 % 4) - 1]\n    \n    # Calculate the last digit of the product\n    last_digit_product = (last_digit_2 * last_digit_3) % 10\n    \n    return last_digit_product\n\nans = solution()"
    ],
    "adf1208d41db4a14bf12a4808bccc462": [
        "def solution():\n    return 6342 // 7\n\nans = solution()"
    ],
    "4ad9c8bc9fdb42738d2d58bfbd0f8c29": [
        "def solution():\n    n = 8  # The next position in the sequence (sequence starts at position 1 with 1**2)\n    next_number = n ** 2  # The sequence represents square numbers (1^2, 2^2, 3^2, ...)\n    return next_number\n\nans = solution()"
    ],
    "ec254d781c2b43cfab681f9a4da37327": [
        "def solution():\n    pens_per_friend = 23\n    number_of_friends = 42\n    total_pens = pens_per_friend * number_of_friends\n    return total_pens\n\nans = solution()"
    ],
    "a59e62d9c9954410934bd68af788363b": [
        "def solution():\n    def generate_num(n):\n        number = 1\n        for _ in range(n - 1):\n            number = number * 2 + 4\n            if number >= 100:\n                number %= 100\n        return number\n\n    ans = generate_num(2022)\n    return ans\n\nans = solution()"
    ],
    "7dd4045d492549698d37a5863045d780": [
        "def solution():\n    ans = 312 + 9\n    return ans\n\nans = solution()"
    ],
    "a2b3614814354adfabe59be257d8e75b": [
        "def solution():\n    from sympy import isprime\n    \n    for a in range(2, 41):\n        if isprime(a):\n            # 3a + 7b = 41 -> b = (41 - 3a) / 7\n            b = (41 - 3 * a) / 7\n            if b.is_integer() and isprime(b):\n                return int(a + b)\n\nans = solution()"
    ],
    "1307cafce9d24303b397ab789e178e8a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let a be the first term of the arithmetic progression and d be the common difference\n    a, d = symbols('a d')\n\n    # The first four terms: a, a+d, a+2d, a+3d\n    # The sum of the first four terms: a + (a+d) + (a+2d) + (a+3d)\n    sum_first_four = 4*a + 6*d\n\n    # The last four terms: a+4d, a+5d, a+6d, a+7d\n    # The sum of the last four terms: (a+4d) + (a+5d) + (a+6d) + (a+7d)\n    sum_last_four = 4*a + 22*d\n\n    # Equation based on the question\n    equation = Eq(sum_first_four + 32, sum_last_four)\n\n    # Solve the equation for d\n    solution = solve(equation, d)\n\n    return solution[d]\n\nans = solution()"
    ],
    "4e46f2beb27349e6aa3f6d1b29e68cab": [
        "def solution():\n    num1 = 4.5\n    num2 = 10.3\n    midpoint = (num1 + num2) / 2\n    return midpoint\n\nans = solution()"
    ],
    "2dca95dfad284b9387bbcee7d41b7a7d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    n = symbols('n')\n    equation = Eq(32/n, n/2)\n\n    sol = solve(equation, n)\n\n    return sol\n\nans = solution()"
    ],
    "cf24e8570c5f445681de61cc8e392341": [
        "def solution():\n    # Calculate Least Common Multiple (LCM) of the flashing rates\n    red_flash_rate = 4\n    green_flash_rate = 6\n\n    # Since the LCM of 4 and 6 is 12 (because 4 x 3 = 12 and 6 x 2 = 12),\n    # both lights will flash together every 12/60 minutes = 1/5 minutes\n    lcm_flashes_per_minute =60/12\n\n    # Calculate number of times they flash together in one hour\n    # Both lights flash at the same instant on every multiple of the LCM within the hour\n    flashes_in_hour = 1 * lcm_flashes_per_minute\n\n    # Including the first and the last time\n    flashes_in_hour += 1\n\n    return int(flashes_in_hour)\n\nans = solution()"
    ],
    "0ddb927d100f4ec0b3038de3ef7a76be": [
        "def solution():\n    # Jalen sold the sofa at $6500 with a profit of 30%.\n    selling_price = 6500\n    profit_percent = 30\n\n    # Calculate the cost price using the profit percentage\n    cost_price = selling_price / (1 + profit_percent / 100)\n\n    # Now we need to calculate the profit percentage if the profit is $5000.\n    # New selling price with $5000 profit\n    new_selling_price = cost_price + 5000\n\n    # New profit percentage\n    new_profit_percent = ((new_selling_price - cost_price) / cost_price) * 100\n\n    return new_profit_percent\n\nans = solution()"
    ],
    "ea94212bd8754f72b8001d195d361ee0": [
        "def solution():\n    n = 8.2 * 1000  # Convert kilograms to grams\n    return n\n\nans = solution()"
    ],
    "51adf37d19ad431c8fff66b81f840b33": [
        "from math import factorial\n\ndef solution():\n    letters = \"EARTH\"\n    num_ways = factorial(len(letters))\n    return num_ways\n\nans = solution()"
    ],
    "1e29620d8c1546499923e5051d3708fa": [
        "def solution():\n    # If 3/5 of the drink is water, then 2/5 of the drink is juice.\n    # Given 120ml is 2/5 of the drink, we find the total volume of the drink.\n    total_volume_per_bottle = (120 / 2) * 5\n\n    # Now we calculate the volume of water per bottle, which is 3/5 of the total volume.\n    water_volume_per_bottle = (total_volume_per_bottle * 3) / 5\n\n    # Finally, we calculate the water needed for 6 bottles.\n    water_needed_for_6_bottles = water_volume_per_bottle * 6\n\n    return water_needed_for_6_bottles\n\nans = solution()"
    ],
    "fc9c893a6de2407d928994eaaedf78a9": [
        "def solution():\n    return 4 * 18 * 25\n\nans = solution()"
    ],
    "3bd51f5982c940ddbbde362e9af86b8e": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 5):\n        s, e, n, d, m, o, r, y = *perm[0:2], *perm[2:5], 0\n        send = 1000 * s + 100 * e + 10 * n + d\n        more = 1000 * m + 100 * o + 10 * r + e\n        money = 10000 * m + 1000 * o + 100 * n + 10 * e + y\n        if send + more == money:\n            return money\n    return None\n\nans = solution()"
    ],
    "32cddd410fc54087979e0acde6f71066": [
        "from math import factorial\n\ndef solution():\n    # Total items to arrange: 2 bells, 2 stars, 2 red balls, 1 green ball\n    total_items = 2 + 2 + 2 + 1\n    # Factorial of the total number of items\n    total_permutations = factorial(total_items)\n    # Divide by the factorial of the number of identical items to avoid overcounting\n    arrangements = total_permutations // (factorial(2) * factorial(2) * factorial(2))\n    return arrangements\n\nans = solution()"
    ],
    "f0f847c95e5f466d90b8e462be6ed071": [
        "def solution():\n    simon_speed = 150\n    friend_speed = 200\n    simon_run_speed = simon_speed * 2\n    walking_time = 10\n\n    # Calculate distance walked by both before Simon runs back\n    distance_simon = simon_speed * walking_time\n    distance_friend = friend_speed * walking_time\n\n    # Calculate the time Simon takes to run back to school\n    time_simon_run_back = distance_simon / simon_run_speed\n    \n    # Calculate additional distance friend walks while Simon is running back to school\n    additional_distance_friend = friend_speed * time_simon_run_back\n\n    # Total distance from Simon's friend when he reaches school\n    total_distance = distance_friend + additional_distance_friend\n\n    return total_distance\n\nans = solution()"
    ],
    "2a228cd17f4e409e9bc77a0ccc4c9809": [
        "def solution():\n    initial_volume = 5           # 5 liters\n    container_factor = 0.25      # 0.25 times the size of the dispenser\n    cup_volume_ml = 150          # volume of one cup in ml\n    num_cups = 14                # number of cups\n\n    container_volume = initial_volume * container_factor\n    cup_volume_liters = (cup_volume_ml * num_cups) / 1000  # convert ml to liters\n\n    remaining_water = initial_volume - container_volume - cup_volume_liters\n\n    return remaining_water\n\nans = solution()"
    ],
    "1664d9ce104d45fd8be662f12fc279a0": [
        "def solution():\n    # This problem is a classic puzzle usually solved using a greedy algorithm strategy.\n    \n    # The critical point is understanding that the slowest person should move as little as possible,\n    # hence they should only cross the bridge once with the support of the fastest person.\n    \n    # Let's denote time spend by Eddie, Jack, Rose and Mary respectively.\n    times = [1, 2, 5, 10]\n    \n    # Following the optimum strategy:\n    # Step 1: Eddie and Jack cross -> 2 minutes (2 min total)\n    # Step 2: Eddie returns -> 1 minute  (3 min total)\n    # Step 3: Rose and Mary cross -> 10 minutes (13 min total)\n    # Step 4: Jack returns -> 2 minutes  (15 min total)\n    # Step 5: Eddie and Jack cross -> 2 minutes (17 min total)\n    \n    # Total time taken will be 17 minutes.\n    \n    return 17\n\nans = solution()"
    ],
    "02456ecae03a47dab61beed2cc4c0b15": [
        "def solution():\n    n = 0\n    for i in range(100):\n        if i % 7 == 0:\n            n = i\n    return n\n\nans = solution()"
    ],
    "fa00622124e242f3b8c0fe92c2d39c73": [
        "def solution():\n    from math import factorial\n    from sympy import symbols\n\n    n = 7\n    d = symbols('d', integer=True)\n\n    # Create a list of derangement numbers for positions from 0 to our friend count.\n    d_list = [1, 0]  # Starting values for d(0) = 1 and d(1) = 0\n    for i in range(2, n + 1):\n        # Derangement recursive formula: d(n) = (n - 1) * (d(n - 1) + d(n - 2))\n        d_list.append((i - 1) * (d_list[i - 1] + d_list[i - 2]))\n\n    # Assign the derangement number for 7 positions.\n    d = d_list[n]\n\n    return d\n\nans = solution()"
    ],
    "3adf2f6e8afc4a6ca82c84688afc78b5": [
        "def solution():\n    harry_speed_ratio = 3\n    ginny_speed_ratio = 4\n    harry_time_minutes = 24\n\n    ginny_time_minutes = (harry_time_minutes / harry_speed_ratio) * ginny_speed_ratio\n\n    return ginny_time_minutes\n\nans = solution()"
    ],
    "6433bb0ce3b84294a9f9739ddd7a9ca5": [
        "def solution():\n    for x in range(10):\n        for y in range(10):\n            num = int(f\"2{x}{y}335\")\n            if num % 99 == 0:\n                return num\n\nans = solution()"
    ],
    "bd690baeb49d4336869943efade96813": [
        "def solution():\n    ans = 5 / (1/4)\n    return ans\n\nans = solution()"
    ],
    "244f808ad1cc4d13a675289a3ecd9a1a": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('5')\n    return count\n\nans = solution()"
    ],
    "0555563c570c465e86a95b3ddf408f78": [
        "def solution():\n    ans = 828 // 9\n    return ans\n\nans = solution()"
    ],
    "5fa23afcf49349ac9cd5d88b0ce77585": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pages_per_day_original, total_pages = symbols('pages_per_day_original total_pages')\n\n    # Original rate work equation\n    equation1 = Eq(pages_per_day_original * 8, total_pages)\n    \n    # Increased rate work equation\n    equation2 = Eq((pages_per_day_original + 2) * (8 - 2), total_pages)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (pages_per_day_original, total_pages))\n\n    return solutions[total_pages]\n\nans = solution()"
    ],
    "b5a825d4f853436bb277e7f3866639d2": [
        "def solution():\n    a = 1  # Assigning a value to 'a' to create an algebraic expression\n    ans = (12*a) / 4 + (2*a) * 5\n    return ans\n\nans = solution()"
    ],
    "09b093e35e3d45d0b688e30cc6a0ba76": [
        "def solution():\n    # The house had increased in value by 10% to become £11,000 in the last year.\n    # Therefore, the value of the house before the increase was £11,000 / 1.1.\n    value_before_increase = 11000 / 1.1\n    \n    # Now, the house loses 10% of its value this year.\n    # Therefore, the new value of the house is 90% of the value before the increase.\n    new_value_this_year = value_before_increase * 0.9\n    \n    # The original price of the house (two years ago) is the value before the 10% increase.\n    original_price = value_before_increase\n    \n    # The amount of profit or loss comparing with the original price this year is\n    # the new value this year minus the original price.\n    profit_or_loss = new_value_this_year - original_price\n    \n    return profit_or_loss\n\nans = solution()"
    ],
    "c6905843d5c84d1896ee600c07cec573": [
        "def solution():\n    # Calculate the rate at which Pip bakes bread: loaves per minute\n    pip_rate = 5 / 20\n\n    # Calculate the rate at which Bud bakes bread: loaves per minute\n    bud_rate = 3 / 15\n\n    # Calculate the number of loaves baked by Pip in 40 minutes\n    pip_loaves_40_min = pip_rate * 40\n\n    # Calculate the number of loaves baked by Bud in 40 minutes\n    bud_loaves_40_min = bud_rate * 40\n\n    # Calculate the total number of loaves baked in 40 minutes\n    total_loaves = pip_loaves_40_min + bud_loaves_40_min\n\n    return total_loaves\n\nans = solution()"
    ],
    "bf44fa7967fe492d97b8a311fafdfaee": [
        "def solution():\n    # To ensure getting a pair of white socks,\n    # we have to consider the worst-case scenario where we pick every other color first\n    # Since there are 10 red and 10 black socks,\n    # Yohan could take all red and black socks before getting a white one.\n    # Therefore, he must take all 10 red socks and all 10 black socks.\n    # After that, he has to take 1 white sock,\n    # and the very next sock must be a white one to make a pair.\n    \n    max_socks = 10 + 10 + 1 + 1  # Red + Black + 1 White + 1 White to make a pair\n    return max_socks\n\nans = solution()"
    ],
    "fc738668235447c79203dcca2ce2a678": [
        "def solution():\n    d = 1  # Using a dummy variable for d\n    ans = (6 * d) + (5 * d) - d\n    return ans / d  # Dividing by d to get the coefficient in its simplest form\n\nans = solution()"
    ],
    "ceff5d5955364eabbd46a62f98797a05": [
        "def solution():\n    numbers = []\n    for i in range(1, 10):\n        numbers.extend([i] * (i + 2))\n    \n    numbers.sort()\n    median_index = len(numbers) // 2\n\n    if len(numbers) % 2 == 0:\n        return (numbers[median_index - 1] + numbers[median_index]) / 2\n    else:\n        return numbers[median_index]\n\nans = solution()"
    ],
    "06cae666e4524e0780eed7ff941bb6a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables for the red and white marbles\n    white = symbols('white')\n    red = 3 / 2 * white  # initial ratio is 3:2\n    pip_red = symbols('pip_red')\n\n    # After Pip adds red marbles, the ratio becomes 5:3\n    equation1 = Eq((red + pip_red) / white, 5 / 3)\n\n    # Bud adds white marbles, which is 100 more than pip_red, and the new ratio is 5:4\n    bud_white = pip_red + 100\n    equation2 = Eq((red + pip_red) / (white + bud_white), 5 / 4)\n\n    # Solve the two equations simultaneously\n    solutions = solve((equation1, equation2), (white, pip_red))\n\n    return solutions[white]\n\nans = solution()"
    ],
    "b90de1565c844c2d97a4ccdcf12c2aac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable for Jemma's number\n    jemma_number = symbols('jemma_number')\n\n    # Define the equation based on the problem statement\n    # (jemma_number + 3) * 5 = 35\n    equation = Eq((jemma_number + 3) * 5, 35)\n\n    # Solve the equation for Jemma's number\n    solution = solve(equation, jemma_number)\n\n    # Return the solution\n    return solution[0]\n\nans = solution()"
    ],
    "084167b934b34115b89c8d9ae9a3b4a2": [
        "def solution():\n    # Let's denote the original number of cookies as x.\n    # According to the problem:\n    # x - 3/8*x - 1/6*x = 33\n    # Combine like terms:\n    # (1 - 3/8 - 1/6) * x = 33\n    # Find a common denominator (24) for fractions and calculate the new fraction:\n    # (24/24 - 9/24 - 4/24) * x = 33\n    # Simplify the fractions:\n    # (11/24) * x = 33\n    # Now, divide both sides by 11/24 to solve for x:\n    # x = 33 / (11/24)\n    # x = 33 * (24/11)\n    # Calculate the value of x:\n    x = 33 * (24/11)\n\n    return int(x)\n\nans = solution()"
    ],
    "d6e7284ab38c41e8ade59a5718682ded": [
        "def solution():\n    barrel_volume = 120\n    bucket_volume = 8\n    number_of_buckets = barrel_volume // bucket_volume\n    return number_of_buckets\n\nans = solution()"
    ],
    "d782b43878bb4cf1bafe5b83f82438e2": [
        "def solution():\n    total_pupils = 20\n    left_handed = total_pupils / 4\n    not_left_handed = total_pupils - left_handed\n    return int(not_left_handed)\n\nans = solution()"
    ],
    "12bef96eae3c41e78b2c7c959b7cb247": [
        "def solution():\n    # May 5th is Monday (1 means Monday)\n    # Dates after 5th May and including 7th June.\n    days_in_may_after_5th = 31 - 5  # Days left in May after 5th\n    days_in_june = 7                # Days in June until 7th\n    \n    total_days = days_in_may_after_5th + days_in_june\n\n    # Since May 5th is Monday, May 11th will be the next Sunday and it's 6 days later\n    days_until_first_sunday = (7 - 1)  # 1 is Monday and 7 is Sunday\n    \n    # So there are total_days minus days_until_first_sunday days left before the final Sunday\n    remaining_days = total_days - days_until_first_sunday\n\n    # Every 7th day is a Sunday\n    sundays = 1 + (remaining_days // 7)  # Adding 1 for the first Sunday on May 11th\n    \n    return sundays\n\nans = solution()"
    ],
    "9034744a6a62443fa56a651ca2584ee4": [
        "def solution():\n    total_flour = 40  # total flour in kg\n    packets = 25      # number of small packets\n\n    flour_per_packet = total_flour / packets\n    return flour_per_packet\n\nans = solution()"
    ],
    "a63989af68494194bfb53a854e3665ba": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies, brownies = symbols('cookies brownies')\n    equation1 = Eq(cookies, 4/3 * (brownies - 6))\n    equation2 = Eq(cookies, 12/7 * brownies)\n\n    solutions = solve((equation1, equation2), (cookies, brownies))\n\n    return sum(solutions.values())\n\nans = solution()"
    ],
    "f4fc1897652e40b78918728180071644": [
        "def solution():\n    # Calculate the rate at which 4 companies can build the expressway per day\n    daily_build_rate_per_company = 900 / (4 * 5)\n    \n    # Calculate the total build rate for 6 companies\n    daily_build_rate_for_6_companies = daily_build_rate_per_company * 6\n    \n    # Calculate the number of days required for 5400m expressway\n    days = 5400 / daily_build_rate_for_6_companies\n    \n    return days\n\nans = solution()"
    ],
    "02ba9287f10746898f97cec009cbf38a": [
        "def solution():\n    # Buy at $10, sell at $20: profit = $20 - $10 = $10\n    first_profit = 20 - 10\n    \n    # Buy back at $30, sell at $40: profit = $40 - $30 = $10\n    second_profit = 40 - 30\n    \n    # Total profit is the sum of the first and second profits\n    total_profit = first_profit + second_profit\n    \n    return total_profit\n\nans = solution()"
    ],
    "ac5436a25e0442f2a16bce013c5fb452": [
        "def solution():\n    adam_spent = 93\n    adam_tickets = 6\n    claire_spent = 124\n    \n    price_per_ticket = adam_spent / adam_tickets\n    claire_tickets = claire_spent / price_per_ticket\n    \n    return int(claire_tickets)\n\nans = solution()"
    ],
    "1a3522fba8a14fd7bb05a7ed2ce9622e": [
        "def solution():\n    # Given that the number is divisible by 3, the sum of its digits must be divisible by 3.\n    # Also, for a number to be divisible by 4, the last two digits must form a number divisible by 4.\n    \n    for k in range(10):  # Since 'K' is a single digit, it ranges from 0 to 9.\n        # Form the number by replacing 'K' and calculate the sum of digits for divisibility by 3\n        sum_of_digits = 5 + k + 2 + 7 + k\n        # Check if the sum of digits is divisible by 3\n        if sum_of_digits % 3 == 0:\n            # The last two digits of the number (7K) should be divisible by 4.\n            # Forming the last two digits:\n            last_two_digits = 70 + k\n            # Check if the last two digits form a number which is divisible by 4\n            if last_two_digits % 4 == 0:\n                return k  # Since the conditions are satisfied, return K.\n\nans = solution()"
    ],
    "3ed7b46e44cc4f75b5c4f2b2c79caf4e": [
        "def solution():\n    nth_term = 25  # The 10th term\n    n = 10  # The term number is 10\n    common_difference = 3  # Common difference in the sequence\n\n    # Using the formula for the nth term of an arithmetic sequence: a_n = a_1 + (n - 1) * d\n    # where a_n is the nth term, a_1 is the first term, and d is the common difference.\n    # We rearrange the formula to solve for a_1:\n    # a_1 = a_n - (n - 1) * d\n    first_term = nth_term - (n - 1) * common_difference\n\n    return first_term\n\nans = solution()"
    ],
    "a978c7f92cdf44f1942f967781ad3207": [
        "def solution():\n    sum_of_squares = sum(i**2 for i in range(1, 21))\n    ans = sum(sum(j**2 for j in range(1, i+1)) for i in range(1, 21))\n    return ans\n\nans = solution()"
    ],
    "49021dd3aa7f4c03a9353bfc19e4a911": [
        "def solution():\n    total_shoes = 9 * 2  # 9 pairs of shoes, 2 shoes in each pair\n    time_per_shoe = 2    # 2 minutes per shoe\n    cobblers = 2         # number of cobblers\n    \n    # Each cobbler cleans one shoe at a time, so they can clean two shoes in parallel.\n    # We calculate the total time by dividing the total number of shoes by the number of cobblers\n    # since they work in parallel, and then multiplying by the time it takes to clean one shoe.\n    shortest_time = (total_shoes / cobblers) * time_per_shoe\n    \n    return shortest_time\n\nans = solution()"
    ],
    "a77bd217c8b244528cdb996bbf73a46b": [
        "def solution():\n    total_cookies = 118\n    cookies_per_packet = 7\n    packets_needed = -(-total_cookies // cookies_per_packet) # Ceiling division\n    return packets_needed\n\nans = solution()"
    ],
    "f3712fb16f9f469bab602738d8fc9cc5": [
        "def solution():\n    total_sum = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8  # Sum of all cards\n    player_one_sum = 23\n    player_two_sum = total_sum - player_one_sum  # Remaining sum for Player Two\n    \n    # Since Player Two can't have any of Player One's cards, we'll sort possible cards he may have\n    possible_cards = sorted(range(1, 9), reverse=True)\n    \n    # Start by giving Player Two the largest cards until his remaining sum is less than the next card\n    player_two_cards = []\n    for card in possible_cards:\n        if player_two_sum - card >= 0:\n            player_two_cards.append(card)\n            player_two_sum -= card\n    \n    # The highest card Player Two could have\n    return player_two_cards[0]\n\nans = solution()"
    ],
    "7039740729c84c8b8342e7002a2ca25f": [
        "def solution():\n    numerator = 2019 + 2018 * 2020\n    denominator = 2019 * 2020 - 1\n    # The expression can be simplified as 2019/2019 = 1\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "83a40f2b75d945d99e8db96a35ed071c": [
        "from math import comb\n\ndef solution():\n    return comb(6, 2)\n\nans = solution()"
    ],
    "54675caae3be46bdbb99950ef3e25cf4": [
        "def solution():\n    total_questions = 50\n    unattempted_questions = 3\n    attempted_questions = total_questions - unattempted_questions\n    total_score = 168\n    correct_score = 4\n    wrong_score = -1\n\n    # Assume all attempted questions were answered correctly\n    max_correct = attempted_questions\n    max_score = max_correct * correct_score\n\n    # Find excess score over actual score, which gives the total penalty points\n    excess_score = max_score - total_score\n\n    # Since each wrong answer gives a penalty of 5 points (4 points lost for the correct answer and an additional 1 point deducted),\n    # we divide the excess score by 5 to find the number of wrong questions\n    wrong_questions = excess_score // (correct_score - wrong_score)\n\n    # The correct questions are the remaining attempted questions\n    correct_questions = attempted_questions - wrong_questions\n\n    return correct_questions\n\nans = solution()"
    ],
    "e99a2fad50b8447bb1d94893b6d71077": [
        "def solution():\n    sum_of_odds = sum(range(1, 20, 2))\n    return sum_of_odds\n\nans = solution()"
    ],
    "77bd08c2a453492a87c56b21199104f7": [
        "def solution():\n    luna_dumplings = 17\n    lucy_dumplings = 11\n    dumplings_to_give = (luna_dumplings - lucy_dumplings) // 2\n    return dumplings_to_give\n\nans = solution()"
    ],
    "2b1da842ccca44b1832de397d53e2758": [
        "def solution():\n    two_thirds_of_number = 24\n    number = (two_thirds_of_number * 3) / 2\n    three_quarters_of_number = (number * 3) / 4\n    return three_quarters_of_number\n\nans = solution()"
    ],
    "2963cf233b46447fb5c825b6196c2767": [
        "def solution():\n    ans = 14 * 7 * 2\n    return ans\n\nans = solution()"
    ],
    "b8daef005cc44c47badd2aa9cc85b532": [
        "def solution():\n    ans = 543 - 284\n    return ans\n\nans = solution()"
    ],
    "79ee6ea187d04728affd0de95d4a7018": [
        "def solution():\n    from itertools import permutations\n\n    for perm in permutations(range(10), 4):\n        B, D, E, C = perm\n        if B == 0 or D == 0:  # Skip if B or D are zero, causing non 4-digit numbers\n            continue\n        CBCD = C * 1000 + B * 100 + C * 10 + D\n        CDBC = C * 1000 + D * 100 + B * 10 + C\n        BDEC = B * 1000 + D * 100 + E * 10 + C\n        if CBCD + CDBC == BDEC:\n            return BDEC\n\nans = solution()"
    ],
    "fa8616efa25d4f8299991f1f8407ebf5": [
        "def solution():\n    from math import lcm\n    # Find least common multiple of pack sizes\n    pack_lcm = lcm(6, 8, 9, 15)\n\n    # Find minimum number of packs required\n    min_packs = 1000 // pack_lcm\n    if 1000 % pack_lcm != 0:\n        min_packs += 1\n    \n    # Calculate the minimum number of markers needed\n    min_markers = min_packs * pack_lcm\n    \n    return min_markers\n\nans = solution()"
    ],
    "eeede3cca47a4853803fb6e1834b3f28": [
        "def solution():\n    ans = 193 * 72\n    return ans\n\nans = solution()"
    ],
    "0f973003177e403a90be16bda5983322": [
        "from math import factorial\n\ndef solution():\n    # Count the occurrence of each letter in 'CHALLENGE'\n    # and considering A, E, E as a single entity 'AE'\n    letter_counts = {'C':1, 'H':1, 'L':1, 'N':1, 'G':1, 'AE':1}\n    \n    # Count vowels as a single entity so total entities become 7 (6 consonants + 'AE')\n    total_entities = sum(letter_counts.values())\n    \n    # Calculate the factorial for the total entities for arrangement\n    entity_arrangements = factorial(total_entities)\n    \n    # Since there are two E's in 'AE' group, they can be swapped among themselves\n    within_group_arrangements = factorial(2)\n    \n    ans = entity_arrangements * within_group_arrangements\n    \n    return ans\n\n# Call the function and store the result in the variable `ans`\nans = solution()"
    ],
    "69645c35c8a9498f96d6bd29db22e3cd": [
        "def solution():\n    dresses_per_day_per_tailor = 2\n    number_of_seamstresses = 2\n    number_of_days = 9\n\n    total_dresses = dresses_per_day_per_tailor * number_of_seamstresses * number_of_days\n\n    return total_dresses\n\nans = solution()"
    ],
    "ddadda8c0ee24b048475b1ed01e97866": [
        "def solution():\n    ans = 77.5 * 0.52 + 5.2 * 2.25\n    return ans\n\nans = solution()"
    ],
    "ab2b472b178c42e1be0cb06a1e3c1731": [
        "def solution():\n    n = 50\n    while True:\n        n += 1\n        if n % 13 == 0:\n            return n\n\nans = solution()"
    ],
    "5382dfa2d3874f6fb2d80352fe7491cf": [
        "def solution():\n    total_price = (4 * 5) + (1 * 10) + (5 * 12)  # Total revenue from all cakes\n    total_cakes = 4 + 1 + 5                     # Total number of cakes\n\n    average_price = total_price / total_cakes   # Average selling price of each cake\n\n    return average_price\n\nans = solution()"
    ],
    "7d6b5eb612604e62842cf23e7effa510": [
        "def solution():\n    total_cost = 104.10\n    people = 6\n\n    cost_per_person = total_cost / people\n\n    return round(cost_per_person, 2)\n\nans = solution()"
    ],
    "f87d0f3c9c544ecc84257dfd2c08ff82": [
        "def solution():\n    jan_to_mar_spend = 450 * 3\n    apr_to_jul_spend = 350 * 4\n    aug_to_oct_spend = 1250\n    nov_to_dec_spend = 400 * 2\n    \n    total_spend = jan_to_mar_spend + apr_to_jul_spend + aug_to_oct_spend + nov_to_dec_spend\n    average_spend_per_month = total_spend / 12\n    \n    return average_spend_per_month\n\nans = solution()"
    ],
    "cd83fc2a714c467082ec8c0821d5ca86": [
        "def solution():\n    ans = 2 * 25 * 123\n    return ans\n\nans = solution()"
    ],
    "172e8369614e4791ae4f2791ae3d9b80": [
        "def solution():\n    return 143 + 22 + 157\n\nans = solution()"
    ],
    "08152a7dda6848a09cff15a407c5e8c7": [
        "def solution():\n    remainder = 7\n    # Let's start with the smallest possible divisor and quotient (1), but since the remainder is 7,\n    # the smallest possible divisor and quotient must be greater than 7.\n    # We try to find the smallest dividend such that when divided by divisor gives divisor as quotient with remainder 7.\n    divisor = remainder + 1\n    # Start trying from divisor + 1 because divisor and remainder cannot be the same\n    while True:\n        dividend = divisor * divisor + remainder\n        quotient = dividend // divisor\n        if quotient == divisor:\n            return dividend\n        divisor += 1\n\nans = solution()"
    ],
    "45d5eb20e04045f59025c5f269819d6d": [
        "def solution():\n    initial_value = 50000\n    depreciation_rate = 0.15\n    years = 2\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n\n    return final_value\n\nans = solution()"
    ],
    "9addac3e46e44e54a72dccaf472b32a3": [
        "def solution():\n    first_term = 10\n    difference = 2\n    n = 12\n\n    nth_term = first_term + (n - 1) * difference\n\n    return nth_term\n\nans = solution()"
    ],
    "bd1ac5cdb71d4b9895407f5f400fb9e6": [
        "def solution():\n    cube_roots = [i**3 for i in range(1, 246)]\n    for p in range(1, 246):\n        if 245 * p in cube_roots:\n            return p\n\nans = solution()"
    ],
    "74584a19c48347f89526c8b68de4bad8": [
        "def solution():\n    total_pages = 600\n    pages_per_day = 20\n\n    days_needed = total_pages / pages_per_day\n\n    return int(days_needed)\n\nans = solution()"
    ],
    "64fc79ccfc074918a3acf3065f946315": [
        "def solution():\n    visitors_per_minute = 10\n    check_in_per_entrance = 25\n\n    # Since with one entrance, there is no one waiting in line after 16 min,\n    # the number of visitors in 16 minutes is equal to the number of check-ins through one entrance.\n    total_visitors_16_min = visitors_per_minute * 16\n    check_ins_1_entrance = check_in_per_entrance * 16\n\n    # Since there are no visitors waiting after 16 minutes with one entrance,\n    # the rate of visitors joining the line equals the rate of check-ins.\n    # This means that with two entrances, the check-in rate will double,\n    # hence it will take half the time to clear the same number of visitors.\n    time_with_2_entrances = 16 / 2\n\n    return int(time_with_2_entrances)\n\nans = solution()"
    ],
    "6e011ddf528c41a2841e18229bc4ef7a": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "825ebd9e4b2e4171951ba63f6748b0ed": [
        "def solution():\n    return 6**2 - 4**2\n\nans = solution()"
    ],
    "d6ee9c6fc34d4dcc804163dd5f791636": [
        "def solution():\n    return 2014 + 998\n\nans = solution()"
    ],
    "9b8fa831793640388f99903b6da9cfa0": [
        "def solution():\n    shermaine_rulers = 142\n    elvis_rulers = shermaine_rulers + 157\n    claudia_rulers = elvis_rulers + 202\n    total_rulers = shermaine_rulers + elvis_rulers + claudia_rulers\n    return total_rulers\n\nans = solution()"
    ],
    "73720d8a53844a81a014f335f06e561a": [
        "def solution():\n    money = 100\n    book_cost = money * 0.10\n    remaining_money_after_book = money - book_cost\n    dvd_cost = remaining_money_after_book * 0.20\n    remaining_money = remaining_money_after_book - dvd_cost\n    return remaining_money\n\nans = solution()"
    ],
    "e76a8423b47d4b808a5aeadbbdc02127": [
        "def solution():\n    decimal_part = '1' * 1000  # Since 1/3 in decimal form repeats 0.333..., the first 1000 digits will be '1's.\n    sum_of_digits = sum(int(digit) for digit in decimal_part)  # Sum the digits in the decimal part.\n    return sum_of_digits\n\nans = solution()"
    ],
    "babb3e967e7b4903b754afff7e3ac9af": [
        "def solution():\n    day_distance = 5\n    night_distance = 3\n    total_distance = 16\n    current_distance = 0\n    days = 0\n\n    while current_distance < total_distance:\n        days += 1\n        current_distance += day_distance\n        if current_distance >= total_distance:\n            break\n        current_distance -= night_distance\n    \n    return days\n\nans = solution()"
    ],
    "9223e7ed5d434394b8c1269d1e768459": [
        "def solution():\n    final_number = 34\n    added_number = 12\n\n    after_doubling = final_number - added_number\n    original_number = after_doubling / 2\n\n    return original_number\n\nans = solution()"
    ],
    "1488e869ebdf483eb9bb096cb73b1708": [
        "def solution():\n    scores = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    mean_score = sum(scores) / len(scores)\n    return mean_score\n\nans = solution()"
    ],
    "fd64eed080d74099adc2ffa22714239d": [
        "def solution():\n    ans = 8102 - 2018\n    return ans\n\nans = solution()"
    ],
    "5731ad5e696643829195d329db479a6b": [
        "def solution():\n    original_price = 80\n    discount_percentage = 10\n    discount_amount = original_price * (discount_percentage / 100)\n    final_price = original_price - discount_amount\n    return final_price\n\nans = solution()"
    ],
    "4e9945e556e74ffe91cb3030ad37baae": [
        "def solution():\n    # There are 3 types of fruits: apples (A), pears (P), and cherries (C).\n    # Each student can choose from 7 different combinations:\n    # A, P, C, AP, AC, PC, APC\n\n    # According to the Pigeonhole Principle, to ensure at least one combination is repeated,\n    # we need at least one more student than there are combinations.\n    # Thus, we need 7 + 1 students.\n\n    return 7 + 1\n\nans = solution()"
    ],
    "2d4a6c8599b4492b9b95d9d9b87446d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges_before, lemons = symbols('oranges_before lemons')\n    oranges_after = oranges_before - 48\n\n    equation1 = Eq(oranges_before / lemons, 3/5)\n    equation2 = Eq(oranges_after / lemons, 1/2)\n\n    solutions = solve((equation1, equation2), (oranges_before, lemons))\n    \n    return solutions[lemons]\n\nans = solution()"
    ],
    "dcae38ac969c4a158f8f8806395f093f": [
        "def solution():\n    burgers = 2\n    sides = 3\n    drinks = 5\n\n    combos = burgers * sides * drinks\n\n    return combos\n\nans = solution()"
    ],
    "d6816432b29549ef83897c88e2df4bca": [
        "def solution():\n    spent = 10  # 10p spent\n    part = 1 / 4  # One-quarter\n    total_money = spent / part  # Calculate the total money by dividing the amount spent by the fraction that represents the portion spent\n    return total_money\n\nans = solution()"
    ],
    "6af40f0ef07e4f66810e88983de37cf0": [
        "def solution():\n    legs_ducks = 3 * 2\n    legs_parrots = 2 * 2\n    legs_rabbit = 1 * 4\n    legs_cats = 4\n\n    total_legs_others = legs_ducks + legs_parrots + legs_rabbit\n    legs_cats_needed = 32 - total_legs_others\n\n    num_cats = legs_cats_needed / legs_cats\n\n    return int(num_cats)\n\nans = solution()"
    ],
    "74abfc1f309c4e35ab04f1a1d6695900": [
        "def solution():\n    return 818 - 271 - 18 + 64 - 29 + 36\n\nans = solution()"
    ],
    "5512327e08b64371a00550b6d22306bd": [
        "def solution():\n    from math import gcd\n\n    a_students = 45\n    b_students = 75\n    c_students = 210\n\n    # Find the greatest common divisor of the number of students\n    gcd_ab = gcd(a_students, b_students)\n    greatest_common_divisor = gcd(gcd_ab, c_students)\n\n    return greatest_common_divisor\n\nans = solution()"
    ],
    "b2352f675fd94fd2aa06d2b9fd4f2ba3": [
        "def solution():\n    from sympy import symbols, Eq, solve, simplify\n\n    cars, bikes, lorries = symbols('cars bikes lorries')\n    equation1 = Eq(cars, 4 / 3 * bikes)\n    equation2 = Eq(bikes, 1 / 4 * lorries + lorries)\n    equation3 = Eq((cars + bikes + lorries) % 2, 0)\n    possible_solutions = []\n\n    for lorry_count in range(1, 100):\n        # For each lorry count, calculate bike and car count\n        bike_count = simplify(lorry_count + lorry_count / 4)\n        car_count = simplify(4 / 3 * bike_count)\n\n        if car_count + bike_count + lorry_count < 100 and (car_count + bike_count + lorry_count) % 2 == 0:\n            possible_solutions.append((car_count, bike_count, lorry_count))\n\n    solutions = [(int(c), int(b), int(l)) for c, b, l in possible_solutions]\n\n    # assuming there's a unique solution based on constraints provided in the problem\n    return solutions[0] if solutions else None\n\nans = solution()"
    ],
    "ca8974b0e2b446cfbbdf59c9fa10f48f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    judys_age, fathers_age, years_ago = symbols('judys_age fathers_age years_ago')\n    \n    equation1 = Eq(fathers_age, judys_age + 33)\n    equation2 = Eq(judys_age + fathers_age, 63)\n    equation3 = Eq(fathers_age - years_ago, 4 * (judys_age - years_ago))\n    \n    solutions = solve((equation1, equation2, equation3), (judys_age, fathers_age, years_ago))\n    return solutions[years_ago]\n\nans = solution()"
    ],
    "d6c279a7a7694686a1864a5bf68f39e6": [
        "def solution():\n    from math import comb\n    # Number of teams\n    teams = 11\n    # Total matches in a round-robin where each team plays each other once\n    matches = comb(teams, 2)\n    \n    return matches\n\nans = solution()"
    ],
    "30a048071a8e4db6b6628b18c39b3e8f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (x - 1), 9 - 2 * (x + 1))\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "7ae0fef8de6c493cb2eee6482338c688": [
        "def solution():\n    def phi(a, b):\n        if a < 7:\n            return a + b * b\n        else:\n            return a - b\n    \n    inner_result = phi(8, 3)  # Compute 8Φ3 according to rule (2)\n    ans = phi(4, inner_result)  # Compute 4Φ(inner_result) according to rule (1)\n    return ans\n\nans = solution()"
    ],
    "16b3c8aa2d704da6a537f88f6fec0816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    rooms = symbols('rooms')\n    \n    # 4 people per room leads to 40 students without rooms\n    equation1 = Eq(4 * rooms + 40, 4 * (rooms + 1))  \n    \n    # 6 people per room leads to 24 beds vacant\n    equation2 = Eq(6 * rooms - 24, 6 * (rooms - 1))\n\n    solutions = solve((equation1, equation2), (rooms))\n\n    return solutions[rooms]\n\nans = solution()"
    ],
    "dad5d4611c204567a94ca9e6e9e3d5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    A, B = symbols('A B')\n    \n    equation1 = Eq(A, B + 25)\n    equation2 = Eq(A + 35, 6 * B)\n    \n    solutions = solve((equation1, equation2), (A, B))\n    \n    return solutions[A]\n\nans = solution()"
    ],
    "f7bdbfc9be95446a8cb7289c066d92b3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the current age of the older brother and y be the current age of the younger brother\n    x, y = symbols('x y')\n    \n    # When the older brother was y years old, the younger brother was 12\n    equation1 = Eq(x - y, y - 12)\n    \n    # When the younger brother becomes x years old, the older brother will be 27\n    equation2 = Eq(y + (x - y), 27)\n    \n    # Solve the system of equations\n    solved_ages = solve((equation1, equation2), (x, y))\n    \n    # Older brother's current age is x\n    return solved_ages[x]\n\nans = solution()"
    ],
    "10e0e482b8824984872affe8ce1e0490": [
        "def solution():\n    marker_quantities = [6, 8, 9, 15]\n    lcm = marker_quantities[0]\n\n    def get_lcm(x, y):\n        def gcd(a, b):\n            while b:\n                a, b = b, a % b\n            return a\n        return (x * y) // gcd(x, y)\n\n    for quantity in marker_quantities[1:]:\n        lcm = get_lcm(lcm, quantity)\n    \n    min_markers = lcm\n    while min_markers < 1000:\n        min_markers += lcm\n        \n    return min_markers\n\nans = solution()"
    ],
    "8822cb428e1f404e8f4004bb9e245353": [
        "def solution():\n    eaten_fraction = 3 / 5\n    sweets_eaten = 18\n    total_sweets = sweets_eaten / eaten_fraction\n    sweets_left = total_sweets - sweets_eaten\n    return int(sweets_left)\n\nans = solution()"
    ],
    "d21328403ccc4ef1888fbbd2ff71269e": [
        "def solution():\n    jane_current_age = 9\n    john_current_age = 5\n    jane_future_age = 15\n    years_until_jane_is_15 = jane_future_age - jane_current_age\n    john_future_age = john_current_age + years_until_jane_is_15\n    return john_future_age\n\nans = solution()"
    ],
    "70e335db4e004110b36ede05612ac93b": [
        "def solution():\n    for n in range(10, 21):\n        if 36 % n == 0 and n % 4 == 0:\n            return n\n\nans = solution()"
    ],
    "bcd8fb20c8b744e99ffa82607c24bb9d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((13 - x) ** 2, 25)\n\n    solutions = solve(equation, x)\n\n    return solutions\n\nans = solution()"
    ],
    "21b6aec5564b47a2b3f38fad58c06438": [
        "def solution():\n    return 9678 * 8\n\nans = solution()"
    ],
    "3f4b5d68e6a34a558a6a5627f763bf86": [
        "def solution():\n    # Given values\n    a10 = 23  # 10th term\n    a15 = 38  # 15th term\n    n = 102   # We need to find the 102nd term\n\n    # The common difference (d) is the difference divided by the number of terms between them\n    d = (a15 - a10) / (15 - 10)\n\n    # 10th term is given by a + 9d where a is the first term\n    # So the first term (a) is:\n    a = a10 - 9 * d\n\n    # The nth term of an arithmetic sequence is given by a + (n - 1)d\n    ans = a + (n - 1) * d\n\n    return ans\n\nans = solution()"
    ],
    "c4f58a5f4ee74d11a1ceefa03d4b0989": [
        "def solution():\n    part1 = 7 + (3 * 11)\n    part2 = (7 + 3) * 11\n    ans = part2 - part1\n    return ans\n\nans = solution()"
    ],
    "9c5276fb1c214521afb9cff714698795": [
        "def solution():\n    # Rate of tap X per minute\n    rate_x = 1 / 10\n    # Rate of taps X and Y together per minute\n    rate_x_and_y = 1 / 6\n    # Rate of tap Y per minute\n    rate_y = rate_x_and_y - rate_x\n    # Time for tap Y to fill the tank alone, rate_y is in min^-1, so we take the inverse\n    time_y = 1 / rate_y\n    return time_y\n\nans = solution()"
    ],
    "f9501133c3614a48a8b6a1577fb1a1db": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's define the symbols for the cost price (cp) and the marked price (mp)\n    cp = symbols('cp')\n    \n    # Create equations based on the problem statement\n    # The marked price is 20% above the cost price\n    mp = cp * 1.20\n    # The selling price is 80% of the marked price\n    sp = mp * 0.80\n    # The loss is the cost price minus the selling price, which is given as $40\n    loss_eq = Eq(cp - sp, 40)\n    \n    # Solve the equation for the cost price\n    solutions = solve(loss_eq, cp)\n    \n    return solutions[0]\n\nans = solution()"
    ],
    "e6fb8dbc811842a5bd4fa6371e5e2187": [
        "def solution():\n    like_apples = 20\n    like_strawberries = 30\n    like_both = 10\n    like_neither = 5\n\n    total_students = (like_apples + like_strawberries - like_both) + like_neither\n\n    return total_students\n\nans = solution()"
    ],
    "19f6f50448bf4f7a813675df0afe5ff5": [
        "def solution():\n    usual_price = 1050\n    discount = 0.12\n    discount_amount = usual_price * discount\n    final_price = usual_price - discount_amount\n    return final_price\n\nans = solution()"
    ],
    "7617a8045f5b4ff5b5324982a66889ea": [
        "def solution():\n    return 62 + 48 + 18 + 32\n\nans = solution()"
    ],
    "e34d46213408429baafffc5193541fcb": [
        "def solution():\n    for correct in range(11):\n        incorrect = 10 - correct\n        score = correct * 6 - incorrect * 2\n        if score == 44:\n            return correct\n\nans = solution()"
    ],
    "4052fcf1d3c045db91150181ba09abd4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of markers Xuanrui had at first\n    # Let y be the number of markers Yaokuan had at first\n    x, y = symbols('x y')\n\n    # Equation for the total markers they had at first\n    equation1 = Eq(x + y, 708)\n\n    # Equation for the number of markers left after transactions\n    equation2 = Eq(x - 532, (7 - 3) / 7 * y)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n\n    # Xuanrui's markers at first\n    return solutions[x]\n\nans = solution()"
    ],
    "bf4013af9d5b45968ef5e11b2c7e33c2": [
        "def solution():\n    factorial_sum = sum(factorial(i) for i in range(1, 9))\n    ans = factorial_sum % 100\n    return ans\n\nfrom math import factorial\nans = solution()"
    ],
    "f97121683f7348f08e4de57f11abcaed": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('4')\n    return count\n\nans = solution()"
    ],
    "44a59b6d17564f77996536b4fa6617a7": [
        "def solution():\n    ans = 3/10 + 1/100 + 7/1000\n    return ans\n\nans = solution()"
    ],
    "22d57fd8aceb477a89a51700a52e11c5": [
        "def solution():\n    volume_a = 300  # mL\n    concentration_a = 0.20  # 20%\n    volume_b = 300  # mL\n    concentration_b = 0.30  # 30%\n\n    sugar_a = volume_a * concentration_a\n    sugar_b = volume_b * concentration_b\n    total_sugar = sugar_a + sugar_b\n    total_volume = volume_a + volume_b\n    mixture_concentration = total_sugar / total_volume\n\n    return mixture_concentration\n\nans = solution()"
    ],
    "11ea9bd45a5646b0b52b444e218c2de9": [
        "def solution():\n    dollars = 1000\n    exchange_rate = 2.50  # 1 pound = $2.50\n\n    pounds = dollars / exchange_rate\n    return pounds\n\nans = solution()"
    ],
    "cfb3940b70b44b77b4051f6425ca4116": [
        "def solution():\n    total_notes = 95\n    final_two_notes = 175\n\n    # Let x be the number of $2 notes initially, and y be the number of $10 notes initially.\n    # We have two equations:\n    # x + y = total_notes (equation 1)\n    # x + 5*y = final_two_notes (equation 2)\n    # We can solve these equations for x and y.\n\n    # From equation 1, we get: y = total_notes - x\n    # Substituting y in equation 2, we get: x + 5*(total_notes - x) = final_two_notes\n    # Simplify it to find x:\n    # x + 5*total_notes - 5*x = final_two_notes\n    # 4*x = 5*total_notes - final_two_notes\n    # x = (5*total_notes - final_two_notes) / 4\n\n    x = (5*total_notes - final_two_notes) / 4\n\n    return int(x)\n\nans = solution()"
    ],
    "9e6ca5b654384e328bb7c1dbb3561114": [
        "def solution():\n    total_length = 540\n    head_length = 10\n    carriage_length = 27\n    distance_between = 1\n\n    carriages_with_distances = total_length - head_length\n    carriage_plus_distance = carriage_length + distance_between\n    \n    num_carriages = carriages_with_distances // carriage_plus_distance\n    \n    # Including the head of the train\n    num_carriages += 1\n\n    return num_carriages\n\nans = solution()"
    ],
    "1e1427d5ceba4320aee5afcaccc52125": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Declare the symbols for the unknown quantities\n    ahmad, ryan = symbols('ahmad ryan')\n\n    # System of equations based on the problem statement\n    # Equation 1: The total number of marbles\n    equation1 = Eq(ahmad + ryan, 1442)\n    # Equation 2: Ahmad has 6 times as many marbles as Ryan\n    equation2 = Eq(ahmad, 6 * ryan)\n\n    solutions = solve((equation1, equation2), (ahmad, ryan))\n\n    # Marbles after Ahmad gives some to Ryan for an equal amount\n    # Equalizing the number of marbles:\n    # Ahmad - x = Ryan + x => 2x = Ahmad - Ryan\n    # Where x is the number of marbles Ahmad has to give to Ryan\n    # Then x = (Ahmad - Ryan) / 2\n\n    x = (solutions[ahmad] - solutions[ryan]) / 2\n\n    return x\n\nans = solution()"
    ],
    "bd978d750b6e4729980ff669042abeea": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pen, pencil = symbols('pen pencil')\n    \n    equation1 = Eq(pen + pencil, 2.9)\n    equation2 = Eq(pen, pencil + 0.6)\n\n    solutions = solve((equation1, equation2), (pen, pencil))\n\n    return solutions[pen]\n\nans = solution()"
    ],
    "866545814d6e4615b2af1cbb207b8c44": [
        "def solution():\n    for correct in range(51):\n        incorrect = 50 - correct\n        score = correct * 2 - incorrect\n        if score == 82:\n            return correct\n\nans = solution()"
    ],
    "a9f0d9027e26479ba10780496a0c4d24": [
        "def solution():\n    x = 0  # Smallest whole number\n    while True:\n        # Check if (24x - 8) is divisible by 25 to satisfy the equation\n        if (24 * x - 8) % 25 == 0:\n            return x\n        x += 1\n\nans = solution()"
    ],
    "35d6ac2bebfe44ffa37211e279b87749": [
        "def solution():\n    for x in range(1, 10):\n        for y in range(10):\n            A = 10 * x + y\n            B = 2 * A\n            if B == 25 + 6 * A:\n                return A\n\nans = solution()"
    ],
    "90718dbaf0fd4ed89a5a4d96ad666df5": [
        "def solution():\n    count_ones = 0\n    count_tens = 0\n    count_hundreds = 0\n\n    # Count occurrences of 8 in ones place\n    for i in range(1, 289):\n        if i % 10 == 8:\n            count_ones += 1\n\n    # Count occurrences of 8 in tens place\n    for i in range(1, 289):\n        if (i % 100) // 10 == 8:\n            count_tens += 1\n\n    # Count occurrences of 8 in hundreds place\n    for i in range(1, 289):\n        if i // 100 == 8:\n            count_hundreds += 1\n\n    total_count = count_ones + count_tens + count_hundreds\n    return total_count\n\nans = solution()"
    ],
    "278b3ce4e6b040338ce029d381e86ebf": [
        "def solution():\n    from sympy import symbols, solve\n\n    triangle, square, circle, diamond = symbols('triangle square circle diamond')\n    equations = []\n    # ▲ + ▲ = ■ (Two triangles equal one square)\n    equations.append(triangle + triangle - square)\n    # ■ + ▲ = ● (One square plus one triangle equals one circle)\n    equations.append(square + triangle - circle)\n    # ♦ = ● + ■ + ▲ (One diamond equals one circle plus one square plus one triangle)\n    equations.append(diamond - (circle + square + triangle))\n\n    # Solve the system of equations\n    solutions = solve(equations)\n    # Calculate how many triangles are equal to one diamond\n    num_triangles_in_diamond = solutions[diamond] / solutions[triangle]\n\n    return num_triangles_in_diamond\n\nans = solution()"
    ],
    "a59668f1e93b4825ba207bf6e1c4f492": [
        "def solution():\n    # Calculate the price per kilogram for the 2.5 kg bag\n    price_per_kilo_bag1 = 5 / 2.5\n\n    # Calculate the price per kilogram for the 4 kg bag\n    price_per_kilo_bag2 = 7.70 / 4\n\n    # Compare the price per kilogram to find the better value\n    if price_per_kilo_bag1 < price_per_kilo_bag2:\n        return f'2.5kg bag at £5 is better value'\n    else:\n        return f'4kg bag at £7.70 is better value'\n\nans = solution()"
    ],
    "8fb6994898db4fa78cffadd0bf6a1ec7": [
        "def solution():\n    S_inverse = sum(1/k for k in range(2001, 2011))\n    S = 1 / S_inverse\n    return int(S)\n\nans = solution()"
    ],
    "01dd3259609c4a6da4fd5831e9936f4d": [
        "def solution():\n    original_price = 800\n    discount = 0.15 * original_price\n    price_after_discount = original_price - discount\n    increase = 0.15 * price_after_discount\n    final_price = price_after_discount + increase\n\n    return final_price\n\nans = solution()"
    ],
    "e7527c6eca0e41f7b5a274121821fab1": [
        "def solution():\n    ans = 521 - 173 - 127\n    return ans\n\nans = solution()"
    ],
    "d39880770cf44cc1b8953e1fa9f1233b": [
        "def solution():\n    num_books = 5\n    price_per_book = 4.50\n    total_cost = num_books * price_per_book\n    return total_cost\n\nans = solution()"
    ],
    "dac6db12c85f45c99ab167826c4098d6": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Using the Chinese Remainder Theorem\n    congruences = [(2, 4), (2, 5), (8, 9)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "ddf47a1b5bb549f3a5068ab88ce95d61": [
        "def solution():\n    return (3/4) * (2/5) * 1\n\nans = solution()"
    ],
    "547dd66262ab4fd8b89a202921fdd75e": [
        "def solution():\n    monday_pages = 280\n    tuesday_pages = monday_pages - 28\n    total_pages = monday_pages + tuesday_pages\n    return total_pages\n\nans = solution()"
    ],
    "a2e32a8bfee74449ac3c05a82c14f783": [
        "def solution():\n    ans = 365 - (19 + 65)\n    return ans\n\nans = solution()"
    ],
    "f321e52bafc84cfeaf82fee608fc2c47": [
        "def solution():\n    mass_one_fourth_full = 250\n    mass_three_fourth_full = 350\n\n    # Getting the mass of half of the content of the jar\n    # by taking the difference between three-fourth full and one-fourth full\n    mass_half_content = mass_three_fourth_full - mass_one_fourth_full\n\n    # Getting the total Marmite content by doubling the mass of half Marmite\n    total_marmite_mass = 2 * mass_half_content\n\n    # By subtracting total marmite mass from the mass when three-fourth full, \n    # we get the mass of the empty jar\n    empty_jar_mass = mass_three_fourth_full - (total_marmite_mass * 3 / 4)\n\n    return empty_jar_mass\n\nans = solution()"
    ],
    "6ba06bbd86ed47918a1f1d77269cfed8": [
        "def solution():\n    from math import lcm\n    return lcm(5, 10, 12)\n\nans = solution()"
    ],
    "94bd0c0ea38e484483c3d392ca25d206": [
        "def solution():\n    road_length = 60\n    interval = 10\n\n    # Trees will be planted at every interval of 10 meters, including both ends.\n    # The number of positions to plant trees is (road_length / interval) + 1\n    # Since trees will be planted on both sides, we multiply this number by 2.\n    trees_per_side = (road_length // interval) + 1\n    total_trees = trees_per_side * 2\n\n    return total_trees\n\nans = solution()"
    ],
    "3b8e61c8ea8e4ba78d0aca808cf223c9": [
        "def solution():\n    blocks_28 = 182\n    unit_height = blocks_28 / 28\n    \n    blocks_42 = unit_height * 42\n    return blocks_42\n\nans = solution()"
    ],
    "4bb30a08bef844b295fc45cdd2506df9": [
        "def solution():\n    bus_length = 5\n    distance_between_buses = 2\n    number_of_buses = 7\n\n    total_length = (number_of_buses * bus_length) + ((number_of_buses - 1) * distance_between_buses)\n\n    return total_length\n\nans = solution()"
    ],
    "78a5cb5509884246bd419bba61d02340": [
        "def solution():\n    ans = 45 * 7\n    return ans\n\nans = solution()"
    ],
    "166102618f9a4ea0b545a8ba6b224baa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    number = symbols('number')\n\n    mistaken_operation = Eq((number / 4) - 25, 2021)\n    correct_operation = 4 * number + 25\n\n    mistaken_solution = solve(mistaken_operation, number)\n    \n    correct_answer = correct_operation.subs(number, mistaken_solution[0])\n\n    return correct_answer\n\nans = solution()"
    ],
    "a92d9eb66c3b4acd8f2839b36fdd0e14": [
        "def solution():\n    return 4.8 * 5\n\nans = solution()"
    ],
    "fe3ec539b5a04bb7a24f12c0750720eb": [
        "def solution():\n    # The divisibility rule for 9 states that a number is divisible by 9 if the sum of its digits is divisible by 9.\n    # Here, the five-digit number is 2E3E2, so the sum of the digits is 2 + E + 3 + E + 2.\n    # Thus, we have: 2 + E + 3 + E + 2 = 2*(E + 3) + 4\n    # To find the value of E such that the sum is divisible by 9, we loop through the possible digits (0-9).\n    for E in range(10):\n        if (2 * (E + 3) + 4) % 9 == 0:\n            return E\n\nans = solution()"
    ],
    "5979a7958e5a49019259104db32617ae": [
        "def solution():\n    first_term = 106\n    last_term = 2019\n    num_terms = (last_term - first_term) // 1 + 1\n    \n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n    \n    return sum_of_sequence\n\nans = solution()"
    ],
    "1046c694c10a415381a568db27604763": [
        "def solution():\n    cost_price = 200\n    selling_price = cost_price * 1.50  # 50% above cost\n    price_after_discount = selling_price * (1 - 0.10)  # 10% Christmas discount\n    \n    profit = price_after_discount - cost_price\n    return profit\n\nans = solution()"
    ],
    "1be249dc19cb422a809047b2d7a80f6a": [
        "def solution():\n    # Given that x:5 = y:3, we can express this relationship using a proportion equation:\n    # x / 5 = y / 3\n    \n    # To find the value of y when x = 5:\n    x = 5\n    y = (3 / 5) * x  # Cross-multiplication of the proportion\n\n    # The relationship between x and y is directly proportional since they increase or decrease together.\n    proportionality = \"directly\"\n    answer_y = y\n\n    return proportionality, answer_y\n\nans = solution()"
    ],
    "0ff7cfe71371476695329b23de3069ac": [
        "def solution():\n    # assume the sequence starts with a1, a2, ..., a7\n    # we know that a4 = 6 and a6 = 15\n    # we also know that an = an-1 + an-2 for n > 2\n\n    # express a5 in terms of a3\n    # a5 = a4 + a3 = 6 + a3\n    # express a6 in terms of a3\n    # a6 = a5 + a4 = (6 + a3) + 6 = 15\n    # solve for a3\n    a3 = 15 - 12\n\n    # express a2 in terms of a3\n    # a4 = a3 + a2 = 6\n    # solve for a2\n    a2 = 6 - a3\n\n    # the first number a1 can now be found since\n    # a3 = a2 + a1\n    a1 = a3 - a2\n\n    # with a1 and a2 we can find a7\n    # a7 = a6 + a5 = 15 + (6 + a3)\n    ans = 15 + (6 + a3)\n\n    return ans\n\nans = solution()"
    ],
    "d54cf1582b9840d2832c444ed488a72a": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "6ddf66ac448548e690721ecb2b5f565e": [
        "def solution():\n    # Start from the largest 2-digit number and go downwards\n    # until a number is found that is divisible by both 3 and 5\n    for num in range(99, 9, -1):\n        if num % 3 == 0 and num % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "d346e6a28b64479882e6e011bb7a6f19": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((2*x + 3)/4 + (6 + 4*x)/3, (7*x + 22)/8)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "5a88150fabe34769918ee4dd88293fca": [
        "def solution():\n    m_squared = 0\n    n_squared = 0\n    students = 5  # Start with 5 students since 5 are left out initially\n    while True:\n        m_squared = students - 5\n        n_squared = students + 18\n        # Check if both m_squared and n_squared are perfect squares\n        if (m_squared**0.5).is_integer() and (n_squared**0.5).is_integer():\n            break\n        students += 1\n    return students - 5  # Subtract the 5 left out to get the original number\n\nans = solution()"
    ],
    "dd6d097a63594cca959d1e71d2d3ebea": [
        "def solution():\n    numbers = [9, 11, 8, 12, 7, 13, 6, 14, 5, 14]\n    return sum(numbers)\n\nans = solution()"
    ],
    "f4a44d5718564604b3aba4fefda53416": [
        "def solution():\n    num = 1\n    while True:\n        if num % 5 == 3 and num % 6 == 5:\n            return num\n        num += 1\n\nans = solution()"
    ],
    "9e9d512190c84daf805cb3e49be050a6": [
        "def solution():\n    from math import gcd\n\n    def find_gcd(x, y, z):\n        return gcd(gcd(x, y), z)\n\n    class_a = 12\n    class_b = 15\n    class_c = 18\n\n    ans = find_gcd(class_a, class_b, class_c)\n\n    return ans\n\nans = solution()"
    ],
    "03105f423b1347369d8ed85d1f00d475": [
        "def solution():\n    start_time = 5 * 60  # Convert 5 p.m. to minutes\n    badminton_duration = 45\n    jogging_duration = 30\n\n    end_time = start_time + badminton_duration + jogging_duration  # Total time in minutes\n    end_hour = end_time // 60\n    end_minutes = end_time % 60  # Get the remainder in minutes\n\n    # Since there are 12 hours on the clock and the start time is in PM, we check if we need to switch to PM or AM\n    period = 'p.m.' if end_hour < 12 or end_hour == 24 else 'a.m.'  \n    end_hour = end_hour if end_hour <= 12 else end_hour - 12  # Convert to 12-hour format\n\n    return f\"{end_hour}:{end_minutes:02d} {period}\"\n\nans = solution()"
    ],
    "ecd9405da0514df5b2a0f1179131079e": [
        "def solution():\n    original_average = 25\n    new_average = 22\n    total_numbers = 3\n\n    # Calculate the total sum based on the original average before changing the number.\n    original_sum = original_average * total_numbers\n\n    # Calculate the total sum after the change.\n    new_sum = new_average * total_numbers\n\n    # Calculate the difference between the sums before and after changing the number.\n    difference = original_sum - new_sum\n\n    # Since after changing one number to 16, the total sum decreased by `difference`,\n    # the original number must be `difference` more than 16.\n    original_number = 16 + difference\n\n    return original_number\n\nans = solution()"
    ],
    "57f1a73a3e564db985c24fecdf759cd6": [
        "def solution():\n    ans = (2 + 3)**2 + 4 * 5\n    return ans\n\nans = solution()"
    ],
    "34d25cf24d7949d780640e0194156dfe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    girls = symbols('girls')\n    boys = 36 - girls\n    \n    # Equation based on total average score\n    total_points = 36 * 89\n    girls_points = 88 * girls\n    boys_points = 91 * boys\n    \n    # Equation representing the total score\n    equation = Eq(girls_points + boys_points, total_points)\n    \n    # Solve the equation for the number of girls\n    girls_count = solve(equation, girls)\n    \n    return girls_count[0]\n\nans = solution()"
    ],
    "17d3038b31954df3beaf2a17eef6f2f2": [
        "def solution():\n    ans = 715 - 364\n    return ans\n\nans = solution()"
    ],
    "32cc18556b6c45a9b298776fc2cefc3a": [
        "def solution():\n    total_questions = 24  # all but one\n    score_for_correct = 4\n    score_for_incorrect = -2\n    target_score = 66\n\n    # Let's assume x is the number of correct answers and y is the number of incorrect answers.\n    # Then we have two equations:\n    # x + y = total_questions\n    # 4x - 2y = target_score\n    \n    # We can solve these equations using substitution or any other method (elimination, matrix, etc.)\n    # Let's use the substitution for simplicity:\n    # From the first equation: y = total_questions - x\n    # Substitute y in the second equation:\n    # 4x - 2*(total_questions - x) = target_score\n    # Simplify the equation to find x\n    \n    # 4x - 2*total_questions + 2x = target_score\n    # 6x - 2*total_questions = target_score\n    # 6x = target_score + 2*total_questions\n    # x = (target_score + 2*total_questions) / 6\n    \n    correct_answers = (target_score + 2 * total_questions) // 6\n    \n    return correct_answers\n\nans = solution()"
    ],
    "4a3bcfd145bb4a24aefa5c3766f7cbaa": [
        "def solution():\n    # To solve this question, we need to understand it's a graph theory problem where we consider the vertices and edges of a 3D shape.\n    # However, the question about specifics of the 3D shape (e.g., the type of polyhedron or which characteristics it has) is missing.\n    # Normally, we can use Euler's formula (V - E + F = 2 for convex polyhedra, where V is the number of vertices, E the number of edges, and F the number of faces) to relate the characteristics of the shape.\n    # However, since there is no specific shape and the details are missing, we cannot provide a numerical answer or implement the function further.\n\n    # Placeholder for the actual logic, which cannot be filled without additional information on the 3D shape in question.\n    ans = None\n    \n    return ans\n\nans = solution()"
    ],
    "b4c07ba5dcbe471282f64123c9e4bd81": [
        "def solution():\n    number_of_black_pens = 9\n    number_of_blue_pens = 4 * number_of_black_pens\n    number_of_green_pens = 2 * number_of_black_pens\n\n    total_pens = number_of_black_pens + number_of_blue_pens + number_of_green_pens\n    return total_pens\n\nans = solution()"
    ],
    "8dd4cfbce09b4b4ebc7f9f1a6f86de7d": [
        "def solution():\n    # David's solution\n    david_sugar = 800 * 0.05\n\n    # Eugene's solution\n    eugene_sugar = 200 * 0.30\n\n    # Felix's solution\n    felix_sugar = 300 * 0.10\n\n    # Total sugar\n    total_sugar = david_sugar + eugene_sugar + felix_sugar\n\n    # Total solution\n    total_solution = 800 + 200 + 300\n\n    # Concentration of resulting solution\n    concentration = (total_sugar / total_solution) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "f5a6c0d6715945a695ecf6dfbb64f92e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    Andrew, Gill = symbols('Andrew Gill')\n    \n    equation1 = Eq(Gill - Andrew, 18)\n    equation2 = Eq(Andrew + Gill, 62)\n\n    solutions = solve((equation1, equation2), (Andrew, Gill))\n\n    return solutions[Gill]\n\nans = solution()"
    ],
    "f6df3f11753e4cdc80268ae5f06e3ade": [
        "def solution():\n    total_volume = 20 + 30\n    fruit_juice_in_first = 20 * 0.35\n    fruit_juice_in_second = 30 * 0.60\n    total_fruit_juice = fruit_juice_in_first + fruit_juice_in_second\n    concentration = (total_fruit_juice / total_volume) * 100\n    return concentration\n\nans = solution()"
    ],
    "9e3c2c6854d3426e92fab24e9a0b03a3": [
        "from math import comb\n\ndef solution():\n    people = 4\n    handshakes = comb(people, 2)\n    return handshakes\n\nans = solution()"
    ],
    "718e8dda7ebd4d5fb3b2c9ce80ba10e6": [
        "def solution():\n    ans = 58 + 74\n    return ans\n\nans = solution()"
    ],
    "d01d33f6697441ebb3567f6b25f6068c": [
        "def solution():\n    ans = 3.8 + 59.6 - 12\n    return ans\n\nans = solution()"
    ],
    "cecb4b4d838e4a73937b529a2db06ceb": [
        "def solution():\n    cookies = 148\n    box_capacity = 9\n    boxes_needed = (cookies + box_capacity - 1) // box_capacity\n    return boxes_needed\n\nans = solution()"
    ],
    "bae752593a0041d5ad09bba75d528d91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_badges = symbols('initial_badges')\n\n    first_day_sold = 5/7 * initial_badges\n    remaining_after_first_day = initial_badges - first_day_sold\n\n    second_day_sold = 1/3 * remaining_after_first_day\n    remaining_after_second_day = remaining_after_first_day - second_day_sold\n\n    final_badges = remaining_after_second_day + 354\n\n    equation = Eq(final_badges, 3 * initial_badges)\n\n    badges_at_beginning = solve(equation, initial_badges)\n\n    return badges_at_beginning[0]\n\nans = solution()"
    ],
    "3a8d9debec2f4fc3a575d0ea16005083": [
        "def solution():\n    angel_number = '0141705021'\n    devil_number = '4005220912'\n\n    angel_sorted = sorted(angel_number)\n    devil_sorted = sorted(devil_number)\n\n    if angel_sorted == devil_sorted:\n        return \"Yes\"\n    else:\n        return ''.join(devil_sorted)\n\nans = solution()"
    ],
    "423cce1700d94adeb333d25876d65a23": [
        "def solution():\n    # In a knockout tournament, each match eliminates one person.\n    # With 4 people, you need to eliminate 3 people to have a winner.\n    # Hence, you need at least 3 rounds of games.\n\n    return 3\n\nans = solution()"
    ],
    "82bde9d1e9404bf391015eb87b176f5d": [
        "def solution():\n    # Starting with the smallest three-digit number where one digit is 7: 107\n    # Check if the difference between the digits '1' and '7' is 4 or less\n    # And the difference between the digits '0' and '1' is also 4 or less\n    # The number 107 satisfies both conditions, so it's the smallest\n    return 107\n\nans = solution()"
    ],
    "107b6a756a8e456194025d4361f2a118": [
        "def solution():\n    count = 0\n    for page in range(1, 101):\n        count += str(page).count('2')\n    return count\n\nans = solution()"
    ],
    "d6ed026fb584429b8dc2a4b41d3885fe": [
        "def solution():\n    total_exhibits = 498\n    not_produced_by_A = 266\n    not_produced_by_B = 178\n\n    only_A_or_B = total_exhibits - (not_produced_by_A + not_produced_by_B)\n\n    produced_by_both = total_exhibits - (not_produced_by_A + not_produced_by_B - only_A_or_B)\n\n    return produced_by_both\n\nans = solution()"
    ],
    "10a4f68009184b2f9611a45a014abd56": [
        "def solution():\n    noon_temp = 4  # Temperature at noon in °C\n    temp_drop = 10  # Temperature drop in °C\n    midnight_temp = noon_temp - temp_drop  # Calculate temperature at midnight\n    return midnight_temp\n\nans = solution()"
    ],
    "868f76b6c8934a7885d5e14c1c5de743": [
        "def solution():\n    # 8 blue, 10 red, and 13 green balls\n    # To ensure at least one of each color, pick all of one color plus one more for each of the remaining colors\n    return 13 + 1 + 1  # All green balls plus one blue and one red\n\nans = solution()"
    ],
    "1ebfe4d3586444b28bbdf27520a1abab": [
        "def solution():\n    for number in range(200, 301):\n        if number % 6 == 3 and number % 7 == 3 and number % 11 == 5:\n            return number\n\nans = solution()"
    ],
    "27181cdb9b38443f964d9820ad8f0b75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    skirt, blouse = symbols('skirt blouse')\n\n    equation1 = Eq(3 * skirt + 2 * blouse, 317)\n    equation2 = Eq(skirt, blouse + 14)\n\n    solutions = solve((equation1, equation2), (skirt, blouse))\n\n    return solutions[blouse]\n\nans = solution()"
    ],
    "6ca3b864aba0479d81b5e2d80e516196": [
        "def solution():\n    # The house value after a year was £110,000 which is after a 10% increase\n    value_after_increase = 110000\n    # To calculate the original price, we roll back the 10% increase\n    original_price = value_after_increase / 1.1\n\n    # After another year, the house loses 10% of its value\n    value_after_decrease = value_after_increase * 0.9\n\n    # Now we calculate the profit or loss by subtracting the original price from the current value\n    profit_or_loss = value_after_decrease - original_price\n\n    return profit_or_loss\n\nans = solution()"
    ],
    "e9e57ebfab514d86a5ed141c3c353815": [
        "def solution():\n    from math import factorial as f\n    \n    total_flower_groups = 3 + 4 + 1  # Roses, Jasmines, Daisy\n    arrangements_of_groups = f(total_flower_groups) // (f(3) * f(4) * f(1))\n    \n    arrangements_within_roses = f(3)\n    arrangements_within_jasmines = f(4)\n    \n    ans = arrangements_of_groups * arrangements_within_roses * arrangements_within_jasmines\n    return ans\n\nans = solution()"
    ],
    "d7e151832f704caeb06c6674341c5d53": [
        "def solution():\n    total_pupils = 235 + 567\n    pupils_each_room = total_pupils // 2\n    return pupils_each_room\n\nans = solution()"
    ],
    "ea25f69560044c42a5dc8b686d83b90f": [
        "from math import gcd\n\ndef solution():\n    num1 = 1*2*3*4*5*6\n    num2 = 1*2*3*4*5*6*7*8\n    count = 0\n\n    for m in range(num1, num2 + 1, num1):\n        if num2 % m == 0:\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "3ad5f155b2244cbcb39a2d0959b08316": [
        "def solution():\n    sum_val = 60\n    ans = 0\n    while sum_val > 0:\n        ans += 1\n        sum_val -= ans\n    return ans\n\nans = solution()"
    ],
    "46df85e92a924b12ac1d505c93cd885c": [
        "def solution():\n    pies = 0\n    while True:\n        pies += 1\n        if (pies - 3) % 5 == 0 and (pies + 2) % 6 == 0:\n            break\n    return pies\n\nans = solution()"
    ],
    "a37a54e4fb8445b4bc0772fa3a12e2ff": [
        "def solution():\n    original_price = 125\n    discount_percentage = 20\n    discount_amount = original_price * (discount_percentage / 100)\n    new_price = original_price - discount_amount\n\n    return new_price\n\nans = solution()"
    ],
    "8b18733b1be0419dba54b2eb00a90c19": [
        "def solution():\n    return 12321 // 9\n\nans = solution()"
    ],
    "2b8380c480924871bff4133ed7e6b4db": [
        "def solution():\n    leak_rate_per_min = 20 # ml per minute\n    minutes_per_hour = 60\n    ml_to_liters = 1 / 1000\n\n    water_leaked_in_hour_ml = leak_rate_per_min * minutes_per_hour\n    water_leaked_in_hour_liters = water_leaked_in_hour_ml * ml_to_liters\n    \n    return water_leaked_in_hour_liters\n\nans = solution()"
    ],
    "82a919f9eba447aab7c5e2b20dd75061": [
        "def solution():\n    # A and B are primes, 8A - 3B is a multiple of 3.\n    # For a number to be a multiple of 3, the sum of its digits must be divisible by 3.\n    # Since A and B are primes, let's consider the implications:\n    # If A = 3, then 8A is already a multiple of 3. B could be any prime, and 8A - 3B will still be a multiple of 3.\n    # If A is a prime other than 3, it must be of the form 3n + 1 or 3n + 2 (since all primes > 3 are either 1 or 2 modulo 3).\n    # If A = 3n + 1, then 8A = 8(3n + 1) = 24n + 8, which is not divisible by 3 (since 8 is not divisible by 3).\n    # If A = 3n + 2, then 8A = 8(3n + 2) = 24n + 16, which is 1 less than a multiple of 3.\n    # Therefore, B must be chosen such that 3B is 1 more than a multiple of three to cancel out the 1 and make the expression divisible by 3.\n    # If B = 3m + 1, then 3B = 9m + 3, which is a multiple of 3.\n    # If B = 3m + 2, then 3B = 9m + 6, which is also a multiple of 3.\n    # Since we're looking for primes and B can be any prime, B must be of the form 3m + 2 for 8A - 3B to be divisible by 3. However, 2 is the only prime of this form.\n    # If B is 2, it doesn't satisfy the condition because 3B = 6 is a multiple of 3 and adding it or subtracting it from another multiple of 3 would yield a multiple of 3.\n    # Therefore, A must be 3 because it's the only condition that satisfies the problem as A can be any prime, and 3 is the only prime that when multiplied by 8 gives a product that's divisible by 3 regardless of the value of B.\n    \n    A = 3  # Setting A to 3, which is the smallest and only possible value for A to satisfy the condition\n    return A\n\nans = solution()"
    ],
    "07de75394b5841918be5feca68429eb9": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations('0123456789', 3):\n        s, e, e = perm\n        if s != '0':  # 'SEE' cannot start with 0\n            see = int(s + e + e)\n            ese = int(e + s + e)\n            add = see + ese\n            if str(add) == e + e + s:  # Check if SEE + ESE results in the pattern EES\n                return see\n\nans = solution()"
    ],
    "9161eca90a924c55a4b89f523ab076ad": [
        "def solution():\n    for age in range(1, 7*2*3*4*6):  # Upper limit is the least common multiple of divisors.\n        if (age % 2 == 1 and\n            age % 3 == 1 and\n            age % 4 == 1 and\n            age % 6 == 1 and\n            age % 7 == 0):\n            return age\n\nans = solution()"
    ],
    "7c7eeadfbdca4d60ababafecea8a2a6a": [
        "def solution():\n    james_height = 120\n    difference = 30\n    mark_height = james_height + difference\n    return mark_height\n\nans = solution()"
    ],
    "681ad7cd00094b8b958f2990dc828dc1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, honeydew = symbols('watermelon honeydew')\n\n    # Two watermelons and three honeydews cost $48\n    equation1 = Eq(2 * watermelon + 3 * honeydew, 48)\n    # Each honeydew costs twice as much as each watermelon\n    equation2 = Eq(honeydew, 2 * watermelon)\n\n    solutions = solve((equation1, equation2), (watermelon, honeydew))\n\n    return solutions[watermelon]\n\nans = solution()"
    ],
    "5a18e751149d448d874661947903bc87": [
        "def solution():\n    # 3 different colors, to ensure at least one pair we use Pigeonhole Principle\n    num_colors = 3\n    # 1 pair has 2 socks\n    socks_per_pair = 2\n    \n    # Worst case: take one from each color and no pair, so take one more\n    min_socks_needed = (socks_per_pair - 1) * num_colors + 1\n    \n    return min_socks_needed\n\nans = solution()"
    ],
    "0b55e6a4e6c14d308cec4f22d3a63d1a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    dominic, hannah, abdul = symbols('dominic hannah abdul')\n    \n    equation1 = Eq(dominic, 2 * hannah)\n    equation2 = Eq(abdul, 3 * dominic)\n    equation3 = Eq(dominic + hannah + abdul, 63)\n    \n    solutions = solve((equation1, equation2, equation3), (dominic, hannah, abdul))\n    \n    return solutions[abdul]\n\nans = solution()"
    ],
    "08b4fb633ec84894aa5ff3a4608e3b6b": [
        "def solution():\n    total_pieces_before_cut = 10\n    total_pieces_after_cut = 16\n    pieces_gained = total_pieces_after_cut - total_pieces_before_cut\n    # Each piece cut into 3 parts gives 2 more pieces than before.\n    pieces_cut_into_three = pieces_gained // 2 \n\n    return pieces_cut_into_three\n\nans = solution()"
    ],
    "fb238c080afd420c908c028ca9054101": [
        "def solution():\n    # Since there are 2 colors and we want to guarantee two apples of the same color,\n    # using the pigeonhole principle, if we take 3 apples from the bag, we might have \n    # 1 red and 2 green or 2 red and 1 green, so we still don't guarantee two apples of\n    # the same color. As soon as we take the 4th apple, we must have 2 of one color\n    # because even if the first 3 were one of each color plus another, the 4th must\n    # complete a pair either way.\n\n    # Therefore, you must take 4 apples to guarantee you get 2 apples of the same color.\n    ans = 4\n    return ans\n\nans = solution()"
    ],
    "d5f9287c340749138bbce5897de4eb98": [
        "def solution():\n    twenty_thousand = 20000\n    number = twenty_thousand - 20\n    \n    return number\n\nans = solution()"
    ],
    "4bcc90775cce4036a6d6e2de902d15a1": [
        "def solution():\n    scores = [7, 8, 10, 9, 8, 8, 10, 7, 8, 9]\n    average_score = sum(scores) / len(scores)\n    return average_score\n\nans = solution()"
    ],
    "ff03e3e004084b4592ed56380ac4b86f": [
        "def solution():\n    ans = 6.3 + 8.7 + 9.6 - 2.6\n    return ans\n\nans = solution()"
    ],
    "4cd5315568c9436fb37d857619aade0b": [
        "def solution():\n    volume_per_pail = 4\n    number_of_pails = 4\n    remaining_water = 7\n\n    original_volume = (volume_per_pail * number_of_pails) + remaining_water\n\n    return original_volume\n\nans = solution()"
    ],
    "e712313031b94278a2ec2b83580cf2ff": [
        "def solution():\n    richard_age = 12\n    adam_age = 2 * richard_age\n    will_age = (2/3) * adam_age\n    total_age = richard_age + adam_age + will_age\n\n    return total_age\n\nans = solution()"
    ],
    "3eea1e7f99c34f13ba952490fd0e0223": [
        "def solution():\n    ans = sum(range(2, 47, 2)) - sum(range(1, 46, 2))\n    return ans\n\nans = solution()"
    ],
    "21dff506ecab4714a6d9d8ea21b7f020": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    c = symbols('c')\n    equation = Eq(5 * (6 * c - 1), -35)\n    \n    c_value = solve(equation, c)\n    \n    return c_value[0]\n\nans = solution()"
    ],
    "899f31b2d9c747e09ae28a17d893d246": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the unknowns\n    book, pencil_box = symbols('book pencil_box')\n    \n    # Two equations from the problem\n    eq1 = Eq(2 * book + 3 * pencil_box, 42)\n    eq2 = Eq(2 * book + 6 * pencil_box, 60)\n    \n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (book, pencil_box))\n    \n    # Return the cost of each pencil box\n    return solutions[pencil_box]\n\nans = solution()"
    ],
    "6db678cd280949ad907c4ce941d65604": [
        "def solution():\n    A = 1\n    for i in range(1, 2011):\n        A *= i\n        while A % 10 == 0:\n            A //= 10\n\n    ans = A % 10\n    return ans\n\nans = solution()"
    ],
    "0496270f31e94bba8f1297dbcc51925c": [
        "def solution():\n    count = 0\n    total_numbers = 0\n\n    # Calculate the total number of elements in the sequence\n    for i in range(1, 9):\n        count = i + 1  # The number of times i is written\n        total_numbers += count * i\n    \n    # Since the sequence is in non-decreasing order, we can find the median by index\n    median_index = (total_numbers + 1) // 2\n\n    # Find the number at median index\n    current_number = 0\n    current_count = 0\n    for i in range(1, 9):\n        current_count += (i + 1)  # The number of times i is written\n        if median_index <= current_count * i:\n            current_number = i\n            break\n\n    ans = current_number\n    return ans\n\nans = solution()"
    ],
    "eda44d14e12244e89aedc633ee8617cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Create symbols for x, y, and z\n    x, y, z = symbols('x y z')\n    \n    # Given equation x^20 * y^15 * z^5 = 243\n    given_equation = Eq(x**20 * y**15 * z**5, 243)\n    \n    # Solve the given equation for x, y, and z\n    solutions = solve(given_equation)\n    \n    # Since 243 is 3^5, we can assume x, y, and z are powers of 3\n    # x = 3^a, y = 3^b, z = 3^c, where a, b, and c are exponents\n    # According to the given equation: 20a + 15b + 5c = 5 (since 243 is 3^5)\n    # To find the exponents, we divide both sides of the equation by 5\n    # 4a + 3b + c = 1 (each exponent a, b, c should be a fraction of 1 accordingly)\n    \n    # Find a, b, and c, such that their multiples give us the original equation\n    # a = 1 because x^20 and 3^5 have the same base, thus 20 * 1/4 = 5\n    # b = 1/3 because y^15 and 3^5 have the same base, thus 15 * 1/3 = 5\n    # c = 1/5 because z^5 and 3^5 have the same base, thus 5 * 1/5 = 5\n    \n    # Now substitute a = 1/4, b = 1/3, c = 1/5 into x^8 y^6 z^2\n    # x^8 y^6 z^2 = 3^(8*(1/4)) * 3^(6*(1/3)) * 3^(2*(1/5))\n    # Simplify exponents: x^8 y^6 z^2 = 3^2 * 3^2 * 3^(2/5)\n    # Add exponents since bases are the same: x^8 y^6 z^2 = 3^(4 + 2/5)\n    # Simplify the exponent: x^8 y^6 z^2 = 3^(22/5)\n    \n    # Calculate the result\n    ans = 3**(22/5)\n    \n    return ans\n\nans = solution()"
    ],
    "b2e6579890a9418cb8be3cdb1db7fdab": [
        "def solution():\n    total_height_6_players = 6 * 150\n    average_height_4_players = 150 - 2\n    total_height_4_players = 4 * average_height_4_players\n    total_height_2_players = total_height_6_players - total_height_4_players\n    average_height_2_players = total_height_2_players / 2\n    return average_height_2_players\n\nans = solution()"
    ],
    "f38a4b59c2e540cf9e41096b829c82b2": [
        "from math import comb\n\ndef solution():\n    participants = 10\n    handshakes = comb(participants, 2)\n    return handshakes\n\nans = solution()"
    ],
    "6c0112d5b52d43b7b55287abd3ead152": [
        "def solution():\n    total_distance = 500\n    daily_paving = 50\n    days_needed = total_distance / daily_paving\n    return days_needed\n\nans = solution()"
    ],
    "69408e55202e417bbe0a5c4b1edfebd4": [
        "def solution():\n    cattles = 8\n    days = 4\n    daily_fodder_per_cattle = 10\n\n    total_fodder = cattles * days * daily_fodder_per_cattle\n    \n    return total_fodder\n\nans = solution()"
    ],
    "a8613b9533934b1dade8db288f570450": [
        "def solution():\n    dog_to_rabbit_weight_ratio = 8\n    rabbit_to_chicken_weight_ratio = 2\n    \n    chickens_per_dog = dog_to_rabbit_weight_ratio * rabbit_to_chicken_weight_ratio\n\n    return chickens_per_dog\n\nans = solution()"
    ],
    "d893d7be89fe4ab18afad5ace001607b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_marbles = symbols('initial_marbles')\n\n    # Equation representing Larry's remaining marbles after giving them away\n    equation = Eq(initial_marbles - (5/12) * initial_marbles - 30 - 26, 35)\n\n    # Solve the equation for the variable initial_marbles\n    solutions = solve(equation, initial_marbles)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "367be73f540346348ec1e229247db265": [
        "def solution():\n    # Since the product of 42 and x equals the square of 42, it means x must be 42.\n    x = 42\n    # The product of 42 and y must be all factors exponents equal to 1.\n    # Thus we need to find y such that 42 * y is a product of unique prime factors.\n    # 42 can be factored to 2 * 3 * 7 and we want the product with y to be a squarefree number\n    # This means y must be 1 since any other number would introduce a square factor\n    y = 1\n    # The sum of x and y is the answer\n    return x + y\n\nans = solution()"
    ],
    "9a8296da36564b8aa1d283b8fa70dd00": [
        "def solution():\n    total_weight = 600  # in grams\n    concentration = 0.22  # 22%\n    sugar_weight = total_weight * concentration\n    return sugar_weight\n\nans = solution()"
    ],
    "62ddaa1b93c44e7f85b309208c5f28e6": [
        "def solution():\n    total_sum = 0\n    for i in range(1, 100):\n        total_sum += sum(map(int, str(i)))\n    return total_sum\n\nans = solution()"
    ],
    "8fa4370c176d41b39b6866f139a48dde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables for number of sweets Jess and Jill originally have\n    jess, jill = symbols('jess jill')\n\n    # Jill has six sweets for every five sweets Jess has\n    equation1 = Eq(jill, 6/5 * jess)\n\n    # Jill gives eight sweets to Jess\n    # Now, Jill has four sweets for every seven sweets Jess has\n    equation2 = Eq(jill - 8, 4/7 * (jess + 8))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jess, jill))\n\n    # Calculate the total number of sweets the girls have altogether\n    total_sweets = solutions[jess] + solutions[jill]\n\n    return total_sweets\n\nans = solution()"
    ],
    "dbf1101a135f495c9943bc0f68400a5b": [
        "def solution():\n    total_money = 4.44\n    money_given = total_money * 0.25\n    return money_given\n\nans = solution()"
    ],
    "4779c64adc47418a896e55784a17e2cb": [
        "def solution():\n    for i in range(10000, 100000):\n        if int(\"1\" + str(i)) * 3 == int(str(i) + \"1\"):\n            return i\n\nans = solution()"
    ],
    "ee0aa5d3849d485c9f2f52e25183c07d": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    current_date = datetime.now()\n    birth_date = current_date - timedelta(days=(38 * 365.25 + 6 * 30))\n\n    return birth_date.year\n\nans = solution()"
    ],
    "547a49466468412f8777a85ec725c904": [
        "def solution():\n    total_length = 12.6\n    cut_length = 3.75\n    remaining_length = total_length - cut_length\n    return remaining_length\n\nans = solution()"
    ],
    "532079a764c14bf09bd373b4c7fc5f7c": [
        "def solution():\n    ans = sum(i**4 for i in range(1, 20))\n    return ans\n\nans = solution()"
    ],
    "448302e8cd5b46e0b31999de01e48592": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let c be the cost of one pie, then the cost of one cake is c+13\n    # Let n be the number of pies sold, then the number of cakes sold is n/4\n    c, n = symbols('c n')\n\n    # Equations based on the given ratios and total sales\n    eq1 = Eq(c * n + (c + 13) * (n / 4), 1848) # equation for total sales\n    eq2 = Eq(15 * (c + 13), 7 * c)             # equation for money ratio\n\n    # Solve the system of equations\n    solutions = solve((eq1, eq2), (c, n))\n\n    # Calculate the number of cakes using the n/4 relation\n    num_cakes = solutions[n] / 4\n\n    return int(num_cakes)\n\nans = solution()"
    ],
    "7862ebf4ebee413a94b72306448a771f": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['0', '1', '3', '6', '8', '9']\n    count = 0\n    for number in permutations(digits, 4):\n        if number[-1] in ['0', '6', '8'] and number[0] != '0':\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6e73517ab45147c1aa9d1e79e8150821": [
        "def solution():\n    return 345 * 76\n\nans = solution()"
    ],
    "750dbb830f534f51927d1d1d3c9f04f8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the initial amount of money Hanson had as 'x'.\n    x = symbols('x')  \n    \n    # After spending 1/4 of his money and an additional $3, he is left with (3/4)*x - 3.\n    remaining_after_CDs = (3/4)*x - 3\n    \n    # Then he spends 3/5 of the remaining money and an additional $6,\n    # and is left with $24.\n    remaining_after_batteries = (2/5)*remaining_after_CDs - 6\n    \n    # This remaining amount is equal to $24.\n    equation = Eq(remaining_after_batteries, 24)\n    \n    # Solve for 'x'.\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "9498ad8ff09a450b88310639f2e5e3b4": [
        "def solution():\n    candidates = []\n\n    for beads in range(40, 81):\n        if beads % 4 == 0 and beads % 7 == 0:\n            candidates.append(beads)\n    \n    if len(candidates) == 1:\n        return candidates[0]\n    else:\n        return candidates\n\nans = solution()"
    ],
    "546dbea8b6cf4aeb804964a448179516": [
        "from math import gcd\n\ndef solution():\n    rope1_length = 45\n    rope2_length = 30\n    \n    longest_piece_length = gcd(rope1_length, rope2_length)\n        \n    return longest_piece_length\n\nans = solution()"
    ],
    "20b70bb054c14b73a8185f937a535c5e": [
        "def solution():\n    # The units digit of 9 raised to any power cycles: 9, 1, 9, 1, ...\n    # So for 9^2015, the cycle repeats (2015) times, and the units digit is 9.\n    units_digit_2015 = 9\n    \n    # For 9^2016, the cycle repeats (2016) times, and the units digit goes back to 1.\n    units_digit_2016 = 1\n    \n    # The sum of the units digits of 9^2015 and 9^2016 \n    ans = (units_digit_2015 + units_digit_2016) % 10\n    \n    return ans\n\nans = solution()"
    ],
    "16b50c758e404b52b2f26d63ad9b63f4": [
        "def solution():\n    from math import factorial\n\n    # Number of ways to arrange 5 men in a row\n    men_arrangements = factorial(5)\n\n    # Number of positions women can take (not next to each other) when 5 men are arranged\n    # is 6 (on either end or between the men)\n    women_positions = 6\n\n    # Number of ways to arrange 3 women in these positions\n    women_arrangements = factorial(women_positions) // factorial(women_positions - 3)\n\n    # Total arrangements is the product of men's arrangements and women's possible arrangements\n    total_arrangements = men_arrangements * women_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "c69955d7ca0b48e1af24e735819ad11b": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    marc_time = datetime.strptime(\"11:50\", \"%H:%M\")  # Marc's current time\n    marc_time -= timedelta(minutes=15)  # Adjust for Marc's slow watch\n    half_an_hour_later = marc_time + timedelta(minutes=30)  # Time after half an hour\n    george_time = half_an_hour_later + timedelta(minutes=7)  # Adjust for George's fast watch\n    ans = george_time.strftime(\"%H:%M %p\")  # Format time to a readable string with AM/PM\n    return ans\n\nans = solution()"
    ],
    "e33cf79397014b3fbccf3f13532fa8db": [
        "def solution():\n    n = 525 // 25\n    return n\n\nans = solution()"
    ],
    "07ad8fe80a0748e18cb311667f70b91b": [
        "def solution():\n    qiqi_speed = 60  # m/min\n    weiling_speed = 72  # m/min\n    time_difference = 2  # minutes\n    weiling_advance_time = 4  # minutes\n\n    # Suppose Qiqi takes t minutes to reach the school\n    # Weiling takes (t - time_difference - weiling_advance_time) minutes to reach the school\n    # Their distances to school are the same, so we can use the formula distance = speed * time\n\n    # Qiqi's distance = qiqi_speed * t\n    # Weiling's distance = weiling_speed * (t - time_difference - weiling_advance_time)\n\n    # Since both distances are equal:\n    # qiqi_speed * t = weiling_speed * (t - time_difference - weiling_advance_time)\n    # Solve this equation for t to find the time Qiqi takes to reach school\n\n    # Then, distance from library to school = qiqi_speed * t\n\n    # Rearrange the equation to solve for t\n    # t = weiling_speed * (t - time_difference - weiling_advance_time) / qiqi_speed\n    # t = weiling_speed * t / qiqi_speed - weiling_speed * (time_difference + weiling_advance_time) / qiqi_speed\n    # t - weiling_speed * t / qiqi_speed = - weiling_speed * (time_difference + weiling_advance_time) / qiqi_speed\n    # t * (1 - weiling_speed / qiqi_speed) = - weiling_speed * (time_difference + weiling_advance_time) / qiqi_speed\n    # t = weiling_speed * (time_difference + weiling_advance_time) / (qiqi_speed * (1 - weiling_speed / qiqi_speed))\n    t = weiling_speed * (time_difference + weiling_advance_time) / (qiqi_speed - weiling_speed)\n\n    # Now calculate the distance\n    distance = qiqi_speed * t\n    return distance\n\nans = solution()"
    ],
    "6fe28da5b56043b6b8b677c81b5c9f70": [
        "def solution():\n    ans = 0.45 * 540\n    return ans\n\nans = solution()"
    ],
    "da2ec31a074d412a8b7a5644870d32d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    h = symbols('h')\n    equation = Eq(2*h, 25 + h)\n    h_value = solve(equation, h)[0]\n    \n    return h_value\n\nans = solution()"
    ],
    "76e017050d7b464cbea52dfef7557a80": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T, income = symbols('T income')\n\n    # Assuming T is the income tax rate for the first $30000, and T+3 is for any amount above $30000\n    # And the income tax he paid is (T+1)% of his annual income\n\n    # Equation based on the given condition:\n    # Tax for the first $30000 at rate T% + Tax for the amount above $30000 at rate (T+3)% = (T+1)% of the total income\n\n    # If income <= 30000: Tax paid = income * T%\n    # If income > 30000: Tax paid = 30000 * T% + (income - 30000) * (T+3)%\n\n    tax_equation_income_below_30000 = Eq(income * T / 100, income * (T + 1) / 100)\n    tax_equation_income_above_30000 = Eq(30000 * T / 100 + (income - 30000) * (T + 3) / 100, income * (T + 1) / 100)\n\n    # solve for income when income <= 30000\n    solutions_income_below_30000 = solve(tax_equation_income_below_30000, (T, income))\n\n    # solve for income when income > 30000\n    solutions_income_above_30000 = solve(tax_equation_income_above_30000, (T, income))\n\n    # We're interested only in the positive, non-zero solution for income\n    income_solutions = []\n    for sol in solutions_income_below_30000 + solutions_income_above_30000:\n        if sol[income] > 0:\n            income_solutions.append(sol[income])\n\n    return float(income_solutions[0])  # return the annual income\n\nans = solution()"
    ],
    "9ac39bfb7cbf4ddfb0db66bd11dcd812": [
        "def solution():\n    for correct in range(31):\n        incorrect = 30 - correct\n        if correct*5 - incorrect*1 == 90:\n            return correct\n\nans = solution()"
    ],
    "1c1ae09ff91145d8a4f35ba808809f50": [
        "def solution():\n    A_rate = 1 / 10 # A can finish 1/10 of the work per hour\n    B_rate = 1 / 15 # B can finish 1/15 of the work per hour\n\n    # When working together, their rates are additive\n    together_rate = A_rate + B_rate\n\n    # The time to paint the house together is the reciprocal of their combined rates\n    time_together = 1 / together_rate\n\n    return time_together\n\nans = solution()"
    ],
    "ac8d3bc867394370882a34f8da7d69b5": [
        "def solution():\n    ans = 20.14 * 4.4\n    return ans\n\nans = solution()"
    ],
    "1c892f5e4d484f6c8248b19f022e669c": [
        "def solution():\n    total_distance = 31\n    jump_up = 3\n    slide_down = 2\n    jumps_per_cycle = 3\n\n    distance_per_cycle = jumps_per_cycle * jump_up - slide_down\n    full_cycles_needed = (total_distance - jump_up) // distance_per_cycle\n    distance_covered = full_cycles_needed * distance_per_cycle + jump_up\n\n    additional_jumps = 0\n    while distance_covered < total_distance:\n        additional_jumps += 1\n        distance_covered += jump_up\n        if distance_covered < total_distance:\n            distance_covered -= slide_down\n\n    total_jumps = full_cycles_needed * jumps_per_cycle + additional_jumps\n    return total_jumps\n\nans = solution()"
    ],
    "353773f473b443be8571fddf31056166": [
        "def solution():\n    for i in range(1, 101):\n        if i % 3 == 0 and i % 7 == 0 and (i - 2) % 8 == 0:\n            return i\n\nans = solution()"
    ],
    "d1d60aa85e194b498d447ca654276627": [
        "def solution():\n    # Gigi's age when Jenny was 22 years old\n    gigi_age_when_jenny_was_22 = 22\n\n    # Gigi was 45 years old in 2002, so Gigi was born in 2002 - 45\n    gigi_birth_year = 2002 - 45\n\n    # Jenny turns 22 in some year, and we know she was 22 years old in 1995\n    jenny_22_year = 1995\n\n    # Jenny's age when Gigi was 22 can be found from the difference in years\n    jenny_age_when_gigi_was_22 = jenny_22_year - gigi_birth_year + gigi_age_when_jenny_was_22\n\n    return jenny_age_when_gigi_was_22\n\nans = solution()"
    ],
    "de02c9bb61484cb9a5967b90fb5f9477": [
        "def solution():\n    first_term = 50\n    difference = 46 - 50  # the common difference between the terms\n    \n    # Since we need positive terms, the last term should be greater than 0\n    term = first_term\n    num_terms = 0\n    while term > 0:\n        num_terms += 1\n        term += difference\n\n    return num_terms\n\nans = solution()"
    ],
    "ae8336c2fd0e4359a933990f040a86cb": [
        "def solution():\n    # Total marbles of each color\n    red = 12\n    blue = 9\n    yellow = 8\n    green = 3\n    \n    # To ensure 4 marbles of different colors, in the worst case scenario we have to consider the following:\n    # We might take all marbles of the most abundant color (red) - 12 marbles.\n    # Then we might take all marbles of the second most abundant color (blue) - 9 marbles.\n    # After that, we might take all marbles of the third most abundant color (yellow) - 8 marbles.\n    # At this point we have 12 + 9 + 8 = 29 marbles but only 3 colors.\n    # To ensure a fourth color, we then take one more marble which is guaranteed to be green since it’s the only color left.\n    # So the total is the sum of all those marbles plus 1.\n    \n    total = red + blue + yellow + 1 # Adding 1 to guarantee the fourth color\n\n    return total\n\nans = solution()"
    ],
    "a42c9894b8224a81a0f9cfb0f1077f4c": [
        "def solution():\n    return 1.29 * 1000\n\nans = solution()"
    ],
    "e8dbdad37fe840819b36a79b108b7bcc": [
        "def solution():\n    digits_sum = 2 + 0 + 1 + 9 + 0 + 4 + 0 + 6\n    for A in range(10):\n        if (digits_sum + A) % 9 == 0:\n            return A\n\nans = solution()"
    ],
    "c8cbb563970b472ca93e23b6fef1e7dc": [
        "def solution():\n    ans = 2.5 * 7 * 4\n    return ans\n\nans = solution()"
    ],
    "853aa802a45a48ae9162dda36b40c38c": [
        "def solution():\n    for last_digit in range(10):\n        number = int(f\"451{last_digit}\")\n        if number % 3 == 0 and number % 5 != 0 and number % 9 != 0:\n            return last_digit\n\nans = solution()"
    ],
    "35ecce2854094a7ab058c59fade67c60": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    start_date = datetime.strptime('15/05/2023', '%d/%m/%Y')\n    duration = timedelta(weeks=3)\n    end_date = start_date + duration\n    return end_date.strftime('%d/%m/%Y')\n\nans = solution()"
    ],
    "9be7c60631db43ffa0e913650c7d7c6b": [
        "def solution():\n    for i in range(1, 1000):  # Arbitrary range to find at least one solution\n        num = i * 24  # LCM of 3 and 8\n        if str(num)[-1] == '2':  # The number ends in '2'\n            return num\n\nans = solution()"
    ],
    "78ede9ed721a48f2b277058be8293b71": [
        "def solution():\n    from math import sqrt, pow, floor\n    numerator = -6.94 - pow(9.604, 1/3)\n    denominator = sqrt(44.541 / 67) - (-377/6 * (5 / 3))\n    ans = numerator / denominator\n    return round(ans, 3)\n\nans = solution()"
    ],
    "5caa8c8d8485429793ce2c81b896b975": [
        "def solution():\n    total_apples = 12\n    count = 0\n    for group1 in range(1, total_apples):\n        group2 = total_apples - group1\n        if group1 < group2:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b9f0a0188fd34cb597620588c14138ba": [
        "def solution():\n    speed_still_water = 25\n    speed_current = 3\n    distance = 140\n    \n    speed_downstream = speed_still_water + speed_current\n    time = distance / speed_downstream\n    \n    return time\n\nans = solution()"
    ],
    "7c20e08dc4ee4e90b36a5ebc67c30bf0": [
        "def solution():\n    original_price = 30\n    discount_percentage = 15\n    sale_price = original_price * (1 - discount_percentage / 100)\n    return sale_price\n\nans = solution()"
    ],
    "742450894fd54f4eb51a1b84280864eb": [
        "def solution():\n    total_cost = (5 * 0.99) + (2 * 1.98)\n    return total_cost\n\nans = solution()"
    ],
    "66967fd57a7c491592192fe52883de6a": [
        "def solution():\n    total_cost = 12.15\n    num_cupcakes = 3\n    cupcake_cost = 3.25\n    \n    total_cupcake_cost = num_cupcakes * cupcake_cost\n    total_drink_cost = total_cost - total_cupcake_cost\n    cost_per_can = total_drink_cost / 2\n    \n    return cost_per_can\n\nans = solution()"
    ],
    "2a035f2d1ebc482193f41e5de7e3022d": [
        "def solution():\n    for correct in range(21):\n        incorrect = 20 - correct\n        score = correct * 5 - incorrect * 2\n        if score == 51:\n            return correct\n\nans = solution()"
    ],
    "b811cf9ea3a34145953b30f3ef9f811c": [
        "from sympy import lcm\n\ndef solution():\n    # Convert minutes to seconds for the traffic lights\n    # Traffic light changes every 30 seconds (0.5 minutes)\n    first_light = 30\n    # Traffic light changes every 45 seconds (0.75 minutes)\n    second_light = 45\n    \n    # The common time they both turn green is every 9 minutes (540 seconds)\n    common_time = 540\n    \n    # Calculate the least common multiple (LCM) of the two traffic lights\n    lcm_two_lights = lcm(first_light, second_light)\n    \n    # Calculate the smallest integer for the third light that is greater than or equal to 30 seconds\n    third_light = common_time // lcm_two_lights\n    while third_light * lcm_two_lights < common_time:\n        third_light += 1\n    \n    # Calculate the time for the third traffic light\n    third_light_time = third_light * lcm_two_lights\n    return third_light_time\n\nans = solution()"
    ],
    "c48000b870b0411c9680bd0939cc2c12": [
        "def solution():\n    # Difference between sequence elements\n    differences = [20 - 8, 31 - 20, 41 - 31, 50 - 41]\n    \n    # Now, find the difference in the differences\n    second_differences = [differences[i+1] - differences[i] for i in range(len(differences) - 1)]\n    \n    # Assuming the second differences are constant (as is the case in double arithmetic sequences)\n    constant_second_difference = second_differences[0]\n    \n    # Calculate the next difference\n    next_difference = differences[-1] + constant_second_difference\n    \n    # Calculate the next number in the sequence\n    next_number = 50 + next_difference\n    \n    return next_number\n\nans = solution()"
    ],
    "933caaafe98a48ce8e5379db15d6d8f0": [
        "def solution():\n    numbers = [9, 1, 7, 4, 3, 6, 8]\n    mean = 5\n    total_numbers = 8\n    total_sum = mean * total_numbers\n    missing_number = total_sum - sum(numbers)\n    return missing_number\n\nans = solution()"
    ],
    "976b95e20676470a955c0924996ff02d": [
        "def solution():\n    # A can pass to 3 other people\n    first_pass_options = 3\n    # Whoever catches the first pass, has 2 options to pass (excluding A and themselves)\n    second_pass_options = 2\n    # Whoever catches the second pass must pass back to A, so only 1 option\n    third_pass_options = 1\n    \n    # Multiply the options for each pass to find the total number of different methods\n    count = first_pass_options * second_pass_options * third_pass_options\n    return count\n\nans = solution()"
    ],
    "d8bd98baadc745c5867262a1f291c0c0": [
        "def solution():\n    # Let x be the number of buses used by group A and y be the buses used by group B before combining\n    # Each bus has 36 seats, so we have 36x members in group A and 36y members in group B\n    # According to the question, 11 members from group A combined with some members from group B to fill another bus\n    # This gives us 36x - 11 members from group A taking pictures with each of 36y members of group B\n    # If each roll of film can take 36 pictures\n    # We need to find how many pictures can be taken with the last roll of film after everyone took pictures with each other\n\n    # We will use the sympy library to solve the equation\n    from sympy import symbols, Eq, solve\n\n    # Symbols for group sizes of A and B\n    x, y = symbols('x y')\n\n    # Equation representing the scenario where (36x - 11) members from A take pictures with 36y members from B\n    equation1 = Eq((36 * x - 11) * (36 * y), 36 * (36 * x * y - x))\n\n    # Since the first 36 * x * y rolls are full, we are only interested in the last roll\n    # The number of pictures taken will be the total number of pictures minus the number of full rolls multiplied by 36\n    # Hence we need to find the remainder when total number of pictures is divided by 36\n\n    # Solve the equation \n    # It is not possible for y to be zero as at least one bus for group B is needed, hence we start with y=1\n    for b_buses in range(1, 100):  # We assume a reasonable upper limit for number of buses\n        solutions = solve(equation1.subs(y, b_buses), x)\n        # Only consider positive integer solutions for x\n        for solution in solutions:\n            if solution.is_integer and solution > 0:\n                # Calculate number of pictures\n                num_pictures = (36 * solution - 11) * (36 * b_buses)\n                # Calculate the remaining pictures that can fit in the last roll of film\n                remaining_pictures = num_pictures % 36\n                return 36 - remaining_pictures  # Number of more pictures the last roll of film can take\n\nans = solution()"
    ],
    "30b87370b94246ef86d748c09d9b63b4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for ages\n    daniel_age, ming_age = symbols('daniel_age ming_age')\n\n    # Age relation now\n    equation1 = Eq(daniel_age, 4 * ming_age)\n\n    # Sum of their ages in 6 years\n    equation2 = Eq(daniel_age + 6 + ming_age + 6, 62)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (daniel_age, ming_age))\n\n    # Return Daniel's current age\n    return solutions[daniel_age]\n\nans = solution()"
    ],
    "734f5828407148b5a9e8d2668afc7458": [
        "def solution():\n    for number in range(60, 71):\n        if number % 7 == 0 and number % 9 == 0:\n            return number\n\nans = solution()"
    ],
    "26bb5c0bcd0e4e05994c3b21387ff92f": [
        "def solution():\n    paper_weight_g = 25\n    num_students = 250\n    total_weight_g = paper_weight_g * num_students\n    total_weight_kg = total_weight_g / 1000  # Convert grams to kilograms\n    return total_weight_kg\n\nans = solution()"
    ],
    "21e75f5992e7425ab944a24b2a56d916": [
        "from itertools import permutations\n\ndef solution():\n    cards = [1, 2, 8, 9]\n    max_product = 0\n    for perm in permutations(cards):\n        num1 = perm[0] * 10 + perm[1]\n        num2 = perm[2] * 10 + perm[3]\n        product = num1 * num2\n        if product > max_product:\n            max_product = product\n    return max_product\n\nans = solution()"
    ],
    "5127cf4b12c348eeaec2b82e72f95ae5": [
        "def solution():\n    ans = sum((1000 - i*2)**2 - (998 - i*2)**2 for i in range(500))\n    return ans\n\nans = solution()"
    ],
    "8ac10a7ccfe44215b75cf06a67533c06": [
        "def solution():\n    start_time = 11 * 60 + 55  # Convert 11.55 am to minutes\n    end_time = 13 * 60 + 40    # Convert 1.40 pm to minutes, using 24-hour format for 1 pm\n\n    time_played = end_time - start_time  # Calculate the difference in minutes\n\n    return time_played\n\nans = solution()"
    ],
    "75d9330dae2941ad9484a74e2379bd60": [
        "def solution():\n    time_diff = 10 - 8  # time difference to cross the two bridges\n    line_length = 3      # the length of the line formed by the people\n    bridge1_length = 9   # length of the first bridge\n    # Speed is constant so the extra time taken for the second bridge should be due to the increase in length alone\n    # The length of the line can be viewed as the extra distance covered by the second bridge in the time_diff\n\n    bridge2_length = bridge1_length + (line_length * time_diff / 8)\n\n    return bridge2_length\n\nans = solution()"
    ],
    "d33e99d3f1614fde81acb0bcf2ddf29a": [
        "def solution():\n    left = 11\n    right = 7\n\n    # Crystal is counted once so we add one to include her in the total.\n    total_people_in_one_row = left + right + 1\n\n    # Since there are two rows, we multiply the count of one row by 2.\n    total_people_in_class = total_people_in_one_row * 2\n\n    return total_people_in_class\n\nans = solution()"
    ],
    "ac7f27e33493434bb1574b2c4a2d01c2": [
        "def solution():\n    import math\n\n    # Given product of three consecutive even numbers\n    product = 2688\n    # Start with the cube root of the product as an approximate mid-point\n    # and search downwards for the smallest even factor\n    for n in range(int(math.ceil(product ** (1/3))), 0, -2):\n        if product % n == 0:\n            # Once found, break out of the loop since it's the middle even number\n            break\n    \n    # Calculate the largest of the three consecutive even numbers\n    largest_even = n + 2\n\n    return largest_even\n\nans = solution()"
    ],
    "699943037ddb46d287bd76abad9b6da4": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 3 == 0 and num % 11 == 0:\n            if (num - 1) % 2 == 0 and (num - 1) % 7 == 0:\n                return num\n\nans = solution()"
    ],
    "fc44184a4b6a4decbe05a477d57fc9ed": [
        "def solution():\n    # Maddy can divide 10 cupcakes into two groups where the groups have different number of cupcakes.\n    # If one group has 1 cupcake, the other group will have 9 cupcakes.\n    # This pattern will continue like: (1, 9), (2, 8), (3, 7), ..., (4, 6)\n    # The group with the least cupcakes can at most have 10 // 2 = 5 cupcakes\n    # (because the other group needs to have more, and they need to be different)\n    # So there are five possible ways for Maddy to divide the cupcakes into two different groups.\n    \n    number_of_ways = 10 // 2\n    return number_of_ways\n\nans = solution()"
    ],
    "35cc2d1e692e433a9edb2ca57099c016": [
        "def solution():\n    from sympy import primefactors, factorint\n\n    factors_dict = factorint(224)\n    factors_count = 1\n    for power in factors_dict.values():\n        factors_count *= (power + 1)\n\n    return factors_count\n\nans = solution()"
    ],
    "889a39026ec84d3e84f3871155b05e7a": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(1, 10):\n            for c in range(0, 10):\n                if b == a + 5 and c == b - 2 and (a + b + c) / 2 == b:\n                    return a * 100 + b * 10 + c\n\nans = solution()"
    ],
    "566f34b38ba04e8f88aa14c24a1773e4": [
        "def solution():\n    from math import gcd\n    \n    a = 28\n    b = 84\n    c = 126\n\n    ans = gcd(gcd(a, b), c)\n\n    return ans\n\nans = solution()"
    ],
    "c81f5752a9034395af391ec11de7b293": [
        "def solution():\n    total_eggs = 65\n    eggs_per_box = 6\n\n    full_boxes = total_eggs // eggs_per_box\n\n    return full_boxes\n\nans = solution()"
    ],
    "e6b14f6552294cf9bfe42605e064c5f3": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_time = datetime.strptime(\"8:30\", \"%H:%M\")\n\n    total_lesson_time = 3 * 45  # 3 lessons of 45 minutes each\n    total_moving_time = 2 * 5   # 2 moving periods of 5 minutes each\n\n    total_time = total_lesson_time + total_moving_time\n    break_start_time = start_time + timedelta(minutes=total_time)\n\n    return break_start_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "84ff7543ed7e4cf78a5bf1c71f95827d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    troy, adam = symbols('troy adam')\n\n    # Define the equations based on the problem statement\n    equation1 = Eq(troy, 5 * adam)                # Troy had 5 times as many coins as Adam\n    equation2 = Eq(adam + 24, troy / 3)           # Adam took 24 more coins, and then had 1/3 as many coins as Troy\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (troy, adam))\n\n    # Calculate the total number of coins they had at first\n    total_coins = solutions[troy] + solutions[adam]\n\n    return total_coins\n\nans = solution()"
    ],
    "dc51c8ed80f14b4fb5ff275cbe1ab05c": [
        "def solution():\n    neha_won = 12018\n    jasmine_won = 309\n    total_won = neha_won + jasmine_won\n    return total_won\n\nans = solution()"
    ],
    "d44b505766094322ba1d157aa0c69927": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wands, cards = symbols('wands cards')\n\n    equation1 = Eq(wands + cards, 69)\n    equation2 = Eq(wands, cards + 17)\n\n    solutions = solve((equation1, equation2), (wands, cards))\n\n    return solutions[wands]\n\nans = solution()"
    ],
    "ea7852a3c82f44b998bc40a543ec62cd": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote f as $5 notes and t as $10 notes.\n    f, t = symbols('f t')\n\n    # Total number of notes is 57.\n    total_notes = Eq(f + t, 57)\n\n    # He spend 60% of the $10 notes and 25% of the $5 notes.\n    # After that, he has twice as many $10 notes as $5 notes.\n    notes_left = Eq(t - 0.6 * t, 2 * (f - 0.25 * f))\n\n    # Solve the system of equations.\n    solutions = solve((total_notes, notes_left), (f, t))\n\n    # Calculate the cost of the bag.\n    # He spent 60% of the t $10 notes: 0.6 * t * $10\n    # He spent 25% of the f $5 notes: 0.25 * f * $5\n    cost = 0.6 * solutions[t] * 10 + 0.25 * solutions[f] * 5\n\n    return cost\n\nans = solution()"
    ],
    "a7318cfeb5c6465bbe4c97e1828d60ef": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define a symbol for the total amount of money Hanson had initially\n    total_money = symbols('total_money')\n\n    # The first expenditure: 1/4 of total money and $3\n    money_after_cds = total_money - total_money / 4 - 3\n\n    # The second expenditure: 3/5 of the remaining money and $6\n    money_after_batteries = money_after_cds - 3/5 * money_after_cds - 6\n\n    # Equation representing Hanson being left with $24\n    equation = Eq(money_after_batteries, 24)\n\n    # Solve the equation\n    solution = solve(equation, total_money)\n\n    # Return the total amount of money Hanson had initially\n    return solution[0]\n\nans = solution()"
    ],
    "8fc6e7b3c33b401c8a75af3f7886a7a5": [
        "def solution():\n    count = 0\n    for number in range(1000, 10000):\n        digits = [int(d) for d in str(number)]\n        product = 1\n        for d in digits:\n            product *= d\n        if product == 8:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a3b714dd4cfa4127838d98a3fa713af3": [
        "from itertools import permutations\n\ndef solution():\n    digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    count = 0\n    for perm in permutations(digits, 3):\n        if sum(perm) == 8 and perm[0] != 0 and perm[2] % 2 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "4f279967112d4e8291b26b30696f3212": [
        "def solution():\n    ans = (18 / 16) * (16 * 15) / (5 * 3)\n    return ans\n\nans = solution()"
    ],
    "2ccb49f86adf445b9ee2629356df536a": [
        "def solution():\n    for i in range(6, 55):\n        if i % 5 == 0 and (i + 1) % 7 == 0:\n            return i\n\nans = solution()"
    ],
    "57bbf7c2710645ddb501b125a1011400": [
        "def solution():\n    one_fourth_of_16 = 1 / 4 * 16\n    missing_number = (one_fourth_of_16 / (1 / 2))\n    return int(missing_number)\n\nans = solution()"
    ],
    "486b933d7136464ebf2a797cb5af1ae2": [
        "def solution():\n    # Worst case scenario to not get 5 green beads:\n    # Darrell takes all the blue beads and all the white beads first\n    blue_beads = 5\n    white_beads = 6\n    worst_case_non_green = blue_beads + white_beads\n\n    # To ensure 5 green beads, Darrell must take one more bead after the worst case scenario\n    beads_to_ensure_green = worst_case_non_green + 5\n\n    return beads_to_ensure_green\n\nans = solution()"
    ],
    "a671b7c0ccab40f5bd855f933009765d": [
        "def solution():\n    # Calculate the number of games in each group during the round-robin stage.\n    # In a single round-robin tournament, each team plays every other team exactly once.\n    # Number of games in a round-robin tournament with n teams is C(n, 2) = n*(n-1)/2.\n    group_size = 4\n    games_per_group = (group_size * (group_size - 1)) // 2\n    total_groups = 4\n\n    # The total number of games in the group stage is 4 groups times the number of games per group.\n    group_stage_games = total_groups * games_per_group\n\n    # Calculate the number of games in the knockout stage.\n    # We have top 8, top 4, top 2, and one final match.\n    knockout_stage_games = (8 // 2) + (4 // 2) + (2 // 2)\n\n    # The total number of games is the sum of group stage games and knockout stage games.\n    total_games = group_stage_games + knockout_stage_games\n\n    return total_games\n\nans = solution()"
    ],
    "88fc6c95b74d4d2fac199a6028657150": [
        "def solution():\n    from sympy import symbols, solve\n\n    a, b = symbols('a b')\n\n    # A is twice as good as B, so he can finish in half the time\n    equation1 = Eq(1/a, 2/b)\n\n    # A takes 12 days less than B\n    equation2 = Eq(1/a + 12, 1/b)\n\n    # Solve the equations to find the work rates of A and B\n    work_rates = solve((equation1, equation2), (a, b))\n\n    # Work rate of A\n    a_rate = work_rates[a]\n\n    # Work rate of B\n    b_rate = work_rates[b]\n\n    # Combined work rate of A and B\n    combined_rate = a_rate + b_rate\n\n    # Total time for A and B to complete the work together\n    total_time = 1 / combined_rate\n\n    return total_time.evalf()\n\nans = solution()"
    ],
    "84324bf350214be1afe8ddd33f8aafd5": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # System of congruences:\n    # x = 1 (mod 5)\n    # x = 1 (mod 6)\n    # x = 0 (mod 11)\n    congruences = [(1, 5), (1, 6), (0, 11)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "81791dec21a04fdeb351302cab2f3155": [
        "def solution():\n    first_term = 2\n    last_term = 58\n    common_difference = 4\n\n    num_terms = ((last_term - first_term) // common_difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "7196414549e64d5ca1eabc28ed2a8caa": [
        "from math import factorial\n\ndef solution():\n    total_plants = 9\n    plants_to_arrange = 4\n\n    # Number of ways to arrange potted plants is given by P(n, r) = n! / (n - r)!\n    ways = factorial(total_plants) // factorial(total_plants - plants_to_arrange)\n    return ways\n\nans = solution()"
    ],
    "e103c3656a5446f89488050c094e88fb": [
        "def solution():\n    total_people = 25\n    like_bananas = 18\n    like_apples = 12\n\n    like_both = (like_bananas + like_apples) - total_people\n    \n    return like_both\n\nans = solution()"
    ],
    "bf578d94e713400d83f878025fcbf395": [
        "def solution():\n    final_stickers = 489\n    given_away = 76\n    bought = 65\n\n    initial_stickers = final_stickers - bought + given_away\n\n    return initial_stickers\n\nans = solution()"
    ],
    "b69502e313be4bbcab0a850bb20d73b1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let r be the number of candies Rachel originally has, and a be the number Alice originally has.\n    r, a = symbols('r a')\n\n    # If Rachel gives Alice 10 pieces of candy, they would have the same number of candies\n    # So, r - 10 = a + 10\n    equation1 = Eq(r - 10, a + 10)\n\n    # If Alice gives Rachel 10 pieces of candy, Rachel will have 4 more than 3 times Alice's\n    # So, r + 10 = 3 * (a - 10) + 4\n    equation2 = Eq(r + 10, 3 * (a - 10) + 4)\n\n    # Solving the equations for r and a\n    solutions = solve((equation1, equation2), (r, a))\n\n    # The total number of candies originally is the sum of r and a\n    total_candies = solutions[r] + solutions[a]\n    return total_candies\n\nans = solution()"
    ],
    "ba7ace62e80a46f8982696e6de196708": [
        "def solution():\n    return 158 * 23\n\nans = solution()"
    ],
    "5e0d1fe1598b4b41acce8ca7d7a1255b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pineapple, apple = symbols('pineapple apple')\n    equation1 = Eq(pineapple - apple, 650)\n    equation2 = Eq(3 * pineapple + 4 * apple, 5450)\n\n    solutions = solve((equation1, equation2), (pineapple, apple))\n\n    return solutions[pineapple]\n\nans = solution()"
    ],
    "2174c9eb7abb4f71acfc17373e2a150d": [
        "def solution():\n    # Since we are looking for the smallest number, we can start at 0 and increment\n    number = 0\n    while True:\n        # Check all conditions\n        if number % 3 == 2 and number % 4 == 2 and number % 5 == 2 and number % 7 == 0:\n            return number\n        number += 1\n\nans = solution()"
    ],
    "33fa644455fd44ab8c76126614f2a54f": [
        "def solution():\n    ans = 520 + (180 - 320)\n    return ans\n\nans = solution()"
    ],
    "f0fc9e28a3cd44f985074b04f9b45f45": [
        "from itertools import permutations\n\ndef solution():\n    # The first digit is already given as 8, which satisfies the divisibility by 2\n    digits = '01345679'  # 8 is used, and 2 and 5 are excluded for now\n\n    for perm in permutations(digits):\n        # Inserting 2 and 5 at index 1 and 2 respectively, since the number formed \n        # by first three digits must be divisible by 4, and ending in 2 makes it even.\n        # Additionally, 5 will ensure that the first four digits is divisible by 5.\n        num_str = '8' + ''.join(perm[:3]) + '5' + ''.join(perm[3:]) + '2'\n        \n        # Checking the divisibility of the formed numbers\n        divisible = True\n        for i in range(2, 10):\n            if int(num_str[:i]) % i != 0:\n                divisible = False\n                break\n        \n        if divisible:\n            return int(num_str)\n    \nans = solution()"
    ],
    "68623df2f94648e0b20904cbcc43ed94": [
        "def solution():\n    belinda_tomatoes = 36\n    given_tomatoes = 7\n\n    matthew_tomatoes = belinda_tomatoes - given_tomatoes\n\n    return matthew_tomatoes\n\nans = solution()"
    ],
    "ac5194c88a70467cad49c435e839d329": [
        "def solution():\n    original_rate = 10\n    efficiency_increase = 0.50\n    new_rate = original_rate + (original_rate * efficiency_increase)\n    return new_rate\n\nans = solution()"
    ],
    "91805eebef62437a8beff8b33e922e50": [
        "def solution():\n    from math import sqrt\n    \n    # Prime factorization of the given factors\n    # 15 = 3 * 5\n    # 21 = 3 * 7\n    # The least number that has both 15 and 21 as factors is their least common multiple (LCM)\n    # lcm(15, 21) = 3 * 5 * 7 = 105\n    # Since the number must have exactly 8 factors, \n    # and given that 105 already has four factors (1, 3, 5, 7),\n    # it must be the cube of a prime number or the product of two different prime numbers squared\n    # Prime factors of 105 are 3, 5, 7\n    # Thus, the number could be 3^2 * 5 * 7 or 3 * 5^2 * 7 or 3 * 5 * 7^2\n\n    # Check if 3^2 * 5 * 7 has exactly 8 factors\n    num1 = 3**2 * 5 * 7\n    if len(set([i for i in range(1, num1 + 1) if num1 % i == 0])) == 8:\n        # return the sum of factors\n        factors = set([i for i in range(1, int(sqrt(num1)) + 1) if num1 % i == 0])\n        factors.update([num1 // i for i in factors])\n        return sum(factors)\n\n    # Check if 3 * 5^2 * 7 has exactly 8 factors\n    num2 = 3 * 5**2 * 7\n    if len(set([i for i in range(1, num2 + 1) if num2 % i == 0])) == 8:\n        # return the sum of factors\n        factors = set([i for i in range(1, int(sqrt(num2)) + 1) if num2 % i == 0])\n        factors.update([num2 // i for i in factors])\n        return sum(factors)\n\n    # Check if 3 * 5 * 7^2 has exactly 8 factors\n    num3 = 3 * 5 * 7**2\n    if len(set([i for i in range(1, num3 + 1) if num3 % i == 0])) == 8:\n        # return the sum of factors\n        factors = set([i for i in range(1, int(sqrt(num3)) + 1) if num3 % i == 0])\n        factors.update([num3 // i for i in factors])\n        return sum(factors)\n\n    return \"No solution found\"\n\nans = solution()"
    ],
    "cd2c86b449f14cc58b97e4c02a818e7c": [
        "def solution():\n    from math import gcd\n\n    # The difference between the two numbers\n    diff = 2012 - 1274\n    # Find all the factors of the difference\n    factors = [i for i in range(1, diff + 1) if diff % i == 0]\n    # The largest possible value of D is the gcd of the two numbers\n    max_D = max(factors)\n    # We also know that 2012 = D*q1 + R and 1274 = D*q2 + R\n    # So R = 2012 - D*q1 = 1274 - D*q2\n    # Since we want to maximize D - R, and D is fixed, we need to minimize R.\n    # R is minimized when q1 is maximized, which happens when q1 = 1 (since D and R are positive)\n    # Since D divides diff perfectly, we get R = 0 for max_D\n    # So max_D - R == max_D\n    return max_D\n\nans = solution()"
    ],
    "d912f4012f844228bafad624ceda9c23": [
        "def solution():\n    for rabbits in range(8):\n        ducks = 7 - rabbits\n        if 4 * rabbits + 2 * ducks == 20:\n            return rabbits\n\nans = solution()"
    ],
    "c199e1915ab2422a868443394b9ff1a6": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # We want to solve the following congruences:\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "9005f1b685f54bf5852f34fd3b024fd5": [
        "def solution():\n    total_juice = 630\n    given_to_grace = (5 / 7) * total_juice\n    remainder = total_juice - given_to_grace\n    given_to_evelyn = (1 / 9) * remainder\n    juice_left = remainder - given_to_evelyn\n\n    return juice_left\n\nans = solution()"
    ],
    "64fc86fe03b44fa5a15210295474c594": [
        "def solution():\n    # The last digit of a power of 4 follows a pattern: 4, 6, 4, 6, ..., so the last digit of 4^2009 is 4\n    # The last digit of a power of 6 is always 6\n    # The last digit of the sum of two numbers is the sum of their last digits\n    last_digit_4_power = 4\n    last_digit_6_power = 6\n\n    # Calculate the last digit of the sum\n    ans = (last_digit_4_power + last_digit_6_power) % 10\n\n    return ans\n\nans = solution()"
    ],
    "85f18b88abb847d2ac8ed05a32300b15": [
        "def solution():\n    ways = 0\n    for i in range(32):\n        if (63 - 2 * i) % 5 == 0:\n            ways += 1\n    return ways\n\nans = solution()"
    ],
    "62087bcec6884796a1c5b9acd6d5f3a0": [
        "def solution():\n    # Total height of the six players\n    total_six_players = 6 * 150\n\n    # Average height of the four players\n    average_four_players = 150 - 2\n\n    # Total height of the four players\n    total_four_players = 4 * average_four_players\n\n    # Total height of the other two players\n    total_other_two_players = total_six_players - total_four_players\n\n    # Average height of the other two players\n    average_other_two_players = total_other_two_players / 2\n\n    return average_other_two_players\n\nans = solution()"
    ],
    "5be13676699942f49a395268e1f5d8e8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b, c, pool = symbols('a b c pool')\n    \n    # A and C can fill the pool, where A provides 18 tons\n    equation1 = Eq(a + c, pool)\n    \n    # B (which is twice A) and C can fill the pool, where B provides 27 tons\n    equation2 = Eq(2 * a + c, pool)\n    \n    # We are given that B is twice as productive as A\n    equation3 = Eq(b, 2 * a)\n    \n    # B provides 27 tons\n    equation4 = Eq(b, 27)\n    \n    # Solve the equations for a, b, c and the capacity of the pool\n    solutions = solve((equation1, equation2, equation3, equation4), (a, b, c, pool))\n\n    return solutions[pool]\n\nans = solution()"
    ],
    "bf508186ac3b4867b029488d3fe8ef88": [
        "def solution():\n    # We have two equations for the sums of arithmetic sequences:\n    # Sum of first 8 terms (S8) is 32, and the sum of first 22 terms (S22) is 44.\n    # Using the formula for the sum of the first n terms of an arithmetic sequence:\n    # S_n = n/2 * (2a + (n - 1)d), where a is the first term and d is the common difference.\n    # We have two equations:\n    # S8 = 8/2 * (2a + (8 - 1)d) = 32\n    # S22 = 22/2 * (2a + (22 - 1)d) = 44\n    # We can simplify these to:\n    # 4 * (2a + 7d) = 32\n    # 11 * (2a + 21d) = 44\n    # Dividing both sides by 4 and 11 respectively gives us:\n    # 2a + 7d = 8\n    # 2a + 21d = 4\n    # Now we can solve these two equations for a and d.\n\n    # Subtract the first equation from the second:\n    # (2a + 21d) - (2a + 7d) = 4 - 8\n    # 14d = -4\n    # d = -4 / 14\n    # d = -2 / 7\n\n    # Now, replace the value of d in the first equation to find a:\n    # 2a + 7*(-2 / 7) = 8\n    # 2a - 2 = 8\n    # 2a = 10\n    # a = 5\n\n    # Now we have the first term a and the common difference d.\n    # We can find the sum of the first 15 terms using the formula again:\n    # S15 = 15/2 * (2a + (15 - 1)d)\n\n    a = 5\n    d = -2 / 7\n    n = 15\n\n    S15 = n/2 * (2*a + (n - 1)*d)\n\n    return S15\n\nans = solution()"
    ],
    "4fbbbe33f9d643a79e9eec4d1694212f": [
        "def solution():\n    total_questions = 25\n    # Rex answered all but one of the questions\n    answered_questions = 24\n    score_correct = 4\n    score_incorrect = -2\n    rex_score = 66\n    \n    # Let's denote the number of correct answers Rex had as 'c'\n    # The number of incorrect answers is therefore 'answered_questions - c'\n    # We can set up the following equation based on the problem statement:\n    # c * score_correct + (answered_questions - c) * score_incorrect = rex_score\n    \n    # Now we solve for 'c'\n    for c in range(answered_questions + 1):\n        if c * score_correct + (answered_questions - c) * score_incorrect == rex_score:\n            return c\n\nans = solution()"
    ],
    "836113e2b5c3443e9bf7aa438b3388f2": [
        "def solution():\n    # Winning numbers are those where the opponent has no choice but to give the turn back\n    # to you and be unable to win in their next turn. These are a winning configuration.\n    # The opponent is forced to leave the other player with a winning number.\n    # So we calculate safe numbers, which are those in which if Betty ends up on her turn\n    # then she can guarantee her win, no matter what Abby does.\n    \n    # Initialize an array to represent the status of each number (0 to 52)\n    # Determine whether having that number to write would be a winning (True) \n    # or losing (False) configuration for Betty.\n    win_status = [False] * 53\n    \n    # we go from 1 to 52 to fill up the table of win_status\n    for i in range(1, 53):\n        # If any of the subtracting the allowed numbers gives a losing status for Abby,\n        # then the current number is a winning status for Betty (as she turns the game to Abby with a losing number)\n        if i - 1 >= 0 and not win_status[i - 1]:\n            win_status[i] = True\n        elif i - 3 >= 0 and not win_status[i - 3]:\n            win_status[i] = True\n        elif i - 4 >= 0 and not win_status[i - 4]:\n            win_status[i] = True\n        elif i - 6 >= 0 and not win_status[i - 6]:\n            win_status[i] = True\n\n    # If 52 is a winning status, it means Betty should go first and follow the winning strategy.\n    # If not, she should go second and wait for Abby to make a mistake.\n    betty_should_start = win_status[52]\n\n    # The strategy would be to always bring down Abby to the next lower number \n    # that has a False status (losing configuration for the opponent).\n    strategy = []\n    for i in range(52, 0, -1):\n        if win_status[i]:\n            if i - 1 >= 0 and not win_status[i - 1]:\n                strategy.append((i, 1))\n            elif i - 3 >= 0 and not win_status[i - 3]:\n                strategy.append((i, 3))\n            elif i - 4 >= 0 and not win_status[i - 4]:\n                strategy.append((i, 4))\n            elif i - 6 >= 0 and not win_status[i - 6]:\n                strategy.append((i, 6))\n\n    # Return whether Betty should go first and the strategy Betty should follow\n    # The strategy is returned as a list of tuples which contain the current number and the amount of numbers to write to maintain a win\n    return betty_should_start, strategy\n\nans = solution()"
    ],
    "ace93f555d35415e8fd4bad294887d9e": [
        "def solution():\n    return sum(range(1, 21)) * 2 - 20\n\nans = solution()"
    ],
    "3ad80911c83e482091540057163573aa": [
        "def solution():\n    # there are 5 options for the first letter\n    # for the second letter, we have already used one color, so there are 4 options left\n    # for the third letter, we have used two colors, so there are 3 options left\n    # for the fourth letter, we have used three colors, so there are 2 options left\n    # we multiply these together to get the total number of ways\n    ans = 5 * 4 * 3 * 2\n    return ans\n\nans = solution()"
    ],
    "08e324d694994846a1553d5b65da495f": [
        "def solution():\n    for age in range(10, 100):  # Alberta's age is a two-digit number\n        reversed_age = int(str(age)[::-1])  # Reverse the digits\n        if reversed_age + 1 == age / 2:  # Check if the condition is satisfied\n            return age\n\nans = solution()"
    ],
    "4ee96f3c14a241f197933544bbe8db53": [
        "def solution():\n    original_amount = 9.32\n    increase_fraction = 1/10\n\n    increased_amount = original_amount * (1 + increase_fraction)\n\n    return increased_amount\n\nans = solution()"
    ],
    "c52c9bc9f59d4cbf824806accfda1f41": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_questions = symbols('total_questions')\n\n    first_day = total_questions / 2 + 7\n    second_day = (total_questions - first_day) / 2 - 5\n    third_day = 23\n\n    equation = Eq(first_day + second_day + third_day, total_questions)\n\n    total = solve(equation, total_questions)\n\n    return total[0]\n\nans = solution()"
    ],
    "a8688d554c69475692b7b0ed84cdf3c9": [
        "def solution():\n    fraction_value = 4 / 25\n    decimal_value = 0.17\n\n    ans = \"4/25\" if fraction_value > decimal_value else \"0.17\"\n    return ans\n\nans = solution()"
    ],
    "42372c8fe434451ba8bf5bb0da429399": [
        "def solution():\n    # Initialize the variables, start with a guess that each student can get at least 1 meatball\n    meatballs_per_student = 1\n\n    while True:\n        # Calculate remaining meatballs after initial distribution\n        remaining_after_initial_distribution = 20\n        # Calculate the total meatballs before the last student arrives\n        total_meatballs_before_last_student = remaining_after_initial_distribution + meatballs_per_student\n        # Check if after the last student arrives, the remaining meatballs are 10\n        if total_meatballs_before_last_student % (meatballs_per_student + 1) == 10:\n            # If the condition is met, we have found the solution\n            return meatballs_per_student\n        # Otherwise, increase the guess and try again\n        meatballs_per_student += 1\n\nans = solution()"
    ],
    "9eca731a85d34c5c84ce4315a5438484": [
        "def solution():\n    initial_volume = 1000  # the volume in the jug in ml\n    pour_volume = 200  # the volume poured into each cup in ml\n    cups = 3\n    remaining_water = initial_volume - pour_volume * cups\n    return remaining_water\n\nans = solution()"
    ],
    "3e243b1122134f85813f8fa4e13d7976": [
        "def solution():\n    # From the given information, we have two points in the sequence:\n    # 10th number: 23\n    # 15th number: 38\n    # We can use these to find the common difference\n    n0, a_n0 = 10, 23  # (n0, a_n0) is the 10th term\n    n1, a_n1 = 15, 38  # (n1, a_n1) is the 15th term\n\n    # The common difference d can be calculated as:\n    d = (a_n1 - a_n0) / (n1 - n0)\n\n    # To find the 12th number, we use the formula:\n    # a_n = a_n0 + (n - n0) * d\n    n = 12\n    a_n = a_n0 + (n - n0) * d\n\n    return int(a_n)\n\nans = solution()"
    ],
    "680347d9be334298803934506acbea08": [
        "def solution():\n    ans = 221 * 8\n    return ans\n\nans = solution()"
    ],
    "8a82b904fe8845d7ace8f6031f51ff8b": [
        "def solution():\n    count = 0\n    for i in range(1, 251):\n        if int(i**0.5)**2 == i:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "c419ce5358864ba09eea0ae91783b76f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of roses originally, and y be the number of daisies originally.\n    x, y, months = symbols('x y months')\n\n    # Equation1: Initially, the sum of roses and daisies is 300.\n    equation1 = Eq(x + y, 300)\n    \n    # Equation2: The difference between the future and initial number of roses is equal to the difference in daisies.\n    equation2 = Eq(x - 280, y - 180)\n    \n    # Equation3: After a few months, the number of roses will be 280.\n    equation3 = Eq(x + months, 280)\n    \n    # Equation4: After the same months, the number of daisies will be 180.\n    equation4 = Eq(y + months, 180)\n\n    # Solve the set of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (x, y, months))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "2556a70133494b14a2fdfa3f1d8a534d": [
        "def solution():\n    total_questions = 60\n    correct_answers = (20 / 100) * 10 + (80 / 100) * 20 + (90 / 100) * 30\n    overall_score_percentage = (correct_answers / total_questions) * 100\n    return overall_score_percentage\n\nans = solution()"
    ],
    "9f7d5af3fb5845e58bbb24c28e44207b": [
        "def solution():\n    # Calculate the area covered by one 6 dm brick\n    area_per_brick_6dm = (6 * 10) ** 2  # converting decimeters to centimeters\n    \n    # Calculate total area covered by 80 bricks\n    total_area = area_per_brick_6dm * 80\n    \n    # Calculate the number of 64 cm^2 bricks needed to cover the total area\n    num_bricks_64cm = total_area // 64\n    \n    return num_bricks_64cm\n\nans = solution()"
    ],
    "937225b6b7ac470ab01b68f8a4389aa8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the cost of a bottle of water and a bag of fruit\n    water, fruit = symbols('water fruit')\n\n    # Equation 1: 2 bottles of water and 3 small bags of fruit cost £2.55\n    equation1 = Eq(2 * water + 3 * fruit, 2.55)\n\n    # Equation 2: A bottle of water costs 15p more than a bag of fruit\n    # Convert 15p to pounds by dividing by 100\n    equation2 = Eq(water, fruit + 0.15)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (water, fruit))\n\n    # Get the cost of a bag of fruit from the solutions\n    return solutions[fruit]\n\nans = solution()"
    ],
    "9c96976b9a0644528200db1a240ce22f": [
        "from itertools import permutations\n\ndef solution():\n    max_number = 0\n    for perm in permutations(\"134578\", 6):\n        number = int(\"\".join(perm))\n        if number % 11 == 0 and number > max_number:\n            max_number = number\n    return max_number\n\nans = solution()"
    ],
    "77bc73140f934ab28b377454635f30a4": [
        "def solution():\n    ans = 7 + 8 * 3\n    return ans\n\nans = solution()"
    ],
    "8ee614cba3ae409b923c2260cf36ff3e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n    equation1 = Eq(girls + boys, 500)\n    equation2 = Eq(girls, boys + 30)\n    \n    solutions = solve((equation1, equation2), (girls, boys))\n    \n    return solutions[girls]\n\nans = solution()"
    ],
    "8da16cb231e141899db831c841592f4e": [
        "def solution():\n    number = 91\n    for i in range(2, int(number ** 0.5) + 1):\n        if number % i == 0:\n            return (i, number // i)  # return a tuple of factors\n    return True\n\nans = solution()"
    ],
    "bf9c9c142f014e25baff17cc266a571a": [
        "def solution():\n    for layer in range(1, 1000):  # Assuming a reasonable upper bound for layers\n        # Total number of students in a square layer\n        boys = 4 * layer + (4 * (layer - 1)) \n        girls = 4 * (layer - 1)\n        if boys - girls == 31:\n            # Calculate the total number of students considering all layers\n            square_side = 2 * layer + 1\n            total_students = square_side ** 2\n            return total_students\n    return None\n\nans = solution()"
    ],
    "00bedbbff96a4c41a6d2dc74e09c2bbc": [
        "def solution():\n    # We have 2018 factors of 4 and 2018 factors of 25\n    # so A = 4^2018 * 25^2018\n    # We can rewrite 25 as 5^2, so A = 4^2018 * (5^2)^2018 = 2^(2*2018) * 5^(2*2018)\n    # Therefore, we get A = (2*5)^(2*2018) = 10^(2*2018)\n    # Since 10^1 has 2 digits, 10^n has n+1 digits\n    # A has (2*2018) + 1 digits\n    num_digits = (2*2018) + 1\n    return num_digits\n\nans = solution()"
    ],
    "5b4ba0d6146248b28e891e03399c5b95": [
        "def solution():\n    length_A = 10\n    length_B = 5 * length_A\n    total_length = length_A + length_B\n    return total_length\n\nans = solution()"
    ],
    "209362616733426d8b75bc739a42bd1c": [
        "from math import comb\n\ndef solution():\n    total_players = 5\n    team_size = 3\n    ans = comb(total_players, team_size)\n    return ans\n\nans = solution()"
    ],
    "e66987ea1869420495aacf4803e1a0e6": [
        "def solution():\n    selling_price_1 = 6500\n    profit_percentage_1 = 30\n\n    cost_price = selling_price_1 / (1 + (profit_percentage_1 / 100))\n    \n    additional_profit = 5000 - (selling_price_1 - cost_price)\n    \n    selling_price_2 = cost_price + additional_profit\n\n    profit_percentage_2 = ((selling_price_2 - cost_price) / cost_price) * 100\n    \n    return profit_percentage_2\n\nans = solution()"
    ],
    "2046f9901ec645f3b15da0905103e4b3": [
        "def solution():\n    # Let's denote the initial number of apples as x.\n    # According to the question:\n    # He sold 1/5 of the apples on Monday: (1/5) * x apples\n    # He sold 80 apples on Tuesday.\n    # He was left with 30% of the apples: 0.3 * x apples\n    # Form the equation based on the information: \n    # x - (1/5)x - 80 = 0.3x\n    # Simplify the equation to find the number of apples he had initially (x).\n    x = symbols('x')\n    equation = Eq(x - (1/5)*x - 80, 0.3*x)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n    initial_apples = solution[0]\n\n    # The number of apples he had in the end is 30% of the initial number of apples.\n    end_apples = int(0.3 * initial_apples)\n\n    return end_apples\n\nans = solution()"
    ],
    "928d90a169904ea2a45144f88db5fc41": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10):\n        for x2 in range(1, 10):\n            for x3 in range(1, 10):\n                if x1 + x2 + x3 == 10 and len(set([x1, x2, x3])) == 3:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "1b6cda7ee5184882bed20314b0c55e5b": [
        "def solution():\n    count = 0\n    for x1 in range(1, 14):\n        for x2 in range(x1+1, 14):\n            x3 = 14 - (x1 + x2)\n            if x3 > x2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "fd400a9b34ea45bab56f191197ce87a7": [
        "def solution():\n    length_of_wood = 52\n    # Since the wood is cut into two pieces of equal length\n    length_of_each_piece = length_of_wood / 2\n    return length_of_each_piece\n\nans = solution()"
    ],
    "cab8adbf9a644688a8392376fee0a725": [
        "def solution():\n    total_cookies = 200\n    morning_cookies = total_cookies * (1/5)\n    remainder_cookies = total_cookies - morning_cookies\n    afternoon_cookies = remainder_cookies * (3/4)\n\n    return int(afternoon_cookies)\n\nans = solution()"
    ],
    "4ae3195333ce44baae2440d899e42e7b": [
        "def solution():\n    people_in_front_of_emily = 25\n    people_behind_danny = 16\n    danny_and_emily = 2 # Since Emily is behind Danny, they are 2 people together.\n\n    total_people = people_in_front_of_emily + people_behind_danny + danny_and_emily\n\n    return total_people\n\nans = solution()"
    ],
    "ea3cc6d4b3a84e5bafa81bda550dd59c": [
        "def solution():\n    kilometres = 1.5\n    metres = kilometres * 1000\n    return metres\n\nans = solution()"
    ],
    "d4cf12e04703450586eb3ad6f4fbf86b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    # Define the variable for the first even number\n    x = symbols('x')\n\n    # Create the equation based on the problem statement\n    # Fourth number: x + 3*2 (since they are consecutive even numbers)\n    # First number: x\n    # Seventh number: x + 6*2\n    # Equation: (x + 6) - (1/3)*(x + x + 12) == 6\n    equation = Eq(x + 6, (1/3)*(x + (x + 12)) + 6)\n\n    # Solve the equation\n    first_number = solve(equation, x)[0]\n\n    # Calculate the sum of all seven consecutive numbers\n    sum_seven_numbers = 7 * first_number + 6 * 2  # As they are consecutive even numbers\n\n    return sum_seven_numbers\n\nans = solution()"
    ],
    "95cc2a35844f4793bec67feb3c34b55a": [
        "def solution():\n    total_sum = 9 * 140  # Total sum of 9 numbers\n    remaining_sum = total_sum - 180  # Sum of the other 8 numbers after removing one number\n    average_remaining = remaining_sum / 8  # Average of the remaining 8 numbers\n    return average_remaining\n\nans = solution()"
    ],
    "1fc13706bdfd4125b1f46f271923f69c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    purple, yellow, white, red = symbols('purple yellow white red')\n\n    equation1 = Eq(purple, 2 * yellow)\n    equation2 = Eq(yellow, 3 * white)\n    equation3 = Eq(red + white, 38)\n    equation4 = Eq(red, 28)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (purple, yellow, white, red))\n\n    total_orchids = solutions[purple] + solutions[yellow] + solutions[white] + solutions[red]\n\n    return total_orchids\n\nans = solution()"
    ],
    "40e27d47a03d4eed83ff6c5ccbbd0c12": [
        "def solution():\n    length_of_highway = 45\n    distance_between_trees = 9\n    \n    number_of_trees_per_side = (length_of_highway // distance_between_trees) + 1\n    total_number_of_trees = number_of_trees_per_side * 2\n    \n    return total_number_of_trees\n\nans = solution()"
    ],
    "a69442f9714442b29511db3b6b5cef94": [
        "def solution():\n    # Number of blue markers\n    blue = 80\n    # Number of red markers is twice the number of blue markers\n    red = 2 * blue\n    # Number of green markers is 45 more than the number of blue markers\n    green = blue + 45\n    # Total number of markers purchased\n    total = red + blue + green\n\n    return total\n\nans = solution()"
    ],
    "c95e959b4299436693470a7a54149f3c": [
        "def solution():\n    first_odd_number = 1\n    common_difference = 2\n    nth_term = first_odd_number + (20 - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "6a792aa33daf4ec4a06273453da47af8": [
        "def solution():\n    ans = 5 + 2 # The driver overtakes 5 cars and finishes in second place\n    return ans\n\nans = solution()"
    ],
    "6ddb6579408f43569d88970148692882": [
        "def solution():\n    johnny = 194\n    amber = 5 * johnny\n    remaining = 65\n    initial_rings = johnny + amber + remaining\n    return initial_rings\n\nans = solution()"
    ],
    "8773123676b246e1b04d41c383be9480": [
        "def solution():\n    sides = 9\n    total_angle_sum = (sides - 2) * 180\n    interior_angle = total_angle_sum / sides\n    return interior_angle\n\nans = solution()"
    ],
    "ad1785cf47534eb79f57a2988c26b792": [
        "def solution():\n    # Current age of Eddie and Mike\n    eddie_current_age = 8\n    mike_current_age = 48\n\n    # Difference in years between Mike's current age and when Eddie will be 18\n    years_difference = 18 - eddie_current_age\n\n    # Mike's age when Eddie is 18\n    mike_age_when_eddie_18 = mike_current_age + years_difference\n\n    return mike_age_when_eddie_18\n\nans = solution()"
    ],
    "fe2f6c6e96c74d368dbe56b437d7dbc0": [
        "def solution():\n    lily_book_price = 15.99\n    amy_book_price = lily_book_price + 8.01\n    total_price = lily_book_price + amy_book_price\n    return total_price\n\nans = solution()"
    ],
    "8e8f9986b2ec4a658422dc4b646e598a": [
        "def solution():\n    # Base number\n    base = 5\n    # Prep for accumulation\n    summation = 0\n    \n    # Iterate through the series to compute the sum\n    for i in range(1, 21):\n        summation += int(str(base) * i)  # Concatenate the 5s i times and convert to int\n\n    # Return the last 4 digits of the sum\n    return summation % 10000  # Use % to get the remainder which is equivalent to the last 4 digits\n\nans = solution()"
    ],
    "bacacf9e4d6344c08c919cdfcd0dd171": [
        "def solution():\n    total_people = 200\n    men_percentage = 25 / 100\n    women_fraction = 1 / 5\n\n    men_count = total_people * men_percentage\n    women_count = total_people * women_fraction\n    children_count = total_people - men_count - women_count\n\n    return int(children_count)\n\nans = solution()"
    ],
    "2aa5fb221cec4c6f9ef10acc189afca8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let w be the number of white shirts and c be the number of checked shirts\n    w, c = symbols('w c')\n    \n    # Set up the equation based on the problem statement\n    equation1 = Eq(w, 7 * c)\n    equation2 = Eq(w + c, 72)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (w, c))\n    \n    # Return the number of white shirts sold\n    return solutions[w]\n\nans = solution()"
    ],
    "b985fa2059844dd9846e790e911a7a78": [
        "def solution():\n    # Number of man-days required to build one wall\n    man_days_per_wall = 2 * 3\n    \n    # Number of man-days required to build x walls\n    man_days_for_x_walls = man_days_per_wall * x\n    \n    # Number of days it takes y men to build x walls\n    days_for_y_men_to_build_x_walls = man_days_for_x_walls / y\n    \n    return days_for_y_men_to_build_x_walls\n\n# Assume x and y are given as inputs\nx = 5 # example value for x walls\ny = 10 # example value for y men\n\nans = solution()"
    ],
    "60493d0a930546ecbdb78a1d7c6e8fc5": [
        "def solution():\n    pages_per_day = 16 / 2\n    total_pages = pages_per_day * 9\n    return int(total_pages)\n\nans = solution()"
    ],
    "d95ed3ffcb4c4e158e87923bbb18dbc2": [
        "def solution():\n    ans = 72 + 60 + 48 + 36 + 24 + 12\n    return ans\n\nans = solution()"
    ],
    "3df0c3dde5e243a9ab9d9c0623518d14": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # tuple format (remainder, modulus)\n    congruences = [(2, 3), (3, 4), (4, 5)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "0b0e2b60afe9443a983a2f0c179e8cb6": [
        "def solution():\n    for num in range(999, 99, -1):\n        if num % 9 == 0 and num % 2 != 0 and (num // 10) % 10 % 4 == 0:\n            return num\n\nans = solution()"
    ],
    "124505e7801f407bbb2c337fd03e40c0": [
        "It seems like there's missing information in your question. The value of \"(insert pic)\" is not specified. Could you provide the pattern or the specific details for the figure in question?\nWithout such information, I am unable to generate a Python function to calculate a value or solve the pattern. If you provide the missing details, I'll be glad to help you with the Python solution."
    ],
    "36b9783bc7c540cd8a6f80ea8164926c": [
        "def solution():\n    return 42 // 6\n\nans = solution()"
    ],
    "f18dbb07c7d948eb81cecdc6adc6657e": [
        "def solution():\n    initial_value = 1000\n    depreciation_rate = 0.12\n    years = 8\n\n    final_value = initial_value * ((1 - depreciation_rate) ** years)\n    return final_value\n\nans = solution()"
    ],
    "ae2892dc2b454550bff74338556e93c8": [
        "def solution():\n    for i in range(6, 55):\n        if i % 5 == 0 and (i + 1) % 7 == 0:\n            return i\n\nans = solution()"
    ],
    "39baf06fc25b46b29d10b9191c1761d0": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (4, 5), (5, 6)]\n    number = solve_congruence(*congruences)\n    \n    return number[0]\n\nans = solution()"
    ],
    "3bf359500b04447eb133eb82ac3cdcd6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    girls, boys = symbols('girls boys')\n    total_children = 390\n\n    # One third of the number of girls equals one half of the number of boys\n    equation1 = Eq(girls / 3, boys / 2)\n    \n    # The total number of children is the sum of boys and girls\n    equation2 = Eq(girls + boys, total_children)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (girls, boys))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "a768a55edb6b4c729273848fbd84119b": [
        "def solution():\n    white = 8\n    red = 7\n    green = 5\n    # Since we need to ensure drawing 2 balls of the same color,\n    # we use the worst-case scenario of the pigeonhole principle.\n    # We draw 1 ball from each color first. After that, any additional ball\n    # we draw must match one of the previously drawn balls.\n    # We have three colors, so we draw one from each first.\n\n    draws = white + red + green - 2\n\n    return draws  # The next draw has to match one of the colors\n\nans = solution()"
    ],
    "1f292e7a93ed4fffaa057286ebde0e3e": [
        "def solution():\n    three_quarters = 24\n    original_number = three_quarters * 4 / 3\n    return original_number\n\nans = solution()"
    ],
    "99d84eff6ac64f09ab3bcfb4983bcdfc": [
        "def sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))\n\ndef solution():\n    # Start at 10 because single digit n has S(n) = n, S(n+1) = n+1 which cannot satisfy 5*S(n+1)\n    m = 10\n    while True:\n        if sum_of_digits(m) == 5 * sum_of_digits(m + 1):\n            return m\n        m += 1\n\nans = solution()"
    ],
    "13972553585945499780bd1f9de3edbb": [
        "def solution():\n    k = (100 - 2) / 100\n    return k\n\nans = solution()"
    ],
    "0ac355b21f2a426fa5a12babd8ae8f58": [
        "def solution():\n    total_kg_in_5_days = 24\n    days = 8.5\n    kg_per_day = total_kg_in_5_days / 5\n\n    total_kg_in_85_days = kg_per_day * days\n\n    return total_kg_in_85_days\n\nans = solution()"
    ],
    "e6c4ff2e43db4f879b08144db3336f68": [
        "def solution():\n    temperature_bottom = 17\n    temperature_top = -2\n    drop_in_temperature = temperature_bottom - temperature_top\n    return drop_in_temperature\n\nans = solution()"
    ],
    "c53e746b357140a38e789d2b4661f42f": [
        "def solution():\n    avg_jan_apr = 300\n    avg_may_jul = 250\n    total_aug_sep = 750\n    avg_oct_dec = 300\n\n    months_jan_apr = 4\n    months_may_jul = 3\n    months_aug_sep = 2\n    months_oct_dec = 3\n\n    total_spent_jan_apr = avg_jan_apr * months_jan_apr\n    total_spent_may_jul = avg_may_jul * months_may_jul\n    total_spent_oct_dec = avg_oct_dec * months_oct_dec\n\n    total_spent = total_spent_jan_apr + total_spent_may_jul + total_aug_sep + total_spent_oct_dec\n    total_months = months_jan_apr + months_may_jul + months_aug_sep + months_oct_dec\n    avg_per_month = total_spent / total_months\n\n    return avg_per_month\n\nans = solution()"
    ],
    "978a2a1cb0b648789d46ea37337fec80": [
        "def solution():\n    # Tom's current age\n    tom_age = 10\n    # Father will be 70 years old when Tom reaches his current age\n    father_age_future = 70\n    # Let's find out the difference in age between Tom and his father\n    age_difference = father_age_future - tom_age\n    # Tom's father's current age will be Tom's age plus the difference\n    father_current_age = tom_age + age_difference\n    \n    return father_current_age\n\nans = solution()"
    ],
    "67e73a7f1c6c4c4e9ba62435f2be80d4": [
        "def solution():\n    total_passengers = 400\n    men_passengers = (9 / 20) * total_passengers\n    women_passengers = (30 / 100) * total_passengers\n\n    children_passengers = total_passengers - men_passengers - women_passengers\n    return int(children_passengers)\n\nans = solution()"
    ],
    "895c80e1252f488aa0bcc6bfe68a22ba": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    departure_time = datetime.strptime(\"0735\", \"%H%M\")\n    journey_duration = timedelta(hours=1, minutes=35)\n    walking_duration = timedelta(minutes=40)\n\n    arrival_time = departure_time + journey_duration + walking_duration\n    return arrival_time.strftime(\"%H%M\")\n\nans = solution()"
    ],
    "5b740c87653c43258c0586d8f12663d4": [
        "def solution():\n    ans = []\n    for N in range(200):\n        if sum(int(digit) for digit in format(N, '4')) == 5 and \\\n           sum(int(digit) for digit in format(N, '6')) == 8 and \\\n           sum(int(digit) for digit in format(N, '8')) == 9:\n            ans.append(N)\n    return ans\n\nans = solution()"
    ],
    "f0a5dbe6de374eba85a44510eb9aa5ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jordan, evie, emily = symbols('jordan evie emily')\n\n    equation1 = Eq(jordan, 3 * emily)\n    equation2 = Eq(evie, jordan - 20)\n    equation3 = Eq(jordan + evie + emily, 400)\n\n    solutions = solve((equation1, equation2, equation3), (jordan, evie, emily))\n\n    return solutions[evie]\n\nans = solution()"
    ],
    "f5736677dc6940b8a6a9e5d768b339cf": [
        "def solution():\n    cost_per_six_hotdogs = 1.10\n    number_of_sixes_in_twelve = 12 / 6\n\n    cost_for_twelve_hotdogs = cost_per_six_hotdogs * number_of_sixes_in_twelve\n\n    return cost_for_twelve_hotdogs\n\nans = solution()"
    ],
    "2ff378394a154043a3ef7f34cd20ed7b": [
        "def solution():\n    for digit in range(10):\n        number = int(f\"63{digit}25\")\n        if number % 45 == 0:\n            return digit\n\nans = solution()"
    ],
    "c3b73f89dc164b2c8290804ecfee10f2": [
        "def solution():\n    return 8.3 * 40\n\nans = solution()"
    ],
    "b85bc56d0f9b4a388b112f1d1c98b5ac": [
        "def solution():\n    price_per_bag_in_pence = 16\n    total_amount_in_pence = 200  # £2 is 200 pence\n\n    number_of_bags = total_amount_in_pence / price_per_bag_in_pence\n\n    return int(number_of_bags)\n\nans = solution()"
    ],
    "afcd43f8aadd48d3b3b70d1cd4402d8c": [
        "def solution():\n    # Since the number is three-digit, the first digit cannot be 0.\n    # There are two options for the first digit: 2 or 3.\n    first_digit_options = 2\n\n    # The second and third digits can be 0, 2, or 3, so each have three options.\n    second_digit_options = 3\n    third_digit_options = 3\n\n    # Multiply the options together to get the total number of different numbers.\n    total_numbers = first_digit_options * second_digit_options * third_digit_options\n\n    return total_numbers\n\nans = solution()"
    ],
    "3a737e87377f45d6b533c3df64a44d83": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    chip, dale = symbols('chip dale')\n    \n    # Chip gives away 14 acorns, and then they have the same amount\n    equation1 = Eq(chip - 14, dale)\n    # Total acorns they had initially\n    equation2 = Eq(chip + dale, 124)\n    \n    solutions = solve((equation1, equation2), (chip, dale))\n    return solutions[chip]\n\nans = solution()"
    ],
    "98497b9ada5a4cf096e251a78f90e4f5": [
        "def solution():\n    red_eggs = 8\n    yellow_eggs = red_eggs + 7\n    total_eggs = red_eggs + yellow_eggs\n    return total_eggs\n\nans = solution()"
    ],
    "fd972a8b8be9487fa73a04079ced2d12": [
        "from math import factorial\n\ndef solution():\n    total_books = 6 + 2\n    fiction_books = 6\n    comic_books = 2\n    return factorial(total_books) // (factorial(fiction_books) * factorial(comic_books))\n\nans = solution()"
    ],
    "64f1d8eb28744f888d7b31370fa44497": [
        "def solution():\n    for num in range(2, 100, 2):  # The number is even, so we can step by 2\n        if num % 4 == 0 and num % 3 == 0:  # Multiple of 4 and 3\n            sqrt_num = num**0.5\n            if sqrt_num.is_integer():  # It's a square number\n                return int(num)\n\nans = solution()"
    ],
    "40c82361e0c74a8ea2b45cd4b91a81ca": [
        "def solution():\n    x = symbols('x')\n    total_cost = 8 * x\n\n    return total_cost\n\nans = solution()"
    ],
    "005dea19a47e4533b68eed3a0f0b497c": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(1, 52))  # Get a list of prime numbers up to 51\n    prime_sum = 51\n    primes_sorted = sorted(primes, reverse=True)  # Sort primes in descending order\n    \n    count = 0\n    for prime in primes_sorted:\n        while prime_sum >= prime:\n            prime_sum -= prime\n            count += 1\n        if prime_sum == 0:\n            break\n    \n    return count\n\nans = solution()"
    ],
    "ff3f13e0f5834b50bd1c146b2310996b": [
        "def solution():\n    for num in range(10, 100):  # Loop through all 2-digit numbers\n        if num % 4 == 2 and num % 5 == 2:  # Check the remainder conditions\n            return num  # Return the smallest number that satisfies the conditions\n\nans = solution()"
    ],
    "e8a6833cb7f04cedbeaf3a2156064cdf": [
        "def solution():\n    dividend = 85\n    divisor = 5\n\n    ans = dividend // divisor\n\n    return ans\n\nans = solution()"
    ],
    "18e2a859640043989d18f5185f01a455": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq((2/3)*(x-1) - (1/4)*(3*x+1), 1/6)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "6108bfa174894485b78d31f295206c3f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    science_books, novels = symbols('science_books novels')\n\n    equation1 = Eq(science_books, 6 * novels - 14)\n    equation2 = Eq(novels, science_books - 106)\n\n    solutions = solve((equation1, equation2), (science_books, novels))\n\n    return solutions[science_books]\n\nans = solution()"
    ],
    "528a56a810f04995a3393b4a5b5c2aff": [
        "def solution():\n    eggs_per_tray = 26\n    num_trays = 4\n    total_eggs = eggs_per_tray * num_trays\n    return total_eggs\n\nans = solution()"
    ],
    "18ba329683b9437a99bb36874be11b6d": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            if '5' in str(hour) or '5' in str(minute):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "8b7e921fc69e446a84cae8a24f0dd127": [
        "def solution():\n    principal = 3600\n    rate_of_interest = 0.02\n    \n    interest = principal * rate_of_interest\n    \n    return interest\n\nans = solution()"
    ],
    "9b180ed71aad4dea867c316124171dcc": [
        "def solution():\n    sum = 0\n    sign = 1  # Positive sign for even, negative for odd\n    for i in range(40, 0, -1):\n        sum += sign * i\n        sign *= -1  # Flip the sign\n    return sum\n\nans = solution()"
    ],
    "8890e33ef31b4ccc99ae9b0385739828": [
        "def solution():\n    for i in range(100, 1000):\n        if i % 24 == 0 and i // 24 == 36:\n            return i\n\nans = solution()"
    ],
    "508d839986774182b702b7f8bea45c05": [
        "def solution():\n    total_apples_kg = 2.5\n    apples_for_pie_kg = 750 / 1000\n    apples_for_juice_kg = 1025 / 1000\n\n    remaining_apples_kg = total_apples_kg - (apples_for_pie_kg + apples_for_juice_kg)\n\n    return remaining_apples_kg\n\nans = solution()"
    ],
    "65be0a62238c44a1a81f3a149de3c3e7": [
        "def solution():\n    people_in_front_of_amy = 9\n    position_from_back = 15\n    total_people = people_in_front_of_amy + position_from_back\n\n    return total_people\n\nans = solution()"
    ],
    "f7301d7cd70d47c88eb5997a858caf0c": [
        "def solution():\n    ans = 7 - (-4)\n    return ans\n\nans = solution()"
    ],
    "d9b549ad5efb489b9e021f1fff6fe259": [
        "def solution():\n    initial_height = 17\n    final_height = 65\n    weeks = 4\n    growth_per_week = (final_height - initial_height) / weeks\n    return growth_per_week\n\nans = solution()"
    ],
    "2a58888942e444b482b08c681e223aac": [
        "def solution():\n    total_penpals = 11\n    total_pages = 38\n    \n    # Hypothesis: Suppose Oni wrote all 4-page letters\n    all_four_page = total_penpals * 4\n    \n    # Calculate the excess pages when assuming all letters are 4-page\n    excess_pages = all_four_page - total_pages\n    \n    # The excess page represents the number of penpals\n    # that got 3-page letters because for each of these penpals,\n    # one page less was written (4 - 3 = 1 page less per penpal)\n    num_three_page_penpals = excess_pages // 1\n    \n    return num_three_page_penpals\n\nans = solution()"
    ],
    "5f2651543daf486c9b5689378dd5d200": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the length of the shorter piece of ribbon, then 2x will be the longer piece\n    x = symbols('x')\n    equation = Eq(x + 2*x, 12.75)\n\n    # Solve for x\n    length_shorter_piece = solve(equation, x)[0]\n    length_longer_piece = 2 * length_shorter_piece\n\n    return length_longer_piece\n\nans = solution()"
    ],
    "626a60e2bb934c6c9efb5ecfc8cc7b07": [
        "def solution():\n    # The number of books to the right of her favorite book\n    books_to_right = 6\n    \n    # The position of her favorite book from the left\n    favorite_book_position = 14\n    \n    # Total number of books on the shelf is the position of the favorite book\n    # plus the number of books to the right of it\n    total_books = favorite_book_position + books_to_right\n    \n    return total_books\n\nans = solution()"
    ],
    "432a2792a8fd48ab90470670028065e3": [
        "def solution():\n    original_volume = 1  # Assume original volume is 1 cubic unit for simplicity\n    new_volume = original_volume * (1/2) * (1/2) * (1/2)  # Each dimension is halved\n    original_amount = 1200  # Original amount of cereal in grams\n    new_amount = original_amount * new_volume  # New amount of cereal in the smaller box\n    return new_amount\n\nans = solution()"
    ],
    "db88854e5b9e4689aa2540cd3230716e": [
        "def solution():\n    return 694 * 27\n\nans = solution()"
    ],
    "cff268a0ab3d4d4689a53ee2d5eab94a": [
        "def solution():\n    # If we draw one ball of each color, we have 3 balls.\n    # However, to ensure we have all three colors, we must consider the worst-case scenario.\n    # This is essentially a pigeonhole principle problem where we want to guarantee 3 different \"pigeonholes\" (colors).\n\n    # In the worst case, we could draw all of one color first. So we might draw 5 balls of the same color.\n    # Then we might draw all 5 balls of the second color, still not having all three different colors.\n    # At this point, we have 5 + 5 = 10 balls drawn, all of either two colors.\n\n    # The next ball we draw, no matter what, has to be of the third color.\n    # Therefore, we must draw at least 10 + 1 = 11 balls to ensure we have all three different colors.\n\n    return 11\n\nans = solution()"
    ],
    "34aba952c92541a880a60157ce1f2a2a": [
        "def solution():\n    from sympy import isprime\n    \n    non_prime_count = 0\n    for i in range(1, 21):\n        if not isprime(i):\n            non_prime_count += 1\n    return non_prime_count\n\nans = solution()"
    ],
    "4a59132b51dd42b3907574fc7508b606": [
        "def solution():\n    ans = 8386 // 14  # Performing integer division, because the question implies the need for a whole number result\n    return ans\n\nans = solution()"
    ],
    "763158cf5ddc46bda0149e66cd6e5891": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    gigi_before, lily_before = 120, 24\n    gigi_after, lily_after = symbols('gigi_after lily_after')\n\n    equation1 = Eq(gigi_after, gigi_before + lily_after)\n    equation2 = Eq(lily_after, lily_before + lily_after)\n    equation3 = Eq(gigi_after, 3 * lily_after)\n\n    solutions = solve((equation1, equation2, equation3), (gigi_after, lily_after))\n\n    return solutions[lily_after]\n\nans = solution()"
    ],
    "03ff8fd61a1e4e12875cd66e409c1908": [
        "def solution():\n    # Difference between Brian and his father's age remains constant\n    age_difference = 41 - 14\n\n    # Iterate over Brian's age until the reverse condition is met again\n    for brian_age in range(15, 100):  # Arbitrary end limit of 100\n        father_age = brian_age + age_difference\n        # Check if Brian's age is the reverse of his father's age\n        if str(brian_age) == str(father_age)[::-1]:\n            return brian_age\n\nans = solution()"
    ],
    "f52723613c644fc7a8654b9875518c28": [
        "def solution():\n    total_students = 35\n    cabin_capacity = 6\n\n    min_cabins = (total_students + cabin_capacity - 1) // cabin_capacity\n\n    return min_cabins\n\nans = solution()"
    ],
    "8246bb5345f84017abee88e67f605f55": [
        "def solution():\n    count = 0\n    for hundred in range(1, 10):  # 100's place can have digits 1-9\n        for ten in range(10):     # 10's place can have digits 0-9\n            for one in range(1, 10, 2):  # 1's place must be odd, hence 1, 3, 5, 7, 9\n                if hundred + ten + one == 11:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ac3db56fed3b4b9dadaddbafb7210b8d": [
        "def solution():\n    # It takes 5 minutes to boil an egg. Assuming we can boil multiple eggs at the same time,\n    # the least amount of time it takes to boil 3 eggs is still 5 minutes.\n    time_to_boil_one_egg = 5\n    return time_to_boil_one_egg\n\nans = solution()"
    ],
    "b2ce68cf7f1747dfb2b3a9656328089f": [
        "def solution():\n    calories_taken_yesterday = 1000\n    calories_taken_today = symbols('calories_taken_today')\n    inequality = calories_taken_today < calories_taken_yesterday\n\n    return inequality\n\nans = solution()"
    ],
    "6ae16204dd0c432f9b2b3b1d7e3657bc": [
        "def solution():\n    initial_dough_kg = 11.16\n    cookie_dough_g = 45\n    brownie_dough_g = 150\n    num_cookies = 240\n    num_brownies = 2\n    \n    total_dough_g = initial_dough_kg * 1000\n    used_dough_g = (cookie_dough_g * num_cookies) + (brownie_dough_g * num_brownies)\n    remaining_dough_g = total_dough_g - used_dough_g\n    remaining_dough_kg = remaining_dough_g / 1000\n\n    return remaining_dough_kg\n\nans = solution()"
    ],
    "93c3881ba71b4288b0c393273f475ffb": [
        "def solution():\n    pattern = [70, 71, 72, 71, 70]\n    pattern_length = len(pattern)\n    index = (1004 - 1) % pattern_length  # Subtract 1 because the pattern is 0-indexed\n    return pattern[index]\n\nans = solution()"
    ],
    "7863fd485a6b400695c4ed78bf2cec89": [
        "def solution():\n    total_days = 15\n    starting_amount = 100\n    deposit_amount = 5\n    spend_amount = 8\n    money = starting_amount\n\n    for day in range(1, total_days + 1):\n        if day % 2 == 1:  # Deposit days (odd days)\n            money += deposit_amount\n        else:  # Spend days (even days)\n            money -= spend_amount\n\n    return money\n\nans = solution()"
    ],
    "e350ae84124b4fc6989aada9939cc84a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    n = symbols('n', integer=True, positive=True)\n    a1, d = symbols('a1 d')  # First term and common difference\n    \n    # Equations based on the given arithmetic sequence properties\n    equation1 = Eq(4*a1 + 6*d, 124)        # Sum of first 4 terms: S4 = a1 + (a1+d) + (a1+2d) + (a1+3d)\n    equation2 = Eq(4*a1 + (4*n-10)*d, 156) # Sum of last 4 terms: S4' = (a1+(n-4)d) + ... + (a1+(n-1)d)\n    equation3 = Eq(n*a1 + n*(n-1)*d/2, 210)# Sum of all terms: S = n/2 (2*a1 + (n-1)d)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (a1, d, n))\n    \n    # Since there could be more than one solution, we return the one that makes sense for our problem\n    for sol in solutions:\n        if sol[n] > 0 and sol[n].is_integer:  # Ensure that n is a positive integer\n            return sol[n]\n\nans = solution()"
    ],
    "612ec442ad6443f4a359e99c3e7de273": [
        "def solution():\n    remaining_biscuits = 10\n    \n    # Reverse the second day's action: add 2 and then multiply by 2\n    day_before = (remaining_biscuits + 2) * 2\n    \n    # Reverse the first day's action: add 4 and then multiply by 2\n    original_number = (day_before + 4) * 2\n    \n    return original_number\n\nans = solution()"
    ],
    "eee379a91f664722bc128506d5cbe9a3": [
        "def solution():\n    total_wine_gums = 20\n    number_of_children = 5\n\n    wine_gums_per_child = total_wine_gums // number_of_children\n\n    return wine_gums_per_child\n\nans = solution()"
    ],
    "a0a094786a444fc89f05eba94b8e1741": [
        "def solution():\n    ans = (436 + 721) - (365 + 258)\n    return ans\n\nans = solution()"
    ],
    "01b66abf11cc46dbbbfb8fc1cacabe78": [
        "def solution():\n    ans = 25 * 24\n    return ans\n\nans = solution()"
    ],
    "eb7626e5b04249ad8fe88c3ada4dac42": [
        "def solution():\n    first_term = 10\n    common_difference = 3\n    last_term = 298\n\n    # Calculate number of terms in sequence\n    n = ((last_term - first_term) // common_difference) + 1\n\n    # Calculate sum using the formula for the sum of an arithmetic series\n    sum_of_series = n * (first_term + last_term) // 2\n\n    return sum_of_series\n\nans = solution()"
    ],
    "0a3f07dfc88447c4904fa68658a039cc": [
        "def solution():\n    ans = 84.8 / 400\n    return ans\n\nans = solution()"
    ],
    "00797547355649a7aeaa0ba63a6da114": [
        "def solution():\n    return 5992 // 7\n\nans = solution()"
    ],
    "242aa8419d55484d8e58d0da5659df75": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chocolates, friends = symbols('chocolates friends')\n\n    # Eq1: chocolates = 18*friends + 41\n    # Eq2: chocolates = 23*friends - 34\n    equations = (\n        Eq(18 * friends + 41, chocolates),\n        Eq(23 * friends - 34, chocolates)\n    )\n\n    solutions = solve(equations, (chocolates, friends))\n\n    total_chocolates = solutions[chocolates]\n    rem_chocolates = total_chocolates - 20 * solutions[friends]\n\n    return rem_chocolates\n\nans = solution()"
    ],
    "b2b289d532544e649564ecfd97481da8": [
        "def solution():\n    initial_amount = 200\n    book_percentage = 15\n    dvd_percentage = 30\n\n    spent_on_book = (book_percentage / 100) * initial_amount\n    remaining_after_book = initial_amount - spent_on_book\n    spent_on_dvd = (dvd_percentage / 100) * remaining_after_book\n    remaining_after_dvd = remaining_after_book - spent_on_dvd\n\n    return remaining_after_dvd\n\nans = solution()"
    ],
    "c9055cb54a8e4238a45292b86630682e": [
        "def solution():\n    # Possible 3-digit numbers that are factors of 89100\n    factors_89100 = [i for i in range(100, 1000) if 89100 % i == 0]\n    \n    # Check conditions for each number\n    for num in factors_89100:\n        num_str = str(num)\n        conditions = [\n            num % 27 == 0,  # Condition from student A\n            num % 7 == 0,   # Condition from student B\n            sum(int(digit) for digit in num_str) == 17,  # Condition from student C\n            int(num**0.5) == num**0.5,  # Condition from student D\n        ]\n        \n        # If exactly 3 conditions are True, we found the block number\n        if conditions.count(True) == 3:\n            return num\n\nans = solution()"
    ],
    "ba5d90894baa46bfb336f5a957cccabb": [
        "def solution():\n    # Let m represent the number of push-ups Mulan can do\n    # The inequality representing Mulan can do more push-ups than the best boy soldier is:\n    # m > 50\n    # Since this is a symbolic representation and not a numerical calculation, the solution is\n    # Simply returning the inequality in a string format or similar.\n    return \"m > 50\"\n\nans = solution()"
    ],
    "f2ee218e18d746598a977b19436df816": [
        "def solution():\n    total_balloons = 40\n    blown_up = 22\n    burst = 3\n    still_needed = total_balloons - (blown_up - burst)\n    return still_needed\n\nans = solution()"
    ],
    "a3164e1c9a684eb6985ada44124f8660": [
        "def solution():\n    return 3 * 27.6\n\nans = solution()"
    ],
    "4d68899272944beeb370dd566bd82e48": [
        "def solution():\n    halfway_number = (15 + 37) / 2\n    return halfway_number\n\nans = solution()"
    ],
    "8379e6cdd21b409f88bd041595e96f86": [
        "def solution():\n    import math\n\n    # Total number of teams\n    teams = 32\n\n    # In a knockout tournament, number of games required is one less than the number of teams\n    total_games_to_be_played = teams - 1\n\n    # Games already played\n    games_played = 16\n\n    # Games remaining\n    games_remaining = total_games_to_be_played - games_played\n\n    return games_remaining\n\nans = solution()"
    ],
    "297630efead3458f83114baea5177aa8": [
        "def solution():\n    # Calculate the minimum each child can get if no two children get the same number of pieces\n    # Start with 1, then 2, then 3, ..., up to 8 different amounts\n    min_candies = sum(range(1, 9))\n\n    # The remaining candies that can be distributed to the child who gets the most\n    remaining_candies = 88 - min_candies\n\n    # The least possible number of pieces that the child can get is the sum\n    # of the minimum candies for 8 children plus the remaining candies\n    least_pieces_for_most = 8 + remaining_candies\n\n    return least_pieces_for_most\n\nans = solution()"
    ],
    "4d1afc03690e4059a20150252e9aa14a": [
        "def solution():\n    # Tom takes 4 stones from Stack B\n    stack_a_tom = 20\n    stack_b_tom = 16\n    \n    # Jerry must leave both stacks with an equal number of stones to ensure his win.\n    # Since Tom has already taken from stack B, Jerry needs to take stones from stack A\n    # to make both stacks equal.\n    \n    stack_a_jerry = stack_b_tom  # Jerry aims to make Stack A equal to Stack B\n    \n    # Jerry takes the following number of stones from Stack A:\n    stones_to_take_jerry = stack_a_tom - stack_a_jerry\n    \n    # Jerry's action\n    if stones_to_take_jerry > 0:\n        return f\"Jerry must take {stones_to_take_jerry} stone(s) from Stack A.\"\n    else:\n        return \"No possible winning move for Jerry.\"\n\nans = solution()"
    ],
    "4883a159ef4841db869cc5b99c3cb8e9": [
        "def solution():\n    volume_per_pail = 4\n    number_of_pails = 4\n    remaining_water = 7\n\n    original_volume = (volume_per_pail * number_of_pails) + remaining_water\n\n    return original_volume\n\nans = solution()"
    ],
    "70882e282f9e400e9ee36f2422f02038": [
        "def solution():\n    # Boy to girl ratio\n    ratio_girls = 7\n    ratio_boys = 9\n\n    # There are 16 more boys than girls\n    difference = 16\n\n    # Let the common multiple be x\n    # girls = 7x, boys = 9x\n    # 9x - 7x = 16\n    x = difference / (ratio_boys - ratio_girls)\n\n    # Total number of pupils\n    total_pupils = (ratio_girls + ratio_boys) * x\n\n    return int(total_pupils)\n\nans = solution()"
    ],
    "1f11408ee01e48db98990edeed513497": [
        "def solution():\n    correct_sum = (1 + (1 + (37 - 1) * 3)) * 37 / 2\n    mistake = correct_sum - 2011\n\n    for i in range(1, 38):\n        if (1 + (i - 1) * 3) - mistake == (1 + (i - 2) * 3):\n            return i\n\nans = solution()"
    ],
    "61ae1572690948d28178f82d9d76d770": [
        "def solution():\n    circumference = 840\n    interval = 14\n    \n    num_trees = circumference // interval\n    return num_trees\n\nans = solution()"
    ],
    "c5d3aa356bb54af391702fd40639b5a9": [
        "def solution():\n    milk_per_cake = 10 / 12\n    shortcakes_made = 25 / milk_per_cake\n    return int(shortcakes_made)\n\nans = solution()"
    ],
    "ddd57f21e2e3415fb85f06496019817a": [
        "def solution():\n    ans = 2.7 + 5.31 - 0.08\n    return ans\n\nans = solution()"
    ],
    "9f102133c2f64e46b998d847ff6646d4": [
        "def solution():\n    # Let the middle number of the five consecutive natural numbers be x.\n    # Then the numbers are (x - 2), (x - 1), x, (x + 1), and (x + 2).\n    # We know that the sum of these numbers is 160.\n    # Therefore, the equation is (x - 2) + (x - 1) + x + (x + 1) + (x + 2) = 160.\n\n    # Simplifying the equation, we get 5x = 160.\n    x = 160 // 5\n\n    # Now, the student with the most balls has (x + 2).\n    most_balls = x + 2\n    return most_balls\n\nans = solution()"
    ],
    "2cd006f14c7e4d62957c102b37ad3764": [
        "def solution():\n    for hundreds in range(1, 10):\n        for ones in range(10):\n            M = hundreds * 100 + ones\n            S = hundreds + ones\n            if M == 67 * S:\n                reversed_M = int(str(M)[::-1])\n                return reversed_M // S\n\nans = solution()"
    ],
    "c616e250bb3a4ea28dc67bcaf6e13e3c": [
        "def solution():\n    length_in_cm = 2 * 100  # converting 2 meters to cm\n    piece_length = 6  # length of each piece in cm\n\n    num_pieces = length_in_cm // piece_length  # using floor division to get complete pieces\n\n    return num_pieces\n\nans = solution()"
    ],
    "ba849ade4b5b4888ba3f01dfb7156e06": [
        "from math import comb\n\ndef solution():\n    total_balls = 10\n    select_balls = 7\n    return comb(total_balls, select_balls)\n\nans = solution()"
    ],
    "13881a97e1fa4780b71be7965da96d93": [
        "def solution():\n    ones_digit_pattern = [8**i % 10 for i in range(1, 5)]\n    cycle_length = len(ones_digit_pattern)\n    position_in_cycle = 30 % cycle_length - 1\n    return ones_digit_pattern[position_in_cycle]\n\nans = solution()"
    ],
    "1f7ecb3b2fa446d9a36c3db0462423d0": [
        "def solution():\n    total_pages = 400\n    average_pages_per_day = 40\n\n    num_days = total_pages / average_pages_per_day\n\n    return int(num_days)\n\nans = solution()"
    ],
    "67e5ac39390942c8a80324b810ad995a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    # Declare symbols for a, b, c\n    a, b, c = symbols('a b c', integer=True)\n\n    # Set up the equation based on the given fraction expression\n    equation = Eq(13/10, 1 + 1 / (a + 1 / (b + 1 / c)))\n\n    # Solve the equation\n    sol = solve(equation, (a, b, c))\n\n    # We are guaranteed to have a list of solutions. Filter valid solutions for whole numbers\n    whole_number_solutions = [s for s in sol if all(map(lambda x: x.is_integer and x > 0, s))]\n\n    # There could potentially be more than one solution, but the problem seems to imply\n    # there should be one. Assuming uniqueness and returning first whole number solution.\n    valid_solution = whole_number_solutions[0]\n\n    # Calculate a + 2b + 3c\n    ans = valid_solution[0] + 2 * valid_solution[1] + 3 * valid_solution[2]\n\n    return ans\n\nans = solution()"
    ],
    "739a7e30c1464e608503a893832d84ca": [
        "def solution():\n    # Initialize variables\n    days = 0\n    remaining_peaches = 100\n\n    # Eat peaches starting from the largest possible each day and decrease\n    while remaining_peaches >= days + 1:\n        days += 1\n        remaining_peaches -= days\n    \n    # The final day when peaches are less than the next number to be eaten will be the last day\n    ans = days + (remaining_peaches > 0)\n    return ans\n\nans = solution()"
    ],
    "dfcd76d3d08844e4b30d258dfaddff6c": [
        "def solution():\n    first_term = 10\n    difference = 5\n    last_term = 155\n    \n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_series = (num_terms * (first_term + last_term)) // 2\n    \n    return sum_of_series\n\nans = solution()"
    ],
    "3e2e9cfc559f4b45bfa32bae4770f18e": [
        "def solution():\n    # Assume the number of correct answers is x and the number incorrect is y\n    # Since there are 20 questions in total, we have the equation x + y = 20\n    # For each correct answer, Justin gets 5 points, and for each incorrect, he loses 3 points.\n    # Thus the total score can be represented as 5x - 3y = 52.\n    # We have two equations now:\n    # x + y = 20 (equation 1)\n    # 5x - 3y = 52 (equation 2)\n    # Solving these two equations will give us the value of x, which is what we need.\n    \n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 20)\n    equation2 = Eq(5*x - 3*y, 52)\n\n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "9ea706f25a51493ca9cf1548e9f7723b": [
        "def solution():\n    left_side = 0.3 * 100\n    box_value = 150 / left_side\n    return box_value\n\nans = solution()"
    ],
    "8d827b1dc9424f36a3d0f0d1b0364775": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    \n    equation1 = Eq(girls, boys + 12)\n    equation2 = Eq(boys + girls, 100)\n    \n    solutions = solve((equation1, equation2), (boys, girls))\n    \n    return solutions[boys]\n\nans = solution()"
    ],
    "22edd0e9c1bc4f6b9f43fac11a14a0ea": [
        "def solution():\n    sum_of_numbers = 0\n\n    for number in range(1, 21):\n        if number % 6 == 1:\n            sum_of_numbers += number\n\n    return sum_of_numbers\n\nans = solution()"
    ],
    "1e7aa3e2ce774fb09345a5574b3c93ae": [
        "def solution():\n    sugar = 600 * 0.48  # amount of sugar in grams\n    water = 600 - sugar  # amount of water in grams\n    return water\n\nans = solution()"
    ],
    "77e366a8747b42c7b9ef3a9f1734ce77": [
        "def solution():\n    ans = 53.4 - 2.5\n    return ans\n\nans = solution()"
    ],
    "8ece565c32b34b0a85e297903d183180": [
        "def solution():\n    for N in range(5):\n        number = int(f\"12{N}4\")\n        if number % 3 == 0:\n            return N\n\nans = solution()"
    ],
    "01afed4a053f422f832876b1f67b28f4": [
        "def solution():\n    # Tim calculates multiplication by repeating the addition of one of the factors\n    # the number of times of the other factor. \n    # For 9 * 5, he would repeat the addition of 9, 5 times (or 5, 9 times).\n\n    result = sum([9 for _ in range(5)])\n    \n    return result\n\nans = solution()"
    ],
    "fbfcdbbeb2dd460580732e2456668e09": [
        "def solution():\n    goals = [7, 2, 12, 10, 5, 3, 7, 11, 9, 4]\n    total_goals = sum(goals)\n    num_games = len(goals)\n    mean_goals = total_goals / num_games\n    return mean_goals\n\nans = solution()"
    ],
    "2cfc7d4447c340039a6f001c399114d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b, c, d = symbols('a b c d')\n    eq = Eq(a*1000 + b*100 + c*10 + d + a*100 + b*10 + c + a*10 + b + a, 1370)\n    \n    sol = solve(eq, (a, b, c, d))\n    \n    # Given that a, b, c, d are digits, we choose the solution with digit values\n    for possible_sol in sol:\n        if all(x.is_integer and 0 <= x <= 9 for x in possible_sol):\n            abcd = possible_sol[0]*1000 + possible_sol[1]*100 + possible_sol[2]*10 + possible_sol[3]\n            return abcd\n\nans = solution()"
    ],
    "bc4d4257932a4e18a0a6054b2ad402a3": [
        "def solution():\n    # Calculate the sum of the fractional parts\n    fractional_part = 4/5 * 5\n    \n    # Calculate the sum of the integer parts\n    integer_part = 19 + 199 + 1999 + 19999 + 199999\n\n    # Sum the integer and fractional parts\n    ans = integer_part + fractional_part\n\n    return ans\n\nans = solution()"
    ],
    "06a5dba2a3c2483782a5e76f0725f304": [
        "def solution():\n    amount_pence = 408\n    fraction = 5 / 8\n    \n    result = amount_pence * fraction\n    \n    return result\n\nans = solution()"
    ],
    "ee3ee1e00e154afca5040ce397cbbfac": [
        "def solution():\n    # since the dwarfs were born on the same day, their ages form an arithmetic sequence\n    # the sum of the ages of the youngest three is 42\n    # if the ages are a, a+d, a+2d, ... a+6d (d is the common difference)\n    # sum of the youngest three: a + (a+d) + (a+2d) = 3a + 3d = 42\n    # middle term (the fourth dwarf's age) = a+3d\n    # sum of the oldest three: (a+4d) + (a+5d) + (a+6d) = 3a + 15d\n    # we need to find the sum of the oldest three\n    \n    # from sum of youngest three\n    a_plus_d = 42/3  # since 3a + 3d = 42 => a + d = 14\n    middle_dwarf_age = a_plus_d + 2 * (a_plus_d / 3)  # a + 3d, knowing that a + d is the average and d = a_plus_d / 3\n    \n    # using the middle term theorem for the sum of oldest ages\n    # sum of oldest three = 3 * middle term - sum of youngest three\n    sum_oldest_three = 3 * middle_dwarf_age - 42\n\n    return sum_oldest_three\n\nans = solution()"
    ],
    "75889ef5d68c4e27a3f50900db827671": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of years needed for their total age to be 35\n    x = symbols('x')\n\n    # Janice's age in x years\n    janice_age = 11 + x\n    \n    # Janice's sister's age in x years (sister is 5 years older)\n    sister_age = (11 + 5) + x\n\n    # Equation representing the sum of their ages in x years being 35\n    equation = Eq(janice_age + sister_age, 35)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0be90630e25149ab81224adc5eed02eb": [
        "def solution():\n    total_for_3_tests = 75 * 3\n    total_for_2_tests = 172\n    marks_remaining_test = total_for_3_tests - total_for_2_tests\n\n    return marks_remaining_test\n\nans = solution()"
    ],
    "009d4994f44241d6adfaf6cd25586a33": [
        "def solution():\n    ans = sum(2 * (i / j) for j in range(1, 9) for i in range(1, j+1))\n    return ans - 8  # Subtracting 1 for each completed fraction set (1/1, 2/2, ..., 8/8)\n\nans = solution()"
    ],
    "374399623a6247989f8e869566efbabe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the current ages of the dad and the son\n    dad_age, son_age = symbols('dad_age son_age')\n    \n    # Equation 1: Six years ago, dad's age was 5 times son's age\n    equation1 = Eq(dad_age - 6, 5 * (son_age - 6))\n    \n    # Equation 2: The sum of their ages is 78\n    equation2 = Eq(dad_age + son_age, 78)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (dad_age, son_age))\n    \n    # Get dad's current age\n    return solutions[dad_age]\n\nans = solution()"
    ],
    "6e7c5cd2038a4a78b493c785f03022af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    terry, gerald = symbols('terry gerald')\n\n    # Terry and Gerald wrote 777 words altogether\n    equation1 = Eq(terry + gerald, 777)\n\n    # Gerald wrote 57 more words than Terry\n    equation2 = Eq(gerald, terry + 57)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (terry, gerald))\n\n    return solutions[gerald]\n\nans = solution()"
    ],
    "97a3f06ac00743faa22d113268079816": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the unknowns\n    total_sweets, milk_chocolates, fruit_drops = symbols('total_sweets milk_chocolates fruit_drops')\n\n    # We know that fruit_drops is 6\n    fruit_drops = 6\n\n    # Equations based on the problem statement\n    equation1 = Eq(fruit_drops, 2/7 * milk_chocolates)\n    equation2 = Eq(milk_chocolates, 3/4 * total_sweets)\n\n    # Solve the equations\n    solution = solve((equation1, equation2), (total_sweets, milk_chocolates))\n\n    # Get the total amount of sweets\n    return solution[total_sweets]\n\nans = solution()"
    ],
    "96a62c49fc964fc58960e404634765ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the prices of one football and one volleyball\n    football, volleyball = symbols('football volleyball')\n    \n    # Two equations based on the given information\n    eq1 = Eq(football + 2 * volleyball, 60)\n    eq2 = Eq(2 * football, 60 - 16)\n    \n    # Solve the system of equations\n    solved_prices = solve((eq1, eq2), (football, volleyball))\n    \n    # Return the price of one volleyball\n    return solved_prices[volleyball]\n\nans = solution()"
    ],
    "c5979856964d41d596b0d0d097b051db": [
        "def solution():\n    total_number = 1000\n    less_number = 630\n    ans = total_number - less_number\n    return ans\n\nans = solution()"
    ],
    "925f4e025c564ed28a953715c34c7dc2": [
        "def solution():\n    return 57 + 8\n\nans = solution()"
    ],
    "0f51237988594921863438cf9edfab1c": [
        "def solution():\n    n = 20\n    sum_of_cubes = (n*(n+1)//2)**2\n    return sum_of_cubes\n\nans = solution()"
    ],
    "aa07dd133e5a418397ba560c1b9b4019": [
        "def solution():\n    from statistics import mean, median, mode\n    from itertools import permutations\n\n    for ages in permutations(range(1, 22), 5):  # assuming a reasonable max age of 21 for students\n        if mean(ages) == 9 and median(ages) == 8 and mode(ages) == 7 and max(ages) - min(ages) == 6:\n            second_oldest_age = sorted(ages)[-2]\n            return second_oldest_age\n\nans = solution()"
    ],
    "ae6e80cdd9bc412b91d8c35ca30a7537": [
        "def solution():\n    import math\n    num_books = 3\n    arrangements = math.factorial(num_books)\n    return arrangements\n\nans = solution()"
    ],
    "047b5f556fb5469db5a0dd878deb688b": [
        "def solution():\n    first_term = 1\n    last_term = 49\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_terms\n\nans = solution()"
    ],
    "ecec780bcb244e6abbe08afdb7f88ba2": [
        "def solution():\n    import math\n    num_people = 16\n    num_rounds = math.ceil(math.log2(num_people))\n    return num_rounds\n\nans = solution()"
    ],
    "3158da53b8bf4a7584a950b66fcdd9c7": [
        "def solution():\n    # For the guessing and clues given by John, let's setup those clues\n    guess1 = '1703'  # Two digits and positions are correct\n    guess2 = '2745'  # Two digits are correct but positions are wrong\n    guess3 = '3541'  # All digits are correct but positions are wrong\n\n    # We will compare the digits of the guesses with each other to find the correct number\n    for i in range(10):\n        for j in range(10):\n            for k in range(10):\n                for l in range(10):\n                    testing_number = str(i) + str(j) + str(k) + str(l)\n                    if (len(set(testing_number)) == 4 and    # Check if all digits are different\n                        testing_number[0] == guess1[0] and \n                        testing_number[3] == guess1[3] and    # Two digits and positions from guess1 are correct\n                        testing_number.count(guess2[0]) == 1 and \n                        testing_number.count(guess2[1]) == 1 and    # Two digits from guess2 are correct but positions are wrong\n                        testing_number.index(guess2[0]) != 0 and \n                        testing_number.index(guess2[1]) != 1 and\n                        testing_number.index(guess3[0]) != 0 and \n                        testing_number.index(guess3[1]) != 1 and\n                        testing_number.index(guess3[2]) != 2 and \n                        testing_number.index(guess3[3]) != 3 and    # Digits from guess3 are at different positions\n                        guess3[0] in testing_number and\n                        guess3[1] in testing_number and\n                        guess3[2] in testing_number and\n                        guess3[3] in testing_number):    # All digits from guess3 are present\n                        return testing_number  # This is the correct number written by John\n\nans = solution()"
    ],
    "df15059d1f2245d7a0ebad02edda73c2": [
        "def solution():\n    # Define yellow flowers as y\n    y = symbols('y')\n\n    # Red flowers are 3 times yellow flowers\n    red = 3 * y\n\n    # Pink flowers are y - 7\n    pink = y - 7\n\n    # There are 3 pink flowers\n    equation = Eq(pink, 3)\n\n    # Solve the equation to find the number of yellow flowers\n    y_value = solve(equation, y)[0]\n\n    # Calculate the number of red flowers\n    red_value = red.subs(y, y_value)\n\n    # Calculate the total number of red and yellow flowers\n    total_red_yellow = red_value + y_value\n\n    return total_red_yellow\n\nans = solution()"
    ],
    "ca3f6a5eb48f4f8e8b5fa5ab8277b925": [
        "def solution():\n    # A cannot stand on the first or the last, so there are 3 positions A can choose from.\n    positions_for_A = 3\n    # After A chooses a position, the remaining 4 people can be arranged in any order.\n    # So, there are 4! (factorial of 4) ways to arrange the remaining people.\n    import math\n    arrangements_for_others = math.factorial(4)\n    \n    # The total number of ways to line up is the product of the positions A can choose\n    # and the arrangements for the others.\n    total_ways = positions_for_A * arrangements_for_others\n    \n    return total_ways\n\nans = solution()"
    ],
    "f74936f4fb2743fa9280b53676ad92ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(6*x + 3*x + 2, 38 + 5*x - 8*x)\n    \n    ans = solve(equation, x)\n    return ans[0]\n\nans = solution()"
    ],
    "18ce5581f91b49fc8dc1bb6048706547": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    scheduled_time = datetime.strptime(\"17:30\", \"%H:%M\")\n    delay = timedelta(minutes=30)\n    arrival_time = scheduled_time + delay\n    return arrival_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "257cbb8e43a84bf4bc33363d090d12f5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, oranges = symbols('apples oranges')\n\n    # Initial ratio equation: apples/oranges = 3/8\n    equation1 = Eq(apples / oranges, 3 / 8)\n\n    # New ratio equation after removing one apple: (apples - 1)/oranges = 1/3\n    equation2 = Eq((apples - 1) / oranges, 1 / 3)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apples, oranges))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "3f961fb2104d4e9e893a8f97f5406880": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):  # Hundreds digit from 1 to 9\n        for tens in range(0, 10):  # Tens digit from 0 to 9\n            for ones in range(0, 10):  # Ones digit from 0 to 9\n                if tens < hundreds and tens < ones:  # High-low-high condition\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "c66ee3588fd642e996d89671f5c4c45a": [
        "def solution():\n    from math import factorial\n\n    # The problem is asking for the number of derangements, also known as subfactorial or !n\n    # This is a classical problem known as the \"hat-check\" problem\n    # Derangement for n elements can be computed using the formula: !n = (n-1) * (!(n-1) + !(n-2))\n\n    def subfactorial(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return (n-1) * (subfactorial(n-1) + subfactorial(n-2))\n            \n    ans = subfactorial(6)\n    return ans\n\nans = solution()"
    ],
    "30b9c89f50a64d548b5206fecab5e49e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table, chair = symbols('table chair')\n    equation1 = Eq(table, 2 * chair)\n    equation2 = Eq(2 * table + 3 * chair, 280)\n\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "8485b1846a4246249bff0e15b2a80830": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let there be x girls in the morning\n    x = symbols('x')\n    boys_morning = 1.5 * x  # 50% more boys than girls in the morning\n\n    # After 12 boys and 12 girls join\n    boys_afternoon = boys_morning + 12\n    girls_afternoon = x + 12\n\n    # Set up the ratio equation for the afternoon\n    ratio_equation = Eq(boys_afternoon/girls_afternoon, 19/14)\n\n    # Solve the equation for x\n    solved_x = solve(ratio_equation, x)[0]\n\n    # Calculate total number of children in the afternoon using the solved x\n    total_afternoon = boys_afternoon.subs(x, solved_x) + girls_afternoon.subs(x, solved_x)\n\n    return total_afternoon\n\nans = solution()"
    ],
    "f2f7e251a30f4cec8d22cfa15118db43": [
        "def solution():\n    total_students = 500\n    first_floor_rows = 9\n    seats_per_row = 36\n    first_floor_capacity = first_floor_rows * seats_per_row\n    second_floor_students = total_students - first_floor_capacity\n    return second_floor_students\n\nans = solution()"
    ],
    "fad26d9436534871b7a08dd833fbbf68": [
        "def solution():\n    current_term = 56\n    common_ratio = 2\n    next_term = current_term * common_ratio\n    return next_term\n\nans = solution()"
    ],
    "53091b38428546359c01b3a68ba14617": [
        "def solution():\n    total_gifts = 10\n    total_spent = 48\n    notebook_cost = 3\n    colours_cost = 9\n    max_colours = total_spent // colours_cost\n    \n    for boxes_of_colours in range(max_colours + 1):\n        if (total_gifts - boxes_of_colours) * notebook_cost + boxes_of_colours * colours_cost == total_spent:\n            return boxes_of_colours\n\nans = solution()"
    ],
    "ed79c0ee5e45459ca9d0eef32c921bcc": [
        "def solution():\n    ans = sum((-1)**(i+1) * i for i in range(1, 32))\n    return ans\n\nans = solution()"
    ],
    "952275a830de41e986a33a873accdb47": [
        "def solution():\n    ans = 385 // 7\n    return ans\n\nans = solution()"
    ],
    "814dfc7a21bc47f6afecf3149a685506": [
        "def solution():\n    # Let x be the first term of the six consecutive even numbers.\n    # Then, the numbers are x, x+2, x+4, x+6, x+8, x+10.\n    # The sum of these numbers is 6x + 30 = 510.\n    total_sum = 510\n    total_even_numbers = 6\n\n    # Calculate the first term (x) using the sum of arithmetic sequence formula.\n    x = (total_sum - 30) / total_even_numbers\n    \n    # The median of an even number of terms is the average of the two middle terms.\n    # In this case, the middle terms are x+4 and x+6.\n    median = (x + 4 + x + 6) / 2\n\n    # The mean is the sum divided by total number of terms.\n    mean = total_sum / total_even_numbers\n\n    # Calculate the difference between the mean and the median.\n    difference = mean - median\n\n    return difference\n\nans = solution()"
    ],
    "01993ccb07d9483683f5755975ca0a3a": [
        "def solution():\n    count_seven = 0\n    for i in range(3, 48):  # Including 47 in the sequence\n        count_seven += str(i).count('7')\n    return count_seven\n\nans = solution()"
    ],
    "78dd9ae80fbc4599b9a1de7b271c3242": [
        "def solution():\n    card_A = 40\n    card_B = card_A / 2\n    card_C = card_B / 2\n    total_value = card_A + card_B + card_C\n    return total_value\n\nans = solution()"
    ],
    "28db2d3d5a60452a9e31b2965f649f7d": [
        "def solution():\n    n = 50\n    prime_factor_2 = 0\n    prime_factor_5 = 0\n\n    for i in range(2, n+1):\n        while i % 2 == 0:\n            prime_factor_2 += 1\n            i = i // 2\n            \n        while i % 5 == 0:\n            prime_factor_5 += 1\n            i = i // 5\n            \n    return min(prime_factor_2, prime_factor_5)\n    \nans = solution()"
    ],
    "2a2937f5b7644f15afc477aa03c1c930": [
        "def solution():\n    total_weight = 250\n    sugar_concentration = 0.65\n    sugar_weight = total_weight * sugar_concentration\n    return sugar_weight\n\nans = solution()"
    ],
    "c71ea8f69b6c45d38f496733e04f53c0": [
        "def solution():\n    # Let x be the number of games won by Helen\n    # Each game won by Helen increases her total by 2 (1 from Oliver and keeps her own)\n    # Each game won by Oliver decreases Helen's total by 2 (1 to Oliver and loses her own)\n    # Helen originally had 18 cards and Oliver had 22 cards.\n    # After x games, Helen has (18 + 2x) cards and Oliver has (22 - x) cards\n    # Helen has 10 more cards than Oliver\n    # (18 + 2x) = (22 - x) + 10\n    # Solve for x:\n    # 3x = 14\n    x = 14 // 3\n    \n    # Now calculate the number of cards Helen has after x games\n    helen_cards = 18 + 2 * x\n    return helen_cards\n\nans = solution()"
    ],
    "f18ab428f55e4e0181b741b70951b391": [
        "def solution():\n    starting_height = 12\n    climb_up = 23\n    climb_down = 31\n    climb_up_again = 17\n\n    final_height = starting_height + climb_up - climb_down + climb_up_again\n\n    return final_height\n\nans = solution()"
    ],
    "e686a0dd4b2744f6bfffc71fb37c57ec": [
        "def solution():\n    ans = 94 * 38\n    return ans\n\nans = solution()"
    ],
    "09b505251b1a41e4bcb506573632dfd0": [
        "from math import log10\n\ndef solution():\n    N = 5**100\n    num_digits = int(log10(N)) + 1\n    return num_digits\n\nans = solution()"
    ],
    "25b3374bcbaf4146b57baab9709569a8": [
        "def solution():\n    return 25 * 71\n\nans = solution()"
    ],
    "59db59b0e0a842ca9b1e81136fe98f84": [
        "def solution():\n    for i in range(1, 40):\n        if (i + i + 1 + i + 2 + i + 3 + i + 4) == 40:\n            return i\n\nans = solution()"
    ],
    "6345c9979983478692f42a218f423f1a": [
        "def solution():\n    total_numbers = 99\n    prime_numbers = 25\n\n    composite_numbers = total_numbers - prime_numbers - 1  # Subtract 1 to exclude the number 1, which is neither prime nor composite\n    return composite_numbers\n\nans = solution()"
    ],
    "cd13264eaaab461380200e36148f3029": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    strawberries, mangoes = symbols('strawberries mangoes')\n    \n    # Equation based on the given problem\n    equation1 = Eq(mangoes, strawberries + 448)  # mangoes were 448g more than strawberries\n    equation2 = Eq(strawberries, 2 * (mangoes - 900))  # after giving away 900g, strawberries were twice the mangoes\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (strawberries, mangoes))\n\n    return solutions[strawberries]\n\nans = solution()"
    ],
    "057fbde681f548c7a8497fef0220ea57": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * x - 8, 4)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "96b01291e9d14c7c96848c68852976a8": [
        "def solution():\n    ans = 2 * 13 * 3.5\n    return ans\n\nans = solution()"
    ],
    "a295b79b82d040ba90888d02ac50c7b7": [
        "def solution():\n    count = 0\n    for year in range(1900, 2001):\n        if sum(int(digit) for digit in str(year)) == 21:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6b83b3fc0cf6400a82301aaa18e28565": [
        "def solution():\n    total_sweets = 33\n    given_away_sweets = 8\n    remaining_sweets = total_sweets - given_away_sweets\n    return remaining_sweets\n\nans = solution()"
    ],
    "3814b49678af4c93bb25cc8fb167d647": [
        "def solution():\n    fourth_term = 39\n    twelfth_term = 57\n    term_difference = (twelfth_term - fourth_term) // (12 - 4)\n\n    first_term = fourth_term - (4 - 1) * term_difference\n\n    return first_term\n\nans = solution()"
    ],
    "0cdc1772d765463a83d6d817314f35cb": [
        "def solution():\n    digits = [1,3,5,2]\n    digits.sort(reverse=True)\n    largest_number = int(''.join(map(str, digits)))\n    return largest_number\n\nans = solution()"
    ],
    "e5d4d19b2a0b404d86003d303b4bd386": [
        "def solution():\n    return 4400004\n\nans = solution()"
    ],
    "2069f2cb20514f5e86df254f2165bc03": [
        "def solution():\n    from itertools import permutations\n\n    # Create a list of the possible digits\n    digits = ['0', '1', '3', '4', '6', '8', '9']\n\n    # Generate all permutations of the 5-digit number using the possible digits\n    all_permutations = [''.join(p) for p in permutations(digits, 5) if p[0] != '0']\n\n    # Filter out the numbers that are multiples of 9\n    multiples_of_nine = [int(num) for num in all_permutations if int(num) % 9 == 0]\n\n    # Sort the list of numbers that are multiples of 9\n    multiples_of_nine.sort()\n\n    # The largest difference when divided by 9 would be between the largest and smallest numbers\n    M = multiples_of_nine[-1]\n    N = multiples_of_nine[0]\n\n    # Calculate the result\n    result = (M - N) // 9\n\n    return result\n\nans = solution()"
    ],
    "58710cbbe23c42eca9ad3e2a797617c4": [
        "def solution():\n    incorrect_addend = 540\n    correct_addend = 450\n    incorrect_sum = 987\n    # Correct the sum by reversing the mistake\n    correct_sum = incorrect_sum - (incorrect_addend - correct_addend)\n    return correct_sum\n\nans = solution()"
    ],
    "a72010a49704494c91001e683893ccc5": [
        "def solution():\n    for num in range(1, 380):\n        if num * num + num == 380:\n            return num\n\nans = solution()"
    ],
    "2f4cada72bf546d2845330b0771d17c9": [
        "def solution():\n    # Find the total weight of salt in the two solutions\n    salt_30 = 30 * 0.30\n    salt_20 = 20 * 0.20\n    total_salt = salt_30 + salt_20\n    \n    # Find the current total weight of the mixture before adding water\n    total_weight_before_water = 30 + 20\n    \n    # Let's denote the weight of water to add as x grams\n    \n    # After adding water, the weight of the solution becomes (total_weight_before_water + x)\n    # To make the solution 10% salt, the equation is:\n    # (total_weight_before_water + x) * 0.10 = total_salt\n    \n    # Solve for x\n    x = (total_salt - total_weight_before_water * 0.10) / (0.10)\n    \n    return x\n\nans = solution()"
    ],
    "ed6d6de30c0a478ab65c8423f336ce88": [
        "def solution():\n    johnson_speed = 600\n    vicky_speed = 250\n    race_distance = 3000\n    \n    time_johnson = race_distance / johnson_speed\n    time_vicky = race_distance / vicky_speed\n    \n    time_difference = time_vicky - time_johnson\n    \n    return time_difference\n\nans = solution()"
    ],
    "f13a082b45f944e2a679050f7cab968c": [
        "def solution():\n    from sympy import primerange\n\n    # Generate a list of prime numbers within the range 1 to 20\n    primes = list(primerange(1, 21))\n\n    # Calculate the proportion of prime number cards\n    proportion = len(primes) / 20\n\n    return proportion\n\nans = solution()"
    ],
    "1e7ec51916d44aea846598bf1fabbce4": [
        "def solution():\n    return (3.2 + 5.6) / 2\n\nans = solution()"
    ],
    "0533c1ce2f634bc79e510f81aa3623bc": [
        "def solution():\n    # We need to use the Pigeonhole Principle.\n    # For the worst-case scenario, we can draw all different numbers before we start getting a third card of the same number.\n    # There are 13 different numbers, and we can draw 2 cards of each number without getting a third card of the same number.\n    \n    # So, we draw 2 cards each of the 13 numbers, but we don't have a third card of the same number yet.\n    worst_case_draws = 13 * 2\n    \n    # The next card we draw must be a third card of some number.\n    # Thus, we need to add 1 to the worst case scenario to guarantee that we have 3 of the same number.\n    required_draws = worst_case_draws + 1\n    \n    return required_draws\n\nans = solution()"
    ],
    "cd7eb0808ff5495d92aa81f731c5f0a9": [
        "def solution():\n    n = 7 - 12\n    return n\n\nans = solution()"
    ],
    "216ce3bfa9344644a2c44241a09784d3": [
        "def solution():\n    known_numbers = [12, 4, 6, 4, 2, 9, 7]\n    total_known = sum(known_numbers)\n    total_numbers = 8\n    mean_value = 8\n\n    total_sum = mean_value * total_numbers\n    \n    missing_number = total_sum - total_known\n\n    return missing_number\n\nans = solution()"
    ],
    "5a5711bd536c40dd88759a0c885cbbdf": [
        "def solution():\n    # Numbers of each colored balls\n    blue_balls = 80\n    red_balls = 40\n    white_balls = 30\n    \n    # To ensure we get 29 balls of one color, we must pick all balls of the other two colors.\n    # As worst case scenario, we need to pick all white and red balls first.\n    # This would mean we have picked white_balls + red_balls so far without getting 29 of a single color.\n    \n    total_picked_without_29 = white_balls + red_balls\n    \n    # After picking all white and red balls, we pick one more, which must be blue.\n    # This ensures we have 29 balls of at least one color (blue).\n    total_picked_for_first_29 = total_picked_without_29 + 1\n    \n    # Now, to ensure that we get 28 balls of another color, we do the same for the remaining two colors.\n    # Since we have already taken one blue ball to ensure the first 29,\n    # we must take all remaining red balls and one more blue ball.\n    \n    total_picked_without_28_of_second_color = red_balls + 1\n    \n    # After picking all red balls and another blue, we pick one more, which must be either white or blue.\n    # This ensures we have 28 of another color.\n    total_picked_for_first_28 = total_picked_without_28_of_second_color + 1\n    \n    # We already have 10 white balls from the previous picks, so we ignore the last condition.\n    # The total balls picked is the sum for the first 29 and the first 28 of another color.\n    \n    total_picked = total_picked_for_first_29 + total_picked_for_first_28\n    \n    return total_picked\n\nans = solution()"
    ],
    "3a777a84d1174b55af384cb43e211812": [
        "def solution():\n    sum_1_to_50 = 1275\n    sum_2_to_51 = sum_1_to_50 - 1 + 51\n    return sum_2_to_51\n\nans = solution()"
    ],
    "b0463272ddb246178e49ce0075bfc9a7": [
        "def solution():\n    ans = 546 - 287\n    return ans\n\nans = solution()"
    ],
    "31df8f23c61440d0a0f22ef9a6d1d9f1": [
        "def solution():\n    notebooks = [5, 6, 8]\n    calendars = [7, 9]\n    prices = set()\n    \n    for notebook in notebooks:\n        for calendar in calendars:\n            prices.add(notebook + calendar)\n            \n    return len(prices)\n\nans = solution()"
    ],
    "050789f6f9e949ee9482ca9c43230bc9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the amount transferred from each bottle\n    x = symbols('x')\n\n    # After transferring, Bottle A will have a mixture of 5-x litres with 10% lime\n    # and x litres with 20% lime from Bottle B\n    # Thus, the lime amount in Bottle A will be: 0.10*(5-x) + 0.20*x\n    # Total volume in Bottle A will be 5 litres\n\n    # Bottle B will have a mixture of 3-x litres with 20% lime\n    # and x litres with 10% lime from Bottle A\n    # Thus, the lime amount in Bottle B will be: 0.20*(3-x) + 0.10*x\n    # Total volume in Bottle B will be 3 litres\n\n    # Equating the concentration(%) of lime in both bottles\n    equation = Eq(0.10 * (5 - x) + 0.20 * x, 0.20 * (3 - x) + 0.10 * x)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "0031ea04d15446af809c52112342ff37": [
        "def solution():\n    total = 0\n    number_str = \"123\"\n    \n    for i in range(1, 124):\n        total += int(number_str * i)\n        \n    hundreds_digit = (total // 100) % 10\n    \n    return hundreds_digit\n\nans = solution()"
    ],
    "661ce7b23d5040428b44b729610f90df": [
        "def solution():\n    students = 31\n    tables_per_row = 5\n\n    rows_needed = (students + tables_per_row - 1) // tables_per_row\n\n    return rows_needed\n\nans = solution()"
    ],
    "4de8d3bd10bb44b382de57b1cba1fb5f": [
        "def solution():\n    from itertools import permutations\n    \n    # Generate all permutations for D, E, F, G, and H since these can be freely arranged.\n    permutations_deg_4 = list(permutations(['D', 'E', 'G', 'H']))\n    \n    # For each permutation of D, E, G, H, we need to place F next to G and D next to E.\n    # We need to also consider the placements of A, B, and C.\n    count = 0\n    for perm in permutations_deg_4:\n        for i in range(5):\n            for j in range(5):\n                if abs(i - j) > 1:  # Ensure that A and B are not adjacent\n                    for k in range(1, 4):  # C has 3 possible places between A and B (not at the ends)\n                        perm_list = list(perm)\n                        # Insert A, B, and C into the permutation\n                        perm_list.insert(i, 'A')\n                        perm_list.insert(j if j < i else j + 1, 'B')\n                        # Position C between A and B. If B's index is larger, C's index will also move one position.\n                        perm_list.insert(min(i, j) + k, 'C')\n                        # Check if D, E are next to each other and F, G are next to each other\n                        if (('D' in perm_list and 'E' in perm_list[perm_list.index('D') + 1]) or \n                            ('E' in perm_list and 'D' in perm_list[perm_list.index('E') + 1])) and \\\n                           (('F' in perm_list and 'G' in perm_list[perm_list.index('F') + 1]) or \n                            ('G' in perm_list and 'F' in perm_list[perm_list.index('G') + 1])):\n                            count += 1\n    \n    return count\n\nans = solution()"
    ],
    "c85383c567de4d2c87d36c00bdee31a8": [
        "def solution():\n    total_amount = 50 + 20 + 10 + 5\n    brother_amount = total_amount / 3\n\n    for coin in [50, 20, 10, 5]:\n        if total_amount - coin == 2 * brother_amount:\n            return coin\n\nans = solution()"
    ],
    "f39a2ffc63b2451faaf10086c439a64c": [
        "from math import floor\n\ndef solution():\n    # Original dimensions of the painting\n    length_painting = 90  # cm\n    breadth_painting = (2 / 5) * length_painting  # The ratio is 5:2\n    \n    # New length of the lego\n    length_lego = length_painting - 70.5  # cm, 70.5 cm smaller\n    # Since the proportions must remain the same, the ratio for the lego remains 5:2\n    breadth_lego = (2 / 5) * length_lego\n    \n    # Determine the maximum size of breadth\n    max_breadth_lego = floor(breadth_lego)  # The breadth has to be a whole number\n    \n    return max_breadth_lego\n\nans = solution()"
    ],
    "e1f6ce757e814cc98dd8bb318f3ce87e": [
        "def solution():\n    total_people = 25\n    like_bananas = 18\n    like_apples = 12\n\n    both = (like_bananas + like_apples) - total_people\n\n    return both\n\nans = solution()"
    ],
    "b2195314d6904c97819e32043f734644": [
        "def solution():\n    cake_price = 5.50\n    milk_price = 3.75\n    voucher = 1.10\n    \n    total_price = cake_price + milk_price\n    price_after_voucher = total_price - voucher\n    \n    return price_after_voucher\n\nans = solution()"
    ],
    "6ffd313df5c84cbea917dab85c602eb9": [
        "def solution():\n    jaan_distance = 200  # Jaan reached the finish line, covering 200m\n    jaan_speed = 8  # Jaan's speed is 8m/s\n    jaan_time = jaan_distance / jaan_speed  # time taken by Jaan to finish the race\n    \n    kane_distance = 200 - 12.5  # Kane was 12.5m behind Jaan\n    kane_speed = kane_distance / jaan_time  # Kane's speed, covering less distance in the same time as Jaan\n\n    return kane_speed\n\nans = solution()"
    ],
    "d4d4df7fd96047a69ce80699a26c4864": [
        "def solution():\n    ans = 111 - 87\n    return ans\n\nans = solution()"
    ],
    "7516bd8e3a554c9e8a9888a667a1aa56": [
        "def solution():\n    normal_rate = 12\n    overtime_rate = normal_rate * 1.25\n    normal_hours = 8\n    total_hours = 10\n    overtime_hours = total_hours - normal_hours\n\n    total_pay = (normal_hours * normal_rate) + (overtime_hours * overtime_rate)\n\n    return total_pay\n\nans = solution()"
    ],
    "2c4866d958f643a58cb054fe6c157f1e": [
        "def solution():\n    return 35 / 100 * 60\n\nans = solution()"
    ],
    "20914560eb4c46a087218709875442de": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, raj, pete = symbols('john raj pete')\n\n    # Together, they can finish the job in 1 hour -> 1/john + 1/raj + 1/pete = 1\n    eq1 = Eq(1/john + 1/raj + 1/pete, 1)\n\n    # John and Raj can finish the job in 1 hr 12 min -> 1/john + 1/raj = 1/1.2\n    eq2 = Eq(1/john + 1/raj, 1/(1 + 12/60))\n\n    # Raj and Peter can finish the job in 1 hr 30 min -> 1/raj + 1/pete = 1/1.5\n    eq3 = Eq(1/raj + 1/pete, 1/(1 + 30/60))\n\n    solutions = solve((eq1, eq2, eq3), (john, raj, pete))\n\n    raj_time = solutions[raj]  # Raj's time to finish the job alone in hours\n    raj_minutes = raj_time * 60  # Convert hours to minutes\n\n    return raj_minutes\n\nans = solution()"
    ],
    "1cb912909e124af1a7949a343cef8e13": [
        "def solution():\n    for num in range(10, 100):\n        if num % 5 == 3 and num % 7 == 3:\n            return num\n\nans = solution()"
    ],
    "aa03416c5455441d81c098442d3c2d35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    elder, younger = symbols('elder younger')\n\n    # Equation representing the sum of their current ages\n    equation1 = Eq(elder + younger, 42)\n\n    # Equation representing the ages a few years ago\n    equation2 = Eq(elder - younger, 2 * (younger - (elder - younger)))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (elder, younger))\n\n    return solutions[elder]\n\nans = solution()"
    ],
    "dc92fc8ba3454847b1dd2c2308d30548": [
        "def solution():\n    # The number is composed of the sequence 928 repeated.\n    # Length of the sequence is 3 digits, so a 99-digit number is this sequence repeated 33 times.\n    \n    # A property of numbers divisible by 9 is that the sum of its digits is also divisible by 9.\n    # We'll calculate the sum of the digits of each 3-digit sequence and multiply by 33.\n    # We'll then take the remainder of this sum when divided by 9.\n    \n    sum_sequence = 9 + 2 + 8  # Sum of digits in sequence 928\n    total_sum = sum_sequence * 33\n\n    # Calculate the remainder of the total sum divided by 9\n    remainder = total_sum % 9\n\n    return remainder\n\nans = solution()"
    ],
    "d896015adbd04599a2cc26daea95baf7": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x = symbols('x')\n    equation = Eq(1/(1 + 1/(2 + 1/(3 + 1/x))), 30/43)\n    solution = solve(equation, x)\n    return solution[0]\n\nans = solution()"
    ],
    "c9d8078e6b1f44b7ae76553201933a68": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # We want to solve the following congruences:\n    # x ≡ 1 (mod 5)\n    # x ≡ 1 (mod 6)\n    # x ≡ 1 (mod 7)\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    smallest_number = solve_congruence(*congruences)\n\n    return smallest_number[0]\n\nans = solution()"
    ],
    "4f4fb0feeaea4c15b84a9162a5ffbd55": [
        "def solution():\n    for tens in range(1, 10):\n        for ones in range(10):\n            original_number = 10 * tens + ones\n            swapped_number = 10 * ones + tens\n            if swapped_number == original_number // 3 + 3 and original_number % 3 == 0:\n                return original_number\n\nans = solution()"
    ],
    "440aa36a121f47c7b484c8c1f4367f6f": [
        "def solution():\n    boxes_for_14kg = 4\n    kg_per_box = 14 / boxes_for_14kg\n    total_kg = 66.5\n    total_boxes_needed = total_kg / kg_per_box\n    return int(total_boxes_needed)\n\nans = solution()"
    ],
    "3419bae73fb749eeb7ef999b0bb66f8f": [
        "def solution():\n    # Let x be the number of years later for their ages to sum up to 40.\n    # Initially, their ages sum to 34. Each year, both George and his sister get 1 year older.\n    # Thus, each year, the sum of their ages increases by 2.\n\n    # The equation representing the situation is:\n    # 34 + 2x = 40\n\n    # Solving for x:\n    x = (40 - 34) // 2\n\n    return x\n\nans = solution()"
    ],
    "56dd9ea0cff247b9b36fe15ff5d91c1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')  # Let x be the length of the rope, y be the perimeter of the tree\n    \n    equation1 = Eq(10*y + 3, x)\n    equation2 = Eq(12*y - 3, x)\n    \n    solutions = solve((equation1, equation2), (x, y))\n\n    # Calculate the length left for 8 turns\n    length_left_8_turns = solutions[x] - 8 * solutions[y]\n    \n    return length_left_8_turns\n\nans = solution()"
    ],
    "b79a007b43284d9e9fd0dbf5e85e2911": [
        "def solution():\n    countries = 11\n    participants_per_country_needed = 5\n\n    max_participants_without_fulfilling_condition = (countries - 1) * participants_per_country_needed\n    min_participants_to_ensure_condition = max_participants_without_fulfilling_condition + 1\n\n    return min_participants_to_ensure_condition\n\nans = solution()"
    ],
    "5bf4daf22b5a40a9887f31566b2d48fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y, z = symbols('x y z')\n    equation1 = Eq(x + y, 9)\n    equation2 = Eq(y + z, 15)\n    equation3 = Eq(z + x, 12)\n\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n    x_value, y_value, z_value = solutions[x], solutions[y], solutions[z]\n\n    return x_value + y_value + z_value\n\nans = solution()"
    ],
    "57e9c2f24664499ba1b930195f008ac3": [
        "def solution():\n    from math import sqrt\n    # If there are n teams, each team plays n-1 other teams, one home and one away.\n    # Therefore, the number of matches is n*(n-1).\n    # Since each match is played twice, the total matches are n*(n-1)/2 = 30.\n    # We solve the equation n*(n-1) = 60 for n.\n\n    # Quadratic equation: n^2 - n - 60 = 0, which can be solved to find n.\n    # The solutions for a quadratic equation ax^2 + bx + c = 0 are given by (-b +/- sqrt(b^2 - 4ac)) / (2a).\n\n    # In our case, a = 1, b = -1, and c = -60.\n    a = 1\n    b = -1\n    c = -60\n\n    # Calculating discriminant\n    discriminant = b**2 - 4*a*c\n\n    # Calculating both solutions\n    n1 = (-b + sqrt(discriminant)) / (2*a)\n    n2 = (-b - sqrt(discriminant)) / (2*a)\n    \n    # The number of teams must be a positive integer, so we take the positive root\n    ans = int(max(n1, n2))\n    return ans\n\nans = solution()"
    ],
    "eb26143450c84a16921ed5a98f9de962": [
        "def solution():\n    students = 31\n    tables_per_row = 5\n    \n    rows = (students + tables_per_row - 1) // tables_per_row\n    \n    return rows\n\nans = solution()"
    ],
    "0a280d66b3c54260bc3e5e5b92675682": [
        "def solution():\n    ans = 73 + 28 + 37 + 82\n    return ans\n\nans = solution()"
    ],
    "c155a8080b684c068448baa4beb540fd": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 4):\n        A, B, C, D = perm\n        # Assuming the form is ABCD + DCBA\n        sum1 = 1000 * A + 100 * B + 10 * C + D\n        sum2 = 1000 * D + 100 * C + 10 * B + A\n        if sum1 + sum2 == 8888:\n            return A + B + C + D\n    return None\n\nans = solution()"
    ],
    "93017999421c4dfb8d3245edf5e78291": [
        "def solution():\n    total_numbers = 1000\n    numbers_greater_than_1499 = 1999 - 1499\n\n    probability = numbers_greater_than_1499 / total_numbers\n\n    return probability\n\nans = solution()"
    ],
    "a239a2f7efec479d8b6dec2e19b56410": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    kitty, nora = symbols('kitty nora')\n    equation1 = Eq(kitty + nora, 11)\n    equation2 = Eq(kitty, nora + 3)\n\n    solutions = solve((equation1, equation2), (kitty, nora))\n\n    return solutions[kitty]\n\nans = solution()"
    ],
    "c35ec43fb3f648c2add882035b734b41": [
        "def solution():\n    # Given that Catherine has 54 cards which is 5 more than Ben\n    ben_cards = 54 - 5\n    # Ash has three times as many cards as Ben\n    ash_cards = 3 * ben_cards\n    return ash_cards\n\nans = solution()"
    ],
    "48e3194ccba043bc8a5dc6cec126652f": [
        "def solution():\n    return 92 * 503\n\nans = solution()"
    ],
    "467bd772358e49a68cedca5e2cd63eb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_money = symbols('total_money')\n    spent_money = 3 / 7 * total_money\n    remaining_money = total_money - spent_money\n    equation = Eq(spent_money - remaining_money, 12)\n\n    solved = solve(equation, total_money)\n\n    return float(spent_money.subs(total_money, solved[0]))\n\nans = solution()"
    ],
    "61c1df4ae6dc4b04b1f7294d3a316b5c": [
        "def solution():\n    result = (28 - 6) / 2\n    return result\n\nans = solution()"
    ],
    "a12f50c13e3547a0ae15f90b1739b8cc": [
        "def solution():\n    middle_age = 42 / 3\n    oldest_three_sum = (middle_age + 1) + (middle_age + 2) + (middle_age + 3)\n    return int(oldest_three_sum)\n\nans = solution()"
    ],
    "d85b8dc81daa4cff9e229ed18013f421": [
        "def solution():\n    def new_operation(num, dots):\n        return num - sum(range(1, dots))\n    \n    ans = new_operation(111, 7)\n    return ans\n\nans = solution()"
    ],
    "740c2ea1db4846958c463409a773c7f3": [
        "def solution():\n    return 2018 * 17\n\nans = solution()"
    ],
    "9416b780ce1141bb848907b83016fcce": [
        "def solution():\n    # You need to take out at most 2 balls of each color to still not have 3 of the same color\n    # Since there are 4 colors, you can take 2 white, 2 blue, 2 green, and 2 orange\n    # This ensures you don't have 3 of the same color yet.\n    balls_without_three_of_same_color = 2 * 4\n    \n    # Now, when you take one more ball (regardless of color), you will have 3 balls of at least one color\n    balls_to_ensure_three_of_same_color = balls_without_three_of_same_color + 1\n    \n    return balls_to_ensure_three_of_same_color\n\nans = solution()"
    ],
    "d111890eecfe4763af42bdbdd75ef647": [
        "def solution():\n    n = 100 // 5  # Since we're calculating for 5^2 to 100^2 in steps of 5^2\n    sum_of_squares = (1/6) * n * (n + 1) * (2*n + 1)  # Formula for the sum of squares from 1^2 to n^2\n    ans = sum_of_squares * (5**2)  # Adjust the sum to account for the 5^2 factor\n    return int(ans)\n\nans = solution()"
    ],
    "bb1ead10049c43daa3e195435cc53a8d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    stickers, pupils = symbols('stickers pupils')\n\n    equation1 = Eq(stickers - 13 * pupils, 190)\n    equation2 = Eq(stickers - 17 * pupils, 50)\n\n    solutions = solve((equation1, equation2), (stickers, pupils))\n\n    return solutions[stickers]\n\nans = solution()"
    ],
    "c5c71659203f4ee49a62c35017eeabf9": [
        "def solution():\n    salary_per_month = 1.4\n    debt_in_bitcoin = 5.04\n\n    months_needed = debt_in_bitcoin / salary_per_month\n\n    return months_needed\n\nans = solution()"
    ],
    "308d0a3f39044f29afa6faf36c5ef1d5": [
        "def solution():\n    n = 72\n    factors = set()\n    \n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    \n    ans = sum(factors)\n    return ans\n\nans = solution()"
    ],
    "676023bee5544241be8dd837eee97422": [
        "def solution():\n    numbers = [11, 13, 15, 17]\n    average = sum(numbers) / len(numbers)\n    return average\n\nans = solution()"
    ],
    "6f0e1348bfdc4d1ea3352d71e2692834": [
        "def solution():\n    # total toys made by A, B, and C\n    total_toys_ABC = 659\n    # total toys made by A and B\n    total_toys_AB = 447\n    # total toys made by B and C\n    total_toys_BC = 335\n\n    # Lets find out toys made by A and C\n    # since total_toys_ABC is the number of toys made by A, B, and C\n    # If you subtract total_toys_AB from total_toys_ABC you get toys made by C\n    # Similarly if you subtract total_toys_BC from total_toys_ABC you get toys made by A\n\n    # toys made by C\n    toys_C = total_toys_ABC - total_toys_AB\n    # toys made by A\n    toys_A = total_toys_ABC - total_toys_BC\n\n    # Now if we want to find how many toys B made, we subtract the toys A made from total_toys_AB\n    toys_B = total_toys_AB - toys_A\n\n    return toys_B\n\nans = solution()"
    ],
    "f5b829df546b43c1a2a3f325813d409e": [
        "def solution():\n    total_pupils = 500\n    difference = 30\n\n    # Let's assume the number of boys is x.\n    # Then the number of girls will be x + difference.\n    # According to the problem, x + (x + difference) = total_pupils\n    # which simplifies to 2x + difference = total_pupils\n    # The solution for x will give us the number of boys, and x + difference will give us the number of girls.\n    \n    boys = (total_pupils - difference) // 2\n    girls = boys + difference\n\n    return girls\n\nans = solution()"
    ],
    "02b793a0cdc04afdb8f93895a893bda8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    file, storybook = symbols('file storybook')\n    \n    equation1 = Eq(7*file + 4*storybook, 108)\n    equation2 = Eq(5*file + 3*storybook, 80)\n    \n    solutions = solve((equation1, equation2), (file, storybook))\n\n    total_cost = solutions[file] + solutions[storybook]\n\n    return total_cost\n\nans = solution()"
    ],
    "a65f0fe64967475ba4b828d09b4f6362": [
        "def solution():\n    return 1.99 + 2.99 + 3.99 + 4.99\n\nans = solution()"
    ],
    "a4e98db3396e4882871511a7668317b7": [
        "def solution():\n    initial_trays = 7\n    initial_mean = 13\n    additional_trays = 1\n    additional_sausages = 21\n\n    total_initial_sausages = initial_trays * initial_mean\n    total_sausages_now = total_initial_sausages + additional_sausages\n    new_mean = total_sausages_now / (initial_trays + additional_trays)\n\n    return new_mean\n\nans = solution()"
    ],
    "c01ed3d066de41f4b0dc3b432983e51a": [
        "def solution():\n    count = 0\n    for hundreds in range(1, 10):  # Hundreds digit must be between 1 and 9\n        for tens in range(0, 10):  # Tens digit can be between 0 and 9\n            for units in range(0, 10):  # Units digit can be between 0 and 9\n                if hundreds > tens and tens < units and hundreds != units:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "2acae01fc5ad425b87d9eeb0cca3489d": [
        "def solution():\n    # Calculation of division of fractions:\n    # Convert mixed number to improper fraction: 3 1/2 = 7/2\n    numerator = 3 * 2 + 1  # (3 * denominator) + numerator of the mixed number\n    denominator = 2  # Denominator of the mixed number\n    \n    # Division by a fraction is the same as multiplication by its reciprocal: \n    # (7/2) / (1/4) = (7/2) * (4/1)\n    reciprocal_numerator = 4\n    reciprocal_denominator = 1\n    \n    result_numerator = numerator * reciprocal_numerator\n    result_denominator = denominator * reciprocal_denominator\n    \n    ans = result_numerator / result_denominator  # Final result\n    return ans\n\nans = solution()"
    ],
    "3c947304032d4050bb2c1007cb1ba227": [
        "def solution():\n    # Speed of the train (s) can be calculated using the first bridge data\n    # Distance = Speed * Time\n    # (Length of the train + Length of the first bridge) / Time taken to cross the first bridge\n    s = (137 + 263) / 20  # Speed in m/s\n\n    # Time taken to cross the second bridge is 27s\n    # Length of the train + Length of the second bridge = Speed * Time taken to cross the second bridge\n    length_second_bridge = (s * 27) - 137  # Length of the second bridge in meters\n\n    return length_second_bridge\n\nans = solution()"
    ],
    "c7c1666cff0e4299806585caa2a77a6d": [
        "def solution():\n    rani = 456\n    brenda = 528\n    average = (rani + brenda) / 2\n    \n    amount_to_give = brenda - average\n    \n    return amount_to_give\n\nans = solution()"
    ],
    "a5ba7c5275b6482395f95a17e5b4bb62": [
        "def solution():\n    return 8.8 + 5.6\n\nans = solution()"
    ],
    "b0700754dfa7464eb071ad2a5f2c576a": [
        "def solution():\n    ans = 2014 * 40\n    return ans\n\nans = solution()"
    ],
    "879a251dabb24df9ab8ee19fc30fa517": [
        "def solution():\n    ans = (2022 + 4567 * 7890) / (4568 * 7890 - 5778)\n    return ans\n\nans = solution()"
    ],
    "cd598ad9ace144b2bfb79abe93cbc606": [
        "def solution():\n    total_balls = 125\n\n    # Let b be the number of blue balls and r be the number of red balls.\n    # We know that total_balls = b + r, and 2/5 * b = 3/5 * r.\n    # We have to find the value of b - r.\n\n    # We can solve this by setting up two equations:\n    # b + r = total_balls\n    # 2b/5 = 3r/5\n\n    # To simplify the equation, multiply both sides by 5 to eliminate the denominator\n    # 2b = 3r\n\n    # Now express b in terms of r and substitute it in the first equation:\n    # b = (3/2) * r\n    # (3/2) * r + r = total_balls\n\n    # Combine terms to solve for r:\n    # (5/2) * r = total_balls\n    # r = (2/5) * total_balls\n    r = (2/5) * total_balls\n\n    # Now find b using the value of r\n    # b = (3/2) * r\n    b = (3/2) * r\n\n    # Calculate how many more blue balls than red balls\n    difference = b - r\n\n    return int(difference)\n\nans = solution()"
    ],
    "894f8948c65e423aafef61f63e598f12": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watch, handbag = symbols('watch handbag')\n    \n    equation1 = Eq(3 * watch + 5 * handbag, 915)\n    equation2 = Eq(4 * watch + 2 * handbag, 632)\n\n    solutions = solve((equation1, equation2), (watch, handbag))\n\n    total_cost = 2 * solutions[watch] + 2 * solutions[handbag]\n\n    return total_cost\n\nans = solution()"
    ],
    "b12b9f5178d140e682c64da6f1cf80e5": [
        "def solution():\n    # The problem can be approached by giving 1 candy to seven children first\n    # which is the minimum to satisfy each getting at least one candy and all different amounts.\n    candies_given_out = sum(range(1, 8))\n\n    # Now subtract the candies already given out from the total to find the minimum\n    # the last (eighth) child can receive.\n    remaining_candies = 88 - candies_given_out\n    \n    return remaining_candies\n\nans = solution()"
    ],
    "ab227cc9f73a4cb5a765a8c55e9d31b4": [
        "def solution():\n    original_price = 80 + 20\n    discount = 20\n    discount_percent = (discount / original_price) * 100\n\n    return discount_percent\n\nans = solution()"
    ],
    "33f0af890b564ab1aa7a516852f730ee": [
        "def solution():\n    ans = 56 - 7 * 4 / (5 - 3)\n    return ans\n\nans = solution()"
    ],
    "ca443bd6f6ae418ea84d9a56e57912a5": [
        "from itertools import permutations\n\ndef solution():\n    # 7 books can be given in 7P3 ways to the first, second and third student\n    total_permutations = len(list(permutations(range(7), 3)))  \n    \n    # for the remaining 4 books, they can be split amongst the 3 students in any order\n    # we use the stars and bars concept, where books are stars and students are bars,\n    \n    # for 4 books, there are 3 possible places to put 2 bars, that is between the books, \n    # so it is a combination problem where we need to choose 2 places out of 6 (4 + 2 - 1)\n    # we choose 4 - 1 because for 'n' books, there are n-1 places to put the first bar.\n    stars = 4\n    bars = 3\n    split_ways = factorial(stars + bars - 1) // (factorial(bars - 1) * factorial(stars))\n    \n    ans = total_permutations * split_ways\n    return ans\n\nans = solution()"
    ],
    "53e2a3f3ec9744be90c9f22a4ed5982f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    nicole, eddy = symbols('nicole eddy')\n    equation1 = Eq(nicole, 3 * eddy)\n    equation2 = Eq(nicole - 130 + eddy - 38, 24)\n\n    solutions = solve((equation1, equation2), (nicole, eddy))\n\n    return solutions[nicole]\n\nans = solution()"
    ],
    "9d9d88531760402f8ece6a4b9d1e5fd4": [
        "def solution():\n    grandmother_age_2008 = 80\n    daughter_age_1996 = 40\n\n    year_difference = 2008 - 1996\n    # Grandmother's age when daughter was born\n    grandmother_birth_age = grandmother_age_2008 - (daughter_age_1996 + year_difference)\n\n    return grandmother_birth_age\n\nans = solution()"
    ],
    "904f0cdae54f4d4a9375c041f3a5ebf8": [
        "def solution():\n    # Number of individuals excluding the one who starts with the ball\n    others = 3\n    \n    # Number of passes excluding the first pass\n    passes = 2\n    \n    # For each pass, the ball can go to any of the remaining individuals\n    # Since the last pass has to go to the first individual, there are others-1\n    # choices for each of the previous passes.\n    count = (others - 1)**passes\n    \n    return count\n\nans = solution()"
    ],
    "870e50a685df4a29a8af253e6fc7e1bc": [
        "def solution():\n    ans = 3.5 * 0.8 + 5.5 * 0.8 + (4/5) * 1\n    return ans\n\nans = solution()"
    ],
    "9b9cfe3c11e145838950ed7277589f2e": [
        "def solution():\n    # Calculate the amount of salt in Leroy's solution\n    leroy_salt = 200 * 0.35\n    \n    # Calculate the amount of salt in Lenny's solution\n    lenny_salt = 300 * 0.50\n    \n    # Calculate the total amount of salt\n    total_salt = leroy_salt + lenny_salt\n    \n    # Calculate the total weight of the mixed solution\n    total_solution = 200 + 300\n    \n    # Calculate the concentration of the resulting solution\n    concentration = (total_salt / total_solution) * 100\n    \n    return concentration\n\nans = solution()"
    ],
    "ecc3b3f2bec24a058e7c38b24394b25f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mike_candy, valeria_candy, eaten_candy = symbols('mike_candy valeria_candy eaten_candy')\n\n    equation1 = Eq(mike_candy - eaten_candy, 6)\n    equation2 = Eq(valeria_candy - eaten_candy, 22)\n    equation3 = Eq(mike_candy + valeria_candy, 36)\n\n    solutions = solve((equation1, equation2, equation3), (mike_candy, valeria_candy, eaten_candy))\n\n    return solutions[valeria_candy]\n\nans = solution()"
    ],
    "363fad5f614943dfb0cf3e05c47b60d2": [
        "def solution():\n    # Let x be the amount of sugar in the solution.\n    # Since the concentration of sugar is 35%, we have:\n    # x = 0.35 * 300\n    \n    # The total amount of the solution is the sum of the amount of sugar and water.\n    # The amount of water can therefore be calculated as follows:\n    # water_amount = total_amount - sugar_amount\n    sugar_amount = 0.35 * 300\n    total_amount = 300\n    water_amount = total_amount - sugar_amount\n\n    return water_amount\n\nans = solution()"
    ],
    "9a2001545cec4ccaa9dd40221c502641": [
        "def solution():\n    # Given: 12^50 > k^75\n    # Taking the 75th root of both sides to find the largest whole number k\n    # (12^50)^(1/75) > k\n    twelve_power_fifty = 12**50\n    k = twelve_power_fifty**(1/75)\n\n    # As we need the largest whole number k, we take the floor of k\n    from math import floor\n    ans = floor(k)\n    return ans\n\nans = solution()"
    ],
    "e191879db45c48ff90d30488b861c796": [
        "def solution():\n    from math import factorial\n\n    # Total ways to arrange 8 people in a row\n    total_arrangements = factorial(8)\n\n    # Since A and B want to stand next to each other, consider them as a single unit AB\n    # Then we have 7 entities to arrange: AB, C, D, E, F, G, H\n    arrangements_with_AB_together = factorial(7) * 2  # since AB can be BA as well\n\n    # Now consider C and D as a single unit as well, since they refuse to stand next to each other,\n    # We have to calculate the arrangements where they are not together and subtract it from the total.\n    arrangements_with_CD_together = factorial(7) * 2  # CD can be DC as well\n\n    # Subtract arrangements where AB are together and CD are together from the total of AB being together\n    unallowed_arrangements = arrangements_with_AB_together - arrangements_with_CD_together\n\n    # Calculate the valid arrangements where A and B are together, and C and D are not together\n    valid_arrangements = arrangements_with_AB_together - unallowed_arrangements\n\n    return valid_arrangements\n\nans = solution()"
    ],
    "86d05dc47dc744c0ac39d1fd344f31fb": [
        "def solution():\n    oranges_at_end = 133\n    oranges_thrown_away = 34\n    oranges_bought = 25\n\n    # The number of oranges she had at first is the oranges at the end minus the oranges bought plus the ones thrown away\n    oranges_at_first = oranges_at_end - oranges_bought + oranges_thrown_away\n\n    return oranges_at_first\n\nans = solution()"
    ],
    "c67845741aaf419ca66672bdfdbdb918": [
        "def operation_psi(a, b):\n    if a < b:\n        return a * b + 2\n    else:\n        return a - b + 2\n\ndef solution():\n    first_step = operation_psi(14, 13)\n    ans = operation_psi(first_step, 12)\n    return ans\n\nans = solution()"
    ],
    "525762f2f6e042f985a9eb27b6ebb6fd": [
        "def solution():\n    return sum(len(str(i)) for i in range(1, 20))\n\nans = solution()"
    ],
    "88d1b67e1ad54227ad1e912db7853b6a": [
        "def solution():\n    return 694 + 888\n\nans = solution()"
    ],
    "3718c228fa6540b487cde297c66ba680": [
        "def solution():\n    total_students = 36\n    average_score = 89\n    girls_average = 88\n    boys_average = 91\n\n    # Let the number of girls be g\n    # Then, the number of boys will be total_students - g\n    # We set up the equation based on the total score from boys and girls\n    # girls_average * g + boys_average * (total_students - g) = average_score * total_students\n    # 88 * g + 91 * (36 - g) = 89 * 36\n    # We can solve for g (the number of girls)\n\n    from sympy import symbols, Eq, solve\n\n    g = symbols('g')\n    equation = Eq(girls_average * g + boys_average * (total_students - g), average_score * total_students)\n    solution = solve(equation, g)\n\n    return solution[g]\n  \nans = solution()"
    ],
    "26344c38e9c448e8b356d146763a48a2": [
        "def solution():\n    my_fence_time = 6  # hours\n    my_team_size = 5   # people\n    neighbor_fence_time = 5  # hours\n    neighbor_fence_length_factor = 2  # Neighbor's fence is twice as long\n\n    # Work is proportional to the length of the fence, so twice the work is needed\n    # Work done is also inversely proportional to both team size and time\n\n    # Let's calculate the work done by my team on my fence\n    my_work_done = my_team_size * my_fence_time\n\n    # Now we calculate the work needed for the neighbor's fence, which is twice my work\n    neighbor_work_needed = my_work_done * neighbor_fence_length_factor\n\n    # Finally, we calculate the minimum number of people needed to finish the neighbor's work in less than 5 hours\n    # We use ceil to round up to the nearest whole number because we can't have a fraction of a person\n    from math import ceil\n    min_people = ceil(neighbor_work_needed / neighbor_fence_time)\n\n    return min_people\n\nans = solution()"
    ],
    "c3d38fc4ca7d4aab8188ce6862d374c4": [
        "def solution():\n    time_for_one_flight = 12 / (5 - 1)\n    flights_in_30_min = 30 / time_for_one_flight\n    return int(flights_in_30_min)\n\nans = solution()"
    ],
    "a36703deada040f4bfd94e22b7d1fa9b": [
        "def solution():\n    ans = 80 * 30\n    return ans\n\nans = solution()"
    ],
    "cbdb7ff490c04e3a92b3782d84c28e6a": [
        "def solution():\n    butter_per_cookie = 8 / 50\n    cookies_with_given_butter = 21.6 / butter_per_cookie\n    return cookies_with_given_butter\n\nans = solution()"
    ],
    "0416bb6956e54f29ba4f1c69d845e321": [
        "def solution():\n    number_base8 = '12345654321'\n    number_base10 = int(number_base8, 8)\n    \n    remainder_7 = number_base10 % 7\n    remainder_9 = number_base10 % 9\n    \n    return remainder_7 + remainder_9\n\nans = solution()"
    ],
    "d620d54398de4f13a1c45f2bf4327f65": [
        "def solution():\n    ans = 96 // 3\n    return ans\n\nans = solution()"
    ],
    "e377472a9c68458e9891ee67442a2346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    belt, wallet, handbag = symbols('belt wallet handbag')\n\n    equation1 = Eq(handbag, wallet + 300)\n    equation2 = Eq(wallet, belt + 54)\n    equation3 = Eq(belt + wallet + handbag, 840)\n\n    solutions = solve((equation1, equation2, equation3), (belt, wallet, handbag))\n\n    return solutions[belt]\n\nans = solution()"
    ],
    "2d92ec4620534efbbcc9c406a5deeb1f": [
        "def solution():\n    return 513 - 236\n\nans = solution()"
    ],
    "4aedbf6d92b44b4dad2e2eed5fdfabf3": [
        "def solution():\n    # Three years ago, the combined age of the two cats was 7 years.\n    # So, currently, their combined age is 7 + 3 * 2 (since 3 years have passed for both cats) years.\n    current_combined_age = 7 + 3 * 2\n\n    # In four years' time, the combined age of the two cats will be their current age plus 4 * 2 (as 4 years pass for both cats) years.\n    future_combined_age = current_combined_age + 4 * 2\n\n    return future_combined_age\n\nans = solution()"
    ],
    "38aa9d3b89004c14ad2ed83c80367f5f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    book, magazine = symbols('book magazine')\n    equation1 = Eq(2 * book + 3 * magazine, 24.90)\n    equation2 = Eq(book + magazine, 10)\n    \n    solutions = solve((equation1, equation2), (book, magazine))\n    \n    return solutions[magazine]\n\nans = solution()"
    ],
    "bc7bc5a7f5724db3ab52e783cbad387f": [
        "def solution():\n    ans = 637 - 473\n    return ans\n\nans = solution()"
    ],
    "284741c33dc2463f995c4965d27e5abb": [
        "def solution():\n    n = 99  # Define n as the last number before 100, as the summation goes to 99 * 100\n    # Using the formula for the sum of squares\n    sum_of_squares = n * (n + 1) * (2 * n + 1) // 6\n    # The given sequence is the sum of the product of consecutive numbers,\n    # which can be re-written in terms of the sum of squares formula\n    # i.e., 1*2 = 2^2 - 1^2, 2*3 = 3^2 - 2^2, 3*4 = 4^2 - 3^2, ...\n    # So the sequence is equivalent to (2^2 - 1^2) + (3^2 - 2^2) + ... + (100^2 - 99^2)\n    # That is, 100^2 - 1^2\n    ans = 100**2 - sum_of_squares\n    return ans\n\nans = solution()"
    ],
    "6bb84ead0f0149a69267c203c7dcf79f": [
        "def solution():\n    from sympy import factorint\n\n    factors = factorint(2016)\n    exponents = []\n\n    for prime, exponent in factors.items():\n        exponents.append(exponent)\n    \n    num_divisors_of_square = 1\n    for exp in exponents:\n        num_divisors_of_square *= (2 * exp) // 2 + 1\n    \n    return num_divisors_of_square\n\nans = solution()"
    ],
    "006b556a40774bb786928b5e8628397b": [
        "def solution():\n    # Let the first of the three consecutive numbers be n.\n    # Then the next two numbers are n+1 and n+2.\n    # We know that the sum of the three numbers is 60.\n    # Therefore, n + (n+1) + (n+2) = 60\n    # Simplifying, we get 3n + 3 = 60\n    # Subtracting 3 from both sides gives us 3n = 57\n    # Dividing both sides by 3 gives us n = 19\n    n = 19\n    # The largest number is n+2\n    largest_number = n + 2\n    return largest_number\n\nans = solution()"
    ],
    "33aab4041f0f402a8174696b588641a1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    big, small = symbols('big small')\n\n    equation1 = Eq(3 * big + 4 * small, 68)\n    equation2 = Eq(4 * big + 2 * small, 64)\n\n    solutions = solve((equation1, equation2), (big, small))\n\n    return solutions[big]\n\nans = solution()"
    ],
    "3e20cfd987aa4c41955c78eb36cd75ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(7*x - 3*x + 2, 22)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f5bcf94ffda8467a907da5740aab11b5": [
        "def solution():\n    # Number of shirts of other colors\n    non_yellow_shirts = 6 + 4 + 12  # orange + pink + brown\n    # To ensure getting 1 yellow shirt, Annabella must take out all non-yellow shirts plus one\n    ans = non_yellow_shirts + 1\n    return ans\n\nans = solution()"
    ],
    "ebd40fb218054510aeb86c96dfced3fc": [
        "def solution():\n    total_pens_needed = 70 * 3\n    packs_needed = total_pens_needed // 8\n    if total_pens_needed % 8 != 0:\n        packs_needed += 1\n    return packs_needed\n\nans = solution()"
    ],
    "7fadce2ae96f472cb7d9703a5f808b47": [
        "def solution():\n    # A cannot be 0 and the sum is 726 so it has to be less than 7, hence A can be from 1 to 6\n    # Since the letters represent different digits, they also must be different from each other\n    for A in range(1, 7):\n        for B in range(0, 10):\n            for C in range(0, 10):\n                for D in range(0, 10):\n                    # Each digit must be different\n                    if len({A, B, C, D}) == 4:\n                        # Compute the values\n                        ABX = A * 101 + B * 10\n                        CDX = C * 101 + D * 10\n                        # Check if the sum is 726\n                        if ABX + CDX == 726:\n                            return A + B + C + D\n    return None\n\nans = solution()"
    ],
    "96a1c9809ffd4f579596d44d35b5896c": [
        "def solution():\n    return 249 * 31\n\nans = solution()"
    ],
    "dd56e7a3afe744abb3a668a3d42ef994": [
        "def solution():\n    ans = 3.2 + 6.41 + 0.207\n    return ans\n\nans = solution()"
    ],
    "bfc090949ff6429496bb1b10076bb3dd": [
        "def solution():\n    mixed_numbers = [9 + 4/5, 99 + 4/5, 199 + 4/5, 2999 + 4/5, 39999 + 4/5, 1]\n    ans = sum(mixed_numbers)\n    return ans\n\nans = solution()"
    ],
    "d24262d1d37a487682fd61310661cfd5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(6*x, 2 - (3*x - 16))\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "ad5c7faae0734a86b7fadb1303a9f16e": [
        "def solution():\n    # Each cat has 4 legs\n    cat_legs = 4 * 2\n    # Each dog has 4 legs\n    dog_legs = 4 * 2\n    # Each rabbit has 4 legs\n    rabbit_legs = 4 * 1\n    # Each bird has 2 legs\n    birds_legs = 2\n    \n    # Calculate the total legs of cats, dogs and the rabbit\n    total_legs_without_birds = cat_legs + dog_legs + rabbit_legs\n    # Calculate the remaining legs for birds\n    remaining_legs_for_birds = 28 - total_legs_without_birds\n    \n    # Calculate the number of birds\n    number_of_birds = remaining_legs_for_birds / birds_legs\n    \n    return int(number_of_birds)\n\nans = solution()"
    ],
    "2908d71fd0ef401ab05cc4649db1ec58": [
        "def solution():\n    # Analyzing the pattern, we subtract from 94 to 80 which gives us 14,\n    # then from 80 to 73 which gives us 7.\n    # It seems like we are halving the difference each time.\n    # So to find the missing number, we subtract 14 / 2 from 94.\n    \n    difference = (94 - 80) // 2\n    missing_number = 94 - difference\n\n    return missing_number\n\nans = solution()"
    ],
    "7e6235a5f2e34ffeb942f81fedd76b05": [
        "def solution():\n    sugar = 30\n    water = 170\n    total_solution = sugar + water\n    concentration_percentage = (sugar / total_solution) * 100\n    return concentration_percentage\n\nans = solution()"
    ],
    "f569465348234fb386433e1f3c49b08a": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (1, 3), (1, 4), (1, 6), (0, 7)]\n    age, _ = solve_congruence(*congruences)\n\n    return age\n\nans = solution()"
    ],
    "d1da302670c445868750665ea9e1e53d": [
        "def solution():\n    for age in range(1, 58):\n        if age % 7 == 0 and (age + 1) % 9 == 0:\n            return age\n\nans = solution()"
    ],
    "7b9872c76da143f7914b38327c9d1581": [
        "def solution():\n    total_people = 15\n    position_from_front = 9\n\n    position_from_end = total_people - position_from_front + 1\n\n    return position_from_end\n\nans = solution()"
    ],
    "f17a871c84cc4e1fb96fb91b864f0695": [
        "def solution():\n    n = 620 // 20  # Integer division\n    return n\n\nans = solution()"
    ],
    "b496ffab1ef6486791ac9a2562ae6998": [
        "def solution():\n    # 1 litre = 1000 ml\n    juice_carton_volume_ml = 1000  # ml in one carton\n\n    # Sales volumes\n    wine_glass_volume_ml = 100  # ml per wine glass\n    tumbler_volume_ml = 200    # ml per glass tumbler\n\n    # Number of glasses sold daily\n    wine_glasses_sold = 25\n    tumblers_sold = 12\n\n    # Total volume of orange juice sold\n    total_juice_sold_ml = (wine_glasses_sold * wine_glass_volume_ml) + (tumblers_sold * tumbler_volume_ml)\n\n    # Cartons needed (rounding up as they can't buy part of a carton)\n    from math import ceil\n    cartons_needed = ceil(total_juice_sold_ml / juice_carton_volume_ml)\n\n    return cartons_needed\n\nans = solution()"
    ],
    "68464cb7965d42e2974a5374db0adaf7": [
        "def solution():\n    return 125 * 32 * 25 * 7\n\nans = solution()"
    ],
    "9aee79585275499c8017c3e2e4499346": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the number of avocados, peaches and lemons originally be 2x, 9x and 8x respectively\n    a, p, l = symbols('a p l')\n    x = symbols('x')\n    \n    # Set up the equations according to the problem\n    equation1 = Eq(a / p, 2 / 9)\n    equation2 = Eq(p / l, 9 / 8)\n    equation3 = Eq((p - 12) / (l - 60), 6 / 5)\n    \n    # Replace a and l with 2x and 8x in terms of p (9x)\n    equations = (equation1.subs(a, 2 * x), equation2.subs(l, 8 * x), equation3.subs({p: 9 * x, l: 8 * x}))\n    \n    # Solve the system of equations\n    solution = solve(equations, (x, p))\n    x_val = solution[x]\n    \n    # Calculate the number of avocados, peaches and lemons left\n    a_left = 2 * x_val - 52\n    p_left = 9 * x_val - 12\n    l_left = 8 * x_val - 60\n    \n    # Sum up the total number of avocados, peaches and lemons left\n    total_left = a_left + p_left + l_left\n    \n    return total_left\n\nans = solution()"
    ],
    "ac493b6b7d0a401888bc24c649523bc1": [
        "def solution():\n    n = (36 / 3) / 4\n    return n\n\nans = solution()"
    ],
    "c7265fcca4564dfbbed3794cc4c26974": [
        "def solution():\n    count = 0\n    for i in range(1, 61):\n        # Check if the student number is multiple of 3 or 5\n        if i % 3 == 0 and i % 5 == 0:\n            continue  # both, will face away, then towards\n        elif i % 3 == 0 or i % 5 == 0:\n            count -= 1  # one of both, will turn around\n        count += 1  # initial facing towards the teacher\n\n    return count\n\nans = solution()"
    ],
    "368db30ced514aa0a4c14fd84ae26f51": [
        "def solution():\n    from math import lcm\n    \n    # Find LCM of 2, 4, and 6\n    least_common_multiple = lcm(2, 4, 6)\n    \n    # Find the smallest number that has a remainder of 1 when divided by 2, 4, or 6\n    # And check if remainder is 5 when divided by 7\n    age = least_common_multiple + 1\n    while age % 7 != 5:\n        age += least_common_multiple\n        \n    return age\n\nans = solution()"
    ],
    "a04cac85a9884a9187a1ad6d908f193b": [
        "def solution():\n    # The last digit of a number in the form of 2^n repeats every 4 powers\n    # because 2^1 = 2 (last digit -> 2), 2^2 = 4 (last digit -> 4),\n    # 2^3 = 8 (last digit -> 8), 2^4 = 16 (last digit -> 6), and 2^5 = 32 (last digit -> 2).\n    # So for 2^n, the last digit pattern is 2, 4, 8, 6, and it repeats.\n\n    # Since the pattern repeats every 4 numbers, we can find the remainder of the \n    # exponent divided by 4 to determine the last digit.\n    remainder = 859433 % 4\n    \n    # According to the pattern [2, 4, 8, 6], if the remainder is:\n    # 0 -> the last digit is 6\n    # 1 -> the last digit is 2\n    # 2 -> the last digit is 4\n    # 3 -> the last digit is 8\n    if remainder == 0:\n        last_digit = 6\n    elif remainder == 1:\n        last_digit = 2\n    elif remainder == 2:\n        last_digit = 4\n    elif remainder == 3:\n        last_digit = 8\n\n    return last_digit\n\nans = solution()"
    ],
    "43dfa2d812fc44359cbc9ed198dfed87": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's define two symbols: jess and jill\n    jess, jill = symbols('jess jill')\n\n    # Jill has six sweets for every five sweets Jess has\n    equation1 = Eq(jill, 6/5 * jess)\n\n    # Jill gives eight sweets to Jess\n    # After giving sweets, Jill has four sweets for every seven sweets Jess has\n    equation2 = Eq(jill - 8, 4/7 * (jess + 8))\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (jess, jill))\n\n    # The total number of sweets is the sum of sweets Jess and Jill have\n    total_sweets = solutions[jess] + solutions[jill]\n\n    return total_sweets\n\nans = solution()"
    ],
    "76aa21da5d384dccb38483d763fd552d": [
        "from itertools import permutations\n\ndef solution():\n    max_num = 0\n    # Iterate through all possible numbers made up of different digits\n    for i in range(2, 8): # Start from 2 because we need at least two digits to have divisibility\n        for perm in permutations(range(1, 8), i):\n            num = int(''.join(map(str, perm)))\n            if all(num % x == 0 for x in perm):\n                max_num = max(max_num, num)\n    return max_num\n\nans = solution()"
    ],
    "8d91d54e4c4b4bc6b73c53b8dd7ea30a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(52 - (4 * x - 3), 47)\n\n    solutions = solve(equation, x)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "7c0b46427c0c48029b6941ed62bf32c8": [
        "def solution():\n    for num in range(10, 100):\n        if num % 3 == 2 and num % 11 == 2:\n            return num\n\nans = solution()"
    ],
    "531f65fc27864e3a881f25dddace2c6a": [
        "def solution():\n    remainder = 2\n    divisor = 53\n    smallest_number = (120 // divisor + 1) * divisor + remainder\n    return smallest_number\n\nans = solution()"
    ],
    "e3b5e72653f44428b98d1a54dd056bca": [
        "def solution():\n    # Let ab be the weight of Adam and Ben together\n    ab = 102\n\n    # Let bc be the weight of Ben and Carl together\n    bc = 97\n\n    # Let ac be the weight of Adam and Carl together\n    ac = 93\n\n    # The sum of the individual weights double counts the total weight\n    # Total weight = (Adam + Ben) + (Ben + Carl) + (Adam + Carl) - 2 * (Adam + Ben + Carl)\n    # To find the actual total weight, divide the double counted weight by 2\n\n    total_weight = (ab + bc + ac) / 2\n\n    return total_weight\n\nans = solution()"
    ],
    "0de8f8f3eac5485fa0fae9f57ecc6d21": [
        "def solution():\n    return 46 * 37\n\nans = solution()"
    ],
    "c5cba4277873402db4efd1be60e4e847": [
        "def solution():\n    length = 4.5\n    width = 6.2\n    perimeter = 2 * (length + width)\n    return perimeter\n\nans = solution()"
    ],
    "6ffedd49a405465ab88697b2f7d7ae79": [
        "def solution():\n    numbers = [8.05, 8.50, 8.505, 8.055]\n    smallest_number = min(numbers)\n    return smallest_number\n\nans = solution()"
    ],
    "1743bb23aed04ec2b7a7f8fec1d14118": [
        "def solution():\n    height_m = 2\n    height_cm = 2\n    height_total = height_m + (height_cm / 100.0)\n    return height_total\n\nans = solution()"
    ],
    "9bbae54e3737448abd3501177769689d": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Let n be the number of terms, and a be the first term in the sequence\n    n, a = symbols('n a')\n    \n    # The sum of an arithmetic sequence can be expressed as n/2 * (2a + (n - 1)d)\n    # For an odd sequence, d (the common difference) is 2\n    sum_eq = Eq(n/2 * (2*a + (n - 1)*2), 900)\n    \n    # We know both a and n are integers, and since we're looking for consecutive odd numbers,\n    # a has to be odd. We'll search over reasonable values of n to find the maximum value.\n    max_n = 0\n    for n_val in range(1, int(900**(0.5))+1, 2):  # The sequence count likely won't exceed the square root of 900\n        # Since both n and a are odd, their product is odd, and thus we have a sum that is a multiple of n\n        # which also needs to be 900, hence 900 % n should be 0\n        if 900 % n_val == 0:\n            a_val = solve(sum_eq.subs(n, n_val), a)\n          \n            # Ensure a is a positive integer since we're looking for positive consecutive odd numbers\n            if a_val and a_val[0] > 0 and a_val[0].is_integer and (a_val[0] % 2) == 1:\n                max_n = n_val\n\n    return max_n\n\nans = solution()"
    ],
    "b8670c2b439149d7a72fcf4fe146bf96": [
        "def solution():\n    january_saving = 13\n    february_saving = 18\n    march_saving = 5\n    mean_saving = (january_saving + february_saving + march_saving) / 3\n    return mean_saving\n\nans = solution()"
    ],
    "4348474e45be4c4784a60dab18304844": [
        "def solution():\n    first_test = 60\n    second_test = first_test * (1 + 25/100)\n    third_test = second_test * (1 - 20/100)\n    total_marks = first_test + second_test + third_test\n    return total_marks\n\nans = solution()"
    ],
    "481bd4bd37034fc8a43530a5477069e1": [
        "def solution():\n    principal = 5000\n    rate_of_interest = 0.03\n    time = 2\n\n    # Compound interest formula: A = P(1 + r/n)^(nt)\n    # Since the interest is compounded yearly, n = 1\n    amount = principal * (1 + rate_of_interest) ** time\n\n    return amount\n\nans = solution()"
    ],
    "1634653b15164af9958af85781121677": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    bookmarks, pupils = symbols('bookmarks pupils', integer=True)\n    eq1 = Eq(bookmarks - 4*pupils, 8)\n    eq2 = Eq(6*pupils - bookmarks, 10)\n\n    solutions = solve((eq1, eq2), (bookmarks, pupils))\n    return solutions[bookmarks]\n\nans = solution()"
    ],
    "26527b2a0a2c4e4d877500b4ff8a3656": [
        "def solution():\n    count = 0\n    for hour in range(24):\n        for minute in range(60):\n            time_str = f\"{hour:02d}{minute:02d}\"\n            if time_str.count('4') >= 2:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "ffc16ac75f7f47fcb1d3eb07fae6db1e": [
        "def solution():\n    n = 233\n    is_prime = True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            is_prime = False\n            break\n    return is_prime\n\nans = solution()"
    ],
    "f4f08eaaa1b64a658de25585dad20e40": [
        "def solution():\n    sum_squares = sum((7 * i) ** 2 for i in range(1, int(105/7) + 1))\n    return sum_squares\n\nans = solution()"
    ],
    "ba6364de23e74495bec276c83b164e14": [
        "def solution():\n    sum = 4.22 + 31.49 + 0.76\n    return sum\n\nans = solution()"
    ],
    "6c7e9b74e26440e9abed54180422f05b": [
        "def solution():\n    from sympy import primerange\n\n    primes = list(primerange(130, 151))\n\n    return len(primes)\n\nans = solution()"
    ],
    "bfadf094fc4b4d4f952061bbaeb8b5d0": [
        "def solution():\n    start_num = 56\n    end_num = 92\n    multiple_of = 4\n    \n    start_multiple = (start_num + multiple_of - 1) // multiple_of\n    end_multiple = end_num // multiple_of\n    \n    correct_answer = end_multiple - start_multiple + 1\n    \n    return correct_answer\n\nans = solution()"
    ],
    "7e8a739ac409498b80dc7f1731900ebb": [
        "def solution():\n    for num in range(1, 100):\n        if (num % 3 == 2) and (num % 4 == 3) and (num % 5 == 4):\n            return num\n\nans = solution()"
    ],
    "c4f94facc9b340b4a2a6145ef66bc8af": [
        "def solution():\n    jenny_pieces = 6\n    qiqi_pieces = jenny_pieces + 5\n    return qiqi_pieces\n\nans = solution()"
    ],
    "d8643be2681f41c897691ad4ae4d10ab": [
        "def solution():\n    from math import comb\n    ans = comb(15, 2)\n    return ans\n\nans = solution()"
    ],
    "f29917f11bd644f2a9c8e57a6f612d23": [
        "def solution():\n    # Given values\n    distance = 144  # distance between Magic Town and Super Town in km\n    still_water_speed = 15  # speed of the ship in still water in km/h\n    downstream_time = 8  # time taken to go downstream in hours\n\n    # Calculate the speed of the current\n    downstream_speed = distance / downstream_time\n    current_speed = downstream_speed - still_water_speed\n\n    # Speed upstream\n    upstream_speed = still_water_speed - current_speed\n\n    # Time taken to go upstream\n    time_upstream = distance / upstream_speed\n\n    return time_upstream\n\nans = solution()"
    ],
    "94c97ffe57a2432ba8c0eeaa3ce36a92": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    wait_time = timedelta(hours=1, minutes=25)\n    john_waiting_time = datetime.strptime('3:15 PM', '%I:%M %p')\n    meet_time = john_waiting_time + wait_time\n    return meet_time.strftime('%I:%M %p')\n\nans = solution()"
    ],
    "fc103906e8e44feea1ebe0162fb169f5": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]\n    ans = solve_congruence(*congruences)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "c2b06e8dbe5c4834b11b9e8c5471c680": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Create symbols for the amount of food eaten by the kangaroo and the hippo\n    kangaroo = symbols('kangaroo')\n    hippo = symbols('hippo')\n\n    # Create two equations: \n    # 1. The hippo eats 45 kilograms more food than the kangaroo\n    # 2. After 20 days, the hippo has consumed 10 times as much food as the kangaroo.\n    equation1 = Eq(hippo, kangaroo + 45)\n    equation2 = Eq(hippo, 10 * kangaroo)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (hippo, kangaroo))\n\n    return solutions[hippo]\n\nans = solution()"
    ],
    "23289d4f9e054a8bb7c18484e70642db": [
        "def solution():\n    ans = 0\n    for i in range(1, 20):\n        for j in range(i+1, 21):\n            ans += i/j\n    return ans\n\nans = solution()"
    ],
    "5c85b6e4f6b74768adaad620ef94842e": [
        "def solution():\n    # Worker A's rate per day\n    rate_A = 1 / 15\n    # Worker B's rate per day\n    rate_B = 1 / 20\n\n    # Both worker's combined rate per day\n    combined_rate = rate_A + rate_B\n\n    # The amount of work done by both in 2 days\n    work_done = 2 * combined_rate\n\n    # Remaining work to be done\n    remaining_work = 1 - work_done\n\n    # Days required for worker A to finish the remaining job alone\n    days_required_A = remaining_work / rate_A\n\n    return days_required_A\n\nans = solution()"
    ],
    "25336ea78ab34494bb296b208a1d61f0": [
        "def solution():\n    num_zodiac_signs = 12\n    # To guarantee at least 11 students have the same zodiac sign,\n    # we use Pigeonhole Principle: n = k(m-1) + 1,\n    # where m is the minimum number required for the same zodiac sign (here it's 11),\n    # and k is the number of zodiac signs (here it's 12).\n    ans = num_zodiac_signs * (11 - 1) + 1\n    return ans\n\nans = solution()"
    ],
    "bf15675f14f14212bf6c9e9d10c58225": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    students = ['A', 'B', 'C', 'D', 'E', 'F', 'G']\n    \n    for perm in permutations(students):\n        if perm.index('A') > perm.index('B') and perm.index('A') < perm.index('C') or perm.index('A') > perm.index('C') and perm.index('A') < perm.index('B'):\n            if abs(perm.index('D') - perm.index('E')) == 1:\n                if abs(perm.index('F') - perm.index('G')) != 1:\n                    count += 1\n\n    return count\n\nans = solution()"
    ],
    "ffeb5f99fef6492788aecdd5191a6fbc": [
        "def solution():\n    return (20 - 5) / 3\n\nans = solution()"
    ],
    "a9ada9a471c14c9089a859c1a81f4727": [
        "def solution():\n    # Since there are 7 green balls and 8 blue balls,\n    # if we take out 8 balls, we are only guaranteed to have\n    # at least one ball of each color. However, to ensure\n    # that we have at least two balls of the same color,\n    # we need to take out one more ball.\n\n    # In the worst case scenario, you could take 1 green ball,\n    # then 1 blue ball, then another green, and continue until\n    # you have 1 ball of each color plus one more to ensure a pair.\n\n    # We have 7 green and 8 blue, so taking 8 guarantees 1 of each\n    # color. Taking one more will ensure having at least two of the same color.\n\n    num_balls = 8 + 1  # 8 balls to have at least 1 of each color, plus 1 to ensure a pair\n\n    return num_balls\n\nans = solution()"
    ],
    "934f5ca54cb7439aa6d799d5d2c44dcb": [
        "def solution():\n    total_candies = 35\n    starting_seat = 3\n    num_children = 9\n\n    last_seat = (starting_seat + total_candies - 1) % num_children\n    if last_seat == 0:\n        last_seat = num_children\n\n    return last_seat\n\nans = solution()"
    ],
    "f24bfda99f1c4bb2bd7903af23a66829": [
        "def solution():\n    first_term = 4\n    difference = 3\n    num_terms = 60\n    last_term = first_term + (num_terms - 1) * difference\n    sum_of_terms = (num_terms * (first_term + last_term)) // 2\n    return sum_of_terms\n\nans = solution()"
    ],
    "699c77bb441b4ebda83105b6f2f13d9b": [
        "def solution():\n    # Balls of each color\n    yellow_balls = 5\n    white_balls = 15\n    black_balls = 20\n    \n    # To be sure that 10 balls of the same color are taken out,\n    # we have to consider the worst case scenario using the\n    # Pigeonhole Principle. We take out all balls of the two minority colors\n    # and then add one more ball which will be the 10th ball of the majority color.\n\n    # Get all yellow and all white balls\n    worst_case_balls = yellow_balls + white_balls\n    \n    # We now need to get 10 balls of the same color for certain.\n    # Since we have at most 9 balls of yellow and white, take one more to\n    # be sure to get 10 black balls\n    worst_case_balls += 10\n\n    return worst_case_balls\n\nans = solution()"
    ],
    "e576332748d74067a92a264b25cf6bf6": [
        "def solution():\n    total_children = 30\n    children_have_dogs = 19\n    children_have_cats = 18\n\n    # According to the Inclusion-Exclusion Principle\n    max_without_both = total_children - (children_have_dogs + children_have_cats - total_children)\n\n    return children_have_dogs + children_have_cats - total_children - max_without_both\n\n\nans = solution()"
    ],
    "e23be947b2694a46ae2d582a9c3ce1d5": [
        "def solution():\n    ans = -12 - 5\n    return ans\n\nans = solution()"
    ],
    "9b63ec4f71094b1d885ce1afa323969f": [
        "def solution():\n    from math import lcm\n\n    # The cycle of eating spaghetti is every 7 days\n    spaghetti_cycle = 7\n    # The cycle of eating apple pie is every 3 days\n    apple_pie_cycle = 3\n\n    # Find the least common multiple of the two cycles\n    days_until_next = lcm(spaghetti_cycle, apple_pie_cycle)\n\n    # Florence will next eat them both on the same day after this number of days\n    return days_until_next\n\nans = solution()"
    ],
    "30dedaf91b7c41adbc5ee0f51c1d61cc": [
        "def solution():\n    data = [12, 145, 32, 77, 62]\n    range_of_data = max(data) - min(data)\n    return range_of_data\n\nans = solution()"
    ],
    "dc7690a8acef47d2b8179414454362dd": [
        "def solution():\n    monthly_saving = 12\n    number_of_months = 3\n    total_saving = monthly_saving * number_of_months\n    return total_saving\n\nans = solution()"
    ],
    "c0fbd9fc6c0349318ed02805c0f14bb0": [
        "def solution():\n    material_length = 100\n    material_width = 80\n\n    cloak_length = 5\n    cloak_width = 4\n\n    cloaks_lengthwise = material_length // cloak_length\n    cloaks_widthwise = material_width // cloak_width\n\n    total_cloaks = cloaks_lengthwise * cloaks_widthwise\n\n    return total_cloaks\n\nans = solution()"
    ],
    "fea775d35ddc44779758a9feca2b1e44": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    shirts, skirts = symbols('shirts skirts')\n    \n    # Equation 1: Number of shirts is 36 less than number of skirts.\n    eq1 = Eq(shirts, skirts - 36)\n    \n    # Equation 2: She sold 2/3 of her shirts and 5/6 of her skirts, remaining are 72 in total\n    eq2 = Eq((1-2/3)*shirts + (1-5/6)*skirts, 72)\n    \n    # Solving the pair of equations\n    solutions = solve((eq1, eq2), (shirts, skirts))\n    \n    # Number of skirts she had at first\n    return solutions[skirts]\n\nans = solution()"
    ],
    "332cdb55e65a4055a7b3f28234f15541": [
        "def solution():\n    # Assuming \"the table\" refers to an arithmetic sequence with a given format\n    # like the previous example. Here we will assume we need to find the sum of\n    # an arithmetic sequence where the first term (a), the last term (l), and\n    # the common difference (d) are known. For example, the sequence given in the\n    # third problem had a = 2, l = 240, d = 2. The sum of an arithmetic sequence\n    # can be calculated using the formula S = n/2 * (a + l), where n is the number\n    # of terms. First, we calculate n using n = (l - a) / d + 1, then we use it\n    # to find the sum S.\n\n    # Here is a generic solution that applies to any arithmetic sequence.\n    # Replace 'a', 'l', and 'd' with the actual values of your specific sequence.\n\n    a = 2  # First term\n    l = 240  # Last term (Replace with the actual last term of the sequence in the table)\n    d = 2  # Common difference (Replace with the actual common difference of the sequence in the table)\n\n    n = ((l - a) / d) + 1  # Calculate the number of terms\n    S = n/2 * (a + l)  # Calculate the sum of the arithmetic sequence\n\n    return int(S)\n\nans = solution()"
    ],
    "5ee23347e0d74d3baa1160988c797db8": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # The congruences based on the problem statement\n    # x ≡ 1 (mod 5)\n    # x ≡ 2 (mod 6)\n    # x ≡ 7 (mod 11)\n    congruences = [(1, 5), (2, 6), (7, 11)]\n    \n    # Using Chinese Remainder Theorem to find such a number x\n    x, _ = solve_congruence(*congruences)\n    \n    # The number x should also be between 400 and 800\n    while x < 400:\n        x += 5 * 6 * 11  # The least common multiple of 5, 6, and 11\n\n    return x\n\nans = solution()"
    ],
    "4d94cc32d7e645e3ae2c634cbeddd095": [
        "def solution():\n    nell_ratio = 4\n    total_ratio = nell_ratio + 5  # 4 for Nell and 5 for Joe\n    nell_sweets = 24\n\n    total_sweets = (nell_sweets * total_ratio) // nell_ratio\n\n    return total_sweets\n\nans = solution()"
    ],
    "4fd1c9c268424dcd9c1930cdbe826408": [
        "def solution():\n    # distance travelled one way\n    distance = 120\n    # speed of the motorcycle driver on the way there\n    speed_there = 20  \n    # time taken to travel to the place\n    time_there = distance / speed_there  \n    # total time for the round trip according to the desired average speed\n    total_time = (2 * distance) / 30\n    # time taken to return\n    time_back = total_time - time_there  \n    # speed of the motorcycle driver on the way back\n    speed_back = distance / time_back\n    \n    return speed_back\n\nans = solution()"
    ],
    "b6548625db5443beaaee6fa94d6e0200": [
        "def solution():\n    total_digits = 0\n    for number in range(1, 35):\n        total_digits += len(str(number))\n    return total_digits\n\nans = solution()"
    ],
    "501ad0e046c84d61b8cd854a0e3231d0": [
        "def solution():\n    sequence = [55, 62, 80, 36, 18, 29, 76, 92]\n    average = sum(sequence) / len(sequence)\n    return average\n\nans = solution()"
    ],
    "0a765ef7e14c440981d6c2d7b04dabd7": [
        "def solution():\n    return 46 * 37\n\nans = solution()"
    ],
    "a796ea09fb744741a25cd47d0f76b732": [
        "def solution():\n    ans = 31.6 * 7\n    return ans\n\nans = solution()"
    ],
    "7f69be54279d4eb282c98cde135e73cd": [
        "def solution():\n    # It takes 2 minutes to make 1 cut\n    cut_time = 2\n    \n    # To get 5 pieces, 4 cuts are needed\n    total_cuts_needed = 5 - 1\n    \n    # Total time is the number of cuts times the time per cut\n    total_time = cut_time * total_cuts_needed\n    \n    return total_time\n\nans = solution()"
    ],
    "6fc0618e43e242b49bfdaeb256945ca5": [
        "def solution():\n    # The sum of three numbers with an average of 120 is 3 * 120\n    current_sum = 3 * 120\n    \n    # To have a new average of 110 after adding a fourth number,\n    # The sum of numbers should be 4 * 110\n    required_sum = 4 * 110\n    \n    # The number to be added to get the new average\n    number_to_add = required_sum - current_sum\n    \n    return number_to_add\n\nans = solution()"
    ],
    "1cb1f7199ce14218a8ee265ccbe06c7e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jovan, sean, herman = symbols('jovan sean herman')\n\n    equation1 = Eq(jovan, 2 * sean)\n    equation2 = Eq(herman, 3 * jovan)\n    equation3 = Eq(jovan, herman - 240)\n\n    solutions = solve((equation1, equation2, equation3), (jovan, sean, herman))\n\n    total_marbles = solutions[jovan] + solutions[sean] + solutions[herman]\n\n    return total_marbles\n\nans = solution()"
    ],
    "90966aea3ce94728843a0f98acc20314": [
        "def solution():\n    for m in range(10):\n        if int(\"14\" + str(m)) == 8 * int(\"1\" + str(m)) - 3:\n            return m\n\nans = solution()"
    ],
    "c16f42441097422a80a4fc1b82640502": [
        "def solution():\n    total_hay = 12 * 15  # Total hay for feeding 12 horses for 15 days\n    days_for_20_horses = total_hay / 20  # Dividing total hay by 20 horses to find the days it can feed them\n\n    return days_for_20_horses\n\nans = solution()"
    ],
    "e68039658fe340f98db91346e8adc898": [
        "def solution():\n    x = -11\n    T = 7 + 7 * x\n    return T\n\nans = solution()"
    ],
    "ad7cb903a931476bafc590cff0bdcd26": [
        "def solution():\n    ans = 10.25 + 9.2 - 7\n    return ans\n\nans = solution()"
    ],
    "f01af5cab78a49d192ad10c608f1a18a": [
        "def solution():\n    ans = 301 + 303 + 305 - 9\n    return ans\n\nans = solution()"
    ],
    "34140a9862a3448881425579d24734b9": [
        "def solution():\n    first_term = 5\n    common_difference = 4\n    last_term = 65\n\n    # Using the formula for the sum of an arithmetic sequence: S_n = n/2 * (a1 + a_n)\n    # where n is the number of terms\n    # Using the formula to find the number of terms: n = ((a_n - a1) / d) + 1\n    num_terms = ((last_term - first_term) / common_difference) + 1\n    sum_sequence = (num_terms / 2) * (first_term + last_term)\n\n    return int(sum_sequence)\n\nans = solution()"
    ],
    "b7218901ffc24d00b3c7f10efa784bfe": [
        "def solution():\n    from math import gcd\n    \n    ans = gcd(gcd(6, 9), 12)\n    return ans\n\nans = solution()"
    ],
    "99005a2c071040f195c27f37d05344df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, andy, charles = symbols('john andy charles')\n    equation1 = Eq(john + andy, 105)\n    equation2 = Eq(charles + john, 67)\n    equation3 = Eq(andy, 3 * charles)\n\n    solutions = solve((equation1, equation2, equation3), (john, andy, charles))\n\n    total_mass = solutions[john] + solutions[andy] + solutions[charles]\n\n    return total_mass\n\nans = solution()"
    ],
    "51f1eccaaa5844a897f213dcf2f3e11a": [
        "def solution():\n    total_expressway = 900\n    companies = 4\n    days = 5\n\n    meters_per_company_per_day = (total_expressway / companies) / days\n\n    return meters_per_company_per_day\n\nans = solution()"
    ],
    "2c3ac058e2204cb087e20661a4ad713a": [
        "def solution():\n    from statistics import mean, median\n\n    data = [3, 2, 3, 5, 2, 4, 4, 1]\n    data_mean = mean(data)\n    deviations = [abs(x - data_mean) for x in data]\n    mad = mean(deviations)\n\n    return mad\n\nans = solution()"
    ],
    "2dafccaefb9c4371a9aa0d6a0927b08b": [
        "def solution():\n    # Since there are 3 kids and 13 oranges, we use stars and bars method (n+k-1 choose k-1)\n    from math import comb\n    oranges = 13\n    kids = 3\n    # Applying stars and bars theorem: (n+k-1 choose k-1) = (13+3-1 choose 3-1)\n    ways = comb(oranges + kids - 1, kids - 1)\n    return ways\n\nans = solution()"
    ],
    "5f22389e9a6a48338414d0443e5b1107": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bud, pip, tom = symbols('bud pip tom')\n\n    equation1 = Eq(bud, 3 * pip)\n    equation2 = Eq(tom, 2 * bud)\n    equation3 = Eq(bud + pip + tom, 50)\n\n    solutions = solve((equation1, equation2, equation3), (bud, pip, tom))\n\n    return solutions[tom]\n\nans = solution()"
    ],
    "da5873ba4dcd43299bae1be0e6fd21e6": [
        "def solution():\n    # The alien and his 5 brothers have 6 * 5 = 30 legs in total.\n    # Each set of 5 individual shoes costs $78, so for 30 legs, the number of sets needed is 30 / 5.\n    shoe_sets_needed = 30 // 5\n\n    # Each pair of socks costs $12, and since each alien has 5 legs, we'll need 30 individual socks.\n    # Socks are sold in pairs, so the number of pairs needed is 30 / 2.\n    sock_pairs_needed = 30 // 2\n\n    # Now we calculate the total cost for shoes and socks.\n    total_cost_shoes = shoe_sets_needed * 78\n    total_cost_socks = sock_pairs_needed * 12\n\n    # The total cost is the sum of the total costs for shoes and socks.\n    total_cost = total_cost_shoes + total_cost_socks\n\n    return total_cost\n\nans = solution()"
    ],
    "360ae3551215452fb3d04ffde3f78d2c": [
        "def solution():\n    # List of numbers to choose from\n    numbers = [6, 12, 35, 175, 245, 300]\n    # Find all possible combinations for Candy (choosing 2 cards)\n    from itertools import combinations\n    candy_combinations = list(combinations(numbers, 2))\n    # Find all possible combinations for Candice (choosing 3 cards)\n    candice_combinations = list(combinations(numbers, 3))\n    \n    # Create a dictionary to store the product of the cards for each combination\n    candy_products = {combo: combo[0] * combo[1] for combo in candy_combinations}\n    \n    # Iterate over Candice's combinations to find matching products\n    for combo in candice_combinations:\n        product = combo[0] * combo[1] * combo[2]\n        if product in candy_products.values():\n            # Find out which card was not picked by comparing the sets\n            all_cards = set(combo) | set((k for k, v in candy_products.items() if v == product))\n            not_picked = set(numbers) - all_cards\n            return not_picked.pop()\n\nans = solution()"
    ],
    "43c595f7d6ef46c0be98290684686cf6": [
        "def solution():\n    # original number ABCD\n    # new number DABC\n    # DABC - ABCD = 5877\n    # (D*1000 + A*100 + B*10 + C) - (A*1000 + B*100 + C*10 + D) = 5877\n    # simplifying the above equation we get\n    # 999D - 999A = 5877\n    # D - A = 5877 / 999\n    # D - A = 6 (since both A and D are digits, the only possible difference is 6 as 5877/999 = 6 and remainder is 111)\n    # Therefore, we have discovered that D = A + 6\n    # To fulfill the condition of the problem, D must be 6 more than A, and A can range from 1 to 3 max since D is a digit\n\n    for A in range(1, 4):\n        D = A + 6\n        # Building the original and new numbers based on the equation DABC - ABCD = 5877\n        for B in range(10):  # B can be 0-9\n            for C in range(10):  # C can be 0-9\n                ABCD = A*1000 + B*100 + C*10 + D\n                DABC = D*1000 + A*100 + B*10 + C\n                if DABC - ABCD == 5877:\n                    return ABCD\n\nans = solution()"
    ],
    "7e7e0d58634e4a7b912975d7485e5197": [
        "def solution():\n    possible_totals = [49, 80, 32, 66, 8, 58]\n    \n    # We know that if the shelves hold 7 books each and 4 are left over, the total number\n    # of books must leave a remainder of 4 when divided by 7.\n    ans = [total for total in possible_totals if total % 7 == 4]\n    \n    # Since there can only be one answer based on the instruction, we return the first one we find.\n    return ans[0]\n\nans = solution()"
    ],
    "d8ec2b2972f74f84955c8f0a68f3ad73": [
        "def solution():\n    rate_a = 1 / 12  # Tap A fills the tank in 12 minutes\n    rate_b = 1 / 8   # Tap B fills the tank in 8 minutes\n    combined_rate = rate_a + rate_b  # Combined rate of both taps\n\n    time_to_fill_half = 0.5 / combined_rate  # Time to fill half the tank\n\n    return time_to_fill_half\n\nans = solution()"
    ],
    "f5d42ab6bc434fe48dcbb4d9b9e637ea": [
        "def solution():\n    # Distance between the first and fifth tree implies there are 4 intervals\n    distance_between_first_and_fifth = 20\n    number_of_intervals_between_first_and_fifth = 4\n    \n    # Calculate the distance of each interval\n    interval_distance = distance_between_first_and_fifth / number_of_intervals_between_first_and_fifth\n    \n    # Total length of the road\n    total_road_length = 200\n\n    # Number of intervals along the whole road\n    number_of_intervals_along_road = total_road_length / interval_distance\n\n    # Number of trees is one more than the number of intervals\n    number_of_trees = number_of_intervals_along_road + 1\n\n    return int(number_of_trees)\n\nans = solution()"
    ],
    "6cab8d77da3e4447922fdcd2d2b21d24": [
        "def solution():\n    return 4392 // 6\n\nans = solution()"
    ],
    "b791fcccc3654f3db33c3a0ec7363553": [
        "def solution():\n    # Let the number of $0.50 cookies David has be d and the number of $0.50 cookies Jeremy has be j.\n    # Let the number of $0.10 cookies be t.\n    \n    # From the problem we know:\n    # David's cookies cost thrice as much as Jeremy's, so the cost of David's cookies is 3 * cost of Jeremy's cookies.\n    # Since David has only $0.50 worth of cookies, and each of his cookies is $0.50, he must have 1 cookie. Thus, d = 1.\n    # Jeremy has 3/5 as many $0.50 cookies as $0.10 cookies, so j = 3/5 * t\n    # There are 60 fewer $0.10 cookies than $0.50 cookies, so t = j - 60.\n    \n    # We have a system of equations:\n    # d = 1 (because David has $0.50 worth of cookies and each cookie of David costs $0.50)\n    # j = (3/5) * t\n    # t = j - 60\n\n    # Solving the system of equations, we can substitute t from the third equation into the second:\n    # j = (3/5) * (j - 60)\n    # 5j = 3j - 3 * 60\n    # 2j = -180\n    # j = -90, but the amount of cookies can't be negative. \n    # There is a mistake with the variables, let's reformulate the equations:\n    # t - 60 = j -> t = j + 60 (as there are 60 fewer $0.10 cookies than $0.50 cookies)\n    # j = (3/5) * t -> j = (3/5) * (j + 60) \n    \n    # Now we can solve for j:\n    # 5j = 3j + 3 * 60\n    # 2j = 180\n    # j = 90\n    \n    # Since Jeremy's cookies are $0.50 each and he has j cookies, we can calculate the total worth:\n    jeremy_cookies_value = 0.50 * 90\n    \n    return jeremy_cookies_value\n\nans = solution()"
    ],
    "4a6ce2ef677140aebc108d44cab3b1ca": [
        "def solution():\n    original_expression = (36 * 21) / (6 * 7)\n    mistake_circled = '36 * 21 / 6 * 7'\n    \n    # Correct working: \n    # The mistake is in the distribution of the division over multiplication without considering the order of operations.\n    # According to the order of operations, division and multiplication have the same precedence and should be evaluated\n    # from left to right, not right to left.\n    \n    correct_answer = (36 / 6) * (21 / 7)\n    \n    return correct_answer\n\nans = solution()"
    ],
    "e40ae4418f8f44cebd8f9882aa3ca6b1": [
        "def solution():\n    total_fruit = 48\n    fraction_apples = 5 / 8\n    apples = total_fruit * fraction_apples\n    pears = total_fruit - apples\n\n    return int(pears)\n\nans = solution()"
    ],
    "35c4e495a24542e1b20ed3ff479cced6": [
        "def solution():\n    ans = 148 + 73\n    return ans\n\nans = solution()"
    ],
    "57725168bfb44ed79b6561aad62288cd": [
        "def solution():\n    jane_age_now = 12\n    cousin_age_now = 2 * jane_age_now\n    cousin_age_in_8_years = cousin_age_now + 8\n    \n    return cousin_age_in_8_years\n\nans = solution()"
    ],
    "c4a1d3b65f70441c8f162b68482444ed": [
        "def solution():\n    ann_position = 8\n    people_between = 3\n    david_position_from_end = 2\n\n    total_people = ann_position + people_between + david_position_from_end\n    return total_people\n\nans = solution()"
    ],
    "d744cc75e3ab4185ad0c2604e81b69c3": [
        "def solution():\n    count_8, page = 0, 0\n    while count_8 < 22:\n        page += 1\n        count_8 += str(page).count('8')\n    return page\n\nans = solution()"
    ],
    "cf2c548f0cae420c9a89c81143562fc1": [
        "def solution():\n    # Assume that the side of the smaller square array (boys only) is n.\n    # Therefore, the total number of boys would be n^2.\n    # When 17 girls are added in a way that a row and a column are formed,\n    # The total number of students is (n+1)^2.\n    # The difference between the larger square and the smaller square is:\n    # (n+1)^2 - n^2 = 2n + 1 (which is equal to the number of girls added, 17)\n    # Hence, we have the equation 2n + 1 = 17.\n\n    # Solving for n:\n    n = (17 - 1) // 2\n    # The total number of boys then is n^2:\n    return n**2\n\nans = solution()"
    ],
    "c6bfa3d0de504912b6200f3d457f6a73": [
        "def solution():\n    first_number = 157\n    second_number = first_number - 98\n    total_sum = 555\n\n    third_number = total_sum - (first_number + second_number)\n\n    return third_number\n\nans = solution()"
    ],
    "995d99072a7246aa89a178ecfa7b3be9": [
        "def solution():\n    n = (9 * 8) / 12\n    return n\n\nans = solution()"
    ],
    "35f3ac45fb9a416cab9f6a6f3d80fc88": [
        "def solution():\n    return -7 + -3\n\nans = solution()"
    ],
    "9138c2779a554688a69ae241821b9044": [
        "def solution():\n    ans = 3280 / 1000\n    return ans\n\nans = solution()"
    ],
    "91aac3f6cd314824a5ff7ae8d57ba16f": [
        "def solution():\n    total_students = 44\n    maths_students = 30\n    art_students = 26\n\n    # Using the Inclusion-Exclusion Principle\n    both_competitions = maths_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "64953fb1208e4686b70662072858e299": [
        "def solution():\n    principal = 800\n    rate = 8 / 100\n    time = 3\n\n    simple_interest = principal * rate * time\n\n    return simple_interest\n\nans = solution()"
    ],
    "c1a30ce92e014b75b30b4b0d41e23b10": [
        "def solution():\n    total_distance = 9\n    day_distance = 3\n    night_distance = -1\n    day = 0\n    current_distance = 0\n\n    while current_distance < total_distance:\n        day += 1\n        current_distance += day_distance\n        if current_distance >= total_distance:\n            break\n        current_distance += night_distance\n\n    return day\n\nans = solution()"
    ],
    "0222cefe72d14af08beade5cd8d39234": [
        "def solution():\n    lucy_sleep_hours = 8\n    mary_sleep_hours = lucy_sleep_hours + 2\n    return mary_sleep_hours\n\nans = solution()"
    ],
    "7fccc27dfac64e26ac8313027c062718": [
        "def solution():\n    x = (19 - (6 * 1.5)) / 4\n    return x\n\nans = solution()"
    ],
    "d4270b64c9444e9bae6186f03a8dd3cf": [
        "def solution():\n    england_mountain = 978\n    world_highest_mountain = 8848\n    difference = world_highest_mountain - england_mountain\n    return difference\n\nans = solution()"
    ],
    "6ba693d3debc40ffbe091f4a2e915e1a": [
        "def solution():\n    # Since we need to ensure we get 29 balls of one color, 28 of another, and 10 of the last,\n    # we should consider the worst case scenario using Pigeonhole Principle where we pick the\n    # maximum balls of the other colors before we reach our requirement.\n\n    # We can pick all the red and white first (39 red and 29 white) and we still don't have 29 balls of one color,\n    # so we need to pick at least one blue ball in the next pick to satisfy the 29 balls of one color condition.\n    # Then for the 28 balls of another color, since we already picked 29 white balls, we need one more to make it 28 white balls.\n    # For the 10 balls of the last color (red), since we already have 39 red balls, we don't need to pick more.\n\n    # Total balls picked to satisfy the requirement in the worst case:\n    blue_to_ensure_29 = 1\n    red_already_picked = 39\n    white_to_ensure_28 = 29 + 1\n    total_picked = blue_to_ensure_29 + red_already_picked + white_to_ensure_28\n\n    return total_picked\n\nans = solution()"
    ],
    "c159c9b51b5641cb9fe4bd410317a6b6": [
        "def solution():\n    from sympy import isprime\n\n    # Iterate through numbers less than 50 to find the one that fits all criteria\n    for number in range(1, 50):\n        if number % 3 == 2 and isprime(number) and (number - 2) % 5 == 0:\n            return number\n\nans = solution()"
    ],
    "2234f3644e4744e1abe7c224874b8458": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(2 * (x + 3), 30)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "1fef03e615784d6ab50b1a8664c3bed8": [
        "def solution():\n    # Since 2014 is greater than 10, and factorial of any number greater than 10 will\n    # contain a factor of 10 (which is 2*5), the last digit of 2014! will always be 0.\n    ans = 0\n    return ans\n\nans = solution()"
    ],
    "873d86ac5c8b42ebb89adf32077600aa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    alicia, beth, casey = symbols('alicia beth casey')\n    \n    # Create the equations based on the problem\n    # 1. Total money equation\n    total_money_eq = Eq(alicia + beth + casey, 900)\n    # 2. Amount spent by Alicia and the remaining money\n    alicia_spent_eq = Eq(alicia - alicia/2, beth - 60)\n    # 3. Amount spent by Casey and the remaining money\n    casey_spent_eq = Eq(casey - 3*(alicia/2), beth - 60)\n    \n    # Solve the system of equations\n    solutions = solve((total_money_eq, alicia_spent_eq, casey_spent_eq), (alicia, beth, casey))\n    \n    # Alicia's original amount of money\n    return solutions[alicia]\n\nans = solution()"
    ],
    "20985347da3c477badaed88276511692": [
        "def solution():\n    return 0.64 * 10\n\nans = solution()"
    ],
    "06b709845181421a902cea1ac8c94213": [
        "def solution():\n    numerator = 30\n    original_numerator = 6\n    original_denominator = 20\n\n    denominator = (original_denominator * numerator) / original_numerator\n    \n    return int(denominator)\n\nans = solution()"
    ],
    "ba39e5d277a84ab58e881af5d3bc8aa5": [
        "def solution():\n    from math import factorial\n\n    def count_trailing_zeros(n):\n        count = 0\n        while n % 10 == 0:\n            n //= 10\n            count += 1\n        return count\n\n    product = 2*2*3*8*5*5*5\n    ans = count_trailing_zeros(product)\n    return ans\n\nans = solution()"
    ],
    "788387594b6e4c5eba7e277ec7c07b6e": [
        "def solution():\n    ans = (1 + 8) * 8 / 3 - 6\n    return ans\n\nans = solution()"
    ],
    "1406508f604a4d8b99426de2592c46fd": [
        "def solution():\n    # Let x be the original number\n    # New number is 10x\n    # Sum of original and new number is 253\n    # Therefore, the equation is x + 10x = 253\n\n    # Solving for x\n    x = 253 / (10 + 1)  # Simplified equation x + 10x = 11x\n\n    return int(x)  # The original number has to be an integer\n\nans = solution()"
    ],
    "ac96959c816f40b994c3095a95678430": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the number of cookies eaten on the first day as 'a'.\n    # Each subsequent day the boy ate 6 more cookies than the previous day.\n    # Therefore, the number of cookies eaten on each of the five days forms\n    # an arithmetic sequence: a, a+6, a+12, a+18, a+24.\n    # The sum of an arithmetic sequence is given by: n/2 * (first_term + last_term).\n    # We know that the sum of the sequence (total cookies eaten in five days) is 100.\n\n    a = symbols('a')\n    n = 5 \n    # Using the arithmetic sum formula:\n    equation = Eq(n/2 * (2*a + (n-1)*6), 100)\n\n    # Solve for 'a' using sympy's solve function.\n    first_day_cookies = solve(equation, a)[0]\n\n    return first_day_cookies\n\nans = solution()"
    ],
    "c8ac5b12c5ef4250bf78a994cef11a8c": [
        "def solution():\n    initial_seashells = 380\n    given_to_sister = 35\n    given_to_friend = 23\n    picked_seashells = 70\n    boxes = 8\n\n    remaining_seashells = initial_seashells - given_to_sister - given_to_friend + picked_seashells\n    seashells_per_box = remaining_seashells // boxes\n\n    return seashells_per_box\n\nans = solution()"
    ],
    "ef204ac96744497b958e9e43d91d62c7": [
        "def solution():\n    primes_under_90 = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, \n                       53, 59, 61, 67, 71, 73, 79, 83, 89]\n    for i in range(1, 90):\n        if i % 9 == 0 and ((i + 1) % 5 == 0) and ((i + 1) in primes_under_90):\n            return i\n\nans = solution()"
    ],
    "1cc6abdd4aa14ca3ba0c0f221bc83033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cayden, sicheng, yixuan = symbols('cayden sicheng yixuan')\n\n    equation1 = Eq(cayden, sicheng + 6)\n    equation2 = Eq(yixuan, 2 * cayden)\n    equation3 = Eq(yixuan, sicheng + 22)\n\n    solutions = solve((equation1, equation2, equation3), (cayden, sicheng, yixuan))\n\n    total_questions = solutions[cayden] + solutions[sicheng] + solutions[yixuan]\n\n    return total_questions\n\nans = solution()"
    ],
    "1f1415e1ba0e473686320bc1228072ad": [
        "def solution():\n    ans = 18 / 100 * 250\n    return ans\n\nans = solution()"
    ],
    "fbb644a513c74c369072437e70b25c4b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(56 - 4 * (20 - 6 * x), 48)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "5d03707100c24bec944429cac593007c": [
        "def solution():\n    from math import factorial\n    \n    men = factorial(4)\n    women = factorial(4)\n    ways = men * women * 2  # Multiplied by 2 for the two possible alternating patterns (MWMW... or WMWM...)\n    \n    return ways\n\nans = solution()"
    ],
    "e93a2e8d34fe4c5d88042e9cb1dc1359": [
        "from math import factorial\n\ndef solution():\n    total_letters = len(\"HAPPY\")\n    p_count = \"HAPPY\".count(\"P\")  # How many times P appears in the word\n\n    # The number of different arrangements is total_letters factorial\n    # divided by the factorial of the count of any letters that are repeated.\n    arrangements = factorial(total_letters) // factorial(p_count)\n    \n    return arrangements\n\nans = solution()"
    ],
    "84593b3ba13b4e8a80ff8451f501055f": [
        "def solution():\n    count = 0\n    for i in range(1, 481):\n        count += str(i).count('6')\n    return count\n\nans = solution()"
    ],
    "f447d86af6a24aefb4ec7afe8f748ab6": [
        "def solution():\n    cost_per_roll_ali = 2.40 / 8\n    cost_per_roll_mya = cost_per_roll_ali * 2\n    cost_for_three_rolls_mya = 3 * cost_per_roll_mya\n    return cost_for_three_rolls_mya\n\nans = solution()"
    ],
    "6a2c78cfdb9a4d7fb383272b52cd59ee": [
        "def solution():\n    girls = 12\n    boys_fraction = 2 / 5\n    total_fraction = 1\n    girls_fraction = total_fraction - boys_fraction\n\n    total_children = girls / girls_fraction\n    boys = total_children * boys_fraction\n\n    return int(boys)\n\nans = solution()"
    ],
    "c872f5bf2c784f41bccb9e92a97425cc": [
        "def solution():\n    from sympy import factorint\n    \n    prime_factors = factorint(96)\n    num_factors = 1\n    for exponent in prime_factors.values():\n        num_factors *= (exponent + 1)\n    \n    return num_factors\n\nans = solution()"
    ],
    "c8a3ce14a35a4261ab029e2433bd676a": [
        "def solution():\n    people_in_front_of_peter = 9\n    people_behind_john = 10\n    # John is directly behind Peter, so we don't count Peter twice.\n    total_people = people_in_front_of_peter + 1 + people_behind_john\n    \n    return total_people\n\nans = solution()"
    ],
    "e041fe632ffb4b6c9323daa6940df30a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ashley, crystal, justin = symbols('ashley crystal justin')\n\n    equation1 = Eq(crystal, 2 * ashley)\n    equation2 = Eq(justin, 10 * ashley)\n    equation3 = Eq(justin, crystal + 72)\n\n    solutions = solve((equation1, equation2, equation3), (ashley, crystal, justin))\n\n    total_pages = solutions[ashley] + solutions[crystal] + solutions[justin]\n\n    return total_pages\n\nans = solution()"
    ],
    "64993852492147cc8482c078cd34b38e": [
        "def solution():\n    return 0.6 * 0.1 * 900\n\nans = solution()"
    ],
    "89b6ad1ba96b49799186cb97be8ced41": [
        "def solution():\n    departure_time = 12  # 12 noon in 24-hour format is simply 12\n    flight_duration = 4  # flight takes 4 hours\n    \n    # St. Petersburg is 3 hours ahead of England\n    time_difference = 3\n    \n    # Calculate arrival time in St. Petersburg\n    arrival_time = (departure_time + flight_duration + time_difference) % 24\n\n    return arrival_time\n\nans = solution()"
    ],
    "1beeabbc07d5419182360e392e6e8167": [
        "def solution():\n    future_value = 870\n    interest_rate = 0.09\n    years = 5\n\n    present_value = future_value / ((1 + interest_rate) ** years)\n\n    return round(present_value, 2)\n\nans = solution()"
    ],
    "f53340cd1b0242cc909e54dbf5f9c740": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 2):\n        N, O = perm\n        if N != 0:\n            NO = 10 * N + O\n            if NO % 3 == 0 and NO % 4 == 0:\n                return NO\n\nans = solution()"
    ],
    "d83742ad1ef8454dbe6712dd724e0f28": [
        "def solution():\n    ans = sum([50-48+46-44+42-40+38-36+34-32])\n    return ans\n\nans = solution()"
    ],
    "fddfd48467ab4e0fb6a8660a9290dacd": [
        "def solution():\n    kg_to_g = 2.5 * 1000\n    return kg_to_g\n\nans = solution()"
    ],
    "9080a0bc912a4dbd8b2d995a6f90476f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "d03ade3a4dd74e8080364bf4014a629f": [
        "def solution():\n    # Cindy needs to pick 1 sock from each color to guarantee she gets a pair of the same colour\n    # Assume worst case scenario: s1, s2, s3 are all different colors\n    s1, s2, s3 = 1, 1, 1\n    # The fourth sock she picks will definitely match one of the previous socks\n    s4 = 1\n    # Calculate the total number of socks picked\n    ans = s1 + s2 + s3 + s4\n    return ans\n\nans = solution()"
    ],
    "a5de38fa67a44419bc522d068fd7f25f": [
        "def solution():\n    scale_ratio = 1 / 5  # ground distance (km) / map distance (cm)\n    map_distance_cm = 12  # distance on the map between two villages in cm\n\n    ground_distance_km = map_distance_cm * scale_ratio\n    return ground_distance_km\n\nans = solution()"
    ],
    "819144d05ae94a409b2ad0fa501b330e": [
        "def solution():\n    ans = 2 / 0.1\n    return ans\n\nans = solution()"
    ],
    "662c78fcaea44e82bcb9bf7c3df9c9b4": [
        "def solution():\n    total_sweets = 360\n    boy_sweets = 4\n    girl_sweets = 12\n    boys_fraction = 3 / 8\n\n    # Let g be the number of girls and b be the number of boys, we have:\n\n    # b = boys_fraction * (b + g)\n    # g = (1 - boys_fraction) * (b + g)              (since boys_fraction + (1 - boys_fraction) = 1)\n    # b * boy_sweets + g * girl_sweets = total_sweets (total sweets given out by the teacher)\n\n    # b * boy_sweets + (1 - boys_fraction) / boys_fraction * b * girl_sweets = total_sweets\n    # b * (boy_sweets + (1 - boys_fraction) / boys_fraction * girl_sweets) = total_sweets\n    # b = total_sweets / (boy_sweets + (1 - boys_fraction) / boys_fraction * girl_sweets)\n\n    b = total_sweets / (boy_sweets + (1 - boys_fraction) / boys_fraction * girl_sweets)\n    g = (1 - boys_fraction) / boys_fraction * b\n\n    return int(g)\n\nans = solution()"
    ],
    "19e25948a6f64404bdc6be96b3c341cf": [
        "def solution():\n    product = 1\n    for i in range(2, 51):\n        product *= ((1/i) - (1/(101-i)))\n    return product\n\nans = solution()"
    ],
    "0e5f8af3ee36434c8fc6f0d54e0b0332": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number be 'n'\n    n = symbols('n')\n    \n    # According to the given conditions we have the following equations:\n    eq1 = Eq(n % 7, 5)\n    eq2 = Eq(n % 8, 6)\n    eq3 = Eq(n % 10, 6)\n    eq4 = Eq((n // 6) + (n // 7) + (n // 8), 265)\n\n    # Solve the system of equations\n    sols = solve((eq1, eq2, eq3, eq4), n)\n\n    # Check the validity of the solution and return the correct one\n    for sol in sols:\n        if sol.is_integer:\n            return sol\n\nans = solution()"
    ],
    "8162588281f2442aaf05ae898f61facb": [
        "def solution():\n    speed_km_per_hour = 7.2\n    speed_m_per_sec = speed_km_per_hour * (1000 / 3600)\n    time_sec = 24\n\n    distance_m = speed_m_per_sec * time_sec\n\n    return distance_m\n\nans = solution()"
    ],
    "69e401d76eff4dc0a2cbc3608563a312": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jack, jimmy, tommy = symbols('jack jimmy tommy')\n\n    equation1 = Eq(jimmy, jack + 7)\n    equation2 = Eq(tommy, 3 * jimmy)\n    equation3 = Eq(jack + jimmy + tommy, 43)\n\n    solutions = solve((equation1, equation2, equation3), (jack, jimmy, tommy))\n\n    return solutions[tommy]\n\nans = solution()"
    ],
    "0ecf6bcd64b5409797eb1c22fd967682": [
        "def solution():\n    total_students = 93\n    math_students = 70\n    language_students = 54\n\n    both = math_students + language_students - total_students\n    only_math = math_students - both\n\n    return only_math\n\nans = solution()"
    ],
    "fcaab3458b0540ffaf17a8b8e46d47e3": [
        "def solution():\n    product = 1\n    for i in range(2, 10):\n        product *= (i + 1) / i\n    ans = product\n    return ans\n\nans = solution()"
    ],
    "c0b29d7381404f04ba70d03ba52e2056": [
        "def solution():\n    # Convert the percentage into a decimal\n    percent_value = 25 / 100\n    # Equation: (1/3 - 25%) * x = 36\n    # Solve for x\n    x = 36 / ((1/3) - percent_value)\n    return x\n\nans = solution()"
    ],
    "3d8744d18dd54cbea1b1412a084ed5ef": [
        "def solution():\n    # According to the definition, 1 is neither a prime nor a composite number.\n    # All positive integers greater than 1 are either prime or composite.\n    # A composite number is a positive integer that has at least one positive divisor other than one or itself.\n    # Therefore, Pip's statement is incorrect because it ignores the special case of the number 1.\n    ans = \"Pip is incorrect; the number 1 is neither prime nor composite.\"\n    return ans\n\nans = solution()"
    ],
    "fc12020bb86948df82cb6bfbc58da724": [
        "def solution():\n    num = 40309\n    while True:\n        num += 1\n        if str(num) == str(num)[::-1]:\n            return num - 40309\n\nans = solution()"
    ],
    "5acf29084a144a8c9e6e54ea27130ca2": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10): # Since we need 4 groups with different number so it can start from 1 to 9 at most\n        for x2 in range(x1 + 1, 11):  # x2 must be greater than x1, so it starts at x1 + 1\n            for x3 in range(x2 + 1, 12): # x3 must be greater than x2, so it starts at x2 + 1\n                x4 = 12 - (x1 + x2 + x3)\n                if x4 > x3:  # x4 must be the largest, and different from x1, x2, x3\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "36cde50d7411407280da3e197b3728f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(3 + 2 * (9 - x), 4 * (x - 5) + 5)\n    \n    ans = solve(equation, x)\n    \n    return ans[0]\n\nans = solution()"
    ],
    "97f9b3cd0d1f4ef49d372ccb5e9623ef": [
        "def solution():\n    # Kasia keeps 13 for herself\n    kasia_keeps = 13\n    # Calculate the sweets shared between Maya and Lucie\n    shared_sweets = 42 - kasia_keeps\n    # Each friend gets half the shared sweets\n    each_friend_sweets = shared_sweets / 2\n    # Lucie gives 2/7 of her sweets to Joan\n    lucie_gives_to_joan = (2 / 7) * each_friend_sweets\n    # Calculate how many sweets Lucie keeps\n    lucie_keeps = each_friend_sweets - lucie_gives_to_joan\n\n    return lucie_keeps\n\nans = solution()"
    ],
    "ff1dd3113eea4badb05fc22604f4f410": [
        "def solution():\n    # Let the weekly pension be represented by 1 (whole)\n    friday_spend = 1/4           # Friday night spending\n    remaining_after_friday = 1 - friday_spend\n    saturday_spend = remaining_after_friday / 3\n    remaining_after_saturday = remaining_after_friday - saturday_spend\n    return remaining_after_saturday\n\nans = solution()"
    ],
    "0239fb4bde9f47c69180ca8669502d62": [
        "def solution():\n    ans = 42768 / 120\n    return ans\n\nans = solution()"
    ],
    "8f11aa1d0d264d7fbdcc09d8264a8c74": [
        "def solution():\n    # Initialize the difference and total number of students\n    boys_more_than_girls = 52\n    total_students = 0\n\n    # We know that each layer will be a full square (1x1, 3x3, 5x5, ...)\n    # Start with the first odd square, which is 1x1, and work upwards.\n    layer = 1\n    while True:\n        # Calculate the number of students in the current layer\n        students_in_layer = layer * layer\n\n        # Check if we are looking at a layer of boys or girls\n        # Boys are in odd layers (1st, 3rd, 5th, ...)\n        # Girls are in even layers (2nd, 4th, 6th, ...)\n        if layer % 2 == 1:\n            boys = students_in_layer\n            girls = 0 if layer == 1 else (layer - 2) * (layer - 2)  # No girls in the 1x1 layer\n            layer_diff = boys - girls\n        else:\n            girls = students_in_layer\n            boys = (layer - 1) * (layer - 1)\n            layer_diff = boys - girls\n\n        # We continue adding layers until the difference exceeds the given 52.\n        if layer_diff <= boys_more_than_girls:\n            total_students += students_in_layer\n            layer += 2  # Increase by 2 to maintain the pattern of odd squares\n        else:\n            # Find the total number of students when the difference is 52\n            # Total students is the square of the current layer minus 1 \n            # since we've added one layer too many in the while loop\n            layer -= 1\n            total_students = layer * layer\n            break\n\n    return total_students\n\nans = solution()"
    ],
    "6326923a95f047bdabd68344659c4d65": [
        "def solution():\n    total_people = 20\n    ratio_adults = 1\n    ratio_children = 4\n    total_ratio = ratio_adults + ratio_children\n\n    adults = (total_people * ratio_adults) / total_ratio\n\n    return int(adults)\n\nans = solution()"
    ],
    "e7cedcf4f50346fda3609ffc82271bcb": [
        "def solution():\n    school_bags = 3\n    pencil_boxes = 4\n    combinations = school_bags * pencil_boxes\n    return combinations\n\nans = solution()"
    ],
    "8e60fa08b0204229a54c896f7f2968fa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let the number of apples be 'a' and pears be 'p'\n    a, p = symbols('a p')\n    \n    # Ratio of apples to pears given as 3:4\n    equation1 = Eq(3*p, 4*a)\n    \n    # When 36 pears are replaced by 36 apples, apples become 1.5 of pears\n    equation2 = Eq(a + 36, 1.5 * (p - 36))\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (a, p))\n    \n    return solutions[a]\n\nans = solution()"
    ],
    "b7159096815a4a038b3ffdc419ce649d": [
        "def solution():\n    decimal_part = \"612903\"  # The repeating part of the decimal\n    sum_digits = 0\n\n    for i in range(212):\n        sum_digits += int(decimal_part[i % len(decimal_part)])\n\n    return sum_digits\n\nans = solution()"
    ],
    "0c7a535a8f1e4491b32b1e1b1639b03a": [
        "def solution():\n    # Let x be the capacity of the fish tank in litres.\n    # If Mr Nelson uses a 5-litre pail, 4 litres of water will overflow,\n    # This means the fish tank capacity is 5 litres less than a multiple of 5 litres.\n    # So, the fish tank capacity can be written as 5n - 4 for some integer n.\n\n    # If he uses a 3-litre pail, he needs another 4 more pails to fill the tank.\n    # This means the fish tank can be filled with a number of 3-litre pails plus 4 extra pails.\n    # So, the fish tank capacity can also be written as 3m + 4*3 for some integer m.\n\n    # Now we need to find a common capacity x that satisfies both requirements,\n    # i.e., x = 5n - 4 = 3m + 4*3.\n\n    # We can find this by trial and error, by checking multiples of 5 minus 4,\n    # and seeing which one can also be represented as 3 times an integer plus 12.\n\n    # Starting at n=2 because with n=1, the capacity would be negative,\n    # and a fish tank cannot have negative capacity.\n    n = 2\n    while True:\n        fish_tank_capacity = 5 * n - 4\n        if (fish_tank_capacity - 12) % 3 == 0:\n            return fish_tank_capacity\n        n += 1\n\nans = solution()"
    ],
    "ca97262fc9e040ea9a7f04b576f910a7": [
        "def solution():\n    ginkgo_trees = 30\n    willow_trees = ginkgo_trees - 1\n    \n    return willow_trees\n\nans = solution()"
    ],
    "1aa4173baac54897a1633d0cb7b950ea": [
        "def solution():\n    return 36 / 100 * 50\n\nans = solution()"
    ],
    "00fd88a6512946ba898e3274c1c81239": [
        "def solution():\n    # The original array had the form of n by n\n    # After adding one row and one column, it became (n+1) by (n+1)\n    # The 31 soldiers joined the array filling up the new row and column\n    # So excluding the overlap (which is the new bottom-right soldier),\n    # the rest of the 30 soldiers must fill up n spots (because each new row and column\n    # shares one soldier, the bottom-right one)\n    # So we write the equation: 2n + 1 = 31 \n    # Simplifying we get n = 15\n    # The total number of soldiers now is (n+1)^2 = 16^2 = 256\n    n = (31 - 1) // 2\n    total_number = (n + 1) ** 2\n\n    return total_number\n\nans = solution()"
    ],
    "fbf9b992307b444eb938a67abf0f79d0": [
        "def solution():\n    ans = (2/3) * 729\n    return ans\n\nans = solution()"
    ],
    "8f5505c28f074abd9d90140697874060": [
        "def solution():\n    people = 12\n    handshakes = people * (people - 1) // 2\n    return handshakes\n\nans = solution()"
    ],
    "c54762ddbeef45b193a20da66e6829f5": [
        "def solution():\n    # 10 is the product of 2 and 5. Every pair of 2 and 5 contributes to one trailing zero.\n    # As there are many more 2s than 5s in the factorization of n!, the number of trailing zeros is determined by the number of 5s.\n    \n    # count the number of 5s in the prime factorization of n!\n    def count_fives(n):\n        count = 0\n        while n >= 5:\n            count += n // 5\n            n //= 5\n        return count\n\n    # using binary search to find the smallest n where the number of 5s in factorial(n) is 28\n    low, high = 1, 5*28\n    ans = 0\n    while low <= high:\n        mid = (low + high) // 2\n        if count_fives(mid) < 28:\n            low = mid + 1\n        else:\n            ans = mid\n            high = mid - 1\n\n    return ans\n\nans = solution()"
    ],
    "43bd21f970c34177be1554432de294ca": [
        "def solution():\n    total_cost = (5 * 1.09) + (6 * 0.55)\n    change = 10 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "3b9a5ab85be34057a1a3e3b571572c35": [
        "def solution():\n    # Considering worst case by pigeonhole principle\n    # Daniel keeps picking different colored socks one by one\n    # He needs 2 of the same color to make a pair, and he's guaranteed to have \n    # at most 1 of each until he picks the last unique color which is the 5th pick\n    # To ensure two pairs, he needs to pick 2 more socks of any color\n    # So, 5 (for one of each unique color) + 2 (to ensure the second pair)\n    # Total = 5 + 2 = 7\n\n    return 5 + 2  # Minimum number of socks to ensure two pairs of the same color\n\nans = solution()"
    ],
    "11a8c054bda64d72bdfd6571d70646f1": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['3', '7', '2', '8']\n    perms = [''.join(p) for p in permutations(digits)]\n    \n    odd_numbers = [int(p) for p in perms if int(p) % 2 != 0]\n    \n    return min(odd_numbers)\n\nans = solution()"
    ],
    "e45422d20b09414ca93da798ae6e4103": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let s represent Sam's current age\n    s = symbols('s')\n\n    # In four years, Sam's age will be s + 4\n    # Four years ago, Sam's age was s - 4\n    \n    # According to the problem, in four years, Sam will be twice as old as he was four years ago:\n    # s + 4 = 2 * (s - 4)\n\n    # Set up the equation\n    equation = Eq(s + 4, 2 * (s - 4))\n\n    # Solve the equation\n    solution = solve(equation, s)\n\n    # Sam's current age is the solution to the equation\n    return solution[0]\n\nans = solution()"
    ],
    "1b74b0ce31ca43179e9aa5db9f92ec32": [
        "def solution():\n    from math import factorial\n    \n    def permutations(n, r):\n        return factorial(n) // factorial(n - r)\n    \n    # Total number of ways to arrange the letters in \"RAINBOW\"\n    total_arrangements = factorial(7)\n    \n    # The vowels in the word RAINBOW are A, I, O\n    # There are 3 vowels, which can be arranged in 3! ways.\n    vowels_arrangements = factorial(3)\n    \n    # There are 7 - 3 = 4 consonants in RAINBOW, which create 5 possible spaces to place vowels\n    # ( _ R _ N _ B _ W _ )\n    # The 3 vowels can be placed in the 5 spots in 5P3 ways.\n    vowels_placements = permutations(5, 3)\n    \n    # Ways in which vowels can be together is the product of vowels' arrangements and their placements in the given spots\n    together_vowels_arrangements = vowels_arrangements * vowels_placements\n    \n    # The total number of arrangements where vowels are never together is the difference\n    # between the total arrangements and the way vowels can be together.\n    ans = total_arrangements - together_vowels_arrangements\n    \n    return ans\n\nans = solution()"
    ],
    "de33ae344c7942fbb4e480c5ae79a90e": [
        "def solution():\n    return 492.9 + 73.521 + 32.12\n\nans = solution()"
    ],
    "0143483f1edf4af3a803bb1221bcb8e1": [
        "def solution():\n    # Iterate over the range and check if the number is a multiple of 4 and a factor of 36\n    for num in range(10, 21):\n        if num % 4 == 0 and 36 % num == 0:\n            return num\n\nans = solution()"
    ],
    "43d937a1a1ef47ef8b56b4494d1b2a22": [
        "def solution():\n    ans = 3.462 / 0.3\n    return ans\n\nans = solution()"
    ],
    "ed6e120cf0bc499d8e4a9bf4a9c4fd73": [
        "def solution():\n    n_10 = 10\n    sum_10 = 20\n    n_30 = 30\n    sum_30 = 90\n\n    # Using the formula for the sum of the first n terms of an arithmetic progression: S_n = n/2 * (2a + (n - 1)d)\n    # We have two equations:\n    # sum_10 = n_10 / 2 * (2a + (n_10 - 1)d)\n    # sum_30 = n_30 / 2 * (2a + (n_30 - 1)d)\n    \n    # Let's solve the system of equations\n    from sympy import symbols, Eq, solve\n\n    a, d = symbols('a d')\n    eq1 = Eq(n_10 / 2 * (2 * a + (n_10 - 1) * d), sum_10)\n    eq2 = Eq(n_30 / 2 * (2 * a + (n_30 - 1) * d), sum_30)\n\n    solutions = solve((eq1, eq2), (a, d))\n\n    return solutions[d]\n\nans = solution()"
    ],
    "3fb10b4abb524d58afc63043c1689553": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(0.15 * x - 0.25 * (1000 - x), -50)\n\n    result = solve(equation, x)\n\n    return result[0]\n\nans = solution()"
    ],
    "dab22ef1b9474ab2b0ebf64fe8f912d5": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 3), (3, 5), (4, 7)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "c0f56c7d52444d1a9b65ef7a1513a044": [
        "def solution():\n    return 128 - 54\n\nans = solution()"
    ],
    "1b32f8e585fc46068085a2478636e072": [
        "def solution():\n    jess_time = 18\n    jo_time = jess_time - 6\n    mary_time = jo_time + 4\n    \n    return mary_time\n\nans = solution()"
    ],
    "d900be8e099f4d49838cded0aec8d0e8": [
        "def solution():\n    # Let x be the number of stickers Penny has.\n    # Then Amy has 5/4 * x stickers. Together, they have 117 stickers.\n    # Therefore, x + 5/4 * x = 117 -> 9/4 * x = 117\n    # Solving for x gives us the number of stickers Penny has.\n    x = 117 * 4 / 9\n    return int(x)\n\nans = solution()"
    ],
    "104a46795ca64208939686b66fb9a82e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    chickens, goats, cows = symbols('chickens goats cows')\n    \n    # chickens + goats = 40\n    equation1 = Eq(chickens + goats, 40)\n    \n    # 3 * chickens = 5 * cows\n    equation2 = Eq(3 * chickens, 5 * cows)\n    \n    # 2 * goats = 10 * cows\n    equation3 = Eq(2 * goats, 10 * cows)\n    \n    solutions = solve((equation1, equation2, equation3), (chickens, goats, cows))\n    \n    # Since chickens have 2 feet each, goats have 4 feet each, and cows have 4 feet each\n    total_feet = 2 * solutions[chickens] + 4 * solutions[goats] + 4 * solutions[cows]\n    \n    return total_feet\n\nans = solution()"
    ],
    "35c1ed41867c49dfb5f6c880fb136ac2": [
        "def solution():\n    count = 0\n    for i in range(1, 151):\n        count += str(i).count('2')\n    return count\n\nans = solution()"
    ],
    "36e844fd0400420f989f1166d3df56c7": [
        "def solution():\n    words_per_minute = 125\n    minutes = 9\n    days = 6\n\n    words_in_9_minutes = words_per_minute * minutes\n    total_words = words_in_9_minutes * days\n\n    return total_words\n\nans = solution()"
    ],
    "921b2f01420749da85075867e970dacb": [
        "def solution():\n    speed_km_per_hr = 3.6\n    time_seconds = 300\n\n    # Convert speed to km per second\n    speed_km_per_sec = speed_km_per_hr / 3600\n\n    # Calculate distance in km\n    distance_km = speed_km_per_sec * time_seconds\n\n    # Convert distance to meters\n    distance_meters = distance_km * 1000\n\n    return distance_meters\n\nans = solution()"
    ],
    "b370814add5e431bb51f7d7dac8d3ba5": [
        "def solution():\n    sold_apples = 40\n    fraction_sold = 4 / 7\n    fraction_brought = 1 / 2\n\n    brought_apples = sold_apples / fraction_sold\n    total_apples = brought_apples / fraction_brought\n\n    return int(total_apples)\n\nans = solution()"
    ],
    "44d68779a7c0423eb6e762338b582fca": [
        "def solution():\n    first_two_avg = 10\n    last_two_avg = 22\n    first_last_avg = 14\n\n    # Compute the first and last number based on their average\n    first_number = first_last_avg * 2 - last_two_avg\n    last_number = first_last_avg * 2 - first_two_avg\n    \n    # Compute the sum of the first two and the last two numbers\n    sum_first_two = first_two_avg * 2\n    sum_last_two = last_two_avg * 2\n\n    # The sum of the two middle numbers is the sum of first two and the last two subtracting the first and the last numbers\n    sum_middle_two = sum_first_two + sum_last_two - first_number - last_number\n\n    # The average of the two middle numbers is the sum of them divided by 2\n    middle_two_avg = sum_middle_two / 2\n    \n    return middle_two_avg\n\nans = solution()"
    ],
    "6028933632e54b1a828b0f6d3598c001": [
        "def solution():\n    ans = sum(range(200, 209, 2))\n    return ans\n\nans = solution()"
    ],
    "a754f6b5ebcb4917afb374104733b09e": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['9', '0', '2', '3']\n    all_possible_numbers = [int(''.join(p)) for p in permutations(digits)]\n    closest_number = min(all_possible_numbers, key=lambda x: abs(x - 2978))\n    return closest_number\n\nans = solution()"
    ],
    "653842c3dbaa4a70846409866d45815a": [
        "def solution():\n    # Using the formula for the maximum number of regions formed by n lines:\n    # R = n(n + 1)/2 + 1\n    lines = 10\n    regions = (lines * (lines + 1)) // 2 + 1\n\n    return regions\n\nans = solution()"
    ],
    "5ecddfaa220c43cf8e47b0f83763a84d": [
        "def solution():\n    first_term = 48\n    last_term = 80\n    difference = 4\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    total_seats = (num_terms / 2) * (first_term + last_term)\n\n    return int(total_seats)\n\nans = solution()"
    ],
    "8da4fb1e422544f0a8b82f886050843b": [
        "def solution():\n    count = 0\n    for number in range(200, 501):\n        if '3' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "668003c3b4ee4430939bf7445ffe574b": [
        "from sympy import divisors\n\ndef solution():\n    # Find divisors of 7007 that are 2-digit multiples of 7\n    possible_divisors = [d for d in divisors(7007) if 10 <= d < 100 and d % 7 == 0]\n    \n    # Find the pair of divisors that multiply to 7007\n    for i in range(len(possible_divisors)):\n        for j in range(i+1, len(possible_divisors)):\n            if possible_divisors[i] * possible_divisors[j] == 7007:\n                # Return their sum\n                return possible_divisors[i] + possible_divisors[j]\n\nans = solution()"
    ],
    "40a9e9bead5546a4a0e08b6e1af8f008": [
        "def solution():\n    result_after_operations = 50\n    original_number = (result_after_operations + 10) / 2\n    return original_number\n\nans = solution()"
    ],
    "fbd5c2b741d540409dda4ac6ae1eefe3": [
        "def solution():\n    average_of_A_and_B = 22\n    C = 19\n    sum_of_A_and_B = 2 * average_of_A_and_B\n    sum_of_A_and_B_and_C = sum_of_A_and_B + C\n    average_of_A_B_and_C = sum_of_A_and_B_and_C / 3\n    return average_of_A_B_and_C\n\nans = solution()"
    ],
    "6d5b83fe42184fb9bc959fdc4861c9b3": [
        "def solution():\n    average_age_chinese_english = 34\n    average_age_english_math = 36\n    average_age_chinese_math = 44\n    \n    # Sum of average ages for all pairs\n    sum_of_averages = (average_age_chinese_english + average_age_english_math + average_age_chinese_math)\n    # Each individual is counted twice in the sum, so divide by 2 to get the total average age of the 3 teachers\n    total_average_age = sum_of_averages / 2\n    \n    return total_average_age\n\nans = solution()"
    ],
    "28594ee0096c4c27b6982e846d9415e3": [
        "def solution():\n    from datetime import datetime\n\n    birth_date = datetime(1533, 9, 7)\n    death_date = datetime(1603, 3, 24)\n\n    age = death_date.year - birth_date.year - ((death_date.month, death_date.day) < (birth_date.month, birth_date.day))\n\n    return age\n\nans = solution()"
    ],
    "6b5f28a0da7644bf91c51262467f22af": [
        "def solution():\n    total_coins = 37\n    children = 5\n    remainder = total_coins % children\n    return remainder\n\nans = solution()"
    ],
    "5532a59da23d4cbea467c1a0cabeb494": [
        "def solution():\n    total_cakes = 50\n    total_layers = 9\n    # Using the Pigeonhole Principle, calculate the minimum number of cakes in the layer with the most cakes\n    max_cakes_per_layer = (total_cakes + total_layers - 1) // total_layers\n    return max_cakes_per_layer\n\nans = solution()"
    ],
    "f83aeb54a6454c92abe4a6bb1cd131df": [
        "def solution():\n    side_length = 1\n    while (side_length + 1) ** 2 <= 23:\n        side_length += 1\n    to_cut = 23 - side_length ** 2\n    return to_cut\n\nans = solution()"
    ],
    "830b4822d207437b89a3a6ce5de16c84": [
        "def solution():\n    ans = (21 + 1) * 7 - (20 + (1 * 7))\n    return ans\n\nans = solution()"
    ],
    "3fa5ea265a5d4c0297ecf03b1cb17e9d": [
        "def solution():\n    sum_frac_parts = sum([(2018 + i) / 5 - ((2018 + i) // 5) for i in range(1, 2019)])\n    return sum_frac_parts\n\nans = solution()"
    ],
    "f2e7d75d544640ef95f39ae11d58e429": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, benson = symbols('chelsia benson')\n    equation1 = Eq(3/4 * chelsia, 2/3 * benson)\n    equation2 = Eq(chelsia, benson - 18)\n\n    solutions = solve((equation1, equation2), (chelsia, benson))\n\n    total = solutions[chelsia] + solutions[benson]\n\n    return total\n\nans = solution()"
    ],
    "7de9bf80e9294c29a99d27418f478a8e": [
        "from math import factorial\n\ndef solution():\n    total_numbers = factorial(5)\n    repeat_factor_1 = factorial(2)\n    ans = total_numbers // repeat_factor_1\n    return ans\n\nans = solution()"
    ],
    "53f7ab0a979c47e9875a6745078c1158": [
        "def solution():\n    total_students = 300\n    year_5_students = total_students * 3 // 10\n    year_5_girls = year_5_students * 3 // 5\n\n    return year_5_girls\n\nans = solution()"
    ],
    "65457d2cc6de489f9eda50d81a2a99cd": [
        "def solution():\n    return 12 * 1.99\n\nans = solution()"
    ],
    "01afb46f9dd94497ab3c9968556ca7a1": [
        "def solution():\n    # Number of boxes\n    n = 10\n    # Total cookies\n    total_cookies = 425\n    # Cookies in the first box\n    a1 = 11\n    # Using the formula for the sum of an arithmetic sequence: S = n/2 * (2a1 + (n - 1)d)\n    # total_cookies = n/2 * (2*a1 + (n - 1)*d)\n    # Solve for d:\n    # 2 * total_cookies = n * (2*a1 + (n - 1)*d)\n    # (2 * total_cookies) / n = 2*a1 + (n - 1)*d\n    # ((2 * total_cookies) / n - 2*a1) = (n - 1)*d\n    # d = ((2 * total_cookies) / n - 2*a1) / (n - 1)\n    d = ((2 * total_cookies) / n - 2*a1) / (n - 1)\n    return int(d)\n\nans = solution()"
    ],
    "854a818f3b564ec2936328e1204553fa": [
        "def solution():\n    A_inv = sum(1 / i for i in range(1995, 2009))\n    A = 1 / A_inv\n    return int(A)\n\nans = solution()"
    ],
    "a38e073e5c4f4c3f94fc8c0ac26838a1": [
        "def solution():\n    # Since the numbers are consecutive odd numbers, the common difference d = 2.\n    # Let the first (smallest) odd number be x.\n    # The sum of an arithmetic series is given by the formula: S_n = n/2 * (a_1 + a_n)\n    # where S_n is the sum of the first n terms, a_1 is the first term and a_n is the nth term.\n    # Since we have 7 terms and the sum is 357, we can write the equation:\n    # 357 = 7/2 * (x + (x + 12)) because the last number will be the first number + 6*2 (since there are 7 odd numbers)\n    # Simplifying the equation gives us: 357 = 7/2 * (2x + 12)\n    # Further simplifying gives us: 357 = 7x + 42\n    # Solving for x we get: x = (357 - 42) / 7\n    # Hence x = 45, so the smallest number is 45.\n\n    sum_of_numbers = 357\n    total_numbers = 7\n    x = (sum_of_numbers - 12 * (total_numbers // 2)) // total_numbers\n    \n    return x\n\nans = solution()"
    ],
    "3c4de249075d4f07b0fc0c817ff3c58b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    table, chair = symbols('table chair')\n    \n    # 5 tables and 12 chairs cost $720\n    equation1 = Eq(5 * table + 12 * chair, 720)\n    # Each table costs $25 more than each chair\n    equation2 = Eq(table, chair + 25)\n    \n    solutions = solve((equation1, equation2), (table, chair))\n    \n    return solutions[table]\n\nans = solution()"
    ],
    "d5fb71d8282e4dad9d6f8b784f5145e7": [
        "def solution():\n    for num in range(200, 401):\n        if all([num % 3 == 2, num % 4 == 2, num % 5 == 2, num % 7 == 5]):\n            return num\n\nans = solution()"
    ],
    "4b3d2f8a295c449eb0b933dd026b4cf9": [
        "def solution():\n    count = 0\n    for x1 in range(1, 14):\n        for x2 in range(1, 14):\n            x3 = 13 - x1 - x2\n            if x3 > 0 and x3 != x1 and x3 != x2:\n                count += 1\n    return count // 6  # Divide by 6 to account for permutations of the 3 numbers\n\nans = solution()"
    ],
    "eb64f29a539744afa20fabe47cf4247f": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # The congruences are x ≡ 1 (mod 5), x ≡ 1 (mod 6), x ≡ 1 (mod 7)\n    congruences = [(1, 5), (1, 6), (1, 7)]\n    smallest_number, _ = solve_congruence(*congruences)\n    \n    return int(smallest_number)\n\nans = solution()"
    ],
    "985a10206885415abe07e67ad7c806da": [
        "def solution():\n    # 2 is the only even prime number\n    return 2\n\nans = solution()"
    ],
    "a6f219bbae8a4dde8e0a10e161120049": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    martin_speed, carter_speed = symbols('martin_speed carter_speed')\n\n    # Given ratio of time\n    time_ratio_martin = 9\n    time_ratio_carter = 13\n\n    # Martin's speed is 20 m/min faster than Carter's\n    equation1 = Eq(martin_speed, carter_speed + 20)\n\n    # The distances are the same, so the ratio of speeds is the inverse of the ratio of times\n    equation2 = Eq(martin_speed / carter_speed, time_ratio_carter / time_ratio_martin)\n\n    solutions = solve((equation1, equation2), (martin_speed, carter_speed))\n\n    return solutions[carter_speed]\n\nans = solution()"
    ],
    "033e1d824bce41289651265703300be3": [
        "def solution():\n    return 12636 // 54\n\nans = solution()"
    ],
    "e7dc5d1f98e34b2b9e1ae130e2a988c0": [
        "def solution():\n    fred_time = 9\n    together_time = 6\n\n    george_time = (fred_time * together_time) / (fred_time - together_time)\n\n    return george_time\n\nans = solution()"
    ],
    "39314ee04d5249c699fbe6a90a08ea57": [
        "def solution():\n    total_cloth = 18\n    x = symbols('x')\n    remaining_cloth = total_cloth - x\n    \n    return remaining_cloth\n\nans = solution()"
    ],
    "5b0fce7f22474da9ace32b857c116492": [
        "from fractions import Fraction\n\ndef solution():\n    return Fraction(3) / Fraction(1, 3)\n\nans = solution()"
    ],
    "281326e2a0e3497ca68a17bd591efba8": [
        "def solution():\n    return 543 + 284\n\nans = solution()"
    ],
    "0c22c9cf700b49a797234271b1f29ce6": [
        "def solution():\n    ans = (132 + 68) * (520 - 506)\n    return ans\n\nans = solution()"
    ],
    "8af761818c504f10a3169d69baf02a4b": [
        "def solution():\n    # Number of legs for cats, dogs, and rabbit\n    legs_cats = 2 * 4\n    legs_dogs = 2 * 4\n    legs_rabbit = 1 * 4\n    \n    # Total legs of cats, dogs, and rabbit\n    total_legs_cdr = legs_cats + legs_dogs + legs_rabbit\n    \n    # Legs remaining for birds (each bird has 2 legs)\n    legs_birds = 28 - total_legs_cdr\n    \n    # Number of birds\n    num_birds = legs_birds // 2\n    \n    return num_birds\n\nans = solution()"
    ],
    "c0b11362a9114743b4f269d706e86245": [
        "def solution():\n    # To ensure that we have two apples of the same color,\n    # we need to consider the worst case scenario where every time we pick a different color than before.\n    # Since there are two colors, in every two picks, we are forced to pick a different color each time.\n    # Therefore, after 14 picks of red, the next pick must be red or yellow,\n    # but since all reds are picked, it must be yellow, ensuring two of the same color (yellow in this case).\n\n    # 14 red apples + 1 more pick = 15 picks to ensure two of the same color\n    return 15\n\nans = solution()"
    ],
    "d7922e5e4a59420081b76bfba68dfc63": [
        "def solution():\n    # Let r be the number of red pens originally.\n    # Let b be the number of black pens originally.\n    # Let s be the number of red pens sold (and also black pens, since the same number was sold).\n    # According to the problem, the final number of red pens is 20.\n    # We have the following system of equations based on the given ratios:\n    # r / b = 3 / 7\n    # (r - s) / (b - s) = 5 / 13\n    # r - s = 20\n    \n    # Expressing b in terms of r from the first equation:\n    # b = (7/3) * r\n    \n    # Substituting the value of b in the second equation, we get:\n    # (r - s) / ((7/3) * r - s) = 5 / 13\n    # Cross-multiplying gives:\n    # 13 * (r - s) = 5 * ((7/3) * r - s)\n    \n    # Let r = 20 + s and substitute in the above equation:\n    # 13 * (20 + s - s) = 5 * (7/3 * (20 + s) - s)\n    # 13 * 20 = 5 * (7/3 * 20 + (7/3 - 1) * s)\n    # 260 = 5 * (140/3 + (4/3) * s)\n    # 260 = 700/3 + (20/3) * s\n    # 260 * 3 = 700 + 20 * s\n    # 780 = 700 + 20 * s\n    # 80 = 20 * s\n    # s = 80 / 20\n    # s = 4\n\n    # So 4 red pens were sold.\n    \n    s = 4\n    return s\n\nans = solution()"
    ],
    "90366a7b3e114b0782979eb7a1e2fcf7": [
        "def solution():\n    num_entrances = 5\n    num_people = 4\n    \n    # Since they can choose the same entrance or different ones,\n    # and the order matters, we use permutations with repetition\n    ways = num_entrances ** num_people\n    \n    return ways\n\nans = solution()"
    ],
    "75543c0d8a344cd8a2e2dae02cbf92b8": [
        "def solution():\n    ans = 2.42 * 1.6\n    return ans\n\nans = solution()"
    ],
    "2bbb1e71338f41f6b5859b75e2be3aa2": [
        "def solution():\n    count_by_5 = 200 // 5\n    count_by_7 = 200 // 7\n    count_by_35 = 200 // (5 * 7)\n\n    ans = count_by_5 + count_by_7 - count_by_35\n    return ans\n\nans = solution()"
    ],
    "b3c36c7c2db9474583eeb898917fa090": [
        "def solution():\n    return 27 * 3\n\nans = solution()"
    ],
    "3eeca15404314eae896ffb6e5ded37b1": [
        "def solution():\n    factors_of_42 = [i for i in range(1, 43) if 42 % i == 0]\n    for factor in factors_of_42:\n        if 10 < factor < 20:\n            return factor\n\nans = solution()"
    ],
    "30f6b3c01a03478b9d6e70cbb8b7a3d4": [
        "def solution():\n    current_value = 10500\n    # Reverse calculate the value one year ago before the 5% increase\n    value_before_increase = current_value / 1.05\n    # Reverse calculate the original value two years ago before any increase or decrease\n    original_value = value_before_increase / 1.05\n\n    # Calculate the value after losing 5% in the slumps this year\n    value_after_decrease = current_value * (1 - 0.05)\n    \n    # The difference between the original value and the value after this year's decrease\n    profit_or_loss = value_after_decrease - original_value\n\n    return profit_or_loss\n\nans = solution()"
    ],
    "8abbe2b1899a4c2e80f9586a6a4dca94": [
        "def solution():\n    numbers = [8, 3, 9]\n    average = 6\n    total_numbers = 4\n    \n    sum_of_numbers = sum(numbers)\n    total_sum = average * total_numbers\n    missing_number = total_sum - sum_of_numbers\n    \n    return missing_number\n\nans = solution()"
    ],
    "3e5011dfff4a4b9b81f4caef853a49dc": [
        "def solution():\n    total_weight = 300\n    bag_weight = 12\n    num_bags = -(-total_weight // bag_weight)  # Ceiling division\n\n    return num_bags\n\nans = solution()"
    ],
    "e85ba3fcd99f4dd3a67b9b4bdac33f3c": [
        "def solution():\n    from sympy import isprime\n\n    for num in range(10, 50):\n        if num % 3 == 2 and isprime(num) and num % 5 == 2:\n            return num\n\nans = solution()"
    ],
    "f5b4975343a544e0a0162174eaf7d4af": [
        "from itertools import permutations\n\ndef solution():\n    digits = '1356789'\n    for perm in permutations(digits):\n        first_number = int(''.join(perm[:3]))\n        second_number = int(''.join(perm[3:5])) * 10 + first_number % 10\n        third_number = int(''.join(perm[5:])) * 100 + second_number % 100\n        if second_number == 2 * first_number and third_number == 4 * first_number:\n            return third_number\n\nans = solution()"
    ],
    "52bf46560c164e7bb42b6bd92f0f48a8": [
        "def solution():\n    result = 1126\n    # Reverse the last subtraction\n    result += 50  # result now holds step 7 result\n    # Reverse the last multiplication\n    result //= 5  # result now holds step 6 result\n    # Reverse the subtraction of 20\n    result += 20  # result now holds step 5 result\n    # Reverse the last multiplication\n    result //= 5  # result now holds step 4 result\n    # Reverse the addition of 6\n    result -= 6  # result now holds step 3 result\n    # Reverse the multiplication by 4\n    result //= 4  # result now holds step 2 result\n    \n    # The month of birth is held in the tens and hundreds place (step 2 result)\n    month = result // 100\n    # The day of birth is the remainder of the month step (step 2 result)\n    day = result % 100\n    \n    return (month, day)\n\nans = solution()"
    ],
    "f9135cf12fe94650a246bc80d424cf81": [
        "def solution():\n    return 24 * 7\n\nans = solution()"
    ],
    "8c8c3f8464b24d8c81c07c35b9ea6792": [
        "def solution():\n    initial_cup_price = 5\n    refill_price = 1\n    total_money = 10\n    \n    # Buy the first cup\n    total_money -= initial_cup_price\n    cups_count = 1\n    \n    # Buy refills\n    refills = total_money // refill_price\n    cups_count += refills\n    \n    return cups_count\n\nans = solution()"
    ],
    "cab2106c28234f39ae49d4baa681fd8d": [
        "def solution():\n    # Calculate the sum of the first half of the sequence 4+8+...+400\n    first_term = 4\n    last_term = 400\n    difference = 4\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_first_half = (num_terms * (first_term + last_term)) // 2\n    \n    # Since the sequence is symmetric, the sum of the second half is the same\n    sum_second_half = sum_first_half\n    \n    # The sum of the full sequence is the sum of both halves\n    full_sum = sum_first_half + sum_second_half\n\n    return full_sum\n\nans = solution()"
    ],
    "3f1a8e5b057c47568af8eaa8c8a7ce10": [
        "def solution():\n    return 729 // 9\n\nans = solution()"
    ],
    "ee339de70e1e49448ce55adaeae5eaa7": [
        "def solution():\n    total_peaches_for_3_monkeys = 96\n    days_for_3_monkeys = 2\n    peaches_per_day_per_monkey = total_peaches_for_3_monkeys / (3 * days_for_3_monkeys)\n\n    number_of_monkeys = 5\n    days_for_5_monkeys = 4\n    total_peaches_for_5_monkeys = peaches_per_day_per_monkey * number_of_monkeys * days_for_5_monkeys\n\n    return total_peaches_for_5_monkeys\n\n\nans = solution()"
    ],
    "9e46398b6b5e425abaa591db8be0c422": [
        "from math import factorial\n\ndef solution():\n    story_books = 2\n    comic_books = 3\n    science_books = 4\n\n    # Calculate permutations within each type of book\n    perm_story = factorial(story_books)\n    perm_comic = factorial(comic_books)\n    perm_science = factorial(science_books)\n\n    # Calculate the number of ways to arrange the different types of categories\n    categories = 3  # story, comic, science books\n    perm_categories = factorial(categories)\n\n    # Total number of ways to arrange books\n    total_ways = perm_story * perm_comic * perm_science * perm_categories\n    return total_ways\n\nans = solution()"
    ],
    "14c24a868f9148719c30a1b91c427e21": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the unknown variable T\n    T = symbols('T')\n\n    # Calculate the tax for the first $50,000\n    tax_for_first_50k = 0.06 * 50000\n\n    # Set up the equation for the tax on the amount above $50,000\n    remaining_income = 120000 - 50000\n    tax_for_remaining = remaining_income * (0.06 + T/100)\n\n    # The total tax paid is $10,000\n    total_tax_paid = 10000\n\n    # Write the equation representing the condition\n    equation = Eq(tax_for_first_50k + tax_for_remaining, total_tax_paid)\n\n    # Solve the equation for T\n    solution_T = solve(equation, T)\n\n    return solution_T[0]\n\nans = solution()"
    ],
    "8b8ec14b7a8644c29978ed2f26e00750": [
        "def solution():\n    ans = 345 * 5\n    return ans\n\nans = solution()"
    ],
    "3681f2592b314f8ab3a72fc47b8f90bb": [
        "def solution():\n    from math import comb\n\n    # If each person gets at least 1 ice-cream, we distribute 3 immediately\n    # The remaining problem is to distribute 2 identical ice-creams to 3 people\n    # This is a problem of combinations with repetitions (or stars and bars method)\n    # The formula for this is comb(n + k - 1, k) where n is the number of items to distribute\n    # and k is the number of categories (people, in this case)\n    \n    n = 2  # Remaining ice-creams to distribute\n    k = 3  # Friends\n\n    ans = comb(n + k - 1, n)  # Calculating the combination with repetitions\n    return ans\n\nans = solution()"
    ],
    "e01c74553e6347a3b1a064b18bd7140d": [
        "def solution():\n    # Total spent from January to March (3 months)\n    jan_to_mar = 3 * 450\n    # Total spent from April to July (4 months)\n    apr_to_jul = 4 * 350\n    # Total spent from August to October (3 months)\n    aug_to_oct = 1250  # given total\n    # Total spent from November to December (2 months)\n    nov_to_dec = 2 * 400\n\n    # Total amount spent in the year\n    total_spent = jan_to_mar + apr_to_jul + aug_to_oct + nov_to_dec\n    # Total number of months is 12\n    months = 12\n\n    # Calculate average spent per month\n    avg_spent_per_month = total_spent / months\n\n    return avg_spent_per_month\n\nans = solution()"
    ],
    "27b3555bfced4c3fa57ebd84801ad9e9": [
        "def solution():\n    # Since the distance to the library and back is the same, we can let that distance be d.\n\n    # Time to walk to the library at 40 m/min\n    walk_speed = 40\n    # Time from library cycling at 60 m/min\n    cycle_speed = 60\n\n    # Average speed formula is total distance / total time\n    # Average speed = 2d / (d/walk_speed + d/cycle_speed)\n    # Simplifying the above gives us the harmonic mean of the two speeds\n    # Harmonic mean (for 2 numbers) = 2ab / (a + b)\n    average_speed = 2 * walk_speed * cycle_speed / (walk_speed + cycle_speed)\n\n    return average_speed\n\nans = solution()"
    ],
    "462088e1598d4df6ad551447b191e0c2": [
        "def solution():\n    # Let x be the money Sophie's mother gave her.\n    # 5 servings of ice cream cost x + 2.30 (since she was short 2.30)\n    # 3 servings of ice cream cost x - 0.30 (since she had 0.30 left after buying)\n    # Thus, 2 servings of ice cream cost 2.60 (the difference between the two costs)\n    # Each serving costs 2.60 / 2 = 1.30\n    # Now we can find out how much she initially had (3 servings + 0.30 left):\n    # x = (3 * 1.30) + 0.30\n\n    price_per_serving = 2.60 / 2\n    initial_money = (3 * price_per_serving) + 0.30\n    return initial_money\n\nans = solution()"
    ],
    "8b91281c082e4e1e8991287413079e54": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    \n    equation = Eq((3.5/(3*x+2)) + (2/(1.5*x+1)), (4.5/(5-6*x)) - (3/(2.5-3*x)))\n\n    ans = solve(equation, x)\n\n    return ans\n\nans = solution()"
    ],
    "bcade51c8974433b902c06454320d2d6": [
        "def solution():\n    min_sweets_in_bag = None\n    for m in range(10):\n        total_sweets = int(f\"127{m}\")\n        if total_sweets % 25 == 0:\n            min_sweets_in_bag = total_sweets // 25\n            break\n    return min_sweets_in_bag\n\nans = solution()"
    ],
    "465d94564aeb464d90ec7faaf9940c3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the cost of a pen as 'p' and the cost of a ruler as 'r'\n    p, r = symbols('p r')\n\n    # Given that Chuck bought 2 rulers and 9 pens for $21.60\n    equation1 = Eq(2*r + 9*p, 21.60)\n\n    # Given that a ruler costs $0.90 more than a pen\n    equation2 = Eq(r, p + 0.90)\n\n    # Solving the two equations simultaneously for 'p' and 'r'\n    solutions = solve((equation1, equation2), (p, r))\n    \n    # We need to return the cost of each ruler which is represented by 'r'\n    return solutions[r]\n\nans = solution()"
    ],
    "e9b595c255074a5b964141db77e7289a": [
        "def solution():\n    x = symbols('x')\n    y = symbols('y')\n\n    # Given proportion equation\n    proportion_eq = Eq(9/x, y/2)\n\n    # Solve the equation for y when x = 3\n    y_value = solve(proportion_eq.subs(x, 3), y)\n\n    # The relationship between x and y is direct/inverse proportion (choose one)\n    # Since the proportion is of the form (constant/x) = (y/constant), it is an inverse proportion.\n    relationship = 'inverse'\n\n    # y value when x = 3\n    y_result = y_value[0]\n\n    return relationship, y_result\n\nans = solution()"
    ],
    "51ad76377c2d44b9bc497caa5e86cd99": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['2', '3', '5', '6']\n    perm = permutations(digits)\n    odd_numbers = [int(''.join(p)) for p in perm if int(p[-1]) % 2 != 0]\n    ans = min(odd_numbers)\n    return ans\n\nans = solution()"
    ],
    "1d0c88113962459d9a867535f00b7776": [
        "def solution():\n    ans = 391 // 17\n    return ans\n\nans = solution()"
    ],
    "54499dc98e4442c5aaa04120c1769fbe": [
        "def solution():\n    # To ensure you get at least two of the same colour,\n    # you would have to consider the worst-case scenario where you pick alternatively.\n    # That is, you pick one green, then one blue, then one green, etc.\n    # Eventually, you will have to pick a ball that makes two-of-a-kind.\n    # There are 7 green and 8 blue balls.\n\n    # Picking one of each color alternatively would give you:\n    # G, B, G, B, G, B, G – at this point, you have picked all the green balls.\n    # The next ball you pick must be blue, as only blue balls are left.\n\n    # Total number of balls picked is 7 (all green) + 1 (the next blue) = 8\n\n    return 8\n\nans = solution()"
    ],
    "09b871767fd046788bf00397a1526767": [
        "def solution():\n    # Let's denote the starting number as x.\n    # Step by step according to the question:\n    # 1. Think of a number -> x\n    # 2. Add 3 -> x + 3\n    # 3. Multiply by 2 -> 2 * (x + 3)\n    # 4. Take away 2 -> 2 * (x + 3) - 2\n    # 5. Add 10 -> 2 * (x + 3) - 2 + 10\n    # 6. Divide by 2 -> (2 * (x + 3) - 2 + 10) / 2\n    # 7. Take away the number you started with -> (2 * (x + 3) - 2 + 10) / 2 - x\n\n    # After simplifying the above expression, it turns out that the x terms cancel out,\n    # and we are just left with a constant value. Let's calculate it:\n    ans = (2 * (0 + 3) - 2 + 10) / 2 - 0\n\n    return ans\n\nans = solution()"
    ],
    "931e1d2a335c4a7daca31b92b6d6c0ee": [
        "from math import sqrt, cbrt\n\ndef solution():\n    numerator = -6.94 - cbrt(9.604)\n    denominator = sqrt(44.541 / 67) - (-377 / 6 * 5 / 3)\n    result = numerator / denominator\n    ans = round(result, 3)\n    return ans\n\nans = solution()"
    ],
    "a58850681f6c454b93664a02ebcf4745": [
        "def solution():\n    ans = 299 + 199 + 99 + 5\n    return ans\n\nans = solution()"
    ],
    "618cd3abae4a408c89cdfe804dd7861f": [
        "def solution():\n    total_books = 50\n    total_cost = (20 * 4) + (10 * 5) + (20 * 6)\n    \n    average_cost = total_cost / total_books\n    \n    return average_cost\n\nans = solution()"
    ],
    "a9e6ee1f892d4e91b4af844be4862a94": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Define variables\n    felicia_bracelets, janice_bracelets = symbols('felicia_bracelets janice_bracelets')\n\n    # Information given\n    janice_initial_bracelets = 96\n    felicia_sold_fraction = 3/5\n    janice_bought_fraction = 2/5\n\n    # Equations based on the information from the question\n    # Janice bought 2/5th of what Felicia sold, and this is what Janice has in addition to her initial bracelets amount\n    janice_final_bracelets = janice_initial_bracelets + (felicia_sold_fraction * felicia_bracelets) * janice_bought_fraction\n\n    # After selling, Felicia has 5/5 - 3/5 = 2/5 of her initial amount\n    felicia_final_bracelets = felicia_bracelets * (1 - felicia_sold_fraction)\n\n    # The ratio of Felicia's to Janice's bracelets became 5:7\n    ratio_equation = Eq(felicia_final_bracelets / janice_final_bracelets, 5/7)\n\n    # Felicia's final amount is also equal to Janice's initial bracelets plus the ones she bought\n    bracelets_equation = Eq(felicia_final_bracelets + janice_final_bracelets, felicia_bracelets + janice_initial_bracelets)\n\n    # Solve for the number of bracelets\n    solutions = solve((ratio_equation, bracelets_equation), (felicia_bracelets, janice_bracelets))\n\n    # Number of bracelets Janice bought from Felicia\n    janice_bought = (felicia_sold_fraction * solutions[felicia_bracelets]) * janice_bought_fraction\n\n    return janice_bought\n\nans = solution()"
    ],
    "7025bfa134974b12917661070ac0ccfc": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(51, 100))  # Generate prime numbers between 50 and 100\n    return len(primes)                  # Return the count of prime numbers\n\nans = solution()"
    ],
    "0015db147ca4414ca1e9736f722c0a81": [
        "from itertools import product\n\ndef solution():\n    count = 0\n    for num in product('0123456789', repeat=3):\n        if num[0] != '0' and num.count('7') >= 2:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "21b53a84fa7744b799aa83b063cea3d3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    jack, kyle = symbols('jack kyle')\n\n    # Create the equations based on the problem\n    equation1 = Eq(jack, 5 * kyle)             # Jack had 5 times as much money as Kyle\n    equation2 = Eq(kyle, 2/7 * (jack - 72))    # Kyle had 2/7 as much money as Jack after he lost $72\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (jack, kyle))\n\n    # Return the amount of money Kyle had\n    return solutions[kyle]\n\nans = solution()"
    ],
    "f0b55e6d454f4ee0b6b7bab29ab5fcde": [
        "def solution():\n    # To ensure getting 1 yellow shirt, we consider the worst-case scenario.\n    # The worst-case scenario would be picking all shirts of other colors first.\n    orange = 6\n    pink = 4\n    brown = 12\n\n    # If we pick all non-yellow shirts, the next shirt has to be yellow.\n    non_yellow_shirts = orange + pink + brown\n\n    # Add one more shirt to get at least one yellow shirt.\n    ans = non_yellow_shirts + 1\n  \n    return ans\n\nans = solution()"
    ],
    "81c24559e88e4ed8bcd27664fdc09676": [
        "def solution():\n    from math import lcm\n\n    ans = lcm(9, 10, 15)\n    return ans\n\nans = solution()"
    ],
    "839a183a0d534ab08d061613682d208e": [
        "def solution():\n    multipack_cost = 3.90\n    individual_cost = 0.35\n    savings = (individual_cost * 15) - multipack_cost\n    return savings\n\nans = solution()"
    ],
    "7e911c176e49479e9ed116f42644288d": [
        "def solution():\n    initial_deposit = 20000\n    interest_rate = 0.05\n    years = 11\n\n    final_amount = initial_deposit * (1 + interest_rate * years)\n\n    return final_amount\n\nans = solution()"
    ],
    "f12b69acb17a43e28c14160e54423ddd": [
        "def solution():\n    # Given equation is 3/4 + 3/4 + 3/4 = 1 + square * 1/4\n    # Simplify the left hand side\n    lhs = (3/4) + (3/4) + (3/4)\n\n    # Simplify the right hand side\n    rhs = 1\n\n    # Find the number that must be multiplied by 1/4 to get the remaining value after subtracting 1 from lhs\n    square = (lhs - rhs) * 4\n\n    return square\n\nans = solution()"
    ],
    "fe146e5b026340f9924ffd3736d5162b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # symbol represents the first term of the sequence\n    a = symbols('a')\n    \n    # There are 20 terms in total\n    n = 20\n    \n    # The sum of the arithmetic sequence is S = 560\n    S = 560\n    \n    # The common difference is 2\n    d = 2\n    \n    # Using the formula for the sum of an arithmetic sequence: S = n/2 * (2*a + (n-1)d)\n    equation = Eq(n/2 * (2*a + (n-1)*d), S)\n    \n    # Solve for a\n    smallest_term = solve(equation, a)[0]\n\n    return smallest_term\n\nans = solution()"
    ],
    "4b5a108e7b29463283a0121b8eff4ee7": [
        "def solution():\n    total_distance = 8\n    climb_up = 3\n    slide_down = 2\n\n    # Effective climb in one full day (daytime and nighttime)\n    effective_climb_per_day = climb_up - slide_down\n\n    # Calculate the number of full days needed for the worm to be just one step away from reaching the top\n    # This is because in the next move, the worm climbs out before slipping back\n    days_to_reach_last_step = (total_distance - climb_up) // effective_climb_per_day\n\n    # Adding the final day when it climbs out in the daytime\n    day_to_reach_surface = days_to_reach_last_step + 1\n\n    return day_to_reach_surface\n\nans = solution()"
    ],
    "24494b59b3a84f199458f505e96beab3": [
        "def solution():\n    # Calculate the total number of pages read\n    total_pages = (25 * 4) + (40 * 6) + 80\n    # Calculate the total number of days\n    total_days = 4 + 6 + 5\n    # Calculate the average number of pages read per day\n    average_pages_per_day = total_pages / total_days\n    \n    return average_pages_per_day\n\nans = solution()"
    ],
    "3dcbd6c48bb44952b98d8cdbb7804567": [
        "def solution():\n    brother_original = symbols('brother_original')\n    penny_original = brother_original + 10\n    penny_after = 14\n    brother_after = 12\n\n    # Penny gives away some toys, so her original amount minus what she gave away is 14.\n    penny_gives = penny_original - penny_after\n    \n    # Penny gives toys to her brother, so his new amount is his original amount plus what Penny gave.\n    equation = Eq(brother_original + penny_gives, brother_after)\n\n    # Now we solve for the brother's original amount of toys.\n    solution = solve(equation, brother_original)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "ecd90328d44a498ab3c19fbbded322fc": [
        "def solution():\n    chocolate_cookies = 54\n    strawberry_cookies = chocolate_cookies + 12\n    vanilla_cookies = 3 * chocolate_cookies\n\n    total_cookies = chocolate_cookies + strawberry_cookies + vanilla_cookies\n\n    return total_cookies\n\nans = solution()"
    ],
    "50bfc99c8d774fb4a0ecaeddfbae7daf": [
        "def solution():\n    birds_on_tree_A = 14\n    birds_on_tree_B = birds_on_tree_A + 7\n    total_birds = birds_on_tree_A + birds_on_tree_B\n    return total_birds\n\nans = solution()"
    ],
    "590987a303104728994dd0da7fd3edb0": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 4), (3, 5), (5, 7), (9, 11)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "18e49347b54c42d49dfd7851649db755": [
        "def solution():\n    ans = 123 * 321\n    return ans\n\nans = solution()"
    ],
    "b61f2c67d5474cefa523298e7944c309": [
        "def solution():\n    # Loop through all possible ages 10 to 99.\n    for age in range(10, 100):\n        # Break down the age into tens and ones.\n        tens, ones = divmod(age, 10)\n        # Reverse the digits to form the new age and add 1.\n        reversed_age = ones * 10 + tens + 1\n        # Check if the reversed age plus 1 is half the actual age.\n        if reversed_age == age // 2:\n            return age\n\nans = solution()"
    ],
    "3b73a77f7c8e486d98024f7782b84098": [
        "def solution():\n    n = 50\n    sum_of_series = n * (n + 1) // 2\n    return sum_of_series\n\nans = solution()"
    ],
    "6c8cdbe801664deaa9cc1f055549ee16": [
        "def solution():\n    ans = 3588 // 13\n    return ans\n\nans = solution()"
    ],
    "a4df0cfdb4324df6bf44b5accd085d76": [
        "def solution():\n    # Worst case scenario:\n    # Tom draws 3 cards of each suit, none of which guarantee 4 of the same suit.\n    # So after drawing 3 cards from each of the 4 suits (3*4 = 12 cards),\n    # the next card must be the 4th card of one of the suits.\n    cards_needed = (3 * 4) + 1\n    return cards_needed\n\nans = solution()"
    ],
    "4a2049898e2f4dcb959012b7515613ac": [
        "def solution():\n    ans = 26 + 9 + 14 + 21\n    return ans\n\nans = solution()"
    ],
    "4ada2fc5ea7044e8883b8b41373103ba": [
        "def solution():\n    remaining_tickets_fraction = 1 - 0.60\n    remaining_tickets = 28\n    total_capacity = remaining_tickets / remaining_tickets_fraction\n    return int(total_capacity)\n\nans = solution()"
    ],
    "2eb3b3989afb45418447f85937aa1224": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the amounts spent by Hayden and Mitchell\n    amount_spent = symbols('amount_spent')\n    \n    # Create the equations based on the problem statement\n    hayden_initial = 1420\n    mitchell_initial = 505\n    hayden_after_spending = hayden_initial - amount_spent\n    mitchell_after_spending = mitchell_initial - amount_spent\n    \n    # Hayden has 4 times as much as Mitchell after spending the same amount\n    equation = Eq(hayden_after_spending, 4 * mitchell_after_spending)\n    \n    # Solve the equation for the amount spent\n    solution = solve(equation, amount_spent)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "1404b37a858c4a309f7a557d011e187e": [
        "def solution():\n    one_quarter = 15\n    number = one_quarter * 4\n    two_thirds = (number * 2) / 3\n    return two_thirds\n\nans = solution()"
    ],
    "a4dc96d97cbd45ada42d2e9d64c14fe0": [
        "def solution():\n    # Let the total number of children be c. Then, 3/8 of the children were boys and the rest 5/8 were girls.\n    # According to the problem, there were 45 girls, so we can write the equation:\n    # (5/8) * c = 45\n    # Solving for c\n    c = (45 * 8) // 5\n    \n    # Now, we know that 3/7 of the people were adults, and the remaining 4/7 were children.\n    # Let the total number of people at the party be p. Then, we can write the equation:\n    # (4/7) * p = c\n    # Solving for p\n    p = c * 7 // 4\n    \n    return p\n\nans = solution()"
    ],
    "22ad17f448d649e0b1fe57f02fb19f28": [
        "def solution():\n    # Jim's initial calculation\n    two_dollar_notes = 5 * 2           # amount from two-dollar notes\n    fifty_cent_coins = 7 * 0.5         # amount from fifty-cent coins\n    total_amount = two_dollar_notes + fifty_cent_coins\n\n    # Cost of the file\n    file_cost = 11.95\n\n    # Correct amount of money left\n    money_left = total_amount - file_cost\n\n    # Check if Jim's final answer was correct\n    jims_answer = 165\n    actual_answer = int(money_left * 100)  # Convert to cents for comparison\n\n    return actual_answer, jims_answer == actual_answer\n\nans = solution()"
    ],
    "f2d20571c7e14687b51b0f2273c1a1e6": [
        "def solution():\n    n = 100\n    sum_of_numbers = (n * (n + 1)) // 2\n    return sum_of_numbers\n\nans = solution()"
    ],
    "f8a9831c64444874a7a022c43dcf9b19": [
        "def solution():\n    saturday_sales = 2200\n    sunday_sales = 2200 - 435\n    total_sales = saturday_sales + sunday_sales\n    return total_sales\n\nans = solution()"
    ],
    "305c7d5b598d4dd28cdaf101e7ead5d7": [
        "def solution():\n    total_distance = 11\n    day_distance = 3\n    night_distance = -1\n    net_distance = day_distance + night_distance\n    current_distance = 0\n    day_count = 0\n    \n    while current_distance < total_distance:\n        day_count += 1\n        current_distance += day_distance\n        if current_distance >= total_distance:\n            break\n        current_distance += night_distance\n    \n    return day_count\n\nans = solution()"
    ],
    "7d59e89e4b054b118a94d4c74670905c": [
        "def solution():\n    from math import factorial\n\n    def permutations(n, r):\n        return factorial(n) // factorial(n - r)\n\n    num_pupils = 18\n    seats = 3\n\n    return permutations(num_pupils, seats)\n\nans = solution()"
    ],
    "01cf6f9c69e4458a8b94a0b745d2cc7d": [
        "def solution():\n    ginkgo_trees = 30\n    willow_trees_between = 2\n\n    # Since there are 30 ginkgo trees, there are 29 intervals between them\n    intervals = ginkgo_trees - 1 \n\n    # Two willow trees are planted in each interval\n    total_willow_trees = intervals * willow_trees_between\n\n    return total_willow_trees\n\nans = solution()"
    ],
    "186459d1a5bc465cae1639d4f60e5ff7": [
        "def solution():\n    ans = 10 - 2\n    return ans\n\nans = solution()"
    ],
    "eec2a2b1d8c14700926c3b02af68e739": [
        "def solution():\n    speed_ship_still_water = 28  # km/h\n    speed_current = 3  # km/h\n    \n    # Speed of the ship upstream\n    speed_upstream = speed_ship_still_water - speed_current\n    \n    # Distance to travel\n    distance = 150  # km\n    \n    # Time = Distance / Speed\n    time_taken = distance / speed_upstream\n    \n    return time_taken\n\nans = solution()"
    ],
    "3bb33463238344c0b0c5e15f79be1c35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the amount each boy has\n    andrew, brian, christopher = symbols('andrew brian christopher')\n\n    # Define the equations based on the problem statement\n    equation1 = Eq(andrew + brian, 40)\n    equation2 = Eq(andrew + christopher, 37)\n    equation3 = Eq(brian + christopher, 25)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (andrew, brian, christopher))\n\n    # Calculate the total amount\n    total = solutions[andrew] + solutions[brian] + solutions[christopher]\n\n    return total\n\nans = solution()"
    ],
    "b25a759f5a124329b59f7caa09995681": [
        "def solution():\n    # Given weights\n    adam_and_ben = 102\n    ben_and_carl = 97\n    adam_and_carl = 93\n\n    # Calculate total weight of Adam, Ben, and Carl twice\n    total_weight_twice = adam_and_ben + ben_and_carl + adam_and_carl\n\n    # The actual total weight is half of the total weight calculated above\n    total_weight = total_weight_twice // 2\n\n    return total_weight\n\nans = solution()"
    ],
    "cb41cb4b2a104da19631ca6cf97368fb": [
        "def solution():\n    return (26 + 4) / 5\n\nans = solution()"
    ],
    "d26417287aa54f1a81818d3f38ddf3b7": [
        "def solution():\n    ramen_cost = 8\n    pineapple_juice_cost = ramen_cost - 5\n    roasted_duck_cost = 6 * ramen_cost\n    \n    total_cost = ramen_cost + pineapple_juice_cost + roasted_duck_cost\n\n    return total_cost\n\nans = solution()"
    ],
    "c41f84fd63394a0391698bc5498037eb": [
        "def solution():\n    cheese_weight_g = 500\n    cheese_cost_per_kg_p = 748\n    apple_cost_p = 12\n    yoghurt_cost_p = 46\n    note_value_p = 1000 * 10  # pounds to pence\n\n    cheese_cost_p = (cheese_weight_g / 1000) * cheese_cost_per_kg_p  # g to kg\n    total_apple_cost_p = 8 * apple_cost_p\n    total_yoghurt_cost_p = 2 * yoghurt_cost_p\n    total_spent_p = cheese_cost_p + total_apple_cost_p + total_yoghurt_cost_p\n\n    change_p = note_value_p - total_spent_p\n    change_pounds = change_p / 100  # pence to pounds\n\n    return round(change_pounds, 2)\n\nans = solution()"
    ],
    "c21db49e2ec24c00ad1e61412de8a8da": [
        "def solution():\n    total_aircrafts = 1200\n    zack_rate = 150  # Zack's rate (aircrafts per hour)\n    combined_hours = 6  # Combined hours to sell all aircrafts\n\n    # Combined rate of Andy and Zack together (aircrafts per hour)\n    combined_rate = total_aircrafts / combined_hours  # Total aircrafts divided by the combined hours\n    # Andy's rate (aircrafts per hour)\n    andy_rate = combined_rate - zack_rate  # Subtract Zack's rate from the combined rate\n\n    # How long would it take for Andy to sell all aircrafts\n    andy_time = total_aircrafts / andy_rate  # Total aircrafts divided by Andy's rate\n\n    return andy_time\n\nans = solution()"
    ],
    "1a2675c93fa74d79bf17aa463233e418": [
        "def solution():\n    # Initialize the count for both students and teachers\n    count_students = 0\n    count_teachers = 0\n    \n    # We need to find two consecutive square numbers with a difference of 80\n    # The larger square will be students and the smaller will be teachers\n    # Start from 1 and keep checking consecutive squares until the difference is 80\n    n = 1\n    while True:\n        students = n**2\n        teachers = (n - 2)**2\n        \n        # Since the outermost layer is students, we start counting from them\n        if n > 1:  # For n=1, there are no teachers\n            count_students += students - teachers\n            count_teachers += teachers\n        else:  # For n=1, all are students\n            count_students += students\n        \n        # Check if the difference between students and teachers is 80\n        if count_students - count_teachers == 80:\n            break\n        \n        n += 1\n\n    ans = count_students + count_teachers\n    return ans\n\nans = solution()"
    ],
    "a85551b5ada240de8c9dda1f7da71caa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chloe, david, emily = symbols('chloe david emily')\n\n    equation1 = Eq(chloe, 2 * david)\n    equation2 = Eq(david, 3 * emily)\n    equation3 = Eq(74 + 86 + chloe + david + emily, 400)\n\n    solutions = solve((equation1, equation2, equation3), (chloe, david, emily))\n\n    return solutions[chloe]\n\nans = solution()"
    ],
    "97d454b709c64e6daff1a08bdaaa2036": [
        "def solution():\n    total_volume = 300\n    ratio_lime = 2\n    ratio_orange = 7\n    ratio_apple = 6\n    total_ratio = ratio_lime + ratio_orange + ratio_apple\n    \n    volume_orange = (ratio_orange / total_ratio) * total_volume\n    \n    return volume_orange\n\nans = solution()"
    ],
    "e9ac6545c3a143c28291a6d293def281": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    equation1 = Eq(x + y, 528)\n    equation2 = Eq(x, 3 * y)\n    \n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "ea932493a6be4bd8a55c3012ca3eed55": [
        "def solution():\n    original_amount = 20\n    saved_daily = 1\n    number_of_days_saved = 7\n    lent_to_brother = 5\n    spent_on_snacks = 3\n\n    total_saved = saved_daily * number_of_days_saved\n    amount_left = original_amount + total_saved - lent_to_brother - spent_on_snacks\n\n    return amount_left\n\nans = solution()"
    ],
    "adba7c277cb842899408b324ea11a443": [
        "def solution():\n    total_money = 28.74\n    money_repaid = 10.50\n    remaining_money = total_money - money_repaid\n    spent_on_magazines = remaining_money / 2\n    final_amount = remaining_money - spent_on_magazines\n\n    return final_amount\n\nans = solution()"
    ],
    "b3ed35bbe5ce4935bcc062b5653f1a11": [
        "def solution():\n    from sympy import factorint\n\n    # Given 44000/q is a cube number, we find the prime factors of 44000\n    factors = factorint(44000)\n\n    # We create a dictionary to store the cube factors\n    cube_factors = {key: (3 - (value % 3)) % 3 for key, value in factors.items()}\n\n    # Calculate q as the product of primes raised to the power needed to make it a cube\n    q = 1\n    for prime, power in cube_factors.items():\n        q *= prime ** power\n\n    return q\n\nans = solution()"
    ],
    "be66bf7835674a479413fc1019bf6408": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    length, width = symbols('length width')\n    # The length is twice the width\n    equation1 = Eq(length, 2 * width)\n    # Perimeter is 2 times (length + width), and in this case it is 72 meters\n    equation2 = Eq(2 * (length + width), 72)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (length, width))\n\n    return solutions[length]\n\nans = solution()"
    ],
    "e000ebdd6454463d874a0f9f4b5453da": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define the symbols for the amounts of money Steve, Mark, and Ryan have\n    s, m, r, meal = symbols('s m r meal')\n\n    # Steve has $40 more than Mark\n    equation1 = Eq(s, m + 40)\n\n    # Ratios when Steve pays\n    equation2 = Eq((s - meal) / (m - meal) / (r - meal), 3 / 8 / 9)\n\n    # Ratios when Ryan pays\n    equation3 = Eq((s - meal) / (m - meal) / (r - meal), 5 / 4 / 1)\n\n    # Ratios when Mark pays\n    equation4 = Eq((s - meal) / (m - meal) / (r - meal), 10 / 1 / 9)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (s, m, r, meal))\n\n    # Since there could be multiple solutions, we need to find the one with meal value positive\n    for sol in solutions:\n        if sol[meal] > 0:\n            return sol[meal]\n\nans = solution()"
    ],
    "dfcfac4be0e0482cbfbe73e3f8f36b37": [
        "def solution():\n    n = 81\n    num_factors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            num_factors += 1\n    return num_factors\n\nans = solution()"
    ],
    "cc1ad36629654bae97b8c5a7fac65f55": [
        "def solution():\n    nick_salt = 300 * 0.12\n    nicole_salt = 500 * 0.28\n    total_salt = nick_salt + nicole_salt\n    total_solution = 300 + 500\n    concentration = total_salt / total_solution\n    return concentration\n\nans = solution()"
    ],
    "be0c4394f54542bfb8c9b196143e27a7": [
        "def solution():\n    # Given values\n    term_3 = 23\n    term_15 = 155\n    # If we denote the first term as \"a\" and the common difference as \"d\", then:\n    # term_3 = a + 2d\n    # term_15 = a + 14d\n    # We take term_15 - term_3 to find the difference between these two terms which gives us 12d\n    # Now we solve for \"d\"\n    d = (term_15 - term_3) / (15 - 3)\n    return d\n\nans = solution()"
    ],
    "d9b27069b97d43039159301e52324136": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    equation1 = Eq(B, A - 50)\n    equation2 = Eq(A + 25, 5 * (B - 25))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "de537ba1fad747e38db67229241b78f3": [
        "def solution():\n    mass = 100  # mass of the crate in kg\n    coefficient_of_static_friction = 0.4  # coefficient of static friction\n    force_applied = 250  # force applied in N\n\n    # Calculating the maximum static friction force\n    force_gravity = mass * 9.8  # force due to gravity in N\n    max_force_of_static_friction = coefficient_of_static_friction * force_gravity  # maximum static friction force in N\n\n    # If the applied force is less than the maximum static friction force,\n    # the force of static friction equals the applied force.\n    # Otherwise, the crate would start moving, but we're asked for static friction.\n    force_of_static_friction = min(force_applied, max_force_of_static_friction)\n\n    return force_of_static_friction\n\nans = solution()"
    ],
    "05b3b86ca32248e090e1eb71f8a1857e": [
        "def solution():\n    # Start checking from the smallest cube (1^3) and corresponding square (1^2)\n    cube = 1\n    while True:\n        # Calculate the cube and check if the next integer is a perfect square\n        cube_num = cube ** 3\n        square_candidate = cube_num + 1\n        square_root = int(square_candidate ** 0.5)\n        if square_root ** 2 == square_candidate:\n            return square_candidate\n        # Increment to check the next cube\n        cube += 1\n\nans = solution()"
    ],
    "63961e2f7dee44ca9a4d89a4d4de6c02": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    james, nina = symbols('james nina')\n    \n    # Total number of buttons: james + nina = 24\n    total_buttons_eq = Eq(james + nina, 24)\n    \n    # After Nina gives James 6 buttons: nina - 6 = james + 6\n    equal_after_sharing_eq = Eq(nina - 6, james + 6)\n    \n    # Solve the system of equations\n    solutions = solve((total_buttons_eq, equal_after_sharing_eq), (james, nina))\n\n    return solutions[nina]\n\nans = solution()"
    ],
    "100c6fbfe37a4df59970ef7b87bb2fb2": [
        "def solution():\n    result = ((11/30) - (9/20) + (7/12) - (1/3)) * 6 * (7/13) * 9.1\n    return result\n\nans = solution()"
    ],
    "154e009409a0475f899012d13bba6fbe": [
        "def solution():\n    total_workers = 3\n    total_parts = 90\n    total_hours = 5\n    \n    parts_per_hour_per_worker = (total_parts / total_hours) / total_workers\n    \n    return parts_per_hour_per_worker\n\nans = solution()"
    ],
    "9b06a89d59134d6786d0f3304363e49b": [
        "def solution():\n    total_distance = 16\n    climb_distance = 5\n    slide_distance = 3\n    net_distance_per_day = climb_distance - slide_distance\n    current_distance = 0\n    day = 0\n    \n    while current_distance < total_distance:\n        day += 1\n        current_distance += climb_distance\n        if current_distance >= total_distance:\n            break\n        current_distance -= slide_distance\n    \n    return day\n\nans = solution()"
    ],
    "bee004ffbd0d4ae48f167a59c6b0eba3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(bentley, david - 25)\n    equation3 = Eq(david + bentley + triston, 410)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[bentley]\n\nans = solution()"
    ],
    "e382d288fd514311b12b870b6e188cb0": [
        "def solution():\n    # Given that every 5 bags result in a $1.25 charge\n    # Let's represent the bags used by x and tax charged by y\n    # For every 5 bags (x/5), we get a $1.25 charge\n\n    # The equation relating bags to tax is therefore\n    y = (1.25 / 5) * x\n\n    # Return the equation as a Python tuple representing the coefficient and constant\n    return (1.25 / 5, 0)  # in the form y = mx + c, where m is the slope and c is the y-intercept\n\nans = solution()"
    ],
    "3f7c7e2ec1a24832be797aa888a40a2e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 4), (3, 5), (3, 7), (0, 9)]\n    ans, _ = solve_congruence(*congruences)\n\n    return ans\n\nans = solution()"
    ],
    "cf5c903f7a704e0e9edc0dcebf1c25a4": [
        "def solution():\n    fraction = 8 / 100\n    decimal = 0.7\n    return decimal if decimal > fraction else fraction\n\nans = solution()"
    ],
    "9518ce77f5dc46ba89558b1a438ed818": [
        "from fractions import Fraction\n\ndef solution():\n    result = 3 * Fraction(4, 5) * Fraction(10, 9) * Fraction(11, 2) * Fraction(3, 11)\n    return result\n\nans = solution()"
    ],
    "5b1c49d670024781873d3ae0efb0c655": [
        "def solution():\n    dog_to_rabbit = 8\n    rabbit_to_chicken = 2\n\n    dog_to_chicken = dog_to_rabbit * rabbit_to_chicken\n\n    return dog_to_chicken\n\nans = solution()"
    ],
    "16022d017d8d4b2a93df59ec9de8de8d": [
        "def solution():\n    ans = 1\n    for i in range(2, 51):\n        ans *= ((1/i) - (1/(101-i)))\n    return ans\n\nans = solution()"
    ],
    "eae7f41ff90f44e7a99eb2dc09729a1c": [
        "def solution():\n    initial_height = 270     # The height from which the ball is dropped\n    rebound_ratio = 0.1      # On each rebound, it rises to 10% of the previous height\n    total_distance = initial_height  # Initialize total distance with the first drop\n\n    while initial_height > 0:\n        rebound_height = initial_height * rebound_ratio  # Calculate the rebound height\n        total_distance += 2 * rebound_height  # Add the distance for the fall and rise of the rebound\n        initial_height = rebound_height  # Update the height for the next rebound\n\n    return total_distance\n\nans = solution()"
    ],
    "d023e16d6b0442258dbdd634f6f230cd": [
        "def solution():\n    total_fee = 275\n    flat_fee = 30\n    daily_fee_under_5 = 25\n    daily_fee_over_5 = 20\n    max_day_fee = flat_fee + (5 * daily_fee_under_5)\n\n    if total_fee <= max_day_fee:\n        # All days are charged with the under 5 days fee\n        days = (total_fee - flat_fee) // daily_fee_under_5\n    else:\n        # First 5 days with one fee and the rest with the other fee\n        extra_days_fee = total_fee - max_day_fee\n        extra_days = extra_days_fee // daily_fee_over_5\n        days = 5 + extra_days\n\n    return int(days)\n\nans = solution()"
    ],
    "fbc9c3861d2d486da8e9c21841d42bfa": [
        "def solution():\n    for sheets in range(1, 100):\n        pages = sheets * 4\n        for first_page in range(1, pages):\n            second_page = first_page + 1\n            last_page = pages\n            second_to_last_page = last_page - 1\n            if first_page + second_page + second_to_last_page + last_page == 58:\n                return sheets\n\nans = solution()"
    ],
    "42cc9c30d7da46e1b85c814f51f4cb50": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    green, yellow = symbols('green yellow')\n\n    # Initial equal amounts of green and yellow\n    equation1 = Eq(green, yellow)\n    # After giving away 60 green and 14 yellow cars, yellow becomes thrice green\n    equation2 = Eq(yellow - 14, 3 * (green - 60))\n\n    # Solving the equations\n    solutions = solve((equation1, equation2), (green, yellow))\n\n    # Green cars left in the end\n    green_cars_left = solutions[green] - 60\n\n    return green_cars_left\n\nans = solution()"
    ],
    "f5f9f6e369044a1b83219aa9a9159ae4": [
        "def solution():\n    num_terms = (400 - 4) // 4 + 1\n    sum_sequence = (num_terms / 2) * (4 + 400)\n    return sum_sequence * 2\n\nans = solution()"
    ],
    "821bbb7b160a4641959ffcfcc87a1881": [
        "def solution():\n    total_apples = 200\n    bad_apples_percentage = 15\n    bad_apples = (bad_apples_percentage / 100) * total_apples\n    return bad_apples\n\nans = solution()"
    ],
    "a6d0ec4cdc6d41c1bee18c4428510978": [
        "def solution():\n    race_distance = 3000\n    buck_speed = 600  # in metres per minute\n    elephant_speed = 250  # in metres per minute\n\n    # Time taken for the buck to finish the race\n    buck_time = race_distance / buck_speed\n\n    # Time taken for the elephant to finish the race\n    elephant_time = race_distance / elephant_speed\n\n    # Difference in time taken to finish the race\n    time_difference = elephant_time - buck_time\n\n    return time_difference\n\nans = solution()"
    ],
    "901ccb4591ae4fc0b5dc46e406c89367": [
        "def solution():\n    ans = 123 - 67\n    return ans\n\nans = solution()"
    ],
    "3aaf82004b014041bf215ad6f6fcea70": [
        "def solution():\n    first_term = 2\n    last_term = 80\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "da055c1b89524c48bc32bc19a92de881": [
        "def solution():\n    cost_per_pencil = 1.80 / 12\n    cost_per_pen = cost_per_pencil * (7 / 3)\n    cost_for_5_pens = 5 * cost_per_pen\n    return cost_for_5_pens\n\nans = solution()"
    ],
    "6f13e1fc1b49403ea8b1930c4936f41a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    t = symbols('t')\n\n    # Simon's journey\n    simon_distance = 80 * t  # Distance = Speed * Time\n\n    # Wife's journey\n    wife_distance = 60 * t + 15  # Distance = Speed * Time + Initial gap\n\n    # Equation when Simon overtakes his wife\n    equation = Eq(simon_distance, wife_distance)\n\n    # Solve the time when Simon overtakes his wife\n    t_solution = solve(equation, t)[0]\n\n    # Convert this time to hours and minutes\n    overtaking_time_hours = int(t_solution)\n    overtaking_time_minutes = int((t_solution - overtaking_time_hours) * 60)\n\n    overtaking_time = (18, 10)  # Initial time at 6:10 PM\n\n    # Calculate the actual time when Simon overtakes his wife\n    overtaking_hour = overtaking_time[0] + overtaking_time_hours\n    overtaking_minute = overtaking_time[1] + overtaking_time_minutes\n\n    if overtaking_minute >= 60:\n        overtaking_minute -= 60\n        overtaking_hour += 1\n\n    # Return the overtaking time in hh:mm format\n    ans = f\"{overtaking_hour:02d}:{overtaking_minute:02d}\"\n    return ans\n\nans = solution()"
    ],
    "3e45de8cb94745a28ca3cae049c63279": [
        "def solution():\n    # Number of choices for one drink (coffee, milk)\n    drinks = 2\n    # Number of choices for food items (hamburger, burritos, bagels)\n    food_items = 3\n    # Apply the Principle of Multiplication (choices for drink multiplied by choices for food items)\n    return drinks * food_items\n\nans = solution()"
    ],
    "40bc621de9c14774a192faa5c08aa4c1": [
        "def solution():\n    pancakes_per_min = 2 / 3\n    total_minutes = 12\n    total_pancakes = pancakes_per_min * total_minutes\n    return int(total_pancakes)\n\nans = solution()"
    ],
    "fbd1909b07244f4b8fef27cb83be59f2": [
        "def solution():\n    # Initialize variables\n    lockers = [False] * 101  # False means unlocked, True means locked, using 101 to match locker numbers 1-100\n    \n    # Process for the teacher calling out '3'\n    for i in range(3, 101, 3):\n        lockers[i] = not lockers[i]\n    \n    # Process for the teacher calling out '5'\n    for i in range(5, 101, 5):\n        lockers[i] = not lockers[i]\n    \n    # Count how many lockers are unlocked at the end\n    count_unlocked = lockers.count(False) - 1 # Subtract 1 because locker[0] is unused\n    \n    return count_unlocked\n\nans = solution()"
    ],
    "e861bb32b7d547039e6ce80de36833a5": [
        "def solution():\n    sale_price = 48\n    reduction_fraction = 1/5\n    original_price = sale_price / (1 - reduction_fraction)\n    return original_price\n\nans = solution()"
    ],
    "14775f177c0c4183a67b4ef46483248b": [
        "def solution():\n    # The strategy to minimize time is to ensure that the slowest people spend the least time rowing.\n    # The two fastest (both 5 minutes) go first, one returns: 5 + 5 = 10 minutes elapsed\n    # The two slowest people go across: 10 + 9 = 19 minutes elapsed\n    # One of the fastest people returns: 19 + 5 = 24 minutes elapsed\n    # The two fastest people finally cross together: 24 + 5 = 29 minutes elapsed\n    \n    # The reason for sending one of the fastest back is because they minimize the 'return' wasted time.\n    \n    return 29\n\nans = solution()"
    ],
    "42d848249dd041fd9a59aba42cf09b4e": [
        "def solution():\n    total_road = 500  # Total metres of road to be paved\n    total_days = 5  # Days taken to pave the total road\n    road_per_day = total_road / total_days  # Metres of road paved in one day\n    return road_per_day\n\nans = solution()"
    ],
    "6ed4b3f4d3984ba0b27b5278f3c00efa": [
        "def solution():\n    # Break the problem into two parts: climbing to the 5th step and then to the 10th step.\n\n    # Define a function to calculate the number of ways to climb to a certain step.\n    def ways_to_step(n):\n        # Base cases\n        if n == 0:\n            return 1\n        if n == 1:\n            return 1\n        \n        # Initialize an array to store the number of ways to get to each step.\n        ways = [0] * (n + 1)\n        ways[0] = 1\n        ways[1] = 1\n\n        # Calculate the number of ways to get to higher steps.\n        for i in range(2, n + 1):\n            ways[i] = ways[i - 1] + ways[i - 2]\n        \n        return ways[n]\n\n    # Number of ways to climb to the 5th step.\n    ways_to_fifth_step = ways_to_step(5)\n    \n    # Number of ways to climb from the 5th to the 10th step (which is the same as climbing to the 5th step again).\n    ways_from_fifth_to_tenth_step = ways_to_step(5)\n\n    # The total number of ways to climb the steps is the product of the two scenarios.\n    return ways_to_fifth_step * ways_from_fifth_to_tenth_step\n\nans = solution()"
    ],
    "04f3463bdfd44e64844f13c3d9c4e55e": [
        "def solution():\n    countries = 18\n    min_people_same_country = 9\n    # Pigeonhole principle: if you have to place n pigeons into m pigeonholes and n > m, at least one pigeonhole must contain more than one pigeon.\n    # To ensure that we have one pigeonhole (country) with at least 9 pigeons (participants), we have to go one participant above 8 per country for all countries\n    participants = (min_people_same_country - 1) * countries + 1\n    \n    return participants\n\nans = solution()"
    ],
    "374b823fc9994ac6839b73f73220b2fc": [
        "def solution():\n    # 53 consecutive numbers have a sum of 2014\n    # The mean of these numbers is 2014 / 53\n    mean = 2014 / 53\n    \n    # The largest number is 26 numbers above the mean\n    # because there are 26 numbers before and after the mean in a sequence of 53 numbers\n    largest_number = mean + 26 - 1  # -1 because we start counting at 0\n    \n    return int(largest_number)\n\nans = solution()"
    ],
    "17c7cc140d594f18884947838501f76d": [
        "def solution():\n    cost_for_four = 32\n    cost_per_calculator = cost_for_four / 4\n    cost_for_twelve = cost_per_calculator * 12\n    return cost_for_twelve\n\nans = solution()"
    ],
    "d4be2c4b031f4b75b58c52a082b67c92": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable A\n    A = symbols('A')\n\n    # Equation representing the mistake: 88 / A = 22\n    equation_mistake = Eq(88 / A, 22)\n\n    # Solve the equation for A\n    A_value = solve(equation_mistake, A)[0]\n\n    # Calculate the correct answer using the original number 98 and the found A_value\n    correct_answer = 98 / A_value\n    \n    return A_value, correct_answer\n\nans = solution()"
    ],
    "6e28fbe858694127965a423b5827545f": [
        "def solution():\n    rounded_amount = 1670\n    lower_bound = rounded_amount - 5\n    return lower_bound\n\nans = solution()"
    ],
    "08f295cae61b452781fe8880031bedb9": [
        "def solution():\n    return 956 * 78\n\nans = solution()"
    ],
    "42304a89be8248ce998d0790579451c5": [
        "def solution():\n    return 345 * 6\n\nans = solution()"
    ],
    "97e34217530f47f198915d7380bfbd2d": [
        "def solution():\n    return 5217 % 13\n\nans = solution()"
    ],
    "62bcd683923a4c13a327d9e35f3b2302": [
        "def solution():\n    hours = 2 + 1/2\n    minutes_per_hour = 60\n    total_minutes = hours * minutes_per_hour\n    return int(total_minutes)\n\nans = solution()"
    ],
    "a50d4aad678545d8ad403f9ee6aef9cb": [
        "def solution():\n    lucas_time_per_lap = 6 / 5  # Lucas's time to complete one lap\n    miller_time_per_lap = 10 / 5  # Miller's time to complete one lap\n\n    # Find the Least Common Multiple (LCM) of Lucas's and Miller's lap times\n    # It is the time taken for Lucas to overtake Miller for the first time.\n    lcm = (lucas_time_per_lap * miller_time_per_lap) / \\\n          (math.gcd(int(lucas_time_per_lap * 60), int(miller_time_per_lap * 60)) / 60)\n\n    # Since Lucas will overtake Miller each time they complete this LCM time interval,\n    # the time between the first and second overtaking will be the same as the LCM.\n    ans = lcm\n    return ans\n\nimport math\nans = solution()"
    ],
    "b8e19c913d8d4ff69e6cd9698f1eb368": [
        "def solution():\n    initial_charge = 80  # in cents\n    additional_charge = 5  # in cents per minute after 15 minutes\n    total_cost = 140  # total cost in cents\n    \n    if total_cost == initial_charge:\n        # cost is equal to initial charge, hence call lasted for 15 minutes\n        minutes = 15\n    else:\n        # calculate additional minutes\n        additional_minutes = (total_cost - initial_charge) / additional_charge\n        minutes = 15 + additional_minutes\n\n    return minutes\n\nans = solution()"
    ],
    "87766ec0f15a4f82a63df69a587cfef4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    visitors = symbols('visitors')\n    \n    # The fraction representing children\n    children_fraction = 3/5\n    # The fraction representing men, which is 1/4 of the remaining visitors (1 - 3/5)\n    men_fraction = 1/4 * (1 - children_fraction)\n    \n    # Equation representing the relationship between children and men\n    equation = Eq(children_fraction * visitors, men_fraction * visitors + 120)\n    \n    # Solve for the total number of visitors\n    total_visitors = solve(equation, visitors)[0]\n    \n    # Return the total number of visitors\n    return total_visitors\n\nans = solution()"
    ],
    "c1962524dabf4b3da31b4f37827a030a": [
        "def solution():\n    ans = len([i for i in range(1, 100) if i % 10 == 0])\n    return ans\n\nans = solution()"
    ],
    "41b46512b7bf48eebc8468c2eb001314": [
        "def solution():\n    orange_string_length_m = 5.52  # in meters\n    orange_to_purple_ratio = 9.2\n\n    # Since the orange string is 9.2 times as long as the purple string,\n    # we can find the length of the purple string.\n    purple_string_length_m = orange_string_length_m / orange_to_purple_ratio\n\n    green_string_extra_length_cm = 24.9  # in centimeters\n\n    # Convert the extra length of the green string to meters.\n    green_string_extra_length_m = green_string_extra_length_cm / 100\n\n    # The length of the green string is the length of the purple string\n    # plus the extra length.\n    green_string_length_m = purple_string_length_m + green_string_extra_length_m\n\n    return green_string_length_m\n\nans = solution()"
    ],
    "c513a3033f3749eebdae943a22fb537a": [
        "def solution():\n    # As per the question, we are to solve a number puzzle typically found in overseas competitions\n    # Without a specific puzzle, we cannot provide a solution, so we will return None\n    return None\n\nans = solution()"
    ],
    "cd9aa54c79074ee2aa4aad035a1be624": [
        "def solution():\n    # Tim's current age\n    Tim_age_now = 8\n    # Tim's mother will be 54 years old when Tim reaches her current age\n    mother_age_when_Tim_is_her_current_age = 54\n\n    # Let's denote Tim's mother current age as M\n    # We can compose an equation based on the problem statement\n    # Tim will be as old as his mother is now in (M - Tim_age_now) years\n    # At that point, Tim's mother will be M + (M - Tim_age_now) years old,\n    # according to the problem statement, which equals 54 years:\n\n    # M + (M - 8) = 54\n    # 2M - 8 = 54\n    # 2M = 54 + 8\n    # 2M = 62\n    # M = 31\n\n    # Therefore, Tim's mother is currently 31 years old.\n    return 31\n\nans = solution()"
    ],
    "184683893a1a450fb55ccb18cf570233": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')  # x is the length of the shorter piece, y is the length of the longer piece\n    equation1 = Eq(x + y, 49.5)  # The total length of the rope\n    equation2 = Eq(y, 5 * x)  # One piece is 5 times as long as the other\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return round(solutions[y], 1)\n\nans = solution()"
    ],
    "f88e8811450e4f85937e81e850e2d300": [
        "def solution():\n    # George's parents gave him money over 3 days (Monday, Tuesday, Wednesday)\n    days = 3\n\n    # George's Mum gave him 60p each day\n    mum_daily_contribution = 60\n\n    # George's Dad gave him 40p each day\n    dad_daily_contribution = 40\n\n    # Total daily contribution from both parents\n    total_daily_contribution = mum_daily_contribution + dad_daily_contribution\n\n    # Total contribution over the three days\n    total_contribution = total_daily_contribution * days\n\n    return total_contribution\n\nans = solution()"
    ],
    "aefe4b1d258c455f852061413286ec4b": [
        "def solution():\n    total_ratio = 4 + 5\n    total_litres = 36\n    apple_juice_ratio = 4\n\n    apple_juice_litres = (apple_juice_ratio / total_ratio) * total_litres\n\n    return apple_juice_litres\n\nans = solution()"
    ],
    "4b76c5a5fefd4d379198d89518cf1797": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let k represent the number of days Kevin takes off\n    k = symbols('k')\n\n    # Work done by Ivy in 18 days\n    ivy_work_per_day = 1/24\n    ivy_work = 18 * ivy_work_per_day\n\n    # Work done by Kevin when he is working\n    kevin_work_per_day = 1/20\n    kevin_work_days = 18 - k\n    kevin_work = kevin_work_days * kevin_work_per_day\n\n    # Equation representing the total work done (should be equal to 1 job)\n    equation = Eq(ivy_work + kevin_work, 1)\n\n    # Solve for the number of days Kevin takes off\n    solution = solve(equation, k)\n\n    return solution[0]\n\nans = solution()"
    ],
    "4dedeb8bed9343319dda8177873725fd": [
        "def solution():\n    total_left = 400\n    year_7_left_percentage = 10\n    year_7_normal_percentage = 20\n\n    year_7_left = (year_7_left_percentage / 100) * total_left\n    total_normal = total_left / (1 - (year_7_normal_percentage / 100 - year_7_left_percentage / 100))\n    \n    return int(total_normal)\n\nans = solution()"
    ],
    "e4d3c043d1fb45078d416e3b70973037": [
        "def solution():\n    well_height = 25\n    climb_distance = 4\n    slide_distance = 1\n    total_climbed = 0\n    day = 0\n    \n    while total_climbed < well_height:\n        day += 1\n        total_climbed += climb_distance\n        if total_climbed >= well_height:\n            break\n        total_climbed -= slide_distance\n    \n    return day\n\nans = solution()"
    ],
    "4a9d0a7ecc6a4d7b8a4bf5f49ac3f034": [
        "def solution():\n    # Nancy can complete the book in 6 days, which means her work rate is 1/6 of the book per day\n    nancy_rate = 1 / 6\n    # Together they can complete the book in 4 days, which means their combined work rate is 1/4 of the book per day\n    combined_rate = 1 / 4\n    \n    # Tim's work rate is the combined rate minus Nancy's rate\n    tim_rate = combined_rate - nancy_rate\n    \n    # Time for Tim to complete the book by himself is the reciprocal of his work rate\n    tim_days = 1 / tim_rate\n    \n    return tim_days\n\nans = solution()"
    ],
    "04cf5bf4ba704663af7e01b1fc0bebfa": [
        "def solution():\n    pocket_money = 100\n    days = 15\n    for day in range(1, days + 1):\n        if day % 2 == 0:\n            pocket_money -= 8\n        else:\n            pocket_money += 5\n    return pocket_money\n\nans = solution()"
    ],
    "0a38ebf245ee4048babeb982de7ed428": [
        "def solution():\n    number_as_string = '3' * 12  # Create the 12-digit number as a string\n    number = int(number_as_string)  # Convert the string to an integer\n    remainder = number % 7  # Find the remainder when divided by 7\n    return remainder\n\nans = solution()"
    ],
    "a9c71626af834229920858670d8deb58": [
        "def solution():\n    return 32.4 * 20\n\nans = solution()"
    ],
    "6ea9279809514a5d9fa706e9c64edc86": [
        "def solution():\n    total_distance = 31\n    jump_up = 3\n    slide_down = 2\n    effective_jump = jump_up * 3 - slide_down * 2\n    jumps_in_cycle = 3\n\n    cycles_needed = (total_distance - jump_up) // effective_jump\n    distance_covered = cycles_needed * effective_jump\n    remaining_distance = total_distance - distance_covered\n    total_jumps = cycles_needed * jumps_in_cycle\n\n    while remaining_distance > 0:\n        remaining_distance -= jump_up\n        total_jumps += 1\n        if remaining_distance <= 0:\n            break\n        remaining_distance += slide_down\n\n    return total_jumps\n\nans = solution()"
    ],
    "c4e5b60db727448e994c386475bbe6ac": [
        "def solution():\n    def term(n):\n        if n == 1:\n            return 1 / (1 * 2)\n        else:\n            numerator = n\n            denominator = ((n - 1)**2 + 1) * (n**2 + 1)\n            return numerator / denominator\n\n    ans = sum(term(n) for n in range(1, 7))\n    ans += 1 / 22  # Adding the last term separately\n    return ans\n\nans = solution()"
    ],
    "8b3d2426e47742fb80de5edfc5c95b39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    initial_money = symbols('initial_money')\n\n    # After spending one-third on a dress\n    remaining_after_dress = initial_money - (initial_money / 3)\n    \n    # Then spends three-fifths of what is left on shoes\n    remaining_after_shoes = remaining_after_dress - (3/5) * remaining_after_dress\n    \n    # She has £40 left\n    equation = Eq(remaining_after_shoes, 40)\n\n    # Solve for the initial amount of money\n    solved_money = solve(equation, initial_money)\n\n    return solved_money[0]\n\nans = solution()"
    ],
    "bb8f428d14394c4988e5515d435ac635": [
        "def solution():\n    return 198 + 298 + 398 + 498\n\nans = solution()"
    ],
    "c837716e3d8d4f158df0c801a3ba58fc": [
        "def solution():\n    from math import factorial\n\n    def find_factors(n, divisor):\n        count = 0\n        while n > 0:\n            n //= divisor\n            count += n\n        return count\n\n    num_zeros_999 = find_factors(999, 5)\n    num_zeros_300 = find_factors(300, 5)\n    \n    ans = num_zeros_999 - num_zeros_300\n    return ans\n\nans = solution()"
    ],
    "608b695eba534dd0b83d2b27d7e435ab": [
        "def solution():\n    a = 10\n    b = 9\n    ans = 4 * a + 0.6 * b\n    return ans\n\nans = solution()"
    ],
    "b3775d03019b4cdcb4930d45861d8841": [
        "def solution():\n    for lorries in range(1, 100):\n        bikes = lorries + lorries // 4\n        cars = bikes + bikes // 3\n        total_vehicles = cars + bikes + lorries\n        if total_vehicles % 2 == 0 and total_vehicles < 100:\n            return (cars, bikes, lorries)\n\nans = solution()"
    ],
    "564dba708ca745b9b0b4d8a734001762": [
        "def solution():\n    first_term = 2\n    last_term = 42\n    difference = 4\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "05662ab12b7a42d08cb4ed68f2868599": [
        "def solution():\n    # Number of students on the outermost layer is 60, which is the perimeter of the square minus 4 \n    # (since each corner is counted twice when adding the sides).\n    # The perimeter P of a square with side length s is P = 4s.\n    # Therefore, s = (P + 4) / 4, where P = 60 (the number of students).\n    # Since there are 4 corners, we add 4 to 60 to account for them.\n    perimeter_with_corners = 60 + 4\n    side_length = perimeter_with_corners // 4\n    \n    # The total number of students is equal to the area of the square formed by them (side_length^2).\n    total_students = side_length ** 2\n    \n    return total_students\n\nans = solution()"
    ],
    "b7dd6767772245f2a0cb23c299ebb8cc": [
        "def solution():\n    result = 18 * 20132013 - 2013 * 180018\n    return result\n\nans = solution()"
    ],
    "f5cbd8c2b99c4ff8b9a9ff2d867ac03e": [
        "def solution():\n    return 764 * 7\n\nans = solution()"
    ],
    "2c22df9d95b44b4db50520cf03c17839": [
        "def solution():\n    total_tiles = 400\n    layer = 1\n    red_tiles = 0\n    green_tiles = 0\n\n    while total_tiles > 0:\n        tiles_in_current_layer = (layer * 2 - 1) ** 2\n        if layer % 2 != 0:\n            red_tiles += tiles_in_current_layer\n        else:\n            green_tiles += tiles_in_current_layer\n\n        total_tiles -= tiles_in_current_layer\n        layer += 1\n\n    color_used_more = 'red' if red_tiles > green_tiles else 'green'\n    difference = abs(red_tiles - green_tiles)\n\n    return (color_used_more, difference)\n\nans = solution()"
    ],
    "5a93f9e1eb9e4c528f6c8a07e299ea6a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original number of buttons in box B.\n    # Then the original number of buttons in box A is x + 64.\n    \n    # Let y be the number of buttons added to box A.\n    # Ken removes 2 buttons from box B for every 1 button added to A\n    # So the number of buttons removed from box B is 2 * y and the number of buttons left in box B is x - 2 * y.\n    # The number of buttons in box B is reduced by 28, so x - 2 * y = x - 28.\n    \n    # After he changes the boxes, the ratio of the total number of buttons in both boxes\n    # to the number of buttons left in box B is 4:1.\n    # Therefore, the total number of buttons is 4 * (x - 2 * y) = (x + 64 + y) + (x - 2 * y).\n    \n    x, y = symbols('x y')\n    eq1 = Eq(x - 2 * y, x - 28)  # The number of buttons in box B decreased by 28\n    eq2 = Eq(4 * (x - 2 * y), (x + 64 + y) + (x - 2 * y))  # The ratio of total buttons to the buttons in B is 4:1\n\n    solutions = solve((eq1, eq2), (x, y))\n\n    # Find the original number of buttons in box A, which is x + 64\n    buttons_in_A_at_first = solutions[x] + 64\n\n    return buttons_in_A_at_first\n\nans = solution()"
    ],
    "4cf1f3c8353c42d48e99e5d8f388a57b": [
        "def solution():\n    boulevard_length = 300\n    interval = 10\n\n    num_bins = (boulevard_length // interval) + 1\n\n    return num_bins\n\nans = solution()"
    ],
    "9dfbbfcf5edf458aa1a6122065492810": [
        "def solution():\n    n = 0\n    while True:\n        # Construct the number\n        number_str = \"26\" + \"2011\" * n + \"7\"\n        number = int(number_str)\n        # Check divisibility by 33\n        if number % 33 == 0:\n            return n\n        n += 1\n\nans = solution()"
    ],
    "9f759ca5b84e4722b43ef86e4d6a402e": [
        "def solution():\n    flour_per_cake = 326\n    num_cakes = 112\n    \n    total_flour = flour_per_cake * num_cakes\n    \n    return total_flour\n\nans = solution()"
    ],
    "5d7205c22e4740dd84e7bc08f1cd9a65": [
        "def solution():\n    total_cards = 24\n    rounds = 12\n\n    # Let x be the number of rounds won, then (rounds - x) will be the rounds lost\n    # She gains 4 cards for each win and loses 2 for each loss\n    # 4 * x - 2 * (rounds - x) = total_cards\n    # Simplify the equation to find x\n    # 4 * x - 2 * rounds + 2 * x = total_cards\n    # 6 * x = total_cards + 2 * rounds\n    # x = (total_cards + 2 * rounds) / 6\n    \n    x = (total_cards + 2 * rounds) / 6\n    \n    # The number of lost rounds will be total rounds - won rounds\n    lost_rounds = rounds - x\n\n    return int(lost_rounds)\n\nans = solution()"
    ],
    "f22dbe753e484186ac547d34fa2ff25b": [
        "def solution():\n    ans = 2.7 * 3.9\n    return ans\n\nans = solution()"
    ],
    "3795aecee78f4af494bcf5420bcf0bb2": [
        "def solution():\n    # If Bob takes 3 minutes to cut a log into 4 pieces, he makes 3 cuts.\n    # The number of cuts needed to make a certain number of pieces is always 1 less than the number of pieces.\n    # Therefore, to make 8 pieces, Bob will need to make 7 cuts.\n    # The time Bob takes to make one cut can be calculated by dividing the time it takes to make 3 cuts by 3.\n    time_per_cut = 3 / 3\n    # The total time needed to make 7 cuts can be calculated by multiplying the time_per_cut by the number of cuts needed to make 8 pieces.\n    total_time = time_per_cut * 7\n    return total_time\n\nans = solution()"
    ],
    "292d7aaf42294c3a913c5cd11bf66c14": [
        "def solution():\n    x, y, z = 20, 19, 18  # initial coins for players X, Y and Z respectively\n    rounds = 0\n\n    # run the game until one player runs out of coins\n    while all(coin > 0 for coin in [x, y, z]):\n        if x >= y and x >= z:\n            x -= 3\n            y += 1\n            z += 1\n        elif y > x and y >= z:\n            y -= 3\n            x += 1\n            z += 1\n        else:\n            z -= 3\n            x += 1\n            y += 1\n\n        rounds += 1  # increment the round count\n\n    return rounds\n\nans = solution()"
    ],
    "94aea93a419044dfa74eed60bd70bafa": [
        "def solution():\n    initial_cards = 236\n    duplicates = 57\n    new_cards = 34\n\n    collection_now = initial_cards - duplicates + new_cards\n\n    return collection_now\n\nans = solution()"
    ],
    "b13b087d91c3418cab75e734f729a72f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the amounts Rasidah and Chai Seng have initially\n    rasidah, chai_seng = symbols('rasidah chai_seng')\n\n    # The first equation: Rasidah had $48 less than Chai Seng\n    equation1 = Eq(rasidah, chai_seng - 48)\n\n    # The second equation: Rasidah spent 3/5 of her money\n    equation2 = Eq(rasidah * (2/5), rasidah - rasidah * (3/5))\n\n    # The third equation: Chai Seng spent 6/7 of his money\n    equation3 = Eq(chai_seng * (1/7), chai_seng - chai_seng * (6/7))\n\n    # The fourth equation: Chai Seng has 1/2 as much money left as Rasidah\n    equation4 = Eq(chai_seng * (1/7), (rasidah * (2/5)) / 2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (rasidah, chai_seng))\n\n    # Rasidah's amount at first\n    return solutions[rasidah]\n\nans = solution()"
    ],
    "9151e126e4304a27988564dbee6d682a": [
        "def solution():\n    from math import factorial\n\n    # Treat Amy and Judy as one person\n    people_minus_pairs = 7 \n\n    # There are 7! ways to arrange the 7 \"people\" (6 people + 1 pair)\n    arrangements = factorial(people_minus_pairs)\n\n    # Amy and Judy can switch places with each other, which gives 2! arrangements\n    pair_arrangements = factorial(2)\n\n    # Since the table is circular, we divide by the number of seats to account for rotations\n    ans = (arrangements * pair_arrangements) // 8\n\n    return ans\n\nans = solution()"
    ],
    "4f4e10b41d3540d6a2739c9860f76327": [
        "def solution():\n    ans = sum(1/i for i in range(1, 8))\n    return int(ans)\n\nans = solution()"
    ],
    "241c2dd43db940409e5ad15ed39d57aa": [
        "def solution():\n    # Since the lollipops are identical and the plates are identical,\n    # we are essentially finding the number of integer solutions for:\n    # x1 + x2 + x3 = 7, where x1, x2, and x3 are non-negative integers\n\n    # The problem can be simplified to the problem of partitioning a number\n    # using stars and bars method (where 'bars' separate the 'stars', representing lollipops)\n    \n    lollipops = 7\n    plates = 3  # We use 2 bars to create 3 sections on a plate for the lollipops\n    \n    # The formula for the number of non-negative integer solutions is:\n    # (n + k - 1) choose (k - 1) where n is number of stars and k is number of bars\n    \n    ans = math.comb(lollipops + plates - 1, plates - 1)\n    return ans\n\nimport math\nans = solution()"
    ],
    "237973530d60417cbab4c373e76cf50a": [
        "def solution():\n    from math import gcd\n    pencils = 56\n    pens = 60\n    max_students = gcd(pencils, pens)\n    return max_students\n\nans = solution()"
    ],
    "c59949dfd8964b7c95155bd81b7b9c07": [
        "def solution():\n    principal = 35000\n    final_amount = 37100\n    interest_rate = 0.015\n\n    # Calculate number of years using compound interest formula\n    # Amount = Principal * (1 + rate)^years\n    # years = log(Amount/Principal) / log(1 + rate)\n    years = ((final_amount / principal) ** (1/interest_rate)) - 1\n\n    return round(years)\n\nans = solution()"
    ],
    "057332102b164fd582fffc07825bb51c": [
        "def solution():\n    ans = 0.7 + 0.04 + 1.006\n    return ans\n\nans = solution()"
    ],
    "2a6e8406868b4590b821325ac25f87f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of cookies Andy and Ben have\n    andy_initial, ben_initial = symbols('andy_initial ben_initial')\n\n    # Andy has 84 fewer cookies than Ben at first\n    equation1 = Eq(andy_initial, ben_initial - 84)\n    \n    # After buying more cookies\n    # Andy has andy_initial + 1/3 * andy_initial cookies\n    # Ben has ben_initial + 1/5 * ben_initial cookies\n    # Andy has 1/3 as many cookies as Ben in the end\n    equation2 = Eq(andy_initial + (andy_initial / 3), (ben_initial + (ben_initial / 5)) / 3)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (andy_initial, ben_initial))\n\n    # Calculate how many cookies Andy has in the end\n    andy_end = solutions[andy_initial] + (solutions[andy_initial] / 3)\n\n    return andy_end\n\nans = solution()"
    ],
    "e3bab1d410dc404dbc75f29bc60577f7": [
        "def solution():\n    original_numerator = 6\n    original_denominator = 20\n    new_numerator = 12\n    \n    # The fractions 6/20 and 12/x are equivalent,\n    # so their cross products are equal: 6*x = 20*12.\n    new_denominator = (original_denominator * new_numerator) / original_numerator\n\n    return int(new_denominator)\n\nans = solution()"
    ],
    "f037a02a789f4f3a9d9393741e8484d5": [
        "def solution():\n    # Let the four distinct positive whole numbers be a, b, c, d where a > b > c > d\n    # According to the problem statement:\n    # d + (a + b + c)/3 = 39 => 3d + a + b + c = 117 ... (1)\n    # a + (b + c + d)/3 = 51 => a + b + c + 3d = 153 ... (2)\n    \n    # Subtract equation (1) from equation (2) to eliminate b and c:\n    # (a + b + c + 3d) - (3d + a + b + c) = 153 - 117\n    # a - 3d = 36 ... (3)\n    \n    # We want to find the largest possible value of a (the largest number),\n    # Since a - 3d must be 36 and d is positive, the largest possible value of a\n    # will be when d is as small as possible, which is 1 (as we're dealing with positive whole numbers)\n    d_min = 1\n    a_max = 3 * d_min + 36  # From equation (3)\n    \n    return a_max\n\nans = solution()"
    ],
    "2c1f33a3652843e18c61ed4042aa9d84": [
        "def solution():\n    total_passed_at_least_one = 43\n    total_math = 30\n    total_science = 28\n    total_english = 25\n    \n    max_all_three = min(\n        total_passed_at_least_one - (total_math + total_science + total_english - total_passed_at_least_one),\n        total_math, total_science, total_english\n    )\n    \n    return max_all_three\n\nans = solution()"
    ],
    "f4a501507e754c76bc20c97fd6f8faa9": [
        "def solution():\n    # Recognize the pattern in the sequence:\n    # the sequence alternates between adding 1 to the previous positive term and\n    # subtracting 1 from the previous negative term\n    # Starting from the first positive term 18\n\n    # Calculate the position of n in the sequence\n    # Since the sequence starts at 18 (1st term) and the next is -16 (2nd term),\n    # we find that positive numbers are at odd positions and negative at even.\n    # We see that the sequence goes 18, -16, 19, -15... (odd position: +1, even position: -1)\n    # so to find the nth term, we can check if it is in an odd or even position\n    # and act accordingly\n\n    # First, we calculate the index of n in the sequence.\n    # The 1st positive term is 18, the second positive term is 19, and so on.\n    # There are as many negative terms as positive terms before n, so we double the number of positive terms to get the index of n.\n    # The positive terms form an arithmetic sequence with first term a = 18 and common difference d = 1.\n    # Let's find the number of terms in this subsequence up to term n if n is positive. If a_n = n,\n    # we have a_n = a + (k-1)*d. Solving for k gives us k = (a_n - a)/d + 1.\n    # Index of n in the original sequence is twice k minus 1 to account for the negative terms.\n\n    # Last positive number is 20, index of last positive number = (20 - 18) / 1 + 1 = 2 + 1 = 3\n    # Index of 20 in the original sequence is 2*3 - 1 = 5 (5th term)\n    # The pattern repeats with +1 to positive, -1 to negative\n    # Thus, n is the 6th term because the pattern repeats every 2 terms\n    # The 6th term is one less than the 5th because it's negative, so n = 20 - 1\n\n    n = 20 - 1\n    return n\n\nans = solution()"
    ],
    "73d5e9762ad24f7fa6f2d7569f186b42": [
        "def solution():\n    # Since Tom raised his hand on both occasions, Tom's number is not divisible by the mystery number or 24\n    \n    # Numbers that are divisible by 24 in two-digits range: [24, 48, 72, 96]\n    # But Tom's number can't be divisible by 24, so we disregard these numbers\n    # However, since 4 students raised their hands for the mystery number,\n    # and Tom raised his hand as well, we know that there must be at least 5 hats\n    # with numbers that are NOT divisible by the mystery number, suggesting that\n    # the mystery number could be one of those in [24, 48, 72, 96], as it would result in\n    # 4 or fewer numbers being divisible by it.\n    \n    # The 6 students that raised their hands for the second question indicate that there\n    # are only 3 hats with numbers that are divisible by 24.\n    # Hence, there must be 6 hats with numbers not divisible by 24\n    \n    # Tom must have one of the following numbers:\n    # - not divisible by 24\n    # - increasing the count of numbers that are not divisible by either the mystery number or 24 to 5\n    \n    # The remaining 8 numbers that Tom saw as hats must be:\n    # - different from Tom's number\n    # - they include exactly 3 numbers divisible by 24 and 5 that are not\n    \n    # We can simply generate all two-digit numbers and filter them based on the above criteria\n    # We must remember that Tom's hat is not known, but he does not see his own, so it doesn't\n    # matter. We will sum all two-digit numbers that are not divisible by 24 and subtract\n    # the sums of numbers that are [24, 48, 72, 96] times 3.\n    \n    # Generate all two-digit numbers\n    all_two_digit_numbers = set(range(10, 100))\n    \n    # Numbers divisible by 24\n    divisible_by_24 = {24, 48, 72, 96}\n    \n    # All two-digit numbers not divisible by 24\n    not_divisible_by_24 = all_two_digit_numbers - divisible_by_24\n    \n    # Sum of all two-digit numbers not divisible by 24\n    sum_all_not_divisible_by_24 = sum(not_divisible_by_24)\n    \n    # We pick 3 numbers from the divisible_by_24 set and calculate their sum\n    sum_divisible_by_24 = sum(divisible_by_24) - max(divisible_by_24)\n    \n    # The sum of the 8 numbers Tom saw\n    sum_of_8_numbers_tom_saw = sum_all_not_divisible_by_24 - sum_divisible_by_24\n    \n    return sum_of_8_numbers_tom_saw\n\nans = solution()"
    ],
    "d19c1cad2e934abcb96adf33ea0fad9b": [
        "def solution():\n    # Let the distance between the school and their home be x meters.\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')  # distance from school to home\n\n    # Ahmad's travel distance until he meets his brother is: x (to school) + x - 210 (back to meeting point)\n    # Ahmad's brother's travel distance until he meets Ahmad: x - 210 meters\n\n    # Time taken by Ahmad to meet his brother is equal to the time taken by his brother to meet him.\n    # Ahmad's speed = 80 m/min, brother's speed = 50 m/min\n\n    # Time taken by Ahmad = total distance covered by Ahmad / his speed\n    time_ahmad = (x + (x - 210)) / 80\n\n    # Time taken by brother = distance covered by brother / his speed\n    time_brother = (x - 210) / 50\n\n    # Setting up the equation time_ahmad = time_brother\n    equation = Eq(time_ahmad, time_brother)\n\n    # Solving the equation for x\n    distance = solve(equation, x)[0]\n\n    return distance\n\nans = solution()"
    ],
    "303367dad74a4dfb9a731577b950143b": [
        "def solution():\n    # Since the pens are identical, we are looking for the number of positive integer solutions to the equation\n    # x1 + x2 + x3 = 6, where x1, x2, and x3 represent the number of pens in each pencil case.\n    # However, since no pencil case can be empty, we can subtract 1 from each x to account for the minimum one pen in each case:\n    # (x1-1) + (x2-1) + (x3-1) = 6 - 3 -> x1' + x2' + x3' = 3\n    # where x1', x2', and x3' are the new variables representing the number of additional pens above the minimum one in each case.\n    # Now, we are looking for the number of non-negative integer solutions which is a partitioning problem that can be solved as combinations.\n    \n    from math import comb\n\n    # We have 3 partitions and 3 pens to distribute, which calls for (n+k-1) choose (k-1) combinations:\n    n = 3  # 3 pens to distribute\n    k = 3  # 3 partitions (pencil cases)\n\n    # Calculate the number of ways:\n    ways = comb(n+k-1, k-1)\n\n    return ways\n\nans = solution()"
    ],
    "70234dd3b3ad4df4976b94f3fc2b43b6": [
        "def solution():\n    from fractions import Fraction\n    \n    num1 = Fraction(1, 30) + Fraction(1, 6)\n    den1 = Fraction(2, 25)\n    \n    num2 = Fraction(2) - Fraction(2, 3)\n    den2 = Fraction(8, 3)\n    \n    result = num1 / den1 + num2 / den2\n    \n    return float(result)\n\nans = solution()"
    ],
    "f5859830704a437f8da45cb32fad686c": [
        "def solution():\n    number = 8844\n    # Extracting the first 8's place value (thousands)\n    thousands_place = (number // 1000) * 1000\n    # Extracting the second 8's place value (tens)\n    tens_place = (number // 10 % 10) * 10\n    # Calculating the difference\n    difference = thousands_place - tens_place\n    return difference\n\nans = solution()"
    ],
    "a1813c83d15f4f918bb921475c77ae6b": [
        "def solution():\n    # Find the largest 5-digit palindromic number\n    for i in range(99999, 9999, -1):\n        if str(i) == str(i)[::-1] and i % 45 == 0:\n            largest_palindrome = i\n            break\n    \n    # Find the smallest 5-digit palindromic number\n    for j in range(10000, 99999):\n        if str(j) == str(j)[::-1] and j % 45 == 0:\n            smallest_palindrome = j\n            break\n            \n    # Calculate the difference\n    ans = largest_palindrome - smallest_palindrome\n    \n    return ans\n\nans = solution()"
    ],
    "a8da05a870cb4d889d878067168a25f3": [
        "def solution():\n    # For a number to be divisible by both 4 and 5, it has to\n    # end in a 0 or 5 to be divisible by 5, and its last two digits\n    # have to be divisible by 4. Since 0 is not a four-digit number,\n    # A must be 5. We just need to check the divisibility by 4 of 2A (last two digits).\n    \n    # Assume A is 5, check if 5725 is divisible by 4\n    if int(str(572) + '5') % 4 == 0:\n        return 5\n    else:\n        return None  # If it is not divisible by 4, there's no suitable digit for A.\n\nans = solution()"
    ],
    "5f74a8aa962b42f9a008f301d384a07d": [
        "def solution():\n    number = 40309\n    while True:\n        number += 1\n        if str(number) == str(number)[::-1]:\n            break\n    return number - 40309\n\nans = solution()"
    ],
    "00ada5e7f99244a19a9c65f66bf12fe4": [
        "def solution():\n    from math import gcd\n\n    length1 = 16\n    length2 = 24\n\n    longest_length = gcd(length1, length2)\n\n    return longest_length\n\nans = solution()"
    ],
    "27f205a241de4c258f0bfe079d7d85e0": [
        "def solution():\n    luna_position = 7\n    sheep_behind = 4\n\n    total_sheep = luna_position + sheep_behind\n\n    return total_sheep\n\nans = solution()"
    ],
    "8730c5dc402e4057a7e7d6856f461142": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # Step 1: Find the common supplement (The common supplements are how much we need to add to make it divisible by the divisor)\n    supplements = [(5 - 1) % 5, (6 - 2) % 6, (11 - 7) % 11]\n    \n    # Step 2: Find the LCM of all the divisors\n    lcm_of_divisors = 5 * 6 * 11\n    \n    # Step 3: The unknown = the common multiple of all the divisors - the common remainder\n    # We have supplements and divisors, so now we can apply the Chinese Remainder Theorem\n    congruences = [(1, 5), (2, 6), (7, 11)]\n    unknown, _ = solve_congruence(*congruences)\n    \n    return unknown\n\nans = solution()"
    ],
    "c5f435f6f01d47f984563502e879e7c1": [
        "def solution():\n    hourly_wage = 18\n    desired_earnings = 270\n\n    hours_needed = desired_earnings / hourly_wage\n\n    return hours_needed\n\nans = solution()"
    ],
    "6fd3dee61dd1454aba4ca3fdcb068b42": [
        "def solution():\n    ans = (36 + 8 * 4 - 8) / 10\n    return ans\n\nans = solution()"
    ],
    "306362839da448f6af25c3777e0f4fb8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    mean_all_students = symbols('mean_all_students')\n\n    mean_top_3 = 92\n    sum_top_3 = mean_top_3 * 3\n\n    mean_last_7 = mean_all_students - 6\n    sum_last_7 = mean_last_7 * 7\n\n    equation = Eq(sum_top_3 + sum_last_7, mean_all_students * 10)\n\n    solutions = solve(equation, mean_all_students)\n\n    return float(solutions[0])\n\nans = solution()"
    ],
    "15a26c7f348e44f0984ed5433abaeb4a": [
        "from itertools import permutations\n\ndef is_consecutive(digits):\n    sorted_digits = sorted(digits)\n    return all(sorted_digits[i] + 1 == sorted_digits[i+1] for i in range(len(sorted_digits)-1))\n\ndef solution():\n    count = 0\n    for year in range(1000, 2023):\n        digits = [int(d) for d in str(year)]\n        if is_consecutive(digits):\n            count += len(set(permutations(digits)))\n    return count\n\nans = solution()"
    ],
    "692dd4bd8aad469b93929bfd3c53cde1": [
        "from itertools import combinations\n\ndef solution():\n    bags = [19, 21, 27, 32, 37, 40]\n    for red_marbles in bags:\n        remaining_bags = [x for x in bags if x != red_marbles]\n        for jaslin_bags in combinations(remaining_bags, 3):\n            george_bags = [x for x in remaining_bags if x not in jaslin_bags]\n            if sum(jaslin_bags) == 2 * sum(george_bags):\n                return red_marbles\n\nans = solution()"
    ],
    "96bf00410c5d499991e067f6eac1c2fb": [
        "def solution():\n    speed = 550 / 5  # Calculate the speed of the car in km/h\n    distance = speed * 3  # Calculate the distance the car will travel in 3 hours\n    return distance\n\nans = solution()"
    ],
    "31ae45e446194415af930b6a32732592": [
        "def solution():\n    # Let the smallest even number be x\n    # The consecutive even numbers will be x, x+2, x+4, x+6, x+8\n    # Their sum is x + (x+2) + (x+4) + (x+6) + (x+8) = 100\n    # Simplifying the equation: 5x + 20 = 100\n    # Solving for x: 5x = 100 - 20\n    x = (100 - 20) / 5\n    return int(x)\n\nans = solution()"
    ],
    "102565a663954649adc3478cad3c899d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Symbols for Andre and Beth's initial number of sweets\n    Andre, Beth = symbols('Andre Beth')\n    \n    # Equation for the total number of sweets they both had initially\n    equation1 = Eq(Andre + Beth, 24)\n    \n    # Equation for the difference after each received 4 more sweets\n    equation2 = Eq(Andre + 4 - (Beth + 4), 6)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (Andre, Beth))\n    \n    # Getting the number of sweets Beth has now (initial + 4)\n    beth_sweets_now = solutions[Beth] + 4\n    \n    return beth_sweets_now\n\n# Call the function and store the result in `ans`\nans = solution()"
    ],
    "dd7ef81126644ff58215f822282cae06": [
        "from math import lcm\n\ndef solution():\n    return lcm(1, 2, 3, 4, 5)\n\nans = solution()"
    ],
    "932e3588f77946a58e948ab41abb1c9f": [
        "def solution():\n    remaining_fraction = 1 - 2/5\n    remaining_apples = 150\n\n    total_apples = remaining_apples / remaining_fraction\n\n    return int(total_apples)\n\nans = solution()"
    ],
    "123966a82052442699a9217c1798213b": [
        "def solution():\n    distance_per_jump = 3\n    num_of_jumps = 15 - 1  # Since it starts on the first post\n\n    total_distance = distance_per_jump * num_of_jumps\n\n    return total_distance\n\nans = solution()"
    ],
    "7c976da5c8314e559893fed4d2545dcc": [
        "def solution():\n    ans = 342 - (85 - 78) * 15\n    return ans\n\nans = solution()"
    ],
    "30fcda504e8d40b4aeaac401d2df58e4": [
        "def solution():\n    pears = 18\n    strawberries = 30\n    apples = 36\n    chocolates = 18\n    friends = 6\n\n    total_fruits = pears + strawberries + apples\n    fruits_per_friend = total_fruits // friends\n\n    return fruits_per_friend\n\nans = solution()"
    ],
    "e71f218803924703bffc15e15224ba0b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # x is the time Alan takes to paint the room on his own\n    x = symbols('x')\n\n    # Alan's work rate per hour + Bob's work rate per hour = Combined work rate per hour\n    equation = Eq(1/x + 1/6, 1/4)\n\n    # Solve the equation for x\n    alan_time = solve(equation, x)\n\n    return alan_time[0]\n\nans = solution()"
    ],
    "58c65fe8c729419faa7ab40e34ec522c": [
        "def solution():\n    matthew_pencils = 31\n    samantha_pencils = matthew_pencils - 6\n    return samantha_pencils\n\nans = solution()"
    ],
    "4e5a3868c9c2434595c65034ace0b292": [
        "from itertools import permutations\nfrom math import gcd\n\ndef solution():\n    # Factorial function to calculate arrangements\n    def factorial(n):\n        if n == 1 or n == 0:\n            return 1\n        else:\n            return n * factorial(n - 1)\n    \n    # Function to check if the arrangement is even\n    def is_even(arrangement):\n        for color in 'RBGYOP':\n            first_index = arrangement.index(color)\n            last_index = len(arrangement) - arrangement[::-1].index(color) - 1\n            if (last_index - first_index - 1) % 2 != 0:\n                return False\n        return True\n\n    # Generate all possible unique permutations of blocks\n    total_permutations = set(permutations('RRBBYYGGOOPP'))\n    even_count = sum(is_even(p) for p in total_permutations)\n    total_count = len(total_permutations)\n\n    # Reduce the fraction even_count/total_count\n    common_div = gcd(even_count, total_count)\n    m = even_count // common_div\n    n = total_count // common_div\n\n    # Return the sum of the reduced numerator and denominator\n    return m + n\n\nans = solution()"
    ],
    "79f67407094f46b5b519e683dcaa47b1": [
        "def solution():\n    ans = (46 + 7 * 3 - 7) / 20\n    return ans\n\nans = solution()"
    ],
    "a95c5e315cdc4b218288615a503b9e17": [
        "def solution():\n    total_points = 48\n    points_correct = 10\n    points_incorrect = -3\n    total_questions = 10\n\n    for incorrect in range(total_questions + 1):\n        correct = total_questions - incorrect\n        if correct * points_correct + incorrect * points_incorrect == total_points:\n            return incorrect\n\nans = solution()"
    ],
    "2876f7ddaab14397976d9a29249f7fe2": [
        "def solution():\n    # Rates of inlets A and B\n    rate_a = 1 / 36\n    rate_b = 1 / 48\n    \n    # Initial amounts filled by inlets A and B\n    amount_a = amount_b = 0\n    \n    # Time taken by both inlets\n    time_taken = 0\n    \n    # Work cycle periods for A and B respectively\n    cycle_a = [1, 2, 1]\n    cycle_b = [2, 1, 2]\n    \n    # Index to keep track of where we are in the cycle\n    cycle_index = 0\n    \n    # Continue until the pool is filled\n    while amount_a + amount_b < 1:\n        # Open inlet A for its current cycle period\n        for _ in range(cycle_a[cycle_index]):\n            # Make sure we don't over-fill the pool\n            if amount_a + amount_b < 1:\n                amount_a += rate_a\n                time_taken += 1\n        \n        # Open inlet B for its current cycle period\n        for _ in range(cycle_b[cycle_index]):\n            # Make sure we don't over-fill the pool\n            if amount_a + amount_b < 1:\n                amount_b += rate_b\n                time_taken += 1\n        \n        # Move to the next cycle\n        cycle_index = (cycle_index + 1) % len(cycle_a)\n        \n    # Return the total time taken, rounded to the nearest whole number\n    return round(time_taken)\n\nans = solution()"
    ],
    "cd38959f92fb4e319b79a21e7b76d58f": [
        "def solution():\n    # Probability of raining on Saturday\n    p_rain_saturday = 0.7\n    # Probability of raining on Sunday\n    p_rain_sunday = 0.5\n    \n    # Probability of not raining on Saturday\n    p_not_rain_saturday = 1 - p_rain_saturday\n    # Probability of not raining on Sunday\n    p_not_rain_sunday = 1 - p_rain_sunday\n    \n    # Probability of it not raining on both days (both events not happening)\n    p_neither_day = p_not_rain_saturday * p_not_rain_sunday\n    \n    # Probability of it raining on at least one of the days is 1 minus probability of neither day\n    p_at_least_one_day = 1 - p_neither_day\n    \n    return p_at_least_one_day\n\nans = solution()"
    ],
    "8a6cf5778ac04779aa35bd346944e9ea": [
        "def solution():\n    # Initialize the counter for the number of zeros (powers of 10)\n    zeros = 0\n    # Initialize the number we are looking for, the largest value of n\n    n = 0\n    \n    # Since the count of 2s will always be greater than or equal to the count of 5s in the prime factorization,\n    # we only need to count the number of 5s to determine the number of trailing zeros.\n\n    # Keep incrementing n and counting the number of times 5 divides n! until we reach 28 zeros\n    while zeros < 28:\n        n += 1\n        # Check how many 5s divide n\n        i = n\n        while i > 0:\n            if i % 5 == 0:\n                zeros += 1\n                i //= 5\n            else:\n                break\n\n    return n\n\nans = solution()"
    ],
    "0d15eca36ec748eeb767eb2dd214bad3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    henry, fred, richard = symbols('henry fred richard')\n\n    equation1 = Eq(richard, henry - 3.24)\n    equation2 = Eq(fred, richard + 5.6)\n    equation3 = Eq(henry + fred + richard, 204.56)\n\n    solutions = solve((equation1, equation2, equation3), (henry, fred, richard))\n\n    return float(solutions[fred])\n\nans = solution()"
    ],
    "5f4e105849d24adda1343493fbfdba1e": [
        "def solution():\n    total_children = 18\n    vanessa_position_from_front = 10\n    andrea_position_from_back = 12\n\n    andrea_position_from_front = total_children - andrea_position_from_back + 1\n    children_between = andrea_position_from_front - vanessa_position_from_front - 1\n\n    return children_between\n\nans = solution()"
    ],
    "a3fdcafb566f460b979225e8d39c3503": [
        "def solution():\n    # Lucas initially has 10 empty bottles after drinking the 10 bought ones\n    # He also has 1 borrowed empty bottle\n    total_empty_bottles = 10 + 1\n    total_drunk = 10  # Initially, he can drink 10 bottles\n\n    # Loop until he can no longer exchange empty bottles for full ones\n    while total_empty_bottles >= 2:\n        # Exchange empty bottles for full ones\n        new_bottles = total_empty_bottles // 2\n        # Drink the new bottles\n        total_drunk += new_bottles\n        # Calculate the remaining empty bottles: new empty ones + leftover ones that couldn't be exchanged\n        total_empty_bottles = new_bottles + total_empty_bottles % 2\n\n    # Return back the 1 borrowed empty bottle\n    # Lucas needs to have at least 2 empty bottles to make an exchange. If he has less, he cannot drink more.\n    if total_empty_bottles == 1:\n        total_drunk -= 1\n\n    return total_drunk\n\nans = solution()"
    ],
    "e5f11fb592e84030a40404b984c70a41": [
        "def solution():\n    from sympy import symbols, solve\n\n    x = symbols('x')\n    equation = 51 - 3 * (2 * x - 2) - 21\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "8447879252624d80abee2367655025a7": [
        "def solution():\n    total_weeks = 7\n    sweets_bought_per_week = 30\n    initial_sweets = 320\n    final_sweets = 348\n\n    sweets_gained = total_weeks * sweets_bought_per_week\n    sweets_eaten = (initial_sweets + sweets_gained) - final_sweets\n\n    sweets_eaten_per_week = sweets_eaten / total_weeks\n\n    return sweets_eaten_per_week\n\nans = solution()"
    ],
    "aef19b3423ea4e4db4e653899791075e": [
        "def solution():\n    for i in range(10):\n        if (2810 + i) % 6 == 0:\n            return i\n\nans = solution()"
    ],
    "7c9f36ec8f484e11986b79be63c2965e": [
        "def solution():\n    total_path_length = 5/6\n    fenced_length = 2/3\n    unfenced_length = total_path_length - fenced_length\n    return unfenced_length\n\nans = solution()"
    ],
    "b69896aa9f7e46fe9132abed6a7e3e0e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # t is the time in minutes after the pools start draining\n    t = symbols('t')\n\n    # Since they start full and drain at a constant rate,\n    # after t minutes, the height of the waterline is\n    # proportional to (total time - t) for each swimming pool\n    # The constant proportionality is derived from their draining times\n    # For pool A, it takes 10 minutes to fully drain, so the height is proportional to (10 - t)\n    # For pool B, it takes 6 minutes to fully drain, so the height is proportional to (6 - t)\n\n    # We want to find the time t when the height of pool A's waterline\n    # is 3 times that of pool B's waterline:\n    equation = Eq((10 - t), 3 * (6 - t))\n\n    # Solve the equation\n    solution = solve(equation, t)\n\n    return solution[0]\n\nans = solution()"
    ],
    "33b87e7146da47bfaf494ee09b2a87fc": [
        "def solution():\n    louise_time = 4\n    sally_time = 3 * louise_time\n    return sally_time\n\nans = solution()"
    ],
    "eac1ed2db4cd4aeba3d60c1847748394": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq((10*x - 8) - (12 - 10*x), 2)\n\n    ans = solve(equation, x)\n\n    return ans[0]\n\nans = solution()"
    ],
    "a9cffd9f20194c40af59a76b9109b46e": [
        "def solution():\n    from math import gcd\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "298e42b0f337482ab1dc2d26faaf6521": [
        "def solution():\n    # The fact that it is a \"Time Problem\" in combinatorics likely means this is a problem relating to arrangements or schedules,\n    # however, there's a critical lack of context or detail preventing a specific solution.\n    # Since the problem statement \"1\" does not provide any actionable information, and without further instructions, \n    # a meaningful solution cannot be provided. We may assume \"1\" is the only outcome not requiring a combination or arrangement.\n\n    # Without loss of generality, if we assume the problem requires counting single instance arrangements,\n    # the answer is trivially:\n    \n    return 1\n\nans = solution()"
    ],
    "7e5f8417567e4906a4369f99123b1772": [
        "def solution():\n    # Let's denote the number of sweets Yue Ying has as y\n    # According to the problem, Chenxi has y + 5 sweets\n    \n    # After Chenxi gives Yue Ying 10 sweets:\n    # Chenxi will have y + 5 - 10 sweets, which simplifies to y - 5 sweets\n    # Yue Ying will have y + 10 sweets\n    \n    # The difference in the number of sweets after the exchange will be:\n    # (y + 10) - (y - 5) = y + 10 - y + 5 = 15\n    \n    # Therefore, the difference will be 15 sweets\n    return 15\n\nans = solution()"
    ],
    "b97c96624e2c48adabfda458ee48cae5": [
        "def solution():\n    percentage = 35\n    total_amount = 200\n    \n    ans = (percentage / 100) * total_amount\n    return ans\n\nans = solution()"
    ],
    "192fafc0d2ce44eb94ff567dea0bb271": [
        "from sympy import isprime\n\ndef solution():\n    for prime1 in range(2, 70):\n        prime2 = 69 - prime1\n        if isprime(prime1) and isprime(prime2):\n            return prime2 - prime1\n\nans = solution()"
    ],
    "101213693c2745c385e01db607de76dc": [
        "def solution():\n    # Late time in hours\n    late_time = 12 / 60\n    # Early time in hours\n    early_time = -8 / 60\n    \n    # Let the distance be 'd' km\n    # Time = distance / speed\n    # Time difference = Time at slower speed - Time at faster speed\n    # late_time = d /3 - d / 7\n    # early_time = d / 7 - d / 3\n    \n    # Combining the two equations, we get:\n    # late_time + (-early_time) = d / 3 - d / 7 + d / 7 - d / 3\n    # 0 = 0, this implies the time gained is due to change in speed\n\n    # Now, calculate the distance using the difference in time\n    # and the difference in speeds:\n    # d / slow_speed - d / fast_speed = late_time + (-early_time)\n    \n    # Simplify to get the distance 'd'\n    d = (late_time + (-early_time)) / (1 / 3 - 1 / 7)\n    \n    # Multiply both sides by (3 * 7) to simplify the fraction\n    d = d * (3 * 7)\n    \n    return d\n\nans = solution()"
    ],
    "cc0957dc16a0487dbd25e08d32dfd716": [
        "def solution():\n    num_goats = 6\n    num_lambs = 4 * num_goats - 4\n    return num_lambs\n\nans = solution()"
    ],
    "94a7862baa614940812b4e4e2f3f9368": [
        "def solution():\n    ans = 254 * 6\n    return ans\n\nans = solution()"
    ],
    "a0395fcbfd2d439aa13dcc4f5226aeb1": [
        "def solution():\n    total_points = 70\n    correct_points = 10\n    incorrect_points = -5\n    total_questions = 10\n\n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        if correct_answers * correct_points + incorrect_answers * incorrect_points == total_points:\n            return correct_answers\n\nans = solution()"
    ],
    "369c0cce832f4bee85b43ed04d21f9c1": [
        "def solution():\n    total_students = 35\n    students_taking_math = 20\n    students_taking_both = 11\n    students_taking_neither = 10\n\n    students_taking_writing_only = (\n        total_students - students_taking_neither - (students_taking_math - students_taking_both)\n    )\n\n    return students_taking_writing_only\n\nans = solution()"
    ],
    "067c82adbd46460b82300b0fbc1bcc13": [
        "from sympy import isprime\n\ndef solution():\n    digits = '08072003'\n    primes = []\n\n    for number in range(2, 50):\n        if isprime(number):\n            if set(str(number)).issubset(set(digits)):\n                primes.append(number)\n\n    ans = max(primes)\n    return ans\n\nans = solution()"
    ],
    "90d3eecee3cc4363a4700ae0f6ac9f45": [
        "def solution():\n    # Let A_original be the original number of students in school A\n    # Let B_original be the original number of students in school B\n    # According to the problem, the total number of students is 1050, so:\n    # A_original + B_original = 1050\n    # After 20 students transfer from A to B, we get:\n    # A_original - 20 + B_original + 20 = 1050\n    # Also, A_original - 20 = B_original + 10\n    # Then we have two equations:\n    # A_original + B_original = 1050\n    # A_original - B_original = 30\n    # We can solve this system of equations for A_original.\n\n    from sympy import symbols, Eq, solve\n\n    A_original, B_original = symbols('A_original B_original')\n    equation1 = Eq(A_original + B_original, 1050)\n    equation2 = Eq(A_original - B_original, 30)\n\n    solutions = solve((equation1, equation2), (A_original, B_original))\n\n    return solutions[A_original]\n\nans = solution()"
    ],
    "8b5d0f2f1fc844cfbe9a313fbf4b0b31": [
        "def solution():\n    # Brute force approach - try all possible bracket insertions and evaluate\n    expressions = [\n        '((15+5)*5)+(15-(6+7))',\n        '(15+(5*5))+(15-(6+7))',\n        '((15+5)*(5+15))-6+7',\n        '(15+(5*(5+15)))-6+7',\n        '15+(5*((5+15)-6+7))',\n        '15+((5*5)+(15-(6+7)))',\n        '15+((5*(5+15))-6)+7',\n        '15+(5*((5+15)-6))+7',\n        '(15+5)*((5+15)-6)+7',\n        '(15+(5*5+15))-6+7',\n        '15+5*(5+(15-(6+7)))',\n        '15+5*((5+15)-6)+7',\n        '(15+5)*5+(15-6)+7',\n        '15+(5*5)+(15-6)+7',\n        '15+5*(5+15-6+7)',\n    ]\n    \n    max_result = None\n    max_expression = None\n    \n    for expr in expressions:\n        current_result = eval(expr)\n        if max_result is None or current_result > max_result:\n            max_result = current_result\n            max_expression = expr\n    \n    return max_result, max_expression\n\nans = solution()"
    ],
    "4822c5372e3f4b81b32d47e02e9fb76a": [
        "def solution():\n    ans = sum(range(1, 18, 2))\n    return ans\n\nans = solution()"
    ],
    "f90a5e4a189b415caad9310b12a991d9": [
        "def solution():\n    # Total sum of the five numbers based on their average\n    total_sum_5 = 54 * 5\n    \n    # Total sum of the first two numbers based on their average\n    total_sum_first_2 = 48 * 2\n    \n    # Sum of last three numbers using Inclusion-Exclusion principle\n    sum_last_3 = total_sum_5 - total_sum_first_2\n    \n    # Average of the last three numbers\n    avg_last_3 = sum_last_3 / 3\n    \n    return avg_last_3\n\nans = solution()"
    ],
    "218aeeff17964c29855e70445931229c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define variables\n    total_people = symbols('total_people')\n    \n    # Create equations\n    adults = 2 / 7 * total_people\n    remaining = total_people - adults\n    boys = 4 / 5 * remaining\n    girls = remaining - boys\n    \n    # We are given there are 80 more adults than girls\n    equation = Eq(adults - girls, 80)\n    \n    # Solve for total people\n    total_people_solution = solve(equation, total_people)\n    \n    return total_people_solution[0]\n\nans = solution()"
    ],
    "6d776ddacbf9461eb585ab73856e3bc6": [
        "def solution():\n    sum_digits = sum(int(digit) for i in range(1, 110) for digit in str(i))\n    return sum_digits\n\nans = solution()"
    ],
    "de1d2a07c3e741a88e3e8a8c740433f4": [
        "def solution():\n    total_toys = 40\n    elephant_position_left = 10\n    toys_between_rabbit_and_elephant = 5\n    rabbit_position_left = elephant_position_left + toys_between_rabbit_and_elephant\n    rabbit_position_right = total_toys - rabbit_position_left + 1\n\n    return rabbit_position_right\n\nans = solution()"
    ],
    "86c522861eca4579aee63cfe6a2ed4f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let teddy's age be t and father's age be f\n    t, f = symbols('t f')\n\n    # Equation for the first condition\n    # Father's age was 7 times Teddy's age when Teddy was 5\n    equation1 = Eq(f, 7 * 5)\n\n    # Equation for the second condition\n    # When Father is 40, calculate Teddy's age\n    equation2 = Eq(f - t, 40 - 5)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (t, f))\n\n    # Calculate Teddy's age when Father is 40\n    teddy_age_when_father_40 = 5 + (40 - solutions[f])\n\n    return teddy_age_when_father_40\n\nans = solution()"
    ],
    "ff96cbe022d54ccd8c38734e0820996b": [
        "def solution():\n    # Each cut can create at most one more slice than the previous cut.\n    # The first cut creates 2 slices.\n    # Starting from the second cut, we check if it is possible to create one more slice\n    # than the previous cut, which is the maximum. So we add 1 for each consecutive cut.\n    maximum_slices = 2\n    for i in range(1, 4):\n        maximum_slices += i + 1  # Starting from second cut, it adds 2, then 3, then 4 slices.\n    return maximum_slices\n\nans = solution()"
    ],
    "0625264c9a9d4b1e9c10ef4590d1be1c": [
        "def solution():\n    pink_dolphins = 1\n    gray_dolphins = 11 * pink_dolphins\n    total_dolphins = 48\n\n    while pink_dolphins + gray_dolphins != total_dolphins:\n        pink_dolphins += 1\n        gray_dolphins = 11 * pink_dolphins\n\n    return pink_dolphins\n\nans = solution()"
    ],
    "fc10a17cccd04e8a8b4ba3e7393837eb": [
        "def solution():\n    area = 54  # Triangle area in cm^2\n    base = 9   # Base length in cm\n\n    # Area of triangle formula: A = 0.5 * base * height\n    # Solve for height: height = (2 * A) / base\n    height = (2 * area) / base\n\n    return height\n\nans = solution()"
    ],
    "a0a9b4817586473ab82958503266de20": [
        "def solution():\n    ans = 82 + 5135 + 109\n    return ans\n\nans = solution()"
    ],
    "7e59f3d16bb944d0af7260fa7a6a1a05": [
        "def solution():\n    ans = sum(i**2 for i in range(2, 33, 3))\n    return ans\n\nans = solution()"
    ],
    "501f99ad661542b685b7602cc769d419": [
        "def solution():\n    result = 35 / 100 * 700\n    return result\n\nans = solution()"
    ],
    "1f92ac5fcbf346a58c902a4e56d63b9f": [
        "def solution():\n    cabinets_left = 4\n    cabinets_right = 7\n    cabinets_candy = 1  # Candy's own cabinet\n\n    total_cabinets = cabinets_left + cabinets_candy + cabinets_right\n\n    return total_cabinets\n\nans = solution()"
    ],
    "62900d76501a411095425c90066b6baa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    t, c = symbols('t c') # t for tables, c for chairs\n\n    # Originally, the number of tables and chairs are equal\n    equation1 = Eq(t, c)\n    \n    # After changes, the number of chairs is 4 times the number of tables\n    equation2 = Eq(c + 24, 4 * (t - 42))\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (t, c))\n\n    return solutions[c]\n\nans = solution()"
    ],
    "d0df4689449e49dbaa0b915c5b1e0d16": [
        "def solution():\n    return 1914 // 6, 1914 % 6\n\nans = solution()"
    ],
    "72e9171f682743098c4b8fec888c8a50": [
        "def solution():\n    books_first_day = 455\n    books_second_day = 198\n    total_books = books_first_day + books_second_day\n    return total_books\n\nans = solution()"
    ],
    "0d83a44b34bd44cba27a54d4aa0c0f8b": [
        "def solution():\n    # Simplify the expression using the rules of exponents\n    # Since 4^982 can be rewritten as (2^2)^982 = 2^1964, the expression simplifies to:\n    # numerator = 2^2019\n    # denominator = 2^1964 - 2^1963\n    # Using Python's mod operation to find the remainder with modulus 5\n\n    numerator_mod = pow(2, 2019, 5)\n    # Simplifying the denominator considering the exponents and remainder when divided by 5\n    denominator_mod = (pow(2, 1964, 5) - pow(2, 1963, 5)) % 5\n\n    # Using the property that (a - b) mod n = (a mod n - b mod n + n) mod n\n    # to simplify denominator modulo calculation in presence of subtraction\n    denominator_mod = (denominator_mod + 5) % 5\n    \n    # Since the denominator_mod may not be the multiplicative inverse, \n    # we will search for the inverse in mod 5 by finding a value which \n    # when multiplied by denominator_mod gives a result of 1 mod 5.\n    multiplicative_inverse = None\n    for i in range(1, 5):\n        if (denominator_mod * i) % 5 == 1:\n            multiplicative_inverse = i\n            break\n    \n    # This operation is the equivalent of division in modulo arithmetic when the divisor\n    # is converted to its multiplicative inverse\n    result_mod = (numerator_mod * multiplicative_inverse) % 5\n    \n    return result_mod\n\nans = solution()"
    ],
    "71839d8b337447be8093660f325bbed7": [
        "def solution():\n    for Y in range(10):\n        number = int(f'106{Y}')\n        if number % 18 == 0:\n            return Y\n\nans = solution()"
    ],
    "b5bf6927be4b4a3087a39281607f3658": [
        "def solution():\n    initial_cookies = 15\n    eaten_cookies = 6\n    remaining_cookies = initial_cookies - eaten_cookies\n    return remaining_cookies\n\nans = solution()"
    ],
    "d75c9444af574fdf91925c609d2dc5d8": [
        "def solution():\n    boxes_per_class = 8\n    number_of_classes = 5\n\n    total_boxes = boxes_per_class * number_of_classes\n\n    return total_boxes\n\nans = solution()"
    ],
    "1a265e25f6874c5db75962c369ac17bc": [
        "def solution():\n    count = 0\n    # Iterate through all possible 3-digit even numbers.\n    for i in range(100, 1000, 2): \n        # Get the sum of the digits.\n        digits_sum = sum(int(digit) for digit in str(i))\n        # Check if the sum of the digits is 7.\n        if digits_sum == 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "b61bf81e98dd4cc3b300767de6effa6e": [
        "def solution():\n    for i in range(99, -1, -1):  # Start from the largest possible two digits and decrement\n        number = int(f\"49{i:02d}\")  # Construct the four-digit number\n        if number % 2 == 0 and number % 3 == 0 and number % 5 == 0:\n            return number  # Return the first number that meets the conditions\n\nans = solution()"
    ],
    "4950b20e3ff347308b65c01922e1ecd1": [
        "def solution():\n    n = 100\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    sum_of_integers = n * (n + 1) // 2\n    ans = sum_of_cubes / sum_of_integers\n    return ans\n\nans = solution()"
    ],
    "7c6943752cfb4c10ba5d271cbd98b7f5": [
        "def solution():\n    ana_height = 150\n    kristoff_multiply_olaf = 5.5\n    \n    olaf_height = ana_height - 116\n    kristoff_height = olaf_height * kristoff_multiply_olaf\n    height_difference = kristoff_height - ana_height\n    \n    return height_difference\n\nans = solution()"
    ],
    "0c07d3cceff140638bcc02cfd4b815c0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    motorcycles, cars, lorries = symbols('motorcycles cars lorries')\n\n    # Equation representing the total number of vehicles\n    eq1 = Eq(motorcycles + cars + lorries, 27)\n    # Equation representing the total number of wheels\n    eq2 = Eq(2 * motorcycles + 4 * cars + 6 * lorries, 96)\n    # Equation representing the number of cars being equal to the number of lorries\n    eq3 = Eq(cars, lorries)\n\n    solutions = solve((eq1, eq2, eq3), (motorcycles, cars, lorries))\n\n    return solutions[cars]\n\nans = solution()"
    ],
    "825b09d6a8a7435181cbe8f03a8719e8": [
        "def solution():\n    ans = 113 - 29\n    return ans\n\nans = solution()"
    ],
    "67726d4c5f1c43f99ab8c34d4c1d1255": [
        "def solution():\n    total_solution_weight = 700  # grams\n    sugar_concentration = 0.32\n    sugar_weight = total_solution_weight * sugar_concentration\n    water_weight = total_solution_weight - sugar_weight\n    return water_weight\n\nans = solution()"
    ],
    "64edc5874141435dbc97c986f5c8c721": [
        "def solution():\n    # Let x be the mass of the empty jar and y be the mass of one chocolate\n    # We then have two equations based on the given information:\n    # x + 5y = 185\n    # x + 17y = 317\n\n    # We can solve this system of equations to find x and y\n    # Calculate the mass of the empty jar (x) and the mass of one chocolate (y)\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n\n    # Setting up the equations based on given information\n    equation1 = Eq(x + 5 * y, 185)\n    equation2 = Eq(x + 17 * y, 317)\n\n    # Solving for x and y\n    solutions = solve((equation1, equation2), (x, y))\n    jar_mass = solutions[x]\n    chocolate_mass = solutions[y]\n\n    # Now we can calculate the mass of the jar with 10 chocolates\n    # mass = mass_of_empty_jar + (mass_of_one_chocolate * number_of_chocolates)\n    mass_with_10_chocolates = jar_mass + (chocolate_mass * 10)\n\n    return mass_with_10_chocolates\n\nans = solution()"
    ],
    "ccf4b3c1375049a0a9b0d364cd87dedb": [
        "def solution():\n    ans = 3.05 - 1/10\n    return ans\n\nans = solution()"
    ],
    "ca40261e554e488db8f2110589404752": [
        "def solution():\n    total_distance = 800\n    trees = 21\n    intervals = trees - 1\n     \n    distance_between_trees = total_distance / intervals\n\n    return distance_between_trees\n\nans = solution()"
    ],
    "41cb580f803a4484aa9de2340f620cd5": [
        "def solution():\n    return 132 // 11\n\nans = solution()"
    ],
    "5f82ecd1f2614283b498976475a87d7c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of apples, pears, and mangoes\n    apples, pears, mangoes = symbols('apples pears mangoes')\n    \n    # Given ratios and prices\n    apple_price = 0.60\n    ratio_apples_pears = 3 / 2\n    ratio_pears_mangoes = 1 / 5\n    \n    # John bought 4/5 as many pears as apples and 2/5 as many mangoes as apples\n    # Equations based on the ratios of fruit quantities\n    eq1 = Eq(pears, (4/5) * apples)\n    eq2 = Eq(mangoes, (2/5) * apples)\n    \n    # Money spent on each fruit type\n    money_spent_apples = apple_price * apples\n    money_spent_pears = money_spent_apples * (2/3)  # From the ratio 3:2\n    money_spent_mangoes = money_spent_pears * 5      # From the ratio 1:5\n    \n    # Total money spent is $150\n    eq3 = Eq(money_spent_apples + money_spent_pears + money_spent_mangoes, 150)\n    \n    # Solve the equations\n    solutions = solve((eq1, eq2, eq3), (apples, pears, mangoes))\n    \n    # Calculate the total number of fruits\n    total_fruits = solutions[apples] + solutions[pears] + solutions[mangoes]\n    \n    return total_fruits\n\nans = solution()"
    ],
    "9e5d33c0a5ac43408701c0c051cab6e9": [
        "def solution():\n    # Initialize the number with known digits \"1992___\"\n    min_valid_number = int(\"1992\")\n\n    # Divisibility rule for 5: The last digit must be 0 or 5\n    # Because we want the smallest number, the last digit is 0\n\n    # Divisibility rule for 2 and 5: Last digit is 0 (even number and ends in 0)\n    # This means the second last digit must be even for the whole number to be divisible by 2\n\n    # Iterate over the possible values for the second and third last digits\n    # keeping in mind the number must be divisible by 11 and 3.\n    # For 3: The sum of the digits must be divisible by 3\n    # For 11: The alternating sum of the digits must be divisible by 11\n    for d6 in range(10):\n        for d7 in range(0, 10, 2):  # Even number for the second last digit\n            num = min_valid_number * 100 + d6 * 10 + d7\n            if num % 3 == 0:  # Check divisibility by 3\n                alternating_sum = sum(int(digit) for digit in str(num)[::2]) - sum(int(digit) for digit in str(num)[1::2])\n                if alternating_sum % 11 == 0:  # Check divisibility by 11\n                    return num * 10  # Append the last digit 0\n\nans = solution()"
    ],
    "bee2bb31e9cc4bfd97c140eb2cd7ca84": [
        "def solution():\n    hazel_age_in_3_years = 9\n    hazel_current_age = hazel_age_in_3_years - 3\n    jessica_current_age = hazel_current_age - 3\n    total_age_next_year = (hazel_current_age + 1) + (jessica_current_age + 1)\n    return total_age_next_year\n\nans = solution()"
    ],
    "b5e2b7a8198347d0b928d1181cc5ab24": [
        "def solution():\n    total_saved_first_half = 366\n    average_saved_second_half = 65\n    months_first_half = 6\n    months_second_half = 6\n\n    total_saved_second_half = average_saved_second_half * months_second_half\n    total_saved_year = total_saved_first_half + total_saved_second_half\n\n    average_saved_year = total_saved_year / (months_first_half + months_second_half)\n\n    return average_saved_year\n\nans = solution()"
    ],
    "e20396c1126c4c378303deff5dbb8965": [
        "from math import factorial\n\ndef solution():\n    word = 'ELEMENT'\n    letter_counts = {ch: word.count(ch) for ch in set(word)}\n\n    total_permutations = factorial(len(word))\n    for count in letter_counts.values():\n        total_permutations //= factorial(count)\n    \n    return total_permutations\n\nans = solution()"
    ],
    "2f7331548e4c4ead9882750734e9dcb3": [
        "def solution():\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    ans = gcd(4811, 1981)\n    return ans\n\nans = solution()"
    ],
    "d09c9b0c4c064e1d91b4be6e28603df8": [
        "def solution():\n    first_term = 4\n    last_term = 11\n    num_terms = last_term - first_term + 1\n    sum_seq = (num_terms * (first_term + last_term)) // 2\n    return sum_seq\n\nans = solution()"
    ],
    "56e4e8204ffd46788f19f0fb559476b9": [
        "def solution():\n    total_score_six_assignments = 6 * 92\n    total_score_five_assignments = 5 * 94\n    score_sixth_assignment = total_score_six_assignments - total_score_five_assignments\n    \n    return score_sixth_assignment\n\nans = solution()"
    ],
    "60a921961e274ba6b7944a53c0a16d35": [
        "def solution():\n    purchase_price_per_pair = 65\n    selling_price_per_pair = 74\n    remaining_pairs = 5\n    total_profit = 440\n\n    profit_per_pair = selling_price_per_pair - purchase_price_per_pair\n    pairs_sold = total_profit // profit_per_pair\n\n    initial_pairs_purchased = pairs_sold + remaining_pairs\n\n    return initial_pairs_purchased\n\nans = solution()"
    ],
    "c3537d94f9474c1681dd753250a4e937": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    half_duration = datetime.strptime(\"7:15 PM\", \"%I:%M %p\") - datetime.strptime(\"5:30 PM\", \"%I:%M %p\")\n    start_time = datetime.strptime(\"5:30 PM\", \"%I:%M %p\") - half_duration\n    return start_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "bf8d648694e046798009b3bcb8b11a51": [
        "def solution():\n    cars_final = 30\n    cars_entered = 8\n    cars_exited = 10\n\n    cars_initial = cars_final - cars_entered + cars_exited\n\n    return cars_initial\n\nans = solution()"
    ],
    "f0661ff980b543b2890c0b2cd9ed594d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(((2 * x / 4) ** 2 - 4) / 10, 6)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ea2b0754dbd44371b1caf18c22c52d19": [
        "def solution():\n    return 1234 - 566\n\nans = solution()"
    ],
    "33baf7cac5884fbc952fe20bd5c8b056": [
        "def solution():\n    toys_per_minute = 27 / 5\n    toys_in_20_minutes = toys_per_minute * 20 \n    return int(toys_in_20_minutes)\n\nans = solution()"
    ],
    "9921f066d3b9491bb6209aef0e315efb": [
        "def solution():\n    from math import gcd\n\n    amy_cycle = 24\n    ginny_cycle = 36\n\n    # Find the least common multiple of the two cycles\n    lcm = (amy_cycle * ginny_cycle) // gcd(amy_cycle, ginny_cycle)\n\n    return lcm\n\nans = solution()"
    ],
    "91f1dc30074b4cc5ba3de816f8ebe024": [
        "def solution():\n    total_water_needed = 59\n    fill_rate = 10\n    leak_rate = 3\n    water_in_first_day = 3\n    days = 1\n    current_water = water_in_first_day\n    \n    while current_water < total_water_needed:\n        current_water += (fill_rate - leak_rate)\n        days += 1\n        \n    return days\n\nans = solution()"
    ],
    "2d3e8ce232944b0da4446730b18adc15": [
        "def solution():\n    total_seconds = 30 * 60  # half an hour\n    current_number = 1\n    digits_written = 0\n\n    while True:\n        digits_in_current_number = len(str(current_number))\n        if digits_written + digits_in_current_number <= total_seconds:\n            digits_written += digits_in_current_number\n            current_number += 1\n        else:\n            break\n\n    return current_number - 1  # subtract 1 because we break the loop when we can't write this number\n\nans = solution()"
    ],
    "c71b3187758541f2a9be1885e9788daf": [
        "def solution():\n    amounts = [\n        (1/2) * 30,\n        (1/3) * 36,\n        (1/4) * 40,\n        (1/5) * 60,\n        (1/6) * 96\n    ]\n    ans = max(amounts) - min(amounts)\n    return ans\n\nans = solution()"
    ],
    "2526a9251202448c82ca74dc1af18fd8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    end_time = datetime.strptime(\"11:20 PM\", \"%I:%20 %p\")\n    game_duration = timedelta(minutes=225)\n    start_time = end_time - game_duration\n    return start_time.strftime(\"%I:%M %p\")\n\nans = solution()"
    ],
    "4b4550a7fb5a4da1879ab82345527afa": [
        "def solution():\n    # Worst case: Darrell draws all the non-green marbles first\n    non_green_marbles = 5 + 9 + 2  # Blue + White + Black\n    # He needs to draw one more to ensure he gets a green one\n    marbles_to_draw = non_green_marbles + 1\n    \n    return marbles_to_draw\n\nans = solution()"
    ],
    "63ccfd7c8f7948138140e37b2a8721c9": [
        "def solution():\n    from math import comb\n    return comb(20, 2)\n\nans = solution()"
    ],
    "d325179a1a7c406b95abe95c9433bf65": [
        "def solution():\n    toys_per_minute = 27 / 3\n    return toys_per_minute\n\nans = solution()"
    ],
    "1a9163a8cb424cb9a9accd781412b79a": [
        "def solution():\n    total_distance_climbed = 6 * 6 + 2  # 6 days full climb, 7th day partial climb\n    total_distance = 20  # total well depth\n    slide_down_distance = total_distance_climbed - total_distance  # distance slid down\n\n    return slide_down_distance / 6  # slide down each night\n\nans = solution()"
    ],
    "32e0c31f837f484dbc8307ce7ebbf9f6": [
        "def solution():\n    initial_rabbits = 32\n    years = 3\n\n    for _ in range(years):\n        birth = 3 * initial_rabbits\n        death = initial_rabbits / 2\n        initial_rabbits = birth - death\n\n    return int(initial_rabbits)\n\nans = solution()"
    ],
    "7a85e45de1cf4eefac785ffc876e2419": [
        "def solution():\n    puffs_per_hour = 24 / 2\n    hours_for_120_puffs = 120 / puffs_per_hour\n\n    return hours_for_120_puffs\n\nans = solution()"
    ],
    "407e3d4abdd84948b11417cc857b3a6f": [
        "def solution():\n    weight_metal_1 = 6\n    nickel_pct_1 = 0.45\n\n    weight_metal_2 = 14\n    nickel_pct_2 = 0.60\n\n    total_weight = weight_metal_1 + weight_metal_2\n    total_nickel = weight_metal_1 * nickel_pct_1 + weight_metal_2 * nickel_pct_2\n\n    nickel_concentration = (total_nickel / total_weight) * 100\n\n    return nickel_concentration\n\nans = solution()"
    ],
    "e45c3400530944688f0b7c15612c3f65": [
        "def solution():\n    # Let's denote Candy's speed as x meters per minute.\n    # Then Ivy's speed is x + 20 meters per minute.\n    # Candy has walked for 12 minutes when they meet,\n    # so Candy has covered 12*x meters.\n    # Ivy has walked for 12+6=18 minutes when they meet,\n    # so Ivy has covered 18*(x+20) meters.\n    # Together they have covered the whole distance between their houses, which is 1200 meters.\n    # Therefore, 12*x + 18*(x+20) = 1200\n    \n    # Now we solve the equation for x.\n    x = symbols('x')\n    equation = Eq(12*x + 18*(x+20), 1200)\n    candy_speed = solve(equation, x)[0]\n\n    return candy_speed\n\nans = solution()"
    ],
    "00b3826fde0d4426bbae01c933f41959": [
        "def solution():\n    # In a single round-robin tournament with 8 players, each player plays against each other exactly once.\n    # This means that the total number of games played is given by \"Combination of 8 taken 2 at a time\", C(8, 2).\n    # This can be calculated using the formula for combinations: C(n, k) = n! / (k! * (n-k)!)\n    # However, since there is exactly one winner per game, the maximum number of wins any player can have is 7 \n    # (since they do not play against themselves).\n    # Additionally, if each player records a different number of wins, they must have win counts from 0 to 7.\n    return 7  # The champion, having the highest number of wins, must have 7 wins.\n\nans = solution()"
    ],
    "17b260645d6a414ab42dd5105d17a7a0": [
        "from itertools import combinations_with_replacement\n\ndef solution():\n    target_sum = 13\n    max_product = 0\n    for combo in combinations_with_replacement(range(1, target_sum + 1), 4):\n        if sum(combo) == target_sum:\n            max_product = max(max_product, combo[0] * combo[1] * combo[2] * combo[3])\n    return max_product\n\nans = solution()"
    ],
    "9931681699674c94a55cbd91e9fef93d": [
        "def solution():\n    scale_ratio = 6  # 1 cm is 6 meters in reality\n    playground_length_on_plan = 5  # in cm\n\n    real_playground_length = playground_length_on_plan * scale_ratio  # in meters\n    return real_playground_length\n\nans = solution()"
    ],
    "a3f71bfa7bda47abb06c88dc5fe9c667": [
        "def solution():\n    for number in range(10, 100):\n        if number % 3 == 1 and number % 5 == 1:\n            return number\n\nans = solution()"
    ],
    "844dc49550ce457b94476fbbf9b26070": [
        "def solution():\n    result = (3/5) * 35\n    return result\n\nans = solution()"
    ],
    "0b323f74ff2440bd99945e7df07c7d9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'x' be the number of years in the future we are looking for\n    x = symbols('x')\n\n    # Current ages\n    edward_age_now = 8\n    mother_age_now = 32\n\n    # Future ages\n    edward_age_future = edward_age_now + x\n    mother_age_future = mother_age_now + x\n\n    # Equation representing the problem\n    equation = Eq(mother_age_future, 3 * edward_age_future)\n\n    # Solve for 'x'\n    x_solution = solve(equation, x)\n\n    # Return the number of years as an integer\n    return x_solution[0]\n\nans = solution()"
    ],
    "f824d5ccf33349d2ab0f1608091dea39": [
        "def solution():\n    n = 1\n    while True:\n        initial_students = n**2 + 11\n        new_students = (n + 1)**2\n        if new_students - initial_students == 12:\n            return initial_students\n        n += 1\n\nans = solution()"
    ],
    "7fc9064a1aa5469aa93c3e1bbde4bbee": [
        "def solution():\n    cookie_box_price = 6\n    total_money = 250\n\n    num_boxes = total_money // cookie_box_price\n\n    return num_boxes\n\nans = solution()"
    ],
    "dc7f0a68b9f24779bc4219332172235f": [
        "def solution():\n    missing_number = 4060800 - 4000000 - 800\n    return missing_number\n\nans = solution()"
    ],
    "ba3fa896136240449736cb46b7e3fc42": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pen = symbols('pen')\n    pencil = pen - 0.5\n    equation = Eq(pen + pencil, 4.5)\n\n    price_of_pen = solve(equation, pen)[0]\n\n    return price_of_pen\n\nans = solution()"
    ],
    "75141a0eda0b4ee188fda622dacab4d8": [
        "def solution():\n    oil_tank_a = 673\n    oil_tank_b = oil_tank_a + 56\n    return oil_tank_b\n\nans = solution()"
    ],
    "82a289b59d824994b394d0497a34059a": [
        "def solution():\n    boys = 15\n    boys_apples = 30\n    average_apples = 26\n\n    # Let the number of girls be x\n    # Total apples is the sum of apples picked by boys and by girls\n    # Average = Total apples / Total number of students (boys + girls)\n    # From the average formula: Total apples = Average * Total number of students\n\n    # Average * (boys + x) = boys * boys_apples + x * girls_apples\n    # girls_apples is known to be 20, so we can calculate the girls:\n    girls_apples = 20\n    girls = (average_apples * (boys + girls) - boys * boys_apples) / (girls_apples - average_apples)\n\n    return int(girls)\n\nans = solution()"
    ],
    "78ccf674710b4fe69a75eac5a5e851fe": [
        "def solution():\n    cost_of_8_books = 32\n    cost_per_book = cost_of_8_books / 8\n    cost_of_12_books = cost_per_book * 12\n    return cost_of_12_books\n\nans = solution()"
    ],
    "e5322713de5247778392f797381187c3": [
        "def solution():\n    total_items = 12\n    total_cost = 340\n    cost_basketball = 30\n    cost_volleyball = 25\n\n    # Let the number of basketballs be x\n    # the number of volleyballs will be total_items - x\n    # cost_basketball * x + cost_volleyball * (total_items - x) = total_cost\n    # Solve for x\n\n    x = (total_cost - (cost_volleyball * total_items)) / (cost_basketball - cost_volleyball)\n    return int(x)\n\nans = solution()"
    ],
    "12650053179d4354abc37f8acdc2f5cc": [
        "def solution():\n    total_wealth = 15000000\n    richie_share = total_wealth * (1/3)\n    remaining_after_richie = total_wealth - richie_share\n    thrifty_share = remaining_after_richie * (1/2)\n    remaining_after_thrifty = remaining_after_richie - thrifty_share\n    bounty_share = remaining_after_thrifty * (2/5)\n    archie_share = remaining_after_thrifty - bounty_share\n    return archie_share\n\nans = solution()"
    ],
    "548479b1b79a4bb28ce823621c5abeeb": [
        "def solution():\n    total_candy = 36\n    given_to_lily = (3 / 4) * total_candy\n    remaining_after_lily = total_candy - given_to_lily\n    given_to_brother = (1 / 3) * remaining_after_lily\n    remaining_candy = remaining_after_lily - given_to_brother\n\n    return remaining_candy\n\nans = solution()"
    ],
    "033994c93a6b45b089e9faa4e06774ed": [
        "def solution():\n    ans = sum((k/n) for n in range(2, 61) for k in range(1, n))\n    return ans\n\nans = solution()"
    ],
    "ba33391702c54eddadac0a6dea3e8f20": [
        "def solution():\n    x = (16 - 1) / 5\n    return x\n\nans = solution()"
    ],
    "e41fa665820a4926b055fb0c8e503a19": [
        "def solution():\n    ans = 427 // 7\n    return ans\n\nans = solution()"
    ],
    "fdb38dfc8f624402a53c64aee38c936c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the amount of money Roy initially had be r, and Dennis initially had d.\n    r, d = symbols('r d')\n\n    # The total amount of money they shared is $340.\n    equation1 = Eq(r + d, 340)\n\n    # After spending, Dennis has twice as much money left as Roy.\n    # Roy's remaining money: r - (2/3)*r = (1/3)*r\n    # Dennis' remaining money: d - (1/4)*d = (3/4)*d\n    # According to the problem, (3/4)*d = 2 * (1/3)*r => d = 8/9*r\n    equation2 = Eq((3/4)*d, 2*(1/3)*r)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (r, d))\n\n    # Calculate Dennis's remaining money after spending 1/4 of it\n    dennis_remaining_money = solutions[d] * (3/4)\n\n    return dennis_remaining_money\n\nans = solution()"
    ],
    "5084bbc7b89c41b5bf2edb1303aac223": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    friday = symbols('friday')\n\n    saturday = friday + 27\n    sunday = friday - 14\n\n    equation = Eq(friday + saturday + sunday, 475)\n\n    solution = solve(equation, friday)\n\n    return solution[0]\n\nans = solution()"
    ],
    "5c220b4fa8654c3a8555329850f8525d": [
        "def solution():\n    return 675 // 25\n\nans = solution()"
    ],
    "29250105e9c04c48bd1439676ca2782d": [
        "def solution():\n    total_cost = 235.60\n    ball_cost = 20.45\n    number_of_balls = 8\n    number_of_hoops = 6\n\n    total_ball_cost = number_of_balls * ball_cost\n    total_hoop_cost = total_cost - total_ball_cost\n    cost_per_hoop = total_hoop_cost / number_of_hoops\n    \n    return cost_per_hoop\n\nans = solution()"
    ],
    "6a7f195d4df34990a4361a1279619703": [
        "def solution():\n    # We know that the 1-9 page numbers use 9 digits,\n    # the 10-99 page numbers use 90 * 2 = 180 digits,\n    # and we have 300 digits in total.\n    # Let's find out how many digits we have left for the 100+ page numbers.\n\n    remaining_digits = 300 - (9 + 180)\n    # Now, each of the 100+ page numbers uses 3 digits,\n    # so we can find how many pages there are by dividing the remaining digits by 3.\n\n    pages_with_three_digits = remaining_digits // 3\n    # The last page number will then be the sum of the maximum two-digit page (99)\n    # and the number of pages with three digits.\n\n    last_page_number = 99 + pages_with_three_digits\n    return last_page_number\n\nans = solution()"
    ],
    "49f01b25ab6d4b69801d88a94adc488b": [
        "def solution():\n    # Let x be the constant mass of mint candies in each container.\n    # Let y be the mass of chocolate candies, which is proportion to the mass of mint.\n    # The masses of the strawberry candies from the three containers are 2/5, 2/7, 2/9 times the total mass.\n    \n    # We can express the total mass of all three containers in terms of x, y and the strawberry ratios:\n    # total_mass = strawberry_mass1 + (x + y) + strawberry_mass2 + (x + y) + strawberry_mass3 + (x + y)\n    # Given the total_mass is 1371 g, we can calculate the mass of the strawberry candies:\n    \n    # For container 1: strawberry1/(2/5) = (x + y)\n    # For container 2: strawberry2/(2/7) = (x + y)\n    # For container 3: strawberry3/(2/9) = (x + y)\n    \n    # Solving the equation strawberry1 + (x + y) + strawberry2 + (x + y) + strawberry3 + (x + y) = 1371\n    # with strawberry1/(2/5) = strawberry2/(2/7) = strawberry3/(2/9) = (x + y)\n    \n    # First, we find a common denominator for the fractions (2/5), (2/7), (2/9):\n    # common_denominator = 5 * 7 * 9\n    \n    common_denominator = 5 * 7 * 9\n    \n    # Calculate the proportion of each strawberry fraction to the common denominator:\n    multipliers = [\n        common_denominator / (2 / 5),\n        common_denominator / (2 / 7),\n        common_denominator / (2 / 9),\n    ]\n    \n    # Sum the proportions to be equal to the total mass multiplied by the common denominator:\n    total_strawberry_proportion = sum(multipliers)\n    \n    # Find the total mass of the strawberry candies:\n    mass_strawberry = (1371 * common_denominator) / total_strawberry_proportion\n    \n    return mass_strawberry\n\nans = solution()"
    ],
    "52d042e76d354b68ac3284571d64fe18": [
        "def solution():\n    ans = -12 - 5\n    return ans\n\nans = solution()"
    ],
    "93cbd8cff1724a0288df495bf1bf1129": [
        "def solution():\n    from sympy import factorint, sqrt\n\n    # Factorize 693 into its prime factors\n    factors = factorint(693)\n\n    # A perfect square requires that each prime factor is raised to an even power.\n    # We will calculate the smallest number that we can multiply with 693\n    # to make each prime exponent even (if it's not already)\n\n    # Go through each factor and its count\n    # If the count is odd, we double its count to make it even\n    product = 1\n    for factor, count in factors.items():\n        if count % 2 == 1:\n            product *= factor\n\n    return product\n\nans = solution()"
    ],
    "efc1886d8b6e41288f275b25df4f1970": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    A = symbols('A')\n    equation = Eq(2 + 1/(2 + 1/(1 + 1/(2 + 1/A))), 64/27)\n\n    solution = solve(equation, A)\n\n    return solution[0]\n\nans = solution()"
    ],
    "f92015fcf25b4f6b8a4c6c33740e86b0": [
        "def solution():\n    total_liters = 8 * 3  # total amount of juice in liters\n    remaining_liters = total_liters - 9  # remaining juice after drinking\n    container_volume = 5\n\n    # Number of containers needed is the ceiling of remaining_liters divided by container_volume\n    containers_needed = -(-remaining_liters // container_volume)\n\n    return containers_needed\n\nans = solution()"
    ],
    "298f22aae19b448d8ed281fe1ffd1c6a": [
        "def solution():\n    total_people = 22\n    eddies_position = 12\n    position_from_end = total_people - eddies_position + 1\n    return position_from_end\n\nans = solution()"
    ],
    "73173ea4753941c1aebae06530689d79": [
        "def solution():\n    return 498 + 349\n\nans = solution()"
    ],
    "615a06562ee54cbf883a97926cfa289a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define variables\n    mary, alexis, charlotte_initial, charlotte_final = symbols('mary alexis charlotte_initial charlotte_final')\n\n    # Create equations based on the problem statement\n    equation1 = Eq(mary, 7/5 * alexis)\n    equation2 = Eq(charlotte_final, charlotte_initial + 0.8 * charlotte_initial)\n    equation3 = Eq(mary - 0.2 * mary, charlotte_final + 20)\n    equation4 = Eq(alexis - 0.2 * alexis, charlotte_initial + 0.2 * charlotte_initial)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3, equation4), (mary, alexis, charlotte_initial, charlotte_final))\n\n    # Return the result for alexis\n    return solutions[alexis]\n\nans = solution()"
    ],
    "d56e2d0f4d3c49c09a9d9d2fae148065": [
        "def solution():\n    # Cost of steak per kilogram\n    cost_per_kg = 7.50\n    \n    # Total amount Vani wants to buy in kg\n    total_kg = 3 + 1/2\n    \n    # Total cost for the steak\n    total_cost = cost_per_kg * total_kg\n    \n    # The amount Vani has\n    vani_has = 20\n    \n    # How much more money Vani needs to buy the steak\n    # If she has enough or more, she needs 0 more\n    more_money_needed = max(0, total_cost - vani_has)\n    \n    return more_money_needed\n\nans = solution()"
    ],
    "2294a90b377245e5a243e024c10b9e33": [
        "def solution():\n    # For 13^242, we need to find the pattern in the units digit of powers of 13.\n    # Pattern: 3, 9, 7, 1 and then it repeats every 4 powers\n    # Since 242 % 4 == 2, the units digit of 13^242 is 9.\n\n    # For 17^379, we need to find the pattern in the units digit of powers of 17.\n    # Pattern: 7, 9, 3, 1 and then it repeats every 4 powers\n    # Since 379 % 4 == 3, the units digit of 17^379 is 3.\n\n    # For 4^2012, since the base unit is 4 and 4^2 = 16, all even powers are 6,\n    # Hence, the units of 4^2012 is 6.\n\n    # Now we calculate units of (17^379) * (4^2012)\n    # Units of 17^379 is 3 and units of 4^2012 is 6, so their product has units digit 8.\n\n    # Finally, the addition of units from 13^242 and (17^379 * 4^2012)\n    # Units digit of 13^242 is 9 plus units digit of (17^379 * 4^2012) is 8 equals 17.\n    # The unit digit of 17 is 7.\n\n    # The unit digit of the entire expression is 7.\n    return 7\n\nans = solution()"
    ],
    "099b78e49bc4404ba303b17fc521c8a1": [
        "def solution():\n    return 6.5 + 2.55\n\nans = solution()"
    ],
    "f1a8a109f87844d5bb0f0d3f4dd4d789": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the mass of the light and heavy bowling balls\n    light_ball, heavy_ball = symbols('light_ball heavy_ball')\n    \n    # Create the equations based on the problem statement\n    # Equation for the relation between heavy_ball and light_ball (heavy is twice the light)\n    equation1 = Eq(heavy_ball, 2 * light_ball)\n    # Equation for the total mass of the 12 bowling balls\n    equation2 = Eq(6 * light_ball + 6 * heavy_ball, 65.7)\n    \n    # Solve the system of equations\n    solution = solve((equation1, equation2), (light_ball, heavy_ball))\n    \n    # Extract the mass of a light bowling ball and round to the nearest kg\n    light_ball_mass = round(solution[light_ball])\n    \n    return light_ball_mass\n\nans = solution()"
    ],
    "866c8e678e0948b59e1d7291359716df": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    benson, clive = symbols('benson clive')\n    \n    # Original total amount\n    original_total = Eq(benson + clive, 705)\n    \n    # Amount left after purchases\n    benson_left = benson - 34\n    clive_left = clive - 63\n    \n    # Amount left is the same for both\n    amount_left_equal = Eq(benson_left, clive_left)\n\n    # Solve the equations for benson and clive\n    solutions = solve((original_total, amount_left_equal), (benson, clive))\n\n    return solutions[clive]\n\nans = solution()"
    ],
    "07cef45a5cd34546b160beb5d63ff929": [
        "def solution():\n    scores = [8, 14, 11, 9, 12, 9]\n    average_score = sum(scores) / len(scores)\n    return average_score\n\nans = solution()"
    ],
    "d9fe69458a16475bb892b329f85a2176": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n\n    equation1 = Eq((A + B) / 2, 50)\n    equation2 = Eq((B + C) / 2, 43)\n    equation3 = Eq((A + C) / 2, 45)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    ABC_average = (solutions[A] + solutions[B] + solutions[C]) / 3\n\n    return ABC_average\n\nans = solution()"
    ],
    "1c2eb2be878c46f9abd8fe0eebfe90e0": [
        "def solution():\n    sweets_in_A = 42\n    sweets_in_B = 4 * sweets_in_A\n    sweets_in_C = 2 * sweets_in_B\n    return sweets_in_C\n\nans = solution()"
    ],
    "a3b2b317382c413b950d13170728af7c": [
        "def solution():\n    # Four-digit palindromes are of the form ABBA.\n    # A can be 1-9 (as it can't be 0), and B can be 0-9.\n    # The total number of combinations is therefore 9 * 10.\n    \n    # A can take values from 1 to 9 (as a leading digit cannot be 0)\n    # B can take values from 0 to 9 (as this digit can be 0)\n    count_A = 9\n    count_B = 10\n    \n    # Calculate the number of palindromic numbers as the product\n    ans = count_A * count_B\n    \n    return ans\n\nans = solution()"
    ],
    "0463082fb7794b94ba6e248f5672f584": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jay, denise = symbols('jay denise')\n\n    equation1 = Eq(jay, 6 * denise)\n    equation2 = Eq(jay + denise, 126)\n\n    solutions = solve((equation1, equation2), (jay, denise))\n\n    return solutions[denise]\n\nans = solution()"
    ],
    "a81399939c8c430caa4f5477791e6872": [
        "def solution():\n    return 3192 // 7\n\nans = solution()"
    ],
    "1f147f03ccef4ae3a50a01ccda70772f": [
        "def solution():\n    ans = 18 - 4 * 2 + 3\n    return ans\n\nans = solution()"
    ],
    "0e1222f712bc4ffca972c05b2effd15b": [
        "def solution():\n    # Cost of 5 chocolate bars\n    chocolate_cost = 5 * 1.26\n    # Since 6 cookies cost the same as 5 chocolate bars\n    cookie_cost_per_unit = chocolate_cost / 6\n    \n    # Now, calculate the amount spent on 4 cookies\n    cost_of_4_cookies = 4 * cookie_cost_per_unit\n    \n    # Calculate how much money would be left after buying 4 cookies\n    remaining_money = 9.05 - cost_of_4_cookies\n    return remaining_money\n\nans = solution()"
    ],
    "040686faef95411e8585542ead1f8966": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    equation1 = Eq(boys / 3 + girls / 2, 250)\n    equation2 = Eq(boys + girls, 650)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    return solutions[girls]\n\nans = solution()"
    ],
    "d48e695fe4c940b2acce011d716fb7cb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define symbols for the original number of girls and boys\n    girls, boys = symbols('girls boys')\n    \n    # After 25 girls went outside, girls became 2/3 of the boys\n    equation1 = Eq(girls - 25, 2/3 * boys)\n    \n    # After 15 boys went to play soccer, the number of boys and girls became equal\n    equation2 = Eq(boys - 15, girls - 25)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (girls, boys))\n    \n    # Total number of students is the sum of the original number of girls and boys\n    total_students = solutions[girls] + solutions[boys]\n    \n    return total_students\n\nans = solution()"
    ],
    "a36e566f98e442f5842ab9407dee385e": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):  # Loop through all three-digit numbers\n        if i % 2 == 0:  # Check if the number is even\n            digits = [int(d) for d in str(i)]  # Split into digits\n            if sum(digits) == 8:  # Check if the digits add up to 8\n                count += 1  # Increment the count if all conditions are met\n    return count\n\nans = solution()"
    ],
    "d9c3ed810a164a26992ebd764b6a4339": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variable in the box as x\n    x = symbols('x')\n    \n    # Equation represents 8*11 = x*9 + 34\n    equation = Eq(8*11, x*9 + 34)\n    \n    # Solve for x\n    solution = solve(equation, x)\n    \n    # Return the result\n    return solution[0]\n\n# Call the solution function and store the answer\nans = solution()"
    ],
    "b623a87ccea1499fb63634242cab4656": [
        "def solution():\n    midday_temp = 8\n    drop_in_temp = 12\n    midnight_temp = midday_temp - drop_in_temp\n    return midnight_temp\n\nans = solution()"
    ],
    "b488441291104e42b32567c3545040a8": [
        "def solution():\n    original_price = 6400 / 0.2\n    discount = original_price - 6400\n    return discount\n\nans = solution()"
    ],
    "adcc0ea38c5c483abfaedf299c74cb3f": [
        "def solution():\n    # The value of a 10-cent coin in dollars\n    ten_cent_value = 0.10\n    # The value of a 50-cent coin in dollars\n    fifty_cent_value = 0.50\n\n    # The total value of all coins\n    total_value = 75.90\n\n    # Let the number of 10-cent coins be 8x and the number of 50-cent coins be 3x\n    # Then, the total value is given by this equation: 8x * ten_cent_value + 3x * fifty_cent_value = total_value\n    # Simplifying the equation: 0.8x + 1.5x = 75.90\n    # Solving for x gives us x = total_value / (0.8 + 1.5)\n\n    x = total_value / (ten_cent_value * 8 + fifty_cent_value * 3)\n\n    # The total value of 50-cent coins is then 3x * fifty_cent_value\n    value_of_fifty_cent_coins = 3 * x * fifty_cent_value\n\n    return value_of_fifty_cent_coins\n\nans = solution()"
    ],
    "05b194fb5bbb4281aed3fa88a9af81f6": [
        "def solution():\n    base_area = 7 * 7  # Calculate the area of the bottom base\n    hole_area = 3 * 3  # Calculate the area of the square hole\n    effective_base_area = base_area - hole_area  # Subtract the hole area from base area\n    height = 320 / effective_base_area  # Calculate the height\n\n    return height\n\nans = solution()"
    ],
    "f21d41597e6646d3be1d07eaad6c595f": [
        "def solution():\n    cuts = 0\n    pieces = 1\n    while pieces < 46:\n        pieces += cuts\n        cuts += 1\n    return cuts\n\nans = solution()"
    ],
    "449ef10f90444f13893b5ba270bc69ce": [
        "def solution():\n    x_weight = 1.5\n    balance_equation = 3 * x_weight / 10\n    y_weight = balance_equation\n    return y_weight\n\nans = solution()"
    ],
    "e31b6f292ecc4753a2d83469dc4590f1": [
        "def solution():\n    from math import factorial\n\n    # Since Amy and Judy must sit together, we can treat them as a single unit.\n    # Therefore, we have 7 units to arrange around the table (6 individuals + 1 Amy-Judy unit).\n    # For a circular table, we fix one person and arrange the remaining (7 - 1) units.\n    # So, we need to arrange 6 units.\n    \n    # We can arrange these 6 units in 6! ways.\n    arrangements_6_units = factorial(6)\n    \n    # Amy and Judy can be arranged in 2! = 2 ways as they can swap places within their unit.\n    arrangements_amy_judy = 2\n    \n    # Total number of different orders is the product of the two arrangements.\n    total_arrangements = arrangements_6_units * arrangements_amy_judy\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "3893320e66ba431cbd94be3d97bd7bad": [
        "def solution():\n    return 35 * 24\n\nans = solution()"
    ],
    "871597fa52dc4a36a7d42eaa6aca7343": [
        "def solution():\n    # The sequence is repeating \"1, 2, 3, ..., n\" then starts over from 1 with n+1\n    # the total number of elements in \"1, 2, ..., n\" is n*(n+1)/2\n    # We need to find the maximum n such that n*(n+1)/2 is less than or equal to 2008\n    \n    n = 1\n    while n * (n + 1) // 2 < 2008:\n        n += 1\n    \n    # If n * (n + 1) / 2 is greater than 2008, we decrease n by 1 to find the complete sets\n    if n * (n + 1) // 2 > 2008:\n        n -= 1\n    \n    # Now, calculate the sum of the total number of elements in \"1, 2, ..., n\"\n    total_numbers = n * (n + 1) // 2\n    \n    # The position of the 2008^th number in its final set\n    position_in_set = 2008 - total_numbers\n    \n    # The 2008^th number is equal to the position in its set\n    return position_in_set\n\nans = solution()"
    ],
    "c3a6b54c36ae43b689f9746376889267": [
        "def solution():\n    sequence = range(6, 27, 4)\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "1772deb848c44e73a5983aef50ac6df7": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['3', '5', '9']\n    all_possible_numbers = [''.join(p) for p in permutations(digits, 3)]\n    return len(all_possible_numbers)\n\nans = solution()"
    ],
    "d18ff02cbbaf44fa82bc520bd52cd64e": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10):  # The first digit cannot be zero in a three-digit number\n        for x2 in range(10):  # The second digit can be zero\n            for x3 in range(10):  # The third digit can be zero\n                if x1 + x2 + x3 == 5:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "102d1f62f1754310866b41a5ade5f3d8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    tomatoes, cucumbers = symbols('tomatoes cucumbers')\n\n    equation = Eq(tomatoes, 3 * cucumbers + 3)\n\n    solutions = solve((equation, Eq(tomatoes, 27)), (tomatoes, cucumbers))\n\n    return solutions[cucumbers]\n\nans = solution()"
    ],
    "a669b2ca57f844deb0cba08516ef70d7": [
        "def solution():\n    total_bags = 15\n    given_away = total_bags // 3\n    remaining = total_bags - given_away\n    return remaining\n\nans = solution()"
    ],
    "2f72bb76e3534c5eb2dc23ed6c53c0ad": [
        "def solution():\n    total_sum = 0\n    start = 2\n    end = 100\n    difference = 5 \n\n    # Iterate through the range and sum numbers that \n    # leave a remainder of 2 when divided by 5\n    for number in range(start, end+1, difference):\n        total_sum += number\n    \n    return total_sum\n\nans = solution()"
    ],
    "36f6ee82d6634a45b07c1a4564134d1c": [
        "def solution():\n    n = 31  # Total nights\n    d = 6  # Common difference\n    # The value of the 16th term is given as 100 which is a_n\n    a_n = 100\n    n_th = 16  # The nth term, which in this case is the 16th night\n    \n    # Calculate the first term using the formula for the nth term of an arithmetic sequence: a_n = a_1 + (n_th - 1) * d\n    a_1 = a_n - (n_th - 1) * d\n    \n    # The sum of the arithmetic sequence can be calculated with the formula: S_n = n/2 * (a_1 + a_n)\n    # But since we don't have the last term a_n directly, we use the formula that relates a_1 and d: S_n = n/2 * (2*a_1 + (n-1)*d)\n    S_n = n / 2 * (2 * a_1 + (n - 1) * d)\n    \n    return int(S_n)\n\nans = solution()"
    ],
    "e9072c6898d44fc28e315a6cd5657cfa": [
        "from itertools import permutations\n\ndef solution():\n    # iterate over all possible permutations of 3 digits\n    for perm in permutations(range(10), 3):\n        A, B, C = perm\n        # skip permutations where A is 0 because we need a non-zero digit for the hundreds place\n        if A == 0:\n            continue\n        # combine digits to form the 3-digit number\n        ABC = A * 100 + B * 10 + C\n        # if condition satisfies, return value\n        if ABC % A == 0 and ABC % B == 0 and ABC % C == 0:\n            return ABC\n\nans = solution()"
    ],
    "fb0a5cc20da34586a21b00309dee0247": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 5):\n        A, B, C, D, E = perm\n        ABAC = 1000 * A + 100 * B + 10 * A + C\n        DBEC = 1000 * D + 100 * B + 10 * E + C\n        ACEDC = 10000 * A + 1000 * C + 100 * E + 10 * D + C\n        if ABAC + DBEC == ACEDC:\n            return DBEC\n\nans = solution()"
    ],
    "c2a0bced20654e69a37a8243f7a0a817": [
        "def solution():\n    ans = 1.6 + 2.3 + 3.4 + 12.2 + 5.7 - 2.2\n    return ans\n\nans = solution()"
    ],
    "9391ddf6c35a4fde8892b40958afa033": [
        "def solution():\n    a = 64\n    b = 36\n    result = (a + b) * (a - b)\n    return result\n\nans = solution()"
    ],
    "8fc9c10f7d7b46d7b2146cde6378f1ae": [
        "def solution():\n    # To ensure victory, Chris should always aim to leave a multiple of 3 on the table after his turn.\n    # This way, no matter whether Dylan picks 1 or 2 matches, Chris can always pick in such a way to bring\n    # the number back to a multiple of 3.\n    \n    # He wants to force Dylan into a position where 3 matches are left after Dylan's turn.\n    # Starting with 7 matches, Chris needs to remove matches so that:\n    # - If he removes 1 match, 6 matches are left (multiple of 3)\n    # - If he removes 2 matches, there would be 5, which wouldn't be a multiple of 3.\n    \n    # Thus, Chris should remove 1 match on his first turn.\n    return 1\n\nans = solution()"
    ],
    "d32e98ac3f874eebacbd202b7baa856f": [
        "def solution():\n    start_time = (9 * 60) + 23  # Convert 9.23am to minutes\n    end_time = (13 * 60) + 6    # Convert 1.06pm to minutes (note: 1pm is 13:00 in 24hr format)\n    return end_time - start_time\n\nans = solution()"
    ],
    "8321d60a92fb4651bd00bbee4c13a137": [
        "def solution():\n    choices = 1 # Starting with one choice\n    for day in range(7):\n        choices *= (day + 2) # Each day he has one more choice than the previous day\n    return choices\n\nans = solution()"
    ],
    "14fb2dfc36d7462d9626934b2a9875a3": [
        "def solution():\n    # The sequence is symmetric around the central number 9\n    # Thus the sum can be computed by doubling the sum of numbers from 1 to 8 and adding nine\n\n    sum_to_8 = sum(range(1, 9))\n    total_sum = 2 * sum_to_8 + 9\n\n    return total_sum\n\nans = solution()"
    ],
    "067406b4f4a04fa6a7916a17ca92b1ad": [
        "def solution():\n    return 6.6 * 30\n\nans = solution()"
    ],
    "7da62cc10f93447ebd5250a89d0612a9": [
        "def solution():\n    distance = 48\n    speed = 8\n    correct_time = distance / speed\n\n    return correct_time\n\nans = solution()"
    ],
    "d4673ee1fc2f411f9eea5d8fc0e540a6": [
        "def solution():\n    sum = 0\n    for i in range(53, 22, -6):\n        sum += i - (i-3)\n    return sum\n\nans = solution()"
    ],
    "3947062555df4a428b3e6b98a885d729": [
        "def solution():\n    # Let's denote n as the cost of a notebook, p as the cost of a pencil case,\n    # and e as the cost of an eraser.\n\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    n, p, e = symbols('n p e')\n\n    # Define the equations based on the problem statement\n    total_cost_eq = Eq(3*n + 4*p + 5*e, 50)  # Angel's total spending\n    notebook_pencil_case_eq = Eq(n + p, 6)    # Cost of a notebook and a pencil case\n    pencil_case_eraser_eq = Eq(p + e, 8)      # Cost of a pencil case and an eraser\n\n    # Solve the system of equations\n    solutions = solve((total_cost_eq, notebook_pencil_case_eq, pencil_case_eraser_eq), (n, p, e))\n\n    # Extract the cost of the pencil case\n    pencil_case_cost = solutions[p]\n\n    return pencil_case_cost\n\nans = solution()"
    ],
    "c17044f418d74fb09f393b68cc8342fd": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations(range(10), 4):\n        A, E, _, _ = p\n        if A != 0:\n            num = A * 1000 + E * 110 + A\n            if len(set(str(num))) == 2:\n                return num\nans = solution()"
    ],
    "85353e1815e64de9b01672fd4faa3880": [
        "def solution():\n    total_family_members = 4\n    average_age = 25\n    harry_age = 14\n    mom_age = 36\n    sister_age = 10\n\n    total_age = total_family_members * average_age\n    dad_age = total_age - (harry_age + mom_age + sister_age)\n\n    return dad_age\n\nans = solution()"
    ],
    "467fa0f0921245c98f8470b073242438": [
        "def solution():\n    ans = 16.4 / 20\n    return ans\n\nans = solution()"
    ],
    "006b398886584c478594347960619995": [
        "def solution():\n    # Convert all measurements to the same unit, here we choose centimeters (cm)\n    measurements_cm = [8300, 200, 8, 50]\n    # Classroom doors are usually around 200 cm in height\n    classroom_door_height_cm = 200\n    \n    # Find the measurement closest to the standard classroom door height\n    closest_measurement = min(measurements_cm, key=lambda x: abs(x - classroom_door_height_cm))\n    \n    return closest_measurement\n\nans = solution()"
    ],
    "30df93da324249439f56623ab48606d3": [
        "def solution():\n    return 6.48 / 6\n\nans = solution()"
    ],
    "2132f99db9344be4a83936b1da90a005": [
        "def solution():\n    remaining_after_lunch = 1 - (5/12)\n    remaining_after_dinner = 1 - (2/7)\n    \n    final_remaining = remaining_after_lunch * remaining_after_dinner\n    initial_amount = 45 / final_remaining\n    \n    return initial_amount\n\nans = solution()"
    ],
    "d795930cfe064a999cc8e819cdf13cda": [
        "def solution():\n    total_digits = 450\n    pages = 0\n    digits_used = 0\n\n    # Count digits used by single, double, and triple digit page numbers\n    for digits_per_page in range(1, 4):  # Up to 3 digits\n        pages_with_same_digits = 9 * (10 ** (digits_per_page - 1))\n        if digits_used + (pages_with_same_digits * digits_per_page) > total_digits:\n            break\n        digits_used += pages_with_same_digits * digits_per_page\n        pages += pages_with_same_digits\n\n    # Count the remaining pages\n    pages += (total_digits - digits_used) // digits_per_page\n\n    return pages\n\nans = solution()"
    ],
    "9df2844209ab4b48bb9e7656aff7a72a": [
        "def solution():\n    total_games = 5 * (5 - 1) // 2  # Total number of games played in the tournament\n    won_games = 2 + 1 + 4 + 3       # Total games won by Lily, Eva, Tina, and Emma\n    gina_wins = total_games - won_games  # Games won by Gina\n\n    return gina_wins\n\nans = solution()"
    ],
    "d94b3c942f214ed29b7cb5c2b4f59231": [
        "def solution():\n    numbers = [12, 6, 9, 21, 7, 23]\n    largest_number = max(numbers)\n    smallest_number = min(numbers)\n    difference = largest_number - smallest_number\n    ans = 2 * difference\n    return ans\n\nans = solution()"
    ],
    "c0bcad55039843688a280266a75e3093": [
        "def solution():\n    digits_per_page = 0\n    total_digits = 1524\n    page = 0\n\n    while total_digits > digits_per_page:\n        page += 1\n        if page < 10:\n            digits_per_page += 1\n        elif page < 100:\n            digits_per_page += 2\n        elif page < 1000:\n            digits_per_page += 3\n        else:\n            digits_per_page += 4\n        total_digits -= digits_per_page\n\n    return page\n\nans = solution()"
    ],
    "39ac13b16ca64d7da0d126da55ae389f": [
        "def solution():\n    shirt_price = 5\n    bag_price = 10\n    total_spent = 300\n    \n    # Calculate the price for one group (4 shirts + 1 bag)\n    group_price = (4 * shirt_price) + bag_price\n    \n    # Calculate the number of groups\n    num_groups = total_spent // group_price\n    \n    # Calculate the number of shirts bought\n    shirts_bought = num_groups * 4\n    \n    # Marcus' mistake: He multiplied the number of groups by 1 instead of 4.\n    return shirts_bought\n\nans = solution()"
    ],
    "104e0f1c1be44d5eb09a1de0f61c9249": [
        "def solution():\n    import math\n    from sympy import symbols, Eq, solve\n    \n    # Given values\n    theta = math.radians(20)  # Convert angle from degrees to radians\n    distance = 400            # 400 m\n    mu_k = 0.2               # Coefficient of kinetic friction\n    g = 9.81                 # Acceleration due to gravity (m/s^2)\n    \n    # Resolve the forces into parallel and perpendicular components\n    # Force of gravity parallel to the slope\n    Fg_parallel = symbols('Fg_parallel')\n    equation = Eq(Fg_parallel, math.sin(theta) * g)\n    Fg_parallel = solve(equation, Fg_parallel)[0]\n    \n    # Normal force is equal to the force of gravity perpendicular to the slope\n    Fn = symbols('Fn')\n    equation = Eq(Fn, math.cos(theta) * g)\n    Fn = solve(equation, Fn)[0]\n    \n    # Force of friction\n    F_friction = mu_k * Fn\n    \n    # Net force along the slope due to gravity and friction\n    F_net = Fg_parallel - F_friction\n    \n    # Using the kinematic equation: v^2 = u^2 + 2*a*s\n    # where u(initial velocity) = 0, a(net acceleration), s(distance)\n    # Net acceleration a = F_net / m, but mass m cancels out in the equation\n    \n    acceleration = F_net    # Since mass cancels out\n    u = 0                   # Initial velocity is 0 (starting from rest)\n    s = distance            # The distance skied\n    \n    # Calculate final speed (v) at the bottom of the slope\n    v = symbols('v')\n    kinematic_eq = Eq(v**2, u**2 + 2*acceleration*s)\n    \n    # Solve for v\n    v = solve(kinematic_eq, v)\n    \n    # We take the positive root as speed cannot be negative\n    v_final = max(v)\n    \n    return v_final\n\nans = solution()"
    ],
    "18b4e19a2a474b58a2286cdb4391548c": [
        "def solution():\n    # Let x be the number of correct answers by Avril\n    # Therefore, Eddie has x + 3 correct answers (because Eddie has 15 more points, and 1 correct answer is 10 points)\n    # Each wrong answer results in a loss of 5 points, so we convert the wrong answers to negative points\n\n    # The total points Avril can get is 10x - 5(10 - x) for 10 total questions\n    # The total points Eddie can get is 10(x + 3) - 5(10 - (x + 3))\n\n    # The total points combined is 155 which is the sum of Avril's and Eddie's points: \n    # 10x - 5(10 - x) + 10(x + 3) - 5(10 - (x + 3)) = 155\n\n    # Solving the equation for x\n    for x in range(11):  # Avril can only answer between 0 and 10 questions correctly\n        avril_score = 10 * x - 5 * (10 - x)\n        eddie_score = 10 * (x + 3) - 5 * (10 - (x + 3))\n        if (avril_score + eddie_score) == 155:\n            return x\n\nans = solution()"
    ],
    "6045ecc17a8240cf847e28c4ca7327a7": [
        "def solution():\n    # Work rates for teams of men and women\n    men_rate_per_day = 1 / (6 * 5)  # Work done by 6 men in 1 day\n    women_rate_per_day = 1 / (5 * 6)  # Work done by 5 women in 1 day\n\n    # Combined work rates for 10 men and 5 women\n    combined_rate_per_day = 10 * men_rate_per_day + 5 * women_rate_per_day\n\n    # Total time required to complete the job by 10 men and 5 women\n    total_days = 1 / combined_rate_per_day\n\n    return total_days\n\nans = solution()"
    ],
    "9a8905e262ef43708efc95e6c13e0dd2": [
        "def solution():\n    from math import gcd\n\n    # weights of different types of coffee beans\n    A = 56\n    B = 96\n    C = 120\n\n    # greatest common divisor for A, B, and C\n    greatest_mass = gcd(gcd(A, B), C)\n\n    return greatest_mass\n\nans = solution()"
    ],
    "3e2ad7353ee34db7941ef7f4ec470ad8": [
        "def solution():\n    n = 35\n    factors = [i for i in range(1, n + 1) if n % i == 0]\n    ans = sum(factors)\n    return ans\n\nans = solution()"
    ],
    "3028ecd60fde4f939707e80ce57d6888": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n\n    initial_condition = Eq(boys, 3 * girls)\n    after_change_condition = Eq(boys - 12, girls + 20)\n\n    solutions = solve((initial_condition, after_change_condition), (boys, girls))\n\n    return solutions[boys]\n\nans = solution()"
    ],
    "16622798daa848ff8e9a99b6b623c518": [
        "def solution():\n    # Let's start by giving one apple to each child since each must get at least one\n    apples_left = 30 - 6  # We distribute one apple to each child initially\n\n    # Now, we have 24 apples left and 6 children\n    # If we want to minimize the number of apples for the kid who gets the most,\n    # we would distribute the apples as evenly as possible among the first 5 children,\n    # leaving as few as possible to the sixth child.\n\n    # Distribute apples as evenly as possible to 5 children\n    apples_per_child = apples_left // 5\n    max_apples_to_sixth_child = apples_per_child + apples_left % 5\n\n    # We add one because we already gave one apple to each child initially\n    return max_apples_to_sixth_child + 1\n\nans = solution()"
    ],
    "12f08cb98de1436099e711b0564dfc03": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apples, bananas, oranges = symbols('apples bananas oranges')\n\n    ratio_equation = Eq(apples + 2*bananas + 3*oranges, 24)\n    banana_equation = Eq(bananas, 2*apples)\n    orange_equation = Eq(oranges, 3*apples)\n\n    solutions = solve((ratio_equation, banana_equation, orange_equation), (apples, bananas, oranges))\n\n    return solutions[bananas]\n\nans = solution()"
    ],
    "f8678d8e2b9d4dccb1911a70b2606122": [
        "def solution():\n    # Assuming all are chickens (i.e., 2 legs each), compute the total legs\n    total_chickens = 12\n    total_legs_assumed = total_chickens * 2\n\n    # Calculate the difference in the actual total legs and the assumed legs\n    extra_legs_needed = 34 - total_legs_assumed\n\n    # Since rabbits have 2 extra legs compared to chickens,\n    # the number of extra legs needed divided by 2 gives the number of rabbits\n    num_rabbits = extra_legs_needed // 2\n\n    return num_rabbits\n\nans = solution()"
    ],
    "70660cca1f444b77bd1bdaba3f54255b": [
        "def solution():\n    sugar_weight = 55\n    water_weight = 220\n    total_weight = sugar_weight + water_weight\n\n    concentration = (sugar_weight / total_weight) * 100\n\n    return concentration\n\nans = solution()"
    ],
    "eeb7e226b5c04108bc05a1e3a95a4b52": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    years = symbols('years')\n    # Anna's age in years' time = 8 + years\n    # Her mother's age in years' time = 44 + years\n    # In years' time, her mother will be 3 times as old as Anna:\n    # 44 + years = 3 * (8 + years)\n    equation = Eq(44 + years, 3 * (8 + years))\n    ans = solve(equation, years)[0]\n    return ans\n\nans = solution()"
    ],
    "5a83ea2badba4c79826ff79d1735c1b3": [
        "def solution():\n    # Convert May's total ribbon length from meters to centimeters\n    may_total_ribbon_length = (2.4 * 100) + (18 * 70)  # Nancy's total length + 2.4 meters converted to cm\n\n    # Length of May's short ribbons\n    may_short_ribbon_length = 7 * 40\n\n    # Our equation will be:\n    # may_short_ribbon_length + (long_ribbon_count * 70) = may_total_ribbon_length\n    # Now, we need to calculate the number of long ribbons May has\n    long_ribbon_count = (may_total_ribbon_length - may_short_ribbon_length) / 70\n\n    # May's total number of ribbons is the sum of her short and long ribbons\n    may_total_ribbons = 7 + long_ribbon_count\n\n    # Return the total number of ribbons May has as an integer\n    return int(may_total_ribbons)\n\nans = solution()"
    ],
    "673c1a85dd1346948a16344e5724859d": [
        "def solution():\n    ans = (2.4 * 52 / 100) + (7.6 * 52 / 100)\n    return ans\n\nans = solution()"
    ],
    "0c6f163b77d54e46bc6a8eadb82bfd9d": [
        "def solution():\n    for num in range(99, 9, -1):\n        if (num - 3) % 4 == 0 and (num - 3) % 5 == 0:\n            return num\n    return None\n\nans = solution()"
    ],
    "12caf8fca32e42febe42dd8469b710c0": [
        "def solution():\n    return 345 * 67\n\nans = solution()"
    ],
    "c2b040f49df54d38991df78d71cf954e": [
        "def solution():\n    total_paint = 1  # 1 litre of total 'Purple Fire' paint\n    ratio_sum = 3 + 1  # Sum of the parts of the ratio\n    red_part = 3  # Parts of the ratio that correspond to the red paint\n\n    red_paint = (red_part / ratio_sum) * total_paint\n\n    return red_paint\n\nans = solution()"
    ],
    "48066947c0b143dfbd61973b59fefc94": [
        "def solution():\n    total_money = 68\n    given_away = total_money / 4\n    money_left = total_money - given_away\n    return money_left\n\nans = solution()"
    ],
    "a73aefc56ebe4450b1c222659aca3dbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B = symbols('A B')\n\n    equation1 = Eq(A - 40, B + 40)\n    equation2 = Eq(A + 40, 3 * (B - 40))\n\n    solutions = solve((equation1, equation2), (A, B))\n\n    return solutions[A]\n\nans = solution()"
    ],
    "b86990b313b04b95b9eb607238d03c25": [
        "def solution():\n    # List of given numbers with a placeholder for the missing number\n    numbers = [9, 7, 5, 8, 4, 1, 8]\n\n    # Calculate the current total of the given numbers\n    current_total = sum(numbers)\n\n    # Since the mean of all eight numbers is 6, multiply the mean by the number of values to find the total sum\n    required_total = 6 * 8\n\n    # Find the missing number by subtracting the current total from the required total\n    missing_number = required_total - current_total\n\n    return missing_number\n\nans = solution()"
    ],
    "e3a1d4b27da044ddad1173a844dfb144": [
        "def solution():\n    total_balls = 18\n    # Let's say the number of red balls is x\n    # Then, the number of blue balls is 2x\n    # Red and blue balls add up to total balls: x + 2x = total_balls\n    # This simplifies to 3x = total_balls\n    # So, x = total_balls / 3\n\n    red_balls = total_balls // 3\n    blue_balls = 2 * red_balls\n\n    return blue_balls\n\nans = solution()"
    ],
    "cacebdbc3369444fbebd09e2767b8146": [
        "def solution():\n    return 53 * 84\n\nans = solution()"
    ],
    "db9996863bc84afb88970ac5c70f87dc": [
        "def solution():\n    # According to the problem, (number of cows) * (number of days) = constant amount of grass\n    # Let's call the constant K.\n\n    # 8 cows * 10 days = K\n    # 4 cows * 15 days = K\n    # We want to find the number of cows for 5 days, so let's call this number \"x\".\n    # x cows * 5 days = K\n\n    # From the first two equations, we can assume 8 * 10 = 4 * 15\n    # Therefore, K = 8 * 10 = 4 * 15 = 80 units of grass\n\n    K = 8 * 10  # or 4 * 15, both are equal to 80\n\n    # x * 5 days = K\n    # x = K / 5\n\n    x = K / 5\n\n    return x\n\nans = solution()"
    ],
    "7886d22ab5aa4161949641294c6c9ba5": [
        "def solution():\n    total_cost = 83\n    tape_cost = 9\n    tape_total_cost = 3 * tape_cost\n    cd_cost = (total_cost - tape_total_cost) / 4\n    return cd_cost\n\nans = solution()"
    ],
    "9f599323c52a4223810c1c60a307e07c": [
        "def solution():\n    total_mass_for_12_packets = 1.02  # kg\n    mass_of_one_packet = total_mass_for_12_packets / 12\n    total_mass_for_4_packets = mass_of_one_packet * 4\n    return total_mass_for_4_packets\n\nans = solution()"
    ],
    "a6e717d16ac04cf9b2916acf56c1b7e0": [
        "def solution():\n    # To find the least possible number of apples for the kid who gets the most,\n    # We need to distribute the apples as evenly as possible first\n    # Starting with the situation where the maximum number is minimized\n\n    # Start by giving each child one apple, which is the minimum they can get.\n    total_apples = 50\n    apples_distributed = 8  # Each child gets at least one\n    remaining_apples = total_apples - apples_distributed\n    min_diff = 1  # The minimum difference in apples between any two kids\n\n    # Distribute the remaining apples ensuring each child gets one more apple than the previous\n    # until we no longer can continue this pattern\n    kids = [1] * 8  # Start with each child having one apple\n    i = 7  # Start from the child supposed to get the most\n\n    while remaining_apples > 0:\n        # Distribute one apple at a time to maintain minimum difference\n        for j in range(i, -1, -1):  # Distribute to each child in decreasing order of apples\n            if remaining_apples > 0:\n                kids[j] += min_diff  # Give one more apple to the j-th child\n                remaining_apples -= min_diff  # Decrement the count of remaining apples\n            if remaining_apples <= i - j:  # Check if enough apples remain to maintain the pattern\n                break\n        i -= 1  # Reduce the index to start from the next child\n\n    # Now we have distributed the apples with the least maximum\n    # The child with the most apples is the last child in the list\n    most_apples = max(kids)\n\n    return most_apples\n\nans = solution()"
    ],
    "857fbe5325ea47fa86a2d4c017f4e01b": [
        "def solution():\n    incorrect_divisor = 122\n    incorrect_result = incorrect_divisor * 99.396\n\n    correct_divisor = 1.22\n    correct_result = incorrect_result / correct_divisor\n\n    return correct_result\n\nans = solution()"
    ],
    "dc7c1534320d4d5cbcc1d4abeb592b2c": [
        "def solution():\n    ans = (35 - 8) / 3\n    return ans\n\nans = solution()"
    ],
    "83961d28b4bb455eb81f2d3b79db70dc": [
        "def solution():\n    n = 1.7 * 1000\n    return n\n\nans = solution()"
    ],
    "8c47f81c09cb40598f99de91467025a0": [
        "def solution():\n    from math import gcd\n    \n    boys = 28\n    girls = 32\n    \n    greatest_common_divisor = gcd(boys, girls)\n\n    return greatest_common_divisor\n\nans = solution()"
    ],
    "ff48944eb4344d26a3b5d1bf2e5d6209": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    hisham, melissa = symbols('hisham melissa')\n    total_cards = 876\n    \n    # Equation: Melissa has twice as many cards as Hisham\n    eq1 = Eq(melissa, 2 * hisham)\n    \n    # Equation: The total number of cards is 876\n    eq2 = Eq(hisham + melissa, total_cards)\n    \n    # Solve the system of equations\n    sol = solve((eq1, eq2), (hisham, melissa))\n    \n    hisham_cards = sol[hisham]\n    melissa_cards = sol[melissa]\n    \n    # Calculate how many cards Melissa should give to Hisham for both to have the same number\n    cards_to_give = (melissa_cards - hisham_cards) / 2\n\n    return cards_to_give\n\nans = solution()"
    ],
    "040b8caf172f41a7bcb2b377bf7ecd95": [
        "def solution():\n    # Given sequence:\n    # a, b, a+b, a+2b, 2a+3b, 3a+5b\n    # where the fourth number is 6, and the sixth number is 15\n    \n    # Hence we have two equations:\n    # a + 2b = 6 (1)\n    # 3a + 5b = 15 (2)\n\n    # Solve these two equations for a and b:\n    # Multiplying equation (1) by 3 gives: 3a + 6b = 18 (3)\n    # Subtracting equation (2) from equation (3) gives: b = 18 - 15 => b = 3\n\n    # Substitute b=3 in equation (1):\n    # a + 2*3 = 6 => a + 6 = 6 => a = 0\n\n    # Now we know that a=0 and b=3, we can calculate the seventh number:\n    # 5a + 8b => 5*0 + 8*3 = 24\n    \n    return 24\n\nans = solution()"
    ],
    "57c4f3985bb74c62b7740a2f0c3435eb": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['4', '7', '5', '8', '3']\n    min_odd_number = float('inf')\n    for perm in permutations(digits):\n        num = int(''.join(perm))\n        if num % 2 != 0 and num < min_odd_number:\n            min_odd_number = num\n    return min_odd_number\n\nans = solution()"
    ],
    "b4d1c1eb568e4c288faeed345d1531ee": [
        "def solution():\n    count = 0\n    for number in range(41):\n        if '2' in str(number):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0b7e4617d9c047468385d1998eb2f78f": [
        "def solution():\n    sum_series = 0\n    for k in range(7):\n        numerator = 36\n        denominator = (1 + k*5) * (6 + k*5)\n        sum_series += numerator / denominator\n    return sum_series\n\nans = solution()"
    ],
    "5da353b85f0d48589f3c7704501b8d05": [
        "def solution():\n    bill_coins = 20\n    jim_coins = 4 * bill_coins\n    return jim_coins\n\nans = solution()"
    ],
    "bfde09b81d63442bb7d2bdc77be0b501": [
        "def solution():\n    # For n rectangles, the maximum number of regions (R) that can be formed is given by:\n    # R = n^2 + n + 1\n    # This is based on the recursive pattern observed for 1, 2, 3, ... rectangles\n    n = 4  # number of rectangles\n    ans = n**2 + n + 1\n    return ans\n\nans = solution()"
    ],
    "4c3f6d76550f4f3089cbf74b0f3d3fa9": [
        "def solution():\n    # 24 men complete the job in 16 days\n    # so, 1 man's one day work is 1 / (24 * 16)\n    man_one_day = 1 / (24 * 16)\n    \n    # 16 women complete the job in 24 days\n    # so, 1 woman's one day work is 1 / (16 * 24)\n    woman_one_day = 1 / (16 * 24)\n    \n    # 10 men and 6 women will do the following in one day:\n    combined_one_day = 10 * man_one_day + 6 * woman_one_day\n    \n    # they can complete the job in:\n    days_to_complete = 1 / combined_one_day\n    return days_to_complete\n\nans = solution()"
    ],
    "5c7b9ce1905d45469426790e5ddb9e0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    julie, marion, ethan = symbols('julie marion ethan')\n\n    equation1 = Eq(marion, 2 * julie)\n    equation2 = Eq(ethan, 5 * julie)\n    equation3 = Eq(ethan - marion, 168)\n\n    solutions = solve((equation1, equation2, equation3), (julie, marion, ethan))\n\n    total_earnings = solutions[julie] + solutions[marion] + solutions[ethan]\n\n    return total_earnings\n\nans = solution()"
    ],
    "3581c52ad5c34fea8de834f138a507fc": [
        "def solution():\n    # This is a geometric sequence, so the ratio between terms is constant\n    # We can find the ratio by dividing the last term by the term before it\n    ratio = 12 / 24\n\n    # Now using the ratio, we can find the missing number 'n' by multiplying it with the term after 'n', which is 24\n    n = 24 / ratio\n\n    return int(n)\n\nans = solution()"
    ],
    "17f689a51b1e456cbd853cbb42f52f25": [
        "def solution():\n    from math import factorial\n\n    total_people = 5\n    positions_for_eddie = total_people - 1  # Eddie does not want to be in the middle so he has 4 positions to choose from\n    ways_to_arrange_others = factorial(total_people - 1)  # the ways to arrange the other 4 family members\n    \n    total_ways = positions_for_eddie * ways_to_arrange_others\n    \n    return total_ways\n\nans = solution()"
    ],
    "9ea5b71855a94cfe9466fe43ab256389": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations('123456789'):\n        num = int(''.join(p))\n        if num % 11 == 0:\n            return num\n\nans = solution()"
    ],
    "6567f6570a0b4d6caced46d83395da96": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    money = symbols('money')\n    \n    # Spending 1/3 of the money on a watch\n    watch_cost = money / 3\n    \n    # Spending $56 on a tie\n    tie_cost = 56\n    \n    # Left with 3/8 of the original money\n    remaining_money = money * (3/8)\n    \n    # Equation representing initial money - (watch cost + tie cost) = remaining money\n    equation = Eq(money - (watch_cost + tie_cost), remaining_money)\n    \n    # Solve the equation to find the amount of money Hamid had at first\n    money_solution = solve(equation, money)\n    \n    # Find how much Hamid spent altogether\n    total_spent = watch_cost + tie_cost\n    \n    # Substitute the solution back into the total spent expression\n    total_spent_value = total_spent.subs(money, money_solution[0])\n    \n    return total_spent_value\n\nans = solution()"
    ],
    "7d867d91c93842129d709466df2f1adc": [
        "from itertools import product\n\ndef solution():\n    operations = ['+', '*']\n    max_value = 0\n    \n    for ops in product(operations, repeat=3):\n        expression = \"1{}2{}3{}4\".format(*ops)\n        value = eval(expression)\n        max_value = max(max_value, value)\n        \n    return max_value\n\nans = solution()"
    ],
    "934469ea45974c6ba8322d85bcd538d4": [
        "def solution():\n    eddie_speed = 3  # Eddie's speed in m/s\n    train_speed = 57  # Train's speed in m/s\n    time_to_pass = 10  # Time it takes for the train to pass Eddie in seconds\n\n    # Relative speed of the train with respect to Eddie\n    relative_speed = train_speed + eddie_speed\n\n    # Length of the train, which is the distance it covers relative to Eddie in the given time\n    train_length = relative_speed * time_to_pass\n\n    return train_length\n\nans = solution()"
    ],
    "805758debabb4563927203c5d2eba2d2": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    # congruences: (remainder, modulus)\n    congruences = [(1, 5), (2, 7), (3, 9)]\n\n    # applying the Chinese Remainder Theorem\n    ans = solve_congruence(*congruences)[0]\n    return ans\n\nans = solution()"
    ],
    "e97cf0638a05496c87c776dfee4ba7b6": [
        "def solution():\n    total_marks = 63\n    correct_mark = 8\n    incorrect_deduction = -3\n    total_questions = 12\n\n    for correct_answers in range(total_questions + 1):\n        incorrect_answers = total_questions - correct_answers\n        if correct_answers * correct_mark + incorrect_answers * incorrect_deduction == total_marks:\n            return correct_answers\n\nans = solution()"
    ],
    "d57fcf981d694db99854d4d2d0775618": [
        "def solution():\n    a, b = 3, 10\n    for _ in range(1995):\n        a, b = b, (a + b) % 3  # Only care about the remainder when divided by 3\n    return a\n\nans = solution()"
    ],
    "4543b18126fb4fdb9c0d73c1c80f65f8": [
        "def solution():\n    train_length = 700  # The length of the train in meters\n    bridge_length = 900  # The length of the bridge in meters\n    speed = 400  # The speed of the train in meters per minute\n\n    # The total distance to be covered is the length of the train plus the length of the bridge\n    total_distance = train_length + bridge_length\n\n    # Time taken is total distance divided by speed\n    time_taken = total_distance / speed  # Time in minutes\n    \n    return time_taken\n\nans = solution()"
    ],
    "e6c04a41ffe547dfa735b74e506279e7": [
        "def solution():\n    peter_age = 45\n    pip_age = 7\n    pit_age = 14\n    \n    while peter_age != pip_age + pit_age:\n        peter_age += 1\n        pip_age += 1\n        pit_age += 1\n        \n    return peter_age\n\nans = solution()"
    ],
    "8b46eeb4c87f4598815e931b7d5d7fb1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    hazel_current_age, mom_current_age = symbols('hazel_current_age mom_current_age')\n\n    # In 12 years, Hazel will be three times her current age\n    equation1 = Eq(hazel_current_age + 12, 3 * hazel_current_age)\n    \n    # On Hazel's 18th birthday, her mom will be three times her age then\n    hazel_18th_age = 18\n    equation2 = Eq(mom_current_age + (hazel_18th_age - hazel_current_age), 3 * hazel_18th_age)\n\n    solutions = solve((equation1, equation2), (hazel_current_age, mom_current_age))\n\n    return solutions[mom_current_age]\n\nans = solution()"
    ],
    "2379196da153459db255aa3aea3155e9": [
        "def solution():\n    ans = 1.25 * 47 * 8\n    return ans\n\nans = solution()"
    ],
    "3147e744aa374d87a759f9e0a3b9f01c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'p' represent the initial number of stickers Peter had.\n    p = symbols('p')\n    \n    # Sam had ‘p + 40’ stickers initially.\n    # Sam gave Peter 20% of his stickers, which is 0.2 * (p + 40)\n    # Peter gave Sam 25% of his stickers, which is 0.25 * p\n    \n    # After the exchange, Sam has 'p + 40 - 0.2 * (p + 40) + 0.25 * p'\n    # After the exchange, Peter has 'p + 0.2 * (p + 40) - 0.25 * p'\n    # Sam had 96 stickers more than Peter in the end, which gives us the equation:\n    # p + 40 - 0.2 * (p + 40) + 0.25 * p = p + 0.2 * (p + 40) - 0.25 * p + 96\n    \n    # Solving for 'p'\n    equation = Eq(p + 40 - 0.2 * (p + 40) + 0.25 * p, p + 0.2 * (p + 40) - 0.25 * p + 96)\n    initial_stickers_peter = solve(equation, p)\n\n    return initial_stickers_peter[0]\n\nans = solution()"
    ],
    "14a74e5e758a457ebd877eab88a12538": [
        "def solution():\n    n = 10\n    sum_of_series = sum(range(1, n+1))\n    return sum_of_series**2\n\nans = solution()"
    ],
    "ffa814576b094530af15324d4a55a06c": [
        "def solution():\n    ans = 2616 // 6\n    return ans\n\nans = solution()"
    ],
    "001ad7f411fa4eb8b4910ab06fd33b1c": [
        "def solution():\n    n = 60  # number of terms in the arithmetic sequence\n\n    # Let's denote the first term of the sequence as 'a'\n    # and the common difference as 'd'.\n\n    # Sum of the first 5 terms is 10\n    # S_5 = 5/2 * [2a + (5 - 1)d] = 10\n    sum_first_5 = 10\n\n    # Sum of the last 5 terms is 120\n    # S_last_5 = 5/2 * [2(a + (n - 1)d) - 4d] = 120\n    sum_last_5 = 120\n\n    # By solving these two equations we can find 'a' and 'd'\n\n    # From the sum of the first 5 terms:\n    # a + 2d = 4  (equation 1)\n\n    # From the sum of the last 5 terms, we need the term before the last 5 terms which is (n-6)th term:\n    # a + (n-6)d + 4d = 48 (equation 2) --> We got 48 by dividing 120 by 5/2\n\n    # Now solve the two equations to get 'a' and 'd'\n    from sympy import symbols, Eq, solve\n\n    a, d = symbols('a d')\n    equation1 = Eq(a + 2 * d, 4)\n    equation2 = Eq(a + (n - 6) * d + 4 * d, 48)\n\n    solutions = solve((equation1, equation2), (a, d))\n\n    # The sum of all 60 terms of the arithmetic sequence is given by\n    # S_60 = n/2 * [2a + (n - 1)d]\n    sum_all_terms = n/2 * (2 * solutions[a] + (n - 1) * solutions[d])\n\n    return sum_all_terms\n\nans = solution()"
    ],
    "a85b2a0fbaee403bbf3d553375241db9": [
        "def solution():\n    return 296 // 8\n\nans = solution()"
    ],
    "31bc6cd2e2a24459b4a65c724b877090": [
        "def solution():\n    # Number of different numbers is 13 (1 to 13)\n    # Pigeonhole principle states that if n items are put into m containers, with n > m,\n    # then at least one container must contain more than one item.\n    # In this case, we have 13 different numbers and want to ensure 2 with consecutive numbers,\n    # so we can have at most one from each number to avoid consecutive numbers.\n    # If we draw 14 cards, we are sure that at least two cards must be consecutive.\n    \n    return 14\n\nans = solution()"
    ],
    "fac549e40da243d680e79d593cff89f9": [
        "def solution():\n    # Given that the halved number is 10\n    halved_number = 10\n    # To find the original number before it was halved, we multiply by 2\n    original_number = halved_number * 2\n    return original_number\n\nans = solution()"
    ],
    "9a89f94e62844db2ae26ce1b67de616f": [
        "def solution():\n    # The back page number is the highest page number\n    back_page_number = 36\n\n    # To find the sum of page numbers on the fifth sheet, first find the page numbers\n    # Each sheet has four pages - two on the front (left and right) and two on the back\n    # Since the back page number is 36, it means it's the right page of a sheet\n    # The left page number is always one less than the right page\n    # Therefore, the pages on the fifth sheet are going to be [5th from last, 4th from last, 3rd from last, 2nd from last]\n    # In terms of page numbers, that's [36-8, 36-7, 36-6, 36-5]\n    fifth_sheet_pages = [back_page_number - 8, back_page_number - 7, back_page_number - 6, back_page_number - 5]\n\n    # Calculate the sum of the page numbers on the fifth sheet\n    page_sum = sum(fifth_sheet_pages)\n    return page_sum\n\nans = solution()"
    ],
    "d1f0df83d1604882a3431fe789a7a764": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_laptops, initial_cost = symbols('initial_laptops initial_cost', real=True, positive=True)\n    selling_price = 2000\n    initial_profit = 60000\n\n    # Equation for initial scenario: profit = selling_price * laptops - cost_per_laptop * laptops - initial_profit = 0\n    eq1 = Eq(selling_price * initial_laptops - initial_cost * initial_laptops - initial_profit, 0)\n\n    # Decrease in cost per laptop by 1/5\n    new_cost = initial_cost - initial_cost / 5\n\n    # Increase total profit by 30%\n    new_profit = initial_profit * 1.3\n\n    # Equation for new scenario: profit = selling_price * laptops - new_cost_per_laptop * laptops - new_profit = 0\n    eq2 = Eq(selling_price * initial_laptops - new_cost * initial_laptops - new_profit, 0)\n\n    # Solving the system of equations\n    solutions = solve((eq1, eq2), (initial_laptops, initial_cost))\n\n    return solutions[initial_laptops]\n\nans = solution()"
    ],
    "b6f89cabc4bd43e4a1af6187963a0b9f": [
        "def solution():\n    ans = (124 + 231) / 5\n    return ans\n\nans = solution()"
    ],
    "9af4e0d14e574f1690bfcf5bfb24c584": [
        "def solution():\n    first_term = 48\n    last_term = 80\n    difference = 4\n\n    num_rows = ((last_term - first_term) // difference) + 1  # Number of rows\n\n    total_seats = (num_rows * (first_term + last_term)) // 2  # Sum of arithmetic sequence\n\n    return total_seats\n\nans = solution()"
    ],
    "a547b3e6bb76410c9882a46dc1128679": [
        "def solution():\n    # Calculate the number of digits for numbers 1-9, 10-99, and 100-129\n    one_digit = 9\n    two_digits = 90\n    three_digits = 29\n\n    # Total digits written\n    total_digits = one_digit * 1 + two_digits * 2 + three_digits * 3\n\n    return total_digits\n\nans = solution()"
    ],
    "dafcea06104b4591957d341d8390c6b3": [
        "def solution():\n    sugar = 80\n    water = 420\n    total_solution = sugar + water\n    concentration = (sugar / total_solution) * 100\n    return concentration\n\nans = solution()"
    ],
    "de19699381254d53a19e09b250810369": [
        "def solution():\n    total_students = 0\n    for girls in range(1, 1000, 2):  # starting from 1 and increasing by 2 (odd layers are girls)\n        boys = girls + 2  # the surrounding boys layer will always have a side 2 units longer\n        if boys**2 - girls**2 == 36:  # the difference in count between boys and girls\n            total_students = boys**2 + girls**2\n            break\n    return total_students\n\nans = solution()"
    ],
    "e0d4db42f51a486ebc92cb7153896228": [
        "def solution():\n    # Number of man-days required to dig 120 metres\n    man_days_for_120 = 3 * 2  # 3 men for 2 days\n\n    # Number of man-days required to dig 1 metre\n    man_days_for_1 = man_days_for_120 / 120\n\n    # Total man-days required to dig 880 metres\n    total_man_days_for_880 = man_days_for_1 * 880\n\n    # Time required for 4 men to dig 880 metres\n    time_for_4_men = total_man_days_for_880 / 4\n\n    return time_for_4_men\n\nans = solution()"
    ],
    "14976163f7ed48a59ba08230a3a9fbbe": [
        "def solution():\n    total_people = 400\n    ellie_rate = 60\n    combined_weeks = 4\n    \n    # Ellie's work for 4 weeks\n    ellie_work = ellie_rate * combined_weeks\n    \n    # Remaining work for Gloria\n    gloria_work = total_people - ellie_work\n    \n    # Gloria's rate (people per week)\n    gloria_rate = gloria_work / combined_weeks\n    \n    # Time for Gloria to finish interviewing by herself\n    gloria_time = total_people / gloria_rate\n    \n    return gloria_time\n\nans = solution()"
    ],
    "4fe05ec372ae4fd388877825449c2f71": [
        "def solution():\n    grams = 1756\n    kilograms = grams / 1000\n    return kilograms\n\nans = solution()"
    ],
    "5065cc90f1ca4fd59386ac472c8bfc71": [
        "def solution():\n    numer = (2 / 5) * 15\n    return numer\n\nans = solution()"
    ],
    "ee3f24407cd74ec0b0589c27b4bb2f13": [
        "def solution():\n    numerators = [285 * 7 + 6, 181 * 11 + 10, 153 * 13 + 12]\n    denominators = [7, 11, 13]\n    numerator_sum = sum(numerators)\n    denominator_sum = sum(1 / d for d in denominators)\n    \n    ans = numerator_sum / denominator_sum\n    return ans\n\nans = solution()"
    ],
    "aee6713edde34c8cb3f3aae969752a2a": [
        "def solution():\n    first_shelf_books = 18\n    second_shelf_books = 24\n\n    while second_shelf_books != 2 * (first_shelf_books):\n        first_shelf_books -= 1\n        second_shelf_books += 1\n\n    books_moved = 18 - first_shelf_books\n\n    return books_moved\n\nans = solution()"
    ],
    "9b43946bb50b4a52b1278ce86046276a": [
        "def solution():\n    time = 20  # time in seconds\n    distance = 300  # distance in meters\n\n    speed = distance / time  # speed in meters per second\n\n    return speed\n\nans = solution()"
    ],
    "7896d35343b54b5c86ea275d9e4da9f6": [
        "def solution():\n    # Let the total number of pupils be x\n    # 5 pupils are in the band\n    # 3/4 of the remaining (x - 5) are in the choir\n    # 2/9 of the class (x) are neither in the band nor the choir\n\n    # Set up the equation\n    # (3/4) * (x - 5) + 5 + (2/9) * x = x\n\n    # Solve for x\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((3/4) * (x - 5) + 5 + (2/9) * x, x)\n\n    total_pupils = solve(equation, x)\n\n    return total_pupils[0]\n\nans = solution()"
    ],
    "817e9b740c9f4606b0221520b9045134": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(28 - 3 * (24 - 5 * x), 1)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "f407d2ea5de540a9874f5a1d203b573e": [
        "def solution():\n    total_balls = 47\n    long_tube_capacity = 8\n    short_tube_capacity = 5\n\n    for long_tubes in range(total_balls // long_tube_capacity + 1):\n        for short_tubes in range(total_balls // short_tube_capacity + 1):\n            if (long_tube_capacity * long_tubes + short_tube_capacity * short_tubes) == total_balls:\n                return long_tubes\n\nans = solution()"
    ],
    "d4152b88afa849ccbb7f225bbecbf032": [
        "def solution():\n    # Since the remainders form an increasing arithmetic sequence and they are from division by 7, 9, a, and 28,\n    # Let the common difference of the arithmetic sequence be d.\n    # The remainders when M is divided by 7, 9, a, 28 are 0+d, 0+2d, 0+3d, 0+4d respectively (assuming M is 0 mod 7 for simplification)\n    \n    # Since we are looking for the smallest positive M\n    # We need to minimize the value of 'a' and 'd'\n    \n    M = 0\n    found = False\n    d = 1\n    while not found:\n        # For arithmetic sequence starting with d, the next term is d*2 which is the remainder when divided by 9\n        r9 = d * 2\n        if r9 >= 9:\n            d += 1\n            continue\n        # The next term in sequence is d*3 which is the remainder when divided by a\n        ra = d * 3\n        # 'a' must be greater than ra and satisfy that a > 9 since the remainders are for divisions by 7, 9, a, and 28\n        a_possible = ra + 1\n        while a_possible <= 28:  # It must also be less than 28\n            # Finally, the remainder when divided by 28 must be d*4\n            r28 = d * 4\n            if r28 >= 28:\n                d += 1\n                break\n            # Check if this forms an arithmetic sequence for M % 7, M % 9, M % a_possible, M % 28\n            if 0 < ra < r28 and a_possible > r9 and r28 < 28:\n                # This a could work, try to find the smallest M\n                # Increment by LCM of divisors to maintain the remainder sequence\n                lcm = 7 * 9 * a_possible * 28 // (7 * 9)  # lcm(7, 9, a_possible, 28), reduced since 7 and 9 are coprime\n                k = 1\n                while True:\n                    M_test = lcm * k + d  # M must be of form lcm*k + d\n                    if (M_test % 7 == d and M_test % 9 == r9 and M_test % a_possible == ra and M_test % 28 == r28):\n                        M = M_test\n                        found = True\n                        break\n                    k += 1\n            if found:\n                break\n            a_possible += 1\n        d += 1\n        \n    return M\n\nans = solution()"
    ],
    "d7a25a03a50d4d6f870a401ce650e9a1": [
        "def solution():\n    for num_lollipops in range(32, 1000, 4):  # Start from 32 and increment by 4 since it must be 32 more than a multiple of 4\n        if (num_lollipops - 3) % 7 == 0:  # The last box with 7 lollipops has 3, so it must be 3 less than a multiple of 7\n            return num_lollipops\n\nans = solution()"
    ],
    "acf798e814284f3da1ec80f45daf1b22": [
        "def solution():\n    numbers = [1, 2, 4, 5, 7, 8, 10, 11, 13, 14]\n    ans = sum(n**3 for n in numbers)\n    return ans\n\nans = solution()"
    ],
    "71858362e80c462a97a1d69a789cf304": [
        "def solution():\n    original_price = 18.60\n    discount = 15 / 100\n    discounted_price = original_price - (original_price * discount)\n    return discounted_price\n\nans = solution()"
    ],
    "d51becf0516a4eeaa5484909769ed784": [
        "def solution():\n    third_term = 8\n    ninth_term = 26\n    n = 11\n\n    # Calculate the common difference\n    common_difference = (ninth_term - third_term) / (9 - 3)\n\n    # Calculate the first term using the third term\n    first_term = third_term - 2 * common_difference\n\n    # Calculate the 11th term\n    eleventh_term = first_term + (n - 1) * common_difference\n\n    return eleventh_term\n\nans = solution()"
    ],
    "bbbdd4f32eff450382ddff68d9210fd4": [
        "def solution():\n    # Let F be the initial number of bracelets that Felicia had\n    # Let J be the initial number of bracelets that Janice had\n    # J is given as 96\n    J = 96\n    \n    # After selling 3/5 of F, Felicia has 2/5 of her bracelets left\n    # Janice buys 2/5 of the sold amount, which is 2/5 of 3/5 of F\n    # The new ratio of Felicia's bracelets to Janice's bracelets is 5:7\n    # (2/5 * F) / (J + (2/5 * 3/5 * F)) = 5/7\n    \n    # Rearrange the equation to solve for F:\n    # 7 * (2/5 * F) = 5 * (96 + 2/5 * 3/5 * F)\n    \n    # Solve for F using algebra\n    F = (5 * J) / ((7 * 2/5) - (5 * 2/5 * 3/5))\n    \n    # Calculate the number of bracelets Janice bought from Felicia\n    bracelets_bought = (2/5) * (3/5) * F\n    \n    return int(bracelets_bought)\n\nans = solution()"
    ],
    "cb369155904d41d3bbbbf4c1966b3f44": [
        "def solution():\n    ans = 9 + 99 + 999 + 9999\n    return ans\n\nans = solution()"
    ],
    "bd44c92e7ad64e179de147924944ccae": [
        "def solution():\n    # since the remainders are the same, the differences between the numbers must be divisible by A\n    diffs = [\n        2758 - 2017,  # Difference between the second and the first number\n        3670 - 2758,  # Difference between the third and the second number\n        3670 - 2017,  # Difference between the third and the first number\n    ]\n    \n    # To find the possible values of A, we need the greatest common divisor of these differences\n    # Find the GCD of the first two differences, which will be a multiple of A\n    from math import gcd\n    gcd_value = gcd(diffs[0], diffs[1])\n    \n    # Now we need to find all the factors of this gcd_value, as these are the potential values of A\n    divisors = set()\n    for i in range(1, int(gcd_value**0.5) + 1):\n        if gcd_value % i == 0:\n            # If i is a divisor, then gcd_value/i is also a divisor\n            divisors.add(i)\n            divisors.add(gcd_value // i)\n    \n    # The value A cannot be larger than the minimum difference, so we remove any divisors larger than the smallest difference\n    divisors = {x for x in divisors if x <= min(diffs)}\n    \n    # A also cannot be 1, since it's trivial and not usually considered in such problems\n    divisors.discard(1)\n    \n    # The sum of the possible values of A is:\n    return sum(divisors)\n\nans = solution()"
    ],
    "5a55a211033946a2b4c35af17fa8dfc6": [
        "def solution():\n    ans = 5 + 4 * 2\n    return ans\n\nans = solution()"
    ],
    "31d498c8de6444af9466c0b067804d9a": [
        "def solution():\n    # Let x be the other number that 4.32 is being multiplied by\n    # Let y be the true result of the multiplication\n    # Without the decimal, Will multiplies 432 by x\n    # With the decimal, the correct multiplication is 4.32 * x\n    # The incorrect result is 432 * x, which is 2138.4 more than the true result, hence\n    # 432 * x = 4.32 * x + 2138.4\n    # Simplifying the above expression gives us 427.68 * x = 2138.4\n    \n    incorrect_difference = 2138.4\n    decimal_shifted = 4.32\n    corrected_decimal = 432\n    \n    # Divide the difference by the factor gained by the decimal shifting\n    x = incorrect_difference / (corrected_decimal - decimal_shifted)\n    \n    # Now we calculate the true result with the decimal point\n    true_result = decimal_shifted * x\n    \n    return true_result\n\nans = solution()"
    ],
    "87557efca8df42a1b34010678b9a23bf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    \n    # boys got 5 candies each, girls got 3 candies each\n    equation1 = Eq(5 * boys + 3 * girls, 448)\n    # There were 8 more girls than boys\n    equation2 = Eq(girls, boys + 8)\n    \n    solutions = solve((equation1, equation2), (boys, girls))\n\n    total_children = solutions[boys] + solutions[girls]\n\n    return total_children\n\nans = solution()"
    ],
    "708d8a95115e435f83a7c21859083e21": [
        "def solution():\n    ans = 15 - 8.36\n    return ans\n\nans = solution()"
    ],
    "40f1f703a3914f699ce57ea08f21df7e": [
        "def solution():\n    B = 1\n    while True:\n        if B % 3 == 1 and B % 5 == 2:\n            return B\n        B += 1\n\nans = solution()"
    ],
    "8370d497cc534bd1b69b748b4f2e7acf": [
        "def solution():\n    # Calculate the age difference between grandmother and mother\n    age_difference = 2008 - 1996  # years between the two given dates\n\n    # Grandmother's age on the given date\n    grandmothers_age_in_2008 = 80\n    \n    # Mum's age on her given date in 1996\n    mums_age_in_1996 = 40\n\n    # Calculate grandmother's age when mum was born\n    grandmothers_age_when_mum_was_born = grandmothers_age_in_2008 - (mums_age_in_1996 + age_difference)\n    \n    return grandmothers_age_when_mum_was_born\n\nans = solution()"
    ],
    "dcce40d2c5394a368e9835c3bd85ebaf": [
        "def solution():\n    count = 0\n    for i in range(4, 52):\n        count += str(i).count('3')\n        if str(i) == '23':\n            ans = count\n    return ans\n\nans = solution()"
    ],
    "eedf0a2b13c7480981b6f0ae90e36208": [
        "def solution():\n    total_income = 2012\n    price_lemonade = 4\n    price_plus = 7\n    total_bottles = 350\n\n    # assuming all bottles sold were lemonade\n    max_lemonade = total_income // price_lemonade\n\n    # finding the minimum number of bottles of \"1000 Plus\" that could have been sold\n    for bottles_plus in range(max_lemonade + 1):\n        bottles_lemonade = total_bottles - bottles_plus\n        if bottles_lemonade * price_lemonade + bottles_plus * price_plus == total_income:\n            return bottles_plus\n\nans = solution()"
    ],
    "119dc81932594423a821eb0e3835d800": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    milk_before, fruit_before = symbols('milk_before fruit_before')\n\n    # Initial ratio: milk / fruit = 7 / 9\n    equation1 = Eq(milk_before / fruit_before, 7 / 9)\n\n    # After eating 8 pieces of milk candy, the ratio becomes 2 / 3\n    # milk_after = milk_before - 8\n    # Ratio changes to: (milk_before - 8) / fruit_before = 2 / 3\n    equation2 = Eq((milk_before - 8) / fruit_before, 2 / 3)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (milk_before, fruit_before))\n\n    # Return the initial amount of milk candy\n    return solutions[milk_before]\n\nans = solution()"
    ],
    "3bce0db903cb4b46828346019eae5cb1": [
        "def solution():\n    return 546 + 287\n\nans = solution()"
    ],
    "7c8ab5ff603c4374855b52023ed9bc79": [
        "def solution():\n    marks = [15, 19, 13, 18, 20]\n    mean_mark = sum(marks) / len(marks)\n    return mean_mark\n\nans = solution()"
    ],
    "513eb21b2999465f94c54ad7c1660b36": [
        "def solution():\n    apples_initially = 60\n    apples_each_friend_initially = 4\n    \n    number_of_friends = apples_initially // apples_each_friend_initially\n    \n    apples_each_friend_after = apples_each_friend_initially + 1\n    \n    total_apples_needed = apples_each_friend_after * number_of_friends\n    \n    return total_apples_needed\n\nans = solution()"
    ],
    "6d772586b0a84788980ab24fb3d29532": [
        "def solution():\n    total_students = 112\n    total_groups = 24\n\n    for groups_of_6 in range(total_groups + 1):\n        groups_of_4 = total_groups - groups_of_6\n        if 6*groups_of_6 + 4*groups_of_4 == total_students:\n            return groups_of_6\n\nans = solution()"
    ],
    "2766d440a8354c518fb5b8de557b59a9": [
        "def solution():\n    meters = 0.52\n    centimeters = meters * 100\n    return centimeters\n\nans = solution()"
    ],
    "f7fe37c32c4d45b2971f9a684a87178f": [
        "def solution():\n    # To guarantee he gets a pair of white socks in the worst case,\n    # Yohan must take out all the red and black socks before he starts taking out white socks.\n    # In the worst case, he takes out all 10 black and 10 red socks.\n    max_red_black_socks = 10 + 10\n    \n    # Since he is looking for a pair, he must take out at least two white socks.\n    # Hence, after taking out the red and black socks, he needs to take 2 white socks to guarantee a pair.\n    white_socks_needed_for_pair = 2\n    \n    # Total socks that must be taken in the worst case:\n    total_socks = max_red_black_socks + white_socks_needed_for_pair\n    \n    return total_socks\n\nans = solution()"
    ],
    "a04e2fb1ed1c471b8449b601924beb05": [
        "def solution():\n    # Average of three numbers is 60\n    sum_of_three_numbers = 3 * 60\n    # Average of four numbers, with the fourth number included, is 90\n    average_of_four_numbers = 90\n    # Total sum of four numbers\n    sum_of_four_numbers = 4 * average_of_four_numbers\n    # The fourth number is the difference between the sum of four numbers and the sum of the first three numbers\n    fourth_number = sum_of_four_numbers - sum_of_three_numbers\n\n    return fourth_number\n\nans = solution()"
    ],
    "f16f67a593394039a3ef72a2e5b5e457": [
        "def solution():\n    total_cost = (3 * 1.60) + (2 * 0.62) + 4.50\n    change = 20 - total_cost\n    return round(change, 2)\n\nans = solution()"
    ],
    "0395b9449a6542edbdcf5b5c06f47904": [
        "def solution():\n    # The provided information indicates that A, B, and C are distinct digits that form a 3-digit number ABC\n    # Loop through all possible values for A, B, and C, avoiding the same values for different letters\n    for A in range(1, 10): # A cannot be zero as it is the leading digit in a 3-digit number\n        for B in range(0, 10):\n            for C in range(0, 10):\n                # Check if all digits are unique\n                if A != B and B != C and A != C:\n                    # Construct the 3-digit number using the digits A, B, and C\n                    ABC = (100 * A) + (10 * B) + C\n                    # If there are any other conditions or equations provided for ABC, they should be checked here\n                    # Since no specific condition is given other than distinct digits, we assume the problem is asking for the first valid 3-digit number\n                    # Thus, we can return the first combination of A, B, and C that meets the criteria\n                    return ABC\n\nans = solution()"
    ],
    "fdf018bb61cc4677813a36cc14cfe619": [
        "def solution():\n    return 65 + 88\n\nans = solution()"
    ],
    "833b1df560b94f9e8b69c9356f27b429": [
        "from math import factorial\n\ndef solution():\n    n = factorial(25)\n    count = 0\n    while n % 10 == 0:\n        count += 1\n        n //= 10\n    return count\n\nans = solution()"
    ],
    "5b21a1a7d2744fbfa57fbc46e69a365c": [
        "def solution():\n    # Original price of the handbag before discount\n    original_price_handbag = 428 / (1 - 0.20)\n    \n    # Total discount received for both handbag and purse\n    total_discount = 121\n    \n    # Discount received for the handbag alone\n    discount_handbag = original_price_handbag - 428\n    \n    # Discount received for the purse alone\n    discount_purse = total_discount - discount_handbag\n    \n    # Original price of the purse before discount\n    original_price_purse = discount_purse / 0.28\n    \n    return original_price_purse\n\nans = solution()"
    ],
    "e63cc75a785d4d938794d1691bdf1f91": [
        "def solution():\n    # Original trades: \n    # 3 fish for 2 rabbit -> Owen to Oscar\n    # 3 rabbits for 4 packs of wheat -> Oscar to Dennis\n\n    # We need to find out how many fish correspond to 8 packs of wheat.\n    \n    # First, find the fish to rabbit ratio: 3 fish / 2 rabbits\n    fish_to_rabbit_ratio = 3 / 2\n\n    # Now, find the rabbit to wheat ratio for 8 packs (double the original trade): 6 rabbits / 8 packs of wheat\n    rabbit_to_wheat_ratio = 3 / 4\n\n    # Calculate the overall ratio: fish to packs of wheat\n    # Multiply the two ratios to get fish to wheat ratio (for 8 packs)\n    fish_to_wheat_ratio = fish_to_rabbit_ratio * rabbit_to_wheat_ratio\n\n    # Finally, calculate the number of fish for 8 packs of wheat\n    # fish_to_wheat_ratio = fish / wheat -> fish = fish_to_wheat_ratio * wheat\n    fish_for_eight_wheat = fish_to_wheat_ratio * 8\n\n    return fish_for_eight_wheat\n\nans = solution()"
    ],
    "732cda7ed4134de8b845829f981525ea": [
        "def solution():\n    # The recurring decimal is of the form 0.A22A22A22...\n    # The first 20 digits after the decimal point consist of 10 instances of 'A2'\n    # Therefore, sum of these 20 digits is 10 * (A + 2)\n\n    # Set the equation and solve for A\n    A = symbols('A')\n    equation = Eq(10 * (A + 2), 80)\n    solution = solve(equation, A)\n\n    return int(solution[0])\n\nans = solution()"
    ],
    "59cc2f9a46c248fd832ddb6e4cb5db84": [
        "def solution():\n    well_height = 25\n    climb_up = 4\n    slide_down = 1\n    net_climb = climb_up - slide_down\n    current_height = 0\n    day = 0\n    \n    while current_height < well_height:\n        day += 1\n        current_height += climb_up\n        if current_height >= well_height:\n            break\n        current_height -= slide_down\n        \n    return day\n\nans = solution()"
    ],
    "67da5f022f834e8d9713e38fb01fce1b": [
        "def solution():\n    times_per_week = 2\n    weeks = 2\n    total_times = times_per_week * weeks\n    return total_times\n\nans = solution()"
    ],
    "e2f0ace2f5554ef4a4b96194cf69005f": [
        "def solution():\n    quarter_of_398 = 398 / 4\n    return quarter_of_398\n\nans = solution()"
    ],
    "104457856ee04bf79d6b2d936f9025bb": [
        "def solution():\n    time_jogging = 0.5  # Jogging from 6:30am to 7:00am is 0.5 hours\n    time_walking = 1    # Walking from 7:00am to 8:00am is 1 hour\n    speed_jogging = 6   # Speed of jogging is 6 miles per hour\n    speed_walking = 5   # Speed of walking is 5 miles per hour\n\n    distance_jogging = time_jogging * speed_jogging\n    distance_walking = time_walking * speed_walking\n\n    total_distance = distance_jogging + distance_walking\n\n    return total_distance\n\nans = solution()"
    ],
    "d54e6eab7a2b49a8afcd367d2c88a350": [
        "def solution():\n    # Let x be the original amount of money Elvin had\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')    \n    equation = Eq(x - 120 - 0.4 * (x - 120), 0.3 * x)\n    original_amount = solve(equation, x)[0]\n    \n    return original_amount\n\nans = solution()"
    ],
    "a900a568f02d4a159d7b0f8c62c4e745": [
        "def solution():\n    from math import lcm\n    ans = lcm(6, 10)\n    return ans\n\nans = solution()"
    ],
    "8dfe115ec4fe4aa881b30f336c891785": [
        "from math import gcd\n\ndef solution():\n    count = 0\n    for numerator in range(1, 2012):\n        denominator = numerator + 5\n        if gcd(numerator, denominator) == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "1aaf2aac3d134b9e8804dd390e239bda": [
        "def solution():\n    total_books = 35\n    layers = 4\n    min_books_in_top_layer = (total_books + layers - 1) // layers\n    return min_books_in_top_layer\n\nans = solution()"
    ],
    "4f73e090c9d24ebf8913ba71fddf7af3": [
        "def solution():\n    count = 0\n    for i in range(1, 4): # First digit options (can't be 0)\n        for j in range(0, 4): # Second digit options\n            for k in range(0, 4): # Third digit options\n                if i != j and i != k and j != k: # All digits must be different\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "844bb71707b14ba9b438958cdcf143a8": [
        "def solution():\n    first_term = 50\n    difference = -4\n\n    # The nth term of an arithmetic sequence is given by a_n = a_1 + (n-1)*d\n    # We want to find the largest n for which a_n is non-negative, therefore we solve for:\n    # 0 = 50 + (n-1)*(-4)\n\n    # Rearrange the equation to solve for n\n    n = (0 - first_term) / difference + 1\n\n    return int(n)\n\nans = solution()"
    ],
    "483d2059d96645c8a1cd0eaef152a05a": [
        "def solution():\n    max_product = 0\n    for a in range(1, 31):\n        for b in range(1, 31 - a):\n            c = 31 - a - b\n            max_product = max(max_product, a * b * c)\n    return max_product\n\nans = solution()"
    ],
    "f1d3495298e84267bc30b1547d7319b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    original_books = symbols('original_books')\n\n    # Cost of the original books\n    cost_of_original_books = 3.5 * original_books\n\n    # Cost of the 2 new books\n    cost_of_new_books = 6 * 2\n\n    # Total cost after buying the new books\n    total_cost = cost_of_original_books + cost_of_new_books\n\n    # New average price times total number of books equals to total cost\n    equation = Eq(4 * (original_books + 2), total_cost)\n\n    # Solve the equation to find the number of original books\n    number_of_original_books = solve(equation, original_books)[0]\n    \n    # Total number of books is the sum of original books and the 2 new books\n    total_books = number_of_original_books + 2\n    \n    return total_books\n\nans = solution()"
    ],
    "79aaa41810464d378e8d61b04cee59b9": [
        "def solution():\n    return 129.35 - 0.47\n\nans = solution()"
    ],
    "cd0cb1ffbdd74527b73e0b27a88458ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq((rachel - 8) / 3, alice - 8)\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    return solutions[rachel] + solutions[alice]\n\nans = solution()"
    ],
    "7673b69c12a4478ba10dd72c7cba39cc": [
        "def solution():\n    cheese_weight_kg = 1.2\n    piece_weight_g = 30\n    cheese_weight_g = cheese_weight_kg * 1000\n    num_pieces = cheese_weight_g / piece_weight_g\n    return int(num_pieces)\n\nans = solution()"
    ],
    "6d6e8256edb347ee9e3d4d5dfa3a712c": [
        "def solution():\n    ans = 748 - 189\n    return ans\n\nans = solution()"
    ],
    "4845459ce472463eab28814467f9c4ae": [
        "def solution():\n    return 12.3 + 4.9\n\nans = solution()"
    ],
    "4ecf79f778ae40b686861b81b759f60e": [
        "def solution():\n    # Conversion factor from liters to quarts (1 liter = 1.05668821 quarts)\n    liters_to_quarts = 1.05668821\n    \n    # Coke bought in quarts\n    coke_in_quarts = 2.5 * liters_to_quarts\n    \n    # Cup capacity in quarts\n    cup_capacity_in_quarts = 0.5\n    \n    # Calculate the number of cups\n    number_of_cups = coke_in_quarts / cup_capacity_in_quarts\n    \n    # Round to the nearest integer\n    return round(number_of_cups)\n\nans = solution()"
    ],
    "3a7e7f1ca5674fc894e02d029b5853cd": [
        "def solution():\n    return 18 // 3\n\nans = solution()"
    ],
    "c6c173915a8044e697dc662694645197": [
        "def solution():\n    squares = 45\n    circles = squares / 3\n    triangles = squares * 2\n    total_shapes = squares + circles + triangles\n    return int(total_shapes)\n\nans = solution()"
    ],
    "a3975ec5c3e042a19cc5b99120625ee9": [
        "def solution():\n    # Given B=2 and D=0, we can substitute the values into the equation:\n    # 5 * ABCDEF = 6 * EFABCD => ABCDEF = 1.2 * EFABCD\n    # Then, A and E must be chosen such that when E is shifted two positions to the left,\n    # and A is shifted to the rightmost position, the number ABCDEF is 1.2 times EFABCD.\n    # We'll start by finding candidates for E such that E < 5 (so that 6 * E < 30)\n\n    b, d = 2, 0\n    for a in range(10):\n        for c in range(10):\n            for e in range(1, 5):  # E must be less than 5 to avoid carrying over in multiplication\n                for f in range(10):\n                    abcdef = int(f\"{a}{b}{c}{d}{e}{f}\")\n                    efabcd = int(f\"{e}{f}{a}{b}{c}{d}\")\n\n                    if 5 * abcdef == 6 * efabcd:\n                        face = int(f\"{f}{a}{c}{e}\")\n                        return face\n\nans = solution()"
    ],
    "bd4a58a9e1f346c2a02141211d17aad3": [
        "def solution():\n    jog_time_hours = 1  # from 6:30 AM to 7:30 AM\n    walk_time_hours = 2  # from 7:30 AM to 9:30 AM\n\n    jog_speed_mph = 6  # miles per hour\n    walk_speed_mph = 5  # miles per hour\n\n    jog_distance = jog_time_hours * jog_speed_mph\n    walk_distance = walk_time_hours * walk_speed_mph\n\n    total_distance = jog_distance + walk_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "f9418bd52e404cb0ba8323619f7e16d9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of sweet wrappers Angel and Belle have\n    angel, belle = symbols('angel belle')\n\n    # Create the equations based on the problem statement\n    equation1 = Eq(angel, (5/6)*belle)                # Angel had 5/6 as many sweet wrappers as Belle\n    equation2 = Eq(angel - 58, (3/4)*belle)           # After throwing away 58 wrappers, Angel has 75% as many as Belle\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (angel, belle))\n\n    # Get the solution for the number of sweet wrappers Belle has\n    return solutions[belle]\n\nans = solution()"
    ],
    "37a3bced5a4e423d82496aac9bccd711": [
        "def solution():\n    return (4/9) * 36\n\nans = solution()"
    ],
    "b83cbcd4901c48eabd1bebc1c3bd0eab": [
        "def solution():\n    salary = 3500\n    remit_percentage = 20 / 100\n    bank_charge_percentage = 0.5 / 100\n\n    remit_amount = salary * remit_percentage\n    bank_charge = remit_amount * bank_charge_percentage\n\n    return bank_charge\n\nans = solution()"
    ],
    "1806328c303e465aae52d08571416744": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dad_current, son_current = symbols('dad_current son_current')\n    \n    equation1 = Eq(dad_current - 6, 5 * (son_current - 6))\n    equation2 = Eq(dad_current + son_current, 78)\n    \n    solutions = solve((equation1, equation2), (dad_current, son_current))\n\n    return solutions[dad_current]\n\nans = solution()"
    ],
    "eeacd0848f0c4bb8b1df25d1292193a6": [
        "def solution():\n    count = 0\n    for x1 in range(1, 10):\n        for x2 in range(1, 10):\n            for x3 in range(1, 10):\n                if x1 + x2 + x3 == 10 and len(set([x1, x2, x3])) == 3:\n                    count += 1\n    return count // 6  # Divide by 6 to account for permutations of the vases\n\nans = solution()"
    ],
    "a9881864fa194fbdb56c0ce044f7e9a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of children and y be the total amount of money\n    x, y = symbols('x y')\n    \n    # If there was £0.20 more, then there would be enough for each child to receive £0.70\n    equation1 = Eq(y + 0.20, x * 0.70)\n    \n    # However, if each child was to receive £0.60, then there would be £2.10 left over.\n    equation2 = Eq(y - x * 0.60, 2.10)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    return solutions[x]\n\nans = solution()"
    ],
    "0208115272b747ed9f455438107597e9": [
        "def solution():\n    account_balance = -76.20\n    payment = 120.75\n\n    new_balance = account_balance + payment\n\n    return new_balance\n\nans = solution()"
    ],
    "f6c1628be8644402bd9f85c22ea356d8": [
        "def solution():\n    from datetime import datetime\n\n    start_date = datetime.strptime('2 March', '%d %B')  # Assuming current year\n    end_date = datetime.strptime('15 April', '%d %B')   # Assuming current year\n\n    difference = end_date - start_date\n\n    return difference.days + 1  # Adding one because the start date is included\n\nans = solution()"
    ],
    "29b56d3088d1435786656e1ffbb6008d": [
        "def solution():\n    for i in range(1, 10**5): # Set a reasonable upper bound to avoid an infinite loop\n        original_number = i * 10 + 9\n        new_number = int(str(9) + str(i))\n        if new_number == 4 * original_number:\n            return original_number\n\nans = solution()"
    ],
    "3693bdc4f96c495abe74ef6590148d91": [
        "def solution():\n    initial_price = 200\n    percentage_increase = 45\n    final_price = initial_price + (initial_price * percentage_increase / 100)\n    return final_price\n\nans = solution()"
    ],
    "a7dc9f6214394b39a9a7494116ffb8e3": [
        "def solution():\n    known_numbers = [9, 7, 5, 4, 1, 8, 8]\n    total_numbers = 8\n    mean_value = 6\n\n    total_sum = mean_value * total_numbers\n    missing_number = total_sum - sum(known_numbers)\n\n    return missing_number\n\nans = solution()"
    ],
    "ec35840ccd1248e5a6d29e1104245ccc": [
        "def solution():\n    from math import factorial\n\n    total_students = 7\n    fixed_students = 2  # Eddie and Avril are fixed\n\n    # Calculate the number of ways to arrange the remaining students\n    arrangements_for_rest = factorial(total_students - fixed_students)\n    \n    # Eddie is fixed on the left end, Avril can be to his immediate right in one way\n    # The others can be in any order\n    total_arrangements = arrangements_for_rest \n    \n    return total_arrangements\n\nans = solution()"
    ],
    "dac30729f20b435e955d54823c225c8a": [
        "def solution():\n    circumference = 300\n    interval_initial = 3\n    holes_initial = 30\n    interval_new = 5\n    \n    distance_dug = interval_initial * holes_initial\n    remaining_distance = circumference - distance_dug\n    additional_holes = remaining_distance / interval_new\n\n    return int(additional_holes)\n\nans = solution()"
    ],
    "969bbc016ec64147ba5857f77302bf8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq((rachel - 8) / 3, alice - 8)\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    total_sweets = solutions[rachel] + solutions[alice]\n    return total_sweets\n\nans = solution()"
    ],
    "752173f5003b4bd6abe560d6fd64f3ea": [
        "def solution():\n    pastas = 2\n    sauces = 3\n    toppings = 2\n\n    ans = pastas * sauces * toppings\n    return ans\n\nans = solution()"
    ],
    "a9d1e1b3a6ff495da1992840b560d4ec": [
        "def solution():\n    # The problem can be broken down into two parts: reaching step 5 and going from 5 to 10.\n    # Then, the total ways to climb the staircase are the product of the ways to reach step 5\n    # and the ways to reach step 10 from step 5.\n    \n    # Function to calculate the number of ways to reach a certain step\n    def ways_to_step(n):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        else:\n            return ways_to_step(n - 1) + ways_to_step(n - 2)\n    \n    # Calculating ways to reach step 5 and ways to go from step 5 to step 10\n    ways_to_5 = ways_to_step(5)\n    ways_from_5_to_10 = ways_to_step(5)\n    \n    # Total ways to climb the staircase with the condition\n    total_ways = ways_to_5 * ways_from_5_to_10\n    \n    return total_ways\n\nans = solution()"
    ],
    "55e306d2ed6b464bba4d3a62d5c153a4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 3)/4, 12)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "eb53e414158c466caeef1968156633e7": [
        "def solution():\n    # We want to find the smallest number of gloves that include a matching pair.\n    # Since Dilly cannot identify between left-hand and right-hand gloves, we\n    # should focus on the color to ensure a matching pair is chosen.\n    # We use the Pigeonhole Principle and consider the worst case scenario.\n\n    # First we calculate the maximum number of gloves that can be taken without \n    # getting a matching pair. We take maximum gloves of each color of one hand.\n\n    # Gloves that can be taken of the left-hand type without getting a blue pair.\n    left_blue = 1\n\n    # Gloves that can be taken of the left-hand type without getting a green pair.\n    left_green = 2\n\n    # If we take more than 3 right-hand gloves, we are guaranteed a blue pair,\n    # since there are only 3 blue right-hand gloves. So we take 3 here, not 4.\n    right_blue = 3\n\n    # We have 4 right-hand green gloves, so taking 4 here ensures no green pair yet.\n    right_green = 4\n\n    # Worst case gloves taken without a matching pair is:\n    no_pair_total = left_blue + left_green + right_blue + right_green\n\n    # If we take one more glove after this worst-case scenario, we are guaranteed \n    # to get a matching pair because it will add to one of the previous categories\n    # that already have the maximum number of gloves that can be taken without matching.\n    ans = no_pair_total + 1\n    return ans\n\nans = solution()"
    ],
    "25a9b81e1f254a22ba8254c18f4094b6": [
        "def solution():\n    ans = sum(i * (16 - i) for i in range(1, 16))\n    return ans\n\nans = solution()"
    ],
    "d53e348d27d24f5f894e4c70ba210f90": [
        "def solution():\n    cookies = 0\n    while True:\n        cookies += 1\n        if cookies % 3 == 1 and cookies % 4 == 3 and cookies % 5 == 4:\n            return cookies\n\nans = solution()"
    ],
    "2553265bfbbf4a7aaae766e5e726bdde": [
        "def solution():\n    ans = 38 + 56 / 7 * 4\n    return ans\n\nans = solution()"
    ],
    "5fe9f334c8c54820a5b563a6ccd139b0": [
        "def solution():\n    erased_sum = 0\n    for num in range(1, 51):\n        if '3' in str(num):\n            erased_sum += num\n    return erased_sum\n\nans = solution()"
    ],
    "9ec6921203444761a39b2c67e85f0e88": [
        "def solution():\n    digits_per_page = 1\n    total_pages = 0\n    total_digits_used = 0\n\n    while total_digits_used < 792:\n        total_pages += 1\n        total_digits_used += digits_per_page\n        if total_pages == 10 or total_pages == 100:\n            digits_per_page += 1\n\n    return total_pages\n\nans = solution()"
    ],
    "a8c6a94a28e9428ab4b13cce74354488": [
        "def solution():\n    ivan_average = 80\n    billy_average_first_four = 89\n    billy_target_average = ivan_average + 10\n\n    ivan_total = ivan_average * 5\n    billy_total_first_four = billy_average_first_four * 4\n    billy_target_total = billy_target_average * 5\n\n    billy_score_fifth_assignment = billy_target_total - billy_total_first_four\n\n    return billy_score_fifth_assignment\n\nans = solution()"
    ],
    "50d48bd4a4534e6794fdff42085da5c9": [
        "def solution():\n    total_length = 305\n    pipe_length = 5\n    \n    num_pipes = total_length // pipe_length\n    \n    if total_length % pipe_length != 0:\n        num_pipes += 1\n    \n    return num_pipes\n\nans = solution()"
    ],
    "7a4bff3e5801439598b5006a37f9e671": [
        "def solution():\n    # We try different combinations of brackets and return the maximum result\n    expressions = [\n        \"(15+5)*(5+15)-6+7\",  # First possible combination\n        \"((15+5)*5)+15-6+7\",  # Second possible combination\n        \"(15+5)*(5+(15-6))+7\", # Third possible combination\n        \"15+(5*(5+15))-6+7\",   # Fourth possible combination\n        \"15+(5*(5+(15-6)))+7\"  # Fifth possible combination\n    ]\n\n    max_result = None\n    for expr in expressions:\n        result = eval(expr)\n        if max_result is None or result > max_result:\n            max_result = result\n    \n    return max_result\n\nans = solution()"
    ],
    "6580c0b5f26f44f8b40aa50046f59348": [
        "def solution():\n    count = 0\n    for x in range(1, 1001):\n        y = 1000 - x\n        if y >= 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "689c63a78be543f190535ba4297790fc": [
        "def solution():\n    peaches = 45\n    apples = 5 + 2 * peaches\n\n    return apples\n\nans = solution()"
    ],
    "8690a8a142c04f6691c64b0d4fb396ae": [
        "def solution():\n    for i in range(1, 28):\n        if (i % 4 == 3) and (i % 7 == 3):\n            return i % 28\n\nans = solution()"
    ],
    "649064d7c05f4454a41370190bf8d34e": [
        "def solution():\n    # Given sequence information\n    term_7 = 39  # 7th term\n    term_8 = 44  # 8th term\n    term_9 = 49  # 9th term\n\n    # Since it's an arithmetic sequence, the difference between terms is constant\n    difference = term_8 - term_7\n\n    # Calculate the 100th term using the formula: nth_term = first_term + (n - 1) * difference\n    # We already have the term_7 which is the 7th term, so we need to find the first term\n    first_term = term_7 - (7 - 1) * difference\n\n    # Now calculate the 100th term using the first_term and difference\n    term_100 = first_term + (100 - 1) * difference\n\n    return term_100\n\nans = solution()"
    ],
    "a1e89dc194cd4d63832576ee3cf6e989": [
        "def solution():\n    from sympy import symbols, solve, Eq, sqrt\n\n    m = symbols('m')\n    expr = 1260 * m\n    # Set up equation assuming expr is a perfect square\n    equation = Eq(sqrt(expr)**2, expr)\n    # Solve for m so that 1260m is a square number\n    solutions = solve(equation, m)\n    \n    # We need the smallest positive integer value for m that makes 1260m a square\n    for solution in solutions:\n        if solution.is_integer and solution > 0:\n            return int(solution)\n\nans = solution()"
    ],
    "c736e99075ea4aa78054fd8167197424": [
        "def solution():\n    lcm = 8 * 11  # Least common multiple of 8 and 11\n\n    for i in range(10, 100):  # Looping through two-digit numbers\n        if i % 8 == 6 and i % 11 == 6:\n            # The number must be a multiple of LCM plus remainder\n            return (i // lcm) * lcm + 6\n\nans = solution()"
    ],
    "b61ef7925dd94c3fb08a4830a036e4a4": [
        "def solution():\n    base = 9\n    pattern = [base**i % 10 for i in range(1, 5)]  # Find the ones digit pattern for powers of 9\n    power = 99\n    ones_digit_position = (power - 1) % 4  # Get position in the pattern\n    return pattern[ones_digit_position]\n\nans = solution()"
    ],
    "ada1b1b89cec47f8849cd2d017a8b183": [
        "def solution():\n    students = 40\n    boat_capacity = 7\n    boats_needed = (students + boat_capacity - 1) // boat_capacity\n    return boats_needed\n\nans = solution()"
    ],
    "3accd80c3de74ff4b09605882d0d3036": [
        "def solution():\n    table_price = 151.25\n    chair_price = 24.15\n    total_spent = table_price + chair_price\n    return total_spent\n\nans = solution()"
    ],
    "20db318a830540dea5738356c974b264": [
        "def solution():\n    total_stickers = 38 + 14\n    remaining_stickers = total_stickers - 9\n    return remaining_stickers\n\nans = solution()"
    ],
    "5c4cd1d2ec4b44978363bea24ebfa91c": [
        "def solution():\n    return pow(2, 2015) % 3\n\nans = solution()"
    ],
    "9521e8915fce4c6990100988ef474bdb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the total value of the ponies in each stable\n    small_stable, large_stable = symbols('small_stable large_stable')\n\n    # Each stable initially had 3 ponies\n    initial_avg_small = small_stable / 3\n    initial_avg_large = large_stable / 3\n    \n    # Rein Beau's value\n    rein_beau_value = 250000\n\n    # When Rein Beau moves to the large stable, \n    # the average value in each stable increases by 10,000\n    new_avg_small = (small_stable - rein_beau_value) / 2\n    new_avg_large = (large_stable + rein_beau_value) / 4\n\n    # Set up the equations based on the problem statement\n    equation1 = Eq(initial_avg_small + 10000, new_avg_small)\n    equation2 = Eq(initial_avg_large + 10000, new_avg_large)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (small_stable, large_stable))\n    \n    # Calculate the total value of all ponies by adding the stables' values and Rein Beau's value\n    total_value = solutions[small_stable] + solutions[large_stable] + rein_beau_value\n\n    return total_value\n\nans = solution()"
    ],
    "dff026a0fb2549369d7be7c6aa7adf6b": [
        "def solution():\n    result = 1234\n    # Reversing the operations step by step starting from the end\n    result += 50\n    day = result % 100\n    result //= 100\n    month = (result - 1) // 50 // 4\n    return (month, day)\n\nans = solution()"
    ],
    "3baa88503f344e83b1afe7aee1dc88ea": [
        "def solution():\n    from math import factorial\n\n    # treating the 4 pupils who insist on standing together as a single unit\n    # there are 5 units to arrange (the single unit of 4 pupils and the 4 other pupils)\n    units_to_arrange = factorial(5)\n\n    # for the 4 pupils who insist on standing together, there are 4! different arrangements amongst themselves\n    arrangements_within_unit = factorial(4)\n\n    # total different ways to arrange them is the product of the two factors above\n    total_arrangements = units_to_arrange * arrangements_within_unit\n\n    return total_arrangements\n\nans = solution()"
    ],
    "789c72c81c1f4343a6331f9136346c34": [
        "def solution():\n    return 64 * 42\n\nans = solution()"
    ],
    "3a2cd4abff9642379247f914750ea56d": [
        "def solution():\n    sugar = 7\n    water = 21\n    total_weight = sugar + water\n    concentration = (sugar / total_weight) * 100\n    return concentration\n\nans = solution()"
    ],
    "8161131c45e24fd3b0153fe5037c7c3d": [
        "def solution():\n    total_sum = 60\n    n = 3  # number of consecutive numbers\n    # The formula for the sum of n consecutive numbers starting with m is: S = n/2 * (2m + (n - 1))\n    # Here, S = 60 and n = 3\n    # By solving the equation, we get m = middle number of the consecutive numbers\n    # Once we have m, the largest number (m + 1)\n    m = (total_sum / n) - 1  # Subtracting 1 to get the middle number\n    largest_number = m + 1\n    return int(largest_number)\n\nans = solution()"
    ],
    "ffc0cb9420c84ae1a80072d5874cfa79": [
        "def solution():\n    cost_lamb_per_kg = 8.70\n    cost_beef_per_kg = 9.40\n    weight_lamb = 7\n    weight_beef = 30\n\n    total_cost = (cost_lamb_per_kg * weight_lamb) + (cost_beef_per_kg * weight_beef)\n\n    return total_cost\n\nans = solution()"
    ],
    "5bd73885b66a40709b62ae02cee893ef": [
        "def solution():\n    ans = 176 / 8\n    return ans\n\nans = solution()"
    ],
    "a78fc203de2e495b9c3e288ffa2f20f2": [
        "def solution():\n    # Let the number of gold medals be 'g' and the number of silver medals be 's'\n    # g + s = 80 (total medals)\n    # 5g + 4s = 331 (total points)\n\n    # Using algebra to solve for 'g':\n    # Multiply the first equation by 4 and subtract from the second equation:\n    # 5g + 4s - 4g - 4s = 331 - 4 * 80\n    # g = 331 - 320\n\n    g = 331 - 4 * 80\n    g //= 1  # as we are looking for the integer solution for the number of gold medals\n\n    return g\n\nans = solution()"
    ],
    "a37239e1c2af4896b905775df4d04faf": [
        "def solution():\n    ans = 234 + 578\n    return ans\n\nans = solution()"
    ],
    "f51701360c30428284abf7311cea43d8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the variables for the master's and apprentice's work rates\n    master_rate, apprentice_rate = symbols('master_rate apprentice_rate')\n\n    # Equations based on the problem statement\n    # 1 master and 3 apprentices complete the task in 4 days\n    equation1 = Eq(1 * master_rate + 3 * apprentice_rate, 1/4)\n    # 2 masters and 1 apprentice complete the task in 3 days\n    equation2 = Eq(2 * master_rate + 1 * apprentice_rate, 1/3)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (master_rate, apprentice_rate))\n    \n    # Extract the apprentice's work rate\n    apprentice_rate_solution = solutions[apprentice_rate]\n\n    # Calculate how many days it would take for 1 apprentice to complete the task alone\n    # The total work is considered as 1 task, and the rate of the apprentice is per day\n    # Time taken is total work (1 task) divided by the rate of completion per day\n    days_for_apprentice = 1 / apprentice_rate_solution\n\n    return days_for_apprentice\n\nans = solution()"
    ],
    "01d43a1f75294754a6d7791646d4bb6e": [
        "def solution():\n    # From the given results, we can infer that the operation \"★\" is defined as follows:\n    # If the first number is greater than or equal to the second number, then \"a★b = a + b\"\n    # Otherwise, \"a★b = a\"\n\n    # Thus, for the calculation of \"11★10\":\n    if 11 >= 10:\n        ans = 11 + 10\n    else:\n        ans = 11\n\n    return ans\n\nans = solution()"
    ],
    "05e806ec585f447fac70a1de0f7fafd7": [
        "def solution():\n    position_elephant_left = 10\n    position_rabbit_right = 9\n    dolls_between = 5\n    \n    total_dolls = position_elephant_left + position_rabbit_right + dolls_between - 1\n    return total_dolls\n\nans = solution()"
    ],
    "533391b7910c4d72b88782719e955c60": [
        "def solution():\n    result = 0.4 * (11/52) / (2 + 3/4) * (4.3 - 1.8) * 26\n    return result\n\nans = solution()"
    ],
    "d02d6991f9044e2cac9926170d76efbe": [
        "def solution():\n    total_women = 80\n    fraction_men = 5 / 8\n    fraction_children = 1 / 3\n\n    # 1 - fraction_children gives the fraction of adults (men + women)\n    fraction_adults = 1 - fraction_children\n\n    # Since 5/8 of the adults are men, the fraction of adults that are women is 1 - 5/8\n    fraction_women_of_adults = 1 - fraction_men\n\n    # Calculate the total number of adults\n    total_adults = total_women / fraction_women_of_adults\n\n    # Now calculate the total number of spectators\n    total_spectators = total_adults / fraction_adults\n\n    return int(total_spectators)\n\nans = solution()"
    ],
    "8c65dcb55d104655a4964ef2003670c8": [
        "def solution():\n    n = 1  # Initial assumption: there's at least 1 boy in the outer layer\n\n    while True:\n        boys = n * n\n        girls = (n - 2) * (n - 2)\n        if boys - girls == 32:\n            return boys + girls  # Total number of students\n        n += 2  # We increment by 2 since we want to keep the next outer layer to be boys\n\nans = solution()"
    ],
    "4e8d72ffdc694d47a6676b0e8d8108c7": [
        "from sympy import primerange\n\ndef solution():\n    primes = list(primerange(50, 61))  # 61 is exclusive\n    return sum(primes)\n\nans = solution()"
    ],
    "be6d4037b22d46cb906e9ec47cc6b7e7": [
        "def solution():\n    tenth_number = 23\n    fifteenth_number = 38\n    position_difference = 15 - 10\n\n    # Find the common difference\n    common_difference = (fifteenth_number - tenth_number) / position_difference\n\n    # Calculate the first term (a1) using the 10th term formula: an = a1 + (n-1)d\n    a1 = tenth_number - (10 - 1) * common_difference\n\n    # Find the 102nd term using the formula: an = a1 + (n-1)d\n    nth_term = a1 + (102 - 1) * common_difference\n    return nth_term\n\nans = solution()"
    ],
    "16e66be3bead4705bfdef4b05bca2651": [
        "def solution():\n    total_books = 3358\n    english_books = 2047\n    non_english_books = total_books - english_books\n    # Let the number of comics be x.\n    # Therefore, the number of Chinese books will be 2x.\n    # We know that x + 2x = non_english_books\n    comics = non_english_books // 3\n    \n    return comics\n\nans = solution()"
    ],
    "e35edf1fb63a4e5880945617f5b1aa9e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    original_roses, original_daisies, months, planted_each_month = symbols('original_roses original_daisies months planted_each_month')\n    # Equation 1: The total number of roses and daisies is 300\n    equation1 = Eq(original_roses + original_daisies, 300)\n    # Equation 2: After a few months, there are 280 roses\n    equation2 = Eq(original_roses + months * planted_each_month, 280)\n    # Equation 3: After a few months, there are 180 daisies\n    equation3 = Eq(original_daisies + months * planted_each_month, 180)\n    # Equation 4: The planter plants the same number of roses and daisies each month\n    equation4 = Eq(original_roses + original_daisies + 2 * months * planted_each_month, 280 + 180)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (original_roses, original_daisies, months, planted_each_month))\n\n    return solutions[original_roses]\n\nans = solution()"
    ],
    "a01cc16fe4b240daacb5d33d3e822ab6": [
        "def solution():\n    ans = 8.002 + 10.421\n    return ans\n\nans = solution()"
    ],
    "ba03d5e5fb8f453c9e98a6881e4d689b": [
        "def solution():\n    coffee_ratio = 3\n    milk_ratio = 8\n    coffee_litres = 6\n\n    total_ratio = coffee_ratio + milk_ratio\n    latte_litres = (coffee_litres / coffee_ratio) * total_ratio\n\n    return latte_litres\n\nans = solution()"
    ],
    "8945cbc7b9b04405ae4a89f7f6240bbe": [
        "def solution():\n    accurate_shots = 6\n    missed_shots = 4\n    score_per_accurate_shot = 5\n\n    total_score = accurate_shots * score_per_accurate_shot\n    total_shots = accurate_shots + missed_shots\n\n    average_score = total_score / total_shots\n\n    return average_score\n\nans = solution()"
    ],
    "70d30636843c42d0a9438f05f8dc9d7c": [
        "def solution():\n    count_zeros = 0\n    for i in range(1, 201):\n        count_zeros += str(i).count('0')\n    return count_zeros\n\nans = solution()"
    ],
    "9bb2eab82c5d477485d34c73db23335d": [
        "def solution():\n    # Calculate the numerator of the first fraction\n    numerator_1 = (1 / 30) + (1 / 6)\n    # Calculate the denominator of the first fraction\n    denominator_1 = 2 / 25\n    # Divide the numerator by the denominator for the first fraction\n    first_fraction = numerator_1 / denominator_1\n\n    # Calculate the numerator of the second fraction\n    numerator_2 = 2 - (2 / 3)\n    # Calculate the denominator of the second fraction\n    denominator_2 = 8 / 3\n    # Divide the numerator by the denominator for the second fraction\n    second_fraction = numerator_2 / denominator_2\n\n    # Add the two fractions together\n    ans = first_fraction + second_fraction\n\n    return ans\n\nans = solution()"
    ],
    "12c9cf652a084a0780859470b77f7abb": [
        "def solution():\n    count = 0\n    # Iterate over possible number of terms in the sum, from 2 to 7\n    for i in range(2, 8):\n        # Iterate over combinations of i numbers that sum up to 8\n        for combination in range(1, 8):\n            # If we can split 8 into exactly i parts such that each part\n            # is at least 1, we count it as a valid combination.\n            # Since we subtract i from 8 to ensure each term is at least 1,\n            # we then choose i-1 partition points from the 7 possible positions\n            # in the sequence (8-i) to split it into i parts.\n            count += 1\n    return count\n\nans = solution()"
    ],
    "25875cdc332046b7b367fa4d85e5897d": [
        "def solution():\n    total_cost = 11.4\n    total_weight = 0.6\n    cost_per_kilogram = total_cost / total_weight\n    return cost_per_kilogram\n\nans = solution()"
    ],
    "d3338ec2774341618a2a54e2dd8271c5": [
        "def solution():\n    # Assume the number of apples each children gets forms an increasing sequence\n    # a1 < a2 < a3 < a4 < a5 < a6 < a7 < a8\n    # The minimum sequence for 8 numbers where each is at least 1 and different from each other is: 1, 2, 3, 4, 5, 6, 7, 8\n    # a8 - the kid who gets the most apples - will have the least possible apples when the sequence starts with minimum values.\n    # To find a8, we can calculate the sum of the first 7 minimum numbers, subtract from total apples, and that will give us the minimum number for a8.\n\n    min_apples = sum(range(1, 8))  # Sum of minimum apples for 7 children\n    a8 = 50 - min_apples  # Subtract to find the minimum number for the 8th child\n\n    return a8\n\nans = solution()"
    ],
    "8e22c76c78f342539459fe92d4c4cf17": [
        "def solution():\n    total_eggs = 158\n    eggs_per_box = 12\n\n    boxes_needed = (total_eggs + eggs_per_box - 1) // eggs_per_box\n\n    return boxes_needed\n\nans = solution()"
    ],
    "25880b2e8da54b31803560072e23ded7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, orange = symbols('apple orange')\n\n    equation1 = Eq(3 * apple + 5 * orange, 270)\n    equation2 = Eq(3 * apple + 7 * orange, 342)\n\n    solutions = solve((equation1, equation2), (apple, orange))\n\n    return solutions[orange]\n\nans = solution()"
    ],
    "397ebb0d5b224df59aad1f5b774838fd": [
        "def solution():\n    total_men = 40\n    bow_ties = 18\n    spectacles = 23\n\n    # The least number of men wearing both bow ties and spectacles\n    both = bow_ties + spectacles - total_men\n\n    # Greatest number of men not wearing bow ties and not wearing spectacles\n    not_wearing_either = total_men - (bow_ties + spectacles - both)\n    \n    return not_wearing_either\n\nans = solution()"
    ],
    "adb62673a17442e2b006b7f5afbcd666": [
        "def solution():\n    ans = -7 - 4\n    return ans\n\nans = solution()"
    ],
    "457957b559d5468b8aeb74e2ef585f75": [
        "def solution():\n    return 0.50 * 0.20 * 350\n\nans = solution()"
    ],
    "f1b1106045274f7da63ef3c891f87c34": [
        "def solution():\n    train_length = 253\n    tunnel_length = 669\n    speed = 104\n    \n    # The entire train is in the tunnel when its front end comes out of the tunnel.\n    # This means the train needs to cover the length of the tunnel plus its own length.\n    total_distance = train_length + tunnel_length\n    \n    # Time taken to pass the entire distance at the given speed\n    time = total_distance / speed\n    \n    return time\n\nans = solution()"
    ],
    "96b12e33af8a4a438cc3968e7b3f70d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red, green = symbols('blue red green')\n\n    equation1 = Eq(red, blue + 25)\n    equation2 = Eq(green, red + 32)\n    equation3 = Eq(blue + red + green, 112)\n\n    solutions = solve((equation1, equation2, equation3), (blue, red, green))\n\n    return solutions[blue]\n\nans = solution()"
    ],
    "d23d120cfeb64135ab69663205810fbe": [
        "def solution():\n    return (1 / 3) * 414\n\nans = solution()"
    ],
    "7604f69468c6421ebdd1ba850cd8b42d": [
        "def solution():\n    # Starting from the maximum possible number of apples for the child with the most,\n    # we decrement until we find a distribution that satisfies the conditions.\n    # Let's denote the most apples a child can get as max_apples.\n    for max_apples in range(19, 0, -1):\n        # Remaining apples after giving max_apples to one child\n        remaining_apples = 19 - max_apples\n        # Now we need to distribute the remaining apples among 4 children so that\n        # no two of them get the same number of apples and each gets at least 1.\n        # We can calculate the minimum apples that need to be distributed among\n        # the remaining children by giving them 1, 2, 3, ... apples in ascending order.\n        min_required = sum(range(1, 5))  # This is the minimum number of apples required\n        if remaining_apples >= min_required and remaining_apples <= sum(range(15, 19)):\n            # If the remaining_apples is in the range [min_required, sum(range(15, 19))],\n            # we have found a valid distribution where the max_apples can be given to one child.\n            return max_apples\n\n# The function must be called and assigned to a variable 'ans'\nans = solution()"
    ],
    "6bd2a5cd9d044be0ba73d47aa5238bbd": [
        "def solution():\n    from math import factorial\n    \n    # Dan is always at the furthest left, so we consider the remaining 4.\n    # Since Ali and Bala must stand together, we tie them as one entity, so we have 3 entities to arrange (Ali-Bala, Charles, Ella).\n    entity_arrangements = factorial(3)  # 3 entities can be arranged in 3! ways.\n    \n    # Ali and Bala can switch places within their tied entity.\n    ali_bala_arrangements = factorial(2)  # 2! ways to arrange Ali and Bala.\n\n    # The total arrangements are the product of the entity arrangements and Ali-Bala arrangements.\n    total_arrangements = entity_arrangements * ali_bala_arrangements\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "13ec2dec449b48e5b1f5949021f5319a": [
        "def solution():\n    # Owen trades 3 fishes for 2 rabbits: 3 fishes/2 rabbits\n    fishes_per_rabbit = 3 / 2\n\n    # Oscar trades 3 rabbits for 4 packs of wheat: 3 rabbits/4 packs of wheat\n    rabbits_per_wheat = 3 / 4\n    \n    # Calculate how many fishes are equivalent to one pack of wheat\n    fishes_per_wheat = fishes_per_rabbit * rabbits_per_wheat\n    \n    # Calculate how many fishes for 8 packs of wheat\n    fishes_for_eight_wheats = fishes_per_wheat * 8\n\n    return fishes_for_eight_wheats\n\nans = solution()"
    ],
    "bac3e6b470ff4843842320df6d600e95": [
        "from math import gcd\n\ndef solution():\n    return gcd(16, 36)\n\nans = solution()"
    ],
    "fb1c97df146541bebe3162f2e72c1cc0": [
        "def solution():\n    total_digits = 0\n    for i in range(1, 140 + 1):\n        page_number = str(i)\n        total_digits += len(page_number)\n    return total_digits\n\nans = solution()"
    ],
    "6b79f6ee87a44493b182c62048b92e66": [
        "def solution():\n    for tens_place_minuend in range(1, 10):\n        for ones_place_minuend in range(10):\n            minuend = tens_place_minuend * 10 + ones_place_minuend\n            mistaken_subtrahend = 50 + 3\n            correct_subtrahend = 30 + 2\n            mistaken_difference = minuend - mistaken_subtrahend\n            if mistaken_difference == 36:\n                correct_difference = minuend - correct_subtrahend\n                return correct_difference\n\nans = solution()"
    ],
    "b3e5cbab90804708bce6148613126f16": [
        "def solution():\n    # In order to ensure we have 3 balls of different colors, we consider the worst case scenario using the pigeonhole principle.\n    # We take all balls from the most plentiful color, and then all from the second most plentiful color.\n    # After that, we have to take just one more ball to ensure we have all three colors (since it must be a color we haven't drawn yet).\n    \n    red_balls = 15\n    white_balls = 9\n    yellow_balls = 6\n    \n    # Drawing all red balls and all white balls, worst case. Then, one more which will be yellow.\n    balls_drawn = red_balls + white_balls + 1  # +1 for the one yellow ball\n    \n    return balls_drawn\n\nans = solution()"
    ],
    "4f366210af224a9f9f43bbc93ae4f875": [
        "def solution():\n    sequence = [i for i in range(2, 36, 3)]\n    ans = sum(sequence)\n    return ans\n\nans = solution()"
    ],
    "9b13d74bafa4466eb645ffa554df735b": [
        "def solution():\n    total_students = 32 + 28 + 23 + 17\n    num_classes = 4\n    average = total_students / num_classes\n    return average\n\nans = solution()"
    ],
    "9939fb896f824a2881087102f27ab8c3": [
        "def solution():\n    total_length = 11.7\n    used_fence = 3.2\n    used_wood = 6.5\n\n    remaining_length = total_length - (used_fence + used_wood)\n    \n    return remaining_length\n\nans = solution()"
    ],
    "bb27ebca96a14753b3a39b73a2462099": [
        "from itertools import permutations\n\ndef solution():\n    digits = [2, 7, 8]\n    three_digit_numbers = permutations(digits, 3)\n    count = len(list(three_digit_numbers))\n    return count\n\nans = solution()"
    ],
    "ee5084c8c8d24c4bbeb5d061801cc169": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    ellen, lenny = symbols('ellen lenny')\n\n    equation1 = Eq(ellen - 12, (13/24) * (ellen + lenny))\n    equation2 = Eq(lenny - 12, (3/8) * (ellen + lenny))\n\n    solutions = solve((equation1, equation2), (ellen, lenny))\n\n    return solutions[ellen] + solutions[lenny]\n\nans = solution()"
    ],
    "eadf933fa489425a8e7934fbc30dfdf8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    T = symbols('T')\n    income = 120000\n    first_tax_rate = 0.06\n    first_taxed_income = 50000\n    additional_tax_rate = first_tax_rate + T / 100\n    tax_paid = 10000\n\n    equation = Eq(first_taxed_income * first_tax_rate + (income - first_taxed_income) * additional_tax_rate, tax_paid)\n\n    T_value = solve(equation, T)\n\n    return T_value[0]\n\nans = solution()"
    ],
    "1482dca47e9c40c88fa457ae47419d81": [
        "def solution():\n    from itertools import permutations\n\n    min_diff = float('inf')\n    digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n    for perm in permutations(digits):\n        x = int(''.join(map(str, perm[:5])))\n        y = int(''.join(map(str, perm[5:])))\n        # Make sure y is the bigger number to avoid negative results\n        if x > y: \n            x, y = y, x\n        # Ensure we don't have leading zeros making the number effectively 4 digits\n        if x // 10000 == 0 or y // 10000 == 0:\n            continue\n        diff = y - x\n        min_diff = min(min_diff, diff)\n\n    return min_diff\n\nans = solution()"
    ],
    "60b84c6fa7f240ffafb43217e82d66db": [
        "from math import factorial\n\ndef solution():\n    total_presents = 7\n    total_children = 5\n\n    # Function to compute combinations\n    def nCr(n, r):\n        return factorial(n) // (factorial(r) * factorial(n - r))\n\n    # Calculate all possible ways to give away presents without restrictions\n    all_ways = nCr(total_presents, total_children)\n\n    # Calculate ways where Richard and Kevin both don't get what they want\n    ways_both_not_get = nCr(total_presents - 3, total_children)\n\n    # Ways where at least one of Richard or Kevin gets what they want\n    ways_at_least_one_gets = all_ways - ways_both_not_get\n\n    return ways_at_least_one_gets\n\nans = solution()"
    ],
    "05e460cdfe874f2fbb3c0d1f81ffbec5": [
        "def solution():\n    train_length = 200\n    tunnel_length = 500\n    speed = 10\n\n    # Time taken to completely enter the tunnel\n    time_to_enter = train_length / speed\n\n    # Time taken to pass the tunnel after the entire train is inside\n    time_to_pass = tunnel_length / speed\n\n    # Total duration the train is in the tunnel\n    total_time = time_to_enter + time_to_pass\n\n    return total_time\n\nans = solution()"
    ],
    "97138baaf4754087a327cc1e83d8fd4f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    buzz, jessie = symbols('buzz jessie')\n    \n    equation1 = Eq(buzz, 3 * jessie)\n    equation2 = Eq(buzz - jessie, 450)\n\n    solutions = solve((equation1, equation2), (buzz, jessie))\n\n    return solutions[buzz]\n\nans = solution()"
    ],
    "764c50d4619f44199a22a6b9f383ed24": [
        "def solution():\n    cost_per_pound = 49\n    pounds_bought = 2\n    total_cost = cost_per_pound * pounds_bought\n    amount_paid = 100  # £1 is 100p\n    change = amount_paid - total_cost\n    return change\n\nans = solution()"
    ],
    "14c07a0f9d734b5088fba3845ed8db4d": [
        "def solution():\n    from sympy import isprime\n\n    n = 1\n    while True:\n        if isprime(n) and isprime(n + 4) and isprime(n + 6) and isprime(n + 132) and isprime(n + 250):\n            return n\n        n += 1\n\nans = solution()"
    ],
    "f018488d15f94b99915f6422728512b7": [
        "def solution():\n    return 374 * 36\n\nans = solution()"
    ],
    "1695f1a256a845c4b26912c5783eb123": [
        "def solution():\n    total_weight = 200\n    concentration = 0.15\n    sugar_weight = total_weight * concentration\n    return sugar_weight\n\nans = solution()"
    ],
    "23a1e04ca6614f4d99436ccdd578cd9c": [
        "def solution():\n    ans = sum((2 * i + 2) ** 2 - (2 * i) ** 2 for i in range(1, 1010))\n    return ans\n\nans = solution()"
    ],
    "c9a79ce675034b2489e740af3c031037": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Define the symbols for the cost of each rabbit\n    rabbit1, rabbit2, rabbit3 = symbols('rabbit1 rabbit2 rabbit3')\n\n    # The second rabbit costs £2 more than the first = rabbit2 = rabbit1 + 2\n    equation1 = Eq(rabbit2, rabbit1 + 2)\n\n    # The third rabbit costs 80p less than the second = rabbit3 = rabbit2 - 0.8\n    equation2 = Eq(rabbit3, rabbit2 - 0.8)\n\n    # The total cost of the three rabbits is £19.70 = rabbit1 + rabbit2 + rabbit3 = 19.7\n    total_cost = 19.7\n    equation3 = Eq(rabbit1 + rabbit2 + rabbit3, total_cost)\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3), (rabbit1, rabbit2, rabbit3))\n\n    # Get the cost of the first rabbit\n    return solutions[rabbit1]\n\nans = solution()"
    ],
    "2e878688541b46f5b7d0726609b2d7ef": [
        "def solution():\n    ans = 42.3 + 10.5 + 2.7 - 4.5\n    return ans\n\nans = solution()"
    ],
    "56bd9145d93e48f49139ec624dac2068": [
        "def solution():\n    jack_speed = 15  # Jack's speed in km/h\n    rose_speed = 10  # Rose's speed in km/h\n    time = 10        # Time they travel before meeting in hours\n\n    # Relative speed at which Jack is approaching Rose\n    relative_speed = jack_speed - rose_speed\n    \n    # Distance between A and B is the relative speed times the time\n    distance = relative_speed * time\n\n    return distance\n\nans = solution()"
    ],
    "44ecc4dcdaa54831860666d510b464ce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4.6 * x - 0.35, 0.57)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "6bf760b6b8a740cda324d6bb831f42b3": [
        "def solution():\n    # Calculate multiples of 7\n    multiples_of_7 = 5000 // 7\n    \n    # Calculate multiples of 13\n    multiples_of_13 = 5000 // 13\n    \n    # Calculate multiples of both 7 and 13 (7 * 13 = 91)\n    multiples_of_7_and_13 = 5000 // (7 * 13)\n    \n    # Use the Inclusion-Exclusion Principle\n    ans = multiples_of_7 + multiples_of_13 - multiples_of_7_and_13\n    \n    return ans\n\nans = solution()"
    ],
    "b4fbda1fc3454970a479018d78ecff7c": [
        "def solution():\n    number = 48739\n    remainder = number % 3\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = 3 - remainder\n    return ans\n\nans = solution()"
    ],
    "54c307c65d4942e3a14a0c97e9c6453b": [
        "def solution():\n    total_pupils = 467\n    girls = 333\n    teachers = 36\n\n    boys = total_pupils - girls\n    more_boys_than_teachers = boys - teachers\n\n    return more_boys_than_teachers\n\nans = solution()"
    ],
    "70c643f015a64e749fe17245d8f47ced": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    emma_days = symbols('emma_days')\n\n    # David works for (14 - emma_days) days\n    # They basically finish 1/10 + 1/18 of the work each day they work alone\n    equation = Eq((14 - emma_days) * (1/10) + emma_days * (1/18), 1)\n\n    emma_days_solved = solve(equation, emma_days)[0]\n\n    return emma_days_solved\n\nans = solution()"
    ],
    "c40a0a6c89c3412b86d23bb5ec098bae": [
        "def solution():\n    tshirts_bought = 138\n    tshirts_total = 145\n    money_left = 56\n\n    total_cost_for_bought = tshirts_total - tshirts_bought\n    cost_per_tshirt = money_left / total_cost_for_bought\n    total_money_had = cost_per_tshirt * tshirts_total\n\n    return total_money_had\n\nans = solution()"
    ],
    "a65121c2cf9a4a3f88d13765512d893a": [
        "from math import factorial\nfrom itertools import permutations\n\ndef solution():\n    word = 'SUCCESS'\n    unique_letters = set(word)\n    total_length = len(word)\n    total_permutations = factorial(total_length)\n    s_count = word.count('S')\n\n    # Subtract permutations where S's are next to each other\n    for s_sequence_length in range(2, s_count + 1):\n        for positions in permutations(range(total_length), s_sequence_length):\n            if all(abs(pos1 - pos2) == 1 for pos1, pos2 in zip(positions, positions[1:])):\n                total_permutations -= factorial(total_length - s_sequence_length)\n\n    # Divide by the number of permutations of repeated elements\n    for letter in unique_letters:\n        total_permutations //= factorial(word.count(letter))\n\n    return total_permutations\n\nans = solution()"
    ],
    "7a791003812544b6bac377d65f16cb90": [
        "def solution():\n    n = 100\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    sum_of_numbers = n * (n + 1) // 2\n    ans = sum_of_cubes / sum_of_numbers\n    return ans\n\nans = solution()"
    ],
    "d5259f3a5c6e4402838e70389234367f": [
        "def solution():\n    for a in range(10):\n        number = int(f\"1{a}2{a}3{a}4{a}5{a}\")\n        if number % 11 == 0:\n            return a\n\nans = solution()"
    ],
    "75a7726543e04bea836b118cb451097f": [
        "def solution():\n    min_height = 124\n    max_height = 132\n    min_same_height_students = 4\n    \n    # Pigeonhole principle dictates that if you want at least n pigeons in m pigeonholes,\n    # you need at least (n-1)*m + 1 pigeons. Here, pigeonholes are the different possible heights.\n    pigeonholes = max_height - min_height + 1  # possible heights\n    pigeons = (min_same_height_students - 1) * pigeonholes + 1  # students\n    \n    return pigeons\n\nans = solution()"
    ],
    "51ad861e00ec431192e04a5eb59b3380": [
        "def solution():\n    original_pay = 6.50\n    increase_percentage = 12\n    new_pay = original_pay * (1 + increase_percentage / 100)\n    return new_pay\n\nans = solution()"
    ],
    "d2e88cea338f4ce69692532138d94fcb": [
        "def solution():\n    # average of n numbers = sum of n numbers / n\n    # For an arithmetic series, average = (first number + last number) / 2\n    # For 14 consecutive even numbers, the common difference is 2\n    # 119 = (first_number + last_number) / 2\n    # last_number = first_number + 2 * (14 - 1)\n    # 119 = (first_number + first_number + 2 * (14 - 1)) / 2\n    # solving for first_number\n    first_number = (119 * 2) - 2 * (14 - 1)\n    return first_number\n\nans = solution()"
    ],
    "f1d598e9e6754a5fb544e02dd210fd8f": [
        "def solution():\n    time_per_cut = 12 / (5 - 1)  # Time to make one cut\n    time_for_5_cuts = time_per_cut * 5  # Time to make 5 cuts\n    \n    return time_for_5_cuts\n\nans = solution()"
    ],
    "cba5a4b77fcc4b47a485159e97c6c596": [
        "def solution():\n    total_amount_pence = 126  # Convert £1.26 to pence\n    value_2p = 2\n    value_5p = 5\n\n    # Let the number of 2p coins be x, and therefore the number of 5p coins is also x.\n    # Thus, the total amount in pence is 2x + 5x = 7x\n    # We need to find a number x such that 7x equals the total_amount_pence\n\n    # Check if the total amount is divisible by 7 (since 2p + 5p = 7p per set of one 2p and one 5p)\n    if total_amount_pence % 7 == 0:\n        # The number of coins of each type is the total amount divided by 7 (since 2p+5p=7p)\n        num_coins_each_type = total_amount_pence // 7\n        # The total number of coins is the number of coins of each type times 2 (since there are two types of coins)\n        total_coins = num_coins_each_type * 2\n        return total_coins\n    else:\n        return \"No solution\"\n\nans = solution()"
    ],
    "473dae367faa457db6245d50b030a2d2": [
        "def solution():\n    # The ones digit of powers of 3 cycle every 4 powers: 3, 9, 7, 1, ... \n    # We can find the position in the cycle using modulo 4\n    cycle_position = 2009 % 4 \n\n    # Cycle patterns for the ones digit of powers of 3:\n    # 3^1 -> 3, 3^2 -> 9, 3^3 -> 7, 3^4 -> 1, then it repeats...\n    ones_digit_cycle = [3, 9, 7, 1]\n\n    # As the pattern repeats every 4, we get the ones digit from the cycle\n    ones_digit = ones_digit_cycle[cycle_position - 1]  # -1 because list indices start at 0\n\n    return ones_digit\n\nans = solution()"
    ],
    "acc5ff5f2838429d9de00e4ee08fb1fa": [
        "def solution():\n    # Let the total number of people at the party be x\n    # Adults = (2/5) of x\n    # Remaining = x - (2/5)x = (3/5)x\n    # Boys = (5/9) of remaining = (5/9)(3/5)x = (1/3)x\n    # Girls = Remaining - Boys = (3/5)x - (1/3)x\n    # We know there are 36 girls so:\n    # (3/5)x - (1/3)x = 36\n    # To solve for x, we'll first find a common denominator for the fractions\n    # 9*(3/5)x - 5*(1/3)x = 9*36\n    # (9*3/5 - 5/3)x = 9*36\n    # ((27 - 5)/15)x = 324\n    # (22/15)x = 324\n    # x = (324 * 15) / 22\n    x = (324 * 15) // 22\n    return x\n\nans = solution()"
    ],
    "074c52d7c8884541a53bd81c8516e4ae": [
        "def solution():\n    num = 2\n    while True:\n        if num % 2 == 0 and num % 5 == 0 and (num ** 0.5).is_integer():\n            return num\n        num += 2  # Increment by 2 since we're looking for an even number\n\nans = solution()"
    ],
    "76292cab066c4804960c0eb334442333": [
        "def solution():\n    child_discount = 0.25\n    senior_discount = 0.20\n\n    child_ticket_cost = 30\n    adult_ticket_cost = child_ticket_cost / (1 - child_discount)\n    senior_ticket_cost = adult_ticket_cost * (1 - senior_discount)\n    \n    return senior_ticket_cost\n\nans = solution()"
    ],
    "35fcb930a0bc41a894f13b4d2d264e48": [
        "def solution():\n    men_days = 3 * 30  # Total man-days to build the house\n    days_for_2_people = men_days / 2  # Calculate the number of days for 2 people\n    return days_for_2_people\n\nans = solution()"
    ],
    "ceda71c2bab34d10981c8cc631f857e6": [
        "def solution():\n    for number in range(10, 100):\n        if number % 3 == 0 and number % 7 == 0:\n            return number\n\nans = solution()"
    ],
    "f3b9f2f5f0a543b39b7bca6031d203f9": [
        "from sympy.functions.combinatorial.numbers import nT\n\ndef solution():\n    # nT is used for Stirling numbers of the second kind, which represents\n    # the number of ways to partition a set of n objects into k non-empty containers.\n    # We need to consider empty containers; hence, we add one to each partition.\n    ways = nT(20 + 4 - 1, 4)\n    return ways\n\nans = solution()"
    ],
    "203d878b270d4d88a12ed23389c40a46": [
        "def solution():\n    first_term = 1\n    last_term = 97\n    difference = 2\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "ac50d3117292453c911bc6e43ec859a8": [
        "def solution():\n    ways_for_trains = 3\n    ways_for_cars = 4\n    ways_for_boats = 2\n\n    total_ways = ways_for_trains + ways_for_cars + ways_for_boats\n\n    return total_ways\n\nans = solution()"
    ],
    "b7384c3ef6ce4e10accddb590b454709": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    will_now = symbols('will_now')  # Let will_now be Will's current age\n    \n    # Create the equation based on the problem statement\n    equation = Eq(will_now + 8, 4 * (will_now - 4))\n    \n    # Solve the equation\n    solved_age = solve(equation, will_now)\n\n    return solved_age[0]\n\nans = solution()"
    ],
    "f15729b8c3bf42758bf674b97e695b4a": [
        "def solution():\n    total_pages = 981\n    pages_per_day = 25\n    \n    days_to_finish = total_pages // pages_per_day\n\n    # If there are leftover pages, add an extra day\n    if total_pages % pages_per_day != 0:\n        days_to_finish += 1\n\n    return days_to_finish\n\nans = solution()"
    ],
    "e8ac97a4703d48e3a8d90b8986df72d1": [
        "from math import comb\n\ndef solution():\n    # each child gets at least two books, so we remove 2*5=10 books from the total\n    remaining_books = 30 - 5 * 2\n    \n    # now we need to divide the remaining 20 books among 5 children\n    # this is equivalent to placing 4 (one less than number of kids) separators \n    # in the 20 books (stars and bars/balls and urns problem)\n    # so we calculate the combinations of 24 places taken 4 at a time\n    ways = comb(remaining_books + 5 - 1, 5 - 1)\n    return ways\n\nans = solution()"
    ],
    "a6292732361347fa8c864895f6e10ae3": [
        "def solution():\n    return 6846 * 8\n\nans = solution()"
    ],
    "7988af13cd9a4c19b46db9fc0c0bb229": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    mike, mason, chewy = symbols('mike mason chewy')\n    \n    equation1 = Eq(mason, 2/3 * chewy)\n    equation2 = Eq(chewy, 2/5 * mike)\n    equation3 = Eq(mike - mason, 550)\n    \n    solutions = solve((equation1, equation2, equation3), (mike, mason, chewy))\n    \n    total_soup = solutions[mike] + solutions[mason] + solutions[chewy]\n    # Convert from milliliters to liters\n    total_soup_liters = total_soup / 1000\n    \n    return total_soup_liters\n\nans = solution()"
    ],
    "06e06b65731b4ae182bc34f8bdf78ad2": [
        "def solution():\n    initial_amount = 1000\n    interest_rate = 0.06\n    number_of_years = 2\n    \n    final_amount = initial_amount * ((1 + interest_rate) ** number_of_years)\n    \n    return final_amount\n\nans = solution()"
    ],
    "65c188bedd614322a61cdc7a8fd0c01b": [
        "def solution():\n    total_girls = 28\n    likes_one_direction = 20\n    likes_the_vamps = 17\n    likes_both = 15\n\n    likes_either = likes_one_direction + likes_the_vamps - likes_both\n    likes_neither = total_girls - likes_either\n\n    return likes_neither\n\nans = solution()"
    ],
    "d634317608b54dbcb954484f4a8c548c": [
        "def solution():\n    road_length = 500\n    interval = 5\n\n    # Number of intervals is one less than the number of trees (since trees are at both ends)\n    num_intervals = road_length // interval\n\n    # Add one to account for the tree at the starting point\n    num_trees = num_intervals + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "2b895d9f585d4c72b559deecf56f1079": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let 'j' be the cost of one jug and 'c' be the cost of one cup\n    j, c = symbols('j c')\n\n    # Create the equations based on the given information\n    equation1 = Eq(4*j + 5*c, 85)\n    equation2 = Eq(2*j + 2*c, 40)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (j, c))\n\n    return solutions[c]\n\nans = solution()"
    ],
    "f3ea48411a6c498184b21b3604aa2db8": [
        "def solution():\n    # We assume that Susan pays with the smallest number of the largest coins, to minimize the total number of coins\n    # First we will try with £1 coins, then proceed down to smaller denominations\n\n    # In UK the denominations of coins are:\n    # £2, £1, 50p, 20p, 10p, 5p, 2p, and 1p\n\n    # We need to give Susan 44p change\n\n    # initialize variable to track the smallest number of coins\n    smallest_num_coins = float('inf')\n    \n    # Iterate the possible amounts Susan can pay with\n    for amount_paid in [200, 100, 50, 20, 10, 5, 2, 1]:\n        # Calculate number of coins needed to make up that payment, if it is less than £2\n        num_coins_paid = 1 if amount_paid <= 200 else 2  # If she pays more than £1, she uses two £1 coins\n\n        # Calculate the change needed\n        change_needed = amount_paid - 44\n\n        # Initialize counter for change coins\n        change_coins = 0\n\n        # Try giving change using the largest coins possible\n        for coin in [200, 100, 50, 20, 10, 5, 2, 1]:\n            # while we can use this coin to give change, do so\n            while change_needed >= coin:\n                change_needed -= coin\n                change_coins += 1\n        \n        # calculate total number of coins that change hands\n        total_coins = num_coins_paid + change_coins\n\n        # if total coins is less than smallest_num_coins, update smallest_num_coins\n        if total_coins < smallest_num_coins:\n            smallest_num_coins = total_coins\n\n    return smallest_num_coins\n\nans = solution()"
    ],
    "1bee107571854f2d87bb88f1fc9b38c1": [
        "from itertools import permutations\nfrom fractions import Fraction\n\ndef solution():\n    # Define the fractions\n    fractions = [(1, 2), (1, 9), (1, 3), (1, 8), (1, 4), (1, 7), (1, 5), (1, 6)]\n    \n    # Generate all possible permutations of the operations\n    operations = permutations(['+', '-', '*', '/'])\n    \n    # Initialize the largest sum\n    largest_sum = 0\n    best_combo = None\n    \n    # Loop through all combinations of operations\n    for op in operations:\n        # Calculate the expression values for each operation set\n        expr_values = []\n        expr_values.append(eval(f\"Fraction{fractions[0]}{op[0]}Fraction{fractions[1]}\"))\n        expr_values.append(eval(f\"Fraction{fractions[2]}{op[1]}Fraction{fractions[3]}\"))\n        expr_values.append(eval(f\"Fraction{fractions[4]}{op[2]}Fraction{fractions[5]}\"))\n        expr_values.append(eval(f\"Fraction{fractions[6]}{op[3]}Fraction{fractions[7]}\"))\n        \n        # Find the sum of the expressions\n        current_sum = sum(expr_values)\n        \n        # Update largest sum and corresponding expression values if a larger sum is found\n        if current_sum > largest_sum:\n            largest_sum = current_sum\n            best_combo = expr_values\n\n    # Sort the expression values to find the second largest term\n    best_combo_sorted = sorted(best_combo, reverse=True)\n    second_largest = best_combo_sorted[1]\n    \n    # Simplify the second largest fraction\n    second_largest = second_largest.limit_denominator()\n    \n    # Calculate A+B\n    A = second_largest.numerator\n    B = second_largest.denominator\n    ans = A + B\n\n    return ans\n\nans = solution()"
    ],
    "7c988a58a14c48c19fd7ebda71673015": [
        "def solution():\n    classrooms = 27\n    chairs_each = 28\n    total_chairs = classrooms * chairs_each\n    return total_chairs\n\nans = solution()"
    ],
    "ce2a11f3530044e69f0f940d2177c842": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Define the variable\n    x = symbols('x')\n\n    # Define the inequality equation\n    inequality = (x + 3) / (2 * x + 5) > 0.505\n\n    # Solve for x\n    sol = solve(inequality, x)\n\n    # Since x must be an integer (number of games won can't be a fraction) and less than 47.5\n    # we take the integer part of 47.5, which is 47, but we need to find the largest number of matches\n    # he could have won before the weekend began that is LESS than 47.5, so we subtract one.\n    largest_number_won = int(sol[0]) - 1\n\n    return largest_number_won\n\nans = solution()"
    ],
    "240bc3106e614b409ed75b112d8a5572": [
        "def solution():\n    ans = sum((-1)**(k+1) * (2*k) for k in range(1, 45))\n    return ans\n\nans = solution()"
    ],
    "982d68ff78fb4d07914cf20c9a917bb2": [
        "def solution():\n    total_pupils = 235 + 567\n    pupils_each_room = total_pupils // 2  # Integer division as we can't have partial pupils\n    return pupils_each_room\n\nans = solution()"
    ],
    "faaa8deed0db48a0b6707146113de1c2": [
        "def solution():\n    ans = 818 - 271 - 18 + 64 - 29 + 36\n    return ans\n\nans = solution()"
    ],
    "27bdd20547f24d8985bedec355b3bcb2": [
        "def solution():\n    ans = 193 * 72\n    return ans\n\nans = solution()"
    ],
    "b0db81c8fe684031982ca97bbbbe4f6c": [
        "def solution():\n    spent_amount = 89.65\n    remaining_amount = 20.35\n\n    initial_amount = spent_amount + remaining_amount\n    \n    return initial_amount\n\nans = solution()"
    ],
    "fe9555e52b6940b58bc0240731da3d6c": [
        "def solution():\n    tenth_term = 23\n    fifteenth_term = 38\n    term_difference = fifteenth_term - tenth_term\n    common_difference = term_difference // (15 - 10)\n\n    twelfth_term = tenth_term + (12 - 10) * common_difference\n\n    return twelfth_term\n\nans = solution()"
    ],
    "e25bc60d63ca444999ac89d8eb2ef5f4": [
        "def solution():\n    def f(n):\n        return n * (n + 1) // 2\n    \n    s = 0\n    for i in range(1, 8):\n        s += i / (f(i) * f(i+1))\n    s += 1 / f(8)\n    \n    ans = s\n    return ans\n\nans = solution()"
    ],
    "1b578ba89dc64a0497a494ff8c376cf1": [
        "def solution():\n    from math import gcd\n\n    class_A = 24\n    class_B = 36\n    class_C = 42\n\n    # Calculate the greatest common divisor of all three class sizes\n    gcd_AB = gcd(class_A, class_B)\n    gcd_ABC = gcd(gcd_AB, class_C)\n\n    return gcd_ABC\n\nans = solution()"
    ],
    "bfc856ed693948c5bc8692af12953e1d": [
        "def solution():\n    total_points = 12\n\n    # formula for combination nCr = n! / r!(n-r)!\n    # choosing 3 points out of 12\n    ways_to_choose_3_points = (total_points * (total_points - 1) * (total_points - 2)) // (3 * 2 * 1)\n\n    # Since it's a circle with equal distances between adjacent points, \n    # a right triangle will only occur when the points are such that \n    # one side is the diameter of the circle. This happens when we choose\n    # any point (12 choices), and then the point exactly opposite to it (1 choice),\n    # and any of the remaining 10 points. So for each point, there are 10 ways to form a right angle triangle.\n\n    # Each right triangle is counted twice because we can choose the third point in two different orders\n    # (clockwise or counter-clockwise), we divide the total number by 2.\n    right_angle_triangles = (total_points * 10) // 2\n\n    return right_angle_triangles\n\nans = solution()"
    ],
    "caef56015c2546c787649e8de4983b71": [
        "def solution():\n    ans = sum([4 * i for i in range(1, 101)]) - 2 * sum([2 * i - 1 for i in range(1, 101)])\n    return ans\n\nans = solution()"
    ],
    "f920596541b54c59bae5257c1fa6effd": [
        "def solution():\n    children = 200\n    daily_lunch_cost = 4.36\n    days = 5\n\n    total_cost = children * daily_lunch_cost * days\n\n    return total_cost\n\nans = solution()"
    ],
    "513db53d54374f00afb65d6d0f973de3": [
        "def solution():\n    total_questions = 20\n    correct_points = 5\n    wrong_points = -3\n\n    for correct in range(total_questions + 1):\n        wrong = total_questions - correct\n        if correct * correct_points + wrong * wrong_points == 76:\n            return correct\n\nans = solution()"
    ],
    "c502fd8bef51420684df77fd33225144": [
        "def solution():\n    fraction = 3/8\n    whole_number = 16\n    result = fraction * whole_number\n    return result\n\nans = solution()"
    ],
    "fc6d0ef4b64c44a4900d03d68cbc4621": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cp = symbols('cp')  # cp represents the cost price\n    marked_price = 1.2 * cp\n    selling_price = 0.9 * marked_price # 90% of the marked price\n    profit = selling_price - cp\n\n    equation = Eq(profit, 120)\n    solutions = solve(equation, cp)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "e45242e744df43f9909a012add8cd759": [
        "def solution():\n    total_sheep = 128\n    black_sheep = (5/8) * total_sheep\n    white_sheep = (1/4) * total_sheep\n    brown_sheep = total_sheep - black_sheep - white_sheep\n    return int(brown_sheep)\n\nans = solution()"
    ],
    "8e0574e136cb4a76abf5378d8154a43a": [
        "def solution():\n    cost_per_person = 27.60\n    group_size = 38\n    total_cost = cost_per_person * group_size\n    return total_cost\n\nans = solution()"
    ],
    "e9e3eafe8b3e48d3b2a71156f1fe9aae": [
        "def solution():\n    balls_per_box = 25 // 5\n    total_balls_in_6_boxes = balls_per_box * 6\n    return total_balls_in_6_boxes\n\nans = solution()"
    ],
    "b84b9d049f3944a6a3fec6f34b08dcdd": [
        "from sympy import symbols, Eq, solve, Abs\n\ndef solution():\n    x = symbols('x')\n    equation = Eq(Abs(x + 1), 2*x + 5)\n    solutions = solve(equation, x)\n\n    return solutions\n\nans = solution()"
    ],
    "1f71711a37ba41f19b391be626ee7d84": [
        "def solution():\n    from math import factorial\n\n    # For four different colored socks\n    ways_for_diff_socks = factorial(4)\n\n    # For two different colored pairs of socks (2 socks of each color)\n    # We treat a pair of the same color as one 'item' for permutation.\n    # But since they are identical, we need to divide by factorial of each pair count (factorial(2) for each pair).\n    ways_for_same_socks = factorial(4) // (factorial(2) * factorial(2))\n\n    ans = (ways_for_diff_socks, ways_for_same_socks)\n    return ans\n\nans = solution()"
    ],
    "63250d13de624f798109236462057294": [
        "def solution():\n    num1 = 13.8\n    num2 = 18.6\n    ans = (num1 + num2) / 2\n    return ans\n\nans = solution()"
    ],
    "cc66abc29793482fb9eb2797063a599e": [
        "def solution():\n    return 7 * 4 * 37\n\nans = solution()"
    ],
    "2a26499da5b34ec8944d958d53314106": [
        "def solution():\n    ans = 9 * 59\n    return ans\n\nans = solution()"
    ],
    "273702e9fdfb4478a973714e3892e8a8": [
        "def solution():\n    num_people = 4\n    handshakes = num_people * (num_people - 1) // 2\n    return handshakes\n\nans = solution()"
    ],
    "3d56a142b7734cae80fcd6db270a1a50": [
        "def solution():\n    # Loop through possible values of a and b\n    for a in range(1, 10):  # a cannot be 0 as it is the first digit\n        for b in range(0, 10):  # b can be 0-9\n            # Form the numbers based on the given conditions\n            ab = 10 * a + b  # The number formed by digits a and b\n            ba = 10 * b + a  # The number formed by digits b and a\n            aab = 100 * a + 10 * a + b  # The number formed by aab\n            # Check if the condition is satisfied\n            if ab + ba + b == aab:\n                return a + b\n\nans = solution()"
    ],
    "336b55c1b98a494a8fcdec5a76129b58": [
        "from math import comb\n\ndef solution():\n    num_points = 10\n    num_vertices = 3\n    ans = comb(num_points, num_vertices)\n    return ans\n\nans = solution()"
    ],
    "a3e7cbd795a9409dbf490a20013698fc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andre, beth = symbols('andre beth')\n\n    # Andre and Beth both had a total of 24 sweets\n    equation1 = Eq(andre + beth, 24)\n    \n    # After their teacher gave them 4 sweets each, Andre now has 6 sweets more than Beth\n    equation2 = Eq((andre + 4) - (beth + 4), 6)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (andre, beth))\n\n    # Return the value for Beth's sweets after receiving 4 more\n    return solutions[beth] + 4\n\nans = solution()"
    ],
    "b6b88edeb93e4d9cb9b8b1211d07bf53": [
        "def solution():\n    return 246 * 507\n\nans = solution()"
    ],
    "ebaac819520a41bea5853ed02b80e219": [
        "def solution():\n    first_term = 4\n    last_term = 121\n    difference = 3\n\n    num_terms = ((last_term - first_term) // difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "de94f3e9046049bda163af8199fad009": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    table_mass, chair_mass = symbols('table_mass chair_mass')\n    equation1 = Eq(3 * table_mass, 4 * chair_mass)\n    equation2 = Eq(table_mass, chair_mass + 2)\n\n    solutions = solve((equation1, equation2), (table_mass, chair_mass))\n\n    return solutions[table_mass]\n\nans = solution()"
    ],
    "fa9cbee13c99485d8303b1f5e6225e5c": [
        "def solution():\n    taller_than_180 = 4500\n    taller_than_190 = 750\n\n    between_180_and_190 = taller_than_180 - taller_than_190\n\n    return between_180_and_190\n\nans = solution()"
    ],
    "27eb9e5bd22f43eba7fb2e1a0973e1ba": [
        "def solution():\n    import math\n    # Judy can stand in 2 different positions (either end of the line)\n    judy_positions = 2\n    # The remaining 5 friends can stand in any order\n    friends_permutations = math.factorial(5)\n    # Total different ways they can perform is the product of the two possibilities\n    total_ways = judy_positions * friends_permutations\n    return total_ways\n\nans = solution()"
    ],
    "b9605682663c4e549e208dbbe926ff31": [
        "def solution():\n    # The winning strategy would be to always leave the opponent with a number of apples\n    # that is a multiple of 4 after your turn. This is because no matter what move the opponent makes (1, 2, or 3 apples),\n    # you can always take the remaining number of apples back to a multiple of 4.\n    \n    # For the initial turn, since there are 18 apples, you want to leave 16 apples (which is a multiple of 4)\n    # for the opponent. Therefore, Anthea should take 2 apples in the first turn.\n    \n    # Anthea's first move\n    # Anthea wants to make the total number of apples left (18 - apples_taken_by_anthea) a multiple of 4.\n    \n    initial_apples = 18\n    apples_taken_by_anthea = initial_apples % 4\n    \n    # If the result is 0, it means the initial number of apples is already a multiple of 4,\n    # then Anthea should just take 1 apple to avoid giving Ben a winning position.\n    apples_taken_by_anthea = apples_taken_by_anthea or 1\n    \n    return apples_taken_by_anthea\n\nans = solution()"
    ],
    "015af54f56854424960c5b919f820761": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    andre, beth = symbols('andre beth')\n    \n    # Equation 1: The total sweets Andre and Beth had originally\n    equation1 = Eq(andre + beth, 24)\n    \n    # Equation 2: After receiving 4 sweets each, Andre has 6 more sweets than Beth\n    equation2 = Eq(andre + 4, beth + 4 + 6)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (andre, beth))\n    \n    return solutions[beth]\n\nans = solution()"
    ],
    "af2115488bfc4cbfbf5f5ebb0bff2bef": [
        "def solution():\n    cost_per_bar = 3.18 / 6\n    cost_for_5_bars = cost_per_bar * 5\n    return cost_for_5_bars\n\nans = solution()"
    ],
    "e4f74093db054f9a9afeb2f53b05b7d1": [
        "def solution():\n    ans = sum([9, 12, 17, 18, 21, 23])\n    return ans\n\nans = solution()"
    ],
    "6e7fd510bdaa4c41b99c4531bc548e9a": [
        "def solution():\n    overtakes = 5\n    final_position = 2\n    total_cars = overtakes + final_position\n    return total_cars\n\nans = solution()"
    ],
    "c1faa5b5faaf44929efa78451a63ff75": [
        "def solution():\n    result_after_operations = 2\n    original_number = (result_after_operations * 12) + 6\n    return original_number\n\nans = solution()"
    ],
    "539a3a5cc52d4011bfeede240f8dd840": [
        "def solution():\n    count = 0\n    for i in range(1000, 10000):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "6dc506c916024720a5dab28d29fdcb33": [
        "def solution():\n    # Initialising the sum of four numbers\n    total_sum_of_four_numbers = 130 * 4\n\n    # Average of three numbers after one is removed\n    average_of_three_numbers = 110\n\n    # Sum of the three numbers is the average times three\n    total_sum_of_three_numbers = average_of_three_numbers * 3\n\n    # The number which is removed is the difference between the total sum of four numbers and total sum of three numbers\n    number_removed = total_sum_of_four_numbers - total_sum_of_three_numbers\n\n    return number_removed\n\nans = solution()"
    ],
    "ab627271938f40748d9acac110c92172": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols\n    m_younger, e_younger, m_elder, e_elder = symbols('m_younger e_younger m_elder e_elder')\n    \n    # Create the equations based on the problem statement\n    equation1 = Eq(m_elder, m_younger + 10)                # Elder sister spent 10 minutes more on maths\n    equation2 = Eq(e_younger, e_elder + 4)                 # Younger sister spent 4 minutes more on English\n    equation3 = Eq(m_elder + e_elder, 88)                  # Elder sister spent a total of 88 minutes\n    equation4 = Eq(m_younger + 12, e_younger)              # Younger sister spent 12 minutes less on her maths than English\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4), (m_younger, e_younger, m_elder, e_elder))\n    \n    # Return the time spent by the younger sister on English homework\n    return solutions[e_younger]\n\nans = solution()"
    ],
    "bbd5dd551d4b4d7abc9f239251339ad1": [
        "def solution():\n    nick_spoons = 12\n    pilpha_rings = 6\n    value_per_spoon = (3/4) * (pilha_rings / nick_spoons)\n    spoons_equal_to_3_rings = 3 / value_per_spoon\n    return spoons_equal_to_3_rings\n\nans = solution()"
    ],
    "f8f8aec9479848be90565270cd0b38f4": [
        "from sympy import lcm\n\ndef solution():\n    # Convert minutes to seconds for calculation convenience\n    # The first traffic light changes lights every 60 seconds\n    # The second traffic light changes lights every 90 seconds\n    # We now need to find the LCM of 60 and 90 which gives us the duration at which both 1st\n    # and 2nd traffic lights change simultaneously. We divide this by 2 to find the frequency\n    # at which the 3rd light must change to synchronize with the other two\n    first_light = 60  # 1 minute in seconds\n    second_light = 90  # 1.5 minutes in seconds\n    lcm_two_lights = lcm(first_light, second_light)\n\n    # The third light must change at this frequency or a factor of this frequency\n    # which is at least 30 seconds or longer.\n    for third_light in range(30, lcm_two_lights + 1, 30):\n        if lcm_two_lights % third_light == 0:\n            return third_light / 60  # Convert seconds back to minutes\n\nans = solution()"
    ],
    "9c9e21c3a7444569afbadf1e30e09b81": [
        "def solution():\n    boys_diff = 55\n    total_students = 0\n\n    # Let n be the side length of the square layer for boys,\n    # and m be the side length of the square layer for girls.\n    # The total number of boys will be n^2 and of girls will be (n-2)^2.\n\n    # We loop through potential values for the side length of the boys' square.\n    for n in range(1, 100):  # Assuming 100 is a safe upper limit for a school playground\n        girls = (n - 2) ** 2 if n > 1 else 0  # There must be at least one layer of boys\n        boys = n ** 2\n        if boys - girls == boys_diff:\n            # Calculate total students in all layers until the calculated layer\n            total_students = sum((2*i + 1)**2 for i in range((n+1)//2))\n            break\n\n    return total_students\n\nans = solution()"
    ],
    "43c61058429c4fe489d7c947a01763c2": [
        "def solution():\n    # Assuming optimal play, Leo needs to make his moves to force Mia into situations where she cannot win.\n    # A winning strategy involves leaving a multiple of 3 apples for the other player.\n    total_apples = 14\n    \n    # Leo can win if he leaves 13 or 12 apples, which are not multiples of 3, meaning Mia cannot force a win from there.\n    # Leo cannot pick 3 apples, so either 1 or 2. To leave Mia with a non-multiple of 3:\n    # - If Leo picks 1 apple, Mia will have 13 apples left and can still win by using the same strategy.\n    # - If Leo picks 2 apples, Mia will have 12 apples left, which is not optimal for Mia.\n\n    # Hence to ensure his victory, Leo must take away 2 apples.\n    leo_pick = 2\n\n    return leo_pick\n\nans = solution()"
    ],
    "a7eb63b14ee740bca350f5e3f57ea487": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pencil, marker = symbols('pencil marker')\n\n    equation1 = Eq(3 * pencil + 2 * marker, 13)\n    equation2 = Eq(2 * pencil + 3 * marker, 12)\n\n    solutions = solve((equation1, equation2), (pencil, marker))\n    \n    total_cost = 7 * solutions[pencil] + 7 * solutions[marker]\n    \n    return total_cost\n\nans = solution()"
    ],
    "a29766e9a35b4cf986fe192653492fb5": [
        "def solution():\n    total_weight = 65\n    male_teachers = 3\n    male_average = 75\n    female_average = 60\n    \n    total_male_weight = male_teachers * male_average\n    spare_weight = total_weight - male_average\n    female_teachers = total_male_weight // (female_average - total_weight)\n    \n    return female_teachers\n\nans = solution()"
    ],
    "0a147c77462a47acad9d599e3c92987b": [
        "def solution():\n    return 527 - 382\n\nans = solution()"
    ],
    "cf55459e46844705ab8a79455735ac26": [
        "def solution():\n    # Calculate rows and columns based on Cora's position\n    rows = 5 + 7 - 1\n    columns = 2 + 4 - 1\n\n    # Calculate the total number of students in the formation\n    total_students = rows * columns\n\n    return total_students\n\nans = solution()"
    ],
    "dca6b59a57004164891b83c2be747227": [
        "def solution():\n    # Price of a whiteboard marker\n    price_marker = 3\n    # Price of a paintbrush\n    price_brush = 1\n    # Total cost \n    total_cost = 28\n    # Total number of items\n    total_items = 12\n    \n    # Assume all items are paintbrushes first to find the maximum possible number of markers\n    max_markers = total_cost // price_marker\n    \n    # Find the correct number of markers by iterating from 0 to maximum possible markers\n    for markers in range(max_markers + 1):\n        # Calculate the cost of the markers\n        cost_markers = markers * price_marker\n        # Calculate the number of paintbrushes \n        brushes = total_items - markers\n        # Calculate the cost of the paintbrushes\n        cost_brushes = brushes * price_brush\n        # Check if the total cost matches the actual spending\n        if cost_markers + cost_brushes == total_cost:\n            return markers\n\nans = solution()"
    ],
    "58c3353b6ce0476d96bec02a41fe9aa6": [
        "def solution():\n    return 40 * 700\n\nans = solution()"
    ],
    "f6a6b8973f3d4d1ca73c2a8e344b2022": [
        "def solution():\n    from math import factorial\n\n    # Since Star must be the first runner, there are 4 remaining positions\n    # We calculate the permutations for the 4 remaining teammates\n    ways = factorial(4)  # 4!\n    \n    return ways\n\nans = solution()"
    ],
    "e357740e701e49a8ac92bfcd275f4557": [
        "def solution():\n    from sympy import isqrt\n    \n    # Find the prime factorization of the product (except for m)\n    # 33 = 3 * 11\n    # 55 = 5 * 11\n    # Product (without m) = 3 * 5 * 11^2\n    # To make it a perfect square, we should multiply by 3 * 5 to get 3^2 * 5^2 * 11^2\n    m = 3 * 5\n    \n    # Verify that the result is indeed a square number\n    assert (33 * 55 * m) == isqrt(33 * 55 * m)**2\n    \n    return m\n\nans = solution()"
    ],
    "a40fe8c3642a46819ca618c1a9afcf63": [
        "def solution():\n    # Since each plate has at least 2 pieces, we place 2 pieces on each plate at the start.\n    placed_candies = 2 * 3\n\n    # The remaining candies to distribute\n    remaining_candies = 8 - placed_candies\n\n    # The problem now is to distribute the \"remaining_candies\" into 3 plates freely\n    # This is a combination problem with repetition allowed: (n+r-1) C (r-1)\n    # where n is the remaining_candies and r is the number of plates\n    \n    # Import comb function from math module for combinations calculation\n    from math import comb\n\n    # Calculate the number of combinations\n    num_ways = comb(remaining_candies + 3 - 1, 3 - 1)\n\n    return num_ways\n\nans = solution()"
    ],
    "307081f49a1647b9bb92dfaffe694842": [
        "def solution():\n    # We will iterate through all 4-digit numbers with increasing digits\n    for i in range(1000, 10000):\n        digits = str(i)\n        if digits == ''.join(sorted(digits)) and len(set(digits)) == 4:\n            # Reverse the digits to get the second number\n            reverse_digits = digits[::-1]\n            # We will iterate through permutations of the digits to find the third number\n            from itertools import permutations\n            for perm in permutations(digits):\n                if ''.join(perm) != digits and ''.join(perm) != reverse_digits:\n                    third_num = int(''.join(perm))\n                    if i + int(reverse_digits) + third_num == 26352:\n                        return min(i, int(reverse_digits), third_num)\n\nans = solution()"
    ],
    "384faa4ecc0e47d79e49dfce00412c19": [
        "def solution():\n    # The operation seems to be producing a pattern. Let's deduce the pattern from the given examples.\n    # From the given examples, we can try to discern a pattern or operation that combines the two numbers to give the result.\n    # Let's assume the operation is a combination of multiplication and addition/subtraction of the digits in some form.\n    # We could try to find a function f(x, y) = a*x*b + c*y*d, where a, b, c, and d are coefficients we need to find.\n    # Since we don't have a direct formula, we need to use the given examples to try and figure it out. \n\n    # Given examples\n    # 2*4 -> 44: Here, the result is more than just multiplication of 2 and 4. It could be (2*4) + (2+4)*10.\n    # 5*7 -> 104: Similarly, it could be (5*7) + (5+7)*10 - 1*10.\n    # 1*5 -> 28: This might be (1*5) + (1+5)*4.\n    # 7*10 -> 146: This could be (7*10) + (7+10)*10 - 4*10.\n\n    # From the above, we can see that each time we are multiplying the sum of the two numbers by 10 and adding it\n    # to the product of the two numbers, then adjusting by subtracting a multiple of 10; that multiple seems to be \n    # tied to the difference between the two numbers. \n\n    # From the pattern, we can hypothesize the operation as follows:\n    # x ⊗ y = (x * y) + (x + y) * 10 - abs(x - y) * 10.\n    # Let's test this operation with the numbers 6 and 12.\n\n    x, y = 6, 12\n    result = (x * y) + (x + y) * 10 - abs(x - y) * 10\n    \n    return result\n\nans = solution()"
    ],
    "9e57bb3e87064594be7261beeaf4f749": [
        "def solution():\n    time_for_31_segments = 60  # time in minutes for 31 segments\n    cuts_for_31_segments = 30  # number of cuts needed to get 31 segments\n\n    # Time taken for one cut\n    time_per_cut = time_for_31_segments / cuts_for_31_segments\n\n    cuts_for_50_segments = 49  # number of cuts needed to get 50 segments\n    # Total time for 50 segments\n    time_for_50_segments = time_per_cut * cuts_for_50_segments\n    \n    return time_for_50_segments\n\nans = solution()"
    ],
    "8fc55209039645f08e1579f51727eae8": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 3), (3, 5), (5, 7)]\n    ans, _ = solve_congruence(*congruences)\n\n    # Ensure the number is between 100 and 200\n    while ans < 100:\n        ans += 3 * 5 * 7\n\n    return ans if ans < 200 else None\n\nans = solution()"
    ],
    "dba8f63335da404e874ce5fc77d842f3": [
        "def solution():\n    return 123 - 41\n\nans = solution()"
    ],
    "cbeeb3a46e374ddca0fda082575458fb": [
        "def solution():\n    original_number = 210 / 0.7\n    return original_number\n\nans = solution()"
    ],
    "55fb13e55caf41cc8779e7ea0146667d": [
        "def solution():\n    year = 2002\n    while True:\n        year += 1\n        if str(year) == str(year)[::-1]:\n            return year - 2002\n\nans = solution()"
    ],
    "a2bde406a8da4970a219afa0022bd89d": [
        "from math import factorial\n\ndef solution():\n    word = 'ARRANGE'\n    letter_counts = {letter: word.count(letter) for letter in set(word)}\n\n    total_permutations = factorial(len(word))\n    for count in letter_counts.values():\n        total_permutations //= factorial(count)\n\n    return total_permutations\n\nans = solution()"
    ],
    "b686e2f0e98042d783104bb0e8f6ac9a": [
        "def solution():\n    original_price = 200\n    percentage_increase = 45\n    increased_amount = (original_price * percentage_increase) / 100\n    new_price = original_price + increased_amount\n    return new_price\n\nans = solution()"
    ],
    "98be2cb5dcce45168975297b4f076410": [
        "def solution():\n    daily_amount = 60 + 40\n    total_days = 3\n    total_amount = daily_amount * total_days\n\n    return total_amount\n\nans = solution()"
    ],
    "3737e4a9ac8f48808137f02833fa17bc": [
        "def solution():\n    for i in range(100, 1000):\n        if i % 24 == 0 and i // 24 == 36:\n            return i\n\nans = solution()"
    ],
    "4d111600431f40ce98fbddc8a64d1e36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(60 - 8 * (2 * x - 5), 4)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3dcee099b86f42178f5a693ab97c5bce": [
        "def solution():\n    temp_midnight_friday = -5\n    temp_midday_saturday = 17\n\n    overall_temp_change = temp_midday_saturday - temp_midnight_friday\n\n    return overall_temp_change\n\nans = solution()"
    ],
    "ac8cb9cc0d5443de91ca6e628f69e729": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Defining the symbols for candy and nancy's flowers\n    candy, nancy = symbols('candy nancy')\n    \n    # Formulating the equations based on the problem statement\n    equation1 = Eq(candy, 11)         # Candy originally had 11 flowers\n    equation2 = Eq(nancy, 9)          # Nancy originally had 9 flowers\n    equation3 = Eq(nancy + candy, 20) # Total flowers they have after sharing\n    equation4 = Eq(nancy - candy, 8)  # Nancy has 8 more flowers than Candy after sharing\n\n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3, equation4), (candy, nancy))\n\n    return solutions[candy]\n\nans = solution()"
    ],
    "55a229942e9e41f3a62e0880d02b5241": [
        "def solution():\n    ans = 10 + (10 * 10) - (10 / 10)\n    return ans\n\nans = solution()"
    ],
    "1b443edab3c147249e25ac875c4f6ab7": [
        "def solution():\n    n = 1  # Initialize n (term number)\n    val = 1  # Initialize val (value of term at position n)\n    diff = 1  # Initialize diff (difference between consecutive terms)\n    \n    # Continue the sequence until the value exceeds 50\n    while val <= 50:\n        n += 1\n        diff += 1  # Increment the difference by 1\n        val += diff  # Increment the value by the current difference\n    \n    return val  # Return the first value greater than 50\n\nans = solution()"
    ],
    "5c90212721354a48a4e81ec2a43c81bc": [
        "def solution():\n    pen_cost_p = 43\n    booklet_cost_p = 185  # As 1 pound = 100 pence, so £1.85 = 185p\n    total_cost_p = (3 * pen_cost_p) + (4 * booklet_cost_p)\n\n    amount_given_p = 1000  # As £10 = 1000 pence \n\n    change_p = amount_given_p - total_cost_p\n    change = change_p / 100  # Converting pence back to pounds\n\n    return change\n\nans = solution()"
    ],
    "87e1f465cdbb4df7b961ae79f361a0c3": [
        "def solution():\n    people_in_front = 10\n    position_from_back = 14\n    # Subtract 1 because Sibel is included in both counts (people in front and position from back)\n    total_people = people_in_front + position_from_back - 1\n    \n    return total_people\n\nans = solution()"
    ],
    "f8c6ec11093d496198cb0de06c6908ee": [
        "def solution():\n    # The population of St. Petersburg (as of my last update in early 2023) is approximately 5.4 million\n    # Since you're asking for the population in figures, I'll convert this approximate value into an integer\n    population = 5400000\n    return population\n\nans = solution()"
    ],
    "a24bbb90466f45bb817f8a9fa98063a4": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        str_num = str(i)\n        if abs(int(str_num[0]) - int(str_num[1])) >= 7 and abs(int(str_num[1]) - int(str_num[2])) >= 7:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "054c2ee09a60448ebda4bd6602806b2b": [
        "def solution():\n    count = 0\n    for i in range(5000, 10000):\n        thousands_digit = int(str(i)[0])\n        if thousands_digit == 0:\n            continue  # skip if the first digit is 0 since it won't be a four-digit number\n        other_digits = [int(x) for x in str(i)[1:]]\n        if 0 in other_digits:\n            continue  # skip if any of the other digits are 0 to avoid division by zero\n        if all(thousands_digit % d == 0 for d in other_digits):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "16105156e2914d5a8990c9b24f0b9981": [
        "def solution():\n    from sympy import primerange\n\n    primes = list(primerange(1, 10))  # 10 is an arbitrary choice larger than the third prime\n    third_prime = primes[2]           # List index starts at 0\n\n    return third_prime\n\nans = solution()"
    ],
    "392cb5c0bb804c05baec15996d6881df": [
        "def solution():\n    # If the 4th child is directly opposite the 22nd child in a circle,\n    # it means that there are (22 - 4) children in between them,\n    # and an equal number of children on the other half of the circle.\n    # Therefore, the total number of children is twice the number of children in between plus 2 (the 4th and 22nd child themselves).\n    \n    children_between = 22 - 4\n    total_children = (children_between * 2) + 2\n    \n    return total_children\n\nans = solution()"
    ],
    "27de9be9ab0d46f5a9881ef33bd601fa": [
        "def solution():\n    first_week_coins = 10\n    common_difference = 4\n    num_weeks = 10\n    \n    total_coins = (num_weeks / 2) * (2 * first_week_coins + (num_weeks - 1) * common_difference)\n    \n    return int(total_coins)\n\nans = solution()"
    ],
    "a736c91b54064c40a00c4a922d2dc285": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variable\n    x = symbols('x')\n    \n    # Create the equation according to the given expression\n    equation = Eq((x + 7) / 9, 9)\n    \n    # Solve the equation for x\n    sol = solve(equation, x)\n    \n    # Extract the solution from the list (there should be only one solution)\n    ans = sol[0]\n    \n    return ans\n\nans = solution()"
    ],
    "f3b1467c46654ba18779b73ec862809e": [
        "def solution():\n    lily_dresses = 24\n    gina_dresses = lily_dresses // 2\n    fiona_dresses = gina_dresses // 4\n\n    total_dresses = gina_dresses + fiona_dresses\n    return total_dresses\n\nans = solution()"
    ],
    "c8f6e26082ce4b84bed3069a498d5034": [
        "def solution():\n    ans = 0.8 * 3 * 10\n    return ans\n\nans = solution()"
    ],
    "4d1598c9ff7f4502a10cb35d69667abd": [
        "def solution():\n    # Possible digits for each position based on elimination\n    possible_digits = [{'5', '3', '1', '5', '1'},   # First digit cannot be 1\n                       {'6', '6', '1', '6', '2'},   # Second digit cannot be 2\n                       {'4', '2', '4', '2', '5'},   # Third digit cannot be 5\n                       {'8', '8', '7', '9', '8'}]   # Fourth digit cannot be 8\n    \n    # Remove impossible digits for each position based on the try outs\n    for i, pos_digits in enumerate(possible_digits):\n        for num in '1258':  # All digits in 1258 are wrong\n            if num in pos_digits:\n                pos_digits.remove(num)\n                \n    # Create a set of answers by taking one possible digit from each set\n    ans = ''\n    for pos_digits in possible_digits:\n        if len(pos_digits) == 1:\n            ans += pos_digits.pop()\n        else:\n            # Intersect with remaining digits as two digits are right in 5648\n            correct_digits = pos_digits.intersection('5648')\n            ans += correct_digits.pop()\n    \n    return ans\n\nans = solution()"
    ],
    "52696ab5f8494de9be7eed46df374cc7": [
        "def solution():\n    # Let x be the number of female teachers\n    # Total weight of male teachers\n    total_male_weight = 3 * 75\n    \n    # Since the average weight of all teachers is 65,\n    # the total weight of all teachers is 65*(3 + x)\n    \n    # The total weight of female teachers\n    total_female_weight = 60 * x\n    \n    # Equation representing the sum of weights of male and female teachers\n    # being equal to the total weight of all teachers\n    # 3*75 (male total) + 60*x (female total) = 65*(3 + x)\n    # Solve for x\n    x = (65 * 3 - 3 * 75) / (60 - 65)\n    \n    return int(x)\n\nans = solution()"
    ],
    "ad676d9c940642cbac148da8b2a9a501": [
        "def solution():\n    principal = 35000\n    rate = 0.015\n    amount = 37100\n    \n    # Compound interest formula: A = P(1 + r/n)^(nt)\n    # However, for simple interest, n = 1 and thus it simplifies to: A = P(1 + rt)\n    # We need to solve for t: t = (A/P - 1) / r\n    \n    years = (amount / principal - 1) / rate\n    \n    # Compare the calculated years with Bella's claim\n    return 5 if round(years) == 5 else round(years)\n\nans = solution()"
    ],
    "bcb4d3a73bdd461db258bc9c024573c1": [
        "def solution():\n    mass_quarter_full = 250\n    mass_three_quarters_full = 350\n    \n    # The difference in mass between 3/4 full and 1/4 full is half the mass of the Marmite\n    mass_half_marmite = mass_three_quarters_full - mass_quarter_full\n    \n    # Therefore, the mass of a quarter of the Marmite is half of the mass of half of the Marmite\n    mass_quarter_marmite = mass_half_marmite / 2\n    \n    # Subtracting the mass of 1/4 Marmite from the total mass when the jar is 1/4 full gives the mass of the empty jar\n    mass_empty_jar = mass_quarter_full - mass_quarter_marmite\n\n    return mass_empty_jar\n\nans = solution()"
    ],
    "f95f09c885d34503865d05cffe9b4ae0": [
        "def solution():\n    total_soda_l = 13.15\n    bottle_fraction = 1/7\n    bottle_capacity_l = 9.1\n    cup_capacity_ml = 350\n    ml_to_l_conversion = 1000\n\n    soda_used_for_bottle_l = bottle_capacity_l * bottle_fraction\n    soda_used_for_cups_l = 4 * (cup_capacity_ml / ml_to_l_conversion)\n\n    soda_left_l = total_soda_l - (soda_used_for_bottle_l + soda_used_for_cups_l)\n\n    return soda_left_l\n\nans = solution()"
    ],
    "e3c3e3c1805842db862f14a943f7260b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the marks of students\n    A, B, C, D, E = symbols('A B C D E')\n\n    # Given conditions\n    equation1 = Eq((A + B + C) / 3, 95)  # Average mark of A, B, and C\n    equation2 = Eq((B + C + D) / 3, 94)  # Average mark of B, C, and D\n    equation3 = Eq(E, 96)                # E's mark\n    equation4 = Eq(B, D)                 # B and D have the same score\n    equation5 = Eq(A, E + (A - E))       # A has the highest mark, so A > E\n\n    # All marks are above 91\n    ineqs = [A > 91, B > 91, C > 91, D > 91, E > 91]\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5) + tuple(ineqs), (A, B, C, D, E))\n\n    # Since D can be any of the values that are not the highest (which is A) and is equal to B,\n    # we look for the one that pairs with E being the second highest (which is 96)\n    for s in solutions:\n        if s[E] == 96 and s[A] > s[E] and s[A] > s[B] and s[A] > s[C] and s[A] > s[D]:\n            return s[D]\n\nans = solution()"
    ],
    "5072d7c5f2434099ac2734046be03e0f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the father's and son's current age\n    father, son = symbols('father son')\n\n    # Create two equations based on the problem statement\n    equation1 = Eq(father - 6, 5 * (son - 6))\n    equation2 = Eq(father + son, 78)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (father, son))\n\n    # Return the father's current age\n    return solutions[father]\n\nans = solution()"
    ],
    "375112c34e0a4163ad8adac5448587c5": [
        "def solution():\n    a = 2023**0.5\n    b = -2023**0.5\n    ans = a + b - a*b\n    return ans\n\nans = solution()"
    ],
    "a4e26b2a8caa4a18ae49cec55472c63f": [
        "def solution():\n    ans = 245 - 182\n    return ans\n\nans = solution()"
    ],
    "79ed6bec48e84620b031b1f6fe00dc58": [
        "def solution():\n    # To ensure Rose's victory, she needs to make sure the number of marbles left\n    # after her first move is a multiple of 3. This way, no matter what Kylie does,\n    # Rose can always take 1 or 2 marbles to return to a multiple of 3 until the end.\n    \n    # If Rose takes 1 marble, 13 left, not a multiple of 3.\n    # If Rose takes 2 marbles, 12 left, which is a multiple of 3.\n    \n    # Therefore, Rose must take away 2 marbles on her first turn to ensure victory.\n    return 2\n\nans = solution()"
    ],
    "3be5a913fea7494c80e0bfe6a08910b7": [
        "def solution():\n    from math import pi, sqrt\n\n    m = 2.0  # mass in kilograms\n    k = 500  # spring constant in N/m\n    amplitude = 0.08  # amplitude in meters\n    x = 0.04  # displacement from equilibrium in meters\n\n    # Total energy of the oscillator (E) is given by the formula E = (1/2) * k * amplitude^2\n    total_energy = 0.5 * k * amplitude**2\n\n    # The speed of the block (v) can be found using the equation for the energy at a position x:\n    # E = (1/2) * k * x^2 + (1/2) * m * v^2\n    # Since the total energy is conserved, we can set the total energy equal to the sum of potential\n    # and kinetic energies at position x:\n    # total_energy = (1/2) * k * x^2 + (1/2) * m * v^2\n    # Solving for v gives us:\n    v = sqrt((total_energy - 0.5 * k * x**2) * 2 / m)\n    \n    return total_energy, v\n\nans = solution()"
    ],
    "c4ccfd8cb6b248a38a4fda147bef55ce": [
        "def solution():\n    total_amount_pence = 45 * 100  # Convert pounds to pence\n    coin_value_pence = 5\n    num_coins = total_amount_pence // coin_value_pence\n    return num_coins\n\nans = solution()"
    ],
    "32ad0f6a736244e3a4c5dda6e2a4ca47": [
        "def solution():\n    ans = -7 + -3\n    return ans\n\nans = solution()"
    ],
    "bcb80e6312784336a54c7308af6263cb": [
        "def solution():\n    hex_num1 = \"2A3\"\n    hex_num2 = \"17B\"\n    \n    # Convert hex to decimal\n    dec_num1 = int(hex_num1, 16)\n    dec_num2 = int(hex_num2, 16)\n\n    # Sum in decimal\n    dec_sum = dec_num1 + dec_num2\n    \n    # Convert the sum back to hex\n    hex_sum = hex(dec_sum)[2:].upper()\n\n    return hex_sum\n\nans = solution()"
    ],
    "7d2942aa92ed44e29a1be000b1aaf0c2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    pip_minute, bud_minute = symbols('pip_minute bud_minute')\n    \n    # Each minute, Pip runs 20 metres more than Bud\n    equation1 = Eq(pip_minute, bud_minute + 20) \n    \n    # In 3 minutes, they have run 540 meters together\n    equation2 = Eq(3 * pip_minute + 3 * bud_minute, 540)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (pip_minute, bud_minute))\n\n    # Pip's distance in 3 minutes\n    pip_total_distance = 3 * solutions[pip_minute]\n\n    return pip_total_distance\n\nans = solution()"
    ],
    "94913f61e8cf4fe8822180b9025e8717": [
        "def solution():\n    count = 0\n    for page in range(1, 501):\n        count += str(page).count('4')\n    return count\n\nans = solution()"
    ],
    "d1ec5589c16045a8a24ef55131c530f0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(3 * (2 * x + 1), 75)\n    ans = solve(equation, x)[0]\n\n    return ans\n\nans = solution()"
    ],
    "afedf1aa53604878984ef0e2e15b9e62": [
        "def solution():\n    result = 0.25 * 0.30 * 0.40 * 300\n    return result\n\nans = solution()"
    ],
    "f17c963ecb1a4e4ea278edc6215a3efb": [
        "def solution():\n    ans = 152 + 45 - 52 + 16\n    return ans\n\nans = solution()"
    ],
    "2ec86cfd46db49fb8f7a59bc5ac2195f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of coins in Box A and y be the number of coins in Box B initially.\n    x, y = symbols('x y')\n\n    # According to the problem, Box A contains four times as many coins as Box B.\n    equation1 = Eq(x, 4 * y)\n\n    # After transferring, Box C contains 1220 coins. Let z be the original number of coins in Box C.\n    # The final amount in Box C (1220) is 22% more than original, so 1.22 * z = 1220.\n    z = symbols('z')\n    equation2 = Eq(1.22 * z, 1220)\n\n    # Box A loses 6% of its coins and transfers them to Box C, so 0.06 * x goes to Box C.\n    # Box B loses 20% of its coins and transfers them to Box C, so 0.20 * y goes to Box C.\n    # Thus the number of transferred coins from A and B to C together are 1220 - z, based on the original amount in C.\n    # This gives us the equation 0.06 * x + 0.20 * y = 1220 - z.\n    equation3 = Eq(0.06 * x + 0.20 * y, 1220 - z)\n\n    # We solve the system of equations to find the number of coins in Boxes A and B initially.\n    solutions = solve((equation1, equation2, equation3), (x, y, z))\n\n    # The number of coins in Box A at the beginning is what we're looking for.\n    return solutions[x]\n\nans = solution()"
    ],
    "1b3d94be63ab433dbec37b999532440f": [
        "def solution():\n    # Total earnings from each color of flowers\n    earnings_red = 5 * 2\n    earnings_green = 2 * 5\n    earnings_white = 3 * 10\n\n    # Total earnings\n    total_earnings = earnings_red + earnings_green + earnings_white\n\n    # Total number of flowers\n    total_flowers = 5 + 2 + 3\n\n    # Average selling price per flower\n    average_price = total_earnings / total_flowers\n\n    return average_price\n\nans = solution()"
    ],
    "2eb9b96314cb4e659c476a8f2b9a7a6e": [
        "def solution():\n    return sum([1, 3, 4, 1])\n\nans = solution()"
    ],
    "8d4919986f144ffeae4055000acfbb47": [
        "def solution():\n    # Let x be the original total number of bottled drinks.\n    # Initially, 60% were coffee, i.e., 0.6 * x were coffee and 0.4 * x were tea.\n\n    # Finally, 40% were coffee. Since the number of coffee bottles didn't change, we have:\n    # 0.6 * x = 0.4 * final_total, where final_total = x + additional_tea_bottles.\n\n    # We need to find the percentage increase in the number of bottles of tea. \n    # additional_tea_bottles / (0.4 * x) = percentage_increase.\n\n    # From the equations, we have x = final_total * 0.6 / 0.4, and\n    # additional_tea_bottles = final_total - x\n    # percentage_increase = (additional_tea_bottles / (0.4 * x)) * 100\n\n    # By substituting x into the final_total, we get:\n    # additional_tea_bottles = final_total - (final_total * 0.6 / 0.4)\n    # percentage_increase = (final_total - final_total * 1.5) / (final_total * 0.6 / 0.4) * 100\n\n    # The final_total cancels out in the calculation, simplifying to:\n    percentage_increase = (1 - 1.5) / (0.6 / 0.4) * 100\n\n    return -percentage_increase  # The negative sign corrects for the subtraction in (1 - 1.5)\n\nans = solution()"
    ],
    "5260e448b7bd48408f279f75b3bc994b": [
        "def solution():\n    total_vehicles = 24\n    total_wheels = 86\n    for tricycles in range(total_vehicles + 1):\n        cars = total_vehicles - tricycles\n        if (tricycles * 3 + cars * 4) == total_wheels:\n            return tricycles\n\nans = solution()"
    ],
    "484ad20b23084a80a71997e86aafbbee": [
        "def solution():\n    ans = 7 * 0.4\n    return ans\n\nans = solution()"
    ],
    "7811a75321754070a2499adf8af1bec1": [
        "def solution():\n    lewis_money_p = 60  # in pence\n    james_money_pounds = 1.10  # in pounds\n    james_money_p = james_money_pounds * 100  # converting James's money to pence\n\n    total_money_p = lewis_money_p + james_money_p  # adding up money in pence\n    total_money_pounds = total_money_p / 100  # converting total money back to pounds\n\n    return total_money_pounds\n\nans = solution()"
    ],
    "5ef1c9a0438447ba9288b3fd84a1e5ea": [
        "from math import factorial\n\ndef solution():\n    total_letters = 7\n    W_count = 1\n    I_count = 2\n    N_count = 3\n    G_count = 1\n    \n    # Calculate the total number of arrangements using the formula for permutations of a multiset\n    total_arrangements = factorial(total_letters) // (factorial(W_count) * factorial(I_count) * factorial(N_count) * factorial(G_count))\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "d500548212784181ae868f27144944a3": [
        "def solution():\n    count = 0\n    # Each stack must have at least 3 books, so we start from 3\n    for x1 in range(3, 14):  # start from 3, up to 13\n        for x2 in range(3, 14):  # start from 3, up to 13\n            x3 = 13 - x1 - x2  # Whatever remains after x1 and x2\n            if x3 >= 3 and x1 + x2 + x3 == 13:  # Check if x3 is at least 3 and the sum is 13\n                count += 1\n    return count\n\nans = solution()"
    ],
    "cc8c61240c93470c82d6885fe1441a98": [
        "def solution():\n    from math import factorial\n    from sympy import Integer\n\n    def subfactorial(n):\n        # approximation of subfactorial or !n (number of derangements)\n        # using the formula !n = n! * sum((-1)^k / k!, for k=0 to n)\n        return int(round(factorial(n) * sum((-1)**k / factorial(k) for k in range(n + 1))))\n\n    # Calculate the number of ways none of the six students get their own paper\n    ans = subfactorial(6)\n\n    return ans\n\nans = solution()"
    ],
    "35f28b203ccb40b1b46923de84a56ccb": [
        "def solution():\n    mass = 2  # mass in kilograms\n    final_velocity = 8  # final velocity in meters per second\n    time = 4  # time in seconds\n\n    # Using the formula: force = mass * acceleration\n    # and the formula for constant acceleration: final_velocity = initial_velocity + acceleration * time\n    # with initial_velocity being 0 (stationary object), we can rearrange to find acceleration:\n    # acceleration = final_velocity / time\n    \n    acceleration = final_velocity / time\n    \n    # Now, we calculate the force:\n    force = mass * acceleration\n    \n    return force\n\nans = solution()"
    ],
    "4fdb62c377d747f98107b2670277dd88": [
        "def solution():\n    # Initialize variables for the minimum number of 1000 Plus bottles\n    # Set high enough to be sure it will decrease in the loop\n    min_1000_plus = 350\n    \n    # Try to minimize the number of 1000 Plus bottles by checking\n    # all possible combinations of lemonade and 1000 Plus bottles sold\n    # until the total income condition is met\n    for lemonade in range(351):\n        # The bottles of 1000 Plus sold\n        plus_1000 = (2012 - 4 * lemonade) / 7\n        # Check if the current combination is a possible solution\n        # Total number of bottles should not exceed 350, and we can't sell a fraction of a bottle\n        if plus_1000 + lemonade <= 350 and plus_1000.is_integer():\n            # Update the minimum number of 1000 Plus bottles if a new minimum is found\n            min_1000_plus = min(min_1000_plus, int(plus_1000))\n\n    # Return the minimum number of bottles of 1000 Plus that could have been sold\n    return min_1000_plus\n\nans = solution()"
    ],
    "f881913e5ff54d8ea9433a89abb125b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue, red = symbols('blue red')\n\n    # initial ratio equation\n    equation1 = Eq(blue/red, 3/5)\n    \n    # total pens initially\n    equation2 = Eq(blue + red, 96)\n    \n    # solve initial blue and red\n    initial_pens = solve((equation1, equation2), (blue, red))\n    \n    # calculate new amounts of pens\n    new_red = initial_pens[red] + 60\n    new_blue = symbols('new_blue')\n\n    # the equation after adding the pens\n    equation3 = Eq(new_blue/(new_blue + new_red), 0.40)\n\n    # how many blue pens added\n    added_blue_pens = Eq(new_blue - initial_pens[blue], symbols('added_blue_pens'))\n    \n    # solve for added blue pens using equation3 and added_blue_pens\n    final_solution = solve((equation3, added_blue_pens), (new_blue, symbols('added_blue_pens')))\n\n    return final_solution[symbols('added_blue_pens')]\n\nans = solution()"
    ],
    "f0db0aaf0c984695962fd98c327d2267": [
        "def solution():\n    for num in range(0, 101):\n        if num % 4 == 0 and num % 7 == 6 and num % 5 == 0:\n            return num\n\nans = solution()"
    ],
    "e4dd70bfb9454c2286a8726ee86d101c": [
        "from itertools import permutations\nfrom math import prod\n\ndef solution():\n    # Function to calculate the number of different factors of a number\n    def count_factors(num):\n        return sum(num % i == 0 for i in range(1, num + 1))\n    \n    # Store the number of different factors for numbers 1 to 13\n    factors = [count_factors(num) for num in range(1, 14)]\n    \n    # Try all permutations of 9 numbers out of 13\n    for perm in permutations(range(1, 14), 9):\n        # Two students know the number of different factors their number has\n        # Therefore, their numbers each uniquely identify the count of factors in this context\n        unique_factor_counts = set()\n        for num in perm:\n            if factors[num - 1] not in unique_factor_counts:\n                unique_factor_counts.add(factors[num - 1])\n            else:\n                break\n        else:  # Only proceed if the loop didn't break\n            # Alice knows her number is odd, and May's is 2 less than Alice's and 1 greater than Mark's\n            # Only one student with a unique factor count can claim their number as odd without seeing it\n            # So, Alice must have the largest odd number because she can't determine her number otherwise\n            alice_num_idx = factors.index(max(factors[num - 1] for num in perm if num % 2 != 0))\n            alice_num = alice_num_idx + 1\n            \n            # May's number is Alice's - 2 and must be a part of the permutation\n            if (alice_num - 2) in perm:\n                # All conditions met, calculate the product of the four numbers not picked\n                not_picked = set(range(1, 14)) - set(perm)\n                return prod(not_picked)\n\nans = solution()"
    ],
    "94f9a30088f14e23ad5d292b0a21a0e4": [
        "def solution():\n    return 20172017 // 2017\n\nans = solution()"
    ],
    "31547fbcddfa44d195f62ee2a144d7f9": [
        "def solution():\n    cost_per_km = 2.42\n    distance_km = 32\n    num_friends = 11\n    \n    total_cost = cost_per_km * distance_km\n    cost_per_person = total_cost / num_friends\n    \n    return round(cost_per_person, 2)\n\nans = solution()"
    ],
    "4f1a75cb742a439caf72488bf6da4ab6": [
        "def solution():\n    # This is a classic example of the Frobenius Coin Problem, where we need to find the largest value that cannot\n    # be formed using any combination of two given denominations. The formula for the largest such number is\n    # (a*b) - a - b, where a and b are coprime denominations.\n    \n    # In this case, a = 3 and b = 7, which are coprime (their greatest common divisor is 1).\n    a = 3\n    b = 7\n\n    # Applying the formula to get the result.\n    ans = (a * b) - a - b\n\n    return ans\n\nans = solution()"
    ],
    "392b16f9a6ac48cca42c471b49e63670": [
        "def solution():\n    num1_base10 = int('45', 7)\n    num2_base10 = int('66', 7)\n    sum_base10 = num1_base10 + num2_base10\n    ans = ''\n    while sum_base10 > 0:\n        ans = str(sum_base10 % 7) + ans\n        sum_base10 //= 7\n    return ans or '0'\n\nans = solution()"
    ],
    "eb8fb6f94cc1474ca839b50b4b0ce425": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    correct, incorrect = symbols('correct incorrect')\n    \n    # 5 points for each correct answer and lose 2 points for each incorrect\n    # The number of correct answers is 12 more than three times incorrect answers\n    # Total points is 151\n    equation1 = Eq(correct, 3 * incorrect + 12)\n    equation2 = Eq(5 * correct - 2 * incorrect, 151)\n    \n    # solve the system of equations\n    solutions = solve((equation1, equation2), (correct, incorrect))\n    \n    return solutions[correct]  # returns the number of correct answers\n\nans = solution()"
    ],
    "cbc6325d9c534f4b9977c61b302c8d0c": [
        "def solution():\n    total_children = 30\n    wearing_glasses = 8\n    wearing_watch = 12\n    wearing_both = 7\n\n    wearing_neither = total_children - (wearing_glasses + wearing_watch - wearing_both)\n    return wearing_neither\n\nans = solution()"
    ],
    "a4b725f5709b47a982b182d038fac1ef": [
        "def solution():\n    ans = 628 * 5\n    return ans\n\nans = solution()"
    ],
    "8b67176726654523a82d12a0a53e5a72": [
        "def solution():\n    # Total matches played by each student is equal due to the round-robin format.\n    # A has played 4 matches, which means there are 6 other opponents, so total matches are 4 * 6 / 2.\n    # This is because each match is counted twice, once for each player.\n    total_matches = 4 * 6 // 2\n    \n    # The number of matches each student played, minus F's matches, equals total matches.\n    matches_minus_f = 4 + 6 + 2 + 1 + 3 + 5  # Total matches played by A, B, C, D, E, and G.\n    \n    # Subtracting matches played by other students from total matches gives F's matches.\n    f_matches = total_matches * 2 - matches_minus_f\n    \n    return f_matches\n\nans = solution()"
    ],
    "15d3db4f4eda491babda7b41a87df4bd": [
        "def solution():\n    i = 1\n    while True:\n        divisors = [x for x in range(1, 21) if i % x == 0]\n        if len(divisors) == 18:\n            not_divisors = [x for x in range(1, 21) if x not in divisors]\n            if abs(not_divisors[0] - not_divisors[1]) == 1:\n                return sum(not_divisors)\n        i += 1\n\nans = solution()"
    ],
    "066d9987dbaf460b8056b1fcc71dd3f4": [
        "def solution():\n    ans = 67 * 23\n    return ans\n\nans = solution()"
    ],
    "ba994c84bc354e9ebb8e56f799001f32": [
        "def solution():\n    numbers = []\n    for i in range(161, 15*15):  # No need to check beyond 15*15, as it's the maximum value before quotient changes\n        if i % 15 == i // 15:\n            numbers.append(i)\n\n    return sum(numbers)\n\nans = solution()"
    ],
    "11d22bb6c3c14854bb9338e27e427226": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    linda_current_age, cici_current_age = symbols('linda_current_age cici_current_age')\n\n    # When Cici was born, Linda was 11 years old\n    equation1 = Eq(cici_current_age, linda_current_age - 11)\n    # The sum of their ages 4 years later will be 37\n    equation2 = Eq((linda_current_age + 4) + (cici_current_age + 4), 37)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (linda_current_age, cici_current_age))\n    \n    # Linda's age 3 years later\n    linda_age_in_3_years = solutions[linda_current_age] + 3\n    \n    return linda_age_in_3_years\n\nans = solution()"
    ],
    "8e079aa33fac45e2933fe8f9f57347fe": [
        "def solution():\n    first = 5\n    last = 85\n    difference = 4\n    num_terms = ((last - first) // difference) + 1\n    sum_of_sequence = (num_terms * (first + last)) // 2\n    return sum_of_sequence\n\nans = solution()"
    ],
    "95171e30845347a5a0bcbd146bae2a00": [
        "def solution():\n    first_number = 5  # The first number is greater than or equal to 5\n    second_number = 2  # The second number is greater than or equal to 2\n\n    # The least possible sum of the two numbers\n    ans = first_number + second_number\n    return ans\n\nans = solution()"
    ],
    "bdd45d02da3a4de3baed4b719bcf043f": [
        "def solution():\n    ans = 15.2 - 5.7\n    return ans\n\nans = solution()"
    ],
    "bc39719692424efd97a67922f5478c31": [
        "def solution():\n    distance_one_way = 300  # meters\n    speed_uphill = 10       # m/min\n    speed_downhill = 30     # m/min\n\n    time_uphill = distance_one_way / speed_uphill\n    time_downhill = distance_one_way / speed_downhill\n\n    total_time = time_uphill + time_downhill\n    total_distance = 2 * distance_one_way\n\n    average_speed = total_distance / total_time\n    return average_speed\n\nans = solution()"
    ],
    "f19f57dc40604eba86f9d7b2bb0b2c70": [
        "def solution():\n    # Let x be the number of stamps Natasha has\n    # Then Jamie-Anne has x + 18 stamps\n    # According to the ratio Jamie-Anne : Natasha is 5 : 3\n    # We have (x + 18) / x = 5 / 3\n    # Cross multiply to solve for x\n    # 3 * (x + 18) = 5 * x\n    # 3x + 54 = 5x\n    # 2x = 54\n    # x = 27 (Natasha's stamps)\n    # Jamie-Anne has x + 18 = 27 + 18 stamps\n    jamie_anne_stamps = 27 + 18\n    total_stamps = 27 + jamie_anne_stamps\n    return total_stamps\n\nans = solution()"
    ],
    "e3abc3aab67f4f7b981e00c65dd7ce44": [
        "def solution():\n    total_entrances = 5\n    total_people = 4\n    # Each person has 5 choices independently, hence total ways is 5^4\n    ans = total_entrances ** total_people\n    return ans\n\nans = solution()"
    ],
    "adb3d1fd535a48be8776775afaca3c49": [
        "def solution():\n    total_peaches = 18\n    peaches_per_bag = 2\n    num_bags = total_peaches / peaches_per_bag\n    return int(num_bags)\n\nans = solution()"
    ],
    "8f4e94438ebd4f19ae675530ee3c1dd8": [
        "def solution():\n    from math import gcd\n\n    apples = 226\n    pears = 352\n    oranges = 157\n\n    apples_divided = apples - 10\n    pears_divided = pears - 28\n    oranges_divided = oranges - 13\n\n    gcd_apples_pears = gcd(apples_divided, pears_divided)\n    gcd_all = gcd(gcd_apples_pears, oranges_divided)\n    \n    return gcd_all\n\nans = solution()"
    ],
    "f03076a28d8c4de9b99cc80f1669e699": [
        "def solution():\n    from math import factorial\n\n    # Judy can stand in two places, first or last\n    judy_positions = 2\n\n    # The remaining five friends can stand in any of 5! (factorial) ways\n    friends_permutations = factorial(5)\n\n    # Total combinations is the product of the two\n    total_combinations = judy_positions * friends_permutations\n\n    return total_combinations\n\nans = solution()"
    ],
    "2f084b925d5c4e3c8e7edcf07200e325": [
        "def solution():\n    digit_count = 0\n    number = 1\n\n    while True:\n        str_number = str(number)\n        if digit_count + len(str_number) >= 200:\n            return int(str_number[200 - digit_count - 1])\n        digit_count += len(str_number)\n        number += 1\n\nans = solution()"
    ],
    "9f777ba0c7da4ecd859df39dac23c0ff": [
        "def solution():\n    given_number = 6\n    lcm = 12\n\n    for other_number in range(1, lcm + 1):\n        if (given_number * other_number) % lcm == 0 and \\\n           (given_number * other_number) // lcm == other_number:\n            factors = set()\n            for i in range(1, other_number + 1):\n                if other_number % i == 0 and given_number % i == 0:\n                    factors.add(i)\n            if factors == {1, 2}:\n                return other_number\n\nans = solution()"
    ],
    "452e139840314890bf5003e2f7071e6c": [
        "def solution():\n    ans = 6.25 * 8.27 * 16 + 1.25 * 0.827 * 8\n    return ans\n\nans = solution()"
    ],
    "b0092c2c2ecd4457baa2ed73067b8fd5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cost = symbols('cost')\n\n    # Original price is cost + $40\n    original_price = cost + 40\n\n    # Customer buys it with twenty percent off\n    discounted_price = original_price * 0.8\n\n    # Profit is the discounted price minus the cost\n    profit = Eq(discounted_price - cost, 12)\n\n    # Solve for the cost\n    cost_value = solve(profit, cost)\n\n    return cost_value[0]\n\nans = solution()"
    ],
    "b7b52b9389844c4ca62d9f3110155373": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    daniel, daughter = symbols('daniel daughter')\n\n    equation1 = Eq(daniel - 2, 6 * (daughter - 2))\n    equation2 = Eq(daniel + 2, 4 * (daughter + 2))\n\n    solutions = solve((equation1, equation2), (daniel, daughter))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "20029a5838a5496b81ff40af3d12651e": [
        "def solution():\n    # Let x be the number of unqualified products and y be the number of qualified products.\n    # Each day the factory produces 500 televisions, so for 4 days that's 2000 televisions.\n    # y = (total televisions over 4 days) - x\n    # The score for the qualified televisions is 5y, and the score for unqualified is -18x.\n    # The total score over 4 days is 9,931.\n    # 5y - 18x = 9,931, where y + x = 2000.\n    # We solve this system of equations to find the value of y (the number of qualified products).\n\n    from sympy import symbols, Eq, solve\n    \n    x, y = symbols('x y')\n    \n    # Total number of televisions produced over 4 days\n    total_televisions = 2000\n    \n    # Equation representing the points system\n    # 5 points for each qualified product (y) and -18 for each unqualified (x)\n    equation1 = Eq(5 * y - 18 * x, 9931)\n    \n    # Equation representing the total production over 4 days\n    equation2 = Eq(x + y, total_televisions)\n    \n    # Solving the system of equations\n    solutions = solve((equation1, equation2), (x, y))\n    \n    # Return the number of qualified products, y\n    return solutions[y]\n\nans = solution()"
    ],
    "8646401fa22043b3be02e989c5192b0a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    hens, roosters = symbols('hens roosters')\n    \n    # Original\n    equation1 = Eq(hens, 6 * roosters)\n    # After increasing\n    equation2 = Eq(hens + 60, 4 * (roosters + 60))\n\n    solutions = solve((equation1, equation2), (hens, roosters))\n\n    return solutions[hens] + solutions[roosters]\n\nans = solution()"
    ],
    "5018d5ab300649cebcf5c45010bddd83": [
        "def solution():\n    # The mean of seven numbers is 12\n    total_seven_numbers = 7 * 12\n    \n    # An eighth number is included and the mean decreases to 11\n    total_eight_numbers = 8 * 11\n    \n    # Find the eighth number\n    eighth_number = total_eight_numbers - total_seven_numbers\n    return eighth_number\n\nans = solution()"
    ],
    "a4a8d66b728347868536b3995b8fc695": [
        "def solution():\n    return 1+2+3+4+5+6+7+8+7+6+5+4+3+2+1+1+2\n\nans = solution()"
    ],
    "d9216e847ffd4805a2ca577a27228cc1": [
        "def solution():\n    period = \"538462\"\n    period_length = len(period)\n    position = 2021\n    index_in_period = (position - 1) % period_length\n    digit = period[index_in_period]\n    \n    return int(digit)\n\nans = solution()"
    ],
    "216f3c5f6bd1448286cfaa40eb464d6f": [
        "def solution():\n    count = 0\n    for i in range(1, 101):\n        count += str(i).count('9')\n    return count\n\nans = solution()"
    ],
    "9ed2edaef1a74aa7ab2da7a4c1e1e5ba": [
        "def solution():\n    total_distance = 1800\n    meeting_point = 800\n    \n    # When April meets Baye, April has traveled (1800 + (1800 - 800)) meters,\n    # while Baye has traveled (1800 - 800) meters.\n    # We can use ratio to find the speeds of April and Baye\n    # since their speeds are constant.\n    ratio = (total_distance + (total_distance - meeting_point)) / (total_distance - meeting_point)\n    \n    # Since April runs back at 4 times her original speed,\n    # and she meets Baye at 800m from Q, the remaining distance to P is 800m.\n    # At this point, Baye has walked 1000m (1800 - 800).\n    # We imagine that Baye continues to walk while April covers 800m at 4 times her speed.\n    \n    # Let's find the distance covered by Baye during this time.\n    # Since the speed ratio between April's running speed and walking speed is 4:1,\n    # Baye will cover 1/4 of the distance that April does in the same time. \n\n    distance_covered_by_baye_while_april_returns = meeting_point / 4\n    remaining_distance_for_baye = total_distance - (total_distance - meeting_point + distance_covered_by_baye_while_april_returns)\n    \n    return remaining_distance_for_baye\n\nans = solution()"
    ],
    "8f3600a93e7c46e28e43d9b4b9104ddc": [
        "def solution():\n    ans = 8000 * 0.7\n    return ans\n\nans = solution()"
    ],
    "69c45c2ab19846ef90c4ca25ad543301": [
        "def solution():\n    numbers = [375, 753, 537, 357, 573, 735]\n    ans = sum(numbers)\n    return ans\n\nans = solution()"
    ],
    "47d4d71ebd964d418d18b5348710fb9b": [
        "def solution():\n    sequence = [2, 3, 1, 4]\n    index = (100 - 1) % len(sequence)  # Subtract 1 because index starts from 0\n    return sequence[index]\n\nans = solution()"
    ],
    "dfbce185a0d1406bb45782f37f1adb2b": [
        "def solution():\n    count = 0\n    # Check for two-digit palindromes\n    for i in range(1, 10):\n        count += 1  # Two-digit palindromes (11, 22, ..., 99)\n\n    # Check for three-digit palindromes\n    for i in range(1, 10):\n        for j in range(0, 10):\n            count += 1  # Three-digit palindromes (101, 111, ..., 191, 202, ..., 999)\n    \n    return count\n\nans = solution()"
    ],
    "dbc4269e2e99475794fddbd7d1e826c6": [
        "def solution():\n    # Calculating each term in the equation\n    term1 = (1 + 0.23 + 0.34)\n    term2 = (0.23 + 0.34 + 0.45)\n    term3 = (1 + 0.23 + 0.34 + 0.45)\n    term4 = (0.23 + 0.34)\n    \n    # Calculating the final result\n    ans = (term1 * term2) - (term3 * term4)\n\n    return ans\n\nans = solution()"
    ],
    "c249f8e6939148b99f296ae70f7cf7e8": [
        "def solution():\n    ans = 4125 - 837\n    return ans\n\nans = solution()"
    ],
    "1ccbabdc7f034326be8b94b02ccbf7ad": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the masses\n    A, B, C = symbols('A B C')\n\n    # Set up the equations based on the problem\n    equation1 = Eq(A, 5 * B)        # A is 5 times B\n    equation2 = Eq(C, B - 75)       # C is 75g less than B\n    equation3 = Eq(A + B + C, 835)  # Sum of A, B, C is 835g\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n    return solutions[A]\n\nans = solution()"
    ],
    "e2ea592e99324a6b86bbb07ba971a430": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the total amount of money Bud had initially\n    total_money = symbols('total_money')\n\n    # Create equation for the cost of book and bag\n    book_cost = (1/3) * total_money\n    bag_cost = (2/5) * total_money\n\n    # The total cost of the book and bag is £132\n    equation = Eq(book_cost + bag_cost, 132)\n\n    # Solve the equation\n    solved = solve(equation, total_money)\n\n    return solved[0]\n\nans = solution()"
    ],
    "101e7c9b793b4e26ac47357202b6291d": [
        "def solution():\n    num_divisible_by_5 = 105 // 5\n    num_divisible_by_7 = 105 // 7\n    num_divisible_by_5_and_7 = 105 // (5*7)\n\n    # Applying the inclusion-exclusion principle\n    ans = num_divisible_by_5 + num_divisible_by_7 - num_divisible_by_5_and_7\n    return ans\n\nans = solution()"
    ],
    "2b1f58b0e57c45099538b16cb3f3c104": [
        "def solution():\n    pages = 215\n    total_digits = 0\n    \n    # Count digits of page numbers in the ranges: 1-9, 10-99, 100-215\n    for i in range(1, pages + 1):\n        total_digits += len(str(i))\n    \n    return total_digits\n\nans = solution()"
    ],
    "eca2b23e39bc4c299b30d3fbc9b3d73d": [
        "def solution():\n    for i in range(10000, 100000):\n        if int('1' + str(i)) == int(str(i) + '1') // 3:\n            return i\n\nans = solution()"
    ],
    "a93778b948054d42ad167593922df9c6": [
        "def solution():\n    # Darrell might draw all the blue and white beads before drawing 5 green beads\n    # So we calculate the worst-case scenario where he draws all the other colored beads.\n    blue_beads = 5\n    white_beads = 6\n    must_draw_green = 5  # Darrell needs at least 5 green beads\n\n    # Darrell draws all blue and white beads first\n    beads_drawn = blue_beads + white_beads\n\n    # Then he must draw 5 green beads to make sure he has 5 green beads\n    beads_drawn += must_draw_green\n\n    return beads_drawn\n\nans = solution()"
    ],
    "b45003629b394ccebb1e2b405d724add": [
        "def solution():\n    # The notebook has 81 pages\n    total_pages = 81\n\n    # Count the digits used for each set of page numbers\n    # 1-9   -> 9 pages  with 1 digit each\n    # 10-99 -> 72 pages with 2 digits each\n    digits_1_9 = 9 * 1\n    digits_10_99 = (total_pages - 9) * 2\n\n    # The total number of digits used\n    total_digits = digits_1_9 + digits_10_99\n\n    return total_digits\n\nans = solution()"
    ],
    "40d0f5e5a3d04db08f0040c8220611b9": [
        "def solution():\n    # Calculate the partition of integer, as the baskets are identical\n    count = 0\n    for x1 in range(7):\n        for x2 in range(x1, 7):\n            if x1 + x2 <= 6:\n                # The third basket's count is determined by the other two\n                count += 1\n    return count\n\nans = solution()"
    ],
    "1222cdddea1c4817bb25740ae257c8cd": [
        "def solution():\n    # John needs 12 minutes to walk from the first floor to the fourth floor\n    # which means he walks 3 floors (from 1st to 4th) in 12 minutes\n    time_for_3_floors = 12\n    \n    # Now we need to find out how much time he needs for 7 floors (from 1st to 8th)\n    # If he walks at constant speed, the time is proportional to the number of floors\n    time_for_7_floors = (7 / 3) * time_for_3_floors\n\n    return time_for_7_floors\n\nans = solution()"
    ],
    "0591335fbeb544698580a0e98be03d2a": [
        "def solution():\n    def new_operation(a, b):\n        return 5*a - 2*b\n\n    ans = new_operation(6, 2)\n    return ans\n\nans = solution()"
    ],
    "9c0a5f1ed9254394ae35f6dd067361f9": [
        "def solution():\n    months = 5\n    average_pizzas_per_month = 15\n    total_pizzas = months * average_pizzas_per_month\n    return total_pizzas\n\nans = solution()"
    ],
    "1b2e33b69c4341748d743ea3c35f44bd": [
        "def solution():\n    remainder = 3\n    possible_values = set()\n\n    for divisor in range(1, 40):\n        for quotient in range(1, (40 - remainder) // divisor):\n            dividend = divisor * quotient + remainder\n            if divisor + dividend + quotient + remainder == 40:\n                possible_values.add(dividend / quotient)\n\n    return len(possible_values)\n\nans = solution()"
    ],
    "979c9332296e4b05927d9ad6ccb64f02": [
        "def solution():\n    # Original ratio\n    birds_to_squirrels_original = 8 / 5\n    # Total number of animals remains the same\n    # Let the original number of birds be 8x and squirrels be 5x\n    birds_original = 8\n    squirrels_original = 5\n    \n    # Squirrels increased by 20%\n    squirrels_new = squirrels_original * 1.2\n    \n    # Total number remains the same, so birds must decrease\n    birds_new = birds_original + squirrels_original - squirrels_new\n    \n    # Calculate percentage of birds that flew away\n    birds_flew_away_percentage = ((birds_original - birds_new) / birds_original) * 100\n    \n    return birds_flew_away_percentage\n\nans = solution()"
    ],
    "1804adbd1c694fbf927bc62b4de481a7": [
        "def solution():\n    return 32 * 2.99\n\nans = solution()"
    ],
    "5b2b9a10bf9b44c1988bdcc8f01d4a18": [
        "def solution():\n    def custom_operation(a, b):\n        return a + b - int(str(b)[0])\n\n    ans = custom_operation(9, 20)\n\n    return ans\n\nans = solution()"
    ],
    "6fec75e44860480685b5445a5272826d": [
        "def solution():\n    first_day_pages = 30\n    last_day_pages = 70\n    difference = 4\n\n    # Calculate the number of days using the arithmetic sequence formula:\n    # last_term = first_term + (num_terms - 1) * difference\n    num_days = ((last_day_pages - first_day_pages) // difference) + 1\n\n    return int(num_days)\n\nans = solution()"
    ],
    "edb6ff670e7a48e9aef3d4e832e24086": [
        "def solution():\n    first_term = 7\n    common_difference = 15 - 7\n    term_number = 5  # We want the fifth term as we have the first four terms already.\n\n    next_term = first_term + (term_number - 1) * common_difference\n    return next_term\n\nans = solution()"
    ],
    "1abbedb2f71c4dbab5df55bde5e26a5d": [
        "def solution():\n    n = 50\n    ans = n * (n + 1) // 2\n    return ans\n\nans = solution()"
    ],
    "21f2e786c44e43fd8fbda4a44480bfbf": [
        "def solution():\n    total_cartons = 8\n    juice_per_carton = 3  # in liters\n    juice_drunk = 9  # in liters\n    container_volume = 5  # in liters\n\n    total_juice = total_cartons * juice_per_carton\n    remaining_juice = total_juice - juice_drunk\n\n    if remaining_juice % container_volume == 0:\n        containers_needed = remaining_juice // container_volume\n    else:\n        containers_needed = (remaining_juice // container_volume) + 1\n\n    return containers_needed\n\nans = solution()"
    ],
    "7bb759a90ae748649b4ddfa82640d631": [
        "def solution():\n    ans = 782 - 9 * 52 // 2\n    return ans\n\nans = solution()"
    ],
    "9cd1a6eac3734a348b37444a5f4ed5e0": [
        "def solution():\n    return 7 * 8\n\nans = solution()"
    ],
    "83fd4800ad634c9cb2b8e8bbefea460b": [
        "def solution():\n    loafs_per_cup = 7 / 4\n    desired_loafs = 35\n    cups_needed = desired_loafs / loafs_per_cup\n    return cups_needed\n\nans = solution()"
    ],
    "de32a278ca184c9c9f171ce6754bd1c9": [
        "def solution():\n    from itertools import permutations\n\n    digits = range(1, 10)  # Possible digit values from 1 to 9\n    max_art = 0  # Variable to keep track of max A+R+T value\n\n    for perm in permutations(digits, 4):\n        D, A, R, T = perm\n        if D + A + R + T == 11 and T + A + R + T == 12 and C + A + R + T == 13:\n            max_art = max(max_art, A + R + T)\n\n    return max_art\n\nans = solution()"
    ],
    "71733d004c514cf2bf9b3a3ddaab0766": [
        "def solution():\n    friends = 4\n    cards_sent_each = friends - 1\n    total_cards_sent = friends * cards_sent_each\n    return total_cards_sent\n\nans = solution()"
    ],
    "1b458ff9afcc4e6694b4762bc4c0b43d": [
        "def solution():\n    # Analyze the given compound inequality:\n    #   5/9 < 9/A < 1\n    # We can split this into two separate inequalities:\n    #   (1) 5/9 < 9/A -> A > 81/5 = 16.2\n    # Since A is an integer, A has to be greater than 16.\n    #   (2) 9/A < 1 -> A > 9\n    # From inequality (1), we know that A > 16\n    # Therefore, A can start from 17, because 16.2 rounded up to next integer is 17.\n    \n    # The upper limit for A is imposed by inequality (2), that 9/A < 1\n    # But since any integer A greater than 9 will satisfy this condition,\n    # we find the upper limit for A from inequality (1) instead (where A > 16).\n    \n    # A must be less than 9, because 9/A should be less than 1.\n    # The smallest integer greater than 9 is 10.\n    # Therefore, the upper bound cannot be greater than 9 as it would not satisfy 9/A < 1.\n    \n    # Calculate the number of possible integer values for A that meet the criteria:\n    #   Count integers from 17 to 9 (exclusive)\n    ans = 9 - 17\n    return abs(ans) # Ensure the result is positive, as the number of values cannot be negative\n\nans = solution()"
    ],
    "1af542041fcd45c9a176b5924756243f": [
        "def solution():\n    left_of_tanya = 3\n    right_of_tanya = 5\n    tanya = 1  # Counting Tanya herself\n\n    total_members = left_of_tanya + right_of_tanya + tanya\n\n    return total_members\n\nans = solution()"
    ],
    "630d3f51949a4ab29f59d2121794d3d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boys, girls = symbols('boys girls')\n    total_students = 39\n\n    equation1 = Eq(boys / 4, girls * 2 / 5)\n    equation2 = Eq(boys + girls, total_students)\n\n    solutions = solve((equation1, equation2), (boys, girls))\n\n    difference = solutions[boys] - solutions[girls]\n\n    return difference\n\nans = solution()"
    ],
    "42831d4ef6484891b15f159d0746344e": [
        "def solution():\n    numerator = 52\n    denominator = 2/3\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "33a1b183569242aa916ecbe40586c0c7": [
        "def solution():\n    from sympy import primefactors\n\n    factors = primefactors(87878)\n    largest_prime_factor = max(factors)\n    \n    # Now we need to find the largest four-digit prime factor\n    for factor in sorted(factors, reverse=True):\n        if 1000 <= factor <= 9999:\n            largest_prime_factor = factor\n            break\n\n    return largest_prime_factor\n\nans = solution()"
    ],
    "8d22899bdd964169a2e962c83bfbcbd5": [
        "def solution():\n    total_weight = 24 * 5\n    max_load_per_van = 12\n    number_of_vans = -(-total_weight // max_load_per_van)  # Ceiling division\n\n    return number_of_vans\n\nans = solution()"
    ],
    "c8f89b66009449e3865d5474344519ce": [
        "def solution():\n    # Calculate the time for each segment of the race\n    time_first_segment = 280 / 7  # time = distance / speed\n    time_middle_segment = 400 / 5\n    time_last_segment = (800 - 280 - 400) / 8\n\n    # Calculate the total time\n    total_time = time_first_segment + time_middle_segment + time_last_segment\n\n    return total_time\n\nans = solution()"
    ],
    "3cac306af46048b1913124fd77518e07": [
        "def solution():\n    ans = (128 - (24 + 16) / 5) * 2\n    return ans\n\nans = solution()"
    ],
    "d0dd7735401a440189d8289ae8ab1028": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols\n    daniel, patrick = symbols('daniel patrick')\n\n    # Initial condition, they both had an equal number of stickers\n    equation1 = Eq(daniel, patrick)\n\n    # Daniel gives away 24 stickers\n    daniel_after = daniel - 24\n\n    # Patrick buys 10 more stickers\n    patrick_after = patrick + 10\n\n    # In the end Patrick had twice as many stickers as Daniel\n    equation2 = Eq(patrick_after, 2 * daniel_after)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (daniel, patrick))\n\n    return solutions[daniel]\n\nans = solution()"
    ],
    "82b6a8beca7d4600a963dd45eccccf7d": [
        "def solution():\n    def partitions(n, I=1):\n        yield (n,)\n        for i in range(I, n // 2 + 1):\n            for p in partitions(n - i, i):\n                yield (i,) + p\n\n    ans = list(partitions(5))\n    return len(ans)\n\nans = solution()"
    ],
    "b9cbfde4746d478da4ea66e77bc853b0": [
        "def solution():\n    henry_situps = 17\n    jack_situps = 10 + 3 * henry_situps\n    return jack_situps\n\nans = solution()"
    ],
    "f701b731918b424b845fa7f5be85cca5": [
        "def solution():\n    # Find the least common multiple (LCM) of 3 and 7,\n    # which is the smallest number that can be divided by both 3 and 7.\n    # As 3 and 7 are coprime, their LCM is their product.\n    lcm = 3 * 7\n    \n    # Iterate through two-digit numbers starting from the LCM until we find one that is also a two-digit number\n    for number in range(lcm, 100):\n        if number % 3 == 0 and number % 7 == 0:\n            return number\n\nans = solution()"
    ],
    "14d6fb53ee054b819a454314775c99b9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    fiona, gary, harold = symbols('fiona gary harold')\n\n    equation1 = Eq(fiona + gary, 973)\n    equation2 = Eq(fiona + harold, 1823)\n    equation3 = Eq(harold, 6 * gary)\n\n    solutions = solve((equation1, equation2, equation3), (fiona, gary, harold))\n\n    return solutions[fiona]\n\nans = solution()"
    ],
    "069dc14c48254481a3bc04db18550ed3": [
        "def solution():\n    whale_depth = -82  # Whale is 82 metres below sea level.\n    plane_height = 569 # Plane is 569 metres above sea level.\n\n    # The vertical distance is the sum of the absolute values of their depths.\n    vertical_distance = abs(whale_depth) + plane_height\n\n    return vertical_distance\n\nans = solution()"
    ],
    "ec878d4f92a64aa1ab12f86c3fa8a94b": [
        "def solution():\n    skirts_per_day = 6\n    total_skirts = sum([skirts_per_day * num_workers for num_workers in range(1, 10)])\n    return total_skirts\n\nans = solution()"
    ],
    "d7f813e5b15745bbaf0c9127836fa459": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of fruits\n    x = symbols('x')\n\n    # We know that 2/3x - 1/9x = (12 + (x - (2/3x + 1/9x)))\n    equation = Eq((2/3) * x - (1/9) * x, 12 + (x - ((2/3) * x + (1/9) * x)))\n\n    # Solve the equation\n    fruits_total = solve(equation, x)[0]\n\n    # Calculate the number of lemons\n    lemons = fruits_total - (2/3 * fruits_total + 1/9 * fruits_total)\n\n    return lemons\n\nans = solution()"
    ],
    "ce865959d3344e57a3aaf073ee2bb3fb": [
        "def solution():\n    total_pupils = 30\n    right_handed = 21\n    girls = 16\n\n    # Minimum number of right-handed girls would be the number of right-handed people\n    # minus the number of boys, assuming all boys are right-handed. \n    # This would leave the minimum possible number of right-handed girls.\n    \n    max_right_handed_boys = total_pupils - girls\n    min_right_handed_girls = right_handed - max_right_handed_boys\n    \n    # If we still get a negative number, that means some girls have to be right-handed \n    # since not all boys could be right-handed. So we set it to zero in that case.\n    min_right_handed_girls = max(min_right_handed_girls, 0)\n\n    return min_right_handed_girls\n\nans = solution()"
    ],
    "fffb4e32f90b489bbe7949d334d8186e": [
        "def solution():\n    return 234000 // 520\n\nans = solution()"
    ],
    "2d6aea4ba7814aac9c2750870ec89264": [
        "def solution():\n    jenny = 6\n    qiqi = jenny + 5\n    return qiqi\n\nans = solution()"
    ],
    "de4ad58a954b4989ae634d7131538ded": [
        "def solution():\n    total_erasers = 246\n    difference = 32\n    brothers_erasers = (total_erasers - difference) // 2\n    return brothers_erasers\n\nans = solution()"
    ],
    "87b40651078348b78ccc888ac86bf65e": [
        "def solution():\n    # Given probabilities\n    probability_over_20 = 0.6\n    probability_over_25 = 0.3\n\n    # Probability of living over 25 given it has lived over 20\n    probability_over_25_given_over_20 = probability_over_25 / probability_over_20\n\n    return probability_over_25_given_over_20\n\nans = solution()"
    ],
    "35851918f9924fceb5a562dd5d192675": [
        "def solution():\n    # Number of taps\n    taps = 5\n    # Time for taps to fill 1 litre jug\n    time_for_1_litre = 2  # minutes\n\n    # Each tap's rate per minute\n    rate_per_tap = 1 / (taps * time_for_1_litre)  # litre per minute for each tap\n\n    # Volume of the jug to be filled by one tap\n    volume_to_fill = 500 / 1000  # converting 500ml to litres\n\n    # Time to fill the 500ml jug with one tap\n    time_for_500ml = volume_to_fill / rate_per_tap\n\n    return time_for_500ml\n\nans = solution()"
    ],
    "466b36af3a8446caafde7a548b3f78e0": [
        "def solution():\n    smallest_diff = float('inf')  # Initialize to a very large number.\n\n    # Generate all 9-digit numbers using digits 1 to 9\n    from itertools import permutations\n    all_numbers = permutations('123456789')\n    \n    for number in all_numbers:\n        num1 = int(''.join(number))  # Convert tuple to integer\n        remaining_numbers = permutations('123456789')\n        \n        for other_number in remaining_numbers:\n            num2 = int(''.join(other_number))  # Convert tuple to integer\n            \n            if num1 != num2:  # Ensure they're different numbers\n                diff = abs(num1 - num2)  # Calculate absolute difference\n                \n                if diff < smallest_diff:  # Update smallest difference\n                    smallest_diff = diff\n\n    return smallest_diff\n\nans = solution()"
    ],
    "4c87648eb039475abd9708a1ed7cecfa": [
        "def solution():\n    numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 29]\n    total_sum = sum(numbers)\n    return total_sum\n\nans = solution()"
    ],
    "e099576e4e594256ae673a9a633c5f85": [
        "def solution():\n    # Define a function for the new operator\n    def new_operator(A, B):\n        return (A * B) + (A + B)\n\n    # We are looking for an integer a such that a*a=399\n    # So we iterate through possible values of a to find the solution\n    a = 1\n    while new_operator(a, a) != 399:\n        a += 1\n    return a\n\nans = solution()"
    ],
    "f5c4e7bc746541e9b6316434d0ceb4b9": [
        "def solution():\n    ben_height = 110  # Ben's height in cm\n    difference = 20   # Difference in height between Ben and Sally in cm\n\n    sally_height = ben_height + difference  # Calculate Sally's height\n\n    return sally_height\n\nans = solution()"
    ],
    "7a70eb04e5694b2f959619353709df11": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_visitors = symbols('total_visitors')    \n    \n    children = (3/5) * total_visitors\n    remaining = total_visitors - children\n    men = (1/2) * remaining\n    \n    equation = Eq(children, men + 140)\n    \n    solution = solve(equation, total_visitors)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "4ca9bdd241ae40399356da6f218dbb41": [
        "def solution():\n    result = 360 / (70 - 4 * 16)\n    return result\n\nans = solution()"
    ],
    "1b35f91f96ce4f3c9d7ed9202f8cdf3f": [
        "def solution():\n    initial_volume_ml = 2000  # 2 liters = 2000 millilitres\n    amount_drank_ml = 350     # Amount drank in millilitres\n\n    remaining_volume_ml = initial_volume_ml - amount_drank_ml\n\n    return remaining_volume_ml\n\nans = solution()"
    ],
    "6f30ded079154369a2666ef1c735c804": [
        "def solution():\n    result = (40 / 100) * 3280\n    return result\n\nans = solution()"
    ],
    "a59a1a5e7bb041eeba8b3ee3076a0168": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 3, 4, 6, 7, 8]\n    max_sum = 0\n    \n    for perm in permutations(digits, 6):\n        num1 = perm[0] * 100 + perm[1] * 10 + perm[2]\n        num2 = perm[3] * 100 + perm[4] * 10 + perm[5]\n        current_sum = num1 + num2\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum\n\nans = solution()"
    ],
    "faea17ac401e48f69feca7264a676aa1": [
        "def solution():\n    # Rule 1: Multiply by 2 (1 -> 2 -> 4 -> 8 -> 16 -> 32...)\n    # Rule 2: Add 7 (0 -> 7 -> 14 -> 21 -> 28 -> 35...)\n    # The sequence is: 1(0+1), 8(1*2+8), 16(2*2+8), 23(16+7), 46(23*2), 53(46+7)...\n    # 1, 8, 16, 23, 46, 53, ...\n    # The next operation is multiplication by 2 (since the last was an addition)\n\n    prev_number = 53\n    next_number = prev_number * 2\n\n    return next_number\n\nans = solution()"
    ],
    "77d56c10f2874a70a787b5301834ff74": [
        "def solution():\n    pay_per_match = 500\n    pay_per_goal = 100\n    number_of_matches = 20\n    average_goals_per_game = 2\n    \n    total_earning = (pay_per_match * number_of_matches) + (pay_per_goal * average_goals_per_game * number_of_matches)\n    \n    return total_earning\n\nans = solution()"
    ],
    "2baa1f80095e4ef99463beca11920717": [
        "def solution():\n    horse_grass_per_day = 4  # Amount of grass 1 horse eats is equal to 4 sheep\n    sheep_grass_per_day = 1  # Amount of grass 1 sheep eats (implicitly stated)\n\n    total_grass_for_20_horses = 20 * horse_grass_per_day * 12  # Total grass consumed by 20 horses in 12 days\n    total_grass_for_60_sheep = 60 * sheep_grass_per_day * 24  # Total grass consumed by 60 sheep in 24 days\n\n    # Since the amount of grass is the same, we equate total grass for horses and sheep to find the amount of grass\n    # on the grassland\n    total_grass = total_grass_for_20_horses  # equivalent to total_grass_for_60_sheep\n\n    # Amount of grass 12 horses and 88 sheep eat per day\n    daily_consumption_by_horses_and_sheep = 12 * horse_grass_per_day + 88 * sheep_grass_per_day\n    days_to_eat_all_grass = total_grass / daily_consumption_by_horses_and_sheep  # Days taken to eat all the grass\n\n    return days_to_eat_all_grass\n\nans = solution()"
    ],
    "15d47923017f46819afb2823ad09cc4f": [
        "def solution():\n    ans = 125 * 33 * 8\n    return ans\n\nans = solution()"
    ],
    "e069b4976d444e998bace1344680903f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, b, c, total = symbols('a b c total')\n\n    # If A and C are turned on, A provides 18 tons, so C provides total - 18 tons\n    equation1 = Eq(a + c, total)\n    equation2 = Eq(a, 18)\n\n    # If B and C are turned on, B provides 27 tons, so C provides total - 27 tons\n    equation3 = Eq(b + c, total)\n    equation4 = Eq(b, 27)\n\n    # The flow rate of B is twice that of A\n    equation5 = Eq(b, 2 * a)\n\n    # Solving the equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (a, b, c, total))\n\n    return solutions[total]\n\nans = solution()"
    ],
    "8521e58090644e50b36a4c1538e31de9": [
        "def solution():\n    total_weight = 8\n    total_cost = 26.8\n    cost_per_kilogram = total_cost / total_weight\n    return cost_per_kilogram\n\nans = solution()"
    ],
    "8ede2732f5484360930b19455debcec8": [
        "def solution():\n    a = 1\n    b = 10\n    res = sum(range(a, 2 * b, 2))\n    return res\n\nans = solution()"
    ],
    "519388df35614f98adbf4fccf30c1f5e": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10\n    no_sevens = 8 * 9 * 9  # First digit can't be 0 or 7, second and third can't be 7\n    at_least_two_sevens = total_three_digit_numbers - no_sevens\n\n    return at_least_two_sevens\n\nans = solution()"
    ],
    "45f8a5a1f53f4bff9dace272c0ede1d7": [
        "def solution():\n    return 10 - 5 + 1\n\nans = solution()"
    ],
    "92c3ddc959274727b4fd914c29d362cb": [
        "from itertools import permutations\n\ndef solution():\n    for perm in permutations(range(10), 4):\n        M, A, T, H = perm\n        if M == 0 or H == 0:  # M and H can't be 0 because they are the first digits.\n            continue\n        MATH = M * 1000 + A * 100 + T * 10 + H\n        HTAM = H * 1000 + T * 100 + A * 10 + M\n        if MATH + HTAM == 12221:\n            return A + M + T + H\n\nans = solution()"
    ],
    "ec0dc6144d204d6c943bc67a1de14ef9": [
        "def solution():\n    total_cost = 19.20\n    number_of_balls = 16\n    cost_per_ball = total_cost / number_of_balls\n    return cost_per_ball\n\nans = solution()"
    ],
    "efd4072c0059428488794f72455b87a4": [
        "def solution():\n    number1 = 1.9\n    number2 = 1.99\n    ans = (number1 + number2) / 2\n    return ans\n\nans = solution()"
    ],
    "56ce2f46479443bfaa5b050d2e0cbbe4": [
        "from math import factorial\n\ndef solution():\n    # Treat Mr. Spencer and his 2 children as a single unit first\n    # They can be arranged in 3! ways since he must be between the 2 children\n    spencer_and_kids_arrangements = factorial(3)\n    \n    # There are 4 \"units\" now (Mr. Spencer with kids + 3 other people)\n    # They can sit in any of the 4 seats in 4! ways\n    unit_arrangements = factorial(4)\n    \n    # Multiply the two possibilities to get the total arrangements\n    total_arrangements = spencer_and_kids_arrangements * unit_arrangements\n    \n    return total_arrangements\n\nans = solution()"
    ],
    "db79add64b5e4e55bd1c4d7204bfe7d4": [
        "def solution():\n    total_sweets = 60\n    sweets_eaten_by_bill = total_sweets / 2\n    sweets_left = total_sweets - sweets_eaten_by_bill\n    sweets_given_away = sweets_left / 3\n    sweets_remaining = sweets_left - sweets_given_away\n    \n    return sweets_remaining\n\nans = solution()"
    ],
    "ba1ea0471abe4147b19a80a73dee7d82": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of $2 notes, y be the number of $5 notes\n    x, y = symbols('x y')\n\n    # Total number of notes at first\n    equation1 = Eq(x + y, 55)\n\n    # Cindy spent 1/3 of the $2 notes\n    equation2 = Eq(x - x / 3, y + 8)\n\n    # After spending and receiving, the number of $5 notes is 3/7 of remaining notes\n    # Remaining notes = x - x / 3 + y + 8\n    # $5 notes = y + 8\n    equation3 = Eq(y + 8, 3/7 * (x - x / 3 + y + 8))\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (x, y))\n\n    # Money at first = $2 * number of $2 notes + $5 * number of $5 notes\n    total_money = 2 * solutions[x] + 5 * solutions[y]\n\n    return total_money\n\nans = solution()"
    ],
    "120862b4815543c8aca7421dc70a00e8": [
        "def solution():\n    total_score = 23\n    correct_score = 5\n    incorrect_penalty = -2\n    total_questions = 6\n\n    for correct in range(total_questions + 1):\n        incorrect = total_questions - correct\n        if correct_score * correct + incorrect_penalty * incorrect == total_score:\n            return correct\n\nans = solution()"
    ],
    "1d9a3128b1db4b549effea458b3678b2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the variable\n    x = symbols('x')\n    # Define the equation\n    equation = Eq(4 * (x - 3) + 6 * x, 28)\n    # Solve the equation\n    solution = solve(equation, x)\n    \n    # Get the result\n    return solution[0]\n\n# Call the function and assign the result to ans\nans = solution()"
    ],
    "c58c161a2a7e4104a3d8b34ae6e39802": [
        "def solution():\n    distance = 56  # distance to friend's house in meters\n    speed = 7      # running speed in meters per minute\n    \n    time_taken = distance / speed  # time taken to run to the friend's house in minutes\n    \n    return time_taken\n\nans = solution()"
    ],
    "87f2dc4599dd46e7b4da2d0d59bb29b2": [
        "def solution():\n    factors_of_24 = [i for i in range(1, 25) if 24 % i == 0]\n    factors_of_52 = [i for i in range(1, 53) if 52 % i == 0]\n    \n    common_factors = [f for f in factors_of_24 if f in factors_of_52]\n    \n    B = max(common_factors)  # The greatest common factor will be considered as B for the smallest A+C\n    A = 24 // B\n    C = 52 // B\n\n    return A + C\n\nans = solution()"
    ],
    "1713227e7a80417398659b991525285c": [
        "def solution():\n    from math import factorial as fact\n    \n    # Treat A, B, C as a single entity, as well as E and F.\n    # For ABC, we have 3! ways to arrange within the group.\n    ways_ABC = fact(3)\n\n    # For EF, we have 2! ways to arrange within the group.\n    ways_EF = fact(2)\n    \n    # Now, treat ABC group as one unit, EF group as one unit, plus the other 3 individuals, \n    # we have 5 units to arrange.\n    ways_units = fact(5)\n\n    # Total ways is the product of the ways to arrange units and ways within groups.\n    total_ways = ways_ABC * ways_EF * ways_units\n\n    return total_ways\n\nans = solution()"
    ],
    "7b25a6fdbf764009abb3fe46b1451b1f": [
        "def solution():\n    n = 20\n    ans = (2 * n) - 1\n    return ans\n\nans = solution()"
    ],
    "f5c39fd451224811bc9f3fa976367ff8": [
        "def solution():\n    # First, set up the equation: (number / 3) + 7 = 18\n    # To find the number, we perform the inverse operations\n    result = 18\n    result -= 7   # inverse of adding 7\n    result *= 3   # inverse of dividing by 3, which is multiplying by 3\n    return result\n\nans = solution()"
    ],
    "d709aa3b4d544c198afcabe95e0a6f53": [
        "def solution():\n    # Number of sweets Mr. Lim is short of when giving 6 sweets to each student\n    short_6_sweets = 26\n    # Number of sweets Mr. Lim is short of when giving 5 sweets to each student\n    short_5_sweets = 5\n\n    # The difference in sweets between giving 5 sweets per student and 6 sweets per student\n    difference = short_6_sweets - short_5_sweets\n\n    # The number of students\n    students = difference\n\n    # Total sweets there are\n    total_sweets = students * 5 + short_5_sweets\n\n    return total_sweets\n\nans = solution()"
    ],
    "454de52781254b73adf45135eef41054": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    boys, girls = symbols('boys girls')\n    \n    # Initial ratio\n    ratio_initial = Eq(boys / girls, 5 / 3)\n    \n    # After 15 boys left, new ratio\n    ratio_after = Eq((boys - 15) / girls, 5 / 6)\n    \n    # Solve the system of equations\n    solutions = solve((ratio_initial, ratio_after), (boys, girls))\n    \n    total = solutions[boys] + solutions[girls]\n    \n    return total\n\nans = solution()"
    ],
    "c6731b7250a84dddb40920297aeac159": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let's denote the number of scarfs Diana produces per day as x\n    # Total scarfs she produces is x * 6\n    # If she produces 24 more scarfs per day, the total is (x + 24) * (6 - 2)\n    x = symbols('x')\n    \n    # Setting the equations based on the above description\n    eq = Eq(x * 6, (x + 24) * 4)\n    \n    # Solve the equation for x\n    scarfs_per_day = solve(eq, x)\n    \n    # The total number of scarfs she needs to produce\n    total_scarfs = scarfs_per_day[0] * 6\n    \n    return total_scarfs\n\nans = solution()"
    ],
    "3c337534e32542a2a1408abf3137fc73": [
        "def solution():\n    count = 0\n    for x in range(1, 15):\n        for y in range(x + 1, 15):  # Ensure y > x for different numbers\n            for z in range(y + 1, 15):  # Ensure z > y > x\n                if x + y + z == 15:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "53a8834a683e42428e72d56e59ccf186": [
        "def solution():\n    series_sum = sum(range(2, 15+1, 2))\n    return series_sum\n\nans = solution()"
    ],
    "2bf9d0f65e0c410a9060c2958cf95896": [
        "from sympy import factorint\n\ndef solution():\n    # Factor 675 into its prime factors\n    prime_factors = factorint(675)\n    \n    # For the product to be a square, each prime factor's exponent should be even\n    b_factors = {p: (2 - e % 2) for p, e in prime_factors.items() if e % 2 != 0}\n\n    # Calculate B by multiplying the factors that were odd in 675\n    B = 1\n    for p, e in b_factors.items():\n        B *= p ** e\n    \n    return B\n\nans = solution()"
    ],
    "08d6f2da7cab499fa7f725364cce9c85": [
        "def solution():\n    # Let 'x' be the original price of the bike.\n    # After applying the 'third off' sale, the bike sells for 2/3 of its original price.\n    sale_price = 114\n    original_price = (sale_price * 3) / 2\n\n    return original_price\n\nans = solution()"
    ],
    "39d04fb6c8704dc88d3f67c6f0d16d16": [
        "def solution():\n    shelby_current_age = 65\n    shelby_age_5_years_ago = shelby_current_age - 5\n    josh_age_5_years_ago = (3/5) * shelby_age_5_years_ago\n    josh_current_age = josh_age_5_years_ago + 5\n    return josh_current_age\n\nans = solution()"
    ],
    "1ed9cf1688a143ad9c551e4a3800d10f": [
        "def solution():\n    product = 10 * 20 * 30 * 40\n    return product\n\nans = solution()"
    ],
    "33ef6b53bcae4073868c3823af12b33b": [
        "def solution():\n    multipack_price_pence = 6.95 * 100\n    individual_can_price_pence = 65\n    total_individual_price_pence = 12 * individual_can_price_pence\n    savings = total_individual_price_pence - multipack_price_pence\n    return savings\n\nans = solution()"
    ],
    "b50cc1f20ca94e10b645d2097f488894": [
        "def solution():\n    total_amount = 21.40\n    quarter_amount = total_amount / 4\n    return quarter_amount\n\nans = solution()"
    ],
    "47f9d71bbd1347aea812d6674ed1a0d8": [
        "def solution():\n    # Let x be the time it takes for Alan to paint the room on his own\n    # 1/x is the part of the room Alan can paint in one hour\n    # 1/6 is the part of the room Bob can paint in one hour\n    # 1/4 is the part of the room Alan and Bob can paint together in one hour\n    # According to the problem, we have: 1/x + 1/6 = 1/4\n  \n    # We find x by solving the equation for x\n    from sympy import symbols, Eq, solve\n\n    alan = symbols('alan')\n    equation = Eq(1/alan + 1/6, 1/4)\n\n    ans = solve(equation, alan)[0]\n    return ans\n\nans = solution()"
    ],
    "087f0c0cb6054a9ba715f2fad278b021": [
        "def solution():\n    # Let's denote Adam, Ben, and Carl's weights as A, B, and C respectively\n    # We have the following three equations based on the problem statement:\n    # A + B = 102\n    # B + C = 97\n    # A + C = 93\n\n    # We can solve these equations to find A, B, and C\n    # But we are interested in the total weight which is A + B + C\n\n    # Let's add the three equations together:\n    # 2A + 2B + 2C = 102 + 97 + 93\n\n    # Now divide by 2 to get A + B + C:\n    total_weight = (102 + 97 + 93) / 2\n    return total_weight\n\nans = solution()"
    ],
    "f51139da1a3a4082be80548a0b4d3748": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbols for the price of one apple and one banana\n    apple, banana = symbols('apple banana')\n    \n    # Create equations based on the given problem\n    equation1 = Eq(3 * apple + banana, 32)\n    equation2 = Eq(6 * apple + banana, 53)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (apple, banana))\n    \n    # Get the price of one banana\n    banana_price = solutions[banana]\n    \n    return banana_price\n\nans = solution()"
    ],
    "2f235f0788fb43ae81e1809f99c806ca": [
        "def solution():\n    total_stamps = 310\n    singapore_stamps = 172\n    malaysia_stamps = total_stamps - singapore_stamps\n    difference = singapore_stamps - malaysia_stamps\n    return difference\n\nans = solution()"
    ],
    "db4169b4944e4cbfbcf68f063aba4c5f": [
        "def solution():\n    principal_amount = 500\n    interest_rate = 0.08\n    number_of_years = 10\n    \n    account_balance_after_10_years = principal_amount * (1 + interest_rate) ** number_of_years\n    \n    return account_balance_after_10_years\n\nans = solution()"
    ],
    "536f036013ab4469bca6f5ad12ae6efc": [
        "def solution():\n    total = 0\n\n    # For 4 digits numbers\n    for thou in range(3, 5+1):\n        for hund in range(0, 6+1):\n            for ten in range(0, 6+1):\n                for unit in range(0, 6+1):\n                    if len(set([thou, hund, ten, unit])) == 4 and hund != 0 and ten != 0 and unit != 0:\n                        total += 1\n\n    # For 5 digits numbers starting with 3--- or 4---\n    for fives in range(3, 4+1):\n        for thou in range(0, 6+1):\n            for hund in range(0, 6+1):\n                for ten in range(0, 6+1):\n                    for unit in range(0, 6+1):\n                        if len(set([fives, thou, hund, ten, unit])) == 5 and thou != 0 and hund != 0 and ten != 0 and unit != 0:\n                            total += 1\n\n    # For 5 digits numbers starting with 51--\n    for thou in range(0, 2+1):\n        for hund in range(0, 6+1):\n            for ten in range(0, 6+1):\n                for unit in range(0, 6+1):\n                    if len(set([5, 1, thou, hund, ten, unit])) == 5 and thou != 0 and hund != 0 and ten != 0 and unit != 0:\n                        total += 1\n\n    return total\n\nans = solution()"
    ],
    "19fe1b137a4c47e4a70b3c03766f0a82": [
        "def solution():\n    percent_value = 55\n    total_value = 80\n\n    ans = (percent_value / 100) * total_value\n\n    return ans\n\nans = solution()"
    ],
    "6bc35ca24e8a477a8721a3ee646bc624": [
        "def solution():\n    return 10024 + 3968\n\nans = solution()"
    ],
    "533857ee1add4235b4509835e79455c4": [
        "def solution():\n    from math import gcd\n    ans = gcd(84, 108)\n    return ans\n\nans = solution()"
    ],
    "119cdd759a7d4ca9845f3cc8718b8443": [
        "def solution():\n    food_per_week = 15\n    weeks = 26\n    total_food_required = food_per_week * weeks\n    return total_food_required\n\nans = solution()"
    ],
    "098dd57d750645208b9a88bebb06ae3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    andrew, kim, shaun = symbols('andrew kim shaun')\n\n    equation1 = Eq(shaun, 2 * kim)\n    equation2 = Eq(andrew, shaun - 24)\n    equation3 = Eq(andrew + kim + shaun, 256)\n\n    solutions = solve((equation1, equation2, equation3), (andrew, kim, shaun))\n\n    return solutions[andrew]\n\nans = solution()"
    ],
    "8ae98f07396b40058f13ac11affb9784": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    original_score = symbols('original_score')\n\n    equation = Eq(original_score - 30, (original_score / 2) + 10)\n\n    sol = solve(equation, original_score)\n\n    return sol[0]\n\nans = solution()"
    ],
    "d5155e4d5ad84669b50a6dc5c2a99d1c": [
        "def solution():\n    for sweets in range(1, 30):\n        if sweets % 3 == 0 and sweets % 2 == 1 and sweets % 4 == 1 and sweets % 5 == 1:\n            return sweets\n\nans = solution()"
    ],
    "d1b3edb622a94a938bdd4deb2c79349e": [
        "def solution():\n    return 250 - 6*6 - 8*6\n\nans = solution()"
    ],
    "508b9d97347440a0b80cafeabef4a947": [
        "def solution():\n    total_votes = 120\n    current_votes = {'Mark': 22, 'Nicole': 27, 'Peter': 35}\n    remaining_votes = total_votes - sum(current_votes.values())\n    \n    max_other = max(current_votes['Mark'], current_votes['Nicole'])\n    votes_needed_for_peter = max_other + 1\n\n    votes_peter_needs_to_win = votes_needed_for_peter - current_votes['Peter']\n\n    return max(votes_peter_needs_to_win, 0) if remaining_votes >= votes_peter_needs_to_win else \"Impossible\"\n\nans = solution()"
    ],
    "eea021c591d7400d80e856a767d07752": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    alex, nicholas = symbols('alex nicholas')\n    \n    # Initial assumption: alex = nicholas\n    equation1 = Eq(alex, nicholas)\n    \n    # After spending:\n    equation2 = Eq(nicholas - 13, 6 * (alex - 58))\n    \n    # Solve the equations\n    solutions = solve((equation1, equation2), (alex, nicholas))\n    \n    # The total amount they had at first\n    total_amount = solutions[alex] + solutions[nicholas]\n    \n    return total_amount\n\nans = solution()"
    ],
    "0c1b04af51f742999f2ca9765aedb50d": [
        "def solution():\n    initial_flour = 600\n    remaining_flour = 21\n    used_flour = initial_flour - remaining_flour\n    return used_flour\n\nans = solution()"
    ],
    "6195126bb5a54128ab0d4b1902877f4f": [
        "def solution():\n    ans = 12.35 + 8.65 + 9.8 - 2.8\n    return ans\n\nans = solution()"
    ],
    "a6b80ec179af453daf8021b9dc7907b9": [
        "def solution():\n    return 9 ** (3 / 2)\n\nans = solution()"
    ],
    "b57cda394d944362b1e48088868e9f0c": [
        "def solution():\n    days_in_week = 7\n    days_later = 28\n\n    remainder = days_later % days_in_week\n\n    # Mapping days of the week to their respective codes\n    day_codes = {\n        'Monday': '0001',\n        'Tuesday': '0002',\n        'Wednesday': '0003',\n        'Thursday': '0004',\n        'Friday': '0005',\n        'Saturday': '0006',\n        'Sunday': '0007'\n    }\n\n    day_start = 'Monday'  # Starting day is Monday\n    days = list(day_codes.keys())\n\n    start_index = days.index(day_start)\n    end_index = (start_index + remainder) % days_in_week\n\n    result_day = days[end_index]\n\n    return day_codes[result_day]\n\nans = solution()"
    ],
    "0297a10276ed45e1aa82953f7cfb5934": [
        "def solution():\n    place_value = 0.001\n    value_of_digit = 6 * place_value\n    return value_of_digit\n\nans = solution()"
    ],
    "f475d2f1e6f34559b3da9ca1ce9d31ff": [
        "def solution():\n    numerator = 52\n    denominator = 2 / 3\n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "507ce61646b54d9d972812acdf557e23": [
        "def solution():\n    road_length = 240\n    interval = 12\n\n    num_poles = (road_length - interval) // interval\n\n    return num_poles\n\nans = solution()"
    ],
    "9d83d1281e9a4e2db5186517aa7ae8eb": [
        "def solution():\n    numbers = [11, 13, 17, 12]\n    mean_value = 11\n    total_numbers = len(numbers) + 1  # Including x\n    sum_of_numbers = mean_value * total_numbers\n\n    x = sum_of_numbers - sum(numbers)\n    \n    return x\n\nans = solution()"
    ],
    "cc51dc96be8d4cb99c8479ff14df80ea": [
        "def solution():\n    # The value of the 7 in the ten thousands place is 7 * 10,000\n    value_of_first_7 = 7 * 10000\n    # The value of the 7 in the tens place is 7 * 10\n    value_of_second_7 = 7 * 10\n    # The difference between the two values\n    diff = value_of_first_7 - value_of_second_7\n    return diff\n\nans = solution()"
    ],
    "8f9071448b334615b680eae78ad6d93f": [
        "def solution():\n    cost_per_person = 253 / 11\n    total_cost_for_12 = cost_per_person * 12\n    return total_cost_for_12\n\nans = solution()"
    ],
    "3c1879332bf54abaa9acb25e23c4e762": [
        "def solution():\n    pencils_plus_rules = 52  # Total number of pencils and rulers\n    pencils_more_than_rules = 10  # Alison has 10 more pencils than rulers\n\n    # Let the number of rulers be x.\n    # Then the number of pencils will be x + 10.\n    # According to the problem, x + (x + 10) = 52.\n\n    # Simplifying the equation: 2x + 10 = 52\n    # Solving for x: 2x = 52 - 10\n    # Therefore, x = (52 - 10) / 2\n    \n    rulers = (pencils_plus_rules - pencils_more_than_rules) / 2\n\n    return int(rulers)\n\nans = solution()"
    ],
    "eb0f5add450e4a9ab6a265d98bae439c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blue_dress, red_dress, yellow_dress = symbols('blue_dress red_dress yellow_dress')\n\n    equation1 = Eq(blue_dress, 2 * red_dress)\n    equation2 = Eq(yellow_dress, blue_dress + 2.40)\n    equation3 = Eq(blue_dress + red_dress + yellow_dress, 65.40)\n\n    solutions = solve((equation1, equation2, equation3), (blue_dress, red_dress, yellow_dress))\n\n    return solutions[blue_dress]\n\nans = solution()"
    ],
    "11e835ed8a2649f0b446fa81c9cd3d23": [
        "def solution():\n    boys_ratio = 5\n    girls_ratio = 6\n    number_of_boys = 200\n\n    total_ratio = boys_ratio + girls_ratio\n    ratio_per_boy = girls_ratio / total_ratio\n    number_of_girls = number_of_boys * (ratio_per_boy / (1 - ratio_per_boy))\n\n    return int(number_of_girls)\n\nans = solution()"
    ],
    "0aa9f0da78114b919761155b61de3f58": [
        "def solution():\n    # Since 1/3 is 0.333... repeating, the sum of any number of digits will be 3 times the number of digits\n    return 3 * 1000\n\nans = solution()"
    ],
    "1f3fc787b72e4079adc614b98529d7df": [
        "def solution():\n    percentage = 15\n    amount = 29\n\n    ans = (percentage / 100) * amount\n\n    return ans\n\nans = solution()"
    ],
    "a97ee845f64d4f25b71479ba9826754d": [
        "def solution():\n    # To ensure 4 marbles of the same colour, we will consider the worst-case scenario.\n    # This would involve taking out as many marbles as possible without getting 4 of the same colour.\n\n    # We can take 3 marbles of each colour without reaching 4 of the same colour.\n    # 3 red + 3 yellow + 3 blue = 9 marbles.\n    marbles_taken = 3 * 3\n\n    # The next marble taken of any colour will ensure 4 marbles of the same colour.\n    # So we need to take one more marble after the 9 marbles to guarantee 4 of the same colour.\n    marbles_taken += 1\n\n    return marbles_taken\n\nans = solution()"
    ],
    "06a3c4c2e5804a44ace159113da6ba05": [
        "def solution():\n    # Start at 2 and end at 100\n    start = 2\n    end = 100\n    # Counting by twos, we increase the number by 2 each time\n    step = 2\n    # We calculate the number of multiples of two from start to end\n    # by using the formula for the number of terms in an arithmetic sequence\n    num_multiples = (end - start) // step + 1\n    return num_multiples\n\nans = solution()"
    ],
    "ab6dca5c40ee402e956dc70279823b4c": [
        "def solution():\n    cost_of_8_books = 32\n    cost_of_1_book = cost_of_8_books / 8\n    cost_of_12_books = cost_of_1_book * 12\n    return cost_of_12_books\n\nans = solution()"
    ],
    "0b6bdeab9546405d978d1812c7201565": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(4 * x - 13, 55)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "ec87e304fc2740f28c9d1e303434b7bd": [
        "def solution():\n    fraction = 2 / 5\n    percentage = 35 / 100\n    decimal = 0.604\n\n    ans = fraction + percentage + decimal\n    return ans\n\nans = solution()"
    ],
    "027e7a3d49eb4325a8b4a3460e1cc172": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    # Let x be the original concentration (as a decimal) of the solution put into container A\n    x = symbols('x')\n\n    # After adding 10 grams of solution to A, the total amount in A becomes 40 grams.\n    # Next, when transferring 10 grams to B, we transfer 10 * x grams of the substance,\n    # resulting in 30 grams of water and 10 * x grams of the substance in container B.\n    # When we move 10 grams from B to C, we take 10 * (10*x / 40) grams of the substance\n    # from B, which is a quarter of the substance in B because we are taking a quarter\n    # of the solution from B (10 grams out of 40 grams total)\n\n    # In container C, we have 10 * (10*x / 40) / 60 substance concentration,\n    # and this concentration equals to 0.5 / 100 (converted 0.5% to decimal).\n    # So we form the equation and solve it.\n\n    equation = Eq(10 * (10 * x / 40) / 60, 0.5 / 100)\n    solution_concentration = solve(equation, x)\n\n    return solution_concentration[0]\n\nans = solution()"
    ],
    "e514e8bc1f604e7584c55c9dca3b2fed": [
        "def solution():\n    first_three_days_total = 33\n    last_four_days_average = 18\n    last_four_days_total = last_four_days_average * 4\n    total_for_week = first_three_days_total + last_four_days_total\n    average_per_day = total_for_week / 7\n    return average_per_day\n\nans = solution()"
    ],
    "4ecf6dfe09074d81b2c8e57fe42c031f": [
        "def solution():\n    weight_metal1 = 12 \n    nickel_percent_metal1 = 0.40 \n    weight_metal2 = 13 \n    nickel_percent_metal2 = 0.60 \n    \n    total_nickel = (weight_metal1 * nickel_percent_metal1) + (weight_metal2 * nickel_percent_metal2)\n    total_weight = weight_metal1 + weight_metal2\n    nickel_concentration = (total_nickel / total_weight) * 100\n    \n    return nickel_concentration\n\nans = solution()"
    ],
    "31aa53351e2b49aab72bde2d7ea3c1a2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(9 - (x + 3), 1)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "144a37458618498d8c19e53cf5ec0049": [
        "def solution():\n    # Prime factorization of 2016 and 1377\n    prime_factors_2016 = {2: 5, 3: 2, 7: 1}  # 2016 = 2^5 * 3^2 * 7\n    prime_factors_1377 = {3: 1, 229: 1}  # 1377 = 3 * 229\n    \n    # Determine the three ages for both years by dividing the prime factors into groups of three numbers\n    # Since we are looking for three distinct ages, we'll divide the factors into three groups such that\n    # the groups have the same product this year and last year, taking into account the increase in age by 1.\n    \n    ages_this_year = []\n    ages_last_year = []\n    \n    # 2016 = age1 * age2 * age3\n    # 1377 = (age1 - 1) * (age2 - 1) * (age3 - 1)\n    \n    for age3 in range(1, 50):  # Reasonable upper bound for age\n        if 2016 % age3 == 0:\n            age2_times_age1 = 2016 // age3\n            for age2 in range(1, age3):  # age2 should be less than age3 for unique ages\n                if age2_times_age1 % age2 == 0:\n                    age1 = age2_times_age1 // age2\n                    if age1 >= age2 and (age1-1) * (age2-1) * (age3-1) == 1377:\n                        ages_this_year = [age1, age2, age3]\n                        ages_last_year = [age1-1, age2-1, age3-1]\n                        break\n        if ages_this_year:\n            break\n    \n    # Calculate the product of ages two years ago\n    ages_two_years_ago = [age-2 for age in ages_last_year]\n    answer = ages_two_years_ago[0] * ages_two_years_ago[1] * ages_two_years_ago[2]\n    \n    return answer\n\nans = solution()"
    ],
    "3af1e296b55d48b081f32a1a006667ef": [
        "def solution():\n    import math\n\n    # Two people who want to stand next to each other\n    # can be considered as one entity.\n    # So we first calculate the permutations of the remaining 4 entities.\n    permutations_of_four = math.perm(4)\n\n    # The two people who want to stand next to each other\n    # can switch places with each other, which accounts for 2! permutations.\n    permutations_of_two_together = math.perm(2)\n\n    # The total number of ways they can line up is the product\n    # of permutations of the 4 entities and the 2 people who want to be together.\n    total_ways = permutations_of_four * permutations_of_two_together\n\n    return total_ways\n\nans = solution()"
    ],
    "de0d981643f2427f8f190ba70891f0a6": [
        "def solution():\n    return (-3 + 8) / 2\n\nans = solution()"
    ],
    "ffb4fa57b0eb47ffb07fa2c7f49ef9f4": [
        "def solution():\n    num = 15\n    denom = 1/7\n    ans = num / denom\n    return ans\n\nans = solution()"
    ],
    "c17e0a2b113d46b781b7f26e782fd14f": [
        "def solution():\n    # In a round-robin tournament, each player plays against every other player once.\n    # With 8 players, each player has 7 matches.\n    # As there are no ties, each match results in a win for one player and a loss for another.\n    # The player with the highest number of wins is the champion.\n    # Because everyone scores a different number of wins, the wins are distributed from 0 to 7.\n    # The champion must have won all their matches to ensure they have more wins than everyone else.\n    # Therefore, the champion has 7 wins.\n\n    ans = 7\n    return ans\n\nans = solution()"
    ],
    "be0945399c6b4d0dba2ad2baaabb31ad": [
        "def solution():\n    n = 1\n    while True:\n        total = n * (n + 1) // 2\n        if total > 3405:\n            break\n        if (3405 - total) <= n:\n            return 3405 - total\n        n += 1\n\nans = solution()"
    ],
    "13aecb4038e84ceeb7586defdcee7f3d": [
        "def solution():\n    math_club_total = 146 + 94\n    # The ratio of history club members to math club members is 7:8\n    history_club_total = (7 / 8) * math_club_total\n    return int(history_club_total)\n\nans = solution()"
    ],
    "221781af3d4444f881f99b112ffa3aa3": [
        "def solution():\n    remainder = 3\n    total = 40\n    count = 0\n    for divisor in range(1, total - remainder):\n        for quotient in range(1, (total - remainder) // divisor):\n            dividend = divisor * quotient + remainder\n            if divisor + dividend + quotient + remainder == total:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "cbad92babc7144ffa95f44fbcc74faa1": [
        "def solution():\n    import math\n    ans = math.gcd(45, 60)\n    return ans\n\nans = solution()"
    ],
    "f8b94a6a82c7406a83b47ec788b92ca2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote c as the number of chickens and p as the number of pens before the change\n    c, p = symbols('c p')\n\n    # Before building more pens, we have p = 24\n    # After building 6 more pens, we have p + 6 pens\n    # Before the change, we have c / p chickens per pen\n    # After the change, we have c / (p + 6) chickens per pen\n    # The number of chickens in each pen reduced by 6, so we have the equation:\n    # c / p - 6 = c / (p + 6)\n\n    equation = Eq(c / p - c / (p + 6), 6)\n\n    # We replace p with 24 and solve the equation\n    solutions = solve(equation.subs(p, 24), c)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "758d557365b6402ba3525678e7c085b7": [
        "def solution():\n    # Assuming the input numbers are given as Zog numbers\n    # Reversing the digits of the given numbers\n    n1 = int(str(729)[::-1])\n    n2 = int(str(26)[::-1])\n    \n    # Performing subtraction\n    diff = n1 - n2\n    \n    # Writing the result in Zog's reversed order\n    ans = int(str(diff)[::-1])\n    return ans\n\nans = solution()"
    ],
    "0f19ecaf9e6a4a268a28394ccf10d38e": [
        "def solution():\n    ans = 312 + 9\n    return ans\n\nans = solution()"
    ],
    "4c066587422f44769fef6ac62ea2a629": [
        "def solution():\n    ashley_current_age = 10\n    brother_age_three_years_ago = ashley_current_age - 3 - 2\n    brother_current_age = brother_age_three_years_ago + 3\n    return brother_current_age\n\nans = solution()"
    ],
    "ddbda2b526d94447986b592f33c0b725": [
        "def solution():\n    train_speed = 20 # meters per second\n    train_length = 160 # meters\n    time_to_pass = 30 # seconds\n\n    # Total distance covered by the train when it passes the bridge completely\n    total_distance = train_speed * time_to_pass\n\n    # Length of the bridge is total distance minus the length of the train\n    bridge_length = total_distance - train_length\n\n    return bridge_length\n\nans = solution()"
    ],
    "5fd6b39e9b3a49549d8336ce20856f59": [
        "def solution():\n    # Sum of an arithmetic progression S_n = n/2 * (a1 + an)\n    # S_6 = 6/2 * (a1 + a6) = 64\n    # S_12 = 12/2 * (a1 + a12) = 156\n    # From the two equations above we can get a1 (first term) and d (common difference)\n    # S_6 = 3 * (a1 + (a1 + 5d)) = 64\n    # S_12 = 6 * (a1 + (a1 + 11d)) = 156\n\n    # Solving the two equations:\n    # 6a1 + 15d = 64\n    # 12a1 + 66d = 156\n\n    # By solving the above equations we can get a1 and d\n    # Subtract the first equation (multiplied by 2) from the second equation\n    # (12a1 + 66d) - 2*(6a1 + 15d) = 156 - 2*64\n    # 12a1 + 66d - 12a1 - 30d = 156 - 128\n    # 36d = 28\n    # d = 28 / 36\n    # d = 7 / 9\n\n    # Substitute d in the first equation:\n    # 6a1 + 15*(7/9) = 64\n    # 6a1 + 35/3 = 64\n    # 6a1 = 64 - 35/3\n    # 6a1 = 192/3 - 35/3\n    # 6a1 = 157/3\n    # a1 = 157/18\n\n    # Now we have a1 and d, we can calculate sum of the first 18 terms (S_18)\n    d = 7 / 9\n    a1 = 157 / 18\n    S_18 = (18 / 2) * (a1 + (a1 + (18 - 1)*d))\n    return S_18\n\nans = solution()"
    ],
    "4f44a87fc2ed45138614656e0d4cdc2e": [
        "def solution():\n    emily_score = 30\n    hebe_percentage = 60\n    total_marks = 60\n    \n    hebe_score = (hebe_percentage / 100) * total_marks\n    difference = hebe_score - emily_score\n\n    return difference\n\nans = solution()"
    ],
    "92633a5c2d4045258377b67eb7914f16": [
        "def solution():\n    # Time spent jogging from 6:30 AM to 7:00 AM is 0.5 hours\n    jogging_time = 0.5\n    jogging_speed = 9  # km per hour\n    \n    # Distance covered while jogging\n    jogging_distance = jogging_speed * jogging_time\n    \n    # Time spent walking from 7:00 AM to 8:00 AM is 1 hour\n    walking_time = 1\n    walking_speed = 7.5  # km per hour\n    \n    # Distance covered while walking\n    walking_distance = walking_speed * walking_time\n    \n    # Total distance traveled\n    total_distance = jogging_distance + walking_distance\n    \n    return total_distance\n\nans = solution()"
    ],
    "e7b83b9b5e1e45ebbe58b8753935aa52": [
        "def solution():\n    ans = 0.23 + 1.9 + 0.083\n    return ans\n\nans = solution()"
    ],
    "9bba3d6fb8a24e63b64427cf2f150104": [
        "def solution():\n    # There are 2 choices for the hundreds place (cannot be 0), \n    # and 3 choices each for the tens and ones places (can be 0)\n    return 2 * 3 * 3\n\nans = solution()"
    ],
    "54dfc5bdf157460ba47b99d87cd73558": [
        "def solution():\n    common_factor = 13\n    difference_in_multiplicands = 55 - 44\n    ans = common_factor * difference_in_multiplicands\n    return ans\n\nans = solution()"
    ],
    "bdce3fe10c474df4a19293921b1f972c": [
        "def solution():\n    return 3647 // 7\n\nans = solution()"
    ],
    "c3bbf6f074774feb9ff7aa22e47b31ca": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    games_won, games_lost = symbols('games_won games_lost')\n\n    equation1 = Eq(games_won, 2 * games_lost)\n    equation2 = Eq(games_won + games_lost, 63)\n\n    solutions = solve((equation1, equation2), (games_won, games_lost))\n\n    return solutions[games_lost]\n\nans = solution()"
    ],
    "56e620f09fd54f8c8dc2fe4e97e4c388": [
        "def solution():\n    ans = 9 - 8 + 7 - 6 + 5 - 4 + 3 - 2 + 1\n    return ans\n\nans = solution()"
    ],
    "6791440725654626ab51c36b9e94af1d": [
        "def solution():\n    for num in range(100, 1000):\n        if num % 7 == 4 and num % 8 == 4 and num % 9 == 4:\n            return num\n\nans = solution()"
    ],
    "0877713fe19e4645ba3e7db233f47117": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of animals initially\n    x = symbols('x')\n\n    # Number of cows initially is 65% of x\n    initial_cows = 0.65 * x\n\n    # Number of goats initially is the rest, which is 35% of x\n    initial_goats = 0.35 * x\n\n    # 240 more cows and goats are added\n    new_total = x + 240\n\n    # After adding, the percentage of cows increased by 20%\n    # So now cows are 65% + 20% = 85% of the total\n    new_cows = 0.85 * new_total\n\n    # Number of goats doubled\n    new_goats = 2 * initial_goats\n\n    # The number of cows initially plus the 240 added animals equals the new number of cows,\n    # and similarly for goats\n    equation1 = Eq(initial_cows + 240, new_cows)\n    equation2 = Eq(initial_goats + 240, new_goats)\n\n    # Solving both equations\n    solved_values = solve((equation1, equation2), (x))\n\n    # Find the initial number of goats\n    initial_goats_number = int(solved_values[x] * 0.35)\n\n    return initial_goats_number\n\nans = solution()"
    ],
    "d32cc1f9d4b249a0a64ad0610aee08f4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(5 * x * 12 + 3 * x * 5, 120)\n\n    sol = solve(equation, x)\n\n    return sol[0]\n\nans = solution()"
    ],
    "78fdc8747f5a4d3aabce52d5e041f78f": [
        "from math import comb\n\ndef solution():\n    num_students = 5\n    num_chosen = 2\n    ans = comb(num_students, num_chosen)\n    return ans\n\nans = solution()"
    ],
    "1e0501ed2b454e8abdc227085d3243e5": [
        "def solution():\n    larger_number = 8 * 9 * 10\n    smaller_number = 1 * 2 * 3\n    difference = larger_number - smaller_number\n    return difference\n\nans = solution()"
    ],
    "22bdbf51eef54f7ab3652064b38ab235": [
        "def solution():\n    bouquets = 30\n    roses_per_bouquet = 9\n    total_roses = bouquets * roses_per_bouquet\n    return total_roses\n\nans = solution()"
    ],
    "3a1e525fd69d41e8bdcd18e39e142f01": [
        "from math import factorial as f\n\ndef solution():\n    # Total people count = 3 boys + 3 girls + 3 teachers = 9\n    # Permutations of 3 girls as a single unit: P_group_g = 1\n    # Permutations of 3 girls within the group: P_girls = 3!\n\n    # Since boys cannot be adjacent, find places for boys and teachers first.\n    # There are 3 teachers and 3 boys, treat each boy as a unit B and teachers as T\n    # Possible permutations: T T T B B B\n    # The 'girls unit' can be placed in any of the gaps between Ts (including ends)\n    # Number of gaps = T_count + 1 = 3 + 1 = 4\n    # So the girls group can be placed in any of the 4 positions\n    # After placing the girls group, we are left with permutations of 3 teachers and 3 boys:\n    # T T T B B B or T T G T B B B (... and so on)\n    \n    # Now permutations of B and T as different entities: P_BT = 6! / (3! * 3!)\n    # But since no Bs are adjacent, we have to treat them as distinct from Ts (B1 T T T B2 B3 ...)\n    # For distinct Bs: P_BT_distinct = 4! (since we distribute Bs over 4 positions given by T T T T)\n    \n    # Final permutations: P_group_g * P_girls * Number of gaps * P_BT_distinct\n    P_group_g = 1  # Girls as a single unit\n    P_girls = f(3)  # Girls' internal permutations\n    n_gaps = 4  # Number of available positions for girls group\n    P_BT_distinct = f(4)  # Permutations of boys + teachers\n    \n    ans = P_group_g * P_girls * n_gaps * P_BT_distinct\n    return ans\n\nans = solution()"
    ],
    "960bdf3b8c724781b3eb3607d3f03609": [
        "def solution():\n    appetizers = 2\n    main_courses = 3\n    soups = 1 + 1  # +1 for the option of not choosing a soup\n    desserts = 2 + 1  # +1 for the option of not choosing a dessert\n\n    total_combinations = appetizers * main_courses * soups * desserts\n\n    return total_combinations\n\nans = solution()"
    ],
    "65fe506e0c914a8c89a3851368d52567": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Congruence 1: x ≡ -3 (mod 8) which is equivalent to x ≡ 5 (mod 8)\n    # Congruence 2: x ≡ -1 (mod 9) which is equivalent to x ≡ 8 (mod 9)\n    congruences = [(5, 8), (8, 9)]\n\n    x, _ = solve_congruence(*congruences)\n    # check for each value that fits the congruence because there can be more than one value in the range 100 to 200\n    while x <= 200:\n        if 100 <= x <= 200:\n            return x\n        x += 8*9   # increase by the least common multiple of 8 and 9 to find the next solution\n    \nans = solution()"
    ],
    "2c300804986d4690a8ea13da0f77fd40": [
        "def solution():\n    dog_to_rabbit = 8\n    rabbit_to_chicken = 2\n\n    dog_to_chicken = dog_to_rabbit * rabbit_to_chicken\n\n    return dog_to_chicken\n\nans = solution()"
    ],
    "9bb456e92cbe4dd58a5b0ef6f7f77fc4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of blue balls\n    x = symbols('x', integer=True, positive=True)\n\n    # Total number of balls is 4 red + x blue\n    total_balls = 4 + x\n\n    # Probability of first red ball: 4/(4+x)\n    # Probability of second red ball after first is taken: 3/(3+x)\n    # Probability of both events happening is product of their probabilities\n    probability = (4/(4+x)) * (3/(3+x))\n\n    # Now we solve for x where the probability equals 2/7\n    equation = Eq(probability, 2/7)\n\n    # Find the value of x that solves the equation\n    solution = solve(equation, x)\n\n    # Since we are looking for the number of blue balls, and x could have multiple solutions,\n    # we take only the positive integer solution that makes sense in this context\n    num_blue_balls = next(s for s in solution if s.is_integer and s > 0)\n\n    return num_blue_balls\n\nans = solution()"
    ],
    "cfe05c3227c9427eadd085e9de47f044": [
        "def solution():\n    # This is an arithmetic sequence with first term a1 = 6 and common difference d = 5.\n    a1 = 6\n    d = 5\n    # To find the number of terms n, we use the last term which is 41.\n    an = 41\n    n = ((an - a1) / d) + 1\n    \n    # The sum of an arithmetic sequence is given by the formula: S = n/2 * (a1 + an)\n    S = n/2 * (a1 + an)\n    \n    return int(S)\n\nans = solution()"
    ],
    "08a17429c2dc42c9b5df787d8fb4954e": [
        "def solution():\n    # Let x represent the total number of slices.\n    # Her family ate 3/5 of the cake, so there are 2/5 of the cake left.\n    # She gave away 2 slices and had 4 left, which means 2/5 of the cake is equivalent to 6 slices.\n    # So we can set up the equation: (2/5)*x = 6\n    # Solving for x gives us the total number of slices originally.\n    x = (6 * 5) // 2  # Multiply both sides by 5 and divide by 2 to isolate x.\n    \n    return x\n\nans = solution()"
    ],
    "7e303a81959f4dd3a8821c03daae5549": [
        "def solution():\n    # Add and subtract the numbers in the given series\n    ans = 51 + 50 - 45 + 40 - 35 + 30 - 25 + 20 - 15\n    return ans\n\nans = solution()"
    ],
    "a9d8b165410c4c1bb74c1c179cf2b128": [
        "def solution():\n    # Calculate the area of Triangle X using the formula for an equilateral triangle: (sqrt(3)/4) * side^2\n    side_x = 3\n    area_x = (3**(0.5)/4) * side_x**2\n\n    # Calculate the area of Triangle Y using the same formula\n    side_y = 9\n    area_y = (3**(0.5)/4) * side_y**2\n\n    # Divide the area of Triangle Y by the area of Triangle X to find out how many times Triangle X fits into Triangle Y\n    ans = area_y / area_x\n    return int(ans)\n\nans = solution()"
    ],
    "6a7086b44acb47afbeb35af00a141b68": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    mike_rate, danny_rate = symbols('mike_rate danny_rate')\n    \n    # If they work together, they will finish the job in 10 hours\n    equation1 = Eq(mike_rate + danny_rate, 1/10)\n    \n    # Mike types for 8 hours and then Danny types for 13 hours to finish the job\n    equation2 = Eq(8 * mike_rate + 13 * danny_rate, 1)\n    \n    # solve the equations for mike_rate and danny_rate\n    solutions = solve((equation1, equation2), (mike_rate, danny_rate))\n    \n    # Danny's rate is the reciprocal of the time it takes him to finish the job by himself\n    danny_time = 1 / solutions[danny_rate]\n    \n    # Return the time it will take Danny to finish the job by himself\n    return danny_time\n\nans = solution()"
    ],
    "807f47199e524c889e2cda11d4b6aedd": [
        "def solution():\n    total_pencils = 7\n    pencil_cases = 2\n    \n    min_pencils_in_case = (total_pencils + pencil_cases - 1) // pencil_cases\n\n    return min_pencils_in_case\n\nans = solution()"
    ],
    "5a9cac73f017480d9c49cfcbd2b7a15a": [
        "def solution():\n    def custom_operation(a, b):\n        total = sum(a + i for i in range(b + 1))\n        return total\n    \n    for m in range(100):\n        if custom_operation(m, 10) == 66:\n            return m\n\nans = solution()"
    ],
    "346ccc5e74434ee687f8c2396be87095": [
        "def solution():\n    # Find the place value of the first 3 (hundred-thousand place)\n    place_value_1 = 3 * 10**5\n\n    # Find the place value of the second 3 (tens place)\n    place_value_2 = 3 * 10**1\n\n    # Calculate the difference between the place values\n    difference = place_value_1 - place_value_2\n\n    return difference\n\nans = solution()"
    ],
    "3aa12de14bc74a3ba901fd2b6e1a45e0": [
        "def solution():\n    from math import comb\n\n    # The prime factorization of 2^27 is 2 appearing 27 times.\n    # We need to distribute these 27 twos among 10 digits such that the product is 2^27.\n    # This is like putting 27 indistinguishable items into 10 distinguishable boxes\n    # where each box can hold from 0 to 27 items (since a digit can be from 0 to 9, but\n    # for a 10-digit number the first digit cannot be 0).\n\n    # We use stars and bars combinatorial method to calculate the number of ways\n    # to distribute 27 indistinguishable items into 9 distinguishable boxes.\n    # (The first digit cannot be zero so we treat it separately.)\n\n    # First, handle 9 digits (non-leading digits can be zero)\n    non_leading_ways = comb(27 + 9 - 1, 9 - 1)  # (27+8) choose (9-1)\n\n    # Then handle the leading digit, it must be either 1,2,4 or 8 (2^0,2^1,2^2,2^3 respectively)\n    # So we subtract the used powers of two from 27 and distribute the rest\n    leading_ways = 0\n    for power in range(4):  # loop through 2^0, 2^1, 2^2, 2^3\n        remaining_twos = 27 - power  # subtract used twos from total\n        if remaining_twos < 0:  # cannot have negative number of twos\n            break\n        leading_ways += comb(remaining_twos + 8, 8)  # distribute remaining twos among the other 9 digits\n\n    # Multiply the ways to choose leading and non-leading digits\n    ans = leading_ways * non_leading_ways\n\n    return ans\n\nans = solution()"
    ],
    "a6143a5df73447d390e4a2025ba6b232": [
        "def solution():\n    # In the case of minimizing red squares, we consider each digit appearing at most 4 times.\n    # Since there are 10 possible digits (0-9) and each can appear 4 times without painting a square red,\n    # the largest number of non-red squares is 4 times 10.\n    non_red_squares = 4 * 10\n\n    # Any square beyond this number would result in a digit appearing 5 times and thus being painted red.\n    # Therefore, the number of red squares will be the total squares minus the maximum possible non-red squares.\n    total_squares = 100\n    red_squares = total_squares - non_red_squares\n\n    return red_squares\n\nans = solution()"
    ],
    "507fbe69eeb341c4a1e466db8bc07b00": [
        "def solution():\n    first_term = 50\n    difference = 46 - 50  # The common difference between the terms\n\n    # The formula for the nth term of an arithmetic sequence is:\n    # nth_term = first_term + (n-1) * difference\n    # To find the first negative term, we set nth_term < 0 and solve for n.\n\n    # 0 > 50 + (n-1) * (-4)\n    # 0 > 50 - 4n + 4\n    # 4n > 54\n    # n > 13.5\n    # Since n must be an integer, the first negative term is when n = 14\n\n    return 14\n\nans = solution()"
    ],
    "5f8547cf000a40589c011a253c103568": [
        "def solution():\n    side_length = 54\n    # Since chess pieces are put every 3 cm, we divide each side by 3 to get the number\n    # of pieces in one side. We have to subtract 1 because the corner pieces are counted\n    # twice if we take all four sides.\n    pieces_per_side = (side_length // 3) - 1\n    # The total number of pieces is all pieces on the sides times 4 (for each side)\n    # plus the four corner pieces.\n    total_pieces = (pieces_per_side * 4) + 4\n    return total_pieces\n\nans = solution()"
    ],
    "84c34602d0aa4900966c5a8ceeee71d3": [
        "def solution():\n    initial_money = 10\n    spent_money = 2.89\n    father_gave = 4 / 5\n\n    remaining_money = initial_money - spent_money + father_gave\n\n    return round(remaining_money, 2)\n\nans = solution()"
    ],
    "03819e32406b409c97adc853ab0849b7": [
        "def solution():\n    m = 7\n    ans = (3 * m - 1) + m\n    return ans\n\nans = solution()"
    ],
    "a19b145685704a7fb1edf952d6f61f0d": [
        "def solution():\n    for i in range(32, 100):  # 32^2 is the first square over 1000, 99^2 is the last square below 10000\n        square = i * i\n        str_sq = str(square)\n        if str_sq[0] == str_sq[1] and str_sq[2] == str_sq[3]:\n            return square\n\nans = solution()"
    ],
    "b00453f28a704896a9c2914acfc85c84": [
        "def solution():\n    zeros = 28\n    factorial = 10**zeros\n    power_of_five = 0\n    n = 1\n    \n    while power_of_five < zeros:\n        n += 1\n        number = n\n        while number % 5 == 0:\n            power_of_five += 1\n            number //= 5\n    \n    return n - 1\n\nans = solution()"
    ],
    "87f0754be1e1426ea4912fd9aa134e2f": [
        "def solution():\n    ans = 6 - 4.226\n    return ans\n\nans = solution()"
    ],
    "622d8f504b0b4e3c833da2860ca06ea3": [
        "def solution():\n    # Tim's speed (in km per hour)\n    speed_tim = 56\n    # Bob's speed (in km per hour)\n    speed_bob = 74\n    # Initial distance between Tim and Bob (in km)\n    distance_initial = 780\n    # Remaining distance between Tim and Bob when they meet for the first time (in km)\n    distance_remaining = 130\n    # Combined speed of Tim and Bob moving towards each other (in km per hour)\n    speed_combined = speed_tim + speed_bob\n    # Distance travelled before meeting for the first time (in km)\n    distance_travelled = distance_initial - distance_remaining\n    # Time taken to close the distance_travelled at the combined speed (in hours)\n    time = distance_travelled / speed_combined\n    \n    return time\n\nans = solution()"
    ],
    "2c9ba88b14dd492eae6b7ec023369d1e": [
        "def solution():\n    known_numbers = [3, 4, 6, 10]\n    known_sum = sum(known_numbers)\n    total_numbers = 5\n    mean_value = 5\n\n    total_sum = mean_value * total_numbers\n    fifth_number = total_sum - known_sum\n    \n    return fifth_number\n\nans = solution()"
    ],
    "97280eb5e85b48fa922958bc7829aeeb": [
        "def solution():\n    total_distance = 11\n    day_climb = 3\n    night_slide = 1\n    net_progress = day_climb - night_slide\n\n    days = 0\n    distance_climbed = 0\n    \n    while distance_climbed < total_distance:\n        days += 1\n        distance_climbed += day_climb\n        \n        if distance_climbed >= total_distance:\n            break\n        \n        distance_climbed -= night_slide\n       \n    return days\n\nans = solution()"
    ],
    "42a62ad1ebd04b199cb34ac6b189a7bb": [
        "def solution():\n    from math import lcm\n    akon = 4\n    ben = 7\n    cris = 8\n\n    least_days = lcm(akon, ben, cris)\n\n    return least_days\n\nans = solution()"
    ],
    "3602d25562874d41ab24c4341b12f630": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n    \n    ans = tens + tenths + hundredths\n    return ans\n\nans = solution()"
    ],
    "711c6d212b6b410f988c3dbe25973b9f": [
        "def solution():\n    decimal_part = '8354'  # recurring decimal part\n    length_decimal_part = len(decimal_part)\n\n    sum_of_digits = 0\n    for i in range(84):\n        sum_of_digits += int(decimal_part[i % length_decimal_part])\n\n    return sum_of_digits\n\nans = solution()"
    ],
    "9aaa074a8d0943d59386b629100a1142": [
        "def solution():\n    total_distance = 15 + 10 + 8\n    number_of_friends = 3\n    average_distance = total_distance / number_of_friends\n    return average_distance\n\nans = solution()"
    ],
    "cf4b67b2b09544679e877f2476cc1898": [
        "from itertools import permutations\n\ndef solution():\n    lucky_years = 0\n    for year in range(1000, 2023):\n        digits = set(str(year))\n        if len(digits) == 4:\n            consecutives = [int(d) for d in digits]\n            consecutives.sort()\n            if all(consecutives[i] + 1 == consecutives[i + 1] for i in range(len(consecutives) - 1)):\n                permutations_of_year = set(permutations(str(year)))\n                lucky_years += len(permutations_of_year)\n    return lucky_years\n\nans = solution()"
    ],
    "5c06e51a661b48fe8fa86f66e6eee9fa": [
        "def solution():\n    return 56 * 23\n\nans = solution()"
    ],
    "e3e88b3c7611487d98b4ad69c6e41428": [
        "def solution():\n    total_cost = 104.10\n    num_people = 6\n    cost_per_person = total_cost / num_people\n    return cost_per_person\n\nans = solution()"
    ],
    "a6ad322655a94a94b6a34e6b8951731a": [
        "def solution():\n    ans = 53 * 58\n    return ans\n\nans = solution()"
    ],
    "91978558dacc4505ac4e35d145f8108b": [
        "def solution():\n    m_squared = 0\n    while True:\n        m_squared += 1\n        if ((m_squared + 5) + 18) ** 0.5 == int(((m_squared + 5) + 18) ** 0.5):\n            break \n    original_students = m_squared + 5\n    return original_students\n\nans = solution()"
    ],
    "3ba3be708b874b10bc32437342966dfb": [
        "from math import factorial\n\ndef solution():\n    def combinations(n, k):\n        return factorial(n) // (factorial(k) * factorial(n - k))\n\n    num_pens = 20 - 6  # Give one pen to each kid first\n    num_kids = 6 - 1   # Only need to distribute the remaining pens to 5 kids\n    ans = combinations(num_pens + num_kids, num_kids)\n    return ans\n\nans = solution()"
    ],
    "0786a0cfe2bd43a9ac1c176d78e73a19": [
        "def solution():\n    people_initial = 6\n    time_initial = 15\n    time_required = 2\n\n    people_required = people_initial * (time_initial / time_required)\n\n    return int(people_required)\n\nans = solution()"
    ],
    "02858fb0c1d7495998f805b27ff5ac13": [
        "def solution():\n    time_per_quiz_minutes = 30\n    total_quizzes = 4\n    minutes_per_hour = 60\n\n    total_time_minutes = time_per_quiz_minutes * total_quizzes\n    total_time_hours = total_time_minutes / minutes_per_hour\n\n    return total_time_hours\n\nans = solution()"
    ],
    "ec04407fbdb64de19ace6733c3919a43": [
        "def solution():\n    total_three_digit_numbers = 9 * 10 * 10\n    no_zero_numbers = 9 * 9 * 9  # Numbers without any zero\n    at_least_one_zero = total_three_digit_numbers - no_zero_numbers\n\n    return at_least_one_zero\n\nans = solution()"
    ],
    "86f2b7935f1d47b099995c9ad98cd1d0": [
        "def solution():\n    mass = 0.10  # in kilograms\n    speed = 30  # in meters/second\n    kinetic_energy = 0.5 * mass * speed**2  # formula for kinetic energy\n\n    return kinetic_energy\n\nans = solution()"
    ],
    "b7bc6562b2cd42848b4c261eea8d443b": [
        "def solution():\n    # Time for one strike's sound to last\n    strike_sound_duration = 3\n    \n    # Total time for 6 strikes excluding the first strike sound duration\n    total_time_6_strikes = 43 - strike_sound_duration\n    \n    # Time intervals between 6 strikes is 5 (since the first strike doesn't have a leading interval)\n    intervals_6_strikes = 5\n    \n    # Duration of each interval between strikes\n    interval_duration = total_time_6_strikes / intervals_6_strikes\n    \n    # Time intervals between 12 strikes is 11\n    intervals_12_strikes = 11\n    \n    # Calculate the total time for 12 strikes\n    total_time_12_strikes = intervals_12_strikes * interval_duration + strike_sound_duration\n    \n    return int(total_time_12_strikes)\n\nans = solution()"
    ],
    "612916c7c6464d37b5bdb4a7f7365e62": [
        "def solution():\n    red_marbles = 45\n    blue_marbles = 4 * red_marbles\n    total_marbles = red_marbles + blue_marbles\n    return total_marbles\n\nans = solution()"
    ],
    "bb26e8a364284f6d9f8d709ca1f345a8": [
        "def solution():\n    for number in range(100, 201):\n        if (number % 3 == 1) and (number % 4 == 1) and (number % 5 == 1) and (number % 7 == 2):\n            return number\n\nans = solution()"
    ],
    "4398b5072c214118a4d7e606b9c7f7dd": [
        "def solution():\n    first_term = 58\n    common_difference = 51 - first_term  # find the common difference between terms\n    n = 7  # we want to find the 7th term\n    nth_term = first_term + (n - 1) * common_difference  # formula for the nth term of arithmetic sequence\n\n    return nth_term\n\nans = solution()"
    ],
    "1efc8331490f402c8a2dc98af0eb69e8": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 5), (2, 6), (2, 7)]\n    number, _ = solve_congruence(*congruences)\n    \n    while number < 300:\n        if number >= 100:\n            return number\n        number += 5*6*7\n    \n    return None\n\nans = solution()"
    ],
    "e8ce7a71a9c94b3d8ba599db217353fb": [
        "def solution():\n    # We want to form the smallest 4-digit number\n    # The ones digit must be the greatest odd number which is 9\n    ones = 9\n    \n    # Start from the smallest 4-digit number and iterate until we find a number that matches the conditions\n    for num in range(1000, 10000):\n        str_num = str(num)\n        \n        # Check for different digits\n        if len(set(str_num)) == 4: \n            # The digit in the hundreds place and tens place must add up to 13\n            if int(str_num[1]) + int(str_num[2]) == 13: \n                # The ones digit must be 9\n                if int(str_num[3]) == ones: \n                    return num # This is the smallest number that satisfies all conditions\n\nans = solution()"
    ],
    "57bf99419fd84ddf891e49e75324f73f": [
        "def solution():\n    total_length = 99\n    cuts = 8\n    pieces = cuts + 1\n\n    length_each_piece = total_length / pieces\n\n    return length_each_piece\n\nans = solution()"
    ],
    "8164105a2885459cbe6f0149d5f46883": [
        "def solution():\n    height = 100  # original height as 100%\n    bounce_height = 75  # bounce height as a percentage of the previous height\n    bounces = 0\n\n    while height >= 25:\n        height *= (bounce_height / 100)\n        bounces += 1\n\n    return bounces\n\nans = solution()"
    ],
    "46cd8353df274c078e2fd68b250e0da1": [
        "def solution():\n    terms = [5, 8, 11, 14, 17, 20]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "163aa773f4d845c8a2f2ed208a8950fb": [
        "def solution():\n    # Let's denote Jerry's speed as 'j' and Kevin's speed as '1.5j'.\n    # They meet after t hours, so the distance Jerry has driven is 'j * t'\n    # and the distance Kevin has driven is '1.5j * t'.\n    # The sum of these distances should equal the total distance apart, which is 225 miles.\n    # j * t + 1.5j * t = 225\n    # We can combine terms to get 2.5j * t = 225\n    # And solving for 't' gives us t = 225 / (2.5j)\n    # We want to find the distance Jerry has driven, which is 'j * t'.\n    # Given that we know the ratio of their speeds and the total distance,\n    # We don't actually need to know the value of 'j' to find the ratio of distances.\n\n    # The distance Jerry has driven is 'j * t' = 'j * (225 / (2.5j))'.\n    # Simplifying this we get 'j * t' = 225 / 2.5 = 90 miles\n    # Thus, Jerry has driven 90 miles when they meet.\n\n    return 90\n\nans = solution()"
    ],
    "00f1d5cbd249489fa41dae6e52599fbe": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(2*x + 3*x + 2, 30 + 6*x - 8*x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "2b3f02a0fa7248d58cf401ab102a597d": [
        "def solution():\n    total_wall_width = 4800     # wall width in mm\n    picture_width = 210         # width of each picture in mm\n    number_of_pictures = 10     # total number of pictures\n\n    # Space occupied by pictures themselves (9 picture widths, since there's 10 pictures)\n    total_picture_width = picture_width * (number_of_pictures - 1)\n\n    # Find the total spacing between pictures\n    total_spacing = total_wall_width - total_picture_width\n\n    # The spacing between each picture\n    spacing_between_pictures = total_spacing // (number_of_pictures - 1)\n\n    # Centre of the third picture from the left, considering two spacings\n    # from the centre of the first picture.\n    # Since the first picture is at the extreme left, we consider half of its width as well\n    centre_of_third_picture = (picture_width // 2) + (2 * spacing_between_pictures)\n\n    # Centre of the wall\n    centre_of_wall = total_wall_width // 2\n\n    # Distance from the centre of the wall to the centre of the third picture\n    distance_from_wall_centre_to_third_picture = centre_of_third_picture - centre_of_wall\n\n    return abs(distance_from_wall_centre_to_third_picture)  # must be positive distance\n\nans = solution()"
    ],
    "ca1376e41d4341c39abc294ee9b4d9bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    banana, apple = symbols('banana apple')\n\n    equation1 = Eq(2 * banana + 3 * apple, 1.50)\n    equation2 = Eq(3 * banana + 2 * apple, 1.45)\n\n    solutions = solve((equation1, equation2), (banana, apple))\n\n    annabella_cost = solutions[banana] + solutions[apple]\n\n    return annabella_cost\n\nans = solution()"
    ],
    "14006e4edc6c498b925dff66addea986": [
        "def solution():\n    ans = 597 * 63\n    return ans\n\nans = solution()"
    ],
    "b909d93696cf47d0b8ed0c83e74aa63a": [
        "def solution():\n    doris_age = 10\n    # Let the uncle's age be 'x'.\n    # When Doris is x years old, the uncle will be 40.\n    # So the difference in age between Doris and uncle is 40 - x.\n    # The uncle's age now is x = doris_age + (40 - x)\n    # This simplifies to: x = 10 + (40 - x)\n    # Solving the equation gives: 2x = 50, so x = 25\n    # Therefore, Doris's uncle is 25 years old now.\n    uncle_age = doris_age + (40 - doris_age)\n\n    return uncle_age\n\nans = solution()"
    ],
    "0483752c6a204f15aacda3ff94327d0f": [
        "def solution():\n    interest = 225\n    rate = 2.25 / 100\n\n    principal = interest / rate\n\n    return principal\n\nans = solution()"
    ],
    "798223ee8f80484e91a8451484c51727": [
        "def solution():\n    return 20 - 5 - 1\n\nans = solution()"
    ],
    "88e0c7d77835428bbe187450a89fd57e": [
        "def solution():\n    ans = 1348 - 234 - 76 + 2234 - 48 - 24\n    return ans\n\nans = solution()"
    ],
    "622e2b8da7ee4f1fb4f317c991b75767": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    amanda, belinda, lisa = symbols('amanda belinda lisa')\n\n    equation1 = Eq(amanda, 4 * belinda)\n    equation2 = Eq(lisa, amanda - 11)\n    equation3 = Eq(amanda + belinda + lisa, 43)\n\n    solutions = solve((equation1, equation2, equation3), (amanda, belinda, lisa))\n\n    return solutions[lisa]\n\nans = solution()"
    ],
    "501cf0e0bdee491db50baa99ff69b1b7": [
        "def solution():\n    # According to Timothy's reasoning:\n    # If Timothy's friend had regrouped the numbers, it would mean carrying over a 1 from the tens place to the ones place.\n    # If 5 is smaller than 8, it implies that 1 was carried over from the tens place to the ones place.\n    # In that situation, the equation would be:\n    #   (5+10) + missing_number = 15\n    # Simplifying this would be:\n    #   15 + missing_number = 15\n    # Which would imply the missing number is 0, not 7, to make the equation true.\n    missing_number = 15 - (5 + 10)\n\n    # If Timothy’s answer is incorrect, let's find the correct answer:\n    if missing_number != 7:\n        # Considering without regrouping:\n        # The equation should be 8 + missing_number = 15\n        # Therefore, the correct missing_number would be:\n        missing_number = 15 - 8\n\n    return missing_number\n\nans = solution()"
    ],
    "ce620993d78944209d67e832a4f6c350": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let 'x' be the original amount of money Jerry had\n    x = symbols('x')\n    \n    # Equation based on the problem statement\n    equation = Eq(x - 200 - 2/7 * (x - 200), 1/3 * x)\n    \n    # Solve the equation for 'x'\n    original_amount = solve(equation, x)\n\n    return original_amount[0]\n\nans = solution()"
    ],
    "91c7b4be08964d77b4b67e46cd1f734b": [
        "def solution():\n    from math import factorial\n\n    # Tom and Harry are considered as one person. So we have 5 students plus the pair.\n    n_students = 5 + 1\n    \n    # Calculate all possible arrangements for these n_students.\n    all_arrangements = factorial(n_students)\n    \n    # The pair (Tom and Harry) can be arranged in 2! ways since they can swap places.\n    pair_arrangements = factorial(2)\n    \n    # Ronda has a fixed place at the right, so we don't need to consider different arrangements for her.\n    \n    # The total number of arrangements is all the possible arrangements for n_students\n    # times the arrangements of the pair (Tom and Harry).\n    total_arrangements = all_arrangements * pair_arrangements\n\n    return total_arrangements\n\nans = solution()"
    ],
    "cac726123b6048d88b1d9136486d8aec": [
        "def solution():\n    initial_investment = 5000\n    interest_first_three_years = 1.05 ** 3\n    interest_last_two_years = 1.08 ** 2\n\n    final_amount = initial_investment * interest_first_three_years * interest_last_two_years\n    return round(final_amount, 1)\n\nans = solution()"
    ],
    "2d575e9d3dcb4bb3a35bda8638540b40": [
        "def solution():\n    rounded_price = 125000\n    lowest_possible = rounded_price - 50  # Subtract half of rounding interval\n    if lowest_possible + 1 == 125001:  # Check Ryna's guess\n        return True, 125001\n    else:\n        return False, lowest_possible + 1  # Return the corrected lowest price\n\nans = solution()"
    ],
    "cc5debb2fb484837bd9e20117b66253d": [
        "def solution():\n    current_tests = 4\n    current_average = 89\n    desired_average = 95\n    full_score = 100\n\n    total_current_score = current_tests * current_average\n    tests_needed = 0\n\n    while True:\n        tests_needed += 1\n        total_possible_score = total_current_score + tests_needed * full_score\n        new_average = total_possible_score / (current_tests + tests_needed)\n\n        if new_average >= desired_average:\n            break\n\n    return tests_needed\n\nans = solution()"
    ],
    "01ebc2d721814d4db11a4f6271fd146a": [
        "def solution():\n    distance1 = 540\n    speed1 = 9\n    time1 = distance1 / speed1\n\n    distance2 = 300\n    speed2 = 6\n    time2 = distance2 / speed2\n\n    distance3 = 1000 - (distance1 + distance2)\n    speed3 = 10\n    time3 = distance3 / speed3\n\n    total_time = time1 + time2 + time3\n\n    return total_time\n\nans = solution()"
    ],
    "b33352ddaff94fdf9bca43b11dd51548": [
        "def solution():\n    doris_age = 10\n    uncle_future_age = 40\n    age_difference = uncle_future_age - doris_age\n    uncle_current_age = doris_age + age_difference\n\n    return uncle_current_age\n\nans = solution()"
    ],
    "ccc1e15016544ef18eb8d6fbfa342f6b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be the distance between city P and Q\n    # Let s be the usual speed of the car\n    # Let t be the usual time taken to travel from P to Q\n    d, s, t = symbols('d s t')\n\n    # Equation for the usual journey\n    equation1 = Eq(d, s * t)\n\n    # After increasing the speed by 20%, the time is reduced by 1 hour (t - 1)\n    equation2 = Eq(d, s * 1.20 * (t - 1))\n\n    # If the car travels 200 km at usual speed, then remaining distance at increased speed (25% more)\n    # and reaches 12 minutes (1/5 hour) earlier.\n    equation3 = Eq(200 / s + (d - 200) / (s * 1.25), t - 12/60)\n\n    # Solving the system of equations\n    solutions = solve((equation1, equation2, equation3), (d, s, t))\n\n    # We return the distance between city P and Q\n    return solutions[d]\n\nans = solution()"
    ],
    "46688ef5acdc4df49717f3ab80f36c17": [
        "def solution():\n    total_classes = 18\n    extra_performances = 2  # One for Lia and one for Liz\n\n    total_performances = total_classes + extra_performances\n\n    return total_performances\n\nans = solution()"
    ],
    "1f3d5b49f91c4771addbb17609528cde": [
        "def solution():\n    train_length = 250  # length of the train in meters\n    bridge_length = 260  # length of the bridge in meters\n    speed = 30  # speed of the train in meters per second\n\n    total_distance = train_length + bridge_length  # total distance to cover\n    time_taken = total_distance / speed  # time taken to cross the bridge\n\n    return time_taken\n\nans = solution()"
    ],
    "c476669828e74aee81ba796c38aab4b8": [
        "def solution():\n    chloe_stamps = 176\n    polly_stamps = 4 * chloe_stamps\n    difference = polly_stamps - chloe_stamps\n    return difference\n\nans = solution()"
    ],
    "42047954e98a4b1098845e2ff791180b": [
        "def solution():\n    time_diff = (9 * 60 + 25) - (8 * 60 + 30)\n    return time_diff\n\nans = solution()"
    ],
    "a549cf3800294c169634bf21d56759b6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Declare symbols for books and pencil boxes\n    books, pencil_box = symbols('books pencil_box')\n    \n    # Set up equations based on the problem statement\n    equation1 = Eq(2 * books + 3 * pencil_box, 42)\n    equation2 = Eq(2 * books + 6 * pencil_box, 60)\n\n    # Solve the equations for the variables\n    solutions = solve((equation1, equation2), (books, pencil_box))\n\n    return solutions[pencil_box]\n\nans = solution()"
    ],
    "98fa02662c3f496dbfbd82e145244c2d": [
        "def solution():\n    # A's efficiency is twice B's\n    # A can complete the job in 6 days\n    # A's work rate is 1/6 jobs per day\n    \n    # Let's find B's work rate\n    # If A's efficiency is twice B's, then B will take twice as long as A to complete the job\n    B_time_to_complete = 6 * 2  # B takes 12 days to complete the job alone\n    B_work_rate = 1 / B_time_to_complete  # B's work rate is 1/12 jobs per day\n    \n    # The combined work rate of A and B is the sum of their individual work rates:\n    A_work_rate = 1 / 6\n    combined_work_rate = A_work_rate + B_work_rate\n    \n    # Time taken when working together is the reciprocal of combined work rate\n    time_together = 1 / combined_work_rate\n    \n    return time_together\n\nans = solution()"
    ],
    "4f9fc9c45bc74b13945e3b6e4a79c3ef": [
        "def solution():\n    monthly_salary = 7.65\n    debt = 2.5\n\n    months_needed = debt / monthly_salary\n\n    return months_needed\n\nans = solution()"
    ],
    "dc7dede26ff941569676a4c0dc370ff2": [
        "def solution():\n    # Given sum of current ages is 22\n    current_sum_age = 22\n    # Given future sum of ages will be 30\n    future_sum_age = 30\n    # Calculate the difference in sum of ages\n    difference_age = future_sum_age - current_sum_age\n    # Time taken for the sum of their ages to be 30 will be the difference (each year they both get older by 1 each)\n    time = difference_age / 2\n    \n    return int(time)\n\nans = solution()"
    ],
    "56b1265849bc4172b9283606e061da30": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of sheep and cows at the beginning\n    sheep_initial, cows_initial = symbols('sheep_initial cows_initial', integer=True)\n\n    # Equation 1: Initial number of sheep were 5/7 the number of cows\n    eq1 = Eq(sheep_initial, (5/7) * cows_initial)\n\n    # Equation 2: After 21 sheep were added and 7 cows were removed,\n    # the number of cows became 3/4 the number of sheep\n    eq2 = Eq(cows_initial - 7, (3/4) * (sheep_initial + 21))\n\n    # Solve the simultaneous equations\n    solutions = solve((eq1, eq2), (sheep_initial, cows_initial))\n\n    # Return the number of sheep at the beginning\n    return solutions[sheep_initial]\n\nans = solution()"
    ],
    "672eac0e95a14d3f9ead29a67b3f22d2": [
        "def solution():\n    haribo_cost = 0.50\n    mamee_cost = haribo_cost - 0.30\n    big_jelly_cost = 6 * mamee_cost\n\n    return big_jelly_cost\n\nans = solution()"
    ],
    "e804f82f48cb432f87a500257865625a": [
        "def solution():\n    return 15.41 + 0.023\n\nans = solution()"
    ],
    "dc703045b2df402dbdfe5981fc60d341": [
        "def solution():\n    # Given fraction 18/36 and we need to find the equivalent numerator for the fraction with denominator 32\n    numerator = (18 * 32) / 36  # Cross multiplication to find the equivalent numerator\n    return int(numerator)\n\nans = solution()"
    ],
    "b43e05329caa4f1a984bd70f841acdce": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(37 - 3 * (x + 7), 5 * x)\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "a69ea7bbe98046abb05ec657125e9e2a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of candies\n    x = symbols('x')\n    \n    # Anna received 3/8 of the candies\n    anna = 3 / 8 * x\n    \n    # Belle received 1/4 of the candies\n    belle = 1 / 4 * x\n    \n    # Anna and Belle received 90 more candies than Cathy and Dawn together\n    # (Cathy + Dawn) = (Anna + Belle) - 90\n    # --> x - (Anna + Belle) = (Anna + Belle) - 90\n    equation = Eq(x - (anna + belle), (anna + belle) - 90)\n\n    # Solve for x to find total number of candies\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "365d1f5c27234c98810406b6e4bcded0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    initial_plants = symbols('initial_plants')\n\n    ethan = (initial_plants / 2) - 1\n    remaining_after_ethan = initial_plants - ethan\n\n    valerie = (remaining_after_ethan / 2) - 3\n    remaining_after_valerie = remaining_after_ethan - valerie\n\n    joel = (remaining_after_valerie / 2) - 2\n    remaining_after_joel = remaining_after_valerie - joel\n\n    equation = Eq(remaining_after_joel, 4)\n    solution = solve(equation, initial_plants)\n\n    return solution[0]\n\nans = solution()"
    ],
    "810b29e808374893b25143dad8014c66": [
        "def solution():\n    return 0.23 * 200\n\nans = solution()"
    ],
    "9d5c3d4446b7434aaaa6846a334f2ea1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the number of fish balls Mr Tan made at first\n    x = symbols('x')\n    \n    # Equation based on the information given\n    equation = Eq(x - (3/4)*x - (1/3)*(1/4)*x + 506, 2*x)\n    \n    # Solve for x\n    initial_fishballs = solve(equation, x)[0]\n    \n    return initial_fishballs\n\nans = solution()"
    ],
    "11ce6a9abf8e477b9581c4ee7316be07": [
        "def solution():\n    chris_books = 12\n    beck_books = 12 + 8\n    difference = beck_books - chris_books\n    books_to_give = difference // 2\n\n    return books_to_give\n\nans = solution()"
    ],
    "37ba30f7b64a46d380cae5ff5558dd59": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the number of cupcakes\n    chocolate, vanilla, blueberry = symbols('chocolate vanilla blueberry')\n\n    # Set up the equations based on the given question\n    equation1 = Eq(chocolate, vanilla + 72)       # Chocolate is 72 more than vanilla\n    equation2 = Eq(blueberry, vanilla - 36)       # Blueberry is 36 less than vanilla\n    equation3 = Eq((chocolate - chocolate / 6) + (vanilla - vanilla * 2 / 3) + \n                   (blueberry - blueberry * 7 / 9), 427)  # After selling, 427 left altogether\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (chocolate, vanilla, blueberry))\n\n    # Get the number of sold chocolate cupcakes\n    chocolate_sold = solutions[chocolate] / 6\n\n    return chocolate_sold.evalf()\n\nans = solution()"
    ],
    "2214d6869bd045e2afc03dba93bcda5e": [
        "def solution():\n    ans = (5/8) * 92 + 7 * 0.625 + 62.5 * 0.01\n    return ans\n\nans = solution()"
    ],
    "a0d429ec9b9241fbafa343fefd207ff9": [
        "def solution():\n    strawberry_cake_price = 3\n    marble_cake_price = strawberry_cake_price + 2\n    cheese_cake_price = 3 * marble_cake_price\n    price_for_two_cheese_cakes = 2 * cheese_cake_price\n\n    return price_for_two_cheese_cakes\n\nans = solution()"
    ],
    "1c415c8f98ba481e86c80c0113bb20a1": [
        "def solution():\n    circle = symbols('circle')\n    equation = Eq(circle * 3 + 17, 6 * 6 + 2)\n    solution = solve(equation, circle)\n    return solution[0]\n\nans = solution()"
    ],
    "1e328cd92fa04425b72e9c28f440ba39": [
        "def solution():\n    ratio_boys = 2\n    ratio_girls = 7\n    total_ratio = ratio_boys + ratio_girls\n    boys = 14\n\n    # Calculate the number of students in each part of the ratio\n    students_per_part = boys / ratio_boys\n    total_students = students_per_part * total_ratio\n\n    return int(total_students)\n\nans = solution()"
    ],
    "5d87e59fcef54f0d8cbf90a06ad4361a": [
        "def solution():\n    from sympy import divisors\n\n    n = 36\n    factors = divisors(n)\n\n    return len(factors)\n\nans = solution()"
    ],
    "cba96ea4079d4147a8e7a1bba76598b4": [
        "def solution():\n    total_pigs = 8\n    green_apples = total_pigs # one green apple per pig\n    red_apples = total_pigs // 2 # one red apple for every two pigs\n\n    total_apples = green_apples + red_apples\n    return total_apples\n\nans = solution()"
    ],
    "70ed86d3effe4cc5bd724d34f5219fb8": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 3), (3, 5), (5, 7)]\n    number = solve_congruence(*congruences)\n\n    # Find a number within the specified range\n    ans = None\n    for multiple in range(number[1] // 100):\n        if 400 <= number[0] + multiple * number[1] <= 500:\n            ans = number[0] + multiple * number[1]\n            break\n\n    return ans\n\nans = solution()"
    ],
    "e495bb663c3f4e3fb7b4594b7b6e3ce0": [
        "def solution():\n    total_seeds = 20\n    died_seeds = total_seeds * 1/4\n    grown_seeds = total_seeds - died_seeds\n    return int(grown_seeds)\n\nans = solution()"
    ],
    "0a6b3f52433742509667f3e14550f591": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(3, 5), (4, 7), (5, 9)]\n    ans = solve_congruence(*congruences)\n    return ans[0]\n\nans = solution()"
    ],
    "99ec89df21bc47e580283576006ce753": [
        "def solution():\n    total_money = 100\n    for day in range(1, 16):\n        if day % 2 == 1:\n            total_money += 10\n        else:\n            total_money -= 8\n    return total_money\n\nans = solution()"
    ],
    "0cdfa66a263441afa78bab0d33bc8b54": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "0e91657d43d34effa4d1a8ca9067f554": [
        "def solution():\n    total_durians = 90\n    sold_fraction = 4 / 6\n    sold_durians = total_durians * sold_fraction\n    remaining_durians = total_durians - sold_durians\n    return remaining_durians\n\nans = solution()"
    ],
    "892e6ad962394876990f5b04addfae37": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    shirt, pants = symbols('shirt pants')\n    equation1 = Eq(3 * shirt + 2 * pants, 81)\n    equation2 = Eq(5 * shirt + 4 * pants, 147)\n\n    solutions = solve((equation1, equation2), (shirt, pants))\n\n    return solutions[shirt] + solutions[pants]\n\nans = solution()"
    ],
    "5a342d4cec7f4c4886694b8cade4fa53": [
        "def solution():\n    final_result = 54\n    initial_number = (final_result * 4 - 178) / 2\n    return initial_number\n\nans = solution()"
    ],
    "e1e9d7528bbf401cbf3607c4c9d25245": [
        "def solution():\n    total_apples = 42 + 41 + 30 + 29 + 38\n    num_students = 5\n    average_apples = total_apples / num_students\n    return average_apples\n\nans = solution()"
    ],
    "1d5142c64ec641dc8bbd86895e5a3579": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be the distance and v be the original speed\n    d, v = symbols('d v', real=True, positive=True)\n    \n    # The original time to travel is 8 hours, so the distance is speed * time\n    original_distance = Eq(v * 8, d)\n    \n    # If Nini increases her speed by 5 km/h, her travel time decreases by 1 hour (to 7 hours)\n    increased_speed_distance = Eq((v + 5) * 7, d)\n    \n    # Solve the system of equations\n    solutions = solve((original_distance, increased_speed_distance), (d, v))\n    \n    return solutions[d]\n\nans = solution()"
    ],
    "599d7ab82508440d8bc57c2a45cc2bb6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for the cost of one banana (b) and one pear (p)\n    b, p = symbols('b p')\n\n    # Create equations based on the information given\n    equation1 = Eq(b + 2*p, 94)  # Max's purchase\n    equation2 = Eq(b + p, 62)     # Emily's purchase\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (b, p))\n\n    # Return the cost of one banana\n    return solutions[b]\n\nans = solution()"
    ],
    "1cfd9ab02afc40268d415154a39502bb": [
        "def solution():\n    return 32 * 47\n\nans = solution()"
    ],
    "adce1fe036694ef68f2fd4cdac3f0be4": [
        "def solution():\n    from itertools import permutations\n\n    players = ['Claire', 'Chantel', 'Tony', 'Cale']\n    total_permutations = permutations(players)\n    count = 0\n    \n    for perm in total_permutations:\n        # Check if Claire and Tony are sitting across each other\n        if perm.index('Claire') + 2 == perm.index('Tony') or perm.index('Tony') + 2 == perm.index('Claire'):\n            continue\n        else:\n            count += 1\n            \n    return count\n\nans = solution()"
    ],
    "4bbb81d1111b4e3cbec6b7862f30f6d7": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the initial number of stickers Marry had be 'm',\n    # and the initial number of stickers Alexis had be 'a'.\n    # Charlotte initially had 'c' stickers.\n    m, a, c = symbols('m a c')\n\n    # Marry and Alexis had stickers in the ratio 7:5\n    equation1 = Eq(m/a, 7/5)\n\n    # Marry and Alexis each gave 20% of their stickers to Charlotte\n    # New sticker count for Marry is m - 0.2 * m = 0.8 * m\n    # New sticker count for Alexis is a - 0.2 * a = 0.8 * a\n    # Charlotte receives 0.2 * m + 0.2 * a,\n    # and her stickers increase by 80%, so the new amount of stickers is 1.8 * c\n    equation2 = Eq(0.8 * m, m - 0.2 * m)\n    equation3 = Eq(0.8 * a, a - 0.2 * a)\n    equation4 = Eq(1.8 * c, c + 0.2 * m + 0.2 * a)\n\n    # Marry had 20 stickers more than Charlotte after giving away\n    equation5 = Eq(0.8 * m, c + 20)\n\n    # We solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5), (m, a, c))\n\n    # Alexis's initial number of stickers is the 'a' variable in the solutions dictionary\n    return solutions[a]\n\nans = solution()"
    ],
    "7455d596a9584c91a9f5f01d9ac7dda1": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['3', '5', '9']\n    all_nums = sorted(int(''.join(p)) for p in permutations(digits))\n    return all_nums[4]\n\nans = solution()"
    ],
    "6070f6baef3345f49dc764aaf67f2145": [
        "def solution():\n    n = 7**2 - 6**2\n    return n\n\nans = solution()"
    ],
    "f238021737bb4ddf866f1e344662e725": [
        "def solution():\n    import math\n    # Find the least number of test tubes that can test all the bottles in one go (6 hours)\n    num_test_tubes = math.ceil(math.log2(1000))\n    return num_test_tubes\n\nans = solution()"
    ],
    "19d73820d6d94870a69075b50604e9ea": [
        "def solution():\n    total_chairs = 10\n    total_distance_with_10_chairs = 36  # in meters\n    distance_between_chairs_with_10 = total_distance_with_10_chairs / (total_chairs - 1)\n    \n    total_chairs_after_removal = total_chairs - 3\n    distance_between_chairs_after_removal = distance_between_chairs_with_10\n\n    return distance_between_chairs_after_removal\n\nans = solution()"
    ],
    "ec5a902e3059436a93f54bdff89b1b64": [
        "def solution():\n    count = 0\n    # Each brother has at least 2 books already, so we distribute those first.\n    remaining_books = 10 - 2 * 3\n    # Now we distribute the remaining 4 books among the 3 brothers.\n    # Since the books are identical, we only care about the number of books each brother gets.\n    for b1 in range(remaining_books + 1):\n        for b2 in range(remaining_books + 1 - b1):\n            # The third brother gets the rest.\n            b3 = remaining_books - b1 - b2\n            count += 1\n    return count\n\nans = solution()"
    ],
    "a7c840e7a73042529289e2f30f4cce0a": [
        "def solution():\n    ans = 46 / (3 * 4) * (7 / 8) / (2 / 3) * (4 * 8) / (9 - 2)\n    return ans\n\nans = solution()"
    ],
    "18e7c7d882fd4965a7d2ddada6edb9ba": [
        "def solution():\n    n = (55 - 3) / 4\n    return int(n)\n\nans = solution()"
    ],
    "002d73bb7e164b1cbeeebeeb6b1b8c36": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the fourth angle as 'x', therefore the one angle is 5*x\n    x = symbols('x')\n    # We know the sum of angles in a quadrilateral is 360 degrees.\n    # Two of the angles are right angles (90 degrees each).\n\n    # Equation representing sum of angles\n    equation = Eq(90 + 90 + 5 * x + x, 360)\n\n    # Solve the equation for 'x'\n    fourth_angle = solve(equation, x)[0]\n\n    # Largest angle is 5 times the fourth angle\n    largest_angle = 5 * fourth_angle\n    \n    return largest_angle\n\nans = solution()"
    ],
    "87be82c9d7de44ca9010e74b7b93822e": [
        "def solution():\n    ans = 768 / 3\n    return ans\n\nans = solution()"
    ],
    "d552a67eab8b49baa8a9ba818269f589": [
        "def solution():\n    min_boxes = float('inf')\n    for small_boxes in range(54 // 5 + 1):\n        for medium_boxes in range(54 // 7 + 1):\n            for large_boxes in range(54 // 10 + 1):\n                if small_boxes * 5 + medium_boxes * 7 + large_boxes * 10 == 54:\n                    min_boxes = min(min_boxes, small_boxes + medium_boxes + large_boxes)\n    return min_boxes if min_boxes != float('inf') else None\n\nans = solution()"
    ],
    "08b558c3faa347dab4cf75659be5e9ba": [
        "def solution():\n    ways = [0] * 11  # There are 11 indices since we include 0 steps\n    ways[0] = 1  # one way to stand still (0 steps climbed)\n    ways[1] = 1  # one way to reach the first step\n    ways[2] = 2  # either 1+1 or 2 steps in one move\n    ways[3] = 4  # 1+1+1, 1+2, 2+1, 3 steps in one move\n\n    for i in range(4, 11):\n        if i == 5:\n            # Avoid the 5th step\n            ways[i] = 0\n        else:\n            # Number of ways to reach this step is the sum of the ways to reach\n            # the three preceding steps, as Jimmy can climb 1, 2 or 3 steps at a time\n            ways[i] = ways[i-1] + ways[i-2] + ways[i-3]\n\n    ans = ways[4] * ways[10]  # ways to reach the fourth step times ways to reach the end from the fourth step\n    return ans\n\nans = solution()"
    ],
    "adee1a24c7024765a006ff883559d59a": [
        "def solution():\n    # Generate the sequence until 10 appears for the first time.\n    sequence = []\n    for i in range(1, 10):\n        sequence.extend([i] * i)\n    \n    # Find the median of the sequence.\n    n = len(sequence)\n    if n % 2 == 1:\n        # If the number of elements is odd, return the middle element.\n        median = sequence[n // 2]\n    else:\n        # If the number of elements is even, return the average of the two middle elements.\n        median = (sequence[n // 2 - 1] + sequence[n // 2]) / 2\n\n    return median\n\nans = solution()"
    ],
    "7f2800865ae74b51aea6bb7d879f748d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((x + 6) / 3, 5)\n    ans = solve(equation, x)[0]\n\n    return ans\n\nans = solution()"
    ],
    "65d0a4bf0dd4421d8f7a7ae61320a871": [
        "def solution():\n    cans_per_day = 42 // 6\n    cans_in_9_days = cans_per_day * 9\n    return cans_in_9_days\n\nans = solution()"
    ],
    "a0bb16508a094a2b923d767cc547f24e": [
        "def solution():\n    # Prime factorization of the number 7007\n    factors_7007 = []\n    n = 7007\n    for i in range(2, 7007):\n        while n % i == 0:\n            factors_7007.append(i)\n            n //= i\n    # Since we are looking for two 2-digit numbers, we need to pair factors to get the numbers\n    factors_7007.sort()\n    num1 = factors_7007[0] * factors_7007[-1]\n    num2 = factors_7007[1] * factors_7007[-2]\n\n    # Making sure both numbers are 2-digit multiples of 7\n    if 10 <= num1 < 100 and 10 <= num2 < 100 and num1 % 7 == 0 and num2 % 7 == 0:\n        result_sum = num1 + num2\n    else:\n        result_sum = \"No valid pairs found\"\n\n    return result_sum\n\nans = solution()"
    ],
    "8c9a2bd605ed4c729cd446a9f7aa73b2": [
        "def solution():\n    result = (6/7) * 42\n    return result\n\nans = solution()"
    ],
    "43e9733a82014d8eabf755557196a178": [
        "def solution():\n    carrots_per_week = 14\n    weeks = 30\n    total_carrots = carrots_per_week * weeks\n    return total_carrots\n\nans = solution()"
    ],
    "5dd5b133aea24401a5002b33b8907b40": [
        "def solution():\n    speed_mph = 65\n    time_hours = 15 / 60  # converting minutes to hours\n    distance_miles = speed_mph * time_hours\n\n    # 1 mile = 1.60934 kilometers\n    distance_km = distance_miles * 1.60934\n    return distance_km\n\nans = solution()"
    ],
    "b295ec92694641e88fe8ece9db989418": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    frogs_begin, dragonflies_begin = symbols('frogs_begin dragonflies_begin')\n\n    equation1 = Eq(frogs_begin, dragonflies_begin + 9)\n    equation2 = Eq(frogs_begin - (11 - 10), dragonflies_begin + (10 - 11))\n\n    solutions = solve((equation1, equation2), (frogs_begin, dragonflies_begin))\n\n    return solutions[frogs_begin]\n\nans = solution()"
    ],
    "026d98e841e64cdd89aad40de45ad4b6": [
        "def solution():\n    visitors_per_minute = 10\n    check_in_per_entrance = 25\n    total_time_one_entrance = 16\n    \n    # Calculate the number of visitors after 16 minutes with one entrance\n    visitors_after_16_min = visitors_per_minute * total_time_one_entrance\n    \n    # Since we now have two entrances, the rate at which visitors are checked in is doubled\n    total_check_in_rate = 2 * check_in_per_entrance\n    \n    # Calculate the time when there will be no one waiting with two entrances\n    time_with_two_entrances = visitors_after_16_min / total_check_in_rate\n    \n    return time_with_two_entrances\n\nans = solution()"
    ],
    "81d722c81c1f48a79aedfcad65400bc2": [
        "def solution():\n    distance_climbed_per_day = 5\n    slide_down_per_night = 3\n    net_distance_per_day = distance_climbed_per_day - slide_down_per_night\n    total_distance = 16\n    days = 0\n    current_distance = 0\n\n    while current_distance < total_distance:\n        days += 1\n        current_distance += distance_climbed_per_day\n        if current_distance >= total_distance:\n            break\n        current_distance -= slide_down_per_night\n    \n    return days\n\nans = solution()"
    ],
    "da128269ec8a4b78bcc13ee12e8d271e": [
        "def solution():\n    total_cookies = 40\n    given_cookies = 8\n    cookies_per_bottle = 4\n\n    remaining_cookies = total_cookies - given_cookies\n    bottles_used = remaining_cookies / cookies_per_bottle\n\n    return int(bottles_used)\n\nans = solution()"
    ],
    "6bf09e258c0344d980831d0a2582021b": [
        "def solution():\n    greatest_multiple = 999 // 25 * 25\n    return greatest_multiple\n\nans = solution()"
    ],
    "f330e5185f564b4f8439985f154a4ab2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    cookies, muffins = symbols('cookies muffins')\n\n    # Equation based on the problem statement\n    equation1 = Eq(cookies, muffins + 24)\n    equation2 = Eq(3/4 * muffins + 5/8 * cookies, 74)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (cookies, muffins))\n\n    # Return the number of cookies\n    return solutions[cookies]\n\nans = solution()"
    ],
    "0d784e5849d84e58ad27c2767fae5a52": [
        "def solution():\n    for A in range(10):\n        if (1+2+3+A+4+5+6+A+7+8+9+A) % 9 == 0 and A % 5 != 0 and A % 2 == 0:\n            return A\n\nans = solution()"
    ],
    "16f45879a4ca4545b12ade2f472ea304": [
        "def solution():\n    n = 12\n    sum_of_cubes = sum(i for i in range(1, n + 1))**2\n    return sum_of_cubes\n\nans = solution()"
    ],
    "15e2a7686f9044aeaf931e87b0693cae": [
        "def solution():\n    # Let's define the cost structure based on the information provided.\n    # We will have to guess the individual costs since they are not provided\n    # in the original question. You can replace these costs with the actual ones. \n\n    metro_round_trip_cost = 5  # cost of metro both ways\n    coffee_cost = 3            # cost of coffee each\n    entry_fee = 10             # cost of entry to the game\n\n    # Total cost for Richard himself\n    richard_cost = metro_round_trip_cost + coffee_cost + entry_fee\n\n    # Remaining amount for friends\n    remaining = 40 - richard_cost\n\n    # Cost per friend\n    per_friend_cost = metro_round_trip_cost + coffee_cost + entry_fee\n\n    # Number of friends Richard can treat\n    number_of_friends = remaining // per_friend_cost\n    \n    return number_of_friends\n\nans = solution()"
    ],
    "f0b47802cada49d286687ff9e3a7086d": [
        "def solution():\n    # Given series follows a pattern: even number minus the next odd number\n    # Calculate the sum using the pattern\n    ans = sum([(2*i) - (2*i - 1) for i in range(24, 20, -1)]) + 40\n    return ans\n\nans = solution()"
    ],
    "82befdbc19124ec4a29b8a7200da5f5f": [
        "def solution():\n    total_cost = (4 * 24) + (5 * 81) + (7 * 20)\n    return total_cost\n\nans = solution()"
    ],
    "e1f9970642f64e64b790ec29f85e494f": [
        "def solution():\n    # Let the time taken by the driver be x minutes\n    # speed_ratio = driver_speed / cyclist_speed = 13 / 2\n    # Using the inverse ratio for time, since speed and time are inversely proportional\n    # time_ratio = cyclist_time / driver_time = 2 / 13\n\n    # Cyclist takes 143 minutes more than the driver\n    # cyclist_time = driver_time + 143\n    # Using the time_ratio:\n    # (driver_time + 143) / driver_time = 2 / 13\n\n    # Cross multiply to solve for driver_time\n    # 13 * (driver_time + 143) = 2 * driver_time\n    # 13 * driver_time + 1869 = 2 * driver_time\n    # 1869 = 2 * driver_time - 13 * driver_time\n    # 1869 = -11 * driver_time\n    # driver_time = 1869 / -11\n\n    driver_time = 1869 / (-11)\n\n    return -driver_time\n\nans = solution()"
    ],
    "509e74e27ec949a4bd04c96689bc27b8": [
        "def solution():\n    trains = 4\n    cars = 3\n    flights = 2\n    \n    total_ways = trains + cars + flights\n    \n    return total_ways\n\nans = solution()"
    ],
    "0ae254e064134f188c9be40779165325": [
        "def solution():\n    # Let's analyze the logic of the statements.\n    # Assuming statement 1 is correct implies all are correct, which is a contradiction.\n    # Assuming statement 2 is correct implies none are correct including itself, which is a contradiction.\n    # Assuming statement 3 is correct implies one of the first two statements is correct, which we have seen is not possible.\n    # Assuming statement 4 is correct implies all of the first three are correct, which is also a contradiction.\n    # Assuming statement 5 is correct, it implies that all the statements above are incorrect, which could be true\n    # if it is the only correct statement.\n    \n    # We thus conclude that statement 5 is the only one that could logically be correct.\n    return 5\n\nans = solution()"
    ],
    "2fd2c2cf5b0e4e77ade10ea6e459326d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the total number of coins\n    x = symbols('x')\n    \n    # Original situation: (1/4) * x coins are heads\n    # After flipping 2 coins: ((1/4) * x + 2) coins are heads, which is (1/3) of the coins\n    equation = Eq((1/4) * x + 2, (1/3) * x)\n\n    # Solve the equation for x\n    solution = solve(equation, x)\n\n    # Extract the solution for the number of coins\n    return solution[0]\n\nans = solution()"
    ],
    "b92bb1c34016428e8b1539c16095a291": [
        "from math import factorial\n\ndef solution():\n    # Calculate the total slots where comedy shows can be placed - can be before, between, or after any singing show\n    singing_shows = 5\n    slots_available_for_comedy = singing_shows + 1\n    \n    # Choose 3 slots from available slots for comedy shows to ensure they are not consecutive\n    ways_to_place_comedy = factorial(slots_available_for_comedy) // (factorial(3) * factorial(slots_available_for_comedy - 3))\n    \n    # Since singing shows are indistinguishable, they can be arranged in only 1 way\n    ways_to_arrange_singing = 1\n\n    # Total ways to arrange shows\n    total_ways = ways_to_place_comedy * ways_to_arrange_singing\n    \n    return total_ways\n\nans = solution()"
    ],
    "ab295a6189f54b16ad73515c7acb0dc0": [
        "def solution():\n    from math import gcd\n\n    ans = gcd(16, 36)\n    return ans\n\nans = solution()"
    ],
    "85093fa878264795a7751d28ce2631a2": [
        "def solution():\n    total_road = 500\n    total_days = 5\n    road_per_day = total_road / total_days\n    return road_per_day\n\nans = solution()"
    ],
    "ad97ccd1f3f147778a05bec0c8d4686c": [
        "def solution():\n    numbers = [2/5, 1/4, 0.45, 0.35, 7/20]\n    numbers.sort()\n    middle_index = len(numbers) // 2\n    middle_value = numbers[middle_index]\n    return middle_value\n\nans = solution()"
    ],
    "ad40132c81d646cca930b7085fe9b999": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq((5 * x + 7) / 4, 8)\n    original_number = solve(equation, x)\n\n    return original_number[0]\n\nans = solution()"
    ],
    "805c2d490543494daae962252fa53bed": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')  # Symbolic representation of the original number\n    \n    equation = Eq((x / 2) - 9, 12)  # Represents the word problem as an equation\n    \n    solved = solve(equation, x)  # Solves the equation for x\n    \n    return solved[0]  # The solution is the original number\n\nans = solution()"
    ],
    "a93e649ea04246e29d39e3abf1c9cbf4": [
        "def solution():\n    # Convert recurring decimals to their fractional form\n    S = 2/9 + 3/99 + 4/999 + 5/9999 + 6/99999\n\n    # Convert the sum to a string to get the digits after the decimal point\n    decimal_string = str(S)[2:]  # Ignore \"0.\"\n\n    # If the length of the decimal string is less than 2100, tile it until it reaches 2100 or more\n    decimal_string = (decimal_string * (2100 // len(decimal_string) + 1))[:2100]\n\n    # Sum the first 2100 digits after the decimal point as integers\n    ans = sum(int(digit) for digit in decimal_string)\n\n    return ans\n\nans = solution()"
    ],
    "03a77a22a7ee441d83180f51247c76d2": [
        "def solution():\n    return 2018 - 314\n\nans = solution()"
    ],
    "d6f4e33c53824be9b1e66bbf1d27bf6a": [
        "def solution():\n    for chocolates in range(41, 60):\n        if chocolates % 4 == 2 and chocolates % 6 == 2:\n            return chocolates\n\nans = solution()"
    ],
    "f93efda9bc144ea8ad3f28fa5d961c5e": [
        "def solution():\n    from math import factorial\n    \n    # Number of people\n    n = 6\n    # Number of seats\n    k = 8\n    # For a circular table, we fix one person and arrange the others.\n    # It reduces the problem by one person, so we arrange n-1 people around (k-1) seats.\n    \n    # Calculate the permutations for (n-1) people to sit in (k-1) seats.\n    ans = factorial(k-1) // factorial(k-n)\n    \n    return ans\n\nans = solution()"
    ],
    "ac69d28e01274b9cb6dba2d848512b1e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(55 - 6 * (7 - x), 37)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "41faa1f0b1cc4a408ca39ea9588f7c41": [
        "def solution():\n    total_dollars = 3.5\n    quarters_in_one_dollar = 4\n    num_quarters = total_dollars * quarters_in_one_dollar\n    return num_quarters\n\nans = solution()"
    ],
    "4a1f30f8a5d9460a9ca929a63a2af4ef": [
        "from itertools import permutations\n\ndef solution():\n    digits = [4, 5, 7, 9]\n    even_digits = [d for d in digits if d % 2 == 0]\n    smallest_even_number = float('inf')\n\n    for even_digit in even_digits:\n        remaining_digits = [d for d in digits if d != even_digit]\n        for perm in permutations(remaining_digits):\n            num = int(''.join(map(str, perm)) + str(even_digit))\n            if num % 2 == 0 and num > 999 and num < smallest_even_number:\n                smallest_even_number = num\n\n    return smallest_even_number\n\nans = solution()"
    ],
    "0372e783670b4989a40bb288d0a50b49": [
        "def solution():\n    from math import lcm\n    return lcm(3, 4, 10)\n\nans = solution()"
    ],
    "c3bed35ee49449b1b1c173972bfbdc16": [
        "def solution():\n    return 0.45 * 2000\n\nans = solution()"
    ],
    "ef3c1e2ecc29478cae0e4c67e21cfd31": [
        "def solution():\n    chocolate_bar_cost = 72  # cost of the chocolate bar in pence\n    balloon_cost = 20        # cost of one balloon in pence\n    total_paid = 1000        # total amount paid in pence (£10 note)\n    change_received = 388    # change received in pence (£3.88)\n\n    # Calculate the money spent on chocolate bar and balloons\n    money_spent = total_paid - change_received\n\n    # Subtract the cost of the chocolate bar to find the money spent on balloons\n    money_spent_on_balloons = money_spent - chocolate_bar_cost\n\n    # Calculate the number of balloons by dividing the money spent on balloons by the cost of one balloon\n    number_of_balloons = money_spent_on_balloons // balloon_cost\n\n    return number_of_balloons\n\nans = solution()"
    ],
    "8356de756f6c4a9296f2986d44679ee5": [
        "def solution():\n    # Let 's' be the speed of the escalator in steps per second\n    # Let 'n' be the number of steps in the escalator\n    \n    # When Peter walks at 1 step per second, the total speed is (1 + s) steps per second\n    # It takes him 10 seconds to walk, so in 10 seconds he covers 10 * (1 + s) steps\n    # This is equal to the total number of steps n\n    # Therefore, we have: 10 * (1 + s) = n [Equation 1]\n    \n    # When Peter walks at 2 steps per second, the total speed is (2 + s) steps per second\n    # It takes him 16 / 2 = 8 seconds to walk, since he takes 16 steps at 2 steps per second\n    # In those 8 seconds, he covers 8 * (2 + s) steps\n    # This is also equal to the total number of steps n\n    # Therefore, we have: 8 * (2 + s) = n [Equation 2]\n    \n    # Now we have two equations with two variables:\n    # 10 + 10s = n [from Equation 1]\n    # 16 + 8s = n [from Equation 2]\n    \n    # Equating the two expressions for n, we get:\n    # 10 + 10s = 16 + 8s\n    # Which simplifies to:\n    # 10s - 8s = 16 - 10\n    # 2s = 6\n    # s = 3\n    \n    # Substitute the value of s into Equation 1 to find n\n    # n = 10 + 10s\n    # n = 10 + 10*3\n    # n = 10 + 30\n    # n = 40\n    \n    # Hence, the number of steps on the escalator is 40\n    return 40\n\nans = solution()"
    ],
    "9836746f750849eab60f6f4814df73ae": [
        "def solution():\n    ans = (4 + 2) * 13 - (4 + (2 * 13))\n    return ans\n\nans = solution()"
    ],
    "1fb58eeac24a49a9a387cd050b737f10": [
        "def solution():\n    students = 17\n    capacity = 4\n\n    kayaks_needed = (students + capacity - 1) // capacity\n\n    return kayaks_needed\n\nans = solution()"
    ],
    "47daaf2e351c41baa45e0b8bebe5a912": [
        "def solution():\n    from sympy import symbols, Eq, solve, sqrt\n\n    # Define the symbol for unknown variable x\n    x = symbols('x')\n\n    # Given a = 4*sqrt(3)\n    a = 4*sqrt(3)\n\n    # Given equation 3a = sqrt(3x)\n    equation = Eq(3*a, sqrt(3*x))\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    # Since we expect a single solution for x\n    return solution[0]\n\nans = solution()"
    ],
    "95c22bdbc98241c5a13eb5bfac9fdeef": [
        "def solution():\n    count = 0\n    for num in range(74, 200):\n        str_num = str(num)\n        if len(set(str_num)) == len(str_num):\n            count += 1\n    return count\n\nans = solution()"
    ],
    "efa72e12128b4d01a799c7adc89fd0e4": [
        "def solution():\n    total_money = 243\n    spent_fraction = 2 / 9\n    spent_money = total_money * spent_fraction\n    remaining_money = total_money - spent_money\n    \n    # Let the cost of one cupcake be x and the cost of one slice of pizza be y.\n    # 5 cupcakes + 6 slices of pizza = spent_money\n    # 3 slices of pizza = 2 cupcakes.\n    # We can express the costs of cupcakes and pizza in terms of x.\n    # 5x + 6y = spent_money, and 3y = 2x, or y = (2/3)x.\n    # Substituting y in the main equation: 5x + 6 * (2/3)x = spent_money\n    # Simplifying: 5x + 4x = spent_money, or 9x = spent_money\n    # We can find the cost of one cupcake (x) as follows:\n    x = spent_money / 9\n    \n    # The number of cupcakes Mark can buy with the remaining money is the integer division\n    # of remaining_money by x.\n    num_cupcakes = remaining_money // x\n    \n    return int(num_cupcakes)\n\nans = solution()"
    ],
    "ed3efc4e403348c68b8110b921b8dbda": [
        "def solution():\n    return 861 // 7\n\nans = solution()"
    ],
    "ea690ce1e8584d07923ee3bc953befdb": [
        "def solution():\n    first_term = 15\n    last_term = 213\n    difference = 24 - 15\n\n    num_months = ((last_term - first_term) // difference) + 1\n\n    return num_months\n\nans = solution()"
    ],
    "206f12ce0af144238e17dafffb955002": [
        "def solution():\n    return 531 * 135\n\nans = solution()"
    ],
    "997a64284e3544e7a7e0c6fe94460913": [
        "from itertools import permutations\n\ndef solution():\n    digits = [2, 3, 5]\n    three_digit_numbers = list(permutations(digits, 3))\n    return len(three_digit_numbers)\n\nans = solution()"
    ],
    "83872d0eef7a43dfb1188835aa5cf9cf": [
        "def solution():\n    # Let's say the youngest dwarf's age is x years\n    # The following three ages would be x+1, x+2, x+3\n    # According to the problem statement:\n    # x + (x + 1) + (x + 2) = 42\n    # 3x + 3 = 42\n    # 3x = 42 - 3\n    # x = (42 - 3) / 3\n    x = (42 - 3) // 3\n\n    # Now we calculate the sum of the ages of the oldest three dwarfs\n    # The ages would be x+4, x+5, x+6\n    # So the sum would be (x + 4) + (x + 5) + (x + 6)\n    sum_oldest_three = (x + 4) + (x + 5) + (x + 6)\n    \n    return sum_oldest_three\n\nans = solution()"
    ],
    "2e6b4015f6284de4a0c0669daaa24807": [
        "def solution():\n    import math\n\n    count = 0\n    num = 2\n    \n    # Check for perfect squares in the given pattern up to a reasonable number of iterations\n    for i in range(1, 10):  # Only need to check up to 9 repetitions because sqrt(2555555555) > 50000\n        if math.isqrt(num)**2 == num:\n            count += 1\n        num = num * 10 + 5  # Increment to the next number in the sequence\n\n    return count\n\nans = solution()"
    ],
    "af0382a8cc5e48a18bb7e42fd763f480": [
        "def solution():\n    initial_pieces = 10\n    final_pieces = 16\n    cut_pieces = 0\n    \n    for i in range(1, initial_pieces + 1):\n        if initial_pieces - i + (i * 3) == final_pieces:\n            cut_pieces = i\n            break\n\n    return cut_pieces\n\nans = solution()"
    ],
    "d9b42c64ab424ba98dbea5766a9ecc3c": [
        "def solution():\n    workers_initial = 6\n    parts_produced_initial = 120\n    time_initial = 4\n    \n    workers_final = 3\n    time_final = 10\n    \n    parts_produced_per_worker_per_minute = parts_produced_initial / (workers_initial * time_initial)\n    \n    parts_produced_final = parts_produced_per_worker_per_minute * workers_final * time_final\n    \n    return parts_produced_final\n\nans = solution()"
    ],
    "e495cca42c1345a4b15b14b27a2a00c5": [
        "def solution():\n    original_price = 98\n    new_price = 44.1\n    percent_change = ((original_price - new_price) / original_price) * 100\n    return percent_change\n\nans = solution()"
    ],
    "fa375130b4804eb2ac24de6cdb33ba36": [
        "def solution():\n    from sympy import factorint\n    \n    # Factorize 2240\n    factors = factorint(2240)\n    \n    # Calculate n such that 2240/n is a square number\n    # For 2240/n to be a square, each prime factor must be in pairs.\n    n = 1\n    for prime in factors:\n        if factors[prime] % 2 != 0:\n            n *= prime\n    \n    return n\n\nans = solution()"
    ],
    "0b88d57e68004f1f83f1f05147aba9ae": [
        "def solution():\n    total_pupils = 380\n    swim_pupils = total_pupils * 70 // 100\n    girls_swim = 200\n    \n    boys_swim = swim_pupils - girls_swim\n    boys_cannot_swim = boys_swim * 40 / 60\n    boys_total = boys_swim + boys_cannot_swim\n    \n    girls_total = total_pupils - boys_total\n    \n    return int(girls_total)\n\nans = solution()"
    ],
    "8df7c69637724afeb40a650136d884cc": [
        "def solution():\n    initial_value = 160\n    final_value = 168\n    increase = final_value - initial_value\n    percentage_increase = (increase / initial_value) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "ed6460b42a0146b59f0890c10edd817c": [
        "def solution():\n    ans = 14 * 7 * 2\n    return ans\n\nans = solution()"
    ],
    "9b500db0f33f4fa7a395fa0b079d3de4": [
        "def solution():\n    total_trees = 8\n    apples_per_tree = 10\n    rotten_fraction = 1/4\n\n    total_apples = total_trees * apples_per_tree\n    rotten_apples = total_apples * rotten_fraction\n    non_rotten_apples = total_apples - rotten_apples\n\n    return int(non_rotten_apples)\n\nans = solution()"
    ],
    "b746b9baab8c4a33bd87af0d6945be01": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(5*(6*x + 1) - 2*x, 89)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "b423b47f8b544d03af8cc3a8a122e9ab": [
        "def solution():\n    n = 12\n    A = (n*(n+1)//2)**2\n    return A\n\nans = solution()"
    ],
    "e27aaf5d541a4c6dac0a50ca457f87ab": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    sack_of_rice, packet_of_oatmeal = symbols('sack_of_rice packet_of_oatmeal')\n\n    equation1 = Eq(3 * sack_of_rice + 3 * packet_of_oatmeal, 36)\n    equation2 = Eq(sack_of_rice, 2 * packet_of_oatmeal)\n\n    solutions = solve((equation1, equation2), (sack_of_rice, packet_of_oatmeal))\n\n    return solutions[sack_of_rice]\n\nans = solution()"
    ],
    "b9c7443e6d2446d1880d97e9932a5033": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    sugar_water_10 = symbols('sugar_water_10')\n    \n    sugar_30 = 4 * 0.30\n    sugar_10 = sugar_water_10 * 0.10\n    \n    total_sugar = sugar_30 + sugar_10\n    total_water = 4 + sugar_water_10\n    \n    equation = Eq(total_sugar / total_water, 0.26)\n    \n    amount_sugar_water_10 = solve(equation, sugar_water_10)\n\n    return amount_sugar_water_10[0]\n\nans = solution()"
    ],
    "5bb77e251c3740d5aab8750dc2aef4ff": [
        "def solution():\n    original_price = 32 / (1 - 0.20)\n    final_price = 32 - 4\n    total_discount = original_price - final_price\n    total_percentage_discount = (total_discount / original_price) * 100\n    return total_percentage_discount\n\nans = solution()"
    ],
    "a8239f9e0ecd49818a91f1dd8da80bf9": [
        "def solution():\n    number = 200\n    count = 0\n    for i in range(1, number + 1):\n        if number % i == 0 and i != 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "bbe36118c29249729aad8891551bb3d7": [
        "def solution():\n    def new_op(a, b):\n        return a * b - a - b + 1\n    \n    ans = new_op(new_op(2, 3), 4)\n    return ans\n\nans = solution()"
    ],
    "94f427d14d9b4d18afe48096055372d1": [
        "def solution():\n    # Let j be the mass of the jar and c be the mass of one chocolate.\n    # According to the problem we have two equations:\n    # j + 5c = 185\n    # j + 17c = 317\n\n    # To find the mass of the jar with 10 chocolates, we need to solve for j and c and then calculate\n    # j + 10c.\n\n    # We can rearrange the first equation to express j in terms of c:\n    # j = 185 - 5c\n\n    # Then substitute this expression for j in the second equation to solve for c:\n    # (185 - 5c) + 17c = 317\n    c = (317 - 185) / (17 - 5)\n\n    # Now we can solve for j using the value of c:\n    j = 185 - 5 * c\n\n    # Finally, we calculate the mass of the jar with 10 chocolates:\n    mass_with_10_chocolates = j + 10 * c\n    \n    return mass_with_10_chocolates\n\nans = solution()"
    ],
    "f88ff061bff143cb95b6f618e6e1efd8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    lana, mark = symbols('lana mark')\n    total_sweets = 674\n\n    # Lana gives away 1/3 of her sweets\n    # Mark eats 34 of his sweets\n    # They end up with the same number of sweets\n    equation1 = Eq(lana - lana / 3, mark - 34)\n    equation2 = Eq(lana + mark, total_sweets)\n\n    solutions = solve((equation1, equation2), (lana, mark))\n    lana_sweets = solutions[lana]\n    mark_sweets = solutions[mark]\n\n    # How many more sweets did Lana have than Mark at first\n    difference = lana_sweets - mark_sweets\n\n    return difference\n\nans = solution()"
    ],
    "c316b949005a4f70998bf21b2636f3e1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    dorothy, timmy, kevin = symbols('dorothy timmy kevin')\n\n    equation1 = Eq(dorothy, 8 * timmy)\n    equation2 = Eq(dorothy, 96)\n    equation3 = Eq(kevin, timmy + 45)\n\n    solutions = solve((equation1, equation2, equation3), (dorothy, timmy, kevin))\n\n    return solutions[kevin]\n\nans = solution()"
    ],
    "2d23c45ab97549b4b8ab41ad32224d76": [
        "def solution():\n    # Total length of the perimeter in meters\n    perimeter = 2 * (144 + 204)\n    # Subtract the 4 corners since they've been already counted\n    wheat_count_along_sides = 116 - 4\n    # The distance between each two wheat is the perimeter divided by the number of spaces between wheats\n    distance = perimeter / wheat_count_along_sides\n    return distance\n\nans = solution()"
    ],
    "00bac1b894d8400c927244d5ab291236": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_days = symbols('total_days')\n\n    # Equation: total_days = (1/2 * total_days) + (1/4 * total_days) + 4 + 14\n    equation = Eq(total_days, (1/2 * total_days) + (1/4 * total_days) + 4 + 14)\n\n    solution = solve(equation, total_days)\n\n    return solution[0]\n\nans = solution()"
    ],
    "3110b53620c0471aa2cb667c3ce65e77": [
        "def solution():\n    time_per_cat_per_fish = 10  # minutes\n    number_of_cats = 5  # cats\n    number_of_fish = 5  # fish\n\n    # Since all cats are catching fish at the same time, the time taken is not multiplied by the number of cats\n    time_to_catch_one_fish_each = time_per_cat_per_fish\n\n    return time_to_catch_one_fish_each\n\nans = solution()"
    ],
    "b9c45a7f41d84579a8250cc2efdbeda0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, pineapple = symbols('watermelon pineapple')\n\n    equation1 = Eq(watermelon, 5 * pineapple)\n    equation2 = Eq(watermelon, pineapple + 5.6)\n\n    solutions = solve((equation1, equation2), (watermelon, pineapple))\n\n    return solutions[watermelon]\n\nans = solution()"
    ],
    "b3542d3cc8af443f8b242a3a4d02cd92": [
        "def solution():\n    # Total perimeter of the field\n    perimeter = (144 + 204) * 2\n\n    # Subtract the corners since they have been already counted\n    wheat_stalks_on_side = 116 - 4\n\n    # The distance between each wheat is the perimeter divided by the number of intervals\n    # The number of intervals is one less than the number of stalks on sides\n    distance_between_wheat = perimeter / wheat_stalks_on_side\n\n    return distance_between_wheat\n\nans = solution()"
    ],
    "f2e2f998455a41098dae005947481855": [
        "def solution():\n    result = 81\n    inverse_operations = [(lambda x: x / 9), (lambda x: x * 4), (lambda x: x - 3)]\n    for op in inverse_operations:\n        result = op(result)\n    return result\n\nans = solution()"
    ],
    "468e5ab1d23843a688c0d986c25ee3de": [
        "def solution():\n    total_bracelets = 84\n    morning_bracelets = total_bracelets * (2/7)\n    remainder = total_bracelets - morning_bracelets\n    afternoon_bracelets = remainder * (3/5)\n\n    bracelets_made = morning_bracelets + afternoon_bracelets\n    more_bracelets_needed = total_bracelets - bracelets_made\n\n    return more_bracelets_needed\n\nans = solution()"
    ],
    "134e520a63fc4cd4b9d24373d85afc3a": [
        "def solution():\n    frac_part = 3 / 8\n    whole_number = 48\n    \n    ans = frac_part * whole_number\n    return ans\n\nans = solution()"
    ],
    "82e49ff36eba45e5b80fed7508aed40a": [
        "def solution():\n    total_people = 200\n    ellie_rate = 40\n    combined_time = 4\n\n    combined_rate = total_people / combined_time  # Rate at which Ellie and Gloria together interview people\n    gloria_rate = combined_rate - ellie_rate      # Rate at which Gloria interviews people\n\n    # Calculate how long Gloria would take to finish interviewing everyone by herself\n    gloria_time = total_people / gloria_rate\n\n    return gloria_time\n\nans = solution()"
    ],
    "5756e8ef018e4deca17abc1cfcc3c79a": [
        "from itertools import permutations\n\ndef solution():\n    for p in permutations('123456789', 4):\n        if '0' in p or '2' in p: continue\n        A, F, C, E = p\n        ABCDEF = int(f\"{A}2{C}0{E}{F}\")\n        EFABCD = int(f\"{E}{F}A2{C}0\")\n        if 5 * ABCDEF == 6 * EFABCD:\n            return int(f\"{F}{A}{C}{E}\")\n\nans = solution()"
    ],
    "05453f6e54854903b245e1b9f7315d91": [
        "def solution():\n    total_dogfood = 15 + 60\n    rice_in_A = 0.40 * 15\n    rice_in_mixture = 0.28 * total_dogfood\n    rice_in_B = rice_in_mixture - rice_in_A\n    percent_rice_in_B = (rice_in_B / 60) * 100\n    return percent_rice_in_B\n\nans = solution()"
    ],
    "9fbe57cb0ac6418ab2240792282591b7": [
        "def solution():\n    rate_per_minute = 15  # milliliters per minute\n    minutes_in_hour = 60\n    hours = 2\n\n    total_leakage_milliliters = rate_per_minute * minutes_in_hour * hours\n    total_leakage_liters = total_leakage_milliliters / 1000  # converting milliliters to liters\n\n    return total_leakage_liters\n\nans = solution()"
    ],
    "f2e50e32110b4bbdac14c61d13824286": [
        "def solution():\n    road_length = 150\n    tree_spacing = 10\n\n    # +1 because there's a tree at both the start and end of the road\n    num_trees = (road_length // tree_spacing) + 1\n\n    return num_trees\n\nans = solution()"
    ],
    "e7bd4bc8283741eb831b62ff36519ac8": [
        "def solution():\n    speed_barbara = 60 # Barbara's speed in metres per minute\n    speed_catherine = 45 # Catherine's speed in metres per minute\n    difference_in_distance = 60 # Difference in distance when Barbara reached the mall\n\n    # Since both start at the same time, the times taken by both to reach their respective points will be the same.\n    # Let 't' minutes be the time taken by Barbara to reach the mall.\n    # Barbara's distance = speed_barbara * t\n    # Catherine's distance = speed_catherine * t\n\n    # When Barbara reaches the mall, Catherine is 60 metres away from the mall.\n    # Barbara's distance = Catherine's distance + 60\n\n    # We know that speed = distance/time, therefore:\n    # distance = speed * time\n    # If we let 't' be the time for Barbara to reach the mall, we can write the equation for Barbara's distance and Catherine's distance.\n    # Barbara's distance is the shopping mall's distance from the starting point, which we need to find.\n\n    # Set up the equation speed_barbara * t = speed_catherine * t + difference_in_distance and solve for 't':\n    # 60t = 45t + 60\n    # We can now solve for 't' and then use 't' to find the shopping mall's distance.\n\n    t = difference_in_distance / (speed_barbara - speed_catherine)\n    distance_to_mall = speed_barbara * t\n\n    return distance_to_mall\n\nans = solution()"
    ],
    "794649fd064842be800fcd3dd6a2517e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    book, pen = symbols('book pen')\n\n    equation1 = Eq(2 * book + 1 * pen, 12)\n    equation2 = Eq(1 * book + 2 * pen, 9)\n\n    solutions = solve((equation1, equation2), (book, pen))\n\n    return solutions[pen]\n\nans = solution()"
    ],
    "e082319eb56d42f888747eb43934b281": [
        "def solution():\n    total_change = (2 * 10) + (5 * 5) + (4 * 0.20)\n    amount_spent = 100 - total_change\n    return amount_spent\n\nans = solution()"
    ],
    "89088a26e0bf4129b3d5aac6042e949e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let represent the four number by x4 > x3 > x2 > x1\n    x1, x2, x3, x4 = symbols('x1 x2 x3 x4')\n    \n    # The sum of the smallest number and the average of the other three numbers is 39\n    # x1 + (x2 + x3 + x4) / 3 = 39 -> equation1\n    equation1 = Eq(x1 + (x2 + x3 + x4) / 3, 39)\n    \n    # The sum of the largest number and the average of the other three numbers is 51\n    # x4 + (x1 + x2 + x3) / 3 = 51 -> equation2\n    equation2 = Eq(x4 + (x1 + x2 + x3) / 3, 51)\n    \n    # Use the two equations to form systems and solve them\n    # We non-negative restrictions on the numbers - as we are specifically interested\n    # in the largest possible value of the largest number x4\n    solutions = solve((equation1, equation2), (x1, x2, x3, x4), dict=True)\n    \n    # Extract the possible solutions\n    possible_x4_values = [sol[x4] for sol in solutions]\n\n    # Filter out the non-integer solutions for the x4 values, ensuring distinct whole numbers\n    possible_x4_values_integers = [val for val in possible_x4_values if val.is_integer and val > 0]\n\n    # Assuming descending order, the largest possible value is also the maximum value in possible_x4_values_integers\n    max_x4 = max(possible_x4_values_integers)\n    \n    return int(max_x4)\n\nans = solution()"
    ],
    "3ba5f4eac4774daf9c2b513499cd343e": [
        "def solution():\n    frying_time_per_plate = 3\n    total_available_time = 18\n\n    num_plates_fried = total_available_time // frying_time_per_plate\n\n    return num_plates_fried\n\nans = solution()"
    ],
    "410b895710664b55b1f42904c7fe0a39": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    total = 200\n    ratio_A_to_B = Eq(A / B, 4/3)\n    A_has_more_than_C = Eq(A, C + 20)\n    total_money = Eq(A + B + C, total)\n\n    solutions = solve((ratio_A_to_B, A_has_more_than_C, total_money), (A, B, C))\n\n    return solutions[C]\n\nans = solution()"
    ],
    "17d03f9197534de4bc9abd09472af81f": [
        "from sympy import symbols, Eq, solve\n\ndef solution():\n    x, y = symbols('x y')\n    equation = Eq(3*x + y + 21, 2 * (0.5*y + x))\n    solutions = solve(equation, x)\n    return solutions[x]\n\nans = solution()"
    ],
    "e3bed45262264696ba3ef5c430fcbf22": [
        "def solution():\n    students_facing_teacher = 0\n    for i in range(1, 51):\n        if (i % 4 == 0) ^ (i % 6 == 0):\n            students_facing_teacher += 1\n    return students_facing_teacher\n\nans = solution()"
    ],
    "59eb954ff993443c9285d88a012ec8bb": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for Nini's age and her dad's age\n    nini_age, dad_age = symbols('nini_age dad_age')\n\n    # Create equations based on the problem description\n    equation1 = Eq(dad_age, nini_age + 25)  # Dad is 25 years older than Nini\n    equation2 = Eq(dad_age + 5, 2 * (nini_age + 5) - 8)  # Condition after five years\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (nini_age, dad_age))\n\n    # Nini's age this year is what we want to find\n    return solutions[nini_age]\n\nans = solution()"
    ],
    "58dc414946bf46c0ba652c5866ea789b": [
        "def solution():\n    return 471471471471 // 157157157157\n\nans = solution()"
    ],
    "ab914c10068e40aabb127e29805bd56b": [
        "def solution():\n    total_pears = 300\n    pears_sold_first_day = total_pears * (2/5)\n    remaining_pears_after_first_day = total_pears - pears_sold_first_day\n    pears_sold_second_day = remaining_pears_after_first_day * (7/9)\n\n    return int(pears_sold_second_day)\n\nans = solution()"
    ],
    "6951136ac6a143cc8a66d6e046b9c312": [
        "def solution():\n    ans = 2536 // 4\n    return ans\n\nans = solution()"
    ],
    "f266887d9734495ab9b3e624af600dc7": [
        "def solution():\n    fraction = 3/4\n    percentage = 30 / 100\n    whole_number = 120\n    \n    ans = fraction * percentage * whole_number\n    \n    return ans\n\nans = solution()"
    ],
    "a3540f1e7dc5422e96cb21be5f76dd9b": [
        "from math import ceil\n\ndef solution():\n    apples = 29\n    min_apples_per_student = 3\n\n    # Using the Pigeonhole Principle,\n    # divide the total number of apples by the minimum number of apples per student,\n    # and round up, because we can't have a fraction of a student.\n    # This gives the minimum possible class size.\n    min_class_size = ceil(apples / min_apples_per_student)\n\n    return min_class_size\n\nans = solution()"
    ],
    "7dac345168e24b7f9f57312741709d28": [
        "def solution():\n    boys = 3\n    girls = 4\n    ways_to_pick = boys * girls\n    return ways_to_pick\n\nans = solution()"
    ],
    "c49b566d28914d98a6c34de5890ff196": [
        "def solution():\n    from sympy import isprime\n\n    count = 0\n    for number in range(10, 100):\n        if isprime(number):\n            reversed_number = int(str(number)[::-1])\n            if number != reversed_number and isprime(reversed_number):\n                count += 1\n    return count\n\nans = solution()"
    ],
    "1f597349b6ec4f37bf0ad940a0226974": [
        "def solution():\n    ans = 462 + 268\n    return ans\n\nans = solution()"
    ],
    "f3ad4296cd634e83b25be5b77004a4b0": [
        "def solution():\n    ans = 36 - 18 / 2 + 4 * 6 / 3\n    return ans\n\nans = solution()"
    ],
    "8acc0b244fed4d689a5ee6fdff28233e": [
        "def solution():\n    initial_value = 140\n    final_value = 87.5\n\n    percent_change = ((final_value - initial_value) / initial_value) * 100\n\n    return percent_change\n\nans = solution()"
    ],
    "efb9468b904144138bdc171c8b89d9b7": [
        "def solution():\n    # Let's denote g for green balls and b for blue balls.\n    # We have two equations based on the problem statement:\n    # 1) g + b = 140 (total number of balls)\n    # 2) g - 28 = b - (2/5)*b (equal number of green and blue balls after removal)\n    from sympy import symbols, Eq, solve\n\n    g, b = symbols('g b')\n    equation1 = Eq(g + b, 140)\n    equation2 = Eq(g - 28, b - (2/5)*b)\n\n    solutions = solve((equation1, equation2), (g, b))\n\n    return solutions[b]\n\nans = solution()"
    ],
    "603221d8eb7e48509c5ac61d65305758": [
        "def solution():\n    # Since the alcoholic is not at two of the bars, the probability that they are at the third bar is 100%.\n    # However, we should consider that the alcoholic drinks 90% of the day,\n    # which is the probability that they are drinking at any bar at all.\n    \n    # Probability of being at the third bar, given that he is not at the first two\n    probability_at_third_bar = 1\n\n    # Overall probability that the alcoholic is at the third bar\n    ans = probability_at_third_bar * 0.9\n\n    return ans\n\nans = solution()"
    ],
    "2afab9fc169e49b190d537d496fbae66": [
        "def solution():\n    eliot_future_age = 16\n    years_future = 4\n\n    eliot_current_age = eliot_future_age - years_future\n    cousins_current_age = eliot_current_age // 2\n    cousins_future_age = cousins_current_age + years_future\n\n    return cousins_future_age\n\nans = solution()"
    ],
    "6d6b160ceaa74bed9f0745675ca7130e": [
        "def solution():\n    return 5183 - 594\n\nans = solution()"
    ],
    "9125492975b445d4b6f48807e27c1382": [
        "def solution():\n    number1 = 387\n    number2 = 729\n    ans = (number1 + number2) / 2\n    return ans\n\nans = solution()"
    ],
    "61e7999f8b924716a703e69dcd306ee4": [
        "def solution():\n    # The proportion of marked fish in the second catch should resemble the proportion of the total fish population.\n    # If we denote the total number of fish in the pond as \"total_fish\", then:\n    # (marked fish in the first catch / total_fish) = (marked fish in the second catch / fish caught in the second catch)\n\n    marked_first_catch = 100  # The number of marked fish from the first catch\n    marked_second_catch = 16  # The number of marked fish in the second catch\n    fish_caught_second = 100  # The number of fish caught in the second catch\n    \n    # Using the proportion to calculate the estimate of the total number of fish in the pond\n    total_fish = (marked_first_catch * fish_caught_second) / marked_second_catch\n\n    return total_fish\n\nans = solution()"
    ],
    "7ed04e8e16744d3b811bde9f5ab21683": [
        "def solution():\n    # Ratio of distances walked by Nancy (n) and Randy (r) is 2:3\n    n, r = 2, 3\n\n    # Randy walks 10m more than Nancy \n    additional_r = 10\n\n    # When they meet, the total distance covered is their initial distance apart (d)\n    # Randy covers r/(n + r) of the distance, Nancy covers n/(n + r) of the distance\n    # r/(n + r)*d - n/(n + r)*d = additional_r\n    # solving for d gives us:\n    d = additional_r / ((r - n) / (n + r))\n\n    return d\n\nans = solution()"
    ],
    "26d6e3f96e9245abb8672de6d4d25383": [
        "def solution():\n    elaine_current_age = 6\n    mandy_current_age = 35\n    age_difference = mandy_current_age - elaine_current_age\n    elaine_future_age = 12\n    mandy_future_age = elaine_future_age + age_difference\n    return mandy_future_age\n\nans = solution()"
    ],
    "07e354462e5749c7b35205d8675ad8be": [
        "def solution():\n    return 324 + 132\n\nans = solution()"
    ],
    "549c6955bced409fbe3608247d39f37d": [
        "def solution():\n    numerator = (1 + 3/99) + (3 + 3/33) + (9 + 3/11)\n    denominator = (1 + 1/99) + (3 + 1/33) + (9 + 1/11)\n    \n    ans = numerator / denominator\n    return ans\n\nans = solution()"
    ],
    "94fa427c30bc41b0bc1c23c2e238e7a4": [
        "def solution():\n    # Let the repeating decimal be represented as y\n    y = 0.20141414141414...\n    # Multiply y by 100 to shift the decimal two places to the left\n    # Now the repeating part aligns with y's repeating part\n    # 100y = 20.141414141414...\n    # Subtract y from 100y to get:\n    # 99y = 20.141414141414... - 0.20141414141414...\n    # Simplifying the right hand side by canceling out the repeating parts\n    # 99y = 19.94\n    # Now solve for y by dividing both sides by 99\n    y = 19.94 / 99\n    # Multiply y by 9900 to find x, since x / 9900 = y\n    x = y * 9900\n    # We want the whole number x, so we return the result as an integer\n    return int(x)\n\nans = solution()"
    ],
    "fa1aabed26fd4a0f8865c23013775faa": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ali, bronson, charlie = symbols('ali bronson charlie')\n    \n    equation1 = Eq(bronson, 2 * ali)\n    equation2 = Eq(ali, (bronson + charlie) / 2 - 5)\n    \n    solutions = solve((equation1, equation2), (ali, bronson, charlie))\n    \n    return solutions[charlie]\n\nans = solution()"
    ],
    "8b3e2473ae0743c19785cba9cb052741": [
        "def solution():\n    sum1 = sum(range(10, 21, 2))\n    sum2 = sum(range(9, 20, 2))\n    ans = sum1 - sum2\n    return ans\n\nans = solution()"
    ],
    "5eb6f108f7f945d3b8e14b92f427c6c4": [
        "def solution():\n    # Initialize a counter for the possible numbers\n    count = 0\n\n    # Iterate over possible hundreds place digits\n    for hundreds in range(1, 10):\n        # Iterate over possible tens place digits\n        for tens in range(10):\n            # Iterate over possible ones place digits\n            for ones in range(10):\n                # Check if all digits are different\n                if len(set([hundreds, tens, ones])) == 3:\n                    # Check if the sum of the digits is 8\n                    if hundreds + tens + ones == 8:\n                        # Check if the number is even (one's place should be an even number)\n                        if ones % 2 == 0:\n                            count += 1\n    return count\n\nans = solution()"
    ],
    "9a8ebe1067614f2ba696f9ca243810e9": [
        "def solution():\n    for num in range(100000, 1000000):\n        # Check if the last digit is 2\n        if str(num)[-1] == '2':\n            # Create a new number with 2 as the first digit and remove the last 2\n            new_num = int('2' + str(num)[:-1])\n            # Check if the new number is one third of the original\n            if new_num == num // 3:\n                return num\n\nans = solution()"
    ],
    "0e0926913a4c49b6b42a2bff3086a037": [
        "def solution():\n    total_students = 30\n    passed_first_exam = 25\n    failed_second_exam = 12\n    passed_second_failed_first = 3\n\n    # Students who passed both exams\n    passed_both_exams = passed_first_exam - passed_second_failed_first\n\n    # Students who failed the first exam\n    failed_first_exam = total_students - passed_first_exam\n\n    # Students who passed the second exam\n    passed_second_exam = total_students - failed_second_exam\n\n    # Using Inclusion-Exclusion Principle\n    only_passed_first_exam = passed_first_exam - (passed_both_exams - (passed_second_exam - passed_second_failed_first))\n\n    return only_passed_first_exam\n\nans = solution()"
    ],
    "77cc490d98fc4ff0b16ec404452ab1f2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the age of Alice's sister.\n    x = symbols('x')\n    # Alice is twice as old as her sister, so Alice's age is 2 * x.\n    # In 10 years, Alice will be 2 * x + 10 and her sister will be x + 10.\n    # The total age in 10 years is 53, so we get the equation: 2 * x + 10 + x + 10 = 53.\n\n    # Form the equation based on the given information.\n    equation = Eq(2 * x + 10 + x + 10, 53)\n\n    # Solve the equation to find the sister's age.\n    sister_age = solve(equation, x)[0]\n\n    # Alice's age is twice her sister's age.\n    alice_age = 2 * sister_age\n\n    return alice_age\n\nans = solution()"
    ],
    "807a797d374546a7ad31ed32cc60158c": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(3, 5), (6, 8), (7, 9)]\n    number, _ = solve_congruence(*congruences)\n\n    while number < 500:\n        number += (5 * 8 * 9)\n\n    return number\n\nans = solution()"
    ],
    "5fdcb9eaeeda4228836991b47e7cf8da": [
        "def solution():\n    total_bars = 43\n    persons = 4\n    remainder = total_bars % persons\n    return remainder\n\nans = solution()"
    ],
    "09cfeee5f94b44469b0645a7a6453ce2": [
        "def solution():\n    for a in range(1, 10):\n        for b in range(10):\n            number_ab = 10 * a + b\n            number_ba = 10 * b + a\n            product = number_ab * number_ba\n            if product % 100 == 0:\n                return number_ab\n\nans = solution()"
    ],
    "93167d80f006455787219151d56379f4": [
        "def solution():\n    payment_per_hour = 78 / 6.5\n    hours_needed = 300 / payment_per_hour\n    return hours_needed\n\nans = solution()"
    ],
    "3ef3e16ae5454ad18e360ceeb9eeef62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    large, small = symbols('large small')\n\n    equation1 = Eq(large, small * 1.2)\n    equation2 = Eq(large + small, 77)\n\n    solutions = solve((equation1, equation2), (large, small))\n\n    return solutions[large]\n\nans = solution()"
    ],
    "c1b3143db8aa464aab4fa542021b858a": [
        "def solution():\n    # The sum of all possible hundreds place digits is 2 * (a + b + c) since each digit will appear twice in the hundreds place\n    hundreds_sum = 2 * (a + b + c)\n\n    # The sum of all possible tens place digits is 2 * (a + b + c) since each digit will appear twice in the tens place\n    tens_sum = 2 * (a + b + c)\n\n    # The sum of all possible ones place digits is 2 * (a + b + c) since each digit will appear twice in the ones place\n    ones_sum = 2 * (a + b + c)\n\n    # Sum them up with appropriate place values: hundreds place value is 100, tens is 10, and ones is 1\n    total_sum = hundreds_sum * 100 + tens_sum * 10 + ones_sum\n\n    return total_sum\n\na, b, c = symbols('a b c')\nans = solution()"
    ],
    "f165d10b0a934af9ba1ae1c8293984e6": [
        "def solution():\n    ans = round(5 / 9, 2)\n    return ans\n\nans = solution()"
    ],
    "80120be608194dd2b89d6d3c9721eb31": [
        "def solution():\n    students = 35\n    capacity_per_cabin = 6\n    min_cabins = (students + capacity_per_cabin - 1) // capacity_per_cabin\n    return min_cabins\n\nans = solution()"
    ],
    "19d5b1dcfa2c4b1bb5d7e097116869d5": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    oranges, apples = symbols('oranges apples')\n\n    # Initial total number of fruits\n    equation1 = Eq(oranges + apples, 125)\n\n    # Number of fruits left after selling\n    equation2 = Eq(oranges - 35, apples / 2)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (oranges, apples))\n\n    return solutions[oranges]\n\nans = solution()"
    ],
    "d77af89b3f1c41dd8496bce0d6d3ec08": [
        "def solution():\n    return sum(len(str(i)) for i in range(1, 59))\n\nans = solution()"
    ],
    "3569ba2a31094a19827f25ea3598dbd8": [
        "def solution():\n    # The least 5-digit palindrome number is 10001 (next one after 9999)\n    least_5_digit_palindrome = 10001\n    \n    # The greatest 6-digit palindrome number is 999999 (no post-greater palindrome)\n    greatest_6_digit_palindrome = 999999\n    \n    # Calculate the difference between the two palindrome numbers\n    difference = greatest_6_digit_palindrome - least_5_digit_palindrome\n    \n    return difference\n\nans = solution()"
    ],
    "e0b9281bf0a54571a6295132e8b1f3b8": [
        "def solution():\n    matthew_pencils = 31\n    samantha_pencils = matthew_pencils - 6\n    return samantha_pencils\n\nans = solution()"
    ],
    "742b4a19edd64989a9bc0c3e3a6c14e3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_coins = symbols('total_coins')\n    # Let total_coins be the symbol for the total number of coins\n\n    # Original situation: 1/4 showing heads\n    # New situation: (1/4 * total_coins + 2) / total_coins = 1 / 3\n    equation = Eq((1 / 4 * total_coins + 2) / total_coins, 1 / 3)\n\n    # Solving the equation for total_coins\n    solutions = solve(equation, total_coins)\n\n    # Assuming there are whole coins on the table, which makes sense for this context\n    solution_integer = [sol for sol in solutions if sol.is_integer]\n\n    # There should be only one valid integer solution\n    return solution_integer[0]\n\nans = solution()"
    ],
    "36e64178982945cca898597516b4d750": [
        "def solution():\n    # Counting from the left, the picture book is the 14th book\n    books_on_left_of_favorite = 14 - 1  # excluding the favorite book itself\n\n    # Number of books on the right of the picture book\n    books_on_right_of_favorite = 6\n\n    # Total number of books in the row\n    total_books = books_on_left_of_favorite + 1 + books_on_right_of_favorite\n\n    return total_books\n\nans = solution()"
    ],
    "697722b344fb494fa3ef4ecb759d5167": [
        "def solution():\n    max_value = 50\n    multiple_of = 5\n    sum_multiples = sum(range(multiple_of, max_value + 1, multiple_of))\n    return sum_multiples\n\nans = solution()"
    ],
    "bc3d8ec301fc410598e59a2ceb2b13e3": [
        "def solution():\n    speed_planet1 = 30  # km per minute\n    speed_planet2 = 40  # km per minute\n    time = 5  # minutes\n    \n    # Distance travelled by each planet in 5 minutes\n    distance_planet1 = speed_planet1 * time\n    distance_planet2 = speed_planet2 * time\n    \n    # Total distance apart 5 minutes ago\n    total_distance_apart = distance_planet1 + distance_planet2\n    \n    return total_distance_apart\n\nans = solution()"
    ],
    "019e5a54ec7f459790a6d32439e83dfb": [
        "def solution():\n    # Break the problem into three cases: 1-9, 10-99, and 100-1200\n    \n    # First case: digits for numbers 1-9 (1 digit each)\n    digits_in_1_to_9 = 9\n    \n    # Second case: digits for numbers 10-99 (2 digits each)\n    digits_in_10_to_99 = 90 * 2\n    \n    # Third case: digits for numbers 100-1200 (3 digits each)\n    digits_in_100_to_1200 = (1200 - 99) * 3\n    \n    # Combine all cases to find the total number of digits\n    total_digits = digits_in_1_to_9 + digits_in_10_to_99 + digits_in_100_to_1200\n    \n    # Find the position of the 2011th digit from the left\n    position_from_left = total_digits - 2011 + 1\n    \n    # Now that we have the position from the left, find the number in which this digit is present\n    if position_from_left <= digits_in_1_to_9:\n        # It is in the range 1-9\n        digit = position_from_left\n    elif position_from_left <= (digits_in_1_to_9 + digits_in_10_to_99):\n        # It is in the range 10-99\n        position_in_range = position_from_left - digits_in_1_to_9\n        corresponding_number = 10 + (position_in_range - 1) // 2  # Finding the actual number\n        digit_index = (position_in_range - 1) % 2  # 0 for first digit, 1 for second digit\n        digit = int(str(corresponding_number)[digit_index])\n    else:\n        # It is in the range 100-1200\n        position_in_range = position_from_left - (digits_in_1_to_9 + digits_in_10_to_99)\n        corresponding_number = 100 + (position_in_range - 1) // 3  # Finding the actual number\n        digit_index = (position_in_range - 1) % 3  # 0 for first, 1 for second, 2 for third digit\n        digit = int(str(corresponding_number)[digit_index])\n    \n    return digit\n\nans = solution()"
    ],
    "913c9cae5532421db2aefcd71661c685": [
        "def solution():\n    # There are 5 choices for the first digit (1-5) as zero cannot be the first digit of a two-digit number\n    first_digit_options = 5\n    # There are 6 choices for the second digit (0-5) as it can be zero\n    second_digit_options = 6\n    # Total number of combinations for two-digit numbers\n    total_combinations = first_digit_options * second_digit_options\n    return total_combinations\n\nans = solution()"
    ],
    "5c51cffb043942adb46a09a26bc746ab": [
        "def solution():\n    first_term = 26\n    last_term = 626\n    common_difference = 34 - 26\n\n    num_terms = ((last_term - first_term) // common_difference) + 1\n\n    return num_terms\n\nans = solution()"
    ],
    "d4c00e90a8ef4ae0981bbeedc1858cd9": [
        "def solution():\n    # Let x be the number of cars (each with 4 tyres)\n    # Let y be the number of motorbikes (each with 2 tyres)\n    # We have two equations:\n    # 1) x + y = 140 (total number of vehicles)\n    # 2) 4x + 2y = 490 (total number of tyres)\n\n    # Substituting y = 140 - x into the second equation gives:\n    # 4x + 2(140 - x) = 490\n    # Simplifying the equation gives:\n    # 2x + 280 - 2x = 490\n    # 2x = 490 - 280\n    # 2x = 210\n    # x = 105\n\n    # The number of cars is x\n    number_of_cars = (490 - 2 * 140) / 2\n    return int(number_of_cars)\n\nans = solution()"
    ],
    "27cc97e40ad844c982dd1a9f1e766432": [
        "def solution():\n    paid_price = 64\n    discount_rate = 0.20\n    original_price = paid_price / (1 - discount_rate)\n    return original_price\n\nans = solution()"
    ],
    "031e28e1f3ad4f9f868951764773e37c": [
        "def solution():\n    total_ratio = 4 + 5  # Total parts (4 parts of apple juice + 5 parts of orange juice)\n    total_litres = 36  # Total litres of the fruit drink\n\n    apple_juice_ratio = 4  # Parts of apple juice\n    apple_juice_litres = (apple_juice_ratio / total_ratio) * total_litres\n\n    return apple_juice_litres\n\nans = solution()"
    ],
    "5e3921774a0148c58a168a7d4d6a9158": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    a, n = symbols('a n')\n    equation1 = Eq(190 % n, a)\n    equation2 = Eq(137 % n, a + 4)\n    equation3 = Eq(101 % n, a + 6)\n\n    res = solve((equation1, equation2, equation3), (a, n))\n    divisor = res[n][0]\n\n    remainder = 299 % divisor\n    return remainder\n\nans = solution()"
    ],
    "fa4eb19fd6df49bdb4533fec025fa83a": [
        "def solution():\n    return 125 * (76 + 12)\n\nans = solution()"
    ],
    "730105f481354ec491084be98c91d6f1": [
        "def solution():\n    total_distance = 11\n    climb_per_day = 3\n    slide_per_night = 1\n    net_distance_per_day = climb_per_day - slide_per_night\n    day_counter = 0\n    distance_covered = 0\n\n    while distance_covered < total_distance:\n        day_counter += 1\n        distance_covered += climb_per_day\n        if distance_covered >= total_distance:\n            break\n        distance_covered -= slide_per_night\n\n    return day_counter\n\nans = solution()"
    ],
    "4958c2ee692b42cdaaf22c2892011be2": [
        "def solution():\n    number = 8.765\n    ans = round(number, 1)\n    return ans\n\nans = solution()"
    ],
    "aa07d321ec634d83a0c7f8d255553cff": [
        "def solution():\n    total_avocados = 960\n    per_box = 8\n\n    num_boxes = total_avocados // per_box\n\n    return num_boxes\n\nans = solution()"
    ],
    "de030313f1e64b389d5594c99dd4dafe": [
        "def solution():\n    ans = 0.2 * 5.39\n    return ans\n\nans = solution()"
    ],
    "abaa56505ee547838c84f84921be0ebb": [
        "def solution():\n    number = 1\n    while True:\n        if number % 2 == 1 and number % 13 == 1:\n            return number\n        number += 1\n\nans = solution()"
    ],
    "1cecf15afbce45239bf7e71e6a2da145": [
        "def solution():\n    ans = (9/5) * (25/100) + (1/4) * 2.2 - 0.25\n    return ans\n\nans = solution()"
    ],
    "b81938b8cf7a46a4b628bfa5a8634ad1": [
        "def solution():\n    # We are given the equation 2x + 12 = 26\n    # We need to perform inverse operations to find the value of x.\n    # First, we subtract 12 from both sides of the equation.\n    # This gives us 2x = 26 - 12, which simplifies to 2x = 14.\n    # Next, we divide both sides of the equation by 2 to isolate x.\n    # This gives us x = 14 / 2, which simplifies to x = 7.\n    # Hence, the number thought of was 7.\n\n    result = (26 - 12) / 2\n    return result\n\nans = solution()"
    ],
    "c5ef0c07edfc4211afdaa999ad856197": [
        "def solution():\n    num_classes = 5\n    students_per_class = 100\n    amount_donated_per_student = 5.78\n    \n    total_donation = num_classes * students_per_class * amount_donated_per_student\n    \n    return total_donation\n\nans = solution()"
    ],
    "9371af16b67240519deb5e635949e1a7": [
        "def solution():\n    from sympy import isprime\n\n    max_sum = 0\n    for x in range(2, 200): # Start from 2 since 1 is not a prime\n        if isprime(x):\n            y = (200 - x) / (x - 1)\n            if y.is_integer() and isprime(y) and x != y:\n                max_sum = max(max_sum, x + int(y))\n\n    return max_sum\n\nans = solution()"
    ],
    "86cd9b725006412db04f636eca50d89b": [
        "from math import factorial\n\ndef solution():\n    total_digits = 6\n    num_2s = 2\n    num_3s = 2\n    num_4s = 1\n    num_5s = 1\n    \n    permutations_with_repeats = factorial(total_digits) // (factorial(num_2s) * factorial(num_3s) * factorial(num_4s) * factorial(num_5s))\n    \n    return permutations_with_repeats\n\nans = solution()"
    ],
    "33d52a12c5824537a7ab10162e240c2c": [
        "def solution():\n    spent = 2\n    fraction_of_total = 1 / 4\n    total_money = spent / fraction_of_total\n    return total_money\n\nans = solution()"
    ],
    "80c9bf8ad95b4909a6d7ee77ac0d7e51": [
        "def solution():\n    num_teams = 8\n    num_rounds = (num_teams * (num_teams - 1)) // 2  # each match involves 2 teams\n\n    return num_rounds\n\nans = solution()"
    ],
    "590a4f620ce648a89e73074cf3c6acf5": [
        "def solution():\n    a = 6\n    b = 7\n    result = a * 3 + b - 4\n    return result\n\nans = solution()"
    ],
    "3d554443b1224a4da2b07f8233870170": [
        "def solution():\n    from fractions import Fraction\n\n    result = (Fraction(31, 6) + Fraction(31, 5)) / (Fraction(1, 6) + Fraction(1, 5))\n    ans = result.numerator / result.denominator\n    return ans\n\nans = solution()"
    ],
    "6ed2905a0c1c4583b578668431fbae3f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    doc, happy, dopey, sneezy, bashful, grumpy, sleepy = symbols('doc happy dopey sneezy bashful grumpy sleepy')\n\n    equation1 = Eq(doc, happy + 10)\n    equation2 = Eq(happy, dopey + 10)\n    equation3 = Eq(sneezy, dopey)\n    equation4 = Eq(bashful, dopey)\n    equation5 = Eq(grumpy, dopey)\n    equation6 = Eq(doc + sleepy, dopey + sneezy)\n    equation7 = Eq(sleepy, 80)\n\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6, equation7),\n                      (doc, happy, dopey, sneezy, bashful, grumpy, sleepy))\n\n    total_height = sum(solutions.values())\n\n    return total_height\n\nans = solution()"
    ],
    "f39a0d61562749f19a4d1e5e510dac81": [
        "def solution():\n    ans = (7/9) * 27\n    return ans\n\nans = solution()"
    ],
    "c4bf31a44d8d46c9b19634c1115ae2a2": [
        "from itertools import permutations\n\ndef solution():\n    digits = ['3', '5', '9']\n    numbers = sorted(int(''.join(p)) for p in permutations(digits))\n    return numbers[4]  # Indexing from 0, so the 5th position is index 4\n\nans = solution()"
    ],
    "17bc582ed1bf4564b574312e59268176": [
        "def solution():\n    meters_per_day = 1000 / 5\n    days_for_2600m = 2600 / meters_per_day\n    return days_for_2600m\n\nans = solution()"
    ],
    "d07b83cca75e406b9cac57296901269a": [
        "def solution():\n    speed_per_hour = 250 / 5\n    distance_in_3_hours = speed_per_hour * 3\n    return distance_in_3_hours\n\nans = solution()"
    ],
    "d1cf2646f95e48aaab2267eb79ed0eb3": [
        "def solution():\n    total_trees = 60\n    trees_per_side = total_trees // 4\n    \n    return trees_per_side\n\nans = solution()"
    ],
    "f7ab8cb826c649ec85b7b2cea10e2333": [
        "def solution():\n    for num in range(10, 60):\n        if num % 8 == 3 and num % 7 == 6:\n            return num\n\nans = solution()"
    ],
    "0d15dac81380463388b2f48a1e5a4ac4": [
        "def solution():\n    trees = 30\n    distance_apart = 5\n    length_of_road = (trees - 1) * distance_apart\n    return length_of_road\n\nans = solution()"
    ],
    "29f0c1773b854d5b946e865190eba514": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    triangle = symbols('triangle')\n\n    equation = Eq(triangle * 6 + 12, 3 * 6 + 36)\n\n    solution = solve(equation, triangle)\n\n    return solution[0]\n\nans = solution()"
    ],
    "b5428109db6f4a889887b92377a44169": [
        "def solution():\n    # Calculate the number of terms in the series using arithmetic progression.\n    first_term = 12\n    last_term = 90\n    difference = 1\n    num_terms = ((last_term - first_term) // difference) + 1\n    \n    # In an arithmetic progression where the common difference is odd,\n    # if the number of terms is even, the sum is odd.\n    # if the number of terms is odd, the sum is even.\n    if num_terms % 2 == 0:\n        ans = 'odd'\n    else:\n        ans = 'even'\n\n    return ans\n\nans = solution()"
    ],
    "5b18261bd85f4736bb866cd18fa2f7c7": [
        "def solution():\n    # Let's denote the numbers on the hats of Qiang, Rory, and Sophia as Q, R, and S respectively.\n    from sympy import symbols, Eq, solve\n    \n    Q, R, S = symbols('Q R S')\n    \n    # The given conditions can be translated into the following equations:\n    # Q + R = 22\n    # Q + S = 17\n    # R + S = 11\n    \n    # Now we setup the equations\n    eq1 = Eq(Q + R, 22)\n    eq2 = Eq(Q + S, 17)\n    eq3 = Eq(R + S, 11)\n    \n    # We solve the system of equations\n    solutions = solve((eq1, eq2, eq3), (Q, R, S))\n    \n    # The largest number on a hat is the max value among Q, R, S\n    largest_number = max(solutions[Q], solutions[R], solutions[S])\n    \n    return largest_number\n\nans = solution()"
    ],
    "645960391d9a40f287074aea24d065e6": [
        "from fractions import Fraction\n\ndef solution():\n    result = Fraction(1, 1)\n    for i in range(2, 10):\n        result *= Fraction(i + 1, i)\n    return float(result)\n\nans = solution()"
    ],
    "5ba5f881a3d44e1588df5aa8c2d9b7be": [
        "def solution():\n    from sympy import isprime\n\n    count = 0\n    for prime in range(2, 21):\n        if isprime(prime) and isprime(prime + 6) and isprime(prime - 6):\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "e7597a502cf74421b35bb550a54a362d": [
        "def solution():\n    return 54 * 7\n\nans = solution()"
    ],
    "3bd18c4e21064eeda7d67edd78bf418c": [
        "def solution():\n    pages = 345\n    digits = 0\n    \n    # Pages 1-9 have 1 digit each\n    if pages >= 9:\n        digits += 9\n\n    # Pages 10-99 have 2 digits each\n    if pages >= 99:\n        digits += (99 - 9) * 2\n    else:\n        digits += (pages - 9) * 2\n        return digits\n\n    # Pages 100-345 have 3 digits each\n    digits += (pages - 99) * 3\n\n    return digits\n\nans = solution()"
    ],
    "76403d5e9dca4ff6b2fc3602bef45a7e": [
        "def solution():\n    total_people = 340 + 20\n    bus_capacity = 25\n    buses_needed = total_people // bus_capacity + (total_people % bus_capacity > 0)\n    return buses_needed\n\nans = solution()"
    ],
    "7992bad8c26d42e1b736d8fab12944f1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_prize = symbols('total_prize')\n    \n    singles_prize = (1/5) * total_prize\n    doubles_prize = (1/15) * total_prize\n\n    equation = Eq(singles_prize + doubles_prize, 360)\n\n    total_prize_money = solve(equation, total_prize)\n\n    return total_prize_money[0]\n\nans = solution()"
    ],
    "ec3693af136e4822b07b647b190d64ee": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    # Andy drove 70 miles in 90 minutes\n    total_distance = 70\n\n    # Average speed during the first 30 minutes: x mph\n    # Distance covered in the first 30 minutes: x * 0.5 (since 30 minutes is 0.5 hours)  \n    first_distance = x * 0.5\n\n    # Average speed during the second 30 minutes: (x-20) mph\n    # Distance covered in the second 30 minutes: (x-20) * 0.5\n    second_distance = (x - 20) * 0.5\n\n    # Average speed during the last 30 minutes: (x+10) mph\n    # Distance covered in the last 30 minutes: (x+10) * 0.5\n    last_distance = (x + 10) * 0.5\n\n    # Equation for the total distance covered in 90 minutes\n    equation = Eq(first_distance + second_distance + last_distance, total_distance)\n\n    # Solve the equation for x\n    solution_x = solve(equation, x)\n\n    return solution_x[0]\n\nans = solution()"
    ],
    "46bce6274909462595b7cd5d528fd678": [
        "def solution():\n    from math import factorial\n\n    # Since the coach has to stand in the middle, there's only one position for him.\n    positions_for_coach = 1\n\n    # The captain can either stand to the left or right of the coach.\n    positions_for_captain = 2\n\n    # We have 5 players left and 5 positions left (excluding the coach's and captain's spots).\n    positions_for_other_players = factorial(5)\n\n    # By the principle of multiplication, the total number of different ways they can line up is:\n    total_ways = positions_for_coach * positions_for_captain * positions_for_other_players\n\n    return total_ways\n\nans = solution()"
    ],
    "45bfd7efccc8407995a20fc0424601ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    penguins = symbols('penguins')    # Define variable for number of penguins\n    fish_left_3 = 25                  # Fish left if 3 fish are given to each penguin\n    fish_left_6 = 1                   # Fish left (for one penguin) if 6 fish are given to each penguin\n\n    # Equation if 3 fish are given to each penguin\n    equation1 = Eq(3 * penguins + fish_left_3, 6 * penguins - fish_left_6)\n\n    # Solve the equation for the number of penguins\n    solutions = solve(equation1, penguins)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "21ac3377e3e04f7095b5e98b24de2cf5": [
        "def solution():\n    ans = (-0.512)**(1/3) + (-1.2)**2\n    return ans\n\nans = solution()"
    ],
    "185585248b784d759d3d8f88fb2bb399": [
        "def solution():\n    sum_of_terms = 0\n    current_number = 1\n    counter = 0\n    for i in range(1, 31):\n        sum_of_terms += current_number\n        counter += 1\n        if counter == current_number:\n            current_number += 1\n            counter = 0\n    return sum_of_terms\n\nans = solution()"
    ],
    "89aaad0e5929492ebd91a881ccbdcd20": [
        "def solution():\n    boys = girls = 0\n    layer = 0 \n    \n    while True:\n        boys_in_layer = (layer * 2 + 1) ** 2 - (layer * 2 - 1) ** 2 if layer > 0 else 1\n        girls_in_layer = ((layer + 1) * 2 + 1) ** 2 - (layer * 2 + 1) ** 2\n        \n        if boys_in_layer < girls_in_layer:\n            break\n        \n        boys += boys_in_layer\n        girls += girls_in_layer\n        layer += 2\n        \n    total_students = boys + girls\n\n    if boys - girls == 20:\n        return total_students\n    \n    # Adjust to reach the exact difference\n    while boys - girls != 20:\n        layer += 1\n        # Boys occupy the corners, so subtract 4 each layer\n        if layer % 2 == 1:\n            boys += (layer * 4)\n        else:\n            girls += (layer * 4)\n        \n        total_students = boys + girls\n        if boys - girls == 20:\n            return total_students\n\nans = solution()"
    ],
    "963c4317b46e4ab89cf2305881120383": [
        "def solution():\n    ans = (25 / 100) * 20 + (1 / 5) * 30 + (2 / 3) * 18\n    return ans\n\nans = solution()"
    ],
    "c7fe09cca9884a74bd0f46ebfe209d6e": [
        "def solution():\n    for a in range(10):\n        num = 100000 + a * 10000 + 7731\n        if num % 11 == 0:\n            return a\n\nans = solution()"
    ],
    "1cdbbd42038c4d25a4e3858e94b44f02": [
        "def solution():\n    total_votes = 140\n    alice_votes = 31\n    betty_votes = 41\n    cindy_votes = 47\n\n    # Cindy must have at least one more vote than the total votes of Alice and Betty combined\n    required_votes = alice_votes + betty_votes + 1\n\n    # Calculate the additional votes Cindy needs\n    additional_votes = required_votes - cindy_votes\n\n    return additional_votes\n\nans = solution()"
    ],
    "14374f60574642deb9cb3cb4947ba4d5": [
        "from fractions import Fraction\n\ndef solution():\n    first_expression = 7 / Fraction(-10, 3) / ((-27 / 1000) ** (1 / 3))\n    second_expression = (2 ** 3 / 4 ** 2) / (0.125 * (1.8 - (0.2 * 7)))\n    repeating_decimal = Fraction(1, 999) / Fraction(1, 7)\n    third_expression = (0.1 / repeating_decimal) + (2 * 0.3)\n\n    ans = first_expression + second_expression - third_expression\n    return float(ans)\n\nans = solution()"
    ],
    "0f27bf9162ed4fbba2f119e08ed1cf48": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    chelsia, brian = symbols('chelsia brian')\n\n    equation1 = Eq(3/4 * chelsia, 5/6 * brian)\n    equation2 = Eq(chelsia - brian, 24)\n\n    solutions = solve((equation1, equation2), (chelsia, brian))\n\n    total = solutions[chelsia] + solutions[brian]\n\n    return total\n\nans = solution()"
    ],
    "477f4016e7a14d6cb1f6561d4b2f7cbc": [
        "def solution():\n    # Calculate the difference in years between the two dates given for Gina and James\n    years_diff = 2005 - 1997  # 8 years\n    \n    # Calculate Gina's age when James turned 20\n    gina_age_when_james_20 = 50 - years_diff  # Gina's age in 1997\n    \n    # Calculate how old Gina was when James was born\n    gina_age_when_james_born = gina_age_when_james_20 - 20\n    \n    return gina_age_when_james_born\n\nans = solution()"
    ],
    "9e011e38eb9e41da9b82d8e1b79479a9": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    sales = symbols('sales')\n\n    base_salary = 2500\n    salary = 3300\n    commission_cutoff = 25000\n    commission_rate_lower = 0.02\n    commission_rate_upper = 0.05\n\n    # Calculate the commission for sales up to and including the cutoff\n    commission_eq1 = commission_rate_lower * commission_cutoff\n\n    # Calculate the remaining salary that needs to be accounted for by sales over the cutoff\n    remaining_salary = salary - base_salary - commission_eq1\n\n    # Set up the equation for the sales over the cutoff\n    equation = Eq(commission_rate_upper * (sales - commission_cutoff), remaining_salary)\n\n    # Solve the equation\n    sales_for_july = solve(equation, sales)[0]\n\n    return sales_for_july\n\nans = solution()"
    ],
    "02c0f5596e944b52b450f57444a52432": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Let x be the initial number of marbles Ryan had\n    # Let y be the initial number of marbles Audrey had\n    x, y = symbols('x y')\n\n    # Initial ratio equation: 2/7 = x/y\n    initial_ratio = Eq(x/y, 2/7)\n\n    # After change ratio equation: 1/3 = (x + 20)/(y - 80)\n    changed_ratio = Eq((x + 20) / (y - 80), 1/3)\n    \n    # Solve the system of equations\n    solutions = solve((initial_ratio, changed_ratio), (x, y))\n\n    return solutions[y]\n\nans = solution()"
    ],
    "e491c5ac6e9343c7ba3274532283f9c9": [
        "def solution():\n    # Total height of six players is 6 * 150\n    total_height_six = 6 * 150\n    \n    # Average height of four players is 150 - 2\n    avg_height_four = 150 - 2\n    \n    # Total height of four players is 4 * (average height of four)\n    total_height_four = 4 * avg_height_four\n    \n    # Total height of the other two players is the difference\n    total_height_other_two = total_height_six - total_height_four\n    \n    # The average height of the other two players\n    avg_height_other_two = total_height_other_two / 2\n    \n    return avg_height_other_two\n\nans = solution()"
    ],
    "bfde156ecaa4455aabd96e9c177c7723": [
        "def solution():\n    # Probability of passing on the first attempt\n    p_first = 0.4\n\n    # Probability of failing the first and passing the second attempt\n    p_second = (1 - p_first) * 0.5\n\n    # Probability of failing the first two and passing the third attempt\n    p_third = (1 - p_first) * (1 - 0.5) * 0.3\n\n    # Total probability of passing before the fourth attempt\n    ans = p_first + p_second + p_third\n    return ans\n\nans = solution()"
    ],
    "e928057276ba4f80816203d0efad0161": [
        "def solution():\n    total_digits = 1014\n    digits = 0\n    page_number = 0\n\n    while digits < total_digits:\n        page_number += 1\n        digits += len(str(page_number))\n    \n    return page_number\n\nans = solution()"
    ],
    "4e41a656965248ecb27c18b15b949af4": [
        "def solution():\n    num_fruits = 3\n    num_vegetables = 4\n\n    combinations = num_fruits * num_vegetables\n\n    return combinations\n\nans = solution()"
    ],
    "601f7cda15454bc985fa1ee54ba442cd": [
        "def solution():\n    ways_A_to_B = 2\n    ways_B_to_C = 3\n    total_ways = ways_A_to_B * ways_B_to_C\n    return total_ways\n\nans = solution()"
    ],
    "25f54cb721264bd5a88945dcae9a35da": [
        "def solution():\n    first_term = 50\n    difference = -1\n    num_terms = 30\n\n    # Using Arithmetic Series sum formula: S_n = n/2 * (a_1 + a_n)\n    last_term = first_term + (num_terms - 1) * difference\n    sum_of_terms = num_terms / 2 * (first_term + last_term)\n\n    return int(sum_of_terms)\n\nans = solution()"
    ],
    "9dd71278e1224d6aae7ee3729d3d4491": [
        "def solution():\n    total_pieces = 450\n    pieces_per_hour = 50\n\n    hours_needed = total_pieces / pieces_per_hour\n\n    return hours_needed\n\nans = solution()"
    ],
    "9f1e95f7b0c743fc8509bf8504dcf8e6": [
        "def solution():\n    n = 15\n    count_2 = 0\n    count_5 = 0\n    for i in range(2, n+1):\n        while i % 2 == 0:\n            count_2 += 1\n            i = i // 2\n        while i % 5 == 0:\n            count_5 += 1\n            i = i // 5\n    ans = min(count_2, count_5)\n    return ans\n\nans = solution()"
    ],
    "7dfcb604b94540d68268987c685cf44e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    age = symbols('age')\n    equation = Eq((age / 4) + 32, age - 22)\n\n    grandpa_age = solve(equation, age)\n\n    return grandpa_age[0]\n\nans = solution()"
    ],
    "949b4d4e3965458786c3c12e4175a6f5": [
        "def solution():\n    # Total height of the burrow\n    total_height = 18\n    # Distance climbed each day\n    climb_up = 7\n    # Distance climbed on the 6th day\n    climb_up_on_sixth = 3\n    # Calculate the height climbed by the end of the 5th day\n    height_after_fifth_day = climb_up * 5\n    \n    # Since on the 6th day the snail is out, the total height climbed must be at least 18 meters\n    # We need to find the slide down value when the height after the 5th day plus the 6th day's climb minus the slide down equals 18 meters\n    slide_down = height_after_fifth_day + climb_up_on_sixth - total_height\n\n    return slide_down\n\nans = solution()"
    ],
    "0d196763e09c414685c93b6925e1fabd": [
        "def solution():\n    # The fastest one (Eddie) always rows the boat back.\n    # Step 1: Eddie and Jack go -> 2 minutes\n    # Step 2: Eddie goes back -> 1 minute, Total = 3 minutes\n    # Step 3: Rose and Mary go -> 10 minutes, Total = 13 minutes\n    # Step 4: Jack goes back -> 2 minutes, Total = 15 minutes\n    # Step 5: Eddie and Jack go -> 2 minutes, Total = 17 minutes\n    return 17\n\nans = solution()"
    ],
    "1c335261c4c74c9da70e62d9e80c84f7": [
        "def solution():\n    total_students = 0\n    boys_more_than_girls = 44\n\n    # Start with an initial assumption about the size of the square\n    # Iterate to find the exact size that fits the condition\n    for i in range(1, 1000):\n        # Total students = (2i - 1)^2 is the formula for the total number of students\n        # in a square with alternating boys and girls by layer\n        total_students = (2 * i - 1) ** 2\n        boys = (i ** 2) + ((i - 1) ** 2)  # Boys occupy two square layers (outer and alternate)\n        girls = total_students - boys  # Remaining students are girls\n        \n        if boys - girls == boys_more_than_girls:\n            break  # Exit the loop if the correct difference is found\n\n    return total_students\n\nans = solution()"
    ],
    "70a8c903a8c54590bc01cc6b20324389": [
        "def solution():\n    # Let the original length be L and the width be W.\n    # If you increase the length by 12, the new length will be L + 12.\n    # The perimeter of the new rectangle is 38, which means:\n    # 2 * (L + 12) + 2 * W = 38\n\n    # The perimeter of the original rectangle is:\n    # 2 * L + 2 * W\n\n    # We know that the perimeter of the new rectangle minus the change in length is equal to the perimeter of the original rectangle.\n    # So we have: 38 - 2 * 12 = 2 * L + 2 * W\n\n    original_perimeter = 38 - 2 * 12\n    return original_perimeter\n\nans = solution()"
    ],
    "170205b36dfc4146a66fb3af25081782": [
        "def solution():\n    # Total number of apples\n    total_apples = 48\n    \n    # Initialize the maximum number of apples that the second student can get\n    max_apples_second_student = 0\n    \n    # The four students are labeled from A to D for convenience\n    # Loop over the possible number of apples for student A\n    for A in range(1, total_apples - 3):  # A needs at least 1 apple, and leave 3 apples for B, C, and D\n        # Loop over the possible number of apples for student B\n        for B in range(A + 1, total_apples - 2 - A):  # B gets more than A, leave 2 apples for C and D\n            # The minimum number of apples student C can get (one more than B)\n            C = B + 1\n            \n            # The number of apples student D can get (remaining apples)\n            D = total_apples - (A + B + C)\n            \n            # If D still gets more apples than C (condition for all students to get a different number of apples)\n            if D > C:\n                # Update the maximum number of apples the second student (labeled B) can get\n                max_apples_second_student = max(max_apples_second_student, B)\n                \n            # Once D <= C, no need to continue the inner loop as it violates the conditions\n            else:\n                break\n\n    return max_apples_second_student\n\nans = solution()"
    ],
    "e0acffb17f4e422ab27995621048da00": [
        "def solution():\n    return 641 + 283\n\nans = solution()"
    ],
    "a395940e0e844a3e82a13464bbacb552": [
        "def solution():\n    ans = 0\n    for i in range(1, 90, 2):\n        ans += i ** 2 - (i + 1) ** 2\n    return ans\n\nans = solution()"
    ],
    "f059162501fb4a40bea57cfdd90f953a": [
        "def solution():\n    number = 2**19 - 1\n    remainder = number % 5\n    return remainder\n\nans = solution()"
    ],
    "0a442caa186a4d35a9cda613970fe659": [
        "def solution():\n    for num in range(30, 41):\n        if num % 3 == 1 and num % 4 == 1:\n            return num\n\nans = solution()"
    ],
    "cc80ec556420466ca6feeb07d774bc7f": [
        "def solution():\n    from math import factorial\n\n    number_of_students = 4\n    number_of_ways = factorial(number_of_students)\n    \n    return number_of_ways\n\nans = solution()"
    ],
    "20d9cd46576c4f6b873a928db5bdaa21": [
        "def solution():\n    # Let C represent chocolate, P represent peaches, and S represent strawberries\n\n    # Starting with chocolate on the first day, we have two choices for the second day (P or S)\n    # And for each choice on the second day, we have one choice left for the third day\n    # So the total ways are the product of the choices for each day\n\n    first_day = ['C']  # Only chocolate on the first day\n    second_day_choices = 2  # P or S\n    third_day_choices = 1  # The one that was not eaten on second day\n\n    # Calculate the total ways\n    total_ways = len(first_day) * second_day_choices * third_day_choices\n\n    return total_ways\n\nans = solution()"
    ],
    "e247134ebc8e4290ab2c3cd47fbdb2bb": [
        "def solution():\n    from fractions import Fraction\n\n    remaining_after_tv = 1 - Fraction(5, 9)\n    remaining_after_table = remaining_after_tv * (1 - Fraction(3, 4))\n    final_remaining = 160\n\n    total_salary = final_remaining / remaining_after_table\n    tv_cost = total_salary * Fraction(5, 9)\n\n    return float(tv_cost)\n\nans = solution()"
    ],
    "31bc73a765324ee2aad5b0ab3902429e": [
        "import math\n\ndef solution():\n    # One seat is always empty, so we fix the position of one person (to avoid counting rotations as different)\n    # and arrange the remaining 6 people around the table.\n    return math.factorial(6) \n\nans = solution()"
    ],
    "9aeb348fb18f40a0a779246f193ec03e": [
        "def solution():\n    result = 50 / (5 / 3)\n    return result\n\nans = solution()"
    ],
    "91f9ed36f52f4c4d90e9a09c340e6eda": [
        "def solution():\n    # Initialize a variable to track the number of ways to write 8 as a sum of two positive numbers\n    count = 0\n\n    # Loop through all positive numbers less than 8 (since the smallest number we can add to get 8 is 1)\n    for i in range(1, 8):\n        # For each number 'i', there is a unique complement '8-i' that adds up to 8\n        # Since order does not matter in this case (1+7 is the same as 7+1), we only need to count each pair once\n        # Thus, we have only one unique way to write 8 as the sum of 'i' and '8-i'\n        count += 1\n\n    # Return the count as the number of different ways to write 8 as the sum of two positive numbers\n    return count\n\nans = solution()"
    ],
    "870fd125d6e84d51833e19966e6235aa": [
        "def solution():\n    average_daily_earnings = 70\n    days_worked = 6\n\n    total_earnings = average_daily_earnings * days_worked\n\n    return total_earnings\n\nans = solution()"
    ],
    "cdebf51b4d2f4676b84de41b5f4dfe1d": [
        "def solution():\n    from math import comb\n\n    num_points = 15\n    num_vertices = 3\n\n    ans = comb(num_points, num_vertices)\n    return ans\n\nans = solution()"
    ],
    "ce3ae2eb22604f669d81413a11524dfe": [
        "def solution():\n    sheets_per_quire = 24\n    quires_per_ream = 20\n    reams = 2\n\n    sheets_per_ream = sheets_per_quire * quires_per_ream\n    total_sheets = sheets_per_ream * reams\n\n    return total_sheets\n\nans = solution()"
    ],
    "d7af08f16a30475cbed750f87127cc91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    john_age, emma_age = symbols('john_age emma_age')\n    \n    # In 3 years, John's age will be \"john_age + 3\" and Emma's age will be \"emma_age + 3\"\n    # Their sum will be 27\n    future_sum = Eq(john_age + 3 + emma_age + 3, 27)\n    \n    # Emma's current age is the difference between John's age and her own: emma_age = john_age - emma_age\n    # This can be rearranged to: emma_age = john_age/2\n    emma_age_relation = Eq(emma_age, john_age / 2)\n    \n    # Now solve the system of equations\n    solutions = solve((future_sum, emma_age_relation), (john_age, emma_age))\n    \n    return solutions[emma_age]\n\nans = solution()"
    ],
    "209df8fae20d4538a1d8ebbf630188c1": [
        "def solution():\n    children = symbols('children')\n    # Since each dog has 4 legs and each child has 2 legs,\n    # the total number of legs is 4 * (3 * children) + 2 * children.\n    equation = Eq(4 * (3 * children) + 2 * children, 56)\n    # Solve the equation to find the number of children.\n    solutions = solve(equation, children)\n    return solutions[0]\n\nans = solution()"
    ],
    "7df5d75f0cda456abe35ca8b128ad0bc": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(5*x - 4, 26)\n    \n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "d052b96519684cd689b26d905e6932f3": [
        "def solution():\n    # Tom's speed is 48 km/h\n    tom_speed = 48\n    # Jack's speed is 50 km/h\n    jack_speed = 50\n    # Jack starts 3 hours later than Tom\n    jack_delay = 3\n    # After another 5 hours, they are 15 km apart\n    time_together = 5\n    # Distance apart after Jack has been driving for 5 hours\n    distance_apart = 15\n\n    # Calculate the distance Tom has covered by the time Jack starts driving\n    tom_distance_before_jack_starts = tom_speed * jack_delay\n\n    # Calculate the total distance Tom drives in 5 hours after Jack has started driving\n    tom_distance_after_jack_starts = tom_speed * time_together\n\n    # Calculate the total distance Jack drives in those 5 hours\n    jack_distance = jack_speed * time_together\n\n    # Using the fact that they are 15 km apart after 5 hours,\n    # the total distance is the distance Tom drove before Jack started\n    # plus what both drove after Jack started minus the 15 km between them\n    total_distance = tom_distance_before_jack_starts + tom_distance_after_jack_starts + jack_distance - distance_apart\n\n    return total_distance\n\nans = solution()"
    ],
    "85433448087948ff8792d3be336da4ba": [
        "def solution():\n    present_fraction = 1 - 2/5\n    number_present = 18\n\n    total_students = number_present / present_fraction\n\n    return int(total_students)\n\nans = solution()"
    ],
    "48f752c3fb124d0eaef83bcc708662cc": [
        "def solution():\n    ans = (10**5) / (5**5)\n    return ans\n\nans = solution()"
    ],
    "11d9dfcd97f84a2b98dac9636f2ac079": [
        "def solution():\n    Z = (4 + 5)\n    return Z\n\nans = solution()"
    ],
    "6bfc77576d4c4d8e990e203ed5df4a98": [
        "def solution():\n    ans = 5.2 + 6.7 + 4.8  # Rearrange the numbers for quick addition\n    return ans\n\nans = solution()"
    ],
    "1e0626005a234d7b9e16d436c68f0a46": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    saturday_cookies, sunday_cookies = symbols('saturday_cookies sunday_cookies')\n    \n    equation1 = Eq(saturday_cookies, 4 * sunday_cookies - 5)\n    equation2 = Eq(saturday_cookies, sunday_cookies + 43)\n\n    solutions = solve((equation1, equation2), (saturday_cookies, sunday_cookies))\n\n    return solutions[saturday_cookies]\n\nans = solution()"
    ],
    "71a881110b784d499125ce0c2aeceff4": [
        "def solution():\n    height_meters = 1.36\n    height_centimeters = height_meters * 100\n    return height_centimeters\n\nans = solution()"
    ],
    "9838ab9595bb4b7698360b2187706163": [
        "def solution():\n    length = 50\n    width = 30\n    spacing = 2\n\n    # Calculate the number of trees on each side. Note we subtract one at each corner to avoid double counting.\n    length_trees = (length // spacing) - 1\n    width_trees = (width // spacing) - 1\n\n    # Calculate the total number of trees.\n    total_trees = 2 * (length_trees + width_trees) + 4  # Add back the 4 corner trees\n\n    return total_trees\n\nans = solution()"
    ],
    "f22a2d40173242e9be3791a584a6bb8a": [
        "def solution():\n    initial_income = 500\n    tax_rate = 0.03   # 3% tax rate as a decimal\n    tax_paid = initial_income * tax_rate\n    final_income = initial_income - tax_paid\n    return final_income\n\nans = solution()"
    ],
    "0dd96e7150034b49b6e5114888b623ed": [
        "def solution():\n    total_sweets = 15\n    people = 3\n    sweets_per_person = total_sweets // people\n    return sweets_per_person\n\nans = solution()"
    ],
    "adc18060457c42cd841d26c05a300d86": [
        "def solution():\n    # One quarter chose tea, so the angle for tea would be (1/4) * 360° = 90°\n    tea_angle = 90\n\n    # 30% chose cola, so the angle for cola would be 0.30 * 360° = 108°\n    cola_angle = 108\n\n    # Seven people chose coffee, but we don't know the angle yet.\n    # The rest chose water, and we know the angle is 36° for water.\n    water_angle = 36\n\n    # Sum of all angles in a pie chart is 360°.\n    # We can use the total angle to find out the angle for coffee.\n    coffee_angle = 360 - (tea_angle + cola_angle + water_angle)\n\n    # Since the coffee angle corresponds to 7 people, we can calculate the number of people per degree.\n    people_per_degree = 7 / coffee_angle\n\n    # To find the total number of people, we multiply people per degree by the total angle of the circle (360°).\n    total_people = people_per_degree * 360\n\n    return int(total_people)\n\nans = solution()"
    ],
    "dc011b9713364f7faace482d69733c6e": [
        "def solution():\n    price_adult = 20\n    price_child = 15\n    total_price = 110\n    children_count = 0\n\n    for adults in range(2, total_price // price_adult + 1):\n        children = (total_price - (adults * price_adult)) / price_child\n        if children.is_integer():\n            children_count = children\n            break\n\n    return int(children_count)\n\nans = solution()"
    ],
    "285cd6c94bbe4f0097e4b2365352fffc": [
        "def solution():\n    for i in range(1, 10**8):\n        if int(str(9) + str(i)[:-1]) == 4 * i:\n            return i\n\nans = solution()"
    ],
    "79f81b8195b2409d9329430d172825a5": [
        "def solution():\n    result = (180 / (0.6 * 100))\n    return result\n\nans = solution()"
    ],
    "5387ecceeb914413b67de510e2841de5": [
        "def solution():\n    base = 221\n    exponent = 2020\n    modulus = 7\n\n    remainder = pow(base, exponent, modulus)\n\n    return remainder\n\nans = solution()"
    ],
    "7a18842efc724f239e5f1cad37485c40": [
        "def solution():\n    # Total amount of the drink when 750ml squash is mixed with water\n    squash_amount = 750\n    water_amount = squash_amount * 9   # Ratio of water to squash is 9:1\n    total_amount = squash_amount + water_amount\n    \n    # Bottle capacity in milliliters\n    bottle_capacity_ml = 1000\n\n    # Calculating the greatest number of 1 litre bottles that can be completely filled\n    num_bottles = total_amount // bottle_capacity_ml\n\n    return int(num_bottles)\n\nans = solution()"
    ],
    "526ef305508f433093616886e3aa2760": [
        "def solution():\n    last_two_digits_of_powers = pow(6, 2015, 100)\n    last_two_digits_of_product = (2015 * 6) % 100\n    last_two_digits_of_2015_power = pow(2015, 6, 100)\n\n    ans = (last_two_digits_of_powers + last_two_digits_of_product + last_two_digits_of_2015_power) % 100\n    \n    return ans\n\nans = solution()"
    ],
    "dfcff5e4c31f43209c5c33c350232425": [
        "def solution():\n    ans = 736 + 4588\n    return ans\n\nans = solution()"
    ],
    "6e22fcfa859a4c8fbb3d505818fcf090": [
        "def solution():\n    for num_cookies in range(1, 90):\n        if num_cookies % 6 == 4 and (num_cookies + 5) % 7 == 0:\n            return num_cookies\n\nans = solution()"
    ],
    "70e0934ac8904f528788ed9903ea3d65": [
        "def solution():\n    # Calculate the cost of the book\n    # book = 1/3 of initial_money\n    # bag = 1/2 of (2/3 of initial_money) = 1/3 of initial_money\n    # book + bag = 132\n    # (1/3 of initial_money) + (1/3 of initial_money) = 132\n    # 2/3 * initial_money = 132\n\n    # Find the initial amount of money before spending\n    initial_money = 132 / (2/3)\n\n    return initial_money\n\nans = solution()"
    ],
    "997806d0555f4e0b9f0c37e93f8a847d": [
        "def solution():\n    return 8234 - 909\n\nans = solution()"
    ],
    "629aa303c06d45f7aa5cf8fa6f9fed98": [
        "def solution():\n    for A in range(10):\n        for C in range(10):\n            for E in range(10):\n                for F in range(10):\n                    # Since each letter represents a distinct digit, we ignore the cases where any two of these are equal.\n                    # B=2 and D=0 are already given, so we avoid these values.\n                    if len(set([A, 2, 0, C, E, F])) == 6 and A != 2 and C != 2 and E != 2 and F != 2 and A != 0 and C != 0 and E != 0 and F != 0:\n                        ABCDEF = A * 10**5 + 2 * 10**4 + 0 * 10**3 + C * 10**2 + E * 10 + F\n                        EFABCD = E * 10**5 + F * 10**4 + A * 10**3 + 2 * 10**2 + 0 * 10 + C\n                        if 5 * ABCDEF == 6 * EFABCD:\n                            return 1000 * F + 100 * A + 10 * C + E\n\nans = solution()"
    ],
    "cdd44981698d4cf1892f1b87d1ff7e7e": [
        "def solution():\n    tens = 10 * 10\n    tenths = 35 * 0.1\n    hundredths = 8 * 0.01\n\n    ans = tens + tenths + hundredths\n    return ans\n\nans = solution()"
    ],
    "a977a5a877be459285ad29a00ee13491": [
        "def solution():\n    # Since the number has 8 factors and we know the first 5, we need to find out the remaining 3.\n    # Since the known factors are 1, 2, 4, 7, 8, let's find the number that has these as factors and\n    # which would have a total of 8 factors.\n\n    # The unknown factors must be multiples of the known prime factors (2 and 7).\n    # Hence, they must be a factor formed by 2 and 7, and/or the number itself.\n\n    # Let's find the number by multiplyng the highest known prime factor 7 with the greatest known factor of 2, which is 8.\n    number = 7 * 8\n\n    # Now we know the number is 56. We need to check if it has exactly 8 factors.\n    # If 56 has 8 factors, then our required number is 56.\n    factors = [i for i in range(1, number + 1) if number % i == 0]\n\n    if len(factors) == 8:\n        ans = number\n    else:\n        ans = None\n\n    return ans\n\nans = solution()"
    ],
    "06a399e8df5e48ef97ce40b3d0ef5589": [
        "def solution():\n    original_price = 10\n    discount_rate = 0.10\n    discounted_price = original_price * (1 - discount_rate)\n    return discounted_price\n\nans = solution()"
    ],
    "2b33ed6a37234a7f8cfa9077a2c039ba": [
        "def solution():\n    # Calculate the number of cookies sold in the second month\n    second_month_cookies_sold = 1680 * (1 + 7/20)\n\n    # Calculate the number of cookies kept in the second month\n    second_month_cookies_kept = 1680 - 1680 * (3/20)\n\n    # Calculate the total number of cookies in the box\n    total_cookies_in_box = second_month_cookies_sold + second_month_cookies_kept\n\n    return total_cookies_in_box\n\nans = solution()"
    ],
    "f7fe017b34bc4119bfc266aeef3024e6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    total_animals, goats = symbols('total_animals goats')\n    \n    # 65% are cows, so 35% are goats\n    original_goats_fraction = 0.35\n    \n    # The farm is updated: 65% + 20% cows; goats are doubled\n    updated_cows_fraction = 0.65 + 0.20\n\n    # Equations based on the problem:\n    # 0.35 * total_animals = goats\n    # (0.35 * total_animals + 240) * updated_cows_fraction + 2 * goats = total_animals + 240\n    equation1 = Eq(goats, original_goats_fraction * total_animals)\n    equation2 = Eq((original_goats_fraction * total_animals + 240) * updated_cows_fraction + 2 * goats, total_animals + 240)\n    \n    solutions = solve((equation1, equation2), (total_animals, goats))\n\n    return solutions[goats]\n\nans = solution()"
    ],
    "48809ae2c3da43959ae3c238acb60f7f": [
        "def solution():\n    return 78.2 - 31.45 + 5.24 - 2.3\n\nans = solution()"
    ],
    "b76888b795364a3a97fa604d5a2de050": [
        "def solution():\n    # Jolene is 6th from the front\n    jolene_position_from_front = 6\n    \n    # Amy is 8th from the back\n    amy_position_from_back = 8\n    \n    # Since Amy is directly behind Jolene, their positions overlap with Amy being one position behind Jolene\n    # Therefore, we find the total number by summing Jolene's front position and Amy's back position and subtract 1\n    total_children = jolene_position_from_front + amy_position_from_back - 1\n    \n    return total_children\n\nans = solution()"
    ],
    "0b49d7a40bee40d08e1b699772470e6f": [
        "def solution():\n    total_height = 40\n    jump_up = 5\n    slide_down = 3\n    jumps_per_period = 2\n    \n    # After every two jumps, the monkey effectively climbs (5*2 - 3) meters.\n    effective_climb = (jump_up * jumps_per_period) - slide_down\n    \n    # Calculate the number of full periods (2 jumps) the monkey can perform before reaching or surpassing the height.\n    periods_before_last_jump = (total_height - jump_up) // effective_climb\n\n    # Calculate the height the monkey has climbed after these periods.\n    height_after_periods = periods_before_last_jump * effective_climb\n\n    # Calculate the number of remaining jumps to reach the top.\n    remaining_height = total_height - height_after_periods\n    if remaining_height > 0:\n        remaining_jumps = (remaining_height + jump_up - 1) // jump_up \n    else:\n        remaining_jumps = 0\n\n    # Total jumps includes the jumps in full periods and the remaining jumps.\n    total_jumps = (periods_before_last_jump * jumps_per_period) + remaining_jumps\n\n    return total_jumps\n\nans = solution()"
    ],
    "d8a87667da5c4baebedd2e3f7026d5e2": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(1, 5), (2, 6), (9, 11)]\n    num, _ = solve_congruence(*congruences)\n    return num\n\nans = solution()"
    ],
    "d9935bb2a60f4b2a850a8a82e921285b": [
        "def solution():\n    return 253 * 160\n\nans = solution()"
    ],
    "22fbfe3347ba45c18a5ef712714e7ba8": [
        "def solution():\n    stamp_cost_pence = 46\n    pounds_to_pence = 300\n    num_stamps = pounds_to_pence // stamp_cost_pence\n\n    return num_stamps\n\nans = solution()"
    ],
    "5a602b75179642109bb3448633b148be": [
        "def solution():\n    perimeter = 432 * 5  # Regular pentagon has equal side lengths\n    sunflower_spacing = 4\n    # The number of sunflowers is the number of intervals plus 1 (for the starting point)\n    num_sunflowers = (perimeter // sunflower_spacing) + 1\n    return num_sunflowers\n\nans = solution()"
    ],
    "0c9feee3629744129e6cf814a2834df3": [
        "def solution():\n    return 58 * 36\n\nans = solution()"
    ],
    "68fd1201ef784aef8db355b79934af59": [
        "def solution():\n    from math import factorial\n    ans = factorial(100) // factorial(98)\n    return ans\n\nans = solution()"
    ],
    "abaffb07b2a34ab0ae3decd35f783b15": [
        "def solution():\n    for digit in range(10):\n        if (9 + 7 + 6 + digit + 3) % 3 == 0:\n            return digit\n\nans = solution()"
    ],
    "225309bd862241c69715705eee0b6ecb": [
        "def solution():\n    # Let's denote x as the time Ryan drives at his usual speed\n    # If he was driving at 45 miles/hour, he would reach the destination in x hours\n    # But due to traffic, he's driving at 30 miles/hour, and it takes him x + 2 hours\n    \n    # Since the distance is the same in both cases, we can create an equation based on distance:\n    # distance = speed at normal condition * time at normal condition\n    # distance = speed in traffic * time in traffic\n    # 45 * x = 30 * (x + 2)\n    \n    # We can solve for x to find out the usual driving time.\n    # 45x = 30x + 60\n    # 15x = 60\n    # x = 60 / 15\n    x = 60 / 15\n    \n    return x\n\nans = solution()"
    ],
    "d5ed58dcfd4f432cbd326fe91855c743": [
        "def solution():\n    # Calculate the sum of the sequence from 3 to 10\n    sum_up = sum(range(3, 11))\n    # Calculate the sum of the sequence from 3 to 6\n    sum_down = sum(range(3, 7))\n    # Since 6 is counted twice, subtract 6 once\n    ans = (sum_up + sum_down) - 6\n    return ans\n\nans = solution()"
    ],
    "c710249ff4704f1da8138f0e161fa751": [
        "def solution():\n    # Total number of adventurers\n    total_adventurers = 39\n    # Maximum number that the boat can take at a time\n    boat_capacity = 7\n    # Time taken for one trip across the river in minutes\n    trip_time = 2\n    \n    # Calculate the number of full trips needed (one way)\n    full_trips = total_adventurers // boat_capacity\n    \n    # Calculate the number of people remaining for a possibly partial last trip\n    remaining_people = total_adventurers % boat_capacity\n    \n    # If there are no remaining people, subtract one trip because the last trip doesn't require a return\n    if remaining_people == 0:\n        total_trips = (full_trips * 2) - 1\n    else:\n        # If there are remaining people, all trips are needed including the last partial trip\n        total_trips = (full_trips * 2) + 1\n    \n    # Calculate the total time taken for all trips\n    total_time = total_trips * trip_time\n    \n    return total_time\n\nans = solution()"
    ],
    "17a4a261e09e46b188ed0705441570df": [
        "def solution():\n    a, b = 3, 10\n    for _ in range(1997 - 2):\n        a, b = b, a + b\n        a, b = a % 3, b % 3  # only remainders are important\n    \n    return b % 3\n\nans = solution()"
    ],
    "8080bf206efd47819bdd2a2adb6b5fd5": [
        "def solution():\n    def count_partitions(n, max_value):\n        if n == 0:\n            return 1\n        if max_value == 0 or n < 0:\n            return 0\n        return count_partitions(n, max_value - 1) + count_partitions(n - max_value, max_value)\n    \n    return count_partitions(5, 5) - 1  # Subtract 1 to exclude the number itself\n\nans = solution()"
    ],
    "ae54342caaed4120ac02a509fa3bcd4b": [
        "def solution():\n    numerator = (4.219**2) / (14/3 + 38/59)\n    denominator = 2.501**3\n    ans = round(numerator / denominator, 3)\n    return ans\n\nans = solution()"
    ],
    "e69cb84fa1d949ac908e9ed3436bc342": [
        "def solution():\n    amin_cookies = 329\n    jessica_cookies = amin_cookies + 97\n    mary_cookies = jessica_cookies - 58\n    return mary_cookies\n\nans = solution()"
    ],
    "22e39fcf09374deb821fcf3cbc39e4ff": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    white_shirts, blue_shirts = symbols('white_shirts blue_shirts')\n\n    equation1 = Eq(white_shirts, 6 * blue_shirts)\n    equation2 = Eq(white_shirts + blue_shirts, 63)\n\n    solutions = solve((equation1, equation2), (white_shirts, blue_shirts))\n\n    return solutions[white_shirts]\n\nans = solution()"
    ],
    "f96fd22abee24d948addde2c9760bc8c": [
        "def solution():\n    # Let x be the number of students\n    # Let y be the total number of sweets\n    # We have two equations based on the problem\n    # y = 6*x - 26 (1) if Mr.Lim gives 6 sweets per student, he is short of 26 sweets\n    # y = 5*x - 5 (2) if he gives 5 sweets per student, he is short of 5 sweets\n    \n    # So, we can equate the two equations: 6*x - 26 = 5*x - 5\n    # Hence we get x - 21 = 0 thus x = 21\n    \n    # Now we calculate the number of sweets (y) using either equation (1) or (2)\n    \n    # We'll use equation (1)\n    # y = 6*x - 26\n    x = 21\n    y = 6*x - 26\n    \n    # Return the total number of sweets\n    return y\n\nans = solution()"
    ],
    "3334f8ae569c45baaf836319780cb315": [
        "def solution():\n    # The difference between the numbers of each neighboring tree is 1.\n    # If we consider the smallest number of fruits on a tree to be x,\n    # then the fruits on the trees can be represented as:\n    # x, x+1, x+2, x+3, x+4, x+5, x+6, x+7.\n    # The sum of these numbers can be found as:\n    # sum = x + (x+1) + (x+2) + (x+3) + (x+4) + (x+5) + (x+6) + (x+7)\n    # sum = 8x + (1+2+3+4+5+6+7)\n    # sum = 8x + 28\n    # We know that the total sum is 225, thus we have:\n    # 8x + 28 = 225\n    # We can then find x:\n    total_sum = 225\n    constant_sum = 28\n    # Check if the remaining sum after subtracting the constant sum is divisible by 8\n    if (total_sum - constant_sum) % 8 == 0:\n        x = (total_sum - constant_sum) // 8\n        # The x is the number of fruits on the first tree\n        # The equations for each tree can then be found as:\n        return f\"x+({x+1})+({x+2})+({x+3})+({x+4})+({x+5})+({x+6})+({x+7}) = 225\"\n    else:\n        # If the sum minus the constant is not divisible by 8\n        # then it's not possible to divide the fruits such that\n        # they are consecutive and their sum is 225\n        return \"It is not possible.\"\n\nans = solution()"
    ],
    "f9cc7112db0e48c1af2b41cc821ce516": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    leo_age, son_age = symbols('leo_age son_age')\n\n    # Leo says to his son: \"When I was your age, you were 4 years old.\"\n    # This means the difference in their ages is the son's age when Leo was that age, minus 4.\n    equation1 = Eq(leo_age - son_age, son_age - 4)\n\n    # His son replies: \"When I reach your age, you will be 70 years old.\"\n    # This means the same age difference is 70 minus Leo's current age.\n    equation2 = Eq(leo_age - son_age, 70 - leo_age)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (leo_age, son_age))\n\n    return solutions[leo_age]\n\nans = solution()"
    ],
    "9676e5c5b2c94dcb884bf421cb85baac": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    blouse, dress = symbols('blouse dress')\n    \n    equation1 = Eq(blouse + dress, 41)\n    equation2 = Eq(4 * blouse + 3 * dress, 140)\n\n    solutions = solve((equation1, equation2), (blouse, dress))\n\n    return solutions[blouse]\n\nans = solution()"
    ],
    "c89438cf2e854b8b8d9e6b61f27fb988": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    years = symbols('years')\n\n    heidi_age = 8 + years\n    dad_age = 50 + years\n    equation = Eq(dad_age, 4 * heidi_age)\n\n    ans = solve(equation, years)\n\n    return ans[0]\n\nans = solution()"
    ],
    "e1a30b1c30584a4ea62ce04ddf2a119b": [
        "def solution():\n    words_per_minute = 48 / 6\n    words_in_9_minutes = words_per_minute * 9\n    return words_in_9_minutes\n\nans = solution()"
    ],
    "2ec36757265f4822937a114644d2af76": [
        "def solution():\n    ans = 554 + 479\n    return ans\n\nans = solution()"
    ],
    "85f65609913d484fa252445d1bb3a6eb": [
        "def solution():\n    n = 60\n    count = 0\n    \n    # Since trailing zeros are created by pairs of 5 and 2,\n    # and there are more 2s than 5s in the factorization, we only count 5s.\n    while n >= 5:\n        n //= 5\n        count += n\n\n    return count\n\nans = solution()"
    ],
    "062ee4a4b00f4be6ab03b9ae62d86a14": [
        "def solution():\n    result = (11 * 14 + 26) / 15\n    return result\n\nans = solution()"
    ],
    "ae68a40584044249b59fcd754b0a9ab9": [
        "def solution():\n    # Average of three numbers\n    average_three = 120\n    \n    # The sum of the three numbers\n    sum_three = 3 * average_three\n\n    # New average after adding the fourth number\n    new_average = 150\n\n    # The sum of the four numbers\n    sum_four = 4 * new_average\n\n    # The fourth number is the difference between the sum of four numbers and sum of three numbers\n    fourth_number = sum_four - sum_three\n\n    return fourth_number\n\nans = solution()"
    ],
    "d8532843d2c7486ea637674a0198cac2": [
        "def solution():\n    y = 4 * 10.5\n    return y\n\nans = solution()"
    ],
    "3d6aad1e230e440c976aa9835888e9af": [
        "from math import factorial\n\ndef solution():\n    # First, calculate the number of ways to arrange the 3 dancing performances.\n    # There must be at least one singing performance between each dance,\n    # so we treat each dancing performance as a group that needs to be separated.\n    # There are 4 singing performances, so there are 5 places to put dances (before, between, and after)\n    # D = dance, S = sing, the places are marked as P: S P S P S P S\n    \n    # We choose 3 places out of 5 to place the dances.\n    places_for_dances = factorial(5) // (factorial(3) * factorial(5 - 3))\n    \n    # Now, calculate the number of ways to arrange the singing performances in the remaining spots\n    # Since there are no restrictions, it's just the permutation of 4 singing performances.\n    arrangements_for_singing = factorial(4)\n    \n    # The total number of different ways is the product of the two results.\n    total_arrangements = places_for_dances * arrangements_for_singing\n\n    return total_arrangements\n\nans = solution()"
    ],
    "250bdd97084e4457a18b42026735d9a3": [
        "def solution():\n    from sympy import symbols, solve, sqrt\n\n    r = symbols('r')\n    equation = sqrt(216 * r)\n\n    # Find r such that 216r is a perfect square\n    possible_values_r = solve(equation**2 - (216 * r), r)\n\n    # We filter out the non-integer values (if any)\n    r_values = [val for val in possible_values_r if val.is_integer and val > 0]\n    return r_values[0] if r_values else None\n\nans = solution()"
    ],
    "27766b651a1f4d2aae49cf67f35c42d8": [
        "def solution():\n    return (3 / 13) * 52\n\nans = solution()"
    ],
    "971a39bdec6540cb9d485a6ec1047a5a": [
        "def solution():\n    original_price = 18.60\n    discount = 15 / 100\n    discounted_price = original_price * (1 - discount)\n    return discounted_price\n\nans = solution()"
    ],
    "f44b5a2d15354af582ad35749d438ad3": [
        "def solution():\n    return 20 + 519\n\nans = solution()"
    ],
    "f4c9a4282e1345c9bbca6c475b472737": [
        "def solution():\n    climb_per_day = 8\n    slide_per_night = 3\n    net_climb_per_full_day = climb_per_day - slide_per_night\n    total_days = 9\n    # Since on the 9th day the snail climbs out of the well\n    # we should consider 8 days of full net climbing and the last day of just climbing without sliding\n    depth = net_climb_per_full_day * (total_days - 1) + climb_per_day\n    return depth\n\nans = solution()"
    ],
    "75754b6444eb4ac999eea02d4c15c1ae": [
        "def solution():\n    return 285 // 3\n\nans = solution()"
    ],
    "3f9379f05667462b83ddc4ad0c015e2a": [
        "def solution():\n    quotient = 15\n    remainder = 6\n\n    # The dividend is the product of the quotient and the divisor + remainder\n    # To find the smallest possible dividend, we need the smallest possible divisor\n    # which is (remainder + 1) because if divisor <= remainder, remainder would not be possible\n    smallest_divisor = remainder + 1\n    smallest_dividend = quotient * smallest_divisor + remainder\n\n    return smallest_dividend\n\nans = solution()"
    ],
    "cb198c5105554691b5c2769bc9702902": [
        "def solution():\n    total_teachers = 100\n    french_teachers = 75\n    japanese_teachers = 45\n\n    # By inclusion-exclusion principle,\n    # Total = French + Japanese - Both\n    # We solve the equation for Both to find teachers who know both languages.\n    both_teachers = french_teachers + japanese_teachers - total_teachers\n\n    # Now we find teachers who know only French,\n    # which is total French teachers minus the ones that know both languages.\n    only_french_teachers = french_teachers - both_teachers\n\n    return only_french_teachers\n\nans = solution()"
    ],
    "a408d24a473b41c1b69fdd5572d7b292": [
        "def solution():\n    ans = 16.4 / 20\n    return ans\n\nans = solution()"
    ],
    "3299707a36e74108be6c90e585878b40": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bag_of_sweets, can_of_drink = symbols('bag_of_sweets can_of_drink')\n\n    equation1 = Eq(3 * bag_of_sweets + 5 * can_of_drink, 4.90)\n    equation2 = Eq(1 * bag_of_sweets + 3 * can_of_drink, 2.70)\n\n    solutions = solve((equation1, equation2), (bag_of_sweets, can_of_drink))\n\n    return solutions[bag_of_sweets]\n\nans = solution()"
    ],
    "09e133cd62e94b3a83040c4a18ba31d0": [
        "def solution():\n    from math import factorial\n\n    total_ways = factorial(6)         # Total ways six people can line up\n    teddy_leftmost_ways = factorial(5)  # Ways if Teddy is on the furthest left\n\n    # Subtract the invalid lineup from total\n    valid_ways = total_ways - teddy_leftmost_ways\n\n    return valid_ways\n\nans = solution()"
    ],
    "3121bf5cbc854fd786bb1b4d2885b8ee": [
        "def solution():\n    first_term = 50\n    common_difference = -4\n\n    # n: the number of terms before the first negative term\n    n = 0\n    term = first_term\n    while term > 0:\n        n += 1\n        term += common_difference\n    \n    return n\n\nans = solution()"
    ],
    "86c640d251b04743a791ed72e6ef1406": [
        "def solution():\n    return (4 / 9) * 963\n\nans = solution()"
    ],
    "12bb2874238a47da87ffaed7ea879f56": [
        "def solution():\n    count = 0\n    for number in range(10, 100):\n        if (number // 10 + number % 10) % 7 == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "0b8f50cdd3c44951b15c9241a332716f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    david, bentley, triston = symbols('david bentley triston')\n\n    equation1 = Eq(triston, 5 * bentley)\n    equation2 = Eq(david, 2 * bentley)\n    equation3 = Eq(david + bentley + triston, 408)\n\n    solutions = solve((equation1, equation2, equation3), (david, bentley, triston))\n\n    return solutions[triston]\n\nans = solution()"
    ],
    "e288e678bbb249bcaab6d53963001d88": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n\n    equation1 = Eq(x + y, 49)\n    equation2 = Eq(x - y, 9)\n\n    solutions = solve((equation1, equation2), (x, y))\n\n    return solutions[x]\n\nans = solution()"
    ],
    "0e485f9ad3f7447285e70845caf1d116": [
        "def solution():\n    total_sum = 280\n    # n is the number of terms, which is 7 in this case\n    n = 7\n    # The formula for the sum of n consecutive numbers where n is odd:\n    # total_sum = n * middle_number\n    # Therefore, the middle number is:\n    middle_number = total_sum // n\n    # The largest number is the middle number plus 3 times the common difference, which is 1\n    largest_number = middle_number + (n // 2)\n    return largest_number\n\nans = solution()"
    ],
    "4ebd96f87e564c70a9f67b3e4a10d85d": [
        "def solution():\n    # Using the difference of squares formula a^2 - b^2 = (a + b)(a - b)\n    # The pattern suggests: (1000 + 990)(1000 - 990) - (980 + 970)(980 - 970) + (20 + 10)(20 - 10)\n    ans = (1000 + 990) * (1000 - 990) + (980 + 970) * (980 - 970) + (20 + 10) * (20 - 10)\n    return ans\n\nans = solution()"
    ],
    "b654f11047ce401a8e2731b60cbe351b": [
        "def solution():\n    return sum(range(1, 10))\n\nans = solution()"
    ],
    "ae782a917c0e49dd8aa4c9143b7f6498": [
        "def solution():\n    total = 0\n    for i in range(2, 21, 2):\n        if i % 4 == 0:\n            total += i\n        else:\n            total -= i\n    return total\n\nans = solution()"
    ],
    "48223bc38999457a8ca5cb8944280073": [
        "def solution():\n    # Since we can recognize the series as (n+1)^3 - n^3,\n    # calculate each term using this pattern and then sum them up.\n    terms = [((n + 2)**3 - (n + 1)**3) for n in range(1, 10)]\n    ans = sum(terms)\n    return ans\n\nans = solution()"
    ],
    "5bad72a578f940cf8c6627f29fcbdfde": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    angel, yiyang, kayla = symbols('angel yiyang kayla')\n\n    equation1 = Eq(angel + yiyang, 92.20)\n    equation2 = Eq(angel + kayla, 28.20)\n    equation3 = Eq(yiyang, 5 * kayla)\n\n    solutions = solve((equation1, equation2, equation3), (angel, yiyang, kayla))\n\n    return solutions[angel]\n\nans = solution()"
    ],
    "d2cd4a56ec964afaadc7c52c40a6299e": [
        "def solution():\n    gcd = 75\n    max_sum = 0\n    # iterate through all possible 3-digit numbers that are multiples of 75\n    for A in range(100, 1000):\n        if A % gcd == 0:\n            # check if two digits are equal\n            a_str = str(A)\n            if (a_str[0] == a_str[1] or a_str[0] == a_str[2] or a_str[1] == a_str[2]):\n                # if so, iterate through all other possible 3-digit numbers\n                for B in range(A + 1, 1000):\n                    if B % gcd == 0:\n                        b_str = str(B)\n                        # check if B has two equal digits and is distinct from A\n                        if (b_str[0] == b_str[1] or b_str[0] == b_str[2] or b_str[1] == b_str[2]) and A != B:\n                            max_sum = max(max_sum, A + B)\n\n    return max_sum\n\nans = solution()"
    ],
    "e7473cbabe36456fb728cd45b22d0cc7": [
        "def solution():\n    throws = [5, 5, 3, 6, 2, 6, 1, 4]\n    position = 0\n    for i in range(len(throws)):\n        if throws[i] == 6:\n            continue\n        if i > 0 and throws[i - 1] == 6:\n            position -= throws[i]\n        else:\n            position += throws[i]\n    return position\n\nans = solution()"
    ],
    "dc0379c31de248fd8d41c231a4b7bbe8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    alex, brayden = symbols('alex brayden')\n\n    equation1 = Eq(alex + brayden, 756)\n    equation2 = Eq(alex - 65, 3 * (brayden + 65))\n\n    solutions = solve((equation1, equation2), (alex, brayden))\n\n    return solutions[brayden]\n\nans = solution()"
    ],
    "73662c89c90340368f0f31dbbb793bcb": [
        "from math import factorial\n\ndef solution():\n    # Since Tom wants to read at least 1 magazine between every 2 storybooks,\n    # we can initially place the storybooks as follows with slots for magazines between them: \n    # S _ S _ S _ S _ S, where S represents a storybook and _ represents slots for magazines.\n    # There are 6 slots for the 5 magazines as follows: _ S _ S _ S _ S _ S _\n    \n    # Now, we need to place 5 magazines in these 6 slots.\n    # The number of ways to do this is the number of combinations of choosing 5 slots from 6\n    magazine_ways = factorial(6) // (factorial(5) * factorial(6 - 5))\n\n    # Once the magazines are placed in the slots, we can arrange the storybooks among themselves and\n    # magazines among themselves in the following ways:\n    storybook_ways = factorial(5)\n    magazine_arrangement_ways = factorial(5)\n\n    # The total different ways Tom can arrange the books is then the product\n    # of these possibilities.\n    total_ways = magazine_ways * storybook_ways * magazine_arrangement_ways\n\n    return total_ways\n\nans = solution()"
    ],
    "26fc18a2aa384355aa0db444268680d3": [
        "def solution():\n    # Let x be the total number of fruit gums\n    # Since we are looking for the smallest number x must be divisible by 3 and 4\n    \n    x = 12  # Smallest number divisible by 3 and 4\n    \n    while True:\n        # Ate 2 fruit gums during Music lesson\n        remaining_after_music = x - 2\n        # Shared 1/3 of the remaining fruit gums with friends\n        remaining_after_break = (2 / 3) * remaining_after_music\n        # The remaining fruit gums must be divisible by 4 to eat equally in each lesson\n        if remaining_after_break % 4 == 0:\n            return x\n        x += 12  # Increment x by the LCM of 3 and 4 to satisfy the conditions again\n\nans = solution()"
    ],
    "e5cbd5d784b64b1e90f8c8affb745d94": [
        "def solution():\n    # Total amount of money Kate and James have together\n    total_money = 13 + 28\n    \n    # After sharing, both will have half of the total_money\n    shared_money = total_money / 2\n    \n    # The amount James gives to Kate is the difference between what he has and the shared_money\n    amount_given = 28 - shared_money\n    \n    return amount_given\n\nans = solution()"
    ],
    "d67cc9413a3540dda3185a84e88494ff": [
        "def solution():\n    return 17.1 / 10\n\nans = solution()"
    ],
    "d2d70b19b95d4c2980b65eaa5b33a64f": [
        "def solution():\n    # The sum of ten numbers with average of 10\n    total_sum = 10 * 10\n    \n    # The sum of the remaining 9 numbers with average of 9\n    remaining_sum = 9 * 9\n    \n    # The number removed is the difference between the total sum and the remaining sum\n    removed_number = total_sum - remaining_sum\n\n    return removed_number\n\nans = solution()"
    ],
    "0910afd7c9174c95a8df8508d6e7179e": [
        "def solution():\n    speed_kmh = 3.6\n    speed_mps = speed_kmh * (1000 / 3600)  # convert km/h to m/s\n    time_seconds = 300\n    distance_meters = speed_mps * time_seconds\n    return distance_meters\n\nans = solution()"
    ],
    "c4239409e9834407bcd7d853669b16fc": [
        "def solution():\n    return 25 * 4 * 13\n\nans = solution()"
    ],
    "7ed06d70e33c42a59176b296814f9641": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the original amount each brother received when including the sister.\n    x = symbols('x')\n    \n    # If the brothers alone had shared the money, then they would have received x + £20 each.\n    # Since there are three brothers, we can write the following equation:\n    # 3*(x + 20) = 4*x\n    # This represents the fact that the total sum of money is the same in both cases.\n    equation = Eq(3 * (x + 20), 4 * x)\n\n    # Solve for x\n    solution = solve(equation, x)\n\n    # Calculate the original sum of money (which is 4 * x because there are 4 siblings)\n    original_sum = 4 * solution[0]\n\n    return original_sum\n\nans = solution()"
    ],
    "54a4368e09b64fa4ae17d9fafb1cc1f0": [
        "def solution():\n    # For a number to be divisible by 99, it must be divisible by both 9 and 11.\n    # Divisibility rule for 9: The sum of the digits must be divisible by 9.\n    # Divisibility rule for 11: The difference between the sum of the digits in the odd positions and the sum of the digits in the even positions must be divisible by 11.\n\n    # Since we're given the 6-digit number: 42A28B\n    # Let's apply the divisibility rules for 9 and 11.\n    \n    # The sum of the digits: 4 + 2 + A + 2 + 8 + B\n    # The sum must be divisible by 9, and we already have 4 + 2 + 2 + 8 = 16\n    # Let A+B = x; then 16 + x should be divisible by 9. \n    # Nearest number divisible by 9 after 16 is 18, and the next is 27, 36, 45, 54, ...\n    # x can be 2, 11, 20, 29, 38, 47, 56,...\n\n    # Odd positions: 4 + A + 8 = 12 + A\n    # Even positions: 2 + 2 + B = 4 + B\n    # For divisibility by 11, (12 + A) - (4 + B) = A - B + 8 should be divisible by 11.\n    # So, the possible values for x (which is A + B), should also satisfy A - B + 8 being divisible by 11.\n\n    for x in range(2, 60): # The maximum for AB is 99 as it's a 2-digit number.\n        A_plus_B = x\n        for A in range(10):  # A is a single digit\n            B = A_plus_B - A\n            if B < 0 or B >= 10:\n                continue  # B must also be a single digit.\n            if (A - B + 8) % 11 == 0:\n                sum_of_digits = 4 + 2 + A + 2 + 8 + B\n                if sum_of_digits % 9 == 0:\n                    return 10 * A + B\n\nans = solution()"
    ],
    "63fc0ee320d54f81933be0988ed9fb3d": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    red, green, blue = symbols('red green blue')\n\n    # Lauren had equal numbers of red, green, and blue beads at first\n    bead_count_initially_equal = Eq(red, green)\n    bead_count_initially_equal &= Eq(green, blue)\n\n    # Equation representing the final count of beads Lauren has after giving away\n    final_bead_count = Eq(red + green + (blue - 112), 350)\n\n    # Equation representing twice as many red beads as green beads left\n    red_twice_green = Eq(red, 2 * green)\n\n    # Equation representing the number of blue beads left being 50 fewer than the number of red beads left\n    blue_50_less_than_red = Eq(blue - 112, red - 50)\n\n    # Solve the system of equations\n    solutions = solve((bead_count_initially_equal, final_bead_count, red_twice_green, blue_50_less_than_red), (red, green, blue))\n\n    # Number of blue beads she had at first\n    initial_blue_beads = solutions[blue]\n\n    return initial_blue_beads\n\nans = solution()"
    ],
    "fd1df5442cc54af194c050069058433f": [
        "def solution():\n    # The sum of cubes of the first n natural numbers formula: (1^3 + 2^3 + ... + n^3) = (1 + 2 + ... + n)^2\n    # We are given the odd numbers, so we need to calculate only the odd terms, which is every second term.\n    \n    # Calculate the number of odd terms from 1 to 21\n    n = (21 // 2) + 1\n    \n    # Sum of the first n odd numbers formula: 1 + 3 + 5 + ... + (2n-1) = n^2\n    sum_of_odds = n ** 2\n    \n    # According to the given formula, the sum of the cubes of these will be the square of this sum\n    ans = sum_of_odds ** 2\n    \n    return ans\n\nans = solution()"
    ],
    "5fa816e5b446405587309db43ab19e8d": [
        "def solution():\n    # Calculate the total sum of the 4 numbers for each average\n    avgs = [36, 38, 39, 45, 49]\n    totals = [avg * 4 for avg in avgs]  # Multiply by 4 since these are averages of 4 numbers\n\n    # Since each total includes a different combination of 4 out of the 5 numbers,\n    # the number that is not included is different each time.\n    # The sum of all totals gives us the sum of 4 times each number\n    total_of_totals = sum(totals)\n\n    # Now, we subtract the sum of each total with the smallest total\n    # This will give us 4 times the largest number, since the smallest total\n    # does not include the largest number.\n    largest_number_times_4 = total_of_totals - min(totals)\n\n    # Finally, we divide by 4 to get the largest number\n    largest_number = largest_number_times_4 // 4\n\n    return largest_number\n\nans = solution()"
    ],
    "f396c06eee044d4c857925759f17b15d": [
        "def solution():\n    art_books = 360\n    science_books_fraction = 4/5\n    art_books_fraction = 1/3\n\n    science_books = (art_books * art_books_fraction) / science_books_fraction\n\n    return int(science_books)\n\nans = solution()"
    ],
    "7b33b3e40e114514bc857beeadd0ef2e": [
        "def solution():\n    ans = 32 * 20 * 300\n    return ans\n\nans = solution()"
    ],
    "1aa1093f65fa4076aac242c4103891b2": [
        "def solution():\n    numbers = [870, 165, 448, 425, 3562]\n    rounded_numbers = [round(num, -2) for num in numbers]\n    total = sum(rounded_numbers)\n    return total\n\nans = solution()"
    ],
    "41f505bb491242358551d509d2bc0f53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    katelyn, jared = symbols('katelyn jared')\n    equation1 = Eq(jared, katelyn + 60)\n    equation2 = Eq(katelyn / jared, 2/5)\n    \n    solutions = solve((equation1, equation2), (katelyn, jared))\n    \n    total_stickers = solutions[katelyn] + solutions[jared]\n    \n    return total_stickers\n\nans = solution()"
    ],
    "8e13d12e420d4c5ebcc4af6c803994d9": [
        "def solution():\n    principal = 10000\n    rate_first_period = 1.05\n    rate_second_period = 1.10\n    years_first_period = 3\n    years_second_period = 2\n    \n    # Compounding for the first period\n    amount_after_first_period = principal * (rate_first_period ** years_first_period)\n    \n    # Compounding for the second period\n    final_amount = amount_after_first_period * (rate_second_period ** years_second_period)\n    \n    return round(final_amount, 1)\n\nans = solution()"
    ],
    "7f47c8080f134d369478c048481bf15f": [
        "def solution():\n    from math import gcd\n    \n    textbooks = [42, 63, 28]  # Numbers of textbooks for each subject\n    gcd_value = textbooks[0]\n    \n    for num in textbooks[1:]:\n        gcd_value = gcd(gcd_value, num)\n        \n    return gcd_value\n\nans = solution()"
    ],
    "0589562cb3d8409e9ec3a0bb065f706f": [
        "def solution():\n    # The least number of cuts required to cut 16 sausages so that they can be shared equally among 24 people \n    # is when each person gets 16/24 of a sausage. Since 16/24 reduces to 2/3, each sausage must be cut into \n    # 3 pieces to allow for equal sharing. A single cut can cut only one sausage at a time, \n    # so to cut each sausage into 3 pieces, we need 2 cuts per sausage. \n\n    # Cuts needed per sausage\n    cuts_per_sausage = 3 - 1\n\n    # Total cuts for all sausages\n    total_cuts = cuts_per_sausage * 16\n\n    return total_cuts\n\nans = solution()"
    ],
    "cf6a17fe82d4429d901a3cb109ff35af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let d be the distance between the library and school\n    d = symbols('d')\n\n    # Qiqi's travelling time (in minutes)\n    time_qiqi = d / 60\n    \n    # Weiling's travelling time (in minutes)\n    time_weiling = d / 72\n    \n    # According to the problem, Weiling starts 2 minutes later and arrives 4 minutes earlier than Qiqi\n    # So, Weiling's travelling time is Qiqi's time minus 6 minutes (2 + 4)\n    equation = Eq(time_weiling, time_qiqi - 6)\n\n    # Solve for the distance\n    distance = solve(equation, d)\n\n    return distance[0]\n\nans = solution()"
    ],
    "d2ea6172a82640c28eb896db6bd6ed62": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    st_petersburg_time = datetime.strptime(\"12:00\", \"%H:%M\")\n    flight_duration = timedelta(hours=3, minutes=40) # Assuming given typical flight duration\n    manchester_time_difference = timedelta(hours=-3) # Manchester is 3 hours behind St. Petersburg\n    departure_time = st_petersburg_time - flight_duration - manchester_time_difference\n    return departure_time.strftime(\"%H:%M\")\n\nans = solution()"
    ],
    "3cb997a578814bb191020afbf8ceb5f8": [
        "def solution():\n    # Assuming each construction company works at the same rate\n    \n    # 4 companies build 900m in 5 days\n    # So, 1 company will build 900m in 4 times more time since they work at the same rate\n    days_for_900m_by_1_company = 5 * 4\n    \n    # Now, we know the time it takes for 1 company to build 900m\n    # To build 2700m, which is 3 times more length, it will take 3 times more days\n    days_for_2700m_by_1_company = days_for_900m_by_1_company * 3\n    \n    return days_for_2700m_by_1_company\n\nans = solution()"
    ],
    "81af17d8de7a46a788695ca8365b15ae": [
        "def solution():\n    kg_to_lbs = 2.2\n    kg = 5\n    ans = kg * kg_to_lbs\n    return ans\n\nans = solution()"
    ],
    "b7ec49fc670841a1b3ed283d59481312": [
        "def solution():\n    jane_height = 130\n    height_difference = 45\n    ben_height = jane_height - height_difference\n    return ben_height\n\nans = solution()"
    ],
    "486b088e81d74803b137ad63cc4007e3": [
        "def solution():\n    for i in range(100, 1000):\n        if i % 8 == 2 and i % 11 == 2:\n            return i\n\nans = solution()"
    ],
    "d252da6964f34cafb15841fcb98f9545": [
        "def solution():\n    # Ben's position from the front.\n    ben_from_front = 6\n    # Frank's position from the back.\n    frank_from_back = 9\n    # People between Ben and Frank.\n    people_between = 10\n\n    # To find the total number of people in the queue,\n    # add Ben's position from the front, Frank's position from the back,\n    # and the people between them, then subtract 1 because\n    # Ben's position has been counted twice (from the front and within the people between).\n    total_people = ben_from_front + people_between + frank_from_back - 1\n\n    return total_people\n\nans = solution()"
    ],
    "31bceb787e4e47be97073d7d8a8b3778": [
        "def solution():\n    # Given ratio of coffee to milk\n    coffee_ratio = 3\n    milk_ratio = 8\n\n    # Total ratio parts\n    total_ratio = coffee_ratio + milk_ratio\n\n    # Given litres of coffee\n    coffee_litres = 6\n\n    # Calculate the total litres of Latte based on the ratio\n    total_litres = (coffee_litres / coffee_ratio) * total_ratio\n\n    return total_litres\n\nans = solution()"
    ],
    "6f0ec90fdeac4893aaf890122d46e374": [
        "def solution():\n    sum = 0\n    for i in range(17):\n        sum += (32 - 2*i) * (-1)**(i+1)\n    return sum\n\nans = solution()"
    ],
    "68813ca3c24c42149ea862902169e0c3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let s be the rate at which Star types and n be the rate at which Nini types\n    s, n = symbols('s n')\n\n    # The first scenario: 5 hours of Star's work and 20 hours of Nini's work completes the job -> 5s + 20n = 1\n    equation1 = Eq(5 * s + 20 * n, 1)\n\n    # The second scenario: 20 hours of Star's work and 8 hours of Nini's work completes the job -> 20s + 8n = 1\n    equation2 = Eq(20 * s + 8 * n, 1)\n    \n    # Solving the system of equations to find the rates s and n\n    solutions = solve((equation1, equation2), (s, n))\n    \n    # 1/n gives us the time Nini would take to finish the job on her own\n    time_nini = 1 / solutions[n]\n\n    return time_nini\n\nans = solution()"
    ],
    "717137e7208846a585af9fb90e9f65a3": [
        "def solution():\n    result = 72 / 100 * 140\n    return result\n\nans = solution()"
    ],
    "16bb2f8b73aa4a2f87ca69fbf8cc577c": [
        "def solution():\n    ans = 19 + 18 + 17 + 16 + 10\n    return ans\n\nans = solution()"
    ],
    "456be3e7a4b1442f849f8976ad331a08": [
        "def solution():\n    number = 42663\n    divisor = 9\n\n    remainder = (number**2) % divisor\n\n    return remainder\n\nans = solution()"
    ],
    "52ca3ae0b2e14097bf693e3c00c7fd95": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_marbles = symbols('total_marbles')\n\n    red_fraction = 2/5\n    green_fraction = 1/3\n    yellow_count = 96\n\n    # Equation: total_marbles = number of red marbles + number of green marbles + number of yellow marbles\n    # which translates to:\n    # total_marbles = (2/5) * total_marbles + (1/3) * total_marbles + 96\n    equation = Eq(total_marbles, red_fraction*total_marbles + green_fraction*total_marbles + yellow_count)\n\n    solutions = solve(equation, total_marbles)\n\n    return solutions[0]\n\nans = solution()"
    ],
    "f4ac3e3adf8e48cd9836ded820e5f0cf": [
        "def solution():\n    future_value = 870\n    annual_interest_rate = 0.09\n    years = 5\n\n    present_value = future_value / ((1 + annual_interest_rate) ** years)\n\n    return present_value\n\nans = solution()"
    ],
    "9418da19a88b4ab6ad37f24482a17de8": [
        "def solution():\n    total = 0\n    for i in range(1, 2016):\n        total += int('1' * i)\n    return total % 10000\n\nans = solution()"
    ],
    "9b2f93ae65ff4b8cb762302908c1e9e9": [
        "def solution():\n    ans = 1 / 20\n    return ans\n\nans = solution()"
    ],
    "49451447b0b84c1aa576ca9cf57eb570": [
        "def solution():\n    count = 0\n    # Loop through all three-digit numbers where the sum of digits is 8\n    for hundreds in range(1, 10):\n        for tens in range(10):\n            for ones in range(10):\n                if hundreds + tens + ones == 8 and (hundreds * 100 + tens * 10 + ones) % 2 == 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "23708dd0135542c9a0397bac3cf7df9e": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    congruences = [(2, 4), (3, 5), (3, 11)]\n    ans = solve_congruence(*congruences)\n\n    return ans[0]\n\nans = solution()"
    ],
    "0b6fb29ca6e9447ca855d69db2282654": [
        "def solution():\n    # Since there are only two colors, if we take one marble of each color, the next\n    # marble we take must be of the same color as one we've already taken.\n    # So in the worst case scenario, we would take 3 marbles to ensure we have 2 of the same color.\n    return 3\n\nans = solution()"
    ],
    "d605a3d05bcc43148562bbdb79db1c71": [
        "def solution():\n    # Calculate the unit digit of each number separately\n    # Using the property that the unit digit of a power repeats in cycles\n    # For 13^242, the cycle is 4 and repeats as 3, 9, 7, 1\n    # For 17^379, the cycle is 4 and repeats as 7, 9, 3, 1\n    # For 4^2012, the unit digit is always 6 after the first square (4^2 = 16)\n    \n    # Unit digit of 13^242 with cycle of 4 (3, 9, 7, 1)\n    unit_13 = [3, 9, 7, 1]\n    unit_digit_13 = unit_13[242 % 4 - 1]  # -1 because the list is zero-indexed\n\n    # Unit digit of 17^379 with cycle of 4 (7, 9, 3, 1)\n    unit_17 = [7, 9, 3, 1]\n    unit_digit_17 = unit_17[379 % 4 - 1]  # -1 because the list is zero-indexed\n\n    # Unit digit of 4^2012 is 6\n    unit_digit_4_pow = 6\n\n    # Compute the unit digit of the final sum\n    unit_digit_sum = (unit_digit_13 + (unit_digit_17 * unit_digit_4_pow)) % 10\n\n    return unit_digit_sum\n\nans = solution()"
    ],
    "104db66ae297441bbca8c76f5ce475ec": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the original sum of money be x\n    x = symbols('x')\n\n    # Set up the equation based on the problem statement\n    equation = Eq(x - 36 - (3/4)*(x - 36), x/6)\n\n    # Solve the equation\n    solved = solve(equation, x)\n\n    # Get the solution\n    return solved[0]\n\nans = solution()"
    ],
    "2f5f5ef83c574d589866d40947993237": [
        "def solution():\n    first_term = 11\n    common_difference = 8 - 11  # This is -3\n    n = 7\n\n    # The formula for the nth term of an arithmetic sequence:\n    # a_n = a_1 + (n - 1)d\n    # where a_n is the nth term, a_1 is the first term, n is the term number, and d is the common difference.\n    \n    nth_term = first_term + (n - 1) * common_difference\n\n    return nth_term\n\nans = solution()"
    ],
    "d378edcf9ef64254a7f97387b00ae18b": [
        "def solution():\n    # Trying out possible ages for John and Mary\n    for john_age in range(1, 50): # Assuming reasonable age range\n        mary_age = john_age - 1\n        # Check the first condition for John and Mary\n        if john_age * mary_age < 2019:\n            # Next year their ages will be:\n            next_john_age = john_age + 1\n            next_mary_age = mary_age + 1\n            # Check the second condition for John and Mary\n            if next_john_age * next_mary_age > 2020:\n                # Trying out ages for the children\n                for child1_age in range(1, 50): # Assuming reasonable age range\n                    child2_age = child1_age + 2\n                    child3_age = child1_age + 4\n                    # Check the first condition for children\n                    if child1_age*child2_age*child3_age < 2019:\n                        # Next year their ages will be:\n                        next_child1_age = child1_age + 1\n                        next_child2_age = child2_age + 1\n                        next_child3_age = child3_age + 1\n                        # Check the second condition for children\n                        if (next_child1_age * next_child2_age * next_child3_age > 2020):\n                            # If both conditions are satisfied:\n                            return john_age + mary_age + child1_age + child2_age + child3_age\n\nans = solution()"
    ],
    "51b8bb60af70468585594276c4549d5f": [
        "def solution():\n    # Convert time to travel 1 mile into seconds\n    time_per_mile_in_seconds = 2 * 60 + 30  # 2 minutes and 30 seconds\n    \n    # Convert 1 hour into seconds\n    one_hour_in_seconds = 1 * 60 * 60  # 1 hour\n\n    # Find out how many miles the bicyclist will travel in 1 hour\n    miles_travelled_in_1_hour = one_hour_in_seconds / time_per_mile_in_seconds\n\n    return miles_travelled_in_1_hour\n\nans = solution()"
    ],
    "f1ec42c9727d45019312260e63e8481e": [
        "from itertools import permutations\n\ndef solution():\n    max_sum = 0\n    for perm in permutations(range(1, 10)):\n        abc = perm[0]*100 + perm[1]*10 + perm[2]\n        bcd = perm[1]*100 + perm[2]*10 + perm[3]\n        cde = perm[2]*100 + perm[3]*10 + perm[4]\n        defg = perm[3]*100 + perm[4]*10 + perm[5]\n        efg = perm[4]*100 + perm[5]*10 + perm[6]\n        fgh = perm[5]*100 + perm[6]*10 + perm[7]\n        ghi = perm[6]*100 + perm[7]*10 + perm[8]\n        A = abc + bcd + cde + defg + efg + fgh + ghi\n        if A > max_sum:\n            max_sum = A\n    return max_sum\n\nans = solution()"
    ],
    "5112b404eb824dc0b71fd51b06757616": [
        "def solution():\n    percentage = 25\n    total = 80\n\n    ans = (percentage / 100) * total\n\n    return ans\n\nans = solution()"
    ],
    "14e76068ade649c18d46e10500185a77": [
        "def solution():\n    # Let the middle term in the arithmetic sequence be m. The terms will be (m - 2), (m - 1), m, (m + 1), (m + 2).\n    # Since the total sum of the terms is 160, we can write it as:\n    # (m - 2) + (m - 1) + m + (m + 1) + (m + 2) = 160\n    # Simplifying, we get 5m = 160\n    # Solving for m, we get m = 160 / 5\n    m = 160 / 5\n    # The largest term will be m + 2\n    largest_ball_count = m + 2\n    return int(largest_ball_count)\n\nans = solution()"
    ],
    "5919c5ed904d4b1eb75ba4e56ab0daba": [
        "def solution():\n    # The sequence can be considered to start with 8, 80, 81, ..., 89, 800, 801, ..., 899, 8000, 8001, etc.\n    # For each power of 10, there is a block of numbers starting with x80, x81, ..., x89 where x can be any number \n    # of zeroes.\n    # So for 10^1, we have 10 numbers (80-89), for 10^2, we have 100 numbers (800-899), and so on.\n    count = 0 # Start at 0\n    power_of_10 = 1 # Start at the first power of 10\n    while count < 2012:\n        increment = 9 * power_of_10 # The number of items added each loop (10, 100, 1000,...)\n        if (count + increment) >= 2012:\n            break\n        count += increment\n        power_of_10 *= 10 # Go to the next power of 10\n\n    # At this point, we've determined the block within which the 2012th number will be. The remaining number of\n    # numbers to reach 2012 will be within this block. So we just need to add this to the starting number of our \n    # current block (which is 8 * power_of_10) and subtract 1 because the count started from 0, not 1.\n    remaining = 2012 - count\n    number = (8 * power_of_10) + (remaining - 1)\n    return number\n\nans = solution()"
    ],
    "5c608f9e5216463fa42df2bcdf873d46": [
        "def solution():\n    ans = sum([i**2 for i in range(2, 21, 2)])\n    return ans\n\nans = solution()"
    ],
    "fb2929103b234c36a83b16152d639699": [
        "def solution():\n    from itertools import combinations_with_replacement\n\n    # Total envelopes to distribute.\n    total_envelopes = 15\n\n    # Boxes minimum requirements.\n    min_A = 2\n    min_B = 4\n    min_C = 3\n\n    # Initially placing the minimum required envelopes in boxes A, B, and C.\n    remaining = total_envelopes - (min_A + min_B + min_C)\n\n    # Now find all combinations for the 'remaining' envelopes in '4' boxes\n    # Since we can have 0 envelopes in box D, we also need to count combinations which include 0.\n    ways = 0\n    for combo in combinations_with_replacement(range(remaining + 1), 4):\n        if sum(combo) == remaining:\n            ways += 1\n\n    return ways\n\nans = solution()"
    ],
    "d304c371fad640039cf2aef0608bc6cf": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(47 - 2 * (x + 3), 1)\n\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "16719701a44b4e74b780b8ee086863a6": [
        "def solution():\n    return 1.4 * (1/10)\n\nans = solution()"
    ],
    "2f102fdf5c8944f590e2fe08c5776b62": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    watermelon, honeydew = symbols('watermelon honeydew')\n\n    # Two watermelons and three honeydews cost $48\n    equation1 = Eq(2 * watermelon + 3 * honeydew, 48)\n    # Each honeydew costs twice as much as each watermelon\n    equation2 = Eq(honeydew, 2 * watermelon)\n\n    # Solve for watermelon and honeydew\n    solutions = solve((equation1, equation2), (watermelon, honeydew))\n\n    return solutions[honeydew]\n\nans = solution()"
    ],
    "2def08a06682438abd603dfb441bdcac": [
        "def solution():\n    tax = 7000\n    initial_tax_rate = 0.15\n    additional_tax_rate = 0.20\n    initial_income_limit = 20000\n    initial_tax = initial_income_limit * initial_tax_rate\n\n    if tax <= initial_tax:\n        income = tax / initial_tax_rate\n    else:\n        additional_tax = tax - initial_tax\n        additional_income = additional_tax / additional_tax_rate\n        income = initial_income_limit + additional_income\n    \n    return income\n\nans = solution()"
    ],
    "d5d6a40303714f8a8ac28fac5100d265": [
        "def solution():\n    from math import gcd\n\n    rope1 = 28\n    rope2 = 14\n    rope3 = 56\n\n    # Compute the greatest common divisor of the rope lengths\n    ans = gcd(gcd(rope1, rope2), rope3)\n    return ans\n\nans = solution()"
    ],
    "a0ed7f5e8007463db822ca4a6d5c38ad": [
        "def solution():\n    total_animals = 40\n    total_legs = 100\n    for chickens in range(total_animals + 1):\n        rabbits = total_animals - chickens\n        if chickens * 2 + rabbits * 4 == total_legs:\n            return chickens\n\nans = solution()"
    ],
    "8b62ceaf1c8a475fb638fefb9ee9fe23": [
        "def solution():\n    # Since 1/13 is a recurring decimal, let's find the repeating pattern.\n    # The repeating pattern of 1/13 is of length 6: 076923\n    # The 2022th decimal place will be in the same position as 2022 % 6 in the repeating pattern\n\n    repeating_pattern = \"076923\"\n    position = (2022 % len(repeating_pattern)) - 1  # Subtract 1 for zero-indexing\n\n    # Return the digit in the corresponding position in the repeating pattern\n    return int(repeating_pattern[position])\n\nans = solution()"
    ],
    "e6d3e99bc50e4197ba980e76f8a3861f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let x be the initial number of packs in each store\n    x = symbols('x')\n    \n    # After selling, store A has x - 290 packs\n    # Store B has 3 times as many, so 3 * (x - 290)\n    # Store B currently has x packs since it hasn't sold any\n    equation = Eq(3 * (x - 290), x)\n    \n    # Solve for x\n    solved = solve(equation, x)\n    initial_total = solved[0] * 2\n    \n    return initial_total\n\nans = solution()"
    ],
    "469c613e4b42431083b62ce75d2ba64f": [
        "def solution():\n    # Number of boys\n    boys = 17\n\n    # Number of girls\n    girls = 30 - boys\n\n    # Boys who had a packed lunch\n    boys_packed = 4\n\n    # Girls who had a school lunch\n    girls_school = 7\n\n    # Students who went home and were boys\n    boys_home = 3\n\n    # Boys having school lunch (total boys - boys who had a packed lunch - boys who went home)\n    boys_school = boys - boys_packed - boys_home\n\n    # Girls who went home (total students who went home - boys who went home)\n    girls_home = 5 - boys_home\n\n    # Girls who had a packed lunch (total girls - girls who had a school lunch - girls who went home)\n    girls_packed = girls - girls_school - girls_home\n\n    # Total students who had a packed lunch (boys + girls)\n    total_packed = boys_packed + girls_packed\n\n    return total_packed\n\nans = solution()"
    ],
    "21d247063caa480aa4fd164855aaf8d6": [
        "def solution():\n    dark_chocolate_price = 6\n    milk_chocolate_price = 5\n    strawberry_chocolate_price = 4\n    \n    dark_chocolates = 20\n    milk_chocolates = 20\n    strawberry_chocolates = 20\n    \n    total_cost = (dark_chocolate_price * dark_chocolates +\n                  milk_chocolate_price * milk_chocolates +\n                  strawberry_chocolate_price * strawberry_chocolates)\n    \n    total_chocolates = dark_chocolates + milk_chocolates + strawberry_chocolates\n    \n    average_cost = total_cost / total_chocolates\n    \n    return average_cost\n\nans = solution()"
    ],
    "a805e5e4aa104df697703c2b687e1b6d": [
        "def solution():\n    n = 36\n    factors = set()\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    ans = len(factors)\n    return ans\n\nans = solution()"
    ],
    "e88ad0d7f3f54f3cad6c71dd96553567": [
        "def solution():\n    # Number of sets made in the first 5 days\n    sets_first_5_days = 720\n    # Total number of sets to make\n    total_sets = 3600\n    # Calculate the daily rate of production\n    daily_rate = sets_first_5_days / 5\n    # Total days needed to complete the order at the same rate\n    total_days = total_sets / daily_rate\n    return total_days\n\nans = solution()"
    ],
    "842182ab896748b7a10d330f85ae87d8": [
        "def solution():\n    return 100 // 12\n\nans = solution()"
    ],
    "5dc3d08683054ae99151ce2641524c51": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n    equation = Eq(10 * (x + 1) - 5 * (x + 1) - 28, 2)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "9781a5cc0b814b1bb88b4c3ef4a62e10": [
        "def solution():\n    speed_m_per_s = 53\n    time_s = 19\n    \n    train_length = speed_m_per_s * time_s\n    \n    return train_length\n\nans = solution()"
    ],
    "2697c4034ea94601bb0fe5639660557d": [
        "def solution():\n    man_rate = 1 / 15\n    man_wife_rate = 1 / 12\n    wife_rate = man_wife_rate - man_rate\n    \n    wife_days = 1 / wife_rate\n\n    return wife_days\n\nans = solution()"
    ],
    "8e3dbd5080e34453a64a1a23ca30111e": [
        "def solution():\n    result = 2017\n    for i in range(2, 2018):\n        result *= (1 - 1/i)\n    ans = int(result)\n    return ans\n\nans = solution()"
    ],
    "005fc5ec14e04dcba10b71edf3c8e322": [
        "def solution():\n    pears = 18\n    strawberries = 30\n    chocolates = 18\n    friends = 6\n\n    total_fruits = pears + strawberries\n    fruits_per_friend = total_fruits // friends\n\n    return fruits_per_friend\n\nans = solution()"
    ],
    "c15b927172434ffa9a24c1dbeb5e27c2": [
        "def solution():\n    wheels_per_tricycle = 3\n    num_tricycles = 6\n\n    total_wheels = wheels_per_tricycle * num_tricycles\n\n    return total_wheels\n\nans = solution()"
    ],
    "6067f08c4e394300937f039a6579403e": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(2 * x + 6, 3 * x - 3)\n    solution = solve(equation, x)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "aa0bf7ef0d1143f9b795235a58ca1591": [
        "def solution():\n    # Price per book\n    price_per_book = 16\n    # Books Subhan wants to get\n    books_to_get = 5\n    # For every 3 books, he gets 1 additional for free, so find free books\n    free_books = books_to_get // 3\n    # Total books Subhan will take home\n    total_books = books_to_get + free_books\n    # However, Subhan only pays for 5 books even though he takes home more because of the offer\n    total_cost = price_per_book * books_to_get\n    return total_cost\n\nans = solution()"
    ],
    "3ba68d061ee44b82b9ca4db170f3bec5": [
        "def solution():\n    turpan_base = -154  # below sea level\n    mount_fuji_tip = 3776  # above sea level\n\n    distance = mount_fuji_tip - turpan_base\n    return distance\n\nans = solution()"
    ],
    "f2cae285f0b84b47ade17c9a18ab319b": [
        "def solution():\n    total_pupils = 40\n    average_pencils = 35\n    average_boys = 20\n    average_girls = 60\n    \n    # Total pencils in the class\n    total_pencils = total_pupils * average_pencils\n    \n    # Let the number of boys be b and girls be (total_pupils - b)\n    # b * average_boys + (total_pupils - b) * average_girls = total_pencils\n    # Solve the linear equation for b\n    b = (total_pencils - total_pupils * average_girls) / (average_boys - average_girls)\n    \n    return int(b)\n\nans = solution()"
    ],
    "9a74773c879b4522a6185e9816be51da": [
        "def solution():\n    remainder = 7059 % 4\n    if remainder == 0:\n        ans = 0\n    else:\n        ans = 4 - remainder\n    return ans\n\nans = solution()"
    ],
    "3731755de37e48238b28194f092ad465": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the total number of people be 'total'\n    # Let 'women', 'men', 'children' be the number of women, men, and children respectively\n    total, women, men, children = symbols('total women men children')\n\n    # Creating equations based on the given condition\n    equation1 = Eq(women, (2/5) * total)             # 2/5 of the total are women\n    equation2 = Eq(men, 3 * children)                # Men are thrice as many as children\n    equation3 = Eq(women, children + 190)            # 190 more women than children\n    equation4 = Eq(women + men + children, total)    # Sum of women, men and children is total\n\n    # Solve the equations\n    solutions = solve((equation1, equation2, equation3, equation4), (total, women, men, children))\n\n    return solutions[total]\n\nans = solution()"
    ],
    "0f8960c766754ad7976ce474a09accd8": [
        "def solution():\n    count = 0\n    for i in range(1, 201):\n        count += str(i).count('1')\n    return count\n\nans = solution()"
    ],
    "34a8b75acf004a629ab022c2cfb11cd3": [
        "def solution():\n    total = 0\n    for i in range(1, 51):\n        total += int('1' * i)\n    ans = total % 100\n    return ans\n\nans = solution()"
    ],
    "03505bb4be72488c85f4a43b911b69fb": [
        "def solution():\n    coding_only = 36 - 20\n    math_only = 21 - 20\n    both = 20\n    total_students = coding_only + math_only + both\n    return total_students\n\nans = solution()"
    ],
    "8897310e705d4b0996136ec5d1345eb8": [
        "def solution():\n    count = 0\n    for A in range(2, 15):\n        for B in range(4, 15):\n            for C in range(3, 15):\n                D = 15 - A - B - C\n                if D >= 0:\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "ffec8472e27a457186b91c2a9b4876f7": [
        "def solution():\n    # Assuming the dividend remains constant and the divisor is 211 instead of 2.11\n    incorrect_divisor = 211\n    correct_divisor = 2.11\n    difference_in_result = 98.01\n\n    # Find the dividend using the incorrect result\n    incorrect_result = difference_in_result\n    dividend = incorrect_result * incorrect_divisor\n\n    # Now divide the found dividend by the correct divisor to get the true result\n    true_result = dividend / correct_divisor\n\n    return true_result\n\nans = solution()"
    ],
    "3be71ea95b604423b0c4053a0bdc5fc8": [
        "def solution():\n    total_students = 44\n    math_students = 30\n    art_students = 26\n\n    both_competitions = math_students + art_students - total_students\n\n    return both_competitions\n\nans = solution()"
    ],
    "2addb83d9ec14899ae26c229580cd24c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let's denote the price of one apple as 'a' and the price of one banana as 'b'\n    a, b = symbols('a b')\n\n    # We have two equations according to the problem statement\n    equation1 = Eq(6*a + 7*b, 8*a + 4*b)\n    equation2 = Eq(8*a + 4*b, 8*a + 4*b)  # This is redundant as it's the same as equation1\n\n    # We only need to solve for 'b' as we are interested in the maximum number of bananas\n    solutions = solve((equation1, equation2), (a, b))\n\n    # Find the price of one banana\n    price_of_banana = solutions[b]\n\n    # Since he can afford 8 apples and 4 bananas for the same amount, \n    # we can find the amount of money Einstein has by using the number of bananas only.\n    # (We could also use just the apples, but the problem asks specifically for bananas)\n    total_money = 8 * solutions[a] + 4 * solutions[b]\n\n    # Now, we find how many bananas he could buy\n    number_of_bananas = total_money / price_of_banana\n\n    return int(number_of_bananas)\n\nans = solution()"
    ],
    "da34c13acd4f4312a4166e9435990496": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, choon_mui = symbols('john choon_mui')\n    equation = Eq(john - 30, 4 * (choon_mui - 150))\n\n    # John and Choon Mui had the same amount of money\n    solutions = solve((equation, Eq(john - choon_mui, 0)), (john, choon_mui))\n\n    return solutions[john] - 30  # Money John had left\n\nans = solution()"
    ],
    "3a6ea0bb1dac4585a29c21ba5dadca5d": [
        "def solution():\n    seconds_per_minute = 60\n    minutes_per_hour = 60\n    hours_per_day = 24\n    days_per_week = 7\n\n    seconds_per_week = seconds_per_minute * minutes_per_hour * hours_per_day * days_per_week\n\n    return seconds_per_week\n\nans = solution()"
    ],
    "db8434167bdb42b494e99767df043336": [
        "def solution():\n    remaining_eggs = 15\n    sold_second_batch = remaining_eggs * 2 + 4\n    remaining_after_first_sale = sold_second_batch + remaining_eggs\n    total_eggs = (remaining_after_first_sale + 5) * 2\n    return total_eggs\n\nans = solution()"
    ],
    "8d5bc66e7f26483e93a8178a57870366": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    f, m = symbols('f m')  # f for female visitors, m for male visitors on the first day\n\n    # On the first day, the number of male visitors was 450 more than that of the female visitors\n    equation1 = Eq(m, f + 450)\n    \n    # On the second day, female visitors count increased by 15% and male visitors decreased by 18%\n    # The total number of visitors for the second day was 1354\n    equation2 = Eq(f*1.15 + m*0.82, 1354)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (f, m))\n\n    return solutions[m]\n\nans = solution()"
    ],
    "88e8074a774845edbbc61fbfd06e2d2f": [
        "def solution():\n    miles_per_hour = 65\n    time_hours = 15 / 60  # convert 15 minutes to hours\n    miles = miles_per_hour * time_hours\n    kilometers = miles * 1.60934  # conversion factor from miles to kilometers\n    return kilometers\n\nans = solution()"
    ],
    "b5f4586abff348538a08b5773026326b": [
        "def solution():\n    original_amount = 200\n    percentage_increase = 10\n    increased_amount = original_amount * (1 + percentage_increase / 100)\n    return increased_amount\n\nans = solution()"
    ],
    "026cc253a39b4f7a8ff32127b4f5f99c": [
        "def solution():\n    total_girls = 28\n    likes_one_direction = 20\n    likes_the_vamps = 17\n    likes_both = 15\n\n    likes_neither = total_girls - (likes_one_direction + likes_the_vamps - likes_both)\n\n    return likes_neither\n\nans = solution()"
    ],
    "61fc4738f46a4c1da0407128ad60defd": [
        "def solution():\n    return 617 * 6\n\nans = solution()"
    ],
    "5bf8127164644eda8c073097bd158315": [
        "def solution():\n    return 193 * 72\n\nans = solution()"
    ],
    "953c0cd469784f418a1e4b46c24aa581": [
        "def solution():\n    actual_length_m = 8  # length of actual yacht in meters\n    scale_ratio = 1/20   # scale ratio\n    model_length_m = actual_length_m * scale_ratio  # length of model yacht in meters\n    model_length_cm = model_length_m * 100  # convert meters to centimeters\n\n    return model_length_cm\n\nans = solution()"
    ],
    "7d6f9d84e0f64b73964b90b16040c92d": [
        "def solution():\n    total_balloons = 175\n    num_pupils = 7\n    balloons_each = total_balloons // num_pupils\n\n    return balloons_each\n\nans = solution()"
    ],
    "ff891cbe817f4502a65021a59cdc3af5": [
        "def solution():\n    from math import factorial\n\n    # The number of permutations of n elements is n!\n    total_permutations = factorial(4)\n    \n    # Calculating Derangement (permutation where no element appears in its original position)\n    # There are 9 derangments for 4 elements (https://oeis.org/A000166)\n    derangements = 9\n\n    return derangements\n\nans = solution()"
    ],
    "4af723c7f6a341b197db0f858a97435c": [
        "def solution():\n    count = 0\n    ways = []\n    for die1 in range(1, 7):\n        for die2 in range(1, 7):\n            if die1 + die2 == 8:\n                ways.append((die1, die2))\n                count += 1\n    return count, ways\n\nans = solution()"
    ],
    "362010cacc1c428e87e8f76968f8b0d1": [
        "def solution():\n    total_distance = 11\n    distance_per_day = 3\n    slide_per_night = 1\n    effective_distance_per_day = distance_per_day - slide_per_night\n    \n    days = 0\n    distance_covered = 0\n    \n    while distance_covered < total_distance:\n        days += 1\n        distance_covered += distance_per_day\n        if distance_covered >= total_distance:\n            break\n        distance_covered -= slide_per_night\n        \n    return days\n\nans = solution()"
    ],
    "372a0dd4bdd148518598bd5418fd17af": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    x = symbols('x')\n    equation = Eq(95/100 * x - 2/5 * x, 55)\n\n    solution = solve(equation, x)\n\n    return solution[0]\n\nans = solution()"
    ],
    "af71ae92175c47c2bbfef7d6d4226104": [
        "def solution():\n    principal = 12000\n    rate = 0.10\n    time = 2\n\n    # Compound interest formula A = P * (1 + r/n)^(nt)\n    # Since interest is calculated yearly, n=1\n    n = 1\n    amount = principal * ((1 + rate/n)**(n*time))\n\n    return amount\n\nans = solution()"
    ],
    "d4d78225836642e3a6857447ae177c76": [
        "def solution():\n    ans = 2.4 * (3.7 + 1.3) / 2\n    return ans\n\nans = solution()"
    ],
    "bb7980b8187641c693b65724c3bf2545": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    cong1 = (2, 7)\n    cong2 = (2, 13)\n    \n    result = solve_congruence(cong1, cong2)\n    \n    return result[0]\n\nans = solution()"
    ],
    "1a52a8a55f6a4622afbe5b311556da89": [
        "def solution():\n    return 53 * 627\n\nans = solution()"
    ],
    "546aa08753494a909833d0621b194317": [
        "def solution():\n    air_ticket = 800\n    train_ticket = 378\n    difference = air_ticket - train_ticket\n    return difference\n\nans = solution()"
    ],
    "fea0f54b7aae43d2aa3a63d63126d66b": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    end_time = datetime.strptime(\"20:30\", \"%H:%M\")\n    work_duration = timedelta(hours=8, minutes=45)\n    start_time = end_time - work_duration\n    start_time_formatted = start_time.strftime(\"%I:%M %p\")\n    return start_time_formatted.strip(\"0\")\n\nans = solution()"
    ],
    "932cd151b950413daad721128c59b65f": [
        "def solution():\n    # Calculate John's hourly wage\n    hourly_wage = 78 / 6.5\n    \n    # Calculate how much John would earn if he works 8 hours a day for 7 days\n    weekly_earnings = hourly_wage * 8 * 7\n    \n    # Calculate the shortfall to pay off his debt\n    shortfall = 700 - weekly_earnings\n    \n    # If shortfall is positive, he cannot pay off his debt\n    if shortfall > 0:\n        return shortfall\n    else:\n        return 0\n\nans = solution()"
    ],
    "c569206e3d8e45da9a5fd08bd75dd481": [
        "def solution():\n    number = 14575\n    rounded_number = round(number, -2)\n    \n    return rounded_number\n\nans = solution()"
    ],
    "18d69d8447c241eba858de2a934b9dd6": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        num_str = str(i)\n        if num_str.count('0') == 1:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "40fa5f91d7774c719164c67d4befac6e": [
        "def solution():\n    # The equation is taken from the vertical form, A might be any number from 10 to 99\n    # since it's two digits and the result of multiplying A by 4 must be a reversed A,\n    # meaning if A was ab (where a and b are digits), then 4 * A must be ba.\n    for A in range(10, 100):\n        if int(str(A)[::-1]) == 4 * A:\n            return A\n\nans = solution()"
    ],
    "0420376192d448b6b35d8dbb1e3ba394": [
        "from math import lcm\n\ndef solution():\n    # Arjun's haircut frequency in days\n    arjun_period = 2 * 7  # 2 weeks, so 2 * 7 days\n    # Yahya's haircut frequency in days\n    yahya_period = 10  # every 10 days\n\n    # Least common multiple will give the number of days until both get a haircut on the same day again\n    return lcm(arjun_period, yahya_period)\n\nans = solution()"
    ],
    "0ea8d4a5251c4d73939b3f7e26abc354": [
        "def solution():\n    sum_of_numbers = 0\n    for tens_digit in range(10):\n        for ones_digit in [0, 5]:  # the number must end with 0 or 5 to be divisible by 5\n            number = 2000 + tens_digit * 100 + 90 + ones_digit\n            if number % 3 == 0:  # check divisibility by 3\n                sum_of_numbers += number\n    return sum_of_numbers\n\nans = solution()"
    ],
    "a50c5ac06f154c1ab40822b47b13e86a": [
        "def solution():\n    stamps_after = 34\n    stamps_used = 2\n    stamps_bought = 11\n    stamps_given = 14\n\n    stamps_initial = stamps_after + stamps_used - stamps_bought + stamps_given\n    \n    return stamps_initial\n\nans = solution()"
    ],
    "3a8af64305054e408ce6703563a42e67": [
        "def solution():\n    highway_length = 42\n    tree_spacing = 7\n    # Since there are no trees at the ends, the effective length for planting trees is 42 meters minus two spacings (one at each end)\n    effective_length = highway_length - (2 * tree_spacing)\n    # Now, we find out how many trees can be planted in the effective length\n    # The number has to be an integer because you can't plant a fraction of a tree\n    num_trees = effective_length // tree_spacing\n    return num_trees\n\nans = solution()"
    ],
    "f0fbdd43508d4b8bac3f15715fcfe710": [
        "def solution():\n    # Speeds in meters per second\n    speed1 = 7\n    speed2 = 5\n    speed3 = 8\n\n    # Distances in meters\n    distance1 = 280\n    distance2 = 400\n    distance3 = 800 - (distance1 + distance2)  # The remaining distance\n\n    # Time = distance / speed, so calculate time for each segment\n    time1 = distance1 / speed1\n    time2 = distance2 / speed2\n    time3 = distance3 / speed3\n\n    # Total time spent\n    total_time = time1 + time2 + time3\n\n    return total_time\n\nans = solution()"
    ],
    "063e43565ec941b8b309de1ea64f2a4d": [
        "def solution():\n    fake_note_value = 50\n    shoe_cost = 30\n    loss_due_to_fake_note = fake_note_value\n    total_loss = shoe_cost + loss_due_to_fake_note\n\n    return total_loss\n\nans = solution()"
    ],
    "51012ecffd1f47a19d29d548fccb4460": [
        "def solution():\n    first_term = 21\n    last_term = 99\n    number_of_terms = (last_term - first_term) // 1 + 1\n    sum_of_sequence = (number_of_terms * (first_term + last_term)) // 2\n    \n    return sum_of_sequence\n\nans = solution()"
    ],
    "9929cc1f915941dd90453af8a8ff6e9d": [
        "def solution():\n    ans = (5/7) * 112\n    return ans\n\nans = solution()"
    ],
    "cb7070ea663b4e43bd0e3c4a4ae168ef": [
        "def solution():\n    return 6*9*12\n\nans = solution()"
    ],
    "8a5fc0b3c5f6473db327f5603655842e": [
        "from math import factorial\n\ndef solution():\n    # Treat A, B, and C as a single entity, so we have 8 entities to arrange\n    entities_to_arrange = 8 \n    \n    # There are 3! ways to arrange A, B, and C within themselves\n    abc_arrangements = factorial(3)\n    \n    # Now arrange the 8 entities in a row which is 8!\n    total_arrangements = factorial(entities_to_arrange)\n    \n    # Multiply the arrangements of entities with arrangements of A, B, and C\n    ans = total_arrangements * abc_arrangements\n    \n    return ans\n\nans = solution()"
    ],
    "79102f1901d94f8aaf6295c7c0b16f08": [
        "from math import comb\n\ndef solution():\n    num_students = 15\n    num_picked = 4\n    \n    ways = comb(num_students, num_picked)\n    \n    return ways\n\nans = solution()"
    ],
    "b94280bff5ab40d6a0f1f51b73c6b796": [
        "def solution():\n    # To guarantee getting a white ball, we have to consider the worst case scenario\n    # where we pick all blue balls before getting a white one. Since there are 6 blue balls,\n    # we need to pick all 6 of them first and then 1 white ball. So in total, we need 7 picks\n    # to guarantee that we have at least one white ball.\n    return 6 + 1  # All blue balls plus one white ball\n\nans = solution()"
    ],
    "b96c9f2ccbdd4053bb3e1c306d2c7cbe": [
        "def solution():\n    james = 24\n    linda = james * (1/2)\n    ben = linda * (1/4)\n    total_marbles = james + linda + ben\n    return total_marbles\n\nans = solution()"
    ],
    "5af9d49786184344b4cc613f0a935eb9": [
        "def solution():\n    # We construct the initial number as a string since it can be very large\n    number = ''.join(str(i) for i in range(1, 31))\n    \n    # We will remove the smallest digits to get the smallest number.\n    # The digits that will make the smallest number when removed should be the largest,\n    # starting from '9' down to smaller digits, and from the last occurrence backwards.\n    digits_sorted = sorted([(digit, idx) for idx, digit in enumerate(number)], reverse=True)\n    \n    # Construct the smallest number by removing 46 digits\n    indexes_to_remove = {idx for digit, idx in digits_sorted[:46]}\n    smallest_number = ''.join(d for idx, d in enumerate(number) if idx not in indexes_to_remove)\n    \n    # The result should not start with '0', so we remove any '0's from the start\n    ans = smallest_number.lstrip('0')\n    return int(ans)\n\nans = solution()"
    ],
    "b50b389683c44f05a3574ad0a3a8b04f": [
        "def solution():\n    sum_first_part = sum(range(1, 5))\n    sum_second_part = sum(range(2018, 2021))\n    ans = (sum_first_part * 1) - (sum_second_part * 0)\n    return ans\n\nans = solution()"
    ],
    "c5940c9b3ba945a795c1c8d4bf2dc024": [
        "def solution():\n    ruler_length = 20\n    overlap_length = 3\n    number_of_rulers = 3\n\n    total_length = (number_of_rulers * ruler_length) - (overlap_length * (number_of_rulers - 1))\n\n    return total_length\n\nans = solution()"
    ],
    "1dc8d2d4657c44f2aa1053854785aaa4": [
        "def solution():\n    number = 2000 - 222\n    return number\n\nans = solution()"
    ],
    "38bb0a271e854cfb911c418384137f41": [
        "def solution():\n    time_jogging = 1 # from 6:30 AM to 7:30 AM\n    time_walking = 2 # from 7:30 AM to 9:30 AM\n\n    speed_jogging = 6 # miles per hour\n    speed_walking = 5 # miles per hour\n\n    distance_jogging = time_jogging * speed_jogging\n    distance_walking = time_walking * speed_walking\n\n    total_distance = distance_jogging + distance_walking\n\n    return total_distance\n\nans = solution()"
    ],
    "d3fe3513b7b8439ca80784b696227f81": [
        "def solution():\n    used_cups = 721\n    cups_made = 0\n\n    while used_cups >= 7:\n        new_cups = used_cups // 7\n        cups_made += new_cups\n        used_cups = used_cups % 7 + new_cups\n\n    return cups_made\n\nans = solution()"
    ],
    "c12d1d0039a7413aa3e069eb8b681b38": [
        "def solution():\n    total_pages = (14 * 3) + (9 * 2) + 12\n    days = 6\n    average_pages_per_day = total_pages / days\n    return average_pages_per_day\n\nans = solution()"
    ],
    "de53e5290acf446d8f9e2d2cf711b150": [
        "def solution():\n    plot_length_cm = 23 * 100  # convert meters to cm\n    distance_between = 15 + 45  # distance from the start of one cauliflower to the start of the next\n    first_cauliflower_pos = 20  # first cauliflower position from the start of the plot in cm\n\n    # available space for planting cauliflowers after planting the first one\n    available_space = plot_length_cm - first_cauliflower_pos - 45  # subtract the width of the last cauliflower\n\n    # number of cauliflowers that can be planted in the remaining space\n    num_cauliflowers = available_space // distance_between\n\n    # add the first cauliflower\n    num_cauliflowers += 1  \n\n    return num_cauliflowers\n\nans = solution()"
    ],
    "140462dc7e4c435c900bfaf90640d4f4": [
        "def solution():\n    from math import gcd\n\n    class_a = 8\n    class_b = 12\n    class_c = 20\n\n    answer = gcd(gcd(class_a, class_b), class_c)\n    return answer\n\nans = solution()"
    ],
    "d433f6c9238447089a529b20f6d55cfc": [
        "def solution():\n    return (20**2 - 18**2) + (19**2 - 17**2)\n\nans = solution()"
    ],
    "2f9549d4e4cd4be0a3da0b27a9aeb039": [
        "def solution():\n    speed_of_sound = 3.4e2  # meters per second\n    distance = 1.5e3  # distance in meters (1.5 kilometers)\n\n    time = distance / speed_of_sound\n\n    return time\n\nans = solution()"
    ],
    "f136e2a0e618480e99a0044f35156610": [
        "def solution():\n    number = 72\n    count = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "19ee53ef309b4ac1b03a0754f950fa53": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Let B represent the number of members of the Badminton Club in the end\n    # Let b represent the number of members of the Bowling Club in the end\n    B, b = symbols('B b')\n    \n    # Equation 1: Relation between members before members left\n    equation1 = Eq(3 * b, B + 36)\n    \n    # Equation 2: Equality of members after members left\n    equation2 = Eq(B - 36, b - 4)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (B, b))\n    \n    return solutions[B], solutions[b]\n\nans = solution()"
    ],
    "59dd5e71c11a413fac9da29a37a1201b": [
        "def solution():\n    return 100\n\nans = solution()"
    ],
    "89588201f7f94ac8a1d4119cac4fc1e5": [
        "def solution():\n    n = 4.5 / 5\n    return n\n\nans = solution()"
    ],
    "abce3e56fd794c2e9db7fff1d57bab61": [
        "def solution():\n    number1 = 1234\n    number2 = 678\n    difference = number1 - number2\n    return difference\n\nans = solution()"
    ],
    "dc773bc479574ee4a35fac2c1bab3b74": [
        "def solution():\n    total_sum = 504\n    average = 126\n    difference = 6\n    num_cards = total_sum // average\n    \n    largest_number = average + (num_cards - 1) // 2 * difference\n    smallest_number = largest_number - (num_cards - 1) * difference\n    \n    return smallest_number\n\nans = solution()"
    ],
    "6d85c136dca14c8fb76cfaff88586b4f": [
        "def solution():\n    return 5.2 / 10\n\nans = solution()"
    ],
    "90378da3a7ee431ca10e34550d2fde15": [
        "def solution():\n    total_sum = sum(1 / i for i in range(10, 20))\n    return int(total_sum)\n\nans = solution()"
    ],
    "caa371df0a494602a41234dce6604f84": [
        "def solution():\n    # Count the multiplicity of the prime factors 2 and 5\n    # because a zero at the end is formed by 10, which is 2 * 5\n    count_5 = 0\n    for i in range(301, 1000):\n        while i % 5 == 0:\n            count_5 += 1\n            i //= 5\n    \n    # Since there will always be more 2's as factors in any range of integers\n    # than 5's, we only need to count the multiplicity of 5's to find the\n    # minimum number of 10's that can be formed, which is equal to the number of zeros\n    return count_5\n\nans = solution()"
    ],
    "bc0c739adc5f403fb13b64dab9bc2e64": [
        "def solution():\n    x = (5 + 3) / (3 - 2)\n    return x\n\nans = solution()"
    ],
    "cc28359065b040f0baac3572436155d0": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbols for Wendy (w) and Vivien (v)\n    w, v = symbols('w v')\n\n    # Create the equations based on the problem statement\n    # Wendy is twice as old as Vivien\n    equation1 = Eq(w, 2 * v)\n    \n    # Vivien was 1/4 as old as Wendy 10 years ago\n    equation2 = Eq(v - 10, (w - 10) / 4)\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (w, v))\n\n    # Wendy's age in 5 years' time\n    wendy_age_in_5_years = solutions[w] + 5\n\n    return wendy_age_in_5_years\n\nans = solution()"
    ],
    "23fdb74183d9468b86a9a1e7485a3ab9": [
        "def solution():\n    for i in range(10, 100):\n        if i % 6 == 0 and (i - 1) % 13 == 0:\n            return i\n\nans = solution()"
    ],
    "e37f0736fbf94dbbadaa812272966e1b": [
        "def solution():\n    ans = 617 - 385\n    return ans\n\nans = solution()"
    ],
    "f04bf8b6007544d3b9bb2fd42578dd8c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    bolt, boris = symbols('bolt boris')\n\n    equation1 = Eq(bolt, boris + 1656)\n    equation2 = Eq(bolt, 5 * boris + 280)\n\n    solutions = solve((equation1, equation2), (bolt, boris))\n\n    total_distance = solutions[bolt] + solutions[boris]\n\n    return total_distance\n\nans = solution()"
    ],
    "57b28975ea284c60b94b10c37a4a685a": [
        "def solution():\n    english_classes = 20\n    math_classes = 35\n    both_classes = 15\n\n    total_students = english_classes + math_classes - both_classes\n\n    return total_students\n\nans = solution()"
    ],
    "25a45bd50b6544e0923661f3f0222503": [
        "def solution():\n    # Speed of the rabbit and the turtle\n    rabbit_speed = 330 \n    turtle_speed = 30\n\n    # The time when the rabbit slept (10 minutes after the start)\n    sleep_start_time = 10\n    \n    # Duration for which the rabbit slept\n    rabbit_sleep_duration = 215\n\n    # Distance covered by the rabbit before sleeping\n    rabbit_distance_before_sleep = rabbit_speed * sleep_start_time\n\n    # Distance covered by the turtle in the same time\n    turtle_distance_during_rabbit_sleep = turtle_speed * (sleep_start_time + rabbit_sleep_duration)\n\n    # Total distance covered by the turtle when the rabbit wakes up\n    turtle_total_distance = turtle_distance_during_rabbit_sleep\n\n    # Time taken by the rabbit to finish the race after waking up\n    rabbit_time_after_sleep = (6990 - rabbit_distance_before_sleep) / rabbit_speed\n\n    # Total time taken by the rabbit to finish the race\n    rabbit_total_time = sleep_start_time + rabbit_sleep_duration + rabbit_time_after_sleep\n\n    # Total distance covered by the turtle in the total time taken by the rabbit\n    turtle_final_distance = turtle_total_distance + turtle_speed * rabbit_time_after_sleep\n\n    # Determine the winner and the distance difference\n    if rabbit_total_time * turtle_speed >= 6990:\n        # Turtle wins\n        winner = \"Turtle\"\n        distance_difference = 6990 - turtle_final_distance\n    else:\n        # Rabbit wins\n        winner = \"Rabbit\"\n        distance_difference = turtle_final_distance - 6990\n\n    return winner, abs(distance_difference)\n\nans = solution()"
    ],
    "d40336763f3641a1be634dae96636feb": [
        "def solution():\n    ans = 4 * (2 + 7) - 2 * (5 + 3)\n    return ans\n\nans = solution()"
    ],
    "a989d97e5a634181a65ac6343582a44d": [
        "def solution():\n    final_amount = 484\n    # Euan's pocket money went up by 10% each year for two years\n    # Let x be the initial amount in 2018.\n    # In 2019, it would be x * 110% and in 2020 it would be x * 110% * 110%.\n    # Therefore, x * 1.1 * 1.1 = £484.\n\n    initial_amount = final_amount / (1.1 ** 2)  # (1.10 = 110% as a decimal)\n\n    return initial_amount\n\nans = solution()"
    ],
    "20418f7933e340978dd3bd82bcc92a3e": [
        "def solution():\n    from math import factorial as f\n\n    # Total ways of arranging 7 people\n    total_ways = f(7)\n\n    # Calculate the ways in which the 3 specific people can stand together\n    # Treat these 3 people as a single unit so we have 5 units to arrange\n    together_ways = f(5) * f(3)\n\n    # Subtract the ways in which 3 people are together from the total ways\n    ans = total_ways - together_ways\n\n    return ans\n\nans = solution()"
    ],
    "5e7272ec96dc4c028e0cf9d07c5a405f": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim = symbols('girls boys girls_swim girls_not_swim boys_swim boys_not_swim')\n\n    # Equations based on the problem\n    equation1 = Eq(boys - girls, 90)  # There are 90 more boys than girls\n    equation2 = Eq(girls_swim + girls_not_swim, girls)  # Total number of girls is the sum of swimmers and non-swimmers\n    equation3 = Eq(boys_swim + boys_not_swim, boys)  # Total number of boys is the sum of swimmers and non-swimmers\n    equation4 = Eq(girls_swim / girls_not_swim, 31/49)  # Ratio of swimming girls to non-swimming girls\n    equation5 = Eq(boys_swim, boys_not_swim - 120)  # Number of swimming boys is 120 less than non-swimming boys\n    equation6 = Eq(girls + boys, 1690)  # Total number of students in the school\n\n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3, equation4, equation5, equation6), (girls, boys, girls_swim, girls_not_swim, boys_swim, boys_not_swim))\n\n    # Calculate the number of pupils who cannot swim\n    pupils_not_swim = solutions[girls_not_swim] + solutions[boys_not_swim]\n\n    return pupils_not_swim\n\nans = solution()"
    ],
    "12e5a736389f435683bb5c8e50d61e2b": [
        "def solution():\n    first_term = 10\n    common_difference = (25 - first_term) / (4 - 1)  # fourth row means n=4; need to subtract 1 to get the position in sequence\n    num_rows = 25\n\n    # Using the formula for the sum of an arithmetic series: S_n = n/2 * (2a + (n - 1)d)\n    total_athletes = (num_rows / 2) * (2 * first_term + (num_rows - 1) * common_difference)\n\n    return int(total_athletes)\n\nans = solution()"
    ],
    "0e3fbb38811f4247902fb227b710e62e": [
        "def solution():\n    boys = 12\n    ratio_boys_to_girls = 1 / 2\n    girls = boys / ratio_boys_to_girls\n    total_students = boys + girls\n    return int(total_students)\n\nans = solution()"
    ],
    "4d62c7befaad4eceb13cc1cd164eebe3": [
        "def solution():\n    def count_factor(n, p):\n        count = 0\n        while n > 0:\n            n //= p\n            count += n\n        return count\n    \n    return min(count_factor(789, 2), count_factor(789, 5))\n\nans = solution()"
    ],
    "d1bd5b0281c14603821cd856c0814f93": [
        "def solution():\n    first_term = 10\n    last_term = 20\n    num_terms = last_term - first_term + 1\n    sum_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_sequence\n\nans = solution()"
    ],
    "bddc0899c1ca45f1a66f449e0e844404": [
        "def solution():\n    return 23 * 76\n\nans = solution()"
    ],
    "bef9ea98d3814300913ad8631dcc87c7": [
        "def solution():\n    participants = 100\n    # If the school with the most participants has at least 4,\n    # then we are finding the maximum number of schools (pigeonholes)\n    # such that when we distribute the participants among these schools,\n    # no school has less than 4 participants.\n    # We use the Pigeonhole Principle to divide and round up.\n    min_participants_per_school = 4\n    max_schools = (participants + min_participants_per_school - 1) // min_participants_per_school\n    \n    return max_schools\n\nans = solution()"
    ],
    "cde4477099f04ff785b49a2072d18f0b": [
        "def solution():\n    num_cakes = 195\n    cost_per_cake = 46\n    total_cost = num_cakes * cost_per_cake\n    return total_cost\n\nans = solution()"
    ],
    "49744fee4f6447fcb89a783113d3f0c0": [
        "def solution():\n    # Let x be the number of students in Team B\n    # Average of Team A * Number of students in Team A +\n    # Average of Team B * Number of students in Team B =\n    # Combined average * Total number of students (20 + x)\n    \n    # 76 * 20 + 67 * x = 70 * (20 + x)\n    # 1520 + 67x = 1400 + 70x\n    # 120 = 3x\n    # x = 40\n    \n    # Solve for x\n    x = (76 * 20 - 70 * 20) / (70 - 67)\n    \n    return int(x)\n\nans = solution()"
    ],
    "6f4e289e9e9942129769e8733efea31f": [
        "def solution():\n    count = 0\n    \n    # There are three cases where at least two fours appear simultaneously:\n    # Case 1: Hour is 4 and minutes have a four in them: 04, 14, ..., 54 (6 times).\n    # Case 2: Hour is 14 and minutes have a four in them: same 6 times.\n    # Case 3: Minutes are 44 and hour is not 4 or 14 (22 other hours).\n    \n    # Case 1 and 2:\n    count += 6 * 2  # Hour 4 and 14, each has 6 possible minute configurations with a four.\n    \n    # Case 3:\n    count += 22  # Minute is 44, and each of the 22 other hours will work once.\n    \n    return count\n\nans = solution()"
    ],
    "3bda0dbde94744968aa0181ba1cc0bac": [
        "from itertools import permutations\n\ndef solution():\n    numbers = ['1', '2', '3', '7', '8', '9']\n    all_permutations = list(permutations(numbers, 3))\n    all_three_digit_numbers = [int(''.join(p)) for p in all_permutations]\n    min_product = float('inf')\n\n    for i in range(len(all_three_digit_numbers)):\n        for j in range(i+1, len(all_three_digit_numbers)):\n            number_1 = all_three_digit_numbers[i]\n            number_2 = all_three_digit_numbers[j]\n            if len(set(str(number_1) + str(number_2))) == len(numbers):\n                min_product = min(min_product, number_1 * number_2)\n\n    return min_product\n\nans = solution()"
    ],
    "a51bd65e7b8041c29809ddac356ad0cd": [
        "def solution():\n    first_term = 2019\n    last_term = 19\n    difference = -100\n\n    num_terms = ((last_term - first_term) // difference) + 1\n    sum_seq = (num_terms * (first_term + last_term)) // 2\n\n    return sum_seq\n\nans = solution()"
    ],
    "cd817843175e41e8b65030d600357b18": [
        "from itertools import permutations\n\ndef solution():\n    # Find all 7-digit permutations of the numbers 1 to 9\n    perms = permutations(range(1, 10), 7)\n    min_product = float('inf')\n    max_product = float('-inf')\n    \n    for perm in perms:\n        # Construct the 4-digit and 3-digit numbers\n        ABCD = perm[0]*1000 + perm[1]*100 + perm[2]*10 + perm[3]\n        EFG = perm[4]*100 + perm[5]*10 + perm[6]\n        \n        # Check if the sum is 1993\n        if ABCD + EFG == 1993:\n            product = ABCD * EFG\n            # Update the minimum and maximum product\n            min_product = min(min_product, product)\n            max_product = max(max_product, product)\n    \n    # Calculate the difference between the max and min products\n    difference = max_product - min_product\n    return difference\n\nans = solution()"
    ],
    "e9c5342a82354465b6f16c78f081eeab": [
        "def solution():\n    # The maximum value a regular die can yield is 6.\n    # To find the minimum number of times Sam needs to roll the dice to\n    # move from the 1st to the 25th position, we can simply divide\n    # the total number of positions he needs to move (24) by the maximum\n    # value of a single roll (6).\n\n    total_positions_to_move = 25 - 1\n    max_dice_value = 6\n\n    # Calculate how many times Sam needs to roll the dice\n    # Since we are looking for the least number of times he needs to roll,\n    # we will round up to the nearest whole number if necessary.\n    min_rolls = -(-total_positions_to_move // max_dice_value)  # Ceiling division\n\n    return min_rolls\n\nans = solution()"
    ],
    "018443a51fa1436b9ab0ca6c0c37b98f": [
        "def solution():\n    for tens in range(1, 10):\n        for ones in range(10):\n            if tens + ones == 15:\n                return tens * 10 + ones\n\nans = solution()"
    ],
    "e17d88a82a53495296ec5959ab199254": [
        "def solution():\n    ans = 4.5 * 14\n    return ans\n\nans = solution()"
    ],
    "2edcaf59ada74114ad5ad084b9daa534": [
        "def solution():\n    ans = 2 - (-2 - 2) - (-2 - (-2 - 2))\n    return ans\n\nans = solution()"
    ],
    "c46f174aa4ca4269bd208d1d522bca03": [
        "def solution():\n    ans = 43 - 5.2 + 1.03\n    return ans\n\nans = solution()"
    ],
    "d77bee6b305846ecbd5dff987f4e42d6": [
        "def solution():\n    ans = 0.45 + 1.02 + 3.003\n    return ans\n\nans = solution()"
    ],
    "ccee4c3a5a784522aa2ab0b3f57c382d": [
        "def solution():\n    a = 20.23 * 321\n    b = 202.3 * 45.6\n    c = 2.023 * 2230\n    ans = a + b + c\n    return ans\n\nans = solution()"
    ],
    "6cdbe58e9a9f4186995fe83503eec2d2": [
        "from sympy import isprime\n\ndef solution():\n    # Iterate down from 29 to find the largest prime number\n    for num in range(29, 0, -1):\n        if isprime(num):\n            # Return it once found\n            return num\n            \nans = solution()"
    ],
    "6114bae2343b4198a428d3afa112c960": [
        "def solution():\n    return 3989 - (3000 + 80 + 9)\n\nans = solution()"
    ],
    "a05a23198be14a49b4fffef79e084b27": [
        "def solution():\n    net_distance_per_hour = 40 - 10\n    final_climb_distance = 40\n    depth = 220\n    distance_remaining = depth - final_climb_distance\n    hours_to_climb_remaining = distance_remaining // net_distance_per_hour\n    if distance_remaining % net_distance_per_hour != 0:\n        hours_to_climb_remaining += 1 \n    total_hours = hours_to_climb_remaining + 1  # Adding the final climb hour\n    return total_hours\n\nans = solution()"
    ],
    "aacb3756717d41cc8276dc87aede4f8c": [
        "def solution():\n    total_cost = 0.96 * 8\n    price_per_lettuce = total_cost / 6\n    return price_per_lettuce\n\nans = solution()"
    ],
    "019ec282bc4a45b8a08add1000a1c483": [
        "def solution():\n    total_money = 388\n    spent_money = 97\n    saved_money = total_money - spent_money\n    return saved_money\n\nans = solution()"
    ],
    "8cf914f63b224541b0dbbd628dc0d76f": [
        "def solution():\n    from sympy import divisors\n\n    factors = divisors(20)\n    ans = sum(factors)\n\n    return ans\n\nans = solution()"
    ],
    "5111af6f7b234a2a86f4a95d7fe4e3aa": [
        "def solution():\n    original_plants = 11\n    plants_removed = 8\n    remaining_plants = original_plants - plants_removed\n    total_distance = 30\n\n    # The original interval is the total distance divided by the number of gaps between plants\n    original_interval = total_distance / (original_plants - 1)\n\n    # After removal, the new interval is the original interval multiplied by the new number of gaps\n    new_interval = original_interval * (original_plants - 1) / (remaining_plants - 1)\n\n    return new_interval\n\nans = solution()"
    ],
    "c10ff9a910b5472fa4b29fef9b93fe4f": [
        "def solution():\n    start_time = (13 * 60) + 52  # Convert start time to total minutes past midnight\n    end_time = (14 * 60) + 5    # Convert end time to total minutes past midnight\n    duration_minutes = end_time - start_time  # Calculate the duration of the call in minutes\n    cost_per_minute = 14  # Cost per minute in pence\n    total_cost = duration_minutes * cost_per_minute  # Total cost of the call\n    return total_cost\n\nans = solution()"
    ],
    "df2923c88c0f4ff3b1ecc189c2f6e24f": [
        "def solution():\n    return 320 * 0.40\n\nans = solution()"
    ],
    "90f6519f131740598ed9fbc1b29e3f94": [
        "def solution():\n    # Number of working typists\n    working_typists = 5 - 2\n    # Original amount of words typed by all typists \n    original_total_words = 6000\n    # Original time in minutes for all typists to type the words\n    original_time = 20\n    # The new target number of words to type\n    target_words = 9000\n    \n    # Calculate the rate of words per minute for all typists\n    rate_per_minute_all_typists = original_total_words / original_time\n    \n    # Calculate the rate of words per minute per typist\n    rate_per_minute_per_typist = rate_per_minute_all_typists / 5\n    \n    # Calculate the total rate of words per minute for the remaining typists\n    rate_per_minute_remaining_typists = rate_per_minute_per_typist * working_typists\n    \n    # Calculate the time needed for the remaining typists to type the target number of words\n    time_needed = target_words / rate_per_minute_remaining_typists\n\n    return time_needed\n\nans = solution()"
    ],
    "e3710402e52e4b1a92a506cba8e00a66": [
        "def solution():\n    count = 0\n    for i in range(100, 1000):\n        num_str = str(i)\n        if '2' in num_str and '3' in num_str:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "1969baf23afa40a7baf0654943977371": [
        "def solution():\n    from datetime import datetime, timedelta\n\n    start_date = datetime(2023, 10, 17)  # assuming the year 2023 for example purposes\n    end_date = datetime(2023, 12, 20)\n    one_day = timedelta(days=1)\n\n    current_date = start_date\n    sunday_count = 0\n\n    while current_date <= end_date:\n        if current_date.weekday() == 6:  # Sunday\n            sunday_count += 1\n        current_date += one_day\n\n    return sunday_count\n\nans = solution()"
    ],
    "7b410b23a38b498c940b646f7eb41bbc": [
        "def solution():\n    pen = 5.50\n    ruler = 7.60\n    total_payment = pen + ruler\n    return total_payment\n\nans = solution()"
    ],
    "3d380dd79fda442a8c27fd6f0f572e5b": [
        "def solution():\n    return 251 * 27\n\nans = solution()"
    ],
    "5d4cb1405ca241f99a0798ad88be93f8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apple, peach = symbols('apple peach')\n    \n    equation1 = Eq(4 * apple + 3 * peach, 10)\n    equation2 = Eq(2 * apple + 2 * peach, 6)\n\n    solutions = solve((equation1, equation2), (apple, peach))\n\n    return solutions[apple]\n\nans = solution()"
    ],
    "293fd7b7273c4a2985a35719002a4df3": [
        "def solution():\n    return 43 * 16\n\nans = solution()"
    ],
    "bb8774542eff44078c1080ee1b832fa5": [
        "def solution():\n    from math import factorial\n\n    ans = factorial(5)\n\n    return ans\n\nans = solution()"
    ],
    "faa1d07aa4874b9ba6f33ab3636209e1": [
        "def solution():\n    original_price = 7.20\n    new_price = 8.10\n    increase = new_price - original_price\n    percentage_increase = (increase / original_price) * 100\n    return percentage_increase\n\nans = solution()"
    ],
    "d5a7ecbc1d6a47828162d5c281243895": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    # Let x be the number of strawberry tarts\n    # Let y be the cost for one apple tart\n    x, y = symbols('x y')\n\n    # The lady bought twice as many apple tarts as strawberry tarts\n    # Total cost for apple tarts = 2x * y\n    # Total cost for strawberry tarts = x * (y + 0.40)\n    # Total amount spent = $40\n\n    # Equation 1: Total cost for apple tarts + Total cost for strawberry tarts = $40\n    # Equation 2: The cost of a strawberry tart is $0.40 more than that of an apple tart\n    equation1 = Eq(2 * x * y + x * (y + 0.40), 40)\n    solutions = solve(equation1, (x, y))\n    \n    # Considering only positive solutions and cost being a practical value\n    for solution in solutions:\n        if solution[x] > 0 and solution[y] > 0:\n            # Total number of tarts bought = strawberry tarts + apple tarts\n            total_tarts = solution[x] + 2 * solution[x]\n            return total_tarts\n\nans = solution()"
    ],
    "89f3344c7d3f4ec385941566d34f211b": [
        "from math import lcm\n\ndef solution():\n    # Convert minutes to seconds for easier calculation\n    first_light = 30  # first traffic light changes every 30 seconds\n    second_light = 45  # second traffic light changes every 0.75 minutes, which is 45 seconds\n\n    # Find the least common multiple (LCM) for the first two traffic light intervals\n    lcm_first_second = lcm(first_light, second_light)\n\n    # The three lights turn green every 9 minutes (540 seconds)\n    # We need to find the smallest interval for the third light\n    # that is longer than 30 seconds and also results in an LCM of 540 seconds with the other two\n\n    # Start at 30 seconds and increment to find the smallest interval for the third_light\n    third_light = 30\n    while True:\n        # Check if the LCM of all three lights is 540 seconds\n        if lcm(lcm_first_second, third_light) == 540:\n            break\n        third_light += 1\n\n    return third_light\n\nans = solution()"
    ],
    "88eda4595d1348ee82e97a6c5620dcdc": [
        "def solution():\n    mm_per_m = 1000\n    return 2 * mm_per_m\n\nans = solution()"
    ],
    "35f8d27cbb554601999e2b7fe17736e9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the total number of pieces in the jigsaw puzzle\n    x = symbols('x')\n    \n    # On the first day, Tim fits 20% of the pieces\n    pieces_fitted_first_day = 0.20 * x\n    \n    # On the second day, he fits another 60 pieces\n    pieces_fitted_second_day = 60\n    \n    # After two days, the fitted pieces to unfitted pieces ratio is 2:5\n    # This means that the fitted pieces are 2 parts and unfitted pieces are 5 parts\n    # of the remaining puzzle\n    # Therefore, total parts of the puzzle is 2 + 5 = 7 parts\n    # And 2 parts correspond to the pieces already fitted\n    pieces_fitted_total = (pieces_fitted_first_day + pieces_fitted_second_day)\n    pieces_unfitted = x - pieces_fitted_total\n    ratio_eq = Eq(pieces_fitted_total / pieces_unfitted, 2 / 5)\n    \n    # Solve the equation to find the value of x\n    solution = solve((ratio_eq), (x))\n    \n    return solution[0]\n\nans = solution()"
    ],
    "8f0c9f7a6b3b4934bbef8a5ff5370595": [
        "def solution():\n    total_numbers = 100\n    multiples_of_10 = total_numbers // 10\n    not_multiples_of_10 = total_numbers - multiples_of_10\n    percentage = (not_multiples_of_10 / total_numbers) * 100\n    return percentage\n\nans = solution()"
    ],
    "675eadedaada48a9974ff5a0fa4e1f98": [
        "def solution():\n    total_children = 26\n    henry_position_from_left = 18\n    tony_position_from_right = 17\n\n    # children_to_henry's left includes Henry, so we subtract 1 to exclude him.\n    children_to_henrys_left = henry_position_from_left - 1\n    # children_to_tonys_right includes Tony, so we subtract 1 to exclude him.\n    children_to_tonys_right = tony_position_from_right - 1\n\n    children_in_between_henry_and_tony = total_children - children_to_henrys_left - children_to_tonys_right\n\n    return children_in_between_henry_and_tony\n\nans = solution()"
    ],
    "eccd3a25ed1441c68e1a0cbcad3fe748": [
        "def solution():\n    original_loan = 4\n    paid_back = original_loan * 0.30\n    still_owed = original_loan - paid_back\n\n    return still_owed\n\nans = solution()"
    ],
    "d74f00b435ac4576a44ffbd313804476": [
        "def solution():\n    x = symbols('x')\n    equation = Eq(12 * (x - 1), 36)\n    solutions = solve(equation, x)\n    return solutions[0]\n\nans = solution()"
    ],
    "6f694af3c9bd48f386b3503a12b5964d": [
        "def solution():\n    # Each cat has 4 legs, each dog has 4 legs, the rabbit has 4 legs, and birds have 2 legs.\n    # Let's denote the number of birds as 'b'.\n\n    # Total number of legs from cats and dogs:\n    legs_from_cats_and_dogs = (2 * 4) + (2 * 4)  # 2 cats and 2 dogs\n    # Total number of legs from the rabbit:\n    legs_from_rabbit = 1 * 4  # 1 rabbit\n\n    # Now the number of legs from the birds will be 2*b, where b is the number of birds.\n    # The total number of legs is 28, so we have the equation:\n    # legs_from_cats_and_dogs + legs_from_rabbit + 2*b = 28\n\n    # Solving for b:\n    b = (28 - legs_from_cats_and_dogs - legs_from_rabbit) / 2\n\n    return int(b)\n\nans = solution()"
    ],
    "4d9b648aa31444f0a8961689da036596": [
        "def solution():\n    jack_speed = 15  # Jack's speed in km per hour\n    rose_speed = 10  # Rose's speed in km per hour\n    time = 10  # Time they travel before meeting in hours\n\n    # The total distance covered by both before meeting\n    total_distance = (jack_speed + rose_speed) * time\n\n    return total_distance\n\nans = solution()"
    ],
    "75a97b3cb75d416aaa38e4b494bb534c": [
        "def solution():\n    n = sum([i for i in range(1, 25) if 24 % i == 0 and i % 2 != 0])\n    return n\n\nans = solution()"
    ],
    "6c4a0c8fddc0483ca389ad988e693de1": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the symbol for the original number of Nelson's cards\n    nelson = symbols('nelson')\n\n    # Initial number of cards for Melvin and Oliver\n    melvin = 40\n    oliver = 0\n\n    # After the first transaction\n    melvin_gain = 5 * melvin / 8\n    melvin += melvin_gain\n    nelson -= melvin_gain\n\n    # After the second transaction\n    melvin_loss_nelson = melvin / 4\n    nelson_gain = melvin / 4\n    melvin -= melvin_loss_nelson\n    nelson += nelson_gain\n    oliver += melvin_loss_nelson + melvin_loss_nelson\n\n    # After the third transaction\n    melvin_gain_final = melvin / 8\n    melvin += melvin_gain_final\n    nelson -= melvin_gain_final\n\n    # Equate the final number of cards for Melvin, Nelson, and Oliver\n    cards_equation = Eq(melvin, nelson)\n    cards_equation = Eq(cards_equation, oliver)\n\n    # Solve for the original number of Nelson's cards\n    solution_nelson = solve(cards_equation, nelson)\n\n    total_cards = melvin + solution_nelson[0] + oliver\n\n    return total_cards\n\nans = solution()"
    ],
    "b7eac049934747d7b62bda3fbaa5bc8d": [
        "def solution():\n    from itertools import combinations\n    from math import prod\n\n    # List of card numbers\n    cards = [6, 12, 35, 175, 245, 300]\n\n    # Find all possible 2-card combinations Candy could pick\n    candy_combinations = list(combinations(cards, 2))\n    # Find all possible 3-card combinations Candice could pick\n    candice_combinations = list(combinations(cards, 3))\n\n    # Now we will search for the products of combinations that are equal\n    for candy in candy_combinations:\n        candy_product = prod(candy)\n        for candice in candice_combinations:\n            candice_product = prod(candice)\n            # If we find a matching product, identify the card that was not picked\n            if candy_product == candice_product:\n                not_picked = set(cards) - set(candy) - set(candice)\n                return not_picked.pop()\n\nans = solution()"
    ],
    "e3e8c1bb5e4a47f285f57b642b489dbf": [
        "def solution():\n    first_term = 2\n    last_term = 100\n    difference = 2\n    num_terms = (last_term - first_term) // difference + 1\n    sum_of_series = (first_term + last_term) * num_terms // 2\n    return sum_of_series\n\nans = solution()"
    ],
    "2c263a2cb715471786756a60d709dd70": [
        "def solution():\n    first_part = 2 * 5 + 1 * 5\n    second_part = (2 + 1) * 5\n    ans = first_part == second_part\n    return ans\n\nans = solution()"
    ],
    "d41691029c33461e96ef95148a5eba13": [
        "def solution():\n    # Polly's age starts at 20 when the first child is born.\n    # With each child born every two years, we can express their ages as:\n    # Polly's Age = p\n    # First Child Age = p - 20\n    # Second Child Age = p - 22\n    # Third Child Age = p - 24\n\n    # We need to find when Polly's age is the sum of her children's ages:\n    # p = (p - 20) + (p - 22) + (p - 24)\n    \n    # Simplifying the equation:\n    # p = 3p - 66\n    # 2p = 66\n    # p = 33\n\n    # Polly will be 33 years old when her age is equal to the sum of her children's ages.\n    return 33\n\nans = solution()"
    ],
    "59093ee3ace74e00af6550aaa30da949": [
        "def solution():\n    initial_sweets = 12\n    additional_sweets = 7\n    total_sweets = initial_sweets + additional_sweets\n    return total_sweets\n\nans = solution()"
    ],
    "14c4144f0869404aa3f5ee8c1fd30121": [
        "def solution():\n    total_weight = 20\n    multiple = 5\n\n    weight_without_presents = total_weight / (multiple - 1)\n\n    return weight_without_presents\n\nans = solution()"
    ],
    "9119ad36d763494589f8442ace3a3ec0": [
        "def solution():\n    # Four years ago, the combined age of the 2 dogs was 10 years old,\n    # so their current combined age is 10 + 4 * 2 = 18.\n    \n    current_combined_age = 10 + 4 * 2\n    \n    # What will the combined age be in 2 years?\n    future_combined_age = current_combined_age + 2 * 2\n    \n    return future_combined_age\n\nans = solution()"
    ],
    "1a06f46e2821453599d11045a0a00ca2": [
        "def solution():\n    ans = (5 * 4) + (6 * 8)\n    return ans\n\nans = solution()"
    ],
    "2f7745024468479cbef4990d93752c41": [
        "def solution():\n    # Total number of cakes\n    total_cakes = 50\n    # Capacity of small and big boxes\n    small_box_capacity = 4\n    big_box_capacity = 6\n    # Initialize the number of big boxes used\n    big_boxes_used = 0\n    # Loop through possible number of big boxes\n    for big_boxes in range(total_cakes // big_box_capacity + 1):\n        # Calculate remaining cakes after using big boxes\n        remaining_cakes = total_cakes - (big_box_capacity * big_boxes)\n        # Check if remaining cakes can be packed in small boxes\n        if remaining_cakes % small_box_capacity == 0:\n            # Check if the total number of boxes used is less than 10\n            if big_boxes + (remaining_cakes // small_box_capacity) < 10:\n                big_boxes_used = big_boxes\n    return big_boxes_used\n\nans = solution()"
    ],
    "daa74d1025eb4e84bac18f7f987c4c5b": [
        "def solution():\n    richard_age = 12\n    adam_age = 2 * richard_age\n    will_age = (2/3) * adam_age\n\n    total_age = richard_age + adam_age + will_age\n\n    return total_age\n\nans = solution()"
    ],
    "f0344902bde148c3ab13297920aace4a": [
        "def solution():\n    # Let the smaller number be x and the larger number be y.\n    # The system of equations will be:\n    # y - x = 39 (1)\n    # y + x = 59 (2)\n    \n    # From equation (2), we can express y as:\n    # y = 59 - x (3)\n    \n    # Now we can substitute y from equation (3) into equation (1):\n    # (59 - x) - x = 39\n    # 59 - 2x = 39\n    # 2x = 59 - 39\n    # 2x = 20\n    # x = 10\n    x = (59 - 39) / 2\n    \n    return x\n\nans = solution()"
    ],
    "50c1187bcefc42f782b81876db5c9b43": [
        "def solution():\n    m = symbols('m')\n    equation = Eq(10*m + 4, 8*(10 + m) - 3)\n    \n    solution = solve(equation, m)\n    \n    return solution[0]\n\nans = solution()"
    ],
    "0220f39d28a1457ab882171d36b85267": [
        "def solution(x, y):\n    passengers_left = x - 12\n    new_passenger_count = passengers_left + y\n    return new_passenger_count\n\nans = solution(x, y) # x and y should be replaced with actual numbers to get the result"
    ],
    "d0dda40eb81841348c13c9c91a33a12b": [
        "def solution():\n    percentage = 15\n    amount = 340\n\n    ans = (percentage / 100) * amount\n\n    return ans\n\nans = solution()"
    ],
    "af73e4b5208646ebada742ac2fe92ee4": [
        "def solution():\n    justin_age = 8\n    mother_age = 32\n    years = 0\n\n    while True:\n        years += 1\n        if (mother_age + years) == 3 * (justin_age + years):\n            break\n\n    return years\n\nans = solution()"
    ],
    "201413f1d95843569dc578e3191479b4": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    A, B, C = symbols('A B C', integer=True)\n    \n    eq1 = Eq(A * B, 30)\n    eq2 = Eq(B * C, 35)\n    eq3 = Eq(C * A, 42)\n    \n    solutions = solve((eq1, eq2, eq3), (A, B, C))\n    \n    for sol in solutions:\n        if all(map(lambda x: x.is_positive, sol)):\n            ans = sum(sol)\n            return ans\n\nans = solution()"
    ],
    "53956386ba3c4b4c950b6dca01045afc": [
        "def solution():\n    from math import factorial\n    return factorial(10)\n\nans = solution()"
    ],
    "b2f4e1c67fb348e19f5fc8792ed237cb": [
        "def solution():\n    for a in range(1, 10):  # a cannot be zero as it is the hundreds place\n        for b in range(0, 10):\n            for c in range(0, 10):\n                if ((100 * a) + (10 * b) + c) * (a + b + c) == 1926:\n                    return a + b + c\n\nans = solution()"
    ],
    "8687c8d26bc84869836e90d4f5fc68a9": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    jane, eric = symbols('jane eric')\n\n    initial_ratio = Eq(jane, 5 / 7 * eric)\n    new_ratio = Eq((jane + 6) / (eric - 6), 11 / 13)\n\n    solutions = solve((initial_ratio, new_ratio), (jane, eric))\n\n    total_seashells = solutions[jane] + solutions[eric]\n\n    return total_seashells\n\nans = solution()"
    ],
    "6ce557a6c8f5454c8bfd60bf19896563": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let c represent Cora's sweets and q represent Qingle's sweets\n    c, q = symbols('c q')\n\n    # Equation representing the situation after Cora gives Qingle 8 sweets\n    equation = Eq(q + 8, c - 8 + 4)\n\n    # Solve the equation for the difference in the number of sweets they have at first\n    difference = solve(equation, c - q)\n\n    return difference[0]\n\nans = solution()"
    ],
    "18a547d69f104e56ae2814a05d14aaec": [
        "def solution():\n    # Since the line passes through the origin (0,0), we know that b = 0.\n    b = 0\n\n    # Given that the line also passes through the point (4,8), we can find the slope (m).\n    # The slope m can be calculated using the coordinates of the point (x, y):\n    x = 4\n    y = 8\n    m = y / x  # slope = rise/run\n\n    # Now we have the linear equation in the form y = mx + b\n    # Since b is 0, the equation simplifies to y = mx\n    equation = f\"y = {m}x + {b}\"\n\n    return equation\n\nans = solution()"
    ],
    "a46723e46cfb4bedb4d7b603e4267646": [
        "def solution():\n    first_faucet_rate = 1/20\n    other_faucet_rate = 1/20 * 3\n    combined_rate = first_faucet_rate + 3 * other_faucet_rate\n\n    hours_to_fill = 1 / combined_rate\n    return hours_to_fill\n\nans = solution()"
    ],
    "2ef6d5e475ed4057b993f02bafa8ea83": [
        "def solution():\n    prime_factors = [48, 925, 38, 435]\n    factor_twos = 0\n    factor_fives = 0\n\n    for num in prime_factors:\n        while num % 2 == 0:\n            factor_twos += 1\n            num //= 2\n        while num % 5 == 0:\n            factor_fives += 1\n            num //= 5\n\n    return min(factor_twos, factor_fives)\n\nans = solution()"
    ],
    "b4a6a6d3563d489c96fe7593170152df": [
        "def solution():\n    number = 0\n    largest_number = 0\n    warren_add = 20\n    naida_subtract = 1\n    while warren_add > 0:\n        number += warren_add\n        largest_number = max(number, largest_number)\n        number -= naida_subtract\n        warren_add -= 1\n        naida_subtract += 1\n    return largest_number\n\nans = solution()"
    ],
    "9494b45a03aa47d3b840f6416268ac67": [
        "from itertools import permutations\n\ndef solution():\n    digits = [5, 3, 9, 4, 8]\n    min_even = float('inf')\n    for perm in permutations(digits):\n        number = int(''.join(map(str, perm)))\n        if number % 2 == 0:\n            min_even = min(min_even, number)\n    return min_even\n\nans = solution()"
    ],
    "4d4d648041e64f4f8fbcae12529f4d91": [
        "def solution():\n    principal = 20000\n    interest_rate = 0.05\n    years = 11\n\n    final_amount = principal * (1 + interest_rate * years)\n\n    return final_amount\n\nans = solution()"
    ],
    "326c55e1dbe34a55b42d8f2355c0d688": [
        "def solution():\n    ans = 7  # There are 7 days in a week\n    return ans\n\nans = solution()"
    ],
    "ef6a6b59f128499ab1b4a2073ffa3a22": [
        "def solution():\n    total_pupils = 180\n    piano_pupils = 52\n    violin_pupils = 38\n    piano_and_violin = piano_pupils // 4\n\n    neither = total_pupils - (piano_pupils + violin_pupils - piano_and_violin)\n    \n    return neither\n\nans = solution()"
    ],
    "b38ea6a5211742ffb6b17515774d525f": [
        "def solution():\n    # Let x be the number of passengers at the start\n    remaining_after_first_stop = 3/5  # remaining fraction after two fifths got off.\n    remaining_after_second_stop = 2/3  # remaining fraction after one third got off.\n\n    # Since 22 people are left after the second stop\n    # x * remaining_after_first_stop * remaining_after_second_stop = 22\n    # Now we solve for x\n    total_passengers = 22 / (remaining_after_first_stop * remaining_after_second_stop)\n\n    return int(total_passengers)\n\nans = solution()"
    ],
    "a0bc9ddd90c8400ea4cf8347a9020791": [
        "def solution():\n    for A in range(1, 10):\n        for D in range(1, 10):\n            for B in range(10):\n                if A == D/4 and B == A - 1:\n                    ABCD = 1000 * A + 100 * B + 10 * B + D\n                    DCBA = 1000 * D + 100 * (B + 1) + 10 * A + A\n                    if ABCD * 4 == DCBA and len({A, B, B+1, D}) == 4:\n                        return ABCD\n\nans = solution()"
    ],
    "5787ee72c4d04dc79a6fef83e42a30f8": [
        "def solution():\n    math_A = 10\n    english_A = 15\n    both_A = 2\n\n    either_A = math_A + english_A - both_A\n    return either_A\n\nans = solution()"
    ],
    "6dc2dadd3a6147068fc0bfdae746ed45": [
        "def solution():\n    count = 0\n    for num in range(100, 201):\n        if str(num) == str(num)[::-1]:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "61d2be77a64146af8827b79a42a801d8": [
        "from datetime import datetime, timedelta\n\ndef solution():\n    school_leave_time = datetime.strptime(\"15:22\", \"%H:%M\")\n    bus_catch_time = datetime.strptime(\"16:01\", \"%H:%M\")\n    bus_ride_duration = timedelta(minutes=18)\n    home_arrival_time = datetime.strptime(\"16:35\", \"%H:%M\")\n\n    first_walk_duration = bus_catch_time - school_leave_time\n    bus_dropoff_time = bus_catch_time + bus_ride_duration\n    second_walk_duration = home_arrival_time - bus_dropoff_time\n\n    total_walking_time = first_walk_duration + second_walk_duration\n    total_walking_minutes = total_walking_time.seconds // 60  # Convert seconds to minutes\n\n    return total_walking_minutes\n\nans = solution()"
    ],
    "730f25d6c1bc4e37a31dd815615af70b": [
        "def solution():\n    result = 25\n    subtracted_value = 10\n    divisor = 3\n\n    original_number = (result - subtracted_value) * divisor\n\n    return original_number\n\nans = solution()"
    ],
    "4c36fb915f3b494faaabab2d3b6937ff": [
        "import sympy as sp\n\ndef solution():\n    x, y = sp.symbols('x y')\n    # The conditions of the point (x, y) lying inside the isosceles right triangle\n    conditions = [\n        x >= 0,            # x-coordinate should be non-negative\n        y >= 0,            # y-coordinate should be non-negative\n        x + y <= 2         # sum of x and y should be less than or equal to the hypotenuse length\n    ]\n\n    # The condition of the point being at a distance less than 1 from the right angle vertex (0, 0)\n    desired_condition = x**2 + y**2 < 1\n\n    # Define the region that satisfies the conditions\n    region = sp.And(*conditions)\n\n    # Define the desired region within the triangle\n    desired_region = sp.And(desired_condition, region)\n\n    # Compute the total area of the isosceles right triangle\n    total_area = sp.integrate(sp.integrate(1, (x, 0, 2 - y)), (y, 0, 2))\n\n    # Compute the area of the desired region within the triangle\n    desired_area = sp.integrate(sp.integrate(1, (x, 0, sp.sqrt(1 - y**2))), (y, 0, 1))\n\n    # The probability is the desired area divided by the total area of the triangle\n    probability = desired_area / total_area\n\n    return float(probability)\n\nans = solution()"
    ],
    "1dbda155390140e09242722fa7ec4c1f": [
        "def solution():\n    return sum(range(1, 9))\n\nans = solution()"
    ],
    "6877d33364b24d4982c45c4a93293a57": [
        "def solution():\n    mean = 5\n    numbers_sum = mean * 7  # There are 7 numbers including 'a'\n    known_sum = 2 + 3 + 8 + 4 + 7 + 6\n    a = numbers_sum - known_sum\n    return a\n\nans = solution()"
    ],
    "2d27041da5e747b9b4c4949e40cd5d6a": [
        "def solution():\n    total = 2030452\n    subtracted = total - 30000 - 452\n    answer_in_box = subtracted // 2\n    return answer_in_box\n\nans = solution()"
    ],
    "586e5da41dc343e286f5bdb9a9aab06c": [
        "def solution():\n    return 0.20 * 8880\n\nans = solution()"
    ],
    "d992065f5fdb49bdb385a59fc97cf3bb": [
        "def solution():\n    total_length_cm = 150  # ribbon length in centimeters\n    piece_length_m = (total_length_cm / 2) / 100  # convert to meters\n    return piece_length_m\n\nans = solution()"
    ],
    "3ef61299b7c4476884b4646603c76fc5": [
        "def solution():\n    n = 72 / (3 * 6)\n    return n\n\nans = solution()"
    ],
    "94696a1a3ade4f6a85f0aaa9c64215ae": [
        "def solution():\n    pupils_in_victoria_row = 6 + 1 + 7\n    total_rows = 1 + 1 + 8\n    total_pupils = pupils_in_victoria_row * total_rows\n    return total_pupils\n\nans = solution()"
    ],
    "8b5b06b976f0457fb05ae92796e950c6": [
        "def solution():\n    total_marks_for_3_tests = 75 * 3\n    marks_in_two_tests = 172\n    marks_in_remaining_test = total_marks_for_3_tests - marks_in_two_tests\n    return marks_in_remaining_test\n\nans = solution()"
    ],
    "5ea6d9da123442c4a8d28b5ba3fe74e5": [
        "def solution():\n    # To ensure at least one pair of the same color, Lina must account for the worst case scenario\n    # of drawing all different colors until she has to pick a matching pair.\n\n    # Since there are 3 colors, the worst case scenario would be if she picks one of each color:\n    # 1 white, 1 grey, 1 black = 3 socks\n\n    # Then, no matter what color she picks next, it will form a pair:\n    # At this point, she will have at least 2 socks of one color (pair).\n\n    # Thus, she needs to pick one more sock to make sure she has a pair of the same color.\n    # 3 (initial different socks) + 1 (to guarantee a pair) = 4 socks\n\n    return 4  # Return number of socks needed to ensure at least one pair of the same color\n\nans = solution()"
    ],
    "6246bd4ec6524aff80623b6953875e8b": [
        "def solution():\n    principal = 400000\n    rate = 1.2 / 100\n    time = 1\n\n    interest = principal * rate * time\n\n    return interest\n\nans = solution()"
    ],
    "743969de5e9d4dda93e740107239e799": [
        "def solution():\n    ans = 452 - 191\n    return ans\n\nans = solution()"
    ],
    "34a7fe65f21049408fe7d74314f392a8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    # Define the symbol for the unknown number\n    x = symbols('x')\n    \n    # Define the equation step by step according to the problem statement\n    equation = Eq((x + 3) / 4 * 9, 81)\n    \n    # Solve the equation for x\n    solution = solve(equation, x)\n    \n    # Since solve returns a list, we take the first (and only) solution\n    return solution[0]\n\nans = solution()"
    ],
    "3378ca3dc79a44d9b8d60a873b97d5c7": [
        "def solution():\n    # Calculate the numerator sum\n    numerator_sum = sum(1 / (i * (i + 1)) for i in range(1, 20, 2))\n    \n    # Calculate the denominator sum\n    denominator_sum = sum(1 / (i * (20 + 11 - i)) for i in range(11, 16))\n    \n    # Final answer\n    ans = numerator_sum / denominator_sum\n\n    return ans\n\nans = solution()"
    ],
    "5521675555dc4d9a8af13086a54334e6": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    x = symbols('x')\n\n    # Mr. Smith's total sugar\n    sugar_smith = (300 * 0.50) + (600 * 0.20)\n\n    # Mrs. Smith's total sugar from the drink that is 10% sugar + sugar from the drink that is x%\n    sugar_mrs_smith = (700 * 0.10) + (300 * (x/100))\n\n    # Mr. Smith's total liquid\n    total_liquid_smith = 300 + 600\n\n    # Mrs. Smith's total liquid\n    total_liquid_mrs_smith = 700 + 300\n\n    # Set up the equation: Mr. Smith's sugar percentage = Mrs. Smith's sugar percentage\n    equation = Eq(sugar_smith / total_liquid_smith, sugar_mrs_smith / total_liquid_mrs_smith)\n\n    # Solve for x and round to two decimal places\n    solution_x = solve(equation, x)\n    x_value = round(solution_x[0], 2)\n\n    return x_value\n\nans = solution()"
    ],
    "eb5c3a8d80624ac095e1421ab5bf8025": [
        "def solution():\n    x = (17 - 2) / 5\n    return x\n\nans = solution()"
    ],
    "207d21f7872b44c39bcd6ee8534d8b32": [
        "def solution():\n    total_candy = 36\n    given_to_lily = total_candy * (3/4)\n    remaining_after_lily = total_candy - given_to_lily\n    given_to_brother = remaining_after_lily * (1/3)\n    final_remaining = remaining_after_lily - given_to_brother\n    \n    return final_remaining\n\nans = solution()"
    ],
    "64b7530c3fcd4d98840ab7e499004ae8": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define the variables\n    speed = symbols('speed')  # speed of Peter jogging\n    distance_covered_in_30_min = 6300 - 1800  # distance covered in 30 minutes\n\n    # Create the equation based on the distance covered\n    equation = Eq(speed, distance_covered_in_30_min / 0.5)  # speed = distance / time\n\n    # Solve for the speed\n    solutions = solve(equation, speed)\n    jogging_speed = solutions[0]  # speed in m/min\n\n    # Calculate the time taken to cover the remaining distance\n    remaining_distance = 1800  # distance left at 8:30 am\n    time_to_reach = remaining_distance / jogging_speed  # time in minutes\n\n    # Calculate the time he reached his friend's house\n    reach_time_in_minutes = 30 + time_to_reach\n    hours = 8 + int(reach_time_in_minutes // 60)\n    minutes = int(reach_time_in_minutes % 60)\n\n    # Convert to 24-hour time format\n    if minutes < 10:\n        minutes = '0' + str(minutes)\n    time_reached = f\"{hours}:{minutes}\"\n\n    return time_reached\n\nans = solution()"
    ],
    "49c2deec1cbb44739a83382de18766c5": [
        "def solution():\n    pancakes_per_minute = 2\n    minutes = 12\n    total_pancakes = pancakes_per_minute * minutes\n    return total_pancakes\n\nans = solution()"
    ],
    "02842e44d6784d8ea8f173ee23a5edf6": [
        "def solution():\n    # Let x be the number of donuts Amy bought\n    # Let y be the number of muffins Amy bought\n    # Since Amy bought 54 more donuts than muffins, we have x = y + 54\n\n    # Let m be the amount of money Amy had initially\n    # Amy spent half of her money on donuts, so spent m/2 on donuts\n    # Which means she bought (m/2) / (10/7) donuts\n    # Amy bought the remaining m/2 on muffins, so she bought (m/2) / (6/3) muffins\n\n    # Set up the equation based on the above relationships:\n    # (m/2) / (10/7) = (m/2) / (6/3) + 54\n\n    # Solve for m\n    m = symbols('m')\n    equation = Eq((m/2) / (10/7), (m/2) / (6/3) + 54)\n\n    # Find the solution\n    solution = solve(equation, m)\n    \n    # We expect a single solution for the amount of money Amy had\n    assert len(solution) == 1\n    \n    return solution[0]\n\nans = solution()"
    ],
    "46e11702823f49719758ac932f77acbe": [
        "def solution():\n    # Convert weight from kg to g\n    total_weight_g = 5 * 1000 \n    # Weight of each bag\n    bag_weight_g = 250 \n    # Calculate total number of bags\n    total_bags = total_weight_g / bag_weight_g  \n    # Convert price per bag from pence to pounds\n    price_per_bag = 65 / 100  \n    # Calculate total revenue\n    total_revenue = total_bags * price_per_bag  \n    # Cost of sweets in pounds\n    total_cost = 10  \n    # Calculate profit\n    profit = total_revenue - total_cost  \n    # Calculate percentage profit\n    percentage_profit = (profit / total_cost) * 100  \n\n    return round(percentage_profit, 2)\n\nans = solution()"
    ],
    "fa946bf107f84b9d9749b1c8b96288fb": [
        "def solution():\n    # All ages are considered in years\n    may_age_when_10 = 10\n    kenny_age_advantage_over_may = 10 - 7  # This is how much older Kenny is than May when May is 7\n    kenny_age_advantage_over_brother = 2  # Kenny is 2 years older than his brother\n\n    # Let x be the age of Kenny's younger brother when May is 10 years old\n    # Then, Kenny's age will be x + kenny_age_advantage_over_brother.\n    # According to the problem statement, we have the following equation:\n    # x + (x + kenny_age_advantage_over_brother) = 3 * may_age_when_10\n    # Simplifying the above equation:\n    # 2x + kenny_age_advantage_over_brother = 3 * may_age_when_10\n    # 2x + 2 = 3 * 10\n    # 2x = 30 - 2\n    # 2x = 28\n    # x = 14\n\n    younger_brother_age_when_may_10 = 28 / 2\n    \n    # Now we need to calculate Kenny's age when May is 10 years old\n    kenny_age_when_may_10 = younger_brother_age_when_may_10 + kenny_age_advantage_over_brother\n    \n    # Finally, we can find out how much older Kenny is than May this year\n    # by subtracting the age difference when May is 10 from the age advantage\n    # Kenny has over May when she was 7 (which is also the age difference this year)\n    age_difference = kenny_age_when_may_10 - may_age_when_10\n    \n    return age_difference + kenny_age_advantage_over_may\n\nans = solution()"
    ],
    "98264c90c4f44945a18baa5c270fa929": [
        "def solution():\n    # Since we have 14 apples and 5 children,\n    # and each child has to get at least one apple,\n    # we distribute 1 apple to each child first.\n    apples_left = 14 - 5\n    \n    # The maximum number of apples one child can get\n    # would be the remainder of the apples when divided equally\n    # plus one apple initially given.\n    max_apples_for_one_child = apples_left + 1\n\n    return max_apples_for_one_child\n\nans = solution()"
    ],
    "d8d809f89a7b4ed380c0e0f2a53b344a": [
        "def solution():\n    total = 46563 + 9785 + 859\n    return total\n\nans = solution()"
    ],
    "e97c46c875534340a3de7f73e01112a9": [
        "def solution():\n    # The distance between each tooth can be found by dividing the distance between 4th and 9th by the number of gaps (9 - 4)\n    distance_per_tooth = 30 / (9 - 4)\n    \n    # The comb's length in mm includes all gaps between the teeth numbering one less than the total teeth amount (100 - 1)\n    comb_length_mm = distance_per_tooth * (100 - 1)\n    \n    # Convert the length from mm to cm by dividing by 10\n    comb_length_cm = comb_length_mm / 10\n    \n    return comb_length_cm\n\nans = solution()"
    ],
    "93c6119a0fb64233a3a47cabdebb6ab5": [
        "def solution():\n    total_permutations = 5! # Total ways to arrange 5 people\n    adjacent_permutations = 2! * 4! # Ways to arrange 5 people with a specific pair adjacent\n\n    # Subtract the permutations with the pair adjacent from the total permutations\n    ans = total_permutations - adjacent_permutations\n    return ans\n\nans = solution()"
    ],
    "9473695aa8e7449bb892566a91379acd": [
        "def solution():\n    # Calculate the year when the grandmother was 80 years old\n    grandmother_80_year = 2008\n    # Calculate the year when the mother was 40\n    mother_40_year = 1996\n\n    # Calculate the age difference between the grandmother and the mother\n    age_difference = grandmother_80_year - mother_40_year\n    \n    # Calculate the age of the grandmother when the mother was 25\n    grandmother_age_when_mother_25 = (80 - age_difference) - (40 - 25)\n\n    return grandmother_age_when_mother_25\n\nans = solution()"
    ],
    "56e4adc68056477b9e25d947d40d0245": [
        "def solution():\n    total_vegetables = 60\n    monday_sale = total_vegetables * (2/3)\n    vegetables_left = total_vegetables - monday_sale\n    tuesday_sale = vegetables_left * (2/5)\n\n    monday_and_tuesday_sale = monday_sale + tuesday_sale\n\n    return monday_and_tuesday_sale\n\nans = solution()"
    ],
    "565d75f4184c40158e38b62f8b7a8e56": [
        "def solution():\n    return 26.1 / 10000\n\nans = solution()"
    ],
    "3acaa5a4f1c749c2a12dac032c35167c": [
        "def solution():\n    # Since each friend gets at least one ice-cream cone, we need to distribute the\n    # remaining 2 ice-cream cones to the 3 friends.\n    # This is a problem of distributing identical items (ice-cream cones) to distinct boxes (friends),\n    # which can be solved using the \"stars and bars\" method (combinatorial method).\n    # We need to place 2 dividers to create 3 sections (for the friends) in a sequence with 2 cones.\n    # Total possibilities = (number of cones + number of friends - 1) choose (number of friends - 1)\n    # Here, it would be (2 + 3 - 1) choose (3 - 1) = 4 choose 2\n    \n    # calculation using combinations\n    from math import comb\n    ans = comb(4, 2)\n    return ans\n\nans = solution()"
    ],
    "8c2140926a504b439da436bc045ac3fb": [
        "def solution():\n    total_sum = sum([5 * i if i % 2 != 0 else -5 * i for i in range(1, 857 // 5 + 1)])\n    return total_sum\n\nans = solution()"
    ],
    "2b2a2e587ee14b41a501ab4265950264": [
        "def solution():\n    total_biscuits = 12\n    biscuits_given = total_biscuits / 4\n    biscuits_left = total_biscuits - biscuits_given\n\n    return biscuits_left\n\nans = solution()"
    ],
    "91f7c2d158094aecab623a3dd7d51aae": [
        "def solution():\n    # To ensure 16 balls of one color together with 13 balls of another color,\n    # we have to consider the worst possible way to pick balls such that we\n    # do not satisfy the condition until the very last pick.\n    \n    # We hence pick 15 balls of each of the five colors first, because 16 of the same color is required,\n    # this means we reach 15 balls without fulfilling the condition for any color.\n    # For the second color, since 13 balls are required, we can pick up to 12 more balls of each color (12*4),\n    # now we have 15+12 balls of each color (except one of them, which will have only 15).\n    \n    # By picking one more ball, we will either complete the 16 of the same color or\n    # the 13 of another color (as we are left with one color having 15 balls and the rest as 27).\n    \n    # Since we need to ensure that we fulfill both conditions, we should be in a position to get the\n    # 16th ball of the first color or the 13th ball of the second color with the next pick.\n    # Hence, our last pick will ensure we meet the condition no matter which ball we get.\n    ans = (15 * 5) + (12 * 4) + 1\n\n    return ans\n\nans = solution()"
    ],
    "fd6c4c01349c419f8b677eaff8345ce3": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    p, q = symbols('p q')\n    equation1 = Eq(p, 4 * q)\n    equation2 = Eq(p - q, 2700)\n\n    solutions = solve((equation1, equation2), (p, q))\n\n    return solutions[q]\n\nans = solution()"
    ],
    "1b10af37f10e4e378350822821ccd0e2": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    A, B, C = symbols('A B C')\n    equation1 = Eq(C + B, 18)\n    equation2 = Eq(B, A + A + A)\n    equation3 = Eq(C + A, 10)\n\n    solutions = solve((equation1, equation2, equation3), (A, B, C))\n\n    return solutions[B]\n\nans = solution()"
    ],
    "fdf01e833d7c4f0a82c64b43a8d356df": [
        "def solution():\n    numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 21, 23, 25, 27, 29]\n    sum_of_numbers = sum(numbers)\n    return sum_of_numbers\n\nans = solution()"
    ],
    "f959c9aa94cb4444a05fed72622f9203": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Declare symbols for table and chair\n    table, chair = symbols('table chair')\n\n    # Equation 1: Cost of two tables and five chairs\n    equation1 = Eq(2 * table + 5 * chair, 220)\n\n    # Equation 2: Cost of one table is the same as three chairs\n    equation2 = Eq(table, 3 * chair)\n\n    # Solve the equations\n    solutions = solve((equation1, equation2), (table, chair))\n\n    return solutions[table]\n\nans = solution()"
    ],
    "cf14830fc6664a70a173fbe0ffbab834": [
        "def solution():\n    principal = 4000\n    rate = 3.81 / 100\n    time = 5\n    \n    amount = principal * (1 + rate * time)\n    \n    return amount\n\nans = solution()"
    ],
    "fba9a6dc71794e82967fc086a3bcc09b": [
        "def solution():\n    return 40 / 100 * 75\n\nans = solution()"
    ],
    "23deca2dec7341899b3bd1e49078449d": [
        "def solution():\n    total_spent = 1.55 + 2.25\n    money_left_fraction = 4 / 5\n    money_after_spending = money_left_fraction / (1 - money_left_fraction) * total_spent\n    original_money = total_spent + money_after_spending\n    return original_money\n\nans = solution()"
    ],
    "f83284a837da4e2fb26549abab697c91": [
        "def solution():\n    hook_walk_time = 20\n    lily_walk_time = hook_walk_time - 5\n    return lily_walk_time\n\nans = solution()"
    ],
    "ffd358a18901488c82211c659492c7a0": [
        "def solution():\n    ans = (125 + 75) * (630 - 616)\n    return ans\n\nans = solution()"
    ],
    "608176c2f8294c308bc2eb16e490831d": [
        "def solution():\n    return 3 + 6 + 8\n\nans = solution()"
    ],
    "43898b2ed2594f919d1a1e91a9899bc8": [
        "def solution():\n    total_distance = 20\n    remaining_distance = 4\n    ratio_lucas = 3\n    ratio_mother = 5\n\n    lucas_walked = (total_distance - remaining_distance) * (ratio_lucas / (ratio_lucas + ratio_mother))\n    \n    return lucas_walked\n\nans = solution()"
    ],
    "9554ef69c62a485194537701b7cbafe1": [
        "def solution():\n    first_term = 50\n    difference = -1\n    num_terms = 30\n\n    last_term = first_term + (num_terms - 1) * difference\n    \n    sum_of_sequence = (num_terms * (first_term + last_term)) // 2\n\n    return sum_of_sequence\n\nans = solution()"
    ],
    "59500938d9aa429c963148ba7e8054ea": [
        "def solution():\n    people_initial = 30\n    pizzas_needed_initial = 12\n    people_final = 35\n\n    unit_rate = pizzas_needed_initial / people_initial\n    pizzas_needed_final = unit_rate * people_final\n\n    return int(pizzas_needed_final)\n\nans = solution()"
    ],
    "c28579adfb0e4c66af894392fda2aa03": [
        "def solution():\n    num_teams = 16\n    rounds = 0\n\n    while num_teams > 1:\n        num_teams //= 2\n        rounds += 1\n\n    return rounds\n\nans = solution()"
    ],
    "501a0a55ecd341dc996261f472d570c8": [
        "def solution():\n    ans = 21 * 5\n    return ans\n\nans = solution()"
    ],
    "98fccede682543abb0a7e6ce6c0a6e69": [
        "def solution():\n    import math\n\n    count = 0\n    for i in range(1, 2017):\n        if math.sqrt(i * 72).is_integer():\n            count += 1\n\n    return count\n\nans = solution()"
    ],
    "aebe8c69595b46bf9a87e30c9324afe4": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    wands, cards = symbols('wands cards')\n\n    equation1 = Eq(wands + cards, 69)\n    equation2 = Eq(wands, cards + 17)\n\n    solutions = solve((equation1, equation2), (wands, cards))\n\n    return solutions[wands]\n\nans = solution()"
    ],
    "496c9d2a7f38418389c85a6060857948": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    big_class, small_class = symbols('big_class small_class')\n\n    # 2 apples per big class student and 2 apples per small class student in total gave out 48 apples\n    equation1 = Eq(2 * big_class + 2 * small_class, 48)\n    # 3 oranges per big class student and 2 oranges per small class student in total gave out 55 oranges\n    equation2 = Eq(3 * big_class + 2 * small_class, 55)\n\n    solutions = solve((equation1, equation2), (big_class, small_class))\n\n    return solutions[small_class]\n\nans = solution()"
    ],
    "3fc92a68dae34f66b6cd792e86640204": [
        "def solution():\n    cost_per_lollipop = 5\n    num_lollipops = 10\n    total_cost = cost_per_lollipop * num_lollipops\n    return total_cost\n\nans = solution()"
    ],
    "16eb3c5479c84e7488205bd06c552370": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    julie, marion, ethan = symbols('julie marion ethan')\n    \n    # Marion earns twice the amount Julie earns\n    equation1 = Eq(marion, 2 * julie)\n    # Ethan earns 5 times the amount Julie earns\n    equation2 = Eq(ethan, 5 * julie)\n    # The difference in pay between Marion and Ethan is $168\n    equation3 = Eq(ethan - marion, 168)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2, equation3), (julie, marion, ethan))\n    \n    # Calculate the sum of their earnings\n    total_earnings = solutions[julie] + solutions[marion] + solutions[ethan]\n    \n    return total_earnings\n\nans = solution()"
    ],
    "665b5255c92349eb9ddeb5d93d37b49d": [
        "def solution():\n    initial_value = 160\n    final_value = 40\n    percent_change = ((final_value - initial_value) / initial_value) * 100\n    return percent_change\n\nans = solution()"
    ],
    "29030dd68348449a8312e00b2527cb9e": [
        "def solution():\n    ans = 427 * 100\n    return ans\n\nans = solution()"
    ],
    "f44c4462b0f64bab846629402568bf16": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols\n    danny_current_age, efron_current_age, years = symbols('danny_current_age efron_current_age years')\n\n    # Danny is 30 years older than Efron\n    age_difference_eq = Eq(danny_current_age, efron_current_age + 30)\n\n    # Current age ratio Danny:Efron is 8:3\n    current_ratio_eq = Eq(danny_current_age / efron_current_age, 8/3)\n\n    # Future age ratio Danny:Efron will be 5:3\n    future_ratio_eq = Eq((danny_current_age + years) / (efron_current_age + years), 5/3)\n\n    # Solve the equation system\n    solutions = solve((age_difference_eq, current_ratio_eq, future_ratio_eq), (danny_current_age, efron_current_age, years))\n\n    return solutions[years]\n\nans = solution()"
    ],
    "71f696cfd5a84b80996ceb9957f484a3": [
        "def solution():\n    from sympy.ntheory.modular import solve_congruence\n\n    # Create congruences based on the problem statement:\n    # x % 5 == 0 (x is divisible by 5)\n    # x % 7 == 6 (x leaves a remainder of 1 when divided by 7)\n    # x % 8 == 7 (x leaves a remainder of 1 when divided by 8)\n    congruences = [(0, 5), (6, 7), (7, 8)]\n\n    # Using the Chinese Remainder Theorem to find the smallest x that satisfies all conditions\n    x = solve_congruence(*congruences)\n\n    # The result x is the smallest x that satisfies all the conditions\n    return x[0]\n\nans = solution()"
    ],
    "70c940fee10b465a84d7c757aa018a9e": [
        "def solution():\n    cookies_made = 100\n    butter_used = 40\n\n    cookies_wanted = 150\n    butter_needed = (butter_used * cookies_wanted) / cookies_made\n\n    return butter_needed\n\nans = solution()"
    ],
    "6718d58202814857b7fb4876e51e86b3": [
        "def solution():\n    count = 0\n    for number in range(1, 405):\n        count += str(number).count('4')\n    return count\n\nans = solution()"
    ],
    "418a9a3d03a942a4a2c621e1a1688350": [
        "def solution():\n    sophie_tshirts = 13\n    sister_tshirts = sophie_tshirts - 5\n    return sister_tshirts\n\nans = solution()"
    ],
    "830a6979358f4071bfa17925dbf71666": [
        "def solution():\n    marks = [27, 28, 26, 24, 20]\n    mean_mark = sum(marks) / len(marks)\n    return mean_mark\n\nans = solution()"
    ],
    "46ab1acc8aff4e4fa30eb837311aab05": [
        "def solution():\n    colours_pencils = 15\n    colours_rulers = 20\n    colours_pens = 10\n\n    # Choosing a pencil and a ruler\n    pencil_ruler_combinations = colours_pencils * colours_rulers\n\n    # Choosing a pencil and a pen\n    pencil_pen_combinations = colours_pencils * colours_pens\n\n    # Choosing a ruler and a pen\n    ruler_pen_combinations = colours_rulers * colours_pens\n\n    # Total number of different ways to choose any two items\n    total_combinations = pencil_ruler_combinations + pencil_pen_combinations + ruler_pen_combinations\n\n    return total_combinations\n\nans = solution()"
    ],
    "4700822a4e3e41d3bd6cf4dda57b3084": [
        "def solution():\n    # Calculate the number of games in the group stage\n    # Each group has 4 teams, they play in a round-robin format\n    # Each team plays 3 games, so for one group there are 3 * 4 / 2 = 6 games (divide by 2 to avoid double counting)\n    # There are 8 groups\n    group_games = 6 * 8\n\n    # Calculate the number of games in the knockout round\n    # There are 16 teams in the knockout round, with each match eliminating one team\n    # The last 4 teams will compete for the 1st, 2nd, 3rd, and 4th places, so there are 3 additional games:\n    # one semi-final, one final, and one third-place match\n    knockout_games = 15 + 3\n    \n    # The total number of games is the sum of group stage games and knockout round games\n    total_games = group_games + knockout_games\n\n    return total_games\n\nans = solution()"
    ],
    "7f68a155e73c4da8811ddfc74a0de5bb": [
        "def solution():\n    ans = -6 / 6 == 6\n    return ans\n\nans = solution()"
    ],
    "d9a90dd46e1b4f7b8ea8abbd0d0cda50": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    ball, racket = symbols('ball racket')\n    equation1 = Eq(ball + racket, 30)\n    equation2 = Eq(racket, ball + 28)\n    \n    solutions = solve((equation1, equation2), (ball, racket))\n    \n    return solutions[ball]\n\nans = solution()"
    ],
    "eaa3534db535408eb1b161cbafa4af7a": [
        "def solution():\n    count = 0\n    for second_digit in range(1, 10):  # Possible range for second digit (1 to 9)\n        first_digit = 1 + 2 * second_digit  # Condition for the first digit\n        if first_digit >= 1 and first_digit < 10:  # Check if first digit is valid (1 to 9)\n            for third_digit in range(1, 10):  # Possible range for third digit (1 to 9)\n                total_sum = first_digit + second_digit + third_digit\n                if total_sum > 9 and total_sum < 14:  # Sum condition\n                    count += 1\n    return count\n\nans = solution()"
    ],
    "90d54cf3746b403a998b30644e14ed6c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    apple, banana = symbols('apple banana')\n\n    equation1 = Eq(3 * apple + 2 * banana, 1.25)\n    equation2 = Eq(apple + banana, 0.48)\n\n    solutions = solve((equation1, equation2), (apple, banana))\n\n    cost_of_5_bananas = 5 * solutions[banana]\n\n    return cost_of_5_bananas\n\nans = solution()"
    ],
    "c7dac16768af42858204c39c3827fc02": [
        "def solution():\n    number = 210 / 0.7\n    return number\n\nans = solution()"
    ],
    "0c56c61f84034ba086b7ccfeb89c1dd8": [
        "def solution():\n    n = 224\n    factors_count = 1\n    # Factorize 224 into its prime factors: 2^5 * 7\n    prime_factors = [2, 2, 2, 2, 2, 7]\n    # Count the occurrences of each prime factor\n    from collections import Counter\n    prime_factors_counts = Counter(prime_factors)\n    # Apply the theorem: for each prime factor p with exponent e, the number of factors is (e + 1)\n    for exponent in prime_factors_counts.values():\n        factors_count *= (exponent + 1)\n    return factors_count\n\nans = solution()"
    ],
    "49cdd6b806674d4aaf0cef8780f8f8cb": [
        "def solution():\n    pencils = 15\n    rulers = 20\n    pens = 10\n\n    total_combinations = pencils * rulers * pens\n\n    return total_combinations\n\nans = solution()"
    ],
    "67d603b406954580bb312d236cca3026": [
        "def solution():\n    # The total number of matches in a round-robin tournament can be\n    # calculated by n * (n - 1) / 2, where n is the number of teams.\n    # Given that the total number of matches is 15, we need to find n such that\n    # n * (n - 1) / 2 = 15. This is a quadratic equation in terms of n.\n\n    # We can use the quadratic formula to solve this, where a = 1, b = -1, c = -30\n    a = 1\n    b = -1\n    c = -2 * 15  # Multiply by 2 to move it to the other side of the equation\n\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # Calculate the two potential solutions for n, but we only take the positive one\n    # since the number of teams cannot be negative.\n    n1 = (-b + discriminant**0.5) / (2*a)\n    n2 = (-b - discriminant**0.5) / (2*a)\n\n    # Return the positive and whole number solution, as n must be a whole number\n    ans = int(n1) if n1 > 0 and n1.is_integer() else int(n2)\n\n    return ans\n\nans = solution()"
    ],
    "f7d16bba0eef40749220aeee30f11c1b": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for unknowns\n    shorts, t_shirt = symbols('shorts t_shirt')\n    \n    # Create equations based on the given info\n    equation1 = Eq(2 * shorts + 3 * t_shirt, 26)\n    equation2 = Eq(2 * shorts + 5 * t_shirt, 40)\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (shorts, t_shirt))\n\n    return solutions[t_shirt]\n\nans = solution()"
    ],
    "f55b7420a598495d8cb743d46cebb8de": [
        "def solution():\n    # Let x be the number of questions answered correctly.\n    total_questions = 10\n    points_for_correct = 6\n    points_for_incorrect = -2\n    \n    # We represent the points for getting a wrong answer or skipping a question as negative points.\n    # The total points one can get is by assuming he answered all questions correctly (total_questions * points_for_correct).\n    # For every incorrect answer, the points will decrease by (points_for_correct - points_for_incorrect) because we lose the positive points we could have gotten and also get the negative points.\n    \n    # Create a function to calculate the points based on the number of correct answers.\n    def calculate_points(x):\n        return x * points_for_correct + (total_questions - x) * points_for_incorrect\n    \n    # Iterate through the possible number of correct answers and return the one that gives us the expected points.\n    for x in range(total_questions + 1):\n        if calculate_points(x) == 44:\n            return x\n\nans = solution()"
    ],
    "661c4eed4a32448abe382838199f26bb": [
        "def solution():\n    ans = 599999 + 59999 + 5999 + 599 + 59 + 5\n    return ans\n\nans = solution()"
    ],
    "32b965ddd9334985a59c4e74953701c5": [
        "def solution():\n    count = 0\n    for i in range(10, 100):\n        tens_place = i // 10\n        ones_place = i % 10\n        if tens_place == ones_place + 3:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "39341763d576440d9bf2d603ec9d0a28": [
        "def solution():\n    first_term = 0.3\n    second_term = 0.8\n    common_difference = second_term - first_term\n\n    third_term = first_term + 2 * common_difference\n\n    return third_term\n\nans = solution()"
    ],
    "0568330ddd524498892da0859a5ec187": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    rachel, alice = symbols('rachel alice')\n\n    equation1 = Eq(rachel - 10, alice + 10)\n    equation2 = Eq((rachel - 8) / 3, alice - 8)\n\n    solutions = solve((equation1, equation2), (rachel, alice))\n\n    # Calculate the total number of sweets originally\n    total_sweets = solutions[rachel] + solutions[alice]\n\n    return total_sweets\n\nans = solution()"
    ],
    "73f073ef77d3485a9e2db22b74b4d99c": [
        "def solution():\n    distance_between_posts = 25\n    number_of_gaps = 3  # There are 3 gaps between 4 posts.\n\n    total_distance = distance_between_posts * number_of_gaps\n\n    return total_distance\n\nans = solution()"
    ],
    "129b35bd2e4c40649186f5cfd5e08f55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let x be the number of triangles, then the number of quadrilaterals will be x + 82.\n    # Since there are 2 pentagons, each with 5 sides, that adds 10 sides.\n    # Each triangle has 3 sides and each quadrilateral has 4 sides.\n    # The total number of sides is given as 394.\n    # The equation based on sides is: 3x (for triangles) + 4(x + 82) (for quadrilaterals) + 10 (for 2 pentagons) = 394\n\n    x = symbols('x')\n    equation = Eq(3*x + 4*(x + 82) + 10, 394)\n\n    # Solve the equation for x\n    solution_dict = solve(equation, x)\n\n    # The number of quadrilaterals is x + 82\n    number_of_quadrilaterals = solution_dict[x] + 82\n\n    return number_of_quadrilaterals\n\nans = solution()"
    ],
    "184cf0c663e945deb8bdb09f3954a920": [
        "def solution():\n    lcm_val = 3 * 5 * 7  # Finding the least common multiple of 3, 5, and 7\n    for num in range(lcm_val, 1000, lcm_val):  # Start at lcm_val, increment by lcm_val, not exceeding 999\n        if str(num).startswith('6'):\n            return num\n\nans = solution()"
    ],
    "cfc59e7dc0614196bfb7795914dacdef": [
        "def solution():\n    ans = 63 - (55 - 27)\n    return ans\n\nans = solution()"
    ],
    "ae1a09d2d17649718463491e636b12d1": [
        "def solution():\n    score = 36\n    total = 40\n    percentage = (score / total) * 100\n    return percentage\n\nans = solution()"
    ],
    "842908b1fc5d4a659cac34d9f6c84d6b": [
        "def solution():\n    # Total number of students\n    total_students = 150  \n\n    # Total teams\n    total_teams = total_students // 3\n\n    # Teams with 1 boy (hence two girls)\n    one_boy_teams = 15\n\n    # Teams with 2 or more boys (at least 2 * 27 boys)\n    two_or_more_boys_teams = 27\n\n    # Calculating the number of all-boy teams\n    # Let x be the number of all-girl teams\n    # Then 2x is the number of all-boy teams\n    # The sum of all types of teams should be equal to the total number of teams\n    all_girl_teams = symbols('x')\n    all_boy_teams = 2 * all_girl_teams\n\n    # Equation for the total teams\n    equation = Eq(one_boy_teams + two_or_more_boys_teams + all_boy_teams + all_girl_teams, total_teams)\n\n    # Solve the equation for x (number of all-girl teams)\n    number_of_all_girl_teams = solve(equation, all_girl_teams)[0]\n\n    # Now calculate the number of all-boy teams\n    number_of_all_boy_teams = 2 * number_of_all_girl_teams\n\n    # Total number of teams with boys is sum of 1 boy teams, 2 or more boy teams, and all-boy teams\n    total_boy_teams = one_boy_teams + two_or_more_boys_teams + number_of_all_boy_teams\n\n    # Teams without boys is the remaining teams\n    all_girl_team_count = total_teams - total_boy_teams\n\n    # Calculate the number of girls\n    number_of_girls = all_girl_team_count * 3 + one_boy_teams * 2\n\n    return number_of_girls\n\nans = solution()"
    ],
    "bab688e90abc4ad7a664334dbd742c1c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    apples, peaches, pears = symbols('apples peaches pears')\n    \n    equation1 = Eq(apples, 6 * pears + 5)\n    equation2 = Eq(peaches, 3 * pears - 2)\n    equation3 = Eq(apples + peaches + pears, 73)\n    \n    solutions = solve((equation1, equation2, equation3), (apples, peaches, pears))\n    \n    return solutions[apples]\n\nans = solution()"
    ],
    "519312ec2beb41659919be97138e6ba6": [
        "def solution():\n    product = 2 * 5 * 7 * 2 * 5 * 7 * 2 * 5\n    sum_digits = sum(int(digit) for digit in str(product))\n    return sum_digits\n\nans = solution()"
    ],
    "00c7ec21843b40aba2d39a75810ffc85": [
        "def solution():\n    # Let the distance between Town A and Town B be d km.\n    # Time taken if speed is 10 km/h: t1 = d / 10\n    # Time taken if speed is 15 km/h: t2 = d / 15\n\n    # Ben arrives at 10 am when he travels at 10 km/h, which implies that if he had travelled at 15 km/h, he would have taken 2 hours less.\n    # Therefore, t1 - 2 = t2\n    # => d / 10 - 2 = d / 15\n    # To find d, solve the equation:\n    # d = (10 * 15 * 2) / (10 - 15)\n\n    d = (10 * 15 * 2) / (5)\n    \n    # Now we want to find the speed at which Ben should travel to arrive at 9 am.\n    # If he arrives at 10 am at 10 km/h, and he needs to arrive one hour earlier, at 9 am, the duration of his travel should be 1 hour less.\n    # Let the required speed be v km/h.\n    # Time taken to travel at speed v: t3 = d / v\n    # t1 - 1 = t3\n    # => d / 10 - 1 = d / v\n\n    # Solve for v:\n    # v = d / (d/10 - 1)\n\n    v = d / ((d/10) - 1)\n\n    return v\n\nans = solution()"
    ],
    "c5e1085504df4fe38872ff3a46620cd6": [
        "def solution():\n    dog_to_rabbit = 8\n    rabbit_to_chicken = 2\n\n    dog_to_chicken = dog_to_rabbit * rabbit_to_chicken\n\n    return dog_to_chicken\n\nans = solution()"
    ],
    "5bd7e5a5661d47afb0bef048489bb3fe": [
        "def solution():\n    num1 = int('61', 7)\n    num2 = int('34', 7)\n    result = num1 - num2\n    ans = ''\n    while result > 0:\n        ans = str(result % 7) + ans\n        result = result // 7\n    return ans if ans else '0'\n\nans = solution()"
    ],
    "00d539f1b4db48d3b3494c0f120062fd": [
        "def solution():\n    total_candies = 5 * 12  # initially total candies\n    new_total_students = 5 + 1  # 1 more student joins\n    candies_per_student_after = total_candies // new_total_students\n    \n    return candies_per_student_after\n\nans = solution()"
    ],
    "80aa447385fb495cb5bf06d8c7b0fdda": [
        "def solution():\n    raj_height = 138\n    david_height = 170\n\n    jacob_height = (raj_height + david_height) / 2\n\n    return jacob_height\n\nans = solution()"
    ],
    "233efeea19724a82bb0152f79a9c9ee1": [
        "def solution():\n    # There are 1 left-hand blue, 2 left-hand green, 3 right-hand blue, and 4 right-hand green\n    # To ensure a matching pair (color does not matter), Dilly should grab at least one of each color plus one\n    # This guarantees that she will have at least a pair of one color\n\n    # The maximum number of gloves she can grab without getting a matching pair is:\n    # - 1 left-hand blue\n    # - 2 left-hand green (3 gloves total so far, no matching pair)\n    # - 3 right-hand blue (6 gloves total so far, no matching pair)\n    # The next glove Dilly grabs, no matter the color, will result in a matching pair\n    # That's a total of 6 + 1 more gloves to ensure a matching pair\n\n    matching_pair_minimum = 6 + 1\n\n    return matching_pair_minimum\n\nans = solution()"
    ],
    "dec3fb034aea47b1b73c5397fa7a6777": [
        "def solution():\n    from sympy import symbols, solve, Eq\n\n    x = symbols('x')\n    eq1 = Eq(x % 4, 3)\n    eq2 = Eq(x % 5, 4)\n    eq3 = Eq(x % 7, 6)\n\n    ans = solve((eq1, eq2, eq3), x)\n    \n    return min(ans)\n\nans = solution()"
    ],
    "815b73a9e29e4090bfd993eec9cfa5f8": [
        "def solution():\n    initial_value = 120\n    depreciation_rate = 0.04\n    years = 5\n    approx_depreciation = 0.8154\n\n    final_value = initial_value * (1 - depreciation_rate) ** years\n    final_value_approx = initial_value * approx_depreciation\n\n    return round(final_value_approx, 2)\n\nans = solution()"
    ],
    "11200de7f462445fbdc06bbefca57a99": [
        "from math import factorial\n\ndef solution():\n    word = 'REVISE'\n    frequency = {letter: word.count(letter) for letter in set(word)}\n\n    ans = factorial(len(word))\n    for key in frequency:\n        ans //= factorial(frequency[key])\n\n    return ans\n\nans = solution()"
    ],
    "453da806d0d44938b0462fc02a292532": [
        "def solution():\n    num_students = 0\n    difference = 52\n    side_length = 1\n\n    while True:\n        if side_length % 2 == 0:\n            girls = (side_length - 1) ** 2\n            boys = side_length ** 2\n        else:\n            girls = side_length ** 2\n            boys = (side_length + 1) ** 2\n\n        if boys - girls == difference:\n            num_students = boys + girls\n            break\n\n        side_length += 1\n\n    return num_students\n\nans = solution()"
    ],
    "db9048b0a36740abaf853e98897fbb20": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Define symbols for the number of pins Eugene and Yuna originally had\n    eugene_pins, yuna_pins = symbols('eugene_pins yuna_pins', positive=True, integer=True)\n\n    # Equation 1: Eugene originally had 3 times as many pins as Yuna\n    eq1 = Eq(eugene_pins, 3 * yuna_pins)\n    \n    # Equation 2: After Yuna bought 76 pins, Yuna had 7/9 as many pins as Eugene\n    eq2 = Eq(yuna_pins + 76, (7/9) * eugene_pins)\n    \n    # Solve the system of equations\n    solution = solve((eq1, eq2), (eugene_pins, yuna_pins))\n\n    # Return the number of pins Eugene had\n    return solution[eugene_pins]\n\nans = solution()"
    ],
    "31d6392f86454fcfabd63010d5f7ac45": [
        "def solution():\n    return 825\n\nans = solution()"
    ],
    "4873bec7d2b148f0b1a8ce80aa0a60fa": [
        "def solution():\n    # To be divisible by 9, the sum of the digits of the number must be divisible by 9\n    # The sum of the digits 1+2+3+4+5 = 15, so A must be such that (15 + A) is divisible by 9\n    # The smallest such A is 3 because 15 + 3 = 18, which is divisible by 9\n    \n    # When dividing by 4, only the last two digits of the number are relevant\n    # The last two digits form the number \"5A\"\n    # Since A is 3, the last two digits are \"53\"\n    # Now, let's find the remainder of 53 when divided by 4\n    remainder = 53 % 4\n    \n    return remainder\n\nans = solution()"
    ],
    "c347c951d6764ecabf96c472825de32c": [
        "def solution():\n    original_price = 480\n    discount_rate = 0.35\n    sale_price = original_price * (1 - discount_rate)\n    return sale_price\n\nans = solution()"
    ],
    "b381663c286a41b4b2c212c8d9fa625f": [
        "def solution():\n    ans = 7.257 - 3.47\n    return ans\n\nans = solution()"
    ],
    "790337bbc4c640c2ba17ccfd95719755": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    total_flowers = symbols('total_flowers')\n    red_flowers = total_flowers / 2\n    remaining_flowers = total_flowers - red_flowers\n    pink_flowers = 4 / 7 * remaining_flowers\n\n    equation = Eq(red_flowers - pink_flowers, 6)\n\n    num_flowers_solution = solve(equation, total_flowers)\n\n    return num_flowers_solution[0]\n\nans = solution()"
    ],
    "d7960525f20d4a85b2d07f16b77a89de": [
        "def solution():\n    numerator = 5 + 1/7 + 3 + 3/11 + 1 + 13/23\n    denominator = 3 + 3/7 + 2 + 2/11 + 1 + 1/23\n    \n    ans = numerator / denominator\n    \n    return ans\n\nans = solution()"
    ],
    "c79974cfe3544139952b7aa20868fe35": [
        "def solution():\n    n = 15\n    ans = (1/6) * n * (n + 1) * (n + 2)\n    return int(ans)\n\nans = solution()"
    ],
    "1edfbfb983cc4026861711aed39ec50b": [
        "def solution():\n    # The strategic move would be to take 1 match\n    # leaving 10 matches for Dan. No matter if Dan takes 1 or 2 matches next,\n    # the number of matches left will be a multiple of 3 for Kelly\n    # to maintain the lead, and she can always take the opposite number \n    # of what Dan takes (if Dan takes 1, Kelly takes 2 and vice versa),\n    # maintaining the count difference and forcing Dan into a losing position.\n    kellys_move = 1\n    return kellys_move\n\nans = solution()"
    ],
    "fcdca3fe5e6e44a3aaa6b8fc55320938": [
        "def solution():\n    from math import factorial\n\n    num_kids = 3\n    num_ways = factorial(num_kids)\n\n    return num_ways\n\nans = solution()"
    ],
    "3e876b88a82f4fabb94444319efac888": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    square = symbols('square')\n    equation = Eq(4 * square - 3, 65)\n    solution = solve(equation, square)\n\n    return solution[0]\n\nans = solution()"
    ],
    "06bf4f7c67004f1dbe9f03b5dc14516d": [
        "def solution():\n    jason_initial = 20\n    nicole_initial = jason_initial + 1  # Nicole has more stickers than Jason in the beginning so assume she has at least one more.\n    \n    while True:\n        jason_final = jason_initial + 18\n        nicole_final = nicole_initial - 18\n        if jason_final == nicole_final - 5:\n            return nicole_initial\n        nicole_initial += 1\n\nans = solution()"
    ],
    "8d09ac1d8970471dbd6ed0727980bd24": [
        "def solution():\n    ways = 0\n    for two_gram_weights in range(0, 77 // 2 + 1):\n        if (77 - 2 * two_gram_weights) % 3 == 0:\n            ways += 1\n    return ways\n\nans = solution()"
    ],
    "354d850fc3c644989668ea964029af35": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    cars, motorcycles = symbols('cars motorcycles')\n    total_vehicles = 27\n    total_wheels = 78\n    \n    equation1 = Eq(cars + motorcycles, total_vehicles)  # Total vehicles equation\n    equation2 = Eq(4*cars + 2*motorcycles, total_wheels)  # Total wheels equation\n    \n    # Solve the system of equations\n    solutions = solve((equation1, equation2), (cars, motorcycles))\n    \n    return solutions[cars]\n\nans = solution()"
    ],
    "2d748e0d6f544f23b0cf14359ab45b8f": [
        "def solution():\n    boys = 176\n    girls = boys - 50\n    total_students = boys + girls\n    return total_students\n\nans = solution()"
    ],
    "9bf9b1c2a24e4de3a5ed1f6932581844": [
        "def solution():\n    original_length = 1\n    original_breadth = 1\n    original_height = 1\n\n    new_length = original_length * 1.10\n    new_breadth = original_breadth * (4/5)\n    new_height = original_height * (11/10)\n\n    original_volume = original_length * original_breadth * original_height\n    new_volume = new_length * new_breadth * new_height\n\n    percentage_change = (new_volume / original_volume) * 100\n\n    return percentage_change\n\nans = solution()"
    ],
    "3825adc1e7f941ebb2ac15ca5828613b": [
        "def solution():\n    total_distance_km = 5\n    number_of_intervals = 9\n\n    distance_between_marshals_m = (total_distance_km * 1000) / (number_of_intervals + 1)\n\n    return distance_between_marshals_m\n\nans = solution()"
    ],
    "52895a5f9c584889b60e514eea4cb012": [
        "def solution():\n    incorrect_total = 74 * 7\n    correct_total = incorrect_total - (81 - 18)\n    correct_average = correct_total / 7\n    return correct_average\n\nans = solution()"
    ],
    "e4b6fc33fb6044dbbf98541fd73229a3": [
        "def solution():\n    principal_amount = 6000\n    interest_rate = 0.03\n    # Interest for the first year\n    first_year_interest = principal_amount * interest_rate\n    # Total amount at the end of the first year\n    amount_end_first_year = principal_amount + first_year_interest\n    # Interest for the second year is calculated on the amount at the end of the first year\n    second_year_interest = amount_end_first_year * interest_rate\n\n    return second_year_interest\n\nans = solution()"
    ],
    "33681430650f48419421a99318bdaf3d": [
        "def solution():\n    first_leg_speed = 180  # meters per minute\n    first_leg_time = 6     # minutes\n\n    second_leg_speed = 120  # meters per minute\n    second_leg_time = 8     # minutes\n\n    first_leg_distance = first_leg_speed * first_leg_time\n    second_leg_distance = second_leg_speed * second_leg_time\n\n    total_distance = first_leg_distance + second_leg_distance\n\n    return total_distance\n\nans = solution()"
    ],
    "27def3f9c6524488aff45fe308ba3df3": [
        "def solution():\n    minutes_per_picture = 10\n    total_minutes = 1 * 60 + 20  # one hour and twenty minutes\n    number_of_pictures = total_minutes / minutes_per_picture\n    return int(number_of_pictures)\n\nans = solution()"
    ],
    "0f41145869544b529481d63e5b99081f": [
        "def solution():\n    mixed_fraction = 1 + 4/7\n    ans = round(mixed_fraction, 1)\n    return ans\n\nans = solution()"
    ],
    "c471960bec8946e69cab7ac7cb6411c3": [
        "def solution():\n    # Number of tiles on one edge of the square wall\n    side_length = int(400 ** 0.5)\n    \n    # Initialize counter for red and green tiles\n    red_tiles = 0\n    green_tiles = 0\n    \n    for layer in range(0, side_length // 2):\n        # Calculate the perimeter of the current square layer (minus the four corners)\n        perimeter = (side_length - layer * 2) * 4 - 4\n        # Alternate the colors red and green for each layer\n        if layer % 2 == 0:\n            red_tiles += perimeter\n        else:\n            green_tiles += perimeter\n    \n    # The center tile (if side_length is odd)\n    if side_length % 2 != 0:\n        red_tiles += 1\n\n    # There is an equal number of tiles in the inside square determined by the side_length // 2\n    inside_square = (side_length // 2) ** 2\n    if side_length % 2 == 0:\n        green_tiles += inside_square\n    else:\n        red_tiles += inside_square - 1  # minus the center which has already been counted\n    \n    # Determine the dominant color\n    dominant_color = 'red' if red_tiles > green_tiles else 'green'\n    more_tiles = abs(red_tiles - green_tiles)\n    \n    return dominant_color, more_tiles\n\nans = solution()"
    ],
    "4d04c9aca7b14fc0b67361f6a0e0bb64": [
        "def solution():\n    recurring_sequence = \"428571\"  # Recurring sequence in the decimal of 3/7\n    index = (69 - 1) % len(recurring_sequence)  # -1 because we start counting from 0\n    return int(recurring_sequence[index])\n\nans = solution()"
    ],
    "c0156725df024018aed39df49f106ef3": [
        "def solution():\n    # Let M represent the sales for Megacorp in 2014.\n    # Vastco sold 68% more in 2014, i.e., V = M * (1 + 68/100)\n    # In 2015, Vastco sold 32% more than in 2014, i.e., V_2015 = V * (1 + 32/100)\n    # In 2015, Vastco sold 44% more than Megacorp, i.e., V_2015 = M_2015 * (1 + 44/100)\n    # We need to find the percentage increase for Megacorp from 2014 to 2015 i.e., (M_2015 - M) / M * 100\n    \n    # Let's use these equations to express everything in terms of M:\n    # V_2015 / V = (M_2015 * (1 + 44/100)) / (M * (1 + 68/100)) = (1 + 32/100)\n    # To find M_2015 / M:\n    # (M_2015 / M) * (1 + 44/100) = (1 + 32/100) * (1 + 68/100) / (1 + 68/100)\n    # M_2015 / M = ((1 + 32/100) * (1 + 68/100) / (1 + 44/100)) / (1 + 68/100)\n    # Now we calculate the percentage increase:\n    percentage_increase = ((1 + 0.32) * (1 + 0.68) / (1 + 0.44)) - 1\n\n    # Convert to percentage\n    return percentage_increase * 100\n\nans = solution()"
    ],
    "b5d689e03b7a4370a956fabc41aa5767": [
        "def solution():\n    dylan_salt_content = 300 * 0.35\n    daisy_salt_content = 200 * 0.50\n    total_solution = 300 + 200\n    total_salt_content = dylan_salt_content + daisy_salt_content\n    concentration = total_salt_content / total_solution\n    return concentration * 100  # To get percentage\n\nans = solution()"
    ],
    "53974104b6a9479d95d1207ebbf1bf13": [
        "def solution():\n    y = symbols('y')\n    remaining_sweets = y / 2\n    return remaining_sweets\n\nans = solution()"
    ],
    "a48c37c796244f69b5dd70e1b55e15d4": [
        "def solution():\n    # Let's denote the total cost of goods as C.\n    # Planned profit is 50%, so planned profit is 0.5 * C.\n    # On the first day, Ken sold 70% of goods at a profit of 50%, so he made 0.7 * C * 0.5 in profit.\n    # The total profit Ken actually made was 82% of the planned profit, so it was 0.82 * 0.5 * C.\n    # Let's call the discount rate on the second day as D (in decimals).\n\n    # The equation for the actual profit Ken made is:\n    # Actual profit = Profit from first day + Profit from second day\n    # 0.82 * 0.5 * C = 0.7 * C * 0.5 + 0.3 * C * (1 - D) * 0.5\n\n    # Let's find D:\n    actual_profit = 0.82 * 0.5\n    first_day_profit = 0.7 * 0.5\n    second_day_profit = actual_profit - first_day_profit\n\n    # Hence, 0.3 * (1 - D) * 0.5 = second_day_profit, solving for D gives us:\n    D = 1 - (second_day_profit / (0.3 * 0.5))\n\n    discount_rate = D * 100  # Convert to percentage\n\n    return discount_rate\n\nans = solution()"
    ],
    "5b136def7b58491b81995c72b9ad067a": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    older_son, younger_son, older_daughter, younger_daughter = symbols('older_son younger_son older_daughter younger_daughter')\n    equation1 = Eq(younger_daughter + older_daughter + younger_son + older_son, 55)\n    equation2 = Eq(younger_son, older_son + 3)\n    equation3 = Eq(older_daughter, younger_daughter + 2)\n    equation4 = Eq(younger_son, 2 * older_daughter)\n\n    solutions = solve((equation1, equation2, equation3, equation4), (younger_daughter, older_daughter, younger_son, older_son))\n\n    return min(solutions.values())\n\nans = solution()"
    ],
    "ffba176a010a4d0187358ab3db7ff0b7": [
        "def solution():\n    jen_beads = 438\n    lily_beads = jen_beads + 195\n    total_beads = jen_beads + lily_beads\n    return total_beads\n\nans = solution()"
    ],
    "4ed24c6d67bb4a53beeb3f3413937be2": [
        "def solution():\n    total_bottles = 48\n    empty_bottles = 48\n    \n    while empty_bottles >= 4:\n        new_bottles, remaining_empty = divmod(empty_bottles, 4)\n        total_bottles += new_bottles\n        empty_bottles = new_bottles + remaining_empty\n        if empty_bottles == 3:\n            total_bottles += 1  # Borrowing 1 empty bottle\n            break  # After borrowing, Phoebe cannot get more bottles\n\n    return total_bottles\n\nans = solution()"
    ],
    "7519f32e6df34b519be6057181658e4e": [
        "def solution():\n    # Digits in 1-9 (single digits)\n    single_digits = 9 * 1\n    # Digits in 10-99 (double digits)\n    double_digits = (99 - 10 + 1) * 2\n    # Digits in 100-113 (triple digits)\n    triple_digits = (113 - 100 + 1) * 3\n    # Total number of digits\n    total_digits = single_digits + double_digits + triple_digits\n    return total_digits\n\nans = solution()"
    ],
    "c34210e64f26416da03013fc4f6aef91": [
        "def solution():\n    from sympy import symbols, Eq, solve\n    \n    pearls_total = symbols('pearls_total')\n    \n    equation = Eq(pearls_total / 2 + pearls_total / 4 + pearls_total / 6 + 3, pearls_total)\n\n    pearls_original = solve(equation, pearls_total)\n\n    return pearls_original[0]\n\nans = solution()"
    ],
    "d7ccf6eb76b340b0a3ccd8caf9bcbfda": [
        "def solution():\n    workers = 3\n    days = 3\n    total_work = workers * days\n    days_for_one_worker = total_work / 1\n\n    return days_for_one_worker\n\nans = solution()"
    ],
    "7f30a1e297f84571b00d9e89bbef9c69": [
        "def solution():\n    ans = 124 - 76\n    return ans\n\nans = solution()"
    ],
    "8bbc403c2d8f461cbbb29a4b072980aa": [
        "def solution():\n    ans = 548 - 45 + 23 - 107\n    return ans\n\nans = solution()"
    ],
    "698be5f0089b4737bfda189fa3acbd25": [
        "from itertools import permutations\n\ndef solution():\n    count = 0\n    for entrance_sequence in permutations(range(1, 4), 4):\n        if len(set(entrance_sequence)) >= 3:\n            count += 1\n    return count\n\nans = solution()"
    ],
    "067a0a4f635849c888d2b3821c72eb84": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    black, white, grey = symbols('black white grey')\n    \n    equation1 = Eq(black, white + 14)\n    equation2 = Eq(grey, white - 2)\n    equation3 = Eq(black + white + grey, 84)\n\n    solutions = solve((equation1, equation2, equation3), (black, white, grey))\n\n    return solutions[white]\n\nans = solution()"
    ],
    "bc13cb301fa84f25ab114f928effbff4": [
        "def solution():\n    total_erasers = 246\n    difference = 32\n\n    # If x is the number of erasers John's brother has, then:\n    # John has x + 32 erasers\n    # The total is x + (x + 32) = 246\n    # 2x + 32 = 246\n    # 2x = 246 - 32\n    # 2x = 214\n    # x = 214 / 2\n    brothers_erasers = (total_erasers - difference) / 2\n\n    return brothers_erasers\n\nans = solution()"
    ],
    "477830e358774ebc992553d65daa5aed": [
        "def solution():\n    for number in range(60, 81):\n        if number % 3 == 0 and number % 8 == 0:\n            return number\n\nans = solution()"
    ],
    "55d1c0e624b04989949990c12957fded": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    n = symbols('n', integer=True)\n    \n    # In a round-robin, each team plays every other team once. So the total number of games \n    # played is n*(n-1)/2 = 45, where n is the number of teams.\n    equation = Eq(n * (n - 1) / 2, 45)\n    \n    # Solve for n\n    teams = solve(equation, n)\n    \n    # Filter the number of teams that is greater than 1 since you need at least 2 teams to play.\n    ans = [team for team in teams if team > 1]\n    \n    return ans[0]\n\nans = solution()"
    ],
    "0205b2b75de94213a048023d3039d864": [
        "def solution():\n    # Mayank doubles the number and then adds 4 to get 40\n    result = 40 - 4  # Inverse of addition\n    number = result // 2  # Inverse of multiplication (doubling)\n    return number\n\nans = solution()"
    ],
    "64205cfac54a493583dddaf95648be2c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    boats, people = symbols('boats people')\n\n    equation1 = Eq(boats - 1, people / 9)\n    equation2 = Eq(boats + 1, people / 6)\n\n    solutions = solve((equation1, equation2), (boats, people))\n\n    return solutions[people]\n\nans = solution()"
    ],
    "0ab634c3b8454930935d8d7eeae75287": [
        "def solution():\n    total_glasses = 100\n    profit = 92\n    net_gain_per_unbroken_glass = 2  # $1 for delivery and $1 not paid for breakage\n    \n    # Assuming he didn't break any glasses\n    total_unbroken = total_glasses\n    hypothetical_profit = total_unbroken * net_gain_per_unbroken_glass - total_glasses  # Since he doesn't pay for any\n\n    # Find the number of broken glasses\n    broken_glasses = (hypothetical_profit - profit) // net_gain_per_unbroken_glass\n\n    return broken_glasses\n\nans = solution()"
    ],
    "e17967bd47d74eefa35caffacc4df30e": [
        "def solution():\n    ans = 17 - 8 / (-2) + 4 * (-3)\n    return ans\n\nans = solution()"
    ],
    "5fa94c02c76e4dfcaadc3cece8a6370b": [
        "def solution():\n    # Cost of 7 bananas\n    cost_of_7_bananas = 98\n    # Cost per banana\n    cost_per_banana = cost_of_7_bananas / 7\n    # Total cost for 15 bananas\n    total_cost_for_15_bananas = cost_per_banana * 15\n    # Amount of money you have in pence (£12 = 1200p)\n    amount_have = 12 * 100\n    # Change in pence\n    change_in_pence = amount_have - total_cost_for_15_bananas\n    # Convert change to pounds\n    ans = change_in_pence / 100\n    return ans\n\nans = solution()"
    ],
    "32ddbe1c6e04445387ccdb65a7acb10d": [
        "def solution():\n    for i in range(1, 57):\n        if i % 2 != 0:\n            if i + (i + 2) + (i + 4) == 57:\n                return i\n\nans = solution()"
    ],
    "71354bd305fb422b983b708a2e55f7c0": [
        "def solution():\n    possible_numbers = [2, 6, 1, 10, 5, 3]\n    for num in possible_numbers:\n        if num * 3 == 2:\n            ans = num\n            return ans\n\nans = solution()"
    ],
    "24f3890540474354abf2b6aab5320a8e": [
        "def solution():\n    count = 0\n    for x1 in range(3, 15):\n        for x2 in range(3, 15):\n            x3 = 15 - x1 - x2\n            if x3 >= 3:\n                count += 1\n    return count\n\nans = solution()"
    ],
    "e4302d8e3fe6443f86fb2f2192888ff3": [
        "def solution():\n    ans = 37 * 4 * 5\n    return ans\n\nans = solution()"
    ],
    "f73c33519c0241a3819521391ab37f99": [
        "def solution():\n    ans = 495 // 9\n    return ans\n\nans = solution()"
    ],
    "2b306992899a447c8bce44df9392630c": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    john, peter = symbols('john peter')\n\n    equation1 = Eq(john, peter + 180)\n    equation2 = Eq((4/5) * john, (1/2) * (peter - (3/10) * peter))\n\n    solutions = solve((equation1, equation2), (john, peter))\n\n    return solutions[john]\n\nans = solution()"
    ],
    "749c7cdc53e24203887314d85737cdc8": [
        "def solution():\n    multiples_of_4 = [i for i in range(5, 16) if i % 4 == 0]\n    factors_of_36 = [j for j in range(1, 37) if 36 % j == 0]\n    \n    ans = next(number for number in multiples_of_4 if number in factors_of_36)\n    return ans\n\nans = solution()"
    ],
    "f0c276e8ed7d4821a196335de4288bc4": [
        "def solution():\n    from math import gcd\n\n    pencils = 32\n    pens = 40\n\n    ans = gcd(pencils, pens)\n\n    return ans\n\nans = solution()"
    ],
    "35b813cb449f448997d243f1033f3d44": [
        "from itertools import permutations\n\ndef solution():\n    digits = [1, 3, 4, 7]\n    permuted_digits = permutations(digits, 4)\n    min_sum = float(\"inf\")\n    for permutation in permuted_digits:\n        num1 = permutation[0] * 10 + permutation[1]\n        num2 = permutation[2] * 10 + permutation[3]\n        min_sum = min(min_sum, num1 + num2)\n    return min_sum\n\nans = solution()"
    ],
    "e9ac9bbd3734447f886684d6a291bb73": [
        "def solution():\n    total_marks_before = 4 * 60  # Since the average mark is 60%, and 4 tests have been taken\n    total_marks_after = total_marks_before + 70  # Adding the score of the fifth test\n    \n    new_average = total_marks_after / 5  # Calculating the new average after 5 tests\n    return new_average\n\nans = solution()"
    ],
    "794ee5871b124fb5a74edc519e0ba668": [
        "def solution():\n    # Number of animals\n    horses = 6\n    pigs = 12\n    rabbits = 12\n\n    # Amount of apples eaten by each type of animal\n    apples_per_horse = 20\n    apples_per_pig = 15\n    apples_per_rabbit = 5\n\n    # Total amount of apples eaten by each type of animal\n    total_apples_eaten = (horses * apples_per_horse) + \\\n                         (pigs * apples_per_pig) + \\\n                         (rabbits * apples_per_rabbit)\n\n    # Average amount of apples eaten per animal\n    average_apples = total_apples_eaten / (horses + pigs + rabbits)\n    \n    return average_apples\n\nans = solution()"
    ],
    "f37924ba75cc416ea7c7bd48e7b219c5": [
        "def solution():\n    count = 0\n    for i in range(1, 10): # First digit must be between 1 and 9\n        for j in range(10): # Second digit must be between 0 and 9\n            if (i + j) < 10: # Third digit, being the sum, must be less than 10\n                count += 1\n    return count\n\nans = solution()"
    ],
    "a0efd19a57614ce1b7d082746b893c41": [
        "def solution():\n    full_price_per_cup = 4\n    num_cups = 6\n\n    # Sale plans\n    discount_plan1 = (full_price_per_cup * num_cups) * 0.1  # 10% discount for buying 6 cups\n    discount_plan2 = 3 * num_cups - 5  # Special price of $3 per cup, with a coupon of $5\n\n    # Calculate total price for each plan\n    total_price_plan1 = (full_price_per_cup * num_cups) - discount_plan1\n    total_price_plan2 = discount_plan2\n\n    # Choose the cheaper plan\n    ans = min(total_price_plan1, total_price_plan2)\n\n    return ans\n\nans = solution()"
    ],
    "ced80c2b218f4935873bd032dc151175": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    # Let the number of peaches be p\n    # Let the number of students in Class B be b\n    p, b = symbols('p b')\n\n    # Equation 1: p = 5a + 10\n    # Equation 2: p = 8b - 2\n    # Class A has 3 more students than Class B: a = b + 3\n\n    # Substitute a from Equation 3 into Equation 1:\n    # p = 5(b + 3) + 10\n    \n    equation1 = Eq(p, 5*(b + 3) + 10)\n    equation2 = Eq(p, 8*b - 2)\n\n    # Solve the simultaneous equations\n    solutions = solve((equation1, equation2), (p, b))\n\n    return solutions[p]\n\nans = solution()"
    ],
    "762265e33a1846639ea872d9802d0788": [
        "def solution():\n    number = 3172\n    nearest_hundred = round(number / 100) * 100\n    return nearest_hundred\n\nans = solution()"
    ],
    "7a1ae541cfea449eb61ea2f963babc55": [
        "def solution():\n    from sympy import symbols, Eq, solve\n\n    benson_left, jayden_left = symbols('benson_left jayden_left')\n\n    # Benson left is three times what Jayden left\n    equation1 = Eq(benson_left, 3 * jayden_left)\n    # Combined amount spent is the total initial amount minus what both have left\n    equation2 = Eq(590 - 74 - 120, benson_left + jayden_left)\n\n    solutions = solve((equation1, equation2), (benson_left, jayden_left))\n\n    return solutions[jayden_left]\n\nans = solution()"
    ],
    "8e18ac8eb4bf4eb1aa2ab441e1aa8f37": [
        "from sympy.ntheory.modular import solve_congruence\n\ndef solution():\n    congruences = [(2, 7), (3, 9), (4, 11)]\n    ans, _ = solve_congruence(*congruences)\n    return ans\n\nans = solution()"
    ],
    "359bfb2629704d10a8dd53892a5dc3f6": [
        "def solution():\n    S = sum(int('2' * i) for i in range(1, 2018))\n    last_5_digits = S % 100000\n    return last_5_digits\n\nans = solution()"
    ],
    "296fcbb0011f488f90d6fbcdc37797a7": [
        "def solution():\n    total_litre = 12\n    water_fraction = 3/4\n    water_litre = total_litre * water_fraction\n    return water_litre\n\nans = solution()"
    ],
    "af2c741435fd4a9c86c69499b4f20b42": [
        "def solution():\n    ans = 145 + 37\n    return ans\n\nans = solution()"
    ],
    "09786a51b6224d4080e5d4e9523b4288": [
        "def solution():\n    n = (7 * 9) % 10\n    return n\n\nans = solution()"
    ],
    "fd1283ec4ba7444fabc638211f9fb2c9": [
        "def solution():\n    meters = 212.4\n    centimeters_per_meter = 100\n    \n    return meters * centimeters_per_meter\n\nans = solution()"
    ],
    "40405459ec9349f392fa92d748ff0ae5": [
        "def solution():\n    number1 = 32068\n    number2 = 1774\n    ans = number1 - number2\n    return ans\n\nans = solution()"
    ],
    "b2f8f67236184468a93d906237dd6e44": [
        "def solution():\n    for num in range(1, 381):\n        if num * num + num == 380:\n            return num\n\nans = solution()"
    ],
    "98327552e4884c52bb882152f3999d49": [
        "def solution():\n    total_owners = 143\n    dog_owners = 100\n    goldfish_owners = 14\n    both_owners = 9\n\n    neither = total_owners - (dog_owners + goldfish_owners - both_owners)\n    \n    return neither\n\nans = solution()"
    ],
    "8012fb86c41b408f81b73e1a65e6726b": [
        "def solution():\n    ans = 314 - 159\n    return ans\n\nans = solution()"
    ],
    "1893b64c811b4996a464e737aadc6c57": [
        "def solution():\n    # Betty's speed in meters per minute\n    speed_betty = 900 / (6 + 3)\n\n    # Kevin's speed in meters per minute\n    # It's given that after 3 more minutes, he reaches the store\n    speed_kevin = 150 / 3\n\n    # The total time Betty takes to reach the store is 6 minutes\n    # The total distance from cinema to the store is:\n    # distance Betty walked in 6 minutes + 900 meters\n    total_distance = speed_betty * 6 + 900\n\n    # Now, find out how much time Kevin needs to walk the same distance\n    time_kevin = total_distance / speed_kevin\n\n    # Betty leaves earlier than Kevin by the difference in time it takes to reach the store\n    betty_leaves_earlier_by = time_kevin - 6\n\n    return betty_leaves_earlier_by\n\nans = solution()"
    ],
    "459d851ac5cd4dcd8da1397633b3b589": [
        "def solution():\n    total_parts = 1 + 2 + 3\n    raspberry_part = 1\n    total_volume = 300\n    raspberry_volume = (raspberry_part / total_parts) * total_volume\n    return raspberry_volume\n\nans = solution()"
    ]
}